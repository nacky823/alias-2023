
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006df0  08020000  08020000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08026df0  08026df0  00026df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026e10  08026e10  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  08026e10  08026e10  00026e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026e18  08026e18  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08026e18  08026e18  00026e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026e20  08026e20  00026e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08026e24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000918  20000010  08026e30  00030010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  08026e30  00030928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000227c8  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a3e  00000000  00000000  00052804  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e0  00000000  00000000  00056248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001260  00000000  00000000  00057628  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024140  00000000  00000000  00058888  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000121ee  00000000  00000000  0007c9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000caa24  00000000  00000000  0008ebb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001595da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005488  00000000  00000000  00159658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	20000010 	.word	0x20000010
 802001c:	00000000 	.word	0x00000000
 8020020:	08026dd8 	.word	0x08026dd8

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	20000014 	.word	0x20000014
 802003c:	08026dd8 	.word	0x08026dd8

08020040 <__aeabi_drsub>:
 8020040:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020044:	e002      	b.n	802004c <__adddf3>
 8020046:	bf00      	nop

08020048 <__aeabi_dsub>:
 8020048:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802004c <__adddf3>:
 802004c:	b530      	push	{r4, r5, lr}
 802004e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020052:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020056:	ea94 0f05 	teq	r4, r5
 802005a:	bf08      	it	eq
 802005c:	ea90 0f02 	teqeq	r0, r2
 8020060:	bf1f      	itttt	ne
 8020062:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020066:	ea55 0c02 	orrsne.w	ip, r5, r2
 802006a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802006e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020072:	f000 80e2 	beq.w	802023a <__adddf3+0x1ee>
 8020076:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802007a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802007e:	bfb8      	it	lt
 8020080:	426d      	neglt	r5, r5
 8020082:	dd0c      	ble.n	802009e <__adddf3+0x52>
 8020084:	442c      	add	r4, r5
 8020086:	ea80 0202 	eor.w	r2, r0, r2
 802008a:	ea81 0303 	eor.w	r3, r1, r3
 802008e:	ea82 0000 	eor.w	r0, r2, r0
 8020092:	ea83 0101 	eor.w	r1, r3, r1
 8020096:	ea80 0202 	eor.w	r2, r0, r2
 802009a:	ea81 0303 	eor.w	r3, r1, r3
 802009e:	2d36      	cmp	r5, #54	; 0x36
 80200a0:	bf88      	it	hi
 80200a2:	bd30      	pophi	{r4, r5, pc}
 80200a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80200a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80200ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80200b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80200b4:	d002      	beq.n	80200bc <__adddf3+0x70>
 80200b6:	4240      	negs	r0, r0
 80200b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80200bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80200c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80200c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80200c8:	d002      	beq.n	80200d0 <__adddf3+0x84>
 80200ca:	4252      	negs	r2, r2
 80200cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80200d0:	ea94 0f05 	teq	r4, r5
 80200d4:	f000 80a7 	beq.w	8020226 <__adddf3+0x1da>
 80200d8:	f1a4 0401 	sub.w	r4, r4, #1
 80200dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80200e0:	db0d      	blt.n	80200fe <__adddf3+0xb2>
 80200e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80200e6:	fa22 f205 	lsr.w	r2, r2, r5
 80200ea:	1880      	adds	r0, r0, r2
 80200ec:	f141 0100 	adc.w	r1, r1, #0
 80200f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80200f4:	1880      	adds	r0, r0, r2
 80200f6:	fa43 f305 	asr.w	r3, r3, r5
 80200fa:	4159      	adcs	r1, r3
 80200fc:	e00e      	b.n	802011c <__adddf3+0xd0>
 80200fe:	f1a5 0520 	sub.w	r5, r5, #32
 8020102:	f10e 0e20 	add.w	lr, lr, #32
 8020106:	2a01      	cmp	r2, #1
 8020108:	fa03 fc0e 	lsl.w	ip, r3, lr
 802010c:	bf28      	it	cs
 802010e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020112:	fa43 f305 	asr.w	r3, r3, r5
 8020116:	18c0      	adds	r0, r0, r3
 8020118:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802011c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020120:	d507      	bpl.n	8020132 <__adddf3+0xe6>
 8020122:	f04f 0e00 	mov.w	lr, #0
 8020126:	f1dc 0c00 	rsbs	ip, ip, #0
 802012a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802012e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020132:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020136:	d31b      	bcc.n	8020170 <__adddf3+0x124>
 8020138:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802013c:	d30c      	bcc.n	8020158 <__adddf3+0x10c>
 802013e:	0849      	lsrs	r1, r1, #1
 8020140:	ea5f 0030 	movs.w	r0, r0, rrx
 8020144:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020148:	f104 0401 	add.w	r4, r4, #1
 802014c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020150:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020154:	f080 809a 	bcs.w	802028c <__adddf3+0x240>
 8020158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802015c:	bf08      	it	eq
 802015e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020162:	f150 0000 	adcs.w	r0, r0, #0
 8020166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802016a:	ea41 0105 	orr.w	r1, r1, r5
 802016e:	bd30      	pop	{r4, r5, pc}
 8020170:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020174:	4140      	adcs	r0, r0
 8020176:	eb41 0101 	adc.w	r1, r1, r1
 802017a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802017e:	f1a4 0401 	sub.w	r4, r4, #1
 8020182:	d1e9      	bne.n	8020158 <__adddf3+0x10c>
 8020184:	f091 0f00 	teq	r1, #0
 8020188:	bf04      	itt	eq
 802018a:	4601      	moveq	r1, r0
 802018c:	2000      	moveq	r0, #0
 802018e:	fab1 f381 	clz	r3, r1
 8020192:	bf08      	it	eq
 8020194:	3320      	addeq	r3, #32
 8020196:	f1a3 030b 	sub.w	r3, r3, #11
 802019a:	f1b3 0220 	subs.w	r2, r3, #32
 802019e:	da0c      	bge.n	80201ba <__adddf3+0x16e>
 80201a0:	320c      	adds	r2, #12
 80201a2:	dd08      	ble.n	80201b6 <__adddf3+0x16a>
 80201a4:	f102 0c14 	add.w	ip, r2, #20
 80201a8:	f1c2 020c 	rsb	r2, r2, #12
 80201ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80201b0:	fa21 f102 	lsr.w	r1, r1, r2
 80201b4:	e00c      	b.n	80201d0 <__adddf3+0x184>
 80201b6:	f102 0214 	add.w	r2, r2, #20
 80201ba:	bfd8      	it	le
 80201bc:	f1c2 0c20 	rsble	ip, r2, #32
 80201c0:	fa01 f102 	lsl.w	r1, r1, r2
 80201c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80201c8:	bfdc      	itt	le
 80201ca:	ea41 010c 	orrle.w	r1, r1, ip
 80201ce:	4090      	lslle	r0, r2
 80201d0:	1ae4      	subs	r4, r4, r3
 80201d2:	bfa2      	ittt	ge
 80201d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80201d8:	4329      	orrge	r1, r5
 80201da:	bd30      	popge	{r4, r5, pc}
 80201dc:	ea6f 0404 	mvn.w	r4, r4
 80201e0:	3c1f      	subs	r4, #31
 80201e2:	da1c      	bge.n	802021e <__adddf3+0x1d2>
 80201e4:	340c      	adds	r4, #12
 80201e6:	dc0e      	bgt.n	8020206 <__adddf3+0x1ba>
 80201e8:	f104 0414 	add.w	r4, r4, #20
 80201ec:	f1c4 0220 	rsb	r2, r4, #32
 80201f0:	fa20 f004 	lsr.w	r0, r0, r4
 80201f4:	fa01 f302 	lsl.w	r3, r1, r2
 80201f8:	ea40 0003 	orr.w	r0, r0, r3
 80201fc:	fa21 f304 	lsr.w	r3, r1, r4
 8020200:	ea45 0103 	orr.w	r1, r5, r3
 8020204:	bd30      	pop	{r4, r5, pc}
 8020206:	f1c4 040c 	rsb	r4, r4, #12
 802020a:	f1c4 0220 	rsb	r2, r4, #32
 802020e:	fa20 f002 	lsr.w	r0, r0, r2
 8020212:	fa01 f304 	lsl.w	r3, r1, r4
 8020216:	ea40 0003 	orr.w	r0, r0, r3
 802021a:	4629      	mov	r1, r5
 802021c:	bd30      	pop	{r4, r5, pc}
 802021e:	fa21 f004 	lsr.w	r0, r1, r4
 8020222:	4629      	mov	r1, r5
 8020224:	bd30      	pop	{r4, r5, pc}
 8020226:	f094 0f00 	teq	r4, #0
 802022a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802022e:	bf06      	itte	eq
 8020230:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020234:	3401      	addeq	r4, #1
 8020236:	3d01      	subne	r5, #1
 8020238:	e74e      	b.n	80200d8 <__adddf3+0x8c>
 802023a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802023e:	bf18      	it	ne
 8020240:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020244:	d029      	beq.n	802029a <__adddf3+0x24e>
 8020246:	ea94 0f05 	teq	r4, r5
 802024a:	bf08      	it	eq
 802024c:	ea90 0f02 	teqeq	r0, r2
 8020250:	d005      	beq.n	802025e <__adddf3+0x212>
 8020252:	ea54 0c00 	orrs.w	ip, r4, r0
 8020256:	bf04      	itt	eq
 8020258:	4619      	moveq	r1, r3
 802025a:	4610      	moveq	r0, r2
 802025c:	bd30      	pop	{r4, r5, pc}
 802025e:	ea91 0f03 	teq	r1, r3
 8020262:	bf1e      	ittt	ne
 8020264:	2100      	movne	r1, #0
 8020266:	2000      	movne	r0, #0
 8020268:	bd30      	popne	{r4, r5, pc}
 802026a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802026e:	d105      	bne.n	802027c <__adddf3+0x230>
 8020270:	0040      	lsls	r0, r0, #1
 8020272:	4149      	adcs	r1, r1
 8020274:	bf28      	it	cs
 8020276:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802027a:	bd30      	pop	{r4, r5, pc}
 802027c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020280:	bf3c      	itt	cc
 8020282:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020286:	bd30      	popcc	{r4, r5, pc}
 8020288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802028c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020290:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020294:	f04f 0000 	mov.w	r0, #0
 8020298:	bd30      	pop	{r4, r5, pc}
 802029a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802029e:	bf1a      	itte	ne
 80202a0:	4619      	movne	r1, r3
 80202a2:	4610      	movne	r0, r2
 80202a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80202a8:	bf1c      	itt	ne
 80202aa:	460b      	movne	r3, r1
 80202ac:	4602      	movne	r2, r0
 80202ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80202b2:	bf06      	itte	eq
 80202b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80202b8:	ea91 0f03 	teqeq	r1, r3
 80202bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80202c0:	bd30      	pop	{r4, r5, pc}
 80202c2:	bf00      	nop

080202c4 <__aeabi_ui2d>:
 80202c4:	f090 0f00 	teq	r0, #0
 80202c8:	bf04      	itt	eq
 80202ca:	2100      	moveq	r1, #0
 80202cc:	4770      	bxeq	lr
 80202ce:	b530      	push	{r4, r5, lr}
 80202d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202d8:	f04f 0500 	mov.w	r5, #0
 80202dc:	f04f 0100 	mov.w	r1, #0
 80202e0:	e750      	b.n	8020184 <__adddf3+0x138>
 80202e2:	bf00      	nop

080202e4 <__aeabi_i2d>:
 80202e4:	f090 0f00 	teq	r0, #0
 80202e8:	bf04      	itt	eq
 80202ea:	2100      	moveq	r1, #0
 80202ec:	4770      	bxeq	lr
 80202ee:	b530      	push	{r4, r5, lr}
 80202f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80202fc:	bf48      	it	mi
 80202fe:	4240      	negmi	r0, r0
 8020300:	f04f 0100 	mov.w	r1, #0
 8020304:	e73e      	b.n	8020184 <__adddf3+0x138>
 8020306:	bf00      	nop

08020308 <__aeabi_f2d>:
 8020308:	0042      	lsls	r2, r0, #1
 802030a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802030e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020312:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020316:	bf1f      	itttt	ne
 8020318:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802031c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020320:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020324:	4770      	bxne	lr
 8020326:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802032a:	bf08      	it	eq
 802032c:	4770      	bxeq	lr
 802032e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020332:	bf04      	itt	eq
 8020334:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020338:	4770      	bxeq	lr
 802033a:	b530      	push	{r4, r5, lr}
 802033c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020344:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020348:	e71c      	b.n	8020184 <__adddf3+0x138>
 802034a:	bf00      	nop

0802034c <__aeabi_ul2d>:
 802034c:	ea50 0201 	orrs.w	r2, r0, r1
 8020350:	bf08      	it	eq
 8020352:	4770      	bxeq	lr
 8020354:	b530      	push	{r4, r5, lr}
 8020356:	f04f 0500 	mov.w	r5, #0
 802035a:	e00a      	b.n	8020372 <__aeabi_l2d+0x16>

0802035c <__aeabi_l2d>:
 802035c:	ea50 0201 	orrs.w	r2, r0, r1
 8020360:	bf08      	it	eq
 8020362:	4770      	bxeq	lr
 8020364:	b530      	push	{r4, r5, lr}
 8020366:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802036a:	d502      	bpl.n	8020372 <__aeabi_l2d+0x16>
 802036c:	4240      	negs	r0, r0
 802036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020372:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020376:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802037a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802037e:	f43f aed8 	beq.w	8020132 <__adddf3+0xe6>
 8020382:	f04f 0203 	mov.w	r2, #3
 8020386:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802038a:	bf18      	it	ne
 802038c:	3203      	addne	r2, #3
 802038e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020392:	bf18      	it	ne
 8020394:	3203      	addne	r2, #3
 8020396:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802039a:	f1c2 0320 	rsb	r3, r2, #32
 802039e:	fa00 fc03 	lsl.w	ip, r0, r3
 80203a2:	fa20 f002 	lsr.w	r0, r0, r2
 80203a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80203aa:	ea40 000e 	orr.w	r0, r0, lr
 80203ae:	fa21 f102 	lsr.w	r1, r1, r2
 80203b2:	4414      	add	r4, r2
 80203b4:	e6bd      	b.n	8020132 <__adddf3+0xe6>
 80203b6:	bf00      	nop

080203b8 <__aeabi_dmul>:
 80203b8:	b570      	push	{r4, r5, r6, lr}
 80203ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80203be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80203c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80203c6:	bf1d      	ittte	ne
 80203c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80203cc:	ea94 0f0c 	teqne	r4, ip
 80203d0:	ea95 0f0c 	teqne	r5, ip
 80203d4:	f000 f8de 	bleq	8020594 <__aeabi_dmul+0x1dc>
 80203d8:	442c      	add	r4, r5
 80203da:	ea81 0603 	eor.w	r6, r1, r3
 80203de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80203e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80203e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80203ea:	bf18      	it	ne
 80203ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80203f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80203f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80203f8:	d038      	beq.n	802046c <__aeabi_dmul+0xb4>
 80203fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80203fe:	f04f 0500 	mov.w	r5, #0
 8020402:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020406:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802040a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802040e:	f04f 0600 	mov.w	r6, #0
 8020412:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020416:	f09c 0f00 	teq	ip, #0
 802041a:	bf18      	it	ne
 802041c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020420:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020424:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020428:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802042c:	d204      	bcs.n	8020438 <__aeabi_dmul+0x80>
 802042e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020432:	416d      	adcs	r5, r5
 8020434:	eb46 0606 	adc.w	r6, r6, r6
 8020438:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802043c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020440:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020444:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020448:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802044c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020450:	bf88      	it	hi
 8020452:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020456:	d81e      	bhi.n	8020496 <__aeabi_dmul+0xde>
 8020458:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802045c:	bf08      	it	eq
 802045e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020462:	f150 0000 	adcs.w	r0, r0, #0
 8020466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802046a:	bd70      	pop	{r4, r5, r6, pc}
 802046c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020470:	ea46 0101 	orr.w	r1, r6, r1
 8020474:	ea40 0002 	orr.w	r0, r0, r2
 8020478:	ea81 0103 	eor.w	r1, r1, r3
 802047c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020480:	bfc2      	ittt	gt
 8020482:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020486:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802048a:	bd70      	popgt	{r4, r5, r6, pc}
 802048c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020490:	f04f 0e00 	mov.w	lr, #0
 8020494:	3c01      	subs	r4, #1
 8020496:	f300 80ab 	bgt.w	80205f0 <__aeabi_dmul+0x238>
 802049a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802049e:	bfde      	ittt	le
 80204a0:	2000      	movle	r0, #0
 80204a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80204a6:	bd70      	pople	{r4, r5, r6, pc}
 80204a8:	f1c4 0400 	rsb	r4, r4, #0
 80204ac:	3c20      	subs	r4, #32
 80204ae:	da35      	bge.n	802051c <__aeabi_dmul+0x164>
 80204b0:	340c      	adds	r4, #12
 80204b2:	dc1b      	bgt.n	80204ec <__aeabi_dmul+0x134>
 80204b4:	f104 0414 	add.w	r4, r4, #20
 80204b8:	f1c4 0520 	rsb	r5, r4, #32
 80204bc:	fa00 f305 	lsl.w	r3, r0, r5
 80204c0:	fa20 f004 	lsr.w	r0, r0, r4
 80204c4:	fa01 f205 	lsl.w	r2, r1, r5
 80204c8:	ea40 0002 	orr.w	r0, r0, r2
 80204cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80204d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80204d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80204d8:	fa21 f604 	lsr.w	r6, r1, r4
 80204dc:	eb42 0106 	adc.w	r1, r2, r6
 80204e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80204e4:	bf08      	it	eq
 80204e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80204ea:	bd70      	pop	{r4, r5, r6, pc}
 80204ec:	f1c4 040c 	rsb	r4, r4, #12
 80204f0:	f1c4 0520 	rsb	r5, r4, #32
 80204f4:	fa00 f304 	lsl.w	r3, r0, r4
 80204f8:	fa20 f005 	lsr.w	r0, r0, r5
 80204fc:	fa01 f204 	lsl.w	r2, r1, r4
 8020500:	ea40 0002 	orr.w	r0, r0, r2
 8020504:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020508:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802050c:	f141 0100 	adc.w	r1, r1, #0
 8020510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020514:	bf08      	it	eq
 8020516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802051a:	bd70      	pop	{r4, r5, r6, pc}
 802051c:	f1c4 0520 	rsb	r5, r4, #32
 8020520:	fa00 f205 	lsl.w	r2, r0, r5
 8020524:	ea4e 0e02 	orr.w	lr, lr, r2
 8020528:	fa20 f304 	lsr.w	r3, r0, r4
 802052c:	fa01 f205 	lsl.w	r2, r1, r5
 8020530:	ea43 0302 	orr.w	r3, r3, r2
 8020534:	fa21 f004 	lsr.w	r0, r1, r4
 8020538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802053c:	fa21 f204 	lsr.w	r2, r1, r4
 8020540:	ea20 0002 	bic.w	r0, r0, r2
 8020544:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802054c:	bf08      	it	eq
 802054e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020552:	bd70      	pop	{r4, r5, r6, pc}
 8020554:	f094 0f00 	teq	r4, #0
 8020558:	d10f      	bne.n	802057a <__aeabi_dmul+0x1c2>
 802055a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802055e:	0040      	lsls	r0, r0, #1
 8020560:	eb41 0101 	adc.w	r1, r1, r1
 8020564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020568:	bf08      	it	eq
 802056a:	3c01      	subeq	r4, #1
 802056c:	d0f7      	beq.n	802055e <__aeabi_dmul+0x1a6>
 802056e:	ea41 0106 	orr.w	r1, r1, r6
 8020572:	f095 0f00 	teq	r5, #0
 8020576:	bf18      	it	ne
 8020578:	4770      	bxne	lr
 802057a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802057e:	0052      	lsls	r2, r2, #1
 8020580:	eb43 0303 	adc.w	r3, r3, r3
 8020584:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020588:	bf08      	it	eq
 802058a:	3d01      	subeq	r5, #1
 802058c:	d0f7      	beq.n	802057e <__aeabi_dmul+0x1c6>
 802058e:	ea43 0306 	orr.w	r3, r3, r6
 8020592:	4770      	bx	lr
 8020594:	ea94 0f0c 	teq	r4, ip
 8020598:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802059c:	bf18      	it	ne
 802059e:	ea95 0f0c 	teqne	r5, ip
 80205a2:	d00c      	beq.n	80205be <__aeabi_dmul+0x206>
 80205a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205a8:	bf18      	it	ne
 80205aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205ae:	d1d1      	bne.n	8020554 <__aeabi_dmul+0x19c>
 80205b0:	ea81 0103 	eor.w	r1, r1, r3
 80205b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205b8:	f04f 0000 	mov.w	r0, #0
 80205bc:	bd70      	pop	{r4, r5, r6, pc}
 80205be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205c2:	bf06      	itte	eq
 80205c4:	4610      	moveq	r0, r2
 80205c6:	4619      	moveq	r1, r3
 80205c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205cc:	d019      	beq.n	8020602 <__aeabi_dmul+0x24a>
 80205ce:	ea94 0f0c 	teq	r4, ip
 80205d2:	d102      	bne.n	80205da <__aeabi_dmul+0x222>
 80205d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80205d8:	d113      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205da:	ea95 0f0c 	teq	r5, ip
 80205de:	d105      	bne.n	80205ec <__aeabi_dmul+0x234>
 80205e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80205e4:	bf1c      	itt	ne
 80205e6:	4610      	movne	r0, r2
 80205e8:	4619      	movne	r1, r3
 80205ea:	d10a      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205ec:	ea81 0103 	eor.w	r1, r1, r3
 80205f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80205f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80205fc:	f04f 0000 	mov.w	r0, #0
 8020600:	bd70      	pop	{r4, r5, r6, pc}
 8020602:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020606:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802060a:	bd70      	pop	{r4, r5, r6, pc}

0802060c <__aeabi_ddiv>:
 802060c:	b570      	push	{r4, r5, r6, lr}
 802060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802061a:	bf1d      	ittte	ne
 802061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020620:	ea94 0f0c 	teqne	r4, ip
 8020624:	ea95 0f0c 	teqne	r5, ip
 8020628:	f000 f8a7 	bleq	802077a <__aeabi_ddiv+0x16e>
 802062c:	eba4 0405 	sub.w	r4, r4, r5
 8020630:	ea81 0e03 	eor.w	lr, r1, r3
 8020634:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802063c:	f000 8088 	beq.w	8020750 <__aeabi_ddiv+0x144>
 8020640:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020644:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020648:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802064c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020650:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020654:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020658:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802065c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020660:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020664:	429d      	cmp	r5, r3
 8020666:	bf08      	it	eq
 8020668:	4296      	cmpeq	r6, r2
 802066a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802066e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020672:	d202      	bcs.n	802067a <__aeabi_ddiv+0x6e>
 8020674:	085b      	lsrs	r3, r3, #1
 8020676:	ea4f 0232 	mov.w	r2, r2, rrx
 802067a:	1ab6      	subs	r6, r6, r2
 802067c:	eb65 0503 	sbc.w	r5, r5, r3
 8020680:	085b      	lsrs	r3, r3, #1
 8020682:	ea4f 0232 	mov.w	r2, r2, rrx
 8020686:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802068a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802068e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020692:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020696:	bf22      	ittt	cs
 8020698:	1ab6      	subcs	r6, r6, r2
 802069a:	4675      	movcs	r5, lr
 802069c:	ea40 000c 	orrcs.w	r0, r0, ip
 80206a0:	085b      	lsrs	r3, r3, #1
 80206a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206ae:	bf22      	ittt	cs
 80206b0:	1ab6      	subcs	r6, r6, r2
 80206b2:	4675      	movcs	r5, lr
 80206b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80206b8:	085b      	lsrs	r3, r3, #1
 80206ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80206be:	ebb6 0e02 	subs.w	lr, r6, r2
 80206c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206c6:	bf22      	ittt	cs
 80206c8:	1ab6      	subcs	r6, r6, r2
 80206ca:	4675      	movcs	r5, lr
 80206cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80206d0:	085b      	lsrs	r3, r3, #1
 80206d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206de:	bf22      	ittt	cs
 80206e0:	1ab6      	subcs	r6, r6, r2
 80206e2:	4675      	movcs	r5, lr
 80206e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80206e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80206ec:	d018      	beq.n	8020720 <__aeabi_ddiv+0x114>
 80206ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80206f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80206f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80206fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80206fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020702:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020706:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802070a:	d1c0      	bne.n	802068e <__aeabi_ddiv+0x82>
 802070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020710:	d10b      	bne.n	802072a <__aeabi_ddiv+0x11e>
 8020712:	ea41 0100 	orr.w	r1, r1, r0
 8020716:	f04f 0000 	mov.w	r0, #0
 802071a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802071e:	e7b6      	b.n	802068e <__aeabi_ddiv+0x82>
 8020720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020724:	bf04      	itt	eq
 8020726:	4301      	orreq	r1, r0
 8020728:	2000      	moveq	r0, #0
 802072a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802072e:	bf88      	it	hi
 8020730:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020734:	f63f aeaf 	bhi.w	8020496 <__aeabi_dmul+0xde>
 8020738:	ebb5 0c03 	subs.w	ip, r5, r3
 802073c:	bf04      	itt	eq
 802073e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020742:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020746:	f150 0000 	adcs.w	r0, r0, #0
 802074a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802074e:	bd70      	pop	{r4, r5, r6, pc}
 8020750:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020754:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020758:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802075c:	bfc2      	ittt	gt
 802075e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020762:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020766:	bd70      	popgt	{r4, r5, r6, pc}
 8020768:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802076c:	f04f 0e00 	mov.w	lr, #0
 8020770:	3c01      	subs	r4, #1
 8020772:	e690      	b.n	8020496 <__aeabi_dmul+0xde>
 8020774:	ea45 0e06 	orr.w	lr, r5, r6
 8020778:	e68d      	b.n	8020496 <__aeabi_dmul+0xde>
 802077a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802077e:	ea94 0f0c 	teq	r4, ip
 8020782:	bf08      	it	eq
 8020784:	ea95 0f0c 	teqeq	r5, ip
 8020788:	f43f af3b 	beq.w	8020602 <__aeabi_dmul+0x24a>
 802078c:	ea94 0f0c 	teq	r4, ip
 8020790:	d10a      	bne.n	80207a8 <__aeabi_ddiv+0x19c>
 8020792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020796:	f47f af34 	bne.w	8020602 <__aeabi_dmul+0x24a>
 802079a:	ea95 0f0c 	teq	r5, ip
 802079e:	f47f af25 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207a2:	4610      	mov	r0, r2
 80207a4:	4619      	mov	r1, r3
 80207a6:	e72c      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207a8:	ea95 0f0c 	teq	r5, ip
 80207ac:	d106      	bne.n	80207bc <__aeabi_ddiv+0x1b0>
 80207ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80207b2:	f43f aefd 	beq.w	80205b0 <__aeabi_dmul+0x1f8>
 80207b6:	4610      	mov	r0, r2
 80207b8:	4619      	mov	r1, r3
 80207ba:	e722      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207c0:	bf18      	it	ne
 80207c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207c6:	f47f aec5 	bne.w	8020554 <__aeabi_dmul+0x19c>
 80207ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80207ce:	f47f af0d 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80207d6:	f47f aeeb 	bne.w	80205b0 <__aeabi_dmul+0x1f8>
 80207da:	e712      	b.n	8020602 <__aeabi_dmul+0x24a>

080207dc <__gedf2>:
 80207dc:	f04f 3cff 	mov.w	ip, #4294967295
 80207e0:	e006      	b.n	80207f0 <__cmpdf2+0x4>
 80207e2:	bf00      	nop

080207e4 <__ledf2>:
 80207e4:	f04f 0c01 	mov.w	ip, #1
 80207e8:	e002      	b.n	80207f0 <__cmpdf2+0x4>
 80207ea:	bf00      	nop

080207ec <__cmpdf2>:
 80207ec:	f04f 0c01 	mov.w	ip, #1
 80207f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80207f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80207f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80207fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020800:	bf18      	it	ne
 8020802:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020806:	d01b      	beq.n	8020840 <__cmpdf2+0x54>
 8020808:	b001      	add	sp, #4
 802080a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802080e:	bf0c      	ite	eq
 8020810:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020814:	ea91 0f03 	teqne	r1, r3
 8020818:	bf02      	ittt	eq
 802081a:	ea90 0f02 	teqeq	r0, r2
 802081e:	2000      	moveq	r0, #0
 8020820:	4770      	bxeq	lr
 8020822:	f110 0f00 	cmn.w	r0, #0
 8020826:	ea91 0f03 	teq	r1, r3
 802082a:	bf58      	it	pl
 802082c:	4299      	cmppl	r1, r3
 802082e:	bf08      	it	eq
 8020830:	4290      	cmpeq	r0, r2
 8020832:	bf2c      	ite	cs
 8020834:	17d8      	asrcs	r0, r3, #31
 8020836:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802083a:	f040 0001 	orr.w	r0, r0, #1
 802083e:	4770      	bx	lr
 8020840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020848:	d102      	bne.n	8020850 <__cmpdf2+0x64>
 802084a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802084e:	d107      	bne.n	8020860 <__cmpdf2+0x74>
 8020850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020858:	d1d6      	bne.n	8020808 <__cmpdf2+0x1c>
 802085a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802085e:	d0d3      	beq.n	8020808 <__cmpdf2+0x1c>
 8020860:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020864:	4770      	bx	lr
 8020866:	bf00      	nop

08020868 <__aeabi_cdrcmple>:
 8020868:	4684      	mov	ip, r0
 802086a:	4610      	mov	r0, r2
 802086c:	4662      	mov	r2, ip
 802086e:	468c      	mov	ip, r1
 8020870:	4619      	mov	r1, r3
 8020872:	4663      	mov	r3, ip
 8020874:	e000      	b.n	8020878 <__aeabi_cdcmpeq>
 8020876:	bf00      	nop

08020878 <__aeabi_cdcmpeq>:
 8020878:	b501      	push	{r0, lr}
 802087a:	f7ff ffb7 	bl	80207ec <__cmpdf2>
 802087e:	2800      	cmp	r0, #0
 8020880:	bf48      	it	mi
 8020882:	f110 0f00 	cmnmi.w	r0, #0
 8020886:	bd01      	pop	{r0, pc}

08020888 <__aeabi_dcmpeq>:
 8020888:	f84d ed08 	str.w	lr, [sp, #-8]!
 802088c:	f7ff fff4 	bl	8020878 <__aeabi_cdcmpeq>
 8020890:	bf0c      	ite	eq
 8020892:	2001      	moveq	r0, #1
 8020894:	2000      	movne	r0, #0
 8020896:	f85d fb08 	ldr.w	pc, [sp], #8
 802089a:	bf00      	nop

0802089c <__aeabi_dcmplt>:
 802089c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208a0:	f7ff ffea 	bl	8020878 <__aeabi_cdcmpeq>
 80208a4:	bf34      	ite	cc
 80208a6:	2001      	movcc	r0, #1
 80208a8:	2000      	movcs	r0, #0
 80208aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ae:	bf00      	nop

080208b0 <__aeabi_dcmple>:
 80208b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208b4:	f7ff ffe0 	bl	8020878 <__aeabi_cdcmpeq>
 80208b8:	bf94      	ite	ls
 80208ba:	2001      	movls	r0, #1
 80208bc:	2000      	movhi	r0, #0
 80208be:	f85d fb08 	ldr.w	pc, [sp], #8
 80208c2:	bf00      	nop

080208c4 <__aeabi_dcmpge>:
 80208c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208c8:	f7ff ffce 	bl	8020868 <__aeabi_cdrcmple>
 80208cc:	bf94      	ite	ls
 80208ce:	2001      	movls	r0, #1
 80208d0:	2000      	movhi	r0, #0
 80208d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80208d6:	bf00      	nop

080208d8 <__aeabi_dcmpgt>:
 80208d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208dc:	f7ff ffc4 	bl	8020868 <__aeabi_cdrcmple>
 80208e0:	bf34      	ite	cc
 80208e2:	2001      	movcc	r0, #1
 80208e4:	2000      	movcs	r0, #0
 80208e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ea:	bf00      	nop

080208ec <__aeabi_d2f>:
 80208ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80208f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80208f4:	bf24      	itt	cs
 80208f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80208fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80208fe:	d90d      	bls.n	802091c <__aeabi_d2f+0x30>
 8020900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 802090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020914:	bf08      	it	eq
 8020916:	f020 0001 	biceq.w	r0, r0, #1
 802091a:	4770      	bx	lr
 802091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020920:	d121      	bne.n	8020966 <__aeabi_d2f+0x7a>
 8020922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020926:	bfbc      	itt	lt
 8020928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 802092c:	4770      	bxlt	lr
 802092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020936:	f1c2 0218 	rsb	r2, r2, #24
 802093a:	f1c2 0c20 	rsb	ip, r2, #32
 802093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8020942:	fa20 f002 	lsr.w	r0, r0, r2
 8020946:	bf18      	it	ne
 8020948:	f040 0001 	orrne.w	r0, r0, #1
 802094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020958:	ea40 000c 	orr.w	r0, r0, ip
 802095c:	fa23 f302 	lsr.w	r3, r3, r2
 8020960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020964:	e7cc      	b.n	8020900 <__aeabi_d2f+0x14>
 8020966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 802096a:	d107      	bne.n	802097c <__aeabi_d2f+0x90>
 802096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020970:	bf1e      	ittt	ne
 8020972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 802097a:	4770      	bxne	lr
 802097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020988:	4770      	bx	lr
 802098a:	bf00      	nop

0802098c <__aeabi_uldivmod>:
 802098c:	b953      	cbnz	r3, 80209a4 <__aeabi_uldivmod+0x18>
 802098e:	b94a      	cbnz	r2, 80209a4 <__aeabi_uldivmod+0x18>
 8020990:	2900      	cmp	r1, #0
 8020992:	bf08      	it	eq
 8020994:	2800      	cmpeq	r0, #0
 8020996:	bf1c      	itt	ne
 8020998:	f04f 31ff 	movne.w	r1, #4294967295
 802099c:	f04f 30ff 	movne.w	r0, #4294967295
 80209a0:	f000 b972 	b.w	8020c88 <__aeabi_idiv0>
 80209a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80209a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80209ac:	f000 f806 	bl	80209bc <__udivmoddi4>
 80209b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80209b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80209b8:	b004      	add	sp, #16
 80209ba:	4770      	bx	lr

080209bc <__udivmoddi4>:
 80209bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80209c0:	9e08      	ldr	r6, [sp, #32]
 80209c2:	4604      	mov	r4, r0
 80209c4:	4688      	mov	r8, r1
 80209c6:	2b00      	cmp	r3, #0
 80209c8:	d14b      	bne.n	8020a62 <__udivmoddi4+0xa6>
 80209ca:	428a      	cmp	r2, r1
 80209cc:	4615      	mov	r5, r2
 80209ce:	d967      	bls.n	8020aa0 <__udivmoddi4+0xe4>
 80209d0:	fab2 f282 	clz	r2, r2
 80209d4:	b14a      	cbz	r2, 80209ea <__udivmoddi4+0x2e>
 80209d6:	f1c2 0720 	rsb	r7, r2, #32
 80209da:	fa01 f302 	lsl.w	r3, r1, r2
 80209de:	fa20 f707 	lsr.w	r7, r0, r7
 80209e2:	4095      	lsls	r5, r2
 80209e4:	ea47 0803 	orr.w	r8, r7, r3
 80209e8:	4094      	lsls	r4, r2
 80209ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80209ee:	0c23      	lsrs	r3, r4, #16
 80209f0:	fbb8 f7fe 	udiv	r7, r8, lr
 80209f4:	fa1f fc85 	uxth.w	ip, r5
 80209f8:	fb0e 8817 	mls	r8, lr, r7, r8
 80209fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020a00:	fb07 f10c 	mul.w	r1, r7, ip
 8020a04:	4299      	cmp	r1, r3
 8020a06:	d909      	bls.n	8020a1c <__udivmoddi4+0x60>
 8020a08:	18eb      	adds	r3, r5, r3
 8020a0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8020a0e:	f080 811b 	bcs.w	8020c48 <__udivmoddi4+0x28c>
 8020a12:	4299      	cmp	r1, r3
 8020a14:	f240 8118 	bls.w	8020c48 <__udivmoddi4+0x28c>
 8020a18:	3f02      	subs	r7, #2
 8020a1a:	442b      	add	r3, r5
 8020a1c:	1a5b      	subs	r3, r3, r1
 8020a1e:	b2a4      	uxth	r4, r4
 8020a20:	fbb3 f0fe 	udiv	r0, r3, lr
 8020a24:	fb0e 3310 	mls	r3, lr, r0, r3
 8020a28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020a2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8020a30:	45a4      	cmp	ip, r4
 8020a32:	d909      	bls.n	8020a48 <__udivmoddi4+0x8c>
 8020a34:	192c      	adds	r4, r5, r4
 8020a36:	f100 33ff 	add.w	r3, r0, #4294967295
 8020a3a:	f080 8107 	bcs.w	8020c4c <__udivmoddi4+0x290>
 8020a3e:	45a4      	cmp	ip, r4
 8020a40:	f240 8104 	bls.w	8020c4c <__udivmoddi4+0x290>
 8020a44:	3802      	subs	r0, #2
 8020a46:	442c      	add	r4, r5
 8020a48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020a4c:	eba4 040c 	sub.w	r4, r4, ip
 8020a50:	2700      	movs	r7, #0
 8020a52:	b11e      	cbz	r6, 8020a5c <__udivmoddi4+0xa0>
 8020a54:	40d4      	lsrs	r4, r2
 8020a56:	2300      	movs	r3, #0
 8020a58:	e9c6 4300 	strd	r4, r3, [r6]
 8020a5c:	4639      	mov	r1, r7
 8020a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a62:	428b      	cmp	r3, r1
 8020a64:	d909      	bls.n	8020a7a <__udivmoddi4+0xbe>
 8020a66:	2e00      	cmp	r6, #0
 8020a68:	f000 80eb 	beq.w	8020c42 <__udivmoddi4+0x286>
 8020a6c:	2700      	movs	r7, #0
 8020a6e:	e9c6 0100 	strd	r0, r1, [r6]
 8020a72:	4638      	mov	r0, r7
 8020a74:	4639      	mov	r1, r7
 8020a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a7a:	fab3 f783 	clz	r7, r3
 8020a7e:	2f00      	cmp	r7, #0
 8020a80:	d147      	bne.n	8020b12 <__udivmoddi4+0x156>
 8020a82:	428b      	cmp	r3, r1
 8020a84:	d302      	bcc.n	8020a8c <__udivmoddi4+0xd0>
 8020a86:	4282      	cmp	r2, r0
 8020a88:	f200 80fa 	bhi.w	8020c80 <__udivmoddi4+0x2c4>
 8020a8c:	1a84      	subs	r4, r0, r2
 8020a8e:	eb61 0303 	sbc.w	r3, r1, r3
 8020a92:	2001      	movs	r0, #1
 8020a94:	4698      	mov	r8, r3
 8020a96:	2e00      	cmp	r6, #0
 8020a98:	d0e0      	beq.n	8020a5c <__udivmoddi4+0xa0>
 8020a9a:	e9c6 4800 	strd	r4, r8, [r6]
 8020a9e:	e7dd      	b.n	8020a5c <__udivmoddi4+0xa0>
 8020aa0:	b902      	cbnz	r2, 8020aa4 <__udivmoddi4+0xe8>
 8020aa2:	deff      	udf	#255	; 0xff
 8020aa4:	fab2 f282 	clz	r2, r2
 8020aa8:	2a00      	cmp	r2, #0
 8020aaa:	f040 808f 	bne.w	8020bcc <__udivmoddi4+0x210>
 8020aae:	1b49      	subs	r1, r1, r5
 8020ab0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020ab4:	fa1f f885 	uxth.w	r8, r5
 8020ab8:	2701      	movs	r7, #1
 8020aba:	fbb1 fcfe 	udiv	ip, r1, lr
 8020abe:	0c23      	lsrs	r3, r4, #16
 8020ac0:	fb0e 111c 	mls	r1, lr, ip, r1
 8020ac4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020ac8:	fb08 f10c 	mul.w	r1, r8, ip
 8020acc:	4299      	cmp	r1, r3
 8020ace:	d907      	bls.n	8020ae0 <__udivmoddi4+0x124>
 8020ad0:	18eb      	adds	r3, r5, r3
 8020ad2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020ad6:	d202      	bcs.n	8020ade <__udivmoddi4+0x122>
 8020ad8:	4299      	cmp	r1, r3
 8020ada:	f200 80cd 	bhi.w	8020c78 <__udivmoddi4+0x2bc>
 8020ade:	4684      	mov	ip, r0
 8020ae0:	1a59      	subs	r1, r3, r1
 8020ae2:	b2a3      	uxth	r3, r4
 8020ae4:	fbb1 f0fe 	udiv	r0, r1, lr
 8020ae8:	fb0e 1410 	mls	r4, lr, r0, r1
 8020aec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020af0:	fb08 f800 	mul.w	r8, r8, r0
 8020af4:	45a0      	cmp	r8, r4
 8020af6:	d907      	bls.n	8020b08 <__udivmoddi4+0x14c>
 8020af8:	192c      	adds	r4, r5, r4
 8020afa:	f100 33ff 	add.w	r3, r0, #4294967295
 8020afe:	d202      	bcs.n	8020b06 <__udivmoddi4+0x14a>
 8020b00:	45a0      	cmp	r8, r4
 8020b02:	f200 80b6 	bhi.w	8020c72 <__udivmoddi4+0x2b6>
 8020b06:	4618      	mov	r0, r3
 8020b08:	eba4 0408 	sub.w	r4, r4, r8
 8020b0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020b10:	e79f      	b.n	8020a52 <__udivmoddi4+0x96>
 8020b12:	f1c7 0c20 	rsb	ip, r7, #32
 8020b16:	40bb      	lsls	r3, r7
 8020b18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020b1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8020b20:	fa01 f407 	lsl.w	r4, r1, r7
 8020b24:	fa20 f50c 	lsr.w	r5, r0, ip
 8020b28:	fa21 f30c 	lsr.w	r3, r1, ip
 8020b2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020b30:	4325      	orrs	r5, r4
 8020b32:	fbb3 f9f8 	udiv	r9, r3, r8
 8020b36:	0c2c      	lsrs	r4, r5, #16
 8020b38:	fb08 3319 	mls	r3, r8, r9, r3
 8020b3c:	fa1f fa8e 	uxth.w	sl, lr
 8020b40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020b44:	fb09 f40a 	mul.w	r4, r9, sl
 8020b48:	429c      	cmp	r4, r3
 8020b4a:	fa02 f207 	lsl.w	r2, r2, r7
 8020b4e:	fa00 f107 	lsl.w	r1, r0, r7
 8020b52:	d90b      	bls.n	8020b6c <__udivmoddi4+0x1b0>
 8020b54:	eb1e 0303 	adds.w	r3, lr, r3
 8020b58:	f109 30ff 	add.w	r0, r9, #4294967295
 8020b5c:	f080 8087 	bcs.w	8020c6e <__udivmoddi4+0x2b2>
 8020b60:	429c      	cmp	r4, r3
 8020b62:	f240 8084 	bls.w	8020c6e <__udivmoddi4+0x2b2>
 8020b66:	f1a9 0902 	sub.w	r9, r9, #2
 8020b6a:	4473      	add	r3, lr
 8020b6c:	1b1b      	subs	r3, r3, r4
 8020b6e:	b2ad      	uxth	r5, r5
 8020b70:	fbb3 f0f8 	udiv	r0, r3, r8
 8020b74:	fb08 3310 	mls	r3, r8, r0, r3
 8020b78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020b7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8020b80:	45a2      	cmp	sl, r4
 8020b82:	d908      	bls.n	8020b96 <__udivmoddi4+0x1da>
 8020b84:	eb1e 0404 	adds.w	r4, lr, r4
 8020b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b8c:	d26b      	bcs.n	8020c66 <__udivmoddi4+0x2aa>
 8020b8e:	45a2      	cmp	sl, r4
 8020b90:	d969      	bls.n	8020c66 <__udivmoddi4+0x2aa>
 8020b92:	3802      	subs	r0, #2
 8020b94:	4474      	add	r4, lr
 8020b96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020b9a:	fba0 8902 	umull	r8, r9, r0, r2
 8020b9e:	eba4 040a 	sub.w	r4, r4, sl
 8020ba2:	454c      	cmp	r4, r9
 8020ba4:	46c2      	mov	sl, r8
 8020ba6:	464b      	mov	r3, r9
 8020ba8:	d354      	bcc.n	8020c54 <__udivmoddi4+0x298>
 8020baa:	d051      	beq.n	8020c50 <__udivmoddi4+0x294>
 8020bac:	2e00      	cmp	r6, #0
 8020bae:	d069      	beq.n	8020c84 <__udivmoddi4+0x2c8>
 8020bb0:	ebb1 050a 	subs.w	r5, r1, sl
 8020bb4:	eb64 0403 	sbc.w	r4, r4, r3
 8020bb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020bbc:	40fd      	lsrs	r5, r7
 8020bbe:	40fc      	lsrs	r4, r7
 8020bc0:	ea4c 0505 	orr.w	r5, ip, r5
 8020bc4:	e9c6 5400 	strd	r5, r4, [r6]
 8020bc8:	2700      	movs	r7, #0
 8020bca:	e747      	b.n	8020a5c <__udivmoddi4+0xa0>
 8020bcc:	f1c2 0320 	rsb	r3, r2, #32
 8020bd0:	fa20 f703 	lsr.w	r7, r0, r3
 8020bd4:	4095      	lsls	r5, r2
 8020bd6:	fa01 f002 	lsl.w	r0, r1, r2
 8020bda:	fa21 f303 	lsr.w	r3, r1, r3
 8020bde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020be2:	4338      	orrs	r0, r7
 8020be4:	0c01      	lsrs	r1, r0, #16
 8020be6:	fbb3 f7fe 	udiv	r7, r3, lr
 8020bea:	fa1f f885 	uxth.w	r8, r5
 8020bee:	fb0e 3317 	mls	r3, lr, r7, r3
 8020bf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020bf6:	fb07 f308 	mul.w	r3, r7, r8
 8020bfa:	428b      	cmp	r3, r1
 8020bfc:	fa04 f402 	lsl.w	r4, r4, r2
 8020c00:	d907      	bls.n	8020c12 <__udivmoddi4+0x256>
 8020c02:	1869      	adds	r1, r5, r1
 8020c04:	f107 3cff 	add.w	ip, r7, #4294967295
 8020c08:	d22f      	bcs.n	8020c6a <__udivmoddi4+0x2ae>
 8020c0a:	428b      	cmp	r3, r1
 8020c0c:	d92d      	bls.n	8020c6a <__udivmoddi4+0x2ae>
 8020c0e:	3f02      	subs	r7, #2
 8020c10:	4429      	add	r1, r5
 8020c12:	1acb      	subs	r3, r1, r3
 8020c14:	b281      	uxth	r1, r0
 8020c16:	fbb3 f0fe 	udiv	r0, r3, lr
 8020c1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8020c1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c22:	fb00 f308 	mul.w	r3, r0, r8
 8020c26:	428b      	cmp	r3, r1
 8020c28:	d907      	bls.n	8020c3a <__udivmoddi4+0x27e>
 8020c2a:	1869      	adds	r1, r5, r1
 8020c2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8020c30:	d217      	bcs.n	8020c62 <__udivmoddi4+0x2a6>
 8020c32:	428b      	cmp	r3, r1
 8020c34:	d915      	bls.n	8020c62 <__udivmoddi4+0x2a6>
 8020c36:	3802      	subs	r0, #2
 8020c38:	4429      	add	r1, r5
 8020c3a:	1ac9      	subs	r1, r1, r3
 8020c3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020c40:	e73b      	b.n	8020aba <__udivmoddi4+0xfe>
 8020c42:	4637      	mov	r7, r6
 8020c44:	4630      	mov	r0, r6
 8020c46:	e709      	b.n	8020a5c <__udivmoddi4+0xa0>
 8020c48:	4607      	mov	r7, r0
 8020c4a:	e6e7      	b.n	8020a1c <__udivmoddi4+0x60>
 8020c4c:	4618      	mov	r0, r3
 8020c4e:	e6fb      	b.n	8020a48 <__udivmoddi4+0x8c>
 8020c50:	4541      	cmp	r1, r8
 8020c52:	d2ab      	bcs.n	8020bac <__udivmoddi4+0x1f0>
 8020c54:	ebb8 0a02 	subs.w	sl, r8, r2
 8020c58:	eb69 020e 	sbc.w	r2, r9, lr
 8020c5c:	3801      	subs	r0, #1
 8020c5e:	4613      	mov	r3, r2
 8020c60:	e7a4      	b.n	8020bac <__udivmoddi4+0x1f0>
 8020c62:	4660      	mov	r0, ip
 8020c64:	e7e9      	b.n	8020c3a <__udivmoddi4+0x27e>
 8020c66:	4618      	mov	r0, r3
 8020c68:	e795      	b.n	8020b96 <__udivmoddi4+0x1da>
 8020c6a:	4667      	mov	r7, ip
 8020c6c:	e7d1      	b.n	8020c12 <__udivmoddi4+0x256>
 8020c6e:	4681      	mov	r9, r0
 8020c70:	e77c      	b.n	8020b6c <__udivmoddi4+0x1b0>
 8020c72:	3802      	subs	r0, #2
 8020c74:	442c      	add	r4, r5
 8020c76:	e747      	b.n	8020b08 <__udivmoddi4+0x14c>
 8020c78:	f1ac 0c02 	sub.w	ip, ip, #2
 8020c7c:	442b      	add	r3, r5
 8020c7e:	e72f      	b.n	8020ae0 <__udivmoddi4+0x124>
 8020c80:	4638      	mov	r0, r7
 8020c82:	e708      	b.n	8020a96 <__udivmoddi4+0xda>
 8020c84:	4637      	mov	r7, r6
 8020c86:	e6e9      	b.n	8020a5c <__udivmoddi4+0xa0>

08020c88 <__aeabi_idiv0>:
 8020c88:	4770      	bx	lr
 8020c8a:	bf00      	nop

08020c8c <_ZN7EncoderC1Ev>:
#include "encoder.hpp"
#include "declare_extern.h"

Encoder::Encoder() : distance_(0)
 8020c8c:	b480      	push	{r7}
 8020c8e:	b083      	sub	sp, #12
 8020c90:	af00      	add	r7, sp, #0
 8020c92:	6078      	str	r0, [r7, #4]
                   , distance_stack_(0)
                   , distance_difference_(0) {}
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	f04f 0200 	mov.w	r2, #0
 8020c9a:	601a      	str	r2, [r3, #0]
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	f04f 0200 	mov.w	r2, #0
 8020ca2:	605a      	str	r2, [r3, #4]
 8020ca4:	687b      	ldr	r3, [r7, #4]
 8020ca6:	f04f 0200 	mov.w	r2, #0
 8020caa:	609a      	str	r2, [r3, #8]
 8020cac:	687b      	ldr	r3, [r7, #4]
 8020cae:	4618      	mov	r0, r3
 8020cb0:	370c      	adds	r7, #12
 8020cb2:	46bd      	mov	sp, r7
 8020cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cb8:	4770      	bx	lr
	...

08020cbc <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020cbc:	b580      	push	{r7, lr}
 8020cbe:	b082      	sub	sp, #8
 8020cc0:	af00      	add	r7, sp, #0
 8020cc2:	6078      	str	r0, [r7, #4]
	if(HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL) != HAL_OK)
 8020cc4:	213c      	movs	r1, #60	; 0x3c
 8020cc6:	4812      	ldr	r0, [pc, #72]	; (8020d10 <_ZN7Encoder4InitEv+0x54>)
 8020cc8:	f005 f972 	bl	8025fb0 <HAL_TIM_Encoder_Start>
 8020ccc:	4603      	mov	r3, r0
 8020cce:	2b00      	cmp	r3, #0
 8020cd0:	bf14      	ite	ne
 8020cd2:	2301      	movne	r3, #1
 8020cd4:	2300      	moveq	r3, #0
 8020cd6:	b2db      	uxtb	r3, r3
 8020cd8:	2b00      	cmp	r3, #0
 8020cda:	d004      	beq.n	8020ce6 <_ZN7Encoder4InitEv+0x2a>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim8 = true;
 8020cdc:	4b0d      	ldr	r3, [pc, #52]	; (8020d14 <_ZN7Encoder4InitEv+0x58>)
 8020cde:	2201      	movs	r2, #1
 8020ce0:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020ce2:	f001 fc79 	bl	80225d8 <Error_Handler>
	}

	if(HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL) != HAL_OK)
 8020ce6:	213c      	movs	r1, #60	; 0x3c
 8020ce8:	480b      	ldr	r0, [pc, #44]	; (8020d18 <_ZN7Encoder4InitEv+0x5c>)
 8020cea:	f005 f961 	bl	8025fb0 <HAL_TIM_Encoder_Start>
 8020cee:	4603      	mov	r3, r0
 8020cf0:	2b00      	cmp	r3, #0
 8020cf2:	bf14      	ite	ne
 8020cf4:	2301      	movne	r3, #1
 8020cf6:	2300      	moveq	r3, #0
 8020cf8:	b2db      	uxtb	r3, r3
 8020cfa:	2b00      	cmp	r3, #0
 8020cfc:	d004      	beq.n	8020d08 <_ZN7Encoder4InitEv+0x4c>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim4 = true;
 8020cfe:	4b07      	ldr	r3, [pc, #28]	; (8020d1c <_ZN7Encoder4InitEv+0x60>)
 8020d00:	2201      	movs	r2, #1
 8020d02:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d04:	f001 fc68 	bl	80225d8 <Error_Handler>
	}
}
 8020d08:	bf00      	nop
 8020d0a:	3708      	adds	r7, #8
 8020d0c:	46bd      	mov	sp, r7
 8020d0e:	bd80      	pop	{r7, pc}
 8020d10:	20000550 	.word	0x20000550
 8020d14:	2000007b 	.word	0x2000007b
 8020d18:	20000590 	.word	0x20000590
 8020d1c:	2000007a 	.word	0x2000007a

08020d20 <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"
#include "declare_extern.h"

Iim42652::Iim42652() : degree_stack_z_(0) {}
 8020d20:	b490      	push	{r4, r7}
 8020d22:	b082      	sub	sp, #8
 8020d24:	af00      	add	r7, sp, #0
 8020d26:	6078      	str	r0, [r7, #4]
 8020d28:	687a      	ldr	r2, [r7, #4]
 8020d2a:	f04f 0300 	mov.w	r3, #0
 8020d2e:	f04f 0400 	mov.w	r4, #0
 8020d32:	e9c2 3400 	strd	r3, r4, [r2]
 8020d36:	687b      	ldr	r3, [r7, #4]
 8020d38:	4618      	mov	r0, r3
 8020d3a:	3708      	adds	r7, #8
 8020d3c:	46bd      	mov	sp, r7
 8020d3e:	bc90      	pop	{r4, r7}
 8020d40:	4770      	bx	lr

08020d42 <_ZN3LedC1Ev>:
#include "led.hpp"

Led::Led() : interrupt_count_(0)
 8020d42:	b480      	push	{r7}
 8020d44:	b083      	sub	sp, #12
 8020d46:	af00      	add	r7, sp, #0
 8020d48:	6078      	str	r0, [r7, #4]
           , interrupt_timer_(0) {}
 8020d4a:	687b      	ldr	r3, [r7, #4]
 8020d4c:	2200      	movs	r2, #0
 8020d4e:	701a      	strb	r2, [r3, #0]
 8020d50:	687b      	ldr	r3, [r7, #4]
 8020d52:	2200      	movs	r2, #0
 8020d54:	705a      	strb	r2, [r3, #1]
 8020d56:	687b      	ldr	r3, [r7, #4]
 8020d58:	4618      	mov	r0, r3
 8020d5a:	370c      	adds	r7, #12
 8020d5c:	46bd      	mov	sp, r7
 8020d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d62:	4770      	bx	lr

08020d64 <_ZN3Led10ColorOrderEc>:

void Led::ColorOrder(char color)
{
 8020d64:	b580      	push	{r7, lr}
 8020d66:	b082      	sub	sp, #8
 8020d68:	af00      	add	r7, sp, #0
 8020d6a:	6078      	str	r0, [r7, #4]
 8020d6c:	460b      	mov	r3, r1
 8020d6e:	70fb      	strb	r3, [r7, #3]
    switch(color)
 8020d70:	78fb      	ldrb	r3, [r7, #3]
 8020d72:	3b42      	subs	r3, #66	; 0x42
 8020d74:	2b17      	cmp	r3, #23
 8020d76:	f200 80b8 	bhi.w	8020eea <_ZN3Led10ColorOrderEc+0x186>
 8020d7a:	a201      	add	r2, pc, #4	; (adr r2, 8020d80 <_ZN3Led10ColorOrderEc+0x1c>)
 8020d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020d80:	08020e2d 	.word	0x08020e2d
 8020d84:	08020e79 	.word	0x08020e79
 8020d88:	08020eeb 	.word	0x08020eeb
 8020d8c:	08020eeb 	.word	0x08020eeb
 8020d90:	08020eeb 	.word	0x08020eeb
 8020d94:	08020e07 	.word	0x08020e07
 8020d98:	08020eeb 	.word	0x08020eeb
 8020d9c:	08020eeb 	.word	0x08020eeb
 8020da0:	08020eeb 	.word	0x08020eeb
 8020da4:	08020eeb 	.word	0x08020eeb
 8020da8:	08020eeb 	.word	0x08020eeb
 8020dac:	08020e9f 	.word	0x08020e9f
 8020db0:	08020eeb 	.word	0x08020eeb
 8020db4:	08020eeb 	.word	0x08020eeb
 8020db8:	08020eeb 	.word	0x08020eeb
 8020dbc:	08020eeb 	.word	0x08020eeb
 8020dc0:	08020de1 	.word	0x08020de1
 8020dc4:	08020eeb 	.word	0x08020eeb
 8020dc8:	08020eeb 	.word	0x08020eeb
 8020dcc:	08020eeb 	.word	0x08020eeb
 8020dd0:	08020eeb 	.word	0x08020eeb
 8020dd4:	08020ec5 	.word	0x08020ec5
 8020dd8:	08020eeb 	.word	0x08020eeb
 8020ddc:	08020e53 	.word	0x08020e53
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 8020de0:	2200      	movs	r2, #0
 8020de2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020de6:	484c      	ldr	r0, [pc, #304]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020de8:	f004 f9ba 	bl	8025160 <HAL_GPIO_WritePin>
 8020dec:	2201      	movs	r2, #1
 8020dee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020df2:	4849      	ldr	r0, [pc, #292]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020df4:	f004 f9b4 	bl	8025160 <HAL_GPIO_WritePin>
 8020df8:	2201      	movs	r2, #1
 8020dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020dfe:	4846      	ldr	r0, [pc, #280]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020e00:	f004 f9ae 	bl	8025160 <HAL_GPIO_WritePin>
 8020e04:	e084      	b.n	8020f10 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 8020e06:	2201      	movs	r2, #1
 8020e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020e0c:	4842      	ldr	r0, [pc, #264]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020e0e:	f004 f9a7 	bl	8025160 <HAL_GPIO_WritePin>
 8020e12:	2200      	movs	r2, #0
 8020e14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020e18:	483f      	ldr	r0, [pc, #252]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020e1a:	f004 f9a1 	bl	8025160 <HAL_GPIO_WritePin>
 8020e1e:	2201      	movs	r2, #1
 8020e20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020e24:	483c      	ldr	r0, [pc, #240]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020e26:	f004 f99b 	bl	8025160 <HAL_GPIO_WritePin>
 8020e2a:	e071      	b.n	8020f10 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 8020e2c:	2201      	movs	r2, #1
 8020e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020e32:	4839      	ldr	r0, [pc, #228]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020e34:	f004 f994 	bl	8025160 <HAL_GPIO_WritePin>
 8020e38:	2201      	movs	r2, #1
 8020e3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020e3e:	4836      	ldr	r0, [pc, #216]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020e40:	f004 f98e 	bl	8025160 <HAL_GPIO_WritePin>
 8020e44:	2200      	movs	r2, #0
 8020e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020e4a:	4833      	ldr	r0, [pc, #204]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020e4c:	f004 f988 	bl	8025160 <HAL_GPIO_WritePin>
 8020e50:	e05e      	b.n	8020f10 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 8020e52:	2200      	movs	r2, #0
 8020e54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020e58:	482f      	ldr	r0, [pc, #188]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020e5a:	f004 f981 	bl	8025160 <HAL_GPIO_WritePin>
 8020e5e:	2200      	movs	r2, #0
 8020e60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020e64:	482c      	ldr	r0, [pc, #176]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020e66:	f004 f97b 	bl	8025160 <HAL_GPIO_WritePin>
 8020e6a:	2201      	movs	r2, #1
 8020e6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020e70:	4829      	ldr	r0, [pc, #164]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020e72:	f004 f975 	bl	8025160 <HAL_GPIO_WritePin>
 8020e76:	e04b      	b.n	8020f10 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 8020e78:	2201      	movs	r2, #1
 8020e7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020e7e:	4826      	ldr	r0, [pc, #152]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020e80:	f004 f96e 	bl	8025160 <HAL_GPIO_WritePin>
 8020e84:	2200      	movs	r2, #0
 8020e86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020e8a:	4823      	ldr	r0, [pc, #140]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020e8c:	f004 f968 	bl	8025160 <HAL_GPIO_WritePin>
 8020e90:	2200      	movs	r2, #0
 8020e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020e96:	4820      	ldr	r0, [pc, #128]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020e98:	f004 f962 	bl	8025160 <HAL_GPIO_WritePin>
 8020e9c:	e038      	b.n	8020f10 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 8020e9e:	2200      	movs	r2, #0
 8020ea0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020ea4:	481c      	ldr	r0, [pc, #112]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020ea6:	f004 f95b 	bl	8025160 <HAL_GPIO_WritePin>
 8020eaa:	2201      	movs	r2, #1
 8020eac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020eb0:	4819      	ldr	r0, [pc, #100]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020eb2:	f004 f955 	bl	8025160 <HAL_GPIO_WritePin>
 8020eb6:	2200      	movs	r2, #0
 8020eb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020ebc:	4816      	ldr	r0, [pc, #88]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020ebe:	f004 f94f 	bl	8025160 <HAL_GPIO_WritePin>
 8020ec2:	e025      	b.n	8020f10 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 8020ec4:	2200      	movs	r2, #0
 8020ec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020eca:	4813      	ldr	r0, [pc, #76]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020ecc:	f004 f948 	bl	8025160 <HAL_GPIO_WritePin>
 8020ed0:	2200      	movs	r2, #0
 8020ed2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020ed6:	4810      	ldr	r0, [pc, #64]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020ed8:	f004 f942 	bl	8025160 <HAL_GPIO_WritePin>
 8020edc:	2200      	movs	r2, #0
 8020ede:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020ee2:	480d      	ldr	r0, [pc, #52]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020ee4:	f004 f93c 	bl	8025160 <HAL_GPIO_WritePin>
 8020ee8:	e012      	b.n	8020f10 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 8020eea:	2201      	movs	r2, #1
 8020eec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020ef0:	4809      	ldr	r0, [pc, #36]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020ef2:	f004 f935 	bl	8025160 <HAL_GPIO_WritePin>
 8020ef6:	2201      	movs	r2, #1
 8020ef8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020efc:	4806      	ldr	r0, [pc, #24]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020efe:	f004 f92f 	bl	8025160 <HAL_GPIO_WritePin>
 8020f02:	2201      	movs	r2, #1
 8020f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020f08:	4803      	ldr	r0, [pc, #12]	; (8020f18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f0a:	f004 f929 	bl	8025160 <HAL_GPIO_WritePin>
 8020f0e:	bf00      	nop
    }
}
 8020f10:	bf00      	nop
 8020f12:	3708      	adds	r7, #8
 8020f14:	46bd      	mov	sp, r7
 8020f16:	bd80      	pop	{r7, pc}
 8020f18:	40020800 	.word	0x40020800

08020f1c <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 8020f1c:	b580      	push	{r7, lr}
 8020f1e:	b084      	sub	sp, #16
 8020f20:	af00      	add	r7, sp, #0
 8020f22:	6078      	str	r0, [r7, #4]
 8020f24:	4608      	mov	r0, r1
 8020f26:	4611      	mov	r1, r2
 8020f28:	461a      	mov	r2, r3
 8020f2a:	4603      	mov	r3, r0
 8020f2c:	70fb      	strb	r3, [r7, #3]
 8020f2e:	460b      	mov	r3, r1
 8020f30:	70bb      	strb	r3, [r7, #2]
 8020f32:	4613      	mov	r3, r2
 8020f34:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 8020f36:	2300      	movs	r3, #0
 8020f38:	73fb      	strb	r3, [r7, #15]
 8020f3a:	7bfa      	ldrb	r2, [r7, #15]
 8020f3c:	78fb      	ldrb	r3, [r7, #3]
 8020f3e:	429a      	cmp	r2, r3
 8020f40:	d215      	bcs.n	8020f6e <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 8020f42:	78bb      	ldrb	r3, [r7, #2]
 8020f44:	4619      	mov	r1, r3
 8020f46:	6878      	ldr	r0, [r7, #4]
 8020f48:	f7ff ff0c 	bl	8020d64 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 8020f4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8020f50:	f002 febe 	bl	8023cd0 <HAL_Delay>
        ColorOrder(color_2);
 8020f54:	787b      	ldrb	r3, [r7, #1]
 8020f56:	4619      	mov	r1, r3
 8020f58:	6878      	ldr	r0, [r7, #4]
 8020f5a:	f7ff ff03 	bl	8020d64 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 8020f5e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8020f62:	f002 feb5 	bl	8023cd0 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8020f66:	7bfb      	ldrb	r3, [r7, #15]
 8020f68:	3301      	adds	r3, #1
 8020f6a:	73fb      	strb	r3, [r7, #15]
 8020f6c:	e7e5      	b.n	8020f3a <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 8020f6e:	bf00      	nop
 8020f70:	3710      	adds	r7, #16
 8020f72:	46bd      	mov	sp, r7
 8020f74:	bd80      	pop	{r7, pc}

08020f76 <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_{0}
 8020f76:	b580      	push	{r7, lr}
 8020f78:	b082      	sub	sp, #8
 8020f7a:	af00      	add	r7, sp, #0
 8020f7c:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_{{0}}
                         , max_line_sensors_valu_{0}
                         , min_line_sensors_valu_{0}
                         , line_sensors_valu_{0}
                         , emergency_stop_flag_(false) {}
 8020f7e:	687b      	ldr	r3, [r7, #4]
 8020f80:	461a      	mov	r2, r3
 8020f82:	2300      	movs	r3, #0
 8020f84:	6013      	str	r3, [r2, #0]
 8020f86:	6053      	str	r3, [r2, #4]
 8020f88:	6093      	str	r3, [r2, #8]
 8020f8a:	60d3      	str	r3, [r2, #12]
 8020f8c:	6113      	str	r3, [r2, #16]
 8020f8e:	6153      	str	r3, [r2, #20]
 8020f90:	6193      	str	r3, [r2, #24]
 8020f92:	687b      	ldr	r3, [r7, #4]
 8020f94:	331c      	adds	r3, #28
 8020f96:	f44f 728c 	mov.w	r2, #280	; 0x118
 8020f9a:	2100      	movs	r1, #0
 8020f9c:	4618      	mov	r0, r3
 8020f9e:	f005 ff13 	bl	8026dc8 <memset>
 8020fa2:	687b      	ldr	r3, [r7, #4]
 8020fa4:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8020fa8:	2200      	movs	r2, #0
 8020faa:	601a      	str	r2, [r3, #0]
 8020fac:	605a      	str	r2, [r3, #4]
 8020fae:	609a      	str	r2, [r3, #8]
 8020fb0:	60da      	str	r2, [r3, #12]
 8020fb2:	611a      	str	r2, [r3, #16]
 8020fb4:	615a      	str	r2, [r3, #20]
 8020fb6:	619a      	str	r2, [r3, #24]
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8020fbe:	2200      	movs	r2, #0
 8020fc0:	601a      	str	r2, [r3, #0]
 8020fc2:	605a      	str	r2, [r3, #4]
 8020fc4:	609a      	str	r2, [r3, #8]
 8020fc6:	60da      	str	r2, [r3, #12]
 8020fc8:	611a      	str	r2, [r3, #16]
 8020fca:	615a      	str	r2, [r3, #20]
 8020fcc:	619a      	str	r2, [r3, #24]
 8020fce:	687b      	ldr	r3, [r7, #4]
 8020fd0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8020fd4:	2200      	movs	r2, #0
 8020fd6:	601a      	str	r2, [r3, #0]
 8020fd8:	605a      	str	r2, [r3, #4]
 8020fda:	609a      	str	r2, [r3, #8]
 8020fdc:	60da      	str	r2, [r3, #12]
 8020fde:	611a      	str	r2, [r3, #16]
 8020fe0:	615a      	str	r2, [r3, #20]
 8020fe2:	619a      	str	r2, [r3, #24]
 8020fe4:	687b      	ldr	r3, [r7, #4]
 8020fe6:	2200      	movs	r2, #0
 8020fe8:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	4618      	mov	r0, r3
 8020ff0:	3708      	adds	r7, #8
 8020ff2:	46bd      	mov	sp, r7
 8020ff4:	bd80      	pop	{r7, pc}
	...

08020ff8 <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 8020ff8:	b580      	push	{r7, lr}
 8020ffa:	b082      	sub	sp, #8
 8020ffc:	af00      	add	r7, sp, #0
 8020ffe:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 8021000:	687b      	ldr	r3, [r7, #4]
 8021002:	220e      	movs	r2, #14
 8021004:	4619      	mov	r1, r3
 8021006:	4815      	ldr	r0, [pc, #84]	; (802105c <_ZN10LineSensor4InitEv+0x64>)
 8021008:	f002 fec8 	bl	8023d9c <HAL_ADC_Start_DMA>
 802100c:	4603      	mov	r3, r0
 802100e:	2b00      	cmp	r3, #0
 8021010:	bf14      	ite	ne
 8021012:	2301      	movne	r3, #1
 8021014:	2300      	moveq	r3, #0
 8021016:	b2db      	uxtb	r3, r3
 8021018:	2b00      	cmp	r3, #0
 802101a:	d004      	beq.n	8021026 <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 802101c:	4b10      	ldr	r3, [pc, #64]	; (8021060 <_ZN10LineSensor4InitEv+0x68>)
 802101e:	2201      	movs	r2, #1
 8021020:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021022:	f001 fad9 	bl	80225d8 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 8021026:	2100      	movs	r1, #0
 8021028:	480e      	ldr	r0, [pc, #56]	; (8021064 <_ZN10LineSensor4InitEv+0x6c>)
 802102a:	f004 fef1 	bl	8025e10 <HAL_TIM_PWM_Start>
 802102e:	4603      	mov	r3, r0
 8021030:	2b00      	cmp	r3, #0
 8021032:	bf14      	ite	ne
 8021034:	2301      	movne	r3, #1
 8021036:	2300      	moveq	r3, #0
 8021038:	b2db      	uxtb	r3, r3
 802103a:	2b00      	cmp	r3, #0
 802103c:	d004      	beq.n	8021048 <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 802103e:	4b0a      	ldr	r3, [pc, #40]	; (8021068 <_ZN10LineSensor4InitEv+0x70>)
 8021040:	2201      	movs	r2, #1
 8021042:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021044:	f001 fac8 	bl	80225d8 <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 8021048:	4b06      	ldr	r3, [pc, #24]	; (8021064 <_ZN10LineSensor4InitEv+0x6c>)
 802104a:	681b      	ldr	r3, [r3, #0]
 802104c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8021050:	635a      	str	r2, [r3, #52]	; 0x34
}
 8021052:	bf00      	nop
 8021054:	3708      	adds	r7, #8
 8021056:	46bd      	mov	sp, r7
 8021058:	bd80      	pop	{r7, pc}
 802105a:	bf00      	nop
 802105c:	200006fc 	.word	0x200006fc
 8021060:	20000076 	.word	0x20000076
 8021064:	20000744 	.word	0x20000744
 8021068:	20000077 	.word	0x20000077

0802106c <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 802106c:	b480      	push	{r7}
 802106e:	b085      	sub	sp, #20
 8021070:	af00      	add	r7, sp, #0
 8021072:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021074:	2300      	movs	r3, #0
 8021076:	60fb      	str	r3, [r7, #12]
 8021078:	68fb      	ldr	r3, [r7, #12]
 802107a:	2b0d      	cmp	r3, #13
 802107c:	dc16      	bgt.n	80210ac <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 802107e:	4b15      	ldr	r3, [pc, #84]	; (80210d4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021080:	781b      	ldrb	r3, [r3, #0]
 8021082:	4619      	mov	r1, r3
 8021084:	687b      	ldr	r3, [r7, #4]
 8021086:	68fa      	ldr	r2, [r7, #12]
 8021088:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 802108c:	687a      	ldr	r2, [r7, #4]
 802108e:	460b      	mov	r3, r1
 8021090:	00db      	lsls	r3, r3, #3
 8021092:	1a5b      	subs	r3, r3, r1
 8021094:	005b      	lsls	r3, r3, #1
 8021096:	68f9      	ldr	r1, [r7, #12]
 8021098:	440b      	add	r3, r1
 802109a:	330c      	adds	r3, #12
 802109c:	005b      	lsls	r3, r3, #1
 802109e:	4413      	add	r3, r2
 80210a0:	4602      	mov	r2, r0
 80210a2:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80210a4:	68fb      	ldr	r3, [r7, #12]
 80210a6:	3301      	adds	r3, #1
 80210a8:	60fb      	str	r3, [r7, #12]
 80210aa:	e7e5      	b.n	8021078 <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    times++;
 80210ac:	4b09      	ldr	r3, [pc, #36]	; (80210d4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 80210ae:	781b      	ldrb	r3, [r3, #0]
 80210b0:	3301      	adds	r3, #1
 80210b2:	b2da      	uxtb	r2, r3
 80210b4:	4b07      	ldr	r3, [pc, #28]	; (80210d4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 80210b6:	701a      	strb	r2, [r3, #0]
    if(times >= CONSECUTIVE_TIMES) times = 0;
 80210b8:	4b06      	ldr	r3, [pc, #24]	; (80210d4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 80210ba:	781b      	ldrb	r3, [r3, #0]
 80210bc:	2b09      	cmp	r3, #9
 80210be:	d902      	bls.n	80210c6 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5a>
 80210c0:	4b04      	ldr	r3, [pc, #16]	; (80210d4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 80210c2:	2200      	movs	r2, #0
 80210c4:	701a      	strb	r2, [r3, #0]
}
 80210c6:	bf00      	nop
 80210c8:	3714      	adds	r7, #20
 80210ca:	46bd      	mov	sp, r7
 80210cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210d0:	4770      	bx	lr
 80210d2:	bf00      	nop
 80210d4:	2000002c 	.word	0x2000002c

080210d8 <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 80210d8:	b5b0      	push	{r4, r5, r7, lr}
 80210da:	b088      	sub	sp, #32
 80210dc:	af00      	add	r7, sp, #0
 80210de:	60f8      	str	r0, [r7, #12]
 80210e0:	60b9      	str	r1, [r7, #8]
 80210e2:	4611      	mov	r1, r2
 80210e4:	461a      	mov	r2, r3
 80210e6:	460b      	mov	r3, r1
 80210e8:	71fb      	strb	r3, [r7, #7]
 80210ea:	4613      	mov	r3, r2
 80210ec:	71bb      	strb	r3, [r7, #6]

    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else                                     array[i] = temp_array[right--];
    }
 80210ee:	466b      	mov	r3, sp
 80210f0:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 80210f2:	79fa      	ldrb	r2, [r7, #7]
 80210f4:	79bb      	ldrb	r3, [r7, #6]
 80210f6:	429a      	cmp	r2, r3
 80210f8:	f080 80ba 	bcs.w	8021270 <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 80210fc:	79b8      	ldrb	r0, [r7, #6]
 80210fe:	61b8      	str	r0, [r7, #24]
 8021100:	4603      	mov	r3, r0
 8021102:	3301      	adds	r3, #1
 8021104:	4619      	mov	r1, r3
 8021106:	f04f 0200 	mov.w	r2, #0
 802110a:	f04f 0300 	mov.w	r3, #0
 802110e:	f04f 0400 	mov.w	r4, #0
 8021112:	0114      	lsls	r4, r2, #4
 8021114:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021118:	010b      	lsls	r3, r1, #4
 802111a:	4603      	mov	r3, r0
 802111c:	3301      	adds	r3, #1
 802111e:	4619      	mov	r1, r3
 8021120:	f04f 0200 	mov.w	r2, #0
 8021124:	f04f 0300 	mov.w	r3, #0
 8021128:	f04f 0400 	mov.w	r4, #0
 802112c:	0114      	lsls	r4, r2, #4
 802112e:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021132:	010b      	lsls	r3, r1, #4
 8021134:	4603      	mov	r3, r0
 8021136:	3301      	adds	r3, #1
 8021138:	005b      	lsls	r3, r3, #1
 802113a:	3301      	adds	r3, #1
 802113c:	3307      	adds	r3, #7
 802113e:	08db      	lsrs	r3, r3, #3
 8021140:	00db      	lsls	r3, r3, #3
 8021142:	ebad 0d03 	sub.w	sp, sp, r3
 8021146:	466b      	mov	r3, sp
 8021148:	3301      	adds	r3, #1
 802114a:	085b      	lsrs	r3, r3, #1
 802114c:	005b      	lsls	r3, r3, #1
 802114e:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 8021150:	79fa      	ldrb	r2, [r7, #7]
 8021152:	79bb      	ldrb	r3, [r7, #6]
 8021154:	4413      	add	r3, r2
 8021156:	0fda      	lsrs	r2, r3, #31
 8021158:	4413      	add	r3, r2
 802115a:	105b      	asrs	r3, r3, #1
 802115c:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 802115e:	7cfb      	ldrb	r3, [r7, #19]
 8021160:	79fa      	ldrb	r2, [r7, #7]
 8021162:	68b9      	ldr	r1, [r7, #8]
 8021164:	68f8      	ldr	r0, [r7, #12]
 8021166:	f7ff ffb7 	bl	80210d8 <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 802116a:	7cfb      	ldrb	r3, [r7, #19]
 802116c:	3301      	adds	r3, #1
 802116e:	b2da      	uxtb	r2, r3
 8021170:	79bb      	ldrb	r3, [r7, #6]
 8021172:	68b9      	ldr	r1, [r7, #8]
 8021174:	68f8      	ldr	r0, [r7, #12]
 8021176:	f7ff ffaf 	bl	80210d8 <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--)
 802117a:	7cfb      	ldrb	r3, [r7, #19]
 802117c:	77bb      	strb	r3, [r7, #30]
 802117e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021182:	79fb      	ldrb	r3, [r7, #7]
 8021184:	429a      	cmp	r2, r3
 8021186:	db11      	blt.n	80211ac <_ZN10LineSensor9MergeSortEPthh+0xd4>
        temp_array[i] = array[i];
 8021188:	f997 301e 	ldrsb.w	r3, [r7, #30]
 802118c:	005b      	lsls	r3, r3, #1
 802118e:	68ba      	ldr	r2, [r7, #8]
 8021190:	4413      	add	r3, r2
 8021192:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021196:	8819      	ldrh	r1, [r3, #0]
 8021198:	697b      	ldr	r3, [r7, #20]
 802119a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle; i >= first_index; i--)
 802119e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80211a2:	b2db      	uxtb	r3, r3
 80211a4:	3b01      	subs	r3, #1
 80211a6:	b2db      	uxtb	r3, r3
 80211a8:	77bb      	strb	r3, [r7, #30]
 80211aa:	e7e8      	b.n	802117e <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 80211ac:	7cfb      	ldrb	r3, [r7, #19]
 80211ae:	3301      	adds	r3, #1
 80211b0:	b2db      	uxtb	r3, r3
 80211b2:	77bb      	strb	r3, [r7, #30]
 80211b4:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80211b8:	79bb      	ldrb	r3, [r7, #6]
 80211ba:	429a      	cmp	r2, r3
 80211bc:	dc17      	bgt.n	80211ee <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 80211be:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80211c2:	005b      	lsls	r3, r3, #1
 80211c4:	68ba      	ldr	r2, [r7, #8]
 80211c6:	4413      	add	r3, r2
 80211c8:	79b9      	ldrb	r1, [r7, #6]
 80211ca:	f997 001e 	ldrsb.w	r0, [r7, #30]
 80211ce:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80211d2:	3201      	adds	r2, #1
 80211d4:	1a82      	subs	r2, r0, r2
 80211d6:	1a8a      	subs	r2, r1, r2
 80211d8:	8819      	ldrh	r1, [r3, #0]
 80211da:	697b      	ldr	r3, [r7, #20]
 80211dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 80211e0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80211e4:	b2db      	uxtb	r3, r3
 80211e6:	3301      	adds	r3, #1
 80211e8:	b2db      	uxtb	r3, r3
 80211ea:	77bb      	strb	r3, [r7, #30]
 80211ec:	e7e2      	b.n	80211b4 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 80211ee:	79fb      	ldrb	r3, [r7, #7]
 80211f0:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 80211f2:	79bb      	ldrb	r3, [r7, #6]
 80211f4:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 80211f6:	79fb      	ldrb	r3, [r7, #7]
 80211f8:	77bb      	strb	r3, [r7, #30]
 80211fa:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80211fe:	79bb      	ldrb	r3, [r7, #6]
 8021200:	429a      	cmp	r2, r3
 8021202:	dc33      	bgt.n	802126c <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 8021204:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021208:	697b      	ldr	r3, [r7, #20]
 802120a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 802120e:	f997 101d 	ldrsb.w	r1, [r7, #29]
 8021212:	697b      	ldr	r3, [r7, #20]
 8021214:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8021218:	429a      	cmp	r2, r3
 802121a:	d210      	bcs.n	802123e <_ZN10LineSensor9MergeSortEPthh+0x166>
 802121c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021220:	b2d3      	uxtb	r3, r2
 8021222:	3301      	adds	r3, #1
 8021224:	b2db      	uxtb	r3, r3
 8021226:	77fb      	strb	r3, [r7, #31]
 8021228:	4611      	mov	r1, r2
 802122a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 802122e:	005b      	lsls	r3, r3, #1
 8021230:	68ba      	ldr	r2, [r7, #8]
 8021232:	4413      	add	r3, r2
 8021234:	697a      	ldr	r2, [r7, #20]
 8021236:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 802123a:	801a      	strh	r2, [r3, #0]
 802123c:	e00f      	b.n	802125e <_ZN10LineSensor9MergeSortEPthh+0x186>
        else                                     array[i] = temp_array[right--];
 802123e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8021242:	b2d3      	uxtb	r3, r2
 8021244:	3b01      	subs	r3, #1
 8021246:	b2db      	uxtb	r3, r3
 8021248:	777b      	strb	r3, [r7, #29]
 802124a:	4611      	mov	r1, r2
 802124c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021250:	005b      	lsls	r3, r3, #1
 8021252:	68ba      	ldr	r2, [r7, #8]
 8021254:	4413      	add	r3, r2
 8021256:	697a      	ldr	r2, [r7, #20]
 8021258:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 802125c:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 802125e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021262:	b2db      	uxtb	r3, r3
 8021264:	3301      	adds	r3, #1
 8021266:	b2db      	uxtb	r3, r3
 8021268:	77bb      	strb	r3, [r7, #30]
 802126a:	e7c6      	b.n	80211fa <_ZN10LineSensor9MergeSortEPthh+0x122>
 802126c:	46ad      	mov	sp, r5
 802126e:	e001      	b.n	8021274 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 8021270:	bf00      	nop
 8021272:	46ad      	mov	sp, r5
}
 8021274:	3720      	adds	r7, #32
 8021276:	46bd      	mov	sp, r7
 8021278:	bdb0      	pop	{r4, r5, r7, pc}
	...

0802127c <_ZN10LineSensor6UpdateEv>:

void LineSensor::Update()
{
 802127c:	b590      	push	{r4, r7, lr}
 802127e:	b08b      	sub	sp, #44	; 0x2c
 8021280:	af00      	add	r7, sp, #0
 8021282:	6078      	str	r0, [r7, #4]
    uint8_t i, j;
    uint16_t temp_array[CONSECUTIVE_TIMES];
    uint16_t median, max, min, normalized;
    bool emergency = true;
 8021284:	2301      	movs	r3, #1
 8021286:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802128a:	2300      	movs	r3, #0
 802128c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021294:	2b0d      	cmp	r3, #13
 8021296:	f200 80c8 	bhi.w	802142a <_ZN10LineSensor6UpdateEv+0x1ae>
    {
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 802129a:	2300      	movs	r3, #0
 802129c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80212a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80212a4:	2b09      	cmp	r3, #9
 80212a6:	d81b      	bhi.n	80212e0 <_ZN10LineSensor6UpdateEv+0x64>
        {
            temp_array[j] = consecutive_line_sensors_buff_[j][i];
 80212a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80212ac:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 80212b0:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80212b4:	6878      	ldr	r0, [r7, #4]
 80212b6:	4613      	mov	r3, r2
 80212b8:	00db      	lsls	r3, r3, #3
 80212ba:	1a9b      	subs	r3, r3, r2
 80212bc:	005b      	lsls	r3, r3, #1
 80212be:	4423      	add	r3, r4
 80212c0:	330c      	adds	r3, #12
 80212c2:	005b      	lsls	r3, r3, #1
 80212c4:	4403      	add	r3, r0
 80212c6:	889a      	ldrh	r2, [r3, #4]
 80212c8:	004b      	lsls	r3, r1, #1
 80212ca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80212ce:	440b      	add	r3, r1
 80212d0:	f823 2c20 	strh.w	r2, [r3, #-32]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 80212d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80212d8:	3301      	adds	r3, #1
 80212da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80212de:	e7df      	b.n	80212a0 <_ZN10LineSensor6UpdateEv+0x24>
        }

        MergeSort(temp_array, 0, CONSECUTIVE_TIMES-1);
 80212e0:	f107 0108 	add.w	r1, r7, #8
 80212e4:	2309      	movs	r3, #9
 80212e6:	2200      	movs	r2, #0
 80212e8:	6878      	ldr	r0, [r7, #4]
 80212ea:	f7ff fef5 	bl	80210d8 <_ZN10LineSensor9MergeSortEPthh>
        median = temp_array[HALF_CONSECUTIVE_TIMES];
 80212ee:	8a7b      	ldrh	r3, [r7, #18]
 80212f0:	83fb      	strh	r3, [r7, #30]

#ifdef DEBUG_MODE
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 80212f2:	2300      	movs	r3, #0
 80212f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80212f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80212fc:	2b09      	cmp	r3, #9
 80212fe:	d81a      	bhi.n	8021336 <_ZN10LineSensor6UpdateEv+0xba>
        {
            g_consecutive_line_buff[i][j] = temp_array[j];
 8021300:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021304:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021308:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 802130c:	005b      	lsls	r3, r3, #1
 802130e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8021312:	4403      	add	r3, r0
 8021314:	f833 4c20 	ldrh.w	r4, [r3, #-32]
 8021318:	4848      	ldr	r0, [pc, #288]	; (802143c <_ZN10LineSensor6UpdateEv+0x1c0>)
 802131a:	4613      	mov	r3, r2
 802131c:	009b      	lsls	r3, r3, #2
 802131e:	4413      	add	r3, r2
 8021320:	005b      	lsls	r3, r3, #1
 8021322:	440b      	add	r3, r1
 8021324:	4622      	mov	r2, r4
 8021326:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 802132a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802132e:	3301      	adds	r3, #1
 8021330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021334:	e7e0      	b.n	80212f8 <_ZN10LineSensor6UpdateEv+0x7c>
        }
#endif // DEBUG_MODE

        max = max_line_sensors_valu_[i];
 8021336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802133a:	687a      	ldr	r2, [r7, #4]
 802133c:	3398      	adds	r3, #152	; 0x98
 802133e:	005b      	lsls	r3, r3, #1
 8021340:	4413      	add	r3, r2
 8021342:	889b      	ldrh	r3, [r3, #4]
 8021344:	84bb      	strh	r3, [r7, #36]	; 0x24
        min = min_line_sensors_valu_[i];
 8021346:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802134a:	687b      	ldr	r3, [r7, #4]
 802134c:	32a8      	adds	r2, #168	; 0xa8
 802134e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021352:	847b      	strh	r3, [r7, #34]	; 0x22
        if(max < median || max == 0) max = median;
 8021354:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021356:	8bfb      	ldrh	r3, [r7, #30]
 8021358:	429a      	cmp	r2, r3
 802135a:	d302      	bcc.n	8021362 <_ZN10LineSensor6UpdateEv+0xe6>
 802135c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802135e:	2b00      	cmp	r3, #0
 8021360:	d101      	bne.n	8021366 <_ZN10LineSensor6UpdateEv+0xea>
 8021362:	8bfb      	ldrh	r3, [r7, #30]
 8021364:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(min > median || min == 0) min = median;
 8021366:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021368:	8bfb      	ldrh	r3, [r7, #30]
 802136a:	429a      	cmp	r2, r3
 802136c:	d802      	bhi.n	8021374 <_ZN10LineSensor6UpdateEv+0xf8>
 802136e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021370:	2b00      	cmp	r3, #0
 8021372:	d101      	bne.n	8021378 <_ZN10LineSensor6UpdateEv+0xfc>
 8021374:	8bfb      	ldrh	r3, [r7, #30]
 8021376:	847b      	strh	r3, [r7, #34]	; 0x22
        max_line_sensors_valu_[i] = max;
 8021378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802137c:	687a      	ldr	r2, [r7, #4]
 802137e:	3398      	adds	r3, #152	; 0x98
 8021380:	005b      	lsls	r3, r3, #1
 8021382:	4413      	add	r3, r2
 8021384:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021386:	809a      	strh	r2, [r3, #4]
        min_line_sensors_valu_[i] = min;
 8021388:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802138c:	687b      	ldr	r3, [r7, #4]
 802138e:	32a8      	adds	r2, #168	; 0xa8
 8021390:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8021392:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

#ifdef DEBUG_MODE
        g_max_line_valu[i] = max_line_sensors_valu_[i];
 8021396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802139a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802139e:	6879      	ldr	r1, [r7, #4]
 80213a0:	3398      	adds	r3, #152	; 0x98
 80213a2:	005b      	lsls	r3, r3, #1
 80213a4:	440b      	add	r3, r1
 80213a6:	8899      	ldrh	r1, [r3, #4]
 80213a8:	4b25      	ldr	r3, [pc, #148]	; (8021440 <_ZN10LineSensor6UpdateEv+0x1c4>)
 80213aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_min_line_valu[i] = min_line_sensors_valu_[i];
 80213ae:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80213b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80213b6:	687a      	ldr	r2, [r7, #4]
 80213b8:	31a8      	adds	r1, #168	; 0xa8
 80213ba:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80213be:	4a21      	ldr	r2, [pc, #132]	; (8021444 <_ZN10LineSensor6UpdateEv+0x1c8>)
 80213c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#endif // DEBUG_MODE

        if(max > min)
 80213c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80213c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80213c8:	429a      	cmp	r2, r3
 80213ca:	d928      	bls.n	802141e <_ZN10LineSensor6UpdateEv+0x1a2>
        {
            normalized = MAX_NORMALIZED_VALU * (median - min) / (max - min);
 80213cc:	8bfa      	ldrh	r2, [r7, #30]
 80213ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80213d0:	1ad3      	subs	r3, r2, r3
 80213d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80213d6:	fb02 f203 	mul.w	r2, r2, r3
 80213da:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80213dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80213de:	1acb      	subs	r3, r1, r3
 80213e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80213e4:	83bb      	strh	r3, [r7, #28]
            line_sensors_valu_[i] = normalized;
 80213e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80213ea:	687a      	ldr	r2, [r7, #4]
 80213ec:	33b4      	adds	r3, #180	; 0xb4
 80213ee:	005b      	lsls	r3, r3, #1
 80213f0:	4413      	add	r3, r2
 80213f2:	8bba      	ldrh	r2, [r7, #28]
 80213f4:	809a      	strh	r2, [r3, #4]

#ifdef DEBUG_MODE
            g_line_valu[i] = line_sensors_valu_[i];
 80213f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80213fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80213fe:	6879      	ldr	r1, [r7, #4]
 8021400:	33b4      	adds	r3, #180	; 0xb4
 8021402:	005b      	lsls	r3, r3, #1
 8021404:	440b      	add	r3, r1
 8021406:	8899      	ldrh	r1, [r3, #4]
 8021408:	4b0f      	ldr	r3, [pc, #60]	; (8021448 <_ZN10LineSensor6UpdateEv+0x1cc>)
 802140a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
#endif // DEBUG_MODE

            if(normalized < EMERGENCY_STOP_BORDER) emergency = false;
 802140e:	8bbb      	ldrh	r3, [r7, #28]
 8021410:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8021414:	4293      	cmp	r3, r2
 8021416:	d802      	bhi.n	802141e <_ZN10LineSensor6UpdateEv+0x1a2>
 8021418:	2300      	movs	r3, #0
 802141a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802141e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021422:	3301      	adds	r3, #1
 8021424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021428:	e732      	b.n	8021290 <_ZN10LineSensor6UpdateEv+0x14>
        }
    }
    emergency_stop_flag_ = emergency;
 802142a:	687b      	ldr	r3, [r7, #4]
 802142c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8021430:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
}
 8021434:	bf00      	nop
 8021436:	372c      	adds	r7, #44	; 0x2c
 8021438:	46bd      	mov	sp, r7
 802143a:	bd90      	pop	{r4, r7, pc}
 802143c:	20000098 	.word	0x20000098
 8021440:	200001b0 	.word	0x200001b0
 8021444:	200001cc 	.word	0x200001cc
 8021448:	200001e8 	.word	0x200001e8

0802144c <_ZN10LineSensor19LeftRightDifferenceEv>:

float LineSensor::LeftRightDifference()
{
 802144c:	b5b0      	push	{r4, r5, r7, lr}
 802144e:	b086      	sub	sp, #24
 8021450:	af00      	add	r7, sp, #0
 8021452:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t left = 0, right = 0;
 8021454:	2300      	movs	r3, #0
 8021456:	613b      	str	r3, [r7, #16]
 8021458:	2300      	movs	r3, #0
 802145a:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 802145c:	2300      	movs	r3, #0
 802145e:	75fb      	strb	r3, [r7, #23]
 8021460:	7dfb      	ldrb	r3, [r7, #23]
 8021462:	2b06      	cmp	r3, #6
 8021464:	d80d      	bhi.n	8021482 <_ZN10LineSensor19LeftRightDifferenceEv+0x36>
    {
        left += line_sensors_valu_[i];
 8021466:	7dfb      	ldrb	r3, [r7, #23]
 8021468:	687a      	ldr	r2, [r7, #4]
 802146a:	33b4      	adds	r3, #180	; 0xb4
 802146c:	005b      	lsls	r3, r3, #1
 802146e:	4413      	add	r3, r2
 8021470:	889b      	ldrh	r3, [r3, #4]
 8021472:	461a      	mov	r2, r3
 8021474:	693b      	ldr	r3, [r7, #16]
 8021476:	4413      	add	r3, r2
 8021478:	613b      	str	r3, [r7, #16]
    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 802147a:	7dfb      	ldrb	r3, [r7, #23]
 802147c:	3301      	adds	r3, #1
 802147e:	75fb      	strb	r3, [r7, #23]
 8021480:	e7ee      	b.n	8021460 <_ZN10LineSensor19LeftRightDifferenceEv+0x14>
    }
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8021482:	2307      	movs	r3, #7
 8021484:	75fb      	strb	r3, [r7, #23]
 8021486:	7dfb      	ldrb	r3, [r7, #23]
 8021488:	2b0d      	cmp	r3, #13
 802148a:	d80d      	bhi.n	80214a8 <_ZN10LineSensor19LeftRightDifferenceEv+0x5c>
    {
        right += line_sensors_valu_[i];
 802148c:	7dfb      	ldrb	r3, [r7, #23]
 802148e:	687a      	ldr	r2, [r7, #4]
 8021490:	33b4      	adds	r3, #180	; 0xb4
 8021492:	005b      	lsls	r3, r3, #1
 8021494:	4413      	add	r3, r2
 8021496:	889b      	ldrh	r3, [r3, #4]
 8021498:	461a      	mov	r2, r3
 802149a:	68fb      	ldr	r3, [r7, #12]
 802149c:	4413      	add	r3, r2
 802149e:	60fb      	str	r3, [r7, #12]
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 80214a0:	7dfb      	ldrb	r3, [r7, #23]
 80214a2:	3301      	adds	r3, #1
 80214a4:	75fb      	strb	r3, [r7, #23]
 80214a6:	e7ee      	b.n	8021486 <_ZN10LineSensor19LeftRightDifferenceEv+0x3a>
    }

#ifdef DEBUG_MODE
    g_line_left = left;
 80214a8:	4a11      	ldr	r2, [pc, #68]	; (80214f0 <_ZN10LineSensor19LeftRightDifferenceEv+0xa4>)
 80214aa:	693b      	ldr	r3, [r7, #16]
 80214ac:	6013      	str	r3, [r2, #0]
    g_line_right = right;
 80214ae:	4a11      	ldr	r2, [pc, #68]	; (80214f4 <_ZN10LineSensor19LeftRightDifferenceEv+0xa8>)
 80214b0:	68fb      	ldr	r3, [r7, #12]
 80214b2:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float difference = right * LINE_SENSOR_CORRECTION - left;
 80214b4:	68f8      	ldr	r0, [r7, #12]
 80214b6:	f7fe ff05 	bl	80202c4 <__aeabi_ui2d>
 80214ba:	4604      	mov	r4, r0
 80214bc:	460d      	mov	r5, r1
 80214be:	6938      	ldr	r0, [r7, #16]
 80214c0:	f7fe ff00 	bl	80202c4 <__aeabi_ui2d>
 80214c4:	4602      	mov	r2, r0
 80214c6:	460b      	mov	r3, r1
 80214c8:	4620      	mov	r0, r4
 80214ca:	4629      	mov	r1, r5
 80214cc:	f7fe fdbc 	bl	8020048 <__aeabi_dsub>
 80214d0:	4603      	mov	r3, r0
 80214d2:	460c      	mov	r4, r1
 80214d4:	4618      	mov	r0, r3
 80214d6:	4621      	mov	r1, r4
 80214d8:	f7ff fa08 	bl	80208ec <__aeabi_d2f>
 80214dc:	4603      	mov	r3, r0
 80214de:	60bb      	str	r3, [r7, #8]

    return difference;
 80214e0:	68bb      	ldr	r3, [r7, #8]
 80214e2:	ee07 3a90 	vmov	s15, r3
}
 80214e6:	eeb0 0a67 	vmov.f32	s0, s15
 80214ea:	3718      	adds	r7, #24
 80214ec:	46bd      	mov	sp, r7
 80214ee:	bdb0      	pop	{r4, r5, r7, pc}
 80214f0:	20000204 	.word	0x20000204
 80214f4:	20000208 	.word	0x20000208

080214f8 <_ZN10LineSensor20GetEmergencyStopFlagEv>:

bool LineSensor::GetEmergencyStopFlag()
{
 80214f8:	b480      	push	{r7}
 80214fa:	b083      	sub	sp, #12
 80214fc:	af00      	add	r7, sp, #0
 80214fe:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8021500:	687b      	ldr	r3, [r7, #4]
 8021502:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
}
 8021506:	4618      	mov	r0, r3
 8021508:	370c      	adds	r7, #12
 802150a:	46bd      	mov	sp, r7
 802150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021510:	4770      	bx	lr
	...

08021514 <_ZN10LineSensor16CheckCalibrationEv>:

bool LineSensor::CheckCalibration()
{
 8021514:	b480      	push	{r7}
 8021516:	b085      	sub	sp, #20
 8021518:	af00      	add	r7, sp, #0
 802151a:	6078      	str	r0, [r7, #4]
    static uint16_t timer = 0;
    static uint16_t pre_max[NUM_OF_LINE_SENSORS] = {0};
    static uint16_t pre_min[NUM_OF_LINE_SENSORS] = {0};
    uint16_t max, min;
    bool result = true;
 802151c:	2301      	movs	r3, #1
 802151e:	73fb      	strb	r3, [r7, #15]

    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021520:	2300      	movs	r3, #0
 8021522:	73bb      	strb	r3, [r7, #14]
 8021524:	7bbb      	ldrb	r3, [r7, #14]
 8021526:	2b0d      	cmp	r3, #13
 8021528:	d82d      	bhi.n	8021586 <_ZN10LineSensor16CheckCalibrationEv+0x72>
    {
        max = max_line_sensors_valu_[i];
 802152a:	7bbb      	ldrb	r3, [r7, #14]
 802152c:	687a      	ldr	r2, [r7, #4]
 802152e:	3398      	adds	r3, #152	; 0x98
 8021530:	005b      	lsls	r3, r3, #1
 8021532:	4413      	add	r3, r2
 8021534:	889b      	ldrh	r3, [r3, #4]
 8021536:	81bb      	strh	r3, [r7, #12]
        min = min_line_sensors_valu_[i];
 8021538:	7bba      	ldrb	r2, [r7, #14]
 802153a:	687b      	ldr	r3, [r7, #4]
 802153c:	32a8      	adds	r2, #168	; 0xa8
 802153e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021542:	817b      	strh	r3, [r7, #10]

        if(pre_max[i] != max)      result = false;
 8021544:	7bbb      	ldrb	r3, [r7, #14]
 8021546:	4a1e      	ldr	r2, [pc, #120]	; (80215c0 <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 8021548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802154c:	89ba      	ldrh	r2, [r7, #12]
 802154e:	429a      	cmp	r2, r3
 8021550:	d002      	beq.n	8021558 <_ZN10LineSensor16CheckCalibrationEv+0x44>
 8021552:	2300      	movs	r3, #0
 8021554:	73fb      	strb	r3, [r7, #15]
 8021556:	e008      	b.n	802156a <_ZN10LineSensor16CheckCalibrationEv+0x56>
        else if(pre_min[i] != min) result = false;
 8021558:	7bbb      	ldrb	r3, [r7, #14]
 802155a:	4a1a      	ldr	r2, [pc, #104]	; (80215c4 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 802155c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021560:	897a      	ldrh	r2, [r7, #10]
 8021562:	429a      	cmp	r2, r3
 8021564:	d001      	beq.n	802156a <_ZN10LineSensor16CheckCalibrationEv+0x56>
 8021566:	2300      	movs	r3, #0
 8021568:	73fb      	strb	r3, [r7, #15]

        pre_max[i] = max;
 802156a:	7bbb      	ldrb	r3, [r7, #14]
 802156c:	4914      	ldr	r1, [pc, #80]	; (80215c0 <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 802156e:	89ba      	ldrh	r2, [r7, #12]
 8021570:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        pre_min[i] = min;
 8021574:	7bbb      	ldrb	r3, [r7, #14]
 8021576:	4913      	ldr	r1, [pc, #76]	; (80215c4 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 8021578:	897a      	ldrh	r2, [r7, #10]
 802157a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802157e:	7bbb      	ldrb	r3, [r7, #14]
 8021580:	3301      	adds	r3, #1
 8021582:	73bb      	strb	r3, [r7, #14]
 8021584:	e7ce      	b.n	8021524 <_ZN10LineSensor16CheckCalibrationEv+0x10>
    }

    if(result)
 8021586:	7bfb      	ldrb	r3, [r7, #15]
 8021588:	2b00      	cmp	r3, #0
 802158a:	d00e      	beq.n	80215aa <_ZN10LineSensor16CheckCalibrationEv+0x96>
    {
        if(timer < CALIBRATION_SUCCESS_TIME)
 802158c:	4b0e      	ldr	r3, [pc, #56]	; (80215c8 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802158e:	881b      	ldrh	r3, [r3, #0]
 8021590:	f240 52db 	movw	r2, #1499	; 0x5db
 8021594:	4293      	cmp	r3, r2
 8021596:	d80b      	bhi.n	80215b0 <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        {
            timer++;
 8021598:	4b0b      	ldr	r3, [pc, #44]	; (80215c8 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802159a:	881b      	ldrh	r3, [r3, #0]
 802159c:	3301      	adds	r3, #1
 802159e:	b29a      	uxth	r2, r3
 80215a0:	4b09      	ldr	r3, [pc, #36]	; (80215c8 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 80215a2:	801a      	strh	r2, [r3, #0]
            result = false;
 80215a4:	2300      	movs	r3, #0
 80215a6:	73fb      	strb	r3, [r7, #15]
 80215a8:	e002      	b.n	80215b0 <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        }
    }
    else timer = 0;
 80215aa:	4b07      	ldr	r3, [pc, #28]	; (80215c8 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 80215ac:	2200      	movs	r2, #0
 80215ae:	801a      	strh	r2, [r3, #0]
    
    return result;
 80215b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80215b2:	4618      	mov	r0, r3
 80215b4:	3714      	adds	r7, #20
 80215b6:	46bd      	mov	sp, r7
 80215b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215bc:	4770      	bx	lr
 80215be:	bf00      	nop
 80215c0:	20000030 	.word	0x20000030
 80215c4:	2000004c 	.word	0x2000004c
 80215c8:	2000002e 	.word	0x2000002e

080215cc <_ZN10LineSensor15MonitorLineBuffEv>:

#ifdef DEBUG_MODE
void LineSensor::MonitorLineBuff()
{
 80215cc:	b480      	push	{r7}
 80215ce:	b085      	sub	sp, #20
 80215d0:	af00      	add	r7, sp, #0
 80215d2:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80215d4:	2300      	movs	r3, #0
 80215d6:	73fb      	strb	r3, [r7, #15]
 80215d8:	7bfb      	ldrb	r3, [r7, #15]
 80215da:	2b0d      	cmp	r3, #13
 80215dc:	d80b      	bhi.n	80215f6 <_ZN10LineSensor15MonitorLineBuffEv+0x2a>
    {
        g_line_buff[i] = line_sensors_buff_[i];
 80215de:	7bf9      	ldrb	r1, [r7, #15]
 80215e0:	7bfb      	ldrb	r3, [r7, #15]
 80215e2:	687a      	ldr	r2, [r7, #4]
 80215e4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80215e8:	4a06      	ldr	r2, [pc, #24]	; (8021604 <_ZN10LineSensor15MonitorLineBuffEv+0x38>)
 80215ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80215ee:	7bfb      	ldrb	r3, [r7, #15]
 80215f0:	3301      	adds	r3, #1
 80215f2:	73fb      	strb	r3, [r7, #15]
 80215f4:	e7f0      	b.n	80215d8 <_ZN10LineSensor15MonitorLineBuffEv+0xc>
    }
}
 80215f6:	bf00      	nop
 80215f8:	3714      	adds	r7, #20
 80215fa:	46bd      	mov	sp, r7
 80215fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021600:	4770      	bx	lr
 8021602:	bf00      	nop
 8021604:	2000007c 	.word	0x2000007c

08021608 <_ZN9LineTraceC1EP10LineSensor>:
#include "line_trace.hpp"

LineTrace::LineTrace(LineSensor *line_sensor) : integral_error_(0)
 8021608:	b480      	push	{r7}
 802160a:	b083      	sub	sp, #12
 802160c:	af00      	add	r7, sp, #0
 802160e:	6078      	str	r0, [r7, #4]
 8021610:	6039      	str	r1, [r7, #0]
 8021612:	687b      	ldr	r3, [r7, #4]
 8021614:	f04f 0200 	mov.w	r2, #0
 8021618:	601a      	str	r2, [r3, #0]
{
    line_sensor_ = line_sensor;
 802161a:	687b      	ldr	r3, [r7, #4]
 802161c:	683a      	ldr	r2, [r7, #0]
 802161e:	605a      	str	r2, [r3, #4]
}
 8021620:	687b      	ldr	r3, [r7, #4]
 8021622:	4618      	mov	r0, r3
 8021624:	370c      	adds	r7, #12
 8021626:	46bd      	mov	sp, r7
 8021628:	f85d 7b04 	ldr.w	r7, [sp], #4
 802162c:	4770      	bx	lr

0802162e <_ZN9LineTrace13LineTraceOnlyEv>:

float LineTrace::LineTraceOnly()
{
 802162e:	b580      	push	{r7, lr}
 8021630:	b086      	sub	sp, #24
 8021632:	af00      	add	r7, sp, #0
 8021634:	6078      	str	r0, [r7, #4]
    float p_gain = LINE_ONLY_P_GAIN;
 8021636:	f04f 0300 	mov.w	r3, #0
 802163a:	617b      	str	r3, [r7, #20]
    float i_gain = LINE_ONLY_I_GAIN;
 802163c:	f04f 0300 	mov.w	r3, #0
 8021640:	613b      	str	r3, [r7, #16]
    float d_gain = LINE_ONLY_D_GAIN;
 8021642:	f04f 0300 	mov.w	r3, #0
 8021646:	60fb      	str	r3, [r7, #12]

    return PidControl(p_gain, i_gain, d_gain);
 8021648:	ed97 1a03 	vldr	s2, [r7, #12]
 802164c:	edd7 0a04 	vldr	s1, [r7, #16]
 8021650:	ed97 0a05 	vldr	s0, [r7, #20]
 8021654:	6878      	ldr	r0, [r7, #4]
 8021656:	f000 f807 	bl	8021668 <_ZN9LineTrace10PidControlEfff>
 802165a:	eef0 7a40 	vmov.f32	s15, s0
}
 802165e:	eeb0 0a67 	vmov.f32	s0, s15
 8021662:	3718      	adds	r7, #24
 8021664:	46bd      	mov	sp, r7
 8021666:	bd80      	pop	{r7, pc}

08021668 <_ZN9LineTrace10PidControlEfff>:

    return PidControl(p_gain, i_gain, d_gain);
}

float LineTrace::PidControl(float p_gain, float i_gain, float d_gain)
{
 8021668:	b590      	push	{r4, r7, lr}
 802166a:	b08b      	sub	sp, #44	; 0x2c
 802166c:	af00      	add	r7, sp, #0
 802166e:	60f8      	str	r0, [r7, #12]
 8021670:	ed87 0a02 	vstr	s0, [r7, #8]
 8021674:	edc7 0a01 	vstr	s1, [r7, #4]
 8021678:	ed87 1a00 	vstr	s2, [r7]
    static float pre_error = line_sensor_->LeftRightDifference();
 802167c:	4b52      	ldr	r3, [pc, #328]	; (80217c8 <_ZN9LineTrace10PidControlEfff+0x160>)
 802167e:	781b      	ldrb	r3, [r3, #0]
 8021680:	f3bf 8f5b 	dmb	ish
 8021684:	b2db      	uxtb	r3, r3
 8021686:	f003 0301 	and.w	r3, r3, #1
 802168a:	2b00      	cmp	r3, #0
 802168c:	bf0c      	ite	eq
 802168e:	2301      	moveq	r3, #1
 8021690:	2300      	movne	r3, #0
 8021692:	b2db      	uxtb	r3, r3
 8021694:	2b00      	cmp	r3, #0
 8021696:	d017      	beq.n	80216c8 <_ZN9LineTrace10PidControlEfff+0x60>
 8021698:	484b      	ldr	r0, [pc, #300]	; (80217c8 <_ZN9LineTrace10PidControlEfff+0x160>)
 802169a:	f005 fb61 	bl	8026d60 <__cxa_guard_acquire>
 802169e:	4603      	mov	r3, r0
 80216a0:	2b00      	cmp	r3, #0
 80216a2:	bf14      	ite	ne
 80216a4:	2301      	movne	r3, #1
 80216a6:	2300      	moveq	r3, #0
 80216a8:	b2db      	uxtb	r3, r3
 80216aa:	2b00      	cmp	r3, #0
 80216ac:	d00c      	beq.n	80216c8 <_ZN9LineTrace10PidControlEfff+0x60>
 80216ae:	68fb      	ldr	r3, [r7, #12]
 80216b0:	685b      	ldr	r3, [r3, #4]
 80216b2:	4618      	mov	r0, r3
 80216b4:	f7ff feca 	bl	802144c <_ZN10LineSensor19LeftRightDifferenceEv>
 80216b8:	eef0 7a40 	vmov.f32	s15, s0
 80216bc:	4b43      	ldr	r3, [pc, #268]	; (80217cc <_ZN9LineTrace10PidControlEfff+0x164>)
 80216be:	edc3 7a00 	vstr	s15, [r3]
 80216c2:	4841      	ldr	r0, [pc, #260]	; (80217c8 <_ZN9LineTrace10PidControlEfff+0x160>)
 80216c4:	f005 fb58 	bl	8026d78 <__cxa_guard_release>
    float error, differential_error, integral_error;
    float p, d, i;

    error = line_sensor_->LeftRightDifference();
 80216c8:	68fb      	ldr	r3, [r7, #12]
 80216ca:	685b      	ldr	r3, [r3, #4]
 80216cc:	4618      	mov	r0, r3
 80216ce:	f7ff febd 	bl	802144c <_ZN10LineSensor19LeftRightDifferenceEv>
 80216d2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    differential_error = (error - pre_error) / TIM6_PERIOD_S;
 80216d6:	4b3d      	ldr	r3, [pc, #244]	; (80217cc <_ZN9LineTrace10PidControlEfff+0x164>)
 80216d8:	edd3 7a00 	vldr	s15, [r3]
 80216dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80216e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80216e4:	ee17 0a90 	vmov	r0, s15
 80216e8:	f7fe fe0e 	bl	8020308 <__aeabi_f2d>
 80216ec:	a334      	add	r3, pc, #208	; (adr r3, 80217c0 <_ZN9LineTrace10PidControlEfff+0x158>)
 80216ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216f2:	f7fe ff8b 	bl	802060c <__aeabi_ddiv>
 80216f6:	4603      	mov	r3, r0
 80216f8:	460c      	mov	r4, r1
 80216fa:	4618      	mov	r0, r3
 80216fc:	4621      	mov	r1, r4
 80216fe:	f7ff f8f5 	bl	80208ec <__aeabi_d2f>
 8021702:	4603      	mov	r3, r0
 8021704:	623b      	str	r3, [r7, #32]
    integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 8021706:	4b31      	ldr	r3, [pc, #196]	; (80217cc <_ZN9LineTrace10PidControlEfff+0x164>)
 8021708:	ed93 7a00 	vldr	s14, [r3]
 802170c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8021710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021714:	ee17 0a90 	vmov	r0, s15
 8021718:	f7fe fdf6 	bl	8020308 <__aeabi_f2d>
 802171c:	f04f 0200 	mov.w	r2, #0
 8021720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021724:	f7fe ff72 	bl	802060c <__aeabi_ddiv>
 8021728:	4603      	mov	r3, r0
 802172a:	460c      	mov	r4, r1
 802172c:	4618      	mov	r0, r3
 802172e:	4621      	mov	r1, r4
 8021730:	a323      	add	r3, pc, #140	; (adr r3, 80217c0 <_ZN9LineTrace10PidControlEfff+0x158>)
 8021732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021736:	f7fe fe3f 	bl	80203b8 <__aeabi_dmul>
 802173a:	4603      	mov	r3, r0
 802173c:	460c      	mov	r4, r1
 802173e:	4618      	mov	r0, r3
 8021740:	4621      	mov	r1, r4
 8021742:	f7ff f8d3 	bl	80208ec <__aeabi_d2f>
 8021746:	4603      	mov	r3, r0
 8021748:	61fb      	str	r3, [r7, #28]
    SetIntegralError(integral_error);
 802174a:	ed97 0a07 	vldr	s0, [r7, #28]
 802174e:	68f8      	ldr	r0, [r7, #12]
 8021750:	f000 f844 	bl	80217dc <_ZN9LineTrace16SetIntegralErrorEf>

    p = p_gain * error;
 8021754:	ed97 7a02 	vldr	s14, [r7, #8]
 8021758:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 802175c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021760:	edc7 7a06 	vstr	s15, [r7, #24]
    d = d_gain * differential_error;
 8021764:	ed97 7a00 	vldr	s14, [r7]
 8021768:	edd7 7a08 	vldr	s15, [r7, #32]
 802176c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021770:	edc7 7a05 	vstr	s15, [r7, #20]
    i = i_gain * integral_error_;
 8021774:	68fb      	ldr	r3, [r7, #12]
 8021776:	edd3 7a00 	vldr	s15, [r3]
 802177a:	ed97 7a01 	vldr	s14, [r7, #4]
 802177e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021782:	edc7 7a04 	vstr	s15, [r7, #16]

#ifdef DEBUG_MODE
    g_trace_p = p;
 8021786:	4a12      	ldr	r2, [pc, #72]	; (80217d0 <_ZN9LineTrace10PidControlEfff+0x168>)
 8021788:	69bb      	ldr	r3, [r7, #24]
 802178a:	6013      	str	r3, [r2, #0]
    g_trace_d = d;
 802178c:	4a11      	ldr	r2, [pc, #68]	; (80217d4 <_ZN9LineTrace10PidControlEfff+0x16c>)
 802178e:	697b      	ldr	r3, [r7, #20]
 8021790:	6013      	str	r3, [r2, #0]
    g_trace_i = i;
 8021792:	4a11      	ldr	r2, [pc, #68]	; (80217d8 <_ZN9LineTrace10PidControlEfff+0x170>)
 8021794:	693b      	ldr	r3, [r7, #16]
 8021796:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    pre_error = error;
 8021798:	4a0c      	ldr	r2, [pc, #48]	; (80217cc <_ZN9LineTrace10PidControlEfff+0x164>)
 802179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802179c:	6013      	str	r3, [r2, #0]

    return p + d + i;
 802179e:	ed97 7a06 	vldr	s14, [r7, #24]
 80217a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80217a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80217aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80217ae:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80217b2:	eeb0 0a67 	vmov.f32	s0, s15
 80217b6:	372c      	adds	r7, #44	; 0x2c
 80217b8:	46bd      	mov	sp, r7
 80217ba:	bd90      	pop	{r4, r7, pc}
 80217bc:	f3af 8000 	nop.w
 80217c0:	47ae147b 	.word	0x47ae147b
 80217c4:	3f547ae1 	.word	0x3f547ae1
 80217c8:	2000006c 	.word	0x2000006c
 80217cc:	20000068 	.word	0x20000068
 80217d0:	20000244 	.word	0x20000244
 80217d4:	2000024c 	.word	0x2000024c
 80217d8:	20000248 	.word	0x20000248

080217dc <_ZN9LineTrace16SetIntegralErrorEf>:

void LineTrace::SetIntegralError(float integral_error)
{
 80217dc:	b480      	push	{r7}
 80217de:	b083      	sub	sp, #12
 80217e0:	af00      	add	r7, sp, #0
 80217e2:	6078      	str	r0, [r7, #4]
 80217e4:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 80217e8:	687b      	ldr	r3, [r7, #4]
 80217ea:	ed93 7a00 	vldr	s14, [r3]
 80217ee:	edd7 7a00 	vldr	s15, [r7]
 80217f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80217f6:	687b      	ldr	r3, [r7, #4]
 80217f8:	edc3 7a00 	vstr	s15, [r3]
}
 80217fc:	bf00      	nop
 80217fe:	370c      	adds	r7, #12
 8021800:	46bd      	mov	sp, r7
 8021802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021806:	4770      	bx	lr

08021808 <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() : const_distance_log_(), radian_log_(), various_log_(), const_distance_copy_(), radian_copy_(), various_copy_(), accel_address_(), decel_address_(), periodic_write_enable_(0), accel_position_write_enable_(0), excess_stack_(0), target_velocity_(MIN_VELOCITY) {}
 8021808:	b580      	push	{r7, lr}
 802180a:	b082      	sub	sp, #8
 802180c:	af00      	add	r7, sp, #0
 802180e:	6078      	str	r0, [r7, #4]
 8021810:	687a      	ldr	r2, [r7, #4]
 8021812:	2309      	movs	r3, #9
 8021814:	2b00      	cmp	r3, #0
 8021816:	db05      	blt.n	8021824 <_ZN6LoggerC1Ev+0x1c>
 8021818:	f04f 0100 	mov.w	r1, #0
 802181c:	6011      	str	r1, [r2, #0]
 802181e:	3204      	adds	r2, #4
 8021820:	3b01      	subs	r3, #1
 8021822:	e7f7      	b.n	8021814 <_ZN6LoggerC1Ev+0xc>
 8021824:	687b      	ldr	r3, [r7, #4]
 8021826:	f103 0228 	add.w	r2, r3, #40	; 0x28
 802182a:	2309      	movs	r3, #9
 802182c:	2b00      	cmp	r3, #0
 802182e:	db05      	blt.n	802183c <_ZN6LoggerC1Ev+0x34>
 8021830:	f04f 0100 	mov.w	r1, #0
 8021834:	6011      	str	r1, [r2, #0]
 8021836:	3204      	adds	r2, #4
 8021838:	3b01      	subs	r3, #1
 802183a:	e7f7      	b.n	802182c <_ZN6LoggerC1Ev+0x24>
 802183c:	687b      	ldr	r3, [r7, #4]
 802183e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8021842:	2309      	movs	r3, #9
 8021844:	2b00      	cmp	r3, #0
 8021846:	db04      	blt.n	8021852 <_ZN6LoggerC1Ev+0x4a>
 8021848:	2100      	movs	r1, #0
 802184a:	8011      	strh	r1, [r2, #0]
 802184c:	3202      	adds	r2, #2
 802184e:	3b01      	subs	r3, #1
 8021850:	e7f8      	b.n	8021844 <_ZN6LoggerC1Ev+0x3c>
 8021852:	687b      	ldr	r3, [r7, #4]
 8021854:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8021858:	2309      	movs	r3, #9
 802185a:	2b00      	cmp	r3, #0
 802185c:	db05      	blt.n	802186a <_ZN6LoggerC1Ev+0x62>
 802185e:	f04f 0100 	mov.w	r1, #0
 8021862:	6011      	str	r1, [r2, #0]
 8021864:	3204      	adds	r2, #4
 8021866:	3b01      	subs	r3, #1
 8021868:	e7f7      	b.n	802185a <_ZN6LoggerC1Ev+0x52>
 802186a:	687b      	ldr	r3, [r7, #4]
 802186c:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8021870:	2309      	movs	r3, #9
 8021872:	2b00      	cmp	r3, #0
 8021874:	db05      	blt.n	8021882 <_ZN6LoggerC1Ev+0x7a>
 8021876:	f04f 0100 	mov.w	r1, #0
 802187a:	6011      	str	r1, [r2, #0]
 802187c:	3204      	adds	r2, #4
 802187e:	3b01      	subs	r3, #1
 8021880:	e7f7      	b.n	8021872 <_ZN6LoggerC1Ev+0x6a>
 8021882:	687b      	ldr	r3, [r7, #4]
 8021884:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8021888:	2309      	movs	r3, #9
 802188a:	2b00      	cmp	r3, #0
 802188c:	db04      	blt.n	8021898 <_ZN6LoggerC1Ev+0x90>
 802188e:	2100      	movs	r1, #0
 8021890:	8011      	strh	r1, [r2, #0]
 8021892:	3202      	adds	r2, #2
 8021894:	3b01      	subs	r3, #1
 8021896:	e7f8      	b.n	802188a <_ZN6LoggerC1Ev+0x82>
 8021898:	687b      	ldr	r3, [r7, #4]
 802189a:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 802189e:	2304      	movs	r3, #4
 80218a0:	2b00      	cmp	r3, #0
 80218a2:	db04      	blt.n	80218ae <_ZN6LoggerC1Ev+0xa6>
 80218a4:	2100      	movs	r1, #0
 80218a6:	8011      	strh	r1, [r2, #0]
 80218a8:	3202      	adds	r2, #2
 80218aa:	3b01      	subs	r3, #1
 80218ac:	e7f8      	b.n	80218a0 <_ZN6LoggerC1Ev+0x98>
 80218ae:	687b      	ldr	r3, [r7, #4]
 80218b0:	f103 02d2 	add.w	r2, r3, #210	; 0xd2
 80218b4:	2304      	movs	r3, #4
 80218b6:	2b00      	cmp	r3, #0
 80218b8:	db04      	blt.n	80218c4 <_ZN6LoggerC1Ev+0xbc>
 80218ba:	2100      	movs	r1, #0
 80218bc:	8011      	strh	r1, [r2, #0]
 80218be:	3202      	adds	r2, #2
 80218c0:	3b01      	subs	r3, #1
 80218c2:	e7f8      	b.n	80218b6 <_ZN6LoggerC1Ev+0xae>
 80218c4:	687b      	ldr	r3, [r7, #4]
 80218c6:	2200      	movs	r2, #0
 80218c8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80218cc:	687b      	ldr	r3, [r7, #4]
 80218ce:	2200      	movs	r2, #0
 80218d0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 80218d4:	687b      	ldr	r3, [r7, #4]
 80218d6:	f04f 0200 	mov.w	r2, #0
 80218da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80218de:	687b      	ldr	r3, [r7, #4]
 80218e0:	4a0b      	ldr	r2, [pc, #44]	; (8021910 <_ZN6LoggerC1Ev+0x108>)
 80218e2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80218e6:	687b      	ldr	r3, [r7, #4]
 80218e8:	33e8      	adds	r3, #232	; 0xe8
 80218ea:	4618      	mov	r0, r3
 80218ec:	f7ff f9ce 	bl	8020c8c <_ZN7EncoderC1Ev>
 80218f0:	687b      	ldr	r3, [r7, #4]
 80218f2:	33f8      	adds	r3, #248	; 0xf8
 80218f4:	4618      	mov	r0, r3
 80218f6:	f7ff fa13 	bl	8020d20 <_ZN8Iim42652C1Ev>
 80218fa:	687b      	ldr	r3, [r7, #4]
 80218fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8021900:	4618      	mov	r0, r3
 8021902:	f001 f827 	bl	8022954 <_ZN10SideSensorC1Ev>
 8021906:	687b      	ldr	r3, [r7, #4]
 8021908:	4618      	mov	r0, r3
 802190a:	3708      	adds	r7, #8
 802190c:	46bd      	mov	sp, r7
 802190e:	bd80      	pop	{r7, pc}
 8021910:	3fa66666 	.word	0x3fa66666

08021914 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021914:	b580      	push	{r7, lr}
 8021916:	b082      	sub	sp, #8
 8021918:	af00      	add	r7, sp, #0
 802191a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 802191c:	687b      	ldr	r3, [r7, #4]
 802191e:	681b      	ldr	r3, [r3, #0]
 8021920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021924:	d101      	bne.n	802192a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 8021926:	f002 f8cf 	bl	8023ac8 <InterruptTim2>
  }
  if(htim->Instance == TIM6)
 802192a:	687b      	ldr	r3, [r7, #4]
 802192c:	681b      	ldr	r3, [r3, #0]
 802192e:	4a08      	ldr	r2, [pc, #32]	; (8021950 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8021930:	4293      	cmp	r3, r2
 8021932:	d101      	bne.n	8021938 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim6();
 8021934:	f002 f8b8 	bl	8023aa8 <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 8021938:	687b      	ldr	r3, [r7, #4]
 802193a:	681b      	ldr	r3, [r3, #0]
 802193c:	4a05      	ldr	r2, [pc, #20]	; (8021954 <HAL_TIM_PeriodElapsedCallback+0x40>)
 802193e:	4293      	cmp	r3, r2
 8021940:	d101      	bne.n	8021946 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim7();
 8021942:	f002 f8a1 	bl	8023a88 <InterruptTim7>
  }
}
 8021946:	bf00      	nop
 8021948:	3708      	adds	r7, #8
 802194a:	46bd      	mov	sp, r7
 802194c:	bd80      	pop	{r7, pc}
 802194e:	bf00      	nop
 8021950:	40001000 	.word	0x40001000
 8021954:	40001400 	.word	0x40001400

08021958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8021958:	b580      	push	{r7, lr}
 802195a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802195c:	f002 f946 	bl	8023bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8021960:	f000 f822 	bl	80219a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8021964:	f000 fd68 	bl	8022438 <MX_GPIO_Init>
  MX_DMA_Init();
 8021968:	f000 fd46 	bl	80223f8 <MX_DMA_Init>
  MX_ADC1_Init();
 802196c:	f000 f886 	bl	8021a7c <MX_ADC1_Init>
  MX_I2C2_Init();
 8021970:	f000 f98c 	bl	8021c8c <MX_I2C2_Init>
  MX_SPI3_Init();
 8021974:	f000 f9b8 	bl	8021ce8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8021978:	f000 f9ec 	bl	8021d54 <MX_TIM1_Init>
  MX_TIM3_Init();
 802197c:	f000 fac8 	bl	8021f10 <MX_TIM3_Init>
  MX_TIM4_Init();
 8021980:	f000 fb40 	bl	8022004 <MX_TIM4_Init>
  MX_TIM6_Init();
 8021984:	f000 fbe0 	bl	8022148 <MX_TIM6_Init>
  MX_TIM7_Init();
 8021988:	f000 fc14 	bl	80221b4 <MX_TIM7_Init>
  MX_TIM8_Init();
 802198c:	f000 fc48 	bl	8022220 <MX_TIM8_Init>
  MX_TIM11_Init();
 8021990:	f000 fc9e 	bl	80222d0 <MX_TIM11_Init>
  MX_TIM12_Init();
 8021994:	f000 fcea 	bl	802236c <MX_TIM12_Init>
  MX_TIM2_Init();
 8021998:	f000 fa6c 	bl	8021e74 <MX_TIM2_Init>
  MX_TIM5_Init();
 802199c:	f000 fb86 	bl	80220ac <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Init();
 80219a0:	f002 f868 	bl	8023a74 <Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80219a4:	e7fe      	b.n	80219a4 <main+0x4c>
	...

080219a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80219a8:	b580      	push	{r7, lr}
 80219aa:	b094      	sub	sp, #80	; 0x50
 80219ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80219ae:	f107 0320 	add.w	r3, r7, #32
 80219b2:	2230      	movs	r2, #48	; 0x30
 80219b4:	2100      	movs	r1, #0
 80219b6:	4618      	mov	r0, r3
 80219b8:	f005 fa06 	bl	8026dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80219bc:	f107 030c 	add.w	r3, r7, #12
 80219c0:	2200      	movs	r2, #0
 80219c2:	601a      	str	r2, [r3, #0]
 80219c4:	605a      	str	r2, [r3, #4]
 80219c6:	609a      	str	r2, [r3, #8]
 80219c8:	60da      	str	r2, [r3, #12]
 80219ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80219cc:	2300      	movs	r3, #0
 80219ce:	60bb      	str	r3, [r7, #8]
 80219d0:	4b28      	ldr	r3, [pc, #160]	; (8021a74 <SystemClock_Config+0xcc>)
 80219d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80219d4:	4a27      	ldr	r2, [pc, #156]	; (8021a74 <SystemClock_Config+0xcc>)
 80219d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80219da:	6413      	str	r3, [r2, #64]	; 0x40
 80219dc:	4b25      	ldr	r3, [pc, #148]	; (8021a74 <SystemClock_Config+0xcc>)
 80219de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80219e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80219e4:	60bb      	str	r3, [r7, #8]
 80219e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80219e8:	2300      	movs	r3, #0
 80219ea:	607b      	str	r3, [r7, #4]
 80219ec:	4b22      	ldr	r3, [pc, #136]	; (8021a78 <SystemClock_Config+0xd0>)
 80219ee:	681b      	ldr	r3, [r3, #0]
 80219f0:	4a21      	ldr	r2, [pc, #132]	; (8021a78 <SystemClock_Config+0xd0>)
 80219f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80219f6:	6013      	str	r3, [r2, #0]
 80219f8:	4b1f      	ldr	r3, [pc, #124]	; (8021a78 <SystemClock_Config+0xd0>)
 80219fa:	681b      	ldr	r3, [r3, #0]
 80219fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021a00:	607b      	str	r3, [r7, #4]
 8021a02:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8021a04:	2301      	movs	r3, #1
 8021a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8021a08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021a0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8021a0e:	2302      	movs	r3, #2
 8021a10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8021a12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8021a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8021a18:	2306      	movs	r3, #6
 8021a1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8021a1c:	23a8      	movs	r3, #168	; 0xa8
 8021a1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8021a20:	2302      	movs	r3, #2
 8021a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8021a24:	2304      	movs	r3, #4
 8021a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8021a28:	f107 0320 	add.w	r3, r7, #32
 8021a2c:	4618      	mov	r0, r3
 8021a2e:	f003 fce9 	bl	8025404 <HAL_RCC_OscConfig>
 8021a32:	4603      	mov	r3, r0
 8021a34:	2b00      	cmp	r3, #0
 8021a36:	d001      	beq.n	8021a3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8021a38:	f000 fdce 	bl	80225d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8021a3c:	230f      	movs	r3, #15
 8021a3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8021a40:	2302      	movs	r3, #2
 8021a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8021a44:	2300      	movs	r3, #0
 8021a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8021a48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8021a4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8021a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021a52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8021a54:	f107 030c 	add.w	r3, r7, #12
 8021a58:	2105      	movs	r1, #5
 8021a5a:	4618      	mov	r0, r3
 8021a5c:	f003 ff42 	bl	80258e4 <HAL_RCC_ClockConfig>
 8021a60:	4603      	mov	r3, r0
 8021a62:	2b00      	cmp	r3, #0
 8021a64:	d001      	beq.n	8021a6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8021a66:	f000 fdb7 	bl	80225d8 <Error_Handler>
  }
}
 8021a6a:	bf00      	nop
 8021a6c:	3750      	adds	r7, #80	; 0x50
 8021a6e:	46bd      	mov	sp, r7
 8021a70:	bd80      	pop	{r7, pc}
 8021a72:	bf00      	nop
 8021a74:	40023800 	.word	0x40023800
 8021a78:	40007000 	.word	0x40007000

08021a7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8021a7c:	b580      	push	{r7, lr}
 8021a7e:	b084      	sub	sp, #16
 8021a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8021a82:	463b      	mov	r3, r7
 8021a84:	2200      	movs	r2, #0
 8021a86:	601a      	str	r2, [r3, #0]
 8021a88:	605a      	str	r2, [r3, #4]
 8021a8a:	609a      	str	r2, [r3, #8]
 8021a8c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8021a8e:	4b7c      	ldr	r3, [pc, #496]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021a90:	4a7c      	ldr	r2, [pc, #496]	; (8021c84 <MX_ADC1_Init+0x208>)
 8021a92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8021a94:	4b7a      	ldr	r3, [pc, #488]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021a96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8021a9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8021a9c:	4b78      	ldr	r3, [pc, #480]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021a9e:	2200      	movs	r2, #0
 8021aa0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8021aa2:	4b77      	ldr	r3, [pc, #476]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021aa4:	2201      	movs	r2, #1
 8021aa6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8021aa8:	4b75      	ldr	r3, [pc, #468]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021aaa:	2201      	movs	r2, #1
 8021aac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8021aae:	4b74      	ldr	r3, [pc, #464]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021ab0:	2200      	movs	r2, #0
 8021ab2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8021ab6:	4b72      	ldr	r3, [pc, #456]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021ab8:	2200      	movs	r2, #0
 8021aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8021abc:	4b70      	ldr	r3, [pc, #448]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021abe:	4a72      	ldr	r2, [pc, #456]	; (8021c88 <MX_ADC1_Init+0x20c>)
 8021ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8021ac2:	4b6f      	ldr	r3, [pc, #444]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021ac4:	2200      	movs	r2, #0
 8021ac6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8021ac8:	4b6d      	ldr	r3, [pc, #436]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021aca:	220e      	movs	r2, #14
 8021acc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8021ace:	4b6c      	ldr	r3, [pc, #432]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021ad0:	2201      	movs	r2, #1
 8021ad2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8021ad6:	4b6a      	ldr	r3, [pc, #424]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021ad8:	2201      	movs	r2, #1
 8021ada:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8021adc:	4868      	ldr	r0, [pc, #416]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021ade:	f002 f919 	bl	8023d14 <HAL_ADC_Init>
 8021ae2:	4603      	mov	r3, r0
 8021ae4:	2b00      	cmp	r3, #0
 8021ae6:	d001      	beq.n	8021aec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8021ae8:	f000 fd76 	bl	80225d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8021aec:	2303      	movs	r3, #3
 8021aee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8021af0:	2301      	movs	r3, #1
 8021af2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8021af4:	2301      	movs	r3, #1
 8021af6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021af8:	463b      	mov	r3, r7
 8021afa:	4619      	mov	r1, r3
 8021afc:	4860      	ldr	r0, [pc, #384]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021afe:	f002 fa5d 	bl	8023fbc <HAL_ADC_ConfigChannel>
 8021b02:	4603      	mov	r3, r0
 8021b04:	2b00      	cmp	r3, #0
 8021b06:	d001      	beq.n	8021b0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8021b08:	f000 fd66 	bl	80225d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8021b0c:	2304      	movs	r3, #4
 8021b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8021b10:	2302      	movs	r3, #2
 8021b12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021b14:	463b      	mov	r3, r7
 8021b16:	4619      	mov	r1, r3
 8021b18:	4859      	ldr	r0, [pc, #356]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021b1a:	f002 fa4f 	bl	8023fbc <HAL_ADC_ConfigChannel>
 8021b1e:	4603      	mov	r3, r0
 8021b20:	2b00      	cmp	r3, #0
 8021b22:	d001      	beq.n	8021b28 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8021b24:	f000 fd58 	bl	80225d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8021b28:	2305      	movs	r3, #5
 8021b2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8021b2c:	2303      	movs	r3, #3
 8021b2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021b30:	463b      	mov	r3, r7
 8021b32:	4619      	mov	r1, r3
 8021b34:	4852      	ldr	r0, [pc, #328]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021b36:	f002 fa41 	bl	8023fbc <HAL_ADC_ConfigChannel>
 8021b3a:	4603      	mov	r3, r0
 8021b3c:	2b00      	cmp	r3, #0
 8021b3e:	d001      	beq.n	8021b44 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8021b40:	f000 fd4a 	bl	80225d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8021b44:	2306      	movs	r3, #6
 8021b46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8021b48:	2304      	movs	r3, #4
 8021b4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021b4c:	463b      	mov	r3, r7
 8021b4e:	4619      	mov	r1, r3
 8021b50:	484b      	ldr	r0, [pc, #300]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021b52:	f002 fa33 	bl	8023fbc <HAL_ADC_ConfigChannel>
 8021b56:	4603      	mov	r3, r0
 8021b58:	2b00      	cmp	r3, #0
 8021b5a:	d001      	beq.n	8021b60 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8021b5c:	f000 fd3c 	bl	80225d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8021b60:	2307      	movs	r3, #7
 8021b62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8021b64:	2305      	movs	r3, #5
 8021b66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021b68:	463b      	mov	r3, r7
 8021b6a:	4619      	mov	r1, r3
 8021b6c:	4844      	ldr	r0, [pc, #272]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021b6e:	f002 fa25 	bl	8023fbc <HAL_ADC_ConfigChannel>
 8021b72:	4603      	mov	r3, r0
 8021b74:	2b00      	cmp	r3, #0
 8021b76:	d001      	beq.n	8021b7c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8021b78:	f000 fd2e 	bl	80225d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8021b7c:	230e      	movs	r3, #14
 8021b7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8021b80:	2306      	movs	r3, #6
 8021b82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021b84:	463b      	mov	r3, r7
 8021b86:	4619      	mov	r1, r3
 8021b88:	483d      	ldr	r0, [pc, #244]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021b8a:	f002 fa17 	bl	8023fbc <HAL_ADC_ConfigChannel>
 8021b8e:	4603      	mov	r3, r0
 8021b90:	2b00      	cmp	r3, #0
 8021b92:	d001      	beq.n	8021b98 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8021b94:	f000 fd20 	bl	80225d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8021b98:	230f      	movs	r3, #15
 8021b9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8021b9c:	2307      	movs	r3, #7
 8021b9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021ba0:	463b      	mov	r3, r7
 8021ba2:	4619      	mov	r1, r3
 8021ba4:	4836      	ldr	r0, [pc, #216]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021ba6:	f002 fa09 	bl	8023fbc <HAL_ADC_ConfigChannel>
 8021baa:	4603      	mov	r3, r0
 8021bac:	2b00      	cmp	r3, #0
 8021bae:	d001      	beq.n	8021bb4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8021bb0:	f000 fd12 	bl	80225d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8021bb4:	230a      	movs	r3, #10
 8021bb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8021bb8:	2308      	movs	r3, #8
 8021bba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021bbc:	463b      	mov	r3, r7
 8021bbe:	4619      	mov	r1, r3
 8021bc0:	482f      	ldr	r0, [pc, #188]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021bc2:	f002 f9fb 	bl	8023fbc <HAL_ADC_ConfigChannel>
 8021bc6:	4603      	mov	r3, r0
 8021bc8:	2b00      	cmp	r3, #0
 8021bca:	d001      	beq.n	8021bd0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8021bcc:	f000 fd04 	bl	80225d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8021bd0:	230b      	movs	r3, #11
 8021bd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8021bd4:	2309      	movs	r3, #9
 8021bd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021bd8:	463b      	mov	r3, r7
 8021bda:	4619      	mov	r1, r3
 8021bdc:	4828      	ldr	r0, [pc, #160]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021bde:	f002 f9ed 	bl	8023fbc <HAL_ADC_ConfigChannel>
 8021be2:	4603      	mov	r3, r0
 8021be4:	2b00      	cmp	r3, #0
 8021be6:	d001      	beq.n	8021bec <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8021be8:	f000 fcf6 	bl	80225d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8021bec:	230c      	movs	r3, #12
 8021bee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8021bf0:	230a      	movs	r3, #10
 8021bf2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021bf4:	463b      	mov	r3, r7
 8021bf6:	4619      	mov	r1, r3
 8021bf8:	4821      	ldr	r0, [pc, #132]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021bfa:	f002 f9df 	bl	8023fbc <HAL_ADC_ConfigChannel>
 8021bfe:	4603      	mov	r3, r0
 8021c00:	2b00      	cmp	r3, #0
 8021c02:	d001      	beq.n	8021c08 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8021c04:	f000 fce8 	bl	80225d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8021c08:	230d      	movs	r3, #13
 8021c0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8021c0c:	230b      	movs	r3, #11
 8021c0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021c10:	463b      	mov	r3, r7
 8021c12:	4619      	mov	r1, r3
 8021c14:	481a      	ldr	r0, [pc, #104]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021c16:	f002 f9d1 	bl	8023fbc <HAL_ADC_ConfigChannel>
 8021c1a:	4603      	mov	r3, r0
 8021c1c:	2b00      	cmp	r3, #0
 8021c1e:	d001      	beq.n	8021c24 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8021c20:	f000 fcda 	bl	80225d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8021c24:	2302      	movs	r3, #2
 8021c26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8021c28:	230c      	movs	r3, #12
 8021c2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021c2c:	463b      	mov	r3, r7
 8021c2e:	4619      	mov	r1, r3
 8021c30:	4813      	ldr	r0, [pc, #76]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021c32:	f002 f9c3 	bl	8023fbc <HAL_ADC_ConfigChannel>
 8021c36:	4603      	mov	r3, r0
 8021c38:	2b00      	cmp	r3, #0
 8021c3a:	d001      	beq.n	8021c40 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8021c3c:	f000 fccc 	bl	80225d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8021c40:	2301      	movs	r3, #1
 8021c42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8021c44:	230d      	movs	r3, #13
 8021c46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021c48:	463b      	mov	r3, r7
 8021c4a:	4619      	mov	r1, r3
 8021c4c:	480c      	ldr	r0, [pc, #48]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021c4e:	f002 f9b5 	bl	8023fbc <HAL_ADC_ConfigChannel>
 8021c52:	4603      	mov	r3, r0
 8021c54:	2b00      	cmp	r3, #0
 8021c56:	d001      	beq.n	8021c5c <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8021c58:	f000 fcbe 	bl	80225d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8021c5c:	2300      	movs	r3, #0
 8021c5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8021c60:	230e      	movs	r3, #14
 8021c62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021c64:	463b      	mov	r3, r7
 8021c66:	4619      	mov	r1, r3
 8021c68:	4805      	ldr	r0, [pc, #20]	; (8021c80 <MX_ADC1_Init+0x204>)
 8021c6a:	f002 f9a7 	bl	8023fbc <HAL_ADC_ConfigChannel>
 8021c6e:	4603      	mov	r3, r0
 8021c70:	2b00      	cmp	r3, #0
 8021c72:	d001      	beq.n	8021c78 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8021c74:	f000 fcb0 	bl	80225d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8021c78:	bf00      	nop
 8021c7a:	3710      	adds	r7, #16
 8021c7c:	46bd      	mov	sp, r7
 8021c7e:	bd80      	pop	{r7, pc}
 8021c80:	200006fc 	.word	0x200006fc
 8021c84:	40012000 	.word	0x40012000
 8021c88:	0f000001 	.word	0x0f000001

08021c8c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8021c8c:	b580      	push	{r7, lr}
 8021c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8021c90:	4b12      	ldr	r3, [pc, #72]	; (8021cdc <MX_I2C2_Init+0x50>)
 8021c92:	4a13      	ldr	r2, [pc, #76]	; (8021ce0 <MX_I2C2_Init+0x54>)
 8021c94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8021c96:	4b11      	ldr	r3, [pc, #68]	; (8021cdc <MX_I2C2_Init+0x50>)
 8021c98:	4a12      	ldr	r2, [pc, #72]	; (8021ce4 <MX_I2C2_Init+0x58>)
 8021c9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8021c9c:	4b0f      	ldr	r3, [pc, #60]	; (8021cdc <MX_I2C2_Init+0x50>)
 8021c9e:	2200      	movs	r2, #0
 8021ca0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8021ca2:	4b0e      	ldr	r3, [pc, #56]	; (8021cdc <MX_I2C2_Init+0x50>)
 8021ca4:	2200      	movs	r2, #0
 8021ca6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8021ca8:	4b0c      	ldr	r3, [pc, #48]	; (8021cdc <MX_I2C2_Init+0x50>)
 8021caa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8021cae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8021cb0:	4b0a      	ldr	r3, [pc, #40]	; (8021cdc <MX_I2C2_Init+0x50>)
 8021cb2:	2200      	movs	r2, #0
 8021cb4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8021cb6:	4b09      	ldr	r3, [pc, #36]	; (8021cdc <MX_I2C2_Init+0x50>)
 8021cb8:	2200      	movs	r2, #0
 8021cba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8021cbc:	4b07      	ldr	r3, [pc, #28]	; (8021cdc <MX_I2C2_Init+0x50>)
 8021cbe:	2200      	movs	r2, #0
 8021cc0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8021cc2:	4b06      	ldr	r3, [pc, #24]	; (8021cdc <MX_I2C2_Init+0x50>)
 8021cc4:	2200      	movs	r2, #0
 8021cc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8021cc8:	4804      	ldr	r0, [pc, #16]	; (8021cdc <MX_I2C2_Init+0x50>)
 8021cca:	f003 fa63 	bl	8025194 <HAL_I2C_Init>
 8021cce:	4603      	mov	r3, r0
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	d001      	beq.n	8021cd8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8021cd4:	f000 fc80 	bl	80225d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8021cd8:	bf00      	nop
 8021cda:	bd80      	pop	{r7, pc}
 8021cdc:	200005d0 	.word	0x200005d0
 8021ce0:	40005800 	.word	0x40005800
 8021ce4:	000186a0 	.word	0x000186a0

08021ce8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8021ce8:	b580      	push	{r7, lr}
 8021cea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8021cec:	4b17      	ldr	r3, [pc, #92]	; (8021d4c <MX_SPI3_Init+0x64>)
 8021cee:	4a18      	ldr	r2, [pc, #96]	; (8021d50 <MX_SPI3_Init+0x68>)
 8021cf0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8021cf2:	4b16      	ldr	r3, [pc, #88]	; (8021d4c <MX_SPI3_Init+0x64>)
 8021cf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8021cf8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8021cfa:	4b14      	ldr	r3, [pc, #80]	; (8021d4c <MX_SPI3_Init+0x64>)
 8021cfc:	2200      	movs	r2, #0
 8021cfe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8021d00:	4b12      	ldr	r3, [pc, #72]	; (8021d4c <MX_SPI3_Init+0x64>)
 8021d02:	2200      	movs	r2, #0
 8021d04:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8021d06:	4b11      	ldr	r3, [pc, #68]	; (8021d4c <MX_SPI3_Init+0x64>)
 8021d08:	2200      	movs	r2, #0
 8021d0a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8021d0c:	4b0f      	ldr	r3, [pc, #60]	; (8021d4c <MX_SPI3_Init+0x64>)
 8021d0e:	2200      	movs	r2, #0
 8021d10:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8021d12:	4b0e      	ldr	r3, [pc, #56]	; (8021d4c <MX_SPI3_Init+0x64>)
 8021d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8021d18:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8021d1a:	4b0c      	ldr	r3, [pc, #48]	; (8021d4c <MX_SPI3_Init+0x64>)
 8021d1c:	2238      	movs	r2, #56	; 0x38
 8021d1e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8021d20:	4b0a      	ldr	r3, [pc, #40]	; (8021d4c <MX_SPI3_Init+0x64>)
 8021d22:	2200      	movs	r2, #0
 8021d24:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8021d26:	4b09      	ldr	r3, [pc, #36]	; (8021d4c <MX_SPI3_Init+0x64>)
 8021d28:	2200      	movs	r2, #0
 8021d2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8021d2c:	4b07      	ldr	r3, [pc, #28]	; (8021d4c <MX_SPI3_Init+0x64>)
 8021d2e:	2200      	movs	r2, #0
 8021d30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8021d32:	4b06      	ldr	r3, [pc, #24]	; (8021d4c <MX_SPI3_Init+0x64>)
 8021d34:	220a      	movs	r2, #10
 8021d36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8021d38:	4804      	ldr	r0, [pc, #16]	; (8021d4c <MX_SPI3_Init+0x64>)
 8021d3a:	f003 ff8b 	bl	8025c54 <HAL_SPI_Init>
 8021d3e:	4603      	mov	r3, r0
 8021d40:	2b00      	cmp	r3, #0
 8021d42:	d001      	beq.n	8021d48 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8021d44:	f000 fc48 	bl	80225d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8021d48:	bf00      	nop
 8021d4a:	bd80      	pop	{r7, pc}
 8021d4c:	200006a4 	.word	0x200006a4
 8021d50:	40003c00 	.word	0x40003c00

08021d54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8021d54:	b580      	push	{r7, lr}
 8021d56:	b092      	sub	sp, #72	; 0x48
 8021d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021d5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021d5e:	2200      	movs	r2, #0
 8021d60:	601a      	str	r2, [r3, #0]
 8021d62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8021d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021d68:	2200      	movs	r2, #0
 8021d6a:	601a      	str	r2, [r3, #0]
 8021d6c:	605a      	str	r2, [r3, #4]
 8021d6e:	609a      	str	r2, [r3, #8]
 8021d70:	60da      	str	r2, [r3, #12]
 8021d72:	611a      	str	r2, [r3, #16]
 8021d74:	615a      	str	r2, [r3, #20]
 8021d76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8021d78:	1d3b      	adds	r3, r7, #4
 8021d7a:	2220      	movs	r2, #32
 8021d7c:	2100      	movs	r1, #0
 8021d7e:	4618      	mov	r0, r3
 8021d80:	f005 f822 	bl	8026dc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8021d84:	4b39      	ldr	r3, [pc, #228]	; (8021e6c <MX_TIM1_Init+0x118>)
 8021d86:	4a3a      	ldr	r2, [pc, #232]	; (8021e70 <MX_TIM1_Init+0x11c>)
 8021d88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8021d8a:	4b38      	ldr	r3, [pc, #224]	; (8021e6c <MX_TIM1_Init+0x118>)
 8021d8c:	2201      	movs	r2, #1
 8021d8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021d90:	4b36      	ldr	r3, [pc, #216]	; (8021e6c <MX_TIM1_Init+0x118>)
 8021d92:	2200      	movs	r2, #0
 8021d94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 8021d96:	4b35      	ldr	r3, [pc, #212]	; (8021e6c <MX_TIM1_Init+0x118>)
 8021d98:	f240 4219 	movw	r2, #1049	; 0x419
 8021d9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021d9e:	4b33      	ldr	r3, [pc, #204]	; (8021e6c <MX_TIM1_Init+0x118>)
 8021da0:	2200      	movs	r2, #0
 8021da2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8021da4:	4b31      	ldr	r3, [pc, #196]	; (8021e6c <MX_TIM1_Init+0x118>)
 8021da6:	2200      	movs	r2, #0
 8021da8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021daa:	4b30      	ldr	r3, [pc, #192]	; (8021e6c <MX_TIM1_Init+0x118>)
 8021dac:	2200      	movs	r2, #0
 8021dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8021db0:	482e      	ldr	r0, [pc, #184]	; (8021e6c <MX_TIM1_Init+0x118>)
 8021db2:	f004 f802 	bl	8025dba <HAL_TIM_PWM_Init>
 8021db6:	4603      	mov	r3, r0
 8021db8:	2b00      	cmp	r3, #0
 8021dba:	d001      	beq.n	8021dc0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8021dbc:	f000 fc0c 	bl	80225d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021dc0:	2300      	movs	r3, #0
 8021dc2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021dc4:	2300      	movs	r3, #0
 8021dc6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8021dc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021dcc:	4619      	mov	r1, r3
 8021dce:	4827      	ldr	r0, [pc, #156]	; (8021e6c <MX_TIM1_Init+0x118>)
 8021dd0:	f004 fee4 	bl	8026b9c <HAL_TIMEx_MasterConfigSynchronization>
 8021dd4:	4603      	mov	r3, r0
 8021dd6:	2b00      	cmp	r3, #0
 8021dd8:	d001      	beq.n	8021dde <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8021dda:	f000 fbfd 	bl	80225d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8021dde:	2360      	movs	r3, #96	; 0x60
 8021de0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8021de2:	2300      	movs	r3, #0
 8021de4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021de6:	2300      	movs	r3, #0
 8021de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8021dea:	2300      	movs	r3, #0
 8021dec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021dee:	2300      	movs	r3, #0
 8021df0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8021df2:	2300      	movs	r3, #0
 8021df4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8021df6:	2300      	movs	r3, #0
 8021df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8021dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021dfe:	2204      	movs	r2, #4
 8021e00:	4619      	mov	r1, r3
 8021e02:	481a      	ldr	r0, [pc, #104]	; (8021e6c <MX_TIM1_Init+0x118>)
 8021e04:	f004 fa14 	bl	8026230 <HAL_TIM_PWM_ConfigChannel>
 8021e08:	4603      	mov	r3, r0
 8021e0a:	2b00      	cmp	r3, #0
 8021e0c:	d001      	beq.n	8021e12 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8021e0e:	f000 fbe3 	bl	80225d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8021e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021e16:	220c      	movs	r2, #12
 8021e18:	4619      	mov	r1, r3
 8021e1a:	4814      	ldr	r0, [pc, #80]	; (8021e6c <MX_TIM1_Init+0x118>)
 8021e1c:	f004 fa08 	bl	8026230 <HAL_TIM_PWM_ConfigChannel>
 8021e20:	4603      	mov	r3, r0
 8021e22:	2b00      	cmp	r3, #0
 8021e24:	d001      	beq.n	8021e2a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8021e26:	f000 fbd7 	bl	80225d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8021e2a:	2300      	movs	r3, #0
 8021e2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8021e2e:	2300      	movs	r3, #0
 8021e30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8021e32:	2300      	movs	r3, #0
 8021e34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8021e36:	2300      	movs	r3, #0
 8021e38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8021e3a:	2300      	movs	r3, #0
 8021e3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8021e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021e42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8021e44:	2300      	movs	r3, #0
 8021e46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8021e48:	1d3b      	adds	r3, r7, #4
 8021e4a:	4619      	mov	r1, r3
 8021e4c:	4807      	ldr	r0, [pc, #28]	; (8021e6c <MX_TIM1_Init+0x118>)
 8021e4e:	f004 ff21 	bl	8026c94 <HAL_TIMEx_ConfigBreakDeadTime>
 8021e52:	4603      	mov	r3, r0
 8021e54:	2b00      	cmp	r3, #0
 8021e56:	d001      	beq.n	8021e5c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8021e58:	f000 fbbe 	bl	80225d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8021e5c:	4803      	ldr	r0, [pc, #12]	; (8021e6c <MX_TIM1_Init+0x118>)
 8021e5e:	f001 fb55 	bl	802350c <HAL_TIM_MspPostInit>

}
 8021e62:	bf00      	nop
 8021e64:	3748      	adds	r7, #72	; 0x48
 8021e66:	46bd      	mov	sp, r7
 8021e68:	bd80      	pop	{r7, pc}
 8021e6a:	bf00      	nop
 8021e6c:	20000824 	.word	0x20000824
 8021e70:	40010000 	.word	0x40010000

08021e74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8021e74:	b580      	push	{r7, lr}
 8021e76:	b086      	sub	sp, #24
 8021e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8021e7a:	f107 0308 	add.w	r3, r7, #8
 8021e7e:	2200      	movs	r2, #0
 8021e80:	601a      	str	r2, [r3, #0]
 8021e82:	605a      	str	r2, [r3, #4]
 8021e84:	609a      	str	r2, [r3, #8]
 8021e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021e88:	463b      	mov	r3, r7
 8021e8a:	2200      	movs	r2, #0
 8021e8c:	601a      	str	r2, [r3, #0]
 8021e8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8021e90:	4b1d      	ldr	r3, [pc, #116]	; (8021f08 <MX_TIM2_Init+0x94>)
 8021e92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021e96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8021e98:	4b1b      	ldr	r3, [pc, #108]	; (8021f08 <MX_TIM2_Init+0x94>)
 8021e9a:	2204      	movs	r2, #4
 8021e9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021e9e:	4b1a      	ldr	r3, [pc, #104]	; (8021f08 <MX_TIM2_Init+0x94>)
 8021ea0:	2200      	movs	r2, #0
 8021ea2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 8021ea4:	4b18      	ldr	r3, [pc, #96]	; (8021f08 <MX_TIM2_Init+0x94>)
 8021ea6:	4a19      	ldr	r2, [pc, #100]	; (8021f0c <MX_TIM2_Init+0x98>)
 8021ea8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021eaa:	4b17      	ldr	r3, [pc, #92]	; (8021f08 <MX_TIM2_Init+0x94>)
 8021eac:	2200      	movs	r2, #0
 8021eae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021eb0:	4b15      	ldr	r3, [pc, #84]	; (8021f08 <MX_TIM2_Init+0x94>)
 8021eb2:	2200      	movs	r2, #0
 8021eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8021eb6:	4814      	ldr	r0, [pc, #80]	; (8021f08 <MX_TIM2_Init+0x94>)
 8021eb8:	f003 ff30 	bl	8025d1c <HAL_TIM_Base_Init>
 8021ebc:	4603      	mov	r3, r0
 8021ebe:	2b00      	cmp	r3, #0
 8021ec0:	d001      	beq.n	8021ec6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8021ec2:	f000 fb89 	bl	80225d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8021ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021eca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8021ecc:	f107 0308 	add.w	r3, r7, #8
 8021ed0:	4619      	mov	r1, r3
 8021ed2:	480d      	ldr	r0, [pc, #52]	; (8021f08 <MX_TIM2_Init+0x94>)
 8021ed4:	f004 fa72 	bl	80263bc <HAL_TIM_ConfigClockSource>
 8021ed8:	4603      	mov	r3, r0
 8021eda:	2b00      	cmp	r3, #0
 8021edc:	d001      	beq.n	8021ee2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8021ede:	f000 fb7b 	bl	80225d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021ee2:	2300      	movs	r3, #0
 8021ee4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021ee6:	2300      	movs	r3, #0
 8021ee8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8021eea:	463b      	mov	r3, r7
 8021eec:	4619      	mov	r1, r3
 8021eee:	4806      	ldr	r0, [pc, #24]	; (8021f08 <MX_TIM2_Init+0x94>)
 8021ef0:	f004 fe54 	bl	8026b9c <HAL_TIMEx_MasterConfigSynchronization>
 8021ef4:	4603      	mov	r3, r0
 8021ef6:	2b00      	cmp	r3, #0
 8021ef8:	d001      	beq.n	8021efe <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8021efa:	f000 fb6d 	bl	80225d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8021efe:	bf00      	nop
 8021f00:	3718      	adds	r7, #24
 8021f02:	46bd      	mov	sp, r7
 8021f04:	bd80      	pop	{r7, pc}
 8021f06:	bf00      	nop
 8021f08:	20000864 	.word	0x20000864
 8021f0c:	00019a27 	.word	0x00019a27

08021f10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8021f10:	b580      	push	{r7, lr}
 8021f12:	b08a      	sub	sp, #40	; 0x28
 8021f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021f16:	f107 0320 	add.w	r3, r7, #32
 8021f1a:	2200      	movs	r2, #0
 8021f1c:	601a      	str	r2, [r3, #0]
 8021f1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8021f20:	1d3b      	adds	r3, r7, #4
 8021f22:	2200      	movs	r2, #0
 8021f24:	601a      	str	r2, [r3, #0]
 8021f26:	605a      	str	r2, [r3, #4]
 8021f28:	609a      	str	r2, [r3, #8]
 8021f2a:	60da      	str	r2, [r3, #12]
 8021f2c:	611a      	str	r2, [r3, #16]
 8021f2e:	615a      	str	r2, [r3, #20]
 8021f30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8021f32:	4b32      	ldr	r3, [pc, #200]	; (8021ffc <MX_TIM3_Init+0xec>)
 8021f34:	4a32      	ldr	r2, [pc, #200]	; (8022000 <MX_TIM3_Init+0xf0>)
 8021f36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8021f38:	4b30      	ldr	r3, [pc, #192]	; (8021ffc <MX_TIM3_Init+0xec>)
 8021f3a:	2200      	movs	r2, #0
 8021f3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021f3e:	4b2f      	ldr	r3, [pc, #188]	; (8021ffc <MX_TIM3_Init+0xec>)
 8021f40:	2200      	movs	r2, #0
 8021f42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8021f44:	4b2d      	ldr	r3, [pc, #180]	; (8021ffc <MX_TIM3_Init+0xec>)
 8021f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021f4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021f4c:	4b2b      	ldr	r3, [pc, #172]	; (8021ffc <MX_TIM3_Init+0xec>)
 8021f4e:	2200      	movs	r2, #0
 8021f50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021f52:	4b2a      	ldr	r3, [pc, #168]	; (8021ffc <MX_TIM3_Init+0xec>)
 8021f54:	2200      	movs	r2, #0
 8021f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8021f58:	4828      	ldr	r0, [pc, #160]	; (8021ffc <MX_TIM3_Init+0xec>)
 8021f5a:	f003 ff2e 	bl	8025dba <HAL_TIM_PWM_Init>
 8021f5e:	4603      	mov	r3, r0
 8021f60:	2b00      	cmp	r3, #0
 8021f62:	d001      	beq.n	8021f68 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8021f64:	f000 fb38 	bl	80225d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021f68:	2300      	movs	r3, #0
 8021f6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021f6c:	2300      	movs	r3, #0
 8021f6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8021f70:	f107 0320 	add.w	r3, r7, #32
 8021f74:	4619      	mov	r1, r3
 8021f76:	4821      	ldr	r0, [pc, #132]	; (8021ffc <MX_TIM3_Init+0xec>)
 8021f78:	f004 fe10 	bl	8026b9c <HAL_TIMEx_MasterConfigSynchronization>
 8021f7c:	4603      	mov	r3, r0
 8021f7e:	2b00      	cmp	r3, #0
 8021f80:	d001      	beq.n	8021f86 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8021f82:	f000 fb29 	bl	80225d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8021f86:	2360      	movs	r3, #96	; 0x60
 8021f88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8021f8a:	2300      	movs	r3, #0
 8021f8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021f8e:	2300      	movs	r3, #0
 8021f90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021f92:	2300      	movs	r3, #0
 8021f94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8021f96:	1d3b      	adds	r3, r7, #4
 8021f98:	2200      	movs	r2, #0
 8021f9a:	4619      	mov	r1, r3
 8021f9c:	4817      	ldr	r0, [pc, #92]	; (8021ffc <MX_TIM3_Init+0xec>)
 8021f9e:	f004 f947 	bl	8026230 <HAL_TIM_PWM_ConfigChannel>
 8021fa2:	4603      	mov	r3, r0
 8021fa4:	2b00      	cmp	r3, #0
 8021fa6:	d001      	beq.n	8021fac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8021fa8:	f000 fb16 	bl	80225d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8021fac:	1d3b      	adds	r3, r7, #4
 8021fae:	2204      	movs	r2, #4
 8021fb0:	4619      	mov	r1, r3
 8021fb2:	4812      	ldr	r0, [pc, #72]	; (8021ffc <MX_TIM3_Init+0xec>)
 8021fb4:	f004 f93c 	bl	8026230 <HAL_TIM_PWM_ConfigChannel>
 8021fb8:	4603      	mov	r3, r0
 8021fba:	2b00      	cmp	r3, #0
 8021fbc:	d001      	beq.n	8021fc2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8021fbe:	f000 fb0b 	bl	80225d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8021fc2:	1d3b      	adds	r3, r7, #4
 8021fc4:	2208      	movs	r2, #8
 8021fc6:	4619      	mov	r1, r3
 8021fc8:	480c      	ldr	r0, [pc, #48]	; (8021ffc <MX_TIM3_Init+0xec>)
 8021fca:	f004 f931 	bl	8026230 <HAL_TIM_PWM_ConfigChannel>
 8021fce:	4603      	mov	r3, r0
 8021fd0:	2b00      	cmp	r3, #0
 8021fd2:	d001      	beq.n	8021fd8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8021fd4:	f000 fb00 	bl	80225d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8021fd8:	1d3b      	adds	r3, r7, #4
 8021fda:	220c      	movs	r2, #12
 8021fdc:	4619      	mov	r1, r3
 8021fde:	4807      	ldr	r0, [pc, #28]	; (8021ffc <MX_TIM3_Init+0xec>)
 8021fe0:	f004 f926 	bl	8026230 <HAL_TIM_PWM_ConfigChannel>
 8021fe4:	4603      	mov	r3, r0
 8021fe6:	2b00      	cmp	r3, #0
 8021fe8:	d001      	beq.n	8021fee <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8021fea:	f000 faf5 	bl	80225d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8021fee:	4803      	ldr	r0, [pc, #12]	; (8021ffc <MX_TIM3_Init+0xec>)
 8021ff0:	f001 fa8c 	bl	802350c <HAL_TIM_MspPostInit>

}
 8021ff4:	bf00      	nop
 8021ff6:	3728      	adds	r7, #40	; 0x28
 8021ff8:	46bd      	mov	sp, r7
 8021ffa:	bd80      	pop	{r7, pc}
 8021ffc:	20000664 	.word	0x20000664
 8022000:	40000400 	.word	0x40000400

08022004 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8022004:	b580      	push	{r7, lr}
 8022006:	b08c      	sub	sp, #48	; 0x30
 8022008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 802200a:	f107 030c 	add.w	r3, r7, #12
 802200e:	2224      	movs	r2, #36	; 0x24
 8022010:	2100      	movs	r1, #0
 8022012:	4618      	mov	r0, r3
 8022014:	f004 fed8 	bl	8026dc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8022018:	1d3b      	adds	r3, r7, #4
 802201a:	2200      	movs	r2, #0
 802201c:	601a      	str	r2, [r3, #0]
 802201e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8022020:	4b20      	ldr	r3, [pc, #128]	; (80220a4 <MX_TIM4_Init+0xa0>)
 8022022:	4a21      	ldr	r2, [pc, #132]	; (80220a8 <MX_TIM4_Init+0xa4>)
 8022024:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8022026:	4b1f      	ldr	r3, [pc, #124]	; (80220a4 <MX_TIM4_Init+0xa0>)
 8022028:	2200      	movs	r2, #0
 802202a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 802202c:	4b1d      	ldr	r3, [pc, #116]	; (80220a4 <MX_TIM4_Init+0xa0>)
 802202e:	2200      	movs	r2, #0
 8022030:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8022032:	4b1c      	ldr	r3, [pc, #112]	; (80220a4 <MX_TIM4_Init+0xa0>)
 8022034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022038:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802203a:	4b1a      	ldr	r3, [pc, #104]	; (80220a4 <MX_TIM4_Init+0xa0>)
 802203c:	2200      	movs	r2, #0
 802203e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022040:	4b18      	ldr	r3, [pc, #96]	; (80220a4 <MX_TIM4_Init+0xa0>)
 8022042:	2200      	movs	r2, #0
 8022044:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8022046:	2303      	movs	r3, #3
 8022048:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 802204a:	2300      	movs	r3, #0
 802204c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 802204e:	2301      	movs	r3, #1
 8022050:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8022052:	2300      	movs	r3, #0
 8022054:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8022056:	2300      	movs	r3, #0
 8022058:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 802205a:	2300      	movs	r3, #0
 802205c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 802205e:	2301      	movs	r3, #1
 8022060:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8022062:	2300      	movs	r3, #0
 8022064:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8022066:	2300      	movs	r3, #0
 8022068:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 802206a:	f107 030c 	add.w	r3, r7, #12
 802206e:	4619      	mov	r1, r3
 8022070:	480c      	ldr	r0, [pc, #48]	; (80220a4 <MX_TIM4_Init+0xa0>)
 8022072:	f003 ff0b 	bl	8025e8c <HAL_TIM_Encoder_Init>
 8022076:	4603      	mov	r3, r0
 8022078:	2b00      	cmp	r3, #0
 802207a:	d001      	beq.n	8022080 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 802207c:	f000 faac 	bl	80225d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8022080:	2300      	movs	r3, #0
 8022082:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8022084:	2300      	movs	r3, #0
 8022086:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8022088:	1d3b      	adds	r3, r7, #4
 802208a:	4619      	mov	r1, r3
 802208c:	4805      	ldr	r0, [pc, #20]	; (80220a4 <MX_TIM4_Init+0xa0>)
 802208e:	f004 fd85 	bl	8026b9c <HAL_TIMEx_MasterConfigSynchronization>
 8022092:	4603      	mov	r3, r0
 8022094:	2b00      	cmp	r3, #0
 8022096:	d001      	beq.n	802209c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8022098:	f000 fa9e 	bl	80225d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 802209c:	bf00      	nop
 802209e:	3730      	adds	r7, #48	; 0x30
 80220a0:	46bd      	mov	sp, r7
 80220a2:	bd80      	pop	{r7, pc}
 80220a4:	20000590 	.word	0x20000590
 80220a8:	40000800 	.word	0x40000800

080220ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80220ac:	b580      	push	{r7, lr}
 80220ae:	b086      	sub	sp, #24
 80220b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80220b2:	f107 0308 	add.w	r3, r7, #8
 80220b6:	2200      	movs	r2, #0
 80220b8:	601a      	str	r2, [r3, #0]
 80220ba:	605a      	str	r2, [r3, #4]
 80220bc:	609a      	str	r2, [r3, #8]
 80220be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80220c0:	463b      	mov	r3, r7
 80220c2:	2200      	movs	r2, #0
 80220c4:	601a      	str	r2, [r3, #0]
 80220c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80220c8:	4b1d      	ldr	r3, [pc, #116]	; (8022140 <MX_TIM5_Init+0x94>)
 80220ca:	4a1e      	ldr	r2, [pc, #120]	; (8022144 <MX_TIM5_Init+0x98>)
 80220cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 80220ce:	4b1c      	ldr	r3, [pc, #112]	; (8022140 <MX_TIM5_Init+0x94>)
 80220d0:	2204      	movs	r2, #4
 80220d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80220d4:	4b1a      	ldr	r3, [pc, #104]	; (8022140 <MX_TIM5_Init+0x94>)
 80220d6:	2200      	movs	r2, #0
 80220d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 80220da:	4b19      	ldr	r3, [pc, #100]	; (8022140 <MX_TIM5_Init+0x94>)
 80220dc:	f245 2207 	movw	r2, #20999	; 0x5207
 80220e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80220e2:	4b17      	ldr	r3, [pc, #92]	; (8022140 <MX_TIM5_Init+0x94>)
 80220e4:	2200      	movs	r2, #0
 80220e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80220e8:	4b15      	ldr	r3, [pc, #84]	; (8022140 <MX_TIM5_Init+0x94>)
 80220ea:	2200      	movs	r2, #0
 80220ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80220ee:	4814      	ldr	r0, [pc, #80]	; (8022140 <MX_TIM5_Init+0x94>)
 80220f0:	f003 fe14 	bl	8025d1c <HAL_TIM_Base_Init>
 80220f4:	4603      	mov	r3, r0
 80220f6:	2b00      	cmp	r3, #0
 80220f8:	d001      	beq.n	80220fe <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80220fa:	f000 fa6d 	bl	80225d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80220fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022102:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8022104:	f107 0308 	add.w	r3, r7, #8
 8022108:	4619      	mov	r1, r3
 802210a:	480d      	ldr	r0, [pc, #52]	; (8022140 <MX_TIM5_Init+0x94>)
 802210c:	f004 f956 	bl	80263bc <HAL_TIM_ConfigClockSource>
 8022110:	4603      	mov	r3, r0
 8022112:	2b00      	cmp	r3, #0
 8022114:	d001      	beq.n	802211a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8022116:	f000 fa5f 	bl	80225d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802211a:	2300      	movs	r3, #0
 802211c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802211e:	2300      	movs	r3, #0
 8022120:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8022122:	463b      	mov	r3, r7
 8022124:	4619      	mov	r1, r3
 8022126:	4806      	ldr	r0, [pc, #24]	; (8022140 <MX_TIM5_Init+0x94>)
 8022128:	f004 fd38 	bl	8026b9c <HAL_TIMEx_MasterConfigSynchronization>
 802212c:	4603      	mov	r3, r0
 802212e:	2b00      	cmp	r3, #0
 8022130:	d001      	beq.n	8022136 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8022132:	f000 fa51 	bl	80225d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8022136:	bf00      	nop
 8022138:	3718      	adds	r7, #24
 802213a:	46bd      	mov	sp, r7
 802213c:	bd80      	pop	{r7, pc}
 802213e:	bf00      	nop
 8022140:	20000624 	.word	0x20000624
 8022144:	40000c00 	.word	0x40000c00

08022148 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8022148:	b580      	push	{r7, lr}
 802214a:	b082      	sub	sp, #8
 802214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802214e:	463b      	mov	r3, r7
 8022150:	2200      	movs	r2, #0
 8022152:	601a      	str	r2, [r3, #0]
 8022154:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8022156:	4b15      	ldr	r3, [pc, #84]	; (80221ac <MX_TIM6_Init+0x64>)
 8022158:	4a15      	ldr	r2, [pc, #84]	; (80221b0 <MX_TIM6_Init+0x68>)
 802215a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 802215c:	4b13      	ldr	r3, [pc, #76]	; (80221ac <MX_TIM6_Init+0x64>)
 802215e:	2204      	movs	r2, #4
 8022160:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022162:	4b12      	ldr	r3, [pc, #72]	; (80221ac <MX_TIM6_Init+0x64>)
 8022164:	2200      	movs	r2, #0
 8022166:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8022168:	4b10      	ldr	r3, [pc, #64]	; (80221ac <MX_TIM6_Init+0x64>)
 802216a:	f642 1203 	movw	r2, #10499	; 0x2903
 802216e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022170:	4b0e      	ldr	r3, [pc, #56]	; (80221ac <MX_TIM6_Init+0x64>)
 8022172:	2200      	movs	r2, #0
 8022174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8022176:	480d      	ldr	r0, [pc, #52]	; (80221ac <MX_TIM6_Init+0x64>)
 8022178:	f003 fdd0 	bl	8025d1c <HAL_TIM_Base_Init>
 802217c:	4603      	mov	r3, r0
 802217e:	2b00      	cmp	r3, #0
 8022180:	d001      	beq.n	8022186 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8022182:	f000 fa29 	bl	80225d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8022186:	2300      	movs	r3, #0
 8022188:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802218a:	2300      	movs	r3, #0
 802218c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 802218e:	463b      	mov	r3, r7
 8022190:	4619      	mov	r1, r3
 8022192:	4806      	ldr	r0, [pc, #24]	; (80221ac <MX_TIM6_Init+0x64>)
 8022194:	f004 fd02 	bl	8026b9c <HAL_TIMEx_MasterConfigSynchronization>
 8022198:	4603      	mov	r3, r0
 802219a:	2b00      	cmp	r3, #0
 802219c:	d001      	beq.n	80221a2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 802219e:	f000 fa1b 	bl	80225d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80221a2:	bf00      	nop
 80221a4:	3708      	adds	r7, #8
 80221a6:	46bd      	mov	sp, r7
 80221a8:	bd80      	pop	{r7, pc}
 80221aa:	bf00      	nop
 80221ac:	200007e4 	.word	0x200007e4
 80221b0:	40001000 	.word	0x40001000

080221b4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80221b4:	b580      	push	{r7, lr}
 80221b6:	b082      	sub	sp, #8
 80221b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80221ba:	463b      	mov	r3, r7
 80221bc:	2200      	movs	r2, #0
 80221be:	601a      	str	r2, [r3, #0]
 80221c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80221c2:	4b15      	ldr	r3, [pc, #84]	; (8022218 <MX_TIM7_Init+0x64>)
 80221c4:	4a15      	ldr	r2, [pc, #84]	; (802221c <MX_TIM7_Init+0x68>)
 80221c6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 80221c8:	4b13      	ldr	r3, [pc, #76]	; (8022218 <MX_TIM7_Init+0x64>)
 80221ca:	2204      	movs	r2, #4
 80221cc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80221ce:	4b12      	ldr	r3, [pc, #72]	; (8022218 <MX_TIM7_Init+0x64>)
 80221d0:	2200      	movs	r2, #0
 80221d2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 80221d4:	4b10      	ldr	r3, [pc, #64]	; (8022218 <MX_TIM7_Init+0x64>)
 80221d6:	f240 4219 	movw	r2, #1049	; 0x419
 80221da:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80221dc:	4b0e      	ldr	r3, [pc, #56]	; (8022218 <MX_TIM7_Init+0x64>)
 80221de:	2200      	movs	r2, #0
 80221e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80221e2:	480d      	ldr	r0, [pc, #52]	; (8022218 <MX_TIM7_Init+0x64>)
 80221e4:	f003 fd9a 	bl	8025d1c <HAL_TIM_Base_Init>
 80221e8:	4603      	mov	r3, r0
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	d001      	beq.n	80221f2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80221ee:	f000 f9f3 	bl	80225d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80221f2:	2300      	movs	r3, #0
 80221f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80221f6:	2300      	movs	r3, #0
 80221f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80221fa:	463b      	mov	r3, r7
 80221fc:	4619      	mov	r1, r3
 80221fe:	4806      	ldr	r0, [pc, #24]	; (8022218 <MX_TIM7_Init+0x64>)
 8022200:	f004 fccc 	bl	8026b9c <HAL_TIMEx_MasterConfigSynchronization>
 8022204:	4603      	mov	r3, r0
 8022206:	2b00      	cmp	r3, #0
 8022208:	d001      	beq.n	802220e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 802220a:	f000 f9e5 	bl	80225d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 802220e:	bf00      	nop
 8022210:	3708      	adds	r7, #8
 8022212:	46bd      	mov	sp, r7
 8022214:	bd80      	pop	{r7, pc}
 8022216:	bf00      	nop
 8022218:	200008e4 	.word	0x200008e4
 802221c:	40001400 	.word	0x40001400

08022220 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8022220:	b580      	push	{r7, lr}
 8022222:	b08c      	sub	sp, #48	; 0x30
 8022224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8022226:	f107 030c 	add.w	r3, r7, #12
 802222a:	2224      	movs	r2, #36	; 0x24
 802222c:	2100      	movs	r1, #0
 802222e:	4618      	mov	r0, r3
 8022230:	f004 fdca 	bl	8026dc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8022234:	1d3b      	adds	r3, r7, #4
 8022236:	2200      	movs	r2, #0
 8022238:	601a      	str	r2, [r3, #0]
 802223a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 802223c:	4b22      	ldr	r3, [pc, #136]	; (80222c8 <MX_TIM8_Init+0xa8>)
 802223e:	4a23      	ldr	r2, [pc, #140]	; (80222cc <MX_TIM8_Init+0xac>)
 8022240:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8022242:	4b21      	ldr	r3, [pc, #132]	; (80222c8 <MX_TIM8_Init+0xa8>)
 8022244:	2200      	movs	r2, #0
 8022246:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022248:	4b1f      	ldr	r3, [pc, #124]	; (80222c8 <MX_TIM8_Init+0xa8>)
 802224a:	2200      	movs	r2, #0
 802224c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 802224e:	4b1e      	ldr	r3, [pc, #120]	; (80222c8 <MX_TIM8_Init+0xa8>)
 8022250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022254:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8022256:	4b1c      	ldr	r3, [pc, #112]	; (80222c8 <MX_TIM8_Init+0xa8>)
 8022258:	2200      	movs	r2, #0
 802225a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 802225c:	4b1a      	ldr	r3, [pc, #104]	; (80222c8 <MX_TIM8_Init+0xa8>)
 802225e:	2200      	movs	r2, #0
 8022260:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022262:	4b19      	ldr	r3, [pc, #100]	; (80222c8 <MX_TIM8_Init+0xa8>)
 8022264:	2200      	movs	r2, #0
 8022266:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8022268:	2303      	movs	r3, #3
 802226a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 802226c:	2300      	movs	r3, #0
 802226e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8022270:	2301      	movs	r3, #1
 8022272:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8022274:	2300      	movs	r3, #0
 8022276:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8022278:	2300      	movs	r3, #0
 802227a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 802227c:	2300      	movs	r3, #0
 802227e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8022280:	2301      	movs	r3, #1
 8022282:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8022284:	2300      	movs	r3, #0
 8022286:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8022288:	2300      	movs	r3, #0
 802228a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 802228c:	f107 030c 	add.w	r3, r7, #12
 8022290:	4619      	mov	r1, r3
 8022292:	480d      	ldr	r0, [pc, #52]	; (80222c8 <MX_TIM8_Init+0xa8>)
 8022294:	f003 fdfa 	bl	8025e8c <HAL_TIM_Encoder_Init>
 8022298:	4603      	mov	r3, r0
 802229a:	2b00      	cmp	r3, #0
 802229c:	d001      	beq.n	80222a2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 802229e:	f000 f99b 	bl	80225d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80222a2:	2300      	movs	r3, #0
 80222a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80222a6:	2300      	movs	r3, #0
 80222a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80222aa:	1d3b      	adds	r3, r7, #4
 80222ac:	4619      	mov	r1, r3
 80222ae:	4806      	ldr	r0, [pc, #24]	; (80222c8 <MX_TIM8_Init+0xa8>)
 80222b0:	f004 fc74 	bl	8026b9c <HAL_TIMEx_MasterConfigSynchronization>
 80222b4:	4603      	mov	r3, r0
 80222b6:	2b00      	cmp	r3, #0
 80222b8:	d001      	beq.n	80222be <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80222ba:	f000 f98d 	bl	80225d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80222be:	bf00      	nop
 80222c0:	3730      	adds	r7, #48	; 0x30
 80222c2:	46bd      	mov	sp, r7
 80222c4:	bd80      	pop	{r7, pc}
 80222c6:	bf00      	nop
 80222c8:	20000550 	.word	0x20000550
 80222cc:	40010400 	.word	0x40010400

080222d0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80222d0:	b580      	push	{r7, lr}
 80222d2:	b088      	sub	sp, #32
 80222d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80222d6:	1d3b      	adds	r3, r7, #4
 80222d8:	2200      	movs	r2, #0
 80222da:	601a      	str	r2, [r3, #0]
 80222dc:	605a      	str	r2, [r3, #4]
 80222de:	609a      	str	r2, [r3, #8]
 80222e0:	60da      	str	r2, [r3, #12]
 80222e2:	611a      	str	r2, [r3, #16]
 80222e4:	615a      	str	r2, [r3, #20]
 80222e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80222e8:	4b1e      	ldr	r3, [pc, #120]	; (8022364 <MX_TIM11_Init+0x94>)
 80222ea:	4a1f      	ldr	r2, [pc, #124]	; (8022368 <MX_TIM11_Init+0x98>)
 80222ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80222ee:	4b1d      	ldr	r3, [pc, #116]	; (8022364 <MX_TIM11_Init+0x94>)
 80222f0:	2200      	movs	r2, #0
 80222f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80222f4:	4b1b      	ldr	r3, [pc, #108]	; (8022364 <MX_TIM11_Init+0x94>)
 80222f6:	2200      	movs	r2, #0
 80222f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 80222fa:	4b1a      	ldr	r3, [pc, #104]	; (8022364 <MX_TIM11_Init+0x94>)
 80222fc:	f240 628f 	movw	r2, #1679	; 0x68f
 8022300:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8022302:	4b18      	ldr	r3, [pc, #96]	; (8022364 <MX_TIM11_Init+0x94>)
 8022304:	2200      	movs	r2, #0
 8022306:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022308:	4b16      	ldr	r3, [pc, #88]	; (8022364 <MX_TIM11_Init+0x94>)
 802230a:	2200      	movs	r2, #0
 802230c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 802230e:	4815      	ldr	r0, [pc, #84]	; (8022364 <MX_TIM11_Init+0x94>)
 8022310:	f003 fd04 	bl	8025d1c <HAL_TIM_Base_Init>
 8022314:	4603      	mov	r3, r0
 8022316:	2b00      	cmp	r3, #0
 8022318:	d001      	beq.n	802231e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 802231a:	f000 f95d 	bl	80225d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 802231e:	4811      	ldr	r0, [pc, #68]	; (8022364 <MX_TIM11_Init+0x94>)
 8022320:	f003 fd4b 	bl	8025dba <HAL_TIM_PWM_Init>
 8022324:	4603      	mov	r3, r0
 8022326:	2b00      	cmp	r3, #0
 8022328:	d001      	beq.n	802232e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 802232a:	f000 f955 	bl	80225d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802232e:	2360      	movs	r3, #96	; 0x60
 8022330:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8022332:	2300      	movs	r3, #0
 8022334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8022336:	2300      	movs	r3, #0
 8022338:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802233a:	2300      	movs	r3, #0
 802233c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 802233e:	1d3b      	adds	r3, r7, #4
 8022340:	2200      	movs	r2, #0
 8022342:	4619      	mov	r1, r3
 8022344:	4807      	ldr	r0, [pc, #28]	; (8022364 <MX_TIM11_Init+0x94>)
 8022346:	f003 ff73 	bl	8026230 <HAL_TIM_PWM_ConfigChannel>
 802234a:	4603      	mov	r3, r0
 802234c:	2b00      	cmp	r3, #0
 802234e:	d001      	beq.n	8022354 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8022350:	f000 f942 	bl	80225d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8022354:	4803      	ldr	r0, [pc, #12]	; (8022364 <MX_TIM11_Init+0x94>)
 8022356:	f001 f8d9 	bl	802350c <HAL_TIM_MspPostInit>

}
 802235a:	bf00      	nop
 802235c:	3720      	adds	r7, #32
 802235e:	46bd      	mov	sp, r7
 8022360:	bd80      	pop	{r7, pc}
 8022362:	bf00      	nop
 8022364:	20000744 	.word	0x20000744
 8022368:	40014800 	.word	0x40014800

0802236c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 802236c:	b580      	push	{r7, lr}
 802236e:	b088      	sub	sp, #32
 8022370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8022372:	1d3b      	adds	r3, r7, #4
 8022374:	2200      	movs	r2, #0
 8022376:	601a      	str	r2, [r3, #0]
 8022378:	605a      	str	r2, [r3, #4]
 802237a:	609a      	str	r2, [r3, #8]
 802237c:	60da      	str	r2, [r3, #12]
 802237e:	611a      	str	r2, [r3, #16]
 8022380:	615a      	str	r2, [r3, #20]
 8022382:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8022384:	4b1a      	ldr	r3, [pc, #104]	; (80223f0 <MX_TIM12_Init+0x84>)
 8022386:	4a1b      	ldr	r2, [pc, #108]	; (80223f4 <MX_TIM12_Init+0x88>)
 8022388:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 802238a:	4b19      	ldr	r3, [pc, #100]	; (80223f0 <MX_TIM12_Init+0x84>)
 802238c:	f44f 725c 	mov.w	r2, #880	; 0x370
 8022390:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022392:	4b17      	ldr	r3, [pc, #92]	; (80223f0 <MX_TIM12_Init+0x84>)
 8022394:	2200      	movs	r2, #0
 8022396:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 8022398:	4b15      	ldr	r3, [pc, #84]	; (80223f0 <MX_TIM12_Init+0x84>)
 802239a:	2235      	movs	r2, #53	; 0x35
 802239c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802239e:	4b14      	ldr	r3, [pc, #80]	; (80223f0 <MX_TIM12_Init+0x84>)
 80223a0:	2200      	movs	r2, #0
 80223a2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80223a4:	4b12      	ldr	r3, [pc, #72]	; (80223f0 <MX_TIM12_Init+0x84>)
 80223a6:	2200      	movs	r2, #0
 80223a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80223aa:	4811      	ldr	r0, [pc, #68]	; (80223f0 <MX_TIM12_Init+0x84>)
 80223ac:	f003 fd05 	bl	8025dba <HAL_TIM_PWM_Init>
 80223b0:	4603      	mov	r3, r0
 80223b2:	2b00      	cmp	r3, #0
 80223b4:	d001      	beq.n	80223ba <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80223b6:	f000 f90f 	bl	80225d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80223ba:	2360      	movs	r3, #96	; 0x60
 80223bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80223be:	2300      	movs	r3, #0
 80223c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80223c2:	2300      	movs	r3, #0
 80223c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80223c6:	2300      	movs	r3, #0
 80223c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80223ca:	1d3b      	adds	r3, r7, #4
 80223cc:	2204      	movs	r2, #4
 80223ce:	4619      	mov	r1, r3
 80223d0:	4807      	ldr	r0, [pc, #28]	; (80223f0 <MX_TIM12_Init+0x84>)
 80223d2:	f003 ff2d 	bl	8026230 <HAL_TIM_PWM_ConfigChannel>
 80223d6:	4603      	mov	r3, r0
 80223d8:	2b00      	cmp	r3, #0
 80223da:	d001      	beq.n	80223e0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80223dc:	f000 f8fc 	bl	80225d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80223e0:	4803      	ldr	r0, [pc, #12]	; (80223f0 <MX_TIM12_Init+0x84>)
 80223e2:	f001 f893 	bl	802350c <HAL_TIM_MspPostInit>

}
 80223e6:	bf00      	nop
 80223e8:	3720      	adds	r7, #32
 80223ea:	46bd      	mov	sp, r7
 80223ec:	bd80      	pop	{r7, pc}
 80223ee:	bf00      	nop
 80223f0:	200008a4 	.word	0x200008a4
 80223f4:	40001800 	.word	0x40001800

080223f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80223f8:	b580      	push	{r7, lr}
 80223fa:	b082      	sub	sp, #8
 80223fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80223fe:	2300      	movs	r3, #0
 8022400:	607b      	str	r3, [r7, #4]
 8022402:	4b0c      	ldr	r3, [pc, #48]	; (8022434 <MX_DMA_Init+0x3c>)
 8022404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022406:	4a0b      	ldr	r2, [pc, #44]	; (8022434 <MX_DMA_Init+0x3c>)
 8022408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802240c:	6313      	str	r3, [r2, #48]	; 0x30
 802240e:	4b09      	ldr	r3, [pc, #36]	; (8022434 <MX_DMA_Init+0x3c>)
 8022410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022416:	607b      	str	r3, [r7, #4]
 8022418:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 802241a:	2200      	movs	r2, #0
 802241c:	2100      	movs	r1, #0
 802241e:	2038      	movs	r0, #56	; 0x38
 8022420:	f002 f947 	bl	80246b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8022424:	2038      	movs	r0, #56	; 0x38
 8022426:	f002 f960 	bl	80246ea <HAL_NVIC_EnableIRQ>

}
 802242a:	bf00      	nop
 802242c:	3708      	adds	r7, #8
 802242e:	46bd      	mov	sp, r7
 8022430:	bd80      	pop	{r7, pc}
 8022432:	bf00      	nop
 8022434:	40023800 	.word	0x40023800

08022438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8022438:	b580      	push	{r7, lr}
 802243a:	b08a      	sub	sp, #40	; 0x28
 802243c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802243e:	f107 0314 	add.w	r3, r7, #20
 8022442:	2200      	movs	r2, #0
 8022444:	601a      	str	r2, [r3, #0]
 8022446:	605a      	str	r2, [r3, #4]
 8022448:	609a      	str	r2, [r3, #8]
 802244a:	60da      	str	r2, [r3, #12]
 802244c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802244e:	2300      	movs	r3, #0
 8022450:	613b      	str	r3, [r7, #16]
 8022452:	4b5c      	ldr	r3, [pc, #368]	; (80225c4 <MX_GPIO_Init+0x18c>)
 8022454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022456:	4a5b      	ldr	r2, [pc, #364]	; (80225c4 <MX_GPIO_Init+0x18c>)
 8022458:	f043 0304 	orr.w	r3, r3, #4
 802245c:	6313      	str	r3, [r2, #48]	; 0x30
 802245e:	4b59      	ldr	r3, [pc, #356]	; (80225c4 <MX_GPIO_Init+0x18c>)
 8022460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022462:	f003 0304 	and.w	r3, r3, #4
 8022466:	613b      	str	r3, [r7, #16]
 8022468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802246a:	2300      	movs	r3, #0
 802246c:	60fb      	str	r3, [r7, #12]
 802246e:	4b55      	ldr	r3, [pc, #340]	; (80225c4 <MX_GPIO_Init+0x18c>)
 8022470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022472:	4a54      	ldr	r2, [pc, #336]	; (80225c4 <MX_GPIO_Init+0x18c>)
 8022474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022478:	6313      	str	r3, [r2, #48]	; 0x30
 802247a:	4b52      	ldr	r3, [pc, #328]	; (80225c4 <MX_GPIO_Init+0x18c>)
 802247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022482:	60fb      	str	r3, [r7, #12]
 8022484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8022486:	2300      	movs	r3, #0
 8022488:	60bb      	str	r3, [r7, #8]
 802248a:	4b4e      	ldr	r3, [pc, #312]	; (80225c4 <MX_GPIO_Init+0x18c>)
 802248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802248e:	4a4d      	ldr	r2, [pc, #308]	; (80225c4 <MX_GPIO_Init+0x18c>)
 8022490:	f043 0301 	orr.w	r3, r3, #1
 8022494:	6313      	str	r3, [r2, #48]	; 0x30
 8022496:	4b4b      	ldr	r3, [pc, #300]	; (80225c4 <MX_GPIO_Init+0x18c>)
 8022498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802249a:	f003 0301 	and.w	r3, r3, #1
 802249e:	60bb      	str	r3, [r7, #8]
 80224a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80224a2:	2300      	movs	r3, #0
 80224a4:	607b      	str	r3, [r7, #4]
 80224a6:	4b47      	ldr	r3, [pc, #284]	; (80225c4 <MX_GPIO_Init+0x18c>)
 80224a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224aa:	4a46      	ldr	r2, [pc, #280]	; (80225c4 <MX_GPIO_Init+0x18c>)
 80224ac:	f043 0302 	orr.w	r3, r3, #2
 80224b0:	6313      	str	r3, [r2, #48]	; 0x30
 80224b2:	4b44      	ldr	r3, [pc, #272]	; (80225c4 <MX_GPIO_Init+0x18c>)
 80224b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224b6:	f003 0302 	and.w	r3, r3, #2
 80224ba:	607b      	str	r3, [r7, #4]
 80224bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80224be:	2300      	movs	r3, #0
 80224c0:	603b      	str	r3, [r7, #0]
 80224c2:	4b40      	ldr	r3, [pc, #256]	; (80225c4 <MX_GPIO_Init+0x18c>)
 80224c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224c6:	4a3f      	ldr	r2, [pc, #252]	; (80225c4 <MX_GPIO_Init+0x18c>)
 80224c8:	f043 0308 	orr.w	r3, r3, #8
 80224cc:	6313      	str	r3, [r2, #48]	; 0x30
 80224ce:	4b3d      	ldr	r3, [pc, #244]	; (80225c4 <MX_GPIO_Init+0x18c>)
 80224d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224d2:	f003 0308 	and.w	r3, r3, #8
 80224d6:	603b      	str	r3, [r7, #0]
 80224d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80224da:	2200      	movs	r2, #0
 80224dc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80224e0:	4839      	ldr	r0, [pc, #228]	; (80225c8 <MX_GPIO_Init+0x190>)
 80224e2:	f002 fe3d 	bl	8025160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80224e6:	2201      	movs	r2, #1
 80224e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80224ec:	4837      	ldr	r0, [pc, #220]	; (80225cc <MX_GPIO_Init+0x194>)
 80224ee:	f002 fe37 	bl	8025160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 80224f2:	2200      	movs	r2, #0
 80224f4:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 80224f8:	4835      	ldr	r0, [pc, #212]	; (80225d0 <MX_GPIO_Init+0x198>)
 80224fa:	f002 fe31 	bl	8025160 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80224fe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8022502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8022504:	2301      	movs	r3, #1
 8022506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022508:	2300      	movs	r3, #0
 802250a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802250c:	2300      	movs	r3, #0
 802250e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8022510:	f107 0314 	add.w	r3, r7, #20
 8022514:	4619      	mov	r1, r3
 8022516:	482c      	ldr	r0, [pc, #176]	; (80225c8 <MX_GPIO_Init+0x190>)
 8022518:	f002 fc70 	bl	8024dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 802251c:	2307      	movs	r3, #7
 802251e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022520:	2300      	movs	r3, #0
 8022522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8022524:	2301      	movs	r3, #1
 8022526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022528:	f107 0314 	add.w	r3, r7, #20
 802252c:	4619      	mov	r1, r3
 802252e:	4827      	ldr	r0, [pc, #156]	; (80225cc <MX_GPIO_Init+0x194>)
 8022530:	f002 fc64 	bl	8024dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8022534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802253a:	2301      	movs	r3, #1
 802253c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802253e:	2300      	movs	r3, #0
 8022540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022542:	2300      	movs	r3, #0
 8022544:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022546:	f107 0314 	add.w	r3, r7, #20
 802254a:	4619      	mov	r1, r3
 802254c:	481f      	ldr	r0, [pc, #124]	; (80225cc <MX_GPIO_Init+0x194>)
 802254e:	f002 fc55 	bl	8024dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 8022552:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8022556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022558:	2300      	movs	r3, #0
 802255a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802255c:	2300      	movs	r3, #0
 802255e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022560:	f107 0314 	add.w	r3, r7, #20
 8022564:	4619      	mov	r1, r3
 8022566:	4819      	ldr	r0, [pc, #100]	; (80225cc <MX_GPIO_Init+0x194>)
 8022568:	f002 fc48 	bl	8024dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 802256c:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8022570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8022572:	2301      	movs	r3, #1
 8022574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022576:	2300      	movs	r3, #0
 8022578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802257a:	2300      	movs	r3, #0
 802257c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802257e:	f107 0314 	add.w	r3, r7, #20
 8022582:	4619      	mov	r1, r3
 8022584:	4812      	ldr	r0, [pc, #72]	; (80225d0 <MX_GPIO_Init+0x198>)
 8022586:	f002 fc39 	bl	8024dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 802258a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802258e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022590:	2300      	movs	r3, #0
 8022592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8022594:	2301      	movs	r3, #1
 8022596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022598:	f107 0314 	add.w	r3, r7, #20
 802259c:	4619      	mov	r1, r3
 802259e:	480c      	ldr	r0, [pc, #48]	; (80225d0 <MX_GPIO_Init+0x198>)
 80225a0:	f002 fc2c 	bl	8024dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80225a4:	2304      	movs	r3, #4
 80225a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80225a8:	2300      	movs	r3, #0
 80225aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80225ac:	2300      	movs	r3, #0
 80225ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80225b0:	f107 0314 	add.w	r3, r7, #20
 80225b4:	4619      	mov	r1, r3
 80225b6:	4807      	ldr	r0, [pc, #28]	; (80225d4 <MX_GPIO_Init+0x19c>)
 80225b8:	f002 fc20 	bl	8024dfc <HAL_GPIO_Init>

}
 80225bc:	bf00      	nop
 80225be:	3728      	adds	r7, #40	; 0x28
 80225c0:	46bd      	mov	sp, r7
 80225c2:	bd80      	pop	{r7, pc}
 80225c4:	40023800 	.word	0x40023800
 80225c8:	40020800 	.word	0x40020800
 80225cc:	40020400 	.word	0x40020400
 80225d0:	40020000 	.word	0x40020000
 80225d4:	40020c00 	.word	0x40020c00

080225d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80225d8:	b480      	push	{r7}
 80225da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80225dc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80225de:	e7fe      	b.n	80225de <Error_Handler+0x6>

080225e0 <_ZN5Motor4InitEv>:
#include "motor.hpp"
#include "declare_extern.h"

void Motor::Init()
{
 80225e0:	b580      	push	{r7, lr}
 80225e2:	b082      	sub	sp, #8
 80225e4:	af00      	add	r7, sp, #0
 80225e6:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 80225e8:	2104      	movs	r1, #4
 80225ea:	4812      	ldr	r0, [pc, #72]	; (8022634 <_ZN5Motor4InitEv+0x54>)
 80225ec:	f003 fc10 	bl	8025e10 <HAL_TIM_PWM_Start>
 80225f0:	4603      	mov	r3, r0
 80225f2:	2b00      	cmp	r3, #0
 80225f4:	bf14      	ite	ne
 80225f6:	2301      	movne	r3, #1
 80225f8:	2300      	moveq	r3, #0
 80225fa:	b2db      	uxtb	r3, r3
 80225fc:	2b00      	cmp	r3, #0
 80225fe:	d004      	beq.n	802260a <_ZN5Motor4InitEv+0x2a>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch2 = true; // MOTOR_R
 8022600:	4b0d      	ldr	r3, [pc, #52]	; (8022638 <_ZN5Motor4InitEv+0x58>)
 8022602:	2201      	movs	r2, #1
 8022604:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8022606:	f7ff ffe7 	bl	80225d8 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 802260a:	210c      	movs	r1, #12
 802260c:	4809      	ldr	r0, [pc, #36]	; (8022634 <_ZN5Motor4InitEv+0x54>)
 802260e:	f003 fbff 	bl	8025e10 <HAL_TIM_PWM_Start>
 8022612:	4603      	mov	r3, r0
 8022614:	2b00      	cmp	r3, #0
 8022616:	bf14      	ite	ne
 8022618:	2301      	movne	r3, #1
 802261a:	2300      	moveq	r3, #0
 802261c:	b2db      	uxtb	r3, r3
 802261e:	2b00      	cmp	r3, #0
 8022620:	d004      	beq.n	802262c <_ZN5Motor4InitEv+0x4c>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch4 = true; // MOTOR_L
 8022622:	4b06      	ldr	r3, [pc, #24]	; (802263c <_ZN5Motor4InitEv+0x5c>)
 8022624:	2201      	movs	r2, #1
 8022626:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8022628:	f7ff ffd6 	bl	80225d8 <Error_Handler>
    }
}
 802262c:	bf00      	nop
 802262e:	3708      	adds	r7, #8
 8022630:	46bd      	mov	sp, r7
 8022632:	bd80      	pop	{r7, pc}
 8022634:	20000824 	.word	0x20000824
 8022638:	20000078 	.word	0x20000078
 802263c:	20000079 	.word	0x20000079

08022640 <_ZN5Motor5DriveEff>:

void Motor::Drive(float translation_ratio, float rotation_ratio)
{
 8022640:	b580      	push	{r7, lr}
 8022642:	b08a      	sub	sp, #40	; 0x28
 8022644:	af00      	add	r7, sp, #0
 8022646:	60f8      	str	r0, [r7, #12]
 8022648:	ed87 0a02 	vstr	s0, [r7, #8]
 802264c:	edc7 0a01 	vstr	s1, [r7, #4]
#ifdef DEBUG_MODE
    g_translation_ratio = translation_ratio;
 8022650:	4a89      	ldr	r2, [pc, #548]	; (8022878 <_ZN5Motor5DriveEff+0x238>)
 8022652:	68bb      	ldr	r3, [r7, #8]
 8022654:	6013      	str	r3, [r2, #0]
    g_rotation_ratio    = rotation_ratio;
 8022656:	4a89      	ldr	r2, [pc, #548]	; (802287c <_ZN5Motor5DriveEff+0x23c>)
 8022658:	687b      	ldr	r3, [r7, #4]
 802265a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(translation_ratio > LIMIT_TRANS_DUTY)       translation_ratio =  LIMIT_TRANS_DUTY;
 802265c:	68b8      	ldr	r0, [r7, #8]
 802265e:	f7fd fe53 	bl	8020308 <__aeabi_f2d>
 8022662:	a381      	add	r3, pc, #516	; (adr r3, 8022868 <_ZN5Motor5DriveEff+0x228>)
 8022664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022668:	f7fe f936 	bl	80208d8 <__aeabi_dcmpgt>
 802266c:	4603      	mov	r3, r0
 802266e:	2b00      	cmp	r3, #0
 8022670:	d002      	beq.n	8022678 <_ZN5Motor5DriveEff+0x38>
 8022672:	4b83      	ldr	r3, [pc, #524]	; (8022880 <_ZN5Motor5DriveEff+0x240>)
 8022674:	60bb      	str	r3, [r7, #8]
 8022676:	e00c      	b.n	8022692 <_ZN5Motor5DriveEff+0x52>
    else if(translation_ratio < -LIMIT_TRANS_DUTY) translation_ratio = -LIMIT_TRANS_DUTY;
 8022678:	68b8      	ldr	r0, [r7, #8]
 802267a:	f7fd fe45 	bl	8020308 <__aeabi_f2d>
 802267e:	a37c      	add	r3, pc, #496	; (adr r3, 8022870 <_ZN5Motor5DriveEff+0x230>)
 8022680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022684:	f7fe f90a 	bl	802089c <__aeabi_dcmplt>
 8022688:	4603      	mov	r3, r0
 802268a:	2b00      	cmp	r3, #0
 802268c:	d001      	beq.n	8022692 <_ZN5Motor5DriveEff+0x52>
 802268e:	4b7d      	ldr	r3, [pc, #500]	; (8022884 <_ZN5Motor5DriveEff+0x244>)
 8022690:	60bb      	str	r3, [r7, #8]

    float sum = translation_ratio + rotation_ratio;
 8022692:	ed97 7a02 	vldr	s14, [r7, #8]
 8022696:	edd7 7a01 	vldr	s15, [r7, #4]
 802269a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802269e:	edc7 7a06 	vstr	s15, [r7, #24]
    float excess = 0;
 80226a2:	f04f 0300 	mov.w	r3, #0
 80226a6:	627b      	str	r3, [r7, #36]	; 0x24

    if(sum > 1.0)       excess = sum - 1.0;
 80226a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80226ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80226b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80226b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226b8:	dd08      	ble.n	80226cc <_ZN5Motor5DriveEff+0x8c>
 80226ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80226be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80226c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80226c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80226ca:	e010      	b.n	80226ee <_ZN5Motor5DriveEff+0xae>
    else if(sum < -1.0) excess = sum + 1.0;
 80226cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80226d0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80226d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80226d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226dc:	d507      	bpl.n	80226ee <_ZN5Motor5DriveEff+0xae>
 80226de:	edd7 7a06 	vldr	s15, [r7, #24]
 80226e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80226e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80226ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    translation_ratio -= excess;
 80226ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80226f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80226f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80226fa:	edc7 7a02 	vstr	s15, [r7, #8]

#ifdef DEBUG_MODE
    g_sum_raito = sum;
 80226fe:	4a62      	ldr	r2, [pc, #392]	; (8022888 <_ZN5Motor5DriveEff+0x248>)
 8022700:	69bb      	ldr	r3, [r7, #24]
 8022702:	6013      	str	r3, [r2, #0]
    g_excess_ratio = excess;
 8022704:	4a61      	ldr	r2, [pc, #388]	; (802288c <_ZN5Motor5DriveEff+0x24c>)
 8022706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022708:	6013      	str	r3, [r2, #0]
    g_reduced_translation = translation_ratio;
 802270a:	4a61      	ldr	r2, [pc, #388]	; (8022890 <_ZN5Motor5DriveEff+0x250>)
 802270c:	68bb      	ldr	r3, [r7, #8]
 802270e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float duty_l = translation_ratio - rotation_ratio;
 8022710:	ed97 7a02 	vldr	s14, [r7, #8]
 8022714:	edd7 7a01 	vldr	s15, [r7, #4]
 8022718:	ee77 7a67 	vsub.f32	s15, s14, s15
 802271c:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_r = translation_ratio + rotation_ratio;
 8022720:	ed97 7a02 	vldr	s14, [r7, #8]
 8022724:	edd7 7a01 	vldr	s15, [r7, #4]
 8022728:	ee77 7a27 	vadd.f32	s15, s14, s15
 802272c:	edc7 7a07 	vstr	s15, [r7, #28]

    if(duty_l > 1.0)       duty_l =  1.0;
 8022730:	edd7 7a08 	vldr	s15, [r7, #32]
 8022734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022738:	eef4 7ac7 	vcmpe.f32	s15, s14
 802273c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022740:	dd03      	ble.n	802274a <_ZN5Motor5DriveEff+0x10a>
 8022742:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8022746:	623b      	str	r3, [r7, #32]
 8022748:	e00a      	b.n	8022760 <_ZN5Motor5DriveEff+0x120>
    else if(duty_l < -1.0) duty_l = -1.0;
 802274a:	edd7 7a08 	vldr	s15, [r7, #32]
 802274e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8022752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802275a:	d501      	bpl.n	8022760 <_ZN5Motor5DriveEff+0x120>
 802275c:	4b4d      	ldr	r3, [pc, #308]	; (8022894 <_ZN5Motor5DriveEff+0x254>)
 802275e:	623b      	str	r3, [r7, #32]

    if(duty_r > 1.0)       duty_r =  1.0;
 8022760:	edd7 7a07 	vldr	s15, [r7, #28]
 8022764:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022768:	eef4 7ac7 	vcmpe.f32	s15, s14
 802276c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022770:	dd03      	ble.n	802277a <_ZN5Motor5DriveEff+0x13a>
 8022772:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8022776:	61fb      	str	r3, [r7, #28]
 8022778:	e00a      	b.n	8022790 <_ZN5Motor5DriveEff+0x150>
    else if(duty_r < -1.0) duty_r = -1.0;
 802277a:	edd7 7a07 	vldr	s15, [r7, #28]
 802277e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8022782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802278a:	d501      	bpl.n	8022790 <_ZN5Motor5DriveEff+0x150>
 802278c:	4b41      	ldr	r3, [pc, #260]	; (8022894 <_ZN5Motor5DriveEff+0x254>)
 802278e:	61fb      	str	r3, [r7, #28]

#ifdef DEBUG_MODE
    g_duty_l = duty_l;
 8022790:	4a41      	ldr	r2, [pc, #260]	; (8022898 <_ZN5Motor5DriveEff+0x258>)
 8022792:	6a3b      	ldr	r3, [r7, #32]
 8022794:	6013      	str	r3, [r2, #0]
    g_duty_r = duty_r;
 8022796:	4a41      	ldr	r2, [pc, #260]	; (802289c <_ZN5Motor5DriveEff+0x25c>)
 8022798:	69fb      	ldr	r3, [r7, #28]
 802279a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int16_t count_l = static_cast<int16_t>(COUNTER_PERIOD * duty_l);
 802279c:	edd7 7a08 	vldr	s15, [r7, #32]
 80227a0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80228a0 <_ZN5Motor5DriveEff+0x260>
 80227a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80227a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80227ac:	ee17 3a90 	vmov	r3, s15
 80227b0:	b21b      	sxth	r3, r3
 80227b2:	82fb      	strh	r3, [r7, #22]
    int16_t count_r = static_cast<int16_t>(COUNTER_PERIOD * duty_r);
 80227b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80227b8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80228a0 <_ZN5Motor5DriveEff+0x260>
 80227bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80227c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80227c4:	ee17 3a90 	vmov	r3, s15
 80227c8:	b21b      	sxth	r3, r3
 80227ca:	82bb      	strh	r3, [r7, #20]

    if(count_l < 0) { count_l *= -1; BACKWARD_L; }
 80227cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80227d0:	2b00      	cmp	r3, #0
 80227d2:	da0d      	bge.n	80227f0 <_ZN5Motor5DriveEff+0x1b0>
 80227d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80227d8:	b29b      	uxth	r3, r3
 80227da:	425b      	negs	r3, r3
 80227dc:	b29b      	uxth	r3, r3
 80227de:	b21b      	sxth	r3, r3
 80227e0:	82fb      	strh	r3, [r7, #22]
 80227e2:	2200      	movs	r2, #0
 80227e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80227e8:	482e      	ldr	r0, [pc, #184]	; (80228a4 <_ZN5Motor5DriveEff+0x264>)
 80227ea:	f002 fcb9 	bl	8025160 <HAL_GPIO_WritePin>
 80227ee:	e009      	b.n	8022804 <_ZN5Motor5DriveEff+0x1c4>
    else if(count_l >= 0) FORWARD_L;
 80227f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80227f4:	2b00      	cmp	r3, #0
 80227f6:	db05      	blt.n	8022804 <_ZN5Motor5DriveEff+0x1c4>
 80227f8:	2201      	movs	r2, #1
 80227fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80227fe:	4829      	ldr	r0, [pc, #164]	; (80228a4 <_ZN5Motor5DriveEff+0x264>)
 8022800:	f002 fcae 	bl	8025160 <HAL_GPIO_WritePin>

    if(count_r < 0) { count_r *= -1; BACKWARD_R; }
 8022804:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8022808:	2b00      	cmp	r3, #0
 802280a:	da0d      	bge.n	8022828 <_ZN5Motor5DriveEff+0x1e8>
 802280c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8022810:	b29b      	uxth	r3, r3
 8022812:	425b      	negs	r3, r3
 8022814:	b29b      	uxth	r3, r3
 8022816:	b21b      	sxth	r3, r3
 8022818:	82bb      	strh	r3, [r7, #20]
 802281a:	2201      	movs	r2, #1
 802281c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022820:	4820      	ldr	r0, [pc, #128]	; (80228a4 <_ZN5Motor5DriveEff+0x264>)
 8022822:	f002 fc9d 	bl	8025160 <HAL_GPIO_WritePin>
 8022826:	e009      	b.n	802283c <_ZN5Motor5DriveEff+0x1fc>
    else if(count_r >= 0) FORWARD_R;
 8022828:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802282c:	2b00      	cmp	r3, #0
 802282e:	db05      	blt.n	802283c <_ZN5Motor5DriveEff+0x1fc>
 8022830:	2200      	movs	r2, #0
 8022832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022836:	481b      	ldr	r0, [pc, #108]	; (80228a4 <_ZN5Motor5DriveEff+0x264>)
 8022838:	f002 fc92 	bl	8025160 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, count_l);
 802283c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022840:	4b19      	ldr	r3, [pc, #100]	; (80228a8 <_ZN5Motor5DriveEff+0x268>)
 8022842:	681b      	ldr	r3, [r3, #0]
 8022844:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, count_r);
 8022846:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 802284a:	4b17      	ldr	r3, [pc, #92]	; (80228a8 <_ZN5Motor5DriveEff+0x268>)
 802284c:	681b      	ldr	r3, [r3, #0]
 802284e:	641a      	str	r2, [r3, #64]	; 0x40

#ifdef DEBUG_MODE
    g_motor_compare_l = count_l;
 8022850:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022854:	4b15      	ldr	r3, [pc, #84]	; (80228ac <_ZN5Motor5DriveEff+0x26c>)
 8022856:	801a      	strh	r2, [r3, #0]
    g_motor_compare_r = count_r;
 8022858:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 802285c:	4b14      	ldr	r3, [pc, #80]	; (80228b0 <_ZN5Motor5DriveEff+0x270>)
 802285e:	801a      	strh	r2, [r3, #0]
#endif // DEBUG_MODE
 8022860:	bf00      	nop
 8022862:	3728      	adds	r7, #40	; 0x28
 8022864:	46bd      	mov	sp, r7
 8022866:	bd80      	pop	{r7, pc}
 8022868:	cccccccd 	.word	0xcccccccd
 802286c:	3feccccc 	.word	0x3feccccc
 8022870:	cccccccd 	.word	0xcccccccd
 8022874:	bfeccccc 	.word	0xbfeccccc
 8022878:	20000224 	.word	0x20000224
 802287c:	20000228 	.word	0x20000228
 8022880:	3f666666 	.word	0x3f666666
 8022884:	bf666666 	.word	0xbf666666
 8022888:	2000022c 	.word	0x2000022c
 802288c:	20000230 	.word	0x20000230
 8022890:	20000234 	.word	0x20000234
 8022894:	bf800000 	.word	0xbf800000
 8022898:	20000238 	.word	0x20000238
 802289c:	2000023c 	.word	0x2000023c
 80228a0:	44832000 	.word	0x44832000
 80228a4:	40020000 	.word	0x40020000
 80228a8:	20000824 	.word	0x20000824
 80228ac:	20000240 	.word	0x20000240
 80228b0:	20000242 	.word	0x20000242

080228b4 <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 80228b4:	b580      	push	{r7, lr}
 80228b6:	b084      	sub	sp, #16
 80228b8:	af00      	add	r7, sp, #0
 80228ba:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 80228bc:	2300      	movs	r3, #0
 80228be:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 80228c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80228c4:	4821      	ldr	r0, [pc, #132]	; (802294c <_ZN12RotarySwitch5StateEv+0x98>)
 80228c6:	f002 fc33 	bl	8025130 <HAL_GPIO_ReadPin>
 80228ca:	4603      	mov	r3, r0
 80228cc:	2b00      	cmp	r3, #0
 80228ce:	bf0c      	ite	eq
 80228d0:	2301      	moveq	r3, #1
 80228d2:	2300      	movne	r3, #0
 80228d4:	b2db      	uxtb	r3, r3
 80228d6:	2b00      	cmp	r3, #0
 80228d8:	d003      	beq.n	80228e2 <_ZN12RotarySwitch5StateEv+0x2e>
 80228da:	7bfb      	ldrb	r3, [r7, #15]
 80228dc:	f043 0301 	orr.w	r3, r3, #1
 80228e0:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 80228e2:	2104      	movs	r1, #4
 80228e4:	481a      	ldr	r0, [pc, #104]	; (8022950 <_ZN12RotarySwitch5StateEv+0x9c>)
 80228e6:	f002 fc23 	bl	8025130 <HAL_GPIO_ReadPin>
 80228ea:	4603      	mov	r3, r0
 80228ec:	2b00      	cmp	r3, #0
 80228ee:	bf0c      	ite	eq
 80228f0:	2301      	moveq	r3, #1
 80228f2:	2300      	movne	r3, #0
 80228f4:	b2db      	uxtb	r3, r3
 80228f6:	2b00      	cmp	r3, #0
 80228f8:	d003      	beq.n	8022902 <_ZN12RotarySwitch5StateEv+0x4e>
 80228fa:	7bfb      	ldrb	r3, [r7, #15]
 80228fc:	f043 0302 	orr.w	r3, r3, #2
 8022900:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 8022902:	2102      	movs	r1, #2
 8022904:	4812      	ldr	r0, [pc, #72]	; (8022950 <_ZN12RotarySwitch5StateEv+0x9c>)
 8022906:	f002 fc13 	bl	8025130 <HAL_GPIO_ReadPin>
 802290a:	4603      	mov	r3, r0
 802290c:	2b00      	cmp	r3, #0
 802290e:	bf0c      	ite	eq
 8022910:	2301      	moveq	r3, #1
 8022912:	2300      	movne	r3, #0
 8022914:	b2db      	uxtb	r3, r3
 8022916:	2b00      	cmp	r3, #0
 8022918:	d003      	beq.n	8022922 <_ZN12RotarySwitch5StateEv+0x6e>
 802291a:	7bfb      	ldrb	r3, [r7, #15]
 802291c:	f043 0304 	orr.w	r3, r3, #4
 8022920:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 8022922:	2101      	movs	r1, #1
 8022924:	480a      	ldr	r0, [pc, #40]	; (8022950 <_ZN12RotarySwitch5StateEv+0x9c>)
 8022926:	f002 fc03 	bl	8025130 <HAL_GPIO_ReadPin>
 802292a:	4603      	mov	r3, r0
 802292c:	2b00      	cmp	r3, #0
 802292e:	bf0c      	ite	eq
 8022930:	2301      	moveq	r3, #1
 8022932:	2300      	movne	r3, #0
 8022934:	b2db      	uxtb	r3, r3
 8022936:	2b00      	cmp	r3, #0
 8022938:	d003      	beq.n	8022942 <_ZN12RotarySwitch5StateEv+0x8e>
 802293a:	7bfb      	ldrb	r3, [r7, #15]
 802293c:	f043 0308 	orr.w	r3, r3, #8
 8022940:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 8022942:	7bfb      	ldrb	r3, [r7, #15]
 8022944:	4618      	mov	r0, r3
 8022946:	3710      	adds	r7, #16
 8022948:	46bd      	mov	sp, r7
 802294a:	bd80      	pop	{r7, pc}
 802294c:	40020000 	.word	0x40020000
 8022950:	40020400 	.word	0x40020400

08022954 <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0)
 8022954:	b480      	push	{r7}
 8022956:	b083      	sub	sp, #12
 8022958:	af00      	add	r7, sp, #0
 802295a:	6078      	str	r0, [r7, #4]
                         , write_state_flags_(0)
                         , exception_flags_(0)
                         , master_count_(0)
                         , goal_marker_count_(0)
                         , corner_marker_count_(0)
                         , cross_line_count_(0) {}
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	2200      	movs	r2, #0
 8022960:	701a      	strb	r2, [r3, #0]
 8022962:	687b      	ldr	r3, [r7, #4]
 8022964:	2200      	movs	r2, #0
 8022966:	705a      	strb	r2, [r3, #1]
 8022968:	687b      	ldr	r3, [r7, #4]
 802296a:	2200      	movs	r2, #0
 802296c:	709a      	strb	r2, [r3, #2]
 802296e:	687b      	ldr	r3, [r7, #4]
 8022970:	2200      	movs	r2, #0
 8022972:	70da      	strb	r2, [r3, #3]
 8022974:	687b      	ldr	r3, [r7, #4]
 8022976:	2200      	movs	r2, #0
 8022978:	711a      	strb	r2, [r3, #4]
 802297a:	687b      	ldr	r3, [r7, #4]
 802297c:	2200      	movs	r2, #0
 802297e:	715a      	strb	r2, [r3, #5]
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	2200      	movs	r2, #0
 8022984:	719a      	strb	r2, [r3, #6]
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	4618      	mov	r0, r3
 802298a:	370c      	adds	r7, #12
 802298c:	46bd      	mov	sp, r7
 802298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022992:	4770      	bx	lr

08022994 <_ZN10SideSensor11UpdateStateEv>:

void SideSensor::UpdateState()
{
 8022994:	b580      	push	{r7, lr}
 8022996:	b084      	sub	sp, #16
 8022998:	af00      	add	r7, sp, #0
 802299a:	6078      	str	r0, [r7, #4]
    uint8_t io_state = 0xFF; // Lower bits represent the positions of sensors.
 802299c:	23ff      	movs	r3, #255	; 0xff
 802299e:	73fb      	strb	r3, [r7, #15]

    if(IO_OUTSIDE_L == 0) io_state &= 0xF7; // 0111
 80229a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80229a4:	4849      	ldr	r0, [pc, #292]	; (8022acc <_ZN10SideSensor11UpdateStateEv+0x138>)
 80229a6:	f002 fbc3 	bl	8025130 <HAL_GPIO_ReadPin>
 80229aa:	4603      	mov	r3, r0
 80229ac:	2b00      	cmp	r3, #0
 80229ae:	bf0c      	ite	eq
 80229b0:	2301      	moveq	r3, #1
 80229b2:	2300      	movne	r3, #0
 80229b4:	b2db      	uxtb	r3, r3
 80229b6:	2b00      	cmp	r3, #0
 80229b8:	d003      	beq.n	80229c2 <_ZN10SideSensor11UpdateStateEv+0x2e>
 80229ba:	7bfb      	ldrb	r3, [r7, #15]
 80229bc:	f023 0308 	bic.w	r3, r3, #8
 80229c0:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_L == 0)  io_state &= 0xFB; // 1011
 80229c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80229c6:	4841      	ldr	r0, [pc, #260]	; (8022acc <_ZN10SideSensor11UpdateStateEv+0x138>)
 80229c8:	f002 fbb2 	bl	8025130 <HAL_GPIO_ReadPin>
 80229cc:	4603      	mov	r3, r0
 80229ce:	2b00      	cmp	r3, #0
 80229d0:	bf0c      	ite	eq
 80229d2:	2301      	moveq	r3, #1
 80229d4:	2300      	movne	r3, #0
 80229d6:	b2db      	uxtb	r3, r3
 80229d8:	2b00      	cmp	r3, #0
 80229da:	d003      	beq.n	80229e4 <_ZN10SideSensor11UpdateStateEv+0x50>
 80229dc:	7bfb      	ldrb	r3, [r7, #15]
 80229de:	f023 0304 	bic.w	r3, r3, #4
 80229e2:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_R == 0)  io_state &= 0xFD; // 1101
 80229e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80229e8:	4838      	ldr	r0, [pc, #224]	; (8022acc <_ZN10SideSensor11UpdateStateEv+0x138>)
 80229ea:	f002 fba1 	bl	8025130 <HAL_GPIO_ReadPin>
 80229ee:	4603      	mov	r3, r0
 80229f0:	2b00      	cmp	r3, #0
 80229f2:	bf0c      	ite	eq
 80229f4:	2301      	moveq	r3, #1
 80229f6:	2300      	movne	r3, #0
 80229f8:	b2db      	uxtb	r3, r3
 80229fa:	2b00      	cmp	r3, #0
 80229fc:	d003      	beq.n	8022a06 <_ZN10SideSensor11UpdateStateEv+0x72>
 80229fe:	7bfb      	ldrb	r3, [r7, #15]
 8022a00:	f023 0302 	bic.w	r3, r3, #2
 8022a04:	73fb      	strb	r3, [r7, #15]
    if(IO_OUTSIDE_R == 0) io_state &= 0xFE; // 1110
 8022a06:	2104      	movs	r1, #4
 8022a08:	4831      	ldr	r0, [pc, #196]	; (8022ad0 <_ZN10SideSensor11UpdateStateEv+0x13c>)
 8022a0a:	f002 fb91 	bl	8025130 <HAL_GPIO_ReadPin>
 8022a0e:	4603      	mov	r3, r0
 8022a10:	2b00      	cmp	r3, #0
 8022a12:	bf0c      	ite	eq
 8022a14:	2301      	moveq	r3, #1
 8022a16:	2300      	movne	r3, #0
 8022a18:	b2db      	uxtb	r3, r3
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	d003      	beq.n	8022a26 <_ZN10SideSensor11UpdateStateEv+0x92>
 8022a1e:	7bfb      	ldrb	r3, [r7, #15]
 8022a20:	f023 0301 	bic.w	r3, r3, #1
 8022a24:	73fb      	strb	r3, [r7, #15]

    read_state_flags_ <<= 4;
 8022a26:	687b      	ldr	r3, [r7, #4]
 8022a28:	781b      	ldrb	r3, [r3, #0]
 8022a2a:	011b      	lsls	r3, r3, #4
 8022a2c:	b2da      	uxtb	r2, r3
 8022a2e:	687b      	ldr	r3, [r7, #4]
 8022a30:	701a      	strb	r2, [r3, #0]

    switch(io_state)
 8022a32:	7bfb      	ldrb	r3, [r7, #15]
 8022a34:	3bf0      	subs	r3, #240	; 0xf0
 8022a36:	2b0f      	cmp	r3, #15
 8022a38:	d842      	bhi.n	8022ac0 <_ZN10SideSensor11UpdateStateEv+0x12c>
 8022a3a:	a201      	add	r2, pc, #4	; (adr r2, 8022a40 <_ZN10SideSensor11UpdateStateEv+0xac>)
 8022a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022a40:	08022ab1 	.word	0x08022ab1
 8022a44:	08022ab1 	.word	0x08022ab1
 8022a48:	08022ab1 	.word	0x08022ab1
 8022a4c:	08022aa1 	.word	0x08022aa1
 8022a50:	08022ab1 	.word	0x08022ab1
 8022a54:	08022ac1 	.word	0x08022ac1
 8022a58:	08022ab1 	.word	0x08022ab1
 8022a5c:	08022aa1 	.word	0x08022aa1
 8022a60:	08022ab1 	.word	0x08022ab1
 8022a64:	08022ab1 	.word	0x08022ab1
 8022a68:	08022ac1 	.word	0x08022ac1
 8022a6c:	08022aa1 	.word	0x08022aa1
 8022a70:	08022a91 	.word	0x08022a91
 8022a74:	08022ac1 	.word	0x08022ac1
 8022a78:	08022ac1 	.word	0x08022ac1
 8022a7c:	08022a81 	.word	0x08022a81
    {
        case 0xFF: // 1111
            read_state_flags_ |= 0x08; break;
 8022a80:	687b      	ldr	r3, [r7, #4]
 8022a82:	781b      	ldrb	r3, [r3, #0]
 8022a84:	f043 0308 	orr.w	r3, r3, #8
 8022a88:	b2da      	uxtb	r2, r3
 8022a8a:	687b      	ldr	r3, [r7, #4]
 8022a8c:	701a      	strb	r2, [r3, #0]
 8022a8e:	e018      	b.n	8022ac2 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFC: // 1100  If through goal, increase pattern.
            read_state_flags_ |= 0x04; break;
 8022a90:	687b      	ldr	r3, [r7, #4]
 8022a92:	781b      	ldrb	r3, [r3, #0]
 8022a94:	f043 0304 	orr.w	r3, r3, #4
 8022a98:	b2da      	uxtb	r2, r3
 8022a9a:	687b      	ldr	r3, [r7, #4]
 8022a9c:	701a      	strb	r2, [r3, #0]
 8022a9e:	e010      	b.n	8022ac2 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFB: // 1011
        case 0xF7: // 0111
        case 0xF3: // 0011
            read_state_flags_ |= 0x02; break;
 8022aa0:	687b      	ldr	r3, [r7, #4]
 8022aa2:	781b      	ldrb	r3, [r3, #0]
 8022aa4:	f043 0302 	orr.w	r3, r3, #2
 8022aa8:	b2da      	uxtb	r2, r3
 8022aaa:	687b      	ldr	r3, [r7, #4]
 8022aac:	701a      	strb	r2, [r3, #0]
 8022aae:	e008      	b.n	8022ac2 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xF4: // 0100
        case 0xF0: // 0000
        case 0xF1: // 0001
        case 0xF8: // 1000
        case 0xF9: // 1001
            read_state_flags_ |= 0x01; break;
 8022ab0:	687b      	ldr	r3, [r7, #4]
 8022ab2:	781b      	ldrb	r3, [r3, #0]
 8022ab4:	f043 0301 	orr.w	r3, r3, #1
 8022ab8:	b2da      	uxtb	r2, r3
 8022aba:	687b      	ldr	r3, [r7, #4]
 8022abc:	701a      	strb	r2, [r3, #0]
 8022abe:	e000      	b.n	8022ac2 <_ZN10SideSensor11UpdateStateEv+0x12e>
        default: break;
 8022ac0:	bf00      	nop
    }
}
 8022ac2:	bf00      	nop
 8022ac4:	3710      	adds	r7, #16
 8022ac6:	46bd      	mov	sp, r7
 8022ac8:	bd80      	pop	{r7, pc}
 8022aca:	bf00      	nop
 8022acc:	40020400 	.word	0x40020400
 8022ad0:	40020c00 	.word	0x40020c00

08022ad4 <_ZN10SideSensor6UpdateEv>:

void SideSensor::Update()
{
 8022ad4:	b580      	push	{r7, lr}
 8022ad6:	b084      	sub	sp, #16
 8022ad8:	af00      	add	r7, sp, #0
 8022ada:	6078      	str	r0, [r7, #4]
    uint8_t ignore_flag = exception_flags_ & 0x01;
 8022adc:	687b      	ldr	r3, [r7, #4]
 8022ade:	789b      	ldrb	r3, [r3, #2]
 8022ae0:	f003 0301 	and.w	r3, r3, #1
 8022ae4:	73fb      	strb	r3, [r7, #15]

    /* Ignore judgment */
    if(ignore_flag == 0x01)
 8022ae6:	7bfb      	ldrb	r3, [r7, #15]
 8022ae8:	2b01      	cmp	r3, #1
 8022aea:	d111      	bne.n	8022b10 <_ZN10SideSensor6UpdateEv+0x3c>
    {
        if(master_count_ < IGNORE_COUNT) master_count_++;
 8022aec:	687b      	ldr	r3, [r7, #4]
 8022aee:	78db      	ldrb	r3, [r3, #3]
 8022af0:	2b04      	cmp	r3, #4
 8022af2:	d806      	bhi.n	8022b02 <_ZN10SideSensor6UpdateEv+0x2e>
 8022af4:	687b      	ldr	r3, [r7, #4]
 8022af6:	78db      	ldrb	r3, [r3, #3]
 8022af8:	3301      	adds	r3, #1
 8022afa:	b2da      	uxtb	r2, r3
 8022afc:	687b      	ldr	r3, [r7, #4]
 8022afe:	70da      	strb	r2, [r3, #3]
 8022b00:	e031      	b.n	8022b66 <_ZN10SideSensor6UpdateEv+0x92>
        else exception_flags_ >>= 1; 
 8022b02:	687b      	ldr	r3, [r7, #4]
 8022b04:	789b      	ldrb	r3, [r3, #2]
 8022b06:	105b      	asrs	r3, r3, #1
 8022b08:	b2da      	uxtb	r2, r3
 8022b0a:	687b      	ldr	r3, [r7, #4]
 8022b0c:	709a      	strb	r2, [r3, #2]
 8022b0e:	e02a      	b.n	8022b66 <_ZN10SideSensor6UpdateEv+0x92>
    }
    else if(ignore_flag == 0x00)
 8022b10:	7bfb      	ldrb	r3, [r7, #15]
 8022b12:	2b00      	cmp	r3, #0
 8022b14:	d127      	bne.n	8022b66 <_ZN10SideSensor6UpdateEv+0x92>
    {
        UpdateState();
 8022b16:	6878      	ldr	r0, [r7, #4]
 8022b18:	f7ff ff3c 	bl	8022994 <_ZN10SideSensor11UpdateStateEv>

        uint8_t now_state = read_state_flags_;
 8022b1c:	687b      	ldr	r3, [r7, #4]
 8022b1e:	781b      	ldrb	r3, [r3, #0]
 8022b20:	73bb      	strb	r3, [r7, #14]
        uint8_t pre_state = (now_state << 4) | (now_state >> 4);
 8022b22:	7bbb      	ldrb	r3, [r7, #14]
 8022b24:	011b      	lsls	r3, r3, #4
 8022b26:	b25a      	sxtb	r2, r3
 8022b28:	7bbb      	ldrb	r3, [r7, #14]
 8022b2a:	111b      	asrs	r3, r3, #4
 8022b2c:	b25b      	sxtb	r3, r3
 8022b2e:	4313      	orrs	r3, r2
 8022b30:	b25b      	sxtb	r3, r3
 8022b32:	737b      	strb	r3, [r7, #13]

        if(pre_state != now_state)
 8022b34:	7b7a      	ldrb	r2, [r7, #13]
 8022b36:	7bbb      	ldrb	r3, [r7, #14]
 8022b38:	429a      	cmp	r2, r3
 8022b3a:	d003      	beq.n	8022b44 <_ZN10SideSensor6UpdateEv+0x70>
        {
            NoiseTolerance();
 8022b3c:	6878      	ldr	r0, [r7, #4]
 8022b3e:	f000 f819 	bl	8022b74 <_ZN10SideSensor14NoiseToleranceEv>
 8022b42:	e010      	b.n	8022b66 <_ZN10SideSensor6UpdateEv+0x92>
        }
        else if(pre_state == now_state)
 8022b44:	7b7a      	ldrb	r2, [r7, #13]
 8022b46:	7bbb      	ldrb	r3, [r7, #14]
 8022b48:	429a      	cmp	r2, r3
 8022b4a:	d10c      	bne.n	8022b66 <_ZN10SideSensor6UpdateEv+0x92>
        {
            exception_flags_ &= 0xF3; // noise_count = 0
 8022b4c:	687b      	ldr	r3, [r7, #4]
 8022b4e:	789b      	ldrb	r3, [r3, #2]
 8022b50:	f023 030c 	bic.w	r3, r3, #12
 8022b54:	b2da      	uxtb	r2, r3
 8022b56:	687b      	ldr	r3, [r7, #4]
 8022b58:	709a      	strb	r2, [r3, #2]
            ConfirmState();
 8022b5a:	6878      	ldr	r0, [r7, #4]
 8022b5c:	f000 f85a 	bl	8022c14 <_ZN10SideSensor12ConfirmStateEv>
            CountUp();
 8022b60:	6878      	ldr	r0, [r7, #4]
 8022b62:	f000 f8c6 	bl	8022cf2 <_ZN10SideSensor7CountUpEv>
        }
    }

#ifdef DEBUG_MODE
    Monitor();
 8022b66:	6878      	ldr	r0, [r7, #4]
 8022b68:	f000 f984 	bl	8022e74 <_ZN10SideSensor7MonitorEv>
#endif // DEBUG_MODE
}
 8022b6c:	bf00      	nop
 8022b6e:	3710      	adds	r7, #16
 8022b70:	46bd      	mov	sp, r7
 8022b72:	bd80      	pop	{r7, pc}

08022b74 <_ZN10SideSensor14NoiseToleranceEv>:

void SideSensor::NoiseTolerance()
{
 8022b74:	b580      	push	{r7, lr}
 8022b76:	b084      	sub	sp, #16
 8022b78:	af00      	add	r7, sp, #0
 8022b7a:	6078      	str	r0, [r7, #4]
    uint8_t noise_count = (exception_flags_ & 0x0C) >> 2;
 8022b7c:	687b      	ldr	r3, [r7, #4]
 8022b7e:	789b      	ldrb	r3, [r3, #2]
 8022b80:	109b      	asrs	r3, r3, #2
 8022b82:	b2db      	uxtb	r3, r3
 8022b84:	f003 0303 	and.w	r3, r3, #3
 8022b88:	73fb      	strb	r3, [r7, #15]

    if(noise_count == 0x00)
 8022b8a:	7bfb      	ldrb	r3, [r7, #15]
 8022b8c:	2b00      	cmp	r3, #0
 8022b8e:	d11f      	bne.n	8022bd0 <_ZN10SideSensor14NoiseToleranceEv+0x5c>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ & 0xF0);
 8022b90:	687b      	ldr	r3, [r7, #4]
 8022b92:	789b      	ldrb	r3, [r3, #2]
 8022b94:	f003 030f 	and.w	r3, r3, #15
 8022b98:	b2da      	uxtb	r2, r3
 8022b9a:	687b      	ldr	r3, [r7, #4]
 8022b9c:	781b      	ldrb	r3, [r3, #0]
 8022b9e:	f023 030f 	bic.w	r3, r3, #15
 8022ba2:	b2db      	uxtb	r3, r3
 8022ba4:	4313      	orrs	r3, r2
 8022ba6:	b2da      	uxtb	r2, r3
 8022ba8:	687b      	ldr	r3, [r7, #4]
 8022baa:	709a      	strb	r2, [r3, #2]
        /* Count up noise_count */
        noise_count++;
 8022bac:	7bfb      	ldrb	r3, [r7, #15]
 8022bae:	3301      	adds	r3, #1
 8022bb0:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8022bb2:	687b      	ldr	r3, [r7, #4]
 8022bb4:	789b      	ldrb	r3, [r3, #2]
 8022bb6:	b25b      	sxtb	r3, r3
 8022bb8:	f023 030c 	bic.w	r3, r3, #12
 8022bbc:	b25a      	sxtb	r2, r3
 8022bbe:	7bfb      	ldrb	r3, [r7, #15]
 8022bc0:	009b      	lsls	r3, r3, #2
 8022bc2:	b25b      	sxtb	r3, r3
 8022bc4:	4313      	orrs	r3, r2
 8022bc6:	b25b      	sxtb	r3, r3
 8022bc8:	b2da      	uxtb	r2, r3
 8022bca:	687b      	ldr	r3, [r7, #4]
 8022bcc:	709a      	strb	r2, [r3, #2]

        ConfirmState();
        CountUp();
    }
    else master_count_ = 0;
}
 8022bce:	e01d      	b.n	8022c0c <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else if(noise_count == 0x01)
 8022bd0:	7bfb      	ldrb	r3, [r7, #15]
 8022bd2:	2b01      	cmp	r3, #1
 8022bd4:	d117      	bne.n	8022c06 <_ZN10SideSensor14NoiseToleranceEv+0x92>
        noise_count++;
 8022bd6:	7bfb      	ldrb	r3, [r7, #15]
 8022bd8:	3301      	adds	r3, #1
 8022bda:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8022bdc:	687b      	ldr	r3, [r7, #4]
 8022bde:	789b      	ldrb	r3, [r3, #2]
 8022be0:	b25b      	sxtb	r3, r3
 8022be2:	f023 030c 	bic.w	r3, r3, #12
 8022be6:	b25a      	sxtb	r2, r3
 8022be8:	7bfb      	ldrb	r3, [r7, #15]
 8022bea:	009b      	lsls	r3, r3, #2
 8022bec:	b25b      	sxtb	r3, r3
 8022bee:	4313      	orrs	r3, r2
 8022bf0:	b25b      	sxtb	r3, r3
 8022bf2:	b2da      	uxtb	r2, r3
 8022bf4:	687b      	ldr	r3, [r7, #4]
 8022bf6:	709a      	strb	r2, [r3, #2]
        ConfirmState();
 8022bf8:	6878      	ldr	r0, [r7, #4]
 8022bfa:	f000 f80b 	bl	8022c14 <_ZN10SideSensor12ConfirmStateEv>
        CountUp();
 8022bfe:	6878      	ldr	r0, [r7, #4]
 8022c00:	f000 f877 	bl	8022cf2 <_ZN10SideSensor7CountUpEv>
}
 8022c04:	e002      	b.n	8022c0c <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else master_count_ = 0;
 8022c06:	687b      	ldr	r3, [r7, #4]
 8022c08:	2200      	movs	r2, #0
 8022c0a:	70da      	strb	r2, [r3, #3]
}
 8022c0c:	bf00      	nop
 8022c0e:	3710      	adds	r7, #16
 8022c10:	46bd      	mov	sp, r7
 8022c12:	bd80      	pop	{r7, pc}

08022c14 <_ZN10SideSensor12ConfirmStateEv>:

void SideSensor::ConfirmState()
{
 8022c14:	b480      	push	{r7}
 8022c16:	b085      	sub	sp, #20
 8022c18:	af00      	add	r7, sp, #0
 8022c1a:	6078      	str	r0, [r7, #4]
    uint8_t before_noise_state = exception_flags_ >> 4;
 8022c1c:	687b      	ldr	r3, [r7, #4]
 8022c1e:	789b      	ldrb	r3, [r3, #2]
 8022c20:	111b      	asrs	r3, r3, #4
 8022c22:	73bb      	strb	r3, [r7, #14]
    uint8_t now_state = read_state_flags_ & 0x0F;
 8022c24:	687b      	ldr	r3, [r7, #4]
 8022c26:	781b      	ldrb	r3, [r3, #0]
 8022c28:	f003 030f 	and.w	r3, r3, #15
 8022c2c:	737b      	strb	r3, [r7, #13]
    uint8_t count = master_count_;
 8022c2e:	687b      	ldr	r3, [r7, #4]
 8022c30:	78db      	ldrb	r3, [r3, #3]
 8022c32:	73fb      	strb	r3, [r7, #15]

    if(before_noise_state != now_state)
 8022c34:	7bba      	ldrb	r2, [r7, #14]
 8022c36:	7b7b      	ldrb	r3, [r7, #13]
 8022c38:	429a      	cmp	r2, r3
 8022c3a:	d010      	beq.n	8022c5e <_ZN10SideSensor12ConfirmStateEv+0x4a>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (now_state << 4);
 8022c3c:	687b      	ldr	r3, [r7, #4]
 8022c3e:	789b      	ldrb	r3, [r3, #2]
 8022c40:	b25b      	sxtb	r3, r3
 8022c42:	f003 030f 	and.w	r3, r3, #15
 8022c46:	b25a      	sxtb	r2, r3
 8022c48:	7b7b      	ldrb	r3, [r7, #13]
 8022c4a:	011b      	lsls	r3, r3, #4
 8022c4c:	b25b      	sxtb	r3, r3
 8022c4e:	4313      	orrs	r3, r2
 8022c50:	b25b      	sxtb	r3, r3
 8022c52:	b2da      	uxtb	r2, r3
 8022c54:	687b      	ldr	r3, [r7, #4]
 8022c56:	709a      	strb	r2, [r3, #2]
        count = 0;
 8022c58:	2300      	movs	r3, #0
 8022c5a:	73fb      	strb	r3, [r7, #15]
 8022c5c:	e005      	b.n	8022c6a <_ZN10SideSensor12ConfirmStateEv+0x56>
    }
    else if(count < MAX_INTERRUPT_COUNT) count++;
 8022c5e:	7bfb      	ldrb	r3, [r7, #15]
 8022c60:	2bf9      	cmp	r3, #249	; 0xf9
 8022c62:	d802      	bhi.n	8022c6a <_ZN10SideSensor12ConfirmStateEv+0x56>
 8022c64:	7bfb      	ldrb	r3, [r7, #15]
 8022c66:	3301      	adds	r3, #1
 8022c68:	73fb      	strb	r3, [r7, #15]

    master_count_ = count;
 8022c6a:	687b      	ldr	r3, [r7, #4]
 8022c6c:	7bfa      	ldrb	r2, [r7, #15]
 8022c6e:	70da      	strb	r2, [r3, #3]

    if(now_state == 0x08 && count >= BLACK_BLACK_COUNT)
 8022c70:	7b7b      	ldrb	r3, [r7, #13]
 8022c72:	2b08      	cmp	r3, #8
 8022c74:	d10d      	bne.n	8022c92 <_ZN10SideSensor12ConfirmStateEv+0x7e>
 8022c76:	7bfb      	ldrb	r3, [r7, #15]
 8022c78:	2b01      	cmp	r3, #1
 8022c7a:	d90a      	bls.n	8022c92 <_ZN10SideSensor12ConfirmStateEv+0x7e>
    {
        write_state_flags_ = (write_state_flags_ & 0xF0) | 0x08;
 8022c7c:	687b      	ldr	r3, [r7, #4]
 8022c7e:	785b      	ldrb	r3, [r3, #1]
 8022c80:	f023 030f 	bic.w	r3, r3, #15
 8022c84:	b2db      	uxtb	r3, r3
 8022c86:	f043 0308 	orr.w	r3, r3, #8
 8022c8a:	b2da      	uxtb	r2, r3
 8022c8c:	687b      	ldr	r3, [r7, #4]
 8022c8e:	705a      	strb	r2, [r3, #1]
 8022c90:	e029      	b.n	8022ce6 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x04 && count >= BLACK_WHITE_COUNT)
 8022c92:	7b7b      	ldrb	r3, [r7, #13]
 8022c94:	2b04      	cmp	r3, #4
 8022c96:	d10a      	bne.n	8022cae <_ZN10SideSensor12ConfirmStateEv+0x9a>
 8022c98:	7bfb      	ldrb	r3, [r7, #15]
 8022c9a:	2b00      	cmp	r3, #0
 8022c9c:	d007      	beq.n	8022cae <_ZN10SideSensor12ConfirmStateEv+0x9a>
    {
        write_state_flags_ |= 0x04;
 8022c9e:	687b      	ldr	r3, [r7, #4]
 8022ca0:	785b      	ldrb	r3, [r3, #1]
 8022ca2:	f043 0304 	orr.w	r3, r3, #4
 8022ca6:	b2da      	uxtb	r2, r3
 8022ca8:	687b      	ldr	r3, [r7, #4]
 8022caa:	705a      	strb	r2, [r3, #1]
 8022cac:	e01b      	b.n	8022ce6 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x02 && count >= WHITE_BLACK_COUNT)
 8022cae:	7b7b      	ldrb	r3, [r7, #13]
 8022cb0:	2b02      	cmp	r3, #2
 8022cb2:	d10a      	bne.n	8022cca <_ZN10SideSensor12ConfirmStateEv+0xb6>
 8022cb4:	7bfb      	ldrb	r3, [r7, #15]
 8022cb6:	2b00      	cmp	r3, #0
 8022cb8:	d007      	beq.n	8022cca <_ZN10SideSensor12ConfirmStateEv+0xb6>
    {
        write_state_flags_ |= 0x02;
 8022cba:	687b      	ldr	r3, [r7, #4]
 8022cbc:	785b      	ldrb	r3, [r3, #1]
 8022cbe:	f043 0302 	orr.w	r3, r3, #2
 8022cc2:	b2da      	uxtb	r2, r3
 8022cc4:	687b      	ldr	r3, [r7, #4]
 8022cc6:	705a      	strb	r2, [r3, #1]
 8022cc8:	e00d      	b.n	8022ce6 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x01 && count >= WHITE_WHITE_COUNT)
 8022cca:	7b7b      	ldrb	r3, [r7, #13]
 8022ccc:	2b01      	cmp	r3, #1
 8022cce:	d10a      	bne.n	8022ce6 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    {
        write_state_flags_ = (write_state_flags_ & 0xF8) | 0x01;
 8022cd0:	687b      	ldr	r3, [r7, #4]
 8022cd2:	785b      	ldrb	r3, [r3, #1]
 8022cd4:	f023 0307 	bic.w	r3, r3, #7
 8022cd8:	b2db      	uxtb	r3, r3
 8022cda:	f043 0301 	orr.w	r3, r3, #1
 8022cde:	b2da      	uxtb	r2, r3
 8022ce0:	687b      	ldr	r3, [r7, #4]
 8022ce2:	705a      	strb	r2, [r3, #1]
    }
}
 8022ce4:	e7ff      	b.n	8022ce6 <_ZN10SideSensor12ConfirmStateEv+0xd2>
 8022ce6:	bf00      	nop
 8022ce8:	3714      	adds	r7, #20
 8022cea:	46bd      	mov	sp, r7
 8022cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cf0:	4770      	bx	lr

08022cf2 <_ZN10SideSensor7CountUpEv>:

void SideSensor::CountUp()
{
 8022cf2:	b480      	push	{r7}
 8022cf4:	b085      	sub	sp, #20
 8022cf6:	af00      	add	r7, sp, #0
 8022cf8:	6078      	str	r0, [r7, #4]
    uint8_t state = write_state_flags_;
 8022cfa:	687b      	ldr	r3, [r7, #4]
 8022cfc:	785b      	ldrb	r3, [r3, #1]
 8022cfe:	73fb      	strb	r3, [r7, #15]
    uint8_t black_flag   = (state & 0x08) >> 3;
 8022d00:	7bfb      	ldrb	r3, [r7, #15]
 8022d02:	10db      	asrs	r3, r3, #3
 8022d04:	b2db      	uxtb	r3, r3
 8022d06:	f003 0301 	and.w	r3, r3, #1
 8022d0a:	73bb      	strb	r3, [r7, #14]
    uint8_t goal_flag    = (state & 0x04) >> 2;
 8022d0c:	7bfb      	ldrb	r3, [r7, #15]
 8022d0e:	109b      	asrs	r3, r3, #2
 8022d10:	b2db      	uxtb	r3, r3
 8022d12:	f003 0301 	and.w	r3, r3, #1
 8022d16:	737b      	strb	r3, [r7, #13]
    uint8_t corner_flag  = (state & 0x02) >> 1;
 8022d18:	7bfb      	ldrb	r3, [r7, #15]
 8022d1a:	105b      	asrs	r3, r3, #1
 8022d1c:	b2db      	uxtb	r3, r3
 8022d1e:	f003 0301 	and.w	r3, r3, #1
 8022d22:	733b      	strb	r3, [r7, #12]
    uint8_t cross_flag   =  state & 0x01;
 8022d24:	7bfb      	ldrb	r3, [r7, #15]
 8022d26:	f003 0301 	and.w	r3, r3, #1
 8022d2a:	72fb      	strb	r3, [r7, #11]
    uint8_t goal_reach   = (state & 0x80) >> 7;
 8022d2c:	7bfb      	ldrb	r3, [r7, #15]
 8022d2e:	09db      	lsrs	r3, r3, #7
 8022d30:	72bb      	strb	r3, [r7, #10]
    uint8_t corner_reach = (state & 0x40) >> 6;
 8022d32:	7bfb      	ldrb	r3, [r7, #15]
 8022d34:	119b      	asrs	r3, r3, #6
 8022d36:	b2db      	uxtb	r3, r3
 8022d38:	f003 0301 	and.w	r3, r3, #1
 8022d3c:	727b      	strb	r3, [r7, #9]
    uint8_t cross_reach  = (state & 0x20) >> 5;
 8022d3e:	7bfb      	ldrb	r3, [r7, #15]
 8022d40:	115b      	asrs	r3, r3, #5
 8022d42:	b2db      	uxtb	r3, r3
 8022d44:	f003 0301 	and.w	r3, r3, #1
 8022d48:	723b      	strb	r3, [r7, #8]

    if(cross_flag == 0x01 && black_flag == 0x01)
 8022d4a:	7afb      	ldrb	r3, [r7, #11]
 8022d4c:	2b01      	cmp	r3, #1
 8022d4e:	d10b      	bne.n	8022d68 <_ZN10SideSensor7CountUpEv+0x76>
 8022d50:	7bbb      	ldrb	r3, [r7, #14]
 8022d52:	2b01      	cmp	r3, #1
 8022d54:	d108      	bne.n	8022d68 <_ZN10SideSensor7CountUpEv+0x76>
    {
        state &= 0xF7; // black_flag = false
 8022d56:	7bfb      	ldrb	r3, [r7, #15]
 8022d58:	f023 0308 	bic.w	r3, r3, #8
 8022d5c:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8022d5e:	7bfb      	ldrb	r3, [r7, #15]
 8022d60:	f043 0320 	orr.w	r3, r3, #32
 8022d64:	73fb      	strb	r3, [r7, #15]
 8022d66:	e02d      	b.n	8022dc4 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && goal_reach == 0x01)
 8022d68:	7afb      	ldrb	r3, [r7, #11]
 8022d6a:	2b01      	cmp	r3, #1
 8022d6c:	d10b      	bne.n	8022d86 <_ZN10SideSensor7CountUpEv+0x94>
 8022d6e:	7abb      	ldrb	r3, [r7, #10]
 8022d70:	2b01      	cmp	r3, #1
 8022d72:	d108      	bne.n	8022d86 <_ZN10SideSensor7CountUpEv+0x94>
    {
        state &= 0x7F; // goal_reach = false
 8022d74:	7bfb      	ldrb	r3, [r7, #15]
 8022d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022d7a:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8022d7c:	7bfb      	ldrb	r3, [r7, #15]
 8022d7e:	f043 0320 	orr.w	r3, r3, #32
 8022d82:	73fb      	strb	r3, [r7, #15]
 8022d84:	e01e      	b.n	8022dc4 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && corner_reach == 0x01)
 8022d86:	7afb      	ldrb	r3, [r7, #11]
 8022d88:	2b01      	cmp	r3, #1
 8022d8a:	d10b      	bne.n	8022da4 <_ZN10SideSensor7CountUpEv+0xb2>
 8022d8c:	7a7b      	ldrb	r3, [r7, #9]
 8022d8e:	2b01      	cmp	r3, #1
 8022d90:	d108      	bne.n	8022da4 <_ZN10SideSensor7CountUpEv+0xb2>
    {
        state &= 0xBF; // corner_reach = false
 8022d92:	7bfb      	ldrb	r3, [r7, #15]
 8022d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8022d98:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8022d9a:	7bfb      	ldrb	r3, [r7, #15]
 8022d9c:	f043 0320 	orr.w	r3, r3, #32
 8022da0:	73fb      	strb	r3, [r7, #15]
 8022da2:	e00f      	b.n	8022dc4 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_reach == 0x01 && black_flag == 0x01)
 8022da4:	7a3b      	ldrb	r3, [r7, #8]
 8022da6:	2b01      	cmp	r3, #1
 8022da8:	d10c      	bne.n	8022dc4 <_ZN10SideSensor7CountUpEv+0xd2>
 8022daa:	7bbb      	ldrb	r3, [r7, #14]
 8022dac:	2b01      	cmp	r3, #1
 8022dae:	d109      	bne.n	8022dc4 <_ZN10SideSensor7CountUpEv+0xd2>
    {
        state &= 0xDF; // cross_reach = false
 8022db0:	7bfb      	ldrb	r3, [r7, #15]
 8022db2:	f023 0320 	bic.w	r3, r3, #32
 8022db6:	73fb      	strb	r3, [r7, #15]
        cross_line_count_++;
 8022db8:	687b      	ldr	r3, [r7, #4]
 8022dba:	799b      	ldrb	r3, [r3, #6]
 8022dbc:	3301      	adds	r3, #1
 8022dbe:	b2da      	uxtb	r2, r3
 8022dc0:	687b      	ldr	r3, [r7, #4]
 8022dc2:	719a      	strb	r2, [r3, #6]
    }

    black_flag   = (state & 0x08) >> 3;
 8022dc4:	7bfb      	ldrb	r3, [r7, #15]
 8022dc6:	10db      	asrs	r3, r3, #3
 8022dc8:	b2db      	uxtb	r3, r3
 8022dca:	f003 0301 	and.w	r3, r3, #1
 8022dce:	73bb      	strb	r3, [r7, #14]
    goal_reach   = (state & 0x80) >> 7;
 8022dd0:	7bfb      	ldrb	r3, [r7, #15]
 8022dd2:	09db      	lsrs	r3, r3, #7
 8022dd4:	72bb      	strb	r3, [r7, #10]
    corner_reach = (state & 0x40) >> 6;
 8022dd6:	7bfb      	ldrb	r3, [r7, #15]
 8022dd8:	119b      	asrs	r3, r3, #6
 8022dda:	b2db      	uxtb	r3, r3
 8022ddc:	f003 0301 	and.w	r3, r3, #1
 8022de0:	727b      	strb	r3, [r7, #9]
    
    if(goal_flag == 0x01 && black_flag == 0x01)
 8022de2:	7b7b      	ldrb	r3, [r7, #13]
 8022de4:	2b01      	cmp	r3, #1
 8022de6:	d10b      	bne.n	8022e00 <_ZN10SideSensor7CountUpEv+0x10e>
 8022de8:	7bbb      	ldrb	r3, [r7, #14]
 8022dea:	2b01      	cmp	r3, #1
 8022dec:	d108      	bne.n	8022e00 <_ZN10SideSensor7CountUpEv+0x10e>
    {
        state &= 0xF7; // black_flag = false
 8022dee:	7bfb      	ldrb	r3, [r7, #15]
 8022df0:	f023 0308 	bic.w	r3, r3, #8
 8022df4:	73fb      	strb	r3, [r7, #15]
        state |= 0x80; // goal_reach = true
 8022df6:	7bfb      	ldrb	r3, [r7, #15]
 8022df8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8022dfc:	73fb      	strb	r3, [r7, #15]
 8022dfe:	e02f      	b.n	8022e60 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(goal_reach == 0x01 && black_flag == 0x01)
 8022e00:	7abb      	ldrb	r3, [r7, #10]
 8022e02:	2b01      	cmp	r3, #1
 8022e04:	d10d      	bne.n	8022e22 <_ZN10SideSensor7CountUpEv+0x130>
 8022e06:	7bbb      	ldrb	r3, [r7, #14]
 8022e08:	2b01      	cmp	r3, #1
 8022e0a:	d10a      	bne.n	8022e22 <_ZN10SideSensor7CountUpEv+0x130>
    {
        state &= 0x7F; // goal_reach = false
 8022e0c:	7bfb      	ldrb	r3, [r7, #15]
 8022e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022e12:	73fb      	strb	r3, [r7, #15]
        goal_marker_count_++;
 8022e14:	687b      	ldr	r3, [r7, #4]
 8022e16:	791b      	ldrb	r3, [r3, #4]
 8022e18:	3301      	adds	r3, #1
 8022e1a:	b2da      	uxtb	r2, r3
 8022e1c:	687b      	ldr	r3, [r7, #4]
 8022e1e:	711a      	strb	r2, [r3, #4]
 8022e20:	e01e      	b.n	8022e60 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_flag == 0x01 && black_flag == 0x01)
 8022e22:	7b3b      	ldrb	r3, [r7, #12]
 8022e24:	2b01      	cmp	r3, #1
 8022e26:	d10b      	bne.n	8022e40 <_ZN10SideSensor7CountUpEv+0x14e>
 8022e28:	7bbb      	ldrb	r3, [r7, #14]
 8022e2a:	2b01      	cmp	r3, #1
 8022e2c:	d108      	bne.n	8022e40 <_ZN10SideSensor7CountUpEv+0x14e>
    {
        state &= 0xF7; // black_flag = false
 8022e2e:	7bfb      	ldrb	r3, [r7, #15]
 8022e30:	f023 0308 	bic.w	r3, r3, #8
 8022e34:	73fb      	strb	r3, [r7, #15]
        state |= 0x40; // corner_reach = true
 8022e36:	7bfb      	ldrb	r3, [r7, #15]
 8022e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022e3c:	73fb      	strb	r3, [r7, #15]
 8022e3e:	e00f      	b.n	8022e60 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_reach == 0x01 && black_flag == 0x01)
 8022e40:	7a7b      	ldrb	r3, [r7, #9]
 8022e42:	2b01      	cmp	r3, #1
 8022e44:	d10c      	bne.n	8022e60 <_ZN10SideSensor7CountUpEv+0x16e>
 8022e46:	7bbb      	ldrb	r3, [r7, #14]
 8022e48:	2b01      	cmp	r3, #1
 8022e4a:	d109      	bne.n	8022e60 <_ZN10SideSensor7CountUpEv+0x16e>
    {
        state &= 0xBF; // corner_reach = false
 8022e4c:	7bfb      	ldrb	r3, [r7, #15]
 8022e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8022e52:	73fb      	strb	r3, [r7, #15]
        corner_marker_count_++;
 8022e54:	687b      	ldr	r3, [r7, #4]
 8022e56:	795b      	ldrb	r3, [r3, #5]
 8022e58:	3301      	adds	r3, #1
 8022e5a:	b2da      	uxtb	r2, r3
 8022e5c:	687b      	ldr	r3, [r7, #4]
 8022e5e:	715a      	strb	r2, [r3, #5]
    }

    write_state_flags_ = state;
 8022e60:	687b      	ldr	r3, [r7, #4]
 8022e62:	7bfa      	ldrb	r2, [r7, #15]
 8022e64:	705a      	strb	r2, [r3, #1]
}
 8022e66:	bf00      	nop
 8022e68:	3714      	adds	r7, #20
 8022e6a:	46bd      	mov	sp, r7
 8022e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e70:	4770      	bx	lr
	...

08022e74 <_ZN10SideSensor7MonitorEv>:
    return cross_line_count_;
}

#ifdef DEBUG_MODE
void SideSensor::Monitor()
{
 8022e74:	b480      	push	{r7}
 8022e76:	b083      	sub	sp, #12
 8022e78:	af00      	add	r7, sp, #0
 8022e7a:	6078      	str	r0, [r7, #4]
    /* read_state_flags_ */
    g_side_pre_state = (read_state_flags_ & 0xF0) >> 4;
 8022e7c:	687b      	ldr	r3, [r7, #4]
 8022e7e:	781b      	ldrb	r3, [r3, #0]
 8022e80:	091b      	lsrs	r3, r3, #4
 8022e82:	b2da      	uxtb	r2, r3
 8022e84:	4b3a      	ldr	r3, [pc, #232]	; (8022f70 <_ZN10SideSensor7MonitorEv+0xfc>)
 8022e86:	701a      	strb	r2, [r3, #0]
    g_side_now_state =  read_state_flags_ & 0x0F;
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	781b      	ldrb	r3, [r3, #0]
 8022e8c:	f003 030f 	and.w	r3, r3, #15
 8022e90:	b2da      	uxtb	r2, r3
 8022e92:	4b38      	ldr	r3, [pc, #224]	; (8022f74 <_ZN10SideSensor7MonitorEv+0x100>)
 8022e94:	701a      	strb	r2, [r3, #0]

    if(g_side_pre_state != g_side_now_state) g_side_change_state_count++;
 8022e96:	4b36      	ldr	r3, [pc, #216]	; (8022f70 <_ZN10SideSensor7MonitorEv+0xfc>)
 8022e98:	781a      	ldrb	r2, [r3, #0]
 8022e9a:	4b36      	ldr	r3, [pc, #216]	; (8022f74 <_ZN10SideSensor7MonitorEv+0x100>)
 8022e9c:	781b      	ldrb	r3, [r3, #0]
 8022e9e:	429a      	cmp	r2, r3
 8022ea0:	d004      	beq.n	8022eac <_ZN10SideSensor7MonitorEv+0x38>
 8022ea2:	4b35      	ldr	r3, [pc, #212]	; (8022f78 <_ZN10SideSensor7MonitorEv+0x104>)
 8022ea4:	681b      	ldr	r3, [r3, #0]
 8022ea6:	3301      	adds	r3, #1
 8022ea8:	4a33      	ldr	r2, [pc, #204]	; (8022f78 <_ZN10SideSensor7MonitorEv+0x104>)
 8022eaa:	6013      	str	r3, [r2, #0]

    /* write_state_flags_ upper bit */
    g_side_goal_reach   = (write_state_flags_ & 0x80) >> 7;
 8022eac:	687b      	ldr	r3, [r7, #4]
 8022eae:	785b      	ldrb	r3, [r3, #1]
 8022eb0:	09db      	lsrs	r3, r3, #7
 8022eb2:	b2da      	uxtb	r2, r3
 8022eb4:	4b31      	ldr	r3, [pc, #196]	; (8022f7c <_ZN10SideSensor7MonitorEv+0x108>)
 8022eb6:	701a      	strb	r2, [r3, #0]
    g_side_corner_reach = (write_state_flags_ & 0x40) >> 6;
 8022eb8:	687b      	ldr	r3, [r7, #4]
 8022eba:	785b      	ldrb	r3, [r3, #1]
 8022ebc:	119b      	asrs	r3, r3, #6
 8022ebe:	b2db      	uxtb	r3, r3
 8022ec0:	f003 0301 	and.w	r3, r3, #1
 8022ec4:	b2da      	uxtb	r2, r3
 8022ec6:	4b2e      	ldr	r3, [pc, #184]	; (8022f80 <_ZN10SideSensor7MonitorEv+0x10c>)
 8022ec8:	701a      	strb	r2, [r3, #0]
    g_side_cross_reach  = (write_state_flags_ & 0x20) >> 5;
 8022eca:	687b      	ldr	r3, [r7, #4]
 8022ecc:	785b      	ldrb	r3, [r3, #1]
 8022ece:	115b      	asrs	r3, r3, #5
 8022ed0:	b2db      	uxtb	r3, r3
 8022ed2:	f003 0301 	and.w	r3, r3, #1
 8022ed6:	b2da      	uxtb	r2, r3
 8022ed8:	4b2a      	ldr	r3, [pc, #168]	; (8022f84 <_ZN10SideSensor7MonitorEv+0x110>)
 8022eda:	701a      	strb	r2, [r3, #0]

    /* write_state_flags_ lower bit */
    g_side_black_flag  = (write_state_flags_ & 0x08) >> 3;
 8022edc:	687b      	ldr	r3, [r7, #4]
 8022ede:	785b      	ldrb	r3, [r3, #1]
 8022ee0:	10db      	asrs	r3, r3, #3
 8022ee2:	b2db      	uxtb	r3, r3
 8022ee4:	f003 0301 	and.w	r3, r3, #1
 8022ee8:	b2da      	uxtb	r2, r3
 8022eea:	4b27      	ldr	r3, [pc, #156]	; (8022f88 <_ZN10SideSensor7MonitorEv+0x114>)
 8022eec:	701a      	strb	r2, [r3, #0]
    g_side_goal_flag   = (write_state_flags_ & 0x04) >> 2;
 8022eee:	687b      	ldr	r3, [r7, #4]
 8022ef0:	785b      	ldrb	r3, [r3, #1]
 8022ef2:	109b      	asrs	r3, r3, #2
 8022ef4:	b2db      	uxtb	r3, r3
 8022ef6:	f003 0301 	and.w	r3, r3, #1
 8022efa:	b2da      	uxtb	r2, r3
 8022efc:	4b23      	ldr	r3, [pc, #140]	; (8022f8c <_ZN10SideSensor7MonitorEv+0x118>)
 8022efe:	701a      	strb	r2, [r3, #0]
    g_side_corner_flag = (write_state_flags_ & 0x02) >> 1;
 8022f00:	687b      	ldr	r3, [r7, #4]
 8022f02:	785b      	ldrb	r3, [r3, #1]
 8022f04:	105b      	asrs	r3, r3, #1
 8022f06:	b2db      	uxtb	r3, r3
 8022f08:	f003 0301 	and.w	r3, r3, #1
 8022f0c:	b2da      	uxtb	r2, r3
 8022f0e:	4b20      	ldr	r3, [pc, #128]	; (8022f90 <_ZN10SideSensor7MonitorEv+0x11c>)
 8022f10:	701a      	strb	r2, [r3, #0]
    g_side_cross_flag  =  write_state_flags_ & 0x01;
 8022f12:	687b      	ldr	r3, [r7, #4]
 8022f14:	785b      	ldrb	r3, [r3, #1]
 8022f16:	f003 0301 	and.w	r3, r3, #1
 8022f1a:	b2da      	uxtb	r2, r3
 8022f1c:	4b1d      	ldr	r3, [pc, #116]	; (8022f94 <_ZN10SideSensor7MonitorEv+0x120>)
 8022f1e:	701a      	strb	r2, [r3, #0]

    /* exception_flags_ */
    g_side_before_noise_state = (exception_flags_ & 0xF0) >> 4;
 8022f20:	687b      	ldr	r3, [r7, #4]
 8022f22:	789b      	ldrb	r3, [r3, #2]
 8022f24:	091b      	lsrs	r3, r3, #4
 8022f26:	b2da      	uxtb	r2, r3
 8022f28:	4b1b      	ldr	r3, [pc, #108]	; (8022f98 <_ZN10SideSensor7MonitorEv+0x124>)
 8022f2a:	701a      	strb	r2, [r3, #0]
    g_side_noise_count        = (exception_flags_ & 0x0C) >> 2;
 8022f2c:	687b      	ldr	r3, [r7, #4]
 8022f2e:	789b      	ldrb	r3, [r3, #2]
 8022f30:	109b      	asrs	r3, r3, #2
 8022f32:	b2db      	uxtb	r3, r3
 8022f34:	f003 0303 	and.w	r3, r3, #3
 8022f38:	b2da      	uxtb	r2, r3
 8022f3a:	4b18      	ldr	r3, [pc, #96]	; (8022f9c <_ZN10SideSensor7MonitorEv+0x128>)
 8022f3c:	701a      	strb	r2, [r3, #0]
    g_side_ignore_flag        =  exception_flags_ & 0x01;
 8022f3e:	687b      	ldr	r3, [r7, #4]
 8022f40:	789b      	ldrb	r3, [r3, #2]
 8022f42:	f003 0301 	and.w	r3, r3, #1
 8022f46:	b2da      	uxtb	r2, r3
 8022f48:	4b15      	ldr	r3, [pc, #84]	; (8022fa0 <_ZN10SideSensor7MonitorEv+0x12c>)
 8022f4a:	701a      	strb	r2, [r3, #0]

    g_goal_count   = goal_marker_count_;
 8022f4c:	687b      	ldr	r3, [r7, #4]
 8022f4e:	791a      	ldrb	r2, [r3, #4]
 8022f50:	4b14      	ldr	r3, [pc, #80]	; (8022fa4 <_ZN10SideSensor7MonitorEv+0x130>)
 8022f52:	701a      	strb	r2, [r3, #0]
    g_corner_count = corner_marker_count_;
 8022f54:	687b      	ldr	r3, [r7, #4]
 8022f56:	795a      	ldrb	r2, [r3, #5]
 8022f58:	4b13      	ldr	r3, [pc, #76]	; (8022fa8 <_ZN10SideSensor7MonitorEv+0x134>)
 8022f5a:	701a      	strb	r2, [r3, #0]
    g_cross_count  = cross_line_count_;
 8022f5c:	687b      	ldr	r3, [r7, #4]
 8022f5e:	799a      	ldrb	r2, [r3, #6]
 8022f60:	4b12      	ldr	r3, [pc, #72]	; (8022fac <_ZN10SideSensor7MonitorEv+0x138>)
 8022f62:	701a      	strb	r2, [r3, #0]
}
 8022f64:	bf00      	nop
 8022f66:	370c      	adds	r7, #12
 8022f68:	46bd      	mov	sp, r7
 8022f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f6e:	4770      	bx	lr
 8022f70:	2000020c 	.word	0x2000020c
 8022f74:	2000020d 	.word	0x2000020d
 8022f78:	20000210 	.word	0x20000210
 8022f7c:	20000214 	.word	0x20000214
 8022f80:	20000215 	.word	0x20000215
 8022f84:	20000216 	.word	0x20000216
 8022f88:	20000217 	.word	0x20000217
 8022f8c:	20000218 	.word	0x20000218
 8022f90:	20000219 	.word	0x20000219
 8022f94:	2000021a 	.word	0x2000021a
 8022f98:	2000021b 	.word	0x2000021b
 8022f9c:	2000021c 	.word	0x2000021c
 8022fa0:	2000021d 	.word	0x2000021d
 8022fa4:	2000021e 	.word	0x2000021e
 8022fa8:	2000021f 	.word	0x2000021f
 8022fac:	20000220 	.word	0x20000220

08022fb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8022fb0:	b480      	push	{r7}
 8022fb2:	b083      	sub	sp, #12
 8022fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022fb6:	2300      	movs	r3, #0
 8022fb8:	607b      	str	r3, [r7, #4]
 8022fba:	4b10      	ldr	r3, [pc, #64]	; (8022ffc <HAL_MspInit+0x4c>)
 8022fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022fbe:	4a0f      	ldr	r2, [pc, #60]	; (8022ffc <HAL_MspInit+0x4c>)
 8022fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8022fc6:	4b0d      	ldr	r3, [pc, #52]	; (8022ffc <HAL_MspInit+0x4c>)
 8022fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022fce:	607b      	str	r3, [r7, #4]
 8022fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8022fd2:	2300      	movs	r3, #0
 8022fd4:	603b      	str	r3, [r7, #0]
 8022fd6:	4b09      	ldr	r3, [pc, #36]	; (8022ffc <HAL_MspInit+0x4c>)
 8022fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022fda:	4a08      	ldr	r2, [pc, #32]	; (8022ffc <HAL_MspInit+0x4c>)
 8022fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8022fe2:	4b06      	ldr	r3, [pc, #24]	; (8022ffc <HAL_MspInit+0x4c>)
 8022fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022fea:	603b      	str	r3, [r7, #0]
 8022fec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8022fee:	bf00      	nop
 8022ff0:	370c      	adds	r7, #12
 8022ff2:	46bd      	mov	sp, r7
 8022ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ff8:	4770      	bx	lr
 8022ffa:	bf00      	nop
 8022ffc:	40023800 	.word	0x40023800

08023000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8023000:	b580      	push	{r7, lr}
 8023002:	b08a      	sub	sp, #40	; 0x28
 8023004:	af00      	add	r7, sp, #0
 8023006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023008:	f107 0314 	add.w	r3, r7, #20
 802300c:	2200      	movs	r2, #0
 802300e:	601a      	str	r2, [r3, #0]
 8023010:	605a      	str	r2, [r3, #4]
 8023012:	609a      	str	r2, [r3, #8]
 8023014:	60da      	str	r2, [r3, #12]
 8023016:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8023018:	687b      	ldr	r3, [r7, #4]
 802301a:	681b      	ldr	r3, [r3, #0]
 802301c:	4a3c      	ldr	r2, [pc, #240]	; (8023110 <HAL_ADC_MspInit+0x110>)
 802301e:	4293      	cmp	r3, r2
 8023020:	d171      	bne.n	8023106 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8023022:	2300      	movs	r3, #0
 8023024:	613b      	str	r3, [r7, #16]
 8023026:	4b3b      	ldr	r3, [pc, #236]	; (8023114 <HAL_ADC_MspInit+0x114>)
 8023028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802302a:	4a3a      	ldr	r2, [pc, #232]	; (8023114 <HAL_ADC_MspInit+0x114>)
 802302c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8023030:	6453      	str	r3, [r2, #68]	; 0x44
 8023032:	4b38      	ldr	r3, [pc, #224]	; (8023114 <HAL_ADC_MspInit+0x114>)
 8023034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802303a:	613b      	str	r3, [r7, #16]
 802303c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802303e:	2300      	movs	r3, #0
 8023040:	60fb      	str	r3, [r7, #12]
 8023042:	4b34      	ldr	r3, [pc, #208]	; (8023114 <HAL_ADC_MspInit+0x114>)
 8023044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023046:	4a33      	ldr	r2, [pc, #204]	; (8023114 <HAL_ADC_MspInit+0x114>)
 8023048:	f043 0304 	orr.w	r3, r3, #4
 802304c:	6313      	str	r3, [r2, #48]	; 0x30
 802304e:	4b31      	ldr	r3, [pc, #196]	; (8023114 <HAL_ADC_MspInit+0x114>)
 8023050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023052:	f003 0304 	and.w	r3, r3, #4
 8023056:	60fb      	str	r3, [r7, #12]
 8023058:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802305a:	2300      	movs	r3, #0
 802305c:	60bb      	str	r3, [r7, #8]
 802305e:	4b2d      	ldr	r3, [pc, #180]	; (8023114 <HAL_ADC_MspInit+0x114>)
 8023060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023062:	4a2c      	ldr	r2, [pc, #176]	; (8023114 <HAL_ADC_MspInit+0x114>)
 8023064:	f043 0301 	orr.w	r3, r3, #1
 8023068:	6313      	str	r3, [r2, #48]	; 0x30
 802306a:	4b2a      	ldr	r3, [pc, #168]	; (8023114 <HAL_ADC_MspInit+0x114>)
 802306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802306e:	f003 0301 	and.w	r3, r3, #1
 8023072:	60bb      	str	r3, [r7, #8]
 8023074:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8023076:	233f      	movs	r3, #63	; 0x3f
 8023078:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802307a:	2303      	movs	r3, #3
 802307c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802307e:	2300      	movs	r3, #0
 8023080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023082:	f107 0314 	add.w	r3, r7, #20
 8023086:	4619      	mov	r1, r3
 8023088:	4823      	ldr	r0, [pc, #140]	; (8023118 <HAL_ADC_MspInit+0x118>)
 802308a:	f001 feb7 	bl	8024dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 802308e:	23ff      	movs	r3, #255	; 0xff
 8023090:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023092:	2303      	movs	r3, #3
 8023094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023096:	2300      	movs	r3, #0
 8023098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802309a:	f107 0314 	add.w	r3, r7, #20
 802309e:	4619      	mov	r1, r3
 80230a0:	481e      	ldr	r0, [pc, #120]	; (802311c <HAL_ADC_MspInit+0x11c>)
 80230a2:	f001 feab 	bl	8024dfc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80230a6:	4b1e      	ldr	r3, [pc, #120]	; (8023120 <HAL_ADC_MspInit+0x120>)
 80230a8:	4a1e      	ldr	r2, [pc, #120]	; (8023124 <HAL_ADC_MspInit+0x124>)
 80230aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80230ac:	4b1c      	ldr	r3, [pc, #112]	; (8023120 <HAL_ADC_MspInit+0x120>)
 80230ae:	2200      	movs	r2, #0
 80230b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80230b2:	4b1b      	ldr	r3, [pc, #108]	; (8023120 <HAL_ADC_MspInit+0x120>)
 80230b4:	2200      	movs	r2, #0
 80230b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80230b8:	4b19      	ldr	r3, [pc, #100]	; (8023120 <HAL_ADC_MspInit+0x120>)
 80230ba:	2200      	movs	r2, #0
 80230bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80230be:	4b18      	ldr	r3, [pc, #96]	; (8023120 <HAL_ADC_MspInit+0x120>)
 80230c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80230c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80230c6:	4b16      	ldr	r3, [pc, #88]	; (8023120 <HAL_ADC_MspInit+0x120>)
 80230c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80230cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80230ce:	4b14      	ldr	r3, [pc, #80]	; (8023120 <HAL_ADC_MspInit+0x120>)
 80230d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80230d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80230d6:	4b12      	ldr	r3, [pc, #72]	; (8023120 <HAL_ADC_MspInit+0x120>)
 80230d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80230dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80230de:	4b10      	ldr	r3, [pc, #64]	; (8023120 <HAL_ADC_MspInit+0x120>)
 80230e0:	2200      	movs	r2, #0
 80230e2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80230e4:	4b0e      	ldr	r3, [pc, #56]	; (8023120 <HAL_ADC_MspInit+0x120>)
 80230e6:	2200      	movs	r2, #0
 80230e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80230ea:	480d      	ldr	r0, [pc, #52]	; (8023120 <HAL_ADC_MspInit+0x120>)
 80230ec:	f001 fb18 	bl	8024720 <HAL_DMA_Init>
 80230f0:	4603      	mov	r3, r0
 80230f2:	2b00      	cmp	r3, #0
 80230f4:	d001      	beq.n	80230fa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80230f6:	f7ff fa6f 	bl	80225d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80230fa:	687b      	ldr	r3, [r7, #4]
 80230fc:	4a08      	ldr	r2, [pc, #32]	; (8023120 <HAL_ADC_MspInit+0x120>)
 80230fe:	639a      	str	r2, [r3, #56]	; 0x38
 8023100:	4a07      	ldr	r2, [pc, #28]	; (8023120 <HAL_ADC_MspInit+0x120>)
 8023102:	687b      	ldr	r3, [r7, #4]
 8023104:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8023106:	bf00      	nop
 8023108:	3728      	adds	r7, #40	; 0x28
 802310a:	46bd      	mov	sp, r7
 802310c:	bd80      	pop	{r7, pc}
 802310e:	bf00      	nop
 8023110:	40012000 	.word	0x40012000
 8023114:	40023800 	.word	0x40023800
 8023118:	40020800 	.word	0x40020800
 802311c:	40020000 	.word	0x40020000
 8023120:	20000784 	.word	0x20000784
 8023124:	40026410 	.word	0x40026410

08023128 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8023128:	b580      	push	{r7, lr}
 802312a:	b08a      	sub	sp, #40	; 0x28
 802312c:	af00      	add	r7, sp, #0
 802312e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023130:	f107 0314 	add.w	r3, r7, #20
 8023134:	2200      	movs	r2, #0
 8023136:	601a      	str	r2, [r3, #0]
 8023138:	605a      	str	r2, [r3, #4]
 802313a:	609a      	str	r2, [r3, #8]
 802313c:	60da      	str	r2, [r3, #12]
 802313e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8023140:	687b      	ldr	r3, [r7, #4]
 8023142:	681b      	ldr	r3, [r3, #0]
 8023144:	4a19      	ldr	r2, [pc, #100]	; (80231ac <HAL_I2C_MspInit+0x84>)
 8023146:	4293      	cmp	r3, r2
 8023148:	d12c      	bne.n	80231a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802314a:	2300      	movs	r3, #0
 802314c:	613b      	str	r3, [r7, #16]
 802314e:	4b18      	ldr	r3, [pc, #96]	; (80231b0 <HAL_I2C_MspInit+0x88>)
 8023150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023152:	4a17      	ldr	r2, [pc, #92]	; (80231b0 <HAL_I2C_MspInit+0x88>)
 8023154:	f043 0302 	orr.w	r3, r3, #2
 8023158:	6313      	str	r3, [r2, #48]	; 0x30
 802315a:	4b15      	ldr	r3, [pc, #84]	; (80231b0 <HAL_I2C_MspInit+0x88>)
 802315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802315e:	f003 0302 	and.w	r3, r3, #2
 8023162:	613b      	str	r3, [r7, #16]
 8023164:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8023166:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802316a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802316c:	2312      	movs	r3, #18
 802316e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023170:	2301      	movs	r3, #1
 8023172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023174:	2303      	movs	r3, #3
 8023176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8023178:	2304      	movs	r3, #4
 802317a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802317c:	f107 0314 	add.w	r3, r7, #20
 8023180:	4619      	mov	r1, r3
 8023182:	480c      	ldr	r0, [pc, #48]	; (80231b4 <HAL_I2C_MspInit+0x8c>)
 8023184:	f001 fe3a 	bl	8024dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8023188:	2300      	movs	r3, #0
 802318a:	60fb      	str	r3, [r7, #12]
 802318c:	4b08      	ldr	r3, [pc, #32]	; (80231b0 <HAL_I2C_MspInit+0x88>)
 802318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023190:	4a07      	ldr	r2, [pc, #28]	; (80231b0 <HAL_I2C_MspInit+0x88>)
 8023192:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8023196:	6413      	str	r3, [r2, #64]	; 0x40
 8023198:	4b05      	ldr	r3, [pc, #20]	; (80231b0 <HAL_I2C_MspInit+0x88>)
 802319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802319c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80231a0:	60fb      	str	r3, [r7, #12]
 80231a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80231a4:	bf00      	nop
 80231a6:	3728      	adds	r7, #40	; 0x28
 80231a8:	46bd      	mov	sp, r7
 80231aa:	bd80      	pop	{r7, pc}
 80231ac:	40005800 	.word	0x40005800
 80231b0:	40023800 	.word	0x40023800
 80231b4:	40020400 	.word	0x40020400

080231b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80231b8:	b580      	push	{r7, lr}
 80231ba:	b08a      	sub	sp, #40	; 0x28
 80231bc:	af00      	add	r7, sp, #0
 80231be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80231c0:	f107 0314 	add.w	r3, r7, #20
 80231c4:	2200      	movs	r2, #0
 80231c6:	601a      	str	r2, [r3, #0]
 80231c8:	605a      	str	r2, [r3, #4]
 80231ca:	609a      	str	r2, [r3, #8]
 80231cc:	60da      	str	r2, [r3, #12]
 80231ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80231d0:	687b      	ldr	r3, [r7, #4]
 80231d2:	681b      	ldr	r3, [r3, #0]
 80231d4:	4a19      	ldr	r2, [pc, #100]	; (802323c <HAL_SPI_MspInit+0x84>)
 80231d6:	4293      	cmp	r3, r2
 80231d8:	d12c      	bne.n	8023234 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80231da:	2300      	movs	r3, #0
 80231dc:	613b      	str	r3, [r7, #16]
 80231de:	4b18      	ldr	r3, [pc, #96]	; (8023240 <HAL_SPI_MspInit+0x88>)
 80231e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231e2:	4a17      	ldr	r2, [pc, #92]	; (8023240 <HAL_SPI_MspInit+0x88>)
 80231e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80231e8:	6413      	str	r3, [r2, #64]	; 0x40
 80231ea:	4b15      	ldr	r3, [pc, #84]	; (8023240 <HAL_SPI_MspInit+0x88>)
 80231ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80231f2:	613b      	str	r3, [r7, #16]
 80231f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80231f6:	2300      	movs	r3, #0
 80231f8:	60fb      	str	r3, [r7, #12]
 80231fa:	4b11      	ldr	r3, [pc, #68]	; (8023240 <HAL_SPI_MspInit+0x88>)
 80231fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231fe:	4a10      	ldr	r2, [pc, #64]	; (8023240 <HAL_SPI_MspInit+0x88>)
 8023200:	f043 0304 	orr.w	r3, r3, #4
 8023204:	6313      	str	r3, [r2, #48]	; 0x30
 8023206:	4b0e      	ldr	r3, [pc, #56]	; (8023240 <HAL_SPI_MspInit+0x88>)
 8023208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802320a:	f003 0304 	and.w	r3, r3, #4
 802320e:	60fb      	str	r3, [r7, #12]
 8023210:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8023212:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8023216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023218:	2302      	movs	r3, #2
 802321a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802321c:	2300      	movs	r3, #0
 802321e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023220:	2303      	movs	r3, #3
 8023222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8023224:	2306      	movs	r3, #6
 8023226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023228:	f107 0314 	add.w	r3, r7, #20
 802322c:	4619      	mov	r1, r3
 802322e:	4805      	ldr	r0, [pc, #20]	; (8023244 <HAL_SPI_MspInit+0x8c>)
 8023230:	f001 fde4 	bl	8024dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8023234:	bf00      	nop
 8023236:	3728      	adds	r7, #40	; 0x28
 8023238:	46bd      	mov	sp, r7
 802323a:	bd80      	pop	{r7, pc}
 802323c:	40003c00 	.word	0x40003c00
 8023240:	40023800 	.word	0x40023800
 8023244:	40020800 	.word	0x40020800

08023248 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8023248:	b480      	push	{r7}
 802324a:	b087      	sub	sp, #28
 802324c:	af00      	add	r7, sp, #0
 802324e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8023250:	687b      	ldr	r3, [r7, #4]
 8023252:	681b      	ldr	r3, [r3, #0]
 8023254:	4a1f      	ldr	r2, [pc, #124]	; (80232d4 <HAL_TIM_PWM_MspInit+0x8c>)
 8023256:	4293      	cmp	r3, r2
 8023258:	d10e      	bne.n	8023278 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 802325a:	2300      	movs	r3, #0
 802325c:	617b      	str	r3, [r7, #20]
 802325e:	4b1e      	ldr	r3, [pc, #120]	; (80232d8 <HAL_TIM_PWM_MspInit+0x90>)
 8023260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023262:	4a1d      	ldr	r2, [pc, #116]	; (80232d8 <HAL_TIM_PWM_MspInit+0x90>)
 8023264:	f043 0301 	orr.w	r3, r3, #1
 8023268:	6453      	str	r3, [r2, #68]	; 0x44
 802326a:	4b1b      	ldr	r3, [pc, #108]	; (80232d8 <HAL_TIM_PWM_MspInit+0x90>)
 802326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802326e:	f003 0301 	and.w	r3, r3, #1
 8023272:	617b      	str	r3, [r7, #20]
 8023274:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8023276:	e026      	b.n	80232c6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8023278:	687b      	ldr	r3, [r7, #4]
 802327a:	681b      	ldr	r3, [r3, #0]
 802327c:	4a17      	ldr	r2, [pc, #92]	; (80232dc <HAL_TIM_PWM_MspInit+0x94>)
 802327e:	4293      	cmp	r3, r2
 8023280:	d10e      	bne.n	80232a0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8023282:	2300      	movs	r3, #0
 8023284:	613b      	str	r3, [r7, #16]
 8023286:	4b14      	ldr	r3, [pc, #80]	; (80232d8 <HAL_TIM_PWM_MspInit+0x90>)
 8023288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802328a:	4a13      	ldr	r2, [pc, #76]	; (80232d8 <HAL_TIM_PWM_MspInit+0x90>)
 802328c:	f043 0302 	orr.w	r3, r3, #2
 8023290:	6413      	str	r3, [r2, #64]	; 0x40
 8023292:	4b11      	ldr	r3, [pc, #68]	; (80232d8 <HAL_TIM_PWM_MspInit+0x90>)
 8023294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023296:	f003 0302 	and.w	r3, r3, #2
 802329a:	613b      	str	r3, [r7, #16]
 802329c:	693b      	ldr	r3, [r7, #16]
}
 802329e:	e012      	b.n	80232c6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 80232a0:	687b      	ldr	r3, [r7, #4]
 80232a2:	681b      	ldr	r3, [r3, #0]
 80232a4:	4a0e      	ldr	r2, [pc, #56]	; (80232e0 <HAL_TIM_PWM_MspInit+0x98>)
 80232a6:	4293      	cmp	r3, r2
 80232a8:	d10d      	bne.n	80232c6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80232aa:	2300      	movs	r3, #0
 80232ac:	60fb      	str	r3, [r7, #12]
 80232ae:	4b0a      	ldr	r3, [pc, #40]	; (80232d8 <HAL_TIM_PWM_MspInit+0x90>)
 80232b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80232b2:	4a09      	ldr	r2, [pc, #36]	; (80232d8 <HAL_TIM_PWM_MspInit+0x90>)
 80232b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80232b8:	6413      	str	r3, [r2, #64]	; 0x40
 80232ba:	4b07      	ldr	r3, [pc, #28]	; (80232d8 <HAL_TIM_PWM_MspInit+0x90>)
 80232bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80232be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80232c2:	60fb      	str	r3, [r7, #12]
 80232c4:	68fb      	ldr	r3, [r7, #12]
}
 80232c6:	bf00      	nop
 80232c8:	371c      	adds	r7, #28
 80232ca:	46bd      	mov	sp, r7
 80232cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232d0:	4770      	bx	lr
 80232d2:	bf00      	nop
 80232d4:	40010000 	.word	0x40010000
 80232d8:	40023800 	.word	0x40023800
 80232dc:	40000400 	.word	0x40000400
 80232e0:	40001800 	.word	0x40001800

080232e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80232e4:	b580      	push	{r7, lr}
 80232e6:	b088      	sub	sp, #32
 80232e8:	af00      	add	r7, sp, #0
 80232ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80232ec:	687b      	ldr	r3, [r7, #4]
 80232ee:	681b      	ldr	r3, [r3, #0]
 80232f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80232f4:	d116      	bne.n	8023324 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80232f6:	2300      	movs	r3, #0
 80232f8:	61fb      	str	r3, [r7, #28]
 80232fa:	4b40      	ldr	r3, [pc, #256]	; (80233fc <HAL_TIM_Base_MspInit+0x118>)
 80232fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80232fe:	4a3f      	ldr	r2, [pc, #252]	; (80233fc <HAL_TIM_Base_MspInit+0x118>)
 8023300:	f043 0301 	orr.w	r3, r3, #1
 8023304:	6413      	str	r3, [r2, #64]	; 0x40
 8023306:	4b3d      	ldr	r3, [pc, #244]	; (80233fc <HAL_TIM_Base_MspInit+0x118>)
 8023308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802330a:	f003 0301 	and.w	r3, r3, #1
 802330e:	61fb      	str	r3, [r7, #28]
 8023310:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8023312:	2200      	movs	r2, #0
 8023314:	2100      	movs	r1, #0
 8023316:	201c      	movs	r0, #28
 8023318:	f001 f9cb 	bl	80246b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 802331c:	201c      	movs	r0, #28
 802331e:	f001 f9e4 	bl	80246ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8023322:	e066      	b.n	80233f2 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8023324:	687b      	ldr	r3, [r7, #4]
 8023326:	681b      	ldr	r3, [r3, #0]
 8023328:	4a35      	ldr	r2, [pc, #212]	; (8023400 <HAL_TIM_Base_MspInit+0x11c>)
 802332a:	4293      	cmp	r3, r2
 802332c:	d116      	bne.n	802335c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 802332e:	2300      	movs	r3, #0
 8023330:	61bb      	str	r3, [r7, #24]
 8023332:	4b32      	ldr	r3, [pc, #200]	; (80233fc <HAL_TIM_Base_MspInit+0x118>)
 8023334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023336:	4a31      	ldr	r2, [pc, #196]	; (80233fc <HAL_TIM_Base_MspInit+0x118>)
 8023338:	f043 0308 	orr.w	r3, r3, #8
 802333c:	6413      	str	r3, [r2, #64]	; 0x40
 802333e:	4b2f      	ldr	r3, [pc, #188]	; (80233fc <HAL_TIM_Base_MspInit+0x118>)
 8023340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023342:	f003 0308 	and.w	r3, r3, #8
 8023346:	61bb      	str	r3, [r7, #24]
 8023348:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 802334a:	2200      	movs	r2, #0
 802334c:	2100      	movs	r1, #0
 802334e:	2032      	movs	r0, #50	; 0x32
 8023350:	f001 f9af 	bl	80246b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8023354:	2032      	movs	r0, #50	; 0x32
 8023356:	f001 f9c8 	bl	80246ea <HAL_NVIC_EnableIRQ>
}
 802335a:	e04a      	b.n	80233f2 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 802335c:	687b      	ldr	r3, [r7, #4]
 802335e:	681b      	ldr	r3, [r3, #0]
 8023360:	4a28      	ldr	r2, [pc, #160]	; (8023404 <HAL_TIM_Base_MspInit+0x120>)
 8023362:	4293      	cmp	r3, r2
 8023364:	d116      	bne.n	8023394 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8023366:	2300      	movs	r3, #0
 8023368:	617b      	str	r3, [r7, #20]
 802336a:	4b24      	ldr	r3, [pc, #144]	; (80233fc <HAL_TIM_Base_MspInit+0x118>)
 802336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802336e:	4a23      	ldr	r2, [pc, #140]	; (80233fc <HAL_TIM_Base_MspInit+0x118>)
 8023370:	f043 0310 	orr.w	r3, r3, #16
 8023374:	6413      	str	r3, [r2, #64]	; 0x40
 8023376:	4b21      	ldr	r3, [pc, #132]	; (80233fc <HAL_TIM_Base_MspInit+0x118>)
 8023378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802337a:	f003 0310 	and.w	r3, r3, #16
 802337e:	617b      	str	r3, [r7, #20]
 8023380:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8023382:	2200      	movs	r2, #0
 8023384:	2100      	movs	r1, #0
 8023386:	2036      	movs	r0, #54	; 0x36
 8023388:	f001 f993 	bl	80246b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 802338c:	2036      	movs	r0, #54	; 0x36
 802338e:	f001 f9ac 	bl	80246ea <HAL_NVIC_EnableIRQ>
}
 8023392:	e02e      	b.n	80233f2 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8023394:	687b      	ldr	r3, [r7, #4]
 8023396:	681b      	ldr	r3, [r3, #0]
 8023398:	4a1b      	ldr	r2, [pc, #108]	; (8023408 <HAL_TIM_Base_MspInit+0x124>)
 802339a:	4293      	cmp	r3, r2
 802339c:	d116      	bne.n	80233cc <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 802339e:	2300      	movs	r3, #0
 80233a0:	613b      	str	r3, [r7, #16]
 80233a2:	4b16      	ldr	r3, [pc, #88]	; (80233fc <HAL_TIM_Base_MspInit+0x118>)
 80233a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80233a6:	4a15      	ldr	r2, [pc, #84]	; (80233fc <HAL_TIM_Base_MspInit+0x118>)
 80233a8:	f043 0320 	orr.w	r3, r3, #32
 80233ac:	6413      	str	r3, [r2, #64]	; 0x40
 80233ae:	4b13      	ldr	r3, [pc, #76]	; (80233fc <HAL_TIM_Base_MspInit+0x118>)
 80233b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80233b2:	f003 0320 	and.w	r3, r3, #32
 80233b6:	613b      	str	r3, [r7, #16]
 80233b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80233ba:	2200      	movs	r2, #0
 80233bc:	2100      	movs	r1, #0
 80233be:	2037      	movs	r0, #55	; 0x37
 80233c0:	f001 f977 	bl	80246b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80233c4:	2037      	movs	r0, #55	; 0x37
 80233c6:	f001 f990 	bl	80246ea <HAL_NVIC_EnableIRQ>
}
 80233ca:	e012      	b.n	80233f2 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 80233cc:	687b      	ldr	r3, [r7, #4]
 80233ce:	681b      	ldr	r3, [r3, #0]
 80233d0:	4a0e      	ldr	r2, [pc, #56]	; (802340c <HAL_TIM_Base_MspInit+0x128>)
 80233d2:	4293      	cmp	r3, r2
 80233d4:	d10d      	bne.n	80233f2 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80233d6:	2300      	movs	r3, #0
 80233d8:	60fb      	str	r3, [r7, #12]
 80233da:	4b08      	ldr	r3, [pc, #32]	; (80233fc <HAL_TIM_Base_MspInit+0x118>)
 80233dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80233de:	4a07      	ldr	r2, [pc, #28]	; (80233fc <HAL_TIM_Base_MspInit+0x118>)
 80233e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80233e4:	6453      	str	r3, [r2, #68]	; 0x44
 80233e6:	4b05      	ldr	r3, [pc, #20]	; (80233fc <HAL_TIM_Base_MspInit+0x118>)
 80233e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80233ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80233ee:	60fb      	str	r3, [r7, #12]
 80233f0:	68fb      	ldr	r3, [r7, #12]
}
 80233f2:	bf00      	nop
 80233f4:	3720      	adds	r7, #32
 80233f6:	46bd      	mov	sp, r7
 80233f8:	bd80      	pop	{r7, pc}
 80233fa:	bf00      	nop
 80233fc:	40023800 	.word	0x40023800
 8023400:	40000c00 	.word	0x40000c00
 8023404:	40001000 	.word	0x40001000
 8023408:	40001400 	.word	0x40001400
 802340c:	40014800 	.word	0x40014800

08023410 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8023410:	b580      	push	{r7, lr}
 8023412:	b08c      	sub	sp, #48	; 0x30
 8023414:	af00      	add	r7, sp, #0
 8023416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023418:	f107 031c 	add.w	r3, r7, #28
 802341c:	2200      	movs	r2, #0
 802341e:	601a      	str	r2, [r3, #0]
 8023420:	605a      	str	r2, [r3, #4]
 8023422:	609a      	str	r2, [r3, #8]
 8023424:	60da      	str	r2, [r3, #12]
 8023426:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8023428:	687b      	ldr	r3, [r7, #4]
 802342a:	681b      	ldr	r3, [r3, #0]
 802342c:	4a32      	ldr	r2, [pc, #200]	; (80234f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 802342e:	4293      	cmp	r3, r2
 8023430:	d12c      	bne.n	802348c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8023432:	2300      	movs	r3, #0
 8023434:	61bb      	str	r3, [r7, #24]
 8023436:	4b31      	ldr	r3, [pc, #196]	; (80234fc <HAL_TIM_Encoder_MspInit+0xec>)
 8023438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802343a:	4a30      	ldr	r2, [pc, #192]	; (80234fc <HAL_TIM_Encoder_MspInit+0xec>)
 802343c:	f043 0304 	orr.w	r3, r3, #4
 8023440:	6413      	str	r3, [r2, #64]	; 0x40
 8023442:	4b2e      	ldr	r3, [pc, #184]	; (80234fc <HAL_TIM_Encoder_MspInit+0xec>)
 8023444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023446:	f003 0304 	and.w	r3, r3, #4
 802344a:	61bb      	str	r3, [r7, #24]
 802344c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802344e:	2300      	movs	r3, #0
 8023450:	617b      	str	r3, [r7, #20]
 8023452:	4b2a      	ldr	r3, [pc, #168]	; (80234fc <HAL_TIM_Encoder_MspInit+0xec>)
 8023454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023456:	4a29      	ldr	r2, [pc, #164]	; (80234fc <HAL_TIM_Encoder_MspInit+0xec>)
 8023458:	f043 0302 	orr.w	r3, r3, #2
 802345c:	6313      	str	r3, [r2, #48]	; 0x30
 802345e:	4b27      	ldr	r3, [pc, #156]	; (80234fc <HAL_TIM_Encoder_MspInit+0xec>)
 8023460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023462:	f003 0302 	and.w	r3, r3, #2
 8023466:	617b      	str	r3, [r7, #20]
 8023468:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 802346a:	23c0      	movs	r3, #192	; 0xc0
 802346c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802346e:	2302      	movs	r3, #2
 8023470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023472:	2300      	movs	r3, #0
 8023474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023476:	2300      	movs	r3, #0
 8023478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 802347a:	2302      	movs	r3, #2
 802347c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802347e:	f107 031c 	add.w	r3, r7, #28
 8023482:	4619      	mov	r1, r3
 8023484:	481e      	ldr	r0, [pc, #120]	; (8023500 <HAL_TIM_Encoder_MspInit+0xf0>)
 8023486:	f001 fcb9 	bl	8024dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 802348a:	e030      	b.n	80234ee <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 802348c:	687b      	ldr	r3, [r7, #4]
 802348e:	681b      	ldr	r3, [r3, #0]
 8023490:	4a1c      	ldr	r2, [pc, #112]	; (8023504 <HAL_TIM_Encoder_MspInit+0xf4>)
 8023492:	4293      	cmp	r3, r2
 8023494:	d12b      	bne.n	80234ee <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8023496:	2300      	movs	r3, #0
 8023498:	613b      	str	r3, [r7, #16]
 802349a:	4b18      	ldr	r3, [pc, #96]	; (80234fc <HAL_TIM_Encoder_MspInit+0xec>)
 802349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802349e:	4a17      	ldr	r2, [pc, #92]	; (80234fc <HAL_TIM_Encoder_MspInit+0xec>)
 80234a0:	f043 0302 	orr.w	r3, r3, #2
 80234a4:	6453      	str	r3, [r2, #68]	; 0x44
 80234a6:	4b15      	ldr	r3, [pc, #84]	; (80234fc <HAL_TIM_Encoder_MspInit+0xec>)
 80234a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80234aa:	f003 0302 	and.w	r3, r3, #2
 80234ae:	613b      	str	r3, [r7, #16]
 80234b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80234b2:	2300      	movs	r3, #0
 80234b4:	60fb      	str	r3, [r7, #12]
 80234b6:	4b11      	ldr	r3, [pc, #68]	; (80234fc <HAL_TIM_Encoder_MspInit+0xec>)
 80234b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234ba:	4a10      	ldr	r2, [pc, #64]	; (80234fc <HAL_TIM_Encoder_MspInit+0xec>)
 80234bc:	f043 0304 	orr.w	r3, r3, #4
 80234c0:	6313      	str	r3, [r2, #48]	; 0x30
 80234c2:	4b0e      	ldr	r3, [pc, #56]	; (80234fc <HAL_TIM_Encoder_MspInit+0xec>)
 80234c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234c6:	f003 0304 	and.w	r3, r3, #4
 80234ca:	60fb      	str	r3, [r7, #12]
 80234cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80234ce:	23c0      	movs	r3, #192	; 0xc0
 80234d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80234d2:	2302      	movs	r3, #2
 80234d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80234d6:	2300      	movs	r3, #0
 80234d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80234da:	2300      	movs	r3, #0
 80234dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80234de:	2303      	movs	r3, #3
 80234e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80234e2:	f107 031c 	add.w	r3, r7, #28
 80234e6:	4619      	mov	r1, r3
 80234e8:	4807      	ldr	r0, [pc, #28]	; (8023508 <HAL_TIM_Encoder_MspInit+0xf8>)
 80234ea:	f001 fc87 	bl	8024dfc <HAL_GPIO_Init>
}
 80234ee:	bf00      	nop
 80234f0:	3730      	adds	r7, #48	; 0x30
 80234f2:	46bd      	mov	sp, r7
 80234f4:	bd80      	pop	{r7, pc}
 80234f6:	bf00      	nop
 80234f8:	40000800 	.word	0x40000800
 80234fc:	40023800 	.word	0x40023800
 8023500:	40020400 	.word	0x40020400
 8023504:	40010400 	.word	0x40010400
 8023508:	40020800 	.word	0x40020800

0802350c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 802350c:	b580      	push	{r7, lr}
 802350e:	b08c      	sub	sp, #48	; 0x30
 8023510:	af00      	add	r7, sp, #0
 8023512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023514:	f107 031c 	add.w	r3, r7, #28
 8023518:	2200      	movs	r2, #0
 802351a:	601a      	str	r2, [r3, #0]
 802351c:	605a      	str	r2, [r3, #4]
 802351e:	609a      	str	r2, [r3, #8]
 8023520:	60da      	str	r2, [r3, #12]
 8023522:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8023524:	687b      	ldr	r3, [r7, #4]
 8023526:	681b      	ldr	r3, [r3, #0]
 8023528:	4a59      	ldr	r2, [pc, #356]	; (8023690 <HAL_TIM_MspPostInit+0x184>)
 802352a:	4293      	cmp	r3, r2
 802352c:	d11f      	bne.n	802356e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802352e:	2300      	movs	r3, #0
 8023530:	61bb      	str	r3, [r7, #24]
 8023532:	4b58      	ldr	r3, [pc, #352]	; (8023694 <HAL_TIM_MspPostInit+0x188>)
 8023534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023536:	4a57      	ldr	r2, [pc, #348]	; (8023694 <HAL_TIM_MspPostInit+0x188>)
 8023538:	f043 0301 	orr.w	r3, r3, #1
 802353c:	6313      	str	r3, [r2, #48]	; 0x30
 802353e:	4b55      	ldr	r3, [pc, #340]	; (8023694 <HAL_TIM_MspPostInit+0x188>)
 8023540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023542:	f003 0301 	and.w	r3, r3, #1
 8023546:	61bb      	str	r3, [r7, #24]
 8023548:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 802354a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 802354e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023550:	2302      	movs	r3, #2
 8023552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023554:	2300      	movs	r3, #0
 8023556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023558:	2300      	movs	r3, #0
 802355a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 802355c:	2301      	movs	r3, #1
 802355e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023560:	f107 031c 	add.w	r3, r7, #28
 8023564:	4619      	mov	r1, r3
 8023566:	484c      	ldr	r0, [pc, #304]	; (8023698 <HAL_TIM_MspPostInit+0x18c>)
 8023568:	f001 fc48 	bl	8024dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 802356c:	e08b      	b.n	8023686 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 802356e:	687b      	ldr	r3, [r7, #4]
 8023570:	681b      	ldr	r3, [r3, #0]
 8023572:	4a4a      	ldr	r2, [pc, #296]	; (802369c <HAL_TIM_MspPostInit+0x190>)
 8023574:	4293      	cmp	r3, r2
 8023576:	d13d      	bne.n	80235f4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8023578:	2300      	movs	r3, #0
 802357a:	617b      	str	r3, [r7, #20]
 802357c:	4b45      	ldr	r3, [pc, #276]	; (8023694 <HAL_TIM_MspPostInit+0x188>)
 802357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023580:	4a44      	ldr	r2, [pc, #272]	; (8023694 <HAL_TIM_MspPostInit+0x188>)
 8023582:	f043 0304 	orr.w	r3, r3, #4
 8023586:	6313      	str	r3, [r2, #48]	; 0x30
 8023588:	4b42      	ldr	r3, [pc, #264]	; (8023694 <HAL_TIM_MspPostInit+0x188>)
 802358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802358c:	f003 0304 	and.w	r3, r3, #4
 8023590:	617b      	str	r3, [r7, #20]
 8023592:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023594:	2300      	movs	r3, #0
 8023596:	613b      	str	r3, [r7, #16]
 8023598:	4b3e      	ldr	r3, [pc, #248]	; (8023694 <HAL_TIM_MspPostInit+0x188>)
 802359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802359c:	4a3d      	ldr	r2, [pc, #244]	; (8023694 <HAL_TIM_MspPostInit+0x188>)
 802359e:	f043 0302 	orr.w	r3, r3, #2
 80235a2:	6313      	str	r3, [r2, #48]	; 0x30
 80235a4:	4b3b      	ldr	r3, [pc, #236]	; (8023694 <HAL_TIM_MspPostInit+0x188>)
 80235a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80235a8:	f003 0302 	and.w	r3, r3, #2
 80235ac:	613b      	str	r3, [r7, #16]
 80235ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80235b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80235b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80235b6:	2302      	movs	r3, #2
 80235b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80235ba:	2300      	movs	r3, #0
 80235bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80235be:	2300      	movs	r3, #0
 80235c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80235c2:	2302      	movs	r3, #2
 80235c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80235c6:	f107 031c 	add.w	r3, r7, #28
 80235ca:	4619      	mov	r1, r3
 80235cc:	4834      	ldr	r0, [pc, #208]	; (80236a0 <HAL_TIM_MspPostInit+0x194>)
 80235ce:	f001 fc15 	bl	8024dfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80235d2:	2330      	movs	r3, #48	; 0x30
 80235d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80235d6:	2302      	movs	r3, #2
 80235d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80235da:	2300      	movs	r3, #0
 80235dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80235de:	2300      	movs	r3, #0
 80235e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80235e2:	2302      	movs	r3, #2
 80235e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80235e6:	f107 031c 	add.w	r3, r7, #28
 80235ea:	4619      	mov	r1, r3
 80235ec:	482d      	ldr	r0, [pc, #180]	; (80236a4 <HAL_TIM_MspPostInit+0x198>)
 80235ee:	f001 fc05 	bl	8024dfc <HAL_GPIO_Init>
}
 80235f2:	e048      	b.n	8023686 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 80235f4:	687b      	ldr	r3, [r7, #4]
 80235f6:	681b      	ldr	r3, [r3, #0]
 80235f8:	4a2b      	ldr	r2, [pc, #172]	; (80236a8 <HAL_TIM_MspPostInit+0x19c>)
 80235fa:	4293      	cmp	r3, r2
 80235fc:	d11f      	bne.n	802363e <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80235fe:	2300      	movs	r3, #0
 8023600:	60fb      	str	r3, [r7, #12]
 8023602:	4b24      	ldr	r3, [pc, #144]	; (8023694 <HAL_TIM_MspPostInit+0x188>)
 8023604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023606:	4a23      	ldr	r2, [pc, #140]	; (8023694 <HAL_TIM_MspPostInit+0x188>)
 8023608:	f043 0302 	orr.w	r3, r3, #2
 802360c:	6313      	str	r3, [r2, #48]	; 0x30
 802360e:	4b21      	ldr	r3, [pc, #132]	; (8023694 <HAL_TIM_MspPostInit+0x188>)
 8023610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023612:	f003 0302 	and.w	r3, r3, #2
 8023616:	60fb      	str	r3, [r7, #12]
 8023618:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 802361a:	f44f 7300 	mov.w	r3, #512	; 0x200
 802361e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023620:	2302      	movs	r3, #2
 8023622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023624:	2300      	movs	r3, #0
 8023626:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023628:	2300      	movs	r3, #0
 802362a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 802362c:	2303      	movs	r3, #3
 802362e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023630:	f107 031c 	add.w	r3, r7, #28
 8023634:	4619      	mov	r1, r3
 8023636:	481b      	ldr	r0, [pc, #108]	; (80236a4 <HAL_TIM_MspPostInit+0x198>)
 8023638:	f001 fbe0 	bl	8024dfc <HAL_GPIO_Init>
}
 802363c:	e023      	b.n	8023686 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 802363e:	687b      	ldr	r3, [r7, #4]
 8023640:	681b      	ldr	r3, [r3, #0]
 8023642:	4a1a      	ldr	r2, [pc, #104]	; (80236ac <HAL_TIM_MspPostInit+0x1a0>)
 8023644:	4293      	cmp	r3, r2
 8023646:	d11e      	bne.n	8023686 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023648:	2300      	movs	r3, #0
 802364a:	60bb      	str	r3, [r7, #8]
 802364c:	4b11      	ldr	r3, [pc, #68]	; (8023694 <HAL_TIM_MspPostInit+0x188>)
 802364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023650:	4a10      	ldr	r2, [pc, #64]	; (8023694 <HAL_TIM_MspPostInit+0x188>)
 8023652:	f043 0302 	orr.w	r3, r3, #2
 8023656:	6313      	str	r3, [r2, #48]	; 0x30
 8023658:	4b0e      	ldr	r3, [pc, #56]	; (8023694 <HAL_TIM_MspPostInit+0x188>)
 802365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802365c:	f003 0302 	and.w	r3, r3, #2
 8023660:	60bb      	str	r3, [r7, #8]
 8023662:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8023664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8023668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802366a:	2302      	movs	r3, #2
 802366c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802366e:	2300      	movs	r3, #0
 8023670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023672:	2300      	movs	r3, #0
 8023674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8023676:	2309      	movs	r3, #9
 8023678:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802367a:	f107 031c 	add.w	r3, r7, #28
 802367e:	4619      	mov	r1, r3
 8023680:	4808      	ldr	r0, [pc, #32]	; (80236a4 <HAL_TIM_MspPostInit+0x198>)
 8023682:	f001 fbbb 	bl	8024dfc <HAL_GPIO_Init>
}
 8023686:	bf00      	nop
 8023688:	3730      	adds	r7, #48	; 0x30
 802368a:	46bd      	mov	sp, r7
 802368c:	bd80      	pop	{r7, pc}
 802368e:	bf00      	nop
 8023690:	40010000 	.word	0x40010000
 8023694:	40023800 	.word	0x40023800
 8023698:	40020000 	.word	0x40020000
 802369c:	40000400 	.word	0x40000400
 80236a0:	40020800 	.word	0x40020800
 80236a4:	40020400 	.word	0x40020400
 80236a8:	40014800 	.word	0x40014800
 80236ac:	40001800 	.word	0x40001800

080236b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80236b0:	b480      	push	{r7}
 80236b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80236b4:	e7fe      	b.n	80236b4 <NMI_Handler+0x4>

080236b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80236b6:	b480      	push	{r7}
 80236b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80236ba:	e7fe      	b.n	80236ba <HardFault_Handler+0x4>

080236bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80236bc:	b480      	push	{r7}
 80236be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80236c0:	e7fe      	b.n	80236c0 <MemManage_Handler+0x4>

080236c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80236c2:	b480      	push	{r7}
 80236c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80236c6:	e7fe      	b.n	80236c6 <BusFault_Handler+0x4>

080236c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80236c8:	b480      	push	{r7}
 80236ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80236cc:	e7fe      	b.n	80236cc <UsageFault_Handler+0x4>

080236ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80236ce:	b480      	push	{r7}
 80236d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80236d2:	bf00      	nop
 80236d4:	46bd      	mov	sp, r7
 80236d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236da:	4770      	bx	lr

080236dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80236dc:	b480      	push	{r7}
 80236de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80236e0:	bf00      	nop
 80236e2:	46bd      	mov	sp, r7
 80236e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236e8:	4770      	bx	lr

080236ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80236ea:	b480      	push	{r7}
 80236ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80236ee:	bf00      	nop
 80236f0:	46bd      	mov	sp, r7
 80236f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236f6:	4770      	bx	lr

080236f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80236f8:	b580      	push	{r7, lr}
 80236fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80236fc:	f000 fac8 	bl	8023c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8023700:	bf00      	nop
 8023702:	bd80      	pop	{r7, pc}

08023704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8023704:	b580      	push	{r7, lr}
 8023706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8023708:	4802      	ldr	r0, [pc, #8]	; (8023714 <TIM2_IRQHandler+0x10>)
 802370a:	f002 fc88 	bl	802601e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 802370e:	bf00      	nop
 8023710:	bd80      	pop	{r7, pc}
 8023712:	bf00      	nop
 8023714:	20000864 	.word	0x20000864

08023718 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8023718:	b580      	push	{r7, lr}
 802371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 802371c:	4802      	ldr	r0, [pc, #8]	; (8023728 <TIM5_IRQHandler+0x10>)
 802371e:	f002 fc7e 	bl	802601e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8023722:	bf00      	nop
 8023724:	bd80      	pop	{r7, pc}
 8023726:	bf00      	nop
 8023728:	20000624 	.word	0x20000624

0802372c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 802372c:	b580      	push	{r7, lr}
 802372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8023730:	4802      	ldr	r0, [pc, #8]	; (802373c <TIM6_DAC_IRQHandler+0x10>)
 8023732:	f002 fc74 	bl	802601e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8023736:	bf00      	nop
 8023738:	bd80      	pop	{r7, pc}
 802373a:	bf00      	nop
 802373c:	200007e4 	.word	0x200007e4

08023740 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8023740:	b580      	push	{r7, lr}
 8023742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8023744:	4802      	ldr	r0, [pc, #8]	; (8023750 <TIM7_IRQHandler+0x10>)
 8023746:	f002 fc6a 	bl	802601e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 802374a:	bf00      	nop
 802374c:	bd80      	pop	{r7, pc}
 802374e:	bf00      	nop
 8023750:	200008e4 	.word	0x200008e4

08023754 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8023754:	b580      	push	{r7, lr}
 8023756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8023758:	4802      	ldr	r0, [pc, #8]	; (8023764 <DMA2_Stream0_IRQHandler+0x10>)
 802375a:	f001 f8e7 	bl	802492c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 802375e:	bf00      	nop
 8023760:	bd80      	pop	{r7, pc}
 8023762:	bf00      	nop
 8023764:	20000784 	.word	0x20000784

08023768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8023768:	b480      	push	{r7}
 802376a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802376c:	4b08      	ldr	r3, [pc, #32]	; (8023790 <SystemInit+0x28>)
 802376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023772:	4a07      	ldr	r2, [pc, #28]	; (8023790 <SystemInit+0x28>)
 8023774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8023778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 802377c:	4b04      	ldr	r3, [pc, #16]	; (8023790 <SystemInit+0x28>)
 802377e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8023782:	609a      	str	r2, [r3, #8]
#endif
}
 8023784:	bf00      	nop
 8023786:	46bd      	mov	sp, r7
 8023788:	f85d 7b04 	ldr.w	r7, [sp], #4
 802378c:	4770      	bx	lr
 802378e:	bf00      	nop
 8023790:	e000ed00 	.word	0xe000ed00

08023794 <_ZN4TestC1EP7EncoderP3LedP10LineSensorP9LineTraceP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>:
#include "test.hpp"

#ifdef TEST_MODE
Test::Test(Encoder *encoder,
 8023794:	b480      	push	{r7}
 8023796:	b085      	sub	sp, #20
 8023798:	af00      	add	r7, sp, #0
 802379a:	60f8      	str	r0, [r7, #12]
 802379c:	60b9      	str	r1, [r7, #8]
 802379e:	607a      	str	r2, [r7, #4]
 80237a0:	603b      	str	r3, [r7, #0]
           Motor *motor,
           RotarySwitch *rotary_switch,
           SideSensor *side_sensor,
           VelocityControl *velocity_control)
{
    encoder_ = encoder;
 80237a2:	68fb      	ldr	r3, [r7, #12]
 80237a4:	68ba      	ldr	r2, [r7, #8]
 80237a6:	601a      	str	r2, [r3, #0]
    led_ = led;
 80237a8:	68fb      	ldr	r3, [r7, #12]
 80237aa:	687a      	ldr	r2, [r7, #4]
 80237ac:	605a      	str	r2, [r3, #4]
    line_sensor_ = line_sensor;
 80237ae:	68fb      	ldr	r3, [r7, #12]
 80237b0:	683a      	ldr	r2, [r7, #0]
 80237b2:	609a      	str	r2, [r3, #8]
    line_trace_ = line_trace;
 80237b4:	68fb      	ldr	r3, [r7, #12]
 80237b6:	69ba      	ldr	r2, [r7, #24]
 80237b8:	60da      	str	r2, [r3, #12]
    motor_ = motor;
 80237ba:	68fb      	ldr	r3, [r7, #12]
 80237bc:	69fa      	ldr	r2, [r7, #28]
 80237be:	611a      	str	r2, [r3, #16]
    rotary_switch_ = rotary_switch;
 80237c0:	68fb      	ldr	r3, [r7, #12]
 80237c2:	6a3a      	ldr	r2, [r7, #32]
 80237c4:	615a      	str	r2, [r3, #20]
    side_sensor_ = side_sensor;
 80237c6:	68fb      	ldr	r3, [r7, #12]
 80237c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80237ca:	619a      	str	r2, [r3, #24]
    velocity_control_ = velocity_control;
 80237cc:	68fb      	ldr	r3, [r7, #12]
 80237ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80237d0:	61da      	str	r2, [r3, #28]
}
 80237d2:	68fb      	ldr	r3, [r7, #12]
 80237d4:	4618      	mov	r0, r3
 80237d6:	3714      	adds	r7, #20
 80237d8:	46bd      	mov	sp, r7
 80237da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237de:	4770      	bx	lr

080237e0 <_ZN4Test4InitEv>:

void Test::Init()
{
 80237e0:	b580      	push	{r7, lr}
 80237e2:	b082      	sub	sp, #8
 80237e4:	af00      	add	r7, sp, #0
 80237e6:	6078      	str	r0, [r7, #4]
    encoder_->Init();
 80237e8:	687b      	ldr	r3, [r7, #4]
 80237ea:	681b      	ldr	r3, [r3, #0]
 80237ec:	4618      	mov	r0, r3
 80237ee:	f7fd fa65 	bl	8020cbc <_ZN7Encoder4InitEv>
    line_sensor_->Init();
 80237f2:	687b      	ldr	r3, [r7, #4]
 80237f4:	689b      	ldr	r3, [r3, #8]
 80237f6:	4618      	mov	r0, r3
 80237f8:	f7fd fbfe 	bl	8020ff8 <_ZN10LineSensor4InitEv>
    motor_->Init();
 80237fc:	687b      	ldr	r3, [r7, #4]
 80237fe:	691b      	ldr	r3, [r3, #16]
 8023800:	4618      	mov	r0, r3
 8023802:	f7fe feed 	bl	80225e0 <_ZN5Motor4InitEv>

    led_->Blink(3, 'Y', 'M');
 8023806:	687b      	ldr	r3, [r7, #4]
 8023808:	6858      	ldr	r0, [r3, #4]
 802380a:	234d      	movs	r3, #77	; 0x4d
 802380c:	2259      	movs	r2, #89	; 0x59
 802380e:	2103      	movs	r1, #3
 8023810:	f7fd fb84 	bl	8020f1c <_ZN3Led5BlinkEhcc>
    led_->ColorOrder('X');
 8023814:	687b      	ldr	r3, [r7, #4]
 8023816:	685b      	ldr	r3, [r3, #4]
 8023818:	2158      	movs	r1, #88	; 0x58
 802381a:	4618      	mov	r0, r3
 802381c:	f7fd faa2 	bl	8020d64 <_ZN3Led10ColorOrderEc>
    HAL_TIM_Base_Start_IT(&htim7);
 8023820:	4804      	ldr	r0, [pc, #16]	; (8023834 <_ZN4Test4InitEv+0x54>)
 8023822:	f002 faa6 	bl	8025d72 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 8023826:	4804      	ldr	r0, [pc, #16]	; (8023838 <_ZN4Test4InitEv+0x58>)
 8023828:	f002 faa3 	bl	8025d72 <HAL_TIM_Base_Start_IT>
}
 802382c:	bf00      	nop
 802382e:	3708      	adds	r7, #8
 8023830:	46bd      	mov	sp, r7
 8023832:	bd80      	pop	{r7, pc}
 8023834:	200008e4 	.word	0x200008e4
 8023838:	200007e4 	.word	0x200007e4

0802383c <_ZN4Test6Timer7Ev>:

void Test::Timer7()
{
 802383c:	b580      	push	{r7, lr}
 802383e:	b082      	sub	sp, #8
 8023840:	af00      	add	r7, sp, #0
 8023842:	6078      	str	r0, [r7, #4]
    line_sensor_->StoreConsecutiveBuff();
 8023844:	687b      	ldr	r3, [r7, #4]
 8023846:	689b      	ldr	r3, [r3, #8]
 8023848:	4618      	mov	r0, r3
 802384a:	f7fd fc0f 	bl	802106c <_ZN10LineSensor20StoreConsecutiveBuffEv>
}
 802384e:	bf00      	nop
 8023850:	3708      	adds	r7, #8
 8023852:	46bd      	mov	sp, r7
 8023854:	bd80      	pop	{r7, pc}

08023856 <_ZN4Test6Timer6Ev>:

void Test::Timer6()
{
 8023856:	b580      	push	{r7, lr}
 8023858:	b082      	sub	sp, #8
 802385a:	af00      	add	r7, sp, #0
 802385c:	6078      	str	r0, [r7, #4]
    TestLineSensor();
 802385e:	6878      	ldr	r0, [r7, #4]
 8023860:	f000 f80a 	bl	8023878 <_ZN4Test14TestLineSensorEv>
    TestSideSensor();
 8023864:	6878      	ldr	r0, [r7, #4]
 8023866:	f000 f84d 	bl	8023904 <_ZN4Test14TestSideSensorEv>
    TestMotor();
 802386a:	6878      	ldr	r0, [r7, #4]
 802386c:	f000 f85c 	bl	8023928 <_ZN4Test9TestMotorEv>
}
 8023870:	bf00      	nop
 8023872:	3708      	adds	r7, #8
 8023874:	46bd      	mov	sp, r7
 8023876:	bd80      	pop	{r7, pc}

08023878 <_ZN4Test14TestLineSensorEv>:

void Test::TestLineSensor()
{
 8023878:	b580      	push	{r7, lr}
 802387a:	b082      	sub	sp, #8
 802387c:	af00      	add	r7, sp, #0
 802387e:	6078      	str	r0, [r7, #4]
    line_sensor_->Update();
 8023880:	687b      	ldr	r3, [r7, #4]
 8023882:	689b      	ldr	r3, [r3, #8]
 8023884:	4618      	mov	r0, r3
 8023886:	f7fd fcf9 	bl	802127c <_ZN10LineSensor6UpdateEv>
    line_sensor_->MonitorLineBuff();
 802388a:	687b      	ldr	r3, [r7, #4]
 802388c:	689b      	ldr	r3, [r3, #8]
 802388e:	4618      	mov	r0, r3
 8023890:	f7fd fe9c 	bl	80215cc <_ZN10LineSensor15MonitorLineBuffEv>
    g_line_diff = line_sensor_->LeftRightDifference();
 8023894:	687b      	ldr	r3, [r7, #4]
 8023896:	689b      	ldr	r3, [r3, #8]
 8023898:	4618      	mov	r0, r3
 802389a:	f7fd fdd7 	bl	802144c <_ZN10LineSensor19LeftRightDifferenceEv>
 802389e:	eef0 7a40 	vmov.f32	s15, s0
 80238a2:	4b15      	ldr	r3, [pc, #84]	; (80238f8 <_ZN4Test14TestLineSensorEv+0x80>)
 80238a4:	edc3 7a00 	vstr	s15, [r3]
    g_line_emer = line_sensor_->GetEmergencyStopFlag();
 80238a8:	687b      	ldr	r3, [r7, #4]
 80238aa:	689b      	ldr	r3, [r3, #8]
 80238ac:	4618      	mov	r0, r3
 80238ae:	f7fd fe23 	bl	80214f8 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 80238b2:	4603      	mov	r3, r0
 80238b4:	461a      	mov	r2, r3
 80238b6:	4b11      	ldr	r3, [pc, #68]	; (80238fc <_ZN4Test14TestLineSensorEv+0x84>)
 80238b8:	701a      	strb	r2, [r3, #0]
    g_line_calib = line_sensor_->CheckCalibration();
 80238ba:	687b      	ldr	r3, [r7, #4]
 80238bc:	689b      	ldr	r3, [r3, #8]
 80238be:	4618      	mov	r0, r3
 80238c0:	f7fd fe28 	bl	8021514 <_ZN10LineSensor16CheckCalibrationEv>
 80238c4:	4603      	mov	r3, r0
 80238c6:	461a      	mov	r2, r3
 80238c8:	4b0d      	ldr	r3, [pc, #52]	; (8023900 <_ZN4Test14TestLineSensorEv+0x88>)
 80238ca:	701a      	strb	r2, [r3, #0]
    if(g_line_calib) led_->ColorOrder('X');
 80238cc:	4b0c      	ldr	r3, [pc, #48]	; (8023900 <_ZN4Test14TestLineSensorEv+0x88>)
 80238ce:	781b      	ldrb	r3, [r3, #0]
 80238d0:	2b00      	cmp	r3, #0
 80238d2:	d006      	beq.n	80238e2 <_ZN4Test14TestLineSensorEv+0x6a>
 80238d4:	687b      	ldr	r3, [r7, #4]
 80238d6:	685b      	ldr	r3, [r3, #4]
 80238d8:	2158      	movs	r1, #88	; 0x58
 80238da:	4618      	mov	r0, r3
 80238dc:	f7fd fa42 	bl	8020d64 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('R');
}
 80238e0:	e005      	b.n	80238ee <_ZN4Test14TestLineSensorEv+0x76>
    else led_->ColorOrder('R');
 80238e2:	687b      	ldr	r3, [r7, #4]
 80238e4:	685b      	ldr	r3, [r3, #4]
 80238e6:	2152      	movs	r1, #82	; 0x52
 80238e8:	4618      	mov	r0, r3
 80238ea:	f7fd fa3b 	bl	8020d64 <_ZN3Led10ColorOrderEc>
}
 80238ee:	bf00      	nop
 80238f0:	3708      	adds	r7, #8
 80238f2:	46bd      	mov	sp, r7
 80238f4:	bd80      	pop	{r7, pc}
 80238f6:	bf00      	nop
 80238f8:	20000070 	.word	0x20000070
 80238fc:	20000074 	.word	0x20000074
 8023900:	20000075 	.word	0x20000075

08023904 <_ZN4Test14TestSideSensorEv>:

void Test::TestSideSensor()
{
 8023904:	b580      	push	{r7, lr}
 8023906:	b082      	sub	sp, #8
 8023908:	af00      	add	r7, sp, #0
 802390a:	6078      	str	r0, [r7, #4]
    side_sensor_->Update();
 802390c:	687b      	ldr	r3, [r7, #4]
 802390e:	699b      	ldr	r3, [r3, #24]
 8023910:	4618      	mov	r0, r3
 8023912:	f7ff f8df 	bl	8022ad4 <_ZN10SideSensor6UpdateEv>
    side_sensor_->Monitor();
 8023916:	687b      	ldr	r3, [r7, #4]
 8023918:	699b      	ldr	r3, [r3, #24]
 802391a:	4618      	mov	r0, r3
 802391c:	f7ff faaa 	bl	8022e74 <_ZN10SideSensor7MonitorEv>
}
 8023920:	bf00      	nop
 8023922:	3708      	adds	r7, #8
 8023924:	46bd      	mov	sp, r7
 8023926:	bd80      	pop	{r7, pc}

08023928 <_ZN4Test9TestMotorEv>:

void Test::TestMotor()
{
 8023928:	b580      	push	{r7, lr}
 802392a:	b082      	sub	sp, #8
 802392c:	af00      	add	r7, sp, #0
 802392e:	6078      	str	r0, [r7, #4]
    g_switch_state = rotary_switch_->State();
 8023930:	687b      	ldr	r3, [r7, #4]
 8023932:	695b      	ldr	r3, [r3, #20]
 8023934:	4618      	mov	r0, r3
 8023936:	f7fe ffbd 	bl	80228b4 <_ZN12RotarySwitch5StateEv>
 802393a:	4603      	mov	r3, r0
 802393c:	461a      	mov	r2, r3
 802393e:	4b31      	ldr	r3, [pc, #196]	; (8023a04 <_ZN4Test9TestMotorEv+0xdc>)
 8023940:	701a      	strb	r2, [r3, #0]

    switch(g_switch_state)
 8023942:	4b30      	ldr	r3, [pc, #192]	; (8023a04 <_ZN4Test9TestMotorEv+0xdc>)
 8023944:	781b      	ldrb	r3, [r3, #0]
 8023946:	2b0f      	cmp	r3, #15
 8023948:	d84e      	bhi.n	80239e8 <_ZN4Test9TestMotorEv+0xc0>
 802394a:	a201      	add	r2, pc, #4	; (adr r2, 8023950 <_ZN4Test9TestMotorEv+0x28>)
 802394c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023950:	08023999 	.word	0x08023999
 8023954:	080239ad 	.word	0x080239ad
 8023958:	080239e9 	.word	0x080239e9
 802395c:	080239c1 	.word	0x080239c1
 8023960:	080239d5 	.word	0x080239d5
 8023964:	080239e9 	.word	0x080239e9
 8023968:	080239e9 	.word	0x080239e9
 802396c:	080239e9 	.word	0x080239e9
 8023970:	080239e9 	.word	0x080239e9
 8023974:	080239e9 	.word	0x080239e9
 8023978:	080239e9 	.word	0x080239e9
 802397c:	080239e9 	.word	0x080239e9
 8023980:	080239e9 	.word	0x080239e9
 8023984:	080239e9 	.word	0x080239e9
 8023988:	080239e9 	.word	0x080239e9
 802398c:	08023991 	.word	0x08023991
    {
        case 0x0F: TestLineTrace(); break;
 8023990:	6878      	ldr	r0, [r7, #4]
 8023992:	f000 f841 	bl	8023a18 <_ZN4Test13TestLineTraceEv>
 8023996:	e031      	b.n	80239fc <_ZN4Test9TestMotorEv+0xd4>
        case 0x00: motor_->Drive(0.2, 0);   break;
 8023998:	687b      	ldr	r3, [r7, #4]
 802399a:	691b      	ldr	r3, [r3, #16]
 802399c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8023a08 <_ZN4Test9TestMotorEv+0xe0>
 80239a0:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8023a0c <_ZN4Test9TestMotorEv+0xe4>
 80239a4:	4618      	mov	r0, r3
 80239a6:	f7fe fe4b 	bl	8022640 <_ZN5Motor5DriveEff>
 80239aa:	e027      	b.n	80239fc <_ZN4Test9TestMotorEv+0xd4>
        case 0x01: motor_->Drive(-0.2, 0);  break;
 80239ac:	687b      	ldr	r3, [r7, #4]
 80239ae:	691b      	ldr	r3, [r3, #16]
 80239b0:	eddf 0a15 	vldr	s1, [pc, #84]	; 8023a08 <_ZN4Test9TestMotorEv+0xe0>
 80239b4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8023a10 <_ZN4Test9TestMotorEv+0xe8>
 80239b8:	4618      	mov	r0, r3
 80239ba:	f7fe fe41 	bl	8022640 <_ZN5Motor5DriveEff>
 80239be:	e01d      	b.n	80239fc <_ZN4Test9TestMotorEv+0xd4>
        case 0x03: motor_->Drive(1.0, 0);   break;
 80239c0:	687b      	ldr	r3, [r7, #4]
 80239c2:	691b      	ldr	r3, [r3, #16]
 80239c4:	eddf 0a10 	vldr	s1, [pc, #64]	; 8023a08 <_ZN4Test9TestMotorEv+0xe0>
 80239c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80239cc:	4618      	mov	r0, r3
 80239ce:	f7fe fe37 	bl	8022640 <_ZN5Motor5DriveEff>
 80239d2:	e013      	b.n	80239fc <_ZN4Test9TestMotorEv+0xd4>
        case 0x04: motor_->Drive(0.5, 0.6); break;
 80239d4:	687b      	ldr	r3, [r7, #4]
 80239d6:	691b      	ldr	r3, [r3, #16]
 80239d8:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8023a14 <_ZN4Test9TestMotorEv+0xec>
 80239dc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80239e0:	4618      	mov	r0, r3
 80239e2:	f7fe fe2d 	bl	8022640 <_ZN5Motor5DriveEff>
 80239e6:	e009      	b.n	80239fc <_ZN4Test9TestMotorEv+0xd4>
        default:   motor_->Drive(0, 0);     break;
 80239e8:	687b      	ldr	r3, [r7, #4]
 80239ea:	691b      	ldr	r3, [r3, #16]
 80239ec:	eddf 0a06 	vldr	s1, [pc, #24]	; 8023a08 <_ZN4Test9TestMotorEv+0xe0>
 80239f0:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8023a08 <_ZN4Test9TestMotorEv+0xe0>
 80239f4:	4618      	mov	r0, r3
 80239f6:	f7fe fe23 	bl	8022640 <_ZN5Motor5DriveEff>
 80239fa:	bf00      	nop
    }
}
 80239fc:	bf00      	nop
 80239fe:	3708      	adds	r7, #8
 8023a00:	46bd      	mov	sp, r7
 8023a02:	bd80      	pop	{r7, pc}
 8023a04:	2000025c 	.word	0x2000025c
 8023a08:	00000000 	.word	0x00000000
 8023a0c:	3e4ccccd 	.word	0x3e4ccccd
 8023a10:	be4ccccd 	.word	0xbe4ccccd
 8023a14:	3f19999a 	.word	0x3f19999a

08023a18 <_ZN4Test13TestLineTraceEv>:

void Test::TestLineTrace()
{
 8023a18:	b580      	push	{r7, lr}
 8023a1a:	b084      	sub	sp, #16
 8023a1c:	af00      	add	r7, sp, #0
 8023a1e:	6078      	str	r0, [r7, #4]
    float rotat = line_trace_->LineTraceOnly();
 8023a20:	687b      	ldr	r3, [r7, #4]
 8023a22:	68db      	ldr	r3, [r3, #12]
 8023a24:	4618      	mov	r0, r3
 8023a26:	f7fd fe02 	bl	802162e <_ZN9LineTrace13LineTraceOnlyEv>
 8023a2a:	ed87 0a03 	vstr	s0, [r7, #12]

    motor_->Drive(0, rotat);
 8023a2e:	687b      	ldr	r3, [r7, #4]
 8023a30:	691b      	ldr	r3, [r3, #16]
 8023a32:	edd7 0a03 	vldr	s1, [r7, #12]
 8023a36:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8023a48 <_ZN4Test13TestLineTraceEv+0x30>
 8023a3a:	4618      	mov	r0, r3
 8023a3c:	f7fe fe00 	bl	8022640 <_ZN5Motor5DriveEff>
}
 8023a40:	bf00      	nop
 8023a42:	3710      	adds	r7, #16
 8023a44:	46bd      	mov	sp, r7
 8023a46:	bd80      	pop	{r7, pc}
 8023a48:	00000000 	.word	0x00000000

08023a4c <_ZN15VelocityControlC1EP7Encoder>:
#include "velocity_control.hpp"
#include "declare_extern.h"

VelocityControl::VelocityControl(Encoder *encoder) : integral_error_(0)
 8023a4c:	b480      	push	{r7}
 8023a4e:	b083      	sub	sp, #12
 8023a50:	af00      	add	r7, sp, #0
 8023a52:	6078      	str	r0, [r7, #4]
 8023a54:	6039      	str	r1, [r7, #0]
 8023a56:	687b      	ldr	r3, [r7, #4]
 8023a58:	f04f 0200 	mov.w	r2, #0
 8023a5c:	601a      	str	r2, [r3, #0]
{
    encoder_ = encoder;
 8023a5e:	687b      	ldr	r3, [r7, #4]
 8023a60:	683a      	ldr	r2, [r7, #0]
 8023a62:	605a      	str	r2, [r3, #4]
}
 8023a64:	687b      	ldr	r3, [r7, #4]
 8023a66:	4618      	mov	r0, r3
 8023a68:	370c      	adds	r7, #12
 8023a6a:	46bd      	mov	sp, r7
 8023a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a70:	4770      	bx	lr
	...

08023a74 <Init>:
    &velocity_control
);
#endif // TEST_MODE

void Init()
{
 8023a74:	b580      	push	{r7, lr}
 8023a76:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Init();
#else // TEST_MODE
    test.Init();
 8023a78:	4802      	ldr	r0, [pc, #8]	; (8023a84 <Init+0x10>)
 8023a7a:	f7ff feb1 	bl	80237e0 <_ZN4Test4InitEv>
#endif // TEST_MODE
}
 8023a7e:	bf00      	nop
 8023a80:	bd80      	pop	{r7, pc}
 8023a82:	bf00      	nop
 8023a84:	20000530 	.word	0x20000530

08023a88 <InterruptTim7>:

void InterruptTim7()
{
 8023a88:	b580      	push	{r7, lr}
 8023a8a:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer7();
#else // TEST_MODE
    test.Timer7();
 8023a8c:	4804      	ldr	r0, [pc, #16]	; (8023aa0 <InterruptTim7+0x18>)
 8023a8e:	f7ff fed5 	bl	802383c <_ZN4Test6Timer7Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim7++;
 8023a92:	4b04      	ldr	r3, [pc, #16]	; (8023aa4 <InterruptTim7+0x1c>)
 8023a94:	681b      	ldr	r3, [r3, #0]
 8023a96:	3301      	adds	r3, #1
 8023a98:	4a02      	ldr	r2, [pc, #8]	; (8023aa4 <InterruptTim7+0x1c>)
 8023a9a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8023a9c:	bf00      	nop
 8023a9e:	bd80      	pop	{r7, pc}
 8023aa0:	20000530 	.word	0x20000530
 8023aa4:	20000250 	.word	0x20000250

08023aa8 <InterruptTim6>:

void InterruptTim6()
{
 8023aa8:	b580      	push	{r7, lr}
 8023aaa:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.RunMode();
#else // TEST_MODE
    test.Timer6();
 8023aac:	4804      	ldr	r0, [pc, #16]	; (8023ac0 <InterruptTim6+0x18>)
 8023aae:	f7ff fed2 	bl	8023856 <_ZN4Test6Timer6Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim6++;
 8023ab2:	4b04      	ldr	r3, [pc, #16]	; (8023ac4 <InterruptTim6+0x1c>)
 8023ab4:	681b      	ldr	r3, [r3, #0]
 8023ab6:	3301      	adds	r3, #1
 8023ab8:	4a02      	ldr	r2, [pc, #8]	; (8023ac4 <InterruptTim6+0x1c>)
 8023aba:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8023abc:	bf00      	nop
 8023abe:	bd80      	pop	{r7, pc}
 8023ac0:	20000530 	.word	0x20000530
 8023ac4:	20000254 	.word	0x20000254

08023ac8 <InterruptTim2>:

void InterruptTim2()
{
 8023ac8:	b480      	push	{r7}
 8023aca:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.UpdateRunMode();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim2++;
 8023acc:	4b04      	ldr	r3, [pc, #16]	; (8023ae0 <InterruptTim2+0x18>)
 8023ace:	681b      	ldr	r3, [r3, #0]
 8023ad0:	3301      	adds	r3, #1
 8023ad2:	4a03      	ldr	r2, [pc, #12]	; (8023ae0 <InterruptTim2+0x18>)
 8023ad4:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
 8023ad6:	bf00      	nop
 8023ad8:	46bd      	mov	sp, r7
 8023ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ade:	4770      	bx	lr
 8023ae0:	20000258 	.word	0x20000258

08023ae4 <_Z41__static_initialization_and_destruction_0ii>:
 8023ae4:	b580      	push	{r7, lr}
 8023ae6:	b088      	sub	sp, #32
 8023ae8:	af06      	add	r7, sp, #24
 8023aea:	6078      	str	r0, [r7, #4]
 8023aec:	6039      	str	r1, [r7, #0]
 8023aee:	687b      	ldr	r3, [r7, #4]
 8023af0:	2b01      	cmp	r3, #1
 8023af2:	d12e      	bne.n	8023b52 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8023af4:	683b      	ldr	r3, [r7, #0]
 8023af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023afa:	4293      	cmp	r3, r2
 8023afc:	d129      	bne.n	8023b52 <_Z41__static_initialization_and_destruction_0ii+0x6e>
Encoder encoder;
 8023afe:	4817      	ldr	r0, [pc, #92]	; (8023b5c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8023b00:	f7fd f8c4 	bl	8020c8c <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 8023b04:	4816      	ldr	r0, [pc, #88]	; (8023b60 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8023b06:	f7fd f90b 	bl	8020d20 <_ZN8Iim42652C1Ev>
Led led;
 8023b0a:	4816      	ldr	r0, [pc, #88]	; (8023b64 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8023b0c:	f7fd f919 	bl	8020d42 <_ZN3LedC1Ev>
LineSensor line_sensor;
 8023b10:	4815      	ldr	r0, [pc, #84]	; (8023b68 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8023b12:	f7fd fa30 	bl	8020f76 <_ZN10LineSensorC1Ev>
LineTrace line_trace(&line_sensor);
 8023b16:	4914      	ldr	r1, [pc, #80]	; (8023b68 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8023b18:	4814      	ldr	r0, [pc, #80]	; (8023b6c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8023b1a:	f7fd fd75 	bl	8021608 <_ZN9LineTraceC1EP10LineSensor>
Logger logger;
 8023b1e:	4814      	ldr	r0, [pc, #80]	; (8023b70 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8023b20:	f7fd fe72 	bl	8021808 <_ZN6LoggerC1Ev>
SideSensor side_sensor;
 8023b24:	4813      	ldr	r0, [pc, #76]	; (8023b74 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8023b26:	f7fe ff15 	bl	8022954 <_ZN10SideSensorC1Ev>
VelocityControl velocity_control(&encoder);
 8023b2a:	490c      	ldr	r1, [pc, #48]	; (8023b5c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8023b2c:	4812      	ldr	r0, [pc, #72]	; (8023b78 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8023b2e:	f7ff ff8d 	bl	8023a4c <_ZN15VelocityControlC1EP7Encoder>
);
 8023b32:	4b11      	ldr	r3, [pc, #68]	; (8023b78 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8023b34:	9304      	str	r3, [sp, #16]
 8023b36:	4b0f      	ldr	r3, [pc, #60]	; (8023b74 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8023b38:	9303      	str	r3, [sp, #12]
 8023b3a:	4b10      	ldr	r3, [pc, #64]	; (8023b7c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8023b3c:	9302      	str	r3, [sp, #8]
 8023b3e:	4b10      	ldr	r3, [pc, #64]	; (8023b80 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8023b40:	9301      	str	r3, [sp, #4]
 8023b42:	4b0a      	ldr	r3, [pc, #40]	; (8023b6c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8023b44:	9300      	str	r3, [sp, #0]
 8023b46:	4b08      	ldr	r3, [pc, #32]	; (8023b68 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8023b48:	4a06      	ldr	r2, [pc, #24]	; (8023b64 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8023b4a:	4904      	ldr	r1, [pc, #16]	; (8023b5c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8023b4c:	480d      	ldr	r0, [pc, #52]	; (8023b84 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8023b4e:	f7ff fe21 	bl	8023794 <_ZN4TestC1EP7EncoderP3LedP10LineSensorP9LineTraceP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>
 8023b52:	bf00      	nop
 8023b54:	3708      	adds	r7, #8
 8023b56:	46bd      	mov	sp, r7
 8023b58:	bd80      	pop	{r7, pc}
 8023b5a:	bf00      	nop
 8023b5c:	20000260 	.word	0x20000260
 8023b60:	20000270 	.word	0x20000270
 8023b64:	20000278 	.word	0x20000278
 8023b68:	2000027c 	.word	0x2000027c
 8023b6c:	20000408 	.word	0x20000408
 8023b70:	20000410 	.word	0x20000410
 8023b74:	20000520 	.word	0x20000520
 8023b78:	20000528 	.word	0x20000528
 8023b7c:	2000051c 	.word	0x2000051c
 8023b80:	20000518 	.word	0x20000518
 8023b84:	20000530 	.word	0x20000530

08023b88 <_GLOBAL__sub_I_encoder>:
 8023b88:	b580      	push	{r7, lr}
 8023b8a:	af00      	add	r7, sp, #0
 8023b8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8023b90:	2001      	movs	r0, #1
 8023b92:	f7ff ffa7 	bl	8023ae4 <_Z41__static_initialization_and_destruction_0ii>
 8023b96:	bd80      	pop	{r7, pc}

08023b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8023b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8023bd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8023b9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8023b9e:	e003      	b.n	8023ba8 <LoopCopyDataInit>

08023ba0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8023ba0:	4b0c      	ldr	r3, [pc, #48]	; (8023bd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8023ba2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8023ba4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8023ba6:	3104      	adds	r1, #4

08023ba8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8023ba8:	480b      	ldr	r0, [pc, #44]	; (8023bd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8023baa:	4b0c      	ldr	r3, [pc, #48]	; (8023bdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8023bac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8023bae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8023bb0:	d3f6      	bcc.n	8023ba0 <CopyDataInit>
  ldr  r2, =_sbss
 8023bb2:	4a0b      	ldr	r2, [pc, #44]	; (8023be0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8023bb4:	e002      	b.n	8023bbc <LoopFillZerobss>

08023bb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8023bb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8023bb8:	f842 3b04 	str.w	r3, [r2], #4

08023bbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8023bbc:	4b09      	ldr	r3, [pc, #36]	; (8023be4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8023bbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8023bc0:	d3f9      	bcc.n	8023bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8023bc2:	f7ff fdd1 	bl	8023768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8023bc6:	f003 f8db 	bl	8026d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8023bca:	f7fd fec5 	bl	8021958 <main>
  bx  lr    
 8023bce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8023bd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8023bd4:	08026e24 	.word	0x08026e24
  ldr  r0, =_sdata
 8023bd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8023bdc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8023be0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8023be4:	20000928 	.word	0x20000928

08023be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8023be8:	e7fe      	b.n	8023be8 <ADC_IRQHandler>
	...

08023bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8023bec:	b580      	push	{r7, lr}
 8023bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8023bf0:	4b0e      	ldr	r3, [pc, #56]	; (8023c2c <HAL_Init+0x40>)
 8023bf2:	681b      	ldr	r3, [r3, #0]
 8023bf4:	4a0d      	ldr	r2, [pc, #52]	; (8023c2c <HAL_Init+0x40>)
 8023bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8023bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8023bfc:	4b0b      	ldr	r3, [pc, #44]	; (8023c2c <HAL_Init+0x40>)
 8023bfe:	681b      	ldr	r3, [r3, #0]
 8023c00:	4a0a      	ldr	r2, [pc, #40]	; (8023c2c <HAL_Init+0x40>)
 8023c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8023c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8023c08:	4b08      	ldr	r3, [pc, #32]	; (8023c2c <HAL_Init+0x40>)
 8023c0a:	681b      	ldr	r3, [r3, #0]
 8023c0c:	4a07      	ldr	r2, [pc, #28]	; (8023c2c <HAL_Init+0x40>)
 8023c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8023c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8023c14:	2003      	movs	r0, #3
 8023c16:	f000 fd41 	bl	802469c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8023c1a:	2001      	movs	r0, #1
 8023c1c:	f000 f808 	bl	8023c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8023c20:	f7ff f9c6 	bl	8022fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8023c24:	2300      	movs	r3, #0
}
 8023c26:	4618      	mov	r0, r3
 8023c28:	bd80      	pop	{r7, pc}
 8023c2a:	bf00      	nop
 8023c2c:	40023c00 	.word	0x40023c00

08023c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8023c30:	b580      	push	{r7, lr}
 8023c32:	b082      	sub	sp, #8
 8023c34:	af00      	add	r7, sp, #0
 8023c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8023c38:	4b12      	ldr	r3, [pc, #72]	; (8023c84 <HAL_InitTick+0x54>)
 8023c3a:	681a      	ldr	r2, [r3, #0]
 8023c3c:	4b12      	ldr	r3, [pc, #72]	; (8023c88 <HAL_InitTick+0x58>)
 8023c3e:	781b      	ldrb	r3, [r3, #0]
 8023c40:	4619      	mov	r1, r3
 8023c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8023c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8023c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8023c4e:	4618      	mov	r0, r3
 8023c50:	f000 fd59 	bl	8024706 <HAL_SYSTICK_Config>
 8023c54:	4603      	mov	r3, r0
 8023c56:	2b00      	cmp	r3, #0
 8023c58:	d001      	beq.n	8023c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8023c5a:	2301      	movs	r3, #1
 8023c5c:	e00e      	b.n	8023c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8023c5e:	687b      	ldr	r3, [r7, #4]
 8023c60:	2b0f      	cmp	r3, #15
 8023c62:	d80a      	bhi.n	8023c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8023c64:	2200      	movs	r2, #0
 8023c66:	6879      	ldr	r1, [r7, #4]
 8023c68:	f04f 30ff 	mov.w	r0, #4294967295
 8023c6c:	f000 fd21 	bl	80246b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8023c70:	4a06      	ldr	r2, [pc, #24]	; (8023c8c <HAL_InitTick+0x5c>)
 8023c72:	687b      	ldr	r3, [r7, #4]
 8023c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8023c76:	2300      	movs	r3, #0
 8023c78:	e000      	b.n	8023c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8023c7a:	2301      	movs	r3, #1
}
 8023c7c:	4618      	mov	r0, r3
 8023c7e:	3708      	adds	r7, #8
 8023c80:	46bd      	mov	sp, r7
 8023c82:	bd80      	pop	{r7, pc}
 8023c84:	20000000 	.word	0x20000000
 8023c88:	20000008 	.word	0x20000008
 8023c8c:	20000004 	.word	0x20000004

08023c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8023c90:	b480      	push	{r7}
 8023c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8023c94:	4b06      	ldr	r3, [pc, #24]	; (8023cb0 <HAL_IncTick+0x20>)
 8023c96:	781b      	ldrb	r3, [r3, #0]
 8023c98:	461a      	mov	r2, r3
 8023c9a:	4b06      	ldr	r3, [pc, #24]	; (8023cb4 <HAL_IncTick+0x24>)
 8023c9c:	681b      	ldr	r3, [r3, #0]
 8023c9e:	4413      	add	r3, r2
 8023ca0:	4a04      	ldr	r2, [pc, #16]	; (8023cb4 <HAL_IncTick+0x24>)
 8023ca2:	6013      	str	r3, [r2, #0]
}
 8023ca4:	bf00      	nop
 8023ca6:	46bd      	mov	sp, r7
 8023ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cac:	4770      	bx	lr
 8023cae:	bf00      	nop
 8023cb0:	20000008 	.word	0x20000008
 8023cb4:	20000924 	.word	0x20000924

08023cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8023cb8:	b480      	push	{r7}
 8023cba:	af00      	add	r7, sp, #0
  return uwTick;
 8023cbc:	4b03      	ldr	r3, [pc, #12]	; (8023ccc <HAL_GetTick+0x14>)
 8023cbe:	681b      	ldr	r3, [r3, #0]
}
 8023cc0:	4618      	mov	r0, r3
 8023cc2:	46bd      	mov	sp, r7
 8023cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cc8:	4770      	bx	lr
 8023cca:	bf00      	nop
 8023ccc:	20000924 	.word	0x20000924

08023cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8023cd0:	b580      	push	{r7, lr}
 8023cd2:	b084      	sub	sp, #16
 8023cd4:	af00      	add	r7, sp, #0
 8023cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8023cd8:	f7ff ffee 	bl	8023cb8 <HAL_GetTick>
 8023cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8023cde:	687b      	ldr	r3, [r7, #4]
 8023ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8023ce2:	68fb      	ldr	r3, [r7, #12]
 8023ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023ce8:	d005      	beq.n	8023cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8023cea:	4b09      	ldr	r3, [pc, #36]	; (8023d10 <HAL_Delay+0x40>)
 8023cec:	781b      	ldrb	r3, [r3, #0]
 8023cee:	461a      	mov	r2, r3
 8023cf0:	68fb      	ldr	r3, [r7, #12]
 8023cf2:	4413      	add	r3, r2
 8023cf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8023cf6:	bf00      	nop
 8023cf8:	f7ff ffde 	bl	8023cb8 <HAL_GetTick>
 8023cfc:	4602      	mov	r2, r0
 8023cfe:	68bb      	ldr	r3, [r7, #8]
 8023d00:	1ad3      	subs	r3, r2, r3
 8023d02:	68fa      	ldr	r2, [r7, #12]
 8023d04:	429a      	cmp	r2, r3
 8023d06:	d8f7      	bhi.n	8023cf8 <HAL_Delay+0x28>
  {
  }
}
 8023d08:	bf00      	nop
 8023d0a:	3710      	adds	r7, #16
 8023d0c:	46bd      	mov	sp, r7
 8023d0e:	bd80      	pop	{r7, pc}
 8023d10:	20000008 	.word	0x20000008

08023d14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8023d14:	b580      	push	{r7, lr}
 8023d16:	b084      	sub	sp, #16
 8023d18:	af00      	add	r7, sp, #0
 8023d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8023d1c:	2300      	movs	r3, #0
 8023d1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8023d20:	687b      	ldr	r3, [r7, #4]
 8023d22:	2b00      	cmp	r3, #0
 8023d24:	d101      	bne.n	8023d2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8023d26:	2301      	movs	r3, #1
 8023d28:	e033      	b.n	8023d92 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8023d2a:	687b      	ldr	r3, [r7, #4]
 8023d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023d2e:	2b00      	cmp	r3, #0
 8023d30:	d109      	bne.n	8023d46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8023d32:	6878      	ldr	r0, [r7, #4]
 8023d34:	f7ff f964 	bl	8023000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8023d38:	687b      	ldr	r3, [r7, #4]
 8023d3a:	2200      	movs	r2, #0
 8023d3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8023d3e:	687b      	ldr	r3, [r7, #4]
 8023d40:	2200      	movs	r2, #0
 8023d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8023d46:	687b      	ldr	r3, [r7, #4]
 8023d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023d4a:	f003 0310 	and.w	r3, r3, #16
 8023d4e:	2b00      	cmp	r3, #0
 8023d50:	d118      	bne.n	8023d84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8023d52:	687b      	ldr	r3, [r7, #4]
 8023d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023d56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8023d5a:	f023 0302 	bic.w	r3, r3, #2
 8023d5e:	f043 0202 	orr.w	r2, r3, #2
 8023d62:	687b      	ldr	r3, [r7, #4]
 8023d64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8023d66:	6878      	ldr	r0, [r7, #4]
 8023d68:	f000 fa4a 	bl	8024200 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8023d6c:	687b      	ldr	r3, [r7, #4]
 8023d6e:	2200      	movs	r2, #0
 8023d70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8023d72:	687b      	ldr	r3, [r7, #4]
 8023d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023d76:	f023 0303 	bic.w	r3, r3, #3
 8023d7a:	f043 0201 	orr.w	r2, r3, #1
 8023d7e:	687b      	ldr	r3, [r7, #4]
 8023d80:	641a      	str	r2, [r3, #64]	; 0x40
 8023d82:	e001      	b.n	8023d88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8023d84:	2301      	movs	r3, #1
 8023d86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8023d88:	687b      	ldr	r3, [r7, #4]
 8023d8a:	2200      	movs	r2, #0
 8023d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8023d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8023d92:	4618      	mov	r0, r3
 8023d94:	3710      	adds	r7, #16
 8023d96:	46bd      	mov	sp, r7
 8023d98:	bd80      	pop	{r7, pc}
	...

08023d9c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8023d9c:	b580      	push	{r7, lr}
 8023d9e:	b086      	sub	sp, #24
 8023da0:	af00      	add	r7, sp, #0
 8023da2:	60f8      	str	r0, [r7, #12]
 8023da4:	60b9      	str	r1, [r7, #8]
 8023da6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8023da8:	2300      	movs	r3, #0
 8023daa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8023dac:	68fb      	ldr	r3, [r7, #12]
 8023dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023db2:	2b01      	cmp	r3, #1
 8023db4:	d101      	bne.n	8023dba <HAL_ADC_Start_DMA+0x1e>
 8023db6:	2302      	movs	r3, #2
 8023db8:	e0cc      	b.n	8023f54 <HAL_ADC_Start_DMA+0x1b8>
 8023dba:	68fb      	ldr	r3, [r7, #12]
 8023dbc:	2201      	movs	r2, #1
 8023dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8023dc2:	68fb      	ldr	r3, [r7, #12]
 8023dc4:	681b      	ldr	r3, [r3, #0]
 8023dc6:	689b      	ldr	r3, [r3, #8]
 8023dc8:	f003 0301 	and.w	r3, r3, #1
 8023dcc:	2b01      	cmp	r3, #1
 8023dce:	d018      	beq.n	8023e02 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8023dd0:	68fb      	ldr	r3, [r7, #12]
 8023dd2:	681b      	ldr	r3, [r3, #0]
 8023dd4:	689a      	ldr	r2, [r3, #8]
 8023dd6:	68fb      	ldr	r3, [r7, #12]
 8023dd8:	681b      	ldr	r3, [r3, #0]
 8023dda:	f042 0201 	orr.w	r2, r2, #1
 8023dde:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8023de0:	4b5e      	ldr	r3, [pc, #376]	; (8023f5c <HAL_ADC_Start_DMA+0x1c0>)
 8023de2:	681b      	ldr	r3, [r3, #0]
 8023de4:	4a5e      	ldr	r2, [pc, #376]	; (8023f60 <HAL_ADC_Start_DMA+0x1c4>)
 8023de6:	fba2 2303 	umull	r2, r3, r2, r3
 8023dea:	0c9a      	lsrs	r2, r3, #18
 8023dec:	4613      	mov	r3, r2
 8023dee:	005b      	lsls	r3, r3, #1
 8023df0:	4413      	add	r3, r2
 8023df2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8023df4:	e002      	b.n	8023dfc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8023df6:	693b      	ldr	r3, [r7, #16]
 8023df8:	3b01      	subs	r3, #1
 8023dfa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8023dfc:	693b      	ldr	r3, [r7, #16]
 8023dfe:	2b00      	cmp	r3, #0
 8023e00:	d1f9      	bne.n	8023df6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8023e02:	68fb      	ldr	r3, [r7, #12]
 8023e04:	681b      	ldr	r3, [r3, #0]
 8023e06:	689b      	ldr	r3, [r3, #8]
 8023e08:	f003 0301 	and.w	r3, r3, #1
 8023e0c:	2b01      	cmp	r3, #1
 8023e0e:	f040 80a0 	bne.w	8023f52 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8023e12:	68fb      	ldr	r3, [r7, #12]
 8023e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023e16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8023e1a:	f023 0301 	bic.w	r3, r3, #1
 8023e1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8023e22:	68fb      	ldr	r3, [r7, #12]
 8023e24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8023e26:	68fb      	ldr	r3, [r7, #12]
 8023e28:	681b      	ldr	r3, [r3, #0]
 8023e2a:	685b      	ldr	r3, [r3, #4]
 8023e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8023e30:	2b00      	cmp	r3, #0
 8023e32:	d007      	beq.n	8023e44 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8023e34:	68fb      	ldr	r3, [r7, #12]
 8023e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023e38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8023e3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8023e40:	68fb      	ldr	r3, [r7, #12]
 8023e42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8023e44:	68fb      	ldr	r3, [r7, #12]
 8023e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8023e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023e50:	d106      	bne.n	8023e60 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8023e52:	68fb      	ldr	r3, [r7, #12]
 8023e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023e56:	f023 0206 	bic.w	r2, r3, #6
 8023e5a:	68fb      	ldr	r3, [r7, #12]
 8023e5c:	645a      	str	r2, [r3, #68]	; 0x44
 8023e5e:	e002      	b.n	8023e66 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8023e60:	68fb      	ldr	r3, [r7, #12]
 8023e62:	2200      	movs	r2, #0
 8023e64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8023e66:	68fb      	ldr	r3, [r7, #12]
 8023e68:	2200      	movs	r2, #0
 8023e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8023e6e:	4b3d      	ldr	r3, [pc, #244]	; (8023f64 <HAL_ADC_Start_DMA+0x1c8>)
 8023e70:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8023e72:	68fb      	ldr	r3, [r7, #12]
 8023e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023e76:	4a3c      	ldr	r2, [pc, #240]	; (8023f68 <HAL_ADC_Start_DMA+0x1cc>)
 8023e78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8023e7a:	68fb      	ldr	r3, [r7, #12]
 8023e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023e7e:	4a3b      	ldr	r2, [pc, #236]	; (8023f6c <HAL_ADC_Start_DMA+0x1d0>)
 8023e80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8023e82:	68fb      	ldr	r3, [r7, #12]
 8023e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023e86:	4a3a      	ldr	r2, [pc, #232]	; (8023f70 <HAL_ADC_Start_DMA+0x1d4>)
 8023e88:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8023e8a:	68fb      	ldr	r3, [r7, #12]
 8023e8c:	681b      	ldr	r3, [r3, #0]
 8023e8e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8023e92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8023e94:	68fb      	ldr	r3, [r7, #12]
 8023e96:	681b      	ldr	r3, [r3, #0]
 8023e98:	685a      	ldr	r2, [r3, #4]
 8023e9a:	68fb      	ldr	r3, [r7, #12]
 8023e9c:	681b      	ldr	r3, [r3, #0]
 8023e9e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8023ea2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8023ea4:	68fb      	ldr	r3, [r7, #12]
 8023ea6:	681b      	ldr	r3, [r3, #0]
 8023ea8:	689a      	ldr	r2, [r3, #8]
 8023eaa:	68fb      	ldr	r3, [r7, #12]
 8023eac:	681b      	ldr	r3, [r3, #0]
 8023eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8023eb2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8023eb4:	68fb      	ldr	r3, [r7, #12]
 8023eb6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8023eb8:	68fb      	ldr	r3, [r7, #12]
 8023eba:	681b      	ldr	r3, [r3, #0]
 8023ebc:	334c      	adds	r3, #76	; 0x4c
 8023ebe:	4619      	mov	r1, r3
 8023ec0:	68ba      	ldr	r2, [r7, #8]
 8023ec2:	687b      	ldr	r3, [r7, #4]
 8023ec4:	f000 fcda 	bl	802487c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8023ec8:	697b      	ldr	r3, [r7, #20]
 8023eca:	685b      	ldr	r3, [r3, #4]
 8023ecc:	f003 031f 	and.w	r3, r3, #31
 8023ed0:	2b00      	cmp	r3, #0
 8023ed2:	d12a      	bne.n	8023f2a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8023ed4:	68fb      	ldr	r3, [r7, #12]
 8023ed6:	681b      	ldr	r3, [r3, #0]
 8023ed8:	4a26      	ldr	r2, [pc, #152]	; (8023f74 <HAL_ADC_Start_DMA+0x1d8>)
 8023eda:	4293      	cmp	r3, r2
 8023edc:	d015      	beq.n	8023f0a <HAL_ADC_Start_DMA+0x16e>
 8023ede:	68fb      	ldr	r3, [r7, #12]
 8023ee0:	681b      	ldr	r3, [r3, #0]
 8023ee2:	4a25      	ldr	r2, [pc, #148]	; (8023f78 <HAL_ADC_Start_DMA+0x1dc>)
 8023ee4:	4293      	cmp	r3, r2
 8023ee6:	d105      	bne.n	8023ef4 <HAL_ADC_Start_DMA+0x158>
 8023ee8:	4b1e      	ldr	r3, [pc, #120]	; (8023f64 <HAL_ADC_Start_DMA+0x1c8>)
 8023eea:	685b      	ldr	r3, [r3, #4]
 8023eec:	f003 031f 	and.w	r3, r3, #31
 8023ef0:	2b00      	cmp	r3, #0
 8023ef2:	d00a      	beq.n	8023f0a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8023ef4:	68fb      	ldr	r3, [r7, #12]
 8023ef6:	681b      	ldr	r3, [r3, #0]
 8023ef8:	4a20      	ldr	r2, [pc, #128]	; (8023f7c <HAL_ADC_Start_DMA+0x1e0>)
 8023efa:	4293      	cmp	r3, r2
 8023efc:	d129      	bne.n	8023f52 <HAL_ADC_Start_DMA+0x1b6>
 8023efe:	4b19      	ldr	r3, [pc, #100]	; (8023f64 <HAL_ADC_Start_DMA+0x1c8>)
 8023f00:	685b      	ldr	r3, [r3, #4]
 8023f02:	f003 031f 	and.w	r3, r3, #31
 8023f06:	2b0f      	cmp	r3, #15
 8023f08:	d823      	bhi.n	8023f52 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8023f0a:	68fb      	ldr	r3, [r7, #12]
 8023f0c:	681b      	ldr	r3, [r3, #0]
 8023f0e:	689b      	ldr	r3, [r3, #8]
 8023f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8023f14:	2b00      	cmp	r3, #0
 8023f16:	d11c      	bne.n	8023f52 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8023f18:	68fb      	ldr	r3, [r7, #12]
 8023f1a:	681b      	ldr	r3, [r3, #0]
 8023f1c:	689a      	ldr	r2, [r3, #8]
 8023f1e:	68fb      	ldr	r3, [r7, #12]
 8023f20:	681b      	ldr	r3, [r3, #0]
 8023f22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8023f26:	609a      	str	r2, [r3, #8]
 8023f28:	e013      	b.n	8023f52 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8023f2a:	68fb      	ldr	r3, [r7, #12]
 8023f2c:	681b      	ldr	r3, [r3, #0]
 8023f2e:	4a11      	ldr	r2, [pc, #68]	; (8023f74 <HAL_ADC_Start_DMA+0x1d8>)
 8023f30:	4293      	cmp	r3, r2
 8023f32:	d10e      	bne.n	8023f52 <HAL_ADC_Start_DMA+0x1b6>
 8023f34:	68fb      	ldr	r3, [r7, #12]
 8023f36:	681b      	ldr	r3, [r3, #0]
 8023f38:	689b      	ldr	r3, [r3, #8]
 8023f3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8023f3e:	2b00      	cmp	r3, #0
 8023f40:	d107      	bne.n	8023f52 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8023f42:	68fb      	ldr	r3, [r7, #12]
 8023f44:	681b      	ldr	r3, [r3, #0]
 8023f46:	689a      	ldr	r2, [r3, #8]
 8023f48:	68fb      	ldr	r3, [r7, #12]
 8023f4a:	681b      	ldr	r3, [r3, #0]
 8023f4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8023f50:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8023f52:	2300      	movs	r3, #0
}
 8023f54:	4618      	mov	r0, r3
 8023f56:	3718      	adds	r7, #24
 8023f58:	46bd      	mov	sp, r7
 8023f5a:	bd80      	pop	{r7, pc}
 8023f5c:	20000000 	.word	0x20000000
 8023f60:	431bde83 	.word	0x431bde83
 8023f64:	40012300 	.word	0x40012300
 8023f68:	080243f9 	.word	0x080243f9
 8023f6c:	080244b3 	.word	0x080244b3
 8023f70:	080244cf 	.word	0x080244cf
 8023f74:	40012000 	.word	0x40012000
 8023f78:	40012100 	.word	0x40012100
 8023f7c:	40012200 	.word	0x40012200

08023f80 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8023f80:	b480      	push	{r7}
 8023f82:	b083      	sub	sp, #12
 8023f84:	af00      	add	r7, sp, #0
 8023f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8023f88:	bf00      	nop
 8023f8a:	370c      	adds	r7, #12
 8023f8c:	46bd      	mov	sp, r7
 8023f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f92:	4770      	bx	lr

08023f94 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8023f94:	b480      	push	{r7}
 8023f96:	b083      	sub	sp, #12
 8023f98:	af00      	add	r7, sp, #0
 8023f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8023f9c:	bf00      	nop
 8023f9e:	370c      	adds	r7, #12
 8023fa0:	46bd      	mov	sp, r7
 8023fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fa6:	4770      	bx	lr

08023fa8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8023fa8:	b480      	push	{r7}
 8023faa:	b083      	sub	sp, #12
 8023fac:	af00      	add	r7, sp, #0
 8023fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8023fb0:	bf00      	nop
 8023fb2:	370c      	adds	r7, #12
 8023fb4:	46bd      	mov	sp, r7
 8023fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fba:	4770      	bx	lr

08023fbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8023fbc:	b480      	push	{r7}
 8023fbe:	b085      	sub	sp, #20
 8023fc0:	af00      	add	r7, sp, #0
 8023fc2:	6078      	str	r0, [r7, #4]
 8023fc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8023fc6:	2300      	movs	r3, #0
 8023fc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8023fca:	687b      	ldr	r3, [r7, #4]
 8023fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023fd0:	2b01      	cmp	r3, #1
 8023fd2:	d101      	bne.n	8023fd8 <HAL_ADC_ConfigChannel+0x1c>
 8023fd4:	2302      	movs	r3, #2
 8023fd6:	e105      	b.n	80241e4 <HAL_ADC_ConfigChannel+0x228>
 8023fd8:	687b      	ldr	r3, [r7, #4]
 8023fda:	2201      	movs	r2, #1
 8023fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8023fe0:	683b      	ldr	r3, [r7, #0]
 8023fe2:	681b      	ldr	r3, [r3, #0]
 8023fe4:	2b09      	cmp	r3, #9
 8023fe6:	d925      	bls.n	8024034 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8023fe8:	687b      	ldr	r3, [r7, #4]
 8023fea:	681b      	ldr	r3, [r3, #0]
 8023fec:	68d9      	ldr	r1, [r3, #12]
 8023fee:	683b      	ldr	r3, [r7, #0]
 8023ff0:	681b      	ldr	r3, [r3, #0]
 8023ff2:	b29b      	uxth	r3, r3
 8023ff4:	461a      	mov	r2, r3
 8023ff6:	4613      	mov	r3, r2
 8023ff8:	005b      	lsls	r3, r3, #1
 8023ffa:	4413      	add	r3, r2
 8023ffc:	3b1e      	subs	r3, #30
 8023ffe:	2207      	movs	r2, #7
 8024000:	fa02 f303 	lsl.w	r3, r2, r3
 8024004:	43da      	mvns	r2, r3
 8024006:	687b      	ldr	r3, [r7, #4]
 8024008:	681b      	ldr	r3, [r3, #0]
 802400a:	400a      	ands	r2, r1
 802400c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 802400e:	687b      	ldr	r3, [r7, #4]
 8024010:	681b      	ldr	r3, [r3, #0]
 8024012:	68d9      	ldr	r1, [r3, #12]
 8024014:	683b      	ldr	r3, [r7, #0]
 8024016:	689a      	ldr	r2, [r3, #8]
 8024018:	683b      	ldr	r3, [r7, #0]
 802401a:	681b      	ldr	r3, [r3, #0]
 802401c:	b29b      	uxth	r3, r3
 802401e:	4618      	mov	r0, r3
 8024020:	4603      	mov	r3, r0
 8024022:	005b      	lsls	r3, r3, #1
 8024024:	4403      	add	r3, r0
 8024026:	3b1e      	subs	r3, #30
 8024028:	409a      	lsls	r2, r3
 802402a:	687b      	ldr	r3, [r7, #4]
 802402c:	681b      	ldr	r3, [r3, #0]
 802402e:	430a      	orrs	r2, r1
 8024030:	60da      	str	r2, [r3, #12]
 8024032:	e022      	b.n	802407a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8024034:	687b      	ldr	r3, [r7, #4]
 8024036:	681b      	ldr	r3, [r3, #0]
 8024038:	6919      	ldr	r1, [r3, #16]
 802403a:	683b      	ldr	r3, [r7, #0]
 802403c:	681b      	ldr	r3, [r3, #0]
 802403e:	b29b      	uxth	r3, r3
 8024040:	461a      	mov	r2, r3
 8024042:	4613      	mov	r3, r2
 8024044:	005b      	lsls	r3, r3, #1
 8024046:	4413      	add	r3, r2
 8024048:	2207      	movs	r2, #7
 802404a:	fa02 f303 	lsl.w	r3, r2, r3
 802404e:	43da      	mvns	r2, r3
 8024050:	687b      	ldr	r3, [r7, #4]
 8024052:	681b      	ldr	r3, [r3, #0]
 8024054:	400a      	ands	r2, r1
 8024056:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8024058:	687b      	ldr	r3, [r7, #4]
 802405a:	681b      	ldr	r3, [r3, #0]
 802405c:	6919      	ldr	r1, [r3, #16]
 802405e:	683b      	ldr	r3, [r7, #0]
 8024060:	689a      	ldr	r2, [r3, #8]
 8024062:	683b      	ldr	r3, [r7, #0]
 8024064:	681b      	ldr	r3, [r3, #0]
 8024066:	b29b      	uxth	r3, r3
 8024068:	4618      	mov	r0, r3
 802406a:	4603      	mov	r3, r0
 802406c:	005b      	lsls	r3, r3, #1
 802406e:	4403      	add	r3, r0
 8024070:	409a      	lsls	r2, r3
 8024072:	687b      	ldr	r3, [r7, #4]
 8024074:	681b      	ldr	r3, [r3, #0]
 8024076:	430a      	orrs	r2, r1
 8024078:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 802407a:	683b      	ldr	r3, [r7, #0]
 802407c:	685b      	ldr	r3, [r3, #4]
 802407e:	2b06      	cmp	r3, #6
 8024080:	d824      	bhi.n	80240cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8024082:	687b      	ldr	r3, [r7, #4]
 8024084:	681b      	ldr	r3, [r3, #0]
 8024086:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8024088:	683b      	ldr	r3, [r7, #0]
 802408a:	685a      	ldr	r2, [r3, #4]
 802408c:	4613      	mov	r3, r2
 802408e:	009b      	lsls	r3, r3, #2
 8024090:	4413      	add	r3, r2
 8024092:	3b05      	subs	r3, #5
 8024094:	221f      	movs	r2, #31
 8024096:	fa02 f303 	lsl.w	r3, r2, r3
 802409a:	43da      	mvns	r2, r3
 802409c:	687b      	ldr	r3, [r7, #4]
 802409e:	681b      	ldr	r3, [r3, #0]
 80240a0:	400a      	ands	r2, r1
 80240a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80240a4:	687b      	ldr	r3, [r7, #4]
 80240a6:	681b      	ldr	r3, [r3, #0]
 80240a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80240aa:	683b      	ldr	r3, [r7, #0]
 80240ac:	681b      	ldr	r3, [r3, #0]
 80240ae:	b29b      	uxth	r3, r3
 80240b0:	4618      	mov	r0, r3
 80240b2:	683b      	ldr	r3, [r7, #0]
 80240b4:	685a      	ldr	r2, [r3, #4]
 80240b6:	4613      	mov	r3, r2
 80240b8:	009b      	lsls	r3, r3, #2
 80240ba:	4413      	add	r3, r2
 80240bc:	3b05      	subs	r3, #5
 80240be:	fa00 f203 	lsl.w	r2, r0, r3
 80240c2:	687b      	ldr	r3, [r7, #4]
 80240c4:	681b      	ldr	r3, [r3, #0]
 80240c6:	430a      	orrs	r2, r1
 80240c8:	635a      	str	r2, [r3, #52]	; 0x34
 80240ca:	e04c      	b.n	8024166 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80240cc:	683b      	ldr	r3, [r7, #0]
 80240ce:	685b      	ldr	r3, [r3, #4]
 80240d0:	2b0c      	cmp	r3, #12
 80240d2:	d824      	bhi.n	802411e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80240d4:	687b      	ldr	r3, [r7, #4]
 80240d6:	681b      	ldr	r3, [r3, #0]
 80240d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80240da:	683b      	ldr	r3, [r7, #0]
 80240dc:	685a      	ldr	r2, [r3, #4]
 80240de:	4613      	mov	r3, r2
 80240e0:	009b      	lsls	r3, r3, #2
 80240e2:	4413      	add	r3, r2
 80240e4:	3b23      	subs	r3, #35	; 0x23
 80240e6:	221f      	movs	r2, #31
 80240e8:	fa02 f303 	lsl.w	r3, r2, r3
 80240ec:	43da      	mvns	r2, r3
 80240ee:	687b      	ldr	r3, [r7, #4]
 80240f0:	681b      	ldr	r3, [r3, #0]
 80240f2:	400a      	ands	r2, r1
 80240f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80240f6:	687b      	ldr	r3, [r7, #4]
 80240f8:	681b      	ldr	r3, [r3, #0]
 80240fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80240fc:	683b      	ldr	r3, [r7, #0]
 80240fe:	681b      	ldr	r3, [r3, #0]
 8024100:	b29b      	uxth	r3, r3
 8024102:	4618      	mov	r0, r3
 8024104:	683b      	ldr	r3, [r7, #0]
 8024106:	685a      	ldr	r2, [r3, #4]
 8024108:	4613      	mov	r3, r2
 802410a:	009b      	lsls	r3, r3, #2
 802410c:	4413      	add	r3, r2
 802410e:	3b23      	subs	r3, #35	; 0x23
 8024110:	fa00 f203 	lsl.w	r2, r0, r3
 8024114:	687b      	ldr	r3, [r7, #4]
 8024116:	681b      	ldr	r3, [r3, #0]
 8024118:	430a      	orrs	r2, r1
 802411a:	631a      	str	r2, [r3, #48]	; 0x30
 802411c:	e023      	b.n	8024166 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 802411e:	687b      	ldr	r3, [r7, #4]
 8024120:	681b      	ldr	r3, [r3, #0]
 8024122:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8024124:	683b      	ldr	r3, [r7, #0]
 8024126:	685a      	ldr	r2, [r3, #4]
 8024128:	4613      	mov	r3, r2
 802412a:	009b      	lsls	r3, r3, #2
 802412c:	4413      	add	r3, r2
 802412e:	3b41      	subs	r3, #65	; 0x41
 8024130:	221f      	movs	r2, #31
 8024132:	fa02 f303 	lsl.w	r3, r2, r3
 8024136:	43da      	mvns	r2, r3
 8024138:	687b      	ldr	r3, [r7, #4]
 802413a:	681b      	ldr	r3, [r3, #0]
 802413c:	400a      	ands	r2, r1
 802413e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8024140:	687b      	ldr	r3, [r7, #4]
 8024142:	681b      	ldr	r3, [r3, #0]
 8024144:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8024146:	683b      	ldr	r3, [r7, #0]
 8024148:	681b      	ldr	r3, [r3, #0]
 802414a:	b29b      	uxth	r3, r3
 802414c:	4618      	mov	r0, r3
 802414e:	683b      	ldr	r3, [r7, #0]
 8024150:	685a      	ldr	r2, [r3, #4]
 8024152:	4613      	mov	r3, r2
 8024154:	009b      	lsls	r3, r3, #2
 8024156:	4413      	add	r3, r2
 8024158:	3b41      	subs	r3, #65	; 0x41
 802415a:	fa00 f203 	lsl.w	r2, r0, r3
 802415e:	687b      	ldr	r3, [r7, #4]
 8024160:	681b      	ldr	r3, [r3, #0]
 8024162:	430a      	orrs	r2, r1
 8024164:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8024166:	4b22      	ldr	r3, [pc, #136]	; (80241f0 <HAL_ADC_ConfigChannel+0x234>)
 8024168:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 802416a:	687b      	ldr	r3, [r7, #4]
 802416c:	681b      	ldr	r3, [r3, #0]
 802416e:	4a21      	ldr	r2, [pc, #132]	; (80241f4 <HAL_ADC_ConfigChannel+0x238>)
 8024170:	4293      	cmp	r3, r2
 8024172:	d109      	bne.n	8024188 <HAL_ADC_ConfigChannel+0x1cc>
 8024174:	683b      	ldr	r3, [r7, #0]
 8024176:	681b      	ldr	r3, [r3, #0]
 8024178:	2b12      	cmp	r3, #18
 802417a:	d105      	bne.n	8024188 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 802417c:	68fb      	ldr	r3, [r7, #12]
 802417e:	685b      	ldr	r3, [r3, #4]
 8024180:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8024184:	68fb      	ldr	r3, [r7, #12]
 8024186:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8024188:	687b      	ldr	r3, [r7, #4]
 802418a:	681b      	ldr	r3, [r3, #0]
 802418c:	4a19      	ldr	r2, [pc, #100]	; (80241f4 <HAL_ADC_ConfigChannel+0x238>)
 802418e:	4293      	cmp	r3, r2
 8024190:	d123      	bne.n	80241da <HAL_ADC_ConfigChannel+0x21e>
 8024192:	683b      	ldr	r3, [r7, #0]
 8024194:	681b      	ldr	r3, [r3, #0]
 8024196:	2b10      	cmp	r3, #16
 8024198:	d003      	beq.n	80241a2 <HAL_ADC_ConfigChannel+0x1e6>
 802419a:	683b      	ldr	r3, [r7, #0]
 802419c:	681b      	ldr	r3, [r3, #0]
 802419e:	2b11      	cmp	r3, #17
 80241a0:	d11b      	bne.n	80241da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80241a2:	68fb      	ldr	r3, [r7, #12]
 80241a4:	685b      	ldr	r3, [r3, #4]
 80241a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80241aa:	68fb      	ldr	r3, [r7, #12]
 80241ac:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80241ae:	683b      	ldr	r3, [r7, #0]
 80241b0:	681b      	ldr	r3, [r3, #0]
 80241b2:	2b10      	cmp	r3, #16
 80241b4:	d111      	bne.n	80241da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80241b6:	4b10      	ldr	r3, [pc, #64]	; (80241f8 <HAL_ADC_ConfigChannel+0x23c>)
 80241b8:	681b      	ldr	r3, [r3, #0]
 80241ba:	4a10      	ldr	r2, [pc, #64]	; (80241fc <HAL_ADC_ConfigChannel+0x240>)
 80241bc:	fba2 2303 	umull	r2, r3, r2, r3
 80241c0:	0c9a      	lsrs	r2, r3, #18
 80241c2:	4613      	mov	r3, r2
 80241c4:	009b      	lsls	r3, r3, #2
 80241c6:	4413      	add	r3, r2
 80241c8:	005b      	lsls	r3, r3, #1
 80241ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80241cc:	e002      	b.n	80241d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80241ce:	68bb      	ldr	r3, [r7, #8]
 80241d0:	3b01      	subs	r3, #1
 80241d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80241d4:	68bb      	ldr	r3, [r7, #8]
 80241d6:	2b00      	cmp	r3, #0
 80241d8:	d1f9      	bne.n	80241ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80241da:	687b      	ldr	r3, [r7, #4]
 80241dc:	2200      	movs	r2, #0
 80241de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80241e2:	2300      	movs	r3, #0
}
 80241e4:	4618      	mov	r0, r3
 80241e6:	3714      	adds	r7, #20
 80241e8:	46bd      	mov	sp, r7
 80241ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241ee:	4770      	bx	lr
 80241f0:	40012300 	.word	0x40012300
 80241f4:	40012000 	.word	0x40012000
 80241f8:	20000000 	.word	0x20000000
 80241fc:	431bde83 	.word	0x431bde83

08024200 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8024200:	b480      	push	{r7}
 8024202:	b085      	sub	sp, #20
 8024204:	af00      	add	r7, sp, #0
 8024206:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8024208:	4b79      	ldr	r3, [pc, #484]	; (80243f0 <ADC_Init+0x1f0>)
 802420a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 802420c:	68fb      	ldr	r3, [r7, #12]
 802420e:	685b      	ldr	r3, [r3, #4]
 8024210:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8024214:	68fb      	ldr	r3, [r7, #12]
 8024216:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8024218:	68fb      	ldr	r3, [r7, #12]
 802421a:	685a      	ldr	r2, [r3, #4]
 802421c:	687b      	ldr	r3, [r7, #4]
 802421e:	685b      	ldr	r3, [r3, #4]
 8024220:	431a      	orrs	r2, r3
 8024222:	68fb      	ldr	r3, [r7, #12]
 8024224:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8024226:	687b      	ldr	r3, [r7, #4]
 8024228:	681b      	ldr	r3, [r3, #0]
 802422a:	685a      	ldr	r2, [r3, #4]
 802422c:	687b      	ldr	r3, [r7, #4]
 802422e:	681b      	ldr	r3, [r3, #0]
 8024230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024234:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8024236:	687b      	ldr	r3, [r7, #4]
 8024238:	681b      	ldr	r3, [r3, #0]
 802423a:	6859      	ldr	r1, [r3, #4]
 802423c:	687b      	ldr	r3, [r7, #4]
 802423e:	691b      	ldr	r3, [r3, #16]
 8024240:	021a      	lsls	r2, r3, #8
 8024242:	687b      	ldr	r3, [r7, #4]
 8024244:	681b      	ldr	r3, [r3, #0]
 8024246:	430a      	orrs	r2, r1
 8024248:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 802424a:	687b      	ldr	r3, [r7, #4]
 802424c:	681b      	ldr	r3, [r3, #0]
 802424e:	685a      	ldr	r2, [r3, #4]
 8024250:	687b      	ldr	r3, [r7, #4]
 8024252:	681b      	ldr	r3, [r3, #0]
 8024254:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8024258:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 802425a:	687b      	ldr	r3, [r7, #4]
 802425c:	681b      	ldr	r3, [r3, #0]
 802425e:	6859      	ldr	r1, [r3, #4]
 8024260:	687b      	ldr	r3, [r7, #4]
 8024262:	689a      	ldr	r2, [r3, #8]
 8024264:	687b      	ldr	r3, [r7, #4]
 8024266:	681b      	ldr	r3, [r3, #0]
 8024268:	430a      	orrs	r2, r1
 802426a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 802426c:	687b      	ldr	r3, [r7, #4]
 802426e:	681b      	ldr	r3, [r3, #0]
 8024270:	689a      	ldr	r2, [r3, #8]
 8024272:	687b      	ldr	r3, [r7, #4]
 8024274:	681b      	ldr	r3, [r3, #0]
 8024276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802427a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 802427c:	687b      	ldr	r3, [r7, #4]
 802427e:	681b      	ldr	r3, [r3, #0]
 8024280:	6899      	ldr	r1, [r3, #8]
 8024282:	687b      	ldr	r3, [r7, #4]
 8024284:	68da      	ldr	r2, [r3, #12]
 8024286:	687b      	ldr	r3, [r7, #4]
 8024288:	681b      	ldr	r3, [r3, #0]
 802428a:	430a      	orrs	r2, r1
 802428c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 802428e:	687b      	ldr	r3, [r7, #4]
 8024290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024292:	4a58      	ldr	r2, [pc, #352]	; (80243f4 <ADC_Init+0x1f4>)
 8024294:	4293      	cmp	r3, r2
 8024296:	d022      	beq.n	80242de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8024298:	687b      	ldr	r3, [r7, #4]
 802429a:	681b      	ldr	r3, [r3, #0]
 802429c:	689a      	ldr	r2, [r3, #8]
 802429e:	687b      	ldr	r3, [r7, #4]
 80242a0:	681b      	ldr	r3, [r3, #0]
 80242a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80242a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80242a8:	687b      	ldr	r3, [r7, #4]
 80242aa:	681b      	ldr	r3, [r3, #0]
 80242ac:	6899      	ldr	r1, [r3, #8]
 80242ae:	687b      	ldr	r3, [r7, #4]
 80242b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80242b2:	687b      	ldr	r3, [r7, #4]
 80242b4:	681b      	ldr	r3, [r3, #0]
 80242b6:	430a      	orrs	r2, r1
 80242b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80242ba:	687b      	ldr	r3, [r7, #4]
 80242bc:	681b      	ldr	r3, [r3, #0]
 80242be:	689a      	ldr	r2, [r3, #8]
 80242c0:	687b      	ldr	r3, [r7, #4]
 80242c2:	681b      	ldr	r3, [r3, #0]
 80242c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80242c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80242ca:	687b      	ldr	r3, [r7, #4]
 80242cc:	681b      	ldr	r3, [r3, #0]
 80242ce:	6899      	ldr	r1, [r3, #8]
 80242d0:	687b      	ldr	r3, [r7, #4]
 80242d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80242d4:	687b      	ldr	r3, [r7, #4]
 80242d6:	681b      	ldr	r3, [r3, #0]
 80242d8:	430a      	orrs	r2, r1
 80242da:	609a      	str	r2, [r3, #8]
 80242dc:	e00f      	b.n	80242fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80242de:	687b      	ldr	r3, [r7, #4]
 80242e0:	681b      	ldr	r3, [r3, #0]
 80242e2:	689a      	ldr	r2, [r3, #8]
 80242e4:	687b      	ldr	r3, [r7, #4]
 80242e6:	681b      	ldr	r3, [r3, #0]
 80242e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80242ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80242ee:	687b      	ldr	r3, [r7, #4]
 80242f0:	681b      	ldr	r3, [r3, #0]
 80242f2:	689a      	ldr	r2, [r3, #8]
 80242f4:	687b      	ldr	r3, [r7, #4]
 80242f6:	681b      	ldr	r3, [r3, #0]
 80242f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80242fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80242fe:	687b      	ldr	r3, [r7, #4]
 8024300:	681b      	ldr	r3, [r3, #0]
 8024302:	689a      	ldr	r2, [r3, #8]
 8024304:	687b      	ldr	r3, [r7, #4]
 8024306:	681b      	ldr	r3, [r3, #0]
 8024308:	f022 0202 	bic.w	r2, r2, #2
 802430c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 802430e:	687b      	ldr	r3, [r7, #4]
 8024310:	681b      	ldr	r3, [r3, #0]
 8024312:	6899      	ldr	r1, [r3, #8]
 8024314:	687b      	ldr	r3, [r7, #4]
 8024316:	7e1b      	ldrb	r3, [r3, #24]
 8024318:	005a      	lsls	r2, r3, #1
 802431a:	687b      	ldr	r3, [r7, #4]
 802431c:	681b      	ldr	r3, [r3, #0]
 802431e:	430a      	orrs	r2, r1
 8024320:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8024322:	687b      	ldr	r3, [r7, #4]
 8024324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8024328:	2b00      	cmp	r3, #0
 802432a:	d01b      	beq.n	8024364 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 802432c:	687b      	ldr	r3, [r7, #4]
 802432e:	681b      	ldr	r3, [r3, #0]
 8024330:	685a      	ldr	r2, [r3, #4]
 8024332:	687b      	ldr	r3, [r7, #4]
 8024334:	681b      	ldr	r3, [r3, #0]
 8024336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802433a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 802433c:	687b      	ldr	r3, [r7, #4]
 802433e:	681b      	ldr	r3, [r3, #0]
 8024340:	685a      	ldr	r2, [r3, #4]
 8024342:	687b      	ldr	r3, [r7, #4]
 8024344:	681b      	ldr	r3, [r3, #0]
 8024346:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 802434a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 802434c:	687b      	ldr	r3, [r7, #4]
 802434e:	681b      	ldr	r3, [r3, #0]
 8024350:	6859      	ldr	r1, [r3, #4]
 8024352:	687b      	ldr	r3, [r7, #4]
 8024354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024356:	3b01      	subs	r3, #1
 8024358:	035a      	lsls	r2, r3, #13
 802435a:	687b      	ldr	r3, [r7, #4]
 802435c:	681b      	ldr	r3, [r3, #0]
 802435e:	430a      	orrs	r2, r1
 8024360:	605a      	str	r2, [r3, #4]
 8024362:	e007      	b.n	8024374 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8024364:	687b      	ldr	r3, [r7, #4]
 8024366:	681b      	ldr	r3, [r3, #0]
 8024368:	685a      	ldr	r2, [r3, #4]
 802436a:	687b      	ldr	r3, [r7, #4]
 802436c:	681b      	ldr	r3, [r3, #0]
 802436e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8024372:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8024374:	687b      	ldr	r3, [r7, #4]
 8024376:	681b      	ldr	r3, [r3, #0]
 8024378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802437a:	687b      	ldr	r3, [r7, #4]
 802437c:	681b      	ldr	r3, [r3, #0]
 802437e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8024382:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8024384:	687b      	ldr	r3, [r7, #4]
 8024386:	681b      	ldr	r3, [r3, #0]
 8024388:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802438a:	687b      	ldr	r3, [r7, #4]
 802438c:	69db      	ldr	r3, [r3, #28]
 802438e:	3b01      	subs	r3, #1
 8024390:	051a      	lsls	r2, r3, #20
 8024392:	687b      	ldr	r3, [r7, #4]
 8024394:	681b      	ldr	r3, [r3, #0]
 8024396:	430a      	orrs	r2, r1
 8024398:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 802439a:	687b      	ldr	r3, [r7, #4]
 802439c:	681b      	ldr	r3, [r3, #0]
 802439e:	689a      	ldr	r2, [r3, #8]
 80243a0:	687b      	ldr	r3, [r7, #4]
 80243a2:	681b      	ldr	r3, [r3, #0]
 80243a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80243a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80243aa:	687b      	ldr	r3, [r7, #4]
 80243ac:	681b      	ldr	r3, [r3, #0]
 80243ae:	6899      	ldr	r1, [r3, #8]
 80243b0:	687b      	ldr	r3, [r7, #4]
 80243b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80243b6:	025a      	lsls	r2, r3, #9
 80243b8:	687b      	ldr	r3, [r7, #4]
 80243ba:	681b      	ldr	r3, [r3, #0]
 80243bc:	430a      	orrs	r2, r1
 80243be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80243c0:	687b      	ldr	r3, [r7, #4]
 80243c2:	681b      	ldr	r3, [r3, #0]
 80243c4:	689a      	ldr	r2, [r3, #8]
 80243c6:	687b      	ldr	r3, [r7, #4]
 80243c8:	681b      	ldr	r3, [r3, #0]
 80243ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80243ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80243d0:	687b      	ldr	r3, [r7, #4]
 80243d2:	681b      	ldr	r3, [r3, #0]
 80243d4:	6899      	ldr	r1, [r3, #8]
 80243d6:	687b      	ldr	r3, [r7, #4]
 80243d8:	695b      	ldr	r3, [r3, #20]
 80243da:	029a      	lsls	r2, r3, #10
 80243dc:	687b      	ldr	r3, [r7, #4]
 80243de:	681b      	ldr	r3, [r3, #0]
 80243e0:	430a      	orrs	r2, r1
 80243e2:	609a      	str	r2, [r3, #8]
}
 80243e4:	bf00      	nop
 80243e6:	3714      	adds	r7, #20
 80243e8:	46bd      	mov	sp, r7
 80243ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243ee:	4770      	bx	lr
 80243f0:	40012300 	.word	0x40012300
 80243f4:	0f000001 	.word	0x0f000001

080243f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80243f8:	b580      	push	{r7, lr}
 80243fa:	b084      	sub	sp, #16
 80243fc:	af00      	add	r7, sp, #0
 80243fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8024400:	687b      	ldr	r3, [r7, #4]
 8024402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024404:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8024406:	68fb      	ldr	r3, [r7, #12]
 8024408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802440a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 802440e:	2b00      	cmp	r3, #0
 8024410:	d13c      	bne.n	802448c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8024412:	68fb      	ldr	r3, [r7, #12]
 8024414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024416:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 802441a:	68fb      	ldr	r3, [r7, #12]
 802441c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 802441e:	68fb      	ldr	r3, [r7, #12]
 8024420:	681b      	ldr	r3, [r3, #0]
 8024422:	689b      	ldr	r3, [r3, #8]
 8024424:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8024428:	2b00      	cmp	r3, #0
 802442a:	d12b      	bne.n	8024484 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 802442c:	68fb      	ldr	r3, [r7, #12]
 802442e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8024430:	2b00      	cmp	r3, #0
 8024432:	d127      	bne.n	8024484 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8024434:	68fb      	ldr	r3, [r7, #12]
 8024436:	681b      	ldr	r3, [r3, #0]
 8024438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802443a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 802443e:	2b00      	cmp	r3, #0
 8024440:	d006      	beq.n	8024450 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8024442:	68fb      	ldr	r3, [r7, #12]
 8024444:	681b      	ldr	r3, [r3, #0]
 8024446:	689b      	ldr	r3, [r3, #8]
 8024448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 802444c:	2b00      	cmp	r3, #0
 802444e:	d119      	bne.n	8024484 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8024450:	68fb      	ldr	r3, [r7, #12]
 8024452:	681b      	ldr	r3, [r3, #0]
 8024454:	685a      	ldr	r2, [r3, #4]
 8024456:	68fb      	ldr	r3, [r7, #12]
 8024458:	681b      	ldr	r3, [r3, #0]
 802445a:	f022 0220 	bic.w	r2, r2, #32
 802445e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8024460:	68fb      	ldr	r3, [r7, #12]
 8024462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024464:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8024468:	68fb      	ldr	r3, [r7, #12]
 802446a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 802446c:	68fb      	ldr	r3, [r7, #12]
 802446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8024474:	2b00      	cmp	r3, #0
 8024476:	d105      	bne.n	8024484 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8024478:	68fb      	ldr	r3, [r7, #12]
 802447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802447c:	f043 0201 	orr.w	r2, r3, #1
 8024480:	68fb      	ldr	r3, [r7, #12]
 8024482:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8024484:	68f8      	ldr	r0, [r7, #12]
 8024486:	f7ff fd7b 	bl	8023f80 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 802448a:	e00e      	b.n	80244aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 802448c:	68fb      	ldr	r3, [r7, #12]
 802448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024490:	f003 0310 	and.w	r3, r3, #16
 8024494:	2b00      	cmp	r3, #0
 8024496:	d003      	beq.n	80244a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8024498:	68f8      	ldr	r0, [r7, #12]
 802449a:	f7ff fd85 	bl	8023fa8 <HAL_ADC_ErrorCallback>
}
 802449e:	e004      	b.n	80244aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80244a0:	68fb      	ldr	r3, [r7, #12]
 80244a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80244a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80244a6:	6878      	ldr	r0, [r7, #4]
 80244a8:	4798      	blx	r3
}
 80244aa:	bf00      	nop
 80244ac:	3710      	adds	r7, #16
 80244ae:	46bd      	mov	sp, r7
 80244b0:	bd80      	pop	{r7, pc}

080244b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80244b2:	b580      	push	{r7, lr}
 80244b4:	b084      	sub	sp, #16
 80244b6:	af00      	add	r7, sp, #0
 80244b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80244ba:	687b      	ldr	r3, [r7, #4]
 80244bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80244be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80244c0:	68f8      	ldr	r0, [r7, #12]
 80244c2:	f7ff fd67 	bl	8023f94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80244c6:	bf00      	nop
 80244c8:	3710      	adds	r7, #16
 80244ca:	46bd      	mov	sp, r7
 80244cc:	bd80      	pop	{r7, pc}

080244ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80244ce:	b580      	push	{r7, lr}
 80244d0:	b084      	sub	sp, #16
 80244d2:	af00      	add	r7, sp, #0
 80244d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80244d6:	687b      	ldr	r3, [r7, #4]
 80244d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80244da:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80244dc:	68fb      	ldr	r3, [r7, #12]
 80244de:	2240      	movs	r2, #64	; 0x40
 80244e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80244e2:	68fb      	ldr	r3, [r7, #12]
 80244e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80244e6:	f043 0204 	orr.w	r2, r3, #4
 80244ea:	68fb      	ldr	r3, [r7, #12]
 80244ec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80244ee:	68f8      	ldr	r0, [r7, #12]
 80244f0:	f7ff fd5a 	bl	8023fa8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80244f4:	bf00      	nop
 80244f6:	3710      	adds	r7, #16
 80244f8:	46bd      	mov	sp, r7
 80244fa:	bd80      	pop	{r7, pc}

080244fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80244fc:	b480      	push	{r7}
 80244fe:	b085      	sub	sp, #20
 8024500:	af00      	add	r7, sp, #0
 8024502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8024504:	687b      	ldr	r3, [r7, #4]
 8024506:	f003 0307 	and.w	r3, r3, #7
 802450a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802450c:	4b0c      	ldr	r3, [pc, #48]	; (8024540 <__NVIC_SetPriorityGrouping+0x44>)
 802450e:	68db      	ldr	r3, [r3, #12]
 8024510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8024512:	68ba      	ldr	r2, [r7, #8]
 8024514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8024518:	4013      	ands	r3, r2
 802451a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802451c:	68fb      	ldr	r3, [r7, #12]
 802451e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8024520:	68bb      	ldr	r3, [r7, #8]
 8024522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8024524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8024528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802452c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802452e:	4a04      	ldr	r2, [pc, #16]	; (8024540 <__NVIC_SetPriorityGrouping+0x44>)
 8024530:	68bb      	ldr	r3, [r7, #8]
 8024532:	60d3      	str	r3, [r2, #12]
}
 8024534:	bf00      	nop
 8024536:	3714      	adds	r7, #20
 8024538:	46bd      	mov	sp, r7
 802453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802453e:	4770      	bx	lr
 8024540:	e000ed00 	.word	0xe000ed00

08024544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8024544:	b480      	push	{r7}
 8024546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8024548:	4b04      	ldr	r3, [pc, #16]	; (802455c <__NVIC_GetPriorityGrouping+0x18>)
 802454a:	68db      	ldr	r3, [r3, #12]
 802454c:	0a1b      	lsrs	r3, r3, #8
 802454e:	f003 0307 	and.w	r3, r3, #7
}
 8024552:	4618      	mov	r0, r3
 8024554:	46bd      	mov	sp, r7
 8024556:	f85d 7b04 	ldr.w	r7, [sp], #4
 802455a:	4770      	bx	lr
 802455c:	e000ed00 	.word	0xe000ed00

08024560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8024560:	b480      	push	{r7}
 8024562:	b083      	sub	sp, #12
 8024564:	af00      	add	r7, sp, #0
 8024566:	4603      	mov	r3, r0
 8024568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802456a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802456e:	2b00      	cmp	r3, #0
 8024570:	db0b      	blt.n	802458a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8024572:	79fb      	ldrb	r3, [r7, #7]
 8024574:	f003 021f 	and.w	r2, r3, #31
 8024578:	4907      	ldr	r1, [pc, #28]	; (8024598 <__NVIC_EnableIRQ+0x38>)
 802457a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802457e:	095b      	lsrs	r3, r3, #5
 8024580:	2001      	movs	r0, #1
 8024582:	fa00 f202 	lsl.w	r2, r0, r2
 8024586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 802458a:	bf00      	nop
 802458c:	370c      	adds	r7, #12
 802458e:	46bd      	mov	sp, r7
 8024590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024594:	4770      	bx	lr
 8024596:	bf00      	nop
 8024598:	e000e100 	.word	0xe000e100

0802459c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802459c:	b480      	push	{r7}
 802459e:	b083      	sub	sp, #12
 80245a0:	af00      	add	r7, sp, #0
 80245a2:	4603      	mov	r3, r0
 80245a4:	6039      	str	r1, [r7, #0]
 80245a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80245a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80245ac:	2b00      	cmp	r3, #0
 80245ae:	db0a      	blt.n	80245c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80245b0:	683b      	ldr	r3, [r7, #0]
 80245b2:	b2da      	uxtb	r2, r3
 80245b4:	490c      	ldr	r1, [pc, #48]	; (80245e8 <__NVIC_SetPriority+0x4c>)
 80245b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80245ba:	0112      	lsls	r2, r2, #4
 80245bc:	b2d2      	uxtb	r2, r2
 80245be:	440b      	add	r3, r1
 80245c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80245c4:	e00a      	b.n	80245dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80245c6:	683b      	ldr	r3, [r7, #0]
 80245c8:	b2da      	uxtb	r2, r3
 80245ca:	4908      	ldr	r1, [pc, #32]	; (80245ec <__NVIC_SetPriority+0x50>)
 80245cc:	79fb      	ldrb	r3, [r7, #7]
 80245ce:	f003 030f 	and.w	r3, r3, #15
 80245d2:	3b04      	subs	r3, #4
 80245d4:	0112      	lsls	r2, r2, #4
 80245d6:	b2d2      	uxtb	r2, r2
 80245d8:	440b      	add	r3, r1
 80245da:	761a      	strb	r2, [r3, #24]
}
 80245dc:	bf00      	nop
 80245de:	370c      	adds	r7, #12
 80245e0:	46bd      	mov	sp, r7
 80245e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245e6:	4770      	bx	lr
 80245e8:	e000e100 	.word	0xe000e100
 80245ec:	e000ed00 	.word	0xe000ed00

080245f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80245f0:	b480      	push	{r7}
 80245f2:	b089      	sub	sp, #36	; 0x24
 80245f4:	af00      	add	r7, sp, #0
 80245f6:	60f8      	str	r0, [r7, #12]
 80245f8:	60b9      	str	r1, [r7, #8]
 80245fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80245fc:	68fb      	ldr	r3, [r7, #12]
 80245fe:	f003 0307 	and.w	r3, r3, #7
 8024602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8024604:	69fb      	ldr	r3, [r7, #28]
 8024606:	f1c3 0307 	rsb	r3, r3, #7
 802460a:	2b04      	cmp	r3, #4
 802460c:	bf28      	it	cs
 802460e:	2304      	movcs	r3, #4
 8024610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8024612:	69fb      	ldr	r3, [r7, #28]
 8024614:	3304      	adds	r3, #4
 8024616:	2b06      	cmp	r3, #6
 8024618:	d902      	bls.n	8024620 <NVIC_EncodePriority+0x30>
 802461a:	69fb      	ldr	r3, [r7, #28]
 802461c:	3b03      	subs	r3, #3
 802461e:	e000      	b.n	8024622 <NVIC_EncodePriority+0x32>
 8024620:	2300      	movs	r3, #0
 8024622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8024624:	f04f 32ff 	mov.w	r2, #4294967295
 8024628:	69bb      	ldr	r3, [r7, #24]
 802462a:	fa02 f303 	lsl.w	r3, r2, r3
 802462e:	43da      	mvns	r2, r3
 8024630:	68bb      	ldr	r3, [r7, #8]
 8024632:	401a      	ands	r2, r3
 8024634:	697b      	ldr	r3, [r7, #20]
 8024636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8024638:	f04f 31ff 	mov.w	r1, #4294967295
 802463c:	697b      	ldr	r3, [r7, #20]
 802463e:	fa01 f303 	lsl.w	r3, r1, r3
 8024642:	43d9      	mvns	r1, r3
 8024644:	687b      	ldr	r3, [r7, #4]
 8024646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8024648:	4313      	orrs	r3, r2
         );
}
 802464a:	4618      	mov	r0, r3
 802464c:	3724      	adds	r7, #36	; 0x24
 802464e:	46bd      	mov	sp, r7
 8024650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024654:	4770      	bx	lr
	...

08024658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8024658:	b580      	push	{r7, lr}
 802465a:	b082      	sub	sp, #8
 802465c:	af00      	add	r7, sp, #0
 802465e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8024660:	687b      	ldr	r3, [r7, #4]
 8024662:	3b01      	subs	r3, #1
 8024664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8024668:	d301      	bcc.n	802466e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802466a:	2301      	movs	r3, #1
 802466c:	e00f      	b.n	802468e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802466e:	4a0a      	ldr	r2, [pc, #40]	; (8024698 <SysTick_Config+0x40>)
 8024670:	687b      	ldr	r3, [r7, #4]
 8024672:	3b01      	subs	r3, #1
 8024674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8024676:	210f      	movs	r1, #15
 8024678:	f04f 30ff 	mov.w	r0, #4294967295
 802467c:	f7ff ff8e 	bl	802459c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8024680:	4b05      	ldr	r3, [pc, #20]	; (8024698 <SysTick_Config+0x40>)
 8024682:	2200      	movs	r2, #0
 8024684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8024686:	4b04      	ldr	r3, [pc, #16]	; (8024698 <SysTick_Config+0x40>)
 8024688:	2207      	movs	r2, #7
 802468a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802468c:	2300      	movs	r3, #0
}
 802468e:	4618      	mov	r0, r3
 8024690:	3708      	adds	r7, #8
 8024692:	46bd      	mov	sp, r7
 8024694:	bd80      	pop	{r7, pc}
 8024696:	bf00      	nop
 8024698:	e000e010 	.word	0xe000e010

0802469c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802469c:	b580      	push	{r7, lr}
 802469e:	b082      	sub	sp, #8
 80246a0:	af00      	add	r7, sp, #0
 80246a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80246a4:	6878      	ldr	r0, [r7, #4]
 80246a6:	f7ff ff29 	bl	80244fc <__NVIC_SetPriorityGrouping>
}
 80246aa:	bf00      	nop
 80246ac:	3708      	adds	r7, #8
 80246ae:	46bd      	mov	sp, r7
 80246b0:	bd80      	pop	{r7, pc}

080246b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80246b2:	b580      	push	{r7, lr}
 80246b4:	b086      	sub	sp, #24
 80246b6:	af00      	add	r7, sp, #0
 80246b8:	4603      	mov	r3, r0
 80246ba:	60b9      	str	r1, [r7, #8]
 80246bc:	607a      	str	r2, [r7, #4]
 80246be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80246c0:	2300      	movs	r3, #0
 80246c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80246c4:	f7ff ff3e 	bl	8024544 <__NVIC_GetPriorityGrouping>
 80246c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80246ca:	687a      	ldr	r2, [r7, #4]
 80246cc:	68b9      	ldr	r1, [r7, #8]
 80246ce:	6978      	ldr	r0, [r7, #20]
 80246d0:	f7ff ff8e 	bl	80245f0 <NVIC_EncodePriority>
 80246d4:	4602      	mov	r2, r0
 80246d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80246da:	4611      	mov	r1, r2
 80246dc:	4618      	mov	r0, r3
 80246de:	f7ff ff5d 	bl	802459c <__NVIC_SetPriority>
}
 80246e2:	bf00      	nop
 80246e4:	3718      	adds	r7, #24
 80246e6:	46bd      	mov	sp, r7
 80246e8:	bd80      	pop	{r7, pc}

080246ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80246ea:	b580      	push	{r7, lr}
 80246ec:	b082      	sub	sp, #8
 80246ee:	af00      	add	r7, sp, #0
 80246f0:	4603      	mov	r3, r0
 80246f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80246f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80246f8:	4618      	mov	r0, r3
 80246fa:	f7ff ff31 	bl	8024560 <__NVIC_EnableIRQ>
}
 80246fe:	bf00      	nop
 8024700:	3708      	adds	r7, #8
 8024702:	46bd      	mov	sp, r7
 8024704:	bd80      	pop	{r7, pc}

08024706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8024706:	b580      	push	{r7, lr}
 8024708:	b082      	sub	sp, #8
 802470a:	af00      	add	r7, sp, #0
 802470c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802470e:	6878      	ldr	r0, [r7, #4]
 8024710:	f7ff ffa2 	bl	8024658 <SysTick_Config>
 8024714:	4603      	mov	r3, r0
}
 8024716:	4618      	mov	r0, r3
 8024718:	3708      	adds	r7, #8
 802471a:	46bd      	mov	sp, r7
 802471c:	bd80      	pop	{r7, pc}
	...

08024720 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8024720:	b580      	push	{r7, lr}
 8024722:	b086      	sub	sp, #24
 8024724:	af00      	add	r7, sp, #0
 8024726:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8024728:	2300      	movs	r3, #0
 802472a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 802472c:	f7ff fac4 	bl	8023cb8 <HAL_GetTick>
 8024730:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8024732:	687b      	ldr	r3, [r7, #4]
 8024734:	2b00      	cmp	r3, #0
 8024736:	d101      	bne.n	802473c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8024738:	2301      	movs	r3, #1
 802473a:	e099      	b.n	8024870 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 802473c:	687b      	ldr	r3, [r7, #4]
 802473e:	2200      	movs	r2, #0
 8024740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8024744:	687b      	ldr	r3, [r7, #4]
 8024746:	2202      	movs	r2, #2
 8024748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 802474c:	687b      	ldr	r3, [r7, #4]
 802474e:	681b      	ldr	r3, [r3, #0]
 8024750:	681a      	ldr	r2, [r3, #0]
 8024752:	687b      	ldr	r3, [r7, #4]
 8024754:	681b      	ldr	r3, [r3, #0]
 8024756:	f022 0201 	bic.w	r2, r2, #1
 802475a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802475c:	e00f      	b.n	802477e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802475e:	f7ff faab 	bl	8023cb8 <HAL_GetTick>
 8024762:	4602      	mov	r2, r0
 8024764:	693b      	ldr	r3, [r7, #16]
 8024766:	1ad3      	subs	r3, r2, r3
 8024768:	2b05      	cmp	r3, #5
 802476a:	d908      	bls.n	802477e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802476c:	687b      	ldr	r3, [r7, #4]
 802476e:	2220      	movs	r2, #32
 8024770:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8024772:	687b      	ldr	r3, [r7, #4]
 8024774:	2203      	movs	r2, #3
 8024776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 802477a:	2303      	movs	r3, #3
 802477c:	e078      	b.n	8024870 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802477e:	687b      	ldr	r3, [r7, #4]
 8024780:	681b      	ldr	r3, [r3, #0]
 8024782:	681b      	ldr	r3, [r3, #0]
 8024784:	f003 0301 	and.w	r3, r3, #1
 8024788:	2b00      	cmp	r3, #0
 802478a:	d1e8      	bne.n	802475e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 802478c:	687b      	ldr	r3, [r7, #4]
 802478e:	681b      	ldr	r3, [r3, #0]
 8024790:	681b      	ldr	r3, [r3, #0]
 8024792:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8024794:	697a      	ldr	r2, [r7, #20]
 8024796:	4b38      	ldr	r3, [pc, #224]	; (8024878 <HAL_DMA_Init+0x158>)
 8024798:	4013      	ands	r3, r2
 802479a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802479c:	687b      	ldr	r3, [r7, #4]
 802479e:	685a      	ldr	r2, [r3, #4]
 80247a0:	687b      	ldr	r3, [r7, #4]
 80247a2:	689b      	ldr	r3, [r3, #8]
 80247a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80247a6:	687b      	ldr	r3, [r7, #4]
 80247a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80247aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80247ac:	687b      	ldr	r3, [r7, #4]
 80247ae:	691b      	ldr	r3, [r3, #16]
 80247b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80247b2:	687b      	ldr	r3, [r7, #4]
 80247b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80247b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80247b8:	687b      	ldr	r3, [r7, #4]
 80247ba:	699b      	ldr	r3, [r3, #24]
 80247bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80247be:	687b      	ldr	r3, [r7, #4]
 80247c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80247c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80247c4:	687b      	ldr	r3, [r7, #4]
 80247c6:	6a1b      	ldr	r3, [r3, #32]
 80247c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80247ca:	697a      	ldr	r2, [r7, #20]
 80247cc:	4313      	orrs	r3, r2
 80247ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80247d0:	687b      	ldr	r3, [r7, #4]
 80247d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80247d4:	2b04      	cmp	r3, #4
 80247d6:	d107      	bne.n	80247e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80247d8:	687b      	ldr	r3, [r7, #4]
 80247da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80247dc:	687b      	ldr	r3, [r7, #4]
 80247de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80247e0:	4313      	orrs	r3, r2
 80247e2:	697a      	ldr	r2, [r7, #20]
 80247e4:	4313      	orrs	r3, r2
 80247e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80247e8:	687b      	ldr	r3, [r7, #4]
 80247ea:	681b      	ldr	r3, [r3, #0]
 80247ec:	697a      	ldr	r2, [r7, #20]
 80247ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80247f0:	687b      	ldr	r3, [r7, #4]
 80247f2:	681b      	ldr	r3, [r3, #0]
 80247f4:	695b      	ldr	r3, [r3, #20]
 80247f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80247f8:	697b      	ldr	r3, [r7, #20]
 80247fa:	f023 0307 	bic.w	r3, r3, #7
 80247fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8024800:	687b      	ldr	r3, [r7, #4]
 8024802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024804:	697a      	ldr	r2, [r7, #20]
 8024806:	4313      	orrs	r3, r2
 8024808:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802480a:	687b      	ldr	r3, [r7, #4]
 802480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802480e:	2b04      	cmp	r3, #4
 8024810:	d117      	bne.n	8024842 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8024812:	687b      	ldr	r3, [r7, #4]
 8024814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024816:	697a      	ldr	r2, [r7, #20]
 8024818:	4313      	orrs	r3, r2
 802481a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802481c:	687b      	ldr	r3, [r7, #4]
 802481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024820:	2b00      	cmp	r3, #0
 8024822:	d00e      	beq.n	8024842 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8024824:	6878      	ldr	r0, [r7, #4]
 8024826:	f000 fa6f 	bl	8024d08 <DMA_CheckFifoParam>
 802482a:	4603      	mov	r3, r0
 802482c:	2b00      	cmp	r3, #0
 802482e:	d008      	beq.n	8024842 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8024830:	687b      	ldr	r3, [r7, #4]
 8024832:	2240      	movs	r2, #64	; 0x40
 8024834:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8024836:	687b      	ldr	r3, [r7, #4]
 8024838:	2201      	movs	r2, #1
 802483a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 802483e:	2301      	movs	r3, #1
 8024840:	e016      	b.n	8024870 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8024842:	687b      	ldr	r3, [r7, #4]
 8024844:	681b      	ldr	r3, [r3, #0]
 8024846:	697a      	ldr	r2, [r7, #20]
 8024848:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802484a:	6878      	ldr	r0, [r7, #4]
 802484c:	f000 fa26 	bl	8024c9c <DMA_CalcBaseAndBitshift>
 8024850:	4603      	mov	r3, r0
 8024852:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8024854:	687b      	ldr	r3, [r7, #4]
 8024856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024858:	223f      	movs	r2, #63	; 0x3f
 802485a:	409a      	lsls	r2, r3
 802485c:	68fb      	ldr	r3, [r7, #12]
 802485e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8024860:	687b      	ldr	r3, [r7, #4]
 8024862:	2200      	movs	r2, #0
 8024864:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8024866:	687b      	ldr	r3, [r7, #4]
 8024868:	2201      	movs	r2, #1
 802486a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802486e:	2300      	movs	r3, #0
}
 8024870:	4618      	mov	r0, r3
 8024872:	3718      	adds	r7, #24
 8024874:	46bd      	mov	sp, r7
 8024876:	bd80      	pop	{r7, pc}
 8024878:	f010803f 	.word	0xf010803f

0802487c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802487c:	b580      	push	{r7, lr}
 802487e:	b086      	sub	sp, #24
 8024880:	af00      	add	r7, sp, #0
 8024882:	60f8      	str	r0, [r7, #12]
 8024884:	60b9      	str	r1, [r7, #8]
 8024886:	607a      	str	r2, [r7, #4]
 8024888:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802488a:	2300      	movs	r3, #0
 802488c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802488e:	68fb      	ldr	r3, [r7, #12]
 8024890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024892:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8024894:	68fb      	ldr	r3, [r7, #12]
 8024896:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802489a:	2b01      	cmp	r3, #1
 802489c:	d101      	bne.n	80248a2 <HAL_DMA_Start_IT+0x26>
 802489e:	2302      	movs	r3, #2
 80248a0:	e040      	b.n	8024924 <HAL_DMA_Start_IT+0xa8>
 80248a2:	68fb      	ldr	r3, [r7, #12]
 80248a4:	2201      	movs	r2, #1
 80248a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80248aa:	68fb      	ldr	r3, [r7, #12]
 80248ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80248b0:	b2db      	uxtb	r3, r3
 80248b2:	2b01      	cmp	r3, #1
 80248b4:	d12f      	bne.n	8024916 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80248b6:	68fb      	ldr	r3, [r7, #12]
 80248b8:	2202      	movs	r2, #2
 80248ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80248be:	68fb      	ldr	r3, [r7, #12]
 80248c0:	2200      	movs	r2, #0
 80248c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80248c4:	683b      	ldr	r3, [r7, #0]
 80248c6:	687a      	ldr	r2, [r7, #4]
 80248c8:	68b9      	ldr	r1, [r7, #8]
 80248ca:	68f8      	ldr	r0, [r7, #12]
 80248cc:	f000 f9b8 	bl	8024c40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80248d0:	68fb      	ldr	r3, [r7, #12]
 80248d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80248d4:	223f      	movs	r2, #63	; 0x3f
 80248d6:	409a      	lsls	r2, r3
 80248d8:	693b      	ldr	r3, [r7, #16]
 80248da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80248dc:	68fb      	ldr	r3, [r7, #12]
 80248de:	681b      	ldr	r3, [r3, #0]
 80248e0:	681a      	ldr	r2, [r3, #0]
 80248e2:	68fb      	ldr	r3, [r7, #12]
 80248e4:	681b      	ldr	r3, [r3, #0]
 80248e6:	f042 0216 	orr.w	r2, r2, #22
 80248ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80248ec:	68fb      	ldr	r3, [r7, #12]
 80248ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80248f0:	2b00      	cmp	r3, #0
 80248f2:	d007      	beq.n	8024904 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80248f4:	68fb      	ldr	r3, [r7, #12]
 80248f6:	681b      	ldr	r3, [r3, #0]
 80248f8:	681a      	ldr	r2, [r3, #0]
 80248fa:	68fb      	ldr	r3, [r7, #12]
 80248fc:	681b      	ldr	r3, [r3, #0]
 80248fe:	f042 0208 	orr.w	r2, r2, #8
 8024902:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8024904:	68fb      	ldr	r3, [r7, #12]
 8024906:	681b      	ldr	r3, [r3, #0]
 8024908:	681a      	ldr	r2, [r3, #0]
 802490a:	68fb      	ldr	r3, [r7, #12]
 802490c:	681b      	ldr	r3, [r3, #0]
 802490e:	f042 0201 	orr.w	r2, r2, #1
 8024912:	601a      	str	r2, [r3, #0]
 8024914:	e005      	b.n	8024922 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8024916:	68fb      	ldr	r3, [r7, #12]
 8024918:	2200      	movs	r2, #0
 802491a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 802491e:	2302      	movs	r3, #2
 8024920:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8024922:	7dfb      	ldrb	r3, [r7, #23]
}
 8024924:	4618      	mov	r0, r3
 8024926:	3718      	adds	r7, #24
 8024928:	46bd      	mov	sp, r7
 802492a:	bd80      	pop	{r7, pc}

0802492c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802492c:	b580      	push	{r7, lr}
 802492e:	b086      	sub	sp, #24
 8024930:	af00      	add	r7, sp, #0
 8024932:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8024934:	2300      	movs	r3, #0
 8024936:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8024938:	4b92      	ldr	r3, [pc, #584]	; (8024b84 <HAL_DMA_IRQHandler+0x258>)
 802493a:	681b      	ldr	r3, [r3, #0]
 802493c:	4a92      	ldr	r2, [pc, #584]	; (8024b88 <HAL_DMA_IRQHandler+0x25c>)
 802493e:	fba2 2303 	umull	r2, r3, r2, r3
 8024942:	0a9b      	lsrs	r3, r3, #10
 8024944:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8024946:	687b      	ldr	r3, [r7, #4]
 8024948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802494a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 802494c:	693b      	ldr	r3, [r7, #16]
 802494e:	681b      	ldr	r3, [r3, #0]
 8024950:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8024952:	687b      	ldr	r3, [r7, #4]
 8024954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024956:	2208      	movs	r2, #8
 8024958:	409a      	lsls	r2, r3
 802495a:	68fb      	ldr	r3, [r7, #12]
 802495c:	4013      	ands	r3, r2
 802495e:	2b00      	cmp	r3, #0
 8024960:	d01a      	beq.n	8024998 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8024962:	687b      	ldr	r3, [r7, #4]
 8024964:	681b      	ldr	r3, [r3, #0]
 8024966:	681b      	ldr	r3, [r3, #0]
 8024968:	f003 0304 	and.w	r3, r3, #4
 802496c:	2b00      	cmp	r3, #0
 802496e:	d013      	beq.n	8024998 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8024970:	687b      	ldr	r3, [r7, #4]
 8024972:	681b      	ldr	r3, [r3, #0]
 8024974:	681a      	ldr	r2, [r3, #0]
 8024976:	687b      	ldr	r3, [r7, #4]
 8024978:	681b      	ldr	r3, [r3, #0]
 802497a:	f022 0204 	bic.w	r2, r2, #4
 802497e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8024980:	687b      	ldr	r3, [r7, #4]
 8024982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024984:	2208      	movs	r2, #8
 8024986:	409a      	lsls	r2, r3
 8024988:	693b      	ldr	r3, [r7, #16]
 802498a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 802498c:	687b      	ldr	r3, [r7, #4]
 802498e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024990:	f043 0201 	orr.w	r2, r3, #1
 8024994:	687b      	ldr	r3, [r7, #4]
 8024996:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8024998:	687b      	ldr	r3, [r7, #4]
 802499a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802499c:	2201      	movs	r2, #1
 802499e:	409a      	lsls	r2, r3
 80249a0:	68fb      	ldr	r3, [r7, #12]
 80249a2:	4013      	ands	r3, r2
 80249a4:	2b00      	cmp	r3, #0
 80249a6:	d012      	beq.n	80249ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80249a8:	687b      	ldr	r3, [r7, #4]
 80249aa:	681b      	ldr	r3, [r3, #0]
 80249ac:	695b      	ldr	r3, [r3, #20]
 80249ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80249b2:	2b00      	cmp	r3, #0
 80249b4:	d00b      	beq.n	80249ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80249b6:	687b      	ldr	r3, [r7, #4]
 80249b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80249ba:	2201      	movs	r2, #1
 80249bc:	409a      	lsls	r2, r3
 80249be:	693b      	ldr	r3, [r7, #16]
 80249c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80249c2:	687b      	ldr	r3, [r7, #4]
 80249c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80249c6:	f043 0202 	orr.w	r2, r3, #2
 80249ca:	687b      	ldr	r3, [r7, #4]
 80249cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80249ce:	687b      	ldr	r3, [r7, #4]
 80249d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80249d2:	2204      	movs	r2, #4
 80249d4:	409a      	lsls	r2, r3
 80249d6:	68fb      	ldr	r3, [r7, #12]
 80249d8:	4013      	ands	r3, r2
 80249da:	2b00      	cmp	r3, #0
 80249dc:	d012      	beq.n	8024a04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80249de:	687b      	ldr	r3, [r7, #4]
 80249e0:	681b      	ldr	r3, [r3, #0]
 80249e2:	681b      	ldr	r3, [r3, #0]
 80249e4:	f003 0302 	and.w	r3, r3, #2
 80249e8:	2b00      	cmp	r3, #0
 80249ea:	d00b      	beq.n	8024a04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80249ec:	687b      	ldr	r3, [r7, #4]
 80249ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80249f0:	2204      	movs	r2, #4
 80249f2:	409a      	lsls	r2, r3
 80249f4:	693b      	ldr	r3, [r7, #16]
 80249f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80249f8:	687b      	ldr	r3, [r7, #4]
 80249fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80249fc:	f043 0204 	orr.w	r2, r3, #4
 8024a00:	687b      	ldr	r3, [r7, #4]
 8024a02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8024a04:	687b      	ldr	r3, [r7, #4]
 8024a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024a08:	2210      	movs	r2, #16
 8024a0a:	409a      	lsls	r2, r3
 8024a0c:	68fb      	ldr	r3, [r7, #12]
 8024a0e:	4013      	ands	r3, r2
 8024a10:	2b00      	cmp	r3, #0
 8024a12:	d043      	beq.n	8024a9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8024a14:	687b      	ldr	r3, [r7, #4]
 8024a16:	681b      	ldr	r3, [r3, #0]
 8024a18:	681b      	ldr	r3, [r3, #0]
 8024a1a:	f003 0308 	and.w	r3, r3, #8
 8024a1e:	2b00      	cmp	r3, #0
 8024a20:	d03c      	beq.n	8024a9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8024a22:	687b      	ldr	r3, [r7, #4]
 8024a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024a26:	2210      	movs	r2, #16
 8024a28:	409a      	lsls	r2, r3
 8024a2a:	693b      	ldr	r3, [r7, #16]
 8024a2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8024a2e:	687b      	ldr	r3, [r7, #4]
 8024a30:	681b      	ldr	r3, [r3, #0]
 8024a32:	681b      	ldr	r3, [r3, #0]
 8024a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8024a38:	2b00      	cmp	r3, #0
 8024a3a:	d018      	beq.n	8024a6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8024a3c:	687b      	ldr	r3, [r7, #4]
 8024a3e:	681b      	ldr	r3, [r3, #0]
 8024a40:	681b      	ldr	r3, [r3, #0]
 8024a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8024a46:	2b00      	cmp	r3, #0
 8024a48:	d108      	bne.n	8024a5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8024a4a:	687b      	ldr	r3, [r7, #4]
 8024a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a4e:	2b00      	cmp	r3, #0
 8024a50:	d024      	beq.n	8024a9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8024a52:	687b      	ldr	r3, [r7, #4]
 8024a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a56:	6878      	ldr	r0, [r7, #4]
 8024a58:	4798      	blx	r3
 8024a5a:	e01f      	b.n	8024a9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8024a5c:	687b      	ldr	r3, [r7, #4]
 8024a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024a60:	2b00      	cmp	r3, #0
 8024a62:	d01b      	beq.n	8024a9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8024a64:	687b      	ldr	r3, [r7, #4]
 8024a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024a68:	6878      	ldr	r0, [r7, #4]
 8024a6a:	4798      	blx	r3
 8024a6c:	e016      	b.n	8024a9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8024a6e:	687b      	ldr	r3, [r7, #4]
 8024a70:	681b      	ldr	r3, [r3, #0]
 8024a72:	681b      	ldr	r3, [r3, #0]
 8024a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024a78:	2b00      	cmp	r3, #0
 8024a7a:	d107      	bne.n	8024a8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8024a7c:	687b      	ldr	r3, [r7, #4]
 8024a7e:	681b      	ldr	r3, [r3, #0]
 8024a80:	681a      	ldr	r2, [r3, #0]
 8024a82:	687b      	ldr	r3, [r7, #4]
 8024a84:	681b      	ldr	r3, [r3, #0]
 8024a86:	f022 0208 	bic.w	r2, r2, #8
 8024a8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8024a8c:	687b      	ldr	r3, [r7, #4]
 8024a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a90:	2b00      	cmp	r3, #0
 8024a92:	d003      	beq.n	8024a9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8024a94:	687b      	ldr	r3, [r7, #4]
 8024a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a98:	6878      	ldr	r0, [r7, #4]
 8024a9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8024a9c:	687b      	ldr	r3, [r7, #4]
 8024a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024aa0:	2220      	movs	r2, #32
 8024aa2:	409a      	lsls	r2, r3
 8024aa4:	68fb      	ldr	r3, [r7, #12]
 8024aa6:	4013      	ands	r3, r2
 8024aa8:	2b00      	cmp	r3, #0
 8024aaa:	f000 808e 	beq.w	8024bca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8024aae:	687b      	ldr	r3, [r7, #4]
 8024ab0:	681b      	ldr	r3, [r3, #0]
 8024ab2:	681b      	ldr	r3, [r3, #0]
 8024ab4:	f003 0310 	and.w	r3, r3, #16
 8024ab8:	2b00      	cmp	r3, #0
 8024aba:	f000 8086 	beq.w	8024bca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8024abe:	687b      	ldr	r3, [r7, #4]
 8024ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024ac2:	2220      	movs	r2, #32
 8024ac4:	409a      	lsls	r2, r3
 8024ac6:	693b      	ldr	r3, [r7, #16]
 8024ac8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8024aca:	687b      	ldr	r3, [r7, #4]
 8024acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8024ad0:	b2db      	uxtb	r3, r3
 8024ad2:	2b05      	cmp	r3, #5
 8024ad4:	d136      	bne.n	8024b44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8024ad6:	687b      	ldr	r3, [r7, #4]
 8024ad8:	681b      	ldr	r3, [r3, #0]
 8024ada:	681a      	ldr	r2, [r3, #0]
 8024adc:	687b      	ldr	r3, [r7, #4]
 8024ade:	681b      	ldr	r3, [r3, #0]
 8024ae0:	f022 0216 	bic.w	r2, r2, #22
 8024ae4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8024ae6:	687b      	ldr	r3, [r7, #4]
 8024ae8:	681b      	ldr	r3, [r3, #0]
 8024aea:	695a      	ldr	r2, [r3, #20]
 8024aec:	687b      	ldr	r3, [r7, #4]
 8024aee:	681b      	ldr	r3, [r3, #0]
 8024af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8024af4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8024af6:	687b      	ldr	r3, [r7, #4]
 8024af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024afa:	2b00      	cmp	r3, #0
 8024afc:	d103      	bne.n	8024b06 <HAL_DMA_IRQHandler+0x1da>
 8024afe:	687b      	ldr	r3, [r7, #4]
 8024b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024b02:	2b00      	cmp	r3, #0
 8024b04:	d007      	beq.n	8024b16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8024b06:	687b      	ldr	r3, [r7, #4]
 8024b08:	681b      	ldr	r3, [r3, #0]
 8024b0a:	681a      	ldr	r2, [r3, #0]
 8024b0c:	687b      	ldr	r3, [r7, #4]
 8024b0e:	681b      	ldr	r3, [r3, #0]
 8024b10:	f022 0208 	bic.w	r2, r2, #8
 8024b14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8024b16:	687b      	ldr	r3, [r7, #4]
 8024b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024b1a:	223f      	movs	r2, #63	; 0x3f
 8024b1c:	409a      	lsls	r2, r3
 8024b1e:	693b      	ldr	r3, [r7, #16]
 8024b20:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8024b22:	687b      	ldr	r3, [r7, #4]
 8024b24:	2200      	movs	r2, #0
 8024b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8024b2a:	687b      	ldr	r3, [r7, #4]
 8024b2c:	2201      	movs	r2, #1
 8024b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8024b32:	687b      	ldr	r3, [r7, #4]
 8024b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024b36:	2b00      	cmp	r3, #0
 8024b38:	d07d      	beq.n	8024c36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8024b3a:	687b      	ldr	r3, [r7, #4]
 8024b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024b3e:	6878      	ldr	r0, [r7, #4]
 8024b40:	4798      	blx	r3
        }
        return;
 8024b42:	e078      	b.n	8024c36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8024b44:	687b      	ldr	r3, [r7, #4]
 8024b46:	681b      	ldr	r3, [r3, #0]
 8024b48:	681b      	ldr	r3, [r3, #0]
 8024b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8024b4e:	2b00      	cmp	r3, #0
 8024b50:	d01c      	beq.n	8024b8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8024b52:	687b      	ldr	r3, [r7, #4]
 8024b54:	681b      	ldr	r3, [r3, #0]
 8024b56:	681b      	ldr	r3, [r3, #0]
 8024b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8024b5c:	2b00      	cmp	r3, #0
 8024b5e:	d108      	bne.n	8024b72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8024b60:	687b      	ldr	r3, [r7, #4]
 8024b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024b64:	2b00      	cmp	r3, #0
 8024b66:	d030      	beq.n	8024bca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8024b68:	687b      	ldr	r3, [r7, #4]
 8024b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024b6c:	6878      	ldr	r0, [r7, #4]
 8024b6e:	4798      	blx	r3
 8024b70:	e02b      	b.n	8024bca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8024b72:	687b      	ldr	r3, [r7, #4]
 8024b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024b76:	2b00      	cmp	r3, #0
 8024b78:	d027      	beq.n	8024bca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8024b7a:	687b      	ldr	r3, [r7, #4]
 8024b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024b7e:	6878      	ldr	r0, [r7, #4]
 8024b80:	4798      	blx	r3
 8024b82:	e022      	b.n	8024bca <HAL_DMA_IRQHandler+0x29e>
 8024b84:	20000000 	.word	0x20000000
 8024b88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8024b8c:	687b      	ldr	r3, [r7, #4]
 8024b8e:	681b      	ldr	r3, [r3, #0]
 8024b90:	681b      	ldr	r3, [r3, #0]
 8024b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024b96:	2b00      	cmp	r3, #0
 8024b98:	d10f      	bne.n	8024bba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8024b9a:	687b      	ldr	r3, [r7, #4]
 8024b9c:	681b      	ldr	r3, [r3, #0]
 8024b9e:	681a      	ldr	r2, [r3, #0]
 8024ba0:	687b      	ldr	r3, [r7, #4]
 8024ba2:	681b      	ldr	r3, [r3, #0]
 8024ba4:	f022 0210 	bic.w	r2, r2, #16
 8024ba8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8024baa:	687b      	ldr	r3, [r7, #4]
 8024bac:	2200      	movs	r2, #0
 8024bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8024bb2:	687b      	ldr	r3, [r7, #4]
 8024bb4:	2201      	movs	r2, #1
 8024bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8024bba:	687b      	ldr	r3, [r7, #4]
 8024bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024bbe:	2b00      	cmp	r3, #0
 8024bc0:	d003      	beq.n	8024bca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8024bc2:	687b      	ldr	r3, [r7, #4]
 8024bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024bc6:	6878      	ldr	r0, [r7, #4]
 8024bc8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8024bca:	687b      	ldr	r3, [r7, #4]
 8024bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024bce:	2b00      	cmp	r3, #0
 8024bd0:	d032      	beq.n	8024c38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8024bd2:	687b      	ldr	r3, [r7, #4]
 8024bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024bd6:	f003 0301 	and.w	r3, r3, #1
 8024bda:	2b00      	cmp	r3, #0
 8024bdc:	d022      	beq.n	8024c24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8024bde:	687b      	ldr	r3, [r7, #4]
 8024be0:	2205      	movs	r2, #5
 8024be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8024be6:	687b      	ldr	r3, [r7, #4]
 8024be8:	681b      	ldr	r3, [r3, #0]
 8024bea:	681a      	ldr	r2, [r3, #0]
 8024bec:	687b      	ldr	r3, [r7, #4]
 8024bee:	681b      	ldr	r3, [r3, #0]
 8024bf0:	f022 0201 	bic.w	r2, r2, #1
 8024bf4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8024bf6:	68bb      	ldr	r3, [r7, #8]
 8024bf8:	3301      	adds	r3, #1
 8024bfa:	60bb      	str	r3, [r7, #8]
 8024bfc:	697a      	ldr	r2, [r7, #20]
 8024bfe:	429a      	cmp	r2, r3
 8024c00:	d307      	bcc.n	8024c12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8024c02:	687b      	ldr	r3, [r7, #4]
 8024c04:	681b      	ldr	r3, [r3, #0]
 8024c06:	681b      	ldr	r3, [r3, #0]
 8024c08:	f003 0301 	and.w	r3, r3, #1
 8024c0c:	2b00      	cmp	r3, #0
 8024c0e:	d1f2      	bne.n	8024bf6 <HAL_DMA_IRQHandler+0x2ca>
 8024c10:	e000      	b.n	8024c14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8024c12:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8024c14:	687b      	ldr	r3, [r7, #4]
 8024c16:	2200      	movs	r2, #0
 8024c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8024c1c:	687b      	ldr	r3, [r7, #4]
 8024c1e:	2201      	movs	r2, #1
 8024c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8024c24:	687b      	ldr	r3, [r7, #4]
 8024c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024c28:	2b00      	cmp	r3, #0
 8024c2a:	d005      	beq.n	8024c38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8024c2c:	687b      	ldr	r3, [r7, #4]
 8024c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024c30:	6878      	ldr	r0, [r7, #4]
 8024c32:	4798      	blx	r3
 8024c34:	e000      	b.n	8024c38 <HAL_DMA_IRQHandler+0x30c>
        return;
 8024c36:	bf00      	nop
    }
  }
}
 8024c38:	3718      	adds	r7, #24
 8024c3a:	46bd      	mov	sp, r7
 8024c3c:	bd80      	pop	{r7, pc}
 8024c3e:	bf00      	nop

08024c40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8024c40:	b480      	push	{r7}
 8024c42:	b085      	sub	sp, #20
 8024c44:	af00      	add	r7, sp, #0
 8024c46:	60f8      	str	r0, [r7, #12]
 8024c48:	60b9      	str	r1, [r7, #8]
 8024c4a:	607a      	str	r2, [r7, #4]
 8024c4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8024c4e:	68fb      	ldr	r3, [r7, #12]
 8024c50:	681b      	ldr	r3, [r3, #0]
 8024c52:	681a      	ldr	r2, [r3, #0]
 8024c54:	68fb      	ldr	r3, [r7, #12]
 8024c56:	681b      	ldr	r3, [r3, #0]
 8024c58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8024c5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8024c5e:	68fb      	ldr	r3, [r7, #12]
 8024c60:	681b      	ldr	r3, [r3, #0]
 8024c62:	683a      	ldr	r2, [r7, #0]
 8024c64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8024c66:	68fb      	ldr	r3, [r7, #12]
 8024c68:	689b      	ldr	r3, [r3, #8]
 8024c6a:	2b40      	cmp	r3, #64	; 0x40
 8024c6c:	d108      	bne.n	8024c80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8024c6e:	68fb      	ldr	r3, [r7, #12]
 8024c70:	681b      	ldr	r3, [r3, #0]
 8024c72:	687a      	ldr	r2, [r7, #4]
 8024c74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8024c76:	68fb      	ldr	r3, [r7, #12]
 8024c78:	681b      	ldr	r3, [r3, #0]
 8024c7a:	68ba      	ldr	r2, [r7, #8]
 8024c7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8024c7e:	e007      	b.n	8024c90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8024c80:	68fb      	ldr	r3, [r7, #12]
 8024c82:	681b      	ldr	r3, [r3, #0]
 8024c84:	68ba      	ldr	r2, [r7, #8]
 8024c86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8024c88:	68fb      	ldr	r3, [r7, #12]
 8024c8a:	681b      	ldr	r3, [r3, #0]
 8024c8c:	687a      	ldr	r2, [r7, #4]
 8024c8e:	60da      	str	r2, [r3, #12]
}
 8024c90:	bf00      	nop
 8024c92:	3714      	adds	r7, #20
 8024c94:	46bd      	mov	sp, r7
 8024c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c9a:	4770      	bx	lr

08024c9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8024c9c:	b480      	push	{r7}
 8024c9e:	b085      	sub	sp, #20
 8024ca0:	af00      	add	r7, sp, #0
 8024ca2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8024ca4:	687b      	ldr	r3, [r7, #4]
 8024ca6:	681b      	ldr	r3, [r3, #0]
 8024ca8:	b2db      	uxtb	r3, r3
 8024caa:	3b10      	subs	r3, #16
 8024cac:	4a14      	ldr	r2, [pc, #80]	; (8024d00 <DMA_CalcBaseAndBitshift+0x64>)
 8024cae:	fba2 2303 	umull	r2, r3, r2, r3
 8024cb2:	091b      	lsrs	r3, r3, #4
 8024cb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8024cb6:	4a13      	ldr	r2, [pc, #76]	; (8024d04 <DMA_CalcBaseAndBitshift+0x68>)
 8024cb8:	68fb      	ldr	r3, [r7, #12]
 8024cba:	4413      	add	r3, r2
 8024cbc:	781b      	ldrb	r3, [r3, #0]
 8024cbe:	461a      	mov	r2, r3
 8024cc0:	687b      	ldr	r3, [r7, #4]
 8024cc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8024cc4:	68fb      	ldr	r3, [r7, #12]
 8024cc6:	2b03      	cmp	r3, #3
 8024cc8:	d909      	bls.n	8024cde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8024cca:	687b      	ldr	r3, [r7, #4]
 8024ccc:	681b      	ldr	r3, [r3, #0]
 8024cce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8024cd2:	f023 0303 	bic.w	r3, r3, #3
 8024cd6:	1d1a      	adds	r2, r3, #4
 8024cd8:	687b      	ldr	r3, [r7, #4]
 8024cda:	659a      	str	r2, [r3, #88]	; 0x58
 8024cdc:	e007      	b.n	8024cee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8024cde:	687b      	ldr	r3, [r7, #4]
 8024ce0:	681b      	ldr	r3, [r3, #0]
 8024ce2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8024ce6:	f023 0303 	bic.w	r3, r3, #3
 8024cea:	687a      	ldr	r2, [r7, #4]
 8024cec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8024cee:	687b      	ldr	r3, [r7, #4]
 8024cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8024cf2:	4618      	mov	r0, r3
 8024cf4:	3714      	adds	r7, #20
 8024cf6:	46bd      	mov	sp, r7
 8024cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cfc:	4770      	bx	lr
 8024cfe:	bf00      	nop
 8024d00:	aaaaaaab 	.word	0xaaaaaaab
 8024d04:	08026e08 	.word	0x08026e08

08024d08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8024d08:	b480      	push	{r7}
 8024d0a:	b085      	sub	sp, #20
 8024d0c:	af00      	add	r7, sp, #0
 8024d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8024d10:	2300      	movs	r3, #0
 8024d12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8024d14:	687b      	ldr	r3, [r7, #4]
 8024d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024d18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8024d1a:	687b      	ldr	r3, [r7, #4]
 8024d1c:	699b      	ldr	r3, [r3, #24]
 8024d1e:	2b00      	cmp	r3, #0
 8024d20:	d11f      	bne.n	8024d62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8024d22:	68bb      	ldr	r3, [r7, #8]
 8024d24:	2b03      	cmp	r3, #3
 8024d26:	d855      	bhi.n	8024dd4 <DMA_CheckFifoParam+0xcc>
 8024d28:	a201      	add	r2, pc, #4	; (adr r2, 8024d30 <DMA_CheckFifoParam+0x28>)
 8024d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024d2e:	bf00      	nop
 8024d30:	08024d41 	.word	0x08024d41
 8024d34:	08024d53 	.word	0x08024d53
 8024d38:	08024d41 	.word	0x08024d41
 8024d3c:	08024dd5 	.word	0x08024dd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024d48:	2b00      	cmp	r3, #0
 8024d4a:	d045      	beq.n	8024dd8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8024d4c:	2301      	movs	r3, #1
 8024d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8024d50:	e042      	b.n	8024dd8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8024d52:	687b      	ldr	r3, [r7, #4]
 8024d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024d56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8024d5a:	d13f      	bne.n	8024ddc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8024d5c:	2301      	movs	r3, #1
 8024d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8024d60:	e03c      	b.n	8024ddc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8024d62:	687b      	ldr	r3, [r7, #4]
 8024d64:	699b      	ldr	r3, [r3, #24]
 8024d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8024d6a:	d121      	bne.n	8024db0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8024d6c:	68bb      	ldr	r3, [r7, #8]
 8024d6e:	2b03      	cmp	r3, #3
 8024d70:	d836      	bhi.n	8024de0 <DMA_CheckFifoParam+0xd8>
 8024d72:	a201      	add	r2, pc, #4	; (adr r2, 8024d78 <DMA_CheckFifoParam+0x70>)
 8024d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024d78:	08024d89 	.word	0x08024d89
 8024d7c:	08024d8f 	.word	0x08024d8f
 8024d80:	08024d89 	.word	0x08024d89
 8024d84:	08024da1 	.word	0x08024da1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8024d88:	2301      	movs	r3, #1
 8024d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8024d8c:	e02f      	b.n	8024dee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8024d8e:	687b      	ldr	r3, [r7, #4]
 8024d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024d96:	2b00      	cmp	r3, #0
 8024d98:	d024      	beq.n	8024de4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8024d9a:	2301      	movs	r3, #1
 8024d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8024d9e:	e021      	b.n	8024de4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8024da0:	687b      	ldr	r3, [r7, #4]
 8024da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024da4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8024da8:	d11e      	bne.n	8024de8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8024daa:	2301      	movs	r3, #1
 8024dac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8024dae:	e01b      	b.n	8024de8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8024db0:	68bb      	ldr	r3, [r7, #8]
 8024db2:	2b02      	cmp	r3, #2
 8024db4:	d902      	bls.n	8024dbc <DMA_CheckFifoParam+0xb4>
 8024db6:	2b03      	cmp	r3, #3
 8024db8:	d003      	beq.n	8024dc2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8024dba:	e018      	b.n	8024dee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8024dbc:	2301      	movs	r3, #1
 8024dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8024dc0:	e015      	b.n	8024dee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8024dc2:	687b      	ldr	r3, [r7, #4]
 8024dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024dc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024dca:	2b00      	cmp	r3, #0
 8024dcc:	d00e      	beq.n	8024dec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8024dce:	2301      	movs	r3, #1
 8024dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8024dd2:	e00b      	b.n	8024dec <DMA_CheckFifoParam+0xe4>
      break;
 8024dd4:	bf00      	nop
 8024dd6:	e00a      	b.n	8024dee <DMA_CheckFifoParam+0xe6>
      break;
 8024dd8:	bf00      	nop
 8024dda:	e008      	b.n	8024dee <DMA_CheckFifoParam+0xe6>
      break;
 8024ddc:	bf00      	nop
 8024dde:	e006      	b.n	8024dee <DMA_CheckFifoParam+0xe6>
      break;
 8024de0:	bf00      	nop
 8024de2:	e004      	b.n	8024dee <DMA_CheckFifoParam+0xe6>
      break;
 8024de4:	bf00      	nop
 8024de6:	e002      	b.n	8024dee <DMA_CheckFifoParam+0xe6>
      break;   
 8024de8:	bf00      	nop
 8024dea:	e000      	b.n	8024dee <DMA_CheckFifoParam+0xe6>
      break;
 8024dec:	bf00      	nop
    }
  } 
  
  return status; 
 8024dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8024df0:	4618      	mov	r0, r3
 8024df2:	3714      	adds	r7, #20
 8024df4:	46bd      	mov	sp, r7
 8024df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dfa:	4770      	bx	lr

08024dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8024dfc:	b480      	push	{r7}
 8024dfe:	b089      	sub	sp, #36	; 0x24
 8024e00:	af00      	add	r7, sp, #0
 8024e02:	6078      	str	r0, [r7, #4]
 8024e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024e06:	2300      	movs	r3, #0
 8024e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8024e0a:	2300      	movs	r3, #0
 8024e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8024e0e:	2300      	movs	r3, #0
 8024e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024e12:	2300      	movs	r3, #0
 8024e14:	61fb      	str	r3, [r7, #28]
 8024e16:	e16b      	b.n	80250f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024e18:	2201      	movs	r2, #1
 8024e1a:	69fb      	ldr	r3, [r7, #28]
 8024e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8024e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8024e22:	683b      	ldr	r3, [r7, #0]
 8024e24:	681b      	ldr	r3, [r3, #0]
 8024e26:	697a      	ldr	r2, [r7, #20]
 8024e28:	4013      	ands	r3, r2
 8024e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8024e2c:	693a      	ldr	r2, [r7, #16]
 8024e2e:	697b      	ldr	r3, [r7, #20]
 8024e30:	429a      	cmp	r2, r3
 8024e32:	f040 815a 	bne.w	80250ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8024e36:	683b      	ldr	r3, [r7, #0]
 8024e38:	685b      	ldr	r3, [r3, #4]
 8024e3a:	2b01      	cmp	r3, #1
 8024e3c:	d00b      	beq.n	8024e56 <HAL_GPIO_Init+0x5a>
 8024e3e:	683b      	ldr	r3, [r7, #0]
 8024e40:	685b      	ldr	r3, [r3, #4]
 8024e42:	2b02      	cmp	r3, #2
 8024e44:	d007      	beq.n	8024e56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8024e46:	683b      	ldr	r3, [r7, #0]
 8024e48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8024e4a:	2b11      	cmp	r3, #17
 8024e4c:	d003      	beq.n	8024e56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8024e4e:	683b      	ldr	r3, [r7, #0]
 8024e50:	685b      	ldr	r3, [r3, #4]
 8024e52:	2b12      	cmp	r3, #18
 8024e54:	d130      	bne.n	8024eb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8024e56:	687b      	ldr	r3, [r7, #4]
 8024e58:	689b      	ldr	r3, [r3, #8]
 8024e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024e5c:	69fb      	ldr	r3, [r7, #28]
 8024e5e:	005b      	lsls	r3, r3, #1
 8024e60:	2203      	movs	r2, #3
 8024e62:	fa02 f303 	lsl.w	r3, r2, r3
 8024e66:	43db      	mvns	r3, r3
 8024e68:	69ba      	ldr	r2, [r7, #24]
 8024e6a:	4013      	ands	r3, r2
 8024e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8024e6e:	683b      	ldr	r3, [r7, #0]
 8024e70:	68da      	ldr	r2, [r3, #12]
 8024e72:	69fb      	ldr	r3, [r7, #28]
 8024e74:	005b      	lsls	r3, r3, #1
 8024e76:	fa02 f303 	lsl.w	r3, r2, r3
 8024e7a:	69ba      	ldr	r2, [r7, #24]
 8024e7c:	4313      	orrs	r3, r2
 8024e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8024e80:	687b      	ldr	r3, [r7, #4]
 8024e82:	69ba      	ldr	r2, [r7, #24]
 8024e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8024e86:	687b      	ldr	r3, [r7, #4]
 8024e88:	685b      	ldr	r3, [r3, #4]
 8024e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024e8c:	2201      	movs	r2, #1
 8024e8e:	69fb      	ldr	r3, [r7, #28]
 8024e90:	fa02 f303 	lsl.w	r3, r2, r3
 8024e94:	43db      	mvns	r3, r3
 8024e96:	69ba      	ldr	r2, [r7, #24]
 8024e98:	4013      	ands	r3, r2
 8024e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8024e9c:	683b      	ldr	r3, [r7, #0]
 8024e9e:	685b      	ldr	r3, [r3, #4]
 8024ea0:	091b      	lsrs	r3, r3, #4
 8024ea2:	f003 0201 	and.w	r2, r3, #1
 8024ea6:	69fb      	ldr	r3, [r7, #28]
 8024ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8024eac:	69ba      	ldr	r2, [r7, #24]
 8024eae:	4313      	orrs	r3, r2
 8024eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8024eb2:	687b      	ldr	r3, [r7, #4]
 8024eb4:	69ba      	ldr	r2, [r7, #24]
 8024eb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8024eb8:	687b      	ldr	r3, [r7, #4]
 8024eba:	68db      	ldr	r3, [r3, #12]
 8024ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8024ebe:	69fb      	ldr	r3, [r7, #28]
 8024ec0:	005b      	lsls	r3, r3, #1
 8024ec2:	2203      	movs	r2, #3
 8024ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8024ec8:	43db      	mvns	r3, r3
 8024eca:	69ba      	ldr	r2, [r7, #24]
 8024ecc:	4013      	ands	r3, r2
 8024ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8024ed0:	683b      	ldr	r3, [r7, #0]
 8024ed2:	689a      	ldr	r2, [r3, #8]
 8024ed4:	69fb      	ldr	r3, [r7, #28]
 8024ed6:	005b      	lsls	r3, r3, #1
 8024ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8024edc:	69ba      	ldr	r2, [r7, #24]
 8024ede:	4313      	orrs	r3, r2
 8024ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8024ee2:	687b      	ldr	r3, [r7, #4]
 8024ee4:	69ba      	ldr	r2, [r7, #24]
 8024ee6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8024ee8:	683b      	ldr	r3, [r7, #0]
 8024eea:	685b      	ldr	r3, [r3, #4]
 8024eec:	2b02      	cmp	r3, #2
 8024eee:	d003      	beq.n	8024ef8 <HAL_GPIO_Init+0xfc>
 8024ef0:	683b      	ldr	r3, [r7, #0]
 8024ef2:	685b      	ldr	r3, [r3, #4]
 8024ef4:	2b12      	cmp	r3, #18
 8024ef6:	d123      	bne.n	8024f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8024ef8:	69fb      	ldr	r3, [r7, #28]
 8024efa:	08da      	lsrs	r2, r3, #3
 8024efc:	687b      	ldr	r3, [r7, #4]
 8024efe:	3208      	adds	r2, #8
 8024f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024f06:	69fb      	ldr	r3, [r7, #28]
 8024f08:	f003 0307 	and.w	r3, r3, #7
 8024f0c:	009b      	lsls	r3, r3, #2
 8024f0e:	220f      	movs	r2, #15
 8024f10:	fa02 f303 	lsl.w	r3, r2, r3
 8024f14:	43db      	mvns	r3, r3
 8024f16:	69ba      	ldr	r2, [r7, #24]
 8024f18:	4013      	ands	r3, r2
 8024f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8024f1c:	683b      	ldr	r3, [r7, #0]
 8024f1e:	691a      	ldr	r2, [r3, #16]
 8024f20:	69fb      	ldr	r3, [r7, #28]
 8024f22:	f003 0307 	and.w	r3, r3, #7
 8024f26:	009b      	lsls	r3, r3, #2
 8024f28:	fa02 f303 	lsl.w	r3, r2, r3
 8024f2c:	69ba      	ldr	r2, [r7, #24]
 8024f2e:	4313      	orrs	r3, r2
 8024f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8024f32:	69fb      	ldr	r3, [r7, #28]
 8024f34:	08da      	lsrs	r2, r3, #3
 8024f36:	687b      	ldr	r3, [r7, #4]
 8024f38:	3208      	adds	r2, #8
 8024f3a:	69b9      	ldr	r1, [r7, #24]
 8024f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8024f40:	687b      	ldr	r3, [r7, #4]
 8024f42:	681b      	ldr	r3, [r3, #0]
 8024f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024f46:	69fb      	ldr	r3, [r7, #28]
 8024f48:	005b      	lsls	r3, r3, #1
 8024f4a:	2203      	movs	r2, #3
 8024f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8024f50:	43db      	mvns	r3, r3
 8024f52:	69ba      	ldr	r2, [r7, #24]
 8024f54:	4013      	ands	r3, r2
 8024f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8024f58:	683b      	ldr	r3, [r7, #0]
 8024f5a:	685b      	ldr	r3, [r3, #4]
 8024f5c:	f003 0203 	and.w	r2, r3, #3
 8024f60:	69fb      	ldr	r3, [r7, #28]
 8024f62:	005b      	lsls	r3, r3, #1
 8024f64:	fa02 f303 	lsl.w	r3, r2, r3
 8024f68:	69ba      	ldr	r2, [r7, #24]
 8024f6a:	4313      	orrs	r3, r2
 8024f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8024f6e:	687b      	ldr	r3, [r7, #4]
 8024f70:	69ba      	ldr	r2, [r7, #24]
 8024f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8024f74:	683b      	ldr	r3, [r7, #0]
 8024f76:	685b      	ldr	r3, [r3, #4]
 8024f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8024f7c:	2b00      	cmp	r3, #0
 8024f7e:	f000 80b4 	beq.w	80250ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8024f82:	2300      	movs	r3, #0
 8024f84:	60fb      	str	r3, [r7, #12]
 8024f86:	4b5f      	ldr	r3, [pc, #380]	; (8025104 <HAL_GPIO_Init+0x308>)
 8024f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024f8a:	4a5e      	ldr	r2, [pc, #376]	; (8025104 <HAL_GPIO_Init+0x308>)
 8024f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024f90:	6453      	str	r3, [r2, #68]	; 0x44
 8024f92:	4b5c      	ldr	r3, [pc, #368]	; (8025104 <HAL_GPIO_Init+0x308>)
 8024f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024f9a:	60fb      	str	r3, [r7, #12]
 8024f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8024f9e:	4a5a      	ldr	r2, [pc, #360]	; (8025108 <HAL_GPIO_Init+0x30c>)
 8024fa0:	69fb      	ldr	r3, [r7, #28]
 8024fa2:	089b      	lsrs	r3, r3, #2
 8024fa4:	3302      	adds	r3, #2
 8024fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8024fac:	69fb      	ldr	r3, [r7, #28]
 8024fae:	f003 0303 	and.w	r3, r3, #3
 8024fb2:	009b      	lsls	r3, r3, #2
 8024fb4:	220f      	movs	r2, #15
 8024fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8024fba:	43db      	mvns	r3, r3
 8024fbc:	69ba      	ldr	r2, [r7, #24]
 8024fbe:	4013      	ands	r3, r2
 8024fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8024fc2:	687b      	ldr	r3, [r7, #4]
 8024fc4:	4a51      	ldr	r2, [pc, #324]	; (802510c <HAL_GPIO_Init+0x310>)
 8024fc6:	4293      	cmp	r3, r2
 8024fc8:	d02b      	beq.n	8025022 <HAL_GPIO_Init+0x226>
 8024fca:	687b      	ldr	r3, [r7, #4]
 8024fcc:	4a50      	ldr	r2, [pc, #320]	; (8025110 <HAL_GPIO_Init+0x314>)
 8024fce:	4293      	cmp	r3, r2
 8024fd0:	d025      	beq.n	802501e <HAL_GPIO_Init+0x222>
 8024fd2:	687b      	ldr	r3, [r7, #4]
 8024fd4:	4a4f      	ldr	r2, [pc, #316]	; (8025114 <HAL_GPIO_Init+0x318>)
 8024fd6:	4293      	cmp	r3, r2
 8024fd8:	d01f      	beq.n	802501a <HAL_GPIO_Init+0x21e>
 8024fda:	687b      	ldr	r3, [r7, #4]
 8024fdc:	4a4e      	ldr	r2, [pc, #312]	; (8025118 <HAL_GPIO_Init+0x31c>)
 8024fde:	4293      	cmp	r3, r2
 8024fe0:	d019      	beq.n	8025016 <HAL_GPIO_Init+0x21a>
 8024fe2:	687b      	ldr	r3, [r7, #4]
 8024fe4:	4a4d      	ldr	r2, [pc, #308]	; (802511c <HAL_GPIO_Init+0x320>)
 8024fe6:	4293      	cmp	r3, r2
 8024fe8:	d013      	beq.n	8025012 <HAL_GPIO_Init+0x216>
 8024fea:	687b      	ldr	r3, [r7, #4]
 8024fec:	4a4c      	ldr	r2, [pc, #304]	; (8025120 <HAL_GPIO_Init+0x324>)
 8024fee:	4293      	cmp	r3, r2
 8024ff0:	d00d      	beq.n	802500e <HAL_GPIO_Init+0x212>
 8024ff2:	687b      	ldr	r3, [r7, #4]
 8024ff4:	4a4b      	ldr	r2, [pc, #300]	; (8025124 <HAL_GPIO_Init+0x328>)
 8024ff6:	4293      	cmp	r3, r2
 8024ff8:	d007      	beq.n	802500a <HAL_GPIO_Init+0x20e>
 8024ffa:	687b      	ldr	r3, [r7, #4]
 8024ffc:	4a4a      	ldr	r2, [pc, #296]	; (8025128 <HAL_GPIO_Init+0x32c>)
 8024ffe:	4293      	cmp	r3, r2
 8025000:	d101      	bne.n	8025006 <HAL_GPIO_Init+0x20a>
 8025002:	2307      	movs	r3, #7
 8025004:	e00e      	b.n	8025024 <HAL_GPIO_Init+0x228>
 8025006:	2308      	movs	r3, #8
 8025008:	e00c      	b.n	8025024 <HAL_GPIO_Init+0x228>
 802500a:	2306      	movs	r3, #6
 802500c:	e00a      	b.n	8025024 <HAL_GPIO_Init+0x228>
 802500e:	2305      	movs	r3, #5
 8025010:	e008      	b.n	8025024 <HAL_GPIO_Init+0x228>
 8025012:	2304      	movs	r3, #4
 8025014:	e006      	b.n	8025024 <HAL_GPIO_Init+0x228>
 8025016:	2303      	movs	r3, #3
 8025018:	e004      	b.n	8025024 <HAL_GPIO_Init+0x228>
 802501a:	2302      	movs	r3, #2
 802501c:	e002      	b.n	8025024 <HAL_GPIO_Init+0x228>
 802501e:	2301      	movs	r3, #1
 8025020:	e000      	b.n	8025024 <HAL_GPIO_Init+0x228>
 8025022:	2300      	movs	r3, #0
 8025024:	69fa      	ldr	r2, [r7, #28]
 8025026:	f002 0203 	and.w	r2, r2, #3
 802502a:	0092      	lsls	r2, r2, #2
 802502c:	4093      	lsls	r3, r2
 802502e:	69ba      	ldr	r2, [r7, #24]
 8025030:	4313      	orrs	r3, r2
 8025032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8025034:	4934      	ldr	r1, [pc, #208]	; (8025108 <HAL_GPIO_Init+0x30c>)
 8025036:	69fb      	ldr	r3, [r7, #28]
 8025038:	089b      	lsrs	r3, r3, #2
 802503a:	3302      	adds	r3, #2
 802503c:	69ba      	ldr	r2, [r7, #24]
 802503e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8025042:	4b3a      	ldr	r3, [pc, #232]	; (802512c <HAL_GPIO_Init+0x330>)
 8025044:	681b      	ldr	r3, [r3, #0]
 8025046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025048:	693b      	ldr	r3, [r7, #16]
 802504a:	43db      	mvns	r3, r3
 802504c:	69ba      	ldr	r2, [r7, #24]
 802504e:	4013      	ands	r3, r2
 8025050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8025052:	683b      	ldr	r3, [r7, #0]
 8025054:	685b      	ldr	r3, [r3, #4]
 8025056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802505a:	2b00      	cmp	r3, #0
 802505c:	d003      	beq.n	8025066 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 802505e:	69ba      	ldr	r2, [r7, #24]
 8025060:	693b      	ldr	r3, [r7, #16]
 8025062:	4313      	orrs	r3, r2
 8025064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8025066:	4a31      	ldr	r2, [pc, #196]	; (802512c <HAL_GPIO_Init+0x330>)
 8025068:	69bb      	ldr	r3, [r7, #24]
 802506a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 802506c:	4b2f      	ldr	r3, [pc, #188]	; (802512c <HAL_GPIO_Init+0x330>)
 802506e:	685b      	ldr	r3, [r3, #4]
 8025070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025072:	693b      	ldr	r3, [r7, #16]
 8025074:	43db      	mvns	r3, r3
 8025076:	69ba      	ldr	r2, [r7, #24]
 8025078:	4013      	ands	r3, r2
 802507a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 802507c:	683b      	ldr	r3, [r7, #0]
 802507e:	685b      	ldr	r3, [r3, #4]
 8025080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025084:	2b00      	cmp	r3, #0
 8025086:	d003      	beq.n	8025090 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8025088:	69ba      	ldr	r2, [r7, #24]
 802508a:	693b      	ldr	r3, [r7, #16]
 802508c:	4313      	orrs	r3, r2
 802508e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8025090:	4a26      	ldr	r2, [pc, #152]	; (802512c <HAL_GPIO_Init+0x330>)
 8025092:	69bb      	ldr	r3, [r7, #24]
 8025094:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8025096:	4b25      	ldr	r3, [pc, #148]	; (802512c <HAL_GPIO_Init+0x330>)
 8025098:	689b      	ldr	r3, [r3, #8]
 802509a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802509c:	693b      	ldr	r3, [r7, #16]
 802509e:	43db      	mvns	r3, r3
 80250a0:	69ba      	ldr	r2, [r7, #24]
 80250a2:	4013      	ands	r3, r2
 80250a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80250a6:	683b      	ldr	r3, [r7, #0]
 80250a8:	685b      	ldr	r3, [r3, #4]
 80250aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80250ae:	2b00      	cmp	r3, #0
 80250b0:	d003      	beq.n	80250ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80250b2:	69ba      	ldr	r2, [r7, #24]
 80250b4:	693b      	ldr	r3, [r7, #16]
 80250b6:	4313      	orrs	r3, r2
 80250b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80250ba:	4a1c      	ldr	r2, [pc, #112]	; (802512c <HAL_GPIO_Init+0x330>)
 80250bc:	69bb      	ldr	r3, [r7, #24]
 80250be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80250c0:	4b1a      	ldr	r3, [pc, #104]	; (802512c <HAL_GPIO_Init+0x330>)
 80250c2:	68db      	ldr	r3, [r3, #12]
 80250c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80250c6:	693b      	ldr	r3, [r7, #16]
 80250c8:	43db      	mvns	r3, r3
 80250ca:	69ba      	ldr	r2, [r7, #24]
 80250cc:	4013      	ands	r3, r2
 80250ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80250d0:	683b      	ldr	r3, [r7, #0]
 80250d2:	685b      	ldr	r3, [r3, #4]
 80250d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80250d8:	2b00      	cmp	r3, #0
 80250da:	d003      	beq.n	80250e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80250dc:	69ba      	ldr	r2, [r7, #24]
 80250de:	693b      	ldr	r3, [r7, #16]
 80250e0:	4313      	orrs	r3, r2
 80250e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80250e4:	4a11      	ldr	r2, [pc, #68]	; (802512c <HAL_GPIO_Init+0x330>)
 80250e6:	69bb      	ldr	r3, [r7, #24]
 80250e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80250ea:	69fb      	ldr	r3, [r7, #28]
 80250ec:	3301      	adds	r3, #1
 80250ee:	61fb      	str	r3, [r7, #28]
 80250f0:	69fb      	ldr	r3, [r7, #28]
 80250f2:	2b0f      	cmp	r3, #15
 80250f4:	f67f ae90 	bls.w	8024e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80250f8:	bf00      	nop
 80250fa:	3724      	adds	r7, #36	; 0x24
 80250fc:	46bd      	mov	sp, r7
 80250fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025102:	4770      	bx	lr
 8025104:	40023800 	.word	0x40023800
 8025108:	40013800 	.word	0x40013800
 802510c:	40020000 	.word	0x40020000
 8025110:	40020400 	.word	0x40020400
 8025114:	40020800 	.word	0x40020800
 8025118:	40020c00 	.word	0x40020c00
 802511c:	40021000 	.word	0x40021000
 8025120:	40021400 	.word	0x40021400
 8025124:	40021800 	.word	0x40021800
 8025128:	40021c00 	.word	0x40021c00
 802512c:	40013c00 	.word	0x40013c00

08025130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8025130:	b480      	push	{r7}
 8025132:	b085      	sub	sp, #20
 8025134:	af00      	add	r7, sp, #0
 8025136:	6078      	str	r0, [r7, #4]
 8025138:	460b      	mov	r3, r1
 802513a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 802513c:	687b      	ldr	r3, [r7, #4]
 802513e:	691a      	ldr	r2, [r3, #16]
 8025140:	887b      	ldrh	r3, [r7, #2]
 8025142:	4013      	ands	r3, r2
 8025144:	2b00      	cmp	r3, #0
 8025146:	d002      	beq.n	802514e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8025148:	2301      	movs	r3, #1
 802514a:	73fb      	strb	r3, [r7, #15]
 802514c:	e001      	b.n	8025152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 802514e:	2300      	movs	r3, #0
 8025150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8025152:	7bfb      	ldrb	r3, [r7, #15]
}
 8025154:	4618      	mov	r0, r3
 8025156:	3714      	adds	r7, #20
 8025158:	46bd      	mov	sp, r7
 802515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802515e:	4770      	bx	lr

08025160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8025160:	b480      	push	{r7}
 8025162:	b083      	sub	sp, #12
 8025164:	af00      	add	r7, sp, #0
 8025166:	6078      	str	r0, [r7, #4]
 8025168:	460b      	mov	r3, r1
 802516a:	807b      	strh	r3, [r7, #2]
 802516c:	4613      	mov	r3, r2
 802516e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8025170:	787b      	ldrb	r3, [r7, #1]
 8025172:	2b00      	cmp	r3, #0
 8025174:	d003      	beq.n	802517e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8025176:	887a      	ldrh	r2, [r7, #2]
 8025178:	687b      	ldr	r3, [r7, #4]
 802517a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 802517c:	e003      	b.n	8025186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802517e:	887b      	ldrh	r3, [r7, #2]
 8025180:	041a      	lsls	r2, r3, #16
 8025182:	687b      	ldr	r3, [r7, #4]
 8025184:	619a      	str	r2, [r3, #24]
}
 8025186:	bf00      	nop
 8025188:	370c      	adds	r7, #12
 802518a:	46bd      	mov	sp, r7
 802518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025190:	4770      	bx	lr
	...

08025194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8025194:	b580      	push	{r7, lr}
 8025196:	b084      	sub	sp, #16
 8025198:	af00      	add	r7, sp, #0
 802519a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802519c:	687b      	ldr	r3, [r7, #4]
 802519e:	2b00      	cmp	r3, #0
 80251a0:	d101      	bne.n	80251a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80251a2:	2301      	movs	r3, #1
 80251a4:	e11f      	b.n	80253e6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80251a6:	687b      	ldr	r3, [r7, #4]
 80251a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80251ac:	b2db      	uxtb	r3, r3
 80251ae:	2b00      	cmp	r3, #0
 80251b0:	d106      	bne.n	80251c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80251b2:	687b      	ldr	r3, [r7, #4]
 80251b4:	2200      	movs	r2, #0
 80251b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80251ba:	6878      	ldr	r0, [r7, #4]
 80251bc:	f7fd ffb4 	bl	8023128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80251c0:	687b      	ldr	r3, [r7, #4]
 80251c2:	2224      	movs	r2, #36	; 0x24
 80251c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80251c8:	687b      	ldr	r3, [r7, #4]
 80251ca:	681b      	ldr	r3, [r3, #0]
 80251cc:	681a      	ldr	r2, [r3, #0]
 80251ce:	687b      	ldr	r3, [r7, #4]
 80251d0:	681b      	ldr	r3, [r3, #0]
 80251d2:	f022 0201 	bic.w	r2, r2, #1
 80251d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80251d8:	687b      	ldr	r3, [r7, #4]
 80251da:	681b      	ldr	r3, [r3, #0]
 80251dc:	681a      	ldr	r2, [r3, #0]
 80251de:	687b      	ldr	r3, [r7, #4]
 80251e0:	681b      	ldr	r3, [r3, #0]
 80251e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80251e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80251e8:	687b      	ldr	r3, [r7, #4]
 80251ea:	681b      	ldr	r3, [r3, #0]
 80251ec:	681a      	ldr	r2, [r3, #0]
 80251ee:	687b      	ldr	r3, [r7, #4]
 80251f0:	681b      	ldr	r3, [r3, #0]
 80251f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80251f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80251f8:	f000 fd18 	bl	8025c2c <HAL_RCC_GetPCLK1Freq>
 80251fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80251fe:	687b      	ldr	r3, [r7, #4]
 8025200:	685b      	ldr	r3, [r3, #4]
 8025202:	4a7b      	ldr	r2, [pc, #492]	; (80253f0 <HAL_I2C_Init+0x25c>)
 8025204:	4293      	cmp	r3, r2
 8025206:	d807      	bhi.n	8025218 <HAL_I2C_Init+0x84>
 8025208:	68fb      	ldr	r3, [r7, #12]
 802520a:	4a7a      	ldr	r2, [pc, #488]	; (80253f4 <HAL_I2C_Init+0x260>)
 802520c:	4293      	cmp	r3, r2
 802520e:	bf94      	ite	ls
 8025210:	2301      	movls	r3, #1
 8025212:	2300      	movhi	r3, #0
 8025214:	b2db      	uxtb	r3, r3
 8025216:	e006      	b.n	8025226 <HAL_I2C_Init+0x92>
 8025218:	68fb      	ldr	r3, [r7, #12]
 802521a:	4a77      	ldr	r2, [pc, #476]	; (80253f8 <HAL_I2C_Init+0x264>)
 802521c:	4293      	cmp	r3, r2
 802521e:	bf94      	ite	ls
 8025220:	2301      	movls	r3, #1
 8025222:	2300      	movhi	r3, #0
 8025224:	b2db      	uxtb	r3, r3
 8025226:	2b00      	cmp	r3, #0
 8025228:	d001      	beq.n	802522e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 802522a:	2301      	movs	r3, #1
 802522c:	e0db      	b.n	80253e6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 802522e:	68fb      	ldr	r3, [r7, #12]
 8025230:	4a72      	ldr	r2, [pc, #456]	; (80253fc <HAL_I2C_Init+0x268>)
 8025232:	fba2 2303 	umull	r2, r3, r2, r3
 8025236:	0c9b      	lsrs	r3, r3, #18
 8025238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802523a:	687b      	ldr	r3, [r7, #4]
 802523c:	681b      	ldr	r3, [r3, #0]
 802523e:	685b      	ldr	r3, [r3, #4]
 8025240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8025244:	687b      	ldr	r3, [r7, #4]
 8025246:	681b      	ldr	r3, [r3, #0]
 8025248:	68ba      	ldr	r2, [r7, #8]
 802524a:	430a      	orrs	r2, r1
 802524c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802524e:	687b      	ldr	r3, [r7, #4]
 8025250:	681b      	ldr	r3, [r3, #0]
 8025252:	6a1b      	ldr	r3, [r3, #32]
 8025254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8025258:	687b      	ldr	r3, [r7, #4]
 802525a:	685b      	ldr	r3, [r3, #4]
 802525c:	4a64      	ldr	r2, [pc, #400]	; (80253f0 <HAL_I2C_Init+0x25c>)
 802525e:	4293      	cmp	r3, r2
 8025260:	d802      	bhi.n	8025268 <HAL_I2C_Init+0xd4>
 8025262:	68bb      	ldr	r3, [r7, #8]
 8025264:	3301      	adds	r3, #1
 8025266:	e009      	b.n	802527c <HAL_I2C_Init+0xe8>
 8025268:	68bb      	ldr	r3, [r7, #8]
 802526a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 802526e:	fb02 f303 	mul.w	r3, r2, r3
 8025272:	4a63      	ldr	r2, [pc, #396]	; (8025400 <HAL_I2C_Init+0x26c>)
 8025274:	fba2 2303 	umull	r2, r3, r2, r3
 8025278:	099b      	lsrs	r3, r3, #6
 802527a:	3301      	adds	r3, #1
 802527c:	687a      	ldr	r2, [r7, #4]
 802527e:	6812      	ldr	r2, [r2, #0]
 8025280:	430b      	orrs	r3, r1
 8025282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8025284:	687b      	ldr	r3, [r7, #4]
 8025286:	681b      	ldr	r3, [r3, #0]
 8025288:	69db      	ldr	r3, [r3, #28]
 802528a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 802528e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8025292:	687b      	ldr	r3, [r7, #4]
 8025294:	685b      	ldr	r3, [r3, #4]
 8025296:	4956      	ldr	r1, [pc, #344]	; (80253f0 <HAL_I2C_Init+0x25c>)
 8025298:	428b      	cmp	r3, r1
 802529a:	d80d      	bhi.n	80252b8 <HAL_I2C_Init+0x124>
 802529c:	68fb      	ldr	r3, [r7, #12]
 802529e:	1e59      	subs	r1, r3, #1
 80252a0:	687b      	ldr	r3, [r7, #4]
 80252a2:	685b      	ldr	r3, [r3, #4]
 80252a4:	005b      	lsls	r3, r3, #1
 80252a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80252aa:	3301      	adds	r3, #1
 80252ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80252b0:	2b04      	cmp	r3, #4
 80252b2:	bf38      	it	cc
 80252b4:	2304      	movcc	r3, #4
 80252b6:	e04f      	b.n	8025358 <HAL_I2C_Init+0x1c4>
 80252b8:	687b      	ldr	r3, [r7, #4]
 80252ba:	689b      	ldr	r3, [r3, #8]
 80252bc:	2b00      	cmp	r3, #0
 80252be:	d111      	bne.n	80252e4 <HAL_I2C_Init+0x150>
 80252c0:	68fb      	ldr	r3, [r7, #12]
 80252c2:	1e58      	subs	r0, r3, #1
 80252c4:	687b      	ldr	r3, [r7, #4]
 80252c6:	6859      	ldr	r1, [r3, #4]
 80252c8:	460b      	mov	r3, r1
 80252ca:	005b      	lsls	r3, r3, #1
 80252cc:	440b      	add	r3, r1
 80252ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80252d2:	3301      	adds	r3, #1
 80252d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80252d8:	2b00      	cmp	r3, #0
 80252da:	bf0c      	ite	eq
 80252dc:	2301      	moveq	r3, #1
 80252de:	2300      	movne	r3, #0
 80252e0:	b2db      	uxtb	r3, r3
 80252e2:	e012      	b.n	802530a <HAL_I2C_Init+0x176>
 80252e4:	68fb      	ldr	r3, [r7, #12]
 80252e6:	1e58      	subs	r0, r3, #1
 80252e8:	687b      	ldr	r3, [r7, #4]
 80252ea:	6859      	ldr	r1, [r3, #4]
 80252ec:	460b      	mov	r3, r1
 80252ee:	009b      	lsls	r3, r3, #2
 80252f0:	440b      	add	r3, r1
 80252f2:	0099      	lsls	r1, r3, #2
 80252f4:	440b      	add	r3, r1
 80252f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80252fa:	3301      	adds	r3, #1
 80252fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025300:	2b00      	cmp	r3, #0
 8025302:	bf0c      	ite	eq
 8025304:	2301      	moveq	r3, #1
 8025306:	2300      	movne	r3, #0
 8025308:	b2db      	uxtb	r3, r3
 802530a:	2b00      	cmp	r3, #0
 802530c:	d001      	beq.n	8025312 <HAL_I2C_Init+0x17e>
 802530e:	2301      	movs	r3, #1
 8025310:	e022      	b.n	8025358 <HAL_I2C_Init+0x1c4>
 8025312:	687b      	ldr	r3, [r7, #4]
 8025314:	689b      	ldr	r3, [r3, #8]
 8025316:	2b00      	cmp	r3, #0
 8025318:	d10e      	bne.n	8025338 <HAL_I2C_Init+0x1a4>
 802531a:	68fb      	ldr	r3, [r7, #12]
 802531c:	1e58      	subs	r0, r3, #1
 802531e:	687b      	ldr	r3, [r7, #4]
 8025320:	6859      	ldr	r1, [r3, #4]
 8025322:	460b      	mov	r3, r1
 8025324:	005b      	lsls	r3, r3, #1
 8025326:	440b      	add	r3, r1
 8025328:	fbb0 f3f3 	udiv	r3, r0, r3
 802532c:	3301      	adds	r3, #1
 802532e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8025336:	e00f      	b.n	8025358 <HAL_I2C_Init+0x1c4>
 8025338:	68fb      	ldr	r3, [r7, #12]
 802533a:	1e58      	subs	r0, r3, #1
 802533c:	687b      	ldr	r3, [r7, #4]
 802533e:	6859      	ldr	r1, [r3, #4]
 8025340:	460b      	mov	r3, r1
 8025342:	009b      	lsls	r3, r3, #2
 8025344:	440b      	add	r3, r1
 8025346:	0099      	lsls	r1, r3, #2
 8025348:	440b      	add	r3, r1
 802534a:	fbb0 f3f3 	udiv	r3, r0, r3
 802534e:	3301      	adds	r3, #1
 8025350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8025358:	6879      	ldr	r1, [r7, #4]
 802535a:	6809      	ldr	r1, [r1, #0]
 802535c:	4313      	orrs	r3, r2
 802535e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8025360:	687b      	ldr	r3, [r7, #4]
 8025362:	681b      	ldr	r3, [r3, #0]
 8025364:	681b      	ldr	r3, [r3, #0]
 8025366:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 802536a:	687b      	ldr	r3, [r7, #4]
 802536c:	69da      	ldr	r2, [r3, #28]
 802536e:	687b      	ldr	r3, [r7, #4]
 8025370:	6a1b      	ldr	r3, [r3, #32]
 8025372:	431a      	orrs	r2, r3
 8025374:	687b      	ldr	r3, [r7, #4]
 8025376:	681b      	ldr	r3, [r3, #0]
 8025378:	430a      	orrs	r2, r1
 802537a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 802537c:	687b      	ldr	r3, [r7, #4]
 802537e:	681b      	ldr	r3, [r3, #0]
 8025380:	689b      	ldr	r3, [r3, #8]
 8025382:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8025386:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 802538a:	687a      	ldr	r2, [r7, #4]
 802538c:	6911      	ldr	r1, [r2, #16]
 802538e:	687a      	ldr	r2, [r7, #4]
 8025390:	68d2      	ldr	r2, [r2, #12]
 8025392:	4311      	orrs	r1, r2
 8025394:	687a      	ldr	r2, [r7, #4]
 8025396:	6812      	ldr	r2, [r2, #0]
 8025398:	430b      	orrs	r3, r1
 802539a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 802539c:	687b      	ldr	r3, [r7, #4]
 802539e:	681b      	ldr	r3, [r3, #0]
 80253a0:	68db      	ldr	r3, [r3, #12]
 80253a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80253a6:	687b      	ldr	r3, [r7, #4]
 80253a8:	695a      	ldr	r2, [r3, #20]
 80253aa:	687b      	ldr	r3, [r7, #4]
 80253ac:	699b      	ldr	r3, [r3, #24]
 80253ae:	431a      	orrs	r2, r3
 80253b0:	687b      	ldr	r3, [r7, #4]
 80253b2:	681b      	ldr	r3, [r3, #0]
 80253b4:	430a      	orrs	r2, r1
 80253b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80253b8:	687b      	ldr	r3, [r7, #4]
 80253ba:	681b      	ldr	r3, [r3, #0]
 80253bc:	681a      	ldr	r2, [r3, #0]
 80253be:	687b      	ldr	r3, [r7, #4]
 80253c0:	681b      	ldr	r3, [r3, #0]
 80253c2:	f042 0201 	orr.w	r2, r2, #1
 80253c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80253c8:	687b      	ldr	r3, [r7, #4]
 80253ca:	2200      	movs	r2, #0
 80253cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80253ce:	687b      	ldr	r3, [r7, #4]
 80253d0:	2220      	movs	r2, #32
 80253d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80253d6:	687b      	ldr	r3, [r7, #4]
 80253d8:	2200      	movs	r2, #0
 80253da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80253dc:	687b      	ldr	r3, [r7, #4]
 80253de:	2200      	movs	r2, #0
 80253e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80253e4:	2300      	movs	r3, #0
}
 80253e6:	4618      	mov	r0, r3
 80253e8:	3710      	adds	r7, #16
 80253ea:	46bd      	mov	sp, r7
 80253ec:	bd80      	pop	{r7, pc}
 80253ee:	bf00      	nop
 80253f0:	000186a0 	.word	0x000186a0
 80253f4:	001e847f 	.word	0x001e847f
 80253f8:	003d08ff 	.word	0x003d08ff
 80253fc:	431bde83 	.word	0x431bde83
 8025400:	10624dd3 	.word	0x10624dd3

08025404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8025404:	b580      	push	{r7, lr}
 8025406:	b086      	sub	sp, #24
 8025408:	af00      	add	r7, sp, #0
 802540a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 802540c:	687b      	ldr	r3, [r7, #4]
 802540e:	2b00      	cmp	r3, #0
 8025410:	d101      	bne.n	8025416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8025412:	2301      	movs	r3, #1
 8025414:	e25b      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8025416:	687b      	ldr	r3, [r7, #4]
 8025418:	681b      	ldr	r3, [r3, #0]
 802541a:	f003 0301 	and.w	r3, r3, #1
 802541e:	2b00      	cmp	r3, #0
 8025420:	d075      	beq.n	802550e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8025422:	4ba3      	ldr	r3, [pc, #652]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025424:	689b      	ldr	r3, [r3, #8]
 8025426:	f003 030c 	and.w	r3, r3, #12
 802542a:	2b04      	cmp	r3, #4
 802542c:	d00c      	beq.n	8025448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802542e:	4ba0      	ldr	r3, [pc, #640]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025430:	689b      	ldr	r3, [r3, #8]
 8025432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8025436:	2b08      	cmp	r3, #8
 8025438:	d112      	bne.n	8025460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802543a:	4b9d      	ldr	r3, [pc, #628]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 802543c:	685b      	ldr	r3, [r3, #4]
 802543e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8025442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8025446:	d10b      	bne.n	8025460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8025448:	4b99      	ldr	r3, [pc, #612]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 802544a:	681b      	ldr	r3, [r3, #0]
 802544c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025450:	2b00      	cmp	r3, #0
 8025452:	d05b      	beq.n	802550c <HAL_RCC_OscConfig+0x108>
 8025454:	687b      	ldr	r3, [r7, #4]
 8025456:	685b      	ldr	r3, [r3, #4]
 8025458:	2b00      	cmp	r3, #0
 802545a:	d157      	bne.n	802550c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 802545c:	2301      	movs	r3, #1
 802545e:	e236      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8025460:	687b      	ldr	r3, [r7, #4]
 8025462:	685b      	ldr	r3, [r3, #4]
 8025464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025468:	d106      	bne.n	8025478 <HAL_RCC_OscConfig+0x74>
 802546a:	4b91      	ldr	r3, [pc, #580]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 802546c:	681b      	ldr	r3, [r3, #0]
 802546e:	4a90      	ldr	r2, [pc, #576]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8025474:	6013      	str	r3, [r2, #0]
 8025476:	e01d      	b.n	80254b4 <HAL_RCC_OscConfig+0xb0>
 8025478:	687b      	ldr	r3, [r7, #4]
 802547a:	685b      	ldr	r3, [r3, #4]
 802547c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8025480:	d10c      	bne.n	802549c <HAL_RCC_OscConfig+0x98>
 8025482:	4b8b      	ldr	r3, [pc, #556]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025484:	681b      	ldr	r3, [r3, #0]
 8025486:	4a8a      	ldr	r2, [pc, #552]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802548c:	6013      	str	r3, [r2, #0]
 802548e:	4b88      	ldr	r3, [pc, #544]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025490:	681b      	ldr	r3, [r3, #0]
 8025492:	4a87      	ldr	r2, [pc, #540]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8025498:	6013      	str	r3, [r2, #0]
 802549a:	e00b      	b.n	80254b4 <HAL_RCC_OscConfig+0xb0>
 802549c:	4b84      	ldr	r3, [pc, #528]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 802549e:	681b      	ldr	r3, [r3, #0]
 80254a0:	4a83      	ldr	r2, [pc, #524]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 80254a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80254a6:	6013      	str	r3, [r2, #0]
 80254a8:	4b81      	ldr	r3, [pc, #516]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 80254aa:	681b      	ldr	r3, [r3, #0]
 80254ac:	4a80      	ldr	r2, [pc, #512]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 80254ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80254b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80254b4:	687b      	ldr	r3, [r7, #4]
 80254b6:	685b      	ldr	r3, [r3, #4]
 80254b8:	2b00      	cmp	r3, #0
 80254ba:	d013      	beq.n	80254e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80254bc:	f7fe fbfc 	bl	8023cb8 <HAL_GetTick>
 80254c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80254c2:	e008      	b.n	80254d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80254c4:	f7fe fbf8 	bl	8023cb8 <HAL_GetTick>
 80254c8:	4602      	mov	r2, r0
 80254ca:	693b      	ldr	r3, [r7, #16]
 80254cc:	1ad3      	subs	r3, r2, r3
 80254ce:	2b64      	cmp	r3, #100	; 0x64
 80254d0:	d901      	bls.n	80254d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80254d2:	2303      	movs	r3, #3
 80254d4:	e1fb      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80254d6:	4b76      	ldr	r3, [pc, #472]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 80254d8:	681b      	ldr	r3, [r3, #0]
 80254da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80254de:	2b00      	cmp	r3, #0
 80254e0:	d0f0      	beq.n	80254c4 <HAL_RCC_OscConfig+0xc0>
 80254e2:	e014      	b.n	802550e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80254e4:	f7fe fbe8 	bl	8023cb8 <HAL_GetTick>
 80254e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80254ea:	e008      	b.n	80254fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80254ec:	f7fe fbe4 	bl	8023cb8 <HAL_GetTick>
 80254f0:	4602      	mov	r2, r0
 80254f2:	693b      	ldr	r3, [r7, #16]
 80254f4:	1ad3      	subs	r3, r2, r3
 80254f6:	2b64      	cmp	r3, #100	; 0x64
 80254f8:	d901      	bls.n	80254fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80254fa:	2303      	movs	r3, #3
 80254fc:	e1e7      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80254fe:	4b6c      	ldr	r3, [pc, #432]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025500:	681b      	ldr	r3, [r3, #0]
 8025502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025506:	2b00      	cmp	r3, #0
 8025508:	d1f0      	bne.n	80254ec <HAL_RCC_OscConfig+0xe8>
 802550a:	e000      	b.n	802550e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802550c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802550e:	687b      	ldr	r3, [r7, #4]
 8025510:	681b      	ldr	r3, [r3, #0]
 8025512:	f003 0302 	and.w	r3, r3, #2
 8025516:	2b00      	cmp	r3, #0
 8025518:	d063      	beq.n	80255e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802551a:	4b65      	ldr	r3, [pc, #404]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 802551c:	689b      	ldr	r3, [r3, #8]
 802551e:	f003 030c 	and.w	r3, r3, #12
 8025522:	2b00      	cmp	r3, #0
 8025524:	d00b      	beq.n	802553e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8025526:	4b62      	ldr	r3, [pc, #392]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025528:	689b      	ldr	r3, [r3, #8]
 802552a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802552e:	2b08      	cmp	r3, #8
 8025530:	d11c      	bne.n	802556c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8025532:	4b5f      	ldr	r3, [pc, #380]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025534:	685b      	ldr	r3, [r3, #4]
 8025536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802553a:	2b00      	cmp	r3, #0
 802553c:	d116      	bne.n	802556c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802553e:	4b5c      	ldr	r3, [pc, #368]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025540:	681b      	ldr	r3, [r3, #0]
 8025542:	f003 0302 	and.w	r3, r3, #2
 8025546:	2b00      	cmp	r3, #0
 8025548:	d005      	beq.n	8025556 <HAL_RCC_OscConfig+0x152>
 802554a:	687b      	ldr	r3, [r7, #4]
 802554c:	68db      	ldr	r3, [r3, #12]
 802554e:	2b01      	cmp	r3, #1
 8025550:	d001      	beq.n	8025556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8025552:	2301      	movs	r3, #1
 8025554:	e1bb      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8025556:	4b56      	ldr	r3, [pc, #344]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025558:	681b      	ldr	r3, [r3, #0]
 802555a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802555e:	687b      	ldr	r3, [r7, #4]
 8025560:	691b      	ldr	r3, [r3, #16]
 8025562:	00db      	lsls	r3, r3, #3
 8025564:	4952      	ldr	r1, [pc, #328]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025566:	4313      	orrs	r3, r2
 8025568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802556a:	e03a      	b.n	80255e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 802556c:	687b      	ldr	r3, [r7, #4]
 802556e:	68db      	ldr	r3, [r3, #12]
 8025570:	2b00      	cmp	r3, #0
 8025572:	d020      	beq.n	80255b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8025574:	4b4f      	ldr	r3, [pc, #316]	; (80256b4 <HAL_RCC_OscConfig+0x2b0>)
 8025576:	2201      	movs	r2, #1
 8025578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802557a:	f7fe fb9d 	bl	8023cb8 <HAL_GetTick>
 802557e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8025580:	e008      	b.n	8025594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8025582:	f7fe fb99 	bl	8023cb8 <HAL_GetTick>
 8025586:	4602      	mov	r2, r0
 8025588:	693b      	ldr	r3, [r7, #16]
 802558a:	1ad3      	subs	r3, r2, r3
 802558c:	2b02      	cmp	r3, #2
 802558e:	d901      	bls.n	8025594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8025590:	2303      	movs	r3, #3
 8025592:	e19c      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8025594:	4b46      	ldr	r3, [pc, #280]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025596:	681b      	ldr	r3, [r3, #0]
 8025598:	f003 0302 	and.w	r3, r3, #2
 802559c:	2b00      	cmp	r3, #0
 802559e:	d0f0      	beq.n	8025582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80255a0:	4b43      	ldr	r3, [pc, #268]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 80255a2:	681b      	ldr	r3, [r3, #0]
 80255a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80255a8:	687b      	ldr	r3, [r7, #4]
 80255aa:	691b      	ldr	r3, [r3, #16]
 80255ac:	00db      	lsls	r3, r3, #3
 80255ae:	4940      	ldr	r1, [pc, #256]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 80255b0:	4313      	orrs	r3, r2
 80255b2:	600b      	str	r3, [r1, #0]
 80255b4:	e015      	b.n	80255e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80255b6:	4b3f      	ldr	r3, [pc, #252]	; (80256b4 <HAL_RCC_OscConfig+0x2b0>)
 80255b8:	2200      	movs	r2, #0
 80255ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80255bc:	f7fe fb7c 	bl	8023cb8 <HAL_GetTick>
 80255c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80255c2:	e008      	b.n	80255d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80255c4:	f7fe fb78 	bl	8023cb8 <HAL_GetTick>
 80255c8:	4602      	mov	r2, r0
 80255ca:	693b      	ldr	r3, [r7, #16]
 80255cc:	1ad3      	subs	r3, r2, r3
 80255ce:	2b02      	cmp	r3, #2
 80255d0:	d901      	bls.n	80255d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80255d2:	2303      	movs	r3, #3
 80255d4:	e17b      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80255d6:	4b36      	ldr	r3, [pc, #216]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 80255d8:	681b      	ldr	r3, [r3, #0]
 80255da:	f003 0302 	and.w	r3, r3, #2
 80255de:	2b00      	cmp	r3, #0
 80255e0:	d1f0      	bne.n	80255c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80255e2:	687b      	ldr	r3, [r7, #4]
 80255e4:	681b      	ldr	r3, [r3, #0]
 80255e6:	f003 0308 	and.w	r3, r3, #8
 80255ea:	2b00      	cmp	r3, #0
 80255ec:	d030      	beq.n	8025650 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80255ee:	687b      	ldr	r3, [r7, #4]
 80255f0:	695b      	ldr	r3, [r3, #20]
 80255f2:	2b00      	cmp	r3, #0
 80255f4:	d016      	beq.n	8025624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80255f6:	4b30      	ldr	r3, [pc, #192]	; (80256b8 <HAL_RCC_OscConfig+0x2b4>)
 80255f8:	2201      	movs	r2, #1
 80255fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80255fc:	f7fe fb5c 	bl	8023cb8 <HAL_GetTick>
 8025600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8025602:	e008      	b.n	8025616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8025604:	f7fe fb58 	bl	8023cb8 <HAL_GetTick>
 8025608:	4602      	mov	r2, r0
 802560a:	693b      	ldr	r3, [r7, #16]
 802560c:	1ad3      	subs	r3, r2, r3
 802560e:	2b02      	cmp	r3, #2
 8025610:	d901      	bls.n	8025616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8025612:	2303      	movs	r3, #3
 8025614:	e15b      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8025616:	4b26      	ldr	r3, [pc, #152]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802561a:	f003 0302 	and.w	r3, r3, #2
 802561e:	2b00      	cmp	r3, #0
 8025620:	d0f0      	beq.n	8025604 <HAL_RCC_OscConfig+0x200>
 8025622:	e015      	b.n	8025650 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8025624:	4b24      	ldr	r3, [pc, #144]	; (80256b8 <HAL_RCC_OscConfig+0x2b4>)
 8025626:	2200      	movs	r2, #0
 8025628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802562a:	f7fe fb45 	bl	8023cb8 <HAL_GetTick>
 802562e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8025630:	e008      	b.n	8025644 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8025632:	f7fe fb41 	bl	8023cb8 <HAL_GetTick>
 8025636:	4602      	mov	r2, r0
 8025638:	693b      	ldr	r3, [r7, #16]
 802563a:	1ad3      	subs	r3, r2, r3
 802563c:	2b02      	cmp	r3, #2
 802563e:	d901      	bls.n	8025644 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8025640:	2303      	movs	r3, #3
 8025642:	e144      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8025644:	4b1a      	ldr	r3, [pc, #104]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8025648:	f003 0302 	and.w	r3, r3, #2
 802564c:	2b00      	cmp	r3, #0
 802564e:	d1f0      	bne.n	8025632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8025650:	687b      	ldr	r3, [r7, #4]
 8025652:	681b      	ldr	r3, [r3, #0]
 8025654:	f003 0304 	and.w	r3, r3, #4
 8025658:	2b00      	cmp	r3, #0
 802565a:	f000 80a0 	beq.w	802579e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 802565e:	2300      	movs	r3, #0
 8025660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8025662:	4b13      	ldr	r3, [pc, #76]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802566a:	2b00      	cmp	r3, #0
 802566c:	d10f      	bne.n	802568e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802566e:	2300      	movs	r3, #0
 8025670:	60bb      	str	r3, [r7, #8]
 8025672:	4b0f      	ldr	r3, [pc, #60]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025676:	4a0e      	ldr	r2, [pc, #56]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802567c:	6413      	str	r3, [r2, #64]	; 0x40
 802567e:	4b0c      	ldr	r3, [pc, #48]	; (80256b0 <HAL_RCC_OscConfig+0x2ac>)
 8025680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025686:	60bb      	str	r3, [r7, #8]
 8025688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802568a:	2301      	movs	r3, #1
 802568c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802568e:	4b0b      	ldr	r3, [pc, #44]	; (80256bc <HAL_RCC_OscConfig+0x2b8>)
 8025690:	681b      	ldr	r3, [r3, #0]
 8025692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025696:	2b00      	cmp	r3, #0
 8025698:	d121      	bne.n	80256de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802569a:	4b08      	ldr	r3, [pc, #32]	; (80256bc <HAL_RCC_OscConfig+0x2b8>)
 802569c:	681b      	ldr	r3, [r3, #0]
 802569e:	4a07      	ldr	r2, [pc, #28]	; (80256bc <HAL_RCC_OscConfig+0x2b8>)
 80256a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80256a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80256a6:	f7fe fb07 	bl	8023cb8 <HAL_GetTick>
 80256aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80256ac:	e011      	b.n	80256d2 <HAL_RCC_OscConfig+0x2ce>
 80256ae:	bf00      	nop
 80256b0:	40023800 	.word	0x40023800
 80256b4:	42470000 	.word	0x42470000
 80256b8:	42470e80 	.word	0x42470e80
 80256bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80256c0:	f7fe fafa 	bl	8023cb8 <HAL_GetTick>
 80256c4:	4602      	mov	r2, r0
 80256c6:	693b      	ldr	r3, [r7, #16]
 80256c8:	1ad3      	subs	r3, r2, r3
 80256ca:	2b02      	cmp	r3, #2
 80256cc:	d901      	bls.n	80256d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80256ce:	2303      	movs	r3, #3
 80256d0:	e0fd      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80256d2:	4b81      	ldr	r3, [pc, #516]	; (80258d8 <HAL_RCC_OscConfig+0x4d4>)
 80256d4:	681b      	ldr	r3, [r3, #0]
 80256d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80256da:	2b00      	cmp	r3, #0
 80256dc:	d0f0      	beq.n	80256c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80256de:	687b      	ldr	r3, [r7, #4]
 80256e0:	689b      	ldr	r3, [r3, #8]
 80256e2:	2b01      	cmp	r3, #1
 80256e4:	d106      	bne.n	80256f4 <HAL_RCC_OscConfig+0x2f0>
 80256e6:	4b7d      	ldr	r3, [pc, #500]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 80256e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80256ea:	4a7c      	ldr	r2, [pc, #496]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 80256ec:	f043 0301 	orr.w	r3, r3, #1
 80256f0:	6713      	str	r3, [r2, #112]	; 0x70
 80256f2:	e01c      	b.n	802572e <HAL_RCC_OscConfig+0x32a>
 80256f4:	687b      	ldr	r3, [r7, #4]
 80256f6:	689b      	ldr	r3, [r3, #8]
 80256f8:	2b05      	cmp	r3, #5
 80256fa:	d10c      	bne.n	8025716 <HAL_RCC_OscConfig+0x312>
 80256fc:	4b77      	ldr	r3, [pc, #476]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 80256fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025700:	4a76      	ldr	r2, [pc, #472]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 8025702:	f043 0304 	orr.w	r3, r3, #4
 8025706:	6713      	str	r3, [r2, #112]	; 0x70
 8025708:	4b74      	ldr	r3, [pc, #464]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 802570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802570c:	4a73      	ldr	r2, [pc, #460]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 802570e:	f043 0301 	orr.w	r3, r3, #1
 8025712:	6713      	str	r3, [r2, #112]	; 0x70
 8025714:	e00b      	b.n	802572e <HAL_RCC_OscConfig+0x32a>
 8025716:	4b71      	ldr	r3, [pc, #452]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 8025718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802571a:	4a70      	ldr	r2, [pc, #448]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 802571c:	f023 0301 	bic.w	r3, r3, #1
 8025720:	6713      	str	r3, [r2, #112]	; 0x70
 8025722:	4b6e      	ldr	r3, [pc, #440]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 8025724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025726:	4a6d      	ldr	r2, [pc, #436]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 8025728:	f023 0304 	bic.w	r3, r3, #4
 802572c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802572e:	687b      	ldr	r3, [r7, #4]
 8025730:	689b      	ldr	r3, [r3, #8]
 8025732:	2b00      	cmp	r3, #0
 8025734:	d015      	beq.n	8025762 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8025736:	f7fe fabf 	bl	8023cb8 <HAL_GetTick>
 802573a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802573c:	e00a      	b.n	8025754 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802573e:	f7fe fabb 	bl	8023cb8 <HAL_GetTick>
 8025742:	4602      	mov	r2, r0
 8025744:	693b      	ldr	r3, [r7, #16]
 8025746:	1ad3      	subs	r3, r2, r3
 8025748:	f241 3288 	movw	r2, #5000	; 0x1388
 802574c:	4293      	cmp	r3, r2
 802574e:	d901      	bls.n	8025754 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8025750:	2303      	movs	r3, #3
 8025752:	e0bc      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8025754:	4b61      	ldr	r3, [pc, #388]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 8025756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025758:	f003 0302 	and.w	r3, r3, #2
 802575c:	2b00      	cmp	r3, #0
 802575e:	d0ee      	beq.n	802573e <HAL_RCC_OscConfig+0x33a>
 8025760:	e014      	b.n	802578c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8025762:	f7fe faa9 	bl	8023cb8 <HAL_GetTick>
 8025766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8025768:	e00a      	b.n	8025780 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802576a:	f7fe faa5 	bl	8023cb8 <HAL_GetTick>
 802576e:	4602      	mov	r2, r0
 8025770:	693b      	ldr	r3, [r7, #16]
 8025772:	1ad3      	subs	r3, r2, r3
 8025774:	f241 3288 	movw	r2, #5000	; 0x1388
 8025778:	4293      	cmp	r3, r2
 802577a:	d901      	bls.n	8025780 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 802577c:	2303      	movs	r3, #3
 802577e:	e0a6      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8025780:	4b56      	ldr	r3, [pc, #344]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 8025782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025784:	f003 0302 	and.w	r3, r3, #2
 8025788:	2b00      	cmp	r3, #0
 802578a:	d1ee      	bne.n	802576a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802578c:	7dfb      	ldrb	r3, [r7, #23]
 802578e:	2b01      	cmp	r3, #1
 8025790:	d105      	bne.n	802579e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8025792:	4b52      	ldr	r3, [pc, #328]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 8025794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025796:	4a51      	ldr	r2, [pc, #324]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 8025798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802579c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802579e:	687b      	ldr	r3, [r7, #4]
 80257a0:	699b      	ldr	r3, [r3, #24]
 80257a2:	2b00      	cmp	r3, #0
 80257a4:	f000 8092 	beq.w	80258cc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80257a8:	4b4c      	ldr	r3, [pc, #304]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 80257aa:	689b      	ldr	r3, [r3, #8]
 80257ac:	f003 030c 	and.w	r3, r3, #12
 80257b0:	2b08      	cmp	r3, #8
 80257b2:	d05c      	beq.n	802586e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80257b4:	687b      	ldr	r3, [r7, #4]
 80257b6:	699b      	ldr	r3, [r3, #24]
 80257b8:	2b02      	cmp	r3, #2
 80257ba:	d141      	bne.n	8025840 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80257bc:	4b48      	ldr	r3, [pc, #288]	; (80258e0 <HAL_RCC_OscConfig+0x4dc>)
 80257be:	2200      	movs	r2, #0
 80257c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80257c2:	f7fe fa79 	bl	8023cb8 <HAL_GetTick>
 80257c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80257c8:	e008      	b.n	80257dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80257ca:	f7fe fa75 	bl	8023cb8 <HAL_GetTick>
 80257ce:	4602      	mov	r2, r0
 80257d0:	693b      	ldr	r3, [r7, #16]
 80257d2:	1ad3      	subs	r3, r2, r3
 80257d4:	2b02      	cmp	r3, #2
 80257d6:	d901      	bls.n	80257dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80257d8:	2303      	movs	r3, #3
 80257da:	e078      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80257dc:	4b3f      	ldr	r3, [pc, #252]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 80257de:	681b      	ldr	r3, [r3, #0]
 80257e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80257e4:	2b00      	cmp	r3, #0
 80257e6:	d1f0      	bne.n	80257ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80257e8:	687b      	ldr	r3, [r7, #4]
 80257ea:	69da      	ldr	r2, [r3, #28]
 80257ec:	687b      	ldr	r3, [r7, #4]
 80257ee:	6a1b      	ldr	r3, [r3, #32]
 80257f0:	431a      	orrs	r2, r3
 80257f2:	687b      	ldr	r3, [r7, #4]
 80257f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80257f6:	019b      	lsls	r3, r3, #6
 80257f8:	431a      	orrs	r2, r3
 80257fa:	687b      	ldr	r3, [r7, #4]
 80257fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80257fe:	085b      	lsrs	r3, r3, #1
 8025800:	3b01      	subs	r3, #1
 8025802:	041b      	lsls	r3, r3, #16
 8025804:	431a      	orrs	r2, r3
 8025806:	687b      	ldr	r3, [r7, #4]
 8025808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802580a:	061b      	lsls	r3, r3, #24
 802580c:	4933      	ldr	r1, [pc, #204]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 802580e:	4313      	orrs	r3, r2
 8025810:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8025812:	4b33      	ldr	r3, [pc, #204]	; (80258e0 <HAL_RCC_OscConfig+0x4dc>)
 8025814:	2201      	movs	r2, #1
 8025816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8025818:	f7fe fa4e 	bl	8023cb8 <HAL_GetTick>
 802581c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802581e:	e008      	b.n	8025832 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8025820:	f7fe fa4a 	bl	8023cb8 <HAL_GetTick>
 8025824:	4602      	mov	r2, r0
 8025826:	693b      	ldr	r3, [r7, #16]
 8025828:	1ad3      	subs	r3, r2, r3
 802582a:	2b02      	cmp	r3, #2
 802582c:	d901      	bls.n	8025832 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 802582e:	2303      	movs	r3, #3
 8025830:	e04d      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8025832:	4b2a      	ldr	r3, [pc, #168]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 8025834:	681b      	ldr	r3, [r3, #0]
 8025836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802583a:	2b00      	cmp	r3, #0
 802583c:	d0f0      	beq.n	8025820 <HAL_RCC_OscConfig+0x41c>
 802583e:	e045      	b.n	80258cc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8025840:	4b27      	ldr	r3, [pc, #156]	; (80258e0 <HAL_RCC_OscConfig+0x4dc>)
 8025842:	2200      	movs	r2, #0
 8025844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8025846:	f7fe fa37 	bl	8023cb8 <HAL_GetTick>
 802584a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802584c:	e008      	b.n	8025860 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802584e:	f7fe fa33 	bl	8023cb8 <HAL_GetTick>
 8025852:	4602      	mov	r2, r0
 8025854:	693b      	ldr	r3, [r7, #16]
 8025856:	1ad3      	subs	r3, r2, r3
 8025858:	2b02      	cmp	r3, #2
 802585a:	d901      	bls.n	8025860 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 802585c:	2303      	movs	r3, #3
 802585e:	e036      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8025860:	4b1e      	ldr	r3, [pc, #120]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 8025862:	681b      	ldr	r3, [r3, #0]
 8025864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8025868:	2b00      	cmp	r3, #0
 802586a:	d1f0      	bne.n	802584e <HAL_RCC_OscConfig+0x44a>
 802586c:	e02e      	b.n	80258cc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802586e:	687b      	ldr	r3, [r7, #4]
 8025870:	699b      	ldr	r3, [r3, #24]
 8025872:	2b01      	cmp	r3, #1
 8025874:	d101      	bne.n	802587a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8025876:	2301      	movs	r3, #1
 8025878:	e029      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802587a:	4b18      	ldr	r3, [pc, #96]	; (80258dc <HAL_RCC_OscConfig+0x4d8>)
 802587c:	685b      	ldr	r3, [r3, #4]
 802587e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8025880:	68fb      	ldr	r3, [r7, #12]
 8025882:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8025886:	687b      	ldr	r3, [r7, #4]
 8025888:	69db      	ldr	r3, [r3, #28]
 802588a:	429a      	cmp	r2, r3
 802588c:	d11c      	bne.n	80258c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 802588e:	68fb      	ldr	r3, [r7, #12]
 8025890:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8025894:	687b      	ldr	r3, [r7, #4]
 8025896:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8025898:	429a      	cmp	r2, r3
 802589a:	d115      	bne.n	80258c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 802589c:	68fa      	ldr	r2, [r7, #12]
 802589e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80258a2:	4013      	ands	r3, r2
 80258a4:	687a      	ldr	r2, [r7, #4]
 80258a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80258a8:	4293      	cmp	r3, r2
 80258aa:	d10d      	bne.n	80258c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80258ac:	68fb      	ldr	r3, [r7, #12]
 80258ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80258b2:	687b      	ldr	r3, [r7, #4]
 80258b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80258b6:	429a      	cmp	r2, r3
 80258b8:	d106      	bne.n	80258c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80258ba:	68fb      	ldr	r3, [r7, #12]
 80258bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80258c0:	687b      	ldr	r3, [r7, #4]
 80258c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80258c4:	429a      	cmp	r2, r3
 80258c6:	d001      	beq.n	80258cc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80258c8:	2301      	movs	r3, #1
 80258ca:	e000      	b.n	80258ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80258cc:	2300      	movs	r3, #0
}
 80258ce:	4618      	mov	r0, r3
 80258d0:	3718      	adds	r7, #24
 80258d2:	46bd      	mov	sp, r7
 80258d4:	bd80      	pop	{r7, pc}
 80258d6:	bf00      	nop
 80258d8:	40007000 	.word	0x40007000
 80258dc:	40023800 	.word	0x40023800
 80258e0:	42470060 	.word	0x42470060

080258e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80258e4:	b580      	push	{r7, lr}
 80258e6:	b084      	sub	sp, #16
 80258e8:	af00      	add	r7, sp, #0
 80258ea:	6078      	str	r0, [r7, #4]
 80258ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80258ee:	687b      	ldr	r3, [r7, #4]
 80258f0:	2b00      	cmp	r3, #0
 80258f2:	d101      	bne.n	80258f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80258f4:	2301      	movs	r3, #1
 80258f6:	e0cc      	b.n	8025a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80258f8:	4b68      	ldr	r3, [pc, #416]	; (8025a9c <HAL_RCC_ClockConfig+0x1b8>)
 80258fa:	681b      	ldr	r3, [r3, #0]
 80258fc:	f003 030f 	and.w	r3, r3, #15
 8025900:	683a      	ldr	r2, [r7, #0]
 8025902:	429a      	cmp	r2, r3
 8025904:	d90c      	bls.n	8025920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8025906:	4b65      	ldr	r3, [pc, #404]	; (8025a9c <HAL_RCC_ClockConfig+0x1b8>)
 8025908:	683a      	ldr	r2, [r7, #0]
 802590a:	b2d2      	uxtb	r2, r2
 802590c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802590e:	4b63      	ldr	r3, [pc, #396]	; (8025a9c <HAL_RCC_ClockConfig+0x1b8>)
 8025910:	681b      	ldr	r3, [r3, #0]
 8025912:	f003 030f 	and.w	r3, r3, #15
 8025916:	683a      	ldr	r2, [r7, #0]
 8025918:	429a      	cmp	r2, r3
 802591a:	d001      	beq.n	8025920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802591c:	2301      	movs	r3, #1
 802591e:	e0b8      	b.n	8025a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8025920:	687b      	ldr	r3, [r7, #4]
 8025922:	681b      	ldr	r3, [r3, #0]
 8025924:	f003 0302 	and.w	r3, r3, #2
 8025928:	2b00      	cmp	r3, #0
 802592a:	d020      	beq.n	802596e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802592c:	687b      	ldr	r3, [r7, #4]
 802592e:	681b      	ldr	r3, [r3, #0]
 8025930:	f003 0304 	and.w	r3, r3, #4
 8025934:	2b00      	cmp	r3, #0
 8025936:	d005      	beq.n	8025944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8025938:	4b59      	ldr	r3, [pc, #356]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 802593a:	689b      	ldr	r3, [r3, #8]
 802593c:	4a58      	ldr	r2, [pc, #352]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 802593e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8025942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8025944:	687b      	ldr	r3, [r7, #4]
 8025946:	681b      	ldr	r3, [r3, #0]
 8025948:	f003 0308 	and.w	r3, r3, #8
 802594c:	2b00      	cmp	r3, #0
 802594e:	d005      	beq.n	802595c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8025950:	4b53      	ldr	r3, [pc, #332]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8025952:	689b      	ldr	r3, [r3, #8]
 8025954:	4a52      	ldr	r2, [pc, #328]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8025956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802595a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802595c:	4b50      	ldr	r3, [pc, #320]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 802595e:	689b      	ldr	r3, [r3, #8]
 8025960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8025964:	687b      	ldr	r3, [r7, #4]
 8025966:	689b      	ldr	r3, [r3, #8]
 8025968:	494d      	ldr	r1, [pc, #308]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 802596a:	4313      	orrs	r3, r2
 802596c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802596e:	687b      	ldr	r3, [r7, #4]
 8025970:	681b      	ldr	r3, [r3, #0]
 8025972:	f003 0301 	and.w	r3, r3, #1
 8025976:	2b00      	cmp	r3, #0
 8025978:	d044      	beq.n	8025a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802597a:	687b      	ldr	r3, [r7, #4]
 802597c:	685b      	ldr	r3, [r3, #4]
 802597e:	2b01      	cmp	r3, #1
 8025980:	d107      	bne.n	8025992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8025982:	4b47      	ldr	r3, [pc, #284]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8025984:	681b      	ldr	r3, [r3, #0]
 8025986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802598a:	2b00      	cmp	r3, #0
 802598c:	d119      	bne.n	80259c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802598e:	2301      	movs	r3, #1
 8025990:	e07f      	b.n	8025a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8025992:	687b      	ldr	r3, [r7, #4]
 8025994:	685b      	ldr	r3, [r3, #4]
 8025996:	2b02      	cmp	r3, #2
 8025998:	d003      	beq.n	80259a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802599a:	687b      	ldr	r3, [r7, #4]
 802599c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802599e:	2b03      	cmp	r3, #3
 80259a0:	d107      	bne.n	80259b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80259a2:	4b3f      	ldr	r3, [pc, #252]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80259a4:	681b      	ldr	r3, [r3, #0]
 80259a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80259aa:	2b00      	cmp	r3, #0
 80259ac:	d109      	bne.n	80259c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80259ae:	2301      	movs	r3, #1
 80259b0:	e06f      	b.n	8025a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80259b2:	4b3b      	ldr	r3, [pc, #236]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80259b4:	681b      	ldr	r3, [r3, #0]
 80259b6:	f003 0302 	and.w	r3, r3, #2
 80259ba:	2b00      	cmp	r3, #0
 80259bc:	d101      	bne.n	80259c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80259be:	2301      	movs	r3, #1
 80259c0:	e067      	b.n	8025a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80259c2:	4b37      	ldr	r3, [pc, #220]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80259c4:	689b      	ldr	r3, [r3, #8]
 80259c6:	f023 0203 	bic.w	r2, r3, #3
 80259ca:	687b      	ldr	r3, [r7, #4]
 80259cc:	685b      	ldr	r3, [r3, #4]
 80259ce:	4934      	ldr	r1, [pc, #208]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80259d0:	4313      	orrs	r3, r2
 80259d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80259d4:	f7fe f970 	bl	8023cb8 <HAL_GetTick>
 80259d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80259da:	e00a      	b.n	80259f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80259dc:	f7fe f96c 	bl	8023cb8 <HAL_GetTick>
 80259e0:	4602      	mov	r2, r0
 80259e2:	68fb      	ldr	r3, [r7, #12]
 80259e4:	1ad3      	subs	r3, r2, r3
 80259e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80259ea:	4293      	cmp	r3, r2
 80259ec:	d901      	bls.n	80259f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80259ee:	2303      	movs	r3, #3
 80259f0:	e04f      	b.n	8025a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80259f2:	4b2b      	ldr	r3, [pc, #172]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80259f4:	689b      	ldr	r3, [r3, #8]
 80259f6:	f003 020c 	and.w	r2, r3, #12
 80259fa:	687b      	ldr	r3, [r7, #4]
 80259fc:	685b      	ldr	r3, [r3, #4]
 80259fe:	009b      	lsls	r3, r3, #2
 8025a00:	429a      	cmp	r2, r3
 8025a02:	d1eb      	bne.n	80259dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8025a04:	4b25      	ldr	r3, [pc, #148]	; (8025a9c <HAL_RCC_ClockConfig+0x1b8>)
 8025a06:	681b      	ldr	r3, [r3, #0]
 8025a08:	f003 030f 	and.w	r3, r3, #15
 8025a0c:	683a      	ldr	r2, [r7, #0]
 8025a0e:	429a      	cmp	r2, r3
 8025a10:	d20c      	bcs.n	8025a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8025a12:	4b22      	ldr	r3, [pc, #136]	; (8025a9c <HAL_RCC_ClockConfig+0x1b8>)
 8025a14:	683a      	ldr	r2, [r7, #0]
 8025a16:	b2d2      	uxtb	r2, r2
 8025a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8025a1a:	4b20      	ldr	r3, [pc, #128]	; (8025a9c <HAL_RCC_ClockConfig+0x1b8>)
 8025a1c:	681b      	ldr	r3, [r3, #0]
 8025a1e:	f003 030f 	and.w	r3, r3, #15
 8025a22:	683a      	ldr	r2, [r7, #0]
 8025a24:	429a      	cmp	r2, r3
 8025a26:	d001      	beq.n	8025a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8025a28:	2301      	movs	r3, #1
 8025a2a:	e032      	b.n	8025a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8025a2c:	687b      	ldr	r3, [r7, #4]
 8025a2e:	681b      	ldr	r3, [r3, #0]
 8025a30:	f003 0304 	and.w	r3, r3, #4
 8025a34:	2b00      	cmp	r3, #0
 8025a36:	d008      	beq.n	8025a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8025a38:	4b19      	ldr	r3, [pc, #100]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8025a3a:	689b      	ldr	r3, [r3, #8]
 8025a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8025a40:	687b      	ldr	r3, [r7, #4]
 8025a42:	68db      	ldr	r3, [r3, #12]
 8025a44:	4916      	ldr	r1, [pc, #88]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8025a46:	4313      	orrs	r3, r2
 8025a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8025a4a:	687b      	ldr	r3, [r7, #4]
 8025a4c:	681b      	ldr	r3, [r3, #0]
 8025a4e:	f003 0308 	and.w	r3, r3, #8
 8025a52:	2b00      	cmp	r3, #0
 8025a54:	d009      	beq.n	8025a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8025a56:	4b12      	ldr	r3, [pc, #72]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8025a58:	689b      	ldr	r3, [r3, #8]
 8025a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8025a5e:	687b      	ldr	r3, [r7, #4]
 8025a60:	691b      	ldr	r3, [r3, #16]
 8025a62:	00db      	lsls	r3, r3, #3
 8025a64:	490e      	ldr	r1, [pc, #56]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8025a66:	4313      	orrs	r3, r2
 8025a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8025a6a:	f000 f821 	bl	8025ab0 <HAL_RCC_GetSysClockFreq>
 8025a6e:	4601      	mov	r1, r0
 8025a70:	4b0b      	ldr	r3, [pc, #44]	; (8025aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8025a72:	689b      	ldr	r3, [r3, #8]
 8025a74:	091b      	lsrs	r3, r3, #4
 8025a76:	f003 030f 	and.w	r3, r3, #15
 8025a7a:	4a0a      	ldr	r2, [pc, #40]	; (8025aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8025a7c:	5cd3      	ldrb	r3, [r2, r3]
 8025a7e:	fa21 f303 	lsr.w	r3, r1, r3
 8025a82:	4a09      	ldr	r2, [pc, #36]	; (8025aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8025a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8025a86:	4b09      	ldr	r3, [pc, #36]	; (8025aac <HAL_RCC_ClockConfig+0x1c8>)
 8025a88:	681b      	ldr	r3, [r3, #0]
 8025a8a:	4618      	mov	r0, r3
 8025a8c:	f7fe f8d0 	bl	8023c30 <HAL_InitTick>

  return HAL_OK;
 8025a90:	2300      	movs	r3, #0
}
 8025a92:	4618      	mov	r0, r3
 8025a94:	3710      	adds	r7, #16
 8025a96:	46bd      	mov	sp, r7
 8025a98:	bd80      	pop	{r7, pc}
 8025a9a:	bf00      	nop
 8025a9c:	40023c00 	.word	0x40023c00
 8025aa0:	40023800 	.word	0x40023800
 8025aa4:	08026df0 	.word	0x08026df0
 8025aa8:	20000000 	.word	0x20000000
 8025aac:	20000004 	.word	0x20000004

08025ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8025ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025ab2:	b085      	sub	sp, #20
 8025ab4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8025ab6:	2300      	movs	r3, #0
 8025ab8:	607b      	str	r3, [r7, #4]
 8025aba:	2300      	movs	r3, #0
 8025abc:	60fb      	str	r3, [r7, #12]
 8025abe:	2300      	movs	r3, #0
 8025ac0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8025ac2:	2300      	movs	r3, #0
 8025ac4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8025ac6:	4b50      	ldr	r3, [pc, #320]	; (8025c08 <HAL_RCC_GetSysClockFreq+0x158>)
 8025ac8:	689b      	ldr	r3, [r3, #8]
 8025aca:	f003 030c 	and.w	r3, r3, #12
 8025ace:	2b04      	cmp	r3, #4
 8025ad0:	d007      	beq.n	8025ae2 <HAL_RCC_GetSysClockFreq+0x32>
 8025ad2:	2b08      	cmp	r3, #8
 8025ad4:	d008      	beq.n	8025ae8 <HAL_RCC_GetSysClockFreq+0x38>
 8025ad6:	2b00      	cmp	r3, #0
 8025ad8:	f040 808d 	bne.w	8025bf6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8025adc:	4b4b      	ldr	r3, [pc, #300]	; (8025c0c <HAL_RCC_GetSysClockFreq+0x15c>)
 8025ade:	60bb      	str	r3, [r7, #8]
       break;
 8025ae0:	e08c      	b.n	8025bfc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8025ae2:	4b4b      	ldr	r3, [pc, #300]	; (8025c10 <HAL_RCC_GetSysClockFreq+0x160>)
 8025ae4:	60bb      	str	r3, [r7, #8]
      break;
 8025ae6:	e089      	b.n	8025bfc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8025ae8:	4b47      	ldr	r3, [pc, #284]	; (8025c08 <HAL_RCC_GetSysClockFreq+0x158>)
 8025aea:	685b      	ldr	r3, [r3, #4]
 8025aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8025af0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8025af2:	4b45      	ldr	r3, [pc, #276]	; (8025c08 <HAL_RCC_GetSysClockFreq+0x158>)
 8025af4:	685b      	ldr	r3, [r3, #4]
 8025af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8025afa:	2b00      	cmp	r3, #0
 8025afc:	d023      	beq.n	8025b46 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8025afe:	4b42      	ldr	r3, [pc, #264]	; (8025c08 <HAL_RCC_GetSysClockFreq+0x158>)
 8025b00:	685b      	ldr	r3, [r3, #4]
 8025b02:	099b      	lsrs	r3, r3, #6
 8025b04:	f04f 0400 	mov.w	r4, #0
 8025b08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8025b0c:	f04f 0200 	mov.w	r2, #0
 8025b10:	ea03 0501 	and.w	r5, r3, r1
 8025b14:	ea04 0602 	and.w	r6, r4, r2
 8025b18:	4a3d      	ldr	r2, [pc, #244]	; (8025c10 <HAL_RCC_GetSysClockFreq+0x160>)
 8025b1a:	fb02 f106 	mul.w	r1, r2, r6
 8025b1e:	2200      	movs	r2, #0
 8025b20:	fb02 f205 	mul.w	r2, r2, r5
 8025b24:	440a      	add	r2, r1
 8025b26:	493a      	ldr	r1, [pc, #232]	; (8025c10 <HAL_RCC_GetSysClockFreq+0x160>)
 8025b28:	fba5 0101 	umull	r0, r1, r5, r1
 8025b2c:	1853      	adds	r3, r2, r1
 8025b2e:	4619      	mov	r1, r3
 8025b30:	687b      	ldr	r3, [r7, #4]
 8025b32:	f04f 0400 	mov.w	r4, #0
 8025b36:	461a      	mov	r2, r3
 8025b38:	4623      	mov	r3, r4
 8025b3a:	f7fa ff27 	bl	802098c <__aeabi_uldivmod>
 8025b3e:	4603      	mov	r3, r0
 8025b40:	460c      	mov	r4, r1
 8025b42:	60fb      	str	r3, [r7, #12]
 8025b44:	e049      	b.n	8025bda <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8025b46:	4b30      	ldr	r3, [pc, #192]	; (8025c08 <HAL_RCC_GetSysClockFreq+0x158>)
 8025b48:	685b      	ldr	r3, [r3, #4]
 8025b4a:	099b      	lsrs	r3, r3, #6
 8025b4c:	f04f 0400 	mov.w	r4, #0
 8025b50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8025b54:	f04f 0200 	mov.w	r2, #0
 8025b58:	ea03 0501 	and.w	r5, r3, r1
 8025b5c:	ea04 0602 	and.w	r6, r4, r2
 8025b60:	4629      	mov	r1, r5
 8025b62:	4632      	mov	r2, r6
 8025b64:	f04f 0300 	mov.w	r3, #0
 8025b68:	f04f 0400 	mov.w	r4, #0
 8025b6c:	0154      	lsls	r4, r2, #5
 8025b6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8025b72:	014b      	lsls	r3, r1, #5
 8025b74:	4619      	mov	r1, r3
 8025b76:	4622      	mov	r2, r4
 8025b78:	1b49      	subs	r1, r1, r5
 8025b7a:	eb62 0206 	sbc.w	r2, r2, r6
 8025b7e:	f04f 0300 	mov.w	r3, #0
 8025b82:	f04f 0400 	mov.w	r4, #0
 8025b86:	0194      	lsls	r4, r2, #6
 8025b88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8025b8c:	018b      	lsls	r3, r1, #6
 8025b8e:	1a5b      	subs	r3, r3, r1
 8025b90:	eb64 0402 	sbc.w	r4, r4, r2
 8025b94:	f04f 0100 	mov.w	r1, #0
 8025b98:	f04f 0200 	mov.w	r2, #0
 8025b9c:	00e2      	lsls	r2, r4, #3
 8025b9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8025ba2:	00d9      	lsls	r1, r3, #3
 8025ba4:	460b      	mov	r3, r1
 8025ba6:	4614      	mov	r4, r2
 8025ba8:	195b      	adds	r3, r3, r5
 8025baa:	eb44 0406 	adc.w	r4, r4, r6
 8025bae:	f04f 0100 	mov.w	r1, #0
 8025bb2:	f04f 0200 	mov.w	r2, #0
 8025bb6:	02a2      	lsls	r2, r4, #10
 8025bb8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8025bbc:	0299      	lsls	r1, r3, #10
 8025bbe:	460b      	mov	r3, r1
 8025bc0:	4614      	mov	r4, r2
 8025bc2:	4618      	mov	r0, r3
 8025bc4:	4621      	mov	r1, r4
 8025bc6:	687b      	ldr	r3, [r7, #4]
 8025bc8:	f04f 0400 	mov.w	r4, #0
 8025bcc:	461a      	mov	r2, r3
 8025bce:	4623      	mov	r3, r4
 8025bd0:	f7fa fedc 	bl	802098c <__aeabi_uldivmod>
 8025bd4:	4603      	mov	r3, r0
 8025bd6:	460c      	mov	r4, r1
 8025bd8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8025bda:	4b0b      	ldr	r3, [pc, #44]	; (8025c08 <HAL_RCC_GetSysClockFreq+0x158>)
 8025bdc:	685b      	ldr	r3, [r3, #4]
 8025bde:	0c1b      	lsrs	r3, r3, #16
 8025be0:	f003 0303 	and.w	r3, r3, #3
 8025be4:	3301      	adds	r3, #1
 8025be6:	005b      	lsls	r3, r3, #1
 8025be8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8025bea:	68fa      	ldr	r2, [r7, #12]
 8025bec:	683b      	ldr	r3, [r7, #0]
 8025bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8025bf2:	60bb      	str	r3, [r7, #8]
      break;
 8025bf4:	e002      	b.n	8025bfc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8025bf6:	4b05      	ldr	r3, [pc, #20]	; (8025c0c <HAL_RCC_GetSysClockFreq+0x15c>)
 8025bf8:	60bb      	str	r3, [r7, #8]
      break;
 8025bfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8025bfc:	68bb      	ldr	r3, [r7, #8]
}
 8025bfe:	4618      	mov	r0, r3
 8025c00:	3714      	adds	r7, #20
 8025c02:	46bd      	mov	sp, r7
 8025c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025c06:	bf00      	nop
 8025c08:	40023800 	.word	0x40023800
 8025c0c:	00f42400 	.word	0x00f42400
 8025c10:	00b71b00 	.word	0x00b71b00

08025c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8025c14:	b480      	push	{r7}
 8025c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8025c18:	4b03      	ldr	r3, [pc, #12]	; (8025c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8025c1a:	681b      	ldr	r3, [r3, #0]
}
 8025c1c:	4618      	mov	r0, r3
 8025c1e:	46bd      	mov	sp, r7
 8025c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c24:	4770      	bx	lr
 8025c26:	bf00      	nop
 8025c28:	20000000 	.word	0x20000000

08025c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8025c2c:	b580      	push	{r7, lr}
 8025c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8025c30:	f7ff fff0 	bl	8025c14 <HAL_RCC_GetHCLKFreq>
 8025c34:	4601      	mov	r1, r0
 8025c36:	4b05      	ldr	r3, [pc, #20]	; (8025c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8025c38:	689b      	ldr	r3, [r3, #8]
 8025c3a:	0a9b      	lsrs	r3, r3, #10
 8025c3c:	f003 0307 	and.w	r3, r3, #7
 8025c40:	4a03      	ldr	r2, [pc, #12]	; (8025c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8025c42:	5cd3      	ldrb	r3, [r2, r3]
 8025c44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8025c48:	4618      	mov	r0, r3
 8025c4a:	bd80      	pop	{r7, pc}
 8025c4c:	40023800 	.word	0x40023800
 8025c50:	08026e00 	.word	0x08026e00

08025c54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8025c54:	b580      	push	{r7, lr}
 8025c56:	b082      	sub	sp, #8
 8025c58:	af00      	add	r7, sp, #0
 8025c5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8025c5c:	687b      	ldr	r3, [r7, #4]
 8025c5e:	2b00      	cmp	r3, #0
 8025c60:	d101      	bne.n	8025c66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8025c62:	2301      	movs	r3, #1
 8025c64:	e056      	b.n	8025d14 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8025c66:	687b      	ldr	r3, [r7, #4]
 8025c68:	2200      	movs	r2, #0
 8025c6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8025c6c:	687b      	ldr	r3, [r7, #4]
 8025c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8025c72:	b2db      	uxtb	r3, r3
 8025c74:	2b00      	cmp	r3, #0
 8025c76:	d106      	bne.n	8025c86 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8025c78:	687b      	ldr	r3, [r7, #4]
 8025c7a:	2200      	movs	r2, #0
 8025c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8025c80:	6878      	ldr	r0, [r7, #4]
 8025c82:	f7fd fa99 	bl	80231b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8025c86:	687b      	ldr	r3, [r7, #4]
 8025c88:	2202      	movs	r2, #2
 8025c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8025c8e:	687b      	ldr	r3, [r7, #4]
 8025c90:	681b      	ldr	r3, [r3, #0]
 8025c92:	681a      	ldr	r2, [r3, #0]
 8025c94:	687b      	ldr	r3, [r7, #4]
 8025c96:	681b      	ldr	r3, [r3, #0]
 8025c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8025c9c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8025c9e:	687b      	ldr	r3, [r7, #4]
 8025ca0:	685a      	ldr	r2, [r3, #4]
 8025ca2:	687b      	ldr	r3, [r7, #4]
 8025ca4:	689b      	ldr	r3, [r3, #8]
 8025ca6:	431a      	orrs	r2, r3
 8025ca8:	687b      	ldr	r3, [r7, #4]
 8025caa:	68db      	ldr	r3, [r3, #12]
 8025cac:	431a      	orrs	r2, r3
 8025cae:	687b      	ldr	r3, [r7, #4]
 8025cb0:	691b      	ldr	r3, [r3, #16]
 8025cb2:	431a      	orrs	r2, r3
 8025cb4:	687b      	ldr	r3, [r7, #4]
 8025cb6:	695b      	ldr	r3, [r3, #20]
 8025cb8:	431a      	orrs	r2, r3
 8025cba:	687b      	ldr	r3, [r7, #4]
 8025cbc:	699b      	ldr	r3, [r3, #24]
 8025cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025cc2:	431a      	orrs	r2, r3
 8025cc4:	687b      	ldr	r3, [r7, #4]
 8025cc6:	69db      	ldr	r3, [r3, #28]
 8025cc8:	431a      	orrs	r2, r3
 8025cca:	687b      	ldr	r3, [r7, #4]
 8025ccc:	6a1b      	ldr	r3, [r3, #32]
 8025cce:	ea42 0103 	orr.w	r1, r2, r3
 8025cd2:	687b      	ldr	r3, [r7, #4]
 8025cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8025cd6:	687b      	ldr	r3, [r7, #4]
 8025cd8:	681b      	ldr	r3, [r3, #0]
 8025cda:	430a      	orrs	r2, r1
 8025cdc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8025cde:	687b      	ldr	r3, [r7, #4]
 8025ce0:	699b      	ldr	r3, [r3, #24]
 8025ce2:	0c1b      	lsrs	r3, r3, #16
 8025ce4:	f003 0104 	and.w	r1, r3, #4
 8025ce8:	687b      	ldr	r3, [r7, #4]
 8025cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025cec:	687b      	ldr	r3, [r7, #4]
 8025cee:	681b      	ldr	r3, [r3, #0]
 8025cf0:	430a      	orrs	r2, r1
 8025cf2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8025cf4:	687b      	ldr	r3, [r7, #4]
 8025cf6:	681b      	ldr	r3, [r3, #0]
 8025cf8:	69da      	ldr	r2, [r3, #28]
 8025cfa:	687b      	ldr	r3, [r7, #4]
 8025cfc:	681b      	ldr	r3, [r3, #0]
 8025cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8025d02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8025d04:	687b      	ldr	r3, [r7, #4]
 8025d06:	2200      	movs	r2, #0
 8025d08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8025d0a:	687b      	ldr	r3, [r7, #4]
 8025d0c:	2201      	movs	r2, #1
 8025d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8025d12:	2300      	movs	r3, #0
}
 8025d14:	4618      	mov	r0, r3
 8025d16:	3708      	adds	r7, #8
 8025d18:	46bd      	mov	sp, r7
 8025d1a:	bd80      	pop	{r7, pc}

08025d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8025d1c:	b580      	push	{r7, lr}
 8025d1e:	b082      	sub	sp, #8
 8025d20:	af00      	add	r7, sp, #0
 8025d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8025d24:	687b      	ldr	r3, [r7, #4]
 8025d26:	2b00      	cmp	r3, #0
 8025d28:	d101      	bne.n	8025d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8025d2a:	2301      	movs	r3, #1
 8025d2c:	e01d      	b.n	8025d6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8025d2e:	687b      	ldr	r3, [r7, #4]
 8025d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025d34:	b2db      	uxtb	r3, r3
 8025d36:	2b00      	cmp	r3, #0
 8025d38:	d106      	bne.n	8025d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8025d3a:	687b      	ldr	r3, [r7, #4]
 8025d3c:	2200      	movs	r2, #0
 8025d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8025d42:	6878      	ldr	r0, [r7, #4]
 8025d44:	f7fd face 	bl	80232e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8025d48:	687b      	ldr	r3, [r7, #4]
 8025d4a:	2202      	movs	r2, #2
 8025d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8025d50:	687b      	ldr	r3, [r7, #4]
 8025d52:	681a      	ldr	r2, [r3, #0]
 8025d54:	687b      	ldr	r3, [r7, #4]
 8025d56:	3304      	adds	r3, #4
 8025d58:	4619      	mov	r1, r3
 8025d5a:	4610      	mov	r0, r2
 8025d5c:	f000 fc0e 	bl	802657c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8025d60:	687b      	ldr	r3, [r7, #4]
 8025d62:	2201      	movs	r2, #1
 8025d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8025d68:	2300      	movs	r3, #0
}
 8025d6a:	4618      	mov	r0, r3
 8025d6c:	3708      	adds	r7, #8
 8025d6e:	46bd      	mov	sp, r7
 8025d70:	bd80      	pop	{r7, pc}

08025d72 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8025d72:	b480      	push	{r7}
 8025d74:	b085      	sub	sp, #20
 8025d76:	af00      	add	r7, sp, #0
 8025d78:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8025d7a:	687b      	ldr	r3, [r7, #4]
 8025d7c:	681b      	ldr	r3, [r3, #0]
 8025d7e:	68da      	ldr	r2, [r3, #12]
 8025d80:	687b      	ldr	r3, [r7, #4]
 8025d82:	681b      	ldr	r3, [r3, #0]
 8025d84:	f042 0201 	orr.w	r2, r2, #1
 8025d88:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8025d8a:	687b      	ldr	r3, [r7, #4]
 8025d8c:	681b      	ldr	r3, [r3, #0]
 8025d8e:	689b      	ldr	r3, [r3, #8]
 8025d90:	f003 0307 	and.w	r3, r3, #7
 8025d94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8025d96:	68fb      	ldr	r3, [r7, #12]
 8025d98:	2b06      	cmp	r3, #6
 8025d9a:	d007      	beq.n	8025dac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8025d9c:	687b      	ldr	r3, [r7, #4]
 8025d9e:	681b      	ldr	r3, [r3, #0]
 8025da0:	681a      	ldr	r2, [r3, #0]
 8025da2:	687b      	ldr	r3, [r7, #4]
 8025da4:	681b      	ldr	r3, [r3, #0]
 8025da6:	f042 0201 	orr.w	r2, r2, #1
 8025daa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8025dac:	2300      	movs	r3, #0
}
 8025dae:	4618      	mov	r0, r3
 8025db0:	3714      	adds	r7, #20
 8025db2:	46bd      	mov	sp, r7
 8025db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025db8:	4770      	bx	lr

08025dba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8025dba:	b580      	push	{r7, lr}
 8025dbc:	b082      	sub	sp, #8
 8025dbe:	af00      	add	r7, sp, #0
 8025dc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8025dc2:	687b      	ldr	r3, [r7, #4]
 8025dc4:	2b00      	cmp	r3, #0
 8025dc6:	d101      	bne.n	8025dcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8025dc8:	2301      	movs	r3, #1
 8025dca:	e01d      	b.n	8025e08 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8025dcc:	687b      	ldr	r3, [r7, #4]
 8025dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025dd2:	b2db      	uxtb	r3, r3
 8025dd4:	2b00      	cmp	r3, #0
 8025dd6:	d106      	bne.n	8025de6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8025dd8:	687b      	ldr	r3, [r7, #4]
 8025dda:	2200      	movs	r2, #0
 8025ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8025de0:	6878      	ldr	r0, [r7, #4]
 8025de2:	f7fd fa31 	bl	8023248 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8025de6:	687b      	ldr	r3, [r7, #4]
 8025de8:	2202      	movs	r2, #2
 8025dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8025dee:	687b      	ldr	r3, [r7, #4]
 8025df0:	681a      	ldr	r2, [r3, #0]
 8025df2:	687b      	ldr	r3, [r7, #4]
 8025df4:	3304      	adds	r3, #4
 8025df6:	4619      	mov	r1, r3
 8025df8:	4610      	mov	r0, r2
 8025dfa:	f000 fbbf 	bl	802657c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8025dfe:	687b      	ldr	r3, [r7, #4]
 8025e00:	2201      	movs	r2, #1
 8025e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8025e06:	2300      	movs	r3, #0
}
 8025e08:	4618      	mov	r0, r3
 8025e0a:	3708      	adds	r7, #8
 8025e0c:	46bd      	mov	sp, r7
 8025e0e:	bd80      	pop	{r7, pc}

08025e10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8025e10:	b580      	push	{r7, lr}
 8025e12:	b084      	sub	sp, #16
 8025e14:	af00      	add	r7, sp, #0
 8025e16:	6078      	str	r0, [r7, #4]
 8025e18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8025e1a:	687b      	ldr	r3, [r7, #4]
 8025e1c:	681b      	ldr	r3, [r3, #0]
 8025e1e:	2201      	movs	r2, #1
 8025e20:	6839      	ldr	r1, [r7, #0]
 8025e22:	4618      	mov	r0, r3
 8025e24:	f000 fe94 	bl	8026b50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8025e28:	687b      	ldr	r3, [r7, #4]
 8025e2a:	681b      	ldr	r3, [r3, #0]
 8025e2c:	4a15      	ldr	r2, [pc, #84]	; (8025e84 <HAL_TIM_PWM_Start+0x74>)
 8025e2e:	4293      	cmp	r3, r2
 8025e30:	d004      	beq.n	8025e3c <HAL_TIM_PWM_Start+0x2c>
 8025e32:	687b      	ldr	r3, [r7, #4]
 8025e34:	681b      	ldr	r3, [r3, #0]
 8025e36:	4a14      	ldr	r2, [pc, #80]	; (8025e88 <HAL_TIM_PWM_Start+0x78>)
 8025e38:	4293      	cmp	r3, r2
 8025e3a:	d101      	bne.n	8025e40 <HAL_TIM_PWM_Start+0x30>
 8025e3c:	2301      	movs	r3, #1
 8025e3e:	e000      	b.n	8025e42 <HAL_TIM_PWM_Start+0x32>
 8025e40:	2300      	movs	r3, #0
 8025e42:	2b00      	cmp	r3, #0
 8025e44:	d007      	beq.n	8025e56 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8025e46:	687b      	ldr	r3, [r7, #4]
 8025e48:	681b      	ldr	r3, [r3, #0]
 8025e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8025e4c:	687b      	ldr	r3, [r7, #4]
 8025e4e:	681b      	ldr	r3, [r3, #0]
 8025e50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8025e54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8025e56:	687b      	ldr	r3, [r7, #4]
 8025e58:	681b      	ldr	r3, [r3, #0]
 8025e5a:	689b      	ldr	r3, [r3, #8]
 8025e5c:	f003 0307 	and.w	r3, r3, #7
 8025e60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8025e62:	68fb      	ldr	r3, [r7, #12]
 8025e64:	2b06      	cmp	r3, #6
 8025e66:	d007      	beq.n	8025e78 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8025e68:	687b      	ldr	r3, [r7, #4]
 8025e6a:	681b      	ldr	r3, [r3, #0]
 8025e6c:	681a      	ldr	r2, [r3, #0]
 8025e6e:	687b      	ldr	r3, [r7, #4]
 8025e70:	681b      	ldr	r3, [r3, #0]
 8025e72:	f042 0201 	orr.w	r2, r2, #1
 8025e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8025e78:	2300      	movs	r3, #0
}
 8025e7a:	4618      	mov	r0, r3
 8025e7c:	3710      	adds	r7, #16
 8025e7e:	46bd      	mov	sp, r7
 8025e80:	bd80      	pop	{r7, pc}
 8025e82:	bf00      	nop
 8025e84:	40010000 	.word	0x40010000
 8025e88:	40010400 	.word	0x40010400

08025e8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8025e8c:	b580      	push	{r7, lr}
 8025e8e:	b086      	sub	sp, #24
 8025e90:	af00      	add	r7, sp, #0
 8025e92:	6078      	str	r0, [r7, #4]
 8025e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8025e96:	687b      	ldr	r3, [r7, #4]
 8025e98:	2b00      	cmp	r3, #0
 8025e9a:	d101      	bne.n	8025ea0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8025e9c:	2301      	movs	r3, #1
 8025e9e:	e083      	b.n	8025fa8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8025ea0:	687b      	ldr	r3, [r7, #4]
 8025ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025ea6:	b2db      	uxtb	r3, r3
 8025ea8:	2b00      	cmp	r3, #0
 8025eaa:	d106      	bne.n	8025eba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8025eac:	687b      	ldr	r3, [r7, #4]
 8025eae:	2200      	movs	r2, #0
 8025eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8025eb4:	6878      	ldr	r0, [r7, #4]
 8025eb6:	f7fd faab 	bl	8023410 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8025eba:	687b      	ldr	r3, [r7, #4]
 8025ebc:	2202      	movs	r2, #2
 8025ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8025ec2:	687b      	ldr	r3, [r7, #4]
 8025ec4:	681b      	ldr	r3, [r3, #0]
 8025ec6:	689b      	ldr	r3, [r3, #8]
 8025ec8:	687a      	ldr	r2, [r7, #4]
 8025eca:	6812      	ldr	r2, [r2, #0]
 8025ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8025ed0:	f023 0307 	bic.w	r3, r3, #7
 8025ed4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8025ed6:	687b      	ldr	r3, [r7, #4]
 8025ed8:	681a      	ldr	r2, [r3, #0]
 8025eda:	687b      	ldr	r3, [r7, #4]
 8025edc:	3304      	adds	r3, #4
 8025ede:	4619      	mov	r1, r3
 8025ee0:	4610      	mov	r0, r2
 8025ee2:	f000 fb4b 	bl	802657c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8025ee6:	687b      	ldr	r3, [r7, #4]
 8025ee8:	681b      	ldr	r3, [r3, #0]
 8025eea:	689b      	ldr	r3, [r3, #8]
 8025eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8025eee:	687b      	ldr	r3, [r7, #4]
 8025ef0:	681b      	ldr	r3, [r3, #0]
 8025ef2:	699b      	ldr	r3, [r3, #24]
 8025ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8025ef6:	687b      	ldr	r3, [r7, #4]
 8025ef8:	681b      	ldr	r3, [r3, #0]
 8025efa:	6a1b      	ldr	r3, [r3, #32]
 8025efc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8025efe:	683b      	ldr	r3, [r7, #0]
 8025f00:	681b      	ldr	r3, [r3, #0]
 8025f02:	697a      	ldr	r2, [r7, #20]
 8025f04:	4313      	orrs	r3, r2
 8025f06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8025f08:	693b      	ldr	r3, [r7, #16]
 8025f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8025f0e:	f023 0303 	bic.w	r3, r3, #3
 8025f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8025f14:	683b      	ldr	r3, [r7, #0]
 8025f16:	689a      	ldr	r2, [r3, #8]
 8025f18:	683b      	ldr	r3, [r7, #0]
 8025f1a:	699b      	ldr	r3, [r3, #24]
 8025f1c:	021b      	lsls	r3, r3, #8
 8025f1e:	4313      	orrs	r3, r2
 8025f20:	693a      	ldr	r2, [r7, #16]
 8025f22:	4313      	orrs	r3, r2
 8025f24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8025f26:	693b      	ldr	r3, [r7, #16]
 8025f28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8025f2c:	f023 030c 	bic.w	r3, r3, #12
 8025f30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8025f32:	693b      	ldr	r3, [r7, #16]
 8025f34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8025f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8025f3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8025f3e:	683b      	ldr	r3, [r7, #0]
 8025f40:	68da      	ldr	r2, [r3, #12]
 8025f42:	683b      	ldr	r3, [r7, #0]
 8025f44:	69db      	ldr	r3, [r3, #28]
 8025f46:	021b      	lsls	r3, r3, #8
 8025f48:	4313      	orrs	r3, r2
 8025f4a:	693a      	ldr	r2, [r7, #16]
 8025f4c:	4313      	orrs	r3, r2
 8025f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8025f50:	683b      	ldr	r3, [r7, #0]
 8025f52:	691b      	ldr	r3, [r3, #16]
 8025f54:	011a      	lsls	r2, r3, #4
 8025f56:	683b      	ldr	r3, [r7, #0]
 8025f58:	6a1b      	ldr	r3, [r3, #32]
 8025f5a:	031b      	lsls	r3, r3, #12
 8025f5c:	4313      	orrs	r3, r2
 8025f5e:	693a      	ldr	r2, [r7, #16]
 8025f60:	4313      	orrs	r3, r2
 8025f62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8025f64:	68fb      	ldr	r3, [r7, #12]
 8025f66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8025f6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8025f6c:	68fb      	ldr	r3, [r7, #12]
 8025f6e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8025f72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8025f74:	683b      	ldr	r3, [r7, #0]
 8025f76:	685a      	ldr	r2, [r3, #4]
 8025f78:	683b      	ldr	r3, [r7, #0]
 8025f7a:	695b      	ldr	r3, [r3, #20]
 8025f7c:	011b      	lsls	r3, r3, #4
 8025f7e:	4313      	orrs	r3, r2
 8025f80:	68fa      	ldr	r2, [r7, #12]
 8025f82:	4313      	orrs	r3, r2
 8025f84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8025f86:	687b      	ldr	r3, [r7, #4]
 8025f88:	681b      	ldr	r3, [r3, #0]
 8025f8a:	697a      	ldr	r2, [r7, #20]
 8025f8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8025f8e:	687b      	ldr	r3, [r7, #4]
 8025f90:	681b      	ldr	r3, [r3, #0]
 8025f92:	693a      	ldr	r2, [r7, #16]
 8025f94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8025f96:	687b      	ldr	r3, [r7, #4]
 8025f98:	681b      	ldr	r3, [r3, #0]
 8025f9a:	68fa      	ldr	r2, [r7, #12]
 8025f9c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8025f9e:	687b      	ldr	r3, [r7, #4]
 8025fa0:	2201      	movs	r2, #1
 8025fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8025fa6:	2300      	movs	r3, #0
}
 8025fa8:	4618      	mov	r0, r3
 8025faa:	3718      	adds	r7, #24
 8025fac:	46bd      	mov	sp, r7
 8025fae:	bd80      	pop	{r7, pc}

08025fb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8025fb0:	b580      	push	{r7, lr}
 8025fb2:	b082      	sub	sp, #8
 8025fb4:	af00      	add	r7, sp, #0
 8025fb6:	6078      	str	r0, [r7, #4]
 8025fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8025fba:	683b      	ldr	r3, [r7, #0]
 8025fbc:	2b00      	cmp	r3, #0
 8025fbe:	d002      	beq.n	8025fc6 <HAL_TIM_Encoder_Start+0x16>
 8025fc0:	2b04      	cmp	r3, #4
 8025fc2:	d008      	beq.n	8025fd6 <HAL_TIM_Encoder_Start+0x26>
 8025fc4:	e00f      	b.n	8025fe6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8025fc6:	687b      	ldr	r3, [r7, #4]
 8025fc8:	681b      	ldr	r3, [r3, #0]
 8025fca:	2201      	movs	r2, #1
 8025fcc:	2100      	movs	r1, #0
 8025fce:	4618      	mov	r0, r3
 8025fd0:	f000 fdbe 	bl	8026b50 <TIM_CCxChannelCmd>
      break;
 8025fd4:	e016      	b.n	8026004 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8025fd6:	687b      	ldr	r3, [r7, #4]
 8025fd8:	681b      	ldr	r3, [r3, #0]
 8025fda:	2201      	movs	r2, #1
 8025fdc:	2104      	movs	r1, #4
 8025fde:	4618      	mov	r0, r3
 8025fe0:	f000 fdb6 	bl	8026b50 <TIM_CCxChannelCmd>
      break;
 8025fe4:	e00e      	b.n	8026004 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8025fe6:	687b      	ldr	r3, [r7, #4]
 8025fe8:	681b      	ldr	r3, [r3, #0]
 8025fea:	2201      	movs	r2, #1
 8025fec:	2100      	movs	r1, #0
 8025fee:	4618      	mov	r0, r3
 8025ff0:	f000 fdae 	bl	8026b50 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8025ff4:	687b      	ldr	r3, [r7, #4]
 8025ff6:	681b      	ldr	r3, [r3, #0]
 8025ff8:	2201      	movs	r2, #1
 8025ffa:	2104      	movs	r1, #4
 8025ffc:	4618      	mov	r0, r3
 8025ffe:	f000 fda7 	bl	8026b50 <TIM_CCxChannelCmd>
      break;
 8026002:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8026004:	687b      	ldr	r3, [r7, #4]
 8026006:	681b      	ldr	r3, [r3, #0]
 8026008:	681a      	ldr	r2, [r3, #0]
 802600a:	687b      	ldr	r3, [r7, #4]
 802600c:	681b      	ldr	r3, [r3, #0]
 802600e:	f042 0201 	orr.w	r2, r2, #1
 8026012:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8026014:	2300      	movs	r3, #0
}
 8026016:	4618      	mov	r0, r3
 8026018:	3708      	adds	r7, #8
 802601a:	46bd      	mov	sp, r7
 802601c:	bd80      	pop	{r7, pc}

0802601e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802601e:	b580      	push	{r7, lr}
 8026020:	b082      	sub	sp, #8
 8026022:	af00      	add	r7, sp, #0
 8026024:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8026026:	687b      	ldr	r3, [r7, #4]
 8026028:	681b      	ldr	r3, [r3, #0]
 802602a:	691b      	ldr	r3, [r3, #16]
 802602c:	f003 0302 	and.w	r3, r3, #2
 8026030:	2b02      	cmp	r3, #2
 8026032:	d122      	bne.n	802607a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8026034:	687b      	ldr	r3, [r7, #4]
 8026036:	681b      	ldr	r3, [r3, #0]
 8026038:	68db      	ldr	r3, [r3, #12]
 802603a:	f003 0302 	and.w	r3, r3, #2
 802603e:	2b02      	cmp	r3, #2
 8026040:	d11b      	bne.n	802607a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8026042:	687b      	ldr	r3, [r7, #4]
 8026044:	681b      	ldr	r3, [r3, #0]
 8026046:	f06f 0202 	mvn.w	r2, #2
 802604a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802604c:	687b      	ldr	r3, [r7, #4]
 802604e:	2201      	movs	r2, #1
 8026050:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8026052:	687b      	ldr	r3, [r7, #4]
 8026054:	681b      	ldr	r3, [r3, #0]
 8026056:	699b      	ldr	r3, [r3, #24]
 8026058:	f003 0303 	and.w	r3, r3, #3
 802605c:	2b00      	cmp	r3, #0
 802605e:	d003      	beq.n	8026068 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8026060:	6878      	ldr	r0, [r7, #4]
 8026062:	f000 fa6c 	bl	802653e <HAL_TIM_IC_CaptureCallback>
 8026066:	e005      	b.n	8026074 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8026068:	6878      	ldr	r0, [r7, #4]
 802606a:	f000 fa5e 	bl	802652a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802606e:	6878      	ldr	r0, [r7, #4]
 8026070:	f000 fa6f 	bl	8026552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8026074:	687b      	ldr	r3, [r7, #4]
 8026076:	2200      	movs	r2, #0
 8026078:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802607a:	687b      	ldr	r3, [r7, #4]
 802607c:	681b      	ldr	r3, [r3, #0]
 802607e:	691b      	ldr	r3, [r3, #16]
 8026080:	f003 0304 	and.w	r3, r3, #4
 8026084:	2b04      	cmp	r3, #4
 8026086:	d122      	bne.n	80260ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8026088:	687b      	ldr	r3, [r7, #4]
 802608a:	681b      	ldr	r3, [r3, #0]
 802608c:	68db      	ldr	r3, [r3, #12]
 802608e:	f003 0304 	and.w	r3, r3, #4
 8026092:	2b04      	cmp	r3, #4
 8026094:	d11b      	bne.n	80260ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8026096:	687b      	ldr	r3, [r7, #4]
 8026098:	681b      	ldr	r3, [r3, #0]
 802609a:	f06f 0204 	mvn.w	r2, #4
 802609e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80260a0:	687b      	ldr	r3, [r7, #4]
 80260a2:	2202      	movs	r2, #2
 80260a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80260a6:	687b      	ldr	r3, [r7, #4]
 80260a8:	681b      	ldr	r3, [r3, #0]
 80260aa:	699b      	ldr	r3, [r3, #24]
 80260ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80260b0:	2b00      	cmp	r3, #0
 80260b2:	d003      	beq.n	80260bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80260b4:	6878      	ldr	r0, [r7, #4]
 80260b6:	f000 fa42 	bl	802653e <HAL_TIM_IC_CaptureCallback>
 80260ba:	e005      	b.n	80260c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80260bc:	6878      	ldr	r0, [r7, #4]
 80260be:	f000 fa34 	bl	802652a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80260c2:	6878      	ldr	r0, [r7, #4]
 80260c4:	f000 fa45 	bl	8026552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80260c8:	687b      	ldr	r3, [r7, #4]
 80260ca:	2200      	movs	r2, #0
 80260cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80260ce:	687b      	ldr	r3, [r7, #4]
 80260d0:	681b      	ldr	r3, [r3, #0]
 80260d2:	691b      	ldr	r3, [r3, #16]
 80260d4:	f003 0308 	and.w	r3, r3, #8
 80260d8:	2b08      	cmp	r3, #8
 80260da:	d122      	bne.n	8026122 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80260dc:	687b      	ldr	r3, [r7, #4]
 80260de:	681b      	ldr	r3, [r3, #0]
 80260e0:	68db      	ldr	r3, [r3, #12]
 80260e2:	f003 0308 	and.w	r3, r3, #8
 80260e6:	2b08      	cmp	r3, #8
 80260e8:	d11b      	bne.n	8026122 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80260ea:	687b      	ldr	r3, [r7, #4]
 80260ec:	681b      	ldr	r3, [r3, #0]
 80260ee:	f06f 0208 	mvn.w	r2, #8
 80260f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80260f4:	687b      	ldr	r3, [r7, #4]
 80260f6:	2204      	movs	r2, #4
 80260f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80260fa:	687b      	ldr	r3, [r7, #4]
 80260fc:	681b      	ldr	r3, [r3, #0]
 80260fe:	69db      	ldr	r3, [r3, #28]
 8026100:	f003 0303 	and.w	r3, r3, #3
 8026104:	2b00      	cmp	r3, #0
 8026106:	d003      	beq.n	8026110 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8026108:	6878      	ldr	r0, [r7, #4]
 802610a:	f000 fa18 	bl	802653e <HAL_TIM_IC_CaptureCallback>
 802610e:	e005      	b.n	802611c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8026110:	6878      	ldr	r0, [r7, #4]
 8026112:	f000 fa0a 	bl	802652a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8026116:	6878      	ldr	r0, [r7, #4]
 8026118:	f000 fa1b 	bl	8026552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802611c:	687b      	ldr	r3, [r7, #4]
 802611e:	2200      	movs	r2, #0
 8026120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8026122:	687b      	ldr	r3, [r7, #4]
 8026124:	681b      	ldr	r3, [r3, #0]
 8026126:	691b      	ldr	r3, [r3, #16]
 8026128:	f003 0310 	and.w	r3, r3, #16
 802612c:	2b10      	cmp	r3, #16
 802612e:	d122      	bne.n	8026176 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8026130:	687b      	ldr	r3, [r7, #4]
 8026132:	681b      	ldr	r3, [r3, #0]
 8026134:	68db      	ldr	r3, [r3, #12]
 8026136:	f003 0310 	and.w	r3, r3, #16
 802613a:	2b10      	cmp	r3, #16
 802613c:	d11b      	bne.n	8026176 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802613e:	687b      	ldr	r3, [r7, #4]
 8026140:	681b      	ldr	r3, [r3, #0]
 8026142:	f06f 0210 	mvn.w	r2, #16
 8026146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8026148:	687b      	ldr	r3, [r7, #4]
 802614a:	2208      	movs	r2, #8
 802614c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802614e:	687b      	ldr	r3, [r7, #4]
 8026150:	681b      	ldr	r3, [r3, #0]
 8026152:	69db      	ldr	r3, [r3, #28]
 8026154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8026158:	2b00      	cmp	r3, #0
 802615a:	d003      	beq.n	8026164 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802615c:	6878      	ldr	r0, [r7, #4]
 802615e:	f000 f9ee 	bl	802653e <HAL_TIM_IC_CaptureCallback>
 8026162:	e005      	b.n	8026170 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8026164:	6878      	ldr	r0, [r7, #4]
 8026166:	f000 f9e0 	bl	802652a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802616a:	6878      	ldr	r0, [r7, #4]
 802616c:	f000 f9f1 	bl	8026552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8026170:	687b      	ldr	r3, [r7, #4]
 8026172:	2200      	movs	r2, #0
 8026174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8026176:	687b      	ldr	r3, [r7, #4]
 8026178:	681b      	ldr	r3, [r3, #0]
 802617a:	691b      	ldr	r3, [r3, #16]
 802617c:	f003 0301 	and.w	r3, r3, #1
 8026180:	2b01      	cmp	r3, #1
 8026182:	d10e      	bne.n	80261a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8026184:	687b      	ldr	r3, [r7, #4]
 8026186:	681b      	ldr	r3, [r3, #0]
 8026188:	68db      	ldr	r3, [r3, #12]
 802618a:	f003 0301 	and.w	r3, r3, #1
 802618e:	2b01      	cmp	r3, #1
 8026190:	d107      	bne.n	80261a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8026192:	687b      	ldr	r3, [r7, #4]
 8026194:	681b      	ldr	r3, [r3, #0]
 8026196:	f06f 0201 	mvn.w	r2, #1
 802619a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802619c:	6878      	ldr	r0, [r7, #4]
 802619e:	f7fb fbb9 	bl	8021914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80261a2:	687b      	ldr	r3, [r7, #4]
 80261a4:	681b      	ldr	r3, [r3, #0]
 80261a6:	691b      	ldr	r3, [r3, #16]
 80261a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80261ac:	2b80      	cmp	r3, #128	; 0x80
 80261ae:	d10e      	bne.n	80261ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80261b0:	687b      	ldr	r3, [r7, #4]
 80261b2:	681b      	ldr	r3, [r3, #0]
 80261b4:	68db      	ldr	r3, [r3, #12]
 80261b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80261ba:	2b80      	cmp	r3, #128	; 0x80
 80261bc:	d107      	bne.n	80261ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80261be:	687b      	ldr	r3, [r7, #4]
 80261c0:	681b      	ldr	r3, [r3, #0]
 80261c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80261c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80261c8:	6878      	ldr	r0, [r7, #4]
 80261ca:	f000 fdbf 	bl	8026d4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80261ce:	687b      	ldr	r3, [r7, #4]
 80261d0:	681b      	ldr	r3, [r3, #0]
 80261d2:	691b      	ldr	r3, [r3, #16]
 80261d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80261d8:	2b40      	cmp	r3, #64	; 0x40
 80261da:	d10e      	bne.n	80261fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80261dc:	687b      	ldr	r3, [r7, #4]
 80261de:	681b      	ldr	r3, [r3, #0]
 80261e0:	68db      	ldr	r3, [r3, #12]
 80261e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80261e6:	2b40      	cmp	r3, #64	; 0x40
 80261e8:	d107      	bne.n	80261fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80261ea:	687b      	ldr	r3, [r7, #4]
 80261ec:	681b      	ldr	r3, [r3, #0]
 80261ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80261f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80261f4:	6878      	ldr	r0, [r7, #4]
 80261f6:	f000 f9b6 	bl	8026566 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80261fa:	687b      	ldr	r3, [r7, #4]
 80261fc:	681b      	ldr	r3, [r3, #0]
 80261fe:	691b      	ldr	r3, [r3, #16]
 8026200:	f003 0320 	and.w	r3, r3, #32
 8026204:	2b20      	cmp	r3, #32
 8026206:	d10e      	bne.n	8026226 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8026208:	687b      	ldr	r3, [r7, #4]
 802620a:	681b      	ldr	r3, [r3, #0]
 802620c:	68db      	ldr	r3, [r3, #12]
 802620e:	f003 0320 	and.w	r3, r3, #32
 8026212:	2b20      	cmp	r3, #32
 8026214:	d107      	bne.n	8026226 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8026216:	687b      	ldr	r3, [r7, #4]
 8026218:	681b      	ldr	r3, [r3, #0]
 802621a:	f06f 0220 	mvn.w	r2, #32
 802621e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8026220:	6878      	ldr	r0, [r7, #4]
 8026222:	f000 fd89 	bl	8026d38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8026226:	bf00      	nop
 8026228:	3708      	adds	r7, #8
 802622a:	46bd      	mov	sp, r7
 802622c:	bd80      	pop	{r7, pc}
	...

08026230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8026230:	b580      	push	{r7, lr}
 8026232:	b084      	sub	sp, #16
 8026234:	af00      	add	r7, sp, #0
 8026236:	60f8      	str	r0, [r7, #12]
 8026238:	60b9      	str	r1, [r7, #8]
 802623a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 802623c:	68fb      	ldr	r3, [r7, #12]
 802623e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026242:	2b01      	cmp	r3, #1
 8026244:	d101      	bne.n	802624a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8026246:	2302      	movs	r3, #2
 8026248:	e0b4      	b.n	80263b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 802624a:	68fb      	ldr	r3, [r7, #12]
 802624c:	2201      	movs	r2, #1
 802624e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8026252:	68fb      	ldr	r3, [r7, #12]
 8026254:	2202      	movs	r2, #2
 8026256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 802625a:	687b      	ldr	r3, [r7, #4]
 802625c:	2b0c      	cmp	r3, #12
 802625e:	f200 809f 	bhi.w	80263a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8026262:	a201      	add	r2, pc, #4	; (adr r2, 8026268 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8026264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026268:	0802629d 	.word	0x0802629d
 802626c:	080263a1 	.word	0x080263a1
 8026270:	080263a1 	.word	0x080263a1
 8026274:	080263a1 	.word	0x080263a1
 8026278:	080262dd 	.word	0x080262dd
 802627c:	080263a1 	.word	0x080263a1
 8026280:	080263a1 	.word	0x080263a1
 8026284:	080263a1 	.word	0x080263a1
 8026288:	0802631f 	.word	0x0802631f
 802628c:	080263a1 	.word	0x080263a1
 8026290:	080263a1 	.word	0x080263a1
 8026294:	080263a1 	.word	0x080263a1
 8026298:	0802635f 	.word	0x0802635f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 802629c:	68fb      	ldr	r3, [r7, #12]
 802629e:	681b      	ldr	r3, [r3, #0]
 80262a0:	68b9      	ldr	r1, [r7, #8]
 80262a2:	4618      	mov	r0, r3
 80262a4:	f000 fa0a 	bl	80266bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80262a8:	68fb      	ldr	r3, [r7, #12]
 80262aa:	681b      	ldr	r3, [r3, #0]
 80262ac:	699a      	ldr	r2, [r3, #24]
 80262ae:	68fb      	ldr	r3, [r7, #12]
 80262b0:	681b      	ldr	r3, [r3, #0]
 80262b2:	f042 0208 	orr.w	r2, r2, #8
 80262b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80262b8:	68fb      	ldr	r3, [r7, #12]
 80262ba:	681b      	ldr	r3, [r3, #0]
 80262bc:	699a      	ldr	r2, [r3, #24]
 80262be:	68fb      	ldr	r3, [r7, #12]
 80262c0:	681b      	ldr	r3, [r3, #0]
 80262c2:	f022 0204 	bic.w	r2, r2, #4
 80262c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80262c8:	68fb      	ldr	r3, [r7, #12]
 80262ca:	681b      	ldr	r3, [r3, #0]
 80262cc:	6999      	ldr	r1, [r3, #24]
 80262ce:	68bb      	ldr	r3, [r7, #8]
 80262d0:	691a      	ldr	r2, [r3, #16]
 80262d2:	68fb      	ldr	r3, [r7, #12]
 80262d4:	681b      	ldr	r3, [r3, #0]
 80262d6:	430a      	orrs	r2, r1
 80262d8:	619a      	str	r2, [r3, #24]
      break;
 80262da:	e062      	b.n	80263a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80262dc:	68fb      	ldr	r3, [r7, #12]
 80262de:	681b      	ldr	r3, [r3, #0]
 80262e0:	68b9      	ldr	r1, [r7, #8]
 80262e2:	4618      	mov	r0, r3
 80262e4:	f000 fa5a 	bl	802679c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80262e8:	68fb      	ldr	r3, [r7, #12]
 80262ea:	681b      	ldr	r3, [r3, #0]
 80262ec:	699a      	ldr	r2, [r3, #24]
 80262ee:	68fb      	ldr	r3, [r7, #12]
 80262f0:	681b      	ldr	r3, [r3, #0]
 80262f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80262f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80262f8:	68fb      	ldr	r3, [r7, #12]
 80262fa:	681b      	ldr	r3, [r3, #0]
 80262fc:	699a      	ldr	r2, [r3, #24]
 80262fe:	68fb      	ldr	r3, [r7, #12]
 8026300:	681b      	ldr	r3, [r3, #0]
 8026302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8026306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8026308:	68fb      	ldr	r3, [r7, #12]
 802630a:	681b      	ldr	r3, [r3, #0]
 802630c:	6999      	ldr	r1, [r3, #24]
 802630e:	68bb      	ldr	r3, [r7, #8]
 8026310:	691b      	ldr	r3, [r3, #16]
 8026312:	021a      	lsls	r2, r3, #8
 8026314:	68fb      	ldr	r3, [r7, #12]
 8026316:	681b      	ldr	r3, [r3, #0]
 8026318:	430a      	orrs	r2, r1
 802631a:	619a      	str	r2, [r3, #24]
      break;
 802631c:	e041      	b.n	80263a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 802631e:	68fb      	ldr	r3, [r7, #12]
 8026320:	681b      	ldr	r3, [r3, #0]
 8026322:	68b9      	ldr	r1, [r7, #8]
 8026324:	4618      	mov	r0, r3
 8026326:	f000 faaf 	bl	8026888 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 802632a:	68fb      	ldr	r3, [r7, #12]
 802632c:	681b      	ldr	r3, [r3, #0]
 802632e:	69da      	ldr	r2, [r3, #28]
 8026330:	68fb      	ldr	r3, [r7, #12]
 8026332:	681b      	ldr	r3, [r3, #0]
 8026334:	f042 0208 	orr.w	r2, r2, #8
 8026338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 802633a:	68fb      	ldr	r3, [r7, #12]
 802633c:	681b      	ldr	r3, [r3, #0]
 802633e:	69da      	ldr	r2, [r3, #28]
 8026340:	68fb      	ldr	r3, [r7, #12]
 8026342:	681b      	ldr	r3, [r3, #0]
 8026344:	f022 0204 	bic.w	r2, r2, #4
 8026348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 802634a:	68fb      	ldr	r3, [r7, #12]
 802634c:	681b      	ldr	r3, [r3, #0]
 802634e:	69d9      	ldr	r1, [r3, #28]
 8026350:	68bb      	ldr	r3, [r7, #8]
 8026352:	691a      	ldr	r2, [r3, #16]
 8026354:	68fb      	ldr	r3, [r7, #12]
 8026356:	681b      	ldr	r3, [r3, #0]
 8026358:	430a      	orrs	r2, r1
 802635a:	61da      	str	r2, [r3, #28]
      break;
 802635c:	e021      	b.n	80263a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 802635e:	68fb      	ldr	r3, [r7, #12]
 8026360:	681b      	ldr	r3, [r3, #0]
 8026362:	68b9      	ldr	r1, [r7, #8]
 8026364:	4618      	mov	r0, r3
 8026366:	f000 fb03 	bl	8026970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 802636a:	68fb      	ldr	r3, [r7, #12]
 802636c:	681b      	ldr	r3, [r3, #0]
 802636e:	69da      	ldr	r2, [r3, #28]
 8026370:	68fb      	ldr	r3, [r7, #12]
 8026372:	681b      	ldr	r3, [r3, #0]
 8026374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8026378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 802637a:	68fb      	ldr	r3, [r7, #12]
 802637c:	681b      	ldr	r3, [r3, #0]
 802637e:	69da      	ldr	r2, [r3, #28]
 8026380:	68fb      	ldr	r3, [r7, #12]
 8026382:	681b      	ldr	r3, [r3, #0]
 8026384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8026388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 802638a:	68fb      	ldr	r3, [r7, #12]
 802638c:	681b      	ldr	r3, [r3, #0]
 802638e:	69d9      	ldr	r1, [r3, #28]
 8026390:	68bb      	ldr	r3, [r7, #8]
 8026392:	691b      	ldr	r3, [r3, #16]
 8026394:	021a      	lsls	r2, r3, #8
 8026396:	68fb      	ldr	r3, [r7, #12]
 8026398:	681b      	ldr	r3, [r3, #0]
 802639a:	430a      	orrs	r2, r1
 802639c:	61da      	str	r2, [r3, #28]
      break;
 802639e:	e000      	b.n	80263a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80263a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80263a2:	68fb      	ldr	r3, [r7, #12]
 80263a4:	2201      	movs	r2, #1
 80263a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80263aa:	68fb      	ldr	r3, [r7, #12]
 80263ac:	2200      	movs	r2, #0
 80263ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80263b2:	2300      	movs	r3, #0
}
 80263b4:	4618      	mov	r0, r3
 80263b6:	3710      	adds	r7, #16
 80263b8:	46bd      	mov	sp, r7
 80263ba:	bd80      	pop	{r7, pc}

080263bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80263bc:	b580      	push	{r7, lr}
 80263be:	b084      	sub	sp, #16
 80263c0:	af00      	add	r7, sp, #0
 80263c2:	6078      	str	r0, [r7, #4]
 80263c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80263c6:	687b      	ldr	r3, [r7, #4]
 80263c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80263cc:	2b01      	cmp	r3, #1
 80263ce:	d101      	bne.n	80263d4 <HAL_TIM_ConfigClockSource+0x18>
 80263d0:	2302      	movs	r3, #2
 80263d2:	e0a6      	b.n	8026522 <HAL_TIM_ConfigClockSource+0x166>
 80263d4:	687b      	ldr	r3, [r7, #4]
 80263d6:	2201      	movs	r2, #1
 80263d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80263dc:	687b      	ldr	r3, [r7, #4]
 80263de:	2202      	movs	r2, #2
 80263e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80263e4:	687b      	ldr	r3, [r7, #4]
 80263e6:	681b      	ldr	r3, [r3, #0]
 80263e8:	689b      	ldr	r3, [r3, #8]
 80263ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80263ec:	68fb      	ldr	r3, [r7, #12]
 80263ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80263f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80263f4:	68fb      	ldr	r3, [r7, #12]
 80263f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80263fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80263fc:	687b      	ldr	r3, [r7, #4]
 80263fe:	681b      	ldr	r3, [r3, #0]
 8026400:	68fa      	ldr	r2, [r7, #12]
 8026402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8026404:	683b      	ldr	r3, [r7, #0]
 8026406:	681b      	ldr	r3, [r3, #0]
 8026408:	2b40      	cmp	r3, #64	; 0x40
 802640a:	d067      	beq.n	80264dc <HAL_TIM_ConfigClockSource+0x120>
 802640c:	2b40      	cmp	r3, #64	; 0x40
 802640e:	d80b      	bhi.n	8026428 <HAL_TIM_ConfigClockSource+0x6c>
 8026410:	2b10      	cmp	r3, #16
 8026412:	d073      	beq.n	80264fc <HAL_TIM_ConfigClockSource+0x140>
 8026414:	2b10      	cmp	r3, #16
 8026416:	d802      	bhi.n	802641e <HAL_TIM_ConfigClockSource+0x62>
 8026418:	2b00      	cmp	r3, #0
 802641a:	d06f      	beq.n	80264fc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 802641c:	e078      	b.n	8026510 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802641e:	2b20      	cmp	r3, #32
 8026420:	d06c      	beq.n	80264fc <HAL_TIM_ConfigClockSource+0x140>
 8026422:	2b30      	cmp	r3, #48	; 0x30
 8026424:	d06a      	beq.n	80264fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8026426:	e073      	b.n	8026510 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8026428:	2b70      	cmp	r3, #112	; 0x70
 802642a:	d00d      	beq.n	8026448 <HAL_TIM_ConfigClockSource+0x8c>
 802642c:	2b70      	cmp	r3, #112	; 0x70
 802642e:	d804      	bhi.n	802643a <HAL_TIM_ConfigClockSource+0x7e>
 8026430:	2b50      	cmp	r3, #80	; 0x50
 8026432:	d033      	beq.n	802649c <HAL_TIM_ConfigClockSource+0xe0>
 8026434:	2b60      	cmp	r3, #96	; 0x60
 8026436:	d041      	beq.n	80264bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8026438:	e06a      	b.n	8026510 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802643a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802643e:	d066      	beq.n	802650e <HAL_TIM_ConfigClockSource+0x152>
 8026440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8026444:	d017      	beq.n	8026476 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8026446:	e063      	b.n	8026510 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8026448:	687b      	ldr	r3, [r7, #4]
 802644a:	6818      	ldr	r0, [r3, #0]
 802644c:	683b      	ldr	r3, [r7, #0]
 802644e:	6899      	ldr	r1, [r3, #8]
 8026450:	683b      	ldr	r3, [r7, #0]
 8026452:	685a      	ldr	r2, [r3, #4]
 8026454:	683b      	ldr	r3, [r7, #0]
 8026456:	68db      	ldr	r3, [r3, #12]
 8026458:	f000 fb5a 	bl	8026b10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 802645c:	687b      	ldr	r3, [r7, #4]
 802645e:	681b      	ldr	r3, [r3, #0]
 8026460:	689b      	ldr	r3, [r3, #8]
 8026462:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8026464:	68fb      	ldr	r3, [r7, #12]
 8026466:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 802646a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 802646c:	687b      	ldr	r3, [r7, #4]
 802646e:	681b      	ldr	r3, [r3, #0]
 8026470:	68fa      	ldr	r2, [r7, #12]
 8026472:	609a      	str	r2, [r3, #8]
      break;
 8026474:	e04c      	b.n	8026510 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8026476:	687b      	ldr	r3, [r7, #4]
 8026478:	6818      	ldr	r0, [r3, #0]
 802647a:	683b      	ldr	r3, [r7, #0]
 802647c:	6899      	ldr	r1, [r3, #8]
 802647e:	683b      	ldr	r3, [r7, #0]
 8026480:	685a      	ldr	r2, [r3, #4]
 8026482:	683b      	ldr	r3, [r7, #0]
 8026484:	68db      	ldr	r3, [r3, #12]
 8026486:	f000 fb43 	bl	8026b10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802648a:	687b      	ldr	r3, [r7, #4]
 802648c:	681b      	ldr	r3, [r3, #0]
 802648e:	689a      	ldr	r2, [r3, #8]
 8026490:	687b      	ldr	r3, [r7, #4]
 8026492:	681b      	ldr	r3, [r3, #0]
 8026494:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8026498:	609a      	str	r2, [r3, #8]
      break;
 802649a:	e039      	b.n	8026510 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802649c:	687b      	ldr	r3, [r7, #4]
 802649e:	6818      	ldr	r0, [r3, #0]
 80264a0:	683b      	ldr	r3, [r7, #0]
 80264a2:	6859      	ldr	r1, [r3, #4]
 80264a4:	683b      	ldr	r3, [r7, #0]
 80264a6:	68db      	ldr	r3, [r3, #12]
 80264a8:	461a      	mov	r2, r3
 80264aa:	f000 fab7 	bl	8026a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80264ae:	687b      	ldr	r3, [r7, #4]
 80264b0:	681b      	ldr	r3, [r3, #0]
 80264b2:	2150      	movs	r1, #80	; 0x50
 80264b4:	4618      	mov	r0, r3
 80264b6:	f000 fb10 	bl	8026ada <TIM_ITRx_SetConfig>
      break;
 80264ba:	e029      	b.n	8026510 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80264bc:	687b      	ldr	r3, [r7, #4]
 80264be:	6818      	ldr	r0, [r3, #0]
 80264c0:	683b      	ldr	r3, [r7, #0]
 80264c2:	6859      	ldr	r1, [r3, #4]
 80264c4:	683b      	ldr	r3, [r7, #0]
 80264c6:	68db      	ldr	r3, [r3, #12]
 80264c8:	461a      	mov	r2, r3
 80264ca:	f000 fad6 	bl	8026a7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80264ce:	687b      	ldr	r3, [r7, #4]
 80264d0:	681b      	ldr	r3, [r3, #0]
 80264d2:	2160      	movs	r1, #96	; 0x60
 80264d4:	4618      	mov	r0, r3
 80264d6:	f000 fb00 	bl	8026ada <TIM_ITRx_SetConfig>
      break;
 80264da:	e019      	b.n	8026510 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80264dc:	687b      	ldr	r3, [r7, #4]
 80264de:	6818      	ldr	r0, [r3, #0]
 80264e0:	683b      	ldr	r3, [r7, #0]
 80264e2:	6859      	ldr	r1, [r3, #4]
 80264e4:	683b      	ldr	r3, [r7, #0]
 80264e6:	68db      	ldr	r3, [r3, #12]
 80264e8:	461a      	mov	r2, r3
 80264ea:	f000 fa97 	bl	8026a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80264ee:	687b      	ldr	r3, [r7, #4]
 80264f0:	681b      	ldr	r3, [r3, #0]
 80264f2:	2140      	movs	r1, #64	; 0x40
 80264f4:	4618      	mov	r0, r3
 80264f6:	f000 faf0 	bl	8026ada <TIM_ITRx_SetConfig>
      break;
 80264fa:	e009      	b.n	8026510 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80264fc:	687b      	ldr	r3, [r7, #4]
 80264fe:	681a      	ldr	r2, [r3, #0]
 8026500:	683b      	ldr	r3, [r7, #0]
 8026502:	681b      	ldr	r3, [r3, #0]
 8026504:	4619      	mov	r1, r3
 8026506:	4610      	mov	r0, r2
 8026508:	f000 fae7 	bl	8026ada <TIM_ITRx_SetConfig>
      break;
 802650c:	e000      	b.n	8026510 <HAL_TIM_ConfigClockSource+0x154>
      break;
 802650e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8026510:	687b      	ldr	r3, [r7, #4]
 8026512:	2201      	movs	r2, #1
 8026514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8026518:	687b      	ldr	r3, [r7, #4]
 802651a:	2200      	movs	r2, #0
 802651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8026520:	2300      	movs	r3, #0
}
 8026522:	4618      	mov	r0, r3
 8026524:	3710      	adds	r7, #16
 8026526:	46bd      	mov	sp, r7
 8026528:	bd80      	pop	{r7, pc}

0802652a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802652a:	b480      	push	{r7}
 802652c:	b083      	sub	sp, #12
 802652e:	af00      	add	r7, sp, #0
 8026530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8026532:	bf00      	nop
 8026534:	370c      	adds	r7, #12
 8026536:	46bd      	mov	sp, r7
 8026538:	f85d 7b04 	ldr.w	r7, [sp], #4
 802653c:	4770      	bx	lr

0802653e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802653e:	b480      	push	{r7}
 8026540:	b083      	sub	sp, #12
 8026542:	af00      	add	r7, sp, #0
 8026544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8026546:	bf00      	nop
 8026548:	370c      	adds	r7, #12
 802654a:	46bd      	mov	sp, r7
 802654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026550:	4770      	bx	lr

08026552 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8026552:	b480      	push	{r7}
 8026554:	b083      	sub	sp, #12
 8026556:	af00      	add	r7, sp, #0
 8026558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802655a:	bf00      	nop
 802655c:	370c      	adds	r7, #12
 802655e:	46bd      	mov	sp, r7
 8026560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026564:	4770      	bx	lr

08026566 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8026566:	b480      	push	{r7}
 8026568:	b083      	sub	sp, #12
 802656a:	af00      	add	r7, sp, #0
 802656c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802656e:	bf00      	nop
 8026570:	370c      	adds	r7, #12
 8026572:	46bd      	mov	sp, r7
 8026574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026578:	4770      	bx	lr
	...

0802657c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 802657c:	b480      	push	{r7}
 802657e:	b085      	sub	sp, #20
 8026580:	af00      	add	r7, sp, #0
 8026582:	6078      	str	r0, [r7, #4]
 8026584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8026586:	687b      	ldr	r3, [r7, #4]
 8026588:	681b      	ldr	r3, [r3, #0]
 802658a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802658c:	687b      	ldr	r3, [r7, #4]
 802658e:	4a40      	ldr	r2, [pc, #256]	; (8026690 <TIM_Base_SetConfig+0x114>)
 8026590:	4293      	cmp	r3, r2
 8026592:	d013      	beq.n	80265bc <TIM_Base_SetConfig+0x40>
 8026594:	687b      	ldr	r3, [r7, #4]
 8026596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802659a:	d00f      	beq.n	80265bc <TIM_Base_SetConfig+0x40>
 802659c:	687b      	ldr	r3, [r7, #4]
 802659e:	4a3d      	ldr	r2, [pc, #244]	; (8026694 <TIM_Base_SetConfig+0x118>)
 80265a0:	4293      	cmp	r3, r2
 80265a2:	d00b      	beq.n	80265bc <TIM_Base_SetConfig+0x40>
 80265a4:	687b      	ldr	r3, [r7, #4]
 80265a6:	4a3c      	ldr	r2, [pc, #240]	; (8026698 <TIM_Base_SetConfig+0x11c>)
 80265a8:	4293      	cmp	r3, r2
 80265aa:	d007      	beq.n	80265bc <TIM_Base_SetConfig+0x40>
 80265ac:	687b      	ldr	r3, [r7, #4]
 80265ae:	4a3b      	ldr	r2, [pc, #236]	; (802669c <TIM_Base_SetConfig+0x120>)
 80265b0:	4293      	cmp	r3, r2
 80265b2:	d003      	beq.n	80265bc <TIM_Base_SetConfig+0x40>
 80265b4:	687b      	ldr	r3, [r7, #4]
 80265b6:	4a3a      	ldr	r2, [pc, #232]	; (80266a0 <TIM_Base_SetConfig+0x124>)
 80265b8:	4293      	cmp	r3, r2
 80265ba:	d108      	bne.n	80265ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80265bc:	68fb      	ldr	r3, [r7, #12]
 80265be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80265c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80265c4:	683b      	ldr	r3, [r7, #0]
 80265c6:	685b      	ldr	r3, [r3, #4]
 80265c8:	68fa      	ldr	r2, [r7, #12]
 80265ca:	4313      	orrs	r3, r2
 80265cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80265ce:	687b      	ldr	r3, [r7, #4]
 80265d0:	4a2f      	ldr	r2, [pc, #188]	; (8026690 <TIM_Base_SetConfig+0x114>)
 80265d2:	4293      	cmp	r3, r2
 80265d4:	d02b      	beq.n	802662e <TIM_Base_SetConfig+0xb2>
 80265d6:	687b      	ldr	r3, [r7, #4]
 80265d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80265dc:	d027      	beq.n	802662e <TIM_Base_SetConfig+0xb2>
 80265de:	687b      	ldr	r3, [r7, #4]
 80265e0:	4a2c      	ldr	r2, [pc, #176]	; (8026694 <TIM_Base_SetConfig+0x118>)
 80265e2:	4293      	cmp	r3, r2
 80265e4:	d023      	beq.n	802662e <TIM_Base_SetConfig+0xb2>
 80265e6:	687b      	ldr	r3, [r7, #4]
 80265e8:	4a2b      	ldr	r2, [pc, #172]	; (8026698 <TIM_Base_SetConfig+0x11c>)
 80265ea:	4293      	cmp	r3, r2
 80265ec:	d01f      	beq.n	802662e <TIM_Base_SetConfig+0xb2>
 80265ee:	687b      	ldr	r3, [r7, #4]
 80265f0:	4a2a      	ldr	r2, [pc, #168]	; (802669c <TIM_Base_SetConfig+0x120>)
 80265f2:	4293      	cmp	r3, r2
 80265f4:	d01b      	beq.n	802662e <TIM_Base_SetConfig+0xb2>
 80265f6:	687b      	ldr	r3, [r7, #4]
 80265f8:	4a29      	ldr	r2, [pc, #164]	; (80266a0 <TIM_Base_SetConfig+0x124>)
 80265fa:	4293      	cmp	r3, r2
 80265fc:	d017      	beq.n	802662e <TIM_Base_SetConfig+0xb2>
 80265fe:	687b      	ldr	r3, [r7, #4]
 8026600:	4a28      	ldr	r2, [pc, #160]	; (80266a4 <TIM_Base_SetConfig+0x128>)
 8026602:	4293      	cmp	r3, r2
 8026604:	d013      	beq.n	802662e <TIM_Base_SetConfig+0xb2>
 8026606:	687b      	ldr	r3, [r7, #4]
 8026608:	4a27      	ldr	r2, [pc, #156]	; (80266a8 <TIM_Base_SetConfig+0x12c>)
 802660a:	4293      	cmp	r3, r2
 802660c:	d00f      	beq.n	802662e <TIM_Base_SetConfig+0xb2>
 802660e:	687b      	ldr	r3, [r7, #4]
 8026610:	4a26      	ldr	r2, [pc, #152]	; (80266ac <TIM_Base_SetConfig+0x130>)
 8026612:	4293      	cmp	r3, r2
 8026614:	d00b      	beq.n	802662e <TIM_Base_SetConfig+0xb2>
 8026616:	687b      	ldr	r3, [r7, #4]
 8026618:	4a25      	ldr	r2, [pc, #148]	; (80266b0 <TIM_Base_SetConfig+0x134>)
 802661a:	4293      	cmp	r3, r2
 802661c:	d007      	beq.n	802662e <TIM_Base_SetConfig+0xb2>
 802661e:	687b      	ldr	r3, [r7, #4]
 8026620:	4a24      	ldr	r2, [pc, #144]	; (80266b4 <TIM_Base_SetConfig+0x138>)
 8026622:	4293      	cmp	r3, r2
 8026624:	d003      	beq.n	802662e <TIM_Base_SetConfig+0xb2>
 8026626:	687b      	ldr	r3, [r7, #4]
 8026628:	4a23      	ldr	r2, [pc, #140]	; (80266b8 <TIM_Base_SetConfig+0x13c>)
 802662a:	4293      	cmp	r3, r2
 802662c:	d108      	bne.n	8026640 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802662e:	68fb      	ldr	r3, [r7, #12]
 8026630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8026634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8026636:	683b      	ldr	r3, [r7, #0]
 8026638:	68db      	ldr	r3, [r3, #12]
 802663a:	68fa      	ldr	r2, [r7, #12]
 802663c:	4313      	orrs	r3, r2
 802663e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8026640:	68fb      	ldr	r3, [r7, #12]
 8026642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8026646:	683b      	ldr	r3, [r7, #0]
 8026648:	695b      	ldr	r3, [r3, #20]
 802664a:	4313      	orrs	r3, r2
 802664c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802664e:	687b      	ldr	r3, [r7, #4]
 8026650:	68fa      	ldr	r2, [r7, #12]
 8026652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8026654:	683b      	ldr	r3, [r7, #0]
 8026656:	689a      	ldr	r2, [r3, #8]
 8026658:	687b      	ldr	r3, [r7, #4]
 802665a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802665c:	683b      	ldr	r3, [r7, #0]
 802665e:	681a      	ldr	r2, [r3, #0]
 8026660:	687b      	ldr	r3, [r7, #4]
 8026662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8026664:	687b      	ldr	r3, [r7, #4]
 8026666:	4a0a      	ldr	r2, [pc, #40]	; (8026690 <TIM_Base_SetConfig+0x114>)
 8026668:	4293      	cmp	r3, r2
 802666a:	d003      	beq.n	8026674 <TIM_Base_SetConfig+0xf8>
 802666c:	687b      	ldr	r3, [r7, #4]
 802666e:	4a0c      	ldr	r2, [pc, #48]	; (80266a0 <TIM_Base_SetConfig+0x124>)
 8026670:	4293      	cmp	r3, r2
 8026672:	d103      	bne.n	802667c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8026674:	683b      	ldr	r3, [r7, #0]
 8026676:	691a      	ldr	r2, [r3, #16]
 8026678:	687b      	ldr	r3, [r7, #4]
 802667a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802667c:	687b      	ldr	r3, [r7, #4]
 802667e:	2201      	movs	r2, #1
 8026680:	615a      	str	r2, [r3, #20]
}
 8026682:	bf00      	nop
 8026684:	3714      	adds	r7, #20
 8026686:	46bd      	mov	sp, r7
 8026688:	f85d 7b04 	ldr.w	r7, [sp], #4
 802668c:	4770      	bx	lr
 802668e:	bf00      	nop
 8026690:	40010000 	.word	0x40010000
 8026694:	40000400 	.word	0x40000400
 8026698:	40000800 	.word	0x40000800
 802669c:	40000c00 	.word	0x40000c00
 80266a0:	40010400 	.word	0x40010400
 80266a4:	40014000 	.word	0x40014000
 80266a8:	40014400 	.word	0x40014400
 80266ac:	40014800 	.word	0x40014800
 80266b0:	40001800 	.word	0x40001800
 80266b4:	40001c00 	.word	0x40001c00
 80266b8:	40002000 	.word	0x40002000

080266bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80266bc:	b480      	push	{r7}
 80266be:	b087      	sub	sp, #28
 80266c0:	af00      	add	r7, sp, #0
 80266c2:	6078      	str	r0, [r7, #4]
 80266c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80266c6:	687b      	ldr	r3, [r7, #4]
 80266c8:	6a1b      	ldr	r3, [r3, #32]
 80266ca:	f023 0201 	bic.w	r2, r3, #1
 80266ce:	687b      	ldr	r3, [r7, #4]
 80266d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80266d2:	687b      	ldr	r3, [r7, #4]
 80266d4:	6a1b      	ldr	r3, [r3, #32]
 80266d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80266d8:	687b      	ldr	r3, [r7, #4]
 80266da:	685b      	ldr	r3, [r3, #4]
 80266dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80266de:	687b      	ldr	r3, [r7, #4]
 80266e0:	699b      	ldr	r3, [r3, #24]
 80266e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80266e4:	68fb      	ldr	r3, [r7, #12]
 80266e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80266ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80266ec:	68fb      	ldr	r3, [r7, #12]
 80266ee:	f023 0303 	bic.w	r3, r3, #3
 80266f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80266f4:	683b      	ldr	r3, [r7, #0]
 80266f6:	681b      	ldr	r3, [r3, #0]
 80266f8:	68fa      	ldr	r2, [r7, #12]
 80266fa:	4313      	orrs	r3, r2
 80266fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80266fe:	697b      	ldr	r3, [r7, #20]
 8026700:	f023 0302 	bic.w	r3, r3, #2
 8026704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8026706:	683b      	ldr	r3, [r7, #0]
 8026708:	689b      	ldr	r3, [r3, #8]
 802670a:	697a      	ldr	r2, [r7, #20]
 802670c:	4313      	orrs	r3, r2
 802670e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8026710:	687b      	ldr	r3, [r7, #4]
 8026712:	4a20      	ldr	r2, [pc, #128]	; (8026794 <TIM_OC1_SetConfig+0xd8>)
 8026714:	4293      	cmp	r3, r2
 8026716:	d003      	beq.n	8026720 <TIM_OC1_SetConfig+0x64>
 8026718:	687b      	ldr	r3, [r7, #4]
 802671a:	4a1f      	ldr	r2, [pc, #124]	; (8026798 <TIM_OC1_SetConfig+0xdc>)
 802671c:	4293      	cmp	r3, r2
 802671e:	d10c      	bne.n	802673a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8026720:	697b      	ldr	r3, [r7, #20]
 8026722:	f023 0308 	bic.w	r3, r3, #8
 8026726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8026728:	683b      	ldr	r3, [r7, #0]
 802672a:	68db      	ldr	r3, [r3, #12]
 802672c:	697a      	ldr	r2, [r7, #20]
 802672e:	4313      	orrs	r3, r2
 8026730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8026732:	697b      	ldr	r3, [r7, #20]
 8026734:	f023 0304 	bic.w	r3, r3, #4
 8026738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802673a:	687b      	ldr	r3, [r7, #4]
 802673c:	4a15      	ldr	r2, [pc, #84]	; (8026794 <TIM_OC1_SetConfig+0xd8>)
 802673e:	4293      	cmp	r3, r2
 8026740:	d003      	beq.n	802674a <TIM_OC1_SetConfig+0x8e>
 8026742:	687b      	ldr	r3, [r7, #4]
 8026744:	4a14      	ldr	r2, [pc, #80]	; (8026798 <TIM_OC1_SetConfig+0xdc>)
 8026746:	4293      	cmp	r3, r2
 8026748:	d111      	bne.n	802676e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 802674a:	693b      	ldr	r3, [r7, #16]
 802674c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8026750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8026752:	693b      	ldr	r3, [r7, #16]
 8026754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8026758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 802675a:	683b      	ldr	r3, [r7, #0]
 802675c:	695b      	ldr	r3, [r3, #20]
 802675e:	693a      	ldr	r2, [r7, #16]
 8026760:	4313      	orrs	r3, r2
 8026762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8026764:	683b      	ldr	r3, [r7, #0]
 8026766:	699b      	ldr	r3, [r3, #24]
 8026768:	693a      	ldr	r2, [r7, #16]
 802676a:	4313      	orrs	r3, r2
 802676c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802676e:	687b      	ldr	r3, [r7, #4]
 8026770:	693a      	ldr	r2, [r7, #16]
 8026772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8026774:	687b      	ldr	r3, [r7, #4]
 8026776:	68fa      	ldr	r2, [r7, #12]
 8026778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 802677a:	683b      	ldr	r3, [r7, #0]
 802677c:	685a      	ldr	r2, [r3, #4]
 802677e:	687b      	ldr	r3, [r7, #4]
 8026780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8026782:	687b      	ldr	r3, [r7, #4]
 8026784:	697a      	ldr	r2, [r7, #20]
 8026786:	621a      	str	r2, [r3, #32]
}
 8026788:	bf00      	nop
 802678a:	371c      	adds	r7, #28
 802678c:	46bd      	mov	sp, r7
 802678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026792:	4770      	bx	lr
 8026794:	40010000 	.word	0x40010000
 8026798:	40010400 	.word	0x40010400

0802679c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802679c:	b480      	push	{r7}
 802679e:	b087      	sub	sp, #28
 80267a0:	af00      	add	r7, sp, #0
 80267a2:	6078      	str	r0, [r7, #4]
 80267a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80267a6:	687b      	ldr	r3, [r7, #4]
 80267a8:	6a1b      	ldr	r3, [r3, #32]
 80267aa:	f023 0210 	bic.w	r2, r3, #16
 80267ae:	687b      	ldr	r3, [r7, #4]
 80267b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80267b2:	687b      	ldr	r3, [r7, #4]
 80267b4:	6a1b      	ldr	r3, [r3, #32]
 80267b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80267b8:	687b      	ldr	r3, [r7, #4]
 80267ba:	685b      	ldr	r3, [r3, #4]
 80267bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80267be:	687b      	ldr	r3, [r7, #4]
 80267c0:	699b      	ldr	r3, [r3, #24]
 80267c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80267c4:	68fb      	ldr	r3, [r7, #12]
 80267c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80267ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80267cc:	68fb      	ldr	r3, [r7, #12]
 80267ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80267d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80267d4:	683b      	ldr	r3, [r7, #0]
 80267d6:	681b      	ldr	r3, [r3, #0]
 80267d8:	021b      	lsls	r3, r3, #8
 80267da:	68fa      	ldr	r2, [r7, #12]
 80267dc:	4313      	orrs	r3, r2
 80267de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80267e0:	697b      	ldr	r3, [r7, #20]
 80267e2:	f023 0320 	bic.w	r3, r3, #32
 80267e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80267e8:	683b      	ldr	r3, [r7, #0]
 80267ea:	689b      	ldr	r3, [r3, #8]
 80267ec:	011b      	lsls	r3, r3, #4
 80267ee:	697a      	ldr	r2, [r7, #20]
 80267f0:	4313      	orrs	r3, r2
 80267f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80267f4:	687b      	ldr	r3, [r7, #4]
 80267f6:	4a22      	ldr	r2, [pc, #136]	; (8026880 <TIM_OC2_SetConfig+0xe4>)
 80267f8:	4293      	cmp	r3, r2
 80267fa:	d003      	beq.n	8026804 <TIM_OC2_SetConfig+0x68>
 80267fc:	687b      	ldr	r3, [r7, #4]
 80267fe:	4a21      	ldr	r2, [pc, #132]	; (8026884 <TIM_OC2_SetConfig+0xe8>)
 8026800:	4293      	cmp	r3, r2
 8026802:	d10d      	bne.n	8026820 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8026804:	697b      	ldr	r3, [r7, #20]
 8026806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802680a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 802680c:	683b      	ldr	r3, [r7, #0]
 802680e:	68db      	ldr	r3, [r3, #12]
 8026810:	011b      	lsls	r3, r3, #4
 8026812:	697a      	ldr	r2, [r7, #20]
 8026814:	4313      	orrs	r3, r2
 8026816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8026818:	697b      	ldr	r3, [r7, #20]
 802681a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802681e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8026820:	687b      	ldr	r3, [r7, #4]
 8026822:	4a17      	ldr	r2, [pc, #92]	; (8026880 <TIM_OC2_SetConfig+0xe4>)
 8026824:	4293      	cmp	r3, r2
 8026826:	d003      	beq.n	8026830 <TIM_OC2_SetConfig+0x94>
 8026828:	687b      	ldr	r3, [r7, #4]
 802682a:	4a16      	ldr	r2, [pc, #88]	; (8026884 <TIM_OC2_SetConfig+0xe8>)
 802682c:	4293      	cmp	r3, r2
 802682e:	d113      	bne.n	8026858 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8026830:	693b      	ldr	r3, [r7, #16]
 8026832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8026836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8026838:	693b      	ldr	r3, [r7, #16]
 802683a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802683e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8026840:	683b      	ldr	r3, [r7, #0]
 8026842:	695b      	ldr	r3, [r3, #20]
 8026844:	009b      	lsls	r3, r3, #2
 8026846:	693a      	ldr	r2, [r7, #16]
 8026848:	4313      	orrs	r3, r2
 802684a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 802684c:	683b      	ldr	r3, [r7, #0]
 802684e:	699b      	ldr	r3, [r3, #24]
 8026850:	009b      	lsls	r3, r3, #2
 8026852:	693a      	ldr	r2, [r7, #16]
 8026854:	4313      	orrs	r3, r2
 8026856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8026858:	687b      	ldr	r3, [r7, #4]
 802685a:	693a      	ldr	r2, [r7, #16]
 802685c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802685e:	687b      	ldr	r3, [r7, #4]
 8026860:	68fa      	ldr	r2, [r7, #12]
 8026862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8026864:	683b      	ldr	r3, [r7, #0]
 8026866:	685a      	ldr	r2, [r3, #4]
 8026868:	687b      	ldr	r3, [r7, #4]
 802686a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802686c:	687b      	ldr	r3, [r7, #4]
 802686e:	697a      	ldr	r2, [r7, #20]
 8026870:	621a      	str	r2, [r3, #32]
}
 8026872:	bf00      	nop
 8026874:	371c      	adds	r7, #28
 8026876:	46bd      	mov	sp, r7
 8026878:	f85d 7b04 	ldr.w	r7, [sp], #4
 802687c:	4770      	bx	lr
 802687e:	bf00      	nop
 8026880:	40010000 	.word	0x40010000
 8026884:	40010400 	.word	0x40010400

08026888 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8026888:	b480      	push	{r7}
 802688a:	b087      	sub	sp, #28
 802688c:	af00      	add	r7, sp, #0
 802688e:	6078      	str	r0, [r7, #4]
 8026890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8026892:	687b      	ldr	r3, [r7, #4]
 8026894:	6a1b      	ldr	r3, [r3, #32]
 8026896:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802689a:	687b      	ldr	r3, [r7, #4]
 802689c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802689e:	687b      	ldr	r3, [r7, #4]
 80268a0:	6a1b      	ldr	r3, [r3, #32]
 80268a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80268a4:	687b      	ldr	r3, [r7, #4]
 80268a6:	685b      	ldr	r3, [r3, #4]
 80268a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80268aa:	687b      	ldr	r3, [r7, #4]
 80268ac:	69db      	ldr	r3, [r3, #28]
 80268ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80268b0:	68fb      	ldr	r3, [r7, #12]
 80268b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80268b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80268b8:	68fb      	ldr	r3, [r7, #12]
 80268ba:	f023 0303 	bic.w	r3, r3, #3
 80268be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80268c0:	683b      	ldr	r3, [r7, #0]
 80268c2:	681b      	ldr	r3, [r3, #0]
 80268c4:	68fa      	ldr	r2, [r7, #12]
 80268c6:	4313      	orrs	r3, r2
 80268c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80268ca:	697b      	ldr	r3, [r7, #20]
 80268cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80268d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80268d2:	683b      	ldr	r3, [r7, #0]
 80268d4:	689b      	ldr	r3, [r3, #8]
 80268d6:	021b      	lsls	r3, r3, #8
 80268d8:	697a      	ldr	r2, [r7, #20]
 80268da:	4313      	orrs	r3, r2
 80268dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80268de:	687b      	ldr	r3, [r7, #4]
 80268e0:	4a21      	ldr	r2, [pc, #132]	; (8026968 <TIM_OC3_SetConfig+0xe0>)
 80268e2:	4293      	cmp	r3, r2
 80268e4:	d003      	beq.n	80268ee <TIM_OC3_SetConfig+0x66>
 80268e6:	687b      	ldr	r3, [r7, #4]
 80268e8:	4a20      	ldr	r2, [pc, #128]	; (802696c <TIM_OC3_SetConfig+0xe4>)
 80268ea:	4293      	cmp	r3, r2
 80268ec:	d10d      	bne.n	802690a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80268ee:	697b      	ldr	r3, [r7, #20]
 80268f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80268f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80268f6:	683b      	ldr	r3, [r7, #0]
 80268f8:	68db      	ldr	r3, [r3, #12]
 80268fa:	021b      	lsls	r3, r3, #8
 80268fc:	697a      	ldr	r2, [r7, #20]
 80268fe:	4313      	orrs	r3, r2
 8026900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8026902:	697b      	ldr	r3, [r7, #20]
 8026904:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8026908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802690a:	687b      	ldr	r3, [r7, #4]
 802690c:	4a16      	ldr	r2, [pc, #88]	; (8026968 <TIM_OC3_SetConfig+0xe0>)
 802690e:	4293      	cmp	r3, r2
 8026910:	d003      	beq.n	802691a <TIM_OC3_SetConfig+0x92>
 8026912:	687b      	ldr	r3, [r7, #4]
 8026914:	4a15      	ldr	r2, [pc, #84]	; (802696c <TIM_OC3_SetConfig+0xe4>)
 8026916:	4293      	cmp	r3, r2
 8026918:	d113      	bne.n	8026942 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 802691a:	693b      	ldr	r3, [r7, #16]
 802691c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8026922:	693b      	ldr	r3, [r7, #16]
 8026924:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8026928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802692a:	683b      	ldr	r3, [r7, #0]
 802692c:	695b      	ldr	r3, [r3, #20]
 802692e:	011b      	lsls	r3, r3, #4
 8026930:	693a      	ldr	r2, [r7, #16]
 8026932:	4313      	orrs	r3, r2
 8026934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8026936:	683b      	ldr	r3, [r7, #0]
 8026938:	699b      	ldr	r3, [r3, #24]
 802693a:	011b      	lsls	r3, r3, #4
 802693c:	693a      	ldr	r2, [r7, #16]
 802693e:	4313      	orrs	r3, r2
 8026940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8026942:	687b      	ldr	r3, [r7, #4]
 8026944:	693a      	ldr	r2, [r7, #16]
 8026946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8026948:	687b      	ldr	r3, [r7, #4]
 802694a:	68fa      	ldr	r2, [r7, #12]
 802694c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 802694e:	683b      	ldr	r3, [r7, #0]
 8026950:	685a      	ldr	r2, [r3, #4]
 8026952:	687b      	ldr	r3, [r7, #4]
 8026954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8026956:	687b      	ldr	r3, [r7, #4]
 8026958:	697a      	ldr	r2, [r7, #20]
 802695a:	621a      	str	r2, [r3, #32]
}
 802695c:	bf00      	nop
 802695e:	371c      	adds	r7, #28
 8026960:	46bd      	mov	sp, r7
 8026962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026966:	4770      	bx	lr
 8026968:	40010000 	.word	0x40010000
 802696c:	40010400 	.word	0x40010400

08026970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8026970:	b480      	push	{r7}
 8026972:	b087      	sub	sp, #28
 8026974:	af00      	add	r7, sp, #0
 8026976:	6078      	str	r0, [r7, #4]
 8026978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802697a:	687b      	ldr	r3, [r7, #4]
 802697c:	6a1b      	ldr	r3, [r3, #32]
 802697e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8026982:	687b      	ldr	r3, [r7, #4]
 8026984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8026986:	687b      	ldr	r3, [r7, #4]
 8026988:	6a1b      	ldr	r3, [r3, #32]
 802698a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802698c:	687b      	ldr	r3, [r7, #4]
 802698e:	685b      	ldr	r3, [r3, #4]
 8026990:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8026992:	687b      	ldr	r3, [r7, #4]
 8026994:	69db      	ldr	r3, [r3, #28]
 8026996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8026998:	68fb      	ldr	r3, [r7, #12]
 802699a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802699e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80269a0:	68fb      	ldr	r3, [r7, #12]
 80269a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80269a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80269a8:	683b      	ldr	r3, [r7, #0]
 80269aa:	681b      	ldr	r3, [r3, #0]
 80269ac:	021b      	lsls	r3, r3, #8
 80269ae:	68fa      	ldr	r2, [r7, #12]
 80269b0:	4313      	orrs	r3, r2
 80269b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80269b4:	693b      	ldr	r3, [r7, #16]
 80269b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80269ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80269bc:	683b      	ldr	r3, [r7, #0]
 80269be:	689b      	ldr	r3, [r3, #8]
 80269c0:	031b      	lsls	r3, r3, #12
 80269c2:	693a      	ldr	r2, [r7, #16]
 80269c4:	4313      	orrs	r3, r2
 80269c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80269c8:	687b      	ldr	r3, [r7, #4]
 80269ca:	4a12      	ldr	r2, [pc, #72]	; (8026a14 <TIM_OC4_SetConfig+0xa4>)
 80269cc:	4293      	cmp	r3, r2
 80269ce:	d003      	beq.n	80269d8 <TIM_OC4_SetConfig+0x68>
 80269d0:	687b      	ldr	r3, [r7, #4]
 80269d2:	4a11      	ldr	r2, [pc, #68]	; (8026a18 <TIM_OC4_SetConfig+0xa8>)
 80269d4:	4293      	cmp	r3, r2
 80269d6:	d109      	bne.n	80269ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80269d8:	697b      	ldr	r3, [r7, #20]
 80269da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80269de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80269e0:	683b      	ldr	r3, [r7, #0]
 80269e2:	695b      	ldr	r3, [r3, #20]
 80269e4:	019b      	lsls	r3, r3, #6
 80269e6:	697a      	ldr	r2, [r7, #20]
 80269e8:	4313      	orrs	r3, r2
 80269ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80269ec:	687b      	ldr	r3, [r7, #4]
 80269ee:	697a      	ldr	r2, [r7, #20]
 80269f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80269f2:	687b      	ldr	r3, [r7, #4]
 80269f4:	68fa      	ldr	r2, [r7, #12]
 80269f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80269f8:	683b      	ldr	r3, [r7, #0]
 80269fa:	685a      	ldr	r2, [r3, #4]
 80269fc:	687b      	ldr	r3, [r7, #4]
 80269fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8026a00:	687b      	ldr	r3, [r7, #4]
 8026a02:	693a      	ldr	r2, [r7, #16]
 8026a04:	621a      	str	r2, [r3, #32]
}
 8026a06:	bf00      	nop
 8026a08:	371c      	adds	r7, #28
 8026a0a:	46bd      	mov	sp, r7
 8026a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a10:	4770      	bx	lr
 8026a12:	bf00      	nop
 8026a14:	40010000 	.word	0x40010000
 8026a18:	40010400 	.word	0x40010400

08026a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8026a1c:	b480      	push	{r7}
 8026a1e:	b087      	sub	sp, #28
 8026a20:	af00      	add	r7, sp, #0
 8026a22:	60f8      	str	r0, [r7, #12]
 8026a24:	60b9      	str	r1, [r7, #8]
 8026a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8026a28:	68fb      	ldr	r3, [r7, #12]
 8026a2a:	6a1b      	ldr	r3, [r3, #32]
 8026a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8026a2e:	68fb      	ldr	r3, [r7, #12]
 8026a30:	6a1b      	ldr	r3, [r3, #32]
 8026a32:	f023 0201 	bic.w	r2, r3, #1
 8026a36:	68fb      	ldr	r3, [r7, #12]
 8026a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8026a3a:	68fb      	ldr	r3, [r7, #12]
 8026a3c:	699b      	ldr	r3, [r3, #24]
 8026a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8026a40:	693b      	ldr	r3, [r7, #16]
 8026a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8026a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8026a48:	687b      	ldr	r3, [r7, #4]
 8026a4a:	011b      	lsls	r3, r3, #4
 8026a4c:	693a      	ldr	r2, [r7, #16]
 8026a4e:	4313      	orrs	r3, r2
 8026a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8026a52:	697b      	ldr	r3, [r7, #20]
 8026a54:	f023 030a 	bic.w	r3, r3, #10
 8026a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8026a5a:	697a      	ldr	r2, [r7, #20]
 8026a5c:	68bb      	ldr	r3, [r7, #8]
 8026a5e:	4313      	orrs	r3, r2
 8026a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8026a62:	68fb      	ldr	r3, [r7, #12]
 8026a64:	693a      	ldr	r2, [r7, #16]
 8026a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8026a68:	68fb      	ldr	r3, [r7, #12]
 8026a6a:	697a      	ldr	r2, [r7, #20]
 8026a6c:	621a      	str	r2, [r3, #32]
}
 8026a6e:	bf00      	nop
 8026a70:	371c      	adds	r7, #28
 8026a72:	46bd      	mov	sp, r7
 8026a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a78:	4770      	bx	lr

08026a7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8026a7a:	b480      	push	{r7}
 8026a7c:	b087      	sub	sp, #28
 8026a7e:	af00      	add	r7, sp, #0
 8026a80:	60f8      	str	r0, [r7, #12]
 8026a82:	60b9      	str	r1, [r7, #8]
 8026a84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8026a86:	68fb      	ldr	r3, [r7, #12]
 8026a88:	6a1b      	ldr	r3, [r3, #32]
 8026a8a:	f023 0210 	bic.w	r2, r3, #16
 8026a8e:	68fb      	ldr	r3, [r7, #12]
 8026a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8026a92:	68fb      	ldr	r3, [r7, #12]
 8026a94:	699b      	ldr	r3, [r3, #24]
 8026a96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8026a98:	68fb      	ldr	r3, [r7, #12]
 8026a9a:	6a1b      	ldr	r3, [r3, #32]
 8026a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8026a9e:	697b      	ldr	r3, [r7, #20]
 8026aa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8026aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8026aa6:	687b      	ldr	r3, [r7, #4]
 8026aa8:	031b      	lsls	r3, r3, #12
 8026aaa:	697a      	ldr	r2, [r7, #20]
 8026aac:	4313      	orrs	r3, r2
 8026aae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8026ab0:	693b      	ldr	r3, [r7, #16]
 8026ab2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8026ab6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8026ab8:	68bb      	ldr	r3, [r7, #8]
 8026aba:	011b      	lsls	r3, r3, #4
 8026abc:	693a      	ldr	r2, [r7, #16]
 8026abe:	4313      	orrs	r3, r2
 8026ac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8026ac2:	68fb      	ldr	r3, [r7, #12]
 8026ac4:	697a      	ldr	r2, [r7, #20]
 8026ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8026ac8:	68fb      	ldr	r3, [r7, #12]
 8026aca:	693a      	ldr	r2, [r7, #16]
 8026acc:	621a      	str	r2, [r3, #32]
}
 8026ace:	bf00      	nop
 8026ad0:	371c      	adds	r7, #28
 8026ad2:	46bd      	mov	sp, r7
 8026ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ad8:	4770      	bx	lr

08026ada <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8026ada:	b480      	push	{r7}
 8026adc:	b085      	sub	sp, #20
 8026ade:	af00      	add	r7, sp, #0
 8026ae0:	6078      	str	r0, [r7, #4]
 8026ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8026ae4:	687b      	ldr	r3, [r7, #4]
 8026ae6:	689b      	ldr	r3, [r3, #8]
 8026ae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8026aea:	68fb      	ldr	r3, [r7, #12]
 8026aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8026af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8026af2:	683a      	ldr	r2, [r7, #0]
 8026af4:	68fb      	ldr	r3, [r7, #12]
 8026af6:	4313      	orrs	r3, r2
 8026af8:	f043 0307 	orr.w	r3, r3, #7
 8026afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8026afe:	687b      	ldr	r3, [r7, #4]
 8026b00:	68fa      	ldr	r2, [r7, #12]
 8026b02:	609a      	str	r2, [r3, #8]
}
 8026b04:	bf00      	nop
 8026b06:	3714      	adds	r7, #20
 8026b08:	46bd      	mov	sp, r7
 8026b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b0e:	4770      	bx	lr

08026b10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8026b10:	b480      	push	{r7}
 8026b12:	b087      	sub	sp, #28
 8026b14:	af00      	add	r7, sp, #0
 8026b16:	60f8      	str	r0, [r7, #12]
 8026b18:	60b9      	str	r1, [r7, #8]
 8026b1a:	607a      	str	r2, [r7, #4]
 8026b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8026b1e:	68fb      	ldr	r3, [r7, #12]
 8026b20:	689b      	ldr	r3, [r3, #8]
 8026b22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8026b24:	697b      	ldr	r3, [r7, #20]
 8026b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8026b2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8026b2c:	683b      	ldr	r3, [r7, #0]
 8026b2e:	021a      	lsls	r2, r3, #8
 8026b30:	687b      	ldr	r3, [r7, #4]
 8026b32:	431a      	orrs	r2, r3
 8026b34:	68bb      	ldr	r3, [r7, #8]
 8026b36:	4313      	orrs	r3, r2
 8026b38:	697a      	ldr	r2, [r7, #20]
 8026b3a:	4313      	orrs	r3, r2
 8026b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8026b3e:	68fb      	ldr	r3, [r7, #12]
 8026b40:	697a      	ldr	r2, [r7, #20]
 8026b42:	609a      	str	r2, [r3, #8]
}
 8026b44:	bf00      	nop
 8026b46:	371c      	adds	r7, #28
 8026b48:	46bd      	mov	sp, r7
 8026b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b4e:	4770      	bx	lr

08026b50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8026b50:	b480      	push	{r7}
 8026b52:	b087      	sub	sp, #28
 8026b54:	af00      	add	r7, sp, #0
 8026b56:	60f8      	str	r0, [r7, #12]
 8026b58:	60b9      	str	r1, [r7, #8]
 8026b5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8026b5c:	68bb      	ldr	r3, [r7, #8]
 8026b5e:	f003 031f 	and.w	r3, r3, #31
 8026b62:	2201      	movs	r2, #1
 8026b64:	fa02 f303 	lsl.w	r3, r2, r3
 8026b68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8026b6a:	68fb      	ldr	r3, [r7, #12]
 8026b6c:	6a1a      	ldr	r2, [r3, #32]
 8026b6e:	697b      	ldr	r3, [r7, #20]
 8026b70:	43db      	mvns	r3, r3
 8026b72:	401a      	ands	r2, r3
 8026b74:	68fb      	ldr	r3, [r7, #12]
 8026b76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8026b78:	68fb      	ldr	r3, [r7, #12]
 8026b7a:	6a1a      	ldr	r2, [r3, #32]
 8026b7c:	68bb      	ldr	r3, [r7, #8]
 8026b7e:	f003 031f 	and.w	r3, r3, #31
 8026b82:	6879      	ldr	r1, [r7, #4]
 8026b84:	fa01 f303 	lsl.w	r3, r1, r3
 8026b88:	431a      	orrs	r2, r3
 8026b8a:	68fb      	ldr	r3, [r7, #12]
 8026b8c:	621a      	str	r2, [r3, #32]
}
 8026b8e:	bf00      	nop
 8026b90:	371c      	adds	r7, #28
 8026b92:	46bd      	mov	sp, r7
 8026b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b98:	4770      	bx	lr
	...

08026b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8026b9c:	b480      	push	{r7}
 8026b9e:	b085      	sub	sp, #20
 8026ba0:	af00      	add	r7, sp, #0
 8026ba2:	6078      	str	r0, [r7, #4]
 8026ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8026ba6:	687b      	ldr	r3, [r7, #4]
 8026ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026bac:	2b01      	cmp	r3, #1
 8026bae:	d101      	bne.n	8026bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8026bb0:	2302      	movs	r3, #2
 8026bb2:	e05a      	b.n	8026c6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8026bb4:	687b      	ldr	r3, [r7, #4]
 8026bb6:	2201      	movs	r2, #1
 8026bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8026bbc:	687b      	ldr	r3, [r7, #4]
 8026bbe:	2202      	movs	r2, #2
 8026bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8026bc4:	687b      	ldr	r3, [r7, #4]
 8026bc6:	681b      	ldr	r3, [r3, #0]
 8026bc8:	685b      	ldr	r3, [r3, #4]
 8026bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8026bcc:	687b      	ldr	r3, [r7, #4]
 8026bce:	681b      	ldr	r3, [r3, #0]
 8026bd0:	689b      	ldr	r3, [r3, #8]
 8026bd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8026bd4:	68fb      	ldr	r3, [r7, #12]
 8026bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8026bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8026bdc:	683b      	ldr	r3, [r7, #0]
 8026bde:	681b      	ldr	r3, [r3, #0]
 8026be0:	68fa      	ldr	r2, [r7, #12]
 8026be2:	4313      	orrs	r3, r2
 8026be4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8026be6:	687b      	ldr	r3, [r7, #4]
 8026be8:	681b      	ldr	r3, [r3, #0]
 8026bea:	68fa      	ldr	r2, [r7, #12]
 8026bec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8026bee:	687b      	ldr	r3, [r7, #4]
 8026bf0:	681b      	ldr	r3, [r3, #0]
 8026bf2:	4a21      	ldr	r2, [pc, #132]	; (8026c78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8026bf4:	4293      	cmp	r3, r2
 8026bf6:	d022      	beq.n	8026c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8026bf8:	687b      	ldr	r3, [r7, #4]
 8026bfa:	681b      	ldr	r3, [r3, #0]
 8026bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8026c00:	d01d      	beq.n	8026c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8026c02:	687b      	ldr	r3, [r7, #4]
 8026c04:	681b      	ldr	r3, [r3, #0]
 8026c06:	4a1d      	ldr	r2, [pc, #116]	; (8026c7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8026c08:	4293      	cmp	r3, r2
 8026c0a:	d018      	beq.n	8026c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8026c0c:	687b      	ldr	r3, [r7, #4]
 8026c0e:	681b      	ldr	r3, [r3, #0]
 8026c10:	4a1b      	ldr	r2, [pc, #108]	; (8026c80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8026c12:	4293      	cmp	r3, r2
 8026c14:	d013      	beq.n	8026c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8026c16:	687b      	ldr	r3, [r7, #4]
 8026c18:	681b      	ldr	r3, [r3, #0]
 8026c1a:	4a1a      	ldr	r2, [pc, #104]	; (8026c84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8026c1c:	4293      	cmp	r3, r2
 8026c1e:	d00e      	beq.n	8026c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8026c20:	687b      	ldr	r3, [r7, #4]
 8026c22:	681b      	ldr	r3, [r3, #0]
 8026c24:	4a18      	ldr	r2, [pc, #96]	; (8026c88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8026c26:	4293      	cmp	r3, r2
 8026c28:	d009      	beq.n	8026c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8026c2a:	687b      	ldr	r3, [r7, #4]
 8026c2c:	681b      	ldr	r3, [r3, #0]
 8026c2e:	4a17      	ldr	r2, [pc, #92]	; (8026c8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8026c30:	4293      	cmp	r3, r2
 8026c32:	d004      	beq.n	8026c3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8026c34:	687b      	ldr	r3, [r7, #4]
 8026c36:	681b      	ldr	r3, [r3, #0]
 8026c38:	4a15      	ldr	r2, [pc, #84]	; (8026c90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8026c3a:	4293      	cmp	r3, r2
 8026c3c:	d10c      	bne.n	8026c58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8026c3e:	68bb      	ldr	r3, [r7, #8]
 8026c40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8026c44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8026c46:	683b      	ldr	r3, [r7, #0]
 8026c48:	685b      	ldr	r3, [r3, #4]
 8026c4a:	68ba      	ldr	r2, [r7, #8]
 8026c4c:	4313      	orrs	r3, r2
 8026c4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8026c50:	687b      	ldr	r3, [r7, #4]
 8026c52:	681b      	ldr	r3, [r3, #0]
 8026c54:	68ba      	ldr	r2, [r7, #8]
 8026c56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8026c58:	687b      	ldr	r3, [r7, #4]
 8026c5a:	2201      	movs	r2, #1
 8026c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8026c60:	687b      	ldr	r3, [r7, #4]
 8026c62:	2200      	movs	r2, #0
 8026c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8026c68:	2300      	movs	r3, #0
}
 8026c6a:	4618      	mov	r0, r3
 8026c6c:	3714      	adds	r7, #20
 8026c6e:	46bd      	mov	sp, r7
 8026c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c74:	4770      	bx	lr
 8026c76:	bf00      	nop
 8026c78:	40010000 	.word	0x40010000
 8026c7c:	40000400 	.word	0x40000400
 8026c80:	40000800 	.word	0x40000800
 8026c84:	40000c00 	.word	0x40000c00
 8026c88:	40010400 	.word	0x40010400
 8026c8c:	40014000 	.word	0x40014000
 8026c90:	40001800 	.word	0x40001800

08026c94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8026c94:	b480      	push	{r7}
 8026c96:	b085      	sub	sp, #20
 8026c98:	af00      	add	r7, sp, #0
 8026c9a:	6078      	str	r0, [r7, #4]
 8026c9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8026c9e:	2300      	movs	r3, #0
 8026ca0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8026ca2:	687b      	ldr	r3, [r7, #4]
 8026ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026ca8:	2b01      	cmp	r3, #1
 8026caa:	d101      	bne.n	8026cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8026cac:	2302      	movs	r3, #2
 8026cae:	e03d      	b.n	8026d2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8026cb0:	687b      	ldr	r3, [r7, #4]
 8026cb2:	2201      	movs	r2, #1
 8026cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8026cb8:	68fb      	ldr	r3, [r7, #12]
 8026cba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8026cbe:	683b      	ldr	r3, [r7, #0]
 8026cc0:	68db      	ldr	r3, [r3, #12]
 8026cc2:	4313      	orrs	r3, r2
 8026cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8026cc6:	68fb      	ldr	r3, [r7, #12]
 8026cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8026ccc:	683b      	ldr	r3, [r7, #0]
 8026cce:	689b      	ldr	r3, [r3, #8]
 8026cd0:	4313      	orrs	r3, r2
 8026cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8026cd4:	68fb      	ldr	r3, [r7, #12]
 8026cd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8026cda:	683b      	ldr	r3, [r7, #0]
 8026cdc:	685b      	ldr	r3, [r3, #4]
 8026cde:	4313      	orrs	r3, r2
 8026ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8026ce2:	68fb      	ldr	r3, [r7, #12]
 8026ce4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8026ce8:	683b      	ldr	r3, [r7, #0]
 8026cea:	681b      	ldr	r3, [r3, #0]
 8026cec:	4313      	orrs	r3, r2
 8026cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8026cf0:	68fb      	ldr	r3, [r7, #12]
 8026cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8026cf6:	683b      	ldr	r3, [r7, #0]
 8026cf8:	691b      	ldr	r3, [r3, #16]
 8026cfa:	4313      	orrs	r3, r2
 8026cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8026cfe:	68fb      	ldr	r3, [r7, #12]
 8026d00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8026d04:	683b      	ldr	r3, [r7, #0]
 8026d06:	695b      	ldr	r3, [r3, #20]
 8026d08:	4313      	orrs	r3, r2
 8026d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8026d0c:	68fb      	ldr	r3, [r7, #12]
 8026d0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8026d12:	683b      	ldr	r3, [r7, #0]
 8026d14:	69db      	ldr	r3, [r3, #28]
 8026d16:	4313      	orrs	r3, r2
 8026d18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8026d1a:	687b      	ldr	r3, [r7, #4]
 8026d1c:	681b      	ldr	r3, [r3, #0]
 8026d1e:	68fa      	ldr	r2, [r7, #12]
 8026d20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8026d22:	687b      	ldr	r3, [r7, #4]
 8026d24:	2200      	movs	r2, #0
 8026d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8026d2a:	2300      	movs	r3, #0
}
 8026d2c:	4618      	mov	r0, r3
 8026d2e:	3714      	adds	r7, #20
 8026d30:	46bd      	mov	sp, r7
 8026d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d36:	4770      	bx	lr

08026d38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8026d38:	b480      	push	{r7}
 8026d3a:	b083      	sub	sp, #12
 8026d3c:	af00      	add	r7, sp, #0
 8026d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8026d40:	bf00      	nop
 8026d42:	370c      	adds	r7, #12
 8026d44:	46bd      	mov	sp, r7
 8026d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d4a:	4770      	bx	lr

08026d4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8026d4c:	b480      	push	{r7}
 8026d4e:	b083      	sub	sp, #12
 8026d50:	af00      	add	r7, sp, #0
 8026d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8026d54:	bf00      	nop
 8026d56:	370c      	adds	r7, #12
 8026d58:	46bd      	mov	sp, r7
 8026d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d5e:	4770      	bx	lr

08026d60 <__cxa_guard_acquire>:
 8026d60:	6803      	ldr	r3, [r0, #0]
 8026d62:	07db      	lsls	r3, r3, #31
 8026d64:	d406      	bmi.n	8026d74 <__cxa_guard_acquire+0x14>
 8026d66:	7843      	ldrb	r3, [r0, #1]
 8026d68:	b103      	cbz	r3, 8026d6c <__cxa_guard_acquire+0xc>
 8026d6a:	deff      	udf	#255	; 0xff
 8026d6c:	2301      	movs	r3, #1
 8026d6e:	7043      	strb	r3, [r0, #1]
 8026d70:	4618      	mov	r0, r3
 8026d72:	4770      	bx	lr
 8026d74:	2000      	movs	r0, #0
 8026d76:	4770      	bx	lr

08026d78 <__cxa_guard_release>:
 8026d78:	2301      	movs	r3, #1
 8026d7a:	6003      	str	r3, [r0, #0]
 8026d7c:	4770      	bx	lr
	...

08026d80 <__libc_init_array>:
 8026d80:	b570      	push	{r4, r5, r6, lr}
 8026d82:	4e0d      	ldr	r6, [pc, #52]	; (8026db8 <__libc_init_array+0x38>)
 8026d84:	4c0d      	ldr	r4, [pc, #52]	; (8026dbc <__libc_init_array+0x3c>)
 8026d86:	1ba4      	subs	r4, r4, r6
 8026d88:	10a4      	asrs	r4, r4, #2
 8026d8a:	2500      	movs	r5, #0
 8026d8c:	42a5      	cmp	r5, r4
 8026d8e:	d109      	bne.n	8026da4 <__libc_init_array+0x24>
 8026d90:	4e0b      	ldr	r6, [pc, #44]	; (8026dc0 <__libc_init_array+0x40>)
 8026d92:	4c0c      	ldr	r4, [pc, #48]	; (8026dc4 <__libc_init_array+0x44>)
 8026d94:	f000 f820 	bl	8026dd8 <_init>
 8026d98:	1ba4      	subs	r4, r4, r6
 8026d9a:	10a4      	asrs	r4, r4, #2
 8026d9c:	2500      	movs	r5, #0
 8026d9e:	42a5      	cmp	r5, r4
 8026da0:	d105      	bne.n	8026dae <__libc_init_array+0x2e>
 8026da2:	bd70      	pop	{r4, r5, r6, pc}
 8026da4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026da8:	4798      	blx	r3
 8026daa:	3501      	adds	r5, #1
 8026dac:	e7ee      	b.n	8026d8c <__libc_init_array+0xc>
 8026dae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026db2:	4798      	blx	r3
 8026db4:	3501      	adds	r5, #1
 8026db6:	e7f2      	b.n	8026d9e <__libc_init_array+0x1e>
 8026db8:	08026e18 	.word	0x08026e18
 8026dbc:	08026e18 	.word	0x08026e18
 8026dc0:	08026e18 	.word	0x08026e18
 8026dc4:	08026e20 	.word	0x08026e20

08026dc8 <memset>:
 8026dc8:	4402      	add	r2, r0
 8026dca:	4603      	mov	r3, r0
 8026dcc:	4293      	cmp	r3, r2
 8026dce:	d100      	bne.n	8026dd2 <memset+0xa>
 8026dd0:	4770      	bx	lr
 8026dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8026dd6:	e7f9      	b.n	8026dcc <memset+0x4>

08026dd8 <_init>:
 8026dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026dda:	bf00      	nop
 8026ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026dde:	bc08      	pop	{r3}
 8026de0:	469e      	mov	lr, r3
 8026de2:	4770      	bx	lr

08026de4 <_fini>:
 8026de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026de6:	bf00      	nop
 8026de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026dea:	bc08      	pop	{r3}
 8026dec:	469e      	mov	lr, r3
 8026dee:	4770      	bx	lr
