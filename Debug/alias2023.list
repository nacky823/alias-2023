
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be14  08020000  08020000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0802be14  0802be14  0002be14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802bf44  0802bf44  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0802bf44  0802bf44  0002bf44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802bf4c  0802bf4c  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802bf4c  0802bf4c  0002bf4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802bf54  0802bf54  0002bf54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0802bf58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011494  20000088  0802bfdc  00030088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001151c  0802bfdc  0003151c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dc1d  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ef4  00000000  00000000  0005dcd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001848  00000000  00000000  00062bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001648  00000000  00000000  00064410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000270e3  00000000  00000000  00065a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016ffd  00000000  00000000  0008cb3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce172  00000000  00000000  000a3b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00171caa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006da8  00000000  00000000  00171d28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	20000088 	.word	0x20000088
 802001c:	00000000 	.word	0x00000000
 8020020:	0802bdfc 	.word	0x0802bdfc

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	2000008c 	.word	0x2000008c
 802003c:	0802bdfc 	.word	0x0802bdfc

08020040 <memchr>:
 8020040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020044:	2a10      	cmp	r2, #16
 8020046:	db2b      	blt.n	80200a0 <memchr+0x60>
 8020048:	f010 0f07 	tst.w	r0, #7
 802004c:	d008      	beq.n	8020060 <memchr+0x20>
 802004e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020052:	3a01      	subs	r2, #1
 8020054:	428b      	cmp	r3, r1
 8020056:	d02d      	beq.n	80200b4 <memchr+0x74>
 8020058:	f010 0f07 	tst.w	r0, #7
 802005c:	b342      	cbz	r2, 80200b0 <memchr+0x70>
 802005e:	d1f6      	bne.n	802004e <memchr+0xe>
 8020060:	b4f0      	push	{r4, r5, r6, r7}
 8020062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802006a:	f022 0407 	bic.w	r4, r2, #7
 802006e:	f07f 0700 	mvns.w	r7, #0
 8020072:	2300      	movs	r3, #0
 8020074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020078:	3c08      	subs	r4, #8
 802007a:	ea85 0501 	eor.w	r5, r5, r1
 802007e:	ea86 0601 	eor.w	r6, r6, r1
 8020082:	fa85 f547 	uadd8	r5, r5, r7
 8020086:	faa3 f587 	sel	r5, r3, r7
 802008a:	fa86 f647 	uadd8	r6, r6, r7
 802008e:	faa5 f687 	sel	r6, r5, r7
 8020092:	b98e      	cbnz	r6, 80200b8 <memchr+0x78>
 8020094:	d1ee      	bne.n	8020074 <memchr+0x34>
 8020096:	bcf0      	pop	{r4, r5, r6, r7}
 8020098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802009c:	f002 0207 	and.w	r2, r2, #7
 80200a0:	b132      	cbz	r2, 80200b0 <memchr+0x70>
 80200a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80200a6:	3a01      	subs	r2, #1
 80200a8:	ea83 0301 	eor.w	r3, r3, r1
 80200ac:	b113      	cbz	r3, 80200b4 <memchr+0x74>
 80200ae:	d1f8      	bne.n	80200a2 <memchr+0x62>
 80200b0:	2000      	movs	r0, #0
 80200b2:	4770      	bx	lr
 80200b4:	3801      	subs	r0, #1
 80200b6:	4770      	bx	lr
 80200b8:	2d00      	cmp	r5, #0
 80200ba:	bf06      	itte	eq
 80200bc:	4635      	moveq	r5, r6
 80200be:	3803      	subeq	r0, #3
 80200c0:	3807      	subne	r0, #7
 80200c2:	f015 0f01 	tst.w	r5, #1
 80200c6:	d107      	bne.n	80200d8 <memchr+0x98>
 80200c8:	3001      	adds	r0, #1
 80200ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80200ce:	bf02      	ittt	eq
 80200d0:	3001      	addeq	r0, #1
 80200d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80200d6:	3001      	addeq	r0, #1
 80200d8:	bcf0      	pop	{r4, r5, r6, r7}
 80200da:	3801      	subs	r0, #1
 80200dc:	4770      	bx	lr
 80200de:	bf00      	nop

080200e0 <__aeabi_drsub>:
 80200e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80200e4:	e002      	b.n	80200ec <__adddf3>
 80200e6:	bf00      	nop

080200e8 <__aeabi_dsub>:
 80200e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080200ec <__adddf3>:
 80200ec:	b530      	push	{r4, r5, lr}
 80200ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80200f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80200f6:	ea94 0f05 	teq	r4, r5
 80200fa:	bf08      	it	eq
 80200fc:	ea90 0f02 	teqeq	r0, r2
 8020100:	bf1f      	itttt	ne
 8020102:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020106:	ea55 0c02 	orrsne.w	ip, r5, r2
 802010a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802010e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020112:	f000 80e2 	beq.w	80202da <__adddf3+0x1ee>
 8020116:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802011a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802011e:	bfb8      	it	lt
 8020120:	426d      	neglt	r5, r5
 8020122:	dd0c      	ble.n	802013e <__adddf3+0x52>
 8020124:	442c      	add	r4, r5
 8020126:	ea80 0202 	eor.w	r2, r0, r2
 802012a:	ea81 0303 	eor.w	r3, r1, r3
 802012e:	ea82 0000 	eor.w	r0, r2, r0
 8020132:	ea83 0101 	eor.w	r1, r3, r1
 8020136:	ea80 0202 	eor.w	r2, r0, r2
 802013a:	ea81 0303 	eor.w	r3, r1, r3
 802013e:	2d36      	cmp	r5, #54	; 0x36
 8020140:	bf88      	it	hi
 8020142:	bd30      	pophi	{r4, r5, pc}
 8020144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020148:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802014c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8020150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020154:	d002      	beq.n	802015c <__adddf3+0x70>
 8020156:	4240      	negs	r0, r0
 8020158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802015c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020160:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020168:	d002      	beq.n	8020170 <__adddf3+0x84>
 802016a:	4252      	negs	r2, r2
 802016c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020170:	ea94 0f05 	teq	r4, r5
 8020174:	f000 80a7 	beq.w	80202c6 <__adddf3+0x1da>
 8020178:	f1a4 0401 	sub.w	r4, r4, #1
 802017c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020180:	db0d      	blt.n	802019e <__adddf3+0xb2>
 8020182:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020186:	fa22 f205 	lsr.w	r2, r2, r5
 802018a:	1880      	adds	r0, r0, r2
 802018c:	f141 0100 	adc.w	r1, r1, #0
 8020190:	fa03 f20e 	lsl.w	r2, r3, lr
 8020194:	1880      	adds	r0, r0, r2
 8020196:	fa43 f305 	asr.w	r3, r3, r5
 802019a:	4159      	adcs	r1, r3
 802019c:	e00e      	b.n	80201bc <__adddf3+0xd0>
 802019e:	f1a5 0520 	sub.w	r5, r5, #32
 80201a2:	f10e 0e20 	add.w	lr, lr, #32
 80201a6:	2a01      	cmp	r2, #1
 80201a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80201ac:	bf28      	it	cs
 80201ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80201b2:	fa43 f305 	asr.w	r3, r3, r5
 80201b6:	18c0      	adds	r0, r0, r3
 80201b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80201bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80201c0:	d507      	bpl.n	80201d2 <__adddf3+0xe6>
 80201c2:	f04f 0e00 	mov.w	lr, #0
 80201c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80201ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80201ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80201d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80201d6:	d31b      	bcc.n	8020210 <__adddf3+0x124>
 80201d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80201dc:	d30c      	bcc.n	80201f8 <__adddf3+0x10c>
 80201de:	0849      	lsrs	r1, r1, #1
 80201e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80201e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80201e8:	f104 0401 	add.w	r4, r4, #1
 80201ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80201f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80201f4:	f080 809a 	bcs.w	802032c <__adddf3+0x240>
 80201f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80201fc:	bf08      	it	eq
 80201fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020202:	f150 0000 	adcs.w	r0, r0, #0
 8020206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802020a:	ea41 0105 	orr.w	r1, r1, r5
 802020e:	bd30      	pop	{r4, r5, pc}
 8020210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020214:	4140      	adcs	r0, r0
 8020216:	eb41 0101 	adc.w	r1, r1, r1
 802021a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802021e:	f1a4 0401 	sub.w	r4, r4, #1
 8020222:	d1e9      	bne.n	80201f8 <__adddf3+0x10c>
 8020224:	f091 0f00 	teq	r1, #0
 8020228:	bf04      	itt	eq
 802022a:	4601      	moveq	r1, r0
 802022c:	2000      	moveq	r0, #0
 802022e:	fab1 f381 	clz	r3, r1
 8020232:	bf08      	it	eq
 8020234:	3320      	addeq	r3, #32
 8020236:	f1a3 030b 	sub.w	r3, r3, #11
 802023a:	f1b3 0220 	subs.w	r2, r3, #32
 802023e:	da0c      	bge.n	802025a <__adddf3+0x16e>
 8020240:	320c      	adds	r2, #12
 8020242:	dd08      	ble.n	8020256 <__adddf3+0x16a>
 8020244:	f102 0c14 	add.w	ip, r2, #20
 8020248:	f1c2 020c 	rsb	r2, r2, #12
 802024c:	fa01 f00c 	lsl.w	r0, r1, ip
 8020250:	fa21 f102 	lsr.w	r1, r1, r2
 8020254:	e00c      	b.n	8020270 <__adddf3+0x184>
 8020256:	f102 0214 	add.w	r2, r2, #20
 802025a:	bfd8      	it	le
 802025c:	f1c2 0c20 	rsble	ip, r2, #32
 8020260:	fa01 f102 	lsl.w	r1, r1, r2
 8020264:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020268:	bfdc      	itt	le
 802026a:	ea41 010c 	orrle.w	r1, r1, ip
 802026e:	4090      	lslle	r0, r2
 8020270:	1ae4      	subs	r4, r4, r3
 8020272:	bfa2      	ittt	ge
 8020274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020278:	4329      	orrge	r1, r5
 802027a:	bd30      	popge	{r4, r5, pc}
 802027c:	ea6f 0404 	mvn.w	r4, r4
 8020280:	3c1f      	subs	r4, #31
 8020282:	da1c      	bge.n	80202be <__adddf3+0x1d2>
 8020284:	340c      	adds	r4, #12
 8020286:	dc0e      	bgt.n	80202a6 <__adddf3+0x1ba>
 8020288:	f104 0414 	add.w	r4, r4, #20
 802028c:	f1c4 0220 	rsb	r2, r4, #32
 8020290:	fa20 f004 	lsr.w	r0, r0, r4
 8020294:	fa01 f302 	lsl.w	r3, r1, r2
 8020298:	ea40 0003 	orr.w	r0, r0, r3
 802029c:	fa21 f304 	lsr.w	r3, r1, r4
 80202a0:	ea45 0103 	orr.w	r1, r5, r3
 80202a4:	bd30      	pop	{r4, r5, pc}
 80202a6:	f1c4 040c 	rsb	r4, r4, #12
 80202aa:	f1c4 0220 	rsb	r2, r4, #32
 80202ae:	fa20 f002 	lsr.w	r0, r0, r2
 80202b2:	fa01 f304 	lsl.w	r3, r1, r4
 80202b6:	ea40 0003 	orr.w	r0, r0, r3
 80202ba:	4629      	mov	r1, r5
 80202bc:	bd30      	pop	{r4, r5, pc}
 80202be:	fa21 f004 	lsr.w	r0, r1, r4
 80202c2:	4629      	mov	r1, r5
 80202c4:	bd30      	pop	{r4, r5, pc}
 80202c6:	f094 0f00 	teq	r4, #0
 80202ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80202ce:	bf06      	itte	eq
 80202d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80202d4:	3401      	addeq	r4, #1
 80202d6:	3d01      	subne	r5, #1
 80202d8:	e74e      	b.n	8020178 <__adddf3+0x8c>
 80202da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80202de:	bf18      	it	ne
 80202e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80202e4:	d029      	beq.n	802033a <__adddf3+0x24e>
 80202e6:	ea94 0f05 	teq	r4, r5
 80202ea:	bf08      	it	eq
 80202ec:	ea90 0f02 	teqeq	r0, r2
 80202f0:	d005      	beq.n	80202fe <__adddf3+0x212>
 80202f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80202f6:	bf04      	itt	eq
 80202f8:	4619      	moveq	r1, r3
 80202fa:	4610      	moveq	r0, r2
 80202fc:	bd30      	pop	{r4, r5, pc}
 80202fe:	ea91 0f03 	teq	r1, r3
 8020302:	bf1e      	ittt	ne
 8020304:	2100      	movne	r1, #0
 8020306:	2000      	movne	r0, #0
 8020308:	bd30      	popne	{r4, r5, pc}
 802030a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802030e:	d105      	bne.n	802031c <__adddf3+0x230>
 8020310:	0040      	lsls	r0, r0, #1
 8020312:	4149      	adcs	r1, r1
 8020314:	bf28      	it	cs
 8020316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802031a:	bd30      	pop	{r4, r5, pc}
 802031c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020320:	bf3c      	itt	cc
 8020322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020326:	bd30      	popcc	{r4, r5, pc}
 8020328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802032c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020334:	f04f 0000 	mov.w	r0, #0
 8020338:	bd30      	pop	{r4, r5, pc}
 802033a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802033e:	bf1a      	itte	ne
 8020340:	4619      	movne	r1, r3
 8020342:	4610      	movne	r0, r2
 8020344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8020348:	bf1c      	itt	ne
 802034a:	460b      	movne	r3, r1
 802034c:	4602      	movne	r2, r0
 802034e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020352:	bf06      	itte	eq
 8020354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8020358:	ea91 0f03 	teqeq	r1, r3
 802035c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020360:	bd30      	pop	{r4, r5, pc}
 8020362:	bf00      	nop

08020364 <__aeabi_ui2d>:
 8020364:	f090 0f00 	teq	r0, #0
 8020368:	bf04      	itt	eq
 802036a:	2100      	moveq	r1, #0
 802036c:	4770      	bxeq	lr
 802036e:	b530      	push	{r4, r5, lr}
 8020370:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020374:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020378:	f04f 0500 	mov.w	r5, #0
 802037c:	f04f 0100 	mov.w	r1, #0
 8020380:	e750      	b.n	8020224 <__adddf3+0x138>
 8020382:	bf00      	nop

08020384 <__aeabi_i2d>:
 8020384:	f090 0f00 	teq	r0, #0
 8020388:	bf04      	itt	eq
 802038a:	2100      	moveq	r1, #0
 802038c:	4770      	bxeq	lr
 802038e:	b530      	push	{r4, r5, lr}
 8020390:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020394:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802039c:	bf48      	it	mi
 802039e:	4240      	negmi	r0, r0
 80203a0:	f04f 0100 	mov.w	r1, #0
 80203a4:	e73e      	b.n	8020224 <__adddf3+0x138>
 80203a6:	bf00      	nop

080203a8 <__aeabi_f2d>:
 80203a8:	0042      	lsls	r2, r0, #1
 80203aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80203ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80203b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80203b6:	bf1f      	itttt	ne
 80203b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80203bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80203c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80203c4:	4770      	bxne	lr
 80203c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80203ca:	bf08      	it	eq
 80203cc:	4770      	bxeq	lr
 80203ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80203d2:	bf04      	itt	eq
 80203d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80203d8:	4770      	bxeq	lr
 80203da:	b530      	push	{r4, r5, lr}
 80203dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80203e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80203e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80203e8:	e71c      	b.n	8020224 <__adddf3+0x138>
 80203ea:	bf00      	nop

080203ec <__aeabi_ul2d>:
 80203ec:	ea50 0201 	orrs.w	r2, r0, r1
 80203f0:	bf08      	it	eq
 80203f2:	4770      	bxeq	lr
 80203f4:	b530      	push	{r4, r5, lr}
 80203f6:	f04f 0500 	mov.w	r5, #0
 80203fa:	e00a      	b.n	8020412 <__aeabi_l2d+0x16>

080203fc <__aeabi_l2d>:
 80203fc:	ea50 0201 	orrs.w	r2, r0, r1
 8020400:	bf08      	it	eq
 8020402:	4770      	bxeq	lr
 8020404:	b530      	push	{r4, r5, lr}
 8020406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802040a:	d502      	bpl.n	8020412 <__aeabi_l2d+0x16>
 802040c:	4240      	negs	r0, r0
 802040e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020412:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020416:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802041a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802041e:	f43f aed8 	beq.w	80201d2 <__adddf3+0xe6>
 8020422:	f04f 0203 	mov.w	r2, #3
 8020426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802042a:	bf18      	it	ne
 802042c:	3203      	addne	r2, #3
 802042e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020432:	bf18      	it	ne
 8020434:	3203      	addne	r2, #3
 8020436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802043a:	f1c2 0320 	rsb	r3, r2, #32
 802043e:	fa00 fc03 	lsl.w	ip, r0, r3
 8020442:	fa20 f002 	lsr.w	r0, r0, r2
 8020446:	fa01 fe03 	lsl.w	lr, r1, r3
 802044a:	ea40 000e 	orr.w	r0, r0, lr
 802044e:	fa21 f102 	lsr.w	r1, r1, r2
 8020452:	4414      	add	r4, r2
 8020454:	e6bd      	b.n	80201d2 <__adddf3+0xe6>
 8020456:	bf00      	nop

08020458 <__aeabi_dmul>:
 8020458:	b570      	push	{r4, r5, r6, lr}
 802045a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 802045e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020466:	bf1d      	ittte	ne
 8020468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802046c:	ea94 0f0c 	teqne	r4, ip
 8020470:	ea95 0f0c 	teqne	r5, ip
 8020474:	f000 f8de 	bleq	8020634 <__aeabi_dmul+0x1dc>
 8020478:	442c      	add	r4, r5
 802047a:	ea81 0603 	eor.w	r6, r1, r3
 802047e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802048a:	bf18      	it	ne
 802048c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020498:	d038      	beq.n	802050c <__aeabi_dmul+0xb4>
 802049a:	fba0 ce02 	umull	ip, lr, r0, r2
 802049e:	f04f 0500 	mov.w	r5, #0
 80204a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80204a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80204aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80204ae:	f04f 0600 	mov.w	r6, #0
 80204b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80204b6:	f09c 0f00 	teq	ip, #0
 80204ba:	bf18      	it	ne
 80204bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80204c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80204c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80204c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80204cc:	d204      	bcs.n	80204d8 <__aeabi_dmul+0x80>
 80204ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80204d2:	416d      	adcs	r5, r5
 80204d4:	eb46 0606 	adc.w	r6, r6, r6
 80204d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80204dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80204e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80204e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80204e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80204ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80204f0:	bf88      	it	hi
 80204f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80204f6:	d81e      	bhi.n	8020536 <__aeabi_dmul+0xde>
 80204f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80204fc:	bf08      	it	eq
 80204fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020502:	f150 0000 	adcs.w	r0, r0, #0
 8020506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802050a:	bd70      	pop	{r4, r5, r6, pc}
 802050c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020510:	ea46 0101 	orr.w	r1, r6, r1
 8020514:	ea40 0002 	orr.w	r0, r0, r2
 8020518:	ea81 0103 	eor.w	r1, r1, r3
 802051c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020520:	bfc2      	ittt	gt
 8020522:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802052a:	bd70      	popgt	{r4, r5, r6, pc}
 802052c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020530:	f04f 0e00 	mov.w	lr, #0
 8020534:	3c01      	subs	r4, #1
 8020536:	f300 80ab 	bgt.w	8020690 <__aeabi_dmul+0x238>
 802053a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802053e:	bfde      	ittt	le
 8020540:	2000      	movle	r0, #0
 8020542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8020546:	bd70      	pople	{r4, r5, r6, pc}
 8020548:	f1c4 0400 	rsb	r4, r4, #0
 802054c:	3c20      	subs	r4, #32
 802054e:	da35      	bge.n	80205bc <__aeabi_dmul+0x164>
 8020550:	340c      	adds	r4, #12
 8020552:	dc1b      	bgt.n	802058c <__aeabi_dmul+0x134>
 8020554:	f104 0414 	add.w	r4, r4, #20
 8020558:	f1c4 0520 	rsb	r5, r4, #32
 802055c:	fa00 f305 	lsl.w	r3, r0, r5
 8020560:	fa20 f004 	lsr.w	r0, r0, r4
 8020564:	fa01 f205 	lsl.w	r2, r1, r5
 8020568:	ea40 0002 	orr.w	r0, r0, r2
 802056c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020578:	fa21 f604 	lsr.w	r6, r1, r4
 802057c:	eb42 0106 	adc.w	r1, r2, r6
 8020580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020584:	bf08      	it	eq
 8020586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802058a:	bd70      	pop	{r4, r5, r6, pc}
 802058c:	f1c4 040c 	rsb	r4, r4, #12
 8020590:	f1c4 0520 	rsb	r5, r4, #32
 8020594:	fa00 f304 	lsl.w	r3, r0, r4
 8020598:	fa20 f005 	lsr.w	r0, r0, r5
 802059c:	fa01 f204 	lsl.w	r2, r1, r4
 80205a0:	ea40 0002 	orr.w	r0, r0, r2
 80205a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80205ac:	f141 0100 	adc.w	r1, r1, #0
 80205b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80205b4:	bf08      	it	eq
 80205b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80205ba:	bd70      	pop	{r4, r5, r6, pc}
 80205bc:	f1c4 0520 	rsb	r5, r4, #32
 80205c0:	fa00 f205 	lsl.w	r2, r0, r5
 80205c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80205c8:	fa20 f304 	lsr.w	r3, r0, r4
 80205cc:	fa01 f205 	lsl.w	r2, r1, r5
 80205d0:	ea43 0302 	orr.w	r3, r3, r2
 80205d4:	fa21 f004 	lsr.w	r0, r1, r4
 80205d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205dc:	fa21 f204 	lsr.w	r2, r1, r4
 80205e0:	ea20 0002 	bic.w	r0, r0, r2
 80205e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80205e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80205ec:	bf08      	it	eq
 80205ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80205f2:	bd70      	pop	{r4, r5, r6, pc}
 80205f4:	f094 0f00 	teq	r4, #0
 80205f8:	d10f      	bne.n	802061a <__aeabi_dmul+0x1c2>
 80205fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80205fe:	0040      	lsls	r0, r0, #1
 8020600:	eb41 0101 	adc.w	r1, r1, r1
 8020604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020608:	bf08      	it	eq
 802060a:	3c01      	subeq	r4, #1
 802060c:	d0f7      	beq.n	80205fe <__aeabi_dmul+0x1a6>
 802060e:	ea41 0106 	orr.w	r1, r1, r6
 8020612:	f095 0f00 	teq	r5, #0
 8020616:	bf18      	it	ne
 8020618:	4770      	bxne	lr
 802061a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802061e:	0052      	lsls	r2, r2, #1
 8020620:	eb43 0303 	adc.w	r3, r3, r3
 8020624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020628:	bf08      	it	eq
 802062a:	3d01      	subeq	r5, #1
 802062c:	d0f7      	beq.n	802061e <__aeabi_dmul+0x1c6>
 802062e:	ea43 0306 	orr.w	r3, r3, r6
 8020632:	4770      	bx	lr
 8020634:	ea94 0f0c 	teq	r4, ip
 8020638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802063c:	bf18      	it	ne
 802063e:	ea95 0f0c 	teqne	r5, ip
 8020642:	d00c      	beq.n	802065e <__aeabi_dmul+0x206>
 8020644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020648:	bf18      	it	ne
 802064a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802064e:	d1d1      	bne.n	80205f4 <__aeabi_dmul+0x19c>
 8020650:	ea81 0103 	eor.w	r1, r1, r3
 8020654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020658:	f04f 0000 	mov.w	r0, #0
 802065c:	bd70      	pop	{r4, r5, r6, pc}
 802065e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020662:	bf06      	itte	eq
 8020664:	4610      	moveq	r0, r2
 8020666:	4619      	moveq	r1, r3
 8020668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802066c:	d019      	beq.n	80206a2 <__aeabi_dmul+0x24a>
 802066e:	ea94 0f0c 	teq	r4, ip
 8020672:	d102      	bne.n	802067a <__aeabi_dmul+0x222>
 8020674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020678:	d113      	bne.n	80206a2 <__aeabi_dmul+0x24a>
 802067a:	ea95 0f0c 	teq	r5, ip
 802067e:	d105      	bne.n	802068c <__aeabi_dmul+0x234>
 8020680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020684:	bf1c      	itt	ne
 8020686:	4610      	movne	r0, r2
 8020688:	4619      	movne	r1, r3
 802068a:	d10a      	bne.n	80206a2 <__aeabi_dmul+0x24a>
 802068c:	ea81 0103 	eor.w	r1, r1, r3
 8020690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802069c:	f04f 0000 	mov.w	r0, #0
 80206a0:	bd70      	pop	{r4, r5, r6, pc}
 80206a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80206a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80206aa:	bd70      	pop	{r4, r5, r6, pc}

080206ac <__aeabi_ddiv>:
 80206ac:	b570      	push	{r4, r5, r6, lr}
 80206ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80206b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80206b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80206ba:	bf1d      	ittte	ne
 80206bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80206c0:	ea94 0f0c 	teqne	r4, ip
 80206c4:	ea95 0f0c 	teqne	r5, ip
 80206c8:	f000 f8a7 	bleq	802081a <__aeabi_ddiv+0x16e>
 80206cc:	eba4 0405 	sub.w	r4, r4, r5
 80206d0:	ea81 0e03 	eor.w	lr, r1, r3
 80206d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80206d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80206dc:	f000 8088 	beq.w	80207f0 <__aeabi_ddiv+0x144>
 80206e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80206e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80206e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80206ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80206f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80206f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80206f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80206fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020704:	429d      	cmp	r5, r3
 8020706:	bf08      	it	eq
 8020708:	4296      	cmpeq	r6, r2
 802070a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802070e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020712:	d202      	bcs.n	802071a <__aeabi_ddiv+0x6e>
 8020714:	085b      	lsrs	r3, r3, #1
 8020716:	ea4f 0232 	mov.w	r2, r2, rrx
 802071a:	1ab6      	subs	r6, r6, r2
 802071c:	eb65 0503 	sbc.w	r5, r5, r3
 8020720:	085b      	lsrs	r3, r3, #1
 8020722:	ea4f 0232 	mov.w	r2, r2, rrx
 8020726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802072a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802072e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020732:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020736:	bf22      	ittt	cs
 8020738:	1ab6      	subcs	r6, r6, r2
 802073a:	4675      	movcs	r5, lr
 802073c:	ea40 000c 	orrcs.w	r0, r0, ip
 8020740:	085b      	lsrs	r3, r3, #1
 8020742:	ea4f 0232 	mov.w	r2, r2, rrx
 8020746:	ebb6 0e02 	subs.w	lr, r6, r2
 802074a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802074e:	bf22      	ittt	cs
 8020750:	1ab6      	subcs	r6, r6, r2
 8020752:	4675      	movcs	r5, lr
 8020754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8020758:	085b      	lsrs	r3, r3, #1
 802075a:	ea4f 0232 	mov.w	r2, r2, rrx
 802075e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020766:	bf22      	ittt	cs
 8020768:	1ab6      	subcs	r6, r6, r2
 802076a:	4675      	movcs	r5, lr
 802076c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020770:	085b      	lsrs	r3, r3, #1
 8020772:	ea4f 0232 	mov.w	r2, r2, rrx
 8020776:	ebb6 0e02 	subs.w	lr, r6, r2
 802077a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802077e:	bf22      	ittt	cs
 8020780:	1ab6      	subcs	r6, r6, r2
 8020782:	4675      	movcs	r5, lr
 8020784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020788:	ea55 0e06 	orrs.w	lr, r5, r6
 802078c:	d018      	beq.n	80207c0 <__aeabi_ddiv+0x114>
 802078e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020796:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802079a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802079e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80207a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80207a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80207aa:	d1c0      	bne.n	802072e <__aeabi_ddiv+0x82>
 80207ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80207b0:	d10b      	bne.n	80207ca <__aeabi_ddiv+0x11e>
 80207b2:	ea41 0100 	orr.w	r1, r1, r0
 80207b6:	f04f 0000 	mov.w	r0, #0
 80207ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80207be:	e7b6      	b.n	802072e <__aeabi_ddiv+0x82>
 80207c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80207c4:	bf04      	itt	eq
 80207c6:	4301      	orreq	r1, r0
 80207c8:	2000      	moveq	r0, #0
 80207ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80207ce:	bf88      	it	hi
 80207d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80207d4:	f63f aeaf 	bhi.w	8020536 <__aeabi_dmul+0xde>
 80207d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80207dc:	bf04      	itt	eq
 80207de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80207e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80207e6:	f150 0000 	adcs.w	r0, r0, #0
 80207ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80207ee:	bd70      	pop	{r4, r5, r6, pc}
 80207f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80207f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80207f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80207fc:	bfc2      	ittt	gt
 80207fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020806:	bd70      	popgt	{r4, r5, r6, pc}
 8020808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802080c:	f04f 0e00 	mov.w	lr, #0
 8020810:	3c01      	subs	r4, #1
 8020812:	e690      	b.n	8020536 <__aeabi_dmul+0xde>
 8020814:	ea45 0e06 	orr.w	lr, r5, r6
 8020818:	e68d      	b.n	8020536 <__aeabi_dmul+0xde>
 802081a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802081e:	ea94 0f0c 	teq	r4, ip
 8020822:	bf08      	it	eq
 8020824:	ea95 0f0c 	teqeq	r5, ip
 8020828:	f43f af3b 	beq.w	80206a2 <__aeabi_dmul+0x24a>
 802082c:	ea94 0f0c 	teq	r4, ip
 8020830:	d10a      	bne.n	8020848 <__aeabi_ddiv+0x19c>
 8020832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020836:	f47f af34 	bne.w	80206a2 <__aeabi_dmul+0x24a>
 802083a:	ea95 0f0c 	teq	r5, ip
 802083e:	f47f af25 	bne.w	802068c <__aeabi_dmul+0x234>
 8020842:	4610      	mov	r0, r2
 8020844:	4619      	mov	r1, r3
 8020846:	e72c      	b.n	80206a2 <__aeabi_dmul+0x24a>
 8020848:	ea95 0f0c 	teq	r5, ip
 802084c:	d106      	bne.n	802085c <__aeabi_ddiv+0x1b0>
 802084e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020852:	f43f aefd 	beq.w	8020650 <__aeabi_dmul+0x1f8>
 8020856:	4610      	mov	r0, r2
 8020858:	4619      	mov	r1, r3
 802085a:	e722      	b.n	80206a2 <__aeabi_dmul+0x24a>
 802085c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020860:	bf18      	it	ne
 8020862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020866:	f47f aec5 	bne.w	80205f4 <__aeabi_dmul+0x19c>
 802086a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 802086e:	f47f af0d 	bne.w	802068c <__aeabi_dmul+0x234>
 8020872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020876:	f47f aeeb 	bne.w	8020650 <__aeabi_dmul+0x1f8>
 802087a:	e712      	b.n	80206a2 <__aeabi_dmul+0x24a>

0802087c <__gedf2>:
 802087c:	f04f 3cff 	mov.w	ip, #4294967295
 8020880:	e006      	b.n	8020890 <__cmpdf2+0x4>
 8020882:	bf00      	nop

08020884 <__ledf2>:
 8020884:	f04f 0c01 	mov.w	ip, #1
 8020888:	e002      	b.n	8020890 <__cmpdf2+0x4>
 802088a:	bf00      	nop

0802088c <__cmpdf2>:
 802088c:	f04f 0c01 	mov.w	ip, #1
 8020890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 802089c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80208a0:	bf18      	it	ne
 80208a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80208a6:	d01b      	beq.n	80208e0 <__cmpdf2+0x54>
 80208a8:	b001      	add	sp, #4
 80208aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80208ae:	bf0c      	ite	eq
 80208b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80208b4:	ea91 0f03 	teqne	r1, r3
 80208b8:	bf02      	ittt	eq
 80208ba:	ea90 0f02 	teqeq	r0, r2
 80208be:	2000      	moveq	r0, #0
 80208c0:	4770      	bxeq	lr
 80208c2:	f110 0f00 	cmn.w	r0, #0
 80208c6:	ea91 0f03 	teq	r1, r3
 80208ca:	bf58      	it	pl
 80208cc:	4299      	cmppl	r1, r3
 80208ce:	bf08      	it	eq
 80208d0:	4290      	cmpeq	r0, r2
 80208d2:	bf2c      	ite	cs
 80208d4:	17d8      	asrcs	r0, r3, #31
 80208d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80208da:	f040 0001 	orr.w	r0, r0, #1
 80208de:	4770      	bx	lr
 80208e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80208e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80208e8:	d102      	bne.n	80208f0 <__cmpdf2+0x64>
 80208ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80208ee:	d107      	bne.n	8020900 <__cmpdf2+0x74>
 80208f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80208f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80208f8:	d1d6      	bne.n	80208a8 <__cmpdf2+0x1c>
 80208fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80208fe:	d0d3      	beq.n	80208a8 <__cmpdf2+0x1c>
 8020900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020904:	4770      	bx	lr
 8020906:	bf00      	nop

08020908 <__aeabi_cdrcmple>:
 8020908:	4684      	mov	ip, r0
 802090a:	4610      	mov	r0, r2
 802090c:	4662      	mov	r2, ip
 802090e:	468c      	mov	ip, r1
 8020910:	4619      	mov	r1, r3
 8020912:	4663      	mov	r3, ip
 8020914:	e000      	b.n	8020918 <__aeabi_cdcmpeq>
 8020916:	bf00      	nop

08020918 <__aeabi_cdcmpeq>:
 8020918:	b501      	push	{r0, lr}
 802091a:	f7ff ffb7 	bl	802088c <__cmpdf2>
 802091e:	2800      	cmp	r0, #0
 8020920:	bf48      	it	mi
 8020922:	f110 0f00 	cmnmi.w	r0, #0
 8020926:	bd01      	pop	{r0, pc}

08020928 <__aeabi_dcmpeq>:
 8020928:	f84d ed08 	str.w	lr, [sp, #-8]!
 802092c:	f7ff fff4 	bl	8020918 <__aeabi_cdcmpeq>
 8020930:	bf0c      	ite	eq
 8020932:	2001      	moveq	r0, #1
 8020934:	2000      	movne	r0, #0
 8020936:	f85d fb08 	ldr.w	pc, [sp], #8
 802093a:	bf00      	nop

0802093c <__aeabi_dcmplt>:
 802093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020940:	f7ff ffea 	bl	8020918 <__aeabi_cdcmpeq>
 8020944:	bf34      	ite	cc
 8020946:	2001      	movcc	r0, #1
 8020948:	2000      	movcs	r0, #0
 802094a:	f85d fb08 	ldr.w	pc, [sp], #8
 802094e:	bf00      	nop

08020950 <__aeabi_dcmple>:
 8020950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020954:	f7ff ffe0 	bl	8020918 <__aeabi_cdcmpeq>
 8020958:	bf94      	ite	ls
 802095a:	2001      	movls	r0, #1
 802095c:	2000      	movhi	r0, #0
 802095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8020962:	bf00      	nop

08020964 <__aeabi_dcmpge>:
 8020964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020968:	f7ff ffce 	bl	8020908 <__aeabi_cdrcmple>
 802096c:	bf94      	ite	ls
 802096e:	2001      	movls	r0, #1
 8020970:	2000      	movhi	r0, #0
 8020972:	f85d fb08 	ldr.w	pc, [sp], #8
 8020976:	bf00      	nop

08020978 <__aeabi_dcmpgt>:
 8020978:	f84d ed08 	str.w	lr, [sp, #-8]!
 802097c:	f7ff ffc4 	bl	8020908 <__aeabi_cdrcmple>
 8020980:	bf34      	ite	cc
 8020982:	2001      	movcc	r0, #1
 8020984:	2000      	movcs	r0, #0
 8020986:	f85d fb08 	ldr.w	pc, [sp], #8
 802098a:	bf00      	nop

0802098c <__aeabi_d2f>:
 802098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020994:	bf24      	itt	cs
 8020996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 802099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 802099e:	d90d      	bls.n	80209bc <__aeabi_d2f+0x30>
 80209a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80209a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80209a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80209ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80209b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80209b4:	bf08      	it	eq
 80209b6:	f020 0001 	biceq.w	r0, r0, #1
 80209ba:	4770      	bx	lr
 80209bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80209c0:	d121      	bne.n	8020a06 <__aeabi_d2f+0x7a>
 80209c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80209c6:	bfbc      	itt	lt
 80209c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80209cc:	4770      	bxlt	lr
 80209ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80209d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80209d6:	f1c2 0218 	rsb	r2, r2, #24
 80209da:	f1c2 0c20 	rsb	ip, r2, #32
 80209de:	fa10 f30c 	lsls.w	r3, r0, ip
 80209e2:	fa20 f002 	lsr.w	r0, r0, r2
 80209e6:	bf18      	it	ne
 80209e8:	f040 0001 	orrne.w	r0, r0, #1
 80209ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80209f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80209f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80209f8:	ea40 000c 	orr.w	r0, r0, ip
 80209fc:	fa23 f302 	lsr.w	r3, r3, r2
 8020a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020a04:	e7cc      	b.n	80209a0 <__aeabi_d2f+0x14>
 8020a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020a0a:	d107      	bne.n	8020a1c <__aeabi_d2f+0x90>
 8020a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020a10:	bf1e      	ittt	ne
 8020a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020a1a:	4770      	bxne	lr
 8020a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020a28:	4770      	bx	lr
 8020a2a:	bf00      	nop

08020a2c <__aeabi_uldivmod>:
 8020a2c:	b953      	cbnz	r3, 8020a44 <__aeabi_uldivmod+0x18>
 8020a2e:	b94a      	cbnz	r2, 8020a44 <__aeabi_uldivmod+0x18>
 8020a30:	2900      	cmp	r1, #0
 8020a32:	bf08      	it	eq
 8020a34:	2800      	cmpeq	r0, #0
 8020a36:	bf1c      	itt	ne
 8020a38:	f04f 31ff 	movne.w	r1, #4294967295
 8020a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8020a40:	f000 b996 	b.w	8020d70 <__aeabi_idiv0>
 8020a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8020a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020a4c:	f000 f82a 	bl	8020aa4 <__udivmoddi4>
 8020a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020a58:	b004      	add	sp, #16
 8020a5a:	4770      	bx	lr

08020a5c <__aeabi_f2ulz>:
 8020a5c:	b5d0      	push	{r4, r6, r7, lr}
 8020a5e:	f7ff fca3 	bl	80203a8 <__aeabi_f2d>
 8020a62:	2200      	movs	r2, #0
 8020a64:	4b0d      	ldr	r3, [pc, #52]	; (8020a9c <__aeabi_f2ulz+0x40>)
 8020a66:	4606      	mov	r6, r0
 8020a68:	460f      	mov	r7, r1
 8020a6a:	f7ff fcf5 	bl	8020458 <__aeabi_dmul>
 8020a6e:	f000 f981 	bl	8020d74 <__aeabi_d2uiz>
 8020a72:	4604      	mov	r4, r0
 8020a74:	f7ff fc76 	bl	8020364 <__aeabi_ui2d>
 8020a78:	2200      	movs	r2, #0
 8020a7a:	4b09      	ldr	r3, [pc, #36]	; (8020aa0 <__aeabi_f2ulz+0x44>)
 8020a7c:	f7ff fcec 	bl	8020458 <__aeabi_dmul>
 8020a80:	4602      	mov	r2, r0
 8020a82:	460b      	mov	r3, r1
 8020a84:	4630      	mov	r0, r6
 8020a86:	4639      	mov	r1, r7
 8020a88:	f7ff fb2e 	bl	80200e8 <__aeabi_dsub>
 8020a8c:	f000 f972 	bl	8020d74 <__aeabi_d2uiz>
 8020a90:	2200      	movs	r2, #0
 8020a92:	4623      	mov	r3, r4
 8020a94:	4310      	orrs	r0, r2
 8020a96:	4619      	mov	r1, r3
 8020a98:	bdd0      	pop	{r4, r6, r7, pc}
 8020a9a:	bf00      	nop
 8020a9c:	3df00000 	.word	0x3df00000
 8020aa0:	41f00000 	.word	0x41f00000

08020aa4 <__udivmoddi4>:
 8020aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020aa8:	9e08      	ldr	r6, [sp, #32]
 8020aaa:	4604      	mov	r4, r0
 8020aac:	4688      	mov	r8, r1
 8020aae:	2b00      	cmp	r3, #0
 8020ab0:	d14b      	bne.n	8020b4a <__udivmoddi4+0xa6>
 8020ab2:	428a      	cmp	r2, r1
 8020ab4:	4615      	mov	r5, r2
 8020ab6:	d967      	bls.n	8020b88 <__udivmoddi4+0xe4>
 8020ab8:	fab2 f282 	clz	r2, r2
 8020abc:	b14a      	cbz	r2, 8020ad2 <__udivmoddi4+0x2e>
 8020abe:	f1c2 0720 	rsb	r7, r2, #32
 8020ac2:	fa01 f302 	lsl.w	r3, r1, r2
 8020ac6:	fa20 f707 	lsr.w	r7, r0, r7
 8020aca:	4095      	lsls	r5, r2
 8020acc:	ea47 0803 	orr.w	r8, r7, r3
 8020ad0:	4094      	lsls	r4, r2
 8020ad2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020ad6:	0c23      	lsrs	r3, r4, #16
 8020ad8:	fbb8 f7fe 	udiv	r7, r8, lr
 8020adc:	fa1f fc85 	uxth.w	ip, r5
 8020ae0:	fb0e 8817 	mls	r8, lr, r7, r8
 8020ae4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020ae8:	fb07 f10c 	mul.w	r1, r7, ip
 8020aec:	4299      	cmp	r1, r3
 8020aee:	d909      	bls.n	8020b04 <__udivmoddi4+0x60>
 8020af0:	18eb      	adds	r3, r5, r3
 8020af2:	f107 30ff 	add.w	r0, r7, #4294967295
 8020af6:	f080 811b 	bcs.w	8020d30 <__udivmoddi4+0x28c>
 8020afa:	4299      	cmp	r1, r3
 8020afc:	f240 8118 	bls.w	8020d30 <__udivmoddi4+0x28c>
 8020b00:	3f02      	subs	r7, #2
 8020b02:	442b      	add	r3, r5
 8020b04:	1a5b      	subs	r3, r3, r1
 8020b06:	b2a4      	uxth	r4, r4
 8020b08:	fbb3 f0fe 	udiv	r0, r3, lr
 8020b0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8020b10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020b14:	fb00 fc0c 	mul.w	ip, r0, ip
 8020b18:	45a4      	cmp	ip, r4
 8020b1a:	d909      	bls.n	8020b30 <__udivmoddi4+0x8c>
 8020b1c:	192c      	adds	r4, r5, r4
 8020b1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b22:	f080 8107 	bcs.w	8020d34 <__udivmoddi4+0x290>
 8020b26:	45a4      	cmp	ip, r4
 8020b28:	f240 8104 	bls.w	8020d34 <__udivmoddi4+0x290>
 8020b2c:	3802      	subs	r0, #2
 8020b2e:	442c      	add	r4, r5
 8020b30:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020b34:	eba4 040c 	sub.w	r4, r4, ip
 8020b38:	2700      	movs	r7, #0
 8020b3a:	b11e      	cbz	r6, 8020b44 <__udivmoddi4+0xa0>
 8020b3c:	40d4      	lsrs	r4, r2
 8020b3e:	2300      	movs	r3, #0
 8020b40:	e9c6 4300 	strd	r4, r3, [r6]
 8020b44:	4639      	mov	r1, r7
 8020b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b4a:	428b      	cmp	r3, r1
 8020b4c:	d909      	bls.n	8020b62 <__udivmoddi4+0xbe>
 8020b4e:	2e00      	cmp	r6, #0
 8020b50:	f000 80eb 	beq.w	8020d2a <__udivmoddi4+0x286>
 8020b54:	2700      	movs	r7, #0
 8020b56:	e9c6 0100 	strd	r0, r1, [r6]
 8020b5a:	4638      	mov	r0, r7
 8020b5c:	4639      	mov	r1, r7
 8020b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b62:	fab3 f783 	clz	r7, r3
 8020b66:	2f00      	cmp	r7, #0
 8020b68:	d147      	bne.n	8020bfa <__udivmoddi4+0x156>
 8020b6a:	428b      	cmp	r3, r1
 8020b6c:	d302      	bcc.n	8020b74 <__udivmoddi4+0xd0>
 8020b6e:	4282      	cmp	r2, r0
 8020b70:	f200 80fa 	bhi.w	8020d68 <__udivmoddi4+0x2c4>
 8020b74:	1a84      	subs	r4, r0, r2
 8020b76:	eb61 0303 	sbc.w	r3, r1, r3
 8020b7a:	2001      	movs	r0, #1
 8020b7c:	4698      	mov	r8, r3
 8020b7e:	2e00      	cmp	r6, #0
 8020b80:	d0e0      	beq.n	8020b44 <__udivmoddi4+0xa0>
 8020b82:	e9c6 4800 	strd	r4, r8, [r6]
 8020b86:	e7dd      	b.n	8020b44 <__udivmoddi4+0xa0>
 8020b88:	b902      	cbnz	r2, 8020b8c <__udivmoddi4+0xe8>
 8020b8a:	deff      	udf	#255	; 0xff
 8020b8c:	fab2 f282 	clz	r2, r2
 8020b90:	2a00      	cmp	r2, #0
 8020b92:	f040 808f 	bne.w	8020cb4 <__udivmoddi4+0x210>
 8020b96:	1b49      	subs	r1, r1, r5
 8020b98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020b9c:	fa1f f885 	uxth.w	r8, r5
 8020ba0:	2701      	movs	r7, #1
 8020ba2:	fbb1 fcfe 	udiv	ip, r1, lr
 8020ba6:	0c23      	lsrs	r3, r4, #16
 8020ba8:	fb0e 111c 	mls	r1, lr, ip, r1
 8020bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020bb0:	fb08 f10c 	mul.w	r1, r8, ip
 8020bb4:	4299      	cmp	r1, r3
 8020bb6:	d907      	bls.n	8020bc8 <__udivmoddi4+0x124>
 8020bb8:	18eb      	adds	r3, r5, r3
 8020bba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020bbe:	d202      	bcs.n	8020bc6 <__udivmoddi4+0x122>
 8020bc0:	4299      	cmp	r1, r3
 8020bc2:	f200 80cd 	bhi.w	8020d60 <__udivmoddi4+0x2bc>
 8020bc6:	4684      	mov	ip, r0
 8020bc8:	1a59      	subs	r1, r3, r1
 8020bca:	b2a3      	uxth	r3, r4
 8020bcc:	fbb1 f0fe 	udiv	r0, r1, lr
 8020bd0:	fb0e 1410 	mls	r4, lr, r0, r1
 8020bd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020bd8:	fb08 f800 	mul.w	r8, r8, r0
 8020bdc:	45a0      	cmp	r8, r4
 8020bde:	d907      	bls.n	8020bf0 <__udivmoddi4+0x14c>
 8020be0:	192c      	adds	r4, r5, r4
 8020be2:	f100 33ff 	add.w	r3, r0, #4294967295
 8020be6:	d202      	bcs.n	8020bee <__udivmoddi4+0x14a>
 8020be8:	45a0      	cmp	r8, r4
 8020bea:	f200 80b6 	bhi.w	8020d5a <__udivmoddi4+0x2b6>
 8020bee:	4618      	mov	r0, r3
 8020bf0:	eba4 0408 	sub.w	r4, r4, r8
 8020bf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020bf8:	e79f      	b.n	8020b3a <__udivmoddi4+0x96>
 8020bfa:	f1c7 0c20 	rsb	ip, r7, #32
 8020bfe:	40bb      	lsls	r3, r7
 8020c00:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020c04:	ea4e 0e03 	orr.w	lr, lr, r3
 8020c08:	fa01 f407 	lsl.w	r4, r1, r7
 8020c0c:	fa20 f50c 	lsr.w	r5, r0, ip
 8020c10:	fa21 f30c 	lsr.w	r3, r1, ip
 8020c14:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020c18:	4325      	orrs	r5, r4
 8020c1a:	fbb3 f9f8 	udiv	r9, r3, r8
 8020c1e:	0c2c      	lsrs	r4, r5, #16
 8020c20:	fb08 3319 	mls	r3, r8, r9, r3
 8020c24:	fa1f fa8e 	uxth.w	sl, lr
 8020c28:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020c2c:	fb09 f40a 	mul.w	r4, r9, sl
 8020c30:	429c      	cmp	r4, r3
 8020c32:	fa02 f207 	lsl.w	r2, r2, r7
 8020c36:	fa00 f107 	lsl.w	r1, r0, r7
 8020c3a:	d90b      	bls.n	8020c54 <__udivmoddi4+0x1b0>
 8020c3c:	eb1e 0303 	adds.w	r3, lr, r3
 8020c40:	f109 30ff 	add.w	r0, r9, #4294967295
 8020c44:	f080 8087 	bcs.w	8020d56 <__udivmoddi4+0x2b2>
 8020c48:	429c      	cmp	r4, r3
 8020c4a:	f240 8084 	bls.w	8020d56 <__udivmoddi4+0x2b2>
 8020c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8020c52:	4473      	add	r3, lr
 8020c54:	1b1b      	subs	r3, r3, r4
 8020c56:	b2ad      	uxth	r5, r5
 8020c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8020c5c:	fb08 3310 	mls	r3, r8, r0, r3
 8020c60:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020c64:	fb00 fa0a 	mul.w	sl, r0, sl
 8020c68:	45a2      	cmp	sl, r4
 8020c6a:	d908      	bls.n	8020c7e <__udivmoddi4+0x1da>
 8020c6c:	eb1e 0404 	adds.w	r4, lr, r4
 8020c70:	f100 33ff 	add.w	r3, r0, #4294967295
 8020c74:	d26b      	bcs.n	8020d4e <__udivmoddi4+0x2aa>
 8020c76:	45a2      	cmp	sl, r4
 8020c78:	d969      	bls.n	8020d4e <__udivmoddi4+0x2aa>
 8020c7a:	3802      	subs	r0, #2
 8020c7c:	4474      	add	r4, lr
 8020c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020c82:	fba0 8902 	umull	r8, r9, r0, r2
 8020c86:	eba4 040a 	sub.w	r4, r4, sl
 8020c8a:	454c      	cmp	r4, r9
 8020c8c:	46c2      	mov	sl, r8
 8020c8e:	464b      	mov	r3, r9
 8020c90:	d354      	bcc.n	8020d3c <__udivmoddi4+0x298>
 8020c92:	d051      	beq.n	8020d38 <__udivmoddi4+0x294>
 8020c94:	2e00      	cmp	r6, #0
 8020c96:	d069      	beq.n	8020d6c <__udivmoddi4+0x2c8>
 8020c98:	ebb1 050a 	subs.w	r5, r1, sl
 8020c9c:	eb64 0403 	sbc.w	r4, r4, r3
 8020ca0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020ca4:	40fd      	lsrs	r5, r7
 8020ca6:	40fc      	lsrs	r4, r7
 8020ca8:	ea4c 0505 	orr.w	r5, ip, r5
 8020cac:	e9c6 5400 	strd	r5, r4, [r6]
 8020cb0:	2700      	movs	r7, #0
 8020cb2:	e747      	b.n	8020b44 <__udivmoddi4+0xa0>
 8020cb4:	f1c2 0320 	rsb	r3, r2, #32
 8020cb8:	fa20 f703 	lsr.w	r7, r0, r3
 8020cbc:	4095      	lsls	r5, r2
 8020cbe:	fa01 f002 	lsl.w	r0, r1, r2
 8020cc2:	fa21 f303 	lsr.w	r3, r1, r3
 8020cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020cca:	4338      	orrs	r0, r7
 8020ccc:	0c01      	lsrs	r1, r0, #16
 8020cce:	fbb3 f7fe 	udiv	r7, r3, lr
 8020cd2:	fa1f f885 	uxth.w	r8, r5
 8020cd6:	fb0e 3317 	mls	r3, lr, r7, r3
 8020cda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020cde:	fb07 f308 	mul.w	r3, r7, r8
 8020ce2:	428b      	cmp	r3, r1
 8020ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8020ce8:	d907      	bls.n	8020cfa <__udivmoddi4+0x256>
 8020cea:	1869      	adds	r1, r5, r1
 8020cec:	f107 3cff 	add.w	ip, r7, #4294967295
 8020cf0:	d22f      	bcs.n	8020d52 <__udivmoddi4+0x2ae>
 8020cf2:	428b      	cmp	r3, r1
 8020cf4:	d92d      	bls.n	8020d52 <__udivmoddi4+0x2ae>
 8020cf6:	3f02      	subs	r7, #2
 8020cf8:	4429      	add	r1, r5
 8020cfa:	1acb      	subs	r3, r1, r3
 8020cfc:	b281      	uxth	r1, r0
 8020cfe:	fbb3 f0fe 	udiv	r0, r3, lr
 8020d02:	fb0e 3310 	mls	r3, lr, r0, r3
 8020d06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020d0a:	fb00 f308 	mul.w	r3, r0, r8
 8020d0e:	428b      	cmp	r3, r1
 8020d10:	d907      	bls.n	8020d22 <__udivmoddi4+0x27e>
 8020d12:	1869      	adds	r1, r5, r1
 8020d14:	f100 3cff 	add.w	ip, r0, #4294967295
 8020d18:	d217      	bcs.n	8020d4a <__udivmoddi4+0x2a6>
 8020d1a:	428b      	cmp	r3, r1
 8020d1c:	d915      	bls.n	8020d4a <__udivmoddi4+0x2a6>
 8020d1e:	3802      	subs	r0, #2
 8020d20:	4429      	add	r1, r5
 8020d22:	1ac9      	subs	r1, r1, r3
 8020d24:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020d28:	e73b      	b.n	8020ba2 <__udivmoddi4+0xfe>
 8020d2a:	4637      	mov	r7, r6
 8020d2c:	4630      	mov	r0, r6
 8020d2e:	e709      	b.n	8020b44 <__udivmoddi4+0xa0>
 8020d30:	4607      	mov	r7, r0
 8020d32:	e6e7      	b.n	8020b04 <__udivmoddi4+0x60>
 8020d34:	4618      	mov	r0, r3
 8020d36:	e6fb      	b.n	8020b30 <__udivmoddi4+0x8c>
 8020d38:	4541      	cmp	r1, r8
 8020d3a:	d2ab      	bcs.n	8020c94 <__udivmoddi4+0x1f0>
 8020d3c:	ebb8 0a02 	subs.w	sl, r8, r2
 8020d40:	eb69 020e 	sbc.w	r2, r9, lr
 8020d44:	3801      	subs	r0, #1
 8020d46:	4613      	mov	r3, r2
 8020d48:	e7a4      	b.n	8020c94 <__udivmoddi4+0x1f0>
 8020d4a:	4660      	mov	r0, ip
 8020d4c:	e7e9      	b.n	8020d22 <__udivmoddi4+0x27e>
 8020d4e:	4618      	mov	r0, r3
 8020d50:	e795      	b.n	8020c7e <__udivmoddi4+0x1da>
 8020d52:	4667      	mov	r7, ip
 8020d54:	e7d1      	b.n	8020cfa <__udivmoddi4+0x256>
 8020d56:	4681      	mov	r9, r0
 8020d58:	e77c      	b.n	8020c54 <__udivmoddi4+0x1b0>
 8020d5a:	3802      	subs	r0, #2
 8020d5c:	442c      	add	r4, r5
 8020d5e:	e747      	b.n	8020bf0 <__udivmoddi4+0x14c>
 8020d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8020d64:	442b      	add	r3, r5
 8020d66:	e72f      	b.n	8020bc8 <__udivmoddi4+0x124>
 8020d68:	4638      	mov	r0, r7
 8020d6a:	e708      	b.n	8020b7e <__udivmoddi4+0xda>
 8020d6c:	4637      	mov	r7, r6
 8020d6e:	e6e9      	b.n	8020b44 <__udivmoddi4+0xa0>

08020d70 <__aeabi_idiv0>:
 8020d70:	4770      	bx	lr
 8020d72:	bf00      	nop

08020d74 <__aeabi_d2uiz>:
 8020d74:	004a      	lsls	r2, r1, #1
 8020d76:	d211      	bcs.n	8020d9c <__aeabi_d2uiz+0x28>
 8020d78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020d7c:	d211      	bcs.n	8020da2 <__aeabi_d2uiz+0x2e>
 8020d7e:	d50d      	bpl.n	8020d9c <__aeabi_d2uiz+0x28>
 8020d80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020d84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020d88:	d40e      	bmi.n	8020da8 <__aeabi_d2uiz+0x34>
 8020d8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020d92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020d96:	fa23 f002 	lsr.w	r0, r3, r2
 8020d9a:	4770      	bx	lr
 8020d9c:	f04f 0000 	mov.w	r0, #0
 8020da0:	4770      	bx	lr
 8020da2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020da6:	d102      	bne.n	8020dae <__aeabi_d2uiz+0x3a>
 8020da8:	f04f 30ff 	mov.w	r0, #4294967295
 8020dac:	4770      	bx	lr
 8020dae:	f04f 0000 	mov.w	r0, #0
 8020db2:	4770      	bx	lr

08020db4 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"
#include "declare_extern.h"

Encoder::Encoder() : distance_(0)
 8020db4:	b480      	push	{r7}
 8020db6:	b083      	sub	sp, #12
 8020db8:	af00      	add	r7, sp, #0
 8020dba:	6078      	str	r0, [r7, #4]
                   , distance_stack_(0)
                   , distance_difference_(0) {}
 8020dbc:	687b      	ldr	r3, [r7, #4]
 8020dbe:	f04f 0200 	mov.w	r2, #0
 8020dc2:	601a      	str	r2, [r3, #0]
 8020dc4:	687b      	ldr	r3, [r7, #4]
 8020dc6:	f04f 0200 	mov.w	r2, #0
 8020dca:	605a      	str	r2, [r3, #4]
 8020dcc:	687b      	ldr	r3, [r7, #4]
 8020dce:	f04f 0200 	mov.w	r2, #0
 8020dd2:	609a      	str	r2, [r3, #8]
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	4618      	mov	r0, r3
 8020dd8:	370c      	adds	r7, #12
 8020dda:	46bd      	mov	sp, r7
 8020ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020de0:	4770      	bx	lr
	...

08020de4 <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020de4:	b580      	push	{r7, lr}
 8020de6:	b082      	sub	sp, #8
 8020de8:	af00      	add	r7, sp, #0
 8020dea:	6078      	str	r0, [r7, #4]
	if(HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL) != HAL_OK)
 8020dec:	213c      	movs	r1, #60	; 0x3c
 8020dee:	4812      	ldr	r0, [pc, #72]	; (8020e38 <_ZN7Encoder4InitEv+0x54>)
 8020df0:	f009 f996 	bl	802a120 <HAL_TIM_Encoder_Start>
 8020df4:	4603      	mov	r3, r0
 8020df6:	2b00      	cmp	r3, #0
 8020df8:	bf14      	ite	ne
 8020dfa:	2301      	movne	r3, #1
 8020dfc:	2300      	moveq	r3, #0
 8020dfe:	b2db      	uxtb	r3, r3
 8020e00:	2b00      	cmp	r3, #0
 8020e02:	d004      	beq.n	8020e0e <_ZN7Encoder4InitEv+0x2a>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim8 = true;
 8020e04:	4b0d      	ldr	r3, [pc, #52]	; (8020e3c <_ZN7Encoder4InitEv+0x58>)
 8020e06:	2201      	movs	r2, #1
 8020e08:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020e0a:	f003 fbc7 	bl	802459c <Error_Handler>
	}

	if(HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL) != HAL_OK)
 8020e0e:	213c      	movs	r1, #60	; 0x3c
 8020e10:	480b      	ldr	r0, [pc, #44]	; (8020e40 <_ZN7Encoder4InitEv+0x5c>)
 8020e12:	f009 f985 	bl	802a120 <HAL_TIM_Encoder_Start>
 8020e16:	4603      	mov	r3, r0
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	bf14      	ite	ne
 8020e1c:	2301      	movne	r3, #1
 8020e1e:	2300      	moveq	r3, #0
 8020e20:	b2db      	uxtb	r3, r3
 8020e22:	2b00      	cmp	r3, #0
 8020e24:	d004      	beq.n	8020e30 <_ZN7Encoder4InitEv+0x4c>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim4 = true;
 8020e26:	4b07      	ldr	r3, [pc, #28]	; (8020e44 <_ZN7Encoder4InitEv+0x60>)
 8020e28:	2201      	movs	r2, #1
 8020e2a:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020e2c:	f003 fbb6 	bl	802459c <Error_Handler>
	}
}
 8020e30:	bf00      	nop
 8020e32:	3708      	adds	r7, #8
 8020e34:	46bd      	mov	sp, r7
 8020e36:	bd80      	pop	{r7, pc}
 8020e38:	20011120 	.word	0x20011120
 8020e3c:	20000144 	.word	0x20000144
 8020e40:	20011160 	.word	0x20011160
 8020e44:	20000143 	.word	0x20000143

08020e48 <_ZN7Encoder6UpdateEv>:

void Encoder::Update()
{
 8020e48:	b590      	push	{r4, r7, lr}
 8020e4a:	b087      	sub	sp, #28
 8020e4c:	af00      	add	r7, sp, #0
 8020e4e:	6078      	str	r0, [r7, #4]
	int16_t count_l = static_cast<int16_t>((TIM8 -> CNT) - START_COUNT);
 8020e50:	4b39      	ldr	r3, [pc, #228]	; (8020f38 <_ZN7Encoder6UpdateEv+0xf0>)
 8020e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020e54:	b29b      	uxth	r3, r3
 8020e56:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8020e5a:	3b7f      	subs	r3, #127	; 0x7f
 8020e5c:	b29b      	uxth	r3, r3
 8020e5e:	82fb      	strh	r3, [r7, #22]
	int16_t count_r = static_cast<int16_t>(START_COUNT - (TIM4 -> CNT));
 8020e60:	4b36      	ldr	r3, [pc, #216]	; (8020f3c <_ZN7Encoder6UpdateEv+0xf4>)
 8020e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020e64:	b29b      	uxth	r3, r3
 8020e66:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8020e6a:	337f      	adds	r3, #127	; 0x7f
 8020e6c:	b29b      	uxth	r3, r3
 8020e6e:	82bb      	strh	r3, [r7, #20]
	TIM8 -> CNT = START_COUNT;
 8020e70:	4b31      	ldr	r3, [pc, #196]	; (8020f38 <_ZN7Encoder6UpdateEv+0xf0>)
 8020e72:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020e76:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = START_COUNT;
 8020e78:	4b30      	ldr	r3, [pc, #192]	; (8020f3c <_ZN7Encoder6UpdateEv+0xf4>)
 8020e7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020e7e:	625a      	str	r2, [r3, #36]	; 0x24
	float distance_l = static_cast<float>(count_l * DISTANCE_PER_COUNT);
 8020e80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020e84:	4618      	mov	r0, r3
 8020e86:	f7ff fa7d 	bl	8020384 <__aeabi_i2d>
 8020e8a:	a329      	add	r3, pc, #164	; (adr r3, 8020f30 <_ZN7Encoder6UpdateEv+0xe8>)
 8020e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e90:	f7ff fae2 	bl	8020458 <__aeabi_dmul>
 8020e94:	4603      	mov	r3, r0
 8020e96:	460c      	mov	r4, r1
 8020e98:	4618      	mov	r0, r3
 8020e9a:	4621      	mov	r1, r4
 8020e9c:	f7ff fd76 	bl	802098c <__aeabi_d2f>
 8020ea0:	4603      	mov	r3, r0
 8020ea2:	613b      	str	r3, [r7, #16]
	float distance_r = static_cast<float>(count_r * DISTANCE_PER_COUNT);
 8020ea4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020ea8:	4618      	mov	r0, r3
 8020eaa:	f7ff fa6b 	bl	8020384 <__aeabi_i2d>
 8020eae:	a320      	add	r3, pc, #128	; (adr r3, 8020f30 <_ZN7Encoder6UpdateEv+0xe8>)
 8020eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eb4:	f7ff fad0 	bl	8020458 <__aeabi_dmul>
 8020eb8:	4603      	mov	r3, r0
 8020eba:	460c      	mov	r4, r1
 8020ebc:	4618      	mov	r0, r3
 8020ebe:	4621      	mov	r1, r4
 8020ec0:	f7ff fd64 	bl	802098c <__aeabi_d2f>
 8020ec4:	4603      	mov	r3, r0
 8020ec6:	60fb      	str	r3, [r7, #12]
	float distance = (distance_l + distance_r) / 2.0;
 8020ec8:	ed97 7a04 	vldr	s14, [r7, #16]
 8020ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8020ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020ed4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8020ed8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020edc:	edc7 7a02 	vstr	s15, [r7, #8]

	distance_ = distance;
 8020ee0:	687b      	ldr	r3, [r7, #4]
 8020ee2:	68ba      	ldr	r2, [r7, #8]
 8020ee4:	601a      	str	r2, [r3, #0]
	distance_stack_ += distance;
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	ed93 7a01 	vldr	s14, [r3, #4]
 8020eec:	edd7 7a02 	vldr	s15, [r7, #8]
 8020ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_difference_ = distance_r - distance_l;
 8020efa:	ed97 7a03 	vldr	s14, [r7, #12]
 8020efe:	edd7 7a04 	vldr	s15, [r7, #16]
 8020f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020f06:	687b      	ldr	r3, [r7, #4]
 8020f08:	edc3 7a02 	vstr	s15, [r3, #8]

#ifdef DEBUG_MODE
	g_enc_cnt_l = count_l;
 8020f0c:	4a0c      	ldr	r2, [pc, #48]	; (8020f40 <_ZN7Encoder6UpdateEv+0xf8>)
 8020f0e:	8afb      	ldrh	r3, [r7, #22]
 8020f10:	8013      	strh	r3, [r2, #0]
	g_enc_cnt_r = count_r;
 8020f12:	4a0c      	ldr	r2, [pc, #48]	; (8020f44 <_ZN7Encoder6UpdateEv+0xfc>)
 8020f14:	8abb      	ldrh	r3, [r7, #20]
 8020f16:	8013      	strh	r3, [r2, #0]
	g_distance_l = distance_l;
 8020f18:	4a0b      	ldr	r2, [pc, #44]	; (8020f48 <_ZN7Encoder6UpdateEv+0x100>)
 8020f1a:	693b      	ldr	r3, [r7, #16]
 8020f1c:	6013      	str	r3, [r2, #0]
	g_distance_r = distance_r;
 8020f1e:	4a0b      	ldr	r2, [pc, #44]	; (8020f4c <_ZN7Encoder6UpdateEv+0x104>)
 8020f20:	68fb      	ldr	r3, [r7, #12]
 8020f22:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8020f24:	bf00      	nop
 8020f26:	371c      	adds	r7, #28
 8020f28:	46bd      	mov	sp, r7
 8020f2a:	bd90      	pop	{r4, r7, pc}
 8020f2c:	f3af 8000 	nop.w
 8020f30:	5d35653d 	.word	0x5d35653d
 8020f34:	3f7d744f 	.word	0x3f7d744f
 8020f38:	40010400 	.word	0x40010400
 8020f3c:	40000800 	.word	0x40000800
 8020f40:	200002e0 	.word	0x200002e0
 8020f44:	200002e2 	.word	0x200002e2
 8020f48:	200002e4 	.word	0x200002e4
 8020f4c:	200002e8 	.word	0x200002e8

08020f50 <_ZN7Encoder18ResetDistanceStackEv>:
	TIM8 -> CNT = START_COUNT;
	TIM4 -> CNT = START_COUNT;
}

void Encoder::ResetDistanceStack()
{
 8020f50:	b480      	push	{r7}
 8020f52:	b083      	sub	sp, #12
 8020f54:	af00      	add	r7, sp, #0
 8020f56:	6078      	str	r0, [r7, #4]
	distance_stack_ = 0.0;
 8020f58:	687b      	ldr	r3, [r7, #4]
 8020f5a:	f04f 0200 	mov.w	r2, #0
 8020f5e:	605a      	str	r2, [r3, #4]
}
 8020f60:	bf00      	nop
 8020f62:	370c      	adds	r7, #12
 8020f64:	46bd      	mov	sp, r7
 8020f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f6a:	4770      	bx	lr

08020f6c <_ZN7Encoder11GetDistanceEv>:

float Encoder::GetDistance()
{
 8020f6c:	b480      	push	{r7}
 8020f6e:	b083      	sub	sp, #12
 8020f70:	af00      	add	r7, sp, #0
 8020f72:	6078      	str	r0, [r7, #4]
	return distance_;
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	681b      	ldr	r3, [r3, #0]
 8020f78:	ee07 3a90 	vmov	s15, r3
}
 8020f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8020f80:	370c      	adds	r7, #12
 8020f82:	46bd      	mov	sp, r7
 8020f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f88:	4770      	bx	lr

08020f8a <_ZN7Encoder16GetDistanceStackEv>:

float Encoder::GetDistanceStack()
{
 8020f8a:	b480      	push	{r7}
 8020f8c:	b083      	sub	sp, #12
 8020f8e:	af00      	add	r7, sp, #0
 8020f90:	6078      	str	r0, [r7, #4]
	return distance_stack_;
 8020f92:	687b      	ldr	r3, [r7, #4]
 8020f94:	685b      	ldr	r3, [r3, #4]
 8020f96:	ee07 3a90 	vmov	s15, r3
}
 8020f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8020f9e:	370c      	adds	r7, #12
 8020fa0:	46bd      	mov	sp, r7
 8020fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fa6:	4770      	bx	lr

08020fa8 <_ZN7Encoder15AngularVelocityEv>:

float Encoder::AngularVelocity()
{
 8020fa8:	b590      	push	{r4, r7, lr}
 8020faa:	b083      	sub	sp, #12
 8020fac:	af00      	add	r7, sp, #0
 8020fae:	6078      	str	r0, [r7, #4]
	return distance_difference_ / (TIM6_PERIOD * MACHINE_TREAD);
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	689b      	ldr	r3, [r3, #8]
 8020fb4:	4618      	mov	r0, r3
 8020fb6:	f7ff f9f7 	bl	80203a8 <__aeabi_f2d>
 8020fba:	a309      	add	r3, pc, #36	; (adr r3, 8020fe0 <_ZN7Encoder15AngularVelocityEv+0x38>)
 8020fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fc0:	f7ff fb74 	bl	80206ac <__aeabi_ddiv>
 8020fc4:	4603      	mov	r3, r0
 8020fc6:	460c      	mov	r4, r1
 8020fc8:	4618      	mov	r0, r3
 8020fca:	4621      	mov	r1, r4
 8020fcc:	f7ff fcde 	bl	802098c <__aeabi_d2f>
 8020fd0:	4603      	mov	r3, r0
 8020fd2:	ee07 3a90 	vmov	s15, r3
 8020fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8020fda:	370c      	adds	r7, #12
 8020fdc:	46bd      	mov	sp, r7
 8020fde:	bd90      	pop	{r4, r7, pc}
 8020fe0:	00000000 	.word	0x00000000
 8020fe4:	4063d800 	.word	0x4063d800

08020fe8 <_ZN5Flash5ClearEv>:
#include "flash.hpp"
#include "declare_extern.h"
#include <string.h>

bool Flash::Clear()
{
 8020fe8:	b580      	push	{r7, lr}
 8020fea:	b088      	sub	sp, #32
 8020fec:	af00      	add	r7, sp, #0
 8020fee:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8020ff0:	f007 f84a 	bl	8028088 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase;

    erase.TypeErase    = FLASH_TYPEERASE_SECTORS; // Erasure range : Sectors
 8020ff4:	2300      	movs	r3, #0
 8020ff6:	60fb      	str	r3, [r7, #12]
    erase.Sector       = FLASH_SECTOR_1;          // Which sector : 1
 8020ff8:	2301      	movs	r3, #1
 8020ffa:	617b      	str	r3, [r7, #20]
    erase.NbSectors    = 4;                       // How many sector : 4 (1,2,3,4)
 8020ffc:	2304      	movs	r3, #4
 8020ffe:	61bb      	str	r3, [r7, #24]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;   // Voltage range : 2.7 ~ 3.6 [V]
 8021000:	2302      	movs	r3, #2
 8021002:	61fb      	str	r3, [r7, #28]

    // Success => 0xFFFFFFFF is stored.
    // Fail => Sector number is stored.
    uint32_t failed_sector = 0;
 8021004:	2300      	movs	r3, #0
 8021006:	60bb      	str	r3, [r7, #8]

    if(HAL_FLASHEx_Erase(&erase, &failed_sector) != HAL_OK)
 8021008:	f107 0208 	add.w	r2, r7, #8
 802100c:	f107 030c 	add.w	r3, r7, #12
 8021010:	4611      	mov	r1, r2
 8021012:	4618      	mov	r0, r3
 8021014:	f007 f998 	bl	8028348 <HAL_FLASHEx_Erase>
 8021018:	4603      	mov	r3, r0
 802101a:	2b00      	cmp	r3, #0
 802101c:	bf14      	ite	ne
 802101e:	2301      	movne	r3, #1
 8021020:	2300      	moveq	r3, #0
 8021022:	b2db      	uxtb	r3, r3
 8021024:	2b00      	cmp	r3, #0
 8021026:	d004      	beq.n	8021032 <_ZN5Flash5ClearEv+0x4a>
    {
#ifdef DEBUG_MODE
        g_erase_failed_sector = failed_sector;
 8021028:	68bb      	ldr	r3, [r7, #8]
 802102a:	4a08      	ldr	r2, [pc, #32]	; (802104c <_ZN5Flash5ClearEv+0x64>)
 802102c:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

        return false;
 802102e:	2300      	movs	r3, #0
 8021030:	e008      	b.n	8021044 <_ZN5Flash5ClearEv+0x5c>
    }

    HAL_FLASH_Lock();
 8021032:	f007 f84b 	bl	80280cc <HAL_FLASH_Lock>

    return failed_sector == 0xFFFFFFFF;
 8021036:	68bb      	ldr	r3, [r7, #8]
 8021038:	f1b3 3fff 	cmp.w	r3, #4294967295
 802103c:	bf0c      	ite	eq
 802103e:	2301      	moveq	r3, #1
 8021040:	2300      	movne	r3, #0
 8021042:	b2db      	uxtb	r3, r3
}
 8021044:	4618      	mov	r0, r3
 8021046:	3720      	adds	r7, #32
 8021048:	46bd      	mov	sp, r7
 802104a:	bd80      	pop	{r7, pc}
 802104c:	2000030c 	.word	0x2000030c

08021050 <_ZN5Flash10StoreUint8EmPhm>:

bool Flash::StoreUint8(uint32_t address, uint8_t *data, uint32_t number)
{
 8021050:	b590      	push	{r4, r7, lr}
 8021052:	b087      	sub	sp, #28
 8021054:	af00      	add	r7, sp, #0
 8021056:	60f8      	str	r0, [r7, #12]
 8021058:	60b9      	str	r1, [r7, #8]
 802105a:	607a      	str	r2, [r7, #4]
 802105c:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 802105e:	f007 f813 	bl	8028088 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8021062:	2300      	movs	r3, #0
 8021064:	613b      	str	r3, [r7, #16]
 8021066:	693a      	ldr	r2, [r7, #16]
 8021068:	683b      	ldr	r3, [r7, #0]
 802106a:	429a      	cmp	r2, r3
 802106c:	d218      	bcs.n	80210a0 <_ZN5Flash10StoreUint8EmPhm+0x50>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address++, *data++);
 802106e:	68b9      	ldr	r1, [r7, #8]
 8021070:	1c4b      	adds	r3, r1, #1
 8021072:	60bb      	str	r3, [r7, #8]
 8021074:	687b      	ldr	r3, [r7, #4]
 8021076:	1c5a      	adds	r2, r3, #1
 8021078:	607a      	str	r2, [r7, #4]
 802107a:	781b      	ldrb	r3, [r3, #0]
 802107c:	b2db      	uxtb	r3, r3
 802107e:	f04f 0400 	mov.w	r4, #0
 8021082:	461a      	mov	r2, r3
 8021084:	4623      	mov	r3, r4
 8021086:	2000      	movs	r0, #0
 8021088:	f006 ffaa 	bl	8027fe0 <HAL_FLASH_Program>
 802108c:	4603      	mov	r3, r0
 802108e:	75fb      	strb	r3, [r7, #23]
        if(result != HAL_OK) break;
 8021090:	7dfb      	ldrb	r3, [r7, #23]
 8021092:	2b00      	cmp	r3, #0
 8021094:	d103      	bne.n	802109e <_ZN5Flash10StoreUint8EmPhm+0x4e>
    for(uint32_t i = 0; i < number; i++)
 8021096:	693b      	ldr	r3, [r7, #16]
 8021098:	3301      	adds	r3, #1
 802109a:	613b      	str	r3, [r7, #16]
 802109c:	e7e3      	b.n	8021066 <_ZN5Flash10StoreUint8EmPhm+0x16>
        if(result != HAL_OK) break;
 802109e:	bf00      	nop
    }

    HAL_FLASH_Lock();
 80210a0:	f007 f814 	bl	80280cc <HAL_FLASH_Lock>

    return result == HAL_OK;
 80210a4:	7dfb      	ldrb	r3, [r7, #23]
 80210a6:	2b00      	cmp	r3, #0
 80210a8:	bf0c      	ite	eq
 80210aa:	2301      	moveq	r3, #1
 80210ac:	2300      	movne	r3, #0
 80210ae:	b2db      	uxtb	r3, r3
}
 80210b0:	4618      	mov	r0, r3
 80210b2:	371c      	adds	r7, #28
 80210b4:	46bd      	mov	sp, r7
 80210b6:	bd90      	pop	{r4, r7, pc}

080210b8 <_ZN5Flash11StoreUint16EmPtm>:

bool Flash::StoreUint16(uint32_t address, uint16_t *data, uint32_t number)
{
 80210b8:	b590      	push	{r4, r7, lr}
 80210ba:	b087      	sub	sp, #28
 80210bc:	af00      	add	r7, sp, #0
 80210be:	60f8      	str	r0, [r7, #12]
 80210c0:	60b9      	str	r1, [r7, #8]
 80210c2:	607a      	str	r2, [r7, #4]
 80210c4:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 80210c6:	f006 ffdf 	bl	8028088 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 80210ca:	2300      	movs	r3, #0
 80210cc:	613b      	str	r3, [r7, #16]
 80210ce:	693a      	ldr	r2, [r7, #16]
 80210d0:	683b      	ldr	r3, [r7, #0]
 80210d2:	429a      	cmp	r2, r3
 80210d4:	d219      	bcs.n	802110a <_ZN5Flash11StoreUint16EmPtm+0x52>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++);
 80210d6:	687b      	ldr	r3, [r7, #4]
 80210d8:	1c9a      	adds	r2, r3, #2
 80210da:	607a      	str	r2, [r7, #4]
 80210dc:	881b      	ldrh	r3, [r3, #0]
 80210de:	b29b      	uxth	r3, r3
 80210e0:	f04f 0400 	mov.w	r4, #0
 80210e4:	461a      	mov	r2, r3
 80210e6:	4623      	mov	r3, r4
 80210e8:	68b9      	ldr	r1, [r7, #8]
 80210ea:	2001      	movs	r0, #1
 80210ec:	f006 ff78 	bl	8027fe0 <HAL_FLASH_Program>
 80210f0:	4603      	mov	r3, r0
 80210f2:	75fb      	strb	r3, [r7, #23]
        address += 2;
 80210f4:	68bb      	ldr	r3, [r7, #8]
 80210f6:	3302      	adds	r3, #2
 80210f8:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 80210fa:	7dfb      	ldrb	r3, [r7, #23]
 80210fc:	2b00      	cmp	r3, #0
 80210fe:	d103      	bne.n	8021108 <_ZN5Flash11StoreUint16EmPtm+0x50>
    for(uint32_t i = 0; i < number; i++)
 8021100:	693b      	ldr	r3, [r7, #16]
 8021102:	3301      	adds	r3, #1
 8021104:	613b      	str	r3, [r7, #16]
 8021106:	e7e2      	b.n	80210ce <_ZN5Flash11StoreUint16EmPtm+0x16>
        if(result != HAL_OK) break;
 8021108:	bf00      	nop
    }

    HAL_FLASH_Lock();
 802110a:	f006 ffdf 	bl	80280cc <HAL_FLASH_Lock>

    return result == HAL_OK;
 802110e:	7dfb      	ldrb	r3, [r7, #23]
 8021110:	2b00      	cmp	r3, #0
 8021112:	bf0c      	ite	eq
 8021114:	2301      	moveq	r3, #1
 8021116:	2300      	movne	r3, #0
 8021118:	b2db      	uxtb	r3, r3
}
 802111a:	4618      	mov	r0, r3
 802111c:	371c      	adds	r7, #28
 802111e:	46bd      	mov	sp, r7
 8021120:	bd90      	pop	{r4, r7, pc}

08021122 <_ZN5Flash10StoreFloatEmPfm>:

    return result == HAL_OK;
}

bool Flash::StoreFloat(uint32_t address, float *data, uint32_t number)
{
 8021122:	b590      	push	{r4, r7, lr}
 8021124:	b087      	sub	sp, #28
 8021126:	af00      	add	r7, sp, #0
 8021128:	60f8      	str	r0, [r7, #12]
 802112a:	60b9      	str	r1, [r7, #8]
 802112c:	607a      	str	r2, [r7, #4]
 802112e:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021130:	f006 ffaa 	bl	8028088 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8021134:	2300      	movs	r3, #0
 8021136:	613b      	str	r3, [r7, #16]
 8021138:	693a      	ldr	r2, [r7, #16]
 802113a:	683b      	ldr	r3, [r7, #0]
 802113c:	429a      	cmp	r2, r3
 802113e:	d21b      	bcs.n	8021178 <_ZN5Flash10StoreFloatEmPfm+0x56>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *data++);
 8021140:	687b      	ldr	r3, [r7, #4]
 8021142:	1d1a      	adds	r2, r3, #4
 8021144:	607a      	str	r2, [r7, #4]
 8021146:	681b      	ldr	r3, [r3, #0]
 8021148:	4618      	mov	r0, r3
 802114a:	f7ff fc87 	bl	8020a5c <__aeabi_f2ulz>
 802114e:	4603      	mov	r3, r0
 8021150:	460c      	mov	r4, r1
 8021152:	461a      	mov	r2, r3
 8021154:	4623      	mov	r3, r4
 8021156:	68b9      	ldr	r1, [r7, #8]
 8021158:	2002      	movs	r0, #2
 802115a:	f006 ff41 	bl	8027fe0 <HAL_FLASH_Program>
 802115e:	4603      	mov	r3, r0
 8021160:	75fb      	strb	r3, [r7, #23]
        address += 4;
 8021162:	68bb      	ldr	r3, [r7, #8]
 8021164:	3304      	adds	r3, #4
 8021166:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 8021168:	7dfb      	ldrb	r3, [r7, #23]
 802116a:	2b00      	cmp	r3, #0
 802116c:	d103      	bne.n	8021176 <_ZN5Flash10StoreFloatEmPfm+0x54>
    for(uint32_t i = 0; i < number; i++)
 802116e:	693b      	ldr	r3, [r7, #16]
 8021170:	3301      	adds	r3, #1
 8021172:	613b      	str	r3, [r7, #16]
 8021174:	e7e0      	b.n	8021138 <_ZN5Flash10StoreFloatEmPfm+0x16>
        if(result != HAL_OK) break;
 8021176:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8021178:	f006 ffa8 	bl	80280cc <HAL_FLASH_Lock>

    return result == HAL_OK;
 802117c:	7dfb      	ldrb	r3, [r7, #23]
 802117e:	2b00      	cmp	r3, #0
 8021180:	bf0c      	ite	eq
 8021182:	2301      	moveq	r3, #1
 8021184:	2300      	movne	r3, #0
 8021186:	b2db      	uxtb	r3, r3
}
 8021188:	4618      	mov	r0, r3
 802118a:	371c      	adds	r7, #28
 802118c:	46bd      	mov	sp, r7
 802118e:	bd90      	pop	{r4, r7, pc}

08021190 <_ZN5Flash4LoadEPvmm>:

void Flash::Load(void *data, uint32_t address, uint32_t size)
{
 8021190:	b580      	push	{r7, lr}
 8021192:	b084      	sub	sp, #16
 8021194:	af00      	add	r7, sp, #0
 8021196:	60f8      	str	r0, [r7, #12]
 8021198:	60b9      	str	r1, [r7, #8]
 802119a:	607a      	str	r2, [r7, #4]
 802119c:	603b      	str	r3, [r7, #0]
    memcpy(data, reinterpret_cast<uint32_t*>(address), size);
 802119e:	687b      	ldr	r3, [r7, #4]
 80211a0:	683a      	ldr	r2, [r7, #0]
 80211a2:	4619      	mov	r1, r3
 80211a4:	68b8      	ldr	r0, [r7, #8]
 80211a6:	f009 fecd 	bl	802af44 <memcpy>
}
 80211aa:	bf00      	nop
 80211ac:	3710      	adds	r7, #16
 80211ae:	46bd      	mov	sp, r7
 80211b0:	bd80      	pop	{r7, pc}

080211b2 <_ZN5Flash14CheckBlankByteEmm>:

bool Flash::CheckBlankByte(uint32_t address, uint32_t number)
{
 80211b2:	b5b0      	push	{r4, r5, r7, lr}
 80211b4:	b088      	sub	sp, #32
 80211b6:	af00      	add	r7, sp, #0
 80211b8:	60f8      	str	r0, [r7, #12]
 80211ba:	60b9      	str	r1, [r7, #8]
 80211bc:	607a      	str	r2, [r7, #4]

    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);

    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;

    return true;
 80211be:	466b      	mov	r3, sp
 80211c0:	461d      	mov	r5, r3
    uint8_t byte[number];
 80211c2:	687b      	ldr	r3, [r7, #4]
 80211c4:	1e58      	subs	r0, r3, #1
 80211c6:	61b8      	str	r0, [r7, #24]
 80211c8:	4603      	mov	r3, r0
 80211ca:	3301      	adds	r3, #1
 80211cc:	4619      	mov	r1, r3
 80211ce:	f04f 0200 	mov.w	r2, #0
 80211d2:	f04f 0300 	mov.w	r3, #0
 80211d6:	f04f 0400 	mov.w	r4, #0
 80211da:	00d4      	lsls	r4, r2, #3
 80211dc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80211e0:	00cb      	lsls	r3, r1, #3
 80211e2:	4603      	mov	r3, r0
 80211e4:	3301      	adds	r3, #1
 80211e6:	4619      	mov	r1, r3
 80211e8:	f04f 0200 	mov.w	r2, #0
 80211ec:	f04f 0300 	mov.w	r3, #0
 80211f0:	f04f 0400 	mov.w	r4, #0
 80211f4:	00d4      	lsls	r4, r2, #3
 80211f6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80211fa:	00cb      	lsls	r3, r1, #3
 80211fc:	4603      	mov	r3, r0
 80211fe:	3301      	adds	r3, #1
 8021200:	3307      	adds	r3, #7
 8021202:	08db      	lsrs	r3, r3, #3
 8021204:	00db      	lsls	r3, r3, #3
 8021206:	ebad 0d03 	sub.w	sp, sp, r3
 802120a:	466b      	mov	r3, sp
 802120c:	3300      	adds	r3, #0
 802120e:	617b      	str	r3, [r7, #20]
    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);
 8021210:	697b      	ldr	r3, [r7, #20]
 8021212:	68b9      	ldr	r1, [r7, #8]
 8021214:	687a      	ldr	r2, [r7, #4]
 8021216:	4618      	mov	r0, r3
 8021218:	f009 fe94 	bl	802af44 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;
 802121c:	2300      	movs	r3, #0
 802121e:	61fb      	str	r3, [r7, #28]
 8021220:	69fa      	ldr	r2, [r7, #28]
 8021222:	687b      	ldr	r3, [r7, #4]
 8021224:	429a      	cmp	r2, r3
 8021226:	d20b      	bcs.n	8021240 <_ZN5Flash14CheckBlankByteEmm+0x8e>
 8021228:	697a      	ldr	r2, [r7, #20]
 802122a:	69fb      	ldr	r3, [r7, #28]
 802122c:	4413      	add	r3, r2
 802122e:	781b      	ldrb	r3, [r3, #0]
 8021230:	2bff      	cmp	r3, #255	; 0xff
 8021232:	d001      	beq.n	8021238 <_ZN5Flash14CheckBlankByteEmm+0x86>
 8021234:	2300      	movs	r3, #0
 8021236:	e004      	b.n	8021242 <_ZN5Flash14CheckBlankByteEmm+0x90>
 8021238:	69fb      	ldr	r3, [r7, #28]
 802123a:	3301      	adds	r3, #1
 802123c:	61fb      	str	r3, [r7, #28]
 802123e:	e7ef      	b.n	8021220 <_ZN5Flash14CheckBlankByteEmm+0x6e>
    return true;
 8021240:	2301      	movs	r3, #1
 8021242:	46ad      	mov	sp, r5
}
 8021244:	4618      	mov	r0, r3
 8021246:	3720      	adds	r7, #32
 8021248:	46bd      	mov	sp, r7
 802124a:	bdb0      	pop	{r4, r5, r7, pc}

0802124c <_ZN5Flash18CheckBlankHalfwordEmm>:

bool Flash::CheckBlankHalfword(uint32_t address, uint32_t number)
{
 802124c:	b5b0      	push	{r4, r5, r7, lr}
 802124e:	b088      	sub	sp, #32
 8021250:	af00      	add	r7, sp, #0
 8021252:	60f8      	str	r0, [r7, #12]
 8021254:	60b9      	str	r1, [r7, #8]
 8021256:	607a      	str	r2, [r7, #4]

    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);

    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;

    return true;
 8021258:	466b      	mov	r3, sp
 802125a:	461d      	mov	r5, r3
    uint16_t half[number];
 802125c:	687b      	ldr	r3, [r7, #4]
 802125e:	1e58      	subs	r0, r3, #1
 8021260:	61b8      	str	r0, [r7, #24]
 8021262:	4603      	mov	r3, r0
 8021264:	3301      	adds	r3, #1
 8021266:	4619      	mov	r1, r3
 8021268:	f04f 0200 	mov.w	r2, #0
 802126c:	f04f 0300 	mov.w	r3, #0
 8021270:	f04f 0400 	mov.w	r4, #0
 8021274:	0114      	lsls	r4, r2, #4
 8021276:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 802127a:	010b      	lsls	r3, r1, #4
 802127c:	4603      	mov	r3, r0
 802127e:	3301      	adds	r3, #1
 8021280:	4619      	mov	r1, r3
 8021282:	f04f 0200 	mov.w	r2, #0
 8021286:	f04f 0300 	mov.w	r3, #0
 802128a:	f04f 0400 	mov.w	r4, #0
 802128e:	0114      	lsls	r4, r2, #4
 8021290:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021294:	010b      	lsls	r3, r1, #4
 8021296:	4603      	mov	r3, r0
 8021298:	3301      	adds	r3, #1
 802129a:	005b      	lsls	r3, r3, #1
 802129c:	3301      	adds	r3, #1
 802129e:	3307      	adds	r3, #7
 80212a0:	08db      	lsrs	r3, r3, #3
 80212a2:	00db      	lsls	r3, r3, #3
 80212a4:	ebad 0d03 	sub.w	sp, sp, r3
 80212a8:	466b      	mov	r3, sp
 80212aa:	3301      	adds	r3, #1
 80212ac:	085b      	lsrs	r3, r3, #1
 80212ae:	005b      	lsls	r3, r3, #1
 80212b0:	617b      	str	r3, [r7, #20]
    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);
 80212b2:	6978      	ldr	r0, [r7, #20]
 80212b4:	68b9      	ldr	r1, [r7, #8]
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	005b      	lsls	r3, r3, #1
 80212ba:	461a      	mov	r2, r3
 80212bc:	f009 fe42 	bl	802af44 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;
 80212c0:	2300      	movs	r3, #0
 80212c2:	61fb      	str	r3, [r7, #28]
 80212c4:	69fa      	ldr	r2, [r7, #28]
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	429a      	cmp	r2, r3
 80212ca:	d20d      	bcs.n	80212e8 <_ZN5Flash18CheckBlankHalfwordEmm+0x9c>
 80212cc:	697b      	ldr	r3, [r7, #20]
 80212ce:	69fa      	ldr	r2, [r7, #28]
 80212d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80212d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80212d8:	4293      	cmp	r3, r2
 80212da:	d001      	beq.n	80212e0 <_ZN5Flash18CheckBlankHalfwordEmm+0x94>
 80212dc:	2300      	movs	r3, #0
 80212de:	e004      	b.n	80212ea <_ZN5Flash18CheckBlankHalfwordEmm+0x9e>
 80212e0:	69fb      	ldr	r3, [r7, #28]
 80212e2:	3301      	adds	r3, #1
 80212e4:	61fb      	str	r3, [r7, #28]
 80212e6:	e7ed      	b.n	80212c4 <_ZN5Flash18CheckBlankHalfwordEmm+0x78>
    return true;
 80212e8:	2301      	movs	r3, #1
 80212ea:	46ad      	mov	sp, r5
}
 80212ec:	4618      	mov	r0, r3
 80212ee:	3720      	adds	r7, #32
 80212f0:	46bd      	mov	sp, r7
 80212f2:	bdb0      	pop	{r4, r5, r7, pc}

080212f4 <_ZN5Flash14CheckBlankWordEmm>:

bool Flash::CheckBlankWord(uint32_t address, uint32_t number)
{
 80212f4:	b5b0      	push	{r4, r5, r7, lr}
 80212f6:	b088      	sub	sp, #32
 80212f8:	af00      	add	r7, sp, #0
 80212fa:	60f8      	str	r0, [r7, #12]
 80212fc:	60b9      	str	r1, [r7, #8]
 80212fe:	607a      	str	r2, [r7, #4]

    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);

    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;

    return true;
 8021300:	466b      	mov	r3, sp
 8021302:	461d      	mov	r5, r3
    uint32_t word[number];
 8021304:	687b      	ldr	r3, [r7, #4]
 8021306:	1e58      	subs	r0, r3, #1
 8021308:	61b8      	str	r0, [r7, #24]
 802130a:	4603      	mov	r3, r0
 802130c:	3301      	adds	r3, #1
 802130e:	4619      	mov	r1, r3
 8021310:	f04f 0200 	mov.w	r2, #0
 8021314:	f04f 0300 	mov.w	r3, #0
 8021318:	f04f 0400 	mov.w	r4, #0
 802131c:	0154      	lsls	r4, r2, #5
 802131e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8021322:	014b      	lsls	r3, r1, #5
 8021324:	4603      	mov	r3, r0
 8021326:	3301      	adds	r3, #1
 8021328:	4619      	mov	r1, r3
 802132a:	f04f 0200 	mov.w	r2, #0
 802132e:	f04f 0300 	mov.w	r3, #0
 8021332:	f04f 0400 	mov.w	r4, #0
 8021336:	0154      	lsls	r4, r2, #5
 8021338:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 802133c:	014b      	lsls	r3, r1, #5
 802133e:	4603      	mov	r3, r0
 8021340:	3301      	adds	r3, #1
 8021342:	009b      	lsls	r3, r3, #2
 8021344:	3303      	adds	r3, #3
 8021346:	3307      	adds	r3, #7
 8021348:	08db      	lsrs	r3, r3, #3
 802134a:	00db      	lsls	r3, r3, #3
 802134c:	ebad 0d03 	sub.w	sp, sp, r3
 8021350:	466b      	mov	r3, sp
 8021352:	3303      	adds	r3, #3
 8021354:	089b      	lsrs	r3, r3, #2
 8021356:	009b      	lsls	r3, r3, #2
 8021358:	617b      	str	r3, [r7, #20]
    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);
 802135a:	6978      	ldr	r0, [r7, #20]
 802135c:	68b9      	ldr	r1, [r7, #8]
 802135e:	687b      	ldr	r3, [r7, #4]
 8021360:	009b      	lsls	r3, r3, #2
 8021362:	461a      	mov	r2, r3
 8021364:	f009 fdee 	bl	802af44 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;
 8021368:	2300      	movs	r3, #0
 802136a:	61fb      	str	r3, [r7, #28]
 802136c:	69fa      	ldr	r2, [r7, #28]
 802136e:	687b      	ldr	r3, [r7, #4]
 8021370:	429a      	cmp	r2, r3
 8021372:	d20c      	bcs.n	802138e <_ZN5Flash14CheckBlankWordEmm+0x9a>
 8021374:	697b      	ldr	r3, [r7, #20]
 8021376:	69fa      	ldr	r2, [r7, #28]
 8021378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021380:	d001      	beq.n	8021386 <_ZN5Flash14CheckBlankWordEmm+0x92>
 8021382:	2300      	movs	r3, #0
 8021384:	e004      	b.n	8021390 <_ZN5Flash14CheckBlankWordEmm+0x9c>
 8021386:	69fb      	ldr	r3, [r7, #28]
 8021388:	3301      	adds	r3, #1
 802138a:	61fb      	str	r3, [r7, #28]
 802138c:	e7ee      	b.n	802136c <_ZN5Flash14CheckBlankWordEmm+0x78>
    return true;
 802138e:	2301      	movs	r3, #1
 8021390:	46ad      	mov	sp, r5
 8021392:	4618      	mov	r0, r3
 8021394:	3720      	adds	r7, #32
 8021396:	46bd      	mov	sp, r7
 8021398:	bdb0      	pop	{r4, r5, r7, pc}

0802139a <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"
#include "declare_extern.h"

Iim42652::Iim42652() : degree_stack_z_(0) {}
 802139a:	b490      	push	{r4, r7}
 802139c:	b082      	sub	sp, #8
 802139e:	af00      	add	r7, sp, #0
 80213a0:	6078      	str	r0, [r7, #4]
 80213a2:	687a      	ldr	r2, [r7, #4]
 80213a4:	f04f 0300 	mov.w	r3, #0
 80213a8:	f04f 0400 	mov.w	r4, #0
 80213ac:	e9c2 3400 	strd	r3, r4, [r2]
 80213b0:	687b      	ldr	r3, [r7, #4]
 80213b2:	4618      	mov	r0, r3
 80213b4:	3708      	adds	r7, #8
 80213b6:	46bd      	mov	sp, r7
 80213b8:	bc90      	pop	{r4, r7}
 80213ba:	4770      	bx	lr

080213bc <_ZN8Iim426524InitEv>:

uint8_t Iim42652::Init()
{
 80213bc:	b580      	push	{r7, lr}
 80213be:	b084      	sub	sp, #16
 80213c0:	af00      	add	r7, sp, #0
 80213c2:	6078      	str	r0, [r7, #4]
    /* bank_select */
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'L');
 80213c4:	234c      	movs	r3, #76	; 0x4c
 80213c6:	2200      	movs	r2, #0
 80213c8:	2176      	movs	r1, #118	; 0x76
 80213ca:	6878      	ldr	r0, [r7, #4]
 80213cc:	f000 f908 	bl	80215e0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80213d0:	2064      	movs	r0, #100	; 0x64
 80213d2:	f005 fd6f 	bl	8026eb4 <HAL_Delay>
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'R');
 80213d6:	2352      	movs	r3, #82	; 0x52
 80213d8:	2200      	movs	r2, #0
 80213da:	2176      	movs	r1, #118	; 0x76
 80213dc:	6878      	ldr	r0, [r7, #4]
 80213de:	f000 f8ff 	bl	80215e0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80213e2:	2064      	movs	r0, #100	; 0x64
 80213e4:	f005 fd66 	bl	8026eb4 <HAL_Delay>
    /* power_off */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'L');
 80213e8:	234c      	movs	r3, #76	; 0x4c
 80213ea:	2200      	movs	r2, #0
 80213ec:	214e      	movs	r1, #78	; 0x4e
 80213ee:	6878      	ldr	r0, [r7, #4]
 80213f0:	f000 f8f6 	bl	80215e0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80213f4:	2064      	movs	r0, #100	; 0x64
 80213f6:	f005 fd5d 	bl	8026eb4 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'R');
 80213fa:	2352      	movs	r3, #82	; 0x52
 80213fc:	2200      	movs	r2, #0
 80213fe:	214e      	movs	r1, #78	; 0x4e
 8021400:	6878      	ldr	r0, [r7, #4]
 8021402:	f000 f8ed 	bl	80215e0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021406:	2064      	movs	r0, #100	; 0x64
 8021408:	f005 fd54 	bl	8026eb4 <HAL_Delay>

    uint8_t who_l  = Read(WHO_AM_I_ADD, 'L');
 802140c:	224c      	movs	r2, #76	; 0x4c
 802140e:	2175      	movs	r1, #117	; 0x75
 8021410:	6878      	ldr	r0, [r7, #4]
 8021412:	f000 f897 	bl	8021544 <_ZN8Iim426524ReadEhc>
 8021416:	4603      	mov	r3, r0
 8021418:	73fb      	strb	r3, [r7, #15]
    uint8_t who_r  = Read(WHO_AM_I_ADD, 'R');
 802141a:	2252      	movs	r2, #82	; 0x52
 802141c:	2175      	movs	r1, #117	; 0x75
 802141e:	6878      	ldr	r0, [r7, #4]
 8021420:	f000 f890 	bl	8021544 <_ZN8Iim426524ReadEhc>
 8021424:	4603      	mov	r3, r0
 8021426:	73bb      	strb	r3, [r7, #14]
    uint8_t bank_l = Read(REG_BANK_SEL_ADD, 'L');
 8021428:	224c      	movs	r2, #76	; 0x4c
 802142a:	2176      	movs	r1, #118	; 0x76
 802142c:	6878      	ldr	r0, [r7, #4]
 802142e:	f000 f889 	bl	8021544 <_ZN8Iim426524ReadEhc>
 8021432:	4603      	mov	r3, r0
 8021434:	737b      	strb	r3, [r7, #13]
    uint8_t bank_r = Read(REG_BANK_SEL_ADD, 'R');
 8021436:	2252      	movs	r2, #82	; 0x52
 8021438:	2176      	movs	r1, #118	; 0x76
 802143a:	6878      	ldr	r0, [r7, #4]
 802143c:	f000 f882 	bl	8021544 <_ZN8Iim426524ReadEhc>
 8021440:	4603      	mov	r3, r0
 8021442:	733b      	strb	r3, [r7, #12]
    uint8_t pwr_l  = Read(PWR_MGMT0_ADD, 'L');
 8021444:	224c      	movs	r2, #76	; 0x4c
 8021446:	214e      	movs	r1, #78	; 0x4e
 8021448:	6878      	ldr	r0, [r7, #4]
 802144a:	f000 f87b 	bl	8021544 <_ZN8Iim426524ReadEhc>
 802144e:	4603      	mov	r3, r0
 8021450:	72fb      	strb	r3, [r7, #11]
    uint8_t pwr_r  = Read(PWR_MGMT0_ADD, 'R');
 8021452:	2252      	movs	r2, #82	; 0x52
 8021454:	214e      	movs	r1, #78	; 0x4e
 8021456:	6878      	ldr	r0, [r7, #4]
 8021458:	f000 f874 	bl	8021544 <_ZN8Iim426524ReadEhc>
 802145c:	4603      	mov	r3, r0
 802145e:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_who_l  = who_l;  g_imu_who_r  = who_r;
 8021460:	4a32      	ldr	r2, [pc, #200]	; (802152c <_ZN8Iim426524InitEv+0x170>)
 8021462:	7bfb      	ldrb	r3, [r7, #15]
 8021464:	7013      	strb	r3, [r2, #0]
 8021466:	4a32      	ldr	r2, [pc, #200]	; (8021530 <_ZN8Iim426524InitEv+0x174>)
 8021468:	7bbb      	ldrb	r3, [r7, #14]
 802146a:	7013      	strb	r3, [r2, #0]
    g_imu_bank_l = bank_l; g_imu_bank_r = bank_r;
 802146c:	4a31      	ldr	r2, [pc, #196]	; (8021534 <_ZN8Iim426524InitEv+0x178>)
 802146e:	7b7b      	ldrb	r3, [r7, #13]
 8021470:	7013      	strb	r3, [r2, #0]
 8021472:	4a31      	ldr	r2, [pc, #196]	; (8021538 <_ZN8Iim426524InitEv+0x17c>)
 8021474:	7b3b      	ldrb	r3, [r7, #12]
 8021476:	7013      	strb	r3, [r2, #0]
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 8021478:	4a30      	ldr	r2, [pc, #192]	; (802153c <_ZN8Iim426524InitEv+0x180>)
 802147a:	7afb      	ldrb	r3, [r7, #11]
 802147c:	7013      	strb	r3, [r2, #0]
 802147e:	4a30      	ldr	r2, [pc, #192]	; (8021540 <_ZN8Iim426524InitEv+0x184>)
 8021480:	7abb      	ldrb	r3, [r7, #10]
 8021482:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(who_l != WHO_AM_I_RES)      return 0x01;
 8021484:	7bfb      	ldrb	r3, [r7, #15]
 8021486:	2b6f      	cmp	r3, #111	; 0x6f
 8021488:	d001      	beq.n	802148e <_ZN8Iim426524InitEv+0xd2>
 802148a:	2301      	movs	r3, #1
 802148c:	e049      	b.n	8021522 <_ZN8Iim426524InitEv+0x166>
    if(who_r != WHO_AM_I_RES)      return 0x02;
 802148e:	7bbb      	ldrb	r3, [r7, #14]
 8021490:	2b6f      	cmp	r3, #111	; 0x6f
 8021492:	d001      	beq.n	8021498 <_ZN8Iim426524InitEv+0xdc>
 8021494:	2302      	movs	r3, #2
 8021496:	e044      	b.n	8021522 <_ZN8Iim426524InitEv+0x166>
    if(bank_l != REG_BANK_SEL_RES) return 0x03;
 8021498:	7b7b      	ldrb	r3, [r7, #13]
 802149a:	2b00      	cmp	r3, #0
 802149c:	d001      	beq.n	80214a2 <_ZN8Iim426524InitEv+0xe6>
 802149e:	2303      	movs	r3, #3
 80214a0:	e03f      	b.n	8021522 <_ZN8Iim426524InitEv+0x166>
    if(bank_r != REG_BANK_SEL_RES) return 0x04;
 80214a2:	7b3b      	ldrb	r3, [r7, #12]
 80214a4:	2b00      	cmp	r3, #0
 80214a6:	d001      	beq.n	80214ac <_ZN8Iim426524InitEv+0xf0>
 80214a8:	2304      	movs	r3, #4
 80214aa:	e03a      	b.n	8021522 <_ZN8Iim426524InitEv+0x166>
    if(pwr_l != PWR_MGMT0_RES)     return 0x05;
 80214ac:	7afb      	ldrb	r3, [r7, #11]
 80214ae:	2b00      	cmp	r3, #0
 80214b0:	d001      	beq.n	80214b6 <_ZN8Iim426524InitEv+0xfa>
 80214b2:	2305      	movs	r3, #5
 80214b4:	e035      	b.n	8021522 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_RES)     return 0x06;
 80214b6:	7abb      	ldrb	r3, [r7, #10]
 80214b8:	2b00      	cmp	r3, #0
 80214ba:	d001      	beq.n	80214c0 <_ZN8Iim426524InitEv+0x104>
 80214bc:	2306      	movs	r3, #6
 80214be:	e030      	b.n	8021522 <_ZN8Iim426524InitEv+0x166>

    /* power_on */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'L');
 80214c0:	234c      	movs	r3, #76	; 0x4c
 80214c2:	220f      	movs	r2, #15
 80214c4:	214e      	movs	r1, #78	; 0x4e
 80214c6:	6878      	ldr	r0, [r7, #4]
 80214c8:	f000 f88a 	bl	80215e0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80214cc:	2064      	movs	r0, #100	; 0x64
 80214ce:	f005 fcf1 	bl	8026eb4 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'R');
 80214d2:	2352      	movs	r3, #82	; 0x52
 80214d4:	220f      	movs	r2, #15
 80214d6:	214e      	movs	r1, #78	; 0x4e
 80214d8:	6878      	ldr	r0, [r7, #4]
 80214da:	f000 f881 	bl	80215e0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80214de:	2064      	movs	r0, #100	; 0x64
 80214e0:	f005 fce8 	bl	8026eb4 <HAL_Delay>
    pwr_l = Read(PWR_MGMT0_ADD, 'L');
 80214e4:	224c      	movs	r2, #76	; 0x4c
 80214e6:	214e      	movs	r1, #78	; 0x4e
 80214e8:	6878      	ldr	r0, [r7, #4]
 80214ea:	f000 f82b 	bl	8021544 <_ZN8Iim426524ReadEhc>
 80214ee:	4603      	mov	r3, r0
 80214f0:	72fb      	strb	r3, [r7, #11]
    pwr_r = Read(PWR_MGMT0_ADD, 'R');
 80214f2:	2252      	movs	r2, #82	; 0x52
 80214f4:	214e      	movs	r1, #78	; 0x4e
 80214f6:	6878      	ldr	r0, [r7, #4]
 80214f8:	f000 f824 	bl	8021544 <_ZN8Iim426524ReadEhc>
 80214fc:	4603      	mov	r3, r0
 80214fe:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 8021500:	4a0e      	ldr	r2, [pc, #56]	; (802153c <_ZN8Iim426524InitEv+0x180>)
 8021502:	7afb      	ldrb	r3, [r7, #11]
 8021504:	7013      	strb	r3, [r2, #0]
 8021506:	4a0e      	ldr	r2, [pc, #56]	; (8021540 <_ZN8Iim426524InitEv+0x184>)
 8021508:	7abb      	ldrb	r3, [r7, #10]
 802150a:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(pwr_l != PWR_MGMT0_ON) return 0x07;
 802150c:	7afb      	ldrb	r3, [r7, #11]
 802150e:	2b0f      	cmp	r3, #15
 8021510:	d001      	beq.n	8021516 <_ZN8Iim426524InitEv+0x15a>
 8021512:	2307      	movs	r3, #7
 8021514:	e005      	b.n	8021522 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_ON) return 0x08;
 8021516:	7abb      	ldrb	r3, [r7, #10]
 8021518:	2b0f      	cmp	r3, #15
 802151a:	d001      	beq.n	8021520 <_ZN8Iim426524InitEv+0x164>
 802151c:	2308      	movs	r3, #8
 802151e:	e000      	b.n	8021522 <_ZN8Iim426524InitEv+0x166>

    return 0x09;
 8021520:	2309      	movs	r3, #9
}
 8021522:	4618      	mov	r0, r3
 8021524:	3710      	adds	r7, #16
 8021526:	46bd      	mov	sp, r7
 8021528:	bd80      	pop	{r7, pc}
 802152a:	bf00      	nop
 802152c:	200002d1 	.word	0x200002d1
 8021530:	200002d2 	.word	0x200002d2
 8021534:	200002d3 	.word	0x200002d3
 8021538:	200002d4 	.word	0x200002d4
 802153c:	200002d5 	.word	0x200002d5
 8021540:	200002d6 	.word	0x200002d6

08021544 <_ZN8Iim426524ReadEhc>:

uint8_t Iim42652::Read(uint8_t send_address, char imu_ic_lr)
{
 8021544:	b580      	push	{r7, lr}
 8021546:	b084      	sub	sp, #16
 8021548:	af00      	add	r7, sp, #0
 802154a:	6078      	str	r0, [r7, #4]
 802154c:	460b      	mov	r3, r1
 802154e:	70fb      	strb	r3, [r7, #3]
 8021550:	4613      	mov	r3, r2
 8021552:	70bb      	strb	r3, [r7, #2]
    uint8_t receive_reset_value = 0x00;
 8021554:	2300      	movs	r3, #0
 8021556:	73fb      	strb	r3, [r7, #15]

    send_address = send_address | 0x80; // Read 1--- ----
 8021558:	78fb      	ldrb	r3, [r7, #3]
 802155a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802155e:	b2db      	uxtb	r3, r3
 8021560:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 8021562:	78bb      	ldrb	r3, [r7, #2]
 8021564:	2b4c      	cmp	r3, #76	; 0x4c
 8021566:	d106      	bne.n	8021576 <_ZN8Iim426524ReadEhc+0x32>
 8021568:	2200      	movs	r2, #0
 802156a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802156e:	4819      	ldr	r0, [pc, #100]	; (80215d4 <_ZN8Iim426524ReadEhc+0x90>)
 8021570:	f007 f9be 	bl	80288f0 <HAL_GPIO_WritePin>
 8021574:	e008      	b.n	8021588 <_ZN8Iim426524ReadEhc+0x44>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 8021576:	78bb      	ldrb	r3, [r7, #2]
 8021578:	2b52      	cmp	r3, #82	; 0x52
 802157a:	d105      	bne.n	8021588 <_ZN8Iim426524ReadEhc+0x44>
 802157c:	2200      	movs	r2, #0
 802157e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021582:	4815      	ldr	r0, [pc, #84]	; (80215d8 <_ZN8Iim426524ReadEhc+0x94>)
 8021584:	f007 f9b4 	bl	80288f0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 8021588:	1cf9      	adds	r1, r7, #3
 802158a:	2364      	movs	r3, #100	; 0x64
 802158c:	2201      	movs	r2, #1
 802158e:	4813      	ldr	r0, [pc, #76]	; (80215dc <_ZN8Iim426524ReadEhc+0x98>)
 8021590:	f007 ff8c 	bl	80294ac <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &receive_reset_value, 1, 100);
 8021594:	f107 010f 	add.w	r1, r7, #15
 8021598:	2364      	movs	r3, #100	; 0x64
 802159a:	2201      	movs	r2, #1
 802159c:	480f      	ldr	r0, [pc, #60]	; (80215dc <_ZN8Iim426524ReadEhc+0x98>)
 802159e:	f008 f8b9 	bl	8029714 <HAL_SPI_Receive>

    if(imu_ic_lr == 'L') CS_SET_L;
 80215a2:	78bb      	ldrb	r3, [r7, #2]
 80215a4:	2b4c      	cmp	r3, #76	; 0x4c
 80215a6:	d106      	bne.n	80215b6 <_ZN8Iim426524ReadEhc+0x72>
 80215a8:	2201      	movs	r2, #1
 80215aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80215ae:	4809      	ldr	r0, [pc, #36]	; (80215d4 <_ZN8Iim426524ReadEhc+0x90>)
 80215b0:	f007 f99e 	bl	80288f0 <HAL_GPIO_WritePin>
 80215b4:	e008      	b.n	80215c8 <_ZN8Iim426524ReadEhc+0x84>
    else if(imu_ic_lr == 'R') CS_SET_R;
 80215b6:	78bb      	ldrb	r3, [r7, #2]
 80215b8:	2b52      	cmp	r3, #82	; 0x52
 80215ba:	d105      	bne.n	80215c8 <_ZN8Iim426524ReadEhc+0x84>
 80215bc:	2201      	movs	r2, #1
 80215be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80215c2:	4805      	ldr	r0, [pc, #20]	; (80215d8 <_ZN8Iim426524ReadEhc+0x94>)
 80215c4:	f007 f994 	bl	80288f0 <HAL_GPIO_WritePin>
    
    return receive_reset_value;
 80215c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80215ca:	4618      	mov	r0, r3
 80215cc:	3710      	adds	r7, #16
 80215ce:	46bd      	mov	sp, r7
 80215d0:	bd80      	pop	{r7, pc}
 80215d2:	bf00      	nop
 80215d4:	40020400 	.word	0x40020400
 80215d8:	40020000 	.word	0x40020000
 80215dc:	20011274 	.word	0x20011274

080215e0 <_ZN8Iim426525WriteEhhc>:

void Iim42652::Write(uint8_t send_address, uint8_t send_data, char imu_ic_lr)
{
 80215e0:	b580      	push	{r7, lr}
 80215e2:	b082      	sub	sp, #8
 80215e4:	af00      	add	r7, sp, #0
 80215e6:	6078      	str	r0, [r7, #4]
 80215e8:	4608      	mov	r0, r1
 80215ea:	4611      	mov	r1, r2
 80215ec:	461a      	mov	r2, r3
 80215ee:	4603      	mov	r3, r0
 80215f0:	70fb      	strb	r3, [r7, #3]
 80215f2:	460b      	mov	r3, r1
 80215f4:	70bb      	strb	r3, [r7, #2]
 80215f6:	4613      	mov	r3, r2
 80215f8:	707b      	strb	r3, [r7, #1]
    send_address = send_address & 0x7F; // Write 0--- ----
 80215fa:	78fb      	ldrb	r3, [r7, #3]
 80215fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021600:	b2db      	uxtb	r3, r3
 8021602:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 8021604:	787b      	ldrb	r3, [r7, #1]
 8021606:	2b4c      	cmp	r3, #76	; 0x4c
 8021608:	d106      	bne.n	8021618 <_ZN8Iim426525WriteEhhc+0x38>
 802160a:	2200      	movs	r2, #0
 802160c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8021610:	4817      	ldr	r0, [pc, #92]	; (8021670 <_ZN8Iim426525WriteEhhc+0x90>)
 8021612:	f007 f96d 	bl	80288f0 <HAL_GPIO_WritePin>
 8021616:	e008      	b.n	802162a <_ZN8Iim426525WriteEhhc+0x4a>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 8021618:	787b      	ldrb	r3, [r7, #1]
 802161a:	2b52      	cmp	r3, #82	; 0x52
 802161c:	d105      	bne.n	802162a <_ZN8Iim426525WriteEhhc+0x4a>
 802161e:	2200      	movs	r2, #0
 8021620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021624:	4813      	ldr	r0, [pc, #76]	; (8021674 <_ZN8Iim426525WriteEhhc+0x94>)
 8021626:	f007 f963 	bl	80288f0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 802162a:	1cf9      	adds	r1, r7, #3
 802162c:	2364      	movs	r3, #100	; 0x64
 802162e:	2201      	movs	r2, #1
 8021630:	4811      	ldr	r0, [pc, #68]	; (8021678 <_ZN8Iim426525WriteEhhc+0x98>)
 8021632:	f007 ff3b 	bl	80294ac <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &send_data, 1, 100);
 8021636:	1cb9      	adds	r1, r7, #2
 8021638:	2364      	movs	r3, #100	; 0x64
 802163a:	2201      	movs	r2, #1
 802163c:	480e      	ldr	r0, [pc, #56]	; (8021678 <_ZN8Iim426525WriteEhhc+0x98>)
 802163e:	f007 ff35 	bl	80294ac <HAL_SPI_Transmit>

    if(imu_ic_lr == 'L') CS_SET_L;
 8021642:	787b      	ldrb	r3, [r7, #1]
 8021644:	2b4c      	cmp	r3, #76	; 0x4c
 8021646:	d106      	bne.n	8021656 <_ZN8Iim426525WriteEhhc+0x76>
 8021648:	2201      	movs	r2, #1
 802164a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802164e:	4808      	ldr	r0, [pc, #32]	; (8021670 <_ZN8Iim426525WriteEhhc+0x90>)
 8021650:	f007 f94e 	bl	80288f0 <HAL_GPIO_WritePin>
    else if(imu_ic_lr == 'R') CS_SET_R;
}
 8021654:	e008      	b.n	8021668 <_ZN8Iim426525WriteEhhc+0x88>
    else if(imu_ic_lr == 'R') CS_SET_R;
 8021656:	787b      	ldrb	r3, [r7, #1]
 8021658:	2b52      	cmp	r3, #82	; 0x52
 802165a:	d105      	bne.n	8021668 <_ZN8Iim426525WriteEhhc+0x88>
 802165c:	2201      	movs	r2, #1
 802165e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021662:	4804      	ldr	r0, [pc, #16]	; (8021674 <_ZN8Iim426525WriteEhhc+0x94>)
 8021664:	f007 f944 	bl	80288f0 <HAL_GPIO_WritePin>
}
 8021668:	bf00      	nop
 802166a:	3708      	adds	r7, #8
 802166c:	46bd      	mov	sp, r7
 802166e:	bd80      	pop	{r7, pc}
 8021670:	40020400 	.word	0x40020400
 8021674:	40020000 	.word	0x40020000
 8021678:	20011274 	.word	0x20011274

0802167c <_ZN8Iim426529Read2ByteEhhc>:

    return CheckRead(send_address, send_data, imu_ic_lr);
}

int16_t Iim42652::Read2Byte(uint8_t upper_address, uint8_t lower_address, char imu_ic_lr)
{
 802167c:	b580      	push	{r7, lr}
 802167e:	b084      	sub	sp, #16
 8021680:	af00      	add	r7, sp, #0
 8021682:	6078      	str	r0, [r7, #4]
 8021684:	4608      	mov	r0, r1
 8021686:	4611      	mov	r1, r2
 8021688:	461a      	mov	r2, r3
 802168a:	4603      	mov	r3, r0
 802168c:	70fb      	strb	r3, [r7, #3]
 802168e:	460b      	mov	r3, r1
 8021690:	70bb      	strb	r3, [r7, #2]
 8021692:	4613      	mov	r3, r2
 8021694:	707b      	strb	r3, [r7, #1]
    int16_t upper_receive, lower_receive;

    upper_receive = static_cast<int16_t>(Read(upper_address, imu_ic_lr));
 8021696:	787a      	ldrb	r2, [r7, #1]
 8021698:	78fb      	ldrb	r3, [r7, #3]
 802169a:	4619      	mov	r1, r3
 802169c:	6878      	ldr	r0, [r7, #4]
 802169e:	f7ff ff51 	bl	8021544 <_ZN8Iim426524ReadEhc>
 80216a2:	4603      	mov	r3, r0
 80216a4:	81fb      	strh	r3, [r7, #14]
    lower_receive = static_cast<int16_t>(Read(lower_address, imu_ic_lr));
 80216a6:	787a      	ldrb	r2, [r7, #1]
 80216a8:	78bb      	ldrb	r3, [r7, #2]
 80216aa:	4619      	mov	r1, r3
 80216ac:	6878      	ldr	r0, [r7, #4]
 80216ae:	f7ff ff49 	bl	8021544 <_ZN8Iim426524ReadEhc>
 80216b2:	4603      	mov	r3, r0
 80216b4:	81bb      	strh	r3, [r7, #12]

    return (upper_receive << 8) | lower_receive;
 80216b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80216ba:	021b      	lsls	r3, r3, #8
 80216bc:	b21a      	sxth	r2, r3
 80216be:	89bb      	ldrh	r3, [r7, #12]
 80216c0:	4313      	orrs	r3, r2
 80216c2:	b21b      	sxth	r3, r3
}
 80216c4:	4618      	mov	r0, r3
 80216c6:	3710      	adds	r7, #16
 80216c8:	46bd      	mov	sp, r7
 80216ca:	bd80      	pop	{r7, pc}
 80216cc:	0000      	movs	r0, r0
	...

080216d0 <_ZN8Iim426526UpdateEv>:

void Iim42652::Update()
{
 80216d0:	b590      	push	{r4, r7, lr}
 80216d2:	b089      	sub	sp, #36	; 0x24
 80216d4:	af00      	add	r7, sp, #0
 80216d6:	6078      	str	r0, [r7, #4]
    int16_t raw_z_l = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
 80216d8:	234c      	movs	r3, #76	; 0x4c
 80216da:	222a      	movs	r2, #42	; 0x2a
 80216dc:	2129      	movs	r1, #41	; 0x29
 80216de:	6878      	ldr	r0, [r7, #4]
 80216e0:	f7ff ffcc 	bl	802167c <_ZN8Iim426529Read2ByteEhhc>
 80216e4:	4603      	mov	r3, r0
 80216e6:	83fb      	strh	r3, [r7, #30]
    int16_t raw_z_r = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 80216e8:	2352      	movs	r3, #82	; 0x52
 80216ea:	222a      	movs	r2, #42	; 0x2a
 80216ec:	2129      	movs	r1, #41	; 0x29
 80216ee:	6878      	ldr	r0, [r7, #4]
 80216f0:	f7ff ffc4 	bl	802167c <_ZN8Iim426529Read2ByteEhhc>
 80216f4:	4603      	mov	r3, r0
 80216f6:	83bb      	strh	r3, [r7, #28]
    double avg_raw_z = static_cast<double>(raw_z_l + raw_z_r) / 2.0;
 80216f8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80216fc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8021700:	4413      	add	r3, r2
 8021702:	4618      	mov	r0, r3
 8021704:	f7fe fe3e 	bl	8020384 <__aeabi_i2d>
 8021708:	f04f 0200 	mov.w	r2, #0
 802170c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021710:	f7fe ffcc 	bl	80206ac <__aeabi_ddiv>
 8021714:	4603      	mov	r3, r0
 8021716:	460c      	mov	r4, r1
 8021718:	e9c7 3404 	strd	r3, r4, [r7, #16]
    double degree_z = avg_raw_z * NORMAL_FUCOR_DPS * TIM6_PERIOD;
 802171c:	a316      	add	r3, pc, #88	; (adr r3, 8021778 <_ZN8Iim426526UpdateEv+0xa8>)
 802171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021722:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8021726:	f7fe fe97 	bl	8020458 <__aeabi_dmul>
 802172a:	4603      	mov	r3, r0
 802172c:	460c      	mov	r4, r1
 802172e:	4618      	mov	r0, r3
 8021730:	4621      	mov	r1, r4
 8021732:	f04f 0200 	mov.w	r2, #0
 8021736:	4b0e      	ldr	r3, [pc, #56]	; (8021770 <_ZN8Iim426526UpdateEv+0xa0>)
 8021738:	f7fe fe8e 	bl	8020458 <__aeabi_dmul>
 802173c:	4603      	mov	r3, r0
 802173e:	460c      	mov	r4, r1
 8021740:	e9c7 3402 	strd	r3, r4, [r7, #8]

    degree_stack_z_ += degree_z;
 8021744:	687b      	ldr	r3, [r7, #4]
 8021746:	e9d3 0100 	ldrd	r0, r1, [r3]
 802174a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802174e:	f7fe fccd 	bl	80200ec <__adddf3>
 8021752:	4603      	mov	r3, r0
 8021754:	460c      	mov	r4, r1
 8021756:	687a      	ldr	r2, [r7, #4]
 8021758:	e9c2 3400 	strd	r3, r4, [r2]

#ifdef DEBUG_MODE
    g_deg_z = degree_z;
 802175c:	4a05      	ldr	r2, [pc, #20]	; (8021774 <_ZN8Iim426526UpdateEv+0xa4>)
 802175e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8021762:	e9c2 3400 	strd	r3, r4, [r2]
#endif // DEBUG_MODE
}
 8021766:	bf00      	nop
 8021768:	3724      	adds	r7, #36	; 0x24
 802176a:	46bd      	mov	sp, r7
 802176c:	bd90      	pop	{r4, r7, pc}
 802176e:	bf00      	nop
 8021770:	3ff40000 	.word	0x3ff40000
 8021774:	200002d8 	.word	0x200002d8
 8021778:	ddb1209f 	.word	0xddb1209f
 802177c:	3faf403d 	.word	0x3faf403d

08021780 <_ZN8Iim4265217ResetDegreeStackZEv>:

void Iim42652::ResetDegreeStackZ()
{
 8021780:	b490      	push	{r4, r7}
 8021782:	b082      	sub	sp, #8
 8021784:	af00      	add	r7, sp, #0
 8021786:	6078      	str	r0, [r7, #4]
    degree_stack_z_ = 0.0;
 8021788:	687a      	ldr	r2, [r7, #4]
 802178a:	f04f 0300 	mov.w	r3, #0
 802178e:	f04f 0400 	mov.w	r4, #0
 8021792:	e9c2 3400 	strd	r3, r4, [r2]
}
 8021796:	bf00      	nop
 8021798:	3708      	adds	r7, #8
 802179a:	46bd      	mov	sp, r7
 802179c:	bc90      	pop	{r4, r7}
 802179e:	4770      	bx	lr

080217a0 <_ZN8Iim4265215GetDegreeStackZEv>:

double Iim42652::GetDegreeStackZ()
{
 80217a0:	b490      	push	{r4, r7}
 80217a2:	b082      	sub	sp, #8
 80217a4:	af00      	add	r7, sp, #0
 80217a6:	6078      	str	r0, [r7, #4]
    return degree_stack_z_;
 80217a8:	687b      	ldr	r3, [r7, #4]
 80217aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80217ae:	ec44 3b17 	vmov	d7, r3, r4
}
 80217b2:	eeb0 0a47 	vmov.f32	s0, s14
 80217b6:	eef0 0a67 	vmov.f32	s1, s15
 80217ba:	3708      	adds	r7, #8
 80217bc:	46bd      	mov	sp, r7
 80217be:	bc90      	pop	{r4, r7}
 80217c0:	4770      	bx	lr

080217c2 <_ZN3LedC1Ev>:
#include "led.hpp"

Led::Led() : interrupt_count_(0)
 80217c2:	b480      	push	{r7}
 80217c4:	b083      	sub	sp, #12
 80217c6:	af00      	add	r7, sp, #0
 80217c8:	6078      	str	r0, [r7, #4]
           , interrupt_timer_(0) {}
 80217ca:	687b      	ldr	r3, [r7, #4]
 80217cc:	2200      	movs	r2, #0
 80217ce:	701a      	strb	r2, [r3, #0]
 80217d0:	687b      	ldr	r3, [r7, #4]
 80217d2:	2200      	movs	r2, #0
 80217d4:	705a      	strb	r2, [r3, #1]
 80217d6:	687b      	ldr	r3, [r7, #4]
 80217d8:	4618      	mov	r0, r3
 80217da:	370c      	adds	r7, #12
 80217dc:	46bd      	mov	sp, r7
 80217de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217e2:	4770      	bx	lr

080217e4 <_ZN3Led10ColorOrderEc>:

void Led::ColorOrder(char color)
{
 80217e4:	b580      	push	{r7, lr}
 80217e6:	b082      	sub	sp, #8
 80217e8:	af00      	add	r7, sp, #0
 80217ea:	6078      	str	r0, [r7, #4]
 80217ec:	460b      	mov	r3, r1
 80217ee:	70fb      	strb	r3, [r7, #3]
    switch(color)
 80217f0:	78fb      	ldrb	r3, [r7, #3]
 80217f2:	3b42      	subs	r3, #66	; 0x42
 80217f4:	2b17      	cmp	r3, #23
 80217f6:	f200 80b8 	bhi.w	802196a <_ZN3Led10ColorOrderEc+0x186>
 80217fa:	a201      	add	r2, pc, #4	; (adr r2, 8021800 <_ZN3Led10ColorOrderEc+0x1c>)
 80217fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021800:	080218ad 	.word	0x080218ad
 8021804:	080218f9 	.word	0x080218f9
 8021808:	0802196b 	.word	0x0802196b
 802180c:	0802196b 	.word	0x0802196b
 8021810:	0802196b 	.word	0x0802196b
 8021814:	08021887 	.word	0x08021887
 8021818:	0802196b 	.word	0x0802196b
 802181c:	0802196b 	.word	0x0802196b
 8021820:	0802196b 	.word	0x0802196b
 8021824:	0802196b 	.word	0x0802196b
 8021828:	0802196b 	.word	0x0802196b
 802182c:	0802191f 	.word	0x0802191f
 8021830:	0802196b 	.word	0x0802196b
 8021834:	0802196b 	.word	0x0802196b
 8021838:	0802196b 	.word	0x0802196b
 802183c:	0802196b 	.word	0x0802196b
 8021840:	08021861 	.word	0x08021861
 8021844:	0802196b 	.word	0x0802196b
 8021848:	0802196b 	.word	0x0802196b
 802184c:	0802196b 	.word	0x0802196b
 8021850:	0802196b 	.word	0x0802196b
 8021854:	08021945 	.word	0x08021945
 8021858:	0802196b 	.word	0x0802196b
 802185c:	080218d3 	.word	0x080218d3
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 8021860:	2200      	movs	r2, #0
 8021862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021866:	484c      	ldr	r0, [pc, #304]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021868:	f007 f842 	bl	80288f0 <HAL_GPIO_WritePin>
 802186c:	2201      	movs	r2, #1
 802186e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021872:	4849      	ldr	r0, [pc, #292]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021874:	f007 f83c 	bl	80288f0 <HAL_GPIO_WritePin>
 8021878:	2201      	movs	r2, #1
 802187a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802187e:	4846      	ldr	r0, [pc, #280]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021880:	f007 f836 	bl	80288f0 <HAL_GPIO_WritePin>
 8021884:	e084      	b.n	8021990 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 8021886:	2201      	movs	r2, #1
 8021888:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802188c:	4842      	ldr	r0, [pc, #264]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 802188e:	f007 f82f 	bl	80288f0 <HAL_GPIO_WritePin>
 8021892:	2200      	movs	r2, #0
 8021894:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021898:	483f      	ldr	r0, [pc, #252]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 802189a:	f007 f829 	bl	80288f0 <HAL_GPIO_WritePin>
 802189e:	2201      	movs	r2, #1
 80218a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80218a4:	483c      	ldr	r0, [pc, #240]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218a6:	f007 f823 	bl	80288f0 <HAL_GPIO_WritePin>
 80218aa:	e071      	b.n	8021990 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 80218ac:	2201      	movs	r2, #1
 80218ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80218b2:	4839      	ldr	r0, [pc, #228]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218b4:	f007 f81c 	bl	80288f0 <HAL_GPIO_WritePin>
 80218b8:	2201      	movs	r2, #1
 80218ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80218be:	4836      	ldr	r0, [pc, #216]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218c0:	f007 f816 	bl	80288f0 <HAL_GPIO_WritePin>
 80218c4:	2200      	movs	r2, #0
 80218c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80218ca:	4833      	ldr	r0, [pc, #204]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218cc:	f007 f810 	bl	80288f0 <HAL_GPIO_WritePin>
 80218d0:	e05e      	b.n	8021990 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 80218d2:	2200      	movs	r2, #0
 80218d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80218d8:	482f      	ldr	r0, [pc, #188]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218da:	f007 f809 	bl	80288f0 <HAL_GPIO_WritePin>
 80218de:	2200      	movs	r2, #0
 80218e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80218e4:	482c      	ldr	r0, [pc, #176]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218e6:	f007 f803 	bl	80288f0 <HAL_GPIO_WritePin>
 80218ea:	2201      	movs	r2, #1
 80218ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80218f0:	4829      	ldr	r0, [pc, #164]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218f2:	f006 fffd 	bl	80288f0 <HAL_GPIO_WritePin>
 80218f6:	e04b      	b.n	8021990 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 80218f8:	2201      	movs	r2, #1
 80218fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80218fe:	4826      	ldr	r0, [pc, #152]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021900:	f006 fff6 	bl	80288f0 <HAL_GPIO_WritePin>
 8021904:	2200      	movs	r2, #0
 8021906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802190a:	4823      	ldr	r0, [pc, #140]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 802190c:	f006 fff0 	bl	80288f0 <HAL_GPIO_WritePin>
 8021910:	2200      	movs	r2, #0
 8021912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021916:	4820      	ldr	r0, [pc, #128]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021918:	f006 ffea 	bl	80288f0 <HAL_GPIO_WritePin>
 802191c:	e038      	b.n	8021990 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 802191e:	2200      	movs	r2, #0
 8021920:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021924:	481c      	ldr	r0, [pc, #112]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021926:	f006 ffe3 	bl	80288f0 <HAL_GPIO_WritePin>
 802192a:	2201      	movs	r2, #1
 802192c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021930:	4819      	ldr	r0, [pc, #100]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021932:	f006 ffdd 	bl	80288f0 <HAL_GPIO_WritePin>
 8021936:	2200      	movs	r2, #0
 8021938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802193c:	4816      	ldr	r0, [pc, #88]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 802193e:	f006 ffd7 	bl	80288f0 <HAL_GPIO_WritePin>
 8021942:	e025      	b.n	8021990 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 8021944:	2200      	movs	r2, #0
 8021946:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802194a:	4813      	ldr	r0, [pc, #76]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 802194c:	f006 ffd0 	bl	80288f0 <HAL_GPIO_WritePin>
 8021950:	2200      	movs	r2, #0
 8021952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021956:	4810      	ldr	r0, [pc, #64]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021958:	f006 ffca 	bl	80288f0 <HAL_GPIO_WritePin>
 802195c:	2200      	movs	r2, #0
 802195e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021962:	480d      	ldr	r0, [pc, #52]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021964:	f006 ffc4 	bl	80288f0 <HAL_GPIO_WritePin>
 8021968:	e012      	b.n	8021990 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 802196a:	2201      	movs	r2, #1
 802196c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021970:	4809      	ldr	r0, [pc, #36]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021972:	f006 ffbd 	bl	80288f0 <HAL_GPIO_WritePin>
 8021976:	2201      	movs	r2, #1
 8021978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802197c:	4806      	ldr	r0, [pc, #24]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 802197e:	f006 ffb7 	bl	80288f0 <HAL_GPIO_WritePin>
 8021982:	2201      	movs	r2, #1
 8021984:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021988:	4803      	ldr	r0, [pc, #12]	; (8021998 <_ZN3Led10ColorOrderEc+0x1b4>)
 802198a:	f006 ffb1 	bl	80288f0 <HAL_GPIO_WritePin>
 802198e:	bf00      	nop
    }
}
 8021990:	bf00      	nop
 8021992:	3708      	adds	r7, #8
 8021994:	46bd      	mov	sp, r7
 8021996:	bd80      	pop	{r7, pc}
 8021998:	40020800 	.word	0x40020800

0802199c <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 802199c:	b580      	push	{r7, lr}
 802199e:	b084      	sub	sp, #16
 80219a0:	af00      	add	r7, sp, #0
 80219a2:	6078      	str	r0, [r7, #4]
 80219a4:	4608      	mov	r0, r1
 80219a6:	4611      	mov	r1, r2
 80219a8:	461a      	mov	r2, r3
 80219aa:	4603      	mov	r3, r0
 80219ac:	70fb      	strb	r3, [r7, #3]
 80219ae:	460b      	mov	r3, r1
 80219b0:	70bb      	strb	r3, [r7, #2]
 80219b2:	4613      	mov	r3, r2
 80219b4:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 80219b6:	2300      	movs	r3, #0
 80219b8:	73fb      	strb	r3, [r7, #15]
 80219ba:	7bfa      	ldrb	r2, [r7, #15]
 80219bc:	78fb      	ldrb	r3, [r7, #3]
 80219be:	429a      	cmp	r2, r3
 80219c0:	d215      	bcs.n	80219ee <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 80219c2:	78bb      	ldrb	r3, [r7, #2]
 80219c4:	4619      	mov	r1, r3
 80219c6:	6878      	ldr	r0, [r7, #4]
 80219c8:	f7ff ff0c 	bl	80217e4 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 80219cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80219d0:	f005 fa70 	bl	8026eb4 <HAL_Delay>
        ColorOrder(color_2);
 80219d4:	787b      	ldrb	r3, [r7, #1]
 80219d6:	4619      	mov	r1, r3
 80219d8:	6878      	ldr	r0, [r7, #4]
 80219da:	f7ff ff03 	bl	80217e4 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 80219de:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80219e2:	f005 fa67 	bl	8026eb4 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 80219e6:	7bfb      	ldrb	r3, [r7, #15]
 80219e8:	3301      	adds	r3, #1
 80219ea:	73fb      	strb	r3, [r7, #15]
 80219ec:	e7e5      	b.n	80219ba <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 80219ee:	bf00      	nop
 80219f0:	3710      	adds	r7, #16
 80219f2:	46bd      	mov	sp, r7
 80219f4:	bd80      	pop	{r7, pc}

080219f6 <_ZN3Led7RainbowEh>:

void Led::Rainbow(uint8_t times)
{
 80219f6:	b580      	push	{r7, lr}
 80219f8:	b084      	sub	sp, #16
 80219fa:	af00      	add	r7, sp, #0
 80219fc:	6078      	str	r0, [r7, #4]
 80219fe:	460b      	mov	r3, r1
 8021a00:	70fb      	strb	r3, [r7, #3]
    for(uint8_t i = 0; i < times; i++)
 8021a02:	2300      	movs	r3, #0
 8021a04:	73fb      	strb	r3, [r7, #15]
 8021a06:	7bfa      	ldrb	r2, [r7, #15]
 8021a08:	78fb      	ldrb	r3, [r7, #3]
 8021a0a:	429a      	cmp	r2, r3
 8021a0c:	d233      	bcs.n	8021a76 <_ZN3Led7RainbowEh+0x80>
    {
        ColorOrder('R');
 8021a0e:	2152      	movs	r1, #82	; 0x52
 8021a10:	6878      	ldr	r0, [r7, #4]
 8021a12:	f7ff fee7 	bl	80217e4 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021a16:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021a1a:	f005 fa4b 	bl	8026eb4 <HAL_Delay>
        ColorOrder('Y');
 8021a1e:	2159      	movs	r1, #89	; 0x59
 8021a20:	6878      	ldr	r0, [r7, #4]
 8021a22:	f7ff fedf 	bl	80217e4 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021a26:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021a2a:	f005 fa43 	bl	8026eb4 <HAL_Delay>
        ColorOrder('G');
 8021a2e:	2147      	movs	r1, #71	; 0x47
 8021a30:	6878      	ldr	r0, [r7, #4]
 8021a32:	f7ff fed7 	bl	80217e4 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021a36:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021a3a:	f005 fa3b 	bl	8026eb4 <HAL_Delay>
        ColorOrder('C');
 8021a3e:	2143      	movs	r1, #67	; 0x43
 8021a40:	6878      	ldr	r0, [r7, #4]
 8021a42:	f7ff fecf 	bl	80217e4 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021a46:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021a4a:	f005 fa33 	bl	8026eb4 <HAL_Delay>
        ColorOrder('B');
 8021a4e:	2142      	movs	r1, #66	; 0x42
 8021a50:	6878      	ldr	r0, [r7, #4]
 8021a52:	f7ff fec7 	bl	80217e4 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021a56:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021a5a:	f005 fa2b 	bl	8026eb4 <HAL_Delay>
        ColorOrder('M');
 8021a5e:	214d      	movs	r1, #77	; 0x4d
 8021a60:	6878      	ldr	r0, [r7, #4]
 8021a62:	f7ff febf 	bl	80217e4 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021a66:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021a6a:	f005 fa23 	bl	8026eb4 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021a6e:	7bfb      	ldrb	r3, [r7, #15]
 8021a70:	3301      	adds	r3, #1
 8021a72:	73fb      	strb	r3, [r7, #15]
 8021a74:	e7c7      	b.n	8021a06 <_ZN3Led7RainbowEh+0x10>
    }
}
 8021a76:	bf00      	nop
 8021a78:	3710      	adds	r7, #16
 8021a7a:	46bd      	mov	sp, r7
 8021a7c:	bd80      	pop	{r7, pc}

08021a7e <_ZN3Led14BlinkInterruptEhcc>:

bool Led::BlinkInterrupt(uint8_t times, char color_1, char color_2)
{
 8021a7e:	b580      	push	{r7, lr}
 8021a80:	b084      	sub	sp, #16
 8021a82:	af00      	add	r7, sp, #0
 8021a84:	6078      	str	r0, [r7, #4]
 8021a86:	4608      	mov	r0, r1
 8021a88:	4611      	mov	r1, r2
 8021a8a:	461a      	mov	r2, r3
 8021a8c:	4603      	mov	r3, r0
 8021a8e:	70fb      	strb	r3, [r7, #3]
 8021a90:	460b      	mov	r3, r1
 8021a92:	70bb      	strb	r3, [r7, #2]
 8021a94:	4613      	mov	r3, r2
 8021a96:	707b      	strb	r3, [r7, #1]
    uint8_t count = interrupt_count_;
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	781b      	ldrb	r3, [r3, #0]
 8021a9c:	73fb      	strb	r3, [r7, #15]
    uint8_t timer = interrupt_timer_;
 8021a9e:	687b      	ldr	r3, [r7, #4]
 8021aa0:	785b      	ldrb	r3, [r3, #1]
 8021aa2:	73bb      	strb	r3, [r7, #14]
    bool blink_continue = true;
 8021aa4:	2301      	movs	r3, #1
 8021aa6:	737b      	strb	r3, [r7, #13]

    if(count < times){
 8021aa8:	7bfa      	ldrb	r2, [r7, #15]
 8021aaa:	78fb      	ldrb	r3, [r7, #3]
 8021aac:	429a      	cmp	r2, r3
 8021aae:	d21d      	bcs.n	8021aec <_ZN3Led14BlinkInterruptEhcc+0x6e>
        if(timer < BLINK_INTERVAL_TIMX){
 8021ab0:	7bbb      	ldrb	r3, [r7, #14]
 8021ab2:	2b27      	cmp	r3, #39	; 0x27
 8021ab4:	d808      	bhi.n	8021ac8 <_ZN3Led14BlinkInterruptEhcc+0x4a>
            ColorOrder(color_1);
 8021ab6:	78bb      	ldrb	r3, [r7, #2]
 8021ab8:	4619      	mov	r1, r3
 8021aba:	6878      	ldr	r0, [r7, #4]
 8021abc:	f7ff fe92 	bl	80217e4 <_ZN3Led10ColorOrderEc>
            timer++;
 8021ac0:	7bbb      	ldrb	r3, [r7, #14]
 8021ac2:	3301      	adds	r3, #1
 8021ac4:	73bb      	strb	r3, [r7, #14]
 8021ac6:	e019      	b.n	8021afc <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else if(timer < (BLINK_INTERVAL_TIMX + BLINK_INTERVAL_TIMX)){
 8021ac8:	7bbb      	ldrb	r3, [r7, #14]
 8021aca:	2b4f      	cmp	r3, #79	; 0x4f
 8021acc:	d808      	bhi.n	8021ae0 <_ZN3Led14BlinkInterruptEhcc+0x62>
            ColorOrder(color_2);
 8021ace:	787b      	ldrb	r3, [r7, #1]
 8021ad0:	4619      	mov	r1, r3
 8021ad2:	6878      	ldr	r0, [r7, #4]
 8021ad4:	f7ff fe86 	bl	80217e4 <_ZN3Led10ColorOrderEc>
            timer++;
 8021ad8:	7bbb      	ldrb	r3, [r7, #14]
 8021ada:	3301      	adds	r3, #1
 8021adc:	73bb      	strb	r3, [r7, #14]
 8021ade:	e00d      	b.n	8021afc <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else{
            count++;
 8021ae0:	7bfb      	ldrb	r3, [r7, #15]
 8021ae2:	3301      	adds	r3, #1
 8021ae4:	73fb      	strb	r3, [r7, #15]
            timer = 0;
 8021ae6:	2300      	movs	r3, #0
 8021ae8:	73bb      	strb	r3, [r7, #14]
 8021aea:	e007      	b.n	8021afc <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }
    }else{
        ColorOrder('X');
 8021aec:	2158      	movs	r1, #88	; 0x58
 8021aee:	6878      	ldr	r0, [r7, #4]
 8021af0:	f7ff fe78 	bl	80217e4 <_ZN3Led10ColorOrderEc>
        count = 0;
 8021af4:	2300      	movs	r3, #0
 8021af6:	73fb      	strb	r3, [r7, #15]
        blink_continue = false;
 8021af8:	2300      	movs	r3, #0
 8021afa:	737b      	strb	r3, [r7, #13]
    }

    interrupt_count_ = count;
 8021afc:	687b      	ldr	r3, [r7, #4]
 8021afe:	7bfa      	ldrb	r2, [r7, #15]
 8021b00:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = timer;
 8021b02:	687b      	ldr	r3, [r7, #4]
 8021b04:	7bba      	ldrb	r2, [r7, #14]
 8021b06:	705a      	strb	r2, [r3, #1]

    return blink_continue;
 8021b08:	7b7b      	ldrb	r3, [r7, #13]
}
 8021b0a:	4618      	mov	r0, r3
 8021b0c:	3710      	adds	r7, #16
 8021b0e:	46bd      	mov	sp, r7
 8021b10:	bd80      	pop	{r7, pc}

08021b12 <_ZN3Led14ResetInterruptEv>:

void Led::ResetInterrupt()
{
 8021b12:	b480      	push	{r7}
 8021b14:	b083      	sub	sp, #12
 8021b16:	af00      	add	r7, sp, #0
 8021b18:	6078      	str	r0, [r7, #4]
    interrupt_count_ = 0;
 8021b1a:	687b      	ldr	r3, [r7, #4]
 8021b1c:	2200      	movs	r2, #0
 8021b1e:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = 0;
 8021b20:	687b      	ldr	r3, [r7, #4]
 8021b22:	2200      	movs	r2, #0
 8021b24:	705a      	strb	r2, [r3, #1]
 8021b26:	bf00      	nop
 8021b28:	370c      	adds	r7, #12
 8021b2a:	46bd      	mov	sp, r7
 8021b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b30:	4770      	bx	lr

08021b32 <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_{0}
 8021b32:	b580      	push	{r7, lr}
 8021b34:	b082      	sub	sp, #8
 8021b36:	af00      	add	r7, sp, #0
 8021b38:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_{{0}}
                         , max_line_sensors_valu_{0}
                         , min_line_sensors_valu_{0}
                         , line_sensors_valu_{0}
                         , emergency_stop_flag_(false) {}
 8021b3a:	687b      	ldr	r3, [r7, #4]
 8021b3c:	461a      	mov	r2, r3
 8021b3e:	2300      	movs	r3, #0
 8021b40:	6013      	str	r3, [r2, #0]
 8021b42:	6053      	str	r3, [r2, #4]
 8021b44:	6093      	str	r3, [r2, #8]
 8021b46:	60d3      	str	r3, [r2, #12]
 8021b48:	6113      	str	r3, [r2, #16]
 8021b4a:	6153      	str	r3, [r2, #20]
 8021b4c:	6193      	str	r3, [r2, #24]
 8021b4e:	687b      	ldr	r3, [r7, #4]
 8021b50:	331c      	adds	r3, #28
 8021b52:	f44f 728c 	mov.w	r2, #280	; 0x118
 8021b56:	2100      	movs	r1, #0
 8021b58:	4618      	mov	r0, r3
 8021b5a:	f009 f9fe 	bl	802af5a <memset>
 8021b5e:	687b      	ldr	r3, [r7, #4]
 8021b60:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8021b64:	2200      	movs	r2, #0
 8021b66:	601a      	str	r2, [r3, #0]
 8021b68:	605a      	str	r2, [r3, #4]
 8021b6a:	609a      	str	r2, [r3, #8]
 8021b6c:	60da      	str	r2, [r3, #12]
 8021b6e:	611a      	str	r2, [r3, #16]
 8021b70:	615a      	str	r2, [r3, #20]
 8021b72:	619a      	str	r2, [r3, #24]
 8021b74:	687b      	ldr	r3, [r7, #4]
 8021b76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021b7a:	2200      	movs	r2, #0
 8021b7c:	601a      	str	r2, [r3, #0]
 8021b7e:	605a      	str	r2, [r3, #4]
 8021b80:	609a      	str	r2, [r3, #8]
 8021b82:	60da      	str	r2, [r3, #12]
 8021b84:	611a      	str	r2, [r3, #16]
 8021b86:	615a      	str	r2, [r3, #20]
 8021b88:	619a      	str	r2, [r3, #24]
 8021b8a:	687b      	ldr	r3, [r7, #4]
 8021b8c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8021b90:	2200      	movs	r2, #0
 8021b92:	601a      	str	r2, [r3, #0]
 8021b94:	605a      	str	r2, [r3, #4]
 8021b96:	609a      	str	r2, [r3, #8]
 8021b98:	60da      	str	r2, [r3, #12]
 8021b9a:	611a      	str	r2, [r3, #16]
 8021b9c:	615a      	str	r2, [r3, #20]
 8021b9e:	619a      	str	r2, [r3, #24]
 8021ba0:	687b      	ldr	r3, [r7, #4]
 8021ba2:	2200      	movs	r2, #0
 8021ba4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8021ba8:	687b      	ldr	r3, [r7, #4]
 8021baa:	4618      	mov	r0, r3
 8021bac:	3708      	adds	r7, #8
 8021bae:	46bd      	mov	sp, r7
 8021bb0:	bd80      	pop	{r7, pc}
	...

08021bb4 <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 8021bb4:	b580      	push	{r7, lr}
 8021bb6:	b082      	sub	sp, #8
 8021bb8:	af00      	add	r7, sp, #0
 8021bba:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 8021bbc:	687b      	ldr	r3, [r7, #4]
 8021bbe:	220e      	movs	r2, #14
 8021bc0:	4619      	mov	r1, r3
 8021bc2:	4815      	ldr	r0, [pc, #84]	; (8021c18 <_ZN10LineSensor4InitEv+0x64>)
 8021bc4:	f005 f9dc 	bl	8026f80 <HAL_ADC_Start_DMA>
 8021bc8:	4603      	mov	r3, r0
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	bf14      	ite	ne
 8021bce:	2301      	movne	r3, #1
 8021bd0:	2300      	moveq	r3, #0
 8021bd2:	b2db      	uxtb	r3, r3
 8021bd4:	2b00      	cmp	r3, #0
 8021bd6:	d004      	beq.n	8021be2 <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 8021bd8:	4b10      	ldr	r3, [pc, #64]	; (8021c1c <_ZN10LineSensor4InitEv+0x68>)
 8021bda:	2201      	movs	r2, #1
 8021bdc:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021bde:	f002 fcdd 	bl	802459c <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 8021be2:	2100      	movs	r1, #0
 8021be4:	480e      	ldr	r0, [pc, #56]	; (8021c20 <_ZN10LineSensor4InitEv+0x6c>)
 8021be6:	f008 f9cb 	bl	8029f80 <HAL_TIM_PWM_Start>
 8021bea:	4603      	mov	r3, r0
 8021bec:	2b00      	cmp	r3, #0
 8021bee:	bf14      	ite	ne
 8021bf0:	2301      	movne	r3, #1
 8021bf2:	2300      	moveq	r3, #0
 8021bf4:	b2db      	uxtb	r3, r3
 8021bf6:	2b00      	cmp	r3, #0
 8021bf8:	d004      	beq.n	8021c04 <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 8021bfa:	4b0a      	ldr	r3, [pc, #40]	; (8021c24 <_ZN10LineSensor4InitEv+0x70>)
 8021bfc:	2201      	movs	r2, #1
 8021bfe:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021c00:	f002 fccc 	bl	802459c <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 8021c04:	4b06      	ldr	r3, [pc, #24]	; (8021c20 <_ZN10LineSensor4InitEv+0x6c>)
 8021c06:	681b      	ldr	r3, [r3, #0]
 8021c08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8021c0c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8021c0e:	bf00      	nop
 8021c10:	3708      	adds	r7, #8
 8021c12:	46bd      	mov	sp, r7
 8021c14:	bd80      	pop	{r7, pc}
 8021c16:	bf00      	nop
 8021c18:	200112cc 	.word	0x200112cc
 8021c1c:	2000013f 	.word	0x2000013f
 8021c20:	20011314 	.word	0x20011314
 8021c24:	20000140 	.word	0x20000140

08021c28 <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 8021c28:	b480      	push	{r7}
 8021c2a:	b085      	sub	sp, #20
 8021c2c:	af00      	add	r7, sp, #0
 8021c2e:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021c30:	2300      	movs	r3, #0
 8021c32:	60fb      	str	r3, [r7, #12]
 8021c34:	68fb      	ldr	r3, [r7, #12]
 8021c36:	2b0d      	cmp	r3, #13
 8021c38:	dc16      	bgt.n	8021c68 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 8021c3a:	4b15      	ldr	r3, [pc, #84]	; (8021c90 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021c3c:	781b      	ldrb	r3, [r3, #0]
 8021c3e:	4619      	mov	r1, r3
 8021c40:	687b      	ldr	r3, [r7, #4]
 8021c42:	68fa      	ldr	r2, [r7, #12]
 8021c44:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8021c48:	687a      	ldr	r2, [r7, #4]
 8021c4a:	460b      	mov	r3, r1
 8021c4c:	00db      	lsls	r3, r3, #3
 8021c4e:	1a5b      	subs	r3, r3, r1
 8021c50:	005b      	lsls	r3, r3, #1
 8021c52:	68f9      	ldr	r1, [r7, #12]
 8021c54:	440b      	add	r3, r1
 8021c56:	330c      	adds	r3, #12
 8021c58:	005b      	lsls	r3, r3, #1
 8021c5a:	4413      	add	r3, r2
 8021c5c:	4602      	mov	r2, r0
 8021c5e:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021c60:	68fb      	ldr	r3, [r7, #12]
 8021c62:	3301      	adds	r3, #1
 8021c64:	60fb      	str	r3, [r7, #12]
 8021c66:	e7e5      	b.n	8021c34 <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    times++;
 8021c68:	4b09      	ldr	r3, [pc, #36]	; (8021c90 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021c6a:	781b      	ldrb	r3, [r3, #0]
 8021c6c:	3301      	adds	r3, #1
 8021c6e:	b2da      	uxtb	r2, r3
 8021c70:	4b07      	ldr	r3, [pc, #28]	; (8021c90 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021c72:	701a      	strb	r2, [r3, #0]
    if(times >= CONSECUTIVE_TIMES) times = 0;
 8021c74:	4b06      	ldr	r3, [pc, #24]	; (8021c90 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021c76:	781b      	ldrb	r3, [r3, #0]
 8021c78:	2b09      	cmp	r3, #9
 8021c7a:	d902      	bls.n	8021c82 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5a>
 8021c7c:	4b04      	ldr	r3, [pc, #16]	; (8021c90 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021c7e:	2200      	movs	r2, #0
 8021c80:	701a      	strb	r2, [r3, #0]
}
 8021c82:	bf00      	nop
 8021c84:	3714      	adds	r7, #20
 8021c86:	46bd      	mov	sp, r7
 8021c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c8c:	4770      	bx	lr
 8021c8e:	bf00      	nop
 8021c90:	200000a4 	.word	0x200000a4

08021c94 <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 8021c94:	b5b0      	push	{r4, r5, r7, lr}
 8021c96:	b088      	sub	sp, #32
 8021c98:	af00      	add	r7, sp, #0
 8021c9a:	60f8      	str	r0, [r7, #12]
 8021c9c:	60b9      	str	r1, [r7, #8]
 8021c9e:	4611      	mov	r1, r2
 8021ca0:	461a      	mov	r2, r3
 8021ca2:	460b      	mov	r3, r1
 8021ca4:	71fb      	strb	r3, [r7, #7]
 8021ca6:	4613      	mov	r3, r2
 8021ca8:	71bb      	strb	r3, [r7, #6]

    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else                                     array[i] = temp_array[right--];
    }
 8021caa:	466b      	mov	r3, sp
 8021cac:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 8021cae:	79fa      	ldrb	r2, [r7, #7]
 8021cb0:	79bb      	ldrb	r3, [r7, #6]
 8021cb2:	429a      	cmp	r2, r3
 8021cb4:	f080 80ba 	bcs.w	8021e2c <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 8021cb8:	79b8      	ldrb	r0, [r7, #6]
 8021cba:	61b8      	str	r0, [r7, #24]
 8021cbc:	4603      	mov	r3, r0
 8021cbe:	3301      	adds	r3, #1
 8021cc0:	4619      	mov	r1, r3
 8021cc2:	f04f 0200 	mov.w	r2, #0
 8021cc6:	f04f 0300 	mov.w	r3, #0
 8021cca:	f04f 0400 	mov.w	r4, #0
 8021cce:	0114      	lsls	r4, r2, #4
 8021cd0:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021cd4:	010b      	lsls	r3, r1, #4
 8021cd6:	4603      	mov	r3, r0
 8021cd8:	3301      	adds	r3, #1
 8021cda:	4619      	mov	r1, r3
 8021cdc:	f04f 0200 	mov.w	r2, #0
 8021ce0:	f04f 0300 	mov.w	r3, #0
 8021ce4:	f04f 0400 	mov.w	r4, #0
 8021ce8:	0114      	lsls	r4, r2, #4
 8021cea:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021cee:	010b      	lsls	r3, r1, #4
 8021cf0:	4603      	mov	r3, r0
 8021cf2:	3301      	adds	r3, #1
 8021cf4:	005b      	lsls	r3, r3, #1
 8021cf6:	3301      	adds	r3, #1
 8021cf8:	3307      	adds	r3, #7
 8021cfa:	08db      	lsrs	r3, r3, #3
 8021cfc:	00db      	lsls	r3, r3, #3
 8021cfe:	ebad 0d03 	sub.w	sp, sp, r3
 8021d02:	466b      	mov	r3, sp
 8021d04:	3301      	adds	r3, #1
 8021d06:	085b      	lsrs	r3, r3, #1
 8021d08:	005b      	lsls	r3, r3, #1
 8021d0a:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 8021d0c:	79fa      	ldrb	r2, [r7, #7]
 8021d0e:	79bb      	ldrb	r3, [r7, #6]
 8021d10:	4413      	add	r3, r2
 8021d12:	0fda      	lsrs	r2, r3, #31
 8021d14:	4413      	add	r3, r2
 8021d16:	105b      	asrs	r3, r3, #1
 8021d18:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 8021d1a:	7cfb      	ldrb	r3, [r7, #19]
 8021d1c:	79fa      	ldrb	r2, [r7, #7]
 8021d1e:	68b9      	ldr	r1, [r7, #8]
 8021d20:	68f8      	ldr	r0, [r7, #12]
 8021d22:	f7ff ffb7 	bl	8021c94 <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 8021d26:	7cfb      	ldrb	r3, [r7, #19]
 8021d28:	3301      	adds	r3, #1
 8021d2a:	b2da      	uxtb	r2, r3
 8021d2c:	79bb      	ldrb	r3, [r7, #6]
 8021d2e:	68b9      	ldr	r1, [r7, #8]
 8021d30:	68f8      	ldr	r0, [r7, #12]
 8021d32:	f7ff ffaf 	bl	8021c94 <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--)
 8021d36:	7cfb      	ldrb	r3, [r7, #19]
 8021d38:	77bb      	strb	r3, [r7, #30]
 8021d3a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021d3e:	79fb      	ldrb	r3, [r7, #7]
 8021d40:	429a      	cmp	r2, r3
 8021d42:	db11      	blt.n	8021d68 <_ZN10LineSensor9MergeSortEPthh+0xd4>
        temp_array[i] = array[i];
 8021d44:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d48:	005b      	lsls	r3, r3, #1
 8021d4a:	68ba      	ldr	r2, [r7, #8]
 8021d4c:	4413      	add	r3, r2
 8021d4e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021d52:	8819      	ldrh	r1, [r3, #0]
 8021d54:	697b      	ldr	r3, [r7, #20]
 8021d56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle; i >= first_index; i--)
 8021d5a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d5e:	b2db      	uxtb	r3, r3
 8021d60:	3b01      	subs	r3, #1
 8021d62:	b2db      	uxtb	r3, r3
 8021d64:	77bb      	strb	r3, [r7, #30]
 8021d66:	e7e8      	b.n	8021d3a <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 8021d68:	7cfb      	ldrb	r3, [r7, #19]
 8021d6a:	3301      	adds	r3, #1
 8021d6c:	b2db      	uxtb	r3, r3
 8021d6e:	77bb      	strb	r3, [r7, #30]
 8021d70:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021d74:	79bb      	ldrb	r3, [r7, #6]
 8021d76:	429a      	cmp	r2, r3
 8021d78:	dc17      	bgt.n	8021daa <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 8021d7a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d7e:	005b      	lsls	r3, r3, #1
 8021d80:	68ba      	ldr	r2, [r7, #8]
 8021d82:	4413      	add	r3, r2
 8021d84:	79b9      	ldrb	r1, [r7, #6]
 8021d86:	f997 001e 	ldrsb.w	r0, [r7, #30]
 8021d8a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8021d8e:	3201      	adds	r2, #1
 8021d90:	1a82      	subs	r2, r0, r2
 8021d92:	1a8a      	subs	r2, r1, r2
 8021d94:	8819      	ldrh	r1, [r3, #0]
 8021d96:	697b      	ldr	r3, [r7, #20]
 8021d98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 8021d9c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021da0:	b2db      	uxtb	r3, r3
 8021da2:	3301      	adds	r3, #1
 8021da4:	b2db      	uxtb	r3, r3
 8021da6:	77bb      	strb	r3, [r7, #30]
 8021da8:	e7e2      	b.n	8021d70 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 8021daa:	79fb      	ldrb	r3, [r7, #7]
 8021dac:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 8021dae:	79bb      	ldrb	r3, [r7, #6]
 8021db0:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 8021db2:	79fb      	ldrb	r3, [r7, #7]
 8021db4:	77bb      	strb	r3, [r7, #30]
 8021db6:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021dba:	79bb      	ldrb	r3, [r7, #6]
 8021dbc:	429a      	cmp	r2, r3
 8021dbe:	dc33      	bgt.n	8021e28 <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 8021dc0:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021dc4:	697b      	ldr	r3, [r7, #20]
 8021dc6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021dca:	f997 101d 	ldrsb.w	r1, [r7, #29]
 8021dce:	697b      	ldr	r3, [r7, #20]
 8021dd0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8021dd4:	429a      	cmp	r2, r3
 8021dd6:	d210      	bcs.n	8021dfa <_ZN10LineSensor9MergeSortEPthh+0x166>
 8021dd8:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021ddc:	b2d3      	uxtb	r3, r2
 8021dde:	3301      	adds	r3, #1
 8021de0:	b2db      	uxtb	r3, r3
 8021de2:	77fb      	strb	r3, [r7, #31]
 8021de4:	4611      	mov	r1, r2
 8021de6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021dea:	005b      	lsls	r3, r3, #1
 8021dec:	68ba      	ldr	r2, [r7, #8]
 8021dee:	4413      	add	r3, r2
 8021df0:	697a      	ldr	r2, [r7, #20]
 8021df2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021df6:	801a      	strh	r2, [r3, #0]
 8021df8:	e00f      	b.n	8021e1a <_ZN10LineSensor9MergeSortEPthh+0x186>
        else                                     array[i] = temp_array[right--];
 8021dfa:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8021dfe:	b2d3      	uxtb	r3, r2
 8021e00:	3b01      	subs	r3, #1
 8021e02:	b2db      	uxtb	r3, r3
 8021e04:	777b      	strb	r3, [r7, #29]
 8021e06:	4611      	mov	r1, r2
 8021e08:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021e0c:	005b      	lsls	r3, r3, #1
 8021e0e:	68ba      	ldr	r2, [r7, #8]
 8021e10:	4413      	add	r3, r2
 8021e12:	697a      	ldr	r2, [r7, #20]
 8021e14:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021e18:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 8021e1a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021e1e:	b2db      	uxtb	r3, r3
 8021e20:	3301      	adds	r3, #1
 8021e22:	b2db      	uxtb	r3, r3
 8021e24:	77bb      	strb	r3, [r7, #30]
 8021e26:	e7c6      	b.n	8021db6 <_ZN10LineSensor9MergeSortEPthh+0x122>
 8021e28:	46ad      	mov	sp, r5
 8021e2a:	e001      	b.n	8021e30 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 8021e2c:	bf00      	nop
 8021e2e:	46ad      	mov	sp, r5
}
 8021e30:	3720      	adds	r7, #32
 8021e32:	46bd      	mov	sp, r7
 8021e34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021e38 <_ZN10LineSensor6UpdateEv>:

void LineSensor::Update()
{
 8021e38:	b590      	push	{r4, r7, lr}
 8021e3a:	b08b      	sub	sp, #44	; 0x2c
 8021e3c:	af00      	add	r7, sp, #0
 8021e3e:	6078      	str	r0, [r7, #4]
    uint8_t i, j;
    uint16_t temp_array[CONSECUTIVE_TIMES];
    uint16_t median, max, min, normalized;
    bool emergency = true;
 8021e40:	2301      	movs	r3, #1
 8021e42:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021e46:	2300      	movs	r3, #0
 8021e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021e50:	2b0d      	cmp	r3, #13
 8021e52:	f200 80c8 	bhi.w	8021fe6 <_ZN10LineSensor6UpdateEv+0x1ae>
    {
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021e56:	2300      	movs	r3, #0
 8021e58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021e5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021e60:	2b09      	cmp	r3, #9
 8021e62:	d81b      	bhi.n	8021e9c <_ZN10LineSensor6UpdateEv+0x64>
        {
            temp_array[j] = consecutive_line_sensors_buff_[j][i];
 8021e64:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8021e68:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8021e6c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021e70:	6878      	ldr	r0, [r7, #4]
 8021e72:	4613      	mov	r3, r2
 8021e74:	00db      	lsls	r3, r3, #3
 8021e76:	1a9b      	subs	r3, r3, r2
 8021e78:	005b      	lsls	r3, r3, #1
 8021e7a:	4423      	add	r3, r4
 8021e7c:	330c      	adds	r3, #12
 8021e7e:	005b      	lsls	r3, r3, #1
 8021e80:	4403      	add	r3, r0
 8021e82:	889a      	ldrh	r2, [r3, #4]
 8021e84:	004b      	lsls	r3, r1, #1
 8021e86:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8021e8a:	440b      	add	r3, r1
 8021e8c:	f823 2c20 	strh.w	r2, [r3, #-32]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021e90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021e94:	3301      	adds	r3, #1
 8021e96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021e9a:	e7df      	b.n	8021e5c <_ZN10LineSensor6UpdateEv+0x24>
        }

        MergeSort(temp_array, 0, CONSECUTIVE_TIMES-1);
 8021e9c:	f107 0108 	add.w	r1, r7, #8
 8021ea0:	2309      	movs	r3, #9
 8021ea2:	2200      	movs	r2, #0
 8021ea4:	6878      	ldr	r0, [r7, #4]
 8021ea6:	f7ff fef5 	bl	8021c94 <_ZN10LineSensor9MergeSortEPthh>
        median = temp_array[HALF_CONSECUTIVE_TIMES];
 8021eaa:	8a7b      	ldrh	r3, [r7, #18]
 8021eac:	83fb      	strh	r3, [r7, #30]

#ifdef DEBUG_MODE
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021eae:	2300      	movs	r3, #0
 8021eb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021eb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021eb8:	2b09      	cmp	r3, #9
 8021eba:	d81a      	bhi.n	8021ef2 <_ZN10LineSensor6UpdateEv+0xba>
        {
            g_consecutive_line_buff[i][j] = temp_array[j];
 8021ebc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021ec0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021ec4:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021ec8:	005b      	lsls	r3, r3, #1
 8021eca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8021ece:	4403      	add	r3, r0
 8021ed0:	f833 4c20 	ldrh.w	r4, [r3, #-32]
 8021ed4:	4848      	ldr	r0, [pc, #288]	; (8021ff8 <_ZN10LineSensor6UpdateEv+0x1c0>)
 8021ed6:	4613      	mov	r3, r2
 8021ed8:	009b      	lsls	r3, r3, #2
 8021eda:	4413      	add	r3, r2
 8021edc:	005b      	lsls	r3, r3, #1
 8021ede:	440b      	add	r3, r1
 8021ee0:	4622      	mov	r2, r4
 8021ee2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021ee6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021eea:	3301      	adds	r3, #1
 8021eec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021ef0:	e7e0      	b.n	8021eb4 <_ZN10LineSensor6UpdateEv+0x7c>
        }
#endif // DEBUG_MODE

        max = max_line_sensors_valu_[i];
 8021ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ef6:	687a      	ldr	r2, [r7, #4]
 8021ef8:	3398      	adds	r3, #152	; 0x98
 8021efa:	005b      	lsls	r3, r3, #1
 8021efc:	4413      	add	r3, r2
 8021efe:	889b      	ldrh	r3, [r3, #4]
 8021f00:	84bb      	strh	r3, [r7, #36]	; 0x24
        min = min_line_sensors_valu_[i];
 8021f02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021f06:	687b      	ldr	r3, [r7, #4]
 8021f08:	32a8      	adds	r2, #168	; 0xa8
 8021f0a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021f0e:	847b      	strh	r3, [r7, #34]	; 0x22
        if(max < median || max == 0) max = median;
 8021f10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021f12:	8bfb      	ldrh	r3, [r7, #30]
 8021f14:	429a      	cmp	r2, r3
 8021f16:	d302      	bcc.n	8021f1e <_ZN10LineSensor6UpdateEv+0xe6>
 8021f18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021f1a:	2b00      	cmp	r3, #0
 8021f1c:	d101      	bne.n	8021f22 <_ZN10LineSensor6UpdateEv+0xea>
 8021f1e:	8bfb      	ldrh	r3, [r7, #30]
 8021f20:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(min > median || min == 0) min = median;
 8021f22:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021f24:	8bfb      	ldrh	r3, [r7, #30]
 8021f26:	429a      	cmp	r2, r3
 8021f28:	d802      	bhi.n	8021f30 <_ZN10LineSensor6UpdateEv+0xf8>
 8021f2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021f2c:	2b00      	cmp	r3, #0
 8021f2e:	d101      	bne.n	8021f34 <_ZN10LineSensor6UpdateEv+0xfc>
 8021f30:	8bfb      	ldrh	r3, [r7, #30]
 8021f32:	847b      	strh	r3, [r7, #34]	; 0x22
        max_line_sensors_valu_[i] = max;
 8021f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021f38:	687a      	ldr	r2, [r7, #4]
 8021f3a:	3398      	adds	r3, #152	; 0x98
 8021f3c:	005b      	lsls	r3, r3, #1
 8021f3e:	4413      	add	r3, r2
 8021f40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021f42:	809a      	strh	r2, [r3, #4]
        min_line_sensors_valu_[i] = min;
 8021f44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021f48:	687b      	ldr	r3, [r7, #4]
 8021f4a:	32a8      	adds	r2, #168	; 0xa8
 8021f4c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8021f4e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

#ifdef DEBUG_MODE
        g_max_line_valu[i] = max_line_sensors_valu_[i];
 8021f52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021f56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021f5a:	6879      	ldr	r1, [r7, #4]
 8021f5c:	3398      	adds	r3, #152	; 0x98
 8021f5e:	005b      	lsls	r3, r3, #1
 8021f60:	440b      	add	r3, r1
 8021f62:	8899      	ldrh	r1, [r3, #4]
 8021f64:	4b25      	ldr	r3, [pc, #148]	; (8021ffc <_ZN10LineSensor6UpdateEv+0x1c4>)
 8021f66:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_min_line_valu[i] = min_line_sensors_valu_[i];
 8021f6a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8021f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021f72:	687a      	ldr	r2, [r7, #4]
 8021f74:	31a8      	adds	r1, #168	; 0xa8
 8021f76:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8021f7a:	4a21      	ldr	r2, [pc, #132]	; (8022000 <_ZN10LineSensor6UpdateEv+0x1c8>)
 8021f7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#endif // DEBUG_MODE

        if(max > min)
 8021f80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021f82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021f84:	429a      	cmp	r2, r3
 8021f86:	d928      	bls.n	8021fda <_ZN10LineSensor6UpdateEv+0x1a2>
        {
            normalized = MAX_NORMALIZED_VALU * (median - min) / (max - min);
 8021f88:	8bfa      	ldrh	r2, [r7, #30]
 8021f8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021f8c:	1ad3      	subs	r3, r2, r3
 8021f8e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8021f92:	fb02 f203 	mul.w	r2, r2, r3
 8021f96:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8021f98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021f9a:	1acb      	subs	r3, r1, r3
 8021f9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021fa0:	83bb      	strh	r3, [r7, #28]
            line_sensors_valu_[i] = normalized;
 8021fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021fa6:	687a      	ldr	r2, [r7, #4]
 8021fa8:	33b4      	adds	r3, #180	; 0xb4
 8021faa:	005b      	lsls	r3, r3, #1
 8021fac:	4413      	add	r3, r2
 8021fae:	8bba      	ldrh	r2, [r7, #28]
 8021fb0:	809a      	strh	r2, [r3, #4]

#ifdef DEBUG_MODE
            g_line_valu[i] = line_sensors_valu_[i];
 8021fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021fb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021fba:	6879      	ldr	r1, [r7, #4]
 8021fbc:	33b4      	adds	r3, #180	; 0xb4
 8021fbe:	005b      	lsls	r3, r3, #1
 8021fc0:	440b      	add	r3, r1
 8021fc2:	8899      	ldrh	r1, [r3, #4]
 8021fc4:	4b0f      	ldr	r3, [pc, #60]	; (8022004 <_ZN10LineSensor6UpdateEv+0x1cc>)
 8021fc6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
#endif // DEBUG_MODE

            if(normalized < EMERGENCY_STOP_BORDER) emergency = false;
 8021fca:	8bbb      	ldrh	r3, [r7, #28]
 8021fcc:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8021fd0:	4293      	cmp	r3, r2
 8021fd2:	d802      	bhi.n	8021fda <_ZN10LineSensor6UpdateEv+0x1a2>
 8021fd4:	2300      	movs	r3, #0
 8021fd6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021fde:	3301      	adds	r3, #1
 8021fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021fe4:	e732      	b.n	8021e4c <_ZN10LineSensor6UpdateEv+0x14>
        }
    }
    emergency_stop_flag_ = emergency;
 8021fe6:	687b      	ldr	r3, [r7, #4]
 8021fe8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8021fec:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
}
 8021ff0:	bf00      	nop
 8021ff2:	372c      	adds	r7, #44	; 0x2c
 8021ff4:	46bd      	mov	sp, r7
 8021ff6:	bd90      	pop	{r4, r7, pc}
 8021ff8:	20000148 	.word	0x20000148
 8021ffc:	20000260 	.word	0x20000260
 8022000:	2000027c 	.word	0x2000027c
 8022004:	20000298 	.word	0x20000298

08022008 <_ZN10LineSensor19LeftRightDifferenceEv>:

float LineSensor::LeftRightDifference()
{
 8022008:	b5b0      	push	{r4, r5, r7, lr}
 802200a:	b086      	sub	sp, #24
 802200c:	af00      	add	r7, sp, #0
 802200e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t left = 0, right = 0;
 8022010:	2300      	movs	r3, #0
 8022012:	613b      	str	r3, [r7, #16]
 8022014:	2300      	movs	r3, #0
 8022016:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 8022018:	2300      	movs	r3, #0
 802201a:	75fb      	strb	r3, [r7, #23]
 802201c:	7dfb      	ldrb	r3, [r7, #23]
 802201e:	2b06      	cmp	r3, #6
 8022020:	d80d      	bhi.n	802203e <_ZN10LineSensor19LeftRightDifferenceEv+0x36>
    {
        left += line_sensors_valu_[i];
 8022022:	7dfb      	ldrb	r3, [r7, #23]
 8022024:	687a      	ldr	r2, [r7, #4]
 8022026:	33b4      	adds	r3, #180	; 0xb4
 8022028:	005b      	lsls	r3, r3, #1
 802202a:	4413      	add	r3, r2
 802202c:	889b      	ldrh	r3, [r3, #4]
 802202e:	461a      	mov	r2, r3
 8022030:	693b      	ldr	r3, [r7, #16]
 8022032:	4413      	add	r3, r2
 8022034:	613b      	str	r3, [r7, #16]
    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 8022036:	7dfb      	ldrb	r3, [r7, #23]
 8022038:	3301      	adds	r3, #1
 802203a:	75fb      	strb	r3, [r7, #23]
 802203c:	e7ee      	b.n	802201c <_ZN10LineSensor19LeftRightDifferenceEv+0x14>
    }
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 802203e:	2307      	movs	r3, #7
 8022040:	75fb      	strb	r3, [r7, #23]
 8022042:	7dfb      	ldrb	r3, [r7, #23]
 8022044:	2b0d      	cmp	r3, #13
 8022046:	d80d      	bhi.n	8022064 <_ZN10LineSensor19LeftRightDifferenceEv+0x5c>
    {
        right += line_sensors_valu_[i];
 8022048:	7dfb      	ldrb	r3, [r7, #23]
 802204a:	687a      	ldr	r2, [r7, #4]
 802204c:	33b4      	adds	r3, #180	; 0xb4
 802204e:	005b      	lsls	r3, r3, #1
 8022050:	4413      	add	r3, r2
 8022052:	889b      	ldrh	r3, [r3, #4]
 8022054:	461a      	mov	r2, r3
 8022056:	68fb      	ldr	r3, [r7, #12]
 8022058:	4413      	add	r3, r2
 802205a:	60fb      	str	r3, [r7, #12]
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 802205c:	7dfb      	ldrb	r3, [r7, #23]
 802205e:	3301      	adds	r3, #1
 8022060:	75fb      	strb	r3, [r7, #23]
 8022062:	e7ee      	b.n	8022042 <_ZN10LineSensor19LeftRightDifferenceEv+0x3a>
    }

#ifdef DEBUG_MODE
    g_line_left = left;
 8022064:	4a11      	ldr	r2, [pc, #68]	; (80220ac <_ZN10LineSensor19LeftRightDifferenceEv+0xa4>)
 8022066:	693b      	ldr	r3, [r7, #16]
 8022068:	6013      	str	r3, [r2, #0]
    g_line_right = right;
 802206a:	4a11      	ldr	r2, [pc, #68]	; (80220b0 <_ZN10LineSensor19LeftRightDifferenceEv+0xa8>)
 802206c:	68fb      	ldr	r3, [r7, #12]
 802206e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float difference = right * LINE_SENSOR_CORRECTION - left;
 8022070:	68f8      	ldr	r0, [r7, #12]
 8022072:	f7fe f977 	bl	8020364 <__aeabi_ui2d>
 8022076:	4604      	mov	r4, r0
 8022078:	460d      	mov	r5, r1
 802207a:	6938      	ldr	r0, [r7, #16]
 802207c:	f7fe f972 	bl	8020364 <__aeabi_ui2d>
 8022080:	4602      	mov	r2, r0
 8022082:	460b      	mov	r3, r1
 8022084:	4620      	mov	r0, r4
 8022086:	4629      	mov	r1, r5
 8022088:	f7fe f82e 	bl	80200e8 <__aeabi_dsub>
 802208c:	4603      	mov	r3, r0
 802208e:	460c      	mov	r4, r1
 8022090:	4618      	mov	r0, r3
 8022092:	4621      	mov	r1, r4
 8022094:	f7fe fc7a 	bl	802098c <__aeabi_d2f>
 8022098:	4603      	mov	r3, r0
 802209a:	60bb      	str	r3, [r7, #8]

    return difference;
 802209c:	68bb      	ldr	r3, [r7, #8]
 802209e:	ee07 3a90 	vmov	s15, r3
}
 80220a2:	eeb0 0a67 	vmov.f32	s0, s15
 80220a6:	3718      	adds	r7, #24
 80220a8:	46bd      	mov	sp, r7
 80220aa:	bdb0      	pop	{r4, r5, r7, pc}
 80220ac:	200002b4 	.word	0x200002b4
 80220b0:	200002b8 	.word	0x200002b8

080220b4 <_ZN10LineSensor20GetEmergencyStopFlagEv>:

bool LineSensor::GetEmergencyStopFlag()
{
 80220b4:	b480      	push	{r7}
 80220b6:	b083      	sub	sp, #12
 80220b8:	af00      	add	r7, sp, #0
 80220ba:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 80220bc:	687b      	ldr	r3, [r7, #4]
 80220be:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
}
 80220c2:	4618      	mov	r0, r3
 80220c4:	370c      	adds	r7, #12
 80220c6:	46bd      	mov	sp, r7
 80220c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220cc:	4770      	bx	lr
	...

080220d0 <_ZN10LineSensor16CheckCalibrationEv>:

bool LineSensor::CheckCalibration()
{
 80220d0:	b480      	push	{r7}
 80220d2:	b085      	sub	sp, #20
 80220d4:	af00      	add	r7, sp, #0
 80220d6:	6078      	str	r0, [r7, #4]
    static uint16_t timer = 0;
    static uint16_t pre_max[NUM_OF_LINE_SENSORS] = {0};
    static uint16_t pre_min[NUM_OF_LINE_SENSORS] = {0};
    uint16_t max, min;
    bool result = true;
 80220d8:	2301      	movs	r3, #1
 80220da:	73fb      	strb	r3, [r7, #15]

    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80220dc:	2300      	movs	r3, #0
 80220de:	73bb      	strb	r3, [r7, #14]
 80220e0:	7bbb      	ldrb	r3, [r7, #14]
 80220e2:	2b0d      	cmp	r3, #13
 80220e4:	d82d      	bhi.n	8022142 <_ZN10LineSensor16CheckCalibrationEv+0x72>
    {
        max = max_line_sensors_valu_[i];
 80220e6:	7bbb      	ldrb	r3, [r7, #14]
 80220e8:	687a      	ldr	r2, [r7, #4]
 80220ea:	3398      	adds	r3, #152	; 0x98
 80220ec:	005b      	lsls	r3, r3, #1
 80220ee:	4413      	add	r3, r2
 80220f0:	889b      	ldrh	r3, [r3, #4]
 80220f2:	81bb      	strh	r3, [r7, #12]
        min = min_line_sensors_valu_[i];
 80220f4:	7bba      	ldrb	r2, [r7, #14]
 80220f6:	687b      	ldr	r3, [r7, #4]
 80220f8:	32a8      	adds	r2, #168	; 0xa8
 80220fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80220fe:	817b      	strh	r3, [r7, #10]

        if(pre_max[i] != max)      result = false;
 8022100:	7bbb      	ldrb	r3, [r7, #14]
 8022102:	4a1e      	ldr	r2, [pc, #120]	; (802217c <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 8022104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8022108:	89ba      	ldrh	r2, [r7, #12]
 802210a:	429a      	cmp	r2, r3
 802210c:	d002      	beq.n	8022114 <_ZN10LineSensor16CheckCalibrationEv+0x44>
 802210e:	2300      	movs	r3, #0
 8022110:	73fb      	strb	r3, [r7, #15]
 8022112:	e008      	b.n	8022126 <_ZN10LineSensor16CheckCalibrationEv+0x56>
        else if(pre_min[i] != min) result = false;
 8022114:	7bbb      	ldrb	r3, [r7, #14]
 8022116:	4a1a      	ldr	r2, [pc, #104]	; (8022180 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 8022118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802211c:	897a      	ldrh	r2, [r7, #10]
 802211e:	429a      	cmp	r2, r3
 8022120:	d001      	beq.n	8022126 <_ZN10LineSensor16CheckCalibrationEv+0x56>
 8022122:	2300      	movs	r3, #0
 8022124:	73fb      	strb	r3, [r7, #15]

        pre_max[i] = max;
 8022126:	7bbb      	ldrb	r3, [r7, #14]
 8022128:	4914      	ldr	r1, [pc, #80]	; (802217c <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 802212a:	89ba      	ldrh	r2, [r7, #12]
 802212c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        pre_min[i] = min;
 8022130:	7bbb      	ldrb	r3, [r7, #14]
 8022132:	4913      	ldr	r1, [pc, #76]	; (8022180 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 8022134:	897a      	ldrh	r2, [r7, #10]
 8022136:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802213a:	7bbb      	ldrb	r3, [r7, #14]
 802213c:	3301      	adds	r3, #1
 802213e:	73bb      	strb	r3, [r7, #14]
 8022140:	e7ce      	b.n	80220e0 <_ZN10LineSensor16CheckCalibrationEv+0x10>
    }

    if(result)
 8022142:	7bfb      	ldrb	r3, [r7, #15]
 8022144:	2b00      	cmp	r3, #0
 8022146:	d00e      	beq.n	8022166 <_ZN10LineSensor16CheckCalibrationEv+0x96>
    {
        if(timer < CALIBRATION_SUCCESS_TIME)
 8022148:	4b0e      	ldr	r3, [pc, #56]	; (8022184 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802214a:	881b      	ldrh	r3, [r3, #0]
 802214c:	f240 52db 	movw	r2, #1499	; 0x5db
 8022150:	4293      	cmp	r3, r2
 8022152:	d80b      	bhi.n	802216c <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        {
            timer++;
 8022154:	4b0b      	ldr	r3, [pc, #44]	; (8022184 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8022156:	881b      	ldrh	r3, [r3, #0]
 8022158:	3301      	adds	r3, #1
 802215a:	b29a      	uxth	r2, r3
 802215c:	4b09      	ldr	r3, [pc, #36]	; (8022184 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802215e:	801a      	strh	r2, [r3, #0]
            result = false;
 8022160:	2300      	movs	r3, #0
 8022162:	73fb      	strb	r3, [r7, #15]
 8022164:	e002      	b.n	802216c <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        }
    }
    else timer = 0;
 8022166:	4b07      	ldr	r3, [pc, #28]	; (8022184 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8022168:	2200      	movs	r2, #0
 802216a:	801a      	strh	r2, [r3, #0]
    
    return result;
 802216c:	7bfb      	ldrb	r3, [r7, #15]
}
 802216e:	4618      	mov	r0, r3
 8022170:	3714      	adds	r7, #20
 8022172:	46bd      	mov	sp, r7
 8022174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022178:	4770      	bx	lr
 802217a:	bf00      	nop
 802217c:	200000a8 	.word	0x200000a8
 8022180:	200000c4 	.word	0x200000c4
 8022184:	200000a6 	.word	0x200000a6

08022188 <_ZN9LineTraceC1EP10LineSensor>:
#include "line_trace.hpp"

LineTrace::LineTrace(LineSensor *line_sensor) : integral_error_(0)
 8022188:	b480      	push	{r7}
 802218a:	b083      	sub	sp, #12
 802218c:	af00      	add	r7, sp, #0
 802218e:	6078      	str	r0, [r7, #4]
 8022190:	6039      	str	r1, [r7, #0]
 8022192:	687b      	ldr	r3, [r7, #4]
 8022194:	f04f 0200 	mov.w	r2, #0
 8022198:	601a      	str	r2, [r3, #0]
{
    line_sensor_ = line_sensor;
 802219a:	687b      	ldr	r3, [r7, #4]
 802219c:	683a      	ldr	r2, [r7, #0]
 802219e:	605a      	str	r2, [r3, #4]
}
 80221a0:	687b      	ldr	r3, [r7, #4]
 80221a2:	4618      	mov	r0, r3
 80221a4:	370c      	adds	r7, #12
 80221a6:	46bd      	mov	sp, r7
 80221a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221ac:	4770      	bx	lr
	...

080221b0 <_ZN9LineTrace13LineTraceOnlyEv>:

float LineTrace::LineTraceOnly()
{
 80221b0:	b580      	push	{r7, lr}
 80221b2:	b086      	sub	sp, #24
 80221b4:	af00      	add	r7, sp, #0
 80221b6:	6078      	str	r0, [r7, #4]
    float p_gain = LINE_ONLY_P_GAIN;
 80221b8:	4b0b      	ldr	r3, [pc, #44]	; (80221e8 <_ZN9LineTrace13LineTraceOnlyEv+0x38>)
 80221ba:	617b      	str	r3, [r7, #20]
    float i_gain = LINE_ONLY_I_GAIN;
 80221bc:	f04f 0300 	mov.w	r3, #0
 80221c0:	613b      	str	r3, [r7, #16]
    float d_gain = LINE_ONLY_D_GAIN;
 80221c2:	f04f 0300 	mov.w	r3, #0
 80221c6:	60fb      	str	r3, [r7, #12]

    return PidControl(p_gain, i_gain, d_gain);
 80221c8:	ed97 1a03 	vldr	s2, [r7, #12]
 80221cc:	edd7 0a04 	vldr	s1, [r7, #16]
 80221d0:	ed97 0a05 	vldr	s0, [r7, #20]
 80221d4:	6878      	ldr	r0, [r7, #4]
 80221d6:	f000 f853 	bl	8022280 <_ZN9LineTrace10PidControlEfff>
 80221da:	eef0 7a40 	vmov.f32	s15, s0
}
 80221de:	eeb0 0a67 	vmov.f32	s0, s15
 80221e2:	3718      	adds	r7, #24
 80221e4:	46bd      	mov	sp, r7
 80221e6:	bd80      	pop	{r7, pc}
 80221e8:	38d1b717 	.word	0x38d1b717

080221ec <_ZN9LineTrace16DeterminePidGainEf>:

float LineTrace::DeterminePidGain(float target_velocity)
{
 80221ec:	b580      	push	{r7, lr}
 80221ee:	b086      	sub	sp, #24
 80221f0:	af00      	add	r7, sp, #0
 80221f2:	6078      	str	r0, [r7, #4]
 80221f4:	ed87 0a00 	vstr	s0, [r7]
    float p_gain, i_gain, d_gain;

    if(target_velocity < TARGET_VELOCITY_0)
 80221f8:	edd7 7a00 	vldr	s15, [r7]
 80221fc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8022200:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022208:	d507      	bpl.n	802221a <_ZN9LineTrace16DeterminePidGainEf+0x2e>
    {
        p_gain = LINE_P_GAIN_0;
 802220a:	4b1a      	ldr	r3, [pc, #104]	; (8022274 <_ZN9LineTrace16DeterminePidGainEf+0x88>)
 802220c:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_0;
 802220e:	f04f 0300 	mov.w	r3, #0
 8022212:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_0;
 8022214:	4b18      	ldr	r3, [pc, #96]	; (8022278 <_ZN9LineTrace16DeterminePidGainEf+0x8c>)
 8022216:	60fb      	str	r3, [r7, #12]
 8022218:	e01b      	b.n	8022252 <_ZN9LineTrace16DeterminePidGainEf+0x66>
    }
    else if(target_velocity < TARGET_VELOCITY_1)
 802221a:	edd7 7a00 	vldr	s15, [r7]
 802221e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8022222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802222a:	d509      	bpl.n	8022240 <_ZN9LineTrace16DeterminePidGainEf+0x54>
    {
        p_gain = LINE_P_GAIN_1;
 802222c:	f04f 0300 	mov.w	r3, #0
 8022230:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_1;
 8022232:	f04f 0300 	mov.w	r3, #0
 8022236:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_1;
 8022238:	f04f 0300 	mov.w	r3, #0
 802223c:	60fb      	str	r3, [r7, #12]
 802223e:	e008      	b.n	8022252 <_ZN9LineTrace16DeterminePidGainEf+0x66>
    }
    else // Error handler
    {
        p_gain = 0;
 8022240:	f04f 0300 	mov.w	r3, #0
 8022244:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 8022246:	f04f 0300 	mov.w	r3, #0
 802224a:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 802224c:	f04f 0300 	mov.w	r3, #0
 8022250:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(p_gain, i_gain, d_gain);
 8022252:	ed97 1a03 	vldr	s2, [r7, #12]
 8022256:	edd7 0a04 	vldr	s1, [r7, #16]
 802225a:	ed97 0a05 	vldr	s0, [r7, #20]
 802225e:	6878      	ldr	r0, [r7, #4]
 8022260:	f000 f80e 	bl	8022280 <_ZN9LineTrace10PidControlEfff>
 8022264:	eef0 7a40 	vmov.f32	s15, s0
}
 8022268:	eeb0 0a67 	vmov.f32	s0, s15
 802226c:	3718      	adds	r7, #24
 802226e:	46bd      	mov	sp, r7
 8022270:	bd80      	pop	{r7, pc}
 8022272:	bf00      	nop
 8022274:	3916feb5 	.word	0x3916feb5
 8022278:	3693a3b6 	.word	0x3693a3b6
 802227c:	00000000 	.word	0x00000000

08022280 <_ZN9LineTrace10PidControlEfff>:

float LineTrace::PidControl(float p_gain, float i_gain, float d_gain)
{
 8022280:	b590      	push	{r4, r7, lr}
 8022282:	b08b      	sub	sp, #44	; 0x2c
 8022284:	af00      	add	r7, sp, #0
 8022286:	60f8      	str	r0, [r7, #12]
 8022288:	ed87 0a02 	vstr	s0, [r7, #8]
 802228c:	edc7 0a01 	vstr	s1, [r7, #4]
 8022290:	ed87 1a00 	vstr	s2, [r7]
    static float pre_error = line_sensor_->LeftRightDifference();
 8022294:	4b52      	ldr	r3, [pc, #328]	; (80223e0 <_ZN9LineTrace10PidControlEfff+0x160>)
 8022296:	781b      	ldrb	r3, [r3, #0]
 8022298:	f3bf 8f5b 	dmb	ish
 802229c:	b2db      	uxtb	r3, r3
 802229e:	f003 0301 	and.w	r3, r3, #1
 80222a2:	2b00      	cmp	r3, #0
 80222a4:	bf0c      	ite	eq
 80222a6:	2301      	moveq	r3, #1
 80222a8:	2300      	movne	r3, #0
 80222aa:	b2db      	uxtb	r3, r3
 80222ac:	2b00      	cmp	r3, #0
 80222ae:	d017      	beq.n	80222e0 <_ZN9LineTrace10PidControlEfff+0x60>
 80222b0:	484b      	ldr	r0, [pc, #300]	; (80223e0 <_ZN9LineTrace10PidControlEfff+0x160>)
 80222b2:	f008 fe0d 	bl	802aed0 <__cxa_guard_acquire>
 80222b6:	4603      	mov	r3, r0
 80222b8:	2b00      	cmp	r3, #0
 80222ba:	bf14      	ite	ne
 80222bc:	2301      	movne	r3, #1
 80222be:	2300      	moveq	r3, #0
 80222c0:	b2db      	uxtb	r3, r3
 80222c2:	2b00      	cmp	r3, #0
 80222c4:	d00c      	beq.n	80222e0 <_ZN9LineTrace10PidControlEfff+0x60>
 80222c6:	68fb      	ldr	r3, [r7, #12]
 80222c8:	685b      	ldr	r3, [r3, #4]
 80222ca:	4618      	mov	r0, r3
 80222cc:	f7ff fe9c 	bl	8022008 <_ZN10LineSensor19LeftRightDifferenceEv>
 80222d0:	eef0 7a40 	vmov.f32	s15, s0
 80222d4:	4b43      	ldr	r3, [pc, #268]	; (80223e4 <_ZN9LineTrace10PidControlEfff+0x164>)
 80222d6:	edc3 7a00 	vstr	s15, [r3]
 80222da:	4841      	ldr	r0, [pc, #260]	; (80223e0 <_ZN9LineTrace10PidControlEfff+0x160>)
 80222dc:	f008 fe04 	bl	802aee8 <__cxa_guard_release>
    float error, differential_error, integral_error;
    float p, d, i;

    error = line_sensor_->LeftRightDifference();
 80222e0:	68fb      	ldr	r3, [r7, #12]
 80222e2:	685b      	ldr	r3, [r3, #4]
 80222e4:	4618      	mov	r0, r3
 80222e6:	f7ff fe8f 	bl	8022008 <_ZN10LineSensor19LeftRightDifferenceEv>
 80222ea:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    differential_error = (error - pre_error) / TIM6_PERIOD_S;
 80222ee:	4b3d      	ldr	r3, [pc, #244]	; (80223e4 <_ZN9LineTrace10PidControlEfff+0x164>)
 80222f0:	edd3 7a00 	vldr	s15, [r3]
 80222f4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80222f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80222fc:	ee17 0a90 	vmov	r0, s15
 8022300:	f7fe f852 	bl	80203a8 <__aeabi_f2d>
 8022304:	a334      	add	r3, pc, #208	; (adr r3, 80223d8 <_ZN9LineTrace10PidControlEfff+0x158>)
 8022306:	e9d3 2300 	ldrd	r2, r3, [r3]
 802230a:	f7fe f9cf 	bl	80206ac <__aeabi_ddiv>
 802230e:	4603      	mov	r3, r0
 8022310:	460c      	mov	r4, r1
 8022312:	4618      	mov	r0, r3
 8022314:	4621      	mov	r1, r4
 8022316:	f7fe fb39 	bl	802098c <__aeabi_d2f>
 802231a:	4603      	mov	r3, r0
 802231c:	623b      	str	r3, [r7, #32]
    integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 802231e:	4b31      	ldr	r3, [pc, #196]	; (80223e4 <_ZN9LineTrace10PidControlEfff+0x164>)
 8022320:	ed93 7a00 	vldr	s14, [r3]
 8022324:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8022328:	ee77 7a27 	vadd.f32	s15, s14, s15
 802232c:	ee17 0a90 	vmov	r0, s15
 8022330:	f7fe f83a 	bl	80203a8 <__aeabi_f2d>
 8022334:	f04f 0200 	mov.w	r2, #0
 8022338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802233c:	f7fe f9b6 	bl	80206ac <__aeabi_ddiv>
 8022340:	4603      	mov	r3, r0
 8022342:	460c      	mov	r4, r1
 8022344:	4618      	mov	r0, r3
 8022346:	4621      	mov	r1, r4
 8022348:	a323      	add	r3, pc, #140	; (adr r3, 80223d8 <_ZN9LineTrace10PidControlEfff+0x158>)
 802234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802234e:	f7fe f883 	bl	8020458 <__aeabi_dmul>
 8022352:	4603      	mov	r3, r0
 8022354:	460c      	mov	r4, r1
 8022356:	4618      	mov	r0, r3
 8022358:	4621      	mov	r1, r4
 802235a:	f7fe fb17 	bl	802098c <__aeabi_d2f>
 802235e:	4603      	mov	r3, r0
 8022360:	61fb      	str	r3, [r7, #28]
    SetIntegralError(integral_error);
 8022362:	ed97 0a07 	vldr	s0, [r7, #28]
 8022366:	68f8      	ldr	r0, [r7, #12]
 8022368:	f000 f844 	bl	80223f4 <_ZN9LineTrace16SetIntegralErrorEf>

    p = p_gain * error;
 802236c:	ed97 7a02 	vldr	s14, [r7, #8]
 8022370:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8022374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022378:	edc7 7a06 	vstr	s15, [r7, #24]
    d = d_gain * differential_error;
 802237c:	ed97 7a00 	vldr	s14, [r7]
 8022380:	edd7 7a08 	vldr	s15, [r7, #32]
 8022384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022388:	edc7 7a05 	vstr	s15, [r7, #20]
    i = i_gain * integral_error_;
 802238c:	68fb      	ldr	r3, [r7, #12]
 802238e:	edd3 7a00 	vldr	s15, [r3]
 8022392:	ed97 7a01 	vldr	s14, [r7, #4]
 8022396:	ee67 7a27 	vmul.f32	s15, s14, s15
 802239a:	edc7 7a04 	vstr	s15, [r7, #16]

#ifdef DEBUG_MODE
    g_trace_p = p;
 802239e:	4a12      	ldr	r2, [pc, #72]	; (80223e8 <_ZN9LineTrace10PidControlEfff+0x168>)
 80223a0:	69bb      	ldr	r3, [r7, #24]
 80223a2:	6013      	str	r3, [r2, #0]
    g_trace_d = d;
 80223a4:	4a11      	ldr	r2, [pc, #68]	; (80223ec <_ZN9LineTrace10PidControlEfff+0x16c>)
 80223a6:	697b      	ldr	r3, [r7, #20]
 80223a8:	6013      	str	r3, [r2, #0]
    g_trace_i = i;
 80223aa:	4a11      	ldr	r2, [pc, #68]	; (80223f0 <_ZN9LineTrace10PidControlEfff+0x170>)
 80223ac:	693b      	ldr	r3, [r7, #16]
 80223ae:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    pre_error = error;
 80223b0:	4a0c      	ldr	r2, [pc, #48]	; (80223e4 <_ZN9LineTrace10PidControlEfff+0x164>)
 80223b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223b4:	6013      	str	r3, [r2, #0]

    return p + d + i;
 80223b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80223ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80223be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80223c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80223c6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80223ca:	eeb0 0a67 	vmov.f32	s0, s15
 80223ce:	372c      	adds	r7, #44	; 0x2c
 80223d0:	46bd      	mov	sp, r7
 80223d2:	bd90      	pop	{r4, r7, pc}
 80223d4:	f3af 8000 	nop.w
 80223d8:	47ae147b 	.word	0x47ae147b
 80223dc:	3f547ae1 	.word	0x3f547ae1
 80223e0:	200000e4 	.word	0x200000e4
 80223e4:	200000e0 	.word	0x200000e0
 80223e8:	20000310 	.word	0x20000310
 80223ec:	20000318 	.word	0x20000318
 80223f0:	20000314 	.word	0x20000314

080223f4 <_ZN9LineTrace16SetIntegralErrorEf>:

void LineTrace::SetIntegralError(float integral_error)
{
 80223f4:	b480      	push	{r7}
 80223f6:	b083      	sub	sp, #12
 80223f8:	af00      	add	r7, sp, #0
 80223fa:	6078      	str	r0, [r7, #4]
 80223fc:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8022400:	687b      	ldr	r3, [r7, #4]
 8022402:	ed93 7a00 	vldr	s14, [r3]
 8022406:	edd7 7a00 	vldr	s15, [r7]
 802240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802240e:	687b      	ldr	r3, [r7, #4]
 8022410:	edc3 7a00 	vstr	s15, [r3]
}
 8022414:	bf00      	nop
 8022416:	370c      	adds	r7, #12
 8022418:	46bd      	mov	sp, r7
 802241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802241e:	4770      	bx	lr

08022420 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8022420:	b480      	push	{r7}
 8022422:	b083      	sub	sp, #12
 8022424:	af00      	add	r7, sp, #0
 8022426:	ed87 0a01 	vstr	s0, [r7, #4]
 802242a:	edd7 7a01 	vldr	s15, [r7, #4]
 802242e:	eef0 7ae7 	vabs.f32	s15, s15
 8022432:	eeb0 0a67 	vmov.f32	s0, s15
 8022436:	370c      	adds	r7, #12
 8022438:	46bd      	mov	sp, r7
 802243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802243e:	4770      	bx	lr

08022440 <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() {}
 8022440:	b580      	push	{r7, lr}
 8022442:	b082      	sub	sp, #8
 8022444:	af00      	add	r7, sp, #0
 8022446:	6078      	str	r0, [r7, #4]
 8022448:	687b      	ldr	r3, [r7, #4]
 802244a:	33e8      	adds	r3, #232	; 0xe8
 802244c:	4618      	mov	r0, r3
 802244e:	f7fe fcb1 	bl	8020db4 <_ZN7EncoderC1Ev>
 8022452:	687b      	ldr	r3, [r7, #4]
 8022454:	33f8      	adds	r3, #248	; 0xf8
 8022456:	4618      	mov	r0, r3
 8022458:	f7fe ff9f 	bl	802139a <_ZN8Iim42652C1Ev>
 802245c:	687b      	ldr	r3, [r7, #4]
 802245e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022462:	4618      	mov	r0, r3
 8022464:	f003 fa4c 	bl	8025900 <_ZN10SideSensorC1Ev>
 8022468:	687b      	ldr	r3, [r7, #4]
 802246a:	4618      	mov	r0, r3
 802246c:	3708      	adds	r7, #8
 802246e:	46bd      	mov	sp, r7
 8022470:	bd80      	pop	{r7, pc}
 8022472:	0000      	movs	r0, r0
 8022474:	0000      	movs	r0, r0
	...

08022478 <_ZN6Logger7LoggingEh>:
    side_sensor_ = side_sensor;
}
*/

void Logger::Logging(uint8_t process_complete)
{
 8022478:	b5b0      	push	{r4, r5, r7, lr}
 802247a:	b08c      	sub	sp, #48	; 0x30
 802247c:	af00      	add	r7, sp, #0
 802247e:	6078      	str	r0, [r7, #4]
 8022480:	460b      	mov	r3, r1
 8022482:	70fb      	strb	r3, [r7, #3]
    float distance = encoder.GetDistanceStack();
 8022484:	687b      	ldr	r3, [r7, #4]
 8022486:	33e8      	adds	r3, #232	; 0xe8
 8022488:	4618      	mov	r0, r3
 802248a:	f7fe fd7e 	bl	8020f8a <_ZN7Encoder16GetDistanceStackEv>
 802248e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    if(distance < LOGGING_CONST_DISTANCE) return;
 8022492:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8022496:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 802249a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802249e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224a2:	f100 81f5 	bmi.w	8022890 <_ZN6Logger7LoggingEh+0x418>
    encoder.ResetDistanceStack();
 80224a6:	687b      	ldr	r3, [r7, #4]
 80224a8:	33e8      	adds	r3, #232	; 0xe8
 80224aa:	4618      	mov	r0, r3
 80224ac:	f7fe fd50 	bl	8020f50 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0; // flash address count. (0 ~ 6199)
    static uint16_t log_index = 0;   // Count up when interrupt.

    /* Mapping data of distance */
    const_distance_log_[log_index] = distance;
 80224b0:	4bb3      	ldr	r3, [pc, #716]	; (8022780 <_ZN6Logger7LoggingEh+0x308>)
 80224b2:	881b      	ldrh	r3, [r3, #0]
 80224b4:	687a      	ldr	r2, [r7, #4]
 80224b6:	009b      	lsls	r3, r3, #2
 80224b8:	4413      	add	r3, r2
 80224ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80224bc:	601a      	str	r2, [r3, #0]

    /* Mapping data of radian */
    double degree = iim_42652.GetDegreeStackZ();
 80224be:	687b      	ldr	r3, [r7, #4]
 80224c0:	33f8      	adds	r3, #248	; 0xf8
 80224c2:	4618      	mov	r0, r3
 80224c4:	f7ff f96c 	bl	80217a0 <_ZN8Iim4265215GetDegreeStackZEv>
 80224c8:	ed87 0b06 	vstr	d0, [r7, #24]
    float radian = static_cast<float>(degree * M_PI / 180.0);
 80224cc:	a3aa      	add	r3, pc, #680	; (adr r3, 8022778 <_ZN6Logger7LoggingEh+0x300>)
 80224ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80224d6:	f7fd ffbf 	bl	8020458 <__aeabi_dmul>
 80224da:	4603      	mov	r3, r0
 80224dc:	460c      	mov	r4, r1
 80224de:	4618      	mov	r0, r3
 80224e0:	4621      	mov	r1, r4
 80224e2:	f04f 0200 	mov.w	r2, #0
 80224e6:	4ba7      	ldr	r3, [pc, #668]	; (8022784 <_ZN6Logger7LoggingEh+0x30c>)
 80224e8:	f7fe f8e0 	bl	80206ac <__aeabi_ddiv>
 80224ec:	4603      	mov	r3, r0
 80224ee:	460c      	mov	r4, r1
 80224f0:	4618      	mov	r0, r3
 80224f2:	4621      	mov	r1, r4
 80224f4:	f7fe fa4a 	bl	802098c <__aeabi_d2f>
 80224f8:	4603      	mov	r3, r0
 80224fa:	617b      	str	r3, [r7, #20]
    radian_log_[log_index] = radian;
 80224fc:	4ba0      	ldr	r3, [pc, #640]	; (8022780 <_ZN6Logger7LoggingEh+0x308>)
 80224fe:	881b      	ldrh	r3, [r3, #0]
 8022500:	687a      	ldr	r2, [r7, #4]
 8022502:	330a      	adds	r3, #10
 8022504:	009b      	lsls	r3, r3, #2
 8022506:	4413      	add	r3, r2
 8022508:	697a      	ldr	r2, [r7, #20]
 802250a:	601a      	str	r2, [r3, #0]
    iim_42652.ResetDegreeStackZ();
 802250c:	687b      	ldr	r3, [r7, #4]
 802250e:	33f8      	adds	r3, #248	; 0xf8
 8022510:	4618      	mov	r0, r3
 8022512:	f7ff f935 	bl	8021780 <_ZN8Iim4265217ResetDegreeStackZEv>

    /* Various log */
    static uint8_t pre_corner_cnt = side_sensor.GetCornerMarkerCount();
 8022516:	4b9c      	ldr	r3, [pc, #624]	; (8022788 <_ZN6Logger7LoggingEh+0x310>)
 8022518:	781b      	ldrb	r3, [r3, #0]
 802251a:	f3bf 8f5b 	dmb	ish
 802251e:	b2db      	uxtb	r3, r3
 8022520:	f003 0301 	and.w	r3, r3, #1
 8022524:	2b00      	cmp	r3, #0
 8022526:	bf0c      	ite	eq
 8022528:	2301      	moveq	r3, #1
 802252a:	2300      	movne	r3, #0
 802252c:	b2db      	uxtb	r3, r3
 802252e:	2b00      	cmp	r3, #0
 8022530:	d017      	beq.n	8022562 <_ZN6Logger7LoggingEh+0xea>
 8022532:	4895      	ldr	r0, [pc, #596]	; (8022788 <_ZN6Logger7LoggingEh+0x310>)
 8022534:	f008 fccc 	bl	802aed0 <__cxa_guard_acquire>
 8022538:	4603      	mov	r3, r0
 802253a:	2b00      	cmp	r3, #0
 802253c:	bf14      	ite	ne
 802253e:	2301      	movne	r3, #1
 8022540:	2300      	moveq	r3, #0
 8022542:	b2db      	uxtb	r3, r3
 8022544:	2b00      	cmp	r3, #0
 8022546:	d00c      	beq.n	8022562 <_ZN6Logger7LoggingEh+0xea>
 8022548:	687b      	ldr	r3, [r7, #4]
 802254a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802254e:	4618      	mov	r0, r3
 8022550:	f003 fc71 	bl	8025e36 <_ZN10SideSensor20GetCornerMarkerCountEv>
 8022554:	4603      	mov	r3, r0
 8022556:	461a      	mov	r2, r3
 8022558:	4b8c      	ldr	r3, [pc, #560]	; (802278c <_ZN6Logger7LoggingEh+0x314>)
 802255a:	701a      	strb	r2, [r3, #0]
 802255c:	488a      	ldr	r0, [pc, #552]	; (8022788 <_ZN6Logger7LoggingEh+0x310>)
 802255e:	f008 fcc3 	bl	802aee8 <__cxa_guard_release>
    static uint8_t pre_cross_cnt  = side_sensor.GetCrossLineCount();
 8022562:	4b8b      	ldr	r3, [pc, #556]	; (8022790 <_ZN6Logger7LoggingEh+0x318>)
 8022564:	781b      	ldrb	r3, [r3, #0]
 8022566:	f3bf 8f5b 	dmb	ish
 802256a:	b2db      	uxtb	r3, r3
 802256c:	f003 0301 	and.w	r3, r3, #1
 8022570:	2b00      	cmp	r3, #0
 8022572:	bf0c      	ite	eq
 8022574:	2301      	moveq	r3, #1
 8022576:	2300      	movne	r3, #0
 8022578:	b2db      	uxtb	r3, r3
 802257a:	2b00      	cmp	r3, #0
 802257c:	d017      	beq.n	80225ae <_ZN6Logger7LoggingEh+0x136>
 802257e:	4884      	ldr	r0, [pc, #528]	; (8022790 <_ZN6Logger7LoggingEh+0x318>)
 8022580:	f008 fca6 	bl	802aed0 <__cxa_guard_acquire>
 8022584:	4603      	mov	r3, r0
 8022586:	2b00      	cmp	r3, #0
 8022588:	bf14      	ite	ne
 802258a:	2301      	movne	r3, #1
 802258c:	2300      	moveq	r3, #0
 802258e:	b2db      	uxtb	r3, r3
 8022590:	2b00      	cmp	r3, #0
 8022592:	d00c      	beq.n	80225ae <_ZN6Logger7LoggingEh+0x136>
 8022594:	687b      	ldr	r3, [r7, #4]
 8022596:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802259a:	4618      	mov	r0, r3
 802259c:	f003 fc57 	bl	8025e4e <_ZN10SideSensor17GetCrossLineCountEv>
 80225a0:	4603      	mov	r3, r0
 80225a2:	461a      	mov	r2, r3
 80225a4:	4b7b      	ldr	r3, [pc, #492]	; (8022794 <_ZN6Logger7LoggingEh+0x31c>)
 80225a6:	701a      	strb	r2, [r3, #0]
 80225a8:	4879      	ldr	r0, [pc, #484]	; (8022790 <_ZN6Logger7LoggingEh+0x318>)
 80225aa:	f008 fc9d 	bl	802aee8 <__cxa_guard_release>
    uint8_t corner_cnt = side_sensor.GetCornerMarkerCount();
 80225ae:	687b      	ldr	r3, [r7, #4]
 80225b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80225b4:	4618      	mov	r0, r3
 80225b6:	f003 fc3e 	bl	8025e36 <_ZN10SideSensor20GetCornerMarkerCountEv>
 80225ba:	4603      	mov	r3, r0
 80225bc:	74fb      	strb	r3, [r7, #19]
    uint8_t cross_cnt  = side_sensor.GetCrossLineCount();
 80225be:	687b      	ldr	r3, [r7, #4]
 80225c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80225c4:	4618      	mov	r0, r3
 80225c6:	f003 fc42 	bl	8025e4e <_ZN10SideSensor17GetCrossLineCountEv>
 80225ca:	4603      	mov	r3, r0
 80225cc:	74bb      	strb	r3, [r7, #18]
    uint16_t various_buff = 0;
 80225ce:	2300      	movs	r3, #0
 80225d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(process_complete != 0)        various_buff |= 0x0004;
 80225d2:	78fb      	ldrb	r3, [r7, #3]
 80225d4:	2b00      	cmp	r3, #0
 80225d6:	d003      	beq.n	80225e0 <_ZN6Logger7LoggingEh+0x168>
 80225d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80225da:	f043 0304 	orr.w	r3, r3, #4
 80225de:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_corner_cnt != corner_cnt) various_buff |= 0x0002;
 80225e0:	4b6a      	ldr	r3, [pc, #424]	; (802278c <_ZN6Logger7LoggingEh+0x314>)
 80225e2:	781b      	ldrb	r3, [r3, #0]
 80225e4:	7cfa      	ldrb	r2, [r7, #19]
 80225e6:	429a      	cmp	r2, r3
 80225e8:	d003      	beq.n	80225f2 <_ZN6Logger7LoggingEh+0x17a>
 80225ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80225ec:	f043 0302 	orr.w	r3, r3, #2
 80225f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_cross_cnt != cross_cnt)   various_buff |= 0x0001;
 80225f2:	4b68      	ldr	r3, [pc, #416]	; (8022794 <_ZN6Logger7LoggingEh+0x31c>)
 80225f4:	781b      	ldrb	r3, [r3, #0]
 80225f6:	7cba      	ldrb	r2, [r7, #18]
 80225f8:	429a      	cmp	r2, r3
 80225fa:	d003      	beq.n	8022604 <_ZN6Logger7LoggingEh+0x18c>
 80225fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80225fe:	f043 0301 	orr.w	r3, r3, #1
 8022602:	85fb      	strh	r3, [r7, #46]	; 0x2e
    pre_corner_cnt = corner_cnt;
 8022604:	4a61      	ldr	r2, [pc, #388]	; (802278c <_ZN6Logger7LoggingEh+0x314>)
 8022606:	7cfb      	ldrb	r3, [r7, #19]
 8022608:	7013      	strb	r3, [r2, #0]
    pre_cross_cnt  = cross_cnt;
 802260a:	4a62      	ldr	r2, [pc, #392]	; (8022794 <_ZN6Logger7LoggingEh+0x31c>)
 802260c:	7cbb      	ldrb	r3, [r7, #18]
 802260e:	7013      	strb	r3, [r2, #0]
    various_log_[log_index] = various_buff;
 8022610:	4b5b      	ldr	r3, [pc, #364]	; (8022780 <_ZN6Logger7LoggingEh+0x308>)
 8022612:	881b      	ldrh	r3, [r3, #0]
 8022614:	461a      	mov	r2, r3
 8022616:	687b      	ldr	r3, [r7, #4]
 8022618:	3228      	adds	r2, #40	; 0x28
 802261a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 802261c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /* Copy periodic log */
    if(log_index == LAST_LOG_INDEX)
 8022620:	4b57      	ldr	r3, [pc, #348]	; (8022780 <_ZN6Logger7LoggingEh+0x308>)
 8022622:	881b      	ldrh	r3, [r3, #0]
 8022624:	2b09      	cmp	r3, #9
 8022626:	d120      	bne.n	802266a <_ZN6Logger7LoggingEh+0x1f2>
    {
        log_index = 0;
 8022628:	4b55      	ldr	r3, [pc, #340]	; (8022780 <_ZN6Logger7LoggingEh+0x308>)
 802262a:	2200      	movs	r2, #0
 802262c:	801a      	strh	r2, [r3, #0]
        memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 802262e:	687b      	ldr	r3, [r7, #4]
 8022630:	3364      	adds	r3, #100	; 0x64
 8022632:	6879      	ldr	r1, [r7, #4]
 8022634:	2228      	movs	r2, #40	; 0x28
 8022636:	4618      	mov	r0, r3
 8022638:	f008 fc84 	bl	802af44 <memcpy>
        memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 802263c:	687b      	ldr	r3, [r7, #4]
 802263e:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	3328      	adds	r3, #40	; 0x28
 8022646:	2228      	movs	r2, #40	; 0x28
 8022648:	4619      	mov	r1, r3
 802264a:	f008 fc7b 	bl	802af44 <memcpy>
        memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 802264e:	687b      	ldr	r3, [r7, #4]
 8022650:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8022654:	687b      	ldr	r3, [r7, #4]
 8022656:	3350      	adds	r3, #80	; 0x50
 8022658:	2214      	movs	r2, #20
 802265a:	4619      	mov	r1, r3
 802265c:	f008 fc72 	bl	802af44 <memcpy>
        periodic_write_enable_ = 1;
 8022660:	687b      	ldr	r3, [r7, #4]
 8022662:	2201      	movs	r2, #1
 8022664:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8022668:	e005      	b.n	8022676 <_ZN6Logger7LoggingEh+0x1fe>
    }
    else log_index++;
 802266a:	4b45      	ldr	r3, [pc, #276]	; (8022780 <_ZN6Logger7LoggingEh+0x308>)
 802266c:	881b      	ldrh	r3, [r3, #0]
 802266e:	3301      	adds	r3, #1
 8022670:	b29a      	uxth	r2, r3
 8022672:	4b43      	ldr	r3, [pc, #268]	; (8022780 <_ZN6Logger7LoggingEh+0x308>)
 8022674:	801a      	strh	r2, [r3, #0]

    /* Distance correction */
    uint16_t correction_address = now_address;
 8022676:	4b48      	ldr	r3, [pc, #288]	; (8022798 <_ZN6Logger7LoggingEh+0x320>)
 8022678:	881b      	ldrh	r3, [r3, #0]
 802267a:	823b      	strh	r3, [r7, #16]
    float excess = excess_stack_;
 802267c:	687b      	ldr	r3, [r7, #4]
 802267e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8022682:	60fb      	str	r3, [r7, #12]
    excess += distance - LOGGING_CONST_DISTANCE;
 8022684:	68f8      	ldr	r0, [r7, #12]
 8022686:	f7fd fe8f 	bl	80203a8 <__aeabi_f2d>
 802268a:	4604      	mov	r4, r0
 802268c:	460d      	mov	r5, r1
 802268e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022690:	f7fd fe8a 	bl	80203a8 <__aeabi_f2d>
 8022694:	f04f 0200 	mov.w	r2, #0
 8022698:	4b40      	ldr	r3, [pc, #256]	; (802279c <_ZN6Logger7LoggingEh+0x324>)
 802269a:	f7fd fd25 	bl	80200e8 <__aeabi_dsub>
 802269e:	4602      	mov	r2, r0
 80226a0:	460b      	mov	r3, r1
 80226a2:	4620      	mov	r0, r4
 80226a4:	4629      	mov	r1, r5
 80226a6:	f7fd fd21 	bl	80200ec <__adddf3>
 80226aa:	4603      	mov	r3, r0
 80226ac:	460c      	mov	r4, r1
 80226ae:	4618      	mov	r0, r3
 80226b0:	4621      	mov	r1, r4
 80226b2:	f7fe f96b 	bl	802098c <__aeabi_d2f>
 80226b6:	4603      	mov	r3, r0
 80226b8:	60fb      	str	r3, [r7, #12]
    if(excess > LOGGING_CONST_DISTANCE)
 80226ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80226be:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80226c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80226c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226ca:	dd6b      	ble.n	80227a4 <_ZN6Logger7LoggingEh+0x32c>
    {
        const_distance_log_[log_index] = excess;
 80226cc:	4b2c      	ldr	r3, [pc, #176]	; (8022780 <_ZN6Logger7LoggingEh+0x308>)
 80226ce:	881b      	ldrh	r3, [r3, #0]
 80226d0:	687a      	ldr	r2, [r7, #4]
 80226d2:	009b      	lsls	r3, r3, #2
 80226d4:	4413      	add	r3, r2
 80226d6:	68fa      	ldr	r2, [r7, #12]
 80226d8:	601a      	str	r2, [r3, #0]
        radian_log_[log_index] = radian;
 80226da:	4b29      	ldr	r3, [pc, #164]	; (8022780 <_ZN6Logger7LoggingEh+0x308>)
 80226dc:	881b      	ldrh	r3, [r3, #0]
 80226de:	687a      	ldr	r2, [r7, #4]
 80226e0:	330a      	adds	r3, #10
 80226e2:	009b      	lsls	r3, r3, #2
 80226e4:	4413      	add	r3, r2
 80226e6:	697a      	ldr	r2, [r7, #20]
 80226e8:	601a      	str	r2, [r3, #0]
        various_log_[log_index] = VARIOUS_LOG_DATA_WHEN_COPY;
 80226ea:	4b25      	ldr	r3, [pc, #148]	; (8022780 <_ZN6Logger7LoggingEh+0x308>)
 80226ec:	881b      	ldrh	r3, [r3, #0]
 80226ee:	461a      	mov	r2, r3
 80226f0:	687b      	ldr	r3, [r7, #4]
 80226f2:	3228      	adds	r2, #40	; 0x28
 80226f4:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 80226f8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        excess_stack_ = excess - LOGGING_CONST_DISTANCE;
 80226fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8022700:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022704:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022708:	687b      	ldr	r3, [r7, #4]
 802270a:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
        now_address++;
 802270e:	4b22      	ldr	r3, [pc, #136]	; (8022798 <_ZN6Logger7LoggingEh+0x320>)
 8022710:	881b      	ldrh	r3, [r3, #0]
 8022712:	3301      	adds	r3, #1
 8022714:	b29a      	uxth	r2, r3
 8022716:	4b20      	ldr	r3, [pc, #128]	; (8022798 <_ZN6Logger7LoggingEh+0x320>)
 8022718:	801a      	strh	r2, [r3, #0]

        /* Copy periodic log */
        if(log_index == LAST_LOG_INDEX)
 802271a:	4b19      	ldr	r3, [pc, #100]	; (8022780 <_ZN6Logger7LoggingEh+0x308>)
 802271c:	881b      	ldrh	r3, [r3, #0]
 802271e:	2b09      	cmp	r3, #9
 8022720:	d120      	bne.n	8022764 <_ZN6Logger7LoggingEh+0x2ec>
        {
            log_index = 0;
 8022722:	4b17      	ldr	r3, [pc, #92]	; (8022780 <_ZN6Logger7LoggingEh+0x308>)
 8022724:	2200      	movs	r2, #0
 8022726:	801a      	strh	r2, [r3, #0]
            memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 8022728:	687b      	ldr	r3, [r7, #4]
 802272a:	3364      	adds	r3, #100	; 0x64
 802272c:	6879      	ldr	r1, [r7, #4]
 802272e:	2228      	movs	r2, #40	; 0x28
 8022730:	4618      	mov	r0, r3
 8022732:	f008 fc07 	bl	802af44 <memcpy>
            memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 8022736:	687b      	ldr	r3, [r7, #4]
 8022738:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 802273c:	687b      	ldr	r3, [r7, #4]
 802273e:	3328      	adds	r3, #40	; 0x28
 8022740:	2228      	movs	r2, #40	; 0x28
 8022742:	4619      	mov	r1, r3
 8022744:	f008 fbfe 	bl	802af44 <memcpy>
            memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 8022748:	687b      	ldr	r3, [r7, #4]
 802274a:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 802274e:	687b      	ldr	r3, [r7, #4]
 8022750:	3350      	adds	r3, #80	; 0x50
 8022752:	2214      	movs	r2, #20
 8022754:	4619      	mov	r1, r3
 8022756:	f008 fbf5 	bl	802af44 <memcpy>
            periodic_write_enable_ = 1;
 802275a:	687b      	ldr	r3, [r7, #4]
 802275c:	2201      	movs	r2, #1
 802275e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8022762:	e023      	b.n	80227ac <_ZN6Logger7LoggingEh+0x334>
        }
        else log_index++;
 8022764:	4b06      	ldr	r3, [pc, #24]	; (8022780 <_ZN6Logger7LoggingEh+0x308>)
 8022766:	881b      	ldrh	r3, [r3, #0]
 8022768:	3301      	adds	r3, #1
 802276a:	b29a      	uxth	r2, r3
 802276c:	4b04      	ldr	r3, [pc, #16]	; (8022780 <_ZN6Logger7LoggingEh+0x308>)
 802276e:	801a      	strh	r2, [r3, #0]
 8022770:	e01c      	b.n	80227ac <_ZN6Logger7LoggingEh+0x334>
 8022772:	bf00      	nop
 8022774:	f3af 8000 	nop.w
 8022778:	54442d18 	.word	0x54442d18
 802277c:	400921fb 	.word	0x400921fb
 8022780:	200000ea 	.word	0x200000ea
 8022784:	40668000 	.word	0x40668000
 8022788:	200000f0 	.word	0x200000f0
 802278c:	200000ec 	.word	0x200000ec
 8022790:	200000f8 	.word	0x200000f8
 8022794:	200000f4 	.word	0x200000f4
 8022798:	200000e8 	.word	0x200000e8
 802279c:	40340000 	.word	0x40340000
 80227a0:	43ca0000 	.word	0x43ca0000
    }
    else excess_stack_ = excess;
 80227a4:	687b      	ldr	r3, [r7, #4]
 80227a6:	68fa      	ldr	r2, [r7, #12]
 80227a8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    /* Accel position log */
    static uint16_t accel_straight_cnt = 0;
    static uint8_t accel_step = 0;
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA)
 80227ac:	687b      	ldr	r3, [r7, #4]
 80227ae:	33e8      	adds	r3, #232	; 0xe8
 80227b0:	4618      	mov	r0, r3
 80227b2:	f7fe fbf9 	bl	8020fa8 <_ZN7Encoder15AngularVelocityEv>
 80227b6:	eef0 7a40 	vmov.f32	s15, s0
 80227ba:	eeb0 0a67 	vmov.f32	s0, s15
 80227be:	f7ff fe2f 	bl	8022420 <_ZSt4fabsf>
 80227c2:	eeb0 7a40 	vmov.f32	s14, s0
 80227c6:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 80227a0 <_ZN6Logger7LoggingEh+0x328>
 80227ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80227ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227d2:	bf4c      	ite	mi
 80227d4:	2301      	movmi	r3, #1
 80227d6:	2300      	movpl	r3, #0
 80227d8:	b2db      	uxtb	r3, r3
 80227da:	2b00      	cmp	r3, #0
 80227dc:	d021      	beq.n	8022822 <_ZN6Logger7LoggingEh+0x3aa>
    {
        accel_straight_cnt++;
 80227de:	4b2e      	ldr	r3, [pc, #184]	; (8022898 <_ZN6Logger7LoggingEh+0x420>)
 80227e0:	881b      	ldrh	r3, [r3, #0]
 80227e2:	3301      	adds	r3, #1
 80227e4:	b29a      	uxth	r2, r3
 80227e6:	4b2c      	ldr	r3, [pc, #176]	; (8022898 <_ZN6Logger7LoggingEh+0x420>)
 80227e8:	801a      	strh	r2, [r3, #0]
        if(accel_straight_cnt >= CNT_OF_ACCEL_STEP_UP && accel_step < NUM_OF_ACCEL_STEP)
 80227ea:	4b2b      	ldr	r3, [pc, #172]	; (8022898 <_ZN6Logger7LoggingEh+0x420>)
 80227ec:	881b      	ldrh	r3, [r3, #0]
 80227ee:	2b03      	cmp	r3, #3
 80227f0:	d947      	bls.n	8022882 <_ZN6Logger7LoggingEh+0x40a>
 80227f2:	4b2a      	ldr	r3, [pc, #168]	; (802289c <_ZN6Logger7LoggingEh+0x424>)
 80227f4:	781b      	ldrb	r3, [r3, #0]
 80227f6:	2b04      	cmp	r3, #4
 80227f8:	d843      	bhi.n	8022882 <_ZN6Logger7LoggingEh+0x40a>
        {
            accel_step++;
 80227fa:	4b28      	ldr	r3, [pc, #160]	; (802289c <_ZN6Logger7LoggingEh+0x424>)
 80227fc:	781b      	ldrb	r3, [r3, #0]
 80227fe:	3301      	adds	r3, #1
 8022800:	b2da      	uxtb	r2, r3
 8022802:	4b26      	ldr	r3, [pc, #152]	; (802289c <_ZN6Logger7LoggingEh+0x424>)
 8022804:	701a      	strb	r2, [r3, #0]
            accel_address_[accel_step-1] = correction_address - CNT_OF_ACCEL_STEP_UP;
 8022806:	4b25      	ldr	r3, [pc, #148]	; (802289c <_ZN6Logger7LoggingEh+0x424>)
 8022808:	781b      	ldrb	r3, [r3, #0]
 802280a:	1e5a      	subs	r2, r3, #1
 802280c:	8a3b      	ldrh	r3, [r7, #16]
 802280e:	3b04      	subs	r3, #4
 8022810:	b299      	uxth	r1, r3
 8022812:	687b      	ldr	r3, [r7, #4]
 8022814:	3264      	adds	r2, #100	; 0x64
 8022816:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            accel_straight_cnt = 0;
 802281a:	4b1f      	ldr	r3, [pc, #124]	; (8022898 <_ZN6Logger7LoggingEh+0x420>)
 802281c:	2200      	movs	r2, #0
 802281e:	801a      	strh	r2, [r3, #0]
 8022820:	e02f      	b.n	8022882 <_ZN6Logger7LoggingEh+0x40a>
        }
    }
    else if(accel_step != 0)
 8022822:	4b1e      	ldr	r3, [pc, #120]	; (802289c <_ZN6Logger7LoggingEh+0x424>)
 8022824:	781b      	ldrb	r3, [r3, #0]
 8022826:	2b00      	cmp	r3, #0
 8022828:	d028      	beq.n	802287c <_ZN6Logger7LoggingEh+0x404>
    {
        for(int i = 1; i <= accel_step; i++)
 802282a:	2301      	movs	r3, #1
 802282c:	62bb      	str	r3, [r7, #40]	; 0x28
 802282e:	4b1b      	ldr	r3, [pc, #108]	; (802289c <_ZN6Logger7LoggingEh+0x424>)
 8022830:	781b      	ldrb	r3, [r3, #0]
 8022832:	461a      	mov	r2, r3
 8022834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022836:	4293      	cmp	r3, r2
 8022838:	dc14      	bgt.n	8022864 <_ZN6Logger7LoggingEh+0x3ec>
        {
            decel_address_[i-1] = (correction_address-1) - (DIFF_NEXT_ACCEL_STEP * i);
 802283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802283c:	b29b      	uxth	r3, r3
 802283e:	005b      	lsls	r3, r3, #1
 8022840:	b29b      	uxth	r3, r3
 8022842:	8a3a      	ldrh	r2, [r7, #16]
 8022844:	1ad3      	subs	r3, r2, r3
 8022846:	b29a      	uxth	r2, r3
 8022848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802284a:	3b01      	subs	r3, #1
 802284c:	3a01      	subs	r2, #1
 802284e:	b291      	uxth	r1, r2
 8022850:	687a      	ldr	r2, [r7, #4]
 8022852:	3368      	adds	r3, #104	; 0x68
 8022854:	005b      	lsls	r3, r3, #1
 8022856:	4413      	add	r3, r2
 8022858:	460a      	mov	r2, r1
 802285a:	805a      	strh	r2, [r3, #2]
        for(int i = 1; i <= accel_step; i++)
 802285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802285e:	3301      	adds	r3, #1
 8022860:	62bb      	str	r3, [r7, #40]	; 0x28
 8022862:	e7e4      	b.n	802282e <_ZN6Logger7LoggingEh+0x3b6>
        }
        accel_position_write_enable_ = accel_step;
 8022864:	4b0d      	ldr	r3, [pc, #52]	; (802289c <_ZN6Logger7LoggingEh+0x424>)
 8022866:	781a      	ldrb	r2, [r3, #0]
 8022868:	687b      	ldr	r3, [r7, #4]
 802286a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        accel_step = 0;
 802286e:	4b0b      	ldr	r3, [pc, #44]	; (802289c <_ZN6Logger7LoggingEh+0x424>)
 8022870:	2200      	movs	r2, #0
 8022872:	701a      	strb	r2, [r3, #0]
        accel_straight_cnt = 0;
 8022874:	4b08      	ldr	r3, [pc, #32]	; (8022898 <_ZN6Logger7LoggingEh+0x420>)
 8022876:	2200      	movs	r2, #0
 8022878:	801a      	strh	r2, [r3, #0]
 802287a:	e002      	b.n	8022882 <_ZN6Logger7LoggingEh+0x40a>
    }
    else accel_straight_cnt = 0;
 802287c:	4b06      	ldr	r3, [pc, #24]	; (8022898 <_ZN6Logger7LoggingEh+0x420>)
 802287e:	2200      	movs	r2, #0
 8022880:	801a      	strh	r2, [r3, #0]

    now_address++;
 8022882:	4b07      	ldr	r3, [pc, #28]	; (80228a0 <_ZN6Logger7LoggingEh+0x428>)
 8022884:	881b      	ldrh	r3, [r3, #0]
 8022886:	3301      	adds	r3, #1
 8022888:	b29a      	uxth	r2, r3
 802288a:	4b05      	ldr	r3, [pc, #20]	; (80228a0 <_ZN6Logger7LoggingEh+0x428>)
 802288c:	801a      	strh	r2, [r3, #0]
 802288e:	e000      	b.n	8022892 <_ZN6Logger7LoggingEh+0x41a>
    if(distance < LOGGING_CONST_DISTANCE) return;
 8022890:	bf00      	nop
}
 8022892:	3730      	adds	r7, #48	; 0x30
 8022894:	46bd      	mov	sp, r7
 8022896:	bdb0      	pop	{r4, r5, r7, pc}
 8022898:	200000fc 	.word	0x200000fc
 802289c:	200000fe 	.word	0x200000fe
 80228a0:	200000e8 	.word	0x200000e8

080228a4 <_ZN6Logger16StorePeriodicLogEv>:

uint8_t Logger::StorePeriodicLog()
{
 80228a4:	b580      	push	{r7, lr}
 80228a6:	b084      	sub	sp, #16
 80228a8:	af00      	add	r7, sp, #0
 80228aa:	6078      	str	r0, [r7, #4]
    if(periodic_write_enable_ == 0) return 0;
 80228ac:	687b      	ldr	r3, [r7, #4]
 80228ae:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80228b2:	2b00      	cmp	r3, #0
 80228b4:	d101      	bne.n	80228ba <_ZN6Logger16StorePeriodicLogEv+0x16>
 80228b6:	2300      	movs	r3, #0
 80228b8:	e087      	b.n	80229ca <_ZN6Logger16StorePeriodicLogEv+0x126>
    else periodic_write_enable_ = 0;
 80228ba:	687b      	ldr	r3, [r7, #4]
 80228bc:	2200      	movs	r2, #0
 80228be:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    static uint32_t address_a = HEAD_ADDRESS_BLOCK_A;
    static uint32_t address_b = HEAD_ADDRESS_BLOCK_B;
    static uint32_t address_c = HEAD_ADDRESS_BLOCK_C;
    uint8_t result = 0;
 80228c2:	2300      	movs	r3, #0
 80228c4:	73fb      	strb	r3, [r7, #15]

    if(!flash.CheckBlankWord(address_a, NUM_OF_LOG))     return 0x10;
 80228c6:	687b      	ldr	r3, [r7, #4]
 80228c8:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80228cc:	4b41      	ldr	r3, [pc, #260]	; (80229d4 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80228ce:	681b      	ldr	r3, [r3, #0]
 80228d0:	220a      	movs	r2, #10
 80228d2:	4619      	mov	r1, r3
 80228d4:	f7fe fd0e 	bl	80212f4 <_ZN5Flash14CheckBlankWordEmm>
 80228d8:	4603      	mov	r3, r0
 80228da:	f083 0301 	eor.w	r3, r3, #1
 80228de:	b2db      	uxtb	r3, r3
 80228e0:	2b00      	cmp	r3, #0
 80228e2:	d001      	beq.n	80228e8 <_ZN6Logger16StorePeriodicLogEv+0x44>
 80228e4:	2310      	movs	r3, #16
 80228e6:	e070      	b.n	80229ca <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankWord(address_b, NUM_OF_LOG))     return 0x20;
 80228e8:	687b      	ldr	r3, [r7, #4]
 80228ea:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80228ee:	4b3a      	ldr	r3, [pc, #232]	; (80229d8 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80228f0:	681b      	ldr	r3, [r3, #0]
 80228f2:	220a      	movs	r2, #10
 80228f4:	4619      	mov	r1, r3
 80228f6:	f7fe fcfd 	bl	80212f4 <_ZN5Flash14CheckBlankWordEmm>
 80228fa:	4603      	mov	r3, r0
 80228fc:	f083 0301 	eor.w	r3, r3, #1
 8022900:	b2db      	uxtb	r3, r3
 8022902:	2b00      	cmp	r3, #0
 8022904:	d001      	beq.n	802290a <_ZN6Logger16StorePeriodicLogEv+0x66>
 8022906:	2320      	movs	r3, #32
 8022908:	e05f      	b.n	80229ca <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankHalfword(address_c, NUM_OF_LOG)) return 0x40;
 802290a:	687b      	ldr	r3, [r7, #4]
 802290c:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022910:	4b32      	ldr	r3, [pc, #200]	; (80229dc <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022912:	681b      	ldr	r3, [r3, #0]
 8022914:	220a      	movs	r2, #10
 8022916:	4619      	mov	r1, r3
 8022918:	f7fe fc98 	bl	802124c <_ZN5Flash18CheckBlankHalfwordEmm>
 802291c:	4603      	mov	r3, r0
 802291e:	f083 0301 	eor.w	r3, r3, #1
 8022922:	b2db      	uxtb	r3, r3
 8022924:	2b00      	cmp	r3, #0
 8022926:	d001      	beq.n	802292c <_ZN6Logger16StorePeriodicLogEv+0x88>
 8022928:	2340      	movs	r3, #64	; 0x40
 802292a:	e04e      	b.n	80229ca <_ZN6Logger16StorePeriodicLogEv+0x126>

    if(!flash.StoreFloat(address_a, const_distance_copy_, NUM_OF_LOG)) result |= 0x01;
 802292c:	687b      	ldr	r3, [r7, #4]
 802292e:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022932:	4b28      	ldr	r3, [pc, #160]	; (80229d4 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 8022934:	6819      	ldr	r1, [r3, #0]
 8022936:	687b      	ldr	r3, [r7, #4]
 8022938:	f103 0264 	add.w	r2, r3, #100	; 0x64
 802293c:	230a      	movs	r3, #10
 802293e:	f7fe fbf0 	bl	8021122 <_ZN5Flash10StoreFloatEmPfm>
 8022942:	4603      	mov	r3, r0
 8022944:	f083 0301 	eor.w	r3, r3, #1
 8022948:	b2db      	uxtb	r3, r3
 802294a:	2b00      	cmp	r3, #0
 802294c:	d003      	beq.n	8022956 <_ZN6Logger16StorePeriodicLogEv+0xb2>
 802294e:	7bfb      	ldrb	r3, [r7, #15]
 8022950:	f043 0301 	orr.w	r3, r3, #1
 8022954:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreFloat(address_b, radian_copy_, NUM_OF_LOG))         result |= 0x02;
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 802295c:	4b1e      	ldr	r3, [pc, #120]	; (80229d8 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 802295e:	6819      	ldr	r1, [r3, #0]
 8022960:	687b      	ldr	r3, [r7, #4]
 8022962:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8022966:	230a      	movs	r3, #10
 8022968:	f7fe fbdb 	bl	8021122 <_ZN5Flash10StoreFloatEmPfm>
 802296c:	4603      	mov	r3, r0
 802296e:	f083 0301 	eor.w	r3, r3, #1
 8022972:	b2db      	uxtb	r3, r3
 8022974:	2b00      	cmp	r3, #0
 8022976:	d003      	beq.n	8022980 <_ZN6Logger16StorePeriodicLogEv+0xdc>
 8022978:	7bfb      	ldrb	r3, [r7, #15]
 802297a:	f043 0302 	orr.w	r3, r3, #2
 802297e:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreUint16(address_c, various_copy_, NUM_OF_LOG))       result |= 0x04;
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022986:	4b15      	ldr	r3, [pc, #84]	; (80229dc <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022988:	6819      	ldr	r1, [r3, #0]
 802298a:	687b      	ldr	r3, [r7, #4]
 802298c:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8022990:	230a      	movs	r3, #10
 8022992:	f7fe fb91 	bl	80210b8 <_ZN5Flash11StoreUint16EmPtm>
 8022996:	4603      	mov	r3, r0
 8022998:	f083 0301 	eor.w	r3, r3, #1
 802299c:	b2db      	uxtb	r3, r3
 802299e:	2b00      	cmp	r3, #0
 80229a0:	d003      	beq.n	80229aa <_ZN6Logger16StorePeriodicLogEv+0x106>
 80229a2:	7bfb      	ldrb	r3, [r7, #15]
 80229a4:	f043 0304 	orr.w	r3, r3, #4
 80229a8:	73fb      	strb	r3, [r7, #15]

    address_a += NUM_OF_LOG * 4;
 80229aa:	4b0a      	ldr	r3, [pc, #40]	; (80229d4 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80229ac:	681b      	ldr	r3, [r3, #0]
 80229ae:	3328      	adds	r3, #40	; 0x28
 80229b0:	4a08      	ldr	r2, [pc, #32]	; (80229d4 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80229b2:	6013      	str	r3, [r2, #0]
    address_b += NUM_OF_LOG * 4;
 80229b4:	4b08      	ldr	r3, [pc, #32]	; (80229d8 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80229b6:	681b      	ldr	r3, [r3, #0]
 80229b8:	3328      	adds	r3, #40	; 0x28
 80229ba:	4a07      	ldr	r2, [pc, #28]	; (80229d8 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80229bc:	6013      	str	r3, [r2, #0]
    address_c += NUM_OF_LOG * 2;
 80229be:	4b07      	ldr	r3, [pc, #28]	; (80229dc <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80229c0:	681b      	ldr	r3, [r3, #0]
 80229c2:	3314      	adds	r3, #20
 80229c4:	4a05      	ldr	r2, [pc, #20]	; (80229dc <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80229c6:	6013      	str	r3, [r2, #0]

    return result;
 80229c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80229ca:	4618      	mov	r0, r3
 80229cc:	3710      	adds	r7, #16
 80229ce:	46bd      	mov	sp, r7
 80229d0:	bd80      	pop	{r7, pc}
 80229d2:	bf00      	nop
 80229d4:	20000000 	.word	0x20000000
 80229d8:	20000004 	.word	0x20000004
 80229dc:	20000008 	.word	0x20000008

080229e0 <_ZN6Logger21StoreAccelPositionLogEv>:

uint8_t Logger::StoreAccelPositionLog()
{
 80229e0:	b580      	push	{r7, lr}
 80229e2:	b086      	sub	sp, #24
 80229e4:	af00      	add	r7, sp, #0
 80229e6:	6078      	str	r0, [r7, #4]
    uint8_t accel_step = accel_position_write_enable_;
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80229ee:	75bb      	strb	r3, [r7, #22]
    if(accel_step == 0) return 0;
 80229f0:	7dbb      	ldrb	r3, [r7, #22]
 80229f2:	2b00      	cmp	r3, #0
 80229f4:	d101      	bne.n	80229fa <_ZN6Logger21StoreAccelPositionLogEv+0x1a>
 80229f6:	2300      	movs	r3, #0
 80229f8:	e079      	b.n	8022aee <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    else accel_position_write_enable_ = 0;
 80229fa:	687b      	ldr	r3, [r7, #4]
 80229fc:	2200      	movs	r2, #0
 80229fe:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    uint32_t address;
    uint8_t accel = 0; // step 0x01, 0x02, 0x03, 0x04, 0x05.
 8022a02:	2300      	movs	r3, #0
 8022a04:	73fb      	strb	r3, [r7, #15]
    uint8_t decel = 0; // step 0x10, 0x20, 0x30, 0x40, 0x50.
 8022a06:	2300      	movs	r3, #0
 8022a08:	73bb      	strb	r3, [r7, #14]
    uint8_t i;

    for(i = 1; i <= accel_step; i++)
 8022a0a:	2301      	movs	r3, #1
 8022a0c:	75fb      	strb	r3, [r7, #23]
 8022a0e:	7dfa      	ldrb	r2, [r7, #23]
 8022a10:	7dbb      	ldrb	r3, [r7, #22]
 8022a12:	429a      	cmp	r2, r3
 8022a14:	d830      	bhi.n	8022a78 <_ZN6Logger21StoreAccelPositionLogEv+0x98>
    {
        accel = i;
 8022a16:	7dfb      	ldrb	r3, [r7, #23]
 8022a18:	73fb      	strb	r3, [r7, #15]
        address = HEAD_ADDRESS_BLOCK_D + accel_address_[i-1];
 8022a1a:	7dfb      	ldrb	r3, [r7, #23]
 8022a1c:	1e5a      	subs	r2, r3, #1
 8022a1e:	687b      	ldr	r3, [r7, #4]
 8022a20:	3264      	adds	r2, #100	; 0x64
 8022a22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022a26:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022a2a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022a2e:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x10;
 8022a30:	687b      	ldr	r3, [r7, #4]
 8022a32:	33f4      	adds	r3, #244	; 0xf4
 8022a34:	2201      	movs	r2, #1
 8022a36:	6939      	ldr	r1, [r7, #16]
 8022a38:	4618      	mov	r0, r3
 8022a3a:	f7fe fbba 	bl	80211b2 <_ZN5Flash14CheckBlankByteEmm>
 8022a3e:	4603      	mov	r3, r0
 8022a40:	f083 0301 	eor.w	r3, r3, #1
 8022a44:	b2db      	uxtb	r3, r3
 8022a46:	2b00      	cmp	r3, #0
 8022a48:	d001      	beq.n	8022a4e <_ZN6Logger21StoreAccelPositionLogEv+0x6e>
 8022a4a:	2310      	movs	r3, #16
 8022a4c:	e04f      	b.n	8022aee <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &accel, 1)) return 0x20;
 8022a4e:	687b      	ldr	r3, [r7, #4]
 8022a50:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022a54:	f107 020f 	add.w	r2, r7, #15
 8022a58:	2301      	movs	r3, #1
 8022a5a:	6939      	ldr	r1, [r7, #16]
 8022a5c:	f7fe faf8 	bl	8021050 <_ZN5Flash10StoreUint8EmPhm>
 8022a60:	4603      	mov	r3, r0
 8022a62:	f083 0301 	eor.w	r3, r3, #1
 8022a66:	b2db      	uxtb	r3, r3
 8022a68:	2b00      	cmp	r3, #0
 8022a6a:	d001      	beq.n	8022a70 <_ZN6Logger21StoreAccelPositionLogEv+0x90>
 8022a6c:	2320      	movs	r3, #32
 8022a6e:	e03e      	b.n	8022aee <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 8022a70:	7dfb      	ldrb	r3, [r7, #23]
 8022a72:	3301      	adds	r3, #1
 8022a74:	75fb      	strb	r3, [r7, #23]
 8022a76:	e7ca      	b.n	8022a0e <_ZN6Logger21StoreAccelPositionLogEv+0x2e>
    }
    for(i = 1; i <= accel_step; i++)
 8022a78:	2301      	movs	r3, #1
 8022a7a:	75fb      	strb	r3, [r7, #23]
 8022a7c:	7dfa      	ldrb	r2, [r7, #23]
 8022a7e:	7dbb      	ldrb	r3, [r7, #22]
 8022a80:	429a      	cmp	r2, r3
 8022a82:	d833      	bhi.n	8022aec <_ZN6Logger21StoreAccelPositionLogEv+0x10c>
    {
        decel = i << 4;
 8022a84:	7dfb      	ldrb	r3, [r7, #23]
 8022a86:	011b      	lsls	r3, r3, #4
 8022a88:	b2db      	uxtb	r3, r3
 8022a8a:	73bb      	strb	r3, [r7, #14]
        address = HEAD_ADDRESS_BLOCK_D + decel_address_[i-1];
 8022a8c:	7dfb      	ldrb	r3, [r7, #23]
 8022a8e:	3b01      	subs	r3, #1
 8022a90:	687a      	ldr	r2, [r7, #4]
 8022a92:	3368      	adds	r3, #104	; 0x68
 8022a94:	005b      	lsls	r3, r3, #1
 8022a96:	4413      	add	r3, r2
 8022a98:	885b      	ldrh	r3, [r3, #2]
 8022a9a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022a9e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022aa2:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x30;
 8022aa4:	687b      	ldr	r3, [r7, #4]
 8022aa6:	33f4      	adds	r3, #244	; 0xf4
 8022aa8:	2201      	movs	r2, #1
 8022aaa:	6939      	ldr	r1, [r7, #16]
 8022aac:	4618      	mov	r0, r3
 8022aae:	f7fe fb80 	bl	80211b2 <_ZN5Flash14CheckBlankByteEmm>
 8022ab2:	4603      	mov	r3, r0
 8022ab4:	f083 0301 	eor.w	r3, r3, #1
 8022ab8:	b2db      	uxtb	r3, r3
 8022aba:	2b00      	cmp	r3, #0
 8022abc:	d001      	beq.n	8022ac2 <_ZN6Logger21StoreAccelPositionLogEv+0xe2>
 8022abe:	2330      	movs	r3, #48	; 0x30
 8022ac0:	e015      	b.n	8022aee <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &decel, 1)) return 0x40;
 8022ac2:	687b      	ldr	r3, [r7, #4]
 8022ac4:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022ac8:	f107 020e 	add.w	r2, r7, #14
 8022acc:	2301      	movs	r3, #1
 8022ace:	6939      	ldr	r1, [r7, #16]
 8022ad0:	f7fe fabe 	bl	8021050 <_ZN5Flash10StoreUint8EmPhm>
 8022ad4:	4603      	mov	r3, r0
 8022ad6:	f083 0301 	eor.w	r3, r3, #1
 8022ada:	b2db      	uxtb	r3, r3
 8022adc:	2b00      	cmp	r3, #0
 8022ade:	d001      	beq.n	8022ae4 <_ZN6Logger21StoreAccelPositionLogEv+0x104>
 8022ae0:	2340      	movs	r3, #64	; 0x40
 8022ae2:	e004      	b.n	8022aee <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 8022ae4:	7dfb      	ldrb	r3, [r7, #23]
 8022ae6:	3301      	adds	r3, #1
 8022ae8:	75fb      	strb	r3, [r7, #23]
 8022aea:	e7c7      	b.n	8022a7c <_ZN6Logger21StoreAccelPositionLogEv+0x9c>
    }
    
    return 0;
 8022aec:	2300      	movs	r3, #0
}
 8022aee:	4618      	mov	r0, r3
 8022af0:	3718      	adds	r7, #24
 8022af2:	46bd      	mov	sp, r7
 8022af4:	bd80      	pop	{r7, pc}
	...

08022af8 <_ZN6Logger7LoadingEv>:

void Logger::Loading()
{
 8022af8:	b580      	push	{r7, lr}
 8022afa:	b08c      	sub	sp, #48	; 0x30
 8022afc:	af00      	add	r7, sp, #0
 8022afe:	6078      	str	r0, [r7, #4]
    float distance = encoder.GetDistanceStack();
 8022b00:	687b      	ldr	r3, [r7, #4]
 8022b02:	33e8      	adds	r3, #232	; 0xe8
 8022b04:	4618      	mov	r0, r3
 8022b06:	f7fe fa40 	bl	8020f8a <_ZN7Encoder16GetDistanceStackEv>
 8022b0a:	ed87 0a08 	vstr	s0, [r7, #32]

    if(distance < LOGGING_CONST_DISTANCE) return;
 8022b0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8022b12:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b1e:	f100 829f 	bmi.w	8023060 <_ZN6Logger7LoadingEv+0x568>
    encoder.ResetDistanceStack();
 8022b22:	687b      	ldr	r3, [r7, #4]
 8022b24:	33e8      	adds	r3, #232	; 0xe8
 8022b26:	4618      	mov	r0, r3
 8022b28:	f7fe fa12 	bl	8020f50 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0;

    /* Load curvature radius */
    float log_distance = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_A));
 8022b2c:	4bad      	ldr	r3, [pc, #692]	; (8022de4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022b2e:	881b      	ldrh	r3, [r3, #0]
 8022b30:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022b34:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8022b38:	681b      	ldr	r3, [r3, #0]
 8022b3a:	61fb      	str	r3, [r7, #28]
    float log_radian = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_B));
 8022b3c:	4ba9      	ldr	r3, [pc, #676]	; (8022de4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022b3e:	881b      	ldrh	r3, [r3, #0]
 8022b40:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022b44:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8022b48:	681b      	ldr	r3, [r3, #0]
 8022b4a:	61bb      	str	r3, [r7, #24]
    float radius = log_distance / log_radian;
 8022b4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8022b50:	ed97 7a06 	vldr	s14, [r7, #24]
 8022b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022b58:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Load correction position */
    uint16_t log_various = *(reinterpret_cast<uint16_t*>(now_address + HEAD_ADDRESS_BLOCK_C));
 8022b5c:	4ba1      	ldr	r3, [pc, #644]	; (8022de4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022b5e:	881b      	ldrh	r3, [r3, #0]
 8022b60:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022b64:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8022b68:	881b      	ldrh	r3, [r3, #0]
 8022b6a:	827b      	strh	r3, [r7, #18]
    bool log_corner = false, log_corner_pass = false;
 8022b6c:	2300      	movs	r3, #0
 8022b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8022b72:	2300      	movs	r3, #0
 8022b74:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    bool log_cross = false, log_cross_pass = false;
 8022b78:	2300      	movs	r3, #0
 8022b7a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8022b7e:	2300      	movs	r3, #0
 8022b80:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    if((log_various & 0x0002) == 0x0002) log_corner = true;
 8022b84:	8a7b      	ldrh	r3, [r7, #18]
 8022b86:	f003 0302 	and.w	r3, r3, #2
 8022b8a:	2b00      	cmp	r3, #0
 8022b8c:	d002      	beq.n	8022b94 <_ZN6Logger7LoadingEv+0x9c>
 8022b8e:	2301      	movs	r3, #1
 8022b90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if((log_various & 0x0001) == 0x0001) log_cross = true;
 8022b94:	8a7b      	ldrh	r3, [r7, #18]
 8022b96:	f003 0301 	and.w	r3, r3, #1
 8022b9a:	2b00      	cmp	r3, #0
 8022b9c:	d002      	beq.n	8022ba4 <_ZN6Logger7LoadingEv+0xac>
 8022b9e:	2301      	movs	r3, #1
 8022ba0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    /* Get correction position */
    bool run_corner = false, run_corner_pass = false;
 8022ba4:	2300      	movs	r3, #0
 8022ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022baa:	2300      	movs	r3, #0
 8022bac:	747b      	strb	r3, [r7, #17]
    bool run_cross = false, run_cross_pass = false;
 8022bae:	2300      	movs	r3, #0
 8022bb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8022bb4:	2300      	movs	r3, #0
 8022bb6:	743b      	strb	r3, [r7, #16]
    uint8_t corner = side_sensor.GetCornerMarkerCount();
 8022bb8:	687b      	ldr	r3, [r7, #4]
 8022bba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022bbe:	4618      	mov	r0, r3
 8022bc0:	f003 f939 	bl	8025e36 <_ZN10SideSensor20GetCornerMarkerCountEv>
 8022bc4:	4603      	mov	r3, r0
 8022bc6:	73fb      	strb	r3, [r7, #15]
    uint8_t cross = side_sensor.GetCrossLineCount();
 8022bc8:	687b      	ldr	r3, [r7, #4]
 8022bca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022bce:	4618      	mov	r0, r3
 8022bd0:	f003 f93d 	bl	8025e4e <_ZN10SideSensor17GetCrossLineCountEv>
 8022bd4:	4603      	mov	r3, r0
 8022bd6:	73bb      	strb	r3, [r7, #14]
    static uint8_t pre_corner = corner;
 8022bd8:	4b83      	ldr	r3, [pc, #524]	; (8022de8 <_ZN6Logger7LoadingEv+0x2f0>)
 8022bda:	781b      	ldrb	r3, [r3, #0]
 8022bdc:	f3bf 8f5b 	dmb	ish
 8022be0:	b2db      	uxtb	r3, r3
 8022be2:	f003 0301 	and.w	r3, r3, #1
 8022be6:	2b00      	cmp	r3, #0
 8022be8:	bf0c      	ite	eq
 8022bea:	2301      	moveq	r3, #1
 8022bec:	2300      	movne	r3, #0
 8022bee:	b2db      	uxtb	r3, r3
 8022bf0:	2b00      	cmp	r3, #0
 8022bf2:	d010      	beq.n	8022c16 <_ZN6Logger7LoadingEv+0x11e>
 8022bf4:	487c      	ldr	r0, [pc, #496]	; (8022de8 <_ZN6Logger7LoadingEv+0x2f0>)
 8022bf6:	f008 f96b 	bl	802aed0 <__cxa_guard_acquire>
 8022bfa:	4603      	mov	r3, r0
 8022bfc:	2b00      	cmp	r3, #0
 8022bfe:	bf14      	ite	ne
 8022c00:	2301      	movne	r3, #1
 8022c02:	2300      	moveq	r3, #0
 8022c04:	b2db      	uxtb	r3, r3
 8022c06:	2b00      	cmp	r3, #0
 8022c08:	d005      	beq.n	8022c16 <_ZN6Logger7LoadingEv+0x11e>
 8022c0a:	4a78      	ldr	r2, [pc, #480]	; (8022dec <_ZN6Logger7LoadingEv+0x2f4>)
 8022c0c:	7bfb      	ldrb	r3, [r7, #15]
 8022c0e:	7013      	strb	r3, [r2, #0]
 8022c10:	4875      	ldr	r0, [pc, #468]	; (8022de8 <_ZN6Logger7LoadingEv+0x2f0>)
 8022c12:	f008 f969 	bl	802aee8 <__cxa_guard_release>
    static uint8_t pre_cross = cross;
 8022c16:	4b76      	ldr	r3, [pc, #472]	; (8022df0 <_ZN6Logger7LoadingEv+0x2f8>)
 8022c18:	781b      	ldrb	r3, [r3, #0]
 8022c1a:	f3bf 8f5b 	dmb	ish
 8022c1e:	b2db      	uxtb	r3, r3
 8022c20:	f003 0301 	and.w	r3, r3, #1
 8022c24:	2b00      	cmp	r3, #0
 8022c26:	bf0c      	ite	eq
 8022c28:	2301      	moveq	r3, #1
 8022c2a:	2300      	movne	r3, #0
 8022c2c:	b2db      	uxtb	r3, r3
 8022c2e:	2b00      	cmp	r3, #0
 8022c30:	d010      	beq.n	8022c54 <_ZN6Logger7LoadingEv+0x15c>
 8022c32:	486f      	ldr	r0, [pc, #444]	; (8022df0 <_ZN6Logger7LoadingEv+0x2f8>)
 8022c34:	f008 f94c 	bl	802aed0 <__cxa_guard_acquire>
 8022c38:	4603      	mov	r3, r0
 8022c3a:	2b00      	cmp	r3, #0
 8022c3c:	bf14      	ite	ne
 8022c3e:	2301      	movne	r3, #1
 8022c40:	2300      	moveq	r3, #0
 8022c42:	b2db      	uxtb	r3, r3
 8022c44:	2b00      	cmp	r3, #0
 8022c46:	d005      	beq.n	8022c54 <_ZN6Logger7LoadingEv+0x15c>
 8022c48:	4a6a      	ldr	r2, [pc, #424]	; (8022df4 <_ZN6Logger7LoadingEv+0x2fc>)
 8022c4a:	7bbb      	ldrb	r3, [r7, #14]
 8022c4c:	7013      	strb	r3, [r2, #0]
 8022c4e:	4868      	ldr	r0, [pc, #416]	; (8022df0 <_ZN6Logger7LoadingEv+0x2f8>)
 8022c50:	f008 f94a 	bl	802aee8 <__cxa_guard_release>
    static uint8_t straight_cnt = 0;
    bool straight = false;
 8022c54:	2300      	movs	r3, #0
 8022c56:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA){
 8022c5a:	687b      	ldr	r3, [r7, #4]
 8022c5c:	33e8      	adds	r3, #232	; 0xe8
 8022c5e:	4618      	mov	r0, r3
 8022c60:	f7fe f9a2 	bl	8020fa8 <_ZN7Encoder15AngularVelocityEv>
 8022c64:	eef0 7a40 	vmov.f32	s15, s0
 8022c68:	eeb0 0a67 	vmov.f32	s0, s15
 8022c6c:	f7ff fbd8 	bl	8022420 <_ZSt4fabsf>
 8022c70:	eeb0 7a40 	vmov.f32	s14, s0
 8022c74:	eddf 7a60 	vldr	s15, [pc, #384]	; 8022df8 <_ZN6Logger7LoadingEv+0x300>
 8022c78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c80:	bf4c      	ite	mi
 8022c82:	2301      	movmi	r3, #1
 8022c84:	2300      	movpl	r3, #0
 8022c86:	b2db      	uxtb	r3, r3
 8022c88:	2b00      	cmp	r3, #0
 8022c8a:	d00e      	beq.n	8022caa <_ZN6Logger7LoadingEv+0x1b2>
        if(straight_cnt <= STRAIGHT_JUDGE_COUNT) straight_cnt++;
 8022c8c:	4b5b      	ldr	r3, [pc, #364]	; (8022dfc <_ZN6Logger7LoadingEv+0x304>)
 8022c8e:	781b      	ldrb	r3, [r3, #0]
 8022c90:	2b05      	cmp	r3, #5
 8022c92:	d806      	bhi.n	8022ca2 <_ZN6Logger7LoadingEv+0x1aa>
 8022c94:	4b59      	ldr	r3, [pc, #356]	; (8022dfc <_ZN6Logger7LoadingEv+0x304>)
 8022c96:	781b      	ldrb	r3, [r3, #0]
 8022c98:	3301      	adds	r3, #1
 8022c9a:	b2da      	uxtb	r2, r3
 8022c9c:	4b57      	ldr	r3, [pc, #348]	; (8022dfc <_ZN6Logger7LoadingEv+0x304>)
 8022c9e:	701a      	strb	r2, [r3, #0]
 8022ca0:	e006      	b.n	8022cb0 <_ZN6Logger7LoadingEv+0x1b8>
        else straight = true;
 8022ca2:	2301      	movs	r3, #1
 8022ca4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8022ca8:	e002      	b.n	8022cb0 <_ZN6Logger7LoadingEv+0x1b8>
    }else straight_cnt = 0;
 8022caa:	4b54      	ldr	r3, [pc, #336]	; (8022dfc <_ZN6Logger7LoadingEv+0x304>)
 8022cac:	2200      	movs	r2, #0
 8022cae:	701a      	strb	r2, [r3, #0]
    if(corner > pre_corner && straight) run_corner = true;
 8022cb0:	4b4e      	ldr	r3, [pc, #312]	; (8022dec <_ZN6Logger7LoadingEv+0x2f4>)
 8022cb2:	781b      	ldrb	r3, [r3, #0]
 8022cb4:	7bfa      	ldrb	r2, [r7, #15]
 8022cb6:	429a      	cmp	r2, r3
 8022cb8:	d906      	bls.n	8022cc8 <_ZN6Logger7LoadingEv+0x1d0>
 8022cba:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8022cbe:	2b00      	cmp	r3, #0
 8022cc0:	d002      	beq.n	8022cc8 <_ZN6Logger7LoadingEv+0x1d0>
 8022cc2:	2301      	movs	r3, #1
 8022cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if(cross > pre_cross) run_cross = true;
 8022cc8:	4b4a      	ldr	r3, [pc, #296]	; (8022df4 <_ZN6Logger7LoadingEv+0x2fc>)
 8022cca:	781b      	ldrb	r3, [r3, #0]
 8022ccc:	7bba      	ldrb	r2, [r7, #14]
 8022cce:	429a      	cmp	r2, r3
 8022cd0:	d902      	bls.n	8022cd8 <_ZN6Logger7LoadingEv+0x1e0>
 8022cd2:	2301      	movs	r3, #1
 8022cd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    pre_corner = corner;
 8022cd8:	4a44      	ldr	r2, [pc, #272]	; (8022dec <_ZN6Logger7LoadingEv+0x2f4>)
 8022cda:	7bfb      	ldrb	r3, [r7, #15]
 8022cdc:	7013      	strb	r3, [r2, #0]
    pre_cross = cross;
 8022cde:	4a45      	ldr	r2, [pc, #276]	; (8022df4 <_ZN6Logger7LoadingEv+0x2fc>)
 8022ce0:	7bbb      	ldrb	r3, [r7, #14]
 8022ce2:	7013      	strb	r3, [r2, #0]

    /* Position correction at corner marker */
    static uint16_t log_corner_address, run_corner_address;
    static uint8_t log_corner_wait = 0, run_corner_wait = 0;
    if(log_corner == true){
 8022ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8022ce8:	2b00      	cmp	r3, #0
 8022cea:	d01f      	beq.n	8022d2c <_ZN6Logger7LoadingEv+0x234>
        if(run_corner_pass == true){
 8022cec:	7c7b      	ldrb	r3, [r7, #17]
 8022cee:	2b00      	cmp	r3, #0
 8022cf0:	d011      	beq.n	8022d16 <_ZN6Logger7LoadingEv+0x21e>
            now_address += now_address - run_corner_address;
 8022cf2:	4b3c      	ldr	r3, [pc, #240]	; (8022de4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022cf4:	881a      	ldrh	r2, [r3, #0]
 8022cf6:	4b42      	ldr	r3, [pc, #264]	; (8022e00 <_ZN6Logger7LoadingEv+0x308>)
 8022cf8:	881b      	ldrh	r3, [r3, #0]
 8022cfa:	1ad3      	subs	r3, r2, r3
 8022cfc:	b29a      	uxth	r2, r3
 8022cfe:	4b39      	ldr	r3, [pc, #228]	; (8022de4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d00:	881b      	ldrh	r3, [r3, #0]
 8022d02:	4413      	add	r3, r2
 8022d04:	b29a      	uxth	r2, r3
 8022d06:	4b37      	ldr	r3, [pc, #220]	; (8022de4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d08:	801a      	strh	r2, [r3, #0]
            run_corner_wait = 0;
 8022d0a:	4b3e      	ldr	r3, [pc, #248]	; (8022e04 <_ZN6Logger7LoadingEv+0x30c>)
 8022d0c:	2200      	movs	r2, #0
 8022d0e:	701a      	strb	r2, [r3, #0]
            run_corner_pass = false;
 8022d10:	2300      	movs	r3, #0
 8022d12:	747b      	strb	r3, [r7, #17]
 8022d14:	e017      	b.n	8022d46 <_ZN6Logger7LoadingEv+0x24e>
        }else{
            log_corner_address = now_address;
 8022d16:	4b33      	ldr	r3, [pc, #204]	; (8022de4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d18:	881a      	ldrh	r2, [r3, #0]
 8022d1a:	4b3b      	ldr	r3, [pc, #236]	; (8022e08 <_ZN6Logger7LoadingEv+0x310>)
 8022d1c:	801a      	strh	r2, [r3, #0]
            log_corner_pass = true;
 8022d1e:	2301      	movs	r3, #1
 8022d20:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            log_corner_wait = CORRECTION_WAIT_COUNT;
 8022d24:	4b39      	ldr	r3, [pc, #228]	; (8022e0c <_ZN6Logger7LoadingEv+0x314>)
 8022d26:	2203      	movs	r2, #3
 8022d28:	701a      	strb	r2, [r3, #0]
 8022d2a:	e00c      	b.n	8022d46 <_ZN6Logger7LoadingEv+0x24e>
        }
    }else{
        if(run_corner_wait > 0) run_corner_wait--;
 8022d2c:	4b35      	ldr	r3, [pc, #212]	; (8022e04 <_ZN6Logger7LoadingEv+0x30c>)
 8022d2e:	781b      	ldrb	r3, [r3, #0]
 8022d30:	2b00      	cmp	r3, #0
 8022d32:	d006      	beq.n	8022d42 <_ZN6Logger7LoadingEv+0x24a>
 8022d34:	4b33      	ldr	r3, [pc, #204]	; (8022e04 <_ZN6Logger7LoadingEv+0x30c>)
 8022d36:	781b      	ldrb	r3, [r3, #0]
 8022d38:	3b01      	subs	r3, #1
 8022d3a:	b2da      	uxtb	r2, r3
 8022d3c:	4b31      	ldr	r3, [pc, #196]	; (8022e04 <_ZN6Logger7LoadingEv+0x30c>)
 8022d3e:	701a      	strb	r2, [r3, #0]
 8022d40:	e001      	b.n	8022d46 <_ZN6Logger7LoadingEv+0x24e>
        else run_corner_pass = false;
 8022d42:	2300      	movs	r3, #0
 8022d44:	747b      	strb	r3, [r7, #17]
    }
    if(run_corner == true){
 8022d46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8022d4a:	2b00      	cmp	r3, #0
 8022d4c:	d018      	beq.n	8022d80 <_ZN6Logger7LoadingEv+0x288>
        if(log_corner_pass == true){
 8022d4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8022d52:	2b00      	cmp	r3, #0
 8022d54:	d00a      	beq.n	8022d6c <_ZN6Logger7LoadingEv+0x274>
            now_address = log_corner_address;
 8022d56:	4b2c      	ldr	r3, [pc, #176]	; (8022e08 <_ZN6Logger7LoadingEv+0x310>)
 8022d58:	881a      	ldrh	r2, [r3, #0]
 8022d5a:	4b22      	ldr	r3, [pc, #136]	; (8022de4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d5c:	801a      	strh	r2, [r3, #0]
            log_corner_wait = 0;
 8022d5e:	4b2b      	ldr	r3, [pc, #172]	; (8022e0c <_ZN6Logger7LoadingEv+0x314>)
 8022d60:	2200      	movs	r2, #0
 8022d62:	701a      	strb	r2, [r3, #0]
            log_corner_pass = false;
 8022d64:	2300      	movs	r3, #0
 8022d66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8022d6a:	e017      	b.n	8022d9c <_ZN6Logger7LoadingEv+0x2a4>
        }else{
            run_corner_address = now_address;
 8022d6c:	4b1d      	ldr	r3, [pc, #116]	; (8022de4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d6e:	881a      	ldrh	r2, [r3, #0]
 8022d70:	4b23      	ldr	r3, [pc, #140]	; (8022e00 <_ZN6Logger7LoadingEv+0x308>)
 8022d72:	801a      	strh	r2, [r3, #0]
            run_corner_pass = true;
 8022d74:	2301      	movs	r3, #1
 8022d76:	747b      	strb	r3, [r7, #17]
            run_corner_wait = CORRECTION_WAIT_COUNT;
 8022d78:	4b22      	ldr	r3, [pc, #136]	; (8022e04 <_ZN6Logger7LoadingEv+0x30c>)
 8022d7a:	2203      	movs	r2, #3
 8022d7c:	701a      	strb	r2, [r3, #0]
 8022d7e:	e00d      	b.n	8022d9c <_ZN6Logger7LoadingEv+0x2a4>
        }
    }else{
        if(log_corner_wait > 0) log_corner_wait--;
 8022d80:	4b22      	ldr	r3, [pc, #136]	; (8022e0c <_ZN6Logger7LoadingEv+0x314>)
 8022d82:	781b      	ldrb	r3, [r3, #0]
 8022d84:	2b00      	cmp	r3, #0
 8022d86:	d006      	beq.n	8022d96 <_ZN6Logger7LoadingEv+0x29e>
 8022d88:	4b20      	ldr	r3, [pc, #128]	; (8022e0c <_ZN6Logger7LoadingEv+0x314>)
 8022d8a:	781b      	ldrb	r3, [r3, #0]
 8022d8c:	3b01      	subs	r3, #1
 8022d8e:	b2da      	uxtb	r2, r3
 8022d90:	4b1e      	ldr	r3, [pc, #120]	; (8022e0c <_ZN6Logger7LoadingEv+0x314>)
 8022d92:	701a      	strb	r2, [r3, #0]
 8022d94:	e002      	b.n	8022d9c <_ZN6Logger7LoadingEv+0x2a4>
        else log_corner_pass = false;
 8022d96:	2300      	movs	r3, #0
 8022d98:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    /* Position correction at cross line */
    static uint16_t log_cross_address, run_cross_address;
    static uint8_t log_cross_wait = 0, run_cross_wait = 0;
    if(log_cross == true){
 8022d9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8022da0:	2b00      	cmp	r3, #0
 8022da2:	d03d      	beq.n	8022e20 <_ZN6Logger7LoadingEv+0x328>
        if(run_cross_pass == true){
 8022da4:	7c3b      	ldrb	r3, [r7, #16]
 8022da6:	2b00      	cmp	r3, #0
 8022da8:	d011      	beq.n	8022dce <_ZN6Logger7LoadingEv+0x2d6>
            now_address += now_address - run_cross_address;
 8022daa:	4b0e      	ldr	r3, [pc, #56]	; (8022de4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022dac:	881a      	ldrh	r2, [r3, #0]
 8022dae:	4b18      	ldr	r3, [pc, #96]	; (8022e10 <_ZN6Logger7LoadingEv+0x318>)
 8022db0:	881b      	ldrh	r3, [r3, #0]
 8022db2:	1ad3      	subs	r3, r2, r3
 8022db4:	b29a      	uxth	r2, r3
 8022db6:	4b0b      	ldr	r3, [pc, #44]	; (8022de4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022db8:	881b      	ldrh	r3, [r3, #0]
 8022dba:	4413      	add	r3, r2
 8022dbc:	b29a      	uxth	r2, r3
 8022dbe:	4b09      	ldr	r3, [pc, #36]	; (8022de4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022dc0:	801a      	strh	r2, [r3, #0]
            run_cross_wait = 0;
 8022dc2:	4b14      	ldr	r3, [pc, #80]	; (8022e14 <_ZN6Logger7LoadingEv+0x31c>)
 8022dc4:	2200      	movs	r2, #0
 8022dc6:	701a      	strb	r2, [r3, #0]
            run_cross_pass = false;
 8022dc8:	2300      	movs	r3, #0
 8022dca:	743b      	strb	r3, [r7, #16]
 8022dcc:	e035      	b.n	8022e3a <_ZN6Logger7LoadingEv+0x342>
        }else{
            log_cross_address = now_address;
 8022dce:	4b05      	ldr	r3, [pc, #20]	; (8022de4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022dd0:	881a      	ldrh	r2, [r3, #0]
 8022dd2:	4b11      	ldr	r3, [pc, #68]	; (8022e18 <_ZN6Logger7LoadingEv+0x320>)
 8022dd4:	801a      	strh	r2, [r3, #0]
            log_cross_pass = true;
 8022dd6:	2301      	movs	r3, #1
 8022dd8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            log_cross_wait = CORRECTION_WAIT_COUNT;
 8022ddc:	4b0f      	ldr	r3, [pc, #60]	; (8022e1c <_ZN6Logger7LoadingEv+0x324>)
 8022dde:	2203      	movs	r2, #3
 8022de0:	701a      	strb	r2, [r3, #0]
 8022de2:	e02a      	b.n	8022e3a <_ZN6Logger7LoadingEv+0x342>
 8022de4:	20000100 	.word	0x20000100
 8022de8:	20000104 	.word	0x20000104
 8022dec:	20000102 	.word	0x20000102
 8022df0:	2000010c 	.word	0x2000010c
 8022df4:	20000108 	.word	0x20000108
 8022df8:	43ca0000 	.word	0x43ca0000
 8022dfc:	20000110 	.word	0x20000110
 8022e00:	20000114 	.word	0x20000114
 8022e04:	20000117 	.word	0x20000117
 8022e08:	20000112 	.word	0x20000112
 8022e0c:	20000116 	.word	0x20000116
 8022e10:	2000011a 	.word	0x2000011a
 8022e14:	2000011d 	.word	0x2000011d
 8022e18:	20000118 	.word	0x20000118
 8022e1c:	2000011c 	.word	0x2000011c
        }
    }else{
        if(run_cross_wait > 0) run_cross_wait--;
 8022e20:	4b91      	ldr	r3, [pc, #580]	; (8023068 <_ZN6Logger7LoadingEv+0x570>)
 8022e22:	781b      	ldrb	r3, [r3, #0]
 8022e24:	2b00      	cmp	r3, #0
 8022e26:	d006      	beq.n	8022e36 <_ZN6Logger7LoadingEv+0x33e>
 8022e28:	4b8f      	ldr	r3, [pc, #572]	; (8023068 <_ZN6Logger7LoadingEv+0x570>)
 8022e2a:	781b      	ldrb	r3, [r3, #0]
 8022e2c:	3b01      	subs	r3, #1
 8022e2e:	b2da      	uxtb	r2, r3
 8022e30:	4b8d      	ldr	r3, [pc, #564]	; (8023068 <_ZN6Logger7LoadingEv+0x570>)
 8022e32:	701a      	strb	r2, [r3, #0]
 8022e34:	e001      	b.n	8022e3a <_ZN6Logger7LoadingEv+0x342>
        else run_cross_pass = false;
 8022e36:	2300      	movs	r3, #0
 8022e38:	743b      	strb	r3, [r7, #16]
    }
    if(run_cross == true){
 8022e3a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8022e3e:	2b00      	cmp	r3, #0
 8022e40:	d018      	beq.n	8022e74 <_ZN6Logger7LoadingEv+0x37c>
        if(log_cross_pass == true){
 8022e42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8022e46:	2b00      	cmp	r3, #0
 8022e48:	d00a      	beq.n	8022e60 <_ZN6Logger7LoadingEv+0x368>
            now_address = log_cross_address;
 8022e4a:	4b88      	ldr	r3, [pc, #544]	; (802306c <_ZN6Logger7LoadingEv+0x574>)
 8022e4c:	881a      	ldrh	r2, [r3, #0]
 8022e4e:	4b88      	ldr	r3, [pc, #544]	; (8023070 <_ZN6Logger7LoadingEv+0x578>)
 8022e50:	801a      	strh	r2, [r3, #0]
            log_cross_wait = 0;
 8022e52:	4b88      	ldr	r3, [pc, #544]	; (8023074 <_ZN6Logger7LoadingEv+0x57c>)
 8022e54:	2200      	movs	r2, #0
 8022e56:	701a      	strb	r2, [r3, #0]
            log_cross_pass = false;
 8022e58:	2300      	movs	r3, #0
 8022e5a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8022e5e:	e017      	b.n	8022e90 <_ZN6Logger7LoadingEv+0x398>
        }else{
            run_cross_address = now_address;
 8022e60:	4b83      	ldr	r3, [pc, #524]	; (8023070 <_ZN6Logger7LoadingEv+0x578>)
 8022e62:	881a      	ldrh	r2, [r3, #0]
 8022e64:	4b84      	ldr	r3, [pc, #528]	; (8023078 <_ZN6Logger7LoadingEv+0x580>)
 8022e66:	801a      	strh	r2, [r3, #0]
            run_cross_pass = true;
 8022e68:	2301      	movs	r3, #1
 8022e6a:	743b      	strb	r3, [r7, #16]
            run_cross_wait = CORRECTION_WAIT_COUNT;
 8022e6c:	4b7e      	ldr	r3, [pc, #504]	; (8023068 <_ZN6Logger7LoadingEv+0x570>)
 8022e6e:	2203      	movs	r2, #3
 8022e70:	701a      	strb	r2, [r3, #0]
 8022e72:	e00d      	b.n	8022e90 <_ZN6Logger7LoadingEv+0x398>
        }
    }else{
        if(log_cross_wait > 0) log_cross_wait--;
 8022e74:	4b7f      	ldr	r3, [pc, #508]	; (8023074 <_ZN6Logger7LoadingEv+0x57c>)
 8022e76:	781b      	ldrb	r3, [r3, #0]
 8022e78:	2b00      	cmp	r3, #0
 8022e7a:	d006      	beq.n	8022e8a <_ZN6Logger7LoadingEv+0x392>
 8022e7c:	4b7d      	ldr	r3, [pc, #500]	; (8023074 <_ZN6Logger7LoadingEv+0x57c>)
 8022e7e:	781b      	ldrb	r3, [r3, #0]
 8022e80:	3b01      	subs	r3, #1
 8022e82:	b2da      	uxtb	r2, r3
 8022e84:	4b7b      	ldr	r3, [pc, #492]	; (8023074 <_ZN6Logger7LoadingEv+0x57c>)
 8022e86:	701a      	strb	r2, [r3, #0]
 8022e88:	e002      	b.n	8022e90 <_ZN6Logger7LoadingEv+0x398>
        else log_cross_pass = false;
 8022e8a:	2300      	movs	r3, #0
 8022e8c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    /* Accel straight */
    uint8_t accel_step = *(reinterpret_cast<uint8_t*>(now_address + HEAD_ADDRESS_BLOCK_D));
 8022e90:	4b77      	ldr	r3, [pc, #476]	; (8023070 <_ZN6Logger7LoadingEv+0x578>)
 8022e92:	881b      	ldrh	r3, [r3, #0]
 8022e94:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022e98:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022e9c:	781b      	ldrb	r3, [r3, #0]
 8022e9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(!straight) accel_step = 0x10;
 8022ea2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8022ea6:	f083 0301 	eor.w	r3, r3, #1
 8022eaa:	b2db      	uxtb	r3, r3
 8022eac:	2b00      	cmp	r3, #0
 8022eae:	d002      	beq.n	8022eb6 <_ZN6Logger7LoadingEv+0x3be>
 8022eb0:	2310      	movs	r3, #16
 8022eb2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    float target = MIN_VELOCITY;
 8022eb6:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8022eba:	627b      	str	r3, [r7, #36]	; 0x24
    static float pre_target = MIN_VELOCITY;
    switch(accel_step){
 8022ebc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8022ec0:	3b01      	subs	r3, #1
 8022ec2:	2b4f      	cmp	r3, #79	; 0x4f
 8022ec4:	f200 80ba 	bhi.w	802303c <_ZN6Logger7LoadingEv+0x544>
 8022ec8:	a201      	add	r2, pc, #4	; (adr r2, 8022ed0 <_ZN6Logger7LoadingEv+0x3d8>)
 8022eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022ece:	bf00      	nop
 8022ed0:	08023019 	.word	0x08023019
 8022ed4:	08023021 	.word	0x08023021
 8022ed8:	08023029 	.word	0x08023029
 8022edc:	08023031 	.word	0x08023031
 8022ee0:	08023037 	.word	0x08023037
 8022ee4:	0802303d 	.word	0x0802303d
 8022ee8:	0802303d 	.word	0x0802303d
 8022eec:	0802303d 	.word	0x0802303d
 8022ef0:	0802303d 	.word	0x0802303d
 8022ef4:	0802303d 	.word	0x0802303d
 8022ef8:	0802303d 	.word	0x0802303d
 8022efc:	0802303d 	.word	0x0802303d
 8022f00:	0802303d 	.word	0x0802303d
 8022f04:	0802303d 	.word	0x0802303d
 8022f08:	0802303d 	.word	0x0802303d
 8022f0c:	08023011 	.word	0x08023011
 8022f10:	0802303d 	.word	0x0802303d
 8022f14:	0802303d 	.word	0x0802303d
 8022f18:	0802303d 	.word	0x0802303d
 8022f1c:	0802303d 	.word	0x0802303d
 8022f20:	0802303d 	.word	0x0802303d
 8022f24:	0802303d 	.word	0x0802303d
 8022f28:	0802303d 	.word	0x0802303d
 8022f2c:	0802303d 	.word	0x0802303d
 8022f30:	0802303d 	.word	0x0802303d
 8022f34:	0802303d 	.word	0x0802303d
 8022f38:	0802303d 	.word	0x0802303d
 8022f3c:	0802303d 	.word	0x0802303d
 8022f40:	0802303d 	.word	0x0802303d
 8022f44:	0802303d 	.word	0x0802303d
 8022f48:	0802303d 	.word	0x0802303d
 8022f4c:	08023019 	.word	0x08023019
 8022f50:	0802303d 	.word	0x0802303d
 8022f54:	0802303d 	.word	0x0802303d
 8022f58:	0802303d 	.word	0x0802303d
 8022f5c:	0802303d 	.word	0x0802303d
 8022f60:	0802303d 	.word	0x0802303d
 8022f64:	0802303d 	.word	0x0802303d
 8022f68:	0802303d 	.word	0x0802303d
 8022f6c:	0802303d 	.word	0x0802303d
 8022f70:	0802303d 	.word	0x0802303d
 8022f74:	0802303d 	.word	0x0802303d
 8022f78:	0802303d 	.word	0x0802303d
 8022f7c:	0802303d 	.word	0x0802303d
 8022f80:	0802303d 	.word	0x0802303d
 8022f84:	0802303d 	.word	0x0802303d
 8022f88:	0802303d 	.word	0x0802303d
 8022f8c:	08023021 	.word	0x08023021
 8022f90:	0802303d 	.word	0x0802303d
 8022f94:	0802303d 	.word	0x0802303d
 8022f98:	0802303d 	.word	0x0802303d
 8022f9c:	0802303d 	.word	0x0802303d
 8022fa0:	0802303d 	.word	0x0802303d
 8022fa4:	0802303d 	.word	0x0802303d
 8022fa8:	0802303d 	.word	0x0802303d
 8022fac:	0802303d 	.word	0x0802303d
 8022fb0:	0802303d 	.word	0x0802303d
 8022fb4:	0802303d 	.word	0x0802303d
 8022fb8:	0802303d 	.word	0x0802303d
 8022fbc:	0802303d 	.word	0x0802303d
 8022fc0:	0802303d 	.word	0x0802303d
 8022fc4:	0802303d 	.word	0x0802303d
 8022fc8:	0802303d 	.word	0x0802303d
 8022fcc:	08023029 	.word	0x08023029
 8022fd0:	0802303d 	.word	0x0802303d
 8022fd4:	0802303d 	.word	0x0802303d
 8022fd8:	0802303d 	.word	0x0802303d
 8022fdc:	0802303d 	.word	0x0802303d
 8022fe0:	0802303d 	.word	0x0802303d
 8022fe4:	0802303d 	.word	0x0802303d
 8022fe8:	0802303d 	.word	0x0802303d
 8022fec:	0802303d 	.word	0x0802303d
 8022ff0:	0802303d 	.word	0x0802303d
 8022ff4:	0802303d 	.word	0x0802303d
 8022ff8:	0802303d 	.word	0x0802303d
 8022ffc:	0802303d 	.word	0x0802303d
 8023000:	0802303d 	.word	0x0802303d
 8023004:	0802303d 	.word	0x0802303d
 8023008:	0802303d 	.word	0x0802303d
 802300c:	08023031 	.word	0x08023031
        case 0x10: target = MIN_VELOCITY; break;
 8023010:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8023014:	627b      	str	r3, [r7, #36]	; 0x24
 8023016:	e015      	b.n	8023044 <_ZN6Logger7LoadingEv+0x54c>
        case 0x01:
        case 0x20: target = MIN_VELOCITY + (ACCEL_VELOCITY * 1); break;
 8023018:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 802301c:	627b      	str	r3, [r7, #36]	; 0x24
 802301e:	e011      	b.n	8023044 <_ZN6Logger7LoadingEv+0x54c>
        case 0x02:
        case 0x30: target = MIN_VELOCITY + (ACCEL_VELOCITY * 2); break;
 8023020:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8023024:	627b      	str	r3, [r7, #36]	; 0x24
 8023026:	e00d      	b.n	8023044 <_ZN6Logger7LoadingEv+0x54c>
        case 0x03:
        case 0x40: target = MIN_VELOCITY + (ACCEL_VELOCITY * 3); break;
 8023028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802302c:	627b      	str	r3, [r7, #36]	; 0x24
 802302e:	e009      	b.n	8023044 <_ZN6Logger7LoadingEv+0x54c>
        case 0x04:
        case 0x50: target = MIN_VELOCITY + (ACCEL_VELOCITY * 4); break;
 8023030:	4b12      	ldr	r3, [pc, #72]	; (802307c <_ZN6Logger7LoadingEv+0x584>)
 8023032:	627b      	str	r3, [r7, #36]	; 0x24
 8023034:	e006      	b.n	8023044 <_ZN6Logger7LoadingEv+0x54c>
        case 0x05: target = MIN_VELOCITY + (ACCEL_VELOCITY * 5); break;
 8023036:	4b12      	ldr	r3, [pc, #72]	; (8023080 <_ZN6Logger7LoadingEv+0x588>)
 8023038:	627b      	str	r3, [r7, #36]	; 0x24
 802303a:	e003      	b.n	8023044 <_ZN6Logger7LoadingEv+0x54c>
        default: target = pre_target; break;
 802303c:	4b11      	ldr	r3, [pc, #68]	; (8023084 <_ZN6Logger7LoadingEv+0x58c>)
 802303e:	681b      	ldr	r3, [r3, #0]
 8023040:	627b      	str	r3, [r7, #36]	; 0x24
 8023042:	bf00      	nop
    }
    pre_target = target;
 8023044:	4a0f      	ldr	r2, [pc, #60]	; (8023084 <_ZN6Logger7LoadingEv+0x58c>)
 8023046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023048:	6013      	str	r3, [r2, #0]
    target_velocity_ = target;
 802304a:	687b      	ldr	r3, [r7, #4]
 802304c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802304e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

    now_address++;
 8023052:	4b07      	ldr	r3, [pc, #28]	; (8023070 <_ZN6Logger7LoadingEv+0x578>)
 8023054:	881b      	ldrh	r3, [r3, #0]
 8023056:	3301      	adds	r3, #1
 8023058:	b29a      	uxth	r2, r3
 802305a:	4b05      	ldr	r3, [pc, #20]	; (8023070 <_ZN6Logger7LoadingEv+0x578>)
 802305c:	801a      	strh	r2, [r3, #0]
 802305e:	e000      	b.n	8023062 <_ZN6Logger7LoadingEv+0x56a>
    if(distance < LOGGING_CONST_DISTANCE) return;
 8023060:	bf00      	nop
}
 8023062:	3730      	adds	r7, #48	; 0x30
 8023064:	46bd      	mov	sp, r7
 8023066:	bd80      	pop	{r7, pc}
 8023068:	2000011d 	.word	0x2000011d
 802306c:	20000118 	.word	0x20000118
 8023070:	20000100 	.word	0x20000100
 8023074:	2000011c 	.word	0x2000011c
 8023078:	2000011a 	.word	0x2000011a
 802307c:	40200000 	.word	0x40200000
 8023080:	40400000 	.word	0x40400000
 8023084:	2000000c 	.word	0x2000000c

08023088 <_ZN6Logger17GetTargetVelocityEv>:

float Logger::GetTargetVelocity()
{
 8023088:	b480      	push	{r7}
 802308a:	b083      	sub	sp, #12
 802308c:	af00      	add	r7, sp, #0
 802308e:	6078      	str	r0, [r7, #4]
    return target_velocity_;
 8023090:	687b      	ldr	r3, [r7, #4]
 8023092:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8023096:	ee07 3a90 	vmov	s15, r3
 802309a:	eeb0 0a67 	vmov.f32	s0, s15
 802309e:	370c      	adds	r7, #12
 80230a0:	46bd      	mov	sp, r7
 80230a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230a6:	4770      	bx	lr

080230a8 <_ZN7Logger2C1EP7EncoderP5FlashP3LedP8Iim42652P10SideSensor>:
#include "logger2.hpp"
#include "declare_extern.h"
#include <math.h>

Logger2::Logger2(Encoder *encoder,
 80230a8:	b480      	push	{r7}
 80230aa:	b085      	sub	sp, #20
 80230ac:	af00      	add	r7, sp, #0
 80230ae:	60f8      	str	r0, [r7, #12]
 80230b0:	60b9      	str	r1, [r7, #8]
 80230b2:	607a      	str	r2, [r7, #4]
 80230b4:	603b      	str	r3, [r7, #0]
                   , success_emergency_code_store_(false)
                   , logging_radian_buff_(0)
                   , loading_now_address_(0)
                   , uncorrected_address_buff_(0)
                   , logging_now_address_(0)
                   , target_velocity_(MIN_VELOCITY)
 80230b6:	68fb      	ldr	r3, [r7, #12]
 80230b8:	2200      	movs	r2, #0
 80230ba:	701a      	strb	r2, [r3, #0]
 80230bc:	68fb      	ldr	r3, [r7, #12]
 80230be:	2200      	movs	r2, #0
 80230c0:	705a      	strb	r2, [r3, #1]
 80230c2:	68fb      	ldr	r3, [r7, #12]
 80230c4:	f04f 0200 	mov.w	r2, #0
 80230c8:	605a      	str	r2, [r3, #4]
 80230ca:	68fb      	ldr	r3, [r7, #12]
 80230cc:	2200      	movs	r2, #0
 80230ce:	811a      	strh	r2, [r3, #8]
 80230d0:	68fb      	ldr	r3, [r7, #12]
 80230d2:	2200      	movs	r2, #0
 80230d4:	815a      	strh	r2, [r3, #10]
 80230d6:	68fb      	ldr	r3, [r7, #12]
 80230d8:	2200      	movs	r2, #0
 80230da:	819a      	strh	r2, [r3, #12]
 80230dc:	68fb      	ldr	r3, [r7, #12]
 80230de:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80230e2:	611a      	str	r2, [r3, #16]
{
    encoder_ = encoder;
 80230e4:	68fb      	ldr	r3, [r7, #12]
 80230e6:	68ba      	ldr	r2, [r7, #8]
 80230e8:	615a      	str	r2, [r3, #20]
    flash_ = flash;
 80230ea:	68fb      	ldr	r3, [r7, #12]
 80230ec:	687a      	ldr	r2, [r7, #4]
 80230ee:	619a      	str	r2, [r3, #24]
    led_ = led;
 80230f0:	68fb      	ldr	r3, [r7, #12]
 80230f2:	683a      	ldr	r2, [r7, #0]
 80230f4:	61da      	str	r2, [r3, #28]
    iim_42652_ = iim_42652;
 80230f6:	68fb      	ldr	r3, [r7, #12]
 80230f8:	69ba      	ldr	r2, [r7, #24]
 80230fa:	621a      	str	r2, [r3, #32]
    side_sensor_ = side_sensor;
 80230fc:	68fb      	ldr	r3, [r7, #12]
 80230fe:	69fa      	ldr	r2, [r7, #28]
 8023100:	625a      	str	r2, [r3, #36]	; 0x24
}
 8023102:	68fb      	ldr	r3, [r7, #12]
 8023104:	4618      	mov	r0, r3
 8023106:	3714      	adds	r7, #20
 8023108:	46bd      	mov	sp, r7
 802310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802310e:	4770      	bx	lr

08023110 <_ZN7Logger27LoggingEv>:

void Logger2::Logging()
{
 8023110:	b580      	push	{r7, lr}
 8023112:	b084      	sub	sp, #16
 8023114:	af00      	add	r7, sp, #0
 8023116:	6078      	str	r0, [r7, #4]
    float distance = encoder_->GetDistanceStack();
 8023118:	687b      	ldr	r3, [r7, #4]
 802311a:	695b      	ldr	r3, [r3, #20]
 802311c:	4618      	mov	r0, r3
 802311e:	f7fd ff34 	bl	8020f8a <_ZN7Encoder16GetDistanceStackEv>
 8023122:	ed87 0a03 	vstr	s0, [r7, #12]
    if(distance < LOGGING_CONST_DISTANCE) return;
 8023126:	edd7 7a03 	vldr	s15, [r7, #12]
 802312a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 802312e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023136:	d43f      	bmi.n	80231b8 <_ZN7Logger27LoggingEv+0xa8>
    encoder_->ResetDistanceStack();
 8023138:	687b      	ldr	r3, [r7, #4]
 802313a:	695b      	ldr	r3, [r3, #20]
 802313c:	4618      	mov	r0, r3
 802313e:	f7fd ff07 	bl	8020f50 <_ZN7Encoder18ResetDistanceStackEv>

    uint8_t result = StoreDistanceLog(distance);
 8023142:	ed97 0a03 	vldr	s0, [r7, #12]
 8023146:	6878      	ldr	r0, [r7, #4]
 8023148:	f000 f846 	bl	80231d8 <_ZN7Logger216StoreDistanceLogEf>
 802314c:	4603      	mov	r3, r0
 802314e:	72fb      	strb	r3, [r7, #11]
#ifdef DEBUG_MODE
    g_store_distance = result;
 8023150:	4a1b      	ldr	r2, [pc, #108]	; (80231c0 <_ZN7Logger27LoggingEv+0xb0>)
 8023152:	7afb      	ldrb	r3, [r7, #11]
 8023154:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
    CheckLoggingSuccess(ERROR_CODE_STORE_DISTANCE, result);
 8023156:	7afb      	ldrb	r3, [r7, #11]
 8023158:	461a      	mov	r2, r3
 802315a:	491a      	ldr	r1, [pc, #104]	; (80231c4 <_ZN7Logger27LoggingEv+0xb4>)
 802315c:	6878      	ldr	r0, [r7, #4]
 802315e:	f000 fa3f 	bl	80235e0 <_ZN7Logger219CheckLoggingSuccessEmh>

    result = StoreRadianLog();
 8023162:	6878      	ldr	r0, [r7, #4]
 8023164:	f000 f86c 	bl	8023240 <_ZN7Logger214StoreRadianLogEv>
 8023168:	4603      	mov	r3, r0
 802316a:	72fb      	strb	r3, [r7, #11]
#ifdef DEBUG_MODE
    g_store_radian = result;
 802316c:	4a16      	ldr	r2, [pc, #88]	; (80231c8 <_ZN7Logger27LoggingEv+0xb8>)
 802316e:	7afb      	ldrb	r3, [r7, #11]
 8023170:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
    CheckLoggingSuccess(ERROR_CODE_STORE_RADIAN, result);
 8023172:	7afb      	ldrb	r3, [r7, #11]
 8023174:	461a      	mov	r2, r3
 8023176:	4915      	ldr	r1, [pc, #84]	; (80231cc <_ZN7Logger27LoggingEv+0xbc>)
 8023178:	6878      	ldr	r0, [r7, #4]
 802317a:	f000 fa31 	bl	80235e0 <_ZN7Logger219CheckLoggingSuccessEmh>

    result = StoreVariousLog();
 802317e:	6878      	ldr	r0, [r7, #4]
 8023180:	f000 f8f6 	bl	8023370 <_ZN7Logger215StoreVariousLogEv>
 8023184:	4603      	mov	r3, r0
 8023186:	72fb      	strb	r3, [r7, #11]
#ifdef DEBUG_MODE
    g_store_various = result;
 8023188:	4a11      	ldr	r2, [pc, #68]	; (80231d0 <_ZN7Logger27LoggingEv+0xc0>)
 802318a:	7afb      	ldrb	r3, [r7, #11]
 802318c:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
    CheckLoggingSuccess(ERROR_CODE_STORE_VARIOUS, result);
 802318e:	7afb      	ldrb	r3, [r7, #11]
 8023190:	461a      	mov	r2, r3
 8023192:	4910      	ldr	r1, [pc, #64]	; (80231d4 <_ZN7Logger27LoggingEv+0xc4>)
 8023194:	6878      	ldr	r0, [r7, #4]
 8023196:	f000 fa23 	bl	80235e0 <_ZN7Logger219CheckLoggingSuccessEmh>

    DistanceCorrection(distance);
 802319a:	ed97 0a03 	vldr	s0, [r7, #12]
 802319e:	6878      	ldr	r0, [r7, #4]
 80231a0:	f000 f9a4 	bl	80234ec <_ZN7Logger218DistanceCorrectionEf>

    LoggingAccelPosition();
 80231a4:	6878      	ldr	r0, [r7, #4]
 80231a6:	f000 fa71 	bl	802368c <_ZN7Logger220LoggingAccelPositionEv>

    logging_now_address_++;
 80231aa:	687b      	ldr	r3, [r7, #4]
 80231ac:	899b      	ldrh	r3, [r3, #12]
 80231ae:	3301      	adds	r3, #1
 80231b0:	b29a      	uxth	r2, r3
 80231b2:	687b      	ldr	r3, [r7, #4]
 80231b4:	819a      	strh	r2, [r3, #12]
 80231b6:	e000      	b.n	80231ba <_ZN7Logger27LoggingEv+0xaa>
    if(distance < LOGGING_CONST_DISTANCE) return;
 80231b8:	bf00      	nop
}
 80231ba:	3710      	adds	r7, #16
 80231bc:	46bd      	mov	sp, r7
 80231be:	bd80      	pop	{r7, pc}
 80231c0:	20000139 	.word	0x20000139
 80231c4:	08018000 	.word	0x08018000
 80231c8:	2000013a 	.word	0x2000013a
 80231cc:	08018100 	.word	0x08018100
 80231d0:	2000013b 	.word	0x2000013b
 80231d4:	08018200 	.word	0x08018200

080231d8 <_ZN7Logger216StoreDistanceLogEf>:
    if(now_address == logging_now_address_) return true;
    else return false;
}

uint8_t Logger2::StoreDistanceLog(float distance)
{
 80231d8:	b580      	push	{r7, lr}
 80231da:	b084      	sub	sp, #16
 80231dc:	af00      	add	r7, sp, #0
 80231de:	6078      	str	r0, [r7, #4]
 80231e0:	ed87 0a00 	vstr	s0, [r7]
    uint32_t address = logging_now_address_ * 4 + HEAD_ADDRESS_BLOCK_A;
 80231e4:	687b      	ldr	r3, [r7, #4]
 80231e6:	899b      	ldrh	r3, [r3, #12]
 80231e8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80231ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80231f0:	009b      	lsls	r3, r3, #2
 80231f2:	60bb      	str	r3, [r7, #8]
    uint8_t result = 0;
 80231f4:	2300      	movs	r3, #0
 80231f6:	73fb      	strb	r3, [r7, #15]

    if(!flash_->CheckBlankWord(address, 1)) result = 0x02;
 80231f8:	687b      	ldr	r3, [r7, #4]
 80231fa:	699b      	ldr	r3, [r3, #24]
 80231fc:	2201      	movs	r2, #1
 80231fe:	68b9      	ldr	r1, [r7, #8]
 8023200:	4618      	mov	r0, r3
 8023202:	f7fe f877 	bl	80212f4 <_ZN5Flash14CheckBlankWordEmm>
 8023206:	4603      	mov	r3, r0
 8023208:	f083 0301 	eor.w	r3, r3, #1
 802320c:	b2db      	uxtb	r3, r3
 802320e:	2b00      	cmp	r3, #0
 8023210:	d002      	beq.n	8023218 <_ZN7Logger216StoreDistanceLogEf+0x40>
 8023212:	2302      	movs	r3, #2
 8023214:	73fb      	strb	r3, [r7, #15]
 8023216:	e00e      	b.n	8023236 <_ZN7Logger216StoreDistanceLogEf+0x5e>
    else if(!flash_->StoreFloat(address, &distance, 1)) result = 0x03;
 8023218:	687b      	ldr	r3, [r7, #4]
 802321a:	6998      	ldr	r0, [r3, #24]
 802321c:	463a      	mov	r2, r7
 802321e:	2301      	movs	r3, #1
 8023220:	68b9      	ldr	r1, [r7, #8]
 8023222:	f7fd ff7e 	bl	8021122 <_ZN5Flash10StoreFloatEmPfm>
 8023226:	4603      	mov	r3, r0
 8023228:	f083 0301 	eor.w	r3, r3, #1
 802322c:	b2db      	uxtb	r3, r3
 802322e:	2b00      	cmp	r3, #0
 8023230:	d001      	beq.n	8023236 <_ZN7Logger216StoreDistanceLogEf+0x5e>
 8023232:	2303      	movs	r3, #3
 8023234:	73fb      	strb	r3, [r7, #15]

    return result;
 8023236:	7bfb      	ldrb	r3, [r7, #15]
}
 8023238:	4618      	mov	r0, r3
 802323a:	3710      	adds	r7, #16
 802323c:	46bd      	mov	sp, r7
 802323e:	bd80      	pop	{r7, pc}

08023240 <_ZN7Logger214StoreRadianLogEv>:

uint8_t Logger2::StoreRadianLog()
{
 8023240:	b590      	push	{r4, r7, lr}
 8023242:	b089      	sub	sp, #36	; 0x24
 8023244:	af00      	add	r7, sp, #0
 8023246:	6078      	str	r0, [r7, #4]
    uint32_t address = logging_now_address_ * 4 + HEAD_ADDRESS_BLOCK_B;
 8023248:	687b      	ldr	r3, [r7, #4]
 802324a:	899b      	ldrh	r3, [r3, #12]
 802324c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8023250:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023254:	009b      	lsls	r3, r3, #2
 8023256:	61bb      	str	r3, [r7, #24]
    uint8_t result = 0;
 8023258:	2300      	movs	r3, #0
 802325a:	77fb      	strb	r3, [r7, #31]

    double degree = iim_42652_->GetDegreeStackZ();
 802325c:	687b      	ldr	r3, [r7, #4]
 802325e:	6a1b      	ldr	r3, [r3, #32]
 8023260:	4618      	mov	r0, r3
 8023262:	f7fe fa9d 	bl	80217a0 <_ZN8Iim4265215GetDegreeStackZEv>
 8023266:	ed87 0b04 	vstr	d0, [r7, #16]
    float radian = static_cast<float>(degree * M_PI / 180.0);
 802326a:	a324      	add	r3, pc, #144	; (adr r3, 80232fc <_ZN7Logger214StoreRadianLogEv+0xbc>)
 802326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023270:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8023274:	f7fd f8f0 	bl	8020458 <__aeabi_dmul>
 8023278:	4603      	mov	r3, r0
 802327a:	460c      	mov	r4, r1
 802327c:	4618      	mov	r0, r3
 802327e:	4621      	mov	r1, r4
 8023280:	f04f 0200 	mov.w	r2, #0
 8023284:	4b1c      	ldr	r3, [pc, #112]	; (80232f8 <_ZN7Logger214StoreRadianLogEv+0xb8>)
 8023286:	f7fd fa11 	bl	80206ac <__aeabi_ddiv>
 802328a:	4603      	mov	r3, r0
 802328c:	460c      	mov	r4, r1
 802328e:	4618      	mov	r0, r3
 8023290:	4621      	mov	r1, r4
 8023292:	f7fd fb7b 	bl	802098c <__aeabi_d2f>
 8023296:	4603      	mov	r3, r0
 8023298:	60fb      	str	r3, [r7, #12]
    iim_42652_->ResetDegreeStackZ();
 802329a:	687b      	ldr	r3, [r7, #4]
 802329c:	6a1b      	ldr	r3, [r3, #32]
 802329e:	4618      	mov	r0, r3
 80232a0:	f7fe fa6e 	bl	8021780 <_ZN8Iim4265217ResetDegreeStackZEv>
    logging_radian_buff_ = radian;
 80232a4:	68fa      	ldr	r2, [r7, #12]
 80232a6:	687b      	ldr	r3, [r7, #4]
 80232a8:	605a      	str	r2, [r3, #4]

    if(!flash_->CheckBlankWord(address, 1)) result = 0x02;
 80232aa:	687b      	ldr	r3, [r7, #4]
 80232ac:	699b      	ldr	r3, [r3, #24]
 80232ae:	2201      	movs	r2, #1
 80232b0:	69b9      	ldr	r1, [r7, #24]
 80232b2:	4618      	mov	r0, r3
 80232b4:	f7fe f81e 	bl	80212f4 <_ZN5Flash14CheckBlankWordEmm>
 80232b8:	4603      	mov	r3, r0
 80232ba:	f083 0301 	eor.w	r3, r3, #1
 80232be:	b2db      	uxtb	r3, r3
 80232c0:	2b00      	cmp	r3, #0
 80232c2:	d002      	beq.n	80232ca <_ZN7Logger214StoreRadianLogEv+0x8a>
 80232c4:	2302      	movs	r3, #2
 80232c6:	77fb      	strb	r3, [r7, #31]
 80232c8:	e00f      	b.n	80232ea <_ZN7Logger214StoreRadianLogEv+0xaa>
    else if(!flash_->StoreFloat(address, &radian, 1)) result = 0x03;
 80232ca:	687b      	ldr	r3, [r7, #4]
 80232cc:	6998      	ldr	r0, [r3, #24]
 80232ce:	f107 020c 	add.w	r2, r7, #12
 80232d2:	2301      	movs	r3, #1
 80232d4:	69b9      	ldr	r1, [r7, #24]
 80232d6:	f7fd ff24 	bl	8021122 <_ZN5Flash10StoreFloatEmPfm>
 80232da:	4603      	mov	r3, r0
 80232dc:	f083 0301 	eor.w	r3, r3, #1
 80232e0:	b2db      	uxtb	r3, r3
 80232e2:	2b00      	cmp	r3, #0
 80232e4:	d001      	beq.n	80232ea <_ZN7Logger214StoreRadianLogEv+0xaa>
 80232e6:	2303      	movs	r3, #3
 80232e8:	77fb      	strb	r3, [r7, #31]

    return result;
 80232ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80232ec:	4618      	mov	r0, r3
 80232ee:	3724      	adds	r7, #36	; 0x24
 80232f0:	46bd      	mov	sp, r7
 80232f2:	bd90      	pop	{r4, r7, pc}
 80232f4:	f3af 8000 	nop.w
 80232f8:	40668000 	.word	0x40668000
 80232fc:	54442d18 	.word	0x54442d18
 8023300:	400921fb 	.word	0x400921fb

08023304 <_ZN7Logger218StoreRadianCorrectEv>:

uint8_t Logger2::StoreRadianCorrect()
{
 8023304:	b580      	push	{r7, lr}
 8023306:	b086      	sub	sp, #24
 8023308:	af00      	add	r7, sp, #0
 802330a:	6078      	str	r0, [r7, #4]
    uint32_t address = logging_now_address_ * 4 + HEAD_ADDRESS_BLOCK_B;
 802330c:	687b      	ldr	r3, [r7, #4]
 802330e:	899b      	ldrh	r3, [r3, #12]
 8023310:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8023314:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023318:	009b      	lsls	r3, r3, #2
 802331a:	613b      	str	r3, [r7, #16]
    uint8_t result = 0;
 802331c:	2300      	movs	r3, #0
 802331e:	75fb      	strb	r3, [r7, #23]

    float radian = logging_radian_buff_;
 8023320:	687b      	ldr	r3, [r7, #4]
 8023322:	685b      	ldr	r3, [r3, #4]
 8023324:	60fb      	str	r3, [r7, #12]

    if(!flash_->CheckBlankWord(address, 1)) result = 0x02;
 8023326:	687b      	ldr	r3, [r7, #4]
 8023328:	699b      	ldr	r3, [r3, #24]
 802332a:	2201      	movs	r2, #1
 802332c:	6939      	ldr	r1, [r7, #16]
 802332e:	4618      	mov	r0, r3
 8023330:	f7fd ffe0 	bl	80212f4 <_ZN5Flash14CheckBlankWordEmm>
 8023334:	4603      	mov	r3, r0
 8023336:	f083 0301 	eor.w	r3, r3, #1
 802333a:	b2db      	uxtb	r3, r3
 802333c:	2b00      	cmp	r3, #0
 802333e:	d002      	beq.n	8023346 <_ZN7Logger218StoreRadianCorrectEv+0x42>
 8023340:	2302      	movs	r3, #2
 8023342:	75fb      	strb	r3, [r7, #23]
 8023344:	e00f      	b.n	8023366 <_ZN7Logger218StoreRadianCorrectEv+0x62>
    else if(!flash_->StoreFloat(address, &radian, 1)) result = 0x03;
 8023346:	687b      	ldr	r3, [r7, #4]
 8023348:	6998      	ldr	r0, [r3, #24]
 802334a:	f107 020c 	add.w	r2, r7, #12
 802334e:	2301      	movs	r3, #1
 8023350:	6939      	ldr	r1, [r7, #16]
 8023352:	f7fd fee6 	bl	8021122 <_ZN5Flash10StoreFloatEmPfm>
 8023356:	4603      	mov	r3, r0
 8023358:	f083 0301 	eor.w	r3, r3, #1
 802335c:	b2db      	uxtb	r3, r3
 802335e:	2b00      	cmp	r3, #0
 8023360:	d001      	beq.n	8023366 <_ZN7Logger218StoreRadianCorrectEv+0x62>
 8023362:	2303      	movs	r3, #3
 8023364:	75fb      	strb	r3, [r7, #23]

    return result;
 8023366:	7dfb      	ldrb	r3, [r7, #23]
}
 8023368:	4618      	mov	r0, r3
 802336a:	3718      	adds	r7, #24
 802336c:	46bd      	mov	sp, r7
 802336e:	bd80      	pop	{r7, pc}

08023370 <_ZN7Logger215StoreVariousLogEv>:

uint8_t Logger2::StoreVariousLog()
{
 8023370:	b580      	push	{r7, lr}
 8023372:	b086      	sub	sp, #24
 8023374:	af00      	add	r7, sp, #0
 8023376:	6078      	str	r0, [r7, #4]
    uint32_t address = logging_now_address_ * 2 + HEAD_ADDRESS_BLOCK_C;
 8023378:	687b      	ldr	r3, [r7, #4]
 802337a:	899b      	ldrh	r3, [r3, #12]
 802337c:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8023380:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8023384:	005b      	lsls	r3, r3, #1
 8023386:	613b      	str	r3, [r7, #16]
    uint8_t result = 0;
 8023388:	2300      	movs	r3, #0
 802338a:	75fb      	strb	r3, [r7, #23]

    uint8_t corner_count = side_sensor_->GetCornerMarkerCount();
 802338c:	687b      	ldr	r3, [r7, #4]
 802338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023390:	4618      	mov	r0, r3
 8023392:	f002 fd50 	bl	8025e36 <_ZN10SideSensor20GetCornerMarkerCountEv>
 8023396:	4603      	mov	r3, r0
 8023398:	73fb      	strb	r3, [r7, #15]
    uint8_t cross_count  = side_sensor_->GetCrossLineCount();
 802339a:	687b      	ldr	r3, [r7, #4]
 802339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802339e:	4618      	mov	r0, r3
 80233a0:	f002 fd55 	bl	8025e4e <_ZN10SideSensor17GetCrossLineCountEv>
 80233a4:	4603      	mov	r3, r0
 80233a6:	73bb      	strb	r3, [r7, #14]
    static uint8_t pre_corner_count = corner_count;
 80233a8:	4b4c      	ldr	r3, [pc, #304]	; (80234dc <_ZN7Logger215StoreVariousLogEv+0x16c>)
 80233aa:	781b      	ldrb	r3, [r3, #0]
 80233ac:	f3bf 8f5b 	dmb	ish
 80233b0:	b2db      	uxtb	r3, r3
 80233b2:	f003 0301 	and.w	r3, r3, #1
 80233b6:	2b00      	cmp	r3, #0
 80233b8:	bf0c      	ite	eq
 80233ba:	2301      	moveq	r3, #1
 80233bc:	2300      	movne	r3, #0
 80233be:	b2db      	uxtb	r3, r3
 80233c0:	2b00      	cmp	r3, #0
 80233c2:	d010      	beq.n	80233e6 <_ZN7Logger215StoreVariousLogEv+0x76>
 80233c4:	4845      	ldr	r0, [pc, #276]	; (80234dc <_ZN7Logger215StoreVariousLogEv+0x16c>)
 80233c6:	f007 fd83 	bl	802aed0 <__cxa_guard_acquire>
 80233ca:	4603      	mov	r3, r0
 80233cc:	2b00      	cmp	r3, #0
 80233ce:	bf14      	ite	ne
 80233d0:	2301      	movne	r3, #1
 80233d2:	2300      	moveq	r3, #0
 80233d4:	b2db      	uxtb	r3, r3
 80233d6:	2b00      	cmp	r3, #0
 80233d8:	d005      	beq.n	80233e6 <_ZN7Logger215StoreVariousLogEv+0x76>
 80233da:	4a41      	ldr	r2, [pc, #260]	; (80234e0 <_ZN7Logger215StoreVariousLogEv+0x170>)
 80233dc:	7bfb      	ldrb	r3, [r7, #15]
 80233de:	7013      	strb	r3, [r2, #0]
 80233e0:	483e      	ldr	r0, [pc, #248]	; (80234dc <_ZN7Logger215StoreVariousLogEv+0x16c>)
 80233e2:	f007 fd81 	bl	802aee8 <__cxa_guard_release>
    static uint8_t pre_cross_count  = cross_count;
 80233e6:	4b3f      	ldr	r3, [pc, #252]	; (80234e4 <_ZN7Logger215StoreVariousLogEv+0x174>)
 80233e8:	781b      	ldrb	r3, [r3, #0]
 80233ea:	f3bf 8f5b 	dmb	ish
 80233ee:	b2db      	uxtb	r3, r3
 80233f0:	f003 0301 	and.w	r3, r3, #1
 80233f4:	2b00      	cmp	r3, #0
 80233f6:	bf0c      	ite	eq
 80233f8:	2301      	moveq	r3, #1
 80233fa:	2300      	movne	r3, #0
 80233fc:	b2db      	uxtb	r3, r3
 80233fe:	2b00      	cmp	r3, #0
 8023400:	d010      	beq.n	8023424 <_ZN7Logger215StoreVariousLogEv+0xb4>
 8023402:	4838      	ldr	r0, [pc, #224]	; (80234e4 <_ZN7Logger215StoreVariousLogEv+0x174>)
 8023404:	f007 fd64 	bl	802aed0 <__cxa_guard_acquire>
 8023408:	4603      	mov	r3, r0
 802340a:	2b00      	cmp	r3, #0
 802340c:	bf14      	ite	ne
 802340e:	2301      	movne	r3, #1
 8023410:	2300      	moveq	r3, #0
 8023412:	b2db      	uxtb	r3, r3
 8023414:	2b00      	cmp	r3, #0
 8023416:	d005      	beq.n	8023424 <_ZN7Logger215StoreVariousLogEv+0xb4>
 8023418:	4a33      	ldr	r2, [pc, #204]	; (80234e8 <_ZN7Logger215StoreVariousLogEv+0x178>)
 802341a:	7bbb      	ldrb	r3, [r7, #14]
 802341c:	7013      	strb	r3, [r2, #0]
 802341e:	4831      	ldr	r0, [pc, #196]	; (80234e4 <_ZN7Logger215StoreVariousLogEv+0x174>)
 8023420:	f007 fd62 	bl	802aee8 <__cxa_guard_release>
    uint16_t various = 0;
 8023424:	2300      	movs	r3, #0
 8023426:	81bb      	strh	r3, [r7, #12]

    if(pre_corner_count != corner_count) various |= 0x0002;
 8023428:	4b2d      	ldr	r3, [pc, #180]	; (80234e0 <_ZN7Logger215StoreVariousLogEv+0x170>)
 802342a:	781b      	ldrb	r3, [r3, #0]
 802342c:	7bfa      	ldrb	r2, [r7, #15]
 802342e:	429a      	cmp	r2, r3
 8023430:	d004      	beq.n	802343c <_ZN7Logger215StoreVariousLogEv+0xcc>
 8023432:	89bb      	ldrh	r3, [r7, #12]
 8023434:	f043 0302 	orr.w	r3, r3, #2
 8023438:	b29b      	uxth	r3, r3
 802343a:	81bb      	strh	r3, [r7, #12]
    if(pre_cross_count != cross_count)   various |= 0x0001;
 802343c:	4b2a      	ldr	r3, [pc, #168]	; (80234e8 <_ZN7Logger215StoreVariousLogEv+0x178>)
 802343e:	781b      	ldrb	r3, [r3, #0]
 8023440:	7bba      	ldrb	r2, [r7, #14]
 8023442:	429a      	cmp	r2, r3
 8023444:	d004      	beq.n	8023450 <_ZN7Logger215StoreVariousLogEv+0xe0>
 8023446:	89bb      	ldrh	r3, [r7, #12]
 8023448:	f043 0301 	orr.w	r3, r3, #1
 802344c:	b29b      	uxth	r3, r3
 802344e:	81bb      	strh	r3, [r7, #12]

    pre_corner_count = corner_count;
 8023450:	4a23      	ldr	r2, [pc, #140]	; (80234e0 <_ZN7Logger215StoreVariousLogEv+0x170>)
 8023452:	7bfb      	ldrb	r3, [r7, #15]
 8023454:	7013      	strb	r3, [r2, #0]
    pre_cross_count  = cross_count;
 8023456:	4a24      	ldr	r2, [pc, #144]	; (80234e8 <_ZN7Logger215StoreVariousLogEv+0x178>)
 8023458:	7bbb      	ldrb	r3, [r7, #14]
 802345a:	7013      	strb	r3, [r2, #0]

    if(fabs(logging_radian_buff_) < 2)
 802345c:	687b      	ldr	r3, [r7, #4]
 802345e:	edd3 7a01 	vldr	s15, [r3, #4]
 8023462:	eeb0 0a67 	vmov.f32	s0, s15
 8023466:	f7fe ffdb 	bl	8022420 <_ZSt4fabsf>
 802346a:	eeb0 7a40 	vmov.f32	s14, s0
 802346e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8023472:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802347a:	bf4c      	ite	mi
 802347c:	2301      	movmi	r3, #1
 802347e:	2300      	movpl	r3, #0
 8023480:	b2db      	uxtb	r3, r3
 8023482:	2b00      	cmp	r3, #0
 8023484:	d002      	beq.n	802348c <_ZN7Logger215StoreVariousLogEv+0x11c>
    {
        various = 1;
 8023486:	2301      	movs	r3, #1
 8023488:	81bb      	strh	r3, [r7, #12]
 802348a:	e001      	b.n	8023490 <_ZN7Logger215StoreVariousLogEv+0x120>
    }
    else various = 0;
 802348c:	2300      	movs	r3, #0
 802348e:	81bb      	strh	r3, [r7, #12]

    if(!flash_->CheckBlankHalfword(address, 1)) result = 0x02;
 8023490:	687b      	ldr	r3, [r7, #4]
 8023492:	699b      	ldr	r3, [r3, #24]
 8023494:	2201      	movs	r2, #1
 8023496:	6939      	ldr	r1, [r7, #16]
 8023498:	4618      	mov	r0, r3
 802349a:	f7fd fed7 	bl	802124c <_ZN5Flash18CheckBlankHalfwordEmm>
 802349e:	4603      	mov	r3, r0
 80234a0:	f083 0301 	eor.w	r3, r3, #1
 80234a4:	b2db      	uxtb	r3, r3
 80234a6:	2b00      	cmp	r3, #0
 80234a8:	d002      	beq.n	80234b0 <_ZN7Logger215StoreVariousLogEv+0x140>
 80234aa:	2302      	movs	r3, #2
 80234ac:	75fb      	strb	r3, [r7, #23]
 80234ae:	e00f      	b.n	80234d0 <_ZN7Logger215StoreVariousLogEv+0x160>
    else if(!flash_->StoreUint16(address, &various, 1)) result = 0x03;
 80234b0:	687b      	ldr	r3, [r7, #4]
 80234b2:	6998      	ldr	r0, [r3, #24]
 80234b4:	f107 020c 	add.w	r2, r7, #12
 80234b8:	2301      	movs	r3, #1
 80234ba:	6939      	ldr	r1, [r7, #16]
 80234bc:	f7fd fdfc 	bl	80210b8 <_ZN5Flash11StoreUint16EmPtm>
 80234c0:	4603      	mov	r3, r0
 80234c2:	f083 0301 	eor.w	r3, r3, #1
 80234c6:	b2db      	uxtb	r3, r3
 80234c8:	2b00      	cmp	r3, #0
 80234ca:	d001      	beq.n	80234d0 <_ZN7Logger215StoreVariousLogEv+0x160>
 80234cc:	2303      	movs	r3, #3
 80234ce:	75fb      	strb	r3, [r7, #23]

    return result;
 80234d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80234d2:	4618      	mov	r0, r3
 80234d4:	3718      	adds	r7, #24
 80234d6:	46bd      	mov	sp, r7
 80234d8:	bd80      	pop	{r7, pc}
 80234da:	bf00      	nop
 80234dc:	20000120 	.word	0x20000120
 80234e0:	2000011e 	.word	0x2000011e
 80234e4:	20000128 	.word	0x20000128
 80234e8:	20000124 	.word	0x20000124

080234ec <_ZN7Logger218DistanceCorrectionEf>:

void Logger2::DistanceCorrection(float distance)
{
 80234ec:	b5b0      	push	{r4, r5, r7, lr}
 80234ee:	b084      	sub	sp, #16
 80234f0:	af00      	add	r7, sp, #0
 80234f2:	6078      	str	r0, [r7, #4]
 80234f4:	ed87 0a00 	vstr	s0, [r7]
    uncorrected_address_buff_ = logging_now_address_;
 80234f8:	687b      	ldr	r3, [r7, #4]
 80234fa:	899a      	ldrh	r2, [r3, #12]
 80234fc:	687b      	ldr	r3, [r7, #4]
 80234fe:	815a      	strh	r2, [r3, #10]

    static float excess_stack = 0;
    excess_stack += distance - LOGGING_CONST_DISTANCE;
 8023500:	4b31      	ldr	r3, [pc, #196]	; (80235c8 <_ZN7Logger218DistanceCorrectionEf+0xdc>)
 8023502:	681b      	ldr	r3, [r3, #0]
 8023504:	4618      	mov	r0, r3
 8023506:	f7fc ff4f 	bl	80203a8 <__aeabi_f2d>
 802350a:	4604      	mov	r4, r0
 802350c:	460d      	mov	r5, r1
 802350e:	6838      	ldr	r0, [r7, #0]
 8023510:	f7fc ff4a 	bl	80203a8 <__aeabi_f2d>
 8023514:	f04f 0200 	mov.w	r2, #0
 8023518:	4b2c      	ldr	r3, [pc, #176]	; (80235cc <_ZN7Logger218DistanceCorrectionEf+0xe0>)
 802351a:	f7fc fde5 	bl	80200e8 <__aeabi_dsub>
 802351e:	4602      	mov	r2, r0
 8023520:	460b      	mov	r3, r1
 8023522:	4620      	mov	r0, r4
 8023524:	4629      	mov	r1, r5
 8023526:	f7fc fde1 	bl	80200ec <__adddf3>
 802352a:	4603      	mov	r3, r0
 802352c:	460c      	mov	r4, r1
 802352e:	4618      	mov	r0, r3
 8023530:	4621      	mov	r1, r4
 8023532:	f7fd fa2b 	bl	802098c <__aeabi_d2f>
 8023536:	4602      	mov	r2, r0
 8023538:	4b23      	ldr	r3, [pc, #140]	; (80235c8 <_ZN7Logger218DistanceCorrectionEf+0xdc>)
 802353a:	601a      	str	r2, [r3, #0]

    if(excess_stack > LOGGING_CONST_DISTANCE)
 802353c:	4b22      	ldr	r3, [pc, #136]	; (80235c8 <_ZN7Logger218DistanceCorrectionEf+0xdc>)
 802353e:	edd3 7a00 	vldr	s15, [r3]
 8023542:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8023546:	eef4 7ac7 	vcmpe.f32	s15, s14
 802354a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802354e:	dc00      	bgt.n	8023552 <_ZN7Logger218DistanceCorrectionEf+0x66>
        result = StoreVariousLog();
        CheckLoggingSuccess(ERROR_CODE_STORE_VARIOUS, result);

        excess_stack -= LOGGING_CONST_DISTANCE;
    }
}
 8023550:	e035      	b.n	80235be <_ZN7Logger218DistanceCorrectionEf+0xd2>
        logging_now_address_++;
 8023552:	687b      	ldr	r3, [r7, #4]
 8023554:	899b      	ldrh	r3, [r3, #12]
 8023556:	3301      	adds	r3, #1
 8023558:	b29a      	uxth	r2, r3
 802355a:	687b      	ldr	r3, [r7, #4]
 802355c:	819a      	strh	r2, [r3, #12]
        uint8_t result = StoreDistanceLog(distance);
 802355e:	ed97 0a00 	vldr	s0, [r7]
 8023562:	6878      	ldr	r0, [r7, #4]
 8023564:	f7ff fe38 	bl	80231d8 <_ZN7Logger216StoreDistanceLogEf>
 8023568:	4603      	mov	r3, r0
 802356a:	73fb      	strb	r3, [r7, #15]
        g_store_correct = result;
 802356c:	4a18      	ldr	r2, [pc, #96]	; (80235d0 <_ZN7Logger218DistanceCorrectionEf+0xe4>)
 802356e:	7bfb      	ldrb	r3, [r7, #15]
 8023570:	7013      	strb	r3, [r2, #0]
        CheckLoggingSuccess(ERROR_CODE_STORE_DISTANCE, result);
 8023572:	7bfb      	ldrb	r3, [r7, #15]
 8023574:	461a      	mov	r2, r3
 8023576:	4917      	ldr	r1, [pc, #92]	; (80235d4 <_ZN7Logger218DistanceCorrectionEf+0xe8>)
 8023578:	6878      	ldr	r0, [r7, #4]
 802357a:	f000 f831 	bl	80235e0 <_ZN7Logger219CheckLoggingSuccessEmh>
        result = StoreRadianCorrect();
 802357e:	6878      	ldr	r0, [r7, #4]
 8023580:	f7ff fec0 	bl	8023304 <_ZN7Logger218StoreRadianCorrectEv>
 8023584:	4603      	mov	r3, r0
 8023586:	73fb      	strb	r3, [r7, #15]
        CheckLoggingSuccess(ERROR_CODE_STORE_RADIAN, result);
 8023588:	7bfb      	ldrb	r3, [r7, #15]
 802358a:	461a      	mov	r2, r3
 802358c:	4912      	ldr	r1, [pc, #72]	; (80235d8 <_ZN7Logger218DistanceCorrectionEf+0xec>)
 802358e:	6878      	ldr	r0, [r7, #4]
 8023590:	f000 f826 	bl	80235e0 <_ZN7Logger219CheckLoggingSuccessEmh>
        result = StoreVariousLog();
 8023594:	6878      	ldr	r0, [r7, #4]
 8023596:	f7ff feeb 	bl	8023370 <_ZN7Logger215StoreVariousLogEv>
 802359a:	4603      	mov	r3, r0
 802359c:	73fb      	strb	r3, [r7, #15]
        CheckLoggingSuccess(ERROR_CODE_STORE_VARIOUS, result);
 802359e:	7bfb      	ldrb	r3, [r7, #15]
 80235a0:	461a      	mov	r2, r3
 80235a2:	490e      	ldr	r1, [pc, #56]	; (80235dc <_ZN7Logger218DistanceCorrectionEf+0xf0>)
 80235a4:	6878      	ldr	r0, [r7, #4]
 80235a6:	f000 f81b 	bl	80235e0 <_ZN7Logger219CheckLoggingSuccessEmh>
        excess_stack -= LOGGING_CONST_DISTANCE;
 80235aa:	4b07      	ldr	r3, [pc, #28]	; (80235c8 <_ZN7Logger218DistanceCorrectionEf+0xdc>)
 80235ac:	edd3 7a00 	vldr	s15, [r3]
 80235b0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80235b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80235b8:	4b03      	ldr	r3, [pc, #12]	; (80235c8 <_ZN7Logger218DistanceCorrectionEf+0xdc>)
 80235ba:	edc3 7a00 	vstr	s15, [r3]
}
 80235be:	bf00      	nop
 80235c0:	3710      	adds	r7, #16
 80235c2:	46bd      	mov	sp, r7
 80235c4:	bdb0      	pop	{r4, r5, r7, pc}
 80235c6:	bf00      	nop
 80235c8:	2000012c 	.word	0x2000012c
 80235cc:	40340000 	.word	0x40340000
 80235d0:	2000013c 	.word	0x2000013c
 80235d4:	08018000 	.word	0x08018000
 80235d8:	08018100 	.word	0x08018100
 80235dc:	08018200 	.word	0x08018200

080235e0 <_ZN7Logger219CheckLoggingSuccessEmh>:

void Logger2::CheckLoggingSuccess(uint32_t address, uint8_t data)
{
 80235e0:	b580      	push	{r7, lr}
 80235e2:	b084      	sub	sp, #16
 80235e4:	af00      	add	r7, sp, #0
 80235e6:	60f8      	str	r0, [r7, #12]
 80235e8:	60b9      	str	r1, [r7, #8]
 80235ea:	4613      	mov	r3, r2
 80235ec:	71fb      	strb	r3, [r7, #7]
    if(data != 0)
 80235ee:	79fb      	ldrb	r3, [r7, #7]
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d011      	beq.n	8023618 <_ZN7Logger219CheckLoggingSuccessEmh+0x38>
    {
        SetEmergencyStopFlag(true);
 80235f4:	2101      	movs	r1, #1
 80235f6:	68f8      	ldr	r0, [r7, #12]
 80235f8:	f000 f812 	bl	8023620 <_ZN7Logger220SetEmergencyStopFlagEb>

        if(flash_->StoreUint8(address, &data, 1))
 80235fc:	68fb      	ldr	r3, [r7, #12]
 80235fe:	6998      	ldr	r0, [r3, #24]
 8023600:	1dfa      	adds	r2, r7, #7
 8023602:	2301      	movs	r3, #1
 8023604:	68b9      	ldr	r1, [r7, #8]
 8023606:	f7fd fd23 	bl	8021050 <_ZN5Flash10StoreUint8EmPhm>
 802360a:	4603      	mov	r3, r0
 802360c:	2b00      	cmp	r3, #0
 802360e:	d003      	beq.n	8023618 <_ZN7Logger219CheckLoggingSuccessEmh+0x38>
        {
            SetSuccessEmergencyCodeStore(true);
 8023610:	2101      	movs	r1, #1
 8023612:	68f8      	ldr	r0, [r7, #12]
 8023614:	f000 f81f 	bl	8023656 <_ZN7Logger228SetSuccessEmergencyCodeStoreEb>
        }
    }
}
 8023618:	bf00      	nop
 802361a:	3710      	adds	r7, #16
 802361c:	46bd      	mov	sp, r7
 802361e:	bd80      	pop	{r7, pc}

08023620 <_ZN7Logger220SetEmergencyStopFlagEb>:

void Logger2::SetEmergencyStopFlag(bool boolean)
{
 8023620:	b480      	push	{r7}
 8023622:	b083      	sub	sp, #12
 8023624:	af00      	add	r7, sp, #0
 8023626:	6078      	str	r0, [r7, #4]
 8023628:	460b      	mov	r3, r1
 802362a:	70fb      	strb	r3, [r7, #3]
    emergency_stop_flag_ = boolean;
 802362c:	687b      	ldr	r3, [r7, #4]
 802362e:	78fa      	ldrb	r2, [r7, #3]
 8023630:	701a      	strb	r2, [r3, #0]
}
 8023632:	bf00      	nop
 8023634:	370c      	adds	r7, #12
 8023636:	46bd      	mov	sp, r7
 8023638:	f85d 7b04 	ldr.w	r7, [sp], #4
 802363c:	4770      	bx	lr

0802363e <_ZN7Logger220GetEmergencyStopFlagEv>:

bool Logger2::GetEmergencyStopFlag()
{
 802363e:	b480      	push	{r7}
 8023640:	b083      	sub	sp, #12
 8023642:	af00      	add	r7, sp, #0
 8023644:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8023646:	687b      	ldr	r3, [r7, #4]
 8023648:	781b      	ldrb	r3, [r3, #0]
}
 802364a:	4618      	mov	r0, r3
 802364c:	370c      	adds	r7, #12
 802364e:	46bd      	mov	sp, r7
 8023650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023654:	4770      	bx	lr

08023656 <_ZN7Logger228SetSuccessEmergencyCodeStoreEb>:

void Logger2::SetSuccessEmergencyCodeStore(bool boolean)
{
 8023656:	b480      	push	{r7}
 8023658:	b083      	sub	sp, #12
 802365a:	af00      	add	r7, sp, #0
 802365c:	6078      	str	r0, [r7, #4]
 802365e:	460b      	mov	r3, r1
 8023660:	70fb      	strb	r3, [r7, #3]
    success_emergency_code_store_ = boolean;
 8023662:	687b      	ldr	r3, [r7, #4]
 8023664:	78fa      	ldrb	r2, [r7, #3]
 8023666:	705a      	strb	r2, [r3, #1]
}
 8023668:	bf00      	nop
 802366a:	370c      	adds	r7, #12
 802366c:	46bd      	mov	sp, r7
 802366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023672:	4770      	bx	lr

08023674 <_ZN7Logger228GetSuccessEmergencyCodeStoreEv>:

bool Logger2::GetSuccessEmergencyCodeStore()
{
 8023674:	b480      	push	{r7}
 8023676:	b083      	sub	sp, #12
 8023678:	af00      	add	r7, sp, #0
 802367a:	6078      	str	r0, [r7, #4]
    return success_emergency_code_store_;
 802367c:	687b      	ldr	r3, [r7, #4]
 802367e:	785b      	ldrb	r3, [r3, #1]
}
 8023680:	4618      	mov	r0, r3
 8023682:	370c      	adds	r7, #12
 8023684:	46bd      	mov	sp, r7
 8023686:	f85d 7b04 	ldr.w	r7, [sp], #4
 802368a:	4770      	bx	lr

0802368c <_ZN7Logger220LoggingAccelPositionEv>:

void Logger2::LoggingAccelPosition()
{
 802368c:	b580      	push	{r7, lr}
 802368e:	b088      	sub	sp, #32
 8023690:	af00      	add	r7, sp, #0
 8023692:	6078      	str	r0, [r7, #4]
    static uint16_t accel_straight_count = 0;
    static uint8_t accel_step = 0;
    bool straight = false;
 8023694:	2300      	movs	r3, #0
 8023696:	77fb      	strb	r3, [r7, #31]

    if(fabs(encoder_->AngularVelocity()) < STRAIGHT_BORDER_ENCODER)
 8023698:	687b      	ldr	r3, [r7, #4]
 802369a:	695b      	ldr	r3, [r3, #20]
 802369c:	4618      	mov	r0, r3
 802369e:	f7fd fc83 	bl	8020fa8 <_ZN7Encoder15AngularVelocityEv>
 80236a2:	eef0 7a40 	vmov.f32	s15, s0
 80236a6:	eeb0 0a67 	vmov.f32	s0, s15
 80236aa:	f7fe feb9 	bl	8022420 <_ZSt4fabsf>
 80236ae:	eeb0 7a40 	vmov.f32	s14, s0
 80236b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80236b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80236ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80236be:	bf4c      	ite	mi
 80236c0:	2301      	movmi	r3, #1
 80236c2:	2300      	movpl	r3, #0
 80236c4:	b2db      	uxtb	r3, r3
 80236c6:	2b00      	cmp	r3, #0
 80236c8:	d008      	beq.n	80236dc <_ZN7Logger220LoggingAccelPositionEv+0x50>
    {
        led_->ColorOrder('X');
 80236ca:	687b      	ldr	r3, [r7, #4]
 80236cc:	69db      	ldr	r3, [r3, #28]
 80236ce:	2158      	movs	r1, #88	; 0x58
 80236d0:	4618      	mov	r0, r3
 80236d2:	f7fe f887 	bl	80217e4 <_ZN3Led10ColorOrderEc>
        straight = true;
 80236d6:	2301      	movs	r3, #1
 80236d8:	77fb      	strb	r3, [r7, #31]
 80236da:	e005      	b.n	80236e8 <_ZN7Logger220LoggingAccelPositionEv+0x5c>
    }
    else led_->ColorOrder('M');
 80236dc:	687b      	ldr	r3, [r7, #4]
 80236de:	69db      	ldr	r3, [r3, #28]
 80236e0:	214d      	movs	r1, #77	; 0x4d
 80236e2:	4618      	mov	r0, r3
 80236e4:	f7fe f87e 	bl	80217e4 <_ZN3Led10ColorOrderEc>

    if(straight)
 80236e8:	7ffb      	ldrb	r3, [r7, #31]
 80236ea:	2b00      	cmp	r3, #0
 80236ec:	d02d      	beq.n	802374a <_ZN7Logger220LoggingAccelPositionEv+0xbe>
    {
        accel_straight_count++;
 80236ee:	4b33      	ldr	r3, [pc, #204]	; (80237bc <_ZN7Logger220LoggingAccelPositionEv+0x130>)
 80236f0:	881b      	ldrh	r3, [r3, #0]
 80236f2:	3301      	adds	r3, #1
 80236f4:	b29a      	uxth	r2, r3
 80236f6:	4b31      	ldr	r3, [pc, #196]	; (80237bc <_ZN7Logger220LoggingAccelPositionEv+0x130>)
 80236f8:	801a      	strh	r2, [r3, #0]
        if(accel_straight_count >= CNT_OF_ACCEL_STEP_UP && accel_step < NUM_OF_ACCEL_STEP)
 80236fa:	4b30      	ldr	r3, [pc, #192]	; (80237bc <_ZN7Logger220LoggingAccelPositionEv+0x130>)
 80236fc:	881b      	ldrh	r3, [r3, #0]
 80236fe:	2b03      	cmp	r3, #3
 8023700:	d957      	bls.n	80237b2 <_ZN7Logger220LoggingAccelPositionEv+0x126>
 8023702:	4b2f      	ldr	r3, [pc, #188]	; (80237c0 <_ZN7Logger220LoggingAccelPositionEv+0x134>)
 8023704:	781b      	ldrb	r3, [r3, #0]
 8023706:	2b04      	cmp	r3, #4
 8023708:	d853      	bhi.n	80237b2 <_ZN7Logger220LoggingAccelPositionEv+0x126>
        {
            accel_step++;
 802370a:	4b2d      	ldr	r3, [pc, #180]	; (80237c0 <_ZN7Logger220LoggingAccelPositionEv+0x134>)
 802370c:	781b      	ldrb	r3, [r3, #0]
 802370e:	3301      	adds	r3, #1
 8023710:	b2da      	uxtb	r2, r3
 8023712:	4b2b      	ldr	r3, [pc, #172]	; (80237c0 <_ZN7Logger220LoggingAccelPositionEv+0x134>)
 8023714:	701a      	strb	r2, [r3, #0]

            uint32_t accel_address = uncorrected_address_buff_ - CNT_OF_ACCEL_STEP_UP;
 8023716:	687b      	ldr	r3, [r7, #4]
 8023718:	895b      	ldrh	r3, [r3, #10]
 802371a:	3b04      	subs	r3, #4
 802371c:	613b      	str	r3, [r7, #16]

            uint8_t result = StoreAccelPosition(accel_address, accel_step);
 802371e:	4b28      	ldr	r3, [pc, #160]	; (80237c0 <_ZN7Logger220LoggingAccelPositionEv+0x134>)
 8023720:	781b      	ldrb	r3, [r3, #0]
 8023722:	461a      	mov	r2, r3
 8023724:	6939      	ldr	r1, [r7, #16]
 8023726:	6878      	ldr	r0, [r7, #4]
 8023728:	f000 f854 	bl	80237d4 <_ZN7Logger218StoreAccelPositionEmh>
 802372c:	4603      	mov	r3, r0
 802372e:	73fb      	strb	r3, [r7, #15]
#ifdef DEBUG_MODE
    g_store_accel = result;
 8023730:	4a24      	ldr	r2, [pc, #144]	; (80237c4 <_ZN7Logger220LoggingAccelPositionEv+0x138>)
 8023732:	7bfb      	ldrb	r3, [r7, #15]
 8023734:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
            CheckLoggingSuccess(ERROR_CODE_STORE_ACCEL, result);
 8023736:	7bfb      	ldrb	r3, [r7, #15]
 8023738:	461a      	mov	r2, r3
 802373a:	4923      	ldr	r1, [pc, #140]	; (80237c8 <_ZN7Logger220LoggingAccelPositionEv+0x13c>)
 802373c:	6878      	ldr	r0, [r7, #4]
 802373e:	f7ff ff4f 	bl	80235e0 <_ZN7Logger219CheckLoggingSuccessEmh>

            accel_straight_count = 0;
 8023742:	4b1e      	ldr	r3, [pc, #120]	; (80237bc <_ZN7Logger220LoggingAccelPositionEv+0x130>)
 8023744:	2200      	movs	r2, #0
 8023746:	801a      	strh	r2, [r3, #0]
        }
        accel_step = 0;
        accel_straight_count = 0;
    }
    else accel_straight_count = 0;
}
 8023748:	e033      	b.n	80237b2 <_ZN7Logger220LoggingAccelPositionEv+0x126>
    else if(accel_step != 0)
 802374a:	4b1d      	ldr	r3, [pc, #116]	; (80237c0 <_ZN7Logger220LoggingAccelPositionEv+0x134>)
 802374c:	781b      	ldrb	r3, [r3, #0]
 802374e:	2b00      	cmp	r3, #0
 8023750:	d02c      	beq.n	80237ac <_ZN7Logger220LoggingAccelPositionEv+0x120>
        for(uint8_t i = 1; i <= accel_step; i++)
 8023752:	2301      	movs	r3, #1
 8023754:	77bb      	strb	r3, [r7, #30]
 8023756:	4b1a      	ldr	r3, [pc, #104]	; (80237c0 <_ZN7Logger220LoggingAccelPositionEv+0x134>)
 8023758:	781b      	ldrb	r3, [r3, #0]
 802375a:	7fba      	ldrb	r2, [r7, #30]
 802375c:	429a      	cmp	r2, r3
 802375e:	d81e      	bhi.n	802379e <_ZN7Logger220LoggingAccelPositionEv+0x112>
            uint32_t decel_address = (uncorrected_address_buff_-1) - (DIFF_NEXT_ACCEL_STEP * i);
 8023760:	687b      	ldr	r3, [r7, #4]
 8023762:	895b      	ldrh	r3, [r3, #10]
 8023764:	1e5a      	subs	r2, r3, #1
 8023766:	7fbb      	ldrb	r3, [r7, #30]
 8023768:	005b      	lsls	r3, r3, #1
 802376a:	1ad3      	subs	r3, r2, r3
 802376c:	61bb      	str	r3, [r7, #24]
            uint8_t decel_step = i << 4;
 802376e:	7fbb      	ldrb	r3, [r7, #30]
 8023770:	011b      	lsls	r3, r3, #4
 8023772:	75fb      	strb	r3, [r7, #23]
            uint8_t result = StoreAccelPosition(decel_address, decel_step);
 8023774:	7dfb      	ldrb	r3, [r7, #23]
 8023776:	461a      	mov	r2, r3
 8023778:	69b9      	ldr	r1, [r7, #24]
 802377a:	6878      	ldr	r0, [r7, #4]
 802377c:	f000 f82a 	bl	80237d4 <_ZN7Logger218StoreAccelPositionEmh>
 8023780:	4603      	mov	r3, r0
 8023782:	75bb      	strb	r3, [r7, #22]
    g_store_decel = result;
 8023784:	4a11      	ldr	r2, [pc, #68]	; (80237cc <_ZN7Logger220LoggingAccelPositionEv+0x140>)
 8023786:	7dbb      	ldrb	r3, [r7, #22]
 8023788:	7013      	strb	r3, [r2, #0]
            CheckLoggingSuccess(ERROR_CODE_STORE_DECEL, result);
 802378a:	7dbb      	ldrb	r3, [r7, #22]
 802378c:	461a      	mov	r2, r3
 802378e:	4910      	ldr	r1, [pc, #64]	; (80237d0 <_ZN7Logger220LoggingAccelPositionEv+0x144>)
 8023790:	6878      	ldr	r0, [r7, #4]
 8023792:	f7ff ff25 	bl	80235e0 <_ZN7Logger219CheckLoggingSuccessEmh>
        for(uint8_t i = 1; i <= accel_step; i++)
 8023796:	7fbb      	ldrb	r3, [r7, #30]
 8023798:	3301      	adds	r3, #1
 802379a:	77bb      	strb	r3, [r7, #30]
 802379c:	e7db      	b.n	8023756 <_ZN7Logger220LoggingAccelPositionEv+0xca>
        accel_step = 0;
 802379e:	4b08      	ldr	r3, [pc, #32]	; (80237c0 <_ZN7Logger220LoggingAccelPositionEv+0x134>)
 80237a0:	2200      	movs	r2, #0
 80237a2:	701a      	strb	r2, [r3, #0]
        accel_straight_count = 0;
 80237a4:	4b05      	ldr	r3, [pc, #20]	; (80237bc <_ZN7Logger220LoggingAccelPositionEv+0x130>)
 80237a6:	2200      	movs	r2, #0
 80237a8:	801a      	strh	r2, [r3, #0]
}
 80237aa:	e002      	b.n	80237b2 <_ZN7Logger220LoggingAccelPositionEv+0x126>
    else accel_straight_count = 0;
 80237ac:	4b03      	ldr	r3, [pc, #12]	; (80237bc <_ZN7Logger220LoggingAccelPositionEv+0x130>)
 80237ae:	2200      	movs	r2, #0
 80237b0:	801a      	strh	r2, [r3, #0]
}
 80237b2:	bf00      	nop
 80237b4:	3720      	adds	r7, #32
 80237b6:	46bd      	mov	sp, r7
 80237b8:	bd80      	pop	{r7, pc}
 80237ba:	bf00      	nop
 80237bc:	20000130 	.word	0x20000130
 80237c0:	20000132 	.word	0x20000132
 80237c4:	2000013d 	.word	0x2000013d
 80237c8:	08018300 	.word	0x08018300
 80237cc:	2000013e 	.word	0x2000013e
 80237d0:	08018400 	.word	0x08018400

080237d4 <_ZN7Logger218StoreAccelPositionEmh>:

uint8_t Logger2::StoreAccelPosition(uint32_t address, uint8_t data)
{
 80237d4:	b580      	push	{r7, lr}
 80237d6:	b084      	sub	sp, #16
 80237d8:	af00      	add	r7, sp, #0
 80237da:	60f8      	str	r0, [r7, #12]
 80237dc:	60b9      	str	r1, [r7, #8]
 80237de:	4613      	mov	r3, r2
 80237e0:	71fb      	strb	r3, [r7, #7]
    address += HEAD_ADDRESS_BLOCK_D;
 80237e2:	68bb      	ldr	r3, [r7, #8]
 80237e4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80237e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80237ec:	60bb      	str	r3, [r7, #8]

    if(!flash_->CheckBlankByte(address, 1)) return 0x01;
 80237ee:	68fb      	ldr	r3, [r7, #12]
 80237f0:	699b      	ldr	r3, [r3, #24]
 80237f2:	2201      	movs	r2, #1
 80237f4:	68b9      	ldr	r1, [r7, #8]
 80237f6:	4618      	mov	r0, r3
 80237f8:	f7fd fcdb 	bl	80211b2 <_ZN5Flash14CheckBlankByteEmm>
 80237fc:	4603      	mov	r3, r0
 80237fe:	f083 0301 	eor.w	r3, r3, #1
 8023802:	b2db      	uxtb	r3, r3
 8023804:	2b00      	cmp	r3, #0
 8023806:	d001      	beq.n	802380c <_ZN7Logger218StoreAccelPositionEmh+0x38>
 8023808:	2301      	movs	r3, #1
 802380a:	e00f      	b.n	802382c <_ZN7Logger218StoreAccelPositionEmh+0x58>
    else if(!flash_->StoreUint8(address, &data, 1)) return 0x02;
 802380c:	68fb      	ldr	r3, [r7, #12]
 802380e:	6998      	ldr	r0, [r3, #24]
 8023810:	1dfa      	adds	r2, r7, #7
 8023812:	2301      	movs	r3, #1
 8023814:	68b9      	ldr	r1, [r7, #8]
 8023816:	f7fd fc1b 	bl	8021050 <_ZN5Flash10StoreUint8EmPhm>
 802381a:	4603      	mov	r3, r0
 802381c:	f083 0301 	eor.w	r3, r3, #1
 8023820:	b2db      	uxtb	r3, r3
 8023822:	2b00      	cmp	r3, #0
 8023824:	d001      	beq.n	802382a <_ZN7Logger218StoreAccelPositionEmh+0x56>
 8023826:	2302      	movs	r3, #2
 8023828:	e000      	b.n	802382c <_ZN7Logger218StoreAccelPositionEmh+0x58>

    return 0;
 802382a:	2300      	movs	r3, #0
}
 802382c:	4618      	mov	r0, r3
 802382e:	3710      	adds	r7, #16
 8023830:	46bd      	mov	sp, r7
 8023832:	bd80      	pop	{r7, pc}

08023834 <_ZN7Logger27LoadingEv>:

void Logger2::Loading()
{
 8023834:	b580      	push	{r7, lr}
 8023836:	b084      	sub	sp, #16
 8023838:	af00      	add	r7, sp, #0
 802383a:	6078      	str	r0, [r7, #4]
    {
        target_velocity_ = 0.80;
        led_->ColorOrder('Y');
    }
    */
    uint8_t count = side_sensor_->GetCornerMarkerCount();
 802383c:	687b      	ldr	r3, [r7, #4]
 802383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023840:	4618      	mov	r0, r3
 8023842:	f002 faf8 	bl	8025e36 <_ZN10SideSensor20GetCornerMarkerCountEv>
 8023846:	4603      	mov	r3, r0
 8023848:	73fb      	strb	r3, [r7, #15]

    switch(count)
 802384a:	7bfb      	ldrb	r3, [r7, #15]
 802384c:	2b06      	cmp	r3, #6
 802384e:	d822      	bhi.n	8023896 <_ZN7Logger27LoadingEv+0x62>
 8023850:	a201      	add	r2, pc, #4	; (adr r2, 8023858 <_ZN7Logger27LoadingEv+0x24>)
 8023852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023856:	bf00      	nop
 8023858:	08023875 	.word	0x08023875
 802385c:	08023897 	.word	0x08023897
 8023860:	0802387d 	.word	0x0802387d
 8023864:	08023885 	.word	0x08023885
 8023868:	08023897 	.word	0x08023897
 802386c:	08023897 	.word	0x08023897
 8023870:	0802388f 	.word	0x0802388f
    {
        case 0: target_velocity_ = 0.9; break;
 8023874:	687b      	ldr	r3, [r7, #4]
 8023876:	4a0f      	ldr	r2, [pc, #60]	; (80238b4 <_ZN7Logger27LoadingEv+0x80>)
 8023878:	611a      	str	r2, [r3, #16]
 802387a:	e011      	b.n	80238a0 <_ZN7Logger27LoadingEv+0x6c>
        case 2: target_velocity_ = 0.9; break;
 802387c:	687b      	ldr	r3, [r7, #4]
 802387e:	4a0d      	ldr	r2, [pc, #52]	; (80238b4 <_ZN7Logger27LoadingEv+0x80>)
 8023880:	611a      	str	r2, [r3, #16]
 8023882:	e00d      	b.n	80238a0 <_ZN7Logger27LoadingEv+0x6c>
        case 3: target_velocity_ = MIN_VELOCITY; break;
 8023884:	687b      	ldr	r3, [r7, #4]
 8023886:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 802388a:	611a      	str	r2, [r3, #16]
 802388c:	e008      	b.n	80238a0 <_ZN7Logger27LoadingEv+0x6c>
        case 6: target_velocity_ = 0.9; break;
 802388e:	687b      	ldr	r3, [r7, #4]
 8023890:	4a08      	ldr	r2, [pc, #32]	; (80238b4 <_ZN7Logger27LoadingEv+0x80>)
 8023892:	611a      	str	r2, [r3, #16]
 8023894:	e004      	b.n	80238a0 <_ZN7Logger27LoadingEv+0x6c>
        default:  target_velocity_ = MIN_VELOCITY; break;
 8023896:	687b      	ldr	r3, [r7, #4]
 8023898:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 802389c:	611a      	str	r2, [r3, #16]
 802389e:	bf00      	nop





    loading_now_address_++;
 80238a0:	687b      	ldr	r3, [r7, #4]
 80238a2:	891b      	ldrh	r3, [r3, #8]
 80238a4:	3301      	adds	r3, #1
 80238a6:	b29a      	uxth	r2, r3
 80238a8:	687b      	ldr	r3, [r7, #4]
 80238aa:	811a      	strh	r2, [r3, #8]
}
 80238ac:	bf00      	nop
 80238ae:	3710      	adds	r7, #16
 80238b0:	46bd      	mov	sp, r7
 80238b2:	bd80      	pop	{r7, pc}
 80238b4:	3f666666 	.word	0x3f666666

080238b8 <_ZN7Logger217GetTargetVelocityEv>:
    target_velocity_ = target;
    pre_target = target;
}

float Logger2::GetTargetVelocity()
{
 80238b8:	b480      	push	{r7}
 80238ba:	b083      	sub	sp, #12
 80238bc:	af00      	add	r7, sp, #0
 80238be:	6078      	str	r0, [r7, #4]
    return target_velocity_;
 80238c0:	687b      	ldr	r3, [r7, #4]
 80238c2:	691b      	ldr	r3, [r3, #16]
 80238c4:	ee07 3a90 	vmov	s15, r3
}
 80238c8:	eeb0 0a67 	vmov.f32	s0, s15
 80238cc:	370c      	adds	r7, #12
 80238ce:	46bd      	mov	sp, r7
 80238d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238d4:	4770      	bx	lr
	...

080238d8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80238d8:	b580      	push	{r7, lr}
 80238da:	b082      	sub	sp, #8
 80238dc:	af00      	add	r7, sp, #0
 80238de:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 80238e0:	687b      	ldr	r3, [r7, #4]
 80238e2:	681b      	ldr	r3, [r3, #0]
 80238e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80238e8:	d101      	bne.n	80238ee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 80238ea:	f003 f9bf 	bl	8026c6c <InterruptTim2>
  }
  if(htim->Instance == TIM6)
 80238ee:	687b      	ldr	r3, [r7, #4]
 80238f0:	681b      	ldr	r3, [r3, #0]
 80238f2:	4a08      	ldr	r2, [pc, #32]	; (8023914 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80238f4:	4293      	cmp	r3, r2
 80238f6:	d101      	bne.n	80238fc <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim6();
 80238f8:	f003 f9a8 	bl	8026c4c <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 80238fc:	687b      	ldr	r3, [r7, #4]
 80238fe:	681b      	ldr	r3, [r3, #0]
 8023900:	4a05      	ldr	r2, [pc, #20]	; (8023918 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8023902:	4293      	cmp	r3, r2
 8023904:	d101      	bne.n	802390a <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim7();
 8023906:	f003 f991 	bl	8026c2c <InterruptTim7>
  }
}
 802390a:	bf00      	nop
 802390c:	3708      	adds	r7, #8
 802390e:	46bd      	mov	sp, r7
 8023910:	bd80      	pop	{r7, pc}
 8023912:	bf00      	nop
 8023914:	40001000 	.word	0x40001000
 8023918:	40001400 	.word	0x40001400

0802391c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802391c:	b580      	push	{r7, lr}
 802391e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8023920:	f003 fa56 	bl	8026dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8023924:	f000 f822 	bl	802396c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8023928:	f000 fd68 	bl	80243fc <MX_GPIO_Init>
  MX_DMA_Init();
 802392c:	f000 fd46 	bl	80243bc <MX_DMA_Init>
  MX_ADC1_Init();
 8023930:	f000 f886 	bl	8023a40 <MX_ADC1_Init>
  MX_I2C2_Init();
 8023934:	f000 f98c 	bl	8023c50 <MX_I2C2_Init>
  MX_SPI3_Init();
 8023938:	f000 f9b8 	bl	8023cac <MX_SPI3_Init>
  MX_TIM1_Init();
 802393c:	f000 f9ec 	bl	8023d18 <MX_TIM1_Init>
  MX_TIM3_Init();
 8023940:	f000 fac8 	bl	8023ed4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8023944:	f000 fb40 	bl	8023fc8 <MX_TIM4_Init>
  MX_TIM6_Init();
 8023948:	f000 fbe0 	bl	802410c <MX_TIM6_Init>
  MX_TIM7_Init();
 802394c:	f000 fc14 	bl	8024178 <MX_TIM7_Init>
  MX_TIM8_Init();
 8023950:	f000 fc48 	bl	80241e4 <MX_TIM8_Init>
  MX_TIM11_Init();
 8023954:	f000 fc9e 	bl	8024294 <MX_TIM11_Init>
  MX_TIM12_Init();
 8023958:	f000 fcea 	bl	8024330 <MX_TIM12_Init>
  MX_TIM2_Init();
 802395c:	f000 fa6c 	bl	8023e38 <MX_TIM2_Init>
  MX_TIM5_Init();
 8023960:	f000 fb86 	bl	8024070 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8023964:	f003 f958 	bl	8026c18 <Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8023968:	e7fe      	b.n	8023968 <main+0x4c>
	...

0802396c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802396c:	b580      	push	{r7, lr}
 802396e:	b094      	sub	sp, #80	; 0x50
 8023970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8023972:	f107 0320 	add.w	r3, r7, #32
 8023976:	2230      	movs	r2, #48	; 0x30
 8023978:	2100      	movs	r1, #0
 802397a:	4618      	mov	r0, r3
 802397c:	f007 faed 	bl	802af5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8023980:	f107 030c 	add.w	r3, r7, #12
 8023984:	2200      	movs	r2, #0
 8023986:	601a      	str	r2, [r3, #0]
 8023988:	605a      	str	r2, [r3, #4]
 802398a:	609a      	str	r2, [r3, #8]
 802398c:	60da      	str	r2, [r3, #12]
 802398e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8023990:	2300      	movs	r3, #0
 8023992:	60bb      	str	r3, [r7, #8]
 8023994:	4b28      	ldr	r3, [pc, #160]	; (8023a38 <SystemClock_Config+0xcc>)
 8023996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023998:	4a27      	ldr	r2, [pc, #156]	; (8023a38 <SystemClock_Config+0xcc>)
 802399a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802399e:	6413      	str	r3, [r2, #64]	; 0x40
 80239a0:	4b25      	ldr	r3, [pc, #148]	; (8023a38 <SystemClock_Config+0xcc>)
 80239a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80239a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80239a8:	60bb      	str	r3, [r7, #8]
 80239aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80239ac:	2300      	movs	r3, #0
 80239ae:	607b      	str	r3, [r7, #4]
 80239b0:	4b22      	ldr	r3, [pc, #136]	; (8023a3c <SystemClock_Config+0xd0>)
 80239b2:	681b      	ldr	r3, [r3, #0]
 80239b4:	4a21      	ldr	r2, [pc, #132]	; (8023a3c <SystemClock_Config+0xd0>)
 80239b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80239ba:	6013      	str	r3, [r2, #0]
 80239bc:	4b1f      	ldr	r3, [pc, #124]	; (8023a3c <SystemClock_Config+0xd0>)
 80239be:	681b      	ldr	r3, [r3, #0]
 80239c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80239c4:	607b      	str	r3, [r7, #4]
 80239c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80239c8:	2301      	movs	r3, #1
 80239ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80239cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80239d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80239d2:	2302      	movs	r3, #2
 80239d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80239d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80239da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80239dc:	2306      	movs	r3, #6
 80239de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80239e0:	23a8      	movs	r3, #168	; 0xa8
 80239e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80239e4:	2302      	movs	r3, #2
 80239e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80239e8:	2304      	movs	r3, #4
 80239ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80239ec:	f107 0320 	add.w	r3, r7, #32
 80239f0:	4618      	mov	r0, r3
 80239f2:	f005 f8cf 	bl	8028b94 <HAL_RCC_OscConfig>
 80239f6:	4603      	mov	r3, r0
 80239f8:	2b00      	cmp	r3, #0
 80239fa:	d001      	beq.n	8023a00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80239fc:	f000 fdce 	bl	802459c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8023a00:	230f      	movs	r3, #15
 8023a02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8023a04:	2302      	movs	r3, #2
 8023a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8023a08:	2300      	movs	r3, #0
 8023a0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8023a0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8023a10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8023a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023a16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8023a18:	f107 030c 	add.w	r3, r7, #12
 8023a1c:	2105      	movs	r1, #5
 8023a1e:	4618      	mov	r0, r3
 8023a20:	f005 fb28 	bl	8029074 <HAL_RCC_ClockConfig>
 8023a24:	4603      	mov	r3, r0
 8023a26:	2b00      	cmp	r3, #0
 8023a28:	d001      	beq.n	8023a2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8023a2a:	f000 fdb7 	bl	802459c <Error_Handler>
  }
}
 8023a2e:	bf00      	nop
 8023a30:	3750      	adds	r7, #80	; 0x50
 8023a32:	46bd      	mov	sp, r7
 8023a34:	bd80      	pop	{r7, pc}
 8023a36:	bf00      	nop
 8023a38:	40023800 	.word	0x40023800
 8023a3c:	40007000 	.word	0x40007000

08023a40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8023a40:	b580      	push	{r7, lr}
 8023a42:	b084      	sub	sp, #16
 8023a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8023a46:	463b      	mov	r3, r7
 8023a48:	2200      	movs	r2, #0
 8023a4a:	601a      	str	r2, [r3, #0]
 8023a4c:	605a      	str	r2, [r3, #4]
 8023a4e:	609a      	str	r2, [r3, #8]
 8023a50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8023a52:	4b7c      	ldr	r3, [pc, #496]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023a54:	4a7c      	ldr	r2, [pc, #496]	; (8023c48 <MX_ADC1_Init+0x208>)
 8023a56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8023a58:	4b7a      	ldr	r3, [pc, #488]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023a5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8023a5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8023a60:	4b78      	ldr	r3, [pc, #480]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023a62:	2200      	movs	r2, #0
 8023a64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8023a66:	4b77      	ldr	r3, [pc, #476]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023a68:	2201      	movs	r2, #1
 8023a6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8023a6c:	4b75      	ldr	r3, [pc, #468]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023a6e:	2201      	movs	r2, #1
 8023a70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8023a72:	4b74      	ldr	r3, [pc, #464]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023a74:	2200      	movs	r2, #0
 8023a76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8023a7a:	4b72      	ldr	r3, [pc, #456]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023a7c:	2200      	movs	r2, #0
 8023a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8023a80:	4b70      	ldr	r3, [pc, #448]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023a82:	4a72      	ldr	r2, [pc, #456]	; (8023c4c <MX_ADC1_Init+0x20c>)
 8023a84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8023a86:	4b6f      	ldr	r3, [pc, #444]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023a88:	2200      	movs	r2, #0
 8023a8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8023a8c:	4b6d      	ldr	r3, [pc, #436]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023a8e:	220e      	movs	r2, #14
 8023a90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8023a92:	4b6c      	ldr	r3, [pc, #432]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023a94:	2201      	movs	r2, #1
 8023a96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8023a9a:	4b6a      	ldr	r3, [pc, #424]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023a9c:	2201      	movs	r2, #1
 8023a9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8023aa0:	4868      	ldr	r0, [pc, #416]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023aa2:	f003 fa29 	bl	8026ef8 <HAL_ADC_Init>
 8023aa6:	4603      	mov	r3, r0
 8023aa8:	2b00      	cmp	r3, #0
 8023aaa:	d001      	beq.n	8023ab0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8023aac:	f000 fd76 	bl	802459c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8023ab0:	2303      	movs	r3, #3
 8023ab2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8023ab4:	2301      	movs	r3, #1
 8023ab6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8023ab8:	2301      	movs	r3, #1
 8023aba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023abc:	463b      	mov	r3, r7
 8023abe:	4619      	mov	r1, r3
 8023ac0:	4860      	ldr	r0, [pc, #384]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023ac2:	f003 fb6d 	bl	80271a0 <HAL_ADC_ConfigChannel>
 8023ac6:	4603      	mov	r3, r0
 8023ac8:	2b00      	cmp	r3, #0
 8023aca:	d001      	beq.n	8023ad0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8023acc:	f000 fd66 	bl	802459c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8023ad0:	2304      	movs	r3, #4
 8023ad2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8023ad4:	2302      	movs	r3, #2
 8023ad6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023ad8:	463b      	mov	r3, r7
 8023ada:	4619      	mov	r1, r3
 8023adc:	4859      	ldr	r0, [pc, #356]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023ade:	f003 fb5f 	bl	80271a0 <HAL_ADC_ConfigChannel>
 8023ae2:	4603      	mov	r3, r0
 8023ae4:	2b00      	cmp	r3, #0
 8023ae6:	d001      	beq.n	8023aec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8023ae8:	f000 fd58 	bl	802459c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8023aec:	2305      	movs	r3, #5
 8023aee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8023af0:	2303      	movs	r3, #3
 8023af2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023af4:	463b      	mov	r3, r7
 8023af6:	4619      	mov	r1, r3
 8023af8:	4852      	ldr	r0, [pc, #328]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023afa:	f003 fb51 	bl	80271a0 <HAL_ADC_ConfigChannel>
 8023afe:	4603      	mov	r3, r0
 8023b00:	2b00      	cmp	r3, #0
 8023b02:	d001      	beq.n	8023b08 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8023b04:	f000 fd4a 	bl	802459c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8023b08:	2306      	movs	r3, #6
 8023b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8023b0c:	2304      	movs	r3, #4
 8023b0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023b10:	463b      	mov	r3, r7
 8023b12:	4619      	mov	r1, r3
 8023b14:	484b      	ldr	r0, [pc, #300]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023b16:	f003 fb43 	bl	80271a0 <HAL_ADC_ConfigChannel>
 8023b1a:	4603      	mov	r3, r0
 8023b1c:	2b00      	cmp	r3, #0
 8023b1e:	d001      	beq.n	8023b24 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8023b20:	f000 fd3c 	bl	802459c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8023b24:	2307      	movs	r3, #7
 8023b26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8023b28:	2305      	movs	r3, #5
 8023b2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023b2c:	463b      	mov	r3, r7
 8023b2e:	4619      	mov	r1, r3
 8023b30:	4844      	ldr	r0, [pc, #272]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023b32:	f003 fb35 	bl	80271a0 <HAL_ADC_ConfigChannel>
 8023b36:	4603      	mov	r3, r0
 8023b38:	2b00      	cmp	r3, #0
 8023b3a:	d001      	beq.n	8023b40 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8023b3c:	f000 fd2e 	bl	802459c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8023b40:	230e      	movs	r3, #14
 8023b42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8023b44:	2306      	movs	r3, #6
 8023b46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023b48:	463b      	mov	r3, r7
 8023b4a:	4619      	mov	r1, r3
 8023b4c:	483d      	ldr	r0, [pc, #244]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023b4e:	f003 fb27 	bl	80271a0 <HAL_ADC_ConfigChannel>
 8023b52:	4603      	mov	r3, r0
 8023b54:	2b00      	cmp	r3, #0
 8023b56:	d001      	beq.n	8023b5c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8023b58:	f000 fd20 	bl	802459c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8023b5c:	230f      	movs	r3, #15
 8023b5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8023b60:	2307      	movs	r3, #7
 8023b62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023b64:	463b      	mov	r3, r7
 8023b66:	4619      	mov	r1, r3
 8023b68:	4836      	ldr	r0, [pc, #216]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023b6a:	f003 fb19 	bl	80271a0 <HAL_ADC_ConfigChannel>
 8023b6e:	4603      	mov	r3, r0
 8023b70:	2b00      	cmp	r3, #0
 8023b72:	d001      	beq.n	8023b78 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8023b74:	f000 fd12 	bl	802459c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8023b78:	230a      	movs	r3, #10
 8023b7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8023b7c:	2308      	movs	r3, #8
 8023b7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023b80:	463b      	mov	r3, r7
 8023b82:	4619      	mov	r1, r3
 8023b84:	482f      	ldr	r0, [pc, #188]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023b86:	f003 fb0b 	bl	80271a0 <HAL_ADC_ConfigChannel>
 8023b8a:	4603      	mov	r3, r0
 8023b8c:	2b00      	cmp	r3, #0
 8023b8e:	d001      	beq.n	8023b94 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8023b90:	f000 fd04 	bl	802459c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8023b94:	230b      	movs	r3, #11
 8023b96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8023b98:	2309      	movs	r3, #9
 8023b9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023b9c:	463b      	mov	r3, r7
 8023b9e:	4619      	mov	r1, r3
 8023ba0:	4828      	ldr	r0, [pc, #160]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023ba2:	f003 fafd 	bl	80271a0 <HAL_ADC_ConfigChannel>
 8023ba6:	4603      	mov	r3, r0
 8023ba8:	2b00      	cmp	r3, #0
 8023baa:	d001      	beq.n	8023bb0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8023bac:	f000 fcf6 	bl	802459c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8023bb0:	230c      	movs	r3, #12
 8023bb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8023bb4:	230a      	movs	r3, #10
 8023bb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023bb8:	463b      	mov	r3, r7
 8023bba:	4619      	mov	r1, r3
 8023bbc:	4821      	ldr	r0, [pc, #132]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023bbe:	f003 faef 	bl	80271a0 <HAL_ADC_ConfigChannel>
 8023bc2:	4603      	mov	r3, r0
 8023bc4:	2b00      	cmp	r3, #0
 8023bc6:	d001      	beq.n	8023bcc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8023bc8:	f000 fce8 	bl	802459c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8023bcc:	230d      	movs	r3, #13
 8023bce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8023bd0:	230b      	movs	r3, #11
 8023bd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023bd4:	463b      	mov	r3, r7
 8023bd6:	4619      	mov	r1, r3
 8023bd8:	481a      	ldr	r0, [pc, #104]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023bda:	f003 fae1 	bl	80271a0 <HAL_ADC_ConfigChannel>
 8023bde:	4603      	mov	r3, r0
 8023be0:	2b00      	cmp	r3, #0
 8023be2:	d001      	beq.n	8023be8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8023be4:	f000 fcda 	bl	802459c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8023be8:	2302      	movs	r3, #2
 8023bea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8023bec:	230c      	movs	r3, #12
 8023bee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023bf0:	463b      	mov	r3, r7
 8023bf2:	4619      	mov	r1, r3
 8023bf4:	4813      	ldr	r0, [pc, #76]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023bf6:	f003 fad3 	bl	80271a0 <HAL_ADC_ConfigChannel>
 8023bfa:	4603      	mov	r3, r0
 8023bfc:	2b00      	cmp	r3, #0
 8023bfe:	d001      	beq.n	8023c04 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8023c00:	f000 fccc 	bl	802459c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8023c04:	2301      	movs	r3, #1
 8023c06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8023c08:	230d      	movs	r3, #13
 8023c0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023c0c:	463b      	mov	r3, r7
 8023c0e:	4619      	mov	r1, r3
 8023c10:	480c      	ldr	r0, [pc, #48]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023c12:	f003 fac5 	bl	80271a0 <HAL_ADC_ConfigChannel>
 8023c16:	4603      	mov	r3, r0
 8023c18:	2b00      	cmp	r3, #0
 8023c1a:	d001      	beq.n	8023c20 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8023c1c:	f000 fcbe 	bl	802459c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8023c20:	2300      	movs	r3, #0
 8023c22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8023c24:	230e      	movs	r3, #14
 8023c26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023c28:	463b      	mov	r3, r7
 8023c2a:	4619      	mov	r1, r3
 8023c2c:	4805      	ldr	r0, [pc, #20]	; (8023c44 <MX_ADC1_Init+0x204>)
 8023c2e:	f003 fab7 	bl	80271a0 <HAL_ADC_ConfigChannel>
 8023c32:	4603      	mov	r3, r0
 8023c34:	2b00      	cmp	r3, #0
 8023c36:	d001      	beq.n	8023c3c <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8023c38:	f000 fcb0 	bl	802459c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8023c3c:	bf00      	nop
 8023c3e:	3710      	adds	r7, #16
 8023c40:	46bd      	mov	sp, r7
 8023c42:	bd80      	pop	{r7, pc}
 8023c44:	200112cc 	.word	0x200112cc
 8023c48:	40012000 	.word	0x40012000
 8023c4c:	0f000001 	.word	0x0f000001

08023c50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8023c50:	b580      	push	{r7, lr}
 8023c52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8023c54:	4b12      	ldr	r3, [pc, #72]	; (8023ca0 <MX_I2C2_Init+0x50>)
 8023c56:	4a13      	ldr	r2, [pc, #76]	; (8023ca4 <MX_I2C2_Init+0x54>)
 8023c58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8023c5a:	4b11      	ldr	r3, [pc, #68]	; (8023ca0 <MX_I2C2_Init+0x50>)
 8023c5c:	4a12      	ldr	r2, [pc, #72]	; (8023ca8 <MX_I2C2_Init+0x58>)
 8023c5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8023c60:	4b0f      	ldr	r3, [pc, #60]	; (8023ca0 <MX_I2C2_Init+0x50>)
 8023c62:	2200      	movs	r2, #0
 8023c64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8023c66:	4b0e      	ldr	r3, [pc, #56]	; (8023ca0 <MX_I2C2_Init+0x50>)
 8023c68:	2200      	movs	r2, #0
 8023c6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8023c6c:	4b0c      	ldr	r3, [pc, #48]	; (8023ca0 <MX_I2C2_Init+0x50>)
 8023c6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8023c72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8023c74:	4b0a      	ldr	r3, [pc, #40]	; (8023ca0 <MX_I2C2_Init+0x50>)
 8023c76:	2200      	movs	r2, #0
 8023c78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8023c7a:	4b09      	ldr	r3, [pc, #36]	; (8023ca0 <MX_I2C2_Init+0x50>)
 8023c7c:	2200      	movs	r2, #0
 8023c7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8023c80:	4b07      	ldr	r3, [pc, #28]	; (8023ca0 <MX_I2C2_Init+0x50>)
 8023c82:	2200      	movs	r2, #0
 8023c84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8023c86:	4b06      	ldr	r3, [pc, #24]	; (8023ca0 <MX_I2C2_Init+0x50>)
 8023c88:	2200      	movs	r2, #0
 8023c8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8023c8c:	4804      	ldr	r0, [pc, #16]	; (8023ca0 <MX_I2C2_Init+0x50>)
 8023c8e:	f004 fe49 	bl	8028924 <HAL_I2C_Init>
 8023c92:	4603      	mov	r3, r0
 8023c94:	2b00      	cmp	r3, #0
 8023c96:	d001      	beq.n	8023c9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8023c98:	f000 fc80 	bl	802459c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8023c9c:	bf00      	nop
 8023c9e:	bd80      	pop	{r7, pc}
 8023ca0:	200111a0 	.word	0x200111a0
 8023ca4:	40005800 	.word	0x40005800
 8023ca8:	000186a0 	.word	0x000186a0

08023cac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8023cac:	b580      	push	{r7, lr}
 8023cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8023cb0:	4b17      	ldr	r3, [pc, #92]	; (8023d10 <MX_SPI3_Init+0x64>)
 8023cb2:	4a18      	ldr	r2, [pc, #96]	; (8023d14 <MX_SPI3_Init+0x68>)
 8023cb4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8023cb6:	4b16      	ldr	r3, [pc, #88]	; (8023d10 <MX_SPI3_Init+0x64>)
 8023cb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8023cbc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8023cbe:	4b14      	ldr	r3, [pc, #80]	; (8023d10 <MX_SPI3_Init+0x64>)
 8023cc0:	2200      	movs	r2, #0
 8023cc2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8023cc4:	4b12      	ldr	r3, [pc, #72]	; (8023d10 <MX_SPI3_Init+0x64>)
 8023cc6:	2200      	movs	r2, #0
 8023cc8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8023cca:	4b11      	ldr	r3, [pc, #68]	; (8023d10 <MX_SPI3_Init+0x64>)
 8023ccc:	2200      	movs	r2, #0
 8023cce:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8023cd0:	4b0f      	ldr	r3, [pc, #60]	; (8023d10 <MX_SPI3_Init+0x64>)
 8023cd2:	2200      	movs	r2, #0
 8023cd4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8023cd6:	4b0e      	ldr	r3, [pc, #56]	; (8023d10 <MX_SPI3_Init+0x64>)
 8023cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023cdc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8023cde:	4b0c      	ldr	r3, [pc, #48]	; (8023d10 <MX_SPI3_Init+0x64>)
 8023ce0:	2238      	movs	r2, #56	; 0x38
 8023ce2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8023ce4:	4b0a      	ldr	r3, [pc, #40]	; (8023d10 <MX_SPI3_Init+0x64>)
 8023ce6:	2200      	movs	r2, #0
 8023ce8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8023cea:	4b09      	ldr	r3, [pc, #36]	; (8023d10 <MX_SPI3_Init+0x64>)
 8023cec:	2200      	movs	r2, #0
 8023cee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8023cf0:	4b07      	ldr	r3, [pc, #28]	; (8023d10 <MX_SPI3_Init+0x64>)
 8023cf2:	2200      	movs	r2, #0
 8023cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8023cf6:	4b06      	ldr	r3, [pc, #24]	; (8023d10 <MX_SPI3_Init+0x64>)
 8023cf8:	220a      	movs	r2, #10
 8023cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8023cfc:	4804      	ldr	r0, [pc, #16]	; (8023d10 <MX_SPI3_Init+0x64>)
 8023cfe:	f005 fb71 	bl	80293e4 <HAL_SPI_Init>
 8023d02:	4603      	mov	r3, r0
 8023d04:	2b00      	cmp	r3, #0
 8023d06:	d001      	beq.n	8023d0c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8023d08:	f000 fc48 	bl	802459c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8023d0c:	bf00      	nop
 8023d0e:	bd80      	pop	{r7, pc}
 8023d10:	20011274 	.word	0x20011274
 8023d14:	40003c00 	.word	0x40003c00

08023d18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8023d18:	b580      	push	{r7, lr}
 8023d1a:	b092      	sub	sp, #72	; 0x48
 8023d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023d1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8023d22:	2200      	movs	r2, #0
 8023d24:	601a      	str	r2, [r3, #0]
 8023d26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023d2c:	2200      	movs	r2, #0
 8023d2e:	601a      	str	r2, [r3, #0]
 8023d30:	605a      	str	r2, [r3, #4]
 8023d32:	609a      	str	r2, [r3, #8]
 8023d34:	60da      	str	r2, [r3, #12]
 8023d36:	611a      	str	r2, [r3, #16]
 8023d38:	615a      	str	r2, [r3, #20]
 8023d3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8023d3c:	1d3b      	adds	r3, r7, #4
 8023d3e:	2220      	movs	r2, #32
 8023d40:	2100      	movs	r1, #0
 8023d42:	4618      	mov	r0, r3
 8023d44:	f007 f909 	bl	802af5a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8023d48:	4b39      	ldr	r3, [pc, #228]	; (8023e30 <MX_TIM1_Init+0x118>)
 8023d4a:	4a3a      	ldr	r2, [pc, #232]	; (8023e34 <MX_TIM1_Init+0x11c>)
 8023d4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8023d4e:	4b38      	ldr	r3, [pc, #224]	; (8023e30 <MX_TIM1_Init+0x118>)
 8023d50:	2201      	movs	r2, #1
 8023d52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023d54:	4b36      	ldr	r3, [pc, #216]	; (8023e30 <MX_TIM1_Init+0x118>)
 8023d56:	2200      	movs	r2, #0
 8023d58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 8023d5a:	4b35      	ldr	r3, [pc, #212]	; (8023e30 <MX_TIM1_Init+0x118>)
 8023d5c:	f240 4219 	movw	r2, #1049	; 0x419
 8023d60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023d62:	4b33      	ldr	r3, [pc, #204]	; (8023e30 <MX_TIM1_Init+0x118>)
 8023d64:	2200      	movs	r2, #0
 8023d66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8023d68:	4b31      	ldr	r3, [pc, #196]	; (8023e30 <MX_TIM1_Init+0x118>)
 8023d6a:	2200      	movs	r2, #0
 8023d6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023d6e:	4b30      	ldr	r3, [pc, #192]	; (8023e30 <MX_TIM1_Init+0x118>)
 8023d70:	2200      	movs	r2, #0
 8023d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8023d74:	482e      	ldr	r0, [pc, #184]	; (8023e30 <MX_TIM1_Init+0x118>)
 8023d76:	f006 f8d8 	bl	8029f2a <HAL_TIM_PWM_Init>
 8023d7a:	4603      	mov	r3, r0
 8023d7c:	2b00      	cmp	r3, #0
 8023d7e:	d001      	beq.n	8023d84 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8023d80:	f000 fc0c 	bl	802459c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023d84:	2300      	movs	r3, #0
 8023d86:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023d88:	2300      	movs	r3, #0
 8023d8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8023d8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8023d90:	4619      	mov	r1, r3
 8023d92:	4827      	ldr	r0, [pc, #156]	; (8023e30 <MX_TIM1_Init+0x118>)
 8023d94:	f006 ffba 	bl	802ad0c <HAL_TIMEx_MasterConfigSynchronization>
 8023d98:	4603      	mov	r3, r0
 8023d9a:	2b00      	cmp	r3, #0
 8023d9c:	d001      	beq.n	8023da2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8023d9e:	f000 fbfd 	bl	802459c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023da2:	2360      	movs	r3, #96	; 0x60
 8023da4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8023da6:	2300      	movs	r3, #0
 8023da8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023daa:	2300      	movs	r3, #0
 8023dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8023dae:	2300      	movs	r3, #0
 8023db0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023db2:	2300      	movs	r3, #0
 8023db4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8023db6:	2300      	movs	r3, #0
 8023db8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8023dba:	2300      	movs	r3, #0
 8023dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023dc2:	2204      	movs	r2, #4
 8023dc4:	4619      	mov	r1, r3
 8023dc6:	481a      	ldr	r0, [pc, #104]	; (8023e30 <MX_TIM1_Init+0x118>)
 8023dc8:	f006 faea 	bl	802a3a0 <HAL_TIM_PWM_ConfigChannel>
 8023dcc:	4603      	mov	r3, r0
 8023dce:	2b00      	cmp	r3, #0
 8023dd0:	d001      	beq.n	8023dd6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8023dd2:	f000 fbe3 	bl	802459c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8023dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023dda:	220c      	movs	r2, #12
 8023ddc:	4619      	mov	r1, r3
 8023dde:	4814      	ldr	r0, [pc, #80]	; (8023e30 <MX_TIM1_Init+0x118>)
 8023de0:	f006 fade 	bl	802a3a0 <HAL_TIM_PWM_ConfigChannel>
 8023de4:	4603      	mov	r3, r0
 8023de6:	2b00      	cmp	r3, #0
 8023de8:	d001      	beq.n	8023dee <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8023dea:	f000 fbd7 	bl	802459c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8023dee:	2300      	movs	r3, #0
 8023df0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8023df2:	2300      	movs	r3, #0
 8023df4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8023df6:	2300      	movs	r3, #0
 8023df8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8023dfa:	2300      	movs	r3, #0
 8023dfc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8023dfe:	2300      	movs	r3, #0
 8023e00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8023e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8023e06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8023e08:	2300      	movs	r3, #0
 8023e0a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8023e0c:	1d3b      	adds	r3, r7, #4
 8023e0e:	4619      	mov	r1, r3
 8023e10:	4807      	ldr	r0, [pc, #28]	; (8023e30 <MX_TIM1_Init+0x118>)
 8023e12:	f006 fff7 	bl	802ae04 <HAL_TIMEx_ConfigBreakDeadTime>
 8023e16:	4603      	mov	r3, r0
 8023e18:	2b00      	cmp	r3, #0
 8023e1a:	d001      	beq.n	8023e20 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8023e1c:	f000 fbbe 	bl	802459c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8023e20:	4803      	ldr	r0, [pc, #12]	; (8023e30 <MX_TIM1_Init+0x118>)
 8023e22:	f002 fb6d 	bl	8026500 <HAL_TIM_MspPostInit>

}
 8023e26:	bf00      	nop
 8023e28:	3748      	adds	r7, #72	; 0x48
 8023e2a:	46bd      	mov	sp, r7
 8023e2c:	bd80      	pop	{r7, pc}
 8023e2e:	bf00      	nop
 8023e30:	200113f4 	.word	0x200113f4
 8023e34:	40010000 	.word	0x40010000

08023e38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8023e38:	b580      	push	{r7, lr}
 8023e3a:	b086      	sub	sp, #24
 8023e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8023e3e:	f107 0308 	add.w	r3, r7, #8
 8023e42:	2200      	movs	r2, #0
 8023e44:	601a      	str	r2, [r3, #0]
 8023e46:	605a      	str	r2, [r3, #4]
 8023e48:	609a      	str	r2, [r3, #8]
 8023e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023e4c:	463b      	mov	r3, r7
 8023e4e:	2200      	movs	r2, #0
 8023e50:	601a      	str	r2, [r3, #0]
 8023e52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8023e54:	4b1d      	ldr	r3, [pc, #116]	; (8023ecc <MX_TIM2_Init+0x94>)
 8023e56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023e5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8023e5c:	4b1b      	ldr	r3, [pc, #108]	; (8023ecc <MX_TIM2_Init+0x94>)
 8023e5e:	2204      	movs	r2, #4
 8023e60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023e62:	4b1a      	ldr	r3, [pc, #104]	; (8023ecc <MX_TIM2_Init+0x94>)
 8023e64:	2200      	movs	r2, #0
 8023e66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 8023e68:	4b18      	ldr	r3, [pc, #96]	; (8023ecc <MX_TIM2_Init+0x94>)
 8023e6a:	4a19      	ldr	r2, [pc, #100]	; (8023ed0 <MX_TIM2_Init+0x98>)
 8023e6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023e6e:	4b17      	ldr	r3, [pc, #92]	; (8023ecc <MX_TIM2_Init+0x94>)
 8023e70:	2200      	movs	r2, #0
 8023e72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023e74:	4b15      	ldr	r3, [pc, #84]	; (8023ecc <MX_TIM2_Init+0x94>)
 8023e76:	2200      	movs	r2, #0
 8023e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8023e7a:	4814      	ldr	r0, [pc, #80]	; (8023ecc <MX_TIM2_Init+0x94>)
 8023e7c:	f006 f806 	bl	8029e8c <HAL_TIM_Base_Init>
 8023e80:	4603      	mov	r3, r0
 8023e82:	2b00      	cmp	r3, #0
 8023e84:	d001      	beq.n	8023e8a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8023e86:	f000 fb89 	bl	802459c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8023e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023e8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8023e90:	f107 0308 	add.w	r3, r7, #8
 8023e94:	4619      	mov	r1, r3
 8023e96:	480d      	ldr	r0, [pc, #52]	; (8023ecc <MX_TIM2_Init+0x94>)
 8023e98:	f006 fb48 	bl	802a52c <HAL_TIM_ConfigClockSource>
 8023e9c:	4603      	mov	r3, r0
 8023e9e:	2b00      	cmp	r3, #0
 8023ea0:	d001      	beq.n	8023ea6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8023ea2:	f000 fb7b 	bl	802459c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023ea6:	2300      	movs	r3, #0
 8023ea8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023eaa:	2300      	movs	r3, #0
 8023eac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8023eae:	463b      	mov	r3, r7
 8023eb0:	4619      	mov	r1, r3
 8023eb2:	4806      	ldr	r0, [pc, #24]	; (8023ecc <MX_TIM2_Init+0x94>)
 8023eb4:	f006 ff2a 	bl	802ad0c <HAL_TIMEx_MasterConfigSynchronization>
 8023eb8:	4603      	mov	r3, r0
 8023eba:	2b00      	cmp	r3, #0
 8023ebc:	d001      	beq.n	8023ec2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8023ebe:	f000 fb6d 	bl	802459c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8023ec2:	bf00      	nop
 8023ec4:	3718      	adds	r7, #24
 8023ec6:	46bd      	mov	sp, r7
 8023ec8:	bd80      	pop	{r7, pc}
 8023eca:	bf00      	nop
 8023ecc:	20011434 	.word	0x20011434
 8023ed0:	00019a27 	.word	0x00019a27

08023ed4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8023ed4:	b580      	push	{r7, lr}
 8023ed6:	b08a      	sub	sp, #40	; 0x28
 8023ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023eda:	f107 0320 	add.w	r3, r7, #32
 8023ede:	2200      	movs	r2, #0
 8023ee0:	601a      	str	r2, [r3, #0]
 8023ee2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023ee4:	1d3b      	adds	r3, r7, #4
 8023ee6:	2200      	movs	r2, #0
 8023ee8:	601a      	str	r2, [r3, #0]
 8023eea:	605a      	str	r2, [r3, #4]
 8023eec:	609a      	str	r2, [r3, #8]
 8023eee:	60da      	str	r2, [r3, #12]
 8023ef0:	611a      	str	r2, [r3, #16]
 8023ef2:	615a      	str	r2, [r3, #20]
 8023ef4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8023ef6:	4b32      	ldr	r3, [pc, #200]	; (8023fc0 <MX_TIM3_Init+0xec>)
 8023ef8:	4a32      	ldr	r2, [pc, #200]	; (8023fc4 <MX_TIM3_Init+0xf0>)
 8023efa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8023efc:	4b30      	ldr	r3, [pc, #192]	; (8023fc0 <MX_TIM3_Init+0xec>)
 8023efe:	2200      	movs	r2, #0
 8023f00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023f02:	4b2f      	ldr	r3, [pc, #188]	; (8023fc0 <MX_TIM3_Init+0xec>)
 8023f04:	2200      	movs	r2, #0
 8023f06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8023f08:	4b2d      	ldr	r3, [pc, #180]	; (8023fc0 <MX_TIM3_Init+0xec>)
 8023f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023f0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023f10:	4b2b      	ldr	r3, [pc, #172]	; (8023fc0 <MX_TIM3_Init+0xec>)
 8023f12:	2200      	movs	r2, #0
 8023f14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023f16:	4b2a      	ldr	r3, [pc, #168]	; (8023fc0 <MX_TIM3_Init+0xec>)
 8023f18:	2200      	movs	r2, #0
 8023f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8023f1c:	4828      	ldr	r0, [pc, #160]	; (8023fc0 <MX_TIM3_Init+0xec>)
 8023f1e:	f006 f804 	bl	8029f2a <HAL_TIM_PWM_Init>
 8023f22:	4603      	mov	r3, r0
 8023f24:	2b00      	cmp	r3, #0
 8023f26:	d001      	beq.n	8023f2c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8023f28:	f000 fb38 	bl	802459c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023f2c:	2300      	movs	r3, #0
 8023f2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023f30:	2300      	movs	r3, #0
 8023f32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8023f34:	f107 0320 	add.w	r3, r7, #32
 8023f38:	4619      	mov	r1, r3
 8023f3a:	4821      	ldr	r0, [pc, #132]	; (8023fc0 <MX_TIM3_Init+0xec>)
 8023f3c:	f006 fee6 	bl	802ad0c <HAL_TIMEx_MasterConfigSynchronization>
 8023f40:	4603      	mov	r3, r0
 8023f42:	2b00      	cmp	r3, #0
 8023f44:	d001      	beq.n	8023f4a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8023f46:	f000 fb29 	bl	802459c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023f4a:	2360      	movs	r3, #96	; 0x60
 8023f4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023f4e:	2300      	movs	r3, #0
 8023f50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023f52:	2300      	movs	r3, #0
 8023f54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023f56:	2300      	movs	r3, #0
 8023f58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023f5a:	1d3b      	adds	r3, r7, #4
 8023f5c:	2200      	movs	r2, #0
 8023f5e:	4619      	mov	r1, r3
 8023f60:	4817      	ldr	r0, [pc, #92]	; (8023fc0 <MX_TIM3_Init+0xec>)
 8023f62:	f006 fa1d 	bl	802a3a0 <HAL_TIM_PWM_ConfigChannel>
 8023f66:	4603      	mov	r3, r0
 8023f68:	2b00      	cmp	r3, #0
 8023f6a:	d001      	beq.n	8023f70 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8023f6c:	f000 fb16 	bl	802459c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023f70:	1d3b      	adds	r3, r7, #4
 8023f72:	2204      	movs	r2, #4
 8023f74:	4619      	mov	r1, r3
 8023f76:	4812      	ldr	r0, [pc, #72]	; (8023fc0 <MX_TIM3_Init+0xec>)
 8023f78:	f006 fa12 	bl	802a3a0 <HAL_TIM_PWM_ConfigChannel>
 8023f7c:	4603      	mov	r3, r0
 8023f7e:	2b00      	cmp	r3, #0
 8023f80:	d001      	beq.n	8023f86 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8023f82:	f000 fb0b 	bl	802459c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8023f86:	1d3b      	adds	r3, r7, #4
 8023f88:	2208      	movs	r2, #8
 8023f8a:	4619      	mov	r1, r3
 8023f8c:	480c      	ldr	r0, [pc, #48]	; (8023fc0 <MX_TIM3_Init+0xec>)
 8023f8e:	f006 fa07 	bl	802a3a0 <HAL_TIM_PWM_ConfigChannel>
 8023f92:	4603      	mov	r3, r0
 8023f94:	2b00      	cmp	r3, #0
 8023f96:	d001      	beq.n	8023f9c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8023f98:	f000 fb00 	bl	802459c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8023f9c:	1d3b      	adds	r3, r7, #4
 8023f9e:	220c      	movs	r2, #12
 8023fa0:	4619      	mov	r1, r3
 8023fa2:	4807      	ldr	r0, [pc, #28]	; (8023fc0 <MX_TIM3_Init+0xec>)
 8023fa4:	f006 f9fc 	bl	802a3a0 <HAL_TIM_PWM_ConfigChannel>
 8023fa8:	4603      	mov	r3, r0
 8023faa:	2b00      	cmp	r3, #0
 8023fac:	d001      	beq.n	8023fb2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8023fae:	f000 faf5 	bl	802459c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8023fb2:	4803      	ldr	r0, [pc, #12]	; (8023fc0 <MX_TIM3_Init+0xec>)
 8023fb4:	f002 faa4 	bl	8026500 <HAL_TIM_MspPostInit>

}
 8023fb8:	bf00      	nop
 8023fba:	3728      	adds	r7, #40	; 0x28
 8023fbc:	46bd      	mov	sp, r7
 8023fbe:	bd80      	pop	{r7, pc}
 8023fc0:	20011234 	.word	0x20011234
 8023fc4:	40000400 	.word	0x40000400

08023fc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8023fc8:	b580      	push	{r7, lr}
 8023fca:	b08c      	sub	sp, #48	; 0x30
 8023fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8023fce:	f107 030c 	add.w	r3, r7, #12
 8023fd2:	2224      	movs	r2, #36	; 0x24
 8023fd4:	2100      	movs	r1, #0
 8023fd6:	4618      	mov	r0, r3
 8023fd8:	f006 ffbf 	bl	802af5a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023fdc:	1d3b      	adds	r3, r7, #4
 8023fde:	2200      	movs	r2, #0
 8023fe0:	601a      	str	r2, [r3, #0]
 8023fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8023fe4:	4b20      	ldr	r3, [pc, #128]	; (8024068 <MX_TIM4_Init+0xa0>)
 8023fe6:	4a21      	ldr	r2, [pc, #132]	; (802406c <MX_TIM4_Init+0xa4>)
 8023fe8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8023fea:	4b1f      	ldr	r3, [pc, #124]	; (8024068 <MX_TIM4_Init+0xa0>)
 8023fec:	2200      	movs	r2, #0
 8023fee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023ff0:	4b1d      	ldr	r3, [pc, #116]	; (8024068 <MX_TIM4_Init+0xa0>)
 8023ff2:	2200      	movs	r2, #0
 8023ff4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8023ff6:	4b1c      	ldr	r3, [pc, #112]	; (8024068 <MX_TIM4_Init+0xa0>)
 8023ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023ffc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023ffe:	4b1a      	ldr	r3, [pc, #104]	; (8024068 <MX_TIM4_Init+0xa0>)
 8024000:	2200      	movs	r2, #0
 8024002:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8024004:	4b18      	ldr	r3, [pc, #96]	; (8024068 <MX_TIM4_Init+0xa0>)
 8024006:	2200      	movs	r2, #0
 8024008:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 802400a:	2303      	movs	r3, #3
 802400c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 802400e:	2300      	movs	r3, #0
 8024010:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8024012:	2301      	movs	r3, #1
 8024014:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8024016:	2300      	movs	r3, #0
 8024018:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 802401a:	2300      	movs	r3, #0
 802401c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 802401e:	2300      	movs	r3, #0
 8024020:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8024022:	2301      	movs	r3, #1
 8024024:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8024026:	2300      	movs	r3, #0
 8024028:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 802402a:	2300      	movs	r3, #0
 802402c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 802402e:	f107 030c 	add.w	r3, r7, #12
 8024032:	4619      	mov	r1, r3
 8024034:	480c      	ldr	r0, [pc, #48]	; (8024068 <MX_TIM4_Init+0xa0>)
 8024036:	f005 ffe1 	bl	8029ffc <HAL_TIM_Encoder_Init>
 802403a:	4603      	mov	r3, r0
 802403c:	2b00      	cmp	r3, #0
 802403e:	d001      	beq.n	8024044 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8024040:	f000 faac 	bl	802459c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8024044:	2300      	movs	r3, #0
 8024046:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8024048:	2300      	movs	r3, #0
 802404a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 802404c:	1d3b      	adds	r3, r7, #4
 802404e:	4619      	mov	r1, r3
 8024050:	4805      	ldr	r0, [pc, #20]	; (8024068 <MX_TIM4_Init+0xa0>)
 8024052:	f006 fe5b 	bl	802ad0c <HAL_TIMEx_MasterConfigSynchronization>
 8024056:	4603      	mov	r3, r0
 8024058:	2b00      	cmp	r3, #0
 802405a:	d001      	beq.n	8024060 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 802405c:	f000 fa9e 	bl	802459c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8024060:	bf00      	nop
 8024062:	3730      	adds	r7, #48	; 0x30
 8024064:	46bd      	mov	sp, r7
 8024066:	bd80      	pop	{r7, pc}
 8024068:	20011160 	.word	0x20011160
 802406c:	40000800 	.word	0x40000800

08024070 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8024070:	b580      	push	{r7, lr}
 8024072:	b086      	sub	sp, #24
 8024074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8024076:	f107 0308 	add.w	r3, r7, #8
 802407a:	2200      	movs	r2, #0
 802407c:	601a      	str	r2, [r3, #0]
 802407e:	605a      	str	r2, [r3, #4]
 8024080:	609a      	str	r2, [r3, #8]
 8024082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8024084:	463b      	mov	r3, r7
 8024086:	2200      	movs	r2, #0
 8024088:	601a      	str	r2, [r3, #0]
 802408a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 802408c:	4b1d      	ldr	r3, [pc, #116]	; (8024104 <MX_TIM5_Init+0x94>)
 802408e:	4a1e      	ldr	r2, [pc, #120]	; (8024108 <MX_TIM5_Init+0x98>)
 8024090:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 8024092:	4b1c      	ldr	r3, [pc, #112]	; (8024104 <MX_TIM5_Init+0x94>)
 8024094:	2204      	movs	r2, #4
 8024096:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8024098:	4b1a      	ldr	r3, [pc, #104]	; (8024104 <MX_TIM5_Init+0x94>)
 802409a:	2200      	movs	r2, #0
 802409c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 802409e:	4b19      	ldr	r3, [pc, #100]	; (8024104 <MX_TIM5_Init+0x94>)
 80240a0:	f245 2207 	movw	r2, #20999	; 0x5207
 80240a4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80240a6:	4b17      	ldr	r3, [pc, #92]	; (8024104 <MX_TIM5_Init+0x94>)
 80240a8:	2200      	movs	r2, #0
 80240aa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80240ac:	4b15      	ldr	r3, [pc, #84]	; (8024104 <MX_TIM5_Init+0x94>)
 80240ae:	2200      	movs	r2, #0
 80240b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80240b2:	4814      	ldr	r0, [pc, #80]	; (8024104 <MX_TIM5_Init+0x94>)
 80240b4:	f005 feea 	bl	8029e8c <HAL_TIM_Base_Init>
 80240b8:	4603      	mov	r3, r0
 80240ba:	2b00      	cmp	r3, #0
 80240bc:	d001      	beq.n	80240c2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80240be:	f000 fa6d 	bl	802459c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80240c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80240c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80240c8:	f107 0308 	add.w	r3, r7, #8
 80240cc:	4619      	mov	r1, r3
 80240ce:	480d      	ldr	r0, [pc, #52]	; (8024104 <MX_TIM5_Init+0x94>)
 80240d0:	f006 fa2c 	bl	802a52c <HAL_TIM_ConfigClockSource>
 80240d4:	4603      	mov	r3, r0
 80240d6:	2b00      	cmp	r3, #0
 80240d8:	d001      	beq.n	80240de <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80240da:	f000 fa5f 	bl	802459c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80240de:	2300      	movs	r3, #0
 80240e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80240e2:	2300      	movs	r3, #0
 80240e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80240e6:	463b      	mov	r3, r7
 80240e8:	4619      	mov	r1, r3
 80240ea:	4806      	ldr	r0, [pc, #24]	; (8024104 <MX_TIM5_Init+0x94>)
 80240ec:	f006 fe0e 	bl	802ad0c <HAL_TIMEx_MasterConfigSynchronization>
 80240f0:	4603      	mov	r3, r0
 80240f2:	2b00      	cmp	r3, #0
 80240f4:	d001      	beq.n	80240fa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80240f6:	f000 fa51 	bl	802459c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80240fa:	bf00      	nop
 80240fc:	3718      	adds	r7, #24
 80240fe:	46bd      	mov	sp, r7
 8024100:	bd80      	pop	{r7, pc}
 8024102:	bf00      	nop
 8024104:	200111f4 	.word	0x200111f4
 8024108:	40000c00 	.word	0x40000c00

0802410c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 802410c:	b580      	push	{r7, lr}
 802410e:	b082      	sub	sp, #8
 8024110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8024112:	463b      	mov	r3, r7
 8024114:	2200      	movs	r2, #0
 8024116:	601a      	str	r2, [r3, #0]
 8024118:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 802411a:	4b15      	ldr	r3, [pc, #84]	; (8024170 <MX_TIM6_Init+0x64>)
 802411c:	4a15      	ldr	r2, [pc, #84]	; (8024174 <MX_TIM6_Init+0x68>)
 802411e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8024120:	4b13      	ldr	r3, [pc, #76]	; (8024170 <MX_TIM6_Init+0x64>)
 8024122:	2204      	movs	r2, #4
 8024124:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8024126:	4b12      	ldr	r3, [pc, #72]	; (8024170 <MX_TIM6_Init+0x64>)
 8024128:	2200      	movs	r2, #0
 802412a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 802412c:	4b10      	ldr	r3, [pc, #64]	; (8024170 <MX_TIM6_Init+0x64>)
 802412e:	f642 1203 	movw	r2, #10499	; 0x2903
 8024132:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8024134:	4b0e      	ldr	r3, [pc, #56]	; (8024170 <MX_TIM6_Init+0x64>)
 8024136:	2200      	movs	r2, #0
 8024138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 802413a:	480d      	ldr	r0, [pc, #52]	; (8024170 <MX_TIM6_Init+0x64>)
 802413c:	f005 fea6 	bl	8029e8c <HAL_TIM_Base_Init>
 8024140:	4603      	mov	r3, r0
 8024142:	2b00      	cmp	r3, #0
 8024144:	d001      	beq.n	802414a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8024146:	f000 fa29 	bl	802459c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802414a:	2300      	movs	r3, #0
 802414c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802414e:	2300      	movs	r3, #0
 8024150:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8024152:	463b      	mov	r3, r7
 8024154:	4619      	mov	r1, r3
 8024156:	4806      	ldr	r0, [pc, #24]	; (8024170 <MX_TIM6_Init+0x64>)
 8024158:	f006 fdd8 	bl	802ad0c <HAL_TIMEx_MasterConfigSynchronization>
 802415c:	4603      	mov	r3, r0
 802415e:	2b00      	cmp	r3, #0
 8024160:	d001      	beq.n	8024166 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8024162:	f000 fa1b 	bl	802459c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8024166:	bf00      	nop
 8024168:	3708      	adds	r7, #8
 802416a:	46bd      	mov	sp, r7
 802416c:	bd80      	pop	{r7, pc}
 802416e:	bf00      	nop
 8024170:	200113b4 	.word	0x200113b4
 8024174:	40001000 	.word	0x40001000

08024178 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8024178:	b580      	push	{r7, lr}
 802417a:	b082      	sub	sp, #8
 802417c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802417e:	463b      	mov	r3, r7
 8024180:	2200      	movs	r2, #0
 8024182:	601a      	str	r2, [r3, #0]
 8024184:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8024186:	4b15      	ldr	r3, [pc, #84]	; (80241dc <MX_TIM7_Init+0x64>)
 8024188:	4a15      	ldr	r2, [pc, #84]	; (80241e0 <MX_TIM7_Init+0x68>)
 802418a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 802418c:	4b13      	ldr	r3, [pc, #76]	; (80241dc <MX_TIM7_Init+0x64>)
 802418e:	2204      	movs	r2, #4
 8024190:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8024192:	4b12      	ldr	r3, [pc, #72]	; (80241dc <MX_TIM7_Init+0x64>)
 8024194:	2200      	movs	r2, #0
 8024196:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 8024198:	4b10      	ldr	r3, [pc, #64]	; (80241dc <MX_TIM7_Init+0x64>)
 802419a:	f240 4219 	movw	r2, #1049	; 0x419
 802419e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80241a0:	4b0e      	ldr	r3, [pc, #56]	; (80241dc <MX_TIM7_Init+0x64>)
 80241a2:	2200      	movs	r2, #0
 80241a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80241a6:	480d      	ldr	r0, [pc, #52]	; (80241dc <MX_TIM7_Init+0x64>)
 80241a8:	f005 fe70 	bl	8029e8c <HAL_TIM_Base_Init>
 80241ac:	4603      	mov	r3, r0
 80241ae:	2b00      	cmp	r3, #0
 80241b0:	d001      	beq.n	80241b6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80241b2:	f000 f9f3 	bl	802459c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80241b6:	2300      	movs	r3, #0
 80241b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80241ba:	2300      	movs	r3, #0
 80241bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80241be:	463b      	mov	r3, r7
 80241c0:	4619      	mov	r1, r3
 80241c2:	4806      	ldr	r0, [pc, #24]	; (80241dc <MX_TIM7_Init+0x64>)
 80241c4:	f006 fda2 	bl	802ad0c <HAL_TIMEx_MasterConfigSynchronization>
 80241c8:	4603      	mov	r3, r0
 80241ca:	2b00      	cmp	r3, #0
 80241cc:	d001      	beq.n	80241d2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80241ce:	f000 f9e5 	bl	802459c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80241d2:	bf00      	nop
 80241d4:	3708      	adds	r7, #8
 80241d6:	46bd      	mov	sp, r7
 80241d8:	bd80      	pop	{r7, pc}
 80241da:	bf00      	nop
 80241dc:	200114b4 	.word	0x200114b4
 80241e0:	40001400 	.word	0x40001400

080241e4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80241e4:	b580      	push	{r7, lr}
 80241e6:	b08c      	sub	sp, #48	; 0x30
 80241e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80241ea:	f107 030c 	add.w	r3, r7, #12
 80241ee:	2224      	movs	r2, #36	; 0x24
 80241f0:	2100      	movs	r1, #0
 80241f2:	4618      	mov	r0, r3
 80241f4:	f006 feb1 	bl	802af5a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80241f8:	1d3b      	adds	r3, r7, #4
 80241fa:	2200      	movs	r2, #0
 80241fc:	601a      	str	r2, [r3, #0]
 80241fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8024200:	4b22      	ldr	r3, [pc, #136]	; (802428c <MX_TIM8_Init+0xa8>)
 8024202:	4a23      	ldr	r2, [pc, #140]	; (8024290 <MX_TIM8_Init+0xac>)
 8024204:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8024206:	4b21      	ldr	r3, [pc, #132]	; (802428c <MX_TIM8_Init+0xa8>)
 8024208:	2200      	movs	r2, #0
 802420a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 802420c:	4b1f      	ldr	r3, [pc, #124]	; (802428c <MX_TIM8_Init+0xa8>)
 802420e:	2200      	movs	r2, #0
 8024210:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8024212:	4b1e      	ldr	r3, [pc, #120]	; (802428c <MX_TIM8_Init+0xa8>)
 8024214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024218:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802421a:	4b1c      	ldr	r3, [pc, #112]	; (802428c <MX_TIM8_Init+0xa8>)
 802421c:	2200      	movs	r2, #0
 802421e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8024220:	4b1a      	ldr	r3, [pc, #104]	; (802428c <MX_TIM8_Init+0xa8>)
 8024222:	2200      	movs	r2, #0
 8024224:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8024226:	4b19      	ldr	r3, [pc, #100]	; (802428c <MX_TIM8_Init+0xa8>)
 8024228:	2200      	movs	r2, #0
 802422a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 802422c:	2303      	movs	r3, #3
 802422e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8024230:	2300      	movs	r3, #0
 8024232:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8024234:	2301      	movs	r3, #1
 8024236:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8024238:	2300      	movs	r3, #0
 802423a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 802423c:	2300      	movs	r3, #0
 802423e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8024240:	2300      	movs	r3, #0
 8024242:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8024244:	2301      	movs	r3, #1
 8024246:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8024248:	2300      	movs	r3, #0
 802424a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 802424c:	2300      	movs	r3, #0
 802424e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8024250:	f107 030c 	add.w	r3, r7, #12
 8024254:	4619      	mov	r1, r3
 8024256:	480d      	ldr	r0, [pc, #52]	; (802428c <MX_TIM8_Init+0xa8>)
 8024258:	f005 fed0 	bl	8029ffc <HAL_TIM_Encoder_Init>
 802425c:	4603      	mov	r3, r0
 802425e:	2b00      	cmp	r3, #0
 8024260:	d001      	beq.n	8024266 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8024262:	f000 f99b 	bl	802459c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8024266:	2300      	movs	r3, #0
 8024268:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802426a:	2300      	movs	r3, #0
 802426c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 802426e:	1d3b      	adds	r3, r7, #4
 8024270:	4619      	mov	r1, r3
 8024272:	4806      	ldr	r0, [pc, #24]	; (802428c <MX_TIM8_Init+0xa8>)
 8024274:	f006 fd4a 	bl	802ad0c <HAL_TIMEx_MasterConfigSynchronization>
 8024278:	4603      	mov	r3, r0
 802427a:	2b00      	cmp	r3, #0
 802427c:	d001      	beq.n	8024282 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 802427e:	f000 f98d 	bl	802459c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8024282:	bf00      	nop
 8024284:	3730      	adds	r7, #48	; 0x30
 8024286:	46bd      	mov	sp, r7
 8024288:	bd80      	pop	{r7, pc}
 802428a:	bf00      	nop
 802428c:	20011120 	.word	0x20011120
 8024290:	40010400 	.word	0x40010400

08024294 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8024294:	b580      	push	{r7, lr}
 8024296:	b088      	sub	sp, #32
 8024298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 802429a:	1d3b      	adds	r3, r7, #4
 802429c:	2200      	movs	r2, #0
 802429e:	601a      	str	r2, [r3, #0]
 80242a0:	605a      	str	r2, [r3, #4]
 80242a2:	609a      	str	r2, [r3, #8]
 80242a4:	60da      	str	r2, [r3, #12]
 80242a6:	611a      	str	r2, [r3, #16]
 80242a8:	615a      	str	r2, [r3, #20]
 80242aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80242ac:	4b1e      	ldr	r3, [pc, #120]	; (8024328 <MX_TIM11_Init+0x94>)
 80242ae:	4a1f      	ldr	r2, [pc, #124]	; (802432c <MX_TIM11_Init+0x98>)
 80242b0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80242b2:	4b1d      	ldr	r3, [pc, #116]	; (8024328 <MX_TIM11_Init+0x94>)
 80242b4:	2200      	movs	r2, #0
 80242b6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80242b8:	4b1b      	ldr	r3, [pc, #108]	; (8024328 <MX_TIM11_Init+0x94>)
 80242ba:	2200      	movs	r2, #0
 80242bc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 80242be:	4b1a      	ldr	r3, [pc, #104]	; (8024328 <MX_TIM11_Init+0x94>)
 80242c0:	f240 628f 	movw	r2, #1679	; 0x68f
 80242c4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80242c6:	4b18      	ldr	r3, [pc, #96]	; (8024328 <MX_TIM11_Init+0x94>)
 80242c8:	2200      	movs	r2, #0
 80242ca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80242cc:	4b16      	ldr	r3, [pc, #88]	; (8024328 <MX_TIM11_Init+0x94>)
 80242ce:	2200      	movs	r2, #0
 80242d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80242d2:	4815      	ldr	r0, [pc, #84]	; (8024328 <MX_TIM11_Init+0x94>)
 80242d4:	f005 fdda 	bl	8029e8c <HAL_TIM_Base_Init>
 80242d8:	4603      	mov	r3, r0
 80242da:	2b00      	cmp	r3, #0
 80242dc:	d001      	beq.n	80242e2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80242de:	f000 f95d 	bl	802459c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80242e2:	4811      	ldr	r0, [pc, #68]	; (8024328 <MX_TIM11_Init+0x94>)
 80242e4:	f005 fe21 	bl	8029f2a <HAL_TIM_PWM_Init>
 80242e8:	4603      	mov	r3, r0
 80242ea:	2b00      	cmp	r3, #0
 80242ec:	d001      	beq.n	80242f2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80242ee:	f000 f955 	bl	802459c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80242f2:	2360      	movs	r3, #96	; 0x60
 80242f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80242f6:	2300      	movs	r3, #0
 80242f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80242fa:	2300      	movs	r3, #0
 80242fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80242fe:	2300      	movs	r3, #0
 8024300:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8024302:	1d3b      	adds	r3, r7, #4
 8024304:	2200      	movs	r2, #0
 8024306:	4619      	mov	r1, r3
 8024308:	4807      	ldr	r0, [pc, #28]	; (8024328 <MX_TIM11_Init+0x94>)
 802430a:	f006 f849 	bl	802a3a0 <HAL_TIM_PWM_ConfigChannel>
 802430e:	4603      	mov	r3, r0
 8024310:	2b00      	cmp	r3, #0
 8024312:	d001      	beq.n	8024318 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8024314:	f000 f942 	bl	802459c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8024318:	4803      	ldr	r0, [pc, #12]	; (8024328 <MX_TIM11_Init+0x94>)
 802431a:	f002 f8f1 	bl	8026500 <HAL_TIM_MspPostInit>

}
 802431e:	bf00      	nop
 8024320:	3720      	adds	r7, #32
 8024322:	46bd      	mov	sp, r7
 8024324:	bd80      	pop	{r7, pc}
 8024326:	bf00      	nop
 8024328:	20011314 	.word	0x20011314
 802432c:	40014800 	.word	0x40014800

08024330 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8024330:	b580      	push	{r7, lr}
 8024332:	b088      	sub	sp, #32
 8024334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8024336:	1d3b      	adds	r3, r7, #4
 8024338:	2200      	movs	r2, #0
 802433a:	601a      	str	r2, [r3, #0]
 802433c:	605a      	str	r2, [r3, #4]
 802433e:	609a      	str	r2, [r3, #8]
 8024340:	60da      	str	r2, [r3, #12]
 8024342:	611a      	str	r2, [r3, #16]
 8024344:	615a      	str	r2, [r3, #20]
 8024346:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8024348:	4b1a      	ldr	r3, [pc, #104]	; (80243b4 <MX_TIM12_Init+0x84>)
 802434a:	4a1b      	ldr	r2, [pc, #108]	; (80243b8 <MX_TIM12_Init+0x88>)
 802434c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 802434e:	4b19      	ldr	r3, [pc, #100]	; (80243b4 <MX_TIM12_Init+0x84>)
 8024350:	f44f 725c 	mov.w	r2, #880	; 0x370
 8024354:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8024356:	4b17      	ldr	r3, [pc, #92]	; (80243b4 <MX_TIM12_Init+0x84>)
 8024358:	2200      	movs	r2, #0
 802435a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 802435c:	4b15      	ldr	r3, [pc, #84]	; (80243b4 <MX_TIM12_Init+0x84>)
 802435e:	2235      	movs	r2, #53	; 0x35
 8024360:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8024362:	4b14      	ldr	r3, [pc, #80]	; (80243b4 <MX_TIM12_Init+0x84>)
 8024364:	2200      	movs	r2, #0
 8024366:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8024368:	4b12      	ldr	r3, [pc, #72]	; (80243b4 <MX_TIM12_Init+0x84>)
 802436a:	2200      	movs	r2, #0
 802436c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 802436e:	4811      	ldr	r0, [pc, #68]	; (80243b4 <MX_TIM12_Init+0x84>)
 8024370:	f005 fddb 	bl	8029f2a <HAL_TIM_PWM_Init>
 8024374:	4603      	mov	r3, r0
 8024376:	2b00      	cmp	r3, #0
 8024378:	d001      	beq.n	802437e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 802437a:	f000 f90f 	bl	802459c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802437e:	2360      	movs	r3, #96	; 0x60
 8024380:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8024382:	2300      	movs	r3, #0
 8024384:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8024386:	2300      	movs	r3, #0
 8024388:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802438a:	2300      	movs	r3, #0
 802438c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 802438e:	1d3b      	adds	r3, r7, #4
 8024390:	2204      	movs	r2, #4
 8024392:	4619      	mov	r1, r3
 8024394:	4807      	ldr	r0, [pc, #28]	; (80243b4 <MX_TIM12_Init+0x84>)
 8024396:	f006 f803 	bl	802a3a0 <HAL_TIM_PWM_ConfigChannel>
 802439a:	4603      	mov	r3, r0
 802439c:	2b00      	cmp	r3, #0
 802439e:	d001      	beq.n	80243a4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80243a0:	f000 f8fc 	bl	802459c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80243a4:	4803      	ldr	r0, [pc, #12]	; (80243b4 <MX_TIM12_Init+0x84>)
 80243a6:	f002 f8ab 	bl	8026500 <HAL_TIM_MspPostInit>

}
 80243aa:	bf00      	nop
 80243ac:	3720      	adds	r7, #32
 80243ae:	46bd      	mov	sp, r7
 80243b0:	bd80      	pop	{r7, pc}
 80243b2:	bf00      	nop
 80243b4:	20011474 	.word	0x20011474
 80243b8:	40001800 	.word	0x40001800

080243bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80243bc:	b580      	push	{r7, lr}
 80243be:	b082      	sub	sp, #8
 80243c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80243c2:	2300      	movs	r3, #0
 80243c4:	607b      	str	r3, [r7, #4]
 80243c6:	4b0c      	ldr	r3, [pc, #48]	; (80243f8 <MX_DMA_Init+0x3c>)
 80243c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243ca:	4a0b      	ldr	r2, [pc, #44]	; (80243f8 <MX_DMA_Init+0x3c>)
 80243cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80243d0:	6313      	str	r3, [r2, #48]	; 0x30
 80243d2:	4b09      	ldr	r3, [pc, #36]	; (80243f8 <MX_DMA_Init+0x3c>)
 80243d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80243da:	607b      	str	r3, [r7, #4]
 80243dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80243de:	2200      	movs	r2, #0
 80243e0:	2100      	movs	r1, #0
 80243e2:	2038      	movs	r0, #56	; 0x38
 80243e4:	f003 fa57 	bl	8027896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80243e8:	2038      	movs	r0, #56	; 0x38
 80243ea:	f003 fa70 	bl	80278ce <HAL_NVIC_EnableIRQ>

}
 80243ee:	bf00      	nop
 80243f0:	3708      	adds	r7, #8
 80243f2:	46bd      	mov	sp, r7
 80243f4:	bd80      	pop	{r7, pc}
 80243f6:	bf00      	nop
 80243f8:	40023800 	.word	0x40023800

080243fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80243fc:	b580      	push	{r7, lr}
 80243fe:	b08a      	sub	sp, #40	; 0x28
 8024400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024402:	f107 0314 	add.w	r3, r7, #20
 8024406:	2200      	movs	r2, #0
 8024408:	601a      	str	r2, [r3, #0]
 802440a:	605a      	str	r2, [r3, #4]
 802440c:	609a      	str	r2, [r3, #8]
 802440e:	60da      	str	r2, [r3, #12]
 8024410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8024412:	2300      	movs	r3, #0
 8024414:	613b      	str	r3, [r7, #16]
 8024416:	4b5c      	ldr	r3, [pc, #368]	; (8024588 <MX_GPIO_Init+0x18c>)
 8024418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802441a:	4a5b      	ldr	r2, [pc, #364]	; (8024588 <MX_GPIO_Init+0x18c>)
 802441c:	f043 0304 	orr.w	r3, r3, #4
 8024420:	6313      	str	r3, [r2, #48]	; 0x30
 8024422:	4b59      	ldr	r3, [pc, #356]	; (8024588 <MX_GPIO_Init+0x18c>)
 8024424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024426:	f003 0304 	and.w	r3, r3, #4
 802442a:	613b      	str	r3, [r7, #16]
 802442c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802442e:	2300      	movs	r3, #0
 8024430:	60fb      	str	r3, [r7, #12]
 8024432:	4b55      	ldr	r3, [pc, #340]	; (8024588 <MX_GPIO_Init+0x18c>)
 8024434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024436:	4a54      	ldr	r2, [pc, #336]	; (8024588 <MX_GPIO_Init+0x18c>)
 8024438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802443c:	6313      	str	r3, [r2, #48]	; 0x30
 802443e:	4b52      	ldr	r3, [pc, #328]	; (8024588 <MX_GPIO_Init+0x18c>)
 8024440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024446:	60fb      	str	r3, [r7, #12]
 8024448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802444a:	2300      	movs	r3, #0
 802444c:	60bb      	str	r3, [r7, #8]
 802444e:	4b4e      	ldr	r3, [pc, #312]	; (8024588 <MX_GPIO_Init+0x18c>)
 8024450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024452:	4a4d      	ldr	r2, [pc, #308]	; (8024588 <MX_GPIO_Init+0x18c>)
 8024454:	f043 0301 	orr.w	r3, r3, #1
 8024458:	6313      	str	r3, [r2, #48]	; 0x30
 802445a:	4b4b      	ldr	r3, [pc, #300]	; (8024588 <MX_GPIO_Init+0x18c>)
 802445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802445e:	f003 0301 	and.w	r3, r3, #1
 8024462:	60bb      	str	r3, [r7, #8]
 8024464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8024466:	2300      	movs	r3, #0
 8024468:	607b      	str	r3, [r7, #4]
 802446a:	4b47      	ldr	r3, [pc, #284]	; (8024588 <MX_GPIO_Init+0x18c>)
 802446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802446e:	4a46      	ldr	r2, [pc, #280]	; (8024588 <MX_GPIO_Init+0x18c>)
 8024470:	f043 0302 	orr.w	r3, r3, #2
 8024474:	6313      	str	r3, [r2, #48]	; 0x30
 8024476:	4b44      	ldr	r3, [pc, #272]	; (8024588 <MX_GPIO_Init+0x18c>)
 8024478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802447a:	f003 0302 	and.w	r3, r3, #2
 802447e:	607b      	str	r3, [r7, #4]
 8024480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8024482:	2300      	movs	r3, #0
 8024484:	603b      	str	r3, [r7, #0]
 8024486:	4b40      	ldr	r3, [pc, #256]	; (8024588 <MX_GPIO_Init+0x18c>)
 8024488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802448a:	4a3f      	ldr	r2, [pc, #252]	; (8024588 <MX_GPIO_Init+0x18c>)
 802448c:	f043 0308 	orr.w	r3, r3, #8
 8024490:	6313      	str	r3, [r2, #48]	; 0x30
 8024492:	4b3d      	ldr	r3, [pc, #244]	; (8024588 <MX_GPIO_Init+0x18c>)
 8024494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024496:	f003 0308 	and.w	r3, r3, #8
 802449a:	603b      	str	r3, [r7, #0]
 802449c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 802449e:	2200      	movs	r2, #0
 80244a0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80244a4:	4839      	ldr	r0, [pc, #228]	; (802458c <MX_GPIO_Init+0x190>)
 80244a6:	f004 fa23 	bl	80288f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80244aa:	2201      	movs	r2, #1
 80244ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80244b0:	4837      	ldr	r0, [pc, #220]	; (8024590 <MX_GPIO_Init+0x194>)
 80244b2:	f004 fa1d 	bl	80288f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 80244b6:	2200      	movs	r2, #0
 80244b8:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 80244bc:	4835      	ldr	r0, [pc, #212]	; (8024594 <MX_GPIO_Init+0x198>)
 80244be:	f004 fa17 	bl	80288f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80244c2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80244c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80244c8:	2301      	movs	r3, #1
 80244ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80244cc:	2300      	movs	r3, #0
 80244ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80244d0:	2300      	movs	r3, #0
 80244d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80244d4:	f107 0314 	add.w	r3, r7, #20
 80244d8:	4619      	mov	r1, r3
 80244da:	482c      	ldr	r0, [pc, #176]	; (802458c <MX_GPIO_Init+0x190>)
 80244dc:	f004 f856 	bl	802858c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80244e0:	2307      	movs	r3, #7
 80244e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80244e4:	2300      	movs	r3, #0
 80244e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80244e8:	2301      	movs	r3, #1
 80244ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80244ec:	f107 0314 	add.w	r3, r7, #20
 80244f0:	4619      	mov	r1, r3
 80244f2:	4827      	ldr	r0, [pc, #156]	; (8024590 <MX_GPIO_Init+0x194>)
 80244f4:	f004 f84a 	bl	802858c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80244f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80244fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80244fe:	2301      	movs	r3, #1
 8024500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024502:	2300      	movs	r3, #0
 8024504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024506:	2300      	movs	r3, #0
 8024508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802450a:	f107 0314 	add.w	r3, r7, #20
 802450e:	4619      	mov	r1, r3
 8024510:	481f      	ldr	r0, [pc, #124]	; (8024590 <MX_GPIO_Init+0x194>)
 8024512:	f004 f83b 	bl	802858c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 8024516:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 802451a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802451c:	2300      	movs	r3, #0
 802451e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024520:	2300      	movs	r3, #0
 8024522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024524:	f107 0314 	add.w	r3, r7, #20
 8024528:	4619      	mov	r1, r3
 802452a:	4819      	ldr	r0, [pc, #100]	; (8024590 <MX_GPIO_Init+0x194>)
 802452c:	f004 f82e 	bl	802858c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8024530:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8024534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8024536:	2301      	movs	r3, #1
 8024538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802453a:	2300      	movs	r3, #0
 802453c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802453e:	2300      	movs	r3, #0
 8024540:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8024542:	f107 0314 	add.w	r3, r7, #20
 8024546:	4619      	mov	r1, r3
 8024548:	4812      	ldr	r0, [pc, #72]	; (8024594 <MX_GPIO_Init+0x198>)
 802454a:	f004 f81f 	bl	802858c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 802454e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8024552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8024554:	2300      	movs	r3, #0
 8024556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8024558:	2301      	movs	r3, #1
 802455a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802455c:	f107 0314 	add.w	r3, r7, #20
 8024560:	4619      	mov	r1, r3
 8024562:	480c      	ldr	r0, [pc, #48]	; (8024594 <MX_GPIO_Init+0x198>)
 8024564:	f004 f812 	bl	802858c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8024568:	2304      	movs	r3, #4
 802456a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802456c:	2300      	movs	r3, #0
 802456e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024570:	2300      	movs	r3, #0
 8024572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8024574:	f107 0314 	add.w	r3, r7, #20
 8024578:	4619      	mov	r1, r3
 802457a:	4807      	ldr	r0, [pc, #28]	; (8024598 <MX_GPIO_Init+0x19c>)
 802457c:	f004 f806 	bl	802858c <HAL_GPIO_Init>

}
 8024580:	bf00      	nop
 8024582:	3728      	adds	r7, #40	; 0x28
 8024584:	46bd      	mov	sp, r7
 8024586:	bd80      	pop	{r7, pc}
 8024588:	40023800 	.word	0x40023800
 802458c:	40020800 	.word	0x40020800
 8024590:	40020400 	.word	0x40020400
 8024594:	40020000 	.word	0x40020000
 8024598:	40020c00 	.word	0x40020c00

0802459c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802459c:	b480      	push	{r7}
 802459e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80245a0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80245a2:	e7fe      	b.n	80245a2 <Error_Handler+0x6>

080245a4 <_ZN5Motor4InitEv>:
#include "motor.hpp"
#include "declare_extern.h"

void Motor::Init()
{
 80245a4:	b580      	push	{r7, lr}
 80245a6:	b082      	sub	sp, #8
 80245a8:	af00      	add	r7, sp, #0
 80245aa:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 80245ac:	2104      	movs	r1, #4
 80245ae:	4812      	ldr	r0, [pc, #72]	; (80245f8 <_ZN5Motor4InitEv+0x54>)
 80245b0:	f005 fce6 	bl	8029f80 <HAL_TIM_PWM_Start>
 80245b4:	4603      	mov	r3, r0
 80245b6:	2b00      	cmp	r3, #0
 80245b8:	bf14      	ite	ne
 80245ba:	2301      	movne	r3, #1
 80245bc:	2300      	moveq	r3, #0
 80245be:	b2db      	uxtb	r3, r3
 80245c0:	2b00      	cmp	r3, #0
 80245c2:	d004      	beq.n	80245ce <_ZN5Motor4InitEv+0x2a>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch2 = true; // MOTOR_R
 80245c4:	4b0d      	ldr	r3, [pc, #52]	; (80245fc <_ZN5Motor4InitEv+0x58>)
 80245c6:	2201      	movs	r2, #1
 80245c8:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 80245ca:	f7ff ffe7 	bl	802459c <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 80245ce:	210c      	movs	r1, #12
 80245d0:	4809      	ldr	r0, [pc, #36]	; (80245f8 <_ZN5Motor4InitEv+0x54>)
 80245d2:	f005 fcd5 	bl	8029f80 <HAL_TIM_PWM_Start>
 80245d6:	4603      	mov	r3, r0
 80245d8:	2b00      	cmp	r3, #0
 80245da:	bf14      	ite	ne
 80245dc:	2301      	movne	r3, #1
 80245de:	2300      	moveq	r3, #0
 80245e0:	b2db      	uxtb	r3, r3
 80245e2:	2b00      	cmp	r3, #0
 80245e4:	d004      	beq.n	80245f0 <_ZN5Motor4InitEv+0x4c>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch4 = true; // MOTOR_L
 80245e6:	4b06      	ldr	r3, [pc, #24]	; (8024600 <_ZN5Motor4InitEv+0x5c>)
 80245e8:	2201      	movs	r2, #1
 80245ea:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 80245ec:	f7ff ffd6 	bl	802459c <Error_Handler>
    }
}
 80245f0:	bf00      	nop
 80245f2:	3708      	adds	r7, #8
 80245f4:	46bd      	mov	sp, r7
 80245f6:	bd80      	pop	{r7, pc}
 80245f8:	200113f4 	.word	0x200113f4
 80245fc:	20000141 	.word	0x20000141
 8024600:	20000142 	.word	0x20000142
 8024604:	00000000 	.word	0x00000000

08024608 <_ZN5Motor5DriveEff>:

void Motor::Drive(float translation_ratio, float rotation_ratio)
{
 8024608:	b580      	push	{r7, lr}
 802460a:	b08a      	sub	sp, #40	; 0x28
 802460c:	af00      	add	r7, sp, #0
 802460e:	60f8      	str	r0, [r7, #12]
 8024610:	ed87 0a02 	vstr	s0, [r7, #8]
 8024614:	edc7 0a01 	vstr	s1, [r7, #4]
#ifdef DEBUG_MODE
    g_translation_ratio = translation_ratio;
 8024618:	4a89      	ldr	r2, [pc, #548]	; (8024840 <_ZN5Motor5DriveEff+0x238>)
 802461a:	68bb      	ldr	r3, [r7, #8]
 802461c:	6013      	str	r3, [r2, #0]
    g_rotation_ratio    = rotation_ratio;
 802461e:	4a89      	ldr	r2, [pc, #548]	; (8024844 <_ZN5Motor5DriveEff+0x23c>)
 8024620:	687b      	ldr	r3, [r7, #4]
 8024622:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(translation_ratio > LIMIT_TRANS_DUTY)       translation_ratio =  LIMIT_TRANS_DUTY;
 8024624:	68b8      	ldr	r0, [r7, #8]
 8024626:	f7fb febf 	bl	80203a8 <__aeabi_f2d>
 802462a:	a381      	add	r3, pc, #516	; (adr r3, 8024830 <_ZN5Motor5DriveEff+0x228>)
 802462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024630:	f7fc f9a2 	bl	8020978 <__aeabi_dcmpgt>
 8024634:	4603      	mov	r3, r0
 8024636:	2b00      	cmp	r3, #0
 8024638:	d002      	beq.n	8024640 <_ZN5Motor5DriveEff+0x38>
 802463a:	4b83      	ldr	r3, [pc, #524]	; (8024848 <_ZN5Motor5DriveEff+0x240>)
 802463c:	60bb      	str	r3, [r7, #8]
 802463e:	e00c      	b.n	802465a <_ZN5Motor5DriveEff+0x52>
    else if(translation_ratio < -LIMIT_TRANS_DUTY) translation_ratio = -LIMIT_TRANS_DUTY;
 8024640:	68b8      	ldr	r0, [r7, #8]
 8024642:	f7fb feb1 	bl	80203a8 <__aeabi_f2d>
 8024646:	a37c      	add	r3, pc, #496	; (adr r3, 8024838 <_ZN5Motor5DriveEff+0x230>)
 8024648:	e9d3 2300 	ldrd	r2, r3, [r3]
 802464c:	f7fc f976 	bl	802093c <__aeabi_dcmplt>
 8024650:	4603      	mov	r3, r0
 8024652:	2b00      	cmp	r3, #0
 8024654:	d001      	beq.n	802465a <_ZN5Motor5DriveEff+0x52>
 8024656:	4b7d      	ldr	r3, [pc, #500]	; (802484c <_ZN5Motor5DriveEff+0x244>)
 8024658:	60bb      	str	r3, [r7, #8]

    float sum = translation_ratio + rotation_ratio;
 802465a:	ed97 7a02 	vldr	s14, [r7, #8]
 802465e:	edd7 7a01 	vldr	s15, [r7, #4]
 8024662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024666:	edc7 7a06 	vstr	s15, [r7, #24]
    float excess = 0;
 802466a:	f04f 0300 	mov.w	r3, #0
 802466e:	627b      	str	r3, [r7, #36]	; 0x24

    if(sum > 1.0)       excess = sum - 1.0;
 8024670:	edd7 7a06 	vldr	s15, [r7, #24]
 8024674:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024678:	eef4 7ac7 	vcmpe.f32	s15, s14
 802467c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024680:	dd08      	ble.n	8024694 <_ZN5Motor5DriveEff+0x8c>
 8024682:	edd7 7a06 	vldr	s15, [r7, #24]
 8024686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802468a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802468e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8024692:	e010      	b.n	80246b6 <_ZN5Motor5DriveEff+0xae>
    else if(sum < -1.0) excess = sum + 1.0;
 8024694:	edd7 7a06 	vldr	s15, [r7, #24]
 8024698:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802469c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80246a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246a4:	d507      	bpl.n	80246b6 <_ZN5Motor5DriveEff+0xae>
 80246a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80246aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80246ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80246b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    translation_ratio -= excess;
 80246b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80246ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80246be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80246c2:	edc7 7a02 	vstr	s15, [r7, #8]

#ifdef DEBUG_MODE
    g_sum_raito = sum;
 80246c6:	4a62      	ldr	r2, [pc, #392]	; (8024850 <_ZN5Motor5DriveEff+0x248>)
 80246c8:	69bb      	ldr	r3, [r7, #24]
 80246ca:	6013      	str	r3, [r2, #0]
    g_excess_ratio = excess;
 80246cc:	4a61      	ldr	r2, [pc, #388]	; (8024854 <_ZN5Motor5DriveEff+0x24c>)
 80246ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80246d0:	6013      	str	r3, [r2, #0]
    g_reduced_translation = translation_ratio;
 80246d2:	4a61      	ldr	r2, [pc, #388]	; (8024858 <_ZN5Motor5DriveEff+0x250>)
 80246d4:	68bb      	ldr	r3, [r7, #8]
 80246d6:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float duty_l = translation_ratio - rotation_ratio;
 80246d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80246dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80246e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80246e4:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_r = translation_ratio + rotation_ratio;
 80246e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80246ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80246f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80246f4:	edc7 7a07 	vstr	s15, [r7, #28]

    if(duty_l > 1.0)       duty_l =  1.0;
 80246f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80246fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8024704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024708:	dd03      	ble.n	8024712 <_ZN5Motor5DriveEff+0x10a>
 802470a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 802470e:	623b      	str	r3, [r7, #32]
 8024710:	e00a      	b.n	8024728 <_ZN5Motor5DriveEff+0x120>
    else if(duty_l < -1.0) duty_l = -1.0;
 8024712:	edd7 7a08 	vldr	s15, [r7, #32]
 8024716:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802471a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802471e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024722:	d501      	bpl.n	8024728 <_ZN5Motor5DriveEff+0x120>
 8024724:	4b4d      	ldr	r3, [pc, #308]	; (802485c <_ZN5Motor5DriveEff+0x254>)
 8024726:	623b      	str	r3, [r7, #32]

    if(duty_r > 1.0)       duty_r =  1.0;
 8024728:	edd7 7a07 	vldr	s15, [r7, #28]
 802472c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8024734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024738:	dd03      	ble.n	8024742 <_ZN5Motor5DriveEff+0x13a>
 802473a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 802473e:	61fb      	str	r3, [r7, #28]
 8024740:	e00a      	b.n	8024758 <_ZN5Motor5DriveEff+0x150>
    else if(duty_r < -1.0) duty_r = -1.0;
 8024742:	edd7 7a07 	vldr	s15, [r7, #28]
 8024746:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802474a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024752:	d501      	bpl.n	8024758 <_ZN5Motor5DriveEff+0x150>
 8024754:	4b41      	ldr	r3, [pc, #260]	; (802485c <_ZN5Motor5DriveEff+0x254>)
 8024756:	61fb      	str	r3, [r7, #28]

#ifdef DEBUG_MODE
    g_duty_l = duty_l;
 8024758:	4a41      	ldr	r2, [pc, #260]	; (8024860 <_ZN5Motor5DriveEff+0x258>)
 802475a:	6a3b      	ldr	r3, [r7, #32]
 802475c:	6013      	str	r3, [r2, #0]
    g_duty_r = duty_r;
 802475e:	4a41      	ldr	r2, [pc, #260]	; (8024864 <_ZN5Motor5DriveEff+0x25c>)
 8024760:	69fb      	ldr	r3, [r7, #28]
 8024762:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int16_t count_l = static_cast<int16_t>(COUNTER_PERIOD * duty_l);
 8024764:	edd7 7a08 	vldr	s15, [r7, #32]
 8024768:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8024868 <_ZN5Motor5DriveEff+0x260>
 802476c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024774:	ee17 3a90 	vmov	r3, s15
 8024778:	b21b      	sxth	r3, r3
 802477a:	82fb      	strh	r3, [r7, #22]
    int16_t count_r = static_cast<int16_t>(COUNTER_PERIOD * duty_r);
 802477c:	edd7 7a07 	vldr	s15, [r7, #28]
 8024780:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8024868 <_ZN5Motor5DriveEff+0x260>
 8024784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802478c:	ee17 3a90 	vmov	r3, s15
 8024790:	b21b      	sxth	r3, r3
 8024792:	82bb      	strh	r3, [r7, #20]

    if(count_l < 0) { count_l *= -1; BACKWARD_L; }
 8024794:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8024798:	2b00      	cmp	r3, #0
 802479a:	da0d      	bge.n	80247b8 <_ZN5Motor5DriveEff+0x1b0>
 802479c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80247a0:	b29b      	uxth	r3, r3
 80247a2:	425b      	negs	r3, r3
 80247a4:	b29b      	uxth	r3, r3
 80247a6:	b21b      	sxth	r3, r3
 80247a8:	82fb      	strh	r3, [r7, #22]
 80247aa:	2200      	movs	r2, #0
 80247ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80247b0:	482e      	ldr	r0, [pc, #184]	; (802486c <_ZN5Motor5DriveEff+0x264>)
 80247b2:	f004 f89d 	bl	80288f0 <HAL_GPIO_WritePin>
 80247b6:	e009      	b.n	80247cc <_ZN5Motor5DriveEff+0x1c4>
    else if(count_l >= 0) FORWARD_L;
 80247b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80247bc:	2b00      	cmp	r3, #0
 80247be:	db05      	blt.n	80247cc <_ZN5Motor5DriveEff+0x1c4>
 80247c0:	2201      	movs	r2, #1
 80247c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80247c6:	4829      	ldr	r0, [pc, #164]	; (802486c <_ZN5Motor5DriveEff+0x264>)
 80247c8:	f004 f892 	bl	80288f0 <HAL_GPIO_WritePin>

    if(count_r < 0) { count_r *= -1; BACKWARD_R; }
 80247cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80247d0:	2b00      	cmp	r3, #0
 80247d2:	da0d      	bge.n	80247f0 <_ZN5Motor5DriveEff+0x1e8>
 80247d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80247d8:	b29b      	uxth	r3, r3
 80247da:	425b      	negs	r3, r3
 80247dc:	b29b      	uxth	r3, r3
 80247de:	b21b      	sxth	r3, r3
 80247e0:	82bb      	strh	r3, [r7, #20]
 80247e2:	2201      	movs	r2, #1
 80247e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80247e8:	4820      	ldr	r0, [pc, #128]	; (802486c <_ZN5Motor5DriveEff+0x264>)
 80247ea:	f004 f881 	bl	80288f0 <HAL_GPIO_WritePin>
 80247ee:	e009      	b.n	8024804 <_ZN5Motor5DriveEff+0x1fc>
    else if(count_r >= 0) FORWARD_R;
 80247f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80247f4:	2b00      	cmp	r3, #0
 80247f6:	db05      	blt.n	8024804 <_ZN5Motor5DriveEff+0x1fc>
 80247f8:	2200      	movs	r2, #0
 80247fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80247fe:	481b      	ldr	r0, [pc, #108]	; (802486c <_ZN5Motor5DriveEff+0x264>)
 8024800:	f004 f876 	bl	80288f0 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, count_l);
 8024804:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024808:	4b19      	ldr	r3, [pc, #100]	; (8024870 <_ZN5Motor5DriveEff+0x268>)
 802480a:	681b      	ldr	r3, [r3, #0]
 802480c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, count_r);
 802480e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8024812:	4b17      	ldr	r3, [pc, #92]	; (8024870 <_ZN5Motor5DriveEff+0x268>)
 8024814:	681b      	ldr	r3, [r3, #0]
 8024816:	641a      	str	r2, [r3, #64]	; 0x40

#ifdef DEBUG_MODE
    g_motor_compare_l = count_l;
 8024818:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802481c:	4b15      	ldr	r3, [pc, #84]	; (8024874 <_ZN5Motor5DriveEff+0x26c>)
 802481e:	801a      	strh	r2, [r3, #0]
    g_motor_compare_r = count_r;
 8024820:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8024824:	4b14      	ldr	r3, [pc, #80]	; (8024878 <_ZN5Motor5DriveEff+0x270>)
 8024826:	801a      	strh	r2, [r3, #0]
#endif // DEBUG_MODE
 8024828:	bf00      	nop
 802482a:	3728      	adds	r7, #40	; 0x28
 802482c:	46bd      	mov	sp, r7
 802482e:	bd80      	pop	{r7, pc}
 8024830:	cccccccd 	.word	0xcccccccd
 8024834:	3feccccc 	.word	0x3feccccc
 8024838:	cccccccd 	.word	0xcccccccd
 802483c:	bfeccccc 	.word	0xbfeccccc
 8024840:	200002ec 	.word	0x200002ec
 8024844:	200002f0 	.word	0x200002f0
 8024848:	3f666666 	.word	0x3f666666
 802484c:	bf666666 	.word	0xbf666666
 8024850:	200002f4 	.word	0x200002f4
 8024854:	200002f8 	.word	0x200002f8
 8024858:	200002fc 	.word	0x200002fc
 802485c:	bf800000 	.word	0xbf800000
 8024860:	20000300 	.word	0x20000300
 8024864:	20000304 	.word	0x20000304
 8024868:	44832000 	.word	0x44832000
 802486c:	40020000 	.word	0x40020000
 8024870:	200113f4 	.word	0x200113f4
 8024874:	20000308 	.word	0x20000308
 8024878:	2000030a 	.word	0x2000030a

0802487c <_ZN5PrintC1EP5Flash>:
#include "macro.h"
#include <stdio.h>

extern float g_swo_test;

Print::Print(Flash *flash)
 802487c:	b480      	push	{r7}
 802487e:	b083      	sub	sp, #12
 8024880:	af00      	add	r7, sp, #0
 8024882:	6078      	str	r0, [r7, #4]
 8024884:	6039      	str	r1, [r7, #0]
{
    flash_ = flash;
 8024886:	687b      	ldr	r3, [r7, #4]
 8024888:	f503 3385 	add.w	r3, r3, #68096	; 0x10a00
 802488c:	3368      	adds	r3, #104	; 0x68
 802488e:	683a      	ldr	r2, [r7, #0]
 8024890:	601a      	str	r2, [r3, #0]
}
 8024892:	687b      	ldr	r3, [r7, #4]
 8024894:	4618      	mov	r0, r3
 8024896:	370c      	adds	r7, #12
 8024898:	46bd      	mov	sp, r7
 802489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802489e:	4770      	bx	lr

080248a0 <_ZN5Print3LogEv>:
{
    printf("Hello, world!\r\n");
}

void Print::Log()
{
 80248a0:	b590      	push	{r4, r7, lr}
 80248a2:	b085      	sub	sp, #20
 80248a4:	af00      	add	r7, sp, #0
 80248a6:	6078      	str	r0, [r7, #4]
    int aaa = 33;
 80248a8:	2321      	movs	r3, #33	; 0x21
 80248aa:	60fb      	str	r3, [r7, #12]
    g_swo_test = 55;
 80248ac:	4b11      	ldr	r3, [pc, #68]	; (80248f4 <_ZN5Print3LogEv+0x54>)
 80248ae:	4a12      	ldr	r2, [pc, #72]	; (80248f8 <_ZN5Print3LogEv+0x58>)
 80248b0:	601a      	str	r2, [r3, #0]

    printf("<<< Distance Log 1 >>>\n");
 80248b2:	4812      	ldr	r0, [pc, #72]	; (80248fc <_ZN5Print3LogEv+0x5c>)
 80248b4:	f006 fbce 	bl	802b054 <puts>
    printf("test%dhoge\n", aaa);
 80248b8:	68f9      	ldr	r1, [r7, #12]
 80248ba:	4811      	ldr	r0, [pc, #68]	; (8024900 <_ZN5Print3LogEv+0x60>)
 80248bc:	f006 fb56 	bl	802af6c <iprintf>
    printf("test%fhoge\n", g_swo_test);
 80248c0:	4b0c      	ldr	r3, [pc, #48]	; (80248f4 <_ZN5Print3LogEv+0x54>)
 80248c2:	681b      	ldr	r3, [r3, #0]
 80248c4:	4618      	mov	r0, r3
 80248c6:	f7fb fd6f 	bl	80203a8 <__aeabi_f2d>
 80248ca:	4603      	mov	r3, r0
 80248cc:	460c      	mov	r4, r1
 80248ce:	461a      	mov	r2, r3
 80248d0:	4623      	mov	r3, r4
 80248d2:	480c      	ldr	r0, [pc, #48]	; (8024904 <_ZN5Print3LogEv+0x64>)
 80248d4:	f006 fb4a 	bl	802af6c <iprintf>
    printf("<<< Distance Log 2 >>>\n");
 80248d8:	480b      	ldr	r0, [pc, #44]	; (8024908 <_ZN5Print3LogEv+0x68>)
 80248da:	f006 fbbb 	bl	802b054 <puts>
    //Blank();
    DistanceLog();
 80248de:	6878      	ldr	r0, [r7, #4]
 80248e0:	f000 f816 	bl	8024910 <_ZN5Print11DistanceLogEv>
    //Blank();
    printf("<<< Radian Log >>>\n");
 80248e4:	4809      	ldr	r0, [pc, #36]	; (802490c <_ZN5Print3LogEv+0x6c>)
 80248e6:	f006 fbb5 	bl	802b054 <puts>
    //Blank();
}
 80248ea:	bf00      	nop
 80248ec:	3714      	adds	r7, #20
 80248ee:	46bd      	mov	sp, r7
 80248f0:	bd90      	pop	{r4, r7, pc}
 80248f2:	bf00      	nop
 80248f4:	20000134 	.word	0x20000134
 80248f8:	425c0000 	.word	0x425c0000
 80248fc:	0802be24 	.word	0x0802be24
 8024900:	0802be3c 	.word	0x0802be3c
 8024904:	0802be48 	.word	0x0802be48
 8024908:	0802be54 	.word	0x0802be54
 802490c:	0802be6c 	.word	0x0802be6c

08024910 <_ZN5Print11DistanceLogEv>:
        printf("\r\n");
    }
}

void Print::DistanceLog()
{
 8024910:	b590      	push	{r4, r7, lr}
 8024912:	b087      	sub	sp, #28
 8024914:	af00      	add	r7, sp, #0
 8024916:	6078      	str	r0, [r7, #4]
    uint32_t address = SECTOR_2_ADDRESS_HEAD;
 8024918:	4b14      	ldr	r3, [pc, #80]	; (802496c <_ZN5Print11DistanceLogEv+0x5c>)
 802491a:	617b      	str	r3, [r7, #20]
    float data;

    for(uint16_t index = 0; index < LOG_LENGTH; index++)
 802491c:	2300      	movs	r3, #0
 802491e:	827b      	strh	r3, [r7, #18]
 8024920:	8a7b      	ldrh	r3, [r7, #18]
 8024922:	f641 0237 	movw	r2, #6199	; 0x1837
 8024926:	4293      	cmp	r3, r2
 8024928:	d81c      	bhi.n	8024964 <_ZN5Print11DistanceLogEv+0x54>
    {
        flash_->Load(&data, address, 4); // suspicious
 802492a:	687b      	ldr	r3, [r7, #4]
 802492c:	f503 3385 	add.w	r3, r3, #68096	; 0x10a00
 8024930:	3368      	adds	r3, #104	; 0x68
 8024932:	6818      	ldr	r0, [r3, #0]
 8024934:	f107 010c 	add.w	r1, r7, #12
 8024938:	2304      	movs	r3, #4
 802493a:	697a      	ldr	r2, [r7, #20]
 802493c:	f7fc fc28 	bl	8021190 <_ZN5Flash4LoadEPvmm>

        printf("%f\r\n", data);
 8024940:	68fb      	ldr	r3, [r7, #12]
 8024942:	4618      	mov	r0, r3
 8024944:	f7fb fd30 	bl	80203a8 <__aeabi_f2d>
 8024948:	4603      	mov	r3, r0
 802494a:	460c      	mov	r4, r1
 802494c:	461a      	mov	r2, r3
 802494e:	4623      	mov	r3, r4
 8024950:	4807      	ldr	r0, [pc, #28]	; (8024970 <_ZN5Print11DistanceLogEv+0x60>)
 8024952:	f006 fb0b 	bl	802af6c <iprintf>

        address += 4;
 8024956:	697b      	ldr	r3, [r7, #20]
 8024958:	3304      	adds	r3, #4
 802495a:	617b      	str	r3, [r7, #20]
    for(uint16_t index = 0; index < LOG_LENGTH; index++)
 802495c:	8a7b      	ldrh	r3, [r7, #18]
 802495e:	3301      	adds	r3, #1
 8024960:	827b      	strh	r3, [r7, #18]
 8024962:	e7dd      	b.n	8024920 <_ZN5Print11DistanceLogEv+0x10>
    }
}
 8024964:	bf00      	nop
 8024966:	371c      	adds	r7, #28
 8024968:	46bd      	mov	sp, r7
 802496a:	bd90      	pop	{r4, r7, pc}
 802496c:	08008000 	.word	0x08008000
 8024970:	0802be84 	.word	0x0802be84

08024974 <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 8024974:	b580      	push	{r7, lr}
 8024976:	b084      	sub	sp, #16
 8024978:	af00      	add	r7, sp, #0
 802497a:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 802497c:	2300      	movs	r3, #0
 802497e:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 8024980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8024984:	4821      	ldr	r0, [pc, #132]	; (8024a0c <_ZN12RotarySwitch5StateEv+0x98>)
 8024986:	f003 ff9b 	bl	80288c0 <HAL_GPIO_ReadPin>
 802498a:	4603      	mov	r3, r0
 802498c:	2b00      	cmp	r3, #0
 802498e:	bf0c      	ite	eq
 8024990:	2301      	moveq	r3, #1
 8024992:	2300      	movne	r3, #0
 8024994:	b2db      	uxtb	r3, r3
 8024996:	2b00      	cmp	r3, #0
 8024998:	d003      	beq.n	80249a2 <_ZN12RotarySwitch5StateEv+0x2e>
 802499a:	7bfb      	ldrb	r3, [r7, #15]
 802499c:	f043 0301 	orr.w	r3, r3, #1
 80249a0:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 80249a2:	2104      	movs	r1, #4
 80249a4:	481a      	ldr	r0, [pc, #104]	; (8024a10 <_ZN12RotarySwitch5StateEv+0x9c>)
 80249a6:	f003 ff8b 	bl	80288c0 <HAL_GPIO_ReadPin>
 80249aa:	4603      	mov	r3, r0
 80249ac:	2b00      	cmp	r3, #0
 80249ae:	bf0c      	ite	eq
 80249b0:	2301      	moveq	r3, #1
 80249b2:	2300      	movne	r3, #0
 80249b4:	b2db      	uxtb	r3, r3
 80249b6:	2b00      	cmp	r3, #0
 80249b8:	d003      	beq.n	80249c2 <_ZN12RotarySwitch5StateEv+0x4e>
 80249ba:	7bfb      	ldrb	r3, [r7, #15]
 80249bc:	f043 0302 	orr.w	r3, r3, #2
 80249c0:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 80249c2:	2102      	movs	r1, #2
 80249c4:	4812      	ldr	r0, [pc, #72]	; (8024a10 <_ZN12RotarySwitch5StateEv+0x9c>)
 80249c6:	f003 ff7b 	bl	80288c0 <HAL_GPIO_ReadPin>
 80249ca:	4603      	mov	r3, r0
 80249cc:	2b00      	cmp	r3, #0
 80249ce:	bf0c      	ite	eq
 80249d0:	2301      	moveq	r3, #1
 80249d2:	2300      	movne	r3, #0
 80249d4:	b2db      	uxtb	r3, r3
 80249d6:	2b00      	cmp	r3, #0
 80249d8:	d003      	beq.n	80249e2 <_ZN12RotarySwitch5StateEv+0x6e>
 80249da:	7bfb      	ldrb	r3, [r7, #15]
 80249dc:	f043 0304 	orr.w	r3, r3, #4
 80249e0:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 80249e2:	2101      	movs	r1, #1
 80249e4:	480a      	ldr	r0, [pc, #40]	; (8024a10 <_ZN12RotarySwitch5StateEv+0x9c>)
 80249e6:	f003 ff6b 	bl	80288c0 <HAL_GPIO_ReadPin>
 80249ea:	4603      	mov	r3, r0
 80249ec:	2b00      	cmp	r3, #0
 80249ee:	bf0c      	ite	eq
 80249f0:	2301      	moveq	r3, #1
 80249f2:	2300      	movne	r3, #0
 80249f4:	b2db      	uxtb	r3, r3
 80249f6:	2b00      	cmp	r3, #0
 80249f8:	d003      	beq.n	8024a02 <_ZN12RotarySwitch5StateEv+0x8e>
 80249fa:	7bfb      	ldrb	r3, [r7, #15]
 80249fc:	f043 0308 	orr.w	r3, r3, #8
 8024a00:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 8024a02:	7bfb      	ldrb	r3, [r7, #15]
 8024a04:	4618      	mov	r0, r3
 8024a06:	3710      	adds	r7, #16
 8024a08:	46bd      	mov	sp, r7
 8024a0a:	bd80      	pop	{r7, pc}
 8024a0c:	40020000 	.word	0x40020000
 8024a10:	40020400 	.word	0x40020400

08024a14 <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3LedP10LineSensorP9LineTraceP6LoggerP7Logger2P5MotorP5PrintP12RotarySwitchP10SideSensorP15VelocityControl>:
#include "run.hpp"
#include "declare_extern.h"

Run::Run(Encoder *encoder,
 8024a14:	b480      	push	{r7}
 8024a16:	b085      	sub	sp, #20
 8024a18:	af00      	add	r7, sp, #0
 8024a1a:	60f8      	str	r0, [r7, #12]
 8024a1c:	60b9      	str	r1, [r7, #8]
 8024a1e:	607a      	str	r2, [r7, #4]
 8024a20:	603b      	str	r3, [r7, #0]
           , run_mode_changed_internal_(false)
           , switch_interval_wait_timer_(0)
           , switch_interval_wait_enable_(true)
           , switch_interval_led_enable_(true)
           , mode_complete_(true)
           , store_log_failed_(true)
 8024a22:	68fb      	ldr	r3, [r7, #12]
 8024a24:	2200      	movs	r2, #0
 8024a26:	701a      	strb	r2, [r3, #0]
 8024a28:	68fb      	ldr	r3, [r7, #12]
 8024a2a:	2200      	movs	r2, #0
 8024a2c:	705a      	strb	r2, [r3, #1]
 8024a2e:	68fb      	ldr	r3, [r7, #12]
 8024a30:	2200      	movs	r2, #0
 8024a32:	709a      	strb	r2, [r3, #2]
 8024a34:	68fb      	ldr	r3, [r7, #12]
 8024a36:	2201      	movs	r2, #1
 8024a38:	70da      	strb	r2, [r3, #3]
 8024a3a:	68fb      	ldr	r3, [r7, #12]
 8024a3c:	2201      	movs	r2, #1
 8024a3e:	711a      	strb	r2, [r3, #4]
 8024a40:	68fb      	ldr	r3, [r7, #12]
 8024a42:	2201      	movs	r2, #1
 8024a44:	715a      	strb	r2, [r3, #5]
 8024a46:	68fb      	ldr	r3, [r7, #12]
 8024a48:	2201      	movs	r2, #1
 8024a4a:	719a      	strb	r2, [r3, #6]
{
    encoder_          = encoder;
 8024a4c:	68fb      	ldr	r3, [r7, #12]
 8024a4e:	68ba      	ldr	r2, [r7, #8]
 8024a50:	609a      	str	r2, [r3, #8]
    flash_            = flash;
 8024a52:	68fb      	ldr	r3, [r7, #12]
 8024a54:	687a      	ldr	r2, [r7, #4]
 8024a56:	60da      	str	r2, [r3, #12]
    iim_42652_        = iim_42652;
 8024a58:	68fb      	ldr	r3, [r7, #12]
 8024a5a:	683a      	ldr	r2, [r7, #0]
 8024a5c:	611a      	str	r2, [r3, #16]
    led_              = led;
 8024a5e:	68fb      	ldr	r3, [r7, #12]
 8024a60:	69ba      	ldr	r2, [r7, #24]
 8024a62:	615a      	str	r2, [r3, #20]
    line_sensor_      = line_sensor;
 8024a64:	68fb      	ldr	r3, [r7, #12]
 8024a66:	69fa      	ldr	r2, [r7, #28]
 8024a68:	619a      	str	r2, [r3, #24]
    line_trace_       = line_trace;
 8024a6a:	68fb      	ldr	r3, [r7, #12]
 8024a6c:	6a3a      	ldr	r2, [r7, #32]
 8024a6e:	61da      	str	r2, [r3, #28]
    logger_           = logger;
 8024a70:	68fb      	ldr	r3, [r7, #12]
 8024a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024a74:	621a      	str	r2, [r3, #32]
    logger2_          = logger2;
 8024a76:	68fb      	ldr	r3, [r7, #12]
 8024a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024a7a:	625a      	str	r2, [r3, #36]	; 0x24
    motor_            = motor;
 8024a7c:	68fb      	ldr	r3, [r7, #12]
 8024a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024a80:	629a      	str	r2, [r3, #40]	; 0x28
    print_            = print;
 8024a82:	68fb      	ldr	r3, [r7, #12]
 8024a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024a86:	62da      	str	r2, [r3, #44]	; 0x2c
    rotary_switch_    = rotary_switch;
 8024a88:	68fb      	ldr	r3, [r7, #12]
 8024a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024a8c:	631a      	str	r2, [r3, #48]	; 0x30
    side_sensor_      = side_sensor;
 8024a8e:	68fb      	ldr	r3, [r7, #12]
 8024a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8024a92:	635a      	str	r2, [r3, #52]	; 0x34
    velocity_control_ = velocity_control;
 8024a94:	68fb      	ldr	r3, [r7, #12]
 8024a96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024a98:	639a      	str	r2, [r3, #56]	; 0x38
}
 8024a9a:	68fb      	ldr	r3, [r7, #12]
 8024a9c:	4618      	mov	r0, r3
 8024a9e:	3714      	adds	r7, #20
 8024aa0:	46bd      	mov	sp, r7
 8024aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024aa6:	4770      	bx	lr

08024aa8 <_ZN3Run4InitEv>:

void Run::Init()
{
 8024aa8:	b580      	push	{r7, lr}
 8024aaa:	b084      	sub	sp, #16
 8024aac:	af00      	add	r7, sp, #0
 8024aae:	6078      	str	r0, [r7, #4]
    line_sensor_->Init();
 8024ab0:	687b      	ldr	r3, [r7, #4]
 8024ab2:	699b      	ldr	r3, [r3, #24]
 8024ab4:	4618      	mov	r0, r3
 8024ab6:	f7fd f87d 	bl	8021bb4 <_ZN10LineSensor4InitEv>
    encoder_->Init();
 8024aba:	687b      	ldr	r3, [r7, #4]
 8024abc:	689b      	ldr	r3, [r3, #8]
 8024abe:	4618      	mov	r0, r3
 8024ac0:	f7fc f990 	bl	8020de4 <_ZN7Encoder4InitEv>
    motor_->Init();
 8024ac4:	687b      	ldr	r3, [r7, #4]
 8024ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024ac8:	4618      	mov	r0, r3
 8024aca:	f7ff fd6b 	bl	80245a4 <_ZN5Motor4InitEv>
    uint8_t imu_init = iim_42652_->Init();
 8024ace:	687b      	ldr	r3, [r7, #4]
 8024ad0:	691b      	ldr	r3, [r3, #16]
 8024ad2:	4618      	mov	r0, r3
 8024ad4:	f7fc fc72 	bl	80213bc <_ZN8Iim426524InitEv>
 8024ad8:	4603      	mov	r3, r0
 8024ada:	73bb      	strb	r3, [r7, #14]

    bool flash_erase = true;
 8024adc:	2301      	movs	r3, #1
 8024ade:	73fb      	strb	r3, [r7, #15]
    uint8_t switch_state = rotary_switch_->State();
 8024ae0:	687b      	ldr	r3, [r7, #4]
 8024ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024ae4:	4618      	mov	r0, r3
 8024ae6:	f7ff ff45 	bl	8024974 <_ZN12RotarySwitch5StateEv>
 8024aea:	4603      	mov	r3, r0
 8024aec:	737b      	strb	r3, [r7, #13]

    if(switch_state == 0x0E)
 8024aee:	7b7b      	ldrb	r3, [r7, #13]
 8024af0:	2b0e      	cmp	r3, #14
 8024af2:	d114      	bne.n	8024b1e <_ZN3Run4InitEv+0x76>
    {
        led_->Blink(3, 'R', 'X');
 8024af4:	687b      	ldr	r3, [r7, #4]
 8024af6:	6958      	ldr	r0, [r3, #20]
 8024af8:	2358      	movs	r3, #88	; 0x58
 8024afa:	2252      	movs	r2, #82	; 0x52
 8024afc:	2103      	movs	r1, #3
 8024afe:	f7fc ff4d 	bl	802199c <_ZN3Led5BlinkEhcc>
        if(!flash_->Clear()) flash_erase = false;
 8024b02:	687b      	ldr	r3, [r7, #4]
 8024b04:	68db      	ldr	r3, [r3, #12]
 8024b06:	4618      	mov	r0, r3
 8024b08:	f7fc fa6e 	bl	8020fe8 <_ZN5Flash5ClearEv>
 8024b0c:	4603      	mov	r3, r0
 8024b0e:	f083 0301 	eor.w	r3, r3, #1
 8024b12:	b2db      	uxtb	r3, r3
 8024b14:	2b00      	cmp	r3, #0
 8024b16:	d012      	beq.n	8024b3e <_ZN3Run4InitEv+0x96>
 8024b18:	2300      	movs	r3, #0
 8024b1a:	73fb      	strb	r3, [r7, #15]
 8024b1c:	e00f      	b.n	8024b3e <_ZN3Run4InitEv+0x96>
    }
    else if(switch_state == 0x0B)
 8024b1e:	7b7b      	ldrb	r3, [r7, #13]
 8024b20:	2b0b      	cmp	r3, #11
 8024b22:	d10c      	bne.n	8024b3e <_ZN3Run4InitEv+0x96>
    {
        led_->Blink(3, 'M', 'X');
 8024b24:	687b      	ldr	r3, [r7, #4]
 8024b26:	6958      	ldr	r0, [r3, #20]
 8024b28:	2358      	movs	r3, #88	; 0x58
 8024b2a:	224d      	movs	r2, #77	; 0x4d
 8024b2c:	2103      	movs	r1, #3
 8024b2e:	f7fc ff35 	bl	802199c <_ZN3Led5BlinkEhcc>
        print_->Log();
 8024b32:	687b      	ldr	r3, [r7, #4]
 8024b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024b36:	4618      	mov	r0, r3
 8024b38:	f7ff feb2 	bl	80248a0 <_ZN5Print3LogEv>
        return;
 8024b3c:	e02e      	b.n	8024b9c <_ZN3Run4InitEv+0xf4>
    }

#ifdef DEBUG_MODE
    g_imu_init = imu_init;
 8024b3e:	4a19      	ldr	r2, [pc, #100]	; (8024ba4 <_ZN3Run4InitEv+0xfc>)
 8024b40:	7bbb      	ldrb	r3, [r7, #14]
 8024b42:	7013      	strb	r3, [r2, #0]
    g_flash_erase = flash_erase;
 8024b44:	7bfa      	ldrb	r2, [r7, #15]
 8024b46:	4b18      	ldr	r3, [pc, #96]	; (8024ba8 <_ZN3Run4InitEv+0x100>)
 8024b48:	701a      	strb	r2, [r3, #0]
    g_switch_state = switch_state;
 8024b4a:	4a18      	ldr	r2, [pc, #96]	; (8024bac <_ZN3Run4InitEv+0x104>)
 8024b4c:	7b7b      	ldrb	r3, [r7, #13]
 8024b4e:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(flash_erase && imu_init == 0x09)
 8024b50:	7bfb      	ldrb	r3, [r7, #15]
 8024b52:	2b00      	cmp	r3, #0
 8024b54:	d012      	beq.n	8024b7c <_ZN3Run4InitEv+0xd4>
 8024b56:	7bbb      	ldrb	r3, [r7, #14]
 8024b58:	2b09      	cmp	r3, #9
 8024b5a:	d10f      	bne.n	8024b7c <_ZN3Run4InitEv+0xd4>
    {
        led_->Rainbow(1);
 8024b5c:	687b      	ldr	r3, [r7, #4]
 8024b5e:	695b      	ldr	r3, [r3, #20]
 8024b60:	2101      	movs	r1, #1
 8024b62:	4618      	mov	r0, r3
 8024b64:	f7fc ff47 	bl	80219f6 <_ZN3Led7RainbowEh>
        HAL_TIM_Base_Start_IT(&htim2);
 8024b68:	4811      	ldr	r0, [pc, #68]	; (8024bb0 <_ZN3Run4InitEv+0x108>)
 8024b6a:	f005 f9ba 	bl	8029ee2 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 8024b6e:	4811      	ldr	r0, [pc, #68]	; (8024bb4 <_ZN3Run4InitEv+0x10c>)
 8024b70:	f005 f9b7 	bl	8029ee2 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim7);
 8024b74:	4810      	ldr	r0, [pc, #64]	; (8024bb8 <_ZN3Run4InitEv+0x110>)
 8024b76:	f005 f9b4 	bl	8029ee2 <HAL_TIM_Base_Start_IT>
 8024b7a:	e00f      	b.n	8024b9c <_ZN3Run4InitEv+0xf4>
    }
    else if(flash_erase) led_->ColorOrder('Y');
 8024b7c:	7bfb      	ldrb	r3, [r7, #15]
 8024b7e:	2b00      	cmp	r3, #0
 8024b80:	d006      	beq.n	8024b90 <_ZN3Run4InitEv+0xe8>
 8024b82:	687b      	ldr	r3, [r7, #4]
 8024b84:	695b      	ldr	r3, [r3, #20]
 8024b86:	2159      	movs	r1, #89	; 0x59
 8024b88:	4618      	mov	r0, r3
 8024b8a:	f7fc fe2b 	bl	80217e4 <_ZN3Led10ColorOrderEc>
 8024b8e:	e005      	b.n	8024b9c <_ZN3Run4InitEv+0xf4>
    else led_->ColorOrder('R');
 8024b90:	687b      	ldr	r3, [r7, #4]
 8024b92:	695b      	ldr	r3, [r3, #20]
 8024b94:	2152      	movs	r1, #82	; 0x52
 8024b96:	4618      	mov	r0, r3
 8024b98:	f7fc fe24 	bl	80217e4 <_ZN3Led10ColorOrderEc>
}
 8024b9c:	3710      	adds	r7, #16
 8024b9e:	46bd      	mov	sp, r7
 8024ba0:	bd80      	pop	{r7, pc}
 8024ba2:	bf00      	nop
 8024ba4:	200002d7 	.word	0x200002d7
 8024ba8:	20000351 	.word	0x20000351
 8024bac:	20000350 	.word	0x20000350
 8024bb0:	20011434 	.word	0x20011434
 8024bb4:	200113b4 	.word	0x200113b4
 8024bb8:	200114b4 	.word	0x200114b4

08024bbc <_ZN3Run6Timer7Ev>:

void Run::Timer7()
{
 8024bbc:	b580      	push	{r7, lr}
 8024bbe:	b082      	sub	sp, #8
 8024bc0:	af00      	add	r7, sp, #0
 8024bc2:	6078      	str	r0, [r7, #4]
    line_sensor_->StoreConsecutiveBuff();
 8024bc4:	687b      	ldr	r3, [r7, #4]
 8024bc6:	699b      	ldr	r3, [r3, #24]
 8024bc8:	4618      	mov	r0, r3
 8024bca:	f7fd f82d 	bl	8021c28 <_ZN10LineSensor20StoreConsecutiveBuffEv>
}
 8024bce:	bf00      	nop
 8024bd0:	3708      	adds	r7, #8
 8024bd2:	46bd      	mov	sp, r7
 8024bd4:	bd80      	pop	{r7, pc}
	...

08024bd8 <_ZN3Run6Timer2Ev>:

void Run::Timer2()
{
 8024bd8:	b580      	push	{r7, lr}
 8024bda:	b084      	sub	sp, #16
 8024bdc:	af00      	add	r7, sp, #0
 8024bde:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = rotary_switch_->State();
 8024be0:	687b      	ldr	r3, [r7, #4]
 8024be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024be4:	4618      	mov	r0, r3
 8024be6:	f7ff fec5 	bl	8024974 <_ZN12RotarySwitch5StateEv>
 8024bea:	4603      	mov	r3, r0
 8024bec:	73fb      	strb	r3, [r7, #15]
    static uint8_t pre_switch_state = switch_state;
 8024bee:	4b2c      	ldr	r3, [pc, #176]	; (8024ca0 <_ZN3Run6Timer2Ev+0xc8>)
 8024bf0:	781b      	ldrb	r3, [r3, #0]
 8024bf2:	f3bf 8f5b 	dmb	ish
 8024bf6:	b2db      	uxtb	r3, r3
 8024bf8:	f003 0301 	and.w	r3, r3, #1
 8024bfc:	2b00      	cmp	r3, #0
 8024bfe:	bf0c      	ite	eq
 8024c00:	2301      	moveq	r3, #1
 8024c02:	2300      	movne	r3, #0
 8024c04:	b2db      	uxtb	r3, r3
 8024c06:	2b00      	cmp	r3, #0
 8024c08:	d010      	beq.n	8024c2c <_ZN3Run6Timer2Ev+0x54>
 8024c0a:	4825      	ldr	r0, [pc, #148]	; (8024ca0 <_ZN3Run6Timer2Ev+0xc8>)
 8024c0c:	f006 f960 	bl	802aed0 <__cxa_guard_acquire>
 8024c10:	4603      	mov	r3, r0
 8024c12:	2b00      	cmp	r3, #0
 8024c14:	bf14      	ite	ne
 8024c16:	2301      	movne	r3, #1
 8024c18:	2300      	moveq	r3, #0
 8024c1a:	b2db      	uxtb	r3, r3
 8024c1c:	2b00      	cmp	r3, #0
 8024c1e:	d005      	beq.n	8024c2c <_ZN3Run6Timer2Ev+0x54>
 8024c20:	4a20      	ldr	r2, [pc, #128]	; (8024ca4 <_ZN3Run6Timer2Ev+0xcc>)
 8024c22:	7bfb      	ldrb	r3, [r7, #15]
 8024c24:	7013      	strb	r3, [r2, #0]
 8024c26:	481e      	ldr	r0, [pc, #120]	; (8024ca0 <_ZN3Run6Timer2Ev+0xc8>)
 8024c28:	f006 f95e 	bl	802aee8 <__cxa_guard_release>
    static bool interval_enable = true;

#ifdef DEBUG_MODE
    g_switch_state = switch_state;
 8024c2c:	4a1e      	ldr	r2, [pc, #120]	; (8024ca8 <_ZN3Run6Timer2Ev+0xd0>)
 8024c2e:	7bfb      	ldrb	r3, [r7, #15]
 8024c30:	7013      	strb	r3, [r2, #0]
    g_interval_enable = interval_enable;
 8024c32:	4b1e      	ldr	r3, [pc, #120]	; (8024cac <_ZN3Run6Timer2Ev+0xd4>)
 8024c34:	781a      	ldrb	r2, [r3, #0]
 8024c36:	4b1e      	ldr	r3, [pc, #120]	; (8024cb0 <_ZN3Run6Timer2Ev+0xd8>)
 8024c38:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

    if(switch_state != pre_switch_state)
 8024c3a:	4b1a      	ldr	r3, [pc, #104]	; (8024ca4 <_ZN3Run6Timer2Ev+0xcc>)
 8024c3c:	781b      	ldrb	r3, [r3, #0]
 8024c3e:	7bfa      	ldrb	r2, [r7, #15]
 8024c40:	429a      	cmp	r2, r3
 8024c42:	d00f      	beq.n	8024c64 <_ZN3Run6Timer2Ev+0x8c>
    {
        SetRunMode(STANDBY);
 8024c44:	2100      	movs	r1, #0
 8024c46:	6878      	ldr	r0, [r7, #4]
 8024c48:	f000 f89c 	bl	8024d84 <_ZN3Run10SetRunModeEh>
        WhenSwitchChange();
 8024c4c:	6878      	ldr	r0, [r7, #4]
 8024c4e:	f000 f8c1 	bl	8024dd4 <_ZN3Run16WhenSwitchChangeEv>
        led_->ResetInterrupt();
 8024c52:	687b      	ldr	r3, [r7, #4]
 8024c54:	695b      	ldr	r3, [r3, #20]
 8024c56:	4618      	mov	r0, r3
 8024c58:	f7fc ff5b 	bl	8021b12 <_ZN3Led14ResetInterruptEv>
        interval_enable = true;
 8024c5c:	4b13      	ldr	r3, [pc, #76]	; (8024cac <_ZN3Run6Timer2Ev+0xd4>)
 8024c5e:	2201      	movs	r2, #1
 8024c60:	701a      	strb	r2, [r3, #0]
 8024c62:	e016      	b.n	8024c92 <_ZN3Run6Timer2Ev+0xba>
    }
    else if(interval_enable)
 8024c64:	4b11      	ldr	r3, [pc, #68]	; (8024cac <_ZN3Run6Timer2Ev+0xd4>)
 8024c66:	781b      	ldrb	r3, [r3, #0]
 8024c68:	2b00      	cmp	r3, #0
 8024c6a:	d00d      	beq.n	8024c88 <_ZN3Run6Timer2Ev+0xb0>
    {
        SetRunMode(STANDBY);
 8024c6c:	2100      	movs	r1, #0
 8024c6e:	6878      	ldr	r0, [r7, #4]
 8024c70:	f000 f888 	bl	8024d84 <_ZN3Run10SetRunModeEh>
        interval_enable = SwitchChangeInterval(switch_state);
 8024c74:	7bfb      	ldrb	r3, [r7, #15]
 8024c76:	4619      	mov	r1, r3
 8024c78:	6878      	ldr	r0, [r7, #4]
 8024c7a:	f000 f8c1 	bl	8024e00 <_ZN3Run20SwitchChangeIntervalEh>
 8024c7e:	4603      	mov	r3, r0
 8024c80:	461a      	mov	r2, r3
 8024c82:	4b0a      	ldr	r3, [pc, #40]	; (8024cac <_ZN3Run6Timer2Ev+0xd4>)
 8024c84:	701a      	strb	r2, [r3, #0]
 8024c86:	e004      	b.n	8024c92 <_ZN3Run6Timer2Ev+0xba>
    }
    else UpdateRunMode(switch_state);
 8024c88:	7bfb      	ldrb	r3, [r7, #15]
 8024c8a:	4619      	mov	r1, r3
 8024c8c:	6878      	ldr	r0, [r7, #4]
 8024c8e:	f000 f811 	bl	8024cb4 <_ZN3Run13UpdateRunModeEh>

    pre_switch_state = switch_state;
 8024c92:	4a04      	ldr	r2, [pc, #16]	; (8024ca4 <_ZN3Run6Timer2Ev+0xcc>)
 8024c94:	7bfb      	ldrb	r3, [r7, #15]
 8024c96:	7013      	strb	r3, [r2, #0]
}
 8024c98:	bf00      	nop
 8024c9a:	3710      	adds	r7, #16
 8024c9c:	46bd      	mov	sp, r7
 8024c9e:	bd80      	pop	{r7, pc}
 8024ca0:	20000354 	.word	0x20000354
 8024ca4:	20000352 	.word	0x20000352
 8024ca8:	20000350 	.word	0x20000350
 8024cac:	20000011 	.word	0x20000011
 8024cb0:	20000010 	.word	0x20000010

08024cb4 <_ZN3Run13UpdateRunModeEh>:

void Run::UpdateRunMode(uint8_t switch_state)
{
 8024cb4:	b580      	push	{r7, lr}
 8024cb6:	b082      	sub	sp, #8
 8024cb8:	af00      	add	r7, sp, #0
 8024cba:	6078      	str	r0, [r7, #4]
 8024cbc:	460b      	mov	r3, r1
 8024cbe:	70fb      	strb	r3, [r7, #3]
    if(run_mode_changed_internal_) return;
 8024cc0:	687b      	ldr	r3, [r7, #4]
 8024cc2:	785b      	ldrb	r3, [r3, #1]
 8024cc4:	2b00      	cmp	r3, #0
 8024cc6:	d158      	bne.n	8024d7a <_ZN3Run13UpdateRunModeEh+0xc6>

    switch(switch_state)
 8024cc8:	78fb      	ldrb	r3, [r7, #3]
 8024cca:	3b01      	subs	r3, #1
 8024ccc:	2b0e      	cmp	r3, #14
 8024cce:	d84e      	bhi.n	8024d6e <_ZN3Run13UpdateRunModeEh+0xba>
 8024cd0:	a201      	add	r2, pc, #4	; (adr r2, 8024cd8 <_ZN3Run13UpdateRunModeEh+0x24>)
 8024cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024cd6:	bf00      	nop
 8024cd8:	08024d47 	.word	0x08024d47
 8024cdc:	08024d51 	.word	0x08024d51
 8024ce0:	08024d6f 	.word	0x08024d6f
 8024ce4:	08024d6f 	.word	0x08024d6f
 8024ce8:	08024d6f 	.word	0x08024d6f
 8024cec:	08024d6f 	.word	0x08024d6f
 8024cf0:	08024d5b 	.word	0x08024d5b
 8024cf4:	08024d65 	.word	0x08024d65
 8024cf8:	08024d6f 	.word	0x08024d6f
 8024cfc:	08024d15 	.word	0x08024d15
 8024d00:	08024d1f 	.word	0x08024d1f
 8024d04:	08024d29 	.word	0x08024d29
 8024d08:	08024d33 	.word	0x08024d33
 8024d0c:	08024d6f 	.word	0x08024d6f
 8024d10:	08024d3d 	.word	0x08024d3d
    {
#ifdef DEBUG_MODE
        case 0x0A: SetRunMode(VELOCITY_CONTROL_DEBUG); break;
 8024d14:	210b      	movs	r1, #11
 8024d16:	6878      	ldr	r0, [r7, #4]
 8024d18:	f000 f834 	bl	8024d84 <_ZN3Run10SetRunModeEh>
 8024d1c:	e02e      	b.n	8024d7c <_ZN3Run13UpdateRunModeEh+0xc8>
        case 0x0B: SetRunMode(LOG); break;
 8024d1e:	210c      	movs	r1, #12
 8024d20:	6878      	ldr	r0, [r7, #4]
 8024d22:	f000 f82f 	bl	8024d84 <_ZN3Run10SetRunModeEh>
 8024d26:	e029      	b.n	8024d7c <_ZN3Run13UpdateRunModeEh+0xc8>
#endif // DEBUG_MODE

        case 0x0C: SetRunMode(DEV_ACCEL); break;
 8024d28:	21dd      	movs	r1, #221	; 0xdd
 8024d2a:	6878      	ldr	r0, [r7, #4]
 8024d2c:	f000 f82a 	bl	8024d84 <_ZN3Run10SetRunModeEh>
 8024d30:	e024      	b.n	8024d7c <_ZN3Run13UpdateRunModeEh+0xc8>
        case 0x0D: SetRunMode(DEV); break;
 8024d32:	210d      	movs	r1, #13
 8024d34:	6878      	ldr	r0, [r7, #4]
 8024d36:	f000 f825 	bl	8024d84 <_ZN3Run10SetRunModeEh>
 8024d3a:	e01f      	b.n	8024d7c <_ZN3Run13UpdateRunModeEh+0xc8>
        case 0x0F: SetRunMode(READY); break;
 8024d3c:	210f      	movs	r1, #15
 8024d3e:	6878      	ldr	r0, [r7, #4]
 8024d40:	f000 f820 	bl	8024d84 <_ZN3Run10SetRunModeEh>
 8024d44:	e01a      	b.n	8024d7c <_ZN3Run13UpdateRunModeEh+0xc8>
        case 0x01: SetRunMode(FIRST_RUN); break;
 8024d46:	2101      	movs	r1, #1
 8024d48:	6878      	ldr	r0, [r7, #4]
 8024d4a:	f000 f81b 	bl	8024d84 <_ZN3Run10SetRunModeEh>
 8024d4e:	e015      	b.n	8024d7c <_ZN3Run13UpdateRunModeEh+0xc8>
        case 0x02: SetRunMode(SECOND_RUN); break;
 8024d50:	2102      	movs	r1, #2
 8024d52:	6878      	ldr	r0, [r7, #4]
 8024d54:	f000 f816 	bl	8024d84 <_ZN3Run10SetRunModeEh>
 8024d58:	e010      	b.n	8024d7c <_ZN3Run13UpdateRunModeEh+0xc8>
        case 0x07: SetRunMode(VELOCITY_CONTROL); break;
 8024d5a:	2107      	movs	r1, #7
 8024d5c:	6878      	ldr	r0, [r7, #4]
 8024d5e:	f000 f811 	bl	8024d84 <_ZN3Run10SetRunModeEh>
 8024d62:	e00b      	b.n	8024d7c <_ZN3Run13UpdateRunModeEh+0xc8>
        case 0x08: SetRunMode(LINE_TRACE); break;
 8024d64:	2108      	movs	r1, #8
 8024d66:	6878      	ldr	r0, [r7, #4]
 8024d68:	f000 f80c 	bl	8024d84 <_ZN3Run10SetRunModeEh>
 8024d6c:	e006      	b.n	8024d7c <_ZN3Run13UpdateRunModeEh+0xc8>
        default:   SetRunMode(STANDBY); break;
 8024d6e:	2100      	movs	r1, #0
 8024d70:	6878      	ldr	r0, [r7, #4]
 8024d72:	f000 f807 	bl	8024d84 <_ZN3Run10SetRunModeEh>
 8024d76:	bf00      	nop
 8024d78:	e000      	b.n	8024d7c <_ZN3Run13UpdateRunModeEh+0xc8>
    if(run_mode_changed_internal_) return;
 8024d7a:	bf00      	nop
    }
}
 8024d7c:	3708      	adds	r7, #8
 8024d7e:	46bd      	mov	sp, r7
 8024d80:	bd80      	pop	{r7, pc}
 8024d82:	bf00      	nop

08024d84 <_ZN3Run10SetRunModeEh>:

void Run::SetRunMode(uint8_t mode)
{
 8024d84:	b480      	push	{r7}
 8024d86:	b083      	sub	sp, #12
 8024d88:	af00      	add	r7, sp, #0
 8024d8a:	6078      	str	r0, [r7, #4]
 8024d8c:	460b      	mov	r3, r1
 8024d8e:	70fb      	strb	r3, [r7, #3]
    run_mode_ = mode;
 8024d90:	687b      	ldr	r3, [r7, #4]
 8024d92:	78fa      	ldrb	r2, [r7, #3]
 8024d94:	701a      	strb	r2, [r3, #0]
}
 8024d96:	bf00      	nop
 8024d98:	370c      	adds	r7, #12
 8024d9a:	46bd      	mov	sp, r7
 8024d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024da0:	4770      	bx	lr
	...

08024da4 <_ZN3Run25SetRunModeChangedInternalEb>:

void Run::SetRunModeChangedInternal(bool boolean)
{
 8024da4:	b480      	push	{r7}
 8024da6:	b083      	sub	sp, #12
 8024da8:	af00      	add	r7, sp, #0
 8024daa:	6078      	str	r0, [r7, #4]
 8024dac:	460b      	mov	r3, r1
 8024dae:	70fb      	strb	r3, [r7, #3]
    run_mode_changed_internal_ = boolean;
 8024db0:	687b      	ldr	r3, [r7, #4]
 8024db2:	78fa      	ldrb	r2, [r7, #3]
 8024db4:	705a      	strb	r2, [r3, #1]

#ifdef DEBUG_MODE
    g_run_mode_changed_internal_cnt++;
 8024db6:	4b06      	ldr	r3, [pc, #24]	; (8024dd0 <_ZN3Run25SetRunModeChangedInternalEb+0x2c>)
 8024db8:	781b      	ldrb	r3, [r3, #0]
 8024dba:	3301      	adds	r3, #1
 8024dbc:	b2da      	uxtb	r2, r3
 8024dbe:	4b04      	ldr	r3, [pc, #16]	; (8024dd0 <_ZN3Run25SetRunModeChangedInternalEb+0x2c>)
 8024dc0:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE
}
 8024dc2:	bf00      	nop
 8024dc4:	370c      	adds	r7, #12
 8024dc6:	46bd      	mov	sp, r7
 8024dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dcc:	4770      	bx	lr
 8024dce:	bf00      	nop
 8024dd0:	20000138 	.word	0x20000138

08024dd4 <_ZN3Run16WhenSwitchChangeEv>:

void Run::WhenSwitchChange()
{
 8024dd4:	b580      	push	{r7, lr}
 8024dd6:	b082      	sub	sp, #8
 8024dd8:	af00      	add	r7, sp, #0
 8024dda:	6078      	str	r0, [r7, #4]
    SetRunModeChangedInternal(false);
 8024ddc:	2100      	movs	r1, #0
 8024dde:	6878      	ldr	r0, [r7, #4]
 8024de0:	f7ff ffe0 	bl	8024da4 <_ZN3Run25SetRunModeChangedInternalEb>
    switch_interval_led_enable_ = true;
 8024de4:	687b      	ldr	r3, [r7, #4]
 8024de6:	2201      	movs	r2, #1
 8024de8:	711a      	strb	r2, [r3, #4]
    switch_interval_wait_enable_ = true;
 8024dea:	687b      	ldr	r3, [r7, #4]
 8024dec:	2201      	movs	r2, #1
 8024dee:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_timer_ = 0;
 8024df0:	687b      	ldr	r3, [r7, #4]
 8024df2:	2200      	movs	r2, #0
 8024df4:	709a      	strb	r2, [r3, #2]
}
 8024df6:	bf00      	nop
 8024df8:	3708      	adds	r7, #8
 8024dfa:	46bd      	mov	sp, r7
 8024dfc:	bd80      	pop	{r7, pc}
	...

08024e00 <_ZN3Run20SwitchChangeIntervalEh>:

bool Run::SwitchChangeInterval(uint8_t switch_state)
{
 8024e00:	b580      	push	{r7, lr}
 8024e02:	b084      	sub	sp, #16
 8024e04:	af00      	add	r7, sp, #0
 8024e06:	6078      	str	r0, [r7, #4]
 8024e08:	460b      	mov	r3, r1
 8024e0a:	70fb      	strb	r3, [r7, #3]
    uint8_t wait_timer = switch_interval_wait_timer_;
 8024e0c:	687b      	ldr	r3, [r7, #4]
 8024e0e:	789b      	ldrb	r3, [r3, #2]
 8024e10:	73fb      	strb	r3, [r7, #15]
    bool wait_enable = switch_interval_wait_enable_;
 8024e12:	687b      	ldr	r3, [r7, #4]
 8024e14:	78db      	ldrb	r3, [r3, #3]
 8024e16:	73bb      	strb	r3, [r7, #14]
    bool led_enable = switch_interval_led_enable_;
 8024e18:	687b      	ldr	r3, [r7, #4]
 8024e1a:	791b      	ldrb	r3, [r3, #4]
 8024e1c:	737b      	strb	r3, [r7, #13]
    bool interval_continue = true;
 8024e1e:	2301      	movs	r3, #1
 8024e20:	733b      	strb	r3, [r7, #12]

    if(led_enable)
 8024e22:	7b7b      	ldrb	r3, [r7, #13]
 8024e24:	2b00      	cmp	r3, #0
 8024e26:	f000 808a 	beq.w	8024f3e <_ZN3Run20SwitchChangeIntervalEh+0x13e>
    {
        switch(switch_state)
 8024e2a:	78fb      	ldrb	r3, [r7, #3]
 8024e2c:	3b01      	subs	r3, #1
 8024e2e:	2b0e      	cmp	r3, #14
 8024e30:	d87a      	bhi.n	8024f28 <_ZN3Run20SwitchChangeIntervalEh+0x128>
 8024e32:	a201      	add	r2, pc, #4	; (adr r2, 8024e38 <_ZN3Run20SwitchChangeIntervalEh+0x38>)
 8024e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024e38:	08024ed9 	.word	0x08024ed9
 8024e3c:	08024eed 	.word	0x08024eed
 8024e40:	08024f29 	.word	0x08024f29
 8024e44:	08024f29 	.word	0x08024f29
 8024e48:	08024f29 	.word	0x08024f29
 8024e4c:	08024f29 	.word	0x08024f29
 8024e50:	08024f01 	.word	0x08024f01
 8024e54:	08024f15 	.word	0x08024f15
 8024e58:	08024f29 	.word	0x08024f29
 8024e5c:	08024e75 	.word	0x08024e75
 8024e60:	08024e89 	.word	0x08024e89
 8024e64:	08024e9d 	.word	0x08024e9d
 8024e68:	08024eb1 	.word	0x08024eb1
 8024e6c:	08024f29 	.word	0x08024f29
 8024e70:	08024ec5 	.word	0x08024ec5
        {
#ifdef DEBUG_MODE
            case 0x0A: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 8024e74:	687b      	ldr	r3, [r7, #4]
 8024e76:	6958      	ldr	r0, [r3, #20]
 8024e78:	2342      	movs	r3, #66	; 0x42
 8024e7a:	2247      	movs	r2, #71	; 0x47
 8024e7c:	2103      	movs	r1, #3
 8024e7e:	f7fc fdfe 	bl	8021a7e <_ZN3Led14BlinkInterruptEhcc>
 8024e82:	4603      	mov	r3, r0
 8024e84:	737b      	strb	r3, [r7, #13]
 8024e86:	e06b      	b.n	8024f60 <_ZN3Run20SwitchChangeIntervalEh+0x160>
            case 0x0B: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 8024e88:	687b      	ldr	r3, [r7, #4]
 8024e8a:	6958      	ldr	r0, [r3, #20]
 8024e8c:	2359      	movs	r3, #89	; 0x59
 8024e8e:	2247      	movs	r2, #71	; 0x47
 8024e90:	2103      	movs	r1, #3
 8024e92:	f7fc fdf4 	bl	8021a7e <_ZN3Led14BlinkInterruptEhcc>
 8024e96:	4603      	mov	r3, r0
 8024e98:	737b      	strb	r3, [r7, #13]
 8024e9a:	e061      	b.n	8024f60 <_ZN3Run20SwitchChangeIntervalEh+0x160>
#endif // DEBUG_MODE

            case 0x0C: led_enable = led_->BlinkInterrupt(3, 'B', 'M'); break;
 8024e9c:	687b      	ldr	r3, [r7, #4]
 8024e9e:	6958      	ldr	r0, [r3, #20]
 8024ea0:	234d      	movs	r3, #77	; 0x4d
 8024ea2:	2242      	movs	r2, #66	; 0x42
 8024ea4:	2103      	movs	r1, #3
 8024ea6:	f7fc fdea 	bl	8021a7e <_ZN3Led14BlinkInterruptEhcc>
 8024eaa:	4603      	mov	r3, r0
 8024eac:	737b      	strb	r3, [r7, #13]
 8024eae:	e057      	b.n	8024f60 <_ZN3Run20SwitchChangeIntervalEh+0x160>
            case 0x0D: led_enable = led_->BlinkInterrupt(3, 'G', 'X'); break;
 8024eb0:	687b      	ldr	r3, [r7, #4]
 8024eb2:	6958      	ldr	r0, [r3, #20]
 8024eb4:	2358      	movs	r3, #88	; 0x58
 8024eb6:	2247      	movs	r2, #71	; 0x47
 8024eb8:	2103      	movs	r1, #3
 8024eba:	f7fc fde0 	bl	8021a7e <_ZN3Led14BlinkInterruptEhcc>
 8024ebe:	4603      	mov	r3, r0
 8024ec0:	737b      	strb	r3, [r7, #13]
 8024ec2:	e04d      	b.n	8024f60 <_ZN3Run20SwitchChangeIntervalEh+0x160>
            case 0x0F: led_enable = led_->BlinkInterrupt(3, 'Y', 'X'); break;
 8024ec4:	687b      	ldr	r3, [r7, #4]
 8024ec6:	6958      	ldr	r0, [r3, #20]
 8024ec8:	2358      	movs	r3, #88	; 0x58
 8024eca:	2259      	movs	r2, #89	; 0x59
 8024ecc:	2103      	movs	r1, #3
 8024ece:	f7fc fdd6 	bl	8021a7e <_ZN3Led14BlinkInterruptEhcc>
 8024ed2:	4603      	mov	r3, r0
 8024ed4:	737b      	strb	r3, [r7, #13]
 8024ed6:	e043      	b.n	8024f60 <_ZN3Run20SwitchChangeIntervalEh+0x160>
            case 0x01: led_enable = led_->BlinkInterrupt(3, 'B', 'X'); break;
 8024ed8:	687b      	ldr	r3, [r7, #4]
 8024eda:	6958      	ldr	r0, [r3, #20]
 8024edc:	2358      	movs	r3, #88	; 0x58
 8024ede:	2242      	movs	r2, #66	; 0x42
 8024ee0:	2103      	movs	r1, #3
 8024ee2:	f7fc fdcc 	bl	8021a7e <_ZN3Led14BlinkInterruptEhcc>
 8024ee6:	4603      	mov	r3, r0
 8024ee8:	737b      	strb	r3, [r7, #13]
 8024eea:	e039      	b.n	8024f60 <_ZN3Run20SwitchChangeIntervalEh+0x160>
            case 0x02: led_enable = led_->BlinkInterrupt(3, 'M', 'X'); break;
 8024eec:	687b      	ldr	r3, [r7, #4]
 8024eee:	6958      	ldr	r0, [r3, #20]
 8024ef0:	2358      	movs	r3, #88	; 0x58
 8024ef2:	224d      	movs	r2, #77	; 0x4d
 8024ef4:	2103      	movs	r1, #3
 8024ef6:	f7fc fdc2 	bl	8021a7e <_ZN3Led14BlinkInterruptEhcc>
 8024efa:	4603      	mov	r3, r0
 8024efc:	737b      	strb	r3, [r7, #13]
 8024efe:	e02f      	b.n	8024f60 <_ZN3Run20SwitchChangeIntervalEh+0x160>
            case 0x07: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 8024f00:	687b      	ldr	r3, [r7, #4]
 8024f02:	6958      	ldr	r0, [r3, #20]
 8024f04:	2342      	movs	r3, #66	; 0x42
 8024f06:	2247      	movs	r2, #71	; 0x47
 8024f08:	2103      	movs	r1, #3
 8024f0a:	f7fc fdb8 	bl	8021a7e <_ZN3Led14BlinkInterruptEhcc>
 8024f0e:	4603      	mov	r3, r0
 8024f10:	737b      	strb	r3, [r7, #13]
 8024f12:	e025      	b.n	8024f60 <_ZN3Run20SwitchChangeIntervalEh+0x160>
            case 0x08: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 8024f14:	687b      	ldr	r3, [r7, #4]
 8024f16:	6958      	ldr	r0, [r3, #20]
 8024f18:	2359      	movs	r3, #89	; 0x59
 8024f1a:	2247      	movs	r2, #71	; 0x47
 8024f1c:	2103      	movs	r1, #3
 8024f1e:	f7fc fdae 	bl	8021a7e <_ZN3Led14BlinkInterruptEhcc>
 8024f22:	4603      	mov	r3, r0
 8024f24:	737b      	strb	r3, [r7, #13]
 8024f26:	e01b      	b.n	8024f60 <_ZN3Run20SwitchChangeIntervalEh+0x160>
            default:   led_enable = led_->BlinkInterrupt(3, 'X', 'W'); break;
 8024f28:	687b      	ldr	r3, [r7, #4]
 8024f2a:	6958      	ldr	r0, [r3, #20]
 8024f2c:	2357      	movs	r3, #87	; 0x57
 8024f2e:	2258      	movs	r2, #88	; 0x58
 8024f30:	2103      	movs	r1, #3
 8024f32:	f7fc fda4 	bl	8021a7e <_ZN3Led14BlinkInterruptEhcc>
 8024f36:	4603      	mov	r3, r0
 8024f38:	737b      	strb	r3, [r7, #13]
 8024f3a:	bf00      	nop
 8024f3c:	e010      	b.n	8024f60 <_ZN3Run20SwitchChangeIntervalEh+0x160>
        }
    }
    else if(wait_enable)
 8024f3e:	7bbb      	ldrb	r3, [r7, #14]
 8024f40:	2b00      	cmp	r3, #0
 8024f42:	d00b      	beq.n	8024f5c <_ZN3Run20SwitchChangeIntervalEh+0x15c>
    {
        if(wait_timer < SWITCH_INTERVAL_WAIT_TIME)
 8024f44:	7bfb      	ldrb	r3, [r7, #15]
 8024f46:	2bc7      	cmp	r3, #199	; 0xc7
 8024f48:	d805      	bhi.n	8024f56 <_ZN3Run20SwitchChangeIntervalEh+0x156>
        {
            wait_timer++;
 8024f4a:	7bfb      	ldrb	r3, [r7, #15]
 8024f4c:	3301      	adds	r3, #1
 8024f4e:	73fb      	strb	r3, [r7, #15]
            wait_enable = true;
 8024f50:	2301      	movs	r3, #1
 8024f52:	73bb      	strb	r3, [r7, #14]
 8024f54:	e004      	b.n	8024f60 <_ZN3Run20SwitchChangeIntervalEh+0x160>
        }
        else wait_enable = false;
 8024f56:	2300      	movs	r3, #0
 8024f58:	73bb      	strb	r3, [r7, #14]
 8024f5a:	e001      	b.n	8024f60 <_ZN3Run20SwitchChangeIntervalEh+0x160>
    }
    else interval_continue = false;
 8024f5c:	2300      	movs	r3, #0
 8024f5e:	733b      	strb	r3, [r7, #12]
    
    switch_interval_led_enable_ = led_enable;
 8024f60:	687b      	ldr	r3, [r7, #4]
 8024f62:	7b7a      	ldrb	r2, [r7, #13]
 8024f64:	711a      	strb	r2, [r3, #4]
    switch_interval_wait_enable_ = wait_enable;
 8024f66:	687b      	ldr	r3, [r7, #4]
 8024f68:	7bba      	ldrb	r2, [r7, #14]
 8024f6a:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_timer_ = wait_timer;
 8024f6c:	687b      	ldr	r3, [r7, #4]
 8024f6e:	7bfa      	ldrb	r2, [r7, #15]
 8024f70:	709a      	strb	r2, [r3, #2]

    return interval_continue;
 8024f72:	7b3b      	ldrb	r3, [r7, #12]
}
 8024f74:	4618      	mov	r0, r3
 8024f76:	3710      	adds	r7, #16
 8024f78:	46bd      	mov	sp, r7
 8024f7a:	bd80      	pop	{r7, pc}

08024f7c <_ZN3Run13EmergencyStopEv>:

bool Run::EmergencyStop()
{
 8024f7c:	b580      	push	{r7, lr}
 8024f7e:	b084      	sub	sp, #16
 8024f80:	af00      	add	r7, sp, #0
 8024f82:	6078      	str	r0, [r7, #4]
    static uint8_t emergency_timer = 0;
    bool line_emergency = line_sensor_->GetEmergencyStopFlag();
 8024f84:	687b      	ldr	r3, [r7, #4]
 8024f86:	699b      	ldr	r3, [r3, #24]
 8024f88:	4618      	mov	r0, r3
 8024f8a:	f7fd f893 	bl	80220b4 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 8024f8e:	4603      	mov	r3, r0
 8024f90:	73fb      	strb	r3, [r7, #15]

    if(emergency_timer >= EMERGENCY_STOP_TIME)
 8024f92:	4b0e      	ldr	r3, [pc, #56]	; (8024fcc <_ZN3Run13EmergencyStopEv+0x50>)
 8024f94:	781b      	ldrb	r3, [r3, #0]
 8024f96:	2b04      	cmp	r3, #4
 8024f98:	d905      	bls.n	8024fa6 <_ZN3Run13EmergencyStopEv+0x2a>
    {
        SetRunMode(EMERGENCY);
 8024f9a:	210e      	movs	r1, #14
 8024f9c:	6878      	ldr	r0, [r7, #4]
 8024f9e:	f7ff fef1 	bl	8024d84 <_ZN3Run10SetRunModeEh>
        return true;
 8024fa2:	2301      	movs	r3, #1
 8024fa4:	e00d      	b.n	8024fc2 <_ZN3Run13EmergencyStopEv+0x46>
    }
    else if(line_emergency) emergency_timer++;
 8024fa6:	7bfb      	ldrb	r3, [r7, #15]
 8024fa8:	2b00      	cmp	r3, #0
 8024faa:	d006      	beq.n	8024fba <_ZN3Run13EmergencyStopEv+0x3e>
 8024fac:	4b07      	ldr	r3, [pc, #28]	; (8024fcc <_ZN3Run13EmergencyStopEv+0x50>)
 8024fae:	781b      	ldrb	r3, [r3, #0]
 8024fb0:	3301      	adds	r3, #1
 8024fb2:	b2da      	uxtb	r2, r3
 8024fb4:	4b05      	ldr	r3, [pc, #20]	; (8024fcc <_ZN3Run13EmergencyStopEv+0x50>)
 8024fb6:	701a      	strb	r2, [r3, #0]
 8024fb8:	e002      	b.n	8024fc0 <_ZN3Run13EmergencyStopEv+0x44>
    else emergency_timer = 0;
 8024fba:	4b04      	ldr	r3, [pc, #16]	; (8024fcc <_ZN3Run13EmergencyStopEv+0x50>)
 8024fbc:	2200      	movs	r2, #0
 8024fbe:	701a      	strb	r2, [r3, #0]

    return false;
 8024fc0:	2300      	movs	r3, #0
}
 8024fc2:	4618      	mov	r0, r3
 8024fc4:	3710      	adds	r7, #16
 8024fc6:	46bd      	mov	sp, r7
 8024fc8:	bd80      	pop	{r7, pc}
 8024fca:	bf00      	nop
 8024fcc:	20000358 	.word	0x20000358

08024fd0 <_ZN3Run7RunModeEv>:

void Run::RunMode()
{
 8024fd0:	b580      	push	{r7, lr}
 8024fd2:	b082      	sub	sp, #8
 8024fd4:	af00      	add	r7, sp, #0
 8024fd6:	6078      	str	r0, [r7, #4]
    switch(run_mode_)
 8024fd8:	687b      	ldr	r3, [r7, #4]
 8024fda:	781b      	ldrb	r3, [r3, #0]
 8024fdc:	2b0d      	cmp	r3, #13
 8024fde:	d031      	beq.n	8025044 <_ZN3Run7RunModeEv+0x74>
 8024fe0:	2b0d      	cmp	r3, #13
 8024fe2:	dc0f      	bgt.n	8025004 <_ZN3Run7RunModeEv+0x34>
 8024fe4:	2b02      	cmp	r3, #2
 8024fe6:	d041      	beq.n	802506c <_ZN3Run7RunModeEv+0x9c>
 8024fe8:	2b02      	cmp	r3, #2
 8024fea:	dc04      	bgt.n	8024ff6 <_ZN3Run7RunModeEv+0x26>
 8024fec:	2b00      	cmp	r3, #0
 8024fee:	d025      	beq.n	802503c <_ZN3Run7RunModeEv+0x6c>
 8024ff0:	2b01      	cmp	r3, #1
 8024ff2:	d033      	beq.n	802505c <_ZN3Run7RunModeEv+0x8c>
 8024ff4:	e04a      	b.n	802508c <_ZN3Run7RunModeEv+0xbc>
 8024ff6:	2b08      	cmp	r3, #8
 8024ff8:	d044      	beq.n	8025084 <_ZN3Run7RunModeEv+0xb4>
 8024ffa:	2b0b      	cmp	r3, #11
 8024ffc:	d012      	beq.n	8025024 <_ZN3Run7RunModeEv+0x54>
 8024ffe:	2b07      	cmp	r3, #7
 8025000:	d03c      	beq.n	802507c <_ZN3Run7RunModeEv+0xac>
 8025002:	e043      	b.n	802508c <_ZN3Run7RunModeEv+0xbc>
 8025004:	2b10      	cmp	r3, #16
 8025006:	d02d      	beq.n	8025064 <_ZN3Run7RunModeEv+0x94>
 8025008:	2b10      	cmp	r3, #16
 802500a:	dc04      	bgt.n	8025016 <_ZN3Run7RunModeEv+0x46>
 802500c:	2b0e      	cmp	r3, #14
 802500e:	d00d      	beq.n	802502c <_ZN3Run7RunModeEv+0x5c>
 8025010:	2b0f      	cmp	r3, #15
 8025012:	d00f      	beq.n	8025034 <_ZN3Run7RunModeEv+0x64>
 8025014:	e03a      	b.n	802508c <_ZN3Run7RunModeEv+0xbc>
 8025016:	2bd0      	cmp	r3, #208	; 0xd0
 8025018:	d01c      	beq.n	8025054 <_ZN3Run7RunModeEv+0x84>
 802501a:	2bdd      	cmp	r3, #221	; 0xdd
 802501c:	d016      	beq.n	802504c <_ZN3Run7RunModeEv+0x7c>
 802501e:	2b20      	cmp	r3, #32
 8025020:	d028      	beq.n	8025074 <_ZN3Run7RunModeEv+0xa4>
 8025022:	e033      	b.n	802508c <_ZN3Run7RunModeEv+0xbc>
    {
#ifdef DEBUG_MODE
        case VELOCITY_CONTROL_DEBUG: ModeVelocityControlDebug(); break;
 8025024:	6878      	ldr	r0, [r7, #4]
 8025026:	f000 fba7 	bl	8025778 <_ZN3Run24ModeVelocityControlDebugEv>
 802502a:	e033      	b.n	8025094 <_ZN3Run7RunModeEv+0xc4>
        //case LINE_TRACE_DEBUG: ModeLineTraceDebug(); break;
        //case LOG: ModeLog(); break;
#endif // DEBUG_MODE

        case EMERGENCY: ModeEmergency(); break;
 802502c:	6878      	ldr	r0, [r7, #4]
 802502e:	f000 f839 	bl	80250a4 <_ZN3Run13ModeEmergencyEv>
 8025032:	e02f      	b.n	8025094 <_ZN3Run7RunModeEv+0xc4>
        case READY: ModeReady(); break;
 8025034:	6878      	ldr	r0, [r7, #4]
 8025036:	f000 f85f 	bl	80250f8 <_ZN3Run9ModeReadyEv>
 802503a:	e02b      	b.n	8025094 <_ZN3Run7RunModeEv+0xc4>
        case STANDBY: ModeStandby(); break;
 802503c:	6878      	ldr	r0, [r7, #4]
 802503e:	f000 f87d 	bl	802513c <_ZN3Run11ModeStandbyEv>
 8025042:	e027      	b.n	8025094 <_ZN3Run7RunModeEv+0xc4>
        case DEV: ModeDevelopment(); break;
 8025044:	6878      	ldr	r0, [r7, #4]
 8025046:	f000 f88d 	bl	8025164 <_ZN3Run15ModeDevelopmentEv>
 802504a:	e023      	b.n	8025094 <_ZN3Run7RunModeEv+0xc4>
        case DEV_ACCEL: ModeDevAccel(); break;
 802504c:	6878      	ldr	r0, [r7, #4]
 802504e:	f000 f8d5 	bl	80251fc <_ZN3Run12ModeDevAccelEv>
 8025052:	e01f      	b.n	8025094 <_ZN3Run7RunModeEv+0xc4>
        case DEV_GOAL: ModeDevGoal(); break;
 8025054:	6878      	ldr	r0, [r7, #4]
 8025056:	f000 f9f3 	bl	8025440 <_ZN3Run11ModeDevGoalEv>
 802505a:	e01b      	b.n	8025094 <_ZN3Run7RunModeEv+0xc4>
        case FIRST_RUN: ModeFirstRun(); break;
 802505c:	6878      	ldr	r0, [r7, #4]
 802505e:	f000 fa09 	bl	8025474 <_ZN3Run12ModeFirstRunEv>
 8025062:	e017      	b.n	8025094 <_ZN3Run7RunModeEv+0xc4>
        case FIRST_GOAL: ModeFirstGoal(); break;
 8025064:	6878      	ldr	r0, [r7, #4]
 8025066:	f000 fa77 	bl	8025558 <_ZN3Run13ModeFirstGoalEv>
 802506a:	e013      	b.n	8025094 <_ZN3Run7RunModeEv+0xc4>
        case SECOND_RUN: ModeSecondRun(); break;
 802506c:	6878      	ldr	r0, [r7, #4]
 802506e:	f000 fa97 	bl	80255a0 <_ZN3Run13ModeSecondRunEv>
 8025072:	e00f      	b.n	8025094 <_ZN3Run7RunModeEv+0xc4>
        case SECOND_GOAL: ModeSecondGoal(); break;
 8025074:	6878      	ldr	r0, [r7, #4]
 8025076:	f000 fae7 	bl	8025648 <_ZN3Run14ModeSecondGoalEv>
 802507a:	e00b      	b.n	8025094 <_ZN3Run7RunModeEv+0xc4>
        case VELOCITY_CONTROL: ModeVelocityControl(); break;
 802507c:	6878      	ldr	r0, [r7, #4]
 802507e:	f000 fafd 	bl	802567c <_ZN3Run19ModeVelocityControlEv>
 8025082:	e007      	b.n	8025094 <_ZN3Run7RunModeEv+0xc4>
        case LINE_TRACE: ModeLineTrace(); break;
 8025084:	6878      	ldr	r0, [r7, #4]
 8025086:	f000 fb40 	bl	802570a <_ZN3Run13ModeLineTraceEv>
 802508a:	e003      	b.n	8025094 <_ZN3Run7RunModeEv+0xc4>
        default: ModeStandby(); break;
 802508c:	6878      	ldr	r0, [r7, #4]
 802508e:	f000 f855 	bl	802513c <_ZN3Run11ModeStandbyEv>
 8025092:	bf00      	nop
    }

    mode_complete_ = true;
 8025094:	687b      	ldr	r3, [r7, #4]
 8025096:	2201      	movs	r2, #1
 8025098:	715a      	strb	r2, [r3, #5]
}
 802509a:	bf00      	nop
 802509c:	3708      	adds	r7, #8
 802509e:	46bd      	mov	sp, r7
 80250a0:	bd80      	pop	{r7, pc}
	...

080250a4 <_ZN3Run13ModeEmergencyEv>:

void Run::ModeEmergency()
{
 80250a4:	b580      	push	{r7, lr}
 80250a6:	b084      	sub	sp, #16
 80250a8:	af00      	add	r7, sp, #0
 80250aa:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 80250ac:	687b      	ldr	r3, [r7, #4]
 80250ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80250b0:	eddf 0a10 	vldr	s1, [pc, #64]	; 80250f4 <_ZN3Run13ModeEmergencyEv+0x50>
 80250b4:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80250f4 <_ZN3Run13ModeEmergencyEv+0x50>
 80250b8:	4618      	mov	r0, r3
 80250ba:	f7ff faa5 	bl	8024608 <_ZN5Motor5DriveEff>

    bool result = logger2_->GetSuccessEmergencyCodeStore();
 80250be:	687b      	ldr	r3, [r7, #4]
 80250c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80250c2:	4618      	mov	r0, r3
 80250c4:	f7fe fad6 	bl	8023674 <_ZN7Logger228GetSuccessEmergencyCodeStoreEv>
 80250c8:	4603      	mov	r3, r0
 80250ca:	73fb      	strb	r3, [r7, #15]
    if(result) led_->ColorOrder('R');
 80250cc:	7bfb      	ldrb	r3, [r7, #15]
 80250ce:	2b00      	cmp	r3, #0
 80250d0:	d006      	beq.n	80250e0 <_ZN3Run13ModeEmergencyEv+0x3c>
 80250d2:	687b      	ldr	r3, [r7, #4]
 80250d4:	695b      	ldr	r3, [r3, #20]
 80250d6:	2152      	movs	r1, #82	; 0x52
 80250d8:	4618      	mov	r0, r3
 80250da:	f7fc fb83 	bl	80217e4 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('G');
}
 80250de:	e005      	b.n	80250ec <_ZN3Run13ModeEmergencyEv+0x48>
    else led_->ColorOrder('G');
 80250e0:	687b      	ldr	r3, [r7, #4]
 80250e2:	695b      	ldr	r3, [r3, #20]
 80250e4:	2147      	movs	r1, #71	; 0x47
 80250e6:	4618      	mov	r0, r3
 80250e8:	f7fc fb7c 	bl	80217e4 <_ZN3Led10ColorOrderEc>
}
 80250ec:	bf00      	nop
 80250ee:	3710      	adds	r7, #16
 80250f0:	46bd      	mov	sp, r7
 80250f2:	bd80      	pop	{r7, pc}
 80250f4:	00000000 	.word	0x00000000

080250f8 <_ZN3Run9ModeReadyEv>:

void Run::ModeReady()
{
 80250f8:	b580      	push	{r7, lr}
 80250fa:	b082      	sub	sp, #8
 80250fc:	af00      	add	r7, sp, #0
 80250fe:	6078      	str	r0, [r7, #4]
    line_sensor_->Update();
 8025100:	687b      	ldr	r3, [r7, #4]
 8025102:	699b      	ldr	r3, [r3, #24]
 8025104:	4618      	mov	r0, r3
 8025106:	f7fc fe97 	bl	8021e38 <_ZN10LineSensor6UpdateEv>
    if(line_sensor_->CheckCalibration()) led_->ColorOrder('X');
 802510a:	687b      	ldr	r3, [r7, #4]
 802510c:	699b      	ldr	r3, [r3, #24]
 802510e:	4618      	mov	r0, r3
 8025110:	f7fc ffde 	bl	80220d0 <_ZN10LineSensor16CheckCalibrationEv>
 8025114:	4603      	mov	r3, r0
 8025116:	2b00      	cmp	r3, #0
 8025118:	d006      	beq.n	8025128 <_ZN3Run9ModeReadyEv+0x30>
 802511a:	687b      	ldr	r3, [r7, #4]
 802511c:	695b      	ldr	r3, [r3, #20]
 802511e:	2158      	movs	r1, #88	; 0x58
 8025120:	4618      	mov	r0, r3
 8025122:	f7fc fb5f 	bl	80217e4 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('R');
}
 8025126:	e005      	b.n	8025134 <_ZN3Run9ModeReadyEv+0x3c>
    else led_->ColorOrder('R');
 8025128:	687b      	ldr	r3, [r7, #4]
 802512a:	695b      	ldr	r3, [r3, #20]
 802512c:	2152      	movs	r1, #82	; 0x52
 802512e:	4618      	mov	r0, r3
 8025130:	f7fc fb58 	bl	80217e4 <_ZN3Led10ColorOrderEc>
}
 8025134:	bf00      	nop
 8025136:	3708      	adds	r7, #8
 8025138:	46bd      	mov	sp, r7
 802513a:	bd80      	pop	{r7, pc}

0802513c <_ZN3Run11ModeStandbyEv>:

void Run::ModeStandby()
{
 802513c:	b580      	push	{r7, lr}
 802513e:	b082      	sub	sp, #8
 8025140:	af00      	add	r7, sp, #0
 8025142:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8025144:	687b      	ldr	r3, [r7, #4]
 8025146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025148:	eddf 0a05 	vldr	s1, [pc, #20]	; 8025160 <_ZN3Run11ModeStandbyEv+0x24>
 802514c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8025160 <_ZN3Run11ModeStandbyEv+0x24>
 8025150:	4618      	mov	r0, r3
 8025152:	f7ff fa59 	bl	8024608 <_ZN5Motor5DriveEff>
}
 8025156:	bf00      	nop
 8025158:	3708      	adds	r7, #8
 802515a:	46bd      	mov	sp, r7
 802515c:	bd80      	pop	{r7, pc}
 802515e:	bf00      	nop
 8025160:	00000000 	.word	0x00000000

08025164 <_ZN3Run15ModeDevelopmentEv>:
    motor_->Drive(trans_ratio, rotat_ratio);
}
*/

void Run::ModeDevelopment()
{
 8025164:	b580      	push	{r7, lr}
 8025166:	b086      	sub	sp, #24
 8025168:	af00      	add	r7, sp, #0
 802516a:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 802516c:	687b      	ldr	r3, [r7, #4]
 802516e:	689b      	ldr	r3, [r3, #8]
 8025170:	4618      	mov	r0, r3
 8025172:	f7fb fe69 	bl	8020e48 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 8025176:	687b      	ldr	r3, [r7, #4]
 8025178:	699b      	ldr	r3, [r3, #24]
 802517a:	4618      	mov	r0, r3
 802517c:	f7fc fe5c 	bl	8021e38 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 8025180:	687b      	ldr	r3, [r7, #4]
 8025182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025184:	4618      	mov	r0, r3
 8025186:	f000 fc7b 	bl	8025a80 <_ZN10SideSensor6UpdateEv>
    logger2_->Logging();
 802518a:	687b      	ldr	r3, [r7, #4]
 802518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802518e:	4618      	mov	r0, r3
 8025190:	f7fd ffbe 	bl	8023110 <_ZN7Logger27LoggingEv>
    /* Emergency stop */
    if(DevEmergencyStop()) return;
 8025194:	6878      	ldr	r0, [r7, #4]
 8025196:	f000 f87d 	bl	8025294 <_ZN3Run16DevEmergencyStopEv>
 802519a:	4603      	mov	r3, r0
 802519c:	2b00      	cmp	r3, #0
 802519e:	d129      	bne.n	80251f4 <_ZN3Run15ModeDevelopmentEv+0x90>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 80251a0:	687b      	ldr	r3, [r7, #4]
 80251a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80251a4:	4618      	mov	r0, r3
 80251a6:	f000 fe3a 	bl	8025e1e <_ZN10SideSensor18GetGoalMarkerCountEv>
 80251aa:	4603      	mov	r3, r0
 80251ac:	75fb      	strb	r3, [r7, #23]
    float target_velocity = DevTargetVelocity(goal_count);
 80251ae:	7dfb      	ldrb	r3, [r7, #23]
 80251b0:	4619      	mov	r1, r3
 80251b2:	6878      	ldr	r0, [r7, #4]
 80251b4:	f000 f8b0 	bl	8025318 <_ZN3Run17DevTargetVelocityEh>
 80251b8:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 80251bc:	687b      	ldr	r3, [r7, #4]
 80251be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80251c0:	ed97 0a04 	vldr	s0, [r7, #16]
 80251c4:	4618      	mov	r0, r3
 80251c6:	f001 fbbc 	bl	8026942 <_ZN15VelocityControl16DeterminePidGainEf>
 80251ca:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 80251ce:	687b      	ldr	r3, [r7, #4]
 80251d0:	69db      	ldr	r3, [r3, #28]
 80251d2:	ed97 0a04 	vldr	s0, [r7, #16]
 80251d6:	4618      	mov	r0, r3
 80251d8:	f7fd f808 	bl	80221ec <_ZN9LineTrace16DeterminePidGainEf>
 80251dc:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 80251e0:	687b      	ldr	r3, [r7, #4]
 80251e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80251e4:	edd7 0a02 	vldr	s1, [r7, #8]
 80251e8:	ed97 0a03 	vldr	s0, [r7, #12]
 80251ec:	4618      	mov	r0, r3
 80251ee:	f7ff fa0b 	bl	8024608 <_ZN5Motor5DriveEff>
 80251f2:	e000      	b.n	80251f6 <_ZN3Run15ModeDevelopmentEv+0x92>
    if(DevEmergencyStop()) return;
 80251f4:	bf00      	nop
}
 80251f6:	3718      	adds	r7, #24
 80251f8:	46bd      	mov	sp, r7
 80251fa:	bd80      	pop	{r7, pc}

080251fc <_ZN3Run12ModeDevAccelEv>:

void Run::ModeDevAccel()
{
 80251fc:	b580      	push	{r7, lr}
 80251fe:	b086      	sub	sp, #24
 8025200:	af00      	add	r7, sp, #0
 8025202:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 8025204:	687b      	ldr	r3, [r7, #4]
 8025206:	689b      	ldr	r3, [r3, #8]
 8025208:	4618      	mov	r0, r3
 802520a:	f7fb fe1d 	bl	8020e48 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 802520e:	687b      	ldr	r3, [r7, #4]
 8025210:	699b      	ldr	r3, [r3, #24]
 8025212:	4618      	mov	r0, r3
 8025214:	f7fc fe10 	bl	8021e38 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 8025218:	687b      	ldr	r3, [r7, #4]
 802521a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802521c:	4618      	mov	r0, r3
 802521e:	f000 fc2f 	bl	8025a80 <_ZN10SideSensor6UpdateEv>
    logger2_->Loading();
 8025222:	687b      	ldr	r3, [r7, #4]
 8025224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025226:	4618      	mov	r0, r3
 8025228:	f7fe fb04 	bl	8023834 <_ZN7Logger27LoadingEv>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 802522c:	687b      	ldr	r3, [r7, #4]
 802522e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025230:	4618      	mov	r0, r3
 8025232:	f000 fdf4 	bl	8025e1e <_ZN10SideSensor18GetGoalMarkerCountEv>
 8025236:	4603      	mov	r3, r0
 8025238:	75fb      	strb	r3, [r7, #23]
    float target_velocity = DevAccelTarget(goal_count);
 802523a:	7dfb      	ldrb	r3, [r7, #23]
 802523c:	4619      	mov	r1, r3
 802523e:	6878      	ldr	r0, [r7, #4]
 8025240:	f000 f8b0 	bl	80253a4 <_ZN3Run14DevAccelTargetEh>
 8025244:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8025248:	687b      	ldr	r3, [r7, #4]
 802524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802524c:	ed97 0a04 	vldr	s0, [r7, #16]
 8025250:	4618      	mov	r0, r3
 8025252:	f001 fb76 	bl	8026942 <_ZN15VelocityControl16DeterminePidGainEf>
 8025256:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 802525a:	687b      	ldr	r3, [r7, #4]
 802525c:	69db      	ldr	r3, [r3, #28]
 802525e:	ed97 0a04 	vldr	s0, [r7, #16]
 8025262:	4618      	mov	r0, r3
 8025264:	f7fc ffc2 	bl	80221ec <_ZN9LineTrace16DeterminePidGainEf>
 8025268:	ed87 0a02 	vstr	s0, [r7, #8]
    /* Emergency stop */
    if(DevEmergencyStop()) return;
 802526c:	6878      	ldr	r0, [r7, #4]
 802526e:	f000 f811 	bl	8025294 <_ZN3Run16DevEmergencyStopEv>
 8025272:	4603      	mov	r3, r0
 8025274:	2b00      	cmp	r3, #0
 8025276:	d109      	bne.n	802528c <_ZN3Run12ModeDevAccelEv+0x90>
    motor_->Drive(trans_ratio, rotat_ratio);
 8025278:	687b      	ldr	r3, [r7, #4]
 802527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802527c:	edd7 0a02 	vldr	s1, [r7, #8]
 8025280:	ed97 0a03 	vldr	s0, [r7, #12]
 8025284:	4618      	mov	r0, r3
 8025286:	f7ff f9bf 	bl	8024608 <_ZN5Motor5DriveEff>
 802528a:	e000      	b.n	802528e <_ZN3Run12ModeDevAccelEv+0x92>
    if(DevEmergencyStop()) return;
 802528c:	bf00      	nop
}
 802528e:	3718      	adds	r7, #24
 8025290:	46bd      	mov	sp, r7
 8025292:	bd80      	pop	{r7, pc}

08025294 <_ZN3Run16DevEmergencyStopEv>:

bool Run::DevEmergencyStop()
{
 8025294:	b580      	push	{r7, lr}
 8025296:	b084      	sub	sp, #16
 8025298:	af00      	add	r7, sp, #0
 802529a:	6078      	str	r0, [r7, #4]
    static uint8_t emergency_timer = 0;
    bool line_emergency = line_sensor_->GetEmergencyStopFlag();
 802529c:	687b      	ldr	r3, [r7, #4]
 802529e:	699b      	ldr	r3, [r3, #24]
 80252a0:	4618      	mov	r0, r3
 80252a2:	f7fc ff07 	bl	80220b4 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 80252a6:	4603      	mov	r3, r0
 80252a8:	73fb      	strb	r3, [r7, #15]
    bool logging_emergency = logger2_->GetEmergencyStopFlag();
 80252aa:	687b      	ldr	r3, [r7, #4]
 80252ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80252ae:	4618      	mov	r0, r3
 80252b0:	f7fe f9c5 	bl	802363e <_ZN7Logger220GetEmergencyStopFlagEv>
 80252b4:	4603      	mov	r3, r0
 80252b6:	73bb      	strb	r3, [r7, #14]

    if(logging_emergency)
 80252b8:	7bbb      	ldrb	r3, [r7, #14]
 80252ba:	2b00      	cmp	r3, #0
 80252bc:	d009      	beq.n	80252d2 <_ZN3Run16DevEmergencyStopEv+0x3e>
    {
        SetRunMode(EMERGENCY);
 80252be:	210e      	movs	r1, #14
 80252c0:	6878      	ldr	r0, [r7, #4]
 80252c2:	f7ff fd5f 	bl	8024d84 <_ZN3Run10SetRunModeEh>
        SetRunModeChangedInternal(true);
 80252c6:	2101      	movs	r1, #1
 80252c8:	6878      	ldr	r0, [r7, #4]
 80252ca:	f7ff fd6b 	bl	8024da4 <_ZN3Run25SetRunModeChangedInternalEb>
        return true;
 80252ce:	2301      	movs	r3, #1
 80252d0:	e01b      	b.n	802530a <_ZN3Run16DevEmergencyStopEv+0x76>
    }

    if(line_emergency)
 80252d2:	7bfb      	ldrb	r3, [r7, #15]
 80252d4:	2b00      	cmp	r3, #0
 80252d6:	d014      	beq.n	8025302 <_ZN3Run16DevEmergencyStopEv+0x6e>
    {
        if(emergency_timer >= EMERGENCY_STOP_TIME)
 80252d8:	4b0e      	ldr	r3, [pc, #56]	; (8025314 <_ZN3Run16DevEmergencyStopEv+0x80>)
 80252da:	781b      	ldrb	r3, [r3, #0]
 80252dc:	2b04      	cmp	r3, #4
 80252de:	d909      	bls.n	80252f4 <_ZN3Run16DevEmergencyStopEv+0x60>
        {
            SetRunMode(EMERGENCY);
 80252e0:	210e      	movs	r1, #14
 80252e2:	6878      	ldr	r0, [r7, #4]
 80252e4:	f7ff fd4e 	bl	8024d84 <_ZN3Run10SetRunModeEh>
            SetRunModeChangedInternal(true);
 80252e8:	2101      	movs	r1, #1
 80252ea:	6878      	ldr	r0, [r7, #4]
 80252ec:	f7ff fd5a 	bl	8024da4 <_ZN3Run25SetRunModeChangedInternalEb>
            return true;
 80252f0:	2301      	movs	r3, #1
 80252f2:	e00a      	b.n	802530a <_ZN3Run16DevEmergencyStopEv+0x76>
        }
        else emergency_timer++;
 80252f4:	4b07      	ldr	r3, [pc, #28]	; (8025314 <_ZN3Run16DevEmergencyStopEv+0x80>)
 80252f6:	781b      	ldrb	r3, [r3, #0]
 80252f8:	3301      	adds	r3, #1
 80252fa:	b2da      	uxtb	r2, r3
 80252fc:	4b05      	ldr	r3, [pc, #20]	; (8025314 <_ZN3Run16DevEmergencyStopEv+0x80>)
 80252fe:	701a      	strb	r2, [r3, #0]
 8025300:	e002      	b.n	8025308 <_ZN3Run16DevEmergencyStopEv+0x74>
    }
    else emergency_timer = 0;
 8025302:	4b04      	ldr	r3, [pc, #16]	; (8025314 <_ZN3Run16DevEmergencyStopEv+0x80>)
 8025304:	2200      	movs	r2, #0
 8025306:	701a      	strb	r2, [r3, #0]

    return false;
 8025308:	2300      	movs	r3, #0
}
 802530a:	4618      	mov	r0, r3
 802530c:	3710      	adds	r7, #16
 802530e:	46bd      	mov	sp, r7
 8025310:	bd80      	pop	{r7, pc}
 8025312:	bf00      	nop
 8025314:	20000359 	.word	0x20000359

08025318 <_ZN3Run17DevTargetVelocityEh>:

float Run::DevTargetVelocity(uint8_t goal_count)
{
 8025318:	b580      	push	{r7, lr}
 802531a:	b084      	sub	sp, #16
 802531c:	af00      	add	r7, sp, #0
 802531e:	6078      	str	r0, [r7, #4]
 8025320:	460b      	mov	r3, r1
 8025322:	70fb      	strb	r3, [r7, #3]
    static uint16_t slow_timer = 0;
    static uint16_t stop_timer = 0;
    float target_velocity;

    switch(goal_count)
 8025324:	78fb      	ldrb	r3, [r7, #3]
 8025326:	3300      	adds	r3, #0
 8025328:	2b01      	cmp	r3, #1
 802532a:	d802      	bhi.n	8025332 <_ZN3Run17DevTargetVelocityEh+0x1a>
    {
        case 0:
        case 1: target_velocity = EXPLORE_VELOCITY; break;
 802532c:	4b19      	ldr	r3, [pc, #100]	; (8025394 <_ZN3Run17DevTargetVelocityEh+0x7c>)
 802532e:	60fb      	str	r3, [r7, #12]
 8025330:	e027      	b.n	8025382 <_ZN3Run17DevTargetVelocityEh+0x6a>
        default:

            if(slow_timer < SLOW_DRIVE_TIME)
 8025332:	4b19      	ldr	r3, [pc, #100]	; (8025398 <_ZN3Run17DevTargetVelocityEh+0x80>)
 8025334:	881b      	ldrh	r3, [r3, #0]
 8025336:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 802533a:	d208      	bcs.n	802534e <_ZN3Run17DevTargetVelocityEh+0x36>
            {
                slow_timer++;
 802533c:	4b16      	ldr	r3, [pc, #88]	; (8025398 <_ZN3Run17DevTargetVelocityEh+0x80>)
 802533e:	881b      	ldrh	r3, [r3, #0]
 8025340:	3301      	adds	r3, #1
 8025342:	b29a      	uxth	r2, r3
 8025344:	4b14      	ldr	r3, [pc, #80]	; (8025398 <_ZN3Run17DevTargetVelocityEh+0x80>)
 8025346:	801a      	strh	r2, [r3, #0]
                target_velocity = SLOW_DRIVE_VELOCITY;
 8025348:	4b14      	ldr	r3, [pc, #80]	; (802539c <_ZN3Run17DevTargetVelocityEh+0x84>)
 802534a:	60fb      	str	r3, [r7, #12]
                    SetRunMode(DEV_GOAL);
                    SetRunModeChangedInternal(true);
                    target_velocity = 0;
                }
            }
            break;
 802534c:	e018      	b.n	8025380 <_ZN3Run17DevTargetVelocityEh+0x68>
                if(stop_timer < STOP_TIME)
 802534e:	4b14      	ldr	r3, [pc, #80]	; (80253a0 <_ZN3Run17DevTargetVelocityEh+0x88>)
 8025350:	881b      	ldrh	r3, [r3, #0]
 8025352:	2bc7      	cmp	r3, #199	; 0xc7
 8025354:	d809      	bhi.n	802536a <_ZN3Run17DevTargetVelocityEh+0x52>
                    stop_timer++;
 8025356:	4b12      	ldr	r3, [pc, #72]	; (80253a0 <_ZN3Run17DevTargetVelocityEh+0x88>)
 8025358:	881b      	ldrh	r3, [r3, #0]
 802535a:	3301      	adds	r3, #1
 802535c:	b29a      	uxth	r2, r3
 802535e:	4b10      	ldr	r3, [pc, #64]	; (80253a0 <_ZN3Run17DevTargetVelocityEh+0x88>)
 8025360:	801a      	strh	r2, [r3, #0]
                    target_velocity = 0;
 8025362:	f04f 0300 	mov.w	r3, #0
 8025366:	60fb      	str	r3, [r7, #12]
            break;
 8025368:	e00a      	b.n	8025380 <_ZN3Run17DevTargetVelocityEh+0x68>
                    SetRunMode(DEV_GOAL);
 802536a:	21d0      	movs	r1, #208	; 0xd0
 802536c:	6878      	ldr	r0, [r7, #4]
 802536e:	f7ff fd09 	bl	8024d84 <_ZN3Run10SetRunModeEh>
                    SetRunModeChangedInternal(true);
 8025372:	2101      	movs	r1, #1
 8025374:	6878      	ldr	r0, [r7, #4]
 8025376:	f7ff fd15 	bl	8024da4 <_ZN3Run25SetRunModeChangedInternalEb>
                    target_velocity = 0;
 802537a:	f04f 0300 	mov.w	r3, #0
 802537e:	60fb      	str	r3, [r7, #12]
            break;
 8025380:	bf00      	nop
    }

    return target_velocity;
 8025382:	68fb      	ldr	r3, [r7, #12]
 8025384:	ee07 3a90 	vmov	s15, r3
}
 8025388:	eeb0 0a67 	vmov.f32	s0, s15
 802538c:	3710      	adds	r7, #16
 802538e:	46bd      	mov	sp, r7
 8025390:	bd80      	pop	{r7, pc}
 8025392:	bf00      	nop
 8025394:	3f19999a 	.word	0x3f19999a
 8025398:	2000035a 	.word	0x2000035a
 802539c:	3dcccccd 	.word	0x3dcccccd
 80253a0:	2000035c 	.word	0x2000035c

080253a4 <_ZN3Run14DevAccelTargetEh>:

float Run::DevAccelTarget(uint8_t goal_count)
{
 80253a4:	b580      	push	{r7, lr}
 80253a6:	b084      	sub	sp, #16
 80253a8:	af00      	add	r7, sp, #0
 80253aa:	6078      	str	r0, [r7, #4]
 80253ac:	460b      	mov	r3, r1
 80253ae:	70fb      	strb	r3, [r7, #3]
    static uint16_t slow_timer = 0;
    static uint16_t stop_timer = 0;
    float target_velocity;

    switch(goal_count)
 80253b0:	78fb      	ldrb	r3, [r7, #3]
 80253b2:	2b00      	cmp	r3, #0
 80253b4:	d002      	beq.n	80253bc <_ZN3Run14DevAccelTargetEh+0x18>
 80253b6:	2b01      	cmp	r3, #1
 80253b8:	d004      	beq.n	80253c4 <_ZN3Run14DevAccelTargetEh+0x20>
 80253ba:	e00b      	b.n	80253d4 <_ZN3Run14DevAccelTargetEh+0x30>
    {
        case 0: target_velocity = MIN_VELOCITY; break;
 80253bc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80253c0:	60fb      	str	r3, [r7, #12]
 80253c2:	e02f      	b.n	8025424 <_ZN3Run14DevAccelTargetEh+0x80>
        case 1:
            target_velocity = logger2_->GetTargetVelocity();
 80253c4:	687b      	ldr	r3, [r7, #4]
 80253c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80253c8:	4618      	mov	r0, r3
 80253ca:	f7fe fa75 	bl	80238b8 <_ZN7Logger217GetTargetVelocityEv>
 80253ce:	ed87 0a03 	vstr	s0, [r7, #12]
            break;
 80253d2:	e027      	b.n	8025424 <_ZN3Run14DevAccelTargetEh+0x80>
        default:

            if(slow_timer < SLOW_DRIVE_TIME)
 80253d4:	4b17      	ldr	r3, [pc, #92]	; (8025434 <_ZN3Run14DevAccelTargetEh+0x90>)
 80253d6:	881b      	ldrh	r3, [r3, #0]
 80253d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80253dc:	d208      	bcs.n	80253f0 <_ZN3Run14DevAccelTargetEh+0x4c>
            {
                slow_timer++;
 80253de:	4b15      	ldr	r3, [pc, #84]	; (8025434 <_ZN3Run14DevAccelTargetEh+0x90>)
 80253e0:	881b      	ldrh	r3, [r3, #0]
 80253e2:	3301      	adds	r3, #1
 80253e4:	b29a      	uxth	r2, r3
 80253e6:	4b13      	ldr	r3, [pc, #76]	; (8025434 <_ZN3Run14DevAccelTargetEh+0x90>)
 80253e8:	801a      	strh	r2, [r3, #0]
                target_velocity = SLOW_DRIVE_VELOCITY;
 80253ea:	4b13      	ldr	r3, [pc, #76]	; (8025438 <_ZN3Run14DevAccelTargetEh+0x94>)
 80253ec:	60fb      	str	r3, [r7, #12]
                    SetRunMode(DEV_GOAL);
                    SetRunModeChangedInternal(true);
                    target_velocity = 0;
                }
            }
            break;
 80253ee:	e018      	b.n	8025422 <_ZN3Run14DevAccelTargetEh+0x7e>
                if(stop_timer < STOP_TIME)
 80253f0:	4b12      	ldr	r3, [pc, #72]	; (802543c <_ZN3Run14DevAccelTargetEh+0x98>)
 80253f2:	881b      	ldrh	r3, [r3, #0]
 80253f4:	2bc7      	cmp	r3, #199	; 0xc7
 80253f6:	d809      	bhi.n	802540c <_ZN3Run14DevAccelTargetEh+0x68>
                    stop_timer++;
 80253f8:	4b10      	ldr	r3, [pc, #64]	; (802543c <_ZN3Run14DevAccelTargetEh+0x98>)
 80253fa:	881b      	ldrh	r3, [r3, #0]
 80253fc:	3301      	adds	r3, #1
 80253fe:	b29a      	uxth	r2, r3
 8025400:	4b0e      	ldr	r3, [pc, #56]	; (802543c <_ZN3Run14DevAccelTargetEh+0x98>)
 8025402:	801a      	strh	r2, [r3, #0]
                    target_velocity = 0;
 8025404:	f04f 0300 	mov.w	r3, #0
 8025408:	60fb      	str	r3, [r7, #12]
            break;
 802540a:	e00a      	b.n	8025422 <_ZN3Run14DevAccelTargetEh+0x7e>
                    SetRunMode(DEV_GOAL);
 802540c:	21d0      	movs	r1, #208	; 0xd0
 802540e:	6878      	ldr	r0, [r7, #4]
 8025410:	f7ff fcb8 	bl	8024d84 <_ZN3Run10SetRunModeEh>
                    SetRunModeChangedInternal(true);
 8025414:	2101      	movs	r1, #1
 8025416:	6878      	ldr	r0, [r7, #4]
 8025418:	f7ff fcc4 	bl	8024da4 <_ZN3Run25SetRunModeChangedInternalEb>
                    target_velocity = 0;
 802541c:	f04f 0300 	mov.w	r3, #0
 8025420:	60fb      	str	r3, [r7, #12]
            break;
 8025422:	bf00      	nop
    }

    return target_velocity;
 8025424:	68fb      	ldr	r3, [r7, #12]
 8025426:	ee07 3a90 	vmov	s15, r3
}
 802542a:	eeb0 0a67 	vmov.f32	s0, s15
 802542e:	3710      	adds	r7, #16
 8025430:	46bd      	mov	sp, r7
 8025432:	bd80      	pop	{r7, pc}
 8025434:	2000035e 	.word	0x2000035e
 8025438:	3dcccccd 	.word	0x3dcccccd
 802543c:	20000360 	.word	0x20000360

08025440 <_ZN3Run11ModeDevGoalEv>:

void Run::ModeDevGoal()
{
 8025440:	b580      	push	{r7, lr}
 8025442:	b082      	sub	sp, #8
 8025444:	af00      	add	r7, sp, #0
 8025446:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8025448:	687b      	ldr	r3, [r7, #4]
 802544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802544c:	eddf 0a08 	vldr	s1, [pc, #32]	; 8025470 <_ZN3Run11ModeDevGoalEv+0x30>
 8025450:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8025470 <_ZN3Run11ModeDevGoalEv+0x30>
 8025454:	4618      	mov	r0, r3
 8025456:	f7ff f8d7 	bl	8024608 <_ZN5Motor5DriveEff>
    led_->ColorOrder('M');
 802545a:	687b      	ldr	r3, [r7, #4]
 802545c:	695b      	ldr	r3, [r3, #20]
 802545e:	214d      	movs	r1, #77	; 0x4d
 8025460:	4618      	mov	r0, r3
 8025462:	f7fc f9bf 	bl	80217e4 <_ZN3Led10ColorOrderEc>
}
 8025466:	bf00      	nop
 8025468:	3708      	adds	r7, #8
 802546a:	46bd      	mov	sp, r7
 802546c:	bd80      	pop	{r7, pc}
 802546e:	bf00      	nop
 8025470:	00000000 	.word	0x00000000

08025474 <_ZN3Run12ModeFirstRunEv>:

void Run::ModeFirstRun()
{
 8025474:	b580      	push	{r7, lr}
 8025476:	b086      	sub	sp, #24
 8025478:	af00      	add	r7, sp, #0
 802547a:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 802547c:	687b      	ldr	r3, [r7, #4]
 802547e:	699b      	ldr	r3, [r3, #24]
 8025480:	4618      	mov	r0, r3
 8025482:	f7fc fcd9 	bl	8021e38 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8025486:	687b      	ldr	r3, [r7, #4]
 8025488:	689b      	ldr	r3, [r3, #8]
 802548a:	4618      	mov	r0, r3
 802548c:	f7fb fcdc 	bl	8020e48 <_ZN7Encoder6UpdateEv>
    iim_42652_->Update();
 8025490:	687b      	ldr	r3, [r7, #4]
 8025492:	691b      	ldr	r3, [r3, #16]
 8025494:	4618      	mov	r0, r3
 8025496:	f7fc f91b 	bl	80216d0 <_ZN8Iim426526UpdateEv>
    side_sensor_->Update();
 802549a:	687b      	ldr	r3, [r7, #4]
 802549c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802549e:	4618      	mov	r0, r3
 80254a0:	f000 faee 	bl	8025a80 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 80254a4:	6878      	ldr	r0, [r7, #4]
 80254a6:	f7ff fd69 	bl	8024f7c <_ZN3Run13EmergencyStopEv>
 80254aa:	4603      	mov	r3, r0
 80254ac:	2b00      	cmp	r3, #0
 80254ae:	d14e      	bne.n	802554e <_ZN3Run12ModeFirstRunEv+0xda>
    /* Logging */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 80254b0:	687b      	ldr	r3, [r7, #4]
 80254b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80254b4:	4618      	mov	r0, r3
 80254b6:	f000 fcb2 	bl	8025e1e <_ZN10SideSensor18GetGoalMarkerCountEv>
 80254ba:	4603      	mov	r3, r0
 80254bc:	75fb      	strb	r3, [r7, #23]
    if(goal_count == 1) logger_->Logging(mode_complete_);
 80254be:	7dfb      	ldrb	r3, [r7, #23]
 80254c0:	2b01      	cmp	r3, #1
 80254c2:	d107      	bne.n	80254d4 <_ZN3Run12ModeFirstRunEv+0x60>
 80254c4:	687b      	ldr	r3, [r7, #4]
 80254c6:	6a1a      	ldr	r2, [r3, #32]
 80254c8:	687b      	ldr	r3, [r7, #4]
 80254ca:	795b      	ldrb	r3, [r3, #5]
 80254cc:	4619      	mov	r1, r3
 80254ce:	4610      	mov	r0, r2
 80254d0:	f7fc ffd2 	bl	8022478 <_ZN6Logger7LoggingEh>
    mode_complete_ = false;
 80254d4:	687b      	ldr	r3, [r7, #4]
 80254d6:	2200      	movs	r2, #0
 80254d8:	715a      	strb	r2, [r3, #5]
    uint8_t period_success = logger_->StorePeriodicLog();
 80254da:	687b      	ldr	r3, [r7, #4]
 80254dc:	6a1b      	ldr	r3, [r3, #32]
 80254de:	4618      	mov	r0, r3
 80254e0:	f7fd f9e0 	bl	80228a4 <_ZN6Logger16StorePeriodicLogEv>
 80254e4:	4603      	mov	r3, r0
 80254e6:	75bb      	strb	r3, [r7, #22]
    uint8_t accel_success = logger_->StoreAccelPositionLog();
 80254e8:	687b      	ldr	r3, [r7, #4]
 80254ea:	6a1b      	ldr	r3, [r3, #32]
 80254ec:	4618      	mov	r0, r3
 80254ee:	f7fd fa77 	bl	80229e0 <_ZN6Logger21StoreAccelPositionLogEv>
 80254f2:	4603      	mov	r3, r0
 80254f4:	757b      	strb	r3, [r7, #21]
    if(period_success != 0 || !accel_success != 0) store_log_failed_ = true;
 80254f6:	7dbb      	ldrb	r3, [r7, #22]
 80254f8:	2b00      	cmp	r3, #0
 80254fa:	d102      	bne.n	8025502 <_ZN3Run12ModeFirstRunEv+0x8e>
 80254fc:	7d7b      	ldrb	r3, [r7, #21]
 80254fe:	2b00      	cmp	r3, #0
 8025500:	d102      	bne.n	8025508 <_ZN3Run12ModeFirstRunEv+0x94>
 8025502:	687b      	ldr	r3, [r7, #4]
 8025504:	2201      	movs	r2, #1
 8025506:	719a      	strb	r2, [r3, #6]
    /* Motor control */
    float target_velocity = FirstTargetVelocity(goal_count);
 8025508:	7dfb      	ldrb	r3, [r7, #23]
 802550a:	4619      	mov	r1, r3
 802550c:	6878      	ldr	r0, [r7, #4]
 802550e:	f000 f95d 	bl	80257cc <_ZN3Run19FirstTargetVelocityEh>
 8025512:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8025516:	687b      	ldr	r3, [r7, #4]
 8025518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802551a:	ed97 0a04 	vldr	s0, [r7, #16]
 802551e:	4618      	mov	r0, r3
 8025520:	f001 fa0f 	bl	8026942 <_ZN15VelocityControl16DeterminePidGainEf>
 8025524:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8025528:	687b      	ldr	r3, [r7, #4]
 802552a:	69db      	ldr	r3, [r3, #28]
 802552c:	ed97 0a04 	vldr	s0, [r7, #16]
 8025530:	4618      	mov	r0, r3
 8025532:	f7fc fe5b 	bl	80221ec <_ZN9LineTrace16DeterminePidGainEf>
 8025536:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 802553a:	687b      	ldr	r3, [r7, #4]
 802553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802553e:	edd7 0a02 	vldr	s1, [r7, #8]
 8025542:	ed97 0a03 	vldr	s0, [r7, #12]
 8025546:	4618      	mov	r0, r3
 8025548:	f7ff f85e 	bl	8024608 <_ZN5Motor5DriveEff>
 802554c:	e000      	b.n	8025550 <_ZN3Run12ModeFirstRunEv+0xdc>
    if(EmergencyStop()) return;
 802554e:	bf00      	nop
}
 8025550:	3718      	adds	r7, #24
 8025552:	46bd      	mov	sp, r7
 8025554:	bd80      	pop	{r7, pc}
	...

08025558 <_ZN3Run13ModeFirstGoalEv>:

void Run::ModeFirstGoal()
{
 8025558:	b580      	push	{r7, lr}
 802555a:	b082      	sub	sp, #8
 802555c:	af00      	add	r7, sp, #0
 802555e:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8025560:	687b      	ldr	r3, [r7, #4]
 8025562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025564:	eddf 0a0d 	vldr	s1, [pc, #52]	; 802559c <_ZN3Run13ModeFirstGoalEv+0x44>
 8025568:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 802559c <_ZN3Run13ModeFirstGoalEv+0x44>
 802556c:	4618      	mov	r0, r3
 802556e:	f7ff f84b 	bl	8024608 <_ZN5Motor5DriveEff>
    if(store_log_failed_) led_->ColorOrder('R');
 8025572:	687b      	ldr	r3, [r7, #4]
 8025574:	799b      	ldrb	r3, [r3, #6]
 8025576:	2b00      	cmp	r3, #0
 8025578:	d006      	beq.n	8025588 <_ZN3Run13ModeFirstGoalEv+0x30>
 802557a:	687b      	ldr	r3, [r7, #4]
 802557c:	695b      	ldr	r3, [r3, #20]
 802557e:	2152      	movs	r1, #82	; 0x52
 8025580:	4618      	mov	r0, r3
 8025582:	f7fc f92f 	bl	80217e4 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('B');
}
 8025586:	e005      	b.n	8025594 <_ZN3Run13ModeFirstGoalEv+0x3c>
    else led_->ColorOrder('B');
 8025588:	687b      	ldr	r3, [r7, #4]
 802558a:	695b      	ldr	r3, [r3, #20]
 802558c:	2142      	movs	r1, #66	; 0x42
 802558e:	4618      	mov	r0, r3
 8025590:	f7fc f928 	bl	80217e4 <_ZN3Led10ColorOrderEc>
}
 8025594:	bf00      	nop
 8025596:	3708      	adds	r7, #8
 8025598:	46bd      	mov	sp, r7
 802559a:	bd80      	pop	{r7, pc}
 802559c:	00000000 	.word	0x00000000

080255a0 <_ZN3Run13ModeSecondRunEv>:

void Run::ModeSecondRun()
{
 80255a0:	b580      	push	{r7, lr}
 80255a2:	b086      	sub	sp, #24
 80255a4:	af00      	add	r7, sp, #0
 80255a6:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 80255a8:	687b      	ldr	r3, [r7, #4]
 80255aa:	699b      	ldr	r3, [r3, #24]
 80255ac:	4618      	mov	r0, r3
 80255ae:	f7fc fc43 	bl	8021e38 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 80255b2:	687b      	ldr	r3, [r7, #4]
 80255b4:	689b      	ldr	r3, [r3, #8]
 80255b6:	4618      	mov	r0, r3
 80255b8:	f7fb fc46 	bl	8020e48 <_ZN7Encoder6UpdateEv>
    iim_42652_->Update();
 80255bc:	687b      	ldr	r3, [r7, #4]
 80255be:	691b      	ldr	r3, [r3, #16]
 80255c0:	4618      	mov	r0, r3
 80255c2:	f7fc f885 	bl	80216d0 <_ZN8Iim426526UpdateEv>
    side_sensor_->Update();
 80255c6:	687b      	ldr	r3, [r7, #4]
 80255c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80255ca:	4618      	mov	r0, r3
 80255cc:	f000 fa58 	bl	8025a80 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 80255d0:	6878      	ldr	r0, [r7, #4]
 80255d2:	f7ff fcd3 	bl	8024f7c <_ZN3Run13EmergencyStopEv>
 80255d6:	4603      	mov	r3, r0
 80255d8:	2b00      	cmp	r3, #0
 80255da:	d131      	bne.n	8025640 <_ZN3Run13ModeSecondRunEv+0xa0>
    /* Loading */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 80255dc:	687b      	ldr	r3, [r7, #4]
 80255de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80255e0:	4618      	mov	r0, r3
 80255e2:	f000 fc1c 	bl	8025e1e <_ZN10SideSensor18GetGoalMarkerCountEv>
 80255e6:	4603      	mov	r3, r0
 80255e8:	75fb      	strb	r3, [r7, #23]
    if(goal_count == 1) logger_->Loading();
 80255ea:	7dfb      	ldrb	r3, [r7, #23]
 80255ec:	2b01      	cmp	r3, #1
 80255ee:	d104      	bne.n	80255fa <_ZN3Run13ModeSecondRunEv+0x5a>
 80255f0:	687b      	ldr	r3, [r7, #4]
 80255f2:	6a1b      	ldr	r3, [r3, #32]
 80255f4:	4618      	mov	r0, r3
 80255f6:	f7fd fa7f 	bl	8022af8 <_ZN6Logger7LoadingEv>
    /* Motor control */
    float target_velocity = SecondTargetVelocity(goal_count);
 80255fa:	7dfb      	ldrb	r3, [r7, #23]
 80255fc:	4619      	mov	r1, r3
 80255fe:	6878      	ldr	r0, [r7, #4]
 8025600:	f000 f90a 	bl	8025818 <_ZN3Run20SecondTargetVelocityEh>
 8025604:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8025608:	687b      	ldr	r3, [r7, #4]
 802560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802560c:	ed97 0a04 	vldr	s0, [r7, #16]
 8025610:	4618      	mov	r0, r3
 8025612:	f001 f996 	bl	8026942 <_ZN15VelocityControl16DeterminePidGainEf>
 8025616:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 802561a:	687b      	ldr	r3, [r7, #4]
 802561c:	69db      	ldr	r3, [r3, #28]
 802561e:	ed97 0a04 	vldr	s0, [r7, #16]
 8025622:	4618      	mov	r0, r3
 8025624:	f7fc fde2 	bl	80221ec <_ZN9LineTrace16DeterminePidGainEf>
 8025628:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 802562c:	687b      	ldr	r3, [r7, #4]
 802562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025630:	edd7 0a02 	vldr	s1, [r7, #8]
 8025634:	ed97 0a03 	vldr	s0, [r7, #12]
 8025638:	4618      	mov	r0, r3
 802563a:	f7fe ffe5 	bl	8024608 <_ZN5Motor5DriveEff>
 802563e:	e000      	b.n	8025642 <_ZN3Run13ModeSecondRunEv+0xa2>
    if(EmergencyStop()) return;
 8025640:	bf00      	nop
}
 8025642:	3718      	adds	r7, #24
 8025644:	46bd      	mov	sp, r7
 8025646:	bd80      	pop	{r7, pc}

08025648 <_ZN3Run14ModeSecondGoalEv>:

void Run::ModeSecondGoal()
{
 8025648:	b580      	push	{r7, lr}
 802564a:	b082      	sub	sp, #8
 802564c:	af00      	add	r7, sp, #0
 802564e:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8025650:	687b      	ldr	r3, [r7, #4]
 8025652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025654:	eddf 0a08 	vldr	s1, [pc, #32]	; 8025678 <_ZN3Run14ModeSecondGoalEv+0x30>
 8025658:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8025678 <_ZN3Run14ModeSecondGoalEv+0x30>
 802565c:	4618      	mov	r0, r3
 802565e:	f7fe ffd3 	bl	8024608 <_ZN5Motor5DriveEff>
    led_->ColorOrder('M');
 8025662:	687b      	ldr	r3, [r7, #4]
 8025664:	695b      	ldr	r3, [r3, #20]
 8025666:	214d      	movs	r1, #77	; 0x4d
 8025668:	4618      	mov	r0, r3
 802566a:	f7fc f8bb 	bl	80217e4 <_ZN3Led10ColorOrderEc>
}
 802566e:	bf00      	nop
 8025670:	3708      	adds	r7, #8
 8025672:	46bd      	mov	sp, r7
 8025674:	bd80      	pop	{r7, pc}
 8025676:	bf00      	nop
 8025678:	00000000 	.word	0x00000000

0802567c <_ZN3Run19ModeVelocityControlEv>:

void Run::ModeVelocityControl()
{
 802567c:	b580      	push	{r7, lr}
 802567e:	b086      	sub	sp, #24
 8025680:	af00      	add	r7, sp, #0
 8025682:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 8025684:	687b      	ldr	r3, [r7, #4]
 8025686:	689b      	ldr	r3, [r3, #8]
 8025688:	4618      	mov	r0, r3
 802568a:	f7fb fbdd 	bl	8020e48 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 802568e:	687b      	ldr	r3, [r7, #4]
 8025690:	699b      	ldr	r3, [r3, #24]
 8025692:	4618      	mov	r0, r3
 8025694:	f7fc fbd0 	bl	8021e38 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 8025698:	687b      	ldr	r3, [r7, #4]
 802569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802569c:	4618      	mov	r0, r3
 802569e:	f000 f9ef 	bl	8025a80 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 80256a2:	6878      	ldr	r0, [r7, #4]
 80256a4:	f7ff fc6a 	bl	8024f7c <_ZN3Run13EmergencyStopEv>
 80256a8:	4603      	mov	r3, r0
 80256aa:	2b00      	cmp	r3, #0
 80256ac:	d129      	bne.n	8025702 <_ZN3Run19ModeVelocityControlEv+0x86>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 80256ae:	687b      	ldr	r3, [r7, #4]
 80256b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80256b2:	4618      	mov	r0, r3
 80256b4:	f000 fbb3 	bl	8025e1e <_ZN10SideSensor18GetGoalMarkerCountEv>
 80256b8:	4603      	mov	r3, r0
 80256ba:	75fb      	strb	r3, [r7, #23]
    float target_velocity = VelocityControlTarget(goal_count);
 80256bc:	7dfb      	ldrb	r3, [r7, #23]
 80256be:	4619      	mov	r1, r3
 80256c0:	6878      	ldr	r0, [r7, #4]
 80256c2:	f000 f8d1 	bl	8025868 <_ZN3Run21VelocityControlTargetEh>
 80256c6:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 80256ca:	687b      	ldr	r3, [r7, #4]
 80256cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80256ce:	ed97 0a04 	vldr	s0, [r7, #16]
 80256d2:	4618      	mov	r0, r3
 80256d4:	f001 f935 	bl	8026942 <_ZN15VelocityControl16DeterminePidGainEf>
 80256d8:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 80256dc:	687b      	ldr	r3, [r7, #4]
 80256de:	69db      	ldr	r3, [r3, #28]
 80256e0:	ed97 0a04 	vldr	s0, [r7, #16]
 80256e4:	4618      	mov	r0, r3
 80256e6:	f7fc fd81 	bl	80221ec <_ZN9LineTrace16DeterminePidGainEf>
 80256ea:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 80256ee:	687b      	ldr	r3, [r7, #4]
 80256f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80256f2:	edd7 0a02 	vldr	s1, [r7, #8]
 80256f6:	ed97 0a03 	vldr	s0, [r7, #12]
 80256fa:	4618      	mov	r0, r3
 80256fc:	f7fe ff84 	bl	8024608 <_ZN5Motor5DriveEff>
 8025700:	e000      	b.n	8025704 <_ZN3Run19ModeVelocityControlEv+0x88>
    if(EmergencyStop()) return;
 8025702:	bf00      	nop
}
 8025704:	3718      	adds	r7, #24
 8025706:	46bd      	mov	sp, r7
 8025708:	bd80      	pop	{r7, pc}

0802570a <_ZN3Run13ModeLineTraceEv>:

void Run::ModeLineTrace()
{
 802570a:	b580      	push	{r7, lr}
 802570c:	b086      	sub	sp, #24
 802570e:	af00      	add	r7, sp, #0
 8025710:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8025712:	687b      	ldr	r3, [r7, #4]
 8025714:	699b      	ldr	r3, [r3, #24]
 8025716:	4618      	mov	r0, r3
 8025718:	f7fc fb8e 	bl	8021e38 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 802571c:	687b      	ldr	r3, [r7, #4]
 802571e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025720:	4618      	mov	r0, r3
 8025722:	f000 f9ad 	bl	8025a80 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8025726:	6878      	ldr	r0, [r7, #4]
 8025728:	f7ff fc28 	bl	8024f7c <_ZN3Run13EmergencyStopEv>
 802572c:	4603      	mov	r3, r0
 802572e:	2b00      	cmp	r3, #0
 8025730:	d11e      	bne.n	8025770 <_ZN3Run13ModeLineTraceEv+0x66>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8025732:	687b      	ldr	r3, [r7, #4]
 8025734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025736:	4618      	mov	r0, r3
 8025738:	f000 fb71 	bl	8025e1e <_ZN10SideSensor18GetGoalMarkerCountEv>
 802573c:	4603      	mov	r3, r0
 802573e:	75fb      	strb	r3, [r7, #23]
    float trans_ratio = CommonDuty(goal_count);
 8025740:	7dfb      	ldrb	r3, [r7, #23]
 8025742:	4619      	mov	r1, r3
 8025744:	6878      	ldr	r0, [r7, #4]
 8025746:	f000 f8b5 	bl	80258b4 <_ZN3Run10CommonDutyEh>
 802574a:	ed87 0a04 	vstr	s0, [r7, #16]
    float rotat_ratio = line_trace_->LineTraceOnly();
 802574e:	687b      	ldr	r3, [r7, #4]
 8025750:	69db      	ldr	r3, [r3, #28]
 8025752:	4618      	mov	r0, r3
 8025754:	f7fc fd2c 	bl	80221b0 <_ZN9LineTrace13LineTraceOnlyEv>
 8025758:	ed87 0a03 	vstr	s0, [r7, #12]
    motor_->Drive(trans_ratio, rotat_ratio);
 802575c:	687b      	ldr	r3, [r7, #4]
 802575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025760:	edd7 0a03 	vldr	s1, [r7, #12]
 8025764:	ed97 0a04 	vldr	s0, [r7, #16]
 8025768:	4618      	mov	r0, r3
 802576a:	f7fe ff4d 	bl	8024608 <_ZN5Motor5DriveEff>
 802576e:	e000      	b.n	8025772 <_ZN3Run13ModeLineTraceEv+0x68>
    if(EmergencyStop()) return;
 8025770:	bf00      	nop
}
 8025772:	3718      	adds	r7, #24
 8025774:	46bd      	mov	sp, r7
 8025776:	bd80      	pop	{r7, pc}

08025778 <_ZN3Run24ModeVelocityControlDebugEv>:

#ifdef DEBUG_MODE
void Run::ModeVelocityControlDebug()
{
 8025778:	b580      	push	{r7, lr}
 802577a:	b084      	sub	sp, #16
 802577c:	af00      	add	r7, sp, #0
 802577e:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8025780:	687b      	ldr	r3, [r7, #4]
 8025782:	699b      	ldr	r3, [r3, #24]
 8025784:	4618      	mov	r0, r3
 8025786:	f7fc fb57 	bl	8021e38 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 802578a:	687b      	ldr	r3, [r7, #4]
 802578c:	689b      	ldr	r3, [r3, #8]
 802578e:	4618      	mov	r0, r3
 8025790:	f7fb fb5a 	bl	8020e48 <_ZN7Encoder6UpdateEv>
    /* Motor control */
    float target_velocity = VELOCITY_CONTROL_TARGET;
 8025794:	4b0b      	ldr	r3, [pc, #44]	; (80257c4 <_ZN3Run24ModeVelocityControlDebugEv+0x4c>)
 8025796:	60fb      	str	r3, [r7, #12]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8025798:	687b      	ldr	r3, [r7, #4]
 802579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802579c:	ed97 0a03 	vldr	s0, [r7, #12]
 80257a0:	4618      	mov	r0, r3
 80257a2:	f001 f8ce 	bl	8026942 <_ZN15VelocityControl16DeterminePidGainEf>
 80257a6:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, 0);
 80257aa:	687b      	ldr	r3, [r7, #4]
 80257ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80257ae:	eddf 0a06 	vldr	s1, [pc, #24]	; 80257c8 <_ZN3Run24ModeVelocityControlDebugEv+0x50>
 80257b2:	ed97 0a02 	vldr	s0, [r7, #8]
 80257b6:	4618      	mov	r0, r3
 80257b8:	f7fe ff26 	bl	8024608 <_ZN5Motor5DriveEff>
}
 80257bc:	bf00      	nop
 80257be:	3710      	adds	r7, #16
 80257c0:	46bd      	mov	sp, r7
 80257c2:	bd80      	pop	{r7, pc}
 80257c4:	3f99999a 	.word	0x3f99999a
 80257c8:	00000000 	.word	0x00000000

080257cc <_ZN3Run19FirstTargetVelocityEh>:
    InitialTest();
}
#endif // DEBUG_MODE

float Run::FirstTargetVelocity(uint8_t goal_count)
{
 80257cc:	b480      	push	{r7}
 80257ce:	b083      	sub	sp, #12
 80257d0:	af00      	add	r7, sp, #0
 80257d2:	6078      	str	r0, [r7, #4]
 80257d4:	460b      	mov	r3, r1
 80257d6:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 80257d8:	78fb      	ldrb	r3, [r7, #3]
 80257da:	2b01      	cmp	r3, #1
 80257dc:	d101      	bne.n	80257e2 <_ZN3Run19FirstTargetVelocityEh+0x16>
    {
        return EXPLORE_VELOCITY;
 80257de:	4b0b      	ldr	r3, [pc, #44]	; (802580c <_ZN3Run19FirstTargetVelocityEh+0x40>)
 80257e0:	e00b      	b.n	80257fa <_ZN3Run19FirstTargetVelocityEh+0x2e>
    }
    else if(goal_count >= 2)
 80257e2:	78fb      	ldrb	r3, [r7, #3]
 80257e4:	2b01      	cmp	r3, #1
 80257e6:	d907      	bls.n	80257f8 <_ZN3Run19FirstTargetVelocityEh+0x2c>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 80257e8:	4b09      	ldr	r3, [pc, #36]	; (8025810 <_ZN3Run19FirstTargetVelocityEh+0x44>)
 80257ea:	781b      	ldrb	r3, [r3, #0]
 80257ec:	3301      	adds	r3, #1
 80257ee:	b2da      	uxtb	r2, r3
 80257f0:	4b07      	ldr	r3, [pc, #28]	; (8025810 <_ZN3Run19FirstTargetVelocityEh+0x44>)
 80257f2:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 80257f4:	4b07      	ldr	r3, [pc, #28]	; (8025814 <_ZN3Run19FirstTargetVelocityEh+0x48>)
 80257f6:	e000      	b.n	80257fa <_ZN3Run19FirstTargetVelocityEh+0x2e>
        {
            SetRunMode(FIRST_GOAL);
            return 0;
        }
    }
    else return EXPLORE_VELOCITY;
 80257f8:	4b04      	ldr	r3, [pc, #16]	; (802580c <_ZN3Run19FirstTargetVelocityEh+0x40>)
 80257fa:	ee07 3a90 	vmov	s15, r3
}
 80257fe:	eeb0 0a67 	vmov.f32	s0, s15
 8025802:	370c      	adds	r7, #12
 8025804:	46bd      	mov	sp, r7
 8025806:	f85d 7b04 	ldr.w	r7, [sp], #4
 802580a:	4770      	bx	lr
 802580c:	3f19999a 	.word	0x3f19999a
 8025810:	20000362 	.word	0x20000362
 8025814:	3dcccccd 	.word	0x3dcccccd

08025818 <_ZN3Run20SecondTargetVelocityEh>:

float Run::SecondTargetVelocity(uint8_t goal_count)
{
 8025818:	b580      	push	{r7, lr}
 802581a:	b082      	sub	sp, #8
 802581c:	af00      	add	r7, sp, #0
 802581e:	6078      	str	r0, [r7, #4]
 8025820:	460b      	mov	r3, r1
 8025822:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8025824:	78fb      	ldrb	r3, [r7, #3]
 8025826:	2b01      	cmp	r3, #1
 8025828:	d107      	bne.n	802583a <_ZN3Run20SecondTargetVelocityEh+0x22>
    {
        return logger_->GetTargetVelocity();
 802582a:	687b      	ldr	r3, [r7, #4]
 802582c:	6a1b      	ldr	r3, [r3, #32]
 802582e:	4618      	mov	r0, r3
 8025830:	f7fd fc2a 	bl	8023088 <_ZN6Logger17GetTargetVelocityEv>
 8025834:	eef0 7a40 	vmov.f32	s15, s0
 8025838:	e00d      	b.n	8025856 <_ZN3Run20SecondTargetVelocityEh+0x3e>
    }
    else if(goal_count >= 2)
 802583a:	78fb      	ldrb	r3, [r7, #3]
 802583c:	2b01      	cmp	r3, #1
 802583e:	d908      	bls.n	8025852 <_ZN3Run20SecondTargetVelocityEh+0x3a>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8025840:	4b07      	ldr	r3, [pc, #28]	; (8025860 <_ZN3Run20SecondTargetVelocityEh+0x48>)
 8025842:	781b      	ldrb	r3, [r3, #0]
 8025844:	3301      	adds	r3, #1
 8025846:	b2da      	uxtb	r2, r3
 8025848:	4b05      	ldr	r3, [pc, #20]	; (8025860 <_ZN3Run20SecondTargetVelocityEh+0x48>)
 802584a:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 802584c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8025864 <_ZN3Run20SecondTargetVelocityEh+0x4c>
 8025850:	e001      	b.n	8025856 <_ZN3Run20SecondTargetVelocityEh+0x3e>
        {
            SetRunMode(SECOND_GOAL);
            return 0;
        }
    }
    else return MIN_VELOCITY;
 8025852:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
}
 8025856:	eeb0 0a67 	vmov.f32	s0, s15
 802585a:	3708      	adds	r7, #8
 802585c:	46bd      	mov	sp, r7
 802585e:	bd80      	pop	{r7, pc}
 8025860:	20000363 	.word	0x20000363
 8025864:	3dcccccd 	.word	0x3dcccccd

08025868 <_ZN3Run21VelocityControlTargetEh>:

float Run::VelocityControlTarget(uint8_t goal_count)
{
 8025868:	b480      	push	{r7}
 802586a:	b083      	sub	sp, #12
 802586c:	af00      	add	r7, sp, #0
 802586e:	6078      	str	r0, [r7, #4]
 8025870:	460b      	mov	r3, r1
 8025872:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8025874:	78fb      	ldrb	r3, [r7, #3]
 8025876:	2b01      	cmp	r3, #1
 8025878:	d101      	bne.n	802587e <_ZN3Run21VelocityControlTargetEh+0x16>
    {
        return VELOCITY_CONTROL_TARGET;
 802587a:	4b0b      	ldr	r3, [pc, #44]	; (80258a8 <_ZN3Run21VelocityControlTargetEh+0x40>)
 802587c:	e00b      	b.n	8025896 <_ZN3Run21VelocityControlTargetEh+0x2e>
    }
    else if(goal_count >= 2)
 802587e:	78fb      	ldrb	r3, [r7, #3]
 8025880:	2b01      	cmp	r3, #1
 8025882:	d907      	bls.n	8025894 <_ZN3Run21VelocityControlTargetEh+0x2c>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8025884:	4b09      	ldr	r3, [pc, #36]	; (80258ac <_ZN3Run21VelocityControlTargetEh+0x44>)
 8025886:	781b      	ldrb	r3, [r3, #0]
 8025888:	3301      	adds	r3, #1
 802588a:	b2da      	uxtb	r2, r3
 802588c:	4b07      	ldr	r3, [pc, #28]	; (80258ac <_ZN3Run21VelocityControlTargetEh+0x44>)
 802588e:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8025890:	4b07      	ldr	r3, [pc, #28]	; (80258b0 <_ZN3Run21VelocityControlTargetEh+0x48>)
 8025892:	e000      	b.n	8025896 <_ZN3Run21VelocityControlTargetEh+0x2e>
        {
            SetRunMode(STANDBY);
            return 0;
        }
    }
    else return VELOCITY_CONTROL_TARGET;
 8025894:	4b04      	ldr	r3, [pc, #16]	; (80258a8 <_ZN3Run21VelocityControlTargetEh+0x40>)
 8025896:	ee07 3a90 	vmov	s15, r3
}
 802589a:	eeb0 0a67 	vmov.f32	s0, s15
 802589e:	370c      	adds	r7, #12
 80258a0:	46bd      	mov	sp, r7
 80258a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258a6:	4770      	bx	lr
 80258a8:	3f99999a 	.word	0x3f99999a
 80258ac:	20000364 	.word	0x20000364
 80258b0:	3dcccccd 	.word	0x3dcccccd

080258b4 <_ZN3Run10CommonDutyEh>:

float Run::CommonDuty(uint8_t goal_count)
{
 80258b4:	b480      	push	{r7}
 80258b6:	b083      	sub	sp, #12
 80258b8:	af00      	add	r7, sp, #0
 80258ba:	6078      	str	r0, [r7, #4]
 80258bc:	460b      	mov	r3, r1
 80258be:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 80258c0:	78fb      	ldrb	r3, [r7, #3]
 80258c2:	2b01      	cmp	r3, #1
 80258c4:	d101      	bne.n	80258ca <_ZN3Run10CommonDutyEh+0x16>
    {
        return COMMON_DUTY;
 80258c6:	4b0b      	ldr	r3, [pc, #44]	; (80258f4 <_ZN3Run10CommonDutyEh+0x40>)
 80258c8:	e00b      	b.n	80258e2 <_ZN3Run10CommonDutyEh+0x2e>
    }
    else if(goal_count >= 2)
 80258ca:	78fb      	ldrb	r3, [r7, #3]
 80258cc:	2b01      	cmp	r3, #1
 80258ce:	d907      	bls.n	80258e0 <_ZN3Run10CommonDutyEh+0x2c>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 80258d0:	4b09      	ldr	r3, [pc, #36]	; (80258f8 <_ZN3Run10CommonDutyEh+0x44>)
 80258d2:	781b      	ldrb	r3, [r3, #0]
 80258d4:	3301      	adds	r3, #1
 80258d6:	b2da      	uxtb	r2, r3
 80258d8:	4b07      	ldr	r3, [pc, #28]	; (80258f8 <_ZN3Run10CommonDutyEh+0x44>)
 80258da:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_DUTY;
 80258dc:	4b07      	ldr	r3, [pc, #28]	; (80258fc <_ZN3Run10CommonDutyEh+0x48>)
 80258de:	e000      	b.n	80258e2 <_ZN3Run10CommonDutyEh+0x2e>
        {
            SetRunMode(STANDBY);
            return 0;
        }
    }
    else return COMMON_DUTY;
 80258e0:	4b04      	ldr	r3, [pc, #16]	; (80258f4 <_ZN3Run10CommonDutyEh+0x40>)
 80258e2:	ee07 3a90 	vmov	s15, r3
}
 80258e6:	eeb0 0a67 	vmov.f32	s0, s15
 80258ea:	370c      	adds	r7, #12
 80258ec:	46bd      	mov	sp, r7
 80258ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258f2:	4770      	bx	lr
 80258f4:	3e4ccccd 	.word	0x3e4ccccd
 80258f8:	20000365 	.word	0x20000365
 80258fc:	3dcccccd 	.word	0x3dcccccd

08025900 <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0)
 8025900:	b480      	push	{r7}
 8025902:	b083      	sub	sp, #12
 8025904:	af00      	add	r7, sp, #0
 8025906:	6078      	str	r0, [r7, #4]
                         , write_state_flags_(0)
                         , exception_flags_(0)
                         , master_count_(0)
                         , goal_marker_count_(0)
                         , corner_marker_count_(0)
                         , cross_line_count_(0) {}
 8025908:	687b      	ldr	r3, [r7, #4]
 802590a:	2200      	movs	r2, #0
 802590c:	701a      	strb	r2, [r3, #0]
 802590e:	687b      	ldr	r3, [r7, #4]
 8025910:	2200      	movs	r2, #0
 8025912:	705a      	strb	r2, [r3, #1]
 8025914:	687b      	ldr	r3, [r7, #4]
 8025916:	2200      	movs	r2, #0
 8025918:	709a      	strb	r2, [r3, #2]
 802591a:	687b      	ldr	r3, [r7, #4]
 802591c:	2200      	movs	r2, #0
 802591e:	70da      	strb	r2, [r3, #3]
 8025920:	687b      	ldr	r3, [r7, #4]
 8025922:	2200      	movs	r2, #0
 8025924:	711a      	strb	r2, [r3, #4]
 8025926:	687b      	ldr	r3, [r7, #4]
 8025928:	2200      	movs	r2, #0
 802592a:	715a      	strb	r2, [r3, #5]
 802592c:	687b      	ldr	r3, [r7, #4]
 802592e:	2200      	movs	r2, #0
 8025930:	719a      	strb	r2, [r3, #6]
 8025932:	687b      	ldr	r3, [r7, #4]
 8025934:	4618      	mov	r0, r3
 8025936:	370c      	adds	r7, #12
 8025938:	46bd      	mov	sp, r7
 802593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802593e:	4770      	bx	lr

08025940 <_ZN10SideSensor11UpdateStateEv>:

void SideSensor::UpdateState()
{
 8025940:	b580      	push	{r7, lr}
 8025942:	b084      	sub	sp, #16
 8025944:	af00      	add	r7, sp, #0
 8025946:	6078      	str	r0, [r7, #4]
    uint8_t io_state = 0xFF; // Lower bits represent the positions of sensors.
 8025948:	23ff      	movs	r3, #255	; 0xff
 802594a:	73fb      	strb	r3, [r7, #15]

    if(IO_OUTSIDE_L == 0) io_state &= 0xF7; // 0111
 802594c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8025950:	4849      	ldr	r0, [pc, #292]	; (8025a78 <_ZN10SideSensor11UpdateStateEv+0x138>)
 8025952:	f002 ffb5 	bl	80288c0 <HAL_GPIO_ReadPin>
 8025956:	4603      	mov	r3, r0
 8025958:	2b00      	cmp	r3, #0
 802595a:	bf0c      	ite	eq
 802595c:	2301      	moveq	r3, #1
 802595e:	2300      	movne	r3, #0
 8025960:	b2db      	uxtb	r3, r3
 8025962:	2b00      	cmp	r3, #0
 8025964:	d003      	beq.n	802596e <_ZN10SideSensor11UpdateStateEv+0x2e>
 8025966:	7bfb      	ldrb	r3, [r7, #15]
 8025968:	f023 0308 	bic.w	r3, r3, #8
 802596c:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_L == 0)  io_state &= 0xFB; // 1011
 802596e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8025972:	4841      	ldr	r0, [pc, #260]	; (8025a78 <_ZN10SideSensor11UpdateStateEv+0x138>)
 8025974:	f002 ffa4 	bl	80288c0 <HAL_GPIO_ReadPin>
 8025978:	4603      	mov	r3, r0
 802597a:	2b00      	cmp	r3, #0
 802597c:	bf0c      	ite	eq
 802597e:	2301      	moveq	r3, #1
 8025980:	2300      	movne	r3, #0
 8025982:	b2db      	uxtb	r3, r3
 8025984:	2b00      	cmp	r3, #0
 8025986:	d003      	beq.n	8025990 <_ZN10SideSensor11UpdateStateEv+0x50>
 8025988:	7bfb      	ldrb	r3, [r7, #15]
 802598a:	f023 0304 	bic.w	r3, r3, #4
 802598e:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_R == 0)  io_state &= 0xFD; // 1101
 8025990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8025994:	4838      	ldr	r0, [pc, #224]	; (8025a78 <_ZN10SideSensor11UpdateStateEv+0x138>)
 8025996:	f002 ff93 	bl	80288c0 <HAL_GPIO_ReadPin>
 802599a:	4603      	mov	r3, r0
 802599c:	2b00      	cmp	r3, #0
 802599e:	bf0c      	ite	eq
 80259a0:	2301      	moveq	r3, #1
 80259a2:	2300      	movne	r3, #0
 80259a4:	b2db      	uxtb	r3, r3
 80259a6:	2b00      	cmp	r3, #0
 80259a8:	d003      	beq.n	80259b2 <_ZN10SideSensor11UpdateStateEv+0x72>
 80259aa:	7bfb      	ldrb	r3, [r7, #15]
 80259ac:	f023 0302 	bic.w	r3, r3, #2
 80259b0:	73fb      	strb	r3, [r7, #15]
    if(IO_OUTSIDE_R == 0) io_state &= 0xFE; // 1110
 80259b2:	2104      	movs	r1, #4
 80259b4:	4831      	ldr	r0, [pc, #196]	; (8025a7c <_ZN10SideSensor11UpdateStateEv+0x13c>)
 80259b6:	f002 ff83 	bl	80288c0 <HAL_GPIO_ReadPin>
 80259ba:	4603      	mov	r3, r0
 80259bc:	2b00      	cmp	r3, #0
 80259be:	bf0c      	ite	eq
 80259c0:	2301      	moveq	r3, #1
 80259c2:	2300      	movne	r3, #0
 80259c4:	b2db      	uxtb	r3, r3
 80259c6:	2b00      	cmp	r3, #0
 80259c8:	d003      	beq.n	80259d2 <_ZN10SideSensor11UpdateStateEv+0x92>
 80259ca:	7bfb      	ldrb	r3, [r7, #15]
 80259cc:	f023 0301 	bic.w	r3, r3, #1
 80259d0:	73fb      	strb	r3, [r7, #15]

    read_state_flags_ <<= 4;
 80259d2:	687b      	ldr	r3, [r7, #4]
 80259d4:	781b      	ldrb	r3, [r3, #0]
 80259d6:	011b      	lsls	r3, r3, #4
 80259d8:	b2da      	uxtb	r2, r3
 80259da:	687b      	ldr	r3, [r7, #4]
 80259dc:	701a      	strb	r2, [r3, #0]

    switch(io_state)
 80259de:	7bfb      	ldrb	r3, [r7, #15]
 80259e0:	3bf0      	subs	r3, #240	; 0xf0
 80259e2:	2b0f      	cmp	r3, #15
 80259e4:	d842      	bhi.n	8025a6c <_ZN10SideSensor11UpdateStateEv+0x12c>
 80259e6:	a201      	add	r2, pc, #4	; (adr r2, 80259ec <_ZN10SideSensor11UpdateStateEv+0xac>)
 80259e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80259ec:	08025a5d 	.word	0x08025a5d
 80259f0:	08025a5d 	.word	0x08025a5d
 80259f4:	08025a5d 	.word	0x08025a5d
 80259f8:	08025a4d 	.word	0x08025a4d
 80259fc:	08025a5d 	.word	0x08025a5d
 8025a00:	08025a6d 	.word	0x08025a6d
 8025a04:	08025a5d 	.word	0x08025a5d
 8025a08:	08025a4d 	.word	0x08025a4d
 8025a0c:	08025a5d 	.word	0x08025a5d
 8025a10:	08025a5d 	.word	0x08025a5d
 8025a14:	08025a6d 	.word	0x08025a6d
 8025a18:	08025a4d 	.word	0x08025a4d
 8025a1c:	08025a3d 	.word	0x08025a3d
 8025a20:	08025a6d 	.word	0x08025a6d
 8025a24:	08025a6d 	.word	0x08025a6d
 8025a28:	08025a2d 	.word	0x08025a2d
    {
        case 0xFF: // 1111
            read_state_flags_ |= 0x08; break;
 8025a2c:	687b      	ldr	r3, [r7, #4]
 8025a2e:	781b      	ldrb	r3, [r3, #0]
 8025a30:	f043 0308 	orr.w	r3, r3, #8
 8025a34:	b2da      	uxtb	r2, r3
 8025a36:	687b      	ldr	r3, [r7, #4]
 8025a38:	701a      	strb	r2, [r3, #0]
 8025a3a:	e018      	b.n	8025a6e <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFC: // 1100  If through goal, increase pattern.
            read_state_flags_ |= 0x04; break;
 8025a3c:	687b      	ldr	r3, [r7, #4]
 8025a3e:	781b      	ldrb	r3, [r3, #0]
 8025a40:	f043 0304 	orr.w	r3, r3, #4
 8025a44:	b2da      	uxtb	r2, r3
 8025a46:	687b      	ldr	r3, [r7, #4]
 8025a48:	701a      	strb	r2, [r3, #0]
 8025a4a:	e010      	b.n	8025a6e <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFB: // 1011
        case 0xF7: // 0111
        case 0xF3: // 0011
            read_state_flags_ |= 0x02; break;
 8025a4c:	687b      	ldr	r3, [r7, #4]
 8025a4e:	781b      	ldrb	r3, [r3, #0]
 8025a50:	f043 0302 	orr.w	r3, r3, #2
 8025a54:	b2da      	uxtb	r2, r3
 8025a56:	687b      	ldr	r3, [r7, #4]
 8025a58:	701a      	strb	r2, [r3, #0]
 8025a5a:	e008      	b.n	8025a6e <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xF4: // 0100
        case 0xF0: // 0000
        case 0xF1: // 0001
        case 0xF8: // 1000
        case 0xF9: // 1001
            read_state_flags_ |= 0x01; break;
 8025a5c:	687b      	ldr	r3, [r7, #4]
 8025a5e:	781b      	ldrb	r3, [r3, #0]
 8025a60:	f043 0301 	orr.w	r3, r3, #1
 8025a64:	b2da      	uxtb	r2, r3
 8025a66:	687b      	ldr	r3, [r7, #4]
 8025a68:	701a      	strb	r2, [r3, #0]
 8025a6a:	e000      	b.n	8025a6e <_ZN10SideSensor11UpdateStateEv+0x12e>
        default: break;
 8025a6c:	bf00      	nop
    }
}
 8025a6e:	bf00      	nop
 8025a70:	3710      	adds	r7, #16
 8025a72:	46bd      	mov	sp, r7
 8025a74:	bd80      	pop	{r7, pc}
 8025a76:	bf00      	nop
 8025a78:	40020400 	.word	0x40020400
 8025a7c:	40020c00 	.word	0x40020c00

08025a80 <_ZN10SideSensor6UpdateEv>:

void SideSensor::Update()
{
 8025a80:	b580      	push	{r7, lr}
 8025a82:	b084      	sub	sp, #16
 8025a84:	af00      	add	r7, sp, #0
 8025a86:	6078      	str	r0, [r7, #4]
    uint8_t ignore_flag = exception_flags_ & 0x01;
 8025a88:	687b      	ldr	r3, [r7, #4]
 8025a8a:	789b      	ldrb	r3, [r3, #2]
 8025a8c:	f003 0301 	and.w	r3, r3, #1
 8025a90:	73fb      	strb	r3, [r7, #15]

    /* Ignore judgment */
    if(ignore_flag == 0x01)
 8025a92:	7bfb      	ldrb	r3, [r7, #15]
 8025a94:	2b01      	cmp	r3, #1
 8025a96:	d111      	bne.n	8025abc <_ZN10SideSensor6UpdateEv+0x3c>
    {
        if(master_count_ < IGNORE_COUNT) master_count_++;
 8025a98:	687b      	ldr	r3, [r7, #4]
 8025a9a:	78db      	ldrb	r3, [r3, #3]
 8025a9c:	2b04      	cmp	r3, #4
 8025a9e:	d806      	bhi.n	8025aae <_ZN10SideSensor6UpdateEv+0x2e>
 8025aa0:	687b      	ldr	r3, [r7, #4]
 8025aa2:	78db      	ldrb	r3, [r3, #3]
 8025aa4:	3301      	adds	r3, #1
 8025aa6:	b2da      	uxtb	r2, r3
 8025aa8:	687b      	ldr	r3, [r7, #4]
 8025aaa:	70da      	strb	r2, [r3, #3]
 8025aac:	e031      	b.n	8025b12 <_ZN10SideSensor6UpdateEv+0x92>
        else exception_flags_ >>= 1; 
 8025aae:	687b      	ldr	r3, [r7, #4]
 8025ab0:	789b      	ldrb	r3, [r3, #2]
 8025ab2:	105b      	asrs	r3, r3, #1
 8025ab4:	b2da      	uxtb	r2, r3
 8025ab6:	687b      	ldr	r3, [r7, #4]
 8025ab8:	709a      	strb	r2, [r3, #2]
 8025aba:	e02a      	b.n	8025b12 <_ZN10SideSensor6UpdateEv+0x92>
    }
    else if(ignore_flag == 0x00)
 8025abc:	7bfb      	ldrb	r3, [r7, #15]
 8025abe:	2b00      	cmp	r3, #0
 8025ac0:	d127      	bne.n	8025b12 <_ZN10SideSensor6UpdateEv+0x92>
    {
        UpdateState();
 8025ac2:	6878      	ldr	r0, [r7, #4]
 8025ac4:	f7ff ff3c 	bl	8025940 <_ZN10SideSensor11UpdateStateEv>

        uint8_t now_state = read_state_flags_;
 8025ac8:	687b      	ldr	r3, [r7, #4]
 8025aca:	781b      	ldrb	r3, [r3, #0]
 8025acc:	73bb      	strb	r3, [r7, #14]
        uint8_t pre_state = (now_state << 4) | (now_state >> 4);
 8025ace:	7bbb      	ldrb	r3, [r7, #14]
 8025ad0:	011b      	lsls	r3, r3, #4
 8025ad2:	b25a      	sxtb	r2, r3
 8025ad4:	7bbb      	ldrb	r3, [r7, #14]
 8025ad6:	111b      	asrs	r3, r3, #4
 8025ad8:	b25b      	sxtb	r3, r3
 8025ada:	4313      	orrs	r3, r2
 8025adc:	b25b      	sxtb	r3, r3
 8025ade:	737b      	strb	r3, [r7, #13]

        if(pre_state != now_state)
 8025ae0:	7b7a      	ldrb	r2, [r7, #13]
 8025ae2:	7bbb      	ldrb	r3, [r7, #14]
 8025ae4:	429a      	cmp	r2, r3
 8025ae6:	d003      	beq.n	8025af0 <_ZN10SideSensor6UpdateEv+0x70>
        {
            NoiseTolerance();
 8025ae8:	6878      	ldr	r0, [r7, #4]
 8025aea:	f000 f819 	bl	8025b20 <_ZN10SideSensor14NoiseToleranceEv>
 8025aee:	e010      	b.n	8025b12 <_ZN10SideSensor6UpdateEv+0x92>
        }
        else if(pre_state == now_state)
 8025af0:	7b7a      	ldrb	r2, [r7, #13]
 8025af2:	7bbb      	ldrb	r3, [r7, #14]
 8025af4:	429a      	cmp	r2, r3
 8025af6:	d10c      	bne.n	8025b12 <_ZN10SideSensor6UpdateEv+0x92>
        {
            exception_flags_ &= 0xF3; // noise_count = 0
 8025af8:	687b      	ldr	r3, [r7, #4]
 8025afa:	789b      	ldrb	r3, [r3, #2]
 8025afc:	f023 030c 	bic.w	r3, r3, #12
 8025b00:	b2da      	uxtb	r2, r3
 8025b02:	687b      	ldr	r3, [r7, #4]
 8025b04:	709a      	strb	r2, [r3, #2]
            ConfirmState();
 8025b06:	6878      	ldr	r0, [r7, #4]
 8025b08:	f000 f85a 	bl	8025bc0 <_ZN10SideSensor12ConfirmStateEv>
            CountUp();
 8025b0c:	6878      	ldr	r0, [r7, #4]
 8025b0e:	f000 f8c6 	bl	8025c9e <_ZN10SideSensor7CountUpEv>
        }
    }

#ifdef DEBUG_MODE
    Monitor();
 8025b12:	6878      	ldr	r0, [r7, #4]
 8025b14:	f000 f9a8 	bl	8025e68 <_ZN10SideSensor7MonitorEv>
#endif // DEBUG_MODE
}
 8025b18:	bf00      	nop
 8025b1a:	3710      	adds	r7, #16
 8025b1c:	46bd      	mov	sp, r7
 8025b1e:	bd80      	pop	{r7, pc}

08025b20 <_ZN10SideSensor14NoiseToleranceEv>:

void SideSensor::NoiseTolerance()
{
 8025b20:	b580      	push	{r7, lr}
 8025b22:	b084      	sub	sp, #16
 8025b24:	af00      	add	r7, sp, #0
 8025b26:	6078      	str	r0, [r7, #4]
    uint8_t noise_count = (exception_flags_ & 0x0C) >> 2;
 8025b28:	687b      	ldr	r3, [r7, #4]
 8025b2a:	789b      	ldrb	r3, [r3, #2]
 8025b2c:	109b      	asrs	r3, r3, #2
 8025b2e:	b2db      	uxtb	r3, r3
 8025b30:	f003 0303 	and.w	r3, r3, #3
 8025b34:	73fb      	strb	r3, [r7, #15]

    if(noise_count == 0x00)
 8025b36:	7bfb      	ldrb	r3, [r7, #15]
 8025b38:	2b00      	cmp	r3, #0
 8025b3a:	d11f      	bne.n	8025b7c <_ZN10SideSensor14NoiseToleranceEv+0x5c>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ & 0xF0);
 8025b3c:	687b      	ldr	r3, [r7, #4]
 8025b3e:	789b      	ldrb	r3, [r3, #2]
 8025b40:	f003 030f 	and.w	r3, r3, #15
 8025b44:	b2da      	uxtb	r2, r3
 8025b46:	687b      	ldr	r3, [r7, #4]
 8025b48:	781b      	ldrb	r3, [r3, #0]
 8025b4a:	f023 030f 	bic.w	r3, r3, #15
 8025b4e:	b2db      	uxtb	r3, r3
 8025b50:	4313      	orrs	r3, r2
 8025b52:	b2da      	uxtb	r2, r3
 8025b54:	687b      	ldr	r3, [r7, #4]
 8025b56:	709a      	strb	r2, [r3, #2]
        /* Count up noise_count */
        noise_count++;
 8025b58:	7bfb      	ldrb	r3, [r7, #15]
 8025b5a:	3301      	adds	r3, #1
 8025b5c:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8025b5e:	687b      	ldr	r3, [r7, #4]
 8025b60:	789b      	ldrb	r3, [r3, #2]
 8025b62:	b25b      	sxtb	r3, r3
 8025b64:	f023 030c 	bic.w	r3, r3, #12
 8025b68:	b25a      	sxtb	r2, r3
 8025b6a:	7bfb      	ldrb	r3, [r7, #15]
 8025b6c:	009b      	lsls	r3, r3, #2
 8025b6e:	b25b      	sxtb	r3, r3
 8025b70:	4313      	orrs	r3, r2
 8025b72:	b25b      	sxtb	r3, r3
 8025b74:	b2da      	uxtb	r2, r3
 8025b76:	687b      	ldr	r3, [r7, #4]
 8025b78:	709a      	strb	r2, [r3, #2]

        ConfirmState();
        CountUp();
    }
    else master_count_ = 0;
}
 8025b7a:	e01d      	b.n	8025bb8 <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else if(noise_count == 0x01)
 8025b7c:	7bfb      	ldrb	r3, [r7, #15]
 8025b7e:	2b01      	cmp	r3, #1
 8025b80:	d117      	bne.n	8025bb2 <_ZN10SideSensor14NoiseToleranceEv+0x92>
        noise_count++;
 8025b82:	7bfb      	ldrb	r3, [r7, #15]
 8025b84:	3301      	adds	r3, #1
 8025b86:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8025b88:	687b      	ldr	r3, [r7, #4]
 8025b8a:	789b      	ldrb	r3, [r3, #2]
 8025b8c:	b25b      	sxtb	r3, r3
 8025b8e:	f023 030c 	bic.w	r3, r3, #12
 8025b92:	b25a      	sxtb	r2, r3
 8025b94:	7bfb      	ldrb	r3, [r7, #15]
 8025b96:	009b      	lsls	r3, r3, #2
 8025b98:	b25b      	sxtb	r3, r3
 8025b9a:	4313      	orrs	r3, r2
 8025b9c:	b25b      	sxtb	r3, r3
 8025b9e:	b2da      	uxtb	r2, r3
 8025ba0:	687b      	ldr	r3, [r7, #4]
 8025ba2:	709a      	strb	r2, [r3, #2]
        ConfirmState();
 8025ba4:	6878      	ldr	r0, [r7, #4]
 8025ba6:	f000 f80b 	bl	8025bc0 <_ZN10SideSensor12ConfirmStateEv>
        CountUp();
 8025baa:	6878      	ldr	r0, [r7, #4]
 8025bac:	f000 f877 	bl	8025c9e <_ZN10SideSensor7CountUpEv>
}
 8025bb0:	e002      	b.n	8025bb8 <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else master_count_ = 0;
 8025bb2:	687b      	ldr	r3, [r7, #4]
 8025bb4:	2200      	movs	r2, #0
 8025bb6:	70da      	strb	r2, [r3, #3]
}
 8025bb8:	bf00      	nop
 8025bba:	3710      	adds	r7, #16
 8025bbc:	46bd      	mov	sp, r7
 8025bbe:	bd80      	pop	{r7, pc}

08025bc0 <_ZN10SideSensor12ConfirmStateEv>:

void SideSensor::ConfirmState()
{
 8025bc0:	b480      	push	{r7}
 8025bc2:	b085      	sub	sp, #20
 8025bc4:	af00      	add	r7, sp, #0
 8025bc6:	6078      	str	r0, [r7, #4]
    uint8_t before_noise_state = exception_flags_ >> 4;
 8025bc8:	687b      	ldr	r3, [r7, #4]
 8025bca:	789b      	ldrb	r3, [r3, #2]
 8025bcc:	111b      	asrs	r3, r3, #4
 8025bce:	73bb      	strb	r3, [r7, #14]
    uint8_t now_state = read_state_flags_ & 0x0F;
 8025bd0:	687b      	ldr	r3, [r7, #4]
 8025bd2:	781b      	ldrb	r3, [r3, #0]
 8025bd4:	f003 030f 	and.w	r3, r3, #15
 8025bd8:	737b      	strb	r3, [r7, #13]
    uint8_t count = master_count_;
 8025bda:	687b      	ldr	r3, [r7, #4]
 8025bdc:	78db      	ldrb	r3, [r3, #3]
 8025bde:	73fb      	strb	r3, [r7, #15]

    if(before_noise_state != now_state)
 8025be0:	7bba      	ldrb	r2, [r7, #14]
 8025be2:	7b7b      	ldrb	r3, [r7, #13]
 8025be4:	429a      	cmp	r2, r3
 8025be6:	d010      	beq.n	8025c0a <_ZN10SideSensor12ConfirmStateEv+0x4a>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (now_state << 4);
 8025be8:	687b      	ldr	r3, [r7, #4]
 8025bea:	789b      	ldrb	r3, [r3, #2]
 8025bec:	b25b      	sxtb	r3, r3
 8025bee:	f003 030f 	and.w	r3, r3, #15
 8025bf2:	b25a      	sxtb	r2, r3
 8025bf4:	7b7b      	ldrb	r3, [r7, #13]
 8025bf6:	011b      	lsls	r3, r3, #4
 8025bf8:	b25b      	sxtb	r3, r3
 8025bfa:	4313      	orrs	r3, r2
 8025bfc:	b25b      	sxtb	r3, r3
 8025bfe:	b2da      	uxtb	r2, r3
 8025c00:	687b      	ldr	r3, [r7, #4]
 8025c02:	709a      	strb	r2, [r3, #2]
        count = 0;
 8025c04:	2300      	movs	r3, #0
 8025c06:	73fb      	strb	r3, [r7, #15]
 8025c08:	e005      	b.n	8025c16 <_ZN10SideSensor12ConfirmStateEv+0x56>
    }
    else if(count < MAX_INTERRUPT_COUNT) count++;
 8025c0a:	7bfb      	ldrb	r3, [r7, #15]
 8025c0c:	2bf9      	cmp	r3, #249	; 0xf9
 8025c0e:	d802      	bhi.n	8025c16 <_ZN10SideSensor12ConfirmStateEv+0x56>
 8025c10:	7bfb      	ldrb	r3, [r7, #15]
 8025c12:	3301      	adds	r3, #1
 8025c14:	73fb      	strb	r3, [r7, #15]

    master_count_ = count;
 8025c16:	687b      	ldr	r3, [r7, #4]
 8025c18:	7bfa      	ldrb	r2, [r7, #15]
 8025c1a:	70da      	strb	r2, [r3, #3]

    if(now_state == 0x08 && count >= BLACK_BLACK_COUNT)
 8025c1c:	7b7b      	ldrb	r3, [r7, #13]
 8025c1e:	2b08      	cmp	r3, #8
 8025c20:	d10d      	bne.n	8025c3e <_ZN10SideSensor12ConfirmStateEv+0x7e>
 8025c22:	7bfb      	ldrb	r3, [r7, #15]
 8025c24:	2b13      	cmp	r3, #19
 8025c26:	d90a      	bls.n	8025c3e <_ZN10SideSensor12ConfirmStateEv+0x7e>
    {
        write_state_flags_ = (write_state_flags_ & 0xF0) | 0x08;
 8025c28:	687b      	ldr	r3, [r7, #4]
 8025c2a:	785b      	ldrb	r3, [r3, #1]
 8025c2c:	f023 030f 	bic.w	r3, r3, #15
 8025c30:	b2db      	uxtb	r3, r3
 8025c32:	f043 0308 	orr.w	r3, r3, #8
 8025c36:	b2da      	uxtb	r2, r3
 8025c38:	687b      	ldr	r3, [r7, #4]
 8025c3a:	705a      	strb	r2, [r3, #1]
 8025c3c:	e029      	b.n	8025c92 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x04 && count >= BLACK_WHITE_COUNT)
 8025c3e:	7b7b      	ldrb	r3, [r7, #13]
 8025c40:	2b04      	cmp	r3, #4
 8025c42:	d10a      	bne.n	8025c5a <_ZN10SideSensor12ConfirmStateEv+0x9a>
 8025c44:	7bfb      	ldrb	r3, [r7, #15]
 8025c46:	2b00      	cmp	r3, #0
 8025c48:	d007      	beq.n	8025c5a <_ZN10SideSensor12ConfirmStateEv+0x9a>
    {
        write_state_flags_ |= 0x04;
 8025c4a:	687b      	ldr	r3, [r7, #4]
 8025c4c:	785b      	ldrb	r3, [r3, #1]
 8025c4e:	f043 0304 	orr.w	r3, r3, #4
 8025c52:	b2da      	uxtb	r2, r3
 8025c54:	687b      	ldr	r3, [r7, #4]
 8025c56:	705a      	strb	r2, [r3, #1]
 8025c58:	e01b      	b.n	8025c92 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x02 && count >= WHITE_BLACK_COUNT)
 8025c5a:	7b7b      	ldrb	r3, [r7, #13]
 8025c5c:	2b02      	cmp	r3, #2
 8025c5e:	d10a      	bne.n	8025c76 <_ZN10SideSensor12ConfirmStateEv+0xb6>
 8025c60:	7bfb      	ldrb	r3, [r7, #15]
 8025c62:	2b00      	cmp	r3, #0
 8025c64:	d007      	beq.n	8025c76 <_ZN10SideSensor12ConfirmStateEv+0xb6>
    {
        write_state_flags_ |= 0x02;
 8025c66:	687b      	ldr	r3, [r7, #4]
 8025c68:	785b      	ldrb	r3, [r3, #1]
 8025c6a:	f043 0302 	orr.w	r3, r3, #2
 8025c6e:	b2da      	uxtb	r2, r3
 8025c70:	687b      	ldr	r3, [r7, #4]
 8025c72:	705a      	strb	r2, [r3, #1]
 8025c74:	e00d      	b.n	8025c92 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x01 && count >= WHITE_WHITE_COUNT)
 8025c76:	7b7b      	ldrb	r3, [r7, #13]
 8025c78:	2b01      	cmp	r3, #1
 8025c7a:	d10a      	bne.n	8025c92 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    {
        write_state_flags_ = (write_state_flags_ & 0xF8) | 0x01;
 8025c7c:	687b      	ldr	r3, [r7, #4]
 8025c7e:	785b      	ldrb	r3, [r3, #1]
 8025c80:	f023 0307 	bic.w	r3, r3, #7
 8025c84:	b2db      	uxtb	r3, r3
 8025c86:	f043 0301 	orr.w	r3, r3, #1
 8025c8a:	b2da      	uxtb	r2, r3
 8025c8c:	687b      	ldr	r3, [r7, #4]
 8025c8e:	705a      	strb	r2, [r3, #1]
    }
}
 8025c90:	e7ff      	b.n	8025c92 <_ZN10SideSensor12ConfirmStateEv+0xd2>
 8025c92:	bf00      	nop
 8025c94:	3714      	adds	r7, #20
 8025c96:	46bd      	mov	sp, r7
 8025c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c9c:	4770      	bx	lr

08025c9e <_ZN10SideSensor7CountUpEv>:

void SideSensor::CountUp()
{
 8025c9e:	b480      	push	{r7}
 8025ca0:	b085      	sub	sp, #20
 8025ca2:	af00      	add	r7, sp, #0
 8025ca4:	6078      	str	r0, [r7, #4]
    uint8_t state = write_state_flags_;
 8025ca6:	687b      	ldr	r3, [r7, #4]
 8025ca8:	785b      	ldrb	r3, [r3, #1]
 8025caa:	73fb      	strb	r3, [r7, #15]
    uint8_t black_flag   = (state & 0x08) >> 3;
 8025cac:	7bfb      	ldrb	r3, [r7, #15]
 8025cae:	10db      	asrs	r3, r3, #3
 8025cb0:	b2db      	uxtb	r3, r3
 8025cb2:	f003 0301 	and.w	r3, r3, #1
 8025cb6:	73bb      	strb	r3, [r7, #14]
    uint8_t goal_flag    = (state & 0x04) >> 2;
 8025cb8:	7bfb      	ldrb	r3, [r7, #15]
 8025cba:	109b      	asrs	r3, r3, #2
 8025cbc:	b2db      	uxtb	r3, r3
 8025cbe:	f003 0301 	and.w	r3, r3, #1
 8025cc2:	737b      	strb	r3, [r7, #13]
    uint8_t corner_flag  = (state & 0x02) >> 1;
 8025cc4:	7bfb      	ldrb	r3, [r7, #15]
 8025cc6:	105b      	asrs	r3, r3, #1
 8025cc8:	b2db      	uxtb	r3, r3
 8025cca:	f003 0301 	and.w	r3, r3, #1
 8025cce:	733b      	strb	r3, [r7, #12]
    uint8_t cross_flag   =  state & 0x01;
 8025cd0:	7bfb      	ldrb	r3, [r7, #15]
 8025cd2:	f003 0301 	and.w	r3, r3, #1
 8025cd6:	72fb      	strb	r3, [r7, #11]
    uint8_t goal_reach   = (state & 0x80) >> 7;
 8025cd8:	7bfb      	ldrb	r3, [r7, #15]
 8025cda:	09db      	lsrs	r3, r3, #7
 8025cdc:	72bb      	strb	r3, [r7, #10]
    uint8_t corner_reach = (state & 0x40) >> 6;
 8025cde:	7bfb      	ldrb	r3, [r7, #15]
 8025ce0:	119b      	asrs	r3, r3, #6
 8025ce2:	b2db      	uxtb	r3, r3
 8025ce4:	f003 0301 	and.w	r3, r3, #1
 8025ce8:	727b      	strb	r3, [r7, #9]
    uint8_t cross_reach  = (state & 0x20) >> 5;
 8025cea:	7bfb      	ldrb	r3, [r7, #15]
 8025cec:	115b      	asrs	r3, r3, #5
 8025cee:	b2db      	uxtb	r3, r3
 8025cf0:	f003 0301 	and.w	r3, r3, #1
 8025cf4:	723b      	strb	r3, [r7, #8]

    if(cross_flag == 0x01 && black_flag == 0x01)
 8025cf6:	7afb      	ldrb	r3, [r7, #11]
 8025cf8:	2b01      	cmp	r3, #1
 8025cfa:	d10b      	bne.n	8025d14 <_ZN10SideSensor7CountUpEv+0x76>
 8025cfc:	7bbb      	ldrb	r3, [r7, #14]
 8025cfe:	2b01      	cmp	r3, #1
 8025d00:	d108      	bne.n	8025d14 <_ZN10SideSensor7CountUpEv+0x76>
    {
        state &= 0xF7; // black_flag = false
 8025d02:	7bfb      	ldrb	r3, [r7, #15]
 8025d04:	f023 0308 	bic.w	r3, r3, #8
 8025d08:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8025d0a:	7bfb      	ldrb	r3, [r7, #15]
 8025d0c:	f043 0320 	orr.w	r3, r3, #32
 8025d10:	73fb      	strb	r3, [r7, #15]
 8025d12:	e02d      	b.n	8025d70 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && goal_reach == 0x01)
 8025d14:	7afb      	ldrb	r3, [r7, #11]
 8025d16:	2b01      	cmp	r3, #1
 8025d18:	d10b      	bne.n	8025d32 <_ZN10SideSensor7CountUpEv+0x94>
 8025d1a:	7abb      	ldrb	r3, [r7, #10]
 8025d1c:	2b01      	cmp	r3, #1
 8025d1e:	d108      	bne.n	8025d32 <_ZN10SideSensor7CountUpEv+0x94>
    {
        state &= 0x7F; // goal_reach = false
 8025d20:	7bfb      	ldrb	r3, [r7, #15]
 8025d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025d26:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8025d28:	7bfb      	ldrb	r3, [r7, #15]
 8025d2a:	f043 0320 	orr.w	r3, r3, #32
 8025d2e:	73fb      	strb	r3, [r7, #15]
 8025d30:	e01e      	b.n	8025d70 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && corner_reach == 0x01)
 8025d32:	7afb      	ldrb	r3, [r7, #11]
 8025d34:	2b01      	cmp	r3, #1
 8025d36:	d10b      	bne.n	8025d50 <_ZN10SideSensor7CountUpEv+0xb2>
 8025d38:	7a7b      	ldrb	r3, [r7, #9]
 8025d3a:	2b01      	cmp	r3, #1
 8025d3c:	d108      	bne.n	8025d50 <_ZN10SideSensor7CountUpEv+0xb2>
    {
        state &= 0xBF; // corner_reach = false
 8025d3e:	7bfb      	ldrb	r3, [r7, #15]
 8025d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8025d44:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8025d46:	7bfb      	ldrb	r3, [r7, #15]
 8025d48:	f043 0320 	orr.w	r3, r3, #32
 8025d4c:	73fb      	strb	r3, [r7, #15]
 8025d4e:	e00f      	b.n	8025d70 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_reach == 0x01 && black_flag == 0x01)
 8025d50:	7a3b      	ldrb	r3, [r7, #8]
 8025d52:	2b01      	cmp	r3, #1
 8025d54:	d10c      	bne.n	8025d70 <_ZN10SideSensor7CountUpEv+0xd2>
 8025d56:	7bbb      	ldrb	r3, [r7, #14]
 8025d58:	2b01      	cmp	r3, #1
 8025d5a:	d109      	bne.n	8025d70 <_ZN10SideSensor7CountUpEv+0xd2>
    {
        state &= 0xDF; // cross_reach = false
 8025d5c:	7bfb      	ldrb	r3, [r7, #15]
 8025d5e:	f023 0320 	bic.w	r3, r3, #32
 8025d62:	73fb      	strb	r3, [r7, #15]
        cross_line_count_++;
 8025d64:	687b      	ldr	r3, [r7, #4]
 8025d66:	799b      	ldrb	r3, [r3, #6]
 8025d68:	3301      	adds	r3, #1
 8025d6a:	b2da      	uxtb	r2, r3
 8025d6c:	687b      	ldr	r3, [r7, #4]
 8025d6e:	719a      	strb	r2, [r3, #6]
    }

    black_flag   = (state & 0x08) >> 3;
 8025d70:	7bfb      	ldrb	r3, [r7, #15]
 8025d72:	10db      	asrs	r3, r3, #3
 8025d74:	b2db      	uxtb	r3, r3
 8025d76:	f003 0301 	and.w	r3, r3, #1
 8025d7a:	73bb      	strb	r3, [r7, #14]
    goal_reach   = (state & 0x80) >> 7;
 8025d7c:	7bfb      	ldrb	r3, [r7, #15]
 8025d7e:	09db      	lsrs	r3, r3, #7
 8025d80:	72bb      	strb	r3, [r7, #10]
    corner_reach = (state & 0x40) >> 6;
 8025d82:	7bfb      	ldrb	r3, [r7, #15]
 8025d84:	119b      	asrs	r3, r3, #6
 8025d86:	b2db      	uxtb	r3, r3
 8025d88:	f003 0301 	and.w	r3, r3, #1
 8025d8c:	727b      	strb	r3, [r7, #9]
    
    if(goal_flag == 0x01 && black_flag == 0x01)
 8025d8e:	7b7b      	ldrb	r3, [r7, #13]
 8025d90:	2b01      	cmp	r3, #1
 8025d92:	d10b      	bne.n	8025dac <_ZN10SideSensor7CountUpEv+0x10e>
 8025d94:	7bbb      	ldrb	r3, [r7, #14]
 8025d96:	2b01      	cmp	r3, #1
 8025d98:	d108      	bne.n	8025dac <_ZN10SideSensor7CountUpEv+0x10e>
    {
        state &= 0xF7; // black_flag = false
 8025d9a:	7bfb      	ldrb	r3, [r7, #15]
 8025d9c:	f023 0308 	bic.w	r3, r3, #8
 8025da0:	73fb      	strb	r3, [r7, #15]
        state |= 0x80; // goal_reach = true
 8025da2:	7bfb      	ldrb	r3, [r7, #15]
 8025da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8025da8:	73fb      	strb	r3, [r7, #15]
 8025daa:	e02f      	b.n	8025e0c <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(goal_reach == 0x01 && black_flag == 0x01)
 8025dac:	7abb      	ldrb	r3, [r7, #10]
 8025dae:	2b01      	cmp	r3, #1
 8025db0:	d10d      	bne.n	8025dce <_ZN10SideSensor7CountUpEv+0x130>
 8025db2:	7bbb      	ldrb	r3, [r7, #14]
 8025db4:	2b01      	cmp	r3, #1
 8025db6:	d10a      	bne.n	8025dce <_ZN10SideSensor7CountUpEv+0x130>
    {
        state &= 0x7F; // goal_reach = false
 8025db8:	7bfb      	ldrb	r3, [r7, #15]
 8025dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025dbe:	73fb      	strb	r3, [r7, #15]
        goal_marker_count_++;
 8025dc0:	687b      	ldr	r3, [r7, #4]
 8025dc2:	791b      	ldrb	r3, [r3, #4]
 8025dc4:	3301      	adds	r3, #1
 8025dc6:	b2da      	uxtb	r2, r3
 8025dc8:	687b      	ldr	r3, [r7, #4]
 8025dca:	711a      	strb	r2, [r3, #4]
 8025dcc:	e01e      	b.n	8025e0c <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_flag == 0x01 && black_flag == 0x01)
 8025dce:	7b3b      	ldrb	r3, [r7, #12]
 8025dd0:	2b01      	cmp	r3, #1
 8025dd2:	d10b      	bne.n	8025dec <_ZN10SideSensor7CountUpEv+0x14e>
 8025dd4:	7bbb      	ldrb	r3, [r7, #14]
 8025dd6:	2b01      	cmp	r3, #1
 8025dd8:	d108      	bne.n	8025dec <_ZN10SideSensor7CountUpEv+0x14e>
    {
        state &= 0xF7; // black_flag = false
 8025dda:	7bfb      	ldrb	r3, [r7, #15]
 8025ddc:	f023 0308 	bic.w	r3, r3, #8
 8025de0:	73fb      	strb	r3, [r7, #15]
        state |= 0x40; // corner_reach = true
 8025de2:	7bfb      	ldrb	r3, [r7, #15]
 8025de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025de8:	73fb      	strb	r3, [r7, #15]
 8025dea:	e00f      	b.n	8025e0c <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_reach == 0x01 && black_flag == 0x01)
 8025dec:	7a7b      	ldrb	r3, [r7, #9]
 8025dee:	2b01      	cmp	r3, #1
 8025df0:	d10c      	bne.n	8025e0c <_ZN10SideSensor7CountUpEv+0x16e>
 8025df2:	7bbb      	ldrb	r3, [r7, #14]
 8025df4:	2b01      	cmp	r3, #1
 8025df6:	d109      	bne.n	8025e0c <_ZN10SideSensor7CountUpEv+0x16e>
    {
        state &= 0xBF; // corner_reach = false
 8025df8:	7bfb      	ldrb	r3, [r7, #15]
 8025dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8025dfe:	73fb      	strb	r3, [r7, #15]
        corner_marker_count_++;
 8025e00:	687b      	ldr	r3, [r7, #4]
 8025e02:	795b      	ldrb	r3, [r3, #5]
 8025e04:	3301      	adds	r3, #1
 8025e06:	b2da      	uxtb	r2, r3
 8025e08:	687b      	ldr	r3, [r7, #4]
 8025e0a:	715a      	strb	r2, [r3, #5]
    }

    write_state_flags_ = state;
 8025e0c:	687b      	ldr	r3, [r7, #4]
 8025e0e:	7bfa      	ldrb	r2, [r7, #15]
 8025e10:	705a      	strb	r2, [r3, #1]
}
 8025e12:	bf00      	nop
 8025e14:	3714      	adds	r7, #20
 8025e16:	46bd      	mov	sp, r7
 8025e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e1c:	4770      	bx	lr

08025e1e <_ZN10SideSensor18GetGoalMarkerCountEv>:

uint8_t SideSensor::GetGoalMarkerCount()
{
 8025e1e:	b480      	push	{r7}
 8025e20:	b083      	sub	sp, #12
 8025e22:	af00      	add	r7, sp, #0
 8025e24:	6078      	str	r0, [r7, #4]
    return goal_marker_count_;
 8025e26:	687b      	ldr	r3, [r7, #4]
 8025e28:	791b      	ldrb	r3, [r3, #4]
}
 8025e2a:	4618      	mov	r0, r3
 8025e2c:	370c      	adds	r7, #12
 8025e2e:	46bd      	mov	sp, r7
 8025e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e34:	4770      	bx	lr

08025e36 <_ZN10SideSensor20GetCornerMarkerCountEv>:

uint8_t SideSensor::GetCornerMarkerCount()
{
 8025e36:	b480      	push	{r7}
 8025e38:	b083      	sub	sp, #12
 8025e3a:	af00      	add	r7, sp, #0
 8025e3c:	6078      	str	r0, [r7, #4]
    return corner_marker_count_;
 8025e3e:	687b      	ldr	r3, [r7, #4]
 8025e40:	795b      	ldrb	r3, [r3, #5]
}
 8025e42:	4618      	mov	r0, r3
 8025e44:	370c      	adds	r7, #12
 8025e46:	46bd      	mov	sp, r7
 8025e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e4c:	4770      	bx	lr

08025e4e <_ZN10SideSensor17GetCrossLineCountEv>:

uint8_t SideSensor::GetCrossLineCount()
{
 8025e4e:	b480      	push	{r7}
 8025e50:	b083      	sub	sp, #12
 8025e52:	af00      	add	r7, sp, #0
 8025e54:	6078      	str	r0, [r7, #4]
    return cross_line_count_;
 8025e56:	687b      	ldr	r3, [r7, #4]
 8025e58:	799b      	ldrb	r3, [r3, #6]
}
 8025e5a:	4618      	mov	r0, r3
 8025e5c:	370c      	adds	r7, #12
 8025e5e:	46bd      	mov	sp, r7
 8025e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e64:	4770      	bx	lr
	...

08025e68 <_ZN10SideSensor7MonitorEv>:

#ifdef DEBUG_MODE
void SideSensor::Monitor()
{
 8025e68:	b480      	push	{r7}
 8025e6a:	b083      	sub	sp, #12
 8025e6c:	af00      	add	r7, sp, #0
 8025e6e:	6078      	str	r0, [r7, #4]
    /* read_state_flags_ */
    g_side_pre_state = (read_state_flags_ & 0xF0) >> 4;
 8025e70:	687b      	ldr	r3, [r7, #4]
 8025e72:	781b      	ldrb	r3, [r3, #0]
 8025e74:	091b      	lsrs	r3, r3, #4
 8025e76:	b2da      	uxtb	r2, r3
 8025e78:	4b3a      	ldr	r3, [pc, #232]	; (8025f64 <_ZN10SideSensor7MonitorEv+0xfc>)
 8025e7a:	701a      	strb	r2, [r3, #0]
    g_side_now_state =  read_state_flags_ & 0x0F;
 8025e7c:	687b      	ldr	r3, [r7, #4]
 8025e7e:	781b      	ldrb	r3, [r3, #0]
 8025e80:	f003 030f 	and.w	r3, r3, #15
 8025e84:	b2da      	uxtb	r2, r3
 8025e86:	4b38      	ldr	r3, [pc, #224]	; (8025f68 <_ZN10SideSensor7MonitorEv+0x100>)
 8025e88:	701a      	strb	r2, [r3, #0]

    if(g_side_pre_state != g_side_now_state) g_side_change_state_count++;
 8025e8a:	4b36      	ldr	r3, [pc, #216]	; (8025f64 <_ZN10SideSensor7MonitorEv+0xfc>)
 8025e8c:	781a      	ldrb	r2, [r3, #0]
 8025e8e:	4b36      	ldr	r3, [pc, #216]	; (8025f68 <_ZN10SideSensor7MonitorEv+0x100>)
 8025e90:	781b      	ldrb	r3, [r3, #0]
 8025e92:	429a      	cmp	r2, r3
 8025e94:	d004      	beq.n	8025ea0 <_ZN10SideSensor7MonitorEv+0x38>
 8025e96:	4b35      	ldr	r3, [pc, #212]	; (8025f6c <_ZN10SideSensor7MonitorEv+0x104>)
 8025e98:	681b      	ldr	r3, [r3, #0]
 8025e9a:	3301      	adds	r3, #1
 8025e9c:	4a33      	ldr	r2, [pc, #204]	; (8025f6c <_ZN10SideSensor7MonitorEv+0x104>)
 8025e9e:	6013      	str	r3, [r2, #0]

    /* write_state_flags_ upper bit */
    g_side_goal_reach   = (write_state_flags_ & 0x80) >> 7;
 8025ea0:	687b      	ldr	r3, [r7, #4]
 8025ea2:	785b      	ldrb	r3, [r3, #1]
 8025ea4:	09db      	lsrs	r3, r3, #7
 8025ea6:	b2da      	uxtb	r2, r3
 8025ea8:	4b31      	ldr	r3, [pc, #196]	; (8025f70 <_ZN10SideSensor7MonitorEv+0x108>)
 8025eaa:	701a      	strb	r2, [r3, #0]
    g_side_corner_reach = (write_state_flags_ & 0x40) >> 6;
 8025eac:	687b      	ldr	r3, [r7, #4]
 8025eae:	785b      	ldrb	r3, [r3, #1]
 8025eb0:	119b      	asrs	r3, r3, #6
 8025eb2:	b2db      	uxtb	r3, r3
 8025eb4:	f003 0301 	and.w	r3, r3, #1
 8025eb8:	b2da      	uxtb	r2, r3
 8025eba:	4b2e      	ldr	r3, [pc, #184]	; (8025f74 <_ZN10SideSensor7MonitorEv+0x10c>)
 8025ebc:	701a      	strb	r2, [r3, #0]
    g_side_cross_reach  = (write_state_flags_ & 0x20) >> 5;
 8025ebe:	687b      	ldr	r3, [r7, #4]
 8025ec0:	785b      	ldrb	r3, [r3, #1]
 8025ec2:	115b      	asrs	r3, r3, #5
 8025ec4:	b2db      	uxtb	r3, r3
 8025ec6:	f003 0301 	and.w	r3, r3, #1
 8025eca:	b2da      	uxtb	r2, r3
 8025ecc:	4b2a      	ldr	r3, [pc, #168]	; (8025f78 <_ZN10SideSensor7MonitorEv+0x110>)
 8025ece:	701a      	strb	r2, [r3, #0]

    /* write_state_flags_ lower bit */
    g_side_black_flag  = (write_state_flags_ & 0x08) >> 3;
 8025ed0:	687b      	ldr	r3, [r7, #4]
 8025ed2:	785b      	ldrb	r3, [r3, #1]
 8025ed4:	10db      	asrs	r3, r3, #3
 8025ed6:	b2db      	uxtb	r3, r3
 8025ed8:	f003 0301 	and.w	r3, r3, #1
 8025edc:	b2da      	uxtb	r2, r3
 8025ede:	4b27      	ldr	r3, [pc, #156]	; (8025f7c <_ZN10SideSensor7MonitorEv+0x114>)
 8025ee0:	701a      	strb	r2, [r3, #0]
    g_side_goal_flag   = (write_state_flags_ & 0x04) >> 2;
 8025ee2:	687b      	ldr	r3, [r7, #4]
 8025ee4:	785b      	ldrb	r3, [r3, #1]
 8025ee6:	109b      	asrs	r3, r3, #2
 8025ee8:	b2db      	uxtb	r3, r3
 8025eea:	f003 0301 	and.w	r3, r3, #1
 8025eee:	b2da      	uxtb	r2, r3
 8025ef0:	4b23      	ldr	r3, [pc, #140]	; (8025f80 <_ZN10SideSensor7MonitorEv+0x118>)
 8025ef2:	701a      	strb	r2, [r3, #0]
    g_side_corner_flag = (write_state_flags_ & 0x02) >> 1;
 8025ef4:	687b      	ldr	r3, [r7, #4]
 8025ef6:	785b      	ldrb	r3, [r3, #1]
 8025ef8:	105b      	asrs	r3, r3, #1
 8025efa:	b2db      	uxtb	r3, r3
 8025efc:	f003 0301 	and.w	r3, r3, #1
 8025f00:	b2da      	uxtb	r2, r3
 8025f02:	4b20      	ldr	r3, [pc, #128]	; (8025f84 <_ZN10SideSensor7MonitorEv+0x11c>)
 8025f04:	701a      	strb	r2, [r3, #0]
    g_side_cross_flag  =  write_state_flags_ & 0x01;
 8025f06:	687b      	ldr	r3, [r7, #4]
 8025f08:	785b      	ldrb	r3, [r3, #1]
 8025f0a:	f003 0301 	and.w	r3, r3, #1
 8025f0e:	b2da      	uxtb	r2, r3
 8025f10:	4b1d      	ldr	r3, [pc, #116]	; (8025f88 <_ZN10SideSensor7MonitorEv+0x120>)
 8025f12:	701a      	strb	r2, [r3, #0]

    /* exception_flags_ */
    g_side_before_noise_state = (exception_flags_ & 0xF0) >> 4;
 8025f14:	687b      	ldr	r3, [r7, #4]
 8025f16:	789b      	ldrb	r3, [r3, #2]
 8025f18:	091b      	lsrs	r3, r3, #4
 8025f1a:	b2da      	uxtb	r2, r3
 8025f1c:	4b1b      	ldr	r3, [pc, #108]	; (8025f8c <_ZN10SideSensor7MonitorEv+0x124>)
 8025f1e:	701a      	strb	r2, [r3, #0]
    g_side_noise_count        = (exception_flags_ & 0x0C) >> 2;
 8025f20:	687b      	ldr	r3, [r7, #4]
 8025f22:	789b      	ldrb	r3, [r3, #2]
 8025f24:	109b      	asrs	r3, r3, #2
 8025f26:	b2db      	uxtb	r3, r3
 8025f28:	f003 0303 	and.w	r3, r3, #3
 8025f2c:	b2da      	uxtb	r2, r3
 8025f2e:	4b18      	ldr	r3, [pc, #96]	; (8025f90 <_ZN10SideSensor7MonitorEv+0x128>)
 8025f30:	701a      	strb	r2, [r3, #0]
    g_side_ignore_flag        =  exception_flags_ & 0x01;
 8025f32:	687b      	ldr	r3, [r7, #4]
 8025f34:	789b      	ldrb	r3, [r3, #2]
 8025f36:	f003 0301 	and.w	r3, r3, #1
 8025f3a:	b2da      	uxtb	r2, r3
 8025f3c:	4b15      	ldr	r3, [pc, #84]	; (8025f94 <_ZN10SideSensor7MonitorEv+0x12c>)
 8025f3e:	701a      	strb	r2, [r3, #0]

    g_goal_count   = goal_marker_count_;
 8025f40:	687b      	ldr	r3, [r7, #4]
 8025f42:	791a      	ldrb	r2, [r3, #4]
 8025f44:	4b14      	ldr	r3, [pc, #80]	; (8025f98 <_ZN10SideSensor7MonitorEv+0x130>)
 8025f46:	701a      	strb	r2, [r3, #0]
    g_corner_count = corner_marker_count_;
 8025f48:	687b      	ldr	r3, [r7, #4]
 8025f4a:	795a      	ldrb	r2, [r3, #5]
 8025f4c:	4b13      	ldr	r3, [pc, #76]	; (8025f9c <_ZN10SideSensor7MonitorEv+0x134>)
 8025f4e:	701a      	strb	r2, [r3, #0]
    g_cross_count  = cross_line_count_;
 8025f50:	687b      	ldr	r3, [r7, #4]
 8025f52:	799a      	ldrb	r2, [r3, #6]
 8025f54:	4b12      	ldr	r3, [pc, #72]	; (8025fa0 <_ZN10SideSensor7MonitorEv+0x138>)
 8025f56:	701a      	strb	r2, [r3, #0]
}
 8025f58:	bf00      	nop
 8025f5a:	370c      	adds	r7, #12
 8025f5c:	46bd      	mov	sp, r7
 8025f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f62:	4770      	bx	lr
 8025f64:	200002bc 	.word	0x200002bc
 8025f68:	200002bd 	.word	0x200002bd
 8025f6c:	200002c0 	.word	0x200002c0
 8025f70:	200002c4 	.word	0x200002c4
 8025f74:	200002c5 	.word	0x200002c5
 8025f78:	200002c6 	.word	0x200002c6
 8025f7c:	200002c7 	.word	0x200002c7
 8025f80:	200002c8 	.word	0x200002c8
 8025f84:	200002c9 	.word	0x200002c9
 8025f88:	200002ca 	.word	0x200002ca
 8025f8c:	200002cb 	.word	0x200002cb
 8025f90:	200002cc 	.word	0x200002cc
 8025f94:	200002cd 	.word	0x200002cd
 8025f98:	200002ce 	.word	0x200002ce
 8025f9c:	200002cf 	.word	0x200002cf
 8025fa0:	200002d0 	.word	0x200002d0

08025fa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8025fa4:	b480      	push	{r7}
 8025fa6:	b083      	sub	sp, #12
 8025fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8025faa:	2300      	movs	r3, #0
 8025fac:	607b      	str	r3, [r7, #4]
 8025fae:	4b10      	ldr	r3, [pc, #64]	; (8025ff0 <HAL_MspInit+0x4c>)
 8025fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025fb2:	4a0f      	ldr	r2, [pc, #60]	; (8025ff0 <HAL_MspInit+0x4c>)
 8025fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8025fba:	4b0d      	ldr	r3, [pc, #52]	; (8025ff0 <HAL_MspInit+0x4c>)
 8025fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8025fc2:	607b      	str	r3, [r7, #4]
 8025fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8025fc6:	2300      	movs	r3, #0
 8025fc8:	603b      	str	r3, [r7, #0]
 8025fca:	4b09      	ldr	r3, [pc, #36]	; (8025ff0 <HAL_MspInit+0x4c>)
 8025fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025fce:	4a08      	ldr	r2, [pc, #32]	; (8025ff0 <HAL_MspInit+0x4c>)
 8025fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8025fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8025fd6:	4b06      	ldr	r3, [pc, #24]	; (8025ff0 <HAL_MspInit+0x4c>)
 8025fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025fde:	603b      	str	r3, [r7, #0]
 8025fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8025fe2:	bf00      	nop
 8025fe4:	370c      	adds	r7, #12
 8025fe6:	46bd      	mov	sp, r7
 8025fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fec:	4770      	bx	lr
 8025fee:	bf00      	nop
 8025ff0:	40023800 	.word	0x40023800

08025ff4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8025ff4:	b580      	push	{r7, lr}
 8025ff6:	b08a      	sub	sp, #40	; 0x28
 8025ff8:	af00      	add	r7, sp, #0
 8025ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025ffc:	f107 0314 	add.w	r3, r7, #20
 8026000:	2200      	movs	r2, #0
 8026002:	601a      	str	r2, [r3, #0]
 8026004:	605a      	str	r2, [r3, #4]
 8026006:	609a      	str	r2, [r3, #8]
 8026008:	60da      	str	r2, [r3, #12]
 802600a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 802600c:	687b      	ldr	r3, [r7, #4]
 802600e:	681b      	ldr	r3, [r3, #0]
 8026010:	4a3c      	ldr	r2, [pc, #240]	; (8026104 <HAL_ADC_MspInit+0x110>)
 8026012:	4293      	cmp	r3, r2
 8026014:	d171      	bne.n	80260fa <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8026016:	2300      	movs	r3, #0
 8026018:	613b      	str	r3, [r7, #16]
 802601a:	4b3b      	ldr	r3, [pc, #236]	; (8026108 <HAL_ADC_MspInit+0x114>)
 802601c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802601e:	4a3a      	ldr	r2, [pc, #232]	; (8026108 <HAL_ADC_MspInit+0x114>)
 8026020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026024:	6453      	str	r3, [r2, #68]	; 0x44
 8026026:	4b38      	ldr	r3, [pc, #224]	; (8026108 <HAL_ADC_MspInit+0x114>)
 8026028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802602a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802602e:	613b      	str	r3, [r7, #16]
 8026030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8026032:	2300      	movs	r3, #0
 8026034:	60fb      	str	r3, [r7, #12]
 8026036:	4b34      	ldr	r3, [pc, #208]	; (8026108 <HAL_ADC_MspInit+0x114>)
 8026038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802603a:	4a33      	ldr	r2, [pc, #204]	; (8026108 <HAL_ADC_MspInit+0x114>)
 802603c:	f043 0304 	orr.w	r3, r3, #4
 8026040:	6313      	str	r3, [r2, #48]	; 0x30
 8026042:	4b31      	ldr	r3, [pc, #196]	; (8026108 <HAL_ADC_MspInit+0x114>)
 8026044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026046:	f003 0304 	and.w	r3, r3, #4
 802604a:	60fb      	str	r3, [r7, #12]
 802604c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802604e:	2300      	movs	r3, #0
 8026050:	60bb      	str	r3, [r7, #8]
 8026052:	4b2d      	ldr	r3, [pc, #180]	; (8026108 <HAL_ADC_MspInit+0x114>)
 8026054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026056:	4a2c      	ldr	r2, [pc, #176]	; (8026108 <HAL_ADC_MspInit+0x114>)
 8026058:	f043 0301 	orr.w	r3, r3, #1
 802605c:	6313      	str	r3, [r2, #48]	; 0x30
 802605e:	4b2a      	ldr	r3, [pc, #168]	; (8026108 <HAL_ADC_MspInit+0x114>)
 8026060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026062:	f003 0301 	and.w	r3, r3, #1
 8026066:	60bb      	str	r3, [r7, #8]
 8026068:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 802606a:	233f      	movs	r3, #63	; 0x3f
 802606c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802606e:	2303      	movs	r3, #3
 8026070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026072:	2300      	movs	r3, #0
 8026074:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8026076:	f107 0314 	add.w	r3, r7, #20
 802607a:	4619      	mov	r1, r3
 802607c:	4823      	ldr	r0, [pc, #140]	; (802610c <HAL_ADC_MspInit+0x118>)
 802607e:	f002 fa85 	bl	802858c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8026082:	23ff      	movs	r3, #255	; 0xff
 8026084:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8026086:	2303      	movs	r3, #3
 8026088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802608a:	2300      	movs	r3, #0
 802608c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802608e:	f107 0314 	add.w	r3, r7, #20
 8026092:	4619      	mov	r1, r3
 8026094:	481e      	ldr	r0, [pc, #120]	; (8026110 <HAL_ADC_MspInit+0x11c>)
 8026096:	f002 fa79 	bl	802858c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 802609a:	4b1e      	ldr	r3, [pc, #120]	; (8026114 <HAL_ADC_MspInit+0x120>)
 802609c:	4a1e      	ldr	r2, [pc, #120]	; (8026118 <HAL_ADC_MspInit+0x124>)
 802609e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80260a0:	4b1c      	ldr	r3, [pc, #112]	; (8026114 <HAL_ADC_MspInit+0x120>)
 80260a2:	2200      	movs	r2, #0
 80260a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80260a6:	4b1b      	ldr	r3, [pc, #108]	; (8026114 <HAL_ADC_MspInit+0x120>)
 80260a8:	2200      	movs	r2, #0
 80260aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80260ac:	4b19      	ldr	r3, [pc, #100]	; (8026114 <HAL_ADC_MspInit+0x120>)
 80260ae:	2200      	movs	r2, #0
 80260b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80260b2:	4b18      	ldr	r3, [pc, #96]	; (8026114 <HAL_ADC_MspInit+0x120>)
 80260b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80260b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80260ba:	4b16      	ldr	r3, [pc, #88]	; (8026114 <HAL_ADC_MspInit+0x120>)
 80260bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80260c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80260c2:	4b14      	ldr	r3, [pc, #80]	; (8026114 <HAL_ADC_MspInit+0x120>)
 80260c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80260c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80260ca:	4b12      	ldr	r3, [pc, #72]	; (8026114 <HAL_ADC_MspInit+0x120>)
 80260cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80260d0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80260d2:	4b10      	ldr	r3, [pc, #64]	; (8026114 <HAL_ADC_MspInit+0x120>)
 80260d4:	2200      	movs	r2, #0
 80260d6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80260d8:	4b0e      	ldr	r3, [pc, #56]	; (8026114 <HAL_ADC_MspInit+0x120>)
 80260da:	2200      	movs	r2, #0
 80260dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80260de:	480d      	ldr	r0, [pc, #52]	; (8026114 <HAL_ADC_MspInit+0x120>)
 80260e0:	f001 fc10 	bl	8027904 <HAL_DMA_Init>
 80260e4:	4603      	mov	r3, r0
 80260e6:	2b00      	cmp	r3, #0
 80260e8:	d001      	beq.n	80260ee <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80260ea:	f7fe fa57 	bl	802459c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80260ee:	687b      	ldr	r3, [r7, #4]
 80260f0:	4a08      	ldr	r2, [pc, #32]	; (8026114 <HAL_ADC_MspInit+0x120>)
 80260f2:	639a      	str	r2, [r3, #56]	; 0x38
 80260f4:	4a07      	ldr	r2, [pc, #28]	; (8026114 <HAL_ADC_MspInit+0x120>)
 80260f6:	687b      	ldr	r3, [r7, #4]
 80260f8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80260fa:	bf00      	nop
 80260fc:	3728      	adds	r7, #40	; 0x28
 80260fe:	46bd      	mov	sp, r7
 8026100:	bd80      	pop	{r7, pc}
 8026102:	bf00      	nop
 8026104:	40012000 	.word	0x40012000
 8026108:	40023800 	.word	0x40023800
 802610c:	40020800 	.word	0x40020800
 8026110:	40020000 	.word	0x40020000
 8026114:	20011354 	.word	0x20011354
 8026118:	40026410 	.word	0x40026410

0802611c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 802611c:	b580      	push	{r7, lr}
 802611e:	b08a      	sub	sp, #40	; 0x28
 8026120:	af00      	add	r7, sp, #0
 8026122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026124:	f107 0314 	add.w	r3, r7, #20
 8026128:	2200      	movs	r2, #0
 802612a:	601a      	str	r2, [r3, #0]
 802612c:	605a      	str	r2, [r3, #4]
 802612e:	609a      	str	r2, [r3, #8]
 8026130:	60da      	str	r2, [r3, #12]
 8026132:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8026134:	687b      	ldr	r3, [r7, #4]
 8026136:	681b      	ldr	r3, [r3, #0]
 8026138:	4a19      	ldr	r2, [pc, #100]	; (80261a0 <HAL_I2C_MspInit+0x84>)
 802613a:	4293      	cmp	r3, r2
 802613c:	d12c      	bne.n	8026198 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802613e:	2300      	movs	r3, #0
 8026140:	613b      	str	r3, [r7, #16]
 8026142:	4b18      	ldr	r3, [pc, #96]	; (80261a4 <HAL_I2C_MspInit+0x88>)
 8026144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026146:	4a17      	ldr	r2, [pc, #92]	; (80261a4 <HAL_I2C_MspInit+0x88>)
 8026148:	f043 0302 	orr.w	r3, r3, #2
 802614c:	6313      	str	r3, [r2, #48]	; 0x30
 802614e:	4b15      	ldr	r3, [pc, #84]	; (80261a4 <HAL_I2C_MspInit+0x88>)
 8026150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026152:	f003 0302 	and.w	r3, r3, #2
 8026156:	613b      	str	r3, [r7, #16]
 8026158:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802615a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802615e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8026160:	2312      	movs	r3, #18
 8026162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8026164:	2301      	movs	r3, #1
 8026166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8026168:	2303      	movs	r3, #3
 802616a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 802616c:	2304      	movs	r3, #4
 802616e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8026170:	f107 0314 	add.w	r3, r7, #20
 8026174:	4619      	mov	r1, r3
 8026176:	480c      	ldr	r0, [pc, #48]	; (80261a8 <HAL_I2C_MspInit+0x8c>)
 8026178:	f002 fa08 	bl	802858c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 802617c:	2300      	movs	r3, #0
 802617e:	60fb      	str	r3, [r7, #12]
 8026180:	4b08      	ldr	r3, [pc, #32]	; (80261a4 <HAL_I2C_MspInit+0x88>)
 8026182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026184:	4a07      	ldr	r2, [pc, #28]	; (80261a4 <HAL_I2C_MspInit+0x88>)
 8026186:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802618a:	6413      	str	r3, [r2, #64]	; 0x40
 802618c:	4b05      	ldr	r3, [pc, #20]	; (80261a4 <HAL_I2C_MspInit+0x88>)
 802618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026194:	60fb      	str	r3, [r7, #12]
 8026196:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8026198:	bf00      	nop
 802619a:	3728      	adds	r7, #40	; 0x28
 802619c:	46bd      	mov	sp, r7
 802619e:	bd80      	pop	{r7, pc}
 80261a0:	40005800 	.word	0x40005800
 80261a4:	40023800 	.word	0x40023800
 80261a8:	40020400 	.word	0x40020400

080261ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80261ac:	b580      	push	{r7, lr}
 80261ae:	b08a      	sub	sp, #40	; 0x28
 80261b0:	af00      	add	r7, sp, #0
 80261b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80261b4:	f107 0314 	add.w	r3, r7, #20
 80261b8:	2200      	movs	r2, #0
 80261ba:	601a      	str	r2, [r3, #0]
 80261bc:	605a      	str	r2, [r3, #4]
 80261be:	609a      	str	r2, [r3, #8]
 80261c0:	60da      	str	r2, [r3, #12]
 80261c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80261c4:	687b      	ldr	r3, [r7, #4]
 80261c6:	681b      	ldr	r3, [r3, #0]
 80261c8:	4a19      	ldr	r2, [pc, #100]	; (8026230 <HAL_SPI_MspInit+0x84>)
 80261ca:	4293      	cmp	r3, r2
 80261cc:	d12c      	bne.n	8026228 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80261ce:	2300      	movs	r3, #0
 80261d0:	613b      	str	r3, [r7, #16]
 80261d2:	4b18      	ldr	r3, [pc, #96]	; (8026234 <HAL_SPI_MspInit+0x88>)
 80261d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80261d6:	4a17      	ldr	r2, [pc, #92]	; (8026234 <HAL_SPI_MspInit+0x88>)
 80261d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80261dc:	6413      	str	r3, [r2, #64]	; 0x40
 80261de:	4b15      	ldr	r3, [pc, #84]	; (8026234 <HAL_SPI_MspInit+0x88>)
 80261e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80261e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80261e6:	613b      	str	r3, [r7, #16]
 80261e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80261ea:	2300      	movs	r3, #0
 80261ec:	60fb      	str	r3, [r7, #12]
 80261ee:	4b11      	ldr	r3, [pc, #68]	; (8026234 <HAL_SPI_MspInit+0x88>)
 80261f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261f2:	4a10      	ldr	r2, [pc, #64]	; (8026234 <HAL_SPI_MspInit+0x88>)
 80261f4:	f043 0304 	orr.w	r3, r3, #4
 80261f8:	6313      	str	r3, [r2, #48]	; 0x30
 80261fa:	4b0e      	ldr	r3, [pc, #56]	; (8026234 <HAL_SPI_MspInit+0x88>)
 80261fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261fe:	f003 0304 	and.w	r3, r3, #4
 8026202:	60fb      	str	r3, [r7, #12]
 8026204:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8026206:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 802620a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802620c:	2302      	movs	r3, #2
 802620e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026210:	2300      	movs	r3, #0
 8026212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8026214:	2303      	movs	r3, #3
 8026216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8026218:	2306      	movs	r3, #6
 802621a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802621c:	f107 0314 	add.w	r3, r7, #20
 8026220:	4619      	mov	r1, r3
 8026222:	4805      	ldr	r0, [pc, #20]	; (8026238 <HAL_SPI_MspInit+0x8c>)
 8026224:	f002 f9b2 	bl	802858c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8026228:	bf00      	nop
 802622a:	3728      	adds	r7, #40	; 0x28
 802622c:	46bd      	mov	sp, r7
 802622e:	bd80      	pop	{r7, pc}
 8026230:	40003c00 	.word	0x40003c00
 8026234:	40023800 	.word	0x40023800
 8026238:	40020800 	.word	0x40020800

0802623c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 802623c:	b480      	push	{r7}
 802623e:	b087      	sub	sp, #28
 8026240:	af00      	add	r7, sp, #0
 8026242:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8026244:	687b      	ldr	r3, [r7, #4]
 8026246:	681b      	ldr	r3, [r3, #0]
 8026248:	4a1f      	ldr	r2, [pc, #124]	; (80262c8 <HAL_TIM_PWM_MspInit+0x8c>)
 802624a:	4293      	cmp	r3, r2
 802624c:	d10e      	bne.n	802626c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 802624e:	2300      	movs	r3, #0
 8026250:	617b      	str	r3, [r7, #20]
 8026252:	4b1e      	ldr	r3, [pc, #120]	; (80262cc <HAL_TIM_PWM_MspInit+0x90>)
 8026254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026256:	4a1d      	ldr	r2, [pc, #116]	; (80262cc <HAL_TIM_PWM_MspInit+0x90>)
 8026258:	f043 0301 	orr.w	r3, r3, #1
 802625c:	6453      	str	r3, [r2, #68]	; 0x44
 802625e:	4b1b      	ldr	r3, [pc, #108]	; (80262cc <HAL_TIM_PWM_MspInit+0x90>)
 8026260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026262:	f003 0301 	and.w	r3, r3, #1
 8026266:	617b      	str	r3, [r7, #20]
 8026268:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 802626a:	e026      	b.n	80262ba <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 802626c:	687b      	ldr	r3, [r7, #4]
 802626e:	681b      	ldr	r3, [r3, #0]
 8026270:	4a17      	ldr	r2, [pc, #92]	; (80262d0 <HAL_TIM_PWM_MspInit+0x94>)
 8026272:	4293      	cmp	r3, r2
 8026274:	d10e      	bne.n	8026294 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8026276:	2300      	movs	r3, #0
 8026278:	613b      	str	r3, [r7, #16]
 802627a:	4b14      	ldr	r3, [pc, #80]	; (80262cc <HAL_TIM_PWM_MspInit+0x90>)
 802627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802627e:	4a13      	ldr	r2, [pc, #76]	; (80262cc <HAL_TIM_PWM_MspInit+0x90>)
 8026280:	f043 0302 	orr.w	r3, r3, #2
 8026284:	6413      	str	r3, [r2, #64]	; 0x40
 8026286:	4b11      	ldr	r3, [pc, #68]	; (80262cc <HAL_TIM_PWM_MspInit+0x90>)
 8026288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802628a:	f003 0302 	and.w	r3, r3, #2
 802628e:	613b      	str	r3, [r7, #16]
 8026290:	693b      	ldr	r3, [r7, #16]
}
 8026292:	e012      	b.n	80262ba <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8026294:	687b      	ldr	r3, [r7, #4]
 8026296:	681b      	ldr	r3, [r3, #0]
 8026298:	4a0e      	ldr	r2, [pc, #56]	; (80262d4 <HAL_TIM_PWM_MspInit+0x98>)
 802629a:	4293      	cmp	r3, r2
 802629c:	d10d      	bne.n	80262ba <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 802629e:	2300      	movs	r3, #0
 80262a0:	60fb      	str	r3, [r7, #12]
 80262a2:	4b0a      	ldr	r3, [pc, #40]	; (80262cc <HAL_TIM_PWM_MspInit+0x90>)
 80262a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80262a6:	4a09      	ldr	r2, [pc, #36]	; (80262cc <HAL_TIM_PWM_MspInit+0x90>)
 80262a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80262ac:	6413      	str	r3, [r2, #64]	; 0x40
 80262ae:	4b07      	ldr	r3, [pc, #28]	; (80262cc <HAL_TIM_PWM_MspInit+0x90>)
 80262b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80262b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80262b6:	60fb      	str	r3, [r7, #12]
 80262b8:	68fb      	ldr	r3, [r7, #12]
}
 80262ba:	bf00      	nop
 80262bc:	371c      	adds	r7, #28
 80262be:	46bd      	mov	sp, r7
 80262c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262c4:	4770      	bx	lr
 80262c6:	bf00      	nop
 80262c8:	40010000 	.word	0x40010000
 80262cc:	40023800 	.word	0x40023800
 80262d0:	40000400 	.word	0x40000400
 80262d4:	40001800 	.word	0x40001800

080262d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80262d8:	b580      	push	{r7, lr}
 80262da:	b088      	sub	sp, #32
 80262dc:	af00      	add	r7, sp, #0
 80262de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80262e0:	687b      	ldr	r3, [r7, #4]
 80262e2:	681b      	ldr	r3, [r3, #0]
 80262e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80262e8:	d116      	bne.n	8026318 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80262ea:	2300      	movs	r3, #0
 80262ec:	61fb      	str	r3, [r7, #28]
 80262ee:	4b40      	ldr	r3, [pc, #256]	; (80263f0 <HAL_TIM_Base_MspInit+0x118>)
 80262f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80262f2:	4a3f      	ldr	r2, [pc, #252]	; (80263f0 <HAL_TIM_Base_MspInit+0x118>)
 80262f4:	f043 0301 	orr.w	r3, r3, #1
 80262f8:	6413      	str	r3, [r2, #64]	; 0x40
 80262fa:	4b3d      	ldr	r3, [pc, #244]	; (80263f0 <HAL_TIM_Base_MspInit+0x118>)
 80262fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80262fe:	f003 0301 	and.w	r3, r3, #1
 8026302:	61fb      	str	r3, [r7, #28]
 8026304:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8026306:	2200      	movs	r2, #0
 8026308:	2100      	movs	r1, #0
 802630a:	201c      	movs	r0, #28
 802630c:	f001 fac3 	bl	8027896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8026310:	201c      	movs	r0, #28
 8026312:	f001 fadc 	bl	80278ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8026316:	e066      	b.n	80263e6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8026318:	687b      	ldr	r3, [r7, #4]
 802631a:	681b      	ldr	r3, [r3, #0]
 802631c:	4a35      	ldr	r2, [pc, #212]	; (80263f4 <HAL_TIM_Base_MspInit+0x11c>)
 802631e:	4293      	cmp	r3, r2
 8026320:	d116      	bne.n	8026350 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8026322:	2300      	movs	r3, #0
 8026324:	61bb      	str	r3, [r7, #24]
 8026326:	4b32      	ldr	r3, [pc, #200]	; (80263f0 <HAL_TIM_Base_MspInit+0x118>)
 8026328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802632a:	4a31      	ldr	r2, [pc, #196]	; (80263f0 <HAL_TIM_Base_MspInit+0x118>)
 802632c:	f043 0308 	orr.w	r3, r3, #8
 8026330:	6413      	str	r3, [r2, #64]	; 0x40
 8026332:	4b2f      	ldr	r3, [pc, #188]	; (80263f0 <HAL_TIM_Base_MspInit+0x118>)
 8026334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026336:	f003 0308 	and.w	r3, r3, #8
 802633a:	61bb      	str	r3, [r7, #24]
 802633c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 802633e:	2200      	movs	r2, #0
 8026340:	2100      	movs	r1, #0
 8026342:	2032      	movs	r0, #50	; 0x32
 8026344:	f001 faa7 	bl	8027896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8026348:	2032      	movs	r0, #50	; 0x32
 802634a:	f001 fac0 	bl	80278ce <HAL_NVIC_EnableIRQ>
}
 802634e:	e04a      	b.n	80263e6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8026350:	687b      	ldr	r3, [r7, #4]
 8026352:	681b      	ldr	r3, [r3, #0]
 8026354:	4a28      	ldr	r2, [pc, #160]	; (80263f8 <HAL_TIM_Base_MspInit+0x120>)
 8026356:	4293      	cmp	r3, r2
 8026358:	d116      	bne.n	8026388 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 802635a:	2300      	movs	r3, #0
 802635c:	617b      	str	r3, [r7, #20]
 802635e:	4b24      	ldr	r3, [pc, #144]	; (80263f0 <HAL_TIM_Base_MspInit+0x118>)
 8026360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026362:	4a23      	ldr	r2, [pc, #140]	; (80263f0 <HAL_TIM_Base_MspInit+0x118>)
 8026364:	f043 0310 	orr.w	r3, r3, #16
 8026368:	6413      	str	r3, [r2, #64]	; 0x40
 802636a:	4b21      	ldr	r3, [pc, #132]	; (80263f0 <HAL_TIM_Base_MspInit+0x118>)
 802636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802636e:	f003 0310 	and.w	r3, r3, #16
 8026372:	617b      	str	r3, [r7, #20]
 8026374:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8026376:	2200      	movs	r2, #0
 8026378:	2100      	movs	r1, #0
 802637a:	2036      	movs	r0, #54	; 0x36
 802637c:	f001 fa8b 	bl	8027896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8026380:	2036      	movs	r0, #54	; 0x36
 8026382:	f001 faa4 	bl	80278ce <HAL_NVIC_EnableIRQ>
}
 8026386:	e02e      	b.n	80263e6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8026388:	687b      	ldr	r3, [r7, #4]
 802638a:	681b      	ldr	r3, [r3, #0]
 802638c:	4a1b      	ldr	r2, [pc, #108]	; (80263fc <HAL_TIM_Base_MspInit+0x124>)
 802638e:	4293      	cmp	r3, r2
 8026390:	d116      	bne.n	80263c0 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8026392:	2300      	movs	r3, #0
 8026394:	613b      	str	r3, [r7, #16]
 8026396:	4b16      	ldr	r3, [pc, #88]	; (80263f0 <HAL_TIM_Base_MspInit+0x118>)
 8026398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802639a:	4a15      	ldr	r2, [pc, #84]	; (80263f0 <HAL_TIM_Base_MspInit+0x118>)
 802639c:	f043 0320 	orr.w	r3, r3, #32
 80263a0:	6413      	str	r3, [r2, #64]	; 0x40
 80263a2:	4b13      	ldr	r3, [pc, #76]	; (80263f0 <HAL_TIM_Base_MspInit+0x118>)
 80263a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80263a6:	f003 0320 	and.w	r3, r3, #32
 80263aa:	613b      	str	r3, [r7, #16]
 80263ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80263ae:	2200      	movs	r2, #0
 80263b0:	2100      	movs	r1, #0
 80263b2:	2037      	movs	r0, #55	; 0x37
 80263b4:	f001 fa6f 	bl	8027896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80263b8:	2037      	movs	r0, #55	; 0x37
 80263ba:	f001 fa88 	bl	80278ce <HAL_NVIC_EnableIRQ>
}
 80263be:	e012      	b.n	80263e6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 80263c0:	687b      	ldr	r3, [r7, #4]
 80263c2:	681b      	ldr	r3, [r3, #0]
 80263c4:	4a0e      	ldr	r2, [pc, #56]	; (8026400 <HAL_TIM_Base_MspInit+0x128>)
 80263c6:	4293      	cmp	r3, r2
 80263c8:	d10d      	bne.n	80263e6 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80263ca:	2300      	movs	r3, #0
 80263cc:	60fb      	str	r3, [r7, #12]
 80263ce:	4b08      	ldr	r3, [pc, #32]	; (80263f0 <HAL_TIM_Base_MspInit+0x118>)
 80263d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80263d2:	4a07      	ldr	r2, [pc, #28]	; (80263f0 <HAL_TIM_Base_MspInit+0x118>)
 80263d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80263d8:	6453      	str	r3, [r2, #68]	; 0x44
 80263da:	4b05      	ldr	r3, [pc, #20]	; (80263f0 <HAL_TIM_Base_MspInit+0x118>)
 80263dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80263de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80263e2:	60fb      	str	r3, [r7, #12]
 80263e4:	68fb      	ldr	r3, [r7, #12]
}
 80263e6:	bf00      	nop
 80263e8:	3720      	adds	r7, #32
 80263ea:	46bd      	mov	sp, r7
 80263ec:	bd80      	pop	{r7, pc}
 80263ee:	bf00      	nop
 80263f0:	40023800 	.word	0x40023800
 80263f4:	40000c00 	.word	0x40000c00
 80263f8:	40001000 	.word	0x40001000
 80263fc:	40001400 	.word	0x40001400
 8026400:	40014800 	.word	0x40014800

08026404 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8026404:	b580      	push	{r7, lr}
 8026406:	b08c      	sub	sp, #48	; 0x30
 8026408:	af00      	add	r7, sp, #0
 802640a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802640c:	f107 031c 	add.w	r3, r7, #28
 8026410:	2200      	movs	r2, #0
 8026412:	601a      	str	r2, [r3, #0]
 8026414:	605a      	str	r2, [r3, #4]
 8026416:	609a      	str	r2, [r3, #8]
 8026418:	60da      	str	r2, [r3, #12]
 802641a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 802641c:	687b      	ldr	r3, [r7, #4]
 802641e:	681b      	ldr	r3, [r3, #0]
 8026420:	4a32      	ldr	r2, [pc, #200]	; (80264ec <HAL_TIM_Encoder_MspInit+0xe8>)
 8026422:	4293      	cmp	r3, r2
 8026424:	d12c      	bne.n	8026480 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8026426:	2300      	movs	r3, #0
 8026428:	61bb      	str	r3, [r7, #24]
 802642a:	4b31      	ldr	r3, [pc, #196]	; (80264f0 <HAL_TIM_Encoder_MspInit+0xec>)
 802642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802642e:	4a30      	ldr	r2, [pc, #192]	; (80264f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8026430:	f043 0304 	orr.w	r3, r3, #4
 8026434:	6413      	str	r3, [r2, #64]	; 0x40
 8026436:	4b2e      	ldr	r3, [pc, #184]	; (80264f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8026438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802643a:	f003 0304 	and.w	r3, r3, #4
 802643e:	61bb      	str	r3, [r7, #24]
 8026440:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8026442:	2300      	movs	r3, #0
 8026444:	617b      	str	r3, [r7, #20]
 8026446:	4b2a      	ldr	r3, [pc, #168]	; (80264f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8026448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802644a:	4a29      	ldr	r2, [pc, #164]	; (80264f0 <HAL_TIM_Encoder_MspInit+0xec>)
 802644c:	f043 0302 	orr.w	r3, r3, #2
 8026450:	6313      	str	r3, [r2, #48]	; 0x30
 8026452:	4b27      	ldr	r3, [pc, #156]	; (80264f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8026454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026456:	f003 0302 	and.w	r3, r3, #2
 802645a:	617b      	str	r3, [r7, #20]
 802645c:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 802645e:	23c0      	movs	r3, #192	; 0xc0
 8026460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026462:	2302      	movs	r3, #2
 8026464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026466:	2300      	movs	r3, #0
 8026468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802646a:	2300      	movs	r3, #0
 802646c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 802646e:	2302      	movs	r3, #2
 8026470:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8026472:	f107 031c 	add.w	r3, r7, #28
 8026476:	4619      	mov	r1, r3
 8026478:	481e      	ldr	r0, [pc, #120]	; (80264f4 <HAL_TIM_Encoder_MspInit+0xf0>)
 802647a:	f002 f887 	bl	802858c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 802647e:	e030      	b.n	80264e2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8026480:	687b      	ldr	r3, [r7, #4]
 8026482:	681b      	ldr	r3, [r3, #0]
 8026484:	4a1c      	ldr	r2, [pc, #112]	; (80264f8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8026486:	4293      	cmp	r3, r2
 8026488:	d12b      	bne.n	80264e2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 802648a:	2300      	movs	r3, #0
 802648c:	613b      	str	r3, [r7, #16]
 802648e:	4b18      	ldr	r3, [pc, #96]	; (80264f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8026490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026492:	4a17      	ldr	r2, [pc, #92]	; (80264f0 <HAL_TIM_Encoder_MspInit+0xec>)
 8026494:	f043 0302 	orr.w	r3, r3, #2
 8026498:	6453      	str	r3, [r2, #68]	; 0x44
 802649a:	4b15      	ldr	r3, [pc, #84]	; (80264f0 <HAL_TIM_Encoder_MspInit+0xec>)
 802649c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802649e:	f003 0302 	and.w	r3, r3, #2
 80264a2:	613b      	str	r3, [r7, #16]
 80264a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80264a6:	2300      	movs	r3, #0
 80264a8:	60fb      	str	r3, [r7, #12]
 80264aa:	4b11      	ldr	r3, [pc, #68]	; (80264f0 <HAL_TIM_Encoder_MspInit+0xec>)
 80264ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80264ae:	4a10      	ldr	r2, [pc, #64]	; (80264f0 <HAL_TIM_Encoder_MspInit+0xec>)
 80264b0:	f043 0304 	orr.w	r3, r3, #4
 80264b4:	6313      	str	r3, [r2, #48]	; 0x30
 80264b6:	4b0e      	ldr	r3, [pc, #56]	; (80264f0 <HAL_TIM_Encoder_MspInit+0xec>)
 80264b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80264ba:	f003 0304 	and.w	r3, r3, #4
 80264be:	60fb      	str	r3, [r7, #12]
 80264c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80264c2:	23c0      	movs	r3, #192	; 0xc0
 80264c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80264c6:	2302      	movs	r3, #2
 80264c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80264ca:	2300      	movs	r3, #0
 80264cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80264ce:	2300      	movs	r3, #0
 80264d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80264d2:	2303      	movs	r3, #3
 80264d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80264d6:	f107 031c 	add.w	r3, r7, #28
 80264da:	4619      	mov	r1, r3
 80264dc:	4807      	ldr	r0, [pc, #28]	; (80264fc <HAL_TIM_Encoder_MspInit+0xf8>)
 80264de:	f002 f855 	bl	802858c <HAL_GPIO_Init>
}
 80264e2:	bf00      	nop
 80264e4:	3730      	adds	r7, #48	; 0x30
 80264e6:	46bd      	mov	sp, r7
 80264e8:	bd80      	pop	{r7, pc}
 80264ea:	bf00      	nop
 80264ec:	40000800 	.word	0x40000800
 80264f0:	40023800 	.word	0x40023800
 80264f4:	40020400 	.word	0x40020400
 80264f8:	40010400 	.word	0x40010400
 80264fc:	40020800 	.word	0x40020800

08026500 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8026500:	b580      	push	{r7, lr}
 8026502:	b08c      	sub	sp, #48	; 0x30
 8026504:	af00      	add	r7, sp, #0
 8026506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026508:	f107 031c 	add.w	r3, r7, #28
 802650c:	2200      	movs	r2, #0
 802650e:	601a      	str	r2, [r3, #0]
 8026510:	605a      	str	r2, [r3, #4]
 8026512:	609a      	str	r2, [r3, #8]
 8026514:	60da      	str	r2, [r3, #12]
 8026516:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8026518:	687b      	ldr	r3, [r7, #4]
 802651a:	681b      	ldr	r3, [r3, #0]
 802651c:	4a59      	ldr	r2, [pc, #356]	; (8026684 <HAL_TIM_MspPostInit+0x184>)
 802651e:	4293      	cmp	r3, r2
 8026520:	d11f      	bne.n	8026562 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8026522:	2300      	movs	r3, #0
 8026524:	61bb      	str	r3, [r7, #24]
 8026526:	4b58      	ldr	r3, [pc, #352]	; (8026688 <HAL_TIM_MspPostInit+0x188>)
 8026528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802652a:	4a57      	ldr	r2, [pc, #348]	; (8026688 <HAL_TIM_MspPostInit+0x188>)
 802652c:	f043 0301 	orr.w	r3, r3, #1
 8026530:	6313      	str	r3, [r2, #48]	; 0x30
 8026532:	4b55      	ldr	r3, [pc, #340]	; (8026688 <HAL_TIM_MspPostInit+0x188>)
 8026534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026536:	f003 0301 	and.w	r3, r3, #1
 802653a:	61bb      	str	r3, [r7, #24]
 802653c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 802653e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8026542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026544:	2302      	movs	r3, #2
 8026546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026548:	2300      	movs	r3, #0
 802654a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802654c:	2300      	movs	r3, #0
 802654e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8026550:	2301      	movs	r3, #1
 8026552:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026554:	f107 031c 	add.w	r3, r7, #28
 8026558:	4619      	mov	r1, r3
 802655a:	484c      	ldr	r0, [pc, #304]	; (802668c <HAL_TIM_MspPostInit+0x18c>)
 802655c:	f002 f816 	bl	802858c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8026560:	e08b      	b.n	802667a <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8026562:	687b      	ldr	r3, [r7, #4]
 8026564:	681b      	ldr	r3, [r3, #0]
 8026566:	4a4a      	ldr	r2, [pc, #296]	; (8026690 <HAL_TIM_MspPostInit+0x190>)
 8026568:	4293      	cmp	r3, r2
 802656a:	d13d      	bne.n	80265e8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802656c:	2300      	movs	r3, #0
 802656e:	617b      	str	r3, [r7, #20]
 8026570:	4b45      	ldr	r3, [pc, #276]	; (8026688 <HAL_TIM_MspPostInit+0x188>)
 8026572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026574:	4a44      	ldr	r2, [pc, #272]	; (8026688 <HAL_TIM_MspPostInit+0x188>)
 8026576:	f043 0304 	orr.w	r3, r3, #4
 802657a:	6313      	str	r3, [r2, #48]	; 0x30
 802657c:	4b42      	ldr	r3, [pc, #264]	; (8026688 <HAL_TIM_MspPostInit+0x188>)
 802657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026580:	f003 0304 	and.w	r3, r3, #4
 8026584:	617b      	str	r3, [r7, #20]
 8026586:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8026588:	2300      	movs	r3, #0
 802658a:	613b      	str	r3, [r7, #16]
 802658c:	4b3e      	ldr	r3, [pc, #248]	; (8026688 <HAL_TIM_MspPostInit+0x188>)
 802658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026590:	4a3d      	ldr	r2, [pc, #244]	; (8026688 <HAL_TIM_MspPostInit+0x188>)
 8026592:	f043 0302 	orr.w	r3, r3, #2
 8026596:	6313      	str	r3, [r2, #48]	; 0x30
 8026598:	4b3b      	ldr	r3, [pc, #236]	; (8026688 <HAL_TIM_MspPostInit+0x188>)
 802659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802659c:	f003 0302 	and.w	r3, r3, #2
 80265a0:	613b      	str	r3, [r7, #16]
 80265a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80265a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80265a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80265aa:	2302      	movs	r3, #2
 80265ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80265ae:	2300      	movs	r3, #0
 80265b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80265b2:	2300      	movs	r3, #0
 80265b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80265b6:	2302      	movs	r3, #2
 80265b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80265ba:	f107 031c 	add.w	r3, r7, #28
 80265be:	4619      	mov	r1, r3
 80265c0:	4834      	ldr	r0, [pc, #208]	; (8026694 <HAL_TIM_MspPostInit+0x194>)
 80265c2:	f001 ffe3 	bl	802858c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80265c6:	2330      	movs	r3, #48	; 0x30
 80265c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80265ca:	2302      	movs	r3, #2
 80265cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80265ce:	2300      	movs	r3, #0
 80265d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80265d2:	2300      	movs	r3, #0
 80265d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80265d6:	2302      	movs	r3, #2
 80265d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80265da:	f107 031c 	add.w	r3, r7, #28
 80265de:	4619      	mov	r1, r3
 80265e0:	482d      	ldr	r0, [pc, #180]	; (8026698 <HAL_TIM_MspPostInit+0x198>)
 80265e2:	f001 ffd3 	bl	802858c <HAL_GPIO_Init>
}
 80265e6:	e048      	b.n	802667a <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 80265e8:	687b      	ldr	r3, [r7, #4]
 80265ea:	681b      	ldr	r3, [r3, #0]
 80265ec:	4a2b      	ldr	r2, [pc, #172]	; (802669c <HAL_TIM_MspPostInit+0x19c>)
 80265ee:	4293      	cmp	r3, r2
 80265f0:	d11f      	bne.n	8026632 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80265f2:	2300      	movs	r3, #0
 80265f4:	60fb      	str	r3, [r7, #12]
 80265f6:	4b24      	ldr	r3, [pc, #144]	; (8026688 <HAL_TIM_MspPostInit+0x188>)
 80265f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80265fa:	4a23      	ldr	r2, [pc, #140]	; (8026688 <HAL_TIM_MspPostInit+0x188>)
 80265fc:	f043 0302 	orr.w	r3, r3, #2
 8026600:	6313      	str	r3, [r2, #48]	; 0x30
 8026602:	4b21      	ldr	r3, [pc, #132]	; (8026688 <HAL_TIM_MspPostInit+0x188>)
 8026604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026606:	f003 0302 	and.w	r3, r3, #2
 802660a:	60fb      	str	r3, [r7, #12]
 802660c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 802660e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8026612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026614:	2302      	movs	r3, #2
 8026616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026618:	2300      	movs	r3, #0
 802661a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802661c:	2300      	movs	r3, #0
 802661e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8026620:	2303      	movs	r3, #3
 8026622:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8026624:	f107 031c 	add.w	r3, r7, #28
 8026628:	4619      	mov	r1, r3
 802662a:	481b      	ldr	r0, [pc, #108]	; (8026698 <HAL_TIM_MspPostInit+0x198>)
 802662c:	f001 ffae 	bl	802858c <HAL_GPIO_Init>
}
 8026630:	e023      	b.n	802667a <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8026632:	687b      	ldr	r3, [r7, #4]
 8026634:	681b      	ldr	r3, [r3, #0]
 8026636:	4a1a      	ldr	r2, [pc, #104]	; (80266a0 <HAL_TIM_MspPostInit+0x1a0>)
 8026638:	4293      	cmp	r3, r2
 802663a:	d11e      	bne.n	802667a <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802663c:	2300      	movs	r3, #0
 802663e:	60bb      	str	r3, [r7, #8]
 8026640:	4b11      	ldr	r3, [pc, #68]	; (8026688 <HAL_TIM_MspPostInit+0x188>)
 8026642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026644:	4a10      	ldr	r2, [pc, #64]	; (8026688 <HAL_TIM_MspPostInit+0x188>)
 8026646:	f043 0302 	orr.w	r3, r3, #2
 802664a:	6313      	str	r3, [r2, #48]	; 0x30
 802664c:	4b0e      	ldr	r3, [pc, #56]	; (8026688 <HAL_TIM_MspPostInit+0x188>)
 802664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026650:	f003 0302 	and.w	r3, r3, #2
 8026654:	60bb      	str	r3, [r7, #8]
 8026656:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8026658:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802665c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802665e:	2302      	movs	r3, #2
 8026660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026662:	2300      	movs	r3, #0
 8026664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8026666:	2300      	movs	r3, #0
 8026668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 802666a:	2309      	movs	r3, #9
 802666c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802666e:	f107 031c 	add.w	r3, r7, #28
 8026672:	4619      	mov	r1, r3
 8026674:	4808      	ldr	r0, [pc, #32]	; (8026698 <HAL_TIM_MspPostInit+0x198>)
 8026676:	f001 ff89 	bl	802858c <HAL_GPIO_Init>
}
 802667a:	bf00      	nop
 802667c:	3730      	adds	r7, #48	; 0x30
 802667e:	46bd      	mov	sp, r7
 8026680:	bd80      	pop	{r7, pc}
 8026682:	bf00      	nop
 8026684:	40010000 	.word	0x40010000
 8026688:	40023800 	.word	0x40023800
 802668c:	40020000 	.word	0x40020000
 8026690:	40000400 	.word	0x40000400
 8026694:	40020800 	.word	0x40020800
 8026698:	40020400 	.word	0x40020400
 802669c:	40014800 	.word	0x40014800
 80266a0:	40001800 	.word	0x40001800

080266a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80266a4:	b480      	push	{r7}
 80266a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80266a8:	e7fe      	b.n	80266a8 <NMI_Handler+0x4>

080266aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80266aa:	b480      	push	{r7}
 80266ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80266ae:	e7fe      	b.n	80266ae <HardFault_Handler+0x4>

080266b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80266b0:	b480      	push	{r7}
 80266b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80266b4:	e7fe      	b.n	80266b4 <MemManage_Handler+0x4>

080266b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80266b6:	b480      	push	{r7}
 80266b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80266ba:	e7fe      	b.n	80266ba <BusFault_Handler+0x4>

080266bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80266bc:	b480      	push	{r7}
 80266be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80266c0:	e7fe      	b.n	80266c0 <UsageFault_Handler+0x4>

080266c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80266c2:	b480      	push	{r7}
 80266c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80266c6:	bf00      	nop
 80266c8:	46bd      	mov	sp, r7
 80266ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266ce:	4770      	bx	lr

080266d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80266d0:	b480      	push	{r7}
 80266d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80266d4:	bf00      	nop
 80266d6:	46bd      	mov	sp, r7
 80266d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266dc:	4770      	bx	lr

080266de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80266de:	b480      	push	{r7}
 80266e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80266e2:	bf00      	nop
 80266e4:	46bd      	mov	sp, r7
 80266e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266ea:	4770      	bx	lr

080266ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80266ec:	b580      	push	{r7, lr}
 80266ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80266f0:	f000 fbc0 	bl	8026e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80266f4:	bf00      	nop
 80266f6:	bd80      	pop	{r7, pc}

080266f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80266f8:	b580      	push	{r7, lr}
 80266fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80266fc:	4802      	ldr	r0, [pc, #8]	; (8026708 <TIM2_IRQHandler+0x10>)
 80266fe:	f003 fd46 	bl	802a18e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8026702:	bf00      	nop
 8026704:	bd80      	pop	{r7, pc}
 8026706:	bf00      	nop
 8026708:	20011434 	.word	0x20011434

0802670c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 802670c:	b580      	push	{r7, lr}
 802670e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8026710:	4802      	ldr	r0, [pc, #8]	; (802671c <TIM5_IRQHandler+0x10>)
 8026712:	f003 fd3c 	bl	802a18e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8026716:	bf00      	nop
 8026718:	bd80      	pop	{r7, pc}
 802671a:	bf00      	nop
 802671c:	200111f4 	.word	0x200111f4

08026720 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8026720:	b580      	push	{r7, lr}
 8026722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8026724:	4802      	ldr	r0, [pc, #8]	; (8026730 <TIM6_DAC_IRQHandler+0x10>)
 8026726:	f003 fd32 	bl	802a18e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 802672a:	bf00      	nop
 802672c:	bd80      	pop	{r7, pc}
 802672e:	bf00      	nop
 8026730:	200113b4 	.word	0x200113b4

08026734 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8026734:	b580      	push	{r7, lr}
 8026736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8026738:	4802      	ldr	r0, [pc, #8]	; (8026744 <TIM7_IRQHandler+0x10>)
 802673a:	f003 fd28 	bl	802a18e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 802673e:	bf00      	nop
 8026740:	bd80      	pop	{r7, pc}
 8026742:	bf00      	nop
 8026744:	200114b4 	.word	0x200114b4

08026748 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8026748:	b580      	push	{r7, lr}
 802674a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 802674c:	4802      	ldr	r0, [pc, #8]	; (8026758 <DMA2_Stream0_IRQHandler+0x10>)
 802674e:	f001 f9df 	bl	8027b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8026752:	bf00      	nop
 8026754:	bd80      	pop	{r7, pc}
 8026756:	bf00      	nop
 8026758:	20011354 	.word	0x20011354

0802675c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 802675c:	b480      	push	{r7}
 802675e:	b083      	sub	sp, #12
 8026760:	af00      	add	r7, sp, #0
 8026762:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8026764:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8026768:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 802676c:	f003 0301 	and.w	r3, r3, #1
 8026770:	2b00      	cmp	r3, #0
 8026772:	d013      	beq.n	802679c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8026774:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8026778:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 802677c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8026780:	2b00      	cmp	r3, #0
 8026782:	d00b      	beq.n	802679c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8026784:	e000      	b.n	8026788 <ITM_SendChar+0x2c>
    {
      __NOP();
 8026786:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8026788:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 802678c:	681b      	ldr	r3, [r3, #0]
 802678e:	2b00      	cmp	r3, #0
 8026790:	d0f9      	beq.n	8026786 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8026792:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8026796:	687a      	ldr	r2, [r7, #4]
 8026798:	b2d2      	uxtb	r2, r2
 802679a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 802679c:	687b      	ldr	r3, [r7, #4]
}
 802679e:	4618      	mov	r0, r3
 80267a0:	370c      	adds	r7, #12
 80267a2:	46bd      	mov	sp, r7
 80267a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267a8:	4770      	bx	lr

080267aa <_write>:
#include "swo_setting.h"

int _write(int file, char *ptr, int len)
{
 80267aa:	b580      	push	{r7, lr}
 80267ac:	b086      	sub	sp, #24
 80267ae:	af00      	add	r7, sp, #0
 80267b0:	60f8      	str	r0, [r7, #12]
 80267b2:	60b9      	str	r1, [r7, #8]
 80267b4:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for(DataIdx = 0; DataIdx < len; DataIdx++)
 80267b6:	2300      	movs	r3, #0
 80267b8:	617b      	str	r3, [r7, #20]
 80267ba:	e009      	b.n	80267d0 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 80267bc:	68bb      	ldr	r3, [r7, #8]
 80267be:	1c5a      	adds	r2, r3, #1
 80267c0:	60ba      	str	r2, [r7, #8]
 80267c2:	781b      	ldrb	r3, [r3, #0]
 80267c4:	4618      	mov	r0, r3
 80267c6:	f7ff ffc9 	bl	802675c <ITM_SendChar>
    for(DataIdx = 0; DataIdx < len; DataIdx++)
 80267ca:	697b      	ldr	r3, [r7, #20]
 80267cc:	3301      	adds	r3, #1
 80267ce:	617b      	str	r3, [r7, #20]
 80267d0:	697a      	ldr	r2, [r7, #20]
 80267d2:	687b      	ldr	r3, [r7, #4]
 80267d4:	429a      	cmp	r2, r3
 80267d6:	dbf1      	blt.n	80267bc <_write+0x12>
    }

    return len;
 80267d8:	687b      	ldr	r3, [r7, #4]
 80267da:	4618      	mov	r0, r3
 80267dc:	3718      	adds	r7, #24
 80267de:	46bd      	mov	sp, r7
 80267e0:	bd80      	pop	{r7, pc}

080267e2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80267e2:	b580      	push	{r7, lr}
 80267e4:	b086      	sub	sp, #24
 80267e6:	af00      	add	r7, sp, #0
 80267e8:	60f8      	str	r0, [r7, #12]
 80267ea:	60b9      	str	r1, [r7, #8]
 80267ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80267ee:	2300      	movs	r3, #0
 80267f0:	617b      	str	r3, [r7, #20]
 80267f2:	e00a      	b.n	802680a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80267f4:	f3af 8000 	nop.w
 80267f8:	4601      	mov	r1, r0
 80267fa:	68bb      	ldr	r3, [r7, #8]
 80267fc:	1c5a      	adds	r2, r3, #1
 80267fe:	60ba      	str	r2, [r7, #8]
 8026800:	b2ca      	uxtb	r2, r1
 8026802:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8026804:	697b      	ldr	r3, [r7, #20]
 8026806:	3301      	adds	r3, #1
 8026808:	617b      	str	r3, [r7, #20]
 802680a:	697a      	ldr	r2, [r7, #20]
 802680c:	687b      	ldr	r3, [r7, #4]
 802680e:	429a      	cmp	r2, r3
 8026810:	dbf0      	blt.n	80267f4 <_read+0x12>
	}

return len;
 8026812:	687b      	ldr	r3, [r7, #4]
}
 8026814:	4618      	mov	r0, r3
 8026816:	3718      	adds	r7, #24
 8026818:	46bd      	mov	sp, r7
 802681a:	bd80      	pop	{r7, pc}

0802681c <_close>:
	}
	return len;
}

int _close(int file)
{
 802681c:	b480      	push	{r7}
 802681e:	b083      	sub	sp, #12
 8026820:	af00      	add	r7, sp, #0
 8026822:	6078      	str	r0, [r7, #4]
	return -1;
 8026824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8026828:	4618      	mov	r0, r3
 802682a:	370c      	adds	r7, #12
 802682c:	46bd      	mov	sp, r7
 802682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026832:	4770      	bx	lr

08026834 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8026834:	b480      	push	{r7}
 8026836:	b083      	sub	sp, #12
 8026838:	af00      	add	r7, sp, #0
 802683a:	6078      	str	r0, [r7, #4]
 802683c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 802683e:	683b      	ldr	r3, [r7, #0]
 8026840:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8026844:	605a      	str	r2, [r3, #4]
	return 0;
 8026846:	2300      	movs	r3, #0
}
 8026848:	4618      	mov	r0, r3
 802684a:	370c      	adds	r7, #12
 802684c:	46bd      	mov	sp, r7
 802684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026852:	4770      	bx	lr

08026854 <_isatty>:

int _isatty(int file)
{
 8026854:	b480      	push	{r7}
 8026856:	b083      	sub	sp, #12
 8026858:	af00      	add	r7, sp, #0
 802685a:	6078      	str	r0, [r7, #4]
	return 1;
 802685c:	2301      	movs	r3, #1
}
 802685e:	4618      	mov	r0, r3
 8026860:	370c      	adds	r7, #12
 8026862:	46bd      	mov	sp, r7
 8026864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026868:	4770      	bx	lr

0802686a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802686a:	b480      	push	{r7}
 802686c:	b085      	sub	sp, #20
 802686e:	af00      	add	r7, sp, #0
 8026870:	60f8      	str	r0, [r7, #12]
 8026872:	60b9      	str	r1, [r7, #8]
 8026874:	607a      	str	r2, [r7, #4]
	return 0;
 8026876:	2300      	movs	r3, #0
}
 8026878:	4618      	mov	r0, r3
 802687a:	3714      	adds	r7, #20
 802687c:	46bd      	mov	sp, r7
 802687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026882:	4770      	bx	lr

08026884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8026884:	b580      	push	{r7, lr}
 8026886:	b086      	sub	sp, #24
 8026888:	af00      	add	r7, sp, #0
 802688a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802688c:	4a14      	ldr	r2, [pc, #80]	; (80268e0 <_sbrk+0x5c>)
 802688e:	4b15      	ldr	r3, [pc, #84]	; (80268e4 <_sbrk+0x60>)
 8026890:	1ad3      	subs	r3, r2, r3
 8026892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8026894:	697b      	ldr	r3, [r7, #20]
 8026896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8026898:	4b13      	ldr	r3, [pc, #76]	; (80268e8 <_sbrk+0x64>)
 802689a:	681b      	ldr	r3, [r3, #0]
 802689c:	2b00      	cmp	r3, #0
 802689e:	d102      	bne.n	80268a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80268a0:	4b11      	ldr	r3, [pc, #68]	; (80268e8 <_sbrk+0x64>)
 80268a2:	4a12      	ldr	r2, [pc, #72]	; (80268ec <_sbrk+0x68>)
 80268a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80268a6:	4b10      	ldr	r3, [pc, #64]	; (80268e8 <_sbrk+0x64>)
 80268a8:	681a      	ldr	r2, [r3, #0]
 80268aa:	687b      	ldr	r3, [r7, #4]
 80268ac:	4413      	add	r3, r2
 80268ae:	693a      	ldr	r2, [r7, #16]
 80268b0:	429a      	cmp	r2, r3
 80268b2:	d207      	bcs.n	80268c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80268b4:	f004 fb1c 	bl	802aef0 <__errno>
 80268b8:	4602      	mov	r2, r0
 80268ba:	230c      	movs	r3, #12
 80268bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80268be:	f04f 33ff 	mov.w	r3, #4294967295
 80268c2:	e009      	b.n	80268d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80268c4:	4b08      	ldr	r3, [pc, #32]	; (80268e8 <_sbrk+0x64>)
 80268c6:	681b      	ldr	r3, [r3, #0]
 80268c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80268ca:	4b07      	ldr	r3, [pc, #28]	; (80268e8 <_sbrk+0x64>)
 80268cc:	681a      	ldr	r2, [r3, #0]
 80268ce:	687b      	ldr	r3, [r7, #4]
 80268d0:	4413      	add	r3, r2
 80268d2:	4a05      	ldr	r2, [pc, #20]	; (80268e8 <_sbrk+0x64>)
 80268d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80268d6:	68fb      	ldr	r3, [r7, #12]
}
 80268d8:	4618      	mov	r0, r3
 80268da:	3718      	adds	r7, #24
 80268dc:	46bd      	mov	sp, r7
 80268de:	bd80      	pop	{r7, pc}
 80268e0:	20020000 	.word	0x20020000
 80268e4:	00000400 	.word	0x00000400
 80268e8:	20000368 	.word	0x20000368
 80268ec:	20011520 	.word	0x20011520

080268f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80268f0:	b480      	push	{r7}
 80268f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80268f4:	4b08      	ldr	r3, [pc, #32]	; (8026918 <SystemInit+0x28>)
 80268f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80268fa:	4a07      	ldr	r2, [pc, #28]	; (8026918 <SystemInit+0x28>)
 80268fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8026900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8026904:	4b04      	ldr	r3, [pc, #16]	; (8026918 <SystemInit+0x28>)
 8026906:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 802690a:	609a      	str	r2, [r3, #8]
#endif
}
 802690c:	bf00      	nop
 802690e:	46bd      	mov	sp, r7
 8026910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026914:	4770      	bx	lr
 8026916:	bf00      	nop
 8026918:	e000ed00 	.word	0xe000ed00

0802691c <_ZN15VelocityControlC1EP7Encoder>:
#include "velocity_control.hpp"
#include "declare_extern.h"

VelocityControl::VelocityControl(Encoder *encoder) : integral_error_(0)
 802691c:	b480      	push	{r7}
 802691e:	b083      	sub	sp, #12
 8026920:	af00      	add	r7, sp, #0
 8026922:	6078      	str	r0, [r7, #4]
 8026924:	6039      	str	r1, [r7, #0]
 8026926:	687b      	ldr	r3, [r7, #4]
 8026928:	f04f 0200 	mov.w	r2, #0
 802692c:	601a      	str	r2, [r3, #0]
{
    encoder_ = encoder;
 802692e:	687b      	ldr	r3, [r7, #4]
 8026930:	683a      	ldr	r2, [r7, #0]
 8026932:	605a      	str	r2, [r3, #4]
}
 8026934:	687b      	ldr	r3, [r7, #4]
 8026936:	4618      	mov	r0, r3
 8026938:	370c      	adds	r7, #12
 802693a:	46bd      	mov	sp, r7
 802693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026940:	4770      	bx	lr

08026942 <_ZN15VelocityControl16DeterminePidGainEf>:

float VelocityControl::DeterminePidGain(float target_velocity)
{
 8026942:	b580      	push	{r7, lr}
 8026944:	b086      	sub	sp, #24
 8026946:	af00      	add	r7, sp, #0
 8026948:	6078      	str	r0, [r7, #4]
 802694a:	ed87 0a00 	vstr	s0, [r7]
    float p_gain = 0, i_gain = 0, d_gain = 0;
 802694e:	f04f 0300 	mov.w	r3, #0
 8026952:	617b      	str	r3, [r7, #20]
 8026954:	f04f 0300 	mov.w	r3, #0
 8026958:	613b      	str	r3, [r7, #16]
 802695a:	f04f 0300 	mov.w	r3, #0
 802695e:	60fb      	str	r3, [r7, #12]

    if(target_velocity < MAX_VELOCITY)
 8026960:	edd7 7a00 	vldr	s15, [r7]
 8026964:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8026968:	eef4 7ac7 	vcmpe.f32	s15, s14
 802696c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026970:	d509      	bpl.n	8026986 <_ZN15VelocityControl16DeterminePidGainEf+0x44>
    {
        p_gain = VELOCITY_P_GAIN;
 8026972:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8026976:	617b      	str	r3, [r7, #20]
        i_gain = VELOCITY_I_GAIN;
 8026978:	f04f 0300 	mov.w	r3, #0
 802697c:	613b      	str	r3, [r7, #16]
        d_gain = VELOCITY_D_GAIN;
 802697e:	f04f 0300 	mov.w	r3, #0
 8026982:	60fb      	str	r3, [r7, #12]
 8026984:	e008      	b.n	8026998 <_ZN15VelocityControl16DeterminePidGainEf+0x56>
    }
    else // Error handler
    {
        p_gain = 0;
 8026986:	f04f 0300 	mov.w	r3, #0
 802698a:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 802698c:	f04f 0300 	mov.w	r3, #0
 8026990:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 8026992:	f04f 0300 	mov.w	r3, #0
 8026996:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(target_velocity, p_gain, i_gain, d_gain);
 8026998:	edd7 1a03 	vldr	s3, [r7, #12]
 802699c:	ed97 1a04 	vldr	s2, [r7, #16]
 80269a0:	edd7 0a05 	vldr	s1, [r7, #20]
 80269a4:	ed97 0a00 	vldr	s0, [r7]
 80269a8:	6878      	ldr	r0, [r7, #4]
 80269aa:	f000 f809 	bl	80269c0 <_ZN15VelocityControl10PidControlEffff>
 80269ae:	eef0 7a40 	vmov.f32	s15, s0
}
 80269b2:	eeb0 0a67 	vmov.f32	s0, s15
 80269b6:	3718      	adds	r7, #24
 80269b8:	46bd      	mov	sp, r7
 80269ba:	bd80      	pop	{r7, pc}
 80269bc:	0000      	movs	r0, r0
	...

080269c0 <_ZN15VelocityControl10PidControlEffff>:

float VelocityControl::PidControl(float target, float p_gain, float i_gain, float d_gain)
{
 80269c0:	b5b0      	push	{r4, r5, r7, lr}
 80269c2:	b08e      	sub	sp, #56	; 0x38
 80269c4:	af00      	add	r7, sp, #0
 80269c6:	6178      	str	r0, [r7, #20]
 80269c8:	ed87 0a04 	vstr	s0, [r7, #16]
 80269cc:	edc7 0a03 	vstr	s1, [r7, #12]
 80269d0:	ed87 1a02 	vstr	s2, [r7, #8]
 80269d4:	edc7 1a01 	vstr	s3, [r7, #4]
    float current = encoder_->GetDistance() / TIM6_PERIOD; // [mm/ms]
 80269d8:	697b      	ldr	r3, [r7, #20]
 80269da:	685b      	ldr	r3, [r3, #4]
 80269dc:	4618      	mov	r0, r3
 80269de:	f7fa fac5 	bl	8020f6c <_ZN7Encoder11GetDistanceEv>
 80269e2:	eef0 6a40 	vmov.f32	s13, s0
 80269e6:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 80269ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80269ee:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    static float pre_filter = 0.0;
    float filter = pre_filter * (1.0 - VELOCITY_LPF_RATIO) + (current * VELOCITY_LPF_RATIO);
 80269f2:	4b71      	ldr	r3, [pc, #452]	; (8026bb8 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 80269f4:	681b      	ldr	r3, [r3, #0]
 80269f6:	4618      	mov	r0, r3
 80269f8:	f7f9 fcd6 	bl	80203a8 <__aeabi_f2d>
 80269fc:	a368      	add	r3, pc, #416	; (adr r3, 8026ba0 <_ZN15VelocityControl10PidControlEffff+0x1e0>)
 80269fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a02:	f7f9 fd29 	bl	8020458 <__aeabi_dmul>
 8026a06:	4603      	mov	r3, r0
 8026a08:	460c      	mov	r4, r1
 8026a0a:	4625      	mov	r5, r4
 8026a0c:	461c      	mov	r4, r3
 8026a0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8026a10:	f7f9 fcca 	bl	80203a8 <__aeabi_f2d>
 8026a14:	a364      	add	r3, pc, #400	; (adr r3, 8026ba8 <_ZN15VelocityControl10PidControlEffff+0x1e8>)
 8026a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a1a:	f7f9 fd1d 	bl	8020458 <__aeabi_dmul>
 8026a1e:	4602      	mov	r2, r0
 8026a20:	460b      	mov	r3, r1
 8026a22:	4620      	mov	r0, r4
 8026a24:	4629      	mov	r1, r5
 8026a26:	f7f9 fb61 	bl	80200ec <__adddf3>
 8026a2a:	4603      	mov	r3, r0
 8026a2c:	460c      	mov	r4, r1
 8026a2e:	4618      	mov	r0, r3
 8026a30:	4621      	mov	r1, r4
 8026a32:	f7f9 ffab 	bl	802098c <__aeabi_d2f>
 8026a36:	4603      	mov	r3, r0
 8026a38:	633b      	str	r3, [r7, #48]	; 0x30
    pre_filter = filter;
 8026a3a:	4a5f      	ldr	r2, [pc, #380]	; (8026bb8 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8026a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026a3e:	6013      	str	r3, [r2, #0]

    float error = target - filter;
 8026a40:	ed97 7a04 	vldr	s14, [r7, #16]
 8026a44:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8026a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026a4c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    static float pre_error = error;
 8026a50:	4b5a      	ldr	r3, [pc, #360]	; (8026bbc <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8026a52:	781b      	ldrb	r3, [r3, #0]
 8026a54:	f3bf 8f5b 	dmb	ish
 8026a58:	b2db      	uxtb	r3, r3
 8026a5a:	f003 0301 	and.w	r3, r3, #1
 8026a5e:	2b00      	cmp	r3, #0
 8026a60:	bf0c      	ite	eq
 8026a62:	2301      	moveq	r3, #1
 8026a64:	2300      	movne	r3, #0
 8026a66:	b2db      	uxtb	r3, r3
 8026a68:	2b00      	cmp	r3, #0
 8026a6a:	d010      	beq.n	8026a8e <_ZN15VelocityControl10PidControlEffff+0xce>
 8026a6c:	4853      	ldr	r0, [pc, #332]	; (8026bbc <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8026a6e:	f004 fa2f 	bl	802aed0 <__cxa_guard_acquire>
 8026a72:	4603      	mov	r3, r0
 8026a74:	2b00      	cmp	r3, #0
 8026a76:	bf14      	ite	ne
 8026a78:	2301      	movne	r3, #1
 8026a7a:	2300      	moveq	r3, #0
 8026a7c:	b2db      	uxtb	r3, r3
 8026a7e:	2b00      	cmp	r3, #0
 8026a80:	d005      	beq.n	8026a8e <_ZN15VelocityControl10PidControlEffff+0xce>
 8026a82:	4a4f      	ldr	r2, [pc, #316]	; (8026bc0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8026a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026a86:	6013      	str	r3, [r2, #0]
 8026a88:	484c      	ldr	r0, [pc, #304]	; (8026bbc <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8026a8a:	f004 fa2d 	bl	802aee8 <__cxa_guard_release>

    float differential_error = (error - pre_error) / TIM6_PERIOD_S;
 8026a8e:	4b4c      	ldr	r3, [pc, #304]	; (8026bc0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8026a90:	edd3 7a00 	vldr	s15, [r3]
 8026a94:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8026a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026a9c:	ee17 0a90 	vmov	r0, s15
 8026aa0:	f7f9 fc82 	bl	80203a8 <__aeabi_f2d>
 8026aa4:	a342      	add	r3, pc, #264	; (adr r3, 8026bb0 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8026aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026aaa:	f7f9 fdff 	bl	80206ac <__aeabi_ddiv>
 8026aae:	4603      	mov	r3, r0
 8026ab0:	460c      	mov	r4, r1
 8026ab2:	4618      	mov	r0, r3
 8026ab4:	4621      	mov	r1, r4
 8026ab6:	f7f9 ff69 	bl	802098c <__aeabi_d2f>
 8026aba:	4603      	mov	r3, r0
 8026abc:	62bb      	str	r3, [r7, #40]	; 0x28
    float integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 8026abe:	4b40      	ldr	r3, [pc, #256]	; (8026bc0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8026ac0:	ed93 7a00 	vldr	s14, [r3]
 8026ac4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8026ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026acc:	ee17 0a90 	vmov	r0, s15
 8026ad0:	f7f9 fc6a 	bl	80203a8 <__aeabi_f2d>
 8026ad4:	f04f 0200 	mov.w	r2, #0
 8026ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8026adc:	f7f9 fde6 	bl	80206ac <__aeabi_ddiv>
 8026ae0:	4603      	mov	r3, r0
 8026ae2:	460c      	mov	r4, r1
 8026ae4:	4618      	mov	r0, r3
 8026ae6:	4621      	mov	r1, r4
 8026ae8:	a331      	add	r3, pc, #196	; (adr r3, 8026bb0 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8026aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026aee:	f7f9 fcb3 	bl	8020458 <__aeabi_dmul>
 8026af2:	4603      	mov	r3, r0
 8026af4:	460c      	mov	r4, r1
 8026af6:	4618      	mov	r0, r3
 8026af8:	4621      	mov	r1, r4
 8026afa:	f7f9 ff47 	bl	802098c <__aeabi_d2f>
 8026afe:	4603      	mov	r3, r0
 8026b00:	627b      	str	r3, [r7, #36]	; 0x24
    SetIntegralError(integral_error);
 8026b02:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8026b06:	6978      	ldr	r0, [r7, #20]
 8026b08:	f000 f870 	bl	8026bec <_ZN15VelocityControl16SetIntegralErrorEf>
    pre_error = error;
 8026b0c:	4a2c      	ldr	r2, [pc, #176]	; (8026bc0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8026b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026b10:	6013      	str	r3, [r2, #0]

    float p = p_gain * error;
 8026b12:	ed97 7a03 	vldr	s14, [r7, #12]
 8026b16:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8026b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026b1e:	edc7 7a08 	vstr	s15, [r7, #32]
    float d = d_gain * differential_error;
 8026b22:	ed97 7a01 	vldr	s14, [r7, #4]
 8026b26:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8026b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026b2e:	edc7 7a07 	vstr	s15, [r7, #28]
    float i = i_gain * integral_error_;
 8026b32:	697b      	ldr	r3, [r7, #20]
 8026b34:	edd3 7a00 	vldr	s15, [r3]
 8026b38:	ed97 7a02 	vldr	s14, [r7, #8]
 8026b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026b40:	edc7 7a06 	vstr	s15, [r7, #24]

#ifdef DEBUG_MODE
    g_target_velocity  = target;
 8026b44:	4a1f      	ldr	r2, [pc, #124]	; (8026bc4 <_ZN15VelocityControl10PidControlEffff+0x204>)
 8026b46:	693b      	ldr	r3, [r7, #16]
 8026b48:	6013      	str	r3, [r2, #0]
    g_current_velocity = current;
 8026b4a:	4a1f      	ldr	r2, [pc, #124]	; (8026bc8 <_ZN15VelocityControl10PidControlEffff+0x208>)
 8026b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026b4e:	6013      	str	r3, [r2, #0]
    g_filter_velocity  = filter;
 8026b50:	4a1e      	ldr	r2, [pc, #120]	; (8026bcc <_ZN15VelocityControl10PidControlEffff+0x20c>)
 8026b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026b54:	6013      	str	r3, [r2, #0]
    g_velocity_error   = error;
 8026b56:	4a1e      	ldr	r2, [pc, #120]	; (8026bd0 <_ZN15VelocityControl10PidControlEffff+0x210>)
 8026b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026b5a:	6013      	str	r3, [r2, #0]
    g_velocity_p = p;       g_velocity_d = d;       g_velocity_i = i;
 8026b5c:	4a1d      	ldr	r2, [pc, #116]	; (8026bd4 <_ZN15VelocityControl10PidControlEffff+0x214>)
 8026b5e:	6a3b      	ldr	r3, [r7, #32]
 8026b60:	6013      	str	r3, [r2, #0]
 8026b62:	4a1d      	ldr	r2, [pc, #116]	; (8026bd8 <_ZN15VelocityControl10PidControlEffff+0x218>)
 8026b64:	69fb      	ldr	r3, [r7, #28]
 8026b66:	6013      	str	r3, [r2, #0]
 8026b68:	4a1c      	ldr	r2, [pc, #112]	; (8026bdc <_ZN15VelocityControl10PidControlEffff+0x21c>)
 8026b6a:	69bb      	ldr	r3, [r7, #24]
 8026b6c:	6013      	str	r3, [r2, #0]
    g_velocity_p_gain = p;  g_velocity_d_gain = p;  g_velocity_i_gain = p;
 8026b6e:	4a1c      	ldr	r2, [pc, #112]	; (8026be0 <_ZN15VelocityControl10PidControlEffff+0x220>)
 8026b70:	6a3b      	ldr	r3, [r7, #32]
 8026b72:	6013      	str	r3, [r2, #0]
 8026b74:	4a1b      	ldr	r2, [pc, #108]	; (8026be4 <_ZN15VelocityControl10PidControlEffff+0x224>)
 8026b76:	6a3b      	ldr	r3, [r7, #32]
 8026b78:	6013      	str	r3, [r2, #0]
 8026b7a:	4a1b      	ldr	r2, [pc, #108]	; (8026be8 <_ZN15VelocityControl10PidControlEffff+0x228>)
 8026b7c:	6a3b      	ldr	r3, [r7, #32]
 8026b7e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    return p + d + i;
 8026b80:	ed97 7a08 	vldr	s14, [r7, #32]
 8026b84:	edd7 7a07 	vldr	s15, [r7, #28]
 8026b88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8026b8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8026b90:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8026b94:	eeb0 0a67 	vmov.f32	s0, s15
 8026b98:	3738      	adds	r7, #56	; 0x38
 8026b9a:	46bd      	mov	sp, r7
 8026b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8026b9e:	bf00      	nop
 8026ba0:	33333334 	.word	0x33333334
 8026ba4:	3fd33333 	.word	0x3fd33333
 8026ba8:	66666666 	.word	0x66666666
 8026bac:	3fe66666 	.word	0x3fe66666
 8026bb0:	47ae147b 	.word	0x47ae147b
 8026bb4:	3f547ae1 	.word	0x3f547ae1
 8026bb8:	2000036c 	.word	0x2000036c
 8026bbc:	20000374 	.word	0x20000374
 8026bc0:	20000370 	.word	0x20000370
 8026bc4:	2000031c 	.word	0x2000031c
 8026bc8:	20000320 	.word	0x20000320
 8026bcc:	20000324 	.word	0x20000324
 8026bd0:	20000328 	.word	0x20000328
 8026bd4:	2000032c 	.word	0x2000032c
 8026bd8:	20000334 	.word	0x20000334
 8026bdc:	20000330 	.word	0x20000330
 8026be0:	20000338 	.word	0x20000338
 8026be4:	20000340 	.word	0x20000340
 8026be8:	2000033c 	.word	0x2000033c

08026bec <_ZN15VelocityControl16SetIntegralErrorEf>:

void VelocityControl::SetIntegralError(float integral_error)
{
 8026bec:	b480      	push	{r7}
 8026bee:	b083      	sub	sp, #12
 8026bf0:	af00      	add	r7, sp, #0
 8026bf2:	6078      	str	r0, [r7, #4]
 8026bf4:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8026bf8:	687b      	ldr	r3, [r7, #4]
 8026bfa:	ed93 7a00 	vldr	s14, [r3]
 8026bfe:	edd7 7a00 	vldr	s15, [r7]
 8026c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026c06:	687b      	ldr	r3, [r7, #4]
 8026c08:	edc3 7a00 	vstr	s15, [r3]
}
 8026c0c:	bf00      	nop
 8026c0e:	370c      	adds	r7, #12
 8026c10:	46bd      	mov	sp, r7
 8026c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c16:	4770      	bx	lr

08026c18 <Init>:
    &velocity_control
);
#endif // TEST_MODE

void Init()
{
 8026c18:	b580      	push	{r7, lr}
 8026c1a:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Init();
 8026c1c:	4802      	ldr	r0, [pc, #8]	; (8026c28 <Init+0x10>)
 8026c1e:	f7fd ff43 	bl	8024aa8 <_ZN3Run4InitEv>
#else // TEST_MODE
    test.Init();
#endif // TEST_MODE
}
 8026c22:	bf00      	nop
 8026c24:	bd80      	pop	{r7, pc}
 8026c26:	bf00      	nop
 8026c28:	200110dc 	.word	0x200110dc

08026c2c <InterruptTim7>:

void InterruptTim7()
{
 8026c2c:	b580      	push	{r7, lr}
 8026c2e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer7();
 8026c30:	4804      	ldr	r0, [pc, #16]	; (8026c44 <InterruptTim7+0x18>)
 8026c32:	f7fd ffc3 	bl	8024bbc <_ZN3Run6Timer7Ev>
#else // TEST_MODE
    test.Timer7();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim7++;
 8026c36:	4b04      	ldr	r3, [pc, #16]	; (8026c48 <InterruptTim7+0x1c>)
 8026c38:	681b      	ldr	r3, [r3, #0]
 8026c3a:	3301      	adds	r3, #1
 8026c3c:	4a02      	ldr	r2, [pc, #8]	; (8026c48 <InterruptTim7+0x1c>)
 8026c3e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8026c40:	bf00      	nop
 8026c42:	bd80      	pop	{r7, pc}
 8026c44:	200110dc 	.word	0x200110dc
 8026c48:	20000344 	.word	0x20000344

08026c4c <InterruptTim6>:

void InterruptTim6()
{
 8026c4c:	b580      	push	{r7, lr}
 8026c4e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.RunMode();
 8026c50:	4804      	ldr	r0, [pc, #16]	; (8026c64 <InterruptTim6+0x18>)
 8026c52:	f7fe f9bd 	bl	8024fd0 <_ZN3Run7RunModeEv>
#else // TEST_MODE
    test.Timer6();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim6++;
 8026c56:	4b04      	ldr	r3, [pc, #16]	; (8026c68 <InterruptTim6+0x1c>)
 8026c58:	681b      	ldr	r3, [r3, #0]
 8026c5a:	3301      	adds	r3, #1
 8026c5c:	4a02      	ldr	r2, [pc, #8]	; (8026c68 <InterruptTim6+0x1c>)
 8026c5e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8026c60:	bf00      	nop
 8026c62:	bd80      	pop	{r7, pc}
 8026c64:	200110dc 	.word	0x200110dc
 8026c68:	20000348 	.word	0x20000348

08026c6c <InterruptTim2>:

void InterruptTim2()
{
 8026c6c:	b580      	push	{r7, lr}
 8026c6e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer2();
 8026c70:	4804      	ldr	r0, [pc, #16]	; (8026c84 <InterruptTim2+0x18>)
 8026c72:	f7fd ffb1 	bl	8024bd8 <_ZN3Run6Timer2Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim2++;
 8026c76:	4b04      	ldr	r3, [pc, #16]	; (8026c88 <InterruptTim2+0x1c>)
 8026c78:	681b      	ldr	r3, [r3, #0]
 8026c7a:	3301      	adds	r3, #1
 8026c7c:	4a02      	ldr	r2, [pc, #8]	; (8026c88 <InterruptTim2+0x1c>)
 8026c7e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8026c80:	bf00      	nop
 8026c82:	bd80      	pop	{r7, pc}
 8026c84:	200110dc 	.word	0x200110dc
 8026c88:	2000034c 	.word	0x2000034c

08026c8c <_Z41__static_initialization_and_destruction_0ii>:
 8026c8c:	b580      	push	{r7, lr}
 8026c8e:	b08c      	sub	sp, #48	; 0x30
 8026c90:	af0a      	add	r7, sp, #40	; 0x28
 8026c92:	6078      	str	r0, [r7, #4]
 8026c94:	6039      	str	r1, [r7, #0]
 8026c96:	687b      	ldr	r3, [r7, #4]
 8026c98:	2b01      	cmp	r3, #1
 8026c9a:	d146      	bne.n	8026d2a <_Z41__static_initialization_and_destruction_0ii+0x9e>
 8026c9c:	683b      	ldr	r3, [r7, #0]
 8026c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8026ca2:	4293      	cmp	r3, r2
 8026ca4:	d141      	bne.n	8026d2a <_Z41__static_initialization_and_destruction_0ii+0x9e>
Encoder encoder;
 8026ca6:	4823      	ldr	r0, [pc, #140]	; (8026d34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8026ca8:	f7fa f884 	bl	8020db4 <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 8026cac:	4822      	ldr	r0, [pc, #136]	; (8026d38 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8026cae:	f7fa fb74 	bl	802139a <_ZN8Iim42652C1Ev>
Led led;
 8026cb2:	4822      	ldr	r0, [pc, #136]	; (8026d3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8026cb4:	f7fa fd85 	bl	80217c2 <_ZN3LedC1Ev>
LineSensor line_sensor;
 8026cb8:	4821      	ldr	r0, [pc, #132]	; (8026d40 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8026cba:	f7fa ff3a 	bl	8021b32 <_ZN10LineSensorC1Ev>
LineTrace line_trace(&line_sensor);
 8026cbe:	4920      	ldr	r1, [pc, #128]	; (8026d40 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8026cc0:	4820      	ldr	r0, [pc, #128]	; (8026d44 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8026cc2:	f7fb fa61 	bl	8022188 <_ZN9LineTraceC1EP10LineSensor>
Logger logger;
 8026cc6:	4820      	ldr	r0, [pc, #128]	; (8026d48 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8026cc8:	f7fb fbba 	bl	8022440 <_ZN6LoggerC1Ev>
Print print(&flash);
 8026ccc:	491f      	ldr	r1, [pc, #124]	; (8026d4c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8026cce:	4820      	ldr	r0, [pc, #128]	; (8026d50 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8026cd0:	f7fd fdd4 	bl	802487c <_ZN5PrintC1EP5Flash>
SideSensor side_sensor;
 8026cd4:	481f      	ldr	r0, [pc, #124]	; (8026d54 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8026cd6:	f7fe fe13 	bl	8025900 <_ZN10SideSensorC1Ev>
Logger2 logger2(&encoder, &flash, &led, &iim_42652, &side_sensor);
 8026cda:	4b1e      	ldr	r3, [pc, #120]	; (8026d54 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8026cdc:	9301      	str	r3, [sp, #4]
 8026cde:	4b16      	ldr	r3, [pc, #88]	; (8026d38 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8026ce0:	9300      	str	r3, [sp, #0]
 8026ce2:	4b16      	ldr	r3, [pc, #88]	; (8026d3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8026ce4:	4a19      	ldr	r2, [pc, #100]	; (8026d4c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8026ce6:	4913      	ldr	r1, [pc, #76]	; (8026d34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8026ce8:	481b      	ldr	r0, [pc, #108]	; (8026d58 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8026cea:	f7fc f9dd 	bl	80230a8 <_ZN7Logger2C1EP7EncoderP5FlashP3LedP8Iim42652P10SideSensor>
VelocityControl velocity_control(&encoder);
 8026cee:	4911      	ldr	r1, [pc, #68]	; (8026d34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8026cf0:	481a      	ldr	r0, [pc, #104]	; (8026d5c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8026cf2:	f7ff fe13 	bl	802691c <_ZN15VelocityControlC1EP7Encoder>
);
 8026cf6:	4b19      	ldr	r3, [pc, #100]	; (8026d5c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8026cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8026cfa:	4b16      	ldr	r3, [pc, #88]	; (8026d54 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8026cfc:	9308      	str	r3, [sp, #32]
 8026cfe:	4b18      	ldr	r3, [pc, #96]	; (8026d60 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8026d00:	9307      	str	r3, [sp, #28]
 8026d02:	4b13      	ldr	r3, [pc, #76]	; (8026d50 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8026d04:	9306      	str	r3, [sp, #24]
 8026d06:	4b17      	ldr	r3, [pc, #92]	; (8026d64 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8026d08:	9305      	str	r3, [sp, #20]
 8026d0a:	4b13      	ldr	r3, [pc, #76]	; (8026d58 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8026d0c:	9304      	str	r3, [sp, #16]
 8026d0e:	4b0e      	ldr	r3, [pc, #56]	; (8026d48 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8026d10:	9303      	str	r3, [sp, #12]
 8026d12:	4b0c      	ldr	r3, [pc, #48]	; (8026d44 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8026d14:	9302      	str	r3, [sp, #8]
 8026d16:	4b0a      	ldr	r3, [pc, #40]	; (8026d40 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8026d18:	9301      	str	r3, [sp, #4]
 8026d1a:	4b08      	ldr	r3, [pc, #32]	; (8026d3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8026d1c:	9300      	str	r3, [sp, #0]
 8026d1e:	4b06      	ldr	r3, [pc, #24]	; (8026d38 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8026d20:	4a0a      	ldr	r2, [pc, #40]	; (8026d4c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8026d22:	4904      	ldr	r1, [pc, #16]	; (8026d34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8026d24:	4810      	ldr	r0, [pc, #64]	; (8026d68 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8026d26:	f7fd fe75 	bl	8024a14 <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3LedP10LineSensorP9LineTraceP6LoggerP7Logger2P5MotorP5PrintP12RotarySwitchP10SideSensorP15VelocityControl>
}
 8026d2a:	bf00      	nop
 8026d2c:	3708      	adds	r7, #8
 8026d2e:	46bd      	mov	sp, r7
 8026d30:	bd80      	pop	{r7, pc}
 8026d32:	bf00      	nop
 8026d34:	20000378 	.word	0x20000378
 8026d38:	20000388 	.word	0x20000388
 8026d3c:	20000390 	.word	0x20000390
 8026d40:	20000394 	.word	0x20000394
 8026d44:	20000520 	.word	0x20000520
 8026d48:	20000528 	.word	0x20000528
 8026d4c:	20000384 	.word	0x20000384
 8026d50:	20000634 	.word	0x20000634
 8026d54:	200110a4 	.word	0x200110a4
 8026d58:	200110ac 	.word	0x200110ac
 8026d5c:	200110d4 	.word	0x200110d4
 8026d60:	200110a0 	.word	0x200110a0
 8026d64:	20000630 	.word	0x20000630
 8026d68:	200110dc 	.word	0x200110dc

08026d6c <_GLOBAL__sub_I_encoder>:
 8026d6c:	b580      	push	{r7, lr}
 8026d6e:	af00      	add	r7, sp, #0
 8026d70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8026d74:	2001      	movs	r0, #1
 8026d76:	f7ff ff89 	bl	8026c8c <_Z41__static_initialization_and_destruction_0ii>
 8026d7a:	bd80      	pop	{r7, pc}

08026d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8026d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8026db4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8026d80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8026d82:	e003      	b.n	8026d8c <LoopCopyDataInit>

08026d84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8026d84:	4b0c      	ldr	r3, [pc, #48]	; (8026db8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8026d86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8026d88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8026d8a:	3104      	adds	r1, #4

08026d8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8026d8c:	480b      	ldr	r0, [pc, #44]	; (8026dbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8026d8e:	4b0c      	ldr	r3, [pc, #48]	; (8026dc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8026d90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8026d92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8026d94:	d3f6      	bcc.n	8026d84 <CopyDataInit>
  ldr  r2, =_sbss
 8026d96:	4a0b      	ldr	r2, [pc, #44]	; (8026dc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8026d98:	e002      	b.n	8026da0 <LoopFillZerobss>

08026d9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8026d9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8026d9c:	f842 3b04 	str.w	r3, [r2], #4

08026da0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8026da0:	4b09      	ldr	r3, [pc, #36]	; (8026dc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8026da2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8026da4:	d3f9      	bcc.n	8026d9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8026da6:	f7ff fda3 	bl	80268f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8026daa:	f004 f8a7 	bl	802aefc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8026dae:	f7fc fdb5 	bl	802391c <main>
  bx  lr    
 8026db2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8026db4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8026db8:	0802bf58 	.word	0x0802bf58
  ldr  r0, =_sdata
 8026dbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8026dc0:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8026dc4:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8026dc8:	2001151c 	.word	0x2001151c

08026dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8026dcc:	e7fe      	b.n	8026dcc <ADC_IRQHandler>
	...

08026dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8026dd0:	b580      	push	{r7, lr}
 8026dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8026dd4:	4b0e      	ldr	r3, [pc, #56]	; (8026e10 <HAL_Init+0x40>)
 8026dd6:	681b      	ldr	r3, [r3, #0]
 8026dd8:	4a0d      	ldr	r2, [pc, #52]	; (8026e10 <HAL_Init+0x40>)
 8026dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8026dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8026de0:	4b0b      	ldr	r3, [pc, #44]	; (8026e10 <HAL_Init+0x40>)
 8026de2:	681b      	ldr	r3, [r3, #0]
 8026de4:	4a0a      	ldr	r2, [pc, #40]	; (8026e10 <HAL_Init+0x40>)
 8026de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8026dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8026dec:	4b08      	ldr	r3, [pc, #32]	; (8026e10 <HAL_Init+0x40>)
 8026dee:	681b      	ldr	r3, [r3, #0]
 8026df0:	4a07      	ldr	r2, [pc, #28]	; (8026e10 <HAL_Init+0x40>)
 8026df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8026df8:	2003      	movs	r0, #3
 8026dfa:	f000 fd41 	bl	8027880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8026dfe:	2001      	movs	r0, #1
 8026e00:	f000 f808 	bl	8026e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8026e04:	f7ff f8ce 	bl	8025fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8026e08:	2300      	movs	r3, #0
}
 8026e0a:	4618      	mov	r0, r3
 8026e0c:	bd80      	pop	{r7, pc}
 8026e0e:	bf00      	nop
 8026e10:	40023c00 	.word	0x40023c00

08026e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8026e14:	b580      	push	{r7, lr}
 8026e16:	b082      	sub	sp, #8
 8026e18:	af00      	add	r7, sp, #0
 8026e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8026e1c:	4b12      	ldr	r3, [pc, #72]	; (8026e68 <HAL_InitTick+0x54>)
 8026e1e:	681a      	ldr	r2, [r3, #0]
 8026e20:	4b12      	ldr	r3, [pc, #72]	; (8026e6c <HAL_InitTick+0x58>)
 8026e22:	781b      	ldrb	r3, [r3, #0]
 8026e24:	4619      	mov	r1, r3
 8026e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8026e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8026e32:	4618      	mov	r0, r3
 8026e34:	f000 fd59 	bl	80278ea <HAL_SYSTICK_Config>
 8026e38:	4603      	mov	r3, r0
 8026e3a:	2b00      	cmp	r3, #0
 8026e3c:	d001      	beq.n	8026e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8026e3e:	2301      	movs	r3, #1
 8026e40:	e00e      	b.n	8026e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8026e42:	687b      	ldr	r3, [r7, #4]
 8026e44:	2b0f      	cmp	r3, #15
 8026e46:	d80a      	bhi.n	8026e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8026e48:	2200      	movs	r2, #0
 8026e4a:	6879      	ldr	r1, [r7, #4]
 8026e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8026e50:	f000 fd21 	bl	8027896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8026e54:	4a06      	ldr	r2, [pc, #24]	; (8026e70 <HAL_InitTick+0x5c>)
 8026e56:	687b      	ldr	r3, [r7, #4]
 8026e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8026e5a:	2300      	movs	r3, #0
 8026e5c:	e000      	b.n	8026e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8026e5e:	2301      	movs	r3, #1
}
 8026e60:	4618      	mov	r0, r3
 8026e62:	3708      	adds	r7, #8
 8026e64:	46bd      	mov	sp, r7
 8026e66:	bd80      	pop	{r7, pc}
 8026e68:	20000014 	.word	0x20000014
 8026e6c:	2000001c 	.word	0x2000001c
 8026e70:	20000018 	.word	0x20000018

08026e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8026e74:	b480      	push	{r7}
 8026e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8026e78:	4b06      	ldr	r3, [pc, #24]	; (8026e94 <HAL_IncTick+0x20>)
 8026e7a:	781b      	ldrb	r3, [r3, #0]
 8026e7c:	461a      	mov	r2, r3
 8026e7e:	4b06      	ldr	r3, [pc, #24]	; (8026e98 <HAL_IncTick+0x24>)
 8026e80:	681b      	ldr	r3, [r3, #0]
 8026e82:	4413      	add	r3, r2
 8026e84:	4a04      	ldr	r2, [pc, #16]	; (8026e98 <HAL_IncTick+0x24>)
 8026e86:	6013      	str	r3, [r2, #0]
}
 8026e88:	bf00      	nop
 8026e8a:	46bd      	mov	sp, r7
 8026e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e90:	4770      	bx	lr
 8026e92:	bf00      	nop
 8026e94:	2000001c 	.word	0x2000001c
 8026e98:	200114f4 	.word	0x200114f4

08026e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8026e9c:	b480      	push	{r7}
 8026e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8026ea0:	4b03      	ldr	r3, [pc, #12]	; (8026eb0 <HAL_GetTick+0x14>)
 8026ea2:	681b      	ldr	r3, [r3, #0]
}
 8026ea4:	4618      	mov	r0, r3
 8026ea6:	46bd      	mov	sp, r7
 8026ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026eac:	4770      	bx	lr
 8026eae:	bf00      	nop
 8026eb0:	200114f4 	.word	0x200114f4

08026eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8026eb4:	b580      	push	{r7, lr}
 8026eb6:	b084      	sub	sp, #16
 8026eb8:	af00      	add	r7, sp, #0
 8026eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8026ebc:	f7ff ffee 	bl	8026e9c <HAL_GetTick>
 8026ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8026ec2:	687b      	ldr	r3, [r7, #4]
 8026ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8026ec6:	68fb      	ldr	r3, [r7, #12]
 8026ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026ecc:	d005      	beq.n	8026eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8026ece:	4b09      	ldr	r3, [pc, #36]	; (8026ef4 <HAL_Delay+0x40>)
 8026ed0:	781b      	ldrb	r3, [r3, #0]
 8026ed2:	461a      	mov	r2, r3
 8026ed4:	68fb      	ldr	r3, [r7, #12]
 8026ed6:	4413      	add	r3, r2
 8026ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8026eda:	bf00      	nop
 8026edc:	f7ff ffde 	bl	8026e9c <HAL_GetTick>
 8026ee0:	4602      	mov	r2, r0
 8026ee2:	68bb      	ldr	r3, [r7, #8]
 8026ee4:	1ad3      	subs	r3, r2, r3
 8026ee6:	68fa      	ldr	r2, [r7, #12]
 8026ee8:	429a      	cmp	r2, r3
 8026eea:	d8f7      	bhi.n	8026edc <HAL_Delay+0x28>
  {
  }
}
 8026eec:	bf00      	nop
 8026eee:	3710      	adds	r7, #16
 8026ef0:	46bd      	mov	sp, r7
 8026ef2:	bd80      	pop	{r7, pc}
 8026ef4:	2000001c 	.word	0x2000001c

08026ef8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8026ef8:	b580      	push	{r7, lr}
 8026efa:	b084      	sub	sp, #16
 8026efc:	af00      	add	r7, sp, #0
 8026efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8026f00:	2300      	movs	r3, #0
 8026f02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8026f04:	687b      	ldr	r3, [r7, #4]
 8026f06:	2b00      	cmp	r3, #0
 8026f08:	d101      	bne.n	8026f0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8026f0a:	2301      	movs	r3, #1
 8026f0c:	e033      	b.n	8026f76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8026f0e:	687b      	ldr	r3, [r7, #4]
 8026f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026f12:	2b00      	cmp	r3, #0
 8026f14:	d109      	bne.n	8026f2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8026f16:	6878      	ldr	r0, [r7, #4]
 8026f18:	f7ff f86c 	bl	8025ff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8026f1c:	687b      	ldr	r3, [r7, #4]
 8026f1e:	2200      	movs	r2, #0
 8026f20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8026f22:	687b      	ldr	r3, [r7, #4]
 8026f24:	2200      	movs	r2, #0
 8026f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8026f2a:	687b      	ldr	r3, [r7, #4]
 8026f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026f2e:	f003 0310 	and.w	r3, r3, #16
 8026f32:	2b00      	cmp	r3, #0
 8026f34:	d118      	bne.n	8026f68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8026f36:	687b      	ldr	r3, [r7, #4]
 8026f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026f3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8026f3e:	f023 0302 	bic.w	r3, r3, #2
 8026f42:	f043 0202 	orr.w	r2, r3, #2
 8026f46:	687b      	ldr	r3, [r7, #4]
 8026f48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8026f4a:	6878      	ldr	r0, [r7, #4]
 8026f4c:	f000 fa4a 	bl	80273e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8026f50:	687b      	ldr	r3, [r7, #4]
 8026f52:	2200      	movs	r2, #0
 8026f54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8026f56:	687b      	ldr	r3, [r7, #4]
 8026f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026f5a:	f023 0303 	bic.w	r3, r3, #3
 8026f5e:	f043 0201 	orr.w	r2, r3, #1
 8026f62:	687b      	ldr	r3, [r7, #4]
 8026f64:	641a      	str	r2, [r3, #64]	; 0x40
 8026f66:	e001      	b.n	8026f6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8026f68:	2301      	movs	r3, #1
 8026f6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8026f6c:	687b      	ldr	r3, [r7, #4]
 8026f6e:	2200      	movs	r2, #0
 8026f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8026f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8026f76:	4618      	mov	r0, r3
 8026f78:	3710      	adds	r7, #16
 8026f7a:	46bd      	mov	sp, r7
 8026f7c:	bd80      	pop	{r7, pc}
	...

08026f80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8026f80:	b580      	push	{r7, lr}
 8026f82:	b086      	sub	sp, #24
 8026f84:	af00      	add	r7, sp, #0
 8026f86:	60f8      	str	r0, [r7, #12]
 8026f88:	60b9      	str	r1, [r7, #8]
 8026f8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8026f8c:	2300      	movs	r3, #0
 8026f8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8026f90:	68fb      	ldr	r3, [r7, #12]
 8026f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026f96:	2b01      	cmp	r3, #1
 8026f98:	d101      	bne.n	8026f9e <HAL_ADC_Start_DMA+0x1e>
 8026f9a:	2302      	movs	r3, #2
 8026f9c:	e0cc      	b.n	8027138 <HAL_ADC_Start_DMA+0x1b8>
 8026f9e:	68fb      	ldr	r3, [r7, #12]
 8026fa0:	2201      	movs	r2, #1
 8026fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8026fa6:	68fb      	ldr	r3, [r7, #12]
 8026fa8:	681b      	ldr	r3, [r3, #0]
 8026faa:	689b      	ldr	r3, [r3, #8]
 8026fac:	f003 0301 	and.w	r3, r3, #1
 8026fb0:	2b01      	cmp	r3, #1
 8026fb2:	d018      	beq.n	8026fe6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8026fb4:	68fb      	ldr	r3, [r7, #12]
 8026fb6:	681b      	ldr	r3, [r3, #0]
 8026fb8:	689a      	ldr	r2, [r3, #8]
 8026fba:	68fb      	ldr	r3, [r7, #12]
 8026fbc:	681b      	ldr	r3, [r3, #0]
 8026fbe:	f042 0201 	orr.w	r2, r2, #1
 8026fc2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8026fc4:	4b5e      	ldr	r3, [pc, #376]	; (8027140 <HAL_ADC_Start_DMA+0x1c0>)
 8026fc6:	681b      	ldr	r3, [r3, #0]
 8026fc8:	4a5e      	ldr	r2, [pc, #376]	; (8027144 <HAL_ADC_Start_DMA+0x1c4>)
 8026fca:	fba2 2303 	umull	r2, r3, r2, r3
 8026fce:	0c9a      	lsrs	r2, r3, #18
 8026fd0:	4613      	mov	r3, r2
 8026fd2:	005b      	lsls	r3, r3, #1
 8026fd4:	4413      	add	r3, r2
 8026fd6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8026fd8:	e002      	b.n	8026fe0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8026fda:	693b      	ldr	r3, [r7, #16]
 8026fdc:	3b01      	subs	r3, #1
 8026fde:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8026fe0:	693b      	ldr	r3, [r7, #16]
 8026fe2:	2b00      	cmp	r3, #0
 8026fe4:	d1f9      	bne.n	8026fda <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8026fe6:	68fb      	ldr	r3, [r7, #12]
 8026fe8:	681b      	ldr	r3, [r3, #0]
 8026fea:	689b      	ldr	r3, [r3, #8]
 8026fec:	f003 0301 	and.w	r3, r3, #1
 8026ff0:	2b01      	cmp	r3, #1
 8026ff2:	f040 80a0 	bne.w	8027136 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8026ff6:	68fb      	ldr	r3, [r7, #12]
 8026ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026ffa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8026ffe:	f023 0301 	bic.w	r3, r3, #1
 8027002:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8027006:	68fb      	ldr	r3, [r7, #12]
 8027008:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 802700a:	68fb      	ldr	r3, [r7, #12]
 802700c:	681b      	ldr	r3, [r3, #0]
 802700e:	685b      	ldr	r3, [r3, #4]
 8027010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027014:	2b00      	cmp	r3, #0
 8027016:	d007      	beq.n	8027028 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8027018:	68fb      	ldr	r3, [r7, #12]
 802701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802701c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8027020:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8027024:	68fb      	ldr	r3, [r7, #12]
 8027026:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8027028:	68fb      	ldr	r3, [r7, #12]
 802702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802702c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8027030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8027034:	d106      	bne.n	8027044 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8027036:	68fb      	ldr	r3, [r7, #12]
 8027038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802703a:	f023 0206 	bic.w	r2, r3, #6
 802703e:	68fb      	ldr	r3, [r7, #12]
 8027040:	645a      	str	r2, [r3, #68]	; 0x44
 8027042:	e002      	b.n	802704a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8027044:	68fb      	ldr	r3, [r7, #12]
 8027046:	2200      	movs	r2, #0
 8027048:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 802704a:	68fb      	ldr	r3, [r7, #12]
 802704c:	2200      	movs	r2, #0
 802704e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8027052:	4b3d      	ldr	r3, [pc, #244]	; (8027148 <HAL_ADC_Start_DMA+0x1c8>)
 8027054:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8027056:	68fb      	ldr	r3, [r7, #12]
 8027058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802705a:	4a3c      	ldr	r2, [pc, #240]	; (802714c <HAL_ADC_Start_DMA+0x1cc>)
 802705c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 802705e:	68fb      	ldr	r3, [r7, #12]
 8027060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027062:	4a3b      	ldr	r2, [pc, #236]	; (8027150 <HAL_ADC_Start_DMA+0x1d0>)
 8027064:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8027066:	68fb      	ldr	r3, [r7, #12]
 8027068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802706a:	4a3a      	ldr	r2, [pc, #232]	; (8027154 <HAL_ADC_Start_DMA+0x1d4>)
 802706c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 802706e:	68fb      	ldr	r3, [r7, #12]
 8027070:	681b      	ldr	r3, [r3, #0]
 8027072:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8027076:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8027078:	68fb      	ldr	r3, [r7, #12]
 802707a:	681b      	ldr	r3, [r3, #0]
 802707c:	685a      	ldr	r2, [r3, #4]
 802707e:	68fb      	ldr	r3, [r7, #12]
 8027080:	681b      	ldr	r3, [r3, #0]
 8027082:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8027086:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8027088:	68fb      	ldr	r3, [r7, #12]
 802708a:	681b      	ldr	r3, [r3, #0]
 802708c:	689a      	ldr	r2, [r3, #8]
 802708e:	68fb      	ldr	r3, [r7, #12]
 8027090:	681b      	ldr	r3, [r3, #0]
 8027092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8027096:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8027098:	68fb      	ldr	r3, [r7, #12]
 802709a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 802709c:	68fb      	ldr	r3, [r7, #12]
 802709e:	681b      	ldr	r3, [r3, #0]
 80270a0:	334c      	adds	r3, #76	; 0x4c
 80270a2:	4619      	mov	r1, r3
 80270a4:	68ba      	ldr	r2, [r7, #8]
 80270a6:	687b      	ldr	r3, [r7, #4]
 80270a8:	f000 fcda 	bl	8027a60 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80270ac:	697b      	ldr	r3, [r7, #20]
 80270ae:	685b      	ldr	r3, [r3, #4]
 80270b0:	f003 031f 	and.w	r3, r3, #31
 80270b4:	2b00      	cmp	r3, #0
 80270b6:	d12a      	bne.n	802710e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80270b8:	68fb      	ldr	r3, [r7, #12]
 80270ba:	681b      	ldr	r3, [r3, #0]
 80270bc:	4a26      	ldr	r2, [pc, #152]	; (8027158 <HAL_ADC_Start_DMA+0x1d8>)
 80270be:	4293      	cmp	r3, r2
 80270c0:	d015      	beq.n	80270ee <HAL_ADC_Start_DMA+0x16e>
 80270c2:	68fb      	ldr	r3, [r7, #12]
 80270c4:	681b      	ldr	r3, [r3, #0]
 80270c6:	4a25      	ldr	r2, [pc, #148]	; (802715c <HAL_ADC_Start_DMA+0x1dc>)
 80270c8:	4293      	cmp	r3, r2
 80270ca:	d105      	bne.n	80270d8 <HAL_ADC_Start_DMA+0x158>
 80270cc:	4b1e      	ldr	r3, [pc, #120]	; (8027148 <HAL_ADC_Start_DMA+0x1c8>)
 80270ce:	685b      	ldr	r3, [r3, #4]
 80270d0:	f003 031f 	and.w	r3, r3, #31
 80270d4:	2b00      	cmp	r3, #0
 80270d6:	d00a      	beq.n	80270ee <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80270d8:	68fb      	ldr	r3, [r7, #12]
 80270da:	681b      	ldr	r3, [r3, #0]
 80270dc:	4a20      	ldr	r2, [pc, #128]	; (8027160 <HAL_ADC_Start_DMA+0x1e0>)
 80270de:	4293      	cmp	r3, r2
 80270e0:	d129      	bne.n	8027136 <HAL_ADC_Start_DMA+0x1b6>
 80270e2:	4b19      	ldr	r3, [pc, #100]	; (8027148 <HAL_ADC_Start_DMA+0x1c8>)
 80270e4:	685b      	ldr	r3, [r3, #4]
 80270e6:	f003 031f 	and.w	r3, r3, #31
 80270ea:	2b0f      	cmp	r3, #15
 80270ec:	d823      	bhi.n	8027136 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80270ee:	68fb      	ldr	r3, [r7, #12]
 80270f0:	681b      	ldr	r3, [r3, #0]
 80270f2:	689b      	ldr	r3, [r3, #8]
 80270f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80270f8:	2b00      	cmp	r3, #0
 80270fa:	d11c      	bne.n	8027136 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80270fc:	68fb      	ldr	r3, [r7, #12]
 80270fe:	681b      	ldr	r3, [r3, #0]
 8027100:	689a      	ldr	r2, [r3, #8]
 8027102:	68fb      	ldr	r3, [r7, #12]
 8027104:	681b      	ldr	r3, [r3, #0]
 8027106:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 802710a:	609a      	str	r2, [r3, #8]
 802710c:	e013      	b.n	8027136 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 802710e:	68fb      	ldr	r3, [r7, #12]
 8027110:	681b      	ldr	r3, [r3, #0]
 8027112:	4a11      	ldr	r2, [pc, #68]	; (8027158 <HAL_ADC_Start_DMA+0x1d8>)
 8027114:	4293      	cmp	r3, r2
 8027116:	d10e      	bne.n	8027136 <HAL_ADC_Start_DMA+0x1b6>
 8027118:	68fb      	ldr	r3, [r7, #12]
 802711a:	681b      	ldr	r3, [r3, #0]
 802711c:	689b      	ldr	r3, [r3, #8]
 802711e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8027122:	2b00      	cmp	r3, #0
 8027124:	d107      	bne.n	8027136 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8027126:	68fb      	ldr	r3, [r7, #12]
 8027128:	681b      	ldr	r3, [r3, #0]
 802712a:	689a      	ldr	r2, [r3, #8]
 802712c:	68fb      	ldr	r3, [r7, #12]
 802712e:	681b      	ldr	r3, [r3, #0]
 8027130:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8027134:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8027136:	2300      	movs	r3, #0
}
 8027138:	4618      	mov	r0, r3
 802713a:	3718      	adds	r7, #24
 802713c:	46bd      	mov	sp, r7
 802713e:	bd80      	pop	{r7, pc}
 8027140:	20000014 	.word	0x20000014
 8027144:	431bde83 	.word	0x431bde83
 8027148:	40012300 	.word	0x40012300
 802714c:	080275dd 	.word	0x080275dd
 8027150:	08027697 	.word	0x08027697
 8027154:	080276b3 	.word	0x080276b3
 8027158:	40012000 	.word	0x40012000
 802715c:	40012100 	.word	0x40012100
 8027160:	40012200 	.word	0x40012200

08027164 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8027164:	b480      	push	{r7}
 8027166:	b083      	sub	sp, #12
 8027168:	af00      	add	r7, sp, #0
 802716a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 802716c:	bf00      	nop
 802716e:	370c      	adds	r7, #12
 8027170:	46bd      	mov	sp, r7
 8027172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027176:	4770      	bx	lr

08027178 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8027178:	b480      	push	{r7}
 802717a:	b083      	sub	sp, #12
 802717c:	af00      	add	r7, sp, #0
 802717e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8027180:	bf00      	nop
 8027182:	370c      	adds	r7, #12
 8027184:	46bd      	mov	sp, r7
 8027186:	f85d 7b04 	ldr.w	r7, [sp], #4
 802718a:	4770      	bx	lr

0802718c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 802718c:	b480      	push	{r7}
 802718e:	b083      	sub	sp, #12
 8027190:	af00      	add	r7, sp, #0
 8027192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8027194:	bf00      	nop
 8027196:	370c      	adds	r7, #12
 8027198:	46bd      	mov	sp, r7
 802719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802719e:	4770      	bx	lr

080271a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80271a0:	b480      	push	{r7}
 80271a2:	b085      	sub	sp, #20
 80271a4:	af00      	add	r7, sp, #0
 80271a6:	6078      	str	r0, [r7, #4]
 80271a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80271aa:	2300      	movs	r3, #0
 80271ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80271ae:	687b      	ldr	r3, [r7, #4]
 80271b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80271b4:	2b01      	cmp	r3, #1
 80271b6:	d101      	bne.n	80271bc <HAL_ADC_ConfigChannel+0x1c>
 80271b8:	2302      	movs	r3, #2
 80271ba:	e105      	b.n	80273c8 <HAL_ADC_ConfigChannel+0x228>
 80271bc:	687b      	ldr	r3, [r7, #4]
 80271be:	2201      	movs	r2, #1
 80271c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80271c4:	683b      	ldr	r3, [r7, #0]
 80271c6:	681b      	ldr	r3, [r3, #0]
 80271c8:	2b09      	cmp	r3, #9
 80271ca:	d925      	bls.n	8027218 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80271cc:	687b      	ldr	r3, [r7, #4]
 80271ce:	681b      	ldr	r3, [r3, #0]
 80271d0:	68d9      	ldr	r1, [r3, #12]
 80271d2:	683b      	ldr	r3, [r7, #0]
 80271d4:	681b      	ldr	r3, [r3, #0]
 80271d6:	b29b      	uxth	r3, r3
 80271d8:	461a      	mov	r2, r3
 80271da:	4613      	mov	r3, r2
 80271dc:	005b      	lsls	r3, r3, #1
 80271de:	4413      	add	r3, r2
 80271e0:	3b1e      	subs	r3, #30
 80271e2:	2207      	movs	r2, #7
 80271e4:	fa02 f303 	lsl.w	r3, r2, r3
 80271e8:	43da      	mvns	r2, r3
 80271ea:	687b      	ldr	r3, [r7, #4]
 80271ec:	681b      	ldr	r3, [r3, #0]
 80271ee:	400a      	ands	r2, r1
 80271f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80271f2:	687b      	ldr	r3, [r7, #4]
 80271f4:	681b      	ldr	r3, [r3, #0]
 80271f6:	68d9      	ldr	r1, [r3, #12]
 80271f8:	683b      	ldr	r3, [r7, #0]
 80271fa:	689a      	ldr	r2, [r3, #8]
 80271fc:	683b      	ldr	r3, [r7, #0]
 80271fe:	681b      	ldr	r3, [r3, #0]
 8027200:	b29b      	uxth	r3, r3
 8027202:	4618      	mov	r0, r3
 8027204:	4603      	mov	r3, r0
 8027206:	005b      	lsls	r3, r3, #1
 8027208:	4403      	add	r3, r0
 802720a:	3b1e      	subs	r3, #30
 802720c:	409a      	lsls	r2, r3
 802720e:	687b      	ldr	r3, [r7, #4]
 8027210:	681b      	ldr	r3, [r3, #0]
 8027212:	430a      	orrs	r2, r1
 8027214:	60da      	str	r2, [r3, #12]
 8027216:	e022      	b.n	802725e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8027218:	687b      	ldr	r3, [r7, #4]
 802721a:	681b      	ldr	r3, [r3, #0]
 802721c:	6919      	ldr	r1, [r3, #16]
 802721e:	683b      	ldr	r3, [r7, #0]
 8027220:	681b      	ldr	r3, [r3, #0]
 8027222:	b29b      	uxth	r3, r3
 8027224:	461a      	mov	r2, r3
 8027226:	4613      	mov	r3, r2
 8027228:	005b      	lsls	r3, r3, #1
 802722a:	4413      	add	r3, r2
 802722c:	2207      	movs	r2, #7
 802722e:	fa02 f303 	lsl.w	r3, r2, r3
 8027232:	43da      	mvns	r2, r3
 8027234:	687b      	ldr	r3, [r7, #4]
 8027236:	681b      	ldr	r3, [r3, #0]
 8027238:	400a      	ands	r2, r1
 802723a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 802723c:	687b      	ldr	r3, [r7, #4]
 802723e:	681b      	ldr	r3, [r3, #0]
 8027240:	6919      	ldr	r1, [r3, #16]
 8027242:	683b      	ldr	r3, [r7, #0]
 8027244:	689a      	ldr	r2, [r3, #8]
 8027246:	683b      	ldr	r3, [r7, #0]
 8027248:	681b      	ldr	r3, [r3, #0]
 802724a:	b29b      	uxth	r3, r3
 802724c:	4618      	mov	r0, r3
 802724e:	4603      	mov	r3, r0
 8027250:	005b      	lsls	r3, r3, #1
 8027252:	4403      	add	r3, r0
 8027254:	409a      	lsls	r2, r3
 8027256:	687b      	ldr	r3, [r7, #4]
 8027258:	681b      	ldr	r3, [r3, #0]
 802725a:	430a      	orrs	r2, r1
 802725c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 802725e:	683b      	ldr	r3, [r7, #0]
 8027260:	685b      	ldr	r3, [r3, #4]
 8027262:	2b06      	cmp	r3, #6
 8027264:	d824      	bhi.n	80272b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8027266:	687b      	ldr	r3, [r7, #4]
 8027268:	681b      	ldr	r3, [r3, #0]
 802726a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802726c:	683b      	ldr	r3, [r7, #0]
 802726e:	685a      	ldr	r2, [r3, #4]
 8027270:	4613      	mov	r3, r2
 8027272:	009b      	lsls	r3, r3, #2
 8027274:	4413      	add	r3, r2
 8027276:	3b05      	subs	r3, #5
 8027278:	221f      	movs	r2, #31
 802727a:	fa02 f303 	lsl.w	r3, r2, r3
 802727e:	43da      	mvns	r2, r3
 8027280:	687b      	ldr	r3, [r7, #4]
 8027282:	681b      	ldr	r3, [r3, #0]
 8027284:	400a      	ands	r2, r1
 8027286:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8027288:	687b      	ldr	r3, [r7, #4]
 802728a:	681b      	ldr	r3, [r3, #0]
 802728c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802728e:	683b      	ldr	r3, [r7, #0]
 8027290:	681b      	ldr	r3, [r3, #0]
 8027292:	b29b      	uxth	r3, r3
 8027294:	4618      	mov	r0, r3
 8027296:	683b      	ldr	r3, [r7, #0]
 8027298:	685a      	ldr	r2, [r3, #4]
 802729a:	4613      	mov	r3, r2
 802729c:	009b      	lsls	r3, r3, #2
 802729e:	4413      	add	r3, r2
 80272a0:	3b05      	subs	r3, #5
 80272a2:	fa00 f203 	lsl.w	r2, r0, r3
 80272a6:	687b      	ldr	r3, [r7, #4]
 80272a8:	681b      	ldr	r3, [r3, #0]
 80272aa:	430a      	orrs	r2, r1
 80272ac:	635a      	str	r2, [r3, #52]	; 0x34
 80272ae:	e04c      	b.n	802734a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80272b0:	683b      	ldr	r3, [r7, #0]
 80272b2:	685b      	ldr	r3, [r3, #4]
 80272b4:	2b0c      	cmp	r3, #12
 80272b6:	d824      	bhi.n	8027302 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80272b8:	687b      	ldr	r3, [r7, #4]
 80272ba:	681b      	ldr	r3, [r3, #0]
 80272bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80272be:	683b      	ldr	r3, [r7, #0]
 80272c0:	685a      	ldr	r2, [r3, #4]
 80272c2:	4613      	mov	r3, r2
 80272c4:	009b      	lsls	r3, r3, #2
 80272c6:	4413      	add	r3, r2
 80272c8:	3b23      	subs	r3, #35	; 0x23
 80272ca:	221f      	movs	r2, #31
 80272cc:	fa02 f303 	lsl.w	r3, r2, r3
 80272d0:	43da      	mvns	r2, r3
 80272d2:	687b      	ldr	r3, [r7, #4]
 80272d4:	681b      	ldr	r3, [r3, #0]
 80272d6:	400a      	ands	r2, r1
 80272d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80272da:	687b      	ldr	r3, [r7, #4]
 80272dc:	681b      	ldr	r3, [r3, #0]
 80272de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80272e0:	683b      	ldr	r3, [r7, #0]
 80272e2:	681b      	ldr	r3, [r3, #0]
 80272e4:	b29b      	uxth	r3, r3
 80272e6:	4618      	mov	r0, r3
 80272e8:	683b      	ldr	r3, [r7, #0]
 80272ea:	685a      	ldr	r2, [r3, #4]
 80272ec:	4613      	mov	r3, r2
 80272ee:	009b      	lsls	r3, r3, #2
 80272f0:	4413      	add	r3, r2
 80272f2:	3b23      	subs	r3, #35	; 0x23
 80272f4:	fa00 f203 	lsl.w	r2, r0, r3
 80272f8:	687b      	ldr	r3, [r7, #4]
 80272fa:	681b      	ldr	r3, [r3, #0]
 80272fc:	430a      	orrs	r2, r1
 80272fe:	631a      	str	r2, [r3, #48]	; 0x30
 8027300:	e023      	b.n	802734a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8027302:	687b      	ldr	r3, [r7, #4]
 8027304:	681b      	ldr	r3, [r3, #0]
 8027306:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8027308:	683b      	ldr	r3, [r7, #0]
 802730a:	685a      	ldr	r2, [r3, #4]
 802730c:	4613      	mov	r3, r2
 802730e:	009b      	lsls	r3, r3, #2
 8027310:	4413      	add	r3, r2
 8027312:	3b41      	subs	r3, #65	; 0x41
 8027314:	221f      	movs	r2, #31
 8027316:	fa02 f303 	lsl.w	r3, r2, r3
 802731a:	43da      	mvns	r2, r3
 802731c:	687b      	ldr	r3, [r7, #4]
 802731e:	681b      	ldr	r3, [r3, #0]
 8027320:	400a      	ands	r2, r1
 8027322:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8027324:	687b      	ldr	r3, [r7, #4]
 8027326:	681b      	ldr	r3, [r3, #0]
 8027328:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802732a:	683b      	ldr	r3, [r7, #0]
 802732c:	681b      	ldr	r3, [r3, #0]
 802732e:	b29b      	uxth	r3, r3
 8027330:	4618      	mov	r0, r3
 8027332:	683b      	ldr	r3, [r7, #0]
 8027334:	685a      	ldr	r2, [r3, #4]
 8027336:	4613      	mov	r3, r2
 8027338:	009b      	lsls	r3, r3, #2
 802733a:	4413      	add	r3, r2
 802733c:	3b41      	subs	r3, #65	; 0x41
 802733e:	fa00 f203 	lsl.w	r2, r0, r3
 8027342:	687b      	ldr	r3, [r7, #4]
 8027344:	681b      	ldr	r3, [r3, #0]
 8027346:	430a      	orrs	r2, r1
 8027348:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802734a:	4b22      	ldr	r3, [pc, #136]	; (80273d4 <HAL_ADC_ConfigChannel+0x234>)
 802734c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 802734e:	687b      	ldr	r3, [r7, #4]
 8027350:	681b      	ldr	r3, [r3, #0]
 8027352:	4a21      	ldr	r2, [pc, #132]	; (80273d8 <HAL_ADC_ConfigChannel+0x238>)
 8027354:	4293      	cmp	r3, r2
 8027356:	d109      	bne.n	802736c <HAL_ADC_ConfigChannel+0x1cc>
 8027358:	683b      	ldr	r3, [r7, #0]
 802735a:	681b      	ldr	r3, [r3, #0]
 802735c:	2b12      	cmp	r3, #18
 802735e:	d105      	bne.n	802736c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8027360:	68fb      	ldr	r3, [r7, #12]
 8027362:	685b      	ldr	r3, [r3, #4]
 8027364:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8027368:	68fb      	ldr	r3, [r7, #12]
 802736a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 802736c:	687b      	ldr	r3, [r7, #4]
 802736e:	681b      	ldr	r3, [r3, #0]
 8027370:	4a19      	ldr	r2, [pc, #100]	; (80273d8 <HAL_ADC_ConfigChannel+0x238>)
 8027372:	4293      	cmp	r3, r2
 8027374:	d123      	bne.n	80273be <HAL_ADC_ConfigChannel+0x21e>
 8027376:	683b      	ldr	r3, [r7, #0]
 8027378:	681b      	ldr	r3, [r3, #0]
 802737a:	2b10      	cmp	r3, #16
 802737c:	d003      	beq.n	8027386 <HAL_ADC_ConfigChannel+0x1e6>
 802737e:	683b      	ldr	r3, [r7, #0]
 8027380:	681b      	ldr	r3, [r3, #0]
 8027382:	2b11      	cmp	r3, #17
 8027384:	d11b      	bne.n	80273be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8027386:	68fb      	ldr	r3, [r7, #12]
 8027388:	685b      	ldr	r3, [r3, #4]
 802738a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 802738e:	68fb      	ldr	r3, [r7, #12]
 8027390:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8027392:	683b      	ldr	r3, [r7, #0]
 8027394:	681b      	ldr	r3, [r3, #0]
 8027396:	2b10      	cmp	r3, #16
 8027398:	d111      	bne.n	80273be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 802739a:	4b10      	ldr	r3, [pc, #64]	; (80273dc <HAL_ADC_ConfigChannel+0x23c>)
 802739c:	681b      	ldr	r3, [r3, #0]
 802739e:	4a10      	ldr	r2, [pc, #64]	; (80273e0 <HAL_ADC_ConfigChannel+0x240>)
 80273a0:	fba2 2303 	umull	r2, r3, r2, r3
 80273a4:	0c9a      	lsrs	r2, r3, #18
 80273a6:	4613      	mov	r3, r2
 80273a8:	009b      	lsls	r3, r3, #2
 80273aa:	4413      	add	r3, r2
 80273ac:	005b      	lsls	r3, r3, #1
 80273ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80273b0:	e002      	b.n	80273b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80273b2:	68bb      	ldr	r3, [r7, #8]
 80273b4:	3b01      	subs	r3, #1
 80273b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80273b8:	68bb      	ldr	r3, [r7, #8]
 80273ba:	2b00      	cmp	r3, #0
 80273bc:	d1f9      	bne.n	80273b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80273be:	687b      	ldr	r3, [r7, #4]
 80273c0:	2200      	movs	r2, #0
 80273c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80273c6:	2300      	movs	r3, #0
}
 80273c8:	4618      	mov	r0, r3
 80273ca:	3714      	adds	r7, #20
 80273cc:	46bd      	mov	sp, r7
 80273ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273d2:	4770      	bx	lr
 80273d4:	40012300 	.word	0x40012300
 80273d8:	40012000 	.word	0x40012000
 80273dc:	20000014 	.word	0x20000014
 80273e0:	431bde83 	.word	0x431bde83

080273e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80273e4:	b480      	push	{r7}
 80273e6:	b085      	sub	sp, #20
 80273e8:	af00      	add	r7, sp, #0
 80273ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80273ec:	4b79      	ldr	r3, [pc, #484]	; (80275d4 <ADC_Init+0x1f0>)
 80273ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80273f0:	68fb      	ldr	r3, [r7, #12]
 80273f2:	685b      	ldr	r3, [r3, #4]
 80273f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80273f8:	68fb      	ldr	r3, [r7, #12]
 80273fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80273fc:	68fb      	ldr	r3, [r7, #12]
 80273fe:	685a      	ldr	r2, [r3, #4]
 8027400:	687b      	ldr	r3, [r7, #4]
 8027402:	685b      	ldr	r3, [r3, #4]
 8027404:	431a      	orrs	r2, r3
 8027406:	68fb      	ldr	r3, [r7, #12]
 8027408:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 802740a:	687b      	ldr	r3, [r7, #4]
 802740c:	681b      	ldr	r3, [r3, #0]
 802740e:	685a      	ldr	r2, [r3, #4]
 8027410:	687b      	ldr	r3, [r7, #4]
 8027412:	681b      	ldr	r3, [r3, #0]
 8027414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8027418:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 802741a:	687b      	ldr	r3, [r7, #4]
 802741c:	681b      	ldr	r3, [r3, #0]
 802741e:	6859      	ldr	r1, [r3, #4]
 8027420:	687b      	ldr	r3, [r7, #4]
 8027422:	691b      	ldr	r3, [r3, #16]
 8027424:	021a      	lsls	r2, r3, #8
 8027426:	687b      	ldr	r3, [r7, #4]
 8027428:	681b      	ldr	r3, [r3, #0]
 802742a:	430a      	orrs	r2, r1
 802742c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 802742e:	687b      	ldr	r3, [r7, #4]
 8027430:	681b      	ldr	r3, [r3, #0]
 8027432:	685a      	ldr	r2, [r3, #4]
 8027434:	687b      	ldr	r3, [r7, #4]
 8027436:	681b      	ldr	r3, [r3, #0]
 8027438:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 802743c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 802743e:	687b      	ldr	r3, [r7, #4]
 8027440:	681b      	ldr	r3, [r3, #0]
 8027442:	6859      	ldr	r1, [r3, #4]
 8027444:	687b      	ldr	r3, [r7, #4]
 8027446:	689a      	ldr	r2, [r3, #8]
 8027448:	687b      	ldr	r3, [r7, #4]
 802744a:	681b      	ldr	r3, [r3, #0]
 802744c:	430a      	orrs	r2, r1
 802744e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8027450:	687b      	ldr	r3, [r7, #4]
 8027452:	681b      	ldr	r3, [r3, #0]
 8027454:	689a      	ldr	r2, [r3, #8]
 8027456:	687b      	ldr	r3, [r7, #4]
 8027458:	681b      	ldr	r3, [r3, #0]
 802745a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802745e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8027460:	687b      	ldr	r3, [r7, #4]
 8027462:	681b      	ldr	r3, [r3, #0]
 8027464:	6899      	ldr	r1, [r3, #8]
 8027466:	687b      	ldr	r3, [r7, #4]
 8027468:	68da      	ldr	r2, [r3, #12]
 802746a:	687b      	ldr	r3, [r7, #4]
 802746c:	681b      	ldr	r3, [r3, #0]
 802746e:	430a      	orrs	r2, r1
 8027470:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8027472:	687b      	ldr	r3, [r7, #4]
 8027474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027476:	4a58      	ldr	r2, [pc, #352]	; (80275d8 <ADC_Init+0x1f4>)
 8027478:	4293      	cmp	r3, r2
 802747a:	d022      	beq.n	80274c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 802747c:	687b      	ldr	r3, [r7, #4]
 802747e:	681b      	ldr	r3, [r3, #0]
 8027480:	689a      	ldr	r2, [r3, #8]
 8027482:	687b      	ldr	r3, [r7, #4]
 8027484:	681b      	ldr	r3, [r3, #0]
 8027486:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802748a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 802748c:	687b      	ldr	r3, [r7, #4]
 802748e:	681b      	ldr	r3, [r3, #0]
 8027490:	6899      	ldr	r1, [r3, #8]
 8027492:	687b      	ldr	r3, [r7, #4]
 8027494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8027496:	687b      	ldr	r3, [r7, #4]
 8027498:	681b      	ldr	r3, [r3, #0]
 802749a:	430a      	orrs	r2, r1
 802749c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 802749e:	687b      	ldr	r3, [r7, #4]
 80274a0:	681b      	ldr	r3, [r3, #0]
 80274a2:	689a      	ldr	r2, [r3, #8]
 80274a4:	687b      	ldr	r3, [r7, #4]
 80274a6:	681b      	ldr	r3, [r3, #0]
 80274a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80274ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80274ae:	687b      	ldr	r3, [r7, #4]
 80274b0:	681b      	ldr	r3, [r3, #0]
 80274b2:	6899      	ldr	r1, [r3, #8]
 80274b4:	687b      	ldr	r3, [r7, #4]
 80274b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80274b8:	687b      	ldr	r3, [r7, #4]
 80274ba:	681b      	ldr	r3, [r3, #0]
 80274bc:	430a      	orrs	r2, r1
 80274be:	609a      	str	r2, [r3, #8]
 80274c0:	e00f      	b.n	80274e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80274c2:	687b      	ldr	r3, [r7, #4]
 80274c4:	681b      	ldr	r3, [r3, #0]
 80274c6:	689a      	ldr	r2, [r3, #8]
 80274c8:	687b      	ldr	r3, [r7, #4]
 80274ca:	681b      	ldr	r3, [r3, #0]
 80274cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80274d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80274d2:	687b      	ldr	r3, [r7, #4]
 80274d4:	681b      	ldr	r3, [r3, #0]
 80274d6:	689a      	ldr	r2, [r3, #8]
 80274d8:	687b      	ldr	r3, [r7, #4]
 80274da:	681b      	ldr	r3, [r3, #0]
 80274dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80274e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80274e2:	687b      	ldr	r3, [r7, #4]
 80274e4:	681b      	ldr	r3, [r3, #0]
 80274e6:	689a      	ldr	r2, [r3, #8]
 80274e8:	687b      	ldr	r3, [r7, #4]
 80274ea:	681b      	ldr	r3, [r3, #0]
 80274ec:	f022 0202 	bic.w	r2, r2, #2
 80274f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80274f2:	687b      	ldr	r3, [r7, #4]
 80274f4:	681b      	ldr	r3, [r3, #0]
 80274f6:	6899      	ldr	r1, [r3, #8]
 80274f8:	687b      	ldr	r3, [r7, #4]
 80274fa:	7e1b      	ldrb	r3, [r3, #24]
 80274fc:	005a      	lsls	r2, r3, #1
 80274fe:	687b      	ldr	r3, [r7, #4]
 8027500:	681b      	ldr	r3, [r3, #0]
 8027502:	430a      	orrs	r2, r1
 8027504:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8027506:	687b      	ldr	r3, [r7, #4]
 8027508:	f893 3020 	ldrb.w	r3, [r3, #32]
 802750c:	2b00      	cmp	r3, #0
 802750e:	d01b      	beq.n	8027548 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8027510:	687b      	ldr	r3, [r7, #4]
 8027512:	681b      	ldr	r3, [r3, #0]
 8027514:	685a      	ldr	r2, [r3, #4]
 8027516:	687b      	ldr	r3, [r7, #4]
 8027518:	681b      	ldr	r3, [r3, #0]
 802751a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802751e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8027520:	687b      	ldr	r3, [r7, #4]
 8027522:	681b      	ldr	r3, [r3, #0]
 8027524:	685a      	ldr	r2, [r3, #4]
 8027526:	687b      	ldr	r3, [r7, #4]
 8027528:	681b      	ldr	r3, [r3, #0]
 802752a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 802752e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8027530:	687b      	ldr	r3, [r7, #4]
 8027532:	681b      	ldr	r3, [r3, #0]
 8027534:	6859      	ldr	r1, [r3, #4]
 8027536:	687b      	ldr	r3, [r7, #4]
 8027538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802753a:	3b01      	subs	r3, #1
 802753c:	035a      	lsls	r2, r3, #13
 802753e:	687b      	ldr	r3, [r7, #4]
 8027540:	681b      	ldr	r3, [r3, #0]
 8027542:	430a      	orrs	r2, r1
 8027544:	605a      	str	r2, [r3, #4]
 8027546:	e007      	b.n	8027558 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8027548:	687b      	ldr	r3, [r7, #4]
 802754a:	681b      	ldr	r3, [r3, #0]
 802754c:	685a      	ldr	r2, [r3, #4]
 802754e:	687b      	ldr	r3, [r7, #4]
 8027550:	681b      	ldr	r3, [r3, #0]
 8027552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8027556:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8027558:	687b      	ldr	r3, [r7, #4]
 802755a:	681b      	ldr	r3, [r3, #0]
 802755c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802755e:	687b      	ldr	r3, [r7, #4]
 8027560:	681b      	ldr	r3, [r3, #0]
 8027562:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8027566:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8027568:	687b      	ldr	r3, [r7, #4]
 802756a:	681b      	ldr	r3, [r3, #0]
 802756c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802756e:	687b      	ldr	r3, [r7, #4]
 8027570:	69db      	ldr	r3, [r3, #28]
 8027572:	3b01      	subs	r3, #1
 8027574:	051a      	lsls	r2, r3, #20
 8027576:	687b      	ldr	r3, [r7, #4]
 8027578:	681b      	ldr	r3, [r3, #0]
 802757a:	430a      	orrs	r2, r1
 802757c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 802757e:	687b      	ldr	r3, [r7, #4]
 8027580:	681b      	ldr	r3, [r3, #0]
 8027582:	689a      	ldr	r2, [r3, #8]
 8027584:	687b      	ldr	r3, [r7, #4]
 8027586:	681b      	ldr	r3, [r3, #0]
 8027588:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 802758c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 802758e:	687b      	ldr	r3, [r7, #4]
 8027590:	681b      	ldr	r3, [r3, #0]
 8027592:	6899      	ldr	r1, [r3, #8]
 8027594:	687b      	ldr	r3, [r7, #4]
 8027596:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802759a:	025a      	lsls	r2, r3, #9
 802759c:	687b      	ldr	r3, [r7, #4]
 802759e:	681b      	ldr	r3, [r3, #0]
 80275a0:	430a      	orrs	r2, r1
 80275a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80275a4:	687b      	ldr	r3, [r7, #4]
 80275a6:	681b      	ldr	r3, [r3, #0]
 80275a8:	689a      	ldr	r2, [r3, #8]
 80275aa:	687b      	ldr	r3, [r7, #4]
 80275ac:	681b      	ldr	r3, [r3, #0]
 80275ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80275b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80275b4:	687b      	ldr	r3, [r7, #4]
 80275b6:	681b      	ldr	r3, [r3, #0]
 80275b8:	6899      	ldr	r1, [r3, #8]
 80275ba:	687b      	ldr	r3, [r7, #4]
 80275bc:	695b      	ldr	r3, [r3, #20]
 80275be:	029a      	lsls	r2, r3, #10
 80275c0:	687b      	ldr	r3, [r7, #4]
 80275c2:	681b      	ldr	r3, [r3, #0]
 80275c4:	430a      	orrs	r2, r1
 80275c6:	609a      	str	r2, [r3, #8]
}
 80275c8:	bf00      	nop
 80275ca:	3714      	adds	r7, #20
 80275cc:	46bd      	mov	sp, r7
 80275ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275d2:	4770      	bx	lr
 80275d4:	40012300 	.word	0x40012300
 80275d8:	0f000001 	.word	0x0f000001

080275dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80275dc:	b580      	push	{r7, lr}
 80275de:	b084      	sub	sp, #16
 80275e0:	af00      	add	r7, sp, #0
 80275e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80275e4:	687b      	ldr	r3, [r7, #4]
 80275e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80275e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80275ea:	68fb      	ldr	r3, [r7, #12]
 80275ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80275ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80275f2:	2b00      	cmp	r3, #0
 80275f4:	d13c      	bne.n	8027670 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80275f6:	68fb      	ldr	r3, [r7, #12]
 80275f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80275fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80275fe:	68fb      	ldr	r3, [r7, #12]
 8027600:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8027602:	68fb      	ldr	r3, [r7, #12]
 8027604:	681b      	ldr	r3, [r3, #0]
 8027606:	689b      	ldr	r3, [r3, #8]
 8027608:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802760c:	2b00      	cmp	r3, #0
 802760e:	d12b      	bne.n	8027668 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8027610:	68fb      	ldr	r3, [r7, #12]
 8027612:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8027614:	2b00      	cmp	r3, #0
 8027616:	d127      	bne.n	8027668 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8027618:	68fb      	ldr	r3, [r7, #12]
 802761a:	681b      	ldr	r3, [r3, #0]
 802761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802761e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8027622:	2b00      	cmp	r3, #0
 8027624:	d006      	beq.n	8027634 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8027626:	68fb      	ldr	r3, [r7, #12]
 8027628:	681b      	ldr	r3, [r3, #0]
 802762a:	689b      	ldr	r3, [r3, #8]
 802762c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8027630:	2b00      	cmp	r3, #0
 8027632:	d119      	bne.n	8027668 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8027634:	68fb      	ldr	r3, [r7, #12]
 8027636:	681b      	ldr	r3, [r3, #0]
 8027638:	685a      	ldr	r2, [r3, #4]
 802763a:	68fb      	ldr	r3, [r7, #12]
 802763c:	681b      	ldr	r3, [r3, #0]
 802763e:	f022 0220 	bic.w	r2, r2, #32
 8027642:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8027644:	68fb      	ldr	r3, [r7, #12]
 8027646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802764c:	68fb      	ldr	r3, [r7, #12]
 802764e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8027650:	68fb      	ldr	r3, [r7, #12]
 8027652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8027658:	2b00      	cmp	r3, #0
 802765a:	d105      	bne.n	8027668 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 802765c:	68fb      	ldr	r3, [r7, #12]
 802765e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027660:	f043 0201 	orr.w	r2, r3, #1
 8027664:	68fb      	ldr	r3, [r7, #12]
 8027666:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8027668:	68f8      	ldr	r0, [r7, #12]
 802766a:	f7ff fd7b 	bl	8027164 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 802766e:	e00e      	b.n	802768e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8027670:	68fb      	ldr	r3, [r7, #12]
 8027672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027674:	f003 0310 	and.w	r3, r3, #16
 8027678:	2b00      	cmp	r3, #0
 802767a:	d003      	beq.n	8027684 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 802767c:	68f8      	ldr	r0, [r7, #12]
 802767e:	f7ff fd85 	bl	802718c <HAL_ADC_ErrorCallback>
}
 8027682:	e004      	b.n	802768e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8027684:	68fb      	ldr	r3, [r7, #12]
 8027686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802768a:	6878      	ldr	r0, [r7, #4]
 802768c:	4798      	blx	r3
}
 802768e:	bf00      	nop
 8027690:	3710      	adds	r7, #16
 8027692:	46bd      	mov	sp, r7
 8027694:	bd80      	pop	{r7, pc}

08027696 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8027696:	b580      	push	{r7, lr}
 8027698:	b084      	sub	sp, #16
 802769a:	af00      	add	r7, sp, #0
 802769c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802769e:	687b      	ldr	r3, [r7, #4]
 80276a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80276a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80276a4:	68f8      	ldr	r0, [r7, #12]
 80276a6:	f7ff fd67 	bl	8027178 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80276aa:	bf00      	nop
 80276ac:	3710      	adds	r7, #16
 80276ae:	46bd      	mov	sp, r7
 80276b0:	bd80      	pop	{r7, pc}

080276b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80276b2:	b580      	push	{r7, lr}
 80276b4:	b084      	sub	sp, #16
 80276b6:	af00      	add	r7, sp, #0
 80276b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80276ba:	687b      	ldr	r3, [r7, #4]
 80276bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80276be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80276c0:	68fb      	ldr	r3, [r7, #12]
 80276c2:	2240      	movs	r2, #64	; 0x40
 80276c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80276c6:	68fb      	ldr	r3, [r7, #12]
 80276c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80276ca:	f043 0204 	orr.w	r2, r3, #4
 80276ce:	68fb      	ldr	r3, [r7, #12]
 80276d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80276d2:	68f8      	ldr	r0, [r7, #12]
 80276d4:	f7ff fd5a 	bl	802718c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80276d8:	bf00      	nop
 80276da:	3710      	adds	r7, #16
 80276dc:	46bd      	mov	sp, r7
 80276de:	bd80      	pop	{r7, pc}

080276e0 <__NVIC_SetPriorityGrouping>:
{
 80276e0:	b480      	push	{r7}
 80276e2:	b085      	sub	sp, #20
 80276e4:	af00      	add	r7, sp, #0
 80276e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80276e8:	687b      	ldr	r3, [r7, #4]
 80276ea:	f003 0307 	and.w	r3, r3, #7
 80276ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80276f0:	4b0c      	ldr	r3, [pc, #48]	; (8027724 <__NVIC_SetPriorityGrouping+0x44>)
 80276f2:	68db      	ldr	r3, [r3, #12]
 80276f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80276f6:	68ba      	ldr	r2, [r7, #8]
 80276f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80276fc:	4013      	ands	r3, r2
 80276fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8027700:	68fb      	ldr	r3, [r7, #12]
 8027702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8027704:	68bb      	ldr	r3, [r7, #8]
 8027706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8027708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 802770c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8027712:	4a04      	ldr	r2, [pc, #16]	; (8027724 <__NVIC_SetPriorityGrouping+0x44>)
 8027714:	68bb      	ldr	r3, [r7, #8]
 8027716:	60d3      	str	r3, [r2, #12]
}
 8027718:	bf00      	nop
 802771a:	3714      	adds	r7, #20
 802771c:	46bd      	mov	sp, r7
 802771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027722:	4770      	bx	lr
 8027724:	e000ed00 	.word	0xe000ed00

08027728 <__NVIC_GetPriorityGrouping>:
{
 8027728:	b480      	push	{r7}
 802772a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802772c:	4b04      	ldr	r3, [pc, #16]	; (8027740 <__NVIC_GetPriorityGrouping+0x18>)
 802772e:	68db      	ldr	r3, [r3, #12]
 8027730:	0a1b      	lsrs	r3, r3, #8
 8027732:	f003 0307 	and.w	r3, r3, #7
}
 8027736:	4618      	mov	r0, r3
 8027738:	46bd      	mov	sp, r7
 802773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802773e:	4770      	bx	lr
 8027740:	e000ed00 	.word	0xe000ed00

08027744 <__NVIC_EnableIRQ>:
{
 8027744:	b480      	push	{r7}
 8027746:	b083      	sub	sp, #12
 8027748:	af00      	add	r7, sp, #0
 802774a:	4603      	mov	r3, r0
 802774c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802774e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027752:	2b00      	cmp	r3, #0
 8027754:	db0b      	blt.n	802776e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8027756:	79fb      	ldrb	r3, [r7, #7]
 8027758:	f003 021f 	and.w	r2, r3, #31
 802775c:	4907      	ldr	r1, [pc, #28]	; (802777c <__NVIC_EnableIRQ+0x38>)
 802775e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027762:	095b      	lsrs	r3, r3, #5
 8027764:	2001      	movs	r0, #1
 8027766:	fa00 f202 	lsl.w	r2, r0, r2
 802776a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 802776e:	bf00      	nop
 8027770:	370c      	adds	r7, #12
 8027772:	46bd      	mov	sp, r7
 8027774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027778:	4770      	bx	lr
 802777a:	bf00      	nop
 802777c:	e000e100 	.word	0xe000e100

08027780 <__NVIC_SetPriority>:
{
 8027780:	b480      	push	{r7}
 8027782:	b083      	sub	sp, #12
 8027784:	af00      	add	r7, sp, #0
 8027786:	4603      	mov	r3, r0
 8027788:	6039      	str	r1, [r7, #0]
 802778a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802778c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027790:	2b00      	cmp	r3, #0
 8027792:	db0a      	blt.n	80277aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8027794:	683b      	ldr	r3, [r7, #0]
 8027796:	b2da      	uxtb	r2, r3
 8027798:	490c      	ldr	r1, [pc, #48]	; (80277cc <__NVIC_SetPriority+0x4c>)
 802779a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802779e:	0112      	lsls	r2, r2, #4
 80277a0:	b2d2      	uxtb	r2, r2
 80277a2:	440b      	add	r3, r1
 80277a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80277a8:	e00a      	b.n	80277c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80277aa:	683b      	ldr	r3, [r7, #0]
 80277ac:	b2da      	uxtb	r2, r3
 80277ae:	4908      	ldr	r1, [pc, #32]	; (80277d0 <__NVIC_SetPriority+0x50>)
 80277b0:	79fb      	ldrb	r3, [r7, #7]
 80277b2:	f003 030f 	and.w	r3, r3, #15
 80277b6:	3b04      	subs	r3, #4
 80277b8:	0112      	lsls	r2, r2, #4
 80277ba:	b2d2      	uxtb	r2, r2
 80277bc:	440b      	add	r3, r1
 80277be:	761a      	strb	r2, [r3, #24]
}
 80277c0:	bf00      	nop
 80277c2:	370c      	adds	r7, #12
 80277c4:	46bd      	mov	sp, r7
 80277c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277ca:	4770      	bx	lr
 80277cc:	e000e100 	.word	0xe000e100
 80277d0:	e000ed00 	.word	0xe000ed00

080277d4 <NVIC_EncodePriority>:
{
 80277d4:	b480      	push	{r7}
 80277d6:	b089      	sub	sp, #36	; 0x24
 80277d8:	af00      	add	r7, sp, #0
 80277da:	60f8      	str	r0, [r7, #12]
 80277dc:	60b9      	str	r1, [r7, #8]
 80277de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80277e0:	68fb      	ldr	r3, [r7, #12]
 80277e2:	f003 0307 	and.w	r3, r3, #7
 80277e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80277e8:	69fb      	ldr	r3, [r7, #28]
 80277ea:	f1c3 0307 	rsb	r3, r3, #7
 80277ee:	2b04      	cmp	r3, #4
 80277f0:	bf28      	it	cs
 80277f2:	2304      	movcs	r3, #4
 80277f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80277f6:	69fb      	ldr	r3, [r7, #28]
 80277f8:	3304      	adds	r3, #4
 80277fa:	2b06      	cmp	r3, #6
 80277fc:	d902      	bls.n	8027804 <NVIC_EncodePriority+0x30>
 80277fe:	69fb      	ldr	r3, [r7, #28]
 8027800:	3b03      	subs	r3, #3
 8027802:	e000      	b.n	8027806 <NVIC_EncodePriority+0x32>
 8027804:	2300      	movs	r3, #0
 8027806:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8027808:	f04f 32ff 	mov.w	r2, #4294967295
 802780c:	69bb      	ldr	r3, [r7, #24]
 802780e:	fa02 f303 	lsl.w	r3, r2, r3
 8027812:	43da      	mvns	r2, r3
 8027814:	68bb      	ldr	r3, [r7, #8]
 8027816:	401a      	ands	r2, r3
 8027818:	697b      	ldr	r3, [r7, #20]
 802781a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802781c:	f04f 31ff 	mov.w	r1, #4294967295
 8027820:	697b      	ldr	r3, [r7, #20]
 8027822:	fa01 f303 	lsl.w	r3, r1, r3
 8027826:	43d9      	mvns	r1, r3
 8027828:	687b      	ldr	r3, [r7, #4]
 802782a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802782c:	4313      	orrs	r3, r2
}
 802782e:	4618      	mov	r0, r3
 8027830:	3724      	adds	r7, #36	; 0x24
 8027832:	46bd      	mov	sp, r7
 8027834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027838:	4770      	bx	lr
	...

0802783c <SysTick_Config>:
{
 802783c:	b580      	push	{r7, lr}
 802783e:	b082      	sub	sp, #8
 8027840:	af00      	add	r7, sp, #0
 8027842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8027844:	687b      	ldr	r3, [r7, #4]
 8027846:	3b01      	subs	r3, #1
 8027848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802784c:	d301      	bcc.n	8027852 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 802784e:	2301      	movs	r3, #1
 8027850:	e00f      	b.n	8027872 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8027852:	4a0a      	ldr	r2, [pc, #40]	; (802787c <SysTick_Config+0x40>)
 8027854:	687b      	ldr	r3, [r7, #4]
 8027856:	3b01      	subs	r3, #1
 8027858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802785a:	210f      	movs	r1, #15
 802785c:	f04f 30ff 	mov.w	r0, #4294967295
 8027860:	f7ff ff8e 	bl	8027780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8027864:	4b05      	ldr	r3, [pc, #20]	; (802787c <SysTick_Config+0x40>)
 8027866:	2200      	movs	r2, #0
 8027868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802786a:	4b04      	ldr	r3, [pc, #16]	; (802787c <SysTick_Config+0x40>)
 802786c:	2207      	movs	r2, #7
 802786e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8027870:	2300      	movs	r3, #0
}
 8027872:	4618      	mov	r0, r3
 8027874:	3708      	adds	r7, #8
 8027876:	46bd      	mov	sp, r7
 8027878:	bd80      	pop	{r7, pc}
 802787a:	bf00      	nop
 802787c:	e000e010 	.word	0xe000e010

08027880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8027880:	b580      	push	{r7, lr}
 8027882:	b082      	sub	sp, #8
 8027884:	af00      	add	r7, sp, #0
 8027886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8027888:	6878      	ldr	r0, [r7, #4]
 802788a:	f7ff ff29 	bl	80276e0 <__NVIC_SetPriorityGrouping>
}
 802788e:	bf00      	nop
 8027890:	3708      	adds	r7, #8
 8027892:	46bd      	mov	sp, r7
 8027894:	bd80      	pop	{r7, pc}

08027896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8027896:	b580      	push	{r7, lr}
 8027898:	b086      	sub	sp, #24
 802789a:	af00      	add	r7, sp, #0
 802789c:	4603      	mov	r3, r0
 802789e:	60b9      	str	r1, [r7, #8]
 80278a0:	607a      	str	r2, [r7, #4]
 80278a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80278a4:	2300      	movs	r3, #0
 80278a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80278a8:	f7ff ff3e 	bl	8027728 <__NVIC_GetPriorityGrouping>
 80278ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80278ae:	687a      	ldr	r2, [r7, #4]
 80278b0:	68b9      	ldr	r1, [r7, #8]
 80278b2:	6978      	ldr	r0, [r7, #20]
 80278b4:	f7ff ff8e 	bl	80277d4 <NVIC_EncodePriority>
 80278b8:	4602      	mov	r2, r0
 80278ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80278be:	4611      	mov	r1, r2
 80278c0:	4618      	mov	r0, r3
 80278c2:	f7ff ff5d 	bl	8027780 <__NVIC_SetPriority>
}
 80278c6:	bf00      	nop
 80278c8:	3718      	adds	r7, #24
 80278ca:	46bd      	mov	sp, r7
 80278cc:	bd80      	pop	{r7, pc}

080278ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80278ce:	b580      	push	{r7, lr}
 80278d0:	b082      	sub	sp, #8
 80278d2:	af00      	add	r7, sp, #0
 80278d4:	4603      	mov	r3, r0
 80278d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80278d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80278dc:	4618      	mov	r0, r3
 80278de:	f7ff ff31 	bl	8027744 <__NVIC_EnableIRQ>
}
 80278e2:	bf00      	nop
 80278e4:	3708      	adds	r7, #8
 80278e6:	46bd      	mov	sp, r7
 80278e8:	bd80      	pop	{r7, pc}

080278ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80278ea:	b580      	push	{r7, lr}
 80278ec:	b082      	sub	sp, #8
 80278ee:	af00      	add	r7, sp, #0
 80278f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80278f2:	6878      	ldr	r0, [r7, #4]
 80278f4:	f7ff ffa2 	bl	802783c <SysTick_Config>
 80278f8:	4603      	mov	r3, r0
}
 80278fa:	4618      	mov	r0, r3
 80278fc:	3708      	adds	r7, #8
 80278fe:	46bd      	mov	sp, r7
 8027900:	bd80      	pop	{r7, pc}
	...

08027904 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8027904:	b580      	push	{r7, lr}
 8027906:	b086      	sub	sp, #24
 8027908:	af00      	add	r7, sp, #0
 802790a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 802790c:	2300      	movs	r3, #0
 802790e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8027910:	f7ff fac4 	bl	8026e9c <HAL_GetTick>
 8027914:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8027916:	687b      	ldr	r3, [r7, #4]
 8027918:	2b00      	cmp	r3, #0
 802791a:	d101      	bne.n	8027920 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 802791c:	2301      	movs	r3, #1
 802791e:	e099      	b.n	8027a54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8027920:	687b      	ldr	r3, [r7, #4]
 8027922:	2200      	movs	r2, #0
 8027924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8027928:	687b      	ldr	r3, [r7, #4]
 802792a:	2202      	movs	r2, #2
 802792c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8027930:	687b      	ldr	r3, [r7, #4]
 8027932:	681b      	ldr	r3, [r3, #0]
 8027934:	681a      	ldr	r2, [r3, #0]
 8027936:	687b      	ldr	r3, [r7, #4]
 8027938:	681b      	ldr	r3, [r3, #0]
 802793a:	f022 0201 	bic.w	r2, r2, #1
 802793e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8027940:	e00f      	b.n	8027962 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8027942:	f7ff faab 	bl	8026e9c <HAL_GetTick>
 8027946:	4602      	mov	r2, r0
 8027948:	693b      	ldr	r3, [r7, #16]
 802794a:	1ad3      	subs	r3, r2, r3
 802794c:	2b05      	cmp	r3, #5
 802794e:	d908      	bls.n	8027962 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8027950:	687b      	ldr	r3, [r7, #4]
 8027952:	2220      	movs	r2, #32
 8027954:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8027956:	687b      	ldr	r3, [r7, #4]
 8027958:	2203      	movs	r2, #3
 802795a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 802795e:	2303      	movs	r3, #3
 8027960:	e078      	b.n	8027a54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8027962:	687b      	ldr	r3, [r7, #4]
 8027964:	681b      	ldr	r3, [r3, #0]
 8027966:	681b      	ldr	r3, [r3, #0]
 8027968:	f003 0301 	and.w	r3, r3, #1
 802796c:	2b00      	cmp	r3, #0
 802796e:	d1e8      	bne.n	8027942 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8027970:	687b      	ldr	r3, [r7, #4]
 8027972:	681b      	ldr	r3, [r3, #0]
 8027974:	681b      	ldr	r3, [r3, #0]
 8027976:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8027978:	697a      	ldr	r2, [r7, #20]
 802797a:	4b38      	ldr	r3, [pc, #224]	; (8027a5c <HAL_DMA_Init+0x158>)
 802797c:	4013      	ands	r3, r2
 802797e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8027980:	687b      	ldr	r3, [r7, #4]
 8027982:	685a      	ldr	r2, [r3, #4]
 8027984:	687b      	ldr	r3, [r7, #4]
 8027986:	689b      	ldr	r3, [r3, #8]
 8027988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802798a:	687b      	ldr	r3, [r7, #4]
 802798c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802798e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8027990:	687b      	ldr	r3, [r7, #4]
 8027992:	691b      	ldr	r3, [r3, #16]
 8027994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8027996:	687b      	ldr	r3, [r7, #4]
 8027998:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802799a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802799c:	687b      	ldr	r3, [r7, #4]
 802799e:	699b      	ldr	r3, [r3, #24]
 80279a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80279a2:	687b      	ldr	r3, [r7, #4]
 80279a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80279a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80279a8:	687b      	ldr	r3, [r7, #4]
 80279aa:	6a1b      	ldr	r3, [r3, #32]
 80279ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80279ae:	697a      	ldr	r2, [r7, #20]
 80279b0:	4313      	orrs	r3, r2
 80279b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80279b4:	687b      	ldr	r3, [r7, #4]
 80279b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80279b8:	2b04      	cmp	r3, #4
 80279ba:	d107      	bne.n	80279cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80279bc:	687b      	ldr	r3, [r7, #4]
 80279be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80279c0:	687b      	ldr	r3, [r7, #4]
 80279c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80279c4:	4313      	orrs	r3, r2
 80279c6:	697a      	ldr	r2, [r7, #20]
 80279c8:	4313      	orrs	r3, r2
 80279ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80279cc:	687b      	ldr	r3, [r7, #4]
 80279ce:	681b      	ldr	r3, [r3, #0]
 80279d0:	697a      	ldr	r2, [r7, #20]
 80279d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80279d4:	687b      	ldr	r3, [r7, #4]
 80279d6:	681b      	ldr	r3, [r3, #0]
 80279d8:	695b      	ldr	r3, [r3, #20]
 80279da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80279dc:	697b      	ldr	r3, [r7, #20]
 80279de:	f023 0307 	bic.w	r3, r3, #7
 80279e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80279e4:	687b      	ldr	r3, [r7, #4]
 80279e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80279e8:	697a      	ldr	r2, [r7, #20]
 80279ea:	4313      	orrs	r3, r2
 80279ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80279ee:	687b      	ldr	r3, [r7, #4]
 80279f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80279f2:	2b04      	cmp	r3, #4
 80279f4:	d117      	bne.n	8027a26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80279f6:	687b      	ldr	r3, [r7, #4]
 80279f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80279fa:	697a      	ldr	r2, [r7, #20]
 80279fc:	4313      	orrs	r3, r2
 80279fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8027a00:	687b      	ldr	r3, [r7, #4]
 8027a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027a04:	2b00      	cmp	r3, #0
 8027a06:	d00e      	beq.n	8027a26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8027a08:	6878      	ldr	r0, [r7, #4]
 8027a0a:	f000 fa6f 	bl	8027eec <DMA_CheckFifoParam>
 8027a0e:	4603      	mov	r3, r0
 8027a10:	2b00      	cmp	r3, #0
 8027a12:	d008      	beq.n	8027a26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8027a14:	687b      	ldr	r3, [r7, #4]
 8027a16:	2240      	movs	r2, #64	; 0x40
 8027a18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8027a1a:	687b      	ldr	r3, [r7, #4]
 8027a1c:	2201      	movs	r2, #1
 8027a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8027a22:	2301      	movs	r3, #1
 8027a24:	e016      	b.n	8027a54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8027a26:	687b      	ldr	r3, [r7, #4]
 8027a28:	681b      	ldr	r3, [r3, #0]
 8027a2a:	697a      	ldr	r2, [r7, #20]
 8027a2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8027a2e:	6878      	ldr	r0, [r7, #4]
 8027a30:	f000 fa26 	bl	8027e80 <DMA_CalcBaseAndBitshift>
 8027a34:	4603      	mov	r3, r0
 8027a36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8027a38:	687b      	ldr	r3, [r7, #4]
 8027a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027a3c:	223f      	movs	r2, #63	; 0x3f
 8027a3e:	409a      	lsls	r2, r3
 8027a40:	68fb      	ldr	r3, [r7, #12]
 8027a42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8027a44:	687b      	ldr	r3, [r7, #4]
 8027a46:	2200      	movs	r2, #0
 8027a48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8027a4a:	687b      	ldr	r3, [r7, #4]
 8027a4c:	2201      	movs	r2, #1
 8027a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8027a52:	2300      	movs	r3, #0
}
 8027a54:	4618      	mov	r0, r3
 8027a56:	3718      	adds	r7, #24
 8027a58:	46bd      	mov	sp, r7
 8027a5a:	bd80      	pop	{r7, pc}
 8027a5c:	f010803f 	.word	0xf010803f

08027a60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8027a60:	b580      	push	{r7, lr}
 8027a62:	b086      	sub	sp, #24
 8027a64:	af00      	add	r7, sp, #0
 8027a66:	60f8      	str	r0, [r7, #12]
 8027a68:	60b9      	str	r1, [r7, #8]
 8027a6a:	607a      	str	r2, [r7, #4]
 8027a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8027a6e:	2300      	movs	r3, #0
 8027a70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8027a72:	68fb      	ldr	r3, [r7, #12]
 8027a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027a76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8027a78:	68fb      	ldr	r3, [r7, #12]
 8027a7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8027a7e:	2b01      	cmp	r3, #1
 8027a80:	d101      	bne.n	8027a86 <HAL_DMA_Start_IT+0x26>
 8027a82:	2302      	movs	r3, #2
 8027a84:	e040      	b.n	8027b08 <HAL_DMA_Start_IT+0xa8>
 8027a86:	68fb      	ldr	r3, [r7, #12]
 8027a88:	2201      	movs	r2, #1
 8027a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8027a8e:	68fb      	ldr	r3, [r7, #12]
 8027a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8027a94:	b2db      	uxtb	r3, r3
 8027a96:	2b01      	cmp	r3, #1
 8027a98:	d12f      	bne.n	8027afa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8027a9a:	68fb      	ldr	r3, [r7, #12]
 8027a9c:	2202      	movs	r2, #2
 8027a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8027aa2:	68fb      	ldr	r3, [r7, #12]
 8027aa4:	2200      	movs	r2, #0
 8027aa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8027aa8:	683b      	ldr	r3, [r7, #0]
 8027aaa:	687a      	ldr	r2, [r7, #4]
 8027aac:	68b9      	ldr	r1, [r7, #8]
 8027aae:	68f8      	ldr	r0, [r7, #12]
 8027ab0:	f000 f9b8 	bl	8027e24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8027ab4:	68fb      	ldr	r3, [r7, #12]
 8027ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027ab8:	223f      	movs	r2, #63	; 0x3f
 8027aba:	409a      	lsls	r2, r3
 8027abc:	693b      	ldr	r3, [r7, #16]
 8027abe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8027ac0:	68fb      	ldr	r3, [r7, #12]
 8027ac2:	681b      	ldr	r3, [r3, #0]
 8027ac4:	681a      	ldr	r2, [r3, #0]
 8027ac6:	68fb      	ldr	r3, [r7, #12]
 8027ac8:	681b      	ldr	r3, [r3, #0]
 8027aca:	f042 0216 	orr.w	r2, r2, #22
 8027ace:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8027ad0:	68fb      	ldr	r3, [r7, #12]
 8027ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027ad4:	2b00      	cmp	r3, #0
 8027ad6:	d007      	beq.n	8027ae8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8027ad8:	68fb      	ldr	r3, [r7, #12]
 8027ada:	681b      	ldr	r3, [r3, #0]
 8027adc:	681a      	ldr	r2, [r3, #0]
 8027ade:	68fb      	ldr	r3, [r7, #12]
 8027ae0:	681b      	ldr	r3, [r3, #0]
 8027ae2:	f042 0208 	orr.w	r2, r2, #8
 8027ae6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8027ae8:	68fb      	ldr	r3, [r7, #12]
 8027aea:	681b      	ldr	r3, [r3, #0]
 8027aec:	681a      	ldr	r2, [r3, #0]
 8027aee:	68fb      	ldr	r3, [r7, #12]
 8027af0:	681b      	ldr	r3, [r3, #0]
 8027af2:	f042 0201 	orr.w	r2, r2, #1
 8027af6:	601a      	str	r2, [r3, #0]
 8027af8:	e005      	b.n	8027b06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8027afa:	68fb      	ldr	r3, [r7, #12]
 8027afc:	2200      	movs	r2, #0
 8027afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8027b02:	2302      	movs	r3, #2
 8027b04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8027b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8027b08:	4618      	mov	r0, r3
 8027b0a:	3718      	adds	r7, #24
 8027b0c:	46bd      	mov	sp, r7
 8027b0e:	bd80      	pop	{r7, pc}

08027b10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8027b10:	b580      	push	{r7, lr}
 8027b12:	b086      	sub	sp, #24
 8027b14:	af00      	add	r7, sp, #0
 8027b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8027b18:	2300      	movs	r3, #0
 8027b1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8027b1c:	4b92      	ldr	r3, [pc, #584]	; (8027d68 <HAL_DMA_IRQHandler+0x258>)
 8027b1e:	681b      	ldr	r3, [r3, #0]
 8027b20:	4a92      	ldr	r2, [pc, #584]	; (8027d6c <HAL_DMA_IRQHandler+0x25c>)
 8027b22:	fba2 2303 	umull	r2, r3, r2, r3
 8027b26:	0a9b      	lsrs	r3, r3, #10
 8027b28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8027b2a:	687b      	ldr	r3, [r7, #4]
 8027b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027b2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8027b30:	693b      	ldr	r3, [r7, #16]
 8027b32:	681b      	ldr	r3, [r3, #0]
 8027b34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8027b36:	687b      	ldr	r3, [r7, #4]
 8027b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027b3a:	2208      	movs	r2, #8
 8027b3c:	409a      	lsls	r2, r3
 8027b3e:	68fb      	ldr	r3, [r7, #12]
 8027b40:	4013      	ands	r3, r2
 8027b42:	2b00      	cmp	r3, #0
 8027b44:	d01a      	beq.n	8027b7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8027b46:	687b      	ldr	r3, [r7, #4]
 8027b48:	681b      	ldr	r3, [r3, #0]
 8027b4a:	681b      	ldr	r3, [r3, #0]
 8027b4c:	f003 0304 	and.w	r3, r3, #4
 8027b50:	2b00      	cmp	r3, #0
 8027b52:	d013      	beq.n	8027b7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8027b54:	687b      	ldr	r3, [r7, #4]
 8027b56:	681b      	ldr	r3, [r3, #0]
 8027b58:	681a      	ldr	r2, [r3, #0]
 8027b5a:	687b      	ldr	r3, [r7, #4]
 8027b5c:	681b      	ldr	r3, [r3, #0]
 8027b5e:	f022 0204 	bic.w	r2, r2, #4
 8027b62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8027b64:	687b      	ldr	r3, [r7, #4]
 8027b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027b68:	2208      	movs	r2, #8
 8027b6a:	409a      	lsls	r2, r3
 8027b6c:	693b      	ldr	r3, [r7, #16]
 8027b6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8027b70:	687b      	ldr	r3, [r7, #4]
 8027b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027b74:	f043 0201 	orr.w	r2, r3, #1
 8027b78:	687b      	ldr	r3, [r7, #4]
 8027b7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8027b7c:	687b      	ldr	r3, [r7, #4]
 8027b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027b80:	2201      	movs	r2, #1
 8027b82:	409a      	lsls	r2, r3
 8027b84:	68fb      	ldr	r3, [r7, #12]
 8027b86:	4013      	ands	r3, r2
 8027b88:	2b00      	cmp	r3, #0
 8027b8a:	d012      	beq.n	8027bb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8027b8c:	687b      	ldr	r3, [r7, #4]
 8027b8e:	681b      	ldr	r3, [r3, #0]
 8027b90:	695b      	ldr	r3, [r3, #20]
 8027b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027b96:	2b00      	cmp	r3, #0
 8027b98:	d00b      	beq.n	8027bb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8027b9a:	687b      	ldr	r3, [r7, #4]
 8027b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027b9e:	2201      	movs	r2, #1
 8027ba0:	409a      	lsls	r2, r3
 8027ba2:	693b      	ldr	r3, [r7, #16]
 8027ba4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8027ba6:	687b      	ldr	r3, [r7, #4]
 8027ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027baa:	f043 0202 	orr.w	r2, r3, #2
 8027bae:	687b      	ldr	r3, [r7, #4]
 8027bb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8027bb2:	687b      	ldr	r3, [r7, #4]
 8027bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027bb6:	2204      	movs	r2, #4
 8027bb8:	409a      	lsls	r2, r3
 8027bba:	68fb      	ldr	r3, [r7, #12]
 8027bbc:	4013      	ands	r3, r2
 8027bbe:	2b00      	cmp	r3, #0
 8027bc0:	d012      	beq.n	8027be8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8027bc2:	687b      	ldr	r3, [r7, #4]
 8027bc4:	681b      	ldr	r3, [r3, #0]
 8027bc6:	681b      	ldr	r3, [r3, #0]
 8027bc8:	f003 0302 	and.w	r3, r3, #2
 8027bcc:	2b00      	cmp	r3, #0
 8027bce:	d00b      	beq.n	8027be8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8027bd0:	687b      	ldr	r3, [r7, #4]
 8027bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027bd4:	2204      	movs	r2, #4
 8027bd6:	409a      	lsls	r2, r3
 8027bd8:	693b      	ldr	r3, [r7, #16]
 8027bda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8027bdc:	687b      	ldr	r3, [r7, #4]
 8027bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027be0:	f043 0204 	orr.w	r2, r3, #4
 8027be4:	687b      	ldr	r3, [r7, #4]
 8027be6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8027be8:	687b      	ldr	r3, [r7, #4]
 8027bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027bec:	2210      	movs	r2, #16
 8027bee:	409a      	lsls	r2, r3
 8027bf0:	68fb      	ldr	r3, [r7, #12]
 8027bf2:	4013      	ands	r3, r2
 8027bf4:	2b00      	cmp	r3, #0
 8027bf6:	d043      	beq.n	8027c80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8027bf8:	687b      	ldr	r3, [r7, #4]
 8027bfa:	681b      	ldr	r3, [r3, #0]
 8027bfc:	681b      	ldr	r3, [r3, #0]
 8027bfe:	f003 0308 	and.w	r3, r3, #8
 8027c02:	2b00      	cmp	r3, #0
 8027c04:	d03c      	beq.n	8027c80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8027c06:	687b      	ldr	r3, [r7, #4]
 8027c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027c0a:	2210      	movs	r2, #16
 8027c0c:	409a      	lsls	r2, r3
 8027c0e:	693b      	ldr	r3, [r7, #16]
 8027c10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8027c12:	687b      	ldr	r3, [r7, #4]
 8027c14:	681b      	ldr	r3, [r3, #0]
 8027c16:	681b      	ldr	r3, [r3, #0]
 8027c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8027c1c:	2b00      	cmp	r3, #0
 8027c1e:	d018      	beq.n	8027c52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8027c20:	687b      	ldr	r3, [r7, #4]
 8027c22:	681b      	ldr	r3, [r3, #0]
 8027c24:	681b      	ldr	r3, [r3, #0]
 8027c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8027c2a:	2b00      	cmp	r3, #0
 8027c2c:	d108      	bne.n	8027c40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8027c2e:	687b      	ldr	r3, [r7, #4]
 8027c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c32:	2b00      	cmp	r3, #0
 8027c34:	d024      	beq.n	8027c80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8027c36:	687b      	ldr	r3, [r7, #4]
 8027c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c3a:	6878      	ldr	r0, [r7, #4]
 8027c3c:	4798      	blx	r3
 8027c3e:	e01f      	b.n	8027c80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8027c40:	687b      	ldr	r3, [r7, #4]
 8027c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027c44:	2b00      	cmp	r3, #0
 8027c46:	d01b      	beq.n	8027c80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8027c48:	687b      	ldr	r3, [r7, #4]
 8027c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027c4c:	6878      	ldr	r0, [r7, #4]
 8027c4e:	4798      	blx	r3
 8027c50:	e016      	b.n	8027c80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8027c52:	687b      	ldr	r3, [r7, #4]
 8027c54:	681b      	ldr	r3, [r3, #0]
 8027c56:	681b      	ldr	r3, [r3, #0]
 8027c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027c5c:	2b00      	cmp	r3, #0
 8027c5e:	d107      	bne.n	8027c70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8027c60:	687b      	ldr	r3, [r7, #4]
 8027c62:	681b      	ldr	r3, [r3, #0]
 8027c64:	681a      	ldr	r2, [r3, #0]
 8027c66:	687b      	ldr	r3, [r7, #4]
 8027c68:	681b      	ldr	r3, [r3, #0]
 8027c6a:	f022 0208 	bic.w	r2, r2, #8
 8027c6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8027c70:	687b      	ldr	r3, [r7, #4]
 8027c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c74:	2b00      	cmp	r3, #0
 8027c76:	d003      	beq.n	8027c80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8027c78:	687b      	ldr	r3, [r7, #4]
 8027c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c7c:	6878      	ldr	r0, [r7, #4]
 8027c7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8027c80:	687b      	ldr	r3, [r7, #4]
 8027c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027c84:	2220      	movs	r2, #32
 8027c86:	409a      	lsls	r2, r3
 8027c88:	68fb      	ldr	r3, [r7, #12]
 8027c8a:	4013      	ands	r3, r2
 8027c8c:	2b00      	cmp	r3, #0
 8027c8e:	f000 808e 	beq.w	8027dae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8027c92:	687b      	ldr	r3, [r7, #4]
 8027c94:	681b      	ldr	r3, [r3, #0]
 8027c96:	681b      	ldr	r3, [r3, #0]
 8027c98:	f003 0310 	and.w	r3, r3, #16
 8027c9c:	2b00      	cmp	r3, #0
 8027c9e:	f000 8086 	beq.w	8027dae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8027ca2:	687b      	ldr	r3, [r7, #4]
 8027ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027ca6:	2220      	movs	r2, #32
 8027ca8:	409a      	lsls	r2, r3
 8027caa:	693b      	ldr	r3, [r7, #16]
 8027cac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8027cae:	687b      	ldr	r3, [r7, #4]
 8027cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8027cb4:	b2db      	uxtb	r3, r3
 8027cb6:	2b05      	cmp	r3, #5
 8027cb8:	d136      	bne.n	8027d28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8027cba:	687b      	ldr	r3, [r7, #4]
 8027cbc:	681b      	ldr	r3, [r3, #0]
 8027cbe:	681a      	ldr	r2, [r3, #0]
 8027cc0:	687b      	ldr	r3, [r7, #4]
 8027cc2:	681b      	ldr	r3, [r3, #0]
 8027cc4:	f022 0216 	bic.w	r2, r2, #22
 8027cc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8027cca:	687b      	ldr	r3, [r7, #4]
 8027ccc:	681b      	ldr	r3, [r3, #0]
 8027cce:	695a      	ldr	r2, [r3, #20]
 8027cd0:	687b      	ldr	r3, [r7, #4]
 8027cd2:	681b      	ldr	r3, [r3, #0]
 8027cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8027cd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8027cda:	687b      	ldr	r3, [r7, #4]
 8027cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027cde:	2b00      	cmp	r3, #0
 8027ce0:	d103      	bne.n	8027cea <HAL_DMA_IRQHandler+0x1da>
 8027ce2:	687b      	ldr	r3, [r7, #4]
 8027ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027ce6:	2b00      	cmp	r3, #0
 8027ce8:	d007      	beq.n	8027cfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8027cea:	687b      	ldr	r3, [r7, #4]
 8027cec:	681b      	ldr	r3, [r3, #0]
 8027cee:	681a      	ldr	r2, [r3, #0]
 8027cf0:	687b      	ldr	r3, [r7, #4]
 8027cf2:	681b      	ldr	r3, [r3, #0]
 8027cf4:	f022 0208 	bic.w	r2, r2, #8
 8027cf8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8027cfa:	687b      	ldr	r3, [r7, #4]
 8027cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027cfe:	223f      	movs	r2, #63	; 0x3f
 8027d00:	409a      	lsls	r2, r3
 8027d02:	693b      	ldr	r3, [r7, #16]
 8027d04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8027d06:	687b      	ldr	r3, [r7, #4]
 8027d08:	2200      	movs	r2, #0
 8027d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8027d0e:	687b      	ldr	r3, [r7, #4]
 8027d10:	2201      	movs	r2, #1
 8027d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8027d16:	687b      	ldr	r3, [r7, #4]
 8027d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027d1a:	2b00      	cmp	r3, #0
 8027d1c:	d07d      	beq.n	8027e1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8027d1e:	687b      	ldr	r3, [r7, #4]
 8027d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027d22:	6878      	ldr	r0, [r7, #4]
 8027d24:	4798      	blx	r3
        }
        return;
 8027d26:	e078      	b.n	8027e1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8027d28:	687b      	ldr	r3, [r7, #4]
 8027d2a:	681b      	ldr	r3, [r3, #0]
 8027d2c:	681b      	ldr	r3, [r3, #0]
 8027d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8027d32:	2b00      	cmp	r3, #0
 8027d34:	d01c      	beq.n	8027d70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8027d36:	687b      	ldr	r3, [r7, #4]
 8027d38:	681b      	ldr	r3, [r3, #0]
 8027d3a:	681b      	ldr	r3, [r3, #0]
 8027d3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8027d40:	2b00      	cmp	r3, #0
 8027d42:	d108      	bne.n	8027d56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8027d44:	687b      	ldr	r3, [r7, #4]
 8027d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027d48:	2b00      	cmp	r3, #0
 8027d4a:	d030      	beq.n	8027dae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8027d4c:	687b      	ldr	r3, [r7, #4]
 8027d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027d50:	6878      	ldr	r0, [r7, #4]
 8027d52:	4798      	blx	r3
 8027d54:	e02b      	b.n	8027dae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8027d56:	687b      	ldr	r3, [r7, #4]
 8027d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027d5a:	2b00      	cmp	r3, #0
 8027d5c:	d027      	beq.n	8027dae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8027d5e:	687b      	ldr	r3, [r7, #4]
 8027d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027d62:	6878      	ldr	r0, [r7, #4]
 8027d64:	4798      	blx	r3
 8027d66:	e022      	b.n	8027dae <HAL_DMA_IRQHandler+0x29e>
 8027d68:	20000014 	.word	0x20000014
 8027d6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8027d70:	687b      	ldr	r3, [r7, #4]
 8027d72:	681b      	ldr	r3, [r3, #0]
 8027d74:	681b      	ldr	r3, [r3, #0]
 8027d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027d7a:	2b00      	cmp	r3, #0
 8027d7c:	d10f      	bne.n	8027d9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8027d7e:	687b      	ldr	r3, [r7, #4]
 8027d80:	681b      	ldr	r3, [r3, #0]
 8027d82:	681a      	ldr	r2, [r3, #0]
 8027d84:	687b      	ldr	r3, [r7, #4]
 8027d86:	681b      	ldr	r3, [r3, #0]
 8027d88:	f022 0210 	bic.w	r2, r2, #16
 8027d8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8027d8e:	687b      	ldr	r3, [r7, #4]
 8027d90:	2200      	movs	r2, #0
 8027d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8027d96:	687b      	ldr	r3, [r7, #4]
 8027d98:	2201      	movs	r2, #1
 8027d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8027d9e:	687b      	ldr	r3, [r7, #4]
 8027da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027da2:	2b00      	cmp	r3, #0
 8027da4:	d003      	beq.n	8027dae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8027da6:	687b      	ldr	r3, [r7, #4]
 8027da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027daa:	6878      	ldr	r0, [r7, #4]
 8027dac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8027dae:	687b      	ldr	r3, [r7, #4]
 8027db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027db2:	2b00      	cmp	r3, #0
 8027db4:	d032      	beq.n	8027e1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8027db6:	687b      	ldr	r3, [r7, #4]
 8027db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027dba:	f003 0301 	and.w	r3, r3, #1
 8027dbe:	2b00      	cmp	r3, #0
 8027dc0:	d022      	beq.n	8027e08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8027dc2:	687b      	ldr	r3, [r7, #4]
 8027dc4:	2205      	movs	r2, #5
 8027dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8027dca:	687b      	ldr	r3, [r7, #4]
 8027dcc:	681b      	ldr	r3, [r3, #0]
 8027dce:	681a      	ldr	r2, [r3, #0]
 8027dd0:	687b      	ldr	r3, [r7, #4]
 8027dd2:	681b      	ldr	r3, [r3, #0]
 8027dd4:	f022 0201 	bic.w	r2, r2, #1
 8027dd8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8027dda:	68bb      	ldr	r3, [r7, #8]
 8027ddc:	3301      	adds	r3, #1
 8027dde:	60bb      	str	r3, [r7, #8]
 8027de0:	697a      	ldr	r2, [r7, #20]
 8027de2:	429a      	cmp	r2, r3
 8027de4:	d307      	bcc.n	8027df6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8027de6:	687b      	ldr	r3, [r7, #4]
 8027de8:	681b      	ldr	r3, [r3, #0]
 8027dea:	681b      	ldr	r3, [r3, #0]
 8027dec:	f003 0301 	and.w	r3, r3, #1
 8027df0:	2b00      	cmp	r3, #0
 8027df2:	d1f2      	bne.n	8027dda <HAL_DMA_IRQHandler+0x2ca>
 8027df4:	e000      	b.n	8027df8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8027df6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8027df8:	687b      	ldr	r3, [r7, #4]
 8027dfa:	2200      	movs	r2, #0
 8027dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8027e00:	687b      	ldr	r3, [r7, #4]
 8027e02:	2201      	movs	r2, #1
 8027e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8027e08:	687b      	ldr	r3, [r7, #4]
 8027e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027e0c:	2b00      	cmp	r3, #0
 8027e0e:	d005      	beq.n	8027e1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8027e10:	687b      	ldr	r3, [r7, #4]
 8027e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027e14:	6878      	ldr	r0, [r7, #4]
 8027e16:	4798      	blx	r3
 8027e18:	e000      	b.n	8027e1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8027e1a:	bf00      	nop
    }
  }
}
 8027e1c:	3718      	adds	r7, #24
 8027e1e:	46bd      	mov	sp, r7
 8027e20:	bd80      	pop	{r7, pc}
 8027e22:	bf00      	nop

08027e24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8027e24:	b480      	push	{r7}
 8027e26:	b085      	sub	sp, #20
 8027e28:	af00      	add	r7, sp, #0
 8027e2a:	60f8      	str	r0, [r7, #12]
 8027e2c:	60b9      	str	r1, [r7, #8]
 8027e2e:	607a      	str	r2, [r7, #4]
 8027e30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8027e32:	68fb      	ldr	r3, [r7, #12]
 8027e34:	681b      	ldr	r3, [r3, #0]
 8027e36:	681a      	ldr	r2, [r3, #0]
 8027e38:	68fb      	ldr	r3, [r7, #12]
 8027e3a:	681b      	ldr	r3, [r3, #0]
 8027e3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8027e40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8027e42:	68fb      	ldr	r3, [r7, #12]
 8027e44:	681b      	ldr	r3, [r3, #0]
 8027e46:	683a      	ldr	r2, [r7, #0]
 8027e48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8027e4a:	68fb      	ldr	r3, [r7, #12]
 8027e4c:	689b      	ldr	r3, [r3, #8]
 8027e4e:	2b40      	cmp	r3, #64	; 0x40
 8027e50:	d108      	bne.n	8027e64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8027e52:	68fb      	ldr	r3, [r7, #12]
 8027e54:	681b      	ldr	r3, [r3, #0]
 8027e56:	687a      	ldr	r2, [r7, #4]
 8027e58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8027e5a:	68fb      	ldr	r3, [r7, #12]
 8027e5c:	681b      	ldr	r3, [r3, #0]
 8027e5e:	68ba      	ldr	r2, [r7, #8]
 8027e60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8027e62:	e007      	b.n	8027e74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8027e64:	68fb      	ldr	r3, [r7, #12]
 8027e66:	681b      	ldr	r3, [r3, #0]
 8027e68:	68ba      	ldr	r2, [r7, #8]
 8027e6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8027e6c:	68fb      	ldr	r3, [r7, #12]
 8027e6e:	681b      	ldr	r3, [r3, #0]
 8027e70:	687a      	ldr	r2, [r7, #4]
 8027e72:	60da      	str	r2, [r3, #12]
}
 8027e74:	bf00      	nop
 8027e76:	3714      	adds	r7, #20
 8027e78:	46bd      	mov	sp, r7
 8027e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e7e:	4770      	bx	lr

08027e80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8027e80:	b480      	push	{r7}
 8027e82:	b085      	sub	sp, #20
 8027e84:	af00      	add	r7, sp, #0
 8027e86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8027e88:	687b      	ldr	r3, [r7, #4]
 8027e8a:	681b      	ldr	r3, [r3, #0]
 8027e8c:	b2db      	uxtb	r3, r3
 8027e8e:	3b10      	subs	r3, #16
 8027e90:	4a14      	ldr	r2, [pc, #80]	; (8027ee4 <DMA_CalcBaseAndBitshift+0x64>)
 8027e92:	fba2 2303 	umull	r2, r3, r2, r3
 8027e96:	091b      	lsrs	r3, r3, #4
 8027e98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8027e9a:	4a13      	ldr	r2, [pc, #76]	; (8027ee8 <DMA_CalcBaseAndBitshift+0x68>)
 8027e9c:	68fb      	ldr	r3, [r7, #12]
 8027e9e:	4413      	add	r3, r2
 8027ea0:	781b      	ldrb	r3, [r3, #0]
 8027ea2:	461a      	mov	r2, r3
 8027ea4:	687b      	ldr	r3, [r7, #4]
 8027ea6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8027ea8:	68fb      	ldr	r3, [r7, #12]
 8027eaa:	2b03      	cmp	r3, #3
 8027eac:	d909      	bls.n	8027ec2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8027eae:	687b      	ldr	r3, [r7, #4]
 8027eb0:	681b      	ldr	r3, [r3, #0]
 8027eb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8027eb6:	f023 0303 	bic.w	r3, r3, #3
 8027eba:	1d1a      	adds	r2, r3, #4
 8027ebc:	687b      	ldr	r3, [r7, #4]
 8027ebe:	659a      	str	r2, [r3, #88]	; 0x58
 8027ec0:	e007      	b.n	8027ed2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8027ec2:	687b      	ldr	r3, [r7, #4]
 8027ec4:	681b      	ldr	r3, [r3, #0]
 8027ec6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8027eca:	f023 0303 	bic.w	r3, r3, #3
 8027ece:	687a      	ldr	r2, [r7, #4]
 8027ed0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8027ed2:	687b      	ldr	r3, [r7, #4]
 8027ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8027ed6:	4618      	mov	r0, r3
 8027ed8:	3714      	adds	r7, #20
 8027eda:	46bd      	mov	sp, r7
 8027edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ee0:	4770      	bx	lr
 8027ee2:	bf00      	nop
 8027ee4:	aaaaaaab 	.word	0xaaaaaaab
 8027ee8:	0802bea4 	.word	0x0802bea4

08027eec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8027eec:	b480      	push	{r7}
 8027eee:	b085      	sub	sp, #20
 8027ef0:	af00      	add	r7, sp, #0
 8027ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8027ef4:	2300      	movs	r3, #0
 8027ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8027ef8:	687b      	ldr	r3, [r7, #4]
 8027efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027efc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8027efe:	687b      	ldr	r3, [r7, #4]
 8027f00:	699b      	ldr	r3, [r3, #24]
 8027f02:	2b00      	cmp	r3, #0
 8027f04:	d11f      	bne.n	8027f46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8027f06:	68bb      	ldr	r3, [r7, #8]
 8027f08:	2b03      	cmp	r3, #3
 8027f0a:	d855      	bhi.n	8027fb8 <DMA_CheckFifoParam+0xcc>
 8027f0c:	a201      	add	r2, pc, #4	; (adr r2, 8027f14 <DMA_CheckFifoParam+0x28>)
 8027f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027f12:	bf00      	nop
 8027f14:	08027f25 	.word	0x08027f25
 8027f18:	08027f37 	.word	0x08027f37
 8027f1c:	08027f25 	.word	0x08027f25
 8027f20:	08027fb9 	.word	0x08027fb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8027f24:	687b      	ldr	r3, [r7, #4]
 8027f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027f2c:	2b00      	cmp	r3, #0
 8027f2e:	d045      	beq.n	8027fbc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8027f30:	2301      	movs	r3, #1
 8027f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027f34:	e042      	b.n	8027fbc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8027f36:	687b      	ldr	r3, [r7, #4]
 8027f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027f3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8027f3e:	d13f      	bne.n	8027fc0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8027f40:	2301      	movs	r3, #1
 8027f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027f44:	e03c      	b.n	8027fc0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8027f46:	687b      	ldr	r3, [r7, #4]
 8027f48:	699b      	ldr	r3, [r3, #24]
 8027f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027f4e:	d121      	bne.n	8027f94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8027f50:	68bb      	ldr	r3, [r7, #8]
 8027f52:	2b03      	cmp	r3, #3
 8027f54:	d836      	bhi.n	8027fc4 <DMA_CheckFifoParam+0xd8>
 8027f56:	a201      	add	r2, pc, #4	; (adr r2, 8027f5c <DMA_CheckFifoParam+0x70>)
 8027f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027f5c:	08027f6d 	.word	0x08027f6d
 8027f60:	08027f73 	.word	0x08027f73
 8027f64:	08027f6d 	.word	0x08027f6d
 8027f68:	08027f85 	.word	0x08027f85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8027f6c:	2301      	movs	r3, #1
 8027f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8027f70:	e02f      	b.n	8027fd2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8027f72:	687b      	ldr	r3, [r7, #4]
 8027f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027f7a:	2b00      	cmp	r3, #0
 8027f7c:	d024      	beq.n	8027fc8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8027f7e:	2301      	movs	r3, #1
 8027f80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027f82:	e021      	b.n	8027fc8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8027f84:	687b      	ldr	r3, [r7, #4]
 8027f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027f88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8027f8c:	d11e      	bne.n	8027fcc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8027f8e:	2301      	movs	r3, #1
 8027f90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8027f92:	e01b      	b.n	8027fcc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8027f94:	68bb      	ldr	r3, [r7, #8]
 8027f96:	2b02      	cmp	r3, #2
 8027f98:	d902      	bls.n	8027fa0 <DMA_CheckFifoParam+0xb4>
 8027f9a:	2b03      	cmp	r3, #3
 8027f9c:	d003      	beq.n	8027fa6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8027f9e:	e018      	b.n	8027fd2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8027fa0:	2301      	movs	r3, #1
 8027fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8027fa4:	e015      	b.n	8027fd2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8027fa6:	687b      	ldr	r3, [r7, #4]
 8027fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027faa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027fae:	2b00      	cmp	r3, #0
 8027fb0:	d00e      	beq.n	8027fd0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8027fb2:	2301      	movs	r3, #1
 8027fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8027fb6:	e00b      	b.n	8027fd0 <DMA_CheckFifoParam+0xe4>
      break;
 8027fb8:	bf00      	nop
 8027fba:	e00a      	b.n	8027fd2 <DMA_CheckFifoParam+0xe6>
      break;
 8027fbc:	bf00      	nop
 8027fbe:	e008      	b.n	8027fd2 <DMA_CheckFifoParam+0xe6>
      break;
 8027fc0:	bf00      	nop
 8027fc2:	e006      	b.n	8027fd2 <DMA_CheckFifoParam+0xe6>
      break;
 8027fc4:	bf00      	nop
 8027fc6:	e004      	b.n	8027fd2 <DMA_CheckFifoParam+0xe6>
      break;
 8027fc8:	bf00      	nop
 8027fca:	e002      	b.n	8027fd2 <DMA_CheckFifoParam+0xe6>
      break;   
 8027fcc:	bf00      	nop
 8027fce:	e000      	b.n	8027fd2 <DMA_CheckFifoParam+0xe6>
      break;
 8027fd0:	bf00      	nop
    }
  } 
  
  return status; 
 8027fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8027fd4:	4618      	mov	r0, r3
 8027fd6:	3714      	adds	r7, #20
 8027fd8:	46bd      	mov	sp, r7
 8027fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fde:	4770      	bx	lr

08027fe0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8027fe0:	b580      	push	{r7, lr}
 8027fe2:	b086      	sub	sp, #24
 8027fe4:	af00      	add	r7, sp, #0
 8027fe6:	60f8      	str	r0, [r7, #12]
 8027fe8:	60b9      	str	r1, [r7, #8]
 8027fea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8027fee:	2301      	movs	r3, #1
 8027ff0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8027ff2:	4b23      	ldr	r3, [pc, #140]	; (8028080 <HAL_FLASH_Program+0xa0>)
 8027ff4:	7e1b      	ldrb	r3, [r3, #24]
 8027ff6:	2b01      	cmp	r3, #1
 8027ff8:	d101      	bne.n	8027ffe <HAL_FLASH_Program+0x1e>
 8027ffa:	2302      	movs	r3, #2
 8027ffc:	e03b      	b.n	8028076 <HAL_FLASH_Program+0x96>
 8027ffe:	4b20      	ldr	r3, [pc, #128]	; (8028080 <HAL_FLASH_Program+0xa0>)
 8028000:	2201      	movs	r2, #1
 8028002:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8028004:	f24c 3050 	movw	r0, #50000	; 0xc350
 8028008:	f000 f870 	bl	80280ec <FLASH_WaitForLastOperation>
 802800c:	4603      	mov	r3, r0
 802800e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8028010:	7dfb      	ldrb	r3, [r7, #23]
 8028012:	2b00      	cmp	r3, #0
 8028014:	d12b      	bne.n	802806e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8028016:	68fb      	ldr	r3, [r7, #12]
 8028018:	2b00      	cmp	r3, #0
 802801a:	d105      	bne.n	8028028 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 802801c:	783b      	ldrb	r3, [r7, #0]
 802801e:	4619      	mov	r1, r3
 8028020:	68b8      	ldr	r0, [r7, #8]
 8028022:	f000 f919 	bl	8028258 <FLASH_Program_Byte>
 8028026:	e016      	b.n	8028056 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8028028:	68fb      	ldr	r3, [r7, #12]
 802802a:	2b01      	cmp	r3, #1
 802802c:	d105      	bne.n	802803a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 802802e:	883b      	ldrh	r3, [r7, #0]
 8028030:	4619      	mov	r1, r3
 8028032:	68b8      	ldr	r0, [r7, #8]
 8028034:	f000 f8ec 	bl	8028210 <FLASH_Program_HalfWord>
 8028038:	e00d      	b.n	8028056 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 802803a:	68fb      	ldr	r3, [r7, #12]
 802803c:	2b02      	cmp	r3, #2
 802803e:	d105      	bne.n	802804c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8028040:	683b      	ldr	r3, [r7, #0]
 8028042:	4619      	mov	r1, r3
 8028044:	68b8      	ldr	r0, [r7, #8]
 8028046:	f000 f8c1 	bl	80281cc <FLASH_Program_Word>
 802804a:	e004      	b.n	8028056 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 802804c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8028050:	68b8      	ldr	r0, [r7, #8]
 8028052:	f000 f88b 	bl	802816c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8028056:	f24c 3050 	movw	r0, #50000	; 0xc350
 802805a:	f000 f847 	bl	80280ec <FLASH_WaitForLastOperation>
 802805e:	4603      	mov	r3, r0
 8028060:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8028062:	4b08      	ldr	r3, [pc, #32]	; (8028084 <HAL_FLASH_Program+0xa4>)
 8028064:	691b      	ldr	r3, [r3, #16]
 8028066:	4a07      	ldr	r2, [pc, #28]	; (8028084 <HAL_FLASH_Program+0xa4>)
 8028068:	f023 0301 	bic.w	r3, r3, #1
 802806c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802806e:	4b04      	ldr	r3, [pc, #16]	; (8028080 <HAL_FLASH_Program+0xa0>)
 8028070:	2200      	movs	r2, #0
 8028072:	761a      	strb	r2, [r3, #24]
  
  return status;
 8028074:	7dfb      	ldrb	r3, [r7, #23]
}
 8028076:	4618      	mov	r0, r3
 8028078:	3718      	adds	r7, #24
 802807a:	46bd      	mov	sp, r7
 802807c:	bd80      	pop	{r7, pc}
 802807e:	bf00      	nop
 8028080:	200114f8 	.word	0x200114f8
 8028084:	40023c00 	.word	0x40023c00

08028088 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8028088:	b480      	push	{r7}
 802808a:	b083      	sub	sp, #12
 802808c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 802808e:	2300      	movs	r3, #0
 8028090:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8028092:	4b0b      	ldr	r3, [pc, #44]	; (80280c0 <HAL_FLASH_Unlock+0x38>)
 8028094:	691b      	ldr	r3, [r3, #16]
 8028096:	2b00      	cmp	r3, #0
 8028098:	da0b      	bge.n	80280b2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 802809a:	4b09      	ldr	r3, [pc, #36]	; (80280c0 <HAL_FLASH_Unlock+0x38>)
 802809c:	4a09      	ldr	r2, [pc, #36]	; (80280c4 <HAL_FLASH_Unlock+0x3c>)
 802809e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80280a0:	4b07      	ldr	r3, [pc, #28]	; (80280c0 <HAL_FLASH_Unlock+0x38>)
 80280a2:	4a09      	ldr	r2, [pc, #36]	; (80280c8 <HAL_FLASH_Unlock+0x40>)
 80280a4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80280a6:	4b06      	ldr	r3, [pc, #24]	; (80280c0 <HAL_FLASH_Unlock+0x38>)
 80280a8:	691b      	ldr	r3, [r3, #16]
 80280aa:	2b00      	cmp	r3, #0
 80280ac:	da01      	bge.n	80280b2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80280ae:	2301      	movs	r3, #1
 80280b0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80280b2:	79fb      	ldrb	r3, [r7, #7]
}
 80280b4:	4618      	mov	r0, r3
 80280b6:	370c      	adds	r7, #12
 80280b8:	46bd      	mov	sp, r7
 80280ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280be:	4770      	bx	lr
 80280c0:	40023c00 	.word	0x40023c00
 80280c4:	45670123 	.word	0x45670123
 80280c8:	cdef89ab 	.word	0xcdef89ab

080280cc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80280cc:	b480      	push	{r7}
 80280ce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80280d0:	4b05      	ldr	r3, [pc, #20]	; (80280e8 <HAL_FLASH_Lock+0x1c>)
 80280d2:	691b      	ldr	r3, [r3, #16]
 80280d4:	4a04      	ldr	r2, [pc, #16]	; (80280e8 <HAL_FLASH_Lock+0x1c>)
 80280d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80280da:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80280dc:	2300      	movs	r3, #0
}
 80280de:	4618      	mov	r0, r3
 80280e0:	46bd      	mov	sp, r7
 80280e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280e6:	4770      	bx	lr
 80280e8:	40023c00 	.word	0x40023c00

080280ec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80280ec:	b580      	push	{r7, lr}
 80280ee:	b084      	sub	sp, #16
 80280f0:	af00      	add	r7, sp, #0
 80280f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80280f4:	2300      	movs	r3, #0
 80280f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80280f8:	4b1a      	ldr	r3, [pc, #104]	; (8028164 <FLASH_WaitForLastOperation+0x78>)
 80280fa:	2200      	movs	r2, #0
 80280fc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80280fe:	f7fe fecd 	bl	8026e9c <HAL_GetTick>
 8028102:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8028104:	e010      	b.n	8028128 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8028106:	687b      	ldr	r3, [r7, #4]
 8028108:	f1b3 3fff 	cmp.w	r3, #4294967295
 802810c:	d00c      	beq.n	8028128 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 802810e:	687b      	ldr	r3, [r7, #4]
 8028110:	2b00      	cmp	r3, #0
 8028112:	d007      	beq.n	8028124 <FLASH_WaitForLastOperation+0x38>
 8028114:	f7fe fec2 	bl	8026e9c <HAL_GetTick>
 8028118:	4602      	mov	r2, r0
 802811a:	68fb      	ldr	r3, [r7, #12]
 802811c:	1ad3      	subs	r3, r2, r3
 802811e:	687a      	ldr	r2, [r7, #4]
 8028120:	429a      	cmp	r2, r3
 8028122:	d201      	bcs.n	8028128 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8028124:	2303      	movs	r3, #3
 8028126:	e019      	b.n	802815c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8028128:	4b0f      	ldr	r3, [pc, #60]	; (8028168 <FLASH_WaitForLastOperation+0x7c>)
 802812a:	68db      	ldr	r3, [r3, #12]
 802812c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8028130:	2b00      	cmp	r3, #0
 8028132:	d1e8      	bne.n	8028106 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8028134:	4b0c      	ldr	r3, [pc, #48]	; (8028168 <FLASH_WaitForLastOperation+0x7c>)
 8028136:	68db      	ldr	r3, [r3, #12]
 8028138:	f003 0301 	and.w	r3, r3, #1
 802813c:	2b00      	cmp	r3, #0
 802813e:	d002      	beq.n	8028146 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8028140:	4b09      	ldr	r3, [pc, #36]	; (8028168 <FLASH_WaitForLastOperation+0x7c>)
 8028142:	2201      	movs	r2, #1
 8028144:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8028146:	4b08      	ldr	r3, [pc, #32]	; (8028168 <FLASH_WaitForLastOperation+0x7c>)
 8028148:	68db      	ldr	r3, [r3, #12]
 802814a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 802814e:	2b00      	cmp	r3, #0
 8028150:	d003      	beq.n	802815a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8028152:	f000 f8a3 	bl	802829c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8028156:	2301      	movs	r3, #1
 8028158:	e000      	b.n	802815c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 802815a:	2300      	movs	r3, #0
  
}  
 802815c:	4618      	mov	r0, r3
 802815e:	3710      	adds	r7, #16
 8028160:	46bd      	mov	sp, r7
 8028162:	bd80      	pop	{r7, pc}
 8028164:	200114f8 	.word	0x200114f8
 8028168:	40023c00 	.word	0x40023c00

0802816c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 802816c:	b490      	push	{r4, r7}
 802816e:	b084      	sub	sp, #16
 8028170:	af00      	add	r7, sp, #0
 8028172:	60f8      	str	r0, [r7, #12]
 8028174:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8028178:	4b13      	ldr	r3, [pc, #76]	; (80281c8 <FLASH_Program_DoubleWord+0x5c>)
 802817a:	691b      	ldr	r3, [r3, #16]
 802817c:	4a12      	ldr	r2, [pc, #72]	; (80281c8 <FLASH_Program_DoubleWord+0x5c>)
 802817e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028182:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8028184:	4b10      	ldr	r3, [pc, #64]	; (80281c8 <FLASH_Program_DoubleWord+0x5c>)
 8028186:	691b      	ldr	r3, [r3, #16]
 8028188:	4a0f      	ldr	r2, [pc, #60]	; (80281c8 <FLASH_Program_DoubleWord+0x5c>)
 802818a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802818e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8028190:	4b0d      	ldr	r3, [pc, #52]	; (80281c8 <FLASH_Program_DoubleWord+0x5c>)
 8028192:	691b      	ldr	r3, [r3, #16]
 8028194:	4a0c      	ldr	r2, [pc, #48]	; (80281c8 <FLASH_Program_DoubleWord+0x5c>)
 8028196:	f043 0301 	orr.w	r3, r3, #1
 802819a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 802819c:	68fb      	ldr	r3, [r7, #12]
 802819e:	683a      	ldr	r2, [r7, #0]
 80281a0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80281a2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80281a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80281aa:	f04f 0300 	mov.w	r3, #0
 80281ae:	f04f 0400 	mov.w	r4, #0
 80281b2:	0013      	movs	r3, r2
 80281b4:	2400      	movs	r4, #0
 80281b6:	68fa      	ldr	r2, [r7, #12]
 80281b8:	3204      	adds	r2, #4
 80281ba:	6013      	str	r3, [r2, #0]
}
 80281bc:	bf00      	nop
 80281be:	3710      	adds	r7, #16
 80281c0:	46bd      	mov	sp, r7
 80281c2:	bc90      	pop	{r4, r7}
 80281c4:	4770      	bx	lr
 80281c6:	bf00      	nop
 80281c8:	40023c00 	.word	0x40023c00

080281cc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80281cc:	b480      	push	{r7}
 80281ce:	b083      	sub	sp, #12
 80281d0:	af00      	add	r7, sp, #0
 80281d2:	6078      	str	r0, [r7, #4]
 80281d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80281d6:	4b0d      	ldr	r3, [pc, #52]	; (802820c <FLASH_Program_Word+0x40>)
 80281d8:	691b      	ldr	r3, [r3, #16]
 80281da:	4a0c      	ldr	r2, [pc, #48]	; (802820c <FLASH_Program_Word+0x40>)
 80281dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80281e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80281e2:	4b0a      	ldr	r3, [pc, #40]	; (802820c <FLASH_Program_Word+0x40>)
 80281e4:	691b      	ldr	r3, [r3, #16]
 80281e6:	4a09      	ldr	r2, [pc, #36]	; (802820c <FLASH_Program_Word+0x40>)
 80281e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80281ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80281ee:	4b07      	ldr	r3, [pc, #28]	; (802820c <FLASH_Program_Word+0x40>)
 80281f0:	691b      	ldr	r3, [r3, #16]
 80281f2:	4a06      	ldr	r2, [pc, #24]	; (802820c <FLASH_Program_Word+0x40>)
 80281f4:	f043 0301 	orr.w	r3, r3, #1
 80281f8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80281fa:	687b      	ldr	r3, [r7, #4]
 80281fc:	683a      	ldr	r2, [r7, #0]
 80281fe:	601a      	str	r2, [r3, #0]
}
 8028200:	bf00      	nop
 8028202:	370c      	adds	r7, #12
 8028204:	46bd      	mov	sp, r7
 8028206:	f85d 7b04 	ldr.w	r7, [sp], #4
 802820a:	4770      	bx	lr
 802820c:	40023c00 	.word	0x40023c00

08028210 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8028210:	b480      	push	{r7}
 8028212:	b083      	sub	sp, #12
 8028214:	af00      	add	r7, sp, #0
 8028216:	6078      	str	r0, [r7, #4]
 8028218:	460b      	mov	r3, r1
 802821a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802821c:	4b0d      	ldr	r3, [pc, #52]	; (8028254 <FLASH_Program_HalfWord+0x44>)
 802821e:	691b      	ldr	r3, [r3, #16]
 8028220:	4a0c      	ldr	r2, [pc, #48]	; (8028254 <FLASH_Program_HalfWord+0x44>)
 8028222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028226:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8028228:	4b0a      	ldr	r3, [pc, #40]	; (8028254 <FLASH_Program_HalfWord+0x44>)
 802822a:	691b      	ldr	r3, [r3, #16]
 802822c:	4a09      	ldr	r2, [pc, #36]	; (8028254 <FLASH_Program_HalfWord+0x44>)
 802822e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028232:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8028234:	4b07      	ldr	r3, [pc, #28]	; (8028254 <FLASH_Program_HalfWord+0x44>)
 8028236:	691b      	ldr	r3, [r3, #16]
 8028238:	4a06      	ldr	r2, [pc, #24]	; (8028254 <FLASH_Program_HalfWord+0x44>)
 802823a:	f043 0301 	orr.w	r3, r3, #1
 802823e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8028240:	687b      	ldr	r3, [r7, #4]
 8028242:	887a      	ldrh	r2, [r7, #2]
 8028244:	801a      	strh	r2, [r3, #0]
}
 8028246:	bf00      	nop
 8028248:	370c      	adds	r7, #12
 802824a:	46bd      	mov	sp, r7
 802824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028250:	4770      	bx	lr
 8028252:	bf00      	nop
 8028254:	40023c00 	.word	0x40023c00

08028258 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8028258:	b480      	push	{r7}
 802825a:	b083      	sub	sp, #12
 802825c:	af00      	add	r7, sp, #0
 802825e:	6078      	str	r0, [r7, #4]
 8028260:	460b      	mov	r3, r1
 8028262:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8028264:	4b0c      	ldr	r3, [pc, #48]	; (8028298 <FLASH_Program_Byte+0x40>)
 8028266:	691b      	ldr	r3, [r3, #16]
 8028268:	4a0b      	ldr	r2, [pc, #44]	; (8028298 <FLASH_Program_Byte+0x40>)
 802826a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802826e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8028270:	4b09      	ldr	r3, [pc, #36]	; (8028298 <FLASH_Program_Byte+0x40>)
 8028272:	4a09      	ldr	r2, [pc, #36]	; (8028298 <FLASH_Program_Byte+0x40>)
 8028274:	691b      	ldr	r3, [r3, #16]
 8028276:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8028278:	4b07      	ldr	r3, [pc, #28]	; (8028298 <FLASH_Program_Byte+0x40>)
 802827a:	691b      	ldr	r3, [r3, #16]
 802827c:	4a06      	ldr	r2, [pc, #24]	; (8028298 <FLASH_Program_Byte+0x40>)
 802827e:	f043 0301 	orr.w	r3, r3, #1
 8028282:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8028284:	687b      	ldr	r3, [r7, #4]
 8028286:	78fa      	ldrb	r2, [r7, #3]
 8028288:	701a      	strb	r2, [r3, #0]
}
 802828a:	bf00      	nop
 802828c:	370c      	adds	r7, #12
 802828e:	46bd      	mov	sp, r7
 8028290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028294:	4770      	bx	lr
 8028296:	bf00      	nop
 8028298:	40023c00 	.word	0x40023c00

0802829c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 802829c:	b480      	push	{r7}
 802829e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80282a0:	4b27      	ldr	r3, [pc, #156]	; (8028340 <FLASH_SetErrorCode+0xa4>)
 80282a2:	68db      	ldr	r3, [r3, #12]
 80282a4:	f003 0310 	and.w	r3, r3, #16
 80282a8:	2b00      	cmp	r3, #0
 80282aa:	d008      	beq.n	80282be <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80282ac:	4b25      	ldr	r3, [pc, #148]	; (8028344 <FLASH_SetErrorCode+0xa8>)
 80282ae:	69db      	ldr	r3, [r3, #28]
 80282b0:	f043 0310 	orr.w	r3, r3, #16
 80282b4:	4a23      	ldr	r2, [pc, #140]	; (8028344 <FLASH_SetErrorCode+0xa8>)
 80282b6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80282b8:	4b21      	ldr	r3, [pc, #132]	; (8028340 <FLASH_SetErrorCode+0xa4>)
 80282ba:	2210      	movs	r2, #16
 80282bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80282be:	4b20      	ldr	r3, [pc, #128]	; (8028340 <FLASH_SetErrorCode+0xa4>)
 80282c0:	68db      	ldr	r3, [r3, #12]
 80282c2:	f003 0320 	and.w	r3, r3, #32
 80282c6:	2b00      	cmp	r3, #0
 80282c8:	d008      	beq.n	80282dc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80282ca:	4b1e      	ldr	r3, [pc, #120]	; (8028344 <FLASH_SetErrorCode+0xa8>)
 80282cc:	69db      	ldr	r3, [r3, #28]
 80282ce:	f043 0308 	orr.w	r3, r3, #8
 80282d2:	4a1c      	ldr	r2, [pc, #112]	; (8028344 <FLASH_SetErrorCode+0xa8>)
 80282d4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80282d6:	4b1a      	ldr	r3, [pc, #104]	; (8028340 <FLASH_SetErrorCode+0xa4>)
 80282d8:	2220      	movs	r2, #32
 80282da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80282dc:	4b18      	ldr	r3, [pc, #96]	; (8028340 <FLASH_SetErrorCode+0xa4>)
 80282de:	68db      	ldr	r3, [r3, #12]
 80282e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80282e4:	2b00      	cmp	r3, #0
 80282e6:	d008      	beq.n	80282fa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80282e8:	4b16      	ldr	r3, [pc, #88]	; (8028344 <FLASH_SetErrorCode+0xa8>)
 80282ea:	69db      	ldr	r3, [r3, #28]
 80282ec:	f043 0304 	orr.w	r3, r3, #4
 80282f0:	4a14      	ldr	r2, [pc, #80]	; (8028344 <FLASH_SetErrorCode+0xa8>)
 80282f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80282f4:	4b12      	ldr	r3, [pc, #72]	; (8028340 <FLASH_SetErrorCode+0xa4>)
 80282f6:	2240      	movs	r2, #64	; 0x40
 80282f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80282fa:	4b11      	ldr	r3, [pc, #68]	; (8028340 <FLASH_SetErrorCode+0xa4>)
 80282fc:	68db      	ldr	r3, [r3, #12]
 80282fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028302:	2b00      	cmp	r3, #0
 8028304:	d008      	beq.n	8028318 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8028306:	4b0f      	ldr	r3, [pc, #60]	; (8028344 <FLASH_SetErrorCode+0xa8>)
 8028308:	69db      	ldr	r3, [r3, #28]
 802830a:	f043 0302 	orr.w	r3, r3, #2
 802830e:	4a0d      	ldr	r2, [pc, #52]	; (8028344 <FLASH_SetErrorCode+0xa8>)
 8028310:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8028312:	4b0b      	ldr	r3, [pc, #44]	; (8028340 <FLASH_SetErrorCode+0xa4>)
 8028314:	2280      	movs	r2, #128	; 0x80
 8028316:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8028318:	4b09      	ldr	r3, [pc, #36]	; (8028340 <FLASH_SetErrorCode+0xa4>)
 802831a:	68db      	ldr	r3, [r3, #12]
 802831c:	f003 0302 	and.w	r3, r3, #2
 8028320:	2b00      	cmp	r3, #0
 8028322:	d008      	beq.n	8028336 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8028324:	4b07      	ldr	r3, [pc, #28]	; (8028344 <FLASH_SetErrorCode+0xa8>)
 8028326:	69db      	ldr	r3, [r3, #28]
 8028328:	f043 0320 	orr.w	r3, r3, #32
 802832c:	4a05      	ldr	r2, [pc, #20]	; (8028344 <FLASH_SetErrorCode+0xa8>)
 802832e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8028330:	4b03      	ldr	r3, [pc, #12]	; (8028340 <FLASH_SetErrorCode+0xa4>)
 8028332:	2202      	movs	r2, #2
 8028334:	60da      	str	r2, [r3, #12]
  }
}
 8028336:	bf00      	nop
 8028338:	46bd      	mov	sp, r7
 802833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802833e:	4770      	bx	lr
 8028340:	40023c00 	.word	0x40023c00
 8028344:	200114f8 	.word	0x200114f8

08028348 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8028348:	b580      	push	{r7, lr}
 802834a:	b084      	sub	sp, #16
 802834c:	af00      	add	r7, sp, #0
 802834e:	6078      	str	r0, [r7, #4]
 8028350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8028352:	2301      	movs	r3, #1
 8028354:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8028356:	2300      	movs	r3, #0
 8028358:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802835a:	4b31      	ldr	r3, [pc, #196]	; (8028420 <HAL_FLASHEx_Erase+0xd8>)
 802835c:	7e1b      	ldrb	r3, [r3, #24]
 802835e:	2b01      	cmp	r3, #1
 8028360:	d101      	bne.n	8028366 <HAL_FLASHEx_Erase+0x1e>
 8028362:	2302      	movs	r3, #2
 8028364:	e058      	b.n	8028418 <HAL_FLASHEx_Erase+0xd0>
 8028366:	4b2e      	ldr	r3, [pc, #184]	; (8028420 <HAL_FLASHEx_Erase+0xd8>)
 8028368:	2201      	movs	r2, #1
 802836a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802836c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8028370:	f7ff febc 	bl	80280ec <FLASH_WaitForLastOperation>
 8028374:	4603      	mov	r3, r0
 8028376:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8028378:	7bfb      	ldrb	r3, [r7, #15]
 802837a:	2b00      	cmp	r3, #0
 802837c:	d148      	bne.n	8028410 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 802837e:	683b      	ldr	r3, [r7, #0]
 8028380:	f04f 32ff 	mov.w	r2, #4294967295
 8028384:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8028386:	687b      	ldr	r3, [r7, #4]
 8028388:	681b      	ldr	r3, [r3, #0]
 802838a:	2b01      	cmp	r3, #1
 802838c:	d115      	bne.n	80283ba <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 802838e:	687b      	ldr	r3, [r7, #4]
 8028390:	691b      	ldr	r3, [r3, #16]
 8028392:	b2da      	uxtb	r2, r3
 8028394:	687b      	ldr	r3, [r7, #4]
 8028396:	685b      	ldr	r3, [r3, #4]
 8028398:	4619      	mov	r1, r3
 802839a:	4610      	mov	r0, r2
 802839c:	f000 f844 	bl	8028428 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80283a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80283a4:	f7ff fea2 	bl	80280ec <FLASH_WaitForLastOperation>
 80283a8:	4603      	mov	r3, r0
 80283aa:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80283ac:	4b1d      	ldr	r3, [pc, #116]	; (8028424 <HAL_FLASHEx_Erase+0xdc>)
 80283ae:	691b      	ldr	r3, [r3, #16]
 80283b0:	4a1c      	ldr	r2, [pc, #112]	; (8028424 <HAL_FLASHEx_Erase+0xdc>)
 80283b2:	f023 0304 	bic.w	r3, r3, #4
 80283b6:	6113      	str	r3, [r2, #16]
 80283b8:	e028      	b.n	802840c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80283ba:	687b      	ldr	r3, [r7, #4]
 80283bc:	689b      	ldr	r3, [r3, #8]
 80283be:	60bb      	str	r3, [r7, #8]
 80283c0:	e01c      	b.n	80283fc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80283c2:	687b      	ldr	r3, [r7, #4]
 80283c4:	691b      	ldr	r3, [r3, #16]
 80283c6:	b2db      	uxtb	r3, r3
 80283c8:	4619      	mov	r1, r3
 80283ca:	68b8      	ldr	r0, [r7, #8]
 80283cc:	f000 f850 	bl	8028470 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80283d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80283d4:	f7ff fe8a 	bl	80280ec <FLASH_WaitForLastOperation>
 80283d8:	4603      	mov	r3, r0
 80283da:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80283dc:	4b11      	ldr	r3, [pc, #68]	; (8028424 <HAL_FLASHEx_Erase+0xdc>)
 80283de:	691b      	ldr	r3, [r3, #16]
 80283e0:	4a10      	ldr	r2, [pc, #64]	; (8028424 <HAL_FLASHEx_Erase+0xdc>)
 80283e2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80283e6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80283e8:	7bfb      	ldrb	r3, [r7, #15]
 80283ea:	2b00      	cmp	r3, #0
 80283ec:	d003      	beq.n	80283f6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80283ee:	683b      	ldr	r3, [r7, #0]
 80283f0:	68ba      	ldr	r2, [r7, #8]
 80283f2:	601a      	str	r2, [r3, #0]
          break;
 80283f4:	e00a      	b.n	802840c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80283f6:	68bb      	ldr	r3, [r7, #8]
 80283f8:	3301      	adds	r3, #1
 80283fa:	60bb      	str	r3, [r7, #8]
 80283fc:	687b      	ldr	r3, [r7, #4]
 80283fe:	68da      	ldr	r2, [r3, #12]
 8028400:	687b      	ldr	r3, [r7, #4]
 8028402:	689b      	ldr	r3, [r3, #8]
 8028404:	4413      	add	r3, r2
 8028406:	68ba      	ldr	r2, [r7, #8]
 8028408:	429a      	cmp	r2, r3
 802840a:	d3da      	bcc.n	80283c2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 802840c:	f000 f878 	bl	8028500 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8028410:	4b03      	ldr	r3, [pc, #12]	; (8028420 <HAL_FLASHEx_Erase+0xd8>)
 8028412:	2200      	movs	r2, #0
 8028414:	761a      	strb	r2, [r3, #24]

  return status;
 8028416:	7bfb      	ldrb	r3, [r7, #15]
}
 8028418:	4618      	mov	r0, r3
 802841a:	3710      	adds	r7, #16
 802841c:	46bd      	mov	sp, r7
 802841e:	bd80      	pop	{r7, pc}
 8028420:	200114f8 	.word	0x200114f8
 8028424:	40023c00 	.word	0x40023c00

08028428 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8028428:	b480      	push	{r7}
 802842a:	b083      	sub	sp, #12
 802842c:	af00      	add	r7, sp, #0
 802842e:	4603      	mov	r3, r0
 8028430:	6039      	str	r1, [r7, #0]
 8028432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8028434:	4b0d      	ldr	r3, [pc, #52]	; (802846c <FLASH_MassErase+0x44>)
 8028436:	691b      	ldr	r3, [r3, #16]
 8028438:	4a0c      	ldr	r2, [pc, #48]	; (802846c <FLASH_MassErase+0x44>)
 802843a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802843e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8028440:	4b0a      	ldr	r3, [pc, #40]	; (802846c <FLASH_MassErase+0x44>)
 8028442:	691b      	ldr	r3, [r3, #16]
 8028444:	4a09      	ldr	r2, [pc, #36]	; (802846c <FLASH_MassErase+0x44>)
 8028446:	f043 0304 	orr.w	r3, r3, #4
 802844a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 802844c:	4b07      	ldr	r3, [pc, #28]	; (802846c <FLASH_MassErase+0x44>)
 802844e:	691a      	ldr	r2, [r3, #16]
 8028450:	79fb      	ldrb	r3, [r7, #7]
 8028452:	021b      	lsls	r3, r3, #8
 8028454:	4313      	orrs	r3, r2
 8028456:	4a05      	ldr	r2, [pc, #20]	; (802846c <FLASH_MassErase+0x44>)
 8028458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802845c:	6113      	str	r3, [r2, #16]
}
 802845e:	bf00      	nop
 8028460:	370c      	adds	r7, #12
 8028462:	46bd      	mov	sp, r7
 8028464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028468:	4770      	bx	lr
 802846a:	bf00      	nop
 802846c:	40023c00 	.word	0x40023c00

08028470 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8028470:	b480      	push	{r7}
 8028472:	b085      	sub	sp, #20
 8028474:	af00      	add	r7, sp, #0
 8028476:	6078      	str	r0, [r7, #4]
 8028478:	460b      	mov	r3, r1
 802847a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 802847c:	2300      	movs	r3, #0
 802847e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8028480:	78fb      	ldrb	r3, [r7, #3]
 8028482:	2b00      	cmp	r3, #0
 8028484:	d102      	bne.n	802848c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8028486:	2300      	movs	r3, #0
 8028488:	60fb      	str	r3, [r7, #12]
 802848a:	e010      	b.n	80284ae <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 802848c:	78fb      	ldrb	r3, [r7, #3]
 802848e:	2b01      	cmp	r3, #1
 8028490:	d103      	bne.n	802849a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8028492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8028496:	60fb      	str	r3, [r7, #12]
 8028498:	e009      	b.n	80284ae <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 802849a:	78fb      	ldrb	r3, [r7, #3]
 802849c:	2b02      	cmp	r3, #2
 802849e:	d103      	bne.n	80284a8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80284a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80284a4:	60fb      	str	r3, [r7, #12]
 80284a6:	e002      	b.n	80284ae <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80284a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80284ac:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80284ae:	4b13      	ldr	r3, [pc, #76]	; (80284fc <FLASH_Erase_Sector+0x8c>)
 80284b0:	691b      	ldr	r3, [r3, #16]
 80284b2:	4a12      	ldr	r2, [pc, #72]	; (80284fc <FLASH_Erase_Sector+0x8c>)
 80284b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80284b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80284ba:	4b10      	ldr	r3, [pc, #64]	; (80284fc <FLASH_Erase_Sector+0x8c>)
 80284bc:	691a      	ldr	r2, [r3, #16]
 80284be:	490f      	ldr	r1, [pc, #60]	; (80284fc <FLASH_Erase_Sector+0x8c>)
 80284c0:	68fb      	ldr	r3, [r7, #12]
 80284c2:	4313      	orrs	r3, r2
 80284c4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80284c6:	4b0d      	ldr	r3, [pc, #52]	; (80284fc <FLASH_Erase_Sector+0x8c>)
 80284c8:	691b      	ldr	r3, [r3, #16]
 80284ca:	4a0c      	ldr	r2, [pc, #48]	; (80284fc <FLASH_Erase_Sector+0x8c>)
 80284cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80284d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80284d2:	4b0a      	ldr	r3, [pc, #40]	; (80284fc <FLASH_Erase_Sector+0x8c>)
 80284d4:	691a      	ldr	r2, [r3, #16]
 80284d6:	687b      	ldr	r3, [r7, #4]
 80284d8:	00db      	lsls	r3, r3, #3
 80284da:	4313      	orrs	r3, r2
 80284dc:	4a07      	ldr	r2, [pc, #28]	; (80284fc <FLASH_Erase_Sector+0x8c>)
 80284de:	f043 0302 	orr.w	r3, r3, #2
 80284e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80284e4:	4b05      	ldr	r3, [pc, #20]	; (80284fc <FLASH_Erase_Sector+0x8c>)
 80284e6:	691b      	ldr	r3, [r3, #16]
 80284e8:	4a04      	ldr	r2, [pc, #16]	; (80284fc <FLASH_Erase_Sector+0x8c>)
 80284ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80284ee:	6113      	str	r3, [r2, #16]
}
 80284f0:	bf00      	nop
 80284f2:	3714      	adds	r7, #20
 80284f4:	46bd      	mov	sp, r7
 80284f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284fa:	4770      	bx	lr
 80284fc:	40023c00 	.word	0x40023c00

08028500 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8028500:	b480      	push	{r7}
 8028502:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8028504:	4b20      	ldr	r3, [pc, #128]	; (8028588 <FLASH_FlushCaches+0x88>)
 8028506:	681b      	ldr	r3, [r3, #0]
 8028508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802850c:	2b00      	cmp	r3, #0
 802850e:	d017      	beq.n	8028540 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8028510:	4b1d      	ldr	r3, [pc, #116]	; (8028588 <FLASH_FlushCaches+0x88>)
 8028512:	681b      	ldr	r3, [r3, #0]
 8028514:	4a1c      	ldr	r2, [pc, #112]	; (8028588 <FLASH_FlushCaches+0x88>)
 8028516:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802851a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 802851c:	4b1a      	ldr	r3, [pc, #104]	; (8028588 <FLASH_FlushCaches+0x88>)
 802851e:	681b      	ldr	r3, [r3, #0]
 8028520:	4a19      	ldr	r2, [pc, #100]	; (8028588 <FLASH_FlushCaches+0x88>)
 8028522:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8028526:	6013      	str	r3, [r2, #0]
 8028528:	4b17      	ldr	r3, [pc, #92]	; (8028588 <FLASH_FlushCaches+0x88>)
 802852a:	681b      	ldr	r3, [r3, #0]
 802852c:	4a16      	ldr	r2, [pc, #88]	; (8028588 <FLASH_FlushCaches+0x88>)
 802852e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8028532:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8028534:	4b14      	ldr	r3, [pc, #80]	; (8028588 <FLASH_FlushCaches+0x88>)
 8028536:	681b      	ldr	r3, [r3, #0]
 8028538:	4a13      	ldr	r2, [pc, #76]	; (8028588 <FLASH_FlushCaches+0x88>)
 802853a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802853e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8028540:	4b11      	ldr	r3, [pc, #68]	; (8028588 <FLASH_FlushCaches+0x88>)
 8028542:	681b      	ldr	r3, [r3, #0]
 8028544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028548:	2b00      	cmp	r3, #0
 802854a:	d017      	beq.n	802857c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 802854c:	4b0e      	ldr	r3, [pc, #56]	; (8028588 <FLASH_FlushCaches+0x88>)
 802854e:	681b      	ldr	r3, [r3, #0]
 8028550:	4a0d      	ldr	r2, [pc, #52]	; (8028588 <FLASH_FlushCaches+0x88>)
 8028552:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8028556:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8028558:	4b0b      	ldr	r3, [pc, #44]	; (8028588 <FLASH_FlushCaches+0x88>)
 802855a:	681b      	ldr	r3, [r3, #0]
 802855c:	4a0a      	ldr	r2, [pc, #40]	; (8028588 <FLASH_FlushCaches+0x88>)
 802855e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8028562:	6013      	str	r3, [r2, #0]
 8028564:	4b08      	ldr	r3, [pc, #32]	; (8028588 <FLASH_FlushCaches+0x88>)
 8028566:	681b      	ldr	r3, [r3, #0]
 8028568:	4a07      	ldr	r2, [pc, #28]	; (8028588 <FLASH_FlushCaches+0x88>)
 802856a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802856e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8028570:	4b05      	ldr	r3, [pc, #20]	; (8028588 <FLASH_FlushCaches+0x88>)
 8028572:	681b      	ldr	r3, [r3, #0]
 8028574:	4a04      	ldr	r2, [pc, #16]	; (8028588 <FLASH_FlushCaches+0x88>)
 8028576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802857a:	6013      	str	r3, [r2, #0]
  }
}
 802857c:	bf00      	nop
 802857e:	46bd      	mov	sp, r7
 8028580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028584:	4770      	bx	lr
 8028586:	bf00      	nop
 8028588:	40023c00 	.word	0x40023c00

0802858c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802858c:	b480      	push	{r7}
 802858e:	b089      	sub	sp, #36	; 0x24
 8028590:	af00      	add	r7, sp, #0
 8028592:	6078      	str	r0, [r7, #4]
 8028594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8028596:	2300      	movs	r3, #0
 8028598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802859a:	2300      	movs	r3, #0
 802859c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802859e:	2300      	movs	r3, #0
 80285a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80285a2:	2300      	movs	r3, #0
 80285a4:	61fb      	str	r3, [r7, #28]
 80285a6:	e16b      	b.n	8028880 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80285a8:	2201      	movs	r2, #1
 80285aa:	69fb      	ldr	r3, [r7, #28]
 80285ac:	fa02 f303 	lsl.w	r3, r2, r3
 80285b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80285b2:	683b      	ldr	r3, [r7, #0]
 80285b4:	681b      	ldr	r3, [r3, #0]
 80285b6:	697a      	ldr	r2, [r7, #20]
 80285b8:	4013      	ands	r3, r2
 80285ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80285bc:	693a      	ldr	r2, [r7, #16]
 80285be:	697b      	ldr	r3, [r7, #20]
 80285c0:	429a      	cmp	r2, r3
 80285c2:	f040 815a 	bne.w	802887a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80285c6:	683b      	ldr	r3, [r7, #0]
 80285c8:	685b      	ldr	r3, [r3, #4]
 80285ca:	2b01      	cmp	r3, #1
 80285cc:	d00b      	beq.n	80285e6 <HAL_GPIO_Init+0x5a>
 80285ce:	683b      	ldr	r3, [r7, #0]
 80285d0:	685b      	ldr	r3, [r3, #4]
 80285d2:	2b02      	cmp	r3, #2
 80285d4:	d007      	beq.n	80285e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80285d6:	683b      	ldr	r3, [r7, #0]
 80285d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80285da:	2b11      	cmp	r3, #17
 80285dc:	d003      	beq.n	80285e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80285de:	683b      	ldr	r3, [r7, #0]
 80285e0:	685b      	ldr	r3, [r3, #4]
 80285e2:	2b12      	cmp	r3, #18
 80285e4:	d130      	bne.n	8028648 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80285e6:	687b      	ldr	r3, [r7, #4]
 80285e8:	689b      	ldr	r3, [r3, #8]
 80285ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80285ec:	69fb      	ldr	r3, [r7, #28]
 80285ee:	005b      	lsls	r3, r3, #1
 80285f0:	2203      	movs	r2, #3
 80285f2:	fa02 f303 	lsl.w	r3, r2, r3
 80285f6:	43db      	mvns	r3, r3
 80285f8:	69ba      	ldr	r2, [r7, #24]
 80285fa:	4013      	ands	r3, r2
 80285fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80285fe:	683b      	ldr	r3, [r7, #0]
 8028600:	68da      	ldr	r2, [r3, #12]
 8028602:	69fb      	ldr	r3, [r7, #28]
 8028604:	005b      	lsls	r3, r3, #1
 8028606:	fa02 f303 	lsl.w	r3, r2, r3
 802860a:	69ba      	ldr	r2, [r7, #24]
 802860c:	4313      	orrs	r3, r2
 802860e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8028610:	687b      	ldr	r3, [r7, #4]
 8028612:	69ba      	ldr	r2, [r7, #24]
 8028614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8028616:	687b      	ldr	r3, [r7, #4]
 8028618:	685b      	ldr	r3, [r3, #4]
 802861a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802861c:	2201      	movs	r2, #1
 802861e:	69fb      	ldr	r3, [r7, #28]
 8028620:	fa02 f303 	lsl.w	r3, r2, r3
 8028624:	43db      	mvns	r3, r3
 8028626:	69ba      	ldr	r2, [r7, #24]
 8028628:	4013      	ands	r3, r2
 802862a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 802862c:	683b      	ldr	r3, [r7, #0]
 802862e:	685b      	ldr	r3, [r3, #4]
 8028630:	091b      	lsrs	r3, r3, #4
 8028632:	f003 0201 	and.w	r2, r3, #1
 8028636:	69fb      	ldr	r3, [r7, #28]
 8028638:	fa02 f303 	lsl.w	r3, r2, r3
 802863c:	69ba      	ldr	r2, [r7, #24]
 802863e:	4313      	orrs	r3, r2
 8028640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8028642:	687b      	ldr	r3, [r7, #4]
 8028644:	69ba      	ldr	r2, [r7, #24]
 8028646:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8028648:	687b      	ldr	r3, [r7, #4]
 802864a:	68db      	ldr	r3, [r3, #12]
 802864c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802864e:	69fb      	ldr	r3, [r7, #28]
 8028650:	005b      	lsls	r3, r3, #1
 8028652:	2203      	movs	r2, #3
 8028654:	fa02 f303 	lsl.w	r3, r2, r3
 8028658:	43db      	mvns	r3, r3
 802865a:	69ba      	ldr	r2, [r7, #24]
 802865c:	4013      	ands	r3, r2
 802865e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8028660:	683b      	ldr	r3, [r7, #0]
 8028662:	689a      	ldr	r2, [r3, #8]
 8028664:	69fb      	ldr	r3, [r7, #28]
 8028666:	005b      	lsls	r3, r3, #1
 8028668:	fa02 f303 	lsl.w	r3, r2, r3
 802866c:	69ba      	ldr	r2, [r7, #24]
 802866e:	4313      	orrs	r3, r2
 8028670:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8028672:	687b      	ldr	r3, [r7, #4]
 8028674:	69ba      	ldr	r2, [r7, #24]
 8028676:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8028678:	683b      	ldr	r3, [r7, #0]
 802867a:	685b      	ldr	r3, [r3, #4]
 802867c:	2b02      	cmp	r3, #2
 802867e:	d003      	beq.n	8028688 <HAL_GPIO_Init+0xfc>
 8028680:	683b      	ldr	r3, [r7, #0]
 8028682:	685b      	ldr	r3, [r3, #4]
 8028684:	2b12      	cmp	r3, #18
 8028686:	d123      	bne.n	80286d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8028688:	69fb      	ldr	r3, [r7, #28]
 802868a:	08da      	lsrs	r2, r3, #3
 802868c:	687b      	ldr	r3, [r7, #4]
 802868e:	3208      	adds	r2, #8
 8028690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8028696:	69fb      	ldr	r3, [r7, #28]
 8028698:	f003 0307 	and.w	r3, r3, #7
 802869c:	009b      	lsls	r3, r3, #2
 802869e:	220f      	movs	r2, #15
 80286a0:	fa02 f303 	lsl.w	r3, r2, r3
 80286a4:	43db      	mvns	r3, r3
 80286a6:	69ba      	ldr	r2, [r7, #24]
 80286a8:	4013      	ands	r3, r2
 80286aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80286ac:	683b      	ldr	r3, [r7, #0]
 80286ae:	691a      	ldr	r2, [r3, #16]
 80286b0:	69fb      	ldr	r3, [r7, #28]
 80286b2:	f003 0307 	and.w	r3, r3, #7
 80286b6:	009b      	lsls	r3, r3, #2
 80286b8:	fa02 f303 	lsl.w	r3, r2, r3
 80286bc:	69ba      	ldr	r2, [r7, #24]
 80286be:	4313      	orrs	r3, r2
 80286c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80286c2:	69fb      	ldr	r3, [r7, #28]
 80286c4:	08da      	lsrs	r2, r3, #3
 80286c6:	687b      	ldr	r3, [r7, #4]
 80286c8:	3208      	adds	r2, #8
 80286ca:	69b9      	ldr	r1, [r7, #24]
 80286cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80286d0:	687b      	ldr	r3, [r7, #4]
 80286d2:	681b      	ldr	r3, [r3, #0]
 80286d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80286d6:	69fb      	ldr	r3, [r7, #28]
 80286d8:	005b      	lsls	r3, r3, #1
 80286da:	2203      	movs	r2, #3
 80286dc:	fa02 f303 	lsl.w	r3, r2, r3
 80286e0:	43db      	mvns	r3, r3
 80286e2:	69ba      	ldr	r2, [r7, #24]
 80286e4:	4013      	ands	r3, r2
 80286e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80286e8:	683b      	ldr	r3, [r7, #0]
 80286ea:	685b      	ldr	r3, [r3, #4]
 80286ec:	f003 0203 	and.w	r2, r3, #3
 80286f0:	69fb      	ldr	r3, [r7, #28]
 80286f2:	005b      	lsls	r3, r3, #1
 80286f4:	fa02 f303 	lsl.w	r3, r2, r3
 80286f8:	69ba      	ldr	r2, [r7, #24]
 80286fa:	4313      	orrs	r3, r2
 80286fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80286fe:	687b      	ldr	r3, [r7, #4]
 8028700:	69ba      	ldr	r2, [r7, #24]
 8028702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8028704:	683b      	ldr	r3, [r7, #0]
 8028706:	685b      	ldr	r3, [r3, #4]
 8028708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802870c:	2b00      	cmp	r3, #0
 802870e:	f000 80b4 	beq.w	802887a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8028712:	2300      	movs	r3, #0
 8028714:	60fb      	str	r3, [r7, #12]
 8028716:	4b5f      	ldr	r3, [pc, #380]	; (8028894 <HAL_GPIO_Init+0x308>)
 8028718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802871a:	4a5e      	ldr	r2, [pc, #376]	; (8028894 <HAL_GPIO_Init+0x308>)
 802871c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8028720:	6453      	str	r3, [r2, #68]	; 0x44
 8028722:	4b5c      	ldr	r3, [pc, #368]	; (8028894 <HAL_GPIO_Init+0x308>)
 8028724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802872a:	60fb      	str	r3, [r7, #12]
 802872c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802872e:	4a5a      	ldr	r2, [pc, #360]	; (8028898 <HAL_GPIO_Init+0x30c>)
 8028730:	69fb      	ldr	r3, [r7, #28]
 8028732:	089b      	lsrs	r3, r3, #2
 8028734:	3302      	adds	r3, #2
 8028736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802873a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802873c:	69fb      	ldr	r3, [r7, #28]
 802873e:	f003 0303 	and.w	r3, r3, #3
 8028742:	009b      	lsls	r3, r3, #2
 8028744:	220f      	movs	r2, #15
 8028746:	fa02 f303 	lsl.w	r3, r2, r3
 802874a:	43db      	mvns	r3, r3
 802874c:	69ba      	ldr	r2, [r7, #24]
 802874e:	4013      	ands	r3, r2
 8028750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8028752:	687b      	ldr	r3, [r7, #4]
 8028754:	4a51      	ldr	r2, [pc, #324]	; (802889c <HAL_GPIO_Init+0x310>)
 8028756:	4293      	cmp	r3, r2
 8028758:	d02b      	beq.n	80287b2 <HAL_GPIO_Init+0x226>
 802875a:	687b      	ldr	r3, [r7, #4]
 802875c:	4a50      	ldr	r2, [pc, #320]	; (80288a0 <HAL_GPIO_Init+0x314>)
 802875e:	4293      	cmp	r3, r2
 8028760:	d025      	beq.n	80287ae <HAL_GPIO_Init+0x222>
 8028762:	687b      	ldr	r3, [r7, #4]
 8028764:	4a4f      	ldr	r2, [pc, #316]	; (80288a4 <HAL_GPIO_Init+0x318>)
 8028766:	4293      	cmp	r3, r2
 8028768:	d01f      	beq.n	80287aa <HAL_GPIO_Init+0x21e>
 802876a:	687b      	ldr	r3, [r7, #4]
 802876c:	4a4e      	ldr	r2, [pc, #312]	; (80288a8 <HAL_GPIO_Init+0x31c>)
 802876e:	4293      	cmp	r3, r2
 8028770:	d019      	beq.n	80287a6 <HAL_GPIO_Init+0x21a>
 8028772:	687b      	ldr	r3, [r7, #4]
 8028774:	4a4d      	ldr	r2, [pc, #308]	; (80288ac <HAL_GPIO_Init+0x320>)
 8028776:	4293      	cmp	r3, r2
 8028778:	d013      	beq.n	80287a2 <HAL_GPIO_Init+0x216>
 802877a:	687b      	ldr	r3, [r7, #4]
 802877c:	4a4c      	ldr	r2, [pc, #304]	; (80288b0 <HAL_GPIO_Init+0x324>)
 802877e:	4293      	cmp	r3, r2
 8028780:	d00d      	beq.n	802879e <HAL_GPIO_Init+0x212>
 8028782:	687b      	ldr	r3, [r7, #4]
 8028784:	4a4b      	ldr	r2, [pc, #300]	; (80288b4 <HAL_GPIO_Init+0x328>)
 8028786:	4293      	cmp	r3, r2
 8028788:	d007      	beq.n	802879a <HAL_GPIO_Init+0x20e>
 802878a:	687b      	ldr	r3, [r7, #4]
 802878c:	4a4a      	ldr	r2, [pc, #296]	; (80288b8 <HAL_GPIO_Init+0x32c>)
 802878e:	4293      	cmp	r3, r2
 8028790:	d101      	bne.n	8028796 <HAL_GPIO_Init+0x20a>
 8028792:	2307      	movs	r3, #7
 8028794:	e00e      	b.n	80287b4 <HAL_GPIO_Init+0x228>
 8028796:	2308      	movs	r3, #8
 8028798:	e00c      	b.n	80287b4 <HAL_GPIO_Init+0x228>
 802879a:	2306      	movs	r3, #6
 802879c:	e00a      	b.n	80287b4 <HAL_GPIO_Init+0x228>
 802879e:	2305      	movs	r3, #5
 80287a0:	e008      	b.n	80287b4 <HAL_GPIO_Init+0x228>
 80287a2:	2304      	movs	r3, #4
 80287a4:	e006      	b.n	80287b4 <HAL_GPIO_Init+0x228>
 80287a6:	2303      	movs	r3, #3
 80287a8:	e004      	b.n	80287b4 <HAL_GPIO_Init+0x228>
 80287aa:	2302      	movs	r3, #2
 80287ac:	e002      	b.n	80287b4 <HAL_GPIO_Init+0x228>
 80287ae:	2301      	movs	r3, #1
 80287b0:	e000      	b.n	80287b4 <HAL_GPIO_Init+0x228>
 80287b2:	2300      	movs	r3, #0
 80287b4:	69fa      	ldr	r2, [r7, #28]
 80287b6:	f002 0203 	and.w	r2, r2, #3
 80287ba:	0092      	lsls	r2, r2, #2
 80287bc:	4093      	lsls	r3, r2
 80287be:	69ba      	ldr	r2, [r7, #24]
 80287c0:	4313      	orrs	r3, r2
 80287c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80287c4:	4934      	ldr	r1, [pc, #208]	; (8028898 <HAL_GPIO_Init+0x30c>)
 80287c6:	69fb      	ldr	r3, [r7, #28]
 80287c8:	089b      	lsrs	r3, r3, #2
 80287ca:	3302      	adds	r3, #2
 80287cc:	69ba      	ldr	r2, [r7, #24]
 80287ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80287d2:	4b3a      	ldr	r3, [pc, #232]	; (80288bc <HAL_GPIO_Init+0x330>)
 80287d4:	681b      	ldr	r3, [r3, #0]
 80287d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80287d8:	693b      	ldr	r3, [r7, #16]
 80287da:	43db      	mvns	r3, r3
 80287dc:	69ba      	ldr	r2, [r7, #24]
 80287de:	4013      	ands	r3, r2
 80287e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80287e2:	683b      	ldr	r3, [r7, #0]
 80287e4:	685b      	ldr	r3, [r3, #4]
 80287e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80287ea:	2b00      	cmp	r3, #0
 80287ec:	d003      	beq.n	80287f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80287ee:	69ba      	ldr	r2, [r7, #24]
 80287f0:	693b      	ldr	r3, [r7, #16]
 80287f2:	4313      	orrs	r3, r2
 80287f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80287f6:	4a31      	ldr	r2, [pc, #196]	; (80288bc <HAL_GPIO_Init+0x330>)
 80287f8:	69bb      	ldr	r3, [r7, #24]
 80287fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80287fc:	4b2f      	ldr	r3, [pc, #188]	; (80288bc <HAL_GPIO_Init+0x330>)
 80287fe:	685b      	ldr	r3, [r3, #4]
 8028800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028802:	693b      	ldr	r3, [r7, #16]
 8028804:	43db      	mvns	r3, r3
 8028806:	69ba      	ldr	r2, [r7, #24]
 8028808:	4013      	ands	r3, r2
 802880a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 802880c:	683b      	ldr	r3, [r7, #0]
 802880e:	685b      	ldr	r3, [r3, #4]
 8028810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028814:	2b00      	cmp	r3, #0
 8028816:	d003      	beq.n	8028820 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8028818:	69ba      	ldr	r2, [r7, #24]
 802881a:	693b      	ldr	r3, [r7, #16]
 802881c:	4313      	orrs	r3, r2
 802881e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8028820:	4a26      	ldr	r2, [pc, #152]	; (80288bc <HAL_GPIO_Init+0x330>)
 8028822:	69bb      	ldr	r3, [r7, #24]
 8028824:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8028826:	4b25      	ldr	r3, [pc, #148]	; (80288bc <HAL_GPIO_Init+0x330>)
 8028828:	689b      	ldr	r3, [r3, #8]
 802882a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802882c:	693b      	ldr	r3, [r7, #16]
 802882e:	43db      	mvns	r3, r3
 8028830:	69ba      	ldr	r2, [r7, #24]
 8028832:	4013      	ands	r3, r2
 8028834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8028836:	683b      	ldr	r3, [r7, #0]
 8028838:	685b      	ldr	r3, [r3, #4]
 802883a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802883e:	2b00      	cmp	r3, #0
 8028840:	d003      	beq.n	802884a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8028842:	69ba      	ldr	r2, [r7, #24]
 8028844:	693b      	ldr	r3, [r7, #16]
 8028846:	4313      	orrs	r3, r2
 8028848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 802884a:	4a1c      	ldr	r2, [pc, #112]	; (80288bc <HAL_GPIO_Init+0x330>)
 802884c:	69bb      	ldr	r3, [r7, #24]
 802884e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8028850:	4b1a      	ldr	r3, [pc, #104]	; (80288bc <HAL_GPIO_Init+0x330>)
 8028852:	68db      	ldr	r3, [r3, #12]
 8028854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028856:	693b      	ldr	r3, [r7, #16]
 8028858:	43db      	mvns	r3, r3
 802885a:	69ba      	ldr	r2, [r7, #24]
 802885c:	4013      	ands	r3, r2
 802885e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8028860:	683b      	ldr	r3, [r7, #0]
 8028862:	685b      	ldr	r3, [r3, #4]
 8028864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8028868:	2b00      	cmp	r3, #0
 802886a:	d003      	beq.n	8028874 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 802886c:	69ba      	ldr	r2, [r7, #24]
 802886e:	693b      	ldr	r3, [r7, #16]
 8028870:	4313      	orrs	r3, r2
 8028872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8028874:	4a11      	ldr	r2, [pc, #68]	; (80288bc <HAL_GPIO_Init+0x330>)
 8028876:	69bb      	ldr	r3, [r7, #24]
 8028878:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802887a:	69fb      	ldr	r3, [r7, #28]
 802887c:	3301      	adds	r3, #1
 802887e:	61fb      	str	r3, [r7, #28]
 8028880:	69fb      	ldr	r3, [r7, #28]
 8028882:	2b0f      	cmp	r3, #15
 8028884:	f67f ae90 	bls.w	80285a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8028888:	bf00      	nop
 802888a:	3724      	adds	r7, #36	; 0x24
 802888c:	46bd      	mov	sp, r7
 802888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028892:	4770      	bx	lr
 8028894:	40023800 	.word	0x40023800
 8028898:	40013800 	.word	0x40013800
 802889c:	40020000 	.word	0x40020000
 80288a0:	40020400 	.word	0x40020400
 80288a4:	40020800 	.word	0x40020800
 80288a8:	40020c00 	.word	0x40020c00
 80288ac:	40021000 	.word	0x40021000
 80288b0:	40021400 	.word	0x40021400
 80288b4:	40021800 	.word	0x40021800
 80288b8:	40021c00 	.word	0x40021c00
 80288bc:	40013c00 	.word	0x40013c00

080288c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80288c0:	b480      	push	{r7}
 80288c2:	b085      	sub	sp, #20
 80288c4:	af00      	add	r7, sp, #0
 80288c6:	6078      	str	r0, [r7, #4]
 80288c8:	460b      	mov	r3, r1
 80288ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80288cc:	687b      	ldr	r3, [r7, #4]
 80288ce:	691a      	ldr	r2, [r3, #16]
 80288d0:	887b      	ldrh	r3, [r7, #2]
 80288d2:	4013      	ands	r3, r2
 80288d4:	2b00      	cmp	r3, #0
 80288d6:	d002      	beq.n	80288de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80288d8:	2301      	movs	r3, #1
 80288da:	73fb      	strb	r3, [r7, #15]
 80288dc:	e001      	b.n	80288e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80288de:	2300      	movs	r3, #0
 80288e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80288e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80288e4:	4618      	mov	r0, r3
 80288e6:	3714      	adds	r7, #20
 80288e8:	46bd      	mov	sp, r7
 80288ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80288ee:	4770      	bx	lr

080288f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80288f0:	b480      	push	{r7}
 80288f2:	b083      	sub	sp, #12
 80288f4:	af00      	add	r7, sp, #0
 80288f6:	6078      	str	r0, [r7, #4]
 80288f8:	460b      	mov	r3, r1
 80288fa:	807b      	strh	r3, [r7, #2]
 80288fc:	4613      	mov	r3, r2
 80288fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8028900:	787b      	ldrb	r3, [r7, #1]
 8028902:	2b00      	cmp	r3, #0
 8028904:	d003      	beq.n	802890e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8028906:	887a      	ldrh	r2, [r7, #2]
 8028908:	687b      	ldr	r3, [r7, #4]
 802890a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 802890c:	e003      	b.n	8028916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802890e:	887b      	ldrh	r3, [r7, #2]
 8028910:	041a      	lsls	r2, r3, #16
 8028912:	687b      	ldr	r3, [r7, #4]
 8028914:	619a      	str	r2, [r3, #24]
}
 8028916:	bf00      	nop
 8028918:	370c      	adds	r7, #12
 802891a:	46bd      	mov	sp, r7
 802891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028920:	4770      	bx	lr
	...

08028924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8028924:	b580      	push	{r7, lr}
 8028926:	b084      	sub	sp, #16
 8028928:	af00      	add	r7, sp, #0
 802892a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802892c:	687b      	ldr	r3, [r7, #4]
 802892e:	2b00      	cmp	r3, #0
 8028930:	d101      	bne.n	8028936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8028932:	2301      	movs	r3, #1
 8028934:	e11f      	b.n	8028b76 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8028936:	687b      	ldr	r3, [r7, #4]
 8028938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802893c:	b2db      	uxtb	r3, r3
 802893e:	2b00      	cmp	r3, #0
 8028940:	d106      	bne.n	8028950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8028942:	687b      	ldr	r3, [r7, #4]
 8028944:	2200      	movs	r2, #0
 8028946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 802894a:	6878      	ldr	r0, [r7, #4]
 802894c:	f7fd fbe6 	bl	802611c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8028950:	687b      	ldr	r3, [r7, #4]
 8028952:	2224      	movs	r2, #36	; 0x24
 8028954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8028958:	687b      	ldr	r3, [r7, #4]
 802895a:	681b      	ldr	r3, [r3, #0]
 802895c:	681a      	ldr	r2, [r3, #0]
 802895e:	687b      	ldr	r3, [r7, #4]
 8028960:	681b      	ldr	r3, [r3, #0]
 8028962:	f022 0201 	bic.w	r2, r2, #1
 8028966:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8028968:	687b      	ldr	r3, [r7, #4]
 802896a:	681b      	ldr	r3, [r3, #0]
 802896c:	681a      	ldr	r2, [r3, #0]
 802896e:	687b      	ldr	r3, [r7, #4]
 8028970:	681b      	ldr	r3, [r3, #0]
 8028972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8028976:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8028978:	687b      	ldr	r3, [r7, #4]
 802897a:	681b      	ldr	r3, [r3, #0]
 802897c:	681a      	ldr	r2, [r3, #0]
 802897e:	687b      	ldr	r3, [r7, #4]
 8028980:	681b      	ldr	r3, [r3, #0]
 8028982:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8028986:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8028988:	f000 fd18 	bl	80293bc <HAL_RCC_GetPCLK1Freq>
 802898c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 802898e:	687b      	ldr	r3, [r7, #4]
 8028990:	685b      	ldr	r3, [r3, #4]
 8028992:	4a7b      	ldr	r2, [pc, #492]	; (8028b80 <HAL_I2C_Init+0x25c>)
 8028994:	4293      	cmp	r3, r2
 8028996:	d807      	bhi.n	80289a8 <HAL_I2C_Init+0x84>
 8028998:	68fb      	ldr	r3, [r7, #12]
 802899a:	4a7a      	ldr	r2, [pc, #488]	; (8028b84 <HAL_I2C_Init+0x260>)
 802899c:	4293      	cmp	r3, r2
 802899e:	bf94      	ite	ls
 80289a0:	2301      	movls	r3, #1
 80289a2:	2300      	movhi	r3, #0
 80289a4:	b2db      	uxtb	r3, r3
 80289a6:	e006      	b.n	80289b6 <HAL_I2C_Init+0x92>
 80289a8:	68fb      	ldr	r3, [r7, #12]
 80289aa:	4a77      	ldr	r2, [pc, #476]	; (8028b88 <HAL_I2C_Init+0x264>)
 80289ac:	4293      	cmp	r3, r2
 80289ae:	bf94      	ite	ls
 80289b0:	2301      	movls	r3, #1
 80289b2:	2300      	movhi	r3, #0
 80289b4:	b2db      	uxtb	r3, r3
 80289b6:	2b00      	cmp	r3, #0
 80289b8:	d001      	beq.n	80289be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80289ba:	2301      	movs	r3, #1
 80289bc:	e0db      	b.n	8028b76 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80289be:	68fb      	ldr	r3, [r7, #12]
 80289c0:	4a72      	ldr	r2, [pc, #456]	; (8028b8c <HAL_I2C_Init+0x268>)
 80289c2:	fba2 2303 	umull	r2, r3, r2, r3
 80289c6:	0c9b      	lsrs	r3, r3, #18
 80289c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80289ca:	687b      	ldr	r3, [r7, #4]
 80289cc:	681b      	ldr	r3, [r3, #0]
 80289ce:	685b      	ldr	r3, [r3, #4]
 80289d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80289d4:	687b      	ldr	r3, [r7, #4]
 80289d6:	681b      	ldr	r3, [r3, #0]
 80289d8:	68ba      	ldr	r2, [r7, #8]
 80289da:	430a      	orrs	r2, r1
 80289dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80289de:	687b      	ldr	r3, [r7, #4]
 80289e0:	681b      	ldr	r3, [r3, #0]
 80289e2:	6a1b      	ldr	r3, [r3, #32]
 80289e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80289e8:	687b      	ldr	r3, [r7, #4]
 80289ea:	685b      	ldr	r3, [r3, #4]
 80289ec:	4a64      	ldr	r2, [pc, #400]	; (8028b80 <HAL_I2C_Init+0x25c>)
 80289ee:	4293      	cmp	r3, r2
 80289f0:	d802      	bhi.n	80289f8 <HAL_I2C_Init+0xd4>
 80289f2:	68bb      	ldr	r3, [r7, #8]
 80289f4:	3301      	adds	r3, #1
 80289f6:	e009      	b.n	8028a0c <HAL_I2C_Init+0xe8>
 80289f8:	68bb      	ldr	r3, [r7, #8]
 80289fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80289fe:	fb02 f303 	mul.w	r3, r2, r3
 8028a02:	4a63      	ldr	r2, [pc, #396]	; (8028b90 <HAL_I2C_Init+0x26c>)
 8028a04:	fba2 2303 	umull	r2, r3, r2, r3
 8028a08:	099b      	lsrs	r3, r3, #6
 8028a0a:	3301      	adds	r3, #1
 8028a0c:	687a      	ldr	r2, [r7, #4]
 8028a0e:	6812      	ldr	r2, [r2, #0]
 8028a10:	430b      	orrs	r3, r1
 8028a12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8028a14:	687b      	ldr	r3, [r7, #4]
 8028a16:	681b      	ldr	r3, [r3, #0]
 8028a18:	69db      	ldr	r3, [r3, #28]
 8028a1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8028a1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8028a22:	687b      	ldr	r3, [r7, #4]
 8028a24:	685b      	ldr	r3, [r3, #4]
 8028a26:	4956      	ldr	r1, [pc, #344]	; (8028b80 <HAL_I2C_Init+0x25c>)
 8028a28:	428b      	cmp	r3, r1
 8028a2a:	d80d      	bhi.n	8028a48 <HAL_I2C_Init+0x124>
 8028a2c:	68fb      	ldr	r3, [r7, #12]
 8028a2e:	1e59      	subs	r1, r3, #1
 8028a30:	687b      	ldr	r3, [r7, #4]
 8028a32:	685b      	ldr	r3, [r3, #4]
 8028a34:	005b      	lsls	r3, r3, #1
 8028a36:	fbb1 f3f3 	udiv	r3, r1, r3
 8028a3a:	3301      	adds	r3, #1
 8028a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028a40:	2b04      	cmp	r3, #4
 8028a42:	bf38      	it	cc
 8028a44:	2304      	movcc	r3, #4
 8028a46:	e04f      	b.n	8028ae8 <HAL_I2C_Init+0x1c4>
 8028a48:	687b      	ldr	r3, [r7, #4]
 8028a4a:	689b      	ldr	r3, [r3, #8]
 8028a4c:	2b00      	cmp	r3, #0
 8028a4e:	d111      	bne.n	8028a74 <HAL_I2C_Init+0x150>
 8028a50:	68fb      	ldr	r3, [r7, #12]
 8028a52:	1e58      	subs	r0, r3, #1
 8028a54:	687b      	ldr	r3, [r7, #4]
 8028a56:	6859      	ldr	r1, [r3, #4]
 8028a58:	460b      	mov	r3, r1
 8028a5a:	005b      	lsls	r3, r3, #1
 8028a5c:	440b      	add	r3, r1
 8028a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8028a62:	3301      	adds	r3, #1
 8028a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028a68:	2b00      	cmp	r3, #0
 8028a6a:	bf0c      	ite	eq
 8028a6c:	2301      	moveq	r3, #1
 8028a6e:	2300      	movne	r3, #0
 8028a70:	b2db      	uxtb	r3, r3
 8028a72:	e012      	b.n	8028a9a <HAL_I2C_Init+0x176>
 8028a74:	68fb      	ldr	r3, [r7, #12]
 8028a76:	1e58      	subs	r0, r3, #1
 8028a78:	687b      	ldr	r3, [r7, #4]
 8028a7a:	6859      	ldr	r1, [r3, #4]
 8028a7c:	460b      	mov	r3, r1
 8028a7e:	009b      	lsls	r3, r3, #2
 8028a80:	440b      	add	r3, r1
 8028a82:	0099      	lsls	r1, r3, #2
 8028a84:	440b      	add	r3, r1
 8028a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8028a8a:	3301      	adds	r3, #1
 8028a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028a90:	2b00      	cmp	r3, #0
 8028a92:	bf0c      	ite	eq
 8028a94:	2301      	moveq	r3, #1
 8028a96:	2300      	movne	r3, #0
 8028a98:	b2db      	uxtb	r3, r3
 8028a9a:	2b00      	cmp	r3, #0
 8028a9c:	d001      	beq.n	8028aa2 <HAL_I2C_Init+0x17e>
 8028a9e:	2301      	movs	r3, #1
 8028aa0:	e022      	b.n	8028ae8 <HAL_I2C_Init+0x1c4>
 8028aa2:	687b      	ldr	r3, [r7, #4]
 8028aa4:	689b      	ldr	r3, [r3, #8]
 8028aa6:	2b00      	cmp	r3, #0
 8028aa8:	d10e      	bne.n	8028ac8 <HAL_I2C_Init+0x1a4>
 8028aaa:	68fb      	ldr	r3, [r7, #12]
 8028aac:	1e58      	subs	r0, r3, #1
 8028aae:	687b      	ldr	r3, [r7, #4]
 8028ab0:	6859      	ldr	r1, [r3, #4]
 8028ab2:	460b      	mov	r3, r1
 8028ab4:	005b      	lsls	r3, r3, #1
 8028ab6:	440b      	add	r3, r1
 8028ab8:	fbb0 f3f3 	udiv	r3, r0, r3
 8028abc:	3301      	adds	r3, #1
 8028abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8028ac6:	e00f      	b.n	8028ae8 <HAL_I2C_Init+0x1c4>
 8028ac8:	68fb      	ldr	r3, [r7, #12]
 8028aca:	1e58      	subs	r0, r3, #1
 8028acc:	687b      	ldr	r3, [r7, #4]
 8028ace:	6859      	ldr	r1, [r3, #4]
 8028ad0:	460b      	mov	r3, r1
 8028ad2:	009b      	lsls	r3, r3, #2
 8028ad4:	440b      	add	r3, r1
 8028ad6:	0099      	lsls	r1, r3, #2
 8028ad8:	440b      	add	r3, r1
 8028ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8028ade:	3301      	adds	r3, #1
 8028ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028ae4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8028ae8:	6879      	ldr	r1, [r7, #4]
 8028aea:	6809      	ldr	r1, [r1, #0]
 8028aec:	4313      	orrs	r3, r2
 8028aee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8028af0:	687b      	ldr	r3, [r7, #4]
 8028af2:	681b      	ldr	r3, [r3, #0]
 8028af4:	681b      	ldr	r3, [r3, #0]
 8028af6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8028afa:	687b      	ldr	r3, [r7, #4]
 8028afc:	69da      	ldr	r2, [r3, #28]
 8028afe:	687b      	ldr	r3, [r7, #4]
 8028b00:	6a1b      	ldr	r3, [r3, #32]
 8028b02:	431a      	orrs	r2, r3
 8028b04:	687b      	ldr	r3, [r7, #4]
 8028b06:	681b      	ldr	r3, [r3, #0]
 8028b08:	430a      	orrs	r2, r1
 8028b0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8028b0c:	687b      	ldr	r3, [r7, #4]
 8028b0e:	681b      	ldr	r3, [r3, #0]
 8028b10:	689b      	ldr	r3, [r3, #8]
 8028b12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8028b16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8028b1a:	687a      	ldr	r2, [r7, #4]
 8028b1c:	6911      	ldr	r1, [r2, #16]
 8028b1e:	687a      	ldr	r2, [r7, #4]
 8028b20:	68d2      	ldr	r2, [r2, #12]
 8028b22:	4311      	orrs	r1, r2
 8028b24:	687a      	ldr	r2, [r7, #4]
 8028b26:	6812      	ldr	r2, [r2, #0]
 8028b28:	430b      	orrs	r3, r1
 8028b2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8028b2c:	687b      	ldr	r3, [r7, #4]
 8028b2e:	681b      	ldr	r3, [r3, #0]
 8028b30:	68db      	ldr	r3, [r3, #12]
 8028b32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8028b36:	687b      	ldr	r3, [r7, #4]
 8028b38:	695a      	ldr	r2, [r3, #20]
 8028b3a:	687b      	ldr	r3, [r7, #4]
 8028b3c:	699b      	ldr	r3, [r3, #24]
 8028b3e:	431a      	orrs	r2, r3
 8028b40:	687b      	ldr	r3, [r7, #4]
 8028b42:	681b      	ldr	r3, [r3, #0]
 8028b44:	430a      	orrs	r2, r1
 8028b46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8028b48:	687b      	ldr	r3, [r7, #4]
 8028b4a:	681b      	ldr	r3, [r3, #0]
 8028b4c:	681a      	ldr	r2, [r3, #0]
 8028b4e:	687b      	ldr	r3, [r7, #4]
 8028b50:	681b      	ldr	r3, [r3, #0]
 8028b52:	f042 0201 	orr.w	r2, r2, #1
 8028b56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8028b58:	687b      	ldr	r3, [r7, #4]
 8028b5a:	2200      	movs	r2, #0
 8028b5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8028b5e:	687b      	ldr	r3, [r7, #4]
 8028b60:	2220      	movs	r2, #32
 8028b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8028b66:	687b      	ldr	r3, [r7, #4]
 8028b68:	2200      	movs	r2, #0
 8028b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8028b6c:	687b      	ldr	r3, [r7, #4]
 8028b6e:	2200      	movs	r2, #0
 8028b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8028b74:	2300      	movs	r3, #0
}
 8028b76:	4618      	mov	r0, r3
 8028b78:	3710      	adds	r7, #16
 8028b7a:	46bd      	mov	sp, r7
 8028b7c:	bd80      	pop	{r7, pc}
 8028b7e:	bf00      	nop
 8028b80:	000186a0 	.word	0x000186a0
 8028b84:	001e847f 	.word	0x001e847f
 8028b88:	003d08ff 	.word	0x003d08ff
 8028b8c:	431bde83 	.word	0x431bde83
 8028b90:	10624dd3 	.word	0x10624dd3

08028b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8028b94:	b580      	push	{r7, lr}
 8028b96:	b086      	sub	sp, #24
 8028b98:	af00      	add	r7, sp, #0
 8028b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8028b9c:	687b      	ldr	r3, [r7, #4]
 8028b9e:	2b00      	cmp	r3, #0
 8028ba0:	d101      	bne.n	8028ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8028ba2:	2301      	movs	r3, #1
 8028ba4:	e25b      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8028ba6:	687b      	ldr	r3, [r7, #4]
 8028ba8:	681b      	ldr	r3, [r3, #0]
 8028baa:	f003 0301 	and.w	r3, r3, #1
 8028bae:	2b00      	cmp	r3, #0
 8028bb0:	d075      	beq.n	8028c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8028bb2:	4ba3      	ldr	r3, [pc, #652]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028bb4:	689b      	ldr	r3, [r3, #8]
 8028bb6:	f003 030c 	and.w	r3, r3, #12
 8028bba:	2b04      	cmp	r3, #4
 8028bbc:	d00c      	beq.n	8028bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8028bbe:	4ba0      	ldr	r3, [pc, #640]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028bc0:	689b      	ldr	r3, [r3, #8]
 8028bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8028bc6:	2b08      	cmp	r3, #8
 8028bc8:	d112      	bne.n	8028bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8028bca:	4b9d      	ldr	r3, [pc, #628]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028bcc:	685b      	ldr	r3, [r3, #4]
 8028bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8028bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8028bd6:	d10b      	bne.n	8028bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8028bd8:	4b99      	ldr	r3, [pc, #612]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028bda:	681b      	ldr	r3, [r3, #0]
 8028bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028be0:	2b00      	cmp	r3, #0
 8028be2:	d05b      	beq.n	8028c9c <HAL_RCC_OscConfig+0x108>
 8028be4:	687b      	ldr	r3, [r7, #4]
 8028be6:	685b      	ldr	r3, [r3, #4]
 8028be8:	2b00      	cmp	r3, #0
 8028bea:	d157      	bne.n	8028c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8028bec:	2301      	movs	r3, #1
 8028bee:	e236      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8028bf0:	687b      	ldr	r3, [r7, #4]
 8028bf2:	685b      	ldr	r3, [r3, #4]
 8028bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8028bf8:	d106      	bne.n	8028c08 <HAL_RCC_OscConfig+0x74>
 8028bfa:	4b91      	ldr	r3, [pc, #580]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028bfc:	681b      	ldr	r3, [r3, #0]
 8028bfe:	4a90      	ldr	r2, [pc, #576]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028c04:	6013      	str	r3, [r2, #0]
 8028c06:	e01d      	b.n	8028c44 <HAL_RCC_OscConfig+0xb0>
 8028c08:	687b      	ldr	r3, [r7, #4]
 8028c0a:	685b      	ldr	r3, [r3, #4]
 8028c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8028c10:	d10c      	bne.n	8028c2c <HAL_RCC_OscConfig+0x98>
 8028c12:	4b8b      	ldr	r3, [pc, #556]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028c14:	681b      	ldr	r3, [r3, #0]
 8028c16:	4a8a      	ldr	r2, [pc, #552]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8028c1c:	6013      	str	r3, [r2, #0]
 8028c1e:	4b88      	ldr	r3, [pc, #544]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028c20:	681b      	ldr	r3, [r3, #0]
 8028c22:	4a87      	ldr	r2, [pc, #540]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028c28:	6013      	str	r3, [r2, #0]
 8028c2a:	e00b      	b.n	8028c44 <HAL_RCC_OscConfig+0xb0>
 8028c2c:	4b84      	ldr	r3, [pc, #528]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028c2e:	681b      	ldr	r3, [r3, #0]
 8028c30:	4a83      	ldr	r2, [pc, #524]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8028c36:	6013      	str	r3, [r2, #0]
 8028c38:	4b81      	ldr	r3, [pc, #516]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028c3a:	681b      	ldr	r3, [r3, #0]
 8028c3c:	4a80      	ldr	r2, [pc, #512]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8028c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8028c44:	687b      	ldr	r3, [r7, #4]
 8028c46:	685b      	ldr	r3, [r3, #4]
 8028c48:	2b00      	cmp	r3, #0
 8028c4a:	d013      	beq.n	8028c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028c4c:	f7fe f926 	bl	8026e9c <HAL_GetTick>
 8028c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8028c52:	e008      	b.n	8028c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8028c54:	f7fe f922 	bl	8026e9c <HAL_GetTick>
 8028c58:	4602      	mov	r2, r0
 8028c5a:	693b      	ldr	r3, [r7, #16]
 8028c5c:	1ad3      	subs	r3, r2, r3
 8028c5e:	2b64      	cmp	r3, #100	; 0x64
 8028c60:	d901      	bls.n	8028c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8028c62:	2303      	movs	r3, #3
 8028c64:	e1fb      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8028c66:	4b76      	ldr	r3, [pc, #472]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028c68:	681b      	ldr	r3, [r3, #0]
 8028c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028c6e:	2b00      	cmp	r3, #0
 8028c70:	d0f0      	beq.n	8028c54 <HAL_RCC_OscConfig+0xc0>
 8028c72:	e014      	b.n	8028c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028c74:	f7fe f912 	bl	8026e9c <HAL_GetTick>
 8028c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8028c7a:	e008      	b.n	8028c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8028c7c:	f7fe f90e 	bl	8026e9c <HAL_GetTick>
 8028c80:	4602      	mov	r2, r0
 8028c82:	693b      	ldr	r3, [r7, #16]
 8028c84:	1ad3      	subs	r3, r2, r3
 8028c86:	2b64      	cmp	r3, #100	; 0x64
 8028c88:	d901      	bls.n	8028c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8028c8a:	2303      	movs	r3, #3
 8028c8c:	e1e7      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8028c8e:	4b6c      	ldr	r3, [pc, #432]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028c90:	681b      	ldr	r3, [r3, #0]
 8028c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028c96:	2b00      	cmp	r3, #0
 8028c98:	d1f0      	bne.n	8028c7c <HAL_RCC_OscConfig+0xe8>
 8028c9a:	e000      	b.n	8028c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8028c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8028c9e:	687b      	ldr	r3, [r7, #4]
 8028ca0:	681b      	ldr	r3, [r3, #0]
 8028ca2:	f003 0302 	and.w	r3, r3, #2
 8028ca6:	2b00      	cmp	r3, #0
 8028ca8:	d063      	beq.n	8028d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8028caa:	4b65      	ldr	r3, [pc, #404]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028cac:	689b      	ldr	r3, [r3, #8]
 8028cae:	f003 030c 	and.w	r3, r3, #12
 8028cb2:	2b00      	cmp	r3, #0
 8028cb4:	d00b      	beq.n	8028cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8028cb6:	4b62      	ldr	r3, [pc, #392]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028cb8:	689b      	ldr	r3, [r3, #8]
 8028cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8028cbe:	2b08      	cmp	r3, #8
 8028cc0:	d11c      	bne.n	8028cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8028cc2:	4b5f      	ldr	r3, [pc, #380]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028cc4:	685b      	ldr	r3, [r3, #4]
 8028cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8028cca:	2b00      	cmp	r3, #0
 8028ccc:	d116      	bne.n	8028cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8028cce:	4b5c      	ldr	r3, [pc, #368]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028cd0:	681b      	ldr	r3, [r3, #0]
 8028cd2:	f003 0302 	and.w	r3, r3, #2
 8028cd6:	2b00      	cmp	r3, #0
 8028cd8:	d005      	beq.n	8028ce6 <HAL_RCC_OscConfig+0x152>
 8028cda:	687b      	ldr	r3, [r7, #4]
 8028cdc:	68db      	ldr	r3, [r3, #12]
 8028cde:	2b01      	cmp	r3, #1
 8028ce0:	d001      	beq.n	8028ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8028ce2:	2301      	movs	r3, #1
 8028ce4:	e1bb      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8028ce6:	4b56      	ldr	r3, [pc, #344]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028ce8:	681b      	ldr	r3, [r3, #0]
 8028cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8028cee:	687b      	ldr	r3, [r7, #4]
 8028cf0:	691b      	ldr	r3, [r3, #16]
 8028cf2:	00db      	lsls	r3, r3, #3
 8028cf4:	4952      	ldr	r1, [pc, #328]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028cf6:	4313      	orrs	r3, r2
 8028cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8028cfa:	e03a      	b.n	8028d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8028cfc:	687b      	ldr	r3, [r7, #4]
 8028cfe:	68db      	ldr	r3, [r3, #12]
 8028d00:	2b00      	cmp	r3, #0
 8028d02:	d020      	beq.n	8028d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8028d04:	4b4f      	ldr	r3, [pc, #316]	; (8028e44 <HAL_RCC_OscConfig+0x2b0>)
 8028d06:	2201      	movs	r2, #1
 8028d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028d0a:	f7fe f8c7 	bl	8026e9c <HAL_GetTick>
 8028d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8028d10:	e008      	b.n	8028d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8028d12:	f7fe f8c3 	bl	8026e9c <HAL_GetTick>
 8028d16:	4602      	mov	r2, r0
 8028d18:	693b      	ldr	r3, [r7, #16]
 8028d1a:	1ad3      	subs	r3, r2, r3
 8028d1c:	2b02      	cmp	r3, #2
 8028d1e:	d901      	bls.n	8028d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8028d20:	2303      	movs	r3, #3
 8028d22:	e19c      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8028d24:	4b46      	ldr	r3, [pc, #280]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028d26:	681b      	ldr	r3, [r3, #0]
 8028d28:	f003 0302 	and.w	r3, r3, #2
 8028d2c:	2b00      	cmp	r3, #0
 8028d2e:	d0f0      	beq.n	8028d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8028d30:	4b43      	ldr	r3, [pc, #268]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028d32:	681b      	ldr	r3, [r3, #0]
 8028d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8028d38:	687b      	ldr	r3, [r7, #4]
 8028d3a:	691b      	ldr	r3, [r3, #16]
 8028d3c:	00db      	lsls	r3, r3, #3
 8028d3e:	4940      	ldr	r1, [pc, #256]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028d40:	4313      	orrs	r3, r2
 8028d42:	600b      	str	r3, [r1, #0]
 8028d44:	e015      	b.n	8028d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8028d46:	4b3f      	ldr	r3, [pc, #252]	; (8028e44 <HAL_RCC_OscConfig+0x2b0>)
 8028d48:	2200      	movs	r2, #0
 8028d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028d4c:	f7fe f8a6 	bl	8026e9c <HAL_GetTick>
 8028d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8028d52:	e008      	b.n	8028d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8028d54:	f7fe f8a2 	bl	8026e9c <HAL_GetTick>
 8028d58:	4602      	mov	r2, r0
 8028d5a:	693b      	ldr	r3, [r7, #16]
 8028d5c:	1ad3      	subs	r3, r2, r3
 8028d5e:	2b02      	cmp	r3, #2
 8028d60:	d901      	bls.n	8028d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8028d62:	2303      	movs	r3, #3
 8028d64:	e17b      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8028d66:	4b36      	ldr	r3, [pc, #216]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028d68:	681b      	ldr	r3, [r3, #0]
 8028d6a:	f003 0302 	and.w	r3, r3, #2
 8028d6e:	2b00      	cmp	r3, #0
 8028d70:	d1f0      	bne.n	8028d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8028d72:	687b      	ldr	r3, [r7, #4]
 8028d74:	681b      	ldr	r3, [r3, #0]
 8028d76:	f003 0308 	and.w	r3, r3, #8
 8028d7a:	2b00      	cmp	r3, #0
 8028d7c:	d030      	beq.n	8028de0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8028d7e:	687b      	ldr	r3, [r7, #4]
 8028d80:	695b      	ldr	r3, [r3, #20]
 8028d82:	2b00      	cmp	r3, #0
 8028d84:	d016      	beq.n	8028db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8028d86:	4b30      	ldr	r3, [pc, #192]	; (8028e48 <HAL_RCC_OscConfig+0x2b4>)
 8028d88:	2201      	movs	r2, #1
 8028d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028d8c:	f7fe f886 	bl	8026e9c <HAL_GetTick>
 8028d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8028d92:	e008      	b.n	8028da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8028d94:	f7fe f882 	bl	8026e9c <HAL_GetTick>
 8028d98:	4602      	mov	r2, r0
 8028d9a:	693b      	ldr	r3, [r7, #16]
 8028d9c:	1ad3      	subs	r3, r2, r3
 8028d9e:	2b02      	cmp	r3, #2
 8028da0:	d901      	bls.n	8028da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8028da2:	2303      	movs	r3, #3
 8028da4:	e15b      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8028da6:	4b26      	ldr	r3, [pc, #152]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028daa:	f003 0302 	and.w	r3, r3, #2
 8028dae:	2b00      	cmp	r3, #0
 8028db0:	d0f0      	beq.n	8028d94 <HAL_RCC_OscConfig+0x200>
 8028db2:	e015      	b.n	8028de0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8028db4:	4b24      	ldr	r3, [pc, #144]	; (8028e48 <HAL_RCC_OscConfig+0x2b4>)
 8028db6:	2200      	movs	r2, #0
 8028db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8028dba:	f7fe f86f 	bl	8026e9c <HAL_GetTick>
 8028dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8028dc0:	e008      	b.n	8028dd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8028dc2:	f7fe f86b 	bl	8026e9c <HAL_GetTick>
 8028dc6:	4602      	mov	r2, r0
 8028dc8:	693b      	ldr	r3, [r7, #16]
 8028dca:	1ad3      	subs	r3, r2, r3
 8028dcc:	2b02      	cmp	r3, #2
 8028dce:	d901      	bls.n	8028dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8028dd0:	2303      	movs	r3, #3
 8028dd2:	e144      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8028dd4:	4b1a      	ldr	r3, [pc, #104]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028dd8:	f003 0302 	and.w	r3, r3, #2
 8028ddc:	2b00      	cmp	r3, #0
 8028dde:	d1f0      	bne.n	8028dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8028de0:	687b      	ldr	r3, [r7, #4]
 8028de2:	681b      	ldr	r3, [r3, #0]
 8028de4:	f003 0304 	and.w	r3, r3, #4
 8028de8:	2b00      	cmp	r3, #0
 8028dea:	f000 80a0 	beq.w	8028f2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8028dee:	2300      	movs	r3, #0
 8028df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8028df2:	4b13      	ldr	r3, [pc, #76]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028dfa:	2b00      	cmp	r3, #0
 8028dfc:	d10f      	bne.n	8028e1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8028dfe:	2300      	movs	r3, #0
 8028e00:	60bb      	str	r3, [r7, #8]
 8028e02:	4b0f      	ldr	r3, [pc, #60]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028e06:	4a0e      	ldr	r2, [pc, #56]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8028e0e:	4b0c      	ldr	r3, [pc, #48]	; (8028e40 <HAL_RCC_OscConfig+0x2ac>)
 8028e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028e16:	60bb      	str	r3, [r7, #8]
 8028e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8028e1a:	2301      	movs	r3, #1
 8028e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028e1e:	4b0b      	ldr	r3, [pc, #44]	; (8028e4c <HAL_RCC_OscConfig+0x2b8>)
 8028e20:	681b      	ldr	r3, [r3, #0]
 8028e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028e26:	2b00      	cmp	r3, #0
 8028e28:	d121      	bne.n	8028e6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8028e2a:	4b08      	ldr	r3, [pc, #32]	; (8028e4c <HAL_RCC_OscConfig+0x2b8>)
 8028e2c:	681b      	ldr	r3, [r3, #0]
 8028e2e:	4a07      	ldr	r2, [pc, #28]	; (8028e4c <HAL_RCC_OscConfig+0x2b8>)
 8028e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8028e36:	f7fe f831 	bl	8026e9c <HAL_GetTick>
 8028e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028e3c:	e011      	b.n	8028e62 <HAL_RCC_OscConfig+0x2ce>
 8028e3e:	bf00      	nop
 8028e40:	40023800 	.word	0x40023800
 8028e44:	42470000 	.word	0x42470000
 8028e48:	42470e80 	.word	0x42470e80
 8028e4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8028e50:	f7fe f824 	bl	8026e9c <HAL_GetTick>
 8028e54:	4602      	mov	r2, r0
 8028e56:	693b      	ldr	r3, [r7, #16]
 8028e58:	1ad3      	subs	r3, r2, r3
 8028e5a:	2b02      	cmp	r3, #2
 8028e5c:	d901      	bls.n	8028e62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8028e5e:	2303      	movs	r3, #3
 8028e60:	e0fd      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028e62:	4b81      	ldr	r3, [pc, #516]	; (8029068 <HAL_RCC_OscConfig+0x4d4>)
 8028e64:	681b      	ldr	r3, [r3, #0]
 8028e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028e6a:	2b00      	cmp	r3, #0
 8028e6c:	d0f0      	beq.n	8028e50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8028e6e:	687b      	ldr	r3, [r7, #4]
 8028e70:	689b      	ldr	r3, [r3, #8]
 8028e72:	2b01      	cmp	r3, #1
 8028e74:	d106      	bne.n	8028e84 <HAL_RCC_OscConfig+0x2f0>
 8028e76:	4b7d      	ldr	r3, [pc, #500]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028e7a:	4a7c      	ldr	r2, [pc, #496]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028e7c:	f043 0301 	orr.w	r3, r3, #1
 8028e80:	6713      	str	r3, [r2, #112]	; 0x70
 8028e82:	e01c      	b.n	8028ebe <HAL_RCC_OscConfig+0x32a>
 8028e84:	687b      	ldr	r3, [r7, #4]
 8028e86:	689b      	ldr	r3, [r3, #8]
 8028e88:	2b05      	cmp	r3, #5
 8028e8a:	d10c      	bne.n	8028ea6 <HAL_RCC_OscConfig+0x312>
 8028e8c:	4b77      	ldr	r3, [pc, #476]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028e90:	4a76      	ldr	r2, [pc, #472]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028e92:	f043 0304 	orr.w	r3, r3, #4
 8028e96:	6713      	str	r3, [r2, #112]	; 0x70
 8028e98:	4b74      	ldr	r3, [pc, #464]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028e9c:	4a73      	ldr	r2, [pc, #460]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028e9e:	f043 0301 	orr.w	r3, r3, #1
 8028ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8028ea4:	e00b      	b.n	8028ebe <HAL_RCC_OscConfig+0x32a>
 8028ea6:	4b71      	ldr	r3, [pc, #452]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028eaa:	4a70      	ldr	r2, [pc, #448]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028eac:	f023 0301 	bic.w	r3, r3, #1
 8028eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8028eb2:	4b6e      	ldr	r3, [pc, #440]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028eb6:	4a6d      	ldr	r2, [pc, #436]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028eb8:	f023 0304 	bic.w	r3, r3, #4
 8028ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8028ebe:	687b      	ldr	r3, [r7, #4]
 8028ec0:	689b      	ldr	r3, [r3, #8]
 8028ec2:	2b00      	cmp	r3, #0
 8028ec4:	d015      	beq.n	8028ef2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028ec6:	f7fd ffe9 	bl	8026e9c <HAL_GetTick>
 8028eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028ecc:	e00a      	b.n	8028ee4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8028ece:	f7fd ffe5 	bl	8026e9c <HAL_GetTick>
 8028ed2:	4602      	mov	r2, r0
 8028ed4:	693b      	ldr	r3, [r7, #16]
 8028ed6:	1ad3      	subs	r3, r2, r3
 8028ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8028edc:	4293      	cmp	r3, r2
 8028ede:	d901      	bls.n	8028ee4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8028ee0:	2303      	movs	r3, #3
 8028ee2:	e0bc      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028ee4:	4b61      	ldr	r3, [pc, #388]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028ee8:	f003 0302 	and.w	r3, r3, #2
 8028eec:	2b00      	cmp	r3, #0
 8028eee:	d0ee      	beq.n	8028ece <HAL_RCC_OscConfig+0x33a>
 8028ef0:	e014      	b.n	8028f1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8028ef2:	f7fd ffd3 	bl	8026e9c <HAL_GetTick>
 8028ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8028ef8:	e00a      	b.n	8028f10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8028efa:	f7fd ffcf 	bl	8026e9c <HAL_GetTick>
 8028efe:	4602      	mov	r2, r0
 8028f00:	693b      	ldr	r3, [r7, #16]
 8028f02:	1ad3      	subs	r3, r2, r3
 8028f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8028f08:	4293      	cmp	r3, r2
 8028f0a:	d901      	bls.n	8028f10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8028f0c:	2303      	movs	r3, #3
 8028f0e:	e0a6      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8028f10:	4b56      	ldr	r3, [pc, #344]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028f14:	f003 0302 	and.w	r3, r3, #2
 8028f18:	2b00      	cmp	r3, #0
 8028f1a:	d1ee      	bne.n	8028efa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8028f1c:	7dfb      	ldrb	r3, [r7, #23]
 8028f1e:	2b01      	cmp	r3, #1
 8028f20:	d105      	bne.n	8028f2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8028f22:	4b52      	ldr	r3, [pc, #328]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028f26:	4a51      	ldr	r2, [pc, #324]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8028f2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8028f2e:	687b      	ldr	r3, [r7, #4]
 8028f30:	699b      	ldr	r3, [r3, #24]
 8028f32:	2b00      	cmp	r3, #0
 8028f34:	f000 8092 	beq.w	802905c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8028f38:	4b4c      	ldr	r3, [pc, #304]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028f3a:	689b      	ldr	r3, [r3, #8]
 8028f3c:	f003 030c 	and.w	r3, r3, #12
 8028f40:	2b08      	cmp	r3, #8
 8028f42:	d05c      	beq.n	8028ffe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8028f44:	687b      	ldr	r3, [r7, #4]
 8028f46:	699b      	ldr	r3, [r3, #24]
 8028f48:	2b02      	cmp	r3, #2
 8028f4a:	d141      	bne.n	8028fd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8028f4c:	4b48      	ldr	r3, [pc, #288]	; (8029070 <HAL_RCC_OscConfig+0x4dc>)
 8028f4e:	2200      	movs	r2, #0
 8028f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028f52:	f7fd ffa3 	bl	8026e9c <HAL_GetTick>
 8028f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028f58:	e008      	b.n	8028f6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028f5a:	f7fd ff9f 	bl	8026e9c <HAL_GetTick>
 8028f5e:	4602      	mov	r2, r0
 8028f60:	693b      	ldr	r3, [r7, #16]
 8028f62:	1ad3      	subs	r3, r2, r3
 8028f64:	2b02      	cmp	r3, #2
 8028f66:	d901      	bls.n	8028f6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8028f68:	2303      	movs	r3, #3
 8028f6a:	e078      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028f6c:	4b3f      	ldr	r3, [pc, #252]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028f6e:	681b      	ldr	r3, [r3, #0]
 8028f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028f74:	2b00      	cmp	r3, #0
 8028f76:	d1f0      	bne.n	8028f5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8028f78:	687b      	ldr	r3, [r7, #4]
 8028f7a:	69da      	ldr	r2, [r3, #28]
 8028f7c:	687b      	ldr	r3, [r7, #4]
 8028f7e:	6a1b      	ldr	r3, [r3, #32]
 8028f80:	431a      	orrs	r2, r3
 8028f82:	687b      	ldr	r3, [r7, #4]
 8028f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028f86:	019b      	lsls	r3, r3, #6
 8028f88:	431a      	orrs	r2, r3
 8028f8a:	687b      	ldr	r3, [r7, #4]
 8028f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028f8e:	085b      	lsrs	r3, r3, #1
 8028f90:	3b01      	subs	r3, #1
 8028f92:	041b      	lsls	r3, r3, #16
 8028f94:	431a      	orrs	r2, r3
 8028f96:	687b      	ldr	r3, [r7, #4]
 8028f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028f9a:	061b      	lsls	r3, r3, #24
 8028f9c:	4933      	ldr	r1, [pc, #204]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028f9e:	4313      	orrs	r3, r2
 8028fa0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8028fa2:	4b33      	ldr	r3, [pc, #204]	; (8029070 <HAL_RCC_OscConfig+0x4dc>)
 8028fa4:	2201      	movs	r2, #1
 8028fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028fa8:	f7fd ff78 	bl	8026e9c <HAL_GetTick>
 8028fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028fae:	e008      	b.n	8028fc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028fb0:	f7fd ff74 	bl	8026e9c <HAL_GetTick>
 8028fb4:	4602      	mov	r2, r0
 8028fb6:	693b      	ldr	r3, [r7, #16]
 8028fb8:	1ad3      	subs	r3, r2, r3
 8028fba:	2b02      	cmp	r3, #2
 8028fbc:	d901      	bls.n	8028fc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8028fbe:	2303      	movs	r3, #3
 8028fc0:	e04d      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028fc2:	4b2a      	ldr	r3, [pc, #168]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028fc4:	681b      	ldr	r3, [r3, #0]
 8028fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028fca:	2b00      	cmp	r3, #0
 8028fcc:	d0f0      	beq.n	8028fb0 <HAL_RCC_OscConfig+0x41c>
 8028fce:	e045      	b.n	802905c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8028fd0:	4b27      	ldr	r3, [pc, #156]	; (8029070 <HAL_RCC_OscConfig+0x4dc>)
 8028fd2:	2200      	movs	r2, #0
 8028fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028fd6:	f7fd ff61 	bl	8026e9c <HAL_GetTick>
 8028fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028fdc:	e008      	b.n	8028ff0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028fde:	f7fd ff5d 	bl	8026e9c <HAL_GetTick>
 8028fe2:	4602      	mov	r2, r0
 8028fe4:	693b      	ldr	r3, [r7, #16]
 8028fe6:	1ad3      	subs	r3, r2, r3
 8028fe8:	2b02      	cmp	r3, #2
 8028fea:	d901      	bls.n	8028ff0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8028fec:	2303      	movs	r3, #3
 8028fee:	e036      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028ff0:	4b1e      	ldr	r3, [pc, #120]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 8028ff2:	681b      	ldr	r3, [r3, #0]
 8028ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028ff8:	2b00      	cmp	r3, #0
 8028ffa:	d1f0      	bne.n	8028fde <HAL_RCC_OscConfig+0x44a>
 8028ffc:	e02e      	b.n	802905c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8028ffe:	687b      	ldr	r3, [r7, #4]
 8029000:	699b      	ldr	r3, [r3, #24]
 8029002:	2b01      	cmp	r3, #1
 8029004:	d101      	bne.n	802900a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8029006:	2301      	movs	r3, #1
 8029008:	e029      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802900a:	4b18      	ldr	r3, [pc, #96]	; (802906c <HAL_RCC_OscConfig+0x4d8>)
 802900c:	685b      	ldr	r3, [r3, #4]
 802900e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8029010:	68fb      	ldr	r3, [r7, #12]
 8029012:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8029016:	687b      	ldr	r3, [r7, #4]
 8029018:	69db      	ldr	r3, [r3, #28]
 802901a:	429a      	cmp	r2, r3
 802901c:	d11c      	bne.n	8029058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 802901e:	68fb      	ldr	r3, [r7, #12]
 8029020:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8029024:	687b      	ldr	r3, [r7, #4]
 8029026:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8029028:	429a      	cmp	r2, r3
 802902a:	d115      	bne.n	8029058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 802902c:	68fa      	ldr	r2, [r7, #12]
 802902e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8029032:	4013      	ands	r3, r2
 8029034:	687a      	ldr	r2, [r7, #4]
 8029036:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8029038:	4293      	cmp	r3, r2
 802903a:	d10d      	bne.n	8029058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 802903c:	68fb      	ldr	r3, [r7, #12]
 802903e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8029042:	687b      	ldr	r3, [r7, #4]
 8029044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8029046:	429a      	cmp	r2, r3
 8029048:	d106      	bne.n	8029058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 802904a:	68fb      	ldr	r3, [r7, #12]
 802904c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8029050:	687b      	ldr	r3, [r7, #4]
 8029052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8029054:	429a      	cmp	r2, r3
 8029056:	d001      	beq.n	802905c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8029058:	2301      	movs	r3, #1
 802905a:	e000      	b.n	802905e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 802905c:	2300      	movs	r3, #0
}
 802905e:	4618      	mov	r0, r3
 8029060:	3718      	adds	r7, #24
 8029062:	46bd      	mov	sp, r7
 8029064:	bd80      	pop	{r7, pc}
 8029066:	bf00      	nop
 8029068:	40007000 	.word	0x40007000
 802906c:	40023800 	.word	0x40023800
 8029070:	42470060 	.word	0x42470060

08029074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8029074:	b580      	push	{r7, lr}
 8029076:	b084      	sub	sp, #16
 8029078:	af00      	add	r7, sp, #0
 802907a:	6078      	str	r0, [r7, #4]
 802907c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802907e:	687b      	ldr	r3, [r7, #4]
 8029080:	2b00      	cmp	r3, #0
 8029082:	d101      	bne.n	8029088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8029084:	2301      	movs	r3, #1
 8029086:	e0cc      	b.n	8029222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8029088:	4b68      	ldr	r3, [pc, #416]	; (802922c <HAL_RCC_ClockConfig+0x1b8>)
 802908a:	681b      	ldr	r3, [r3, #0]
 802908c:	f003 030f 	and.w	r3, r3, #15
 8029090:	683a      	ldr	r2, [r7, #0]
 8029092:	429a      	cmp	r2, r3
 8029094:	d90c      	bls.n	80290b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8029096:	4b65      	ldr	r3, [pc, #404]	; (802922c <HAL_RCC_ClockConfig+0x1b8>)
 8029098:	683a      	ldr	r2, [r7, #0]
 802909a:	b2d2      	uxtb	r2, r2
 802909c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802909e:	4b63      	ldr	r3, [pc, #396]	; (802922c <HAL_RCC_ClockConfig+0x1b8>)
 80290a0:	681b      	ldr	r3, [r3, #0]
 80290a2:	f003 030f 	and.w	r3, r3, #15
 80290a6:	683a      	ldr	r2, [r7, #0]
 80290a8:	429a      	cmp	r2, r3
 80290aa:	d001      	beq.n	80290b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80290ac:	2301      	movs	r3, #1
 80290ae:	e0b8      	b.n	8029222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80290b0:	687b      	ldr	r3, [r7, #4]
 80290b2:	681b      	ldr	r3, [r3, #0]
 80290b4:	f003 0302 	and.w	r3, r3, #2
 80290b8:	2b00      	cmp	r3, #0
 80290ba:	d020      	beq.n	80290fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80290bc:	687b      	ldr	r3, [r7, #4]
 80290be:	681b      	ldr	r3, [r3, #0]
 80290c0:	f003 0304 	and.w	r3, r3, #4
 80290c4:	2b00      	cmp	r3, #0
 80290c6:	d005      	beq.n	80290d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80290c8:	4b59      	ldr	r3, [pc, #356]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 80290ca:	689b      	ldr	r3, [r3, #8]
 80290cc:	4a58      	ldr	r2, [pc, #352]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 80290ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80290d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80290d4:	687b      	ldr	r3, [r7, #4]
 80290d6:	681b      	ldr	r3, [r3, #0]
 80290d8:	f003 0308 	and.w	r3, r3, #8
 80290dc:	2b00      	cmp	r3, #0
 80290de:	d005      	beq.n	80290ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80290e0:	4b53      	ldr	r3, [pc, #332]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 80290e2:	689b      	ldr	r3, [r3, #8]
 80290e4:	4a52      	ldr	r2, [pc, #328]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 80290e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80290ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80290ec:	4b50      	ldr	r3, [pc, #320]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 80290ee:	689b      	ldr	r3, [r3, #8]
 80290f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80290f4:	687b      	ldr	r3, [r7, #4]
 80290f6:	689b      	ldr	r3, [r3, #8]
 80290f8:	494d      	ldr	r1, [pc, #308]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 80290fa:	4313      	orrs	r3, r2
 80290fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80290fe:	687b      	ldr	r3, [r7, #4]
 8029100:	681b      	ldr	r3, [r3, #0]
 8029102:	f003 0301 	and.w	r3, r3, #1
 8029106:	2b00      	cmp	r3, #0
 8029108:	d044      	beq.n	8029194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802910a:	687b      	ldr	r3, [r7, #4]
 802910c:	685b      	ldr	r3, [r3, #4]
 802910e:	2b01      	cmp	r3, #1
 8029110:	d107      	bne.n	8029122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8029112:	4b47      	ldr	r3, [pc, #284]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 8029114:	681b      	ldr	r3, [r3, #0]
 8029116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802911a:	2b00      	cmp	r3, #0
 802911c:	d119      	bne.n	8029152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802911e:	2301      	movs	r3, #1
 8029120:	e07f      	b.n	8029222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8029122:	687b      	ldr	r3, [r7, #4]
 8029124:	685b      	ldr	r3, [r3, #4]
 8029126:	2b02      	cmp	r3, #2
 8029128:	d003      	beq.n	8029132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802912a:	687b      	ldr	r3, [r7, #4]
 802912c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802912e:	2b03      	cmp	r3, #3
 8029130:	d107      	bne.n	8029142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8029132:	4b3f      	ldr	r3, [pc, #252]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 8029134:	681b      	ldr	r3, [r3, #0]
 8029136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802913a:	2b00      	cmp	r3, #0
 802913c:	d109      	bne.n	8029152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802913e:	2301      	movs	r3, #1
 8029140:	e06f      	b.n	8029222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8029142:	4b3b      	ldr	r3, [pc, #236]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 8029144:	681b      	ldr	r3, [r3, #0]
 8029146:	f003 0302 	and.w	r3, r3, #2
 802914a:	2b00      	cmp	r3, #0
 802914c:	d101      	bne.n	8029152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802914e:	2301      	movs	r3, #1
 8029150:	e067      	b.n	8029222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8029152:	4b37      	ldr	r3, [pc, #220]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 8029154:	689b      	ldr	r3, [r3, #8]
 8029156:	f023 0203 	bic.w	r2, r3, #3
 802915a:	687b      	ldr	r3, [r7, #4]
 802915c:	685b      	ldr	r3, [r3, #4]
 802915e:	4934      	ldr	r1, [pc, #208]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 8029160:	4313      	orrs	r3, r2
 8029162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8029164:	f7fd fe9a 	bl	8026e9c <HAL_GetTick>
 8029168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802916a:	e00a      	b.n	8029182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802916c:	f7fd fe96 	bl	8026e9c <HAL_GetTick>
 8029170:	4602      	mov	r2, r0
 8029172:	68fb      	ldr	r3, [r7, #12]
 8029174:	1ad3      	subs	r3, r2, r3
 8029176:	f241 3288 	movw	r2, #5000	; 0x1388
 802917a:	4293      	cmp	r3, r2
 802917c:	d901      	bls.n	8029182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802917e:	2303      	movs	r3, #3
 8029180:	e04f      	b.n	8029222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8029182:	4b2b      	ldr	r3, [pc, #172]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 8029184:	689b      	ldr	r3, [r3, #8]
 8029186:	f003 020c 	and.w	r2, r3, #12
 802918a:	687b      	ldr	r3, [r7, #4]
 802918c:	685b      	ldr	r3, [r3, #4]
 802918e:	009b      	lsls	r3, r3, #2
 8029190:	429a      	cmp	r2, r3
 8029192:	d1eb      	bne.n	802916c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8029194:	4b25      	ldr	r3, [pc, #148]	; (802922c <HAL_RCC_ClockConfig+0x1b8>)
 8029196:	681b      	ldr	r3, [r3, #0]
 8029198:	f003 030f 	and.w	r3, r3, #15
 802919c:	683a      	ldr	r2, [r7, #0]
 802919e:	429a      	cmp	r2, r3
 80291a0:	d20c      	bcs.n	80291bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80291a2:	4b22      	ldr	r3, [pc, #136]	; (802922c <HAL_RCC_ClockConfig+0x1b8>)
 80291a4:	683a      	ldr	r2, [r7, #0]
 80291a6:	b2d2      	uxtb	r2, r2
 80291a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80291aa:	4b20      	ldr	r3, [pc, #128]	; (802922c <HAL_RCC_ClockConfig+0x1b8>)
 80291ac:	681b      	ldr	r3, [r3, #0]
 80291ae:	f003 030f 	and.w	r3, r3, #15
 80291b2:	683a      	ldr	r2, [r7, #0]
 80291b4:	429a      	cmp	r2, r3
 80291b6:	d001      	beq.n	80291bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80291b8:	2301      	movs	r3, #1
 80291ba:	e032      	b.n	8029222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80291bc:	687b      	ldr	r3, [r7, #4]
 80291be:	681b      	ldr	r3, [r3, #0]
 80291c0:	f003 0304 	and.w	r3, r3, #4
 80291c4:	2b00      	cmp	r3, #0
 80291c6:	d008      	beq.n	80291da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80291c8:	4b19      	ldr	r3, [pc, #100]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 80291ca:	689b      	ldr	r3, [r3, #8]
 80291cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80291d0:	687b      	ldr	r3, [r7, #4]
 80291d2:	68db      	ldr	r3, [r3, #12]
 80291d4:	4916      	ldr	r1, [pc, #88]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 80291d6:	4313      	orrs	r3, r2
 80291d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80291da:	687b      	ldr	r3, [r7, #4]
 80291dc:	681b      	ldr	r3, [r3, #0]
 80291de:	f003 0308 	and.w	r3, r3, #8
 80291e2:	2b00      	cmp	r3, #0
 80291e4:	d009      	beq.n	80291fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80291e6:	4b12      	ldr	r3, [pc, #72]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 80291e8:	689b      	ldr	r3, [r3, #8]
 80291ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80291ee:	687b      	ldr	r3, [r7, #4]
 80291f0:	691b      	ldr	r3, [r3, #16]
 80291f2:	00db      	lsls	r3, r3, #3
 80291f4:	490e      	ldr	r1, [pc, #56]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 80291f6:	4313      	orrs	r3, r2
 80291f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80291fa:	f000 f821 	bl	8029240 <HAL_RCC_GetSysClockFreq>
 80291fe:	4601      	mov	r1, r0
 8029200:	4b0b      	ldr	r3, [pc, #44]	; (8029230 <HAL_RCC_ClockConfig+0x1bc>)
 8029202:	689b      	ldr	r3, [r3, #8]
 8029204:	091b      	lsrs	r3, r3, #4
 8029206:	f003 030f 	and.w	r3, r3, #15
 802920a:	4a0a      	ldr	r2, [pc, #40]	; (8029234 <HAL_RCC_ClockConfig+0x1c0>)
 802920c:	5cd3      	ldrb	r3, [r2, r3]
 802920e:	fa21 f303 	lsr.w	r3, r1, r3
 8029212:	4a09      	ldr	r2, [pc, #36]	; (8029238 <HAL_RCC_ClockConfig+0x1c4>)
 8029214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8029216:	4b09      	ldr	r3, [pc, #36]	; (802923c <HAL_RCC_ClockConfig+0x1c8>)
 8029218:	681b      	ldr	r3, [r3, #0]
 802921a:	4618      	mov	r0, r3
 802921c:	f7fd fdfa 	bl	8026e14 <HAL_InitTick>

  return HAL_OK;
 8029220:	2300      	movs	r3, #0
}
 8029222:	4618      	mov	r0, r3
 8029224:	3710      	adds	r7, #16
 8029226:	46bd      	mov	sp, r7
 8029228:	bd80      	pop	{r7, pc}
 802922a:	bf00      	nop
 802922c:	40023c00 	.word	0x40023c00
 8029230:	40023800 	.word	0x40023800
 8029234:	0802be8c 	.word	0x0802be8c
 8029238:	20000014 	.word	0x20000014
 802923c:	20000018 	.word	0x20000018

08029240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8029240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029242:	b085      	sub	sp, #20
 8029244:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8029246:	2300      	movs	r3, #0
 8029248:	607b      	str	r3, [r7, #4]
 802924a:	2300      	movs	r3, #0
 802924c:	60fb      	str	r3, [r7, #12]
 802924e:	2300      	movs	r3, #0
 8029250:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8029252:	2300      	movs	r3, #0
 8029254:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8029256:	4b50      	ldr	r3, [pc, #320]	; (8029398 <HAL_RCC_GetSysClockFreq+0x158>)
 8029258:	689b      	ldr	r3, [r3, #8]
 802925a:	f003 030c 	and.w	r3, r3, #12
 802925e:	2b04      	cmp	r3, #4
 8029260:	d007      	beq.n	8029272 <HAL_RCC_GetSysClockFreq+0x32>
 8029262:	2b08      	cmp	r3, #8
 8029264:	d008      	beq.n	8029278 <HAL_RCC_GetSysClockFreq+0x38>
 8029266:	2b00      	cmp	r3, #0
 8029268:	f040 808d 	bne.w	8029386 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802926c:	4b4b      	ldr	r3, [pc, #300]	; (802939c <HAL_RCC_GetSysClockFreq+0x15c>)
 802926e:	60bb      	str	r3, [r7, #8]
       break;
 8029270:	e08c      	b.n	802938c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8029272:	4b4b      	ldr	r3, [pc, #300]	; (80293a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8029274:	60bb      	str	r3, [r7, #8]
      break;
 8029276:	e089      	b.n	802938c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8029278:	4b47      	ldr	r3, [pc, #284]	; (8029398 <HAL_RCC_GetSysClockFreq+0x158>)
 802927a:	685b      	ldr	r3, [r3, #4]
 802927c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8029280:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8029282:	4b45      	ldr	r3, [pc, #276]	; (8029398 <HAL_RCC_GetSysClockFreq+0x158>)
 8029284:	685b      	ldr	r3, [r3, #4]
 8029286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802928a:	2b00      	cmp	r3, #0
 802928c:	d023      	beq.n	80292d6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802928e:	4b42      	ldr	r3, [pc, #264]	; (8029398 <HAL_RCC_GetSysClockFreq+0x158>)
 8029290:	685b      	ldr	r3, [r3, #4]
 8029292:	099b      	lsrs	r3, r3, #6
 8029294:	f04f 0400 	mov.w	r4, #0
 8029298:	f240 11ff 	movw	r1, #511	; 0x1ff
 802929c:	f04f 0200 	mov.w	r2, #0
 80292a0:	ea03 0501 	and.w	r5, r3, r1
 80292a4:	ea04 0602 	and.w	r6, r4, r2
 80292a8:	4a3d      	ldr	r2, [pc, #244]	; (80293a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80292aa:	fb02 f106 	mul.w	r1, r2, r6
 80292ae:	2200      	movs	r2, #0
 80292b0:	fb02 f205 	mul.w	r2, r2, r5
 80292b4:	440a      	add	r2, r1
 80292b6:	493a      	ldr	r1, [pc, #232]	; (80293a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80292b8:	fba5 0101 	umull	r0, r1, r5, r1
 80292bc:	1853      	adds	r3, r2, r1
 80292be:	4619      	mov	r1, r3
 80292c0:	687b      	ldr	r3, [r7, #4]
 80292c2:	f04f 0400 	mov.w	r4, #0
 80292c6:	461a      	mov	r2, r3
 80292c8:	4623      	mov	r3, r4
 80292ca:	f7f7 fbaf 	bl	8020a2c <__aeabi_uldivmod>
 80292ce:	4603      	mov	r3, r0
 80292d0:	460c      	mov	r4, r1
 80292d2:	60fb      	str	r3, [r7, #12]
 80292d4:	e049      	b.n	802936a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80292d6:	4b30      	ldr	r3, [pc, #192]	; (8029398 <HAL_RCC_GetSysClockFreq+0x158>)
 80292d8:	685b      	ldr	r3, [r3, #4]
 80292da:	099b      	lsrs	r3, r3, #6
 80292dc:	f04f 0400 	mov.w	r4, #0
 80292e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80292e4:	f04f 0200 	mov.w	r2, #0
 80292e8:	ea03 0501 	and.w	r5, r3, r1
 80292ec:	ea04 0602 	and.w	r6, r4, r2
 80292f0:	4629      	mov	r1, r5
 80292f2:	4632      	mov	r2, r6
 80292f4:	f04f 0300 	mov.w	r3, #0
 80292f8:	f04f 0400 	mov.w	r4, #0
 80292fc:	0154      	lsls	r4, r2, #5
 80292fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8029302:	014b      	lsls	r3, r1, #5
 8029304:	4619      	mov	r1, r3
 8029306:	4622      	mov	r2, r4
 8029308:	1b49      	subs	r1, r1, r5
 802930a:	eb62 0206 	sbc.w	r2, r2, r6
 802930e:	f04f 0300 	mov.w	r3, #0
 8029312:	f04f 0400 	mov.w	r4, #0
 8029316:	0194      	lsls	r4, r2, #6
 8029318:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 802931c:	018b      	lsls	r3, r1, #6
 802931e:	1a5b      	subs	r3, r3, r1
 8029320:	eb64 0402 	sbc.w	r4, r4, r2
 8029324:	f04f 0100 	mov.w	r1, #0
 8029328:	f04f 0200 	mov.w	r2, #0
 802932c:	00e2      	lsls	r2, r4, #3
 802932e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8029332:	00d9      	lsls	r1, r3, #3
 8029334:	460b      	mov	r3, r1
 8029336:	4614      	mov	r4, r2
 8029338:	195b      	adds	r3, r3, r5
 802933a:	eb44 0406 	adc.w	r4, r4, r6
 802933e:	f04f 0100 	mov.w	r1, #0
 8029342:	f04f 0200 	mov.w	r2, #0
 8029346:	02a2      	lsls	r2, r4, #10
 8029348:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 802934c:	0299      	lsls	r1, r3, #10
 802934e:	460b      	mov	r3, r1
 8029350:	4614      	mov	r4, r2
 8029352:	4618      	mov	r0, r3
 8029354:	4621      	mov	r1, r4
 8029356:	687b      	ldr	r3, [r7, #4]
 8029358:	f04f 0400 	mov.w	r4, #0
 802935c:	461a      	mov	r2, r3
 802935e:	4623      	mov	r3, r4
 8029360:	f7f7 fb64 	bl	8020a2c <__aeabi_uldivmod>
 8029364:	4603      	mov	r3, r0
 8029366:	460c      	mov	r4, r1
 8029368:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 802936a:	4b0b      	ldr	r3, [pc, #44]	; (8029398 <HAL_RCC_GetSysClockFreq+0x158>)
 802936c:	685b      	ldr	r3, [r3, #4]
 802936e:	0c1b      	lsrs	r3, r3, #16
 8029370:	f003 0303 	and.w	r3, r3, #3
 8029374:	3301      	adds	r3, #1
 8029376:	005b      	lsls	r3, r3, #1
 8029378:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 802937a:	68fa      	ldr	r2, [r7, #12]
 802937c:	683b      	ldr	r3, [r7, #0]
 802937e:	fbb2 f3f3 	udiv	r3, r2, r3
 8029382:	60bb      	str	r3, [r7, #8]
      break;
 8029384:	e002      	b.n	802938c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8029386:	4b05      	ldr	r3, [pc, #20]	; (802939c <HAL_RCC_GetSysClockFreq+0x15c>)
 8029388:	60bb      	str	r3, [r7, #8]
      break;
 802938a:	bf00      	nop
    }
  }
  return sysclockfreq;
 802938c:	68bb      	ldr	r3, [r7, #8]
}
 802938e:	4618      	mov	r0, r3
 8029390:	3714      	adds	r7, #20
 8029392:	46bd      	mov	sp, r7
 8029394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029396:	bf00      	nop
 8029398:	40023800 	.word	0x40023800
 802939c:	00f42400 	.word	0x00f42400
 80293a0:	00b71b00 	.word	0x00b71b00

080293a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80293a4:	b480      	push	{r7}
 80293a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80293a8:	4b03      	ldr	r3, [pc, #12]	; (80293b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80293aa:	681b      	ldr	r3, [r3, #0]
}
 80293ac:	4618      	mov	r0, r3
 80293ae:	46bd      	mov	sp, r7
 80293b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293b4:	4770      	bx	lr
 80293b6:	bf00      	nop
 80293b8:	20000014 	.word	0x20000014

080293bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80293bc:	b580      	push	{r7, lr}
 80293be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80293c0:	f7ff fff0 	bl	80293a4 <HAL_RCC_GetHCLKFreq>
 80293c4:	4601      	mov	r1, r0
 80293c6:	4b05      	ldr	r3, [pc, #20]	; (80293dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80293c8:	689b      	ldr	r3, [r3, #8]
 80293ca:	0a9b      	lsrs	r3, r3, #10
 80293cc:	f003 0307 	and.w	r3, r3, #7
 80293d0:	4a03      	ldr	r2, [pc, #12]	; (80293e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80293d2:	5cd3      	ldrb	r3, [r2, r3]
 80293d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80293d8:	4618      	mov	r0, r3
 80293da:	bd80      	pop	{r7, pc}
 80293dc:	40023800 	.word	0x40023800
 80293e0:	0802be9c 	.word	0x0802be9c

080293e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80293e4:	b580      	push	{r7, lr}
 80293e6:	b082      	sub	sp, #8
 80293e8:	af00      	add	r7, sp, #0
 80293ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80293ec:	687b      	ldr	r3, [r7, #4]
 80293ee:	2b00      	cmp	r3, #0
 80293f0:	d101      	bne.n	80293f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80293f2:	2301      	movs	r3, #1
 80293f4:	e056      	b.n	80294a4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80293f6:	687b      	ldr	r3, [r7, #4]
 80293f8:	2200      	movs	r2, #0
 80293fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80293fc:	687b      	ldr	r3, [r7, #4]
 80293fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8029402:	b2db      	uxtb	r3, r3
 8029404:	2b00      	cmp	r3, #0
 8029406:	d106      	bne.n	8029416 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8029408:	687b      	ldr	r3, [r7, #4]
 802940a:	2200      	movs	r2, #0
 802940c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8029410:	6878      	ldr	r0, [r7, #4]
 8029412:	f7fc fecb 	bl	80261ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8029416:	687b      	ldr	r3, [r7, #4]
 8029418:	2202      	movs	r2, #2
 802941a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802941e:	687b      	ldr	r3, [r7, #4]
 8029420:	681b      	ldr	r3, [r3, #0]
 8029422:	681a      	ldr	r2, [r3, #0]
 8029424:	687b      	ldr	r3, [r7, #4]
 8029426:	681b      	ldr	r3, [r3, #0]
 8029428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802942c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 802942e:	687b      	ldr	r3, [r7, #4]
 8029430:	685a      	ldr	r2, [r3, #4]
 8029432:	687b      	ldr	r3, [r7, #4]
 8029434:	689b      	ldr	r3, [r3, #8]
 8029436:	431a      	orrs	r2, r3
 8029438:	687b      	ldr	r3, [r7, #4]
 802943a:	68db      	ldr	r3, [r3, #12]
 802943c:	431a      	orrs	r2, r3
 802943e:	687b      	ldr	r3, [r7, #4]
 8029440:	691b      	ldr	r3, [r3, #16]
 8029442:	431a      	orrs	r2, r3
 8029444:	687b      	ldr	r3, [r7, #4]
 8029446:	695b      	ldr	r3, [r3, #20]
 8029448:	431a      	orrs	r2, r3
 802944a:	687b      	ldr	r3, [r7, #4]
 802944c:	699b      	ldr	r3, [r3, #24]
 802944e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8029452:	431a      	orrs	r2, r3
 8029454:	687b      	ldr	r3, [r7, #4]
 8029456:	69db      	ldr	r3, [r3, #28]
 8029458:	431a      	orrs	r2, r3
 802945a:	687b      	ldr	r3, [r7, #4]
 802945c:	6a1b      	ldr	r3, [r3, #32]
 802945e:	ea42 0103 	orr.w	r1, r2, r3
 8029462:	687b      	ldr	r3, [r7, #4]
 8029464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8029466:	687b      	ldr	r3, [r7, #4]
 8029468:	681b      	ldr	r3, [r3, #0]
 802946a:	430a      	orrs	r2, r1
 802946c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 802946e:	687b      	ldr	r3, [r7, #4]
 8029470:	699b      	ldr	r3, [r3, #24]
 8029472:	0c1b      	lsrs	r3, r3, #16
 8029474:	f003 0104 	and.w	r1, r3, #4
 8029478:	687b      	ldr	r3, [r7, #4]
 802947a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802947c:	687b      	ldr	r3, [r7, #4]
 802947e:	681b      	ldr	r3, [r3, #0]
 8029480:	430a      	orrs	r2, r1
 8029482:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8029484:	687b      	ldr	r3, [r7, #4]
 8029486:	681b      	ldr	r3, [r3, #0]
 8029488:	69da      	ldr	r2, [r3, #28]
 802948a:	687b      	ldr	r3, [r7, #4]
 802948c:	681b      	ldr	r3, [r3, #0]
 802948e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8029492:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8029494:	687b      	ldr	r3, [r7, #4]
 8029496:	2200      	movs	r2, #0
 8029498:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802949a:	687b      	ldr	r3, [r7, #4]
 802949c:	2201      	movs	r2, #1
 802949e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80294a2:	2300      	movs	r3, #0
}
 80294a4:	4618      	mov	r0, r3
 80294a6:	3708      	adds	r7, #8
 80294a8:	46bd      	mov	sp, r7
 80294aa:	bd80      	pop	{r7, pc}

080294ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80294ac:	b580      	push	{r7, lr}
 80294ae:	b088      	sub	sp, #32
 80294b0:	af00      	add	r7, sp, #0
 80294b2:	60f8      	str	r0, [r7, #12]
 80294b4:	60b9      	str	r1, [r7, #8]
 80294b6:	603b      	str	r3, [r7, #0]
 80294b8:	4613      	mov	r3, r2
 80294ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80294bc:	2300      	movs	r3, #0
 80294be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80294c0:	68fb      	ldr	r3, [r7, #12]
 80294c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80294c6:	2b01      	cmp	r3, #1
 80294c8:	d101      	bne.n	80294ce <HAL_SPI_Transmit+0x22>
 80294ca:	2302      	movs	r3, #2
 80294cc:	e11e      	b.n	802970c <HAL_SPI_Transmit+0x260>
 80294ce:	68fb      	ldr	r3, [r7, #12]
 80294d0:	2201      	movs	r2, #1
 80294d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80294d6:	f7fd fce1 	bl	8026e9c <HAL_GetTick>
 80294da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80294dc:	88fb      	ldrh	r3, [r7, #6]
 80294de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80294e0:	68fb      	ldr	r3, [r7, #12]
 80294e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80294e6:	b2db      	uxtb	r3, r3
 80294e8:	2b01      	cmp	r3, #1
 80294ea:	d002      	beq.n	80294f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80294ec:	2302      	movs	r3, #2
 80294ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80294f0:	e103      	b.n	80296fa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80294f2:	68bb      	ldr	r3, [r7, #8]
 80294f4:	2b00      	cmp	r3, #0
 80294f6:	d002      	beq.n	80294fe <HAL_SPI_Transmit+0x52>
 80294f8:	88fb      	ldrh	r3, [r7, #6]
 80294fa:	2b00      	cmp	r3, #0
 80294fc:	d102      	bne.n	8029504 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80294fe:	2301      	movs	r3, #1
 8029500:	77fb      	strb	r3, [r7, #31]
    goto error;
 8029502:	e0fa      	b.n	80296fa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8029504:	68fb      	ldr	r3, [r7, #12]
 8029506:	2203      	movs	r2, #3
 8029508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802950c:	68fb      	ldr	r3, [r7, #12]
 802950e:	2200      	movs	r2, #0
 8029510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8029512:	68fb      	ldr	r3, [r7, #12]
 8029514:	68ba      	ldr	r2, [r7, #8]
 8029516:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8029518:	68fb      	ldr	r3, [r7, #12]
 802951a:	88fa      	ldrh	r2, [r7, #6]
 802951c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802951e:	68fb      	ldr	r3, [r7, #12]
 8029520:	88fa      	ldrh	r2, [r7, #6]
 8029522:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8029524:	68fb      	ldr	r3, [r7, #12]
 8029526:	2200      	movs	r2, #0
 8029528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 802952a:	68fb      	ldr	r3, [r7, #12]
 802952c:	2200      	movs	r2, #0
 802952e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8029530:	68fb      	ldr	r3, [r7, #12]
 8029532:	2200      	movs	r2, #0
 8029534:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8029536:	68fb      	ldr	r3, [r7, #12]
 8029538:	2200      	movs	r2, #0
 802953a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 802953c:	68fb      	ldr	r3, [r7, #12]
 802953e:	2200      	movs	r2, #0
 8029540:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8029542:	68fb      	ldr	r3, [r7, #12]
 8029544:	689b      	ldr	r3, [r3, #8]
 8029546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802954a:	d107      	bne.n	802955c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 802954c:	68fb      	ldr	r3, [r7, #12]
 802954e:	681b      	ldr	r3, [r3, #0]
 8029550:	681a      	ldr	r2, [r3, #0]
 8029552:	68fb      	ldr	r3, [r7, #12]
 8029554:	681b      	ldr	r3, [r3, #0]
 8029556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802955a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802955c:	68fb      	ldr	r3, [r7, #12]
 802955e:	681b      	ldr	r3, [r3, #0]
 8029560:	681b      	ldr	r3, [r3, #0]
 8029562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029566:	2b40      	cmp	r3, #64	; 0x40
 8029568:	d007      	beq.n	802957a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802956a:	68fb      	ldr	r3, [r7, #12]
 802956c:	681b      	ldr	r3, [r3, #0]
 802956e:	681a      	ldr	r2, [r3, #0]
 8029570:	68fb      	ldr	r3, [r7, #12]
 8029572:	681b      	ldr	r3, [r3, #0]
 8029574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8029578:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802957a:	68fb      	ldr	r3, [r7, #12]
 802957c:	68db      	ldr	r3, [r3, #12]
 802957e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8029582:	d14b      	bne.n	802961c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8029584:	68fb      	ldr	r3, [r7, #12]
 8029586:	685b      	ldr	r3, [r3, #4]
 8029588:	2b00      	cmp	r3, #0
 802958a:	d002      	beq.n	8029592 <HAL_SPI_Transmit+0xe6>
 802958c:	8afb      	ldrh	r3, [r7, #22]
 802958e:	2b01      	cmp	r3, #1
 8029590:	d13e      	bne.n	8029610 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8029592:	68fb      	ldr	r3, [r7, #12]
 8029594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029596:	881a      	ldrh	r2, [r3, #0]
 8029598:	68fb      	ldr	r3, [r7, #12]
 802959a:	681b      	ldr	r3, [r3, #0]
 802959c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802959e:	68fb      	ldr	r3, [r7, #12]
 80295a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80295a2:	1c9a      	adds	r2, r3, #2
 80295a4:	68fb      	ldr	r3, [r7, #12]
 80295a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80295a8:	68fb      	ldr	r3, [r7, #12]
 80295aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80295ac:	b29b      	uxth	r3, r3
 80295ae:	3b01      	subs	r3, #1
 80295b0:	b29a      	uxth	r2, r3
 80295b2:	68fb      	ldr	r3, [r7, #12]
 80295b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80295b6:	e02b      	b.n	8029610 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80295b8:	68fb      	ldr	r3, [r7, #12]
 80295ba:	681b      	ldr	r3, [r3, #0]
 80295bc:	689b      	ldr	r3, [r3, #8]
 80295be:	f003 0302 	and.w	r3, r3, #2
 80295c2:	2b02      	cmp	r3, #2
 80295c4:	d112      	bne.n	80295ec <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80295c6:	68fb      	ldr	r3, [r7, #12]
 80295c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80295ca:	881a      	ldrh	r2, [r3, #0]
 80295cc:	68fb      	ldr	r3, [r7, #12]
 80295ce:	681b      	ldr	r3, [r3, #0]
 80295d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80295d2:	68fb      	ldr	r3, [r7, #12]
 80295d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80295d6:	1c9a      	adds	r2, r3, #2
 80295d8:	68fb      	ldr	r3, [r7, #12]
 80295da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80295dc:	68fb      	ldr	r3, [r7, #12]
 80295de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80295e0:	b29b      	uxth	r3, r3
 80295e2:	3b01      	subs	r3, #1
 80295e4:	b29a      	uxth	r2, r3
 80295e6:	68fb      	ldr	r3, [r7, #12]
 80295e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80295ea:	e011      	b.n	8029610 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80295ec:	f7fd fc56 	bl	8026e9c <HAL_GetTick>
 80295f0:	4602      	mov	r2, r0
 80295f2:	69bb      	ldr	r3, [r7, #24]
 80295f4:	1ad3      	subs	r3, r2, r3
 80295f6:	683a      	ldr	r2, [r7, #0]
 80295f8:	429a      	cmp	r2, r3
 80295fa:	d803      	bhi.n	8029604 <HAL_SPI_Transmit+0x158>
 80295fc:	683b      	ldr	r3, [r7, #0]
 80295fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029602:	d102      	bne.n	802960a <HAL_SPI_Transmit+0x15e>
 8029604:	683b      	ldr	r3, [r7, #0]
 8029606:	2b00      	cmp	r3, #0
 8029608:	d102      	bne.n	8029610 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 802960a:	2303      	movs	r3, #3
 802960c:	77fb      	strb	r3, [r7, #31]
          goto error;
 802960e:	e074      	b.n	80296fa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8029610:	68fb      	ldr	r3, [r7, #12]
 8029612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029614:	b29b      	uxth	r3, r3
 8029616:	2b00      	cmp	r3, #0
 8029618:	d1ce      	bne.n	80295b8 <HAL_SPI_Transmit+0x10c>
 802961a:	e04c      	b.n	80296b6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802961c:	68fb      	ldr	r3, [r7, #12]
 802961e:	685b      	ldr	r3, [r3, #4]
 8029620:	2b00      	cmp	r3, #0
 8029622:	d002      	beq.n	802962a <HAL_SPI_Transmit+0x17e>
 8029624:	8afb      	ldrh	r3, [r7, #22]
 8029626:	2b01      	cmp	r3, #1
 8029628:	d140      	bne.n	80296ac <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802962a:	68fb      	ldr	r3, [r7, #12]
 802962c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802962e:	68fb      	ldr	r3, [r7, #12]
 8029630:	681b      	ldr	r3, [r3, #0]
 8029632:	330c      	adds	r3, #12
 8029634:	7812      	ldrb	r2, [r2, #0]
 8029636:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8029638:	68fb      	ldr	r3, [r7, #12]
 802963a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802963c:	1c5a      	adds	r2, r3, #1
 802963e:	68fb      	ldr	r3, [r7, #12]
 8029640:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8029642:	68fb      	ldr	r3, [r7, #12]
 8029644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029646:	b29b      	uxth	r3, r3
 8029648:	3b01      	subs	r3, #1
 802964a:	b29a      	uxth	r2, r3
 802964c:	68fb      	ldr	r3, [r7, #12]
 802964e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8029650:	e02c      	b.n	80296ac <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8029652:	68fb      	ldr	r3, [r7, #12]
 8029654:	681b      	ldr	r3, [r3, #0]
 8029656:	689b      	ldr	r3, [r3, #8]
 8029658:	f003 0302 	and.w	r3, r3, #2
 802965c:	2b02      	cmp	r3, #2
 802965e:	d113      	bne.n	8029688 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8029660:	68fb      	ldr	r3, [r7, #12]
 8029662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029664:	68fb      	ldr	r3, [r7, #12]
 8029666:	681b      	ldr	r3, [r3, #0]
 8029668:	330c      	adds	r3, #12
 802966a:	7812      	ldrb	r2, [r2, #0]
 802966c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 802966e:	68fb      	ldr	r3, [r7, #12]
 8029670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029672:	1c5a      	adds	r2, r3, #1
 8029674:	68fb      	ldr	r3, [r7, #12]
 8029676:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8029678:	68fb      	ldr	r3, [r7, #12]
 802967a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802967c:	b29b      	uxth	r3, r3
 802967e:	3b01      	subs	r3, #1
 8029680:	b29a      	uxth	r2, r3
 8029682:	68fb      	ldr	r3, [r7, #12]
 8029684:	86da      	strh	r2, [r3, #54]	; 0x36
 8029686:	e011      	b.n	80296ac <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8029688:	f7fd fc08 	bl	8026e9c <HAL_GetTick>
 802968c:	4602      	mov	r2, r0
 802968e:	69bb      	ldr	r3, [r7, #24]
 8029690:	1ad3      	subs	r3, r2, r3
 8029692:	683a      	ldr	r2, [r7, #0]
 8029694:	429a      	cmp	r2, r3
 8029696:	d803      	bhi.n	80296a0 <HAL_SPI_Transmit+0x1f4>
 8029698:	683b      	ldr	r3, [r7, #0]
 802969a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802969e:	d102      	bne.n	80296a6 <HAL_SPI_Transmit+0x1fa>
 80296a0:	683b      	ldr	r3, [r7, #0]
 80296a2:	2b00      	cmp	r3, #0
 80296a4:	d102      	bne.n	80296ac <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80296a6:	2303      	movs	r3, #3
 80296a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80296aa:	e026      	b.n	80296fa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80296ac:	68fb      	ldr	r3, [r7, #12]
 80296ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80296b0:	b29b      	uxth	r3, r3
 80296b2:	2b00      	cmp	r3, #0
 80296b4:	d1cd      	bne.n	8029652 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80296b6:	69ba      	ldr	r2, [r7, #24]
 80296b8:	6839      	ldr	r1, [r7, #0]
 80296ba:	68f8      	ldr	r0, [r7, #12]
 80296bc:	f000 fba4 	bl	8029e08 <SPI_EndRxTxTransaction>
 80296c0:	4603      	mov	r3, r0
 80296c2:	2b00      	cmp	r3, #0
 80296c4:	d002      	beq.n	80296cc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80296c6:	68fb      	ldr	r3, [r7, #12]
 80296c8:	2220      	movs	r2, #32
 80296ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80296cc:	68fb      	ldr	r3, [r7, #12]
 80296ce:	689b      	ldr	r3, [r3, #8]
 80296d0:	2b00      	cmp	r3, #0
 80296d2:	d10a      	bne.n	80296ea <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80296d4:	2300      	movs	r3, #0
 80296d6:	613b      	str	r3, [r7, #16]
 80296d8:	68fb      	ldr	r3, [r7, #12]
 80296da:	681b      	ldr	r3, [r3, #0]
 80296dc:	68db      	ldr	r3, [r3, #12]
 80296de:	613b      	str	r3, [r7, #16]
 80296e0:	68fb      	ldr	r3, [r7, #12]
 80296e2:	681b      	ldr	r3, [r3, #0]
 80296e4:	689b      	ldr	r3, [r3, #8]
 80296e6:	613b      	str	r3, [r7, #16]
 80296e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80296ea:	68fb      	ldr	r3, [r7, #12]
 80296ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80296ee:	2b00      	cmp	r3, #0
 80296f0:	d002      	beq.n	80296f8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80296f2:	2301      	movs	r3, #1
 80296f4:	77fb      	strb	r3, [r7, #31]
 80296f6:	e000      	b.n	80296fa <HAL_SPI_Transmit+0x24e>
  }

error:
 80296f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80296fa:	68fb      	ldr	r3, [r7, #12]
 80296fc:	2201      	movs	r2, #1
 80296fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8029702:	68fb      	ldr	r3, [r7, #12]
 8029704:	2200      	movs	r2, #0
 8029706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802970a:	7ffb      	ldrb	r3, [r7, #31]
}
 802970c:	4618      	mov	r0, r3
 802970e:	3720      	adds	r7, #32
 8029710:	46bd      	mov	sp, r7
 8029712:	bd80      	pop	{r7, pc}

08029714 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8029714:	b580      	push	{r7, lr}
 8029716:	b088      	sub	sp, #32
 8029718:	af02      	add	r7, sp, #8
 802971a:	60f8      	str	r0, [r7, #12]
 802971c:	60b9      	str	r1, [r7, #8]
 802971e:	603b      	str	r3, [r7, #0]
 8029720:	4613      	mov	r3, r2
 8029722:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8029724:	2300      	movs	r3, #0
 8029726:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8029728:	68fb      	ldr	r3, [r7, #12]
 802972a:	685b      	ldr	r3, [r3, #4]
 802972c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029730:	d112      	bne.n	8029758 <HAL_SPI_Receive+0x44>
 8029732:	68fb      	ldr	r3, [r7, #12]
 8029734:	689b      	ldr	r3, [r3, #8]
 8029736:	2b00      	cmp	r3, #0
 8029738:	d10e      	bne.n	8029758 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 802973a:	68fb      	ldr	r3, [r7, #12]
 802973c:	2204      	movs	r2, #4
 802973e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8029742:	88fa      	ldrh	r2, [r7, #6]
 8029744:	683b      	ldr	r3, [r7, #0]
 8029746:	9300      	str	r3, [sp, #0]
 8029748:	4613      	mov	r3, r2
 802974a:	68ba      	ldr	r2, [r7, #8]
 802974c:	68b9      	ldr	r1, [r7, #8]
 802974e:	68f8      	ldr	r0, [r7, #12]
 8029750:	f000 f8e9 	bl	8029926 <HAL_SPI_TransmitReceive>
 8029754:	4603      	mov	r3, r0
 8029756:	e0e2      	b.n	802991e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8029758:	68fb      	ldr	r3, [r7, #12]
 802975a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802975e:	2b01      	cmp	r3, #1
 8029760:	d101      	bne.n	8029766 <HAL_SPI_Receive+0x52>
 8029762:	2302      	movs	r3, #2
 8029764:	e0db      	b.n	802991e <HAL_SPI_Receive+0x20a>
 8029766:	68fb      	ldr	r3, [r7, #12]
 8029768:	2201      	movs	r2, #1
 802976a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802976e:	f7fd fb95 	bl	8026e9c <HAL_GetTick>
 8029772:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8029774:	68fb      	ldr	r3, [r7, #12]
 8029776:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802977a:	b2db      	uxtb	r3, r3
 802977c:	2b01      	cmp	r3, #1
 802977e:	d002      	beq.n	8029786 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8029780:	2302      	movs	r3, #2
 8029782:	75fb      	strb	r3, [r7, #23]
    goto error;
 8029784:	e0c2      	b.n	802990c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8029786:	68bb      	ldr	r3, [r7, #8]
 8029788:	2b00      	cmp	r3, #0
 802978a:	d002      	beq.n	8029792 <HAL_SPI_Receive+0x7e>
 802978c:	88fb      	ldrh	r3, [r7, #6]
 802978e:	2b00      	cmp	r3, #0
 8029790:	d102      	bne.n	8029798 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8029792:	2301      	movs	r3, #1
 8029794:	75fb      	strb	r3, [r7, #23]
    goto error;
 8029796:	e0b9      	b.n	802990c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8029798:	68fb      	ldr	r3, [r7, #12]
 802979a:	2204      	movs	r2, #4
 802979c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80297a0:	68fb      	ldr	r3, [r7, #12]
 80297a2:	2200      	movs	r2, #0
 80297a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80297a6:	68fb      	ldr	r3, [r7, #12]
 80297a8:	68ba      	ldr	r2, [r7, #8]
 80297aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80297ac:	68fb      	ldr	r3, [r7, #12]
 80297ae:	88fa      	ldrh	r2, [r7, #6]
 80297b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80297b2:	68fb      	ldr	r3, [r7, #12]
 80297b4:	88fa      	ldrh	r2, [r7, #6]
 80297b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80297b8:	68fb      	ldr	r3, [r7, #12]
 80297ba:	2200      	movs	r2, #0
 80297bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80297be:	68fb      	ldr	r3, [r7, #12]
 80297c0:	2200      	movs	r2, #0
 80297c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80297c4:	68fb      	ldr	r3, [r7, #12]
 80297c6:	2200      	movs	r2, #0
 80297c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80297ca:	68fb      	ldr	r3, [r7, #12]
 80297cc:	2200      	movs	r2, #0
 80297ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80297d0:	68fb      	ldr	r3, [r7, #12]
 80297d2:	2200      	movs	r2, #0
 80297d4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80297d6:	68fb      	ldr	r3, [r7, #12]
 80297d8:	689b      	ldr	r3, [r3, #8]
 80297da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80297de:	d107      	bne.n	80297f0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80297e0:	68fb      	ldr	r3, [r7, #12]
 80297e2:	681b      	ldr	r3, [r3, #0]
 80297e4:	681a      	ldr	r2, [r3, #0]
 80297e6:	68fb      	ldr	r3, [r7, #12]
 80297e8:	681b      	ldr	r3, [r3, #0]
 80297ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80297ee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80297f0:	68fb      	ldr	r3, [r7, #12]
 80297f2:	681b      	ldr	r3, [r3, #0]
 80297f4:	681b      	ldr	r3, [r3, #0]
 80297f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80297fa:	2b40      	cmp	r3, #64	; 0x40
 80297fc:	d007      	beq.n	802980e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80297fe:	68fb      	ldr	r3, [r7, #12]
 8029800:	681b      	ldr	r3, [r3, #0]
 8029802:	681a      	ldr	r2, [r3, #0]
 8029804:	68fb      	ldr	r3, [r7, #12]
 8029806:	681b      	ldr	r3, [r3, #0]
 8029808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802980c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 802980e:	68fb      	ldr	r3, [r7, #12]
 8029810:	68db      	ldr	r3, [r3, #12]
 8029812:	2b00      	cmp	r3, #0
 8029814:	d162      	bne.n	80298dc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8029816:	e02e      	b.n	8029876 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8029818:	68fb      	ldr	r3, [r7, #12]
 802981a:	681b      	ldr	r3, [r3, #0]
 802981c:	689b      	ldr	r3, [r3, #8]
 802981e:	f003 0301 	and.w	r3, r3, #1
 8029822:	2b01      	cmp	r3, #1
 8029824:	d115      	bne.n	8029852 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8029826:	68fb      	ldr	r3, [r7, #12]
 8029828:	681b      	ldr	r3, [r3, #0]
 802982a:	f103 020c 	add.w	r2, r3, #12
 802982e:	68fb      	ldr	r3, [r7, #12]
 8029830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029832:	7812      	ldrb	r2, [r2, #0]
 8029834:	b2d2      	uxtb	r2, r2
 8029836:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8029838:	68fb      	ldr	r3, [r7, #12]
 802983a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802983c:	1c5a      	adds	r2, r3, #1
 802983e:	68fb      	ldr	r3, [r7, #12]
 8029840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8029842:	68fb      	ldr	r3, [r7, #12]
 8029844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029846:	b29b      	uxth	r3, r3
 8029848:	3b01      	subs	r3, #1
 802984a:	b29a      	uxth	r2, r3
 802984c:	68fb      	ldr	r3, [r7, #12]
 802984e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8029850:	e011      	b.n	8029876 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8029852:	f7fd fb23 	bl	8026e9c <HAL_GetTick>
 8029856:	4602      	mov	r2, r0
 8029858:	693b      	ldr	r3, [r7, #16]
 802985a:	1ad3      	subs	r3, r2, r3
 802985c:	683a      	ldr	r2, [r7, #0]
 802985e:	429a      	cmp	r2, r3
 8029860:	d803      	bhi.n	802986a <HAL_SPI_Receive+0x156>
 8029862:	683b      	ldr	r3, [r7, #0]
 8029864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029868:	d102      	bne.n	8029870 <HAL_SPI_Receive+0x15c>
 802986a:	683b      	ldr	r3, [r7, #0]
 802986c:	2b00      	cmp	r3, #0
 802986e:	d102      	bne.n	8029876 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8029870:	2303      	movs	r3, #3
 8029872:	75fb      	strb	r3, [r7, #23]
          goto error;
 8029874:	e04a      	b.n	802990c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8029876:	68fb      	ldr	r3, [r7, #12]
 8029878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802987a:	b29b      	uxth	r3, r3
 802987c:	2b00      	cmp	r3, #0
 802987e:	d1cb      	bne.n	8029818 <HAL_SPI_Receive+0x104>
 8029880:	e031      	b.n	80298e6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8029882:	68fb      	ldr	r3, [r7, #12]
 8029884:	681b      	ldr	r3, [r3, #0]
 8029886:	689b      	ldr	r3, [r3, #8]
 8029888:	f003 0301 	and.w	r3, r3, #1
 802988c:	2b01      	cmp	r3, #1
 802988e:	d113      	bne.n	80298b8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8029890:	68fb      	ldr	r3, [r7, #12]
 8029892:	681b      	ldr	r3, [r3, #0]
 8029894:	68da      	ldr	r2, [r3, #12]
 8029896:	68fb      	ldr	r3, [r7, #12]
 8029898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802989a:	b292      	uxth	r2, r2
 802989c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802989e:	68fb      	ldr	r3, [r7, #12]
 80298a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80298a2:	1c9a      	adds	r2, r3, #2
 80298a4:	68fb      	ldr	r3, [r7, #12]
 80298a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80298a8:	68fb      	ldr	r3, [r7, #12]
 80298aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80298ac:	b29b      	uxth	r3, r3
 80298ae:	3b01      	subs	r3, #1
 80298b0:	b29a      	uxth	r2, r3
 80298b2:	68fb      	ldr	r3, [r7, #12]
 80298b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80298b6:	e011      	b.n	80298dc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80298b8:	f7fd faf0 	bl	8026e9c <HAL_GetTick>
 80298bc:	4602      	mov	r2, r0
 80298be:	693b      	ldr	r3, [r7, #16]
 80298c0:	1ad3      	subs	r3, r2, r3
 80298c2:	683a      	ldr	r2, [r7, #0]
 80298c4:	429a      	cmp	r2, r3
 80298c6:	d803      	bhi.n	80298d0 <HAL_SPI_Receive+0x1bc>
 80298c8:	683b      	ldr	r3, [r7, #0]
 80298ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80298ce:	d102      	bne.n	80298d6 <HAL_SPI_Receive+0x1c2>
 80298d0:	683b      	ldr	r3, [r7, #0]
 80298d2:	2b00      	cmp	r3, #0
 80298d4:	d102      	bne.n	80298dc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80298d6:	2303      	movs	r3, #3
 80298d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80298da:	e017      	b.n	802990c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80298dc:	68fb      	ldr	r3, [r7, #12]
 80298de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80298e0:	b29b      	uxth	r3, r3
 80298e2:	2b00      	cmp	r3, #0
 80298e4:	d1cd      	bne.n	8029882 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80298e6:	693a      	ldr	r2, [r7, #16]
 80298e8:	6839      	ldr	r1, [r7, #0]
 80298ea:	68f8      	ldr	r0, [r7, #12]
 80298ec:	f000 fa27 	bl	8029d3e <SPI_EndRxTransaction>
 80298f0:	4603      	mov	r3, r0
 80298f2:	2b00      	cmp	r3, #0
 80298f4:	d002      	beq.n	80298fc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80298f6:	68fb      	ldr	r3, [r7, #12]
 80298f8:	2220      	movs	r2, #32
 80298fa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80298fc:	68fb      	ldr	r3, [r7, #12]
 80298fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029900:	2b00      	cmp	r3, #0
 8029902:	d002      	beq.n	802990a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8029904:	2301      	movs	r3, #1
 8029906:	75fb      	strb	r3, [r7, #23]
 8029908:	e000      	b.n	802990c <HAL_SPI_Receive+0x1f8>
  }

error :
 802990a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802990c:	68fb      	ldr	r3, [r7, #12]
 802990e:	2201      	movs	r2, #1
 8029910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8029914:	68fb      	ldr	r3, [r7, #12]
 8029916:	2200      	movs	r2, #0
 8029918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802991c:	7dfb      	ldrb	r3, [r7, #23]
}
 802991e:	4618      	mov	r0, r3
 8029920:	3718      	adds	r7, #24
 8029922:	46bd      	mov	sp, r7
 8029924:	bd80      	pop	{r7, pc}

08029926 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8029926:	b580      	push	{r7, lr}
 8029928:	b08c      	sub	sp, #48	; 0x30
 802992a:	af00      	add	r7, sp, #0
 802992c:	60f8      	str	r0, [r7, #12]
 802992e:	60b9      	str	r1, [r7, #8]
 8029930:	607a      	str	r2, [r7, #4]
 8029932:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8029934:	2301      	movs	r3, #1
 8029936:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8029938:	2300      	movs	r3, #0
 802993a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802993e:	68fb      	ldr	r3, [r7, #12]
 8029940:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8029944:	2b01      	cmp	r3, #1
 8029946:	d101      	bne.n	802994c <HAL_SPI_TransmitReceive+0x26>
 8029948:	2302      	movs	r3, #2
 802994a:	e18a      	b.n	8029c62 <HAL_SPI_TransmitReceive+0x33c>
 802994c:	68fb      	ldr	r3, [r7, #12]
 802994e:	2201      	movs	r2, #1
 8029950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8029954:	f7fd faa2 	bl	8026e9c <HAL_GetTick>
 8029958:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 802995a:	68fb      	ldr	r3, [r7, #12]
 802995c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8029960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8029964:	68fb      	ldr	r3, [r7, #12]
 8029966:	685b      	ldr	r3, [r3, #4]
 8029968:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 802996a:	887b      	ldrh	r3, [r7, #2]
 802996c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802996e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8029972:	2b01      	cmp	r3, #1
 8029974:	d00f      	beq.n	8029996 <HAL_SPI_TransmitReceive+0x70>
 8029976:	69fb      	ldr	r3, [r7, #28]
 8029978:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802997c:	d107      	bne.n	802998e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 802997e:	68fb      	ldr	r3, [r7, #12]
 8029980:	689b      	ldr	r3, [r3, #8]
 8029982:	2b00      	cmp	r3, #0
 8029984:	d103      	bne.n	802998e <HAL_SPI_TransmitReceive+0x68>
 8029986:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802998a:	2b04      	cmp	r3, #4
 802998c:	d003      	beq.n	8029996 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 802998e:	2302      	movs	r3, #2
 8029990:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8029994:	e15b      	b.n	8029c4e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8029996:	68bb      	ldr	r3, [r7, #8]
 8029998:	2b00      	cmp	r3, #0
 802999a:	d005      	beq.n	80299a8 <HAL_SPI_TransmitReceive+0x82>
 802999c:	687b      	ldr	r3, [r7, #4]
 802999e:	2b00      	cmp	r3, #0
 80299a0:	d002      	beq.n	80299a8 <HAL_SPI_TransmitReceive+0x82>
 80299a2:	887b      	ldrh	r3, [r7, #2]
 80299a4:	2b00      	cmp	r3, #0
 80299a6:	d103      	bne.n	80299b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80299a8:	2301      	movs	r3, #1
 80299aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80299ae:	e14e      	b.n	8029c4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80299b0:	68fb      	ldr	r3, [r7, #12]
 80299b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80299b6:	b2db      	uxtb	r3, r3
 80299b8:	2b04      	cmp	r3, #4
 80299ba:	d003      	beq.n	80299c4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80299bc:	68fb      	ldr	r3, [r7, #12]
 80299be:	2205      	movs	r2, #5
 80299c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80299c4:	68fb      	ldr	r3, [r7, #12]
 80299c6:	2200      	movs	r2, #0
 80299c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80299ca:	68fb      	ldr	r3, [r7, #12]
 80299cc:	687a      	ldr	r2, [r7, #4]
 80299ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80299d0:	68fb      	ldr	r3, [r7, #12]
 80299d2:	887a      	ldrh	r2, [r7, #2]
 80299d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80299d6:	68fb      	ldr	r3, [r7, #12]
 80299d8:	887a      	ldrh	r2, [r7, #2]
 80299da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80299dc:	68fb      	ldr	r3, [r7, #12]
 80299de:	68ba      	ldr	r2, [r7, #8]
 80299e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80299e2:	68fb      	ldr	r3, [r7, #12]
 80299e4:	887a      	ldrh	r2, [r7, #2]
 80299e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80299e8:	68fb      	ldr	r3, [r7, #12]
 80299ea:	887a      	ldrh	r2, [r7, #2]
 80299ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80299ee:	68fb      	ldr	r3, [r7, #12]
 80299f0:	2200      	movs	r2, #0
 80299f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80299f4:	68fb      	ldr	r3, [r7, #12]
 80299f6:	2200      	movs	r2, #0
 80299f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80299fa:	68fb      	ldr	r3, [r7, #12]
 80299fc:	681b      	ldr	r3, [r3, #0]
 80299fe:	681b      	ldr	r3, [r3, #0]
 8029a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029a04:	2b40      	cmp	r3, #64	; 0x40
 8029a06:	d007      	beq.n	8029a18 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8029a08:	68fb      	ldr	r3, [r7, #12]
 8029a0a:	681b      	ldr	r3, [r3, #0]
 8029a0c:	681a      	ldr	r2, [r3, #0]
 8029a0e:	68fb      	ldr	r3, [r7, #12]
 8029a10:	681b      	ldr	r3, [r3, #0]
 8029a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8029a16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8029a18:	68fb      	ldr	r3, [r7, #12]
 8029a1a:	68db      	ldr	r3, [r3, #12]
 8029a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8029a20:	d178      	bne.n	8029b14 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8029a22:	68fb      	ldr	r3, [r7, #12]
 8029a24:	685b      	ldr	r3, [r3, #4]
 8029a26:	2b00      	cmp	r3, #0
 8029a28:	d002      	beq.n	8029a30 <HAL_SPI_TransmitReceive+0x10a>
 8029a2a:	8b7b      	ldrh	r3, [r7, #26]
 8029a2c:	2b01      	cmp	r3, #1
 8029a2e:	d166      	bne.n	8029afe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8029a30:	68fb      	ldr	r3, [r7, #12]
 8029a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029a34:	881a      	ldrh	r2, [r3, #0]
 8029a36:	68fb      	ldr	r3, [r7, #12]
 8029a38:	681b      	ldr	r3, [r3, #0]
 8029a3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8029a3c:	68fb      	ldr	r3, [r7, #12]
 8029a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029a40:	1c9a      	adds	r2, r3, #2
 8029a42:	68fb      	ldr	r3, [r7, #12]
 8029a44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8029a46:	68fb      	ldr	r3, [r7, #12]
 8029a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029a4a:	b29b      	uxth	r3, r3
 8029a4c:	3b01      	subs	r3, #1
 8029a4e:	b29a      	uxth	r2, r3
 8029a50:	68fb      	ldr	r3, [r7, #12]
 8029a52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8029a54:	e053      	b.n	8029afe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8029a56:	68fb      	ldr	r3, [r7, #12]
 8029a58:	681b      	ldr	r3, [r3, #0]
 8029a5a:	689b      	ldr	r3, [r3, #8]
 8029a5c:	f003 0302 	and.w	r3, r3, #2
 8029a60:	2b02      	cmp	r3, #2
 8029a62:	d11b      	bne.n	8029a9c <HAL_SPI_TransmitReceive+0x176>
 8029a64:	68fb      	ldr	r3, [r7, #12]
 8029a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029a68:	b29b      	uxth	r3, r3
 8029a6a:	2b00      	cmp	r3, #0
 8029a6c:	d016      	beq.n	8029a9c <HAL_SPI_TransmitReceive+0x176>
 8029a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029a70:	2b01      	cmp	r3, #1
 8029a72:	d113      	bne.n	8029a9c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8029a74:	68fb      	ldr	r3, [r7, #12]
 8029a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029a78:	881a      	ldrh	r2, [r3, #0]
 8029a7a:	68fb      	ldr	r3, [r7, #12]
 8029a7c:	681b      	ldr	r3, [r3, #0]
 8029a7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8029a80:	68fb      	ldr	r3, [r7, #12]
 8029a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029a84:	1c9a      	adds	r2, r3, #2
 8029a86:	68fb      	ldr	r3, [r7, #12]
 8029a88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8029a8a:	68fb      	ldr	r3, [r7, #12]
 8029a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029a8e:	b29b      	uxth	r3, r3
 8029a90:	3b01      	subs	r3, #1
 8029a92:	b29a      	uxth	r2, r3
 8029a94:	68fb      	ldr	r3, [r7, #12]
 8029a96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8029a98:	2300      	movs	r3, #0
 8029a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8029a9c:	68fb      	ldr	r3, [r7, #12]
 8029a9e:	681b      	ldr	r3, [r3, #0]
 8029aa0:	689b      	ldr	r3, [r3, #8]
 8029aa2:	f003 0301 	and.w	r3, r3, #1
 8029aa6:	2b01      	cmp	r3, #1
 8029aa8:	d119      	bne.n	8029ade <HAL_SPI_TransmitReceive+0x1b8>
 8029aaa:	68fb      	ldr	r3, [r7, #12]
 8029aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029aae:	b29b      	uxth	r3, r3
 8029ab0:	2b00      	cmp	r3, #0
 8029ab2:	d014      	beq.n	8029ade <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8029ab4:	68fb      	ldr	r3, [r7, #12]
 8029ab6:	681b      	ldr	r3, [r3, #0]
 8029ab8:	68da      	ldr	r2, [r3, #12]
 8029aba:	68fb      	ldr	r3, [r7, #12]
 8029abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029abe:	b292      	uxth	r2, r2
 8029ac0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8029ac2:	68fb      	ldr	r3, [r7, #12]
 8029ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029ac6:	1c9a      	adds	r2, r3, #2
 8029ac8:	68fb      	ldr	r3, [r7, #12]
 8029aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8029acc:	68fb      	ldr	r3, [r7, #12]
 8029ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029ad0:	b29b      	uxth	r3, r3
 8029ad2:	3b01      	subs	r3, #1
 8029ad4:	b29a      	uxth	r2, r3
 8029ad6:	68fb      	ldr	r3, [r7, #12]
 8029ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8029ada:	2301      	movs	r3, #1
 8029adc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8029ade:	f7fd f9dd 	bl	8026e9c <HAL_GetTick>
 8029ae2:	4602      	mov	r2, r0
 8029ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029ae6:	1ad3      	subs	r3, r2, r3
 8029ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029aea:	429a      	cmp	r2, r3
 8029aec:	d807      	bhi.n	8029afe <HAL_SPI_TransmitReceive+0x1d8>
 8029aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029af4:	d003      	beq.n	8029afe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8029af6:	2303      	movs	r3, #3
 8029af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8029afc:	e0a7      	b.n	8029c4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8029afe:	68fb      	ldr	r3, [r7, #12]
 8029b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029b02:	b29b      	uxth	r3, r3
 8029b04:	2b00      	cmp	r3, #0
 8029b06:	d1a6      	bne.n	8029a56 <HAL_SPI_TransmitReceive+0x130>
 8029b08:	68fb      	ldr	r3, [r7, #12]
 8029b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029b0c:	b29b      	uxth	r3, r3
 8029b0e:	2b00      	cmp	r3, #0
 8029b10:	d1a1      	bne.n	8029a56 <HAL_SPI_TransmitReceive+0x130>
 8029b12:	e07c      	b.n	8029c0e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8029b14:	68fb      	ldr	r3, [r7, #12]
 8029b16:	685b      	ldr	r3, [r3, #4]
 8029b18:	2b00      	cmp	r3, #0
 8029b1a:	d002      	beq.n	8029b22 <HAL_SPI_TransmitReceive+0x1fc>
 8029b1c:	8b7b      	ldrh	r3, [r7, #26]
 8029b1e:	2b01      	cmp	r3, #1
 8029b20:	d16b      	bne.n	8029bfa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8029b22:	68fb      	ldr	r3, [r7, #12]
 8029b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029b26:	68fb      	ldr	r3, [r7, #12]
 8029b28:	681b      	ldr	r3, [r3, #0]
 8029b2a:	330c      	adds	r3, #12
 8029b2c:	7812      	ldrb	r2, [r2, #0]
 8029b2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8029b30:	68fb      	ldr	r3, [r7, #12]
 8029b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029b34:	1c5a      	adds	r2, r3, #1
 8029b36:	68fb      	ldr	r3, [r7, #12]
 8029b38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8029b3a:	68fb      	ldr	r3, [r7, #12]
 8029b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029b3e:	b29b      	uxth	r3, r3
 8029b40:	3b01      	subs	r3, #1
 8029b42:	b29a      	uxth	r2, r3
 8029b44:	68fb      	ldr	r3, [r7, #12]
 8029b46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8029b48:	e057      	b.n	8029bfa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8029b4a:	68fb      	ldr	r3, [r7, #12]
 8029b4c:	681b      	ldr	r3, [r3, #0]
 8029b4e:	689b      	ldr	r3, [r3, #8]
 8029b50:	f003 0302 	and.w	r3, r3, #2
 8029b54:	2b02      	cmp	r3, #2
 8029b56:	d11c      	bne.n	8029b92 <HAL_SPI_TransmitReceive+0x26c>
 8029b58:	68fb      	ldr	r3, [r7, #12]
 8029b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029b5c:	b29b      	uxth	r3, r3
 8029b5e:	2b00      	cmp	r3, #0
 8029b60:	d017      	beq.n	8029b92 <HAL_SPI_TransmitReceive+0x26c>
 8029b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029b64:	2b01      	cmp	r3, #1
 8029b66:	d114      	bne.n	8029b92 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8029b68:	68fb      	ldr	r3, [r7, #12]
 8029b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029b6c:	68fb      	ldr	r3, [r7, #12]
 8029b6e:	681b      	ldr	r3, [r3, #0]
 8029b70:	330c      	adds	r3, #12
 8029b72:	7812      	ldrb	r2, [r2, #0]
 8029b74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8029b76:	68fb      	ldr	r3, [r7, #12]
 8029b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029b7a:	1c5a      	adds	r2, r3, #1
 8029b7c:	68fb      	ldr	r3, [r7, #12]
 8029b7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8029b80:	68fb      	ldr	r3, [r7, #12]
 8029b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029b84:	b29b      	uxth	r3, r3
 8029b86:	3b01      	subs	r3, #1
 8029b88:	b29a      	uxth	r2, r3
 8029b8a:	68fb      	ldr	r3, [r7, #12]
 8029b8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8029b8e:	2300      	movs	r3, #0
 8029b90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8029b92:	68fb      	ldr	r3, [r7, #12]
 8029b94:	681b      	ldr	r3, [r3, #0]
 8029b96:	689b      	ldr	r3, [r3, #8]
 8029b98:	f003 0301 	and.w	r3, r3, #1
 8029b9c:	2b01      	cmp	r3, #1
 8029b9e:	d119      	bne.n	8029bd4 <HAL_SPI_TransmitReceive+0x2ae>
 8029ba0:	68fb      	ldr	r3, [r7, #12]
 8029ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029ba4:	b29b      	uxth	r3, r3
 8029ba6:	2b00      	cmp	r3, #0
 8029ba8:	d014      	beq.n	8029bd4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8029baa:	68fb      	ldr	r3, [r7, #12]
 8029bac:	681b      	ldr	r3, [r3, #0]
 8029bae:	68da      	ldr	r2, [r3, #12]
 8029bb0:	68fb      	ldr	r3, [r7, #12]
 8029bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029bb4:	b2d2      	uxtb	r2, r2
 8029bb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8029bb8:	68fb      	ldr	r3, [r7, #12]
 8029bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029bbc:	1c5a      	adds	r2, r3, #1
 8029bbe:	68fb      	ldr	r3, [r7, #12]
 8029bc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8029bc2:	68fb      	ldr	r3, [r7, #12]
 8029bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029bc6:	b29b      	uxth	r3, r3
 8029bc8:	3b01      	subs	r3, #1
 8029bca:	b29a      	uxth	r2, r3
 8029bcc:	68fb      	ldr	r3, [r7, #12]
 8029bce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8029bd0:	2301      	movs	r3, #1
 8029bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8029bd4:	f7fd f962 	bl	8026e9c <HAL_GetTick>
 8029bd8:	4602      	mov	r2, r0
 8029bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029bdc:	1ad3      	subs	r3, r2, r3
 8029bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029be0:	429a      	cmp	r2, r3
 8029be2:	d803      	bhi.n	8029bec <HAL_SPI_TransmitReceive+0x2c6>
 8029be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029bea:	d102      	bne.n	8029bf2 <HAL_SPI_TransmitReceive+0x2cc>
 8029bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029bee:	2b00      	cmp	r3, #0
 8029bf0:	d103      	bne.n	8029bfa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8029bf2:	2303      	movs	r3, #3
 8029bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8029bf8:	e029      	b.n	8029c4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8029bfa:	68fb      	ldr	r3, [r7, #12]
 8029bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029bfe:	b29b      	uxth	r3, r3
 8029c00:	2b00      	cmp	r3, #0
 8029c02:	d1a2      	bne.n	8029b4a <HAL_SPI_TransmitReceive+0x224>
 8029c04:	68fb      	ldr	r3, [r7, #12]
 8029c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029c08:	b29b      	uxth	r3, r3
 8029c0a:	2b00      	cmp	r3, #0
 8029c0c:	d19d      	bne.n	8029b4a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8029c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029c10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8029c12:	68f8      	ldr	r0, [r7, #12]
 8029c14:	f000 f8f8 	bl	8029e08 <SPI_EndRxTxTransaction>
 8029c18:	4603      	mov	r3, r0
 8029c1a:	2b00      	cmp	r3, #0
 8029c1c:	d006      	beq.n	8029c2c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8029c1e:	2301      	movs	r3, #1
 8029c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8029c24:	68fb      	ldr	r3, [r7, #12]
 8029c26:	2220      	movs	r2, #32
 8029c28:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8029c2a:	e010      	b.n	8029c4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8029c2c:	68fb      	ldr	r3, [r7, #12]
 8029c2e:	689b      	ldr	r3, [r3, #8]
 8029c30:	2b00      	cmp	r3, #0
 8029c32:	d10b      	bne.n	8029c4c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8029c34:	2300      	movs	r3, #0
 8029c36:	617b      	str	r3, [r7, #20]
 8029c38:	68fb      	ldr	r3, [r7, #12]
 8029c3a:	681b      	ldr	r3, [r3, #0]
 8029c3c:	68db      	ldr	r3, [r3, #12]
 8029c3e:	617b      	str	r3, [r7, #20]
 8029c40:	68fb      	ldr	r3, [r7, #12]
 8029c42:	681b      	ldr	r3, [r3, #0]
 8029c44:	689b      	ldr	r3, [r3, #8]
 8029c46:	617b      	str	r3, [r7, #20]
 8029c48:	697b      	ldr	r3, [r7, #20]
 8029c4a:	e000      	b.n	8029c4e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8029c4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8029c4e:	68fb      	ldr	r3, [r7, #12]
 8029c50:	2201      	movs	r2, #1
 8029c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8029c56:	68fb      	ldr	r3, [r7, #12]
 8029c58:	2200      	movs	r2, #0
 8029c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8029c5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8029c62:	4618      	mov	r0, r3
 8029c64:	3730      	adds	r7, #48	; 0x30
 8029c66:	46bd      	mov	sp, r7
 8029c68:	bd80      	pop	{r7, pc}

08029c6a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8029c6a:	b580      	push	{r7, lr}
 8029c6c:	b084      	sub	sp, #16
 8029c6e:	af00      	add	r7, sp, #0
 8029c70:	60f8      	str	r0, [r7, #12]
 8029c72:	60b9      	str	r1, [r7, #8]
 8029c74:	603b      	str	r3, [r7, #0]
 8029c76:	4613      	mov	r3, r2
 8029c78:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8029c7a:	e04c      	b.n	8029d16 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8029c7c:	683b      	ldr	r3, [r7, #0]
 8029c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029c82:	d048      	beq.n	8029d16 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8029c84:	f7fd f90a 	bl	8026e9c <HAL_GetTick>
 8029c88:	4602      	mov	r2, r0
 8029c8a:	69bb      	ldr	r3, [r7, #24]
 8029c8c:	1ad3      	subs	r3, r2, r3
 8029c8e:	683a      	ldr	r2, [r7, #0]
 8029c90:	429a      	cmp	r2, r3
 8029c92:	d902      	bls.n	8029c9a <SPI_WaitFlagStateUntilTimeout+0x30>
 8029c94:	683b      	ldr	r3, [r7, #0]
 8029c96:	2b00      	cmp	r3, #0
 8029c98:	d13d      	bne.n	8029d16 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8029c9a:	68fb      	ldr	r3, [r7, #12]
 8029c9c:	681b      	ldr	r3, [r3, #0]
 8029c9e:	685a      	ldr	r2, [r3, #4]
 8029ca0:	68fb      	ldr	r3, [r7, #12]
 8029ca2:	681b      	ldr	r3, [r3, #0]
 8029ca4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8029ca8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8029caa:	68fb      	ldr	r3, [r7, #12]
 8029cac:	685b      	ldr	r3, [r3, #4]
 8029cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029cb2:	d111      	bne.n	8029cd8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8029cb4:	68fb      	ldr	r3, [r7, #12]
 8029cb6:	689b      	ldr	r3, [r3, #8]
 8029cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029cbc:	d004      	beq.n	8029cc8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8029cbe:	68fb      	ldr	r3, [r7, #12]
 8029cc0:	689b      	ldr	r3, [r3, #8]
 8029cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029cc6:	d107      	bne.n	8029cd8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8029cc8:	68fb      	ldr	r3, [r7, #12]
 8029cca:	681b      	ldr	r3, [r3, #0]
 8029ccc:	681a      	ldr	r2, [r3, #0]
 8029cce:	68fb      	ldr	r3, [r7, #12]
 8029cd0:	681b      	ldr	r3, [r3, #0]
 8029cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8029cd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8029cd8:	68fb      	ldr	r3, [r7, #12]
 8029cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029ce0:	d10f      	bne.n	8029d02 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8029ce2:	68fb      	ldr	r3, [r7, #12]
 8029ce4:	681b      	ldr	r3, [r3, #0]
 8029ce6:	681a      	ldr	r2, [r3, #0]
 8029ce8:	68fb      	ldr	r3, [r7, #12]
 8029cea:	681b      	ldr	r3, [r3, #0]
 8029cec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8029cf0:	601a      	str	r2, [r3, #0]
 8029cf2:	68fb      	ldr	r3, [r7, #12]
 8029cf4:	681b      	ldr	r3, [r3, #0]
 8029cf6:	681a      	ldr	r2, [r3, #0]
 8029cf8:	68fb      	ldr	r3, [r7, #12]
 8029cfa:	681b      	ldr	r3, [r3, #0]
 8029cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8029d00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8029d02:	68fb      	ldr	r3, [r7, #12]
 8029d04:	2201      	movs	r2, #1
 8029d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8029d0a:	68fb      	ldr	r3, [r7, #12]
 8029d0c:	2200      	movs	r2, #0
 8029d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8029d12:	2303      	movs	r3, #3
 8029d14:	e00f      	b.n	8029d36 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8029d16:	68fb      	ldr	r3, [r7, #12]
 8029d18:	681b      	ldr	r3, [r3, #0]
 8029d1a:	689a      	ldr	r2, [r3, #8]
 8029d1c:	68bb      	ldr	r3, [r7, #8]
 8029d1e:	4013      	ands	r3, r2
 8029d20:	68ba      	ldr	r2, [r7, #8]
 8029d22:	429a      	cmp	r2, r3
 8029d24:	bf0c      	ite	eq
 8029d26:	2301      	moveq	r3, #1
 8029d28:	2300      	movne	r3, #0
 8029d2a:	b2db      	uxtb	r3, r3
 8029d2c:	461a      	mov	r2, r3
 8029d2e:	79fb      	ldrb	r3, [r7, #7]
 8029d30:	429a      	cmp	r2, r3
 8029d32:	d1a3      	bne.n	8029c7c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8029d34:	2300      	movs	r3, #0
}
 8029d36:	4618      	mov	r0, r3
 8029d38:	3710      	adds	r7, #16
 8029d3a:	46bd      	mov	sp, r7
 8029d3c:	bd80      	pop	{r7, pc}

08029d3e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8029d3e:	b580      	push	{r7, lr}
 8029d40:	b086      	sub	sp, #24
 8029d42:	af02      	add	r7, sp, #8
 8029d44:	60f8      	str	r0, [r7, #12]
 8029d46:	60b9      	str	r1, [r7, #8]
 8029d48:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8029d4a:	68fb      	ldr	r3, [r7, #12]
 8029d4c:	685b      	ldr	r3, [r3, #4]
 8029d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029d52:	d111      	bne.n	8029d78 <SPI_EndRxTransaction+0x3a>
 8029d54:	68fb      	ldr	r3, [r7, #12]
 8029d56:	689b      	ldr	r3, [r3, #8]
 8029d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029d5c:	d004      	beq.n	8029d68 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8029d5e:	68fb      	ldr	r3, [r7, #12]
 8029d60:	689b      	ldr	r3, [r3, #8]
 8029d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029d66:	d107      	bne.n	8029d78 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8029d68:	68fb      	ldr	r3, [r7, #12]
 8029d6a:	681b      	ldr	r3, [r3, #0]
 8029d6c:	681a      	ldr	r2, [r3, #0]
 8029d6e:	68fb      	ldr	r3, [r7, #12]
 8029d70:	681b      	ldr	r3, [r3, #0]
 8029d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8029d76:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8029d78:	68fb      	ldr	r3, [r7, #12]
 8029d7a:	685b      	ldr	r3, [r3, #4]
 8029d7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029d80:	d12a      	bne.n	8029dd8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8029d82:	68fb      	ldr	r3, [r7, #12]
 8029d84:	689b      	ldr	r3, [r3, #8]
 8029d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029d8a:	d012      	beq.n	8029db2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8029d8c:	687b      	ldr	r3, [r7, #4]
 8029d8e:	9300      	str	r3, [sp, #0]
 8029d90:	68bb      	ldr	r3, [r7, #8]
 8029d92:	2200      	movs	r2, #0
 8029d94:	2180      	movs	r1, #128	; 0x80
 8029d96:	68f8      	ldr	r0, [r7, #12]
 8029d98:	f7ff ff67 	bl	8029c6a <SPI_WaitFlagStateUntilTimeout>
 8029d9c:	4603      	mov	r3, r0
 8029d9e:	2b00      	cmp	r3, #0
 8029da0:	d02d      	beq.n	8029dfe <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029da2:	68fb      	ldr	r3, [r7, #12]
 8029da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029da6:	f043 0220 	orr.w	r2, r3, #32
 8029daa:	68fb      	ldr	r3, [r7, #12]
 8029dac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8029dae:	2303      	movs	r3, #3
 8029db0:	e026      	b.n	8029e00 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8029db2:	687b      	ldr	r3, [r7, #4]
 8029db4:	9300      	str	r3, [sp, #0]
 8029db6:	68bb      	ldr	r3, [r7, #8]
 8029db8:	2200      	movs	r2, #0
 8029dba:	2101      	movs	r1, #1
 8029dbc:	68f8      	ldr	r0, [r7, #12]
 8029dbe:	f7ff ff54 	bl	8029c6a <SPI_WaitFlagStateUntilTimeout>
 8029dc2:	4603      	mov	r3, r0
 8029dc4:	2b00      	cmp	r3, #0
 8029dc6:	d01a      	beq.n	8029dfe <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029dc8:	68fb      	ldr	r3, [r7, #12]
 8029dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029dcc:	f043 0220 	orr.w	r2, r3, #32
 8029dd0:	68fb      	ldr	r3, [r7, #12]
 8029dd2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8029dd4:	2303      	movs	r3, #3
 8029dd6:	e013      	b.n	8029e00 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8029dd8:	687b      	ldr	r3, [r7, #4]
 8029dda:	9300      	str	r3, [sp, #0]
 8029ddc:	68bb      	ldr	r3, [r7, #8]
 8029dde:	2200      	movs	r2, #0
 8029de0:	2101      	movs	r1, #1
 8029de2:	68f8      	ldr	r0, [r7, #12]
 8029de4:	f7ff ff41 	bl	8029c6a <SPI_WaitFlagStateUntilTimeout>
 8029de8:	4603      	mov	r3, r0
 8029dea:	2b00      	cmp	r3, #0
 8029dec:	d007      	beq.n	8029dfe <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029dee:	68fb      	ldr	r3, [r7, #12]
 8029df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029df2:	f043 0220 	orr.w	r2, r3, #32
 8029df6:	68fb      	ldr	r3, [r7, #12]
 8029df8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8029dfa:	2303      	movs	r3, #3
 8029dfc:	e000      	b.n	8029e00 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8029dfe:	2300      	movs	r3, #0
}
 8029e00:	4618      	mov	r0, r3
 8029e02:	3710      	adds	r7, #16
 8029e04:	46bd      	mov	sp, r7
 8029e06:	bd80      	pop	{r7, pc}

08029e08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8029e08:	b580      	push	{r7, lr}
 8029e0a:	b088      	sub	sp, #32
 8029e0c:	af02      	add	r7, sp, #8
 8029e0e:	60f8      	str	r0, [r7, #12]
 8029e10:	60b9      	str	r1, [r7, #8]
 8029e12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8029e14:	4b1b      	ldr	r3, [pc, #108]	; (8029e84 <SPI_EndRxTxTransaction+0x7c>)
 8029e16:	681b      	ldr	r3, [r3, #0]
 8029e18:	4a1b      	ldr	r2, [pc, #108]	; (8029e88 <SPI_EndRxTxTransaction+0x80>)
 8029e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8029e1e:	0d5b      	lsrs	r3, r3, #21
 8029e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8029e24:	fb02 f303 	mul.w	r3, r2, r3
 8029e28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8029e2a:	68fb      	ldr	r3, [r7, #12]
 8029e2c:	685b      	ldr	r3, [r3, #4]
 8029e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029e32:	d112      	bne.n	8029e5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8029e34:	687b      	ldr	r3, [r7, #4]
 8029e36:	9300      	str	r3, [sp, #0]
 8029e38:	68bb      	ldr	r3, [r7, #8]
 8029e3a:	2200      	movs	r2, #0
 8029e3c:	2180      	movs	r1, #128	; 0x80
 8029e3e:	68f8      	ldr	r0, [r7, #12]
 8029e40:	f7ff ff13 	bl	8029c6a <SPI_WaitFlagStateUntilTimeout>
 8029e44:	4603      	mov	r3, r0
 8029e46:	2b00      	cmp	r3, #0
 8029e48:	d016      	beq.n	8029e78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029e4a:	68fb      	ldr	r3, [r7, #12]
 8029e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029e4e:	f043 0220 	orr.w	r2, r3, #32
 8029e52:	68fb      	ldr	r3, [r7, #12]
 8029e54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8029e56:	2303      	movs	r3, #3
 8029e58:	e00f      	b.n	8029e7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8029e5a:	697b      	ldr	r3, [r7, #20]
 8029e5c:	2b00      	cmp	r3, #0
 8029e5e:	d00a      	beq.n	8029e76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8029e60:	697b      	ldr	r3, [r7, #20]
 8029e62:	3b01      	subs	r3, #1
 8029e64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8029e66:	68fb      	ldr	r3, [r7, #12]
 8029e68:	681b      	ldr	r3, [r3, #0]
 8029e6a:	689b      	ldr	r3, [r3, #8]
 8029e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029e70:	2b80      	cmp	r3, #128	; 0x80
 8029e72:	d0f2      	beq.n	8029e5a <SPI_EndRxTxTransaction+0x52>
 8029e74:	e000      	b.n	8029e78 <SPI_EndRxTxTransaction+0x70>
        break;
 8029e76:	bf00      	nop
  }

  return HAL_OK;
 8029e78:	2300      	movs	r3, #0
}
 8029e7a:	4618      	mov	r0, r3
 8029e7c:	3718      	adds	r7, #24
 8029e7e:	46bd      	mov	sp, r7
 8029e80:	bd80      	pop	{r7, pc}
 8029e82:	bf00      	nop
 8029e84:	20000014 	.word	0x20000014
 8029e88:	165e9f81 	.word	0x165e9f81

08029e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8029e8c:	b580      	push	{r7, lr}
 8029e8e:	b082      	sub	sp, #8
 8029e90:	af00      	add	r7, sp, #0
 8029e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029e94:	687b      	ldr	r3, [r7, #4]
 8029e96:	2b00      	cmp	r3, #0
 8029e98:	d101      	bne.n	8029e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8029e9a:	2301      	movs	r3, #1
 8029e9c:	e01d      	b.n	8029eda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029e9e:	687b      	ldr	r3, [r7, #4]
 8029ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029ea4:	b2db      	uxtb	r3, r3
 8029ea6:	2b00      	cmp	r3, #0
 8029ea8:	d106      	bne.n	8029eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029eaa:	687b      	ldr	r3, [r7, #4]
 8029eac:	2200      	movs	r2, #0
 8029eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8029eb2:	6878      	ldr	r0, [r7, #4]
 8029eb4:	f7fc fa10 	bl	80262d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029eb8:	687b      	ldr	r3, [r7, #4]
 8029eba:	2202      	movs	r2, #2
 8029ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029ec0:	687b      	ldr	r3, [r7, #4]
 8029ec2:	681a      	ldr	r2, [r3, #0]
 8029ec4:	687b      	ldr	r3, [r7, #4]
 8029ec6:	3304      	adds	r3, #4
 8029ec8:	4619      	mov	r1, r3
 8029eca:	4610      	mov	r0, r2
 8029ecc:	f000 fc0e 	bl	802a6ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029ed0:	687b      	ldr	r3, [r7, #4]
 8029ed2:	2201      	movs	r2, #1
 8029ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029ed8:	2300      	movs	r3, #0
}
 8029eda:	4618      	mov	r0, r3
 8029edc:	3708      	adds	r7, #8
 8029ede:	46bd      	mov	sp, r7
 8029ee0:	bd80      	pop	{r7, pc}

08029ee2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8029ee2:	b480      	push	{r7}
 8029ee4:	b085      	sub	sp, #20
 8029ee6:	af00      	add	r7, sp, #0
 8029ee8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8029eea:	687b      	ldr	r3, [r7, #4]
 8029eec:	681b      	ldr	r3, [r3, #0]
 8029eee:	68da      	ldr	r2, [r3, #12]
 8029ef0:	687b      	ldr	r3, [r7, #4]
 8029ef2:	681b      	ldr	r3, [r3, #0]
 8029ef4:	f042 0201 	orr.w	r2, r2, #1
 8029ef8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8029efa:	687b      	ldr	r3, [r7, #4]
 8029efc:	681b      	ldr	r3, [r3, #0]
 8029efe:	689b      	ldr	r3, [r3, #8]
 8029f00:	f003 0307 	and.w	r3, r3, #7
 8029f04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029f06:	68fb      	ldr	r3, [r7, #12]
 8029f08:	2b06      	cmp	r3, #6
 8029f0a:	d007      	beq.n	8029f1c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8029f0c:	687b      	ldr	r3, [r7, #4]
 8029f0e:	681b      	ldr	r3, [r3, #0]
 8029f10:	681a      	ldr	r2, [r3, #0]
 8029f12:	687b      	ldr	r3, [r7, #4]
 8029f14:	681b      	ldr	r3, [r3, #0]
 8029f16:	f042 0201 	orr.w	r2, r2, #1
 8029f1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8029f1c:	2300      	movs	r3, #0
}
 8029f1e:	4618      	mov	r0, r3
 8029f20:	3714      	adds	r7, #20
 8029f22:	46bd      	mov	sp, r7
 8029f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f28:	4770      	bx	lr

08029f2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8029f2a:	b580      	push	{r7, lr}
 8029f2c:	b082      	sub	sp, #8
 8029f2e:	af00      	add	r7, sp, #0
 8029f30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029f32:	687b      	ldr	r3, [r7, #4]
 8029f34:	2b00      	cmp	r3, #0
 8029f36:	d101      	bne.n	8029f3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8029f38:	2301      	movs	r3, #1
 8029f3a:	e01d      	b.n	8029f78 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029f3c:	687b      	ldr	r3, [r7, #4]
 8029f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029f42:	b2db      	uxtb	r3, r3
 8029f44:	2b00      	cmp	r3, #0
 8029f46:	d106      	bne.n	8029f56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029f48:	687b      	ldr	r3, [r7, #4]
 8029f4a:	2200      	movs	r2, #0
 8029f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8029f50:	6878      	ldr	r0, [r7, #4]
 8029f52:	f7fc f973 	bl	802623c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029f56:	687b      	ldr	r3, [r7, #4]
 8029f58:	2202      	movs	r2, #2
 8029f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029f5e:	687b      	ldr	r3, [r7, #4]
 8029f60:	681a      	ldr	r2, [r3, #0]
 8029f62:	687b      	ldr	r3, [r7, #4]
 8029f64:	3304      	adds	r3, #4
 8029f66:	4619      	mov	r1, r3
 8029f68:	4610      	mov	r0, r2
 8029f6a:	f000 fbbf 	bl	802a6ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029f6e:	687b      	ldr	r3, [r7, #4]
 8029f70:	2201      	movs	r2, #1
 8029f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029f76:	2300      	movs	r3, #0
}
 8029f78:	4618      	mov	r0, r3
 8029f7a:	3708      	adds	r7, #8
 8029f7c:	46bd      	mov	sp, r7
 8029f7e:	bd80      	pop	{r7, pc}

08029f80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8029f80:	b580      	push	{r7, lr}
 8029f82:	b084      	sub	sp, #16
 8029f84:	af00      	add	r7, sp, #0
 8029f86:	6078      	str	r0, [r7, #4]
 8029f88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8029f8a:	687b      	ldr	r3, [r7, #4]
 8029f8c:	681b      	ldr	r3, [r3, #0]
 8029f8e:	2201      	movs	r2, #1
 8029f90:	6839      	ldr	r1, [r7, #0]
 8029f92:	4618      	mov	r0, r3
 8029f94:	f000 fe94 	bl	802acc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8029f98:	687b      	ldr	r3, [r7, #4]
 8029f9a:	681b      	ldr	r3, [r3, #0]
 8029f9c:	4a15      	ldr	r2, [pc, #84]	; (8029ff4 <HAL_TIM_PWM_Start+0x74>)
 8029f9e:	4293      	cmp	r3, r2
 8029fa0:	d004      	beq.n	8029fac <HAL_TIM_PWM_Start+0x2c>
 8029fa2:	687b      	ldr	r3, [r7, #4]
 8029fa4:	681b      	ldr	r3, [r3, #0]
 8029fa6:	4a14      	ldr	r2, [pc, #80]	; (8029ff8 <HAL_TIM_PWM_Start+0x78>)
 8029fa8:	4293      	cmp	r3, r2
 8029faa:	d101      	bne.n	8029fb0 <HAL_TIM_PWM_Start+0x30>
 8029fac:	2301      	movs	r3, #1
 8029fae:	e000      	b.n	8029fb2 <HAL_TIM_PWM_Start+0x32>
 8029fb0:	2300      	movs	r3, #0
 8029fb2:	2b00      	cmp	r3, #0
 8029fb4:	d007      	beq.n	8029fc6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8029fb6:	687b      	ldr	r3, [r7, #4]
 8029fb8:	681b      	ldr	r3, [r3, #0]
 8029fba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8029fbc:	687b      	ldr	r3, [r7, #4]
 8029fbe:	681b      	ldr	r3, [r3, #0]
 8029fc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029fc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8029fc6:	687b      	ldr	r3, [r7, #4]
 8029fc8:	681b      	ldr	r3, [r3, #0]
 8029fca:	689b      	ldr	r3, [r3, #8]
 8029fcc:	f003 0307 	and.w	r3, r3, #7
 8029fd0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029fd2:	68fb      	ldr	r3, [r7, #12]
 8029fd4:	2b06      	cmp	r3, #6
 8029fd6:	d007      	beq.n	8029fe8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8029fd8:	687b      	ldr	r3, [r7, #4]
 8029fda:	681b      	ldr	r3, [r3, #0]
 8029fdc:	681a      	ldr	r2, [r3, #0]
 8029fde:	687b      	ldr	r3, [r7, #4]
 8029fe0:	681b      	ldr	r3, [r3, #0]
 8029fe2:	f042 0201 	orr.w	r2, r2, #1
 8029fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8029fe8:	2300      	movs	r3, #0
}
 8029fea:	4618      	mov	r0, r3
 8029fec:	3710      	adds	r7, #16
 8029fee:	46bd      	mov	sp, r7
 8029ff0:	bd80      	pop	{r7, pc}
 8029ff2:	bf00      	nop
 8029ff4:	40010000 	.word	0x40010000
 8029ff8:	40010400 	.word	0x40010400

08029ffc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8029ffc:	b580      	push	{r7, lr}
 8029ffe:	b086      	sub	sp, #24
 802a000:	af00      	add	r7, sp, #0
 802a002:	6078      	str	r0, [r7, #4]
 802a004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 802a006:	687b      	ldr	r3, [r7, #4]
 802a008:	2b00      	cmp	r3, #0
 802a00a:	d101      	bne.n	802a010 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 802a00c:	2301      	movs	r3, #1
 802a00e:	e083      	b.n	802a118 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 802a010:	687b      	ldr	r3, [r7, #4]
 802a012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802a016:	b2db      	uxtb	r3, r3
 802a018:	2b00      	cmp	r3, #0
 802a01a:	d106      	bne.n	802a02a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802a01c:	687b      	ldr	r3, [r7, #4]
 802a01e:	2200      	movs	r2, #0
 802a020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 802a024:	6878      	ldr	r0, [r7, #4]
 802a026:	f7fc f9ed 	bl	8026404 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802a02a:	687b      	ldr	r3, [r7, #4]
 802a02c:	2202      	movs	r2, #2
 802a02e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 802a032:	687b      	ldr	r3, [r7, #4]
 802a034:	681b      	ldr	r3, [r3, #0]
 802a036:	689b      	ldr	r3, [r3, #8]
 802a038:	687a      	ldr	r2, [r7, #4]
 802a03a:	6812      	ldr	r2, [r2, #0]
 802a03c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802a040:	f023 0307 	bic.w	r3, r3, #7
 802a044:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802a046:	687b      	ldr	r3, [r7, #4]
 802a048:	681a      	ldr	r2, [r3, #0]
 802a04a:	687b      	ldr	r3, [r7, #4]
 802a04c:	3304      	adds	r3, #4
 802a04e:	4619      	mov	r1, r3
 802a050:	4610      	mov	r0, r2
 802a052:	f000 fb4b 	bl	802a6ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802a056:	687b      	ldr	r3, [r7, #4]
 802a058:	681b      	ldr	r3, [r3, #0]
 802a05a:	689b      	ldr	r3, [r3, #8]
 802a05c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 802a05e:	687b      	ldr	r3, [r7, #4]
 802a060:	681b      	ldr	r3, [r3, #0]
 802a062:	699b      	ldr	r3, [r3, #24]
 802a064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 802a066:	687b      	ldr	r3, [r7, #4]
 802a068:	681b      	ldr	r3, [r3, #0]
 802a06a:	6a1b      	ldr	r3, [r3, #32]
 802a06c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 802a06e:	683b      	ldr	r3, [r7, #0]
 802a070:	681b      	ldr	r3, [r3, #0]
 802a072:	697a      	ldr	r2, [r7, #20]
 802a074:	4313      	orrs	r3, r2
 802a076:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 802a078:	693b      	ldr	r3, [r7, #16]
 802a07a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a07e:	f023 0303 	bic.w	r3, r3, #3
 802a082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 802a084:	683b      	ldr	r3, [r7, #0]
 802a086:	689a      	ldr	r2, [r3, #8]
 802a088:	683b      	ldr	r3, [r7, #0]
 802a08a:	699b      	ldr	r3, [r3, #24]
 802a08c:	021b      	lsls	r3, r3, #8
 802a08e:	4313      	orrs	r3, r2
 802a090:	693a      	ldr	r2, [r7, #16]
 802a092:	4313      	orrs	r3, r2
 802a094:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 802a096:	693b      	ldr	r3, [r7, #16]
 802a098:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 802a09c:	f023 030c 	bic.w	r3, r3, #12
 802a0a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 802a0a2:	693b      	ldr	r3, [r7, #16]
 802a0a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802a0a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802a0ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 802a0ae:	683b      	ldr	r3, [r7, #0]
 802a0b0:	68da      	ldr	r2, [r3, #12]
 802a0b2:	683b      	ldr	r3, [r7, #0]
 802a0b4:	69db      	ldr	r3, [r3, #28]
 802a0b6:	021b      	lsls	r3, r3, #8
 802a0b8:	4313      	orrs	r3, r2
 802a0ba:	693a      	ldr	r2, [r7, #16]
 802a0bc:	4313      	orrs	r3, r2
 802a0be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 802a0c0:	683b      	ldr	r3, [r7, #0]
 802a0c2:	691b      	ldr	r3, [r3, #16]
 802a0c4:	011a      	lsls	r2, r3, #4
 802a0c6:	683b      	ldr	r3, [r7, #0]
 802a0c8:	6a1b      	ldr	r3, [r3, #32]
 802a0ca:	031b      	lsls	r3, r3, #12
 802a0cc:	4313      	orrs	r3, r2
 802a0ce:	693a      	ldr	r2, [r7, #16]
 802a0d0:	4313      	orrs	r3, r2
 802a0d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 802a0d4:	68fb      	ldr	r3, [r7, #12]
 802a0d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 802a0da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 802a0dc:	68fb      	ldr	r3, [r7, #12]
 802a0de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 802a0e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 802a0e4:	683b      	ldr	r3, [r7, #0]
 802a0e6:	685a      	ldr	r2, [r3, #4]
 802a0e8:	683b      	ldr	r3, [r7, #0]
 802a0ea:	695b      	ldr	r3, [r3, #20]
 802a0ec:	011b      	lsls	r3, r3, #4
 802a0ee:	4313      	orrs	r3, r2
 802a0f0:	68fa      	ldr	r2, [r7, #12]
 802a0f2:	4313      	orrs	r3, r2
 802a0f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 802a0f6:	687b      	ldr	r3, [r7, #4]
 802a0f8:	681b      	ldr	r3, [r3, #0]
 802a0fa:	697a      	ldr	r2, [r7, #20]
 802a0fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 802a0fe:	687b      	ldr	r3, [r7, #4]
 802a100:	681b      	ldr	r3, [r3, #0]
 802a102:	693a      	ldr	r2, [r7, #16]
 802a104:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 802a106:	687b      	ldr	r3, [r7, #4]
 802a108:	681b      	ldr	r3, [r3, #0]
 802a10a:	68fa      	ldr	r2, [r7, #12]
 802a10c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802a10e:	687b      	ldr	r3, [r7, #4]
 802a110:	2201      	movs	r2, #1
 802a112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802a116:	2300      	movs	r3, #0
}
 802a118:	4618      	mov	r0, r3
 802a11a:	3718      	adds	r7, #24
 802a11c:	46bd      	mov	sp, r7
 802a11e:	bd80      	pop	{r7, pc}

0802a120 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 802a120:	b580      	push	{r7, lr}
 802a122:	b082      	sub	sp, #8
 802a124:	af00      	add	r7, sp, #0
 802a126:	6078      	str	r0, [r7, #4]
 802a128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 802a12a:	683b      	ldr	r3, [r7, #0]
 802a12c:	2b00      	cmp	r3, #0
 802a12e:	d002      	beq.n	802a136 <HAL_TIM_Encoder_Start+0x16>
 802a130:	2b04      	cmp	r3, #4
 802a132:	d008      	beq.n	802a146 <HAL_TIM_Encoder_Start+0x26>
 802a134:	e00f      	b.n	802a156 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 802a136:	687b      	ldr	r3, [r7, #4]
 802a138:	681b      	ldr	r3, [r3, #0]
 802a13a:	2201      	movs	r2, #1
 802a13c:	2100      	movs	r1, #0
 802a13e:	4618      	mov	r0, r3
 802a140:	f000 fdbe 	bl	802acc0 <TIM_CCxChannelCmd>
      break;
 802a144:	e016      	b.n	802a174 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 802a146:	687b      	ldr	r3, [r7, #4]
 802a148:	681b      	ldr	r3, [r3, #0]
 802a14a:	2201      	movs	r2, #1
 802a14c:	2104      	movs	r1, #4
 802a14e:	4618      	mov	r0, r3
 802a150:	f000 fdb6 	bl	802acc0 <TIM_CCxChannelCmd>
      break;
 802a154:	e00e      	b.n	802a174 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 802a156:	687b      	ldr	r3, [r7, #4]
 802a158:	681b      	ldr	r3, [r3, #0]
 802a15a:	2201      	movs	r2, #1
 802a15c:	2100      	movs	r1, #0
 802a15e:	4618      	mov	r0, r3
 802a160:	f000 fdae 	bl	802acc0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 802a164:	687b      	ldr	r3, [r7, #4]
 802a166:	681b      	ldr	r3, [r3, #0]
 802a168:	2201      	movs	r2, #1
 802a16a:	2104      	movs	r1, #4
 802a16c:	4618      	mov	r0, r3
 802a16e:	f000 fda7 	bl	802acc0 <TIM_CCxChannelCmd>
      break;
 802a172:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 802a174:	687b      	ldr	r3, [r7, #4]
 802a176:	681b      	ldr	r3, [r3, #0]
 802a178:	681a      	ldr	r2, [r3, #0]
 802a17a:	687b      	ldr	r3, [r7, #4]
 802a17c:	681b      	ldr	r3, [r3, #0]
 802a17e:	f042 0201 	orr.w	r2, r2, #1
 802a182:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 802a184:	2300      	movs	r3, #0
}
 802a186:	4618      	mov	r0, r3
 802a188:	3708      	adds	r7, #8
 802a18a:	46bd      	mov	sp, r7
 802a18c:	bd80      	pop	{r7, pc}

0802a18e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802a18e:	b580      	push	{r7, lr}
 802a190:	b082      	sub	sp, #8
 802a192:	af00      	add	r7, sp, #0
 802a194:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 802a196:	687b      	ldr	r3, [r7, #4]
 802a198:	681b      	ldr	r3, [r3, #0]
 802a19a:	691b      	ldr	r3, [r3, #16]
 802a19c:	f003 0302 	and.w	r3, r3, #2
 802a1a0:	2b02      	cmp	r3, #2
 802a1a2:	d122      	bne.n	802a1ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 802a1a4:	687b      	ldr	r3, [r7, #4]
 802a1a6:	681b      	ldr	r3, [r3, #0]
 802a1a8:	68db      	ldr	r3, [r3, #12]
 802a1aa:	f003 0302 	and.w	r3, r3, #2
 802a1ae:	2b02      	cmp	r3, #2
 802a1b0:	d11b      	bne.n	802a1ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802a1b2:	687b      	ldr	r3, [r7, #4]
 802a1b4:	681b      	ldr	r3, [r3, #0]
 802a1b6:	f06f 0202 	mvn.w	r2, #2
 802a1ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802a1bc:	687b      	ldr	r3, [r7, #4]
 802a1be:	2201      	movs	r2, #1
 802a1c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802a1c2:	687b      	ldr	r3, [r7, #4]
 802a1c4:	681b      	ldr	r3, [r3, #0]
 802a1c6:	699b      	ldr	r3, [r3, #24]
 802a1c8:	f003 0303 	and.w	r3, r3, #3
 802a1cc:	2b00      	cmp	r3, #0
 802a1ce:	d003      	beq.n	802a1d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802a1d0:	6878      	ldr	r0, [r7, #4]
 802a1d2:	f000 fa6c 	bl	802a6ae <HAL_TIM_IC_CaptureCallback>
 802a1d6:	e005      	b.n	802a1e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802a1d8:	6878      	ldr	r0, [r7, #4]
 802a1da:	f000 fa5e 	bl	802a69a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802a1de:	6878      	ldr	r0, [r7, #4]
 802a1e0:	f000 fa6f 	bl	802a6c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802a1e4:	687b      	ldr	r3, [r7, #4]
 802a1e6:	2200      	movs	r2, #0
 802a1e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802a1ea:	687b      	ldr	r3, [r7, #4]
 802a1ec:	681b      	ldr	r3, [r3, #0]
 802a1ee:	691b      	ldr	r3, [r3, #16]
 802a1f0:	f003 0304 	and.w	r3, r3, #4
 802a1f4:	2b04      	cmp	r3, #4
 802a1f6:	d122      	bne.n	802a23e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802a1f8:	687b      	ldr	r3, [r7, #4]
 802a1fa:	681b      	ldr	r3, [r3, #0]
 802a1fc:	68db      	ldr	r3, [r3, #12]
 802a1fe:	f003 0304 	and.w	r3, r3, #4
 802a202:	2b04      	cmp	r3, #4
 802a204:	d11b      	bne.n	802a23e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802a206:	687b      	ldr	r3, [r7, #4]
 802a208:	681b      	ldr	r3, [r3, #0]
 802a20a:	f06f 0204 	mvn.w	r2, #4
 802a20e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802a210:	687b      	ldr	r3, [r7, #4]
 802a212:	2202      	movs	r2, #2
 802a214:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802a216:	687b      	ldr	r3, [r7, #4]
 802a218:	681b      	ldr	r3, [r3, #0]
 802a21a:	699b      	ldr	r3, [r3, #24]
 802a21c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802a220:	2b00      	cmp	r3, #0
 802a222:	d003      	beq.n	802a22c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802a224:	6878      	ldr	r0, [r7, #4]
 802a226:	f000 fa42 	bl	802a6ae <HAL_TIM_IC_CaptureCallback>
 802a22a:	e005      	b.n	802a238 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802a22c:	6878      	ldr	r0, [r7, #4]
 802a22e:	f000 fa34 	bl	802a69a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802a232:	6878      	ldr	r0, [r7, #4]
 802a234:	f000 fa45 	bl	802a6c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802a238:	687b      	ldr	r3, [r7, #4]
 802a23a:	2200      	movs	r2, #0
 802a23c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802a23e:	687b      	ldr	r3, [r7, #4]
 802a240:	681b      	ldr	r3, [r3, #0]
 802a242:	691b      	ldr	r3, [r3, #16]
 802a244:	f003 0308 	and.w	r3, r3, #8
 802a248:	2b08      	cmp	r3, #8
 802a24a:	d122      	bne.n	802a292 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802a24c:	687b      	ldr	r3, [r7, #4]
 802a24e:	681b      	ldr	r3, [r3, #0]
 802a250:	68db      	ldr	r3, [r3, #12]
 802a252:	f003 0308 	and.w	r3, r3, #8
 802a256:	2b08      	cmp	r3, #8
 802a258:	d11b      	bne.n	802a292 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802a25a:	687b      	ldr	r3, [r7, #4]
 802a25c:	681b      	ldr	r3, [r3, #0]
 802a25e:	f06f 0208 	mvn.w	r2, #8
 802a262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802a264:	687b      	ldr	r3, [r7, #4]
 802a266:	2204      	movs	r2, #4
 802a268:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802a26a:	687b      	ldr	r3, [r7, #4]
 802a26c:	681b      	ldr	r3, [r3, #0]
 802a26e:	69db      	ldr	r3, [r3, #28]
 802a270:	f003 0303 	and.w	r3, r3, #3
 802a274:	2b00      	cmp	r3, #0
 802a276:	d003      	beq.n	802a280 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802a278:	6878      	ldr	r0, [r7, #4]
 802a27a:	f000 fa18 	bl	802a6ae <HAL_TIM_IC_CaptureCallback>
 802a27e:	e005      	b.n	802a28c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802a280:	6878      	ldr	r0, [r7, #4]
 802a282:	f000 fa0a 	bl	802a69a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802a286:	6878      	ldr	r0, [r7, #4]
 802a288:	f000 fa1b 	bl	802a6c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802a28c:	687b      	ldr	r3, [r7, #4]
 802a28e:	2200      	movs	r2, #0
 802a290:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 802a292:	687b      	ldr	r3, [r7, #4]
 802a294:	681b      	ldr	r3, [r3, #0]
 802a296:	691b      	ldr	r3, [r3, #16]
 802a298:	f003 0310 	and.w	r3, r3, #16
 802a29c:	2b10      	cmp	r3, #16
 802a29e:	d122      	bne.n	802a2e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802a2a0:	687b      	ldr	r3, [r7, #4]
 802a2a2:	681b      	ldr	r3, [r3, #0]
 802a2a4:	68db      	ldr	r3, [r3, #12]
 802a2a6:	f003 0310 	and.w	r3, r3, #16
 802a2aa:	2b10      	cmp	r3, #16
 802a2ac:	d11b      	bne.n	802a2e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802a2ae:	687b      	ldr	r3, [r7, #4]
 802a2b0:	681b      	ldr	r3, [r3, #0]
 802a2b2:	f06f 0210 	mvn.w	r2, #16
 802a2b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802a2b8:	687b      	ldr	r3, [r7, #4]
 802a2ba:	2208      	movs	r2, #8
 802a2bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802a2be:	687b      	ldr	r3, [r7, #4]
 802a2c0:	681b      	ldr	r3, [r3, #0]
 802a2c2:	69db      	ldr	r3, [r3, #28]
 802a2c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802a2c8:	2b00      	cmp	r3, #0
 802a2ca:	d003      	beq.n	802a2d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802a2cc:	6878      	ldr	r0, [r7, #4]
 802a2ce:	f000 f9ee 	bl	802a6ae <HAL_TIM_IC_CaptureCallback>
 802a2d2:	e005      	b.n	802a2e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802a2d4:	6878      	ldr	r0, [r7, #4]
 802a2d6:	f000 f9e0 	bl	802a69a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802a2da:	6878      	ldr	r0, [r7, #4]
 802a2dc:	f000 f9f1 	bl	802a6c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802a2e0:	687b      	ldr	r3, [r7, #4]
 802a2e2:	2200      	movs	r2, #0
 802a2e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 802a2e6:	687b      	ldr	r3, [r7, #4]
 802a2e8:	681b      	ldr	r3, [r3, #0]
 802a2ea:	691b      	ldr	r3, [r3, #16]
 802a2ec:	f003 0301 	and.w	r3, r3, #1
 802a2f0:	2b01      	cmp	r3, #1
 802a2f2:	d10e      	bne.n	802a312 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802a2f4:	687b      	ldr	r3, [r7, #4]
 802a2f6:	681b      	ldr	r3, [r3, #0]
 802a2f8:	68db      	ldr	r3, [r3, #12]
 802a2fa:	f003 0301 	and.w	r3, r3, #1
 802a2fe:	2b01      	cmp	r3, #1
 802a300:	d107      	bne.n	802a312 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802a302:	687b      	ldr	r3, [r7, #4]
 802a304:	681b      	ldr	r3, [r3, #0]
 802a306:	f06f 0201 	mvn.w	r2, #1
 802a30a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802a30c:	6878      	ldr	r0, [r7, #4]
 802a30e:	f7f9 fae3 	bl	80238d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802a312:	687b      	ldr	r3, [r7, #4]
 802a314:	681b      	ldr	r3, [r3, #0]
 802a316:	691b      	ldr	r3, [r3, #16]
 802a318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802a31c:	2b80      	cmp	r3, #128	; 0x80
 802a31e:	d10e      	bne.n	802a33e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802a320:	687b      	ldr	r3, [r7, #4]
 802a322:	681b      	ldr	r3, [r3, #0]
 802a324:	68db      	ldr	r3, [r3, #12]
 802a326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802a32a:	2b80      	cmp	r3, #128	; 0x80
 802a32c:	d107      	bne.n	802a33e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802a32e:	687b      	ldr	r3, [r7, #4]
 802a330:	681b      	ldr	r3, [r3, #0]
 802a332:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802a336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802a338:	6878      	ldr	r0, [r7, #4]
 802a33a:	f000 fdbf 	bl	802aebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802a33e:	687b      	ldr	r3, [r7, #4]
 802a340:	681b      	ldr	r3, [r3, #0]
 802a342:	691b      	ldr	r3, [r3, #16]
 802a344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802a348:	2b40      	cmp	r3, #64	; 0x40
 802a34a:	d10e      	bne.n	802a36a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802a34c:	687b      	ldr	r3, [r7, #4]
 802a34e:	681b      	ldr	r3, [r3, #0]
 802a350:	68db      	ldr	r3, [r3, #12]
 802a352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802a356:	2b40      	cmp	r3, #64	; 0x40
 802a358:	d107      	bne.n	802a36a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802a35a:	687b      	ldr	r3, [r7, #4]
 802a35c:	681b      	ldr	r3, [r3, #0]
 802a35e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802a362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802a364:	6878      	ldr	r0, [r7, #4]
 802a366:	f000 f9b6 	bl	802a6d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802a36a:	687b      	ldr	r3, [r7, #4]
 802a36c:	681b      	ldr	r3, [r3, #0]
 802a36e:	691b      	ldr	r3, [r3, #16]
 802a370:	f003 0320 	and.w	r3, r3, #32
 802a374:	2b20      	cmp	r3, #32
 802a376:	d10e      	bne.n	802a396 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802a378:	687b      	ldr	r3, [r7, #4]
 802a37a:	681b      	ldr	r3, [r3, #0]
 802a37c:	68db      	ldr	r3, [r3, #12]
 802a37e:	f003 0320 	and.w	r3, r3, #32
 802a382:	2b20      	cmp	r3, #32
 802a384:	d107      	bne.n	802a396 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802a386:	687b      	ldr	r3, [r7, #4]
 802a388:	681b      	ldr	r3, [r3, #0]
 802a38a:	f06f 0220 	mvn.w	r2, #32
 802a38e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802a390:	6878      	ldr	r0, [r7, #4]
 802a392:	f000 fd89 	bl	802aea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802a396:	bf00      	nop
 802a398:	3708      	adds	r7, #8
 802a39a:	46bd      	mov	sp, r7
 802a39c:	bd80      	pop	{r7, pc}
	...

0802a3a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 802a3a0:	b580      	push	{r7, lr}
 802a3a2:	b084      	sub	sp, #16
 802a3a4:	af00      	add	r7, sp, #0
 802a3a6:	60f8      	str	r0, [r7, #12]
 802a3a8:	60b9      	str	r1, [r7, #8]
 802a3aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 802a3ac:	68fb      	ldr	r3, [r7, #12]
 802a3ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a3b2:	2b01      	cmp	r3, #1
 802a3b4:	d101      	bne.n	802a3ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 802a3b6:	2302      	movs	r3, #2
 802a3b8:	e0b4      	b.n	802a524 <HAL_TIM_PWM_ConfigChannel+0x184>
 802a3ba:	68fb      	ldr	r3, [r7, #12]
 802a3bc:	2201      	movs	r2, #1
 802a3be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802a3c2:	68fb      	ldr	r3, [r7, #12]
 802a3c4:	2202      	movs	r2, #2
 802a3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 802a3ca:	687b      	ldr	r3, [r7, #4]
 802a3cc:	2b0c      	cmp	r3, #12
 802a3ce:	f200 809f 	bhi.w	802a510 <HAL_TIM_PWM_ConfigChannel+0x170>
 802a3d2:	a201      	add	r2, pc, #4	; (adr r2, 802a3d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 802a3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a3d8:	0802a40d 	.word	0x0802a40d
 802a3dc:	0802a511 	.word	0x0802a511
 802a3e0:	0802a511 	.word	0x0802a511
 802a3e4:	0802a511 	.word	0x0802a511
 802a3e8:	0802a44d 	.word	0x0802a44d
 802a3ec:	0802a511 	.word	0x0802a511
 802a3f0:	0802a511 	.word	0x0802a511
 802a3f4:	0802a511 	.word	0x0802a511
 802a3f8:	0802a48f 	.word	0x0802a48f
 802a3fc:	0802a511 	.word	0x0802a511
 802a400:	0802a511 	.word	0x0802a511
 802a404:	0802a511 	.word	0x0802a511
 802a408:	0802a4cf 	.word	0x0802a4cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 802a40c:	68fb      	ldr	r3, [r7, #12]
 802a40e:	681b      	ldr	r3, [r3, #0]
 802a410:	68b9      	ldr	r1, [r7, #8]
 802a412:	4618      	mov	r0, r3
 802a414:	f000 fa0a 	bl	802a82c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 802a418:	68fb      	ldr	r3, [r7, #12]
 802a41a:	681b      	ldr	r3, [r3, #0]
 802a41c:	699a      	ldr	r2, [r3, #24]
 802a41e:	68fb      	ldr	r3, [r7, #12]
 802a420:	681b      	ldr	r3, [r3, #0]
 802a422:	f042 0208 	orr.w	r2, r2, #8
 802a426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 802a428:	68fb      	ldr	r3, [r7, #12]
 802a42a:	681b      	ldr	r3, [r3, #0]
 802a42c:	699a      	ldr	r2, [r3, #24]
 802a42e:	68fb      	ldr	r3, [r7, #12]
 802a430:	681b      	ldr	r3, [r3, #0]
 802a432:	f022 0204 	bic.w	r2, r2, #4
 802a436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 802a438:	68fb      	ldr	r3, [r7, #12]
 802a43a:	681b      	ldr	r3, [r3, #0]
 802a43c:	6999      	ldr	r1, [r3, #24]
 802a43e:	68bb      	ldr	r3, [r7, #8]
 802a440:	691a      	ldr	r2, [r3, #16]
 802a442:	68fb      	ldr	r3, [r7, #12]
 802a444:	681b      	ldr	r3, [r3, #0]
 802a446:	430a      	orrs	r2, r1
 802a448:	619a      	str	r2, [r3, #24]
      break;
 802a44a:	e062      	b.n	802a512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 802a44c:	68fb      	ldr	r3, [r7, #12]
 802a44e:	681b      	ldr	r3, [r3, #0]
 802a450:	68b9      	ldr	r1, [r7, #8]
 802a452:	4618      	mov	r0, r3
 802a454:	f000 fa5a 	bl	802a90c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 802a458:	68fb      	ldr	r3, [r7, #12]
 802a45a:	681b      	ldr	r3, [r3, #0]
 802a45c:	699a      	ldr	r2, [r3, #24]
 802a45e:	68fb      	ldr	r3, [r7, #12]
 802a460:	681b      	ldr	r3, [r3, #0]
 802a462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802a466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 802a468:	68fb      	ldr	r3, [r7, #12]
 802a46a:	681b      	ldr	r3, [r3, #0]
 802a46c:	699a      	ldr	r2, [r3, #24]
 802a46e:	68fb      	ldr	r3, [r7, #12]
 802a470:	681b      	ldr	r3, [r3, #0]
 802a472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802a476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 802a478:	68fb      	ldr	r3, [r7, #12]
 802a47a:	681b      	ldr	r3, [r3, #0]
 802a47c:	6999      	ldr	r1, [r3, #24]
 802a47e:	68bb      	ldr	r3, [r7, #8]
 802a480:	691b      	ldr	r3, [r3, #16]
 802a482:	021a      	lsls	r2, r3, #8
 802a484:	68fb      	ldr	r3, [r7, #12]
 802a486:	681b      	ldr	r3, [r3, #0]
 802a488:	430a      	orrs	r2, r1
 802a48a:	619a      	str	r2, [r3, #24]
      break;
 802a48c:	e041      	b.n	802a512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 802a48e:	68fb      	ldr	r3, [r7, #12]
 802a490:	681b      	ldr	r3, [r3, #0]
 802a492:	68b9      	ldr	r1, [r7, #8]
 802a494:	4618      	mov	r0, r3
 802a496:	f000 faaf 	bl	802a9f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 802a49a:	68fb      	ldr	r3, [r7, #12]
 802a49c:	681b      	ldr	r3, [r3, #0]
 802a49e:	69da      	ldr	r2, [r3, #28]
 802a4a0:	68fb      	ldr	r3, [r7, #12]
 802a4a2:	681b      	ldr	r3, [r3, #0]
 802a4a4:	f042 0208 	orr.w	r2, r2, #8
 802a4a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 802a4aa:	68fb      	ldr	r3, [r7, #12]
 802a4ac:	681b      	ldr	r3, [r3, #0]
 802a4ae:	69da      	ldr	r2, [r3, #28]
 802a4b0:	68fb      	ldr	r3, [r7, #12]
 802a4b2:	681b      	ldr	r3, [r3, #0]
 802a4b4:	f022 0204 	bic.w	r2, r2, #4
 802a4b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 802a4ba:	68fb      	ldr	r3, [r7, #12]
 802a4bc:	681b      	ldr	r3, [r3, #0]
 802a4be:	69d9      	ldr	r1, [r3, #28]
 802a4c0:	68bb      	ldr	r3, [r7, #8]
 802a4c2:	691a      	ldr	r2, [r3, #16]
 802a4c4:	68fb      	ldr	r3, [r7, #12]
 802a4c6:	681b      	ldr	r3, [r3, #0]
 802a4c8:	430a      	orrs	r2, r1
 802a4ca:	61da      	str	r2, [r3, #28]
      break;
 802a4cc:	e021      	b.n	802a512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 802a4ce:	68fb      	ldr	r3, [r7, #12]
 802a4d0:	681b      	ldr	r3, [r3, #0]
 802a4d2:	68b9      	ldr	r1, [r7, #8]
 802a4d4:	4618      	mov	r0, r3
 802a4d6:	f000 fb03 	bl	802aae0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 802a4da:	68fb      	ldr	r3, [r7, #12]
 802a4dc:	681b      	ldr	r3, [r3, #0]
 802a4de:	69da      	ldr	r2, [r3, #28]
 802a4e0:	68fb      	ldr	r3, [r7, #12]
 802a4e2:	681b      	ldr	r3, [r3, #0]
 802a4e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802a4e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 802a4ea:	68fb      	ldr	r3, [r7, #12]
 802a4ec:	681b      	ldr	r3, [r3, #0]
 802a4ee:	69da      	ldr	r2, [r3, #28]
 802a4f0:	68fb      	ldr	r3, [r7, #12]
 802a4f2:	681b      	ldr	r3, [r3, #0]
 802a4f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802a4f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 802a4fa:	68fb      	ldr	r3, [r7, #12]
 802a4fc:	681b      	ldr	r3, [r3, #0]
 802a4fe:	69d9      	ldr	r1, [r3, #28]
 802a500:	68bb      	ldr	r3, [r7, #8]
 802a502:	691b      	ldr	r3, [r3, #16]
 802a504:	021a      	lsls	r2, r3, #8
 802a506:	68fb      	ldr	r3, [r7, #12]
 802a508:	681b      	ldr	r3, [r3, #0]
 802a50a:	430a      	orrs	r2, r1
 802a50c:	61da      	str	r2, [r3, #28]
      break;
 802a50e:	e000      	b.n	802a512 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 802a510:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 802a512:	68fb      	ldr	r3, [r7, #12]
 802a514:	2201      	movs	r2, #1
 802a516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a51a:	68fb      	ldr	r3, [r7, #12]
 802a51c:	2200      	movs	r2, #0
 802a51e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a522:	2300      	movs	r3, #0
}
 802a524:	4618      	mov	r0, r3
 802a526:	3710      	adds	r7, #16
 802a528:	46bd      	mov	sp, r7
 802a52a:	bd80      	pop	{r7, pc}

0802a52c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 802a52c:	b580      	push	{r7, lr}
 802a52e:	b084      	sub	sp, #16
 802a530:	af00      	add	r7, sp, #0
 802a532:	6078      	str	r0, [r7, #4]
 802a534:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 802a536:	687b      	ldr	r3, [r7, #4]
 802a538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a53c:	2b01      	cmp	r3, #1
 802a53e:	d101      	bne.n	802a544 <HAL_TIM_ConfigClockSource+0x18>
 802a540:	2302      	movs	r3, #2
 802a542:	e0a6      	b.n	802a692 <HAL_TIM_ConfigClockSource+0x166>
 802a544:	687b      	ldr	r3, [r7, #4]
 802a546:	2201      	movs	r2, #1
 802a548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802a54c:	687b      	ldr	r3, [r7, #4]
 802a54e:	2202      	movs	r2, #2
 802a550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 802a554:	687b      	ldr	r3, [r7, #4]
 802a556:	681b      	ldr	r3, [r3, #0]
 802a558:	689b      	ldr	r3, [r3, #8]
 802a55a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802a55c:	68fb      	ldr	r3, [r7, #12]
 802a55e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802a562:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802a564:	68fb      	ldr	r3, [r7, #12]
 802a566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802a56a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 802a56c:	687b      	ldr	r3, [r7, #4]
 802a56e:	681b      	ldr	r3, [r3, #0]
 802a570:	68fa      	ldr	r2, [r7, #12]
 802a572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 802a574:	683b      	ldr	r3, [r7, #0]
 802a576:	681b      	ldr	r3, [r3, #0]
 802a578:	2b40      	cmp	r3, #64	; 0x40
 802a57a:	d067      	beq.n	802a64c <HAL_TIM_ConfigClockSource+0x120>
 802a57c:	2b40      	cmp	r3, #64	; 0x40
 802a57e:	d80b      	bhi.n	802a598 <HAL_TIM_ConfigClockSource+0x6c>
 802a580:	2b10      	cmp	r3, #16
 802a582:	d073      	beq.n	802a66c <HAL_TIM_ConfigClockSource+0x140>
 802a584:	2b10      	cmp	r3, #16
 802a586:	d802      	bhi.n	802a58e <HAL_TIM_ConfigClockSource+0x62>
 802a588:	2b00      	cmp	r3, #0
 802a58a:	d06f      	beq.n	802a66c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 802a58c:	e078      	b.n	802a680 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802a58e:	2b20      	cmp	r3, #32
 802a590:	d06c      	beq.n	802a66c <HAL_TIM_ConfigClockSource+0x140>
 802a592:	2b30      	cmp	r3, #48	; 0x30
 802a594:	d06a      	beq.n	802a66c <HAL_TIM_ConfigClockSource+0x140>
      break;
 802a596:	e073      	b.n	802a680 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802a598:	2b70      	cmp	r3, #112	; 0x70
 802a59a:	d00d      	beq.n	802a5b8 <HAL_TIM_ConfigClockSource+0x8c>
 802a59c:	2b70      	cmp	r3, #112	; 0x70
 802a59e:	d804      	bhi.n	802a5aa <HAL_TIM_ConfigClockSource+0x7e>
 802a5a0:	2b50      	cmp	r3, #80	; 0x50
 802a5a2:	d033      	beq.n	802a60c <HAL_TIM_ConfigClockSource+0xe0>
 802a5a4:	2b60      	cmp	r3, #96	; 0x60
 802a5a6:	d041      	beq.n	802a62c <HAL_TIM_ConfigClockSource+0x100>
      break;
 802a5a8:	e06a      	b.n	802a680 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802a5aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a5ae:	d066      	beq.n	802a67e <HAL_TIM_ConfigClockSource+0x152>
 802a5b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802a5b4:	d017      	beq.n	802a5e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 802a5b6:	e063      	b.n	802a680 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 802a5b8:	687b      	ldr	r3, [r7, #4]
 802a5ba:	6818      	ldr	r0, [r3, #0]
 802a5bc:	683b      	ldr	r3, [r7, #0]
 802a5be:	6899      	ldr	r1, [r3, #8]
 802a5c0:	683b      	ldr	r3, [r7, #0]
 802a5c2:	685a      	ldr	r2, [r3, #4]
 802a5c4:	683b      	ldr	r3, [r7, #0]
 802a5c6:	68db      	ldr	r3, [r3, #12]
 802a5c8:	f000 fb5a 	bl	802ac80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 802a5cc:	687b      	ldr	r3, [r7, #4]
 802a5ce:	681b      	ldr	r3, [r3, #0]
 802a5d0:	689b      	ldr	r3, [r3, #8]
 802a5d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 802a5d4:	68fb      	ldr	r3, [r7, #12]
 802a5d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 802a5da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 802a5dc:	687b      	ldr	r3, [r7, #4]
 802a5de:	681b      	ldr	r3, [r3, #0]
 802a5e0:	68fa      	ldr	r2, [r7, #12]
 802a5e2:	609a      	str	r2, [r3, #8]
      break;
 802a5e4:	e04c      	b.n	802a680 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 802a5e6:	687b      	ldr	r3, [r7, #4]
 802a5e8:	6818      	ldr	r0, [r3, #0]
 802a5ea:	683b      	ldr	r3, [r7, #0]
 802a5ec:	6899      	ldr	r1, [r3, #8]
 802a5ee:	683b      	ldr	r3, [r7, #0]
 802a5f0:	685a      	ldr	r2, [r3, #4]
 802a5f2:	683b      	ldr	r3, [r7, #0]
 802a5f4:	68db      	ldr	r3, [r3, #12]
 802a5f6:	f000 fb43 	bl	802ac80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802a5fa:	687b      	ldr	r3, [r7, #4]
 802a5fc:	681b      	ldr	r3, [r3, #0]
 802a5fe:	689a      	ldr	r2, [r3, #8]
 802a600:	687b      	ldr	r3, [r7, #4]
 802a602:	681b      	ldr	r3, [r3, #0]
 802a604:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802a608:	609a      	str	r2, [r3, #8]
      break;
 802a60a:	e039      	b.n	802a680 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802a60c:	687b      	ldr	r3, [r7, #4]
 802a60e:	6818      	ldr	r0, [r3, #0]
 802a610:	683b      	ldr	r3, [r7, #0]
 802a612:	6859      	ldr	r1, [r3, #4]
 802a614:	683b      	ldr	r3, [r7, #0]
 802a616:	68db      	ldr	r3, [r3, #12]
 802a618:	461a      	mov	r2, r3
 802a61a:	f000 fab7 	bl	802ab8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 802a61e:	687b      	ldr	r3, [r7, #4]
 802a620:	681b      	ldr	r3, [r3, #0]
 802a622:	2150      	movs	r1, #80	; 0x50
 802a624:	4618      	mov	r0, r3
 802a626:	f000 fb10 	bl	802ac4a <TIM_ITRx_SetConfig>
      break;
 802a62a:	e029      	b.n	802a680 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 802a62c:	687b      	ldr	r3, [r7, #4]
 802a62e:	6818      	ldr	r0, [r3, #0]
 802a630:	683b      	ldr	r3, [r7, #0]
 802a632:	6859      	ldr	r1, [r3, #4]
 802a634:	683b      	ldr	r3, [r7, #0]
 802a636:	68db      	ldr	r3, [r3, #12]
 802a638:	461a      	mov	r2, r3
 802a63a:	f000 fad6 	bl	802abea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802a63e:	687b      	ldr	r3, [r7, #4]
 802a640:	681b      	ldr	r3, [r3, #0]
 802a642:	2160      	movs	r1, #96	; 0x60
 802a644:	4618      	mov	r0, r3
 802a646:	f000 fb00 	bl	802ac4a <TIM_ITRx_SetConfig>
      break;
 802a64a:	e019      	b.n	802a680 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802a64c:	687b      	ldr	r3, [r7, #4]
 802a64e:	6818      	ldr	r0, [r3, #0]
 802a650:	683b      	ldr	r3, [r7, #0]
 802a652:	6859      	ldr	r1, [r3, #4]
 802a654:	683b      	ldr	r3, [r7, #0]
 802a656:	68db      	ldr	r3, [r3, #12]
 802a658:	461a      	mov	r2, r3
 802a65a:	f000 fa97 	bl	802ab8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802a65e:	687b      	ldr	r3, [r7, #4]
 802a660:	681b      	ldr	r3, [r3, #0]
 802a662:	2140      	movs	r1, #64	; 0x40
 802a664:	4618      	mov	r0, r3
 802a666:	f000 faf0 	bl	802ac4a <TIM_ITRx_SetConfig>
      break;
 802a66a:	e009      	b.n	802a680 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802a66c:	687b      	ldr	r3, [r7, #4]
 802a66e:	681a      	ldr	r2, [r3, #0]
 802a670:	683b      	ldr	r3, [r7, #0]
 802a672:	681b      	ldr	r3, [r3, #0]
 802a674:	4619      	mov	r1, r3
 802a676:	4610      	mov	r0, r2
 802a678:	f000 fae7 	bl	802ac4a <TIM_ITRx_SetConfig>
      break;
 802a67c:	e000      	b.n	802a680 <HAL_TIM_ConfigClockSource+0x154>
      break;
 802a67e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802a680:	687b      	ldr	r3, [r7, #4]
 802a682:	2201      	movs	r2, #1
 802a684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a688:	687b      	ldr	r3, [r7, #4]
 802a68a:	2200      	movs	r2, #0
 802a68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a690:	2300      	movs	r3, #0
}
 802a692:	4618      	mov	r0, r3
 802a694:	3710      	adds	r7, #16
 802a696:	46bd      	mov	sp, r7
 802a698:	bd80      	pop	{r7, pc}

0802a69a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802a69a:	b480      	push	{r7}
 802a69c:	b083      	sub	sp, #12
 802a69e:	af00      	add	r7, sp, #0
 802a6a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802a6a2:	bf00      	nop
 802a6a4:	370c      	adds	r7, #12
 802a6a6:	46bd      	mov	sp, r7
 802a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6ac:	4770      	bx	lr

0802a6ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802a6ae:	b480      	push	{r7}
 802a6b0:	b083      	sub	sp, #12
 802a6b2:	af00      	add	r7, sp, #0
 802a6b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802a6b6:	bf00      	nop
 802a6b8:	370c      	adds	r7, #12
 802a6ba:	46bd      	mov	sp, r7
 802a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6c0:	4770      	bx	lr

0802a6c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802a6c2:	b480      	push	{r7}
 802a6c4:	b083      	sub	sp, #12
 802a6c6:	af00      	add	r7, sp, #0
 802a6c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802a6ca:	bf00      	nop
 802a6cc:	370c      	adds	r7, #12
 802a6ce:	46bd      	mov	sp, r7
 802a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6d4:	4770      	bx	lr

0802a6d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802a6d6:	b480      	push	{r7}
 802a6d8:	b083      	sub	sp, #12
 802a6da:	af00      	add	r7, sp, #0
 802a6dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802a6de:	bf00      	nop
 802a6e0:	370c      	adds	r7, #12
 802a6e2:	46bd      	mov	sp, r7
 802a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6e8:	4770      	bx	lr
	...

0802a6ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 802a6ec:	b480      	push	{r7}
 802a6ee:	b085      	sub	sp, #20
 802a6f0:	af00      	add	r7, sp, #0
 802a6f2:	6078      	str	r0, [r7, #4]
 802a6f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802a6f6:	687b      	ldr	r3, [r7, #4]
 802a6f8:	681b      	ldr	r3, [r3, #0]
 802a6fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802a6fc:	687b      	ldr	r3, [r7, #4]
 802a6fe:	4a40      	ldr	r2, [pc, #256]	; (802a800 <TIM_Base_SetConfig+0x114>)
 802a700:	4293      	cmp	r3, r2
 802a702:	d013      	beq.n	802a72c <TIM_Base_SetConfig+0x40>
 802a704:	687b      	ldr	r3, [r7, #4]
 802a706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a70a:	d00f      	beq.n	802a72c <TIM_Base_SetConfig+0x40>
 802a70c:	687b      	ldr	r3, [r7, #4]
 802a70e:	4a3d      	ldr	r2, [pc, #244]	; (802a804 <TIM_Base_SetConfig+0x118>)
 802a710:	4293      	cmp	r3, r2
 802a712:	d00b      	beq.n	802a72c <TIM_Base_SetConfig+0x40>
 802a714:	687b      	ldr	r3, [r7, #4]
 802a716:	4a3c      	ldr	r2, [pc, #240]	; (802a808 <TIM_Base_SetConfig+0x11c>)
 802a718:	4293      	cmp	r3, r2
 802a71a:	d007      	beq.n	802a72c <TIM_Base_SetConfig+0x40>
 802a71c:	687b      	ldr	r3, [r7, #4]
 802a71e:	4a3b      	ldr	r2, [pc, #236]	; (802a80c <TIM_Base_SetConfig+0x120>)
 802a720:	4293      	cmp	r3, r2
 802a722:	d003      	beq.n	802a72c <TIM_Base_SetConfig+0x40>
 802a724:	687b      	ldr	r3, [r7, #4]
 802a726:	4a3a      	ldr	r2, [pc, #232]	; (802a810 <TIM_Base_SetConfig+0x124>)
 802a728:	4293      	cmp	r3, r2
 802a72a:	d108      	bne.n	802a73e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802a72c:	68fb      	ldr	r3, [r7, #12]
 802a72e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802a734:	683b      	ldr	r3, [r7, #0]
 802a736:	685b      	ldr	r3, [r3, #4]
 802a738:	68fa      	ldr	r2, [r7, #12]
 802a73a:	4313      	orrs	r3, r2
 802a73c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802a73e:	687b      	ldr	r3, [r7, #4]
 802a740:	4a2f      	ldr	r2, [pc, #188]	; (802a800 <TIM_Base_SetConfig+0x114>)
 802a742:	4293      	cmp	r3, r2
 802a744:	d02b      	beq.n	802a79e <TIM_Base_SetConfig+0xb2>
 802a746:	687b      	ldr	r3, [r7, #4]
 802a748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a74c:	d027      	beq.n	802a79e <TIM_Base_SetConfig+0xb2>
 802a74e:	687b      	ldr	r3, [r7, #4]
 802a750:	4a2c      	ldr	r2, [pc, #176]	; (802a804 <TIM_Base_SetConfig+0x118>)
 802a752:	4293      	cmp	r3, r2
 802a754:	d023      	beq.n	802a79e <TIM_Base_SetConfig+0xb2>
 802a756:	687b      	ldr	r3, [r7, #4]
 802a758:	4a2b      	ldr	r2, [pc, #172]	; (802a808 <TIM_Base_SetConfig+0x11c>)
 802a75a:	4293      	cmp	r3, r2
 802a75c:	d01f      	beq.n	802a79e <TIM_Base_SetConfig+0xb2>
 802a75e:	687b      	ldr	r3, [r7, #4]
 802a760:	4a2a      	ldr	r2, [pc, #168]	; (802a80c <TIM_Base_SetConfig+0x120>)
 802a762:	4293      	cmp	r3, r2
 802a764:	d01b      	beq.n	802a79e <TIM_Base_SetConfig+0xb2>
 802a766:	687b      	ldr	r3, [r7, #4]
 802a768:	4a29      	ldr	r2, [pc, #164]	; (802a810 <TIM_Base_SetConfig+0x124>)
 802a76a:	4293      	cmp	r3, r2
 802a76c:	d017      	beq.n	802a79e <TIM_Base_SetConfig+0xb2>
 802a76e:	687b      	ldr	r3, [r7, #4]
 802a770:	4a28      	ldr	r2, [pc, #160]	; (802a814 <TIM_Base_SetConfig+0x128>)
 802a772:	4293      	cmp	r3, r2
 802a774:	d013      	beq.n	802a79e <TIM_Base_SetConfig+0xb2>
 802a776:	687b      	ldr	r3, [r7, #4]
 802a778:	4a27      	ldr	r2, [pc, #156]	; (802a818 <TIM_Base_SetConfig+0x12c>)
 802a77a:	4293      	cmp	r3, r2
 802a77c:	d00f      	beq.n	802a79e <TIM_Base_SetConfig+0xb2>
 802a77e:	687b      	ldr	r3, [r7, #4]
 802a780:	4a26      	ldr	r2, [pc, #152]	; (802a81c <TIM_Base_SetConfig+0x130>)
 802a782:	4293      	cmp	r3, r2
 802a784:	d00b      	beq.n	802a79e <TIM_Base_SetConfig+0xb2>
 802a786:	687b      	ldr	r3, [r7, #4]
 802a788:	4a25      	ldr	r2, [pc, #148]	; (802a820 <TIM_Base_SetConfig+0x134>)
 802a78a:	4293      	cmp	r3, r2
 802a78c:	d007      	beq.n	802a79e <TIM_Base_SetConfig+0xb2>
 802a78e:	687b      	ldr	r3, [r7, #4]
 802a790:	4a24      	ldr	r2, [pc, #144]	; (802a824 <TIM_Base_SetConfig+0x138>)
 802a792:	4293      	cmp	r3, r2
 802a794:	d003      	beq.n	802a79e <TIM_Base_SetConfig+0xb2>
 802a796:	687b      	ldr	r3, [r7, #4]
 802a798:	4a23      	ldr	r2, [pc, #140]	; (802a828 <TIM_Base_SetConfig+0x13c>)
 802a79a:	4293      	cmp	r3, r2
 802a79c:	d108      	bne.n	802a7b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802a79e:	68fb      	ldr	r3, [r7, #12]
 802a7a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a7a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802a7a6:	683b      	ldr	r3, [r7, #0]
 802a7a8:	68db      	ldr	r3, [r3, #12]
 802a7aa:	68fa      	ldr	r2, [r7, #12]
 802a7ac:	4313      	orrs	r3, r2
 802a7ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802a7b0:	68fb      	ldr	r3, [r7, #12]
 802a7b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802a7b6:	683b      	ldr	r3, [r7, #0]
 802a7b8:	695b      	ldr	r3, [r3, #20]
 802a7ba:	4313      	orrs	r3, r2
 802a7bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802a7be:	687b      	ldr	r3, [r7, #4]
 802a7c0:	68fa      	ldr	r2, [r7, #12]
 802a7c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802a7c4:	683b      	ldr	r3, [r7, #0]
 802a7c6:	689a      	ldr	r2, [r3, #8]
 802a7c8:	687b      	ldr	r3, [r7, #4]
 802a7ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802a7cc:	683b      	ldr	r3, [r7, #0]
 802a7ce:	681a      	ldr	r2, [r3, #0]
 802a7d0:	687b      	ldr	r3, [r7, #4]
 802a7d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802a7d4:	687b      	ldr	r3, [r7, #4]
 802a7d6:	4a0a      	ldr	r2, [pc, #40]	; (802a800 <TIM_Base_SetConfig+0x114>)
 802a7d8:	4293      	cmp	r3, r2
 802a7da:	d003      	beq.n	802a7e4 <TIM_Base_SetConfig+0xf8>
 802a7dc:	687b      	ldr	r3, [r7, #4]
 802a7de:	4a0c      	ldr	r2, [pc, #48]	; (802a810 <TIM_Base_SetConfig+0x124>)
 802a7e0:	4293      	cmp	r3, r2
 802a7e2:	d103      	bne.n	802a7ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802a7e4:	683b      	ldr	r3, [r7, #0]
 802a7e6:	691a      	ldr	r2, [r3, #16]
 802a7e8:	687b      	ldr	r3, [r7, #4]
 802a7ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802a7ec:	687b      	ldr	r3, [r7, #4]
 802a7ee:	2201      	movs	r2, #1
 802a7f0:	615a      	str	r2, [r3, #20]
}
 802a7f2:	bf00      	nop
 802a7f4:	3714      	adds	r7, #20
 802a7f6:	46bd      	mov	sp, r7
 802a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7fc:	4770      	bx	lr
 802a7fe:	bf00      	nop
 802a800:	40010000 	.word	0x40010000
 802a804:	40000400 	.word	0x40000400
 802a808:	40000800 	.word	0x40000800
 802a80c:	40000c00 	.word	0x40000c00
 802a810:	40010400 	.word	0x40010400
 802a814:	40014000 	.word	0x40014000
 802a818:	40014400 	.word	0x40014400
 802a81c:	40014800 	.word	0x40014800
 802a820:	40001800 	.word	0x40001800
 802a824:	40001c00 	.word	0x40001c00
 802a828:	40002000 	.word	0x40002000

0802a82c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a82c:	b480      	push	{r7}
 802a82e:	b087      	sub	sp, #28
 802a830:	af00      	add	r7, sp, #0
 802a832:	6078      	str	r0, [r7, #4]
 802a834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802a836:	687b      	ldr	r3, [r7, #4]
 802a838:	6a1b      	ldr	r3, [r3, #32]
 802a83a:	f023 0201 	bic.w	r2, r3, #1
 802a83e:	687b      	ldr	r3, [r7, #4]
 802a840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a842:	687b      	ldr	r3, [r7, #4]
 802a844:	6a1b      	ldr	r3, [r3, #32]
 802a846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a848:	687b      	ldr	r3, [r7, #4]
 802a84a:	685b      	ldr	r3, [r3, #4]
 802a84c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802a84e:	687b      	ldr	r3, [r7, #4]
 802a850:	699b      	ldr	r3, [r3, #24]
 802a852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 802a854:	68fb      	ldr	r3, [r7, #12]
 802a856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a85a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 802a85c:	68fb      	ldr	r3, [r7, #12]
 802a85e:	f023 0303 	bic.w	r3, r3, #3
 802a862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802a864:	683b      	ldr	r3, [r7, #0]
 802a866:	681b      	ldr	r3, [r3, #0]
 802a868:	68fa      	ldr	r2, [r7, #12]
 802a86a:	4313      	orrs	r3, r2
 802a86c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 802a86e:	697b      	ldr	r3, [r7, #20]
 802a870:	f023 0302 	bic.w	r3, r3, #2
 802a874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802a876:	683b      	ldr	r3, [r7, #0]
 802a878:	689b      	ldr	r3, [r3, #8]
 802a87a:	697a      	ldr	r2, [r7, #20]
 802a87c:	4313      	orrs	r3, r2
 802a87e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 802a880:	687b      	ldr	r3, [r7, #4]
 802a882:	4a20      	ldr	r2, [pc, #128]	; (802a904 <TIM_OC1_SetConfig+0xd8>)
 802a884:	4293      	cmp	r3, r2
 802a886:	d003      	beq.n	802a890 <TIM_OC1_SetConfig+0x64>
 802a888:	687b      	ldr	r3, [r7, #4]
 802a88a:	4a1f      	ldr	r2, [pc, #124]	; (802a908 <TIM_OC1_SetConfig+0xdc>)
 802a88c:	4293      	cmp	r3, r2
 802a88e:	d10c      	bne.n	802a8aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 802a890:	697b      	ldr	r3, [r7, #20]
 802a892:	f023 0308 	bic.w	r3, r3, #8
 802a896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 802a898:	683b      	ldr	r3, [r7, #0]
 802a89a:	68db      	ldr	r3, [r3, #12]
 802a89c:	697a      	ldr	r2, [r7, #20]
 802a89e:	4313      	orrs	r3, r2
 802a8a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 802a8a2:	697b      	ldr	r3, [r7, #20]
 802a8a4:	f023 0304 	bic.w	r3, r3, #4
 802a8a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a8aa:	687b      	ldr	r3, [r7, #4]
 802a8ac:	4a15      	ldr	r2, [pc, #84]	; (802a904 <TIM_OC1_SetConfig+0xd8>)
 802a8ae:	4293      	cmp	r3, r2
 802a8b0:	d003      	beq.n	802a8ba <TIM_OC1_SetConfig+0x8e>
 802a8b2:	687b      	ldr	r3, [r7, #4]
 802a8b4:	4a14      	ldr	r2, [pc, #80]	; (802a908 <TIM_OC1_SetConfig+0xdc>)
 802a8b6:	4293      	cmp	r3, r2
 802a8b8:	d111      	bne.n	802a8de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 802a8ba:	693b      	ldr	r3, [r7, #16]
 802a8bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802a8c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 802a8c2:	693b      	ldr	r3, [r7, #16]
 802a8c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802a8c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 802a8ca:	683b      	ldr	r3, [r7, #0]
 802a8cc:	695b      	ldr	r3, [r3, #20]
 802a8ce:	693a      	ldr	r2, [r7, #16]
 802a8d0:	4313      	orrs	r3, r2
 802a8d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 802a8d4:	683b      	ldr	r3, [r7, #0]
 802a8d6:	699b      	ldr	r3, [r3, #24]
 802a8d8:	693a      	ldr	r2, [r7, #16]
 802a8da:	4313      	orrs	r3, r2
 802a8dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a8de:	687b      	ldr	r3, [r7, #4]
 802a8e0:	693a      	ldr	r2, [r7, #16]
 802a8e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802a8e4:	687b      	ldr	r3, [r7, #4]
 802a8e6:	68fa      	ldr	r2, [r7, #12]
 802a8e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 802a8ea:	683b      	ldr	r3, [r7, #0]
 802a8ec:	685a      	ldr	r2, [r3, #4]
 802a8ee:	687b      	ldr	r3, [r7, #4]
 802a8f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a8f2:	687b      	ldr	r3, [r7, #4]
 802a8f4:	697a      	ldr	r2, [r7, #20]
 802a8f6:	621a      	str	r2, [r3, #32]
}
 802a8f8:	bf00      	nop
 802a8fa:	371c      	adds	r7, #28
 802a8fc:	46bd      	mov	sp, r7
 802a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a902:	4770      	bx	lr
 802a904:	40010000 	.word	0x40010000
 802a908:	40010400 	.word	0x40010400

0802a90c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a90c:	b480      	push	{r7}
 802a90e:	b087      	sub	sp, #28
 802a910:	af00      	add	r7, sp, #0
 802a912:	6078      	str	r0, [r7, #4]
 802a914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802a916:	687b      	ldr	r3, [r7, #4]
 802a918:	6a1b      	ldr	r3, [r3, #32]
 802a91a:	f023 0210 	bic.w	r2, r3, #16
 802a91e:	687b      	ldr	r3, [r7, #4]
 802a920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a922:	687b      	ldr	r3, [r7, #4]
 802a924:	6a1b      	ldr	r3, [r3, #32]
 802a926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a928:	687b      	ldr	r3, [r7, #4]
 802a92a:	685b      	ldr	r3, [r3, #4]
 802a92c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802a92e:	687b      	ldr	r3, [r7, #4]
 802a930:	699b      	ldr	r3, [r3, #24]
 802a932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 802a934:	68fb      	ldr	r3, [r7, #12]
 802a936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802a93a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 802a93c:	68fb      	ldr	r3, [r7, #12]
 802a93e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802a944:	683b      	ldr	r3, [r7, #0]
 802a946:	681b      	ldr	r3, [r3, #0]
 802a948:	021b      	lsls	r3, r3, #8
 802a94a:	68fa      	ldr	r2, [r7, #12]
 802a94c:	4313      	orrs	r3, r2
 802a94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 802a950:	697b      	ldr	r3, [r7, #20]
 802a952:	f023 0320 	bic.w	r3, r3, #32
 802a956:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 802a958:	683b      	ldr	r3, [r7, #0]
 802a95a:	689b      	ldr	r3, [r3, #8]
 802a95c:	011b      	lsls	r3, r3, #4
 802a95e:	697a      	ldr	r2, [r7, #20]
 802a960:	4313      	orrs	r3, r2
 802a962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 802a964:	687b      	ldr	r3, [r7, #4]
 802a966:	4a22      	ldr	r2, [pc, #136]	; (802a9f0 <TIM_OC2_SetConfig+0xe4>)
 802a968:	4293      	cmp	r3, r2
 802a96a:	d003      	beq.n	802a974 <TIM_OC2_SetConfig+0x68>
 802a96c:	687b      	ldr	r3, [r7, #4]
 802a96e:	4a21      	ldr	r2, [pc, #132]	; (802a9f4 <TIM_OC2_SetConfig+0xe8>)
 802a970:	4293      	cmp	r3, r2
 802a972:	d10d      	bne.n	802a990 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 802a974:	697b      	ldr	r3, [r7, #20]
 802a976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802a97a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 802a97c:	683b      	ldr	r3, [r7, #0]
 802a97e:	68db      	ldr	r3, [r3, #12]
 802a980:	011b      	lsls	r3, r3, #4
 802a982:	697a      	ldr	r2, [r7, #20]
 802a984:	4313      	orrs	r3, r2
 802a986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 802a988:	697b      	ldr	r3, [r7, #20]
 802a98a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802a98e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a990:	687b      	ldr	r3, [r7, #4]
 802a992:	4a17      	ldr	r2, [pc, #92]	; (802a9f0 <TIM_OC2_SetConfig+0xe4>)
 802a994:	4293      	cmp	r3, r2
 802a996:	d003      	beq.n	802a9a0 <TIM_OC2_SetConfig+0x94>
 802a998:	687b      	ldr	r3, [r7, #4]
 802a99a:	4a16      	ldr	r2, [pc, #88]	; (802a9f4 <TIM_OC2_SetConfig+0xe8>)
 802a99c:	4293      	cmp	r3, r2
 802a99e:	d113      	bne.n	802a9c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 802a9a0:	693b      	ldr	r3, [r7, #16]
 802a9a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802a9a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 802a9a8:	693b      	ldr	r3, [r7, #16]
 802a9aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802a9ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 802a9b0:	683b      	ldr	r3, [r7, #0]
 802a9b2:	695b      	ldr	r3, [r3, #20]
 802a9b4:	009b      	lsls	r3, r3, #2
 802a9b6:	693a      	ldr	r2, [r7, #16]
 802a9b8:	4313      	orrs	r3, r2
 802a9ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 802a9bc:	683b      	ldr	r3, [r7, #0]
 802a9be:	699b      	ldr	r3, [r3, #24]
 802a9c0:	009b      	lsls	r3, r3, #2
 802a9c2:	693a      	ldr	r2, [r7, #16]
 802a9c4:	4313      	orrs	r3, r2
 802a9c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a9c8:	687b      	ldr	r3, [r7, #4]
 802a9ca:	693a      	ldr	r2, [r7, #16]
 802a9cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802a9ce:	687b      	ldr	r3, [r7, #4]
 802a9d0:	68fa      	ldr	r2, [r7, #12]
 802a9d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 802a9d4:	683b      	ldr	r3, [r7, #0]
 802a9d6:	685a      	ldr	r2, [r3, #4]
 802a9d8:	687b      	ldr	r3, [r7, #4]
 802a9da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a9dc:	687b      	ldr	r3, [r7, #4]
 802a9de:	697a      	ldr	r2, [r7, #20]
 802a9e0:	621a      	str	r2, [r3, #32]
}
 802a9e2:	bf00      	nop
 802a9e4:	371c      	adds	r7, #28
 802a9e6:	46bd      	mov	sp, r7
 802a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a9ec:	4770      	bx	lr
 802a9ee:	bf00      	nop
 802a9f0:	40010000 	.word	0x40010000
 802a9f4:	40010400 	.word	0x40010400

0802a9f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a9f8:	b480      	push	{r7}
 802a9fa:	b087      	sub	sp, #28
 802a9fc:	af00      	add	r7, sp, #0
 802a9fe:	6078      	str	r0, [r7, #4]
 802aa00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802aa02:	687b      	ldr	r3, [r7, #4]
 802aa04:	6a1b      	ldr	r3, [r3, #32]
 802aa06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802aa0a:	687b      	ldr	r3, [r7, #4]
 802aa0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802aa0e:	687b      	ldr	r3, [r7, #4]
 802aa10:	6a1b      	ldr	r3, [r3, #32]
 802aa12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802aa14:	687b      	ldr	r3, [r7, #4]
 802aa16:	685b      	ldr	r3, [r3, #4]
 802aa18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802aa1a:	687b      	ldr	r3, [r7, #4]
 802aa1c:	69db      	ldr	r3, [r3, #28]
 802aa1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 802aa20:	68fb      	ldr	r3, [r7, #12]
 802aa22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802aa26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 802aa28:	68fb      	ldr	r3, [r7, #12]
 802aa2a:	f023 0303 	bic.w	r3, r3, #3
 802aa2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802aa30:	683b      	ldr	r3, [r7, #0]
 802aa32:	681b      	ldr	r3, [r3, #0]
 802aa34:	68fa      	ldr	r2, [r7, #12]
 802aa36:	4313      	orrs	r3, r2
 802aa38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 802aa3a:	697b      	ldr	r3, [r7, #20]
 802aa3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802aa40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 802aa42:	683b      	ldr	r3, [r7, #0]
 802aa44:	689b      	ldr	r3, [r3, #8]
 802aa46:	021b      	lsls	r3, r3, #8
 802aa48:	697a      	ldr	r2, [r7, #20]
 802aa4a:	4313      	orrs	r3, r2
 802aa4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802aa4e:	687b      	ldr	r3, [r7, #4]
 802aa50:	4a21      	ldr	r2, [pc, #132]	; (802aad8 <TIM_OC3_SetConfig+0xe0>)
 802aa52:	4293      	cmp	r3, r2
 802aa54:	d003      	beq.n	802aa5e <TIM_OC3_SetConfig+0x66>
 802aa56:	687b      	ldr	r3, [r7, #4]
 802aa58:	4a20      	ldr	r2, [pc, #128]	; (802aadc <TIM_OC3_SetConfig+0xe4>)
 802aa5a:	4293      	cmp	r3, r2
 802aa5c:	d10d      	bne.n	802aa7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802aa5e:	697b      	ldr	r3, [r7, #20]
 802aa60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802aa64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 802aa66:	683b      	ldr	r3, [r7, #0]
 802aa68:	68db      	ldr	r3, [r3, #12]
 802aa6a:	021b      	lsls	r3, r3, #8
 802aa6c:	697a      	ldr	r2, [r7, #20]
 802aa6e:	4313      	orrs	r3, r2
 802aa70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802aa72:	697b      	ldr	r3, [r7, #20]
 802aa74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802aa78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802aa7a:	687b      	ldr	r3, [r7, #4]
 802aa7c:	4a16      	ldr	r2, [pc, #88]	; (802aad8 <TIM_OC3_SetConfig+0xe0>)
 802aa7e:	4293      	cmp	r3, r2
 802aa80:	d003      	beq.n	802aa8a <TIM_OC3_SetConfig+0x92>
 802aa82:	687b      	ldr	r3, [r7, #4]
 802aa84:	4a15      	ldr	r2, [pc, #84]	; (802aadc <TIM_OC3_SetConfig+0xe4>)
 802aa86:	4293      	cmp	r3, r2
 802aa88:	d113      	bne.n	802aab2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 802aa8a:	693b      	ldr	r3, [r7, #16]
 802aa8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802aa90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 802aa92:	693b      	ldr	r3, [r7, #16]
 802aa94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802aa98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802aa9a:	683b      	ldr	r3, [r7, #0]
 802aa9c:	695b      	ldr	r3, [r3, #20]
 802aa9e:	011b      	lsls	r3, r3, #4
 802aaa0:	693a      	ldr	r2, [r7, #16]
 802aaa2:	4313      	orrs	r3, r2
 802aaa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802aaa6:	683b      	ldr	r3, [r7, #0]
 802aaa8:	699b      	ldr	r3, [r3, #24]
 802aaaa:	011b      	lsls	r3, r3, #4
 802aaac:	693a      	ldr	r2, [r7, #16]
 802aaae:	4313      	orrs	r3, r2
 802aab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802aab2:	687b      	ldr	r3, [r7, #4]
 802aab4:	693a      	ldr	r2, [r7, #16]
 802aab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802aab8:	687b      	ldr	r3, [r7, #4]
 802aaba:	68fa      	ldr	r2, [r7, #12]
 802aabc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 802aabe:	683b      	ldr	r3, [r7, #0]
 802aac0:	685a      	ldr	r2, [r3, #4]
 802aac2:	687b      	ldr	r3, [r7, #4]
 802aac4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802aac6:	687b      	ldr	r3, [r7, #4]
 802aac8:	697a      	ldr	r2, [r7, #20]
 802aaca:	621a      	str	r2, [r3, #32]
}
 802aacc:	bf00      	nop
 802aace:	371c      	adds	r7, #28
 802aad0:	46bd      	mov	sp, r7
 802aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aad6:	4770      	bx	lr
 802aad8:	40010000 	.word	0x40010000
 802aadc:	40010400 	.word	0x40010400

0802aae0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802aae0:	b480      	push	{r7}
 802aae2:	b087      	sub	sp, #28
 802aae4:	af00      	add	r7, sp, #0
 802aae6:	6078      	str	r0, [r7, #4]
 802aae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802aaea:	687b      	ldr	r3, [r7, #4]
 802aaec:	6a1b      	ldr	r3, [r3, #32]
 802aaee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802aaf2:	687b      	ldr	r3, [r7, #4]
 802aaf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802aaf6:	687b      	ldr	r3, [r7, #4]
 802aaf8:	6a1b      	ldr	r3, [r3, #32]
 802aafa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802aafc:	687b      	ldr	r3, [r7, #4]
 802aafe:	685b      	ldr	r3, [r3, #4]
 802ab00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802ab02:	687b      	ldr	r3, [r7, #4]
 802ab04:	69db      	ldr	r3, [r3, #28]
 802ab06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 802ab08:	68fb      	ldr	r3, [r7, #12]
 802ab0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802ab0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 802ab10:	68fb      	ldr	r3, [r7, #12]
 802ab12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802ab16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802ab18:	683b      	ldr	r3, [r7, #0]
 802ab1a:	681b      	ldr	r3, [r3, #0]
 802ab1c:	021b      	lsls	r3, r3, #8
 802ab1e:	68fa      	ldr	r2, [r7, #12]
 802ab20:	4313      	orrs	r3, r2
 802ab22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802ab24:	693b      	ldr	r3, [r7, #16]
 802ab26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802ab2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 802ab2c:	683b      	ldr	r3, [r7, #0]
 802ab2e:	689b      	ldr	r3, [r3, #8]
 802ab30:	031b      	lsls	r3, r3, #12
 802ab32:	693a      	ldr	r2, [r7, #16]
 802ab34:	4313      	orrs	r3, r2
 802ab36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802ab38:	687b      	ldr	r3, [r7, #4]
 802ab3a:	4a12      	ldr	r2, [pc, #72]	; (802ab84 <TIM_OC4_SetConfig+0xa4>)
 802ab3c:	4293      	cmp	r3, r2
 802ab3e:	d003      	beq.n	802ab48 <TIM_OC4_SetConfig+0x68>
 802ab40:	687b      	ldr	r3, [r7, #4]
 802ab42:	4a11      	ldr	r2, [pc, #68]	; (802ab88 <TIM_OC4_SetConfig+0xa8>)
 802ab44:	4293      	cmp	r3, r2
 802ab46:	d109      	bne.n	802ab5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 802ab48:	697b      	ldr	r3, [r7, #20]
 802ab4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802ab4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 802ab50:	683b      	ldr	r3, [r7, #0]
 802ab52:	695b      	ldr	r3, [r3, #20]
 802ab54:	019b      	lsls	r3, r3, #6
 802ab56:	697a      	ldr	r2, [r7, #20]
 802ab58:	4313      	orrs	r3, r2
 802ab5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802ab5c:	687b      	ldr	r3, [r7, #4]
 802ab5e:	697a      	ldr	r2, [r7, #20]
 802ab60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802ab62:	687b      	ldr	r3, [r7, #4]
 802ab64:	68fa      	ldr	r2, [r7, #12]
 802ab66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 802ab68:	683b      	ldr	r3, [r7, #0]
 802ab6a:	685a      	ldr	r2, [r3, #4]
 802ab6c:	687b      	ldr	r3, [r7, #4]
 802ab6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802ab70:	687b      	ldr	r3, [r7, #4]
 802ab72:	693a      	ldr	r2, [r7, #16]
 802ab74:	621a      	str	r2, [r3, #32]
}
 802ab76:	bf00      	nop
 802ab78:	371c      	adds	r7, #28
 802ab7a:	46bd      	mov	sp, r7
 802ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab80:	4770      	bx	lr
 802ab82:	bf00      	nop
 802ab84:	40010000 	.word	0x40010000
 802ab88:	40010400 	.word	0x40010400

0802ab8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802ab8c:	b480      	push	{r7}
 802ab8e:	b087      	sub	sp, #28
 802ab90:	af00      	add	r7, sp, #0
 802ab92:	60f8      	str	r0, [r7, #12]
 802ab94:	60b9      	str	r1, [r7, #8]
 802ab96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802ab98:	68fb      	ldr	r3, [r7, #12]
 802ab9a:	6a1b      	ldr	r3, [r3, #32]
 802ab9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802ab9e:	68fb      	ldr	r3, [r7, #12]
 802aba0:	6a1b      	ldr	r3, [r3, #32]
 802aba2:	f023 0201 	bic.w	r2, r3, #1
 802aba6:	68fb      	ldr	r3, [r7, #12]
 802aba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802abaa:	68fb      	ldr	r3, [r7, #12]
 802abac:	699b      	ldr	r3, [r3, #24]
 802abae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802abb0:	693b      	ldr	r3, [r7, #16]
 802abb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802abb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802abb8:	687b      	ldr	r3, [r7, #4]
 802abba:	011b      	lsls	r3, r3, #4
 802abbc:	693a      	ldr	r2, [r7, #16]
 802abbe:	4313      	orrs	r3, r2
 802abc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802abc2:	697b      	ldr	r3, [r7, #20]
 802abc4:	f023 030a 	bic.w	r3, r3, #10
 802abc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802abca:	697a      	ldr	r2, [r7, #20]
 802abcc:	68bb      	ldr	r3, [r7, #8]
 802abce:	4313      	orrs	r3, r2
 802abd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802abd2:	68fb      	ldr	r3, [r7, #12]
 802abd4:	693a      	ldr	r2, [r7, #16]
 802abd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802abd8:	68fb      	ldr	r3, [r7, #12]
 802abda:	697a      	ldr	r2, [r7, #20]
 802abdc:	621a      	str	r2, [r3, #32]
}
 802abde:	bf00      	nop
 802abe0:	371c      	adds	r7, #28
 802abe2:	46bd      	mov	sp, r7
 802abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802abe8:	4770      	bx	lr

0802abea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802abea:	b480      	push	{r7}
 802abec:	b087      	sub	sp, #28
 802abee:	af00      	add	r7, sp, #0
 802abf0:	60f8      	str	r0, [r7, #12]
 802abf2:	60b9      	str	r1, [r7, #8]
 802abf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802abf6:	68fb      	ldr	r3, [r7, #12]
 802abf8:	6a1b      	ldr	r3, [r3, #32]
 802abfa:	f023 0210 	bic.w	r2, r3, #16
 802abfe:	68fb      	ldr	r3, [r7, #12]
 802ac00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802ac02:	68fb      	ldr	r3, [r7, #12]
 802ac04:	699b      	ldr	r3, [r3, #24]
 802ac06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802ac08:	68fb      	ldr	r3, [r7, #12]
 802ac0a:	6a1b      	ldr	r3, [r3, #32]
 802ac0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802ac0e:	697b      	ldr	r3, [r7, #20]
 802ac10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802ac14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802ac16:	687b      	ldr	r3, [r7, #4]
 802ac18:	031b      	lsls	r3, r3, #12
 802ac1a:	697a      	ldr	r2, [r7, #20]
 802ac1c:	4313      	orrs	r3, r2
 802ac1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802ac20:	693b      	ldr	r3, [r7, #16]
 802ac22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802ac26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802ac28:	68bb      	ldr	r3, [r7, #8]
 802ac2a:	011b      	lsls	r3, r3, #4
 802ac2c:	693a      	ldr	r2, [r7, #16]
 802ac2e:	4313      	orrs	r3, r2
 802ac30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802ac32:	68fb      	ldr	r3, [r7, #12]
 802ac34:	697a      	ldr	r2, [r7, #20]
 802ac36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802ac38:	68fb      	ldr	r3, [r7, #12]
 802ac3a:	693a      	ldr	r2, [r7, #16]
 802ac3c:	621a      	str	r2, [r3, #32]
}
 802ac3e:	bf00      	nop
 802ac40:	371c      	adds	r7, #28
 802ac42:	46bd      	mov	sp, r7
 802ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac48:	4770      	bx	lr

0802ac4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802ac4a:	b480      	push	{r7}
 802ac4c:	b085      	sub	sp, #20
 802ac4e:	af00      	add	r7, sp, #0
 802ac50:	6078      	str	r0, [r7, #4]
 802ac52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802ac54:	687b      	ldr	r3, [r7, #4]
 802ac56:	689b      	ldr	r3, [r3, #8]
 802ac58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802ac5a:	68fb      	ldr	r3, [r7, #12]
 802ac5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802ac60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802ac62:	683a      	ldr	r2, [r7, #0]
 802ac64:	68fb      	ldr	r3, [r7, #12]
 802ac66:	4313      	orrs	r3, r2
 802ac68:	f043 0307 	orr.w	r3, r3, #7
 802ac6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802ac6e:	687b      	ldr	r3, [r7, #4]
 802ac70:	68fa      	ldr	r2, [r7, #12]
 802ac72:	609a      	str	r2, [r3, #8]
}
 802ac74:	bf00      	nop
 802ac76:	3714      	adds	r7, #20
 802ac78:	46bd      	mov	sp, r7
 802ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac7e:	4770      	bx	lr

0802ac80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802ac80:	b480      	push	{r7}
 802ac82:	b087      	sub	sp, #28
 802ac84:	af00      	add	r7, sp, #0
 802ac86:	60f8      	str	r0, [r7, #12]
 802ac88:	60b9      	str	r1, [r7, #8]
 802ac8a:	607a      	str	r2, [r7, #4]
 802ac8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802ac8e:	68fb      	ldr	r3, [r7, #12]
 802ac90:	689b      	ldr	r3, [r3, #8]
 802ac92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802ac94:	697b      	ldr	r3, [r7, #20]
 802ac96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802ac9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802ac9c:	683b      	ldr	r3, [r7, #0]
 802ac9e:	021a      	lsls	r2, r3, #8
 802aca0:	687b      	ldr	r3, [r7, #4]
 802aca2:	431a      	orrs	r2, r3
 802aca4:	68bb      	ldr	r3, [r7, #8]
 802aca6:	4313      	orrs	r3, r2
 802aca8:	697a      	ldr	r2, [r7, #20]
 802acaa:	4313      	orrs	r3, r2
 802acac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802acae:	68fb      	ldr	r3, [r7, #12]
 802acb0:	697a      	ldr	r2, [r7, #20]
 802acb2:	609a      	str	r2, [r3, #8]
}
 802acb4:	bf00      	nop
 802acb6:	371c      	adds	r7, #28
 802acb8:	46bd      	mov	sp, r7
 802acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acbe:	4770      	bx	lr

0802acc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 802acc0:	b480      	push	{r7}
 802acc2:	b087      	sub	sp, #28
 802acc4:	af00      	add	r7, sp, #0
 802acc6:	60f8      	str	r0, [r7, #12]
 802acc8:	60b9      	str	r1, [r7, #8]
 802acca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 802accc:	68bb      	ldr	r3, [r7, #8]
 802acce:	f003 031f 	and.w	r3, r3, #31
 802acd2:	2201      	movs	r2, #1
 802acd4:	fa02 f303 	lsl.w	r3, r2, r3
 802acd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802acda:	68fb      	ldr	r3, [r7, #12]
 802acdc:	6a1a      	ldr	r2, [r3, #32]
 802acde:	697b      	ldr	r3, [r7, #20]
 802ace0:	43db      	mvns	r3, r3
 802ace2:	401a      	ands	r2, r3
 802ace4:	68fb      	ldr	r3, [r7, #12]
 802ace6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802ace8:	68fb      	ldr	r3, [r7, #12]
 802acea:	6a1a      	ldr	r2, [r3, #32]
 802acec:	68bb      	ldr	r3, [r7, #8]
 802acee:	f003 031f 	and.w	r3, r3, #31
 802acf2:	6879      	ldr	r1, [r7, #4]
 802acf4:	fa01 f303 	lsl.w	r3, r1, r3
 802acf8:	431a      	orrs	r2, r3
 802acfa:	68fb      	ldr	r3, [r7, #12]
 802acfc:	621a      	str	r2, [r3, #32]
}
 802acfe:	bf00      	nop
 802ad00:	371c      	adds	r7, #28
 802ad02:	46bd      	mov	sp, r7
 802ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad08:	4770      	bx	lr
	...

0802ad0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802ad0c:	b480      	push	{r7}
 802ad0e:	b085      	sub	sp, #20
 802ad10:	af00      	add	r7, sp, #0
 802ad12:	6078      	str	r0, [r7, #4]
 802ad14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802ad16:	687b      	ldr	r3, [r7, #4]
 802ad18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802ad1c:	2b01      	cmp	r3, #1
 802ad1e:	d101      	bne.n	802ad24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802ad20:	2302      	movs	r3, #2
 802ad22:	e05a      	b.n	802adda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802ad24:	687b      	ldr	r3, [r7, #4]
 802ad26:	2201      	movs	r2, #1
 802ad28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802ad2c:	687b      	ldr	r3, [r7, #4]
 802ad2e:	2202      	movs	r2, #2
 802ad30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802ad34:	687b      	ldr	r3, [r7, #4]
 802ad36:	681b      	ldr	r3, [r3, #0]
 802ad38:	685b      	ldr	r3, [r3, #4]
 802ad3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802ad3c:	687b      	ldr	r3, [r7, #4]
 802ad3e:	681b      	ldr	r3, [r3, #0]
 802ad40:	689b      	ldr	r3, [r3, #8]
 802ad42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802ad44:	68fb      	ldr	r3, [r7, #12]
 802ad46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802ad4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802ad4c:	683b      	ldr	r3, [r7, #0]
 802ad4e:	681b      	ldr	r3, [r3, #0]
 802ad50:	68fa      	ldr	r2, [r7, #12]
 802ad52:	4313      	orrs	r3, r2
 802ad54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802ad56:	687b      	ldr	r3, [r7, #4]
 802ad58:	681b      	ldr	r3, [r3, #0]
 802ad5a:	68fa      	ldr	r2, [r7, #12]
 802ad5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802ad5e:	687b      	ldr	r3, [r7, #4]
 802ad60:	681b      	ldr	r3, [r3, #0]
 802ad62:	4a21      	ldr	r2, [pc, #132]	; (802ade8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 802ad64:	4293      	cmp	r3, r2
 802ad66:	d022      	beq.n	802adae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802ad68:	687b      	ldr	r3, [r7, #4]
 802ad6a:	681b      	ldr	r3, [r3, #0]
 802ad6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802ad70:	d01d      	beq.n	802adae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802ad72:	687b      	ldr	r3, [r7, #4]
 802ad74:	681b      	ldr	r3, [r3, #0]
 802ad76:	4a1d      	ldr	r2, [pc, #116]	; (802adec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802ad78:	4293      	cmp	r3, r2
 802ad7a:	d018      	beq.n	802adae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802ad7c:	687b      	ldr	r3, [r7, #4]
 802ad7e:	681b      	ldr	r3, [r3, #0]
 802ad80:	4a1b      	ldr	r2, [pc, #108]	; (802adf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802ad82:	4293      	cmp	r3, r2
 802ad84:	d013      	beq.n	802adae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802ad86:	687b      	ldr	r3, [r7, #4]
 802ad88:	681b      	ldr	r3, [r3, #0]
 802ad8a:	4a1a      	ldr	r2, [pc, #104]	; (802adf4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 802ad8c:	4293      	cmp	r3, r2
 802ad8e:	d00e      	beq.n	802adae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802ad90:	687b      	ldr	r3, [r7, #4]
 802ad92:	681b      	ldr	r3, [r3, #0]
 802ad94:	4a18      	ldr	r2, [pc, #96]	; (802adf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802ad96:	4293      	cmp	r3, r2
 802ad98:	d009      	beq.n	802adae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802ad9a:	687b      	ldr	r3, [r7, #4]
 802ad9c:	681b      	ldr	r3, [r3, #0]
 802ad9e:	4a17      	ldr	r2, [pc, #92]	; (802adfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802ada0:	4293      	cmp	r3, r2
 802ada2:	d004      	beq.n	802adae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802ada4:	687b      	ldr	r3, [r7, #4]
 802ada6:	681b      	ldr	r3, [r3, #0]
 802ada8:	4a15      	ldr	r2, [pc, #84]	; (802ae00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802adaa:	4293      	cmp	r3, r2
 802adac:	d10c      	bne.n	802adc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802adae:	68bb      	ldr	r3, [r7, #8]
 802adb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802adb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802adb6:	683b      	ldr	r3, [r7, #0]
 802adb8:	685b      	ldr	r3, [r3, #4]
 802adba:	68ba      	ldr	r2, [r7, #8]
 802adbc:	4313      	orrs	r3, r2
 802adbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802adc0:	687b      	ldr	r3, [r7, #4]
 802adc2:	681b      	ldr	r3, [r3, #0]
 802adc4:	68ba      	ldr	r2, [r7, #8]
 802adc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802adc8:	687b      	ldr	r3, [r7, #4]
 802adca:	2201      	movs	r2, #1
 802adcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802add0:	687b      	ldr	r3, [r7, #4]
 802add2:	2200      	movs	r2, #0
 802add4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802add8:	2300      	movs	r3, #0
}
 802adda:	4618      	mov	r0, r3
 802addc:	3714      	adds	r7, #20
 802adde:	46bd      	mov	sp, r7
 802ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ade4:	4770      	bx	lr
 802ade6:	bf00      	nop
 802ade8:	40010000 	.word	0x40010000
 802adec:	40000400 	.word	0x40000400
 802adf0:	40000800 	.word	0x40000800
 802adf4:	40000c00 	.word	0x40000c00
 802adf8:	40010400 	.word	0x40010400
 802adfc:	40014000 	.word	0x40014000
 802ae00:	40001800 	.word	0x40001800

0802ae04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 802ae04:	b480      	push	{r7}
 802ae06:	b085      	sub	sp, #20
 802ae08:	af00      	add	r7, sp, #0
 802ae0a:	6078      	str	r0, [r7, #4]
 802ae0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802ae0e:	2300      	movs	r3, #0
 802ae10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 802ae12:	687b      	ldr	r3, [r7, #4]
 802ae14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802ae18:	2b01      	cmp	r3, #1
 802ae1a:	d101      	bne.n	802ae20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 802ae1c:	2302      	movs	r3, #2
 802ae1e:	e03d      	b.n	802ae9c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 802ae20:	687b      	ldr	r3, [r7, #4]
 802ae22:	2201      	movs	r2, #1
 802ae24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 802ae28:	68fb      	ldr	r3, [r7, #12]
 802ae2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802ae2e:	683b      	ldr	r3, [r7, #0]
 802ae30:	68db      	ldr	r3, [r3, #12]
 802ae32:	4313      	orrs	r3, r2
 802ae34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 802ae36:	68fb      	ldr	r3, [r7, #12]
 802ae38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 802ae3c:	683b      	ldr	r3, [r7, #0]
 802ae3e:	689b      	ldr	r3, [r3, #8]
 802ae40:	4313      	orrs	r3, r2
 802ae42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 802ae44:	68fb      	ldr	r3, [r7, #12]
 802ae46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 802ae4a:	683b      	ldr	r3, [r7, #0]
 802ae4c:	685b      	ldr	r3, [r3, #4]
 802ae4e:	4313      	orrs	r3, r2
 802ae50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 802ae52:	68fb      	ldr	r3, [r7, #12]
 802ae54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 802ae58:	683b      	ldr	r3, [r7, #0]
 802ae5a:	681b      	ldr	r3, [r3, #0]
 802ae5c:	4313      	orrs	r3, r2
 802ae5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 802ae60:	68fb      	ldr	r3, [r7, #12]
 802ae62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802ae66:	683b      	ldr	r3, [r7, #0]
 802ae68:	691b      	ldr	r3, [r3, #16]
 802ae6a:	4313      	orrs	r3, r2
 802ae6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 802ae6e:	68fb      	ldr	r3, [r7, #12]
 802ae70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 802ae74:	683b      	ldr	r3, [r7, #0]
 802ae76:	695b      	ldr	r3, [r3, #20]
 802ae78:	4313      	orrs	r3, r2
 802ae7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 802ae7c:	68fb      	ldr	r3, [r7, #12]
 802ae7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 802ae82:	683b      	ldr	r3, [r7, #0]
 802ae84:	69db      	ldr	r3, [r3, #28]
 802ae86:	4313      	orrs	r3, r2
 802ae88:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 802ae8a:	687b      	ldr	r3, [r7, #4]
 802ae8c:	681b      	ldr	r3, [r3, #0]
 802ae8e:	68fa      	ldr	r2, [r7, #12]
 802ae90:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 802ae92:	687b      	ldr	r3, [r7, #4]
 802ae94:	2200      	movs	r2, #0
 802ae96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802ae9a:	2300      	movs	r3, #0
}
 802ae9c:	4618      	mov	r0, r3
 802ae9e:	3714      	adds	r7, #20
 802aea0:	46bd      	mov	sp, r7
 802aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aea6:	4770      	bx	lr

0802aea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802aea8:	b480      	push	{r7}
 802aeaa:	b083      	sub	sp, #12
 802aeac:	af00      	add	r7, sp, #0
 802aeae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802aeb0:	bf00      	nop
 802aeb2:	370c      	adds	r7, #12
 802aeb4:	46bd      	mov	sp, r7
 802aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aeba:	4770      	bx	lr

0802aebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802aebc:	b480      	push	{r7}
 802aebe:	b083      	sub	sp, #12
 802aec0:	af00      	add	r7, sp, #0
 802aec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802aec4:	bf00      	nop
 802aec6:	370c      	adds	r7, #12
 802aec8:	46bd      	mov	sp, r7
 802aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aece:	4770      	bx	lr

0802aed0 <__cxa_guard_acquire>:
 802aed0:	6803      	ldr	r3, [r0, #0]
 802aed2:	07db      	lsls	r3, r3, #31
 802aed4:	d406      	bmi.n	802aee4 <__cxa_guard_acquire+0x14>
 802aed6:	7843      	ldrb	r3, [r0, #1]
 802aed8:	b103      	cbz	r3, 802aedc <__cxa_guard_acquire+0xc>
 802aeda:	deff      	udf	#255	; 0xff
 802aedc:	2301      	movs	r3, #1
 802aede:	7043      	strb	r3, [r0, #1]
 802aee0:	4618      	mov	r0, r3
 802aee2:	4770      	bx	lr
 802aee4:	2000      	movs	r0, #0
 802aee6:	4770      	bx	lr

0802aee8 <__cxa_guard_release>:
 802aee8:	2301      	movs	r3, #1
 802aeea:	6003      	str	r3, [r0, #0]
 802aeec:	4770      	bx	lr
	...

0802aef0 <__errno>:
 802aef0:	4b01      	ldr	r3, [pc, #4]	; (802aef8 <__errno+0x8>)
 802aef2:	6818      	ldr	r0, [r3, #0]
 802aef4:	4770      	bx	lr
 802aef6:	bf00      	nop
 802aef8:	20000020 	.word	0x20000020

0802aefc <__libc_init_array>:
 802aefc:	b570      	push	{r4, r5, r6, lr}
 802aefe:	4e0d      	ldr	r6, [pc, #52]	; (802af34 <__libc_init_array+0x38>)
 802af00:	4c0d      	ldr	r4, [pc, #52]	; (802af38 <__libc_init_array+0x3c>)
 802af02:	1ba4      	subs	r4, r4, r6
 802af04:	10a4      	asrs	r4, r4, #2
 802af06:	2500      	movs	r5, #0
 802af08:	42a5      	cmp	r5, r4
 802af0a:	d109      	bne.n	802af20 <__libc_init_array+0x24>
 802af0c:	4e0b      	ldr	r6, [pc, #44]	; (802af3c <__libc_init_array+0x40>)
 802af0e:	4c0c      	ldr	r4, [pc, #48]	; (802af40 <__libc_init_array+0x44>)
 802af10:	f000 ff74 	bl	802bdfc <_init>
 802af14:	1ba4      	subs	r4, r4, r6
 802af16:	10a4      	asrs	r4, r4, #2
 802af18:	2500      	movs	r5, #0
 802af1a:	42a5      	cmp	r5, r4
 802af1c:	d105      	bne.n	802af2a <__libc_init_array+0x2e>
 802af1e:	bd70      	pop	{r4, r5, r6, pc}
 802af20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802af24:	4798      	blx	r3
 802af26:	3501      	adds	r5, #1
 802af28:	e7ee      	b.n	802af08 <__libc_init_array+0xc>
 802af2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802af2e:	4798      	blx	r3
 802af30:	3501      	adds	r5, #1
 802af32:	e7f2      	b.n	802af1a <__libc_init_array+0x1e>
 802af34:	0802bf4c 	.word	0x0802bf4c
 802af38:	0802bf4c 	.word	0x0802bf4c
 802af3c:	0802bf4c 	.word	0x0802bf4c
 802af40:	0802bf54 	.word	0x0802bf54

0802af44 <memcpy>:
 802af44:	b510      	push	{r4, lr}
 802af46:	1e43      	subs	r3, r0, #1
 802af48:	440a      	add	r2, r1
 802af4a:	4291      	cmp	r1, r2
 802af4c:	d100      	bne.n	802af50 <memcpy+0xc>
 802af4e:	bd10      	pop	{r4, pc}
 802af50:	f811 4b01 	ldrb.w	r4, [r1], #1
 802af54:	f803 4f01 	strb.w	r4, [r3, #1]!
 802af58:	e7f7      	b.n	802af4a <memcpy+0x6>

0802af5a <memset>:
 802af5a:	4402      	add	r2, r0
 802af5c:	4603      	mov	r3, r0
 802af5e:	4293      	cmp	r3, r2
 802af60:	d100      	bne.n	802af64 <memset+0xa>
 802af62:	4770      	bx	lr
 802af64:	f803 1b01 	strb.w	r1, [r3], #1
 802af68:	e7f9      	b.n	802af5e <memset+0x4>
	...

0802af6c <iprintf>:
 802af6c:	b40f      	push	{r0, r1, r2, r3}
 802af6e:	4b0a      	ldr	r3, [pc, #40]	; (802af98 <iprintf+0x2c>)
 802af70:	b513      	push	{r0, r1, r4, lr}
 802af72:	681c      	ldr	r4, [r3, #0]
 802af74:	b124      	cbz	r4, 802af80 <iprintf+0x14>
 802af76:	69a3      	ldr	r3, [r4, #24]
 802af78:	b913      	cbnz	r3, 802af80 <iprintf+0x14>
 802af7a:	4620      	mov	r0, r4
 802af7c:	f000 fa22 	bl	802b3c4 <__sinit>
 802af80:	ab05      	add	r3, sp, #20
 802af82:	9a04      	ldr	r2, [sp, #16]
 802af84:	68a1      	ldr	r1, [r4, #8]
 802af86:	9301      	str	r3, [sp, #4]
 802af88:	4620      	mov	r0, r4
 802af8a:	f000 fbdb 	bl	802b744 <_vfiprintf_r>
 802af8e:	b002      	add	sp, #8
 802af90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802af94:	b004      	add	sp, #16
 802af96:	4770      	bx	lr
 802af98:	20000020 	.word	0x20000020

0802af9c <_puts_r>:
 802af9c:	b570      	push	{r4, r5, r6, lr}
 802af9e:	460e      	mov	r6, r1
 802afa0:	4605      	mov	r5, r0
 802afa2:	b118      	cbz	r0, 802afac <_puts_r+0x10>
 802afa4:	6983      	ldr	r3, [r0, #24]
 802afa6:	b90b      	cbnz	r3, 802afac <_puts_r+0x10>
 802afa8:	f000 fa0c 	bl	802b3c4 <__sinit>
 802afac:	69ab      	ldr	r3, [r5, #24]
 802afae:	68ac      	ldr	r4, [r5, #8]
 802afb0:	b913      	cbnz	r3, 802afb8 <_puts_r+0x1c>
 802afb2:	4628      	mov	r0, r5
 802afb4:	f000 fa06 	bl	802b3c4 <__sinit>
 802afb8:	4b23      	ldr	r3, [pc, #140]	; (802b048 <_puts_r+0xac>)
 802afba:	429c      	cmp	r4, r3
 802afbc:	d117      	bne.n	802afee <_puts_r+0x52>
 802afbe:	686c      	ldr	r4, [r5, #4]
 802afc0:	89a3      	ldrh	r3, [r4, #12]
 802afc2:	071b      	lsls	r3, r3, #28
 802afc4:	d51d      	bpl.n	802b002 <_puts_r+0x66>
 802afc6:	6923      	ldr	r3, [r4, #16]
 802afc8:	b1db      	cbz	r3, 802b002 <_puts_r+0x66>
 802afca:	3e01      	subs	r6, #1
 802afcc:	68a3      	ldr	r3, [r4, #8]
 802afce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802afd2:	3b01      	subs	r3, #1
 802afd4:	60a3      	str	r3, [r4, #8]
 802afd6:	b9e9      	cbnz	r1, 802b014 <_puts_r+0x78>
 802afd8:	2b00      	cmp	r3, #0
 802afda:	da2e      	bge.n	802b03a <_puts_r+0x9e>
 802afdc:	4622      	mov	r2, r4
 802afde:	210a      	movs	r1, #10
 802afe0:	4628      	mov	r0, r5
 802afe2:	f000 f83f 	bl	802b064 <__swbuf_r>
 802afe6:	3001      	adds	r0, #1
 802afe8:	d011      	beq.n	802b00e <_puts_r+0x72>
 802afea:	200a      	movs	r0, #10
 802afec:	e011      	b.n	802b012 <_puts_r+0x76>
 802afee:	4b17      	ldr	r3, [pc, #92]	; (802b04c <_puts_r+0xb0>)
 802aff0:	429c      	cmp	r4, r3
 802aff2:	d101      	bne.n	802aff8 <_puts_r+0x5c>
 802aff4:	68ac      	ldr	r4, [r5, #8]
 802aff6:	e7e3      	b.n	802afc0 <_puts_r+0x24>
 802aff8:	4b15      	ldr	r3, [pc, #84]	; (802b050 <_puts_r+0xb4>)
 802affa:	429c      	cmp	r4, r3
 802affc:	bf08      	it	eq
 802affe:	68ec      	ldreq	r4, [r5, #12]
 802b000:	e7de      	b.n	802afc0 <_puts_r+0x24>
 802b002:	4621      	mov	r1, r4
 802b004:	4628      	mov	r0, r5
 802b006:	f000 f87f 	bl	802b108 <__swsetup_r>
 802b00a:	2800      	cmp	r0, #0
 802b00c:	d0dd      	beq.n	802afca <_puts_r+0x2e>
 802b00e:	f04f 30ff 	mov.w	r0, #4294967295
 802b012:	bd70      	pop	{r4, r5, r6, pc}
 802b014:	2b00      	cmp	r3, #0
 802b016:	da04      	bge.n	802b022 <_puts_r+0x86>
 802b018:	69a2      	ldr	r2, [r4, #24]
 802b01a:	429a      	cmp	r2, r3
 802b01c:	dc06      	bgt.n	802b02c <_puts_r+0x90>
 802b01e:	290a      	cmp	r1, #10
 802b020:	d004      	beq.n	802b02c <_puts_r+0x90>
 802b022:	6823      	ldr	r3, [r4, #0]
 802b024:	1c5a      	adds	r2, r3, #1
 802b026:	6022      	str	r2, [r4, #0]
 802b028:	7019      	strb	r1, [r3, #0]
 802b02a:	e7cf      	b.n	802afcc <_puts_r+0x30>
 802b02c:	4622      	mov	r2, r4
 802b02e:	4628      	mov	r0, r5
 802b030:	f000 f818 	bl	802b064 <__swbuf_r>
 802b034:	3001      	adds	r0, #1
 802b036:	d1c9      	bne.n	802afcc <_puts_r+0x30>
 802b038:	e7e9      	b.n	802b00e <_puts_r+0x72>
 802b03a:	6823      	ldr	r3, [r4, #0]
 802b03c:	200a      	movs	r0, #10
 802b03e:	1c5a      	adds	r2, r3, #1
 802b040:	6022      	str	r2, [r4, #0]
 802b042:	7018      	strb	r0, [r3, #0]
 802b044:	e7e5      	b.n	802b012 <_puts_r+0x76>
 802b046:	bf00      	nop
 802b048:	0802bed0 	.word	0x0802bed0
 802b04c:	0802bef0 	.word	0x0802bef0
 802b050:	0802beb0 	.word	0x0802beb0

0802b054 <puts>:
 802b054:	4b02      	ldr	r3, [pc, #8]	; (802b060 <puts+0xc>)
 802b056:	4601      	mov	r1, r0
 802b058:	6818      	ldr	r0, [r3, #0]
 802b05a:	f7ff bf9f 	b.w	802af9c <_puts_r>
 802b05e:	bf00      	nop
 802b060:	20000020 	.word	0x20000020

0802b064 <__swbuf_r>:
 802b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b066:	460e      	mov	r6, r1
 802b068:	4614      	mov	r4, r2
 802b06a:	4605      	mov	r5, r0
 802b06c:	b118      	cbz	r0, 802b076 <__swbuf_r+0x12>
 802b06e:	6983      	ldr	r3, [r0, #24]
 802b070:	b90b      	cbnz	r3, 802b076 <__swbuf_r+0x12>
 802b072:	f000 f9a7 	bl	802b3c4 <__sinit>
 802b076:	4b21      	ldr	r3, [pc, #132]	; (802b0fc <__swbuf_r+0x98>)
 802b078:	429c      	cmp	r4, r3
 802b07a:	d12a      	bne.n	802b0d2 <__swbuf_r+0x6e>
 802b07c:	686c      	ldr	r4, [r5, #4]
 802b07e:	69a3      	ldr	r3, [r4, #24]
 802b080:	60a3      	str	r3, [r4, #8]
 802b082:	89a3      	ldrh	r3, [r4, #12]
 802b084:	071a      	lsls	r2, r3, #28
 802b086:	d52e      	bpl.n	802b0e6 <__swbuf_r+0x82>
 802b088:	6923      	ldr	r3, [r4, #16]
 802b08a:	b363      	cbz	r3, 802b0e6 <__swbuf_r+0x82>
 802b08c:	6923      	ldr	r3, [r4, #16]
 802b08e:	6820      	ldr	r0, [r4, #0]
 802b090:	1ac0      	subs	r0, r0, r3
 802b092:	6963      	ldr	r3, [r4, #20]
 802b094:	b2f6      	uxtb	r6, r6
 802b096:	4283      	cmp	r3, r0
 802b098:	4637      	mov	r7, r6
 802b09a:	dc04      	bgt.n	802b0a6 <__swbuf_r+0x42>
 802b09c:	4621      	mov	r1, r4
 802b09e:	4628      	mov	r0, r5
 802b0a0:	f000 f926 	bl	802b2f0 <_fflush_r>
 802b0a4:	bb28      	cbnz	r0, 802b0f2 <__swbuf_r+0x8e>
 802b0a6:	68a3      	ldr	r3, [r4, #8]
 802b0a8:	3b01      	subs	r3, #1
 802b0aa:	60a3      	str	r3, [r4, #8]
 802b0ac:	6823      	ldr	r3, [r4, #0]
 802b0ae:	1c5a      	adds	r2, r3, #1
 802b0b0:	6022      	str	r2, [r4, #0]
 802b0b2:	701e      	strb	r6, [r3, #0]
 802b0b4:	6963      	ldr	r3, [r4, #20]
 802b0b6:	3001      	adds	r0, #1
 802b0b8:	4283      	cmp	r3, r0
 802b0ba:	d004      	beq.n	802b0c6 <__swbuf_r+0x62>
 802b0bc:	89a3      	ldrh	r3, [r4, #12]
 802b0be:	07db      	lsls	r3, r3, #31
 802b0c0:	d519      	bpl.n	802b0f6 <__swbuf_r+0x92>
 802b0c2:	2e0a      	cmp	r6, #10
 802b0c4:	d117      	bne.n	802b0f6 <__swbuf_r+0x92>
 802b0c6:	4621      	mov	r1, r4
 802b0c8:	4628      	mov	r0, r5
 802b0ca:	f000 f911 	bl	802b2f0 <_fflush_r>
 802b0ce:	b190      	cbz	r0, 802b0f6 <__swbuf_r+0x92>
 802b0d0:	e00f      	b.n	802b0f2 <__swbuf_r+0x8e>
 802b0d2:	4b0b      	ldr	r3, [pc, #44]	; (802b100 <__swbuf_r+0x9c>)
 802b0d4:	429c      	cmp	r4, r3
 802b0d6:	d101      	bne.n	802b0dc <__swbuf_r+0x78>
 802b0d8:	68ac      	ldr	r4, [r5, #8]
 802b0da:	e7d0      	b.n	802b07e <__swbuf_r+0x1a>
 802b0dc:	4b09      	ldr	r3, [pc, #36]	; (802b104 <__swbuf_r+0xa0>)
 802b0de:	429c      	cmp	r4, r3
 802b0e0:	bf08      	it	eq
 802b0e2:	68ec      	ldreq	r4, [r5, #12]
 802b0e4:	e7cb      	b.n	802b07e <__swbuf_r+0x1a>
 802b0e6:	4621      	mov	r1, r4
 802b0e8:	4628      	mov	r0, r5
 802b0ea:	f000 f80d 	bl	802b108 <__swsetup_r>
 802b0ee:	2800      	cmp	r0, #0
 802b0f0:	d0cc      	beq.n	802b08c <__swbuf_r+0x28>
 802b0f2:	f04f 37ff 	mov.w	r7, #4294967295
 802b0f6:	4638      	mov	r0, r7
 802b0f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b0fa:	bf00      	nop
 802b0fc:	0802bed0 	.word	0x0802bed0
 802b100:	0802bef0 	.word	0x0802bef0
 802b104:	0802beb0 	.word	0x0802beb0

0802b108 <__swsetup_r>:
 802b108:	4b32      	ldr	r3, [pc, #200]	; (802b1d4 <__swsetup_r+0xcc>)
 802b10a:	b570      	push	{r4, r5, r6, lr}
 802b10c:	681d      	ldr	r5, [r3, #0]
 802b10e:	4606      	mov	r6, r0
 802b110:	460c      	mov	r4, r1
 802b112:	b125      	cbz	r5, 802b11e <__swsetup_r+0x16>
 802b114:	69ab      	ldr	r3, [r5, #24]
 802b116:	b913      	cbnz	r3, 802b11e <__swsetup_r+0x16>
 802b118:	4628      	mov	r0, r5
 802b11a:	f000 f953 	bl	802b3c4 <__sinit>
 802b11e:	4b2e      	ldr	r3, [pc, #184]	; (802b1d8 <__swsetup_r+0xd0>)
 802b120:	429c      	cmp	r4, r3
 802b122:	d10f      	bne.n	802b144 <__swsetup_r+0x3c>
 802b124:	686c      	ldr	r4, [r5, #4]
 802b126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b12a:	b29a      	uxth	r2, r3
 802b12c:	0715      	lsls	r5, r2, #28
 802b12e:	d42c      	bmi.n	802b18a <__swsetup_r+0x82>
 802b130:	06d0      	lsls	r0, r2, #27
 802b132:	d411      	bmi.n	802b158 <__swsetup_r+0x50>
 802b134:	2209      	movs	r2, #9
 802b136:	6032      	str	r2, [r6, #0]
 802b138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b13c:	81a3      	strh	r3, [r4, #12]
 802b13e:	f04f 30ff 	mov.w	r0, #4294967295
 802b142:	e03e      	b.n	802b1c2 <__swsetup_r+0xba>
 802b144:	4b25      	ldr	r3, [pc, #148]	; (802b1dc <__swsetup_r+0xd4>)
 802b146:	429c      	cmp	r4, r3
 802b148:	d101      	bne.n	802b14e <__swsetup_r+0x46>
 802b14a:	68ac      	ldr	r4, [r5, #8]
 802b14c:	e7eb      	b.n	802b126 <__swsetup_r+0x1e>
 802b14e:	4b24      	ldr	r3, [pc, #144]	; (802b1e0 <__swsetup_r+0xd8>)
 802b150:	429c      	cmp	r4, r3
 802b152:	bf08      	it	eq
 802b154:	68ec      	ldreq	r4, [r5, #12]
 802b156:	e7e6      	b.n	802b126 <__swsetup_r+0x1e>
 802b158:	0751      	lsls	r1, r2, #29
 802b15a:	d512      	bpl.n	802b182 <__swsetup_r+0x7a>
 802b15c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b15e:	b141      	cbz	r1, 802b172 <__swsetup_r+0x6a>
 802b160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b164:	4299      	cmp	r1, r3
 802b166:	d002      	beq.n	802b16e <__swsetup_r+0x66>
 802b168:	4630      	mov	r0, r6
 802b16a:	f000 fa19 	bl	802b5a0 <_free_r>
 802b16e:	2300      	movs	r3, #0
 802b170:	6363      	str	r3, [r4, #52]	; 0x34
 802b172:	89a3      	ldrh	r3, [r4, #12]
 802b174:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b178:	81a3      	strh	r3, [r4, #12]
 802b17a:	2300      	movs	r3, #0
 802b17c:	6063      	str	r3, [r4, #4]
 802b17e:	6923      	ldr	r3, [r4, #16]
 802b180:	6023      	str	r3, [r4, #0]
 802b182:	89a3      	ldrh	r3, [r4, #12]
 802b184:	f043 0308 	orr.w	r3, r3, #8
 802b188:	81a3      	strh	r3, [r4, #12]
 802b18a:	6923      	ldr	r3, [r4, #16]
 802b18c:	b94b      	cbnz	r3, 802b1a2 <__swsetup_r+0x9a>
 802b18e:	89a3      	ldrh	r3, [r4, #12]
 802b190:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b198:	d003      	beq.n	802b1a2 <__swsetup_r+0x9a>
 802b19a:	4621      	mov	r1, r4
 802b19c:	4630      	mov	r0, r6
 802b19e:	f000 f9bf 	bl	802b520 <__smakebuf_r>
 802b1a2:	89a2      	ldrh	r2, [r4, #12]
 802b1a4:	f012 0301 	ands.w	r3, r2, #1
 802b1a8:	d00c      	beq.n	802b1c4 <__swsetup_r+0xbc>
 802b1aa:	2300      	movs	r3, #0
 802b1ac:	60a3      	str	r3, [r4, #8]
 802b1ae:	6963      	ldr	r3, [r4, #20]
 802b1b0:	425b      	negs	r3, r3
 802b1b2:	61a3      	str	r3, [r4, #24]
 802b1b4:	6923      	ldr	r3, [r4, #16]
 802b1b6:	b953      	cbnz	r3, 802b1ce <__swsetup_r+0xc6>
 802b1b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b1bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802b1c0:	d1ba      	bne.n	802b138 <__swsetup_r+0x30>
 802b1c2:	bd70      	pop	{r4, r5, r6, pc}
 802b1c4:	0792      	lsls	r2, r2, #30
 802b1c6:	bf58      	it	pl
 802b1c8:	6963      	ldrpl	r3, [r4, #20]
 802b1ca:	60a3      	str	r3, [r4, #8]
 802b1cc:	e7f2      	b.n	802b1b4 <__swsetup_r+0xac>
 802b1ce:	2000      	movs	r0, #0
 802b1d0:	e7f7      	b.n	802b1c2 <__swsetup_r+0xba>
 802b1d2:	bf00      	nop
 802b1d4:	20000020 	.word	0x20000020
 802b1d8:	0802bed0 	.word	0x0802bed0
 802b1dc:	0802bef0 	.word	0x0802bef0
 802b1e0:	0802beb0 	.word	0x0802beb0

0802b1e4 <__sflush_r>:
 802b1e4:	898a      	ldrh	r2, [r1, #12]
 802b1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b1ea:	4605      	mov	r5, r0
 802b1ec:	0710      	lsls	r0, r2, #28
 802b1ee:	460c      	mov	r4, r1
 802b1f0:	d458      	bmi.n	802b2a4 <__sflush_r+0xc0>
 802b1f2:	684b      	ldr	r3, [r1, #4]
 802b1f4:	2b00      	cmp	r3, #0
 802b1f6:	dc05      	bgt.n	802b204 <__sflush_r+0x20>
 802b1f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b1fa:	2b00      	cmp	r3, #0
 802b1fc:	dc02      	bgt.n	802b204 <__sflush_r+0x20>
 802b1fe:	2000      	movs	r0, #0
 802b200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b206:	2e00      	cmp	r6, #0
 802b208:	d0f9      	beq.n	802b1fe <__sflush_r+0x1a>
 802b20a:	2300      	movs	r3, #0
 802b20c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b210:	682f      	ldr	r7, [r5, #0]
 802b212:	6a21      	ldr	r1, [r4, #32]
 802b214:	602b      	str	r3, [r5, #0]
 802b216:	d032      	beq.n	802b27e <__sflush_r+0x9a>
 802b218:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b21a:	89a3      	ldrh	r3, [r4, #12]
 802b21c:	075a      	lsls	r2, r3, #29
 802b21e:	d505      	bpl.n	802b22c <__sflush_r+0x48>
 802b220:	6863      	ldr	r3, [r4, #4]
 802b222:	1ac0      	subs	r0, r0, r3
 802b224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b226:	b10b      	cbz	r3, 802b22c <__sflush_r+0x48>
 802b228:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b22a:	1ac0      	subs	r0, r0, r3
 802b22c:	2300      	movs	r3, #0
 802b22e:	4602      	mov	r2, r0
 802b230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b232:	6a21      	ldr	r1, [r4, #32]
 802b234:	4628      	mov	r0, r5
 802b236:	47b0      	blx	r6
 802b238:	1c43      	adds	r3, r0, #1
 802b23a:	89a3      	ldrh	r3, [r4, #12]
 802b23c:	d106      	bne.n	802b24c <__sflush_r+0x68>
 802b23e:	6829      	ldr	r1, [r5, #0]
 802b240:	291d      	cmp	r1, #29
 802b242:	d848      	bhi.n	802b2d6 <__sflush_r+0xf2>
 802b244:	4a29      	ldr	r2, [pc, #164]	; (802b2ec <__sflush_r+0x108>)
 802b246:	40ca      	lsrs	r2, r1
 802b248:	07d6      	lsls	r6, r2, #31
 802b24a:	d544      	bpl.n	802b2d6 <__sflush_r+0xf2>
 802b24c:	2200      	movs	r2, #0
 802b24e:	6062      	str	r2, [r4, #4]
 802b250:	04d9      	lsls	r1, r3, #19
 802b252:	6922      	ldr	r2, [r4, #16]
 802b254:	6022      	str	r2, [r4, #0]
 802b256:	d504      	bpl.n	802b262 <__sflush_r+0x7e>
 802b258:	1c42      	adds	r2, r0, #1
 802b25a:	d101      	bne.n	802b260 <__sflush_r+0x7c>
 802b25c:	682b      	ldr	r3, [r5, #0]
 802b25e:	b903      	cbnz	r3, 802b262 <__sflush_r+0x7e>
 802b260:	6560      	str	r0, [r4, #84]	; 0x54
 802b262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b264:	602f      	str	r7, [r5, #0]
 802b266:	2900      	cmp	r1, #0
 802b268:	d0c9      	beq.n	802b1fe <__sflush_r+0x1a>
 802b26a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b26e:	4299      	cmp	r1, r3
 802b270:	d002      	beq.n	802b278 <__sflush_r+0x94>
 802b272:	4628      	mov	r0, r5
 802b274:	f000 f994 	bl	802b5a0 <_free_r>
 802b278:	2000      	movs	r0, #0
 802b27a:	6360      	str	r0, [r4, #52]	; 0x34
 802b27c:	e7c0      	b.n	802b200 <__sflush_r+0x1c>
 802b27e:	2301      	movs	r3, #1
 802b280:	4628      	mov	r0, r5
 802b282:	47b0      	blx	r6
 802b284:	1c41      	adds	r1, r0, #1
 802b286:	d1c8      	bne.n	802b21a <__sflush_r+0x36>
 802b288:	682b      	ldr	r3, [r5, #0]
 802b28a:	2b00      	cmp	r3, #0
 802b28c:	d0c5      	beq.n	802b21a <__sflush_r+0x36>
 802b28e:	2b1d      	cmp	r3, #29
 802b290:	d001      	beq.n	802b296 <__sflush_r+0xb2>
 802b292:	2b16      	cmp	r3, #22
 802b294:	d101      	bne.n	802b29a <__sflush_r+0xb6>
 802b296:	602f      	str	r7, [r5, #0]
 802b298:	e7b1      	b.n	802b1fe <__sflush_r+0x1a>
 802b29a:	89a3      	ldrh	r3, [r4, #12]
 802b29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b2a0:	81a3      	strh	r3, [r4, #12]
 802b2a2:	e7ad      	b.n	802b200 <__sflush_r+0x1c>
 802b2a4:	690f      	ldr	r7, [r1, #16]
 802b2a6:	2f00      	cmp	r7, #0
 802b2a8:	d0a9      	beq.n	802b1fe <__sflush_r+0x1a>
 802b2aa:	0793      	lsls	r3, r2, #30
 802b2ac:	680e      	ldr	r6, [r1, #0]
 802b2ae:	bf08      	it	eq
 802b2b0:	694b      	ldreq	r3, [r1, #20]
 802b2b2:	600f      	str	r7, [r1, #0]
 802b2b4:	bf18      	it	ne
 802b2b6:	2300      	movne	r3, #0
 802b2b8:	eba6 0807 	sub.w	r8, r6, r7
 802b2bc:	608b      	str	r3, [r1, #8]
 802b2be:	f1b8 0f00 	cmp.w	r8, #0
 802b2c2:	dd9c      	ble.n	802b1fe <__sflush_r+0x1a>
 802b2c4:	4643      	mov	r3, r8
 802b2c6:	463a      	mov	r2, r7
 802b2c8:	6a21      	ldr	r1, [r4, #32]
 802b2ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b2cc:	4628      	mov	r0, r5
 802b2ce:	47b0      	blx	r6
 802b2d0:	2800      	cmp	r0, #0
 802b2d2:	dc06      	bgt.n	802b2e2 <__sflush_r+0xfe>
 802b2d4:	89a3      	ldrh	r3, [r4, #12]
 802b2d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b2da:	81a3      	strh	r3, [r4, #12]
 802b2dc:	f04f 30ff 	mov.w	r0, #4294967295
 802b2e0:	e78e      	b.n	802b200 <__sflush_r+0x1c>
 802b2e2:	4407      	add	r7, r0
 802b2e4:	eba8 0800 	sub.w	r8, r8, r0
 802b2e8:	e7e9      	b.n	802b2be <__sflush_r+0xda>
 802b2ea:	bf00      	nop
 802b2ec:	20400001 	.word	0x20400001

0802b2f0 <_fflush_r>:
 802b2f0:	b538      	push	{r3, r4, r5, lr}
 802b2f2:	690b      	ldr	r3, [r1, #16]
 802b2f4:	4605      	mov	r5, r0
 802b2f6:	460c      	mov	r4, r1
 802b2f8:	b1db      	cbz	r3, 802b332 <_fflush_r+0x42>
 802b2fa:	b118      	cbz	r0, 802b304 <_fflush_r+0x14>
 802b2fc:	6983      	ldr	r3, [r0, #24]
 802b2fe:	b90b      	cbnz	r3, 802b304 <_fflush_r+0x14>
 802b300:	f000 f860 	bl	802b3c4 <__sinit>
 802b304:	4b0c      	ldr	r3, [pc, #48]	; (802b338 <_fflush_r+0x48>)
 802b306:	429c      	cmp	r4, r3
 802b308:	d109      	bne.n	802b31e <_fflush_r+0x2e>
 802b30a:	686c      	ldr	r4, [r5, #4]
 802b30c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b310:	b17b      	cbz	r3, 802b332 <_fflush_r+0x42>
 802b312:	4621      	mov	r1, r4
 802b314:	4628      	mov	r0, r5
 802b316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b31a:	f7ff bf63 	b.w	802b1e4 <__sflush_r>
 802b31e:	4b07      	ldr	r3, [pc, #28]	; (802b33c <_fflush_r+0x4c>)
 802b320:	429c      	cmp	r4, r3
 802b322:	d101      	bne.n	802b328 <_fflush_r+0x38>
 802b324:	68ac      	ldr	r4, [r5, #8]
 802b326:	e7f1      	b.n	802b30c <_fflush_r+0x1c>
 802b328:	4b05      	ldr	r3, [pc, #20]	; (802b340 <_fflush_r+0x50>)
 802b32a:	429c      	cmp	r4, r3
 802b32c:	bf08      	it	eq
 802b32e:	68ec      	ldreq	r4, [r5, #12]
 802b330:	e7ec      	b.n	802b30c <_fflush_r+0x1c>
 802b332:	2000      	movs	r0, #0
 802b334:	bd38      	pop	{r3, r4, r5, pc}
 802b336:	bf00      	nop
 802b338:	0802bed0 	.word	0x0802bed0
 802b33c:	0802bef0 	.word	0x0802bef0
 802b340:	0802beb0 	.word	0x0802beb0

0802b344 <std>:
 802b344:	2300      	movs	r3, #0
 802b346:	b510      	push	{r4, lr}
 802b348:	4604      	mov	r4, r0
 802b34a:	e9c0 3300 	strd	r3, r3, [r0]
 802b34e:	6083      	str	r3, [r0, #8]
 802b350:	8181      	strh	r1, [r0, #12]
 802b352:	6643      	str	r3, [r0, #100]	; 0x64
 802b354:	81c2      	strh	r2, [r0, #14]
 802b356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b35a:	6183      	str	r3, [r0, #24]
 802b35c:	4619      	mov	r1, r3
 802b35e:	2208      	movs	r2, #8
 802b360:	305c      	adds	r0, #92	; 0x5c
 802b362:	f7ff fdfa 	bl	802af5a <memset>
 802b366:	4b05      	ldr	r3, [pc, #20]	; (802b37c <std+0x38>)
 802b368:	6263      	str	r3, [r4, #36]	; 0x24
 802b36a:	4b05      	ldr	r3, [pc, #20]	; (802b380 <std+0x3c>)
 802b36c:	62a3      	str	r3, [r4, #40]	; 0x28
 802b36e:	4b05      	ldr	r3, [pc, #20]	; (802b384 <std+0x40>)
 802b370:	62e3      	str	r3, [r4, #44]	; 0x2c
 802b372:	4b05      	ldr	r3, [pc, #20]	; (802b388 <std+0x44>)
 802b374:	6224      	str	r4, [r4, #32]
 802b376:	6323      	str	r3, [r4, #48]	; 0x30
 802b378:	bd10      	pop	{r4, pc}
 802b37a:	bf00      	nop
 802b37c:	0802bca1 	.word	0x0802bca1
 802b380:	0802bcc3 	.word	0x0802bcc3
 802b384:	0802bcfb 	.word	0x0802bcfb
 802b388:	0802bd1f 	.word	0x0802bd1f

0802b38c <_cleanup_r>:
 802b38c:	4901      	ldr	r1, [pc, #4]	; (802b394 <_cleanup_r+0x8>)
 802b38e:	f000 b885 	b.w	802b49c <_fwalk_reent>
 802b392:	bf00      	nop
 802b394:	0802b2f1 	.word	0x0802b2f1

0802b398 <__sfmoreglue>:
 802b398:	b570      	push	{r4, r5, r6, lr}
 802b39a:	1e4a      	subs	r2, r1, #1
 802b39c:	2568      	movs	r5, #104	; 0x68
 802b39e:	4355      	muls	r5, r2
 802b3a0:	460e      	mov	r6, r1
 802b3a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802b3a6:	f000 f949 	bl	802b63c <_malloc_r>
 802b3aa:	4604      	mov	r4, r0
 802b3ac:	b140      	cbz	r0, 802b3c0 <__sfmoreglue+0x28>
 802b3ae:	2100      	movs	r1, #0
 802b3b0:	e9c0 1600 	strd	r1, r6, [r0]
 802b3b4:	300c      	adds	r0, #12
 802b3b6:	60a0      	str	r0, [r4, #8]
 802b3b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802b3bc:	f7ff fdcd 	bl	802af5a <memset>
 802b3c0:	4620      	mov	r0, r4
 802b3c2:	bd70      	pop	{r4, r5, r6, pc}

0802b3c4 <__sinit>:
 802b3c4:	6983      	ldr	r3, [r0, #24]
 802b3c6:	b510      	push	{r4, lr}
 802b3c8:	4604      	mov	r4, r0
 802b3ca:	bb33      	cbnz	r3, 802b41a <__sinit+0x56>
 802b3cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802b3d0:	6503      	str	r3, [r0, #80]	; 0x50
 802b3d2:	4b12      	ldr	r3, [pc, #72]	; (802b41c <__sinit+0x58>)
 802b3d4:	4a12      	ldr	r2, [pc, #72]	; (802b420 <__sinit+0x5c>)
 802b3d6:	681b      	ldr	r3, [r3, #0]
 802b3d8:	6282      	str	r2, [r0, #40]	; 0x28
 802b3da:	4298      	cmp	r0, r3
 802b3dc:	bf04      	itt	eq
 802b3de:	2301      	moveq	r3, #1
 802b3e0:	6183      	streq	r3, [r0, #24]
 802b3e2:	f000 f81f 	bl	802b424 <__sfp>
 802b3e6:	6060      	str	r0, [r4, #4]
 802b3e8:	4620      	mov	r0, r4
 802b3ea:	f000 f81b 	bl	802b424 <__sfp>
 802b3ee:	60a0      	str	r0, [r4, #8]
 802b3f0:	4620      	mov	r0, r4
 802b3f2:	f000 f817 	bl	802b424 <__sfp>
 802b3f6:	2200      	movs	r2, #0
 802b3f8:	60e0      	str	r0, [r4, #12]
 802b3fa:	2104      	movs	r1, #4
 802b3fc:	6860      	ldr	r0, [r4, #4]
 802b3fe:	f7ff ffa1 	bl	802b344 <std>
 802b402:	2201      	movs	r2, #1
 802b404:	2109      	movs	r1, #9
 802b406:	68a0      	ldr	r0, [r4, #8]
 802b408:	f7ff ff9c 	bl	802b344 <std>
 802b40c:	2202      	movs	r2, #2
 802b40e:	2112      	movs	r1, #18
 802b410:	68e0      	ldr	r0, [r4, #12]
 802b412:	f7ff ff97 	bl	802b344 <std>
 802b416:	2301      	movs	r3, #1
 802b418:	61a3      	str	r3, [r4, #24]
 802b41a:	bd10      	pop	{r4, pc}
 802b41c:	0802beac 	.word	0x0802beac
 802b420:	0802b38d 	.word	0x0802b38d

0802b424 <__sfp>:
 802b424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b426:	4b1b      	ldr	r3, [pc, #108]	; (802b494 <__sfp+0x70>)
 802b428:	681e      	ldr	r6, [r3, #0]
 802b42a:	69b3      	ldr	r3, [r6, #24]
 802b42c:	4607      	mov	r7, r0
 802b42e:	b913      	cbnz	r3, 802b436 <__sfp+0x12>
 802b430:	4630      	mov	r0, r6
 802b432:	f7ff ffc7 	bl	802b3c4 <__sinit>
 802b436:	3648      	adds	r6, #72	; 0x48
 802b438:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802b43c:	3b01      	subs	r3, #1
 802b43e:	d503      	bpl.n	802b448 <__sfp+0x24>
 802b440:	6833      	ldr	r3, [r6, #0]
 802b442:	b133      	cbz	r3, 802b452 <__sfp+0x2e>
 802b444:	6836      	ldr	r6, [r6, #0]
 802b446:	e7f7      	b.n	802b438 <__sfp+0x14>
 802b448:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802b44c:	b16d      	cbz	r5, 802b46a <__sfp+0x46>
 802b44e:	3468      	adds	r4, #104	; 0x68
 802b450:	e7f4      	b.n	802b43c <__sfp+0x18>
 802b452:	2104      	movs	r1, #4
 802b454:	4638      	mov	r0, r7
 802b456:	f7ff ff9f 	bl	802b398 <__sfmoreglue>
 802b45a:	6030      	str	r0, [r6, #0]
 802b45c:	2800      	cmp	r0, #0
 802b45e:	d1f1      	bne.n	802b444 <__sfp+0x20>
 802b460:	230c      	movs	r3, #12
 802b462:	603b      	str	r3, [r7, #0]
 802b464:	4604      	mov	r4, r0
 802b466:	4620      	mov	r0, r4
 802b468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b46a:	4b0b      	ldr	r3, [pc, #44]	; (802b498 <__sfp+0x74>)
 802b46c:	6665      	str	r5, [r4, #100]	; 0x64
 802b46e:	e9c4 5500 	strd	r5, r5, [r4]
 802b472:	60a5      	str	r5, [r4, #8]
 802b474:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802b478:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802b47c:	2208      	movs	r2, #8
 802b47e:	4629      	mov	r1, r5
 802b480:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802b484:	f7ff fd69 	bl	802af5a <memset>
 802b488:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802b48c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802b490:	e7e9      	b.n	802b466 <__sfp+0x42>
 802b492:	bf00      	nop
 802b494:	0802beac 	.word	0x0802beac
 802b498:	ffff0001 	.word	0xffff0001

0802b49c <_fwalk_reent>:
 802b49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b4a0:	4680      	mov	r8, r0
 802b4a2:	4689      	mov	r9, r1
 802b4a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802b4a8:	2600      	movs	r6, #0
 802b4aa:	b914      	cbnz	r4, 802b4b2 <_fwalk_reent+0x16>
 802b4ac:	4630      	mov	r0, r6
 802b4ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b4b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802b4b6:	3f01      	subs	r7, #1
 802b4b8:	d501      	bpl.n	802b4be <_fwalk_reent+0x22>
 802b4ba:	6824      	ldr	r4, [r4, #0]
 802b4bc:	e7f5      	b.n	802b4aa <_fwalk_reent+0xe>
 802b4be:	89ab      	ldrh	r3, [r5, #12]
 802b4c0:	2b01      	cmp	r3, #1
 802b4c2:	d907      	bls.n	802b4d4 <_fwalk_reent+0x38>
 802b4c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b4c8:	3301      	adds	r3, #1
 802b4ca:	d003      	beq.n	802b4d4 <_fwalk_reent+0x38>
 802b4cc:	4629      	mov	r1, r5
 802b4ce:	4640      	mov	r0, r8
 802b4d0:	47c8      	blx	r9
 802b4d2:	4306      	orrs	r6, r0
 802b4d4:	3568      	adds	r5, #104	; 0x68
 802b4d6:	e7ee      	b.n	802b4b6 <_fwalk_reent+0x1a>

0802b4d8 <__swhatbuf_r>:
 802b4d8:	b570      	push	{r4, r5, r6, lr}
 802b4da:	460e      	mov	r6, r1
 802b4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b4e0:	2900      	cmp	r1, #0
 802b4e2:	b096      	sub	sp, #88	; 0x58
 802b4e4:	4614      	mov	r4, r2
 802b4e6:	461d      	mov	r5, r3
 802b4e8:	da07      	bge.n	802b4fa <__swhatbuf_r+0x22>
 802b4ea:	2300      	movs	r3, #0
 802b4ec:	602b      	str	r3, [r5, #0]
 802b4ee:	89b3      	ldrh	r3, [r6, #12]
 802b4f0:	061a      	lsls	r2, r3, #24
 802b4f2:	d410      	bmi.n	802b516 <__swhatbuf_r+0x3e>
 802b4f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b4f8:	e00e      	b.n	802b518 <__swhatbuf_r+0x40>
 802b4fa:	466a      	mov	r2, sp
 802b4fc:	f000 fc36 	bl	802bd6c <_fstat_r>
 802b500:	2800      	cmp	r0, #0
 802b502:	dbf2      	blt.n	802b4ea <__swhatbuf_r+0x12>
 802b504:	9a01      	ldr	r2, [sp, #4]
 802b506:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802b50a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802b50e:	425a      	negs	r2, r3
 802b510:	415a      	adcs	r2, r3
 802b512:	602a      	str	r2, [r5, #0]
 802b514:	e7ee      	b.n	802b4f4 <__swhatbuf_r+0x1c>
 802b516:	2340      	movs	r3, #64	; 0x40
 802b518:	2000      	movs	r0, #0
 802b51a:	6023      	str	r3, [r4, #0]
 802b51c:	b016      	add	sp, #88	; 0x58
 802b51e:	bd70      	pop	{r4, r5, r6, pc}

0802b520 <__smakebuf_r>:
 802b520:	898b      	ldrh	r3, [r1, #12]
 802b522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b524:	079d      	lsls	r5, r3, #30
 802b526:	4606      	mov	r6, r0
 802b528:	460c      	mov	r4, r1
 802b52a:	d507      	bpl.n	802b53c <__smakebuf_r+0x1c>
 802b52c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802b530:	6023      	str	r3, [r4, #0]
 802b532:	6123      	str	r3, [r4, #16]
 802b534:	2301      	movs	r3, #1
 802b536:	6163      	str	r3, [r4, #20]
 802b538:	b002      	add	sp, #8
 802b53a:	bd70      	pop	{r4, r5, r6, pc}
 802b53c:	ab01      	add	r3, sp, #4
 802b53e:	466a      	mov	r2, sp
 802b540:	f7ff ffca 	bl	802b4d8 <__swhatbuf_r>
 802b544:	9900      	ldr	r1, [sp, #0]
 802b546:	4605      	mov	r5, r0
 802b548:	4630      	mov	r0, r6
 802b54a:	f000 f877 	bl	802b63c <_malloc_r>
 802b54e:	b948      	cbnz	r0, 802b564 <__smakebuf_r+0x44>
 802b550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b554:	059a      	lsls	r2, r3, #22
 802b556:	d4ef      	bmi.n	802b538 <__smakebuf_r+0x18>
 802b558:	f023 0303 	bic.w	r3, r3, #3
 802b55c:	f043 0302 	orr.w	r3, r3, #2
 802b560:	81a3      	strh	r3, [r4, #12]
 802b562:	e7e3      	b.n	802b52c <__smakebuf_r+0xc>
 802b564:	4b0d      	ldr	r3, [pc, #52]	; (802b59c <__smakebuf_r+0x7c>)
 802b566:	62b3      	str	r3, [r6, #40]	; 0x28
 802b568:	89a3      	ldrh	r3, [r4, #12]
 802b56a:	6020      	str	r0, [r4, #0]
 802b56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b570:	81a3      	strh	r3, [r4, #12]
 802b572:	9b00      	ldr	r3, [sp, #0]
 802b574:	6163      	str	r3, [r4, #20]
 802b576:	9b01      	ldr	r3, [sp, #4]
 802b578:	6120      	str	r0, [r4, #16]
 802b57a:	b15b      	cbz	r3, 802b594 <__smakebuf_r+0x74>
 802b57c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b580:	4630      	mov	r0, r6
 802b582:	f000 fc05 	bl	802bd90 <_isatty_r>
 802b586:	b128      	cbz	r0, 802b594 <__smakebuf_r+0x74>
 802b588:	89a3      	ldrh	r3, [r4, #12]
 802b58a:	f023 0303 	bic.w	r3, r3, #3
 802b58e:	f043 0301 	orr.w	r3, r3, #1
 802b592:	81a3      	strh	r3, [r4, #12]
 802b594:	89a3      	ldrh	r3, [r4, #12]
 802b596:	431d      	orrs	r5, r3
 802b598:	81a5      	strh	r5, [r4, #12]
 802b59a:	e7cd      	b.n	802b538 <__smakebuf_r+0x18>
 802b59c:	0802b38d 	.word	0x0802b38d

0802b5a0 <_free_r>:
 802b5a0:	b538      	push	{r3, r4, r5, lr}
 802b5a2:	4605      	mov	r5, r0
 802b5a4:	2900      	cmp	r1, #0
 802b5a6:	d045      	beq.n	802b634 <_free_r+0x94>
 802b5a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b5ac:	1f0c      	subs	r4, r1, #4
 802b5ae:	2b00      	cmp	r3, #0
 802b5b0:	bfb8      	it	lt
 802b5b2:	18e4      	addlt	r4, r4, r3
 802b5b4:	f000 fc0e 	bl	802bdd4 <__malloc_lock>
 802b5b8:	4a1f      	ldr	r2, [pc, #124]	; (802b638 <_free_r+0x98>)
 802b5ba:	6813      	ldr	r3, [r2, #0]
 802b5bc:	4610      	mov	r0, r2
 802b5be:	b933      	cbnz	r3, 802b5ce <_free_r+0x2e>
 802b5c0:	6063      	str	r3, [r4, #4]
 802b5c2:	6014      	str	r4, [r2, #0]
 802b5c4:	4628      	mov	r0, r5
 802b5c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b5ca:	f000 bc04 	b.w	802bdd6 <__malloc_unlock>
 802b5ce:	42a3      	cmp	r3, r4
 802b5d0:	d90c      	bls.n	802b5ec <_free_r+0x4c>
 802b5d2:	6821      	ldr	r1, [r4, #0]
 802b5d4:	1862      	adds	r2, r4, r1
 802b5d6:	4293      	cmp	r3, r2
 802b5d8:	bf04      	itt	eq
 802b5da:	681a      	ldreq	r2, [r3, #0]
 802b5dc:	685b      	ldreq	r3, [r3, #4]
 802b5de:	6063      	str	r3, [r4, #4]
 802b5e0:	bf04      	itt	eq
 802b5e2:	1852      	addeq	r2, r2, r1
 802b5e4:	6022      	streq	r2, [r4, #0]
 802b5e6:	6004      	str	r4, [r0, #0]
 802b5e8:	e7ec      	b.n	802b5c4 <_free_r+0x24>
 802b5ea:	4613      	mov	r3, r2
 802b5ec:	685a      	ldr	r2, [r3, #4]
 802b5ee:	b10a      	cbz	r2, 802b5f4 <_free_r+0x54>
 802b5f0:	42a2      	cmp	r2, r4
 802b5f2:	d9fa      	bls.n	802b5ea <_free_r+0x4a>
 802b5f4:	6819      	ldr	r1, [r3, #0]
 802b5f6:	1858      	adds	r0, r3, r1
 802b5f8:	42a0      	cmp	r0, r4
 802b5fa:	d10b      	bne.n	802b614 <_free_r+0x74>
 802b5fc:	6820      	ldr	r0, [r4, #0]
 802b5fe:	4401      	add	r1, r0
 802b600:	1858      	adds	r0, r3, r1
 802b602:	4282      	cmp	r2, r0
 802b604:	6019      	str	r1, [r3, #0]
 802b606:	d1dd      	bne.n	802b5c4 <_free_r+0x24>
 802b608:	6810      	ldr	r0, [r2, #0]
 802b60a:	6852      	ldr	r2, [r2, #4]
 802b60c:	605a      	str	r2, [r3, #4]
 802b60e:	4401      	add	r1, r0
 802b610:	6019      	str	r1, [r3, #0]
 802b612:	e7d7      	b.n	802b5c4 <_free_r+0x24>
 802b614:	d902      	bls.n	802b61c <_free_r+0x7c>
 802b616:	230c      	movs	r3, #12
 802b618:	602b      	str	r3, [r5, #0]
 802b61a:	e7d3      	b.n	802b5c4 <_free_r+0x24>
 802b61c:	6820      	ldr	r0, [r4, #0]
 802b61e:	1821      	adds	r1, r4, r0
 802b620:	428a      	cmp	r2, r1
 802b622:	bf04      	itt	eq
 802b624:	6811      	ldreq	r1, [r2, #0]
 802b626:	6852      	ldreq	r2, [r2, #4]
 802b628:	6062      	str	r2, [r4, #4]
 802b62a:	bf04      	itt	eq
 802b62c:	1809      	addeq	r1, r1, r0
 802b62e:	6021      	streq	r1, [r4, #0]
 802b630:	605c      	str	r4, [r3, #4]
 802b632:	e7c7      	b.n	802b5c4 <_free_r+0x24>
 802b634:	bd38      	pop	{r3, r4, r5, pc}
 802b636:	bf00      	nop
 802b638:	20011118 	.word	0x20011118

0802b63c <_malloc_r>:
 802b63c:	b570      	push	{r4, r5, r6, lr}
 802b63e:	1ccd      	adds	r5, r1, #3
 802b640:	f025 0503 	bic.w	r5, r5, #3
 802b644:	3508      	adds	r5, #8
 802b646:	2d0c      	cmp	r5, #12
 802b648:	bf38      	it	cc
 802b64a:	250c      	movcc	r5, #12
 802b64c:	2d00      	cmp	r5, #0
 802b64e:	4606      	mov	r6, r0
 802b650:	db01      	blt.n	802b656 <_malloc_r+0x1a>
 802b652:	42a9      	cmp	r1, r5
 802b654:	d903      	bls.n	802b65e <_malloc_r+0x22>
 802b656:	230c      	movs	r3, #12
 802b658:	6033      	str	r3, [r6, #0]
 802b65a:	2000      	movs	r0, #0
 802b65c:	bd70      	pop	{r4, r5, r6, pc}
 802b65e:	f000 fbb9 	bl	802bdd4 <__malloc_lock>
 802b662:	4a21      	ldr	r2, [pc, #132]	; (802b6e8 <_malloc_r+0xac>)
 802b664:	6814      	ldr	r4, [r2, #0]
 802b666:	4621      	mov	r1, r4
 802b668:	b991      	cbnz	r1, 802b690 <_malloc_r+0x54>
 802b66a:	4c20      	ldr	r4, [pc, #128]	; (802b6ec <_malloc_r+0xb0>)
 802b66c:	6823      	ldr	r3, [r4, #0]
 802b66e:	b91b      	cbnz	r3, 802b678 <_malloc_r+0x3c>
 802b670:	4630      	mov	r0, r6
 802b672:	f000 fb05 	bl	802bc80 <_sbrk_r>
 802b676:	6020      	str	r0, [r4, #0]
 802b678:	4629      	mov	r1, r5
 802b67a:	4630      	mov	r0, r6
 802b67c:	f000 fb00 	bl	802bc80 <_sbrk_r>
 802b680:	1c43      	adds	r3, r0, #1
 802b682:	d124      	bne.n	802b6ce <_malloc_r+0x92>
 802b684:	230c      	movs	r3, #12
 802b686:	6033      	str	r3, [r6, #0]
 802b688:	4630      	mov	r0, r6
 802b68a:	f000 fba4 	bl	802bdd6 <__malloc_unlock>
 802b68e:	e7e4      	b.n	802b65a <_malloc_r+0x1e>
 802b690:	680b      	ldr	r3, [r1, #0]
 802b692:	1b5b      	subs	r3, r3, r5
 802b694:	d418      	bmi.n	802b6c8 <_malloc_r+0x8c>
 802b696:	2b0b      	cmp	r3, #11
 802b698:	d90f      	bls.n	802b6ba <_malloc_r+0x7e>
 802b69a:	600b      	str	r3, [r1, #0]
 802b69c:	50cd      	str	r5, [r1, r3]
 802b69e:	18cc      	adds	r4, r1, r3
 802b6a0:	4630      	mov	r0, r6
 802b6a2:	f000 fb98 	bl	802bdd6 <__malloc_unlock>
 802b6a6:	f104 000b 	add.w	r0, r4, #11
 802b6aa:	1d23      	adds	r3, r4, #4
 802b6ac:	f020 0007 	bic.w	r0, r0, #7
 802b6b0:	1ac3      	subs	r3, r0, r3
 802b6b2:	d0d3      	beq.n	802b65c <_malloc_r+0x20>
 802b6b4:	425a      	negs	r2, r3
 802b6b6:	50e2      	str	r2, [r4, r3]
 802b6b8:	e7d0      	b.n	802b65c <_malloc_r+0x20>
 802b6ba:	428c      	cmp	r4, r1
 802b6bc:	684b      	ldr	r3, [r1, #4]
 802b6be:	bf16      	itet	ne
 802b6c0:	6063      	strne	r3, [r4, #4]
 802b6c2:	6013      	streq	r3, [r2, #0]
 802b6c4:	460c      	movne	r4, r1
 802b6c6:	e7eb      	b.n	802b6a0 <_malloc_r+0x64>
 802b6c8:	460c      	mov	r4, r1
 802b6ca:	6849      	ldr	r1, [r1, #4]
 802b6cc:	e7cc      	b.n	802b668 <_malloc_r+0x2c>
 802b6ce:	1cc4      	adds	r4, r0, #3
 802b6d0:	f024 0403 	bic.w	r4, r4, #3
 802b6d4:	42a0      	cmp	r0, r4
 802b6d6:	d005      	beq.n	802b6e4 <_malloc_r+0xa8>
 802b6d8:	1a21      	subs	r1, r4, r0
 802b6da:	4630      	mov	r0, r6
 802b6dc:	f000 fad0 	bl	802bc80 <_sbrk_r>
 802b6e0:	3001      	adds	r0, #1
 802b6e2:	d0cf      	beq.n	802b684 <_malloc_r+0x48>
 802b6e4:	6025      	str	r5, [r4, #0]
 802b6e6:	e7db      	b.n	802b6a0 <_malloc_r+0x64>
 802b6e8:	20011118 	.word	0x20011118
 802b6ec:	2001111c 	.word	0x2001111c

0802b6f0 <__sfputc_r>:
 802b6f0:	6893      	ldr	r3, [r2, #8]
 802b6f2:	3b01      	subs	r3, #1
 802b6f4:	2b00      	cmp	r3, #0
 802b6f6:	b410      	push	{r4}
 802b6f8:	6093      	str	r3, [r2, #8]
 802b6fa:	da08      	bge.n	802b70e <__sfputc_r+0x1e>
 802b6fc:	6994      	ldr	r4, [r2, #24]
 802b6fe:	42a3      	cmp	r3, r4
 802b700:	db01      	blt.n	802b706 <__sfputc_r+0x16>
 802b702:	290a      	cmp	r1, #10
 802b704:	d103      	bne.n	802b70e <__sfputc_r+0x1e>
 802b706:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b70a:	f7ff bcab 	b.w	802b064 <__swbuf_r>
 802b70e:	6813      	ldr	r3, [r2, #0]
 802b710:	1c58      	adds	r0, r3, #1
 802b712:	6010      	str	r0, [r2, #0]
 802b714:	7019      	strb	r1, [r3, #0]
 802b716:	4608      	mov	r0, r1
 802b718:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b71c:	4770      	bx	lr

0802b71e <__sfputs_r>:
 802b71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b720:	4606      	mov	r6, r0
 802b722:	460f      	mov	r7, r1
 802b724:	4614      	mov	r4, r2
 802b726:	18d5      	adds	r5, r2, r3
 802b728:	42ac      	cmp	r4, r5
 802b72a:	d101      	bne.n	802b730 <__sfputs_r+0x12>
 802b72c:	2000      	movs	r0, #0
 802b72e:	e007      	b.n	802b740 <__sfputs_r+0x22>
 802b730:	463a      	mov	r2, r7
 802b732:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b736:	4630      	mov	r0, r6
 802b738:	f7ff ffda 	bl	802b6f0 <__sfputc_r>
 802b73c:	1c43      	adds	r3, r0, #1
 802b73e:	d1f3      	bne.n	802b728 <__sfputs_r+0xa>
 802b740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b744 <_vfiprintf_r>:
 802b744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b748:	460c      	mov	r4, r1
 802b74a:	b09d      	sub	sp, #116	; 0x74
 802b74c:	4617      	mov	r7, r2
 802b74e:	461d      	mov	r5, r3
 802b750:	4606      	mov	r6, r0
 802b752:	b118      	cbz	r0, 802b75c <_vfiprintf_r+0x18>
 802b754:	6983      	ldr	r3, [r0, #24]
 802b756:	b90b      	cbnz	r3, 802b75c <_vfiprintf_r+0x18>
 802b758:	f7ff fe34 	bl	802b3c4 <__sinit>
 802b75c:	4b7c      	ldr	r3, [pc, #496]	; (802b950 <_vfiprintf_r+0x20c>)
 802b75e:	429c      	cmp	r4, r3
 802b760:	d158      	bne.n	802b814 <_vfiprintf_r+0xd0>
 802b762:	6874      	ldr	r4, [r6, #4]
 802b764:	89a3      	ldrh	r3, [r4, #12]
 802b766:	0718      	lsls	r0, r3, #28
 802b768:	d55e      	bpl.n	802b828 <_vfiprintf_r+0xe4>
 802b76a:	6923      	ldr	r3, [r4, #16]
 802b76c:	2b00      	cmp	r3, #0
 802b76e:	d05b      	beq.n	802b828 <_vfiprintf_r+0xe4>
 802b770:	2300      	movs	r3, #0
 802b772:	9309      	str	r3, [sp, #36]	; 0x24
 802b774:	2320      	movs	r3, #32
 802b776:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b77a:	2330      	movs	r3, #48	; 0x30
 802b77c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b780:	9503      	str	r5, [sp, #12]
 802b782:	f04f 0b01 	mov.w	fp, #1
 802b786:	46b8      	mov	r8, r7
 802b788:	4645      	mov	r5, r8
 802b78a:	f815 3b01 	ldrb.w	r3, [r5], #1
 802b78e:	b10b      	cbz	r3, 802b794 <_vfiprintf_r+0x50>
 802b790:	2b25      	cmp	r3, #37	; 0x25
 802b792:	d154      	bne.n	802b83e <_vfiprintf_r+0xfa>
 802b794:	ebb8 0a07 	subs.w	sl, r8, r7
 802b798:	d00b      	beq.n	802b7b2 <_vfiprintf_r+0x6e>
 802b79a:	4653      	mov	r3, sl
 802b79c:	463a      	mov	r2, r7
 802b79e:	4621      	mov	r1, r4
 802b7a0:	4630      	mov	r0, r6
 802b7a2:	f7ff ffbc 	bl	802b71e <__sfputs_r>
 802b7a6:	3001      	adds	r0, #1
 802b7a8:	f000 80c2 	beq.w	802b930 <_vfiprintf_r+0x1ec>
 802b7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b7ae:	4453      	add	r3, sl
 802b7b0:	9309      	str	r3, [sp, #36]	; 0x24
 802b7b2:	f898 3000 	ldrb.w	r3, [r8]
 802b7b6:	2b00      	cmp	r3, #0
 802b7b8:	f000 80ba 	beq.w	802b930 <_vfiprintf_r+0x1ec>
 802b7bc:	2300      	movs	r3, #0
 802b7be:	f04f 32ff 	mov.w	r2, #4294967295
 802b7c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b7c6:	9304      	str	r3, [sp, #16]
 802b7c8:	9307      	str	r3, [sp, #28]
 802b7ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b7ce:	931a      	str	r3, [sp, #104]	; 0x68
 802b7d0:	46a8      	mov	r8, r5
 802b7d2:	2205      	movs	r2, #5
 802b7d4:	f818 1b01 	ldrb.w	r1, [r8], #1
 802b7d8:	485e      	ldr	r0, [pc, #376]	; (802b954 <_vfiprintf_r+0x210>)
 802b7da:	f7f4 fc31 	bl	8020040 <memchr>
 802b7de:	9b04      	ldr	r3, [sp, #16]
 802b7e0:	bb78      	cbnz	r0, 802b842 <_vfiprintf_r+0xfe>
 802b7e2:	06d9      	lsls	r1, r3, #27
 802b7e4:	bf44      	itt	mi
 802b7e6:	2220      	movmi	r2, #32
 802b7e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802b7ec:	071a      	lsls	r2, r3, #28
 802b7ee:	bf44      	itt	mi
 802b7f0:	222b      	movmi	r2, #43	; 0x2b
 802b7f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802b7f6:	782a      	ldrb	r2, [r5, #0]
 802b7f8:	2a2a      	cmp	r2, #42	; 0x2a
 802b7fa:	d02a      	beq.n	802b852 <_vfiprintf_r+0x10e>
 802b7fc:	9a07      	ldr	r2, [sp, #28]
 802b7fe:	46a8      	mov	r8, r5
 802b800:	2000      	movs	r0, #0
 802b802:	250a      	movs	r5, #10
 802b804:	4641      	mov	r1, r8
 802b806:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b80a:	3b30      	subs	r3, #48	; 0x30
 802b80c:	2b09      	cmp	r3, #9
 802b80e:	d969      	bls.n	802b8e4 <_vfiprintf_r+0x1a0>
 802b810:	b360      	cbz	r0, 802b86c <_vfiprintf_r+0x128>
 802b812:	e024      	b.n	802b85e <_vfiprintf_r+0x11a>
 802b814:	4b50      	ldr	r3, [pc, #320]	; (802b958 <_vfiprintf_r+0x214>)
 802b816:	429c      	cmp	r4, r3
 802b818:	d101      	bne.n	802b81e <_vfiprintf_r+0xda>
 802b81a:	68b4      	ldr	r4, [r6, #8]
 802b81c:	e7a2      	b.n	802b764 <_vfiprintf_r+0x20>
 802b81e:	4b4f      	ldr	r3, [pc, #316]	; (802b95c <_vfiprintf_r+0x218>)
 802b820:	429c      	cmp	r4, r3
 802b822:	bf08      	it	eq
 802b824:	68f4      	ldreq	r4, [r6, #12]
 802b826:	e79d      	b.n	802b764 <_vfiprintf_r+0x20>
 802b828:	4621      	mov	r1, r4
 802b82a:	4630      	mov	r0, r6
 802b82c:	f7ff fc6c 	bl	802b108 <__swsetup_r>
 802b830:	2800      	cmp	r0, #0
 802b832:	d09d      	beq.n	802b770 <_vfiprintf_r+0x2c>
 802b834:	f04f 30ff 	mov.w	r0, #4294967295
 802b838:	b01d      	add	sp, #116	; 0x74
 802b83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b83e:	46a8      	mov	r8, r5
 802b840:	e7a2      	b.n	802b788 <_vfiprintf_r+0x44>
 802b842:	4a44      	ldr	r2, [pc, #272]	; (802b954 <_vfiprintf_r+0x210>)
 802b844:	1a80      	subs	r0, r0, r2
 802b846:	fa0b f000 	lsl.w	r0, fp, r0
 802b84a:	4318      	orrs	r0, r3
 802b84c:	9004      	str	r0, [sp, #16]
 802b84e:	4645      	mov	r5, r8
 802b850:	e7be      	b.n	802b7d0 <_vfiprintf_r+0x8c>
 802b852:	9a03      	ldr	r2, [sp, #12]
 802b854:	1d11      	adds	r1, r2, #4
 802b856:	6812      	ldr	r2, [r2, #0]
 802b858:	9103      	str	r1, [sp, #12]
 802b85a:	2a00      	cmp	r2, #0
 802b85c:	db01      	blt.n	802b862 <_vfiprintf_r+0x11e>
 802b85e:	9207      	str	r2, [sp, #28]
 802b860:	e004      	b.n	802b86c <_vfiprintf_r+0x128>
 802b862:	4252      	negs	r2, r2
 802b864:	f043 0302 	orr.w	r3, r3, #2
 802b868:	9207      	str	r2, [sp, #28]
 802b86a:	9304      	str	r3, [sp, #16]
 802b86c:	f898 3000 	ldrb.w	r3, [r8]
 802b870:	2b2e      	cmp	r3, #46	; 0x2e
 802b872:	d10e      	bne.n	802b892 <_vfiprintf_r+0x14e>
 802b874:	f898 3001 	ldrb.w	r3, [r8, #1]
 802b878:	2b2a      	cmp	r3, #42	; 0x2a
 802b87a:	d138      	bne.n	802b8ee <_vfiprintf_r+0x1aa>
 802b87c:	9b03      	ldr	r3, [sp, #12]
 802b87e:	1d1a      	adds	r2, r3, #4
 802b880:	681b      	ldr	r3, [r3, #0]
 802b882:	9203      	str	r2, [sp, #12]
 802b884:	2b00      	cmp	r3, #0
 802b886:	bfb8      	it	lt
 802b888:	f04f 33ff 	movlt.w	r3, #4294967295
 802b88c:	f108 0802 	add.w	r8, r8, #2
 802b890:	9305      	str	r3, [sp, #20]
 802b892:	4d33      	ldr	r5, [pc, #204]	; (802b960 <_vfiprintf_r+0x21c>)
 802b894:	f898 1000 	ldrb.w	r1, [r8]
 802b898:	2203      	movs	r2, #3
 802b89a:	4628      	mov	r0, r5
 802b89c:	f7f4 fbd0 	bl	8020040 <memchr>
 802b8a0:	b140      	cbz	r0, 802b8b4 <_vfiprintf_r+0x170>
 802b8a2:	2340      	movs	r3, #64	; 0x40
 802b8a4:	1b40      	subs	r0, r0, r5
 802b8a6:	fa03 f000 	lsl.w	r0, r3, r0
 802b8aa:	9b04      	ldr	r3, [sp, #16]
 802b8ac:	4303      	orrs	r3, r0
 802b8ae:	f108 0801 	add.w	r8, r8, #1
 802b8b2:	9304      	str	r3, [sp, #16]
 802b8b4:	f898 1000 	ldrb.w	r1, [r8]
 802b8b8:	482a      	ldr	r0, [pc, #168]	; (802b964 <_vfiprintf_r+0x220>)
 802b8ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b8be:	2206      	movs	r2, #6
 802b8c0:	f108 0701 	add.w	r7, r8, #1
 802b8c4:	f7f4 fbbc 	bl	8020040 <memchr>
 802b8c8:	2800      	cmp	r0, #0
 802b8ca:	d037      	beq.n	802b93c <_vfiprintf_r+0x1f8>
 802b8cc:	4b26      	ldr	r3, [pc, #152]	; (802b968 <_vfiprintf_r+0x224>)
 802b8ce:	bb1b      	cbnz	r3, 802b918 <_vfiprintf_r+0x1d4>
 802b8d0:	9b03      	ldr	r3, [sp, #12]
 802b8d2:	3307      	adds	r3, #7
 802b8d4:	f023 0307 	bic.w	r3, r3, #7
 802b8d8:	3308      	adds	r3, #8
 802b8da:	9303      	str	r3, [sp, #12]
 802b8dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b8de:	444b      	add	r3, r9
 802b8e0:	9309      	str	r3, [sp, #36]	; 0x24
 802b8e2:	e750      	b.n	802b786 <_vfiprintf_r+0x42>
 802b8e4:	fb05 3202 	mla	r2, r5, r2, r3
 802b8e8:	2001      	movs	r0, #1
 802b8ea:	4688      	mov	r8, r1
 802b8ec:	e78a      	b.n	802b804 <_vfiprintf_r+0xc0>
 802b8ee:	2300      	movs	r3, #0
 802b8f0:	f108 0801 	add.w	r8, r8, #1
 802b8f4:	9305      	str	r3, [sp, #20]
 802b8f6:	4619      	mov	r1, r3
 802b8f8:	250a      	movs	r5, #10
 802b8fa:	4640      	mov	r0, r8
 802b8fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b900:	3a30      	subs	r2, #48	; 0x30
 802b902:	2a09      	cmp	r2, #9
 802b904:	d903      	bls.n	802b90e <_vfiprintf_r+0x1ca>
 802b906:	2b00      	cmp	r3, #0
 802b908:	d0c3      	beq.n	802b892 <_vfiprintf_r+0x14e>
 802b90a:	9105      	str	r1, [sp, #20]
 802b90c:	e7c1      	b.n	802b892 <_vfiprintf_r+0x14e>
 802b90e:	fb05 2101 	mla	r1, r5, r1, r2
 802b912:	2301      	movs	r3, #1
 802b914:	4680      	mov	r8, r0
 802b916:	e7f0      	b.n	802b8fa <_vfiprintf_r+0x1b6>
 802b918:	ab03      	add	r3, sp, #12
 802b91a:	9300      	str	r3, [sp, #0]
 802b91c:	4622      	mov	r2, r4
 802b91e:	4b13      	ldr	r3, [pc, #76]	; (802b96c <_vfiprintf_r+0x228>)
 802b920:	a904      	add	r1, sp, #16
 802b922:	4630      	mov	r0, r6
 802b924:	f3af 8000 	nop.w
 802b928:	f1b0 3fff 	cmp.w	r0, #4294967295
 802b92c:	4681      	mov	r9, r0
 802b92e:	d1d5      	bne.n	802b8dc <_vfiprintf_r+0x198>
 802b930:	89a3      	ldrh	r3, [r4, #12]
 802b932:	065b      	lsls	r3, r3, #25
 802b934:	f53f af7e 	bmi.w	802b834 <_vfiprintf_r+0xf0>
 802b938:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b93a:	e77d      	b.n	802b838 <_vfiprintf_r+0xf4>
 802b93c:	ab03      	add	r3, sp, #12
 802b93e:	9300      	str	r3, [sp, #0]
 802b940:	4622      	mov	r2, r4
 802b942:	4b0a      	ldr	r3, [pc, #40]	; (802b96c <_vfiprintf_r+0x228>)
 802b944:	a904      	add	r1, sp, #16
 802b946:	4630      	mov	r0, r6
 802b948:	f000 f888 	bl	802ba5c <_printf_i>
 802b94c:	e7ec      	b.n	802b928 <_vfiprintf_r+0x1e4>
 802b94e:	bf00      	nop
 802b950:	0802bed0 	.word	0x0802bed0
 802b954:	0802bf10 	.word	0x0802bf10
 802b958:	0802bef0 	.word	0x0802bef0
 802b95c:	0802beb0 	.word	0x0802beb0
 802b960:	0802bf16 	.word	0x0802bf16
 802b964:	0802bf1a 	.word	0x0802bf1a
 802b968:	00000000 	.word	0x00000000
 802b96c:	0802b71f 	.word	0x0802b71f

0802b970 <_printf_common>:
 802b970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b974:	4691      	mov	r9, r2
 802b976:	461f      	mov	r7, r3
 802b978:	688a      	ldr	r2, [r1, #8]
 802b97a:	690b      	ldr	r3, [r1, #16]
 802b97c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802b980:	4293      	cmp	r3, r2
 802b982:	bfb8      	it	lt
 802b984:	4613      	movlt	r3, r2
 802b986:	f8c9 3000 	str.w	r3, [r9]
 802b98a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802b98e:	4606      	mov	r6, r0
 802b990:	460c      	mov	r4, r1
 802b992:	b112      	cbz	r2, 802b99a <_printf_common+0x2a>
 802b994:	3301      	adds	r3, #1
 802b996:	f8c9 3000 	str.w	r3, [r9]
 802b99a:	6823      	ldr	r3, [r4, #0]
 802b99c:	0699      	lsls	r1, r3, #26
 802b99e:	bf42      	ittt	mi
 802b9a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 802b9a4:	3302      	addmi	r3, #2
 802b9a6:	f8c9 3000 	strmi.w	r3, [r9]
 802b9aa:	6825      	ldr	r5, [r4, #0]
 802b9ac:	f015 0506 	ands.w	r5, r5, #6
 802b9b0:	d107      	bne.n	802b9c2 <_printf_common+0x52>
 802b9b2:	f104 0a19 	add.w	sl, r4, #25
 802b9b6:	68e3      	ldr	r3, [r4, #12]
 802b9b8:	f8d9 2000 	ldr.w	r2, [r9]
 802b9bc:	1a9b      	subs	r3, r3, r2
 802b9be:	42ab      	cmp	r3, r5
 802b9c0:	dc28      	bgt.n	802ba14 <_printf_common+0xa4>
 802b9c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802b9c6:	6822      	ldr	r2, [r4, #0]
 802b9c8:	3300      	adds	r3, #0
 802b9ca:	bf18      	it	ne
 802b9cc:	2301      	movne	r3, #1
 802b9ce:	0692      	lsls	r2, r2, #26
 802b9d0:	d42d      	bmi.n	802ba2e <_printf_common+0xbe>
 802b9d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b9d6:	4639      	mov	r1, r7
 802b9d8:	4630      	mov	r0, r6
 802b9da:	47c0      	blx	r8
 802b9dc:	3001      	adds	r0, #1
 802b9de:	d020      	beq.n	802ba22 <_printf_common+0xb2>
 802b9e0:	6823      	ldr	r3, [r4, #0]
 802b9e2:	68e5      	ldr	r5, [r4, #12]
 802b9e4:	f8d9 2000 	ldr.w	r2, [r9]
 802b9e8:	f003 0306 	and.w	r3, r3, #6
 802b9ec:	2b04      	cmp	r3, #4
 802b9ee:	bf08      	it	eq
 802b9f0:	1aad      	subeq	r5, r5, r2
 802b9f2:	68a3      	ldr	r3, [r4, #8]
 802b9f4:	6922      	ldr	r2, [r4, #16]
 802b9f6:	bf0c      	ite	eq
 802b9f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b9fc:	2500      	movne	r5, #0
 802b9fe:	4293      	cmp	r3, r2
 802ba00:	bfc4      	itt	gt
 802ba02:	1a9b      	subgt	r3, r3, r2
 802ba04:	18ed      	addgt	r5, r5, r3
 802ba06:	f04f 0900 	mov.w	r9, #0
 802ba0a:	341a      	adds	r4, #26
 802ba0c:	454d      	cmp	r5, r9
 802ba0e:	d11a      	bne.n	802ba46 <_printf_common+0xd6>
 802ba10:	2000      	movs	r0, #0
 802ba12:	e008      	b.n	802ba26 <_printf_common+0xb6>
 802ba14:	2301      	movs	r3, #1
 802ba16:	4652      	mov	r2, sl
 802ba18:	4639      	mov	r1, r7
 802ba1a:	4630      	mov	r0, r6
 802ba1c:	47c0      	blx	r8
 802ba1e:	3001      	adds	r0, #1
 802ba20:	d103      	bne.n	802ba2a <_printf_common+0xba>
 802ba22:	f04f 30ff 	mov.w	r0, #4294967295
 802ba26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ba2a:	3501      	adds	r5, #1
 802ba2c:	e7c3      	b.n	802b9b6 <_printf_common+0x46>
 802ba2e:	18e1      	adds	r1, r4, r3
 802ba30:	1c5a      	adds	r2, r3, #1
 802ba32:	2030      	movs	r0, #48	; 0x30
 802ba34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802ba38:	4422      	add	r2, r4
 802ba3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802ba3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802ba42:	3302      	adds	r3, #2
 802ba44:	e7c5      	b.n	802b9d2 <_printf_common+0x62>
 802ba46:	2301      	movs	r3, #1
 802ba48:	4622      	mov	r2, r4
 802ba4a:	4639      	mov	r1, r7
 802ba4c:	4630      	mov	r0, r6
 802ba4e:	47c0      	blx	r8
 802ba50:	3001      	adds	r0, #1
 802ba52:	d0e6      	beq.n	802ba22 <_printf_common+0xb2>
 802ba54:	f109 0901 	add.w	r9, r9, #1
 802ba58:	e7d8      	b.n	802ba0c <_printf_common+0x9c>
	...

0802ba5c <_printf_i>:
 802ba5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802ba60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802ba64:	460c      	mov	r4, r1
 802ba66:	7e09      	ldrb	r1, [r1, #24]
 802ba68:	b085      	sub	sp, #20
 802ba6a:	296e      	cmp	r1, #110	; 0x6e
 802ba6c:	4617      	mov	r7, r2
 802ba6e:	4606      	mov	r6, r0
 802ba70:	4698      	mov	r8, r3
 802ba72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802ba74:	f000 80b3 	beq.w	802bbde <_printf_i+0x182>
 802ba78:	d822      	bhi.n	802bac0 <_printf_i+0x64>
 802ba7a:	2963      	cmp	r1, #99	; 0x63
 802ba7c:	d036      	beq.n	802baec <_printf_i+0x90>
 802ba7e:	d80a      	bhi.n	802ba96 <_printf_i+0x3a>
 802ba80:	2900      	cmp	r1, #0
 802ba82:	f000 80b9 	beq.w	802bbf8 <_printf_i+0x19c>
 802ba86:	2958      	cmp	r1, #88	; 0x58
 802ba88:	f000 8083 	beq.w	802bb92 <_printf_i+0x136>
 802ba8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ba90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802ba94:	e032      	b.n	802bafc <_printf_i+0xa0>
 802ba96:	2964      	cmp	r1, #100	; 0x64
 802ba98:	d001      	beq.n	802ba9e <_printf_i+0x42>
 802ba9a:	2969      	cmp	r1, #105	; 0x69
 802ba9c:	d1f6      	bne.n	802ba8c <_printf_i+0x30>
 802ba9e:	6820      	ldr	r0, [r4, #0]
 802baa0:	6813      	ldr	r3, [r2, #0]
 802baa2:	0605      	lsls	r5, r0, #24
 802baa4:	f103 0104 	add.w	r1, r3, #4
 802baa8:	d52a      	bpl.n	802bb00 <_printf_i+0xa4>
 802baaa:	681b      	ldr	r3, [r3, #0]
 802baac:	6011      	str	r1, [r2, #0]
 802baae:	2b00      	cmp	r3, #0
 802bab0:	da03      	bge.n	802baba <_printf_i+0x5e>
 802bab2:	222d      	movs	r2, #45	; 0x2d
 802bab4:	425b      	negs	r3, r3
 802bab6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802baba:	486f      	ldr	r0, [pc, #444]	; (802bc78 <_printf_i+0x21c>)
 802babc:	220a      	movs	r2, #10
 802babe:	e039      	b.n	802bb34 <_printf_i+0xd8>
 802bac0:	2973      	cmp	r1, #115	; 0x73
 802bac2:	f000 809d 	beq.w	802bc00 <_printf_i+0x1a4>
 802bac6:	d808      	bhi.n	802bada <_printf_i+0x7e>
 802bac8:	296f      	cmp	r1, #111	; 0x6f
 802baca:	d020      	beq.n	802bb0e <_printf_i+0xb2>
 802bacc:	2970      	cmp	r1, #112	; 0x70
 802bace:	d1dd      	bne.n	802ba8c <_printf_i+0x30>
 802bad0:	6823      	ldr	r3, [r4, #0]
 802bad2:	f043 0320 	orr.w	r3, r3, #32
 802bad6:	6023      	str	r3, [r4, #0]
 802bad8:	e003      	b.n	802bae2 <_printf_i+0x86>
 802bada:	2975      	cmp	r1, #117	; 0x75
 802badc:	d017      	beq.n	802bb0e <_printf_i+0xb2>
 802bade:	2978      	cmp	r1, #120	; 0x78
 802bae0:	d1d4      	bne.n	802ba8c <_printf_i+0x30>
 802bae2:	2378      	movs	r3, #120	; 0x78
 802bae4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802bae8:	4864      	ldr	r0, [pc, #400]	; (802bc7c <_printf_i+0x220>)
 802baea:	e055      	b.n	802bb98 <_printf_i+0x13c>
 802baec:	6813      	ldr	r3, [r2, #0]
 802baee:	1d19      	adds	r1, r3, #4
 802baf0:	681b      	ldr	r3, [r3, #0]
 802baf2:	6011      	str	r1, [r2, #0]
 802baf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802baf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802bafc:	2301      	movs	r3, #1
 802bafe:	e08c      	b.n	802bc1a <_printf_i+0x1be>
 802bb00:	681b      	ldr	r3, [r3, #0]
 802bb02:	6011      	str	r1, [r2, #0]
 802bb04:	f010 0f40 	tst.w	r0, #64	; 0x40
 802bb08:	bf18      	it	ne
 802bb0a:	b21b      	sxthne	r3, r3
 802bb0c:	e7cf      	b.n	802baae <_printf_i+0x52>
 802bb0e:	6813      	ldr	r3, [r2, #0]
 802bb10:	6825      	ldr	r5, [r4, #0]
 802bb12:	1d18      	adds	r0, r3, #4
 802bb14:	6010      	str	r0, [r2, #0]
 802bb16:	0628      	lsls	r0, r5, #24
 802bb18:	d501      	bpl.n	802bb1e <_printf_i+0xc2>
 802bb1a:	681b      	ldr	r3, [r3, #0]
 802bb1c:	e002      	b.n	802bb24 <_printf_i+0xc8>
 802bb1e:	0668      	lsls	r0, r5, #25
 802bb20:	d5fb      	bpl.n	802bb1a <_printf_i+0xbe>
 802bb22:	881b      	ldrh	r3, [r3, #0]
 802bb24:	4854      	ldr	r0, [pc, #336]	; (802bc78 <_printf_i+0x21c>)
 802bb26:	296f      	cmp	r1, #111	; 0x6f
 802bb28:	bf14      	ite	ne
 802bb2a:	220a      	movne	r2, #10
 802bb2c:	2208      	moveq	r2, #8
 802bb2e:	2100      	movs	r1, #0
 802bb30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802bb34:	6865      	ldr	r5, [r4, #4]
 802bb36:	60a5      	str	r5, [r4, #8]
 802bb38:	2d00      	cmp	r5, #0
 802bb3a:	f2c0 8095 	blt.w	802bc68 <_printf_i+0x20c>
 802bb3e:	6821      	ldr	r1, [r4, #0]
 802bb40:	f021 0104 	bic.w	r1, r1, #4
 802bb44:	6021      	str	r1, [r4, #0]
 802bb46:	2b00      	cmp	r3, #0
 802bb48:	d13d      	bne.n	802bbc6 <_printf_i+0x16a>
 802bb4a:	2d00      	cmp	r5, #0
 802bb4c:	f040 808e 	bne.w	802bc6c <_printf_i+0x210>
 802bb50:	4665      	mov	r5, ip
 802bb52:	2a08      	cmp	r2, #8
 802bb54:	d10b      	bne.n	802bb6e <_printf_i+0x112>
 802bb56:	6823      	ldr	r3, [r4, #0]
 802bb58:	07db      	lsls	r3, r3, #31
 802bb5a:	d508      	bpl.n	802bb6e <_printf_i+0x112>
 802bb5c:	6923      	ldr	r3, [r4, #16]
 802bb5e:	6862      	ldr	r2, [r4, #4]
 802bb60:	429a      	cmp	r2, r3
 802bb62:	bfde      	ittt	le
 802bb64:	2330      	movle	r3, #48	; 0x30
 802bb66:	f805 3c01 	strble.w	r3, [r5, #-1]
 802bb6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 802bb6e:	ebac 0305 	sub.w	r3, ip, r5
 802bb72:	6123      	str	r3, [r4, #16]
 802bb74:	f8cd 8000 	str.w	r8, [sp]
 802bb78:	463b      	mov	r3, r7
 802bb7a:	aa03      	add	r2, sp, #12
 802bb7c:	4621      	mov	r1, r4
 802bb7e:	4630      	mov	r0, r6
 802bb80:	f7ff fef6 	bl	802b970 <_printf_common>
 802bb84:	3001      	adds	r0, #1
 802bb86:	d14d      	bne.n	802bc24 <_printf_i+0x1c8>
 802bb88:	f04f 30ff 	mov.w	r0, #4294967295
 802bb8c:	b005      	add	sp, #20
 802bb8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802bb92:	4839      	ldr	r0, [pc, #228]	; (802bc78 <_printf_i+0x21c>)
 802bb94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802bb98:	6813      	ldr	r3, [r2, #0]
 802bb9a:	6821      	ldr	r1, [r4, #0]
 802bb9c:	1d1d      	adds	r5, r3, #4
 802bb9e:	681b      	ldr	r3, [r3, #0]
 802bba0:	6015      	str	r5, [r2, #0]
 802bba2:	060a      	lsls	r2, r1, #24
 802bba4:	d50b      	bpl.n	802bbbe <_printf_i+0x162>
 802bba6:	07ca      	lsls	r2, r1, #31
 802bba8:	bf44      	itt	mi
 802bbaa:	f041 0120 	orrmi.w	r1, r1, #32
 802bbae:	6021      	strmi	r1, [r4, #0]
 802bbb0:	b91b      	cbnz	r3, 802bbba <_printf_i+0x15e>
 802bbb2:	6822      	ldr	r2, [r4, #0]
 802bbb4:	f022 0220 	bic.w	r2, r2, #32
 802bbb8:	6022      	str	r2, [r4, #0]
 802bbba:	2210      	movs	r2, #16
 802bbbc:	e7b7      	b.n	802bb2e <_printf_i+0xd2>
 802bbbe:	064d      	lsls	r5, r1, #25
 802bbc0:	bf48      	it	mi
 802bbc2:	b29b      	uxthmi	r3, r3
 802bbc4:	e7ef      	b.n	802bba6 <_printf_i+0x14a>
 802bbc6:	4665      	mov	r5, ip
 802bbc8:	fbb3 f1f2 	udiv	r1, r3, r2
 802bbcc:	fb02 3311 	mls	r3, r2, r1, r3
 802bbd0:	5cc3      	ldrb	r3, [r0, r3]
 802bbd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802bbd6:	460b      	mov	r3, r1
 802bbd8:	2900      	cmp	r1, #0
 802bbda:	d1f5      	bne.n	802bbc8 <_printf_i+0x16c>
 802bbdc:	e7b9      	b.n	802bb52 <_printf_i+0xf6>
 802bbde:	6813      	ldr	r3, [r2, #0]
 802bbe0:	6825      	ldr	r5, [r4, #0]
 802bbe2:	6961      	ldr	r1, [r4, #20]
 802bbe4:	1d18      	adds	r0, r3, #4
 802bbe6:	6010      	str	r0, [r2, #0]
 802bbe8:	0628      	lsls	r0, r5, #24
 802bbea:	681b      	ldr	r3, [r3, #0]
 802bbec:	d501      	bpl.n	802bbf2 <_printf_i+0x196>
 802bbee:	6019      	str	r1, [r3, #0]
 802bbf0:	e002      	b.n	802bbf8 <_printf_i+0x19c>
 802bbf2:	066a      	lsls	r2, r5, #25
 802bbf4:	d5fb      	bpl.n	802bbee <_printf_i+0x192>
 802bbf6:	8019      	strh	r1, [r3, #0]
 802bbf8:	2300      	movs	r3, #0
 802bbfa:	6123      	str	r3, [r4, #16]
 802bbfc:	4665      	mov	r5, ip
 802bbfe:	e7b9      	b.n	802bb74 <_printf_i+0x118>
 802bc00:	6813      	ldr	r3, [r2, #0]
 802bc02:	1d19      	adds	r1, r3, #4
 802bc04:	6011      	str	r1, [r2, #0]
 802bc06:	681d      	ldr	r5, [r3, #0]
 802bc08:	6862      	ldr	r2, [r4, #4]
 802bc0a:	2100      	movs	r1, #0
 802bc0c:	4628      	mov	r0, r5
 802bc0e:	f7f4 fa17 	bl	8020040 <memchr>
 802bc12:	b108      	cbz	r0, 802bc18 <_printf_i+0x1bc>
 802bc14:	1b40      	subs	r0, r0, r5
 802bc16:	6060      	str	r0, [r4, #4]
 802bc18:	6863      	ldr	r3, [r4, #4]
 802bc1a:	6123      	str	r3, [r4, #16]
 802bc1c:	2300      	movs	r3, #0
 802bc1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802bc22:	e7a7      	b.n	802bb74 <_printf_i+0x118>
 802bc24:	6923      	ldr	r3, [r4, #16]
 802bc26:	462a      	mov	r2, r5
 802bc28:	4639      	mov	r1, r7
 802bc2a:	4630      	mov	r0, r6
 802bc2c:	47c0      	blx	r8
 802bc2e:	3001      	adds	r0, #1
 802bc30:	d0aa      	beq.n	802bb88 <_printf_i+0x12c>
 802bc32:	6823      	ldr	r3, [r4, #0]
 802bc34:	079b      	lsls	r3, r3, #30
 802bc36:	d413      	bmi.n	802bc60 <_printf_i+0x204>
 802bc38:	68e0      	ldr	r0, [r4, #12]
 802bc3a:	9b03      	ldr	r3, [sp, #12]
 802bc3c:	4298      	cmp	r0, r3
 802bc3e:	bfb8      	it	lt
 802bc40:	4618      	movlt	r0, r3
 802bc42:	e7a3      	b.n	802bb8c <_printf_i+0x130>
 802bc44:	2301      	movs	r3, #1
 802bc46:	464a      	mov	r2, r9
 802bc48:	4639      	mov	r1, r7
 802bc4a:	4630      	mov	r0, r6
 802bc4c:	47c0      	blx	r8
 802bc4e:	3001      	adds	r0, #1
 802bc50:	d09a      	beq.n	802bb88 <_printf_i+0x12c>
 802bc52:	3501      	adds	r5, #1
 802bc54:	68e3      	ldr	r3, [r4, #12]
 802bc56:	9a03      	ldr	r2, [sp, #12]
 802bc58:	1a9b      	subs	r3, r3, r2
 802bc5a:	42ab      	cmp	r3, r5
 802bc5c:	dcf2      	bgt.n	802bc44 <_printf_i+0x1e8>
 802bc5e:	e7eb      	b.n	802bc38 <_printf_i+0x1dc>
 802bc60:	2500      	movs	r5, #0
 802bc62:	f104 0919 	add.w	r9, r4, #25
 802bc66:	e7f5      	b.n	802bc54 <_printf_i+0x1f8>
 802bc68:	2b00      	cmp	r3, #0
 802bc6a:	d1ac      	bne.n	802bbc6 <_printf_i+0x16a>
 802bc6c:	7803      	ldrb	r3, [r0, #0]
 802bc6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802bc72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802bc76:	e76c      	b.n	802bb52 <_printf_i+0xf6>
 802bc78:	0802bf21 	.word	0x0802bf21
 802bc7c:	0802bf32 	.word	0x0802bf32

0802bc80 <_sbrk_r>:
 802bc80:	b538      	push	{r3, r4, r5, lr}
 802bc82:	4c06      	ldr	r4, [pc, #24]	; (802bc9c <_sbrk_r+0x1c>)
 802bc84:	2300      	movs	r3, #0
 802bc86:	4605      	mov	r5, r0
 802bc88:	4608      	mov	r0, r1
 802bc8a:	6023      	str	r3, [r4, #0]
 802bc8c:	f7fa fdfa 	bl	8026884 <_sbrk>
 802bc90:	1c43      	adds	r3, r0, #1
 802bc92:	d102      	bne.n	802bc9a <_sbrk_r+0x1a>
 802bc94:	6823      	ldr	r3, [r4, #0]
 802bc96:	b103      	cbz	r3, 802bc9a <_sbrk_r+0x1a>
 802bc98:	602b      	str	r3, [r5, #0]
 802bc9a:	bd38      	pop	{r3, r4, r5, pc}
 802bc9c:	20011518 	.word	0x20011518

0802bca0 <__sread>:
 802bca0:	b510      	push	{r4, lr}
 802bca2:	460c      	mov	r4, r1
 802bca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bca8:	f000 f896 	bl	802bdd8 <_read_r>
 802bcac:	2800      	cmp	r0, #0
 802bcae:	bfab      	itete	ge
 802bcb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802bcb2:	89a3      	ldrhlt	r3, [r4, #12]
 802bcb4:	181b      	addge	r3, r3, r0
 802bcb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802bcba:	bfac      	ite	ge
 802bcbc:	6563      	strge	r3, [r4, #84]	; 0x54
 802bcbe:	81a3      	strhlt	r3, [r4, #12]
 802bcc0:	bd10      	pop	{r4, pc}

0802bcc2 <__swrite>:
 802bcc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bcc6:	461f      	mov	r7, r3
 802bcc8:	898b      	ldrh	r3, [r1, #12]
 802bcca:	05db      	lsls	r3, r3, #23
 802bccc:	4605      	mov	r5, r0
 802bcce:	460c      	mov	r4, r1
 802bcd0:	4616      	mov	r6, r2
 802bcd2:	d505      	bpl.n	802bce0 <__swrite+0x1e>
 802bcd4:	2302      	movs	r3, #2
 802bcd6:	2200      	movs	r2, #0
 802bcd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bcdc:	f000 f868 	bl	802bdb0 <_lseek_r>
 802bce0:	89a3      	ldrh	r3, [r4, #12]
 802bce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bce6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802bcea:	81a3      	strh	r3, [r4, #12]
 802bcec:	4632      	mov	r2, r6
 802bcee:	463b      	mov	r3, r7
 802bcf0:	4628      	mov	r0, r5
 802bcf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802bcf6:	f000 b817 	b.w	802bd28 <_write_r>

0802bcfa <__sseek>:
 802bcfa:	b510      	push	{r4, lr}
 802bcfc:	460c      	mov	r4, r1
 802bcfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bd02:	f000 f855 	bl	802bdb0 <_lseek_r>
 802bd06:	1c43      	adds	r3, r0, #1
 802bd08:	89a3      	ldrh	r3, [r4, #12]
 802bd0a:	bf15      	itete	ne
 802bd0c:	6560      	strne	r0, [r4, #84]	; 0x54
 802bd0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802bd12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802bd16:	81a3      	strheq	r3, [r4, #12]
 802bd18:	bf18      	it	ne
 802bd1a:	81a3      	strhne	r3, [r4, #12]
 802bd1c:	bd10      	pop	{r4, pc}

0802bd1e <__sclose>:
 802bd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bd22:	f000 b813 	b.w	802bd4c <_close_r>
	...

0802bd28 <_write_r>:
 802bd28:	b538      	push	{r3, r4, r5, lr}
 802bd2a:	4c07      	ldr	r4, [pc, #28]	; (802bd48 <_write_r+0x20>)
 802bd2c:	4605      	mov	r5, r0
 802bd2e:	4608      	mov	r0, r1
 802bd30:	4611      	mov	r1, r2
 802bd32:	2200      	movs	r2, #0
 802bd34:	6022      	str	r2, [r4, #0]
 802bd36:	461a      	mov	r2, r3
 802bd38:	f7fa fd37 	bl	80267aa <_write>
 802bd3c:	1c43      	adds	r3, r0, #1
 802bd3e:	d102      	bne.n	802bd46 <_write_r+0x1e>
 802bd40:	6823      	ldr	r3, [r4, #0]
 802bd42:	b103      	cbz	r3, 802bd46 <_write_r+0x1e>
 802bd44:	602b      	str	r3, [r5, #0]
 802bd46:	bd38      	pop	{r3, r4, r5, pc}
 802bd48:	20011518 	.word	0x20011518

0802bd4c <_close_r>:
 802bd4c:	b538      	push	{r3, r4, r5, lr}
 802bd4e:	4c06      	ldr	r4, [pc, #24]	; (802bd68 <_close_r+0x1c>)
 802bd50:	2300      	movs	r3, #0
 802bd52:	4605      	mov	r5, r0
 802bd54:	4608      	mov	r0, r1
 802bd56:	6023      	str	r3, [r4, #0]
 802bd58:	f7fa fd60 	bl	802681c <_close>
 802bd5c:	1c43      	adds	r3, r0, #1
 802bd5e:	d102      	bne.n	802bd66 <_close_r+0x1a>
 802bd60:	6823      	ldr	r3, [r4, #0]
 802bd62:	b103      	cbz	r3, 802bd66 <_close_r+0x1a>
 802bd64:	602b      	str	r3, [r5, #0]
 802bd66:	bd38      	pop	{r3, r4, r5, pc}
 802bd68:	20011518 	.word	0x20011518

0802bd6c <_fstat_r>:
 802bd6c:	b538      	push	{r3, r4, r5, lr}
 802bd6e:	4c07      	ldr	r4, [pc, #28]	; (802bd8c <_fstat_r+0x20>)
 802bd70:	2300      	movs	r3, #0
 802bd72:	4605      	mov	r5, r0
 802bd74:	4608      	mov	r0, r1
 802bd76:	4611      	mov	r1, r2
 802bd78:	6023      	str	r3, [r4, #0]
 802bd7a:	f7fa fd5b 	bl	8026834 <_fstat>
 802bd7e:	1c43      	adds	r3, r0, #1
 802bd80:	d102      	bne.n	802bd88 <_fstat_r+0x1c>
 802bd82:	6823      	ldr	r3, [r4, #0]
 802bd84:	b103      	cbz	r3, 802bd88 <_fstat_r+0x1c>
 802bd86:	602b      	str	r3, [r5, #0]
 802bd88:	bd38      	pop	{r3, r4, r5, pc}
 802bd8a:	bf00      	nop
 802bd8c:	20011518 	.word	0x20011518

0802bd90 <_isatty_r>:
 802bd90:	b538      	push	{r3, r4, r5, lr}
 802bd92:	4c06      	ldr	r4, [pc, #24]	; (802bdac <_isatty_r+0x1c>)
 802bd94:	2300      	movs	r3, #0
 802bd96:	4605      	mov	r5, r0
 802bd98:	4608      	mov	r0, r1
 802bd9a:	6023      	str	r3, [r4, #0]
 802bd9c:	f7fa fd5a 	bl	8026854 <_isatty>
 802bda0:	1c43      	adds	r3, r0, #1
 802bda2:	d102      	bne.n	802bdaa <_isatty_r+0x1a>
 802bda4:	6823      	ldr	r3, [r4, #0]
 802bda6:	b103      	cbz	r3, 802bdaa <_isatty_r+0x1a>
 802bda8:	602b      	str	r3, [r5, #0]
 802bdaa:	bd38      	pop	{r3, r4, r5, pc}
 802bdac:	20011518 	.word	0x20011518

0802bdb0 <_lseek_r>:
 802bdb0:	b538      	push	{r3, r4, r5, lr}
 802bdb2:	4c07      	ldr	r4, [pc, #28]	; (802bdd0 <_lseek_r+0x20>)
 802bdb4:	4605      	mov	r5, r0
 802bdb6:	4608      	mov	r0, r1
 802bdb8:	4611      	mov	r1, r2
 802bdba:	2200      	movs	r2, #0
 802bdbc:	6022      	str	r2, [r4, #0]
 802bdbe:	461a      	mov	r2, r3
 802bdc0:	f7fa fd53 	bl	802686a <_lseek>
 802bdc4:	1c43      	adds	r3, r0, #1
 802bdc6:	d102      	bne.n	802bdce <_lseek_r+0x1e>
 802bdc8:	6823      	ldr	r3, [r4, #0]
 802bdca:	b103      	cbz	r3, 802bdce <_lseek_r+0x1e>
 802bdcc:	602b      	str	r3, [r5, #0]
 802bdce:	bd38      	pop	{r3, r4, r5, pc}
 802bdd0:	20011518 	.word	0x20011518

0802bdd4 <__malloc_lock>:
 802bdd4:	4770      	bx	lr

0802bdd6 <__malloc_unlock>:
 802bdd6:	4770      	bx	lr

0802bdd8 <_read_r>:
 802bdd8:	b538      	push	{r3, r4, r5, lr}
 802bdda:	4c07      	ldr	r4, [pc, #28]	; (802bdf8 <_read_r+0x20>)
 802bddc:	4605      	mov	r5, r0
 802bdde:	4608      	mov	r0, r1
 802bde0:	4611      	mov	r1, r2
 802bde2:	2200      	movs	r2, #0
 802bde4:	6022      	str	r2, [r4, #0]
 802bde6:	461a      	mov	r2, r3
 802bde8:	f7fa fcfb 	bl	80267e2 <_read>
 802bdec:	1c43      	adds	r3, r0, #1
 802bdee:	d102      	bne.n	802bdf6 <_read_r+0x1e>
 802bdf0:	6823      	ldr	r3, [r4, #0]
 802bdf2:	b103      	cbz	r3, 802bdf6 <_read_r+0x1e>
 802bdf4:	602b      	str	r3, [r5, #0]
 802bdf6:	bd38      	pop	{r3, r4, r5, pc}
 802bdf8:	20011518 	.word	0x20011518

0802bdfc <_init>:
 802bdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bdfe:	bf00      	nop
 802be00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802be02:	bc08      	pop	{r3}
 802be04:	469e      	mov	lr, r3
 802be06:	4770      	bx	lr

0802be08 <_fini>:
 802be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802be0a:	bf00      	nop
 802be0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802be0e:	bc08      	pop	{r3}
 802be10:	469e      	mov	lr, r3
 802be12:	4770      	bx	lr
