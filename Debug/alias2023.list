
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a234  08020000  08020000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0802a234  0802a234  0002a234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a254  0802a254  00030020  2**0
                  CONTENTS
  4 .ARM          00000008  0802a254  0802a254  0002a254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a25c  0802a25c  00030020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a25c  0802a25c  0002a25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a264  0802a264  0002a264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0802a268  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c4  20000020  0802a288  00030020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200009e4  0802a288  000309e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026c67  00000000  00000000  00030050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004195  00000000  00000000  00056cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001630  00000000  00000000  0005ae50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001480  00000000  00000000  0005c480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000250be  00000000  00000000  0005d900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000140e1  00000000  00000000  000829be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb4fe  00000000  00000000  00096a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161f9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e80  00000000  00000000  00162018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	20000020 	.word	0x20000020
 802001c:	00000000 	.word	0x00000000
 8020020:	0802a21c 	.word	0x0802a21c

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	20000024 	.word	0x20000024
 802003c:	0802a21c 	.word	0x0802a21c

08020040 <__aeabi_drsub>:
 8020040:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020044:	e002      	b.n	802004c <__adddf3>
 8020046:	bf00      	nop

08020048 <__aeabi_dsub>:
 8020048:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802004c <__adddf3>:
 802004c:	b530      	push	{r4, r5, lr}
 802004e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020052:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020056:	ea94 0f05 	teq	r4, r5
 802005a:	bf08      	it	eq
 802005c:	ea90 0f02 	teqeq	r0, r2
 8020060:	bf1f      	itttt	ne
 8020062:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020066:	ea55 0c02 	orrsne.w	ip, r5, r2
 802006a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802006e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020072:	f000 80e2 	beq.w	802023a <__adddf3+0x1ee>
 8020076:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802007a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802007e:	bfb8      	it	lt
 8020080:	426d      	neglt	r5, r5
 8020082:	dd0c      	ble.n	802009e <__adddf3+0x52>
 8020084:	442c      	add	r4, r5
 8020086:	ea80 0202 	eor.w	r2, r0, r2
 802008a:	ea81 0303 	eor.w	r3, r1, r3
 802008e:	ea82 0000 	eor.w	r0, r2, r0
 8020092:	ea83 0101 	eor.w	r1, r3, r1
 8020096:	ea80 0202 	eor.w	r2, r0, r2
 802009a:	ea81 0303 	eor.w	r3, r1, r3
 802009e:	2d36      	cmp	r5, #54	; 0x36
 80200a0:	bf88      	it	hi
 80200a2:	bd30      	pophi	{r4, r5, pc}
 80200a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80200a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80200ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80200b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80200b4:	d002      	beq.n	80200bc <__adddf3+0x70>
 80200b6:	4240      	negs	r0, r0
 80200b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80200bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80200c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80200c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80200c8:	d002      	beq.n	80200d0 <__adddf3+0x84>
 80200ca:	4252      	negs	r2, r2
 80200cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80200d0:	ea94 0f05 	teq	r4, r5
 80200d4:	f000 80a7 	beq.w	8020226 <__adddf3+0x1da>
 80200d8:	f1a4 0401 	sub.w	r4, r4, #1
 80200dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80200e0:	db0d      	blt.n	80200fe <__adddf3+0xb2>
 80200e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80200e6:	fa22 f205 	lsr.w	r2, r2, r5
 80200ea:	1880      	adds	r0, r0, r2
 80200ec:	f141 0100 	adc.w	r1, r1, #0
 80200f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80200f4:	1880      	adds	r0, r0, r2
 80200f6:	fa43 f305 	asr.w	r3, r3, r5
 80200fa:	4159      	adcs	r1, r3
 80200fc:	e00e      	b.n	802011c <__adddf3+0xd0>
 80200fe:	f1a5 0520 	sub.w	r5, r5, #32
 8020102:	f10e 0e20 	add.w	lr, lr, #32
 8020106:	2a01      	cmp	r2, #1
 8020108:	fa03 fc0e 	lsl.w	ip, r3, lr
 802010c:	bf28      	it	cs
 802010e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020112:	fa43 f305 	asr.w	r3, r3, r5
 8020116:	18c0      	adds	r0, r0, r3
 8020118:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802011c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020120:	d507      	bpl.n	8020132 <__adddf3+0xe6>
 8020122:	f04f 0e00 	mov.w	lr, #0
 8020126:	f1dc 0c00 	rsbs	ip, ip, #0
 802012a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802012e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020132:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020136:	d31b      	bcc.n	8020170 <__adddf3+0x124>
 8020138:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802013c:	d30c      	bcc.n	8020158 <__adddf3+0x10c>
 802013e:	0849      	lsrs	r1, r1, #1
 8020140:	ea5f 0030 	movs.w	r0, r0, rrx
 8020144:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020148:	f104 0401 	add.w	r4, r4, #1
 802014c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020150:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020154:	f080 809a 	bcs.w	802028c <__adddf3+0x240>
 8020158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802015c:	bf08      	it	eq
 802015e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020162:	f150 0000 	adcs.w	r0, r0, #0
 8020166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802016a:	ea41 0105 	orr.w	r1, r1, r5
 802016e:	bd30      	pop	{r4, r5, pc}
 8020170:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020174:	4140      	adcs	r0, r0
 8020176:	eb41 0101 	adc.w	r1, r1, r1
 802017a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802017e:	f1a4 0401 	sub.w	r4, r4, #1
 8020182:	d1e9      	bne.n	8020158 <__adddf3+0x10c>
 8020184:	f091 0f00 	teq	r1, #0
 8020188:	bf04      	itt	eq
 802018a:	4601      	moveq	r1, r0
 802018c:	2000      	moveq	r0, #0
 802018e:	fab1 f381 	clz	r3, r1
 8020192:	bf08      	it	eq
 8020194:	3320      	addeq	r3, #32
 8020196:	f1a3 030b 	sub.w	r3, r3, #11
 802019a:	f1b3 0220 	subs.w	r2, r3, #32
 802019e:	da0c      	bge.n	80201ba <__adddf3+0x16e>
 80201a0:	320c      	adds	r2, #12
 80201a2:	dd08      	ble.n	80201b6 <__adddf3+0x16a>
 80201a4:	f102 0c14 	add.w	ip, r2, #20
 80201a8:	f1c2 020c 	rsb	r2, r2, #12
 80201ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80201b0:	fa21 f102 	lsr.w	r1, r1, r2
 80201b4:	e00c      	b.n	80201d0 <__adddf3+0x184>
 80201b6:	f102 0214 	add.w	r2, r2, #20
 80201ba:	bfd8      	it	le
 80201bc:	f1c2 0c20 	rsble	ip, r2, #32
 80201c0:	fa01 f102 	lsl.w	r1, r1, r2
 80201c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80201c8:	bfdc      	itt	le
 80201ca:	ea41 010c 	orrle.w	r1, r1, ip
 80201ce:	4090      	lslle	r0, r2
 80201d0:	1ae4      	subs	r4, r4, r3
 80201d2:	bfa2      	ittt	ge
 80201d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80201d8:	4329      	orrge	r1, r5
 80201da:	bd30      	popge	{r4, r5, pc}
 80201dc:	ea6f 0404 	mvn.w	r4, r4
 80201e0:	3c1f      	subs	r4, #31
 80201e2:	da1c      	bge.n	802021e <__adddf3+0x1d2>
 80201e4:	340c      	adds	r4, #12
 80201e6:	dc0e      	bgt.n	8020206 <__adddf3+0x1ba>
 80201e8:	f104 0414 	add.w	r4, r4, #20
 80201ec:	f1c4 0220 	rsb	r2, r4, #32
 80201f0:	fa20 f004 	lsr.w	r0, r0, r4
 80201f4:	fa01 f302 	lsl.w	r3, r1, r2
 80201f8:	ea40 0003 	orr.w	r0, r0, r3
 80201fc:	fa21 f304 	lsr.w	r3, r1, r4
 8020200:	ea45 0103 	orr.w	r1, r5, r3
 8020204:	bd30      	pop	{r4, r5, pc}
 8020206:	f1c4 040c 	rsb	r4, r4, #12
 802020a:	f1c4 0220 	rsb	r2, r4, #32
 802020e:	fa20 f002 	lsr.w	r0, r0, r2
 8020212:	fa01 f304 	lsl.w	r3, r1, r4
 8020216:	ea40 0003 	orr.w	r0, r0, r3
 802021a:	4629      	mov	r1, r5
 802021c:	bd30      	pop	{r4, r5, pc}
 802021e:	fa21 f004 	lsr.w	r0, r1, r4
 8020222:	4629      	mov	r1, r5
 8020224:	bd30      	pop	{r4, r5, pc}
 8020226:	f094 0f00 	teq	r4, #0
 802022a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802022e:	bf06      	itte	eq
 8020230:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020234:	3401      	addeq	r4, #1
 8020236:	3d01      	subne	r5, #1
 8020238:	e74e      	b.n	80200d8 <__adddf3+0x8c>
 802023a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802023e:	bf18      	it	ne
 8020240:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020244:	d029      	beq.n	802029a <__adddf3+0x24e>
 8020246:	ea94 0f05 	teq	r4, r5
 802024a:	bf08      	it	eq
 802024c:	ea90 0f02 	teqeq	r0, r2
 8020250:	d005      	beq.n	802025e <__adddf3+0x212>
 8020252:	ea54 0c00 	orrs.w	ip, r4, r0
 8020256:	bf04      	itt	eq
 8020258:	4619      	moveq	r1, r3
 802025a:	4610      	moveq	r0, r2
 802025c:	bd30      	pop	{r4, r5, pc}
 802025e:	ea91 0f03 	teq	r1, r3
 8020262:	bf1e      	ittt	ne
 8020264:	2100      	movne	r1, #0
 8020266:	2000      	movne	r0, #0
 8020268:	bd30      	popne	{r4, r5, pc}
 802026a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802026e:	d105      	bne.n	802027c <__adddf3+0x230>
 8020270:	0040      	lsls	r0, r0, #1
 8020272:	4149      	adcs	r1, r1
 8020274:	bf28      	it	cs
 8020276:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802027a:	bd30      	pop	{r4, r5, pc}
 802027c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020280:	bf3c      	itt	cc
 8020282:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020286:	bd30      	popcc	{r4, r5, pc}
 8020288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802028c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020290:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020294:	f04f 0000 	mov.w	r0, #0
 8020298:	bd30      	pop	{r4, r5, pc}
 802029a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802029e:	bf1a      	itte	ne
 80202a0:	4619      	movne	r1, r3
 80202a2:	4610      	movne	r0, r2
 80202a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80202a8:	bf1c      	itt	ne
 80202aa:	460b      	movne	r3, r1
 80202ac:	4602      	movne	r2, r0
 80202ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80202b2:	bf06      	itte	eq
 80202b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80202b8:	ea91 0f03 	teqeq	r1, r3
 80202bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80202c0:	bd30      	pop	{r4, r5, pc}
 80202c2:	bf00      	nop

080202c4 <__aeabi_ui2d>:
 80202c4:	f090 0f00 	teq	r0, #0
 80202c8:	bf04      	itt	eq
 80202ca:	2100      	moveq	r1, #0
 80202cc:	4770      	bxeq	lr
 80202ce:	b530      	push	{r4, r5, lr}
 80202d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202d8:	f04f 0500 	mov.w	r5, #0
 80202dc:	f04f 0100 	mov.w	r1, #0
 80202e0:	e750      	b.n	8020184 <__adddf3+0x138>
 80202e2:	bf00      	nop

080202e4 <__aeabi_i2d>:
 80202e4:	f090 0f00 	teq	r0, #0
 80202e8:	bf04      	itt	eq
 80202ea:	2100      	moveq	r1, #0
 80202ec:	4770      	bxeq	lr
 80202ee:	b530      	push	{r4, r5, lr}
 80202f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80202fc:	bf48      	it	mi
 80202fe:	4240      	negmi	r0, r0
 8020300:	f04f 0100 	mov.w	r1, #0
 8020304:	e73e      	b.n	8020184 <__adddf3+0x138>
 8020306:	bf00      	nop

08020308 <__aeabi_f2d>:
 8020308:	0042      	lsls	r2, r0, #1
 802030a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802030e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020312:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020316:	bf1f      	itttt	ne
 8020318:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802031c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020320:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020324:	4770      	bxne	lr
 8020326:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802032a:	bf08      	it	eq
 802032c:	4770      	bxeq	lr
 802032e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020332:	bf04      	itt	eq
 8020334:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020338:	4770      	bxeq	lr
 802033a:	b530      	push	{r4, r5, lr}
 802033c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020344:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020348:	e71c      	b.n	8020184 <__adddf3+0x138>
 802034a:	bf00      	nop

0802034c <__aeabi_ul2d>:
 802034c:	ea50 0201 	orrs.w	r2, r0, r1
 8020350:	bf08      	it	eq
 8020352:	4770      	bxeq	lr
 8020354:	b530      	push	{r4, r5, lr}
 8020356:	f04f 0500 	mov.w	r5, #0
 802035a:	e00a      	b.n	8020372 <__aeabi_l2d+0x16>

0802035c <__aeabi_l2d>:
 802035c:	ea50 0201 	orrs.w	r2, r0, r1
 8020360:	bf08      	it	eq
 8020362:	4770      	bxeq	lr
 8020364:	b530      	push	{r4, r5, lr}
 8020366:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802036a:	d502      	bpl.n	8020372 <__aeabi_l2d+0x16>
 802036c:	4240      	negs	r0, r0
 802036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020372:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020376:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802037a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802037e:	f43f aed8 	beq.w	8020132 <__adddf3+0xe6>
 8020382:	f04f 0203 	mov.w	r2, #3
 8020386:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802038a:	bf18      	it	ne
 802038c:	3203      	addne	r2, #3
 802038e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020392:	bf18      	it	ne
 8020394:	3203      	addne	r2, #3
 8020396:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802039a:	f1c2 0320 	rsb	r3, r2, #32
 802039e:	fa00 fc03 	lsl.w	ip, r0, r3
 80203a2:	fa20 f002 	lsr.w	r0, r0, r2
 80203a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80203aa:	ea40 000e 	orr.w	r0, r0, lr
 80203ae:	fa21 f102 	lsr.w	r1, r1, r2
 80203b2:	4414      	add	r4, r2
 80203b4:	e6bd      	b.n	8020132 <__adddf3+0xe6>
 80203b6:	bf00      	nop

080203b8 <__aeabi_dmul>:
 80203b8:	b570      	push	{r4, r5, r6, lr}
 80203ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80203be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80203c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80203c6:	bf1d      	ittte	ne
 80203c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80203cc:	ea94 0f0c 	teqne	r4, ip
 80203d0:	ea95 0f0c 	teqne	r5, ip
 80203d4:	f000 f8de 	bleq	8020594 <__aeabi_dmul+0x1dc>
 80203d8:	442c      	add	r4, r5
 80203da:	ea81 0603 	eor.w	r6, r1, r3
 80203de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80203e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80203e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80203ea:	bf18      	it	ne
 80203ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80203f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80203f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80203f8:	d038      	beq.n	802046c <__aeabi_dmul+0xb4>
 80203fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80203fe:	f04f 0500 	mov.w	r5, #0
 8020402:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020406:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802040a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802040e:	f04f 0600 	mov.w	r6, #0
 8020412:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020416:	f09c 0f00 	teq	ip, #0
 802041a:	bf18      	it	ne
 802041c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020420:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020424:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020428:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802042c:	d204      	bcs.n	8020438 <__aeabi_dmul+0x80>
 802042e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020432:	416d      	adcs	r5, r5
 8020434:	eb46 0606 	adc.w	r6, r6, r6
 8020438:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802043c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020440:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020444:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020448:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802044c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020450:	bf88      	it	hi
 8020452:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020456:	d81e      	bhi.n	8020496 <__aeabi_dmul+0xde>
 8020458:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802045c:	bf08      	it	eq
 802045e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020462:	f150 0000 	adcs.w	r0, r0, #0
 8020466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802046a:	bd70      	pop	{r4, r5, r6, pc}
 802046c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020470:	ea46 0101 	orr.w	r1, r6, r1
 8020474:	ea40 0002 	orr.w	r0, r0, r2
 8020478:	ea81 0103 	eor.w	r1, r1, r3
 802047c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020480:	bfc2      	ittt	gt
 8020482:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020486:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802048a:	bd70      	popgt	{r4, r5, r6, pc}
 802048c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020490:	f04f 0e00 	mov.w	lr, #0
 8020494:	3c01      	subs	r4, #1
 8020496:	f300 80ab 	bgt.w	80205f0 <__aeabi_dmul+0x238>
 802049a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802049e:	bfde      	ittt	le
 80204a0:	2000      	movle	r0, #0
 80204a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80204a6:	bd70      	pople	{r4, r5, r6, pc}
 80204a8:	f1c4 0400 	rsb	r4, r4, #0
 80204ac:	3c20      	subs	r4, #32
 80204ae:	da35      	bge.n	802051c <__aeabi_dmul+0x164>
 80204b0:	340c      	adds	r4, #12
 80204b2:	dc1b      	bgt.n	80204ec <__aeabi_dmul+0x134>
 80204b4:	f104 0414 	add.w	r4, r4, #20
 80204b8:	f1c4 0520 	rsb	r5, r4, #32
 80204bc:	fa00 f305 	lsl.w	r3, r0, r5
 80204c0:	fa20 f004 	lsr.w	r0, r0, r4
 80204c4:	fa01 f205 	lsl.w	r2, r1, r5
 80204c8:	ea40 0002 	orr.w	r0, r0, r2
 80204cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80204d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80204d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80204d8:	fa21 f604 	lsr.w	r6, r1, r4
 80204dc:	eb42 0106 	adc.w	r1, r2, r6
 80204e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80204e4:	bf08      	it	eq
 80204e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80204ea:	bd70      	pop	{r4, r5, r6, pc}
 80204ec:	f1c4 040c 	rsb	r4, r4, #12
 80204f0:	f1c4 0520 	rsb	r5, r4, #32
 80204f4:	fa00 f304 	lsl.w	r3, r0, r4
 80204f8:	fa20 f005 	lsr.w	r0, r0, r5
 80204fc:	fa01 f204 	lsl.w	r2, r1, r4
 8020500:	ea40 0002 	orr.w	r0, r0, r2
 8020504:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020508:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802050c:	f141 0100 	adc.w	r1, r1, #0
 8020510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020514:	bf08      	it	eq
 8020516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802051a:	bd70      	pop	{r4, r5, r6, pc}
 802051c:	f1c4 0520 	rsb	r5, r4, #32
 8020520:	fa00 f205 	lsl.w	r2, r0, r5
 8020524:	ea4e 0e02 	orr.w	lr, lr, r2
 8020528:	fa20 f304 	lsr.w	r3, r0, r4
 802052c:	fa01 f205 	lsl.w	r2, r1, r5
 8020530:	ea43 0302 	orr.w	r3, r3, r2
 8020534:	fa21 f004 	lsr.w	r0, r1, r4
 8020538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802053c:	fa21 f204 	lsr.w	r2, r1, r4
 8020540:	ea20 0002 	bic.w	r0, r0, r2
 8020544:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802054c:	bf08      	it	eq
 802054e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020552:	bd70      	pop	{r4, r5, r6, pc}
 8020554:	f094 0f00 	teq	r4, #0
 8020558:	d10f      	bne.n	802057a <__aeabi_dmul+0x1c2>
 802055a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802055e:	0040      	lsls	r0, r0, #1
 8020560:	eb41 0101 	adc.w	r1, r1, r1
 8020564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020568:	bf08      	it	eq
 802056a:	3c01      	subeq	r4, #1
 802056c:	d0f7      	beq.n	802055e <__aeabi_dmul+0x1a6>
 802056e:	ea41 0106 	orr.w	r1, r1, r6
 8020572:	f095 0f00 	teq	r5, #0
 8020576:	bf18      	it	ne
 8020578:	4770      	bxne	lr
 802057a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802057e:	0052      	lsls	r2, r2, #1
 8020580:	eb43 0303 	adc.w	r3, r3, r3
 8020584:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020588:	bf08      	it	eq
 802058a:	3d01      	subeq	r5, #1
 802058c:	d0f7      	beq.n	802057e <__aeabi_dmul+0x1c6>
 802058e:	ea43 0306 	orr.w	r3, r3, r6
 8020592:	4770      	bx	lr
 8020594:	ea94 0f0c 	teq	r4, ip
 8020598:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802059c:	bf18      	it	ne
 802059e:	ea95 0f0c 	teqne	r5, ip
 80205a2:	d00c      	beq.n	80205be <__aeabi_dmul+0x206>
 80205a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205a8:	bf18      	it	ne
 80205aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205ae:	d1d1      	bne.n	8020554 <__aeabi_dmul+0x19c>
 80205b0:	ea81 0103 	eor.w	r1, r1, r3
 80205b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205b8:	f04f 0000 	mov.w	r0, #0
 80205bc:	bd70      	pop	{r4, r5, r6, pc}
 80205be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205c2:	bf06      	itte	eq
 80205c4:	4610      	moveq	r0, r2
 80205c6:	4619      	moveq	r1, r3
 80205c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205cc:	d019      	beq.n	8020602 <__aeabi_dmul+0x24a>
 80205ce:	ea94 0f0c 	teq	r4, ip
 80205d2:	d102      	bne.n	80205da <__aeabi_dmul+0x222>
 80205d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80205d8:	d113      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205da:	ea95 0f0c 	teq	r5, ip
 80205de:	d105      	bne.n	80205ec <__aeabi_dmul+0x234>
 80205e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80205e4:	bf1c      	itt	ne
 80205e6:	4610      	movne	r0, r2
 80205e8:	4619      	movne	r1, r3
 80205ea:	d10a      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205ec:	ea81 0103 	eor.w	r1, r1, r3
 80205f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80205f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80205fc:	f04f 0000 	mov.w	r0, #0
 8020600:	bd70      	pop	{r4, r5, r6, pc}
 8020602:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020606:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802060a:	bd70      	pop	{r4, r5, r6, pc}

0802060c <__aeabi_ddiv>:
 802060c:	b570      	push	{r4, r5, r6, lr}
 802060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802061a:	bf1d      	ittte	ne
 802061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020620:	ea94 0f0c 	teqne	r4, ip
 8020624:	ea95 0f0c 	teqne	r5, ip
 8020628:	f000 f8a7 	bleq	802077a <__aeabi_ddiv+0x16e>
 802062c:	eba4 0405 	sub.w	r4, r4, r5
 8020630:	ea81 0e03 	eor.w	lr, r1, r3
 8020634:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802063c:	f000 8088 	beq.w	8020750 <__aeabi_ddiv+0x144>
 8020640:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020644:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020648:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802064c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020650:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020654:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020658:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802065c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020660:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020664:	429d      	cmp	r5, r3
 8020666:	bf08      	it	eq
 8020668:	4296      	cmpeq	r6, r2
 802066a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802066e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020672:	d202      	bcs.n	802067a <__aeabi_ddiv+0x6e>
 8020674:	085b      	lsrs	r3, r3, #1
 8020676:	ea4f 0232 	mov.w	r2, r2, rrx
 802067a:	1ab6      	subs	r6, r6, r2
 802067c:	eb65 0503 	sbc.w	r5, r5, r3
 8020680:	085b      	lsrs	r3, r3, #1
 8020682:	ea4f 0232 	mov.w	r2, r2, rrx
 8020686:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802068a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802068e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020692:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020696:	bf22      	ittt	cs
 8020698:	1ab6      	subcs	r6, r6, r2
 802069a:	4675      	movcs	r5, lr
 802069c:	ea40 000c 	orrcs.w	r0, r0, ip
 80206a0:	085b      	lsrs	r3, r3, #1
 80206a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206ae:	bf22      	ittt	cs
 80206b0:	1ab6      	subcs	r6, r6, r2
 80206b2:	4675      	movcs	r5, lr
 80206b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80206b8:	085b      	lsrs	r3, r3, #1
 80206ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80206be:	ebb6 0e02 	subs.w	lr, r6, r2
 80206c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206c6:	bf22      	ittt	cs
 80206c8:	1ab6      	subcs	r6, r6, r2
 80206ca:	4675      	movcs	r5, lr
 80206cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80206d0:	085b      	lsrs	r3, r3, #1
 80206d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206de:	bf22      	ittt	cs
 80206e0:	1ab6      	subcs	r6, r6, r2
 80206e2:	4675      	movcs	r5, lr
 80206e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80206e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80206ec:	d018      	beq.n	8020720 <__aeabi_ddiv+0x114>
 80206ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80206f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80206f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80206fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80206fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020702:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020706:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802070a:	d1c0      	bne.n	802068e <__aeabi_ddiv+0x82>
 802070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020710:	d10b      	bne.n	802072a <__aeabi_ddiv+0x11e>
 8020712:	ea41 0100 	orr.w	r1, r1, r0
 8020716:	f04f 0000 	mov.w	r0, #0
 802071a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802071e:	e7b6      	b.n	802068e <__aeabi_ddiv+0x82>
 8020720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020724:	bf04      	itt	eq
 8020726:	4301      	orreq	r1, r0
 8020728:	2000      	moveq	r0, #0
 802072a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802072e:	bf88      	it	hi
 8020730:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020734:	f63f aeaf 	bhi.w	8020496 <__aeabi_dmul+0xde>
 8020738:	ebb5 0c03 	subs.w	ip, r5, r3
 802073c:	bf04      	itt	eq
 802073e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020742:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020746:	f150 0000 	adcs.w	r0, r0, #0
 802074a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802074e:	bd70      	pop	{r4, r5, r6, pc}
 8020750:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020754:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020758:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802075c:	bfc2      	ittt	gt
 802075e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020762:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020766:	bd70      	popgt	{r4, r5, r6, pc}
 8020768:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802076c:	f04f 0e00 	mov.w	lr, #0
 8020770:	3c01      	subs	r4, #1
 8020772:	e690      	b.n	8020496 <__aeabi_dmul+0xde>
 8020774:	ea45 0e06 	orr.w	lr, r5, r6
 8020778:	e68d      	b.n	8020496 <__aeabi_dmul+0xde>
 802077a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802077e:	ea94 0f0c 	teq	r4, ip
 8020782:	bf08      	it	eq
 8020784:	ea95 0f0c 	teqeq	r5, ip
 8020788:	f43f af3b 	beq.w	8020602 <__aeabi_dmul+0x24a>
 802078c:	ea94 0f0c 	teq	r4, ip
 8020790:	d10a      	bne.n	80207a8 <__aeabi_ddiv+0x19c>
 8020792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020796:	f47f af34 	bne.w	8020602 <__aeabi_dmul+0x24a>
 802079a:	ea95 0f0c 	teq	r5, ip
 802079e:	f47f af25 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207a2:	4610      	mov	r0, r2
 80207a4:	4619      	mov	r1, r3
 80207a6:	e72c      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207a8:	ea95 0f0c 	teq	r5, ip
 80207ac:	d106      	bne.n	80207bc <__aeabi_ddiv+0x1b0>
 80207ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80207b2:	f43f aefd 	beq.w	80205b0 <__aeabi_dmul+0x1f8>
 80207b6:	4610      	mov	r0, r2
 80207b8:	4619      	mov	r1, r3
 80207ba:	e722      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207c0:	bf18      	it	ne
 80207c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207c6:	f47f aec5 	bne.w	8020554 <__aeabi_dmul+0x19c>
 80207ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80207ce:	f47f af0d 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80207d6:	f47f aeeb 	bne.w	80205b0 <__aeabi_dmul+0x1f8>
 80207da:	e712      	b.n	8020602 <__aeabi_dmul+0x24a>

080207dc <__gedf2>:
 80207dc:	f04f 3cff 	mov.w	ip, #4294967295
 80207e0:	e006      	b.n	80207f0 <__cmpdf2+0x4>
 80207e2:	bf00      	nop

080207e4 <__ledf2>:
 80207e4:	f04f 0c01 	mov.w	ip, #1
 80207e8:	e002      	b.n	80207f0 <__cmpdf2+0x4>
 80207ea:	bf00      	nop

080207ec <__cmpdf2>:
 80207ec:	f04f 0c01 	mov.w	ip, #1
 80207f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80207f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80207f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80207fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020800:	bf18      	it	ne
 8020802:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020806:	d01b      	beq.n	8020840 <__cmpdf2+0x54>
 8020808:	b001      	add	sp, #4
 802080a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802080e:	bf0c      	ite	eq
 8020810:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020814:	ea91 0f03 	teqne	r1, r3
 8020818:	bf02      	ittt	eq
 802081a:	ea90 0f02 	teqeq	r0, r2
 802081e:	2000      	moveq	r0, #0
 8020820:	4770      	bxeq	lr
 8020822:	f110 0f00 	cmn.w	r0, #0
 8020826:	ea91 0f03 	teq	r1, r3
 802082a:	bf58      	it	pl
 802082c:	4299      	cmppl	r1, r3
 802082e:	bf08      	it	eq
 8020830:	4290      	cmpeq	r0, r2
 8020832:	bf2c      	ite	cs
 8020834:	17d8      	asrcs	r0, r3, #31
 8020836:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802083a:	f040 0001 	orr.w	r0, r0, #1
 802083e:	4770      	bx	lr
 8020840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020848:	d102      	bne.n	8020850 <__cmpdf2+0x64>
 802084a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802084e:	d107      	bne.n	8020860 <__cmpdf2+0x74>
 8020850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020858:	d1d6      	bne.n	8020808 <__cmpdf2+0x1c>
 802085a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802085e:	d0d3      	beq.n	8020808 <__cmpdf2+0x1c>
 8020860:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020864:	4770      	bx	lr
 8020866:	bf00      	nop

08020868 <__aeabi_cdrcmple>:
 8020868:	4684      	mov	ip, r0
 802086a:	4610      	mov	r0, r2
 802086c:	4662      	mov	r2, ip
 802086e:	468c      	mov	ip, r1
 8020870:	4619      	mov	r1, r3
 8020872:	4663      	mov	r3, ip
 8020874:	e000      	b.n	8020878 <__aeabi_cdcmpeq>
 8020876:	bf00      	nop

08020878 <__aeabi_cdcmpeq>:
 8020878:	b501      	push	{r0, lr}
 802087a:	f7ff ffb7 	bl	80207ec <__cmpdf2>
 802087e:	2800      	cmp	r0, #0
 8020880:	bf48      	it	mi
 8020882:	f110 0f00 	cmnmi.w	r0, #0
 8020886:	bd01      	pop	{r0, pc}

08020888 <__aeabi_dcmpeq>:
 8020888:	f84d ed08 	str.w	lr, [sp, #-8]!
 802088c:	f7ff fff4 	bl	8020878 <__aeabi_cdcmpeq>
 8020890:	bf0c      	ite	eq
 8020892:	2001      	moveq	r0, #1
 8020894:	2000      	movne	r0, #0
 8020896:	f85d fb08 	ldr.w	pc, [sp], #8
 802089a:	bf00      	nop

0802089c <__aeabi_dcmplt>:
 802089c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208a0:	f7ff ffea 	bl	8020878 <__aeabi_cdcmpeq>
 80208a4:	bf34      	ite	cc
 80208a6:	2001      	movcc	r0, #1
 80208a8:	2000      	movcs	r0, #0
 80208aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ae:	bf00      	nop

080208b0 <__aeabi_dcmple>:
 80208b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208b4:	f7ff ffe0 	bl	8020878 <__aeabi_cdcmpeq>
 80208b8:	bf94      	ite	ls
 80208ba:	2001      	movls	r0, #1
 80208bc:	2000      	movhi	r0, #0
 80208be:	f85d fb08 	ldr.w	pc, [sp], #8
 80208c2:	bf00      	nop

080208c4 <__aeabi_dcmpge>:
 80208c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208c8:	f7ff ffce 	bl	8020868 <__aeabi_cdrcmple>
 80208cc:	bf94      	ite	ls
 80208ce:	2001      	movls	r0, #1
 80208d0:	2000      	movhi	r0, #0
 80208d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80208d6:	bf00      	nop

080208d8 <__aeabi_dcmpgt>:
 80208d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208dc:	f7ff ffc4 	bl	8020868 <__aeabi_cdrcmple>
 80208e0:	bf34      	ite	cc
 80208e2:	2001      	movcc	r0, #1
 80208e4:	2000      	movcs	r0, #0
 80208e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ea:	bf00      	nop

080208ec <__aeabi_d2f>:
 80208ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80208f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80208f4:	bf24      	itt	cs
 80208f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80208fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80208fe:	d90d      	bls.n	802091c <__aeabi_d2f+0x30>
 8020900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 802090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020914:	bf08      	it	eq
 8020916:	f020 0001 	biceq.w	r0, r0, #1
 802091a:	4770      	bx	lr
 802091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020920:	d121      	bne.n	8020966 <__aeabi_d2f+0x7a>
 8020922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020926:	bfbc      	itt	lt
 8020928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 802092c:	4770      	bxlt	lr
 802092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020936:	f1c2 0218 	rsb	r2, r2, #24
 802093a:	f1c2 0c20 	rsb	ip, r2, #32
 802093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8020942:	fa20 f002 	lsr.w	r0, r0, r2
 8020946:	bf18      	it	ne
 8020948:	f040 0001 	orrne.w	r0, r0, #1
 802094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020958:	ea40 000c 	orr.w	r0, r0, ip
 802095c:	fa23 f302 	lsr.w	r3, r3, r2
 8020960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020964:	e7cc      	b.n	8020900 <__aeabi_d2f+0x14>
 8020966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 802096a:	d107      	bne.n	802097c <__aeabi_d2f+0x90>
 802096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020970:	bf1e      	ittt	ne
 8020972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 802097a:	4770      	bxne	lr
 802097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020988:	4770      	bx	lr
 802098a:	bf00      	nop

0802098c <__aeabi_uldivmod>:
 802098c:	b953      	cbnz	r3, 80209a4 <__aeabi_uldivmod+0x18>
 802098e:	b94a      	cbnz	r2, 80209a4 <__aeabi_uldivmod+0x18>
 8020990:	2900      	cmp	r1, #0
 8020992:	bf08      	it	eq
 8020994:	2800      	cmpeq	r0, #0
 8020996:	bf1c      	itt	ne
 8020998:	f04f 31ff 	movne.w	r1, #4294967295
 802099c:	f04f 30ff 	movne.w	r0, #4294967295
 80209a0:	f000 b996 	b.w	8020cd0 <__aeabi_idiv0>
 80209a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80209a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80209ac:	f000 f82a 	bl	8020a04 <__udivmoddi4>
 80209b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80209b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80209b8:	b004      	add	sp, #16
 80209ba:	4770      	bx	lr

080209bc <__aeabi_f2ulz>:
 80209bc:	b5d0      	push	{r4, r6, r7, lr}
 80209be:	f7ff fca3 	bl	8020308 <__aeabi_f2d>
 80209c2:	2200      	movs	r2, #0
 80209c4:	4b0d      	ldr	r3, [pc, #52]	; (80209fc <__aeabi_f2ulz+0x40>)
 80209c6:	4606      	mov	r6, r0
 80209c8:	460f      	mov	r7, r1
 80209ca:	f7ff fcf5 	bl	80203b8 <__aeabi_dmul>
 80209ce:	f000 f981 	bl	8020cd4 <__aeabi_d2uiz>
 80209d2:	4604      	mov	r4, r0
 80209d4:	f7ff fc76 	bl	80202c4 <__aeabi_ui2d>
 80209d8:	2200      	movs	r2, #0
 80209da:	4b09      	ldr	r3, [pc, #36]	; (8020a00 <__aeabi_f2ulz+0x44>)
 80209dc:	f7ff fcec 	bl	80203b8 <__aeabi_dmul>
 80209e0:	4602      	mov	r2, r0
 80209e2:	460b      	mov	r3, r1
 80209e4:	4630      	mov	r0, r6
 80209e6:	4639      	mov	r1, r7
 80209e8:	f7ff fb2e 	bl	8020048 <__aeabi_dsub>
 80209ec:	f000 f972 	bl	8020cd4 <__aeabi_d2uiz>
 80209f0:	2200      	movs	r2, #0
 80209f2:	4623      	mov	r3, r4
 80209f4:	4310      	orrs	r0, r2
 80209f6:	4619      	mov	r1, r3
 80209f8:	bdd0      	pop	{r4, r6, r7, pc}
 80209fa:	bf00      	nop
 80209fc:	3df00000 	.word	0x3df00000
 8020a00:	41f00000 	.word	0x41f00000

08020a04 <__udivmoddi4>:
 8020a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a08:	9e08      	ldr	r6, [sp, #32]
 8020a0a:	4604      	mov	r4, r0
 8020a0c:	4688      	mov	r8, r1
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d14b      	bne.n	8020aaa <__udivmoddi4+0xa6>
 8020a12:	428a      	cmp	r2, r1
 8020a14:	4615      	mov	r5, r2
 8020a16:	d967      	bls.n	8020ae8 <__udivmoddi4+0xe4>
 8020a18:	fab2 f282 	clz	r2, r2
 8020a1c:	b14a      	cbz	r2, 8020a32 <__udivmoddi4+0x2e>
 8020a1e:	f1c2 0720 	rsb	r7, r2, #32
 8020a22:	fa01 f302 	lsl.w	r3, r1, r2
 8020a26:	fa20 f707 	lsr.w	r7, r0, r7
 8020a2a:	4095      	lsls	r5, r2
 8020a2c:	ea47 0803 	orr.w	r8, r7, r3
 8020a30:	4094      	lsls	r4, r2
 8020a32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020a36:	0c23      	lsrs	r3, r4, #16
 8020a38:	fbb8 f7fe 	udiv	r7, r8, lr
 8020a3c:	fa1f fc85 	uxth.w	ip, r5
 8020a40:	fb0e 8817 	mls	r8, lr, r7, r8
 8020a44:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020a48:	fb07 f10c 	mul.w	r1, r7, ip
 8020a4c:	4299      	cmp	r1, r3
 8020a4e:	d909      	bls.n	8020a64 <__udivmoddi4+0x60>
 8020a50:	18eb      	adds	r3, r5, r3
 8020a52:	f107 30ff 	add.w	r0, r7, #4294967295
 8020a56:	f080 811b 	bcs.w	8020c90 <__udivmoddi4+0x28c>
 8020a5a:	4299      	cmp	r1, r3
 8020a5c:	f240 8118 	bls.w	8020c90 <__udivmoddi4+0x28c>
 8020a60:	3f02      	subs	r7, #2
 8020a62:	442b      	add	r3, r5
 8020a64:	1a5b      	subs	r3, r3, r1
 8020a66:	b2a4      	uxth	r4, r4
 8020a68:	fbb3 f0fe 	udiv	r0, r3, lr
 8020a6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8020a70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020a74:	fb00 fc0c 	mul.w	ip, r0, ip
 8020a78:	45a4      	cmp	ip, r4
 8020a7a:	d909      	bls.n	8020a90 <__udivmoddi4+0x8c>
 8020a7c:	192c      	adds	r4, r5, r4
 8020a7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8020a82:	f080 8107 	bcs.w	8020c94 <__udivmoddi4+0x290>
 8020a86:	45a4      	cmp	ip, r4
 8020a88:	f240 8104 	bls.w	8020c94 <__udivmoddi4+0x290>
 8020a8c:	3802      	subs	r0, #2
 8020a8e:	442c      	add	r4, r5
 8020a90:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020a94:	eba4 040c 	sub.w	r4, r4, ip
 8020a98:	2700      	movs	r7, #0
 8020a9a:	b11e      	cbz	r6, 8020aa4 <__udivmoddi4+0xa0>
 8020a9c:	40d4      	lsrs	r4, r2
 8020a9e:	2300      	movs	r3, #0
 8020aa0:	e9c6 4300 	strd	r4, r3, [r6]
 8020aa4:	4639      	mov	r1, r7
 8020aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020aaa:	428b      	cmp	r3, r1
 8020aac:	d909      	bls.n	8020ac2 <__udivmoddi4+0xbe>
 8020aae:	2e00      	cmp	r6, #0
 8020ab0:	f000 80eb 	beq.w	8020c8a <__udivmoddi4+0x286>
 8020ab4:	2700      	movs	r7, #0
 8020ab6:	e9c6 0100 	strd	r0, r1, [r6]
 8020aba:	4638      	mov	r0, r7
 8020abc:	4639      	mov	r1, r7
 8020abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ac2:	fab3 f783 	clz	r7, r3
 8020ac6:	2f00      	cmp	r7, #0
 8020ac8:	d147      	bne.n	8020b5a <__udivmoddi4+0x156>
 8020aca:	428b      	cmp	r3, r1
 8020acc:	d302      	bcc.n	8020ad4 <__udivmoddi4+0xd0>
 8020ace:	4282      	cmp	r2, r0
 8020ad0:	f200 80fa 	bhi.w	8020cc8 <__udivmoddi4+0x2c4>
 8020ad4:	1a84      	subs	r4, r0, r2
 8020ad6:	eb61 0303 	sbc.w	r3, r1, r3
 8020ada:	2001      	movs	r0, #1
 8020adc:	4698      	mov	r8, r3
 8020ade:	2e00      	cmp	r6, #0
 8020ae0:	d0e0      	beq.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae2:	e9c6 4800 	strd	r4, r8, [r6]
 8020ae6:	e7dd      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae8:	b902      	cbnz	r2, 8020aec <__udivmoddi4+0xe8>
 8020aea:	deff      	udf	#255	; 0xff
 8020aec:	fab2 f282 	clz	r2, r2
 8020af0:	2a00      	cmp	r2, #0
 8020af2:	f040 808f 	bne.w	8020c14 <__udivmoddi4+0x210>
 8020af6:	1b49      	subs	r1, r1, r5
 8020af8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020afc:	fa1f f885 	uxth.w	r8, r5
 8020b00:	2701      	movs	r7, #1
 8020b02:	fbb1 fcfe 	udiv	ip, r1, lr
 8020b06:	0c23      	lsrs	r3, r4, #16
 8020b08:	fb0e 111c 	mls	r1, lr, ip, r1
 8020b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020b10:	fb08 f10c 	mul.w	r1, r8, ip
 8020b14:	4299      	cmp	r1, r3
 8020b16:	d907      	bls.n	8020b28 <__udivmoddi4+0x124>
 8020b18:	18eb      	adds	r3, r5, r3
 8020b1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020b1e:	d202      	bcs.n	8020b26 <__udivmoddi4+0x122>
 8020b20:	4299      	cmp	r1, r3
 8020b22:	f200 80cd 	bhi.w	8020cc0 <__udivmoddi4+0x2bc>
 8020b26:	4684      	mov	ip, r0
 8020b28:	1a59      	subs	r1, r3, r1
 8020b2a:	b2a3      	uxth	r3, r4
 8020b2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8020b30:	fb0e 1410 	mls	r4, lr, r0, r1
 8020b34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020b38:	fb08 f800 	mul.w	r8, r8, r0
 8020b3c:	45a0      	cmp	r8, r4
 8020b3e:	d907      	bls.n	8020b50 <__udivmoddi4+0x14c>
 8020b40:	192c      	adds	r4, r5, r4
 8020b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b46:	d202      	bcs.n	8020b4e <__udivmoddi4+0x14a>
 8020b48:	45a0      	cmp	r8, r4
 8020b4a:	f200 80b6 	bhi.w	8020cba <__udivmoddi4+0x2b6>
 8020b4e:	4618      	mov	r0, r3
 8020b50:	eba4 0408 	sub.w	r4, r4, r8
 8020b54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020b58:	e79f      	b.n	8020a9a <__udivmoddi4+0x96>
 8020b5a:	f1c7 0c20 	rsb	ip, r7, #32
 8020b5e:	40bb      	lsls	r3, r7
 8020b60:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020b64:	ea4e 0e03 	orr.w	lr, lr, r3
 8020b68:	fa01 f407 	lsl.w	r4, r1, r7
 8020b6c:	fa20 f50c 	lsr.w	r5, r0, ip
 8020b70:	fa21 f30c 	lsr.w	r3, r1, ip
 8020b74:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020b78:	4325      	orrs	r5, r4
 8020b7a:	fbb3 f9f8 	udiv	r9, r3, r8
 8020b7e:	0c2c      	lsrs	r4, r5, #16
 8020b80:	fb08 3319 	mls	r3, r8, r9, r3
 8020b84:	fa1f fa8e 	uxth.w	sl, lr
 8020b88:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020b8c:	fb09 f40a 	mul.w	r4, r9, sl
 8020b90:	429c      	cmp	r4, r3
 8020b92:	fa02 f207 	lsl.w	r2, r2, r7
 8020b96:	fa00 f107 	lsl.w	r1, r0, r7
 8020b9a:	d90b      	bls.n	8020bb4 <__udivmoddi4+0x1b0>
 8020b9c:	eb1e 0303 	adds.w	r3, lr, r3
 8020ba0:	f109 30ff 	add.w	r0, r9, #4294967295
 8020ba4:	f080 8087 	bcs.w	8020cb6 <__udivmoddi4+0x2b2>
 8020ba8:	429c      	cmp	r4, r3
 8020baa:	f240 8084 	bls.w	8020cb6 <__udivmoddi4+0x2b2>
 8020bae:	f1a9 0902 	sub.w	r9, r9, #2
 8020bb2:	4473      	add	r3, lr
 8020bb4:	1b1b      	subs	r3, r3, r4
 8020bb6:	b2ad      	uxth	r5, r5
 8020bb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8020bbc:	fb08 3310 	mls	r3, r8, r0, r3
 8020bc0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020bc4:	fb00 fa0a 	mul.w	sl, r0, sl
 8020bc8:	45a2      	cmp	sl, r4
 8020bca:	d908      	bls.n	8020bde <__udivmoddi4+0x1da>
 8020bcc:	eb1e 0404 	adds.w	r4, lr, r4
 8020bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8020bd4:	d26b      	bcs.n	8020cae <__udivmoddi4+0x2aa>
 8020bd6:	45a2      	cmp	sl, r4
 8020bd8:	d969      	bls.n	8020cae <__udivmoddi4+0x2aa>
 8020bda:	3802      	subs	r0, #2
 8020bdc:	4474      	add	r4, lr
 8020bde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020be2:	fba0 8902 	umull	r8, r9, r0, r2
 8020be6:	eba4 040a 	sub.w	r4, r4, sl
 8020bea:	454c      	cmp	r4, r9
 8020bec:	46c2      	mov	sl, r8
 8020bee:	464b      	mov	r3, r9
 8020bf0:	d354      	bcc.n	8020c9c <__udivmoddi4+0x298>
 8020bf2:	d051      	beq.n	8020c98 <__udivmoddi4+0x294>
 8020bf4:	2e00      	cmp	r6, #0
 8020bf6:	d069      	beq.n	8020ccc <__udivmoddi4+0x2c8>
 8020bf8:	ebb1 050a 	subs.w	r5, r1, sl
 8020bfc:	eb64 0403 	sbc.w	r4, r4, r3
 8020c00:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020c04:	40fd      	lsrs	r5, r7
 8020c06:	40fc      	lsrs	r4, r7
 8020c08:	ea4c 0505 	orr.w	r5, ip, r5
 8020c0c:	e9c6 5400 	strd	r5, r4, [r6]
 8020c10:	2700      	movs	r7, #0
 8020c12:	e747      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c14:	f1c2 0320 	rsb	r3, r2, #32
 8020c18:	fa20 f703 	lsr.w	r7, r0, r3
 8020c1c:	4095      	lsls	r5, r2
 8020c1e:	fa01 f002 	lsl.w	r0, r1, r2
 8020c22:	fa21 f303 	lsr.w	r3, r1, r3
 8020c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020c2a:	4338      	orrs	r0, r7
 8020c2c:	0c01      	lsrs	r1, r0, #16
 8020c2e:	fbb3 f7fe 	udiv	r7, r3, lr
 8020c32:	fa1f f885 	uxth.w	r8, r5
 8020c36:	fb0e 3317 	mls	r3, lr, r7, r3
 8020c3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c3e:	fb07 f308 	mul.w	r3, r7, r8
 8020c42:	428b      	cmp	r3, r1
 8020c44:	fa04 f402 	lsl.w	r4, r4, r2
 8020c48:	d907      	bls.n	8020c5a <__udivmoddi4+0x256>
 8020c4a:	1869      	adds	r1, r5, r1
 8020c4c:	f107 3cff 	add.w	ip, r7, #4294967295
 8020c50:	d22f      	bcs.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c52:	428b      	cmp	r3, r1
 8020c54:	d92d      	bls.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c56:	3f02      	subs	r7, #2
 8020c58:	4429      	add	r1, r5
 8020c5a:	1acb      	subs	r3, r1, r3
 8020c5c:	b281      	uxth	r1, r0
 8020c5e:	fbb3 f0fe 	udiv	r0, r3, lr
 8020c62:	fb0e 3310 	mls	r3, lr, r0, r3
 8020c66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c6a:	fb00 f308 	mul.w	r3, r0, r8
 8020c6e:	428b      	cmp	r3, r1
 8020c70:	d907      	bls.n	8020c82 <__udivmoddi4+0x27e>
 8020c72:	1869      	adds	r1, r5, r1
 8020c74:	f100 3cff 	add.w	ip, r0, #4294967295
 8020c78:	d217      	bcs.n	8020caa <__udivmoddi4+0x2a6>
 8020c7a:	428b      	cmp	r3, r1
 8020c7c:	d915      	bls.n	8020caa <__udivmoddi4+0x2a6>
 8020c7e:	3802      	subs	r0, #2
 8020c80:	4429      	add	r1, r5
 8020c82:	1ac9      	subs	r1, r1, r3
 8020c84:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020c88:	e73b      	b.n	8020b02 <__udivmoddi4+0xfe>
 8020c8a:	4637      	mov	r7, r6
 8020c8c:	4630      	mov	r0, r6
 8020c8e:	e709      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c90:	4607      	mov	r7, r0
 8020c92:	e6e7      	b.n	8020a64 <__udivmoddi4+0x60>
 8020c94:	4618      	mov	r0, r3
 8020c96:	e6fb      	b.n	8020a90 <__udivmoddi4+0x8c>
 8020c98:	4541      	cmp	r1, r8
 8020c9a:	d2ab      	bcs.n	8020bf4 <__udivmoddi4+0x1f0>
 8020c9c:	ebb8 0a02 	subs.w	sl, r8, r2
 8020ca0:	eb69 020e 	sbc.w	r2, r9, lr
 8020ca4:	3801      	subs	r0, #1
 8020ca6:	4613      	mov	r3, r2
 8020ca8:	e7a4      	b.n	8020bf4 <__udivmoddi4+0x1f0>
 8020caa:	4660      	mov	r0, ip
 8020cac:	e7e9      	b.n	8020c82 <__udivmoddi4+0x27e>
 8020cae:	4618      	mov	r0, r3
 8020cb0:	e795      	b.n	8020bde <__udivmoddi4+0x1da>
 8020cb2:	4667      	mov	r7, ip
 8020cb4:	e7d1      	b.n	8020c5a <__udivmoddi4+0x256>
 8020cb6:	4681      	mov	r9, r0
 8020cb8:	e77c      	b.n	8020bb4 <__udivmoddi4+0x1b0>
 8020cba:	3802      	subs	r0, #2
 8020cbc:	442c      	add	r4, r5
 8020cbe:	e747      	b.n	8020b50 <__udivmoddi4+0x14c>
 8020cc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8020cc4:	442b      	add	r3, r5
 8020cc6:	e72f      	b.n	8020b28 <__udivmoddi4+0x124>
 8020cc8:	4638      	mov	r0, r7
 8020cca:	e708      	b.n	8020ade <__udivmoddi4+0xda>
 8020ccc:	4637      	mov	r7, r6
 8020cce:	e6e9      	b.n	8020aa4 <__udivmoddi4+0xa0>

08020cd0 <__aeabi_idiv0>:
 8020cd0:	4770      	bx	lr
 8020cd2:	bf00      	nop

08020cd4 <__aeabi_d2uiz>:
 8020cd4:	004a      	lsls	r2, r1, #1
 8020cd6:	d211      	bcs.n	8020cfc <__aeabi_d2uiz+0x28>
 8020cd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020cdc:	d211      	bcs.n	8020d02 <__aeabi_d2uiz+0x2e>
 8020cde:	d50d      	bpl.n	8020cfc <__aeabi_d2uiz+0x28>
 8020ce0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020ce4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020ce8:	d40e      	bmi.n	8020d08 <__aeabi_d2uiz+0x34>
 8020cea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020cf2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020cf6:	fa23 f002 	lsr.w	r0, r3, r2
 8020cfa:	4770      	bx	lr
 8020cfc:	f04f 0000 	mov.w	r0, #0
 8020d00:	4770      	bx	lr
 8020d02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020d06:	d102      	bne.n	8020d0e <__aeabi_d2uiz+0x3a>
 8020d08:	f04f 30ff 	mov.w	r0, #4294967295
 8020d0c:	4770      	bx	lr
 8020d0e:	f04f 0000 	mov.w	r0, #0
 8020d12:	4770      	bx	lr

08020d14 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"
#include "declare_extern.h"

Encoder::Encoder() : distance_(0)
 8020d14:	b480      	push	{r7}
 8020d16:	b083      	sub	sp, #12
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	6078      	str	r0, [r7, #4]
                   , distance_stack_(0)
                   , distance_difference_(0) {}
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	f04f 0200 	mov.w	r2, #0
 8020d22:	601a      	str	r2, [r3, #0]
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	f04f 0200 	mov.w	r2, #0
 8020d2a:	605a      	str	r2, [r3, #4]
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	f04f 0200 	mov.w	r2, #0
 8020d32:	609a      	str	r2, [r3, #8]
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	4618      	mov	r0, r3
 8020d38:	370c      	adds	r7, #12
 8020d3a:	46bd      	mov	sp, r7
 8020d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d40:	4770      	bx	lr
	...

08020d44 <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020d44:	b580      	push	{r7, lr}
 8020d46:	b082      	sub	sp, #8
 8020d48:	af00      	add	r7, sp, #0
 8020d4a:	6078      	str	r0, [r7, #4]
	if(HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL) != HAL_OK)
 8020d4c:	213c      	movs	r1, #60	; 0x3c
 8020d4e:	4812      	ldr	r0, [pc, #72]	; (8020d98 <_ZN7Encoder4InitEv+0x54>)
 8020d50:	f008 fb44 	bl	80293dc <HAL_TIM_Encoder_Start>
 8020d54:	4603      	mov	r3, r0
 8020d56:	2b00      	cmp	r3, #0
 8020d58:	bf14      	ite	ne
 8020d5a:	2301      	movne	r3, #1
 8020d5c:	2300      	moveq	r3, #0
 8020d5e:	b2db      	uxtb	r3, r3
 8020d60:	2b00      	cmp	r3, #0
 8020d62:	d004      	beq.n	8020d6e <_ZN7Encoder4InitEv+0x2a>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim8 = true;
 8020d64:	4b0d      	ldr	r3, [pc, #52]	; (8020d9c <_ZN7Encoder4InitEv+0x58>)
 8020d66:	2201      	movs	r2, #1
 8020d68:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d6a:	f002 ff9d 	bl	8023ca8 <Error_Handler>
	}

	if(HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL) != HAL_OK)
 8020d6e:	213c      	movs	r1, #60	; 0x3c
 8020d70:	480b      	ldr	r0, [pc, #44]	; (8020da0 <_ZN7Encoder4InitEv+0x5c>)
 8020d72:	f008 fb33 	bl	80293dc <HAL_TIM_Encoder_Start>
 8020d76:	4603      	mov	r3, r0
 8020d78:	2b00      	cmp	r3, #0
 8020d7a:	bf14      	ite	ne
 8020d7c:	2301      	movne	r3, #1
 8020d7e:	2300      	moveq	r3, #0
 8020d80:	b2db      	uxtb	r3, r3
 8020d82:	2b00      	cmp	r3, #0
 8020d84:	d004      	beq.n	8020d90 <_ZN7Encoder4InitEv+0x4c>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim4 = true;
 8020d86:	4b07      	ldr	r3, [pc, #28]	; (8020da4 <_ZN7Encoder4InitEv+0x60>)
 8020d88:	2201      	movs	r2, #1
 8020d8a:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d8c:	f002 ff8c 	bl	8023ca8 <Error_Handler>
	}
}
 8020d90:	bf00      	nop
 8020d92:	3708      	adds	r7, #8
 8020d94:	46bd      	mov	sp, r7
 8020d96:	bd80      	pop	{r7, pc}
 8020d98:	200005ec 	.word	0x200005ec
 8020d9c:	200000bc 	.word	0x200000bc
 8020da0:	2000062c 	.word	0x2000062c
 8020da4:	200000bb 	.word	0x200000bb

08020da8 <_ZN7Encoder6UpdateEv>:

void Encoder::Update()
{
 8020da8:	b590      	push	{r4, r7, lr}
 8020daa:	b087      	sub	sp, #28
 8020dac:	af00      	add	r7, sp, #0
 8020dae:	6078      	str	r0, [r7, #4]
	int16_t count_l = static_cast<int16_t>((TIM8 -> CNT) - START_COUNT);
 8020db0:	4b39      	ldr	r3, [pc, #228]	; (8020e98 <_ZN7Encoder6UpdateEv+0xf0>)
 8020db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020db4:	b29b      	uxth	r3, r3
 8020db6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8020dba:	3b7f      	subs	r3, #127	; 0x7f
 8020dbc:	b29b      	uxth	r3, r3
 8020dbe:	82fb      	strh	r3, [r7, #22]
	int16_t count_r = static_cast<int16_t>(START_COUNT - (TIM4 -> CNT));
 8020dc0:	4b36      	ldr	r3, [pc, #216]	; (8020e9c <_ZN7Encoder6UpdateEv+0xf4>)
 8020dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020dc4:	b29b      	uxth	r3, r3
 8020dc6:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8020dca:	337f      	adds	r3, #127	; 0x7f
 8020dcc:	b29b      	uxth	r3, r3
 8020dce:	82bb      	strh	r3, [r7, #20]
	TIM8 -> CNT = START_COUNT;
 8020dd0:	4b31      	ldr	r3, [pc, #196]	; (8020e98 <_ZN7Encoder6UpdateEv+0xf0>)
 8020dd2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020dd6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = START_COUNT;
 8020dd8:	4b30      	ldr	r3, [pc, #192]	; (8020e9c <_ZN7Encoder6UpdateEv+0xf4>)
 8020dda:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020dde:	625a      	str	r2, [r3, #36]	; 0x24
	float distance_l = static_cast<float>(count_l * DISTANCE_PER_COUNT);
 8020de0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020de4:	4618      	mov	r0, r3
 8020de6:	f7ff fa7d 	bl	80202e4 <__aeabi_i2d>
 8020dea:	a329      	add	r3, pc, #164	; (adr r3, 8020e90 <_ZN7Encoder6UpdateEv+0xe8>)
 8020dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020df0:	f7ff fae2 	bl	80203b8 <__aeabi_dmul>
 8020df4:	4603      	mov	r3, r0
 8020df6:	460c      	mov	r4, r1
 8020df8:	4618      	mov	r0, r3
 8020dfa:	4621      	mov	r1, r4
 8020dfc:	f7ff fd76 	bl	80208ec <__aeabi_d2f>
 8020e00:	4603      	mov	r3, r0
 8020e02:	613b      	str	r3, [r7, #16]
	float distance_r = static_cast<float>(count_r * DISTANCE_PER_COUNT);
 8020e04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020e08:	4618      	mov	r0, r3
 8020e0a:	f7ff fa6b 	bl	80202e4 <__aeabi_i2d>
 8020e0e:	a320      	add	r3, pc, #128	; (adr r3, 8020e90 <_ZN7Encoder6UpdateEv+0xe8>)
 8020e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e14:	f7ff fad0 	bl	80203b8 <__aeabi_dmul>
 8020e18:	4603      	mov	r3, r0
 8020e1a:	460c      	mov	r4, r1
 8020e1c:	4618      	mov	r0, r3
 8020e1e:	4621      	mov	r1, r4
 8020e20:	f7ff fd64 	bl	80208ec <__aeabi_d2f>
 8020e24:	4603      	mov	r3, r0
 8020e26:	60fb      	str	r3, [r7, #12]
	float distance = (distance_l + distance_r) / 2.0;
 8020e28:	ed97 7a04 	vldr	s14, [r7, #16]
 8020e2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8020e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020e34:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8020e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020e3c:	edc7 7a02 	vstr	s15, [r7, #8]

	distance_ = distance;
 8020e40:	687b      	ldr	r3, [r7, #4]
 8020e42:	68ba      	ldr	r2, [r7, #8]
 8020e44:	601a      	str	r2, [r3, #0]
	distance_stack_ += distance;
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	ed93 7a01 	vldr	s14, [r3, #4]
 8020e4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8020e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_difference_ = distance_r - distance_l;
 8020e5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8020e5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8020e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	edc3 7a02 	vstr	s15, [r3, #8]

#ifdef DEBUG_MODE
	g_enc_cnt_l = count_l;
 8020e6c:	4a0c      	ldr	r2, [pc, #48]	; (8020ea0 <_ZN7Encoder6UpdateEv+0xf8>)
 8020e6e:	8afb      	ldrh	r3, [r7, #22]
 8020e70:	8013      	strh	r3, [r2, #0]
	g_enc_cnt_r = count_r;
 8020e72:	4a0c      	ldr	r2, [pc, #48]	; (8020ea4 <_ZN7Encoder6UpdateEv+0xfc>)
 8020e74:	8abb      	ldrh	r3, [r7, #20]
 8020e76:	8013      	strh	r3, [r2, #0]
	g_distance_l = distance_l;
 8020e78:	4a0b      	ldr	r2, [pc, #44]	; (8020ea8 <_ZN7Encoder6UpdateEv+0x100>)
 8020e7a:	693b      	ldr	r3, [r7, #16]
 8020e7c:	6013      	str	r3, [r2, #0]
	g_distance_r = distance_r;
 8020e7e:	4a0b      	ldr	r2, [pc, #44]	; (8020eac <_ZN7Encoder6UpdateEv+0x104>)
 8020e80:	68fb      	ldr	r3, [r7, #12]
 8020e82:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8020e84:	bf00      	nop
 8020e86:	371c      	adds	r7, #28
 8020e88:	46bd      	mov	sp, r7
 8020e8a:	bd90      	pop	{r4, r7, pc}
 8020e8c:	f3af 8000 	nop.w
 8020e90:	5d35653d 	.word	0x5d35653d
 8020e94:	3f7d744f 	.word	0x3f7d744f
 8020e98:	40010400 	.word	0x40010400
 8020e9c:	40000800 	.word	0x40000800
 8020ea0:	20000258 	.word	0x20000258
 8020ea4:	2000025a 	.word	0x2000025a
 8020ea8:	2000025c 	.word	0x2000025c
 8020eac:	20000260 	.word	0x20000260

08020eb0 <_ZN7Encoder18ResetDistanceStackEv>:
	TIM8 -> CNT = START_COUNT;
	TIM4 -> CNT = START_COUNT;
}

void Encoder::ResetDistanceStack()
{
 8020eb0:	b480      	push	{r7}
 8020eb2:	b083      	sub	sp, #12
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]
	distance_stack_ = 0.0;
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	f04f 0200 	mov.w	r2, #0
 8020ebe:	605a      	str	r2, [r3, #4]
}
 8020ec0:	bf00      	nop
 8020ec2:	370c      	adds	r7, #12
 8020ec4:	46bd      	mov	sp, r7
 8020ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eca:	4770      	bx	lr

08020ecc <_ZN7Encoder11GetDistanceEv>:

float Encoder::GetDistance()
{
 8020ecc:	b480      	push	{r7}
 8020ece:	b083      	sub	sp, #12
 8020ed0:	af00      	add	r7, sp, #0
 8020ed2:	6078      	str	r0, [r7, #4]
	return distance_;
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	681b      	ldr	r3, [r3, #0]
 8020ed8:	ee07 3a90 	vmov	s15, r3
}
 8020edc:	eeb0 0a67 	vmov.f32	s0, s15
 8020ee0:	370c      	adds	r7, #12
 8020ee2:	46bd      	mov	sp, r7
 8020ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ee8:	4770      	bx	lr

08020eea <_ZN7Encoder16GetDistanceStackEv>:

float Encoder::GetDistanceStack()
{
 8020eea:	b480      	push	{r7}
 8020eec:	b083      	sub	sp, #12
 8020eee:	af00      	add	r7, sp, #0
 8020ef0:	6078      	str	r0, [r7, #4]
	return distance_stack_;
 8020ef2:	687b      	ldr	r3, [r7, #4]
 8020ef4:	685b      	ldr	r3, [r3, #4]
 8020ef6:	ee07 3a90 	vmov	s15, r3
}
 8020efa:	eeb0 0a67 	vmov.f32	s0, s15
 8020efe:	370c      	adds	r7, #12
 8020f00:	46bd      	mov	sp, r7
 8020f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f06:	4770      	bx	lr

08020f08 <_ZN7Encoder15AngularVelocityEv>:

float Encoder::AngularVelocity()
{
 8020f08:	b590      	push	{r4, r7, lr}
 8020f0a:	b083      	sub	sp, #12
 8020f0c:	af00      	add	r7, sp, #0
 8020f0e:	6078      	str	r0, [r7, #4]
	return distance_difference_ / (TIM6_PERIOD * MACHINE_TREAD);
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	689b      	ldr	r3, [r3, #8]
 8020f14:	4618      	mov	r0, r3
 8020f16:	f7ff f9f7 	bl	8020308 <__aeabi_f2d>
 8020f1a:	a309      	add	r3, pc, #36	; (adr r3, 8020f40 <_ZN7Encoder15AngularVelocityEv+0x38>)
 8020f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f20:	f7ff fb74 	bl	802060c <__aeabi_ddiv>
 8020f24:	4603      	mov	r3, r0
 8020f26:	460c      	mov	r4, r1
 8020f28:	4618      	mov	r0, r3
 8020f2a:	4621      	mov	r1, r4
 8020f2c:	f7ff fcde 	bl	80208ec <__aeabi_d2f>
 8020f30:	4603      	mov	r3, r0
 8020f32:	ee07 3a90 	vmov	s15, r3
 8020f36:	eeb0 0a67 	vmov.f32	s0, s15
 8020f3a:	370c      	adds	r7, #12
 8020f3c:	46bd      	mov	sp, r7
 8020f3e:	bd90      	pop	{r4, r7, pc}
 8020f40:	00000000 	.word	0x00000000
 8020f44:	4063d800 	.word	0x4063d800

08020f48 <_ZN5Flash5ClearEv>:
#include "flash.hpp"
#include "declare_extern.h"
#include <string.h>

bool Flash::Clear()
{
 8020f48:	b580      	push	{r7, lr}
 8020f4a:	b088      	sub	sp, #32
 8020f4c:	af00      	add	r7, sp, #0
 8020f4e:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8020f50:	f006 f9f8 	bl	8027344 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase;

    erase.TypeErase    = FLASH_TYPEERASE_SECTORS; // Erasure range : Sectors
 8020f54:	2300      	movs	r3, #0
 8020f56:	60fb      	str	r3, [r7, #12]
    erase.Sector       = FLASH_SECTOR_1;          // Which sector : 1
 8020f58:	2301      	movs	r3, #1
 8020f5a:	617b      	str	r3, [r7, #20]
    erase.NbSectors    = 4;                       // How many sector : 4 (1,2,3,4)
 8020f5c:	2304      	movs	r3, #4
 8020f5e:	61bb      	str	r3, [r7, #24]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;   // Voltage range : 2.7 ~ 3.6 [V]
 8020f60:	2302      	movs	r3, #2
 8020f62:	61fb      	str	r3, [r7, #28]

    // Success => 0xFFFFFFFF is stored.
    // Fail => Sector number is stored.
    uint32_t failed_sector = 0;
 8020f64:	2300      	movs	r3, #0
 8020f66:	60bb      	str	r3, [r7, #8]

    if(HAL_FLASHEx_Erase(&erase, &failed_sector) != HAL_OK)
 8020f68:	f107 0208 	add.w	r2, r7, #8
 8020f6c:	f107 030c 	add.w	r3, r7, #12
 8020f70:	4611      	mov	r1, r2
 8020f72:	4618      	mov	r0, r3
 8020f74:	f006 fb46 	bl	8027604 <HAL_FLASHEx_Erase>
 8020f78:	4603      	mov	r3, r0
 8020f7a:	2b00      	cmp	r3, #0
 8020f7c:	bf14      	ite	ne
 8020f7e:	2301      	movne	r3, #1
 8020f80:	2300      	moveq	r3, #0
 8020f82:	b2db      	uxtb	r3, r3
 8020f84:	2b00      	cmp	r3, #0
 8020f86:	d004      	beq.n	8020f92 <_ZN5Flash5ClearEv+0x4a>
    {
#ifdef DEBUG_MODE
        g_erase_failed_sector = failed_sector;
 8020f88:	68bb      	ldr	r3, [r7, #8]
 8020f8a:	4a08      	ldr	r2, [pc, #32]	; (8020fac <_ZN5Flash5ClearEv+0x64>)
 8020f8c:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

        return false;
 8020f8e:	2300      	movs	r3, #0
 8020f90:	e008      	b.n	8020fa4 <_ZN5Flash5ClearEv+0x5c>
    }

    HAL_FLASH_Lock();
 8020f92:	f006 f9f9 	bl	8027388 <HAL_FLASH_Lock>

    return failed_sector == 0xFFFFFFFF;
 8020f96:	68bb      	ldr	r3, [r7, #8]
 8020f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f9c:	bf0c      	ite	eq
 8020f9e:	2301      	moveq	r3, #1
 8020fa0:	2300      	movne	r3, #0
 8020fa2:	b2db      	uxtb	r3, r3
}
 8020fa4:	4618      	mov	r0, r3
 8020fa6:	3720      	adds	r7, #32
 8020fa8:	46bd      	mov	sp, r7
 8020faa:	bd80      	pop	{r7, pc}
 8020fac:	20000284 	.word	0x20000284

08020fb0 <_ZN5Flash10StoreUint8EmPhm>:

bool Flash::StoreUint8(uint32_t address, uint8_t *data, uint32_t number)
{
 8020fb0:	b590      	push	{r4, r7, lr}
 8020fb2:	b087      	sub	sp, #28
 8020fb4:	af00      	add	r7, sp, #0
 8020fb6:	60f8      	str	r0, [r7, #12]
 8020fb8:	60b9      	str	r1, [r7, #8]
 8020fba:	607a      	str	r2, [r7, #4]
 8020fbc:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8020fbe:	f006 f9c1 	bl	8027344 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8020fc2:	2300      	movs	r3, #0
 8020fc4:	613b      	str	r3, [r7, #16]
 8020fc6:	693a      	ldr	r2, [r7, #16]
 8020fc8:	683b      	ldr	r3, [r7, #0]
 8020fca:	429a      	cmp	r2, r3
 8020fcc:	d218      	bcs.n	8021000 <_ZN5Flash10StoreUint8EmPhm+0x50>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address++, *data++);
 8020fce:	68b9      	ldr	r1, [r7, #8]
 8020fd0:	1c4b      	adds	r3, r1, #1
 8020fd2:	60bb      	str	r3, [r7, #8]
 8020fd4:	687b      	ldr	r3, [r7, #4]
 8020fd6:	1c5a      	adds	r2, r3, #1
 8020fd8:	607a      	str	r2, [r7, #4]
 8020fda:	781b      	ldrb	r3, [r3, #0]
 8020fdc:	b2db      	uxtb	r3, r3
 8020fde:	f04f 0400 	mov.w	r4, #0
 8020fe2:	461a      	mov	r2, r3
 8020fe4:	4623      	mov	r3, r4
 8020fe6:	2000      	movs	r0, #0
 8020fe8:	f006 f958 	bl	802729c <HAL_FLASH_Program>
 8020fec:	4603      	mov	r3, r0
 8020fee:	75fb      	strb	r3, [r7, #23]
        if(result != HAL_OK) break;
 8020ff0:	7dfb      	ldrb	r3, [r7, #23]
 8020ff2:	2b00      	cmp	r3, #0
 8020ff4:	d103      	bne.n	8020ffe <_ZN5Flash10StoreUint8EmPhm+0x4e>
    for(uint32_t i = 0; i < number; i++)
 8020ff6:	693b      	ldr	r3, [r7, #16]
 8020ff8:	3301      	adds	r3, #1
 8020ffa:	613b      	str	r3, [r7, #16]
 8020ffc:	e7e3      	b.n	8020fc6 <_ZN5Flash10StoreUint8EmPhm+0x16>
        if(result != HAL_OK) break;
 8020ffe:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8021000:	f006 f9c2 	bl	8027388 <HAL_FLASH_Lock>

    return result == HAL_OK;
 8021004:	7dfb      	ldrb	r3, [r7, #23]
 8021006:	2b00      	cmp	r3, #0
 8021008:	bf0c      	ite	eq
 802100a:	2301      	moveq	r3, #1
 802100c:	2300      	movne	r3, #0
 802100e:	b2db      	uxtb	r3, r3
}
 8021010:	4618      	mov	r0, r3
 8021012:	371c      	adds	r7, #28
 8021014:	46bd      	mov	sp, r7
 8021016:	bd90      	pop	{r4, r7, pc}

08021018 <_ZN5Flash11StoreUint16EmPtm>:

bool Flash::StoreUint16(uint32_t address, uint16_t *data, uint32_t number)
{
 8021018:	b590      	push	{r4, r7, lr}
 802101a:	b087      	sub	sp, #28
 802101c:	af00      	add	r7, sp, #0
 802101e:	60f8      	str	r0, [r7, #12]
 8021020:	60b9      	str	r1, [r7, #8]
 8021022:	607a      	str	r2, [r7, #4]
 8021024:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021026:	f006 f98d 	bl	8027344 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 802102a:	2300      	movs	r3, #0
 802102c:	613b      	str	r3, [r7, #16]
 802102e:	693a      	ldr	r2, [r7, #16]
 8021030:	683b      	ldr	r3, [r7, #0]
 8021032:	429a      	cmp	r2, r3
 8021034:	d219      	bcs.n	802106a <_ZN5Flash11StoreUint16EmPtm+0x52>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++);
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	1c9a      	adds	r2, r3, #2
 802103a:	607a      	str	r2, [r7, #4]
 802103c:	881b      	ldrh	r3, [r3, #0]
 802103e:	b29b      	uxth	r3, r3
 8021040:	f04f 0400 	mov.w	r4, #0
 8021044:	461a      	mov	r2, r3
 8021046:	4623      	mov	r3, r4
 8021048:	68b9      	ldr	r1, [r7, #8]
 802104a:	2001      	movs	r0, #1
 802104c:	f006 f926 	bl	802729c <HAL_FLASH_Program>
 8021050:	4603      	mov	r3, r0
 8021052:	75fb      	strb	r3, [r7, #23]
        address += 2;
 8021054:	68bb      	ldr	r3, [r7, #8]
 8021056:	3302      	adds	r3, #2
 8021058:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 802105a:	7dfb      	ldrb	r3, [r7, #23]
 802105c:	2b00      	cmp	r3, #0
 802105e:	d103      	bne.n	8021068 <_ZN5Flash11StoreUint16EmPtm+0x50>
    for(uint32_t i = 0; i < number; i++)
 8021060:	693b      	ldr	r3, [r7, #16]
 8021062:	3301      	adds	r3, #1
 8021064:	613b      	str	r3, [r7, #16]
 8021066:	e7e2      	b.n	802102e <_ZN5Flash11StoreUint16EmPtm+0x16>
        if(result != HAL_OK) break;
 8021068:	bf00      	nop
    }

    HAL_FLASH_Lock();
 802106a:	f006 f98d 	bl	8027388 <HAL_FLASH_Lock>

    return result == HAL_OK;
 802106e:	7dfb      	ldrb	r3, [r7, #23]
 8021070:	2b00      	cmp	r3, #0
 8021072:	bf0c      	ite	eq
 8021074:	2301      	moveq	r3, #1
 8021076:	2300      	movne	r3, #0
 8021078:	b2db      	uxtb	r3, r3
}
 802107a:	4618      	mov	r0, r3
 802107c:	371c      	adds	r7, #28
 802107e:	46bd      	mov	sp, r7
 8021080:	bd90      	pop	{r4, r7, pc}

08021082 <_ZN5Flash10StoreFloatEmPfm>:

    return result == HAL_OK;
}

bool Flash::StoreFloat(uint32_t address, float *data, uint32_t number)
{
 8021082:	b590      	push	{r4, r7, lr}
 8021084:	b087      	sub	sp, #28
 8021086:	af00      	add	r7, sp, #0
 8021088:	60f8      	str	r0, [r7, #12]
 802108a:	60b9      	str	r1, [r7, #8]
 802108c:	607a      	str	r2, [r7, #4]
 802108e:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021090:	f006 f958 	bl	8027344 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8021094:	2300      	movs	r3, #0
 8021096:	613b      	str	r3, [r7, #16]
 8021098:	693a      	ldr	r2, [r7, #16]
 802109a:	683b      	ldr	r3, [r7, #0]
 802109c:	429a      	cmp	r2, r3
 802109e:	d21b      	bcs.n	80210d8 <_ZN5Flash10StoreFloatEmPfm+0x56>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *data++);
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	1d1a      	adds	r2, r3, #4
 80210a4:	607a      	str	r2, [r7, #4]
 80210a6:	681b      	ldr	r3, [r3, #0]
 80210a8:	4618      	mov	r0, r3
 80210aa:	f7ff fc87 	bl	80209bc <__aeabi_f2ulz>
 80210ae:	4603      	mov	r3, r0
 80210b0:	460c      	mov	r4, r1
 80210b2:	461a      	mov	r2, r3
 80210b4:	4623      	mov	r3, r4
 80210b6:	68b9      	ldr	r1, [r7, #8]
 80210b8:	2002      	movs	r0, #2
 80210ba:	f006 f8ef 	bl	802729c <HAL_FLASH_Program>
 80210be:	4603      	mov	r3, r0
 80210c0:	75fb      	strb	r3, [r7, #23]
        address += 4;
 80210c2:	68bb      	ldr	r3, [r7, #8]
 80210c4:	3304      	adds	r3, #4
 80210c6:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 80210c8:	7dfb      	ldrb	r3, [r7, #23]
 80210ca:	2b00      	cmp	r3, #0
 80210cc:	d103      	bne.n	80210d6 <_ZN5Flash10StoreFloatEmPfm+0x54>
    for(uint32_t i = 0; i < number; i++)
 80210ce:	693b      	ldr	r3, [r7, #16]
 80210d0:	3301      	adds	r3, #1
 80210d2:	613b      	str	r3, [r7, #16]
 80210d4:	e7e0      	b.n	8021098 <_ZN5Flash10StoreFloatEmPfm+0x16>
        if(result != HAL_OK) break;
 80210d6:	bf00      	nop
    }

    HAL_FLASH_Lock();
 80210d8:	f006 f956 	bl	8027388 <HAL_FLASH_Lock>

    return result == HAL_OK;
 80210dc:	7dfb      	ldrb	r3, [r7, #23]
 80210de:	2b00      	cmp	r3, #0
 80210e0:	bf0c      	ite	eq
 80210e2:	2301      	moveq	r3, #1
 80210e4:	2300      	movne	r3, #0
 80210e6:	b2db      	uxtb	r3, r3
}
 80210e8:	4618      	mov	r0, r3
 80210ea:	371c      	adds	r7, #28
 80210ec:	46bd      	mov	sp, r7
 80210ee:	bd90      	pop	{r4, r7, pc}

080210f0 <_ZN5Flash14CheckBlankByteEmm>:
{
    memcpy(data, reinterpret_cast<uint32_t*>(address), size);
}

bool Flash::CheckBlankByte(uint32_t address, uint32_t number)
{
 80210f0:	b5b0      	push	{r4, r5, r7, lr}
 80210f2:	b088      	sub	sp, #32
 80210f4:	af00      	add	r7, sp, #0
 80210f6:	60f8      	str	r0, [r7, #12]
 80210f8:	60b9      	str	r1, [r7, #8]
 80210fa:	607a      	str	r2, [r7, #4]

    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);

    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;

    return true;
 80210fc:	466b      	mov	r3, sp
 80210fe:	461d      	mov	r5, r3
    uint8_t byte[number];
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	1e58      	subs	r0, r3, #1
 8021104:	61b8      	str	r0, [r7, #24]
 8021106:	4603      	mov	r3, r0
 8021108:	3301      	adds	r3, #1
 802110a:	4619      	mov	r1, r3
 802110c:	f04f 0200 	mov.w	r2, #0
 8021110:	f04f 0300 	mov.w	r3, #0
 8021114:	f04f 0400 	mov.w	r4, #0
 8021118:	00d4      	lsls	r4, r2, #3
 802111a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 802111e:	00cb      	lsls	r3, r1, #3
 8021120:	4603      	mov	r3, r0
 8021122:	3301      	adds	r3, #1
 8021124:	4619      	mov	r1, r3
 8021126:	f04f 0200 	mov.w	r2, #0
 802112a:	f04f 0300 	mov.w	r3, #0
 802112e:	f04f 0400 	mov.w	r4, #0
 8021132:	00d4      	lsls	r4, r2, #3
 8021134:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8021138:	00cb      	lsls	r3, r1, #3
 802113a:	4603      	mov	r3, r0
 802113c:	3301      	adds	r3, #1
 802113e:	3307      	adds	r3, #7
 8021140:	08db      	lsrs	r3, r3, #3
 8021142:	00db      	lsls	r3, r3, #3
 8021144:	ebad 0d03 	sub.w	sp, sp, r3
 8021148:	466b      	mov	r3, sp
 802114a:	3300      	adds	r3, #0
 802114c:	617b      	str	r3, [r7, #20]
    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);
 802114e:	697b      	ldr	r3, [r7, #20]
 8021150:	68b9      	ldr	r1, [r7, #8]
 8021152:	687a      	ldr	r2, [r7, #4]
 8021154:	4618      	mov	r0, r3
 8021156:	f009 f84d 	bl	802a1f4 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;
 802115a:	2300      	movs	r3, #0
 802115c:	61fb      	str	r3, [r7, #28]
 802115e:	69fa      	ldr	r2, [r7, #28]
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	429a      	cmp	r2, r3
 8021164:	d20b      	bcs.n	802117e <_ZN5Flash14CheckBlankByteEmm+0x8e>
 8021166:	697a      	ldr	r2, [r7, #20]
 8021168:	69fb      	ldr	r3, [r7, #28]
 802116a:	4413      	add	r3, r2
 802116c:	781b      	ldrb	r3, [r3, #0]
 802116e:	2bff      	cmp	r3, #255	; 0xff
 8021170:	d001      	beq.n	8021176 <_ZN5Flash14CheckBlankByteEmm+0x86>
 8021172:	2300      	movs	r3, #0
 8021174:	e004      	b.n	8021180 <_ZN5Flash14CheckBlankByteEmm+0x90>
 8021176:	69fb      	ldr	r3, [r7, #28]
 8021178:	3301      	adds	r3, #1
 802117a:	61fb      	str	r3, [r7, #28]
 802117c:	e7ef      	b.n	802115e <_ZN5Flash14CheckBlankByteEmm+0x6e>
    return true;
 802117e:	2301      	movs	r3, #1
 8021180:	46ad      	mov	sp, r5
}
 8021182:	4618      	mov	r0, r3
 8021184:	3720      	adds	r7, #32
 8021186:	46bd      	mov	sp, r7
 8021188:	bdb0      	pop	{r4, r5, r7, pc}

0802118a <_ZN5Flash18CheckBlankHalfwordEmm>:

bool Flash::CheckBlankHalfword(uint32_t address, uint32_t number)
{
 802118a:	b5b0      	push	{r4, r5, r7, lr}
 802118c:	b088      	sub	sp, #32
 802118e:	af00      	add	r7, sp, #0
 8021190:	60f8      	str	r0, [r7, #12]
 8021192:	60b9      	str	r1, [r7, #8]
 8021194:	607a      	str	r2, [r7, #4]

    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);

    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;

    return true;
 8021196:	466b      	mov	r3, sp
 8021198:	461d      	mov	r5, r3
    uint16_t half[number];
 802119a:	687b      	ldr	r3, [r7, #4]
 802119c:	1e58      	subs	r0, r3, #1
 802119e:	61b8      	str	r0, [r7, #24]
 80211a0:	4603      	mov	r3, r0
 80211a2:	3301      	adds	r3, #1
 80211a4:	4619      	mov	r1, r3
 80211a6:	f04f 0200 	mov.w	r2, #0
 80211aa:	f04f 0300 	mov.w	r3, #0
 80211ae:	f04f 0400 	mov.w	r4, #0
 80211b2:	0114      	lsls	r4, r2, #4
 80211b4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80211b8:	010b      	lsls	r3, r1, #4
 80211ba:	4603      	mov	r3, r0
 80211bc:	3301      	adds	r3, #1
 80211be:	4619      	mov	r1, r3
 80211c0:	f04f 0200 	mov.w	r2, #0
 80211c4:	f04f 0300 	mov.w	r3, #0
 80211c8:	f04f 0400 	mov.w	r4, #0
 80211cc:	0114      	lsls	r4, r2, #4
 80211ce:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80211d2:	010b      	lsls	r3, r1, #4
 80211d4:	4603      	mov	r3, r0
 80211d6:	3301      	adds	r3, #1
 80211d8:	005b      	lsls	r3, r3, #1
 80211da:	3301      	adds	r3, #1
 80211dc:	3307      	adds	r3, #7
 80211de:	08db      	lsrs	r3, r3, #3
 80211e0:	00db      	lsls	r3, r3, #3
 80211e2:	ebad 0d03 	sub.w	sp, sp, r3
 80211e6:	466b      	mov	r3, sp
 80211e8:	3301      	adds	r3, #1
 80211ea:	085b      	lsrs	r3, r3, #1
 80211ec:	005b      	lsls	r3, r3, #1
 80211ee:	617b      	str	r3, [r7, #20]
    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);
 80211f0:	6978      	ldr	r0, [r7, #20]
 80211f2:	68b9      	ldr	r1, [r7, #8]
 80211f4:	687b      	ldr	r3, [r7, #4]
 80211f6:	005b      	lsls	r3, r3, #1
 80211f8:	461a      	mov	r2, r3
 80211fa:	f008 fffb 	bl	802a1f4 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;
 80211fe:	2300      	movs	r3, #0
 8021200:	61fb      	str	r3, [r7, #28]
 8021202:	69fa      	ldr	r2, [r7, #28]
 8021204:	687b      	ldr	r3, [r7, #4]
 8021206:	429a      	cmp	r2, r3
 8021208:	d20d      	bcs.n	8021226 <_ZN5Flash18CheckBlankHalfwordEmm+0x9c>
 802120a:	697b      	ldr	r3, [r7, #20]
 802120c:	69fa      	ldr	r2, [r7, #28]
 802120e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021216:	4293      	cmp	r3, r2
 8021218:	d001      	beq.n	802121e <_ZN5Flash18CheckBlankHalfwordEmm+0x94>
 802121a:	2300      	movs	r3, #0
 802121c:	e004      	b.n	8021228 <_ZN5Flash18CheckBlankHalfwordEmm+0x9e>
 802121e:	69fb      	ldr	r3, [r7, #28]
 8021220:	3301      	adds	r3, #1
 8021222:	61fb      	str	r3, [r7, #28]
 8021224:	e7ed      	b.n	8021202 <_ZN5Flash18CheckBlankHalfwordEmm+0x78>
    return true;
 8021226:	2301      	movs	r3, #1
 8021228:	46ad      	mov	sp, r5
}
 802122a:	4618      	mov	r0, r3
 802122c:	3720      	adds	r7, #32
 802122e:	46bd      	mov	sp, r7
 8021230:	bdb0      	pop	{r4, r5, r7, pc}

08021232 <_ZN5Flash14CheckBlankWordEmm>:

bool Flash::CheckBlankWord(uint32_t address, uint32_t number)
{
 8021232:	b5b0      	push	{r4, r5, r7, lr}
 8021234:	b088      	sub	sp, #32
 8021236:	af00      	add	r7, sp, #0
 8021238:	60f8      	str	r0, [r7, #12]
 802123a:	60b9      	str	r1, [r7, #8]
 802123c:	607a      	str	r2, [r7, #4]

    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);

    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;

    return true;
 802123e:	466b      	mov	r3, sp
 8021240:	461d      	mov	r5, r3
    uint32_t word[number];
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	1e58      	subs	r0, r3, #1
 8021246:	61b8      	str	r0, [r7, #24]
 8021248:	4603      	mov	r3, r0
 802124a:	3301      	adds	r3, #1
 802124c:	4619      	mov	r1, r3
 802124e:	f04f 0200 	mov.w	r2, #0
 8021252:	f04f 0300 	mov.w	r3, #0
 8021256:	f04f 0400 	mov.w	r4, #0
 802125a:	0154      	lsls	r4, r2, #5
 802125c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8021260:	014b      	lsls	r3, r1, #5
 8021262:	4603      	mov	r3, r0
 8021264:	3301      	adds	r3, #1
 8021266:	4619      	mov	r1, r3
 8021268:	f04f 0200 	mov.w	r2, #0
 802126c:	f04f 0300 	mov.w	r3, #0
 8021270:	f04f 0400 	mov.w	r4, #0
 8021274:	0154      	lsls	r4, r2, #5
 8021276:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 802127a:	014b      	lsls	r3, r1, #5
 802127c:	4603      	mov	r3, r0
 802127e:	3301      	adds	r3, #1
 8021280:	009b      	lsls	r3, r3, #2
 8021282:	3303      	adds	r3, #3
 8021284:	3307      	adds	r3, #7
 8021286:	08db      	lsrs	r3, r3, #3
 8021288:	00db      	lsls	r3, r3, #3
 802128a:	ebad 0d03 	sub.w	sp, sp, r3
 802128e:	466b      	mov	r3, sp
 8021290:	3303      	adds	r3, #3
 8021292:	089b      	lsrs	r3, r3, #2
 8021294:	009b      	lsls	r3, r3, #2
 8021296:	617b      	str	r3, [r7, #20]
    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);
 8021298:	6978      	ldr	r0, [r7, #20]
 802129a:	68b9      	ldr	r1, [r7, #8]
 802129c:	687b      	ldr	r3, [r7, #4]
 802129e:	009b      	lsls	r3, r3, #2
 80212a0:	461a      	mov	r2, r3
 80212a2:	f008 ffa7 	bl	802a1f4 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;
 80212a6:	2300      	movs	r3, #0
 80212a8:	61fb      	str	r3, [r7, #28]
 80212aa:	69fa      	ldr	r2, [r7, #28]
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	429a      	cmp	r2, r3
 80212b0:	d20c      	bcs.n	80212cc <_ZN5Flash14CheckBlankWordEmm+0x9a>
 80212b2:	697b      	ldr	r3, [r7, #20]
 80212b4:	69fa      	ldr	r2, [r7, #28]
 80212b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80212ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80212be:	d001      	beq.n	80212c4 <_ZN5Flash14CheckBlankWordEmm+0x92>
 80212c0:	2300      	movs	r3, #0
 80212c2:	e004      	b.n	80212ce <_ZN5Flash14CheckBlankWordEmm+0x9c>
 80212c4:	69fb      	ldr	r3, [r7, #28]
 80212c6:	3301      	adds	r3, #1
 80212c8:	61fb      	str	r3, [r7, #28]
 80212ca:	e7ee      	b.n	80212aa <_ZN5Flash14CheckBlankWordEmm+0x78>
    return true;
 80212cc:	2301      	movs	r3, #1
 80212ce:	46ad      	mov	sp, r5
 80212d0:	4618      	mov	r0, r3
 80212d2:	3720      	adds	r7, #32
 80212d4:	46bd      	mov	sp, r7
 80212d6:	bdb0      	pop	{r4, r5, r7, pc}

080212d8 <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"
#include "declare_extern.h"

Iim42652::Iim42652() : degree_stack_z_(0) {}
 80212d8:	b490      	push	{r4, r7}
 80212da:	b082      	sub	sp, #8
 80212dc:	af00      	add	r7, sp, #0
 80212de:	6078      	str	r0, [r7, #4]
 80212e0:	687a      	ldr	r2, [r7, #4]
 80212e2:	f04f 0300 	mov.w	r3, #0
 80212e6:	f04f 0400 	mov.w	r4, #0
 80212ea:	e9c2 3400 	strd	r3, r4, [r2]
 80212ee:	687b      	ldr	r3, [r7, #4]
 80212f0:	4618      	mov	r0, r3
 80212f2:	3708      	adds	r7, #8
 80212f4:	46bd      	mov	sp, r7
 80212f6:	bc90      	pop	{r4, r7}
 80212f8:	4770      	bx	lr
	...

080212fc <_ZN8Iim426524InitEv>:

uint8_t Iim42652::Init()
{
 80212fc:	b580      	push	{r7, lr}
 80212fe:	b084      	sub	sp, #16
 8021300:	af00      	add	r7, sp, #0
 8021302:	6078      	str	r0, [r7, #4]
    /* bank_select */
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'L');
 8021304:	234c      	movs	r3, #76	; 0x4c
 8021306:	2200      	movs	r2, #0
 8021308:	2176      	movs	r1, #118	; 0x76
 802130a:	6878      	ldr	r0, [r7, #4]
 802130c:	f000 f908 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021310:	2064      	movs	r0, #100	; 0x64
 8021312:	f004 ff2d 	bl	8026170 <HAL_Delay>
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'R');
 8021316:	2352      	movs	r3, #82	; 0x52
 8021318:	2200      	movs	r2, #0
 802131a:	2176      	movs	r1, #118	; 0x76
 802131c:	6878      	ldr	r0, [r7, #4]
 802131e:	f000 f8ff 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021322:	2064      	movs	r0, #100	; 0x64
 8021324:	f004 ff24 	bl	8026170 <HAL_Delay>
    /* power_off */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'L');
 8021328:	234c      	movs	r3, #76	; 0x4c
 802132a:	2200      	movs	r2, #0
 802132c:	214e      	movs	r1, #78	; 0x4e
 802132e:	6878      	ldr	r0, [r7, #4]
 8021330:	f000 f8f6 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021334:	2064      	movs	r0, #100	; 0x64
 8021336:	f004 ff1b 	bl	8026170 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'R');
 802133a:	2352      	movs	r3, #82	; 0x52
 802133c:	2200      	movs	r2, #0
 802133e:	214e      	movs	r1, #78	; 0x4e
 8021340:	6878      	ldr	r0, [r7, #4]
 8021342:	f000 f8ed 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021346:	2064      	movs	r0, #100	; 0x64
 8021348:	f004 ff12 	bl	8026170 <HAL_Delay>

    uint8_t who_l  = Read(WHO_AM_I_ADD, 'L');
 802134c:	224c      	movs	r2, #76	; 0x4c
 802134e:	2175      	movs	r1, #117	; 0x75
 8021350:	6878      	ldr	r0, [r7, #4]
 8021352:	f000 f897 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021356:	4603      	mov	r3, r0
 8021358:	73fb      	strb	r3, [r7, #15]
    uint8_t who_r  = Read(WHO_AM_I_ADD, 'R');
 802135a:	2252      	movs	r2, #82	; 0x52
 802135c:	2175      	movs	r1, #117	; 0x75
 802135e:	6878      	ldr	r0, [r7, #4]
 8021360:	f000 f890 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021364:	4603      	mov	r3, r0
 8021366:	73bb      	strb	r3, [r7, #14]
    uint8_t bank_l = Read(REG_BANK_SEL_ADD, 'L');
 8021368:	224c      	movs	r2, #76	; 0x4c
 802136a:	2176      	movs	r1, #118	; 0x76
 802136c:	6878      	ldr	r0, [r7, #4]
 802136e:	f000 f889 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021372:	4603      	mov	r3, r0
 8021374:	737b      	strb	r3, [r7, #13]
    uint8_t bank_r = Read(REG_BANK_SEL_ADD, 'R');
 8021376:	2252      	movs	r2, #82	; 0x52
 8021378:	2176      	movs	r1, #118	; 0x76
 802137a:	6878      	ldr	r0, [r7, #4]
 802137c:	f000 f882 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021380:	4603      	mov	r3, r0
 8021382:	733b      	strb	r3, [r7, #12]
    uint8_t pwr_l  = Read(PWR_MGMT0_ADD, 'L');
 8021384:	224c      	movs	r2, #76	; 0x4c
 8021386:	214e      	movs	r1, #78	; 0x4e
 8021388:	6878      	ldr	r0, [r7, #4]
 802138a:	f000 f87b 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802138e:	4603      	mov	r3, r0
 8021390:	72fb      	strb	r3, [r7, #11]
    uint8_t pwr_r  = Read(PWR_MGMT0_ADD, 'R');
 8021392:	2252      	movs	r2, #82	; 0x52
 8021394:	214e      	movs	r1, #78	; 0x4e
 8021396:	6878      	ldr	r0, [r7, #4]
 8021398:	f000 f874 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802139c:	4603      	mov	r3, r0
 802139e:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_who_l  = who_l;  g_imu_who_r  = who_r;
 80213a0:	4a32      	ldr	r2, [pc, #200]	; (802146c <_ZN8Iim426524InitEv+0x170>)
 80213a2:	7bfb      	ldrb	r3, [r7, #15]
 80213a4:	7013      	strb	r3, [r2, #0]
 80213a6:	4a32      	ldr	r2, [pc, #200]	; (8021470 <_ZN8Iim426524InitEv+0x174>)
 80213a8:	7bbb      	ldrb	r3, [r7, #14]
 80213aa:	7013      	strb	r3, [r2, #0]
    g_imu_bank_l = bank_l; g_imu_bank_r = bank_r;
 80213ac:	4a31      	ldr	r2, [pc, #196]	; (8021474 <_ZN8Iim426524InitEv+0x178>)
 80213ae:	7b7b      	ldrb	r3, [r7, #13]
 80213b0:	7013      	strb	r3, [r2, #0]
 80213b2:	4a31      	ldr	r2, [pc, #196]	; (8021478 <_ZN8Iim426524InitEv+0x17c>)
 80213b4:	7b3b      	ldrb	r3, [r7, #12]
 80213b6:	7013      	strb	r3, [r2, #0]
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 80213b8:	4a30      	ldr	r2, [pc, #192]	; (802147c <_ZN8Iim426524InitEv+0x180>)
 80213ba:	7afb      	ldrb	r3, [r7, #11]
 80213bc:	7013      	strb	r3, [r2, #0]
 80213be:	4a30      	ldr	r2, [pc, #192]	; (8021480 <_ZN8Iim426524InitEv+0x184>)
 80213c0:	7abb      	ldrb	r3, [r7, #10]
 80213c2:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(who_l != WHO_AM_I_RES)      return 0x01;
 80213c4:	7bfb      	ldrb	r3, [r7, #15]
 80213c6:	2b6f      	cmp	r3, #111	; 0x6f
 80213c8:	d001      	beq.n	80213ce <_ZN8Iim426524InitEv+0xd2>
 80213ca:	2301      	movs	r3, #1
 80213cc:	e049      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(who_r != WHO_AM_I_RES)      return 0x02;
 80213ce:	7bbb      	ldrb	r3, [r7, #14]
 80213d0:	2b6f      	cmp	r3, #111	; 0x6f
 80213d2:	d001      	beq.n	80213d8 <_ZN8Iim426524InitEv+0xdc>
 80213d4:	2302      	movs	r3, #2
 80213d6:	e044      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(bank_l != REG_BANK_SEL_RES) return 0x03;
 80213d8:	7b7b      	ldrb	r3, [r7, #13]
 80213da:	2b00      	cmp	r3, #0
 80213dc:	d001      	beq.n	80213e2 <_ZN8Iim426524InitEv+0xe6>
 80213de:	2303      	movs	r3, #3
 80213e0:	e03f      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(bank_r != REG_BANK_SEL_RES) return 0x04;
 80213e2:	7b3b      	ldrb	r3, [r7, #12]
 80213e4:	2b00      	cmp	r3, #0
 80213e6:	d001      	beq.n	80213ec <_ZN8Iim426524InitEv+0xf0>
 80213e8:	2304      	movs	r3, #4
 80213ea:	e03a      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(pwr_l != PWR_MGMT0_RES)     return 0x05;
 80213ec:	7afb      	ldrb	r3, [r7, #11]
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	d001      	beq.n	80213f6 <_ZN8Iim426524InitEv+0xfa>
 80213f2:	2305      	movs	r3, #5
 80213f4:	e035      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_RES)     return 0x06;
 80213f6:	7abb      	ldrb	r3, [r7, #10]
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d001      	beq.n	8021400 <_ZN8Iim426524InitEv+0x104>
 80213fc:	2306      	movs	r3, #6
 80213fe:	e030      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>

    /* power_on */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'L');
 8021400:	234c      	movs	r3, #76	; 0x4c
 8021402:	220f      	movs	r2, #15
 8021404:	214e      	movs	r1, #78	; 0x4e
 8021406:	6878      	ldr	r0, [r7, #4]
 8021408:	f000 f88a 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 802140c:	2064      	movs	r0, #100	; 0x64
 802140e:	f004 feaf 	bl	8026170 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'R');
 8021412:	2352      	movs	r3, #82	; 0x52
 8021414:	220f      	movs	r2, #15
 8021416:	214e      	movs	r1, #78	; 0x4e
 8021418:	6878      	ldr	r0, [r7, #4]
 802141a:	f000 f881 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 802141e:	2064      	movs	r0, #100	; 0x64
 8021420:	f004 fea6 	bl	8026170 <HAL_Delay>
    pwr_l = Read(PWR_MGMT0_ADD, 'L');
 8021424:	224c      	movs	r2, #76	; 0x4c
 8021426:	214e      	movs	r1, #78	; 0x4e
 8021428:	6878      	ldr	r0, [r7, #4]
 802142a:	f000 f82b 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802142e:	4603      	mov	r3, r0
 8021430:	72fb      	strb	r3, [r7, #11]
    pwr_r = Read(PWR_MGMT0_ADD, 'R');
 8021432:	2252      	movs	r2, #82	; 0x52
 8021434:	214e      	movs	r1, #78	; 0x4e
 8021436:	6878      	ldr	r0, [r7, #4]
 8021438:	f000 f824 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802143c:	4603      	mov	r3, r0
 802143e:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 8021440:	4a0e      	ldr	r2, [pc, #56]	; (802147c <_ZN8Iim426524InitEv+0x180>)
 8021442:	7afb      	ldrb	r3, [r7, #11]
 8021444:	7013      	strb	r3, [r2, #0]
 8021446:	4a0e      	ldr	r2, [pc, #56]	; (8021480 <_ZN8Iim426524InitEv+0x184>)
 8021448:	7abb      	ldrb	r3, [r7, #10]
 802144a:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(pwr_l != PWR_MGMT0_ON) return 0x07;
 802144c:	7afb      	ldrb	r3, [r7, #11]
 802144e:	2b0f      	cmp	r3, #15
 8021450:	d001      	beq.n	8021456 <_ZN8Iim426524InitEv+0x15a>
 8021452:	2307      	movs	r3, #7
 8021454:	e005      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_ON) return 0x08;
 8021456:	7abb      	ldrb	r3, [r7, #10]
 8021458:	2b0f      	cmp	r3, #15
 802145a:	d001      	beq.n	8021460 <_ZN8Iim426524InitEv+0x164>
 802145c:	2308      	movs	r3, #8
 802145e:	e000      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>

    return 0x09;
 8021460:	2309      	movs	r3, #9
}
 8021462:	4618      	mov	r0, r3
 8021464:	3710      	adds	r7, #16
 8021466:	46bd      	mov	sp, r7
 8021468:	bd80      	pop	{r7, pc}
 802146a:	bf00      	nop
 802146c:	20000249 	.word	0x20000249
 8021470:	2000024a 	.word	0x2000024a
 8021474:	2000024b 	.word	0x2000024b
 8021478:	2000024c 	.word	0x2000024c
 802147c:	2000024d 	.word	0x2000024d
 8021480:	2000024e 	.word	0x2000024e

08021484 <_ZN8Iim426524ReadEhc>:

uint8_t Iim42652::Read(uint8_t send_address, char imu_ic_lr)
{
 8021484:	b580      	push	{r7, lr}
 8021486:	b084      	sub	sp, #16
 8021488:	af00      	add	r7, sp, #0
 802148a:	6078      	str	r0, [r7, #4]
 802148c:	460b      	mov	r3, r1
 802148e:	70fb      	strb	r3, [r7, #3]
 8021490:	4613      	mov	r3, r2
 8021492:	70bb      	strb	r3, [r7, #2]
    uint8_t receive_reset_value = 0x00;
 8021494:	2300      	movs	r3, #0
 8021496:	73fb      	strb	r3, [r7, #15]

    send_address = send_address | 0x80; // Read 1--- ----
 8021498:	78fb      	ldrb	r3, [r7, #3]
 802149a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802149e:	b2db      	uxtb	r3, r3
 80214a0:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 80214a2:	78bb      	ldrb	r3, [r7, #2]
 80214a4:	2b4c      	cmp	r3, #76	; 0x4c
 80214a6:	d106      	bne.n	80214b6 <_ZN8Iim426524ReadEhc+0x32>
 80214a8:	2200      	movs	r2, #0
 80214aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80214ae:	4819      	ldr	r0, [pc, #100]	; (8021514 <_ZN8Iim426524ReadEhc+0x90>)
 80214b0:	f006 fb7c 	bl	8027bac <HAL_GPIO_WritePin>
 80214b4:	e008      	b.n	80214c8 <_ZN8Iim426524ReadEhc+0x44>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 80214b6:	78bb      	ldrb	r3, [r7, #2]
 80214b8:	2b52      	cmp	r3, #82	; 0x52
 80214ba:	d105      	bne.n	80214c8 <_ZN8Iim426524ReadEhc+0x44>
 80214bc:	2200      	movs	r2, #0
 80214be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80214c2:	4815      	ldr	r0, [pc, #84]	; (8021518 <_ZN8Iim426524ReadEhc+0x94>)
 80214c4:	f006 fb72 	bl	8027bac <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 80214c8:	1cf9      	adds	r1, r7, #3
 80214ca:	2364      	movs	r3, #100	; 0x64
 80214cc:	2201      	movs	r2, #1
 80214ce:	4813      	ldr	r0, [pc, #76]	; (802151c <_ZN8Iim426524ReadEhc+0x98>)
 80214d0:	f007 f94a 	bl	8028768 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &receive_reset_value, 1, 100);
 80214d4:	f107 010f 	add.w	r1, r7, #15
 80214d8:	2364      	movs	r3, #100	; 0x64
 80214da:	2201      	movs	r2, #1
 80214dc:	480f      	ldr	r0, [pc, #60]	; (802151c <_ZN8Iim426524ReadEhc+0x98>)
 80214de:	f007 fa77 	bl	80289d0 <HAL_SPI_Receive>

    if(imu_ic_lr == 'L') CS_SET_L;
 80214e2:	78bb      	ldrb	r3, [r7, #2]
 80214e4:	2b4c      	cmp	r3, #76	; 0x4c
 80214e6:	d106      	bne.n	80214f6 <_ZN8Iim426524ReadEhc+0x72>
 80214e8:	2201      	movs	r2, #1
 80214ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80214ee:	4809      	ldr	r0, [pc, #36]	; (8021514 <_ZN8Iim426524ReadEhc+0x90>)
 80214f0:	f006 fb5c 	bl	8027bac <HAL_GPIO_WritePin>
 80214f4:	e008      	b.n	8021508 <_ZN8Iim426524ReadEhc+0x84>
    else if(imu_ic_lr == 'R') CS_SET_R;
 80214f6:	78bb      	ldrb	r3, [r7, #2]
 80214f8:	2b52      	cmp	r3, #82	; 0x52
 80214fa:	d105      	bne.n	8021508 <_ZN8Iim426524ReadEhc+0x84>
 80214fc:	2201      	movs	r2, #1
 80214fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021502:	4805      	ldr	r0, [pc, #20]	; (8021518 <_ZN8Iim426524ReadEhc+0x94>)
 8021504:	f006 fb52 	bl	8027bac <HAL_GPIO_WritePin>
    
    return receive_reset_value;
 8021508:	7bfb      	ldrb	r3, [r7, #15]
}
 802150a:	4618      	mov	r0, r3
 802150c:	3710      	adds	r7, #16
 802150e:	46bd      	mov	sp, r7
 8021510:	bd80      	pop	{r7, pc}
 8021512:	bf00      	nop
 8021514:	40020400 	.word	0x40020400
 8021518:	40020000 	.word	0x40020000
 802151c:	20000740 	.word	0x20000740

08021520 <_ZN8Iim426525WriteEhhc>:

void Iim42652::Write(uint8_t send_address, uint8_t send_data, char imu_ic_lr)
{
 8021520:	b580      	push	{r7, lr}
 8021522:	b082      	sub	sp, #8
 8021524:	af00      	add	r7, sp, #0
 8021526:	6078      	str	r0, [r7, #4]
 8021528:	4608      	mov	r0, r1
 802152a:	4611      	mov	r1, r2
 802152c:	461a      	mov	r2, r3
 802152e:	4603      	mov	r3, r0
 8021530:	70fb      	strb	r3, [r7, #3]
 8021532:	460b      	mov	r3, r1
 8021534:	70bb      	strb	r3, [r7, #2]
 8021536:	4613      	mov	r3, r2
 8021538:	707b      	strb	r3, [r7, #1]
    send_address = send_address & 0x7F; // Write 0--- ----
 802153a:	78fb      	ldrb	r3, [r7, #3]
 802153c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021540:	b2db      	uxtb	r3, r3
 8021542:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 8021544:	787b      	ldrb	r3, [r7, #1]
 8021546:	2b4c      	cmp	r3, #76	; 0x4c
 8021548:	d106      	bne.n	8021558 <_ZN8Iim426525WriteEhhc+0x38>
 802154a:	2200      	movs	r2, #0
 802154c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8021550:	4817      	ldr	r0, [pc, #92]	; (80215b0 <_ZN8Iim426525WriteEhhc+0x90>)
 8021552:	f006 fb2b 	bl	8027bac <HAL_GPIO_WritePin>
 8021556:	e008      	b.n	802156a <_ZN8Iim426525WriteEhhc+0x4a>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 8021558:	787b      	ldrb	r3, [r7, #1]
 802155a:	2b52      	cmp	r3, #82	; 0x52
 802155c:	d105      	bne.n	802156a <_ZN8Iim426525WriteEhhc+0x4a>
 802155e:	2200      	movs	r2, #0
 8021560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021564:	4813      	ldr	r0, [pc, #76]	; (80215b4 <_ZN8Iim426525WriteEhhc+0x94>)
 8021566:	f006 fb21 	bl	8027bac <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 802156a:	1cf9      	adds	r1, r7, #3
 802156c:	2364      	movs	r3, #100	; 0x64
 802156e:	2201      	movs	r2, #1
 8021570:	4811      	ldr	r0, [pc, #68]	; (80215b8 <_ZN8Iim426525WriteEhhc+0x98>)
 8021572:	f007 f8f9 	bl	8028768 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &send_data, 1, 100);
 8021576:	1cb9      	adds	r1, r7, #2
 8021578:	2364      	movs	r3, #100	; 0x64
 802157a:	2201      	movs	r2, #1
 802157c:	480e      	ldr	r0, [pc, #56]	; (80215b8 <_ZN8Iim426525WriteEhhc+0x98>)
 802157e:	f007 f8f3 	bl	8028768 <HAL_SPI_Transmit>

    if(imu_ic_lr == 'L') CS_SET_L;
 8021582:	787b      	ldrb	r3, [r7, #1]
 8021584:	2b4c      	cmp	r3, #76	; 0x4c
 8021586:	d106      	bne.n	8021596 <_ZN8Iim426525WriteEhhc+0x76>
 8021588:	2201      	movs	r2, #1
 802158a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802158e:	4808      	ldr	r0, [pc, #32]	; (80215b0 <_ZN8Iim426525WriteEhhc+0x90>)
 8021590:	f006 fb0c 	bl	8027bac <HAL_GPIO_WritePin>
    else if(imu_ic_lr == 'R') CS_SET_R;
}
 8021594:	e008      	b.n	80215a8 <_ZN8Iim426525WriteEhhc+0x88>
    else if(imu_ic_lr == 'R') CS_SET_R;
 8021596:	787b      	ldrb	r3, [r7, #1]
 8021598:	2b52      	cmp	r3, #82	; 0x52
 802159a:	d105      	bne.n	80215a8 <_ZN8Iim426525WriteEhhc+0x88>
 802159c:	2201      	movs	r2, #1
 802159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80215a2:	4804      	ldr	r0, [pc, #16]	; (80215b4 <_ZN8Iim426525WriteEhhc+0x94>)
 80215a4:	f006 fb02 	bl	8027bac <HAL_GPIO_WritePin>
}
 80215a8:	bf00      	nop
 80215aa:	3708      	adds	r7, #8
 80215ac:	46bd      	mov	sp, r7
 80215ae:	bd80      	pop	{r7, pc}
 80215b0:	40020400 	.word	0x40020400
 80215b4:	40020000 	.word	0x40020000
 80215b8:	20000740 	.word	0x20000740

080215bc <_ZN8Iim426529Read2ByteEhhc>:

    return CheckRead(send_address, send_data, imu_ic_lr);
}

int16_t Iim42652::Read2Byte(uint8_t upper_address, uint8_t lower_address, char imu_ic_lr)
{
 80215bc:	b580      	push	{r7, lr}
 80215be:	b084      	sub	sp, #16
 80215c0:	af00      	add	r7, sp, #0
 80215c2:	6078      	str	r0, [r7, #4]
 80215c4:	4608      	mov	r0, r1
 80215c6:	4611      	mov	r1, r2
 80215c8:	461a      	mov	r2, r3
 80215ca:	4603      	mov	r3, r0
 80215cc:	70fb      	strb	r3, [r7, #3]
 80215ce:	460b      	mov	r3, r1
 80215d0:	70bb      	strb	r3, [r7, #2]
 80215d2:	4613      	mov	r3, r2
 80215d4:	707b      	strb	r3, [r7, #1]
    int16_t upper_receive, lower_receive;

    upper_receive = static_cast<int16_t>(Read(upper_address, imu_ic_lr));
 80215d6:	787a      	ldrb	r2, [r7, #1]
 80215d8:	78fb      	ldrb	r3, [r7, #3]
 80215da:	4619      	mov	r1, r3
 80215dc:	6878      	ldr	r0, [r7, #4]
 80215de:	f7ff ff51 	bl	8021484 <_ZN8Iim426524ReadEhc>
 80215e2:	4603      	mov	r3, r0
 80215e4:	81fb      	strh	r3, [r7, #14]
    lower_receive = static_cast<int16_t>(Read(lower_address, imu_ic_lr));
 80215e6:	787a      	ldrb	r2, [r7, #1]
 80215e8:	78bb      	ldrb	r3, [r7, #2]
 80215ea:	4619      	mov	r1, r3
 80215ec:	6878      	ldr	r0, [r7, #4]
 80215ee:	f7ff ff49 	bl	8021484 <_ZN8Iim426524ReadEhc>
 80215f2:	4603      	mov	r3, r0
 80215f4:	81bb      	strh	r3, [r7, #12]

    return (upper_receive << 8) | lower_receive;
 80215f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80215fa:	021b      	lsls	r3, r3, #8
 80215fc:	b21a      	sxth	r2, r3
 80215fe:	89bb      	ldrh	r3, [r7, #12]
 8021600:	4313      	orrs	r3, r2
 8021602:	b21b      	sxth	r3, r3
}
 8021604:	4618      	mov	r0, r3
 8021606:	3710      	adds	r7, #16
 8021608:	46bd      	mov	sp, r7
 802160a:	bd80      	pop	{r7, pc}
 802160c:	0000      	movs	r0, r0
	...

08021610 <_ZN8Iim426526UpdateEv>:

void Iim42652::Update()
{
 8021610:	b590      	push	{r4, r7, lr}
 8021612:	b089      	sub	sp, #36	; 0x24
 8021614:	af00      	add	r7, sp, #0
 8021616:	6078      	str	r0, [r7, #4]
    int16_t raw_z_l = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
 8021618:	234c      	movs	r3, #76	; 0x4c
 802161a:	222a      	movs	r2, #42	; 0x2a
 802161c:	2129      	movs	r1, #41	; 0x29
 802161e:	6878      	ldr	r0, [r7, #4]
 8021620:	f7ff ffcc 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021624:	4603      	mov	r3, r0
 8021626:	83fb      	strh	r3, [r7, #30]
    int16_t raw_z_r = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 8021628:	2352      	movs	r3, #82	; 0x52
 802162a:	222a      	movs	r2, #42	; 0x2a
 802162c:	2129      	movs	r1, #41	; 0x29
 802162e:	6878      	ldr	r0, [r7, #4]
 8021630:	f7ff ffc4 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021634:	4603      	mov	r3, r0
 8021636:	83bb      	strh	r3, [r7, #28]
    double avg_raw_z = static_cast<double>(raw_z_l + raw_z_r) / 2.0;
 8021638:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 802163c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8021640:	4413      	add	r3, r2
 8021642:	4618      	mov	r0, r3
 8021644:	f7fe fe4e 	bl	80202e4 <__aeabi_i2d>
 8021648:	f04f 0200 	mov.w	r2, #0
 802164c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021650:	f7fe ffdc 	bl	802060c <__aeabi_ddiv>
 8021654:	4603      	mov	r3, r0
 8021656:	460c      	mov	r4, r1
 8021658:	e9c7 3404 	strd	r3, r4, [r7, #16]
    double degree_z = avg_raw_z * NORMAL_FUCOR_DPS * TIM6_PERIOD;
 802165c:	a316      	add	r3, pc, #88	; (adr r3, 80216b8 <_ZN8Iim426526UpdateEv+0xa8>)
 802165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021662:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8021666:	f7fe fea7 	bl	80203b8 <__aeabi_dmul>
 802166a:	4603      	mov	r3, r0
 802166c:	460c      	mov	r4, r1
 802166e:	4618      	mov	r0, r3
 8021670:	4621      	mov	r1, r4
 8021672:	f04f 0200 	mov.w	r2, #0
 8021676:	4b0e      	ldr	r3, [pc, #56]	; (80216b0 <_ZN8Iim426526UpdateEv+0xa0>)
 8021678:	f7fe fe9e 	bl	80203b8 <__aeabi_dmul>
 802167c:	4603      	mov	r3, r0
 802167e:	460c      	mov	r4, r1
 8021680:	e9c7 3402 	strd	r3, r4, [r7, #8]

    degree_stack_z_ += degree_z;
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	e9d3 0100 	ldrd	r0, r1, [r3]
 802168a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802168e:	f7fe fcdd 	bl	802004c <__adddf3>
 8021692:	4603      	mov	r3, r0
 8021694:	460c      	mov	r4, r1
 8021696:	687a      	ldr	r2, [r7, #4]
 8021698:	e9c2 3400 	strd	r3, r4, [r2]

#ifdef DEBUG_MODE
    g_deg_z = degree_z;
 802169c:	4a05      	ldr	r2, [pc, #20]	; (80216b4 <_ZN8Iim426526UpdateEv+0xa4>)
 802169e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80216a2:	e9c2 3400 	strd	r3, r4, [r2]
#endif // DEBUG_MODE
}
 80216a6:	bf00      	nop
 80216a8:	3724      	adds	r7, #36	; 0x24
 80216aa:	46bd      	mov	sp, r7
 80216ac:	bd90      	pop	{r4, r7, pc}
 80216ae:	bf00      	nop
 80216b0:	3ff40000 	.word	0x3ff40000
 80216b4:	20000250 	.word	0x20000250
 80216b8:	ddb1209f 	.word	0xddb1209f
 80216bc:	3faf403d 	.word	0x3faf403d

080216c0 <_ZN8Iim4265217ResetDegreeStackZEv>:

void Iim42652::ResetDegreeStackZ()
{
 80216c0:	b490      	push	{r4, r7}
 80216c2:	b082      	sub	sp, #8
 80216c4:	af00      	add	r7, sp, #0
 80216c6:	6078      	str	r0, [r7, #4]
    degree_stack_z_ = 0.0;
 80216c8:	687a      	ldr	r2, [r7, #4]
 80216ca:	f04f 0300 	mov.w	r3, #0
 80216ce:	f04f 0400 	mov.w	r4, #0
 80216d2:	e9c2 3400 	strd	r3, r4, [r2]
}
 80216d6:	bf00      	nop
 80216d8:	3708      	adds	r7, #8
 80216da:	46bd      	mov	sp, r7
 80216dc:	bc90      	pop	{r4, r7}
 80216de:	4770      	bx	lr

080216e0 <_ZN8Iim4265215GetDegreeStackZEv>:

double Iim42652::GetDegreeStackZ()
{
 80216e0:	b490      	push	{r4, r7}
 80216e2:	b082      	sub	sp, #8
 80216e4:	af00      	add	r7, sp, #0
 80216e6:	6078      	str	r0, [r7, #4]
    return degree_stack_z_;
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80216ee:	ec44 3b17 	vmov	d7, r3, r4
}
 80216f2:	eeb0 0a47 	vmov.f32	s0, s14
 80216f6:	eef0 0a67 	vmov.f32	s1, s15
 80216fa:	3708      	adds	r7, #8
 80216fc:	46bd      	mov	sp, r7
 80216fe:	bc90      	pop	{r4, r7}
 8021700:	4770      	bx	lr

08021702 <_ZN3LedC1Ev>:
#include "led.hpp"

Led::Led() : interrupt_count_(0)
 8021702:	b480      	push	{r7}
 8021704:	b083      	sub	sp, #12
 8021706:	af00      	add	r7, sp, #0
 8021708:	6078      	str	r0, [r7, #4]
           , interrupt_timer_(0) {}
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	2200      	movs	r2, #0
 802170e:	701a      	strb	r2, [r3, #0]
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	2200      	movs	r2, #0
 8021714:	705a      	strb	r2, [r3, #1]
 8021716:	687b      	ldr	r3, [r7, #4]
 8021718:	4618      	mov	r0, r3
 802171a:	370c      	adds	r7, #12
 802171c:	46bd      	mov	sp, r7
 802171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021722:	4770      	bx	lr

08021724 <_ZN3Led10ColorOrderEc>:

void Led::ColorOrder(char color)
{
 8021724:	b580      	push	{r7, lr}
 8021726:	b082      	sub	sp, #8
 8021728:	af00      	add	r7, sp, #0
 802172a:	6078      	str	r0, [r7, #4]
 802172c:	460b      	mov	r3, r1
 802172e:	70fb      	strb	r3, [r7, #3]
    switch(color)
 8021730:	78fb      	ldrb	r3, [r7, #3]
 8021732:	3b42      	subs	r3, #66	; 0x42
 8021734:	2b17      	cmp	r3, #23
 8021736:	f200 80b8 	bhi.w	80218aa <_ZN3Led10ColorOrderEc+0x186>
 802173a:	a201      	add	r2, pc, #4	; (adr r2, 8021740 <_ZN3Led10ColorOrderEc+0x1c>)
 802173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021740:	080217ed 	.word	0x080217ed
 8021744:	08021839 	.word	0x08021839
 8021748:	080218ab 	.word	0x080218ab
 802174c:	080218ab 	.word	0x080218ab
 8021750:	080218ab 	.word	0x080218ab
 8021754:	080217c7 	.word	0x080217c7
 8021758:	080218ab 	.word	0x080218ab
 802175c:	080218ab 	.word	0x080218ab
 8021760:	080218ab 	.word	0x080218ab
 8021764:	080218ab 	.word	0x080218ab
 8021768:	080218ab 	.word	0x080218ab
 802176c:	0802185f 	.word	0x0802185f
 8021770:	080218ab 	.word	0x080218ab
 8021774:	080218ab 	.word	0x080218ab
 8021778:	080218ab 	.word	0x080218ab
 802177c:	080218ab 	.word	0x080218ab
 8021780:	080217a1 	.word	0x080217a1
 8021784:	080218ab 	.word	0x080218ab
 8021788:	080218ab 	.word	0x080218ab
 802178c:	080218ab 	.word	0x080218ab
 8021790:	080218ab 	.word	0x080218ab
 8021794:	08021885 	.word	0x08021885
 8021798:	080218ab 	.word	0x080218ab
 802179c:	08021813 	.word	0x08021813
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 80217a0:	2200      	movs	r2, #0
 80217a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80217a6:	484c      	ldr	r0, [pc, #304]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217a8:	f006 fa00 	bl	8027bac <HAL_GPIO_WritePin>
 80217ac:	2201      	movs	r2, #1
 80217ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80217b2:	4849      	ldr	r0, [pc, #292]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217b4:	f006 f9fa 	bl	8027bac <HAL_GPIO_WritePin>
 80217b8:	2201      	movs	r2, #1
 80217ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80217be:	4846      	ldr	r0, [pc, #280]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217c0:	f006 f9f4 	bl	8027bac <HAL_GPIO_WritePin>
 80217c4:	e084      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 80217c6:	2201      	movs	r2, #1
 80217c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80217cc:	4842      	ldr	r0, [pc, #264]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217ce:	f006 f9ed 	bl	8027bac <HAL_GPIO_WritePin>
 80217d2:	2200      	movs	r2, #0
 80217d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80217d8:	483f      	ldr	r0, [pc, #252]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217da:	f006 f9e7 	bl	8027bac <HAL_GPIO_WritePin>
 80217de:	2201      	movs	r2, #1
 80217e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80217e4:	483c      	ldr	r0, [pc, #240]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217e6:	f006 f9e1 	bl	8027bac <HAL_GPIO_WritePin>
 80217ea:	e071      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 80217ec:	2201      	movs	r2, #1
 80217ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80217f2:	4839      	ldr	r0, [pc, #228]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217f4:	f006 f9da 	bl	8027bac <HAL_GPIO_WritePin>
 80217f8:	2201      	movs	r2, #1
 80217fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80217fe:	4836      	ldr	r0, [pc, #216]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021800:	f006 f9d4 	bl	8027bac <HAL_GPIO_WritePin>
 8021804:	2200      	movs	r2, #0
 8021806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802180a:	4833      	ldr	r0, [pc, #204]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802180c:	f006 f9ce 	bl	8027bac <HAL_GPIO_WritePin>
 8021810:	e05e      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 8021812:	2200      	movs	r2, #0
 8021814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021818:	482f      	ldr	r0, [pc, #188]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802181a:	f006 f9c7 	bl	8027bac <HAL_GPIO_WritePin>
 802181e:	2200      	movs	r2, #0
 8021820:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021824:	482c      	ldr	r0, [pc, #176]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021826:	f006 f9c1 	bl	8027bac <HAL_GPIO_WritePin>
 802182a:	2201      	movs	r2, #1
 802182c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021830:	4829      	ldr	r0, [pc, #164]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021832:	f006 f9bb 	bl	8027bac <HAL_GPIO_WritePin>
 8021836:	e04b      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 8021838:	2201      	movs	r2, #1
 802183a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802183e:	4826      	ldr	r0, [pc, #152]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021840:	f006 f9b4 	bl	8027bac <HAL_GPIO_WritePin>
 8021844:	2200      	movs	r2, #0
 8021846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802184a:	4823      	ldr	r0, [pc, #140]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802184c:	f006 f9ae 	bl	8027bac <HAL_GPIO_WritePin>
 8021850:	2200      	movs	r2, #0
 8021852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021856:	4820      	ldr	r0, [pc, #128]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021858:	f006 f9a8 	bl	8027bac <HAL_GPIO_WritePin>
 802185c:	e038      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 802185e:	2200      	movs	r2, #0
 8021860:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021864:	481c      	ldr	r0, [pc, #112]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021866:	f006 f9a1 	bl	8027bac <HAL_GPIO_WritePin>
 802186a:	2201      	movs	r2, #1
 802186c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021870:	4819      	ldr	r0, [pc, #100]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021872:	f006 f99b 	bl	8027bac <HAL_GPIO_WritePin>
 8021876:	2200      	movs	r2, #0
 8021878:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802187c:	4816      	ldr	r0, [pc, #88]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802187e:	f006 f995 	bl	8027bac <HAL_GPIO_WritePin>
 8021882:	e025      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 8021884:	2200      	movs	r2, #0
 8021886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802188a:	4813      	ldr	r0, [pc, #76]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802188c:	f006 f98e 	bl	8027bac <HAL_GPIO_WritePin>
 8021890:	2200      	movs	r2, #0
 8021892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021896:	4810      	ldr	r0, [pc, #64]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021898:	f006 f988 	bl	8027bac <HAL_GPIO_WritePin>
 802189c:	2200      	movs	r2, #0
 802189e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80218a2:	480d      	ldr	r0, [pc, #52]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218a4:	f006 f982 	bl	8027bac <HAL_GPIO_WritePin>
 80218a8:	e012      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 80218aa:	2201      	movs	r2, #1
 80218ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80218b0:	4809      	ldr	r0, [pc, #36]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218b2:	f006 f97b 	bl	8027bac <HAL_GPIO_WritePin>
 80218b6:	2201      	movs	r2, #1
 80218b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80218bc:	4806      	ldr	r0, [pc, #24]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218be:	f006 f975 	bl	8027bac <HAL_GPIO_WritePin>
 80218c2:	2201      	movs	r2, #1
 80218c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80218c8:	4803      	ldr	r0, [pc, #12]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218ca:	f006 f96f 	bl	8027bac <HAL_GPIO_WritePin>
 80218ce:	bf00      	nop
    }
}
 80218d0:	bf00      	nop
 80218d2:	3708      	adds	r7, #8
 80218d4:	46bd      	mov	sp, r7
 80218d6:	bd80      	pop	{r7, pc}
 80218d8:	40020800 	.word	0x40020800

080218dc <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 80218dc:	b580      	push	{r7, lr}
 80218de:	b084      	sub	sp, #16
 80218e0:	af00      	add	r7, sp, #0
 80218e2:	6078      	str	r0, [r7, #4]
 80218e4:	4608      	mov	r0, r1
 80218e6:	4611      	mov	r1, r2
 80218e8:	461a      	mov	r2, r3
 80218ea:	4603      	mov	r3, r0
 80218ec:	70fb      	strb	r3, [r7, #3]
 80218ee:	460b      	mov	r3, r1
 80218f0:	70bb      	strb	r3, [r7, #2]
 80218f2:	4613      	mov	r3, r2
 80218f4:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 80218f6:	2300      	movs	r3, #0
 80218f8:	73fb      	strb	r3, [r7, #15]
 80218fa:	7bfa      	ldrb	r2, [r7, #15]
 80218fc:	78fb      	ldrb	r3, [r7, #3]
 80218fe:	429a      	cmp	r2, r3
 8021900:	d215      	bcs.n	802192e <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 8021902:	78bb      	ldrb	r3, [r7, #2]
 8021904:	4619      	mov	r1, r3
 8021906:	6878      	ldr	r0, [r7, #4]
 8021908:	f7ff ff0c 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 802190c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021910:	f004 fc2e 	bl	8026170 <HAL_Delay>
        ColorOrder(color_2);
 8021914:	787b      	ldrb	r3, [r7, #1]
 8021916:	4619      	mov	r1, r3
 8021918:	6878      	ldr	r0, [r7, #4]
 802191a:	f7ff ff03 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 802191e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021922:	f004 fc25 	bl	8026170 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021926:	7bfb      	ldrb	r3, [r7, #15]
 8021928:	3301      	adds	r3, #1
 802192a:	73fb      	strb	r3, [r7, #15]
 802192c:	e7e5      	b.n	80218fa <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 802192e:	bf00      	nop
 8021930:	3710      	adds	r7, #16
 8021932:	46bd      	mov	sp, r7
 8021934:	bd80      	pop	{r7, pc}

08021936 <_ZN3Led7RainbowEh>:

void Led::Rainbow(uint8_t times)
{
 8021936:	b580      	push	{r7, lr}
 8021938:	b084      	sub	sp, #16
 802193a:	af00      	add	r7, sp, #0
 802193c:	6078      	str	r0, [r7, #4]
 802193e:	460b      	mov	r3, r1
 8021940:	70fb      	strb	r3, [r7, #3]
    for(uint8_t i = 0; i < times; i++)
 8021942:	2300      	movs	r3, #0
 8021944:	73fb      	strb	r3, [r7, #15]
 8021946:	7bfa      	ldrb	r2, [r7, #15]
 8021948:	78fb      	ldrb	r3, [r7, #3]
 802194a:	429a      	cmp	r2, r3
 802194c:	d233      	bcs.n	80219b6 <_ZN3Led7RainbowEh+0x80>
    {
        ColorOrder('R');
 802194e:	2152      	movs	r1, #82	; 0x52
 8021950:	6878      	ldr	r0, [r7, #4]
 8021952:	f7ff fee7 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021956:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802195a:	f004 fc09 	bl	8026170 <HAL_Delay>
        ColorOrder('Y');
 802195e:	2159      	movs	r1, #89	; 0x59
 8021960:	6878      	ldr	r0, [r7, #4]
 8021962:	f7ff fedf 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021966:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802196a:	f004 fc01 	bl	8026170 <HAL_Delay>
        ColorOrder('G');
 802196e:	2147      	movs	r1, #71	; 0x47
 8021970:	6878      	ldr	r0, [r7, #4]
 8021972:	f7ff fed7 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021976:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802197a:	f004 fbf9 	bl	8026170 <HAL_Delay>
        ColorOrder('C');
 802197e:	2143      	movs	r1, #67	; 0x43
 8021980:	6878      	ldr	r0, [r7, #4]
 8021982:	f7ff fecf 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021986:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802198a:	f004 fbf1 	bl	8026170 <HAL_Delay>
        ColorOrder('B');
 802198e:	2142      	movs	r1, #66	; 0x42
 8021990:	6878      	ldr	r0, [r7, #4]
 8021992:	f7ff fec7 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021996:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802199a:	f004 fbe9 	bl	8026170 <HAL_Delay>
        ColorOrder('M');
 802199e:	214d      	movs	r1, #77	; 0x4d
 80219a0:	6878      	ldr	r0, [r7, #4]
 80219a2:	f7ff febf 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 80219a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80219aa:	f004 fbe1 	bl	8026170 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 80219ae:	7bfb      	ldrb	r3, [r7, #15]
 80219b0:	3301      	adds	r3, #1
 80219b2:	73fb      	strb	r3, [r7, #15]
 80219b4:	e7c7      	b.n	8021946 <_ZN3Led7RainbowEh+0x10>
    }
}
 80219b6:	bf00      	nop
 80219b8:	3710      	adds	r7, #16
 80219ba:	46bd      	mov	sp, r7
 80219bc:	bd80      	pop	{r7, pc}

080219be <_ZN3Led14BlinkInterruptEhcc>:

bool Led::BlinkInterrupt(uint8_t times, char color_1, char color_2)
{
 80219be:	b580      	push	{r7, lr}
 80219c0:	b084      	sub	sp, #16
 80219c2:	af00      	add	r7, sp, #0
 80219c4:	6078      	str	r0, [r7, #4]
 80219c6:	4608      	mov	r0, r1
 80219c8:	4611      	mov	r1, r2
 80219ca:	461a      	mov	r2, r3
 80219cc:	4603      	mov	r3, r0
 80219ce:	70fb      	strb	r3, [r7, #3]
 80219d0:	460b      	mov	r3, r1
 80219d2:	70bb      	strb	r3, [r7, #2]
 80219d4:	4613      	mov	r3, r2
 80219d6:	707b      	strb	r3, [r7, #1]
    uint8_t count = interrupt_count_;
 80219d8:	687b      	ldr	r3, [r7, #4]
 80219da:	781b      	ldrb	r3, [r3, #0]
 80219dc:	73fb      	strb	r3, [r7, #15]
    uint8_t timer = interrupt_timer_;
 80219de:	687b      	ldr	r3, [r7, #4]
 80219e0:	785b      	ldrb	r3, [r3, #1]
 80219e2:	73bb      	strb	r3, [r7, #14]
    bool blink_continue = true;
 80219e4:	2301      	movs	r3, #1
 80219e6:	737b      	strb	r3, [r7, #13]

    if(count < times){
 80219e8:	7bfa      	ldrb	r2, [r7, #15]
 80219ea:	78fb      	ldrb	r3, [r7, #3]
 80219ec:	429a      	cmp	r2, r3
 80219ee:	d21d      	bcs.n	8021a2c <_ZN3Led14BlinkInterruptEhcc+0x6e>
        if(timer < BLINK_INTERVAL_TIMX){
 80219f0:	7bbb      	ldrb	r3, [r7, #14]
 80219f2:	2b27      	cmp	r3, #39	; 0x27
 80219f4:	d808      	bhi.n	8021a08 <_ZN3Led14BlinkInterruptEhcc+0x4a>
            ColorOrder(color_1);
 80219f6:	78bb      	ldrb	r3, [r7, #2]
 80219f8:	4619      	mov	r1, r3
 80219fa:	6878      	ldr	r0, [r7, #4]
 80219fc:	f7ff fe92 	bl	8021724 <_ZN3Led10ColorOrderEc>
            timer++;
 8021a00:	7bbb      	ldrb	r3, [r7, #14]
 8021a02:	3301      	adds	r3, #1
 8021a04:	73bb      	strb	r3, [r7, #14]
 8021a06:	e019      	b.n	8021a3c <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else if(timer < (BLINK_INTERVAL_TIMX + BLINK_INTERVAL_TIMX)){
 8021a08:	7bbb      	ldrb	r3, [r7, #14]
 8021a0a:	2b4f      	cmp	r3, #79	; 0x4f
 8021a0c:	d808      	bhi.n	8021a20 <_ZN3Led14BlinkInterruptEhcc+0x62>
            ColorOrder(color_2);
 8021a0e:	787b      	ldrb	r3, [r7, #1]
 8021a10:	4619      	mov	r1, r3
 8021a12:	6878      	ldr	r0, [r7, #4]
 8021a14:	f7ff fe86 	bl	8021724 <_ZN3Led10ColorOrderEc>
            timer++;
 8021a18:	7bbb      	ldrb	r3, [r7, #14]
 8021a1a:	3301      	adds	r3, #1
 8021a1c:	73bb      	strb	r3, [r7, #14]
 8021a1e:	e00d      	b.n	8021a3c <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else{
            count++;
 8021a20:	7bfb      	ldrb	r3, [r7, #15]
 8021a22:	3301      	adds	r3, #1
 8021a24:	73fb      	strb	r3, [r7, #15]
            timer = 0;
 8021a26:	2300      	movs	r3, #0
 8021a28:	73bb      	strb	r3, [r7, #14]
 8021a2a:	e007      	b.n	8021a3c <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }
    }else{
        ColorOrder('X');
 8021a2c:	2158      	movs	r1, #88	; 0x58
 8021a2e:	6878      	ldr	r0, [r7, #4]
 8021a30:	f7ff fe78 	bl	8021724 <_ZN3Led10ColorOrderEc>
        count = 0;
 8021a34:	2300      	movs	r3, #0
 8021a36:	73fb      	strb	r3, [r7, #15]
        blink_continue = false;
 8021a38:	2300      	movs	r3, #0
 8021a3a:	737b      	strb	r3, [r7, #13]
    }

    interrupt_count_ = count;
 8021a3c:	687b      	ldr	r3, [r7, #4]
 8021a3e:	7bfa      	ldrb	r2, [r7, #15]
 8021a40:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = timer;
 8021a42:	687b      	ldr	r3, [r7, #4]
 8021a44:	7bba      	ldrb	r2, [r7, #14]
 8021a46:	705a      	strb	r2, [r3, #1]

    return blink_continue;
 8021a48:	7b7b      	ldrb	r3, [r7, #13]
}
 8021a4a:	4618      	mov	r0, r3
 8021a4c:	3710      	adds	r7, #16
 8021a4e:	46bd      	mov	sp, r7
 8021a50:	bd80      	pop	{r7, pc}

08021a52 <_ZN3Led14ResetInterruptEv>:

void Led::ResetInterrupt()
{
 8021a52:	b480      	push	{r7}
 8021a54:	b083      	sub	sp, #12
 8021a56:	af00      	add	r7, sp, #0
 8021a58:	6078      	str	r0, [r7, #4]
    interrupt_count_ = 0;
 8021a5a:	687b      	ldr	r3, [r7, #4]
 8021a5c:	2200      	movs	r2, #0
 8021a5e:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = 0;
 8021a60:	687b      	ldr	r3, [r7, #4]
 8021a62:	2200      	movs	r2, #0
 8021a64:	705a      	strb	r2, [r3, #1]
 8021a66:	bf00      	nop
 8021a68:	370c      	adds	r7, #12
 8021a6a:	46bd      	mov	sp, r7
 8021a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a70:	4770      	bx	lr

08021a72 <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_{0}
 8021a72:	b580      	push	{r7, lr}
 8021a74:	b082      	sub	sp, #8
 8021a76:	af00      	add	r7, sp, #0
 8021a78:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_{{0}}
                         , max_line_sensors_valu_{0}
                         , min_line_sensors_valu_{0}
                         , line_sensors_valu_{0}
                         , emergency_stop_flag_(false) {}
 8021a7a:	687b      	ldr	r3, [r7, #4]
 8021a7c:	461a      	mov	r2, r3
 8021a7e:	2300      	movs	r3, #0
 8021a80:	6013      	str	r3, [r2, #0]
 8021a82:	6053      	str	r3, [r2, #4]
 8021a84:	6093      	str	r3, [r2, #8]
 8021a86:	60d3      	str	r3, [r2, #12]
 8021a88:	6113      	str	r3, [r2, #16]
 8021a8a:	6153      	str	r3, [r2, #20]
 8021a8c:	6193      	str	r3, [r2, #24]
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	331c      	adds	r3, #28
 8021a92:	f44f 728c 	mov.w	r2, #280	; 0x118
 8021a96:	2100      	movs	r1, #0
 8021a98:	4618      	mov	r0, r3
 8021a9a:	f008 fbb6 	bl	802a20a <memset>
 8021a9e:	687b      	ldr	r3, [r7, #4]
 8021aa0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8021aa4:	2200      	movs	r2, #0
 8021aa6:	601a      	str	r2, [r3, #0]
 8021aa8:	605a      	str	r2, [r3, #4]
 8021aaa:	609a      	str	r2, [r3, #8]
 8021aac:	60da      	str	r2, [r3, #12]
 8021aae:	611a      	str	r2, [r3, #16]
 8021ab0:	615a      	str	r2, [r3, #20]
 8021ab2:	619a      	str	r2, [r3, #24]
 8021ab4:	687b      	ldr	r3, [r7, #4]
 8021ab6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021aba:	2200      	movs	r2, #0
 8021abc:	601a      	str	r2, [r3, #0]
 8021abe:	605a      	str	r2, [r3, #4]
 8021ac0:	609a      	str	r2, [r3, #8]
 8021ac2:	60da      	str	r2, [r3, #12]
 8021ac4:	611a      	str	r2, [r3, #16]
 8021ac6:	615a      	str	r2, [r3, #20]
 8021ac8:	619a      	str	r2, [r3, #24]
 8021aca:	687b      	ldr	r3, [r7, #4]
 8021acc:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8021ad0:	2200      	movs	r2, #0
 8021ad2:	601a      	str	r2, [r3, #0]
 8021ad4:	605a      	str	r2, [r3, #4]
 8021ad6:	609a      	str	r2, [r3, #8]
 8021ad8:	60da      	str	r2, [r3, #12]
 8021ada:	611a      	str	r2, [r3, #16]
 8021adc:	615a      	str	r2, [r3, #20]
 8021ade:	619a      	str	r2, [r3, #24]
 8021ae0:	687b      	ldr	r3, [r7, #4]
 8021ae2:	2200      	movs	r2, #0
 8021ae4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8021ae8:	687b      	ldr	r3, [r7, #4]
 8021aea:	4618      	mov	r0, r3
 8021aec:	3708      	adds	r7, #8
 8021aee:	46bd      	mov	sp, r7
 8021af0:	bd80      	pop	{r7, pc}
	...

08021af4 <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 8021af4:	b580      	push	{r7, lr}
 8021af6:	b082      	sub	sp, #8
 8021af8:	af00      	add	r7, sp, #0
 8021afa:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 8021afc:	687b      	ldr	r3, [r7, #4]
 8021afe:	220e      	movs	r2, #14
 8021b00:	4619      	mov	r1, r3
 8021b02:	4815      	ldr	r0, [pc, #84]	; (8021b58 <_ZN10LineSensor4InitEv+0x64>)
 8021b04:	f004 fb9a 	bl	802623c <HAL_ADC_Start_DMA>
 8021b08:	4603      	mov	r3, r0
 8021b0a:	2b00      	cmp	r3, #0
 8021b0c:	bf14      	ite	ne
 8021b0e:	2301      	movne	r3, #1
 8021b10:	2300      	moveq	r3, #0
 8021b12:	b2db      	uxtb	r3, r3
 8021b14:	2b00      	cmp	r3, #0
 8021b16:	d004      	beq.n	8021b22 <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 8021b18:	4b10      	ldr	r3, [pc, #64]	; (8021b5c <_ZN10LineSensor4InitEv+0x68>)
 8021b1a:	2201      	movs	r2, #1
 8021b1c:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021b1e:	f002 f8c3 	bl	8023ca8 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 8021b22:	2100      	movs	r1, #0
 8021b24:	480e      	ldr	r0, [pc, #56]	; (8021b60 <_ZN10LineSensor4InitEv+0x6c>)
 8021b26:	f007 fb89 	bl	802923c <HAL_TIM_PWM_Start>
 8021b2a:	4603      	mov	r3, r0
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	bf14      	ite	ne
 8021b30:	2301      	movne	r3, #1
 8021b32:	2300      	moveq	r3, #0
 8021b34:	b2db      	uxtb	r3, r3
 8021b36:	2b00      	cmp	r3, #0
 8021b38:	d004      	beq.n	8021b44 <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 8021b3a:	4b0a      	ldr	r3, [pc, #40]	; (8021b64 <_ZN10LineSensor4InitEv+0x70>)
 8021b3c:	2201      	movs	r2, #1
 8021b3e:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021b40:	f002 f8b2 	bl	8023ca8 <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 8021b44:	4b06      	ldr	r3, [pc, #24]	; (8021b60 <_ZN10LineSensor4InitEv+0x6c>)
 8021b46:	681b      	ldr	r3, [r3, #0]
 8021b48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8021b4c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8021b4e:	bf00      	nop
 8021b50:	3708      	adds	r7, #8
 8021b52:	46bd      	mov	sp, r7
 8021b54:	bd80      	pop	{r7, pc}
 8021b56:	bf00      	nop
 8021b58:	20000798 	.word	0x20000798
 8021b5c:	200000b7 	.word	0x200000b7
 8021b60:	200007e0 	.word	0x200007e0
 8021b64:	200000b8 	.word	0x200000b8

08021b68 <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 8021b68:	b480      	push	{r7}
 8021b6a:	b085      	sub	sp, #20
 8021b6c:	af00      	add	r7, sp, #0
 8021b6e:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021b70:	2300      	movs	r3, #0
 8021b72:	60fb      	str	r3, [r7, #12]
 8021b74:	68fb      	ldr	r3, [r7, #12]
 8021b76:	2b0d      	cmp	r3, #13
 8021b78:	dc16      	bgt.n	8021ba8 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 8021b7a:	4b15      	ldr	r3, [pc, #84]	; (8021bd0 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021b7c:	781b      	ldrb	r3, [r3, #0]
 8021b7e:	4619      	mov	r1, r3
 8021b80:	687b      	ldr	r3, [r7, #4]
 8021b82:	68fa      	ldr	r2, [r7, #12]
 8021b84:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8021b88:	687a      	ldr	r2, [r7, #4]
 8021b8a:	460b      	mov	r3, r1
 8021b8c:	00db      	lsls	r3, r3, #3
 8021b8e:	1a5b      	subs	r3, r3, r1
 8021b90:	005b      	lsls	r3, r3, #1
 8021b92:	68f9      	ldr	r1, [r7, #12]
 8021b94:	440b      	add	r3, r1
 8021b96:	330c      	adds	r3, #12
 8021b98:	005b      	lsls	r3, r3, #1
 8021b9a:	4413      	add	r3, r2
 8021b9c:	4602      	mov	r2, r0
 8021b9e:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021ba0:	68fb      	ldr	r3, [r7, #12]
 8021ba2:	3301      	adds	r3, #1
 8021ba4:	60fb      	str	r3, [r7, #12]
 8021ba6:	e7e5      	b.n	8021b74 <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    times++;
 8021ba8:	4b09      	ldr	r3, [pc, #36]	; (8021bd0 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021baa:	781b      	ldrb	r3, [r3, #0]
 8021bac:	3301      	adds	r3, #1
 8021bae:	b2da      	uxtb	r2, r3
 8021bb0:	4b07      	ldr	r3, [pc, #28]	; (8021bd0 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021bb2:	701a      	strb	r2, [r3, #0]
    if(times >= CONSECUTIVE_TIMES) times = 0;
 8021bb4:	4b06      	ldr	r3, [pc, #24]	; (8021bd0 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021bb6:	781b      	ldrb	r3, [r3, #0]
 8021bb8:	2b09      	cmp	r3, #9
 8021bba:	d902      	bls.n	8021bc2 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5a>
 8021bbc:	4b04      	ldr	r3, [pc, #16]	; (8021bd0 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021bbe:	2200      	movs	r2, #0
 8021bc0:	701a      	strb	r2, [r3, #0]
}
 8021bc2:	bf00      	nop
 8021bc4:	3714      	adds	r7, #20
 8021bc6:	46bd      	mov	sp, r7
 8021bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bcc:	4770      	bx	lr
 8021bce:	bf00      	nop
 8021bd0:	2000003c 	.word	0x2000003c

08021bd4 <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 8021bd4:	b5b0      	push	{r4, r5, r7, lr}
 8021bd6:	b088      	sub	sp, #32
 8021bd8:	af00      	add	r7, sp, #0
 8021bda:	60f8      	str	r0, [r7, #12]
 8021bdc:	60b9      	str	r1, [r7, #8]
 8021bde:	4611      	mov	r1, r2
 8021be0:	461a      	mov	r2, r3
 8021be2:	460b      	mov	r3, r1
 8021be4:	71fb      	strb	r3, [r7, #7]
 8021be6:	4613      	mov	r3, r2
 8021be8:	71bb      	strb	r3, [r7, #6]

    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else                                     array[i] = temp_array[right--];
    }
 8021bea:	466b      	mov	r3, sp
 8021bec:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 8021bee:	79fa      	ldrb	r2, [r7, #7]
 8021bf0:	79bb      	ldrb	r3, [r7, #6]
 8021bf2:	429a      	cmp	r2, r3
 8021bf4:	f080 80ba 	bcs.w	8021d6c <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 8021bf8:	79b8      	ldrb	r0, [r7, #6]
 8021bfa:	61b8      	str	r0, [r7, #24]
 8021bfc:	4603      	mov	r3, r0
 8021bfe:	3301      	adds	r3, #1
 8021c00:	4619      	mov	r1, r3
 8021c02:	f04f 0200 	mov.w	r2, #0
 8021c06:	f04f 0300 	mov.w	r3, #0
 8021c0a:	f04f 0400 	mov.w	r4, #0
 8021c0e:	0114      	lsls	r4, r2, #4
 8021c10:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021c14:	010b      	lsls	r3, r1, #4
 8021c16:	4603      	mov	r3, r0
 8021c18:	3301      	adds	r3, #1
 8021c1a:	4619      	mov	r1, r3
 8021c1c:	f04f 0200 	mov.w	r2, #0
 8021c20:	f04f 0300 	mov.w	r3, #0
 8021c24:	f04f 0400 	mov.w	r4, #0
 8021c28:	0114      	lsls	r4, r2, #4
 8021c2a:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021c2e:	010b      	lsls	r3, r1, #4
 8021c30:	4603      	mov	r3, r0
 8021c32:	3301      	adds	r3, #1
 8021c34:	005b      	lsls	r3, r3, #1
 8021c36:	3301      	adds	r3, #1
 8021c38:	3307      	adds	r3, #7
 8021c3a:	08db      	lsrs	r3, r3, #3
 8021c3c:	00db      	lsls	r3, r3, #3
 8021c3e:	ebad 0d03 	sub.w	sp, sp, r3
 8021c42:	466b      	mov	r3, sp
 8021c44:	3301      	adds	r3, #1
 8021c46:	085b      	lsrs	r3, r3, #1
 8021c48:	005b      	lsls	r3, r3, #1
 8021c4a:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 8021c4c:	79fa      	ldrb	r2, [r7, #7]
 8021c4e:	79bb      	ldrb	r3, [r7, #6]
 8021c50:	4413      	add	r3, r2
 8021c52:	0fda      	lsrs	r2, r3, #31
 8021c54:	4413      	add	r3, r2
 8021c56:	105b      	asrs	r3, r3, #1
 8021c58:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 8021c5a:	7cfb      	ldrb	r3, [r7, #19]
 8021c5c:	79fa      	ldrb	r2, [r7, #7]
 8021c5e:	68b9      	ldr	r1, [r7, #8]
 8021c60:	68f8      	ldr	r0, [r7, #12]
 8021c62:	f7ff ffb7 	bl	8021bd4 <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 8021c66:	7cfb      	ldrb	r3, [r7, #19]
 8021c68:	3301      	adds	r3, #1
 8021c6a:	b2da      	uxtb	r2, r3
 8021c6c:	79bb      	ldrb	r3, [r7, #6]
 8021c6e:	68b9      	ldr	r1, [r7, #8]
 8021c70:	68f8      	ldr	r0, [r7, #12]
 8021c72:	f7ff ffaf 	bl	8021bd4 <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--)
 8021c76:	7cfb      	ldrb	r3, [r7, #19]
 8021c78:	77bb      	strb	r3, [r7, #30]
 8021c7a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021c7e:	79fb      	ldrb	r3, [r7, #7]
 8021c80:	429a      	cmp	r2, r3
 8021c82:	db11      	blt.n	8021ca8 <_ZN10LineSensor9MergeSortEPthh+0xd4>
        temp_array[i] = array[i];
 8021c84:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021c88:	005b      	lsls	r3, r3, #1
 8021c8a:	68ba      	ldr	r2, [r7, #8]
 8021c8c:	4413      	add	r3, r2
 8021c8e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021c92:	8819      	ldrh	r1, [r3, #0]
 8021c94:	697b      	ldr	r3, [r7, #20]
 8021c96:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle; i >= first_index; i--)
 8021c9a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021c9e:	b2db      	uxtb	r3, r3
 8021ca0:	3b01      	subs	r3, #1
 8021ca2:	b2db      	uxtb	r3, r3
 8021ca4:	77bb      	strb	r3, [r7, #30]
 8021ca6:	e7e8      	b.n	8021c7a <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 8021ca8:	7cfb      	ldrb	r3, [r7, #19]
 8021caa:	3301      	adds	r3, #1
 8021cac:	b2db      	uxtb	r3, r3
 8021cae:	77bb      	strb	r3, [r7, #30]
 8021cb0:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021cb4:	79bb      	ldrb	r3, [r7, #6]
 8021cb6:	429a      	cmp	r2, r3
 8021cb8:	dc17      	bgt.n	8021cea <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 8021cba:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021cbe:	005b      	lsls	r3, r3, #1
 8021cc0:	68ba      	ldr	r2, [r7, #8]
 8021cc2:	4413      	add	r3, r2
 8021cc4:	79b9      	ldrb	r1, [r7, #6]
 8021cc6:	f997 001e 	ldrsb.w	r0, [r7, #30]
 8021cca:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8021cce:	3201      	adds	r2, #1
 8021cd0:	1a82      	subs	r2, r0, r2
 8021cd2:	1a8a      	subs	r2, r1, r2
 8021cd4:	8819      	ldrh	r1, [r3, #0]
 8021cd6:	697b      	ldr	r3, [r7, #20]
 8021cd8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 8021cdc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021ce0:	b2db      	uxtb	r3, r3
 8021ce2:	3301      	adds	r3, #1
 8021ce4:	b2db      	uxtb	r3, r3
 8021ce6:	77bb      	strb	r3, [r7, #30]
 8021ce8:	e7e2      	b.n	8021cb0 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 8021cea:	79fb      	ldrb	r3, [r7, #7]
 8021cec:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 8021cee:	79bb      	ldrb	r3, [r7, #6]
 8021cf0:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 8021cf2:	79fb      	ldrb	r3, [r7, #7]
 8021cf4:	77bb      	strb	r3, [r7, #30]
 8021cf6:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021cfa:	79bb      	ldrb	r3, [r7, #6]
 8021cfc:	429a      	cmp	r2, r3
 8021cfe:	dc33      	bgt.n	8021d68 <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 8021d00:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021d04:	697b      	ldr	r3, [r7, #20]
 8021d06:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021d0a:	f997 101d 	ldrsb.w	r1, [r7, #29]
 8021d0e:	697b      	ldr	r3, [r7, #20]
 8021d10:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8021d14:	429a      	cmp	r2, r3
 8021d16:	d210      	bcs.n	8021d3a <_ZN10LineSensor9MergeSortEPthh+0x166>
 8021d18:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021d1c:	b2d3      	uxtb	r3, r2
 8021d1e:	3301      	adds	r3, #1
 8021d20:	b2db      	uxtb	r3, r3
 8021d22:	77fb      	strb	r3, [r7, #31]
 8021d24:	4611      	mov	r1, r2
 8021d26:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d2a:	005b      	lsls	r3, r3, #1
 8021d2c:	68ba      	ldr	r2, [r7, #8]
 8021d2e:	4413      	add	r3, r2
 8021d30:	697a      	ldr	r2, [r7, #20]
 8021d32:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021d36:	801a      	strh	r2, [r3, #0]
 8021d38:	e00f      	b.n	8021d5a <_ZN10LineSensor9MergeSortEPthh+0x186>
        else                                     array[i] = temp_array[right--];
 8021d3a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8021d3e:	b2d3      	uxtb	r3, r2
 8021d40:	3b01      	subs	r3, #1
 8021d42:	b2db      	uxtb	r3, r3
 8021d44:	777b      	strb	r3, [r7, #29]
 8021d46:	4611      	mov	r1, r2
 8021d48:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d4c:	005b      	lsls	r3, r3, #1
 8021d4e:	68ba      	ldr	r2, [r7, #8]
 8021d50:	4413      	add	r3, r2
 8021d52:	697a      	ldr	r2, [r7, #20]
 8021d54:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021d58:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 8021d5a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d5e:	b2db      	uxtb	r3, r3
 8021d60:	3301      	adds	r3, #1
 8021d62:	b2db      	uxtb	r3, r3
 8021d64:	77bb      	strb	r3, [r7, #30]
 8021d66:	e7c6      	b.n	8021cf6 <_ZN10LineSensor9MergeSortEPthh+0x122>
 8021d68:	46ad      	mov	sp, r5
 8021d6a:	e001      	b.n	8021d70 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 8021d6c:	bf00      	nop
 8021d6e:	46ad      	mov	sp, r5
}
 8021d70:	3720      	adds	r7, #32
 8021d72:	46bd      	mov	sp, r7
 8021d74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021d78 <_ZN10LineSensor6UpdateEv>:

void LineSensor::Update()
{
 8021d78:	b590      	push	{r4, r7, lr}
 8021d7a:	b08b      	sub	sp, #44	; 0x2c
 8021d7c:	af00      	add	r7, sp, #0
 8021d7e:	6078      	str	r0, [r7, #4]
    uint8_t i, j;
    uint16_t temp_array[CONSECUTIVE_TIMES];
    uint16_t median, max, min, normalized;
    bool emergency = true;
 8021d80:	2301      	movs	r3, #1
 8021d82:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021d86:	2300      	movs	r3, #0
 8021d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021d90:	2b0d      	cmp	r3, #13
 8021d92:	f200 80c8 	bhi.w	8021f26 <_ZN10LineSensor6UpdateEv+0x1ae>
    {
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021d96:	2300      	movs	r3, #0
 8021d98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021d9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021da0:	2b09      	cmp	r3, #9
 8021da2:	d81b      	bhi.n	8021ddc <_ZN10LineSensor6UpdateEv+0x64>
        {
            temp_array[j] = consecutive_line_sensors_buff_[j][i];
 8021da4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8021da8:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8021dac:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021db0:	6878      	ldr	r0, [r7, #4]
 8021db2:	4613      	mov	r3, r2
 8021db4:	00db      	lsls	r3, r3, #3
 8021db6:	1a9b      	subs	r3, r3, r2
 8021db8:	005b      	lsls	r3, r3, #1
 8021dba:	4423      	add	r3, r4
 8021dbc:	330c      	adds	r3, #12
 8021dbe:	005b      	lsls	r3, r3, #1
 8021dc0:	4403      	add	r3, r0
 8021dc2:	889a      	ldrh	r2, [r3, #4]
 8021dc4:	004b      	lsls	r3, r1, #1
 8021dc6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8021dca:	440b      	add	r3, r1
 8021dcc:	f823 2c20 	strh.w	r2, [r3, #-32]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021dd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021dd4:	3301      	adds	r3, #1
 8021dd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021dda:	e7df      	b.n	8021d9c <_ZN10LineSensor6UpdateEv+0x24>
        }

        MergeSort(temp_array, 0, CONSECUTIVE_TIMES-1);
 8021ddc:	f107 0108 	add.w	r1, r7, #8
 8021de0:	2309      	movs	r3, #9
 8021de2:	2200      	movs	r2, #0
 8021de4:	6878      	ldr	r0, [r7, #4]
 8021de6:	f7ff fef5 	bl	8021bd4 <_ZN10LineSensor9MergeSortEPthh>
        median = temp_array[HALF_CONSECUTIVE_TIMES];
 8021dea:	8a7b      	ldrh	r3, [r7, #18]
 8021dec:	83fb      	strh	r3, [r7, #30]

#ifdef DEBUG_MODE
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021dee:	2300      	movs	r3, #0
 8021df0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021df4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021df8:	2b09      	cmp	r3, #9
 8021dfa:	d81a      	bhi.n	8021e32 <_ZN10LineSensor6UpdateEv+0xba>
        {
            g_consecutive_line_buff[i][j] = temp_array[j];
 8021dfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021e00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021e04:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021e08:	005b      	lsls	r3, r3, #1
 8021e0a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8021e0e:	4403      	add	r3, r0
 8021e10:	f833 4c20 	ldrh.w	r4, [r3, #-32]
 8021e14:	4848      	ldr	r0, [pc, #288]	; (8021f38 <_ZN10LineSensor6UpdateEv+0x1c0>)
 8021e16:	4613      	mov	r3, r2
 8021e18:	009b      	lsls	r3, r3, #2
 8021e1a:	4413      	add	r3, r2
 8021e1c:	005b      	lsls	r3, r3, #1
 8021e1e:	440b      	add	r3, r1
 8021e20:	4622      	mov	r2, r4
 8021e22:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021e26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021e2a:	3301      	adds	r3, #1
 8021e2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021e30:	e7e0      	b.n	8021df4 <_ZN10LineSensor6UpdateEv+0x7c>
        }
#endif // DEBUG_MODE

        max = max_line_sensors_valu_[i];
 8021e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021e36:	687a      	ldr	r2, [r7, #4]
 8021e38:	3398      	adds	r3, #152	; 0x98
 8021e3a:	005b      	lsls	r3, r3, #1
 8021e3c:	4413      	add	r3, r2
 8021e3e:	889b      	ldrh	r3, [r3, #4]
 8021e40:	84bb      	strh	r3, [r7, #36]	; 0x24
        min = min_line_sensors_valu_[i];
 8021e42:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021e46:	687b      	ldr	r3, [r7, #4]
 8021e48:	32a8      	adds	r2, #168	; 0xa8
 8021e4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021e4e:	847b      	strh	r3, [r7, #34]	; 0x22
        if(max < median || max == 0) max = median;
 8021e50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021e52:	8bfb      	ldrh	r3, [r7, #30]
 8021e54:	429a      	cmp	r2, r3
 8021e56:	d302      	bcc.n	8021e5e <_ZN10LineSensor6UpdateEv+0xe6>
 8021e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021e5a:	2b00      	cmp	r3, #0
 8021e5c:	d101      	bne.n	8021e62 <_ZN10LineSensor6UpdateEv+0xea>
 8021e5e:	8bfb      	ldrh	r3, [r7, #30]
 8021e60:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(min > median || min == 0) min = median;
 8021e62:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021e64:	8bfb      	ldrh	r3, [r7, #30]
 8021e66:	429a      	cmp	r2, r3
 8021e68:	d802      	bhi.n	8021e70 <_ZN10LineSensor6UpdateEv+0xf8>
 8021e6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021e6c:	2b00      	cmp	r3, #0
 8021e6e:	d101      	bne.n	8021e74 <_ZN10LineSensor6UpdateEv+0xfc>
 8021e70:	8bfb      	ldrh	r3, [r7, #30]
 8021e72:	847b      	strh	r3, [r7, #34]	; 0x22
        max_line_sensors_valu_[i] = max;
 8021e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021e78:	687a      	ldr	r2, [r7, #4]
 8021e7a:	3398      	adds	r3, #152	; 0x98
 8021e7c:	005b      	lsls	r3, r3, #1
 8021e7e:	4413      	add	r3, r2
 8021e80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021e82:	809a      	strh	r2, [r3, #4]
        min_line_sensors_valu_[i] = min;
 8021e84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	32a8      	adds	r2, #168	; 0xa8
 8021e8c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8021e8e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

#ifdef DEBUG_MODE
        g_max_line_valu[i] = max_line_sensors_valu_[i];
 8021e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021e96:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021e9a:	6879      	ldr	r1, [r7, #4]
 8021e9c:	3398      	adds	r3, #152	; 0x98
 8021e9e:	005b      	lsls	r3, r3, #1
 8021ea0:	440b      	add	r3, r1
 8021ea2:	8899      	ldrh	r1, [r3, #4]
 8021ea4:	4b25      	ldr	r3, [pc, #148]	; (8021f3c <_ZN10LineSensor6UpdateEv+0x1c4>)
 8021ea6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_min_line_valu[i] = min_line_sensors_valu_[i];
 8021eaa:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8021eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021eb2:	687a      	ldr	r2, [r7, #4]
 8021eb4:	31a8      	adds	r1, #168	; 0xa8
 8021eb6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8021eba:	4a21      	ldr	r2, [pc, #132]	; (8021f40 <_ZN10LineSensor6UpdateEv+0x1c8>)
 8021ebc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#endif // DEBUG_MODE

        if(max > min)
 8021ec0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021ec2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021ec4:	429a      	cmp	r2, r3
 8021ec6:	d928      	bls.n	8021f1a <_ZN10LineSensor6UpdateEv+0x1a2>
        {
            normalized = MAX_NORMALIZED_VALU * (median - min) / (max - min);
 8021ec8:	8bfa      	ldrh	r2, [r7, #30]
 8021eca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021ecc:	1ad3      	subs	r3, r2, r3
 8021ece:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8021ed2:	fb02 f203 	mul.w	r2, r2, r3
 8021ed6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8021ed8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021eda:	1acb      	subs	r3, r1, r3
 8021edc:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ee0:	83bb      	strh	r3, [r7, #28]
            line_sensors_valu_[i] = normalized;
 8021ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ee6:	687a      	ldr	r2, [r7, #4]
 8021ee8:	33b4      	adds	r3, #180	; 0xb4
 8021eea:	005b      	lsls	r3, r3, #1
 8021eec:	4413      	add	r3, r2
 8021eee:	8bba      	ldrh	r2, [r7, #28]
 8021ef0:	809a      	strh	r2, [r3, #4]

#ifdef DEBUG_MODE
            g_line_valu[i] = line_sensors_valu_[i];
 8021ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ef6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021efa:	6879      	ldr	r1, [r7, #4]
 8021efc:	33b4      	adds	r3, #180	; 0xb4
 8021efe:	005b      	lsls	r3, r3, #1
 8021f00:	440b      	add	r3, r1
 8021f02:	8899      	ldrh	r1, [r3, #4]
 8021f04:	4b0f      	ldr	r3, [pc, #60]	; (8021f44 <_ZN10LineSensor6UpdateEv+0x1cc>)
 8021f06:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
#endif // DEBUG_MODE

            if(normalized < EMERGENCY_STOP_BORDER) emergency = false;
 8021f0a:	8bbb      	ldrh	r3, [r7, #28]
 8021f0c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8021f10:	4293      	cmp	r3, r2
 8021f12:	d802      	bhi.n	8021f1a <_ZN10LineSensor6UpdateEv+0x1a2>
 8021f14:	2300      	movs	r3, #0
 8021f16:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021f1e:	3301      	adds	r3, #1
 8021f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021f24:	e732      	b.n	8021d8c <_ZN10LineSensor6UpdateEv+0x14>
        }
    }
    emergency_stop_flag_ = emergency;
 8021f26:	687b      	ldr	r3, [r7, #4]
 8021f28:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8021f2c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
}
 8021f30:	bf00      	nop
 8021f32:	372c      	adds	r7, #44	; 0x2c
 8021f34:	46bd      	mov	sp, r7
 8021f36:	bd90      	pop	{r4, r7, pc}
 8021f38:	200000c0 	.word	0x200000c0
 8021f3c:	200001d8 	.word	0x200001d8
 8021f40:	200001f4 	.word	0x200001f4
 8021f44:	20000210 	.word	0x20000210

08021f48 <_ZN10LineSensor19LeftRightDifferenceEv>:

float LineSensor::LeftRightDifference()
{
 8021f48:	b5b0      	push	{r4, r5, r7, lr}
 8021f4a:	b086      	sub	sp, #24
 8021f4c:	af00      	add	r7, sp, #0
 8021f4e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t left = 0, right = 0;
 8021f50:	2300      	movs	r3, #0
 8021f52:	613b      	str	r3, [r7, #16]
 8021f54:	2300      	movs	r3, #0
 8021f56:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 8021f58:	2300      	movs	r3, #0
 8021f5a:	75fb      	strb	r3, [r7, #23]
 8021f5c:	7dfb      	ldrb	r3, [r7, #23]
 8021f5e:	2b06      	cmp	r3, #6
 8021f60:	d80d      	bhi.n	8021f7e <_ZN10LineSensor19LeftRightDifferenceEv+0x36>
    {
        left += line_sensors_valu_[i];
 8021f62:	7dfb      	ldrb	r3, [r7, #23]
 8021f64:	687a      	ldr	r2, [r7, #4]
 8021f66:	33b4      	adds	r3, #180	; 0xb4
 8021f68:	005b      	lsls	r3, r3, #1
 8021f6a:	4413      	add	r3, r2
 8021f6c:	889b      	ldrh	r3, [r3, #4]
 8021f6e:	461a      	mov	r2, r3
 8021f70:	693b      	ldr	r3, [r7, #16]
 8021f72:	4413      	add	r3, r2
 8021f74:	613b      	str	r3, [r7, #16]
    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 8021f76:	7dfb      	ldrb	r3, [r7, #23]
 8021f78:	3301      	adds	r3, #1
 8021f7a:	75fb      	strb	r3, [r7, #23]
 8021f7c:	e7ee      	b.n	8021f5c <_ZN10LineSensor19LeftRightDifferenceEv+0x14>
    }
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8021f7e:	2307      	movs	r3, #7
 8021f80:	75fb      	strb	r3, [r7, #23]
 8021f82:	7dfb      	ldrb	r3, [r7, #23]
 8021f84:	2b0d      	cmp	r3, #13
 8021f86:	d80d      	bhi.n	8021fa4 <_ZN10LineSensor19LeftRightDifferenceEv+0x5c>
    {
        right += line_sensors_valu_[i];
 8021f88:	7dfb      	ldrb	r3, [r7, #23]
 8021f8a:	687a      	ldr	r2, [r7, #4]
 8021f8c:	33b4      	adds	r3, #180	; 0xb4
 8021f8e:	005b      	lsls	r3, r3, #1
 8021f90:	4413      	add	r3, r2
 8021f92:	889b      	ldrh	r3, [r3, #4]
 8021f94:	461a      	mov	r2, r3
 8021f96:	68fb      	ldr	r3, [r7, #12]
 8021f98:	4413      	add	r3, r2
 8021f9a:	60fb      	str	r3, [r7, #12]
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8021f9c:	7dfb      	ldrb	r3, [r7, #23]
 8021f9e:	3301      	adds	r3, #1
 8021fa0:	75fb      	strb	r3, [r7, #23]
 8021fa2:	e7ee      	b.n	8021f82 <_ZN10LineSensor19LeftRightDifferenceEv+0x3a>
    }

#ifdef DEBUG_MODE
    g_line_left = left;
 8021fa4:	4a11      	ldr	r2, [pc, #68]	; (8021fec <_ZN10LineSensor19LeftRightDifferenceEv+0xa4>)
 8021fa6:	693b      	ldr	r3, [r7, #16]
 8021fa8:	6013      	str	r3, [r2, #0]
    g_line_right = right;
 8021faa:	4a11      	ldr	r2, [pc, #68]	; (8021ff0 <_ZN10LineSensor19LeftRightDifferenceEv+0xa8>)
 8021fac:	68fb      	ldr	r3, [r7, #12]
 8021fae:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float difference = right * LINE_SENSOR_CORRECTION - left;
 8021fb0:	68f8      	ldr	r0, [r7, #12]
 8021fb2:	f7fe f987 	bl	80202c4 <__aeabi_ui2d>
 8021fb6:	4604      	mov	r4, r0
 8021fb8:	460d      	mov	r5, r1
 8021fba:	6938      	ldr	r0, [r7, #16]
 8021fbc:	f7fe f982 	bl	80202c4 <__aeabi_ui2d>
 8021fc0:	4602      	mov	r2, r0
 8021fc2:	460b      	mov	r3, r1
 8021fc4:	4620      	mov	r0, r4
 8021fc6:	4629      	mov	r1, r5
 8021fc8:	f7fe f83e 	bl	8020048 <__aeabi_dsub>
 8021fcc:	4603      	mov	r3, r0
 8021fce:	460c      	mov	r4, r1
 8021fd0:	4618      	mov	r0, r3
 8021fd2:	4621      	mov	r1, r4
 8021fd4:	f7fe fc8a 	bl	80208ec <__aeabi_d2f>
 8021fd8:	4603      	mov	r3, r0
 8021fda:	60bb      	str	r3, [r7, #8]

    return difference;
 8021fdc:	68bb      	ldr	r3, [r7, #8]
 8021fde:	ee07 3a90 	vmov	s15, r3
}
 8021fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8021fe6:	3718      	adds	r7, #24
 8021fe8:	46bd      	mov	sp, r7
 8021fea:	bdb0      	pop	{r4, r5, r7, pc}
 8021fec:	2000022c 	.word	0x2000022c
 8021ff0:	20000230 	.word	0x20000230

08021ff4 <_ZN10LineSensor20GetEmergencyStopFlagEv>:

bool LineSensor::GetEmergencyStopFlag()
{
 8021ff4:	b480      	push	{r7}
 8021ff6:	b083      	sub	sp, #12
 8021ff8:	af00      	add	r7, sp, #0
 8021ffa:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
}
 8022002:	4618      	mov	r0, r3
 8022004:	370c      	adds	r7, #12
 8022006:	46bd      	mov	sp, r7
 8022008:	f85d 7b04 	ldr.w	r7, [sp], #4
 802200c:	4770      	bx	lr
	...

08022010 <_ZN10LineSensor16CheckCalibrationEv>:

bool LineSensor::CheckCalibration()
{
 8022010:	b480      	push	{r7}
 8022012:	b085      	sub	sp, #20
 8022014:	af00      	add	r7, sp, #0
 8022016:	6078      	str	r0, [r7, #4]
    static uint16_t timer = 0;
    static uint16_t pre_max[NUM_OF_LINE_SENSORS] = {0};
    static uint16_t pre_min[NUM_OF_LINE_SENSORS] = {0};
    uint16_t max, min;
    bool result = true;
 8022018:	2301      	movs	r3, #1
 802201a:	73fb      	strb	r3, [r7, #15]

    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802201c:	2300      	movs	r3, #0
 802201e:	73bb      	strb	r3, [r7, #14]
 8022020:	7bbb      	ldrb	r3, [r7, #14]
 8022022:	2b0d      	cmp	r3, #13
 8022024:	d82d      	bhi.n	8022082 <_ZN10LineSensor16CheckCalibrationEv+0x72>
    {
        max = max_line_sensors_valu_[i];
 8022026:	7bbb      	ldrb	r3, [r7, #14]
 8022028:	687a      	ldr	r2, [r7, #4]
 802202a:	3398      	adds	r3, #152	; 0x98
 802202c:	005b      	lsls	r3, r3, #1
 802202e:	4413      	add	r3, r2
 8022030:	889b      	ldrh	r3, [r3, #4]
 8022032:	81bb      	strh	r3, [r7, #12]
        min = min_line_sensors_valu_[i];
 8022034:	7bba      	ldrb	r2, [r7, #14]
 8022036:	687b      	ldr	r3, [r7, #4]
 8022038:	32a8      	adds	r2, #168	; 0xa8
 802203a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802203e:	817b      	strh	r3, [r7, #10]

        if(pre_max[i] != max)      result = false;
 8022040:	7bbb      	ldrb	r3, [r7, #14]
 8022042:	4a1e      	ldr	r2, [pc, #120]	; (80220bc <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 8022044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8022048:	89ba      	ldrh	r2, [r7, #12]
 802204a:	429a      	cmp	r2, r3
 802204c:	d002      	beq.n	8022054 <_ZN10LineSensor16CheckCalibrationEv+0x44>
 802204e:	2300      	movs	r3, #0
 8022050:	73fb      	strb	r3, [r7, #15]
 8022052:	e008      	b.n	8022066 <_ZN10LineSensor16CheckCalibrationEv+0x56>
        else if(pre_min[i] != min) result = false;
 8022054:	7bbb      	ldrb	r3, [r7, #14]
 8022056:	4a1a      	ldr	r2, [pc, #104]	; (80220c0 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 8022058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802205c:	897a      	ldrh	r2, [r7, #10]
 802205e:	429a      	cmp	r2, r3
 8022060:	d001      	beq.n	8022066 <_ZN10LineSensor16CheckCalibrationEv+0x56>
 8022062:	2300      	movs	r3, #0
 8022064:	73fb      	strb	r3, [r7, #15]

        pre_max[i] = max;
 8022066:	7bbb      	ldrb	r3, [r7, #14]
 8022068:	4914      	ldr	r1, [pc, #80]	; (80220bc <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 802206a:	89ba      	ldrh	r2, [r7, #12]
 802206c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        pre_min[i] = min;
 8022070:	7bbb      	ldrb	r3, [r7, #14]
 8022072:	4913      	ldr	r1, [pc, #76]	; (80220c0 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 8022074:	897a      	ldrh	r2, [r7, #10]
 8022076:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802207a:	7bbb      	ldrb	r3, [r7, #14]
 802207c:	3301      	adds	r3, #1
 802207e:	73bb      	strb	r3, [r7, #14]
 8022080:	e7ce      	b.n	8022020 <_ZN10LineSensor16CheckCalibrationEv+0x10>
    }

    if(result)
 8022082:	7bfb      	ldrb	r3, [r7, #15]
 8022084:	2b00      	cmp	r3, #0
 8022086:	d00e      	beq.n	80220a6 <_ZN10LineSensor16CheckCalibrationEv+0x96>
    {
        if(timer < CALIBRATION_SUCCESS_TIME)
 8022088:	4b0e      	ldr	r3, [pc, #56]	; (80220c4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802208a:	881b      	ldrh	r3, [r3, #0]
 802208c:	f240 52db 	movw	r2, #1499	; 0x5db
 8022090:	4293      	cmp	r3, r2
 8022092:	d80b      	bhi.n	80220ac <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        {
            timer++;
 8022094:	4b0b      	ldr	r3, [pc, #44]	; (80220c4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8022096:	881b      	ldrh	r3, [r3, #0]
 8022098:	3301      	adds	r3, #1
 802209a:	b29a      	uxth	r2, r3
 802209c:	4b09      	ldr	r3, [pc, #36]	; (80220c4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802209e:	801a      	strh	r2, [r3, #0]
            result = false;
 80220a0:	2300      	movs	r3, #0
 80220a2:	73fb      	strb	r3, [r7, #15]
 80220a4:	e002      	b.n	80220ac <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        }
    }
    else timer = 0;
 80220a6:	4b07      	ldr	r3, [pc, #28]	; (80220c4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 80220a8:	2200      	movs	r2, #0
 80220aa:	801a      	strh	r2, [r3, #0]
    
    return result;
 80220ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80220ae:	4618      	mov	r0, r3
 80220b0:	3714      	adds	r7, #20
 80220b2:	46bd      	mov	sp, r7
 80220b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220b8:	4770      	bx	lr
 80220ba:	bf00      	nop
 80220bc:	20000040 	.word	0x20000040
 80220c0:	2000005c 	.word	0x2000005c
 80220c4:	2000003e 	.word	0x2000003e

080220c8 <_ZN9LineTraceC1EP10LineSensor>:
#include "line_trace.hpp"

LineTrace::LineTrace(LineSensor *line_sensor) : integral_error_(0)
 80220c8:	b480      	push	{r7}
 80220ca:	b083      	sub	sp, #12
 80220cc:	af00      	add	r7, sp, #0
 80220ce:	6078      	str	r0, [r7, #4]
 80220d0:	6039      	str	r1, [r7, #0]
 80220d2:	687b      	ldr	r3, [r7, #4]
 80220d4:	f04f 0200 	mov.w	r2, #0
 80220d8:	601a      	str	r2, [r3, #0]
{
    line_sensor_ = line_sensor;
 80220da:	687b      	ldr	r3, [r7, #4]
 80220dc:	683a      	ldr	r2, [r7, #0]
 80220de:	605a      	str	r2, [r3, #4]
}
 80220e0:	687b      	ldr	r3, [r7, #4]
 80220e2:	4618      	mov	r0, r3
 80220e4:	370c      	adds	r7, #12
 80220e6:	46bd      	mov	sp, r7
 80220e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220ec:	4770      	bx	lr
	...

080220f0 <_ZN9LineTrace13LineTraceOnlyEv>:

float LineTrace::LineTraceOnly()
{
 80220f0:	b580      	push	{r7, lr}
 80220f2:	b086      	sub	sp, #24
 80220f4:	af00      	add	r7, sp, #0
 80220f6:	6078      	str	r0, [r7, #4]
    float p_gain = LINE_ONLY_P_GAIN;
 80220f8:	4b0b      	ldr	r3, [pc, #44]	; (8022128 <_ZN9LineTrace13LineTraceOnlyEv+0x38>)
 80220fa:	617b      	str	r3, [r7, #20]
    float i_gain = LINE_ONLY_I_GAIN;
 80220fc:	f04f 0300 	mov.w	r3, #0
 8022100:	613b      	str	r3, [r7, #16]
    float d_gain = LINE_ONLY_D_GAIN;
 8022102:	f04f 0300 	mov.w	r3, #0
 8022106:	60fb      	str	r3, [r7, #12]

    return PidControl(p_gain, i_gain, d_gain);
 8022108:	ed97 1a03 	vldr	s2, [r7, #12]
 802210c:	edd7 0a04 	vldr	s1, [r7, #16]
 8022110:	ed97 0a05 	vldr	s0, [r7, #20]
 8022114:	6878      	ldr	r0, [r7, #4]
 8022116:	f000 f84f 	bl	80221b8 <_ZN9LineTrace10PidControlEfff>
 802211a:	eef0 7a40 	vmov.f32	s15, s0
}
 802211e:	eeb0 0a67 	vmov.f32	s0, s15
 8022122:	3718      	adds	r7, #24
 8022124:	46bd      	mov	sp, r7
 8022126:	bd80      	pop	{r7, pc}
 8022128:	38d1b717 	.word	0x38d1b717

0802212c <_ZN9LineTrace16DeterminePidGainEf>:

float LineTrace::DeterminePidGain(float target_velocity)
{
 802212c:	b580      	push	{r7, lr}
 802212e:	b086      	sub	sp, #24
 8022130:	af00      	add	r7, sp, #0
 8022132:	6078      	str	r0, [r7, #4]
 8022134:	ed87 0a00 	vstr	s0, [r7]
    float p_gain, i_gain, d_gain;

    if(target_velocity < TARGET_VELOCITY_0)
 8022138:	edd7 7a00 	vldr	s15, [r7]
 802213c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8022140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022148:	d508      	bpl.n	802215c <_ZN9LineTrace16DeterminePidGainEf+0x30>
    {
        p_gain = LINE_P_GAIN_0;
 802214a:	4b1a      	ldr	r3, [pc, #104]	; (80221b4 <_ZN9LineTrace16DeterminePidGainEf+0x88>)
 802214c:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_0;
 802214e:	f04f 0300 	mov.w	r3, #0
 8022152:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_0;
 8022154:	f04f 0300 	mov.w	r3, #0
 8022158:	60fb      	str	r3, [r7, #12]
 802215a:	e01b      	b.n	8022194 <_ZN9LineTrace16DeterminePidGainEf+0x68>
    }
    else if(target_velocity < TARGET_VELOCITY_1)
 802215c:	edd7 7a00 	vldr	s15, [r7]
 8022160:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8022164:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802216c:	d509      	bpl.n	8022182 <_ZN9LineTrace16DeterminePidGainEf+0x56>
    {
        p_gain = LINE_P_GAIN_1;
 802216e:	f04f 0300 	mov.w	r3, #0
 8022172:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_1;
 8022174:	f04f 0300 	mov.w	r3, #0
 8022178:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_1;
 802217a:	f04f 0300 	mov.w	r3, #0
 802217e:	60fb      	str	r3, [r7, #12]
 8022180:	e008      	b.n	8022194 <_ZN9LineTrace16DeterminePidGainEf+0x68>
    }
    else // Error handler
    {
        p_gain = 0;
 8022182:	f04f 0300 	mov.w	r3, #0
 8022186:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 8022188:	f04f 0300 	mov.w	r3, #0
 802218c:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 802218e:	f04f 0300 	mov.w	r3, #0
 8022192:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(p_gain, i_gain, d_gain);
 8022194:	ed97 1a03 	vldr	s2, [r7, #12]
 8022198:	edd7 0a04 	vldr	s1, [r7, #16]
 802219c:	ed97 0a05 	vldr	s0, [r7, #20]
 80221a0:	6878      	ldr	r0, [r7, #4]
 80221a2:	f000 f809 	bl	80221b8 <_ZN9LineTrace10PidControlEfff>
 80221a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80221aa:	eeb0 0a67 	vmov.f32	s0, s15
 80221ae:	3718      	adds	r7, #24
 80221b0:	46bd      	mov	sp, r7
 80221b2:	bd80      	pop	{r7, pc}
 80221b4:	3a03126f 	.word	0x3a03126f

080221b8 <_ZN9LineTrace10PidControlEfff>:

float LineTrace::PidControl(float p_gain, float i_gain, float d_gain)
{
 80221b8:	b590      	push	{r4, r7, lr}
 80221ba:	b08b      	sub	sp, #44	; 0x2c
 80221bc:	af00      	add	r7, sp, #0
 80221be:	60f8      	str	r0, [r7, #12]
 80221c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80221c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80221c8:	ed87 1a00 	vstr	s2, [r7]
    static float pre_error = line_sensor_->LeftRightDifference();
 80221cc:	4b52      	ldr	r3, [pc, #328]	; (8022318 <_ZN9LineTrace10PidControlEfff+0x160>)
 80221ce:	781b      	ldrb	r3, [r3, #0]
 80221d0:	f3bf 8f5b 	dmb	ish
 80221d4:	b2db      	uxtb	r3, r3
 80221d6:	f003 0301 	and.w	r3, r3, #1
 80221da:	2b00      	cmp	r3, #0
 80221dc:	bf0c      	ite	eq
 80221de:	2301      	moveq	r3, #1
 80221e0:	2300      	movne	r3, #0
 80221e2:	b2db      	uxtb	r3, r3
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	d017      	beq.n	8022218 <_ZN9LineTrace10PidControlEfff+0x60>
 80221e8:	484b      	ldr	r0, [pc, #300]	; (8022318 <_ZN9LineTrace10PidControlEfff+0x160>)
 80221ea:	f007 ffcf 	bl	802a18c <__cxa_guard_acquire>
 80221ee:	4603      	mov	r3, r0
 80221f0:	2b00      	cmp	r3, #0
 80221f2:	bf14      	ite	ne
 80221f4:	2301      	movne	r3, #1
 80221f6:	2300      	moveq	r3, #0
 80221f8:	b2db      	uxtb	r3, r3
 80221fa:	2b00      	cmp	r3, #0
 80221fc:	d00c      	beq.n	8022218 <_ZN9LineTrace10PidControlEfff+0x60>
 80221fe:	68fb      	ldr	r3, [r7, #12]
 8022200:	685b      	ldr	r3, [r3, #4]
 8022202:	4618      	mov	r0, r3
 8022204:	f7ff fea0 	bl	8021f48 <_ZN10LineSensor19LeftRightDifferenceEv>
 8022208:	eef0 7a40 	vmov.f32	s15, s0
 802220c:	4b43      	ldr	r3, [pc, #268]	; (802231c <_ZN9LineTrace10PidControlEfff+0x164>)
 802220e:	edc3 7a00 	vstr	s15, [r3]
 8022212:	4841      	ldr	r0, [pc, #260]	; (8022318 <_ZN9LineTrace10PidControlEfff+0x160>)
 8022214:	f007 ffc6 	bl	802a1a4 <__cxa_guard_release>
    float error, differential_error, integral_error;
    float p, d, i;

    error = line_sensor_->LeftRightDifference();
 8022218:	68fb      	ldr	r3, [r7, #12]
 802221a:	685b      	ldr	r3, [r3, #4]
 802221c:	4618      	mov	r0, r3
 802221e:	f7ff fe93 	bl	8021f48 <_ZN10LineSensor19LeftRightDifferenceEv>
 8022222:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    differential_error = (error - pre_error) / TIM6_PERIOD_S;
 8022226:	4b3d      	ldr	r3, [pc, #244]	; (802231c <_ZN9LineTrace10PidControlEfff+0x164>)
 8022228:	edd3 7a00 	vldr	s15, [r3]
 802222c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8022230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022234:	ee17 0a90 	vmov	r0, s15
 8022238:	f7fe f866 	bl	8020308 <__aeabi_f2d>
 802223c:	a334      	add	r3, pc, #208	; (adr r3, 8022310 <_ZN9LineTrace10PidControlEfff+0x158>)
 802223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022242:	f7fe f9e3 	bl	802060c <__aeabi_ddiv>
 8022246:	4603      	mov	r3, r0
 8022248:	460c      	mov	r4, r1
 802224a:	4618      	mov	r0, r3
 802224c:	4621      	mov	r1, r4
 802224e:	f7fe fb4d 	bl	80208ec <__aeabi_d2f>
 8022252:	4603      	mov	r3, r0
 8022254:	623b      	str	r3, [r7, #32]
    integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 8022256:	4b31      	ldr	r3, [pc, #196]	; (802231c <_ZN9LineTrace10PidControlEfff+0x164>)
 8022258:	ed93 7a00 	vldr	s14, [r3]
 802225c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8022260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022264:	ee17 0a90 	vmov	r0, s15
 8022268:	f7fe f84e 	bl	8020308 <__aeabi_f2d>
 802226c:	f04f 0200 	mov.w	r2, #0
 8022270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8022274:	f7fe f9ca 	bl	802060c <__aeabi_ddiv>
 8022278:	4603      	mov	r3, r0
 802227a:	460c      	mov	r4, r1
 802227c:	4618      	mov	r0, r3
 802227e:	4621      	mov	r1, r4
 8022280:	a323      	add	r3, pc, #140	; (adr r3, 8022310 <_ZN9LineTrace10PidControlEfff+0x158>)
 8022282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022286:	f7fe f897 	bl	80203b8 <__aeabi_dmul>
 802228a:	4603      	mov	r3, r0
 802228c:	460c      	mov	r4, r1
 802228e:	4618      	mov	r0, r3
 8022290:	4621      	mov	r1, r4
 8022292:	f7fe fb2b 	bl	80208ec <__aeabi_d2f>
 8022296:	4603      	mov	r3, r0
 8022298:	61fb      	str	r3, [r7, #28]
    SetIntegralError(integral_error);
 802229a:	ed97 0a07 	vldr	s0, [r7, #28]
 802229e:	68f8      	ldr	r0, [r7, #12]
 80222a0:	f000 f844 	bl	802232c <_ZN9LineTrace16SetIntegralErrorEf>

    p = p_gain * error;
 80222a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80222a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80222ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80222b0:	edc7 7a06 	vstr	s15, [r7, #24]
    d = d_gain * differential_error;
 80222b4:	ed97 7a00 	vldr	s14, [r7]
 80222b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80222bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80222c0:	edc7 7a05 	vstr	s15, [r7, #20]
    i = i_gain * integral_error_;
 80222c4:	68fb      	ldr	r3, [r7, #12]
 80222c6:	edd3 7a00 	vldr	s15, [r3]
 80222ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80222ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80222d2:	edc7 7a04 	vstr	s15, [r7, #16]

#ifdef DEBUG_MODE
    g_trace_p = p;
 80222d6:	4a12      	ldr	r2, [pc, #72]	; (8022320 <_ZN9LineTrace10PidControlEfff+0x168>)
 80222d8:	69bb      	ldr	r3, [r7, #24]
 80222da:	6013      	str	r3, [r2, #0]
    g_trace_d = d;
 80222dc:	4a11      	ldr	r2, [pc, #68]	; (8022324 <_ZN9LineTrace10PidControlEfff+0x16c>)
 80222de:	697b      	ldr	r3, [r7, #20]
 80222e0:	6013      	str	r3, [r2, #0]
    g_trace_i = i;
 80222e2:	4a11      	ldr	r2, [pc, #68]	; (8022328 <_ZN9LineTrace10PidControlEfff+0x170>)
 80222e4:	693b      	ldr	r3, [r7, #16]
 80222e6:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    pre_error = error;
 80222e8:	4a0c      	ldr	r2, [pc, #48]	; (802231c <_ZN9LineTrace10PidControlEfff+0x164>)
 80222ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222ec:	6013      	str	r3, [r2, #0]

    return p + d + i;
 80222ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80222f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80222f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80222fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80222fe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8022302:	eeb0 0a67 	vmov.f32	s0, s15
 8022306:	372c      	adds	r7, #44	; 0x2c
 8022308:	46bd      	mov	sp, r7
 802230a:	bd90      	pop	{r4, r7, pc}
 802230c:	f3af 8000 	nop.w
 8022310:	47ae147b 	.word	0x47ae147b
 8022314:	3f547ae1 	.word	0x3f547ae1
 8022318:	2000007c 	.word	0x2000007c
 802231c:	20000078 	.word	0x20000078
 8022320:	20000288 	.word	0x20000288
 8022324:	20000290 	.word	0x20000290
 8022328:	2000028c 	.word	0x2000028c

0802232c <_ZN9LineTrace16SetIntegralErrorEf>:

void LineTrace::SetIntegralError(float integral_error)
{
 802232c:	b480      	push	{r7}
 802232e:	b083      	sub	sp, #12
 8022330:	af00      	add	r7, sp, #0
 8022332:	6078      	str	r0, [r7, #4]
 8022334:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8022338:	687b      	ldr	r3, [r7, #4]
 802233a:	ed93 7a00 	vldr	s14, [r3]
 802233e:	edd7 7a00 	vldr	s15, [r7]
 8022342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022346:	687b      	ldr	r3, [r7, #4]
 8022348:	edc3 7a00 	vstr	s15, [r3]
}
 802234c:	bf00      	nop
 802234e:	370c      	adds	r7, #12
 8022350:	46bd      	mov	sp, r7
 8022352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022356:	4770      	bx	lr

08022358 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8022358:	b480      	push	{r7}
 802235a:	b083      	sub	sp, #12
 802235c:	af00      	add	r7, sp, #0
 802235e:	ed87 0a01 	vstr	s0, [r7, #4]
 8022362:	edd7 7a01 	vldr	s15, [r7, #4]
 8022366:	eef0 7ae7 	vabs.f32	s15, s15
 802236a:	eeb0 0a67 	vmov.f32	s0, s15
 802236e:	370c      	adds	r7, #12
 8022370:	46bd      	mov	sp, r7
 8022372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022376:	4770      	bx	lr

08022378 <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() {}
 8022378:	b580      	push	{r7, lr}
 802237a:	b082      	sub	sp, #8
 802237c:	af00      	add	r7, sp, #0
 802237e:	6078      	str	r0, [r7, #4]
 8022380:	687b      	ldr	r3, [r7, #4]
 8022382:	33e8      	adds	r3, #232	; 0xe8
 8022384:	4618      	mov	r0, r3
 8022386:	f7fe fcc5 	bl	8020d14 <_ZN7EncoderC1Ev>
 802238a:	687b      	ldr	r3, [r7, #4]
 802238c:	33f8      	adds	r3, #248	; 0xf8
 802238e:	4618      	mov	r0, r3
 8022390:	f7fe ffa2 	bl	80212d8 <_ZN8Iim42652C1Ev>
 8022394:	687b      	ldr	r3, [r7, #4]
 8022396:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802239a:	4618      	mov	r0, r3
 802239c:	f002 fcee 	bl	8024d7c <_ZN10SideSensorC1Ev>
 80223a0:	687b      	ldr	r3, [r7, #4]
 80223a2:	4618      	mov	r0, r3
 80223a4:	3708      	adds	r7, #8
 80223a6:	46bd      	mov	sp, r7
 80223a8:	bd80      	pop	{r7, pc}
 80223aa:	0000      	movs	r0, r0
 80223ac:	0000      	movs	r0, r0
	...

080223b0 <_ZN6Logger7LoggingEh>:
    side_sensor_ = side_sensor;
}
*/

void Logger::Logging(uint8_t process_complete)
{
 80223b0:	b5b0      	push	{r4, r5, r7, lr}
 80223b2:	b08c      	sub	sp, #48	; 0x30
 80223b4:	af00      	add	r7, sp, #0
 80223b6:	6078      	str	r0, [r7, #4]
 80223b8:	460b      	mov	r3, r1
 80223ba:	70fb      	strb	r3, [r7, #3]
    float distance = encoder.GetDistanceStack();
 80223bc:	687b      	ldr	r3, [r7, #4]
 80223be:	33e8      	adds	r3, #232	; 0xe8
 80223c0:	4618      	mov	r0, r3
 80223c2:	f7fe fd92 	bl	8020eea <_ZN7Encoder16GetDistanceStackEv>
 80223c6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    if(distance < LOGGING_CONST_DISTANCE) return;
 80223ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80223ce:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80223d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80223d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223da:	f100 81f5 	bmi.w	80227c8 <_ZN6Logger7LoggingEh+0x418>
    encoder.ResetDistanceStack();
 80223de:	687b      	ldr	r3, [r7, #4]
 80223e0:	33e8      	adds	r3, #232	; 0xe8
 80223e2:	4618      	mov	r0, r3
 80223e4:	f7fe fd64 	bl	8020eb0 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0; // flash address count. (0 ~ 6199)
    static uint16_t log_index = 0;   // Count up when interrupt.

    /* Mapping data of distance */
    const_distance_log_[log_index] = distance;
 80223e8:	4bb3      	ldr	r3, [pc, #716]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 80223ea:	881b      	ldrh	r3, [r3, #0]
 80223ec:	687a      	ldr	r2, [r7, #4]
 80223ee:	009b      	lsls	r3, r3, #2
 80223f0:	4413      	add	r3, r2
 80223f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80223f4:	601a      	str	r2, [r3, #0]

    /* Mapping data of radian */
    double degree = iim_42652.GetDegreeStackZ();
 80223f6:	687b      	ldr	r3, [r7, #4]
 80223f8:	33f8      	adds	r3, #248	; 0xf8
 80223fa:	4618      	mov	r0, r3
 80223fc:	f7ff f970 	bl	80216e0 <_ZN8Iim4265215GetDegreeStackZEv>
 8022400:	ed87 0b06 	vstr	d0, [r7, #24]
    float radian = static_cast<float>(degree * M_PI / 180.0);
 8022404:	a3aa      	add	r3, pc, #680	; (adr r3, 80226b0 <_ZN6Logger7LoggingEh+0x300>)
 8022406:	e9d3 2300 	ldrd	r2, r3, [r3]
 802240a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802240e:	f7fd ffd3 	bl	80203b8 <__aeabi_dmul>
 8022412:	4603      	mov	r3, r0
 8022414:	460c      	mov	r4, r1
 8022416:	4618      	mov	r0, r3
 8022418:	4621      	mov	r1, r4
 802241a:	f04f 0200 	mov.w	r2, #0
 802241e:	4ba7      	ldr	r3, [pc, #668]	; (80226bc <_ZN6Logger7LoggingEh+0x30c>)
 8022420:	f7fe f8f4 	bl	802060c <__aeabi_ddiv>
 8022424:	4603      	mov	r3, r0
 8022426:	460c      	mov	r4, r1
 8022428:	4618      	mov	r0, r3
 802242a:	4621      	mov	r1, r4
 802242c:	f7fe fa5e 	bl	80208ec <__aeabi_d2f>
 8022430:	4603      	mov	r3, r0
 8022432:	617b      	str	r3, [r7, #20]
    radian_log_[log_index] = radian;
 8022434:	4ba0      	ldr	r3, [pc, #640]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 8022436:	881b      	ldrh	r3, [r3, #0]
 8022438:	687a      	ldr	r2, [r7, #4]
 802243a:	330a      	adds	r3, #10
 802243c:	009b      	lsls	r3, r3, #2
 802243e:	4413      	add	r3, r2
 8022440:	697a      	ldr	r2, [r7, #20]
 8022442:	601a      	str	r2, [r3, #0]
    iim_42652.ResetDegreeStackZ();
 8022444:	687b      	ldr	r3, [r7, #4]
 8022446:	33f8      	adds	r3, #248	; 0xf8
 8022448:	4618      	mov	r0, r3
 802244a:	f7ff f939 	bl	80216c0 <_ZN8Iim4265217ResetDegreeStackZEv>

    /* Various log */
    static uint8_t pre_corner_cnt = side_sensor.GetCornerMarkerCount();
 802244e:	4b9c      	ldr	r3, [pc, #624]	; (80226c0 <_ZN6Logger7LoggingEh+0x310>)
 8022450:	781b      	ldrb	r3, [r3, #0]
 8022452:	f3bf 8f5b 	dmb	ish
 8022456:	b2db      	uxtb	r3, r3
 8022458:	f003 0301 	and.w	r3, r3, #1
 802245c:	2b00      	cmp	r3, #0
 802245e:	bf0c      	ite	eq
 8022460:	2301      	moveq	r3, #1
 8022462:	2300      	movne	r3, #0
 8022464:	b2db      	uxtb	r3, r3
 8022466:	2b00      	cmp	r3, #0
 8022468:	d017      	beq.n	802249a <_ZN6Logger7LoggingEh+0xea>
 802246a:	4895      	ldr	r0, [pc, #596]	; (80226c0 <_ZN6Logger7LoggingEh+0x310>)
 802246c:	f007 fe8e 	bl	802a18c <__cxa_guard_acquire>
 8022470:	4603      	mov	r3, r0
 8022472:	2b00      	cmp	r3, #0
 8022474:	bf14      	ite	ne
 8022476:	2301      	movne	r3, #1
 8022478:	2300      	moveq	r3, #0
 802247a:	b2db      	uxtb	r3, r3
 802247c:	2b00      	cmp	r3, #0
 802247e:	d00c      	beq.n	802249a <_ZN6Logger7LoggingEh+0xea>
 8022480:	687b      	ldr	r3, [r7, #4]
 8022482:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022486:	4618      	mov	r0, r3
 8022488:	f002 ff13 	bl	80252b2 <_ZN10SideSensor20GetCornerMarkerCountEv>
 802248c:	4603      	mov	r3, r0
 802248e:	461a      	mov	r2, r3
 8022490:	4b8c      	ldr	r3, [pc, #560]	; (80226c4 <_ZN6Logger7LoggingEh+0x314>)
 8022492:	701a      	strb	r2, [r3, #0]
 8022494:	488a      	ldr	r0, [pc, #552]	; (80226c0 <_ZN6Logger7LoggingEh+0x310>)
 8022496:	f007 fe85 	bl	802a1a4 <__cxa_guard_release>
    static uint8_t pre_cross_cnt  = side_sensor.GetCrossLineCount();
 802249a:	4b8b      	ldr	r3, [pc, #556]	; (80226c8 <_ZN6Logger7LoggingEh+0x318>)
 802249c:	781b      	ldrb	r3, [r3, #0]
 802249e:	f3bf 8f5b 	dmb	ish
 80224a2:	b2db      	uxtb	r3, r3
 80224a4:	f003 0301 	and.w	r3, r3, #1
 80224a8:	2b00      	cmp	r3, #0
 80224aa:	bf0c      	ite	eq
 80224ac:	2301      	moveq	r3, #1
 80224ae:	2300      	movne	r3, #0
 80224b0:	b2db      	uxtb	r3, r3
 80224b2:	2b00      	cmp	r3, #0
 80224b4:	d017      	beq.n	80224e6 <_ZN6Logger7LoggingEh+0x136>
 80224b6:	4884      	ldr	r0, [pc, #528]	; (80226c8 <_ZN6Logger7LoggingEh+0x318>)
 80224b8:	f007 fe68 	bl	802a18c <__cxa_guard_acquire>
 80224bc:	4603      	mov	r3, r0
 80224be:	2b00      	cmp	r3, #0
 80224c0:	bf14      	ite	ne
 80224c2:	2301      	movne	r3, #1
 80224c4:	2300      	moveq	r3, #0
 80224c6:	b2db      	uxtb	r3, r3
 80224c8:	2b00      	cmp	r3, #0
 80224ca:	d00c      	beq.n	80224e6 <_ZN6Logger7LoggingEh+0x136>
 80224cc:	687b      	ldr	r3, [r7, #4]
 80224ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80224d2:	4618      	mov	r0, r3
 80224d4:	f002 fef9 	bl	80252ca <_ZN10SideSensor17GetCrossLineCountEv>
 80224d8:	4603      	mov	r3, r0
 80224da:	461a      	mov	r2, r3
 80224dc:	4b7b      	ldr	r3, [pc, #492]	; (80226cc <_ZN6Logger7LoggingEh+0x31c>)
 80224de:	701a      	strb	r2, [r3, #0]
 80224e0:	4879      	ldr	r0, [pc, #484]	; (80226c8 <_ZN6Logger7LoggingEh+0x318>)
 80224e2:	f007 fe5f 	bl	802a1a4 <__cxa_guard_release>
    uint8_t corner_cnt = side_sensor.GetCornerMarkerCount();
 80224e6:	687b      	ldr	r3, [r7, #4]
 80224e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80224ec:	4618      	mov	r0, r3
 80224ee:	f002 fee0 	bl	80252b2 <_ZN10SideSensor20GetCornerMarkerCountEv>
 80224f2:	4603      	mov	r3, r0
 80224f4:	74fb      	strb	r3, [r7, #19]
    uint8_t cross_cnt  = side_sensor.GetCrossLineCount();
 80224f6:	687b      	ldr	r3, [r7, #4]
 80224f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80224fc:	4618      	mov	r0, r3
 80224fe:	f002 fee4 	bl	80252ca <_ZN10SideSensor17GetCrossLineCountEv>
 8022502:	4603      	mov	r3, r0
 8022504:	74bb      	strb	r3, [r7, #18]
    uint16_t various_buff = 0;
 8022506:	2300      	movs	r3, #0
 8022508:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(process_complete != 0)        various_buff |= 0x0004;
 802250a:	78fb      	ldrb	r3, [r7, #3]
 802250c:	2b00      	cmp	r3, #0
 802250e:	d003      	beq.n	8022518 <_ZN6Logger7LoggingEh+0x168>
 8022510:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022512:	f043 0304 	orr.w	r3, r3, #4
 8022516:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_corner_cnt != corner_cnt) various_buff |= 0x0002;
 8022518:	4b6a      	ldr	r3, [pc, #424]	; (80226c4 <_ZN6Logger7LoggingEh+0x314>)
 802251a:	781b      	ldrb	r3, [r3, #0]
 802251c:	7cfa      	ldrb	r2, [r7, #19]
 802251e:	429a      	cmp	r2, r3
 8022520:	d003      	beq.n	802252a <_ZN6Logger7LoggingEh+0x17a>
 8022522:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022524:	f043 0302 	orr.w	r3, r3, #2
 8022528:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_cross_cnt != cross_cnt)   various_buff |= 0x0001;
 802252a:	4b68      	ldr	r3, [pc, #416]	; (80226cc <_ZN6Logger7LoggingEh+0x31c>)
 802252c:	781b      	ldrb	r3, [r3, #0]
 802252e:	7cba      	ldrb	r2, [r7, #18]
 8022530:	429a      	cmp	r2, r3
 8022532:	d003      	beq.n	802253c <_ZN6Logger7LoggingEh+0x18c>
 8022534:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022536:	f043 0301 	orr.w	r3, r3, #1
 802253a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    pre_corner_cnt = corner_cnt;
 802253c:	4a61      	ldr	r2, [pc, #388]	; (80226c4 <_ZN6Logger7LoggingEh+0x314>)
 802253e:	7cfb      	ldrb	r3, [r7, #19]
 8022540:	7013      	strb	r3, [r2, #0]
    pre_cross_cnt  = cross_cnt;
 8022542:	4a62      	ldr	r2, [pc, #392]	; (80226cc <_ZN6Logger7LoggingEh+0x31c>)
 8022544:	7cbb      	ldrb	r3, [r7, #18]
 8022546:	7013      	strb	r3, [r2, #0]
    various_log_[log_index] = various_buff;
 8022548:	4b5b      	ldr	r3, [pc, #364]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 802254a:	881b      	ldrh	r3, [r3, #0]
 802254c:	461a      	mov	r2, r3
 802254e:	687b      	ldr	r3, [r7, #4]
 8022550:	3228      	adds	r2, #40	; 0x28
 8022552:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8022554:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /* Copy periodic log */
    if(log_index == LAST_LOG_INDEX)
 8022558:	4b57      	ldr	r3, [pc, #348]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 802255a:	881b      	ldrh	r3, [r3, #0]
 802255c:	2b09      	cmp	r3, #9
 802255e:	d120      	bne.n	80225a2 <_ZN6Logger7LoggingEh+0x1f2>
    {
        log_index = 0;
 8022560:	4b55      	ldr	r3, [pc, #340]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 8022562:	2200      	movs	r2, #0
 8022564:	801a      	strh	r2, [r3, #0]
        memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 8022566:	687b      	ldr	r3, [r7, #4]
 8022568:	3364      	adds	r3, #100	; 0x64
 802256a:	6879      	ldr	r1, [r7, #4]
 802256c:	2228      	movs	r2, #40	; 0x28
 802256e:	4618      	mov	r0, r3
 8022570:	f007 fe40 	bl	802a1f4 <memcpy>
        memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 8022574:	687b      	ldr	r3, [r7, #4]
 8022576:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 802257a:	687b      	ldr	r3, [r7, #4]
 802257c:	3328      	adds	r3, #40	; 0x28
 802257e:	2228      	movs	r2, #40	; 0x28
 8022580:	4619      	mov	r1, r3
 8022582:	f007 fe37 	bl	802a1f4 <memcpy>
        memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 8022586:	687b      	ldr	r3, [r7, #4]
 8022588:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 802258c:	687b      	ldr	r3, [r7, #4]
 802258e:	3350      	adds	r3, #80	; 0x50
 8022590:	2214      	movs	r2, #20
 8022592:	4619      	mov	r1, r3
 8022594:	f007 fe2e 	bl	802a1f4 <memcpy>
        periodic_write_enable_ = 1;
 8022598:	687b      	ldr	r3, [r7, #4]
 802259a:	2201      	movs	r2, #1
 802259c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80225a0:	e005      	b.n	80225ae <_ZN6Logger7LoggingEh+0x1fe>
    }
    else log_index++;
 80225a2:	4b45      	ldr	r3, [pc, #276]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 80225a4:	881b      	ldrh	r3, [r3, #0]
 80225a6:	3301      	adds	r3, #1
 80225a8:	b29a      	uxth	r2, r3
 80225aa:	4b43      	ldr	r3, [pc, #268]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 80225ac:	801a      	strh	r2, [r3, #0]

    /* Distance correction */
    uint16_t correction_address = now_address;
 80225ae:	4b48      	ldr	r3, [pc, #288]	; (80226d0 <_ZN6Logger7LoggingEh+0x320>)
 80225b0:	881b      	ldrh	r3, [r3, #0]
 80225b2:	823b      	strh	r3, [r7, #16]
    float excess = excess_stack_;
 80225b4:	687b      	ldr	r3, [r7, #4]
 80225b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80225ba:	60fb      	str	r3, [r7, #12]
    excess += distance - LOGGING_CONST_DISTANCE;
 80225bc:	68f8      	ldr	r0, [r7, #12]
 80225be:	f7fd fea3 	bl	8020308 <__aeabi_f2d>
 80225c2:	4604      	mov	r4, r0
 80225c4:	460d      	mov	r5, r1
 80225c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80225c8:	f7fd fe9e 	bl	8020308 <__aeabi_f2d>
 80225cc:	f04f 0200 	mov.w	r2, #0
 80225d0:	4b40      	ldr	r3, [pc, #256]	; (80226d4 <_ZN6Logger7LoggingEh+0x324>)
 80225d2:	f7fd fd39 	bl	8020048 <__aeabi_dsub>
 80225d6:	4602      	mov	r2, r0
 80225d8:	460b      	mov	r3, r1
 80225da:	4620      	mov	r0, r4
 80225dc:	4629      	mov	r1, r5
 80225de:	f7fd fd35 	bl	802004c <__adddf3>
 80225e2:	4603      	mov	r3, r0
 80225e4:	460c      	mov	r4, r1
 80225e6:	4618      	mov	r0, r3
 80225e8:	4621      	mov	r1, r4
 80225ea:	f7fe f97f 	bl	80208ec <__aeabi_d2f>
 80225ee:	4603      	mov	r3, r0
 80225f0:	60fb      	str	r3, [r7, #12]
    if(excess > LOGGING_CONST_DISTANCE)
 80225f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80225f6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80225fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80225fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022602:	dd6b      	ble.n	80226dc <_ZN6Logger7LoggingEh+0x32c>
    {
        const_distance_log_[log_index] = excess;
 8022604:	4b2c      	ldr	r3, [pc, #176]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 8022606:	881b      	ldrh	r3, [r3, #0]
 8022608:	687a      	ldr	r2, [r7, #4]
 802260a:	009b      	lsls	r3, r3, #2
 802260c:	4413      	add	r3, r2
 802260e:	68fa      	ldr	r2, [r7, #12]
 8022610:	601a      	str	r2, [r3, #0]
        radian_log_[log_index] = radian;
 8022612:	4b29      	ldr	r3, [pc, #164]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 8022614:	881b      	ldrh	r3, [r3, #0]
 8022616:	687a      	ldr	r2, [r7, #4]
 8022618:	330a      	adds	r3, #10
 802261a:	009b      	lsls	r3, r3, #2
 802261c:	4413      	add	r3, r2
 802261e:	697a      	ldr	r2, [r7, #20]
 8022620:	601a      	str	r2, [r3, #0]
        various_log_[log_index] = VARIOUS_LOG_DATA_WHEN_COPY;
 8022622:	4b25      	ldr	r3, [pc, #148]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 8022624:	881b      	ldrh	r3, [r3, #0]
 8022626:	461a      	mov	r2, r3
 8022628:	687b      	ldr	r3, [r7, #4]
 802262a:	3228      	adds	r2, #40	; 0x28
 802262c:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 8022630:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        excess_stack_ = excess - LOGGING_CONST_DISTANCE;
 8022634:	edd7 7a03 	vldr	s15, [r7, #12]
 8022638:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 802263c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022640:	687b      	ldr	r3, [r7, #4]
 8022642:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
        now_address++;
 8022646:	4b22      	ldr	r3, [pc, #136]	; (80226d0 <_ZN6Logger7LoggingEh+0x320>)
 8022648:	881b      	ldrh	r3, [r3, #0]
 802264a:	3301      	adds	r3, #1
 802264c:	b29a      	uxth	r2, r3
 802264e:	4b20      	ldr	r3, [pc, #128]	; (80226d0 <_ZN6Logger7LoggingEh+0x320>)
 8022650:	801a      	strh	r2, [r3, #0]

        /* Copy periodic log */
        if(log_index == LAST_LOG_INDEX)
 8022652:	4b19      	ldr	r3, [pc, #100]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 8022654:	881b      	ldrh	r3, [r3, #0]
 8022656:	2b09      	cmp	r3, #9
 8022658:	d120      	bne.n	802269c <_ZN6Logger7LoggingEh+0x2ec>
        {
            log_index = 0;
 802265a:	4b17      	ldr	r3, [pc, #92]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 802265c:	2200      	movs	r2, #0
 802265e:	801a      	strh	r2, [r3, #0]
            memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 8022660:	687b      	ldr	r3, [r7, #4]
 8022662:	3364      	adds	r3, #100	; 0x64
 8022664:	6879      	ldr	r1, [r7, #4]
 8022666:	2228      	movs	r2, #40	; 0x28
 8022668:	4618      	mov	r0, r3
 802266a:	f007 fdc3 	bl	802a1f4 <memcpy>
            memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 802266e:	687b      	ldr	r3, [r7, #4]
 8022670:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8022674:	687b      	ldr	r3, [r7, #4]
 8022676:	3328      	adds	r3, #40	; 0x28
 8022678:	2228      	movs	r2, #40	; 0x28
 802267a:	4619      	mov	r1, r3
 802267c:	f007 fdba 	bl	802a1f4 <memcpy>
            memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 8022680:	687b      	ldr	r3, [r7, #4]
 8022682:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8022686:	687b      	ldr	r3, [r7, #4]
 8022688:	3350      	adds	r3, #80	; 0x50
 802268a:	2214      	movs	r2, #20
 802268c:	4619      	mov	r1, r3
 802268e:	f007 fdb1 	bl	802a1f4 <memcpy>
            periodic_write_enable_ = 1;
 8022692:	687b      	ldr	r3, [r7, #4]
 8022694:	2201      	movs	r2, #1
 8022696:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 802269a:	e023      	b.n	80226e4 <_ZN6Logger7LoggingEh+0x334>
        }
        else log_index++;
 802269c:	4b06      	ldr	r3, [pc, #24]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 802269e:	881b      	ldrh	r3, [r3, #0]
 80226a0:	3301      	adds	r3, #1
 80226a2:	b29a      	uxth	r2, r3
 80226a4:	4b04      	ldr	r3, [pc, #16]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 80226a6:	801a      	strh	r2, [r3, #0]
 80226a8:	e01c      	b.n	80226e4 <_ZN6Logger7LoggingEh+0x334>
 80226aa:	bf00      	nop
 80226ac:	f3af 8000 	nop.w
 80226b0:	54442d18 	.word	0x54442d18
 80226b4:	400921fb 	.word	0x400921fb
 80226b8:	20000082 	.word	0x20000082
 80226bc:	40668000 	.word	0x40668000
 80226c0:	20000088 	.word	0x20000088
 80226c4:	20000084 	.word	0x20000084
 80226c8:	20000090 	.word	0x20000090
 80226cc:	2000008c 	.word	0x2000008c
 80226d0:	20000080 	.word	0x20000080
 80226d4:	40340000 	.word	0x40340000
 80226d8:	43ca0000 	.word	0x43ca0000
    }
    else excess_stack_ = excess;
 80226dc:	687b      	ldr	r3, [r7, #4]
 80226de:	68fa      	ldr	r2, [r7, #12]
 80226e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    /* Accel position log */
    static uint16_t accel_straight_cnt = 0;
    static uint8_t accel_step = 0;
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA)
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	33e8      	adds	r3, #232	; 0xe8
 80226e8:	4618      	mov	r0, r3
 80226ea:	f7fe fc0d 	bl	8020f08 <_ZN7Encoder15AngularVelocityEv>
 80226ee:	eef0 7a40 	vmov.f32	s15, s0
 80226f2:	eeb0 0a67 	vmov.f32	s0, s15
 80226f6:	f7ff fe2f 	bl	8022358 <_ZSt4fabsf>
 80226fa:	eeb0 7a40 	vmov.f32	s14, s0
 80226fe:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 80226d8 <_ZN6Logger7LoggingEh+0x328>
 8022702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802270a:	bf4c      	ite	mi
 802270c:	2301      	movmi	r3, #1
 802270e:	2300      	movpl	r3, #0
 8022710:	b2db      	uxtb	r3, r3
 8022712:	2b00      	cmp	r3, #0
 8022714:	d021      	beq.n	802275a <_ZN6Logger7LoggingEh+0x3aa>
    {
        accel_straight_cnt++;
 8022716:	4b2e      	ldr	r3, [pc, #184]	; (80227d0 <_ZN6Logger7LoggingEh+0x420>)
 8022718:	881b      	ldrh	r3, [r3, #0]
 802271a:	3301      	adds	r3, #1
 802271c:	b29a      	uxth	r2, r3
 802271e:	4b2c      	ldr	r3, [pc, #176]	; (80227d0 <_ZN6Logger7LoggingEh+0x420>)
 8022720:	801a      	strh	r2, [r3, #0]
        if(accel_straight_cnt >= CNT_OF_ACCEL_STEP_UP && accel_step < NUM_OF_ACCEL_STEP)
 8022722:	4b2b      	ldr	r3, [pc, #172]	; (80227d0 <_ZN6Logger7LoggingEh+0x420>)
 8022724:	881b      	ldrh	r3, [r3, #0]
 8022726:	2b07      	cmp	r3, #7
 8022728:	d947      	bls.n	80227ba <_ZN6Logger7LoggingEh+0x40a>
 802272a:	4b2a      	ldr	r3, [pc, #168]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 802272c:	781b      	ldrb	r3, [r3, #0]
 802272e:	2b04      	cmp	r3, #4
 8022730:	d843      	bhi.n	80227ba <_ZN6Logger7LoggingEh+0x40a>
        {
            accel_step++;
 8022732:	4b28      	ldr	r3, [pc, #160]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 8022734:	781b      	ldrb	r3, [r3, #0]
 8022736:	3301      	adds	r3, #1
 8022738:	b2da      	uxtb	r2, r3
 802273a:	4b26      	ldr	r3, [pc, #152]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 802273c:	701a      	strb	r2, [r3, #0]
            accel_address_[accel_step-1] = correction_address - CNT_OF_ACCEL_STEP_UP;
 802273e:	4b25      	ldr	r3, [pc, #148]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 8022740:	781b      	ldrb	r3, [r3, #0]
 8022742:	1e5a      	subs	r2, r3, #1
 8022744:	8a3b      	ldrh	r3, [r7, #16]
 8022746:	3b08      	subs	r3, #8
 8022748:	b299      	uxth	r1, r3
 802274a:	687b      	ldr	r3, [r7, #4]
 802274c:	3264      	adds	r2, #100	; 0x64
 802274e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            accel_straight_cnt = 0;
 8022752:	4b1f      	ldr	r3, [pc, #124]	; (80227d0 <_ZN6Logger7LoggingEh+0x420>)
 8022754:	2200      	movs	r2, #0
 8022756:	801a      	strh	r2, [r3, #0]
 8022758:	e02f      	b.n	80227ba <_ZN6Logger7LoggingEh+0x40a>
        }
    }
    else if(accel_step != 0)
 802275a:	4b1e      	ldr	r3, [pc, #120]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 802275c:	781b      	ldrb	r3, [r3, #0]
 802275e:	2b00      	cmp	r3, #0
 8022760:	d028      	beq.n	80227b4 <_ZN6Logger7LoggingEh+0x404>
    {
        for(int i = 1; i <= accel_step; i++)
 8022762:	2301      	movs	r3, #1
 8022764:	62bb      	str	r3, [r7, #40]	; 0x28
 8022766:	4b1b      	ldr	r3, [pc, #108]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 8022768:	781b      	ldrb	r3, [r3, #0]
 802276a:	461a      	mov	r2, r3
 802276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802276e:	4293      	cmp	r3, r2
 8022770:	dc14      	bgt.n	802279c <_ZN6Logger7LoggingEh+0x3ec>
        {
            decel_address_[i-1] = (correction_address-1) - (DIFF_NEXT_ACCEL_STEP * i);
 8022772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022774:	b29b      	uxth	r3, r3
 8022776:	009b      	lsls	r3, r3, #2
 8022778:	b29b      	uxth	r3, r3
 802277a:	8a3a      	ldrh	r2, [r7, #16]
 802277c:	1ad3      	subs	r3, r2, r3
 802277e:	b29a      	uxth	r2, r3
 8022780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022782:	3b01      	subs	r3, #1
 8022784:	3a01      	subs	r2, #1
 8022786:	b291      	uxth	r1, r2
 8022788:	687a      	ldr	r2, [r7, #4]
 802278a:	3368      	adds	r3, #104	; 0x68
 802278c:	005b      	lsls	r3, r3, #1
 802278e:	4413      	add	r3, r2
 8022790:	460a      	mov	r2, r1
 8022792:	805a      	strh	r2, [r3, #2]
        for(int i = 1; i <= accel_step; i++)
 8022794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022796:	3301      	adds	r3, #1
 8022798:	62bb      	str	r3, [r7, #40]	; 0x28
 802279a:	e7e4      	b.n	8022766 <_ZN6Logger7LoggingEh+0x3b6>
        }
        accel_position_write_enable_ = accel_step;
 802279c:	4b0d      	ldr	r3, [pc, #52]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 802279e:	781a      	ldrb	r2, [r3, #0]
 80227a0:	687b      	ldr	r3, [r7, #4]
 80227a2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        accel_step = 0;
 80227a6:	4b0b      	ldr	r3, [pc, #44]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 80227a8:	2200      	movs	r2, #0
 80227aa:	701a      	strb	r2, [r3, #0]
        accel_straight_cnt = 0;
 80227ac:	4b08      	ldr	r3, [pc, #32]	; (80227d0 <_ZN6Logger7LoggingEh+0x420>)
 80227ae:	2200      	movs	r2, #0
 80227b0:	801a      	strh	r2, [r3, #0]
 80227b2:	e002      	b.n	80227ba <_ZN6Logger7LoggingEh+0x40a>
    }
    else accel_straight_cnt = 0;
 80227b4:	4b06      	ldr	r3, [pc, #24]	; (80227d0 <_ZN6Logger7LoggingEh+0x420>)
 80227b6:	2200      	movs	r2, #0
 80227b8:	801a      	strh	r2, [r3, #0]

    now_address++;
 80227ba:	4b07      	ldr	r3, [pc, #28]	; (80227d8 <_ZN6Logger7LoggingEh+0x428>)
 80227bc:	881b      	ldrh	r3, [r3, #0]
 80227be:	3301      	adds	r3, #1
 80227c0:	b29a      	uxth	r2, r3
 80227c2:	4b05      	ldr	r3, [pc, #20]	; (80227d8 <_ZN6Logger7LoggingEh+0x428>)
 80227c4:	801a      	strh	r2, [r3, #0]
 80227c6:	e000      	b.n	80227ca <_ZN6Logger7LoggingEh+0x41a>
    if(distance < LOGGING_CONST_DISTANCE) return;
 80227c8:	bf00      	nop
}
 80227ca:	3730      	adds	r7, #48	; 0x30
 80227cc:	46bd      	mov	sp, r7
 80227ce:	bdb0      	pop	{r4, r5, r7, pc}
 80227d0:	20000094 	.word	0x20000094
 80227d4:	20000096 	.word	0x20000096
 80227d8:	20000080 	.word	0x20000080

080227dc <_ZN6Logger16StorePeriodicLogEv>:

uint8_t Logger::StorePeriodicLog()
{
 80227dc:	b580      	push	{r7, lr}
 80227de:	b084      	sub	sp, #16
 80227e0:	af00      	add	r7, sp, #0
 80227e2:	6078      	str	r0, [r7, #4]
    if(periodic_write_enable_ == 0) return 0;
 80227e4:	687b      	ldr	r3, [r7, #4]
 80227e6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80227ea:	2b00      	cmp	r3, #0
 80227ec:	d101      	bne.n	80227f2 <_ZN6Logger16StorePeriodicLogEv+0x16>
 80227ee:	2300      	movs	r3, #0
 80227f0:	e087      	b.n	8022902 <_ZN6Logger16StorePeriodicLogEv+0x126>
    else periodic_write_enable_ = 0;
 80227f2:	687b      	ldr	r3, [r7, #4]
 80227f4:	2200      	movs	r2, #0
 80227f6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    static uint32_t address_a = HEAD_ADDRESS_BLOCK_A;
    static uint32_t address_b = HEAD_ADDRESS_BLOCK_B;
    static uint32_t address_c = HEAD_ADDRESS_BLOCK_C;
    uint8_t result = 0;
 80227fa:	2300      	movs	r3, #0
 80227fc:	73fb      	strb	r3, [r7, #15]

    if(!flash.CheckBlankWord(address_a, NUM_OF_LOG))     return 0x10;
 80227fe:	687b      	ldr	r3, [r7, #4]
 8022800:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022804:	4b41      	ldr	r3, [pc, #260]	; (802290c <_ZN6Logger16StorePeriodicLogEv+0x130>)
 8022806:	681b      	ldr	r3, [r3, #0]
 8022808:	220a      	movs	r2, #10
 802280a:	4619      	mov	r1, r3
 802280c:	f7fe fd11 	bl	8021232 <_ZN5Flash14CheckBlankWordEmm>
 8022810:	4603      	mov	r3, r0
 8022812:	f083 0301 	eor.w	r3, r3, #1
 8022816:	b2db      	uxtb	r3, r3
 8022818:	2b00      	cmp	r3, #0
 802281a:	d001      	beq.n	8022820 <_ZN6Logger16StorePeriodicLogEv+0x44>
 802281c:	2310      	movs	r3, #16
 802281e:	e070      	b.n	8022902 <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankWord(address_b, NUM_OF_LOG))     return 0x20;
 8022820:	687b      	ldr	r3, [r7, #4]
 8022822:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022826:	4b3a      	ldr	r3, [pc, #232]	; (8022910 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022828:	681b      	ldr	r3, [r3, #0]
 802282a:	220a      	movs	r2, #10
 802282c:	4619      	mov	r1, r3
 802282e:	f7fe fd00 	bl	8021232 <_ZN5Flash14CheckBlankWordEmm>
 8022832:	4603      	mov	r3, r0
 8022834:	f083 0301 	eor.w	r3, r3, #1
 8022838:	b2db      	uxtb	r3, r3
 802283a:	2b00      	cmp	r3, #0
 802283c:	d001      	beq.n	8022842 <_ZN6Logger16StorePeriodicLogEv+0x66>
 802283e:	2320      	movs	r3, #32
 8022840:	e05f      	b.n	8022902 <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankHalfword(address_c, NUM_OF_LOG)) return 0x40;
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022848:	4b32      	ldr	r3, [pc, #200]	; (8022914 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 802284a:	681b      	ldr	r3, [r3, #0]
 802284c:	220a      	movs	r2, #10
 802284e:	4619      	mov	r1, r3
 8022850:	f7fe fc9b 	bl	802118a <_ZN5Flash18CheckBlankHalfwordEmm>
 8022854:	4603      	mov	r3, r0
 8022856:	f083 0301 	eor.w	r3, r3, #1
 802285a:	b2db      	uxtb	r3, r3
 802285c:	2b00      	cmp	r3, #0
 802285e:	d001      	beq.n	8022864 <_ZN6Logger16StorePeriodicLogEv+0x88>
 8022860:	2340      	movs	r3, #64	; 0x40
 8022862:	e04e      	b.n	8022902 <_ZN6Logger16StorePeriodicLogEv+0x126>

    if(!flash.StoreFloat(address_a, const_distance_copy_, NUM_OF_LOG)) result |= 0x01;
 8022864:	687b      	ldr	r3, [r7, #4]
 8022866:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 802286a:	4b28      	ldr	r3, [pc, #160]	; (802290c <_ZN6Logger16StorePeriodicLogEv+0x130>)
 802286c:	6819      	ldr	r1, [r3, #0]
 802286e:	687b      	ldr	r3, [r7, #4]
 8022870:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8022874:	230a      	movs	r3, #10
 8022876:	f7fe fc04 	bl	8021082 <_ZN5Flash10StoreFloatEmPfm>
 802287a:	4603      	mov	r3, r0
 802287c:	f083 0301 	eor.w	r3, r3, #1
 8022880:	b2db      	uxtb	r3, r3
 8022882:	2b00      	cmp	r3, #0
 8022884:	d003      	beq.n	802288e <_ZN6Logger16StorePeriodicLogEv+0xb2>
 8022886:	7bfb      	ldrb	r3, [r7, #15]
 8022888:	f043 0301 	orr.w	r3, r3, #1
 802288c:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreFloat(address_b, radian_copy_, NUM_OF_LOG))         result |= 0x02;
 802288e:	687b      	ldr	r3, [r7, #4]
 8022890:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022894:	4b1e      	ldr	r3, [pc, #120]	; (8022910 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022896:	6819      	ldr	r1, [r3, #0]
 8022898:	687b      	ldr	r3, [r7, #4]
 802289a:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 802289e:	230a      	movs	r3, #10
 80228a0:	f7fe fbef 	bl	8021082 <_ZN5Flash10StoreFloatEmPfm>
 80228a4:	4603      	mov	r3, r0
 80228a6:	f083 0301 	eor.w	r3, r3, #1
 80228aa:	b2db      	uxtb	r3, r3
 80228ac:	2b00      	cmp	r3, #0
 80228ae:	d003      	beq.n	80228b8 <_ZN6Logger16StorePeriodicLogEv+0xdc>
 80228b0:	7bfb      	ldrb	r3, [r7, #15]
 80228b2:	f043 0302 	orr.w	r3, r3, #2
 80228b6:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreUint16(address_c, various_copy_, NUM_OF_LOG))       result |= 0x04;
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80228be:	4b15      	ldr	r3, [pc, #84]	; (8022914 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80228c0:	6819      	ldr	r1, [r3, #0]
 80228c2:	687b      	ldr	r3, [r7, #4]
 80228c4:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 80228c8:	230a      	movs	r3, #10
 80228ca:	f7fe fba5 	bl	8021018 <_ZN5Flash11StoreUint16EmPtm>
 80228ce:	4603      	mov	r3, r0
 80228d0:	f083 0301 	eor.w	r3, r3, #1
 80228d4:	b2db      	uxtb	r3, r3
 80228d6:	2b00      	cmp	r3, #0
 80228d8:	d003      	beq.n	80228e2 <_ZN6Logger16StorePeriodicLogEv+0x106>
 80228da:	7bfb      	ldrb	r3, [r7, #15]
 80228dc:	f043 0304 	orr.w	r3, r3, #4
 80228e0:	73fb      	strb	r3, [r7, #15]

    address_a += NUM_OF_LOG * 4;
 80228e2:	4b0a      	ldr	r3, [pc, #40]	; (802290c <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80228e4:	681b      	ldr	r3, [r3, #0]
 80228e6:	3328      	adds	r3, #40	; 0x28
 80228e8:	4a08      	ldr	r2, [pc, #32]	; (802290c <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80228ea:	6013      	str	r3, [r2, #0]
    address_b += NUM_OF_LOG * 4;
 80228ec:	4b08      	ldr	r3, [pc, #32]	; (8022910 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80228ee:	681b      	ldr	r3, [r3, #0]
 80228f0:	3328      	adds	r3, #40	; 0x28
 80228f2:	4a07      	ldr	r2, [pc, #28]	; (8022910 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80228f4:	6013      	str	r3, [r2, #0]
    address_c += NUM_OF_LOG * 2;
 80228f6:	4b07      	ldr	r3, [pc, #28]	; (8022914 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80228f8:	681b      	ldr	r3, [r3, #0]
 80228fa:	3314      	adds	r3, #20
 80228fc:	4a05      	ldr	r2, [pc, #20]	; (8022914 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80228fe:	6013      	str	r3, [r2, #0]

    return result;
 8022900:	7bfb      	ldrb	r3, [r7, #15]
}
 8022902:	4618      	mov	r0, r3
 8022904:	3710      	adds	r7, #16
 8022906:	46bd      	mov	sp, r7
 8022908:	bd80      	pop	{r7, pc}
 802290a:	bf00      	nop
 802290c:	20000000 	.word	0x20000000
 8022910:	20000004 	.word	0x20000004
 8022914:	20000008 	.word	0x20000008

08022918 <_ZN6Logger21StoreAccelPositionLogEv>:

uint8_t Logger::StoreAccelPositionLog()
{
 8022918:	b580      	push	{r7, lr}
 802291a:	b086      	sub	sp, #24
 802291c:	af00      	add	r7, sp, #0
 802291e:	6078      	str	r0, [r7, #4]
    uint8_t accel_step = accel_position_write_enable_;
 8022920:	687b      	ldr	r3, [r7, #4]
 8022922:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8022926:	75bb      	strb	r3, [r7, #22]
    if(accel_step == 0) return 0;
 8022928:	7dbb      	ldrb	r3, [r7, #22]
 802292a:	2b00      	cmp	r3, #0
 802292c:	d101      	bne.n	8022932 <_ZN6Logger21StoreAccelPositionLogEv+0x1a>
 802292e:	2300      	movs	r3, #0
 8022930:	e079      	b.n	8022a26 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    else accel_position_write_enable_ = 0;
 8022932:	687b      	ldr	r3, [r7, #4]
 8022934:	2200      	movs	r2, #0
 8022936:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    uint32_t address;
    uint8_t accel = 0; // step 0x01, 0x02, 0x03, 0x04, 0x05.
 802293a:	2300      	movs	r3, #0
 802293c:	73fb      	strb	r3, [r7, #15]
    uint8_t decel = 0; // step 0x10, 0x20, 0x30, 0x40, 0x50.
 802293e:	2300      	movs	r3, #0
 8022940:	73bb      	strb	r3, [r7, #14]
    uint8_t i;

    for(i = 1; i <= accel_step; i++)
 8022942:	2301      	movs	r3, #1
 8022944:	75fb      	strb	r3, [r7, #23]
 8022946:	7dfa      	ldrb	r2, [r7, #23]
 8022948:	7dbb      	ldrb	r3, [r7, #22]
 802294a:	429a      	cmp	r2, r3
 802294c:	d830      	bhi.n	80229b0 <_ZN6Logger21StoreAccelPositionLogEv+0x98>
    {
        accel = i;
 802294e:	7dfb      	ldrb	r3, [r7, #23]
 8022950:	73fb      	strb	r3, [r7, #15]
        address = HEAD_ADDRESS_BLOCK_D + accel_address_[i-1];
 8022952:	7dfb      	ldrb	r3, [r7, #23]
 8022954:	1e5a      	subs	r2, r3, #1
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	3264      	adds	r2, #100	; 0x64
 802295a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802295e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022962:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022966:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x10;
 8022968:	687b      	ldr	r3, [r7, #4]
 802296a:	33f4      	adds	r3, #244	; 0xf4
 802296c:	2201      	movs	r2, #1
 802296e:	6939      	ldr	r1, [r7, #16]
 8022970:	4618      	mov	r0, r3
 8022972:	f7fe fbbd 	bl	80210f0 <_ZN5Flash14CheckBlankByteEmm>
 8022976:	4603      	mov	r3, r0
 8022978:	f083 0301 	eor.w	r3, r3, #1
 802297c:	b2db      	uxtb	r3, r3
 802297e:	2b00      	cmp	r3, #0
 8022980:	d001      	beq.n	8022986 <_ZN6Logger21StoreAccelPositionLogEv+0x6e>
 8022982:	2310      	movs	r3, #16
 8022984:	e04f      	b.n	8022a26 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &accel, 1)) return 0x20;
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 802298c:	f107 020f 	add.w	r2, r7, #15
 8022990:	2301      	movs	r3, #1
 8022992:	6939      	ldr	r1, [r7, #16]
 8022994:	f7fe fb0c 	bl	8020fb0 <_ZN5Flash10StoreUint8EmPhm>
 8022998:	4603      	mov	r3, r0
 802299a:	f083 0301 	eor.w	r3, r3, #1
 802299e:	b2db      	uxtb	r3, r3
 80229a0:	2b00      	cmp	r3, #0
 80229a2:	d001      	beq.n	80229a8 <_ZN6Logger21StoreAccelPositionLogEv+0x90>
 80229a4:	2320      	movs	r3, #32
 80229a6:	e03e      	b.n	8022a26 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 80229a8:	7dfb      	ldrb	r3, [r7, #23]
 80229aa:	3301      	adds	r3, #1
 80229ac:	75fb      	strb	r3, [r7, #23]
 80229ae:	e7ca      	b.n	8022946 <_ZN6Logger21StoreAccelPositionLogEv+0x2e>
    }
    for(i = 1; i <= accel_step; i++)
 80229b0:	2301      	movs	r3, #1
 80229b2:	75fb      	strb	r3, [r7, #23]
 80229b4:	7dfa      	ldrb	r2, [r7, #23]
 80229b6:	7dbb      	ldrb	r3, [r7, #22]
 80229b8:	429a      	cmp	r2, r3
 80229ba:	d833      	bhi.n	8022a24 <_ZN6Logger21StoreAccelPositionLogEv+0x10c>
    {
        decel = i << 4;
 80229bc:	7dfb      	ldrb	r3, [r7, #23]
 80229be:	011b      	lsls	r3, r3, #4
 80229c0:	b2db      	uxtb	r3, r3
 80229c2:	73bb      	strb	r3, [r7, #14]
        address = HEAD_ADDRESS_BLOCK_D + decel_address_[i-1];
 80229c4:	7dfb      	ldrb	r3, [r7, #23]
 80229c6:	3b01      	subs	r3, #1
 80229c8:	687a      	ldr	r2, [r7, #4]
 80229ca:	3368      	adds	r3, #104	; 0x68
 80229cc:	005b      	lsls	r3, r3, #1
 80229ce:	4413      	add	r3, r2
 80229d0:	885b      	ldrh	r3, [r3, #2]
 80229d2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80229d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80229da:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x30;
 80229dc:	687b      	ldr	r3, [r7, #4]
 80229de:	33f4      	adds	r3, #244	; 0xf4
 80229e0:	2201      	movs	r2, #1
 80229e2:	6939      	ldr	r1, [r7, #16]
 80229e4:	4618      	mov	r0, r3
 80229e6:	f7fe fb83 	bl	80210f0 <_ZN5Flash14CheckBlankByteEmm>
 80229ea:	4603      	mov	r3, r0
 80229ec:	f083 0301 	eor.w	r3, r3, #1
 80229f0:	b2db      	uxtb	r3, r3
 80229f2:	2b00      	cmp	r3, #0
 80229f4:	d001      	beq.n	80229fa <_ZN6Logger21StoreAccelPositionLogEv+0xe2>
 80229f6:	2330      	movs	r3, #48	; 0x30
 80229f8:	e015      	b.n	8022a26 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &decel, 1)) return 0x40;
 80229fa:	687b      	ldr	r3, [r7, #4]
 80229fc:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022a00:	f107 020e 	add.w	r2, r7, #14
 8022a04:	2301      	movs	r3, #1
 8022a06:	6939      	ldr	r1, [r7, #16]
 8022a08:	f7fe fad2 	bl	8020fb0 <_ZN5Flash10StoreUint8EmPhm>
 8022a0c:	4603      	mov	r3, r0
 8022a0e:	f083 0301 	eor.w	r3, r3, #1
 8022a12:	b2db      	uxtb	r3, r3
 8022a14:	2b00      	cmp	r3, #0
 8022a16:	d001      	beq.n	8022a1c <_ZN6Logger21StoreAccelPositionLogEv+0x104>
 8022a18:	2340      	movs	r3, #64	; 0x40
 8022a1a:	e004      	b.n	8022a26 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 8022a1c:	7dfb      	ldrb	r3, [r7, #23]
 8022a1e:	3301      	adds	r3, #1
 8022a20:	75fb      	strb	r3, [r7, #23]
 8022a22:	e7c7      	b.n	80229b4 <_ZN6Logger21StoreAccelPositionLogEv+0x9c>
    }
    
    return 0;
 8022a24:	2300      	movs	r3, #0
}
 8022a26:	4618      	mov	r0, r3
 8022a28:	3718      	adds	r7, #24
 8022a2a:	46bd      	mov	sp, r7
 8022a2c:	bd80      	pop	{r7, pc}
	...

08022a30 <_ZN6Logger7LoadingEv>:

void Logger::Loading()
{
 8022a30:	b580      	push	{r7, lr}
 8022a32:	b08c      	sub	sp, #48	; 0x30
 8022a34:	af00      	add	r7, sp, #0
 8022a36:	6078      	str	r0, [r7, #4]
    float distance = encoder.GetDistanceStack();
 8022a38:	687b      	ldr	r3, [r7, #4]
 8022a3a:	33e8      	adds	r3, #232	; 0xe8
 8022a3c:	4618      	mov	r0, r3
 8022a3e:	f7fe fa54 	bl	8020eea <_ZN7Encoder16GetDistanceStackEv>
 8022a42:	ed87 0a08 	vstr	s0, [r7, #32]

    if(distance < LOGGING_CONST_DISTANCE) return;
 8022a46:	edd7 7a08 	vldr	s15, [r7, #32]
 8022a4a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a56:	f100 8299 	bmi.w	8022f8c <_ZN6Logger7LoadingEv+0x55c>
    encoder.ResetDistanceStack();
 8022a5a:	687b      	ldr	r3, [r7, #4]
 8022a5c:	33e8      	adds	r3, #232	; 0xe8
 8022a5e:	4618      	mov	r0, r3
 8022a60:	f7fe fa26 	bl	8020eb0 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0;

    /* Load curvature radius */
    float log_distance = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_A));
 8022a64:	4bad      	ldr	r3, [pc, #692]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022a66:	881b      	ldrh	r3, [r3, #0]
 8022a68:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022a6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8022a70:	681b      	ldr	r3, [r3, #0]
 8022a72:	61fb      	str	r3, [r7, #28]
    float log_radian = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_B));
 8022a74:	4ba9      	ldr	r3, [pc, #676]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022a76:	881b      	ldrh	r3, [r3, #0]
 8022a78:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022a7c:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8022a80:	681b      	ldr	r3, [r3, #0]
 8022a82:	61bb      	str	r3, [r7, #24]
    float radius = log_distance / log_radian;
 8022a84:	edd7 6a07 	vldr	s13, [r7, #28]
 8022a88:	ed97 7a06 	vldr	s14, [r7, #24]
 8022a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022a90:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Load correction position */
    uint16_t log_various = *(reinterpret_cast<uint16_t*>(now_address + HEAD_ADDRESS_BLOCK_C));
 8022a94:	4ba1      	ldr	r3, [pc, #644]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022a96:	881b      	ldrh	r3, [r3, #0]
 8022a98:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022a9c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8022aa0:	881b      	ldrh	r3, [r3, #0]
 8022aa2:	827b      	strh	r3, [r7, #18]
    bool log_corner = false, log_corner_pass = false;
 8022aa4:	2300      	movs	r3, #0
 8022aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8022aaa:	2300      	movs	r3, #0
 8022aac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    bool log_cross = false, log_cross_pass = false;
 8022ab0:	2300      	movs	r3, #0
 8022ab2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8022ab6:	2300      	movs	r3, #0
 8022ab8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    if((log_various & 0x0002) == 0x0002) log_corner = true;
 8022abc:	8a7b      	ldrh	r3, [r7, #18]
 8022abe:	f003 0302 	and.w	r3, r3, #2
 8022ac2:	2b00      	cmp	r3, #0
 8022ac4:	d002      	beq.n	8022acc <_ZN6Logger7LoadingEv+0x9c>
 8022ac6:	2301      	movs	r3, #1
 8022ac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if((log_various & 0x0001) == 0x0001) log_cross = true;
 8022acc:	8a7b      	ldrh	r3, [r7, #18]
 8022ace:	f003 0301 	and.w	r3, r3, #1
 8022ad2:	2b00      	cmp	r3, #0
 8022ad4:	d002      	beq.n	8022adc <_ZN6Logger7LoadingEv+0xac>
 8022ad6:	2301      	movs	r3, #1
 8022ad8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    /* Get correction position */
    bool run_corner = false, run_corner_pass = false;
 8022adc:	2300      	movs	r3, #0
 8022ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022ae2:	2300      	movs	r3, #0
 8022ae4:	747b      	strb	r3, [r7, #17]
    bool run_cross = false, run_cross_pass = false;
 8022ae6:	2300      	movs	r3, #0
 8022ae8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8022aec:	2300      	movs	r3, #0
 8022aee:	743b      	strb	r3, [r7, #16]
    uint8_t corner = side_sensor.GetCornerMarkerCount();
 8022af0:	687b      	ldr	r3, [r7, #4]
 8022af2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022af6:	4618      	mov	r0, r3
 8022af8:	f002 fbdb 	bl	80252b2 <_ZN10SideSensor20GetCornerMarkerCountEv>
 8022afc:	4603      	mov	r3, r0
 8022afe:	73fb      	strb	r3, [r7, #15]
    uint8_t cross = side_sensor.GetCrossLineCount();
 8022b00:	687b      	ldr	r3, [r7, #4]
 8022b02:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022b06:	4618      	mov	r0, r3
 8022b08:	f002 fbdf 	bl	80252ca <_ZN10SideSensor17GetCrossLineCountEv>
 8022b0c:	4603      	mov	r3, r0
 8022b0e:	73bb      	strb	r3, [r7, #14]
    static uint8_t pre_corner = corner;
 8022b10:	4b83      	ldr	r3, [pc, #524]	; (8022d20 <_ZN6Logger7LoadingEv+0x2f0>)
 8022b12:	781b      	ldrb	r3, [r3, #0]
 8022b14:	f3bf 8f5b 	dmb	ish
 8022b18:	b2db      	uxtb	r3, r3
 8022b1a:	f003 0301 	and.w	r3, r3, #1
 8022b1e:	2b00      	cmp	r3, #0
 8022b20:	bf0c      	ite	eq
 8022b22:	2301      	moveq	r3, #1
 8022b24:	2300      	movne	r3, #0
 8022b26:	b2db      	uxtb	r3, r3
 8022b28:	2b00      	cmp	r3, #0
 8022b2a:	d010      	beq.n	8022b4e <_ZN6Logger7LoadingEv+0x11e>
 8022b2c:	487c      	ldr	r0, [pc, #496]	; (8022d20 <_ZN6Logger7LoadingEv+0x2f0>)
 8022b2e:	f007 fb2d 	bl	802a18c <__cxa_guard_acquire>
 8022b32:	4603      	mov	r3, r0
 8022b34:	2b00      	cmp	r3, #0
 8022b36:	bf14      	ite	ne
 8022b38:	2301      	movne	r3, #1
 8022b3a:	2300      	moveq	r3, #0
 8022b3c:	b2db      	uxtb	r3, r3
 8022b3e:	2b00      	cmp	r3, #0
 8022b40:	d005      	beq.n	8022b4e <_ZN6Logger7LoadingEv+0x11e>
 8022b42:	4a78      	ldr	r2, [pc, #480]	; (8022d24 <_ZN6Logger7LoadingEv+0x2f4>)
 8022b44:	7bfb      	ldrb	r3, [r7, #15]
 8022b46:	7013      	strb	r3, [r2, #0]
 8022b48:	4875      	ldr	r0, [pc, #468]	; (8022d20 <_ZN6Logger7LoadingEv+0x2f0>)
 8022b4a:	f007 fb2b 	bl	802a1a4 <__cxa_guard_release>
    static uint8_t pre_cross = cross;
 8022b4e:	4b76      	ldr	r3, [pc, #472]	; (8022d28 <_ZN6Logger7LoadingEv+0x2f8>)
 8022b50:	781b      	ldrb	r3, [r3, #0]
 8022b52:	f3bf 8f5b 	dmb	ish
 8022b56:	b2db      	uxtb	r3, r3
 8022b58:	f003 0301 	and.w	r3, r3, #1
 8022b5c:	2b00      	cmp	r3, #0
 8022b5e:	bf0c      	ite	eq
 8022b60:	2301      	moveq	r3, #1
 8022b62:	2300      	movne	r3, #0
 8022b64:	b2db      	uxtb	r3, r3
 8022b66:	2b00      	cmp	r3, #0
 8022b68:	d010      	beq.n	8022b8c <_ZN6Logger7LoadingEv+0x15c>
 8022b6a:	486f      	ldr	r0, [pc, #444]	; (8022d28 <_ZN6Logger7LoadingEv+0x2f8>)
 8022b6c:	f007 fb0e 	bl	802a18c <__cxa_guard_acquire>
 8022b70:	4603      	mov	r3, r0
 8022b72:	2b00      	cmp	r3, #0
 8022b74:	bf14      	ite	ne
 8022b76:	2301      	movne	r3, #1
 8022b78:	2300      	moveq	r3, #0
 8022b7a:	b2db      	uxtb	r3, r3
 8022b7c:	2b00      	cmp	r3, #0
 8022b7e:	d005      	beq.n	8022b8c <_ZN6Logger7LoadingEv+0x15c>
 8022b80:	4a6a      	ldr	r2, [pc, #424]	; (8022d2c <_ZN6Logger7LoadingEv+0x2fc>)
 8022b82:	7bbb      	ldrb	r3, [r7, #14]
 8022b84:	7013      	strb	r3, [r2, #0]
 8022b86:	4868      	ldr	r0, [pc, #416]	; (8022d28 <_ZN6Logger7LoadingEv+0x2f8>)
 8022b88:	f007 fb0c 	bl	802a1a4 <__cxa_guard_release>
    static uint8_t straight_cnt = 0;
    bool straight = false;
 8022b8c:	2300      	movs	r3, #0
 8022b8e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA){
 8022b92:	687b      	ldr	r3, [r7, #4]
 8022b94:	33e8      	adds	r3, #232	; 0xe8
 8022b96:	4618      	mov	r0, r3
 8022b98:	f7fe f9b6 	bl	8020f08 <_ZN7Encoder15AngularVelocityEv>
 8022b9c:	eef0 7a40 	vmov.f32	s15, s0
 8022ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8022ba4:	f7ff fbd8 	bl	8022358 <_ZSt4fabsf>
 8022ba8:	eeb0 7a40 	vmov.f32	s14, s0
 8022bac:	eddf 7a60 	vldr	s15, [pc, #384]	; 8022d30 <_ZN6Logger7LoadingEv+0x300>
 8022bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022bb8:	bf4c      	ite	mi
 8022bba:	2301      	movmi	r3, #1
 8022bbc:	2300      	movpl	r3, #0
 8022bbe:	b2db      	uxtb	r3, r3
 8022bc0:	2b00      	cmp	r3, #0
 8022bc2:	d00e      	beq.n	8022be2 <_ZN6Logger7LoadingEv+0x1b2>
        if(straight_cnt <= STRAIGHT_JUDGE_COUNT) straight_cnt++;
 8022bc4:	4b5b      	ldr	r3, [pc, #364]	; (8022d34 <_ZN6Logger7LoadingEv+0x304>)
 8022bc6:	781b      	ldrb	r3, [r3, #0]
 8022bc8:	2b05      	cmp	r3, #5
 8022bca:	d806      	bhi.n	8022bda <_ZN6Logger7LoadingEv+0x1aa>
 8022bcc:	4b59      	ldr	r3, [pc, #356]	; (8022d34 <_ZN6Logger7LoadingEv+0x304>)
 8022bce:	781b      	ldrb	r3, [r3, #0]
 8022bd0:	3301      	adds	r3, #1
 8022bd2:	b2da      	uxtb	r2, r3
 8022bd4:	4b57      	ldr	r3, [pc, #348]	; (8022d34 <_ZN6Logger7LoadingEv+0x304>)
 8022bd6:	701a      	strb	r2, [r3, #0]
 8022bd8:	e006      	b.n	8022be8 <_ZN6Logger7LoadingEv+0x1b8>
        else straight = true;
 8022bda:	2301      	movs	r3, #1
 8022bdc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8022be0:	e002      	b.n	8022be8 <_ZN6Logger7LoadingEv+0x1b8>
    }else straight_cnt = 0;
 8022be2:	4b54      	ldr	r3, [pc, #336]	; (8022d34 <_ZN6Logger7LoadingEv+0x304>)
 8022be4:	2200      	movs	r2, #0
 8022be6:	701a      	strb	r2, [r3, #0]
    if(corner > pre_corner && straight) run_corner = true;
 8022be8:	4b4e      	ldr	r3, [pc, #312]	; (8022d24 <_ZN6Logger7LoadingEv+0x2f4>)
 8022bea:	781b      	ldrb	r3, [r3, #0]
 8022bec:	7bfa      	ldrb	r2, [r7, #15]
 8022bee:	429a      	cmp	r2, r3
 8022bf0:	d906      	bls.n	8022c00 <_ZN6Logger7LoadingEv+0x1d0>
 8022bf2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8022bf6:	2b00      	cmp	r3, #0
 8022bf8:	d002      	beq.n	8022c00 <_ZN6Logger7LoadingEv+0x1d0>
 8022bfa:	2301      	movs	r3, #1
 8022bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if(cross > pre_cross) run_cross = true;
 8022c00:	4b4a      	ldr	r3, [pc, #296]	; (8022d2c <_ZN6Logger7LoadingEv+0x2fc>)
 8022c02:	781b      	ldrb	r3, [r3, #0]
 8022c04:	7bba      	ldrb	r2, [r7, #14]
 8022c06:	429a      	cmp	r2, r3
 8022c08:	d902      	bls.n	8022c10 <_ZN6Logger7LoadingEv+0x1e0>
 8022c0a:	2301      	movs	r3, #1
 8022c0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    pre_corner = corner;
 8022c10:	4a44      	ldr	r2, [pc, #272]	; (8022d24 <_ZN6Logger7LoadingEv+0x2f4>)
 8022c12:	7bfb      	ldrb	r3, [r7, #15]
 8022c14:	7013      	strb	r3, [r2, #0]
    pre_cross = cross;
 8022c16:	4a45      	ldr	r2, [pc, #276]	; (8022d2c <_ZN6Logger7LoadingEv+0x2fc>)
 8022c18:	7bbb      	ldrb	r3, [r7, #14]
 8022c1a:	7013      	strb	r3, [r2, #0]

    /* Position correction at corner marker */
    static uint16_t log_corner_address, run_corner_address;
    static uint8_t log_corner_wait = 0, run_corner_wait = 0;
    if(log_corner == true){
 8022c1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8022c20:	2b00      	cmp	r3, #0
 8022c22:	d01f      	beq.n	8022c64 <_ZN6Logger7LoadingEv+0x234>
        if(run_corner_pass == true){
 8022c24:	7c7b      	ldrb	r3, [r7, #17]
 8022c26:	2b00      	cmp	r3, #0
 8022c28:	d011      	beq.n	8022c4e <_ZN6Logger7LoadingEv+0x21e>
            now_address += now_address - run_corner_address;
 8022c2a:	4b3c      	ldr	r3, [pc, #240]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022c2c:	881a      	ldrh	r2, [r3, #0]
 8022c2e:	4b42      	ldr	r3, [pc, #264]	; (8022d38 <_ZN6Logger7LoadingEv+0x308>)
 8022c30:	881b      	ldrh	r3, [r3, #0]
 8022c32:	1ad3      	subs	r3, r2, r3
 8022c34:	b29a      	uxth	r2, r3
 8022c36:	4b39      	ldr	r3, [pc, #228]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022c38:	881b      	ldrh	r3, [r3, #0]
 8022c3a:	4413      	add	r3, r2
 8022c3c:	b29a      	uxth	r2, r3
 8022c3e:	4b37      	ldr	r3, [pc, #220]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022c40:	801a      	strh	r2, [r3, #0]
            run_corner_wait = 0;
 8022c42:	4b3e      	ldr	r3, [pc, #248]	; (8022d3c <_ZN6Logger7LoadingEv+0x30c>)
 8022c44:	2200      	movs	r2, #0
 8022c46:	701a      	strb	r2, [r3, #0]
            run_corner_pass = false;
 8022c48:	2300      	movs	r3, #0
 8022c4a:	747b      	strb	r3, [r7, #17]
 8022c4c:	e017      	b.n	8022c7e <_ZN6Logger7LoadingEv+0x24e>
        }else{
            log_corner_address = now_address;
 8022c4e:	4b33      	ldr	r3, [pc, #204]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022c50:	881a      	ldrh	r2, [r3, #0]
 8022c52:	4b3b      	ldr	r3, [pc, #236]	; (8022d40 <_ZN6Logger7LoadingEv+0x310>)
 8022c54:	801a      	strh	r2, [r3, #0]
            log_corner_pass = true;
 8022c56:	2301      	movs	r3, #1
 8022c58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            log_corner_wait = CORRECTION_WAIT_COUNT;
 8022c5c:	4b39      	ldr	r3, [pc, #228]	; (8022d44 <_ZN6Logger7LoadingEv+0x314>)
 8022c5e:	2203      	movs	r2, #3
 8022c60:	701a      	strb	r2, [r3, #0]
 8022c62:	e00c      	b.n	8022c7e <_ZN6Logger7LoadingEv+0x24e>
        }
    }else{
        if(run_corner_wait > 0) run_corner_wait--;
 8022c64:	4b35      	ldr	r3, [pc, #212]	; (8022d3c <_ZN6Logger7LoadingEv+0x30c>)
 8022c66:	781b      	ldrb	r3, [r3, #0]
 8022c68:	2b00      	cmp	r3, #0
 8022c6a:	d006      	beq.n	8022c7a <_ZN6Logger7LoadingEv+0x24a>
 8022c6c:	4b33      	ldr	r3, [pc, #204]	; (8022d3c <_ZN6Logger7LoadingEv+0x30c>)
 8022c6e:	781b      	ldrb	r3, [r3, #0]
 8022c70:	3b01      	subs	r3, #1
 8022c72:	b2da      	uxtb	r2, r3
 8022c74:	4b31      	ldr	r3, [pc, #196]	; (8022d3c <_ZN6Logger7LoadingEv+0x30c>)
 8022c76:	701a      	strb	r2, [r3, #0]
 8022c78:	e001      	b.n	8022c7e <_ZN6Logger7LoadingEv+0x24e>
        else run_corner_pass = false;
 8022c7a:	2300      	movs	r3, #0
 8022c7c:	747b      	strb	r3, [r7, #17]
    }
    if(run_corner == true){
 8022c7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8022c82:	2b00      	cmp	r3, #0
 8022c84:	d018      	beq.n	8022cb8 <_ZN6Logger7LoadingEv+0x288>
        if(log_corner_pass == true){
 8022c86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8022c8a:	2b00      	cmp	r3, #0
 8022c8c:	d00a      	beq.n	8022ca4 <_ZN6Logger7LoadingEv+0x274>
            now_address = log_corner_address;
 8022c8e:	4b2c      	ldr	r3, [pc, #176]	; (8022d40 <_ZN6Logger7LoadingEv+0x310>)
 8022c90:	881a      	ldrh	r2, [r3, #0]
 8022c92:	4b22      	ldr	r3, [pc, #136]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022c94:	801a      	strh	r2, [r3, #0]
            log_corner_wait = 0;
 8022c96:	4b2b      	ldr	r3, [pc, #172]	; (8022d44 <_ZN6Logger7LoadingEv+0x314>)
 8022c98:	2200      	movs	r2, #0
 8022c9a:	701a      	strb	r2, [r3, #0]
            log_corner_pass = false;
 8022c9c:	2300      	movs	r3, #0
 8022c9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8022ca2:	e017      	b.n	8022cd4 <_ZN6Logger7LoadingEv+0x2a4>
        }else{
            run_corner_address = now_address;
 8022ca4:	4b1d      	ldr	r3, [pc, #116]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022ca6:	881a      	ldrh	r2, [r3, #0]
 8022ca8:	4b23      	ldr	r3, [pc, #140]	; (8022d38 <_ZN6Logger7LoadingEv+0x308>)
 8022caa:	801a      	strh	r2, [r3, #0]
            run_corner_pass = true;
 8022cac:	2301      	movs	r3, #1
 8022cae:	747b      	strb	r3, [r7, #17]
            run_corner_wait = CORRECTION_WAIT_COUNT;
 8022cb0:	4b22      	ldr	r3, [pc, #136]	; (8022d3c <_ZN6Logger7LoadingEv+0x30c>)
 8022cb2:	2203      	movs	r2, #3
 8022cb4:	701a      	strb	r2, [r3, #0]
 8022cb6:	e00d      	b.n	8022cd4 <_ZN6Logger7LoadingEv+0x2a4>
        }
    }else{
        if(log_corner_wait > 0) log_corner_wait--;
 8022cb8:	4b22      	ldr	r3, [pc, #136]	; (8022d44 <_ZN6Logger7LoadingEv+0x314>)
 8022cba:	781b      	ldrb	r3, [r3, #0]
 8022cbc:	2b00      	cmp	r3, #0
 8022cbe:	d006      	beq.n	8022cce <_ZN6Logger7LoadingEv+0x29e>
 8022cc0:	4b20      	ldr	r3, [pc, #128]	; (8022d44 <_ZN6Logger7LoadingEv+0x314>)
 8022cc2:	781b      	ldrb	r3, [r3, #0]
 8022cc4:	3b01      	subs	r3, #1
 8022cc6:	b2da      	uxtb	r2, r3
 8022cc8:	4b1e      	ldr	r3, [pc, #120]	; (8022d44 <_ZN6Logger7LoadingEv+0x314>)
 8022cca:	701a      	strb	r2, [r3, #0]
 8022ccc:	e002      	b.n	8022cd4 <_ZN6Logger7LoadingEv+0x2a4>
        else log_corner_pass = false;
 8022cce:	2300      	movs	r3, #0
 8022cd0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    /* Position correction at cross line */
    static uint16_t log_cross_address, run_cross_address;
    static uint8_t log_cross_wait = 0, run_cross_wait = 0;
    if(log_cross == true){
 8022cd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8022cd8:	2b00      	cmp	r3, #0
 8022cda:	d03d      	beq.n	8022d58 <_ZN6Logger7LoadingEv+0x328>
        if(run_cross_pass == true){
 8022cdc:	7c3b      	ldrb	r3, [r7, #16]
 8022cde:	2b00      	cmp	r3, #0
 8022ce0:	d011      	beq.n	8022d06 <_ZN6Logger7LoadingEv+0x2d6>
            now_address += now_address - run_cross_address;
 8022ce2:	4b0e      	ldr	r3, [pc, #56]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022ce4:	881a      	ldrh	r2, [r3, #0]
 8022ce6:	4b18      	ldr	r3, [pc, #96]	; (8022d48 <_ZN6Logger7LoadingEv+0x318>)
 8022ce8:	881b      	ldrh	r3, [r3, #0]
 8022cea:	1ad3      	subs	r3, r2, r3
 8022cec:	b29a      	uxth	r2, r3
 8022cee:	4b0b      	ldr	r3, [pc, #44]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022cf0:	881b      	ldrh	r3, [r3, #0]
 8022cf2:	4413      	add	r3, r2
 8022cf4:	b29a      	uxth	r2, r3
 8022cf6:	4b09      	ldr	r3, [pc, #36]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022cf8:	801a      	strh	r2, [r3, #0]
            run_cross_wait = 0;
 8022cfa:	4b14      	ldr	r3, [pc, #80]	; (8022d4c <_ZN6Logger7LoadingEv+0x31c>)
 8022cfc:	2200      	movs	r2, #0
 8022cfe:	701a      	strb	r2, [r3, #0]
            run_cross_pass = false;
 8022d00:	2300      	movs	r3, #0
 8022d02:	743b      	strb	r3, [r7, #16]
 8022d04:	e035      	b.n	8022d72 <_ZN6Logger7LoadingEv+0x342>
        }else{
            log_cross_address = now_address;
 8022d06:	4b05      	ldr	r3, [pc, #20]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022d08:	881a      	ldrh	r2, [r3, #0]
 8022d0a:	4b11      	ldr	r3, [pc, #68]	; (8022d50 <_ZN6Logger7LoadingEv+0x320>)
 8022d0c:	801a      	strh	r2, [r3, #0]
            log_cross_pass = true;
 8022d0e:	2301      	movs	r3, #1
 8022d10:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            log_cross_wait = CORRECTION_WAIT_COUNT;
 8022d14:	4b0f      	ldr	r3, [pc, #60]	; (8022d54 <_ZN6Logger7LoadingEv+0x324>)
 8022d16:	2203      	movs	r2, #3
 8022d18:	701a      	strb	r2, [r3, #0]
 8022d1a:	e02a      	b.n	8022d72 <_ZN6Logger7LoadingEv+0x342>
 8022d1c:	20000098 	.word	0x20000098
 8022d20:	2000009c 	.word	0x2000009c
 8022d24:	2000009a 	.word	0x2000009a
 8022d28:	200000a4 	.word	0x200000a4
 8022d2c:	200000a0 	.word	0x200000a0
 8022d30:	43ca0000 	.word	0x43ca0000
 8022d34:	200000a8 	.word	0x200000a8
 8022d38:	200000ac 	.word	0x200000ac
 8022d3c:	200000af 	.word	0x200000af
 8022d40:	200000aa 	.word	0x200000aa
 8022d44:	200000ae 	.word	0x200000ae
 8022d48:	200000b2 	.word	0x200000b2
 8022d4c:	200000b5 	.word	0x200000b5
 8022d50:	200000b0 	.word	0x200000b0
 8022d54:	200000b4 	.word	0x200000b4
        }
    }else{
        if(run_cross_wait > 0) run_cross_wait--;
 8022d58:	4b8e      	ldr	r3, [pc, #568]	; (8022f94 <_ZN6Logger7LoadingEv+0x564>)
 8022d5a:	781b      	ldrb	r3, [r3, #0]
 8022d5c:	2b00      	cmp	r3, #0
 8022d5e:	d006      	beq.n	8022d6e <_ZN6Logger7LoadingEv+0x33e>
 8022d60:	4b8c      	ldr	r3, [pc, #560]	; (8022f94 <_ZN6Logger7LoadingEv+0x564>)
 8022d62:	781b      	ldrb	r3, [r3, #0]
 8022d64:	3b01      	subs	r3, #1
 8022d66:	b2da      	uxtb	r2, r3
 8022d68:	4b8a      	ldr	r3, [pc, #552]	; (8022f94 <_ZN6Logger7LoadingEv+0x564>)
 8022d6a:	701a      	strb	r2, [r3, #0]
 8022d6c:	e001      	b.n	8022d72 <_ZN6Logger7LoadingEv+0x342>
        else run_cross_pass = false;
 8022d6e:	2300      	movs	r3, #0
 8022d70:	743b      	strb	r3, [r7, #16]
    }
    if(run_cross == true){
 8022d72:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8022d76:	2b00      	cmp	r3, #0
 8022d78:	d018      	beq.n	8022dac <_ZN6Logger7LoadingEv+0x37c>
        if(log_cross_pass == true){
 8022d7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8022d7e:	2b00      	cmp	r3, #0
 8022d80:	d00a      	beq.n	8022d98 <_ZN6Logger7LoadingEv+0x368>
            now_address = log_cross_address;
 8022d82:	4b85      	ldr	r3, [pc, #532]	; (8022f98 <_ZN6Logger7LoadingEv+0x568>)
 8022d84:	881a      	ldrh	r2, [r3, #0]
 8022d86:	4b85      	ldr	r3, [pc, #532]	; (8022f9c <_ZN6Logger7LoadingEv+0x56c>)
 8022d88:	801a      	strh	r2, [r3, #0]
            log_cross_wait = 0;
 8022d8a:	4b85      	ldr	r3, [pc, #532]	; (8022fa0 <_ZN6Logger7LoadingEv+0x570>)
 8022d8c:	2200      	movs	r2, #0
 8022d8e:	701a      	strb	r2, [r3, #0]
            log_cross_pass = false;
 8022d90:	2300      	movs	r3, #0
 8022d92:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8022d96:	e017      	b.n	8022dc8 <_ZN6Logger7LoadingEv+0x398>
        }else{
            run_cross_address = now_address;
 8022d98:	4b80      	ldr	r3, [pc, #512]	; (8022f9c <_ZN6Logger7LoadingEv+0x56c>)
 8022d9a:	881a      	ldrh	r2, [r3, #0]
 8022d9c:	4b81      	ldr	r3, [pc, #516]	; (8022fa4 <_ZN6Logger7LoadingEv+0x574>)
 8022d9e:	801a      	strh	r2, [r3, #0]
            run_cross_pass = true;
 8022da0:	2301      	movs	r3, #1
 8022da2:	743b      	strb	r3, [r7, #16]
            run_cross_wait = CORRECTION_WAIT_COUNT;
 8022da4:	4b7b      	ldr	r3, [pc, #492]	; (8022f94 <_ZN6Logger7LoadingEv+0x564>)
 8022da6:	2203      	movs	r2, #3
 8022da8:	701a      	strb	r2, [r3, #0]
 8022daa:	e00d      	b.n	8022dc8 <_ZN6Logger7LoadingEv+0x398>
        }
    }else{
        if(log_cross_wait > 0) log_cross_wait--;
 8022dac:	4b7c      	ldr	r3, [pc, #496]	; (8022fa0 <_ZN6Logger7LoadingEv+0x570>)
 8022dae:	781b      	ldrb	r3, [r3, #0]
 8022db0:	2b00      	cmp	r3, #0
 8022db2:	d006      	beq.n	8022dc2 <_ZN6Logger7LoadingEv+0x392>
 8022db4:	4b7a      	ldr	r3, [pc, #488]	; (8022fa0 <_ZN6Logger7LoadingEv+0x570>)
 8022db6:	781b      	ldrb	r3, [r3, #0]
 8022db8:	3b01      	subs	r3, #1
 8022dba:	b2da      	uxtb	r2, r3
 8022dbc:	4b78      	ldr	r3, [pc, #480]	; (8022fa0 <_ZN6Logger7LoadingEv+0x570>)
 8022dbe:	701a      	strb	r2, [r3, #0]
 8022dc0:	e002      	b.n	8022dc8 <_ZN6Logger7LoadingEv+0x398>
        else log_cross_pass = false;
 8022dc2:	2300      	movs	r3, #0
 8022dc4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    /* Accel straight */
    uint8_t accel_step = *(reinterpret_cast<uint8_t*>(now_address + HEAD_ADDRESS_BLOCK_D));
 8022dc8:	4b74      	ldr	r3, [pc, #464]	; (8022f9c <_ZN6Logger7LoadingEv+0x56c>)
 8022dca:	881b      	ldrh	r3, [r3, #0]
 8022dcc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022dd0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022dd4:	781b      	ldrb	r3, [r3, #0]
 8022dd6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(!straight) accel_step = 0x10;
 8022dda:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8022dde:	f083 0301 	eor.w	r3, r3, #1
 8022de2:	b2db      	uxtb	r3, r3
 8022de4:	2b00      	cmp	r3, #0
 8022de6:	d002      	beq.n	8022dee <_ZN6Logger7LoadingEv+0x3be>
 8022de8:	2310      	movs	r3, #16
 8022dea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    float target = MIN_VELOCITY;
 8022dee:	4b6e      	ldr	r3, [pc, #440]	; (8022fa8 <_ZN6Logger7LoadingEv+0x578>)
 8022df0:	627b      	str	r3, [r7, #36]	; 0x24
    static float pre_target = MIN_VELOCITY;
    switch(accel_step){
 8022df2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8022df6:	3b01      	subs	r3, #1
 8022df8:	2b4f      	cmp	r3, #79	; 0x4f
 8022dfa:	f200 80b5 	bhi.w	8022f68 <_ZN6Logger7LoadingEv+0x538>
 8022dfe:	a201      	add	r2, pc, #4	; (adr r2, 8022e04 <_ZN6Logger7LoadingEv+0x3d4>)
 8022e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022e04:	08022f4b 	.word	0x08022f4b
 8022e08:	08022f51 	.word	0x08022f51
 8022e0c:	08022f57 	.word	0x08022f57
 8022e10:	08022f5d 	.word	0x08022f5d
 8022e14:	08022f63 	.word	0x08022f63
 8022e18:	08022f69 	.word	0x08022f69
 8022e1c:	08022f69 	.word	0x08022f69
 8022e20:	08022f69 	.word	0x08022f69
 8022e24:	08022f69 	.word	0x08022f69
 8022e28:	08022f69 	.word	0x08022f69
 8022e2c:	08022f69 	.word	0x08022f69
 8022e30:	08022f69 	.word	0x08022f69
 8022e34:	08022f69 	.word	0x08022f69
 8022e38:	08022f69 	.word	0x08022f69
 8022e3c:	08022f69 	.word	0x08022f69
 8022e40:	08022f45 	.word	0x08022f45
 8022e44:	08022f69 	.word	0x08022f69
 8022e48:	08022f69 	.word	0x08022f69
 8022e4c:	08022f69 	.word	0x08022f69
 8022e50:	08022f69 	.word	0x08022f69
 8022e54:	08022f69 	.word	0x08022f69
 8022e58:	08022f69 	.word	0x08022f69
 8022e5c:	08022f69 	.word	0x08022f69
 8022e60:	08022f69 	.word	0x08022f69
 8022e64:	08022f69 	.word	0x08022f69
 8022e68:	08022f69 	.word	0x08022f69
 8022e6c:	08022f69 	.word	0x08022f69
 8022e70:	08022f69 	.word	0x08022f69
 8022e74:	08022f69 	.word	0x08022f69
 8022e78:	08022f69 	.word	0x08022f69
 8022e7c:	08022f69 	.word	0x08022f69
 8022e80:	08022f4b 	.word	0x08022f4b
 8022e84:	08022f69 	.word	0x08022f69
 8022e88:	08022f69 	.word	0x08022f69
 8022e8c:	08022f69 	.word	0x08022f69
 8022e90:	08022f69 	.word	0x08022f69
 8022e94:	08022f69 	.word	0x08022f69
 8022e98:	08022f69 	.word	0x08022f69
 8022e9c:	08022f69 	.word	0x08022f69
 8022ea0:	08022f69 	.word	0x08022f69
 8022ea4:	08022f69 	.word	0x08022f69
 8022ea8:	08022f69 	.word	0x08022f69
 8022eac:	08022f69 	.word	0x08022f69
 8022eb0:	08022f69 	.word	0x08022f69
 8022eb4:	08022f69 	.word	0x08022f69
 8022eb8:	08022f69 	.word	0x08022f69
 8022ebc:	08022f69 	.word	0x08022f69
 8022ec0:	08022f51 	.word	0x08022f51
 8022ec4:	08022f69 	.word	0x08022f69
 8022ec8:	08022f69 	.word	0x08022f69
 8022ecc:	08022f69 	.word	0x08022f69
 8022ed0:	08022f69 	.word	0x08022f69
 8022ed4:	08022f69 	.word	0x08022f69
 8022ed8:	08022f69 	.word	0x08022f69
 8022edc:	08022f69 	.word	0x08022f69
 8022ee0:	08022f69 	.word	0x08022f69
 8022ee4:	08022f69 	.word	0x08022f69
 8022ee8:	08022f69 	.word	0x08022f69
 8022eec:	08022f69 	.word	0x08022f69
 8022ef0:	08022f69 	.word	0x08022f69
 8022ef4:	08022f69 	.word	0x08022f69
 8022ef8:	08022f69 	.word	0x08022f69
 8022efc:	08022f69 	.word	0x08022f69
 8022f00:	08022f57 	.word	0x08022f57
 8022f04:	08022f69 	.word	0x08022f69
 8022f08:	08022f69 	.word	0x08022f69
 8022f0c:	08022f69 	.word	0x08022f69
 8022f10:	08022f69 	.word	0x08022f69
 8022f14:	08022f69 	.word	0x08022f69
 8022f18:	08022f69 	.word	0x08022f69
 8022f1c:	08022f69 	.word	0x08022f69
 8022f20:	08022f69 	.word	0x08022f69
 8022f24:	08022f69 	.word	0x08022f69
 8022f28:	08022f69 	.word	0x08022f69
 8022f2c:	08022f69 	.word	0x08022f69
 8022f30:	08022f69 	.word	0x08022f69
 8022f34:	08022f69 	.word	0x08022f69
 8022f38:	08022f69 	.word	0x08022f69
 8022f3c:	08022f69 	.word	0x08022f69
 8022f40:	08022f5d 	.word	0x08022f5d
        case 0x10: target = MIN_VELOCITY; break;
 8022f44:	4b18      	ldr	r3, [pc, #96]	; (8022fa8 <_ZN6Logger7LoadingEv+0x578>)
 8022f46:	627b      	str	r3, [r7, #36]	; 0x24
 8022f48:	e012      	b.n	8022f70 <_ZN6Logger7LoadingEv+0x540>
        case 0x01:
        case 0x20: target = MIN_VELOCITY + (ACCEL_VELOCITY * 1); break;
 8022f4a:	4b18      	ldr	r3, [pc, #96]	; (8022fac <_ZN6Logger7LoadingEv+0x57c>)
 8022f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8022f4e:	e00f      	b.n	8022f70 <_ZN6Logger7LoadingEv+0x540>
        case 0x02:
        case 0x30: target = MIN_VELOCITY + (ACCEL_VELOCITY * 2); break;
 8022f50:	4b17      	ldr	r3, [pc, #92]	; (8022fb0 <_ZN6Logger7LoadingEv+0x580>)
 8022f52:	627b      	str	r3, [r7, #36]	; 0x24
 8022f54:	e00c      	b.n	8022f70 <_ZN6Logger7LoadingEv+0x540>
        case 0x03:
        case 0x40: target = MIN_VELOCITY + (ACCEL_VELOCITY * 3); break;
 8022f56:	4b17      	ldr	r3, [pc, #92]	; (8022fb4 <_ZN6Logger7LoadingEv+0x584>)
 8022f58:	627b      	str	r3, [r7, #36]	; 0x24
 8022f5a:	e009      	b.n	8022f70 <_ZN6Logger7LoadingEv+0x540>
        case 0x04:
        case 0x50: target = MIN_VELOCITY + (ACCEL_VELOCITY * 4); break;
 8022f5c:	4b16      	ldr	r3, [pc, #88]	; (8022fb8 <_ZN6Logger7LoadingEv+0x588>)
 8022f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8022f60:	e006      	b.n	8022f70 <_ZN6Logger7LoadingEv+0x540>
        case 0x05: target = MIN_VELOCITY + (ACCEL_VELOCITY * 5); break;
 8022f62:	4b16      	ldr	r3, [pc, #88]	; (8022fbc <_ZN6Logger7LoadingEv+0x58c>)
 8022f64:	627b      	str	r3, [r7, #36]	; 0x24
 8022f66:	e003      	b.n	8022f70 <_ZN6Logger7LoadingEv+0x540>
        default: target = pre_target; break;
 8022f68:	4b15      	ldr	r3, [pc, #84]	; (8022fc0 <_ZN6Logger7LoadingEv+0x590>)
 8022f6a:	681b      	ldr	r3, [r3, #0]
 8022f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8022f6e:	bf00      	nop
    }
    pre_target = target;
 8022f70:	4a13      	ldr	r2, [pc, #76]	; (8022fc0 <_ZN6Logger7LoadingEv+0x590>)
 8022f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f74:	6013      	str	r3, [r2, #0]
    target_velocity_ = target;
 8022f76:	687b      	ldr	r3, [r7, #4]
 8022f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022f7a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

    now_address++;
 8022f7e:	4b07      	ldr	r3, [pc, #28]	; (8022f9c <_ZN6Logger7LoadingEv+0x56c>)
 8022f80:	881b      	ldrh	r3, [r3, #0]
 8022f82:	3301      	adds	r3, #1
 8022f84:	b29a      	uxth	r2, r3
 8022f86:	4b05      	ldr	r3, [pc, #20]	; (8022f9c <_ZN6Logger7LoadingEv+0x56c>)
 8022f88:	801a      	strh	r2, [r3, #0]
 8022f8a:	e000      	b.n	8022f8e <_ZN6Logger7LoadingEv+0x55e>
    if(distance < LOGGING_CONST_DISTANCE) return;
 8022f8c:	bf00      	nop
}
 8022f8e:	3730      	adds	r7, #48	; 0x30
 8022f90:	46bd      	mov	sp, r7
 8022f92:	bd80      	pop	{r7, pc}
 8022f94:	200000b5 	.word	0x200000b5
 8022f98:	200000b0 	.word	0x200000b0
 8022f9c:	20000098 	.word	0x20000098
 8022fa0:	200000b4 	.word	0x200000b4
 8022fa4:	200000b2 	.word	0x200000b2
 8022fa8:	3fa66666 	.word	0x3fa66666
 8022fac:	3fe66666 	.word	0x3fe66666
 8022fb0:	40133333 	.word	0x40133333
 8022fb4:	40333333 	.word	0x40333333
 8022fb8:	40533333 	.word	0x40533333
 8022fbc:	40733333 	.word	0x40733333
 8022fc0:	2000000c 	.word	0x2000000c

08022fc4 <_ZN6Logger17GetTargetVelocityEv>:

float Logger::GetTargetVelocity()
{
 8022fc4:	b480      	push	{r7}
 8022fc6:	b083      	sub	sp, #12
 8022fc8:	af00      	add	r7, sp, #0
 8022fca:	6078      	str	r0, [r7, #4]
    return target_velocity_;
 8022fcc:	687b      	ldr	r3, [r7, #4]
 8022fce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8022fd2:	ee07 3a90 	vmov	s15, r3
 8022fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8022fda:	370c      	adds	r7, #12
 8022fdc:	46bd      	mov	sp, r7
 8022fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fe2:	4770      	bx	lr

08022fe4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8022fe4:	b580      	push	{r7, lr}
 8022fe6:	b082      	sub	sp, #8
 8022fe8:	af00      	add	r7, sp, #0
 8022fea:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8022fec:	687b      	ldr	r3, [r7, #4]
 8022fee:	681b      	ldr	r3, [r3, #0]
 8022ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022ff4:	d101      	bne.n	8022ffa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 8022ff6:	f002 ffad 	bl	8025f54 <InterruptTim2>
  }
  if(htim->Instance == TIM6)
 8022ffa:	687b      	ldr	r3, [r7, #4]
 8022ffc:	681b      	ldr	r3, [r3, #0]
 8022ffe:	4a08      	ldr	r2, [pc, #32]	; (8023020 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8023000:	4293      	cmp	r3, r2
 8023002:	d101      	bne.n	8023008 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim6();
 8023004:	f002 ff96 	bl	8025f34 <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 8023008:	687b      	ldr	r3, [r7, #4]
 802300a:	681b      	ldr	r3, [r3, #0]
 802300c:	4a05      	ldr	r2, [pc, #20]	; (8023024 <HAL_TIM_PeriodElapsedCallback+0x40>)
 802300e:	4293      	cmp	r3, r2
 8023010:	d101      	bne.n	8023016 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim7();
 8023012:	f002 ff7f 	bl	8025f14 <InterruptTim7>
  }
}
 8023016:	bf00      	nop
 8023018:	3708      	adds	r7, #8
 802301a:	46bd      	mov	sp, r7
 802301c:	bd80      	pop	{r7, pc}
 802301e:	bf00      	nop
 8023020:	40001000 	.word	0x40001000
 8023024:	40001400 	.word	0x40001400

08023028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8023028:	b580      	push	{r7, lr}
 802302a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802302c:	f003 f82e 	bl	802608c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8023030:	f000 f822 	bl	8023078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8023034:	f000 fd68 	bl	8023b08 <MX_GPIO_Init>
  MX_DMA_Init();
 8023038:	f000 fd46 	bl	8023ac8 <MX_DMA_Init>
  MX_ADC1_Init();
 802303c:	f000 f886 	bl	802314c <MX_ADC1_Init>
  MX_I2C2_Init();
 8023040:	f000 f98c 	bl	802335c <MX_I2C2_Init>
  MX_SPI3_Init();
 8023044:	f000 f9b8 	bl	80233b8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8023048:	f000 f9ec 	bl	8023424 <MX_TIM1_Init>
  MX_TIM3_Init();
 802304c:	f000 fac8 	bl	80235e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8023050:	f000 fb40 	bl	80236d4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8023054:	f000 fbe0 	bl	8023818 <MX_TIM6_Init>
  MX_TIM7_Init();
 8023058:	f000 fc14 	bl	8023884 <MX_TIM7_Init>
  MX_TIM8_Init();
 802305c:	f000 fc48 	bl	80238f0 <MX_TIM8_Init>
  MX_TIM11_Init();
 8023060:	f000 fc9e 	bl	80239a0 <MX_TIM11_Init>
  MX_TIM12_Init();
 8023064:	f000 fcea 	bl	8023a3c <MX_TIM12_Init>
  MX_TIM2_Init();
 8023068:	f000 fa6c 	bl	8023544 <MX_TIM2_Init>
  MX_TIM5_Init();
 802306c:	f000 fb86 	bl	802377c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8023070:	f002 ff46 	bl	8025f00 <Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8023074:	e7fe      	b.n	8023074 <main+0x4c>
	...

08023078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8023078:	b580      	push	{r7, lr}
 802307a:	b094      	sub	sp, #80	; 0x50
 802307c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802307e:	f107 0320 	add.w	r3, r7, #32
 8023082:	2230      	movs	r2, #48	; 0x30
 8023084:	2100      	movs	r1, #0
 8023086:	4618      	mov	r0, r3
 8023088:	f007 f8bf 	bl	802a20a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802308c:	f107 030c 	add.w	r3, r7, #12
 8023090:	2200      	movs	r2, #0
 8023092:	601a      	str	r2, [r3, #0]
 8023094:	605a      	str	r2, [r3, #4]
 8023096:	609a      	str	r2, [r3, #8]
 8023098:	60da      	str	r2, [r3, #12]
 802309a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 802309c:	2300      	movs	r3, #0
 802309e:	60bb      	str	r3, [r7, #8]
 80230a0:	4b28      	ldr	r3, [pc, #160]	; (8023144 <SystemClock_Config+0xcc>)
 80230a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80230a4:	4a27      	ldr	r2, [pc, #156]	; (8023144 <SystemClock_Config+0xcc>)
 80230a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80230aa:	6413      	str	r3, [r2, #64]	; 0x40
 80230ac:	4b25      	ldr	r3, [pc, #148]	; (8023144 <SystemClock_Config+0xcc>)
 80230ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80230b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80230b4:	60bb      	str	r3, [r7, #8]
 80230b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80230b8:	2300      	movs	r3, #0
 80230ba:	607b      	str	r3, [r7, #4]
 80230bc:	4b22      	ldr	r3, [pc, #136]	; (8023148 <SystemClock_Config+0xd0>)
 80230be:	681b      	ldr	r3, [r3, #0]
 80230c0:	4a21      	ldr	r2, [pc, #132]	; (8023148 <SystemClock_Config+0xd0>)
 80230c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80230c6:	6013      	str	r3, [r2, #0]
 80230c8:	4b1f      	ldr	r3, [pc, #124]	; (8023148 <SystemClock_Config+0xd0>)
 80230ca:	681b      	ldr	r3, [r3, #0]
 80230cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80230d0:	607b      	str	r3, [r7, #4]
 80230d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80230d4:	2301      	movs	r3, #1
 80230d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80230d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80230dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80230de:	2302      	movs	r3, #2
 80230e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80230e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80230e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80230e8:	2306      	movs	r3, #6
 80230ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80230ec:	23a8      	movs	r3, #168	; 0xa8
 80230ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80230f0:	2302      	movs	r3, #2
 80230f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80230f4:	2304      	movs	r3, #4
 80230f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80230f8:	f107 0320 	add.w	r3, r7, #32
 80230fc:	4618      	mov	r0, r3
 80230fe:	f004 fea7 	bl	8027e50 <HAL_RCC_OscConfig>
 8023102:	4603      	mov	r3, r0
 8023104:	2b00      	cmp	r3, #0
 8023106:	d001      	beq.n	802310c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8023108:	f000 fdce 	bl	8023ca8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802310c:	230f      	movs	r3, #15
 802310e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8023110:	2302      	movs	r3, #2
 8023112:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8023114:	2300      	movs	r3, #0
 8023116:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8023118:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802311c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 802311e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023122:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8023124:	f107 030c 	add.w	r3, r7, #12
 8023128:	2105      	movs	r1, #5
 802312a:	4618      	mov	r0, r3
 802312c:	f005 f900 	bl	8028330 <HAL_RCC_ClockConfig>
 8023130:	4603      	mov	r3, r0
 8023132:	2b00      	cmp	r3, #0
 8023134:	d001      	beq.n	802313a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8023136:	f000 fdb7 	bl	8023ca8 <Error_Handler>
  }
}
 802313a:	bf00      	nop
 802313c:	3750      	adds	r7, #80	; 0x50
 802313e:	46bd      	mov	sp, r7
 8023140:	bd80      	pop	{r7, pc}
 8023142:	bf00      	nop
 8023144:	40023800 	.word	0x40023800
 8023148:	40007000 	.word	0x40007000

0802314c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 802314c:	b580      	push	{r7, lr}
 802314e:	b084      	sub	sp, #16
 8023150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8023152:	463b      	mov	r3, r7
 8023154:	2200      	movs	r2, #0
 8023156:	601a      	str	r2, [r3, #0]
 8023158:	605a      	str	r2, [r3, #4]
 802315a:	609a      	str	r2, [r3, #8]
 802315c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 802315e:	4b7c      	ldr	r3, [pc, #496]	; (8023350 <MX_ADC1_Init+0x204>)
 8023160:	4a7c      	ldr	r2, [pc, #496]	; (8023354 <MX_ADC1_Init+0x208>)
 8023162:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8023164:	4b7a      	ldr	r3, [pc, #488]	; (8023350 <MX_ADC1_Init+0x204>)
 8023166:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802316a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 802316c:	4b78      	ldr	r3, [pc, #480]	; (8023350 <MX_ADC1_Init+0x204>)
 802316e:	2200      	movs	r2, #0
 8023170:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8023172:	4b77      	ldr	r3, [pc, #476]	; (8023350 <MX_ADC1_Init+0x204>)
 8023174:	2201      	movs	r2, #1
 8023176:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8023178:	4b75      	ldr	r3, [pc, #468]	; (8023350 <MX_ADC1_Init+0x204>)
 802317a:	2201      	movs	r2, #1
 802317c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 802317e:	4b74      	ldr	r3, [pc, #464]	; (8023350 <MX_ADC1_Init+0x204>)
 8023180:	2200      	movs	r2, #0
 8023182:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8023186:	4b72      	ldr	r3, [pc, #456]	; (8023350 <MX_ADC1_Init+0x204>)
 8023188:	2200      	movs	r2, #0
 802318a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 802318c:	4b70      	ldr	r3, [pc, #448]	; (8023350 <MX_ADC1_Init+0x204>)
 802318e:	4a72      	ldr	r2, [pc, #456]	; (8023358 <MX_ADC1_Init+0x20c>)
 8023190:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8023192:	4b6f      	ldr	r3, [pc, #444]	; (8023350 <MX_ADC1_Init+0x204>)
 8023194:	2200      	movs	r2, #0
 8023196:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8023198:	4b6d      	ldr	r3, [pc, #436]	; (8023350 <MX_ADC1_Init+0x204>)
 802319a:	220e      	movs	r2, #14
 802319c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 802319e:	4b6c      	ldr	r3, [pc, #432]	; (8023350 <MX_ADC1_Init+0x204>)
 80231a0:	2201      	movs	r2, #1
 80231a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80231a6:	4b6a      	ldr	r3, [pc, #424]	; (8023350 <MX_ADC1_Init+0x204>)
 80231a8:	2201      	movs	r2, #1
 80231aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80231ac:	4868      	ldr	r0, [pc, #416]	; (8023350 <MX_ADC1_Init+0x204>)
 80231ae:	f003 f801 	bl	80261b4 <HAL_ADC_Init>
 80231b2:	4603      	mov	r3, r0
 80231b4:	2b00      	cmp	r3, #0
 80231b6:	d001      	beq.n	80231bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80231b8:	f000 fd76 	bl	8023ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80231bc:	2303      	movs	r3, #3
 80231be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80231c0:	2301      	movs	r3, #1
 80231c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80231c4:	2301      	movs	r3, #1
 80231c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80231c8:	463b      	mov	r3, r7
 80231ca:	4619      	mov	r1, r3
 80231cc:	4860      	ldr	r0, [pc, #384]	; (8023350 <MX_ADC1_Init+0x204>)
 80231ce:	f003 f945 	bl	802645c <HAL_ADC_ConfigChannel>
 80231d2:	4603      	mov	r3, r0
 80231d4:	2b00      	cmp	r3, #0
 80231d6:	d001      	beq.n	80231dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80231d8:	f000 fd66 	bl	8023ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80231dc:	2304      	movs	r3, #4
 80231de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80231e0:	2302      	movs	r3, #2
 80231e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80231e4:	463b      	mov	r3, r7
 80231e6:	4619      	mov	r1, r3
 80231e8:	4859      	ldr	r0, [pc, #356]	; (8023350 <MX_ADC1_Init+0x204>)
 80231ea:	f003 f937 	bl	802645c <HAL_ADC_ConfigChannel>
 80231ee:	4603      	mov	r3, r0
 80231f0:	2b00      	cmp	r3, #0
 80231f2:	d001      	beq.n	80231f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80231f4:	f000 fd58 	bl	8023ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80231f8:	2305      	movs	r3, #5
 80231fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80231fc:	2303      	movs	r3, #3
 80231fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023200:	463b      	mov	r3, r7
 8023202:	4619      	mov	r1, r3
 8023204:	4852      	ldr	r0, [pc, #328]	; (8023350 <MX_ADC1_Init+0x204>)
 8023206:	f003 f929 	bl	802645c <HAL_ADC_ConfigChannel>
 802320a:	4603      	mov	r3, r0
 802320c:	2b00      	cmp	r3, #0
 802320e:	d001      	beq.n	8023214 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8023210:	f000 fd4a 	bl	8023ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8023214:	2306      	movs	r3, #6
 8023216:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8023218:	2304      	movs	r3, #4
 802321a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802321c:	463b      	mov	r3, r7
 802321e:	4619      	mov	r1, r3
 8023220:	484b      	ldr	r0, [pc, #300]	; (8023350 <MX_ADC1_Init+0x204>)
 8023222:	f003 f91b 	bl	802645c <HAL_ADC_ConfigChannel>
 8023226:	4603      	mov	r3, r0
 8023228:	2b00      	cmp	r3, #0
 802322a:	d001      	beq.n	8023230 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 802322c:	f000 fd3c 	bl	8023ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8023230:	2307      	movs	r3, #7
 8023232:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8023234:	2305      	movs	r3, #5
 8023236:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023238:	463b      	mov	r3, r7
 802323a:	4619      	mov	r1, r3
 802323c:	4844      	ldr	r0, [pc, #272]	; (8023350 <MX_ADC1_Init+0x204>)
 802323e:	f003 f90d 	bl	802645c <HAL_ADC_ConfigChannel>
 8023242:	4603      	mov	r3, r0
 8023244:	2b00      	cmp	r3, #0
 8023246:	d001      	beq.n	802324c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8023248:	f000 fd2e 	bl	8023ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 802324c:	230e      	movs	r3, #14
 802324e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8023250:	2306      	movs	r3, #6
 8023252:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023254:	463b      	mov	r3, r7
 8023256:	4619      	mov	r1, r3
 8023258:	483d      	ldr	r0, [pc, #244]	; (8023350 <MX_ADC1_Init+0x204>)
 802325a:	f003 f8ff 	bl	802645c <HAL_ADC_ConfigChannel>
 802325e:	4603      	mov	r3, r0
 8023260:	2b00      	cmp	r3, #0
 8023262:	d001      	beq.n	8023268 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8023264:	f000 fd20 	bl	8023ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8023268:	230f      	movs	r3, #15
 802326a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 802326c:	2307      	movs	r3, #7
 802326e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023270:	463b      	mov	r3, r7
 8023272:	4619      	mov	r1, r3
 8023274:	4836      	ldr	r0, [pc, #216]	; (8023350 <MX_ADC1_Init+0x204>)
 8023276:	f003 f8f1 	bl	802645c <HAL_ADC_ConfigChannel>
 802327a:	4603      	mov	r3, r0
 802327c:	2b00      	cmp	r3, #0
 802327e:	d001      	beq.n	8023284 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8023280:	f000 fd12 	bl	8023ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8023284:	230a      	movs	r3, #10
 8023286:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8023288:	2308      	movs	r3, #8
 802328a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802328c:	463b      	mov	r3, r7
 802328e:	4619      	mov	r1, r3
 8023290:	482f      	ldr	r0, [pc, #188]	; (8023350 <MX_ADC1_Init+0x204>)
 8023292:	f003 f8e3 	bl	802645c <HAL_ADC_ConfigChannel>
 8023296:	4603      	mov	r3, r0
 8023298:	2b00      	cmp	r3, #0
 802329a:	d001      	beq.n	80232a0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 802329c:	f000 fd04 	bl	8023ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80232a0:	230b      	movs	r3, #11
 80232a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80232a4:	2309      	movs	r3, #9
 80232a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80232a8:	463b      	mov	r3, r7
 80232aa:	4619      	mov	r1, r3
 80232ac:	4828      	ldr	r0, [pc, #160]	; (8023350 <MX_ADC1_Init+0x204>)
 80232ae:	f003 f8d5 	bl	802645c <HAL_ADC_ConfigChannel>
 80232b2:	4603      	mov	r3, r0
 80232b4:	2b00      	cmp	r3, #0
 80232b6:	d001      	beq.n	80232bc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80232b8:	f000 fcf6 	bl	8023ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80232bc:	230c      	movs	r3, #12
 80232be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80232c0:	230a      	movs	r3, #10
 80232c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80232c4:	463b      	mov	r3, r7
 80232c6:	4619      	mov	r1, r3
 80232c8:	4821      	ldr	r0, [pc, #132]	; (8023350 <MX_ADC1_Init+0x204>)
 80232ca:	f003 f8c7 	bl	802645c <HAL_ADC_ConfigChannel>
 80232ce:	4603      	mov	r3, r0
 80232d0:	2b00      	cmp	r3, #0
 80232d2:	d001      	beq.n	80232d8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80232d4:	f000 fce8 	bl	8023ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80232d8:	230d      	movs	r3, #13
 80232da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80232dc:	230b      	movs	r3, #11
 80232de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80232e0:	463b      	mov	r3, r7
 80232e2:	4619      	mov	r1, r3
 80232e4:	481a      	ldr	r0, [pc, #104]	; (8023350 <MX_ADC1_Init+0x204>)
 80232e6:	f003 f8b9 	bl	802645c <HAL_ADC_ConfigChannel>
 80232ea:	4603      	mov	r3, r0
 80232ec:	2b00      	cmp	r3, #0
 80232ee:	d001      	beq.n	80232f4 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80232f0:	f000 fcda 	bl	8023ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80232f4:	2302      	movs	r3, #2
 80232f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80232f8:	230c      	movs	r3, #12
 80232fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80232fc:	463b      	mov	r3, r7
 80232fe:	4619      	mov	r1, r3
 8023300:	4813      	ldr	r0, [pc, #76]	; (8023350 <MX_ADC1_Init+0x204>)
 8023302:	f003 f8ab 	bl	802645c <HAL_ADC_ConfigChannel>
 8023306:	4603      	mov	r3, r0
 8023308:	2b00      	cmp	r3, #0
 802330a:	d001      	beq.n	8023310 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 802330c:	f000 fccc 	bl	8023ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8023310:	2301      	movs	r3, #1
 8023312:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8023314:	230d      	movs	r3, #13
 8023316:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023318:	463b      	mov	r3, r7
 802331a:	4619      	mov	r1, r3
 802331c:	480c      	ldr	r0, [pc, #48]	; (8023350 <MX_ADC1_Init+0x204>)
 802331e:	f003 f89d 	bl	802645c <HAL_ADC_ConfigChannel>
 8023322:	4603      	mov	r3, r0
 8023324:	2b00      	cmp	r3, #0
 8023326:	d001      	beq.n	802332c <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8023328:	f000 fcbe 	bl	8023ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 802332c:	2300      	movs	r3, #0
 802332e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8023330:	230e      	movs	r3, #14
 8023332:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023334:	463b      	mov	r3, r7
 8023336:	4619      	mov	r1, r3
 8023338:	4805      	ldr	r0, [pc, #20]	; (8023350 <MX_ADC1_Init+0x204>)
 802333a:	f003 f88f 	bl	802645c <HAL_ADC_ConfigChannel>
 802333e:	4603      	mov	r3, r0
 8023340:	2b00      	cmp	r3, #0
 8023342:	d001      	beq.n	8023348 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8023344:	f000 fcb0 	bl	8023ca8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8023348:	bf00      	nop
 802334a:	3710      	adds	r7, #16
 802334c:	46bd      	mov	sp, r7
 802334e:	bd80      	pop	{r7, pc}
 8023350:	20000798 	.word	0x20000798
 8023354:	40012000 	.word	0x40012000
 8023358:	0f000001 	.word	0x0f000001

0802335c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 802335c:	b580      	push	{r7, lr}
 802335e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8023360:	4b12      	ldr	r3, [pc, #72]	; (80233ac <MX_I2C2_Init+0x50>)
 8023362:	4a13      	ldr	r2, [pc, #76]	; (80233b0 <MX_I2C2_Init+0x54>)
 8023364:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8023366:	4b11      	ldr	r3, [pc, #68]	; (80233ac <MX_I2C2_Init+0x50>)
 8023368:	4a12      	ldr	r2, [pc, #72]	; (80233b4 <MX_I2C2_Init+0x58>)
 802336a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 802336c:	4b0f      	ldr	r3, [pc, #60]	; (80233ac <MX_I2C2_Init+0x50>)
 802336e:	2200      	movs	r2, #0
 8023370:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8023372:	4b0e      	ldr	r3, [pc, #56]	; (80233ac <MX_I2C2_Init+0x50>)
 8023374:	2200      	movs	r2, #0
 8023376:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8023378:	4b0c      	ldr	r3, [pc, #48]	; (80233ac <MX_I2C2_Init+0x50>)
 802337a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802337e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8023380:	4b0a      	ldr	r3, [pc, #40]	; (80233ac <MX_I2C2_Init+0x50>)
 8023382:	2200      	movs	r2, #0
 8023384:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8023386:	4b09      	ldr	r3, [pc, #36]	; (80233ac <MX_I2C2_Init+0x50>)
 8023388:	2200      	movs	r2, #0
 802338a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802338c:	4b07      	ldr	r3, [pc, #28]	; (80233ac <MX_I2C2_Init+0x50>)
 802338e:	2200      	movs	r2, #0
 8023390:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8023392:	4b06      	ldr	r3, [pc, #24]	; (80233ac <MX_I2C2_Init+0x50>)
 8023394:	2200      	movs	r2, #0
 8023396:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8023398:	4804      	ldr	r0, [pc, #16]	; (80233ac <MX_I2C2_Init+0x50>)
 802339a:	f004 fc21 	bl	8027be0 <HAL_I2C_Init>
 802339e:	4603      	mov	r3, r0
 80233a0:	2b00      	cmp	r3, #0
 80233a2:	d001      	beq.n	80233a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80233a4:	f000 fc80 	bl	8023ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80233a8:	bf00      	nop
 80233aa:	bd80      	pop	{r7, pc}
 80233ac:	2000066c 	.word	0x2000066c
 80233b0:	40005800 	.word	0x40005800
 80233b4:	000186a0 	.word	0x000186a0

080233b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80233b8:	b580      	push	{r7, lr}
 80233ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80233bc:	4b17      	ldr	r3, [pc, #92]	; (802341c <MX_SPI3_Init+0x64>)
 80233be:	4a18      	ldr	r2, [pc, #96]	; (8023420 <MX_SPI3_Init+0x68>)
 80233c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80233c2:	4b16      	ldr	r3, [pc, #88]	; (802341c <MX_SPI3_Init+0x64>)
 80233c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80233c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80233ca:	4b14      	ldr	r3, [pc, #80]	; (802341c <MX_SPI3_Init+0x64>)
 80233cc:	2200      	movs	r2, #0
 80233ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80233d0:	4b12      	ldr	r3, [pc, #72]	; (802341c <MX_SPI3_Init+0x64>)
 80233d2:	2200      	movs	r2, #0
 80233d4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80233d6:	4b11      	ldr	r3, [pc, #68]	; (802341c <MX_SPI3_Init+0x64>)
 80233d8:	2200      	movs	r2, #0
 80233da:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80233dc:	4b0f      	ldr	r3, [pc, #60]	; (802341c <MX_SPI3_Init+0x64>)
 80233de:	2200      	movs	r2, #0
 80233e0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80233e2:	4b0e      	ldr	r3, [pc, #56]	; (802341c <MX_SPI3_Init+0x64>)
 80233e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80233e8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80233ea:	4b0c      	ldr	r3, [pc, #48]	; (802341c <MX_SPI3_Init+0x64>)
 80233ec:	2238      	movs	r2, #56	; 0x38
 80233ee:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80233f0:	4b0a      	ldr	r3, [pc, #40]	; (802341c <MX_SPI3_Init+0x64>)
 80233f2:	2200      	movs	r2, #0
 80233f4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80233f6:	4b09      	ldr	r3, [pc, #36]	; (802341c <MX_SPI3_Init+0x64>)
 80233f8:	2200      	movs	r2, #0
 80233fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80233fc:	4b07      	ldr	r3, [pc, #28]	; (802341c <MX_SPI3_Init+0x64>)
 80233fe:	2200      	movs	r2, #0
 8023400:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8023402:	4b06      	ldr	r3, [pc, #24]	; (802341c <MX_SPI3_Init+0x64>)
 8023404:	220a      	movs	r2, #10
 8023406:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8023408:	4804      	ldr	r0, [pc, #16]	; (802341c <MX_SPI3_Init+0x64>)
 802340a:	f005 f949 	bl	80286a0 <HAL_SPI_Init>
 802340e:	4603      	mov	r3, r0
 8023410:	2b00      	cmp	r3, #0
 8023412:	d001      	beq.n	8023418 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8023414:	f000 fc48 	bl	8023ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8023418:	bf00      	nop
 802341a:	bd80      	pop	{r7, pc}
 802341c:	20000740 	.word	0x20000740
 8023420:	40003c00 	.word	0x40003c00

08023424 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8023424:	b580      	push	{r7, lr}
 8023426:	b092      	sub	sp, #72	; 0x48
 8023428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802342a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802342e:	2200      	movs	r2, #0
 8023430:	601a      	str	r2, [r3, #0]
 8023432:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023438:	2200      	movs	r2, #0
 802343a:	601a      	str	r2, [r3, #0]
 802343c:	605a      	str	r2, [r3, #4]
 802343e:	609a      	str	r2, [r3, #8]
 8023440:	60da      	str	r2, [r3, #12]
 8023442:	611a      	str	r2, [r3, #16]
 8023444:	615a      	str	r2, [r3, #20]
 8023446:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8023448:	1d3b      	adds	r3, r7, #4
 802344a:	2220      	movs	r2, #32
 802344c:	2100      	movs	r1, #0
 802344e:	4618      	mov	r0, r3
 8023450:	f006 fedb 	bl	802a20a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8023454:	4b39      	ldr	r3, [pc, #228]	; (802353c <MX_TIM1_Init+0x118>)
 8023456:	4a3a      	ldr	r2, [pc, #232]	; (8023540 <MX_TIM1_Init+0x11c>)
 8023458:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 802345a:	4b38      	ldr	r3, [pc, #224]	; (802353c <MX_TIM1_Init+0x118>)
 802345c:	2201      	movs	r2, #1
 802345e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023460:	4b36      	ldr	r3, [pc, #216]	; (802353c <MX_TIM1_Init+0x118>)
 8023462:	2200      	movs	r2, #0
 8023464:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 8023466:	4b35      	ldr	r3, [pc, #212]	; (802353c <MX_TIM1_Init+0x118>)
 8023468:	f240 4219 	movw	r2, #1049	; 0x419
 802346c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802346e:	4b33      	ldr	r3, [pc, #204]	; (802353c <MX_TIM1_Init+0x118>)
 8023470:	2200      	movs	r2, #0
 8023472:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8023474:	4b31      	ldr	r3, [pc, #196]	; (802353c <MX_TIM1_Init+0x118>)
 8023476:	2200      	movs	r2, #0
 8023478:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802347a:	4b30      	ldr	r3, [pc, #192]	; (802353c <MX_TIM1_Init+0x118>)
 802347c:	2200      	movs	r2, #0
 802347e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8023480:	482e      	ldr	r0, [pc, #184]	; (802353c <MX_TIM1_Init+0x118>)
 8023482:	f005 feb0 	bl	80291e6 <HAL_TIM_PWM_Init>
 8023486:	4603      	mov	r3, r0
 8023488:	2b00      	cmp	r3, #0
 802348a:	d001      	beq.n	8023490 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 802348c:	f000 fc0c 	bl	8023ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023490:	2300      	movs	r3, #0
 8023492:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023494:	2300      	movs	r3, #0
 8023496:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8023498:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802349c:	4619      	mov	r1, r3
 802349e:	4827      	ldr	r0, [pc, #156]	; (802353c <MX_TIM1_Init+0x118>)
 80234a0:	f006 fd92 	bl	8029fc8 <HAL_TIMEx_MasterConfigSynchronization>
 80234a4:	4603      	mov	r3, r0
 80234a6:	2b00      	cmp	r3, #0
 80234a8:	d001      	beq.n	80234ae <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80234aa:	f000 fbfd 	bl	8023ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80234ae:	2360      	movs	r3, #96	; 0x60
 80234b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80234b2:	2300      	movs	r3, #0
 80234b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80234b6:	2300      	movs	r3, #0
 80234b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80234ba:	2300      	movs	r3, #0
 80234bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80234be:	2300      	movs	r3, #0
 80234c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80234c2:	2300      	movs	r3, #0
 80234c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80234c6:	2300      	movs	r3, #0
 80234c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80234ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80234ce:	2204      	movs	r2, #4
 80234d0:	4619      	mov	r1, r3
 80234d2:	481a      	ldr	r0, [pc, #104]	; (802353c <MX_TIM1_Init+0x118>)
 80234d4:	f006 f8c2 	bl	802965c <HAL_TIM_PWM_ConfigChannel>
 80234d8:	4603      	mov	r3, r0
 80234da:	2b00      	cmp	r3, #0
 80234dc:	d001      	beq.n	80234e2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80234de:	f000 fbe3 	bl	8023ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80234e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80234e6:	220c      	movs	r2, #12
 80234e8:	4619      	mov	r1, r3
 80234ea:	4814      	ldr	r0, [pc, #80]	; (802353c <MX_TIM1_Init+0x118>)
 80234ec:	f006 f8b6 	bl	802965c <HAL_TIM_PWM_ConfigChannel>
 80234f0:	4603      	mov	r3, r0
 80234f2:	2b00      	cmp	r3, #0
 80234f4:	d001      	beq.n	80234fa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80234f6:	f000 fbd7 	bl	8023ca8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80234fa:	2300      	movs	r3, #0
 80234fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80234fe:	2300      	movs	r3, #0
 8023500:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8023502:	2300      	movs	r3, #0
 8023504:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8023506:	2300      	movs	r3, #0
 8023508:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 802350a:	2300      	movs	r3, #0
 802350c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 802350e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8023512:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8023514:	2300      	movs	r3, #0
 8023516:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8023518:	1d3b      	adds	r3, r7, #4
 802351a:	4619      	mov	r1, r3
 802351c:	4807      	ldr	r0, [pc, #28]	; (802353c <MX_TIM1_Init+0x118>)
 802351e:	f006 fdcf 	bl	802a0c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8023522:	4603      	mov	r3, r0
 8023524:	2b00      	cmp	r3, #0
 8023526:	d001      	beq.n	802352c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8023528:	f000 fbbe 	bl	8023ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 802352c:	4803      	ldr	r0, [pc, #12]	; (802353c <MX_TIM1_Init+0x118>)
 802352e:	f002 fa25 	bl	802597c <HAL_TIM_MspPostInit>

}
 8023532:	bf00      	nop
 8023534:	3748      	adds	r7, #72	; 0x48
 8023536:	46bd      	mov	sp, r7
 8023538:	bd80      	pop	{r7, pc}
 802353a:	bf00      	nop
 802353c:	200008c0 	.word	0x200008c0
 8023540:	40010000 	.word	0x40010000

08023544 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8023544:	b580      	push	{r7, lr}
 8023546:	b086      	sub	sp, #24
 8023548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802354a:	f107 0308 	add.w	r3, r7, #8
 802354e:	2200      	movs	r2, #0
 8023550:	601a      	str	r2, [r3, #0]
 8023552:	605a      	str	r2, [r3, #4]
 8023554:	609a      	str	r2, [r3, #8]
 8023556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023558:	463b      	mov	r3, r7
 802355a:	2200      	movs	r2, #0
 802355c:	601a      	str	r2, [r3, #0]
 802355e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8023560:	4b1d      	ldr	r3, [pc, #116]	; (80235d8 <MX_TIM2_Init+0x94>)
 8023562:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023566:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8023568:	4b1b      	ldr	r3, [pc, #108]	; (80235d8 <MX_TIM2_Init+0x94>)
 802356a:	2204      	movs	r2, #4
 802356c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 802356e:	4b1a      	ldr	r3, [pc, #104]	; (80235d8 <MX_TIM2_Init+0x94>)
 8023570:	2200      	movs	r2, #0
 8023572:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 8023574:	4b18      	ldr	r3, [pc, #96]	; (80235d8 <MX_TIM2_Init+0x94>)
 8023576:	4a19      	ldr	r2, [pc, #100]	; (80235dc <MX_TIM2_Init+0x98>)
 8023578:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802357a:	4b17      	ldr	r3, [pc, #92]	; (80235d8 <MX_TIM2_Init+0x94>)
 802357c:	2200      	movs	r2, #0
 802357e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023580:	4b15      	ldr	r3, [pc, #84]	; (80235d8 <MX_TIM2_Init+0x94>)
 8023582:	2200      	movs	r2, #0
 8023584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8023586:	4814      	ldr	r0, [pc, #80]	; (80235d8 <MX_TIM2_Init+0x94>)
 8023588:	f005 fdde 	bl	8029148 <HAL_TIM_Base_Init>
 802358c:	4603      	mov	r3, r0
 802358e:	2b00      	cmp	r3, #0
 8023590:	d001      	beq.n	8023596 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8023592:	f000 fb89 	bl	8023ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8023596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802359a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 802359c:	f107 0308 	add.w	r3, r7, #8
 80235a0:	4619      	mov	r1, r3
 80235a2:	480d      	ldr	r0, [pc, #52]	; (80235d8 <MX_TIM2_Init+0x94>)
 80235a4:	f006 f920 	bl	80297e8 <HAL_TIM_ConfigClockSource>
 80235a8:	4603      	mov	r3, r0
 80235aa:	2b00      	cmp	r3, #0
 80235ac:	d001      	beq.n	80235b2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80235ae:	f000 fb7b 	bl	8023ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80235b2:	2300      	movs	r3, #0
 80235b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80235b6:	2300      	movs	r3, #0
 80235b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80235ba:	463b      	mov	r3, r7
 80235bc:	4619      	mov	r1, r3
 80235be:	4806      	ldr	r0, [pc, #24]	; (80235d8 <MX_TIM2_Init+0x94>)
 80235c0:	f006 fd02 	bl	8029fc8 <HAL_TIMEx_MasterConfigSynchronization>
 80235c4:	4603      	mov	r3, r0
 80235c6:	2b00      	cmp	r3, #0
 80235c8:	d001      	beq.n	80235ce <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80235ca:	f000 fb6d 	bl	8023ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80235ce:	bf00      	nop
 80235d0:	3718      	adds	r7, #24
 80235d2:	46bd      	mov	sp, r7
 80235d4:	bd80      	pop	{r7, pc}
 80235d6:	bf00      	nop
 80235d8:	20000900 	.word	0x20000900
 80235dc:	00019a27 	.word	0x00019a27

080235e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80235e0:	b580      	push	{r7, lr}
 80235e2:	b08a      	sub	sp, #40	; 0x28
 80235e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80235e6:	f107 0320 	add.w	r3, r7, #32
 80235ea:	2200      	movs	r2, #0
 80235ec:	601a      	str	r2, [r3, #0]
 80235ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80235f0:	1d3b      	adds	r3, r7, #4
 80235f2:	2200      	movs	r2, #0
 80235f4:	601a      	str	r2, [r3, #0]
 80235f6:	605a      	str	r2, [r3, #4]
 80235f8:	609a      	str	r2, [r3, #8]
 80235fa:	60da      	str	r2, [r3, #12]
 80235fc:	611a      	str	r2, [r3, #16]
 80235fe:	615a      	str	r2, [r3, #20]
 8023600:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8023602:	4b32      	ldr	r3, [pc, #200]	; (80236cc <MX_TIM3_Init+0xec>)
 8023604:	4a32      	ldr	r2, [pc, #200]	; (80236d0 <MX_TIM3_Init+0xf0>)
 8023606:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8023608:	4b30      	ldr	r3, [pc, #192]	; (80236cc <MX_TIM3_Init+0xec>)
 802360a:	2200      	movs	r2, #0
 802360c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802360e:	4b2f      	ldr	r3, [pc, #188]	; (80236cc <MX_TIM3_Init+0xec>)
 8023610:	2200      	movs	r2, #0
 8023612:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8023614:	4b2d      	ldr	r3, [pc, #180]	; (80236cc <MX_TIM3_Init+0xec>)
 8023616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802361a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802361c:	4b2b      	ldr	r3, [pc, #172]	; (80236cc <MX_TIM3_Init+0xec>)
 802361e:	2200      	movs	r2, #0
 8023620:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023622:	4b2a      	ldr	r3, [pc, #168]	; (80236cc <MX_TIM3_Init+0xec>)
 8023624:	2200      	movs	r2, #0
 8023626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8023628:	4828      	ldr	r0, [pc, #160]	; (80236cc <MX_TIM3_Init+0xec>)
 802362a:	f005 fddc 	bl	80291e6 <HAL_TIM_PWM_Init>
 802362e:	4603      	mov	r3, r0
 8023630:	2b00      	cmp	r3, #0
 8023632:	d001      	beq.n	8023638 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8023634:	f000 fb38 	bl	8023ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023638:	2300      	movs	r3, #0
 802363a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802363c:	2300      	movs	r3, #0
 802363e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8023640:	f107 0320 	add.w	r3, r7, #32
 8023644:	4619      	mov	r1, r3
 8023646:	4821      	ldr	r0, [pc, #132]	; (80236cc <MX_TIM3_Init+0xec>)
 8023648:	f006 fcbe 	bl	8029fc8 <HAL_TIMEx_MasterConfigSynchronization>
 802364c:	4603      	mov	r3, r0
 802364e:	2b00      	cmp	r3, #0
 8023650:	d001      	beq.n	8023656 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8023652:	f000 fb29 	bl	8023ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023656:	2360      	movs	r3, #96	; 0x60
 8023658:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 802365a:	2300      	movs	r3, #0
 802365c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802365e:	2300      	movs	r3, #0
 8023660:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023662:	2300      	movs	r3, #0
 8023664:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023666:	1d3b      	adds	r3, r7, #4
 8023668:	2200      	movs	r2, #0
 802366a:	4619      	mov	r1, r3
 802366c:	4817      	ldr	r0, [pc, #92]	; (80236cc <MX_TIM3_Init+0xec>)
 802366e:	f005 fff5 	bl	802965c <HAL_TIM_PWM_ConfigChannel>
 8023672:	4603      	mov	r3, r0
 8023674:	2b00      	cmp	r3, #0
 8023676:	d001      	beq.n	802367c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8023678:	f000 fb16 	bl	8023ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 802367c:	1d3b      	adds	r3, r7, #4
 802367e:	2204      	movs	r2, #4
 8023680:	4619      	mov	r1, r3
 8023682:	4812      	ldr	r0, [pc, #72]	; (80236cc <MX_TIM3_Init+0xec>)
 8023684:	f005 ffea 	bl	802965c <HAL_TIM_PWM_ConfigChannel>
 8023688:	4603      	mov	r3, r0
 802368a:	2b00      	cmp	r3, #0
 802368c:	d001      	beq.n	8023692 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 802368e:	f000 fb0b 	bl	8023ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8023692:	1d3b      	adds	r3, r7, #4
 8023694:	2208      	movs	r2, #8
 8023696:	4619      	mov	r1, r3
 8023698:	480c      	ldr	r0, [pc, #48]	; (80236cc <MX_TIM3_Init+0xec>)
 802369a:	f005 ffdf 	bl	802965c <HAL_TIM_PWM_ConfigChannel>
 802369e:	4603      	mov	r3, r0
 80236a0:	2b00      	cmp	r3, #0
 80236a2:	d001      	beq.n	80236a8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80236a4:	f000 fb00 	bl	8023ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80236a8:	1d3b      	adds	r3, r7, #4
 80236aa:	220c      	movs	r2, #12
 80236ac:	4619      	mov	r1, r3
 80236ae:	4807      	ldr	r0, [pc, #28]	; (80236cc <MX_TIM3_Init+0xec>)
 80236b0:	f005 ffd4 	bl	802965c <HAL_TIM_PWM_ConfigChannel>
 80236b4:	4603      	mov	r3, r0
 80236b6:	2b00      	cmp	r3, #0
 80236b8:	d001      	beq.n	80236be <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80236ba:	f000 faf5 	bl	8023ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80236be:	4803      	ldr	r0, [pc, #12]	; (80236cc <MX_TIM3_Init+0xec>)
 80236c0:	f002 f95c 	bl	802597c <HAL_TIM_MspPostInit>

}
 80236c4:	bf00      	nop
 80236c6:	3728      	adds	r7, #40	; 0x28
 80236c8:	46bd      	mov	sp, r7
 80236ca:	bd80      	pop	{r7, pc}
 80236cc:	20000700 	.word	0x20000700
 80236d0:	40000400 	.word	0x40000400

080236d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80236d4:	b580      	push	{r7, lr}
 80236d6:	b08c      	sub	sp, #48	; 0x30
 80236d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80236da:	f107 030c 	add.w	r3, r7, #12
 80236de:	2224      	movs	r2, #36	; 0x24
 80236e0:	2100      	movs	r1, #0
 80236e2:	4618      	mov	r0, r3
 80236e4:	f006 fd91 	bl	802a20a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80236e8:	1d3b      	adds	r3, r7, #4
 80236ea:	2200      	movs	r2, #0
 80236ec:	601a      	str	r2, [r3, #0]
 80236ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80236f0:	4b20      	ldr	r3, [pc, #128]	; (8023774 <MX_TIM4_Init+0xa0>)
 80236f2:	4a21      	ldr	r2, [pc, #132]	; (8023778 <MX_TIM4_Init+0xa4>)
 80236f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80236f6:	4b1f      	ldr	r3, [pc, #124]	; (8023774 <MX_TIM4_Init+0xa0>)
 80236f8:	2200      	movs	r2, #0
 80236fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80236fc:	4b1d      	ldr	r3, [pc, #116]	; (8023774 <MX_TIM4_Init+0xa0>)
 80236fe:	2200      	movs	r2, #0
 8023700:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8023702:	4b1c      	ldr	r3, [pc, #112]	; (8023774 <MX_TIM4_Init+0xa0>)
 8023704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023708:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802370a:	4b1a      	ldr	r3, [pc, #104]	; (8023774 <MX_TIM4_Init+0xa0>)
 802370c:	2200      	movs	r2, #0
 802370e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023710:	4b18      	ldr	r3, [pc, #96]	; (8023774 <MX_TIM4_Init+0xa0>)
 8023712:	2200      	movs	r2, #0
 8023714:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8023716:	2303      	movs	r3, #3
 8023718:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 802371a:	2300      	movs	r3, #0
 802371c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 802371e:	2301      	movs	r3, #1
 8023720:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8023722:	2300      	movs	r3, #0
 8023724:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8023726:	2300      	movs	r3, #0
 8023728:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 802372a:	2300      	movs	r3, #0
 802372c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 802372e:	2301      	movs	r3, #1
 8023730:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8023732:	2300      	movs	r3, #0
 8023734:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8023736:	2300      	movs	r3, #0
 8023738:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 802373a:	f107 030c 	add.w	r3, r7, #12
 802373e:	4619      	mov	r1, r3
 8023740:	480c      	ldr	r0, [pc, #48]	; (8023774 <MX_TIM4_Init+0xa0>)
 8023742:	f005 fdb9 	bl	80292b8 <HAL_TIM_Encoder_Init>
 8023746:	4603      	mov	r3, r0
 8023748:	2b00      	cmp	r3, #0
 802374a:	d001      	beq.n	8023750 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 802374c:	f000 faac 	bl	8023ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023750:	2300      	movs	r3, #0
 8023752:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023754:	2300      	movs	r3, #0
 8023756:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8023758:	1d3b      	adds	r3, r7, #4
 802375a:	4619      	mov	r1, r3
 802375c:	4805      	ldr	r0, [pc, #20]	; (8023774 <MX_TIM4_Init+0xa0>)
 802375e:	f006 fc33 	bl	8029fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8023762:	4603      	mov	r3, r0
 8023764:	2b00      	cmp	r3, #0
 8023766:	d001      	beq.n	802376c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8023768:	f000 fa9e 	bl	8023ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 802376c:	bf00      	nop
 802376e:	3730      	adds	r7, #48	; 0x30
 8023770:	46bd      	mov	sp, r7
 8023772:	bd80      	pop	{r7, pc}
 8023774:	2000062c 	.word	0x2000062c
 8023778:	40000800 	.word	0x40000800

0802377c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 802377c:	b580      	push	{r7, lr}
 802377e:	b086      	sub	sp, #24
 8023780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8023782:	f107 0308 	add.w	r3, r7, #8
 8023786:	2200      	movs	r2, #0
 8023788:	601a      	str	r2, [r3, #0]
 802378a:	605a      	str	r2, [r3, #4]
 802378c:	609a      	str	r2, [r3, #8]
 802378e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023790:	463b      	mov	r3, r7
 8023792:	2200      	movs	r2, #0
 8023794:	601a      	str	r2, [r3, #0]
 8023796:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8023798:	4b1d      	ldr	r3, [pc, #116]	; (8023810 <MX_TIM5_Init+0x94>)
 802379a:	4a1e      	ldr	r2, [pc, #120]	; (8023814 <MX_TIM5_Init+0x98>)
 802379c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 802379e:	4b1c      	ldr	r3, [pc, #112]	; (8023810 <MX_TIM5_Init+0x94>)
 80237a0:	2204      	movs	r2, #4
 80237a2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80237a4:	4b1a      	ldr	r3, [pc, #104]	; (8023810 <MX_TIM5_Init+0x94>)
 80237a6:	2200      	movs	r2, #0
 80237a8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 80237aa:	4b19      	ldr	r3, [pc, #100]	; (8023810 <MX_TIM5_Init+0x94>)
 80237ac:	f245 2207 	movw	r2, #20999	; 0x5207
 80237b0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80237b2:	4b17      	ldr	r3, [pc, #92]	; (8023810 <MX_TIM5_Init+0x94>)
 80237b4:	2200      	movs	r2, #0
 80237b6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80237b8:	4b15      	ldr	r3, [pc, #84]	; (8023810 <MX_TIM5_Init+0x94>)
 80237ba:	2200      	movs	r2, #0
 80237bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80237be:	4814      	ldr	r0, [pc, #80]	; (8023810 <MX_TIM5_Init+0x94>)
 80237c0:	f005 fcc2 	bl	8029148 <HAL_TIM_Base_Init>
 80237c4:	4603      	mov	r3, r0
 80237c6:	2b00      	cmp	r3, #0
 80237c8:	d001      	beq.n	80237ce <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80237ca:	f000 fa6d 	bl	8023ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80237ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80237d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80237d4:	f107 0308 	add.w	r3, r7, #8
 80237d8:	4619      	mov	r1, r3
 80237da:	480d      	ldr	r0, [pc, #52]	; (8023810 <MX_TIM5_Init+0x94>)
 80237dc:	f006 f804 	bl	80297e8 <HAL_TIM_ConfigClockSource>
 80237e0:	4603      	mov	r3, r0
 80237e2:	2b00      	cmp	r3, #0
 80237e4:	d001      	beq.n	80237ea <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80237e6:	f000 fa5f 	bl	8023ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80237ea:	2300      	movs	r3, #0
 80237ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80237ee:	2300      	movs	r3, #0
 80237f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80237f2:	463b      	mov	r3, r7
 80237f4:	4619      	mov	r1, r3
 80237f6:	4806      	ldr	r0, [pc, #24]	; (8023810 <MX_TIM5_Init+0x94>)
 80237f8:	f006 fbe6 	bl	8029fc8 <HAL_TIMEx_MasterConfigSynchronization>
 80237fc:	4603      	mov	r3, r0
 80237fe:	2b00      	cmp	r3, #0
 8023800:	d001      	beq.n	8023806 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8023802:	f000 fa51 	bl	8023ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8023806:	bf00      	nop
 8023808:	3718      	adds	r7, #24
 802380a:	46bd      	mov	sp, r7
 802380c:	bd80      	pop	{r7, pc}
 802380e:	bf00      	nop
 8023810:	200006c0 	.word	0x200006c0
 8023814:	40000c00 	.word	0x40000c00

08023818 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8023818:	b580      	push	{r7, lr}
 802381a:	b082      	sub	sp, #8
 802381c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802381e:	463b      	mov	r3, r7
 8023820:	2200      	movs	r2, #0
 8023822:	601a      	str	r2, [r3, #0]
 8023824:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8023826:	4b15      	ldr	r3, [pc, #84]	; (802387c <MX_TIM6_Init+0x64>)
 8023828:	4a15      	ldr	r2, [pc, #84]	; (8023880 <MX_TIM6_Init+0x68>)
 802382a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 802382c:	4b13      	ldr	r3, [pc, #76]	; (802387c <MX_TIM6_Init+0x64>)
 802382e:	2204      	movs	r2, #4
 8023830:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023832:	4b12      	ldr	r3, [pc, #72]	; (802387c <MX_TIM6_Init+0x64>)
 8023834:	2200      	movs	r2, #0
 8023836:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8023838:	4b10      	ldr	r3, [pc, #64]	; (802387c <MX_TIM6_Init+0x64>)
 802383a:	f642 1203 	movw	r2, #10499	; 0x2903
 802383e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023840:	4b0e      	ldr	r3, [pc, #56]	; (802387c <MX_TIM6_Init+0x64>)
 8023842:	2200      	movs	r2, #0
 8023844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8023846:	480d      	ldr	r0, [pc, #52]	; (802387c <MX_TIM6_Init+0x64>)
 8023848:	f005 fc7e 	bl	8029148 <HAL_TIM_Base_Init>
 802384c:	4603      	mov	r3, r0
 802384e:	2b00      	cmp	r3, #0
 8023850:	d001      	beq.n	8023856 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8023852:	f000 fa29 	bl	8023ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023856:	2300      	movs	r3, #0
 8023858:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802385a:	2300      	movs	r3, #0
 802385c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 802385e:	463b      	mov	r3, r7
 8023860:	4619      	mov	r1, r3
 8023862:	4806      	ldr	r0, [pc, #24]	; (802387c <MX_TIM6_Init+0x64>)
 8023864:	f006 fbb0 	bl	8029fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8023868:	4603      	mov	r3, r0
 802386a:	2b00      	cmp	r3, #0
 802386c:	d001      	beq.n	8023872 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 802386e:	f000 fa1b 	bl	8023ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8023872:	bf00      	nop
 8023874:	3708      	adds	r7, #8
 8023876:	46bd      	mov	sp, r7
 8023878:	bd80      	pop	{r7, pc}
 802387a:	bf00      	nop
 802387c:	20000880 	.word	0x20000880
 8023880:	40001000 	.word	0x40001000

08023884 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8023884:	b580      	push	{r7, lr}
 8023886:	b082      	sub	sp, #8
 8023888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802388a:	463b      	mov	r3, r7
 802388c:	2200      	movs	r2, #0
 802388e:	601a      	str	r2, [r3, #0]
 8023890:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8023892:	4b15      	ldr	r3, [pc, #84]	; (80238e8 <MX_TIM7_Init+0x64>)
 8023894:	4a15      	ldr	r2, [pc, #84]	; (80238ec <MX_TIM7_Init+0x68>)
 8023896:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8023898:	4b13      	ldr	r3, [pc, #76]	; (80238e8 <MX_TIM7_Init+0x64>)
 802389a:	2204      	movs	r2, #4
 802389c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 802389e:	4b12      	ldr	r3, [pc, #72]	; (80238e8 <MX_TIM7_Init+0x64>)
 80238a0:	2200      	movs	r2, #0
 80238a2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 80238a4:	4b10      	ldr	r3, [pc, #64]	; (80238e8 <MX_TIM7_Init+0x64>)
 80238a6:	f240 4219 	movw	r2, #1049	; 0x419
 80238aa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80238ac:	4b0e      	ldr	r3, [pc, #56]	; (80238e8 <MX_TIM7_Init+0x64>)
 80238ae:	2200      	movs	r2, #0
 80238b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80238b2:	480d      	ldr	r0, [pc, #52]	; (80238e8 <MX_TIM7_Init+0x64>)
 80238b4:	f005 fc48 	bl	8029148 <HAL_TIM_Base_Init>
 80238b8:	4603      	mov	r3, r0
 80238ba:	2b00      	cmp	r3, #0
 80238bc:	d001      	beq.n	80238c2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80238be:	f000 f9f3 	bl	8023ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80238c2:	2300      	movs	r3, #0
 80238c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80238c6:	2300      	movs	r3, #0
 80238c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80238ca:	463b      	mov	r3, r7
 80238cc:	4619      	mov	r1, r3
 80238ce:	4806      	ldr	r0, [pc, #24]	; (80238e8 <MX_TIM7_Init+0x64>)
 80238d0:	f006 fb7a 	bl	8029fc8 <HAL_TIMEx_MasterConfigSynchronization>
 80238d4:	4603      	mov	r3, r0
 80238d6:	2b00      	cmp	r3, #0
 80238d8:	d001      	beq.n	80238de <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80238da:	f000 f9e5 	bl	8023ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80238de:	bf00      	nop
 80238e0:	3708      	adds	r7, #8
 80238e2:	46bd      	mov	sp, r7
 80238e4:	bd80      	pop	{r7, pc}
 80238e6:	bf00      	nop
 80238e8:	20000980 	.word	0x20000980
 80238ec:	40001400 	.word	0x40001400

080238f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80238f0:	b580      	push	{r7, lr}
 80238f2:	b08c      	sub	sp, #48	; 0x30
 80238f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80238f6:	f107 030c 	add.w	r3, r7, #12
 80238fa:	2224      	movs	r2, #36	; 0x24
 80238fc:	2100      	movs	r1, #0
 80238fe:	4618      	mov	r0, r3
 8023900:	f006 fc83 	bl	802a20a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023904:	1d3b      	adds	r3, r7, #4
 8023906:	2200      	movs	r2, #0
 8023908:	601a      	str	r2, [r3, #0]
 802390a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 802390c:	4b22      	ldr	r3, [pc, #136]	; (8023998 <MX_TIM8_Init+0xa8>)
 802390e:	4a23      	ldr	r2, [pc, #140]	; (802399c <MX_TIM8_Init+0xac>)
 8023910:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8023912:	4b21      	ldr	r3, [pc, #132]	; (8023998 <MX_TIM8_Init+0xa8>)
 8023914:	2200      	movs	r2, #0
 8023916:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023918:	4b1f      	ldr	r3, [pc, #124]	; (8023998 <MX_TIM8_Init+0xa8>)
 802391a:	2200      	movs	r2, #0
 802391c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 802391e:	4b1e      	ldr	r3, [pc, #120]	; (8023998 <MX_TIM8_Init+0xa8>)
 8023920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023924:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023926:	4b1c      	ldr	r3, [pc, #112]	; (8023998 <MX_TIM8_Init+0xa8>)
 8023928:	2200      	movs	r2, #0
 802392a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 802392c:	4b1a      	ldr	r3, [pc, #104]	; (8023998 <MX_TIM8_Init+0xa8>)
 802392e:	2200      	movs	r2, #0
 8023930:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023932:	4b19      	ldr	r3, [pc, #100]	; (8023998 <MX_TIM8_Init+0xa8>)
 8023934:	2200      	movs	r2, #0
 8023936:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8023938:	2303      	movs	r3, #3
 802393a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 802393c:	2300      	movs	r3, #0
 802393e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8023940:	2301      	movs	r3, #1
 8023942:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8023944:	2300      	movs	r3, #0
 8023946:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8023948:	2300      	movs	r3, #0
 802394a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 802394c:	2300      	movs	r3, #0
 802394e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8023950:	2301      	movs	r3, #1
 8023952:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8023954:	2300      	movs	r3, #0
 8023956:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8023958:	2300      	movs	r3, #0
 802395a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 802395c:	f107 030c 	add.w	r3, r7, #12
 8023960:	4619      	mov	r1, r3
 8023962:	480d      	ldr	r0, [pc, #52]	; (8023998 <MX_TIM8_Init+0xa8>)
 8023964:	f005 fca8 	bl	80292b8 <HAL_TIM_Encoder_Init>
 8023968:	4603      	mov	r3, r0
 802396a:	2b00      	cmp	r3, #0
 802396c:	d001      	beq.n	8023972 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 802396e:	f000 f99b 	bl	8023ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023972:	2300      	movs	r3, #0
 8023974:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023976:	2300      	movs	r3, #0
 8023978:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 802397a:	1d3b      	adds	r3, r7, #4
 802397c:	4619      	mov	r1, r3
 802397e:	4806      	ldr	r0, [pc, #24]	; (8023998 <MX_TIM8_Init+0xa8>)
 8023980:	f006 fb22 	bl	8029fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8023984:	4603      	mov	r3, r0
 8023986:	2b00      	cmp	r3, #0
 8023988:	d001      	beq.n	802398e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 802398a:	f000 f98d 	bl	8023ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 802398e:	bf00      	nop
 8023990:	3730      	adds	r7, #48	; 0x30
 8023992:	46bd      	mov	sp, r7
 8023994:	bd80      	pop	{r7, pc}
 8023996:	bf00      	nop
 8023998:	200005ec 	.word	0x200005ec
 802399c:	40010400 	.word	0x40010400

080239a0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80239a0:	b580      	push	{r7, lr}
 80239a2:	b088      	sub	sp, #32
 80239a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80239a6:	1d3b      	adds	r3, r7, #4
 80239a8:	2200      	movs	r2, #0
 80239aa:	601a      	str	r2, [r3, #0]
 80239ac:	605a      	str	r2, [r3, #4]
 80239ae:	609a      	str	r2, [r3, #8]
 80239b0:	60da      	str	r2, [r3, #12]
 80239b2:	611a      	str	r2, [r3, #16]
 80239b4:	615a      	str	r2, [r3, #20]
 80239b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80239b8:	4b1e      	ldr	r3, [pc, #120]	; (8023a34 <MX_TIM11_Init+0x94>)
 80239ba:	4a1f      	ldr	r2, [pc, #124]	; (8023a38 <MX_TIM11_Init+0x98>)
 80239bc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80239be:	4b1d      	ldr	r3, [pc, #116]	; (8023a34 <MX_TIM11_Init+0x94>)
 80239c0:	2200      	movs	r2, #0
 80239c2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80239c4:	4b1b      	ldr	r3, [pc, #108]	; (8023a34 <MX_TIM11_Init+0x94>)
 80239c6:	2200      	movs	r2, #0
 80239c8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 80239ca:	4b1a      	ldr	r3, [pc, #104]	; (8023a34 <MX_TIM11_Init+0x94>)
 80239cc:	f240 628f 	movw	r2, #1679	; 0x68f
 80239d0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80239d2:	4b18      	ldr	r3, [pc, #96]	; (8023a34 <MX_TIM11_Init+0x94>)
 80239d4:	2200      	movs	r2, #0
 80239d6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80239d8:	4b16      	ldr	r3, [pc, #88]	; (8023a34 <MX_TIM11_Init+0x94>)
 80239da:	2200      	movs	r2, #0
 80239dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80239de:	4815      	ldr	r0, [pc, #84]	; (8023a34 <MX_TIM11_Init+0x94>)
 80239e0:	f005 fbb2 	bl	8029148 <HAL_TIM_Base_Init>
 80239e4:	4603      	mov	r3, r0
 80239e6:	2b00      	cmp	r3, #0
 80239e8:	d001      	beq.n	80239ee <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80239ea:	f000 f95d 	bl	8023ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80239ee:	4811      	ldr	r0, [pc, #68]	; (8023a34 <MX_TIM11_Init+0x94>)
 80239f0:	f005 fbf9 	bl	80291e6 <HAL_TIM_PWM_Init>
 80239f4:	4603      	mov	r3, r0
 80239f6:	2b00      	cmp	r3, #0
 80239f8:	d001      	beq.n	80239fe <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80239fa:	f000 f955 	bl	8023ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80239fe:	2360      	movs	r3, #96	; 0x60
 8023a00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023a02:	2300      	movs	r3, #0
 8023a04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023a06:	2300      	movs	r3, #0
 8023a08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023a0a:	2300      	movs	r3, #0
 8023a0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023a0e:	1d3b      	adds	r3, r7, #4
 8023a10:	2200      	movs	r2, #0
 8023a12:	4619      	mov	r1, r3
 8023a14:	4807      	ldr	r0, [pc, #28]	; (8023a34 <MX_TIM11_Init+0x94>)
 8023a16:	f005 fe21 	bl	802965c <HAL_TIM_PWM_ConfigChannel>
 8023a1a:	4603      	mov	r3, r0
 8023a1c:	2b00      	cmp	r3, #0
 8023a1e:	d001      	beq.n	8023a24 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8023a20:	f000 f942 	bl	8023ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8023a24:	4803      	ldr	r0, [pc, #12]	; (8023a34 <MX_TIM11_Init+0x94>)
 8023a26:	f001 ffa9 	bl	802597c <HAL_TIM_MspPostInit>

}
 8023a2a:	bf00      	nop
 8023a2c:	3720      	adds	r7, #32
 8023a2e:	46bd      	mov	sp, r7
 8023a30:	bd80      	pop	{r7, pc}
 8023a32:	bf00      	nop
 8023a34:	200007e0 	.word	0x200007e0
 8023a38:	40014800 	.word	0x40014800

08023a3c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8023a3c:	b580      	push	{r7, lr}
 8023a3e:	b088      	sub	sp, #32
 8023a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8023a42:	1d3b      	adds	r3, r7, #4
 8023a44:	2200      	movs	r2, #0
 8023a46:	601a      	str	r2, [r3, #0]
 8023a48:	605a      	str	r2, [r3, #4]
 8023a4a:	609a      	str	r2, [r3, #8]
 8023a4c:	60da      	str	r2, [r3, #12]
 8023a4e:	611a      	str	r2, [r3, #16]
 8023a50:	615a      	str	r2, [r3, #20]
 8023a52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8023a54:	4b1a      	ldr	r3, [pc, #104]	; (8023ac0 <MX_TIM12_Init+0x84>)
 8023a56:	4a1b      	ldr	r2, [pc, #108]	; (8023ac4 <MX_TIM12_Init+0x88>)
 8023a58:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 8023a5a:	4b19      	ldr	r3, [pc, #100]	; (8023ac0 <MX_TIM12_Init+0x84>)
 8023a5c:	f44f 725c 	mov.w	r2, #880	; 0x370
 8023a60:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023a62:	4b17      	ldr	r3, [pc, #92]	; (8023ac0 <MX_TIM12_Init+0x84>)
 8023a64:	2200      	movs	r2, #0
 8023a66:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 8023a68:	4b15      	ldr	r3, [pc, #84]	; (8023ac0 <MX_TIM12_Init+0x84>)
 8023a6a:	2235      	movs	r2, #53	; 0x35
 8023a6c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023a6e:	4b14      	ldr	r3, [pc, #80]	; (8023ac0 <MX_TIM12_Init+0x84>)
 8023a70:	2200      	movs	r2, #0
 8023a72:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023a74:	4b12      	ldr	r3, [pc, #72]	; (8023ac0 <MX_TIM12_Init+0x84>)
 8023a76:	2200      	movs	r2, #0
 8023a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8023a7a:	4811      	ldr	r0, [pc, #68]	; (8023ac0 <MX_TIM12_Init+0x84>)
 8023a7c:	f005 fbb3 	bl	80291e6 <HAL_TIM_PWM_Init>
 8023a80:	4603      	mov	r3, r0
 8023a82:	2b00      	cmp	r3, #0
 8023a84:	d001      	beq.n	8023a8a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8023a86:	f000 f90f 	bl	8023ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023a8a:	2360      	movs	r3, #96	; 0x60
 8023a8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023a8e:	2300      	movs	r3, #0
 8023a90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023a92:	2300      	movs	r3, #0
 8023a94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023a96:	2300      	movs	r3, #0
 8023a98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023a9a:	1d3b      	adds	r3, r7, #4
 8023a9c:	2204      	movs	r2, #4
 8023a9e:	4619      	mov	r1, r3
 8023aa0:	4807      	ldr	r0, [pc, #28]	; (8023ac0 <MX_TIM12_Init+0x84>)
 8023aa2:	f005 fddb 	bl	802965c <HAL_TIM_PWM_ConfigChannel>
 8023aa6:	4603      	mov	r3, r0
 8023aa8:	2b00      	cmp	r3, #0
 8023aaa:	d001      	beq.n	8023ab0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8023aac:	f000 f8fc 	bl	8023ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8023ab0:	4803      	ldr	r0, [pc, #12]	; (8023ac0 <MX_TIM12_Init+0x84>)
 8023ab2:	f001 ff63 	bl	802597c <HAL_TIM_MspPostInit>

}
 8023ab6:	bf00      	nop
 8023ab8:	3720      	adds	r7, #32
 8023aba:	46bd      	mov	sp, r7
 8023abc:	bd80      	pop	{r7, pc}
 8023abe:	bf00      	nop
 8023ac0:	20000940 	.word	0x20000940
 8023ac4:	40001800 	.word	0x40001800

08023ac8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8023ac8:	b580      	push	{r7, lr}
 8023aca:	b082      	sub	sp, #8
 8023acc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8023ace:	2300      	movs	r3, #0
 8023ad0:	607b      	str	r3, [r7, #4]
 8023ad2:	4b0c      	ldr	r3, [pc, #48]	; (8023b04 <MX_DMA_Init+0x3c>)
 8023ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023ad6:	4a0b      	ldr	r2, [pc, #44]	; (8023b04 <MX_DMA_Init+0x3c>)
 8023ad8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8023adc:	6313      	str	r3, [r2, #48]	; 0x30
 8023ade:	4b09      	ldr	r3, [pc, #36]	; (8023b04 <MX_DMA_Init+0x3c>)
 8023ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023ae6:	607b      	str	r3, [r7, #4]
 8023ae8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8023aea:	2200      	movs	r2, #0
 8023aec:	2100      	movs	r1, #0
 8023aee:	2038      	movs	r0, #56	; 0x38
 8023af0:	f003 f82f 	bl	8026b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8023af4:	2038      	movs	r0, #56	; 0x38
 8023af6:	f003 f848 	bl	8026b8a <HAL_NVIC_EnableIRQ>

}
 8023afa:	bf00      	nop
 8023afc:	3708      	adds	r7, #8
 8023afe:	46bd      	mov	sp, r7
 8023b00:	bd80      	pop	{r7, pc}
 8023b02:	bf00      	nop
 8023b04:	40023800 	.word	0x40023800

08023b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8023b08:	b580      	push	{r7, lr}
 8023b0a:	b08a      	sub	sp, #40	; 0x28
 8023b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023b0e:	f107 0314 	add.w	r3, r7, #20
 8023b12:	2200      	movs	r2, #0
 8023b14:	601a      	str	r2, [r3, #0]
 8023b16:	605a      	str	r2, [r3, #4]
 8023b18:	609a      	str	r2, [r3, #8]
 8023b1a:	60da      	str	r2, [r3, #12]
 8023b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8023b1e:	2300      	movs	r3, #0
 8023b20:	613b      	str	r3, [r7, #16]
 8023b22:	4b5c      	ldr	r3, [pc, #368]	; (8023c94 <MX_GPIO_Init+0x18c>)
 8023b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023b26:	4a5b      	ldr	r2, [pc, #364]	; (8023c94 <MX_GPIO_Init+0x18c>)
 8023b28:	f043 0304 	orr.w	r3, r3, #4
 8023b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8023b2e:	4b59      	ldr	r3, [pc, #356]	; (8023c94 <MX_GPIO_Init+0x18c>)
 8023b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023b32:	f003 0304 	and.w	r3, r3, #4
 8023b36:	613b      	str	r3, [r7, #16]
 8023b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8023b3a:	2300      	movs	r3, #0
 8023b3c:	60fb      	str	r3, [r7, #12]
 8023b3e:	4b55      	ldr	r3, [pc, #340]	; (8023c94 <MX_GPIO_Init+0x18c>)
 8023b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023b42:	4a54      	ldr	r2, [pc, #336]	; (8023c94 <MX_GPIO_Init+0x18c>)
 8023b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023b48:	6313      	str	r3, [r2, #48]	; 0x30
 8023b4a:	4b52      	ldr	r3, [pc, #328]	; (8023c94 <MX_GPIO_Init+0x18c>)
 8023b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023b52:	60fb      	str	r3, [r7, #12]
 8023b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8023b56:	2300      	movs	r3, #0
 8023b58:	60bb      	str	r3, [r7, #8]
 8023b5a:	4b4e      	ldr	r3, [pc, #312]	; (8023c94 <MX_GPIO_Init+0x18c>)
 8023b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023b5e:	4a4d      	ldr	r2, [pc, #308]	; (8023c94 <MX_GPIO_Init+0x18c>)
 8023b60:	f043 0301 	orr.w	r3, r3, #1
 8023b64:	6313      	str	r3, [r2, #48]	; 0x30
 8023b66:	4b4b      	ldr	r3, [pc, #300]	; (8023c94 <MX_GPIO_Init+0x18c>)
 8023b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023b6a:	f003 0301 	and.w	r3, r3, #1
 8023b6e:	60bb      	str	r3, [r7, #8]
 8023b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8023b72:	2300      	movs	r3, #0
 8023b74:	607b      	str	r3, [r7, #4]
 8023b76:	4b47      	ldr	r3, [pc, #284]	; (8023c94 <MX_GPIO_Init+0x18c>)
 8023b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023b7a:	4a46      	ldr	r2, [pc, #280]	; (8023c94 <MX_GPIO_Init+0x18c>)
 8023b7c:	f043 0302 	orr.w	r3, r3, #2
 8023b80:	6313      	str	r3, [r2, #48]	; 0x30
 8023b82:	4b44      	ldr	r3, [pc, #272]	; (8023c94 <MX_GPIO_Init+0x18c>)
 8023b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023b86:	f003 0302 	and.w	r3, r3, #2
 8023b8a:	607b      	str	r3, [r7, #4]
 8023b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023b8e:	2300      	movs	r3, #0
 8023b90:	603b      	str	r3, [r7, #0]
 8023b92:	4b40      	ldr	r3, [pc, #256]	; (8023c94 <MX_GPIO_Init+0x18c>)
 8023b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023b96:	4a3f      	ldr	r2, [pc, #252]	; (8023c94 <MX_GPIO_Init+0x18c>)
 8023b98:	f043 0308 	orr.w	r3, r3, #8
 8023b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8023b9e:	4b3d      	ldr	r3, [pc, #244]	; (8023c94 <MX_GPIO_Init+0x18c>)
 8023ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023ba2:	f003 0308 	and.w	r3, r3, #8
 8023ba6:	603b      	str	r3, [r7, #0]
 8023ba8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8023baa:	2200      	movs	r2, #0
 8023bac:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8023bb0:	4839      	ldr	r0, [pc, #228]	; (8023c98 <MX_GPIO_Init+0x190>)
 8023bb2:	f003 fffb 	bl	8027bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8023bb6:	2201      	movs	r2, #1
 8023bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8023bbc:	4837      	ldr	r0, [pc, #220]	; (8023c9c <MX_GPIO_Init+0x194>)
 8023bbe:	f003 fff5 	bl	8027bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8023bc2:	2200      	movs	r2, #0
 8023bc4:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 8023bc8:	4835      	ldr	r0, [pc, #212]	; (8023ca0 <MX_GPIO_Init+0x198>)
 8023bca:	f003 ffef 	bl	8027bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8023bce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8023bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023bd4:	2301      	movs	r3, #1
 8023bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023bd8:	2300      	movs	r3, #0
 8023bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023bdc:	2300      	movs	r3, #0
 8023bde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023be0:	f107 0314 	add.w	r3, r7, #20
 8023be4:	4619      	mov	r1, r3
 8023be6:	482c      	ldr	r0, [pc, #176]	; (8023c98 <MX_GPIO_Init+0x190>)
 8023be8:	f003 fe2e 	bl	8027848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8023bec:	2307      	movs	r3, #7
 8023bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023bf0:	2300      	movs	r3, #0
 8023bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023bf4:	2301      	movs	r3, #1
 8023bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023bf8:	f107 0314 	add.w	r3, r7, #20
 8023bfc:	4619      	mov	r1, r3
 8023bfe:	4827      	ldr	r0, [pc, #156]	; (8023c9c <MX_GPIO_Init+0x194>)
 8023c00:	f003 fe22 	bl	8027848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023c0a:	2301      	movs	r3, #1
 8023c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023c0e:	2300      	movs	r3, #0
 8023c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023c12:	2300      	movs	r3, #0
 8023c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023c16:	f107 0314 	add.w	r3, r7, #20
 8023c1a:	4619      	mov	r1, r3
 8023c1c:	481f      	ldr	r0, [pc, #124]	; (8023c9c <MX_GPIO_Init+0x194>)
 8023c1e:	f003 fe13 	bl	8027848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 8023c22:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8023c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023c28:	2300      	movs	r3, #0
 8023c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023c2c:	2300      	movs	r3, #0
 8023c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023c30:	f107 0314 	add.w	r3, r7, #20
 8023c34:	4619      	mov	r1, r3
 8023c36:	4819      	ldr	r0, [pc, #100]	; (8023c9c <MX_GPIO_Init+0x194>)
 8023c38:	f003 fe06 	bl	8027848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8023c3c:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8023c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023c42:	2301      	movs	r3, #1
 8023c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023c46:	2300      	movs	r3, #0
 8023c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023c4a:	2300      	movs	r3, #0
 8023c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023c4e:	f107 0314 	add.w	r3, r7, #20
 8023c52:	4619      	mov	r1, r3
 8023c54:	4812      	ldr	r0, [pc, #72]	; (8023ca0 <MX_GPIO_Init+0x198>)
 8023c56:	f003 fdf7 	bl	8027848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023c60:	2300      	movs	r3, #0
 8023c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023c64:	2301      	movs	r3, #1
 8023c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023c68:	f107 0314 	add.w	r3, r7, #20
 8023c6c:	4619      	mov	r1, r3
 8023c6e:	480c      	ldr	r0, [pc, #48]	; (8023ca0 <MX_GPIO_Init+0x198>)
 8023c70:	f003 fdea 	bl	8027848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8023c74:	2304      	movs	r3, #4
 8023c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023c78:	2300      	movs	r3, #0
 8023c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023c7c:	2300      	movs	r3, #0
 8023c7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023c80:	f107 0314 	add.w	r3, r7, #20
 8023c84:	4619      	mov	r1, r3
 8023c86:	4807      	ldr	r0, [pc, #28]	; (8023ca4 <MX_GPIO_Init+0x19c>)
 8023c88:	f003 fdde 	bl	8027848 <HAL_GPIO_Init>

}
 8023c8c:	bf00      	nop
 8023c8e:	3728      	adds	r7, #40	; 0x28
 8023c90:	46bd      	mov	sp, r7
 8023c92:	bd80      	pop	{r7, pc}
 8023c94:	40023800 	.word	0x40023800
 8023c98:	40020800 	.word	0x40020800
 8023c9c:	40020400 	.word	0x40020400
 8023ca0:	40020000 	.word	0x40020000
 8023ca4:	40020c00 	.word	0x40020c00

08023ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8023ca8:	b480      	push	{r7}
 8023caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8023cac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8023cae:	e7fe      	b.n	8023cae <Error_Handler+0x6>

08023cb0 <_ZN5Motor4InitEv>:
#include "motor.hpp"
#include "declare_extern.h"

void Motor::Init()
{
 8023cb0:	b580      	push	{r7, lr}
 8023cb2:	b082      	sub	sp, #8
 8023cb4:	af00      	add	r7, sp, #0
 8023cb6:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8023cb8:	2104      	movs	r1, #4
 8023cba:	4812      	ldr	r0, [pc, #72]	; (8023d04 <_ZN5Motor4InitEv+0x54>)
 8023cbc:	f005 fabe 	bl	802923c <HAL_TIM_PWM_Start>
 8023cc0:	4603      	mov	r3, r0
 8023cc2:	2b00      	cmp	r3, #0
 8023cc4:	bf14      	ite	ne
 8023cc6:	2301      	movne	r3, #1
 8023cc8:	2300      	moveq	r3, #0
 8023cca:	b2db      	uxtb	r3, r3
 8023ccc:	2b00      	cmp	r3, #0
 8023cce:	d004      	beq.n	8023cda <_ZN5Motor4InitEv+0x2a>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch2 = true; // MOTOR_R
 8023cd0:	4b0d      	ldr	r3, [pc, #52]	; (8023d08 <_ZN5Motor4InitEv+0x58>)
 8023cd2:	2201      	movs	r2, #1
 8023cd4:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8023cd6:	f7ff ffe7 	bl	8023ca8 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8023cda:	210c      	movs	r1, #12
 8023cdc:	4809      	ldr	r0, [pc, #36]	; (8023d04 <_ZN5Motor4InitEv+0x54>)
 8023cde:	f005 faad 	bl	802923c <HAL_TIM_PWM_Start>
 8023ce2:	4603      	mov	r3, r0
 8023ce4:	2b00      	cmp	r3, #0
 8023ce6:	bf14      	ite	ne
 8023ce8:	2301      	movne	r3, #1
 8023cea:	2300      	moveq	r3, #0
 8023cec:	b2db      	uxtb	r3, r3
 8023cee:	2b00      	cmp	r3, #0
 8023cf0:	d004      	beq.n	8023cfc <_ZN5Motor4InitEv+0x4c>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch4 = true; // MOTOR_L
 8023cf2:	4b06      	ldr	r3, [pc, #24]	; (8023d0c <_ZN5Motor4InitEv+0x5c>)
 8023cf4:	2201      	movs	r2, #1
 8023cf6:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8023cf8:	f7ff ffd6 	bl	8023ca8 <Error_Handler>
    }
}
 8023cfc:	bf00      	nop
 8023cfe:	3708      	adds	r7, #8
 8023d00:	46bd      	mov	sp, r7
 8023d02:	bd80      	pop	{r7, pc}
 8023d04:	200008c0 	.word	0x200008c0
 8023d08:	200000b9 	.word	0x200000b9
 8023d0c:	200000ba 	.word	0x200000ba

08023d10 <_ZN5Motor5DriveEff>:

void Motor::Drive(float translation_ratio, float rotation_ratio)
{
 8023d10:	b580      	push	{r7, lr}
 8023d12:	b08a      	sub	sp, #40	; 0x28
 8023d14:	af00      	add	r7, sp, #0
 8023d16:	60f8      	str	r0, [r7, #12]
 8023d18:	ed87 0a02 	vstr	s0, [r7, #8]
 8023d1c:	edc7 0a01 	vstr	s1, [r7, #4]
#ifdef DEBUG_MODE
    g_translation_ratio = translation_ratio;
 8023d20:	4a89      	ldr	r2, [pc, #548]	; (8023f48 <_ZN5Motor5DriveEff+0x238>)
 8023d22:	68bb      	ldr	r3, [r7, #8]
 8023d24:	6013      	str	r3, [r2, #0]
    g_rotation_ratio    = rotation_ratio;
 8023d26:	4a89      	ldr	r2, [pc, #548]	; (8023f4c <_ZN5Motor5DriveEff+0x23c>)
 8023d28:	687b      	ldr	r3, [r7, #4]
 8023d2a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(translation_ratio > LIMIT_TRANS_DUTY)       translation_ratio =  LIMIT_TRANS_DUTY;
 8023d2c:	68b8      	ldr	r0, [r7, #8]
 8023d2e:	f7fc faeb 	bl	8020308 <__aeabi_f2d>
 8023d32:	a381      	add	r3, pc, #516	; (adr r3, 8023f38 <_ZN5Motor5DriveEff+0x228>)
 8023d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d38:	f7fc fdce 	bl	80208d8 <__aeabi_dcmpgt>
 8023d3c:	4603      	mov	r3, r0
 8023d3e:	2b00      	cmp	r3, #0
 8023d40:	d002      	beq.n	8023d48 <_ZN5Motor5DriveEff+0x38>
 8023d42:	4b83      	ldr	r3, [pc, #524]	; (8023f50 <_ZN5Motor5DriveEff+0x240>)
 8023d44:	60bb      	str	r3, [r7, #8]
 8023d46:	e00c      	b.n	8023d62 <_ZN5Motor5DriveEff+0x52>
    else if(translation_ratio < -LIMIT_TRANS_DUTY) translation_ratio = -LIMIT_TRANS_DUTY;
 8023d48:	68b8      	ldr	r0, [r7, #8]
 8023d4a:	f7fc fadd 	bl	8020308 <__aeabi_f2d>
 8023d4e:	a37c      	add	r3, pc, #496	; (adr r3, 8023f40 <_ZN5Motor5DriveEff+0x230>)
 8023d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d54:	f7fc fda2 	bl	802089c <__aeabi_dcmplt>
 8023d58:	4603      	mov	r3, r0
 8023d5a:	2b00      	cmp	r3, #0
 8023d5c:	d001      	beq.n	8023d62 <_ZN5Motor5DriveEff+0x52>
 8023d5e:	4b7d      	ldr	r3, [pc, #500]	; (8023f54 <_ZN5Motor5DriveEff+0x244>)
 8023d60:	60bb      	str	r3, [r7, #8]

    float sum = translation_ratio + rotation_ratio;
 8023d62:	ed97 7a02 	vldr	s14, [r7, #8]
 8023d66:	edd7 7a01 	vldr	s15, [r7, #4]
 8023d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023d6e:	edc7 7a06 	vstr	s15, [r7, #24]
    float excess = 0;
 8023d72:	f04f 0300 	mov.w	r3, #0
 8023d76:	627b      	str	r3, [r7, #36]	; 0x24

    if(sum > 1.0)       excess = sum - 1.0;
 8023d78:	edd7 7a06 	vldr	s15, [r7, #24]
 8023d7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d88:	dd08      	ble.n	8023d9c <_ZN5Motor5DriveEff+0x8c>
 8023d8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8023d8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023d92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023d96:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8023d9a:	e010      	b.n	8023dbe <_ZN5Motor5DriveEff+0xae>
    else if(sum < -1.0) excess = sum + 1.0;
 8023d9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8023da0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023dac:	d507      	bpl.n	8023dbe <_ZN5Motor5DriveEff+0xae>
 8023dae:	edd7 7a06 	vldr	s15, [r7, #24]
 8023db2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023db6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023dba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    translation_ratio -= excess;
 8023dbe:	ed97 7a02 	vldr	s14, [r7, #8]
 8023dc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8023dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023dca:	edc7 7a02 	vstr	s15, [r7, #8]

#ifdef DEBUG_MODE
    g_sum_raito = sum;
 8023dce:	4a62      	ldr	r2, [pc, #392]	; (8023f58 <_ZN5Motor5DriveEff+0x248>)
 8023dd0:	69bb      	ldr	r3, [r7, #24]
 8023dd2:	6013      	str	r3, [r2, #0]
    g_excess_ratio = excess;
 8023dd4:	4a61      	ldr	r2, [pc, #388]	; (8023f5c <_ZN5Motor5DriveEff+0x24c>)
 8023dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023dd8:	6013      	str	r3, [r2, #0]
    g_reduced_translation = translation_ratio;
 8023dda:	4a61      	ldr	r2, [pc, #388]	; (8023f60 <_ZN5Motor5DriveEff+0x250>)
 8023ddc:	68bb      	ldr	r3, [r7, #8]
 8023dde:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float duty_l = translation_ratio - rotation_ratio;
 8023de0:	ed97 7a02 	vldr	s14, [r7, #8]
 8023de4:	edd7 7a01 	vldr	s15, [r7, #4]
 8023de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023dec:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_r = translation_ratio + rotation_ratio;
 8023df0:	ed97 7a02 	vldr	s14, [r7, #8]
 8023df4:	edd7 7a01 	vldr	s15, [r7, #4]
 8023df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023dfc:	edc7 7a07 	vstr	s15, [r7, #28]

    if(duty_l > 1.0)       duty_l =  1.0;
 8023e00:	edd7 7a08 	vldr	s15, [r7, #32]
 8023e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e10:	dd03      	ble.n	8023e1a <_ZN5Motor5DriveEff+0x10a>
 8023e12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023e16:	623b      	str	r3, [r7, #32]
 8023e18:	e00a      	b.n	8023e30 <_ZN5Motor5DriveEff+0x120>
    else if(duty_l < -1.0) duty_l = -1.0;
 8023e1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8023e1e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e2a:	d501      	bpl.n	8023e30 <_ZN5Motor5DriveEff+0x120>
 8023e2c:	4b4d      	ldr	r3, [pc, #308]	; (8023f64 <_ZN5Motor5DriveEff+0x254>)
 8023e2e:	623b      	str	r3, [r7, #32]

    if(duty_r > 1.0)       duty_r =  1.0;
 8023e30:	edd7 7a07 	vldr	s15, [r7, #28]
 8023e34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e40:	dd03      	ble.n	8023e4a <_ZN5Motor5DriveEff+0x13a>
 8023e42:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023e46:	61fb      	str	r3, [r7, #28]
 8023e48:	e00a      	b.n	8023e60 <_ZN5Motor5DriveEff+0x150>
    else if(duty_r < -1.0) duty_r = -1.0;
 8023e4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8023e4e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e5a:	d501      	bpl.n	8023e60 <_ZN5Motor5DriveEff+0x150>
 8023e5c:	4b41      	ldr	r3, [pc, #260]	; (8023f64 <_ZN5Motor5DriveEff+0x254>)
 8023e5e:	61fb      	str	r3, [r7, #28]

#ifdef DEBUG_MODE
    g_duty_l = duty_l;
 8023e60:	4a41      	ldr	r2, [pc, #260]	; (8023f68 <_ZN5Motor5DriveEff+0x258>)
 8023e62:	6a3b      	ldr	r3, [r7, #32]
 8023e64:	6013      	str	r3, [r2, #0]
    g_duty_r = duty_r;
 8023e66:	4a41      	ldr	r2, [pc, #260]	; (8023f6c <_ZN5Motor5DriveEff+0x25c>)
 8023e68:	69fb      	ldr	r3, [r7, #28]
 8023e6a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int16_t count_l = static_cast<int16_t>(COUNTER_PERIOD * duty_l);
 8023e6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8023e70:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8023f70 <_ZN5Motor5DriveEff+0x260>
 8023e74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023e7c:	ee17 3a90 	vmov	r3, s15
 8023e80:	b21b      	sxth	r3, r3
 8023e82:	82fb      	strh	r3, [r7, #22]
    int16_t count_r = static_cast<int16_t>(COUNTER_PERIOD * duty_r);
 8023e84:	edd7 7a07 	vldr	s15, [r7, #28]
 8023e88:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8023f70 <_ZN5Motor5DriveEff+0x260>
 8023e8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023e94:	ee17 3a90 	vmov	r3, s15
 8023e98:	b21b      	sxth	r3, r3
 8023e9a:	82bb      	strh	r3, [r7, #20]

    if(count_l < 0) { count_l *= -1; BACKWARD_L; }
 8023e9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023ea0:	2b00      	cmp	r3, #0
 8023ea2:	da0d      	bge.n	8023ec0 <_ZN5Motor5DriveEff+0x1b0>
 8023ea4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023ea8:	b29b      	uxth	r3, r3
 8023eaa:	425b      	negs	r3, r3
 8023eac:	b29b      	uxth	r3, r3
 8023eae:	b21b      	sxth	r3, r3
 8023eb0:	82fb      	strh	r3, [r7, #22]
 8023eb2:	2200      	movs	r2, #0
 8023eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023eb8:	482e      	ldr	r0, [pc, #184]	; (8023f74 <_ZN5Motor5DriveEff+0x264>)
 8023eba:	f003 fe77 	bl	8027bac <HAL_GPIO_WritePin>
 8023ebe:	e009      	b.n	8023ed4 <_ZN5Motor5DriveEff+0x1c4>
    else if(count_l >= 0) FORWARD_L;
 8023ec0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023ec4:	2b00      	cmp	r3, #0
 8023ec6:	db05      	blt.n	8023ed4 <_ZN5Motor5DriveEff+0x1c4>
 8023ec8:	2201      	movs	r2, #1
 8023eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023ece:	4829      	ldr	r0, [pc, #164]	; (8023f74 <_ZN5Motor5DriveEff+0x264>)
 8023ed0:	f003 fe6c 	bl	8027bac <HAL_GPIO_WritePin>

    if(count_r < 0) { count_r *= -1; BACKWARD_R; }
 8023ed4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023ed8:	2b00      	cmp	r3, #0
 8023eda:	da0d      	bge.n	8023ef8 <_ZN5Motor5DriveEff+0x1e8>
 8023edc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023ee0:	b29b      	uxth	r3, r3
 8023ee2:	425b      	negs	r3, r3
 8023ee4:	b29b      	uxth	r3, r3
 8023ee6:	b21b      	sxth	r3, r3
 8023ee8:	82bb      	strh	r3, [r7, #20]
 8023eea:	2201      	movs	r2, #1
 8023eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023ef0:	4820      	ldr	r0, [pc, #128]	; (8023f74 <_ZN5Motor5DriveEff+0x264>)
 8023ef2:	f003 fe5b 	bl	8027bac <HAL_GPIO_WritePin>
 8023ef6:	e009      	b.n	8023f0c <_ZN5Motor5DriveEff+0x1fc>
    else if(count_r >= 0) FORWARD_R;
 8023ef8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023efc:	2b00      	cmp	r3, #0
 8023efe:	db05      	blt.n	8023f0c <_ZN5Motor5DriveEff+0x1fc>
 8023f00:	2200      	movs	r2, #0
 8023f02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023f06:	481b      	ldr	r0, [pc, #108]	; (8023f74 <_ZN5Motor5DriveEff+0x264>)
 8023f08:	f003 fe50 	bl	8027bac <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, count_l);
 8023f0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023f10:	4b19      	ldr	r3, [pc, #100]	; (8023f78 <_ZN5Motor5DriveEff+0x268>)
 8023f12:	681b      	ldr	r3, [r3, #0]
 8023f14:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, count_r);
 8023f16:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8023f1a:	4b17      	ldr	r3, [pc, #92]	; (8023f78 <_ZN5Motor5DriveEff+0x268>)
 8023f1c:	681b      	ldr	r3, [r3, #0]
 8023f1e:	641a      	str	r2, [r3, #64]	; 0x40

#ifdef DEBUG_MODE
    g_motor_compare_l = count_l;
 8023f20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023f24:	4b15      	ldr	r3, [pc, #84]	; (8023f7c <_ZN5Motor5DriveEff+0x26c>)
 8023f26:	801a      	strh	r2, [r3, #0]
    g_motor_compare_r = count_r;
 8023f28:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8023f2c:	4b14      	ldr	r3, [pc, #80]	; (8023f80 <_ZN5Motor5DriveEff+0x270>)
 8023f2e:	801a      	strh	r2, [r3, #0]
#endif // DEBUG_MODE
 8023f30:	bf00      	nop
 8023f32:	3728      	adds	r7, #40	; 0x28
 8023f34:	46bd      	mov	sp, r7
 8023f36:	bd80      	pop	{r7, pc}
 8023f38:	cccccccd 	.word	0xcccccccd
 8023f3c:	3feccccc 	.word	0x3feccccc
 8023f40:	cccccccd 	.word	0xcccccccd
 8023f44:	bfeccccc 	.word	0xbfeccccc
 8023f48:	20000264 	.word	0x20000264
 8023f4c:	20000268 	.word	0x20000268
 8023f50:	3f666666 	.word	0x3f666666
 8023f54:	bf666666 	.word	0xbf666666
 8023f58:	2000026c 	.word	0x2000026c
 8023f5c:	20000270 	.word	0x20000270
 8023f60:	20000274 	.word	0x20000274
 8023f64:	bf800000 	.word	0xbf800000
 8023f68:	20000278 	.word	0x20000278
 8023f6c:	2000027c 	.word	0x2000027c
 8023f70:	44832000 	.word	0x44832000
 8023f74:	40020000 	.word	0x40020000
 8023f78:	200008c0 	.word	0x200008c0
 8023f7c:	20000280 	.word	0x20000280
 8023f80:	20000282 	.word	0x20000282

08023f84 <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 8023f84:	b580      	push	{r7, lr}
 8023f86:	b084      	sub	sp, #16
 8023f88:	af00      	add	r7, sp, #0
 8023f8a:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 8023f8c:	2300      	movs	r3, #0
 8023f8e:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 8023f90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8023f94:	4821      	ldr	r0, [pc, #132]	; (802401c <_ZN12RotarySwitch5StateEv+0x98>)
 8023f96:	f003 fdf1 	bl	8027b7c <HAL_GPIO_ReadPin>
 8023f9a:	4603      	mov	r3, r0
 8023f9c:	2b00      	cmp	r3, #0
 8023f9e:	bf0c      	ite	eq
 8023fa0:	2301      	moveq	r3, #1
 8023fa2:	2300      	movne	r3, #0
 8023fa4:	b2db      	uxtb	r3, r3
 8023fa6:	2b00      	cmp	r3, #0
 8023fa8:	d003      	beq.n	8023fb2 <_ZN12RotarySwitch5StateEv+0x2e>
 8023faa:	7bfb      	ldrb	r3, [r7, #15]
 8023fac:	f043 0301 	orr.w	r3, r3, #1
 8023fb0:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 8023fb2:	2104      	movs	r1, #4
 8023fb4:	481a      	ldr	r0, [pc, #104]	; (8024020 <_ZN12RotarySwitch5StateEv+0x9c>)
 8023fb6:	f003 fde1 	bl	8027b7c <HAL_GPIO_ReadPin>
 8023fba:	4603      	mov	r3, r0
 8023fbc:	2b00      	cmp	r3, #0
 8023fbe:	bf0c      	ite	eq
 8023fc0:	2301      	moveq	r3, #1
 8023fc2:	2300      	movne	r3, #0
 8023fc4:	b2db      	uxtb	r3, r3
 8023fc6:	2b00      	cmp	r3, #0
 8023fc8:	d003      	beq.n	8023fd2 <_ZN12RotarySwitch5StateEv+0x4e>
 8023fca:	7bfb      	ldrb	r3, [r7, #15]
 8023fcc:	f043 0302 	orr.w	r3, r3, #2
 8023fd0:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 8023fd2:	2102      	movs	r1, #2
 8023fd4:	4812      	ldr	r0, [pc, #72]	; (8024020 <_ZN12RotarySwitch5StateEv+0x9c>)
 8023fd6:	f003 fdd1 	bl	8027b7c <HAL_GPIO_ReadPin>
 8023fda:	4603      	mov	r3, r0
 8023fdc:	2b00      	cmp	r3, #0
 8023fde:	bf0c      	ite	eq
 8023fe0:	2301      	moveq	r3, #1
 8023fe2:	2300      	movne	r3, #0
 8023fe4:	b2db      	uxtb	r3, r3
 8023fe6:	2b00      	cmp	r3, #0
 8023fe8:	d003      	beq.n	8023ff2 <_ZN12RotarySwitch5StateEv+0x6e>
 8023fea:	7bfb      	ldrb	r3, [r7, #15]
 8023fec:	f043 0304 	orr.w	r3, r3, #4
 8023ff0:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 8023ff2:	2101      	movs	r1, #1
 8023ff4:	480a      	ldr	r0, [pc, #40]	; (8024020 <_ZN12RotarySwitch5StateEv+0x9c>)
 8023ff6:	f003 fdc1 	bl	8027b7c <HAL_GPIO_ReadPin>
 8023ffa:	4603      	mov	r3, r0
 8023ffc:	2b00      	cmp	r3, #0
 8023ffe:	bf0c      	ite	eq
 8024000:	2301      	moveq	r3, #1
 8024002:	2300      	movne	r3, #0
 8024004:	b2db      	uxtb	r3, r3
 8024006:	2b00      	cmp	r3, #0
 8024008:	d003      	beq.n	8024012 <_ZN12RotarySwitch5StateEv+0x8e>
 802400a:	7bfb      	ldrb	r3, [r7, #15]
 802400c:	f043 0308 	orr.w	r3, r3, #8
 8024010:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 8024012:	7bfb      	ldrb	r3, [r7, #15]
 8024014:	4618      	mov	r0, r3
 8024016:	3710      	adds	r7, #16
 8024018:	46bd      	mov	sp, r7
 802401a:	bd80      	pop	{r7, pc}
 802401c:	40020000 	.word	0x40020000
 8024020:	40020400 	.word	0x40020400

08024024 <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3LedP10LineSensorP9LineTraceP6LoggerP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>:
#include "run.hpp"
#include "declare_extern.h"

Run::Run(Encoder *encoder,
 8024024:	b480      	push	{r7}
 8024026:	b085      	sub	sp, #20
 8024028:	af00      	add	r7, sp, #0
 802402a:	60f8      	str	r0, [r7, #12]
 802402c:	60b9      	str	r1, [r7, #8]
 802402e:	607a      	str	r2, [r7, #4]
 8024030:	603b      	str	r3, [r7, #0]
           , run_mode_changed_internal_(false)
           , switch_interval_wait_timer_(0)
           , switch_interval_wait_enable_(true)
           , switch_interval_led_enable_(true)
           , mode_complete_(true)
           , store_log_failed_(true)
 8024032:	68fb      	ldr	r3, [r7, #12]
 8024034:	2200      	movs	r2, #0
 8024036:	701a      	strb	r2, [r3, #0]
 8024038:	68fb      	ldr	r3, [r7, #12]
 802403a:	2200      	movs	r2, #0
 802403c:	705a      	strb	r2, [r3, #1]
 802403e:	68fb      	ldr	r3, [r7, #12]
 8024040:	2200      	movs	r2, #0
 8024042:	709a      	strb	r2, [r3, #2]
 8024044:	68fb      	ldr	r3, [r7, #12]
 8024046:	2201      	movs	r2, #1
 8024048:	70da      	strb	r2, [r3, #3]
 802404a:	68fb      	ldr	r3, [r7, #12]
 802404c:	2201      	movs	r2, #1
 802404e:	711a      	strb	r2, [r3, #4]
 8024050:	68fb      	ldr	r3, [r7, #12]
 8024052:	2201      	movs	r2, #1
 8024054:	715a      	strb	r2, [r3, #5]
 8024056:	68fb      	ldr	r3, [r7, #12]
 8024058:	2201      	movs	r2, #1
 802405a:	719a      	strb	r2, [r3, #6]
{
    encoder_          = encoder;
 802405c:	68fb      	ldr	r3, [r7, #12]
 802405e:	68ba      	ldr	r2, [r7, #8]
 8024060:	609a      	str	r2, [r3, #8]
    flash_            = flash;
 8024062:	68fb      	ldr	r3, [r7, #12]
 8024064:	687a      	ldr	r2, [r7, #4]
 8024066:	60da      	str	r2, [r3, #12]
    iim_42652_        = iim_42652;
 8024068:	68fb      	ldr	r3, [r7, #12]
 802406a:	683a      	ldr	r2, [r7, #0]
 802406c:	611a      	str	r2, [r3, #16]
    led_              = led;
 802406e:	68fb      	ldr	r3, [r7, #12]
 8024070:	69ba      	ldr	r2, [r7, #24]
 8024072:	615a      	str	r2, [r3, #20]
    line_sensor_      = line_sensor;
 8024074:	68fb      	ldr	r3, [r7, #12]
 8024076:	69fa      	ldr	r2, [r7, #28]
 8024078:	619a      	str	r2, [r3, #24]
    line_trace_       = line_trace;
 802407a:	68fb      	ldr	r3, [r7, #12]
 802407c:	6a3a      	ldr	r2, [r7, #32]
 802407e:	61da      	str	r2, [r3, #28]
    logger_           = logger;
 8024080:	68fb      	ldr	r3, [r7, #12]
 8024082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024084:	621a      	str	r2, [r3, #32]
    motor_            = motor;
 8024086:	68fb      	ldr	r3, [r7, #12]
 8024088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802408a:	625a      	str	r2, [r3, #36]	; 0x24
    rotary_switch_    = rotary_switch;
 802408c:	68fb      	ldr	r3, [r7, #12]
 802408e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024090:	629a      	str	r2, [r3, #40]	; 0x28
    side_sensor_      = side_sensor;
 8024092:	68fb      	ldr	r3, [r7, #12]
 8024094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024096:	62da      	str	r2, [r3, #44]	; 0x2c
    velocity_control_ = velocity_control;
 8024098:	68fb      	ldr	r3, [r7, #12]
 802409a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802409c:	631a      	str	r2, [r3, #48]	; 0x30
}
 802409e:	68fb      	ldr	r3, [r7, #12]
 80240a0:	4618      	mov	r0, r3
 80240a2:	3714      	adds	r7, #20
 80240a4:	46bd      	mov	sp, r7
 80240a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240aa:	4770      	bx	lr

080240ac <_ZN3Run4InitEv>:

void Run::Init()
{
 80240ac:	b580      	push	{r7, lr}
 80240ae:	b084      	sub	sp, #16
 80240b0:	af00      	add	r7, sp, #0
 80240b2:	6078      	str	r0, [r7, #4]
    line_sensor_->Init();
 80240b4:	687b      	ldr	r3, [r7, #4]
 80240b6:	699b      	ldr	r3, [r3, #24]
 80240b8:	4618      	mov	r0, r3
 80240ba:	f7fd fd1b 	bl	8021af4 <_ZN10LineSensor4InitEv>
    encoder_->Init();
 80240be:	687b      	ldr	r3, [r7, #4]
 80240c0:	689b      	ldr	r3, [r3, #8]
 80240c2:	4618      	mov	r0, r3
 80240c4:	f7fc fe3e 	bl	8020d44 <_ZN7Encoder4InitEv>
    motor_->Init();
 80240c8:	687b      	ldr	r3, [r7, #4]
 80240ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80240cc:	4618      	mov	r0, r3
 80240ce:	f7ff fdef 	bl	8023cb0 <_ZN5Motor4InitEv>
    uint8_t imu_init = iim_42652_->Init();
 80240d2:	687b      	ldr	r3, [r7, #4]
 80240d4:	691b      	ldr	r3, [r3, #16]
 80240d6:	4618      	mov	r0, r3
 80240d8:	f7fd f910 	bl	80212fc <_ZN8Iim426524InitEv>
 80240dc:	4603      	mov	r3, r0
 80240de:	73bb      	strb	r3, [r7, #14]

    bool flash_erase = true;
 80240e0:	2301      	movs	r3, #1
 80240e2:	73fb      	strb	r3, [r7, #15]
    uint8_t switch_state = rotary_switch_->State();
 80240e4:	687b      	ldr	r3, [r7, #4]
 80240e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80240e8:	4618      	mov	r0, r3
 80240ea:	f7ff ff4b 	bl	8023f84 <_ZN12RotarySwitch5StateEv>
 80240ee:	4603      	mov	r3, r0
 80240f0:	737b      	strb	r3, [r7, #13]
    if(switch_state == 0x0E)
 80240f2:	7b7b      	ldrb	r3, [r7, #13]
 80240f4:	2b0e      	cmp	r3, #14
 80240f6:	d113      	bne.n	8024120 <_ZN3Run4InitEv+0x74>
    {
        led_->Blink(3, 'R', 'X');
 80240f8:	687b      	ldr	r3, [r7, #4]
 80240fa:	6958      	ldr	r0, [r3, #20]
 80240fc:	2358      	movs	r3, #88	; 0x58
 80240fe:	2252      	movs	r2, #82	; 0x52
 8024100:	2103      	movs	r1, #3
 8024102:	f7fd fbeb 	bl	80218dc <_ZN3Led5BlinkEhcc>
        if(!flash_->Clear()) flash_erase = false;
 8024106:	687b      	ldr	r3, [r7, #4]
 8024108:	68db      	ldr	r3, [r3, #12]
 802410a:	4618      	mov	r0, r3
 802410c:	f7fc ff1c 	bl	8020f48 <_ZN5Flash5ClearEv>
 8024110:	4603      	mov	r3, r0
 8024112:	f083 0301 	eor.w	r3, r3, #1
 8024116:	b2db      	uxtb	r3, r3
 8024118:	2b00      	cmp	r3, #0
 802411a:	d001      	beq.n	8024120 <_ZN3Run4InitEv+0x74>
 802411c:	2300      	movs	r3, #0
 802411e:	73fb      	strb	r3, [r7, #15]
    }

#ifdef DEBUG_MODE
    g_imu_init = imu_init;
 8024120:	4a19      	ldr	r2, [pc, #100]	; (8024188 <_ZN3Run4InitEv+0xdc>)
 8024122:	7bbb      	ldrb	r3, [r7, #14]
 8024124:	7013      	strb	r3, [r2, #0]
    g_flash_erase = flash_erase;
 8024126:	7bfa      	ldrb	r2, [r7, #15]
 8024128:	4b18      	ldr	r3, [pc, #96]	; (802418c <_ZN3Run4InitEv+0xe0>)
 802412a:	701a      	strb	r2, [r3, #0]
    g_switch_state = switch_state;
 802412c:	4a18      	ldr	r2, [pc, #96]	; (8024190 <_ZN3Run4InitEv+0xe4>)
 802412e:	7b7b      	ldrb	r3, [r7, #13]
 8024130:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(flash_erase && imu_init == 0x09)
 8024132:	7bfb      	ldrb	r3, [r7, #15]
 8024134:	2b00      	cmp	r3, #0
 8024136:	d012      	beq.n	802415e <_ZN3Run4InitEv+0xb2>
 8024138:	7bbb      	ldrb	r3, [r7, #14]
 802413a:	2b09      	cmp	r3, #9
 802413c:	d10f      	bne.n	802415e <_ZN3Run4InitEv+0xb2>
    {
        led_->Rainbow(1);
 802413e:	687b      	ldr	r3, [r7, #4]
 8024140:	695b      	ldr	r3, [r3, #20]
 8024142:	2101      	movs	r1, #1
 8024144:	4618      	mov	r0, r3
 8024146:	f7fd fbf6 	bl	8021936 <_ZN3Led7RainbowEh>
        HAL_TIM_Base_Start_IT(&htim2);
 802414a:	4812      	ldr	r0, [pc, #72]	; (8024194 <_ZN3Run4InitEv+0xe8>)
 802414c:	f005 f827 	bl	802919e <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 8024150:	4811      	ldr	r0, [pc, #68]	; (8024198 <_ZN3Run4InitEv+0xec>)
 8024152:	f005 f824 	bl	802919e <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim7);
 8024156:	4811      	ldr	r0, [pc, #68]	; (802419c <_ZN3Run4InitEv+0xf0>)
 8024158:	f005 f821 	bl	802919e <HAL_TIM_Base_Start_IT>
    }
    else if(flash_erase) led_->ColorOrder('Y');
    else led_->ColorOrder('R');
}
 802415c:	e00f      	b.n	802417e <_ZN3Run4InitEv+0xd2>
    else if(flash_erase) led_->ColorOrder('Y');
 802415e:	7bfb      	ldrb	r3, [r7, #15]
 8024160:	2b00      	cmp	r3, #0
 8024162:	d006      	beq.n	8024172 <_ZN3Run4InitEv+0xc6>
 8024164:	687b      	ldr	r3, [r7, #4]
 8024166:	695b      	ldr	r3, [r3, #20]
 8024168:	2159      	movs	r1, #89	; 0x59
 802416a:	4618      	mov	r0, r3
 802416c:	f7fd fada 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 8024170:	e005      	b.n	802417e <_ZN3Run4InitEv+0xd2>
    else led_->ColorOrder('R');
 8024172:	687b      	ldr	r3, [r7, #4]
 8024174:	695b      	ldr	r3, [r3, #20]
 8024176:	2152      	movs	r1, #82	; 0x52
 8024178:	4618      	mov	r0, r3
 802417a:	f7fd fad3 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 802417e:	bf00      	nop
 8024180:	3710      	adds	r7, #16
 8024182:	46bd      	mov	sp, r7
 8024184:	bd80      	pop	{r7, pc}
 8024186:	bf00      	nop
 8024188:	2000024f 	.word	0x2000024f
 802418c:	200002c9 	.word	0x200002c9
 8024190:	200002c8 	.word	0x200002c8
 8024194:	20000900 	.word	0x20000900
 8024198:	20000880 	.word	0x20000880
 802419c:	20000980 	.word	0x20000980

080241a0 <_ZN3Run6Timer7Ev>:

void Run::Timer7()
{
 80241a0:	b580      	push	{r7, lr}
 80241a2:	b082      	sub	sp, #8
 80241a4:	af00      	add	r7, sp, #0
 80241a6:	6078      	str	r0, [r7, #4]
    line_sensor_->StoreConsecutiveBuff();
 80241a8:	687b      	ldr	r3, [r7, #4]
 80241aa:	699b      	ldr	r3, [r3, #24]
 80241ac:	4618      	mov	r0, r3
 80241ae:	f7fd fcdb 	bl	8021b68 <_ZN10LineSensor20StoreConsecutiveBuffEv>
}
 80241b2:	bf00      	nop
 80241b4:	3708      	adds	r7, #8
 80241b6:	46bd      	mov	sp, r7
 80241b8:	bd80      	pop	{r7, pc}
	...

080241bc <_ZN3Run6Timer2Ev>:

void Run::Timer2()
{
 80241bc:	b580      	push	{r7, lr}
 80241be:	b084      	sub	sp, #16
 80241c0:	af00      	add	r7, sp, #0
 80241c2:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = rotary_switch_->State();
 80241c4:	687b      	ldr	r3, [r7, #4]
 80241c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80241c8:	4618      	mov	r0, r3
 80241ca:	f7ff fedb 	bl	8023f84 <_ZN12RotarySwitch5StateEv>
 80241ce:	4603      	mov	r3, r0
 80241d0:	73fb      	strb	r3, [r7, #15]
    static uint8_t pre_switch_state = switch_state;
 80241d2:	4b2c      	ldr	r3, [pc, #176]	; (8024284 <_ZN3Run6Timer2Ev+0xc8>)
 80241d4:	781b      	ldrb	r3, [r3, #0]
 80241d6:	f3bf 8f5b 	dmb	ish
 80241da:	b2db      	uxtb	r3, r3
 80241dc:	f003 0301 	and.w	r3, r3, #1
 80241e0:	2b00      	cmp	r3, #0
 80241e2:	bf0c      	ite	eq
 80241e4:	2301      	moveq	r3, #1
 80241e6:	2300      	movne	r3, #0
 80241e8:	b2db      	uxtb	r3, r3
 80241ea:	2b00      	cmp	r3, #0
 80241ec:	d010      	beq.n	8024210 <_ZN3Run6Timer2Ev+0x54>
 80241ee:	4825      	ldr	r0, [pc, #148]	; (8024284 <_ZN3Run6Timer2Ev+0xc8>)
 80241f0:	f005 ffcc 	bl	802a18c <__cxa_guard_acquire>
 80241f4:	4603      	mov	r3, r0
 80241f6:	2b00      	cmp	r3, #0
 80241f8:	bf14      	ite	ne
 80241fa:	2301      	movne	r3, #1
 80241fc:	2300      	moveq	r3, #0
 80241fe:	b2db      	uxtb	r3, r3
 8024200:	2b00      	cmp	r3, #0
 8024202:	d005      	beq.n	8024210 <_ZN3Run6Timer2Ev+0x54>
 8024204:	4a20      	ldr	r2, [pc, #128]	; (8024288 <_ZN3Run6Timer2Ev+0xcc>)
 8024206:	7bfb      	ldrb	r3, [r7, #15]
 8024208:	7013      	strb	r3, [r2, #0]
 802420a:	481e      	ldr	r0, [pc, #120]	; (8024284 <_ZN3Run6Timer2Ev+0xc8>)
 802420c:	f005 ffca 	bl	802a1a4 <__cxa_guard_release>
    static bool interval_enable = true;

#ifdef DEBUG_MODE
    g_switch_state = switch_state;
 8024210:	4a1e      	ldr	r2, [pc, #120]	; (802428c <_ZN3Run6Timer2Ev+0xd0>)
 8024212:	7bfb      	ldrb	r3, [r7, #15]
 8024214:	7013      	strb	r3, [r2, #0]
    g_interval_enable = interval_enable;
 8024216:	4b1e      	ldr	r3, [pc, #120]	; (8024290 <_ZN3Run6Timer2Ev+0xd4>)
 8024218:	781a      	ldrb	r2, [r3, #0]
 802421a:	4b1e      	ldr	r3, [pc, #120]	; (8024294 <_ZN3Run6Timer2Ev+0xd8>)
 802421c:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

    if(switch_state != pre_switch_state)
 802421e:	4b1a      	ldr	r3, [pc, #104]	; (8024288 <_ZN3Run6Timer2Ev+0xcc>)
 8024220:	781b      	ldrb	r3, [r3, #0]
 8024222:	7bfa      	ldrb	r2, [r7, #15]
 8024224:	429a      	cmp	r2, r3
 8024226:	d00f      	beq.n	8024248 <_ZN3Run6Timer2Ev+0x8c>
    {
        SetRunMode(STANDBY);
 8024228:	2100      	movs	r1, #0
 802422a:	6878      	ldr	r0, [r7, #4]
 802422c:	f000 f896 	bl	802435c <_ZN3Run10SetRunModeEh>
        WhenSwitchChange();
 8024230:	6878      	ldr	r0, [r7, #4]
 8024232:	f000 f8bb 	bl	80243ac <_ZN3Run16WhenSwitchChangeEv>
        led_->ResetInterrupt();
 8024236:	687b      	ldr	r3, [r7, #4]
 8024238:	695b      	ldr	r3, [r3, #20]
 802423a:	4618      	mov	r0, r3
 802423c:	f7fd fc09 	bl	8021a52 <_ZN3Led14ResetInterruptEv>
        interval_enable = true;
 8024240:	4b13      	ldr	r3, [pc, #76]	; (8024290 <_ZN3Run6Timer2Ev+0xd4>)
 8024242:	2201      	movs	r2, #1
 8024244:	701a      	strb	r2, [r3, #0]
 8024246:	e016      	b.n	8024276 <_ZN3Run6Timer2Ev+0xba>
    }
    else if(interval_enable)
 8024248:	4b11      	ldr	r3, [pc, #68]	; (8024290 <_ZN3Run6Timer2Ev+0xd4>)
 802424a:	781b      	ldrb	r3, [r3, #0]
 802424c:	2b00      	cmp	r3, #0
 802424e:	d00d      	beq.n	802426c <_ZN3Run6Timer2Ev+0xb0>
    {
        SetRunMode(STANDBY);
 8024250:	2100      	movs	r1, #0
 8024252:	6878      	ldr	r0, [r7, #4]
 8024254:	f000 f882 	bl	802435c <_ZN3Run10SetRunModeEh>
        interval_enable = SwitchChangeInterval(switch_state);
 8024258:	7bfb      	ldrb	r3, [r7, #15]
 802425a:	4619      	mov	r1, r3
 802425c:	6878      	ldr	r0, [r7, #4]
 802425e:	f000 f8bb 	bl	80243d8 <_ZN3Run20SwitchChangeIntervalEh>
 8024262:	4603      	mov	r3, r0
 8024264:	461a      	mov	r2, r3
 8024266:	4b0a      	ldr	r3, [pc, #40]	; (8024290 <_ZN3Run6Timer2Ev+0xd4>)
 8024268:	701a      	strb	r2, [r3, #0]
 802426a:	e004      	b.n	8024276 <_ZN3Run6Timer2Ev+0xba>
    }
    else UpdateRunMode(switch_state);
 802426c:	7bfb      	ldrb	r3, [r7, #15]
 802426e:	4619      	mov	r1, r3
 8024270:	6878      	ldr	r0, [r7, #4]
 8024272:	f000 f811 	bl	8024298 <_ZN3Run13UpdateRunModeEh>

    pre_switch_state = switch_state;
 8024276:	4a04      	ldr	r2, [pc, #16]	; (8024288 <_ZN3Run6Timer2Ev+0xcc>)
 8024278:	7bfb      	ldrb	r3, [r7, #15]
 802427a:	7013      	strb	r3, [r2, #0]
}
 802427c:	bf00      	nop
 802427e:	3710      	adds	r7, #16
 8024280:	46bd      	mov	sp, r7
 8024282:	bd80      	pop	{r7, pc}
 8024284:	200002cc 	.word	0x200002cc
 8024288:	200002ca 	.word	0x200002ca
 802428c:	200002c8 	.word	0x200002c8
 8024290:	20000011 	.word	0x20000011
 8024294:	20000010 	.word	0x20000010

08024298 <_ZN3Run13UpdateRunModeEh>:

void Run::UpdateRunMode(uint8_t switch_state)
{
 8024298:	b580      	push	{r7, lr}
 802429a:	b082      	sub	sp, #8
 802429c:	af00      	add	r7, sp, #0
 802429e:	6078      	str	r0, [r7, #4]
 80242a0:	460b      	mov	r3, r1
 80242a2:	70fb      	strb	r3, [r7, #3]
    if(run_mode_changed_internal_) return;
 80242a4:	687b      	ldr	r3, [r7, #4]
 80242a6:	785b      	ldrb	r3, [r3, #1]
 80242a8:	2b00      	cmp	r3, #0
 80242aa:	d153      	bne.n	8024354 <_ZN3Run13UpdateRunModeEh+0xbc>

    switch(switch_state)
 80242ac:	78fb      	ldrb	r3, [r7, #3]
 80242ae:	3b01      	subs	r3, #1
 80242b0:	2b0e      	cmp	r3, #14
 80242b2:	d849      	bhi.n	8024348 <_ZN3Run13UpdateRunModeEh+0xb0>
 80242b4:	a201      	add	r2, pc, #4	; (adr r2, 80242bc <_ZN3Run13UpdateRunModeEh+0x24>)
 80242b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80242ba:	bf00      	nop
 80242bc:	08024321 	.word	0x08024321
 80242c0:	0802432b 	.word	0x0802432b
 80242c4:	08024349 	.word	0x08024349
 80242c8:	08024349 	.word	0x08024349
 80242cc:	08024349 	.word	0x08024349
 80242d0:	08024349 	.word	0x08024349
 80242d4:	08024335 	.word	0x08024335
 80242d8:	0802433f 	.word	0x0802433f
 80242dc:	08024349 	.word	0x08024349
 80242e0:	08024349 	.word	0x08024349
 80242e4:	080242f9 	.word	0x080242f9
 80242e8:	08024303 	.word	0x08024303
 80242ec:	0802430d 	.word	0x0802430d
 80242f0:	08024349 	.word	0x08024349
 80242f4:	08024317 	.word	0x08024317
    {
#ifdef DEBUG_MODE
        case 0x0B: SetRunMode(VELOCITY_CONTROL_DEBUG); break;
 80242f8:	210b      	movs	r1, #11
 80242fa:	6878      	ldr	r0, [r7, #4]
 80242fc:	f000 f82e 	bl	802435c <_ZN3Run10SetRunModeEh>
 8024300:	e029      	b.n	8024356 <_ZN3Run13UpdateRunModeEh+0xbe>
        case 0x0C: SetRunMode(LINE_TRACE_DEBUG); break;
 8024302:	210c      	movs	r1, #12
 8024304:	6878      	ldr	r0, [r7, #4]
 8024306:	f000 f829 	bl	802435c <_ZN3Run10SetRunModeEh>
 802430a:	e024      	b.n	8024356 <_ZN3Run13UpdateRunModeEh+0xbe>
#endif // DEBUG_MODE

        case 0x0D: SetRunMode(DEV); break;
 802430c:	210d      	movs	r1, #13
 802430e:	6878      	ldr	r0, [r7, #4]
 8024310:	f000 f824 	bl	802435c <_ZN3Run10SetRunModeEh>
 8024314:	e01f      	b.n	8024356 <_ZN3Run13UpdateRunModeEh+0xbe>
        case 0x0F: SetRunMode(READY); break;
 8024316:	210f      	movs	r1, #15
 8024318:	6878      	ldr	r0, [r7, #4]
 802431a:	f000 f81f 	bl	802435c <_ZN3Run10SetRunModeEh>
 802431e:	e01a      	b.n	8024356 <_ZN3Run13UpdateRunModeEh+0xbe>
        case 0x01: SetRunMode(FIRST_RUN); break;
 8024320:	2101      	movs	r1, #1
 8024322:	6878      	ldr	r0, [r7, #4]
 8024324:	f000 f81a 	bl	802435c <_ZN3Run10SetRunModeEh>
 8024328:	e015      	b.n	8024356 <_ZN3Run13UpdateRunModeEh+0xbe>
        case 0x02: SetRunMode(SECOND_RUN); break;
 802432a:	2102      	movs	r1, #2
 802432c:	6878      	ldr	r0, [r7, #4]
 802432e:	f000 f815 	bl	802435c <_ZN3Run10SetRunModeEh>
 8024332:	e010      	b.n	8024356 <_ZN3Run13UpdateRunModeEh+0xbe>
        case 0x07: SetRunMode(VELOCITY_CONTROL); break;
 8024334:	2107      	movs	r1, #7
 8024336:	6878      	ldr	r0, [r7, #4]
 8024338:	f000 f810 	bl	802435c <_ZN3Run10SetRunModeEh>
 802433c:	e00b      	b.n	8024356 <_ZN3Run13UpdateRunModeEh+0xbe>
        case 0x08: SetRunMode(LINE_TRACE); break;
 802433e:	2108      	movs	r1, #8
 8024340:	6878      	ldr	r0, [r7, #4]
 8024342:	f000 f80b 	bl	802435c <_ZN3Run10SetRunModeEh>
 8024346:	e006      	b.n	8024356 <_ZN3Run13UpdateRunModeEh+0xbe>
        default:   SetRunMode(STANDBY); break;
 8024348:	2100      	movs	r1, #0
 802434a:	6878      	ldr	r0, [r7, #4]
 802434c:	f000 f806 	bl	802435c <_ZN3Run10SetRunModeEh>
 8024350:	bf00      	nop
 8024352:	e000      	b.n	8024356 <_ZN3Run13UpdateRunModeEh+0xbe>
    if(run_mode_changed_internal_) return;
 8024354:	bf00      	nop
    }
}
 8024356:	3708      	adds	r7, #8
 8024358:	46bd      	mov	sp, r7
 802435a:	bd80      	pop	{r7, pc}

0802435c <_ZN3Run10SetRunModeEh>:

void Run::SetRunMode(uint8_t mode)
{
 802435c:	b480      	push	{r7}
 802435e:	b083      	sub	sp, #12
 8024360:	af00      	add	r7, sp, #0
 8024362:	6078      	str	r0, [r7, #4]
 8024364:	460b      	mov	r3, r1
 8024366:	70fb      	strb	r3, [r7, #3]
    run_mode_ = mode;
 8024368:	687b      	ldr	r3, [r7, #4]
 802436a:	78fa      	ldrb	r2, [r7, #3]
 802436c:	701a      	strb	r2, [r3, #0]
}
 802436e:	bf00      	nop
 8024370:	370c      	adds	r7, #12
 8024372:	46bd      	mov	sp, r7
 8024374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024378:	4770      	bx	lr
	...

0802437c <_ZN3Run25SetRunModeChangedInternalEb>:

void Run::SetRunModeChangedInternal(bool boolean)
{
 802437c:	b480      	push	{r7}
 802437e:	b083      	sub	sp, #12
 8024380:	af00      	add	r7, sp, #0
 8024382:	6078      	str	r0, [r7, #4]
 8024384:	460b      	mov	r3, r1
 8024386:	70fb      	strb	r3, [r7, #3]
    run_mode_changed_internal_ = boolean;
 8024388:	687b      	ldr	r3, [r7, #4]
 802438a:	78fa      	ldrb	r2, [r7, #3]
 802438c:	705a      	strb	r2, [r3, #1]

#ifdef DEBUG_MODE
    g_run_mode_changed_internal_cnt++;
 802438e:	4b06      	ldr	r3, [pc, #24]	; (80243a8 <_ZN3Run25SetRunModeChangedInternalEb+0x2c>)
 8024390:	781b      	ldrb	r3, [r3, #0]
 8024392:	3301      	adds	r3, #1
 8024394:	b2da      	uxtb	r2, r3
 8024396:	4b04      	ldr	r3, [pc, #16]	; (80243a8 <_ZN3Run25SetRunModeChangedInternalEb+0x2c>)
 8024398:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE
}
 802439a:	bf00      	nop
 802439c:	370c      	adds	r7, #12
 802439e:	46bd      	mov	sp, r7
 80243a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243a4:	4770      	bx	lr
 80243a6:	bf00      	nop
 80243a8:	200000b6 	.word	0x200000b6

080243ac <_ZN3Run16WhenSwitchChangeEv>:

void Run::WhenSwitchChange()
{
 80243ac:	b580      	push	{r7, lr}
 80243ae:	b082      	sub	sp, #8
 80243b0:	af00      	add	r7, sp, #0
 80243b2:	6078      	str	r0, [r7, #4]
    SetRunModeChangedInternal(false);
 80243b4:	2100      	movs	r1, #0
 80243b6:	6878      	ldr	r0, [r7, #4]
 80243b8:	f7ff ffe0 	bl	802437c <_ZN3Run25SetRunModeChangedInternalEb>
    switch_interval_led_enable_ = true;
 80243bc:	687b      	ldr	r3, [r7, #4]
 80243be:	2201      	movs	r2, #1
 80243c0:	711a      	strb	r2, [r3, #4]
    switch_interval_wait_enable_ = true;
 80243c2:	687b      	ldr	r3, [r7, #4]
 80243c4:	2201      	movs	r2, #1
 80243c6:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_timer_ = 0;
 80243c8:	687b      	ldr	r3, [r7, #4]
 80243ca:	2200      	movs	r2, #0
 80243cc:	709a      	strb	r2, [r3, #2]
}
 80243ce:	bf00      	nop
 80243d0:	3708      	adds	r7, #8
 80243d2:	46bd      	mov	sp, r7
 80243d4:	bd80      	pop	{r7, pc}
	...

080243d8 <_ZN3Run20SwitchChangeIntervalEh>:

bool Run::SwitchChangeInterval(uint8_t switch_state)
{
 80243d8:	b580      	push	{r7, lr}
 80243da:	b084      	sub	sp, #16
 80243dc:	af00      	add	r7, sp, #0
 80243de:	6078      	str	r0, [r7, #4]
 80243e0:	460b      	mov	r3, r1
 80243e2:	70fb      	strb	r3, [r7, #3]
    uint8_t wait_timer = switch_interval_wait_timer_;
 80243e4:	687b      	ldr	r3, [r7, #4]
 80243e6:	789b      	ldrb	r3, [r3, #2]
 80243e8:	73fb      	strb	r3, [r7, #15]
    bool wait_enable = switch_interval_wait_enable_;
 80243ea:	687b      	ldr	r3, [r7, #4]
 80243ec:	78db      	ldrb	r3, [r3, #3]
 80243ee:	73bb      	strb	r3, [r7, #14]
    bool led_enable = switch_interval_led_enable_;
 80243f0:	687b      	ldr	r3, [r7, #4]
 80243f2:	791b      	ldrb	r3, [r3, #4]
 80243f4:	737b      	strb	r3, [r7, #13]
    bool interval_continue = true;
 80243f6:	2301      	movs	r3, #1
 80243f8:	733b      	strb	r3, [r7, #12]

    if(led_enable)
 80243fa:	7b7b      	ldrb	r3, [r7, #13]
 80243fc:	2b00      	cmp	r3, #0
 80243fe:	f000 8080 	beq.w	8024502 <_ZN3Run20SwitchChangeIntervalEh+0x12a>
    {
        switch(switch_state)
 8024402:	78fb      	ldrb	r3, [r7, #3]
 8024404:	3b01      	subs	r3, #1
 8024406:	2b0e      	cmp	r3, #14
 8024408:	d870      	bhi.n	80244ec <_ZN3Run20SwitchChangeIntervalEh+0x114>
 802440a:	a201      	add	r2, pc, #4	; (adr r2, 8024410 <_ZN3Run20SwitchChangeIntervalEh+0x38>)
 802440c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024410:	0802449d 	.word	0x0802449d
 8024414:	080244b1 	.word	0x080244b1
 8024418:	080244ed 	.word	0x080244ed
 802441c:	080244ed 	.word	0x080244ed
 8024420:	080244ed 	.word	0x080244ed
 8024424:	080244ed 	.word	0x080244ed
 8024428:	080244c5 	.word	0x080244c5
 802442c:	080244d9 	.word	0x080244d9
 8024430:	080244ed 	.word	0x080244ed
 8024434:	080244ed 	.word	0x080244ed
 8024438:	0802444d 	.word	0x0802444d
 802443c:	08024461 	.word	0x08024461
 8024440:	08024475 	.word	0x08024475
 8024444:	080244ed 	.word	0x080244ed
 8024448:	08024489 	.word	0x08024489
        {
#ifdef DEBUG_MODE
            case 0x0B: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 802444c:	687b      	ldr	r3, [r7, #4]
 802444e:	6958      	ldr	r0, [r3, #20]
 8024450:	2342      	movs	r3, #66	; 0x42
 8024452:	2247      	movs	r2, #71	; 0x47
 8024454:	2103      	movs	r1, #3
 8024456:	f7fd fab2 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 802445a:	4603      	mov	r3, r0
 802445c:	737b      	strb	r3, [r7, #13]
 802445e:	e061      	b.n	8024524 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x0C: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 8024460:	687b      	ldr	r3, [r7, #4]
 8024462:	6958      	ldr	r0, [r3, #20]
 8024464:	2359      	movs	r3, #89	; 0x59
 8024466:	2247      	movs	r2, #71	; 0x47
 8024468:	2103      	movs	r1, #3
 802446a:	f7fd faa8 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 802446e:	4603      	mov	r3, r0
 8024470:	737b      	strb	r3, [r7, #13]
 8024472:	e057      	b.n	8024524 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
#endif // DEBUG_MODE

            case 0x0D: led_enable = led_->BlinkInterrupt(3, 'G', 'X'); break;
 8024474:	687b      	ldr	r3, [r7, #4]
 8024476:	6958      	ldr	r0, [r3, #20]
 8024478:	2358      	movs	r3, #88	; 0x58
 802447a:	2247      	movs	r2, #71	; 0x47
 802447c:	2103      	movs	r1, #3
 802447e:	f7fd fa9e 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024482:	4603      	mov	r3, r0
 8024484:	737b      	strb	r3, [r7, #13]
 8024486:	e04d      	b.n	8024524 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x0F: led_enable = led_->BlinkInterrupt(3, 'Y', 'X'); break;
 8024488:	687b      	ldr	r3, [r7, #4]
 802448a:	6958      	ldr	r0, [r3, #20]
 802448c:	2358      	movs	r3, #88	; 0x58
 802448e:	2259      	movs	r2, #89	; 0x59
 8024490:	2103      	movs	r1, #3
 8024492:	f7fd fa94 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024496:	4603      	mov	r3, r0
 8024498:	737b      	strb	r3, [r7, #13]
 802449a:	e043      	b.n	8024524 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x01: led_enable = led_->BlinkInterrupt(3, 'B', 'X'); break;
 802449c:	687b      	ldr	r3, [r7, #4]
 802449e:	6958      	ldr	r0, [r3, #20]
 80244a0:	2358      	movs	r3, #88	; 0x58
 80244a2:	2242      	movs	r2, #66	; 0x42
 80244a4:	2103      	movs	r1, #3
 80244a6:	f7fd fa8a 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 80244aa:	4603      	mov	r3, r0
 80244ac:	737b      	strb	r3, [r7, #13]
 80244ae:	e039      	b.n	8024524 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x02: led_enable = led_->BlinkInterrupt(3, 'M', 'X'); break;
 80244b0:	687b      	ldr	r3, [r7, #4]
 80244b2:	6958      	ldr	r0, [r3, #20]
 80244b4:	2358      	movs	r3, #88	; 0x58
 80244b6:	224d      	movs	r2, #77	; 0x4d
 80244b8:	2103      	movs	r1, #3
 80244ba:	f7fd fa80 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 80244be:	4603      	mov	r3, r0
 80244c0:	737b      	strb	r3, [r7, #13]
 80244c2:	e02f      	b.n	8024524 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x07: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 80244c4:	687b      	ldr	r3, [r7, #4]
 80244c6:	6958      	ldr	r0, [r3, #20]
 80244c8:	2342      	movs	r3, #66	; 0x42
 80244ca:	2247      	movs	r2, #71	; 0x47
 80244cc:	2103      	movs	r1, #3
 80244ce:	f7fd fa76 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 80244d2:	4603      	mov	r3, r0
 80244d4:	737b      	strb	r3, [r7, #13]
 80244d6:	e025      	b.n	8024524 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x08: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 80244d8:	687b      	ldr	r3, [r7, #4]
 80244da:	6958      	ldr	r0, [r3, #20]
 80244dc:	2359      	movs	r3, #89	; 0x59
 80244de:	2247      	movs	r2, #71	; 0x47
 80244e0:	2103      	movs	r1, #3
 80244e2:	f7fd fa6c 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 80244e6:	4603      	mov	r3, r0
 80244e8:	737b      	strb	r3, [r7, #13]
 80244ea:	e01b      	b.n	8024524 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            default:   led_enable = led_->BlinkInterrupt(3, 'X', 'W'); break;
 80244ec:	687b      	ldr	r3, [r7, #4]
 80244ee:	6958      	ldr	r0, [r3, #20]
 80244f0:	2357      	movs	r3, #87	; 0x57
 80244f2:	2258      	movs	r2, #88	; 0x58
 80244f4:	2103      	movs	r1, #3
 80244f6:	f7fd fa62 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 80244fa:	4603      	mov	r3, r0
 80244fc:	737b      	strb	r3, [r7, #13]
 80244fe:	bf00      	nop
 8024500:	e010      	b.n	8024524 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
        }
    }
    else if(wait_enable)
 8024502:	7bbb      	ldrb	r3, [r7, #14]
 8024504:	2b00      	cmp	r3, #0
 8024506:	d00b      	beq.n	8024520 <_ZN3Run20SwitchChangeIntervalEh+0x148>
    {
        if(wait_timer < SWITCH_INTERVAL_WAIT_TIME)
 8024508:	7bfb      	ldrb	r3, [r7, #15]
 802450a:	2bc7      	cmp	r3, #199	; 0xc7
 802450c:	d805      	bhi.n	802451a <_ZN3Run20SwitchChangeIntervalEh+0x142>
        {
            wait_timer++;
 802450e:	7bfb      	ldrb	r3, [r7, #15]
 8024510:	3301      	adds	r3, #1
 8024512:	73fb      	strb	r3, [r7, #15]
            wait_enable = true;
 8024514:	2301      	movs	r3, #1
 8024516:	73bb      	strb	r3, [r7, #14]
 8024518:	e004      	b.n	8024524 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
        }
        else wait_enable = false;
 802451a:	2300      	movs	r3, #0
 802451c:	73bb      	strb	r3, [r7, #14]
 802451e:	e001      	b.n	8024524 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
    }
    else interval_continue = false;
 8024520:	2300      	movs	r3, #0
 8024522:	733b      	strb	r3, [r7, #12]
    
    switch_interval_led_enable_ = led_enable;
 8024524:	687b      	ldr	r3, [r7, #4]
 8024526:	7b7a      	ldrb	r2, [r7, #13]
 8024528:	711a      	strb	r2, [r3, #4]
    switch_interval_wait_enable_ = wait_enable;
 802452a:	687b      	ldr	r3, [r7, #4]
 802452c:	7bba      	ldrb	r2, [r7, #14]
 802452e:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_timer_ = wait_timer;
 8024530:	687b      	ldr	r3, [r7, #4]
 8024532:	7bfa      	ldrb	r2, [r7, #15]
 8024534:	709a      	strb	r2, [r3, #2]

    return interval_continue;
 8024536:	7b3b      	ldrb	r3, [r7, #12]
}
 8024538:	4618      	mov	r0, r3
 802453a:	3710      	adds	r7, #16
 802453c:	46bd      	mov	sp, r7
 802453e:	bd80      	pop	{r7, pc}

08024540 <_ZN3Run13EmergencyStopEv>:

bool Run::EmergencyStop()
{
 8024540:	b580      	push	{r7, lr}
 8024542:	b084      	sub	sp, #16
 8024544:	af00      	add	r7, sp, #0
 8024546:	6078      	str	r0, [r7, #4]
    static uint8_t emergency_timer = 0;
    bool line_emergency = line_sensor_->GetEmergencyStopFlag();
 8024548:	687b      	ldr	r3, [r7, #4]
 802454a:	699b      	ldr	r3, [r3, #24]
 802454c:	4618      	mov	r0, r3
 802454e:	f7fd fd51 	bl	8021ff4 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 8024552:	4603      	mov	r3, r0
 8024554:	73fb      	strb	r3, [r7, #15]

    if(emergency_timer >= EMERGENCY_STOP_TIME)
 8024556:	4b0e      	ldr	r3, [pc, #56]	; (8024590 <_ZN3Run13EmergencyStopEv+0x50>)
 8024558:	781b      	ldrb	r3, [r3, #0]
 802455a:	2b04      	cmp	r3, #4
 802455c:	d905      	bls.n	802456a <_ZN3Run13EmergencyStopEv+0x2a>
    {
        SetRunMode(EMERGENCY);
 802455e:	210e      	movs	r1, #14
 8024560:	6878      	ldr	r0, [r7, #4]
 8024562:	f7ff fefb 	bl	802435c <_ZN3Run10SetRunModeEh>
        return true;
 8024566:	2301      	movs	r3, #1
 8024568:	e00d      	b.n	8024586 <_ZN3Run13EmergencyStopEv+0x46>
    }
    else if(line_emergency) emergency_timer++;
 802456a:	7bfb      	ldrb	r3, [r7, #15]
 802456c:	2b00      	cmp	r3, #0
 802456e:	d006      	beq.n	802457e <_ZN3Run13EmergencyStopEv+0x3e>
 8024570:	4b07      	ldr	r3, [pc, #28]	; (8024590 <_ZN3Run13EmergencyStopEv+0x50>)
 8024572:	781b      	ldrb	r3, [r3, #0]
 8024574:	3301      	adds	r3, #1
 8024576:	b2da      	uxtb	r2, r3
 8024578:	4b05      	ldr	r3, [pc, #20]	; (8024590 <_ZN3Run13EmergencyStopEv+0x50>)
 802457a:	701a      	strb	r2, [r3, #0]
 802457c:	e002      	b.n	8024584 <_ZN3Run13EmergencyStopEv+0x44>
    else emergency_timer = 0;
 802457e:	4b04      	ldr	r3, [pc, #16]	; (8024590 <_ZN3Run13EmergencyStopEv+0x50>)
 8024580:	2200      	movs	r2, #0
 8024582:	701a      	strb	r2, [r3, #0]

    return false;
 8024584:	2300      	movs	r3, #0
}
 8024586:	4618      	mov	r0, r3
 8024588:	3710      	adds	r7, #16
 802458a:	46bd      	mov	sp, r7
 802458c:	bd80      	pop	{r7, pc}
 802458e:	bf00      	nop
 8024590:	200002d0 	.word	0x200002d0

08024594 <_ZN3Run7RunModeEv>:

void Run::RunMode()
{
 8024594:	b580      	push	{r7, lr}
 8024596:	b082      	sub	sp, #8
 8024598:	af00      	add	r7, sp, #0
 802459a:	6078      	str	r0, [r7, #4]
    switch(run_mode_)
 802459c:	687b      	ldr	r3, [r7, #4]
 802459e:	781b      	ldrb	r3, [r3, #0]
 80245a0:	2b0c      	cmp	r3, #12
 80245a2:	d025      	beq.n	80245f0 <_ZN3Run7RunModeEv+0x5c>
 80245a4:	2b0c      	cmp	r3, #12
 80245a6:	dc0f      	bgt.n	80245c8 <_ZN3Run7RunModeEv+0x34>
 80245a8:	2b02      	cmp	r3, #2
 80245aa:	d041      	beq.n	8024630 <_ZN3Run7RunModeEv+0x9c>
 80245ac:	2b02      	cmp	r3, #2
 80245ae:	dc04      	bgt.n	80245ba <_ZN3Run7RunModeEv+0x26>
 80245b0:	2b00      	cmp	r3, #0
 80245b2:	d029      	beq.n	8024608 <_ZN3Run7RunModeEv+0x74>
 80245b4:	2b01      	cmp	r3, #1
 80245b6:	d033      	beq.n	8024620 <_ZN3Run7RunModeEv+0x8c>
 80245b8:	e04a      	b.n	8024650 <_ZN3Run7RunModeEv+0xbc>
 80245ba:	2b08      	cmp	r3, #8
 80245bc:	d044      	beq.n	8024648 <_ZN3Run7RunModeEv+0xb4>
 80245be:	2b0b      	cmp	r3, #11
 80245c0:	d012      	beq.n	80245e8 <_ZN3Run7RunModeEv+0x54>
 80245c2:	2b07      	cmp	r3, #7
 80245c4:	d03c      	beq.n	8024640 <_ZN3Run7RunModeEv+0xac>
 80245c6:	e043      	b.n	8024650 <_ZN3Run7RunModeEv+0xbc>
 80245c8:	2b0f      	cmp	r3, #15
 80245ca:	d019      	beq.n	8024600 <_ZN3Run7RunModeEv+0x6c>
 80245cc:	2b0f      	cmp	r3, #15
 80245ce:	dc04      	bgt.n	80245da <_ZN3Run7RunModeEv+0x46>
 80245d0:	2b0d      	cmp	r3, #13
 80245d2:	d01d      	beq.n	8024610 <_ZN3Run7RunModeEv+0x7c>
 80245d4:	2b0e      	cmp	r3, #14
 80245d6:	d00f      	beq.n	80245f8 <_ZN3Run7RunModeEv+0x64>
 80245d8:	e03a      	b.n	8024650 <_ZN3Run7RunModeEv+0xbc>
 80245da:	2b20      	cmp	r3, #32
 80245dc:	d02c      	beq.n	8024638 <_ZN3Run7RunModeEv+0xa4>
 80245de:	2bd0      	cmp	r3, #208	; 0xd0
 80245e0:	d01a      	beq.n	8024618 <_ZN3Run7RunModeEv+0x84>
 80245e2:	2b10      	cmp	r3, #16
 80245e4:	d020      	beq.n	8024628 <_ZN3Run7RunModeEv+0x94>
 80245e6:	e033      	b.n	8024650 <_ZN3Run7RunModeEv+0xbc>
    {
#ifdef DEBUG_MODE
        case VELOCITY_CONTROL_DEBUG: ModeVelocityControlDebug(); break;
 80245e8:	6878      	ldr	r0, [r7, #4]
 80245ea:	f000 fae5 	bl	8024bb8 <_ZN3Run24ModeVelocityControlDebugEv>
 80245ee:	e033      	b.n	8024658 <_ZN3Run7RunModeEv+0xc4>
        case LINE_TRACE_DEBUG: ModeLineTraceDebug(); break;
 80245f0:	6878      	ldr	r0, [r7, #4]
 80245f2:	f000 fb0b 	bl	8024c0c <_ZN3Run18ModeLineTraceDebugEv>
 80245f6:	e02f      	b.n	8024658 <_ZN3Run7RunModeEv+0xc4>
#endif // DEBUG_MODE

        case EMERGENCY: ModeEmergency(); break;
 80245f8:	6878      	ldr	r0, [r7, #4]
 80245fa:	f000 f835 	bl	8024668 <_ZN3Run13ModeEmergencyEv>
 80245fe:	e02b      	b.n	8024658 <_ZN3Run7RunModeEv+0xc4>
        case READY: ModeReady(); break;
 8024600:	6878      	ldr	r0, [r7, #4]
 8024602:	f000 f84b 	bl	802469c <_ZN3Run9ModeReadyEv>
 8024606:	e027      	b.n	8024658 <_ZN3Run7RunModeEv+0xc4>
        case STANDBY: ModeStandby(); break;
 8024608:	6878      	ldr	r0, [r7, #4]
 802460a:	f000 f869 	bl	80246e0 <_ZN3Run11ModeStandbyEv>
 802460e:	e023      	b.n	8024658 <_ZN3Run7RunModeEv+0xc4>
        case DEV: ModeDevelopment(); break;
 8024610:	6878      	ldr	r0, [r7, #4]
 8024612:	f000 f879 	bl	8024708 <_ZN3Run15ModeDevelopmentEv>
 8024616:	e01f      	b.n	8024658 <_ZN3Run7RunModeEv+0xc4>
        case DEV_GOAL: ModeDevGoal(); break;
 8024618:	6878      	ldr	r0, [r7, #4]
 802461a:	f000 f931 	bl	8024880 <_ZN3Run11ModeDevGoalEv>
 802461e:	e01b      	b.n	8024658 <_ZN3Run7RunModeEv+0xc4>
        case FIRST_RUN: ModeFirstRun(); break;
 8024620:	6878      	ldr	r0, [r7, #4]
 8024622:	f000 f947 	bl	80248b4 <_ZN3Run12ModeFirstRunEv>
 8024626:	e017      	b.n	8024658 <_ZN3Run7RunModeEv+0xc4>
        case FIRST_GOAL: ModeFirstGoal(); break;
 8024628:	6878      	ldr	r0, [r7, #4]
 802462a:	f000 f9b5 	bl	8024998 <_ZN3Run13ModeFirstGoalEv>
 802462e:	e013      	b.n	8024658 <_ZN3Run7RunModeEv+0xc4>
        case SECOND_RUN: ModeSecondRun(); break;
 8024630:	6878      	ldr	r0, [r7, #4]
 8024632:	f000 f9d5 	bl	80249e0 <_ZN3Run13ModeSecondRunEv>
 8024636:	e00f      	b.n	8024658 <_ZN3Run7RunModeEv+0xc4>
        case SECOND_GOAL: ModeSecondGoal(); break;
 8024638:	6878      	ldr	r0, [r7, #4]
 802463a:	f000 fa25 	bl	8024a88 <_ZN3Run14ModeSecondGoalEv>
 802463e:	e00b      	b.n	8024658 <_ZN3Run7RunModeEv+0xc4>
        case VELOCITY_CONTROL: ModeVelocityControl(); break;
 8024640:	6878      	ldr	r0, [r7, #4]
 8024642:	f000 fa3b 	bl	8024abc <_ZN3Run19ModeVelocityControlEv>
 8024646:	e007      	b.n	8024658 <_ZN3Run7RunModeEv+0xc4>
        case LINE_TRACE: ModeLineTrace(); break;
 8024648:	6878      	ldr	r0, [r7, #4]
 802464a:	f000 fa7e 	bl	8024b4a <_ZN3Run13ModeLineTraceEv>
 802464e:	e003      	b.n	8024658 <_ZN3Run7RunModeEv+0xc4>
        default: ModeStandby(); break;
 8024650:	6878      	ldr	r0, [r7, #4]
 8024652:	f000 f845 	bl	80246e0 <_ZN3Run11ModeStandbyEv>
 8024656:	bf00      	nop
    }

    mode_complete_ = true;
 8024658:	687b      	ldr	r3, [r7, #4]
 802465a:	2201      	movs	r2, #1
 802465c:	715a      	strb	r2, [r3, #5]
}
 802465e:	bf00      	nop
 8024660:	3708      	adds	r7, #8
 8024662:	46bd      	mov	sp, r7
 8024664:	bd80      	pop	{r7, pc}
	...

08024668 <_ZN3Run13ModeEmergencyEv>:

void Run::ModeEmergency()
{
 8024668:	b580      	push	{r7, lr}
 802466a:	b082      	sub	sp, #8
 802466c:	af00      	add	r7, sp, #0
 802466e:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024670:	687b      	ldr	r3, [r7, #4]
 8024672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024674:	eddf 0a08 	vldr	s1, [pc, #32]	; 8024698 <_ZN3Run13ModeEmergencyEv+0x30>
 8024678:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8024698 <_ZN3Run13ModeEmergencyEv+0x30>
 802467c:	4618      	mov	r0, r3
 802467e:	f7ff fb47 	bl	8023d10 <_ZN5Motor5DriveEff>
    led_->ColorOrder('G');
 8024682:	687b      	ldr	r3, [r7, #4]
 8024684:	695b      	ldr	r3, [r3, #20]
 8024686:	2147      	movs	r1, #71	; 0x47
 8024688:	4618      	mov	r0, r3
 802468a:	f7fd f84b 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 802468e:	bf00      	nop
 8024690:	3708      	adds	r7, #8
 8024692:	46bd      	mov	sp, r7
 8024694:	bd80      	pop	{r7, pc}
 8024696:	bf00      	nop
 8024698:	00000000 	.word	0x00000000

0802469c <_ZN3Run9ModeReadyEv>:

void Run::ModeReady()
{
 802469c:	b580      	push	{r7, lr}
 802469e:	b082      	sub	sp, #8
 80246a0:	af00      	add	r7, sp, #0
 80246a2:	6078      	str	r0, [r7, #4]
    line_sensor_->Update();
 80246a4:	687b      	ldr	r3, [r7, #4]
 80246a6:	699b      	ldr	r3, [r3, #24]
 80246a8:	4618      	mov	r0, r3
 80246aa:	f7fd fb65 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    if(line_sensor_->CheckCalibration()) led_->ColorOrder('X');
 80246ae:	687b      	ldr	r3, [r7, #4]
 80246b0:	699b      	ldr	r3, [r3, #24]
 80246b2:	4618      	mov	r0, r3
 80246b4:	f7fd fcac 	bl	8022010 <_ZN10LineSensor16CheckCalibrationEv>
 80246b8:	4603      	mov	r3, r0
 80246ba:	2b00      	cmp	r3, #0
 80246bc:	d006      	beq.n	80246cc <_ZN3Run9ModeReadyEv+0x30>
 80246be:	687b      	ldr	r3, [r7, #4]
 80246c0:	695b      	ldr	r3, [r3, #20]
 80246c2:	2158      	movs	r1, #88	; 0x58
 80246c4:	4618      	mov	r0, r3
 80246c6:	f7fd f82d 	bl	8021724 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('R');
}
 80246ca:	e005      	b.n	80246d8 <_ZN3Run9ModeReadyEv+0x3c>
    else led_->ColorOrder('R');
 80246cc:	687b      	ldr	r3, [r7, #4]
 80246ce:	695b      	ldr	r3, [r3, #20]
 80246d0:	2152      	movs	r1, #82	; 0x52
 80246d2:	4618      	mov	r0, r3
 80246d4:	f7fd f826 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 80246d8:	bf00      	nop
 80246da:	3708      	adds	r7, #8
 80246dc:	46bd      	mov	sp, r7
 80246de:	bd80      	pop	{r7, pc}

080246e0 <_ZN3Run11ModeStandbyEv>:

void Run::ModeStandby()
{
 80246e0:	b580      	push	{r7, lr}
 80246e2:	b082      	sub	sp, #8
 80246e4:	af00      	add	r7, sp, #0
 80246e6:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 80246e8:	687b      	ldr	r3, [r7, #4]
 80246ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80246ec:	eddf 0a05 	vldr	s1, [pc, #20]	; 8024704 <_ZN3Run11ModeStandbyEv+0x24>
 80246f0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8024704 <_ZN3Run11ModeStandbyEv+0x24>
 80246f4:	4618      	mov	r0, r3
 80246f6:	f7ff fb0b 	bl	8023d10 <_ZN5Motor5DriveEff>
}
 80246fa:	bf00      	nop
 80246fc:	3708      	adds	r7, #8
 80246fe:	46bd      	mov	sp, r7
 8024700:	bd80      	pop	{r7, pc}
 8024702:	bf00      	nop
 8024704:	00000000 	.word	0x00000000

08024708 <_ZN3Run15ModeDevelopmentEv>:

void Run::ModeDevelopment()
{
 8024708:	b580      	push	{r7, lr}
 802470a:	b086      	sub	sp, #24
 802470c:	af00      	add	r7, sp, #0
 802470e:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 8024710:	687b      	ldr	r3, [r7, #4]
 8024712:	689b      	ldr	r3, [r3, #8]
 8024714:	4618      	mov	r0, r3
 8024716:	f7fc fb47 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 802471a:	687b      	ldr	r3, [r7, #4]
 802471c:	699b      	ldr	r3, [r3, #24]
 802471e:	4618      	mov	r0, r3
 8024720:	f7fd fb2a 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 8024724:	687b      	ldr	r3, [r7, #4]
 8024726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024728:	4618      	mov	r0, r3
 802472a:	f000 fbe7 	bl	8024efc <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(DevEmergencyStop()) return;
 802472e:	6878      	ldr	r0, [r7, #4]
 8024730:	f000 f832 	bl	8024798 <_ZN3Run16DevEmergencyStopEv>
 8024734:	4603      	mov	r3, r0
 8024736:	2b00      	cmp	r3, #0
 8024738:	d129      	bne.n	802478e <_ZN3Run15ModeDevelopmentEv+0x86>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 802473a:	687b      	ldr	r3, [r7, #4]
 802473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802473e:	4618      	mov	r0, r3
 8024740:	f000 fdab 	bl	802529a <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024744:	4603      	mov	r3, r0
 8024746:	75fb      	strb	r3, [r7, #23]
    float target_velocity = DevTargetVelocity(goal_count);
 8024748:	7dfb      	ldrb	r3, [r7, #23]
 802474a:	4619      	mov	r1, r3
 802474c:	6878      	ldr	r0, [r7, #4]
 802474e:	f000 f851 	bl	80247f4 <_ZN3Run17DevTargetVelocityEh>
 8024752:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024756:	687b      	ldr	r3, [r7, #4]
 8024758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802475a:	ed97 0a04 	vldr	s0, [r7, #16]
 802475e:	4618      	mov	r0, r3
 8024760:	f001 fa63 	bl	8025c2a <_ZN15VelocityControl16DeterminePidGainEf>
 8024764:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024768:	687b      	ldr	r3, [r7, #4]
 802476a:	69db      	ldr	r3, [r3, #28]
 802476c:	ed97 0a04 	vldr	s0, [r7, #16]
 8024770:	4618      	mov	r0, r3
 8024772:	f7fd fcdb 	bl	802212c <_ZN9LineTrace16DeterminePidGainEf>
 8024776:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 802477a:	687b      	ldr	r3, [r7, #4]
 802477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802477e:	edd7 0a02 	vldr	s1, [r7, #8]
 8024782:	ed97 0a03 	vldr	s0, [r7, #12]
 8024786:	4618      	mov	r0, r3
 8024788:	f7ff fac2 	bl	8023d10 <_ZN5Motor5DriveEff>
 802478c:	e000      	b.n	8024790 <_ZN3Run15ModeDevelopmentEv+0x88>
    if(DevEmergencyStop()) return;
 802478e:	bf00      	nop
}
 8024790:	3718      	adds	r7, #24
 8024792:	46bd      	mov	sp, r7
 8024794:	bd80      	pop	{r7, pc}
	...

08024798 <_ZN3Run16DevEmergencyStopEv>:

bool Run::DevEmergencyStop()
{
 8024798:	b580      	push	{r7, lr}
 802479a:	b084      	sub	sp, #16
 802479c:	af00      	add	r7, sp, #0
 802479e:	6078      	str	r0, [r7, #4]
    static uint8_t emergency_timer = 0;
    bool line_emergency = line_sensor_->GetEmergencyStopFlag();
 80247a0:	687b      	ldr	r3, [r7, #4]
 80247a2:	699b      	ldr	r3, [r3, #24]
 80247a4:	4618      	mov	r0, r3
 80247a6:	f7fd fc25 	bl	8021ff4 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 80247aa:	4603      	mov	r3, r0
 80247ac:	73fb      	strb	r3, [r7, #15]

    if(line_emergency)
 80247ae:	7bfb      	ldrb	r3, [r7, #15]
 80247b0:	2b00      	cmp	r3, #0
 80247b2:	d014      	beq.n	80247de <_ZN3Run16DevEmergencyStopEv+0x46>
    {
        if(emergency_timer >= EMERGENCY_STOP_TIME)
 80247b4:	4b0e      	ldr	r3, [pc, #56]	; (80247f0 <_ZN3Run16DevEmergencyStopEv+0x58>)
 80247b6:	781b      	ldrb	r3, [r3, #0]
 80247b8:	2b04      	cmp	r3, #4
 80247ba:	d909      	bls.n	80247d0 <_ZN3Run16DevEmergencyStopEv+0x38>
        {
            SetRunMode(EMERGENCY);
 80247bc:	210e      	movs	r1, #14
 80247be:	6878      	ldr	r0, [r7, #4]
 80247c0:	f7ff fdcc 	bl	802435c <_ZN3Run10SetRunModeEh>
            SetRunModeChangedInternal(true);
 80247c4:	2101      	movs	r1, #1
 80247c6:	6878      	ldr	r0, [r7, #4]
 80247c8:	f7ff fdd8 	bl	802437c <_ZN3Run25SetRunModeChangedInternalEb>
            return true;
 80247cc:	2301      	movs	r3, #1
 80247ce:	e00a      	b.n	80247e6 <_ZN3Run16DevEmergencyStopEv+0x4e>
        }
        else emergency_timer++;
 80247d0:	4b07      	ldr	r3, [pc, #28]	; (80247f0 <_ZN3Run16DevEmergencyStopEv+0x58>)
 80247d2:	781b      	ldrb	r3, [r3, #0]
 80247d4:	3301      	adds	r3, #1
 80247d6:	b2da      	uxtb	r2, r3
 80247d8:	4b05      	ldr	r3, [pc, #20]	; (80247f0 <_ZN3Run16DevEmergencyStopEv+0x58>)
 80247da:	701a      	strb	r2, [r3, #0]
 80247dc:	e002      	b.n	80247e4 <_ZN3Run16DevEmergencyStopEv+0x4c>
    }
    else emergency_timer = 0;
 80247de:	4b04      	ldr	r3, [pc, #16]	; (80247f0 <_ZN3Run16DevEmergencyStopEv+0x58>)
 80247e0:	2200      	movs	r2, #0
 80247e2:	701a      	strb	r2, [r3, #0]

    return false;
 80247e4:	2300      	movs	r3, #0
}
 80247e6:	4618      	mov	r0, r3
 80247e8:	3710      	adds	r7, #16
 80247ea:	46bd      	mov	sp, r7
 80247ec:	bd80      	pop	{r7, pc}
 80247ee:	bf00      	nop
 80247f0:	200002d1 	.word	0x200002d1

080247f4 <_ZN3Run17DevTargetVelocityEh>:

float Run::DevTargetVelocity(uint8_t goal_count)
{
 80247f4:	b580      	push	{r7, lr}
 80247f6:	b084      	sub	sp, #16
 80247f8:	af00      	add	r7, sp, #0
 80247fa:	6078      	str	r0, [r7, #4]
 80247fc:	460b      	mov	r3, r1
 80247fe:	70fb      	strb	r3, [r7, #3]
    static uint16_t slow_timer = 0;
    static uint16_t stop_timer = 0;
    float target_velocity;

    switch(goal_count)
 8024800:	78fb      	ldrb	r3, [r7, #3]
 8024802:	3300      	adds	r3, #0
 8024804:	2b01      	cmp	r3, #1
 8024806:	d802      	bhi.n	802480e <_ZN3Run17DevTargetVelocityEh+0x1a>
    {
        case 0:
        case 1: target_velocity = EXPLORE_VELOCITY; break;
 8024808:	4b1a      	ldr	r3, [pc, #104]	; (8024874 <_ZN3Run17DevTargetVelocityEh+0x80>)
 802480a:	60fb      	str	r3, [r7, #12]
 802480c:	e029      	b.n	8024862 <_ZN3Run17DevTargetVelocityEh+0x6e>
        default:

            if(slow_timer < SLOW_DRIVE_TIME)
 802480e:	4b1a      	ldr	r3, [pc, #104]	; (8024878 <_ZN3Run17DevTargetVelocityEh+0x84>)
 8024810:	881b      	ldrh	r3, [r3, #0]
 8024812:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8024816:	d209      	bcs.n	802482c <_ZN3Run17DevTargetVelocityEh+0x38>
            {
                slow_timer++;
 8024818:	4b17      	ldr	r3, [pc, #92]	; (8024878 <_ZN3Run17DevTargetVelocityEh+0x84>)
 802481a:	881b      	ldrh	r3, [r3, #0]
 802481c:	3301      	adds	r3, #1
 802481e:	b29a      	uxth	r2, r3
 8024820:	4b15      	ldr	r3, [pc, #84]	; (8024878 <_ZN3Run17DevTargetVelocityEh+0x84>)
 8024822:	801a      	strh	r2, [r3, #0]
                target_velocity = SLOW_DRIVE_VELOCITY;
 8024824:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024828:	60fb      	str	r3, [r7, #12]
                    SetRunMode(DEV_GOAL);
                    SetRunModeChangedInternal(true);
                    target_velocity = 0;
                }
            }
            break;
 802482a:	e019      	b.n	8024860 <_ZN3Run17DevTargetVelocityEh+0x6c>
                if(stop_timer < STOP_TIME)
 802482c:	4b13      	ldr	r3, [pc, #76]	; (802487c <_ZN3Run17DevTargetVelocityEh+0x88>)
 802482e:	881b      	ldrh	r3, [r3, #0]
 8024830:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8024834:	d209      	bcs.n	802484a <_ZN3Run17DevTargetVelocityEh+0x56>
                    stop_timer++;
 8024836:	4b11      	ldr	r3, [pc, #68]	; (802487c <_ZN3Run17DevTargetVelocityEh+0x88>)
 8024838:	881b      	ldrh	r3, [r3, #0]
 802483a:	3301      	adds	r3, #1
 802483c:	b29a      	uxth	r2, r3
 802483e:	4b0f      	ldr	r3, [pc, #60]	; (802487c <_ZN3Run17DevTargetVelocityEh+0x88>)
 8024840:	801a      	strh	r2, [r3, #0]
                    target_velocity = 0;
 8024842:	f04f 0300 	mov.w	r3, #0
 8024846:	60fb      	str	r3, [r7, #12]
            break;
 8024848:	e00a      	b.n	8024860 <_ZN3Run17DevTargetVelocityEh+0x6c>
                    SetRunMode(DEV_GOAL);
 802484a:	21d0      	movs	r1, #208	; 0xd0
 802484c:	6878      	ldr	r0, [r7, #4]
 802484e:	f7ff fd85 	bl	802435c <_ZN3Run10SetRunModeEh>
                    SetRunModeChangedInternal(true);
 8024852:	2101      	movs	r1, #1
 8024854:	6878      	ldr	r0, [r7, #4]
 8024856:	f7ff fd91 	bl	802437c <_ZN3Run25SetRunModeChangedInternalEb>
                    target_velocity = 0;
 802485a:	f04f 0300 	mov.w	r3, #0
 802485e:	60fb      	str	r3, [r7, #12]
            break;
 8024860:	bf00      	nop
    }

    return target_velocity;
 8024862:	68fb      	ldr	r3, [r7, #12]
 8024864:	ee07 3a90 	vmov	s15, r3
}
 8024868:	eeb0 0a67 	vmov.f32	s0, s15
 802486c:	3710      	adds	r7, #16
 802486e:	46bd      	mov	sp, r7
 8024870:	bd80      	pop	{r7, pc}
 8024872:	bf00      	nop
 8024874:	3f99999a 	.word	0x3f99999a
 8024878:	200002d2 	.word	0x200002d2
 802487c:	200002d4 	.word	0x200002d4

08024880 <_ZN3Run11ModeDevGoalEv>:

void Run::ModeDevGoal()
{
 8024880:	b580      	push	{r7, lr}
 8024882:	b082      	sub	sp, #8
 8024884:	af00      	add	r7, sp, #0
 8024886:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024888:	687b      	ldr	r3, [r7, #4]
 802488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802488c:	eddf 0a08 	vldr	s1, [pc, #32]	; 80248b0 <_ZN3Run11ModeDevGoalEv+0x30>
 8024890:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80248b0 <_ZN3Run11ModeDevGoalEv+0x30>
 8024894:	4618      	mov	r0, r3
 8024896:	f7ff fa3b 	bl	8023d10 <_ZN5Motor5DriveEff>
    led_->ColorOrder('M');
 802489a:	687b      	ldr	r3, [r7, #4]
 802489c:	695b      	ldr	r3, [r3, #20]
 802489e:	214d      	movs	r1, #77	; 0x4d
 80248a0:	4618      	mov	r0, r3
 80248a2:	f7fc ff3f 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 80248a6:	bf00      	nop
 80248a8:	3708      	adds	r7, #8
 80248aa:	46bd      	mov	sp, r7
 80248ac:	bd80      	pop	{r7, pc}
 80248ae:	bf00      	nop
 80248b0:	00000000 	.word	0x00000000

080248b4 <_ZN3Run12ModeFirstRunEv>:

void Run::ModeFirstRun()
{
 80248b4:	b580      	push	{r7, lr}
 80248b6:	b086      	sub	sp, #24
 80248b8:	af00      	add	r7, sp, #0
 80248ba:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 80248bc:	687b      	ldr	r3, [r7, #4]
 80248be:	699b      	ldr	r3, [r3, #24]
 80248c0:	4618      	mov	r0, r3
 80248c2:	f7fd fa59 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 80248c6:	687b      	ldr	r3, [r7, #4]
 80248c8:	689b      	ldr	r3, [r3, #8]
 80248ca:	4618      	mov	r0, r3
 80248cc:	f7fc fa6c 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    iim_42652_->Update();
 80248d0:	687b      	ldr	r3, [r7, #4]
 80248d2:	691b      	ldr	r3, [r3, #16]
 80248d4:	4618      	mov	r0, r3
 80248d6:	f7fc fe9b 	bl	8021610 <_ZN8Iim426526UpdateEv>
    side_sensor_->Update();
 80248da:	687b      	ldr	r3, [r7, #4]
 80248dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80248de:	4618      	mov	r0, r3
 80248e0:	f000 fb0c 	bl	8024efc <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 80248e4:	6878      	ldr	r0, [r7, #4]
 80248e6:	f7ff fe2b 	bl	8024540 <_ZN3Run13EmergencyStopEv>
 80248ea:	4603      	mov	r3, r0
 80248ec:	2b00      	cmp	r3, #0
 80248ee:	d14e      	bne.n	802498e <_ZN3Run12ModeFirstRunEv+0xda>
    /* Logging */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 80248f0:	687b      	ldr	r3, [r7, #4]
 80248f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80248f4:	4618      	mov	r0, r3
 80248f6:	f000 fcd0 	bl	802529a <_ZN10SideSensor18GetGoalMarkerCountEv>
 80248fa:	4603      	mov	r3, r0
 80248fc:	75fb      	strb	r3, [r7, #23]
    if(goal_count == 1) logger_->Logging(mode_complete_);
 80248fe:	7dfb      	ldrb	r3, [r7, #23]
 8024900:	2b01      	cmp	r3, #1
 8024902:	d107      	bne.n	8024914 <_ZN3Run12ModeFirstRunEv+0x60>
 8024904:	687b      	ldr	r3, [r7, #4]
 8024906:	6a1a      	ldr	r2, [r3, #32]
 8024908:	687b      	ldr	r3, [r7, #4]
 802490a:	795b      	ldrb	r3, [r3, #5]
 802490c:	4619      	mov	r1, r3
 802490e:	4610      	mov	r0, r2
 8024910:	f7fd fd4e 	bl	80223b0 <_ZN6Logger7LoggingEh>
    mode_complete_ = false;
 8024914:	687b      	ldr	r3, [r7, #4]
 8024916:	2200      	movs	r2, #0
 8024918:	715a      	strb	r2, [r3, #5]
    uint8_t period_success = logger_->StorePeriodicLog();
 802491a:	687b      	ldr	r3, [r7, #4]
 802491c:	6a1b      	ldr	r3, [r3, #32]
 802491e:	4618      	mov	r0, r3
 8024920:	f7fd ff5c 	bl	80227dc <_ZN6Logger16StorePeriodicLogEv>
 8024924:	4603      	mov	r3, r0
 8024926:	75bb      	strb	r3, [r7, #22]
    uint8_t accel_success = logger_->StoreAccelPositionLog();
 8024928:	687b      	ldr	r3, [r7, #4]
 802492a:	6a1b      	ldr	r3, [r3, #32]
 802492c:	4618      	mov	r0, r3
 802492e:	f7fd fff3 	bl	8022918 <_ZN6Logger21StoreAccelPositionLogEv>
 8024932:	4603      	mov	r3, r0
 8024934:	757b      	strb	r3, [r7, #21]
    if(period_success != 0 || !accel_success != 0) store_log_failed_ = true;
 8024936:	7dbb      	ldrb	r3, [r7, #22]
 8024938:	2b00      	cmp	r3, #0
 802493a:	d102      	bne.n	8024942 <_ZN3Run12ModeFirstRunEv+0x8e>
 802493c:	7d7b      	ldrb	r3, [r7, #21]
 802493e:	2b00      	cmp	r3, #0
 8024940:	d102      	bne.n	8024948 <_ZN3Run12ModeFirstRunEv+0x94>
 8024942:	687b      	ldr	r3, [r7, #4]
 8024944:	2201      	movs	r2, #1
 8024946:	719a      	strb	r2, [r3, #6]
    /* Motor control */
    float target_velocity = FirstTargetVelocity(goal_count);
 8024948:	7dfb      	ldrb	r3, [r7, #23]
 802494a:	4619      	mov	r1, r3
 802494c:	6878      	ldr	r0, [r7, #4]
 802494e:	f000 f97d 	bl	8024c4c <_ZN3Run19FirstTargetVelocityEh>
 8024952:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024956:	687b      	ldr	r3, [r7, #4]
 8024958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802495a:	ed97 0a04 	vldr	s0, [r7, #16]
 802495e:	4618      	mov	r0, r3
 8024960:	f001 f963 	bl	8025c2a <_ZN15VelocityControl16DeterminePidGainEf>
 8024964:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024968:	687b      	ldr	r3, [r7, #4]
 802496a:	69db      	ldr	r3, [r3, #28]
 802496c:	ed97 0a04 	vldr	s0, [r7, #16]
 8024970:	4618      	mov	r0, r3
 8024972:	f7fd fbdb 	bl	802212c <_ZN9LineTrace16DeterminePidGainEf>
 8024976:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 802497a:	687b      	ldr	r3, [r7, #4]
 802497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802497e:	edd7 0a02 	vldr	s1, [r7, #8]
 8024982:	ed97 0a03 	vldr	s0, [r7, #12]
 8024986:	4618      	mov	r0, r3
 8024988:	f7ff f9c2 	bl	8023d10 <_ZN5Motor5DriveEff>
 802498c:	e000      	b.n	8024990 <_ZN3Run12ModeFirstRunEv+0xdc>
    if(EmergencyStop()) return;
 802498e:	bf00      	nop
}
 8024990:	3718      	adds	r7, #24
 8024992:	46bd      	mov	sp, r7
 8024994:	bd80      	pop	{r7, pc}
	...

08024998 <_ZN3Run13ModeFirstGoalEv>:

void Run::ModeFirstGoal()
{
 8024998:	b580      	push	{r7, lr}
 802499a:	b082      	sub	sp, #8
 802499c:	af00      	add	r7, sp, #0
 802499e:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 80249a0:	687b      	ldr	r3, [r7, #4]
 80249a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80249a4:	eddf 0a0d 	vldr	s1, [pc, #52]	; 80249dc <_ZN3Run13ModeFirstGoalEv+0x44>
 80249a8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80249dc <_ZN3Run13ModeFirstGoalEv+0x44>
 80249ac:	4618      	mov	r0, r3
 80249ae:	f7ff f9af 	bl	8023d10 <_ZN5Motor5DriveEff>
    if(store_log_failed_) led_->ColorOrder('R');
 80249b2:	687b      	ldr	r3, [r7, #4]
 80249b4:	799b      	ldrb	r3, [r3, #6]
 80249b6:	2b00      	cmp	r3, #0
 80249b8:	d006      	beq.n	80249c8 <_ZN3Run13ModeFirstGoalEv+0x30>
 80249ba:	687b      	ldr	r3, [r7, #4]
 80249bc:	695b      	ldr	r3, [r3, #20]
 80249be:	2152      	movs	r1, #82	; 0x52
 80249c0:	4618      	mov	r0, r3
 80249c2:	f7fc feaf 	bl	8021724 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('B');
}
 80249c6:	e005      	b.n	80249d4 <_ZN3Run13ModeFirstGoalEv+0x3c>
    else led_->ColorOrder('B');
 80249c8:	687b      	ldr	r3, [r7, #4]
 80249ca:	695b      	ldr	r3, [r3, #20]
 80249cc:	2142      	movs	r1, #66	; 0x42
 80249ce:	4618      	mov	r0, r3
 80249d0:	f7fc fea8 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 80249d4:	bf00      	nop
 80249d6:	3708      	adds	r7, #8
 80249d8:	46bd      	mov	sp, r7
 80249da:	bd80      	pop	{r7, pc}
 80249dc:	00000000 	.word	0x00000000

080249e0 <_ZN3Run13ModeSecondRunEv>:

void Run::ModeSecondRun()
{
 80249e0:	b580      	push	{r7, lr}
 80249e2:	b086      	sub	sp, #24
 80249e4:	af00      	add	r7, sp, #0
 80249e6:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 80249e8:	687b      	ldr	r3, [r7, #4]
 80249ea:	699b      	ldr	r3, [r3, #24]
 80249ec:	4618      	mov	r0, r3
 80249ee:	f7fd f9c3 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 80249f2:	687b      	ldr	r3, [r7, #4]
 80249f4:	689b      	ldr	r3, [r3, #8]
 80249f6:	4618      	mov	r0, r3
 80249f8:	f7fc f9d6 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    iim_42652_->Update();
 80249fc:	687b      	ldr	r3, [r7, #4]
 80249fe:	691b      	ldr	r3, [r3, #16]
 8024a00:	4618      	mov	r0, r3
 8024a02:	f7fc fe05 	bl	8021610 <_ZN8Iim426526UpdateEv>
    side_sensor_->Update();
 8024a06:	687b      	ldr	r3, [r7, #4]
 8024a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a0a:	4618      	mov	r0, r3
 8024a0c:	f000 fa76 	bl	8024efc <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024a10:	6878      	ldr	r0, [r7, #4]
 8024a12:	f7ff fd95 	bl	8024540 <_ZN3Run13EmergencyStopEv>
 8024a16:	4603      	mov	r3, r0
 8024a18:	2b00      	cmp	r3, #0
 8024a1a:	d131      	bne.n	8024a80 <_ZN3Run13ModeSecondRunEv+0xa0>
    /* Loading */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024a1c:	687b      	ldr	r3, [r7, #4]
 8024a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a20:	4618      	mov	r0, r3
 8024a22:	f000 fc3a 	bl	802529a <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024a26:	4603      	mov	r3, r0
 8024a28:	75fb      	strb	r3, [r7, #23]
    if(goal_count == 1) logger_->Loading();
 8024a2a:	7dfb      	ldrb	r3, [r7, #23]
 8024a2c:	2b01      	cmp	r3, #1
 8024a2e:	d104      	bne.n	8024a3a <_ZN3Run13ModeSecondRunEv+0x5a>
 8024a30:	687b      	ldr	r3, [r7, #4]
 8024a32:	6a1b      	ldr	r3, [r3, #32]
 8024a34:	4618      	mov	r0, r3
 8024a36:	f7fd fffb 	bl	8022a30 <_ZN6Logger7LoadingEv>
    /* Motor control */
    float target_velocity = SecondTargetVelocity(goal_count);
 8024a3a:	7dfb      	ldrb	r3, [r7, #23]
 8024a3c:	4619      	mov	r1, r3
 8024a3e:	6878      	ldr	r0, [r7, #4]
 8024a40:	f000 f92a 	bl	8024c98 <_ZN3Run20SecondTargetVelocityEh>
 8024a44:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024a48:	687b      	ldr	r3, [r7, #4]
 8024a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024a4c:	ed97 0a04 	vldr	s0, [r7, #16]
 8024a50:	4618      	mov	r0, r3
 8024a52:	f001 f8ea 	bl	8025c2a <_ZN15VelocityControl16DeterminePidGainEf>
 8024a56:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024a5a:	687b      	ldr	r3, [r7, #4]
 8024a5c:	69db      	ldr	r3, [r3, #28]
 8024a5e:	ed97 0a04 	vldr	s0, [r7, #16]
 8024a62:	4618      	mov	r0, r3
 8024a64:	f7fd fb62 	bl	802212c <_ZN9LineTrace16DeterminePidGainEf>
 8024a68:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024a6c:	687b      	ldr	r3, [r7, #4]
 8024a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a70:	edd7 0a02 	vldr	s1, [r7, #8]
 8024a74:	ed97 0a03 	vldr	s0, [r7, #12]
 8024a78:	4618      	mov	r0, r3
 8024a7a:	f7ff f949 	bl	8023d10 <_ZN5Motor5DriveEff>
 8024a7e:	e000      	b.n	8024a82 <_ZN3Run13ModeSecondRunEv+0xa2>
    if(EmergencyStop()) return;
 8024a80:	bf00      	nop
}
 8024a82:	3718      	adds	r7, #24
 8024a84:	46bd      	mov	sp, r7
 8024a86:	bd80      	pop	{r7, pc}

08024a88 <_ZN3Run14ModeSecondGoalEv>:

void Run::ModeSecondGoal()
{
 8024a88:	b580      	push	{r7, lr}
 8024a8a:	b082      	sub	sp, #8
 8024a8c:	af00      	add	r7, sp, #0
 8024a8e:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024a90:	687b      	ldr	r3, [r7, #4]
 8024a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a94:	eddf 0a08 	vldr	s1, [pc, #32]	; 8024ab8 <_ZN3Run14ModeSecondGoalEv+0x30>
 8024a98:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8024ab8 <_ZN3Run14ModeSecondGoalEv+0x30>
 8024a9c:	4618      	mov	r0, r3
 8024a9e:	f7ff f937 	bl	8023d10 <_ZN5Motor5DriveEff>
    led_->ColorOrder('M');
 8024aa2:	687b      	ldr	r3, [r7, #4]
 8024aa4:	695b      	ldr	r3, [r3, #20]
 8024aa6:	214d      	movs	r1, #77	; 0x4d
 8024aa8:	4618      	mov	r0, r3
 8024aaa:	f7fc fe3b 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 8024aae:	bf00      	nop
 8024ab0:	3708      	adds	r7, #8
 8024ab2:	46bd      	mov	sp, r7
 8024ab4:	bd80      	pop	{r7, pc}
 8024ab6:	bf00      	nop
 8024ab8:	00000000 	.word	0x00000000

08024abc <_ZN3Run19ModeVelocityControlEv>:

void Run::ModeVelocityControl()
{
 8024abc:	b580      	push	{r7, lr}
 8024abe:	b086      	sub	sp, #24
 8024ac0:	af00      	add	r7, sp, #0
 8024ac2:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 8024ac4:	687b      	ldr	r3, [r7, #4]
 8024ac6:	689b      	ldr	r3, [r3, #8]
 8024ac8:	4618      	mov	r0, r3
 8024aca:	f7fc f96d 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 8024ace:	687b      	ldr	r3, [r7, #4]
 8024ad0:	699b      	ldr	r3, [r3, #24]
 8024ad2:	4618      	mov	r0, r3
 8024ad4:	f7fd f950 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 8024ad8:	687b      	ldr	r3, [r7, #4]
 8024ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024adc:	4618      	mov	r0, r3
 8024ade:	f000 fa0d 	bl	8024efc <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024ae2:	6878      	ldr	r0, [r7, #4]
 8024ae4:	f7ff fd2c 	bl	8024540 <_ZN3Run13EmergencyStopEv>
 8024ae8:	4603      	mov	r3, r0
 8024aea:	2b00      	cmp	r3, #0
 8024aec:	d129      	bne.n	8024b42 <_ZN3Run19ModeVelocityControlEv+0x86>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024aee:	687b      	ldr	r3, [r7, #4]
 8024af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024af2:	4618      	mov	r0, r3
 8024af4:	f000 fbd1 	bl	802529a <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024af8:	4603      	mov	r3, r0
 8024afa:	75fb      	strb	r3, [r7, #23]
    float target_velocity = VelocityControlTarget(goal_count);
 8024afc:	7dfb      	ldrb	r3, [r7, #23]
 8024afe:	4619      	mov	r1, r3
 8024b00:	6878      	ldr	r0, [r7, #4]
 8024b02:	f000 f8f1 	bl	8024ce8 <_ZN3Run21VelocityControlTargetEh>
 8024b06:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024b0a:	687b      	ldr	r3, [r7, #4]
 8024b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024b0e:	ed97 0a04 	vldr	s0, [r7, #16]
 8024b12:	4618      	mov	r0, r3
 8024b14:	f001 f889 	bl	8025c2a <_ZN15VelocityControl16DeterminePidGainEf>
 8024b18:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024b1c:	687b      	ldr	r3, [r7, #4]
 8024b1e:	69db      	ldr	r3, [r3, #28]
 8024b20:	ed97 0a04 	vldr	s0, [r7, #16]
 8024b24:	4618      	mov	r0, r3
 8024b26:	f7fd fb01 	bl	802212c <_ZN9LineTrace16DeterminePidGainEf>
 8024b2a:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024b2e:	687b      	ldr	r3, [r7, #4]
 8024b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024b32:	edd7 0a02 	vldr	s1, [r7, #8]
 8024b36:	ed97 0a03 	vldr	s0, [r7, #12]
 8024b3a:	4618      	mov	r0, r3
 8024b3c:	f7ff f8e8 	bl	8023d10 <_ZN5Motor5DriveEff>
 8024b40:	e000      	b.n	8024b44 <_ZN3Run19ModeVelocityControlEv+0x88>
    if(EmergencyStop()) return;
 8024b42:	bf00      	nop
}
 8024b44:	3718      	adds	r7, #24
 8024b46:	46bd      	mov	sp, r7
 8024b48:	bd80      	pop	{r7, pc}

08024b4a <_ZN3Run13ModeLineTraceEv>:

void Run::ModeLineTrace()
{
 8024b4a:	b580      	push	{r7, lr}
 8024b4c:	b086      	sub	sp, #24
 8024b4e:	af00      	add	r7, sp, #0
 8024b50:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024b52:	687b      	ldr	r3, [r7, #4]
 8024b54:	699b      	ldr	r3, [r3, #24]
 8024b56:	4618      	mov	r0, r3
 8024b58:	f7fd f90e 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 8024b5c:	687b      	ldr	r3, [r7, #4]
 8024b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024b60:	4618      	mov	r0, r3
 8024b62:	f000 f9cb 	bl	8024efc <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024b66:	6878      	ldr	r0, [r7, #4]
 8024b68:	f7ff fcea 	bl	8024540 <_ZN3Run13EmergencyStopEv>
 8024b6c:	4603      	mov	r3, r0
 8024b6e:	2b00      	cmp	r3, #0
 8024b70:	d11e      	bne.n	8024bb0 <_ZN3Run13ModeLineTraceEv+0x66>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024b72:	687b      	ldr	r3, [r7, #4]
 8024b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024b76:	4618      	mov	r0, r3
 8024b78:	f000 fb8f 	bl	802529a <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024b7c:	4603      	mov	r3, r0
 8024b7e:	75fb      	strb	r3, [r7, #23]
    float trans_ratio = CommonDuty(goal_count);
 8024b80:	7dfb      	ldrb	r3, [r7, #23]
 8024b82:	4619      	mov	r1, r3
 8024b84:	6878      	ldr	r0, [r7, #4]
 8024b86:	f000 f8d5 	bl	8024d34 <_ZN3Run10CommonDutyEh>
 8024b8a:	ed87 0a04 	vstr	s0, [r7, #16]
    float rotat_ratio = line_trace_->LineTraceOnly();
 8024b8e:	687b      	ldr	r3, [r7, #4]
 8024b90:	69db      	ldr	r3, [r3, #28]
 8024b92:	4618      	mov	r0, r3
 8024b94:	f7fd faac 	bl	80220f0 <_ZN9LineTrace13LineTraceOnlyEv>
 8024b98:	ed87 0a03 	vstr	s0, [r7, #12]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024b9c:	687b      	ldr	r3, [r7, #4]
 8024b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024ba0:	edd7 0a03 	vldr	s1, [r7, #12]
 8024ba4:	ed97 0a04 	vldr	s0, [r7, #16]
 8024ba8:	4618      	mov	r0, r3
 8024baa:	f7ff f8b1 	bl	8023d10 <_ZN5Motor5DriveEff>
 8024bae:	e000      	b.n	8024bb2 <_ZN3Run13ModeLineTraceEv+0x68>
    if(EmergencyStop()) return;
 8024bb0:	bf00      	nop
}
 8024bb2:	3718      	adds	r7, #24
 8024bb4:	46bd      	mov	sp, r7
 8024bb6:	bd80      	pop	{r7, pc}

08024bb8 <_ZN3Run24ModeVelocityControlDebugEv>:

#ifdef DEBUG_MODE
void Run::ModeVelocityControlDebug()
{
 8024bb8:	b580      	push	{r7, lr}
 8024bba:	b084      	sub	sp, #16
 8024bbc:	af00      	add	r7, sp, #0
 8024bbe:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024bc0:	687b      	ldr	r3, [r7, #4]
 8024bc2:	699b      	ldr	r3, [r3, #24]
 8024bc4:	4618      	mov	r0, r3
 8024bc6:	f7fd f8d7 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024bca:	687b      	ldr	r3, [r7, #4]
 8024bcc:	689b      	ldr	r3, [r3, #8]
 8024bce:	4618      	mov	r0, r3
 8024bd0:	f7fc f8ea 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    /* Motor control */
    float target_velocity = VELOCITY_CONTROL_TARGET;
 8024bd4:	4b0b      	ldr	r3, [pc, #44]	; (8024c04 <_ZN3Run24ModeVelocityControlDebugEv+0x4c>)
 8024bd6:	60fb      	str	r3, [r7, #12]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024bd8:	687b      	ldr	r3, [r7, #4]
 8024bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024bdc:	ed97 0a03 	vldr	s0, [r7, #12]
 8024be0:	4618      	mov	r0, r3
 8024be2:	f001 f822 	bl	8025c2a <_ZN15VelocityControl16DeterminePidGainEf>
 8024be6:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, 0);
 8024bea:	687b      	ldr	r3, [r7, #4]
 8024bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024bee:	eddf 0a06 	vldr	s1, [pc, #24]	; 8024c08 <_ZN3Run24ModeVelocityControlDebugEv+0x50>
 8024bf2:	ed97 0a02 	vldr	s0, [r7, #8]
 8024bf6:	4618      	mov	r0, r3
 8024bf8:	f7ff f88a 	bl	8023d10 <_ZN5Motor5DriveEff>
}
 8024bfc:	bf00      	nop
 8024bfe:	3710      	adds	r7, #16
 8024c00:	46bd      	mov	sp, r7
 8024c02:	bd80      	pop	{r7, pc}
 8024c04:	3f99999a 	.word	0x3f99999a
 8024c08:	00000000 	.word	0x00000000

08024c0c <_ZN3Run18ModeLineTraceDebugEv>:

void Run::ModeLineTraceDebug()
{
 8024c0c:	b580      	push	{r7, lr}
 8024c0e:	b084      	sub	sp, #16
 8024c10:	af00      	add	r7, sp, #0
 8024c12:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024c14:	687b      	ldr	r3, [r7, #4]
 8024c16:	699b      	ldr	r3, [r3, #24]
 8024c18:	4618      	mov	r0, r3
 8024c1a:	f7fd f8ad 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    /* Motor control */
    float rotat_ratio = line_trace_->LineTraceOnly();
 8024c1e:	687b      	ldr	r3, [r7, #4]
 8024c20:	69db      	ldr	r3, [r3, #28]
 8024c22:	4618      	mov	r0, r3
 8024c24:	f7fd fa64 	bl	80220f0 <_ZN9LineTrace13LineTraceOnlyEv>
 8024c28:	ed87 0a03 	vstr	s0, [r7, #12]
    motor_->Drive(0, rotat_ratio);
 8024c2c:	687b      	ldr	r3, [r7, #4]
 8024c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024c30:	edd7 0a03 	vldr	s1, [r7, #12]
 8024c34:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8024c48 <_ZN3Run18ModeLineTraceDebugEv+0x3c>
 8024c38:	4618      	mov	r0, r3
 8024c3a:	f7ff f869 	bl	8023d10 <_ZN5Motor5DriveEff>
}
 8024c3e:	bf00      	nop
 8024c40:	3710      	adds	r7, #16
 8024c42:	46bd      	mov	sp, r7
 8024c44:	bd80      	pop	{r7, pc}
 8024c46:	bf00      	nop
 8024c48:	00000000 	.word	0x00000000

08024c4c <_ZN3Run19FirstTargetVelocityEh>:
    InitialTest();
}
#endif // DEBUG_MODE

float Run::FirstTargetVelocity(uint8_t goal_count)
{
 8024c4c:	b480      	push	{r7}
 8024c4e:	b083      	sub	sp, #12
 8024c50:	af00      	add	r7, sp, #0
 8024c52:	6078      	str	r0, [r7, #4]
 8024c54:	460b      	mov	r3, r1
 8024c56:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024c58:	78fb      	ldrb	r3, [r7, #3]
 8024c5a:	2b01      	cmp	r3, #1
 8024c5c:	d101      	bne.n	8024c62 <_ZN3Run19FirstTargetVelocityEh+0x16>
    {
        return EXPLORE_VELOCITY;
 8024c5e:	4b0c      	ldr	r3, [pc, #48]	; (8024c90 <_ZN3Run19FirstTargetVelocityEh+0x44>)
 8024c60:	e00c      	b.n	8024c7c <_ZN3Run19FirstTargetVelocityEh+0x30>
    }
    else if(goal_count >= 2)
 8024c62:	78fb      	ldrb	r3, [r7, #3]
 8024c64:	2b01      	cmp	r3, #1
 8024c66:	d908      	bls.n	8024c7a <_ZN3Run19FirstTargetVelocityEh+0x2e>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024c68:	4b0a      	ldr	r3, [pc, #40]	; (8024c94 <_ZN3Run19FirstTargetVelocityEh+0x48>)
 8024c6a:	781b      	ldrb	r3, [r3, #0]
 8024c6c:	3301      	adds	r3, #1
 8024c6e:	b2da      	uxtb	r2, r3
 8024c70:	4b08      	ldr	r3, [pc, #32]	; (8024c94 <_ZN3Run19FirstTargetVelocityEh+0x48>)
 8024c72:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024c74:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024c78:	e000      	b.n	8024c7c <_ZN3Run19FirstTargetVelocityEh+0x30>
        {
            SetRunMode(FIRST_GOAL);
            return 0;
        }
    }
    else return EXPLORE_VELOCITY;
 8024c7a:	4b05      	ldr	r3, [pc, #20]	; (8024c90 <_ZN3Run19FirstTargetVelocityEh+0x44>)
 8024c7c:	ee07 3a90 	vmov	s15, r3
}
 8024c80:	eeb0 0a67 	vmov.f32	s0, s15
 8024c84:	370c      	adds	r7, #12
 8024c86:	46bd      	mov	sp, r7
 8024c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c8c:	4770      	bx	lr
 8024c8e:	bf00      	nop
 8024c90:	3f99999a 	.word	0x3f99999a
 8024c94:	200002d6 	.word	0x200002d6

08024c98 <_ZN3Run20SecondTargetVelocityEh>:

float Run::SecondTargetVelocity(uint8_t goal_count)
{
 8024c98:	b580      	push	{r7, lr}
 8024c9a:	b082      	sub	sp, #8
 8024c9c:	af00      	add	r7, sp, #0
 8024c9e:	6078      	str	r0, [r7, #4]
 8024ca0:	460b      	mov	r3, r1
 8024ca2:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024ca4:	78fb      	ldrb	r3, [r7, #3]
 8024ca6:	2b01      	cmp	r3, #1
 8024ca8:	d107      	bne.n	8024cba <_ZN3Run20SecondTargetVelocityEh+0x22>
    {
        return logger_->GetTargetVelocity();
 8024caa:	687b      	ldr	r3, [r7, #4]
 8024cac:	6a1b      	ldr	r3, [r3, #32]
 8024cae:	4618      	mov	r0, r3
 8024cb0:	f7fe f988 	bl	8022fc4 <_ZN6Logger17GetTargetVelocityEv>
 8024cb4:	eef0 7a40 	vmov.f32	s15, s0
 8024cb8:	e00d      	b.n	8024cd6 <_ZN3Run20SecondTargetVelocityEh+0x3e>
    }
    else if(goal_count >= 2)
 8024cba:	78fb      	ldrb	r3, [r7, #3]
 8024cbc:	2b01      	cmp	r3, #1
 8024cbe:	d908      	bls.n	8024cd2 <_ZN3Run20SecondTargetVelocityEh+0x3a>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024cc0:	4b07      	ldr	r3, [pc, #28]	; (8024ce0 <_ZN3Run20SecondTargetVelocityEh+0x48>)
 8024cc2:	781b      	ldrb	r3, [r3, #0]
 8024cc4:	3301      	adds	r3, #1
 8024cc6:	b2da      	uxtb	r2, r3
 8024cc8:	4b05      	ldr	r3, [pc, #20]	; (8024ce0 <_ZN3Run20SecondTargetVelocityEh+0x48>)
 8024cca:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024ccc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024cd0:	e001      	b.n	8024cd6 <_ZN3Run20SecondTargetVelocityEh+0x3e>
        {
            SetRunMode(SECOND_GOAL);
            return 0;
        }
    }
    else return MIN_VELOCITY;
 8024cd2:	eddf 7a04 	vldr	s15, [pc, #16]	; 8024ce4 <_ZN3Run20SecondTargetVelocityEh+0x4c>
}
 8024cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8024cda:	3708      	adds	r7, #8
 8024cdc:	46bd      	mov	sp, r7
 8024cde:	bd80      	pop	{r7, pc}
 8024ce0:	200002d7 	.word	0x200002d7
 8024ce4:	3fa66666 	.word	0x3fa66666

08024ce8 <_ZN3Run21VelocityControlTargetEh>:

float Run::VelocityControlTarget(uint8_t goal_count)
{
 8024ce8:	b480      	push	{r7}
 8024cea:	b083      	sub	sp, #12
 8024cec:	af00      	add	r7, sp, #0
 8024cee:	6078      	str	r0, [r7, #4]
 8024cf0:	460b      	mov	r3, r1
 8024cf2:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024cf4:	78fb      	ldrb	r3, [r7, #3]
 8024cf6:	2b01      	cmp	r3, #1
 8024cf8:	d101      	bne.n	8024cfe <_ZN3Run21VelocityControlTargetEh+0x16>
    {
        return VELOCITY_CONTROL_TARGET;
 8024cfa:	4b0c      	ldr	r3, [pc, #48]	; (8024d2c <_ZN3Run21VelocityControlTargetEh+0x44>)
 8024cfc:	e00c      	b.n	8024d18 <_ZN3Run21VelocityControlTargetEh+0x30>
    }
    else if(goal_count >= 2)
 8024cfe:	78fb      	ldrb	r3, [r7, #3]
 8024d00:	2b01      	cmp	r3, #1
 8024d02:	d908      	bls.n	8024d16 <_ZN3Run21VelocityControlTargetEh+0x2e>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024d04:	4b0a      	ldr	r3, [pc, #40]	; (8024d30 <_ZN3Run21VelocityControlTargetEh+0x48>)
 8024d06:	781b      	ldrb	r3, [r3, #0]
 8024d08:	3301      	adds	r3, #1
 8024d0a:	b2da      	uxtb	r2, r3
 8024d0c:	4b08      	ldr	r3, [pc, #32]	; (8024d30 <_ZN3Run21VelocityControlTargetEh+0x48>)
 8024d0e:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024d10:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024d14:	e000      	b.n	8024d18 <_ZN3Run21VelocityControlTargetEh+0x30>
        {
            SetRunMode(STANDBY);
            return 0;
        }
    }
    else return VELOCITY_CONTROL_TARGET;
 8024d16:	4b05      	ldr	r3, [pc, #20]	; (8024d2c <_ZN3Run21VelocityControlTargetEh+0x44>)
 8024d18:	ee07 3a90 	vmov	s15, r3
}
 8024d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8024d20:	370c      	adds	r7, #12
 8024d22:	46bd      	mov	sp, r7
 8024d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d28:	4770      	bx	lr
 8024d2a:	bf00      	nop
 8024d2c:	3f99999a 	.word	0x3f99999a
 8024d30:	200002d8 	.word	0x200002d8

08024d34 <_ZN3Run10CommonDutyEh>:

float Run::CommonDuty(uint8_t goal_count)
{
 8024d34:	b480      	push	{r7}
 8024d36:	b083      	sub	sp, #12
 8024d38:	af00      	add	r7, sp, #0
 8024d3a:	6078      	str	r0, [r7, #4]
 8024d3c:	460b      	mov	r3, r1
 8024d3e:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024d40:	78fb      	ldrb	r3, [r7, #3]
 8024d42:	2b01      	cmp	r3, #1
 8024d44:	d101      	bne.n	8024d4a <_ZN3Run10CommonDutyEh+0x16>
    {
        return COMMON_DUTY;
 8024d46:	4b0b      	ldr	r3, [pc, #44]	; (8024d74 <_ZN3Run10CommonDutyEh+0x40>)
 8024d48:	e00b      	b.n	8024d62 <_ZN3Run10CommonDutyEh+0x2e>
    }
    else if(goal_count >= 2)
 8024d4a:	78fb      	ldrb	r3, [r7, #3]
 8024d4c:	2b01      	cmp	r3, #1
 8024d4e:	d907      	bls.n	8024d60 <_ZN3Run10CommonDutyEh+0x2c>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024d50:	4b09      	ldr	r3, [pc, #36]	; (8024d78 <_ZN3Run10CommonDutyEh+0x44>)
 8024d52:	781b      	ldrb	r3, [r3, #0]
 8024d54:	3301      	adds	r3, #1
 8024d56:	b2da      	uxtb	r2, r3
 8024d58:	4b07      	ldr	r3, [pc, #28]	; (8024d78 <_ZN3Run10CommonDutyEh+0x44>)
 8024d5a:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_DUTY;
 8024d5c:	4b05      	ldr	r3, [pc, #20]	; (8024d74 <_ZN3Run10CommonDutyEh+0x40>)
 8024d5e:	e000      	b.n	8024d62 <_ZN3Run10CommonDutyEh+0x2e>
        {
            SetRunMode(STANDBY);
            return 0;
        }
    }
    else return COMMON_DUTY;
 8024d60:	4b04      	ldr	r3, [pc, #16]	; (8024d74 <_ZN3Run10CommonDutyEh+0x40>)
 8024d62:	ee07 3a90 	vmov	s15, r3
}
 8024d66:	eeb0 0a67 	vmov.f32	s0, s15
 8024d6a:	370c      	adds	r7, #12
 8024d6c:	46bd      	mov	sp, r7
 8024d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d72:	4770      	bx	lr
 8024d74:	3e4ccccd 	.word	0x3e4ccccd
 8024d78:	200002d9 	.word	0x200002d9

08024d7c <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0)
 8024d7c:	b480      	push	{r7}
 8024d7e:	b083      	sub	sp, #12
 8024d80:	af00      	add	r7, sp, #0
 8024d82:	6078      	str	r0, [r7, #4]
                         , write_state_flags_(0)
                         , exception_flags_(0)
                         , master_count_(0)
                         , goal_marker_count_(0)
                         , corner_marker_count_(0)
                         , cross_line_count_(0) {}
 8024d84:	687b      	ldr	r3, [r7, #4]
 8024d86:	2200      	movs	r2, #0
 8024d88:	701a      	strb	r2, [r3, #0]
 8024d8a:	687b      	ldr	r3, [r7, #4]
 8024d8c:	2200      	movs	r2, #0
 8024d8e:	705a      	strb	r2, [r3, #1]
 8024d90:	687b      	ldr	r3, [r7, #4]
 8024d92:	2200      	movs	r2, #0
 8024d94:	709a      	strb	r2, [r3, #2]
 8024d96:	687b      	ldr	r3, [r7, #4]
 8024d98:	2200      	movs	r2, #0
 8024d9a:	70da      	strb	r2, [r3, #3]
 8024d9c:	687b      	ldr	r3, [r7, #4]
 8024d9e:	2200      	movs	r2, #0
 8024da0:	711a      	strb	r2, [r3, #4]
 8024da2:	687b      	ldr	r3, [r7, #4]
 8024da4:	2200      	movs	r2, #0
 8024da6:	715a      	strb	r2, [r3, #5]
 8024da8:	687b      	ldr	r3, [r7, #4]
 8024daa:	2200      	movs	r2, #0
 8024dac:	719a      	strb	r2, [r3, #6]
 8024dae:	687b      	ldr	r3, [r7, #4]
 8024db0:	4618      	mov	r0, r3
 8024db2:	370c      	adds	r7, #12
 8024db4:	46bd      	mov	sp, r7
 8024db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dba:	4770      	bx	lr

08024dbc <_ZN10SideSensor11UpdateStateEv>:

void SideSensor::UpdateState()
{
 8024dbc:	b580      	push	{r7, lr}
 8024dbe:	b084      	sub	sp, #16
 8024dc0:	af00      	add	r7, sp, #0
 8024dc2:	6078      	str	r0, [r7, #4]
    uint8_t io_state = 0xFF; // Lower bits represent the positions of sensors.
 8024dc4:	23ff      	movs	r3, #255	; 0xff
 8024dc6:	73fb      	strb	r3, [r7, #15]

    if(IO_OUTSIDE_L == 0) io_state &= 0xF7; // 0111
 8024dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8024dcc:	4849      	ldr	r0, [pc, #292]	; (8024ef4 <_ZN10SideSensor11UpdateStateEv+0x138>)
 8024dce:	f002 fed5 	bl	8027b7c <HAL_GPIO_ReadPin>
 8024dd2:	4603      	mov	r3, r0
 8024dd4:	2b00      	cmp	r3, #0
 8024dd6:	bf0c      	ite	eq
 8024dd8:	2301      	moveq	r3, #1
 8024dda:	2300      	movne	r3, #0
 8024ddc:	b2db      	uxtb	r3, r3
 8024dde:	2b00      	cmp	r3, #0
 8024de0:	d003      	beq.n	8024dea <_ZN10SideSensor11UpdateStateEv+0x2e>
 8024de2:	7bfb      	ldrb	r3, [r7, #15]
 8024de4:	f023 0308 	bic.w	r3, r3, #8
 8024de8:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_L == 0)  io_state &= 0xFB; // 1011
 8024dea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8024dee:	4841      	ldr	r0, [pc, #260]	; (8024ef4 <_ZN10SideSensor11UpdateStateEv+0x138>)
 8024df0:	f002 fec4 	bl	8027b7c <HAL_GPIO_ReadPin>
 8024df4:	4603      	mov	r3, r0
 8024df6:	2b00      	cmp	r3, #0
 8024df8:	bf0c      	ite	eq
 8024dfa:	2301      	moveq	r3, #1
 8024dfc:	2300      	movne	r3, #0
 8024dfe:	b2db      	uxtb	r3, r3
 8024e00:	2b00      	cmp	r3, #0
 8024e02:	d003      	beq.n	8024e0c <_ZN10SideSensor11UpdateStateEv+0x50>
 8024e04:	7bfb      	ldrb	r3, [r7, #15]
 8024e06:	f023 0304 	bic.w	r3, r3, #4
 8024e0a:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_R == 0)  io_state &= 0xFD; // 1101
 8024e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8024e10:	4838      	ldr	r0, [pc, #224]	; (8024ef4 <_ZN10SideSensor11UpdateStateEv+0x138>)
 8024e12:	f002 feb3 	bl	8027b7c <HAL_GPIO_ReadPin>
 8024e16:	4603      	mov	r3, r0
 8024e18:	2b00      	cmp	r3, #0
 8024e1a:	bf0c      	ite	eq
 8024e1c:	2301      	moveq	r3, #1
 8024e1e:	2300      	movne	r3, #0
 8024e20:	b2db      	uxtb	r3, r3
 8024e22:	2b00      	cmp	r3, #0
 8024e24:	d003      	beq.n	8024e2e <_ZN10SideSensor11UpdateStateEv+0x72>
 8024e26:	7bfb      	ldrb	r3, [r7, #15]
 8024e28:	f023 0302 	bic.w	r3, r3, #2
 8024e2c:	73fb      	strb	r3, [r7, #15]
    if(IO_OUTSIDE_R == 0) io_state &= 0xFE; // 1110
 8024e2e:	2104      	movs	r1, #4
 8024e30:	4831      	ldr	r0, [pc, #196]	; (8024ef8 <_ZN10SideSensor11UpdateStateEv+0x13c>)
 8024e32:	f002 fea3 	bl	8027b7c <HAL_GPIO_ReadPin>
 8024e36:	4603      	mov	r3, r0
 8024e38:	2b00      	cmp	r3, #0
 8024e3a:	bf0c      	ite	eq
 8024e3c:	2301      	moveq	r3, #1
 8024e3e:	2300      	movne	r3, #0
 8024e40:	b2db      	uxtb	r3, r3
 8024e42:	2b00      	cmp	r3, #0
 8024e44:	d003      	beq.n	8024e4e <_ZN10SideSensor11UpdateStateEv+0x92>
 8024e46:	7bfb      	ldrb	r3, [r7, #15]
 8024e48:	f023 0301 	bic.w	r3, r3, #1
 8024e4c:	73fb      	strb	r3, [r7, #15]

    read_state_flags_ <<= 4;
 8024e4e:	687b      	ldr	r3, [r7, #4]
 8024e50:	781b      	ldrb	r3, [r3, #0]
 8024e52:	011b      	lsls	r3, r3, #4
 8024e54:	b2da      	uxtb	r2, r3
 8024e56:	687b      	ldr	r3, [r7, #4]
 8024e58:	701a      	strb	r2, [r3, #0]

    switch(io_state)
 8024e5a:	7bfb      	ldrb	r3, [r7, #15]
 8024e5c:	3bf0      	subs	r3, #240	; 0xf0
 8024e5e:	2b0f      	cmp	r3, #15
 8024e60:	d842      	bhi.n	8024ee8 <_ZN10SideSensor11UpdateStateEv+0x12c>
 8024e62:	a201      	add	r2, pc, #4	; (adr r2, 8024e68 <_ZN10SideSensor11UpdateStateEv+0xac>)
 8024e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024e68:	08024ed9 	.word	0x08024ed9
 8024e6c:	08024ed9 	.word	0x08024ed9
 8024e70:	08024ed9 	.word	0x08024ed9
 8024e74:	08024ec9 	.word	0x08024ec9
 8024e78:	08024ed9 	.word	0x08024ed9
 8024e7c:	08024ee9 	.word	0x08024ee9
 8024e80:	08024ed9 	.word	0x08024ed9
 8024e84:	08024ec9 	.word	0x08024ec9
 8024e88:	08024ed9 	.word	0x08024ed9
 8024e8c:	08024ed9 	.word	0x08024ed9
 8024e90:	08024ee9 	.word	0x08024ee9
 8024e94:	08024ec9 	.word	0x08024ec9
 8024e98:	08024eb9 	.word	0x08024eb9
 8024e9c:	08024ee9 	.word	0x08024ee9
 8024ea0:	08024ee9 	.word	0x08024ee9
 8024ea4:	08024ea9 	.word	0x08024ea9
    {
        case 0xFF: // 1111
            read_state_flags_ |= 0x08; break;
 8024ea8:	687b      	ldr	r3, [r7, #4]
 8024eaa:	781b      	ldrb	r3, [r3, #0]
 8024eac:	f043 0308 	orr.w	r3, r3, #8
 8024eb0:	b2da      	uxtb	r2, r3
 8024eb2:	687b      	ldr	r3, [r7, #4]
 8024eb4:	701a      	strb	r2, [r3, #0]
 8024eb6:	e018      	b.n	8024eea <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFC: // 1100  If through goal, increase pattern.
            read_state_flags_ |= 0x04; break;
 8024eb8:	687b      	ldr	r3, [r7, #4]
 8024eba:	781b      	ldrb	r3, [r3, #0]
 8024ebc:	f043 0304 	orr.w	r3, r3, #4
 8024ec0:	b2da      	uxtb	r2, r3
 8024ec2:	687b      	ldr	r3, [r7, #4]
 8024ec4:	701a      	strb	r2, [r3, #0]
 8024ec6:	e010      	b.n	8024eea <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFB: // 1011
        case 0xF7: // 0111
        case 0xF3: // 0011
            read_state_flags_ |= 0x02; break;
 8024ec8:	687b      	ldr	r3, [r7, #4]
 8024eca:	781b      	ldrb	r3, [r3, #0]
 8024ecc:	f043 0302 	orr.w	r3, r3, #2
 8024ed0:	b2da      	uxtb	r2, r3
 8024ed2:	687b      	ldr	r3, [r7, #4]
 8024ed4:	701a      	strb	r2, [r3, #0]
 8024ed6:	e008      	b.n	8024eea <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xF4: // 0100
        case 0xF0: // 0000
        case 0xF1: // 0001
        case 0xF8: // 1000
        case 0xF9: // 1001
            read_state_flags_ |= 0x01; break;
 8024ed8:	687b      	ldr	r3, [r7, #4]
 8024eda:	781b      	ldrb	r3, [r3, #0]
 8024edc:	f043 0301 	orr.w	r3, r3, #1
 8024ee0:	b2da      	uxtb	r2, r3
 8024ee2:	687b      	ldr	r3, [r7, #4]
 8024ee4:	701a      	strb	r2, [r3, #0]
 8024ee6:	e000      	b.n	8024eea <_ZN10SideSensor11UpdateStateEv+0x12e>
        default: break;
 8024ee8:	bf00      	nop
    }
}
 8024eea:	bf00      	nop
 8024eec:	3710      	adds	r7, #16
 8024eee:	46bd      	mov	sp, r7
 8024ef0:	bd80      	pop	{r7, pc}
 8024ef2:	bf00      	nop
 8024ef4:	40020400 	.word	0x40020400
 8024ef8:	40020c00 	.word	0x40020c00

08024efc <_ZN10SideSensor6UpdateEv>:

void SideSensor::Update()
{
 8024efc:	b580      	push	{r7, lr}
 8024efe:	b084      	sub	sp, #16
 8024f00:	af00      	add	r7, sp, #0
 8024f02:	6078      	str	r0, [r7, #4]
    uint8_t ignore_flag = exception_flags_ & 0x01;
 8024f04:	687b      	ldr	r3, [r7, #4]
 8024f06:	789b      	ldrb	r3, [r3, #2]
 8024f08:	f003 0301 	and.w	r3, r3, #1
 8024f0c:	73fb      	strb	r3, [r7, #15]

    /* Ignore judgment */
    if(ignore_flag == 0x01)
 8024f0e:	7bfb      	ldrb	r3, [r7, #15]
 8024f10:	2b01      	cmp	r3, #1
 8024f12:	d111      	bne.n	8024f38 <_ZN10SideSensor6UpdateEv+0x3c>
    {
        if(master_count_ < IGNORE_COUNT) master_count_++;
 8024f14:	687b      	ldr	r3, [r7, #4]
 8024f16:	78db      	ldrb	r3, [r3, #3]
 8024f18:	2b04      	cmp	r3, #4
 8024f1a:	d806      	bhi.n	8024f2a <_ZN10SideSensor6UpdateEv+0x2e>
 8024f1c:	687b      	ldr	r3, [r7, #4]
 8024f1e:	78db      	ldrb	r3, [r3, #3]
 8024f20:	3301      	adds	r3, #1
 8024f22:	b2da      	uxtb	r2, r3
 8024f24:	687b      	ldr	r3, [r7, #4]
 8024f26:	70da      	strb	r2, [r3, #3]
 8024f28:	e031      	b.n	8024f8e <_ZN10SideSensor6UpdateEv+0x92>
        else exception_flags_ >>= 1; 
 8024f2a:	687b      	ldr	r3, [r7, #4]
 8024f2c:	789b      	ldrb	r3, [r3, #2]
 8024f2e:	105b      	asrs	r3, r3, #1
 8024f30:	b2da      	uxtb	r2, r3
 8024f32:	687b      	ldr	r3, [r7, #4]
 8024f34:	709a      	strb	r2, [r3, #2]
 8024f36:	e02a      	b.n	8024f8e <_ZN10SideSensor6UpdateEv+0x92>
    }
    else if(ignore_flag == 0x00)
 8024f38:	7bfb      	ldrb	r3, [r7, #15]
 8024f3a:	2b00      	cmp	r3, #0
 8024f3c:	d127      	bne.n	8024f8e <_ZN10SideSensor6UpdateEv+0x92>
    {
        UpdateState();
 8024f3e:	6878      	ldr	r0, [r7, #4]
 8024f40:	f7ff ff3c 	bl	8024dbc <_ZN10SideSensor11UpdateStateEv>

        uint8_t now_state = read_state_flags_;
 8024f44:	687b      	ldr	r3, [r7, #4]
 8024f46:	781b      	ldrb	r3, [r3, #0]
 8024f48:	73bb      	strb	r3, [r7, #14]
        uint8_t pre_state = (now_state << 4) | (now_state >> 4);
 8024f4a:	7bbb      	ldrb	r3, [r7, #14]
 8024f4c:	011b      	lsls	r3, r3, #4
 8024f4e:	b25a      	sxtb	r2, r3
 8024f50:	7bbb      	ldrb	r3, [r7, #14]
 8024f52:	111b      	asrs	r3, r3, #4
 8024f54:	b25b      	sxtb	r3, r3
 8024f56:	4313      	orrs	r3, r2
 8024f58:	b25b      	sxtb	r3, r3
 8024f5a:	737b      	strb	r3, [r7, #13]

        if(pre_state != now_state)
 8024f5c:	7b7a      	ldrb	r2, [r7, #13]
 8024f5e:	7bbb      	ldrb	r3, [r7, #14]
 8024f60:	429a      	cmp	r2, r3
 8024f62:	d003      	beq.n	8024f6c <_ZN10SideSensor6UpdateEv+0x70>
        {
            NoiseTolerance();
 8024f64:	6878      	ldr	r0, [r7, #4]
 8024f66:	f000 f819 	bl	8024f9c <_ZN10SideSensor14NoiseToleranceEv>
 8024f6a:	e010      	b.n	8024f8e <_ZN10SideSensor6UpdateEv+0x92>
        }
        else if(pre_state == now_state)
 8024f6c:	7b7a      	ldrb	r2, [r7, #13]
 8024f6e:	7bbb      	ldrb	r3, [r7, #14]
 8024f70:	429a      	cmp	r2, r3
 8024f72:	d10c      	bne.n	8024f8e <_ZN10SideSensor6UpdateEv+0x92>
        {
            exception_flags_ &= 0xF3; // noise_count = 0
 8024f74:	687b      	ldr	r3, [r7, #4]
 8024f76:	789b      	ldrb	r3, [r3, #2]
 8024f78:	f023 030c 	bic.w	r3, r3, #12
 8024f7c:	b2da      	uxtb	r2, r3
 8024f7e:	687b      	ldr	r3, [r7, #4]
 8024f80:	709a      	strb	r2, [r3, #2]
            ConfirmState();
 8024f82:	6878      	ldr	r0, [r7, #4]
 8024f84:	f000 f85a 	bl	802503c <_ZN10SideSensor12ConfirmStateEv>
            CountUp();
 8024f88:	6878      	ldr	r0, [r7, #4]
 8024f8a:	f000 f8c6 	bl	802511a <_ZN10SideSensor7CountUpEv>
        }
    }

#ifdef DEBUG_MODE
    Monitor();
 8024f8e:	6878      	ldr	r0, [r7, #4]
 8024f90:	f000 f9a8 	bl	80252e4 <_ZN10SideSensor7MonitorEv>
#endif // DEBUG_MODE
}
 8024f94:	bf00      	nop
 8024f96:	3710      	adds	r7, #16
 8024f98:	46bd      	mov	sp, r7
 8024f9a:	bd80      	pop	{r7, pc}

08024f9c <_ZN10SideSensor14NoiseToleranceEv>:

void SideSensor::NoiseTolerance()
{
 8024f9c:	b580      	push	{r7, lr}
 8024f9e:	b084      	sub	sp, #16
 8024fa0:	af00      	add	r7, sp, #0
 8024fa2:	6078      	str	r0, [r7, #4]
    uint8_t noise_count = (exception_flags_ & 0x0C) >> 2;
 8024fa4:	687b      	ldr	r3, [r7, #4]
 8024fa6:	789b      	ldrb	r3, [r3, #2]
 8024fa8:	109b      	asrs	r3, r3, #2
 8024faa:	b2db      	uxtb	r3, r3
 8024fac:	f003 0303 	and.w	r3, r3, #3
 8024fb0:	73fb      	strb	r3, [r7, #15]

    if(noise_count == 0x00)
 8024fb2:	7bfb      	ldrb	r3, [r7, #15]
 8024fb4:	2b00      	cmp	r3, #0
 8024fb6:	d11f      	bne.n	8024ff8 <_ZN10SideSensor14NoiseToleranceEv+0x5c>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ & 0xF0);
 8024fb8:	687b      	ldr	r3, [r7, #4]
 8024fba:	789b      	ldrb	r3, [r3, #2]
 8024fbc:	f003 030f 	and.w	r3, r3, #15
 8024fc0:	b2da      	uxtb	r2, r3
 8024fc2:	687b      	ldr	r3, [r7, #4]
 8024fc4:	781b      	ldrb	r3, [r3, #0]
 8024fc6:	f023 030f 	bic.w	r3, r3, #15
 8024fca:	b2db      	uxtb	r3, r3
 8024fcc:	4313      	orrs	r3, r2
 8024fce:	b2da      	uxtb	r2, r3
 8024fd0:	687b      	ldr	r3, [r7, #4]
 8024fd2:	709a      	strb	r2, [r3, #2]
        /* Count up noise_count */
        noise_count++;
 8024fd4:	7bfb      	ldrb	r3, [r7, #15]
 8024fd6:	3301      	adds	r3, #1
 8024fd8:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8024fda:	687b      	ldr	r3, [r7, #4]
 8024fdc:	789b      	ldrb	r3, [r3, #2]
 8024fde:	b25b      	sxtb	r3, r3
 8024fe0:	f023 030c 	bic.w	r3, r3, #12
 8024fe4:	b25a      	sxtb	r2, r3
 8024fe6:	7bfb      	ldrb	r3, [r7, #15]
 8024fe8:	009b      	lsls	r3, r3, #2
 8024fea:	b25b      	sxtb	r3, r3
 8024fec:	4313      	orrs	r3, r2
 8024fee:	b25b      	sxtb	r3, r3
 8024ff0:	b2da      	uxtb	r2, r3
 8024ff2:	687b      	ldr	r3, [r7, #4]
 8024ff4:	709a      	strb	r2, [r3, #2]

        ConfirmState();
        CountUp();
    }
    else master_count_ = 0;
}
 8024ff6:	e01d      	b.n	8025034 <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else if(noise_count == 0x01)
 8024ff8:	7bfb      	ldrb	r3, [r7, #15]
 8024ffa:	2b01      	cmp	r3, #1
 8024ffc:	d117      	bne.n	802502e <_ZN10SideSensor14NoiseToleranceEv+0x92>
        noise_count++;
 8024ffe:	7bfb      	ldrb	r3, [r7, #15]
 8025000:	3301      	adds	r3, #1
 8025002:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8025004:	687b      	ldr	r3, [r7, #4]
 8025006:	789b      	ldrb	r3, [r3, #2]
 8025008:	b25b      	sxtb	r3, r3
 802500a:	f023 030c 	bic.w	r3, r3, #12
 802500e:	b25a      	sxtb	r2, r3
 8025010:	7bfb      	ldrb	r3, [r7, #15]
 8025012:	009b      	lsls	r3, r3, #2
 8025014:	b25b      	sxtb	r3, r3
 8025016:	4313      	orrs	r3, r2
 8025018:	b25b      	sxtb	r3, r3
 802501a:	b2da      	uxtb	r2, r3
 802501c:	687b      	ldr	r3, [r7, #4]
 802501e:	709a      	strb	r2, [r3, #2]
        ConfirmState();
 8025020:	6878      	ldr	r0, [r7, #4]
 8025022:	f000 f80b 	bl	802503c <_ZN10SideSensor12ConfirmStateEv>
        CountUp();
 8025026:	6878      	ldr	r0, [r7, #4]
 8025028:	f000 f877 	bl	802511a <_ZN10SideSensor7CountUpEv>
}
 802502c:	e002      	b.n	8025034 <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else master_count_ = 0;
 802502e:	687b      	ldr	r3, [r7, #4]
 8025030:	2200      	movs	r2, #0
 8025032:	70da      	strb	r2, [r3, #3]
}
 8025034:	bf00      	nop
 8025036:	3710      	adds	r7, #16
 8025038:	46bd      	mov	sp, r7
 802503a:	bd80      	pop	{r7, pc}

0802503c <_ZN10SideSensor12ConfirmStateEv>:

void SideSensor::ConfirmState()
{
 802503c:	b480      	push	{r7}
 802503e:	b085      	sub	sp, #20
 8025040:	af00      	add	r7, sp, #0
 8025042:	6078      	str	r0, [r7, #4]
    uint8_t before_noise_state = exception_flags_ >> 4;
 8025044:	687b      	ldr	r3, [r7, #4]
 8025046:	789b      	ldrb	r3, [r3, #2]
 8025048:	111b      	asrs	r3, r3, #4
 802504a:	73bb      	strb	r3, [r7, #14]
    uint8_t now_state = read_state_flags_ & 0x0F;
 802504c:	687b      	ldr	r3, [r7, #4]
 802504e:	781b      	ldrb	r3, [r3, #0]
 8025050:	f003 030f 	and.w	r3, r3, #15
 8025054:	737b      	strb	r3, [r7, #13]
    uint8_t count = master_count_;
 8025056:	687b      	ldr	r3, [r7, #4]
 8025058:	78db      	ldrb	r3, [r3, #3]
 802505a:	73fb      	strb	r3, [r7, #15]

    if(before_noise_state != now_state)
 802505c:	7bba      	ldrb	r2, [r7, #14]
 802505e:	7b7b      	ldrb	r3, [r7, #13]
 8025060:	429a      	cmp	r2, r3
 8025062:	d010      	beq.n	8025086 <_ZN10SideSensor12ConfirmStateEv+0x4a>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (now_state << 4);
 8025064:	687b      	ldr	r3, [r7, #4]
 8025066:	789b      	ldrb	r3, [r3, #2]
 8025068:	b25b      	sxtb	r3, r3
 802506a:	f003 030f 	and.w	r3, r3, #15
 802506e:	b25a      	sxtb	r2, r3
 8025070:	7b7b      	ldrb	r3, [r7, #13]
 8025072:	011b      	lsls	r3, r3, #4
 8025074:	b25b      	sxtb	r3, r3
 8025076:	4313      	orrs	r3, r2
 8025078:	b25b      	sxtb	r3, r3
 802507a:	b2da      	uxtb	r2, r3
 802507c:	687b      	ldr	r3, [r7, #4]
 802507e:	709a      	strb	r2, [r3, #2]
        count = 0;
 8025080:	2300      	movs	r3, #0
 8025082:	73fb      	strb	r3, [r7, #15]
 8025084:	e005      	b.n	8025092 <_ZN10SideSensor12ConfirmStateEv+0x56>
    }
    else if(count < MAX_INTERRUPT_COUNT) count++;
 8025086:	7bfb      	ldrb	r3, [r7, #15]
 8025088:	2bf9      	cmp	r3, #249	; 0xf9
 802508a:	d802      	bhi.n	8025092 <_ZN10SideSensor12ConfirmStateEv+0x56>
 802508c:	7bfb      	ldrb	r3, [r7, #15]
 802508e:	3301      	adds	r3, #1
 8025090:	73fb      	strb	r3, [r7, #15]

    master_count_ = count;
 8025092:	687b      	ldr	r3, [r7, #4]
 8025094:	7bfa      	ldrb	r2, [r7, #15]
 8025096:	70da      	strb	r2, [r3, #3]

    if(now_state == 0x08 && count >= BLACK_BLACK_COUNT)
 8025098:	7b7b      	ldrb	r3, [r7, #13]
 802509a:	2b08      	cmp	r3, #8
 802509c:	d10d      	bne.n	80250ba <_ZN10SideSensor12ConfirmStateEv+0x7e>
 802509e:	7bfb      	ldrb	r3, [r7, #15]
 80250a0:	2b01      	cmp	r3, #1
 80250a2:	d90a      	bls.n	80250ba <_ZN10SideSensor12ConfirmStateEv+0x7e>
    {
        write_state_flags_ = (write_state_flags_ & 0xF0) | 0x08;
 80250a4:	687b      	ldr	r3, [r7, #4]
 80250a6:	785b      	ldrb	r3, [r3, #1]
 80250a8:	f023 030f 	bic.w	r3, r3, #15
 80250ac:	b2db      	uxtb	r3, r3
 80250ae:	f043 0308 	orr.w	r3, r3, #8
 80250b2:	b2da      	uxtb	r2, r3
 80250b4:	687b      	ldr	r3, [r7, #4]
 80250b6:	705a      	strb	r2, [r3, #1]
 80250b8:	e029      	b.n	802510e <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x04 && count >= BLACK_WHITE_COUNT)
 80250ba:	7b7b      	ldrb	r3, [r7, #13]
 80250bc:	2b04      	cmp	r3, #4
 80250be:	d10a      	bne.n	80250d6 <_ZN10SideSensor12ConfirmStateEv+0x9a>
 80250c0:	7bfb      	ldrb	r3, [r7, #15]
 80250c2:	2b00      	cmp	r3, #0
 80250c4:	d007      	beq.n	80250d6 <_ZN10SideSensor12ConfirmStateEv+0x9a>
    {
        write_state_flags_ |= 0x04;
 80250c6:	687b      	ldr	r3, [r7, #4]
 80250c8:	785b      	ldrb	r3, [r3, #1]
 80250ca:	f043 0304 	orr.w	r3, r3, #4
 80250ce:	b2da      	uxtb	r2, r3
 80250d0:	687b      	ldr	r3, [r7, #4]
 80250d2:	705a      	strb	r2, [r3, #1]
 80250d4:	e01b      	b.n	802510e <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x02 && count >= WHITE_BLACK_COUNT)
 80250d6:	7b7b      	ldrb	r3, [r7, #13]
 80250d8:	2b02      	cmp	r3, #2
 80250da:	d10a      	bne.n	80250f2 <_ZN10SideSensor12ConfirmStateEv+0xb6>
 80250dc:	7bfb      	ldrb	r3, [r7, #15]
 80250de:	2b00      	cmp	r3, #0
 80250e0:	d007      	beq.n	80250f2 <_ZN10SideSensor12ConfirmStateEv+0xb6>
    {
        write_state_flags_ |= 0x02;
 80250e2:	687b      	ldr	r3, [r7, #4]
 80250e4:	785b      	ldrb	r3, [r3, #1]
 80250e6:	f043 0302 	orr.w	r3, r3, #2
 80250ea:	b2da      	uxtb	r2, r3
 80250ec:	687b      	ldr	r3, [r7, #4]
 80250ee:	705a      	strb	r2, [r3, #1]
 80250f0:	e00d      	b.n	802510e <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x01 && count >= WHITE_WHITE_COUNT)
 80250f2:	7b7b      	ldrb	r3, [r7, #13]
 80250f4:	2b01      	cmp	r3, #1
 80250f6:	d10a      	bne.n	802510e <_ZN10SideSensor12ConfirmStateEv+0xd2>
    {
        write_state_flags_ = (write_state_flags_ & 0xF8) | 0x01;
 80250f8:	687b      	ldr	r3, [r7, #4]
 80250fa:	785b      	ldrb	r3, [r3, #1]
 80250fc:	f023 0307 	bic.w	r3, r3, #7
 8025100:	b2db      	uxtb	r3, r3
 8025102:	f043 0301 	orr.w	r3, r3, #1
 8025106:	b2da      	uxtb	r2, r3
 8025108:	687b      	ldr	r3, [r7, #4]
 802510a:	705a      	strb	r2, [r3, #1]
    }
}
 802510c:	e7ff      	b.n	802510e <_ZN10SideSensor12ConfirmStateEv+0xd2>
 802510e:	bf00      	nop
 8025110:	3714      	adds	r7, #20
 8025112:	46bd      	mov	sp, r7
 8025114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025118:	4770      	bx	lr

0802511a <_ZN10SideSensor7CountUpEv>:

void SideSensor::CountUp()
{
 802511a:	b480      	push	{r7}
 802511c:	b085      	sub	sp, #20
 802511e:	af00      	add	r7, sp, #0
 8025120:	6078      	str	r0, [r7, #4]
    uint8_t state = write_state_flags_;
 8025122:	687b      	ldr	r3, [r7, #4]
 8025124:	785b      	ldrb	r3, [r3, #1]
 8025126:	73fb      	strb	r3, [r7, #15]
    uint8_t black_flag   = (state & 0x08) >> 3;
 8025128:	7bfb      	ldrb	r3, [r7, #15]
 802512a:	10db      	asrs	r3, r3, #3
 802512c:	b2db      	uxtb	r3, r3
 802512e:	f003 0301 	and.w	r3, r3, #1
 8025132:	73bb      	strb	r3, [r7, #14]
    uint8_t goal_flag    = (state & 0x04) >> 2;
 8025134:	7bfb      	ldrb	r3, [r7, #15]
 8025136:	109b      	asrs	r3, r3, #2
 8025138:	b2db      	uxtb	r3, r3
 802513a:	f003 0301 	and.w	r3, r3, #1
 802513e:	737b      	strb	r3, [r7, #13]
    uint8_t corner_flag  = (state & 0x02) >> 1;
 8025140:	7bfb      	ldrb	r3, [r7, #15]
 8025142:	105b      	asrs	r3, r3, #1
 8025144:	b2db      	uxtb	r3, r3
 8025146:	f003 0301 	and.w	r3, r3, #1
 802514a:	733b      	strb	r3, [r7, #12]
    uint8_t cross_flag   =  state & 0x01;
 802514c:	7bfb      	ldrb	r3, [r7, #15]
 802514e:	f003 0301 	and.w	r3, r3, #1
 8025152:	72fb      	strb	r3, [r7, #11]
    uint8_t goal_reach   = (state & 0x80) >> 7;
 8025154:	7bfb      	ldrb	r3, [r7, #15]
 8025156:	09db      	lsrs	r3, r3, #7
 8025158:	72bb      	strb	r3, [r7, #10]
    uint8_t corner_reach = (state & 0x40) >> 6;
 802515a:	7bfb      	ldrb	r3, [r7, #15]
 802515c:	119b      	asrs	r3, r3, #6
 802515e:	b2db      	uxtb	r3, r3
 8025160:	f003 0301 	and.w	r3, r3, #1
 8025164:	727b      	strb	r3, [r7, #9]
    uint8_t cross_reach  = (state & 0x20) >> 5;
 8025166:	7bfb      	ldrb	r3, [r7, #15]
 8025168:	115b      	asrs	r3, r3, #5
 802516a:	b2db      	uxtb	r3, r3
 802516c:	f003 0301 	and.w	r3, r3, #1
 8025170:	723b      	strb	r3, [r7, #8]

    if(cross_flag == 0x01 && black_flag == 0x01)
 8025172:	7afb      	ldrb	r3, [r7, #11]
 8025174:	2b01      	cmp	r3, #1
 8025176:	d10b      	bne.n	8025190 <_ZN10SideSensor7CountUpEv+0x76>
 8025178:	7bbb      	ldrb	r3, [r7, #14]
 802517a:	2b01      	cmp	r3, #1
 802517c:	d108      	bne.n	8025190 <_ZN10SideSensor7CountUpEv+0x76>
    {
        state &= 0xF7; // black_flag = false
 802517e:	7bfb      	ldrb	r3, [r7, #15]
 8025180:	f023 0308 	bic.w	r3, r3, #8
 8025184:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8025186:	7bfb      	ldrb	r3, [r7, #15]
 8025188:	f043 0320 	orr.w	r3, r3, #32
 802518c:	73fb      	strb	r3, [r7, #15]
 802518e:	e02d      	b.n	80251ec <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && goal_reach == 0x01)
 8025190:	7afb      	ldrb	r3, [r7, #11]
 8025192:	2b01      	cmp	r3, #1
 8025194:	d10b      	bne.n	80251ae <_ZN10SideSensor7CountUpEv+0x94>
 8025196:	7abb      	ldrb	r3, [r7, #10]
 8025198:	2b01      	cmp	r3, #1
 802519a:	d108      	bne.n	80251ae <_ZN10SideSensor7CountUpEv+0x94>
    {
        state &= 0x7F; // goal_reach = false
 802519c:	7bfb      	ldrb	r3, [r7, #15]
 802519e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80251a2:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 80251a4:	7bfb      	ldrb	r3, [r7, #15]
 80251a6:	f043 0320 	orr.w	r3, r3, #32
 80251aa:	73fb      	strb	r3, [r7, #15]
 80251ac:	e01e      	b.n	80251ec <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && corner_reach == 0x01)
 80251ae:	7afb      	ldrb	r3, [r7, #11]
 80251b0:	2b01      	cmp	r3, #1
 80251b2:	d10b      	bne.n	80251cc <_ZN10SideSensor7CountUpEv+0xb2>
 80251b4:	7a7b      	ldrb	r3, [r7, #9]
 80251b6:	2b01      	cmp	r3, #1
 80251b8:	d108      	bne.n	80251cc <_ZN10SideSensor7CountUpEv+0xb2>
    {
        state &= 0xBF; // corner_reach = false
 80251ba:	7bfb      	ldrb	r3, [r7, #15]
 80251bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80251c0:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 80251c2:	7bfb      	ldrb	r3, [r7, #15]
 80251c4:	f043 0320 	orr.w	r3, r3, #32
 80251c8:	73fb      	strb	r3, [r7, #15]
 80251ca:	e00f      	b.n	80251ec <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_reach == 0x01 && black_flag == 0x01)
 80251cc:	7a3b      	ldrb	r3, [r7, #8]
 80251ce:	2b01      	cmp	r3, #1
 80251d0:	d10c      	bne.n	80251ec <_ZN10SideSensor7CountUpEv+0xd2>
 80251d2:	7bbb      	ldrb	r3, [r7, #14]
 80251d4:	2b01      	cmp	r3, #1
 80251d6:	d109      	bne.n	80251ec <_ZN10SideSensor7CountUpEv+0xd2>
    {
        state &= 0xDF; // cross_reach = false
 80251d8:	7bfb      	ldrb	r3, [r7, #15]
 80251da:	f023 0320 	bic.w	r3, r3, #32
 80251de:	73fb      	strb	r3, [r7, #15]
        cross_line_count_++;
 80251e0:	687b      	ldr	r3, [r7, #4]
 80251e2:	799b      	ldrb	r3, [r3, #6]
 80251e4:	3301      	adds	r3, #1
 80251e6:	b2da      	uxtb	r2, r3
 80251e8:	687b      	ldr	r3, [r7, #4]
 80251ea:	719a      	strb	r2, [r3, #6]
    }

    black_flag   = (state & 0x08) >> 3;
 80251ec:	7bfb      	ldrb	r3, [r7, #15]
 80251ee:	10db      	asrs	r3, r3, #3
 80251f0:	b2db      	uxtb	r3, r3
 80251f2:	f003 0301 	and.w	r3, r3, #1
 80251f6:	73bb      	strb	r3, [r7, #14]
    goal_reach   = (state & 0x80) >> 7;
 80251f8:	7bfb      	ldrb	r3, [r7, #15]
 80251fa:	09db      	lsrs	r3, r3, #7
 80251fc:	72bb      	strb	r3, [r7, #10]
    corner_reach = (state & 0x40) >> 6;
 80251fe:	7bfb      	ldrb	r3, [r7, #15]
 8025200:	119b      	asrs	r3, r3, #6
 8025202:	b2db      	uxtb	r3, r3
 8025204:	f003 0301 	and.w	r3, r3, #1
 8025208:	727b      	strb	r3, [r7, #9]
    
    if(goal_flag == 0x01 && black_flag == 0x01)
 802520a:	7b7b      	ldrb	r3, [r7, #13]
 802520c:	2b01      	cmp	r3, #1
 802520e:	d10b      	bne.n	8025228 <_ZN10SideSensor7CountUpEv+0x10e>
 8025210:	7bbb      	ldrb	r3, [r7, #14]
 8025212:	2b01      	cmp	r3, #1
 8025214:	d108      	bne.n	8025228 <_ZN10SideSensor7CountUpEv+0x10e>
    {
        state &= 0xF7; // black_flag = false
 8025216:	7bfb      	ldrb	r3, [r7, #15]
 8025218:	f023 0308 	bic.w	r3, r3, #8
 802521c:	73fb      	strb	r3, [r7, #15]
        state |= 0x80; // goal_reach = true
 802521e:	7bfb      	ldrb	r3, [r7, #15]
 8025220:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8025224:	73fb      	strb	r3, [r7, #15]
 8025226:	e02f      	b.n	8025288 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(goal_reach == 0x01 && black_flag == 0x01)
 8025228:	7abb      	ldrb	r3, [r7, #10]
 802522a:	2b01      	cmp	r3, #1
 802522c:	d10d      	bne.n	802524a <_ZN10SideSensor7CountUpEv+0x130>
 802522e:	7bbb      	ldrb	r3, [r7, #14]
 8025230:	2b01      	cmp	r3, #1
 8025232:	d10a      	bne.n	802524a <_ZN10SideSensor7CountUpEv+0x130>
    {
        state &= 0x7F; // goal_reach = false
 8025234:	7bfb      	ldrb	r3, [r7, #15]
 8025236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802523a:	73fb      	strb	r3, [r7, #15]
        goal_marker_count_++;
 802523c:	687b      	ldr	r3, [r7, #4]
 802523e:	791b      	ldrb	r3, [r3, #4]
 8025240:	3301      	adds	r3, #1
 8025242:	b2da      	uxtb	r2, r3
 8025244:	687b      	ldr	r3, [r7, #4]
 8025246:	711a      	strb	r2, [r3, #4]
 8025248:	e01e      	b.n	8025288 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_flag == 0x01 && black_flag == 0x01)
 802524a:	7b3b      	ldrb	r3, [r7, #12]
 802524c:	2b01      	cmp	r3, #1
 802524e:	d10b      	bne.n	8025268 <_ZN10SideSensor7CountUpEv+0x14e>
 8025250:	7bbb      	ldrb	r3, [r7, #14]
 8025252:	2b01      	cmp	r3, #1
 8025254:	d108      	bne.n	8025268 <_ZN10SideSensor7CountUpEv+0x14e>
    {
        state &= 0xF7; // black_flag = false
 8025256:	7bfb      	ldrb	r3, [r7, #15]
 8025258:	f023 0308 	bic.w	r3, r3, #8
 802525c:	73fb      	strb	r3, [r7, #15]
        state |= 0x40; // corner_reach = true
 802525e:	7bfb      	ldrb	r3, [r7, #15]
 8025260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025264:	73fb      	strb	r3, [r7, #15]
 8025266:	e00f      	b.n	8025288 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_reach == 0x01 && black_flag == 0x01)
 8025268:	7a7b      	ldrb	r3, [r7, #9]
 802526a:	2b01      	cmp	r3, #1
 802526c:	d10c      	bne.n	8025288 <_ZN10SideSensor7CountUpEv+0x16e>
 802526e:	7bbb      	ldrb	r3, [r7, #14]
 8025270:	2b01      	cmp	r3, #1
 8025272:	d109      	bne.n	8025288 <_ZN10SideSensor7CountUpEv+0x16e>
    {
        state &= 0xBF; // corner_reach = false
 8025274:	7bfb      	ldrb	r3, [r7, #15]
 8025276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802527a:	73fb      	strb	r3, [r7, #15]
        corner_marker_count_++;
 802527c:	687b      	ldr	r3, [r7, #4]
 802527e:	795b      	ldrb	r3, [r3, #5]
 8025280:	3301      	adds	r3, #1
 8025282:	b2da      	uxtb	r2, r3
 8025284:	687b      	ldr	r3, [r7, #4]
 8025286:	715a      	strb	r2, [r3, #5]
    }

    write_state_flags_ = state;
 8025288:	687b      	ldr	r3, [r7, #4]
 802528a:	7bfa      	ldrb	r2, [r7, #15]
 802528c:	705a      	strb	r2, [r3, #1]
}
 802528e:	bf00      	nop
 8025290:	3714      	adds	r7, #20
 8025292:	46bd      	mov	sp, r7
 8025294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025298:	4770      	bx	lr

0802529a <_ZN10SideSensor18GetGoalMarkerCountEv>:

uint8_t SideSensor::GetGoalMarkerCount()
{
 802529a:	b480      	push	{r7}
 802529c:	b083      	sub	sp, #12
 802529e:	af00      	add	r7, sp, #0
 80252a0:	6078      	str	r0, [r7, #4]
    return goal_marker_count_;
 80252a2:	687b      	ldr	r3, [r7, #4]
 80252a4:	791b      	ldrb	r3, [r3, #4]
}
 80252a6:	4618      	mov	r0, r3
 80252a8:	370c      	adds	r7, #12
 80252aa:	46bd      	mov	sp, r7
 80252ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252b0:	4770      	bx	lr

080252b2 <_ZN10SideSensor20GetCornerMarkerCountEv>:

uint8_t SideSensor::GetCornerMarkerCount()
{
 80252b2:	b480      	push	{r7}
 80252b4:	b083      	sub	sp, #12
 80252b6:	af00      	add	r7, sp, #0
 80252b8:	6078      	str	r0, [r7, #4]
    return corner_marker_count_;
 80252ba:	687b      	ldr	r3, [r7, #4]
 80252bc:	795b      	ldrb	r3, [r3, #5]
}
 80252be:	4618      	mov	r0, r3
 80252c0:	370c      	adds	r7, #12
 80252c2:	46bd      	mov	sp, r7
 80252c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252c8:	4770      	bx	lr

080252ca <_ZN10SideSensor17GetCrossLineCountEv>:

uint8_t SideSensor::GetCrossLineCount()
{
 80252ca:	b480      	push	{r7}
 80252cc:	b083      	sub	sp, #12
 80252ce:	af00      	add	r7, sp, #0
 80252d0:	6078      	str	r0, [r7, #4]
    return cross_line_count_;
 80252d2:	687b      	ldr	r3, [r7, #4]
 80252d4:	799b      	ldrb	r3, [r3, #6]
}
 80252d6:	4618      	mov	r0, r3
 80252d8:	370c      	adds	r7, #12
 80252da:	46bd      	mov	sp, r7
 80252dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252e0:	4770      	bx	lr
	...

080252e4 <_ZN10SideSensor7MonitorEv>:

#ifdef DEBUG_MODE
void SideSensor::Monitor()
{
 80252e4:	b480      	push	{r7}
 80252e6:	b083      	sub	sp, #12
 80252e8:	af00      	add	r7, sp, #0
 80252ea:	6078      	str	r0, [r7, #4]
    /* read_state_flags_ */
    g_side_pre_state = (read_state_flags_ & 0xF0) >> 4;
 80252ec:	687b      	ldr	r3, [r7, #4]
 80252ee:	781b      	ldrb	r3, [r3, #0]
 80252f0:	091b      	lsrs	r3, r3, #4
 80252f2:	b2da      	uxtb	r2, r3
 80252f4:	4b3a      	ldr	r3, [pc, #232]	; (80253e0 <_ZN10SideSensor7MonitorEv+0xfc>)
 80252f6:	701a      	strb	r2, [r3, #0]
    g_side_now_state =  read_state_flags_ & 0x0F;
 80252f8:	687b      	ldr	r3, [r7, #4]
 80252fa:	781b      	ldrb	r3, [r3, #0]
 80252fc:	f003 030f 	and.w	r3, r3, #15
 8025300:	b2da      	uxtb	r2, r3
 8025302:	4b38      	ldr	r3, [pc, #224]	; (80253e4 <_ZN10SideSensor7MonitorEv+0x100>)
 8025304:	701a      	strb	r2, [r3, #0]

    if(g_side_pre_state != g_side_now_state) g_side_change_state_count++;
 8025306:	4b36      	ldr	r3, [pc, #216]	; (80253e0 <_ZN10SideSensor7MonitorEv+0xfc>)
 8025308:	781a      	ldrb	r2, [r3, #0]
 802530a:	4b36      	ldr	r3, [pc, #216]	; (80253e4 <_ZN10SideSensor7MonitorEv+0x100>)
 802530c:	781b      	ldrb	r3, [r3, #0]
 802530e:	429a      	cmp	r2, r3
 8025310:	d004      	beq.n	802531c <_ZN10SideSensor7MonitorEv+0x38>
 8025312:	4b35      	ldr	r3, [pc, #212]	; (80253e8 <_ZN10SideSensor7MonitorEv+0x104>)
 8025314:	681b      	ldr	r3, [r3, #0]
 8025316:	3301      	adds	r3, #1
 8025318:	4a33      	ldr	r2, [pc, #204]	; (80253e8 <_ZN10SideSensor7MonitorEv+0x104>)
 802531a:	6013      	str	r3, [r2, #0]

    /* write_state_flags_ upper bit */
    g_side_goal_reach   = (write_state_flags_ & 0x80) >> 7;
 802531c:	687b      	ldr	r3, [r7, #4]
 802531e:	785b      	ldrb	r3, [r3, #1]
 8025320:	09db      	lsrs	r3, r3, #7
 8025322:	b2da      	uxtb	r2, r3
 8025324:	4b31      	ldr	r3, [pc, #196]	; (80253ec <_ZN10SideSensor7MonitorEv+0x108>)
 8025326:	701a      	strb	r2, [r3, #0]
    g_side_corner_reach = (write_state_flags_ & 0x40) >> 6;
 8025328:	687b      	ldr	r3, [r7, #4]
 802532a:	785b      	ldrb	r3, [r3, #1]
 802532c:	119b      	asrs	r3, r3, #6
 802532e:	b2db      	uxtb	r3, r3
 8025330:	f003 0301 	and.w	r3, r3, #1
 8025334:	b2da      	uxtb	r2, r3
 8025336:	4b2e      	ldr	r3, [pc, #184]	; (80253f0 <_ZN10SideSensor7MonitorEv+0x10c>)
 8025338:	701a      	strb	r2, [r3, #0]
    g_side_cross_reach  = (write_state_flags_ & 0x20) >> 5;
 802533a:	687b      	ldr	r3, [r7, #4]
 802533c:	785b      	ldrb	r3, [r3, #1]
 802533e:	115b      	asrs	r3, r3, #5
 8025340:	b2db      	uxtb	r3, r3
 8025342:	f003 0301 	and.w	r3, r3, #1
 8025346:	b2da      	uxtb	r2, r3
 8025348:	4b2a      	ldr	r3, [pc, #168]	; (80253f4 <_ZN10SideSensor7MonitorEv+0x110>)
 802534a:	701a      	strb	r2, [r3, #0]

    /* write_state_flags_ lower bit */
    g_side_black_flag  = (write_state_flags_ & 0x08) >> 3;
 802534c:	687b      	ldr	r3, [r7, #4]
 802534e:	785b      	ldrb	r3, [r3, #1]
 8025350:	10db      	asrs	r3, r3, #3
 8025352:	b2db      	uxtb	r3, r3
 8025354:	f003 0301 	and.w	r3, r3, #1
 8025358:	b2da      	uxtb	r2, r3
 802535a:	4b27      	ldr	r3, [pc, #156]	; (80253f8 <_ZN10SideSensor7MonitorEv+0x114>)
 802535c:	701a      	strb	r2, [r3, #0]
    g_side_goal_flag   = (write_state_flags_ & 0x04) >> 2;
 802535e:	687b      	ldr	r3, [r7, #4]
 8025360:	785b      	ldrb	r3, [r3, #1]
 8025362:	109b      	asrs	r3, r3, #2
 8025364:	b2db      	uxtb	r3, r3
 8025366:	f003 0301 	and.w	r3, r3, #1
 802536a:	b2da      	uxtb	r2, r3
 802536c:	4b23      	ldr	r3, [pc, #140]	; (80253fc <_ZN10SideSensor7MonitorEv+0x118>)
 802536e:	701a      	strb	r2, [r3, #0]
    g_side_corner_flag = (write_state_flags_ & 0x02) >> 1;
 8025370:	687b      	ldr	r3, [r7, #4]
 8025372:	785b      	ldrb	r3, [r3, #1]
 8025374:	105b      	asrs	r3, r3, #1
 8025376:	b2db      	uxtb	r3, r3
 8025378:	f003 0301 	and.w	r3, r3, #1
 802537c:	b2da      	uxtb	r2, r3
 802537e:	4b20      	ldr	r3, [pc, #128]	; (8025400 <_ZN10SideSensor7MonitorEv+0x11c>)
 8025380:	701a      	strb	r2, [r3, #0]
    g_side_cross_flag  =  write_state_flags_ & 0x01;
 8025382:	687b      	ldr	r3, [r7, #4]
 8025384:	785b      	ldrb	r3, [r3, #1]
 8025386:	f003 0301 	and.w	r3, r3, #1
 802538a:	b2da      	uxtb	r2, r3
 802538c:	4b1d      	ldr	r3, [pc, #116]	; (8025404 <_ZN10SideSensor7MonitorEv+0x120>)
 802538e:	701a      	strb	r2, [r3, #0]

    /* exception_flags_ */
    g_side_before_noise_state = (exception_flags_ & 0xF0) >> 4;
 8025390:	687b      	ldr	r3, [r7, #4]
 8025392:	789b      	ldrb	r3, [r3, #2]
 8025394:	091b      	lsrs	r3, r3, #4
 8025396:	b2da      	uxtb	r2, r3
 8025398:	4b1b      	ldr	r3, [pc, #108]	; (8025408 <_ZN10SideSensor7MonitorEv+0x124>)
 802539a:	701a      	strb	r2, [r3, #0]
    g_side_noise_count        = (exception_flags_ & 0x0C) >> 2;
 802539c:	687b      	ldr	r3, [r7, #4]
 802539e:	789b      	ldrb	r3, [r3, #2]
 80253a0:	109b      	asrs	r3, r3, #2
 80253a2:	b2db      	uxtb	r3, r3
 80253a4:	f003 0303 	and.w	r3, r3, #3
 80253a8:	b2da      	uxtb	r2, r3
 80253aa:	4b18      	ldr	r3, [pc, #96]	; (802540c <_ZN10SideSensor7MonitorEv+0x128>)
 80253ac:	701a      	strb	r2, [r3, #0]
    g_side_ignore_flag        =  exception_flags_ & 0x01;
 80253ae:	687b      	ldr	r3, [r7, #4]
 80253b0:	789b      	ldrb	r3, [r3, #2]
 80253b2:	f003 0301 	and.w	r3, r3, #1
 80253b6:	b2da      	uxtb	r2, r3
 80253b8:	4b15      	ldr	r3, [pc, #84]	; (8025410 <_ZN10SideSensor7MonitorEv+0x12c>)
 80253ba:	701a      	strb	r2, [r3, #0]

    g_goal_count   = goal_marker_count_;
 80253bc:	687b      	ldr	r3, [r7, #4]
 80253be:	791a      	ldrb	r2, [r3, #4]
 80253c0:	4b14      	ldr	r3, [pc, #80]	; (8025414 <_ZN10SideSensor7MonitorEv+0x130>)
 80253c2:	701a      	strb	r2, [r3, #0]
    g_corner_count = corner_marker_count_;
 80253c4:	687b      	ldr	r3, [r7, #4]
 80253c6:	795a      	ldrb	r2, [r3, #5]
 80253c8:	4b13      	ldr	r3, [pc, #76]	; (8025418 <_ZN10SideSensor7MonitorEv+0x134>)
 80253ca:	701a      	strb	r2, [r3, #0]
    g_cross_count  = cross_line_count_;
 80253cc:	687b      	ldr	r3, [r7, #4]
 80253ce:	799a      	ldrb	r2, [r3, #6]
 80253d0:	4b12      	ldr	r3, [pc, #72]	; (802541c <_ZN10SideSensor7MonitorEv+0x138>)
 80253d2:	701a      	strb	r2, [r3, #0]
}
 80253d4:	bf00      	nop
 80253d6:	370c      	adds	r7, #12
 80253d8:	46bd      	mov	sp, r7
 80253da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253de:	4770      	bx	lr
 80253e0:	20000234 	.word	0x20000234
 80253e4:	20000235 	.word	0x20000235
 80253e8:	20000238 	.word	0x20000238
 80253ec:	2000023c 	.word	0x2000023c
 80253f0:	2000023d 	.word	0x2000023d
 80253f4:	2000023e 	.word	0x2000023e
 80253f8:	2000023f 	.word	0x2000023f
 80253fc:	20000240 	.word	0x20000240
 8025400:	20000241 	.word	0x20000241
 8025404:	20000242 	.word	0x20000242
 8025408:	20000243 	.word	0x20000243
 802540c:	20000244 	.word	0x20000244
 8025410:	20000245 	.word	0x20000245
 8025414:	20000246 	.word	0x20000246
 8025418:	20000247 	.word	0x20000247
 802541c:	20000248 	.word	0x20000248

08025420 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8025420:	b480      	push	{r7}
 8025422:	b083      	sub	sp, #12
 8025424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8025426:	2300      	movs	r3, #0
 8025428:	607b      	str	r3, [r7, #4]
 802542a:	4b10      	ldr	r3, [pc, #64]	; (802546c <HAL_MspInit+0x4c>)
 802542c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802542e:	4a0f      	ldr	r2, [pc, #60]	; (802546c <HAL_MspInit+0x4c>)
 8025430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025434:	6453      	str	r3, [r2, #68]	; 0x44
 8025436:	4b0d      	ldr	r3, [pc, #52]	; (802546c <HAL_MspInit+0x4c>)
 8025438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802543a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802543e:	607b      	str	r3, [r7, #4]
 8025440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8025442:	2300      	movs	r3, #0
 8025444:	603b      	str	r3, [r7, #0]
 8025446:	4b09      	ldr	r3, [pc, #36]	; (802546c <HAL_MspInit+0x4c>)
 8025448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802544a:	4a08      	ldr	r2, [pc, #32]	; (802546c <HAL_MspInit+0x4c>)
 802544c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8025450:	6413      	str	r3, [r2, #64]	; 0x40
 8025452:	4b06      	ldr	r3, [pc, #24]	; (802546c <HAL_MspInit+0x4c>)
 8025454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802545a:	603b      	str	r3, [r7, #0]
 802545c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802545e:	bf00      	nop
 8025460:	370c      	adds	r7, #12
 8025462:	46bd      	mov	sp, r7
 8025464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025468:	4770      	bx	lr
 802546a:	bf00      	nop
 802546c:	40023800 	.word	0x40023800

08025470 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8025470:	b580      	push	{r7, lr}
 8025472:	b08a      	sub	sp, #40	; 0x28
 8025474:	af00      	add	r7, sp, #0
 8025476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025478:	f107 0314 	add.w	r3, r7, #20
 802547c:	2200      	movs	r2, #0
 802547e:	601a      	str	r2, [r3, #0]
 8025480:	605a      	str	r2, [r3, #4]
 8025482:	609a      	str	r2, [r3, #8]
 8025484:	60da      	str	r2, [r3, #12]
 8025486:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8025488:	687b      	ldr	r3, [r7, #4]
 802548a:	681b      	ldr	r3, [r3, #0]
 802548c:	4a3c      	ldr	r2, [pc, #240]	; (8025580 <HAL_ADC_MspInit+0x110>)
 802548e:	4293      	cmp	r3, r2
 8025490:	d171      	bne.n	8025576 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8025492:	2300      	movs	r3, #0
 8025494:	613b      	str	r3, [r7, #16]
 8025496:	4b3b      	ldr	r3, [pc, #236]	; (8025584 <HAL_ADC_MspInit+0x114>)
 8025498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802549a:	4a3a      	ldr	r2, [pc, #232]	; (8025584 <HAL_ADC_MspInit+0x114>)
 802549c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80254a0:	6453      	str	r3, [r2, #68]	; 0x44
 80254a2:	4b38      	ldr	r3, [pc, #224]	; (8025584 <HAL_ADC_MspInit+0x114>)
 80254a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80254a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80254aa:	613b      	str	r3, [r7, #16]
 80254ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80254ae:	2300      	movs	r3, #0
 80254b0:	60fb      	str	r3, [r7, #12]
 80254b2:	4b34      	ldr	r3, [pc, #208]	; (8025584 <HAL_ADC_MspInit+0x114>)
 80254b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80254b6:	4a33      	ldr	r2, [pc, #204]	; (8025584 <HAL_ADC_MspInit+0x114>)
 80254b8:	f043 0304 	orr.w	r3, r3, #4
 80254bc:	6313      	str	r3, [r2, #48]	; 0x30
 80254be:	4b31      	ldr	r3, [pc, #196]	; (8025584 <HAL_ADC_MspInit+0x114>)
 80254c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80254c2:	f003 0304 	and.w	r3, r3, #4
 80254c6:	60fb      	str	r3, [r7, #12]
 80254c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80254ca:	2300      	movs	r3, #0
 80254cc:	60bb      	str	r3, [r7, #8]
 80254ce:	4b2d      	ldr	r3, [pc, #180]	; (8025584 <HAL_ADC_MspInit+0x114>)
 80254d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80254d2:	4a2c      	ldr	r2, [pc, #176]	; (8025584 <HAL_ADC_MspInit+0x114>)
 80254d4:	f043 0301 	orr.w	r3, r3, #1
 80254d8:	6313      	str	r3, [r2, #48]	; 0x30
 80254da:	4b2a      	ldr	r3, [pc, #168]	; (8025584 <HAL_ADC_MspInit+0x114>)
 80254dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80254de:	f003 0301 	and.w	r3, r3, #1
 80254e2:	60bb      	str	r3, [r7, #8]
 80254e4:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80254e6:	233f      	movs	r3, #63	; 0x3f
 80254e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80254ea:	2303      	movs	r3, #3
 80254ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80254ee:	2300      	movs	r3, #0
 80254f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80254f2:	f107 0314 	add.w	r3, r7, #20
 80254f6:	4619      	mov	r1, r3
 80254f8:	4823      	ldr	r0, [pc, #140]	; (8025588 <HAL_ADC_MspInit+0x118>)
 80254fa:	f002 f9a5 	bl	8027848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80254fe:	23ff      	movs	r3, #255	; 0xff
 8025500:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8025502:	2303      	movs	r3, #3
 8025504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025506:	2300      	movs	r3, #0
 8025508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802550a:	f107 0314 	add.w	r3, r7, #20
 802550e:	4619      	mov	r1, r3
 8025510:	481e      	ldr	r0, [pc, #120]	; (802558c <HAL_ADC_MspInit+0x11c>)
 8025512:	f002 f999 	bl	8027848 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8025516:	4b1e      	ldr	r3, [pc, #120]	; (8025590 <HAL_ADC_MspInit+0x120>)
 8025518:	4a1e      	ldr	r2, [pc, #120]	; (8025594 <HAL_ADC_MspInit+0x124>)
 802551a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 802551c:	4b1c      	ldr	r3, [pc, #112]	; (8025590 <HAL_ADC_MspInit+0x120>)
 802551e:	2200      	movs	r2, #0
 8025520:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8025522:	4b1b      	ldr	r3, [pc, #108]	; (8025590 <HAL_ADC_MspInit+0x120>)
 8025524:	2200      	movs	r2, #0
 8025526:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8025528:	4b19      	ldr	r3, [pc, #100]	; (8025590 <HAL_ADC_MspInit+0x120>)
 802552a:	2200      	movs	r2, #0
 802552c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 802552e:	4b18      	ldr	r3, [pc, #96]	; (8025590 <HAL_ADC_MspInit+0x120>)
 8025530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025534:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8025536:	4b16      	ldr	r3, [pc, #88]	; (8025590 <HAL_ADC_MspInit+0x120>)
 8025538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802553c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 802553e:	4b14      	ldr	r3, [pc, #80]	; (8025590 <HAL_ADC_MspInit+0x120>)
 8025540:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8025544:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8025546:	4b12      	ldr	r3, [pc, #72]	; (8025590 <HAL_ADC_MspInit+0x120>)
 8025548:	f44f 7280 	mov.w	r2, #256	; 0x100
 802554c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 802554e:	4b10      	ldr	r3, [pc, #64]	; (8025590 <HAL_ADC_MspInit+0x120>)
 8025550:	2200      	movs	r2, #0
 8025552:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8025554:	4b0e      	ldr	r3, [pc, #56]	; (8025590 <HAL_ADC_MspInit+0x120>)
 8025556:	2200      	movs	r2, #0
 8025558:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 802555a:	480d      	ldr	r0, [pc, #52]	; (8025590 <HAL_ADC_MspInit+0x120>)
 802555c:	f001 fb30 	bl	8026bc0 <HAL_DMA_Init>
 8025560:	4603      	mov	r3, r0
 8025562:	2b00      	cmp	r3, #0
 8025564:	d001      	beq.n	802556a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8025566:	f7fe fb9f 	bl	8023ca8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 802556a:	687b      	ldr	r3, [r7, #4]
 802556c:	4a08      	ldr	r2, [pc, #32]	; (8025590 <HAL_ADC_MspInit+0x120>)
 802556e:	639a      	str	r2, [r3, #56]	; 0x38
 8025570:	4a07      	ldr	r2, [pc, #28]	; (8025590 <HAL_ADC_MspInit+0x120>)
 8025572:	687b      	ldr	r3, [r7, #4]
 8025574:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8025576:	bf00      	nop
 8025578:	3728      	adds	r7, #40	; 0x28
 802557a:	46bd      	mov	sp, r7
 802557c:	bd80      	pop	{r7, pc}
 802557e:	bf00      	nop
 8025580:	40012000 	.word	0x40012000
 8025584:	40023800 	.word	0x40023800
 8025588:	40020800 	.word	0x40020800
 802558c:	40020000 	.word	0x40020000
 8025590:	20000820 	.word	0x20000820
 8025594:	40026410 	.word	0x40026410

08025598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8025598:	b580      	push	{r7, lr}
 802559a:	b08a      	sub	sp, #40	; 0x28
 802559c:	af00      	add	r7, sp, #0
 802559e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80255a0:	f107 0314 	add.w	r3, r7, #20
 80255a4:	2200      	movs	r2, #0
 80255a6:	601a      	str	r2, [r3, #0]
 80255a8:	605a      	str	r2, [r3, #4]
 80255aa:	609a      	str	r2, [r3, #8]
 80255ac:	60da      	str	r2, [r3, #12]
 80255ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80255b0:	687b      	ldr	r3, [r7, #4]
 80255b2:	681b      	ldr	r3, [r3, #0]
 80255b4:	4a19      	ldr	r2, [pc, #100]	; (802561c <HAL_I2C_MspInit+0x84>)
 80255b6:	4293      	cmp	r3, r2
 80255b8:	d12c      	bne.n	8025614 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80255ba:	2300      	movs	r3, #0
 80255bc:	613b      	str	r3, [r7, #16]
 80255be:	4b18      	ldr	r3, [pc, #96]	; (8025620 <HAL_I2C_MspInit+0x88>)
 80255c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80255c2:	4a17      	ldr	r2, [pc, #92]	; (8025620 <HAL_I2C_MspInit+0x88>)
 80255c4:	f043 0302 	orr.w	r3, r3, #2
 80255c8:	6313      	str	r3, [r2, #48]	; 0x30
 80255ca:	4b15      	ldr	r3, [pc, #84]	; (8025620 <HAL_I2C_MspInit+0x88>)
 80255cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80255ce:	f003 0302 	and.w	r3, r3, #2
 80255d2:	613b      	str	r3, [r7, #16]
 80255d4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80255d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80255da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80255dc:	2312      	movs	r3, #18
 80255de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80255e0:	2301      	movs	r3, #1
 80255e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80255e4:	2303      	movs	r3, #3
 80255e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80255e8:	2304      	movs	r3, #4
 80255ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80255ec:	f107 0314 	add.w	r3, r7, #20
 80255f0:	4619      	mov	r1, r3
 80255f2:	480c      	ldr	r0, [pc, #48]	; (8025624 <HAL_I2C_MspInit+0x8c>)
 80255f4:	f002 f928 	bl	8027848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80255f8:	2300      	movs	r3, #0
 80255fa:	60fb      	str	r3, [r7, #12]
 80255fc:	4b08      	ldr	r3, [pc, #32]	; (8025620 <HAL_I2C_MspInit+0x88>)
 80255fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025600:	4a07      	ldr	r2, [pc, #28]	; (8025620 <HAL_I2C_MspInit+0x88>)
 8025602:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8025606:	6413      	str	r3, [r2, #64]	; 0x40
 8025608:	4b05      	ldr	r3, [pc, #20]	; (8025620 <HAL_I2C_MspInit+0x88>)
 802560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802560c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8025610:	60fb      	str	r3, [r7, #12]
 8025612:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8025614:	bf00      	nop
 8025616:	3728      	adds	r7, #40	; 0x28
 8025618:	46bd      	mov	sp, r7
 802561a:	bd80      	pop	{r7, pc}
 802561c:	40005800 	.word	0x40005800
 8025620:	40023800 	.word	0x40023800
 8025624:	40020400 	.word	0x40020400

08025628 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8025628:	b580      	push	{r7, lr}
 802562a:	b08a      	sub	sp, #40	; 0x28
 802562c:	af00      	add	r7, sp, #0
 802562e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025630:	f107 0314 	add.w	r3, r7, #20
 8025634:	2200      	movs	r2, #0
 8025636:	601a      	str	r2, [r3, #0]
 8025638:	605a      	str	r2, [r3, #4]
 802563a:	609a      	str	r2, [r3, #8]
 802563c:	60da      	str	r2, [r3, #12]
 802563e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8025640:	687b      	ldr	r3, [r7, #4]
 8025642:	681b      	ldr	r3, [r3, #0]
 8025644:	4a19      	ldr	r2, [pc, #100]	; (80256ac <HAL_SPI_MspInit+0x84>)
 8025646:	4293      	cmp	r3, r2
 8025648:	d12c      	bne.n	80256a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 802564a:	2300      	movs	r3, #0
 802564c:	613b      	str	r3, [r7, #16]
 802564e:	4b18      	ldr	r3, [pc, #96]	; (80256b0 <HAL_SPI_MspInit+0x88>)
 8025650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025652:	4a17      	ldr	r2, [pc, #92]	; (80256b0 <HAL_SPI_MspInit+0x88>)
 8025654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8025658:	6413      	str	r3, [r2, #64]	; 0x40
 802565a:	4b15      	ldr	r3, [pc, #84]	; (80256b0 <HAL_SPI_MspInit+0x88>)
 802565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802565e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8025662:	613b      	str	r3, [r7, #16]
 8025664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025666:	2300      	movs	r3, #0
 8025668:	60fb      	str	r3, [r7, #12]
 802566a:	4b11      	ldr	r3, [pc, #68]	; (80256b0 <HAL_SPI_MspInit+0x88>)
 802566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802566e:	4a10      	ldr	r2, [pc, #64]	; (80256b0 <HAL_SPI_MspInit+0x88>)
 8025670:	f043 0304 	orr.w	r3, r3, #4
 8025674:	6313      	str	r3, [r2, #48]	; 0x30
 8025676:	4b0e      	ldr	r3, [pc, #56]	; (80256b0 <HAL_SPI_MspInit+0x88>)
 8025678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802567a:	f003 0304 	and.w	r3, r3, #4
 802567e:	60fb      	str	r3, [r7, #12]
 8025680:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8025682:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8025686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025688:	2302      	movs	r3, #2
 802568a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802568c:	2300      	movs	r3, #0
 802568e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025690:	2303      	movs	r3, #3
 8025692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8025694:	2306      	movs	r3, #6
 8025696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025698:	f107 0314 	add.w	r3, r7, #20
 802569c:	4619      	mov	r1, r3
 802569e:	4805      	ldr	r0, [pc, #20]	; (80256b4 <HAL_SPI_MspInit+0x8c>)
 80256a0:	f002 f8d2 	bl	8027848 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80256a4:	bf00      	nop
 80256a6:	3728      	adds	r7, #40	; 0x28
 80256a8:	46bd      	mov	sp, r7
 80256aa:	bd80      	pop	{r7, pc}
 80256ac:	40003c00 	.word	0x40003c00
 80256b0:	40023800 	.word	0x40023800
 80256b4:	40020800 	.word	0x40020800

080256b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80256b8:	b480      	push	{r7}
 80256ba:	b087      	sub	sp, #28
 80256bc:	af00      	add	r7, sp, #0
 80256be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80256c0:	687b      	ldr	r3, [r7, #4]
 80256c2:	681b      	ldr	r3, [r3, #0]
 80256c4:	4a1f      	ldr	r2, [pc, #124]	; (8025744 <HAL_TIM_PWM_MspInit+0x8c>)
 80256c6:	4293      	cmp	r3, r2
 80256c8:	d10e      	bne.n	80256e8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80256ca:	2300      	movs	r3, #0
 80256cc:	617b      	str	r3, [r7, #20]
 80256ce:	4b1e      	ldr	r3, [pc, #120]	; (8025748 <HAL_TIM_PWM_MspInit+0x90>)
 80256d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80256d2:	4a1d      	ldr	r2, [pc, #116]	; (8025748 <HAL_TIM_PWM_MspInit+0x90>)
 80256d4:	f043 0301 	orr.w	r3, r3, #1
 80256d8:	6453      	str	r3, [r2, #68]	; 0x44
 80256da:	4b1b      	ldr	r3, [pc, #108]	; (8025748 <HAL_TIM_PWM_MspInit+0x90>)
 80256dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80256de:	f003 0301 	and.w	r3, r3, #1
 80256e2:	617b      	str	r3, [r7, #20]
 80256e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80256e6:	e026      	b.n	8025736 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80256e8:	687b      	ldr	r3, [r7, #4]
 80256ea:	681b      	ldr	r3, [r3, #0]
 80256ec:	4a17      	ldr	r2, [pc, #92]	; (802574c <HAL_TIM_PWM_MspInit+0x94>)
 80256ee:	4293      	cmp	r3, r2
 80256f0:	d10e      	bne.n	8025710 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80256f2:	2300      	movs	r3, #0
 80256f4:	613b      	str	r3, [r7, #16]
 80256f6:	4b14      	ldr	r3, [pc, #80]	; (8025748 <HAL_TIM_PWM_MspInit+0x90>)
 80256f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80256fa:	4a13      	ldr	r2, [pc, #76]	; (8025748 <HAL_TIM_PWM_MspInit+0x90>)
 80256fc:	f043 0302 	orr.w	r3, r3, #2
 8025700:	6413      	str	r3, [r2, #64]	; 0x40
 8025702:	4b11      	ldr	r3, [pc, #68]	; (8025748 <HAL_TIM_PWM_MspInit+0x90>)
 8025704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025706:	f003 0302 	and.w	r3, r3, #2
 802570a:	613b      	str	r3, [r7, #16]
 802570c:	693b      	ldr	r3, [r7, #16]
}
 802570e:	e012      	b.n	8025736 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8025710:	687b      	ldr	r3, [r7, #4]
 8025712:	681b      	ldr	r3, [r3, #0]
 8025714:	4a0e      	ldr	r2, [pc, #56]	; (8025750 <HAL_TIM_PWM_MspInit+0x98>)
 8025716:	4293      	cmp	r3, r2
 8025718:	d10d      	bne.n	8025736 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 802571a:	2300      	movs	r3, #0
 802571c:	60fb      	str	r3, [r7, #12]
 802571e:	4b0a      	ldr	r3, [pc, #40]	; (8025748 <HAL_TIM_PWM_MspInit+0x90>)
 8025720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025722:	4a09      	ldr	r2, [pc, #36]	; (8025748 <HAL_TIM_PWM_MspInit+0x90>)
 8025724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025728:	6413      	str	r3, [r2, #64]	; 0x40
 802572a:	4b07      	ldr	r3, [pc, #28]	; (8025748 <HAL_TIM_PWM_MspInit+0x90>)
 802572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802572e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025732:	60fb      	str	r3, [r7, #12]
 8025734:	68fb      	ldr	r3, [r7, #12]
}
 8025736:	bf00      	nop
 8025738:	371c      	adds	r7, #28
 802573a:	46bd      	mov	sp, r7
 802573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025740:	4770      	bx	lr
 8025742:	bf00      	nop
 8025744:	40010000 	.word	0x40010000
 8025748:	40023800 	.word	0x40023800
 802574c:	40000400 	.word	0x40000400
 8025750:	40001800 	.word	0x40001800

08025754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8025754:	b580      	push	{r7, lr}
 8025756:	b088      	sub	sp, #32
 8025758:	af00      	add	r7, sp, #0
 802575a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 802575c:	687b      	ldr	r3, [r7, #4]
 802575e:	681b      	ldr	r3, [r3, #0]
 8025760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8025764:	d116      	bne.n	8025794 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8025766:	2300      	movs	r3, #0
 8025768:	61fb      	str	r3, [r7, #28]
 802576a:	4b40      	ldr	r3, [pc, #256]	; (802586c <HAL_TIM_Base_MspInit+0x118>)
 802576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802576e:	4a3f      	ldr	r2, [pc, #252]	; (802586c <HAL_TIM_Base_MspInit+0x118>)
 8025770:	f043 0301 	orr.w	r3, r3, #1
 8025774:	6413      	str	r3, [r2, #64]	; 0x40
 8025776:	4b3d      	ldr	r3, [pc, #244]	; (802586c <HAL_TIM_Base_MspInit+0x118>)
 8025778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802577a:	f003 0301 	and.w	r3, r3, #1
 802577e:	61fb      	str	r3, [r7, #28]
 8025780:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8025782:	2200      	movs	r2, #0
 8025784:	2100      	movs	r1, #0
 8025786:	201c      	movs	r0, #28
 8025788:	f001 f9e3 	bl	8026b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 802578c:	201c      	movs	r0, #28
 802578e:	f001 f9fc 	bl	8026b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8025792:	e066      	b.n	8025862 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8025794:	687b      	ldr	r3, [r7, #4]
 8025796:	681b      	ldr	r3, [r3, #0]
 8025798:	4a35      	ldr	r2, [pc, #212]	; (8025870 <HAL_TIM_Base_MspInit+0x11c>)
 802579a:	4293      	cmp	r3, r2
 802579c:	d116      	bne.n	80257cc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 802579e:	2300      	movs	r3, #0
 80257a0:	61bb      	str	r3, [r7, #24]
 80257a2:	4b32      	ldr	r3, [pc, #200]	; (802586c <HAL_TIM_Base_MspInit+0x118>)
 80257a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80257a6:	4a31      	ldr	r2, [pc, #196]	; (802586c <HAL_TIM_Base_MspInit+0x118>)
 80257a8:	f043 0308 	orr.w	r3, r3, #8
 80257ac:	6413      	str	r3, [r2, #64]	; 0x40
 80257ae:	4b2f      	ldr	r3, [pc, #188]	; (802586c <HAL_TIM_Base_MspInit+0x118>)
 80257b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80257b2:	f003 0308 	and.w	r3, r3, #8
 80257b6:	61bb      	str	r3, [r7, #24]
 80257b8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80257ba:	2200      	movs	r2, #0
 80257bc:	2100      	movs	r1, #0
 80257be:	2032      	movs	r0, #50	; 0x32
 80257c0:	f001 f9c7 	bl	8026b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80257c4:	2032      	movs	r0, #50	; 0x32
 80257c6:	f001 f9e0 	bl	8026b8a <HAL_NVIC_EnableIRQ>
}
 80257ca:	e04a      	b.n	8025862 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 80257cc:	687b      	ldr	r3, [r7, #4]
 80257ce:	681b      	ldr	r3, [r3, #0]
 80257d0:	4a28      	ldr	r2, [pc, #160]	; (8025874 <HAL_TIM_Base_MspInit+0x120>)
 80257d2:	4293      	cmp	r3, r2
 80257d4:	d116      	bne.n	8025804 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80257d6:	2300      	movs	r3, #0
 80257d8:	617b      	str	r3, [r7, #20]
 80257da:	4b24      	ldr	r3, [pc, #144]	; (802586c <HAL_TIM_Base_MspInit+0x118>)
 80257dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80257de:	4a23      	ldr	r2, [pc, #140]	; (802586c <HAL_TIM_Base_MspInit+0x118>)
 80257e0:	f043 0310 	orr.w	r3, r3, #16
 80257e4:	6413      	str	r3, [r2, #64]	; 0x40
 80257e6:	4b21      	ldr	r3, [pc, #132]	; (802586c <HAL_TIM_Base_MspInit+0x118>)
 80257e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80257ea:	f003 0310 	and.w	r3, r3, #16
 80257ee:	617b      	str	r3, [r7, #20]
 80257f0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80257f2:	2200      	movs	r2, #0
 80257f4:	2100      	movs	r1, #0
 80257f6:	2036      	movs	r0, #54	; 0x36
 80257f8:	f001 f9ab 	bl	8026b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80257fc:	2036      	movs	r0, #54	; 0x36
 80257fe:	f001 f9c4 	bl	8026b8a <HAL_NVIC_EnableIRQ>
}
 8025802:	e02e      	b.n	8025862 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8025804:	687b      	ldr	r3, [r7, #4]
 8025806:	681b      	ldr	r3, [r3, #0]
 8025808:	4a1b      	ldr	r2, [pc, #108]	; (8025878 <HAL_TIM_Base_MspInit+0x124>)
 802580a:	4293      	cmp	r3, r2
 802580c:	d116      	bne.n	802583c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 802580e:	2300      	movs	r3, #0
 8025810:	613b      	str	r3, [r7, #16]
 8025812:	4b16      	ldr	r3, [pc, #88]	; (802586c <HAL_TIM_Base_MspInit+0x118>)
 8025814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025816:	4a15      	ldr	r2, [pc, #84]	; (802586c <HAL_TIM_Base_MspInit+0x118>)
 8025818:	f043 0320 	orr.w	r3, r3, #32
 802581c:	6413      	str	r3, [r2, #64]	; 0x40
 802581e:	4b13      	ldr	r3, [pc, #76]	; (802586c <HAL_TIM_Base_MspInit+0x118>)
 8025820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025822:	f003 0320 	and.w	r3, r3, #32
 8025826:	613b      	str	r3, [r7, #16]
 8025828:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 802582a:	2200      	movs	r2, #0
 802582c:	2100      	movs	r1, #0
 802582e:	2037      	movs	r0, #55	; 0x37
 8025830:	f001 f98f 	bl	8026b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8025834:	2037      	movs	r0, #55	; 0x37
 8025836:	f001 f9a8 	bl	8026b8a <HAL_NVIC_EnableIRQ>
}
 802583a:	e012      	b.n	8025862 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 802583c:	687b      	ldr	r3, [r7, #4]
 802583e:	681b      	ldr	r3, [r3, #0]
 8025840:	4a0e      	ldr	r2, [pc, #56]	; (802587c <HAL_TIM_Base_MspInit+0x128>)
 8025842:	4293      	cmp	r3, r2
 8025844:	d10d      	bne.n	8025862 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8025846:	2300      	movs	r3, #0
 8025848:	60fb      	str	r3, [r7, #12]
 802584a:	4b08      	ldr	r3, [pc, #32]	; (802586c <HAL_TIM_Base_MspInit+0x118>)
 802584c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802584e:	4a07      	ldr	r2, [pc, #28]	; (802586c <HAL_TIM_Base_MspInit+0x118>)
 8025850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8025854:	6453      	str	r3, [r2, #68]	; 0x44
 8025856:	4b05      	ldr	r3, [pc, #20]	; (802586c <HAL_TIM_Base_MspInit+0x118>)
 8025858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802585a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802585e:	60fb      	str	r3, [r7, #12]
 8025860:	68fb      	ldr	r3, [r7, #12]
}
 8025862:	bf00      	nop
 8025864:	3720      	adds	r7, #32
 8025866:	46bd      	mov	sp, r7
 8025868:	bd80      	pop	{r7, pc}
 802586a:	bf00      	nop
 802586c:	40023800 	.word	0x40023800
 8025870:	40000c00 	.word	0x40000c00
 8025874:	40001000 	.word	0x40001000
 8025878:	40001400 	.word	0x40001400
 802587c:	40014800 	.word	0x40014800

08025880 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8025880:	b580      	push	{r7, lr}
 8025882:	b08c      	sub	sp, #48	; 0x30
 8025884:	af00      	add	r7, sp, #0
 8025886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025888:	f107 031c 	add.w	r3, r7, #28
 802588c:	2200      	movs	r2, #0
 802588e:	601a      	str	r2, [r3, #0]
 8025890:	605a      	str	r2, [r3, #4]
 8025892:	609a      	str	r2, [r3, #8]
 8025894:	60da      	str	r2, [r3, #12]
 8025896:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8025898:	687b      	ldr	r3, [r7, #4]
 802589a:	681b      	ldr	r3, [r3, #0]
 802589c:	4a32      	ldr	r2, [pc, #200]	; (8025968 <HAL_TIM_Encoder_MspInit+0xe8>)
 802589e:	4293      	cmp	r3, r2
 80258a0:	d12c      	bne.n	80258fc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80258a2:	2300      	movs	r3, #0
 80258a4:	61bb      	str	r3, [r7, #24]
 80258a6:	4b31      	ldr	r3, [pc, #196]	; (802596c <HAL_TIM_Encoder_MspInit+0xec>)
 80258a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80258aa:	4a30      	ldr	r2, [pc, #192]	; (802596c <HAL_TIM_Encoder_MspInit+0xec>)
 80258ac:	f043 0304 	orr.w	r3, r3, #4
 80258b0:	6413      	str	r3, [r2, #64]	; 0x40
 80258b2:	4b2e      	ldr	r3, [pc, #184]	; (802596c <HAL_TIM_Encoder_MspInit+0xec>)
 80258b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80258b6:	f003 0304 	and.w	r3, r3, #4
 80258ba:	61bb      	str	r3, [r7, #24]
 80258bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80258be:	2300      	movs	r3, #0
 80258c0:	617b      	str	r3, [r7, #20]
 80258c2:	4b2a      	ldr	r3, [pc, #168]	; (802596c <HAL_TIM_Encoder_MspInit+0xec>)
 80258c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80258c6:	4a29      	ldr	r2, [pc, #164]	; (802596c <HAL_TIM_Encoder_MspInit+0xec>)
 80258c8:	f043 0302 	orr.w	r3, r3, #2
 80258cc:	6313      	str	r3, [r2, #48]	; 0x30
 80258ce:	4b27      	ldr	r3, [pc, #156]	; (802596c <HAL_TIM_Encoder_MspInit+0xec>)
 80258d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80258d2:	f003 0302 	and.w	r3, r3, #2
 80258d6:	617b      	str	r3, [r7, #20]
 80258d8:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80258da:	23c0      	movs	r3, #192	; 0xc0
 80258dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80258de:	2302      	movs	r3, #2
 80258e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80258e2:	2300      	movs	r3, #0
 80258e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80258e6:	2300      	movs	r3, #0
 80258e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80258ea:	2302      	movs	r3, #2
 80258ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80258ee:	f107 031c 	add.w	r3, r7, #28
 80258f2:	4619      	mov	r1, r3
 80258f4:	481e      	ldr	r0, [pc, #120]	; (8025970 <HAL_TIM_Encoder_MspInit+0xf0>)
 80258f6:	f001 ffa7 	bl	8027848 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80258fa:	e030      	b.n	802595e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 80258fc:	687b      	ldr	r3, [r7, #4]
 80258fe:	681b      	ldr	r3, [r3, #0]
 8025900:	4a1c      	ldr	r2, [pc, #112]	; (8025974 <HAL_TIM_Encoder_MspInit+0xf4>)
 8025902:	4293      	cmp	r3, r2
 8025904:	d12b      	bne.n	802595e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8025906:	2300      	movs	r3, #0
 8025908:	613b      	str	r3, [r7, #16]
 802590a:	4b18      	ldr	r3, [pc, #96]	; (802596c <HAL_TIM_Encoder_MspInit+0xec>)
 802590c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802590e:	4a17      	ldr	r2, [pc, #92]	; (802596c <HAL_TIM_Encoder_MspInit+0xec>)
 8025910:	f043 0302 	orr.w	r3, r3, #2
 8025914:	6453      	str	r3, [r2, #68]	; 0x44
 8025916:	4b15      	ldr	r3, [pc, #84]	; (802596c <HAL_TIM_Encoder_MspInit+0xec>)
 8025918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802591a:	f003 0302 	and.w	r3, r3, #2
 802591e:	613b      	str	r3, [r7, #16]
 8025920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025922:	2300      	movs	r3, #0
 8025924:	60fb      	str	r3, [r7, #12]
 8025926:	4b11      	ldr	r3, [pc, #68]	; (802596c <HAL_TIM_Encoder_MspInit+0xec>)
 8025928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802592a:	4a10      	ldr	r2, [pc, #64]	; (802596c <HAL_TIM_Encoder_MspInit+0xec>)
 802592c:	f043 0304 	orr.w	r3, r3, #4
 8025930:	6313      	str	r3, [r2, #48]	; 0x30
 8025932:	4b0e      	ldr	r3, [pc, #56]	; (802596c <HAL_TIM_Encoder_MspInit+0xec>)
 8025934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025936:	f003 0304 	and.w	r3, r3, #4
 802593a:	60fb      	str	r3, [r7, #12]
 802593c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 802593e:	23c0      	movs	r3, #192	; 0xc0
 8025940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025942:	2302      	movs	r3, #2
 8025944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025946:	2300      	movs	r3, #0
 8025948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802594a:	2300      	movs	r3, #0
 802594c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 802594e:	2303      	movs	r3, #3
 8025950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025952:	f107 031c 	add.w	r3, r7, #28
 8025956:	4619      	mov	r1, r3
 8025958:	4807      	ldr	r0, [pc, #28]	; (8025978 <HAL_TIM_Encoder_MspInit+0xf8>)
 802595a:	f001 ff75 	bl	8027848 <HAL_GPIO_Init>
}
 802595e:	bf00      	nop
 8025960:	3730      	adds	r7, #48	; 0x30
 8025962:	46bd      	mov	sp, r7
 8025964:	bd80      	pop	{r7, pc}
 8025966:	bf00      	nop
 8025968:	40000800 	.word	0x40000800
 802596c:	40023800 	.word	0x40023800
 8025970:	40020400 	.word	0x40020400
 8025974:	40010400 	.word	0x40010400
 8025978:	40020800 	.word	0x40020800

0802597c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 802597c:	b580      	push	{r7, lr}
 802597e:	b08c      	sub	sp, #48	; 0x30
 8025980:	af00      	add	r7, sp, #0
 8025982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025984:	f107 031c 	add.w	r3, r7, #28
 8025988:	2200      	movs	r2, #0
 802598a:	601a      	str	r2, [r3, #0]
 802598c:	605a      	str	r2, [r3, #4]
 802598e:	609a      	str	r2, [r3, #8]
 8025990:	60da      	str	r2, [r3, #12]
 8025992:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8025994:	687b      	ldr	r3, [r7, #4]
 8025996:	681b      	ldr	r3, [r3, #0]
 8025998:	4a59      	ldr	r2, [pc, #356]	; (8025b00 <HAL_TIM_MspPostInit+0x184>)
 802599a:	4293      	cmp	r3, r2
 802599c:	d11f      	bne.n	80259de <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802599e:	2300      	movs	r3, #0
 80259a0:	61bb      	str	r3, [r7, #24]
 80259a2:	4b58      	ldr	r3, [pc, #352]	; (8025b04 <HAL_TIM_MspPostInit+0x188>)
 80259a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80259a6:	4a57      	ldr	r2, [pc, #348]	; (8025b04 <HAL_TIM_MspPostInit+0x188>)
 80259a8:	f043 0301 	orr.w	r3, r3, #1
 80259ac:	6313      	str	r3, [r2, #48]	; 0x30
 80259ae:	4b55      	ldr	r3, [pc, #340]	; (8025b04 <HAL_TIM_MspPostInit+0x188>)
 80259b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80259b2:	f003 0301 	and.w	r3, r3, #1
 80259b6:	61bb      	str	r3, [r7, #24]
 80259b8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80259ba:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80259be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80259c0:	2302      	movs	r3, #2
 80259c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80259c4:	2300      	movs	r3, #0
 80259c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80259c8:	2300      	movs	r3, #0
 80259ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80259cc:	2301      	movs	r3, #1
 80259ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80259d0:	f107 031c 	add.w	r3, r7, #28
 80259d4:	4619      	mov	r1, r3
 80259d6:	484c      	ldr	r0, [pc, #304]	; (8025b08 <HAL_TIM_MspPostInit+0x18c>)
 80259d8:	f001 ff36 	bl	8027848 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80259dc:	e08b      	b.n	8025af6 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 80259de:	687b      	ldr	r3, [r7, #4]
 80259e0:	681b      	ldr	r3, [r3, #0]
 80259e2:	4a4a      	ldr	r2, [pc, #296]	; (8025b0c <HAL_TIM_MspPostInit+0x190>)
 80259e4:	4293      	cmp	r3, r2
 80259e6:	d13d      	bne.n	8025a64 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80259e8:	2300      	movs	r3, #0
 80259ea:	617b      	str	r3, [r7, #20]
 80259ec:	4b45      	ldr	r3, [pc, #276]	; (8025b04 <HAL_TIM_MspPostInit+0x188>)
 80259ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80259f0:	4a44      	ldr	r2, [pc, #272]	; (8025b04 <HAL_TIM_MspPostInit+0x188>)
 80259f2:	f043 0304 	orr.w	r3, r3, #4
 80259f6:	6313      	str	r3, [r2, #48]	; 0x30
 80259f8:	4b42      	ldr	r3, [pc, #264]	; (8025b04 <HAL_TIM_MspPostInit+0x188>)
 80259fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80259fc:	f003 0304 	and.w	r3, r3, #4
 8025a00:	617b      	str	r3, [r7, #20]
 8025a02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025a04:	2300      	movs	r3, #0
 8025a06:	613b      	str	r3, [r7, #16]
 8025a08:	4b3e      	ldr	r3, [pc, #248]	; (8025b04 <HAL_TIM_MspPostInit+0x188>)
 8025a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a0c:	4a3d      	ldr	r2, [pc, #244]	; (8025b04 <HAL_TIM_MspPostInit+0x188>)
 8025a0e:	f043 0302 	orr.w	r3, r3, #2
 8025a12:	6313      	str	r3, [r2, #48]	; 0x30
 8025a14:	4b3b      	ldr	r3, [pc, #236]	; (8025b04 <HAL_TIM_MspPostInit+0x188>)
 8025a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a18:	f003 0302 	and.w	r3, r3, #2
 8025a1c:	613b      	str	r3, [r7, #16]
 8025a1e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8025a20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8025a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025a26:	2302      	movs	r3, #2
 8025a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025a2a:	2300      	movs	r3, #0
 8025a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025a2e:	2300      	movs	r3, #0
 8025a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8025a32:	2302      	movs	r3, #2
 8025a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025a36:	f107 031c 	add.w	r3, r7, #28
 8025a3a:	4619      	mov	r1, r3
 8025a3c:	4834      	ldr	r0, [pc, #208]	; (8025b10 <HAL_TIM_MspPostInit+0x194>)
 8025a3e:	f001 ff03 	bl	8027848 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8025a42:	2330      	movs	r3, #48	; 0x30
 8025a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025a46:	2302      	movs	r3, #2
 8025a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025a4a:	2300      	movs	r3, #0
 8025a4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025a4e:	2300      	movs	r3, #0
 8025a50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8025a52:	2302      	movs	r3, #2
 8025a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025a56:	f107 031c 	add.w	r3, r7, #28
 8025a5a:	4619      	mov	r1, r3
 8025a5c:	482d      	ldr	r0, [pc, #180]	; (8025b14 <HAL_TIM_MspPostInit+0x198>)
 8025a5e:	f001 fef3 	bl	8027848 <HAL_GPIO_Init>
}
 8025a62:	e048      	b.n	8025af6 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 8025a64:	687b      	ldr	r3, [r7, #4]
 8025a66:	681b      	ldr	r3, [r3, #0]
 8025a68:	4a2b      	ldr	r2, [pc, #172]	; (8025b18 <HAL_TIM_MspPostInit+0x19c>)
 8025a6a:	4293      	cmp	r3, r2
 8025a6c:	d11f      	bne.n	8025aae <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025a6e:	2300      	movs	r3, #0
 8025a70:	60fb      	str	r3, [r7, #12]
 8025a72:	4b24      	ldr	r3, [pc, #144]	; (8025b04 <HAL_TIM_MspPostInit+0x188>)
 8025a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a76:	4a23      	ldr	r2, [pc, #140]	; (8025b04 <HAL_TIM_MspPostInit+0x188>)
 8025a78:	f043 0302 	orr.w	r3, r3, #2
 8025a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8025a7e:	4b21      	ldr	r3, [pc, #132]	; (8025b04 <HAL_TIM_MspPostInit+0x188>)
 8025a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a82:	f003 0302 	and.w	r3, r3, #2
 8025a86:	60fb      	str	r3, [r7, #12]
 8025a88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8025a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025a90:	2302      	movs	r3, #2
 8025a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025a94:	2300      	movs	r3, #0
 8025a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025a98:	2300      	movs	r3, #0
 8025a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8025a9c:	2303      	movs	r3, #3
 8025a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025aa0:	f107 031c 	add.w	r3, r7, #28
 8025aa4:	4619      	mov	r1, r3
 8025aa6:	481b      	ldr	r0, [pc, #108]	; (8025b14 <HAL_TIM_MspPostInit+0x198>)
 8025aa8:	f001 fece 	bl	8027848 <HAL_GPIO_Init>
}
 8025aac:	e023      	b.n	8025af6 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8025aae:	687b      	ldr	r3, [r7, #4]
 8025ab0:	681b      	ldr	r3, [r3, #0]
 8025ab2:	4a1a      	ldr	r2, [pc, #104]	; (8025b1c <HAL_TIM_MspPostInit+0x1a0>)
 8025ab4:	4293      	cmp	r3, r2
 8025ab6:	d11e      	bne.n	8025af6 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025ab8:	2300      	movs	r3, #0
 8025aba:	60bb      	str	r3, [r7, #8]
 8025abc:	4b11      	ldr	r3, [pc, #68]	; (8025b04 <HAL_TIM_MspPostInit+0x188>)
 8025abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025ac0:	4a10      	ldr	r2, [pc, #64]	; (8025b04 <HAL_TIM_MspPostInit+0x188>)
 8025ac2:	f043 0302 	orr.w	r3, r3, #2
 8025ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8025ac8:	4b0e      	ldr	r3, [pc, #56]	; (8025b04 <HAL_TIM_MspPostInit+0x188>)
 8025aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025acc:	f003 0302 	and.w	r3, r3, #2
 8025ad0:	60bb      	str	r3, [r7, #8]
 8025ad2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8025ad4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8025ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025ada:	2302      	movs	r3, #2
 8025adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025ade:	2300      	movs	r3, #0
 8025ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025ae2:	2300      	movs	r3, #0
 8025ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8025ae6:	2309      	movs	r3, #9
 8025ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025aea:	f107 031c 	add.w	r3, r7, #28
 8025aee:	4619      	mov	r1, r3
 8025af0:	4808      	ldr	r0, [pc, #32]	; (8025b14 <HAL_TIM_MspPostInit+0x198>)
 8025af2:	f001 fea9 	bl	8027848 <HAL_GPIO_Init>
}
 8025af6:	bf00      	nop
 8025af8:	3730      	adds	r7, #48	; 0x30
 8025afa:	46bd      	mov	sp, r7
 8025afc:	bd80      	pop	{r7, pc}
 8025afe:	bf00      	nop
 8025b00:	40010000 	.word	0x40010000
 8025b04:	40023800 	.word	0x40023800
 8025b08:	40020000 	.word	0x40020000
 8025b0c:	40000400 	.word	0x40000400
 8025b10:	40020800 	.word	0x40020800
 8025b14:	40020400 	.word	0x40020400
 8025b18:	40014800 	.word	0x40014800
 8025b1c:	40001800 	.word	0x40001800

08025b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8025b20:	b480      	push	{r7}
 8025b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8025b24:	e7fe      	b.n	8025b24 <NMI_Handler+0x4>

08025b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8025b26:	b480      	push	{r7}
 8025b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8025b2a:	e7fe      	b.n	8025b2a <HardFault_Handler+0x4>

08025b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8025b2c:	b480      	push	{r7}
 8025b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8025b30:	e7fe      	b.n	8025b30 <MemManage_Handler+0x4>

08025b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8025b32:	b480      	push	{r7}
 8025b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8025b36:	e7fe      	b.n	8025b36 <BusFault_Handler+0x4>

08025b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8025b38:	b480      	push	{r7}
 8025b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8025b3c:	e7fe      	b.n	8025b3c <UsageFault_Handler+0x4>

08025b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8025b3e:	b480      	push	{r7}
 8025b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8025b42:	bf00      	nop
 8025b44:	46bd      	mov	sp, r7
 8025b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b4a:	4770      	bx	lr

08025b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8025b4c:	b480      	push	{r7}
 8025b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8025b50:	bf00      	nop
 8025b52:	46bd      	mov	sp, r7
 8025b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b58:	4770      	bx	lr

08025b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8025b5a:	b480      	push	{r7}
 8025b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8025b5e:	bf00      	nop
 8025b60:	46bd      	mov	sp, r7
 8025b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b66:	4770      	bx	lr

08025b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8025b68:	b580      	push	{r7, lr}
 8025b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8025b6c:	f000 fae0 	bl	8026130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8025b70:	bf00      	nop
 8025b72:	bd80      	pop	{r7, pc}

08025b74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8025b74:	b580      	push	{r7, lr}
 8025b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8025b78:	4802      	ldr	r0, [pc, #8]	; (8025b84 <TIM2_IRQHandler+0x10>)
 8025b7a:	f003 fc66 	bl	802944a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8025b7e:	bf00      	nop
 8025b80:	bd80      	pop	{r7, pc}
 8025b82:	bf00      	nop
 8025b84:	20000900 	.word	0x20000900

08025b88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8025b88:	b580      	push	{r7, lr}
 8025b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8025b8c:	4802      	ldr	r0, [pc, #8]	; (8025b98 <TIM5_IRQHandler+0x10>)
 8025b8e:	f003 fc5c 	bl	802944a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8025b92:	bf00      	nop
 8025b94:	bd80      	pop	{r7, pc}
 8025b96:	bf00      	nop
 8025b98:	200006c0 	.word	0x200006c0

08025b9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8025b9c:	b580      	push	{r7, lr}
 8025b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8025ba0:	4802      	ldr	r0, [pc, #8]	; (8025bac <TIM6_DAC_IRQHandler+0x10>)
 8025ba2:	f003 fc52 	bl	802944a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8025ba6:	bf00      	nop
 8025ba8:	bd80      	pop	{r7, pc}
 8025baa:	bf00      	nop
 8025bac:	20000880 	.word	0x20000880

08025bb0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8025bb0:	b580      	push	{r7, lr}
 8025bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8025bb4:	4802      	ldr	r0, [pc, #8]	; (8025bc0 <TIM7_IRQHandler+0x10>)
 8025bb6:	f003 fc48 	bl	802944a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8025bba:	bf00      	nop
 8025bbc:	bd80      	pop	{r7, pc}
 8025bbe:	bf00      	nop
 8025bc0:	20000980 	.word	0x20000980

08025bc4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8025bc4:	b580      	push	{r7, lr}
 8025bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8025bc8:	4802      	ldr	r0, [pc, #8]	; (8025bd4 <DMA2_Stream0_IRQHandler+0x10>)
 8025bca:	f001 f8ff 	bl	8026dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8025bce:	bf00      	nop
 8025bd0:	bd80      	pop	{r7, pc}
 8025bd2:	bf00      	nop
 8025bd4:	20000820 	.word	0x20000820

08025bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8025bd8:	b480      	push	{r7}
 8025bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8025bdc:	4b08      	ldr	r3, [pc, #32]	; (8025c00 <SystemInit+0x28>)
 8025bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8025be2:	4a07      	ldr	r2, [pc, #28]	; (8025c00 <SystemInit+0x28>)
 8025be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8025be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8025bec:	4b04      	ldr	r3, [pc, #16]	; (8025c00 <SystemInit+0x28>)
 8025bee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8025bf2:	609a      	str	r2, [r3, #8]
#endif
}
 8025bf4:	bf00      	nop
 8025bf6:	46bd      	mov	sp, r7
 8025bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bfc:	4770      	bx	lr
 8025bfe:	bf00      	nop
 8025c00:	e000ed00 	.word	0xe000ed00

08025c04 <_ZN15VelocityControlC1EP7Encoder>:
#include "velocity_control.hpp"
#include "declare_extern.h"

VelocityControl::VelocityControl(Encoder *encoder) : integral_error_(0)
 8025c04:	b480      	push	{r7}
 8025c06:	b083      	sub	sp, #12
 8025c08:	af00      	add	r7, sp, #0
 8025c0a:	6078      	str	r0, [r7, #4]
 8025c0c:	6039      	str	r1, [r7, #0]
 8025c0e:	687b      	ldr	r3, [r7, #4]
 8025c10:	f04f 0200 	mov.w	r2, #0
 8025c14:	601a      	str	r2, [r3, #0]
{
    encoder_ = encoder;
 8025c16:	687b      	ldr	r3, [r7, #4]
 8025c18:	683a      	ldr	r2, [r7, #0]
 8025c1a:	605a      	str	r2, [r3, #4]
}
 8025c1c:	687b      	ldr	r3, [r7, #4]
 8025c1e:	4618      	mov	r0, r3
 8025c20:	370c      	adds	r7, #12
 8025c22:	46bd      	mov	sp, r7
 8025c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c28:	4770      	bx	lr

08025c2a <_ZN15VelocityControl16DeterminePidGainEf>:

float VelocityControl::DeterminePidGain(float target_velocity)
{
 8025c2a:	b580      	push	{r7, lr}
 8025c2c:	b086      	sub	sp, #24
 8025c2e:	af00      	add	r7, sp, #0
 8025c30:	6078      	str	r0, [r7, #4]
 8025c32:	ed87 0a00 	vstr	s0, [r7]
    float p_gain = 0, i_gain = 0, d_gain = 0;
 8025c36:	f04f 0300 	mov.w	r3, #0
 8025c3a:	617b      	str	r3, [r7, #20]
 8025c3c:	f04f 0300 	mov.w	r3, #0
 8025c40:	613b      	str	r3, [r7, #16]
 8025c42:	f04f 0300 	mov.w	r3, #0
 8025c46:	60fb      	str	r3, [r7, #12]

    if(target_velocity < MAX_VELOCITY)
 8025c48:	edd7 7a00 	vldr	s15, [r7]
 8025c4c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8025c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8025c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c58:	d509      	bpl.n	8025c6e <_ZN15VelocityControl16DeterminePidGainEf+0x44>
    {
        p_gain = VELOCITY_P_GAIN;
 8025c5a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8025c5e:	617b      	str	r3, [r7, #20]
        i_gain = VELOCITY_I_GAIN;
 8025c60:	f04f 0300 	mov.w	r3, #0
 8025c64:	613b      	str	r3, [r7, #16]
        d_gain = VELOCITY_D_GAIN;
 8025c66:	f04f 0300 	mov.w	r3, #0
 8025c6a:	60fb      	str	r3, [r7, #12]
 8025c6c:	e008      	b.n	8025c80 <_ZN15VelocityControl16DeterminePidGainEf+0x56>
    }
    else // Error handler
    {
        p_gain = 0;
 8025c6e:	f04f 0300 	mov.w	r3, #0
 8025c72:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 8025c74:	f04f 0300 	mov.w	r3, #0
 8025c78:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 8025c7a:	f04f 0300 	mov.w	r3, #0
 8025c7e:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(target_velocity, p_gain, i_gain, d_gain);
 8025c80:	edd7 1a03 	vldr	s3, [r7, #12]
 8025c84:	ed97 1a04 	vldr	s2, [r7, #16]
 8025c88:	edd7 0a05 	vldr	s1, [r7, #20]
 8025c8c:	ed97 0a00 	vldr	s0, [r7]
 8025c90:	6878      	ldr	r0, [r7, #4]
 8025c92:	f000 f809 	bl	8025ca8 <_ZN15VelocityControl10PidControlEffff>
 8025c96:	eef0 7a40 	vmov.f32	s15, s0
}
 8025c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8025c9e:	3718      	adds	r7, #24
 8025ca0:	46bd      	mov	sp, r7
 8025ca2:	bd80      	pop	{r7, pc}
 8025ca4:	0000      	movs	r0, r0
	...

08025ca8 <_ZN15VelocityControl10PidControlEffff>:

float VelocityControl::PidControl(float target, float p_gain, float i_gain, float d_gain)
{
 8025ca8:	b5b0      	push	{r4, r5, r7, lr}
 8025caa:	b08e      	sub	sp, #56	; 0x38
 8025cac:	af00      	add	r7, sp, #0
 8025cae:	6178      	str	r0, [r7, #20]
 8025cb0:	ed87 0a04 	vstr	s0, [r7, #16]
 8025cb4:	edc7 0a03 	vstr	s1, [r7, #12]
 8025cb8:	ed87 1a02 	vstr	s2, [r7, #8]
 8025cbc:	edc7 1a01 	vstr	s3, [r7, #4]
    float current = encoder_->GetDistance() / TIM6_PERIOD; // [mm/ms]
 8025cc0:	697b      	ldr	r3, [r7, #20]
 8025cc2:	685b      	ldr	r3, [r3, #4]
 8025cc4:	4618      	mov	r0, r3
 8025cc6:	f7fb f901 	bl	8020ecc <_ZN7Encoder11GetDistanceEv>
 8025cca:	eef0 6a40 	vmov.f32	s13, s0
 8025cce:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8025cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025cd6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    static float pre_filter = 0.0;
    float filter = pre_filter * (1.0 - VELOCITY_LPF_RATIO) + (current * VELOCITY_LPF_RATIO);
 8025cda:	4b71      	ldr	r3, [pc, #452]	; (8025ea0 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8025cdc:	681b      	ldr	r3, [r3, #0]
 8025cde:	4618      	mov	r0, r3
 8025ce0:	f7fa fb12 	bl	8020308 <__aeabi_f2d>
 8025ce4:	a368      	add	r3, pc, #416	; (adr r3, 8025e88 <_ZN15VelocityControl10PidControlEffff+0x1e0>)
 8025ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025cea:	f7fa fb65 	bl	80203b8 <__aeabi_dmul>
 8025cee:	4603      	mov	r3, r0
 8025cf0:	460c      	mov	r4, r1
 8025cf2:	4625      	mov	r5, r4
 8025cf4:	461c      	mov	r4, r3
 8025cf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025cf8:	f7fa fb06 	bl	8020308 <__aeabi_f2d>
 8025cfc:	a364      	add	r3, pc, #400	; (adr r3, 8025e90 <_ZN15VelocityControl10PidControlEffff+0x1e8>)
 8025cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d02:	f7fa fb59 	bl	80203b8 <__aeabi_dmul>
 8025d06:	4602      	mov	r2, r0
 8025d08:	460b      	mov	r3, r1
 8025d0a:	4620      	mov	r0, r4
 8025d0c:	4629      	mov	r1, r5
 8025d0e:	f7fa f99d 	bl	802004c <__adddf3>
 8025d12:	4603      	mov	r3, r0
 8025d14:	460c      	mov	r4, r1
 8025d16:	4618      	mov	r0, r3
 8025d18:	4621      	mov	r1, r4
 8025d1a:	f7fa fde7 	bl	80208ec <__aeabi_d2f>
 8025d1e:	4603      	mov	r3, r0
 8025d20:	633b      	str	r3, [r7, #48]	; 0x30
    pre_filter = filter;
 8025d22:	4a5f      	ldr	r2, [pc, #380]	; (8025ea0 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8025d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025d26:	6013      	str	r3, [r2, #0]

    float error = target - filter;
 8025d28:	ed97 7a04 	vldr	s14, [r7, #16]
 8025d2c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8025d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025d34:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    static float pre_error = error;
 8025d38:	4b5a      	ldr	r3, [pc, #360]	; (8025ea4 <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8025d3a:	781b      	ldrb	r3, [r3, #0]
 8025d3c:	f3bf 8f5b 	dmb	ish
 8025d40:	b2db      	uxtb	r3, r3
 8025d42:	f003 0301 	and.w	r3, r3, #1
 8025d46:	2b00      	cmp	r3, #0
 8025d48:	bf0c      	ite	eq
 8025d4a:	2301      	moveq	r3, #1
 8025d4c:	2300      	movne	r3, #0
 8025d4e:	b2db      	uxtb	r3, r3
 8025d50:	2b00      	cmp	r3, #0
 8025d52:	d010      	beq.n	8025d76 <_ZN15VelocityControl10PidControlEffff+0xce>
 8025d54:	4853      	ldr	r0, [pc, #332]	; (8025ea4 <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8025d56:	f004 fa19 	bl	802a18c <__cxa_guard_acquire>
 8025d5a:	4603      	mov	r3, r0
 8025d5c:	2b00      	cmp	r3, #0
 8025d5e:	bf14      	ite	ne
 8025d60:	2301      	movne	r3, #1
 8025d62:	2300      	moveq	r3, #0
 8025d64:	b2db      	uxtb	r3, r3
 8025d66:	2b00      	cmp	r3, #0
 8025d68:	d005      	beq.n	8025d76 <_ZN15VelocityControl10PidControlEffff+0xce>
 8025d6a:	4a4f      	ldr	r2, [pc, #316]	; (8025ea8 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025d6e:	6013      	str	r3, [r2, #0]
 8025d70:	484c      	ldr	r0, [pc, #304]	; (8025ea4 <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8025d72:	f004 fa17 	bl	802a1a4 <__cxa_guard_release>

    float differential_error = (error - pre_error) / TIM6_PERIOD_S;
 8025d76:	4b4c      	ldr	r3, [pc, #304]	; (8025ea8 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025d78:	edd3 7a00 	vldr	s15, [r3]
 8025d7c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8025d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025d84:	ee17 0a90 	vmov	r0, s15
 8025d88:	f7fa fabe 	bl	8020308 <__aeabi_f2d>
 8025d8c:	a342      	add	r3, pc, #264	; (adr r3, 8025e98 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8025d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d92:	f7fa fc3b 	bl	802060c <__aeabi_ddiv>
 8025d96:	4603      	mov	r3, r0
 8025d98:	460c      	mov	r4, r1
 8025d9a:	4618      	mov	r0, r3
 8025d9c:	4621      	mov	r1, r4
 8025d9e:	f7fa fda5 	bl	80208ec <__aeabi_d2f>
 8025da2:	4603      	mov	r3, r0
 8025da4:	62bb      	str	r3, [r7, #40]	; 0x28
    float integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 8025da6:	4b40      	ldr	r3, [pc, #256]	; (8025ea8 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025da8:	ed93 7a00 	vldr	s14, [r3]
 8025dac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8025db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025db4:	ee17 0a90 	vmov	r0, s15
 8025db8:	f7fa faa6 	bl	8020308 <__aeabi_f2d>
 8025dbc:	f04f 0200 	mov.w	r2, #0
 8025dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8025dc4:	f7fa fc22 	bl	802060c <__aeabi_ddiv>
 8025dc8:	4603      	mov	r3, r0
 8025dca:	460c      	mov	r4, r1
 8025dcc:	4618      	mov	r0, r3
 8025dce:	4621      	mov	r1, r4
 8025dd0:	a331      	add	r3, pc, #196	; (adr r3, 8025e98 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8025dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025dd6:	f7fa faef 	bl	80203b8 <__aeabi_dmul>
 8025dda:	4603      	mov	r3, r0
 8025ddc:	460c      	mov	r4, r1
 8025dde:	4618      	mov	r0, r3
 8025de0:	4621      	mov	r1, r4
 8025de2:	f7fa fd83 	bl	80208ec <__aeabi_d2f>
 8025de6:	4603      	mov	r3, r0
 8025de8:	627b      	str	r3, [r7, #36]	; 0x24
    SetIntegralError(integral_error);
 8025dea:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8025dee:	6978      	ldr	r0, [r7, #20]
 8025df0:	f000 f870 	bl	8025ed4 <_ZN15VelocityControl16SetIntegralErrorEf>
    pre_error = error;
 8025df4:	4a2c      	ldr	r2, [pc, #176]	; (8025ea8 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025df8:	6013      	str	r3, [r2, #0]

    float p = p_gain * error;
 8025dfa:	ed97 7a03 	vldr	s14, [r7, #12]
 8025dfe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8025e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025e06:	edc7 7a08 	vstr	s15, [r7, #32]
    float d = d_gain * differential_error;
 8025e0a:	ed97 7a01 	vldr	s14, [r7, #4]
 8025e0e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8025e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025e16:	edc7 7a07 	vstr	s15, [r7, #28]
    float i = i_gain * integral_error_;
 8025e1a:	697b      	ldr	r3, [r7, #20]
 8025e1c:	edd3 7a00 	vldr	s15, [r3]
 8025e20:	ed97 7a02 	vldr	s14, [r7, #8]
 8025e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025e28:	edc7 7a06 	vstr	s15, [r7, #24]

#ifdef DEBUG_MODE
    g_target_velocity  = target;
 8025e2c:	4a1f      	ldr	r2, [pc, #124]	; (8025eac <_ZN15VelocityControl10PidControlEffff+0x204>)
 8025e2e:	693b      	ldr	r3, [r7, #16]
 8025e30:	6013      	str	r3, [r2, #0]
    g_current_velocity = current;
 8025e32:	4a1f      	ldr	r2, [pc, #124]	; (8025eb0 <_ZN15VelocityControl10PidControlEffff+0x208>)
 8025e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e36:	6013      	str	r3, [r2, #0]
    g_filter_velocity  = filter;
 8025e38:	4a1e      	ldr	r2, [pc, #120]	; (8025eb4 <_ZN15VelocityControl10PidControlEffff+0x20c>)
 8025e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025e3c:	6013      	str	r3, [r2, #0]
    g_velocity_error   = error;
 8025e3e:	4a1e      	ldr	r2, [pc, #120]	; (8025eb8 <_ZN15VelocityControl10PidControlEffff+0x210>)
 8025e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025e42:	6013      	str	r3, [r2, #0]
    g_velocity_p = p;       g_velocity_d = d;       g_velocity_i = i;
 8025e44:	4a1d      	ldr	r2, [pc, #116]	; (8025ebc <_ZN15VelocityControl10PidControlEffff+0x214>)
 8025e46:	6a3b      	ldr	r3, [r7, #32]
 8025e48:	6013      	str	r3, [r2, #0]
 8025e4a:	4a1d      	ldr	r2, [pc, #116]	; (8025ec0 <_ZN15VelocityControl10PidControlEffff+0x218>)
 8025e4c:	69fb      	ldr	r3, [r7, #28]
 8025e4e:	6013      	str	r3, [r2, #0]
 8025e50:	4a1c      	ldr	r2, [pc, #112]	; (8025ec4 <_ZN15VelocityControl10PidControlEffff+0x21c>)
 8025e52:	69bb      	ldr	r3, [r7, #24]
 8025e54:	6013      	str	r3, [r2, #0]
    g_velocity_p_gain = p;  g_velocity_d_gain = p;  g_velocity_i_gain = p;
 8025e56:	4a1c      	ldr	r2, [pc, #112]	; (8025ec8 <_ZN15VelocityControl10PidControlEffff+0x220>)
 8025e58:	6a3b      	ldr	r3, [r7, #32]
 8025e5a:	6013      	str	r3, [r2, #0]
 8025e5c:	4a1b      	ldr	r2, [pc, #108]	; (8025ecc <_ZN15VelocityControl10PidControlEffff+0x224>)
 8025e5e:	6a3b      	ldr	r3, [r7, #32]
 8025e60:	6013      	str	r3, [r2, #0]
 8025e62:	4a1b      	ldr	r2, [pc, #108]	; (8025ed0 <_ZN15VelocityControl10PidControlEffff+0x228>)
 8025e64:	6a3b      	ldr	r3, [r7, #32]
 8025e66:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    return p + d + i;
 8025e68:	ed97 7a08 	vldr	s14, [r7, #32]
 8025e6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8025e70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8025e74:	edd7 7a06 	vldr	s15, [r7, #24]
 8025e78:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8025e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8025e80:	3738      	adds	r7, #56	; 0x38
 8025e82:	46bd      	mov	sp, r7
 8025e84:	bdb0      	pop	{r4, r5, r7, pc}
 8025e86:	bf00      	nop
 8025e88:	33333334 	.word	0x33333334
 8025e8c:	3fd33333 	.word	0x3fd33333
 8025e90:	66666666 	.word	0x66666666
 8025e94:	3fe66666 	.word	0x3fe66666
 8025e98:	47ae147b 	.word	0x47ae147b
 8025e9c:	3f547ae1 	.word	0x3f547ae1
 8025ea0:	200002dc 	.word	0x200002dc
 8025ea4:	200002e4 	.word	0x200002e4
 8025ea8:	200002e0 	.word	0x200002e0
 8025eac:	20000294 	.word	0x20000294
 8025eb0:	20000298 	.word	0x20000298
 8025eb4:	2000029c 	.word	0x2000029c
 8025eb8:	200002a0 	.word	0x200002a0
 8025ebc:	200002a4 	.word	0x200002a4
 8025ec0:	200002ac 	.word	0x200002ac
 8025ec4:	200002a8 	.word	0x200002a8
 8025ec8:	200002b0 	.word	0x200002b0
 8025ecc:	200002b8 	.word	0x200002b8
 8025ed0:	200002b4 	.word	0x200002b4

08025ed4 <_ZN15VelocityControl16SetIntegralErrorEf>:

void VelocityControl::SetIntegralError(float integral_error)
{
 8025ed4:	b480      	push	{r7}
 8025ed6:	b083      	sub	sp, #12
 8025ed8:	af00      	add	r7, sp, #0
 8025eda:	6078      	str	r0, [r7, #4]
 8025edc:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8025ee0:	687b      	ldr	r3, [r7, #4]
 8025ee2:	ed93 7a00 	vldr	s14, [r3]
 8025ee6:	edd7 7a00 	vldr	s15, [r7]
 8025eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025eee:	687b      	ldr	r3, [r7, #4]
 8025ef0:	edc3 7a00 	vstr	s15, [r3]
}
 8025ef4:	bf00      	nop
 8025ef6:	370c      	adds	r7, #12
 8025ef8:	46bd      	mov	sp, r7
 8025efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025efe:	4770      	bx	lr

08025f00 <Init>:
    &velocity_control
);
#endif // TEST_MODE

void Init()
{
 8025f00:	b580      	push	{r7, lr}
 8025f02:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Init();
 8025f04:	4802      	ldr	r0, [pc, #8]	; (8025f10 <Init+0x10>)
 8025f06:	f7fe f8d1 	bl	80240ac <_ZN3Run4InitEv>
#else // TEST_MODE
    test.Init();
#endif // TEST_MODE
}
 8025f0a:	bf00      	nop
 8025f0c:	bd80      	pop	{r7, pc}
 8025f0e:	bf00      	nop
 8025f10:	200005b8 	.word	0x200005b8

08025f14 <InterruptTim7>:

void InterruptTim7()
{
 8025f14:	b580      	push	{r7, lr}
 8025f16:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer7();
 8025f18:	4804      	ldr	r0, [pc, #16]	; (8025f2c <InterruptTim7+0x18>)
 8025f1a:	f7fe f941 	bl	80241a0 <_ZN3Run6Timer7Ev>
#else // TEST_MODE
    test.Timer7();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim7++;
 8025f1e:	4b04      	ldr	r3, [pc, #16]	; (8025f30 <InterruptTim7+0x1c>)
 8025f20:	681b      	ldr	r3, [r3, #0]
 8025f22:	3301      	adds	r3, #1
 8025f24:	4a02      	ldr	r2, [pc, #8]	; (8025f30 <InterruptTim7+0x1c>)
 8025f26:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8025f28:	bf00      	nop
 8025f2a:	bd80      	pop	{r7, pc}
 8025f2c:	200005b8 	.word	0x200005b8
 8025f30:	200002bc 	.word	0x200002bc

08025f34 <InterruptTim6>:

void InterruptTim6()
{
 8025f34:	b580      	push	{r7, lr}
 8025f36:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.RunMode();
 8025f38:	4804      	ldr	r0, [pc, #16]	; (8025f4c <InterruptTim6+0x18>)
 8025f3a:	f7fe fb2b 	bl	8024594 <_ZN3Run7RunModeEv>
#else // TEST_MODE
    test.Timer6();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim6++;
 8025f3e:	4b04      	ldr	r3, [pc, #16]	; (8025f50 <InterruptTim6+0x1c>)
 8025f40:	681b      	ldr	r3, [r3, #0]
 8025f42:	3301      	adds	r3, #1
 8025f44:	4a02      	ldr	r2, [pc, #8]	; (8025f50 <InterruptTim6+0x1c>)
 8025f46:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8025f48:	bf00      	nop
 8025f4a:	bd80      	pop	{r7, pc}
 8025f4c:	200005b8 	.word	0x200005b8
 8025f50:	200002c0 	.word	0x200002c0

08025f54 <InterruptTim2>:

void InterruptTim2()
{
 8025f54:	b580      	push	{r7, lr}
 8025f56:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer2();
 8025f58:	4804      	ldr	r0, [pc, #16]	; (8025f6c <InterruptTim2+0x18>)
 8025f5a:	f7fe f92f 	bl	80241bc <_ZN3Run6Timer2Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim2++;
 8025f5e:	4b04      	ldr	r3, [pc, #16]	; (8025f70 <InterruptTim2+0x1c>)
 8025f60:	681b      	ldr	r3, [r3, #0]
 8025f62:	3301      	adds	r3, #1
 8025f64:	4a02      	ldr	r2, [pc, #8]	; (8025f70 <InterruptTim2+0x1c>)
 8025f66:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
 8025f68:	bf00      	nop
 8025f6a:	bd80      	pop	{r7, pc}
 8025f6c:	200005b8 	.word	0x200005b8
 8025f70:	200002c4 	.word	0x200002c4

08025f74 <_Z41__static_initialization_and_destruction_0ii>:
 8025f74:	b580      	push	{r7, lr}
 8025f76:	b08a      	sub	sp, #40	; 0x28
 8025f78:	af08      	add	r7, sp, #32
 8025f7a:	6078      	str	r0, [r7, #4]
 8025f7c:	6039      	str	r1, [r7, #0]
 8025f7e:	687b      	ldr	r3, [r7, #4]
 8025f80:	2b01      	cmp	r3, #1
 8025f82:	d134      	bne.n	8025fee <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8025f84:	683b      	ldr	r3, [r7, #0]
 8025f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8025f8a:	4293      	cmp	r3, r2
 8025f8c:	d12f      	bne.n	8025fee <_Z41__static_initialization_and_destruction_0ii+0x7a>
Encoder encoder;
 8025f8e:	481a      	ldr	r0, [pc, #104]	; (8025ff8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8025f90:	f7fa fec0 	bl	8020d14 <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 8025f94:	4819      	ldr	r0, [pc, #100]	; (8025ffc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8025f96:	f7fb f99f 	bl	80212d8 <_ZN8Iim42652C1Ev>
Led led;
 8025f9a:	4819      	ldr	r0, [pc, #100]	; (8026000 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8025f9c:	f7fb fbb1 	bl	8021702 <_ZN3LedC1Ev>
LineSensor line_sensor;
 8025fa0:	4818      	ldr	r0, [pc, #96]	; (8026004 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8025fa2:	f7fb fd66 	bl	8021a72 <_ZN10LineSensorC1Ev>
LineTrace line_trace(&line_sensor);
 8025fa6:	4917      	ldr	r1, [pc, #92]	; (8026004 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8025fa8:	4817      	ldr	r0, [pc, #92]	; (8026008 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8025faa:	f7fc f88d 	bl	80220c8 <_ZN9LineTraceC1EP10LineSensor>
Logger logger;
 8025fae:	4817      	ldr	r0, [pc, #92]	; (802600c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8025fb0:	f7fc f9e2 	bl	8022378 <_ZN6LoggerC1Ev>
SideSensor side_sensor;
 8025fb4:	4816      	ldr	r0, [pc, #88]	; (8026010 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8025fb6:	f7fe fee1 	bl	8024d7c <_ZN10SideSensorC1Ev>
VelocityControl velocity_control(&encoder);
 8025fba:	490f      	ldr	r1, [pc, #60]	; (8025ff8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8025fbc:	4815      	ldr	r0, [pc, #84]	; (8026014 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8025fbe:	f7ff fe21 	bl	8025c04 <_ZN15VelocityControlC1EP7Encoder>
);
 8025fc2:	4b14      	ldr	r3, [pc, #80]	; (8026014 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8025fc4:	9307      	str	r3, [sp, #28]
 8025fc6:	4b12      	ldr	r3, [pc, #72]	; (8026010 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8025fc8:	9306      	str	r3, [sp, #24]
 8025fca:	4b13      	ldr	r3, [pc, #76]	; (8026018 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8025fcc:	9305      	str	r3, [sp, #20]
 8025fce:	4b13      	ldr	r3, [pc, #76]	; (802601c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8025fd0:	9304      	str	r3, [sp, #16]
 8025fd2:	4b0e      	ldr	r3, [pc, #56]	; (802600c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8025fd4:	9303      	str	r3, [sp, #12]
 8025fd6:	4b0c      	ldr	r3, [pc, #48]	; (8026008 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8025fd8:	9302      	str	r3, [sp, #8]
 8025fda:	4b0a      	ldr	r3, [pc, #40]	; (8026004 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8025fdc:	9301      	str	r3, [sp, #4]
 8025fde:	4b08      	ldr	r3, [pc, #32]	; (8026000 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8025fe0:	9300      	str	r3, [sp, #0]
 8025fe2:	4b06      	ldr	r3, [pc, #24]	; (8025ffc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8025fe4:	4a0e      	ldr	r2, [pc, #56]	; (8026020 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8025fe6:	4904      	ldr	r1, [pc, #16]	; (8025ff8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8025fe8:	480e      	ldr	r0, [pc, #56]	; (8026024 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8025fea:	f7fe f81b 	bl	8024024 <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3LedP10LineSensorP9LineTraceP6LoggerP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>
 8025fee:	bf00      	nop
 8025ff0:	3708      	adds	r7, #8
 8025ff2:	46bd      	mov	sp, r7
 8025ff4:	bd80      	pop	{r7, pc}
 8025ff6:	bf00      	nop
 8025ff8:	200002e8 	.word	0x200002e8
 8025ffc:	200002f8 	.word	0x200002f8
 8026000:	20000300 	.word	0x20000300
 8026004:	20000304 	.word	0x20000304
 8026008:	20000490 	.word	0x20000490
 802600c:	20000498 	.word	0x20000498
 8026010:	200005a8 	.word	0x200005a8
 8026014:	200005b0 	.word	0x200005b0
 8026018:	200005a4 	.word	0x200005a4
 802601c:	200005a0 	.word	0x200005a0
 8026020:	200002f4 	.word	0x200002f4
 8026024:	200005b8 	.word	0x200005b8

08026028 <_GLOBAL__sub_I_encoder>:
 8026028:	b580      	push	{r7, lr}
 802602a:	af00      	add	r7, sp, #0
 802602c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8026030:	2001      	movs	r0, #1
 8026032:	f7ff ff9f 	bl	8025f74 <_Z41__static_initialization_and_destruction_0ii>
 8026036:	bd80      	pop	{r7, pc}

08026038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8026038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8026070 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 802603c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 802603e:	e003      	b.n	8026048 <LoopCopyDataInit>

08026040 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8026040:	4b0c      	ldr	r3, [pc, #48]	; (8026074 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8026042:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8026044:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8026046:	3104      	adds	r1, #4

08026048 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8026048:	480b      	ldr	r0, [pc, #44]	; (8026078 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 802604a:	4b0c      	ldr	r3, [pc, #48]	; (802607c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 802604c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 802604e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8026050:	d3f6      	bcc.n	8026040 <CopyDataInit>
  ldr  r2, =_sbss
 8026052:	4a0b      	ldr	r2, [pc, #44]	; (8026080 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8026054:	e002      	b.n	802605c <LoopFillZerobss>

08026056 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8026056:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8026058:	f842 3b04 	str.w	r3, [r2], #4

0802605c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 802605c:	4b09      	ldr	r3, [pc, #36]	; (8026084 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 802605e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8026060:	d3f9      	bcc.n	8026056 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8026062:	f7ff fdb9 	bl	8025bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8026066:	f004 f8a1 	bl	802a1ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802606a:	f7fc ffdd 	bl	8023028 <main>
  bx  lr    
 802606e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8026070:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8026074:	0802a268 	.word	0x0802a268
  ldr  r0, =_sdata
 8026078:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 802607c:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8026080:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8026084:	200009e4 	.word	0x200009e4

08026088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8026088:	e7fe      	b.n	8026088 <ADC_IRQHandler>
	...

0802608c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802608c:	b580      	push	{r7, lr}
 802608e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8026090:	4b0e      	ldr	r3, [pc, #56]	; (80260cc <HAL_Init+0x40>)
 8026092:	681b      	ldr	r3, [r3, #0]
 8026094:	4a0d      	ldr	r2, [pc, #52]	; (80260cc <HAL_Init+0x40>)
 8026096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802609a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 802609c:	4b0b      	ldr	r3, [pc, #44]	; (80260cc <HAL_Init+0x40>)
 802609e:	681b      	ldr	r3, [r3, #0]
 80260a0:	4a0a      	ldr	r2, [pc, #40]	; (80260cc <HAL_Init+0x40>)
 80260a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80260a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80260a8:	4b08      	ldr	r3, [pc, #32]	; (80260cc <HAL_Init+0x40>)
 80260aa:	681b      	ldr	r3, [r3, #0]
 80260ac:	4a07      	ldr	r2, [pc, #28]	; (80260cc <HAL_Init+0x40>)
 80260ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80260b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80260b4:	2003      	movs	r0, #3
 80260b6:	f000 fd41 	bl	8026b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80260ba:	2001      	movs	r0, #1
 80260bc:	f000 f808 	bl	80260d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80260c0:	f7ff f9ae 	bl	8025420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80260c4:	2300      	movs	r3, #0
}
 80260c6:	4618      	mov	r0, r3
 80260c8:	bd80      	pop	{r7, pc}
 80260ca:	bf00      	nop
 80260cc:	40023c00 	.word	0x40023c00

080260d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80260d0:	b580      	push	{r7, lr}
 80260d2:	b082      	sub	sp, #8
 80260d4:	af00      	add	r7, sp, #0
 80260d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80260d8:	4b12      	ldr	r3, [pc, #72]	; (8026124 <HAL_InitTick+0x54>)
 80260da:	681a      	ldr	r2, [r3, #0]
 80260dc:	4b12      	ldr	r3, [pc, #72]	; (8026128 <HAL_InitTick+0x58>)
 80260de:	781b      	ldrb	r3, [r3, #0]
 80260e0:	4619      	mov	r1, r3
 80260e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80260e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80260ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80260ee:	4618      	mov	r0, r3
 80260f0:	f000 fd59 	bl	8026ba6 <HAL_SYSTICK_Config>
 80260f4:	4603      	mov	r3, r0
 80260f6:	2b00      	cmp	r3, #0
 80260f8:	d001      	beq.n	80260fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80260fa:	2301      	movs	r3, #1
 80260fc:	e00e      	b.n	802611c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80260fe:	687b      	ldr	r3, [r7, #4]
 8026100:	2b0f      	cmp	r3, #15
 8026102:	d80a      	bhi.n	802611a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8026104:	2200      	movs	r2, #0
 8026106:	6879      	ldr	r1, [r7, #4]
 8026108:	f04f 30ff 	mov.w	r0, #4294967295
 802610c:	f000 fd21 	bl	8026b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8026110:	4a06      	ldr	r2, [pc, #24]	; (802612c <HAL_InitTick+0x5c>)
 8026112:	687b      	ldr	r3, [r7, #4]
 8026114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8026116:	2300      	movs	r3, #0
 8026118:	e000      	b.n	802611c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 802611a:	2301      	movs	r3, #1
}
 802611c:	4618      	mov	r0, r3
 802611e:	3708      	adds	r7, #8
 8026120:	46bd      	mov	sp, r7
 8026122:	bd80      	pop	{r7, pc}
 8026124:	20000014 	.word	0x20000014
 8026128:	2000001c 	.word	0x2000001c
 802612c:	20000018 	.word	0x20000018

08026130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8026130:	b480      	push	{r7}
 8026132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8026134:	4b06      	ldr	r3, [pc, #24]	; (8026150 <HAL_IncTick+0x20>)
 8026136:	781b      	ldrb	r3, [r3, #0]
 8026138:	461a      	mov	r2, r3
 802613a:	4b06      	ldr	r3, [pc, #24]	; (8026154 <HAL_IncTick+0x24>)
 802613c:	681b      	ldr	r3, [r3, #0]
 802613e:	4413      	add	r3, r2
 8026140:	4a04      	ldr	r2, [pc, #16]	; (8026154 <HAL_IncTick+0x24>)
 8026142:	6013      	str	r3, [r2, #0]
}
 8026144:	bf00      	nop
 8026146:	46bd      	mov	sp, r7
 8026148:	f85d 7b04 	ldr.w	r7, [sp], #4
 802614c:	4770      	bx	lr
 802614e:	bf00      	nop
 8026150:	2000001c 	.word	0x2000001c
 8026154:	200009c0 	.word	0x200009c0

08026158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8026158:	b480      	push	{r7}
 802615a:	af00      	add	r7, sp, #0
  return uwTick;
 802615c:	4b03      	ldr	r3, [pc, #12]	; (802616c <HAL_GetTick+0x14>)
 802615e:	681b      	ldr	r3, [r3, #0]
}
 8026160:	4618      	mov	r0, r3
 8026162:	46bd      	mov	sp, r7
 8026164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026168:	4770      	bx	lr
 802616a:	bf00      	nop
 802616c:	200009c0 	.word	0x200009c0

08026170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8026170:	b580      	push	{r7, lr}
 8026172:	b084      	sub	sp, #16
 8026174:	af00      	add	r7, sp, #0
 8026176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8026178:	f7ff ffee 	bl	8026158 <HAL_GetTick>
 802617c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802617e:	687b      	ldr	r3, [r7, #4]
 8026180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8026182:	68fb      	ldr	r3, [r7, #12]
 8026184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026188:	d005      	beq.n	8026196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802618a:	4b09      	ldr	r3, [pc, #36]	; (80261b0 <HAL_Delay+0x40>)
 802618c:	781b      	ldrb	r3, [r3, #0]
 802618e:	461a      	mov	r2, r3
 8026190:	68fb      	ldr	r3, [r7, #12]
 8026192:	4413      	add	r3, r2
 8026194:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8026196:	bf00      	nop
 8026198:	f7ff ffde 	bl	8026158 <HAL_GetTick>
 802619c:	4602      	mov	r2, r0
 802619e:	68bb      	ldr	r3, [r7, #8]
 80261a0:	1ad3      	subs	r3, r2, r3
 80261a2:	68fa      	ldr	r2, [r7, #12]
 80261a4:	429a      	cmp	r2, r3
 80261a6:	d8f7      	bhi.n	8026198 <HAL_Delay+0x28>
  {
  }
}
 80261a8:	bf00      	nop
 80261aa:	3710      	adds	r7, #16
 80261ac:	46bd      	mov	sp, r7
 80261ae:	bd80      	pop	{r7, pc}
 80261b0:	2000001c 	.word	0x2000001c

080261b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80261b4:	b580      	push	{r7, lr}
 80261b6:	b084      	sub	sp, #16
 80261b8:	af00      	add	r7, sp, #0
 80261ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80261bc:	2300      	movs	r3, #0
 80261be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80261c0:	687b      	ldr	r3, [r7, #4]
 80261c2:	2b00      	cmp	r3, #0
 80261c4:	d101      	bne.n	80261ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80261c6:	2301      	movs	r3, #1
 80261c8:	e033      	b.n	8026232 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80261ca:	687b      	ldr	r3, [r7, #4]
 80261cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80261ce:	2b00      	cmp	r3, #0
 80261d0:	d109      	bne.n	80261e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80261d2:	6878      	ldr	r0, [r7, #4]
 80261d4:	f7ff f94c 	bl	8025470 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80261d8:	687b      	ldr	r3, [r7, #4]
 80261da:	2200      	movs	r2, #0
 80261dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80261de:	687b      	ldr	r3, [r7, #4]
 80261e0:	2200      	movs	r2, #0
 80261e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80261e6:	687b      	ldr	r3, [r7, #4]
 80261e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80261ea:	f003 0310 	and.w	r3, r3, #16
 80261ee:	2b00      	cmp	r3, #0
 80261f0:	d118      	bne.n	8026224 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80261f2:	687b      	ldr	r3, [r7, #4]
 80261f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80261f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80261fa:	f023 0302 	bic.w	r3, r3, #2
 80261fe:	f043 0202 	orr.w	r2, r3, #2
 8026202:	687b      	ldr	r3, [r7, #4]
 8026204:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8026206:	6878      	ldr	r0, [r7, #4]
 8026208:	f000 fa4a 	bl	80266a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 802620c:	687b      	ldr	r3, [r7, #4]
 802620e:	2200      	movs	r2, #0
 8026210:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8026212:	687b      	ldr	r3, [r7, #4]
 8026214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026216:	f023 0303 	bic.w	r3, r3, #3
 802621a:	f043 0201 	orr.w	r2, r3, #1
 802621e:	687b      	ldr	r3, [r7, #4]
 8026220:	641a      	str	r2, [r3, #64]	; 0x40
 8026222:	e001      	b.n	8026228 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8026224:	2301      	movs	r3, #1
 8026226:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8026228:	687b      	ldr	r3, [r7, #4]
 802622a:	2200      	movs	r2, #0
 802622c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8026230:	7bfb      	ldrb	r3, [r7, #15]
}
 8026232:	4618      	mov	r0, r3
 8026234:	3710      	adds	r7, #16
 8026236:	46bd      	mov	sp, r7
 8026238:	bd80      	pop	{r7, pc}
	...

0802623c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 802623c:	b580      	push	{r7, lr}
 802623e:	b086      	sub	sp, #24
 8026240:	af00      	add	r7, sp, #0
 8026242:	60f8      	str	r0, [r7, #12]
 8026244:	60b9      	str	r1, [r7, #8]
 8026246:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8026248:	2300      	movs	r3, #0
 802624a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802624c:	68fb      	ldr	r3, [r7, #12]
 802624e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026252:	2b01      	cmp	r3, #1
 8026254:	d101      	bne.n	802625a <HAL_ADC_Start_DMA+0x1e>
 8026256:	2302      	movs	r3, #2
 8026258:	e0cc      	b.n	80263f4 <HAL_ADC_Start_DMA+0x1b8>
 802625a:	68fb      	ldr	r3, [r7, #12]
 802625c:	2201      	movs	r2, #1
 802625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8026262:	68fb      	ldr	r3, [r7, #12]
 8026264:	681b      	ldr	r3, [r3, #0]
 8026266:	689b      	ldr	r3, [r3, #8]
 8026268:	f003 0301 	and.w	r3, r3, #1
 802626c:	2b01      	cmp	r3, #1
 802626e:	d018      	beq.n	80262a2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8026270:	68fb      	ldr	r3, [r7, #12]
 8026272:	681b      	ldr	r3, [r3, #0]
 8026274:	689a      	ldr	r2, [r3, #8]
 8026276:	68fb      	ldr	r3, [r7, #12]
 8026278:	681b      	ldr	r3, [r3, #0]
 802627a:	f042 0201 	orr.w	r2, r2, #1
 802627e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8026280:	4b5e      	ldr	r3, [pc, #376]	; (80263fc <HAL_ADC_Start_DMA+0x1c0>)
 8026282:	681b      	ldr	r3, [r3, #0]
 8026284:	4a5e      	ldr	r2, [pc, #376]	; (8026400 <HAL_ADC_Start_DMA+0x1c4>)
 8026286:	fba2 2303 	umull	r2, r3, r2, r3
 802628a:	0c9a      	lsrs	r2, r3, #18
 802628c:	4613      	mov	r3, r2
 802628e:	005b      	lsls	r3, r3, #1
 8026290:	4413      	add	r3, r2
 8026292:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8026294:	e002      	b.n	802629c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8026296:	693b      	ldr	r3, [r7, #16]
 8026298:	3b01      	subs	r3, #1
 802629a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 802629c:	693b      	ldr	r3, [r7, #16]
 802629e:	2b00      	cmp	r3, #0
 80262a0:	d1f9      	bne.n	8026296 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80262a2:	68fb      	ldr	r3, [r7, #12]
 80262a4:	681b      	ldr	r3, [r3, #0]
 80262a6:	689b      	ldr	r3, [r3, #8]
 80262a8:	f003 0301 	and.w	r3, r3, #1
 80262ac:	2b01      	cmp	r3, #1
 80262ae:	f040 80a0 	bne.w	80263f2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80262b2:	68fb      	ldr	r3, [r7, #12]
 80262b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80262b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80262ba:	f023 0301 	bic.w	r3, r3, #1
 80262be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80262c2:	68fb      	ldr	r3, [r7, #12]
 80262c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80262c6:	68fb      	ldr	r3, [r7, #12]
 80262c8:	681b      	ldr	r3, [r3, #0]
 80262ca:	685b      	ldr	r3, [r3, #4]
 80262cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80262d0:	2b00      	cmp	r3, #0
 80262d2:	d007      	beq.n	80262e4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80262d4:	68fb      	ldr	r3, [r7, #12]
 80262d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80262d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80262dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80262e0:	68fb      	ldr	r3, [r7, #12]
 80262e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80262e4:	68fb      	ldr	r3, [r7, #12]
 80262e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80262e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80262ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80262f0:	d106      	bne.n	8026300 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80262f2:	68fb      	ldr	r3, [r7, #12]
 80262f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80262f6:	f023 0206 	bic.w	r2, r3, #6
 80262fa:	68fb      	ldr	r3, [r7, #12]
 80262fc:	645a      	str	r2, [r3, #68]	; 0x44
 80262fe:	e002      	b.n	8026306 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8026300:	68fb      	ldr	r3, [r7, #12]
 8026302:	2200      	movs	r2, #0
 8026304:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8026306:	68fb      	ldr	r3, [r7, #12]
 8026308:	2200      	movs	r2, #0
 802630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802630e:	4b3d      	ldr	r3, [pc, #244]	; (8026404 <HAL_ADC_Start_DMA+0x1c8>)
 8026310:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8026312:	68fb      	ldr	r3, [r7, #12]
 8026314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026316:	4a3c      	ldr	r2, [pc, #240]	; (8026408 <HAL_ADC_Start_DMA+0x1cc>)
 8026318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 802631a:	68fb      	ldr	r3, [r7, #12]
 802631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802631e:	4a3b      	ldr	r2, [pc, #236]	; (802640c <HAL_ADC_Start_DMA+0x1d0>)
 8026320:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8026322:	68fb      	ldr	r3, [r7, #12]
 8026324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026326:	4a3a      	ldr	r2, [pc, #232]	; (8026410 <HAL_ADC_Start_DMA+0x1d4>)
 8026328:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 802632a:	68fb      	ldr	r3, [r7, #12]
 802632c:	681b      	ldr	r3, [r3, #0]
 802632e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8026332:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8026334:	68fb      	ldr	r3, [r7, #12]
 8026336:	681b      	ldr	r3, [r3, #0]
 8026338:	685a      	ldr	r2, [r3, #4]
 802633a:	68fb      	ldr	r3, [r7, #12]
 802633c:	681b      	ldr	r3, [r3, #0]
 802633e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8026342:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8026344:	68fb      	ldr	r3, [r7, #12]
 8026346:	681b      	ldr	r3, [r3, #0]
 8026348:	689a      	ldr	r2, [r3, #8]
 802634a:	68fb      	ldr	r3, [r7, #12]
 802634c:	681b      	ldr	r3, [r3, #0]
 802634e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8026352:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8026354:	68fb      	ldr	r3, [r7, #12]
 8026356:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8026358:	68fb      	ldr	r3, [r7, #12]
 802635a:	681b      	ldr	r3, [r3, #0]
 802635c:	334c      	adds	r3, #76	; 0x4c
 802635e:	4619      	mov	r1, r3
 8026360:	68ba      	ldr	r2, [r7, #8]
 8026362:	687b      	ldr	r3, [r7, #4]
 8026364:	f000 fcda 	bl	8026d1c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8026368:	697b      	ldr	r3, [r7, #20]
 802636a:	685b      	ldr	r3, [r3, #4]
 802636c:	f003 031f 	and.w	r3, r3, #31
 8026370:	2b00      	cmp	r3, #0
 8026372:	d12a      	bne.n	80263ca <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8026374:	68fb      	ldr	r3, [r7, #12]
 8026376:	681b      	ldr	r3, [r3, #0]
 8026378:	4a26      	ldr	r2, [pc, #152]	; (8026414 <HAL_ADC_Start_DMA+0x1d8>)
 802637a:	4293      	cmp	r3, r2
 802637c:	d015      	beq.n	80263aa <HAL_ADC_Start_DMA+0x16e>
 802637e:	68fb      	ldr	r3, [r7, #12]
 8026380:	681b      	ldr	r3, [r3, #0]
 8026382:	4a25      	ldr	r2, [pc, #148]	; (8026418 <HAL_ADC_Start_DMA+0x1dc>)
 8026384:	4293      	cmp	r3, r2
 8026386:	d105      	bne.n	8026394 <HAL_ADC_Start_DMA+0x158>
 8026388:	4b1e      	ldr	r3, [pc, #120]	; (8026404 <HAL_ADC_Start_DMA+0x1c8>)
 802638a:	685b      	ldr	r3, [r3, #4]
 802638c:	f003 031f 	and.w	r3, r3, #31
 8026390:	2b00      	cmp	r3, #0
 8026392:	d00a      	beq.n	80263aa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8026394:	68fb      	ldr	r3, [r7, #12]
 8026396:	681b      	ldr	r3, [r3, #0]
 8026398:	4a20      	ldr	r2, [pc, #128]	; (802641c <HAL_ADC_Start_DMA+0x1e0>)
 802639a:	4293      	cmp	r3, r2
 802639c:	d129      	bne.n	80263f2 <HAL_ADC_Start_DMA+0x1b6>
 802639e:	4b19      	ldr	r3, [pc, #100]	; (8026404 <HAL_ADC_Start_DMA+0x1c8>)
 80263a0:	685b      	ldr	r3, [r3, #4]
 80263a2:	f003 031f 	and.w	r3, r3, #31
 80263a6:	2b0f      	cmp	r3, #15
 80263a8:	d823      	bhi.n	80263f2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80263aa:	68fb      	ldr	r3, [r7, #12]
 80263ac:	681b      	ldr	r3, [r3, #0]
 80263ae:	689b      	ldr	r3, [r3, #8]
 80263b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80263b4:	2b00      	cmp	r3, #0
 80263b6:	d11c      	bne.n	80263f2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80263b8:	68fb      	ldr	r3, [r7, #12]
 80263ba:	681b      	ldr	r3, [r3, #0]
 80263bc:	689a      	ldr	r2, [r3, #8]
 80263be:	68fb      	ldr	r3, [r7, #12]
 80263c0:	681b      	ldr	r3, [r3, #0]
 80263c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80263c6:	609a      	str	r2, [r3, #8]
 80263c8:	e013      	b.n	80263f2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80263ca:	68fb      	ldr	r3, [r7, #12]
 80263cc:	681b      	ldr	r3, [r3, #0]
 80263ce:	4a11      	ldr	r2, [pc, #68]	; (8026414 <HAL_ADC_Start_DMA+0x1d8>)
 80263d0:	4293      	cmp	r3, r2
 80263d2:	d10e      	bne.n	80263f2 <HAL_ADC_Start_DMA+0x1b6>
 80263d4:	68fb      	ldr	r3, [r7, #12]
 80263d6:	681b      	ldr	r3, [r3, #0]
 80263d8:	689b      	ldr	r3, [r3, #8]
 80263da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80263de:	2b00      	cmp	r3, #0
 80263e0:	d107      	bne.n	80263f2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80263e2:	68fb      	ldr	r3, [r7, #12]
 80263e4:	681b      	ldr	r3, [r3, #0]
 80263e6:	689a      	ldr	r2, [r3, #8]
 80263e8:	68fb      	ldr	r3, [r7, #12]
 80263ea:	681b      	ldr	r3, [r3, #0]
 80263ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80263f0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80263f2:	2300      	movs	r3, #0
}
 80263f4:	4618      	mov	r0, r3
 80263f6:	3718      	adds	r7, #24
 80263f8:	46bd      	mov	sp, r7
 80263fa:	bd80      	pop	{r7, pc}
 80263fc:	20000014 	.word	0x20000014
 8026400:	431bde83 	.word	0x431bde83
 8026404:	40012300 	.word	0x40012300
 8026408:	08026899 	.word	0x08026899
 802640c:	08026953 	.word	0x08026953
 8026410:	0802696f 	.word	0x0802696f
 8026414:	40012000 	.word	0x40012000
 8026418:	40012100 	.word	0x40012100
 802641c:	40012200 	.word	0x40012200

08026420 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8026420:	b480      	push	{r7}
 8026422:	b083      	sub	sp, #12
 8026424:	af00      	add	r7, sp, #0
 8026426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8026428:	bf00      	nop
 802642a:	370c      	adds	r7, #12
 802642c:	46bd      	mov	sp, r7
 802642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026432:	4770      	bx	lr

08026434 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8026434:	b480      	push	{r7}
 8026436:	b083      	sub	sp, #12
 8026438:	af00      	add	r7, sp, #0
 802643a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 802643c:	bf00      	nop
 802643e:	370c      	adds	r7, #12
 8026440:	46bd      	mov	sp, r7
 8026442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026446:	4770      	bx	lr

08026448 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8026448:	b480      	push	{r7}
 802644a:	b083      	sub	sp, #12
 802644c:	af00      	add	r7, sp, #0
 802644e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8026450:	bf00      	nop
 8026452:	370c      	adds	r7, #12
 8026454:	46bd      	mov	sp, r7
 8026456:	f85d 7b04 	ldr.w	r7, [sp], #4
 802645a:	4770      	bx	lr

0802645c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 802645c:	b480      	push	{r7}
 802645e:	b085      	sub	sp, #20
 8026460:	af00      	add	r7, sp, #0
 8026462:	6078      	str	r0, [r7, #4]
 8026464:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8026466:	2300      	movs	r3, #0
 8026468:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802646a:	687b      	ldr	r3, [r7, #4]
 802646c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026470:	2b01      	cmp	r3, #1
 8026472:	d101      	bne.n	8026478 <HAL_ADC_ConfigChannel+0x1c>
 8026474:	2302      	movs	r3, #2
 8026476:	e105      	b.n	8026684 <HAL_ADC_ConfigChannel+0x228>
 8026478:	687b      	ldr	r3, [r7, #4]
 802647a:	2201      	movs	r2, #1
 802647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8026480:	683b      	ldr	r3, [r7, #0]
 8026482:	681b      	ldr	r3, [r3, #0]
 8026484:	2b09      	cmp	r3, #9
 8026486:	d925      	bls.n	80264d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8026488:	687b      	ldr	r3, [r7, #4]
 802648a:	681b      	ldr	r3, [r3, #0]
 802648c:	68d9      	ldr	r1, [r3, #12]
 802648e:	683b      	ldr	r3, [r7, #0]
 8026490:	681b      	ldr	r3, [r3, #0]
 8026492:	b29b      	uxth	r3, r3
 8026494:	461a      	mov	r2, r3
 8026496:	4613      	mov	r3, r2
 8026498:	005b      	lsls	r3, r3, #1
 802649a:	4413      	add	r3, r2
 802649c:	3b1e      	subs	r3, #30
 802649e:	2207      	movs	r2, #7
 80264a0:	fa02 f303 	lsl.w	r3, r2, r3
 80264a4:	43da      	mvns	r2, r3
 80264a6:	687b      	ldr	r3, [r7, #4]
 80264a8:	681b      	ldr	r3, [r3, #0]
 80264aa:	400a      	ands	r2, r1
 80264ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80264ae:	687b      	ldr	r3, [r7, #4]
 80264b0:	681b      	ldr	r3, [r3, #0]
 80264b2:	68d9      	ldr	r1, [r3, #12]
 80264b4:	683b      	ldr	r3, [r7, #0]
 80264b6:	689a      	ldr	r2, [r3, #8]
 80264b8:	683b      	ldr	r3, [r7, #0]
 80264ba:	681b      	ldr	r3, [r3, #0]
 80264bc:	b29b      	uxth	r3, r3
 80264be:	4618      	mov	r0, r3
 80264c0:	4603      	mov	r3, r0
 80264c2:	005b      	lsls	r3, r3, #1
 80264c4:	4403      	add	r3, r0
 80264c6:	3b1e      	subs	r3, #30
 80264c8:	409a      	lsls	r2, r3
 80264ca:	687b      	ldr	r3, [r7, #4]
 80264cc:	681b      	ldr	r3, [r3, #0]
 80264ce:	430a      	orrs	r2, r1
 80264d0:	60da      	str	r2, [r3, #12]
 80264d2:	e022      	b.n	802651a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80264d4:	687b      	ldr	r3, [r7, #4]
 80264d6:	681b      	ldr	r3, [r3, #0]
 80264d8:	6919      	ldr	r1, [r3, #16]
 80264da:	683b      	ldr	r3, [r7, #0]
 80264dc:	681b      	ldr	r3, [r3, #0]
 80264de:	b29b      	uxth	r3, r3
 80264e0:	461a      	mov	r2, r3
 80264e2:	4613      	mov	r3, r2
 80264e4:	005b      	lsls	r3, r3, #1
 80264e6:	4413      	add	r3, r2
 80264e8:	2207      	movs	r2, #7
 80264ea:	fa02 f303 	lsl.w	r3, r2, r3
 80264ee:	43da      	mvns	r2, r3
 80264f0:	687b      	ldr	r3, [r7, #4]
 80264f2:	681b      	ldr	r3, [r3, #0]
 80264f4:	400a      	ands	r2, r1
 80264f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80264f8:	687b      	ldr	r3, [r7, #4]
 80264fa:	681b      	ldr	r3, [r3, #0]
 80264fc:	6919      	ldr	r1, [r3, #16]
 80264fe:	683b      	ldr	r3, [r7, #0]
 8026500:	689a      	ldr	r2, [r3, #8]
 8026502:	683b      	ldr	r3, [r7, #0]
 8026504:	681b      	ldr	r3, [r3, #0]
 8026506:	b29b      	uxth	r3, r3
 8026508:	4618      	mov	r0, r3
 802650a:	4603      	mov	r3, r0
 802650c:	005b      	lsls	r3, r3, #1
 802650e:	4403      	add	r3, r0
 8026510:	409a      	lsls	r2, r3
 8026512:	687b      	ldr	r3, [r7, #4]
 8026514:	681b      	ldr	r3, [r3, #0]
 8026516:	430a      	orrs	r2, r1
 8026518:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 802651a:	683b      	ldr	r3, [r7, #0]
 802651c:	685b      	ldr	r3, [r3, #4]
 802651e:	2b06      	cmp	r3, #6
 8026520:	d824      	bhi.n	802656c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8026522:	687b      	ldr	r3, [r7, #4]
 8026524:	681b      	ldr	r3, [r3, #0]
 8026526:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8026528:	683b      	ldr	r3, [r7, #0]
 802652a:	685a      	ldr	r2, [r3, #4]
 802652c:	4613      	mov	r3, r2
 802652e:	009b      	lsls	r3, r3, #2
 8026530:	4413      	add	r3, r2
 8026532:	3b05      	subs	r3, #5
 8026534:	221f      	movs	r2, #31
 8026536:	fa02 f303 	lsl.w	r3, r2, r3
 802653a:	43da      	mvns	r2, r3
 802653c:	687b      	ldr	r3, [r7, #4]
 802653e:	681b      	ldr	r3, [r3, #0]
 8026540:	400a      	ands	r2, r1
 8026542:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8026544:	687b      	ldr	r3, [r7, #4]
 8026546:	681b      	ldr	r3, [r3, #0]
 8026548:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802654a:	683b      	ldr	r3, [r7, #0]
 802654c:	681b      	ldr	r3, [r3, #0]
 802654e:	b29b      	uxth	r3, r3
 8026550:	4618      	mov	r0, r3
 8026552:	683b      	ldr	r3, [r7, #0]
 8026554:	685a      	ldr	r2, [r3, #4]
 8026556:	4613      	mov	r3, r2
 8026558:	009b      	lsls	r3, r3, #2
 802655a:	4413      	add	r3, r2
 802655c:	3b05      	subs	r3, #5
 802655e:	fa00 f203 	lsl.w	r2, r0, r3
 8026562:	687b      	ldr	r3, [r7, #4]
 8026564:	681b      	ldr	r3, [r3, #0]
 8026566:	430a      	orrs	r2, r1
 8026568:	635a      	str	r2, [r3, #52]	; 0x34
 802656a:	e04c      	b.n	8026606 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 802656c:	683b      	ldr	r3, [r7, #0]
 802656e:	685b      	ldr	r3, [r3, #4]
 8026570:	2b0c      	cmp	r3, #12
 8026572:	d824      	bhi.n	80265be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8026574:	687b      	ldr	r3, [r7, #4]
 8026576:	681b      	ldr	r3, [r3, #0]
 8026578:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802657a:	683b      	ldr	r3, [r7, #0]
 802657c:	685a      	ldr	r2, [r3, #4]
 802657e:	4613      	mov	r3, r2
 8026580:	009b      	lsls	r3, r3, #2
 8026582:	4413      	add	r3, r2
 8026584:	3b23      	subs	r3, #35	; 0x23
 8026586:	221f      	movs	r2, #31
 8026588:	fa02 f303 	lsl.w	r3, r2, r3
 802658c:	43da      	mvns	r2, r3
 802658e:	687b      	ldr	r3, [r7, #4]
 8026590:	681b      	ldr	r3, [r3, #0]
 8026592:	400a      	ands	r2, r1
 8026594:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8026596:	687b      	ldr	r3, [r7, #4]
 8026598:	681b      	ldr	r3, [r3, #0]
 802659a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802659c:	683b      	ldr	r3, [r7, #0]
 802659e:	681b      	ldr	r3, [r3, #0]
 80265a0:	b29b      	uxth	r3, r3
 80265a2:	4618      	mov	r0, r3
 80265a4:	683b      	ldr	r3, [r7, #0]
 80265a6:	685a      	ldr	r2, [r3, #4]
 80265a8:	4613      	mov	r3, r2
 80265aa:	009b      	lsls	r3, r3, #2
 80265ac:	4413      	add	r3, r2
 80265ae:	3b23      	subs	r3, #35	; 0x23
 80265b0:	fa00 f203 	lsl.w	r2, r0, r3
 80265b4:	687b      	ldr	r3, [r7, #4]
 80265b6:	681b      	ldr	r3, [r3, #0]
 80265b8:	430a      	orrs	r2, r1
 80265ba:	631a      	str	r2, [r3, #48]	; 0x30
 80265bc:	e023      	b.n	8026606 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80265be:	687b      	ldr	r3, [r7, #4]
 80265c0:	681b      	ldr	r3, [r3, #0]
 80265c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80265c4:	683b      	ldr	r3, [r7, #0]
 80265c6:	685a      	ldr	r2, [r3, #4]
 80265c8:	4613      	mov	r3, r2
 80265ca:	009b      	lsls	r3, r3, #2
 80265cc:	4413      	add	r3, r2
 80265ce:	3b41      	subs	r3, #65	; 0x41
 80265d0:	221f      	movs	r2, #31
 80265d2:	fa02 f303 	lsl.w	r3, r2, r3
 80265d6:	43da      	mvns	r2, r3
 80265d8:	687b      	ldr	r3, [r7, #4]
 80265da:	681b      	ldr	r3, [r3, #0]
 80265dc:	400a      	ands	r2, r1
 80265de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80265e0:	687b      	ldr	r3, [r7, #4]
 80265e2:	681b      	ldr	r3, [r3, #0]
 80265e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80265e6:	683b      	ldr	r3, [r7, #0]
 80265e8:	681b      	ldr	r3, [r3, #0]
 80265ea:	b29b      	uxth	r3, r3
 80265ec:	4618      	mov	r0, r3
 80265ee:	683b      	ldr	r3, [r7, #0]
 80265f0:	685a      	ldr	r2, [r3, #4]
 80265f2:	4613      	mov	r3, r2
 80265f4:	009b      	lsls	r3, r3, #2
 80265f6:	4413      	add	r3, r2
 80265f8:	3b41      	subs	r3, #65	; 0x41
 80265fa:	fa00 f203 	lsl.w	r2, r0, r3
 80265fe:	687b      	ldr	r3, [r7, #4]
 8026600:	681b      	ldr	r3, [r3, #0]
 8026602:	430a      	orrs	r2, r1
 8026604:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026606:	4b22      	ldr	r3, [pc, #136]	; (8026690 <HAL_ADC_ConfigChannel+0x234>)
 8026608:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 802660a:	687b      	ldr	r3, [r7, #4]
 802660c:	681b      	ldr	r3, [r3, #0]
 802660e:	4a21      	ldr	r2, [pc, #132]	; (8026694 <HAL_ADC_ConfigChannel+0x238>)
 8026610:	4293      	cmp	r3, r2
 8026612:	d109      	bne.n	8026628 <HAL_ADC_ConfigChannel+0x1cc>
 8026614:	683b      	ldr	r3, [r7, #0]
 8026616:	681b      	ldr	r3, [r3, #0]
 8026618:	2b12      	cmp	r3, #18
 802661a:	d105      	bne.n	8026628 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 802661c:	68fb      	ldr	r3, [r7, #12]
 802661e:	685b      	ldr	r3, [r3, #4]
 8026620:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8026624:	68fb      	ldr	r3, [r7, #12]
 8026626:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8026628:	687b      	ldr	r3, [r7, #4]
 802662a:	681b      	ldr	r3, [r3, #0]
 802662c:	4a19      	ldr	r2, [pc, #100]	; (8026694 <HAL_ADC_ConfigChannel+0x238>)
 802662e:	4293      	cmp	r3, r2
 8026630:	d123      	bne.n	802667a <HAL_ADC_ConfigChannel+0x21e>
 8026632:	683b      	ldr	r3, [r7, #0]
 8026634:	681b      	ldr	r3, [r3, #0]
 8026636:	2b10      	cmp	r3, #16
 8026638:	d003      	beq.n	8026642 <HAL_ADC_ConfigChannel+0x1e6>
 802663a:	683b      	ldr	r3, [r7, #0]
 802663c:	681b      	ldr	r3, [r3, #0]
 802663e:	2b11      	cmp	r3, #17
 8026640:	d11b      	bne.n	802667a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8026642:	68fb      	ldr	r3, [r7, #12]
 8026644:	685b      	ldr	r3, [r3, #4]
 8026646:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 802664a:	68fb      	ldr	r3, [r7, #12]
 802664c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 802664e:	683b      	ldr	r3, [r7, #0]
 8026650:	681b      	ldr	r3, [r3, #0]
 8026652:	2b10      	cmp	r3, #16
 8026654:	d111      	bne.n	802667a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8026656:	4b10      	ldr	r3, [pc, #64]	; (8026698 <HAL_ADC_ConfigChannel+0x23c>)
 8026658:	681b      	ldr	r3, [r3, #0]
 802665a:	4a10      	ldr	r2, [pc, #64]	; (802669c <HAL_ADC_ConfigChannel+0x240>)
 802665c:	fba2 2303 	umull	r2, r3, r2, r3
 8026660:	0c9a      	lsrs	r2, r3, #18
 8026662:	4613      	mov	r3, r2
 8026664:	009b      	lsls	r3, r3, #2
 8026666:	4413      	add	r3, r2
 8026668:	005b      	lsls	r3, r3, #1
 802666a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 802666c:	e002      	b.n	8026674 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 802666e:	68bb      	ldr	r3, [r7, #8]
 8026670:	3b01      	subs	r3, #1
 8026672:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8026674:	68bb      	ldr	r3, [r7, #8]
 8026676:	2b00      	cmp	r3, #0
 8026678:	d1f9      	bne.n	802666e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 802667a:	687b      	ldr	r3, [r7, #4]
 802667c:	2200      	movs	r2, #0
 802667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8026682:	2300      	movs	r3, #0
}
 8026684:	4618      	mov	r0, r3
 8026686:	3714      	adds	r7, #20
 8026688:	46bd      	mov	sp, r7
 802668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802668e:	4770      	bx	lr
 8026690:	40012300 	.word	0x40012300
 8026694:	40012000 	.word	0x40012000
 8026698:	20000014 	.word	0x20000014
 802669c:	431bde83 	.word	0x431bde83

080266a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80266a0:	b480      	push	{r7}
 80266a2:	b085      	sub	sp, #20
 80266a4:	af00      	add	r7, sp, #0
 80266a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80266a8:	4b79      	ldr	r3, [pc, #484]	; (8026890 <ADC_Init+0x1f0>)
 80266aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80266ac:	68fb      	ldr	r3, [r7, #12]
 80266ae:	685b      	ldr	r3, [r3, #4]
 80266b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80266b4:	68fb      	ldr	r3, [r7, #12]
 80266b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80266b8:	68fb      	ldr	r3, [r7, #12]
 80266ba:	685a      	ldr	r2, [r3, #4]
 80266bc:	687b      	ldr	r3, [r7, #4]
 80266be:	685b      	ldr	r3, [r3, #4]
 80266c0:	431a      	orrs	r2, r3
 80266c2:	68fb      	ldr	r3, [r7, #12]
 80266c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80266c6:	687b      	ldr	r3, [r7, #4]
 80266c8:	681b      	ldr	r3, [r3, #0]
 80266ca:	685a      	ldr	r2, [r3, #4]
 80266cc:	687b      	ldr	r3, [r7, #4]
 80266ce:	681b      	ldr	r3, [r3, #0]
 80266d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80266d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80266d6:	687b      	ldr	r3, [r7, #4]
 80266d8:	681b      	ldr	r3, [r3, #0]
 80266da:	6859      	ldr	r1, [r3, #4]
 80266dc:	687b      	ldr	r3, [r7, #4]
 80266de:	691b      	ldr	r3, [r3, #16]
 80266e0:	021a      	lsls	r2, r3, #8
 80266e2:	687b      	ldr	r3, [r7, #4]
 80266e4:	681b      	ldr	r3, [r3, #0]
 80266e6:	430a      	orrs	r2, r1
 80266e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80266ea:	687b      	ldr	r3, [r7, #4]
 80266ec:	681b      	ldr	r3, [r3, #0]
 80266ee:	685a      	ldr	r2, [r3, #4]
 80266f0:	687b      	ldr	r3, [r7, #4]
 80266f2:	681b      	ldr	r3, [r3, #0]
 80266f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80266f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80266fa:	687b      	ldr	r3, [r7, #4]
 80266fc:	681b      	ldr	r3, [r3, #0]
 80266fe:	6859      	ldr	r1, [r3, #4]
 8026700:	687b      	ldr	r3, [r7, #4]
 8026702:	689a      	ldr	r2, [r3, #8]
 8026704:	687b      	ldr	r3, [r7, #4]
 8026706:	681b      	ldr	r3, [r3, #0]
 8026708:	430a      	orrs	r2, r1
 802670a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 802670c:	687b      	ldr	r3, [r7, #4]
 802670e:	681b      	ldr	r3, [r3, #0]
 8026710:	689a      	ldr	r2, [r3, #8]
 8026712:	687b      	ldr	r3, [r7, #4]
 8026714:	681b      	ldr	r3, [r3, #0]
 8026716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802671a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 802671c:	687b      	ldr	r3, [r7, #4]
 802671e:	681b      	ldr	r3, [r3, #0]
 8026720:	6899      	ldr	r1, [r3, #8]
 8026722:	687b      	ldr	r3, [r7, #4]
 8026724:	68da      	ldr	r2, [r3, #12]
 8026726:	687b      	ldr	r3, [r7, #4]
 8026728:	681b      	ldr	r3, [r3, #0]
 802672a:	430a      	orrs	r2, r1
 802672c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 802672e:	687b      	ldr	r3, [r7, #4]
 8026730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026732:	4a58      	ldr	r2, [pc, #352]	; (8026894 <ADC_Init+0x1f4>)
 8026734:	4293      	cmp	r3, r2
 8026736:	d022      	beq.n	802677e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8026738:	687b      	ldr	r3, [r7, #4]
 802673a:	681b      	ldr	r3, [r3, #0]
 802673c:	689a      	ldr	r2, [r3, #8]
 802673e:	687b      	ldr	r3, [r7, #4]
 8026740:	681b      	ldr	r3, [r3, #0]
 8026742:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8026746:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8026748:	687b      	ldr	r3, [r7, #4]
 802674a:	681b      	ldr	r3, [r3, #0]
 802674c:	6899      	ldr	r1, [r3, #8]
 802674e:	687b      	ldr	r3, [r7, #4]
 8026750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026752:	687b      	ldr	r3, [r7, #4]
 8026754:	681b      	ldr	r3, [r3, #0]
 8026756:	430a      	orrs	r2, r1
 8026758:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 802675a:	687b      	ldr	r3, [r7, #4]
 802675c:	681b      	ldr	r3, [r3, #0]
 802675e:	689a      	ldr	r2, [r3, #8]
 8026760:	687b      	ldr	r3, [r7, #4]
 8026762:	681b      	ldr	r3, [r3, #0]
 8026764:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8026768:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 802676a:	687b      	ldr	r3, [r7, #4]
 802676c:	681b      	ldr	r3, [r3, #0]
 802676e:	6899      	ldr	r1, [r3, #8]
 8026770:	687b      	ldr	r3, [r7, #4]
 8026772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026774:	687b      	ldr	r3, [r7, #4]
 8026776:	681b      	ldr	r3, [r3, #0]
 8026778:	430a      	orrs	r2, r1
 802677a:	609a      	str	r2, [r3, #8]
 802677c:	e00f      	b.n	802679e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 802677e:	687b      	ldr	r3, [r7, #4]
 8026780:	681b      	ldr	r3, [r3, #0]
 8026782:	689a      	ldr	r2, [r3, #8]
 8026784:	687b      	ldr	r3, [r7, #4]
 8026786:	681b      	ldr	r3, [r3, #0]
 8026788:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802678c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 802678e:	687b      	ldr	r3, [r7, #4]
 8026790:	681b      	ldr	r3, [r3, #0]
 8026792:	689a      	ldr	r2, [r3, #8]
 8026794:	687b      	ldr	r3, [r7, #4]
 8026796:	681b      	ldr	r3, [r3, #0]
 8026798:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 802679c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 802679e:	687b      	ldr	r3, [r7, #4]
 80267a0:	681b      	ldr	r3, [r3, #0]
 80267a2:	689a      	ldr	r2, [r3, #8]
 80267a4:	687b      	ldr	r3, [r7, #4]
 80267a6:	681b      	ldr	r3, [r3, #0]
 80267a8:	f022 0202 	bic.w	r2, r2, #2
 80267ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80267ae:	687b      	ldr	r3, [r7, #4]
 80267b0:	681b      	ldr	r3, [r3, #0]
 80267b2:	6899      	ldr	r1, [r3, #8]
 80267b4:	687b      	ldr	r3, [r7, #4]
 80267b6:	7e1b      	ldrb	r3, [r3, #24]
 80267b8:	005a      	lsls	r2, r3, #1
 80267ba:	687b      	ldr	r3, [r7, #4]
 80267bc:	681b      	ldr	r3, [r3, #0]
 80267be:	430a      	orrs	r2, r1
 80267c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80267c2:	687b      	ldr	r3, [r7, #4]
 80267c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80267c8:	2b00      	cmp	r3, #0
 80267ca:	d01b      	beq.n	8026804 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80267cc:	687b      	ldr	r3, [r7, #4]
 80267ce:	681b      	ldr	r3, [r3, #0]
 80267d0:	685a      	ldr	r2, [r3, #4]
 80267d2:	687b      	ldr	r3, [r7, #4]
 80267d4:	681b      	ldr	r3, [r3, #0]
 80267d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80267da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80267dc:	687b      	ldr	r3, [r7, #4]
 80267de:	681b      	ldr	r3, [r3, #0]
 80267e0:	685a      	ldr	r2, [r3, #4]
 80267e2:	687b      	ldr	r3, [r7, #4]
 80267e4:	681b      	ldr	r3, [r3, #0]
 80267e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80267ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80267ec:	687b      	ldr	r3, [r7, #4]
 80267ee:	681b      	ldr	r3, [r3, #0]
 80267f0:	6859      	ldr	r1, [r3, #4]
 80267f2:	687b      	ldr	r3, [r7, #4]
 80267f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80267f6:	3b01      	subs	r3, #1
 80267f8:	035a      	lsls	r2, r3, #13
 80267fa:	687b      	ldr	r3, [r7, #4]
 80267fc:	681b      	ldr	r3, [r3, #0]
 80267fe:	430a      	orrs	r2, r1
 8026800:	605a      	str	r2, [r3, #4]
 8026802:	e007      	b.n	8026814 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8026804:	687b      	ldr	r3, [r7, #4]
 8026806:	681b      	ldr	r3, [r3, #0]
 8026808:	685a      	ldr	r2, [r3, #4]
 802680a:	687b      	ldr	r3, [r7, #4]
 802680c:	681b      	ldr	r3, [r3, #0]
 802680e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8026812:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8026814:	687b      	ldr	r3, [r7, #4]
 8026816:	681b      	ldr	r3, [r3, #0]
 8026818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802681a:	687b      	ldr	r3, [r7, #4]
 802681c:	681b      	ldr	r3, [r3, #0]
 802681e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8026822:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8026824:	687b      	ldr	r3, [r7, #4]
 8026826:	681b      	ldr	r3, [r3, #0]
 8026828:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802682a:	687b      	ldr	r3, [r7, #4]
 802682c:	69db      	ldr	r3, [r3, #28]
 802682e:	3b01      	subs	r3, #1
 8026830:	051a      	lsls	r2, r3, #20
 8026832:	687b      	ldr	r3, [r7, #4]
 8026834:	681b      	ldr	r3, [r3, #0]
 8026836:	430a      	orrs	r2, r1
 8026838:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 802683a:	687b      	ldr	r3, [r7, #4]
 802683c:	681b      	ldr	r3, [r3, #0]
 802683e:	689a      	ldr	r2, [r3, #8]
 8026840:	687b      	ldr	r3, [r7, #4]
 8026842:	681b      	ldr	r3, [r3, #0]
 8026844:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8026848:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 802684a:	687b      	ldr	r3, [r7, #4]
 802684c:	681b      	ldr	r3, [r3, #0]
 802684e:	6899      	ldr	r1, [r3, #8]
 8026850:	687b      	ldr	r3, [r7, #4]
 8026852:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8026856:	025a      	lsls	r2, r3, #9
 8026858:	687b      	ldr	r3, [r7, #4]
 802685a:	681b      	ldr	r3, [r3, #0]
 802685c:	430a      	orrs	r2, r1
 802685e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8026860:	687b      	ldr	r3, [r7, #4]
 8026862:	681b      	ldr	r3, [r3, #0]
 8026864:	689a      	ldr	r2, [r3, #8]
 8026866:	687b      	ldr	r3, [r7, #4]
 8026868:	681b      	ldr	r3, [r3, #0]
 802686a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802686e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8026870:	687b      	ldr	r3, [r7, #4]
 8026872:	681b      	ldr	r3, [r3, #0]
 8026874:	6899      	ldr	r1, [r3, #8]
 8026876:	687b      	ldr	r3, [r7, #4]
 8026878:	695b      	ldr	r3, [r3, #20]
 802687a:	029a      	lsls	r2, r3, #10
 802687c:	687b      	ldr	r3, [r7, #4]
 802687e:	681b      	ldr	r3, [r3, #0]
 8026880:	430a      	orrs	r2, r1
 8026882:	609a      	str	r2, [r3, #8]
}
 8026884:	bf00      	nop
 8026886:	3714      	adds	r7, #20
 8026888:	46bd      	mov	sp, r7
 802688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802688e:	4770      	bx	lr
 8026890:	40012300 	.word	0x40012300
 8026894:	0f000001 	.word	0x0f000001

08026898 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026898:	b580      	push	{r7, lr}
 802689a:	b084      	sub	sp, #16
 802689c:	af00      	add	r7, sp, #0
 802689e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80268a0:	687b      	ldr	r3, [r7, #4]
 80268a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80268a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80268a6:	68fb      	ldr	r3, [r7, #12]
 80268a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80268aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80268ae:	2b00      	cmp	r3, #0
 80268b0:	d13c      	bne.n	802692c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80268b2:	68fb      	ldr	r3, [r7, #12]
 80268b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80268b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80268ba:	68fb      	ldr	r3, [r7, #12]
 80268bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80268be:	68fb      	ldr	r3, [r7, #12]
 80268c0:	681b      	ldr	r3, [r3, #0]
 80268c2:	689b      	ldr	r3, [r3, #8]
 80268c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80268c8:	2b00      	cmp	r3, #0
 80268ca:	d12b      	bne.n	8026924 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80268cc:	68fb      	ldr	r3, [r7, #12]
 80268ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80268d0:	2b00      	cmp	r3, #0
 80268d2:	d127      	bne.n	8026924 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80268d4:	68fb      	ldr	r3, [r7, #12]
 80268d6:	681b      	ldr	r3, [r3, #0]
 80268d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80268da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80268de:	2b00      	cmp	r3, #0
 80268e0:	d006      	beq.n	80268f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80268e2:	68fb      	ldr	r3, [r7, #12]
 80268e4:	681b      	ldr	r3, [r3, #0]
 80268e6:	689b      	ldr	r3, [r3, #8]
 80268e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80268ec:	2b00      	cmp	r3, #0
 80268ee:	d119      	bne.n	8026924 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80268f0:	68fb      	ldr	r3, [r7, #12]
 80268f2:	681b      	ldr	r3, [r3, #0]
 80268f4:	685a      	ldr	r2, [r3, #4]
 80268f6:	68fb      	ldr	r3, [r7, #12]
 80268f8:	681b      	ldr	r3, [r3, #0]
 80268fa:	f022 0220 	bic.w	r2, r2, #32
 80268fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8026900:	68fb      	ldr	r3, [r7, #12]
 8026902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026904:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8026908:	68fb      	ldr	r3, [r7, #12]
 802690a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 802690c:	68fb      	ldr	r3, [r7, #12]
 802690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026914:	2b00      	cmp	r3, #0
 8026916:	d105      	bne.n	8026924 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8026918:	68fb      	ldr	r3, [r7, #12]
 802691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802691c:	f043 0201 	orr.w	r2, r3, #1
 8026920:	68fb      	ldr	r3, [r7, #12]
 8026922:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8026924:	68f8      	ldr	r0, [r7, #12]
 8026926:	f7ff fd7b 	bl	8026420 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 802692a:	e00e      	b.n	802694a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 802692c:	68fb      	ldr	r3, [r7, #12]
 802692e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026930:	f003 0310 	and.w	r3, r3, #16
 8026934:	2b00      	cmp	r3, #0
 8026936:	d003      	beq.n	8026940 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8026938:	68f8      	ldr	r0, [r7, #12]
 802693a:	f7ff fd85 	bl	8026448 <HAL_ADC_ErrorCallback>
}
 802693e:	e004      	b.n	802694a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8026940:	68fb      	ldr	r3, [r7, #12]
 8026942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8026946:	6878      	ldr	r0, [r7, #4]
 8026948:	4798      	blx	r3
}
 802694a:	bf00      	nop
 802694c:	3710      	adds	r7, #16
 802694e:	46bd      	mov	sp, r7
 8026950:	bd80      	pop	{r7, pc}

08026952 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026952:	b580      	push	{r7, lr}
 8026954:	b084      	sub	sp, #16
 8026956:	af00      	add	r7, sp, #0
 8026958:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802695a:	687b      	ldr	r3, [r7, #4]
 802695c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802695e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8026960:	68f8      	ldr	r0, [r7, #12]
 8026962:	f7ff fd67 	bl	8026434 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026966:	bf00      	nop
 8026968:	3710      	adds	r7, #16
 802696a:	46bd      	mov	sp, r7
 802696c:	bd80      	pop	{r7, pc}

0802696e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 802696e:	b580      	push	{r7, lr}
 8026970:	b084      	sub	sp, #16
 8026972:	af00      	add	r7, sp, #0
 8026974:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026976:	687b      	ldr	r3, [r7, #4]
 8026978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802697a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 802697c:	68fb      	ldr	r3, [r7, #12]
 802697e:	2240      	movs	r2, #64	; 0x40
 8026980:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8026982:	68fb      	ldr	r3, [r7, #12]
 8026984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026986:	f043 0204 	orr.w	r2, r3, #4
 802698a:	68fb      	ldr	r3, [r7, #12]
 802698c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 802698e:	68f8      	ldr	r0, [r7, #12]
 8026990:	f7ff fd5a 	bl	8026448 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026994:	bf00      	nop
 8026996:	3710      	adds	r7, #16
 8026998:	46bd      	mov	sp, r7
 802699a:	bd80      	pop	{r7, pc}

0802699c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802699c:	b480      	push	{r7}
 802699e:	b085      	sub	sp, #20
 80269a0:	af00      	add	r7, sp, #0
 80269a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80269a4:	687b      	ldr	r3, [r7, #4]
 80269a6:	f003 0307 	and.w	r3, r3, #7
 80269aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80269ac:	4b0c      	ldr	r3, [pc, #48]	; (80269e0 <__NVIC_SetPriorityGrouping+0x44>)
 80269ae:	68db      	ldr	r3, [r3, #12]
 80269b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80269b2:	68ba      	ldr	r2, [r7, #8]
 80269b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80269b8:	4013      	ands	r3, r2
 80269ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80269bc:	68fb      	ldr	r3, [r7, #12]
 80269be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80269c0:	68bb      	ldr	r3, [r7, #8]
 80269c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80269c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80269c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80269cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80269ce:	4a04      	ldr	r2, [pc, #16]	; (80269e0 <__NVIC_SetPriorityGrouping+0x44>)
 80269d0:	68bb      	ldr	r3, [r7, #8]
 80269d2:	60d3      	str	r3, [r2, #12]
}
 80269d4:	bf00      	nop
 80269d6:	3714      	adds	r7, #20
 80269d8:	46bd      	mov	sp, r7
 80269da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269de:	4770      	bx	lr
 80269e0:	e000ed00 	.word	0xe000ed00

080269e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80269e4:	b480      	push	{r7}
 80269e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80269e8:	4b04      	ldr	r3, [pc, #16]	; (80269fc <__NVIC_GetPriorityGrouping+0x18>)
 80269ea:	68db      	ldr	r3, [r3, #12]
 80269ec:	0a1b      	lsrs	r3, r3, #8
 80269ee:	f003 0307 	and.w	r3, r3, #7
}
 80269f2:	4618      	mov	r0, r3
 80269f4:	46bd      	mov	sp, r7
 80269f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269fa:	4770      	bx	lr
 80269fc:	e000ed00 	.word	0xe000ed00

08026a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026a00:	b480      	push	{r7}
 8026a02:	b083      	sub	sp, #12
 8026a04:	af00      	add	r7, sp, #0
 8026a06:	4603      	mov	r3, r0
 8026a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026a0e:	2b00      	cmp	r3, #0
 8026a10:	db0b      	blt.n	8026a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8026a12:	79fb      	ldrb	r3, [r7, #7]
 8026a14:	f003 021f 	and.w	r2, r3, #31
 8026a18:	4907      	ldr	r1, [pc, #28]	; (8026a38 <__NVIC_EnableIRQ+0x38>)
 8026a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026a1e:	095b      	lsrs	r3, r3, #5
 8026a20:	2001      	movs	r0, #1
 8026a22:	fa00 f202 	lsl.w	r2, r0, r2
 8026a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8026a2a:	bf00      	nop
 8026a2c:	370c      	adds	r7, #12
 8026a2e:	46bd      	mov	sp, r7
 8026a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a34:	4770      	bx	lr
 8026a36:	bf00      	nop
 8026a38:	e000e100 	.word	0xe000e100

08026a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8026a3c:	b480      	push	{r7}
 8026a3e:	b083      	sub	sp, #12
 8026a40:	af00      	add	r7, sp, #0
 8026a42:	4603      	mov	r3, r0
 8026a44:	6039      	str	r1, [r7, #0]
 8026a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026a4c:	2b00      	cmp	r3, #0
 8026a4e:	db0a      	blt.n	8026a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026a50:	683b      	ldr	r3, [r7, #0]
 8026a52:	b2da      	uxtb	r2, r3
 8026a54:	490c      	ldr	r1, [pc, #48]	; (8026a88 <__NVIC_SetPriority+0x4c>)
 8026a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026a5a:	0112      	lsls	r2, r2, #4
 8026a5c:	b2d2      	uxtb	r2, r2
 8026a5e:	440b      	add	r3, r1
 8026a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8026a64:	e00a      	b.n	8026a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026a66:	683b      	ldr	r3, [r7, #0]
 8026a68:	b2da      	uxtb	r2, r3
 8026a6a:	4908      	ldr	r1, [pc, #32]	; (8026a8c <__NVIC_SetPriority+0x50>)
 8026a6c:	79fb      	ldrb	r3, [r7, #7]
 8026a6e:	f003 030f 	and.w	r3, r3, #15
 8026a72:	3b04      	subs	r3, #4
 8026a74:	0112      	lsls	r2, r2, #4
 8026a76:	b2d2      	uxtb	r2, r2
 8026a78:	440b      	add	r3, r1
 8026a7a:	761a      	strb	r2, [r3, #24]
}
 8026a7c:	bf00      	nop
 8026a7e:	370c      	adds	r7, #12
 8026a80:	46bd      	mov	sp, r7
 8026a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a86:	4770      	bx	lr
 8026a88:	e000e100 	.word	0xe000e100
 8026a8c:	e000ed00 	.word	0xe000ed00

08026a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8026a90:	b480      	push	{r7}
 8026a92:	b089      	sub	sp, #36	; 0x24
 8026a94:	af00      	add	r7, sp, #0
 8026a96:	60f8      	str	r0, [r7, #12]
 8026a98:	60b9      	str	r1, [r7, #8]
 8026a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8026a9c:	68fb      	ldr	r3, [r7, #12]
 8026a9e:	f003 0307 	and.w	r3, r3, #7
 8026aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8026aa4:	69fb      	ldr	r3, [r7, #28]
 8026aa6:	f1c3 0307 	rsb	r3, r3, #7
 8026aaa:	2b04      	cmp	r3, #4
 8026aac:	bf28      	it	cs
 8026aae:	2304      	movcs	r3, #4
 8026ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8026ab2:	69fb      	ldr	r3, [r7, #28]
 8026ab4:	3304      	adds	r3, #4
 8026ab6:	2b06      	cmp	r3, #6
 8026ab8:	d902      	bls.n	8026ac0 <NVIC_EncodePriority+0x30>
 8026aba:	69fb      	ldr	r3, [r7, #28]
 8026abc:	3b03      	subs	r3, #3
 8026abe:	e000      	b.n	8026ac2 <NVIC_EncodePriority+0x32>
 8026ac0:	2300      	movs	r3, #0
 8026ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8026ac8:	69bb      	ldr	r3, [r7, #24]
 8026aca:	fa02 f303 	lsl.w	r3, r2, r3
 8026ace:	43da      	mvns	r2, r3
 8026ad0:	68bb      	ldr	r3, [r7, #8]
 8026ad2:	401a      	ands	r2, r3
 8026ad4:	697b      	ldr	r3, [r7, #20]
 8026ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8026ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8026adc:	697b      	ldr	r3, [r7, #20]
 8026ade:	fa01 f303 	lsl.w	r3, r1, r3
 8026ae2:	43d9      	mvns	r1, r3
 8026ae4:	687b      	ldr	r3, [r7, #4]
 8026ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026ae8:	4313      	orrs	r3, r2
         );
}
 8026aea:	4618      	mov	r0, r3
 8026aec:	3724      	adds	r7, #36	; 0x24
 8026aee:	46bd      	mov	sp, r7
 8026af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026af4:	4770      	bx	lr
	...

08026af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8026af8:	b580      	push	{r7, lr}
 8026afa:	b082      	sub	sp, #8
 8026afc:	af00      	add	r7, sp, #0
 8026afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8026b00:	687b      	ldr	r3, [r7, #4]
 8026b02:	3b01      	subs	r3, #1
 8026b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8026b08:	d301      	bcc.n	8026b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8026b0a:	2301      	movs	r3, #1
 8026b0c:	e00f      	b.n	8026b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8026b0e:	4a0a      	ldr	r2, [pc, #40]	; (8026b38 <SysTick_Config+0x40>)
 8026b10:	687b      	ldr	r3, [r7, #4]
 8026b12:	3b01      	subs	r3, #1
 8026b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8026b16:	210f      	movs	r1, #15
 8026b18:	f04f 30ff 	mov.w	r0, #4294967295
 8026b1c:	f7ff ff8e 	bl	8026a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8026b20:	4b05      	ldr	r3, [pc, #20]	; (8026b38 <SysTick_Config+0x40>)
 8026b22:	2200      	movs	r2, #0
 8026b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8026b26:	4b04      	ldr	r3, [pc, #16]	; (8026b38 <SysTick_Config+0x40>)
 8026b28:	2207      	movs	r2, #7
 8026b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8026b2c:	2300      	movs	r3, #0
}
 8026b2e:	4618      	mov	r0, r3
 8026b30:	3708      	adds	r7, #8
 8026b32:	46bd      	mov	sp, r7
 8026b34:	bd80      	pop	{r7, pc}
 8026b36:	bf00      	nop
 8026b38:	e000e010 	.word	0xe000e010

08026b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026b3c:	b580      	push	{r7, lr}
 8026b3e:	b082      	sub	sp, #8
 8026b40:	af00      	add	r7, sp, #0
 8026b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8026b44:	6878      	ldr	r0, [r7, #4]
 8026b46:	f7ff ff29 	bl	802699c <__NVIC_SetPriorityGrouping>
}
 8026b4a:	bf00      	nop
 8026b4c:	3708      	adds	r7, #8
 8026b4e:	46bd      	mov	sp, r7
 8026b50:	bd80      	pop	{r7, pc}

08026b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8026b52:	b580      	push	{r7, lr}
 8026b54:	b086      	sub	sp, #24
 8026b56:	af00      	add	r7, sp, #0
 8026b58:	4603      	mov	r3, r0
 8026b5a:	60b9      	str	r1, [r7, #8]
 8026b5c:	607a      	str	r2, [r7, #4]
 8026b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8026b60:	2300      	movs	r3, #0
 8026b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8026b64:	f7ff ff3e 	bl	80269e4 <__NVIC_GetPriorityGrouping>
 8026b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8026b6a:	687a      	ldr	r2, [r7, #4]
 8026b6c:	68b9      	ldr	r1, [r7, #8]
 8026b6e:	6978      	ldr	r0, [r7, #20]
 8026b70:	f7ff ff8e 	bl	8026a90 <NVIC_EncodePriority>
 8026b74:	4602      	mov	r2, r0
 8026b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8026b7a:	4611      	mov	r1, r2
 8026b7c:	4618      	mov	r0, r3
 8026b7e:	f7ff ff5d 	bl	8026a3c <__NVIC_SetPriority>
}
 8026b82:	bf00      	nop
 8026b84:	3718      	adds	r7, #24
 8026b86:	46bd      	mov	sp, r7
 8026b88:	bd80      	pop	{r7, pc}

08026b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026b8a:	b580      	push	{r7, lr}
 8026b8c:	b082      	sub	sp, #8
 8026b8e:	af00      	add	r7, sp, #0
 8026b90:	4603      	mov	r3, r0
 8026b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8026b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026b98:	4618      	mov	r0, r3
 8026b9a:	f7ff ff31 	bl	8026a00 <__NVIC_EnableIRQ>
}
 8026b9e:	bf00      	nop
 8026ba0:	3708      	adds	r7, #8
 8026ba2:	46bd      	mov	sp, r7
 8026ba4:	bd80      	pop	{r7, pc}

08026ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8026ba6:	b580      	push	{r7, lr}
 8026ba8:	b082      	sub	sp, #8
 8026baa:	af00      	add	r7, sp, #0
 8026bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8026bae:	6878      	ldr	r0, [r7, #4]
 8026bb0:	f7ff ffa2 	bl	8026af8 <SysTick_Config>
 8026bb4:	4603      	mov	r3, r0
}
 8026bb6:	4618      	mov	r0, r3
 8026bb8:	3708      	adds	r7, #8
 8026bba:	46bd      	mov	sp, r7
 8026bbc:	bd80      	pop	{r7, pc}
	...

08026bc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8026bc0:	b580      	push	{r7, lr}
 8026bc2:	b086      	sub	sp, #24
 8026bc4:	af00      	add	r7, sp, #0
 8026bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8026bc8:	2300      	movs	r3, #0
 8026bca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8026bcc:	f7ff fac4 	bl	8026158 <HAL_GetTick>
 8026bd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8026bd2:	687b      	ldr	r3, [r7, #4]
 8026bd4:	2b00      	cmp	r3, #0
 8026bd6:	d101      	bne.n	8026bdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8026bd8:	2301      	movs	r3, #1
 8026bda:	e099      	b.n	8026d10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8026bdc:	687b      	ldr	r3, [r7, #4]
 8026bde:	2200      	movs	r2, #0
 8026be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8026be4:	687b      	ldr	r3, [r7, #4]
 8026be6:	2202      	movs	r2, #2
 8026be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8026bec:	687b      	ldr	r3, [r7, #4]
 8026bee:	681b      	ldr	r3, [r3, #0]
 8026bf0:	681a      	ldr	r2, [r3, #0]
 8026bf2:	687b      	ldr	r3, [r7, #4]
 8026bf4:	681b      	ldr	r3, [r3, #0]
 8026bf6:	f022 0201 	bic.w	r2, r2, #1
 8026bfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026bfc:	e00f      	b.n	8026c1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8026bfe:	f7ff faab 	bl	8026158 <HAL_GetTick>
 8026c02:	4602      	mov	r2, r0
 8026c04:	693b      	ldr	r3, [r7, #16]
 8026c06:	1ad3      	subs	r3, r2, r3
 8026c08:	2b05      	cmp	r3, #5
 8026c0a:	d908      	bls.n	8026c1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8026c0c:	687b      	ldr	r3, [r7, #4]
 8026c0e:	2220      	movs	r2, #32
 8026c10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8026c12:	687b      	ldr	r3, [r7, #4]
 8026c14:	2203      	movs	r2, #3
 8026c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8026c1a:	2303      	movs	r3, #3
 8026c1c:	e078      	b.n	8026d10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026c1e:	687b      	ldr	r3, [r7, #4]
 8026c20:	681b      	ldr	r3, [r3, #0]
 8026c22:	681b      	ldr	r3, [r3, #0]
 8026c24:	f003 0301 	and.w	r3, r3, #1
 8026c28:	2b00      	cmp	r3, #0
 8026c2a:	d1e8      	bne.n	8026bfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8026c2c:	687b      	ldr	r3, [r7, #4]
 8026c2e:	681b      	ldr	r3, [r3, #0]
 8026c30:	681b      	ldr	r3, [r3, #0]
 8026c32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8026c34:	697a      	ldr	r2, [r7, #20]
 8026c36:	4b38      	ldr	r3, [pc, #224]	; (8026d18 <HAL_DMA_Init+0x158>)
 8026c38:	4013      	ands	r3, r2
 8026c3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026c3c:	687b      	ldr	r3, [r7, #4]
 8026c3e:	685a      	ldr	r2, [r3, #4]
 8026c40:	687b      	ldr	r3, [r7, #4]
 8026c42:	689b      	ldr	r3, [r3, #8]
 8026c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026c46:	687b      	ldr	r3, [r7, #4]
 8026c48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026c4c:	687b      	ldr	r3, [r7, #4]
 8026c4e:	691b      	ldr	r3, [r3, #16]
 8026c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026c52:	687b      	ldr	r3, [r7, #4]
 8026c54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026c58:	687b      	ldr	r3, [r7, #4]
 8026c5a:	699b      	ldr	r3, [r3, #24]
 8026c5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026c5e:	687b      	ldr	r3, [r7, #4]
 8026c60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026c64:	687b      	ldr	r3, [r7, #4]
 8026c66:	6a1b      	ldr	r3, [r3, #32]
 8026c68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026c6a:	697a      	ldr	r2, [r7, #20]
 8026c6c:	4313      	orrs	r3, r2
 8026c6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026c70:	687b      	ldr	r3, [r7, #4]
 8026c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026c74:	2b04      	cmp	r3, #4
 8026c76:	d107      	bne.n	8026c88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8026c78:	687b      	ldr	r3, [r7, #4]
 8026c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026c7c:	687b      	ldr	r3, [r7, #4]
 8026c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026c80:	4313      	orrs	r3, r2
 8026c82:	697a      	ldr	r2, [r7, #20]
 8026c84:	4313      	orrs	r3, r2
 8026c86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8026c88:	687b      	ldr	r3, [r7, #4]
 8026c8a:	681b      	ldr	r3, [r3, #0]
 8026c8c:	697a      	ldr	r2, [r7, #20]
 8026c8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8026c90:	687b      	ldr	r3, [r7, #4]
 8026c92:	681b      	ldr	r3, [r3, #0]
 8026c94:	695b      	ldr	r3, [r3, #20]
 8026c96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8026c98:	697b      	ldr	r3, [r7, #20]
 8026c9a:	f023 0307 	bic.w	r3, r3, #7
 8026c9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8026ca0:	687b      	ldr	r3, [r7, #4]
 8026ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026ca4:	697a      	ldr	r2, [r7, #20]
 8026ca6:	4313      	orrs	r3, r2
 8026ca8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026caa:	687b      	ldr	r3, [r7, #4]
 8026cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026cae:	2b04      	cmp	r3, #4
 8026cb0:	d117      	bne.n	8026ce2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8026cb2:	687b      	ldr	r3, [r7, #4]
 8026cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026cb6:	697a      	ldr	r2, [r7, #20]
 8026cb8:	4313      	orrs	r3, r2
 8026cba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8026cbc:	687b      	ldr	r3, [r7, #4]
 8026cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026cc0:	2b00      	cmp	r3, #0
 8026cc2:	d00e      	beq.n	8026ce2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8026cc4:	6878      	ldr	r0, [r7, #4]
 8026cc6:	f000 fa6f 	bl	80271a8 <DMA_CheckFifoParam>
 8026cca:	4603      	mov	r3, r0
 8026ccc:	2b00      	cmp	r3, #0
 8026cce:	d008      	beq.n	8026ce2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8026cd0:	687b      	ldr	r3, [r7, #4]
 8026cd2:	2240      	movs	r2, #64	; 0x40
 8026cd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8026cd6:	687b      	ldr	r3, [r7, #4]
 8026cd8:	2201      	movs	r2, #1
 8026cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8026cde:	2301      	movs	r3, #1
 8026ce0:	e016      	b.n	8026d10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8026ce2:	687b      	ldr	r3, [r7, #4]
 8026ce4:	681b      	ldr	r3, [r3, #0]
 8026ce6:	697a      	ldr	r2, [r7, #20]
 8026ce8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8026cea:	6878      	ldr	r0, [r7, #4]
 8026cec:	f000 fa26 	bl	802713c <DMA_CalcBaseAndBitshift>
 8026cf0:	4603      	mov	r3, r0
 8026cf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026cf4:	687b      	ldr	r3, [r7, #4]
 8026cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026cf8:	223f      	movs	r2, #63	; 0x3f
 8026cfa:	409a      	lsls	r2, r3
 8026cfc:	68fb      	ldr	r3, [r7, #12]
 8026cfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8026d00:	687b      	ldr	r3, [r7, #4]
 8026d02:	2200      	movs	r2, #0
 8026d04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8026d06:	687b      	ldr	r3, [r7, #4]
 8026d08:	2201      	movs	r2, #1
 8026d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8026d0e:	2300      	movs	r3, #0
}
 8026d10:	4618      	mov	r0, r3
 8026d12:	3718      	adds	r7, #24
 8026d14:	46bd      	mov	sp, r7
 8026d16:	bd80      	pop	{r7, pc}
 8026d18:	f010803f 	.word	0xf010803f

08026d1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8026d1c:	b580      	push	{r7, lr}
 8026d1e:	b086      	sub	sp, #24
 8026d20:	af00      	add	r7, sp, #0
 8026d22:	60f8      	str	r0, [r7, #12]
 8026d24:	60b9      	str	r1, [r7, #8]
 8026d26:	607a      	str	r2, [r7, #4]
 8026d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8026d2a:	2300      	movs	r3, #0
 8026d2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8026d2e:	68fb      	ldr	r3, [r7, #12]
 8026d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8026d32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8026d34:	68fb      	ldr	r3, [r7, #12]
 8026d36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8026d3a:	2b01      	cmp	r3, #1
 8026d3c:	d101      	bne.n	8026d42 <HAL_DMA_Start_IT+0x26>
 8026d3e:	2302      	movs	r3, #2
 8026d40:	e040      	b.n	8026dc4 <HAL_DMA_Start_IT+0xa8>
 8026d42:	68fb      	ldr	r3, [r7, #12]
 8026d44:	2201      	movs	r2, #1
 8026d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8026d4a:	68fb      	ldr	r3, [r7, #12]
 8026d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8026d50:	b2db      	uxtb	r3, r3
 8026d52:	2b01      	cmp	r3, #1
 8026d54:	d12f      	bne.n	8026db6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8026d56:	68fb      	ldr	r3, [r7, #12]
 8026d58:	2202      	movs	r2, #2
 8026d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8026d5e:	68fb      	ldr	r3, [r7, #12]
 8026d60:	2200      	movs	r2, #0
 8026d62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8026d64:	683b      	ldr	r3, [r7, #0]
 8026d66:	687a      	ldr	r2, [r7, #4]
 8026d68:	68b9      	ldr	r1, [r7, #8]
 8026d6a:	68f8      	ldr	r0, [r7, #12]
 8026d6c:	f000 f9b8 	bl	80270e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026d70:	68fb      	ldr	r3, [r7, #12]
 8026d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026d74:	223f      	movs	r2, #63	; 0x3f
 8026d76:	409a      	lsls	r2, r3
 8026d78:	693b      	ldr	r3, [r7, #16]
 8026d7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8026d7c:	68fb      	ldr	r3, [r7, #12]
 8026d7e:	681b      	ldr	r3, [r3, #0]
 8026d80:	681a      	ldr	r2, [r3, #0]
 8026d82:	68fb      	ldr	r3, [r7, #12]
 8026d84:	681b      	ldr	r3, [r3, #0]
 8026d86:	f042 0216 	orr.w	r2, r2, #22
 8026d8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8026d8c:	68fb      	ldr	r3, [r7, #12]
 8026d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026d90:	2b00      	cmp	r3, #0
 8026d92:	d007      	beq.n	8026da4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8026d94:	68fb      	ldr	r3, [r7, #12]
 8026d96:	681b      	ldr	r3, [r3, #0]
 8026d98:	681a      	ldr	r2, [r3, #0]
 8026d9a:	68fb      	ldr	r3, [r7, #12]
 8026d9c:	681b      	ldr	r3, [r3, #0]
 8026d9e:	f042 0208 	orr.w	r2, r2, #8
 8026da2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8026da4:	68fb      	ldr	r3, [r7, #12]
 8026da6:	681b      	ldr	r3, [r3, #0]
 8026da8:	681a      	ldr	r2, [r3, #0]
 8026daa:	68fb      	ldr	r3, [r7, #12]
 8026dac:	681b      	ldr	r3, [r3, #0]
 8026dae:	f042 0201 	orr.w	r2, r2, #1
 8026db2:	601a      	str	r2, [r3, #0]
 8026db4:	e005      	b.n	8026dc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8026db6:	68fb      	ldr	r3, [r7, #12]
 8026db8:	2200      	movs	r2, #0
 8026dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8026dbe:	2302      	movs	r3, #2
 8026dc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8026dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8026dc4:	4618      	mov	r0, r3
 8026dc6:	3718      	adds	r7, #24
 8026dc8:	46bd      	mov	sp, r7
 8026dca:	bd80      	pop	{r7, pc}

08026dcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8026dcc:	b580      	push	{r7, lr}
 8026dce:	b086      	sub	sp, #24
 8026dd0:	af00      	add	r7, sp, #0
 8026dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8026dd4:	2300      	movs	r3, #0
 8026dd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8026dd8:	4b92      	ldr	r3, [pc, #584]	; (8027024 <HAL_DMA_IRQHandler+0x258>)
 8026dda:	681b      	ldr	r3, [r3, #0]
 8026ddc:	4a92      	ldr	r2, [pc, #584]	; (8027028 <HAL_DMA_IRQHandler+0x25c>)
 8026dde:	fba2 2303 	umull	r2, r3, r2, r3
 8026de2:	0a9b      	lsrs	r3, r3, #10
 8026de4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8026de6:	687b      	ldr	r3, [r7, #4]
 8026de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8026dea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8026dec:	693b      	ldr	r3, [r7, #16]
 8026dee:	681b      	ldr	r3, [r3, #0]
 8026df0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8026df2:	687b      	ldr	r3, [r7, #4]
 8026df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026df6:	2208      	movs	r2, #8
 8026df8:	409a      	lsls	r2, r3
 8026dfa:	68fb      	ldr	r3, [r7, #12]
 8026dfc:	4013      	ands	r3, r2
 8026dfe:	2b00      	cmp	r3, #0
 8026e00:	d01a      	beq.n	8026e38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8026e02:	687b      	ldr	r3, [r7, #4]
 8026e04:	681b      	ldr	r3, [r3, #0]
 8026e06:	681b      	ldr	r3, [r3, #0]
 8026e08:	f003 0304 	and.w	r3, r3, #4
 8026e0c:	2b00      	cmp	r3, #0
 8026e0e:	d013      	beq.n	8026e38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8026e10:	687b      	ldr	r3, [r7, #4]
 8026e12:	681b      	ldr	r3, [r3, #0]
 8026e14:	681a      	ldr	r2, [r3, #0]
 8026e16:	687b      	ldr	r3, [r7, #4]
 8026e18:	681b      	ldr	r3, [r3, #0]
 8026e1a:	f022 0204 	bic.w	r2, r2, #4
 8026e1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8026e20:	687b      	ldr	r3, [r7, #4]
 8026e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026e24:	2208      	movs	r2, #8
 8026e26:	409a      	lsls	r2, r3
 8026e28:	693b      	ldr	r3, [r7, #16]
 8026e2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8026e2c:	687b      	ldr	r3, [r7, #4]
 8026e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026e30:	f043 0201 	orr.w	r2, r3, #1
 8026e34:	687b      	ldr	r3, [r7, #4]
 8026e36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8026e38:	687b      	ldr	r3, [r7, #4]
 8026e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026e3c:	2201      	movs	r2, #1
 8026e3e:	409a      	lsls	r2, r3
 8026e40:	68fb      	ldr	r3, [r7, #12]
 8026e42:	4013      	ands	r3, r2
 8026e44:	2b00      	cmp	r3, #0
 8026e46:	d012      	beq.n	8026e6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8026e48:	687b      	ldr	r3, [r7, #4]
 8026e4a:	681b      	ldr	r3, [r3, #0]
 8026e4c:	695b      	ldr	r3, [r3, #20]
 8026e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026e52:	2b00      	cmp	r3, #0
 8026e54:	d00b      	beq.n	8026e6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8026e56:	687b      	ldr	r3, [r7, #4]
 8026e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026e5a:	2201      	movs	r2, #1
 8026e5c:	409a      	lsls	r2, r3
 8026e5e:	693b      	ldr	r3, [r7, #16]
 8026e60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8026e62:	687b      	ldr	r3, [r7, #4]
 8026e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026e66:	f043 0202 	orr.w	r2, r3, #2
 8026e6a:	687b      	ldr	r3, [r7, #4]
 8026e6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8026e6e:	687b      	ldr	r3, [r7, #4]
 8026e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026e72:	2204      	movs	r2, #4
 8026e74:	409a      	lsls	r2, r3
 8026e76:	68fb      	ldr	r3, [r7, #12]
 8026e78:	4013      	ands	r3, r2
 8026e7a:	2b00      	cmp	r3, #0
 8026e7c:	d012      	beq.n	8026ea4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8026e7e:	687b      	ldr	r3, [r7, #4]
 8026e80:	681b      	ldr	r3, [r3, #0]
 8026e82:	681b      	ldr	r3, [r3, #0]
 8026e84:	f003 0302 	and.w	r3, r3, #2
 8026e88:	2b00      	cmp	r3, #0
 8026e8a:	d00b      	beq.n	8026ea4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8026e8c:	687b      	ldr	r3, [r7, #4]
 8026e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026e90:	2204      	movs	r2, #4
 8026e92:	409a      	lsls	r2, r3
 8026e94:	693b      	ldr	r3, [r7, #16]
 8026e96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8026e98:	687b      	ldr	r3, [r7, #4]
 8026e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026e9c:	f043 0204 	orr.w	r2, r3, #4
 8026ea0:	687b      	ldr	r3, [r7, #4]
 8026ea2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8026ea4:	687b      	ldr	r3, [r7, #4]
 8026ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026ea8:	2210      	movs	r2, #16
 8026eaa:	409a      	lsls	r2, r3
 8026eac:	68fb      	ldr	r3, [r7, #12]
 8026eae:	4013      	ands	r3, r2
 8026eb0:	2b00      	cmp	r3, #0
 8026eb2:	d043      	beq.n	8026f3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8026eb4:	687b      	ldr	r3, [r7, #4]
 8026eb6:	681b      	ldr	r3, [r3, #0]
 8026eb8:	681b      	ldr	r3, [r3, #0]
 8026eba:	f003 0308 	and.w	r3, r3, #8
 8026ebe:	2b00      	cmp	r3, #0
 8026ec0:	d03c      	beq.n	8026f3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8026ec2:	687b      	ldr	r3, [r7, #4]
 8026ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026ec6:	2210      	movs	r2, #16
 8026ec8:	409a      	lsls	r2, r3
 8026eca:	693b      	ldr	r3, [r7, #16]
 8026ecc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8026ece:	687b      	ldr	r3, [r7, #4]
 8026ed0:	681b      	ldr	r3, [r3, #0]
 8026ed2:	681b      	ldr	r3, [r3, #0]
 8026ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8026ed8:	2b00      	cmp	r3, #0
 8026eda:	d018      	beq.n	8026f0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8026edc:	687b      	ldr	r3, [r7, #4]
 8026ede:	681b      	ldr	r3, [r3, #0]
 8026ee0:	681b      	ldr	r3, [r3, #0]
 8026ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8026ee6:	2b00      	cmp	r3, #0
 8026ee8:	d108      	bne.n	8026efc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8026eea:	687b      	ldr	r3, [r7, #4]
 8026eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026eee:	2b00      	cmp	r3, #0
 8026ef0:	d024      	beq.n	8026f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8026ef2:	687b      	ldr	r3, [r7, #4]
 8026ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026ef6:	6878      	ldr	r0, [r7, #4]
 8026ef8:	4798      	blx	r3
 8026efa:	e01f      	b.n	8026f3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8026efc:	687b      	ldr	r3, [r7, #4]
 8026efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026f00:	2b00      	cmp	r3, #0
 8026f02:	d01b      	beq.n	8026f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8026f04:	687b      	ldr	r3, [r7, #4]
 8026f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026f08:	6878      	ldr	r0, [r7, #4]
 8026f0a:	4798      	blx	r3
 8026f0c:	e016      	b.n	8026f3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8026f0e:	687b      	ldr	r3, [r7, #4]
 8026f10:	681b      	ldr	r3, [r3, #0]
 8026f12:	681b      	ldr	r3, [r3, #0]
 8026f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026f18:	2b00      	cmp	r3, #0
 8026f1a:	d107      	bne.n	8026f2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8026f1c:	687b      	ldr	r3, [r7, #4]
 8026f1e:	681b      	ldr	r3, [r3, #0]
 8026f20:	681a      	ldr	r2, [r3, #0]
 8026f22:	687b      	ldr	r3, [r7, #4]
 8026f24:	681b      	ldr	r3, [r3, #0]
 8026f26:	f022 0208 	bic.w	r2, r2, #8
 8026f2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8026f2c:	687b      	ldr	r3, [r7, #4]
 8026f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026f30:	2b00      	cmp	r3, #0
 8026f32:	d003      	beq.n	8026f3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8026f34:	687b      	ldr	r3, [r7, #4]
 8026f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026f38:	6878      	ldr	r0, [r7, #4]
 8026f3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8026f3c:	687b      	ldr	r3, [r7, #4]
 8026f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026f40:	2220      	movs	r2, #32
 8026f42:	409a      	lsls	r2, r3
 8026f44:	68fb      	ldr	r3, [r7, #12]
 8026f46:	4013      	ands	r3, r2
 8026f48:	2b00      	cmp	r3, #0
 8026f4a:	f000 808e 	beq.w	802706a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8026f4e:	687b      	ldr	r3, [r7, #4]
 8026f50:	681b      	ldr	r3, [r3, #0]
 8026f52:	681b      	ldr	r3, [r3, #0]
 8026f54:	f003 0310 	and.w	r3, r3, #16
 8026f58:	2b00      	cmp	r3, #0
 8026f5a:	f000 8086 	beq.w	802706a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8026f5e:	687b      	ldr	r3, [r7, #4]
 8026f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026f62:	2220      	movs	r2, #32
 8026f64:	409a      	lsls	r2, r3
 8026f66:	693b      	ldr	r3, [r7, #16]
 8026f68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8026f6a:	687b      	ldr	r3, [r7, #4]
 8026f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8026f70:	b2db      	uxtb	r3, r3
 8026f72:	2b05      	cmp	r3, #5
 8026f74:	d136      	bne.n	8026fe4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8026f76:	687b      	ldr	r3, [r7, #4]
 8026f78:	681b      	ldr	r3, [r3, #0]
 8026f7a:	681a      	ldr	r2, [r3, #0]
 8026f7c:	687b      	ldr	r3, [r7, #4]
 8026f7e:	681b      	ldr	r3, [r3, #0]
 8026f80:	f022 0216 	bic.w	r2, r2, #22
 8026f84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8026f86:	687b      	ldr	r3, [r7, #4]
 8026f88:	681b      	ldr	r3, [r3, #0]
 8026f8a:	695a      	ldr	r2, [r3, #20]
 8026f8c:	687b      	ldr	r3, [r7, #4]
 8026f8e:	681b      	ldr	r3, [r3, #0]
 8026f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8026f94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8026f96:	687b      	ldr	r3, [r7, #4]
 8026f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026f9a:	2b00      	cmp	r3, #0
 8026f9c:	d103      	bne.n	8026fa6 <HAL_DMA_IRQHandler+0x1da>
 8026f9e:	687b      	ldr	r3, [r7, #4]
 8026fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026fa2:	2b00      	cmp	r3, #0
 8026fa4:	d007      	beq.n	8026fb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8026fa6:	687b      	ldr	r3, [r7, #4]
 8026fa8:	681b      	ldr	r3, [r3, #0]
 8026faa:	681a      	ldr	r2, [r3, #0]
 8026fac:	687b      	ldr	r3, [r7, #4]
 8026fae:	681b      	ldr	r3, [r3, #0]
 8026fb0:	f022 0208 	bic.w	r2, r2, #8
 8026fb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026fb6:	687b      	ldr	r3, [r7, #4]
 8026fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026fba:	223f      	movs	r2, #63	; 0x3f
 8026fbc:	409a      	lsls	r2, r3
 8026fbe:	693b      	ldr	r3, [r7, #16]
 8026fc0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8026fc2:	687b      	ldr	r3, [r7, #4]
 8026fc4:	2200      	movs	r2, #0
 8026fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8026fca:	687b      	ldr	r3, [r7, #4]
 8026fcc:	2201      	movs	r2, #1
 8026fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8026fd2:	687b      	ldr	r3, [r7, #4]
 8026fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8026fd6:	2b00      	cmp	r3, #0
 8026fd8:	d07d      	beq.n	80270d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8026fda:	687b      	ldr	r3, [r7, #4]
 8026fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8026fde:	6878      	ldr	r0, [r7, #4]
 8026fe0:	4798      	blx	r3
        }
        return;
 8026fe2:	e078      	b.n	80270d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8026fe4:	687b      	ldr	r3, [r7, #4]
 8026fe6:	681b      	ldr	r3, [r3, #0]
 8026fe8:	681b      	ldr	r3, [r3, #0]
 8026fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8026fee:	2b00      	cmp	r3, #0
 8026ff0:	d01c      	beq.n	802702c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8026ff2:	687b      	ldr	r3, [r7, #4]
 8026ff4:	681b      	ldr	r3, [r3, #0]
 8026ff6:	681b      	ldr	r3, [r3, #0]
 8026ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8026ffc:	2b00      	cmp	r3, #0
 8026ffe:	d108      	bne.n	8027012 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8027000:	687b      	ldr	r3, [r7, #4]
 8027002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027004:	2b00      	cmp	r3, #0
 8027006:	d030      	beq.n	802706a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8027008:	687b      	ldr	r3, [r7, #4]
 802700a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802700c:	6878      	ldr	r0, [r7, #4]
 802700e:	4798      	blx	r3
 8027010:	e02b      	b.n	802706a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8027012:	687b      	ldr	r3, [r7, #4]
 8027014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027016:	2b00      	cmp	r3, #0
 8027018:	d027      	beq.n	802706a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 802701a:	687b      	ldr	r3, [r7, #4]
 802701c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802701e:	6878      	ldr	r0, [r7, #4]
 8027020:	4798      	blx	r3
 8027022:	e022      	b.n	802706a <HAL_DMA_IRQHandler+0x29e>
 8027024:	20000014 	.word	0x20000014
 8027028:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802702c:	687b      	ldr	r3, [r7, #4]
 802702e:	681b      	ldr	r3, [r3, #0]
 8027030:	681b      	ldr	r3, [r3, #0]
 8027032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027036:	2b00      	cmp	r3, #0
 8027038:	d10f      	bne.n	802705a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 802703a:	687b      	ldr	r3, [r7, #4]
 802703c:	681b      	ldr	r3, [r3, #0]
 802703e:	681a      	ldr	r2, [r3, #0]
 8027040:	687b      	ldr	r3, [r7, #4]
 8027042:	681b      	ldr	r3, [r3, #0]
 8027044:	f022 0210 	bic.w	r2, r2, #16
 8027048:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802704a:	687b      	ldr	r3, [r7, #4]
 802704c:	2200      	movs	r2, #0
 802704e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8027052:	687b      	ldr	r3, [r7, #4]
 8027054:	2201      	movs	r2, #1
 8027056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 802705a:	687b      	ldr	r3, [r7, #4]
 802705c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802705e:	2b00      	cmp	r3, #0
 8027060:	d003      	beq.n	802706a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8027062:	687b      	ldr	r3, [r7, #4]
 8027064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027066:	6878      	ldr	r0, [r7, #4]
 8027068:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802706a:	687b      	ldr	r3, [r7, #4]
 802706c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802706e:	2b00      	cmp	r3, #0
 8027070:	d032      	beq.n	80270d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8027072:	687b      	ldr	r3, [r7, #4]
 8027074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027076:	f003 0301 	and.w	r3, r3, #1
 802707a:	2b00      	cmp	r3, #0
 802707c:	d022      	beq.n	80270c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 802707e:	687b      	ldr	r3, [r7, #4]
 8027080:	2205      	movs	r2, #5
 8027082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8027086:	687b      	ldr	r3, [r7, #4]
 8027088:	681b      	ldr	r3, [r3, #0]
 802708a:	681a      	ldr	r2, [r3, #0]
 802708c:	687b      	ldr	r3, [r7, #4]
 802708e:	681b      	ldr	r3, [r3, #0]
 8027090:	f022 0201 	bic.w	r2, r2, #1
 8027094:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8027096:	68bb      	ldr	r3, [r7, #8]
 8027098:	3301      	adds	r3, #1
 802709a:	60bb      	str	r3, [r7, #8]
 802709c:	697a      	ldr	r2, [r7, #20]
 802709e:	429a      	cmp	r2, r3
 80270a0:	d307      	bcc.n	80270b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80270a2:	687b      	ldr	r3, [r7, #4]
 80270a4:	681b      	ldr	r3, [r3, #0]
 80270a6:	681b      	ldr	r3, [r3, #0]
 80270a8:	f003 0301 	and.w	r3, r3, #1
 80270ac:	2b00      	cmp	r3, #0
 80270ae:	d1f2      	bne.n	8027096 <HAL_DMA_IRQHandler+0x2ca>
 80270b0:	e000      	b.n	80270b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80270b2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80270b4:	687b      	ldr	r3, [r7, #4]
 80270b6:	2200      	movs	r2, #0
 80270b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80270bc:	687b      	ldr	r3, [r7, #4]
 80270be:	2201      	movs	r2, #1
 80270c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80270c4:	687b      	ldr	r3, [r7, #4]
 80270c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80270c8:	2b00      	cmp	r3, #0
 80270ca:	d005      	beq.n	80270d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80270cc:	687b      	ldr	r3, [r7, #4]
 80270ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80270d0:	6878      	ldr	r0, [r7, #4]
 80270d2:	4798      	blx	r3
 80270d4:	e000      	b.n	80270d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80270d6:	bf00      	nop
    }
  }
}
 80270d8:	3718      	adds	r7, #24
 80270da:	46bd      	mov	sp, r7
 80270dc:	bd80      	pop	{r7, pc}
 80270de:	bf00      	nop

080270e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80270e0:	b480      	push	{r7}
 80270e2:	b085      	sub	sp, #20
 80270e4:	af00      	add	r7, sp, #0
 80270e6:	60f8      	str	r0, [r7, #12]
 80270e8:	60b9      	str	r1, [r7, #8]
 80270ea:	607a      	str	r2, [r7, #4]
 80270ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80270ee:	68fb      	ldr	r3, [r7, #12]
 80270f0:	681b      	ldr	r3, [r3, #0]
 80270f2:	681a      	ldr	r2, [r3, #0]
 80270f4:	68fb      	ldr	r3, [r7, #12]
 80270f6:	681b      	ldr	r3, [r3, #0]
 80270f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80270fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80270fe:	68fb      	ldr	r3, [r7, #12]
 8027100:	681b      	ldr	r3, [r3, #0]
 8027102:	683a      	ldr	r2, [r7, #0]
 8027104:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8027106:	68fb      	ldr	r3, [r7, #12]
 8027108:	689b      	ldr	r3, [r3, #8]
 802710a:	2b40      	cmp	r3, #64	; 0x40
 802710c:	d108      	bne.n	8027120 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 802710e:	68fb      	ldr	r3, [r7, #12]
 8027110:	681b      	ldr	r3, [r3, #0]
 8027112:	687a      	ldr	r2, [r7, #4]
 8027114:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8027116:	68fb      	ldr	r3, [r7, #12]
 8027118:	681b      	ldr	r3, [r3, #0]
 802711a:	68ba      	ldr	r2, [r7, #8]
 802711c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 802711e:	e007      	b.n	8027130 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8027120:	68fb      	ldr	r3, [r7, #12]
 8027122:	681b      	ldr	r3, [r3, #0]
 8027124:	68ba      	ldr	r2, [r7, #8]
 8027126:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8027128:	68fb      	ldr	r3, [r7, #12]
 802712a:	681b      	ldr	r3, [r3, #0]
 802712c:	687a      	ldr	r2, [r7, #4]
 802712e:	60da      	str	r2, [r3, #12]
}
 8027130:	bf00      	nop
 8027132:	3714      	adds	r7, #20
 8027134:	46bd      	mov	sp, r7
 8027136:	f85d 7b04 	ldr.w	r7, [sp], #4
 802713a:	4770      	bx	lr

0802713c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802713c:	b480      	push	{r7}
 802713e:	b085      	sub	sp, #20
 8027140:	af00      	add	r7, sp, #0
 8027142:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8027144:	687b      	ldr	r3, [r7, #4]
 8027146:	681b      	ldr	r3, [r3, #0]
 8027148:	b2db      	uxtb	r3, r3
 802714a:	3b10      	subs	r3, #16
 802714c:	4a14      	ldr	r2, [pc, #80]	; (80271a0 <DMA_CalcBaseAndBitshift+0x64>)
 802714e:	fba2 2303 	umull	r2, r3, r2, r3
 8027152:	091b      	lsrs	r3, r3, #4
 8027154:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8027156:	4a13      	ldr	r2, [pc, #76]	; (80271a4 <DMA_CalcBaseAndBitshift+0x68>)
 8027158:	68fb      	ldr	r3, [r7, #12]
 802715a:	4413      	add	r3, r2
 802715c:	781b      	ldrb	r3, [r3, #0]
 802715e:	461a      	mov	r2, r3
 8027160:	687b      	ldr	r3, [r7, #4]
 8027162:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8027164:	68fb      	ldr	r3, [r7, #12]
 8027166:	2b03      	cmp	r3, #3
 8027168:	d909      	bls.n	802717e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802716a:	687b      	ldr	r3, [r7, #4]
 802716c:	681b      	ldr	r3, [r3, #0]
 802716e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8027172:	f023 0303 	bic.w	r3, r3, #3
 8027176:	1d1a      	adds	r2, r3, #4
 8027178:	687b      	ldr	r3, [r7, #4]
 802717a:	659a      	str	r2, [r3, #88]	; 0x58
 802717c:	e007      	b.n	802718e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 802717e:	687b      	ldr	r3, [r7, #4]
 8027180:	681b      	ldr	r3, [r3, #0]
 8027182:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8027186:	f023 0303 	bic.w	r3, r3, #3
 802718a:	687a      	ldr	r2, [r7, #4]
 802718c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 802718e:	687b      	ldr	r3, [r7, #4]
 8027190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8027192:	4618      	mov	r0, r3
 8027194:	3714      	adds	r7, #20
 8027196:	46bd      	mov	sp, r7
 8027198:	f85d 7b04 	ldr.w	r7, [sp], #4
 802719c:	4770      	bx	lr
 802719e:	bf00      	nop
 80271a0:	aaaaaaab 	.word	0xaaaaaaab
 80271a4:	0802a24c 	.word	0x0802a24c

080271a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80271a8:	b480      	push	{r7}
 80271aa:	b085      	sub	sp, #20
 80271ac:	af00      	add	r7, sp, #0
 80271ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80271b0:	2300      	movs	r3, #0
 80271b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80271b4:	687b      	ldr	r3, [r7, #4]
 80271b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80271b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80271ba:	687b      	ldr	r3, [r7, #4]
 80271bc:	699b      	ldr	r3, [r3, #24]
 80271be:	2b00      	cmp	r3, #0
 80271c0:	d11f      	bne.n	8027202 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80271c2:	68bb      	ldr	r3, [r7, #8]
 80271c4:	2b03      	cmp	r3, #3
 80271c6:	d855      	bhi.n	8027274 <DMA_CheckFifoParam+0xcc>
 80271c8:	a201      	add	r2, pc, #4	; (adr r2, 80271d0 <DMA_CheckFifoParam+0x28>)
 80271ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80271ce:	bf00      	nop
 80271d0:	080271e1 	.word	0x080271e1
 80271d4:	080271f3 	.word	0x080271f3
 80271d8:	080271e1 	.word	0x080271e1
 80271dc:	08027275 	.word	0x08027275
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80271e0:	687b      	ldr	r3, [r7, #4]
 80271e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80271e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80271e8:	2b00      	cmp	r3, #0
 80271ea:	d045      	beq.n	8027278 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80271ec:	2301      	movs	r3, #1
 80271ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80271f0:	e042      	b.n	8027278 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80271f2:	687b      	ldr	r3, [r7, #4]
 80271f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80271f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80271fa:	d13f      	bne.n	802727c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80271fc:	2301      	movs	r3, #1
 80271fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027200:	e03c      	b.n	802727c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8027202:	687b      	ldr	r3, [r7, #4]
 8027204:	699b      	ldr	r3, [r3, #24]
 8027206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802720a:	d121      	bne.n	8027250 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 802720c:	68bb      	ldr	r3, [r7, #8]
 802720e:	2b03      	cmp	r3, #3
 8027210:	d836      	bhi.n	8027280 <DMA_CheckFifoParam+0xd8>
 8027212:	a201      	add	r2, pc, #4	; (adr r2, 8027218 <DMA_CheckFifoParam+0x70>)
 8027214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027218:	08027229 	.word	0x08027229
 802721c:	0802722f 	.word	0x0802722f
 8027220:	08027229 	.word	0x08027229
 8027224:	08027241 	.word	0x08027241
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8027228:	2301      	movs	r3, #1
 802722a:	73fb      	strb	r3, [r7, #15]
      break;
 802722c:	e02f      	b.n	802728e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802722e:	687b      	ldr	r3, [r7, #4]
 8027230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027236:	2b00      	cmp	r3, #0
 8027238:	d024      	beq.n	8027284 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 802723a:	2301      	movs	r3, #1
 802723c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802723e:	e021      	b.n	8027284 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8027240:	687b      	ldr	r3, [r7, #4]
 8027242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027244:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8027248:	d11e      	bne.n	8027288 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 802724a:	2301      	movs	r3, #1
 802724c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 802724e:	e01b      	b.n	8027288 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8027250:	68bb      	ldr	r3, [r7, #8]
 8027252:	2b02      	cmp	r3, #2
 8027254:	d902      	bls.n	802725c <DMA_CheckFifoParam+0xb4>
 8027256:	2b03      	cmp	r3, #3
 8027258:	d003      	beq.n	8027262 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 802725a:	e018      	b.n	802728e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 802725c:	2301      	movs	r3, #1
 802725e:	73fb      	strb	r3, [r7, #15]
      break;
 8027260:	e015      	b.n	802728e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8027262:	687b      	ldr	r3, [r7, #4]
 8027264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802726a:	2b00      	cmp	r3, #0
 802726c:	d00e      	beq.n	802728c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 802726e:	2301      	movs	r3, #1
 8027270:	73fb      	strb	r3, [r7, #15]
      break;
 8027272:	e00b      	b.n	802728c <DMA_CheckFifoParam+0xe4>
      break;
 8027274:	bf00      	nop
 8027276:	e00a      	b.n	802728e <DMA_CheckFifoParam+0xe6>
      break;
 8027278:	bf00      	nop
 802727a:	e008      	b.n	802728e <DMA_CheckFifoParam+0xe6>
      break;
 802727c:	bf00      	nop
 802727e:	e006      	b.n	802728e <DMA_CheckFifoParam+0xe6>
      break;
 8027280:	bf00      	nop
 8027282:	e004      	b.n	802728e <DMA_CheckFifoParam+0xe6>
      break;
 8027284:	bf00      	nop
 8027286:	e002      	b.n	802728e <DMA_CheckFifoParam+0xe6>
      break;   
 8027288:	bf00      	nop
 802728a:	e000      	b.n	802728e <DMA_CheckFifoParam+0xe6>
      break;
 802728c:	bf00      	nop
    }
  } 
  
  return status; 
 802728e:	7bfb      	ldrb	r3, [r7, #15]
}
 8027290:	4618      	mov	r0, r3
 8027292:	3714      	adds	r7, #20
 8027294:	46bd      	mov	sp, r7
 8027296:	f85d 7b04 	ldr.w	r7, [sp], #4
 802729a:	4770      	bx	lr

0802729c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 802729c:	b580      	push	{r7, lr}
 802729e:	b086      	sub	sp, #24
 80272a0:	af00      	add	r7, sp, #0
 80272a2:	60f8      	str	r0, [r7, #12]
 80272a4:	60b9      	str	r1, [r7, #8]
 80272a6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80272aa:	2301      	movs	r3, #1
 80272ac:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80272ae:	4b23      	ldr	r3, [pc, #140]	; (802733c <HAL_FLASH_Program+0xa0>)
 80272b0:	7e1b      	ldrb	r3, [r3, #24]
 80272b2:	2b01      	cmp	r3, #1
 80272b4:	d101      	bne.n	80272ba <HAL_FLASH_Program+0x1e>
 80272b6:	2302      	movs	r3, #2
 80272b8:	e03b      	b.n	8027332 <HAL_FLASH_Program+0x96>
 80272ba:	4b20      	ldr	r3, [pc, #128]	; (802733c <HAL_FLASH_Program+0xa0>)
 80272bc:	2201      	movs	r2, #1
 80272be:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80272c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80272c4:	f000 f870 	bl	80273a8 <FLASH_WaitForLastOperation>
 80272c8:	4603      	mov	r3, r0
 80272ca:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80272cc:	7dfb      	ldrb	r3, [r7, #23]
 80272ce:	2b00      	cmp	r3, #0
 80272d0:	d12b      	bne.n	802732a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80272d2:	68fb      	ldr	r3, [r7, #12]
 80272d4:	2b00      	cmp	r3, #0
 80272d6:	d105      	bne.n	80272e4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80272d8:	783b      	ldrb	r3, [r7, #0]
 80272da:	4619      	mov	r1, r3
 80272dc:	68b8      	ldr	r0, [r7, #8]
 80272de:	f000 f919 	bl	8027514 <FLASH_Program_Byte>
 80272e2:	e016      	b.n	8027312 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80272e4:	68fb      	ldr	r3, [r7, #12]
 80272e6:	2b01      	cmp	r3, #1
 80272e8:	d105      	bne.n	80272f6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80272ea:	883b      	ldrh	r3, [r7, #0]
 80272ec:	4619      	mov	r1, r3
 80272ee:	68b8      	ldr	r0, [r7, #8]
 80272f0:	f000 f8ec 	bl	80274cc <FLASH_Program_HalfWord>
 80272f4:	e00d      	b.n	8027312 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80272f6:	68fb      	ldr	r3, [r7, #12]
 80272f8:	2b02      	cmp	r3, #2
 80272fa:	d105      	bne.n	8027308 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80272fc:	683b      	ldr	r3, [r7, #0]
 80272fe:	4619      	mov	r1, r3
 8027300:	68b8      	ldr	r0, [r7, #8]
 8027302:	f000 f8c1 	bl	8027488 <FLASH_Program_Word>
 8027306:	e004      	b.n	8027312 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8027308:	e9d7 2300 	ldrd	r2, r3, [r7]
 802730c:	68b8      	ldr	r0, [r7, #8]
 802730e:	f000 f88b 	bl	8027428 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027312:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027316:	f000 f847 	bl	80273a8 <FLASH_WaitForLastOperation>
 802731a:	4603      	mov	r3, r0
 802731c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 802731e:	4b08      	ldr	r3, [pc, #32]	; (8027340 <HAL_FLASH_Program+0xa4>)
 8027320:	691b      	ldr	r3, [r3, #16]
 8027322:	4a07      	ldr	r2, [pc, #28]	; (8027340 <HAL_FLASH_Program+0xa4>)
 8027324:	f023 0301 	bic.w	r3, r3, #1
 8027328:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802732a:	4b04      	ldr	r3, [pc, #16]	; (802733c <HAL_FLASH_Program+0xa0>)
 802732c:	2200      	movs	r2, #0
 802732e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8027330:	7dfb      	ldrb	r3, [r7, #23]
}
 8027332:	4618      	mov	r0, r3
 8027334:	3718      	adds	r7, #24
 8027336:	46bd      	mov	sp, r7
 8027338:	bd80      	pop	{r7, pc}
 802733a:	bf00      	nop
 802733c:	200009c4 	.word	0x200009c4
 8027340:	40023c00 	.word	0x40023c00

08027344 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8027344:	b480      	push	{r7}
 8027346:	b083      	sub	sp, #12
 8027348:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 802734a:	2300      	movs	r3, #0
 802734c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802734e:	4b0b      	ldr	r3, [pc, #44]	; (802737c <HAL_FLASH_Unlock+0x38>)
 8027350:	691b      	ldr	r3, [r3, #16]
 8027352:	2b00      	cmp	r3, #0
 8027354:	da0b      	bge.n	802736e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8027356:	4b09      	ldr	r3, [pc, #36]	; (802737c <HAL_FLASH_Unlock+0x38>)
 8027358:	4a09      	ldr	r2, [pc, #36]	; (8027380 <HAL_FLASH_Unlock+0x3c>)
 802735a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 802735c:	4b07      	ldr	r3, [pc, #28]	; (802737c <HAL_FLASH_Unlock+0x38>)
 802735e:	4a09      	ldr	r2, [pc, #36]	; (8027384 <HAL_FLASH_Unlock+0x40>)
 8027360:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8027362:	4b06      	ldr	r3, [pc, #24]	; (802737c <HAL_FLASH_Unlock+0x38>)
 8027364:	691b      	ldr	r3, [r3, #16]
 8027366:	2b00      	cmp	r3, #0
 8027368:	da01      	bge.n	802736e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 802736a:	2301      	movs	r3, #1
 802736c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 802736e:	79fb      	ldrb	r3, [r7, #7]
}
 8027370:	4618      	mov	r0, r3
 8027372:	370c      	adds	r7, #12
 8027374:	46bd      	mov	sp, r7
 8027376:	f85d 7b04 	ldr.w	r7, [sp], #4
 802737a:	4770      	bx	lr
 802737c:	40023c00 	.word	0x40023c00
 8027380:	45670123 	.word	0x45670123
 8027384:	cdef89ab 	.word	0xcdef89ab

08027388 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8027388:	b480      	push	{r7}
 802738a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 802738c:	4b05      	ldr	r3, [pc, #20]	; (80273a4 <HAL_FLASH_Lock+0x1c>)
 802738e:	691b      	ldr	r3, [r3, #16]
 8027390:	4a04      	ldr	r2, [pc, #16]	; (80273a4 <HAL_FLASH_Lock+0x1c>)
 8027392:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8027396:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8027398:	2300      	movs	r3, #0
}
 802739a:	4618      	mov	r0, r3
 802739c:	46bd      	mov	sp, r7
 802739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273a2:	4770      	bx	lr
 80273a4:	40023c00 	.word	0x40023c00

080273a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80273a8:	b580      	push	{r7, lr}
 80273aa:	b084      	sub	sp, #16
 80273ac:	af00      	add	r7, sp, #0
 80273ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80273b0:	2300      	movs	r3, #0
 80273b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80273b4:	4b1a      	ldr	r3, [pc, #104]	; (8027420 <FLASH_WaitForLastOperation+0x78>)
 80273b6:	2200      	movs	r2, #0
 80273b8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80273ba:	f7fe fecd 	bl	8026158 <HAL_GetTick>
 80273be:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80273c0:	e010      	b.n	80273e4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80273c2:	687b      	ldr	r3, [r7, #4]
 80273c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80273c8:	d00c      	beq.n	80273e4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80273ca:	687b      	ldr	r3, [r7, #4]
 80273cc:	2b00      	cmp	r3, #0
 80273ce:	d007      	beq.n	80273e0 <FLASH_WaitForLastOperation+0x38>
 80273d0:	f7fe fec2 	bl	8026158 <HAL_GetTick>
 80273d4:	4602      	mov	r2, r0
 80273d6:	68fb      	ldr	r3, [r7, #12]
 80273d8:	1ad3      	subs	r3, r2, r3
 80273da:	687a      	ldr	r2, [r7, #4]
 80273dc:	429a      	cmp	r2, r3
 80273de:	d201      	bcs.n	80273e4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80273e0:	2303      	movs	r3, #3
 80273e2:	e019      	b.n	8027418 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80273e4:	4b0f      	ldr	r3, [pc, #60]	; (8027424 <FLASH_WaitForLastOperation+0x7c>)
 80273e6:	68db      	ldr	r3, [r3, #12]
 80273e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80273ec:	2b00      	cmp	r3, #0
 80273ee:	d1e8      	bne.n	80273c2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80273f0:	4b0c      	ldr	r3, [pc, #48]	; (8027424 <FLASH_WaitForLastOperation+0x7c>)
 80273f2:	68db      	ldr	r3, [r3, #12]
 80273f4:	f003 0301 	and.w	r3, r3, #1
 80273f8:	2b00      	cmp	r3, #0
 80273fa:	d002      	beq.n	8027402 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80273fc:	4b09      	ldr	r3, [pc, #36]	; (8027424 <FLASH_WaitForLastOperation+0x7c>)
 80273fe:	2201      	movs	r2, #1
 8027400:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8027402:	4b08      	ldr	r3, [pc, #32]	; (8027424 <FLASH_WaitForLastOperation+0x7c>)
 8027404:	68db      	ldr	r3, [r3, #12]
 8027406:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 802740a:	2b00      	cmp	r3, #0
 802740c:	d003      	beq.n	8027416 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 802740e:	f000 f8a3 	bl	8027558 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8027412:	2301      	movs	r3, #1
 8027414:	e000      	b.n	8027418 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8027416:	2300      	movs	r3, #0
  
}  
 8027418:	4618      	mov	r0, r3
 802741a:	3710      	adds	r7, #16
 802741c:	46bd      	mov	sp, r7
 802741e:	bd80      	pop	{r7, pc}
 8027420:	200009c4 	.word	0x200009c4
 8027424:	40023c00 	.word	0x40023c00

08027428 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8027428:	b490      	push	{r4, r7}
 802742a:	b084      	sub	sp, #16
 802742c:	af00      	add	r7, sp, #0
 802742e:	60f8      	str	r0, [r7, #12]
 8027430:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027434:	4b13      	ldr	r3, [pc, #76]	; (8027484 <FLASH_Program_DoubleWord+0x5c>)
 8027436:	691b      	ldr	r3, [r3, #16]
 8027438:	4a12      	ldr	r2, [pc, #72]	; (8027484 <FLASH_Program_DoubleWord+0x5c>)
 802743a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802743e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8027440:	4b10      	ldr	r3, [pc, #64]	; (8027484 <FLASH_Program_DoubleWord+0x5c>)
 8027442:	691b      	ldr	r3, [r3, #16]
 8027444:	4a0f      	ldr	r2, [pc, #60]	; (8027484 <FLASH_Program_DoubleWord+0x5c>)
 8027446:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802744a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802744c:	4b0d      	ldr	r3, [pc, #52]	; (8027484 <FLASH_Program_DoubleWord+0x5c>)
 802744e:	691b      	ldr	r3, [r3, #16]
 8027450:	4a0c      	ldr	r2, [pc, #48]	; (8027484 <FLASH_Program_DoubleWord+0x5c>)
 8027452:	f043 0301 	orr.w	r3, r3, #1
 8027456:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8027458:	68fb      	ldr	r3, [r7, #12]
 802745a:	683a      	ldr	r2, [r7, #0]
 802745c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 802745e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8027462:	e9d7 1200 	ldrd	r1, r2, [r7]
 8027466:	f04f 0300 	mov.w	r3, #0
 802746a:	f04f 0400 	mov.w	r4, #0
 802746e:	0013      	movs	r3, r2
 8027470:	2400      	movs	r4, #0
 8027472:	68fa      	ldr	r2, [r7, #12]
 8027474:	3204      	adds	r2, #4
 8027476:	6013      	str	r3, [r2, #0]
}
 8027478:	bf00      	nop
 802747a:	3710      	adds	r7, #16
 802747c:	46bd      	mov	sp, r7
 802747e:	bc90      	pop	{r4, r7}
 8027480:	4770      	bx	lr
 8027482:	bf00      	nop
 8027484:	40023c00 	.word	0x40023c00

08027488 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8027488:	b480      	push	{r7}
 802748a:	b083      	sub	sp, #12
 802748c:	af00      	add	r7, sp, #0
 802748e:	6078      	str	r0, [r7, #4]
 8027490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027492:	4b0d      	ldr	r3, [pc, #52]	; (80274c8 <FLASH_Program_Word+0x40>)
 8027494:	691b      	ldr	r3, [r3, #16]
 8027496:	4a0c      	ldr	r2, [pc, #48]	; (80274c8 <FLASH_Program_Word+0x40>)
 8027498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802749c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 802749e:	4b0a      	ldr	r3, [pc, #40]	; (80274c8 <FLASH_Program_Word+0x40>)
 80274a0:	691b      	ldr	r3, [r3, #16]
 80274a2:	4a09      	ldr	r2, [pc, #36]	; (80274c8 <FLASH_Program_Word+0x40>)
 80274a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80274a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80274aa:	4b07      	ldr	r3, [pc, #28]	; (80274c8 <FLASH_Program_Word+0x40>)
 80274ac:	691b      	ldr	r3, [r3, #16]
 80274ae:	4a06      	ldr	r2, [pc, #24]	; (80274c8 <FLASH_Program_Word+0x40>)
 80274b0:	f043 0301 	orr.w	r3, r3, #1
 80274b4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80274b6:	687b      	ldr	r3, [r7, #4]
 80274b8:	683a      	ldr	r2, [r7, #0]
 80274ba:	601a      	str	r2, [r3, #0]
}
 80274bc:	bf00      	nop
 80274be:	370c      	adds	r7, #12
 80274c0:	46bd      	mov	sp, r7
 80274c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274c6:	4770      	bx	lr
 80274c8:	40023c00 	.word	0x40023c00

080274cc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80274cc:	b480      	push	{r7}
 80274ce:	b083      	sub	sp, #12
 80274d0:	af00      	add	r7, sp, #0
 80274d2:	6078      	str	r0, [r7, #4]
 80274d4:	460b      	mov	r3, r1
 80274d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80274d8:	4b0d      	ldr	r3, [pc, #52]	; (8027510 <FLASH_Program_HalfWord+0x44>)
 80274da:	691b      	ldr	r3, [r3, #16]
 80274dc:	4a0c      	ldr	r2, [pc, #48]	; (8027510 <FLASH_Program_HalfWord+0x44>)
 80274de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80274e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80274e4:	4b0a      	ldr	r3, [pc, #40]	; (8027510 <FLASH_Program_HalfWord+0x44>)
 80274e6:	691b      	ldr	r3, [r3, #16]
 80274e8:	4a09      	ldr	r2, [pc, #36]	; (8027510 <FLASH_Program_HalfWord+0x44>)
 80274ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80274ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80274f0:	4b07      	ldr	r3, [pc, #28]	; (8027510 <FLASH_Program_HalfWord+0x44>)
 80274f2:	691b      	ldr	r3, [r3, #16]
 80274f4:	4a06      	ldr	r2, [pc, #24]	; (8027510 <FLASH_Program_HalfWord+0x44>)
 80274f6:	f043 0301 	orr.w	r3, r3, #1
 80274fa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80274fc:	687b      	ldr	r3, [r7, #4]
 80274fe:	887a      	ldrh	r2, [r7, #2]
 8027500:	801a      	strh	r2, [r3, #0]
}
 8027502:	bf00      	nop
 8027504:	370c      	adds	r7, #12
 8027506:	46bd      	mov	sp, r7
 8027508:	f85d 7b04 	ldr.w	r7, [sp], #4
 802750c:	4770      	bx	lr
 802750e:	bf00      	nop
 8027510:	40023c00 	.word	0x40023c00

08027514 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8027514:	b480      	push	{r7}
 8027516:	b083      	sub	sp, #12
 8027518:	af00      	add	r7, sp, #0
 802751a:	6078      	str	r0, [r7, #4]
 802751c:	460b      	mov	r3, r1
 802751e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027520:	4b0c      	ldr	r3, [pc, #48]	; (8027554 <FLASH_Program_Byte+0x40>)
 8027522:	691b      	ldr	r3, [r3, #16]
 8027524:	4a0b      	ldr	r2, [pc, #44]	; (8027554 <FLASH_Program_Byte+0x40>)
 8027526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802752a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 802752c:	4b09      	ldr	r3, [pc, #36]	; (8027554 <FLASH_Program_Byte+0x40>)
 802752e:	4a09      	ldr	r2, [pc, #36]	; (8027554 <FLASH_Program_Byte+0x40>)
 8027530:	691b      	ldr	r3, [r3, #16]
 8027532:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027534:	4b07      	ldr	r3, [pc, #28]	; (8027554 <FLASH_Program_Byte+0x40>)
 8027536:	691b      	ldr	r3, [r3, #16]
 8027538:	4a06      	ldr	r2, [pc, #24]	; (8027554 <FLASH_Program_Byte+0x40>)
 802753a:	f043 0301 	orr.w	r3, r3, #1
 802753e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8027540:	687b      	ldr	r3, [r7, #4]
 8027542:	78fa      	ldrb	r2, [r7, #3]
 8027544:	701a      	strb	r2, [r3, #0]
}
 8027546:	bf00      	nop
 8027548:	370c      	adds	r7, #12
 802754a:	46bd      	mov	sp, r7
 802754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027550:	4770      	bx	lr
 8027552:	bf00      	nop
 8027554:	40023c00 	.word	0x40023c00

08027558 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8027558:	b480      	push	{r7}
 802755a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 802755c:	4b27      	ldr	r3, [pc, #156]	; (80275fc <FLASH_SetErrorCode+0xa4>)
 802755e:	68db      	ldr	r3, [r3, #12]
 8027560:	f003 0310 	and.w	r3, r3, #16
 8027564:	2b00      	cmp	r3, #0
 8027566:	d008      	beq.n	802757a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8027568:	4b25      	ldr	r3, [pc, #148]	; (8027600 <FLASH_SetErrorCode+0xa8>)
 802756a:	69db      	ldr	r3, [r3, #28]
 802756c:	f043 0310 	orr.w	r3, r3, #16
 8027570:	4a23      	ldr	r2, [pc, #140]	; (8027600 <FLASH_SetErrorCode+0xa8>)
 8027572:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8027574:	4b21      	ldr	r3, [pc, #132]	; (80275fc <FLASH_SetErrorCode+0xa4>)
 8027576:	2210      	movs	r2, #16
 8027578:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 802757a:	4b20      	ldr	r3, [pc, #128]	; (80275fc <FLASH_SetErrorCode+0xa4>)
 802757c:	68db      	ldr	r3, [r3, #12]
 802757e:	f003 0320 	and.w	r3, r3, #32
 8027582:	2b00      	cmp	r3, #0
 8027584:	d008      	beq.n	8027598 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8027586:	4b1e      	ldr	r3, [pc, #120]	; (8027600 <FLASH_SetErrorCode+0xa8>)
 8027588:	69db      	ldr	r3, [r3, #28]
 802758a:	f043 0308 	orr.w	r3, r3, #8
 802758e:	4a1c      	ldr	r2, [pc, #112]	; (8027600 <FLASH_SetErrorCode+0xa8>)
 8027590:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8027592:	4b1a      	ldr	r3, [pc, #104]	; (80275fc <FLASH_SetErrorCode+0xa4>)
 8027594:	2220      	movs	r2, #32
 8027596:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8027598:	4b18      	ldr	r3, [pc, #96]	; (80275fc <FLASH_SetErrorCode+0xa4>)
 802759a:	68db      	ldr	r3, [r3, #12]
 802759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80275a0:	2b00      	cmp	r3, #0
 80275a2:	d008      	beq.n	80275b6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80275a4:	4b16      	ldr	r3, [pc, #88]	; (8027600 <FLASH_SetErrorCode+0xa8>)
 80275a6:	69db      	ldr	r3, [r3, #28]
 80275a8:	f043 0304 	orr.w	r3, r3, #4
 80275ac:	4a14      	ldr	r2, [pc, #80]	; (8027600 <FLASH_SetErrorCode+0xa8>)
 80275ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80275b0:	4b12      	ldr	r3, [pc, #72]	; (80275fc <FLASH_SetErrorCode+0xa4>)
 80275b2:	2240      	movs	r2, #64	; 0x40
 80275b4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80275b6:	4b11      	ldr	r3, [pc, #68]	; (80275fc <FLASH_SetErrorCode+0xa4>)
 80275b8:	68db      	ldr	r3, [r3, #12]
 80275ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80275be:	2b00      	cmp	r3, #0
 80275c0:	d008      	beq.n	80275d4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80275c2:	4b0f      	ldr	r3, [pc, #60]	; (8027600 <FLASH_SetErrorCode+0xa8>)
 80275c4:	69db      	ldr	r3, [r3, #28]
 80275c6:	f043 0302 	orr.w	r3, r3, #2
 80275ca:	4a0d      	ldr	r2, [pc, #52]	; (8027600 <FLASH_SetErrorCode+0xa8>)
 80275cc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80275ce:	4b0b      	ldr	r3, [pc, #44]	; (80275fc <FLASH_SetErrorCode+0xa4>)
 80275d0:	2280      	movs	r2, #128	; 0x80
 80275d2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80275d4:	4b09      	ldr	r3, [pc, #36]	; (80275fc <FLASH_SetErrorCode+0xa4>)
 80275d6:	68db      	ldr	r3, [r3, #12]
 80275d8:	f003 0302 	and.w	r3, r3, #2
 80275dc:	2b00      	cmp	r3, #0
 80275de:	d008      	beq.n	80275f2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80275e0:	4b07      	ldr	r3, [pc, #28]	; (8027600 <FLASH_SetErrorCode+0xa8>)
 80275e2:	69db      	ldr	r3, [r3, #28]
 80275e4:	f043 0320 	orr.w	r3, r3, #32
 80275e8:	4a05      	ldr	r2, [pc, #20]	; (8027600 <FLASH_SetErrorCode+0xa8>)
 80275ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80275ec:	4b03      	ldr	r3, [pc, #12]	; (80275fc <FLASH_SetErrorCode+0xa4>)
 80275ee:	2202      	movs	r2, #2
 80275f0:	60da      	str	r2, [r3, #12]
  }
}
 80275f2:	bf00      	nop
 80275f4:	46bd      	mov	sp, r7
 80275f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275fa:	4770      	bx	lr
 80275fc:	40023c00 	.word	0x40023c00
 8027600:	200009c4 	.word	0x200009c4

08027604 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8027604:	b580      	push	{r7, lr}
 8027606:	b084      	sub	sp, #16
 8027608:	af00      	add	r7, sp, #0
 802760a:	6078      	str	r0, [r7, #4]
 802760c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 802760e:	2301      	movs	r3, #1
 8027610:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8027612:	2300      	movs	r3, #0
 8027614:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8027616:	4b31      	ldr	r3, [pc, #196]	; (80276dc <HAL_FLASHEx_Erase+0xd8>)
 8027618:	7e1b      	ldrb	r3, [r3, #24]
 802761a:	2b01      	cmp	r3, #1
 802761c:	d101      	bne.n	8027622 <HAL_FLASHEx_Erase+0x1e>
 802761e:	2302      	movs	r3, #2
 8027620:	e058      	b.n	80276d4 <HAL_FLASHEx_Erase+0xd0>
 8027622:	4b2e      	ldr	r3, [pc, #184]	; (80276dc <HAL_FLASHEx_Erase+0xd8>)
 8027624:	2201      	movs	r2, #1
 8027626:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027628:	f24c 3050 	movw	r0, #50000	; 0xc350
 802762c:	f7ff febc 	bl	80273a8 <FLASH_WaitForLastOperation>
 8027630:	4603      	mov	r3, r0
 8027632:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8027634:	7bfb      	ldrb	r3, [r7, #15]
 8027636:	2b00      	cmp	r3, #0
 8027638:	d148      	bne.n	80276cc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 802763a:	683b      	ldr	r3, [r7, #0]
 802763c:	f04f 32ff 	mov.w	r2, #4294967295
 8027640:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8027642:	687b      	ldr	r3, [r7, #4]
 8027644:	681b      	ldr	r3, [r3, #0]
 8027646:	2b01      	cmp	r3, #1
 8027648:	d115      	bne.n	8027676 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 802764a:	687b      	ldr	r3, [r7, #4]
 802764c:	691b      	ldr	r3, [r3, #16]
 802764e:	b2da      	uxtb	r2, r3
 8027650:	687b      	ldr	r3, [r7, #4]
 8027652:	685b      	ldr	r3, [r3, #4]
 8027654:	4619      	mov	r1, r3
 8027656:	4610      	mov	r0, r2
 8027658:	f000 f844 	bl	80276e4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802765c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027660:	f7ff fea2 	bl	80273a8 <FLASH_WaitForLastOperation>
 8027664:	4603      	mov	r3, r0
 8027666:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8027668:	4b1d      	ldr	r3, [pc, #116]	; (80276e0 <HAL_FLASHEx_Erase+0xdc>)
 802766a:	691b      	ldr	r3, [r3, #16]
 802766c:	4a1c      	ldr	r2, [pc, #112]	; (80276e0 <HAL_FLASHEx_Erase+0xdc>)
 802766e:	f023 0304 	bic.w	r3, r3, #4
 8027672:	6113      	str	r3, [r2, #16]
 8027674:	e028      	b.n	80276c8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8027676:	687b      	ldr	r3, [r7, #4]
 8027678:	689b      	ldr	r3, [r3, #8]
 802767a:	60bb      	str	r3, [r7, #8]
 802767c:	e01c      	b.n	80276b8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 802767e:	687b      	ldr	r3, [r7, #4]
 8027680:	691b      	ldr	r3, [r3, #16]
 8027682:	b2db      	uxtb	r3, r3
 8027684:	4619      	mov	r1, r3
 8027686:	68b8      	ldr	r0, [r7, #8]
 8027688:	f000 f850 	bl	802772c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802768c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027690:	f7ff fe8a 	bl	80273a8 <FLASH_WaitForLastOperation>
 8027694:	4603      	mov	r3, r0
 8027696:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8027698:	4b11      	ldr	r3, [pc, #68]	; (80276e0 <HAL_FLASHEx_Erase+0xdc>)
 802769a:	691b      	ldr	r3, [r3, #16]
 802769c:	4a10      	ldr	r2, [pc, #64]	; (80276e0 <HAL_FLASHEx_Erase+0xdc>)
 802769e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80276a2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80276a4:	7bfb      	ldrb	r3, [r7, #15]
 80276a6:	2b00      	cmp	r3, #0
 80276a8:	d003      	beq.n	80276b2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80276aa:	683b      	ldr	r3, [r7, #0]
 80276ac:	68ba      	ldr	r2, [r7, #8]
 80276ae:	601a      	str	r2, [r3, #0]
          break;
 80276b0:	e00a      	b.n	80276c8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80276b2:	68bb      	ldr	r3, [r7, #8]
 80276b4:	3301      	adds	r3, #1
 80276b6:	60bb      	str	r3, [r7, #8]
 80276b8:	687b      	ldr	r3, [r7, #4]
 80276ba:	68da      	ldr	r2, [r3, #12]
 80276bc:	687b      	ldr	r3, [r7, #4]
 80276be:	689b      	ldr	r3, [r3, #8]
 80276c0:	4413      	add	r3, r2
 80276c2:	68ba      	ldr	r2, [r7, #8]
 80276c4:	429a      	cmp	r2, r3
 80276c6:	d3da      	bcc.n	802767e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80276c8:	f000 f878 	bl	80277bc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80276cc:	4b03      	ldr	r3, [pc, #12]	; (80276dc <HAL_FLASHEx_Erase+0xd8>)
 80276ce:	2200      	movs	r2, #0
 80276d0:	761a      	strb	r2, [r3, #24]

  return status;
 80276d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80276d4:	4618      	mov	r0, r3
 80276d6:	3710      	adds	r7, #16
 80276d8:	46bd      	mov	sp, r7
 80276da:	bd80      	pop	{r7, pc}
 80276dc:	200009c4 	.word	0x200009c4
 80276e0:	40023c00 	.word	0x40023c00

080276e4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80276e4:	b480      	push	{r7}
 80276e6:	b083      	sub	sp, #12
 80276e8:	af00      	add	r7, sp, #0
 80276ea:	4603      	mov	r3, r0
 80276ec:	6039      	str	r1, [r7, #0]
 80276ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80276f0:	4b0d      	ldr	r3, [pc, #52]	; (8027728 <FLASH_MassErase+0x44>)
 80276f2:	691b      	ldr	r3, [r3, #16]
 80276f4:	4a0c      	ldr	r2, [pc, #48]	; (8027728 <FLASH_MassErase+0x44>)
 80276f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80276fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80276fc:	4b0a      	ldr	r3, [pc, #40]	; (8027728 <FLASH_MassErase+0x44>)
 80276fe:	691b      	ldr	r3, [r3, #16]
 8027700:	4a09      	ldr	r2, [pc, #36]	; (8027728 <FLASH_MassErase+0x44>)
 8027702:	f043 0304 	orr.w	r3, r3, #4
 8027706:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8027708:	4b07      	ldr	r3, [pc, #28]	; (8027728 <FLASH_MassErase+0x44>)
 802770a:	691a      	ldr	r2, [r3, #16]
 802770c:	79fb      	ldrb	r3, [r7, #7]
 802770e:	021b      	lsls	r3, r3, #8
 8027710:	4313      	orrs	r3, r2
 8027712:	4a05      	ldr	r2, [pc, #20]	; (8027728 <FLASH_MassErase+0x44>)
 8027714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027718:	6113      	str	r3, [r2, #16]
}
 802771a:	bf00      	nop
 802771c:	370c      	adds	r7, #12
 802771e:	46bd      	mov	sp, r7
 8027720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027724:	4770      	bx	lr
 8027726:	bf00      	nop
 8027728:	40023c00 	.word	0x40023c00

0802772c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 802772c:	b480      	push	{r7}
 802772e:	b085      	sub	sp, #20
 8027730:	af00      	add	r7, sp, #0
 8027732:	6078      	str	r0, [r7, #4]
 8027734:	460b      	mov	r3, r1
 8027736:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8027738:	2300      	movs	r3, #0
 802773a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 802773c:	78fb      	ldrb	r3, [r7, #3]
 802773e:	2b00      	cmp	r3, #0
 8027740:	d102      	bne.n	8027748 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8027742:	2300      	movs	r3, #0
 8027744:	60fb      	str	r3, [r7, #12]
 8027746:	e010      	b.n	802776a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8027748:	78fb      	ldrb	r3, [r7, #3]
 802774a:	2b01      	cmp	r3, #1
 802774c:	d103      	bne.n	8027756 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 802774e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8027752:	60fb      	str	r3, [r7, #12]
 8027754:	e009      	b.n	802776a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8027756:	78fb      	ldrb	r3, [r7, #3]
 8027758:	2b02      	cmp	r3, #2
 802775a:	d103      	bne.n	8027764 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 802775c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8027760:	60fb      	str	r3, [r7, #12]
 8027762:	e002      	b.n	802776a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8027764:	f44f 7340 	mov.w	r3, #768	; 0x300
 8027768:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802776a:	4b13      	ldr	r3, [pc, #76]	; (80277b8 <FLASH_Erase_Sector+0x8c>)
 802776c:	691b      	ldr	r3, [r3, #16]
 802776e:	4a12      	ldr	r2, [pc, #72]	; (80277b8 <FLASH_Erase_Sector+0x8c>)
 8027770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027774:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8027776:	4b10      	ldr	r3, [pc, #64]	; (80277b8 <FLASH_Erase_Sector+0x8c>)
 8027778:	691a      	ldr	r2, [r3, #16]
 802777a:	490f      	ldr	r1, [pc, #60]	; (80277b8 <FLASH_Erase_Sector+0x8c>)
 802777c:	68fb      	ldr	r3, [r7, #12]
 802777e:	4313      	orrs	r3, r2
 8027780:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8027782:	4b0d      	ldr	r3, [pc, #52]	; (80277b8 <FLASH_Erase_Sector+0x8c>)
 8027784:	691b      	ldr	r3, [r3, #16]
 8027786:	4a0c      	ldr	r2, [pc, #48]	; (80277b8 <FLASH_Erase_Sector+0x8c>)
 8027788:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 802778c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 802778e:	4b0a      	ldr	r3, [pc, #40]	; (80277b8 <FLASH_Erase_Sector+0x8c>)
 8027790:	691a      	ldr	r2, [r3, #16]
 8027792:	687b      	ldr	r3, [r7, #4]
 8027794:	00db      	lsls	r3, r3, #3
 8027796:	4313      	orrs	r3, r2
 8027798:	4a07      	ldr	r2, [pc, #28]	; (80277b8 <FLASH_Erase_Sector+0x8c>)
 802779a:	f043 0302 	orr.w	r3, r3, #2
 802779e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80277a0:	4b05      	ldr	r3, [pc, #20]	; (80277b8 <FLASH_Erase_Sector+0x8c>)
 80277a2:	691b      	ldr	r3, [r3, #16]
 80277a4:	4a04      	ldr	r2, [pc, #16]	; (80277b8 <FLASH_Erase_Sector+0x8c>)
 80277a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80277aa:	6113      	str	r3, [r2, #16]
}
 80277ac:	bf00      	nop
 80277ae:	3714      	adds	r7, #20
 80277b0:	46bd      	mov	sp, r7
 80277b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277b6:	4770      	bx	lr
 80277b8:	40023c00 	.word	0x40023c00

080277bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80277bc:	b480      	push	{r7}
 80277be:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80277c0:	4b20      	ldr	r3, [pc, #128]	; (8027844 <FLASH_FlushCaches+0x88>)
 80277c2:	681b      	ldr	r3, [r3, #0]
 80277c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80277c8:	2b00      	cmp	r3, #0
 80277ca:	d017      	beq.n	80277fc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80277cc:	4b1d      	ldr	r3, [pc, #116]	; (8027844 <FLASH_FlushCaches+0x88>)
 80277ce:	681b      	ldr	r3, [r3, #0]
 80277d0:	4a1c      	ldr	r2, [pc, #112]	; (8027844 <FLASH_FlushCaches+0x88>)
 80277d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80277d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80277d8:	4b1a      	ldr	r3, [pc, #104]	; (8027844 <FLASH_FlushCaches+0x88>)
 80277da:	681b      	ldr	r3, [r3, #0]
 80277dc:	4a19      	ldr	r2, [pc, #100]	; (8027844 <FLASH_FlushCaches+0x88>)
 80277de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80277e2:	6013      	str	r3, [r2, #0]
 80277e4:	4b17      	ldr	r3, [pc, #92]	; (8027844 <FLASH_FlushCaches+0x88>)
 80277e6:	681b      	ldr	r3, [r3, #0]
 80277e8:	4a16      	ldr	r2, [pc, #88]	; (8027844 <FLASH_FlushCaches+0x88>)
 80277ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80277ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80277f0:	4b14      	ldr	r3, [pc, #80]	; (8027844 <FLASH_FlushCaches+0x88>)
 80277f2:	681b      	ldr	r3, [r3, #0]
 80277f4:	4a13      	ldr	r2, [pc, #76]	; (8027844 <FLASH_FlushCaches+0x88>)
 80277f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80277fa:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80277fc:	4b11      	ldr	r3, [pc, #68]	; (8027844 <FLASH_FlushCaches+0x88>)
 80277fe:	681b      	ldr	r3, [r3, #0]
 8027800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027804:	2b00      	cmp	r3, #0
 8027806:	d017      	beq.n	8027838 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8027808:	4b0e      	ldr	r3, [pc, #56]	; (8027844 <FLASH_FlushCaches+0x88>)
 802780a:	681b      	ldr	r3, [r3, #0]
 802780c:	4a0d      	ldr	r2, [pc, #52]	; (8027844 <FLASH_FlushCaches+0x88>)
 802780e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8027812:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8027814:	4b0b      	ldr	r3, [pc, #44]	; (8027844 <FLASH_FlushCaches+0x88>)
 8027816:	681b      	ldr	r3, [r3, #0]
 8027818:	4a0a      	ldr	r2, [pc, #40]	; (8027844 <FLASH_FlushCaches+0x88>)
 802781a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802781e:	6013      	str	r3, [r2, #0]
 8027820:	4b08      	ldr	r3, [pc, #32]	; (8027844 <FLASH_FlushCaches+0x88>)
 8027822:	681b      	ldr	r3, [r3, #0]
 8027824:	4a07      	ldr	r2, [pc, #28]	; (8027844 <FLASH_FlushCaches+0x88>)
 8027826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802782a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 802782c:	4b05      	ldr	r3, [pc, #20]	; (8027844 <FLASH_FlushCaches+0x88>)
 802782e:	681b      	ldr	r3, [r3, #0]
 8027830:	4a04      	ldr	r2, [pc, #16]	; (8027844 <FLASH_FlushCaches+0x88>)
 8027832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8027836:	6013      	str	r3, [r2, #0]
  }
}
 8027838:	bf00      	nop
 802783a:	46bd      	mov	sp, r7
 802783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027840:	4770      	bx	lr
 8027842:	bf00      	nop
 8027844:	40023c00 	.word	0x40023c00

08027848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8027848:	b480      	push	{r7}
 802784a:	b089      	sub	sp, #36	; 0x24
 802784c:	af00      	add	r7, sp, #0
 802784e:	6078      	str	r0, [r7, #4]
 8027850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8027852:	2300      	movs	r3, #0
 8027854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8027856:	2300      	movs	r3, #0
 8027858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802785a:	2300      	movs	r3, #0
 802785c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802785e:	2300      	movs	r3, #0
 8027860:	61fb      	str	r3, [r7, #28]
 8027862:	e16b      	b.n	8027b3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8027864:	2201      	movs	r2, #1
 8027866:	69fb      	ldr	r3, [r7, #28]
 8027868:	fa02 f303 	lsl.w	r3, r2, r3
 802786c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802786e:	683b      	ldr	r3, [r7, #0]
 8027870:	681b      	ldr	r3, [r3, #0]
 8027872:	697a      	ldr	r2, [r7, #20]
 8027874:	4013      	ands	r3, r2
 8027876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8027878:	693a      	ldr	r2, [r7, #16]
 802787a:	697b      	ldr	r3, [r7, #20]
 802787c:	429a      	cmp	r2, r3
 802787e:	f040 815a 	bne.w	8027b36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8027882:	683b      	ldr	r3, [r7, #0]
 8027884:	685b      	ldr	r3, [r3, #4]
 8027886:	2b01      	cmp	r3, #1
 8027888:	d00b      	beq.n	80278a2 <HAL_GPIO_Init+0x5a>
 802788a:	683b      	ldr	r3, [r7, #0]
 802788c:	685b      	ldr	r3, [r3, #4]
 802788e:	2b02      	cmp	r3, #2
 8027890:	d007      	beq.n	80278a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027892:	683b      	ldr	r3, [r7, #0]
 8027894:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8027896:	2b11      	cmp	r3, #17
 8027898:	d003      	beq.n	80278a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802789a:	683b      	ldr	r3, [r7, #0]
 802789c:	685b      	ldr	r3, [r3, #4]
 802789e:	2b12      	cmp	r3, #18
 80278a0:	d130      	bne.n	8027904 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80278a2:	687b      	ldr	r3, [r7, #4]
 80278a4:	689b      	ldr	r3, [r3, #8]
 80278a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80278a8:	69fb      	ldr	r3, [r7, #28]
 80278aa:	005b      	lsls	r3, r3, #1
 80278ac:	2203      	movs	r2, #3
 80278ae:	fa02 f303 	lsl.w	r3, r2, r3
 80278b2:	43db      	mvns	r3, r3
 80278b4:	69ba      	ldr	r2, [r7, #24]
 80278b6:	4013      	ands	r3, r2
 80278b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80278ba:	683b      	ldr	r3, [r7, #0]
 80278bc:	68da      	ldr	r2, [r3, #12]
 80278be:	69fb      	ldr	r3, [r7, #28]
 80278c0:	005b      	lsls	r3, r3, #1
 80278c2:	fa02 f303 	lsl.w	r3, r2, r3
 80278c6:	69ba      	ldr	r2, [r7, #24]
 80278c8:	4313      	orrs	r3, r2
 80278ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80278cc:	687b      	ldr	r3, [r7, #4]
 80278ce:	69ba      	ldr	r2, [r7, #24]
 80278d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80278d2:	687b      	ldr	r3, [r7, #4]
 80278d4:	685b      	ldr	r3, [r3, #4]
 80278d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80278d8:	2201      	movs	r2, #1
 80278da:	69fb      	ldr	r3, [r7, #28]
 80278dc:	fa02 f303 	lsl.w	r3, r2, r3
 80278e0:	43db      	mvns	r3, r3
 80278e2:	69ba      	ldr	r2, [r7, #24]
 80278e4:	4013      	ands	r3, r2
 80278e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80278e8:	683b      	ldr	r3, [r7, #0]
 80278ea:	685b      	ldr	r3, [r3, #4]
 80278ec:	091b      	lsrs	r3, r3, #4
 80278ee:	f003 0201 	and.w	r2, r3, #1
 80278f2:	69fb      	ldr	r3, [r7, #28]
 80278f4:	fa02 f303 	lsl.w	r3, r2, r3
 80278f8:	69ba      	ldr	r2, [r7, #24]
 80278fa:	4313      	orrs	r3, r2
 80278fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80278fe:	687b      	ldr	r3, [r7, #4]
 8027900:	69ba      	ldr	r2, [r7, #24]
 8027902:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8027904:	687b      	ldr	r3, [r7, #4]
 8027906:	68db      	ldr	r3, [r3, #12]
 8027908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802790a:	69fb      	ldr	r3, [r7, #28]
 802790c:	005b      	lsls	r3, r3, #1
 802790e:	2203      	movs	r2, #3
 8027910:	fa02 f303 	lsl.w	r3, r2, r3
 8027914:	43db      	mvns	r3, r3
 8027916:	69ba      	ldr	r2, [r7, #24]
 8027918:	4013      	ands	r3, r2
 802791a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802791c:	683b      	ldr	r3, [r7, #0]
 802791e:	689a      	ldr	r2, [r3, #8]
 8027920:	69fb      	ldr	r3, [r7, #28]
 8027922:	005b      	lsls	r3, r3, #1
 8027924:	fa02 f303 	lsl.w	r3, r2, r3
 8027928:	69ba      	ldr	r2, [r7, #24]
 802792a:	4313      	orrs	r3, r2
 802792c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802792e:	687b      	ldr	r3, [r7, #4]
 8027930:	69ba      	ldr	r2, [r7, #24]
 8027932:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027934:	683b      	ldr	r3, [r7, #0]
 8027936:	685b      	ldr	r3, [r3, #4]
 8027938:	2b02      	cmp	r3, #2
 802793a:	d003      	beq.n	8027944 <HAL_GPIO_Init+0xfc>
 802793c:	683b      	ldr	r3, [r7, #0]
 802793e:	685b      	ldr	r3, [r3, #4]
 8027940:	2b12      	cmp	r3, #18
 8027942:	d123      	bne.n	802798c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8027944:	69fb      	ldr	r3, [r7, #28]
 8027946:	08da      	lsrs	r2, r3, #3
 8027948:	687b      	ldr	r3, [r7, #4]
 802794a:	3208      	adds	r2, #8
 802794c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8027952:	69fb      	ldr	r3, [r7, #28]
 8027954:	f003 0307 	and.w	r3, r3, #7
 8027958:	009b      	lsls	r3, r3, #2
 802795a:	220f      	movs	r2, #15
 802795c:	fa02 f303 	lsl.w	r3, r2, r3
 8027960:	43db      	mvns	r3, r3
 8027962:	69ba      	ldr	r2, [r7, #24]
 8027964:	4013      	ands	r3, r2
 8027966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8027968:	683b      	ldr	r3, [r7, #0]
 802796a:	691a      	ldr	r2, [r3, #16]
 802796c:	69fb      	ldr	r3, [r7, #28]
 802796e:	f003 0307 	and.w	r3, r3, #7
 8027972:	009b      	lsls	r3, r3, #2
 8027974:	fa02 f303 	lsl.w	r3, r2, r3
 8027978:	69ba      	ldr	r2, [r7, #24]
 802797a:	4313      	orrs	r3, r2
 802797c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802797e:	69fb      	ldr	r3, [r7, #28]
 8027980:	08da      	lsrs	r2, r3, #3
 8027982:	687b      	ldr	r3, [r7, #4]
 8027984:	3208      	adds	r2, #8
 8027986:	69b9      	ldr	r1, [r7, #24]
 8027988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802798c:	687b      	ldr	r3, [r7, #4]
 802798e:	681b      	ldr	r3, [r3, #0]
 8027990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8027992:	69fb      	ldr	r3, [r7, #28]
 8027994:	005b      	lsls	r3, r3, #1
 8027996:	2203      	movs	r2, #3
 8027998:	fa02 f303 	lsl.w	r3, r2, r3
 802799c:	43db      	mvns	r3, r3
 802799e:	69ba      	ldr	r2, [r7, #24]
 80279a0:	4013      	ands	r3, r2
 80279a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80279a4:	683b      	ldr	r3, [r7, #0]
 80279a6:	685b      	ldr	r3, [r3, #4]
 80279a8:	f003 0203 	and.w	r2, r3, #3
 80279ac:	69fb      	ldr	r3, [r7, #28]
 80279ae:	005b      	lsls	r3, r3, #1
 80279b0:	fa02 f303 	lsl.w	r3, r2, r3
 80279b4:	69ba      	ldr	r2, [r7, #24]
 80279b6:	4313      	orrs	r3, r2
 80279b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80279ba:	687b      	ldr	r3, [r7, #4]
 80279bc:	69ba      	ldr	r2, [r7, #24]
 80279be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80279c0:	683b      	ldr	r3, [r7, #0]
 80279c2:	685b      	ldr	r3, [r3, #4]
 80279c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80279c8:	2b00      	cmp	r3, #0
 80279ca:	f000 80b4 	beq.w	8027b36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80279ce:	2300      	movs	r3, #0
 80279d0:	60fb      	str	r3, [r7, #12]
 80279d2:	4b5f      	ldr	r3, [pc, #380]	; (8027b50 <HAL_GPIO_Init+0x308>)
 80279d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80279d6:	4a5e      	ldr	r2, [pc, #376]	; (8027b50 <HAL_GPIO_Init+0x308>)
 80279d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80279dc:	6453      	str	r3, [r2, #68]	; 0x44
 80279de:	4b5c      	ldr	r3, [pc, #368]	; (8027b50 <HAL_GPIO_Init+0x308>)
 80279e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80279e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80279e6:	60fb      	str	r3, [r7, #12]
 80279e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80279ea:	4a5a      	ldr	r2, [pc, #360]	; (8027b54 <HAL_GPIO_Init+0x30c>)
 80279ec:	69fb      	ldr	r3, [r7, #28]
 80279ee:	089b      	lsrs	r3, r3, #2
 80279f0:	3302      	adds	r3, #2
 80279f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80279f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80279f8:	69fb      	ldr	r3, [r7, #28]
 80279fa:	f003 0303 	and.w	r3, r3, #3
 80279fe:	009b      	lsls	r3, r3, #2
 8027a00:	220f      	movs	r2, #15
 8027a02:	fa02 f303 	lsl.w	r3, r2, r3
 8027a06:	43db      	mvns	r3, r3
 8027a08:	69ba      	ldr	r2, [r7, #24]
 8027a0a:	4013      	ands	r3, r2
 8027a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8027a0e:	687b      	ldr	r3, [r7, #4]
 8027a10:	4a51      	ldr	r2, [pc, #324]	; (8027b58 <HAL_GPIO_Init+0x310>)
 8027a12:	4293      	cmp	r3, r2
 8027a14:	d02b      	beq.n	8027a6e <HAL_GPIO_Init+0x226>
 8027a16:	687b      	ldr	r3, [r7, #4]
 8027a18:	4a50      	ldr	r2, [pc, #320]	; (8027b5c <HAL_GPIO_Init+0x314>)
 8027a1a:	4293      	cmp	r3, r2
 8027a1c:	d025      	beq.n	8027a6a <HAL_GPIO_Init+0x222>
 8027a1e:	687b      	ldr	r3, [r7, #4]
 8027a20:	4a4f      	ldr	r2, [pc, #316]	; (8027b60 <HAL_GPIO_Init+0x318>)
 8027a22:	4293      	cmp	r3, r2
 8027a24:	d01f      	beq.n	8027a66 <HAL_GPIO_Init+0x21e>
 8027a26:	687b      	ldr	r3, [r7, #4]
 8027a28:	4a4e      	ldr	r2, [pc, #312]	; (8027b64 <HAL_GPIO_Init+0x31c>)
 8027a2a:	4293      	cmp	r3, r2
 8027a2c:	d019      	beq.n	8027a62 <HAL_GPIO_Init+0x21a>
 8027a2e:	687b      	ldr	r3, [r7, #4]
 8027a30:	4a4d      	ldr	r2, [pc, #308]	; (8027b68 <HAL_GPIO_Init+0x320>)
 8027a32:	4293      	cmp	r3, r2
 8027a34:	d013      	beq.n	8027a5e <HAL_GPIO_Init+0x216>
 8027a36:	687b      	ldr	r3, [r7, #4]
 8027a38:	4a4c      	ldr	r2, [pc, #304]	; (8027b6c <HAL_GPIO_Init+0x324>)
 8027a3a:	4293      	cmp	r3, r2
 8027a3c:	d00d      	beq.n	8027a5a <HAL_GPIO_Init+0x212>
 8027a3e:	687b      	ldr	r3, [r7, #4]
 8027a40:	4a4b      	ldr	r2, [pc, #300]	; (8027b70 <HAL_GPIO_Init+0x328>)
 8027a42:	4293      	cmp	r3, r2
 8027a44:	d007      	beq.n	8027a56 <HAL_GPIO_Init+0x20e>
 8027a46:	687b      	ldr	r3, [r7, #4]
 8027a48:	4a4a      	ldr	r2, [pc, #296]	; (8027b74 <HAL_GPIO_Init+0x32c>)
 8027a4a:	4293      	cmp	r3, r2
 8027a4c:	d101      	bne.n	8027a52 <HAL_GPIO_Init+0x20a>
 8027a4e:	2307      	movs	r3, #7
 8027a50:	e00e      	b.n	8027a70 <HAL_GPIO_Init+0x228>
 8027a52:	2308      	movs	r3, #8
 8027a54:	e00c      	b.n	8027a70 <HAL_GPIO_Init+0x228>
 8027a56:	2306      	movs	r3, #6
 8027a58:	e00a      	b.n	8027a70 <HAL_GPIO_Init+0x228>
 8027a5a:	2305      	movs	r3, #5
 8027a5c:	e008      	b.n	8027a70 <HAL_GPIO_Init+0x228>
 8027a5e:	2304      	movs	r3, #4
 8027a60:	e006      	b.n	8027a70 <HAL_GPIO_Init+0x228>
 8027a62:	2303      	movs	r3, #3
 8027a64:	e004      	b.n	8027a70 <HAL_GPIO_Init+0x228>
 8027a66:	2302      	movs	r3, #2
 8027a68:	e002      	b.n	8027a70 <HAL_GPIO_Init+0x228>
 8027a6a:	2301      	movs	r3, #1
 8027a6c:	e000      	b.n	8027a70 <HAL_GPIO_Init+0x228>
 8027a6e:	2300      	movs	r3, #0
 8027a70:	69fa      	ldr	r2, [r7, #28]
 8027a72:	f002 0203 	and.w	r2, r2, #3
 8027a76:	0092      	lsls	r2, r2, #2
 8027a78:	4093      	lsls	r3, r2
 8027a7a:	69ba      	ldr	r2, [r7, #24]
 8027a7c:	4313      	orrs	r3, r2
 8027a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8027a80:	4934      	ldr	r1, [pc, #208]	; (8027b54 <HAL_GPIO_Init+0x30c>)
 8027a82:	69fb      	ldr	r3, [r7, #28]
 8027a84:	089b      	lsrs	r3, r3, #2
 8027a86:	3302      	adds	r3, #2
 8027a88:	69ba      	ldr	r2, [r7, #24]
 8027a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8027a8e:	4b3a      	ldr	r3, [pc, #232]	; (8027b78 <HAL_GPIO_Init+0x330>)
 8027a90:	681b      	ldr	r3, [r3, #0]
 8027a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027a94:	693b      	ldr	r3, [r7, #16]
 8027a96:	43db      	mvns	r3, r3
 8027a98:	69ba      	ldr	r2, [r7, #24]
 8027a9a:	4013      	ands	r3, r2
 8027a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8027a9e:	683b      	ldr	r3, [r7, #0]
 8027aa0:	685b      	ldr	r3, [r3, #4]
 8027aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027aa6:	2b00      	cmp	r3, #0
 8027aa8:	d003      	beq.n	8027ab2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8027aaa:	69ba      	ldr	r2, [r7, #24]
 8027aac:	693b      	ldr	r3, [r7, #16]
 8027aae:	4313      	orrs	r3, r2
 8027ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8027ab2:	4a31      	ldr	r2, [pc, #196]	; (8027b78 <HAL_GPIO_Init+0x330>)
 8027ab4:	69bb      	ldr	r3, [r7, #24]
 8027ab6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8027ab8:	4b2f      	ldr	r3, [pc, #188]	; (8027b78 <HAL_GPIO_Init+0x330>)
 8027aba:	685b      	ldr	r3, [r3, #4]
 8027abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027abe:	693b      	ldr	r3, [r7, #16]
 8027ac0:	43db      	mvns	r3, r3
 8027ac2:	69ba      	ldr	r2, [r7, #24]
 8027ac4:	4013      	ands	r3, r2
 8027ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8027ac8:	683b      	ldr	r3, [r7, #0]
 8027aca:	685b      	ldr	r3, [r3, #4]
 8027acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027ad0:	2b00      	cmp	r3, #0
 8027ad2:	d003      	beq.n	8027adc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8027ad4:	69ba      	ldr	r2, [r7, #24]
 8027ad6:	693b      	ldr	r3, [r7, #16]
 8027ad8:	4313      	orrs	r3, r2
 8027ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8027adc:	4a26      	ldr	r2, [pc, #152]	; (8027b78 <HAL_GPIO_Init+0x330>)
 8027ade:	69bb      	ldr	r3, [r7, #24]
 8027ae0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8027ae2:	4b25      	ldr	r3, [pc, #148]	; (8027b78 <HAL_GPIO_Init+0x330>)
 8027ae4:	689b      	ldr	r3, [r3, #8]
 8027ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027ae8:	693b      	ldr	r3, [r7, #16]
 8027aea:	43db      	mvns	r3, r3
 8027aec:	69ba      	ldr	r2, [r7, #24]
 8027aee:	4013      	ands	r3, r2
 8027af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8027af2:	683b      	ldr	r3, [r7, #0]
 8027af4:	685b      	ldr	r3, [r3, #4]
 8027af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8027afa:	2b00      	cmp	r3, #0
 8027afc:	d003      	beq.n	8027b06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8027afe:	69ba      	ldr	r2, [r7, #24]
 8027b00:	693b      	ldr	r3, [r7, #16]
 8027b02:	4313      	orrs	r3, r2
 8027b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8027b06:	4a1c      	ldr	r2, [pc, #112]	; (8027b78 <HAL_GPIO_Init+0x330>)
 8027b08:	69bb      	ldr	r3, [r7, #24]
 8027b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8027b0c:	4b1a      	ldr	r3, [pc, #104]	; (8027b78 <HAL_GPIO_Init+0x330>)
 8027b0e:	68db      	ldr	r3, [r3, #12]
 8027b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027b12:	693b      	ldr	r3, [r7, #16]
 8027b14:	43db      	mvns	r3, r3
 8027b16:	69ba      	ldr	r2, [r7, #24]
 8027b18:	4013      	ands	r3, r2
 8027b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8027b1c:	683b      	ldr	r3, [r7, #0]
 8027b1e:	685b      	ldr	r3, [r3, #4]
 8027b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8027b24:	2b00      	cmp	r3, #0
 8027b26:	d003      	beq.n	8027b30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8027b28:	69ba      	ldr	r2, [r7, #24]
 8027b2a:	693b      	ldr	r3, [r7, #16]
 8027b2c:	4313      	orrs	r3, r2
 8027b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8027b30:	4a11      	ldr	r2, [pc, #68]	; (8027b78 <HAL_GPIO_Init+0x330>)
 8027b32:	69bb      	ldr	r3, [r7, #24]
 8027b34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8027b36:	69fb      	ldr	r3, [r7, #28]
 8027b38:	3301      	adds	r3, #1
 8027b3a:	61fb      	str	r3, [r7, #28]
 8027b3c:	69fb      	ldr	r3, [r7, #28]
 8027b3e:	2b0f      	cmp	r3, #15
 8027b40:	f67f ae90 	bls.w	8027864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8027b44:	bf00      	nop
 8027b46:	3724      	adds	r7, #36	; 0x24
 8027b48:	46bd      	mov	sp, r7
 8027b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b4e:	4770      	bx	lr
 8027b50:	40023800 	.word	0x40023800
 8027b54:	40013800 	.word	0x40013800
 8027b58:	40020000 	.word	0x40020000
 8027b5c:	40020400 	.word	0x40020400
 8027b60:	40020800 	.word	0x40020800
 8027b64:	40020c00 	.word	0x40020c00
 8027b68:	40021000 	.word	0x40021000
 8027b6c:	40021400 	.word	0x40021400
 8027b70:	40021800 	.word	0x40021800
 8027b74:	40021c00 	.word	0x40021c00
 8027b78:	40013c00 	.word	0x40013c00

08027b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8027b7c:	b480      	push	{r7}
 8027b7e:	b085      	sub	sp, #20
 8027b80:	af00      	add	r7, sp, #0
 8027b82:	6078      	str	r0, [r7, #4]
 8027b84:	460b      	mov	r3, r1
 8027b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8027b88:	687b      	ldr	r3, [r7, #4]
 8027b8a:	691a      	ldr	r2, [r3, #16]
 8027b8c:	887b      	ldrh	r3, [r7, #2]
 8027b8e:	4013      	ands	r3, r2
 8027b90:	2b00      	cmp	r3, #0
 8027b92:	d002      	beq.n	8027b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8027b94:	2301      	movs	r3, #1
 8027b96:	73fb      	strb	r3, [r7, #15]
 8027b98:	e001      	b.n	8027b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8027b9a:	2300      	movs	r3, #0
 8027b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8027b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8027ba0:	4618      	mov	r0, r3
 8027ba2:	3714      	adds	r7, #20
 8027ba4:	46bd      	mov	sp, r7
 8027ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027baa:	4770      	bx	lr

08027bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8027bac:	b480      	push	{r7}
 8027bae:	b083      	sub	sp, #12
 8027bb0:	af00      	add	r7, sp, #0
 8027bb2:	6078      	str	r0, [r7, #4]
 8027bb4:	460b      	mov	r3, r1
 8027bb6:	807b      	strh	r3, [r7, #2]
 8027bb8:	4613      	mov	r3, r2
 8027bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8027bbc:	787b      	ldrb	r3, [r7, #1]
 8027bbe:	2b00      	cmp	r3, #0
 8027bc0:	d003      	beq.n	8027bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8027bc2:	887a      	ldrh	r2, [r7, #2]
 8027bc4:	687b      	ldr	r3, [r7, #4]
 8027bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8027bc8:	e003      	b.n	8027bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8027bca:	887b      	ldrh	r3, [r7, #2]
 8027bcc:	041a      	lsls	r2, r3, #16
 8027bce:	687b      	ldr	r3, [r7, #4]
 8027bd0:	619a      	str	r2, [r3, #24]
}
 8027bd2:	bf00      	nop
 8027bd4:	370c      	adds	r7, #12
 8027bd6:	46bd      	mov	sp, r7
 8027bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027bdc:	4770      	bx	lr
	...

08027be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8027be0:	b580      	push	{r7, lr}
 8027be2:	b084      	sub	sp, #16
 8027be4:	af00      	add	r7, sp, #0
 8027be6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8027be8:	687b      	ldr	r3, [r7, #4]
 8027bea:	2b00      	cmp	r3, #0
 8027bec:	d101      	bne.n	8027bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8027bee:	2301      	movs	r3, #1
 8027bf0:	e11f      	b.n	8027e32 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8027bf2:	687b      	ldr	r3, [r7, #4]
 8027bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027bf8:	b2db      	uxtb	r3, r3
 8027bfa:	2b00      	cmp	r3, #0
 8027bfc:	d106      	bne.n	8027c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8027bfe:	687b      	ldr	r3, [r7, #4]
 8027c00:	2200      	movs	r2, #0
 8027c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8027c06:	6878      	ldr	r0, [r7, #4]
 8027c08:	f7fd fcc6 	bl	8025598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8027c0c:	687b      	ldr	r3, [r7, #4]
 8027c0e:	2224      	movs	r2, #36	; 0x24
 8027c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8027c14:	687b      	ldr	r3, [r7, #4]
 8027c16:	681b      	ldr	r3, [r3, #0]
 8027c18:	681a      	ldr	r2, [r3, #0]
 8027c1a:	687b      	ldr	r3, [r7, #4]
 8027c1c:	681b      	ldr	r3, [r3, #0]
 8027c1e:	f022 0201 	bic.w	r2, r2, #1
 8027c22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8027c24:	687b      	ldr	r3, [r7, #4]
 8027c26:	681b      	ldr	r3, [r3, #0]
 8027c28:	681a      	ldr	r2, [r3, #0]
 8027c2a:	687b      	ldr	r3, [r7, #4]
 8027c2c:	681b      	ldr	r3, [r3, #0]
 8027c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8027c32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8027c34:	687b      	ldr	r3, [r7, #4]
 8027c36:	681b      	ldr	r3, [r3, #0]
 8027c38:	681a      	ldr	r2, [r3, #0]
 8027c3a:	687b      	ldr	r3, [r7, #4]
 8027c3c:	681b      	ldr	r3, [r3, #0]
 8027c3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8027c42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8027c44:	f000 fd18 	bl	8028678 <HAL_RCC_GetPCLK1Freq>
 8027c48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8027c4a:	687b      	ldr	r3, [r7, #4]
 8027c4c:	685b      	ldr	r3, [r3, #4]
 8027c4e:	4a7b      	ldr	r2, [pc, #492]	; (8027e3c <HAL_I2C_Init+0x25c>)
 8027c50:	4293      	cmp	r3, r2
 8027c52:	d807      	bhi.n	8027c64 <HAL_I2C_Init+0x84>
 8027c54:	68fb      	ldr	r3, [r7, #12]
 8027c56:	4a7a      	ldr	r2, [pc, #488]	; (8027e40 <HAL_I2C_Init+0x260>)
 8027c58:	4293      	cmp	r3, r2
 8027c5a:	bf94      	ite	ls
 8027c5c:	2301      	movls	r3, #1
 8027c5e:	2300      	movhi	r3, #0
 8027c60:	b2db      	uxtb	r3, r3
 8027c62:	e006      	b.n	8027c72 <HAL_I2C_Init+0x92>
 8027c64:	68fb      	ldr	r3, [r7, #12]
 8027c66:	4a77      	ldr	r2, [pc, #476]	; (8027e44 <HAL_I2C_Init+0x264>)
 8027c68:	4293      	cmp	r3, r2
 8027c6a:	bf94      	ite	ls
 8027c6c:	2301      	movls	r3, #1
 8027c6e:	2300      	movhi	r3, #0
 8027c70:	b2db      	uxtb	r3, r3
 8027c72:	2b00      	cmp	r3, #0
 8027c74:	d001      	beq.n	8027c7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8027c76:	2301      	movs	r3, #1
 8027c78:	e0db      	b.n	8027e32 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8027c7a:	68fb      	ldr	r3, [r7, #12]
 8027c7c:	4a72      	ldr	r2, [pc, #456]	; (8027e48 <HAL_I2C_Init+0x268>)
 8027c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8027c82:	0c9b      	lsrs	r3, r3, #18
 8027c84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8027c86:	687b      	ldr	r3, [r7, #4]
 8027c88:	681b      	ldr	r3, [r3, #0]
 8027c8a:	685b      	ldr	r3, [r3, #4]
 8027c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027c90:	687b      	ldr	r3, [r7, #4]
 8027c92:	681b      	ldr	r3, [r3, #0]
 8027c94:	68ba      	ldr	r2, [r7, #8]
 8027c96:	430a      	orrs	r2, r1
 8027c98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8027c9a:	687b      	ldr	r3, [r7, #4]
 8027c9c:	681b      	ldr	r3, [r3, #0]
 8027c9e:	6a1b      	ldr	r3, [r3, #32]
 8027ca0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027ca4:	687b      	ldr	r3, [r7, #4]
 8027ca6:	685b      	ldr	r3, [r3, #4]
 8027ca8:	4a64      	ldr	r2, [pc, #400]	; (8027e3c <HAL_I2C_Init+0x25c>)
 8027caa:	4293      	cmp	r3, r2
 8027cac:	d802      	bhi.n	8027cb4 <HAL_I2C_Init+0xd4>
 8027cae:	68bb      	ldr	r3, [r7, #8]
 8027cb0:	3301      	adds	r3, #1
 8027cb2:	e009      	b.n	8027cc8 <HAL_I2C_Init+0xe8>
 8027cb4:	68bb      	ldr	r3, [r7, #8]
 8027cb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8027cba:	fb02 f303 	mul.w	r3, r2, r3
 8027cbe:	4a63      	ldr	r2, [pc, #396]	; (8027e4c <HAL_I2C_Init+0x26c>)
 8027cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8027cc4:	099b      	lsrs	r3, r3, #6
 8027cc6:	3301      	adds	r3, #1
 8027cc8:	687a      	ldr	r2, [r7, #4]
 8027cca:	6812      	ldr	r2, [r2, #0]
 8027ccc:	430b      	orrs	r3, r1
 8027cce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8027cd0:	687b      	ldr	r3, [r7, #4]
 8027cd2:	681b      	ldr	r3, [r3, #0]
 8027cd4:	69db      	ldr	r3, [r3, #28]
 8027cd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8027cda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8027cde:	687b      	ldr	r3, [r7, #4]
 8027ce0:	685b      	ldr	r3, [r3, #4]
 8027ce2:	4956      	ldr	r1, [pc, #344]	; (8027e3c <HAL_I2C_Init+0x25c>)
 8027ce4:	428b      	cmp	r3, r1
 8027ce6:	d80d      	bhi.n	8027d04 <HAL_I2C_Init+0x124>
 8027ce8:	68fb      	ldr	r3, [r7, #12]
 8027cea:	1e59      	subs	r1, r3, #1
 8027cec:	687b      	ldr	r3, [r7, #4]
 8027cee:	685b      	ldr	r3, [r3, #4]
 8027cf0:	005b      	lsls	r3, r3, #1
 8027cf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8027cf6:	3301      	adds	r3, #1
 8027cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027cfc:	2b04      	cmp	r3, #4
 8027cfe:	bf38      	it	cc
 8027d00:	2304      	movcc	r3, #4
 8027d02:	e04f      	b.n	8027da4 <HAL_I2C_Init+0x1c4>
 8027d04:	687b      	ldr	r3, [r7, #4]
 8027d06:	689b      	ldr	r3, [r3, #8]
 8027d08:	2b00      	cmp	r3, #0
 8027d0a:	d111      	bne.n	8027d30 <HAL_I2C_Init+0x150>
 8027d0c:	68fb      	ldr	r3, [r7, #12]
 8027d0e:	1e58      	subs	r0, r3, #1
 8027d10:	687b      	ldr	r3, [r7, #4]
 8027d12:	6859      	ldr	r1, [r3, #4]
 8027d14:	460b      	mov	r3, r1
 8027d16:	005b      	lsls	r3, r3, #1
 8027d18:	440b      	add	r3, r1
 8027d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8027d1e:	3301      	adds	r3, #1
 8027d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027d24:	2b00      	cmp	r3, #0
 8027d26:	bf0c      	ite	eq
 8027d28:	2301      	moveq	r3, #1
 8027d2a:	2300      	movne	r3, #0
 8027d2c:	b2db      	uxtb	r3, r3
 8027d2e:	e012      	b.n	8027d56 <HAL_I2C_Init+0x176>
 8027d30:	68fb      	ldr	r3, [r7, #12]
 8027d32:	1e58      	subs	r0, r3, #1
 8027d34:	687b      	ldr	r3, [r7, #4]
 8027d36:	6859      	ldr	r1, [r3, #4]
 8027d38:	460b      	mov	r3, r1
 8027d3a:	009b      	lsls	r3, r3, #2
 8027d3c:	440b      	add	r3, r1
 8027d3e:	0099      	lsls	r1, r3, #2
 8027d40:	440b      	add	r3, r1
 8027d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8027d46:	3301      	adds	r3, #1
 8027d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027d4c:	2b00      	cmp	r3, #0
 8027d4e:	bf0c      	ite	eq
 8027d50:	2301      	moveq	r3, #1
 8027d52:	2300      	movne	r3, #0
 8027d54:	b2db      	uxtb	r3, r3
 8027d56:	2b00      	cmp	r3, #0
 8027d58:	d001      	beq.n	8027d5e <HAL_I2C_Init+0x17e>
 8027d5a:	2301      	movs	r3, #1
 8027d5c:	e022      	b.n	8027da4 <HAL_I2C_Init+0x1c4>
 8027d5e:	687b      	ldr	r3, [r7, #4]
 8027d60:	689b      	ldr	r3, [r3, #8]
 8027d62:	2b00      	cmp	r3, #0
 8027d64:	d10e      	bne.n	8027d84 <HAL_I2C_Init+0x1a4>
 8027d66:	68fb      	ldr	r3, [r7, #12]
 8027d68:	1e58      	subs	r0, r3, #1
 8027d6a:	687b      	ldr	r3, [r7, #4]
 8027d6c:	6859      	ldr	r1, [r3, #4]
 8027d6e:	460b      	mov	r3, r1
 8027d70:	005b      	lsls	r3, r3, #1
 8027d72:	440b      	add	r3, r1
 8027d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8027d78:	3301      	adds	r3, #1
 8027d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8027d82:	e00f      	b.n	8027da4 <HAL_I2C_Init+0x1c4>
 8027d84:	68fb      	ldr	r3, [r7, #12]
 8027d86:	1e58      	subs	r0, r3, #1
 8027d88:	687b      	ldr	r3, [r7, #4]
 8027d8a:	6859      	ldr	r1, [r3, #4]
 8027d8c:	460b      	mov	r3, r1
 8027d8e:	009b      	lsls	r3, r3, #2
 8027d90:	440b      	add	r3, r1
 8027d92:	0099      	lsls	r1, r3, #2
 8027d94:	440b      	add	r3, r1
 8027d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8027d9a:	3301      	adds	r3, #1
 8027d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8027da4:	6879      	ldr	r1, [r7, #4]
 8027da6:	6809      	ldr	r1, [r1, #0]
 8027da8:	4313      	orrs	r3, r2
 8027daa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8027dac:	687b      	ldr	r3, [r7, #4]
 8027dae:	681b      	ldr	r3, [r3, #0]
 8027db0:	681b      	ldr	r3, [r3, #0]
 8027db2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8027db6:	687b      	ldr	r3, [r7, #4]
 8027db8:	69da      	ldr	r2, [r3, #28]
 8027dba:	687b      	ldr	r3, [r7, #4]
 8027dbc:	6a1b      	ldr	r3, [r3, #32]
 8027dbe:	431a      	orrs	r2, r3
 8027dc0:	687b      	ldr	r3, [r7, #4]
 8027dc2:	681b      	ldr	r3, [r3, #0]
 8027dc4:	430a      	orrs	r2, r1
 8027dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8027dc8:	687b      	ldr	r3, [r7, #4]
 8027dca:	681b      	ldr	r3, [r3, #0]
 8027dcc:	689b      	ldr	r3, [r3, #8]
 8027dce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8027dd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8027dd6:	687a      	ldr	r2, [r7, #4]
 8027dd8:	6911      	ldr	r1, [r2, #16]
 8027dda:	687a      	ldr	r2, [r7, #4]
 8027ddc:	68d2      	ldr	r2, [r2, #12]
 8027dde:	4311      	orrs	r1, r2
 8027de0:	687a      	ldr	r2, [r7, #4]
 8027de2:	6812      	ldr	r2, [r2, #0]
 8027de4:	430b      	orrs	r3, r1
 8027de6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8027de8:	687b      	ldr	r3, [r7, #4]
 8027dea:	681b      	ldr	r3, [r3, #0]
 8027dec:	68db      	ldr	r3, [r3, #12]
 8027dee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8027df2:	687b      	ldr	r3, [r7, #4]
 8027df4:	695a      	ldr	r2, [r3, #20]
 8027df6:	687b      	ldr	r3, [r7, #4]
 8027df8:	699b      	ldr	r3, [r3, #24]
 8027dfa:	431a      	orrs	r2, r3
 8027dfc:	687b      	ldr	r3, [r7, #4]
 8027dfe:	681b      	ldr	r3, [r3, #0]
 8027e00:	430a      	orrs	r2, r1
 8027e02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8027e04:	687b      	ldr	r3, [r7, #4]
 8027e06:	681b      	ldr	r3, [r3, #0]
 8027e08:	681a      	ldr	r2, [r3, #0]
 8027e0a:	687b      	ldr	r3, [r7, #4]
 8027e0c:	681b      	ldr	r3, [r3, #0]
 8027e0e:	f042 0201 	orr.w	r2, r2, #1
 8027e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8027e14:	687b      	ldr	r3, [r7, #4]
 8027e16:	2200      	movs	r2, #0
 8027e18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8027e1a:	687b      	ldr	r3, [r7, #4]
 8027e1c:	2220      	movs	r2, #32
 8027e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8027e22:	687b      	ldr	r3, [r7, #4]
 8027e24:	2200      	movs	r2, #0
 8027e26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8027e28:	687b      	ldr	r3, [r7, #4]
 8027e2a:	2200      	movs	r2, #0
 8027e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8027e30:	2300      	movs	r3, #0
}
 8027e32:	4618      	mov	r0, r3
 8027e34:	3710      	adds	r7, #16
 8027e36:	46bd      	mov	sp, r7
 8027e38:	bd80      	pop	{r7, pc}
 8027e3a:	bf00      	nop
 8027e3c:	000186a0 	.word	0x000186a0
 8027e40:	001e847f 	.word	0x001e847f
 8027e44:	003d08ff 	.word	0x003d08ff
 8027e48:	431bde83 	.word	0x431bde83
 8027e4c:	10624dd3 	.word	0x10624dd3

08027e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8027e50:	b580      	push	{r7, lr}
 8027e52:	b086      	sub	sp, #24
 8027e54:	af00      	add	r7, sp, #0
 8027e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8027e58:	687b      	ldr	r3, [r7, #4]
 8027e5a:	2b00      	cmp	r3, #0
 8027e5c:	d101      	bne.n	8027e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8027e5e:	2301      	movs	r3, #1
 8027e60:	e25b      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8027e62:	687b      	ldr	r3, [r7, #4]
 8027e64:	681b      	ldr	r3, [r3, #0]
 8027e66:	f003 0301 	and.w	r3, r3, #1
 8027e6a:	2b00      	cmp	r3, #0
 8027e6c:	d075      	beq.n	8027f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8027e6e:	4ba3      	ldr	r3, [pc, #652]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027e70:	689b      	ldr	r3, [r3, #8]
 8027e72:	f003 030c 	and.w	r3, r3, #12
 8027e76:	2b04      	cmp	r3, #4
 8027e78:	d00c      	beq.n	8027e94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8027e7a:	4ba0      	ldr	r3, [pc, #640]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027e7c:	689b      	ldr	r3, [r3, #8]
 8027e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8027e82:	2b08      	cmp	r3, #8
 8027e84:	d112      	bne.n	8027eac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8027e86:	4b9d      	ldr	r3, [pc, #628]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027e88:	685b      	ldr	r3, [r3, #4]
 8027e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8027e92:	d10b      	bne.n	8027eac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027e94:	4b99      	ldr	r3, [pc, #612]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027e96:	681b      	ldr	r3, [r3, #0]
 8027e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027e9c:	2b00      	cmp	r3, #0
 8027e9e:	d05b      	beq.n	8027f58 <HAL_RCC_OscConfig+0x108>
 8027ea0:	687b      	ldr	r3, [r7, #4]
 8027ea2:	685b      	ldr	r3, [r3, #4]
 8027ea4:	2b00      	cmp	r3, #0
 8027ea6:	d157      	bne.n	8027f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8027ea8:	2301      	movs	r3, #1
 8027eaa:	e236      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8027eac:	687b      	ldr	r3, [r7, #4]
 8027eae:	685b      	ldr	r3, [r3, #4]
 8027eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8027eb4:	d106      	bne.n	8027ec4 <HAL_RCC_OscConfig+0x74>
 8027eb6:	4b91      	ldr	r3, [pc, #580]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027eb8:	681b      	ldr	r3, [r3, #0]
 8027eba:	4a90      	ldr	r2, [pc, #576]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027ec0:	6013      	str	r3, [r2, #0]
 8027ec2:	e01d      	b.n	8027f00 <HAL_RCC_OscConfig+0xb0>
 8027ec4:	687b      	ldr	r3, [r7, #4]
 8027ec6:	685b      	ldr	r3, [r3, #4]
 8027ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8027ecc:	d10c      	bne.n	8027ee8 <HAL_RCC_OscConfig+0x98>
 8027ece:	4b8b      	ldr	r3, [pc, #556]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027ed0:	681b      	ldr	r3, [r3, #0]
 8027ed2:	4a8a      	ldr	r2, [pc, #552]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8027ed8:	6013      	str	r3, [r2, #0]
 8027eda:	4b88      	ldr	r3, [pc, #544]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027edc:	681b      	ldr	r3, [r3, #0]
 8027ede:	4a87      	ldr	r2, [pc, #540]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027ee4:	6013      	str	r3, [r2, #0]
 8027ee6:	e00b      	b.n	8027f00 <HAL_RCC_OscConfig+0xb0>
 8027ee8:	4b84      	ldr	r3, [pc, #528]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027eea:	681b      	ldr	r3, [r3, #0]
 8027eec:	4a83      	ldr	r2, [pc, #524]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8027ef2:	6013      	str	r3, [r2, #0]
 8027ef4:	4b81      	ldr	r3, [pc, #516]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027ef6:	681b      	ldr	r3, [r3, #0]
 8027ef8:	4a80      	ldr	r2, [pc, #512]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8027efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8027f00:	687b      	ldr	r3, [r7, #4]
 8027f02:	685b      	ldr	r3, [r3, #4]
 8027f04:	2b00      	cmp	r3, #0
 8027f06:	d013      	beq.n	8027f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027f08:	f7fe f926 	bl	8026158 <HAL_GetTick>
 8027f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027f0e:	e008      	b.n	8027f22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8027f10:	f7fe f922 	bl	8026158 <HAL_GetTick>
 8027f14:	4602      	mov	r2, r0
 8027f16:	693b      	ldr	r3, [r7, #16]
 8027f18:	1ad3      	subs	r3, r2, r3
 8027f1a:	2b64      	cmp	r3, #100	; 0x64
 8027f1c:	d901      	bls.n	8027f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8027f1e:	2303      	movs	r3, #3
 8027f20:	e1fb      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027f22:	4b76      	ldr	r3, [pc, #472]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027f24:	681b      	ldr	r3, [r3, #0]
 8027f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027f2a:	2b00      	cmp	r3, #0
 8027f2c:	d0f0      	beq.n	8027f10 <HAL_RCC_OscConfig+0xc0>
 8027f2e:	e014      	b.n	8027f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027f30:	f7fe f912 	bl	8026158 <HAL_GetTick>
 8027f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8027f36:	e008      	b.n	8027f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8027f38:	f7fe f90e 	bl	8026158 <HAL_GetTick>
 8027f3c:	4602      	mov	r2, r0
 8027f3e:	693b      	ldr	r3, [r7, #16]
 8027f40:	1ad3      	subs	r3, r2, r3
 8027f42:	2b64      	cmp	r3, #100	; 0x64
 8027f44:	d901      	bls.n	8027f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8027f46:	2303      	movs	r3, #3
 8027f48:	e1e7      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8027f4a:	4b6c      	ldr	r3, [pc, #432]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027f4c:	681b      	ldr	r3, [r3, #0]
 8027f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027f52:	2b00      	cmp	r3, #0
 8027f54:	d1f0      	bne.n	8027f38 <HAL_RCC_OscConfig+0xe8>
 8027f56:	e000      	b.n	8027f5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8027f5a:	687b      	ldr	r3, [r7, #4]
 8027f5c:	681b      	ldr	r3, [r3, #0]
 8027f5e:	f003 0302 	and.w	r3, r3, #2
 8027f62:	2b00      	cmp	r3, #0
 8027f64:	d063      	beq.n	802802e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8027f66:	4b65      	ldr	r3, [pc, #404]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027f68:	689b      	ldr	r3, [r3, #8]
 8027f6a:	f003 030c 	and.w	r3, r3, #12
 8027f6e:	2b00      	cmp	r3, #0
 8027f70:	d00b      	beq.n	8027f8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8027f72:	4b62      	ldr	r3, [pc, #392]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027f74:	689b      	ldr	r3, [r3, #8]
 8027f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8027f7a:	2b08      	cmp	r3, #8
 8027f7c:	d11c      	bne.n	8027fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8027f7e:	4b5f      	ldr	r3, [pc, #380]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027f80:	685b      	ldr	r3, [r3, #4]
 8027f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027f86:	2b00      	cmp	r3, #0
 8027f88:	d116      	bne.n	8027fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8027f8a:	4b5c      	ldr	r3, [pc, #368]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027f8c:	681b      	ldr	r3, [r3, #0]
 8027f8e:	f003 0302 	and.w	r3, r3, #2
 8027f92:	2b00      	cmp	r3, #0
 8027f94:	d005      	beq.n	8027fa2 <HAL_RCC_OscConfig+0x152>
 8027f96:	687b      	ldr	r3, [r7, #4]
 8027f98:	68db      	ldr	r3, [r3, #12]
 8027f9a:	2b01      	cmp	r3, #1
 8027f9c:	d001      	beq.n	8027fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8027f9e:	2301      	movs	r3, #1
 8027fa0:	e1bb      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027fa2:	4b56      	ldr	r3, [pc, #344]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027fa4:	681b      	ldr	r3, [r3, #0]
 8027fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8027faa:	687b      	ldr	r3, [r7, #4]
 8027fac:	691b      	ldr	r3, [r3, #16]
 8027fae:	00db      	lsls	r3, r3, #3
 8027fb0:	4952      	ldr	r1, [pc, #328]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027fb2:	4313      	orrs	r3, r2
 8027fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8027fb6:	e03a      	b.n	802802e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8027fb8:	687b      	ldr	r3, [r7, #4]
 8027fba:	68db      	ldr	r3, [r3, #12]
 8027fbc:	2b00      	cmp	r3, #0
 8027fbe:	d020      	beq.n	8028002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8027fc0:	4b4f      	ldr	r3, [pc, #316]	; (8028100 <HAL_RCC_OscConfig+0x2b0>)
 8027fc2:	2201      	movs	r2, #1
 8027fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027fc6:	f7fe f8c7 	bl	8026158 <HAL_GetTick>
 8027fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027fcc:	e008      	b.n	8027fe0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8027fce:	f7fe f8c3 	bl	8026158 <HAL_GetTick>
 8027fd2:	4602      	mov	r2, r0
 8027fd4:	693b      	ldr	r3, [r7, #16]
 8027fd6:	1ad3      	subs	r3, r2, r3
 8027fd8:	2b02      	cmp	r3, #2
 8027fda:	d901      	bls.n	8027fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8027fdc:	2303      	movs	r3, #3
 8027fde:	e19c      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027fe0:	4b46      	ldr	r3, [pc, #280]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027fe2:	681b      	ldr	r3, [r3, #0]
 8027fe4:	f003 0302 	and.w	r3, r3, #2
 8027fe8:	2b00      	cmp	r3, #0
 8027fea:	d0f0      	beq.n	8027fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027fec:	4b43      	ldr	r3, [pc, #268]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027fee:	681b      	ldr	r3, [r3, #0]
 8027ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8027ff4:	687b      	ldr	r3, [r7, #4]
 8027ff6:	691b      	ldr	r3, [r3, #16]
 8027ff8:	00db      	lsls	r3, r3, #3
 8027ffa:	4940      	ldr	r1, [pc, #256]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8027ffc:	4313      	orrs	r3, r2
 8027ffe:	600b      	str	r3, [r1, #0]
 8028000:	e015      	b.n	802802e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8028002:	4b3f      	ldr	r3, [pc, #252]	; (8028100 <HAL_RCC_OscConfig+0x2b0>)
 8028004:	2200      	movs	r2, #0
 8028006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028008:	f7fe f8a6 	bl	8026158 <HAL_GetTick>
 802800c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802800e:	e008      	b.n	8028022 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8028010:	f7fe f8a2 	bl	8026158 <HAL_GetTick>
 8028014:	4602      	mov	r2, r0
 8028016:	693b      	ldr	r3, [r7, #16]
 8028018:	1ad3      	subs	r3, r2, r3
 802801a:	2b02      	cmp	r3, #2
 802801c:	d901      	bls.n	8028022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802801e:	2303      	movs	r3, #3
 8028020:	e17b      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8028022:	4b36      	ldr	r3, [pc, #216]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8028024:	681b      	ldr	r3, [r3, #0]
 8028026:	f003 0302 	and.w	r3, r3, #2
 802802a:	2b00      	cmp	r3, #0
 802802c:	d1f0      	bne.n	8028010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802802e:	687b      	ldr	r3, [r7, #4]
 8028030:	681b      	ldr	r3, [r3, #0]
 8028032:	f003 0308 	and.w	r3, r3, #8
 8028036:	2b00      	cmp	r3, #0
 8028038:	d030      	beq.n	802809c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802803a:	687b      	ldr	r3, [r7, #4]
 802803c:	695b      	ldr	r3, [r3, #20]
 802803e:	2b00      	cmp	r3, #0
 8028040:	d016      	beq.n	8028070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8028042:	4b30      	ldr	r3, [pc, #192]	; (8028104 <HAL_RCC_OscConfig+0x2b4>)
 8028044:	2201      	movs	r2, #1
 8028046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028048:	f7fe f886 	bl	8026158 <HAL_GetTick>
 802804c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802804e:	e008      	b.n	8028062 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8028050:	f7fe f882 	bl	8026158 <HAL_GetTick>
 8028054:	4602      	mov	r2, r0
 8028056:	693b      	ldr	r3, [r7, #16]
 8028058:	1ad3      	subs	r3, r2, r3
 802805a:	2b02      	cmp	r3, #2
 802805c:	d901      	bls.n	8028062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802805e:	2303      	movs	r3, #3
 8028060:	e15b      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8028062:	4b26      	ldr	r3, [pc, #152]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8028064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028066:	f003 0302 	and.w	r3, r3, #2
 802806a:	2b00      	cmp	r3, #0
 802806c:	d0f0      	beq.n	8028050 <HAL_RCC_OscConfig+0x200>
 802806e:	e015      	b.n	802809c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8028070:	4b24      	ldr	r3, [pc, #144]	; (8028104 <HAL_RCC_OscConfig+0x2b4>)
 8028072:	2200      	movs	r2, #0
 8028074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8028076:	f7fe f86f 	bl	8026158 <HAL_GetTick>
 802807a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802807c:	e008      	b.n	8028090 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802807e:	f7fe f86b 	bl	8026158 <HAL_GetTick>
 8028082:	4602      	mov	r2, r0
 8028084:	693b      	ldr	r3, [r7, #16]
 8028086:	1ad3      	subs	r3, r2, r3
 8028088:	2b02      	cmp	r3, #2
 802808a:	d901      	bls.n	8028090 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 802808c:	2303      	movs	r3, #3
 802808e:	e144      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8028090:	4b1a      	ldr	r3, [pc, #104]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 8028092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028094:	f003 0302 	and.w	r3, r3, #2
 8028098:	2b00      	cmp	r3, #0
 802809a:	d1f0      	bne.n	802807e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802809c:	687b      	ldr	r3, [r7, #4]
 802809e:	681b      	ldr	r3, [r3, #0]
 80280a0:	f003 0304 	and.w	r3, r3, #4
 80280a4:	2b00      	cmp	r3, #0
 80280a6:	f000 80a0 	beq.w	80281ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80280aa:	2300      	movs	r3, #0
 80280ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80280ae:	4b13      	ldr	r3, [pc, #76]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 80280b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80280b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80280b6:	2b00      	cmp	r3, #0
 80280b8:	d10f      	bne.n	80280da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80280ba:	2300      	movs	r3, #0
 80280bc:	60bb      	str	r3, [r7, #8]
 80280be:	4b0f      	ldr	r3, [pc, #60]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 80280c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80280c2:	4a0e      	ldr	r2, [pc, #56]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 80280c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80280c8:	6413      	str	r3, [r2, #64]	; 0x40
 80280ca:	4b0c      	ldr	r3, [pc, #48]	; (80280fc <HAL_RCC_OscConfig+0x2ac>)
 80280cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80280ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80280d2:	60bb      	str	r3, [r7, #8]
 80280d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80280d6:	2301      	movs	r3, #1
 80280d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80280da:	4b0b      	ldr	r3, [pc, #44]	; (8028108 <HAL_RCC_OscConfig+0x2b8>)
 80280dc:	681b      	ldr	r3, [r3, #0]
 80280de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80280e2:	2b00      	cmp	r3, #0
 80280e4:	d121      	bne.n	802812a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80280e6:	4b08      	ldr	r3, [pc, #32]	; (8028108 <HAL_RCC_OscConfig+0x2b8>)
 80280e8:	681b      	ldr	r3, [r3, #0]
 80280ea:	4a07      	ldr	r2, [pc, #28]	; (8028108 <HAL_RCC_OscConfig+0x2b8>)
 80280ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80280f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80280f2:	f7fe f831 	bl	8026158 <HAL_GetTick>
 80280f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80280f8:	e011      	b.n	802811e <HAL_RCC_OscConfig+0x2ce>
 80280fa:	bf00      	nop
 80280fc:	40023800 	.word	0x40023800
 8028100:	42470000 	.word	0x42470000
 8028104:	42470e80 	.word	0x42470e80
 8028108:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802810c:	f7fe f824 	bl	8026158 <HAL_GetTick>
 8028110:	4602      	mov	r2, r0
 8028112:	693b      	ldr	r3, [r7, #16]
 8028114:	1ad3      	subs	r3, r2, r3
 8028116:	2b02      	cmp	r3, #2
 8028118:	d901      	bls.n	802811e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 802811a:	2303      	movs	r3, #3
 802811c:	e0fd      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802811e:	4b81      	ldr	r3, [pc, #516]	; (8028324 <HAL_RCC_OscConfig+0x4d4>)
 8028120:	681b      	ldr	r3, [r3, #0]
 8028122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028126:	2b00      	cmp	r3, #0
 8028128:	d0f0      	beq.n	802810c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802812a:	687b      	ldr	r3, [r7, #4]
 802812c:	689b      	ldr	r3, [r3, #8]
 802812e:	2b01      	cmp	r3, #1
 8028130:	d106      	bne.n	8028140 <HAL_RCC_OscConfig+0x2f0>
 8028132:	4b7d      	ldr	r3, [pc, #500]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 8028134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028136:	4a7c      	ldr	r2, [pc, #496]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 8028138:	f043 0301 	orr.w	r3, r3, #1
 802813c:	6713      	str	r3, [r2, #112]	; 0x70
 802813e:	e01c      	b.n	802817a <HAL_RCC_OscConfig+0x32a>
 8028140:	687b      	ldr	r3, [r7, #4]
 8028142:	689b      	ldr	r3, [r3, #8]
 8028144:	2b05      	cmp	r3, #5
 8028146:	d10c      	bne.n	8028162 <HAL_RCC_OscConfig+0x312>
 8028148:	4b77      	ldr	r3, [pc, #476]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 802814a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802814c:	4a76      	ldr	r2, [pc, #472]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 802814e:	f043 0304 	orr.w	r3, r3, #4
 8028152:	6713      	str	r3, [r2, #112]	; 0x70
 8028154:	4b74      	ldr	r3, [pc, #464]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 8028156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028158:	4a73      	ldr	r2, [pc, #460]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 802815a:	f043 0301 	orr.w	r3, r3, #1
 802815e:	6713      	str	r3, [r2, #112]	; 0x70
 8028160:	e00b      	b.n	802817a <HAL_RCC_OscConfig+0x32a>
 8028162:	4b71      	ldr	r3, [pc, #452]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 8028164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028166:	4a70      	ldr	r2, [pc, #448]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 8028168:	f023 0301 	bic.w	r3, r3, #1
 802816c:	6713      	str	r3, [r2, #112]	; 0x70
 802816e:	4b6e      	ldr	r3, [pc, #440]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 8028170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028172:	4a6d      	ldr	r2, [pc, #436]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 8028174:	f023 0304 	bic.w	r3, r3, #4
 8028178:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802817a:	687b      	ldr	r3, [r7, #4]
 802817c:	689b      	ldr	r3, [r3, #8]
 802817e:	2b00      	cmp	r3, #0
 8028180:	d015      	beq.n	80281ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028182:	f7fd ffe9 	bl	8026158 <HAL_GetTick>
 8028186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028188:	e00a      	b.n	80281a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802818a:	f7fd ffe5 	bl	8026158 <HAL_GetTick>
 802818e:	4602      	mov	r2, r0
 8028190:	693b      	ldr	r3, [r7, #16]
 8028192:	1ad3      	subs	r3, r2, r3
 8028194:	f241 3288 	movw	r2, #5000	; 0x1388
 8028198:	4293      	cmp	r3, r2
 802819a:	d901      	bls.n	80281a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 802819c:	2303      	movs	r3, #3
 802819e:	e0bc      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80281a0:	4b61      	ldr	r3, [pc, #388]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 80281a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80281a4:	f003 0302 	and.w	r3, r3, #2
 80281a8:	2b00      	cmp	r3, #0
 80281aa:	d0ee      	beq.n	802818a <HAL_RCC_OscConfig+0x33a>
 80281ac:	e014      	b.n	80281d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80281ae:	f7fd ffd3 	bl	8026158 <HAL_GetTick>
 80281b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80281b4:	e00a      	b.n	80281cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80281b6:	f7fd ffcf 	bl	8026158 <HAL_GetTick>
 80281ba:	4602      	mov	r2, r0
 80281bc:	693b      	ldr	r3, [r7, #16]
 80281be:	1ad3      	subs	r3, r2, r3
 80281c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80281c4:	4293      	cmp	r3, r2
 80281c6:	d901      	bls.n	80281cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80281c8:	2303      	movs	r3, #3
 80281ca:	e0a6      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80281cc:	4b56      	ldr	r3, [pc, #344]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 80281ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80281d0:	f003 0302 	and.w	r3, r3, #2
 80281d4:	2b00      	cmp	r3, #0
 80281d6:	d1ee      	bne.n	80281b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80281d8:	7dfb      	ldrb	r3, [r7, #23]
 80281da:	2b01      	cmp	r3, #1
 80281dc:	d105      	bne.n	80281ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80281de:	4b52      	ldr	r3, [pc, #328]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 80281e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80281e2:	4a51      	ldr	r2, [pc, #324]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 80281e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80281e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80281ea:	687b      	ldr	r3, [r7, #4]
 80281ec:	699b      	ldr	r3, [r3, #24]
 80281ee:	2b00      	cmp	r3, #0
 80281f0:	f000 8092 	beq.w	8028318 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80281f4:	4b4c      	ldr	r3, [pc, #304]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 80281f6:	689b      	ldr	r3, [r3, #8]
 80281f8:	f003 030c 	and.w	r3, r3, #12
 80281fc:	2b08      	cmp	r3, #8
 80281fe:	d05c      	beq.n	80282ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8028200:	687b      	ldr	r3, [r7, #4]
 8028202:	699b      	ldr	r3, [r3, #24]
 8028204:	2b02      	cmp	r3, #2
 8028206:	d141      	bne.n	802828c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8028208:	4b48      	ldr	r3, [pc, #288]	; (802832c <HAL_RCC_OscConfig+0x4dc>)
 802820a:	2200      	movs	r2, #0
 802820c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802820e:	f7fd ffa3 	bl	8026158 <HAL_GetTick>
 8028212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028214:	e008      	b.n	8028228 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028216:	f7fd ff9f 	bl	8026158 <HAL_GetTick>
 802821a:	4602      	mov	r2, r0
 802821c:	693b      	ldr	r3, [r7, #16]
 802821e:	1ad3      	subs	r3, r2, r3
 8028220:	2b02      	cmp	r3, #2
 8028222:	d901      	bls.n	8028228 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8028224:	2303      	movs	r3, #3
 8028226:	e078      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028228:	4b3f      	ldr	r3, [pc, #252]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 802822a:	681b      	ldr	r3, [r3, #0]
 802822c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028230:	2b00      	cmp	r3, #0
 8028232:	d1f0      	bne.n	8028216 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8028234:	687b      	ldr	r3, [r7, #4]
 8028236:	69da      	ldr	r2, [r3, #28]
 8028238:	687b      	ldr	r3, [r7, #4]
 802823a:	6a1b      	ldr	r3, [r3, #32]
 802823c:	431a      	orrs	r2, r3
 802823e:	687b      	ldr	r3, [r7, #4]
 8028240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028242:	019b      	lsls	r3, r3, #6
 8028244:	431a      	orrs	r2, r3
 8028246:	687b      	ldr	r3, [r7, #4]
 8028248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802824a:	085b      	lsrs	r3, r3, #1
 802824c:	3b01      	subs	r3, #1
 802824e:	041b      	lsls	r3, r3, #16
 8028250:	431a      	orrs	r2, r3
 8028252:	687b      	ldr	r3, [r7, #4]
 8028254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028256:	061b      	lsls	r3, r3, #24
 8028258:	4933      	ldr	r1, [pc, #204]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 802825a:	4313      	orrs	r3, r2
 802825c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802825e:	4b33      	ldr	r3, [pc, #204]	; (802832c <HAL_RCC_OscConfig+0x4dc>)
 8028260:	2201      	movs	r2, #1
 8028262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028264:	f7fd ff78 	bl	8026158 <HAL_GetTick>
 8028268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802826a:	e008      	b.n	802827e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802826c:	f7fd ff74 	bl	8026158 <HAL_GetTick>
 8028270:	4602      	mov	r2, r0
 8028272:	693b      	ldr	r3, [r7, #16]
 8028274:	1ad3      	subs	r3, r2, r3
 8028276:	2b02      	cmp	r3, #2
 8028278:	d901      	bls.n	802827e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 802827a:	2303      	movs	r3, #3
 802827c:	e04d      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802827e:	4b2a      	ldr	r3, [pc, #168]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 8028280:	681b      	ldr	r3, [r3, #0]
 8028282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028286:	2b00      	cmp	r3, #0
 8028288:	d0f0      	beq.n	802826c <HAL_RCC_OscConfig+0x41c>
 802828a:	e045      	b.n	8028318 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802828c:	4b27      	ldr	r3, [pc, #156]	; (802832c <HAL_RCC_OscConfig+0x4dc>)
 802828e:	2200      	movs	r2, #0
 8028290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028292:	f7fd ff61 	bl	8026158 <HAL_GetTick>
 8028296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028298:	e008      	b.n	80282ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802829a:	f7fd ff5d 	bl	8026158 <HAL_GetTick>
 802829e:	4602      	mov	r2, r0
 80282a0:	693b      	ldr	r3, [r7, #16]
 80282a2:	1ad3      	subs	r3, r2, r3
 80282a4:	2b02      	cmp	r3, #2
 80282a6:	d901      	bls.n	80282ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80282a8:	2303      	movs	r3, #3
 80282aa:	e036      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80282ac:	4b1e      	ldr	r3, [pc, #120]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 80282ae:	681b      	ldr	r3, [r3, #0]
 80282b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80282b4:	2b00      	cmp	r3, #0
 80282b6:	d1f0      	bne.n	802829a <HAL_RCC_OscConfig+0x44a>
 80282b8:	e02e      	b.n	8028318 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80282ba:	687b      	ldr	r3, [r7, #4]
 80282bc:	699b      	ldr	r3, [r3, #24]
 80282be:	2b01      	cmp	r3, #1
 80282c0:	d101      	bne.n	80282c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80282c2:	2301      	movs	r3, #1
 80282c4:	e029      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80282c6:	4b18      	ldr	r3, [pc, #96]	; (8028328 <HAL_RCC_OscConfig+0x4d8>)
 80282c8:	685b      	ldr	r3, [r3, #4]
 80282ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80282cc:	68fb      	ldr	r3, [r7, #12]
 80282ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80282d2:	687b      	ldr	r3, [r7, #4]
 80282d4:	69db      	ldr	r3, [r3, #28]
 80282d6:	429a      	cmp	r2, r3
 80282d8:	d11c      	bne.n	8028314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80282da:	68fb      	ldr	r3, [r7, #12]
 80282dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80282e0:	687b      	ldr	r3, [r7, #4]
 80282e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80282e4:	429a      	cmp	r2, r3
 80282e6:	d115      	bne.n	8028314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80282e8:	68fa      	ldr	r2, [r7, #12]
 80282ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80282ee:	4013      	ands	r3, r2
 80282f0:	687a      	ldr	r2, [r7, #4]
 80282f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80282f4:	4293      	cmp	r3, r2
 80282f6:	d10d      	bne.n	8028314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80282f8:	68fb      	ldr	r3, [r7, #12]
 80282fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80282fe:	687b      	ldr	r3, [r7, #4]
 8028300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8028302:	429a      	cmp	r2, r3
 8028304:	d106      	bne.n	8028314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8028306:	68fb      	ldr	r3, [r7, #12]
 8028308:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 802830c:	687b      	ldr	r3, [r7, #4]
 802830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8028310:	429a      	cmp	r2, r3
 8028312:	d001      	beq.n	8028318 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8028314:	2301      	movs	r3, #1
 8028316:	e000      	b.n	802831a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8028318:	2300      	movs	r3, #0
}
 802831a:	4618      	mov	r0, r3
 802831c:	3718      	adds	r7, #24
 802831e:	46bd      	mov	sp, r7
 8028320:	bd80      	pop	{r7, pc}
 8028322:	bf00      	nop
 8028324:	40007000 	.word	0x40007000
 8028328:	40023800 	.word	0x40023800
 802832c:	42470060 	.word	0x42470060

08028330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8028330:	b580      	push	{r7, lr}
 8028332:	b084      	sub	sp, #16
 8028334:	af00      	add	r7, sp, #0
 8028336:	6078      	str	r0, [r7, #4]
 8028338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802833a:	687b      	ldr	r3, [r7, #4]
 802833c:	2b00      	cmp	r3, #0
 802833e:	d101      	bne.n	8028344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8028340:	2301      	movs	r3, #1
 8028342:	e0cc      	b.n	80284de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8028344:	4b68      	ldr	r3, [pc, #416]	; (80284e8 <HAL_RCC_ClockConfig+0x1b8>)
 8028346:	681b      	ldr	r3, [r3, #0]
 8028348:	f003 030f 	and.w	r3, r3, #15
 802834c:	683a      	ldr	r2, [r7, #0]
 802834e:	429a      	cmp	r2, r3
 8028350:	d90c      	bls.n	802836c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8028352:	4b65      	ldr	r3, [pc, #404]	; (80284e8 <HAL_RCC_ClockConfig+0x1b8>)
 8028354:	683a      	ldr	r2, [r7, #0]
 8028356:	b2d2      	uxtb	r2, r2
 8028358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802835a:	4b63      	ldr	r3, [pc, #396]	; (80284e8 <HAL_RCC_ClockConfig+0x1b8>)
 802835c:	681b      	ldr	r3, [r3, #0]
 802835e:	f003 030f 	and.w	r3, r3, #15
 8028362:	683a      	ldr	r2, [r7, #0]
 8028364:	429a      	cmp	r2, r3
 8028366:	d001      	beq.n	802836c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8028368:	2301      	movs	r3, #1
 802836a:	e0b8      	b.n	80284de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802836c:	687b      	ldr	r3, [r7, #4]
 802836e:	681b      	ldr	r3, [r3, #0]
 8028370:	f003 0302 	and.w	r3, r3, #2
 8028374:	2b00      	cmp	r3, #0
 8028376:	d020      	beq.n	80283ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028378:	687b      	ldr	r3, [r7, #4]
 802837a:	681b      	ldr	r3, [r3, #0]
 802837c:	f003 0304 	and.w	r3, r3, #4
 8028380:	2b00      	cmp	r3, #0
 8028382:	d005      	beq.n	8028390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8028384:	4b59      	ldr	r3, [pc, #356]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 8028386:	689b      	ldr	r3, [r3, #8]
 8028388:	4a58      	ldr	r2, [pc, #352]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 802838a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802838e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028390:	687b      	ldr	r3, [r7, #4]
 8028392:	681b      	ldr	r3, [r3, #0]
 8028394:	f003 0308 	and.w	r3, r3, #8
 8028398:	2b00      	cmp	r3, #0
 802839a:	d005      	beq.n	80283a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802839c:	4b53      	ldr	r3, [pc, #332]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 802839e:	689b      	ldr	r3, [r3, #8]
 80283a0:	4a52      	ldr	r2, [pc, #328]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 80283a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80283a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80283a8:	4b50      	ldr	r3, [pc, #320]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 80283aa:	689b      	ldr	r3, [r3, #8]
 80283ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80283b0:	687b      	ldr	r3, [r7, #4]
 80283b2:	689b      	ldr	r3, [r3, #8]
 80283b4:	494d      	ldr	r1, [pc, #308]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 80283b6:	4313      	orrs	r3, r2
 80283b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80283ba:	687b      	ldr	r3, [r7, #4]
 80283bc:	681b      	ldr	r3, [r3, #0]
 80283be:	f003 0301 	and.w	r3, r3, #1
 80283c2:	2b00      	cmp	r3, #0
 80283c4:	d044      	beq.n	8028450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80283c6:	687b      	ldr	r3, [r7, #4]
 80283c8:	685b      	ldr	r3, [r3, #4]
 80283ca:	2b01      	cmp	r3, #1
 80283cc:	d107      	bne.n	80283de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80283ce:	4b47      	ldr	r3, [pc, #284]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 80283d0:	681b      	ldr	r3, [r3, #0]
 80283d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80283d6:	2b00      	cmp	r3, #0
 80283d8:	d119      	bne.n	802840e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80283da:	2301      	movs	r3, #1
 80283dc:	e07f      	b.n	80284de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80283de:	687b      	ldr	r3, [r7, #4]
 80283e0:	685b      	ldr	r3, [r3, #4]
 80283e2:	2b02      	cmp	r3, #2
 80283e4:	d003      	beq.n	80283ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80283e6:	687b      	ldr	r3, [r7, #4]
 80283e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80283ea:	2b03      	cmp	r3, #3
 80283ec:	d107      	bne.n	80283fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80283ee:	4b3f      	ldr	r3, [pc, #252]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 80283f0:	681b      	ldr	r3, [r3, #0]
 80283f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80283f6:	2b00      	cmp	r3, #0
 80283f8:	d109      	bne.n	802840e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80283fa:	2301      	movs	r3, #1
 80283fc:	e06f      	b.n	80284de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80283fe:	4b3b      	ldr	r3, [pc, #236]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 8028400:	681b      	ldr	r3, [r3, #0]
 8028402:	f003 0302 	and.w	r3, r3, #2
 8028406:	2b00      	cmp	r3, #0
 8028408:	d101      	bne.n	802840e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802840a:	2301      	movs	r3, #1
 802840c:	e067      	b.n	80284de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802840e:	4b37      	ldr	r3, [pc, #220]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 8028410:	689b      	ldr	r3, [r3, #8]
 8028412:	f023 0203 	bic.w	r2, r3, #3
 8028416:	687b      	ldr	r3, [r7, #4]
 8028418:	685b      	ldr	r3, [r3, #4]
 802841a:	4934      	ldr	r1, [pc, #208]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 802841c:	4313      	orrs	r3, r2
 802841e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8028420:	f7fd fe9a 	bl	8026158 <HAL_GetTick>
 8028424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028426:	e00a      	b.n	802843e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8028428:	f7fd fe96 	bl	8026158 <HAL_GetTick>
 802842c:	4602      	mov	r2, r0
 802842e:	68fb      	ldr	r3, [r7, #12]
 8028430:	1ad3      	subs	r3, r2, r3
 8028432:	f241 3288 	movw	r2, #5000	; 0x1388
 8028436:	4293      	cmp	r3, r2
 8028438:	d901      	bls.n	802843e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802843a:	2303      	movs	r3, #3
 802843c:	e04f      	b.n	80284de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802843e:	4b2b      	ldr	r3, [pc, #172]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 8028440:	689b      	ldr	r3, [r3, #8]
 8028442:	f003 020c 	and.w	r2, r3, #12
 8028446:	687b      	ldr	r3, [r7, #4]
 8028448:	685b      	ldr	r3, [r3, #4]
 802844a:	009b      	lsls	r3, r3, #2
 802844c:	429a      	cmp	r2, r3
 802844e:	d1eb      	bne.n	8028428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8028450:	4b25      	ldr	r3, [pc, #148]	; (80284e8 <HAL_RCC_ClockConfig+0x1b8>)
 8028452:	681b      	ldr	r3, [r3, #0]
 8028454:	f003 030f 	and.w	r3, r3, #15
 8028458:	683a      	ldr	r2, [r7, #0]
 802845a:	429a      	cmp	r2, r3
 802845c:	d20c      	bcs.n	8028478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802845e:	4b22      	ldr	r3, [pc, #136]	; (80284e8 <HAL_RCC_ClockConfig+0x1b8>)
 8028460:	683a      	ldr	r2, [r7, #0]
 8028462:	b2d2      	uxtb	r2, r2
 8028464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8028466:	4b20      	ldr	r3, [pc, #128]	; (80284e8 <HAL_RCC_ClockConfig+0x1b8>)
 8028468:	681b      	ldr	r3, [r3, #0]
 802846a:	f003 030f 	and.w	r3, r3, #15
 802846e:	683a      	ldr	r2, [r7, #0]
 8028470:	429a      	cmp	r2, r3
 8028472:	d001      	beq.n	8028478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8028474:	2301      	movs	r3, #1
 8028476:	e032      	b.n	80284de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028478:	687b      	ldr	r3, [r7, #4]
 802847a:	681b      	ldr	r3, [r3, #0]
 802847c:	f003 0304 	and.w	r3, r3, #4
 8028480:	2b00      	cmp	r3, #0
 8028482:	d008      	beq.n	8028496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8028484:	4b19      	ldr	r3, [pc, #100]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 8028486:	689b      	ldr	r3, [r3, #8]
 8028488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 802848c:	687b      	ldr	r3, [r7, #4]
 802848e:	68db      	ldr	r3, [r3, #12]
 8028490:	4916      	ldr	r1, [pc, #88]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 8028492:	4313      	orrs	r3, r2
 8028494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028496:	687b      	ldr	r3, [r7, #4]
 8028498:	681b      	ldr	r3, [r3, #0]
 802849a:	f003 0308 	and.w	r3, r3, #8
 802849e:	2b00      	cmp	r3, #0
 80284a0:	d009      	beq.n	80284b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80284a2:	4b12      	ldr	r3, [pc, #72]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 80284a4:	689b      	ldr	r3, [r3, #8]
 80284a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80284aa:	687b      	ldr	r3, [r7, #4]
 80284ac:	691b      	ldr	r3, [r3, #16]
 80284ae:	00db      	lsls	r3, r3, #3
 80284b0:	490e      	ldr	r1, [pc, #56]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 80284b2:	4313      	orrs	r3, r2
 80284b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80284b6:	f000 f821 	bl	80284fc <HAL_RCC_GetSysClockFreq>
 80284ba:	4601      	mov	r1, r0
 80284bc:	4b0b      	ldr	r3, [pc, #44]	; (80284ec <HAL_RCC_ClockConfig+0x1bc>)
 80284be:	689b      	ldr	r3, [r3, #8]
 80284c0:	091b      	lsrs	r3, r3, #4
 80284c2:	f003 030f 	and.w	r3, r3, #15
 80284c6:	4a0a      	ldr	r2, [pc, #40]	; (80284f0 <HAL_RCC_ClockConfig+0x1c0>)
 80284c8:	5cd3      	ldrb	r3, [r2, r3]
 80284ca:	fa21 f303 	lsr.w	r3, r1, r3
 80284ce:	4a09      	ldr	r2, [pc, #36]	; (80284f4 <HAL_RCC_ClockConfig+0x1c4>)
 80284d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80284d2:	4b09      	ldr	r3, [pc, #36]	; (80284f8 <HAL_RCC_ClockConfig+0x1c8>)
 80284d4:	681b      	ldr	r3, [r3, #0]
 80284d6:	4618      	mov	r0, r3
 80284d8:	f7fd fdfa 	bl	80260d0 <HAL_InitTick>

  return HAL_OK;
 80284dc:	2300      	movs	r3, #0
}
 80284de:	4618      	mov	r0, r3
 80284e0:	3710      	adds	r7, #16
 80284e2:	46bd      	mov	sp, r7
 80284e4:	bd80      	pop	{r7, pc}
 80284e6:	bf00      	nop
 80284e8:	40023c00 	.word	0x40023c00
 80284ec:	40023800 	.word	0x40023800
 80284f0:	0802a234 	.word	0x0802a234
 80284f4:	20000014 	.word	0x20000014
 80284f8:	20000018 	.word	0x20000018

080284fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80284fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80284fe:	b085      	sub	sp, #20
 8028500:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8028502:	2300      	movs	r3, #0
 8028504:	607b      	str	r3, [r7, #4]
 8028506:	2300      	movs	r3, #0
 8028508:	60fb      	str	r3, [r7, #12]
 802850a:	2300      	movs	r3, #0
 802850c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 802850e:	2300      	movs	r3, #0
 8028510:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8028512:	4b50      	ldr	r3, [pc, #320]	; (8028654 <HAL_RCC_GetSysClockFreq+0x158>)
 8028514:	689b      	ldr	r3, [r3, #8]
 8028516:	f003 030c 	and.w	r3, r3, #12
 802851a:	2b04      	cmp	r3, #4
 802851c:	d007      	beq.n	802852e <HAL_RCC_GetSysClockFreq+0x32>
 802851e:	2b08      	cmp	r3, #8
 8028520:	d008      	beq.n	8028534 <HAL_RCC_GetSysClockFreq+0x38>
 8028522:	2b00      	cmp	r3, #0
 8028524:	f040 808d 	bne.w	8028642 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8028528:	4b4b      	ldr	r3, [pc, #300]	; (8028658 <HAL_RCC_GetSysClockFreq+0x15c>)
 802852a:	60bb      	str	r3, [r7, #8]
       break;
 802852c:	e08c      	b.n	8028648 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802852e:	4b4b      	ldr	r3, [pc, #300]	; (802865c <HAL_RCC_GetSysClockFreq+0x160>)
 8028530:	60bb      	str	r3, [r7, #8]
      break;
 8028532:	e089      	b.n	8028648 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8028534:	4b47      	ldr	r3, [pc, #284]	; (8028654 <HAL_RCC_GetSysClockFreq+0x158>)
 8028536:	685b      	ldr	r3, [r3, #4]
 8028538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802853c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802853e:	4b45      	ldr	r3, [pc, #276]	; (8028654 <HAL_RCC_GetSysClockFreq+0x158>)
 8028540:	685b      	ldr	r3, [r3, #4]
 8028542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8028546:	2b00      	cmp	r3, #0
 8028548:	d023      	beq.n	8028592 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802854a:	4b42      	ldr	r3, [pc, #264]	; (8028654 <HAL_RCC_GetSysClockFreq+0x158>)
 802854c:	685b      	ldr	r3, [r3, #4]
 802854e:	099b      	lsrs	r3, r3, #6
 8028550:	f04f 0400 	mov.w	r4, #0
 8028554:	f240 11ff 	movw	r1, #511	; 0x1ff
 8028558:	f04f 0200 	mov.w	r2, #0
 802855c:	ea03 0501 	and.w	r5, r3, r1
 8028560:	ea04 0602 	and.w	r6, r4, r2
 8028564:	4a3d      	ldr	r2, [pc, #244]	; (802865c <HAL_RCC_GetSysClockFreq+0x160>)
 8028566:	fb02 f106 	mul.w	r1, r2, r6
 802856a:	2200      	movs	r2, #0
 802856c:	fb02 f205 	mul.w	r2, r2, r5
 8028570:	440a      	add	r2, r1
 8028572:	493a      	ldr	r1, [pc, #232]	; (802865c <HAL_RCC_GetSysClockFreq+0x160>)
 8028574:	fba5 0101 	umull	r0, r1, r5, r1
 8028578:	1853      	adds	r3, r2, r1
 802857a:	4619      	mov	r1, r3
 802857c:	687b      	ldr	r3, [r7, #4]
 802857e:	f04f 0400 	mov.w	r4, #0
 8028582:	461a      	mov	r2, r3
 8028584:	4623      	mov	r3, r4
 8028586:	f7f8 fa01 	bl	802098c <__aeabi_uldivmod>
 802858a:	4603      	mov	r3, r0
 802858c:	460c      	mov	r4, r1
 802858e:	60fb      	str	r3, [r7, #12]
 8028590:	e049      	b.n	8028626 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8028592:	4b30      	ldr	r3, [pc, #192]	; (8028654 <HAL_RCC_GetSysClockFreq+0x158>)
 8028594:	685b      	ldr	r3, [r3, #4]
 8028596:	099b      	lsrs	r3, r3, #6
 8028598:	f04f 0400 	mov.w	r4, #0
 802859c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80285a0:	f04f 0200 	mov.w	r2, #0
 80285a4:	ea03 0501 	and.w	r5, r3, r1
 80285a8:	ea04 0602 	and.w	r6, r4, r2
 80285ac:	4629      	mov	r1, r5
 80285ae:	4632      	mov	r2, r6
 80285b0:	f04f 0300 	mov.w	r3, #0
 80285b4:	f04f 0400 	mov.w	r4, #0
 80285b8:	0154      	lsls	r4, r2, #5
 80285ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80285be:	014b      	lsls	r3, r1, #5
 80285c0:	4619      	mov	r1, r3
 80285c2:	4622      	mov	r2, r4
 80285c4:	1b49      	subs	r1, r1, r5
 80285c6:	eb62 0206 	sbc.w	r2, r2, r6
 80285ca:	f04f 0300 	mov.w	r3, #0
 80285ce:	f04f 0400 	mov.w	r4, #0
 80285d2:	0194      	lsls	r4, r2, #6
 80285d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80285d8:	018b      	lsls	r3, r1, #6
 80285da:	1a5b      	subs	r3, r3, r1
 80285dc:	eb64 0402 	sbc.w	r4, r4, r2
 80285e0:	f04f 0100 	mov.w	r1, #0
 80285e4:	f04f 0200 	mov.w	r2, #0
 80285e8:	00e2      	lsls	r2, r4, #3
 80285ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80285ee:	00d9      	lsls	r1, r3, #3
 80285f0:	460b      	mov	r3, r1
 80285f2:	4614      	mov	r4, r2
 80285f4:	195b      	adds	r3, r3, r5
 80285f6:	eb44 0406 	adc.w	r4, r4, r6
 80285fa:	f04f 0100 	mov.w	r1, #0
 80285fe:	f04f 0200 	mov.w	r2, #0
 8028602:	02a2      	lsls	r2, r4, #10
 8028604:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8028608:	0299      	lsls	r1, r3, #10
 802860a:	460b      	mov	r3, r1
 802860c:	4614      	mov	r4, r2
 802860e:	4618      	mov	r0, r3
 8028610:	4621      	mov	r1, r4
 8028612:	687b      	ldr	r3, [r7, #4]
 8028614:	f04f 0400 	mov.w	r4, #0
 8028618:	461a      	mov	r2, r3
 802861a:	4623      	mov	r3, r4
 802861c:	f7f8 f9b6 	bl	802098c <__aeabi_uldivmod>
 8028620:	4603      	mov	r3, r0
 8028622:	460c      	mov	r4, r1
 8028624:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8028626:	4b0b      	ldr	r3, [pc, #44]	; (8028654 <HAL_RCC_GetSysClockFreq+0x158>)
 8028628:	685b      	ldr	r3, [r3, #4]
 802862a:	0c1b      	lsrs	r3, r3, #16
 802862c:	f003 0303 	and.w	r3, r3, #3
 8028630:	3301      	adds	r3, #1
 8028632:	005b      	lsls	r3, r3, #1
 8028634:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8028636:	68fa      	ldr	r2, [r7, #12]
 8028638:	683b      	ldr	r3, [r7, #0]
 802863a:	fbb2 f3f3 	udiv	r3, r2, r3
 802863e:	60bb      	str	r3, [r7, #8]
      break;
 8028640:	e002      	b.n	8028648 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8028642:	4b05      	ldr	r3, [pc, #20]	; (8028658 <HAL_RCC_GetSysClockFreq+0x15c>)
 8028644:	60bb      	str	r3, [r7, #8]
      break;
 8028646:	bf00      	nop
    }
  }
  return sysclockfreq;
 8028648:	68bb      	ldr	r3, [r7, #8]
}
 802864a:	4618      	mov	r0, r3
 802864c:	3714      	adds	r7, #20
 802864e:	46bd      	mov	sp, r7
 8028650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028652:	bf00      	nop
 8028654:	40023800 	.word	0x40023800
 8028658:	00f42400 	.word	0x00f42400
 802865c:	00b71b00 	.word	0x00b71b00

08028660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8028660:	b480      	push	{r7}
 8028662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8028664:	4b03      	ldr	r3, [pc, #12]	; (8028674 <HAL_RCC_GetHCLKFreq+0x14>)
 8028666:	681b      	ldr	r3, [r3, #0]
}
 8028668:	4618      	mov	r0, r3
 802866a:	46bd      	mov	sp, r7
 802866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028670:	4770      	bx	lr
 8028672:	bf00      	nop
 8028674:	20000014 	.word	0x20000014

08028678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8028678:	b580      	push	{r7, lr}
 802867a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 802867c:	f7ff fff0 	bl	8028660 <HAL_RCC_GetHCLKFreq>
 8028680:	4601      	mov	r1, r0
 8028682:	4b05      	ldr	r3, [pc, #20]	; (8028698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8028684:	689b      	ldr	r3, [r3, #8]
 8028686:	0a9b      	lsrs	r3, r3, #10
 8028688:	f003 0307 	and.w	r3, r3, #7
 802868c:	4a03      	ldr	r2, [pc, #12]	; (802869c <HAL_RCC_GetPCLK1Freq+0x24>)
 802868e:	5cd3      	ldrb	r3, [r2, r3]
 8028690:	fa21 f303 	lsr.w	r3, r1, r3
}
 8028694:	4618      	mov	r0, r3
 8028696:	bd80      	pop	{r7, pc}
 8028698:	40023800 	.word	0x40023800
 802869c:	0802a244 	.word	0x0802a244

080286a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80286a0:	b580      	push	{r7, lr}
 80286a2:	b082      	sub	sp, #8
 80286a4:	af00      	add	r7, sp, #0
 80286a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80286a8:	687b      	ldr	r3, [r7, #4]
 80286aa:	2b00      	cmp	r3, #0
 80286ac:	d101      	bne.n	80286b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80286ae:	2301      	movs	r3, #1
 80286b0:	e056      	b.n	8028760 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80286b2:	687b      	ldr	r3, [r7, #4]
 80286b4:	2200      	movs	r2, #0
 80286b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80286b8:	687b      	ldr	r3, [r7, #4]
 80286ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80286be:	b2db      	uxtb	r3, r3
 80286c0:	2b00      	cmp	r3, #0
 80286c2:	d106      	bne.n	80286d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80286c4:	687b      	ldr	r3, [r7, #4]
 80286c6:	2200      	movs	r2, #0
 80286c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80286cc:	6878      	ldr	r0, [r7, #4]
 80286ce:	f7fc ffab 	bl	8025628 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80286d2:	687b      	ldr	r3, [r7, #4]
 80286d4:	2202      	movs	r2, #2
 80286d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80286da:	687b      	ldr	r3, [r7, #4]
 80286dc:	681b      	ldr	r3, [r3, #0]
 80286de:	681a      	ldr	r2, [r3, #0]
 80286e0:	687b      	ldr	r3, [r7, #4]
 80286e2:	681b      	ldr	r3, [r3, #0]
 80286e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80286e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80286ea:	687b      	ldr	r3, [r7, #4]
 80286ec:	685a      	ldr	r2, [r3, #4]
 80286ee:	687b      	ldr	r3, [r7, #4]
 80286f0:	689b      	ldr	r3, [r3, #8]
 80286f2:	431a      	orrs	r2, r3
 80286f4:	687b      	ldr	r3, [r7, #4]
 80286f6:	68db      	ldr	r3, [r3, #12]
 80286f8:	431a      	orrs	r2, r3
 80286fa:	687b      	ldr	r3, [r7, #4]
 80286fc:	691b      	ldr	r3, [r3, #16]
 80286fe:	431a      	orrs	r2, r3
 8028700:	687b      	ldr	r3, [r7, #4]
 8028702:	695b      	ldr	r3, [r3, #20]
 8028704:	431a      	orrs	r2, r3
 8028706:	687b      	ldr	r3, [r7, #4]
 8028708:	699b      	ldr	r3, [r3, #24]
 802870a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802870e:	431a      	orrs	r2, r3
 8028710:	687b      	ldr	r3, [r7, #4]
 8028712:	69db      	ldr	r3, [r3, #28]
 8028714:	431a      	orrs	r2, r3
 8028716:	687b      	ldr	r3, [r7, #4]
 8028718:	6a1b      	ldr	r3, [r3, #32]
 802871a:	ea42 0103 	orr.w	r1, r2, r3
 802871e:	687b      	ldr	r3, [r7, #4]
 8028720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8028722:	687b      	ldr	r3, [r7, #4]
 8028724:	681b      	ldr	r3, [r3, #0]
 8028726:	430a      	orrs	r2, r1
 8028728:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 802872a:	687b      	ldr	r3, [r7, #4]
 802872c:	699b      	ldr	r3, [r3, #24]
 802872e:	0c1b      	lsrs	r3, r3, #16
 8028730:	f003 0104 	and.w	r1, r3, #4
 8028734:	687b      	ldr	r3, [r7, #4]
 8028736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028738:	687b      	ldr	r3, [r7, #4]
 802873a:	681b      	ldr	r3, [r3, #0]
 802873c:	430a      	orrs	r2, r1
 802873e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8028740:	687b      	ldr	r3, [r7, #4]
 8028742:	681b      	ldr	r3, [r3, #0]
 8028744:	69da      	ldr	r2, [r3, #28]
 8028746:	687b      	ldr	r3, [r7, #4]
 8028748:	681b      	ldr	r3, [r3, #0]
 802874a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802874e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8028750:	687b      	ldr	r3, [r7, #4]
 8028752:	2200      	movs	r2, #0
 8028754:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8028756:	687b      	ldr	r3, [r7, #4]
 8028758:	2201      	movs	r2, #1
 802875a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 802875e:	2300      	movs	r3, #0
}
 8028760:	4618      	mov	r0, r3
 8028762:	3708      	adds	r7, #8
 8028764:	46bd      	mov	sp, r7
 8028766:	bd80      	pop	{r7, pc}

08028768 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028768:	b580      	push	{r7, lr}
 802876a:	b088      	sub	sp, #32
 802876c:	af00      	add	r7, sp, #0
 802876e:	60f8      	str	r0, [r7, #12]
 8028770:	60b9      	str	r1, [r7, #8]
 8028772:	603b      	str	r3, [r7, #0]
 8028774:	4613      	mov	r3, r2
 8028776:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028778:	2300      	movs	r3, #0
 802877a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802877c:	68fb      	ldr	r3, [r7, #12]
 802877e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028782:	2b01      	cmp	r3, #1
 8028784:	d101      	bne.n	802878a <HAL_SPI_Transmit+0x22>
 8028786:	2302      	movs	r3, #2
 8028788:	e11e      	b.n	80289c8 <HAL_SPI_Transmit+0x260>
 802878a:	68fb      	ldr	r3, [r7, #12]
 802878c:	2201      	movs	r2, #1
 802878e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028792:	f7fd fce1 	bl	8026158 <HAL_GetTick>
 8028796:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8028798:	88fb      	ldrh	r3, [r7, #6]
 802879a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 802879c:	68fb      	ldr	r3, [r7, #12]
 802879e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80287a2:	b2db      	uxtb	r3, r3
 80287a4:	2b01      	cmp	r3, #1
 80287a6:	d002      	beq.n	80287ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80287a8:	2302      	movs	r3, #2
 80287aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80287ac:	e103      	b.n	80289b6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80287ae:	68bb      	ldr	r3, [r7, #8]
 80287b0:	2b00      	cmp	r3, #0
 80287b2:	d002      	beq.n	80287ba <HAL_SPI_Transmit+0x52>
 80287b4:	88fb      	ldrh	r3, [r7, #6]
 80287b6:	2b00      	cmp	r3, #0
 80287b8:	d102      	bne.n	80287c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80287ba:	2301      	movs	r3, #1
 80287bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80287be:	e0fa      	b.n	80289b6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80287c0:	68fb      	ldr	r3, [r7, #12]
 80287c2:	2203      	movs	r2, #3
 80287c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80287c8:	68fb      	ldr	r3, [r7, #12]
 80287ca:	2200      	movs	r2, #0
 80287cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80287ce:	68fb      	ldr	r3, [r7, #12]
 80287d0:	68ba      	ldr	r2, [r7, #8]
 80287d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80287d4:	68fb      	ldr	r3, [r7, #12]
 80287d6:	88fa      	ldrh	r2, [r7, #6]
 80287d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80287da:	68fb      	ldr	r3, [r7, #12]
 80287dc:	88fa      	ldrh	r2, [r7, #6]
 80287de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80287e0:	68fb      	ldr	r3, [r7, #12]
 80287e2:	2200      	movs	r2, #0
 80287e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80287e6:	68fb      	ldr	r3, [r7, #12]
 80287e8:	2200      	movs	r2, #0
 80287ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80287ec:	68fb      	ldr	r3, [r7, #12]
 80287ee:	2200      	movs	r2, #0
 80287f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80287f2:	68fb      	ldr	r3, [r7, #12]
 80287f4:	2200      	movs	r2, #0
 80287f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80287f8:	68fb      	ldr	r3, [r7, #12]
 80287fa:	2200      	movs	r2, #0
 80287fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80287fe:	68fb      	ldr	r3, [r7, #12]
 8028800:	689b      	ldr	r3, [r3, #8]
 8028802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028806:	d107      	bne.n	8028818 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8028808:	68fb      	ldr	r3, [r7, #12]
 802880a:	681b      	ldr	r3, [r3, #0]
 802880c:	681a      	ldr	r2, [r3, #0]
 802880e:	68fb      	ldr	r3, [r7, #12]
 8028810:	681b      	ldr	r3, [r3, #0]
 8028812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8028816:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028818:	68fb      	ldr	r3, [r7, #12]
 802881a:	681b      	ldr	r3, [r3, #0]
 802881c:	681b      	ldr	r3, [r3, #0]
 802881e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028822:	2b40      	cmp	r3, #64	; 0x40
 8028824:	d007      	beq.n	8028836 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028826:	68fb      	ldr	r3, [r7, #12]
 8028828:	681b      	ldr	r3, [r3, #0]
 802882a:	681a      	ldr	r2, [r3, #0]
 802882c:	68fb      	ldr	r3, [r7, #12]
 802882e:	681b      	ldr	r3, [r3, #0]
 8028830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028834:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028836:	68fb      	ldr	r3, [r7, #12]
 8028838:	68db      	ldr	r3, [r3, #12]
 802883a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802883e:	d14b      	bne.n	80288d8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028840:	68fb      	ldr	r3, [r7, #12]
 8028842:	685b      	ldr	r3, [r3, #4]
 8028844:	2b00      	cmp	r3, #0
 8028846:	d002      	beq.n	802884e <HAL_SPI_Transmit+0xe6>
 8028848:	8afb      	ldrh	r3, [r7, #22]
 802884a:	2b01      	cmp	r3, #1
 802884c:	d13e      	bne.n	80288cc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802884e:	68fb      	ldr	r3, [r7, #12]
 8028850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028852:	881a      	ldrh	r2, [r3, #0]
 8028854:	68fb      	ldr	r3, [r7, #12]
 8028856:	681b      	ldr	r3, [r3, #0]
 8028858:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802885a:	68fb      	ldr	r3, [r7, #12]
 802885c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802885e:	1c9a      	adds	r2, r3, #2
 8028860:	68fb      	ldr	r3, [r7, #12]
 8028862:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028864:	68fb      	ldr	r3, [r7, #12]
 8028866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028868:	b29b      	uxth	r3, r3
 802886a:	3b01      	subs	r3, #1
 802886c:	b29a      	uxth	r2, r3
 802886e:	68fb      	ldr	r3, [r7, #12]
 8028870:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8028872:	e02b      	b.n	80288cc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028874:	68fb      	ldr	r3, [r7, #12]
 8028876:	681b      	ldr	r3, [r3, #0]
 8028878:	689b      	ldr	r3, [r3, #8]
 802887a:	f003 0302 	and.w	r3, r3, #2
 802887e:	2b02      	cmp	r3, #2
 8028880:	d112      	bne.n	80288a8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028882:	68fb      	ldr	r3, [r7, #12]
 8028884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028886:	881a      	ldrh	r2, [r3, #0]
 8028888:	68fb      	ldr	r3, [r7, #12]
 802888a:	681b      	ldr	r3, [r3, #0]
 802888c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802888e:	68fb      	ldr	r3, [r7, #12]
 8028890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028892:	1c9a      	adds	r2, r3, #2
 8028894:	68fb      	ldr	r3, [r7, #12]
 8028896:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028898:	68fb      	ldr	r3, [r7, #12]
 802889a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802889c:	b29b      	uxth	r3, r3
 802889e:	3b01      	subs	r3, #1
 80288a0:	b29a      	uxth	r2, r3
 80288a2:	68fb      	ldr	r3, [r7, #12]
 80288a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80288a6:	e011      	b.n	80288cc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80288a8:	f7fd fc56 	bl	8026158 <HAL_GetTick>
 80288ac:	4602      	mov	r2, r0
 80288ae:	69bb      	ldr	r3, [r7, #24]
 80288b0:	1ad3      	subs	r3, r2, r3
 80288b2:	683a      	ldr	r2, [r7, #0]
 80288b4:	429a      	cmp	r2, r3
 80288b6:	d803      	bhi.n	80288c0 <HAL_SPI_Transmit+0x158>
 80288b8:	683b      	ldr	r3, [r7, #0]
 80288ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80288be:	d102      	bne.n	80288c6 <HAL_SPI_Transmit+0x15e>
 80288c0:	683b      	ldr	r3, [r7, #0]
 80288c2:	2b00      	cmp	r3, #0
 80288c4:	d102      	bne.n	80288cc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80288c6:	2303      	movs	r3, #3
 80288c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80288ca:	e074      	b.n	80289b6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80288cc:	68fb      	ldr	r3, [r7, #12]
 80288ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80288d0:	b29b      	uxth	r3, r3
 80288d2:	2b00      	cmp	r3, #0
 80288d4:	d1ce      	bne.n	8028874 <HAL_SPI_Transmit+0x10c>
 80288d6:	e04c      	b.n	8028972 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80288d8:	68fb      	ldr	r3, [r7, #12]
 80288da:	685b      	ldr	r3, [r3, #4]
 80288dc:	2b00      	cmp	r3, #0
 80288de:	d002      	beq.n	80288e6 <HAL_SPI_Transmit+0x17e>
 80288e0:	8afb      	ldrh	r3, [r7, #22]
 80288e2:	2b01      	cmp	r3, #1
 80288e4:	d140      	bne.n	8028968 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80288e6:	68fb      	ldr	r3, [r7, #12]
 80288e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80288ea:	68fb      	ldr	r3, [r7, #12]
 80288ec:	681b      	ldr	r3, [r3, #0]
 80288ee:	330c      	adds	r3, #12
 80288f0:	7812      	ldrb	r2, [r2, #0]
 80288f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80288f4:	68fb      	ldr	r3, [r7, #12]
 80288f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288f8:	1c5a      	adds	r2, r3, #1
 80288fa:	68fb      	ldr	r3, [r7, #12]
 80288fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80288fe:	68fb      	ldr	r3, [r7, #12]
 8028900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028902:	b29b      	uxth	r3, r3
 8028904:	3b01      	subs	r3, #1
 8028906:	b29a      	uxth	r2, r3
 8028908:	68fb      	ldr	r3, [r7, #12]
 802890a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 802890c:	e02c      	b.n	8028968 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 802890e:	68fb      	ldr	r3, [r7, #12]
 8028910:	681b      	ldr	r3, [r3, #0]
 8028912:	689b      	ldr	r3, [r3, #8]
 8028914:	f003 0302 	and.w	r3, r3, #2
 8028918:	2b02      	cmp	r3, #2
 802891a:	d113      	bne.n	8028944 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802891c:	68fb      	ldr	r3, [r7, #12]
 802891e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028920:	68fb      	ldr	r3, [r7, #12]
 8028922:	681b      	ldr	r3, [r3, #0]
 8028924:	330c      	adds	r3, #12
 8028926:	7812      	ldrb	r2, [r2, #0]
 8028928:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 802892a:	68fb      	ldr	r3, [r7, #12]
 802892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802892e:	1c5a      	adds	r2, r3, #1
 8028930:	68fb      	ldr	r3, [r7, #12]
 8028932:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028934:	68fb      	ldr	r3, [r7, #12]
 8028936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028938:	b29b      	uxth	r3, r3
 802893a:	3b01      	subs	r3, #1
 802893c:	b29a      	uxth	r2, r3
 802893e:	68fb      	ldr	r3, [r7, #12]
 8028940:	86da      	strh	r2, [r3, #54]	; 0x36
 8028942:	e011      	b.n	8028968 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028944:	f7fd fc08 	bl	8026158 <HAL_GetTick>
 8028948:	4602      	mov	r2, r0
 802894a:	69bb      	ldr	r3, [r7, #24]
 802894c:	1ad3      	subs	r3, r2, r3
 802894e:	683a      	ldr	r2, [r7, #0]
 8028950:	429a      	cmp	r2, r3
 8028952:	d803      	bhi.n	802895c <HAL_SPI_Transmit+0x1f4>
 8028954:	683b      	ldr	r3, [r7, #0]
 8028956:	f1b3 3fff 	cmp.w	r3, #4294967295
 802895a:	d102      	bne.n	8028962 <HAL_SPI_Transmit+0x1fa>
 802895c:	683b      	ldr	r3, [r7, #0]
 802895e:	2b00      	cmp	r3, #0
 8028960:	d102      	bne.n	8028968 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8028962:	2303      	movs	r3, #3
 8028964:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028966:	e026      	b.n	80289b6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8028968:	68fb      	ldr	r3, [r7, #12]
 802896a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802896c:	b29b      	uxth	r3, r3
 802896e:	2b00      	cmp	r3, #0
 8028970:	d1cd      	bne.n	802890e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028972:	69ba      	ldr	r2, [r7, #24]
 8028974:	6839      	ldr	r1, [r7, #0]
 8028976:	68f8      	ldr	r0, [r7, #12]
 8028978:	f000 fba4 	bl	80290c4 <SPI_EndRxTxTransaction>
 802897c:	4603      	mov	r3, r0
 802897e:	2b00      	cmp	r3, #0
 8028980:	d002      	beq.n	8028988 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028982:	68fb      	ldr	r3, [r7, #12]
 8028984:	2220      	movs	r2, #32
 8028986:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028988:	68fb      	ldr	r3, [r7, #12]
 802898a:	689b      	ldr	r3, [r3, #8]
 802898c:	2b00      	cmp	r3, #0
 802898e:	d10a      	bne.n	80289a6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028990:	2300      	movs	r3, #0
 8028992:	613b      	str	r3, [r7, #16]
 8028994:	68fb      	ldr	r3, [r7, #12]
 8028996:	681b      	ldr	r3, [r3, #0]
 8028998:	68db      	ldr	r3, [r3, #12]
 802899a:	613b      	str	r3, [r7, #16]
 802899c:	68fb      	ldr	r3, [r7, #12]
 802899e:	681b      	ldr	r3, [r3, #0]
 80289a0:	689b      	ldr	r3, [r3, #8]
 80289a2:	613b      	str	r3, [r7, #16]
 80289a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80289a6:	68fb      	ldr	r3, [r7, #12]
 80289a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80289aa:	2b00      	cmp	r3, #0
 80289ac:	d002      	beq.n	80289b4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80289ae:	2301      	movs	r3, #1
 80289b0:	77fb      	strb	r3, [r7, #31]
 80289b2:	e000      	b.n	80289b6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80289b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80289b6:	68fb      	ldr	r3, [r7, #12]
 80289b8:	2201      	movs	r2, #1
 80289ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80289be:	68fb      	ldr	r3, [r7, #12]
 80289c0:	2200      	movs	r2, #0
 80289c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80289c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80289c8:	4618      	mov	r0, r3
 80289ca:	3720      	adds	r7, #32
 80289cc:	46bd      	mov	sp, r7
 80289ce:	bd80      	pop	{r7, pc}

080289d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80289d0:	b580      	push	{r7, lr}
 80289d2:	b088      	sub	sp, #32
 80289d4:	af02      	add	r7, sp, #8
 80289d6:	60f8      	str	r0, [r7, #12]
 80289d8:	60b9      	str	r1, [r7, #8]
 80289da:	603b      	str	r3, [r7, #0]
 80289dc:	4613      	mov	r3, r2
 80289de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80289e0:	2300      	movs	r3, #0
 80289e2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80289e4:	68fb      	ldr	r3, [r7, #12]
 80289e6:	685b      	ldr	r3, [r3, #4]
 80289e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80289ec:	d112      	bne.n	8028a14 <HAL_SPI_Receive+0x44>
 80289ee:	68fb      	ldr	r3, [r7, #12]
 80289f0:	689b      	ldr	r3, [r3, #8]
 80289f2:	2b00      	cmp	r3, #0
 80289f4:	d10e      	bne.n	8028a14 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80289f6:	68fb      	ldr	r3, [r7, #12]
 80289f8:	2204      	movs	r2, #4
 80289fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80289fe:	88fa      	ldrh	r2, [r7, #6]
 8028a00:	683b      	ldr	r3, [r7, #0]
 8028a02:	9300      	str	r3, [sp, #0]
 8028a04:	4613      	mov	r3, r2
 8028a06:	68ba      	ldr	r2, [r7, #8]
 8028a08:	68b9      	ldr	r1, [r7, #8]
 8028a0a:	68f8      	ldr	r0, [r7, #12]
 8028a0c:	f000 f8e9 	bl	8028be2 <HAL_SPI_TransmitReceive>
 8028a10:	4603      	mov	r3, r0
 8028a12:	e0e2      	b.n	8028bda <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028a14:	68fb      	ldr	r3, [r7, #12]
 8028a16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028a1a:	2b01      	cmp	r3, #1
 8028a1c:	d101      	bne.n	8028a22 <HAL_SPI_Receive+0x52>
 8028a1e:	2302      	movs	r3, #2
 8028a20:	e0db      	b.n	8028bda <HAL_SPI_Receive+0x20a>
 8028a22:	68fb      	ldr	r3, [r7, #12]
 8028a24:	2201      	movs	r2, #1
 8028a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028a2a:	f7fd fb95 	bl	8026158 <HAL_GetTick>
 8028a2e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028a30:	68fb      	ldr	r3, [r7, #12]
 8028a32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028a36:	b2db      	uxtb	r3, r3
 8028a38:	2b01      	cmp	r3, #1
 8028a3a:	d002      	beq.n	8028a42 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8028a3c:	2302      	movs	r3, #2
 8028a3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028a40:	e0c2      	b.n	8028bc8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8028a42:	68bb      	ldr	r3, [r7, #8]
 8028a44:	2b00      	cmp	r3, #0
 8028a46:	d002      	beq.n	8028a4e <HAL_SPI_Receive+0x7e>
 8028a48:	88fb      	ldrh	r3, [r7, #6]
 8028a4a:	2b00      	cmp	r3, #0
 8028a4c:	d102      	bne.n	8028a54 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8028a4e:	2301      	movs	r3, #1
 8028a50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028a52:	e0b9      	b.n	8028bc8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8028a54:	68fb      	ldr	r3, [r7, #12]
 8028a56:	2204      	movs	r2, #4
 8028a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028a5c:	68fb      	ldr	r3, [r7, #12]
 8028a5e:	2200      	movs	r2, #0
 8028a60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8028a62:	68fb      	ldr	r3, [r7, #12]
 8028a64:	68ba      	ldr	r2, [r7, #8]
 8028a66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8028a68:	68fb      	ldr	r3, [r7, #12]
 8028a6a:	88fa      	ldrh	r2, [r7, #6]
 8028a6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8028a6e:	68fb      	ldr	r3, [r7, #12]
 8028a70:	88fa      	ldrh	r2, [r7, #6]
 8028a72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8028a74:	68fb      	ldr	r3, [r7, #12]
 8028a76:	2200      	movs	r2, #0
 8028a78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8028a7a:	68fb      	ldr	r3, [r7, #12]
 8028a7c:	2200      	movs	r2, #0
 8028a7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8028a80:	68fb      	ldr	r3, [r7, #12]
 8028a82:	2200      	movs	r2, #0
 8028a84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8028a86:	68fb      	ldr	r3, [r7, #12]
 8028a88:	2200      	movs	r2, #0
 8028a8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028a8c:	68fb      	ldr	r3, [r7, #12]
 8028a8e:	2200      	movs	r2, #0
 8028a90:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028a92:	68fb      	ldr	r3, [r7, #12]
 8028a94:	689b      	ldr	r3, [r3, #8]
 8028a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028a9a:	d107      	bne.n	8028aac <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8028a9c:	68fb      	ldr	r3, [r7, #12]
 8028a9e:	681b      	ldr	r3, [r3, #0]
 8028aa0:	681a      	ldr	r2, [r3, #0]
 8028aa2:	68fb      	ldr	r3, [r7, #12]
 8028aa4:	681b      	ldr	r3, [r3, #0]
 8028aa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8028aaa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028aac:	68fb      	ldr	r3, [r7, #12]
 8028aae:	681b      	ldr	r3, [r3, #0]
 8028ab0:	681b      	ldr	r3, [r3, #0]
 8028ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028ab6:	2b40      	cmp	r3, #64	; 0x40
 8028ab8:	d007      	beq.n	8028aca <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028aba:	68fb      	ldr	r3, [r7, #12]
 8028abc:	681b      	ldr	r3, [r3, #0]
 8028abe:	681a      	ldr	r2, [r3, #0]
 8028ac0:	68fb      	ldr	r3, [r7, #12]
 8028ac2:	681b      	ldr	r3, [r3, #0]
 8028ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028ac8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8028aca:	68fb      	ldr	r3, [r7, #12]
 8028acc:	68db      	ldr	r3, [r3, #12]
 8028ace:	2b00      	cmp	r3, #0
 8028ad0:	d162      	bne.n	8028b98 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8028ad2:	e02e      	b.n	8028b32 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028ad4:	68fb      	ldr	r3, [r7, #12]
 8028ad6:	681b      	ldr	r3, [r3, #0]
 8028ad8:	689b      	ldr	r3, [r3, #8]
 8028ada:	f003 0301 	and.w	r3, r3, #1
 8028ade:	2b01      	cmp	r3, #1
 8028ae0:	d115      	bne.n	8028b0e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8028ae2:	68fb      	ldr	r3, [r7, #12]
 8028ae4:	681b      	ldr	r3, [r3, #0]
 8028ae6:	f103 020c 	add.w	r2, r3, #12
 8028aea:	68fb      	ldr	r3, [r7, #12]
 8028aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028aee:	7812      	ldrb	r2, [r2, #0]
 8028af0:	b2d2      	uxtb	r2, r2
 8028af2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8028af4:	68fb      	ldr	r3, [r7, #12]
 8028af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028af8:	1c5a      	adds	r2, r3, #1
 8028afa:	68fb      	ldr	r3, [r7, #12]
 8028afc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028afe:	68fb      	ldr	r3, [r7, #12]
 8028b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028b02:	b29b      	uxth	r3, r3
 8028b04:	3b01      	subs	r3, #1
 8028b06:	b29a      	uxth	r2, r3
 8028b08:	68fb      	ldr	r3, [r7, #12]
 8028b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028b0c:	e011      	b.n	8028b32 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028b0e:	f7fd fb23 	bl	8026158 <HAL_GetTick>
 8028b12:	4602      	mov	r2, r0
 8028b14:	693b      	ldr	r3, [r7, #16]
 8028b16:	1ad3      	subs	r3, r2, r3
 8028b18:	683a      	ldr	r2, [r7, #0]
 8028b1a:	429a      	cmp	r2, r3
 8028b1c:	d803      	bhi.n	8028b26 <HAL_SPI_Receive+0x156>
 8028b1e:	683b      	ldr	r3, [r7, #0]
 8028b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028b24:	d102      	bne.n	8028b2c <HAL_SPI_Receive+0x15c>
 8028b26:	683b      	ldr	r3, [r7, #0]
 8028b28:	2b00      	cmp	r3, #0
 8028b2a:	d102      	bne.n	8028b32 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8028b2c:	2303      	movs	r3, #3
 8028b2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028b30:	e04a      	b.n	8028bc8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028b32:	68fb      	ldr	r3, [r7, #12]
 8028b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028b36:	b29b      	uxth	r3, r3
 8028b38:	2b00      	cmp	r3, #0
 8028b3a:	d1cb      	bne.n	8028ad4 <HAL_SPI_Receive+0x104>
 8028b3c:	e031      	b.n	8028ba2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028b3e:	68fb      	ldr	r3, [r7, #12]
 8028b40:	681b      	ldr	r3, [r3, #0]
 8028b42:	689b      	ldr	r3, [r3, #8]
 8028b44:	f003 0301 	and.w	r3, r3, #1
 8028b48:	2b01      	cmp	r3, #1
 8028b4a:	d113      	bne.n	8028b74 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028b4c:	68fb      	ldr	r3, [r7, #12]
 8028b4e:	681b      	ldr	r3, [r3, #0]
 8028b50:	68da      	ldr	r2, [r3, #12]
 8028b52:	68fb      	ldr	r3, [r7, #12]
 8028b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028b56:	b292      	uxth	r2, r2
 8028b58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028b5a:	68fb      	ldr	r3, [r7, #12]
 8028b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028b5e:	1c9a      	adds	r2, r3, #2
 8028b60:	68fb      	ldr	r3, [r7, #12]
 8028b62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028b64:	68fb      	ldr	r3, [r7, #12]
 8028b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028b68:	b29b      	uxth	r3, r3
 8028b6a:	3b01      	subs	r3, #1
 8028b6c:	b29a      	uxth	r2, r3
 8028b6e:	68fb      	ldr	r3, [r7, #12]
 8028b70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028b72:	e011      	b.n	8028b98 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028b74:	f7fd faf0 	bl	8026158 <HAL_GetTick>
 8028b78:	4602      	mov	r2, r0
 8028b7a:	693b      	ldr	r3, [r7, #16]
 8028b7c:	1ad3      	subs	r3, r2, r3
 8028b7e:	683a      	ldr	r2, [r7, #0]
 8028b80:	429a      	cmp	r2, r3
 8028b82:	d803      	bhi.n	8028b8c <HAL_SPI_Receive+0x1bc>
 8028b84:	683b      	ldr	r3, [r7, #0]
 8028b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028b8a:	d102      	bne.n	8028b92 <HAL_SPI_Receive+0x1c2>
 8028b8c:	683b      	ldr	r3, [r7, #0]
 8028b8e:	2b00      	cmp	r3, #0
 8028b90:	d102      	bne.n	8028b98 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8028b92:	2303      	movs	r3, #3
 8028b94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028b96:	e017      	b.n	8028bc8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028b98:	68fb      	ldr	r3, [r7, #12]
 8028b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028b9c:	b29b      	uxth	r3, r3
 8028b9e:	2b00      	cmp	r3, #0
 8028ba0:	d1cd      	bne.n	8028b3e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028ba2:	693a      	ldr	r2, [r7, #16]
 8028ba4:	6839      	ldr	r1, [r7, #0]
 8028ba6:	68f8      	ldr	r0, [r7, #12]
 8028ba8:	f000 fa27 	bl	8028ffa <SPI_EndRxTransaction>
 8028bac:	4603      	mov	r3, r0
 8028bae:	2b00      	cmp	r3, #0
 8028bb0:	d002      	beq.n	8028bb8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028bb2:	68fb      	ldr	r3, [r7, #12]
 8028bb4:	2220      	movs	r2, #32
 8028bb6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028bb8:	68fb      	ldr	r3, [r7, #12]
 8028bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028bbc:	2b00      	cmp	r3, #0
 8028bbe:	d002      	beq.n	8028bc6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8028bc0:	2301      	movs	r3, #1
 8028bc2:	75fb      	strb	r3, [r7, #23]
 8028bc4:	e000      	b.n	8028bc8 <HAL_SPI_Receive+0x1f8>
  }

error :
 8028bc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028bc8:	68fb      	ldr	r3, [r7, #12]
 8028bca:	2201      	movs	r2, #1
 8028bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028bd0:	68fb      	ldr	r3, [r7, #12]
 8028bd2:	2200      	movs	r2, #0
 8028bd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8028bda:	4618      	mov	r0, r3
 8028bdc:	3718      	adds	r7, #24
 8028bde:	46bd      	mov	sp, r7
 8028be0:	bd80      	pop	{r7, pc}

08028be2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8028be2:	b580      	push	{r7, lr}
 8028be4:	b08c      	sub	sp, #48	; 0x30
 8028be6:	af00      	add	r7, sp, #0
 8028be8:	60f8      	str	r0, [r7, #12]
 8028bea:	60b9      	str	r1, [r7, #8]
 8028bec:	607a      	str	r2, [r7, #4]
 8028bee:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8028bf0:	2301      	movs	r3, #1
 8028bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8028bf4:	2300      	movs	r3, #0
 8028bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028bfa:	68fb      	ldr	r3, [r7, #12]
 8028bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028c00:	2b01      	cmp	r3, #1
 8028c02:	d101      	bne.n	8028c08 <HAL_SPI_TransmitReceive+0x26>
 8028c04:	2302      	movs	r3, #2
 8028c06:	e18a      	b.n	8028f1e <HAL_SPI_TransmitReceive+0x33c>
 8028c08:	68fb      	ldr	r3, [r7, #12]
 8028c0a:	2201      	movs	r2, #1
 8028c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028c10:	f7fd faa2 	bl	8026158 <HAL_GetTick>
 8028c14:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8028c16:	68fb      	ldr	r3, [r7, #12]
 8028c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8028c20:	68fb      	ldr	r3, [r7, #12]
 8028c22:	685b      	ldr	r3, [r3, #4]
 8028c24:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8028c26:	887b      	ldrh	r3, [r7, #2]
 8028c28:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8028c2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028c2e:	2b01      	cmp	r3, #1
 8028c30:	d00f      	beq.n	8028c52 <HAL_SPI_TransmitReceive+0x70>
 8028c32:	69fb      	ldr	r3, [r7, #28]
 8028c34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028c38:	d107      	bne.n	8028c4a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8028c3a:	68fb      	ldr	r3, [r7, #12]
 8028c3c:	689b      	ldr	r3, [r3, #8]
 8028c3e:	2b00      	cmp	r3, #0
 8028c40:	d103      	bne.n	8028c4a <HAL_SPI_TransmitReceive+0x68>
 8028c42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028c46:	2b04      	cmp	r3, #4
 8028c48:	d003      	beq.n	8028c52 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8028c4a:	2302      	movs	r3, #2
 8028c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028c50:	e15b      	b.n	8028f0a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8028c52:	68bb      	ldr	r3, [r7, #8]
 8028c54:	2b00      	cmp	r3, #0
 8028c56:	d005      	beq.n	8028c64 <HAL_SPI_TransmitReceive+0x82>
 8028c58:	687b      	ldr	r3, [r7, #4]
 8028c5a:	2b00      	cmp	r3, #0
 8028c5c:	d002      	beq.n	8028c64 <HAL_SPI_TransmitReceive+0x82>
 8028c5e:	887b      	ldrh	r3, [r7, #2]
 8028c60:	2b00      	cmp	r3, #0
 8028c62:	d103      	bne.n	8028c6c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8028c64:	2301      	movs	r3, #1
 8028c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028c6a:	e14e      	b.n	8028f0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8028c6c:	68fb      	ldr	r3, [r7, #12]
 8028c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028c72:	b2db      	uxtb	r3, r3
 8028c74:	2b04      	cmp	r3, #4
 8028c76:	d003      	beq.n	8028c80 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8028c78:	68fb      	ldr	r3, [r7, #12]
 8028c7a:	2205      	movs	r2, #5
 8028c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028c80:	68fb      	ldr	r3, [r7, #12]
 8028c82:	2200      	movs	r2, #0
 8028c84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8028c86:	68fb      	ldr	r3, [r7, #12]
 8028c88:	687a      	ldr	r2, [r7, #4]
 8028c8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8028c8c:	68fb      	ldr	r3, [r7, #12]
 8028c8e:	887a      	ldrh	r2, [r7, #2]
 8028c90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8028c92:	68fb      	ldr	r3, [r7, #12]
 8028c94:	887a      	ldrh	r2, [r7, #2]
 8028c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8028c98:	68fb      	ldr	r3, [r7, #12]
 8028c9a:	68ba      	ldr	r2, [r7, #8]
 8028c9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8028c9e:	68fb      	ldr	r3, [r7, #12]
 8028ca0:	887a      	ldrh	r2, [r7, #2]
 8028ca2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8028ca4:	68fb      	ldr	r3, [r7, #12]
 8028ca6:	887a      	ldrh	r2, [r7, #2]
 8028ca8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8028caa:	68fb      	ldr	r3, [r7, #12]
 8028cac:	2200      	movs	r2, #0
 8028cae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028cb0:	68fb      	ldr	r3, [r7, #12]
 8028cb2:	2200      	movs	r2, #0
 8028cb4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028cb6:	68fb      	ldr	r3, [r7, #12]
 8028cb8:	681b      	ldr	r3, [r3, #0]
 8028cba:	681b      	ldr	r3, [r3, #0]
 8028cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028cc0:	2b40      	cmp	r3, #64	; 0x40
 8028cc2:	d007      	beq.n	8028cd4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028cc4:	68fb      	ldr	r3, [r7, #12]
 8028cc6:	681b      	ldr	r3, [r3, #0]
 8028cc8:	681a      	ldr	r2, [r3, #0]
 8028cca:	68fb      	ldr	r3, [r7, #12]
 8028ccc:	681b      	ldr	r3, [r3, #0]
 8028cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028cd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028cd4:	68fb      	ldr	r3, [r7, #12]
 8028cd6:	68db      	ldr	r3, [r3, #12]
 8028cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028cdc:	d178      	bne.n	8028dd0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028cde:	68fb      	ldr	r3, [r7, #12]
 8028ce0:	685b      	ldr	r3, [r3, #4]
 8028ce2:	2b00      	cmp	r3, #0
 8028ce4:	d002      	beq.n	8028cec <HAL_SPI_TransmitReceive+0x10a>
 8028ce6:	8b7b      	ldrh	r3, [r7, #26]
 8028ce8:	2b01      	cmp	r3, #1
 8028cea:	d166      	bne.n	8028dba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028cec:	68fb      	ldr	r3, [r7, #12]
 8028cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028cf0:	881a      	ldrh	r2, [r3, #0]
 8028cf2:	68fb      	ldr	r3, [r7, #12]
 8028cf4:	681b      	ldr	r3, [r3, #0]
 8028cf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8028cf8:	68fb      	ldr	r3, [r7, #12]
 8028cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028cfc:	1c9a      	adds	r2, r3, #2
 8028cfe:	68fb      	ldr	r3, [r7, #12]
 8028d00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028d02:	68fb      	ldr	r3, [r7, #12]
 8028d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028d06:	b29b      	uxth	r3, r3
 8028d08:	3b01      	subs	r3, #1
 8028d0a:	b29a      	uxth	r2, r3
 8028d0c:	68fb      	ldr	r3, [r7, #12]
 8028d0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028d10:	e053      	b.n	8028dba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028d12:	68fb      	ldr	r3, [r7, #12]
 8028d14:	681b      	ldr	r3, [r3, #0]
 8028d16:	689b      	ldr	r3, [r3, #8]
 8028d18:	f003 0302 	and.w	r3, r3, #2
 8028d1c:	2b02      	cmp	r3, #2
 8028d1e:	d11b      	bne.n	8028d58 <HAL_SPI_TransmitReceive+0x176>
 8028d20:	68fb      	ldr	r3, [r7, #12]
 8028d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028d24:	b29b      	uxth	r3, r3
 8028d26:	2b00      	cmp	r3, #0
 8028d28:	d016      	beq.n	8028d58 <HAL_SPI_TransmitReceive+0x176>
 8028d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028d2c:	2b01      	cmp	r3, #1
 8028d2e:	d113      	bne.n	8028d58 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028d30:	68fb      	ldr	r3, [r7, #12]
 8028d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028d34:	881a      	ldrh	r2, [r3, #0]
 8028d36:	68fb      	ldr	r3, [r7, #12]
 8028d38:	681b      	ldr	r3, [r3, #0]
 8028d3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028d3c:	68fb      	ldr	r3, [r7, #12]
 8028d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028d40:	1c9a      	adds	r2, r3, #2
 8028d42:	68fb      	ldr	r3, [r7, #12]
 8028d44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028d46:	68fb      	ldr	r3, [r7, #12]
 8028d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028d4a:	b29b      	uxth	r3, r3
 8028d4c:	3b01      	subs	r3, #1
 8028d4e:	b29a      	uxth	r2, r3
 8028d50:	68fb      	ldr	r3, [r7, #12]
 8028d52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028d54:	2300      	movs	r3, #0
 8028d56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028d58:	68fb      	ldr	r3, [r7, #12]
 8028d5a:	681b      	ldr	r3, [r3, #0]
 8028d5c:	689b      	ldr	r3, [r3, #8]
 8028d5e:	f003 0301 	and.w	r3, r3, #1
 8028d62:	2b01      	cmp	r3, #1
 8028d64:	d119      	bne.n	8028d9a <HAL_SPI_TransmitReceive+0x1b8>
 8028d66:	68fb      	ldr	r3, [r7, #12]
 8028d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028d6a:	b29b      	uxth	r3, r3
 8028d6c:	2b00      	cmp	r3, #0
 8028d6e:	d014      	beq.n	8028d9a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028d70:	68fb      	ldr	r3, [r7, #12]
 8028d72:	681b      	ldr	r3, [r3, #0]
 8028d74:	68da      	ldr	r2, [r3, #12]
 8028d76:	68fb      	ldr	r3, [r7, #12]
 8028d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028d7a:	b292      	uxth	r2, r2
 8028d7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028d7e:	68fb      	ldr	r3, [r7, #12]
 8028d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028d82:	1c9a      	adds	r2, r3, #2
 8028d84:	68fb      	ldr	r3, [r7, #12]
 8028d86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028d88:	68fb      	ldr	r3, [r7, #12]
 8028d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028d8c:	b29b      	uxth	r3, r3
 8028d8e:	3b01      	subs	r3, #1
 8028d90:	b29a      	uxth	r2, r3
 8028d92:	68fb      	ldr	r3, [r7, #12]
 8028d94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028d96:	2301      	movs	r3, #1
 8028d98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8028d9a:	f7fd f9dd 	bl	8026158 <HAL_GetTick>
 8028d9e:	4602      	mov	r2, r0
 8028da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028da2:	1ad3      	subs	r3, r2, r3
 8028da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028da6:	429a      	cmp	r2, r3
 8028da8:	d807      	bhi.n	8028dba <HAL_SPI_TransmitReceive+0x1d8>
 8028daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028db0:	d003      	beq.n	8028dba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8028db2:	2303      	movs	r3, #3
 8028db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028db8:	e0a7      	b.n	8028f0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028dba:	68fb      	ldr	r3, [r7, #12]
 8028dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028dbe:	b29b      	uxth	r3, r3
 8028dc0:	2b00      	cmp	r3, #0
 8028dc2:	d1a6      	bne.n	8028d12 <HAL_SPI_TransmitReceive+0x130>
 8028dc4:	68fb      	ldr	r3, [r7, #12]
 8028dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028dc8:	b29b      	uxth	r3, r3
 8028dca:	2b00      	cmp	r3, #0
 8028dcc:	d1a1      	bne.n	8028d12 <HAL_SPI_TransmitReceive+0x130>
 8028dce:	e07c      	b.n	8028eca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028dd0:	68fb      	ldr	r3, [r7, #12]
 8028dd2:	685b      	ldr	r3, [r3, #4]
 8028dd4:	2b00      	cmp	r3, #0
 8028dd6:	d002      	beq.n	8028dde <HAL_SPI_TransmitReceive+0x1fc>
 8028dd8:	8b7b      	ldrh	r3, [r7, #26]
 8028dda:	2b01      	cmp	r3, #1
 8028ddc:	d16b      	bne.n	8028eb6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028dde:	68fb      	ldr	r3, [r7, #12]
 8028de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028de2:	68fb      	ldr	r3, [r7, #12]
 8028de4:	681b      	ldr	r3, [r3, #0]
 8028de6:	330c      	adds	r3, #12
 8028de8:	7812      	ldrb	r2, [r2, #0]
 8028dea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028dec:	68fb      	ldr	r3, [r7, #12]
 8028dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028df0:	1c5a      	adds	r2, r3, #1
 8028df2:	68fb      	ldr	r3, [r7, #12]
 8028df4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028df6:	68fb      	ldr	r3, [r7, #12]
 8028df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028dfa:	b29b      	uxth	r3, r3
 8028dfc:	3b01      	subs	r3, #1
 8028dfe:	b29a      	uxth	r2, r3
 8028e00:	68fb      	ldr	r3, [r7, #12]
 8028e02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028e04:	e057      	b.n	8028eb6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028e06:	68fb      	ldr	r3, [r7, #12]
 8028e08:	681b      	ldr	r3, [r3, #0]
 8028e0a:	689b      	ldr	r3, [r3, #8]
 8028e0c:	f003 0302 	and.w	r3, r3, #2
 8028e10:	2b02      	cmp	r3, #2
 8028e12:	d11c      	bne.n	8028e4e <HAL_SPI_TransmitReceive+0x26c>
 8028e14:	68fb      	ldr	r3, [r7, #12]
 8028e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028e18:	b29b      	uxth	r3, r3
 8028e1a:	2b00      	cmp	r3, #0
 8028e1c:	d017      	beq.n	8028e4e <HAL_SPI_TransmitReceive+0x26c>
 8028e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028e20:	2b01      	cmp	r3, #1
 8028e22:	d114      	bne.n	8028e4e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8028e24:	68fb      	ldr	r3, [r7, #12]
 8028e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028e28:	68fb      	ldr	r3, [r7, #12]
 8028e2a:	681b      	ldr	r3, [r3, #0]
 8028e2c:	330c      	adds	r3, #12
 8028e2e:	7812      	ldrb	r2, [r2, #0]
 8028e30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8028e32:	68fb      	ldr	r3, [r7, #12]
 8028e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e36:	1c5a      	adds	r2, r3, #1
 8028e38:	68fb      	ldr	r3, [r7, #12]
 8028e3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028e3c:	68fb      	ldr	r3, [r7, #12]
 8028e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028e40:	b29b      	uxth	r3, r3
 8028e42:	3b01      	subs	r3, #1
 8028e44:	b29a      	uxth	r2, r3
 8028e46:	68fb      	ldr	r3, [r7, #12]
 8028e48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028e4a:	2300      	movs	r3, #0
 8028e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028e4e:	68fb      	ldr	r3, [r7, #12]
 8028e50:	681b      	ldr	r3, [r3, #0]
 8028e52:	689b      	ldr	r3, [r3, #8]
 8028e54:	f003 0301 	and.w	r3, r3, #1
 8028e58:	2b01      	cmp	r3, #1
 8028e5a:	d119      	bne.n	8028e90 <HAL_SPI_TransmitReceive+0x2ae>
 8028e5c:	68fb      	ldr	r3, [r7, #12]
 8028e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028e60:	b29b      	uxth	r3, r3
 8028e62:	2b00      	cmp	r3, #0
 8028e64:	d014      	beq.n	8028e90 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8028e66:	68fb      	ldr	r3, [r7, #12]
 8028e68:	681b      	ldr	r3, [r3, #0]
 8028e6a:	68da      	ldr	r2, [r3, #12]
 8028e6c:	68fb      	ldr	r3, [r7, #12]
 8028e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028e70:	b2d2      	uxtb	r2, r2
 8028e72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8028e74:	68fb      	ldr	r3, [r7, #12]
 8028e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028e78:	1c5a      	adds	r2, r3, #1
 8028e7a:	68fb      	ldr	r3, [r7, #12]
 8028e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028e7e:	68fb      	ldr	r3, [r7, #12]
 8028e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028e82:	b29b      	uxth	r3, r3
 8028e84:	3b01      	subs	r3, #1
 8028e86:	b29a      	uxth	r2, r3
 8028e88:	68fb      	ldr	r3, [r7, #12]
 8028e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028e8c:	2301      	movs	r3, #1
 8028e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8028e90:	f7fd f962 	bl	8026158 <HAL_GetTick>
 8028e94:	4602      	mov	r2, r0
 8028e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028e98:	1ad3      	subs	r3, r2, r3
 8028e9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028e9c:	429a      	cmp	r2, r3
 8028e9e:	d803      	bhi.n	8028ea8 <HAL_SPI_TransmitReceive+0x2c6>
 8028ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028ea6:	d102      	bne.n	8028eae <HAL_SPI_TransmitReceive+0x2cc>
 8028ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028eaa:	2b00      	cmp	r3, #0
 8028eac:	d103      	bne.n	8028eb6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8028eae:	2303      	movs	r3, #3
 8028eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028eb4:	e029      	b.n	8028f0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028eb6:	68fb      	ldr	r3, [r7, #12]
 8028eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028eba:	b29b      	uxth	r3, r3
 8028ebc:	2b00      	cmp	r3, #0
 8028ebe:	d1a2      	bne.n	8028e06 <HAL_SPI_TransmitReceive+0x224>
 8028ec0:	68fb      	ldr	r3, [r7, #12]
 8028ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028ec4:	b29b      	uxth	r3, r3
 8028ec6:	2b00      	cmp	r3, #0
 8028ec8:	d19d      	bne.n	8028e06 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028ecc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8028ece:	68f8      	ldr	r0, [r7, #12]
 8028ed0:	f000 f8f8 	bl	80290c4 <SPI_EndRxTxTransaction>
 8028ed4:	4603      	mov	r3, r0
 8028ed6:	2b00      	cmp	r3, #0
 8028ed8:	d006      	beq.n	8028ee8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8028eda:	2301      	movs	r3, #1
 8028edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028ee0:	68fb      	ldr	r3, [r7, #12]
 8028ee2:	2220      	movs	r2, #32
 8028ee4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8028ee6:	e010      	b.n	8028f0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028ee8:	68fb      	ldr	r3, [r7, #12]
 8028eea:	689b      	ldr	r3, [r3, #8]
 8028eec:	2b00      	cmp	r3, #0
 8028eee:	d10b      	bne.n	8028f08 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028ef0:	2300      	movs	r3, #0
 8028ef2:	617b      	str	r3, [r7, #20]
 8028ef4:	68fb      	ldr	r3, [r7, #12]
 8028ef6:	681b      	ldr	r3, [r3, #0]
 8028ef8:	68db      	ldr	r3, [r3, #12]
 8028efa:	617b      	str	r3, [r7, #20]
 8028efc:	68fb      	ldr	r3, [r7, #12]
 8028efe:	681b      	ldr	r3, [r3, #0]
 8028f00:	689b      	ldr	r3, [r3, #8]
 8028f02:	617b      	str	r3, [r7, #20]
 8028f04:	697b      	ldr	r3, [r7, #20]
 8028f06:	e000      	b.n	8028f0a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8028f08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028f0a:	68fb      	ldr	r3, [r7, #12]
 8028f0c:	2201      	movs	r2, #1
 8028f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028f12:	68fb      	ldr	r3, [r7, #12]
 8028f14:	2200      	movs	r2, #0
 8028f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028f1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8028f1e:	4618      	mov	r0, r3
 8028f20:	3730      	adds	r7, #48	; 0x30
 8028f22:	46bd      	mov	sp, r7
 8028f24:	bd80      	pop	{r7, pc}

08028f26 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8028f26:	b580      	push	{r7, lr}
 8028f28:	b084      	sub	sp, #16
 8028f2a:	af00      	add	r7, sp, #0
 8028f2c:	60f8      	str	r0, [r7, #12]
 8028f2e:	60b9      	str	r1, [r7, #8]
 8028f30:	603b      	str	r3, [r7, #0]
 8028f32:	4613      	mov	r3, r2
 8028f34:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028f36:	e04c      	b.n	8028fd2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8028f38:	683b      	ldr	r3, [r7, #0]
 8028f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028f3e:	d048      	beq.n	8028fd2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8028f40:	f7fd f90a 	bl	8026158 <HAL_GetTick>
 8028f44:	4602      	mov	r2, r0
 8028f46:	69bb      	ldr	r3, [r7, #24]
 8028f48:	1ad3      	subs	r3, r2, r3
 8028f4a:	683a      	ldr	r2, [r7, #0]
 8028f4c:	429a      	cmp	r2, r3
 8028f4e:	d902      	bls.n	8028f56 <SPI_WaitFlagStateUntilTimeout+0x30>
 8028f50:	683b      	ldr	r3, [r7, #0]
 8028f52:	2b00      	cmp	r3, #0
 8028f54:	d13d      	bne.n	8028fd2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8028f56:	68fb      	ldr	r3, [r7, #12]
 8028f58:	681b      	ldr	r3, [r3, #0]
 8028f5a:	685a      	ldr	r2, [r3, #4]
 8028f5c:	68fb      	ldr	r3, [r7, #12]
 8028f5e:	681b      	ldr	r3, [r3, #0]
 8028f60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8028f64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028f66:	68fb      	ldr	r3, [r7, #12]
 8028f68:	685b      	ldr	r3, [r3, #4]
 8028f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028f6e:	d111      	bne.n	8028f94 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8028f70:	68fb      	ldr	r3, [r7, #12]
 8028f72:	689b      	ldr	r3, [r3, #8]
 8028f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028f78:	d004      	beq.n	8028f84 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028f7a:	68fb      	ldr	r3, [r7, #12]
 8028f7c:	689b      	ldr	r3, [r3, #8]
 8028f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028f82:	d107      	bne.n	8028f94 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8028f84:	68fb      	ldr	r3, [r7, #12]
 8028f86:	681b      	ldr	r3, [r3, #0]
 8028f88:	681a      	ldr	r2, [r3, #0]
 8028f8a:	68fb      	ldr	r3, [r7, #12]
 8028f8c:	681b      	ldr	r3, [r3, #0]
 8028f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028f92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8028f94:	68fb      	ldr	r3, [r7, #12]
 8028f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028f9c:	d10f      	bne.n	8028fbe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8028f9e:	68fb      	ldr	r3, [r7, #12]
 8028fa0:	681b      	ldr	r3, [r3, #0]
 8028fa2:	681a      	ldr	r2, [r3, #0]
 8028fa4:	68fb      	ldr	r3, [r7, #12]
 8028fa6:	681b      	ldr	r3, [r3, #0]
 8028fa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8028fac:	601a      	str	r2, [r3, #0]
 8028fae:	68fb      	ldr	r3, [r7, #12]
 8028fb0:	681b      	ldr	r3, [r3, #0]
 8028fb2:	681a      	ldr	r2, [r3, #0]
 8028fb4:	68fb      	ldr	r3, [r7, #12]
 8028fb6:	681b      	ldr	r3, [r3, #0]
 8028fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028fbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8028fbe:	68fb      	ldr	r3, [r7, #12]
 8028fc0:	2201      	movs	r2, #1
 8028fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8028fc6:	68fb      	ldr	r3, [r7, #12]
 8028fc8:	2200      	movs	r2, #0
 8028fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8028fce:	2303      	movs	r3, #3
 8028fd0:	e00f      	b.n	8028ff2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028fd2:	68fb      	ldr	r3, [r7, #12]
 8028fd4:	681b      	ldr	r3, [r3, #0]
 8028fd6:	689a      	ldr	r2, [r3, #8]
 8028fd8:	68bb      	ldr	r3, [r7, #8]
 8028fda:	4013      	ands	r3, r2
 8028fdc:	68ba      	ldr	r2, [r7, #8]
 8028fde:	429a      	cmp	r2, r3
 8028fe0:	bf0c      	ite	eq
 8028fe2:	2301      	moveq	r3, #1
 8028fe4:	2300      	movne	r3, #0
 8028fe6:	b2db      	uxtb	r3, r3
 8028fe8:	461a      	mov	r2, r3
 8028fea:	79fb      	ldrb	r3, [r7, #7]
 8028fec:	429a      	cmp	r2, r3
 8028fee:	d1a3      	bne.n	8028f38 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8028ff0:	2300      	movs	r3, #0
}
 8028ff2:	4618      	mov	r0, r3
 8028ff4:	3710      	adds	r7, #16
 8028ff6:	46bd      	mov	sp, r7
 8028ff8:	bd80      	pop	{r7, pc}

08028ffa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8028ffa:	b580      	push	{r7, lr}
 8028ffc:	b086      	sub	sp, #24
 8028ffe:	af02      	add	r7, sp, #8
 8029000:	60f8      	str	r0, [r7, #12]
 8029002:	60b9      	str	r1, [r7, #8]
 8029004:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8029006:	68fb      	ldr	r3, [r7, #12]
 8029008:	685b      	ldr	r3, [r3, #4]
 802900a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802900e:	d111      	bne.n	8029034 <SPI_EndRxTransaction+0x3a>
 8029010:	68fb      	ldr	r3, [r7, #12]
 8029012:	689b      	ldr	r3, [r3, #8]
 8029014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029018:	d004      	beq.n	8029024 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802901a:	68fb      	ldr	r3, [r7, #12]
 802901c:	689b      	ldr	r3, [r3, #8]
 802901e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029022:	d107      	bne.n	8029034 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8029024:	68fb      	ldr	r3, [r7, #12]
 8029026:	681b      	ldr	r3, [r3, #0]
 8029028:	681a      	ldr	r2, [r3, #0]
 802902a:	68fb      	ldr	r3, [r7, #12]
 802902c:	681b      	ldr	r3, [r3, #0]
 802902e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8029032:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8029034:	68fb      	ldr	r3, [r7, #12]
 8029036:	685b      	ldr	r3, [r3, #4]
 8029038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802903c:	d12a      	bne.n	8029094 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 802903e:	68fb      	ldr	r3, [r7, #12]
 8029040:	689b      	ldr	r3, [r3, #8]
 8029042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029046:	d012      	beq.n	802906e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8029048:	687b      	ldr	r3, [r7, #4]
 802904a:	9300      	str	r3, [sp, #0]
 802904c:	68bb      	ldr	r3, [r7, #8]
 802904e:	2200      	movs	r2, #0
 8029050:	2180      	movs	r1, #128	; 0x80
 8029052:	68f8      	ldr	r0, [r7, #12]
 8029054:	f7ff ff67 	bl	8028f26 <SPI_WaitFlagStateUntilTimeout>
 8029058:	4603      	mov	r3, r0
 802905a:	2b00      	cmp	r3, #0
 802905c:	d02d      	beq.n	80290ba <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802905e:	68fb      	ldr	r3, [r7, #12]
 8029060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029062:	f043 0220 	orr.w	r2, r3, #32
 8029066:	68fb      	ldr	r3, [r7, #12]
 8029068:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 802906a:	2303      	movs	r3, #3
 802906c:	e026      	b.n	80290bc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802906e:	687b      	ldr	r3, [r7, #4]
 8029070:	9300      	str	r3, [sp, #0]
 8029072:	68bb      	ldr	r3, [r7, #8]
 8029074:	2200      	movs	r2, #0
 8029076:	2101      	movs	r1, #1
 8029078:	68f8      	ldr	r0, [r7, #12]
 802907a:	f7ff ff54 	bl	8028f26 <SPI_WaitFlagStateUntilTimeout>
 802907e:	4603      	mov	r3, r0
 8029080:	2b00      	cmp	r3, #0
 8029082:	d01a      	beq.n	80290ba <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029084:	68fb      	ldr	r3, [r7, #12]
 8029086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029088:	f043 0220 	orr.w	r2, r3, #32
 802908c:	68fb      	ldr	r3, [r7, #12]
 802908e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8029090:	2303      	movs	r3, #3
 8029092:	e013      	b.n	80290bc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8029094:	687b      	ldr	r3, [r7, #4]
 8029096:	9300      	str	r3, [sp, #0]
 8029098:	68bb      	ldr	r3, [r7, #8]
 802909a:	2200      	movs	r2, #0
 802909c:	2101      	movs	r1, #1
 802909e:	68f8      	ldr	r0, [r7, #12]
 80290a0:	f7ff ff41 	bl	8028f26 <SPI_WaitFlagStateUntilTimeout>
 80290a4:	4603      	mov	r3, r0
 80290a6:	2b00      	cmp	r3, #0
 80290a8:	d007      	beq.n	80290ba <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80290aa:	68fb      	ldr	r3, [r7, #12]
 80290ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80290ae:	f043 0220 	orr.w	r2, r3, #32
 80290b2:	68fb      	ldr	r3, [r7, #12]
 80290b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80290b6:	2303      	movs	r3, #3
 80290b8:	e000      	b.n	80290bc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80290ba:	2300      	movs	r3, #0
}
 80290bc:	4618      	mov	r0, r3
 80290be:	3710      	adds	r7, #16
 80290c0:	46bd      	mov	sp, r7
 80290c2:	bd80      	pop	{r7, pc}

080290c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80290c4:	b580      	push	{r7, lr}
 80290c6:	b088      	sub	sp, #32
 80290c8:	af02      	add	r7, sp, #8
 80290ca:	60f8      	str	r0, [r7, #12]
 80290cc:	60b9      	str	r1, [r7, #8]
 80290ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80290d0:	4b1b      	ldr	r3, [pc, #108]	; (8029140 <SPI_EndRxTxTransaction+0x7c>)
 80290d2:	681b      	ldr	r3, [r3, #0]
 80290d4:	4a1b      	ldr	r2, [pc, #108]	; (8029144 <SPI_EndRxTxTransaction+0x80>)
 80290d6:	fba2 2303 	umull	r2, r3, r2, r3
 80290da:	0d5b      	lsrs	r3, r3, #21
 80290dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80290e0:	fb02 f303 	mul.w	r3, r2, r3
 80290e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80290e6:	68fb      	ldr	r3, [r7, #12]
 80290e8:	685b      	ldr	r3, [r3, #4]
 80290ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80290ee:	d112      	bne.n	8029116 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80290f0:	687b      	ldr	r3, [r7, #4]
 80290f2:	9300      	str	r3, [sp, #0]
 80290f4:	68bb      	ldr	r3, [r7, #8]
 80290f6:	2200      	movs	r2, #0
 80290f8:	2180      	movs	r1, #128	; 0x80
 80290fa:	68f8      	ldr	r0, [r7, #12]
 80290fc:	f7ff ff13 	bl	8028f26 <SPI_WaitFlagStateUntilTimeout>
 8029100:	4603      	mov	r3, r0
 8029102:	2b00      	cmp	r3, #0
 8029104:	d016      	beq.n	8029134 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029106:	68fb      	ldr	r3, [r7, #12]
 8029108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802910a:	f043 0220 	orr.w	r2, r3, #32
 802910e:	68fb      	ldr	r3, [r7, #12]
 8029110:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8029112:	2303      	movs	r3, #3
 8029114:	e00f      	b.n	8029136 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8029116:	697b      	ldr	r3, [r7, #20]
 8029118:	2b00      	cmp	r3, #0
 802911a:	d00a      	beq.n	8029132 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 802911c:	697b      	ldr	r3, [r7, #20]
 802911e:	3b01      	subs	r3, #1
 8029120:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8029122:	68fb      	ldr	r3, [r7, #12]
 8029124:	681b      	ldr	r3, [r3, #0]
 8029126:	689b      	ldr	r3, [r3, #8]
 8029128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802912c:	2b80      	cmp	r3, #128	; 0x80
 802912e:	d0f2      	beq.n	8029116 <SPI_EndRxTxTransaction+0x52>
 8029130:	e000      	b.n	8029134 <SPI_EndRxTxTransaction+0x70>
        break;
 8029132:	bf00      	nop
  }

  return HAL_OK;
 8029134:	2300      	movs	r3, #0
}
 8029136:	4618      	mov	r0, r3
 8029138:	3718      	adds	r7, #24
 802913a:	46bd      	mov	sp, r7
 802913c:	bd80      	pop	{r7, pc}
 802913e:	bf00      	nop
 8029140:	20000014 	.word	0x20000014
 8029144:	165e9f81 	.word	0x165e9f81

08029148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8029148:	b580      	push	{r7, lr}
 802914a:	b082      	sub	sp, #8
 802914c:	af00      	add	r7, sp, #0
 802914e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029150:	687b      	ldr	r3, [r7, #4]
 8029152:	2b00      	cmp	r3, #0
 8029154:	d101      	bne.n	802915a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8029156:	2301      	movs	r3, #1
 8029158:	e01d      	b.n	8029196 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802915a:	687b      	ldr	r3, [r7, #4]
 802915c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029160:	b2db      	uxtb	r3, r3
 8029162:	2b00      	cmp	r3, #0
 8029164:	d106      	bne.n	8029174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029166:	687b      	ldr	r3, [r7, #4]
 8029168:	2200      	movs	r2, #0
 802916a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802916e:	6878      	ldr	r0, [r7, #4]
 8029170:	f7fc faf0 	bl	8025754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029174:	687b      	ldr	r3, [r7, #4]
 8029176:	2202      	movs	r2, #2
 8029178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802917c:	687b      	ldr	r3, [r7, #4]
 802917e:	681a      	ldr	r2, [r3, #0]
 8029180:	687b      	ldr	r3, [r7, #4]
 8029182:	3304      	adds	r3, #4
 8029184:	4619      	mov	r1, r3
 8029186:	4610      	mov	r0, r2
 8029188:	f000 fc0e 	bl	80299a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802918c:	687b      	ldr	r3, [r7, #4]
 802918e:	2201      	movs	r2, #1
 8029190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029194:	2300      	movs	r3, #0
}
 8029196:	4618      	mov	r0, r3
 8029198:	3708      	adds	r7, #8
 802919a:	46bd      	mov	sp, r7
 802919c:	bd80      	pop	{r7, pc}

0802919e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 802919e:	b480      	push	{r7}
 80291a0:	b085      	sub	sp, #20
 80291a2:	af00      	add	r7, sp, #0
 80291a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80291a6:	687b      	ldr	r3, [r7, #4]
 80291a8:	681b      	ldr	r3, [r3, #0]
 80291aa:	68da      	ldr	r2, [r3, #12]
 80291ac:	687b      	ldr	r3, [r7, #4]
 80291ae:	681b      	ldr	r3, [r3, #0]
 80291b0:	f042 0201 	orr.w	r2, r2, #1
 80291b4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80291b6:	687b      	ldr	r3, [r7, #4]
 80291b8:	681b      	ldr	r3, [r3, #0]
 80291ba:	689b      	ldr	r3, [r3, #8]
 80291bc:	f003 0307 	and.w	r3, r3, #7
 80291c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80291c2:	68fb      	ldr	r3, [r7, #12]
 80291c4:	2b06      	cmp	r3, #6
 80291c6:	d007      	beq.n	80291d8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80291c8:	687b      	ldr	r3, [r7, #4]
 80291ca:	681b      	ldr	r3, [r3, #0]
 80291cc:	681a      	ldr	r2, [r3, #0]
 80291ce:	687b      	ldr	r3, [r7, #4]
 80291d0:	681b      	ldr	r3, [r3, #0]
 80291d2:	f042 0201 	orr.w	r2, r2, #1
 80291d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80291d8:	2300      	movs	r3, #0
}
 80291da:	4618      	mov	r0, r3
 80291dc:	3714      	adds	r7, #20
 80291de:	46bd      	mov	sp, r7
 80291e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291e4:	4770      	bx	lr

080291e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80291e6:	b580      	push	{r7, lr}
 80291e8:	b082      	sub	sp, #8
 80291ea:	af00      	add	r7, sp, #0
 80291ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80291ee:	687b      	ldr	r3, [r7, #4]
 80291f0:	2b00      	cmp	r3, #0
 80291f2:	d101      	bne.n	80291f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80291f4:	2301      	movs	r3, #1
 80291f6:	e01d      	b.n	8029234 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80291f8:	687b      	ldr	r3, [r7, #4]
 80291fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80291fe:	b2db      	uxtb	r3, r3
 8029200:	2b00      	cmp	r3, #0
 8029202:	d106      	bne.n	8029212 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029204:	687b      	ldr	r3, [r7, #4]
 8029206:	2200      	movs	r2, #0
 8029208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 802920c:	6878      	ldr	r0, [r7, #4]
 802920e:	f7fc fa53 	bl	80256b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029212:	687b      	ldr	r3, [r7, #4]
 8029214:	2202      	movs	r2, #2
 8029216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802921a:	687b      	ldr	r3, [r7, #4]
 802921c:	681a      	ldr	r2, [r3, #0]
 802921e:	687b      	ldr	r3, [r7, #4]
 8029220:	3304      	adds	r3, #4
 8029222:	4619      	mov	r1, r3
 8029224:	4610      	mov	r0, r2
 8029226:	f000 fbbf 	bl	80299a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802922a:	687b      	ldr	r3, [r7, #4]
 802922c:	2201      	movs	r2, #1
 802922e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029232:	2300      	movs	r3, #0
}
 8029234:	4618      	mov	r0, r3
 8029236:	3708      	adds	r7, #8
 8029238:	46bd      	mov	sp, r7
 802923a:	bd80      	pop	{r7, pc}

0802923c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 802923c:	b580      	push	{r7, lr}
 802923e:	b084      	sub	sp, #16
 8029240:	af00      	add	r7, sp, #0
 8029242:	6078      	str	r0, [r7, #4]
 8029244:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8029246:	687b      	ldr	r3, [r7, #4]
 8029248:	681b      	ldr	r3, [r3, #0]
 802924a:	2201      	movs	r2, #1
 802924c:	6839      	ldr	r1, [r7, #0]
 802924e:	4618      	mov	r0, r3
 8029250:	f000 fe94 	bl	8029f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8029254:	687b      	ldr	r3, [r7, #4]
 8029256:	681b      	ldr	r3, [r3, #0]
 8029258:	4a15      	ldr	r2, [pc, #84]	; (80292b0 <HAL_TIM_PWM_Start+0x74>)
 802925a:	4293      	cmp	r3, r2
 802925c:	d004      	beq.n	8029268 <HAL_TIM_PWM_Start+0x2c>
 802925e:	687b      	ldr	r3, [r7, #4]
 8029260:	681b      	ldr	r3, [r3, #0]
 8029262:	4a14      	ldr	r2, [pc, #80]	; (80292b4 <HAL_TIM_PWM_Start+0x78>)
 8029264:	4293      	cmp	r3, r2
 8029266:	d101      	bne.n	802926c <HAL_TIM_PWM_Start+0x30>
 8029268:	2301      	movs	r3, #1
 802926a:	e000      	b.n	802926e <HAL_TIM_PWM_Start+0x32>
 802926c:	2300      	movs	r3, #0
 802926e:	2b00      	cmp	r3, #0
 8029270:	d007      	beq.n	8029282 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8029272:	687b      	ldr	r3, [r7, #4]
 8029274:	681b      	ldr	r3, [r3, #0]
 8029276:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8029278:	687b      	ldr	r3, [r7, #4]
 802927a:	681b      	ldr	r3, [r3, #0]
 802927c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029280:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8029282:	687b      	ldr	r3, [r7, #4]
 8029284:	681b      	ldr	r3, [r3, #0]
 8029286:	689b      	ldr	r3, [r3, #8]
 8029288:	f003 0307 	and.w	r3, r3, #7
 802928c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802928e:	68fb      	ldr	r3, [r7, #12]
 8029290:	2b06      	cmp	r3, #6
 8029292:	d007      	beq.n	80292a4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8029294:	687b      	ldr	r3, [r7, #4]
 8029296:	681b      	ldr	r3, [r3, #0]
 8029298:	681a      	ldr	r2, [r3, #0]
 802929a:	687b      	ldr	r3, [r7, #4]
 802929c:	681b      	ldr	r3, [r3, #0]
 802929e:	f042 0201 	orr.w	r2, r2, #1
 80292a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80292a4:	2300      	movs	r3, #0
}
 80292a6:	4618      	mov	r0, r3
 80292a8:	3710      	adds	r7, #16
 80292aa:	46bd      	mov	sp, r7
 80292ac:	bd80      	pop	{r7, pc}
 80292ae:	bf00      	nop
 80292b0:	40010000 	.word	0x40010000
 80292b4:	40010400 	.word	0x40010400

080292b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80292b8:	b580      	push	{r7, lr}
 80292ba:	b086      	sub	sp, #24
 80292bc:	af00      	add	r7, sp, #0
 80292be:	6078      	str	r0, [r7, #4]
 80292c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80292c2:	687b      	ldr	r3, [r7, #4]
 80292c4:	2b00      	cmp	r3, #0
 80292c6:	d101      	bne.n	80292cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80292c8:	2301      	movs	r3, #1
 80292ca:	e083      	b.n	80293d4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80292cc:	687b      	ldr	r3, [r7, #4]
 80292ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80292d2:	b2db      	uxtb	r3, r3
 80292d4:	2b00      	cmp	r3, #0
 80292d6:	d106      	bne.n	80292e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80292d8:	687b      	ldr	r3, [r7, #4]
 80292da:	2200      	movs	r2, #0
 80292dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80292e0:	6878      	ldr	r0, [r7, #4]
 80292e2:	f7fc facd 	bl	8025880 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80292e6:	687b      	ldr	r3, [r7, #4]
 80292e8:	2202      	movs	r2, #2
 80292ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80292ee:	687b      	ldr	r3, [r7, #4]
 80292f0:	681b      	ldr	r3, [r3, #0]
 80292f2:	689b      	ldr	r3, [r3, #8]
 80292f4:	687a      	ldr	r2, [r7, #4]
 80292f6:	6812      	ldr	r2, [r2, #0]
 80292f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80292fc:	f023 0307 	bic.w	r3, r3, #7
 8029300:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029302:	687b      	ldr	r3, [r7, #4]
 8029304:	681a      	ldr	r2, [r3, #0]
 8029306:	687b      	ldr	r3, [r7, #4]
 8029308:	3304      	adds	r3, #4
 802930a:	4619      	mov	r1, r3
 802930c:	4610      	mov	r0, r2
 802930e:	f000 fb4b 	bl	80299a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8029312:	687b      	ldr	r3, [r7, #4]
 8029314:	681b      	ldr	r3, [r3, #0]
 8029316:	689b      	ldr	r3, [r3, #8]
 8029318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 802931a:	687b      	ldr	r3, [r7, #4]
 802931c:	681b      	ldr	r3, [r3, #0]
 802931e:	699b      	ldr	r3, [r3, #24]
 8029320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8029322:	687b      	ldr	r3, [r7, #4]
 8029324:	681b      	ldr	r3, [r3, #0]
 8029326:	6a1b      	ldr	r3, [r3, #32]
 8029328:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 802932a:	683b      	ldr	r3, [r7, #0]
 802932c:	681b      	ldr	r3, [r3, #0]
 802932e:	697a      	ldr	r2, [r7, #20]
 8029330:	4313      	orrs	r3, r2
 8029332:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8029334:	693b      	ldr	r3, [r7, #16]
 8029336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802933a:	f023 0303 	bic.w	r3, r3, #3
 802933e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8029340:	683b      	ldr	r3, [r7, #0]
 8029342:	689a      	ldr	r2, [r3, #8]
 8029344:	683b      	ldr	r3, [r7, #0]
 8029346:	699b      	ldr	r3, [r3, #24]
 8029348:	021b      	lsls	r3, r3, #8
 802934a:	4313      	orrs	r3, r2
 802934c:	693a      	ldr	r2, [r7, #16]
 802934e:	4313      	orrs	r3, r2
 8029350:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8029352:	693b      	ldr	r3, [r7, #16]
 8029354:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8029358:	f023 030c 	bic.w	r3, r3, #12
 802935c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 802935e:	693b      	ldr	r3, [r7, #16]
 8029360:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029364:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029368:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 802936a:	683b      	ldr	r3, [r7, #0]
 802936c:	68da      	ldr	r2, [r3, #12]
 802936e:	683b      	ldr	r3, [r7, #0]
 8029370:	69db      	ldr	r3, [r3, #28]
 8029372:	021b      	lsls	r3, r3, #8
 8029374:	4313      	orrs	r3, r2
 8029376:	693a      	ldr	r2, [r7, #16]
 8029378:	4313      	orrs	r3, r2
 802937a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 802937c:	683b      	ldr	r3, [r7, #0]
 802937e:	691b      	ldr	r3, [r3, #16]
 8029380:	011a      	lsls	r2, r3, #4
 8029382:	683b      	ldr	r3, [r7, #0]
 8029384:	6a1b      	ldr	r3, [r3, #32]
 8029386:	031b      	lsls	r3, r3, #12
 8029388:	4313      	orrs	r3, r2
 802938a:	693a      	ldr	r2, [r7, #16]
 802938c:	4313      	orrs	r3, r2
 802938e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8029390:	68fb      	ldr	r3, [r7, #12]
 8029392:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8029396:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8029398:	68fb      	ldr	r3, [r7, #12]
 802939a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 802939e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80293a0:	683b      	ldr	r3, [r7, #0]
 80293a2:	685a      	ldr	r2, [r3, #4]
 80293a4:	683b      	ldr	r3, [r7, #0]
 80293a6:	695b      	ldr	r3, [r3, #20]
 80293a8:	011b      	lsls	r3, r3, #4
 80293aa:	4313      	orrs	r3, r2
 80293ac:	68fa      	ldr	r2, [r7, #12]
 80293ae:	4313      	orrs	r3, r2
 80293b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80293b2:	687b      	ldr	r3, [r7, #4]
 80293b4:	681b      	ldr	r3, [r3, #0]
 80293b6:	697a      	ldr	r2, [r7, #20]
 80293b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80293ba:	687b      	ldr	r3, [r7, #4]
 80293bc:	681b      	ldr	r3, [r3, #0]
 80293be:	693a      	ldr	r2, [r7, #16]
 80293c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80293c2:	687b      	ldr	r3, [r7, #4]
 80293c4:	681b      	ldr	r3, [r3, #0]
 80293c6:	68fa      	ldr	r2, [r7, #12]
 80293c8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80293ca:	687b      	ldr	r3, [r7, #4]
 80293cc:	2201      	movs	r2, #1
 80293ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80293d2:	2300      	movs	r3, #0
}
 80293d4:	4618      	mov	r0, r3
 80293d6:	3718      	adds	r7, #24
 80293d8:	46bd      	mov	sp, r7
 80293da:	bd80      	pop	{r7, pc}

080293dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80293dc:	b580      	push	{r7, lr}
 80293de:	b082      	sub	sp, #8
 80293e0:	af00      	add	r7, sp, #0
 80293e2:	6078      	str	r0, [r7, #4]
 80293e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80293e6:	683b      	ldr	r3, [r7, #0]
 80293e8:	2b00      	cmp	r3, #0
 80293ea:	d002      	beq.n	80293f2 <HAL_TIM_Encoder_Start+0x16>
 80293ec:	2b04      	cmp	r3, #4
 80293ee:	d008      	beq.n	8029402 <HAL_TIM_Encoder_Start+0x26>
 80293f0:	e00f      	b.n	8029412 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80293f2:	687b      	ldr	r3, [r7, #4]
 80293f4:	681b      	ldr	r3, [r3, #0]
 80293f6:	2201      	movs	r2, #1
 80293f8:	2100      	movs	r1, #0
 80293fa:	4618      	mov	r0, r3
 80293fc:	f000 fdbe 	bl	8029f7c <TIM_CCxChannelCmd>
      break;
 8029400:	e016      	b.n	8029430 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8029402:	687b      	ldr	r3, [r7, #4]
 8029404:	681b      	ldr	r3, [r3, #0]
 8029406:	2201      	movs	r2, #1
 8029408:	2104      	movs	r1, #4
 802940a:	4618      	mov	r0, r3
 802940c:	f000 fdb6 	bl	8029f7c <TIM_CCxChannelCmd>
      break;
 8029410:	e00e      	b.n	8029430 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8029412:	687b      	ldr	r3, [r7, #4]
 8029414:	681b      	ldr	r3, [r3, #0]
 8029416:	2201      	movs	r2, #1
 8029418:	2100      	movs	r1, #0
 802941a:	4618      	mov	r0, r3
 802941c:	f000 fdae 	bl	8029f7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8029420:	687b      	ldr	r3, [r7, #4]
 8029422:	681b      	ldr	r3, [r3, #0]
 8029424:	2201      	movs	r2, #1
 8029426:	2104      	movs	r1, #4
 8029428:	4618      	mov	r0, r3
 802942a:	f000 fda7 	bl	8029f7c <TIM_CCxChannelCmd>
      break;
 802942e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8029430:	687b      	ldr	r3, [r7, #4]
 8029432:	681b      	ldr	r3, [r3, #0]
 8029434:	681a      	ldr	r2, [r3, #0]
 8029436:	687b      	ldr	r3, [r7, #4]
 8029438:	681b      	ldr	r3, [r3, #0]
 802943a:	f042 0201 	orr.w	r2, r2, #1
 802943e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8029440:	2300      	movs	r3, #0
}
 8029442:	4618      	mov	r0, r3
 8029444:	3708      	adds	r7, #8
 8029446:	46bd      	mov	sp, r7
 8029448:	bd80      	pop	{r7, pc}

0802944a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802944a:	b580      	push	{r7, lr}
 802944c:	b082      	sub	sp, #8
 802944e:	af00      	add	r7, sp, #0
 8029450:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8029452:	687b      	ldr	r3, [r7, #4]
 8029454:	681b      	ldr	r3, [r3, #0]
 8029456:	691b      	ldr	r3, [r3, #16]
 8029458:	f003 0302 	and.w	r3, r3, #2
 802945c:	2b02      	cmp	r3, #2
 802945e:	d122      	bne.n	80294a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8029460:	687b      	ldr	r3, [r7, #4]
 8029462:	681b      	ldr	r3, [r3, #0]
 8029464:	68db      	ldr	r3, [r3, #12]
 8029466:	f003 0302 	and.w	r3, r3, #2
 802946a:	2b02      	cmp	r3, #2
 802946c:	d11b      	bne.n	80294a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802946e:	687b      	ldr	r3, [r7, #4]
 8029470:	681b      	ldr	r3, [r3, #0]
 8029472:	f06f 0202 	mvn.w	r2, #2
 8029476:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8029478:	687b      	ldr	r3, [r7, #4]
 802947a:	2201      	movs	r2, #1
 802947c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802947e:	687b      	ldr	r3, [r7, #4]
 8029480:	681b      	ldr	r3, [r3, #0]
 8029482:	699b      	ldr	r3, [r3, #24]
 8029484:	f003 0303 	and.w	r3, r3, #3
 8029488:	2b00      	cmp	r3, #0
 802948a:	d003      	beq.n	8029494 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802948c:	6878      	ldr	r0, [r7, #4]
 802948e:	f000 fa6c 	bl	802996a <HAL_TIM_IC_CaptureCallback>
 8029492:	e005      	b.n	80294a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8029494:	6878      	ldr	r0, [r7, #4]
 8029496:	f000 fa5e 	bl	8029956 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802949a:	6878      	ldr	r0, [r7, #4]
 802949c:	f000 fa6f 	bl	802997e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80294a0:	687b      	ldr	r3, [r7, #4]
 80294a2:	2200      	movs	r2, #0
 80294a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80294a6:	687b      	ldr	r3, [r7, #4]
 80294a8:	681b      	ldr	r3, [r3, #0]
 80294aa:	691b      	ldr	r3, [r3, #16]
 80294ac:	f003 0304 	and.w	r3, r3, #4
 80294b0:	2b04      	cmp	r3, #4
 80294b2:	d122      	bne.n	80294fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80294b4:	687b      	ldr	r3, [r7, #4]
 80294b6:	681b      	ldr	r3, [r3, #0]
 80294b8:	68db      	ldr	r3, [r3, #12]
 80294ba:	f003 0304 	and.w	r3, r3, #4
 80294be:	2b04      	cmp	r3, #4
 80294c0:	d11b      	bne.n	80294fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80294c2:	687b      	ldr	r3, [r7, #4]
 80294c4:	681b      	ldr	r3, [r3, #0]
 80294c6:	f06f 0204 	mvn.w	r2, #4
 80294ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80294cc:	687b      	ldr	r3, [r7, #4]
 80294ce:	2202      	movs	r2, #2
 80294d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80294d2:	687b      	ldr	r3, [r7, #4]
 80294d4:	681b      	ldr	r3, [r3, #0]
 80294d6:	699b      	ldr	r3, [r3, #24]
 80294d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80294dc:	2b00      	cmp	r3, #0
 80294de:	d003      	beq.n	80294e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80294e0:	6878      	ldr	r0, [r7, #4]
 80294e2:	f000 fa42 	bl	802996a <HAL_TIM_IC_CaptureCallback>
 80294e6:	e005      	b.n	80294f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80294e8:	6878      	ldr	r0, [r7, #4]
 80294ea:	f000 fa34 	bl	8029956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80294ee:	6878      	ldr	r0, [r7, #4]
 80294f0:	f000 fa45 	bl	802997e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80294f4:	687b      	ldr	r3, [r7, #4]
 80294f6:	2200      	movs	r2, #0
 80294f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80294fa:	687b      	ldr	r3, [r7, #4]
 80294fc:	681b      	ldr	r3, [r3, #0]
 80294fe:	691b      	ldr	r3, [r3, #16]
 8029500:	f003 0308 	and.w	r3, r3, #8
 8029504:	2b08      	cmp	r3, #8
 8029506:	d122      	bne.n	802954e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8029508:	687b      	ldr	r3, [r7, #4]
 802950a:	681b      	ldr	r3, [r3, #0]
 802950c:	68db      	ldr	r3, [r3, #12]
 802950e:	f003 0308 	and.w	r3, r3, #8
 8029512:	2b08      	cmp	r3, #8
 8029514:	d11b      	bne.n	802954e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8029516:	687b      	ldr	r3, [r7, #4]
 8029518:	681b      	ldr	r3, [r3, #0]
 802951a:	f06f 0208 	mvn.w	r2, #8
 802951e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8029520:	687b      	ldr	r3, [r7, #4]
 8029522:	2204      	movs	r2, #4
 8029524:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8029526:	687b      	ldr	r3, [r7, #4]
 8029528:	681b      	ldr	r3, [r3, #0]
 802952a:	69db      	ldr	r3, [r3, #28]
 802952c:	f003 0303 	and.w	r3, r3, #3
 8029530:	2b00      	cmp	r3, #0
 8029532:	d003      	beq.n	802953c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029534:	6878      	ldr	r0, [r7, #4]
 8029536:	f000 fa18 	bl	802996a <HAL_TIM_IC_CaptureCallback>
 802953a:	e005      	b.n	8029548 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802953c:	6878      	ldr	r0, [r7, #4]
 802953e:	f000 fa0a 	bl	8029956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029542:	6878      	ldr	r0, [r7, #4]
 8029544:	f000 fa1b 	bl	802997e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029548:	687b      	ldr	r3, [r7, #4]
 802954a:	2200      	movs	r2, #0
 802954c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 802954e:	687b      	ldr	r3, [r7, #4]
 8029550:	681b      	ldr	r3, [r3, #0]
 8029552:	691b      	ldr	r3, [r3, #16]
 8029554:	f003 0310 	and.w	r3, r3, #16
 8029558:	2b10      	cmp	r3, #16
 802955a:	d122      	bne.n	80295a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802955c:	687b      	ldr	r3, [r7, #4]
 802955e:	681b      	ldr	r3, [r3, #0]
 8029560:	68db      	ldr	r3, [r3, #12]
 8029562:	f003 0310 	and.w	r3, r3, #16
 8029566:	2b10      	cmp	r3, #16
 8029568:	d11b      	bne.n	80295a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802956a:	687b      	ldr	r3, [r7, #4]
 802956c:	681b      	ldr	r3, [r3, #0]
 802956e:	f06f 0210 	mvn.w	r2, #16
 8029572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8029574:	687b      	ldr	r3, [r7, #4]
 8029576:	2208      	movs	r2, #8
 8029578:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802957a:	687b      	ldr	r3, [r7, #4]
 802957c:	681b      	ldr	r3, [r3, #0]
 802957e:	69db      	ldr	r3, [r3, #28]
 8029580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029584:	2b00      	cmp	r3, #0
 8029586:	d003      	beq.n	8029590 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029588:	6878      	ldr	r0, [r7, #4]
 802958a:	f000 f9ee 	bl	802996a <HAL_TIM_IC_CaptureCallback>
 802958e:	e005      	b.n	802959c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029590:	6878      	ldr	r0, [r7, #4]
 8029592:	f000 f9e0 	bl	8029956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029596:	6878      	ldr	r0, [r7, #4]
 8029598:	f000 f9f1 	bl	802997e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802959c:	687b      	ldr	r3, [r7, #4]
 802959e:	2200      	movs	r2, #0
 80295a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80295a2:	687b      	ldr	r3, [r7, #4]
 80295a4:	681b      	ldr	r3, [r3, #0]
 80295a6:	691b      	ldr	r3, [r3, #16]
 80295a8:	f003 0301 	and.w	r3, r3, #1
 80295ac:	2b01      	cmp	r3, #1
 80295ae:	d10e      	bne.n	80295ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80295b0:	687b      	ldr	r3, [r7, #4]
 80295b2:	681b      	ldr	r3, [r3, #0]
 80295b4:	68db      	ldr	r3, [r3, #12]
 80295b6:	f003 0301 	and.w	r3, r3, #1
 80295ba:	2b01      	cmp	r3, #1
 80295bc:	d107      	bne.n	80295ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80295be:	687b      	ldr	r3, [r7, #4]
 80295c0:	681b      	ldr	r3, [r3, #0]
 80295c2:	f06f 0201 	mvn.w	r2, #1
 80295c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80295c8:	6878      	ldr	r0, [r7, #4]
 80295ca:	f7f9 fd0b 	bl	8022fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80295ce:	687b      	ldr	r3, [r7, #4]
 80295d0:	681b      	ldr	r3, [r3, #0]
 80295d2:	691b      	ldr	r3, [r3, #16]
 80295d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80295d8:	2b80      	cmp	r3, #128	; 0x80
 80295da:	d10e      	bne.n	80295fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80295dc:	687b      	ldr	r3, [r7, #4]
 80295de:	681b      	ldr	r3, [r3, #0]
 80295e0:	68db      	ldr	r3, [r3, #12]
 80295e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80295e6:	2b80      	cmp	r3, #128	; 0x80
 80295e8:	d107      	bne.n	80295fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80295ea:	687b      	ldr	r3, [r7, #4]
 80295ec:	681b      	ldr	r3, [r3, #0]
 80295ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80295f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80295f4:	6878      	ldr	r0, [r7, #4]
 80295f6:	f000 fdbf 	bl	802a178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80295fa:	687b      	ldr	r3, [r7, #4]
 80295fc:	681b      	ldr	r3, [r3, #0]
 80295fe:	691b      	ldr	r3, [r3, #16]
 8029600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029604:	2b40      	cmp	r3, #64	; 0x40
 8029606:	d10e      	bne.n	8029626 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8029608:	687b      	ldr	r3, [r7, #4]
 802960a:	681b      	ldr	r3, [r3, #0]
 802960c:	68db      	ldr	r3, [r3, #12]
 802960e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029612:	2b40      	cmp	r3, #64	; 0x40
 8029614:	d107      	bne.n	8029626 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8029616:	687b      	ldr	r3, [r7, #4]
 8029618:	681b      	ldr	r3, [r3, #0]
 802961a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802961e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8029620:	6878      	ldr	r0, [r7, #4]
 8029622:	f000 f9b6 	bl	8029992 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8029626:	687b      	ldr	r3, [r7, #4]
 8029628:	681b      	ldr	r3, [r3, #0]
 802962a:	691b      	ldr	r3, [r3, #16]
 802962c:	f003 0320 	and.w	r3, r3, #32
 8029630:	2b20      	cmp	r3, #32
 8029632:	d10e      	bne.n	8029652 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8029634:	687b      	ldr	r3, [r7, #4]
 8029636:	681b      	ldr	r3, [r3, #0]
 8029638:	68db      	ldr	r3, [r3, #12]
 802963a:	f003 0320 	and.w	r3, r3, #32
 802963e:	2b20      	cmp	r3, #32
 8029640:	d107      	bne.n	8029652 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8029642:	687b      	ldr	r3, [r7, #4]
 8029644:	681b      	ldr	r3, [r3, #0]
 8029646:	f06f 0220 	mvn.w	r2, #32
 802964a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802964c:	6878      	ldr	r0, [r7, #4]
 802964e:	f000 fd89 	bl	802a164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8029652:	bf00      	nop
 8029654:	3708      	adds	r7, #8
 8029656:	46bd      	mov	sp, r7
 8029658:	bd80      	pop	{r7, pc}
	...

0802965c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 802965c:	b580      	push	{r7, lr}
 802965e:	b084      	sub	sp, #16
 8029660:	af00      	add	r7, sp, #0
 8029662:	60f8      	str	r0, [r7, #12]
 8029664:	60b9      	str	r1, [r7, #8]
 8029666:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8029668:	68fb      	ldr	r3, [r7, #12]
 802966a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802966e:	2b01      	cmp	r3, #1
 8029670:	d101      	bne.n	8029676 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8029672:	2302      	movs	r3, #2
 8029674:	e0b4      	b.n	80297e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8029676:	68fb      	ldr	r3, [r7, #12]
 8029678:	2201      	movs	r2, #1
 802967a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802967e:	68fb      	ldr	r3, [r7, #12]
 8029680:	2202      	movs	r2, #2
 8029682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8029686:	687b      	ldr	r3, [r7, #4]
 8029688:	2b0c      	cmp	r3, #12
 802968a:	f200 809f 	bhi.w	80297cc <HAL_TIM_PWM_ConfigChannel+0x170>
 802968e:	a201      	add	r2, pc, #4	; (adr r2, 8029694 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8029690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029694:	080296c9 	.word	0x080296c9
 8029698:	080297cd 	.word	0x080297cd
 802969c:	080297cd 	.word	0x080297cd
 80296a0:	080297cd 	.word	0x080297cd
 80296a4:	08029709 	.word	0x08029709
 80296a8:	080297cd 	.word	0x080297cd
 80296ac:	080297cd 	.word	0x080297cd
 80296b0:	080297cd 	.word	0x080297cd
 80296b4:	0802974b 	.word	0x0802974b
 80296b8:	080297cd 	.word	0x080297cd
 80296bc:	080297cd 	.word	0x080297cd
 80296c0:	080297cd 	.word	0x080297cd
 80296c4:	0802978b 	.word	0x0802978b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80296c8:	68fb      	ldr	r3, [r7, #12]
 80296ca:	681b      	ldr	r3, [r3, #0]
 80296cc:	68b9      	ldr	r1, [r7, #8]
 80296ce:	4618      	mov	r0, r3
 80296d0:	f000 fa0a 	bl	8029ae8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80296d4:	68fb      	ldr	r3, [r7, #12]
 80296d6:	681b      	ldr	r3, [r3, #0]
 80296d8:	699a      	ldr	r2, [r3, #24]
 80296da:	68fb      	ldr	r3, [r7, #12]
 80296dc:	681b      	ldr	r3, [r3, #0]
 80296de:	f042 0208 	orr.w	r2, r2, #8
 80296e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80296e4:	68fb      	ldr	r3, [r7, #12]
 80296e6:	681b      	ldr	r3, [r3, #0]
 80296e8:	699a      	ldr	r2, [r3, #24]
 80296ea:	68fb      	ldr	r3, [r7, #12]
 80296ec:	681b      	ldr	r3, [r3, #0]
 80296ee:	f022 0204 	bic.w	r2, r2, #4
 80296f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80296f4:	68fb      	ldr	r3, [r7, #12]
 80296f6:	681b      	ldr	r3, [r3, #0]
 80296f8:	6999      	ldr	r1, [r3, #24]
 80296fa:	68bb      	ldr	r3, [r7, #8]
 80296fc:	691a      	ldr	r2, [r3, #16]
 80296fe:	68fb      	ldr	r3, [r7, #12]
 8029700:	681b      	ldr	r3, [r3, #0]
 8029702:	430a      	orrs	r2, r1
 8029704:	619a      	str	r2, [r3, #24]
      break;
 8029706:	e062      	b.n	80297ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8029708:	68fb      	ldr	r3, [r7, #12]
 802970a:	681b      	ldr	r3, [r3, #0]
 802970c:	68b9      	ldr	r1, [r7, #8]
 802970e:	4618      	mov	r0, r3
 8029710:	f000 fa5a 	bl	8029bc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8029714:	68fb      	ldr	r3, [r7, #12]
 8029716:	681b      	ldr	r3, [r3, #0]
 8029718:	699a      	ldr	r2, [r3, #24]
 802971a:	68fb      	ldr	r3, [r7, #12]
 802971c:	681b      	ldr	r3, [r3, #0]
 802971e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8029722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8029724:	68fb      	ldr	r3, [r7, #12]
 8029726:	681b      	ldr	r3, [r3, #0]
 8029728:	699a      	ldr	r2, [r3, #24]
 802972a:	68fb      	ldr	r3, [r7, #12]
 802972c:	681b      	ldr	r3, [r3, #0]
 802972e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8029732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8029734:	68fb      	ldr	r3, [r7, #12]
 8029736:	681b      	ldr	r3, [r3, #0]
 8029738:	6999      	ldr	r1, [r3, #24]
 802973a:	68bb      	ldr	r3, [r7, #8]
 802973c:	691b      	ldr	r3, [r3, #16]
 802973e:	021a      	lsls	r2, r3, #8
 8029740:	68fb      	ldr	r3, [r7, #12]
 8029742:	681b      	ldr	r3, [r3, #0]
 8029744:	430a      	orrs	r2, r1
 8029746:	619a      	str	r2, [r3, #24]
      break;
 8029748:	e041      	b.n	80297ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 802974a:	68fb      	ldr	r3, [r7, #12]
 802974c:	681b      	ldr	r3, [r3, #0]
 802974e:	68b9      	ldr	r1, [r7, #8]
 8029750:	4618      	mov	r0, r3
 8029752:	f000 faaf 	bl	8029cb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8029756:	68fb      	ldr	r3, [r7, #12]
 8029758:	681b      	ldr	r3, [r3, #0]
 802975a:	69da      	ldr	r2, [r3, #28]
 802975c:	68fb      	ldr	r3, [r7, #12]
 802975e:	681b      	ldr	r3, [r3, #0]
 8029760:	f042 0208 	orr.w	r2, r2, #8
 8029764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8029766:	68fb      	ldr	r3, [r7, #12]
 8029768:	681b      	ldr	r3, [r3, #0]
 802976a:	69da      	ldr	r2, [r3, #28]
 802976c:	68fb      	ldr	r3, [r7, #12]
 802976e:	681b      	ldr	r3, [r3, #0]
 8029770:	f022 0204 	bic.w	r2, r2, #4
 8029774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8029776:	68fb      	ldr	r3, [r7, #12]
 8029778:	681b      	ldr	r3, [r3, #0]
 802977a:	69d9      	ldr	r1, [r3, #28]
 802977c:	68bb      	ldr	r3, [r7, #8]
 802977e:	691a      	ldr	r2, [r3, #16]
 8029780:	68fb      	ldr	r3, [r7, #12]
 8029782:	681b      	ldr	r3, [r3, #0]
 8029784:	430a      	orrs	r2, r1
 8029786:	61da      	str	r2, [r3, #28]
      break;
 8029788:	e021      	b.n	80297ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 802978a:	68fb      	ldr	r3, [r7, #12]
 802978c:	681b      	ldr	r3, [r3, #0]
 802978e:	68b9      	ldr	r1, [r7, #8]
 8029790:	4618      	mov	r0, r3
 8029792:	f000 fb03 	bl	8029d9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8029796:	68fb      	ldr	r3, [r7, #12]
 8029798:	681b      	ldr	r3, [r3, #0]
 802979a:	69da      	ldr	r2, [r3, #28]
 802979c:	68fb      	ldr	r3, [r7, #12]
 802979e:	681b      	ldr	r3, [r3, #0]
 80297a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80297a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80297a6:	68fb      	ldr	r3, [r7, #12]
 80297a8:	681b      	ldr	r3, [r3, #0]
 80297aa:	69da      	ldr	r2, [r3, #28]
 80297ac:	68fb      	ldr	r3, [r7, #12]
 80297ae:	681b      	ldr	r3, [r3, #0]
 80297b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80297b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80297b6:	68fb      	ldr	r3, [r7, #12]
 80297b8:	681b      	ldr	r3, [r3, #0]
 80297ba:	69d9      	ldr	r1, [r3, #28]
 80297bc:	68bb      	ldr	r3, [r7, #8]
 80297be:	691b      	ldr	r3, [r3, #16]
 80297c0:	021a      	lsls	r2, r3, #8
 80297c2:	68fb      	ldr	r3, [r7, #12]
 80297c4:	681b      	ldr	r3, [r3, #0]
 80297c6:	430a      	orrs	r2, r1
 80297c8:	61da      	str	r2, [r3, #28]
      break;
 80297ca:	e000      	b.n	80297ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80297cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80297ce:	68fb      	ldr	r3, [r7, #12]
 80297d0:	2201      	movs	r2, #1
 80297d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80297d6:	68fb      	ldr	r3, [r7, #12]
 80297d8:	2200      	movs	r2, #0
 80297da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80297de:	2300      	movs	r3, #0
}
 80297e0:	4618      	mov	r0, r3
 80297e2:	3710      	adds	r7, #16
 80297e4:	46bd      	mov	sp, r7
 80297e6:	bd80      	pop	{r7, pc}

080297e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80297e8:	b580      	push	{r7, lr}
 80297ea:	b084      	sub	sp, #16
 80297ec:	af00      	add	r7, sp, #0
 80297ee:	6078      	str	r0, [r7, #4]
 80297f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80297f2:	687b      	ldr	r3, [r7, #4]
 80297f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80297f8:	2b01      	cmp	r3, #1
 80297fa:	d101      	bne.n	8029800 <HAL_TIM_ConfigClockSource+0x18>
 80297fc:	2302      	movs	r3, #2
 80297fe:	e0a6      	b.n	802994e <HAL_TIM_ConfigClockSource+0x166>
 8029800:	687b      	ldr	r3, [r7, #4]
 8029802:	2201      	movs	r2, #1
 8029804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029808:	687b      	ldr	r3, [r7, #4]
 802980a:	2202      	movs	r2, #2
 802980c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8029810:	687b      	ldr	r3, [r7, #4]
 8029812:	681b      	ldr	r3, [r3, #0]
 8029814:	689b      	ldr	r3, [r3, #8]
 8029816:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8029818:	68fb      	ldr	r3, [r7, #12]
 802981a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802981e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029820:	68fb      	ldr	r3, [r7, #12]
 8029822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029826:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8029828:	687b      	ldr	r3, [r7, #4]
 802982a:	681b      	ldr	r3, [r3, #0]
 802982c:	68fa      	ldr	r2, [r7, #12]
 802982e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8029830:	683b      	ldr	r3, [r7, #0]
 8029832:	681b      	ldr	r3, [r3, #0]
 8029834:	2b40      	cmp	r3, #64	; 0x40
 8029836:	d067      	beq.n	8029908 <HAL_TIM_ConfigClockSource+0x120>
 8029838:	2b40      	cmp	r3, #64	; 0x40
 802983a:	d80b      	bhi.n	8029854 <HAL_TIM_ConfigClockSource+0x6c>
 802983c:	2b10      	cmp	r3, #16
 802983e:	d073      	beq.n	8029928 <HAL_TIM_ConfigClockSource+0x140>
 8029840:	2b10      	cmp	r3, #16
 8029842:	d802      	bhi.n	802984a <HAL_TIM_ConfigClockSource+0x62>
 8029844:	2b00      	cmp	r3, #0
 8029846:	d06f      	beq.n	8029928 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8029848:	e078      	b.n	802993c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802984a:	2b20      	cmp	r3, #32
 802984c:	d06c      	beq.n	8029928 <HAL_TIM_ConfigClockSource+0x140>
 802984e:	2b30      	cmp	r3, #48	; 0x30
 8029850:	d06a      	beq.n	8029928 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8029852:	e073      	b.n	802993c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029854:	2b70      	cmp	r3, #112	; 0x70
 8029856:	d00d      	beq.n	8029874 <HAL_TIM_ConfigClockSource+0x8c>
 8029858:	2b70      	cmp	r3, #112	; 0x70
 802985a:	d804      	bhi.n	8029866 <HAL_TIM_ConfigClockSource+0x7e>
 802985c:	2b50      	cmp	r3, #80	; 0x50
 802985e:	d033      	beq.n	80298c8 <HAL_TIM_ConfigClockSource+0xe0>
 8029860:	2b60      	cmp	r3, #96	; 0x60
 8029862:	d041      	beq.n	80298e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8029864:	e06a      	b.n	802993c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802986a:	d066      	beq.n	802993a <HAL_TIM_ConfigClockSource+0x152>
 802986c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029870:	d017      	beq.n	80298a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8029872:	e063      	b.n	802993c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8029874:	687b      	ldr	r3, [r7, #4]
 8029876:	6818      	ldr	r0, [r3, #0]
 8029878:	683b      	ldr	r3, [r7, #0]
 802987a:	6899      	ldr	r1, [r3, #8]
 802987c:	683b      	ldr	r3, [r7, #0]
 802987e:	685a      	ldr	r2, [r3, #4]
 8029880:	683b      	ldr	r3, [r7, #0]
 8029882:	68db      	ldr	r3, [r3, #12]
 8029884:	f000 fb5a 	bl	8029f3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8029888:	687b      	ldr	r3, [r7, #4]
 802988a:	681b      	ldr	r3, [r3, #0]
 802988c:	689b      	ldr	r3, [r3, #8]
 802988e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8029890:	68fb      	ldr	r3, [r7, #12]
 8029892:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8029896:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8029898:	687b      	ldr	r3, [r7, #4]
 802989a:	681b      	ldr	r3, [r3, #0]
 802989c:	68fa      	ldr	r2, [r7, #12]
 802989e:	609a      	str	r2, [r3, #8]
      break;
 80298a0:	e04c      	b.n	802993c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80298a2:	687b      	ldr	r3, [r7, #4]
 80298a4:	6818      	ldr	r0, [r3, #0]
 80298a6:	683b      	ldr	r3, [r7, #0]
 80298a8:	6899      	ldr	r1, [r3, #8]
 80298aa:	683b      	ldr	r3, [r7, #0]
 80298ac:	685a      	ldr	r2, [r3, #4]
 80298ae:	683b      	ldr	r3, [r7, #0]
 80298b0:	68db      	ldr	r3, [r3, #12]
 80298b2:	f000 fb43 	bl	8029f3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80298b6:	687b      	ldr	r3, [r7, #4]
 80298b8:	681b      	ldr	r3, [r3, #0]
 80298ba:	689a      	ldr	r2, [r3, #8]
 80298bc:	687b      	ldr	r3, [r7, #4]
 80298be:	681b      	ldr	r3, [r3, #0]
 80298c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80298c4:	609a      	str	r2, [r3, #8]
      break;
 80298c6:	e039      	b.n	802993c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80298c8:	687b      	ldr	r3, [r7, #4]
 80298ca:	6818      	ldr	r0, [r3, #0]
 80298cc:	683b      	ldr	r3, [r7, #0]
 80298ce:	6859      	ldr	r1, [r3, #4]
 80298d0:	683b      	ldr	r3, [r7, #0]
 80298d2:	68db      	ldr	r3, [r3, #12]
 80298d4:	461a      	mov	r2, r3
 80298d6:	f000 fab7 	bl	8029e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80298da:	687b      	ldr	r3, [r7, #4]
 80298dc:	681b      	ldr	r3, [r3, #0]
 80298de:	2150      	movs	r1, #80	; 0x50
 80298e0:	4618      	mov	r0, r3
 80298e2:	f000 fb10 	bl	8029f06 <TIM_ITRx_SetConfig>
      break;
 80298e6:	e029      	b.n	802993c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80298e8:	687b      	ldr	r3, [r7, #4]
 80298ea:	6818      	ldr	r0, [r3, #0]
 80298ec:	683b      	ldr	r3, [r7, #0]
 80298ee:	6859      	ldr	r1, [r3, #4]
 80298f0:	683b      	ldr	r3, [r7, #0]
 80298f2:	68db      	ldr	r3, [r3, #12]
 80298f4:	461a      	mov	r2, r3
 80298f6:	f000 fad6 	bl	8029ea6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80298fa:	687b      	ldr	r3, [r7, #4]
 80298fc:	681b      	ldr	r3, [r3, #0]
 80298fe:	2160      	movs	r1, #96	; 0x60
 8029900:	4618      	mov	r0, r3
 8029902:	f000 fb00 	bl	8029f06 <TIM_ITRx_SetConfig>
      break;
 8029906:	e019      	b.n	802993c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8029908:	687b      	ldr	r3, [r7, #4]
 802990a:	6818      	ldr	r0, [r3, #0]
 802990c:	683b      	ldr	r3, [r7, #0]
 802990e:	6859      	ldr	r1, [r3, #4]
 8029910:	683b      	ldr	r3, [r7, #0]
 8029912:	68db      	ldr	r3, [r3, #12]
 8029914:	461a      	mov	r2, r3
 8029916:	f000 fa97 	bl	8029e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802991a:	687b      	ldr	r3, [r7, #4]
 802991c:	681b      	ldr	r3, [r3, #0]
 802991e:	2140      	movs	r1, #64	; 0x40
 8029920:	4618      	mov	r0, r3
 8029922:	f000 faf0 	bl	8029f06 <TIM_ITRx_SetConfig>
      break;
 8029926:	e009      	b.n	802993c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8029928:	687b      	ldr	r3, [r7, #4]
 802992a:	681a      	ldr	r2, [r3, #0]
 802992c:	683b      	ldr	r3, [r7, #0]
 802992e:	681b      	ldr	r3, [r3, #0]
 8029930:	4619      	mov	r1, r3
 8029932:	4610      	mov	r0, r2
 8029934:	f000 fae7 	bl	8029f06 <TIM_ITRx_SetConfig>
      break;
 8029938:	e000      	b.n	802993c <HAL_TIM_ConfigClockSource+0x154>
      break;
 802993a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802993c:	687b      	ldr	r3, [r7, #4]
 802993e:	2201      	movs	r2, #1
 8029940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029944:	687b      	ldr	r3, [r7, #4]
 8029946:	2200      	movs	r2, #0
 8029948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802994c:	2300      	movs	r3, #0
}
 802994e:	4618      	mov	r0, r3
 8029950:	3710      	adds	r7, #16
 8029952:	46bd      	mov	sp, r7
 8029954:	bd80      	pop	{r7, pc}

08029956 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8029956:	b480      	push	{r7}
 8029958:	b083      	sub	sp, #12
 802995a:	af00      	add	r7, sp, #0
 802995c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802995e:	bf00      	nop
 8029960:	370c      	adds	r7, #12
 8029962:	46bd      	mov	sp, r7
 8029964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029968:	4770      	bx	lr

0802996a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802996a:	b480      	push	{r7}
 802996c:	b083      	sub	sp, #12
 802996e:	af00      	add	r7, sp, #0
 8029970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8029972:	bf00      	nop
 8029974:	370c      	adds	r7, #12
 8029976:	46bd      	mov	sp, r7
 8029978:	f85d 7b04 	ldr.w	r7, [sp], #4
 802997c:	4770      	bx	lr

0802997e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802997e:	b480      	push	{r7}
 8029980:	b083      	sub	sp, #12
 8029982:	af00      	add	r7, sp, #0
 8029984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8029986:	bf00      	nop
 8029988:	370c      	adds	r7, #12
 802998a:	46bd      	mov	sp, r7
 802998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029990:	4770      	bx	lr

08029992 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8029992:	b480      	push	{r7}
 8029994:	b083      	sub	sp, #12
 8029996:	af00      	add	r7, sp, #0
 8029998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802999a:	bf00      	nop
 802999c:	370c      	adds	r7, #12
 802999e:	46bd      	mov	sp, r7
 80299a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80299a4:	4770      	bx	lr
	...

080299a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80299a8:	b480      	push	{r7}
 80299aa:	b085      	sub	sp, #20
 80299ac:	af00      	add	r7, sp, #0
 80299ae:	6078      	str	r0, [r7, #4]
 80299b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80299b2:	687b      	ldr	r3, [r7, #4]
 80299b4:	681b      	ldr	r3, [r3, #0]
 80299b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80299b8:	687b      	ldr	r3, [r7, #4]
 80299ba:	4a40      	ldr	r2, [pc, #256]	; (8029abc <TIM_Base_SetConfig+0x114>)
 80299bc:	4293      	cmp	r3, r2
 80299be:	d013      	beq.n	80299e8 <TIM_Base_SetConfig+0x40>
 80299c0:	687b      	ldr	r3, [r7, #4]
 80299c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80299c6:	d00f      	beq.n	80299e8 <TIM_Base_SetConfig+0x40>
 80299c8:	687b      	ldr	r3, [r7, #4]
 80299ca:	4a3d      	ldr	r2, [pc, #244]	; (8029ac0 <TIM_Base_SetConfig+0x118>)
 80299cc:	4293      	cmp	r3, r2
 80299ce:	d00b      	beq.n	80299e8 <TIM_Base_SetConfig+0x40>
 80299d0:	687b      	ldr	r3, [r7, #4]
 80299d2:	4a3c      	ldr	r2, [pc, #240]	; (8029ac4 <TIM_Base_SetConfig+0x11c>)
 80299d4:	4293      	cmp	r3, r2
 80299d6:	d007      	beq.n	80299e8 <TIM_Base_SetConfig+0x40>
 80299d8:	687b      	ldr	r3, [r7, #4]
 80299da:	4a3b      	ldr	r2, [pc, #236]	; (8029ac8 <TIM_Base_SetConfig+0x120>)
 80299dc:	4293      	cmp	r3, r2
 80299de:	d003      	beq.n	80299e8 <TIM_Base_SetConfig+0x40>
 80299e0:	687b      	ldr	r3, [r7, #4]
 80299e2:	4a3a      	ldr	r2, [pc, #232]	; (8029acc <TIM_Base_SetConfig+0x124>)
 80299e4:	4293      	cmp	r3, r2
 80299e6:	d108      	bne.n	80299fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80299e8:	68fb      	ldr	r3, [r7, #12]
 80299ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80299ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80299f0:	683b      	ldr	r3, [r7, #0]
 80299f2:	685b      	ldr	r3, [r3, #4]
 80299f4:	68fa      	ldr	r2, [r7, #12]
 80299f6:	4313      	orrs	r3, r2
 80299f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80299fa:	687b      	ldr	r3, [r7, #4]
 80299fc:	4a2f      	ldr	r2, [pc, #188]	; (8029abc <TIM_Base_SetConfig+0x114>)
 80299fe:	4293      	cmp	r3, r2
 8029a00:	d02b      	beq.n	8029a5a <TIM_Base_SetConfig+0xb2>
 8029a02:	687b      	ldr	r3, [r7, #4]
 8029a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029a08:	d027      	beq.n	8029a5a <TIM_Base_SetConfig+0xb2>
 8029a0a:	687b      	ldr	r3, [r7, #4]
 8029a0c:	4a2c      	ldr	r2, [pc, #176]	; (8029ac0 <TIM_Base_SetConfig+0x118>)
 8029a0e:	4293      	cmp	r3, r2
 8029a10:	d023      	beq.n	8029a5a <TIM_Base_SetConfig+0xb2>
 8029a12:	687b      	ldr	r3, [r7, #4]
 8029a14:	4a2b      	ldr	r2, [pc, #172]	; (8029ac4 <TIM_Base_SetConfig+0x11c>)
 8029a16:	4293      	cmp	r3, r2
 8029a18:	d01f      	beq.n	8029a5a <TIM_Base_SetConfig+0xb2>
 8029a1a:	687b      	ldr	r3, [r7, #4]
 8029a1c:	4a2a      	ldr	r2, [pc, #168]	; (8029ac8 <TIM_Base_SetConfig+0x120>)
 8029a1e:	4293      	cmp	r3, r2
 8029a20:	d01b      	beq.n	8029a5a <TIM_Base_SetConfig+0xb2>
 8029a22:	687b      	ldr	r3, [r7, #4]
 8029a24:	4a29      	ldr	r2, [pc, #164]	; (8029acc <TIM_Base_SetConfig+0x124>)
 8029a26:	4293      	cmp	r3, r2
 8029a28:	d017      	beq.n	8029a5a <TIM_Base_SetConfig+0xb2>
 8029a2a:	687b      	ldr	r3, [r7, #4]
 8029a2c:	4a28      	ldr	r2, [pc, #160]	; (8029ad0 <TIM_Base_SetConfig+0x128>)
 8029a2e:	4293      	cmp	r3, r2
 8029a30:	d013      	beq.n	8029a5a <TIM_Base_SetConfig+0xb2>
 8029a32:	687b      	ldr	r3, [r7, #4]
 8029a34:	4a27      	ldr	r2, [pc, #156]	; (8029ad4 <TIM_Base_SetConfig+0x12c>)
 8029a36:	4293      	cmp	r3, r2
 8029a38:	d00f      	beq.n	8029a5a <TIM_Base_SetConfig+0xb2>
 8029a3a:	687b      	ldr	r3, [r7, #4]
 8029a3c:	4a26      	ldr	r2, [pc, #152]	; (8029ad8 <TIM_Base_SetConfig+0x130>)
 8029a3e:	4293      	cmp	r3, r2
 8029a40:	d00b      	beq.n	8029a5a <TIM_Base_SetConfig+0xb2>
 8029a42:	687b      	ldr	r3, [r7, #4]
 8029a44:	4a25      	ldr	r2, [pc, #148]	; (8029adc <TIM_Base_SetConfig+0x134>)
 8029a46:	4293      	cmp	r3, r2
 8029a48:	d007      	beq.n	8029a5a <TIM_Base_SetConfig+0xb2>
 8029a4a:	687b      	ldr	r3, [r7, #4]
 8029a4c:	4a24      	ldr	r2, [pc, #144]	; (8029ae0 <TIM_Base_SetConfig+0x138>)
 8029a4e:	4293      	cmp	r3, r2
 8029a50:	d003      	beq.n	8029a5a <TIM_Base_SetConfig+0xb2>
 8029a52:	687b      	ldr	r3, [r7, #4]
 8029a54:	4a23      	ldr	r2, [pc, #140]	; (8029ae4 <TIM_Base_SetConfig+0x13c>)
 8029a56:	4293      	cmp	r3, r2
 8029a58:	d108      	bne.n	8029a6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8029a5a:	68fb      	ldr	r3, [r7, #12]
 8029a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8029a62:	683b      	ldr	r3, [r7, #0]
 8029a64:	68db      	ldr	r3, [r3, #12]
 8029a66:	68fa      	ldr	r2, [r7, #12]
 8029a68:	4313      	orrs	r3, r2
 8029a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8029a6c:	68fb      	ldr	r3, [r7, #12]
 8029a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8029a72:	683b      	ldr	r3, [r7, #0]
 8029a74:	695b      	ldr	r3, [r3, #20]
 8029a76:	4313      	orrs	r3, r2
 8029a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8029a7a:	687b      	ldr	r3, [r7, #4]
 8029a7c:	68fa      	ldr	r2, [r7, #12]
 8029a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8029a80:	683b      	ldr	r3, [r7, #0]
 8029a82:	689a      	ldr	r2, [r3, #8]
 8029a84:	687b      	ldr	r3, [r7, #4]
 8029a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8029a88:	683b      	ldr	r3, [r7, #0]
 8029a8a:	681a      	ldr	r2, [r3, #0]
 8029a8c:	687b      	ldr	r3, [r7, #4]
 8029a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8029a90:	687b      	ldr	r3, [r7, #4]
 8029a92:	4a0a      	ldr	r2, [pc, #40]	; (8029abc <TIM_Base_SetConfig+0x114>)
 8029a94:	4293      	cmp	r3, r2
 8029a96:	d003      	beq.n	8029aa0 <TIM_Base_SetConfig+0xf8>
 8029a98:	687b      	ldr	r3, [r7, #4]
 8029a9a:	4a0c      	ldr	r2, [pc, #48]	; (8029acc <TIM_Base_SetConfig+0x124>)
 8029a9c:	4293      	cmp	r3, r2
 8029a9e:	d103      	bne.n	8029aa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8029aa0:	683b      	ldr	r3, [r7, #0]
 8029aa2:	691a      	ldr	r2, [r3, #16]
 8029aa4:	687b      	ldr	r3, [r7, #4]
 8029aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8029aa8:	687b      	ldr	r3, [r7, #4]
 8029aaa:	2201      	movs	r2, #1
 8029aac:	615a      	str	r2, [r3, #20]
}
 8029aae:	bf00      	nop
 8029ab0:	3714      	adds	r7, #20
 8029ab2:	46bd      	mov	sp, r7
 8029ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ab8:	4770      	bx	lr
 8029aba:	bf00      	nop
 8029abc:	40010000 	.word	0x40010000
 8029ac0:	40000400 	.word	0x40000400
 8029ac4:	40000800 	.word	0x40000800
 8029ac8:	40000c00 	.word	0x40000c00
 8029acc:	40010400 	.word	0x40010400
 8029ad0:	40014000 	.word	0x40014000
 8029ad4:	40014400 	.word	0x40014400
 8029ad8:	40014800 	.word	0x40014800
 8029adc:	40001800 	.word	0x40001800
 8029ae0:	40001c00 	.word	0x40001c00
 8029ae4:	40002000 	.word	0x40002000

08029ae8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029ae8:	b480      	push	{r7}
 8029aea:	b087      	sub	sp, #28
 8029aec:	af00      	add	r7, sp, #0
 8029aee:	6078      	str	r0, [r7, #4]
 8029af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029af2:	687b      	ldr	r3, [r7, #4]
 8029af4:	6a1b      	ldr	r3, [r3, #32]
 8029af6:	f023 0201 	bic.w	r2, r3, #1
 8029afa:	687b      	ldr	r3, [r7, #4]
 8029afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029afe:	687b      	ldr	r3, [r7, #4]
 8029b00:	6a1b      	ldr	r3, [r3, #32]
 8029b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029b04:	687b      	ldr	r3, [r7, #4]
 8029b06:	685b      	ldr	r3, [r3, #4]
 8029b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029b0a:	687b      	ldr	r3, [r7, #4]
 8029b0c:	699b      	ldr	r3, [r3, #24]
 8029b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8029b10:	68fb      	ldr	r3, [r7, #12]
 8029b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8029b18:	68fb      	ldr	r3, [r7, #12]
 8029b1a:	f023 0303 	bic.w	r3, r3, #3
 8029b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029b20:	683b      	ldr	r3, [r7, #0]
 8029b22:	681b      	ldr	r3, [r3, #0]
 8029b24:	68fa      	ldr	r2, [r7, #12]
 8029b26:	4313      	orrs	r3, r2
 8029b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8029b2a:	697b      	ldr	r3, [r7, #20]
 8029b2c:	f023 0302 	bic.w	r3, r3, #2
 8029b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8029b32:	683b      	ldr	r3, [r7, #0]
 8029b34:	689b      	ldr	r3, [r3, #8]
 8029b36:	697a      	ldr	r2, [r7, #20]
 8029b38:	4313      	orrs	r3, r2
 8029b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8029b3c:	687b      	ldr	r3, [r7, #4]
 8029b3e:	4a20      	ldr	r2, [pc, #128]	; (8029bc0 <TIM_OC1_SetConfig+0xd8>)
 8029b40:	4293      	cmp	r3, r2
 8029b42:	d003      	beq.n	8029b4c <TIM_OC1_SetConfig+0x64>
 8029b44:	687b      	ldr	r3, [r7, #4]
 8029b46:	4a1f      	ldr	r2, [pc, #124]	; (8029bc4 <TIM_OC1_SetConfig+0xdc>)
 8029b48:	4293      	cmp	r3, r2
 8029b4a:	d10c      	bne.n	8029b66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8029b4c:	697b      	ldr	r3, [r7, #20]
 8029b4e:	f023 0308 	bic.w	r3, r3, #8
 8029b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8029b54:	683b      	ldr	r3, [r7, #0]
 8029b56:	68db      	ldr	r3, [r3, #12]
 8029b58:	697a      	ldr	r2, [r7, #20]
 8029b5a:	4313      	orrs	r3, r2
 8029b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8029b5e:	697b      	ldr	r3, [r7, #20]
 8029b60:	f023 0304 	bic.w	r3, r3, #4
 8029b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029b66:	687b      	ldr	r3, [r7, #4]
 8029b68:	4a15      	ldr	r2, [pc, #84]	; (8029bc0 <TIM_OC1_SetConfig+0xd8>)
 8029b6a:	4293      	cmp	r3, r2
 8029b6c:	d003      	beq.n	8029b76 <TIM_OC1_SetConfig+0x8e>
 8029b6e:	687b      	ldr	r3, [r7, #4]
 8029b70:	4a14      	ldr	r2, [pc, #80]	; (8029bc4 <TIM_OC1_SetConfig+0xdc>)
 8029b72:	4293      	cmp	r3, r2
 8029b74:	d111      	bne.n	8029b9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8029b76:	693b      	ldr	r3, [r7, #16]
 8029b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8029b7e:	693b      	ldr	r3, [r7, #16]
 8029b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8029b86:	683b      	ldr	r3, [r7, #0]
 8029b88:	695b      	ldr	r3, [r3, #20]
 8029b8a:	693a      	ldr	r2, [r7, #16]
 8029b8c:	4313      	orrs	r3, r2
 8029b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8029b90:	683b      	ldr	r3, [r7, #0]
 8029b92:	699b      	ldr	r3, [r3, #24]
 8029b94:	693a      	ldr	r2, [r7, #16]
 8029b96:	4313      	orrs	r3, r2
 8029b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029b9a:	687b      	ldr	r3, [r7, #4]
 8029b9c:	693a      	ldr	r2, [r7, #16]
 8029b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029ba0:	687b      	ldr	r3, [r7, #4]
 8029ba2:	68fa      	ldr	r2, [r7, #12]
 8029ba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8029ba6:	683b      	ldr	r3, [r7, #0]
 8029ba8:	685a      	ldr	r2, [r3, #4]
 8029baa:	687b      	ldr	r3, [r7, #4]
 8029bac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029bae:	687b      	ldr	r3, [r7, #4]
 8029bb0:	697a      	ldr	r2, [r7, #20]
 8029bb2:	621a      	str	r2, [r3, #32]
}
 8029bb4:	bf00      	nop
 8029bb6:	371c      	adds	r7, #28
 8029bb8:	46bd      	mov	sp, r7
 8029bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bbe:	4770      	bx	lr
 8029bc0:	40010000 	.word	0x40010000
 8029bc4:	40010400 	.word	0x40010400

08029bc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029bc8:	b480      	push	{r7}
 8029bca:	b087      	sub	sp, #28
 8029bcc:	af00      	add	r7, sp, #0
 8029bce:	6078      	str	r0, [r7, #4]
 8029bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029bd2:	687b      	ldr	r3, [r7, #4]
 8029bd4:	6a1b      	ldr	r3, [r3, #32]
 8029bd6:	f023 0210 	bic.w	r2, r3, #16
 8029bda:	687b      	ldr	r3, [r7, #4]
 8029bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029bde:	687b      	ldr	r3, [r7, #4]
 8029be0:	6a1b      	ldr	r3, [r3, #32]
 8029be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029be4:	687b      	ldr	r3, [r7, #4]
 8029be6:	685b      	ldr	r3, [r3, #4]
 8029be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029bea:	687b      	ldr	r3, [r7, #4]
 8029bec:	699b      	ldr	r3, [r3, #24]
 8029bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8029bf0:	68fb      	ldr	r3, [r7, #12]
 8029bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8029bf8:	68fb      	ldr	r3, [r7, #12]
 8029bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029c00:	683b      	ldr	r3, [r7, #0]
 8029c02:	681b      	ldr	r3, [r3, #0]
 8029c04:	021b      	lsls	r3, r3, #8
 8029c06:	68fa      	ldr	r2, [r7, #12]
 8029c08:	4313      	orrs	r3, r2
 8029c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8029c0c:	697b      	ldr	r3, [r7, #20]
 8029c0e:	f023 0320 	bic.w	r3, r3, #32
 8029c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8029c14:	683b      	ldr	r3, [r7, #0]
 8029c16:	689b      	ldr	r3, [r3, #8]
 8029c18:	011b      	lsls	r3, r3, #4
 8029c1a:	697a      	ldr	r2, [r7, #20]
 8029c1c:	4313      	orrs	r3, r2
 8029c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8029c20:	687b      	ldr	r3, [r7, #4]
 8029c22:	4a22      	ldr	r2, [pc, #136]	; (8029cac <TIM_OC2_SetConfig+0xe4>)
 8029c24:	4293      	cmp	r3, r2
 8029c26:	d003      	beq.n	8029c30 <TIM_OC2_SetConfig+0x68>
 8029c28:	687b      	ldr	r3, [r7, #4]
 8029c2a:	4a21      	ldr	r2, [pc, #132]	; (8029cb0 <TIM_OC2_SetConfig+0xe8>)
 8029c2c:	4293      	cmp	r3, r2
 8029c2e:	d10d      	bne.n	8029c4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8029c30:	697b      	ldr	r3, [r7, #20]
 8029c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8029c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8029c38:	683b      	ldr	r3, [r7, #0]
 8029c3a:	68db      	ldr	r3, [r3, #12]
 8029c3c:	011b      	lsls	r3, r3, #4
 8029c3e:	697a      	ldr	r2, [r7, #20]
 8029c40:	4313      	orrs	r3, r2
 8029c42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8029c44:	697b      	ldr	r3, [r7, #20]
 8029c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029c4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029c4c:	687b      	ldr	r3, [r7, #4]
 8029c4e:	4a17      	ldr	r2, [pc, #92]	; (8029cac <TIM_OC2_SetConfig+0xe4>)
 8029c50:	4293      	cmp	r3, r2
 8029c52:	d003      	beq.n	8029c5c <TIM_OC2_SetConfig+0x94>
 8029c54:	687b      	ldr	r3, [r7, #4]
 8029c56:	4a16      	ldr	r2, [pc, #88]	; (8029cb0 <TIM_OC2_SetConfig+0xe8>)
 8029c58:	4293      	cmp	r3, r2
 8029c5a:	d113      	bne.n	8029c84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8029c5c:	693b      	ldr	r3, [r7, #16]
 8029c5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8029c62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8029c64:	693b      	ldr	r3, [r7, #16]
 8029c66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8029c6c:	683b      	ldr	r3, [r7, #0]
 8029c6e:	695b      	ldr	r3, [r3, #20]
 8029c70:	009b      	lsls	r3, r3, #2
 8029c72:	693a      	ldr	r2, [r7, #16]
 8029c74:	4313      	orrs	r3, r2
 8029c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8029c78:	683b      	ldr	r3, [r7, #0]
 8029c7a:	699b      	ldr	r3, [r3, #24]
 8029c7c:	009b      	lsls	r3, r3, #2
 8029c7e:	693a      	ldr	r2, [r7, #16]
 8029c80:	4313      	orrs	r3, r2
 8029c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029c84:	687b      	ldr	r3, [r7, #4]
 8029c86:	693a      	ldr	r2, [r7, #16]
 8029c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029c8a:	687b      	ldr	r3, [r7, #4]
 8029c8c:	68fa      	ldr	r2, [r7, #12]
 8029c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8029c90:	683b      	ldr	r3, [r7, #0]
 8029c92:	685a      	ldr	r2, [r3, #4]
 8029c94:	687b      	ldr	r3, [r7, #4]
 8029c96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029c98:	687b      	ldr	r3, [r7, #4]
 8029c9a:	697a      	ldr	r2, [r7, #20]
 8029c9c:	621a      	str	r2, [r3, #32]
}
 8029c9e:	bf00      	nop
 8029ca0:	371c      	adds	r7, #28
 8029ca2:	46bd      	mov	sp, r7
 8029ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ca8:	4770      	bx	lr
 8029caa:	bf00      	nop
 8029cac:	40010000 	.word	0x40010000
 8029cb0:	40010400 	.word	0x40010400

08029cb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029cb4:	b480      	push	{r7}
 8029cb6:	b087      	sub	sp, #28
 8029cb8:	af00      	add	r7, sp, #0
 8029cba:	6078      	str	r0, [r7, #4]
 8029cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8029cbe:	687b      	ldr	r3, [r7, #4]
 8029cc0:	6a1b      	ldr	r3, [r3, #32]
 8029cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8029cc6:	687b      	ldr	r3, [r7, #4]
 8029cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029cca:	687b      	ldr	r3, [r7, #4]
 8029ccc:	6a1b      	ldr	r3, [r3, #32]
 8029cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029cd0:	687b      	ldr	r3, [r7, #4]
 8029cd2:	685b      	ldr	r3, [r3, #4]
 8029cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8029cd6:	687b      	ldr	r3, [r7, #4]
 8029cd8:	69db      	ldr	r3, [r3, #28]
 8029cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8029cdc:	68fb      	ldr	r3, [r7, #12]
 8029cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8029ce4:	68fb      	ldr	r3, [r7, #12]
 8029ce6:	f023 0303 	bic.w	r3, r3, #3
 8029cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029cec:	683b      	ldr	r3, [r7, #0]
 8029cee:	681b      	ldr	r3, [r3, #0]
 8029cf0:	68fa      	ldr	r2, [r7, #12]
 8029cf2:	4313      	orrs	r3, r2
 8029cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8029cf6:	697b      	ldr	r3, [r7, #20]
 8029cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8029cfe:	683b      	ldr	r3, [r7, #0]
 8029d00:	689b      	ldr	r3, [r3, #8]
 8029d02:	021b      	lsls	r3, r3, #8
 8029d04:	697a      	ldr	r2, [r7, #20]
 8029d06:	4313      	orrs	r3, r2
 8029d08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8029d0a:	687b      	ldr	r3, [r7, #4]
 8029d0c:	4a21      	ldr	r2, [pc, #132]	; (8029d94 <TIM_OC3_SetConfig+0xe0>)
 8029d0e:	4293      	cmp	r3, r2
 8029d10:	d003      	beq.n	8029d1a <TIM_OC3_SetConfig+0x66>
 8029d12:	687b      	ldr	r3, [r7, #4]
 8029d14:	4a20      	ldr	r2, [pc, #128]	; (8029d98 <TIM_OC3_SetConfig+0xe4>)
 8029d16:	4293      	cmp	r3, r2
 8029d18:	d10d      	bne.n	8029d36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8029d1a:	697b      	ldr	r3, [r7, #20]
 8029d1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029d20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8029d22:	683b      	ldr	r3, [r7, #0]
 8029d24:	68db      	ldr	r3, [r3, #12]
 8029d26:	021b      	lsls	r3, r3, #8
 8029d28:	697a      	ldr	r2, [r7, #20]
 8029d2a:	4313      	orrs	r3, r2
 8029d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8029d2e:	697b      	ldr	r3, [r7, #20]
 8029d30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8029d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029d36:	687b      	ldr	r3, [r7, #4]
 8029d38:	4a16      	ldr	r2, [pc, #88]	; (8029d94 <TIM_OC3_SetConfig+0xe0>)
 8029d3a:	4293      	cmp	r3, r2
 8029d3c:	d003      	beq.n	8029d46 <TIM_OC3_SetConfig+0x92>
 8029d3e:	687b      	ldr	r3, [r7, #4]
 8029d40:	4a15      	ldr	r2, [pc, #84]	; (8029d98 <TIM_OC3_SetConfig+0xe4>)
 8029d42:	4293      	cmp	r3, r2
 8029d44:	d113      	bne.n	8029d6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8029d46:	693b      	ldr	r3, [r7, #16]
 8029d48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8029d4e:	693b      	ldr	r3, [r7, #16]
 8029d50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8029d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8029d56:	683b      	ldr	r3, [r7, #0]
 8029d58:	695b      	ldr	r3, [r3, #20]
 8029d5a:	011b      	lsls	r3, r3, #4
 8029d5c:	693a      	ldr	r2, [r7, #16]
 8029d5e:	4313      	orrs	r3, r2
 8029d60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8029d62:	683b      	ldr	r3, [r7, #0]
 8029d64:	699b      	ldr	r3, [r3, #24]
 8029d66:	011b      	lsls	r3, r3, #4
 8029d68:	693a      	ldr	r2, [r7, #16]
 8029d6a:	4313      	orrs	r3, r2
 8029d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029d6e:	687b      	ldr	r3, [r7, #4]
 8029d70:	693a      	ldr	r2, [r7, #16]
 8029d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8029d74:	687b      	ldr	r3, [r7, #4]
 8029d76:	68fa      	ldr	r2, [r7, #12]
 8029d78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8029d7a:	683b      	ldr	r3, [r7, #0]
 8029d7c:	685a      	ldr	r2, [r3, #4]
 8029d7e:	687b      	ldr	r3, [r7, #4]
 8029d80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029d82:	687b      	ldr	r3, [r7, #4]
 8029d84:	697a      	ldr	r2, [r7, #20]
 8029d86:	621a      	str	r2, [r3, #32]
}
 8029d88:	bf00      	nop
 8029d8a:	371c      	adds	r7, #28
 8029d8c:	46bd      	mov	sp, r7
 8029d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d92:	4770      	bx	lr
 8029d94:	40010000 	.word	0x40010000
 8029d98:	40010400 	.word	0x40010400

08029d9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029d9c:	b480      	push	{r7}
 8029d9e:	b087      	sub	sp, #28
 8029da0:	af00      	add	r7, sp, #0
 8029da2:	6078      	str	r0, [r7, #4]
 8029da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8029da6:	687b      	ldr	r3, [r7, #4]
 8029da8:	6a1b      	ldr	r3, [r3, #32]
 8029daa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8029dae:	687b      	ldr	r3, [r7, #4]
 8029db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029db2:	687b      	ldr	r3, [r7, #4]
 8029db4:	6a1b      	ldr	r3, [r3, #32]
 8029db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029db8:	687b      	ldr	r3, [r7, #4]
 8029dba:	685b      	ldr	r3, [r3, #4]
 8029dbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8029dbe:	687b      	ldr	r3, [r7, #4]
 8029dc0:	69db      	ldr	r3, [r3, #28]
 8029dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8029dc4:	68fb      	ldr	r3, [r7, #12]
 8029dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8029dcc:	68fb      	ldr	r3, [r7, #12]
 8029dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029dd4:	683b      	ldr	r3, [r7, #0]
 8029dd6:	681b      	ldr	r3, [r3, #0]
 8029dd8:	021b      	lsls	r3, r3, #8
 8029dda:	68fa      	ldr	r2, [r7, #12]
 8029ddc:	4313      	orrs	r3, r2
 8029dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8029de0:	693b      	ldr	r3, [r7, #16]
 8029de2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8029de6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8029de8:	683b      	ldr	r3, [r7, #0]
 8029dea:	689b      	ldr	r3, [r3, #8]
 8029dec:	031b      	lsls	r3, r3, #12
 8029dee:	693a      	ldr	r2, [r7, #16]
 8029df0:	4313      	orrs	r3, r2
 8029df2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029df4:	687b      	ldr	r3, [r7, #4]
 8029df6:	4a12      	ldr	r2, [pc, #72]	; (8029e40 <TIM_OC4_SetConfig+0xa4>)
 8029df8:	4293      	cmp	r3, r2
 8029dfa:	d003      	beq.n	8029e04 <TIM_OC4_SetConfig+0x68>
 8029dfc:	687b      	ldr	r3, [r7, #4]
 8029dfe:	4a11      	ldr	r2, [pc, #68]	; (8029e44 <TIM_OC4_SetConfig+0xa8>)
 8029e00:	4293      	cmp	r3, r2
 8029e02:	d109      	bne.n	8029e18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8029e04:	697b      	ldr	r3, [r7, #20]
 8029e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029e0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8029e0c:	683b      	ldr	r3, [r7, #0]
 8029e0e:	695b      	ldr	r3, [r3, #20]
 8029e10:	019b      	lsls	r3, r3, #6
 8029e12:	697a      	ldr	r2, [r7, #20]
 8029e14:	4313      	orrs	r3, r2
 8029e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029e18:	687b      	ldr	r3, [r7, #4]
 8029e1a:	697a      	ldr	r2, [r7, #20]
 8029e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8029e1e:	687b      	ldr	r3, [r7, #4]
 8029e20:	68fa      	ldr	r2, [r7, #12]
 8029e22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8029e24:	683b      	ldr	r3, [r7, #0]
 8029e26:	685a      	ldr	r2, [r3, #4]
 8029e28:	687b      	ldr	r3, [r7, #4]
 8029e2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029e2c:	687b      	ldr	r3, [r7, #4]
 8029e2e:	693a      	ldr	r2, [r7, #16]
 8029e30:	621a      	str	r2, [r3, #32]
}
 8029e32:	bf00      	nop
 8029e34:	371c      	adds	r7, #28
 8029e36:	46bd      	mov	sp, r7
 8029e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e3c:	4770      	bx	lr
 8029e3e:	bf00      	nop
 8029e40:	40010000 	.word	0x40010000
 8029e44:	40010400 	.word	0x40010400

08029e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029e48:	b480      	push	{r7}
 8029e4a:	b087      	sub	sp, #28
 8029e4c:	af00      	add	r7, sp, #0
 8029e4e:	60f8      	str	r0, [r7, #12]
 8029e50:	60b9      	str	r1, [r7, #8]
 8029e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8029e54:	68fb      	ldr	r3, [r7, #12]
 8029e56:	6a1b      	ldr	r3, [r3, #32]
 8029e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029e5a:	68fb      	ldr	r3, [r7, #12]
 8029e5c:	6a1b      	ldr	r3, [r3, #32]
 8029e5e:	f023 0201 	bic.w	r2, r3, #1
 8029e62:	68fb      	ldr	r3, [r7, #12]
 8029e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029e66:	68fb      	ldr	r3, [r7, #12]
 8029e68:	699b      	ldr	r3, [r3, #24]
 8029e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8029e6c:	693b      	ldr	r3, [r7, #16]
 8029e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8029e74:	687b      	ldr	r3, [r7, #4]
 8029e76:	011b      	lsls	r3, r3, #4
 8029e78:	693a      	ldr	r2, [r7, #16]
 8029e7a:	4313      	orrs	r3, r2
 8029e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8029e7e:	697b      	ldr	r3, [r7, #20]
 8029e80:	f023 030a 	bic.w	r3, r3, #10
 8029e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8029e86:	697a      	ldr	r2, [r7, #20]
 8029e88:	68bb      	ldr	r3, [r7, #8]
 8029e8a:	4313      	orrs	r3, r2
 8029e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8029e8e:	68fb      	ldr	r3, [r7, #12]
 8029e90:	693a      	ldr	r2, [r7, #16]
 8029e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029e94:	68fb      	ldr	r3, [r7, #12]
 8029e96:	697a      	ldr	r2, [r7, #20]
 8029e98:	621a      	str	r2, [r3, #32]
}
 8029e9a:	bf00      	nop
 8029e9c:	371c      	adds	r7, #28
 8029e9e:	46bd      	mov	sp, r7
 8029ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ea4:	4770      	bx	lr

08029ea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029ea6:	b480      	push	{r7}
 8029ea8:	b087      	sub	sp, #28
 8029eaa:	af00      	add	r7, sp, #0
 8029eac:	60f8      	str	r0, [r7, #12]
 8029eae:	60b9      	str	r1, [r7, #8]
 8029eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029eb2:	68fb      	ldr	r3, [r7, #12]
 8029eb4:	6a1b      	ldr	r3, [r3, #32]
 8029eb6:	f023 0210 	bic.w	r2, r3, #16
 8029eba:	68fb      	ldr	r3, [r7, #12]
 8029ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029ebe:	68fb      	ldr	r3, [r7, #12]
 8029ec0:	699b      	ldr	r3, [r3, #24]
 8029ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029ec4:	68fb      	ldr	r3, [r7, #12]
 8029ec6:	6a1b      	ldr	r3, [r3, #32]
 8029ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8029eca:	697b      	ldr	r3, [r7, #20]
 8029ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8029ed2:	687b      	ldr	r3, [r7, #4]
 8029ed4:	031b      	lsls	r3, r3, #12
 8029ed6:	697a      	ldr	r2, [r7, #20]
 8029ed8:	4313      	orrs	r3, r2
 8029eda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8029edc:	693b      	ldr	r3, [r7, #16]
 8029ede:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8029ee2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8029ee4:	68bb      	ldr	r3, [r7, #8]
 8029ee6:	011b      	lsls	r3, r3, #4
 8029ee8:	693a      	ldr	r2, [r7, #16]
 8029eea:	4313      	orrs	r3, r2
 8029eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8029eee:	68fb      	ldr	r3, [r7, #12]
 8029ef0:	697a      	ldr	r2, [r7, #20]
 8029ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029ef4:	68fb      	ldr	r3, [r7, #12]
 8029ef6:	693a      	ldr	r2, [r7, #16]
 8029ef8:	621a      	str	r2, [r3, #32]
}
 8029efa:	bf00      	nop
 8029efc:	371c      	adds	r7, #28
 8029efe:	46bd      	mov	sp, r7
 8029f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f04:	4770      	bx	lr

08029f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8029f06:	b480      	push	{r7}
 8029f08:	b085      	sub	sp, #20
 8029f0a:	af00      	add	r7, sp, #0
 8029f0c:	6078      	str	r0, [r7, #4]
 8029f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8029f10:	687b      	ldr	r3, [r7, #4]
 8029f12:	689b      	ldr	r3, [r3, #8]
 8029f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8029f16:	68fb      	ldr	r3, [r7, #12]
 8029f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8029f1e:	683a      	ldr	r2, [r7, #0]
 8029f20:	68fb      	ldr	r3, [r7, #12]
 8029f22:	4313      	orrs	r3, r2
 8029f24:	f043 0307 	orr.w	r3, r3, #7
 8029f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8029f2a:	687b      	ldr	r3, [r7, #4]
 8029f2c:	68fa      	ldr	r2, [r7, #12]
 8029f2e:	609a      	str	r2, [r3, #8]
}
 8029f30:	bf00      	nop
 8029f32:	3714      	adds	r7, #20
 8029f34:	46bd      	mov	sp, r7
 8029f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f3a:	4770      	bx	lr

08029f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8029f3c:	b480      	push	{r7}
 8029f3e:	b087      	sub	sp, #28
 8029f40:	af00      	add	r7, sp, #0
 8029f42:	60f8      	str	r0, [r7, #12]
 8029f44:	60b9      	str	r1, [r7, #8]
 8029f46:	607a      	str	r2, [r7, #4]
 8029f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8029f4a:	68fb      	ldr	r3, [r7, #12]
 8029f4c:	689b      	ldr	r3, [r3, #8]
 8029f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029f50:	697b      	ldr	r3, [r7, #20]
 8029f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8029f58:	683b      	ldr	r3, [r7, #0]
 8029f5a:	021a      	lsls	r2, r3, #8
 8029f5c:	687b      	ldr	r3, [r7, #4]
 8029f5e:	431a      	orrs	r2, r3
 8029f60:	68bb      	ldr	r3, [r7, #8]
 8029f62:	4313      	orrs	r3, r2
 8029f64:	697a      	ldr	r2, [r7, #20]
 8029f66:	4313      	orrs	r3, r2
 8029f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8029f6a:	68fb      	ldr	r3, [r7, #12]
 8029f6c:	697a      	ldr	r2, [r7, #20]
 8029f6e:	609a      	str	r2, [r3, #8]
}
 8029f70:	bf00      	nop
 8029f72:	371c      	adds	r7, #28
 8029f74:	46bd      	mov	sp, r7
 8029f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f7a:	4770      	bx	lr

08029f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8029f7c:	b480      	push	{r7}
 8029f7e:	b087      	sub	sp, #28
 8029f80:	af00      	add	r7, sp, #0
 8029f82:	60f8      	str	r0, [r7, #12]
 8029f84:	60b9      	str	r1, [r7, #8]
 8029f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8029f88:	68bb      	ldr	r3, [r7, #8]
 8029f8a:	f003 031f 	and.w	r3, r3, #31
 8029f8e:	2201      	movs	r2, #1
 8029f90:	fa02 f303 	lsl.w	r3, r2, r3
 8029f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8029f96:	68fb      	ldr	r3, [r7, #12]
 8029f98:	6a1a      	ldr	r2, [r3, #32]
 8029f9a:	697b      	ldr	r3, [r7, #20]
 8029f9c:	43db      	mvns	r3, r3
 8029f9e:	401a      	ands	r2, r3
 8029fa0:	68fb      	ldr	r3, [r7, #12]
 8029fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8029fa4:	68fb      	ldr	r3, [r7, #12]
 8029fa6:	6a1a      	ldr	r2, [r3, #32]
 8029fa8:	68bb      	ldr	r3, [r7, #8]
 8029faa:	f003 031f 	and.w	r3, r3, #31
 8029fae:	6879      	ldr	r1, [r7, #4]
 8029fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8029fb4:	431a      	orrs	r2, r3
 8029fb6:	68fb      	ldr	r3, [r7, #12]
 8029fb8:	621a      	str	r2, [r3, #32]
}
 8029fba:	bf00      	nop
 8029fbc:	371c      	adds	r7, #28
 8029fbe:	46bd      	mov	sp, r7
 8029fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fc4:	4770      	bx	lr
	...

08029fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8029fc8:	b480      	push	{r7}
 8029fca:	b085      	sub	sp, #20
 8029fcc:	af00      	add	r7, sp, #0
 8029fce:	6078      	str	r0, [r7, #4]
 8029fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8029fd2:	687b      	ldr	r3, [r7, #4]
 8029fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029fd8:	2b01      	cmp	r3, #1
 8029fda:	d101      	bne.n	8029fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8029fdc:	2302      	movs	r3, #2
 8029fde:	e05a      	b.n	802a096 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8029fe0:	687b      	ldr	r3, [r7, #4]
 8029fe2:	2201      	movs	r2, #1
 8029fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029fe8:	687b      	ldr	r3, [r7, #4]
 8029fea:	2202      	movs	r2, #2
 8029fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8029ff0:	687b      	ldr	r3, [r7, #4]
 8029ff2:	681b      	ldr	r3, [r3, #0]
 8029ff4:	685b      	ldr	r3, [r3, #4]
 8029ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8029ff8:	687b      	ldr	r3, [r7, #4]
 8029ffa:	681b      	ldr	r3, [r3, #0]
 8029ffc:	689b      	ldr	r3, [r3, #8]
 8029ffe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802a000:	68fb      	ldr	r3, [r7, #12]
 802a002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a006:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802a008:	683b      	ldr	r3, [r7, #0]
 802a00a:	681b      	ldr	r3, [r3, #0]
 802a00c:	68fa      	ldr	r2, [r7, #12]
 802a00e:	4313      	orrs	r3, r2
 802a010:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802a012:	687b      	ldr	r3, [r7, #4]
 802a014:	681b      	ldr	r3, [r3, #0]
 802a016:	68fa      	ldr	r2, [r7, #12]
 802a018:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802a01a:	687b      	ldr	r3, [r7, #4]
 802a01c:	681b      	ldr	r3, [r3, #0]
 802a01e:	4a21      	ldr	r2, [pc, #132]	; (802a0a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 802a020:	4293      	cmp	r3, r2
 802a022:	d022      	beq.n	802a06a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a024:	687b      	ldr	r3, [r7, #4]
 802a026:	681b      	ldr	r3, [r3, #0]
 802a028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a02c:	d01d      	beq.n	802a06a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a02e:	687b      	ldr	r3, [r7, #4]
 802a030:	681b      	ldr	r3, [r3, #0]
 802a032:	4a1d      	ldr	r2, [pc, #116]	; (802a0a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802a034:	4293      	cmp	r3, r2
 802a036:	d018      	beq.n	802a06a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a038:	687b      	ldr	r3, [r7, #4]
 802a03a:	681b      	ldr	r3, [r3, #0]
 802a03c:	4a1b      	ldr	r2, [pc, #108]	; (802a0ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802a03e:	4293      	cmp	r3, r2
 802a040:	d013      	beq.n	802a06a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a042:	687b      	ldr	r3, [r7, #4]
 802a044:	681b      	ldr	r3, [r3, #0]
 802a046:	4a1a      	ldr	r2, [pc, #104]	; (802a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 802a048:	4293      	cmp	r3, r2
 802a04a:	d00e      	beq.n	802a06a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a04c:	687b      	ldr	r3, [r7, #4]
 802a04e:	681b      	ldr	r3, [r3, #0]
 802a050:	4a18      	ldr	r2, [pc, #96]	; (802a0b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802a052:	4293      	cmp	r3, r2
 802a054:	d009      	beq.n	802a06a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a056:	687b      	ldr	r3, [r7, #4]
 802a058:	681b      	ldr	r3, [r3, #0]
 802a05a:	4a17      	ldr	r2, [pc, #92]	; (802a0b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802a05c:	4293      	cmp	r3, r2
 802a05e:	d004      	beq.n	802a06a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a060:	687b      	ldr	r3, [r7, #4]
 802a062:	681b      	ldr	r3, [r3, #0]
 802a064:	4a15      	ldr	r2, [pc, #84]	; (802a0bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802a066:	4293      	cmp	r3, r2
 802a068:	d10c      	bne.n	802a084 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802a06a:	68bb      	ldr	r3, [r7, #8]
 802a06c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802a070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802a072:	683b      	ldr	r3, [r7, #0]
 802a074:	685b      	ldr	r3, [r3, #4]
 802a076:	68ba      	ldr	r2, [r7, #8]
 802a078:	4313      	orrs	r3, r2
 802a07a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802a07c:	687b      	ldr	r3, [r7, #4]
 802a07e:	681b      	ldr	r3, [r3, #0]
 802a080:	68ba      	ldr	r2, [r7, #8]
 802a082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802a084:	687b      	ldr	r3, [r7, #4]
 802a086:	2201      	movs	r2, #1
 802a088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a08c:	687b      	ldr	r3, [r7, #4]
 802a08e:	2200      	movs	r2, #0
 802a090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a094:	2300      	movs	r3, #0
}
 802a096:	4618      	mov	r0, r3
 802a098:	3714      	adds	r7, #20
 802a09a:	46bd      	mov	sp, r7
 802a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0a0:	4770      	bx	lr
 802a0a2:	bf00      	nop
 802a0a4:	40010000 	.word	0x40010000
 802a0a8:	40000400 	.word	0x40000400
 802a0ac:	40000800 	.word	0x40000800
 802a0b0:	40000c00 	.word	0x40000c00
 802a0b4:	40010400 	.word	0x40010400
 802a0b8:	40014000 	.word	0x40014000
 802a0bc:	40001800 	.word	0x40001800

0802a0c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 802a0c0:	b480      	push	{r7}
 802a0c2:	b085      	sub	sp, #20
 802a0c4:	af00      	add	r7, sp, #0
 802a0c6:	6078      	str	r0, [r7, #4]
 802a0c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802a0ca:	2300      	movs	r3, #0
 802a0cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 802a0ce:	687b      	ldr	r3, [r7, #4]
 802a0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a0d4:	2b01      	cmp	r3, #1
 802a0d6:	d101      	bne.n	802a0dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 802a0d8:	2302      	movs	r3, #2
 802a0da:	e03d      	b.n	802a158 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 802a0dc:	687b      	ldr	r3, [r7, #4]
 802a0de:	2201      	movs	r2, #1
 802a0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 802a0e4:	68fb      	ldr	r3, [r7, #12]
 802a0e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802a0ea:	683b      	ldr	r3, [r7, #0]
 802a0ec:	68db      	ldr	r3, [r3, #12]
 802a0ee:	4313      	orrs	r3, r2
 802a0f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 802a0f2:	68fb      	ldr	r3, [r7, #12]
 802a0f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 802a0f8:	683b      	ldr	r3, [r7, #0]
 802a0fa:	689b      	ldr	r3, [r3, #8]
 802a0fc:	4313      	orrs	r3, r2
 802a0fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 802a100:	68fb      	ldr	r3, [r7, #12]
 802a102:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 802a106:	683b      	ldr	r3, [r7, #0]
 802a108:	685b      	ldr	r3, [r3, #4]
 802a10a:	4313      	orrs	r3, r2
 802a10c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 802a10e:	68fb      	ldr	r3, [r7, #12]
 802a110:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 802a114:	683b      	ldr	r3, [r7, #0]
 802a116:	681b      	ldr	r3, [r3, #0]
 802a118:	4313      	orrs	r3, r2
 802a11a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 802a11c:	68fb      	ldr	r3, [r7, #12]
 802a11e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a122:	683b      	ldr	r3, [r7, #0]
 802a124:	691b      	ldr	r3, [r3, #16]
 802a126:	4313      	orrs	r3, r2
 802a128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 802a12a:	68fb      	ldr	r3, [r7, #12]
 802a12c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 802a130:	683b      	ldr	r3, [r7, #0]
 802a132:	695b      	ldr	r3, [r3, #20]
 802a134:	4313      	orrs	r3, r2
 802a136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 802a138:	68fb      	ldr	r3, [r7, #12]
 802a13a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 802a13e:	683b      	ldr	r3, [r7, #0]
 802a140:	69db      	ldr	r3, [r3, #28]
 802a142:	4313      	orrs	r3, r2
 802a144:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 802a146:	687b      	ldr	r3, [r7, #4]
 802a148:	681b      	ldr	r3, [r3, #0]
 802a14a:	68fa      	ldr	r2, [r7, #12]
 802a14c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 802a14e:	687b      	ldr	r3, [r7, #4]
 802a150:	2200      	movs	r2, #0
 802a152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a156:	2300      	movs	r3, #0
}
 802a158:	4618      	mov	r0, r3
 802a15a:	3714      	adds	r7, #20
 802a15c:	46bd      	mov	sp, r7
 802a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a162:	4770      	bx	lr

0802a164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802a164:	b480      	push	{r7}
 802a166:	b083      	sub	sp, #12
 802a168:	af00      	add	r7, sp, #0
 802a16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802a16c:	bf00      	nop
 802a16e:	370c      	adds	r7, #12
 802a170:	46bd      	mov	sp, r7
 802a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a176:	4770      	bx	lr

0802a178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802a178:	b480      	push	{r7}
 802a17a:	b083      	sub	sp, #12
 802a17c:	af00      	add	r7, sp, #0
 802a17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802a180:	bf00      	nop
 802a182:	370c      	adds	r7, #12
 802a184:	46bd      	mov	sp, r7
 802a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a18a:	4770      	bx	lr

0802a18c <__cxa_guard_acquire>:
 802a18c:	6803      	ldr	r3, [r0, #0]
 802a18e:	07db      	lsls	r3, r3, #31
 802a190:	d406      	bmi.n	802a1a0 <__cxa_guard_acquire+0x14>
 802a192:	7843      	ldrb	r3, [r0, #1]
 802a194:	b103      	cbz	r3, 802a198 <__cxa_guard_acquire+0xc>
 802a196:	deff      	udf	#255	; 0xff
 802a198:	2301      	movs	r3, #1
 802a19a:	7043      	strb	r3, [r0, #1]
 802a19c:	4618      	mov	r0, r3
 802a19e:	4770      	bx	lr
 802a1a0:	2000      	movs	r0, #0
 802a1a2:	4770      	bx	lr

0802a1a4 <__cxa_guard_release>:
 802a1a4:	2301      	movs	r3, #1
 802a1a6:	6003      	str	r3, [r0, #0]
 802a1a8:	4770      	bx	lr
	...

0802a1ac <__libc_init_array>:
 802a1ac:	b570      	push	{r4, r5, r6, lr}
 802a1ae:	4e0d      	ldr	r6, [pc, #52]	; (802a1e4 <__libc_init_array+0x38>)
 802a1b0:	4c0d      	ldr	r4, [pc, #52]	; (802a1e8 <__libc_init_array+0x3c>)
 802a1b2:	1ba4      	subs	r4, r4, r6
 802a1b4:	10a4      	asrs	r4, r4, #2
 802a1b6:	2500      	movs	r5, #0
 802a1b8:	42a5      	cmp	r5, r4
 802a1ba:	d109      	bne.n	802a1d0 <__libc_init_array+0x24>
 802a1bc:	4e0b      	ldr	r6, [pc, #44]	; (802a1ec <__libc_init_array+0x40>)
 802a1be:	4c0c      	ldr	r4, [pc, #48]	; (802a1f0 <__libc_init_array+0x44>)
 802a1c0:	f000 f82c 	bl	802a21c <_init>
 802a1c4:	1ba4      	subs	r4, r4, r6
 802a1c6:	10a4      	asrs	r4, r4, #2
 802a1c8:	2500      	movs	r5, #0
 802a1ca:	42a5      	cmp	r5, r4
 802a1cc:	d105      	bne.n	802a1da <__libc_init_array+0x2e>
 802a1ce:	bd70      	pop	{r4, r5, r6, pc}
 802a1d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a1d4:	4798      	blx	r3
 802a1d6:	3501      	adds	r5, #1
 802a1d8:	e7ee      	b.n	802a1b8 <__libc_init_array+0xc>
 802a1da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a1de:	4798      	blx	r3
 802a1e0:	3501      	adds	r5, #1
 802a1e2:	e7f2      	b.n	802a1ca <__libc_init_array+0x1e>
 802a1e4:	0802a25c 	.word	0x0802a25c
 802a1e8:	0802a25c 	.word	0x0802a25c
 802a1ec:	0802a25c 	.word	0x0802a25c
 802a1f0:	0802a264 	.word	0x0802a264

0802a1f4 <memcpy>:
 802a1f4:	b510      	push	{r4, lr}
 802a1f6:	1e43      	subs	r3, r0, #1
 802a1f8:	440a      	add	r2, r1
 802a1fa:	4291      	cmp	r1, r2
 802a1fc:	d100      	bne.n	802a200 <memcpy+0xc>
 802a1fe:	bd10      	pop	{r4, pc}
 802a200:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a204:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a208:	e7f7      	b.n	802a1fa <memcpy+0x6>

0802a20a <memset>:
 802a20a:	4402      	add	r2, r0
 802a20c:	4603      	mov	r3, r0
 802a20e:	4293      	cmp	r3, r2
 802a210:	d100      	bne.n	802a214 <memset+0xa>
 802a212:	4770      	bx	lr
 802a214:	f803 1b01 	strb.w	r1, [r3], #1
 802a218:	e7f9      	b.n	802a20e <memset+0x4>
	...

0802a21c <_init>:
 802a21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a21e:	bf00      	nop
 802a220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a222:	bc08      	pop	{r3}
 802a224:	469e      	mov	lr, r3
 802a226:	4770      	bx	lr

0802a228 <_fini>:
 802a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a22a:	bf00      	nop
 802a22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a22e:	bc08      	pop	{r3}
 802a230:	469e      	mov	lr, r3
 802a232:	4770      	bx	lr
