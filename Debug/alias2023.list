
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b8  08020000  08020000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  080285b8  080285b8  000285b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028860  08028860  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08028860  08028860  00028860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028868  08028868  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08028868  08028868  00028868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028870  08028870  00028870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08028874  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000111b0  200001e0  08028a50  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011390  08028a50  00031390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002986f  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000044d5  00000000  00000000  00059a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001558  00000000  00000000  0005df50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a8  00000000  00000000  0005f4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025295  00000000  00000000  00060850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014992  00000000  00000000  00085ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cca9d  00000000  00000000  0009a477  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00166f14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061d4  00000000  00000000  00166f90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	200001e0 	.word	0x200001e0
 802001c:	00000000 	.word	0x00000000
 8020020:	080285a0 	.word	0x080285a0

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	200001e4 	.word	0x200001e4
 802003c:	080285a0 	.word	0x080285a0

08020040 <strlen>:
 8020040:	4603      	mov	r3, r0
 8020042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020046:	2a00      	cmp	r2, #0
 8020048:	d1fb      	bne.n	8020042 <strlen+0x2>
 802004a:	1a18      	subs	r0, r3, r0
 802004c:	3801      	subs	r0, #1
 802004e:	4770      	bx	lr

08020050 <__aeabi_drsub>:
 8020050:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020054:	e002      	b.n	802005c <__adddf3>
 8020056:	bf00      	nop

08020058 <__aeabi_dsub>:
 8020058:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802005c <__adddf3>:
 802005c:	b530      	push	{r4, r5, lr}
 802005e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020062:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020066:	ea94 0f05 	teq	r4, r5
 802006a:	bf08      	it	eq
 802006c:	ea90 0f02 	teqeq	r0, r2
 8020070:	bf1f      	itttt	ne
 8020072:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020076:	ea55 0c02 	orrsne.w	ip, r5, r2
 802007a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802007e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020082:	f000 80e2 	beq.w	802024a <__adddf3+0x1ee>
 8020086:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802008a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802008e:	bfb8      	it	lt
 8020090:	426d      	neglt	r5, r5
 8020092:	dd0c      	ble.n	80200ae <__adddf3+0x52>
 8020094:	442c      	add	r4, r5
 8020096:	ea80 0202 	eor.w	r2, r0, r2
 802009a:	ea81 0303 	eor.w	r3, r1, r3
 802009e:	ea82 0000 	eor.w	r0, r2, r0
 80200a2:	ea83 0101 	eor.w	r1, r3, r1
 80200a6:	ea80 0202 	eor.w	r2, r0, r2
 80200aa:	ea81 0303 	eor.w	r3, r1, r3
 80200ae:	2d36      	cmp	r5, #54	; 0x36
 80200b0:	bf88      	it	hi
 80200b2:	bd30      	pophi	{r4, r5, pc}
 80200b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80200b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80200bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80200c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80200c4:	d002      	beq.n	80200cc <__adddf3+0x70>
 80200c6:	4240      	negs	r0, r0
 80200c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80200cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80200d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80200d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80200d8:	d002      	beq.n	80200e0 <__adddf3+0x84>
 80200da:	4252      	negs	r2, r2
 80200dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80200e0:	ea94 0f05 	teq	r4, r5
 80200e4:	f000 80a7 	beq.w	8020236 <__adddf3+0x1da>
 80200e8:	f1a4 0401 	sub.w	r4, r4, #1
 80200ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80200f0:	db0d      	blt.n	802010e <__adddf3+0xb2>
 80200f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80200f6:	fa22 f205 	lsr.w	r2, r2, r5
 80200fa:	1880      	adds	r0, r0, r2
 80200fc:	f141 0100 	adc.w	r1, r1, #0
 8020100:	fa03 f20e 	lsl.w	r2, r3, lr
 8020104:	1880      	adds	r0, r0, r2
 8020106:	fa43 f305 	asr.w	r3, r3, r5
 802010a:	4159      	adcs	r1, r3
 802010c:	e00e      	b.n	802012c <__adddf3+0xd0>
 802010e:	f1a5 0520 	sub.w	r5, r5, #32
 8020112:	f10e 0e20 	add.w	lr, lr, #32
 8020116:	2a01      	cmp	r2, #1
 8020118:	fa03 fc0e 	lsl.w	ip, r3, lr
 802011c:	bf28      	it	cs
 802011e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020122:	fa43 f305 	asr.w	r3, r3, r5
 8020126:	18c0      	adds	r0, r0, r3
 8020128:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802012c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020130:	d507      	bpl.n	8020142 <__adddf3+0xe6>
 8020132:	f04f 0e00 	mov.w	lr, #0
 8020136:	f1dc 0c00 	rsbs	ip, ip, #0
 802013a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802013e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020142:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020146:	d31b      	bcc.n	8020180 <__adddf3+0x124>
 8020148:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802014c:	d30c      	bcc.n	8020168 <__adddf3+0x10c>
 802014e:	0849      	lsrs	r1, r1, #1
 8020150:	ea5f 0030 	movs.w	r0, r0, rrx
 8020154:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020158:	f104 0401 	add.w	r4, r4, #1
 802015c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020160:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020164:	f080 809a 	bcs.w	802029c <__adddf3+0x240>
 8020168:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802016c:	bf08      	it	eq
 802016e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020172:	f150 0000 	adcs.w	r0, r0, #0
 8020176:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802017a:	ea41 0105 	orr.w	r1, r1, r5
 802017e:	bd30      	pop	{r4, r5, pc}
 8020180:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020184:	4140      	adcs	r0, r0
 8020186:	eb41 0101 	adc.w	r1, r1, r1
 802018a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802018e:	f1a4 0401 	sub.w	r4, r4, #1
 8020192:	d1e9      	bne.n	8020168 <__adddf3+0x10c>
 8020194:	f091 0f00 	teq	r1, #0
 8020198:	bf04      	itt	eq
 802019a:	4601      	moveq	r1, r0
 802019c:	2000      	moveq	r0, #0
 802019e:	fab1 f381 	clz	r3, r1
 80201a2:	bf08      	it	eq
 80201a4:	3320      	addeq	r3, #32
 80201a6:	f1a3 030b 	sub.w	r3, r3, #11
 80201aa:	f1b3 0220 	subs.w	r2, r3, #32
 80201ae:	da0c      	bge.n	80201ca <__adddf3+0x16e>
 80201b0:	320c      	adds	r2, #12
 80201b2:	dd08      	ble.n	80201c6 <__adddf3+0x16a>
 80201b4:	f102 0c14 	add.w	ip, r2, #20
 80201b8:	f1c2 020c 	rsb	r2, r2, #12
 80201bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80201c0:	fa21 f102 	lsr.w	r1, r1, r2
 80201c4:	e00c      	b.n	80201e0 <__adddf3+0x184>
 80201c6:	f102 0214 	add.w	r2, r2, #20
 80201ca:	bfd8      	it	le
 80201cc:	f1c2 0c20 	rsble	ip, r2, #32
 80201d0:	fa01 f102 	lsl.w	r1, r1, r2
 80201d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80201d8:	bfdc      	itt	le
 80201da:	ea41 010c 	orrle.w	r1, r1, ip
 80201de:	4090      	lslle	r0, r2
 80201e0:	1ae4      	subs	r4, r4, r3
 80201e2:	bfa2      	ittt	ge
 80201e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80201e8:	4329      	orrge	r1, r5
 80201ea:	bd30      	popge	{r4, r5, pc}
 80201ec:	ea6f 0404 	mvn.w	r4, r4
 80201f0:	3c1f      	subs	r4, #31
 80201f2:	da1c      	bge.n	802022e <__adddf3+0x1d2>
 80201f4:	340c      	adds	r4, #12
 80201f6:	dc0e      	bgt.n	8020216 <__adddf3+0x1ba>
 80201f8:	f104 0414 	add.w	r4, r4, #20
 80201fc:	f1c4 0220 	rsb	r2, r4, #32
 8020200:	fa20 f004 	lsr.w	r0, r0, r4
 8020204:	fa01 f302 	lsl.w	r3, r1, r2
 8020208:	ea40 0003 	orr.w	r0, r0, r3
 802020c:	fa21 f304 	lsr.w	r3, r1, r4
 8020210:	ea45 0103 	orr.w	r1, r5, r3
 8020214:	bd30      	pop	{r4, r5, pc}
 8020216:	f1c4 040c 	rsb	r4, r4, #12
 802021a:	f1c4 0220 	rsb	r2, r4, #32
 802021e:	fa20 f002 	lsr.w	r0, r0, r2
 8020222:	fa01 f304 	lsl.w	r3, r1, r4
 8020226:	ea40 0003 	orr.w	r0, r0, r3
 802022a:	4629      	mov	r1, r5
 802022c:	bd30      	pop	{r4, r5, pc}
 802022e:	fa21 f004 	lsr.w	r0, r1, r4
 8020232:	4629      	mov	r1, r5
 8020234:	bd30      	pop	{r4, r5, pc}
 8020236:	f094 0f00 	teq	r4, #0
 802023a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802023e:	bf06      	itte	eq
 8020240:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020244:	3401      	addeq	r4, #1
 8020246:	3d01      	subne	r5, #1
 8020248:	e74e      	b.n	80200e8 <__adddf3+0x8c>
 802024a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802024e:	bf18      	it	ne
 8020250:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020254:	d029      	beq.n	80202aa <__adddf3+0x24e>
 8020256:	ea94 0f05 	teq	r4, r5
 802025a:	bf08      	it	eq
 802025c:	ea90 0f02 	teqeq	r0, r2
 8020260:	d005      	beq.n	802026e <__adddf3+0x212>
 8020262:	ea54 0c00 	orrs.w	ip, r4, r0
 8020266:	bf04      	itt	eq
 8020268:	4619      	moveq	r1, r3
 802026a:	4610      	moveq	r0, r2
 802026c:	bd30      	pop	{r4, r5, pc}
 802026e:	ea91 0f03 	teq	r1, r3
 8020272:	bf1e      	ittt	ne
 8020274:	2100      	movne	r1, #0
 8020276:	2000      	movne	r0, #0
 8020278:	bd30      	popne	{r4, r5, pc}
 802027a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802027e:	d105      	bne.n	802028c <__adddf3+0x230>
 8020280:	0040      	lsls	r0, r0, #1
 8020282:	4149      	adcs	r1, r1
 8020284:	bf28      	it	cs
 8020286:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802028a:	bd30      	pop	{r4, r5, pc}
 802028c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020290:	bf3c      	itt	cc
 8020292:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020296:	bd30      	popcc	{r4, r5, pc}
 8020298:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802029c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80202a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80202a4:	f04f 0000 	mov.w	r0, #0
 80202a8:	bd30      	pop	{r4, r5, pc}
 80202aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80202ae:	bf1a      	itte	ne
 80202b0:	4619      	movne	r1, r3
 80202b2:	4610      	movne	r0, r2
 80202b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80202b8:	bf1c      	itt	ne
 80202ba:	460b      	movne	r3, r1
 80202bc:	4602      	movne	r2, r0
 80202be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80202c2:	bf06      	itte	eq
 80202c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80202c8:	ea91 0f03 	teqeq	r1, r3
 80202cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80202d0:	bd30      	pop	{r4, r5, pc}
 80202d2:	bf00      	nop

080202d4 <__aeabi_ui2d>:
 80202d4:	f090 0f00 	teq	r0, #0
 80202d8:	bf04      	itt	eq
 80202da:	2100      	moveq	r1, #0
 80202dc:	4770      	bxeq	lr
 80202de:	b530      	push	{r4, r5, lr}
 80202e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202e8:	f04f 0500 	mov.w	r5, #0
 80202ec:	f04f 0100 	mov.w	r1, #0
 80202f0:	e750      	b.n	8020194 <__adddf3+0x138>
 80202f2:	bf00      	nop

080202f4 <__aeabi_i2d>:
 80202f4:	f090 0f00 	teq	r0, #0
 80202f8:	bf04      	itt	eq
 80202fa:	2100      	moveq	r1, #0
 80202fc:	4770      	bxeq	lr
 80202fe:	b530      	push	{r4, r5, lr}
 8020300:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020304:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020308:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802030c:	bf48      	it	mi
 802030e:	4240      	negmi	r0, r0
 8020310:	f04f 0100 	mov.w	r1, #0
 8020314:	e73e      	b.n	8020194 <__adddf3+0x138>
 8020316:	bf00      	nop

08020318 <__aeabi_f2d>:
 8020318:	0042      	lsls	r2, r0, #1
 802031a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802031e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020322:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020326:	bf1f      	itttt	ne
 8020328:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802032c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020330:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020334:	4770      	bxne	lr
 8020336:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802033a:	bf08      	it	eq
 802033c:	4770      	bxeq	lr
 802033e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020342:	bf04      	itt	eq
 8020344:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020348:	4770      	bxeq	lr
 802034a:	b530      	push	{r4, r5, lr}
 802034c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020354:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020358:	e71c      	b.n	8020194 <__adddf3+0x138>
 802035a:	bf00      	nop

0802035c <__aeabi_ul2d>:
 802035c:	ea50 0201 	orrs.w	r2, r0, r1
 8020360:	bf08      	it	eq
 8020362:	4770      	bxeq	lr
 8020364:	b530      	push	{r4, r5, lr}
 8020366:	f04f 0500 	mov.w	r5, #0
 802036a:	e00a      	b.n	8020382 <__aeabi_l2d+0x16>

0802036c <__aeabi_l2d>:
 802036c:	ea50 0201 	orrs.w	r2, r0, r1
 8020370:	bf08      	it	eq
 8020372:	4770      	bxeq	lr
 8020374:	b530      	push	{r4, r5, lr}
 8020376:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802037a:	d502      	bpl.n	8020382 <__aeabi_l2d+0x16>
 802037c:	4240      	negs	r0, r0
 802037e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020382:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020386:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802038a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802038e:	f43f aed8 	beq.w	8020142 <__adddf3+0xe6>
 8020392:	f04f 0203 	mov.w	r2, #3
 8020396:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802039a:	bf18      	it	ne
 802039c:	3203      	addne	r2, #3
 802039e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80203a2:	bf18      	it	ne
 80203a4:	3203      	addne	r2, #3
 80203a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80203aa:	f1c2 0320 	rsb	r3, r2, #32
 80203ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80203b2:	fa20 f002 	lsr.w	r0, r0, r2
 80203b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80203ba:	ea40 000e 	orr.w	r0, r0, lr
 80203be:	fa21 f102 	lsr.w	r1, r1, r2
 80203c2:	4414      	add	r4, r2
 80203c4:	e6bd      	b.n	8020142 <__adddf3+0xe6>
 80203c6:	bf00      	nop

080203c8 <__aeabi_dmul>:
 80203c8:	b570      	push	{r4, r5, r6, lr}
 80203ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80203ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80203d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80203d6:	bf1d      	ittte	ne
 80203d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80203dc:	ea94 0f0c 	teqne	r4, ip
 80203e0:	ea95 0f0c 	teqne	r5, ip
 80203e4:	f000 f8de 	bleq	80205a4 <__aeabi_dmul+0x1dc>
 80203e8:	442c      	add	r4, r5
 80203ea:	ea81 0603 	eor.w	r6, r1, r3
 80203ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80203f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80203f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80203fa:	bf18      	it	ne
 80203fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020408:	d038      	beq.n	802047c <__aeabi_dmul+0xb4>
 802040a:	fba0 ce02 	umull	ip, lr, r0, r2
 802040e:	f04f 0500 	mov.w	r5, #0
 8020412:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020416:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802041a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802041e:	f04f 0600 	mov.w	r6, #0
 8020422:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020426:	f09c 0f00 	teq	ip, #0
 802042a:	bf18      	it	ne
 802042c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020430:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020434:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020438:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802043c:	d204      	bcs.n	8020448 <__aeabi_dmul+0x80>
 802043e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020442:	416d      	adcs	r5, r5
 8020444:	eb46 0606 	adc.w	r6, r6, r6
 8020448:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802044c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020450:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020454:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020458:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802045c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020460:	bf88      	it	hi
 8020462:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020466:	d81e      	bhi.n	80204a6 <__aeabi_dmul+0xde>
 8020468:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802046c:	bf08      	it	eq
 802046e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020472:	f150 0000 	adcs.w	r0, r0, #0
 8020476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802047a:	bd70      	pop	{r4, r5, r6, pc}
 802047c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020480:	ea46 0101 	orr.w	r1, r6, r1
 8020484:	ea40 0002 	orr.w	r0, r0, r2
 8020488:	ea81 0103 	eor.w	r1, r1, r3
 802048c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020490:	bfc2      	ittt	gt
 8020492:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020496:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802049a:	bd70      	popgt	{r4, r5, r6, pc}
 802049c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80204a0:	f04f 0e00 	mov.w	lr, #0
 80204a4:	3c01      	subs	r4, #1
 80204a6:	f300 80ab 	bgt.w	8020600 <__aeabi_dmul+0x238>
 80204aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80204ae:	bfde      	ittt	le
 80204b0:	2000      	movle	r0, #0
 80204b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80204b6:	bd70      	pople	{r4, r5, r6, pc}
 80204b8:	f1c4 0400 	rsb	r4, r4, #0
 80204bc:	3c20      	subs	r4, #32
 80204be:	da35      	bge.n	802052c <__aeabi_dmul+0x164>
 80204c0:	340c      	adds	r4, #12
 80204c2:	dc1b      	bgt.n	80204fc <__aeabi_dmul+0x134>
 80204c4:	f104 0414 	add.w	r4, r4, #20
 80204c8:	f1c4 0520 	rsb	r5, r4, #32
 80204cc:	fa00 f305 	lsl.w	r3, r0, r5
 80204d0:	fa20 f004 	lsr.w	r0, r0, r4
 80204d4:	fa01 f205 	lsl.w	r2, r1, r5
 80204d8:	ea40 0002 	orr.w	r0, r0, r2
 80204dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80204e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80204e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80204e8:	fa21 f604 	lsr.w	r6, r1, r4
 80204ec:	eb42 0106 	adc.w	r1, r2, r6
 80204f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80204f4:	bf08      	it	eq
 80204f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80204fa:	bd70      	pop	{r4, r5, r6, pc}
 80204fc:	f1c4 040c 	rsb	r4, r4, #12
 8020500:	f1c4 0520 	rsb	r5, r4, #32
 8020504:	fa00 f304 	lsl.w	r3, r0, r4
 8020508:	fa20 f005 	lsr.w	r0, r0, r5
 802050c:	fa01 f204 	lsl.w	r2, r1, r4
 8020510:	ea40 0002 	orr.w	r0, r0, r2
 8020514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020518:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802051c:	f141 0100 	adc.w	r1, r1, #0
 8020520:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020524:	bf08      	it	eq
 8020526:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802052a:	bd70      	pop	{r4, r5, r6, pc}
 802052c:	f1c4 0520 	rsb	r5, r4, #32
 8020530:	fa00 f205 	lsl.w	r2, r0, r5
 8020534:	ea4e 0e02 	orr.w	lr, lr, r2
 8020538:	fa20 f304 	lsr.w	r3, r0, r4
 802053c:	fa01 f205 	lsl.w	r2, r1, r5
 8020540:	ea43 0302 	orr.w	r3, r3, r2
 8020544:	fa21 f004 	lsr.w	r0, r1, r4
 8020548:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802054c:	fa21 f204 	lsr.w	r2, r1, r4
 8020550:	ea20 0002 	bic.w	r0, r0, r2
 8020554:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802055c:	bf08      	it	eq
 802055e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020562:	bd70      	pop	{r4, r5, r6, pc}
 8020564:	f094 0f00 	teq	r4, #0
 8020568:	d10f      	bne.n	802058a <__aeabi_dmul+0x1c2>
 802056a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802056e:	0040      	lsls	r0, r0, #1
 8020570:	eb41 0101 	adc.w	r1, r1, r1
 8020574:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020578:	bf08      	it	eq
 802057a:	3c01      	subeq	r4, #1
 802057c:	d0f7      	beq.n	802056e <__aeabi_dmul+0x1a6>
 802057e:	ea41 0106 	orr.w	r1, r1, r6
 8020582:	f095 0f00 	teq	r5, #0
 8020586:	bf18      	it	ne
 8020588:	4770      	bxne	lr
 802058a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802058e:	0052      	lsls	r2, r2, #1
 8020590:	eb43 0303 	adc.w	r3, r3, r3
 8020594:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020598:	bf08      	it	eq
 802059a:	3d01      	subeq	r5, #1
 802059c:	d0f7      	beq.n	802058e <__aeabi_dmul+0x1c6>
 802059e:	ea43 0306 	orr.w	r3, r3, r6
 80205a2:	4770      	bx	lr
 80205a4:	ea94 0f0c 	teq	r4, ip
 80205a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80205ac:	bf18      	it	ne
 80205ae:	ea95 0f0c 	teqne	r5, ip
 80205b2:	d00c      	beq.n	80205ce <__aeabi_dmul+0x206>
 80205b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205b8:	bf18      	it	ne
 80205ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205be:	d1d1      	bne.n	8020564 <__aeabi_dmul+0x19c>
 80205c0:	ea81 0103 	eor.w	r1, r1, r3
 80205c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205c8:	f04f 0000 	mov.w	r0, #0
 80205cc:	bd70      	pop	{r4, r5, r6, pc}
 80205ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205d2:	bf06      	itte	eq
 80205d4:	4610      	moveq	r0, r2
 80205d6:	4619      	moveq	r1, r3
 80205d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205dc:	d019      	beq.n	8020612 <__aeabi_dmul+0x24a>
 80205de:	ea94 0f0c 	teq	r4, ip
 80205e2:	d102      	bne.n	80205ea <__aeabi_dmul+0x222>
 80205e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80205e8:	d113      	bne.n	8020612 <__aeabi_dmul+0x24a>
 80205ea:	ea95 0f0c 	teq	r5, ip
 80205ee:	d105      	bne.n	80205fc <__aeabi_dmul+0x234>
 80205f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80205f4:	bf1c      	itt	ne
 80205f6:	4610      	movne	r0, r2
 80205f8:	4619      	movne	r1, r3
 80205fa:	d10a      	bne.n	8020612 <__aeabi_dmul+0x24a>
 80205fc:	ea81 0103 	eor.w	r1, r1, r3
 8020600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020604:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802060c:	f04f 0000 	mov.w	r0, #0
 8020610:	bd70      	pop	{r4, r5, r6, pc}
 8020612:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020616:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802061a:	bd70      	pop	{r4, r5, r6, pc}

0802061c <__aeabi_ddiv>:
 802061c:	b570      	push	{r4, r5, r6, lr}
 802061e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802062a:	bf1d      	ittte	ne
 802062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020630:	ea94 0f0c 	teqne	r4, ip
 8020634:	ea95 0f0c 	teqne	r5, ip
 8020638:	f000 f8a7 	bleq	802078a <__aeabi_ddiv+0x16e>
 802063c:	eba4 0405 	sub.w	r4, r4, r5
 8020640:	ea81 0e03 	eor.w	lr, r1, r3
 8020644:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020648:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802064c:	f000 8088 	beq.w	8020760 <__aeabi_ddiv+0x144>
 8020650:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020654:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020658:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802065c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020660:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020664:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020668:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802066c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020670:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020674:	429d      	cmp	r5, r3
 8020676:	bf08      	it	eq
 8020678:	4296      	cmpeq	r6, r2
 802067a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802067e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020682:	d202      	bcs.n	802068a <__aeabi_ddiv+0x6e>
 8020684:	085b      	lsrs	r3, r3, #1
 8020686:	ea4f 0232 	mov.w	r2, r2, rrx
 802068a:	1ab6      	subs	r6, r6, r2
 802068c:	eb65 0503 	sbc.w	r5, r5, r3
 8020690:	085b      	lsrs	r3, r3, #1
 8020692:	ea4f 0232 	mov.w	r2, r2, rrx
 8020696:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802069a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802069e:	ebb6 0e02 	subs.w	lr, r6, r2
 80206a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206a6:	bf22      	ittt	cs
 80206a8:	1ab6      	subcs	r6, r6, r2
 80206aa:	4675      	movcs	r5, lr
 80206ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80206b0:	085b      	lsrs	r3, r3, #1
 80206b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206be:	bf22      	ittt	cs
 80206c0:	1ab6      	subcs	r6, r6, r2
 80206c2:	4675      	movcs	r5, lr
 80206c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80206c8:	085b      	lsrs	r3, r3, #1
 80206ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80206ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80206d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206d6:	bf22      	ittt	cs
 80206d8:	1ab6      	subcs	r6, r6, r2
 80206da:	4675      	movcs	r5, lr
 80206dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80206e0:	085b      	lsrs	r3, r3, #1
 80206e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206ee:	bf22      	ittt	cs
 80206f0:	1ab6      	subcs	r6, r6, r2
 80206f2:	4675      	movcs	r5, lr
 80206f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80206f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80206fc:	d018      	beq.n	8020730 <__aeabi_ddiv+0x114>
 80206fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020702:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020706:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802070a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802070e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020712:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020716:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802071a:	d1c0      	bne.n	802069e <__aeabi_ddiv+0x82>
 802071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020720:	d10b      	bne.n	802073a <__aeabi_ddiv+0x11e>
 8020722:	ea41 0100 	orr.w	r1, r1, r0
 8020726:	f04f 0000 	mov.w	r0, #0
 802072a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802072e:	e7b6      	b.n	802069e <__aeabi_ddiv+0x82>
 8020730:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020734:	bf04      	itt	eq
 8020736:	4301      	orreq	r1, r0
 8020738:	2000      	moveq	r0, #0
 802073a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802073e:	bf88      	it	hi
 8020740:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020744:	f63f aeaf 	bhi.w	80204a6 <__aeabi_dmul+0xde>
 8020748:	ebb5 0c03 	subs.w	ip, r5, r3
 802074c:	bf04      	itt	eq
 802074e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020752:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020756:	f150 0000 	adcs.w	r0, r0, #0
 802075a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802075e:	bd70      	pop	{r4, r5, r6, pc}
 8020760:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020764:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020768:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802076c:	bfc2      	ittt	gt
 802076e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020772:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020776:	bd70      	popgt	{r4, r5, r6, pc}
 8020778:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802077c:	f04f 0e00 	mov.w	lr, #0
 8020780:	3c01      	subs	r4, #1
 8020782:	e690      	b.n	80204a6 <__aeabi_dmul+0xde>
 8020784:	ea45 0e06 	orr.w	lr, r5, r6
 8020788:	e68d      	b.n	80204a6 <__aeabi_dmul+0xde>
 802078a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802078e:	ea94 0f0c 	teq	r4, ip
 8020792:	bf08      	it	eq
 8020794:	ea95 0f0c 	teqeq	r5, ip
 8020798:	f43f af3b 	beq.w	8020612 <__aeabi_dmul+0x24a>
 802079c:	ea94 0f0c 	teq	r4, ip
 80207a0:	d10a      	bne.n	80207b8 <__aeabi_ddiv+0x19c>
 80207a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80207a6:	f47f af34 	bne.w	8020612 <__aeabi_dmul+0x24a>
 80207aa:	ea95 0f0c 	teq	r5, ip
 80207ae:	f47f af25 	bne.w	80205fc <__aeabi_dmul+0x234>
 80207b2:	4610      	mov	r0, r2
 80207b4:	4619      	mov	r1, r3
 80207b6:	e72c      	b.n	8020612 <__aeabi_dmul+0x24a>
 80207b8:	ea95 0f0c 	teq	r5, ip
 80207bc:	d106      	bne.n	80207cc <__aeabi_ddiv+0x1b0>
 80207be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80207c2:	f43f aefd 	beq.w	80205c0 <__aeabi_dmul+0x1f8>
 80207c6:	4610      	mov	r0, r2
 80207c8:	4619      	mov	r1, r3
 80207ca:	e722      	b.n	8020612 <__aeabi_dmul+0x24a>
 80207cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207d0:	bf18      	it	ne
 80207d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207d6:	f47f aec5 	bne.w	8020564 <__aeabi_dmul+0x19c>
 80207da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80207de:	f47f af0d 	bne.w	80205fc <__aeabi_dmul+0x234>
 80207e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80207e6:	f47f aeeb 	bne.w	80205c0 <__aeabi_dmul+0x1f8>
 80207ea:	e712      	b.n	8020612 <__aeabi_dmul+0x24a>

080207ec <__gedf2>:
 80207ec:	f04f 3cff 	mov.w	ip, #4294967295
 80207f0:	e006      	b.n	8020800 <__cmpdf2+0x4>
 80207f2:	bf00      	nop

080207f4 <__ledf2>:
 80207f4:	f04f 0c01 	mov.w	ip, #1
 80207f8:	e002      	b.n	8020800 <__cmpdf2+0x4>
 80207fa:	bf00      	nop

080207fc <__cmpdf2>:
 80207fc:	f04f 0c01 	mov.w	ip, #1
 8020800:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 802080c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020810:	bf18      	it	ne
 8020812:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020816:	d01b      	beq.n	8020850 <__cmpdf2+0x54>
 8020818:	b001      	add	sp, #4
 802081a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802081e:	bf0c      	ite	eq
 8020820:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020824:	ea91 0f03 	teqne	r1, r3
 8020828:	bf02      	ittt	eq
 802082a:	ea90 0f02 	teqeq	r0, r2
 802082e:	2000      	moveq	r0, #0
 8020830:	4770      	bxeq	lr
 8020832:	f110 0f00 	cmn.w	r0, #0
 8020836:	ea91 0f03 	teq	r1, r3
 802083a:	bf58      	it	pl
 802083c:	4299      	cmppl	r1, r3
 802083e:	bf08      	it	eq
 8020840:	4290      	cmpeq	r0, r2
 8020842:	bf2c      	ite	cs
 8020844:	17d8      	asrcs	r0, r3, #31
 8020846:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802084a:	f040 0001 	orr.w	r0, r0, #1
 802084e:	4770      	bx	lr
 8020850:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020858:	d102      	bne.n	8020860 <__cmpdf2+0x64>
 802085a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802085e:	d107      	bne.n	8020870 <__cmpdf2+0x74>
 8020860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020868:	d1d6      	bne.n	8020818 <__cmpdf2+0x1c>
 802086a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802086e:	d0d3      	beq.n	8020818 <__cmpdf2+0x1c>
 8020870:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020874:	4770      	bx	lr
 8020876:	bf00      	nop

08020878 <__aeabi_cdrcmple>:
 8020878:	4684      	mov	ip, r0
 802087a:	4610      	mov	r0, r2
 802087c:	4662      	mov	r2, ip
 802087e:	468c      	mov	ip, r1
 8020880:	4619      	mov	r1, r3
 8020882:	4663      	mov	r3, ip
 8020884:	e000      	b.n	8020888 <__aeabi_cdcmpeq>
 8020886:	bf00      	nop

08020888 <__aeabi_cdcmpeq>:
 8020888:	b501      	push	{r0, lr}
 802088a:	f7ff ffb7 	bl	80207fc <__cmpdf2>
 802088e:	2800      	cmp	r0, #0
 8020890:	bf48      	it	mi
 8020892:	f110 0f00 	cmnmi.w	r0, #0
 8020896:	bd01      	pop	{r0, pc}

08020898 <__aeabi_dcmpeq>:
 8020898:	f84d ed08 	str.w	lr, [sp, #-8]!
 802089c:	f7ff fff4 	bl	8020888 <__aeabi_cdcmpeq>
 80208a0:	bf0c      	ite	eq
 80208a2:	2001      	moveq	r0, #1
 80208a4:	2000      	movne	r0, #0
 80208a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208aa:	bf00      	nop

080208ac <__aeabi_dcmplt>:
 80208ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208b0:	f7ff ffea 	bl	8020888 <__aeabi_cdcmpeq>
 80208b4:	bf34      	ite	cc
 80208b6:	2001      	movcc	r0, #1
 80208b8:	2000      	movcs	r0, #0
 80208ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80208be:	bf00      	nop

080208c0 <__aeabi_dcmple>:
 80208c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208c4:	f7ff ffe0 	bl	8020888 <__aeabi_cdcmpeq>
 80208c8:	bf94      	ite	ls
 80208ca:	2001      	movls	r0, #1
 80208cc:	2000      	movhi	r0, #0
 80208ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80208d2:	bf00      	nop

080208d4 <__aeabi_dcmpge>:
 80208d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208d8:	f7ff ffce 	bl	8020878 <__aeabi_cdrcmple>
 80208dc:	bf94      	ite	ls
 80208de:	2001      	movls	r0, #1
 80208e0:	2000      	movhi	r0, #0
 80208e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80208e6:	bf00      	nop

080208e8 <__aeabi_dcmpgt>:
 80208e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208ec:	f7ff ffc4 	bl	8020878 <__aeabi_cdrcmple>
 80208f0:	bf34      	ite	cc
 80208f2:	2001      	movcc	r0, #1
 80208f4:	2000      	movcs	r0, #0
 80208f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208fa:	bf00      	nop

080208fc <__aeabi_dcmpun>:
 80208fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020904:	d102      	bne.n	802090c <__aeabi_dcmpun+0x10>
 8020906:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802090a:	d10a      	bne.n	8020922 <__aeabi_dcmpun+0x26>
 802090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020914:	d102      	bne.n	802091c <__aeabi_dcmpun+0x20>
 8020916:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802091a:	d102      	bne.n	8020922 <__aeabi_dcmpun+0x26>
 802091c:	f04f 0000 	mov.w	r0, #0
 8020920:	4770      	bx	lr
 8020922:	f04f 0001 	mov.w	r0, #1
 8020926:	4770      	bx	lr

08020928 <__aeabi_d2iz>:
 8020928:	ea4f 0241 	mov.w	r2, r1, lsl #1
 802092c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020930:	d215      	bcs.n	802095e <__aeabi_d2iz+0x36>
 8020932:	d511      	bpl.n	8020958 <__aeabi_d2iz+0x30>
 8020934:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020938:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 802093c:	d912      	bls.n	8020964 <__aeabi_d2iz+0x3c>
 802093e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020946:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 802094a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 802094e:	fa23 f002 	lsr.w	r0, r3, r2
 8020952:	bf18      	it	ne
 8020954:	4240      	negne	r0, r0
 8020956:	4770      	bx	lr
 8020958:	f04f 0000 	mov.w	r0, #0
 802095c:	4770      	bx	lr
 802095e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020962:	d105      	bne.n	8020970 <__aeabi_d2iz+0x48>
 8020964:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020968:	bf08      	it	eq
 802096a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 802096e:	4770      	bx	lr
 8020970:	f04f 0000 	mov.w	r0, #0
 8020974:	4770      	bx	lr
 8020976:	bf00      	nop

08020978 <__aeabi_d2f>:
 8020978:	ea4f 0241 	mov.w	r2, r1, lsl #1
 802097c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020980:	bf24      	itt	cs
 8020982:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020986:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 802098a:	d90d      	bls.n	80209a8 <__aeabi_d2f+0x30>
 802098c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020990:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020994:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020998:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 802099c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80209a0:	bf08      	it	eq
 80209a2:	f020 0001 	biceq.w	r0, r0, #1
 80209a6:	4770      	bx	lr
 80209a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80209ac:	d121      	bne.n	80209f2 <__aeabi_d2f+0x7a>
 80209ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80209b2:	bfbc      	itt	lt
 80209b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80209b8:	4770      	bxlt	lr
 80209ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80209be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80209c2:	f1c2 0218 	rsb	r2, r2, #24
 80209c6:	f1c2 0c20 	rsb	ip, r2, #32
 80209ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80209ce:	fa20 f002 	lsr.w	r0, r0, r2
 80209d2:	bf18      	it	ne
 80209d4:	f040 0001 	orrne.w	r0, r0, #1
 80209d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80209dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80209e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80209e4:	ea40 000c 	orr.w	r0, r0, ip
 80209e8:	fa23 f302 	lsr.w	r3, r3, r2
 80209ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80209f0:	e7cc      	b.n	802098c <__aeabi_d2f+0x14>
 80209f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80209f6:	d107      	bne.n	8020a08 <__aeabi_d2f+0x90>
 80209f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80209fc:	bf1e      	ittt	ne
 80209fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020a02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020a06:	4770      	bxne	lr
 8020a08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020a0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020a10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020a14:	4770      	bx	lr
 8020a16:	bf00      	nop

08020a18 <__aeabi_uldivmod>:
 8020a18:	b953      	cbnz	r3, 8020a30 <__aeabi_uldivmod+0x18>
 8020a1a:	b94a      	cbnz	r2, 8020a30 <__aeabi_uldivmod+0x18>
 8020a1c:	2900      	cmp	r1, #0
 8020a1e:	bf08      	it	eq
 8020a20:	2800      	cmpeq	r0, #0
 8020a22:	bf1c      	itt	ne
 8020a24:	f04f 31ff 	movne.w	r1, #4294967295
 8020a28:	f04f 30ff 	movne.w	r0, #4294967295
 8020a2c:	f000 b972 	b.w	8020d14 <__aeabi_idiv0>
 8020a30:	f1ad 0c08 	sub.w	ip, sp, #8
 8020a34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020a38:	f000 f806 	bl	8020a48 <__udivmoddi4>
 8020a3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020a44:	b004      	add	sp, #16
 8020a46:	4770      	bx	lr

08020a48 <__udivmoddi4>:
 8020a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a4c:	9e08      	ldr	r6, [sp, #32]
 8020a4e:	4604      	mov	r4, r0
 8020a50:	4688      	mov	r8, r1
 8020a52:	2b00      	cmp	r3, #0
 8020a54:	d14b      	bne.n	8020aee <__udivmoddi4+0xa6>
 8020a56:	428a      	cmp	r2, r1
 8020a58:	4615      	mov	r5, r2
 8020a5a:	d967      	bls.n	8020b2c <__udivmoddi4+0xe4>
 8020a5c:	fab2 f282 	clz	r2, r2
 8020a60:	b14a      	cbz	r2, 8020a76 <__udivmoddi4+0x2e>
 8020a62:	f1c2 0720 	rsb	r7, r2, #32
 8020a66:	fa01 f302 	lsl.w	r3, r1, r2
 8020a6a:	fa20 f707 	lsr.w	r7, r0, r7
 8020a6e:	4095      	lsls	r5, r2
 8020a70:	ea47 0803 	orr.w	r8, r7, r3
 8020a74:	4094      	lsls	r4, r2
 8020a76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020a7a:	0c23      	lsrs	r3, r4, #16
 8020a7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8020a80:	fa1f fc85 	uxth.w	ip, r5
 8020a84:	fb0e 8817 	mls	r8, lr, r7, r8
 8020a88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020a8c:	fb07 f10c 	mul.w	r1, r7, ip
 8020a90:	4299      	cmp	r1, r3
 8020a92:	d909      	bls.n	8020aa8 <__udivmoddi4+0x60>
 8020a94:	18eb      	adds	r3, r5, r3
 8020a96:	f107 30ff 	add.w	r0, r7, #4294967295
 8020a9a:	f080 811b 	bcs.w	8020cd4 <__udivmoddi4+0x28c>
 8020a9e:	4299      	cmp	r1, r3
 8020aa0:	f240 8118 	bls.w	8020cd4 <__udivmoddi4+0x28c>
 8020aa4:	3f02      	subs	r7, #2
 8020aa6:	442b      	add	r3, r5
 8020aa8:	1a5b      	subs	r3, r3, r1
 8020aaa:	b2a4      	uxth	r4, r4
 8020aac:	fbb3 f0fe 	udiv	r0, r3, lr
 8020ab0:	fb0e 3310 	mls	r3, lr, r0, r3
 8020ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020ab8:	fb00 fc0c 	mul.w	ip, r0, ip
 8020abc:	45a4      	cmp	ip, r4
 8020abe:	d909      	bls.n	8020ad4 <__udivmoddi4+0x8c>
 8020ac0:	192c      	adds	r4, r5, r4
 8020ac2:	f100 33ff 	add.w	r3, r0, #4294967295
 8020ac6:	f080 8107 	bcs.w	8020cd8 <__udivmoddi4+0x290>
 8020aca:	45a4      	cmp	ip, r4
 8020acc:	f240 8104 	bls.w	8020cd8 <__udivmoddi4+0x290>
 8020ad0:	3802      	subs	r0, #2
 8020ad2:	442c      	add	r4, r5
 8020ad4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020ad8:	eba4 040c 	sub.w	r4, r4, ip
 8020adc:	2700      	movs	r7, #0
 8020ade:	b11e      	cbz	r6, 8020ae8 <__udivmoddi4+0xa0>
 8020ae0:	40d4      	lsrs	r4, r2
 8020ae2:	2300      	movs	r3, #0
 8020ae4:	e9c6 4300 	strd	r4, r3, [r6]
 8020ae8:	4639      	mov	r1, r7
 8020aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020aee:	428b      	cmp	r3, r1
 8020af0:	d909      	bls.n	8020b06 <__udivmoddi4+0xbe>
 8020af2:	2e00      	cmp	r6, #0
 8020af4:	f000 80eb 	beq.w	8020cce <__udivmoddi4+0x286>
 8020af8:	2700      	movs	r7, #0
 8020afa:	e9c6 0100 	strd	r0, r1, [r6]
 8020afe:	4638      	mov	r0, r7
 8020b00:	4639      	mov	r1, r7
 8020b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b06:	fab3 f783 	clz	r7, r3
 8020b0a:	2f00      	cmp	r7, #0
 8020b0c:	d147      	bne.n	8020b9e <__udivmoddi4+0x156>
 8020b0e:	428b      	cmp	r3, r1
 8020b10:	d302      	bcc.n	8020b18 <__udivmoddi4+0xd0>
 8020b12:	4282      	cmp	r2, r0
 8020b14:	f200 80fa 	bhi.w	8020d0c <__udivmoddi4+0x2c4>
 8020b18:	1a84      	subs	r4, r0, r2
 8020b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8020b1e:	2001      	movs	r0, #1
 8020b20:	4698      	mov	r8, r3
 8020b22:	2e00      	cmp	r6, #0
 8020b24:	d0e0      	beq.n	8020ae8 <__udivmoddi4+0xa0>
 8020b26:	e9c6 4800 	strd	r4, r8, [r6]
 8020b2a:	e7dd      	b.n	8020ae8 <__udivmoddi4+0xa0>
 8020b2c:	b902      	cbnz	r2, 8020b30 <__udivmoddi4+0xe8>
 8020b2e:	deff      	udf	#255	; 0xff
 8020b30:	fab2 f282 	clz	r2, r2
 8020b34:	2a00      	cmp	r2, #0
 8020b36:	f040 808f 	bne.w	8020c58 <__udivmoddi4+0x210>
 8020b3a:	1b49      	subs	r1, r1, r5
 8020b3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020b40:	fa1f f885 	uxth.w	r8, r5
 8020b44:	2701      	movs	r7, #1
 8020b46:	fbb1 fcfe 	udiv	ip, r1, lr
 8020b4a:	0c23      	lsrs	r3, r4, #16
 8020b4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8020b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020b54:	fb08 f10c 	mul.w	r1, r8, ip
 8020b58:	4299      	cmp	r1, r3
 8020b5a:	d907      	bls.n	8020b6c <__udivmoddi4+0x124>
 8020b5c:	18eb      	adds	r3, r5, r3
 8020b5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020b62:	d202      	bcs.n	8020b6a <__udivmoddi4+0x122>
 8020b64:	4299      	cmp	r1, r3
 8020b66:	f200 80cd 	bhi.w	8020d04 <__udivmoddi4+0x2bc>
 8020b6a:	4684      	mov	ip, r0
 8020b6c:	1a59      	subs	r1, r3, r1
 8020b6e:	b2a3      	uxth	r3, r4
 8020b70:	fbb1 f0fe 	udiv	r0, r1, lr
 8020b74:	fb0e 1410 	mls	r4, lr, r0, r1
 8020b78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020b7c:	fb08 f800 	mul.w	r8, r8, r0
 8020b80:	45a0      	cmp	r8, r4
 8020b82:	d907      	bls.n	8020b94 <__udivmoddi4+0x14c>
 8020b84:	192c      	adds	r4, r5, r4
 8020b86:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b8a:	d202      	bcs.n	8020b92 <__udivmoddi4+0x14a>
 8020b8c:	45a0      	cmp	r8, r4
 8020b8e:	f200 80b6 	bhi.w	8020cfe <__udivmoddi4+0x2b6>
 8020b92:	4618      	mov	r0, r3
 8020b94:	eba4 0408 	sub.w	r4, r4, r8
 8020b98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020b9c:	e79f      	b.n	8020ade <__udivmoddi4+0x96>
 8020b9e:	f1c7 0c20 	rsb	ip, r7, #32
 8020ba2:	40bb      	lsls	r3, r7
 8020ba4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020ba8:	ea4e 0e03 	orr.w	lr, lr, r3
 8020bac:	fa01 f407 	lsl.w	r4, r1, r7
 8020bb0:	fa20 f50c 	lsr.w	r5, r0, ip
 8020bb4:	fa21 f30c 	lsr.w	r3, r1, ip
 8020bb8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020bbc:	4325      	orrs	r5, r4
 8020bbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8020bc2:	0c2c      	lsrs	r4, r5, #16
 8020bc4:	fb08 3319 	mls	r3, r8, r9, r3
 8020bc8:	fa1f fa8e 	uxth.w	sl, lr
 8020bcc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020bd0:	fb09 f40a 	mul.w	r4, r9, sl
 8020bd4:	429c      	cmp	r4, r3
 8020bd6:	fa02 f207 	lsl.w	r2, r2, r7
 8020bda:	fa00 f107 	lsl.w	r1, r0, r7
 8020bde:	d90b      	bls.n	8020bf8 <__udivmoddi4+0x1b0>
 8020be0:	eb1e 0303 	adds.w	r3, lr, r3
 8020be4:	f109 30ff 	add.w	r0, r9, #4294967295
 8020be8:	f080 8087 	bcs.w	8020cfa <__udivmoddi4+0x2b2>
 8020bec:	429c      	cmp	r4, r3
 8020bee:	f240 8084 	bls.w	8020cfa <__udivmoddi4+0x2b2>
 8020bf2:	f1a9 0902 	sub.w	r9, r9, #2
 8020bf6:	4473      	add	r3, lr
 8020bf8:	1b1b      	subs	r3, r3, r4
 8020bfa:	b2ad      	uxth	r5, r5
 8020bfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8020c00:	fb08 3310 	mls	r3, r8, r0, r3
 8020c04:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020c08:	fb00 fa0a 	mul.w	sl, r0, sl
 8020c0c:	45a2      	cmp	sl, r4
 8020c0e:	d908      	bls.n	8020c22 <__udivmoddi4+0x1da>
 8020c10:	eb1e 0404 	adds.w	r4, lr, r4
 8020c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8020c18:	d26b      	bcs.n	8020cf2 <__udivmoddi4+0x2aa>
 8020c1a:	45a2      	cmp	sl, r4
 8020c1c:	d969      	bls.n	8020cf2 <__udivmoddi4+0x2aa>
 8020c1e:	3802      	subs	r0, #2
 8020c20:	4474      	add	r4, lr
 8020c22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020c26:	fba0 8902 	umull	r8, r9, r0, r2
 8020c2a:	eba4 040a 	sub.w	r4, r4, sl
 8020c2e:	454c      	cmp	r4, r9
 8020c30:	46c2      	mov	sl, r8
 8020c32:	464b      	mov	r3, r9
 8020c34:	d354      	bcc.n	8020ce0 <__udivmoddi4+0x298>
 8020c36:	d051      	beq.n	8020cdc <__udivmoddi4+0x294>
 8020c38:	2e00      	cmp	r6, #0
 8020c3a:	d069      	beq.n	8020d10 <__udivmoddi4+0x2c8>
 8020c3c:	ebb1 050a 	subs.w	r5, r1, sl
 8020c40:	eb64 0403 	sbc.w	r4, r4, r3
 8020c44:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020c48:	40fd      	lsrs	r5, r7
 8020c4a:	40fc      	lsrs	r4, r7
 8020c4c:	ea4c 0505 	orr.w	r5, ip, r5
 8020c50:	e9c6 5400 	strd	r5, r4, [r6]
 8020c54:	2700      	movs	r7, #0
 8020c56:	e747      	b.n	8020ae8 <__udivmoddi4+0xa0>
 8020c58:	f1c2 0320 	rsb	r3, r2, #32
 8020c5c:	fa20 f703 	lsr.w	r7, r0, r3
 8020c60:	4095      	lsls	r5, r2
 8020c62:	fa01 f002 	lsl.w	r0, r1, r2
 8020c66:	fa21 f303 	lsr.w	r3, r1, r3
 8020c6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020c6e:	4338      	orrs	r0, r7
 8020c70:	0c01      	lsrs	r1, r0, #16
 8020c72:	fbb3 f7fe 	udiv	r7, r3, lr
 8020c76:	fa1f f885 	uxth.w	r8, r5
 8020c7a:	fb0e 3317 	mls	r3, lr, r7, r3
 8020c7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c82:	fb07 f308 	mul.w	r3, r7, r8
 8020c86:	428b      	cmp	r3, r1
 8020c88:	fa04 f402 	lsl.w	r4, r4, r2
 8020c8c:	d907      	bls.n	8020c9e <__udivmoddi4+0x256>
 8020c8e:	1869      	adds	r1, r5, r1
 8020c90:	f107 3cff 	add.w	ip, r7, #4294967295
 8020c94:	d22f      	bcs.n	8020cf6 <__udivmoddi4+0x2ae>
 8020c96:	428b      	cmp	r3, r1
 8020c98:	d92d      	bls.n	8020cf6 <__udivmoddi4+0x2ae>
 8020c9a:	3f02      	subs	r7, #2
 8020c9c:	4429      	add	r1, r5
 8020c9e:	1acb      	subs	r3, r1, r3
 8020ca0:	b281      	uxth	r1, r0
 8020ca2:	fbb3 f0fe 	udiv	r0, r3, lr
 8020ca6:	fb0e 3310 	mls	r3, lr, r0, r3
 8020caa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020cae:	fb00 f308 	mul.w	r3, r0, r8
 8020cb2:	428b      	cmp	r3, r1
 8020cb4:	d907      	bls.n	8020cc6 <__udivmoddi4+0x27e>
 8020cb6:	1869      	adds	r1, r5, r1
 8020cb8:	f100 3cff 	add.w	ip, r0, #4294967295
 8020cbc:	d217      	bcs.n	8020cee <__udivmoddi4+0x2a6>
 8020cbe:	428b      	cmp	r3, r1
 8020cc0:	d915      	bls.n	8020cee <__udivmoddi4+0x2a6>
 8020cc2:	3802      	subs	r0, #2
 8020cc4:	4429      	add	r1, r5
 8020cc6:	1ac9      	subs	r1, r1, r3
 8020cc8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020ccc:	e73b      	b.n	8020b46 <__udivmoddi4+0xfe>
 8020cce:	4637      	mov	r7, r6
 8020cd0:	4630      	mov	r0, r6
 8020cd2:	e709      	b.n	8020ae8 <__udivmoddi4+0xa0>
 8020cd4:	4607      	mov	r7, r0
 8020cd6:	e6e7      	b.n	8020aa8 <__udivmoddi4+0x60>
 8020cd8:	4618      	mov	r0, r3
 8020cda:	e6fb      	b.n	8020ad4 <__udivmoddi4+0x8c>
 8020cdc:	4541      	cmp	r1, r8
 8020cde:	d2ab      	bcs.n	8020c38 <__udivmoddi4+0x1f0>
 8020ce0:	ebb8 0a02 	subs.w	sl, r8, r2
 8020ce4:	eb69 020e 	sbc.w	r2, r9, lr
 8020ce8:	3801      	subs	r0, #1
 8020cea:	4613      	mov	r3, r2
 8020cec:	e7a4      	b.n	8020c38 <__udivmoddi4+0x1f0>
 8020cee:	4660      	mov	r0, ip
 8020cf0:	e7e9      	b.n	8020cc6 <__udivmoddi4+0x27e>
 8020cf2:	4618      	mov	r0, r3
 8020cf4:	e795      	b.n	8020c22 <__udivmoddi4+0x1da>
 8020cf6:	4667      	mov	r7, ip
 8020cf8:	e7d1      	b.n	8020c9e <__udivmoddi4+0x256>
 8020cfa:	4681      	mov	r9, r0
 8020cfc:	e77c      	b.n	8020bf8 <__udivmoddi4+0x1b0>
 8020cfe:	3802      	subs	r0, #2
 8020d00:	442c      	add	r4, r5
 8020d02:	e747      	b.n	8020b94 <__udivmoddi4+0x14c>
 8020d04:	f1ac 0c02 	sub.w	ip, ip, #2
 8020d08:	442b      	add	r3, r5
 8020d0a:	e72f      	b.n	8020b6c <__udivmoddi4+0x124>
 8020d0c:	4638      	mov	r0, r7
 8020d0e:	e708      	b.n	8020b22 <__udivmoddi4+0xda>
 8020d10:	4637      	mov	r7, r6
 8020d12:	e6e9      	b.n	8020ae8 <__udivmoddi4+0xa0>

08020d14 <__aeabi_idiv0>:
 8020d14:	4770      	bx	lr
 8020d16:	bf00      	nop

08020d18 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"
#include "declare_extern.h"

Encoder::Encoder() : distance_(0)
 8020d18:	b480      	push	{r7}
 8020d1a:	b083      	sub	sp, #12
 8020d1c:	af00      	add	r7, sp, #0
 8020d1e:	6078      	str	r0, [r7, #4]
                   , distance_stack_(0)
                   , distance_difference_(0) {}
 8020d20:	687b      	ldr	r3, [r7, #4]
 8020d22:	f04f 0200 	mov.w	r2, #0
 8020d26:	601a      	str	r2, [r3, #0]
 8020d28:	687b      	ldr	r3, [r7, #4]
 8020d2a:	f04f 0200 	mov.w	r2, #0
 8020d2e:	605a      	str	r2, [r3, #4]
 8020d30:	687b      	ldr	r3, [r7, #4]
 8020d32:	f04f 0200 	mov.w	r2, #0
 8020d36:	609a      	str	r2, [r3, #8]
 8020d38:	687b      	ldr	r3, [r7, #4]
 8020d3a:	4618      	mov	r0, r3
 8020d3c:	370c      	adds	r7, #12
 8020d3e:	46bd      	mov	sp, r7
 8020d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d44:	4770      	bx	lr
	...

08020d48 <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020d48:	b580      	push	{r7, lr}
 8020d4a:	b082      	sub	sp, #8
 8020d4c:	af00      	add	r7, sp, #0
 8020d4e:	6078      	str	r0, [r7, #4]
	if(HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL) != HAL_OK)
 8020d50:	213c      	movs	r1, #60	; 0x3c
 8020d52:	4812      	ldr	r0, [pc, #72]	; (8020d9c <_ZN7Encoder4InitEv+0x54>)
 8020d54:	f004 fff4 	bl	8025d40 <HAL_TIM_Encoder_Start>
 8020d58:	4603      	mov	r3, r0
 8020d5a:	2b00      	cmp	r3, #0
 8020d5c:	bf14      	ite	ne
 8020d5e:	2301      	movne	r3, #1
 8020d60:	2300      	moveq	r3, #0
 8020d62:	b2db      	uxtb	r3, r3
 8020d64:	2b00      	cmp	r3, #0
 8020d66:	d004      	beq.n	8020d72 <_ZN7Encoder4InitEv+0x2a>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim8 = true;
 8020d68:	4b0d      	ldr	r3, [pc, #52]	; (8020da0 <_ZN7Encoder4InitEv+0x58>)
 8020d6a:	2201      	movs	r2, #1
 8020d6c:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d6e:	f001 fa75 	bl	802225c <Error_Handler>
	}

	if(HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL) != HAL_OK)
 8020d72:	213c      	movs	r1, #60	; 0x3c
 8020d74:	480b      	ldr	r0, [pc, #44]	; (8020da4 <_ZN7Encoder4InitEv+0x5c>)
 8020d76:	f004 ffe3 	bl	8025d40 <HAL_TIM_Encoder_Start>
 8020d7a:	4603      	mov	r3, r0
 8020d7c:	2b00      	cmp	r3, #0
 8020d7e:	bf14      	ite	ne
 8020d80:	2301      	movne	r3, #1
 8020d82:	2300      	moveq	r3, #0
 8020d84:	b2db      	uxtb	r3, r3
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	d004      	beq.n	8020d94 <_ZN7Encoder4InitEv+0x4c>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim4 = true;
 8020d8a:	4b07      	ldr	r3, [pc, #28]	; (8020da8 <_ZN7Encoder4InitEv+0x60>)
 8020d8c:	2201      	movs	r2, #1
 8020d8e:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d90:	f001 fa64 	bl	802225c <Error_Handler>
	}
}
 8020d94:	bf00      	nop
 8020d96:	3708      	adds	r7, #8
 8020d98:	46bd      	mov	sp, r7
 8020d9a:	bd80      	pop	{r7, pc}
 8020d9c:	20010fb4 	.word	0x20010fb4
 8020da0:	20000209 	.word	0x20000209
 8020da4:	20010ff4 	.word	0x20010ff4
 8020da8:	20000208 	.word	0x20000208

08020dac <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"
#include "declare_extern.h"

Iim42652::Iim42652() : degree_stack_z_(0) {}
 8020dac:	b490      	push	{r4, r7}
 8020dae:	b082      	sub	sp, #8
 8020db0:	af00      	add	r7, sp, #0
 8020db2:	6078      	str	r0, [r7, #4]
 8020db4:	687a      	ldr	r2, [r7, #4]
 8020db6:	f04f 0300 	mov.w	r3, #0
 8020dba:	f04f 0400 	mov.w	r4, #0
 8020dbe:	e9c2 3400 	strd	r3, r4, [r2]
 8020dc2:	687b      	ldr	r3, [r7, #4]
 8020dc4:	4618      	mov	r0, r3
 8020dc6:	3708      	adds	r7, #8
 8020dc8:	46bd      	mov	sp, r7
 8020dca:	bc90      	pop	{r4, r7}
 8020dcc:	4770      	bx	lr
	...

08020dd0 <_ZN8Iim426524InitEv>:

uint8_t Iim42652::Init()
{
 8020dd0:	b580      	push	{r7, lr}
 8020dd2:	b084      	sub	sp, #16
 8020dd4:	af00      	add	r7, sp, #0
 8020dd6:	6078      	str	r0, [r7, #4]
    /* bank_select */
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'L');
 8020dd8:	234c      	movs	r3, #76	; 0x4c
 8020dda:	2200      	movs	r2, #0
 8020ddc:	2176      	movs	r1, #118	; 0x76
 8020dde:	6878      	ldr	r0, [r7, #4]
 8020de0:	f000 f908 	bl	8020ff4 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8020de4:	2064      	movs	r0, #100	; 0x64
 8020de6:	f002 f94b 	bl	8023080 <HAL_Delay>
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'R');
 8020dea:	2352      	movs	r3, #82	; 0x52
 8020dec:	2200      	movs	r2, #0
 8020dee:	2176      	movs	r1, #118	; 0x76
 8020df0:	6878      	ldr	r0, [r7, #4]
 8020df2:	f000 f8ff 	bl	8020ff4 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8020df6:	2064      	movs	r0, #100	; 0x64
 8020df8:	f002 f942 	bl	8023080 <HAL_Delay>
    /* power_off */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'L');
 8020dfc:	234c      	movs	r3, #76	; 0x4c
 8020dfe:	2200      	movs	r2, #0
 8020e00:	214e      	movs	r1, #78	; 0x4e
 8020e02:	6878      	ldr	r0, [r7, #4]
 8020e04:	f000 f8f6 	bl	8020ff4 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8020e08:	2064      	movs	r0, #100	; 0x64
 8020e0a:	f002 f939 	bl	8023080 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'R');
 8020e0e:	2352      	movs	r3, #82	; 0x52
 8020e10:	2200      	movs	r2, #0
 8020e12:	214e      	movs	r1, #78	; 0x4e
 8020e14:	6878      	ldr	r0, [r7, #4]
 8020e16:	f000 f8ed 	bl	8020ff4 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8020e1a:	2064      	movs	r0, #100	; 0x64
 8020e1c:	f002 f930 	bl	8023080 <HAL_Delay>

    uint8_t who_l  = Read(WHO_AM_I_ADD, 'L');
 8020e20:	224c      	movs	r2, #76	; 0x4c
 8020e22:	2175      	movs	r1, #117	; 0x75
 8020e24:	6878      	ldr	r0, [r7, #4]
 8020e26:	f000 f897 	bl	8020f58 <_ZN8Iim426524ReadEhc>
 8020e2a:	4603      	mov	r3, r0
 8020e2c:	73fb      	strb	r3, [r7, #15]
    uint8_t who_r  = Read(WHO_AM_I_ADD, 'R');
 8020e2e:	2252      	movs	r2, #82	; 0x52
 8020e30:	2175      	movs	r1, #117	; 0x75
 8020e32:	6878      	ldr	r0, [r7, #4]
 8020e34:	f000 f890 	bl	8020f58 <_ZN8Iim426524ReadEhc>
 8020e38:	4603      	mov	r3, r0
 8020e3a:	73bb      	strb	r3, [r7, #14]
    uint8_t bank_l = Read(REG_BANK_SEL_ADD, 'L');
 8020e3c:	224c      	movs	r2, #76	; 0x4c
 8020e3e:	2176      	movs	r1, #118	; 0x76
 8020e40:	6878      	ldr	r0, [r7, #4]
 8020e42:	f000 f889 	bl	8020f58 <_ZN8Iim426524ReadEhc>
 8020e46:	4603      	mov	r3, r0
 8020e48:	737b      	strb	r3, [r7, #13]
    uint8_t bank_r = Read(REG_BANK_SEL_ADD, 'R');
 8020e4a:	2252      	movs	r2, #82	; 0x52
 8020e4c:	2176      	movs	r1, #118	; 0x76
 8020e4e:	6878      	ldr	r0, [r7, #4]
 8020e50:	f000 f882 	bl	8020f58 <_ZN8Iim426524ReadEhc>
 8020e54:	4603      	mov	r3, r0
 8020e56:	733b      	strb	r3, [r7, #12]
    uint8_t pwr_l  = Read(PWR_MGMT0_ADD, 'L');
 8020e58:	224c      	movs	r2, #76	; 0x4c
 8020e5a:	214e      	movs	r1, #78	; 0x4e
 8020e5c:	6878      	ldr	r0, [r7, #4]
 8020e5e:	f000 f87b 	bl	8020f58 <_ZN8Iim426524ReadEhc>
 8020e62:	4603      	mov	r3, r0
 8020e64:	72fb      	strb	r3, [r7, #11]
    uint8_t pwr_r  = Read(PWR_MGMT0_ADD, 'R');
 8020e66:	2252      	movs	r2, #82	; 0x52
 8020e68:	214e      	movs	r1, #78	; 0x4e
 8020e6a:	6878      	ldr	r0, [r7, #4]
 8020e6c:	f000 f874 	bl	8020f58 <_ZN8Iim426524ReadEhc>
 8020e70:	4603      	mov	r3, r0
 8020e72:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_who_l  = who_l;  g_imu_who_r  = who_r;
 8020e74:	4a32      	ldr	r2, [pc, #200]	; (8020f40 <_ZN8Iim426524InitEv+0x170>)
 8020e76:	7bfb      	ldrb	r3, [r7, #15]
 8020e78:	7013      	strb	r3, [r2, #0]
 8020e7a:	4a32      	ldr	r2, [pc, #200]	; (8020f44 <_ZN8Iim426524InitEv+0x174>)
 8020e7c:	7bbb      	ldrb	r3, [r7, #14]
 8020e7e:	7013      	strb	r3, [r2, #0]
    g_imu_bank_l = bank_l; g_imu_bank_r = bank_r;
 8020e80:	4a31      	ldr	r2, [pc, #196]	; (8020f48 <_ZN8Iim426524InitEv+0x178>)
 8020e82:	7b7b      	ldrb	r3, [r7, #13]
 8020e84:	7013      	strb	r3, [r2, #0]
 8020e86:	4a31      	ldr	r2, [pc, #196]	; (8020f4c <_ZN8Iim426524InitEv+0x17c>)
 8020e88:	7b3b      	ldrb	r3, [r7, #12]
 8020e8a:	7013      	strb	r3, [r2, #0]
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 8020e8c:	4a30      	ldr	r2, [pc, #192]	; (8020f50 <_ZN8Iim426524InitEv+0x180>)
 8020e8e:	7afb      	ldrb	r3, [r7, #11]
 8020e90:	7013      	strb	r3, [r2, #0]
 8020e92:	4a30      	ldr	r2, [pc, #192]	; (8020f54 <_ZN8Iim426524InitEv+0x184>)
 8020e94:	7abb      	ldrb	r3, [r7, #10]
 8020e96:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(who_l != WHO_AM_I_RES)      return 0x01;
 8020e98:	7bfb      	ldrb	r3, [r7, #15]
 8020e9a:	2b6f      	cmp	r3, #111	; 0x6f
 8020e9c:	d001      	beq.n	8020ea2 <_ZN8Iim426524InitEv+0xd2>
 8020e9e:	2301      	movs	r3, #1
 8020ea0:	e049      	b.n	8020f36 <_ZN8Iim426524InitEv+0x166>
    if(who_r != WHO_AM_I_RES)      return 0x02;
 8020ea2:	7bbb      	ldrb	r3, [r7, #14]
 8020ea4:	2b6f      	cmp	r3, #111	; 0x6f
 8020ea6:	d001      	beq.n	8020eac <_ZN8Iim426524InitEv+0xdc>
 8020ea8:	2302      	movs	r3, #2
 8020eaa:	e044      	b.n	8020f36 <_ZN8Iim426524InitEv+0x166>
    if(bank_l != REG_BANK_SEL_RES) return 0x03;
 8020eac:	7b7b      	ldrb	r3, [r7, #13]
 8020eae:	2b00      	cmp	r3, #0
 8020eb0:	d001      	beq.n	8020eb6 <_ZN8Iim426524InitEv+0xe6>
 8020eb2:	2303      	movs	r3, #3
 8020eb4:	e03f      	b.n	8020f36 <_ZN8Iim426524InitEv+0x166>
    if(bank_r != REG_BANK_SEL_RES) return 0x04;
 8020eb6:	7b3b      	ldrb	r3, [r7, #12]
 8020eb8:	2b00      	cmp	r3, #0
 8020eba:	d001      	beq.n	8020ec0 <_ZN8Iim426524InitEv+0xf0>
 8020ebc:	2304      	movs	r3, #4
 8020ebe:	e03a      	b.n	8020f36 <_ZN8Iim426524InitEv+0x166>
    if(pwr_l != PWR_MGMT0_RES)     return 0x05;
 8020ec0:	7afb      	ldrb	r3, [r7, #11]
 8020ec2:	2b00      	cmp	r3, #0
 8020ec4:	d001      	beq.n	8020eca <_ZN8Iim426524InitEv+0xfa>
 8020ec6:	2305      	movs	r3, #5
 8020ec8:	e035      	b.n	8020f36 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_RES)     return 0x06;
 8020eca:	7abb      	ldrb	r3, [r7, #10]
 8020ecc:	2b00      	cmp	r3, #0
 8020ece:	d001      	beq.n	8020ed4 <_ZN8Iim426524InitEv+0x104>
 8020ed0:	2306      	movs	r3, #6
 8020ed2:	e030      	b.n	8020f36 <_ZN8Iim426524InitEv+0x166>

    /* power_on */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'L');
 8020ed4:	234c      	movs	r3, #76	; 0x4c
 8020ed6:	220f      	movs	r2, #15
 8020ed8:	214e      	movs	r1, #78	; 0x4e
 8020eda:	6878      	ldr	r0, [r7, #4]
 8020edc:	f000 f88a 	bl	8020ff4 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8020ee0:	2064      	movs	r0, #100	; 0x64
 8020ee2:	f002 f8cd 	bl	8023080 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'R');
 8020ee6:	2352      	movs	r3, #82	; 0x52
 8020ee8:	220f      	movs	r2, #15
 8020eea:	214e      	movs	r1, #78	; 0x4e
 8020eec:	6878      	ldr	r0, [r7, #4]
 8020eee:	f000 f881 	bl	8020ff4 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8020ef2:	2064      	movs	r0, #100	; 0x64
 8020ef4:	f002 f8c4 	bl	8023080 <HAL_Delay>
    pwr_l = Read(PWR_MGMT0_ADD, 'L');
 8020ef8:	224c      	movs	r2, #76	; 0x4c
 8020efa:	214e      	movs	r1, #78	; 0x4e
 8020efc:	6878      	ldr	r0, [r7, #4]
 8020efe:	f000 f82b 	bl	8020f58 <_ZN8Iim426524ReadEhc>
 8020f02:	4603      	mov	r3, r0
 8020f04:	72fb      	strb	r3, [r7, #11]
    pwr_r = Read(PWR_MGMT0_ADD, 'R');
 8020f06:	2252      	movs	r2, #82	; 0x52
 8020f08:	214e      	movs	r1, #78	; 0x4e
 8020f0a:	6878      	ldr	r0, [r7, #4]
 8020f0c:	f000 f824 	bl	8020f58 <_ZN8Iim426524ReadEhc>
 8020f10:	4603      	mov	r3, r0
 8020f12:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 8020f14:	4a0e      	ldr	r2, [pc, #56]	; (8020f50 <_ZN8Iim426524InitEv+0x180>)
 8020f16:	7afb      	ldrb	r3, [r7, #11]
 8020f18:	7013      	strb	r3, [r2, #0]
 8020f1a:	4a0e      	ldr	r2, [pc, #56]	; (8020f54 <_ZN8Iim426524InitEv+0x184>)
 8020f1c:	7abb      	ldrb	r3, [r7, #10]
 8020f1e:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(pwr_l != PWR_MGMT0_ON) return 0x07;
 8020f20:	7afb      	ldrb	r3, [r7, #11]
 8020f22:	2b0f      	cmp	r3, #15
 8020f24:	d001      	beq.n	8020f2a <_ZN8Iim426524InitEv+0x15a>
 8020f26:	2307      	movs	r3, #7
 8020f28:	e005      	b.n	8020f36 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_ON) return 0x08;
 8020f2a:	7abb      	ldrb	r3, [r7, #10]
 8020f2c:	2b0f      	cmp	r3, #15
 8020f2e:	d001      	beq.n	8020f34 <_ZN8Iim426524InitEv+0x164>
 8020f30:	2308      	movs	r3, #8
 8020f32:	e000      	b.n	8020f36 <_ZN8Iim426524InitEv+0x166>

    return 0x09;
 8020f34:	2309      	movs	r3, #9
}
 8020f36:	4618      	mov	r0, r3
 8020f38:	3710      	adds	r7, #16
 8020f3a:	46bd      	mov	sp, r7
 8020f3c:	bd80      	pop	{r7, pc}
 8020f3e:	bf00      	nop
 8020f40:	2000020a 	.word	0x2000020a
 8020f44:	2000020b 	.word	0x2000020b
 8020f48:	2000020c 	.word	0x2000020c
 8020f4c:	2000020d 	.word	0x2000020d
 8020f50:	2000020e 	.word	0x2000020e
 8020f54:	2000020f 	.word	0x2000020f

08020f58 <_ZN8Iim426524ReadEhc>:

uint8_t Iim42652::Read(uint8_t send_address, char imu_ic_lr)
{
 8020f58:	b580      	push	{r7, lr}
 8020f5a:	b084      	sub	sp, #16
 8020f5c:	af00      	add	r7, sp, #0
 8020f5e:	6078      	str	r0, [r7, #4]
 8020f60:	460b      	mov	r3, r1
 8020f62:	70fb      	strb	r3, [r7, #3]
 8020f64:	4613      	mov	r3, r2
 8020f66:	70bb      	strb	r3, [r7, #2]
    uint8_t receive_reset_value = 0x00;
 8020f68:	2300      	movs	r3, #0
 8020f6a:	73fb      	strb	r3, [r7, #15]

    send_address = send_address | 0x80; // Read 1--- ----
 8020f6c:	78fb      	ldrb	r3, [r7, #3]
 8020f6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8020f72:	b2db      	uxtb	r3, r3
 8020f74:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 8020f76:	78bb      	ldrb	r3, [r7, #2]
 8020f78:	2b4c      	cmp	r3, #76	; 0x4c
 8020f7a:	d106      	bne.n	8020f8a <_ZN8Iim426524ReadEhc+0x32>
 8020f7c:	2200      	movs	r2, #0
 8020f7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8020f82:	4819      	ldr	r0, [pc, #100]	; (8020fe8 <_ZN8Iim426524ReadEhc+0x90>)
 8020f84:	f003 fac4 	bl	8024510 <HAL_GPIO_WritePin>
 8020f88:	e008      	b.n	8020f9c <_ZN8Iim426524ReadEhc+0x44>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 8020f8a:	78bb      	ldrb	r3, [r7, #2]
 8020f8c:	2b52      	cmp	r3, #82	; 0x52
 8020f8e:	d105      	bne.n	8020f9c <_ZN8Iim426524ReadEhc+0x44>
 8020f90:	2200      	movs	r2, #0
 8020f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020f96:	4815      	ldr	r0, [pc, #84]	; (8020fec <_ZN8Iim426524ReadEhc+0x94>)
 8020f98:	f003 faba 	bl	8024510 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 8020f9c:	1cf9      	adds	r1, r7, #3
 8020f9e:	2364      	movs	r3, #100	; 0x64
 8020fa0:	2201      	movs	r2, #1
 8020fa2:	4813      	ldr	r0, [pc, #76]	; (8020ff0 <_ZN8Iim426524ReadEhc+0x98>)
 8020fa4:	f004 f892 	bl	80250cc <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &receive_reset_value, 1, 100);
 8020fa8:	f107 010f 	add.w	r1, r7, #15
 8020fac:	2364      	movs	r3, #100	; 0x64
 8020fae:	2201      	movs	r2, #1
 8020fb0:	480f      	ldr	r0, [pc, #60]	; (8020ff0 <_ZN8Iim426524ReadEhc+0x98>)
 8020fb2:	f004 f9bf 	bl	8025334 <HAL_SPI_Receive>

    if(imu_ic_lr == 'L') CS_SET_L;
 8020fb6:	78bb      	ldrb	r3, [r7, #2]
 8020fb8:	2b4c      	cmp	r3, #76	; 0x4c
 8020fba:	d106      	bne.n	8020fca <_ZN8Iim426524ReadEhc+0x72>
 8020fbc:	2201      	movs	r2, #1
 8020fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8020fc2:	4809      	ldr	r0, [pc, #36]	; (8020fe8 <_ZN8Iim426524ReadEhc+0x90>)
 8020fc4:	f003 faa4 	bl	8024510 <HAL_GPIO_WritePin>
 8020fc8:	e008      	b.n	8020fdc <_ZN8Iim426524ReadEhc+0x84>
    else if(imu_ic_lr == 'R') CS_SET_R;
 8020fca:	78bb      	ldrb	r3, [r7, #2]
 8020fcc:	2b52      	cmp	r3, #82	; 0x52
 8020fce:	d105      	bne.n	8020fdc <_ZN8Iim426524ReadEhc+0x84>
 8020fd0:	2201      	movs	r2, #1
 8020fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020fd6:	4805      	ldr	r0, [pc, #20]	; (8020fec <_ZN8Iim426524ReadEhc+0x94>)
 8020fd8:	f003 fa9a 	bl	8024510 <HAL_GPIO_WritePin>
    
    return receive_reset_value;
 8020fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8020fde:	4618      	mov	r0, r3
 8020fe0:	3710      	adds	r7, #16
 8020fe2:	46bd      	mov	sp, r7
 8020fe4:	bd80      	pop	{r7, pc}
 8020fe6:	bf00      	nop
 8020fe8:	40020400 	.word	0x40020400
 8020fec:	40020000 	.word	0x40020000
 8020ff0:	20011108 	.word	0x20011108

08020ff4 <_ZN8Iim426525WriteEhhc>:

void Iim42652::Write(uint8_t send_address, uint8_t send_data, char imu_ic_lr)
{
 8020ff4:	b580      	push	{r7, lr}
 8020ff6:	b082      	sub	sp, #8
 8020ff8:	af00      	add	r7, sp, #0
 8020ffa:	6078      	str	r0, [r7, #4]
 8020ffc:	4608      	mov	r0, r1
 8020ffe:	4611      	mov	r1, r2
 8021000:	461a      	mov	r2, r3
 8021002:	4603      	mov	r3, r0
 8021004:	70fb      	strb	r3, [r7, #3]
 8021006:	460b      	mov	r3, r1
 8021008:	70bb      	strb	r3, [r7, #2]
 802100a:	4613      	mov	r3, r2
 802100c:	707b      	strb	r3, [r7, #1]
    send_address = send_address & 0x7F; // Write 0--- ----
 802100e:	78fb      	ldrb	r3, [r7, #3]
 8021010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021014:	b2db      	uxtb	r3, r3
 8021016:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 8021018:	787b      	ldrb	r3, [r7, #1]
 802101a:	2b4c      	cmp	r3, #76	; 0x4c
 802101c:	d106      	bne.n	802102c <_ZN8Iim426525WriteEhhc+0x38>
 802101e:	2200      	movs	r2, #0
 8021020:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8021024:	4817      	ldr	r0, [pc, #92]	; (8021084 <_ZN8Iim426525WriteEhhc+0x90>)
 8021026:	f003 fa73 	bl	8024510 <HAL_GPIO_WritePin>
 802102a:	e008      	b.n	802103e <_ZN8Iim426525WriteEhhc+0x4a>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 802102c:	787b      	ldrb	r3, [r7, #1]
 802102e:	2b52      	cmp	r3, #82	; 0x52
 8021030:	d105      	bne.n	802103e <_ZN8Iim426525WriteEhhc+0x4a>
 8021032:	2200      	movs	r2, #0
 8021034:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021038:	4813      	ldr	r0, [pc, #76]	; (8021088 <_ZN8Iim426525WriteEhhc+0x94>)
 802103a:	f003 fa69 	bl	8024510 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 802103e:	1cf9      	adds	r1, r7, #3
 8021040:	2364      	movs	r3, #100	; 0x64
 8021042:	2201      	movs	r2, #1
 8021044:	4811      	ldr	r0, [pc, #68]	; (802108c <_ZN8Iim426525WriteEhhc+0x98>)
 8021046:	f004 f841 	bl	80250cc <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &send_data, 1, 100);
 802104a:	1cb9      	adds	r1, r7, #2
 802104c:	2364      	movs	r3, #100	; 0x64
 802104e:	2201      	movs	r2, #1
 8021050:	480e      	ldr	r0, [pc, #56]	; (802108c <_ZN8Iim426525WriteEhhc+0x98>)
 8021052:	f004 f83b 	bl	80250cc <HAL_SPI_Transmit>

    if(imu_ic_lr == 'L') CS_SET_L;
 8021056:	787b      	ldrb	r3, [r7, #1]
 8021058:	2b4c      	cmp	r3, #76	; 0x4c
 802105a:	d106      	bne.n	802106a <_ZN8Iim426525WriteEhhc+0x76>
 802105c:	2201      	movs	r2, #1
 802105e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8021062:	4808      	ldr	r0, [pc, #32]	; (8021084 <_ZN8Iim426525WriteEhhc+0x90>)
 8021064:	f003 fa54 	bl	8024510 <HAL_GPIO_WritePin>
    else if(imu_ic_lr == 'R') CS_SET_R;
}
 8021068:	e008      	b.n	802107c <_ZN8Iim426525WriteEhhc+0x88>
    else if(imu_ic_lr == 'R') CS_SET_R;
 802106a:	787b      	ldrb	r3, [r7, #1]
 802106c:	2b52      	cmp	r3, #82	; 0x52
 802106e:	d105      	bne.n	802107c <_ZN8Iim426525WriteEhhc+0x88>
 8021070:	2201      	movs	r2, #1
 8021072:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021076:	4804      	ldr	r0, [pc, #16]	; (8021088 <_ZN8Iim426525WriteEhhc+0x94>)
 8021078:	f003 fa4a 	bl	8024510 <HAL_GPIO_WritePin>
}
 802107c:	bf00      	nop
 802107e:	3708      	adds	r7, #8
 8021080:	46bd      	mov	sp, r7
 8021082:	bd80      	pop	{r7, pc}
 8021084:	40020400 	.word	0x40020400
 8021088:	40020000 	.word	0x40020000
 802108c:	20011108 	.word	0x20011108

08021090 <_ZN8Iim426529Read2ByteEhhc>:

    return CheckRead(send_address, send_data, imu_ic_lr);
}

int16_t Iim42652::Read2Byte(uint8_t upper_address, uint8_t lower_address, char imu_ic_lr)
{
 8021090:	b580      	push	{r7, lr}
 8021092:	b084      	sub	sp, #16
 8021094:	af00      	add	r7, sp, #0
 8021096:	6078      	str	r0, [r7, #4]
 8021098:	4608      	mov	r0, r1
 802109a:	4611      	mov	r1, r2
 802109c:	461a      	mov	r2, r3
 802109e:	4603      	mov	r3, r0
 80210a0:	70fb      	strb	r3, [r7, #3]
 80210a2:	460b      	mov	r3, r1
 80210a4:	70bb      	strb	r3, [r7, #2]
 80210a6:	4613      	mov	r3, r2
 80210a8:	707b      	strb	r3, [r7, #1]
    int16_t upper_receive, lower_receive;

    upper_receive = static_cast<int16_t>(Read(upper_address, imu_ic_lr));
 80210aa:	787a      	ldrb	r2, [r7, #1]
 80210ac:	78fb      	ldrb	r3, [r7, #3]
 80210ae:	4619      	mov	r1, r3
 80210b0:	6878      	ldr	r0, [r7, #4]
 80210b2:	f7ff ff51 	bl	8020f58 <_ZN8Iim426524ReadEhc>
 80210b6:	4603      	mov	r3, r0
 80210b8:	81fb      	strh	r3, [r7, #14]
    lower_receive = static_cast<int16_t>(Read(lower_address, imu_ic_lr));
 80210ba:	787a      	ldrb	r2, [r7, #1]
 80210bc:	78bb      	ldrb	r3, [r7, #2]
 80210be:	4619      	mov	r1, r3
 80210c0:	6878      	ldr	r0, [r7, #4]
 80210c2:	f7ff ff49 	bl	8020f58 <_ZN8Iim426524ReadEhc>
 80210c6:	4603      	mov	r3, r0
 80210c8:	81bb      	strh	r3, [r7, #12]

    return (upper_receive << 8) | lower_receive;
 80210ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80210ce:	021b      	lsls	r3, r3, #8
 80210d0:	b21a      	sxth	r2, r3
 80210d2:	89bb      	ldrh	r3, [r7, #12]
 80210d4:	4313      	orrs	r3, r2
 80210d6:	b21b      	sxth	r3, r3
}
 80210d8:	4618      	mov	r0, r3
 80210da:	3710      	adds	r7, #16
 80210dc:	46bd      	mov	sp, r7
 80210de:	bd80      	pop	{r7, pc}

080210e0 <_ZN8Iim4265217ResetDegreeStackZEv>:
    g_deg_z = degree_z;
#endif // DEBUG_MODE
}

void Iim42652::ResetDegreeStackZ()
{
 80210e0:	b490      	push	{r4, r7}
 80210e2:	b082      	sub	sp, #8
 80210e4:	af00      	add	r7, sp, #0
 80210e6:	6078      	str	r0, [r7, #4]
    degree_stack_z_ = 0.0;
 80210e8:	687a      	ldr	r2, [r7, #4]
 80210ea:	f04f 0300 	mov.w	r3, #0
 80210ee:	f04f 0400 	mov.w	r4, #0
 80210f2:	e9c2 3400 	strd	r3, r4, [r2]
}
 80210f6:	bf00      	nop
 80210f8:	3708      	adds	r7, #8
 80210fa:	46bd      	mov	sp, r7
 80210fc:	bc90      	pop	{r4, r7}
 80210fe:	4770      	bx	lr

08021100 <_ZN8Iim4265215GetDegreeStackZEv>:

double Iim42652::GetDegreeStackZ()
{
 8021100:	b490      	push	{r4, r7}
 8021102:	b082      	sub	sp, #8
 8021104:	af00      	add	r7, sp, #0
 8021106:	6078      	str	r0, [r7, #4]
    return degree_stack_z_;
 8021108:	687b      	ldr	r3, [r7, #4]
 802110a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802110e:	ec44 3b17 	vmov	d7, r3, r4
}
 8021112:	eeb0 0a47 	vmov.f32	s0, s14
 8021116:	eef0 0a67 	vmov.f32	s1, s15
 802111a:	3708      	adds	r7, #8
 802111c:	46bd      	mov	sp, r7
 802111e:	bc90      	pop	{r4, r7}
 8021120:	4770      	bx	lr

08021122 <_ZN8Iim4265210GyroZRightEv>:
{
    return Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
}

int16_t Iim42652::GyroZRight()
{
 8021122:	b580      	push	{r7, lr}
 8021124:	b082      	sub	sp, #8
 8021126:	af00      	add	r7, sp, #0
 8021128:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 802112a:	2352      	movs	r3, #82	; 0x52
 802112c:	222a      	movs	r2, #42	; 0x2a
 802112e:	2129      	movs	r1, #41	; 0x29
 8021130:	6878      	ldr	r0, [r7, #4]
 8021132:	f7ff ffad 	bl	8021090 <_ZN8Iim426529Read2ByteEhhc>
 8021136:	4603      	mov	r3, r0
}
 8021138:	4618      	mov	r0, r3
 802113a:	3708      	adds	r7, #8
 802113c:	46bd      	mov	sp, r7
 802113e:	bd80      	pop	{r7, pc}

08021140 <_ZN3LedC1Ev>:
#include "led.hpp"

Led::Led() : interrupt_count_(0)
 8021140:	b480      	push	{r7}
 8021142:	b083      	sub	sp, #12
 8021144:	af00      	add	r7, sp, #0
 8021146:	6078      	str	r0, [r7, #4]
           , interrupt_timer_(0) {}
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	2200      	movs	r2, #0
 802114c:	701a      	strb	r2, [r3, #0]
 802114e:	687b      	ldr	r3, [r7, #4]
 8021150:	2200      	movs	r2, #0
 8021152:	705a      	strb	r2, [r3, #1]
 8021154:	687b      	ldr	r3, [r7, #4]
 8021156:	4618      	mov	r0, r3
 8021158:	370c      	adds	r7, #12
 802115a:	46bd      	mov	sp, r7
 802115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021160:	4770      	bx	lr
	...

08021164 <_ZN3Led10ColorOrderEc>:

void Led::ColorOrder(char color)
{
 8021164:	b580      	push	{r7, lr}
 8021166:	b082      	sub	sp, #8
 8021168:	af00      	add	r7, sp, #0
 802116a:	6078      	str	r0, [r7, #4]
 802116c:	460b      	mov	r3, r1
 802116e:	70fb      	strb	r3, [r7, #3]
    switch(color)
 8021170:	78fb      	ldrb	r3, [r7, #3]
 8021172:	3b42      	subs	r3, #66	; 0x42
 8021174:	2b17      	cmp	r3, #23
 8021176:	f200 80b8 	bhi.w	80212ea <_ZN3Led10ColorOrderEc+0x186>
 802117a:	a201      	add	r2, pc, #4	; (adr r2, 8021180 <_ZN3Led10ColorOrderEc+0x1c>)
 802117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021180:	0802122d 	.word	0x0802122d
 8021184:	08021279 	.word	0x08021279
 8021188:	080212eb 	.word	0x080212eb
 802118c:	080212eb 	.word	0x080212eb
 8021190:	080212eb 	.word	0x080212eb
 8021194:	08021207 	.word	0x08021207
 8021198:	080212eb 	.word	0x080212eb
 802119c:	080212eb 	.word	0x080212eb
 80211a0:	080212eb 	.word	0x080212eb
 80211a4:	080212eb 	.word	0x080212eb
 80211a8:	080212eb 	.word	0x080212eb
 80211ac:	0802129f 	.word	0x0802129f
 80211b0:	080212eb 	.word	0x080212eb
 80211b4:	080212eb 	.word	0x080212eb
 80211b8:	080212eb 	.word	0x080212eb
 80211bc:	080212eb 	.word	0x080212eb
 80211c0:	080211e1 	.word	0x080211e1
 80211c4:	080212eb 	.word	0x080212eb
 80211c8:	080212eb 	.word	0x080212eb
 80211cc:	080212eb 	.word	0x080212eb
 80211d0:	080212eb 	.word	0x080212eb
 80211d4:	080212c5 	.word	0x080212c5
 80211d8:	080212eb 	.word	0x080212eb
 80211dc:	08021253 	.word	0x08021253
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 80211e0:	2200      	movs	r2, #0
 80211e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80211e6:	484c      	ldr	r0, [pc, #304]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 80211e8:	f003 f992 	bl	8024510 <HAL_GPIO_WritePin>
 80211ec:	2201      	movs	r2, #1
 80211ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80211f2:	4849      	ldr	r0, [pc, #292]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 80211f4:	f003 f98c 	bl	8024510 <HAL_GPIO_WritePin>
 80211f8:	2201      	movs	r2, #1
 80211fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80211fe:	4846      	ldr	r0, [pc, #280]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021200:	f003 f986 	bl	8024510 <HAL_GPIO_WritePin>
 8021204:	e084      	b.n	8021310 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 8021206:	2201      	movs	r2, #1
 8021208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802120c:	4842      	ldr	r0, [pc, #264]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 802120e:	f003 f97f 	bl	8024510 <HAL_GPIO_WritePin>
 8021212:	2200      	movs	r2, #0
 8021214:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021218:	483f      	ldr	r0, [pc, #252]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 802121a:	f003 f979 	bl	8024510 <HAL_GPIO_WritePin>
 802121e:	2201      	movs	r2, #1
 8021220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021224:	483c      	ldr	r0, [pc, #240]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021226:	f003 f973 	bl	8024510 <HAL_GPIO_WritePin>
 802122a:	e071      	b.n	8021310 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 802122c:	2201      	movs	r2, #1
 802122e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021232:	4839      	ldr	r0, [pc, #228]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021234:	f003 f96c 	bl	8024510 <HAL_GPIO_WritePin>
 8021238:	2201      	movs	r2, #1
 802123a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802123e:	4836      	ldr	r0, [pc, #216]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021240:	f003 f966 	bl	8024510 <HAL_GPIO_WritePin>
 8021244:	2200      	movs	r2, #0
 8021246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802124a:	4833      	ldr	r0, [pc, #204]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 802124c:	f003 f960 	bl	8024510 <HAL_GPIO_WritePin>
 8021250:	e05e      	b.n	8021310 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 8021252:	2200      	movs	r2, #0
 8021254:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021258:	482f      	ldr	r0, [pc, #188]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 802125a:	f003 f959 	bl	8024510 <HAL_GPIO_WritePin>
 802125e:	2200      	movs	r2, #0
 8021260:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021264:	482c      	ldr	r0, [pc, #176]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021266:	f003 f953 	bl	8024510 <HAL_GPIO_WritePin>
 802126a:	2201      	movs	r2, #1
 802126c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021270:	4829      	ldr	r0, [pc, #164]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021272:	f003 f94d 	bl	8024510 <HAL_GPIO_WritePin>
 8021276:	e04b      	b.n	8021310 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 8021278:	2201      	movs	r2, #1
 802127a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802127e:	4826      	ldr	r0, [pc, #152]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021280:	f003 f946 	bl	8024510 <HAL_GPIO_WritePin>
 8021284:	2200      	movs	r2, #0
 8021286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802128a:	4823      	ldr	r0, [pc, #140]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 802128c:	f003 f940 	bl	8024510 <HAL_GPIO_WritePin>
 8021290:	2200      	movs	r2, #0
 8021292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021296:	4820      	ldr	r0, [pc, #128]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021298:	f003 f93a 	bl	8024510 <HAL_GPIO_WritePin>
 802129c:	e038      	b.n	8021310 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 802129e:	2200      	movs	r2, #0
 80212a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80212a4:	481c      	ldr	r0, [pc, #112]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 80212a6:	f003 f933 	bl	8024510 <HAL_GPIO_WritePin>
 80212aa:	2201      	movs	r2, #1
 80212ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80212b0:	4819      	ldr	r0, [pc, #100]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 80212b2:	f003 f92d 	bl	8024510 <HAL_GPIO_WritePin>
 80212b6:	2200      	movs	r2, #0
 80212b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80212bc:	4816      	ldr	r0, [pc, #88]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 80212be:	f003 f927 	bl	8024510 <HAL_GPIO_WritePin>
 80212c2:	e025      	b.n	8021310 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 80212c4:	2200      	movs	r2, #0
 80212c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80212ca:	4813      	ldr	r0, [pc, #76]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 80212cc:	f003 f920 	bl	8024510 <HAL_GPIO_WritePin>
 80212d0:	2200      	movs	r2, #0
 80212d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80212d6:	4810      	ldr	r0, [pc, #64]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 80212d8:	f003 f91a 	bl	8024510 <HAL_GPIO_WritePin>
 80212dc:	2200      	movs	r2, #0
 80212de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80212e2:	480d      	ldr	r0, [pc, #52]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 80212e4:	f003 f914 	bl	8024510 <HAL_GPIO_WritePin>
 80212e8:	e012      	b.n	8021310 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 80212ea:	2201      	movs	r2, #1
 80212ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80212f0:	4809      	ldr	r0, [pc, #36]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 80212f2:	f003 f90d 	bl	8024510 <HAL_GPIO_WritePin>
 80212f6:	2201      	movs	r2, #1
 80212f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80212fc:	4806      	ldr	r0, [pc, #24]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 80212fe:	f003 f907 	bl	8024510 <HAL_GPIO_WritePin>
 8021302:	2201      	movs	r2, #1
 8021304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021308:	4803      	ldr	r0, [pc, #12]	; (8021318 <_ZN3Led10ColorOrderEc+0x1b4>)
 802130a:	f003 f901 	bl	8024510 <HAL_GPIO_WritePin>
 802130e:	bf00      	nop
    }
}
 8021310:	bf00      	nop
 8021312:	3708      	adds	r7, #8
 8021314:	46bd      	mov	sp, r7
 8021316:	bd80      	pop	{r7, pc}
 8021318:	40020800 	.word	0x40020800

0802131c <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 802131c:	b580      	push	{r7, lr}
 802131e:	b084      	sub	sp, #16
 8021320:	af00      	add	r7, sp, #0
 8021322:	6078      	str	r0, [r7, #4]
 8021324:	4608      	mov	r0, r1
 8021326:	4611      	mov	r1, r2
 8021328:	461a      	mov	r2, r3
 802132a:	4603      	mov	r3, r0
 802132c:	70fb      	strb	r3, [r7, #3]
 802132e:	460b      	mov	r3, r1
 8021330:	70bb      	strb	r3, [r7, #2]
 8021332:	4613      	mov	r3, r2
 8021334:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 8021336:	2300      	movs	r3, #0
 8021338:	73fb      	strb	r3, [r7, #15]
 802133a:	7bfa      	ldrb	r2, [r7, #15]
 802133c:	78fb      	ldrb	r3, [r7, #3]
 802133e:	429a      	cmp	r2, r3
 8021340:	d215      	bcs.n	802136e <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 8021342:	78bb      	ldrb	r3, [r7, #2]
 8021344:	4619      	mov	r1, r3
 8021346:	6878      	ldr	r0, [r7, #4]
 8021348:	f7ff ff0c 	bl	8021164 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 802134c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021350:	f001 fe96 	bl	8023080 <HAL_Delay>
        ColorOrder(color_2);
 8021354:	787b      	ldrb	r3, [r7, #1]
 8021356:	4619      	mov	r1, r3
 8021358:	6878      	ldr	r0, [r7, #4]
 802135a:	f7ff ff03 	bl	8021164 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 802135e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021362:	f001 fe8d 	bl	8023080 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021366:	7bfb      	ldrb	r3, [r7, #15]
 8021368:	3301      	adds	r3, #1
 802136a:	73fb      	strb	r3, [r7, #15]
 802136c:	e7e5      	b.n	802133a <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 802136e:	bf00      	nop
 8021370:	3710      	adds	r7, #16
 8021372:	46bd      	mov	sp, r7
 8021374:	bd80      	pop	{r7, pc}

08021376 <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_{0}
 8021376:	b580      	push	{r7, lr}
 8021378:	b082      	sub	sp, #8
 802137a:	af00      	add	r7, sp, #0
 802137c:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_{{0}}
                         , max_line_sensors_valu_{0}
                         , min_line_sensors_valu_{0}
                         , line_sensors_valu_{0}
                         , emergency_stop_flag_(false) {}
 802137e:	687b      	ldr	r3, [r7, #4]
 8021380:	461a      	mov	r2, r3
 8021382:	2300      	movs	r3, #0
 8021384:	6013      	str	r3, [r2, #0]
 8021386:	6053      	str	r3, [r2, #4]
 8021388:	6093      	str	r3, [r2, #8]
 802138a:	60d3      	str	r3, [r2, #12]
 802138c:	6113      	str	r3, [r2, #16]
 802138e:	6153      	str	r3, [r2, #20]
 8021390:	6193      	str	r3, [r2, #24]
 8021392:	687b      	ldr	r3, [r7, #4]
 8021394:	331c      	adds	r3, #28
 8021396:	f44f 728c 	mov.w	r2, #280	; 0x118
 802139a:	2100      	movs	r1, #0
 802139c:	4618      	mov	r0, r3
 802139e:	f005 fbdc 	bl	8026b5a <memset>
 80213a2:	687b      	ldr	r3, [r7, #4]
 80213a4:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80213a8:	2200      	movs	r2, #0
 80213aa:	601a      	str	r2, [r3, #0]
 80213ac:	605a      	str	r2, [r3, #4]
 80213ae:	609a      	str	r2, [r3, #8]
 80213b0:	60da      	str	r2, [r3, #12]
 80213b2:	611a      	str	r2, [r3, #16]
 80213b4:	615a      	str	r2, [r3, #20]
 80213b6:	619a      	str	r2, [r3, #24]
 80213b8:	687b      	ldr	r3, [r7, #4]
 80213ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80213be:	2200      	movs	r2, #0
 80213c0:	601a      	str	r2, [r3, #0]
 80213c2:	605a      	str	r2, [r3, #4]
 80213c4:	609a      	str	r2, [r3, #8]
 80213c6:	60da      	str	r2, [r3, #12]
 80213c8:	611a      	str	r2, [r3, #16]
 80213ca:	615a      	str	r2, [r3, #20]
 80213cc:	619a      	str	r2, [r3, #24]
 80213ce:	687b      	ldr	r3, [r7, #4]
 80213d0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80213d4:	2200      	movs	r2, #0
 80213d6:	601a      	str	r2, [r3, #0]
 80213d8:	605a      	str	r2, [r3, #4]
 80213da:	609a      	str	r2, [r3, #8]
 80213dc:	60da      	str	r2, [r3, #12]
 80213de:	611a      	str	r2, [r3, #16]
 80213e0:	615a      	str	r2, [r3, #20]
 80213e2:	619a      	str	r2, [r3, #24]
 80213e4:	687b      	ldr	r3, [r7, #4]
 80213e6:	2200      	movs	r2, #0
 80213e8:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 80213ec:	687b      	ldr	r3, [r7, #4]
 80213ee:	4618      	mov	r0, r3
 80213f0:	3708      	adds	r7, #8
 80213f2:	46bd      	mov	sp, r7
 80213f4:	bd80      	pop	{r7, pc}
	...

080213f8 <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 80213f8:	b580      	push	{r7, lr}
 80213fa:	b082      	sub	sp, #8
 80213fc:	af00      	add	r7, sp, #0
 80213fe:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 8021400:	687b      	ldr	r3, [r7, #4]
 8021402:	220e      	movs	r2, #14
 8021404:	4619      	mov	r1, r3
 8021406:	4815      	ldr	r0, [pc, #84]	; (802145c <_ZN10LineSensor4InitEv+0x64>)
 8021408:	f001 fea0 	bl	802314c <HAL_ADC_Start_DMA>
 802140c:	4603      	mov	r3, r0
 802140e:	2b00      	cmp	r3, #0
 8021410:	bf14      	ite	ne
 8021412:	2301      	movne	r3, #1
 8021414:	2300      	moveq	r3, #0
 8021416:	b2db      	uxtb	r3, r3
 8021418:	2b00      	cmp	r3, #0
 802141a:	d004      	beq.n	8021426 <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 802141c:	4b10      	ldr	r3, [pc, #64]	; (8021460 <_ZN10LineSensor4InitEv+0x68>)
 802141e:	2201      	movs	r2, #1
 8021420:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021422:	f000 ff1b 	bl	802225c <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 8021426:	2100      	movs	r1, #0
 8021428:	480e      	ldr	r0, [pc, #56]	; (8021464 <_ZN10LineSensor4InitEv+0x6c>)
 802142a:	f004 fbb9 	bl	8025ba0 <HAL_TIM_PWM_Start>
 802142e:	4603      	mov	r3, r0
 8021430:	2b00      	cmp	r3, #0
 8021432:	bf14      	ite	ne
 8021434:	2301      	movne	r3, #1
 8021436:	2300      	moveq	r3, #0
 8021438:	b2db      	uxtb	r3, r3
 802143a:	2b00      	cmp	r3, #0
 802143c:	d004      	beq.n	8021448 <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 802143e:	4b0a      	ldr	r3, [pc, #40]	; (8021468 <_ZN10LineSensor4InitEv+0x70>)
 8021440:	2201      	movs	r2, #1
 8021442:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021444:	f000 ff0a 	bl	802225c <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 8021448:	4b06      	ldr	r3, [pc, #24]	; (8021464 <_ZN10LineSensor4InitEv+0x6c>)
 802144a:	681b      	ldr	r3, [r3, #0]
 802144c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8021450:	635a      	str	r2, [r3, #52]	; 0x34
}
 8021452:	bf00      	nop
 8021454:	3708      	adds	r7, #8
 8021456:	46bd      	mov	sp, r7
 8021458:	bd80      	pop	{r7, pc}
 802145a:	bf00      	nop
 802145c:	20011160 	.word	0x20011160
 8021460:	20000204 	.word	0x20000204
 8021464:	200111a8 	.word	0x200111a8
 8021468:	20000205 	.word	0x20000205

0802146c <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 802146c:	b480      	push	{r7}
 802146e:	b085      	sub	sp, #20
 8021470:	af00      	add	r7, sp, #0
 8021472:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021474:	2300      	movs	r3, #0
 8021476:	60fb      	str	r3, [r7, #12]
 8021478:	68fb      	ldr	r3, [r7, #12]
 802147a:	2b0d      	cmp	r3, #13
 802147c:	dc16      	bgt.n	80214ac <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 802147e:	4b15      	ldr	r3, [pc, #84]	; (80214d4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021480:	781b      	ldrb	r3, [r3, #0]
 8021482:	4619      	mov	r1, r3
 8021484:	687b      	ldr	r3, [r7, #4]
 8021486:	68fa      	ldr	r2, [r7, #12]
 8021488:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 802148c:	687a      	ldr	r2, [r7, #4]
 802148e:	460b      	mov	r3, r1
 8021490:	00db      	lsls	r3, r3, #3
 8021492:	1a5b      	subs	r3, r3, r1
 8021494:	005b      	lsls	r3, r3, #1
 8021496:	68f9      	ldr	r1, [r7, #12]
 8021498:	440b      	add	r3, r1
 802149a:	330c      	adds	r3, #12
 802149c:	005b      	lsls	r3, r3, #1
 802149e:	4413      	add	r3, r2
 80214a0:	4602      	mov	r2, r0
 80214a2:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80214a4:	68fb      	ldr	r3, [r7, #12]
 80214a6:	3301      	adds	r3, #1
 80214a8:	60fb      	str	r3, [r7, #12]
 80214aa:	e7e5      	b.n	8021478 <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    times++;
 80214ac:	4b09      	ldr	r3, [pc, #36]	; (80214d4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 80214ae:	781b      	ldrb	r3, [r3, #0]
 80214b0:	3301      	adds	r3, #1
 80214b2:	b2da      	uxtb	r2, r3
 80214b4:	4b07      	ldr	r3, [pc, #28]	; (80214d4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 80214b6:	701a      	strb	r2, [r3, #0]
    if(times >= CONSECUTIVE_TIMES) times = 0;
 80214b8:	4b06      	ldr	r3, [pc, #24]	; (80214d4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 80214ba:	781b      	ldrb	r3, [r3, #0]
 80214bc:	2b09      	cmp	r3, #9
 80214be:	d902      	bls.n	80214c6 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5a>
 80214c0:	4b04      	ldr	r3, [pc, #16]	; (80214d4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 80214c2:	2200      	movs	r2, #0
 80214c4:	701a      	strb	r2, [r3, #0]
}
 80214c6:	bf00      	nop
 80214c8:	3714      	adds	r7, #20
 80214ca:	46bd      	mov	sp, r7
 80214cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214d0:	4770      	bx	lr
 80214d2:	bf00      	nop
 80214d4:	200001fc 	.word	0x200001fc

080214d8 <_ZN9LineTraceC1EP10LineSensor>:
#include "line_trace.hpp"

LineTrace::LineTrace(LineSensor *line_sensor) : integral_error_(0)
 80214d8:	b480      	push	{r7}
 80214da:	b083      	sub	sp, #12
 80214dc:	af00      	add	r7, sp, #0
 80214de:	6078      	str	r0, [r7, #4]
 80214e0:	6039      	str	r1, [r7, #0]
 80214e2:	687b      	ldr	r3, [r7, #4]
 80214e4:	f04f 0200 	mov.w	r2, #0
 80214e8:	601a      	str	r2, [r3, #0]
{
    line_sensor_ = line_sensor;
 80214ea:	687b      	ldr	r3, [r7, #4]
 80214ec:	683a      	ldr	r2, [r7, #0]
 80214ee:	605a      	str	r2, [r3, #4]
}
 80214f0:	687b      	ldr	r3, [r7, #4]
 80214f2:	4618      	mov	r0, r3
 80214f4:	370c      	adds	r7, #12
 80214f6:	46bd      	mov	sp, r7
 80214f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214fc:	4770      	bx	lr

080214fe <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() {}
 80214fe:	b580      	push	{r7, lr}
 8021500:	b082      	sub	sp, #8
 8021502:	af00      	add	r7, sp, #0
 8021504:	6078      	str	r0, [r7, #4]
 8021506:	687b      	ldr	r3, [r7, #4]
 8021508:	33e8      	adds	r3, #232	; 0xe8
 802150a:	4618      	mov	r0, r3
 802150c:	f7ff fc04 	bl	8020d18 <_ZN7EncoderC1Ev>
 8021510:	687b      	ldr	r3, [r7, #4]
 8021512:	33f8      	adds	r3, #248	; 0xf8
 8021514:	4618      	mov	r0, r3
 8021516:	f7ff fc49 	bl	8020dac <_ZN8Iim42652C1Ev>
 802151a:	687b      	ldr	r3, [r7, #4]
 802151c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8021520:	4618      	mov	r0, r3
 8021522:	f000 ff31 	bl	8022388 <_ZN10SideSensorC1Ev>
 8021526:	687b      	ldr	r3, [r7, #4]
 8021528:	4618      	mov	r0, r3
 802152a:	3708      	adds	r7, #8
 802152c:	46bd      	mov	sp, r7
 802152e:	bd80      	pop	{r7, pc}

08021530 <_ZN7Logger2C1EP7EncoderP5FlashP3LedP8Iim42652P10SideSensor>:
#include "logger2.hpp"
#include "declare_extern.h"
#include <math.h>

Logger2::Logger2(Encoder *encoder,
 8021530:	b480      	push	{r7}
 8021532:	b085      	sub	sp, #20
 8021534:	af00      	add	r7, sp, #0
 8021536:	60f8      	str	r0, [r7, #12]
 8021538:	60b9      	str	r1, [r7, #8]
 802153a:	607a      	str	r2, [r7, #4]
 802153c:	603b      	str	r3, [r7, #0]
                   , success_emergency_code_store_(false)
                   , logging_radian_buff_(0)
                   , loading_now_address_(0)
                   , uncorrected_address_buff_(0)
                   , logging_now_address_(0)
                   , target_velocity_(MIN_VELOCITY)
 802153e:	68fb      	ldr	r3, [r7, #12]
 8021540:	2200      	movs	r2, #0
 8021542:	701a      	strb	r2, [r3, #0]
 8021544:	68fb      	ldr	r3, [r7, #12]
 8021546:	2200      	movs	r2, #0
 8021548:	705a      	strb	r2, [r3, #1]
 802154a:	68fb      	ldr	r3, [r7, #12]
 802154c:	f04f 0200 	mov.w	r2, #0
 8021550:	605a      	str	r2, [r3, #4]
 8021552:	68fb      	ldr	r3, [r7, #12]
 8021554:	2200      	movs	r2, #0
 8021556:	811a      	strh	r2, [r3, #8]
 8021558:	68fb      	ldr	r3, [r7, #12]
 802155a:	2200      	movs	r2, #0
 802155c:	815a      	strh	r2, [r3, #10]
 802155e:	68fb      	ldr	r3, [r7, #12]
 8021560:	2200      	movs	r2, #0
 8021562:	819a      	strh	r2, [r3, #12]
 8021564:	68fb      	ldr	r3, [r7, #12]
 8021566:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 802156a:	611a      	str	r2, [r3, #16]
{
    encoder_ = encoder;
 802156c:	68fb      	ldr	r3, [r7, #12]
 802156e:	68ba      	ldr	r2, [r7, #8]
 8021570:	615a      	str	r2, [r3, #20]
    flash_ = flash;
 8021572:	68fb      	ldr	r3, [r7, #12]
 8021574:	687a      	ldr	r2, [r7, #4]
 8021576:	619a      	str	r2, [r3, #24]
    led_ = led;
 8021578:	68fb      	ldr	r3, [r7, #12]
 802157a:	683a      	ldr	r2, [r7, #0]
 802157c:	61da      	str	r2, [r3, #28]
    iim_42652_ = iim_42652;
 802157e:	68fb      	ldr	r3, [r7, #12]
 8021580:	69ba      	ldr	r2, [r7, #24]
 8021582:	621a      	str	r2, [r3, #32]
    side_sensor_ = side_sensor;
 8021584:	68fb      	ldr	r3, [r7, #12]
 8021586:	69fa      	ldr	r2, [r7, #28]
 8021588:	625a      	str	r2, [r3, #36]	; 0x24
}
 802158a:	68fb      	ldr	r3, [r7, #12]
 802158c:	4618      	mov	r0, r3
 802158e:	3714      	adds	r7, #20
 8021590:	46bd      	mov	sp, r7
 8021592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021596:	4770      	bx	lr

08021598 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021598:	b580      	push	{r7, lr}
 802159a:	b082      	sub	sp, #8
 802159c:	af00      	add	r7, sp, #0
 802159e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 80215a0:	687b      	ldr	r3, [r7, #4]
 80215a2:	681b      	ldr	r3, [r3, #0]
 80215a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80215a8:	d101      	bne.n	80215ae <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 80215aa:	f001 fc4f 	bl	8022e4c <InterruptTim2>
  }
  if(htim->Instance == TIM6)
 80215ae:	687b      	ldr	r3, [r7, #4]
 80215b0:	681b      	ldr	r3, [r3, #0]
 80215b2:	4a08      	ldr	r2, [pc, #32]	; (80215d4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80215b4:	4293      	cmp	r3, r2
 80215b6:	d101      	bne.n	80215bc <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim6();
 80215b8:	f001 fc38 	bl	8022e2c <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	681b      	ldr	r3, [r3, #0]
 80215c0:	4a05      	ldr	r2, [pc, #20]	; (80215d8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80215c2:	4293      	cmp	r3, r2
 80215c4:	d101      	bne.n	80215ca <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim7();
 80215c6:	f001 fc21 	bl	8022e0c <InterruptTim7>
  }
}
 80215ca:	bf00      	nop
 80215cc:	3708      	adds	r7, #8
 80215ce:	46bd      	mov	sp, r7
 80215d0:	bd80      	pop	{r7, pc}
 80215d2:	bf00      	nop
 80215d4:	40001000 	.word	0x40001000
 80215d8:	40001400 	.word	0x40001400

080215dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80215dc:	b580      	push	{r7, lr}
 80215de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80215e0:	f001 fcdc 	bl	8022f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80215e4:	f000 f822 	bl	802162c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80215e8:	f000 fd68 	bl	80220bc <MX_GPIO_Init>
  MX_DMA_Init();
 80215ec:	f000 fd46 	bl	802207c <MX_DMA_Init>
  MX_ADC1_Init();
 80215f0:	f000 f886 	bl	8021700 <MX_ADC1_Init>
  MX_I2C2_Init();
 80215f4:	f000 f98c 	bl	8021910 <MX_I2C2_Init>
  MX_SPI3_Init();
 80215f8:	f000 f9b8 	bl	802196c <MX_SPI3_Init>
  MX_TIM1_Init();
 80215fc:	f000 f9ec 	bl	80219d8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8021600:	f000 fac8 	bl	8021b94 <MX_TIM3_Init>
  MX_TIM4_Init();
 8021604:	f000 fb40 	bl	8021c88 <MX_TIM4_Init>
  MX_TIM6_Init();
 8021608:	f000 fbe0 	bl	8021dcc <MX_TIM6_Init>
  MX_TIM7_Init();
 802160c:	f000 fc14 	bl	8021e38 <MX_TIM7_Init>
  MX_TIM8_Init();
 8021610:	f000 fc48 	bl	8021ea4 <MX_TIM8_Init>
  MX_TIM11_Init();
 8021614:	f000 fc9e 	bl	8021f54 <MX_TIM11_Init>
  MX_TIM12_Init();
 8021618:	f000 fcea 	bl	8021ff0 <MX_TIM12_Init>
  MX_TIM2_Init();
 802161c:	f000 fa6c 	bl	8021af8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8021620:	f000 fb86 	bl	8021d30 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8021624:	f001 fbe8 	bl	8022df8 <Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8021628:	e7fe      	b.n	8021628 <main+0x4c>
	...

0802162c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802162c:	b580      	push	{r7, lr}
 802162e:	b094      	sub	sp, #80	; 0x50
 8021630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8021632:	f107 0320 	add.w	r3, r7, #32
 8021636:	2230      	movs	r2, #48	; 0x30
 8021638:	2100      	movs	r1, #0
 802163a:	4618      	mov	r0, r3
 802163c:	f005 fa8d 	bl	8026b5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8021640:	f107 030c 	add.w	r3, r7, #12
 8021644:	2200      	movs	r2, #0
 8021646:	601a      	str	r2, [r3, #0]
 8021648:	605a      	str	r2, [r3, #4]
 802164a:	609a      	str	r2, [r3, #8]
 802164c:	60da      	str	r2, [r3, #12]
 802164e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8021650:	2300      	movs	r3, #0
 8021652:	60bb      	str	r3, [r7, #8]
 8021654:	4b28      	ldr	r3, [pc, #160]	; (80216f8 <SystemClock_Config+0xcc>)
 8021656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021658:	4a27      	ldr	r2, [pc, #156]	; (80216f8 <SystemClock_Config+0xcc>)
 802165a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802165e:	6413      	str	r3, [r2, #64]	; 0x40
 8021660:	4b25      	ldr	r3, [pc, #148]	; (80216f8 <SystemClock_Config+0xcc>)
 8021662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021668:	60bb      	str	r3, [r7, #8]
 802166a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802166c:	2300      	movs	r3, #0
 802166e:	607b      	str	r3, [r7, #4]
 8021670:	4b22      	ldr	r3, [pc, #136]	; (80216fc <SystemClock_Config+0xd0>)
 8021672:	681b      	ldr	r3, [r3, #0]
 8021674:	4a21      	ldr	r2, [pc, #132]	; (80216fc <SystemClock_Config+0xd0>)
 8021676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802167a:	6013      	str	r3, [r2, #0]
 802167c:	4b1f      	ldr	r3, [pc, #124]	; (80216fc <SystemClock_Config+0xd0>)
 802167e:	681b      	ldr	r3, [r3, #0]
 8021680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021684:	607b      	str	r3, [r7, #4]
 8021686:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8021688:	2301      	movs	r3, #1
 802168a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 802168c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8021692:	2302      	movs	r3, #2
 8021694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8021696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802169a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 802169c:	2306      	movs	r3, #6
 802169e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80216a0:	23a8      	movs	r3, #168	; 0xa8
 80216a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80216a4:	2302      	movs	r3, #2
 80216a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80216a8:	2304      	movs	r3, #4
 80216aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80216ac:	f107 0320 	add.w	r3, r7, #32
 80216b0:	4618      	mov	r0, r3
 80216b2:	f003 f87f 	bl	80247b4 <HAL_RCC_OscConfig>
 80216b6:	4603      	mov	r3, r0
 80216b8:	2b00      	cmp	r3, #0
 80216ba:	d001      	beq.n	80216c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80216bc:	f000 fdce 	bl	802225c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80216c0:	230f      	movs	r3, #15
 80216c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80216c4:	2302      	movs	r3, #2
 80216c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80216c8:	2300      	movs	r3, #0
 80216ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80216cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80216d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80216d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80216d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80216d8:	f107 030c 	add.w	r3, r7, #12
 80216dc:	2105      	movs	r1, #5
 80216de:	4618      	mov	r0, r3
 80216e0:	f003 fad8 	bl	8024c94 <HAL_RCC_ClockConfig>
 80216e4:	4603      	mov	r3, r0
 80216e6:	2b00      	cmp	r3, #0
 80216e8:	d001      	beq.n	80216ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80216ea:	f000 fdb7 	bl	802225c <Error_Handler>
  }
}
 80216ee:	bf00      	nop
 80216f0:	3750      	adds	r7, #80	; 0x50
 80216f2:	46bd      	mov	sp, r7
 80216f4:	bd80      	pop	{r7, pc}
 80216f6:	bf00      	nop
 80216f8:	40023800 	.word	0x40023800
 80216fc:	40007000 	.word	0x40007000

08021700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8021700:	b580      	push	{r7, lr}
 8021702:	b084      	sub	sp, #16
 8021704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8021706:	463b      	mov	r3, r7
 8021708:	2200      	movs	r2, #0
 802170a:	601a      	str	r2, [r3, #0]
 802170c:	605a      	str	r2, [r3, #4]
 802170e:	609a      	str	r2, [r3, #8]
 8021710:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8021712:	4b7c      	ldr	r3, [pc, #496]	; (8021904 <MX_ADC1_Init+0x204>)
 8021714:	4a7c      	ldr	r2, [pc, #496]	; (8021908 <MX_ADC1_Init+0x208>)
 8021716:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8021718:	4b7a      	ldr	r3, [pc, #488]	; (8021904 <MX_ADC1_Init+0x204>)
 802171a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802171e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8021720:	4b78      	ldr	r3, [pc, #480]	; (8021904 <MX_ADC1_Init+0x204>)
 8021722:	2200      	movs	r2, #0
 8021724:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8021726:	4b77      	ldr	r3, [pc, #476]	; (8021904 <MX_ADC1_Init+0x204>)
 8021728:	2201      	movs	r2, #1
 802172a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 802172c:	4b75      	ldr	r3, [pc, #468]	; (8021904 <MX_ADC1_Init+0x204>)
 802172e:	2201      	movs	r2, #1
 8021730:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8021732:	4b74      	ldr	r3, [pc, #464]	; (8021904 <MX_ADC1_Init+0x204>)
 8021734:	2200      	movs	r2, #0
 8021736:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 802173a:	4b72      	ldr	r3, [pc, #456]	; (8021904 <MX_ADC1_Init+0x204>)
 802173c:	2200      	movs	r2, #0
 802173e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8021740:	4b70      	ldr	r3, [pc, #448]	; (8021904 <MX_ADC1_Init+0x204>)
 8021742:	4a72      	ldr	r2, [pc, #456]	; (802190c <MX_ADC1_Init+0x20c>)
 8021744:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8021746:	4b6f      	ldr	r3, [pc, #444]	; (8021904 <MX_ADC1_Init+0x204>)
 8021748:	2200      	movs	r2, #0
 802174a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 802174c:	4b6d      	ldr	r3, [pc, #436]	; (8021904 <MX_ADC1_Init+0x204>)
 802174e:	220e      	movs	r2, #14
 8021750:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8021752:	4b6c      	ldr	r3, [pc, #432]	; (8021904 <MX_ADC1_Init+0x204>)
 8021754:	2201      	movs	r2, #1
 8021756:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 802175a:	4b6a      	ldr	r3, [pc, #424]	; (8021904 <MX_ADC1_Init+0x204>)
 802175c:	2201      	movs	r2, #1
 802175e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8021760:	4868      	ldr	r0, [pc, #416]	; (8021904 <MX_ADC1_Init+0x204>)
 8021762:	f001 fcaf 	bl	80230c4 <HAL_ADC_Init>
 8021766:	4603      	mov	r3, r0
 8021768:	2b00      	cmp	r3, #0
 802176a:	d001      	beq.n	8021770 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 802176c:	f000 fd76 	bl	802225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8021770:	2303      	movs	r3, #3
 8021772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8021774:	2301      	movs	r3, #1
 8021776:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8021778:	2301      	movs	r3, #1
 802177a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802177c:	463b      	mov	r3, r7
 802177e:	4619      	mov	r1, r3
 8021780:	4860      	ldr	r0, [pc, #384]	; (8021904 <MX_ADC1_Init+0x204>)
 8021782:	f001 fdf3 	bl	802336c <HAL_ADC_ConfigChannel>
 8021786:	4603      	mov	r3, r0
 8021788:	2b00      	cmp	r3, #0
 802178a:	d001      	beq.n	8021790 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 802178c:	f000 fd66 	bl	802225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8021790:	2304      	movs	r3, #4
 8021792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8021794:	2302      	movs	r3, #2
 8021796:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021798:	463b      	mov	r3, r7
 802179a:	4619      	mov	r1, r3
 802179c:	4859      	ldr	r0, [pc, #356]	; (8021904 <MX_ADC1_Init+0x204>)
 802179e:	f001 fde5 	bl	802336c <HAL_ADC_ConfigChannel>
 80217a2:	4603      	mov	r3, r0
 80217a4:	2b00      	cmp	r3, #0
 80217a6:	d001      	beq.n	80217ac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80217a8:	f000 fd58 	bl	802225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80217ac:	2305      	movs	r3, #5
 80217ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80217b0:	2303      	movs	r3, #3
 80217b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80217b4:	463b      	mov	r3, r7
 80217b6:	4619      	mov	r1, r3
 80217b8:	4852      	ldr	r0, [pc, #328]	; (8021904 <MX_ADC1_Init+0x204>)
 80217ba:	f001 fdd7 	bl	802336c <HAL_ADC_ConfigChannel>
 80217be:	4603      	mov	r3, r0
 80217c0:	2b00      	cmp	r3, #0
 80217c2:	d001      	beq.n	80217c8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80217c4:	f000 fd4a 	bl	802225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80217c8:	2306      	movs	r3, #6
 80217ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80217cc:	2304      	movs	r3, #4
 80217ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80217d0:	463b      	mov	r3, r7
 80217d2:	4619      	mov	r1, r3
 80217d4:	484b      	ldr	r0, [pc, #300]	; (8021904 <MX_ADC1_Init+0x204>)
 80217d6:	f001 fdc9 	bl	802336c <HAL_ADC_ConfigChannel>
 80217da:	4603      	mov	r3, r0
 80217dc:	2b00      	cmp	r3, #0
 80217de:	d001      	beq.n	80217e4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80217e0:	f000 fd3c 	bl	802225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80217e4:	2307      	movs	r3, #7
 80217e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80217e8:	2305      	movs	r3, #5
 80217ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80217ec:	463b      	mov	r3, r7
 80217ee:	4619      	mov	r1, r3
 80217f0:	4844      	ldr	r0, [pc, #272]	; (8021904 <MX_ADC1_Init+0x204>)
 80217f2:	f001 fdbb 	bl	802336c <HAL_ADC_ConfigChannel>
 80217f6:	4603      	mov	r3, r0
 80217f8:	2b00      	cmp	r3, #0
 80217fa:	d001      	beq.n	8021800 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80217fc:	f000 fd2e 	bl	802225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8021800:	230e      	movs	r3, #14
 8021802:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8021804:	2306      	movs	r3, #6
 8021806:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021808:	463b      	mov	r3, r7
 802180a:	4619      	mov	r1, r3
 802180c:	483d      	ldr	r0, [pc, #244]	; (8021904 <MX_ADC1_Init+0x204>)
 802180e:	f001 fdad 	bl	802336c <HAL_ADC_ConfigChannel>
 8021812:	4603      	mov	r3, r0
 8021814:	2b00      	cmp	r3, #0
 8021816:	d001      	beq.n	802181c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8021818:	f000 fd20 	bl	802225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 802181c:	230f      	movs	r3, #15
 802181e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8021820:	2307      	movs	r3, #7
 8021822:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021824:	463b      	mov	r3, r7
 8021826:	4619      	mov	r1, r3
 8021828:	4836      	ldr	r0, [pc, #216]	; (8021904 <MX_ADC1_Init+0x204>)
 802182a:	f001 fd9f 	bl	802336c <HAL_ADC_ConfigChannel>
 802182e:	4603      	mov	r3, r0
 8021830:	2b00      	cmp	r3, #0
 8021832:	d001      	beq.n	8021838 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8021834:	f000 fd12 	bl	802225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8021838:	230a      	movs	r3, #10
 802183a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 802183c:	2308      	movs	r3, #8
 802183e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021840:	463b      	mov	r3, r7
 8021842:	4619      	mov	r1, r3
 8021844:	482f      	ldr	r0, [pc, #188]	; (8021904 <MX_ADC1_Init+0x204>)
 8021846:	f001 fd91 	bl	802336c <HAL_ADC_ConfigChannel>
 802184a:	4603      	mov	r3, r0
 802184c:	2b00      	cmp	r3, #0
 802184e:	d001      	beq.n	8021854 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8021850:	f000 fd04 	bl	802225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8021854:	230b      	movs	r3, #11
 8021856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8021858:	2309      	movs	r3, #9
 802185a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802185c:	463b      	mov	r3, r7
 802185e:	4619      	mov	r1, r3
 8021860:	4828      	ldr	r0, [pc, #160]	; (8021904 <MX_ADC1_Init+0x204>)
 8021862:	f001 fd83 	bl	802336c <HAL_ADC_ConfigChannel>
 8021866:	4603      	mov	r3, r0
 8021868:	2b00      	cmp	r3, #0
 802186a:	d001      	beq.n	8021870 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 802186c:	f000 fcf6 	bl	802225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8021870:	230c      	movs	r3, #12
 8021872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8021874:	230a      	movs	r3, #10
 8021876:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021878:	463b      	mov	r3, r7
 802187a:	4619      	mov	r1, r3
 802187c:	4821      	ldr	r0, [pc, #132]	; (8021904 <MX_ADC1_Init+0x204>)
 802187e:	f001 fd75 	bl	802336c <HAL_ADC_ConfigChannel>
 8021882:	4603      	mov	r3, r0
 8021884:	2b00      	cmp	r3, #0
 8021886:	d001      	beq.n	802188c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8021888:	f000 fce8 	bl	802225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 802188c:	230d      	movs	r3, #13
 802188e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8021890:	230b      	movs	r3, #11
 8021892:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021894:	463b      	mov	r3, r7
 8021896:	4619      	mov	r1, r3
 8021898:	481a      	ldr	r0, [pc, #104]	; (8021904 <MX_ADC1_Init+0x204>)
 802189a:	f001 fd67 	bl	802336c <HAL_ADC_ConfigChannel>
 802189e:	4603      	mov	r3, r0
 80218a0:	2b00      	cmp	r3, #0
 80218a2:	d001      	beq.n	80218a8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80218a4:	f000 fcda 	bl	802225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80218a8:	2302      	movs	r3, #2
 80218aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80218ac:	230c      	movs	r3, #12
 80218ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80218b0:	463b      	mov	r3, r7
 80218b2:	4619      	mov	r1, r3
 80218b4:	4813      	ldr	r0, [pc, #76]	; (8021904 <MX_ADC1_Init+0x204>)
 80218b6:	f001 fd59 	bl	802336c <HAL_ADC_ConfigChannel>
 80218ba:	4603      	mov	r3, r0
 80218bc:	2b00      	cmp	r3, #0
 80218be:	d001      	beq.n	80218c4 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80218c0:	f000 fccc 	bl	802225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80218c4:	2301      	movs	r3, #1
 80218c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80218c8:	230d      	movs	r3, #13
 80218ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80218cc:	463b      	mov	r3, r7
 80218ce:	4619      	mov	r1, r3
 80218d0:	480c      	ldr	r0, [pc, #48]	; (8021904 <MX_ADC1_Init+0x204>)
 80218d2:	f001 fd4b 	bl	802336c <HAL_ADC_ConfigChannel>
 80218d6:	4603      	mov	r3, r0
 80218d8:	2b00      	cmp	r3, #0
 80218da:	d001      	beq.n	80218e0 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80218dc:	f000 fcbe 	bl	802225c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80218e0:	2300      	movs	r3, #0
 80218e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80218e4:	230e      	movs	r3, #14
 80218e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80218e8:	463b      	mov	r3, r7
 80218ea:	4619      	mov	r1, r3
 80218ec:	4805      	ldr	r0, [pc, #20]	; (8021904 <MX_ADC1_Init+0x204>)
 80218ee:	f001 fd3d 	bl	802336c <HAL_ADC_ConfigChannel>
 80218f2:	4603      	mov	r3, r0
 80218f4:	2b00      	cmp	r3, #0
 80218f6:	d001      	beq.n	80218fc <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 80218f8:	f000 fcb0 	bl	802225c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80218fc:	bf00      	nop
 80218fe:	3710      	adds	r7, #16
 8021900:	46bd      	mov	sp, r7
 8021902:	bd80      	pop	{r7, pc}
 8021904:	20011160 	.word	0x20011160
 8021908:	40012000 	.word	0x40012000
 802190c:	0f000001 	.word	0x0f000001

08021910 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8021910:	b580      	push	{r7, lr}
 8021912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8021914:	4b12      	ldr	r3, [pc, #72]	; (8021960 <MX_I2C2_Init+0x50>)
 8021916:	4a13      	ldr	r2, [pc, #76]	; (8021964 <MX_I2C2_Init+0x54>)
 8021918:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 802191a:	4b11      	ldr	r3, [pc, #68]	; (8021960 <MX_I2C2_Init+0x50>)
 802191c:	4a12      	ldr	r2, [pc, #72]	; (8021968 <MX_I2C2_Init+0x58>)
 802191e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8021920:	4b0f      	ldr	r3, [pc, #60]	; (8021960 <MX_I2C2_Init+0x50>)
 8021922:	2200      	movs	r2, #0
 8021924:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8021926:	4b0e      	ldr	r3, [pc, #56]	; (8021960 <MX_I2C2_Init+0x50>)
 8021928:	2200      	movs	r2, #0
 802192a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 802192c:	4b0c      	ldr	r3, [pc, #48]	; (8021960 <MX_I2C2_Init+0x50>)
 802192e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8021932:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8021934:	4b0a      	ldr	r3, [pc, #40]	; (8021960 <MX_I2C2_Init+0x50>)
 8021936:	2200      	movs	r2, #0
 8021938:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 802193a:	4b09      	ldr	r3, [pc, #36]	; (8021960 <MX_I2C2_Init+0x50>)
 802193c:	2200      	movs	r2, #0
 802193e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8021940:	4b07      	ldr	r3, [pc, #28]	; (8021960 <MX_I2C2_Init+0x50>)
 8021942:	2200      	movs	r2, #0
 8021944:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8021946:	4b06      	ldr	r3, [pc, #24]	; (8021960 <MX_I2C2_Init+0x50>)
 8021948:	2200      	movs	r2, #0
 802194a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 802194c:	4804      	ldr	r0, [pc, #16]	; (8021960 <MX_I2C2_Init+0x50>)
 802194e:	f002 fdf9 	bl	8024544 <HAL_I2C_Init>
 8021952:	4603      	mov	r3, r0
 8021954:	2b00      	cmp	r3, #0
 8021956:	d001      	beq.n	802195c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8021958:	f000 fc80 	bl	802225c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 802195c:	bf00      	nop
 802195e:	bd80      	pop	{r7, pc}
 8021960:	20011034 	.word	0x20011034
 8021964:	40005800 	.word	0x40005800
 8021968:	000186a0 	.word	0x000186a0

0802196c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 802196c:	b580      	push	{r7, lr}
 802196e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8021970:	4b17      	ldr	r3, [pc, #92]	; (80219d0 <MX_SPI3_Init+0x64>)
 8021972:	4a18      	ldr	r2, [pc, #96]	; (80219d4 <MX_SPI3_Init+0x68>)
 8021974:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8021976:	4b16      	ldr	r3, [pc, #88]	; (80219d0 <MX_SPI3_Init+0x64>)
 8021978:	f44f 7282 	mov.w	r2, #260	; 0x104
 802197c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 802197e:	4b14      	ldr	r3, [pc, #80]	; (80219d0 <MX_SPI3_Init+0x64>)
 8021980:	2200      	movs	r2, #0
 8021982:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8021984:	4b12      	ldr	r3, [pc, #72]	; (80219d0 <MX_SPI3_Init+0x64>)
 8021986:	2200      	movs	r2, #0
 8021988:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 802198a:	4b11      	ldr	r3, [pc, #68]	; (80219d0 <MX_SPI3_Init+0x64>)
 802198c:	2200      	movs	r2, #0
 802198e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8021990:	4b0f      	ldr	r3, [pc, #60]	; (80219d0 <MX_SPI3_Init+0x64>)
 8021992:	2200      	movs	r2, #0
 8021994:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8021996:	4b0e      	ldr	r3, [pc, #56]	; (80219d0 <MX_SPI3_Init+0x64>)
 8021998:	f44f 7200 	mov.w	r2, #512	; 0x200
 802199c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 802199e:	4b0c      	ldr	r3, [pc, #48]	; (80219d0 <MX_SPI3_Init+0x64>)
 80219a0:	2238      	movs	r2, #56	; 0x38
 80219a2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80219a4:	4b0a      	ldr	r3, [pc, #40]	; (80219d0 <MX_SPI3_Init+0x64>)
 80219a6:	2200      	movs	r2, #0
 80219a8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80219aa:	4b09      	ldr	r3, [pc, #36]	; (80219d0 <MX_SPI3_Init+0x64>)
 80219ac:	2200      	movs	r2, #0
 80219ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80219b0:	4b07      	ldr	r3, [pc, #28]	; (80219d0 <MX_SPI3_Init+0x64>)
 80219b2:	2200      	movs	r2, #0
 80219b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80219b6:	4b06      	ldr	r3, [pc, #24]	; (80219d0 <MX_SPI3_Init+0x64>)
 80219b8:	220a      	movs	r2, #10
 80219ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80219bc:	4804      	ldr	r0, [pc, #16]	; (80219d0 <MX_SPI3_Init+0x64>)
 80219be:	f003 fb21 	bl	8025004 <HAL_SPI_Init>
 80219c2:	4603      	mov	r3, r0
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	d001      	beq.n	80219cc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80219c8:	f000 fc48 	bl	802225c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80219cc:	bf00      	nop
 80219ce:	bd80      	pop	{r7, pc}
 80219d0:	20011108 	.word	0x20011108
 80219d4:	40003c00 	.word	0x40003c00

080219d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80219d8:	b580      	push	{r7, lr}
 80219da:	b092      	sub	sp, #72	; 0x48
 80219dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80219de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80219e2:	2200      	movs	r2, #0
 80219e4:	601a      	str	r2, [r3, #0]
 80219e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80219e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80219ec:	2200      	movs	r2, #0
 80219ee:	601a      	str	r2, [r3, #0]
 80219f0:	605a      	str	r2, [r3, #4]
 80219f2:	609a      	str	r2, [r3, #8]
 80219f4:	60da      	str	r2, [r3, #12]
 80219f6:	611a      	str	r2, [r3, #16]
 80219f8:	615a      	str	r2, [r3, #20]
 80219fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80219fc:	1d3b      	adds	r3, r7, #4
 80219fe:	2220      	movs	r2, #32
 8021a00:	2100      	movs	r1, #0
 8021a02:	4618      	mov	r0, r3
 8021a04:	f005 f8a9 	bl	8026b5a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8021a08:	4b39      	ldr	r3, [pc, #228]	; (8021af0 <MX_TIM1_Init+0x118>)
 8021a0a:	4a3a      	ldr	r2, [pc, #232]	; (8021af4 <MX_TIM1_Init+0x11c>)
 8021a0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8021a0e:	4b38      	ldr	r3, [pc, #224]	; (8021af0 <MX_TIM1_Init+0x118>)
 8021a10:	2201      	movs	r2, #1
 8021a12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021a14:	4b36      	ldr	r3, [pc, #216]	; (8021af0 <MX_TIM1_Init+0x118>)
 8021a16:	2200      	movs	r2, #0
 8021a18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 8021a1a:	4b35      	ldr	r3, [pc, #212]	; (8021af0 <MX_TIM1_Init+0x118>)
 8021a1c:	f240 4219 	movw	r2, #1049	; 0x419
 8021a20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021a22:	4b33      	ldr	r3, [pc, #204]	; (8021af0 <MX_TIM1_Init+0x118>)
 8021a24:	2200      	movs	r2, #0
 8021a26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8021a28:	4b31      	ldr	r3, [pc, #196]	; (8021af0 <MX_TIM1_Init+0x118>)
 8021a2a:	2200      	movs	r2, #0
 8021a2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021a2e:	4b30      	ldr	r3, [pc, #192]	; (8021af0 <MX_TIM1_Init+0x118>)
 8021a30:	2200      	movs	r2, #0
 8021a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8021a34:	482e      	ldr	r0, [pc, #184]	; (8021af0 <MX_TIM1_Init+0x118>)
 8021a36:	f004 f888 	bl	8025b4a <HAL_TIM_PWM_Init>
 8021a3a:	4603      	mov	r3, r0
 8021a3c:	2b00      	cmp	r3, #0
 8021a3e:	d001      	beq.n	8021a44 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8021a40:	f000 fc0c 	bl	802225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021a44:	2300      	movs	r3, #0
 8021a46:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021a48:	2300      	movs	r3, #0
 8021a4a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8021a4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021a50:	4619      	mov	r1, r3
 8021a52:	4827      	ldr	r0, [pc, #156]	; (8021af0 <MX_TIM1_Init+0x118>)
 8021a54:	f004 ff6a 	bl	802692c <HAL_TIMEx_MasterConfigSynchronization>
 8021a58:	4603      	mov	r3, r0
 8021a5a:	2b00      	cmp	r3, #0
 8021a5c:	d001      	beq.n	8021a62 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8021a5e:	f000 fbfd 	bl	802225c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8021a62:	2360      	movs	r3, #96	; 0x60
 8021a64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8021a66:	2300      	movs	r3, #0
 8021a68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021a6a:	2300      	movs	r3, #0
 8021a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8021a6e:	2300      	movs	r3, #0
 8021a70:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021a72:	2300      	movs	r3, #0
 8021a74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8021a76:	2300      	movs	r3, #0
 8021a78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8021a7a:	2300      	movs	r3, #0
 8021a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8021a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021a82:	2204      	movs	r2, #4
 8021a84:	4619      	mov	r1, r3
 8021a86:	481a      	ldr	r0, [pc, #104]	; (8021af0 <MX_TIM1_Init+0x118>)
 8021a88:	f004 fa9a 	bl	8025fc0 <HAL_TIM_PWM_ConfigChannel>
 8021a8c:	4603      	mov	r3, r0
 8021a8e:	2b00      	cmp	r3, #0
 8021a90:	d001      	beq.n	8021a96 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8021a92:	f000 fbe3 	bl	802225c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8021a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021a9a:	220c      	movs	r2, #12
 8021a9c:	4619      	mov	r1, r3
 8021a9e:	4814      	ldr	r0, [pc, #80]	; (8021af0 <MX_TIM1_Init+0x118>)
 8021aa0:	f004 fa8e 	bl	8025fc0 <HAL_TIM_PWM_ConfigChannel>
 8021aa4:	4603      	mov	r3, r0
 8021aa6:	2b00      	cmp	r3, #0
 8021aa8:	d001      	beq.n	8021aae <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8021aaa:	f000 fbd7 	bl	802225c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8021aae:	2300      	movs	r3, #0
 8021ab0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8021ab2:	2300      	movs	r3, #0
 8021ab4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8021ab6:	2300      	movs	r3, #0
 8021ab8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8021aba:	2300      	movs	r3, #0
 8021abc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8021abe:	2300      	movs	r3, #0
 8021ac0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8021ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021ac6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8021ac8:	2300      	movs	r3, #0
 8021aca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8021acc:	1d3b      	adds	r3, r7, #4
 8021ace:	4619      	mov	r1, r3
 8021ad0:	4807      	ldr	r0, [pc, #28]	; (8021af0 <MX_TIM1_Init+0x118>)
 8021ad2:	f004 ffa7 	bl	8026a24 <HAL_TIMEx_ConfigBreakDeadTime>
 8021ad6:	4603      	mov	r3, r0
 8021ad8:	2b00      	cmp	r3, #0
 8021ada:	d001      	beq.n	8021ae0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8021adc:	f000 fbbe 	bl	802225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8021ae0:	4803      	ldr	r0, [pc, #12]	; (8021af0 <MX_TIM1_Init+0x118>)
 8021ae2:	f000 ff1f 	bl	8022924 <HAL_TIM_MspPostInit>

}
 8021ae6:	bf00      	nop
 8021ae8:	3748      	adds	r7, #72	; 0x48
 8021aea:	46bd      	mov	sp, r7
 8021aec:	bd80      	pop	{r7, pc}
 8021aee:	bf00      	nop
 8021af0:	20011288 	.word	0x20011288
 8021af4:	40010000 	.word	0x40010000

08021af8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8021af8:	b580      	push	{r7, lr}
 8021afa:	b086      	sub	sp, #24
 8021afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8021afe:	f107 0308 	add.w	r3, r7, #8
 8021b02:	2200      	movs	r2, #0
 8021b04:	601a      	str	r2, [r3, #0]
 8021b06:	605a      	str	r2, [r3, #4]
 8021b08:	609a      	str	r2, [r3, #8]
 8021b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021b0c:	463b      	mov	r3, r7
 8021b0e:	2200      	movs	r2, #0
 8021b10:	601a      	str	r2, [r3, #0]
 8021b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8021b14:	4b1d      	ldr	r3, [pc, #116]	; (8021b8c <MX_TIM2_Init+0x94>)
 8021b16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021b1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8021b1c:	4b1b      	ldr	r3, [pc, #108]	; (8021b8c <MX_TIM2_Init+0x94>)
 8021b1e:	2204      	movs	r2, #4
 8021b20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021b22:	4b1a      	ldr	r3, [pc, #104]	; (8021b8c <MX_TIM2_Init+0x94>)
 8021b24:	2200      	movs	r2, #0
 8021b26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 8021b28:	4b18      	ldr	r3, [pc, #96]	; (8021b8c <MX_TIM2_Init+0x94>)
 8021b2a:	4a19      	ldr	r2, [pc, #100]	; (8021b90 <MX_TIM2_Init+0x98>)
 8021b2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021b2e:	4b17      	ldr	r3, [pc, #92]	; (8021b8c <MX_TIM2_Init+0x94>)
 8021b30:	2200      	movs	r2, #0
 8021b32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021b34:	4b15      	ldr	r3, [pc, #84]	; (8021b8c <MX_TIM2_Init+0x94>)
 8021b36:	2200      	movs	r2, #0
 8021b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8021b3a:	4814      	ldr	r0, [pc, #80]	; (8021b8c <MX_TIM2_Init+0x94>)
 8021b3c:	f003 ffb6 	bl	8025aac <HAL_TIM_Base_Init>
 8021b40:	4603      	mov	r3, r0
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	d001      	beq.n	8021b4a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8021b46:	f000 fb89 	bl	802225c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8021b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021b4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8021b50:	f107 0308 	add.w	r3, r7, #8
 8021b54:	4619      	mov	r1, r3
 8021b56:	480d      	ldr	r0, [pc, #52]	; (8021b8c <MX_TIM2_Init+0x94>)
 8021b58:	f004 faf8 	bl	802614c <HAL_TIM_ConfigClockSource>
 8021b5c:	4603      	mov	r3, r0
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	d001      	beq.n	8021b66 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8021b62:	f000 fb7b 	bl	802225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021b66:	2300      	movs	r3, #0
 8021b68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021b6a:	2300      	movs	r3, #0
 8021b6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8021b6e:	463b      	mov	r3, r7
 8021b70:	4619      	mov	r1, r3
 8021b72:	4806      	ldr	r0, [pc, #24]	; (8021b8c <MX_TIM2_Init+0x94>)
 8021b74:	f004 feda 	bl	802692c <HAL_TIMEx_MasterConfigSynchronization>
 8021b78:	4603      	mov	r3, r0
 8021b7a:	2b00      	cmp	r3, #0
 8021b7c:	d001      	beq.n	8021b82 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8021b7e:	f000 fb6d 	bl	802225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8021b82:	bf00      	nop
 8021b84:	3718      	adds	r7, #24
 8021b86:	46bd      	mov	sp, r7
 8021b88:	bd80      	pop	{r7, pc}
 8021b8a:	bf00      	nop
 8021b8c:	200112c8 	.word	0x200112c8
 8021b90:	00019a27 	.word	0x00019a27

08021b94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8021b94:	b580      	push	{r7, lr}
 8021b96:	b08a      	sub	sp, #40	; 0x28
 8021b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021b9a:	f107 0320 	add.w	r3, r7, #32
 8021b9e:	2200      	movs	r2, #0
 8021ba0:	601a      	str	r2, [r3, #0]
 8021ba2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8021ba4:	1d3b      	adds	r3, r7, #4
 8021ba6:	2200      	movs	r2, #0
 8021ba8:	601a      	str	r2, [r3, #0]
 8021baa:	605a      	str	r2, [r3, #4]
 8021bac:	609a      	str	r2, [r3, #8]
 8021bae:	60da      	str	r2, [r3, #12]
 8021bb0:	611a      	str	r2, [r3, #16]
 8021bb2:	615a      	str	r2, [r3, #20]
 8021bb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8021bb6:	4b32      	ldr	r3, [pc, #200]	; (8021c80 <MX_TIM3_Init+0xec>)
 8021bb8:	4a32      	ldr	r2, [pc, #200]	; (8021c84 <MX_TIM3_Init+0xf0>)
 8021bba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8021bbc:	4b30      	ldr	r3, [pc, #192]	; (8021c80 <MX_TIM3_Init+0xec>)
 8021bbe:	2200      	movs	r2, #0
 8021bc0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021bc2:	4b2f      	ldr	r3, [pc, #188]	; (8021c80 <MX_TIM3_Init+0xec>)
 8021bc4:	2200      	movs	r2, #0
 8021bc6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8021bc8:	4b2d      	ldr	r3, [pc, #180]	; (8021c80 <MX_TIM3_Init+0xec>)
 8021bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021bce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021bd0:	4b2b      	ldr	r3, [pc, #172]	; (8021c80 <MX_TIM3_Init+0xec>)
 8021bd2:	2200      	movs	r2, #0
 8021bd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021bd6:	4b2a      	ldr	r3, [pc, #168]	; (8021c80 <MX_TIM3_Init+0xec>)
 8021bd8:	2200      	movs	r2, #0
 8021bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8021bdc:	4828      	ldr	r0, [pc, #160]	; (8021c80 <MX_TIM3_Init+0xec>)
 8021bde:	f003 ffb4 	bl	8025b4a <HAL_TIM_PWM_Init>
 8021be2:	4603      	mov	r3, r0
 8021be4:	2b00      	cmp	r3, #0
 8021be6:	d001      	beq.n	8021bec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8021be8:	f000 fb38 	bl	802225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021bec:	2300      	movs	r3, #0
 8021bee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021bf0:	2300      	movs	r3, #0
 8021bf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8021bf4:	f107 0320 	add.w	r3, r7, #32
 8021bf8:	4619      	mov	r1, r3
 8021bfa:	4821      	ldr	r0, [pc, #132]	; (8021c80 <MX_TIM3_Init+0xec>)
 8021bfc:	f004 fe96 	bl	802692c <HAL_TIMEx_MasterConfigSynchronization>
 8021c00:	4603      	mov	r3, r0
 8021c02:	2b00      	cmp	r3, #0
 8021c04:	d001      	beq.n	8021c0a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8021c06:	f000 fb29 	bl	802225c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8021c0a:	2360      	movs	r3, #96	; 0x60
 8021c0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8021c0e:	2300      	movs	r3, #0
 8021c10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021c12:	2300      	movs	r3, #0
 8021c14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021c16:	2300      	movs	r3, #0
 8021c18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8021c1a:	1d3b      	adds	r3, r7, #4
 8021c1c:	2200      	movs	r2, #0
 8021c1e:	4619      	mov	r1, r3
 8021c20:	4817      	ldr	r0, [pc, #92]	; (8021c80 <MX_TIM3_Init+0xec>)
 8021c22:	f004 f9cd 	bl	8025fc0 <HAL_TIM_PWM_ConfigChannel>
 8021c26:	4603      	mov	r3, r0
 8021c28:	2b00      	cmp	r3, #0
 8021c2a:	d001      	beq.n	8021c30 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8021c2c:	f000 fb16 	bl	802225c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8021c30:	1d3b      	adds	r3, r7, #4
 8021c32:	2204      	movs	r2, #4
 8021c34:	4619      	mov	r1, r3
 8021c36:	4812      	ldr	r0, [pc, #72]	; (8021c80 <MX_TIM3_Init+0xec>)
 8021c38:	f004 f9c2 	bl	8025fc0 <HAL_TIM_PWM_ConfigChannel>
 8021c3c:	4603      	mov	r3, r0
 8021c3e:	2b00      	cmp	r3, #0
 8021c40:	d001      	beq.n	8021c46 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8021c42:	f000 fb0b 	bl	802225c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8021c46:	1d3b      	adds	r3, r7, #4
 8021c48:	2208      	movs	r2, #8
 8021c4a:	4619      	mov	r1, r3
 8021c4c:	480c      	ldr	r0, [pc, #48]	; (8021c80 <MX_TIM3_Init+0xec>)
 8021c4e:	f004 f9b7 	bl	8025fc0 <HAL_TIM_PWM_ConfigChannel>
 8021c52:	4603      	mov	r3, r0
 8021c54:	2b00      	cmp	r3, #0
 8021c56:	d001      	beq.n	8021c5c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8021c58:	f000 fb00 	bl	802225c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8021c5c:	1d3b      	adds	r3, r7, #4
 8021c5e:	220c      	movs	r2, #12
 8021c60:	4619      	mov	r1, r3
 8021c62:	4807      	ldr	r0, [pc, #28]	; (8021c80 <MX_TIM3_Init+0xec>)
 8021c64:	f004 f9ac 	bl	8025fc0 <HAL_TIM_PWM_ConfigChannel>
 8021c68:	4603      	mov	r3, r0
 8021c6a:	2b00      	cmp	r3, #0
 8021c6c:	d001      	beq.n	8021c72 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8021c6e:	f000 faf5 	bl	802225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8021c72:	4803      	ldr	r0, [pc, #12]	; (8021c80 <MX_TIM3_Init+0xec>)
 8021c74:	f000 fe56 	bl	8022924 <HAL_TIM_MspPostInit>

}
 8021c78:	bf00      	nop
 8021c7a:	3728      	adds	r7, #40	; 0x28
 8021c7c:	46bd      	mov	sp, r7
 8021c7e:	bd80      	pop	{r7, pc}
 8021c80:	200110c8 	.word	0x200110c8
 8021c84:	40000400 	.word	0x40000400

08021c88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8021c88:	b580      	push	{r7, lr}
 8021c8a:	b08c      	sub	sp, #48	; 0x30
 8021c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8021c8e:	f107 030c 	add.w	r3, r7, #12
 8021c92:	2224      	movs	r2, #36	; 0x24
 8021c94:	2100      	movs	r1, #0
 8021c96:	4618      	mov	r0, r3
 8021c98:	f004 ff5f 	bl	8026b5a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021c9c:	1d3b      	adds	r3, r7, #4
 8021c9e:	2200      	movs	r2, #0
 8021ca0:	601a      	str	r2, [r3, #0]
 8021ca2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8021ca4:	4b20      	ldr	r3, [pc, #128]	; (8021d28 <MX_TIM4_Init+0xa0>)
 8021ca6:	4a21      	ldr	r2, [pc, #132]	; (8021d2c <MX_TIM4_Init+0xa4>)
 8021ca8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8021caa:	4b1f      	ldr	r3, [pc, #124]	; (8021d28 <MX_TIM4_Init+0xa0>)
 8021cac:	2200      	movs	r2, #0
 8021cae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021cb0:	4b1d      	ldr	r3, [pc, #116]	; (8021d28 <MX_TIM4_Init+0xa0>)
 8021cb2:	2200      	movs	r2, #0
 8021cb4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8021cb6:	4b1c      	ldr	r3, [pc, #112]	; (8021d28 <MX_TIM4_Init+0xa0>)
 8021cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021cbc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021cbe:	4b1a      	ldr	r3, [pc, #104]	; (8021d28 <MX_TIM4_Init+0xa0>)
 8021cc0:	2200      	movs	r2, #0
 8021cc2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021cc4:	4b18      	ldr	r3, [pc, #96]	; (8021d28 <MX_TIM4_Init+0xa0>)
 8021cc6:	2200      	movs	r2, #0
 8021cc8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8021cca:	2303      	movs	r3, #3
 8021ccc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8021cce:	2300      	movs	r3, #0
 8021cd0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8021cd2:	2301      	movs	r3, #1
 8021cd4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8021cd6:	2300      	movs	r3, #0
 8021cd8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8021cda:	2300      	movs	r3, #0
 8021cdc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8021cde:	2300      	movs	r3, #0
 8021ce0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8021ce2:	2301      	movs	r3, #1
 8021ce4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8021ce6:	2300      	movs	r3, #0
 8021ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8021cea:	2300      	movs	r3, #0
 8021cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8021cee:	f107 030c 	add.w	r3, r7, #12
 8021cf2:	4619      	mov	r1, r3
 8021cf4:	480c      	ldr	r0, [pc, #48]	; (8021d28 <MX_TIM4_Init+0xa0>)
 8021cf6:	f003 ff91 	bl	8025c1c <HAL_TIM_Encoder_Init>
 8021cfa:	4603      	mov	r3, r0
 8021cfc:	2b00      	cmp	r3, #0
 8021cfe:	d001      	beq.n	8021d04 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8021d00:	f000 faac 	bl	802225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021d04:	2300      	movs	r3, #0
 8021d06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021d08:	2300      	movs	r3, #0
 8021d0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8021d0c:	1d3b      	adds	r3, r7, #4
 8021d0e:	4619      	mov	r1, r3
 8021d10:	4805      	ldr	r0, [pc, #20]	; (8021d28 <MX_TIM4_Init+0xa0>)
 8021d12:	f004 fe0b 	bl	802692c <HAL_TIMEx_MasterConfigSynchronization>
 8021d16:	4603      	mov	r3, r0
 8021d18:	2b00      	cmp	r3, #0
 8021d1a:	d001      	beq.n	8021d20 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8021d1c:	f000 fa9e 	bl	802225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8021d20:	bf00      	nop
 8021d22:	3730      	adds	r7, #48	; 0x30
 8021d24:	46bd      	mov	sp, r7
 8021d26:	bd80      	pop	{r7, pc}
 8021d28:	20010ff4 	.word	0x20010ff4
 8021d2c:	40000800 	.word	0x40000800

08021d30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8021d30:	b580      	push	{r7, lr}
 8021d32:	b086      	sub	sp, #24
 8021d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8021d36:	f107 0308 	add.w	r3, r7, #8
 8021d3a:	2200      	movs	r2, #0
 8021d3c:	601a      	str	r2, [r3, #0]
 8021d3e:	605a      	str	r2, [r3, #4]
 8021d40:	609a      	str	r2, [r3, #8]
 8021d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021d44:	463b      	mov	r3, r7
 8021d46:	2200      	movs	r2, #0
 8021d48:	601a      	str	r2, [r3, #0]
 8021d4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8021d4c:	4b1d      	ldr	r3, [pc, #116]	; (8021dc4 <MX_TIM5_Init+0x94>)
 8021d4e:	4a1e      	ldr	r2, [pc, #120]	; (8021dc8 <MX_TIM5_Init+0x98>)
 8021d50:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 8021d52:	4b1c      	ldr	r3, [pc, #112]	; (8021dc4 <MX_TIM5_Init+0x94>)
 8021d54:	2204      	movs	r2, #4
 8021d56:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021d58:	4b1a      	ldr	r3, [pc, #104]	; (8021dc4 <MX_TIM5_Init+0x94>)
 8021d5a:	2200      	movs	r2, #0
 8021d5c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 8021d5e:	4b19      	ldr	r3, [pc, #100]	; (8021dc4 <MX_TIM5_Init+0x94>)
 8021d60:	f245 2207 	movw	r2, #20999	; 0x5207
 8021d64:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021d66:	4b17      	ldr	r3, [pc, #92]	; (8021dc4 <MX_TIM5_Init+0x94>)
 8021d68:	2200      	movs	r2, #0
 8021d6a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021d6c:	4b15      	ldr	r3, [pc, #84]	; (8021dc4 <MX_TIM5_Init+0x94>)
 8021d6e:	2200      	movs	r2, #0
 8021d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8021d72:	4814      	ldr	r0, [pc, #80]	; (8021dc4 <MX_TIM5_Init+0x94>)
 8021d74:	f003 fe9a 	bl	8025aac <HAL_TIM_Base_Init>
 8021d78:	4603      	mov	r3, r0
 8021d7a:	2b00      	cmp	r3, #0
 8021d7c:	d001      	beq.n	8021d82 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8021d7e:	f000 fa6d 	bl	802225c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8021d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021d86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8021d88:	f107 0308 	add.w	r3, r7, #8
 8021d8c:	4619      	mov	r1, r3
 8021d8e:	480d      	ldr	r0, [pc, #52]	; (8021dc4 <MX_TIM5_Init+0x94>)
 8021d90:	f004 f9dc 	bl	802614c <HAL_TIM_ConfigClockSource>
 8021d94:	4603      	mov	r3, r0
 8021d96:	2b00      	cmp	r3, #0
 8021d98:	d001      	beq.n	8021d9e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8021d9a:	f000 fa5f 	bl	802225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021d9e:	2300      	movs	r3, #0
 8021da0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021da2:	2300      	movs	r3, #0
 8021da4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8021da6:	463b      	mov	r3, r7
 8021da8:	4619      	mov	r1, r3
 8021daa:	4806      	ldr	r0, [pc, #24]	; (8021dc4 <MX_TIM5_Init+0x94>)
 8021dac:	f004 fdbe 	bl	802692c <HAL_TIMEx_MasterConfigSynchronization>
 8021db0:	4603      	mov	r3, r0
 8021db2:	2b00      	cmp	r3, #0
 8021db4:	d001      	beq.n	8021dba <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8021db6:	f000 fa51 	bl	802225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8021dba:	bf00      	nop
 8021dbc:	3718      	adds	r7, #24
 8021dbe:	46bd      	mov	sp, r7
 8021dc0:	bd80      	pop	{r7, pc}
 8021dc2:	bf00      	nop
 8021dc4:	20011088 	.word	0x20011088
 8021dc8:	40000c00 	.word	0x40000c00

08021dcc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8021dcc:	b580      	push	{r7, lr}
 8021dce:	b082      	sub	sp, #8
 8021dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021dd2:	463b      	mov	r3, r7
 8021dd4:	2200      	movs	r2, #0
 8021dd6:	601a      	str	r2, [r3, #0]
 8021dd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8021dda:	4b15      	ldr	r3, [pc, #84]	; (8021e30 <MX_TIM6_Init+0x64>)
 8021ddc:	4a15      	ldr	r2, [pc, #84]	; (8021e34 <MX_TIM6_Init+0x68>)
 8021dde:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8021de0:	4b13      	ldr	r3, [pc, #76]	; (8021e30 <MX_TIM6_Init+0x64>)
 8021de2:	2204      	movs	r2, #4
 8021de4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021de6:	4b12      	ldr	r3, [pc, #72]	; (8021e30 <MX_TIM6_Init+0x64>)
 8021de8:	2200      	movs	r2, #0
 8021dea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8021dec:	4b10      	ldr	r3, [pc, #64]	; (8021e30 <MX_TIM6_Init+0x64>)
 8021dee:	f642 1203 	movw	r2, #10499	; 0x2903
 8021df2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021df4:	4b0e      	ldr	r3, [pc, #56]	; (8021e30 <MX_TIM6_Init+0x64>)
 8021df6:	2200      	movs	r2, #0
 8021df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8021dfa:	480d      	ldr	r0, [pc, #52]	; (8021e30 <MX_TIM6_Init+0x64>)
 8021dfc:	f003 fe56 	bl	8025aac <HAL_TIM_Base_Init>
 8021e00:	4603      	mov	r3, r0
 8021e02:	2b00      	cmp	r3, #0
 8021e04:	d001      	beq.n	8021e0a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8021e06:	f000 fa29 	bl	802225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021e0a:	2300      	movs	r3, #0
 8021e0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021e0e:	2300      	movs	r3, #0
 8021e10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8021e12:	463b      	mov	r3, r7
 8021e14:	4619      	mov	r1, r3
 8021e16:	4806      	ldr	r0, [pc, #24]	; (8021e30 <MX_TIM6_Init+0x64>)
 8021e18:	f004 fd88 	bl	802692c <HAL_TIMEx_MasterConfigSynchronization>
 8021e1c:	4603      	mov	r3, r0
 8021e1e:	2b00      	cmp	r3, #0
 8021e20:	d001      	beq.n	8021e26 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8021e22:	f000 fa1b 	bl	802225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8021e26:	bf00      	nop
 8021e28:	3708      	adds	r7, #8
 8021e2a:	46bd      	mov	sp, r7
 8021e2c:	bd80      	pop	{r7, pc}
 8021e2e:	bf00      	nop
 8021e30:	20011248 	.word	0x20011248
 8021e34:	40001000 	.word	0x40001000

08021e38 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8021e38:	b580      	push	{r7, lr}
 8021e3a:	b082      	sub	sp, #8
 8021e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021e3e:	463b      	mov	r3, r7
 8021e40:	2200      	movs	r2, #0
 8021e42:	601a      	str	r2, [r3, #0]
 8021e44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8021e46:	4b15      	ldr	r3, [pc, #84]	; (8021e9c <MX_TIM7_Init+0x64>)
 8021e48:	4a15      	ldr	r2, [pc, #84]	; (8021ea0 <MX_TIM7_Init+0x68>)
 8021e4a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8021e4c:	4b13      	ldr	r3, [pc, #76]	; (8021e9c <MX_TIM7_Init+0x64>)
 8021e4e:	2204      	movs	r2, #4
 8021e50:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021e52:	4b12      	ldr	r3, [pc, #72]	; (8021e9c <MX_TIM7_Init+0x64>)
 8021e54:	2200      	movs	r2, #0
 8021e56:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 8021e58:	4b10      	ldr	r3, [pc, #64]	; (8021e9c <MX_TIM7_Init+0x64>)
 8021e5a:	f240 4219 	movw	r2, #1049	; 0x419
 8021e5e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021e60:	4b0e      	ldr	r3, [pc, #56]	; (8021e9c <MX_TIM7_Init+0x64>)
 8021e62:	2200      	movs	r2, #0
 8021e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8021e66:	480d      	ldr	r0, [pc, #52]	; (8021e9c <MX_TIM7_Init+0x64>)
 8021e68:	f003 fe20 	bl	8025aac <HAL_TIM_Base_Init>
 8021e6c:	4603      	mov	r3, r0
 8021e6e:	2b00      	cmp	r3, #0
 8021e70:	d001      	beq.n	8021e76 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8021e72:	f000 f9f3 	bl	802225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021e76:	2300      	movs	r3, #0
 8021e78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021e7a:	2300      	movs	r3, #0
 8021e7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8021e7e:	463b      	mov	r3, r7
 8021e80:	4619      	mov	r1, r3
 8021e82:	4806      	ldr	r0, [pc, #24]	; (8021e9c <MX_TIM7_Init+0x64>)
 8021e84:	f004 fd52 	bl	802692c <HAL_TIMEx_MasterConfigSynchronization>
 8021e88:	4603      	mov	r3, r0
 8021e8a:	2b00      	cmp	r3, #0
 8021e8c:	d001      	beq.n	8021e92 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8021e8e:	f000 f9e5 	bl	802225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8021e92:	bf00      	nop
 8021e94:	3708      	adds	r7, #8
 8021e96:	46bd      	mov	sp, r7
 8021e98:	bd80      	pop	{r7, pc}
 8021e9a:	bf00      	nop
 8021e9c:	20011348 	.word	0x20011348
 8021ea0:	40001400 	.word	0x40001400

08021ea4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8021ea4:	b580      	push	{r7, lr}
 8021ea6:	b08c      	sub	sp, #48	; 0x30
 8021ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8021eaa:	f107 030c 	add.w	r3, r7, #12
 8021eae:	2224      	movs	r2, #36	; 0x24
 8021eb0:	2100      	movs	r1, #0
 8021eb2:	4618      	mov	r0, r3
 8021eb4:	f004 fe51 	bl	8026b5a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021eb8:	1d3b      	adds	r3, r7, #4
 8021eba:	2200      	movs	r2, #0
 8021ebc:	601a      	str	r2, [r3, #0]
 8021ebe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8021ec0:	4b22      	ldr	r3, [pc, #136]	; (8021f4c <MX_TIM8_Init+0xa8>)
 8021ec2:	4a23      	ldr	r2, [pc, #140]	; (8021f50 <MX_TIM8_Init+0xac>)
 8021ec4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8021ec6:	4b21      	ldr	r3, [pc, #132]	; (8021f4c <MX_TIM8_Init+0xa8>)
 8021ec8:	2200      	movs	r2, #0
 8021eca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021ecc:	4b1f      	ldr	r3, [pc, #124]	; (8021f4c <MX_TIM8_Init+0xa8>)
 8021ece:	2200      	movs	r2, #0
 8021ed0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8021ed2:	4b1e      	ldr	r3, [pc, #120]	; (8021f4c <MX_TIM8_Init+0xa8>)
 8021ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021ed8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021eda:	4b1c      	ldr	r3, [pc, #112]	; (8021f4c <MX_TIM8_Init+0xa8>)
 8021edc:	2200      	movs	r2, #0
 8021ede:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8021ee0:	4b1a      	ldr	r3, [pc, #104]	; (8021f4c <MX_TIM8_Init+0xa8>)
 8021ee2:	2200      	movs	r2, #0
 8021ee4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021ee6:	4b19      	ldr	r3, [pc, #100]	; (8021f4c <MX_TIM8_Init+0xa8>)
 8021ee8:	2200      	movs	r2, #0
 8021eea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8021eec:	2303      	movs	r3, #3
 8021eee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8021ef0:	2300      	movs	r3, #0
 8021ef2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8021ef4:	2301      	movs	r3, #1
 8021ef6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8021ef8:	2300      	movs	r3, #0
 8021efa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8021efc:	2300      	movs	r3, #0
 8021efe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8021f00:	2300      	movs	r3, #0
 8021f02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8021f04:	2301      	movs	r3, #1
 8021f06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8021f08:	2300      	movs	r3, #0
 8021f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8021f0c:	2300      	movs	r3, #0
 8021f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8021f10:	f107 030c 	add.w	r3, r7, #12
 8021f14:	4619      	mov	r1, r3
 8021f16:	480d      	ldr	r0, [pc, #52]	; (8021f4c <MX_TIM8_Init+0xa8>)
 8021f18:	f003 fe80 	bl	8025c1c <HAL_TIM_Encoder_Init>
 8021f1c:	4603      	mov	r3, r0
 8021f1e:	2b00      	cmp	r3, #0
 8021f20:	d001      	beq.n	8021f26 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8021f22:	f000 f99b 	bl	802225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021f26:	2300      	movs	r3, #0
 8021f28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021f2a:	2300      	movs	r3, #0
 8021f2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8021f2e:	1d3b      	adds	r3, r7, #4
 8021f30:	4619      	mov	r1, r3
 8021f32:	4806      	ldr	r0, [pc, #24]	; (8021f4c <MX_TIM8_Init+0xa8>)
 8021f34:	f004 fcfa 	bl	802692c <HAL_TIMEx_MasterConfigSynchronization>
 8021f38:	4603      	mov	r3, r0
 8021f3a:	2b00      	cmp	r3, #0
 8021f3c:	d001      	beq.n	8021f42 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8021f3e:	f000 f98d 	bl	802225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8021f42:	bf00      	nop
 8021f44:	3730      	adds	r7, #48	; 0x30
 8021f46:	46bd      	mov	sp, r7
 8021f48:	bd80      	pop	{r7, pc}
 8021f4a:	bf00      	nop
 8021f4c:	20010fb4 	.word	0x20010fb4
 8021f50:	40010400 	.word	0x40010400

08021f54 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8021f54:	b580      	push	{r7, lr}
 8021f56:	b088      	sub	sp, #32
 8021f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8021f5a:	1d3b      	adds	r3, r7, #4
 8021f5c:	2200      	movs	r2, #0
 8021f5e:	601a      	str	r2, [r3, #0]
 8021f60:	605a      	str	r2, [r3, #4]
 8021f62:	609a      	str	r2, [r3, #8]
 8021f64:	60da      	str	r2, [r3, #12]
 8021f66:	611a      	str	r2, [r3, #16]
 8021f68:	615a      	str	r2, [r3, #20]
 8021f6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8021f6c:	4b1e      	ldr	r3, [pc, #120]	; (8021fe8 <MX_TIM11_Init+0x94>)
 8021f6e:	4a1f      	ldr	r2, [pc, #124]	; (8021fec <MX_TIM11_Init+0x98>)
 8021f70:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8021f72:	4b1d      	ldr	r3, [pc, #116]	; (8021fe8 <MX_TIM11_Init+0x94>)
 8021f74:	2200      	movs	r2, #0
 8021f76:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021f78:	4b1b      	ldr	r3, [pc, #108]	; (8021fe8 <MX_TIM11_Init+0x94>)
 8021f7a:	2200      	movs	r2, #0
 8021f7c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 8021f7e:	4b1a      	ldr	r3, [pc, #104]	; (8021fe8 <MX_TIM11_Init+0x94>)
 8021f80:	f240 628f 	movw	r2, #1679	; 0x68f
 8021f84:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021f86:	4b18      	ldr	r3, [pc, #96]	; (8021fe8 <MX_TIM11_Init+0x94>)
 8021f88:	2200      	movs	r2, #0
 8021f8a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021f8c:	4b16      	ldr	r3, [pc, #88]	; (8021fe8 <MX_TIM11_Init+0x94>)
 8021f8e:	2200      	movs	r2, #0
 8021f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8021f92:	4815      	ldr	r0, [pc, #84]	; (8021fe8 <MX_TIM11_Init+0x94>)
 8021f94:	f003 fd8a 	bl	8025aac <HAL_TIM_Base_Init>
 8021f98:	4603      	mov	r3, r0
 8021f9a:	2b00      	cmp	r3, #0
 8021f9c:	d001      	beq.n	8021fa2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8021f9e:	f000 f95d 	bl	802225c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8021fa2:	4811      	ldr	r0, [pc, #68]	; (8021fe8 <MX_TIM11_Init+0x94>)
 8021fa4:	f003 fdd1 	bl	8025b4a <HAL_TIM_PWM_Init>
 8021fa8:	4603      	mov	r3, r0
 8021faa:	2b00      	cmp	r3, #0
 8021fac:	d001      	beq.n	8021fb2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8021fae:	f000 f955 	bl	802225c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8021fb2:	2360      	movs	r3, #96	; 0x60
 8021fb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8021fb6:	2300      	movs	r3, #0
 8021fb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021fba:	2300      	movs	r3, #0
 8021fbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021fbe:	2300      	movs	r3, #0
 8021fc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8021fc2:	1d3b      	adds	r3, r7, #4
 8021fc4:	2200      	movs	r2, #0
 8021fc6:	4619      	mov	r1, r3
 8021fc8:	4807      	ldr	r0, [pc, #28]	; (8021fe8 <MX_TIM11_Init+0x94>)
 8021fca:	f003 fff9 	bl	8025fc0 <HAL_TIM_PWM_ConfigChannel>
 8021fce:	4603      	mov	r3, r0
 8021fd0:	2b00      	cmp	r3, #0
 8021fd2:	d001      	beq.n	8021fd8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8021fd4:	f000 f942 	bl	802225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8021fd8:	4803      	ldr	r0, [pc, #12]	; (8021fe8 <MX_TIM11_Init+0x94>)
 8021fda:	f000 fca3 	bl	8022924 <HAL_TIM_MspPostInit>

}
 8021fde:	bf00      	nop
 8021fe0:	3720      	adds	r7, #32
 8021fe2:	46bd      	mov	sp, r7
 8021fe4:	bd80      	pop	{r7, pc}
 8021fe6:	bf00      	nop
 8021fe8:	200111a8 	.word	0x200111a8
 8021fec:	40014800 	.word	0x40014800

08021ff0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8021ff0:	b580      	push	{r7, lr}
 8021ff2:	b088      	sub	sp, #32
 8021ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8021ff6:	1d3b      	adds	r3, r7, #4
 8021ff8:	2200      	movs	r2, #0
 8021ffa:	601a      	str	r2, [r3, #0]
 8021ffc:	605a      	str	r2, [r3, #4]
 8021ffe:	609a      	str	r2, [r3, #8]
 8022000:	60da      	str	r2, [r3, #12]
 8022002:	611a      	str	r2, [r3, #16]
 8022004:	615a      	str	r2, [r3, #20]
 8022006:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8022008:	4b1a      	ldr	r3, [pc, #104]	; (8022074 <MX_TIM12_Init+0x84>)
 802200a:	4a1b      	ldr	r2, [pc, #108]	; (8022078 <MX_TIM12_Init+0x88>)
 802200c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 802200e:	4b19      	ldr	r3, [pc, #100]	; (8022074 <MX_TIM12_Init+0x84>)
 8022010:	f44f 725c 	mov.w	r2, #880	; 0x370
 8022014:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022016:	4b17      	ldr	r3, [pc, #92]	; (8022074 <MX_TIM12_Init+0x84>)
 8022018:	2200      	movs	r2, #0
 802201a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 802201c:	4b15      	ldr	r3, [pc, #84]	; (8022074 <MX_TIM12_Init+0x84>)
 802201e:	2235      	movs	r2, #53	; 0x35
 8022020:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8022022:	4b14      	ldr	r3, [pc, #80]	; (8022074 <MX_TIM12_Init+0x84>)
 8022024:	2200      	movs	r2, #0
 8022026:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022028:	4b12      	ldr	r3, [pc, #72]	; (8022074 <MX_TIM12_Init+0x84>)
 802202a:	2200      	movs	r2, #0
 802202c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 802202e:	4811      	ldr	r0, [pc, #68]	; (8022074 <MX_TIM12_Init+0x84>)
 8022030:	f003 fd8b 	bl	8025b4a <HAL_TIM_PWM_Init>
 8022034:	4603      	mov	r3, r0
 8022036:	2b00      	cmp	r3, #0
 8022038:	d001      	beq.n	802203e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 802203a:	f000 f90f 	bl	802225c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802203e:	2360      	movs	r3, #96	; 0x60
 8022040:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8022042:	2300      	movs	r3, #0
 8022044:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8022046:	2300      	movs	r3, #0
 8022048:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802204a:	2300      	movs	r3, #0
 802204c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 802204e:	1d3b      	adds	r3, r7, #4
 8022050:	2204      	movs	r2, #4
 8022052:	4619      	mov	r1, r3
 8022054:	4807      	ldr	r0, [pc, #28]	; (8022074 <MX_TIM12_Init+0x84>)
 8022056:	f003 ffb3 	bl	8025fc0 <HAL_TIM_PWM_ConfigChannel>
 802205a:	4603      	mov	r3, r0
 802205c:	2b00      	cmp	r3, #0
 802205e:	d001      	beq.n	8022064 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8022060:	f000 f8fc 	bl	802225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8022064:	4803      	ldr	r0, [pc, #12]	; (8022074 <MX_TIM12_Init+0x84>)
 8022066:	f000 fc5d 	bl	8022924 <HAL_TIM_MspPostInit>

}
 802206a:	bf00      	nop
 802206c:	3720      	adds	r7, #32
 802206e:	46bd      	mov	sp, r7
 8022070:	bd80      	pop	{r7, pc}
 8022072:	bf00      	nop
 8022074:	20011308 	.word	0x20011308
 8022078:	40001800 	.word	0x40001800

0802207c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 802207c:	b580      	push	{r7, lr}
 802207e:	b082      	sub	sp, #8
 8022080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8022082:	2300      	movs	r3, #0
 8022084:	607b      	str	r3, [r7, #4]
 8022086:	4b0c      	ldr	r3, [pc, #48]	; (80220b8 <MX_DMA_Init+0x3c>)
 8022088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802208a:	4a0b      	ldr	r2, [pc, #44]	; (80220b8 <MX_DMA_Init+0x3c>)
 802208c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8022090:	6313      	str	r3, [r2, #48]	; 0x30
 8022092:	4b09      	ldr	r3, [pc, #36]	; (80220b8 <MX_DMA_Init+0x3c>)
 8022094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802209a:	607b      	str	r3, [r7, #4]
 802209c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 802209e:	2200      	movs	r2, #0
 80220a0:	2100      	movs	r1, #0
 80220a2:	2038      	movs	r0, #56	; 0x38
 80220a4:	f001 fcdd 	bl	8023a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80220a8:	2038      	movs	r0, #56	; 0x38
 80220aa:	f001 fcf6 	bl	8023a9a <HAL_NVIC_EnableIRQ>

}
 80220ae:	bf00      	nop
 80220b0:	3708      	adds	r7, #8
 80220b2:	46bd      	mov	sp, r7
 80220b4:	bd80      	pop	{r7, pc}
 80220b6:	bf00      	nop
 80220b8:	40023800 	.word	0x40023800

080220bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80220bc:	b580      	push	{r7, lr}
 80220be:	b08a      	sub	sp, #40	; 0x28
 80220c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80220c2:	f107 0314 	add.w	r3, r7, #20
 80220c6:	2200      	movs	r2, #0
 80220c8:	601a      	str	r2, [r3, #0]
 80220ca:	605a      	str	r2, [r3, #4]
 80220cc:	609a      	str	r2, [r3, #8]
 80220ce:	60da      	str	r2, [r3, #12]
 80220d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80220d2:	2300      	movs	r3, #0
 80220d4:	613b      	str	r3, [r7, #16]
 80220d6:	4b5c      	ldr	r3, [pc, #368]	; (8022248 <MX_GPIO_Init+0x18c>)
 80220d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80220da:	4a5b      	ldr	r2, [pc, #364]	; (8022248 <MX_GPIO_Init+0x18c>)
 80220dc:	f043 0304 	orr.w	r3, r3, #4
 80220e0:	6313      	str	r3, [r2, #48]	; 0x30
 80220e2:	4b59      	ldr	r3, [pc, #356]	; (8022248 <MX_GPIO_Init+0x18c>)
 80220e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80220e6:	f003 0304 	and.w	r3, r3, #4
 80220ea:	613b      	str	r3, [r7, #16]
 80220ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80220ee:	2300      	movs	r3, #0
 80220f0:	60fb      	str	r3, [r7, #12]
 80220f2:	4b55      	ldr	r3, [pc, #340]	; (8022248 <MX_GPIO_Init+0x18c>)
 80220f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80220f6:	4a54      	ldr	r2, [pc, #336]	; (8022248 <MX_GPIO_Init+0x18c>)
 80220f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80220fc:	6313      	str	r3, [r2, #48]	; 0x30
 80220fe:	4b52      	ldr	r3, [pc, #328]	; (8022248 <MX_GPIO_Init+0x18c>)
 8022100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022106:	60fb      	str	r3, [r7, #12]
 8022108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802210a:	2300      	movs	r3, #0
 802210c:	60bb      	str	r3, [r7, #8]
 802210e:	4b4e      	ldr	r3, [pc, #312]	; (8022248 <MX_GPIO_Init+0x18c>)
 8022110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022112:	4a4d      	ldr	r2, [pc, #308]	; (8022248 <MX_GPIO_Init+0x18c>)
 8022114:	f043 0301 	orr.w	r3, r3, #1
 8022118:	6313      	str	r3, [r2, #48]	; 0x30
 802211a:	4b4b      	ldr	r3, [pc, #300]	; (8022248 <MX_GPIO_Init+0x18c>)
 802211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802211e:	f003 0301 	and.w	r3, r3, #1
 8022122:	60bb      	str	r3, [r7, #8]
 8022124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8022126:	2300      	movs	r3, #0
 8022128:	607b      	str	r3, [r7, #4]
 802212a:	4b47      	ldr	r3, [pc, #284]	; (8022248 <MX_GPIO_Init+0x18c>)
 802212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802212e:	4a46      	ldr	r2, [pc, #280]	; (8022248 <MX_GPIO_Init+0x18c>)
 8022130:	f043 0302 	orr.w	r3, r3, #2
 8022134:	6313      	str	r3, [r2, #48]	; 0x30
 8022136:	4b44      	ldr	r3, [pc, #272]	; (8022248 <MX_GPIO_Init+0x18c>)
 8022138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802213a:	f003 0302 	and.w	r3, r3, #2
 802213e:	607b      	str	r3, [r7, #4]
 8022140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8022142:	2300      	movs	r3, #0
 8022144:	603b      	str	r3, [r7, #0]
 8022146:	4b40      	ldr	r3, [pc, #256]	; (8022248 <MX_GPIO_Init+0x18c>)
 8022148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802214a:	4a3f      	ldr	r2, [pc, #252]	; (8022248 <MX_GPIO_Init+0x18c>)
 802214c:	f043 0308 	orr.w	r3, r3, #8
 8022150:	6313      	str	r3, [r2, #48]	; 0x30
 8022152:	4b3d      	ldr	r3, [pc, #244]	; (8022248 <MX_GPIO_Init+0x18c>)
 8022154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022156:	f003 0308 	and.w	r3, r3, #8
 802215a:	603b      	str	r3, [r7, #0]
 802215c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 802215e:	2200      	movs	r2, #0
 8022160:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8022164:	4839      	ldr	r0, [pc, #228]	; (802224c <MX_GPIO_Init+0x190>)
 8022166:	f002 f9d3 	bl	8024510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 802216a:	2201      	movs	r2, #1
 802216c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8022170:	4837      	ldr	r0, [pc, #220]	; (8022250 <MX_GPIO_Init+0x194>)
 8022172:	f002 f9cd 	bl	8024510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8022176:	2200      	movs	r2, #0
 8022178:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 802217c:	4835      	ldr	r0, [pc, #212]	; (8022254 <MX_GPIO_Init+0x198>)
 802217e:	f002 f9c7 	bl	8024510 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8022182:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8022186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8022188:	2301      	movs	r3, #1
 802218a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802218c:	2300      	movs	r3, #0
 802218e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022190:	2300      	movs	r3, #0
 8022192:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8022194:	f107 0314 	add.w	r3, r7, #20
 8022198:	4619      	mov	r1, r3
 802219a:	482c      	ldr	r0, [pc, #176]	; (802224c <MX_GPIO_Init+0x190>)
 802219c:	f002 f806 	bl	80241ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80221a0:	2307      	movs	r3, #7
 80221a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80221a4:	2300      	movs	r3, #0
 80221a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80221a8:	2301      	movs	r3, #1
 80221aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80221ac:	f107 0314 	add.w	r3, r7, #20
 80221b0:	4619      	mov	r1, r3
 80221b2:	4827      	ldr	r0, [pc, #156]	; (8022250 <MX_GPIO_Init+0x194>)
 80221b4:	f001 fffa 	bl	80241ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80221b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80221bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80221be:	2301      	movs	r3, #1
 80221c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80221c2:	2300      	movs	r3, #0
 80221c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80221c6:	2300      	movs	r3, #0
 80221c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80221ca:	f107 0314 	add.w	r3, r7, #20
 80221ce:	4619      	mov	r1, r3
 80221d0:	481f      	ldr	r0, [pc, #124]	; (8022250 <MX_GPIO_Init+0x194>)
 80221d2:	f001 ffeb 	bl	80241ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 80221d6:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 80221da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80221dc:	2300      	movs	r3, #0
 80221de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80221e0:	2300      	movs	r3, #0
 80221e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80221e4:	f107 0314 	add.w	r3, r7, #20
 80221e8:	4619      	mov	r1, r3
 80221ea:	4819      	ldr	r0, [pc, #100]	; (8022250 <MX_GPIO_Init+0x194>)
 80221ec:	f001 ffde 	bl	80241ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 80221f0:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 80221f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80221f6:	2301      	movs	r3, #1
 80221f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80221fa:	2300      	movs	r3, #0
 80221fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80221fe:	2300      	movs	r3, #0
 8022200:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022202:	f107 0314 	add.w	r3, r7, #20
 8022206:	4619      	mov	r1, r3
 8022208:	4812      	ldr	r0, [pc, #72]	; (8022254 <MX_GPIO_Init+0x198>)
 802220a:	f001 ffcf 	bl	80241ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 802220e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022214:	2300      	movs	r3, #0
 8022216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8022218:	2301      	movs	r3, #1
 802221a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802221c:	f107 0314 	add.w	r3, r7, #20
 8022220:	4619      	mov	r1, r3
 8022222:	480c      	ldr	r0, [pc, #48]	; (8022254 <MX_GPIO_Init+0x198>)
 8022224:	f001 ffc2 	bl	80241ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8022228:	2304      	movs	r3, #4
 802222a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802222c:	2300      	movs	r3, #0
 802222e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022230:	2300      	movs	r3, #0
 8022232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8022234:	f107 0314 	add.w	r3, r7, #20
 8022238:	4619      	mov	r1, r3
 802223a:	4807      	ldr	r0, [pc, #28]	; (8022258 <MX_GPIO_Init+0x19c>)
 802223c:	f001 ffb6 	bl	80241ac <HAL_GPIO_Init>

}
 8022240:	bf00      	nop
 8022242:	3728      	adds	r7, #40	; 0x28
 8022244:	46bd      	mov	sp, r7
 8022246:	bd80      	pop	{r7, pc}
 8022248:	40023800 	.word	0x40023800
 802224c:	40020800 	.word	0x40020800
 8022250:	40020400 	.word	0x40020400
 8022254:	40020000 	.word	0x40020000
 8022258:	40020c00 	.word	0x40020c00

0802225c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802225c:	b480      	push	{r7}
 802225e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8022260:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8022262:	e7fe      	b.n	8022262 <Error_Handler+0x6>

08022264 <_ZN5Motor4InitEv>:
#include "motor.hpp"
#include "declare_extern.h"

void Motor::Init()
{
 8022264:	b580      	push	{r7, lr}
 8022266:	b082      	sub	sp, #8
 8022268:	af00      	add	r7, sp, #0
 802226a:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 802226c:	2104      	movs	r1, #4
 802226e:	4812      	ldr	r0, [pc, #72]	; (80222b8 <_ZN5Motor4InitEv+0x54>)
 8022270:	f003 fc96 	bl	8025ba0 <HAL_TIM_PWM_Start>
 8022274:	4603      	mov	r3, r0
 8022276:	2b00      	cmp	r3, #0
 8022278:	bf14      	ite	ne
 802227a:	2301      	movne	r3, #1
 802227c:	2300      	moveq	r3, #0
 802227e:	b2db      	uxtb	r3, r3
 8022280:	2b00      	cmp	r3, #0
 8022282:	d004      	beq.n	802228e <_ZN5Motor4InitEv+0x2a>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch2 = true; // MOTOR_R
 8022284:	4b0d      	ldr	r3, [pc, #52]	; (80222bc <_ZN5Motor4InitEv+0x58>)
 8022286:	2201      	movs	r2, #1
 8022288:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 802228a:	f7ff ffe7 	bl	802225c <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 802228e:	210c      	movs	r1, #12
 8022290:	4809      	ldr	r0, [pc, #36]	; (80222b8 <_ZN5Motor4InitEv+0x54>)
 8022292:	f003 fc85 	bl	8025ba0 <HAL_TIM_PWM_Start>
 8022296:	4603      	mov	r3, r0
 8022298:	2b00      	cmp	r3, #0
 802229a:	bf14      	ite	ne
 802229c:	2301      	movne	r3, #1
 802229e:	2300      	moveq	r3, #0
 80222a0:	b2db      	uxtb	r3, r3
 80222a2:	2b00      	cmp	r3, #0
 80222a4:	d004      	beq.n	80222b0 <_ZN5Motor4InitEv+0x4c>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch4 = true; // MOTOR_L
 80222a6:	4b06      	ldr	r3, [pc, #24]	; (80222c0 <_ZN5Motor4InitEv+0x5c>)
 80222a8:	2201      	movs	r2, #1
 80222aa:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 80222ac:	f7ff ffd6 	bl	802225c <Error_Handler>
    }
}
 80222b0:	bf00      	nop
 80222b2:	3708      	adds	r7, #8
 80222b4:	46bd      	mov	sp, r7
 80222b6:	bd80      	pop	{r7, pc}
 80222b8:	20011288 	.word	0x20011288
 80222bc:	20000206 	.word	0x20000206
 80222c0:	20000207 	.word	0x20000207

080222c4 <_ZN5PrintC1EP5Flash>:
#include <stdio.h>
#include <string.h>

extern float g_swo_test;

Print::Print(Flash *flash)
 80222c4:	b480      	push	{r7}
 80222c6:	b083      	sub	sp, #12
 80222c8:	af00      	add	r7, sp, #0
 80222ca:	6078      	str	r0, [r7, #4]
 80222cc:	6039      	str	r1, [r7, #0]
{
    flash_ = flash;
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	f503 3385 	add.w	r3, r3, #68096	; 0x10a00
 80222d4:	3368      	adds	r3, #104	; 0x68
 80222d6:	683a      	ldr	r2, [r7, #0]
 80222d8:	601a      	str	r2, [r3, #0]
}
 80222da:	687b      	ldr	r3, [r7, #4]
 80222dc:	4618      	mov	r0, r3
 80222de:	370c      	adds	r7, #12
 80222e0:	46bd      	mov	sp, r7
 80222e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222e6:	4770      	bx	lr

080222e8 <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 80222e8:	b580      	push	{r7, lr}
 80222ea:	b084      	sub	sp, #16
 80222ec:	af00      	add	r7, sp, #0
 80222ee:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 80222f0:	2300      	movs	r3, #0
 80222f2:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 80222f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80222f8:	4821      	ldr	r0, [pc, #132]	; (8022380 <_ZN12RotarySwitch5StateEv+0x98>)
 80222fa:	f002 f8f1 	bl	80244e0 <HAL_GPIO_ReadPin>
 80222fe:	4603      	mov	r3, r0
 8022300:	2b00      	cmp	r3, #0
 8022302:	bf0c      	ite	eq
 8022304:	2301      	moveq	r3, #1
 8022306:	2300      	movne	r3, #0
 8022308:	b2db      	uxtb	r3, r3
 802230a:	2b00      	cmp	r3, #0
 802230c:	d003      	beq.n	8022316 <_ZN12RotarySwitch5StateEv+0x2e>
 802230e:	7bfb      	ldrb	r3, [r7, #15]
 8022310:	f043 0301 	orr.w	r3, r3, #1
 8022314:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 8022316:	2104      	movs	r1, #4
 8022318:	481a      	ldr	r0, [pc, #104]	; (8022384 <_ZN12RotarySwitch5StateEv+0x9c>)
 802231a:	f002 f8e1 	bl	80244e0 <HAL_GPIO_ReadPin>
 802231e:	4603      	mov	r3, r0
 8022320:	2b00      	cmp	r3, #0
 8022322:	bf0c      	ite	eq
 8022324:	2301      	moveq	r3, #1
 8022326:	2300      	movne	r3, #0
 8022328:	b2db      	uxtb	r3, r3
 802232a:	2b00      	cmp	r3, #0
 802232c:	d003      	beq.n	8022336 <_ZN12RotarySwitch5StateEv+0x4e>
 802232e:	7bfb      	ldrb	r3, [r7, #15]
 8022330:	f043 0302 	orr.w	r3, r3, #2
 8022334:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 8022336:	2102      	movs	r1, #2
 8022338:	4812      	ldr	r0, [pc, #72]	; (8022384 <_ZN12RotarySwitch5StateEv+0x9c>)
 802233a:	f002 f8d1 	bl	80244e0 <HAL_GPIO_ReadPin>
 802233e:	4603      	mov	r3, r0
 8022340:	2b00      	cmp	r3, #0
 8022342:	bf0c      	ite	eq
 8022344:	2301      	moveq	r3, #1
 8022346:	2300      	movne	r3, #0
 8022348:	b2db      	uxtb	r3, r3
 802234a:	2b00      	cmp	r3, #0
 802234c:	d003      	beq.n	8022356 <_ZN12RotarySwitch5StateEv+0x6e>
 802234e:	7bfb      	ldrb	r3, [r7, #15]
 8022350:	f043 0304 	orr.w	r3, r3, #4
 8022354:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 8022356:	2101      	movs	r1, #1
 8022358:	480a      	ldr	r0, [pc, #40]	; (8022384 <_ZN12RotarySwitch5StateEv+0x9c>)
 802235a:	f002 f8c1 	bl	80244e0 <HAL_GPIO_ReadPin>
 802235e:	4603      	mov	r3, r0
 8022360:	2b00      	cmp	r3, #0
 8022362:	bf0c      	ite	eq
 8022364:	2301      	moveq	r3, #1
 8022366:	2300      	movne	r3, #0
 8022368:	b2db      	uxtb	r3, r3
 802236a:	2b00      	cmp	r3, #0
 802236c:	d003      	beq.n	8022376 <_ZN12RotarySwitch5StateEv+0x8e>
 802236e:	7bfb      	ldrb	r3, [r7, #15]
 8022370:	f043 0308 	orr.w	r3, r3, #8
 8022374:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 8022376:	7bfb      	ldrb	r3, [r7, #15]
 8022378:	4618      	mov	r0, r3
 802237a:	3710      	adds	r7, #16
 802237c:	46bd      	mov	sp, r7
 802237e:	bd80      	pop	{r7, pc}
 8022380:	40020000 	.word	0x40020000
 8022384:	40020400 	.word	0x40020400

08022388 <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0)
 8022388:	b480      	push	{r7}
 802238a:	b083      	sub	sp, #12
 802238c:	af00      	add	r7, sp, #0
 802238e:	6078      	str	r0, [r7, #4]
                         , write_state_flags_(0)
                         , exception_flags_(0)
                         , master_count_(0)
                         , goal_marker_count_(0)
                         , corner_marker_count_(0)
                         , cross_line_count_(0) {}
 8022390:	687b      	ldr	r3, [r7, #4]
 8022392:	2200      	movs	r2, #0
 8022394:	701a      	strb	r2, [r3, #0]
 8022396:	687b      	ldr	r3, [r7, #4]
 8022398:	2200      	movs	r2, #0
 802239a:	705a      	strb	r2, [r3, #1]
 802239c:	687b      	ldr	r3, [r7, #4]
 802239e:	2200      	movs	r2, #0
 80223a0:	709a      	strb	r2, [r3, #2]
 80223a2:	687b      	ldr	r3, [r7, #4]
 80223a4:	2200      	movs	r2, #0
 80223a6:	70da      	strb	r2, [r3, #3]
 80223a8:	687b      	ldr	r3, [r7, #4]
 80223aa:	2200      	movs	r2, #0
 80223ac:	711a      	strb	r2, [r3, #4]
 80223ae:	687b      	ldr	r3, [r7, #4]
 80223b0:	2200      	movs	r2, #0
 80223b2:	715a      	strb	r2, [r3, #5]
 80223b4:	687b      	ldr	r3, [r7, #4]
 80223b6:	2200      	movs	r2, #0
 80223b8:	719a      	strb	r2, [r3, #6]
 80223ba:	687b      	ldr	r3, [r7, #4]
 80223bc:	4618      	mov	r0, r3
 80223be:	370c      	adds	r7, #12
 80223c0:	46bd      	mov	sp, r7
 80223c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223c6:	4770      	bx	lr

080223c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80223c8:	b480      	push	{r7}
 80223ca:	b083      	sub	sp, #12
 80223cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80223ce:	2300      	movs	r3, #0
 80223d0:	607b      	str	r3, [r7, #4]
 80223d2:	4b10      	ldr	r3, [pc, #64]	; (8022414 <HAL_MspInit+0x4c>)
 80223d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80223d6:	4a0f      	ldr	r2, [pc, #60]	; (8022414 <HAL_MspInit+0x4c>)
 80223d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80223dc:	6453      	str	r3, [r2, #68]	; 0x44
 80223de:	4b0d      	ldr	r3, [pc, #52]	; (8022414 <HAL_MspInit+0x4c>)
 80223e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80223e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80223e6:	607b      	str	r3, [r7, #4]
 80223e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80223ea:	2300      	movs	r3, #0
 80223ec:	603b      	str	r3, [r7, #0]
 80223ee:	4b09      	ldr	r3, [pc, #36]	; (8022414 <HAL_MspInit+0x4c>)
 80223f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80223f2:	4a08      	ldr	r2, [pc, #32]	; (8022414 <HAL_MspInit+0x4c>)
 80223f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80223f8:	6413      	str	r3, [r2, #64]	; 0x40
 80223fa:	4b06      	ldr	r3, [pc, #24]	; (8022414 <HAL_MspInit+0x4c>)
 80223fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80223fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022402:	603b      	str	r3, [r7, #0]
 8022404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8022406:	bf00      	nop
 8022408:	370c      	adds	r7, #12
 802240a:	46bd      	mov	sp, r7
 802240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022410:	4770      	bx	lr
 8022412:	bf00      	nop
 8022414:	40023800 	.word	0x40023800

08022418 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8022418:	b580      	push	{r7, lr}
 802241a:	b08a      	sub	sp, #40	; 0x28
 802241c:	af00      	add	r7, sp, #0
 802241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022420:	f107 0314 	add.w	r3, r7, #20
 8022424:	2200      	movs	r2, #0
 8022426:	601a      	str	r2, [r3, #0]
 8022428:	605a      	str	r2, [r3, #4]
 802242a:	609a      	str	r2, [r3, #8]
 802242c:	60da      	str	r2, [r3, #12]
 802242e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8022430:	687b      	ldr	r3, [r7, #4]
 8022432:	681b      	ldr	r3, [r3, #0]
 8022434:	4a3c      	ldr	r2, [pc, #240]	; (8022528 <HAL_ADC_MspInit+0x110>)
 8022436:	4293      	cmp	r3, r2
 8022438:	d171      	bne.n	802251e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 802243a:	2300      	movs	r3, #0
 802243c:	613b      	str	r3, [r7, #16]
 802243e:	4b3b      	ldr	r3, [pc, #236]	; (802252c <HAL_ADC_MspInit+0x114>)
 8022440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022442:	4a3a      	ldr	r2, [pc, #232]	; (802252c <HAL_ADC_MspInit+0x114>)
 8022444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022448:	6453      	str	r3, [r2, #68]	; 0x44
 802244a:	4b38      	ldr	r3, [pc, #224]	; (802252c <HAL_ADC_MspInit+0x114>)
 802244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022452:	613b      	str	r3, [r7, #16]
 8022454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8022456:	2300      	movs	r3, #0
 8022458:	60fb      	str	r3, [r7, #12]
 802245a:	4b34      	ldr	r3, [pc, #208]	; (802252c <HAL_ADC_MspInit+0x114>)
 802245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802245e:	4a33      	ldr	r2, [pc, #204]	; (802252c <HAL_ADC_MspInit+0x114>)
 8022460:	f043 0304 	orr.w	r3, r3, #4
 8022464:	6313      	str	r3, [r2, #48]	; 0x30
 8022466:	4b31      	ldr	r3, [pc, #196]	; (802252c <HAL_ADC_MspInit+0x114>)
 8022468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802246a:	f003 0304 	and.w	r3, r3, #4
 802246e:	60fb      	str	r3, [r7, #12]
 8022470:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022472:	2300      	movs	r3, #0
 8022474:	60bb      	str	r3, [r7, #8]
 8022476:	4b2d      	ldr	r3, [pc, #180]	; (802252c <HAL_ADC_MspInit+0x114>)
 8022478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802247a:	4a2c      	ldr	r2, [pc, #176]	; (802252c <HAL_ADC_MspInit+0x114>)
 802247c:	f043 0301 	orr.w	r3, r3, #1
 8022480:	6313      	str	r3, [r2, #48]	; 0x30
 8022482:	4b2a      	ldr	r3, [pc, #168]	; (802252c <HAL_ADC_MspInit+0x114>)
 8022484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022486:	f003 0301 	and.w	r3, r3, #1
 802248a:	60bb      	str	r3, [r7, #8]
 802248c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 802248e:	233f      	movs	r3, #63	; 0x3f
 8022490:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8022492:	2303      	movs	r3, #3
 8022494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022496:	2300      	movs	r3, #0
 8022498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802249a:	f107 0314 	add.w	r3, r7, #20
 802249e:	4619      	mov	r1, r3
 80224a0:	4823      	ldr	r0, [pc, #140]	; (8022530 <HAL_ADC_MspInit+0x118>)
 80224a2:	f001 fe83 	bl	80241ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80224a6:	23ff      	movs	r3, #255	; 0xff
 80224a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80224aa:	2303      	movs	r3, #3
 80224ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80224ae:	2300      	movs	r3, #0
 80224b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80224b2:	f107 0314 	add.w	r3, r7, #20
 80224b6:	4619      	mov	r1, r3
 80224b8:	481e      	ldr	r0, [pc, #120]	; (8022534 <HAL_ADC_MspInit+0x11c>)
 80224ba:	f001 fe77 	bl	80241ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80224be:	4b1e      	ldr	r3, [pc, #120]	; (8022538 <HAL_ADC_MspInit+0x120>)
 80224c0:	4a1e      	ldr	r2, [pc, #120]	; (802253c <HAL_ADC_MspInit+0x124>)
 80224c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80224c4:	4b1c      	ldr	r3, [pc, #112]	; (8022538 <HAL_ADC_MspInit+0x120>)
 80224c6:	2200      	movs	r2, #0
 80224c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80224ca:	4b1b      	ldr	r3, [pc, #108]	; (8022538 <HAL_ADC_MspInit+0x120>)
 80224cc:	2200      	movs	r2, #0
 80224ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80224d0:	4b19      	ldr	r3, [pc, #100]	; (8022538 <HAL_ADC_MspInit+0x120>)
 80224d2:	2200      	movs	r2, #0
 80224d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80224d6:	4b18      	ldr	r3, [pc, #96]	; (8022538 <HAL_ADC_MspInit+0x120>)
 80224d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80224dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80224de:	4b16      	ldr	r3, [pc, #88]	; (8022538 <HAL_ADC_MspInit+0x120>)
 80224e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80224e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80224e6:	4b14      	ldr	r3, [pc, #80]	; (8022538 <HAL_ADC_MspInit+0x120>)
 80224e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80224ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80224ee:	4b12      	ldr	r3, [pc, #72]	; (8022538 <HAL_ADC_MspInit+0x120>)
 80224f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80224f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80224f6:	4b10      	ldr	r3, [pc, #64]	; (8022538 <HAL_ADC_MspInit+0x120>)
 80224f8:	2200      	movs	r2, #0
 80224fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80224fc:	4b0e      	ldr	r3, [pc, #56]	; (8022538 <HAL_ADC_MspInit+0x120>)
 80224fe:	2200      	movs	r2, #0
 8022500:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8022502:	480d      	ldr	r0, [pc, #52]	; (8022538 <HAL_ADC_MspInit+0x120>)
 8022504:	f001 fae4 	bl	8023ad0 <HAL_DMA_Init>
 8022508:	4603      	mov	r3, r0
 802250a:	2b00      	cmp	r3, #0
 802250c:	d001      	beq.n	8022512 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 802250e:	f7ff fea5 	bl	802225c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	4a08      	ldr	r2, [pc, #32]	; (8022538 <HAL_ADC_MspInit+0x120>)
 8022516:	639a      	str	r2, [r3, #56]	; 0x38
 8022518:	4a07      	ldr	r2, [pc, #28]	; (8022538 <HAL_ADC_MspInit+0x120>)
 802251a:	687b      	ldr	r3, [r7, #4]
 802251c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 802251e:	bf00      	nop
 8022520:	3728      	adds	r7, #40	; 0x28
 8022522:	46bd      	mov	sp, r7
 8022524:	bd80      	pop	{r7, pc}
 8022526:	bf00      	nop
 8022528:	40012000 	.word	0x40012000
 802252c:	40023800 	.word	0x40023800
 8022530:	40020800 	.word	0x40020800
 8022534:	40020000 	.word	0x40020000
 8022538:	200111e8 	.word	0x200111e8
 802253c:	40026410 	.word	0x40026410

08022540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8022540:	b580      	push	{r7, lr}
 8022542:	b08a      	sub	sp, #40	; 0x28
 8022544:	af00      	add	r7, sp, #0
 8022546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022548:	f107 0314 	add.w	r3, r7, #20
 802254c:	2200      	movs	r2, #0
 802254e:	601a      	str	r2, [r3, #0]
 8022550:	605a      	str	r2, [r3, #4]
 8022552:	609a      	str	r2, [r3, #8]
 8022554:	60da      	str	r2, [r3, #12]
 8022556:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8022558:	687b      	ldr	r3, [r7, #4]
 802255a:	681b      	ldr	r3, [r3, #0]
 802255c:	4a19      	ldr	r2, [pc, #100]	; (80225c4 <HAL_I2C_MspInit+0x84>)
 802255e:	4293      	cmp	r3, r2
 8022560:	d12c      	bne.n	80225bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8022562:	2300      	movs	r3, #0
 8022564:	613b      	str	r3, [r7, #16]
 8022566:	4b18      	ldr	r3, [pc, #96]	; (80225c8 <HAL_I2C_MspInit+0x88>)
 8022568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802256a:	4a17      	ldr	r2, [pc, #92]	; (80225c8 <HAL_I2C_MspInit+0x88>)
 802256c:	f043 0302 	orr.w	r3, r3, #2
 8022570:	6313      	str	r3, [r2, #48]	; 0x30
 8022572:	4b15      	ldr	r3, [pc, #84]	; (80225c8 <HAL_I2C_MspInit+0x88>)
 8022574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022576:	f003 0302 	and.w	r3, r3, #2
 802257a:	613b      	str	r3, [r7, #16]
 802257c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802257e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8022582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8022584:	2312      	movs	r3, #18
 8022586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8022588:	2301      	movs	r3, #1
 802258a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802258c:	2303      	movs	r3, #3
 802258e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8022590:	2304      	movs	r3, #4
 8022592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022594:	f107 0314 	add.w	r3, r7, #20
 8022598:	4619      	mov	r1, r3
 802259a:	480c      	ldr	r0, [pc, #48]	; (80225cc <HAL_I2C_MspInit+0x8c>)
 802259c:	f001 fe06 	bl	80241ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80225a0:	2300      	movs	r3, #0
 80225a2:	60fb      	str	r3, [r7, #12]
 80225a4:	4b08      	ldr	r3, [pc, #32]	; (80225c8 <HAL_I2C_MspInit+0x88>)
 80225a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80225a8:	4a07      	ldr	r2, [pc, #28]	; (80225c8 <HAL_I2C_MspInit+0x88>)
 80225aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80225ae:	6413      	str	r3, [r2, #64]	; 0x40
 80225b0:	4b05      	ldr	r3, [pc, #20]	; (80225c8 <HAL_I2C_MspInit+0x88>)
 80225b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80225b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80225b8:	60fb      	str	r3, [r7, #12]
 80225ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80225bc:	bf00      	nop
 80225be:	3728      	adds	r7, #40	; 0x28
 80225c0:	46bd      	mov	sp, r7
 80225c2:	bd80      	pop	{r7, pc}
 80225c4:	40005800 	.word	0x40005800
 80225c8:	40023800 	.word	0x40023800
 80225cc:	40020400 	.word	0x40020400

080225d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80225d0:	b580      	push	{r7, lr}
 80225d2:	b08a      	sub	sp, #40	; 0x28
 80225d4:	af00      	add	r7, sp, #0
 80225d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80225d8:	f107 0314 	add.w	r3, r7, #20
 80225dc:	2200      	movs	r2, #0
 80225de:	601a      	str	r2, [r3, #0]
 80225e0:	605a      	str	r2, [r3, #4]
 80225e2:	609a      	str	r2, [r3, #8]
 80225e4:	60da      	str	r2, [r3, #12]
 80225e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80225e8:	687b      	ldr	r3, [r7, #4]
 80225ea:	681b      	ldr	r3, [r3, #0]
 80225ec:	4a19      	ldr	r2, [pc, #100]	; (8022654 <HAL_SPI_MspInit+0x84>)
 80225ee:	4293      	cmp	r3, r2
 80225f0:	d12c      	bne.n	802264c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80225f2:	2300      	movs	r3, #0
 80225f4:	613b      	str	r3, [r7, #16]
 80225f6:	4b18      	ldr	r3, [pc, #96]	; (8022658 <HAL_SPI_MspInit+0x88>)
 80225f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80225fa:	4a17      	ldr	r2, [pc, #92]	; (8022658 <HAL_SPI_MspInit+0x88>)
 80225fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8022600:	6413      	str	r3, [r2, #64]	; 0x40
 8022602:	4b15      	ldr	r3, [pc, #84]	; (8022658 <HAL_SPI_MspInit+0x88>)
 8022604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802260a:	613b      	str	r3, [r7, #16]
 802260c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802260e:	2300      	movs	r3, #0
 8022610:	60fb      	str	r3, [r7, #12]
 8022612:	4b11      	ldr	r3, [pc, #68]	; (8022658 <HAL_SPI_MspInit+0x88>)
 8022614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022616:	4a10      	ldr	r2, [pc, #64]	; (8022658 <HAL_SPI_MspInit+0x88>)
 8022618:	f043 0304 	orr.w	r3, r3, #4
 802261c:	6313      	str	r3, [r2, #48]	; 0x30
 802261e:	4b0e      	ldr	r3, [pc, #56]	; (8022658 <HAL_SPI_MspInit+0x88>)
 8022620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022622:	f003 0304 	and.w	r3, r3, #4
 8022626:	60fb      	str	r3, [r7, #12]
 8022628:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 802262a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 802262e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022630:	2302      	movs	r3, #2
 8022632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022634:	2300      	movs	r3, #0
 8022636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022638:	2303      	movs	r3, #3
 802263a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 802263c:	2306      	movs	r3, #6
 802263e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8022640:	f107 0314 	add.w	r3, r7, #20
 8022644:	4619      	mov	r1, r3
 8022646:	4805      	ldr	r0, [pc, #20]	; (802265c <HAL_SPI_MspInit+0x8c>)
 8022648:	f001 fdb0 	bl	80241ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 802264c:	bf00      	nop
 802264e:	3728      	adds	r7, #40	; 0x28
 8022650:	46bd      	mov	sp, r7
 8022652:	bd80      	pop	{r7, pc}
 8022654:	40003c00 	.word	0x40003c00
 8022658:	40023800 	.word	0x40023800
 802265c:	40020800 	.word	0x40020800

08022660 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8022660:	b480      	push	{r7}
 8022662:	b087      	sub	sp, #28
 8022664:	af00      	add	r7, sp, #0
 8022666:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8022668:	687b      	ldr	r3, [r7, #4]
 802266a:	681b      	ldr	r3, [r3, #0]
 802266c:	4a1f      	ldr	r2, [pc, #124]	; (80226ec <HAL_TIM_PWM_MspInit+0x8c>)
 802266e:	4293      	cmp	r3, r2
 8022670:	d10e      	bne.n	8022690 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8022672:	2300      	movs	r3, #0
 8022674:	617b      	str	r3, [r7, #20]
 8022676:	4b1e      	ldr	r3, [pc, #120]	; (80226f0 <HAL_TIM_PWM_MspInit+0x90>)
 8022678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802267a:	4a1d      	ldr	r2, [pc, #116]	; (80226f0 <HAL_TIM_PWM_MspInit+0x90>)
 802267c:	f043 0301 	orr.w	r3, r3, #1
 8022680:	6453      	str	r3, [r2, #68]	; 0x44
 8022682:	4b1b      	ldr	r3, [pc, #108]	; (80226f0 <HAL_TIM_PWM_MspInit+0x90>)
 8022684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022686:	f003 0301 	and.w	r3, r3, #1
 802268a:	617b      	str	r3, [r7, #20]
 802268c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 802268e:	e026      	b.n	80226de <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8022690:	687b      	ldr	r3, [r7, #4]
 8022692:	681b      	ldr	r3, [r3, #0]
 8022694:	4a17      	ldr	r2, [pc, #92]	; (80226f4 <HAL_TIM_PWM_MspInit+0x94>)
 8022696:	4293      	cmp	r3, r2
 8022698:	d10e      	bne.n	80226b8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802269a:	2300      	movs	r3, #0
 802269c:	613b      	str	r3, [r7, #16]
 802269e:	4b14      	ldr	r3, [pc, #80]	; (80226f0 <HAL_TIM_PWM_MspInit+0x90>)
 80226a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80226a2:	4a13      	ldr	r2, [pc, #76]	; (80226f0 <HAL_TIM_PWM_MspInit+0x90>)
 80226a4:	f043 0302 	orr.w	r3, r3, #2
 80226a8:	6413      	str	r3, [r2, #64]	; 0x40
 80226aa:	4b11      	ldr	r3, [pc, #68]	; (80226f0 <HAL_TIM_PWM_MspInit+0x90>)
 80226ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80226ae:	f003 0302 	and.w	r3, r3, #2
 80226b2:	613b      	str	r3, [r7, #16]
 80226b4:	693b      	ldr	r3, [r7, #16]
}
 80226b6:	e012      	b.n	80226de <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 80226b8:	687b      	ldr	r3, [r7, #4]
 80226ba:	681b      	ldr	r3, [r3, #0]
 80226bc:	4a0e      	ldr	r2, [pc, #56]	; (80226f8 <HAL_TIM_PWM_MspInit+0x98>)
 80226be:	4293      	cmp	r3, r2
 80226c0:	d10d      	bne.n	80226de <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80226c2:	2300      	movs	r3, #0
 80226c4:	60fb      	str	r3, [r7, #12]
 80226c6:	4b0a      	ldr	r3, [pc, #40]	; (80226f0 <HAL_TIM_PWM_MspInit+0x90>)
 80226c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80226ca:	4a09      	ldr	r2, [pc, #36]	; (80226f0 <HAL_TIM_PWM_MspInit+0x90>)
 80226cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80226d0:	6413      	str	r3, [r2, #64]	; 0x40
 80226d2:	4b07      	ldr	r3, [pc, #28]	; (80226f0 <HAL_TIM_PWM_MspInit+0x90>)
 80226d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80226d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80226da:	60fb      	str	r3, [r7, #12]
 80226dc:	68fb      	ldr	r3, [r7, #12]
}
 80226de:	bf00      	nop
 80226e0:	371c      	adds	r7, #28
 80226e2:	46bd      	mov	sp, r7
 80226e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226e8:	4770      	bx	lr
 80226ea:	bf00      	nop
 80226ec:	40010000 	.word	0x40010000
 80226f0:	40023800 	.word	0x40023800
 80226f4:	40000400 	.word	0x40000400
 80226f8:	40001800 	.word	0x40001800

080226fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80226fc:	b580      	push	{r7, lr}
 80226fe:	b088      	sub	sp, #32
 8022700:	af00      	add	r7, sp, #0
 8022702:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8022704:	687b      	ldr	r3, [r7, #4]
 8022706:	681b      	ldr	r3, [r3, #0]
 8022708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802270c:	d116      	bne.n	802273c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802270e:	2300      	movs	r3, #0
 8022710:	61fb      	str	r3, [r7, #28]
 8022712:	4b40      	ldr	r3, [pc, #256]	; (8022814 <HAL_TIM_Base_MspInit+0x118>)
 8022714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022716:	4a3f      	ldr	r2, [pc, #252]	; (8022814 <HAL_TIM_Base_MspInit+0x118>)
 8022718:	f043 0301 	orr.w	r3, r3, #1
 802271c:	6413      	str	r3, [r2, #64]	; 0x40
 802271e:	4b3d      	ldr	r3, [pc, #244]	; (8022814 <HAL_TIM_Base_MspInit+0x118>)
 8022720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022722:	f003 0301 	and.w	r3, r3, #1
 8022726:	61fb      	str	r3, [r7, #28]
 8022728:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 802272a:	2200      	movs	r2, #0
 802272c:	2100      	movs	r1, #0
 802272e:	201c      	movs	r0, #28
 8022730:	f001 f997 	bl	8023a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8022734:	201c      	movs	r0, #28
 8022736:	f001 f9b0 	bl	8023a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 802273a:	e066      	b.n	802280a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 802273c:	687b      	ldr	r3, [r7, #4]
 802273e:	681b      	ldr	r3, [r3, #0]
 8022740:	4a35      	ldr	r2, [pc, #212]	; (8022818 <HAL_TIM_Base_MspInit+0x11c>)
 8022742:	4293      	cmp	r3, r2
 8022744:	d116      	bne.n	8022774 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8022746:	2300      	movs	r3, #0
 8022748:	61bb      	str	r3, [r7, #24]
 802274a:	4b32      	ldr	r3, [pc, #200]	; (8022814 <HAL_TIM_Base_MspInit+0x118>)
 802274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802274e:	4a31      	ldr	r2, [pc, #196]	; (8022814 <HAL_TIM_Base_MspInit+0x118>)
 8022750:	f043 0308 	orr.w	r3, r3, #8
 8022754:	6413      	str	r3, [r2, #64]	; 0x40
 8022756:	4b2f      	ldr	r3, [pc, #188]	; (8022814 <HAL_TIM_Base_MspInit+0x118>)
 8022758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802275a:	f003 0308 	and.w	r3, r3, #8
 802275e:	61bb      	str	r3, [r7, #24]
 8022760:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8022762:	2200      	movs	r2, #0
 8022764:	2100      	movs	r1, #0
 8022766:	2032      	movs	r0, #50	; 0x32
 8022768:	f001 f97b 	bl	8023a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 802276c:	2032      	movs	r0, #50	; 0x32
 802276e:	f001 f994 	bl	8023a9a <HAL_NVIC_EnableIRQ>
}
 8022772:	e04a      	b.n	802280a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8022774:	687b      	ldr	r3, [r7, #4]
 8022776:	681b      	ldr	r3, [r3, #0]
 8022778:	4a28      	ldr	r2, [pc, #160]	; (802281c <HAL_TIM_Base_MspInit+0x120>)
 802277a:	4293      	cmp	r3, r2
 802277c:	d116      	bne.n	80227ac <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 802277e:	2300      	movs	r3, #0
 8022780:	617b      	str	r3, [r7, #20]
 8022782:	4b24      	ldr	r3, [pc, #144]	; (8022814 <HAL_TIM_Base_MspInit+0x118>)
 8022784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022786:	4a23      	ldr	r2, [pc, #140]	; (8022814 <HAL_TIM_Base_MspInit+0x118>)
 8022788:	f043 0310 	orr.w	r3, r3, #16
 802278c:	6413      	str	r3, [r2, #64]	; 0x40
 802278e:	4b21      	ldr	r3, [pc, #132]	; (8022814 <HAL_TIM_Base_MspInit+0x118>)
 8022790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022792:	f003 0310 	and.w	r3, r3, #16
 8022796:	617b      	str	r3, [r7, #20]
 8022798:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 802279a:	2200      	movs	r2, #0
 802279c:	2100      	movs	r1, #0
 802279e:	2036      	movs	r0, #54	; 0x36
 80227a0:	f001 f95f 	bl	8023a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80227a4:	2036      	movs	r0, #54	; 0x36
 80227a6:	f001 f978 	bl	8023a9a <HAL_NVIC_EnableIRQ>
}
 80227aa:	e02e      	b.n	802280a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 80227ac:	687b      	ldr	r3, [r7, #4]
 80227ae:	681b      	ldr	r3, [r3, #0]
 80227b0:	4a1b      	ldr	r2, [pc, #108]	; (8022820 <HAL_TIM_Base_MspInit+0x124>)
 80227b2:	4293      	cmp	r3, r2
 80227b4:	d116      	bne.n	80227e4 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80227b6:	2300      	movs	r3, #0
 80227b8:	613b      	str	r3, [r7, #16]
 80227ba:	4b16      	ldr	r3, [pc, #88]	; (8022814 <HAL_TIM_Base_MspInit+0x118>)
 80227bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80227be:	4a15      	ldr	r2, [pc, #84]	; (8022814 <HAL_TIM_Base_MspInit+0x118>)
 80227c0:	f043 0320 	orr.w	r3, r3, #32
 80227c4:	6413      	str	r3, [r2, #64]	; 0x40
 80227c6:	4b13      	ldr	r3, [pc, #76]	; (8022814 <HAL_TIM_Base_MspInit+0x118>)
 80227c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80227ca:	f003 0320 	and.w	r3, r3, #32
 80227ce:	613b      	str	r3, [r7, #16]
 80227d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80227d2:	2200      	movs	r2, #0
 80227d4:	2100      	movs	r1, #0
 80227d6:	2037      	movs	r0, #55	; 0x37
 80227d8:	f001 f943 	bl	8023a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80227dc:	2037      	movs	r0, #55	; 0x37
 80227de:	f001 f95c 	bl	8023a9a <HAL_NVIC_EnableIRQ>
}
 80227e2:	e012      	b.n	802280a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 80227e4:	687b      	ldr	r3, [r7, #4]
 80227e6:	681b      	ldr	r3, [r3, #0]
 80227e8:	4a0e      	ldr	r2, [pc, #56]	; (8022824 <HAL_TIM_Base_MspInit+0x128>)
 80227ea:	4293      	cmp	r3, r2
 80227ec:	d10d      	bne.n	802280a <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80227ee:	2300      	movs	r3, #0
 80227f0:	60fb      	str	r3, [r7, #12]
 80227f2:	4b08      	ldr	r3, [pc, #32]	; (8022814 <HAL_TIM_Base_MspInit+0x118>)
 80227f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80227f6:	4a07      	ldr	r2, [pc, #28]	; (8022814 <HAL_TIM_Base_MspInit+0x118>)
 80227f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80227fc:	6453      	str	r3, [r2, #68]	; 0x44
 80227fe:	4b05      	ldr	r3, [pc, #20]	; (8022814 <HAL_TIM_Base_MspInit+0x118>)
 8022800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8022806:	60fb      	str	r3, [r7, #12]
 8022808:	68fb      	ldr	r3, [r7, #12]
}
 802280a:	bf00      	nop
 802280c:	3720      	adds	r7, #32
 802280e:	46bd      	mov	sp, r7
 8022810:	bd80      	pop	{r7, pc}
 8022812:	bf00      	nop
 8022814:	40023800 	.word	0x40023800
 8022818:	40000c00 	.word	0x40000c00
 802281c:	40001000 	.word	0x40001000
 8022820:	40001400 	.word	0x40001400
 8022824:	40014800 	.word	0x40014800

08022828 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8022828:	b580      	push	{r7, lr}
 802282a:	b08c      	sub	sp, #48	; 0x30
 802282c:	af00      	add	r7, sp, #0
 802282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022830:	f107 031c 	add.w	r3, r7, #28
 8022834:	2200      	movs	r2, #0
 8022836:	601a      	str	r2, [r3, #0]
 8022838:	605a      	str	r2, [r3, #4]
 802283a:	609a      	str	r2, [r3, #8]
 802283c:	60da      	str	r2, [r3, #12]
 802283e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8022840:	687b      	ldr	r3, [r7, #4]
 8022842:	681b      	ldr	r3, [r3, #0]
 8022844:	4a32      	ldr	r2, [pc, #200]	; (8022910 <HAL_TIM_Encoder_MspInit+0xe8>)
 8022846:	4293      	cmp	r3, r2
 8022848:	d12c      	bne.n	80228a4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 802284a:	2300      	movs	r3, #0
 802284c:	61bb      	str	r3, [r7, #24]
 802284e:	4b31      	ldr	r3, [pc, #196]	; (8022914 <HAL_TIM_Encoder_MspInit+0xec>)
 8022850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022852:	4a30      	ldr	r2, [pc, #192]	; (8022914 <HAL_TIM_Encoder_MspInit+0xec>)
 8022854:	f043 0304 	orr.w	r3, r3, #4
 8022858:	6413      	str	r3, [r2, #64]	; 0x40
 802285a:	4b2e      	ldr	r3, [pc, #184]	; (8022914 <HAL_TIM_Encoder_MspInit+0xec>)
 802285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802285e:	f003 0304 	and.w	r3, r3, #4
 8022862:	61bb      	str	r3, [r7, #24]
 8022864:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8022866:	2300      	movs	r3, #0
 8022868:	617b      	str	r3, [r7, #20]
 802286a:	4b2a      	ldr	r3, [pc, #168]	; (8022914 <HAL_TIM_Encoder_MspInit+0xec>)
 802286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802286e:	4a29      	ldr	r2, [pc, #164]	; (8022914 <HAL_TIM_Encoder_MspInit+0xec>)
 8022870:	f043 0302 	orr.w	r3, r3, #2
 8022874:	6313      	str	r3, [r2, #48]	; 0x30
 8022876:	4b27      	ldr	r3, [pc, #156]	; (8022914 <HAL_TIM_Encoder_MspInit+0xec>)
 8022878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802287a:	f003 0302 	and.w	r3, r3, #2
 802287e:	617b      	str	r3, [r7, #20]
 8022880:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8022882:	23c0      	movs	r3, #192	; 0xc0
 8022884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022886:	2302      	movs	r3, #2
 8022888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802288a:	2300      	movs	r3, #0
 802288c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802288e:	2300      	movs	r3, #0
 8022890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8022892:	2302      	movs	r3, #2
 8022894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022896:	f107 031c 	add.w	r3, r7, #28
 802289a:	4619      	mov	r1, r3
 802289c:	481e      	ldr	r0, [pc, #120]	; (8022918 <HAL_TIM_Encoder_MspInit+0xf0>)
 802289e:	f001 fc85 	bl	80241ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80228a2:	e030      	b.n	8022906 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 80228a4:	687b      	ldr	r3, [r7, #4]
 80228a6:	681b      	ldr	r3, [r3, #0]
 80228a8:	4a1c      	ldr	r2, [pc, #112]	; (802291c <HAL_TIM_Encoder_MspInit+0xf4>)
 80228aa:	4293      	cmp	r3, r2
 80228ac:	d12b      	bne.n	8022906 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80228ae:	2300      	movs	r3, #0
 80228b0:	613b      	str	r3, [r7, #16]
 80228b2:	4b18      	ldr	r3, [pc, #96]	; (8022914 <HAL_TIM_Encoder_MspInit+0xec>)
 80228b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80228b6:	4a17      	ldr	r2, [pc, #92]	; (8022914 <HAL_TIM_Encoder_MspInit+0xec>)
 80228b8:	f043 0302 	orr.w	r3, r3, #2
 80228bc:	6453      	str	r3, [r2, #68]	; 0x44
 80228be:	4b15      	ldr	r3, [pc, #84]	; (8022914 <HAL_TIM_Encoder_MspInit+0xec>)
 80228c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80228c2:	f003 0302 	and.w	r3, r3, #2
 80228c6:	613b      	str	r3, [r7, #16]
 80228c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80228ca:	2300      	movs	r3, #0
 80228cc:	60fb      	str	r3, [r7, #12]
 80228ce:	4b11      	ldr	r3, [pc, #68]	; (8022914 <HAL_TIM_Encoder_MspInit+0xec>)
 80228d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80228d2:	4a10      	ldr	r2, [pc, #64]	; (8022914 <HAL_TIM_Encoder_MspInit+0xec>)
 80228d4:	f043 0304 	orr.w	r3, r3, #4
 80228d8:	6313      	str	r3, [r2, #48]	; 0x30
 80228da:	4b0e      	ldr	r3, [pc, #56]	; (8022914 <HAL_TIM_Encoder_MspInit+0xec>)
 80228dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80228de:	f003 0304 	and.w	r3, r3, #4
 80228e2:	60fb      	str	r3, [r7, #12]
 80228e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80228e6:	23c0      	movs	r3, #192	; 0xc0
 80228e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80228ea:	2302      	movs	r3, #2
 80228ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80228ee:	2300      	movs	r3, #0
 80228f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80228f2:	2300      	movs	r3, #0
 80228f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80228f6:	2303      	movs	r3, #3
 80228f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80228fa:	f107 031c 	add.w	r3, r7, #28
 80228fe:	4619      	mov	r1, r3
 8022900:	4807      	ldr	r0, [pc, #28]	; (8022920 <HAL_TIM_Encoder_MspInit+0xf8>)
 8022902:	f001 fc53 	bl	80241ac <HAL_GPIO_Init>
}
 8022906:	bf00      	nop
 8022908:	3730      	adds	r7, #48	; 0x30
 802290a:	46bd      	mov	sp, r7
 802290c:	bd80      	pop	{r7, pc}
 802290e:	bf00      	nop
 8022910:	40000800 	.word	0x40000800
 8022914:	40023800 	.word	0x40023800
 8022918:	40020400 	.word	0x40020400
 802291c:	40010400 	.word	0x40010400
 8022920:	40020800 	.word	0x40020800

08022924 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8022924:	b580      	push	{r7, lr}
 8022926:	b08c      	sub	sp, #48	; 0x30
 8022928:	af00      	add	r7, sp, #0
 802292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802292c:	f107 031c 	add.w	r3, r7, #28
 8022930:	2200      	movs	r2, #0
 8022932:	601a      	str	r2, [r3, #0]
 8022934:	605a      	str	r2, [r3, #4]
 8022936:	609a      	str	r2, [r3, #8]
 8022938:	60da      	str	r2, [r3, #12]
 802293a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 802293c:	687b      	ldr	r3, [r7, #4]
 802293e:	681b      	ldr	r3, [r3, #0]
 8022940:	4a59      	ldr	r2, [pc, #356]	; (8022aa8 <HAL_TIM_MspPostInit+0x184>)
 8022942:	4293      	cmp	r3, r2
 8022944:	d11f      	bne.n	8022986 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022946:	2300      	movs	r3, #0
 8022948:	61bb      	str	r3, [r7, #24]
 802294a:	4b58      	ldr	r3, [pc, #352]	; (8022aac <HAL_TIM_MspPostInit+0x188>)
 802294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802294e:	4a57      	ldr	r2, [pc, #348]	; (8022aac <HAL_TIM_MspPostInit+0x188>)
 8022950:	f043 0301 	orr.w	r3, r3, #1
 8022954:	6313      	str	r3, [r2, #48]	; 0x30
 8022956:	4b55      	ldr	r3, [pc, #340]	; (8022aac <HAL_TIM_MspPostInit+0x188>)
 8022958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802295a:	f003 0301 	and.w	r3, r3, #1
 802295e:	61bb      	str	r3, [r7, #24]
 8022960:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8022962:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8022966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022968:	2302      	movs	r3, #2
 802296a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802296c:	2300      	movs	r3, #0
 802296e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022970:	2300      	movs	r3, #0
 8022972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8022974:	2301      	movs	r3, #1
 8022976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022978:	f107 031c 	add.w	r3, r7, #28
 802297c:	4619      	mov	r1, r3
 802297e:	484c      	ldr	r0, [pc, #304]	; (8022ab0 <HAL_TIM_MspPostInit+0x18c>)
 8022980:	f001 fc14 	bl	80241ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8022984:	e08b      	b.n	8022a9e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	681b      	ldr	r3, [r3, #0]
 802298a:	4a4a      	ldr	r2, [pc, #296]	; (8022ab4 <HAL_TIM_MspPostInit+0x190>)
 802298c:	4293      	cmp	r3, r2
 802298e:	d13d      	bne.n	8022a0c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8022990:	2300      	movs	r3, #0
 8022992:	617b      	str	r3, [r7, #20]
 8022994:	4b45      	ldr	r3, [pc, #276]	; (8022aac <HAL_TIM_MspPostInit+0x188>)
 8022996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022998:	4a44      	ldr	r2, [pc, #272]	; (8022aac <HAL_TIM_MspPostInit+0x188>)
 802299a:	f043 0304 	orr.w	r3, r3, #4
 802299e:	6313      	str	r3, [r2, #48]	; 0x30
 80229a0:	4b42      	ldr	r3, [pc, #264]	; (8022aac <HAL_TIM_MspPostInit+0x188>)
 80229a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229a4:	f003 0304 	and.w	r3, r3, #4
 80229a8:	617b      	str	r3, [r7, #20]
 80229aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80229ac:	2300      	movs	r3, #0
 80229ae:	613b      	str	r3, [r7, #16]
 80229b0:	4b3e      	ldr	r3, [pc, #248]	; (8022aac <HAL_TIM_MspPostInit+0x188>)
 80229b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229b4:	4a3d      	ldr	r2, [pc, #244]	; (8022aac <HAL_TIM_MspPostInit+0x188>)
 80229b6:	f043 0302 	orr.w	r3, r3, #2
 80229ba:	6313      	str	r3, [r2, #48]	; 0x30
 80229bc:	4b3b      	ldr	r3, [pc, #236]	; (8022aac <HAL_TIM_MspPostInit+0x188>)
 80229be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229c0:	f003 0302 	and.w	r3, r3, #2
 80229c4:	613b      	str	r3, [r7, #16]
 80229c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80229c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80229cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80229ce:	2302      	movs	r3, #2
 80229d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80229d2:	2300      	movs	r3, #0
 80229d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80229d6:	2300      	movs	r3, #0
 80229d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80229da:	2302      	movs	r3, #2
 80229dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80229de:	f107 031c 	add.w	r3, r7, #28
 80229e2:	4619      	mov	r1, r3
 80229e4:	4834      	ldr	r0, [pc, #208]	; (8022ab8 <HAL_TIM_MspPostInit+0x194>)
 80229e6:	f001 fbe1 	bl	80241ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80229ea:	2330      	movs	r3, #48	; 0x30
 80229ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80229ee:	2302      	movs	r3, #2
 80229f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80229f2:	2300      	movs	r3, #0
 80229f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80229f6:	2300      	movs	r3, #0
 80229f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80229fa:	2302      	movs	r3, #2
 80229fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80229fe:	f107 031c 	add.w	r3, r7, #28
 8022a02:	4619      	mov	r1, r3
 8022a04:	482d      	ldr	r0, [pc, #180]	; (8022abc <HAL_TIM_MspPostInit+0x198>)
 8022a06:	f001 fbd1 	bl	80241ac <HAL_GPIO_Init>
}
 8022a0a:	e048      	b.n	8022a9e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 8022a0c:	687b      	ldr	r3, [r7, #4]
 8022a0e:	681b      	ldr	r3, [r3, #0]
 8022a10:	4a2b      	ldr	r2, [pc, #172]	; (8022ac0 <HAL_TIM_MspPostInit+0x19c>)
 8022a12:	4293      	cmp	r3, r2
 8022a14:	d11f      	bne.n	8022a56 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8022a16:	2300      	movs	r3, #0
 8022a18:	60fb      	str	r3, [r7, #12]
 8022a1a:	4b24      	ldr	r3, [pc, #144]	; (8022aac <HAL_TIM_MspPostInit+0x188>)
 8022a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a1e:	4a23      	ldr	r2, [pc, #140]	; (8022aac <HAL_TIM_MspPostInit+0x188>)
 8022a20:	f043 0302 	orr.w	r3, r3, #2
 8022a24:	6313      	str	r3, [r2, #48]	; 0x30
 8022a26:	4b21      	ldr	r3, [pc, #132]	; (8022aac <HAL_TIM_MspPostInit+0x188>)
 8022a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a2a:	f003 0302 	and.w	r3, r3, #2
 8022a2e:	60fb      	str	r3, [r7, #12]
 8022a30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8022a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022a38:	2302      	movs	r3, #2
 8022a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022a3c:	2300      	movs	r3, #0
 8022a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022a40:	2300      	movs	r3, #0
 8022a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8022a44:	2303      	movs	r3, #3
 8022a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022a48:	f107 031c 	add.w	r3, r7, #28
 8022a4c:	4619      	mov	r1, r3
 8022a4e:	481b      	ldr	r0, [pc, #108]	; (8022abc <HAL_TIM_MspPostInit+0x198>)
 8022a50:	f001 fbac 	bl	80241ac <HAL_GPIO_Init>
}
 8022a54:	e023      	b.n	8022a9e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8022a56:	687b      	ldr	r3, [r7, #4]
 8022a58:	681b      	ldr	r3, [r3, #0]
 8022a5a:	4a1a      	ldr	r2, [pc, #104]	; (8022ac4 <HAL_TIM_MspPostInit+0x1a0>)
 8022a5c:	4293      	cmp	r3, r2
 8022a5e:	d11e      	bne.n	8022a9e <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8022a60:	2300      	movs	r3, #0
 8022a62:	60bb      	str	r3, [r7, #8]
 8022a64:	4b11      	ldr	r3, [pc, #68]	; (8022aac <HAL_TIM_MspPostInit+0x188>)
 8022a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a68:	4a10      	ldr	r2, [pc, #64]	; (8022aac <HAL_TIM_MspPostInit+0x188>)
 8022a6a:	f043 0302 	orr.w	r3, r3, #2
 8022a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8022a70:	4b0e      	ldr	r3, [pc, #56]	; (8022aac <HAL_TIM_MspPostInit+0x188>)
 8022a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a74:	f003 0302 	and.w	r3, r3, #2
 8022a78:	60bb      	str	r3, [r7, #8]
 8022a7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8022a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8022a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022a82:	2302      	movs	r3, #2
 8022a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022a86:	2300      	movs	r3, #0
 8022a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022a8a:	2300      	movs	r3, #0
 8022a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8022a8e:	2309      	movs	r3, #9
 8022a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022a92:	f107 031c 	add.w	r3, r7, #28
 8022a96:	4619      	mov	r1, r3
 8022a98:	4808      	ldr	r0, [pc, #32]	; (8022abc <HAL_TIM_MspPostInit+0x198>)
 8022a9a:	f001 fb87 	bl	80241ac <HAL_GPIO_Init>
}
 8022a9e:	bf00      	nop
 8022aa0:	3730      	adds	r7, #48	; 0x30
 8022aa2:	46bd      	mov	sp, r7
 8022aa4:	bd80      	pop	{r7, pc}
 8022aa6:	bf00      	nop
 8022aa8:	40010000 	.word	0x40010000
 8022aac:	40023800 	.word	0x40023800
 8022ab0:	40020000 	.word	0x40020000
 8022ab4:	40000400 	.word	0x40000400
 8022ab8:	40020800 	.word	0x40020800
 8022abc:	40020400 	.word	0x40020400
 8022ac0:	40014800 	.word	0x40014800
 8022ac4:	40001800 	.word	0x40001800

08022ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8022ac8:	b480      	push	{r7}
 8022aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8022acc:	e7fe      	b.n	8022acc <NMI_Handler+0x4>

08022ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8022ace:	b480      	push	{r7}
 8022ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8022ad2:	e7fe      	b.n	8022ad2 <HardFault_Handler+0x4>

08022ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8022ad4:	b480      	push	{r7}
 8022ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8022ad8:	e7fe      	b.n	8022ad8 <MemManage_Handler+0x4>

08022ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8022ada:	b480      	push	{r7}
 8022adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8022ade:	e7fe      	b.n	8022ade <BusFault_Handler+0x4>

08022ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8022ae0:	b480      	push	{r7}
 8022ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8022ae4:	e7fe      	b.n	8022ae4 <UsageFault_Handler+0x4>

08022ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8022ae6:	b480      	push	{r7}
 8022ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8022aea:	bf00      	nop
 8022aec:	46bd      	mov	sp, r7
 8022aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022af2:	4770      	bx	lr

08022af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8022af4:	b480      	push	{r7}
 8022af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8022af8:	bf00      	nop
 8022afa:	46bd      	mov	sp, r7
 8022afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b00:	4770      	bx	lr

08022b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8022b02:	b480      	push	{r7}
 8022b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8022b06:	bf00      	nop
 8022b08:	46bd      	mov	sp, r7
 8022b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b0e:	4770      	bx	lr

08022b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8022b10:	b580      	push	{r7, lr}
 8022b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8022b14:	f000 fa94 	bl	8023040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8022b18:	bf00      	nop
 8022b1a:	bd80      	pop	{r7, pc}

08022b1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8022b1c:	b580      	push	{r7, lr}
 8022b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8022b20:	4802      	ldr	r0, [pc, #8]	; (8022b2c <TIM2_IRQHandler+0x10>)
 8022b22:	f003 f944 	bl	8025dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8022b26:	bf00      	nop
 8022b28:	bd80      	pop	{r7, pc}
 8022b2a:	bf00      	nop
 8022b2c:	200112c8 	.word	0x200112c8

08022b30 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8022b30:	b580      	push	{r7, lr}
 8022b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8022b34:	4802      	ldr	r0, [pc, #8]	; (8022b40 <TIM5_IRQHandler+0x10>)
 8022b36:	f003 f93a 	bl	8025dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8022b3a:	bf00      	nop
 8022b3c:	bd80      	pop	{r7, pc}
 8022b3e:	bf00      	nop
 8022b40:	20011088 	.word	0x20011088

08022b44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8022b44:	b580      	push	{r7, lr}
 8022b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8022b48:	4802      	ldr	r0, [pc, #8]	; (8022b54 <TIM6_DAC_IRQHandler+0x10>)
 8022b4a:	f003 f930 	bl	8025dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8022b4e:	bf00      	nop
 8022b50:	bd80      	pop	{r7, pc}
 8022b52:	bf00      	nop
 8022b54:	20011248 	.word	0x20011248

08022b58 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8022b58:	b580      	push	{r7, lr}
 8022b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8022b5c:	4802      	ldr	r0, [pc, #8]	; (8022b68 <TIM7_IRQHandler+0x10>)
 8022b5e:	f003 f926 	bl	8025dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8022b62:	bf00      	nop
 8022b64:	bd80      	pop	{r7, pc}
 8022b66:	bf00      	nop
 8022b68:	20011348 	.word	0x20011348

08022b6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8022b6c:	b580      	push	{r7, lr}
 8022b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8022b70:	4802      	ldr	r0, [pc, #8]	; (8022b7c <DMA2_Stream0_IRQHandler+0x10>)
 8022b72:	f001 f8b3 	bl	8023cdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8022b76:	bf00      	nop
 8022b78:	bd80      	pop	{r7, pc}
 8022b7a:	bf00      	nop
 8022b7c:	200111e8 	.word	0x200111e8

08022b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8022b80:	b580      	push	{r7, lr}
 8022b82:	b086      	sub	sp, #24
 8022b84:	af00      	add	r7, sp, #0
 8022b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8022b88:	4a14      	ldr	r2, [pc, #80]	; (8022bdc <_sbrk+0x5c>)
 8022b8a:	4b15      	ldr	r3, [pc, #84]	; (8022be0 <_sbrk+0x60>)
 8022b8c:	1ad3      	subs	r3, r2, r3
 8022b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8022b90:	697b      	ldr	r3, [r7, #20]
 8022b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8022b94:	4b13      	ldr	r3, [pc, #76]	; (8022be4 <_sbrk+0x64>)
 8022b96:	681b      	ldr	r3, [r3, #0]
 8022b98:	2b00      	cmp	r3, #0
 8022b9a:	d102      	bne.n	8022ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8022b9c:	4b11      	ldr	r3, [pc, #68]	; (8022be4 <_sbrk+0x64>)
 8022b9e:	4a12      	ldr	r2, [pc, #72]	; (8022be8 <_sbrk+0x68>)
 8022ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8022ba2:	4b10      	ldr	r3, [pc, #64]	; (8022be4 <_sbrk+0x64>)
 8022ba4:	681a      	ldr	r2, [r3, #0]
 8022ba6:	687b      	ldr	r3, [r7, #4]
 8022ba8:	4413      	add	r3, r2
 8022baa:	693a      	ldr	r2, [r7, #16]
 8022bac:	429a      	cmp	r2, r3
 8022bae:	d207      	bcs.n	8022bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8022bb0:	f003 ff9e 	bl	8026af0 <__errno>
 8022bb4:	4602      	mov	r2, r0
 8022bb6:	230c      	movs	r3, #12
 8022bb8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8022bba:	f04f 33ff 	mov.w	r3, #4294967295
 8022bbe:	e009      	b.n	8022bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8022bc0:	4b08      	ldr	r3, [pc, #32]	; (8022be4 <_sbrk+0x64>)
 8022bc2:	681b      	ldr	r3, [r3, #0]
 8022bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8022bc6:	4b07      	ldr	r3, [pc, #28]	; (8022be4 <_sbrk+0x64>)
 8022bc8:	681a      	ldr	r2, [r3, #0]
 8022bca:	687b      	ldr	r3, [r7, #4]
 8022bcc:	4413      	add	r3, r2
 8022bce:	4a05      	ldr	r2, [pc, #20]	; (8022be4 <_sbrk+0x64>)
 8022bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8022bd2:	68fb      	ldr	r3, [r7, #12]
}
 8022bd4:	4618      	mov	r0, r3
 8022bd6:	3718      	adds	r7, #24
 8022bd8:	46bd      	mov	sp, r7
 8022bda:	bd80      	pop	{r7, pc}
 8022bdc:	20020000 	.word	0x20020000
 8022be0:	00000400 	.word	0x00000400
 8022be4:	2000021c 	.word	0x2000021c
 8022be8:	20011390 	.word	0x20011390

08022bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8022bec:	b480      	push	{r7}
 8022bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8022bf0:	4b08      	ldr	r3, [pc, #32]	; (8022c14 <SystemInit+0x28>)
 8022bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022bf6:	4a07      	ldr	r2, [pc, #28]	; (8022c14 <SystemInit+0x28>)
 8022bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8022bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8022c00:	4b04      	ldr	r3, [pc, #16]	; (8022c14 <SystemInit+0x28>)
 8022c02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8022c06:	609a      	str	r2, [r3, #8]
#endif
}
 8022c08:	bf00      	nop
 8022c0a:	46bd      	mov	sp, r7
 8022c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c10:	4770      	bx	lr
 8022c12:	bf00      	nop
 8022c14:	e000ed00 	.word	0xe000ed00

08022c18 <_ZN4TestC1EP7EncoderP8Iim42652P3LedP10LineSensorP9LineTraceP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>:
#include "declare_extern.h"
#include <stdio.h>
#include <math.h>

#ifdef TEST_MODE
Test::Test(Encoder *encoder,
 8022c18:	b480      	push	{r7}
 8022c1a:	b085      	sub	sp, #20
 8022c1c:	af00      	add	r7, sp, #0
 8022c1e:	60f8      	str	r0, [r7, #12]
 8022c20:	60b9      	str	r1, [r7, #8]
 8022c22:	607a      	str	r2, [r7, #4]
 8022c24:	603b      	str	r3, [r7, #0]
           Motor *motor,
           RotarySwitch *rotary_switch,
           SideSensor *side_sensor,
           VelocityControl *velocity_control)
{
    encoder_ = encoder;
 8022c26:	68fb      	ldr	r3, [r7, #12]
 8022c28:	68ba      	ldr	r2, [r7, #8]
 8022c2a:	601a      	str	r2, [r3, #0]
    iim_42652_ = iim_42652;
 8022c2c:	68fb      	ldr	r3, [r7, #12]
 8022c2e:	687a      	ldr	r2, [r7, #4]
 8022c30:	605a      	str	r2, [r3, #4]
    led_ = led;
 8022c32:	68fb      	ldr	r3, [r7, #12]
 8022c34:	683a      	ldr	r2, [r7, #0]
 8022c36:	609a      	str	r2, [r3, #8]
    line_sensor_ = line_sensor;
 8022c38:	68fb      	ldr	r3, [r7, #12]
 8022c3a:	69ba      	ldr	r2, [r7, #24]
 8022c3c:	60da      	str	r2, [r3, #12]
    line_trace_ = line_trace;
 8022c3e:	68fb      	ldr	r3, [r7, #12]
 8022c40:	69fa      	ldr	r2, [r7, #28]
 8022c42:	611a      	str	r2, [r3, #16]
    motor_ = motor;
 8022c44:	68fb      	ldr	r3, [r7, #12]
 8022c46:	6a3a      	ldr	r2, [r7, #32]
 8022c48:	615a      	str	r2, [r3, #20]
    rotary_switch_ = rotary_switch;
 8022c4a:	68fb      	ldr	r3, [r7, #12]
 8022c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022c4e:	619a      	str	r2, [r3, #24]
    side_sensor_ = side_sensor;
 8022c50:	68fb      	ldr	r3, [r7, #12]
 8022c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022c54:	61da      	str	r2, [r3, #28]
    velocity_control_ = velocity_control;
 8022c56:	68fb      	ldr	r3, [r7, #12]
 8022c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022c5a:	621a      	str	r2, [r3, #32]
}
 8022c5c:	68fb      	ldr	r3, [r7, #12]
 8022c5e:	4618      	mov	r0, r3
 8022c60:	3714      	adds	r7, #20
 8022c62:	46bd      	mov	sp, r7
 8022c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c68:	4770      	bx	lr
	...

08022c6c <_ZN4Test4InitEv>:

void Test::Init()
{
 8022c6c:	b580      	push	{r7, lr}
 8022c6e:	b084      	sub	sp, #16
 8022c70:	af00      	add	r7, sp, #0
 8022c72:	6078      	str	r0, [r7, #4]
    encoder_->Init();
 8022c74:	687b      	ldr	r3, [r7, #4]
 8022c76:	681b      	ldr	r3, [r3, #0]
 8022c78:	4618      	mov	r0, r3
 8022c7a:	f7fe f865 	bl	8020d48 <_ZN7Encoder4InitEv>
    line_sensor_->Init();
 8022c7e:	687b      	ldr	r3, [r7, #4]
 8022c80:	68db      	ldr	r3, [r3, #12]
 8022c82:	4618      	mov	r0, r3
 8022c84:	f7fe fbb8 	bl	80213f8 <_ZN10LineSensor4InitEv>
    motor_->Init();
 8022c88:	687b      	ldr	r3, [r7, #4]
 8022c8a:	695b      	ldr	r3, [r3, #20]
 8022c8c:	4618      	mov	r0, r3
 8022c8e:	f7ff fae9 	bl	8022264 <_ZN5Motor4InitEv>
    uint8_t imu = iim_42652_->Init();
 8022c92:	687b      	ldr	r3, [r7, #4]
 8022c94:	685b      	ldr	r3, [r3, #4]
 8022c96:	4618      	mov	r0, r3
 8022c98:	f7fe f89a 	bl	8020dd0 <_ZN8Iim426524InitEv>
 8022c9c:	4603      	mov	r3, r0
 8022c9e:	73fb      	strb	r3, [r7, #15]

    if(rotary_switch_->State() != 0x00 && imu == 0x09)
 8022ca0:	687b      	ldr	r3, [r7, #4]
 8022ca2:	699b      	ldr	r3, [r3, #24]
 8022ca4:	4618      	mov	r0, r3
 8022ca6:	f7ff fb1f 	bl	80222e8 <_ZN12RotarySwitch5StateEv>
 8022caa:	4603      	mov	r3, r0
 8022cac:	2b00      	cmp	r3, #0
 8022cae:	d004      	beq.n	8022cba <_ZN4Test4InitEv+0x4e>
 8022cb0:	7bfb      	ldrb	r3, [r7, #15]
 8022cb2:	2b09      	cmp	r3, #9
 8022cb4:	d101      	bne.n	8022cba <_ZN4Test4InitEv+0x4e>
 8022cb6:	2301      	movs	r3, #1
 8022cb8:	e000      	b.n	8022cbc <_ZN4Test4InitEv+0x50>
 8022cba:	2300      	movs	r3, #0
 8022cbc:	2b00      	cmp	r3, #0
 8022cbe:	d013      	beq.n	8022ce8 <_ZN4Test4InitEv+0x7c>
    {
        led_->Blink(3, 'Y', 'M');
 8022cc0:	687b      	ldr	r3, [r7, #4]
 8022cc2:	6898      	ldr	r0, [r3, #8]
 8022cc4:	234d      	movs	r3, #77	; 0x4d
 8022cc6:	2259      	movs	r2, #89	; 0x59
 8022cc8:	2103      	movs	r1, #3
 8022cca:	f7fe fb27 	bl	802131c <_ZN3Led5BlinkEhcc>
        led_->ColorOrder('X');
 8022cce:	687b      	ldr	r3, [r7, #4]
 8022cd0:	689b      	ldr	r3, [r3, #8]
 8022cd2:	2158      	movs	r1, #88	; 0x58
 8022cd4:	4618      	mov	r0, r3
 8022cd6:	f7fe fa45 	bl	8021164 <_ZN3Led10ColorOrderEc>

        HAL_TIM_Base_Start_IT(&htim7);
 8022cda:	4809      	ldr	r0, [pc, #36]	; (8022d00 <_ZN4Test4InitEv+0x94>)
 8022cdc:	f002 ff11 	bl	8025b02 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 8022ce0:	4808      	ldr	r0, [pc, #32]	; (8022d04 <_ZN4Test4InitEv+0x98>)
 8022ce2:	f002 ff0e 	bl	8025b02 <HAL_TIM_Base_Start_IT>
    }
    else led_->Blink(3, 'B', 'X');
}
 8022ce6:	e006      	b.n	8022cf6 <_ZN4Test4InitEv+0x8a>
    else led_->Blink(3, 'B', 'X');
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	6898      	ldr	r0, [r3, #8]
 8022cec:	2358      	movs	r3, #88	; 0x58
 8022cee:	2242      	movs	r2, #66	; 0x42
 8022cf0:	2103      	movs	r1, #3
 8022cf2:	f7fe fb13 	bl	802131c <_ZN3Led5BlinkEhcc>
}
 8022cf6:	bf00      	nop
 8022cf8:	3710      	adds	r7, #16
 8022cfa:	46bd      	mov	sp, r7
 8022cfc:	bd80      	pop	{r7, pc}
 8022cfe:	bf00      	nop
 8022d00:	20011348 	.word	0x20011348
 8022d04:	20011248 	.word	0x20011248

08022d08 <_ZN4Test6Timer7Ev>:
{
    //printf("Hello,World!!\r\n");
}

void Test::Timer7()
{
 8022d08:	b580      	push	{r7, lr}
 8022d0a:	b082      	sub	sp, #8
 8022d0c:	af00      	add	r7, sp, #0
 8022d0e:	6078      	str	r0, [r7, #4]
    line_sensor_->StoreConsecutiveBuff();
 8022d10:	687b      	ldr	r3, [r7, #4]
 8022d12:	68db      	ldr	r3, [r3, #12]
 8022d14:	4618      	mov	r0, r3
 8022d16:	f7fe fba9 	bl	802146c <_ZN10LineSensor20StoreConsecutiveBuffEv>
}
 8022d1a:	bf00      	nop
 8022d1c:	3708      	adds	r7, #8
 8022d1e:	46bd      	mov	sp, r7
 8022d20:	bd80      	pop	{r7, pc}

08022d22 <_ZN4Test6Timer6Ev>:

void Test::Timer6()
{
 8022d22:	b580      	push	{r7, lr}
 8022d24:	b082      	sub	sp, #8
 8022d26:	af00      	add	r7, sp, #0
 8022d28:	6078      	str	r0, [r7, #4]
    TestImu();
 8022d2a:	6878      	ldr	r0, [r7, #4]
 8022d2c:	f000 f804 	bl	8022d38 <_ZN4Test7TestImuEv>
    //TestLineSensor();
    //TestSideSensor();
    //TestEncoder();
    //MonitorLog();
    //TestMotor();
}
 8022d30:	bf00      	nop
 8022d32:	3708      	adds	r7, #8
 8022d34:	46bd      	mov	sp, r7
 8022d36:	bd80      	pop	{r7, pc}

08022d38 <_ZN4Test7TestImuEv>:

void Test::TestImu()
{
 8022d38:	b590      	push	{r4, r7, lr}
 8022d3a:	b087      	sub	sp, #28
 8022d3c:	af00      	add	r7, sp, #0
 8022d3e:	6078      	str	r0, [r7, #4]
    double degree = iim_42652_->GetDegreeStackZ();
 8022d40:	687b      	ldr	r3, [r7, #4]
 8022d42:	685b      	ldr	r3, [r3, #4]
 8022d44:	4618      	mov	r0, r3
 8022d46:	f7fe f9db 	bl	8021100 <_ZN8Iim4265215GetDegreeStackZEv>
 8022d4a:	ed87 0b04 	vstr	d0, [r7, #16]
    float radian = static_cast<float>(degree * M_PI / 180.0);
 8022d4e:	a31e      	add	r3, pc, #120	; (adr r3, 8022dc8 <_ZN4Test7TestImuEv+0x90>)
 8022d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8022d58:	f7fd fb36 	bl	80203c8 <__aeabi_dmul>
 8022d5c:	4603      	mov	r3, r0
 8022d5e:	460c      	mov	r4, r1
 8022d60:	4618      	mov	r0, r3
 8022d62:	4621      	mov	r1, r4
 8022d64:	f04f 0200 	mov.w	r2, #0
 8022d68:	4b13      	ldr	r3, [pc, #76]	; (8022db8 <_ZN4Test7TestImuEv+0x80>)
 8022d6a:	f7fd fc57 	bl	802061c <__aeabi_ddiv>
 8022d6e:	4603      	mov	r3, r0
 8022d70:	460c      	mov	r4, r1
 8022d72:	4618      	mov	r0, r3
 8022d74:	4621      	mov	r1, r4
 8022d76:	f7fd fdff 	bl	8020978 <__aeabi_d2f>
 8022d7a:	4603      	mov	r3, r0
 8022d7c:	60fb      	str	r3, [r7, #12]
    iim_42652_->ResetDegreeStackZ();
 8022d7e:	687b      	ldr	r3, [r7, #4]
 8022d80:	685b      	ldr	r3, [r3, #4]
 8022d82:	4618      	mov	r0, r3
 8022d84:	f7fe f9ac 	bl	80210e0 <_ZN8Iim4265217ResetDegreeStackZEv>
    //logging_radian_buff_ = radian;
    g_radian = radian;
 8022d88:	4a0c      	ldr	r2, [pc, #48]	; (8022dbc <_ZN4Test7TestImuEv+0x84>)
 8022d8a:	68fb      	ldr	r3, [r7, #12]
 8022d8c:	6013      	str	r3, [r2, #0]
    g_int_radian = iim_42652_->GyroZRight();
 8022d8e:	687b      	ldr	r3, [r7, #4]
 8022d90:	685b      	ldr	r3, [r3, #4]
 8022d92:	4618      	mov	r0, r3
 8022d94:	f7fe f9c5 	bl	8021122 <_ZN8Iim4265210GyroZRightEv>
 8022d98:	4603      	mov	r3, r0
 8022d9a:	461a      	mov	r2, r3
 8022d9c:	4b08      	ldr	r3, [pc, #32]	; (8022dc0 <_ZN4Test7TestImuEv+0x88>)
 8022d9e:	801a      	strh	r2, [r3, #0]
    monitor_count++;
 8022da0:	4b08      	ldr	r3, [pc, #32]	; (8022dc4 <_ZN4Test7TestImuEv+0x8c>)
 8022da2:	881b      	ldrh	r3, [r3, #0]
 8022da4:	3301      	adds	r3, #1
 8022da6:	b29a      	uxth	r2, r3
 8022da8:	4b06      	ldr	r3, [pc, #24]	; (8022dc4 <_ZN4Test7TestImuEv+0x8c>)
 8022daa:	801a      	strh	r2, [r3, #0]
}
 8022dac:	bf00      	nop
 8022dae:	371c      	adds	r7, #28
 8022db0:	46bd      	mov	sp, r7
 8022db2:	bd90      	pop	{r4, r7, pc}
 8022db4:	f3af 8000 	nop.w
 8022db8:	40668000 	.word	0x40668000
 8022dbc:	20000200 	.word	0x20000200
 8022dc0:	200001fe 	.word	0x200001fe
 8022dc4:	20010fb0 	.word	0x20010fb0
 8022dc8:	54442d18 	.word	0x54442d18
 8022dcc:	400921fb 	.word	0x400921fb

08022dd0 <_ZN15VelocityControlC1EP7Encoder>:
#include "velocity_control.hpp"
#include "declare_extern.h"

VelocityControl::VelocityControl(Encoder *encoder) : integral_error_(0)
 8022dd0:	b480      	push	{r7}
 8022dd2:	b083      	sub	sp, #12
 8022dd4:	af00      	add	r7, sp, #0
 8022dd6:	6078      	str	r0, [r7, #4]
 8022dd8:	6039      	str	r1, [r7, #0]
 8022dda:	687b      	ldr	r3, [r7, #4]
 8022ddc:	f04f 0200 	mov.w	r2, #0
 8022de0:	601a      	str	r2, [r3, #0]
{
    encoder_ = encoder;
 8022de2:	687b      	ldr	r3, [r7, #4]
 8022de4:	683a      	ldr	r2, [r7, #0]
 8022de6:	605a      	str	r2, [r3, #4]
}
 8022de8:	687b      	ldr	r3, [r7, #4]
 8022dea:	4618      	mov	r0, r3
 8022dec:	370c      	adds	r7, #12
 8022dee:	46bd      	mov	sp, r7
 8022df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022df4:	4770      	bx	lr
	...

08022df8 <Init>:
    &velocity_control
);
#endif // TEST_MODE

void Init()
{
 8022df8:	b580      	push	{r7, lr}
 8022dfa:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Init();
#else // TEST_MODE
    test.Init();
 8022dfc:	4802      	ldr	r0, [pc, #8]	; (8022e08 <Init+0x10>)
 8022dfe:	f7ff ff35 	bl	8022c6c <_ZN4Test4InitEv>
#endif // TEST_MODE
}
 8022e02:	bf00      	nop
 8022e04:	bd80      	pop	{r7, pc}
 8022e06:	bf00      	nop
 8022e08:	20010f84 	.word	0x20010f84

08022e0c <InterruptTim7>:

void InterruptTim7()
{
 8022e0c:	b580      	push	{r7, lr}
 8022e0e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer7();
#else // TEST_MODE
    test.Timer7();
 8022e10:	4804      	ldr	r0, [pc, #16]	; (8022e24 <InterruptTim7+0x18>)
 8022e12:	f7ff ff79 	bl	8022d08 <_ZN4Test6Timer7Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim7++;
 8022e16:	4b04      	ldr	r3, [pc, #16]	; (8022e28 <InterruptTim7+0x1c>)
 8022e18:	681b      	ldr	r3, [r3, #0]
 8022e1a:	3301      	adds	r3, #1
 8022e1c:	4a02      	ldr	r2, [pc, #8]	; (8022e28 <InterruptTim7+0x1c>)
 8022e1e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8022e20:	bf00      	nop
 8022e22:	bd80      	pop	{r7, pc}
 8022e24:	20010f84 	.word	0x20010f84
 8022e28:	20000210 	.word	0x20000210

08022e2c <InterruptTim6>:

void InterruptTim6()
{
 8022e2c:	b580      	push	{r7, lr}
 8022e2e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.RunMode();
#else // TEST_MODE
    test.Timer6();
 8022e30:	4804      	ldr	r0, [pc, #16]	; (8022e44 <InterruptTim6+0x18>)
 8022e32:	f7ff ff76 	bl	8022d22 <_ZN4Test6Timer6Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim6++;
 8022e36:	4b04      	ldr	r3, [pc, #16]	; (8022e48 <InterruptTim6+0x1c>)
 8022e38:	681b      	ldr	r3, [r3, #0]
 8022e3a:	3301      	adds	r3, #1
 8022e3c:	4a02      	ldr	r2, [pc, #8]	; (8022e48 <InterruptTim6+0x1c>)
 8022e3e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8022e40:	bf00      	nop
 8022e42:	bd80      	pop	{r7, pc}
 8022e44:	20010f84 	.word	0x20010f84
 8022e48:	20000214 	.word	0x20000214

08022e4c <InterruptTim2>:

void InterruptTim2()
{
 8022e4c:	b480      	push	{r7}
 8022e4e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer2();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim2++;
 8022e50:	4b04      	ldr	r3, [pc, #16]	; (8022e64 <InterruptTim2+0x18>)
 8022e52:	681b      	ldr	r3, [r3, #0]
 8022e54:	3301      	adds	r3, #1
 8022e56:	4a03      	ldr	r2, [pc, #12]	; (8022e64 <InterruptTim2+0x18>)
 8022e58:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8022e5a:	bf00      	nop
 8022e5c:	46bd      	mov	sp, r7
 8022e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e62:	4770      	bx	lr
 8022e64:	20000218 	.word	0x20000218

08022e68 <_Z41__static_initialization_and_destruction_0ii>:

#ifdef TEST_MODE
void Loop()
{
    test.Loop();
}
 8022e68:	b580      	push	{r7, lr}
 8022e6a:	b088      	sub	sp, #32
 8022e6c:	af06      	add	r7, sp, #24
 8022e6e:	6078      	str	r0, [r7, #4]
 8022e70:	6039      	str	r1, [r7, #0]
 8022e72:	687b      	ldr	r3, [r7, #4]
 8022e74:	2b01      	cmp	r3, #1
 8022e76:	d13e      	bne.n	8022ef6 <_Z41__static_initialization_and_destruction_0ii+0x8e>
 8022e78:	683b      	ldr	r3, [r7, #0]
 8022e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022e7e:	4293      	cmp	r3, r2
 8022e80:	d139      	bne.n	8022ef6 <_Z41__static_initialization_and_destruction_0ii+0x8e>
Encoder encoder;
 8022e82:	481f      	ldr	r0, [pc, #124]	; (8022f00 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8022e84:	f7fd ff48 	bl	8020d18 <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 8022e88:	481e      	ldr	r0, [pc, #120]	; (8022f04 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8022e8a:	f7fd ff8f 	bl	8020dac <_ZN8Iim42652C1Ev>
Led led;
 8022e8e:	481e      	ldr	r0, [pc, #120]	; (8022f08 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8022e90:	f7fe f956 	bl	8021140 <_ZN3LedC1Ev>
LineSensor line_sensor;
 8022e94:	481d      	ldr	r0, [pc, #116]	; (8022f0c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8022e96:	f7fe fa6e 	bl	8021376 <_ZN10LineSensorC1Ev>
LineTrace line_trace(&line_sensor);
 8022e9a:	491c      	ldr	r1, [pc, #112]	; (8022f0c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8022e9c:	481c      	ldr	r0, [pc, #112]	; (8022f10 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8022e9e:	f7fe fb1b 	bl	80214d8 <_ZN9LineTraceC1EP10LineSensor>
Logger logger;
 8022ea2:	481c      	ldr	r0, [pc, #112]	; (8022f14 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8022ea4:	f7fe fb2b 	bl	80214fe <_ZN6LoggerC1Ev>
Print print(&flash);
 8022ea8:	491b      	ldr	r1, [pc, #108]	; (8022f18 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8022eaa:	481c      	ldr	r0, [pc, #112]	; (8022f1c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8022eac:	f7ff fa0a 	bl	80222c4 <_ZN5PrintC1EP5Flash>
SideSensor side_sensor;
 8022eb0:	481b      	ldr	r0, [pc, #108]	; (8022f20 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8022eb2:	f7ff fa69 	bl	8022388 <_ZN10SideSensorC1Ev>
Logger2 logger2(&encoder, &flash, &led, &iim_42652, &side_sensor);
 8022eb6:	4b1a      	ldr	r3, [pc, #104]	; (8022f20 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8022eb8:	9301      	str	r3, [sp, #4]
 8022eba:	4b12      	ldr	r3, [pc, #72]	; (8022f04 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8022ebc:	9300      	str	r3, [sp, #0]
 8022ebe:	4b12      	ldr	r3, [pc, #72]	; (8022f08 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8022ec0:	4a15      	ldr	r2, [pc, #84]	; (8022f18 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8022ec2:	490f      	ldr	r1, [pc, #60]	; (8022f00 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8022ec4:	4817      	ldr	r0, [pc, #92]	; (8022f24 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8022ec6:	f7fe fb33 	bl	8021530 <_ZN7Logger2C1EP7EncoderP5FlashP3LedP8Iim42652P10SideSensor>
VelocityControl velocity_control(&encoder);
 8022eca:	490d      	ldr	r1, [pc, #52]	; (8022f00 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8022ecc:	4816      	ldr	r0, [pc, #88]	; (8022f28 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8022ece:	f7ff ff7f 	bl	8022dd0 <_ZN15VelocityControlC1EP7Encoder>
);
 8022ed2:	4b15      	ldr	r3, [pc, #84]	; (8022f28 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8022ed4:	9305      	str	r3, [sp, #20]
 8022ed6:	4b12      	ldr	r3, [pc, #72]	; (8022f20 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8022ed8:	9304      	str	r3, [sp, #16]
 8022eda:	4b14      	ldr	r3, [pc, #80]	; (8022f2c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8022edc:	9303      	str	r3, [sp, #12]
 8022ede:	4b14      	ldr	r3, [pc, #80]	; (8022f30 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8022ee0:	9302      	str	r3, [sp, #8]
 8022ee2:	4b0b      	ldr	r3, [pc, #44]	; (8022f10 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8022ee4:	9301      	str	r3, [sp, #4]
 8022ee6:	4b09      	ldr	r3, [pc, #36]	; (8022f0c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8022ee8:	9300      	str	r3, [sp, #0]
 8022eea:	4b07      	ldr	r3, [pc, #28]	; (8022f08 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8022eec:	4a05      	ldr	r2, [pc, #20]	; (8022f04 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8022eee:	4904      	ldr	r1, [pc, #16]	; (8022f00 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8022ef0:	4810      	ldr	r0, [pc, #64]	; (8022f34 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8022ef2:	f7ff fe91 	bl	8022c18 <_ZN4TestC1EP7EncoderP8Iim42652P3LedP10LineSensorP9LineTraceP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>
}
 8022ef6:	bf00      	nop
 8022ef8:	3708      	adds	r7, #8
 8022efa:	46bd      	mov	sp, r7
 8022efc:	bd80      	pop	{r7, pc}
 8022efe:	bf00      	nop
 8022f00:	20000220 	.word	0x20000220
 8022f04:	20000230 	.word	0x20000230
 8022f08:	20000238 	.word	0x20000238
 8022f0c:	2000023c 	.word	0x2000023c
 8022f10:	200003c8 	.word	0x200003c8
 8022f14:	200003d0 	.word	0x200003d0
 8022f18:	2000022c 	.word	0x2000022c
 8022f1c:	200004dc 	.word	0x200004dc
 8022f20:	20010f4c 	.word	0x20010f4c
 8022f24:	20010f54 	.word	0x20010f54
 8022f28:	20010f7c 	.word	0x20010f7c
 8022f2c:	20010f48 	.word	0x20010f48
 8022f30:	200004d8 	.word	0x200004d8
 8022f34:	20010f84 	.word	0x20010f84

08022f38 <_GLOBAL__sub_I_encoder>:
 8022f38:	b580      	push	{r7, lr}
 8022f3a:	af00      	add	r7, sp, #0
 8022f3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8022f40:	2001      	movs	r0, #1
 8022f42:	f7ff ff91 	bl	8022e68 <_Z41__static_initialization_and_destruction_0ii>
 8022f46:	bd80      	pop	{r7, pc}

08022f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8022f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8022f80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8022f4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8022f4e:	e003      	b.n	8022f58 <LoopCopyDataInit>

08022f50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8022f50:	4b0c      	ldr	r3, [pc, #48]	; (8022f84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8022f52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8022f54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8022f56:	3104      	adds	r1, #4

08022f58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8022f58:	480b      	ldr	r0, [pc, #44]	; (8022f88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8022f5a:	4b0c      	ldr	r3, [pc, #48]	; (8022f8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8022f5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8022f5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8022f60:	d3f6      	bcc.n	8022f50 <CopyDataInit>
  ldr  r2, =_sbss
 8022f62:	4a0b      	ldr	r2, [pc, #44]	; (8022f90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8022f64:	e002      	b.n	8022f6c <LoopFillZerobss>

08022f66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8022f66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8022f68:	f842 3b04 	str.w	r3, [r2], #4

08022f6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8022f6c:	4b09      	ldr	r3, [pc, #36]	; (8022f94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8022f6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8022f70:	d3f9      	bcc.n	8022f66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8022f72:	f7ff fe3b 	bl	8022bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8022f76:	f003 fdc1 	bl	8026afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8022f7a:	f7fe fb2f 	bl	80215dc <main>
  bx  lr    
 8022f7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8022f80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8022f84:	08028874 	.word	0x08028874
  ldr  r0, =_sdata
 8022f88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8022f8c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8022f90:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8022f94:	20011390 	.word	0x20011390

08022f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8022f98:	e7fe      	b.n	8022f98 <ADC_IRQHandler>
	...

08022f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8022f9c:	b580      	push	{r7, lr}
 8022f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8022fa0:	4b0e      	ldr	r3, [pc, #56]	; (8022fdc <HAL_Init+0x40>)
 8022fa2:	681b      	ldr	r3, [r3, #0]
 8022fa4:	4a0d      	ldr	r2, [pc, #52]	; (8022fdc <HAL_Init+0x40>)
 8022fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8022faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8022fac:	4b0b      	ldr	r3, [pc, #44]	; (8022fdc <HAL_Init+0x40>)
 8022fae:	681b      	ldr	r3, [r3, #0]
 8022fb0:	4a0a      	ldr	r2, [pc, #40]	; (8022fdc <HAL_Init+0x40>)
 8022fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8022fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8022fb8:	4b08      	ldr	r3, [pc, #32]	; (8022fdc <HAL_Init+0x40>)
 8022fba:	681b      	ldr	r3, [r3, #0]
 8022fbc:	4a07      	ldr	r2, [pc, #28]	; (8022fdc <HAL_Init+0x40>)
 8022fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8022fc4:	2003      	movs	r0, #3
 8022fc6:	f000 fd41 	bl	8023a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8022fca:	2001      	movs	r0, #1
 8022fcc:	f000 f808 	bl	8022fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8022fd0:	f7ff f9fa 	bl	80223c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8022fd4:	2300      	movs	r3, #0
}
 8022fd6:	4618      	mov	r0, r3
 8022fd8:	bd80      	pop	{r7, pc}
 8022fda:	bf00      	nop
 8022fdc:	40023c00 	.word	0x40023c00

08022fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8022fe0:	b580      	push	{r7, lr}
 8022fe2:	b082      	sub	sp, #8
 8022fe4:	af00      	add	r7, sp, #0
 8022fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8022fe8:	4b12      	ldr	r3, [pc, #72]	; (8023034 <HAL_InitTick+0x54>)
 8022fea:	681a      	ldr	r2, [r3, #0]
 8022fec:	4b12      	ldr	r3, [pc, #72]	; (8023038 <HAL_InitTick+0x58>)
 8022fee:	781b      	ldrb	r3, [r3, #0]
 8022ff0:	4619      	mov	r1, r3
 8022ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8022ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8022ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8022ffe:	4618      	mov	r0, r3
 8023000:	f000 fd59 	bl	8023ab6 <HAL_SYSTICK_Config>
 8023004:	4603      	mov	r3, r0
 8023006:	2b00      	cmp	r3, #0
 8023008:	d001      	beq.n	802300e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 802300a:	2301      	movs	r3, #1
 802300c:	e00e      	b.n	802302c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802300e:	687b      	ldr	r3, [r7, #4]
 8023010:	2b0f      	cmp	r3, #15
 8023012:	d80a      	bhi.n	802302a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8023014:	2200      	movs	r2, #0
 8023016:	6879      	ldr	r1, [r7, #4]
 8023018:	f04f 30ff 	mov.w	r0, #4294967295
 802301c:	f000 fd21 	bl	8023a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8023020:	4a06      	ldr	r2, [pc, #24]	; (802303c <HAL_InitTick+0x5c>)
 8023022:	687b      	ldr	r3, [r7, #4]
 8023024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8023026:	2300      	movs	r3, #0
 8023028:	e000      	b.n	802302c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 802302a:	2301      	movs	r3, #1
}
 802302c:	4618      	mov	r0, r3
 802302e:	3708      	adds	r7, #8
 8023030:	46bd      	mov	sp, r7
 8023032:	bd80      	pop	{r7, pc}
 8023034:	20000000 	.word	0x20000000
 8023038:	20000008 	.word	0x20000008
 802303c:	20000004 	.word	0x20000004

08023040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8023040:	b480      	push	{r7}
 8023042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8023044:	4b06      	ldr	r3, [pc, #24]	; (8023060 <HAL_IncTick+0x20>)
 8023046:	781b      	ldrb	r3, [r3, #0]
 8023048:	461a      	mov	r2, r3
 802304a:	4b06      	ldr	r3, [pc, #24]	; (8023064 <HAL_IncTick+0x24>)
 802304c:	681b      	ldr	r3, [r3, #0]
 802304e:	4413      	add	r3, r2
 8023050:	4a04      	ldr	r2, [pc, #16]	; (8023064 <HAL_IncTick+0x24>)
 8023052:	6013      	str	r3, [r2, #0]
}
 8023054:	bf00      	nop
 8023056:	46bd      	mov	sp, r7
 8023058:	f85d 7b04 	ldr.w	r7, [sp], #4
 802305c:	4770      	bx	lr
 802305e:	bf00      	nop
 8023060:	20000008 	.word	0x20000008
 8023064:	20011388 	.word	0x20011388

08023068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8023068:	b480      	push	{r7}
 802306a:	af00      	add	r7, sp, #0
  return uwTick;
 802306c:	4b03      	ldr	r3, [pc, #12]	; (802307c <HAL_GetTick+0x14>)
 802306e:	681b      	ldr	r3, [r3, #0]
}
 8023070:	4618      	mov	r0, r3
 8023072:	46bd      	mov	sp, r7
 8023074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023078:	4770      	bx	lr
 802307a:	bf00      	nop
 802307c:	20011388 	.word	0x20011388

08023080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8023080:	b580      	push	{r7, lr}
 8023082:	b084      	sub	sp, #16
 8023084:	af00      	add	r7, sp, #0
 8023086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8023088:	f7ff ffee 	bl	8023068 <HAL_GetTick>
 802308c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802308e:	687b      	ldr	r3, [r7, #4]
 8023090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8023092:	68fb      	ldr	r3, [r7, #12]
 8023094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023098:	d005      	beq.n	80230a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802309a:	4b09      	ldr	r3, [pc, #36]	; (80230c0 <HAL_Delay+0x40>)
 802309c:	781b      	ldrb	r3, [r3, #0]
 802309e:	461a      	mov	r2, r3
 80230a0:	68fb      	ldr	r3, [r7, #12]
 80230a2:	4413      	add	r3, r2
 80230a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80230a6:	bf00      	nop
 80230a8:	f7ff ffde 	bl	8023068 <HAL_GetTick>
 80230ac:	4602      	mov	r2, r0
 80230ae:	68bb      	ldr	r3, [r7, #8]
 80230b0:	1ad3      	subs	r3, r2, r3
 80230b2:	68fa      	ldr	r2, [r7, #12]
 80230b4:	429a      	cmp	r2, r3
 80230b6:	d8f7      	bhi.n	80230a8 <HAL_Delay+0x28>
  {
  }
}
 80230b8:	bf00      	nop
 80230ba:	3710      	adds	r7, #16
 80230bc:	46bd      	mov	sp, r7
 80230be:	bd80      	pop	{r7, pc}
 80230c0:	20000008 	.word	0x20000008

080230c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80230c4:	b580      	push	{r7, lr}
 80230c6:	b084      	sub	sp, #16
 80230c8:	af00      	add	r7, sp, #0
 80230ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80230cc:	2300      	movs	r3, #0
 80230ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80230d0:	687b      	ldr	r3, [r7, #4]
 80230d2:	2b00      	cmp	r3, #0
 80230d4:	d101      	bne.n	80230da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80230d6:	2301      	movs	r3, #1
 80230d8:	e033      	b.n	8023142 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80230da:	687b      	ldr	r3, [r7, #4]
 80230dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80230de:	2b00      	cmp	r3, #0
 80230e0:	d109      	bne.n	80230f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80230e2:	6878      	ldr	r0, [r7, #4]
 80230e4:	f7ff f998 	bl	8022418 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80230e8:	687b      	ldr	r3, [r7, #4]
 80230ea:	2200      	movs	r2, #0
 80230ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80230ee:	687b      	ldr	r3, [r7, #4]
 80230f0:	2200      	movs	r2, #0
 80230f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80230f6:	687b      	ldr	r3, [r7, #4]
 80230f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80230fa:	f003 0310 	and.w	r3, r3, #16
 80230fe:	2b00      	cmp	r3, #0
 8023100:	d118      	bne.n	8023134 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8023102:	687b      	ldr	r3, [r7, #4]
 8023104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023106:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 802310a:	f023 0302 	bic.w	r3, r3, #2
 802310e:	f043 0202 	orr.w	r2, r3, #2
 8023112:	687b      	ldr	r3, [r7, #4]
 8023114:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8023116:	6878      	ldr	r0, [r7, #4]
 8023118:	f000 fa4a 	bl	80235b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 802311c:	687b      	ldr	r3, [r7, #4]
 802311e:	2200      	movs	r2, #0
 8023120:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8023122:	687b      	ldr	r3, [r7, #4]
 8023124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023126:	f023 0303 	bic.w	r3, r3, #3
 802312a:	f043 0201 	orr.w	r2, r3, #1
 802312e:	687b      	ldr	r3, [r7, #4]
 8023130:	641a      	str	r2, [r3, #64]	; 0x40
 8023132:	e001      	b.n	8023138 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8023134:	2301      	movs	r3, #1
 8023136:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8023138:	687b      	ldr	r3, [r7, #4]
 802313a:	2200      	movs	r2, #0
 802313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8023140:	7bfb      	ldrb	r3, [r7, #15]
}
 8023142:	4618      	mov	r0, r3
 8023144:	3710      	adds	r7, #16
 8023146:	46bd      	mov	sp, r7
 8023148:	bd80      	pop	{r7, pc}
	...

0802314c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 802314c:	b580      	push	{r7, lr}
 802314e:	b086      	sub	sp, #24
 8023150:	af00      	add	r7, sp, #0
 8023152:	60f8      	str	r0, [r7, #12]
 8023154:	60b9      	str	r1, [r7, #8]
 8023156:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8023158:	2300      	movs	r3, #0
 802315a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802315c:	68fb      	ldr	r3, [r7, #12]
 802315e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023162:	2b01      	cmp	r3, #1
 8023164:	d101      	bne.n	802316a <HAL_ADC_Start_DMA+0x1e>
 8023166:	2302      	movs	r3, #2
 8023168:	e0cc      	b.n	8023304 <HAL_ADC_Start_DMA+0x1b8>
 802316a:	68fb      	ldr	r3, [r7, #12]
 802316c:	2201      	movs	r2, #1
 802316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8023172:	68fb      	ldr	r3, [r7, #12]
 8023174:	681b      	ldr	r3, [r3, #0]
 8023176:	689b      	ldr	r3, [r3, #8]
 8023178:	f003 0301 	and.w	r3, r3, #1
 802317c:	2b01      	cmp	r3, #1
 802317e:	d018      	beq.n	80231b2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8023180:	68fb      	ldr	r3, [r7, #12]
 8023182:	681b      	ldr	r3, [r3, #0]
 8023184:	689a      	ldr	r2, [r3, #8]
 8023186:	68fb      	ldr	r3, [r7, #12]
 8023188:	681b      	ldr	r3, [r3, #0]
 802318a:	f042 0201 	orr.w	r2, r2, #1
 802318e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8023190:	4b5e      	ldr	r3, [pc, #376]	; (802330c <HAL_ADC_Start_DMA+0x1c0>)
 8023192:	681b      	ldr	r3, [r3, #0]
 8023194:	4a5e      	ldr	r2, [pc, #376]	; (8023310 <HAL_ADC_Start_DMA+0x1c4>)
 8023196:	fba2 2303 	umull	r2, r3, r2, r3
 802319a:	0c9a      	lsrs	r2, r3, #18
 802319c:	4613      	mov	r3, r2
 802319e:	005b      	lsls	r3, r3, #1
 80231a0:	4413      	add	r3, r2
 80231a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80231a4:	e002      	b.n	80231ac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80231a6:	693b      	ldr	r3, [r7, #16]
 80231a8:	3b01      	subs	r3, #1
 80231aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80231ac:	693b      	ldr	r3, [r7, #16]
 80231ae:	2b00      	cmp	r3, #0
 80231b0:	d1f9      	bne.n	80231a6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80231b2:	68fb      	ldr	r3, [r7, #12]
 80231b4:	681b      	ldr	r3, [r3, #0]
 80231b6:	689b      	ldr	r3, [r3, #8]
 80231b8:	f003 0301 	and.w	r3, r3, #1
 80231bc:	2b01      	cmp	r3, #1
 80231be:	f040 80a0 	bne.w	8023302 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80231c2:	68fb      	ldr	r3, [r7, #12]
 80231c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80231ca:	f023 0301 	bic.w	r3, r3, #1
 80231ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80231d2:	68fb      	ldr	r3, [r7, #12]
 80231d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80231d6:	68fb      	ldr	r3, [r7, #12]
 80231d8:	681b      	ldr	r3, [r3, #0]
 80231da:	685b      	ldr	r3, [r3, #4]
 80231dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80231e0:	2b00      	cmp	r3, #0
 80231e2:	d007      	beq.n	80231f4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80231e4:	68fb      	ldr	r3, [r7, #12]
 80231e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80231ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80231f0:	68fb      	ldr	r3, [r7, #12]
 80231f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80231f4:	68fb      	ldr	r3, [r7, #12]
 80231f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80231fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023200:	d106      	bne.n	8023210 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8023202:	68fb      	ldr	r3, [r7, #12]
 8023204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023206:	f023 0206 	bic.w	r2, r3, #6
 802320a:	68fb      	ldr	r3, [r7, #12]
 802320c:	645a      	str	r2, [r3, #68]	; 0x44
 802320e:	e002      	b.n	8023216 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8023210:	68fb      	ldr	r3, [r7, #12]
 8023212:	2200      	movs	r2, #0
 8023214:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8023216:	68fb      	ldr	r3, [r7, #12]
 8023218:	2200      	movs	r2, #0
 802321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802321e:	4b3d      	ldr	r3, [pc, #244]	; (8023314 <HAL_ADC_Start_DMA+0x1c8>)
 8023220:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8023222:	68fb      	ldr	r3, [r7, #12]
 8023224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023226:	4a3c      	ldr	r2, [pc, #240]	; (8023318 <HAL_ADC_Start_DMA+0x1cc>)
 8023228:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 802322a:	68fb      	ldr	r3, [r7, #12]
 802322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802322e:	4a3b      	ldr	r2, [pc, #236]	; (802331c <HAL_ADC_Start_DMA+0x1d0>)
 8023230:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8023232:	68fb      	ldr	r3, [r7, #12]
 8023234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023236:	4a3a      	ldr	r2, [pc, #232]	; (8023320 <HAL_ADC_Start_DMA+0x1d4>)
 8023238:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 802323a:	68fb      	ldr	r3, [r7, #12]
 802323c:	681b      	ldr	r3, [r3, #0]
 802323e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8023242:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8023244:	68fb      	ldr	r3, [r7, #12]
 8023246:	681b      	ldr	r3, [r3, #0]
 8023248:	685a      	ldr	r2, [r3, #4]
 802324a:	68fb      	ldr	r3, [r7, #12]
 802324c:	681b      	ldr	r3, [r3, #0]
 802324e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8023252:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8023254:	68fb      	ldr	r3, [r7, #12]
 8023256:	681b      	ldr	r3, [r3, #0]
 8023258:	689a      	ldr	r2, [r3, #8]
 802325a:	68fb      	ldr	r3, [r7, #12]
 802325c:	681b      	ldr	r3, [r3, #0]
 802325e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8023262:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8023264:	68fb      	ldr	r3, [r7, #12]
 8023266:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8023268:	68fb      	ldr	r3, [r7, #12]
 802326a:	681b      	ldr	r3, [r3, #0]
 802326c:	334c      	adds	r3, #76	; 0x4c
 802326e:	4619      	mov	r1, r3
 8023270:	68ba      	ldr	r2, [r7, #8]
 8023272:	687b      	ldr	r3, [r7, #4]
 8023274:	f000 fcda 	bl	8023c2c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8023278:	697b      	ldr	r3, [r7, #20]
 802327a:	685b      	ldr	r3, [r3, #4]
 802327c:	f003 031f 	and.w	r3, r3, #31
 8023280:	2b00      	cmp	r3, #0
 8023282:	d12a      	bne.n	80232da <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8023284:	68fb      	ldr	r3, [r7, #12]
 8023286:	681b      	ldr	r3, [r3, #0]
 8023288:	4a26      	ldr	r2, [pc, #152]	; (8023324 <HAL_ADC_Start_DMA+0x1d8>)
 802328a:	4293      	cmp	r3, r2
 802328c:	d015      	beq.n	80232ba <HAL_ADC_Start_DMA+0x16e>
 802328e:	68fb      	ldr	r3, [r7, #12]
 8023290:	681b      	ldr	r3, [r3, #0]
 8023292:	4a25      	ldr	r2, [pc, #148]	; (8023328 <HAL_ADC_Start_DMA+0x1dc>)
 8023294:	4293      	cmp	r3, r2
 8023296:	d105      	bne.n	80232a4 <HAL_ADC_Start_DMA+0x158>
 8023298:	4b1e      	ldr	r3, [pc, #120]	; (8023314 <HAL_ADC_Start_DMA+0x1c8>)
 802329a:	685b      	ldr	r3, [r3, #4]
 802329c:	f003 031f 	and.w	r3, r3, #31
 80232a0:	2b00      	cmp	r3, #0
 80232a2:	d00a      	beq.n	80232ba <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80232a4:	68fb      	ldr	r3, [r7, #12]
 80232a6:	681b      	ldr	r3, [r3, #0]
 80232a8:	4a20      	ldr	r2, [pc, #128]	; (802332c <HAL_ADC_Start_DMA+0x1e0>)
 80232aa:	4293      	cmp	r3, r2
 80232ac:	d129      	bne.n	8023302 <HAL_ADC_Start_DMA+0x1b6>
 80232ae:	4b19      	ldr	r3, [pc, #100]	; (8023314 <HAL_ADC_Start_DMA+0x1c8>)
 80232b0:	685b      	ldr	r3, [r3, #4]
 80232b2:	f003 031f 	and.w	r3, r3, #31
 80232b6:	2b0f      	cmp	r3, #15
 80232b8:	d823      	bhi.n	8023302 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80232ba:	68fb      	ldr	r3, [r7, #12]
 80232bc:	681b      	ldr	r3, [r3, #0]
 80232be:	689b      	ldr	r3, [r3, #8]
 80232c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80232c4:	2b00      	cmp	r3, #0
 80232c6:	d11c      	bne.n	8023302 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80232c8:	68fb      	ldr	r3, [r7, #12]
 80232ca:	681b      	ldr	r3, [r3, #0]
 80232cc:	689a      	ldr	r2, [r3, #8]
 80232ce:	68fb      	ldr	r3, [r7, #12]
 80232d0:	681b      	ldr	r3, [r3, #0]
 80232d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80232d6:	609a      	str	r2, [r3, #8]
 80232d8:	e013      	b.n	8023302 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80232da:	68fb      	ldr	r3, [r7, #12]
 80232dc:	681b      	ldr	r3, [r3, #0]
 80232de:	4a11      	ldr	r2, [pc, #68]	; (8023324 <HAL_ADC_Start_DMA+0x1d8>)
 80232e0:	4293      	cmp	r3, r2
 80232e2:	d10e      	bne.n	8023302 <HAL_ADC_Start_DMA+0x1b6>
 80232e4:	68fb      	ldr	r3, [r7, #12]
 80232e6:	681b      	ldr	r3, [r3, #0]
 80232e8:	689b      	ldr	r3, [r3, #8]
 80232ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80232ee:	2b00      	cmp	r3, #0
 80232f0:	d107      	bne.n	8023302 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80232f2:	68fb      	ldr	r3, [r7, #12]
 80232f4:	681b      	ldr	r3, [r3, #0]
 80232f6:	689a      	ldr	r2, [r3, #8]
 80232f8:	68fb      	ldr	r3, [r7, #12]
 80232fa:	681b      	ldr	r3, [r3, #0]
 80232fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8023300:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8023302:	2300      	movs	r3, #0
}
 8023304:	4618      	mov	r0, r3
 8023306:	3718      	adds	r7, #24
 8023308:	46bd      	mov	sp, r7
 802330a:	bd80      	pop	{r7, pc}
 802330c:	20000000 	.word	0x20000000
 8023310:	431bde83 	.word	0x431bde83
 8023314:	40012300 	.word	0x40012300
 8023318:	080237a9 	.word	0x080237a9
 802331c:	08023863 	.word	0x08023863
 8023320:	0802387f 	.word	0x0802387f
 8023324:	40012000 	.word	0x40012000
 8023328:	40012100 	.word	0x40012100
 802332c:	40012200 	.word	0x40012200

08023330 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8023330:	b480      	push	{r7}
 8023332:	b083      	sub	sp, #12
 8023334:	af00      	add	r7, sp, #0
 8023336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8023338:	bf00      	nop
 802333a:	370c      	adds	r7, #12
 802333c:	46bd      	mov	sp, r7
 802333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023342:	4770      	bx	lr

08023344 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8023344:	b480      	push	{r7}
 8023346:	b083      	sub	sp, #12
 8023348:	af00      	add	r7, sp, #0
 802334a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 802334c:	bf00      	nop
 802334e:	370c      	adds	r7, #12
 8023350:	46bd      	mov	sp, r7
 8023352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023356:	4770      	bx	lr

08023358 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8023358:	b480      	push	{r7}
 802335a:	b083      	sub	sp, #12
 802335c:	af00      	add	r7, sp, #0
 802335e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8023360:	bf00      	nop
 8023362:	370c      	adds	r7, #12
 8023364:	46bd      	mov	sp, r7
 8023366:	f85d 7b04 	ldr.w	r7, [sp], #4
 802336a:	4770      	bx	lr

0802336c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 802336c:	b480      	push	{r7}
 802336e:	b085      	sub	sp, #20
 8023370:	af00      	add	r7, sp, #0
 8023372:	6078      	str	r0, [r7, #4]
 8023374:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8023376:	2300      	movs	r3, #0
 8023378:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802337a:	687b      	ldr	r3, [r7, #4]
 802337c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023380:	2b01      	cmp	r3, #1
 8023382:	d101      	bne.n	8023388 <HAL_ADC_ConfigChannel+0x1c>
 8023384:	2302      	movs	r3, #2
 8023386:	e105      	b.n	8023594 <HAL_ADC_ConfigChannel+0x228>
 8023388:	687b      	ldr	r3, [r7, #4]
 802338a:	2201      	movs	r2, #1
 802338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8023390:	683b      	ldr	r3, [r7, #0]
 8023392:	681b      	ldr	r3, [r3, #0]
 8023394:	2b09      	cmp	r3, #9
 8023396:	d925      	bls.n	80233e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8023398:	687b      	ldr	r3, [r7, #4]
 802339a:	681b      	ldr	r3, [r3, #0]
 802339c:	68d9      	ldr	r1, [r3, #12]
 802339e:	683b      	ldr	r3, [r7, #0]
 80233a0:	681b      	ldr	r3, [r3, #0]
 80233a2:	b29b      	uxth	r3, r3
 80233a4:	461a      	mov	r2, r3
 80233a6:	4613      	mov	r3, r2
 80233a8:	005b      	lsls	r3, r3, #1
 80233aa:	4413      	add	r3, r2
 80233ac:	3b1e      	subs	r3, #30
 80233ae:	2207      	movs	r2, #7
 80233b0:	fa02 f303 	lsl.w	r3, r2, r3
 80233b4:	43da      	mvns	r2, r3
 80233b6:	687b      	ldr	r3, [r7, #4]
 80233b8:	681b      	ldr	r3, [r3, #0]
 80233ba:	400a      	ands	r2, r1
 80233bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80233be:	687b      	ldr	r3, [r7, #4]
 80233c0:	681b      	ldr	r3, [r3, #0]
 80233c2:	68d9      	ldr	r1, [r3, #12]
 80233c4:	683b      	ldr	r3, [r7, #0]
 80233c6:	689a      	ldr	r2, [r3, #8]
 80233c8:	683b      	ldr	r3, [r7, #0]
 80233ca:	681b      	ldr	r3, [r3, #0]
 80233cc:	b29b      	uxth	r3, r3
 80233ce:	4618      	mov	r0, r3
 80233d0:	4603      	mov	r3, r0
 80233d2:	005b      	lsls	r3, r3, #1
 80233d4:	4403      	add	r3, r0
 80233d6:	3b1e      	subs	r3, #30
 80233d8:	409a      	lsls	r2, r3
 80233da:	687b      	ldr	r3, [r7, #4]
 80233dc:	681b      	ldr	r3, [r3, #0]
 80233de:	430a      	orrs	r2, r1
 80233e0:	60da      	str	r2, [r3, #12]
 80233e2:	e022      	b.n	802342a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80233e4:	687b      	ldr	r3, [r7, #4]
 80233e6:	681b      	ldr	r3, [r3, #0]
 80233e8:	6919      	ldr	r1, [r3, #16]
 80233ea:	683b      	ldr	r3, [r7, #0]
 80233ec:	681b      	ldr	r3, [r3, #0]
 80233ee:	b29b      	uxth	r3, r3
 80233f0:	461a      	mov	r2, r3
 80233f2:	4613      	mov	r3, r2
 80233f4:	005b      	lsls	r3, r3, #1
 80233f6:	4413      	add	r3, r2
 80233f8:	2207      	movs	r2, #7
 80233fa:	fa02 f303 	lsl.w	r3, r2, r3
 80233fe:	43da      	mvns	r2, r3
 8023400:	687b      	ldr	r3, [r7, #4]
 8023402:	681b      	ldr	r3, [r3, #0]
 8023404:	400a      	ands	r2, r1
 8023406:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8023408:	687b      	ldr	r3, [r7, #4]
 802340a:	681b      	ldr	r3, [r3, #0]
 802340c:	6919      	ldr	r1, [r3, #16]
 802340e:	683b      	ldr	r3, [r7, #0]
 8023410:	689a      	ldr	r2, [r3, #8]
 8023412:	683b      	ldr	r3, [r7, #0]
 8023414:	681b      	ldr	r3, [r3, #0]
 8023416:	b29b      	uxth	r3, r3
 8023418:	4618      	mov	r0, r3
 802341a:	4603      	mov	r3, r0
 802341c:	005b      	lsls	r3, r3, #1
 802341e:	4403      	add	r3, r0
 8023420:	409a      	lsls	r2, r3
 8023422:	687b      	ldr	r3, [r7, #4]
 8023424:	681b      	ldr	r3, [r3, #0]
 8023426:	430a      	orrs	r2, r1
 8023428:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 802342a:	683b      	ldr	r3, [r7, #0]
 802342c:	685b      	ldr	r3, [r3, #4]
 802342e:	2b06      	cmp	r3, #6
 8023430:	d824      	bhi.n	802347c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8023432:	687b      	ldr	r3, [r7, #4]
 8023434:	681b      	ldr	r3, [r3, #0]
 8023436:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8023438:	683b      	ldr	r3, [r7, #0]
 802343a:	685a      	ldr	r2, [r3, #4]
 802343c:	4613      	mov	r3, r2
 802343e:	009b      	lsls	r3, r3, #2
 8023440:	4413      	add	r3, r2
 8023442:	3b05      	subs	r3, #5
 8023444:	221f      	movs	r2, #31
 8023446:	fa02 f303 	lsl.w	r3, r2, r3
 802344a:	43da      	mvns	r2, r3
 802344c:	687b      	ldr	r3, [r7, #4]
 802344e:	681b      	ldr	r3, [r3, #0]
 8023450:	400a      	ands	r2, r1
 8023452:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8023454:	687b      	ldr	r3, [r7, #4]
 8023456:	681b      	ldr	r3, [r3, #0]
 8023458:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802345a:	683b      	ldr	r3, [r7, #0]
 802345c:	681b      	ldr	r3, [r3, #0]
 802345e:	b29b      	uxth	r3, r3
 8023460:	4618      	mov	r0, r3
 8023462:	683b      	ldr	r3, [r7, #0]
 8023464:	685a      	ldr	r2, [r3, #4]
 8023466:	4613      	mov	r3, r2
 8023468:	009b      	lsls	r3, r3, #2
 802346a:	4413      	add	r3, r2
 802346c:	3b05      	subs	r3, #5
 802346e:	fa00 f203 	lsl.w	r2, r0, r3
 8023472:	687b      	ldr	r3, [r7, #4]
 8023474:	681b      	ldr	r3, [r3, #0]
 8023476:	430a      	orrs	r2, r1
 8023478:	635a      	str	r2, [r3, #52]	; 0x34
 802347a:	e04c      	b.n	8023516 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 802347c:	683b      	ldr	r3, [r7, #0]
 802347e:	685b      	ldr	r3, [r3, #4]
 8023480:	2b0c      	cmp	r3, #12
 8023482:	d824      	bhi.n	80234ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8023484:	687b      	ldr	r3, [r7, #4]
 8023486:	681b      	ldr	r3, [r3, #0]
 8023488:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802348a:	683b      	ldr	r3, [r7, #0]
 802348c:	685a      	ldr	r2, [r3, #4]
 802348e:	4613      	mov	r3, r2
 8023490:	009b      	lsls	r3, r3, #2
 8023492:	4413      	add	r3, r2
 8023494:	3b23      	subs	r3, #35	; 0x23
 8023496:	221f      	movs	r2, #31
 8023498:	fa02 f303 	lsl.w	r3, r2, r3
 802349c:	43da      	mvns	r2, r3
 802349e:	687b      	ldr	r3, [r7, #4]
 80234a0:	681b      	ldr	r3, [r3, #0]
 80234a2:	400a      	ands	r2, r1
 80234a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80234a6:	687b      	ldr	r3, [r7, #4]
 80234a8:	681b      	ldr	r3, [r3, #0]
 80234aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80234ac:	683b      	ldr	r3, [r7, #0]
 80234ae:	681b      	ldr	r3, [r3, #0]
 80234b0:	b29b      	uxth	r3, r3
 80234b2:	4618      	mov	r0, r3
 80234b4:	683b      	ldr	r3, [r7, #0]
 80234b6:	685a      	ldr	r2, [r3, #4]
 80234b8:	4613      	mov	r3, r2
 80234ba:	009b      	lsls	r3, r3, #2
 80234bc:	4413      	add	r3, r2
 80234be:	3b23      	subs	r3, #35	; 0x23
 80234c0:	fa00 f203 	lsl.w	r2, r0, r3
 80234c4:	687b      	ldr	r3, [r7, #4]
 80234c6:	681b      	ldr	r3, [r3, #0]
 80234c8:	430a      	orrs	r2, r1
 80234ca:	631a      	str	r2, [r3, #48]	; 0x30
 80234cc:	e023      	b.n	8023516 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80234ce:	687b      	ldr	r3, [r7, #4]
 80234d0:	681b      	ldr	r3, [r3, #0]
 80234d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80234d4:	683b      	ldr	r3, [r7, #0]
 80234d6:	685a      	ldr	r2, [r3, #4]
 80234d8:	4613      	mov	r3, r2
 80234da:	009b      	lsls	r3, r3, #2
 80234dc:	4413      	add	r3, r2
 80234de:	3b41      	subs	r3, #65	; 0x41
 80234e0:	221f      	movs	r2, #31
 80234e2:	fa02 f303 	lsl.w	r3, r2, r3
 80234e6:	43da      	mvns	r2, r3
 80234e8:	687b      	ldr	r3, [r7, #4]
 80234ea:	681b      	ldr	r3, [r3, #0]
 80234ec:	400a      	ands	r2, r1
 80234ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80234f0:	687b      	ldr	r3, [r7, #4]
 80234f2:	681b      	ldr	r3, [r3, #0]
 80234f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80234f6:	683b      	ldr	r3, [r7, #0]
 80234f8:	681b      	ldr	r3, [r3, #0]
 80234fa:	b29b      	uxth	r3, r3
 80234fc:	4618      	mov	r0, r3
 80234fe:	683b      	ldr	r3, [r7, #0]
 8023500:	685a      	ldr	r2, [r3, #4]
 8023502:	4613      	mov	r3, r2
 8023504:	009b      	lsls	r3, r3, #2
 8023506:	4413      	add	r3, r2
 8023508:	3b41      	subs	r3, #65	; 0x41
 802350a:	fa00 f203 	lsl.w	r2, r0, r3
 802350e:	687b      	ldr	r3, [r7, #4]
 8023510:	681b      	ldr	r3, [r3, #0]
 8023512:	430a      	orrs	r2, r1
 8023514:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8023516:	4b22      	ldr	r3, [pc, #136]	; (80235a0 <HAL_ADC_ConfigChannel+0x234>)
 8023518:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	681b      	ldr	r3, [r3, #0]
 802351e:	4a21      	ldr	r2, [pc, #132]	; (80235a4 <HAL_ADC_ConfigChannel+0x238>)
 8023520:	4293      	cmp	r3, r2
 8023522:	d109      	bne.n	8023538 <HAL_ADC_ConfigChannel+0x1cc>
 8023524:	683b      	ldr	r3, [r7, #0]
 8023526:	681b      	ldr	r3, [r3, #0]
 8023528:	2b12      	cmp	r3, #18
 802352a:	d105      	bne.n	8023538 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 802352c:	68fb      	ldr	r3, [r7, #12]
 802352e:	685b      	ldr	r3, [r3, #4]
 8023530:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8023534:	68fb      	ldr	r3, [r7, #12]
 8023536:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8023538:	687b      	ldr	r3, [r7, #4]
 802353a:	681b      	ldr	r3, [r3, #0]
 802353c:	4a19      	ldr	r2, [pc, #100]	; (80235a4 <HAL_ADC_ConfigChannel+0x238>)
 802353e:	4293      	cmp	r3, r2
 8023540:	d123      	bne.n	802358a <HAL_ADC_ConfigChannel+0x21e>
 8023542:	683b      	ldr	r3, [r7, #0]
 8023544:	681b      	ldr	r3, [r3, #0]
 8023546:	2b10      	cmp	r3, #16
 8023548:	d003      	beq.n	8023552 <HAL_ADC_ConfigChannel+0x1e6>
 802354a:	683b      	ldr	r3, [r7, #0]
 802354c:	681b      	ldr	r3, [r3, #0]
 802354e:	2b11      	cmp	r3, #17
 8023550:	d11b      	bne.n	802358a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8023552:	68fb      	ldr	r3, [r7, #12]
 8023554:	685b      	ldr	r3, [r3, #4]
 8023556:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 802355a:	68fb      	ldr	r3, [r7, #12]
 802355c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 802355e:	683b      	ldr	r3, [r7, #0]
 8023560:	681b      	ldr	r3, [r3, #0]
 8023562:	2b10      	cmp	r3, #16
 8023564:	d111      	bne.n	802358a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8023566:	4b10      	ldr	r3, [pc, #64]	; (80235a8 <HAL_ADC_ConfigChannel+0x23c>)
 8023568:	681b      	ldr	r3, [r3, #0]
 802356a:	4a10      	ldr	r2, [pc, #64]	; (80235ac <HAL_ADC_ConfigChannel+0x240>)
 802356c:	fba2 2303 	umull	r2, r3, r2, r3
 8023570:	0c9a      	lsrs	r2, r3, #18
 8023572:	4613      	mov	r3, r2
 8023574:	009b      	lsls	r3, r3, #2
 8023576:	4413      	add	r3, r2
 8023578:	005b      	lsls	r3, r3, #1
 802357a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 802357c:	e002      	b.n	8023584 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 802357e:	68bb      	ldr	r3, [r7, #8]
 8023580:	3b01      	subs	r3, #1
 8023582:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8023584:	68bb      	ldr	r3, [r7, #8]
 8023586:	2b00      	cmp	r3, #0
 8023588:	d1f9      	bne.n	802357e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 802358a:	687b      	ldr	r3, [r7, #4]
 802358c:	2200      	movs	r2, #0
 802358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8023592:	2300      	movs	r3, #0
}
 8023594:	4618      	mov	r0, r3
 8023596:	3714      	adds	r7, #20
 8023598:	46bd      	mov	sp, r7
 802359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802359e:	4770      	bx	lr
 80235a0:	40012300 	.word	0x40012300
 80235a4:	40012000 	.word	0x40012000
 80235a8:	20000000 	.word	0x20000000
 80235ac:	431bde83 	.word	0x431bde83

080235b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80235b0:	b480      	push	{r7}
 80235b2:	b085      	sub	sp, #20
 80235b4:	af00      	add	r7, sp, #0
 80235b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80235b8:	4b79      	ldr	r3, [pc, #484]	; (80237a0 <ADC_Init+0x1f0>)
 80235ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80235bc:	68fb      	ldr	r3, [r7, #12]
 80235be:	685b      	ldr	r3, [r3, #4]
 80235c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80235c4:	68fb      	ldr	r3, [r7, #12]
 80235c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80235c8:	68fb      	ldr	r3, [r7, #12]
 80235ca:	685a      	ldr	r2, [r3, #4]
 80235cc:	687b      	ldr	r3, [r7, #4]
 80235ce:	685b      	ldr	r3, [r3, #4]
 80235d0:	431a      	orrs	r2, r3
 80235d2:	68fb      	ldr	r3, [r7, #12]
 80235d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80235d6:	687b      	ldr	r3, [r7, #4]
 80235d8:	681b      	ldr	r3, [r3, #0]
 80235da:	685a      	ldr	r2, [r3, #4]
 80235dc:	687b      	ldr	r3, [r7, #4]
 80235de:	681b      	ldr	r3, [r3, #0]
 80235e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80235e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80235e6:	687b      	ldr	r3, [r7, #4]
 80235e8:	681b      	ldr	r3, [r3, #0]
 80235ea:	6859      	ldr	r1, [r3, #4]
 80235ec:	687b      	ldr	r3, [r7, #4]
 80235ee:	691b      	ldr	r3, [r3, #16]
 80235f0:	021a      	lsls	r2, r3, #8
 80235f2:	687b      	ldr	r3, [r7, #4]
 80235f4:	681b      	ldr	r3, [r3, #0]
 80235f6:	430a      	orrs	r2, r1
 80235f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80235fa:	687b      	ldr	r3, [r7, #4]
 80235fc:	681b      	ldr	r3, [r3, #0]
 80235fe:	685a      	ldr	r2, [r3, #4]
 8023600:	687b      	ldr	r3, [r7, #4]
 8023602:	681b      	ldr	r3, [r3, #0]
 8023604:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8023608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 802360a:	687b      	ldr	r3, [r7, #4]
 802360c:	681b      	ldr	r3, [r3, #0]
 802360e:	6859      	ldr	r1, [r3, #4]
 8023610:	687b      	ldr	r3, [r7, #4]
 8023612:	689a      	ldr	r2, [r3, #8]
 8023614:	687b      	ldr	r3, [r7, #4]
 8023616:	681b      	ldr	r3, [r3, #0]
 8023618:	430a      	orrs	r2, r1
 802361a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 802361c:	687b      	ldr	r3, [r7, #4]
 802361e:	681b      	ldr	r3, [r3, #0]
 8023620:	689a      	ldr	r2, [r3, #8]
 8023622:	687b      	ldr	r3, [r7, #4]
 8023624:	681b      	ldr	r3, [r3, #0]
 8023626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802362a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 802362c:	687b      	ldr	r3, [r7, #4]
 802362e:	681b      	ldr	r3, [r3, #0]
 8023630:	6899      	ldr	r1, [r3, #8]
 8023632:	687b      	ldr	r3, [r7, #4]
 8023634:	68da      	ldr	r2, [r3, #12]
 8023636:	687b      	ldr	r3, [r7, #4]
 8023638:	681b      	ldr	r3, [r3, #0]
 802363a:	430a      	orrs	r2, r1
 802363c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 802363e:	687b      	ldr	r3, [r7, #4]
 8023640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023642:	4a58      	ldr	r2, [pc, #352]	; (80237a4 <ADC_Init+0x1f4>)
 8023644:	4293      	cmp	r3, r2
 8023646:	d022      	beq.n	802368e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8023648:	687b      	ldr	r3, [r7, #4]
 802364a:	681b      	ldr	r3, [r3, #0]
 802364c:	689a      	ldr	r2, [r3, #8]
 802364e:	687b      	ldr	r3, [r7, #4]
 8023650:	681b      	ldr	r3, [r3, #0]
 8023652:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8023656:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8023658:	687b      	ldr	r3, [r7, #4]
 802365a:	681b      	ldr	r3, [r3, #0]
 802365c:	6899      	ldr	r1, [r3, #8]
 802365e:	687b      	ldr	r3, [r7, #4]
 8023660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023662:	687b      	ldr	r3, [r7, #4]
 8023664:	681b      	ldr	r3, [r3, #0]
 8023666:	430a      	orrs	r2, r1
 8023668:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 802366a:	687b      	ldr	r3, [r7, #4]
 802366c:	681b      	ldr	r3, [r3, #0]
 802366e:	689a      	ldr	r2, [r3, #8]
 8023670:	687b      	ldr	r3, [r7, #4]
 8023672:	681b      	ldr	r3, [r3, #0]
 8023674:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8023678:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 802367a:	687b      	ldr	r3, [r7, #4]
 802367c:	681b      	ldr	r3, [r3, #0]
 802367e:	6899      	ldr	r1, [r3, #8]
 8023680:	687b      	ldr	r3, [r7, #4]
 8023682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023684:	687b      	ldr	r3, [r7, #4]
 8023686:	681b      	ldr	r3, [r3, #0]
 8023688:	430a      	orrs	r2, r1
 802368a:	609a      	str	r2, [r3, #8]
 802368c:	e00f      	b.n	80236ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 802368e:	687b      	ldr	r3, [r7, #4]
 8023690:	681b      	ldr	r3, [r3, #0]
 8023692:	689a      	ldr	r2, [r3, #8]
 8023694:	687b      	ldr	r3, [r7, #4]
 8023696:	681b      	ldr	r3, [r3, #0]
 8023698:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802369c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 802369e:	687b      	ldr	r3, [r7, #4]
 80236a0:	681b      	ldr	r3, [r3, #0]
 80236a2:	689a      	ldr	r2, [r3, #8]
 80236a4:	687b      	ldr	r3, [r7, #4]
 80236a6:	681b      	ldr	r3, [r3, #0]
 80236a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80236ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80236ae:	687b      	ldr	r3, [r7, #4]
 80236b0:	681b      	ldr	r3, [r3, #0]
 80236b2:	689a      	ldr	r2, [r3, #8]
 80236b4:	687b      	ldr	r3, [r7, #4]
 80236b6:	681b      	ldr	r3, [r3, #0]
 80236b8:	f022 0202 	bic.w	r2, r2, #2
 80236bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80236be:	687b      	ldr	r3, [r7, #4]
 80236c0:	681b      	ldr	r3, [r3, #0]
 80236c2:	6899      	ldr	r1, [r3, #8]
 80236c4:	687b      	ldr	r3, [r7, #4]
 80236c6:	7e1b      	ldrb	r3, [r3, #24]
 80236c8:	005a      	lsls	r2, r3, #1
 80236ca:	687b      	ldr	r3, [r7, #4]
 80236cc:	681b      	ldr	r3, [r3, #0]
 80236ce:	430a      	orrs	r2, r1
 80236d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80236d2:	687b      	ldr	r3, [r7, #4]
 80236d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80236d8:	2b00      	cmp	r3, #0
 80236da:	d01b      	beq.n	8023714 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80236dc:	687b      	ldr	r3, [r7, #4]
 80236de:	681b      	ldr	r3, [r3, #0]
 80236e0:	685a      	ldr	r2, [r3, #4]
 80236e2:	687b      	ldr	r3, [r7, #4]
 80236e4:	681b      	ldr	r3, [r3, #0]
 80236e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80236ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80236ec:	687b      	ldr	r3, [r7, #4]
 80236ee:	681b      	ldr	r3, [r3, #0]
 80236f0:	685a      	ldr	r2, [r3, #4]
 80236f2:	687b      	ldr	r3, [r7, #4]
 80236f4:	681b      	ldr	r3, [r3, #0]
 80236f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80236fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80236fc:	687b      	ldr	r3, [r7, #4]
 80236fe:	681b      	ldr	r3, [r3, #0]
 8023700:	6859      	ldr	r1, [r3, #4]
 8023702:	687b      	ldr	r3, [r7, #4]
 8023704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023706:	3b01      	subs	r3, #1
 8023708:	035a      	lsls	r2, r3, #13
 802370a:	687b      	ldr	r3, [r7, #4]
 802370c:	681b      	ldr	r3, [r3, #0]
 802370e:	430a      	orrs	r2, r1
 8023710:	605a      	str	r2, [r3, #4]
 8023712:	e007      	b.n	8023724 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8023714:	687b      	ldr	r3, [r7, #4]
 8023716:	681b      	ldr	r3, [r3, #0]
 8023718:	685a      	ldr	r2, [r3, #4]
 802371a:	687b      	ldr	r3, [r7, #4]
 802371c:	681b      	ldr	r3, [r3, #0]
 802371e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8023722:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8023724:	687b      	ldr	r3, [r7, #4]
 8023726:	681b      	ldr	r3, [r3, #0]
 8023728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802372a:	687b      	ldr	r3, [r7, #4]
 802372c:	681b      	ldr	r3, [r3, #0]
 802372e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8023732:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8023734:	687b      	ldr	r3, [r7, #4]
 8023736:	681b      	ldr	r3, [r3, #0]
 8023738:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802373a:	687b      	ldr	r3, [r7, #4]
 802373c:	69db      	ldr	r3, [r3, #28]
 802373e:	3b01      	subs	r3, #1
 8023740:	051a      	lsls	r2, r3, #20
 8023742:	687b      	ldr	r3, [r7, #4]
 8023744:	681b      	ldr	r3, [r3, #0]
 8023746:	430a      	orrs	r2, r1
 8023748:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 802374a:	687b      	ldr	r3, [r7, #4]
 802374c:	681b      	ldr	r3, [r3, #0]
 802374e:	689a      	ldr	r2, [r3, #8]
 8023750:	687b      	ldr	r3, [r7, #4]
 8023752:	681b      	ldr	r3, [r3, #0]
 8023754:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8023758:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 802375a:	687b      	ldr	r3, [r7, #4]
 802375c:	681b      	ldr	r3, [r3, #0]
 802375e:	6899      	ldr	r1, [r3, #8]
 8023760:	687b      	ldr	r3, [r7, #4]
 8023762:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8023766:	025a      	lsls	r2, r3, #9
 8023768:	687b      	ldr	r3, [r7, #4]
 802376a:	681b      	ldr	r3, [r3, #0]
 802376c:	430a      	orrs	r2, r1
 802376e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8023770:	687b      	ldr	r3, [r7, #4]
 8023772:	681b      	ldr	r3, [r3, #0]
 8023774:	689a      	ldr	r2, [r3, #8]
 8023776:	687b      	ldr	r3, [r7, #4]
 8023778:	681b      	ldr	r3, [r3, #0]
 802377a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802377e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8023780:	687b      	ldr	r3, [r7, #4]
 8023782:	681b      	ldr	r3, [r3, #0]
 8023784:	6899      	ldr	r1, [r3, #8]
 8023786:	687b      	ldr	r3, [r7, #4]
 8023788:	695b      	ldr	r3, [r3, #20]
 802378a:	029a      	lsls	r2, r3, #10
 802378c:	687b      	ldr	r3, [r7, #4]
 802378e:	681b      	ldr	r3, [r3, #0]
 8023790:	430a      	orrs	r2, r1
 8023792:	609a      	str	r2, [r3, #8]
}
 8023794:	bf00      	nop
 8023796:	3714      	adds	r7, #20
 8023798:	46bd      	mov	sp, r7
 802379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802379e:	4770      	bx	lr
 80237a0:	40012300 	.word	0x40012300
 80237a4:	0f000001 	.word	0x0f000001

080237a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80237a8:	b580      	push	{r7, lr}
 80237aa:	b084      	sub	sp, #16
 80237ac:	af00      	add	r7, sp, #0
 80237ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80237b0:	687b      	ldr	r3, [r7, #4]
 80237b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80237b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80237b6:	68fb      	ldr	r3, [r7, #12]
 80237b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80237ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80237be:	2b00      	cmp	r3, #0
 80237c0:	d13c      	bne.n	802383c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80237c2:	68fb      	ldr	r3, [r7, #12]
 80237c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80237c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80237ca:	68fb      	ldr	r3, [r7, #12]
 80237cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80237ce:	68fb      	ldr	r3, [r7, #12]
 80237d0:	681b      	ldr	r3, [r3, #0]
 80237d2:	689b      	ldr	r3, [r3, #8]
 80237d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80237d8:	2b00      	cmp	r3, #0
 80237da:	d12b      	bne.n	8023834 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80237dc:	68fb      	ldr	r3, [r7, #12]
 80237de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80237e0:	2b00      	cmp	r3, #0
 80237e2:	d127      	bne.n	8023834 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80237e4:	68fb      	ldr	r3, [r7, #12]
 80237e6:	681b      	ldr	r3, [r3, #0]
 80237e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80237ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	d006      	beq.n	8023800 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80237f2:	68fb      	ldr	r3, [r7, #12]
 80237f4:	681b      	ldr	r3, [r3, #0]
 80237f6:	689b      	ldr	r3, [r3, #8]
 80237f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80237fc:	2b00      	cmp	r3, #0
 80237fe:	d119      	bne.n	8023834 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8023800:	68fb      	ldr	r3, [r7, #12]
 8023802:	681b      	ldr	r3, [r3, #0]
 8023804:	685a      	ldr	r2, [r3, #4]
 8023806:	68fb      	ldr	r3, [r7, #12]
 8023808:	681b      	ldr	r3, [r3, #0]
 802380a:	f022 0220 	bic.w	r2, r2, #32
 802380e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8023810:	68fb      	ldr	r3, [r7, #12]
 8023812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023814:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8023818:	68fb      	ldr	r3, [r7, #12]
 802381a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 802381c:	68fb      	ldr	r3, [r7, #12]
 802381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8023824:	2b00      	cmp	r3, #0
 8023826:	d105      	bne.n	8023834 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8023828:	68fb      	ldr	r3, [r7, #12]
 802382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802382c:	f043 0201 	orr.w	r2, r3, #1
 8023830:	68fb      	ldr	r3, [r7, #12]
 8023832:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8023834:	68f8      	ldr	r0, [r7, #12]
 8023836:	f7ff fd7b 	bl	8023330 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 802383a:	e00e      	b.n	802385a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 802383c:	68fb      	ldr	r3, [r7, #12]
 802383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023840:	f003 0310 	and.w	r3, r3, #16
 8023844:	2b00      	cmp	r3, #0
 8023846:	d003      	beq.n	8023850 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8023848:	68f8      	ldr	r0, [r7, #12]
 802384a:	f7ff fd85 	bl	8023358 <HAL_ADC_ErrorCallback>
}
 802384e:	e004      	b.n	802385a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8023850:	68fb      	ldr	r3, [r7, #12]
 8023852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023856:	6878      	ldr	r0, [r7, #4]
 8023858:	4798      	blx	r3
}
 802385a:	bf00      	nop
 802385c:	3710      	adds	r7, #16
 802385e:	46bd      	mov	sp, r7
 8023860:	bd80      	pop	{r7, pc}

08023862 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8023862:	b580      	push	{r7, lr}
 8023864:	b084      	sub	sp, #16
 8023866:	af00      	add	r7, sp, #0
 8023868:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802386a:	687b      	ldr	r3, [r7, #4]
 802386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802386e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8023870:	68f8      	ldr	r0, [r7, #12]
 8023872:	f7ff fd67 	bl	8023344 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8023876:	bf00      	nop
 8023878:	3710      	adds	r7, #16
 802387a:	46bd      	mov	sp, r7
 802387c:	bd80      	pop	{r7, pc}

0802387e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 802387e:	b580      	push	{r7, lr}
 8023880:	b084      	sub	sp, #16
 8023882:	af00      	add	r7, sp, #0
 8023884:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8023886:	687b      	ldr	r3, [r7, #4]
 8023888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802388a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 802388c:	68fb      	ldr	r3, [r7, #12]
 802388e:	2240      	movs	r2, #64	; 0x40
 8023890:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8023892:	68fb      	ldr	r3, [r7, #12]
 8023894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023896:	f043 0204 	orr.w	r2, r3, #4
 802389a:	68fb      	ldr	r3, [r7, #12]
 802389c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 802389e:	68f8      	ldr	r0, [r7, #12]
 80238a0:	f7ff fd5a 	bl	8023358 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80238a4:	bf00      	nop
 80238a6:	3710      	adds	r7, #16
 80238a8:	46bd      	mov	sp, r7
 80238aa:	bd80      	pop	{r7, pc}

080238ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80238ac:	b480      	push	{r7}
 80238ae:	b085      	sub	sp, #20
 80238b0:	af00      	add	r7, sp, #0
 80238b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80238b4:	687b      	ldr	r3, [r7, #4]
 80238b6:	f003 0307 	and.w	r3, r3, #7
 80238ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80238bc:	4b0c      	ldr	r3, [pc, #48]	; (80238f0 <__NVIC_SetPriorityGrouping+0x44>)
 80238be:	68db      	ldr	r3, [r3, #12]
 80238c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80238c2:	68ba      	ldr	r2, [r7, #8]
 80238c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80238c8:	4013      	ands	r3, r2
 80238ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80238cc:	68fb      	ldr	r3, [r7, #12]
 80238ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80238d0:	68bb      	ldr	r3, [r7, #8]
 80238d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80238d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80238d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80238dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80238de:	4a04      	ldr	r2, [pc, #16]	; (80238f0 <__NVIC_SetPriorityGrouping+0x44>)
 80238e0:	68bb      	ldr	r3, [r7, #8]
 80238e2:	60d3      	str	r3, [r2, #12]
}
 80238e4:	bf00      	nop
 80238e6:	3714      	adds	r7, #20
 80238e8:	46bd      	mov	sp, r7
 80238ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238ee:	4770      	bx	lr
 80238f0:	e000ed00 	.word	0xe000ed00

080238f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80238f4:	b480      	push	{r7}
 80238f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80238f8:	4b04      	ldr	r3, [pc, #16]	; (802390c <__NVIC_GetPriorityGrouping+0x18>)
 80238fa:	68db      	ldr	r3, [r3, #12]
 80238fc:	0a1b      	lsrs	r3, r3, #8
 80238fe:	f003 0307 	and.w	r3, r3, #7
}
 8023902:	4618      	mov	r0, r3
 8023904:	46bd      	mov	sp, r7
 8023906:	f85d 7b04 	ldr.w	r7, [sp], #4
 802390a:	4770      	bx	lr
 802390c:	e000ed00 	.word	0xe000ed00

08023910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023910:	b480      	push	{r7}
 8023912:	b083      	sub	sp, #12
 8023914:	af00      	add	r7, sp, #0
 8023916:	4603      	mov	r3, r0
 8023918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802391e:	2b00      	cmp	r3, #0
 8023920:	db0b      	blt.n	802393a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8023922:	79fb      	ldrb	r3, [r7, #7]
 8023924:	f003 021f 	and.w	r2, r3, #31
 8023928:	4907      	ldr	r1, [pc, #28]	; (8023948 <__NVIC_EnableIRQ+0x38>)
 802392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802392e:	095b      	lsrs	r3, r3, #5
 8023930:	2001      	movs	r0, #1
 8023932:	fa00 f202 	lsl.w	r2, r0, r2
 8023936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 802393a:	bf00      	nop
 802393c:	370c      	adds	r7, #12
 802393e:	46bd      	mov	sp, r7
 8023940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023944:	4770      	bx	lr
 8023946:	bf00      	nop
 8023948:	e000e100 	.word	0xe000e100

0802394c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802394c:	b480      	push	{r7}
 802394e:	b083      	sub	sp, #12
 8023950:	af00      	add	r7, sp, #0
 8023952:	4603      	mov	r3, r0
 8023954:	6039      	str	r1, [r7, #0]
 8023956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8023958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802395c:	2b00      	cmp	r3, #0
 802395e:	db0a      	blt.n	8023976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023960:	683b      	ldr	r3, [r7, #0]
 8023962:	b2da      	uxtb	r2, r3
 8023964:	490c      	ldr	r1, [pc, #48]	; (8023998 <__NVIC_SetPriority+0x4c>)
 8023966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802396a:	0112      	lsls	r2, r2, #4
 802396c:	b2d2      	uxtb	r2, r2
 802396e:	440b      	add	r3, r1
 8023970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8023974:	e00a      	b.n	802398c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023976:	683b      	ldr	r3, [r7, #0]
 8023978:	b2da      	uxtb	r2, r3
 802397a:	4908      	ldr	r1, [pc, #32]	; (802399c <__NVIC_SetPriority+0x50>)
 802397c:	79fb      	ldrb	r3, [r7, #7]
 802397e:	f003 030f 	and.w	r3, r3, #15
 8023982:	3b04      	subs	r3, #4
 8023984:	0112      	lsls	r2, r2, #4
 8023986:	b2d2      	uxtb	r2, r2
 8023988:	440b      	add	r3, r1
 802398a:	761a      	strb	r2, [r3, #24]
}
 802398c:	bf00      	nop
 802398e:	370c      	adds	r7, #12
 8023990:	46bd      	mov	sp, r7
 8023992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023996:	4770      	bx	lr
 8023998:	e000e100 	.word	0xe000e100
 802399c:	e000ed00 	.word	0xe000ed00

080239a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80239a0:	b480      	push	{r7}
 80239a2:	b089      	sub	sp, #36	; 0x24
 80239a4:	af00      	add	r7, sp, #0
 80239a6:	60f8      	str	r0, [r7, #12]
 80239a8:	60b9      	str	r1, [r7, #8]
 80239aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80239ac:	68fb      	ldr	r3, [r7, #12]
 80239ae:	f003 0307 	and.w	r3, r3, #7
 80239b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80239b4:	69fb      	ldr	r3, [r7, #28]
 80239b6:	f1c3 0307 	rsb	r3, r3, #7
 80239ba:	2b04      	cmp	r3, #4
 80239bc:	bf28      	it	cs
 80239be:	2304      	movcs	r3, #4
 80239c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80239c2:	69fb      	ldr	r3, [r7, #28]
 80239c4:	3304      	adds	r3, #4
 80239c6:	2b06      	cmp	r3, #6
 80239c8:	d902      	bls.n	80239d0 <NVIC_EncodePriority+0x30>
 80239ca:	69fb      	ldr	r3, [r7, #28]
 80239cc:	3b03      	subs	r3, #3
 80239ce:	e000      	b.n	80239d2 <NVIC_EncodePriority+0x32>
 80239d0:	2300      	movs	r3, #0
 80239d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80239d4:	f04f 32ff 	mov.w	r2, #4294967295
 80239d8:	69bb      	ldr	r3, [r7, #24]
 80239da:	fa02 f303 	lsl.w	r3, r2, r3
 80239de:	43da      	mvns	r2, r3
 80239e0:	68bb      	ldr	r3, [r7, #8]
 80239e2:	401a      	ands	r2, r3
 80239e4:	697b      	ldr	r3, [r7, #20]
 80239e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80239e8:	f04f 31ff 	mov.w	r1, #4294967295
 80239ec:	697b      	ldr	r3, [r7, #20]
 80239ee:	fa01 f303 	lsl.w	r3, r1, r3
 80239f2:	43d9      	mvns	r1, r3
 80239f4:	687b      	ldr	r3, [r7, #4]
 80239f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80239f8:	4313      	orrs	r3, r2
         );
}
 80239fa:	4618      	mov	r0, r3
 80239fc:	3724      	adds	r7, #36	; 0x24
 80239fe:	46bd      	mov	sp, r7
 8023a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a04:	4770      	bx	lr
	...

08023a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8023a08:	b580      	push	{r7, lr}
 8023a0a:	b082      	sub	sp, #8
 8023a0c:	af00      	add	r7, sp, #0
 8023a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8023a10:	687b      	ldr	r3, [r7, #4]
 8023a12:	3b01      	subs	r3, #1
 8023a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8023a18:	d301      	bcc.n	8023a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8023a1a:	2301      	movs	r3, #1
 8023a1c:	e00f      	b.n	8023a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8023a1e:	4a0a      	ldr	r2, [pc, #40]	; (8023a48 <SysTick_Config+0x40>)
 8023a20:	687b      	ldr	r3, [r7, #4]
 8023a22:	3b01      	subs	r3, #1
 8023a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8023a26:	210f      	movs	r1, #15
 8023a28:	f04f 30ff 	mov.w	r0, #4294967295
 8023a2c:	f7ff ff8e 	bl	802394c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8023a30:	4b05      	ldr	r3, [pc, #20]	; (8023a48 <SysTick_Config+0x40>)
 8023a32:	2200      	movs	r2, #0
 8023a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8023a36:	4b04      	ldr	r3, [pc, #16]	; (8023a48 <SysTick_Config+0x40>)
 8023a38:	2207      	movs	r2, #7
 8023a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8023a3c:	2300      	movs	r3, #0
}
 8023a3e:	4618      	mov	r0, r3
 8023a40:	3708      	adds	r7, #8
 8023a42:	46bd      	mov	sp, r7
 8023a44:	bd80      	pop	{r7, pc}
 8023a46:	bf00      	nop
 8023a48:	e000e010 	.word	0xe000e010

08023a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8023a4c:	b580      	push	{r7, lr}
 8023a4e:	b082      	sub	sp, #8
 8023a50:	af00      	add	r7, sp, #0
 8023a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8023a54:	6878      	ldr	r0, [r7, #4]
 8023a56:	f7ff ff29 	bl	80238ac <__NVIC_SetPriorityGrouping>
}
 8023a5a:	bf00      	nop
 8023a5c:	3708      	adds	r7, #8
 8023a5e:	46bd      	mov	sp, r7
 8023a60:	bd80      	pop	{r7, pc}

08023a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8023a62:	b580      	push	{r7, lr}
 8023a64:	b086      	sub	sp, #24
 8023a66:	af00      	add	r7, sp, #0
 8023a68:	4603      	mov	r3, r0
 8023a6a:	60b9      	str	r1, [r7, #8]
 8023a6c:	607a      	str	r2, [r7, #4]
 8023a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8023a70:	2300      	movs	r3, #0
 8023a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8023a74:	f7ff ff3e 	bl	80238f4 <__NVIC_GetPriorityGrouping>
 8023a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8023a7a:	687a      	ldr	r2, [r7, #4]
 8023a7c:	68b9      	ldr	r1, [r7, #8]
 8023a7e:	6978      	ldr	r0, [r7, #20]
 8023a80:	f7ff ff8e 	bl	80239a0 <NVIC_EncodePriority>
 8023a84:	4602      	mov	r2, r0
 8023a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8023a8a:	4611      	mov	r1, r2
 8023a8c:	4618      	mov	r0, r3
 8023a8e:	f7ff ff5d 	bl	802394c <__NVIC_SetPriority>
}
 8023a92:	bf00      	nop
 8023a94:	3718      	adds	r7, #24
 8023a96:	46bd      	mov	sp, r7
 8023a98:	bd80      	pop	{r7, pc}

08023a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023a9a:	b580      	push	{r7, lr}
 8023a9c:	b082      	sub	sp, #8
 8023a9e:	af00      	add	r7, sp, #0
 8023aa0:	4603      	mov	r3, r0
 8023aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8023aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023aa8:	4618      	mov	r0, r3
 8023aaa:	f7ff ff31 	bl	8023910 <__NVIC_EnableIRQ>
}
 8023aae:	bf00      	nop
 8023ab0:	3708      	adds	r7, #8
 8023ab2:	46bd      	mov	sp, r7
 8023ab4:	bd80      	pop	{r7, pc}

08023ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8023ab6:	b580      	push	{r7, lr}
 8023ab8:	b082      	sub	sp, #8
 8023aba:	af00      	add	r7, sp, #0
 8023abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8023abe:	6878      	ldr	r0, [r7, #4]
 8023ac0:	f7ff ffa2 	bl	8023a08 <SysTick_Config>
 8023ac4:	4603      	mov	r3, r0
}
 8023ac6:	4618      	mov	r0, r3
 8023ac8:	3708      	adds	r7, #8
 8023aca:	46bd      	mov	sp, r7
 8023acc:	bd80      	pop	{r7, pc}
	...

08023ad0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8023ad0:	b580      	push	{r7, lr}
 8023ad2:	b086      	sub	sp, #24
 8023ad4:	af00      	add	r7, sp, #0
 8023ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8023ad8:	2300      	movs	r3, #0
 8023ada:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8023adc:	f7ff fac4 	bl	8023068 <HAL_GetTick>
 8023ae0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8023ae2:	687b      	ldr	r3, [r7, #4]
 8023ae4:	2b00      	cmp	r3, #0
 8023ae6:	d101      	bne.n	8023aec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8023ae8:	2301      	movs	r3, #1
 8023aea:	e099      	b.n	8023c20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8023aec:	687b      	ldr	r3, [r7, #4]
 8023aee:	2200      	movs	r2, #0
 8023af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8023af4:	687b      	ldr	r3, [r7, #4]
 8023af6:	2202      	movs	r2, #2
 8023af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8023afc:	687b      	ldr	r3, [r7, #4]
 8023afe:	681b      	ldr	r3, [r3, #0]
 8023b00:	681a      	ldr	r2, [r3, #0]
 8023b02:	687b      	ldr	r3, [r7, #4]
 8023b04:	681b      	ldr	r3, [r3, #0]
 8023b06:	f022 0201 	bic.w	r2, r2, #1
 8023b0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023b0c:	e00f      	b.n	8023b2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023b0e:	f7ff faab 	bl	8023068 <HAL_GetTick>
 8023b12:	4602      	mov	r2, r0
 8023b14:	693b      	ldr	r3, [r7, #16]
 8023b16:	1ad3      	subs	r3, r2, r3
 8023b18:	2b05      	cmp	r3, #5
 8023b1a:	d908      	bls.n	8023b2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8023b1c:	687b      	ldr	r3, [r7, #4]
 8023b1e:	2220      	movs	r2, #32
 8023b20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8023b22:	687b      	ldr	r3, [r7, #4]
 8023b24:	2203      	movs	r2, #3
 8023b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8023b2a:	2303      	movs	r3, #3
 8023b2c:	e078      	b.n	8023c20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023b2e:	687b      	ldr	r3, [r7, #4]
 8023b30:	681b      	ldr	r3, [r3, #0]
 8023b32:	681b      	ldr	r3, [r3, #0]
 8023b34:	f003 0301 	and.w	r3, r3, #1
 8023b38:	2b00      	cmp	r3, #0
 8023b3a:	d1e8      	bne.n	8023b0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8023b3c:	687b      	ldr	r3, [r7, #4]
 8023b3e:	681b      	ldr	r3, [r3, #0]
 8023b40:	681b      	ldr	r3, [r3, #0]
 8023b42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8023b44:	697a      	ldr	r2, [r7, #20]
 8023b46:	4b38      	ldr	r3, [pc, #224]	; (8023c28 <HAL_DMA_Init+0x158>)
 8023b48:	4013      	ands	r3, r2
 8023b4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023b4c:	687b      	ldr	r3, [r7, #4]
 8023b4e:	685a      	ldr	r2, [r3, #4]
 8023b50:	687b      	ldr	r3, [r7, #4]
 8023b52:	689b      	ldr	r3, [r3, #8]
 8023b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8023b56:	687b      	ldr	r3, [r7, #4]
 8023b58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8023b5c:	687b      	ldr	r3, [r7, #4]
 8023b5e:	691b      	ldr	r3, [r3, #16]
 8023b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8023b62:	687b      	ldr	r3, [r7, #4]
 8023b64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8023b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8023b68:	687b      	ldr	r3, [r7, #4]
 8023b6a:	699b      	ldr	r3, [r3, #24]
 8023b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8023b6e:	687b      	ldr	r3, [r7, #4]
 8023b70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8023b72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8023b74:	687b      	ldr	r3, [r7, #4]
 8023b76:	6a1b      	ldr	r3, [r3, #32]
 8023b78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023b7a:	697a      	ldr	r2, [r7, #20]
 8023b7c:	4313      	orrs	r3, r2
 8023b7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8023b80:	687b      	ldr	r3, [r7, #4]
 8023b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b84:	2b04      	cmp	r3, #4
 8023b86:	d107      	bne.n	8023b98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8023b88:	687b      	ldr	r3, [r7, #4]
 8023b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023b8c:	687b      	ldr	r3, [r7, #4]
 8023b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023b90:	4313      	orrs	r3, r2
 8023b92:	697a      	ldr	r2, [r7, #20]
 8023b94:	4313      	orrs	r3, r2
 8023b96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8023b98:	687b      	ldr	r3, [r7, #4]
 8023b9a:	681b      	ldr	r3, [r3, #0]
 8023b9c:	697a      	ldr	r2, [r7, #20]
 8023b9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8023ba0:	687b      	ldr	r3, [r7, #4]
 8023ba2:	681b      	ldr	r3, [r3, #0]
 8023ba4:	695b      	ldr	r3, [r3, #20]
 8023ba6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8023ba8:	697b      	ldr	r3, [r7, #20]
 8023baa:	f023 0307 	bic.w	r3, r3, #7
 8023bae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8023bb0:	687b      	ldr	r3, [r7, #4]
 8023bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023bb4:	697a      	ldr	r2, [r7, #20]
 8023bb6:	4313      	orrs	r3, r2
 8023bb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8023bba:	687b      	ldr	r3, [r7, #4]
 8023bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023bbe:	2b04      	cmp	r3, #4
 8023bc0:	d117      	bne.n	8023bf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8023bc2:	687b      	ldr	r3, [r7, #4]
 8023bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023bc6:	697a      	ldr	r2, [r7, #20]
 8023bc8:	4313      	orrs	r3, r2
 8023bca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8023bcc:	687b      	ldr	r3, [r7, #4]
 8023bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023bd0:	2b00      	cmp	r3, #0
 8023bd2:	d00e      	beq.n	8023bf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8023bd4:	6878      	ldr	r0, [r7, #4]
 8023bd6:	f000 fa6f 	bl	80240b8 <DMA_CheckFifoParam>
 8023bda:	4603      	mov	r3, r0
 8023bdc:	2b00      	cmp	r3, #0
 8023bde:	d008      	beq.n	8023bf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8023be0:	687b      	ldr	r3, [r7, #4]
 8023be2:	2240      	movs	r2, #64	; 0x40
 8023be4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8023be6:	687b      	ldr	r3, [r7, #4]
 8023be8:	2201      	movs	r2, #1
 8023bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8023bee:	2301      	movs	r3, #1
 8023bf0:	e016      	b.n	8023c20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8023bf2:	687b      	ldr	r3, [r7, #4]
 8023bf4:	681b      	ldr	r3, [r3, #0]
 8023bf6:	697a      	ldr	r2, [r7, #20]
 8023bf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8023bfa:	6878      	ldr	r0, [r7, #4]
 8023bfc:	f000 fa26 	bl	802404c <DMA_CalcBaseAndBitshift>
 8023c00:	4603      	mov	r3, r0
 8023c02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023c04:	687b      	ldr	r3, [r7, #4]
 8023c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023c08:	223f      	movs	r2, #63	; 0x3f
 8023c0a:	409a      	lsls	r2, r3
 8023c0c:	68fb      	ldr	r3, [r7, #12]
 8023c0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023c10:	687b      	ldr	r3, [r7, #4]
 8023c12:	2200      	movs	r2, #0
 8023c14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8023c16:	687b      	ldr	r3, [r7, #4]
 8023c18:	2201      	movs	r2, #1
 8023c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8023c1e:	2300      	movs	r3, #0
}
 8023c20:	4618      	mov	r0, r3
 8023c22:	3718      	adds	r7, #24
 8023c24:	46bd      	mov	sp, r7
 8023c26:	bd80      	pop	{r7, pc}
 8023c28:	f010803f 	.word	0xf010803f

08023c2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8023c2c:	b580      	push	{r7, lr}
 8023c2e:	b086      	sub	sp, #24
 8023c30:	af00      	add	r7, sp, #0
 8023c32:	60f8      	str	r0, [r7, #12]
 8023c34:	60b9      	str	r1, [r7, #8]
 8023c36:	607a      	str	r2, [r7, #4]
 8023c38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8023c3a:	2300      	movs	r3, #0
 8023c3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8023c3e:	68fb      	ldr	r3, [r7, #12]
 8023c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023c42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8023c44:	68fb      	ldr	r3, [r7, #12]
 8023c46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8023c4a:	2b01      	cmp	r3, #1
 8023c4c:	d101      	bne.n	8023c52 <HAL_DMA_Start_IT+0x26>
 8023c4e:	2302      	movs	r3, #2
 8023c50:	e040      	b.n	8023cd4 <HAL_DMA_Start_IT+0xa8>
 8023c52:	68fb      	ldr	r3, [r7, #12]
 8023c54:	2201      	movs	r2, #1
 8023c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8023c5a:	68fb      	ldr	r3, [r7, #12]
 8023c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023c60:	b2db      	uxtb	r3, r3
 8023c62:	2b01      	cmp	r3, #1
 8023c64:	d12f      	bne.n	8023cc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8023c66:	68fb      	ldr	r3, [r7, #12]
 8023c68:	2202      	movs	r2, #2
 8023c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023c6e:	68fb      	ldr	r3, [r7, #12]
 8023c70:	2200      	movs	r2, #0
 8023c72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8023c74:	683b      	ldr	r3, [r7, #0]
 8023c76:	687a      	ldr	r2, [r7, #4]
 8023c78:	68b9      	ldr	r1, [r7, #8]
 8023c7a:	68f8      	ldr	r0, [r7, #12]
 8023c7c:	f000 f9b8 	bl	8023ff0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023c80:	68fb      	ldr	r3, [r7, #12]
 8023c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023c84:	223f      	movs	r2, #63	; 0x3f
 8023c86:	409a      	lsls	r2, r3
 8023c88:	693b      	ldr	r3, [r7, #16]
 8023c8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8023c8c:	68fb      	ldr	r3, [r7, #12]
 8023c8e:	681b      	ldr	r3, [r3, #0]
 8023c90:	681a      	ldr	r2, [r3, #0]
 8023c92:	68fb      	ldr	r3, [r7, #12]
 8023c94:	681b      	ldr	r3, [r3, #0]
 8023c96:	f042 0216 	orr.w	r2, r2, #22
 8023c9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8023c9c:	68fb      	ldr	r3, [r7, #12]
 8023c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023ca0:	2b00      	cmp	r3, #0
 8023ca2:	d007      	beq.n	8023cb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8023ca4:	68fb      	ldr	r3, [r7, #12]
 8023ca6:	681b      	ldr	r3, [r3, #0]
 8023ca8:	681a      	ldr	r2, [r3, #0]
 8023caa:	68fb      	ldr	r3, [r7, #12]
 8023cac:	681b      	ldr	r3, [r3, #0]
 8023cae:	f042 0208 	orr.w	r2, r2, #8
 8023cb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8023cb4:	68fb      	ldr	r3, [r7, #12]
 8023cb6:	681b      	ldr	r3, [r3, #0]
 8023cb8:	681a      	ldr	r2, [r3, #0]
 8023cba:	68fb      	ldr	r3, [r7, #12]
 8023cbc:	681b      	ldr	r3, [r3, #0]
 8023cbe:	f042 0201 	orr.w	r2, r2, #1
 8023cc2:	601a      	str	r2, [r3, #0]
 8023cc4:	e005      	b.n	8023cd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8023cc6:	68fb      	ldr	r3, [r7, #12]
 8023cc8:	2200      	movs	r2, #0
 8023cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8023cce:	2302      	movs	r3, #2
 8023cd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8023cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8023cd4:	4618      	mov	r0, r3
 8023cd6:	3718      	adds	r7, #24
 8023cd8:	46bd      	mov	sp, r7
 8023cda:	bd80      	pop	{r7, pc}

08023cdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8023cdc:	b580      	push	{r7, lr}
 8023cde:	b086      	sub	sp, #24
 8023ce0:	af00      	add	r7, sp, #0
 8023ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8023ce4:	2300      	movs	r3, #0
 8023ce6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8023ce8:	4b92      	ldr	r3, [pc, #584]	; (8023f34 <HAL_DMA_IRQHandler+0x258>)
 8023cea:	681b      	ldr	r3, [r3, #0]
 8023cec:	4a92      	ldr	r2, [pc, #584]	; (8023f38 <HAL_DMA_IRQHandler+0x25c>)
 8023cee:	fba2 2303 	umull	r2, r3, r2, r3
 8023cf2:	0a9b      	lsrs	r3, r3, #10
 8023cf4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8023cf6:	687b      	ldr	r3, [r7, #4]
 8023cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023cfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8023cfc:	693b      	ldr	r3, [r7, #16]
 8023cfe:	681b      	ldr	r3, [r3, #0]
 8023d00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8023d02:	687b      	ldr	r3, [r7, #4]
 8023d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023d06:	2208      	movs	r2, #8
 8023d08:	409a      	lsls	r2, r3
 8023d0a:	68fb      	ldr	r3, [r7, #12]
 8023d0c:	4013      	ands	r3, r2
 8023d0e:	2b00      	cmp	r3, #0
 8023d10:	d01a      	beq.n	8023d48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8023d12:	687b      	ldr	r3, [r7, #4]
 8023d14:	681b      	ldr	r3, [r3, #0]
 8023d16:	681b      	ldr	r3, [r3, #0]
 8023d18:	f003 0304 	and.w	r3, r3, #4
 8023d1c:	2b00      	cmp	r3, #0
 8023d1e:	d013      	beq.n	8023d48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8023d20:	687b      	ldr	r3, [r7, #4]
 8023d22:	681b      	ldr	r3, [r3, #0]
 8023d24:	681a      	ldr	r2, [r3, #0]
 8023d26:	687b      	ldr	r3, [r7, #4]
 8023d28:	681b      	ldr	r3, [r3, #0]
 8023d2a:	f022 0204 	bic.w	r2, r2, #4
 8023d2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8023d30:	687b      	ldr	r3, [r7, #4]
 8023d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023d34:	2208      	movs	r2, #8
 8023d36:	409a      	lsls	r2, r3
 8023d38:	693b      	ldr	r3, [r7, #16]
 8023d3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8023d3c:	687b      	ldr	r3, [r7, #4]
 8023d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023d40:	f043 0201 	orr.w	r2, r3, #1
 8023d44:	687b      	ldr	r3, [r7, #4]
 8023d46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8023d48:	687b      	ldr	r3, [r7, #4]
 8023d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023d4c:	2201      	movs	r2, #1
 8023d4e:	409a      	lsls	r2, r3
 8023d50:	68fb      	ldr	r3, [r7, #12]
 8023d52:	4013      	ands	r3, r2
 8023d54:	2b00      	cmp	r3, #0
 8023d56:	d012      	beq.n	8023d7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8023d58:	687b      	ldr	r3, [r7, #4]
 8023d5a:	681b      	ldr	r3, [r3, #0]
 8023d5c:	695b      	ldr	r3, [r3, #20]
 8023d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023d62:	2b00      	cmp	r3, #0
 8023d64:	d00b      	beq.n	8023d7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8023d66:	687b      	ldr	r3, [r7, #4]
 8023d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023d6a:	2201      	movs	r2, #1
 8023d6c:	409a      	lsls	r2, r3
 8023d6e:	693b      	ldr	r3, [r7, #16]
 8023d70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8023d72:	687b      	ldr	r3, [r7, #4]
 8023d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023d76:	f043 0202 	orr.w	r2, r3, #2
 8023d7a:	687b      	ldr	r3, [r7, #4]
 8023d7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8023d7e:	687b      	ldr	r3, [r7, #4]
 8023d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023d82:	2204      	movs	r2, #4
 8023d84:	409a      	lsls	r2, r3
 8023d86:	68fb      	ldr	r3, [r7, #12]
 8023d88:	4013      	ands	r3, r2
 8023d8a:	2b00      	cmp	r3, #0
 8023d8c:	d012      	beq.n	8023db4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8023d8e:	687b      	ldr	r3, [r7, #4]
 8023d90:	681b      	ldr	r3, [r3, #0]
 8023d92:	681b      	ldr	r3, [r3, #0]
 8023d94:	f003 0302 	and.w	r3, r3, #2
 8023d98:	2b00      	cmp	r3, #0
 8023d9a:	d00b      	beq.n	8023db4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8023d9c:	687b      	ldr	r3, [r7, #4]
 8023d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023da0:	2204      	movs	r2, #4
 8023da2:	409a      	lsls	r2, r3
 8023da4:	693b      	ldr	r3, [r7, #16]
 8023da6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8023da8:	687b      	ldr	r3, [r7, #4]
 8023daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023dac:	f043 0204 	orr.w	r2, r3, #4
 8023db0:	687b      	ldr	r3, [r7, #4]
 8023db2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8023db4:	687b      	ldr	r3, [r7, #4]
 8023db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023db8:	2210      	movs	r2, #16
 8023dba:	409a      	lsls	r2, r3
 8023dbc:	68fb      	ldr	r3, [r7, #12]
 8023dbe:	4013      	ands	r3, r2
 8023dc0:	2b00      	cmp	r3, #0
 8023dc2:	d043      	beq.n	8023e4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8023dc4:	687b      	ldr	r3, [r7, #4]
 8023dc6:	681b      	ldr	r3, [r3, #0]
 8023dc8:	681b      	ldr	r3, [r3, #0]
 8023dca:	f003 0308 	and.w	r3, r3, #8
 8023dce:	2b00      	cmp	r3, #0
 8023dd0:	d03c      	beq.n	8023e4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8023dd2:	687b      	ldr	r3, [r7, #4]
 8023dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023dd6:	2210      	movs	r2, #16
 8023dd8:	409a      	lsls	r2, r3
 8023dda:	693b      	ldr	r3, [r7, #16]
 8023ddc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8023dde:	687b      	ldr	r3, [r7, #4]
 8023de0:	681b      	ldr	r3, [r3, #0]
 8023de2:	681b      	ldr	r3, [r3, #0]
 8023de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023de8:	2b00      	cmp	r3, #0
 8023dea:	d018      	beq.n	8023e1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8023dec:	687b      	ldr	r3, [r7, #4]
 8023dee:	681b      	ldr	r3, [r3, #0]
 8023df0:	681b      	ldr	r3, [r3, #0]
 8023df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8023df6:	2b00      	cmp	r3, #0
 8023df8:	d108      	bne.n	8023e0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8023dfa:	687b      	ldr	r3, [r7, #4]
 8023dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023dfe:	2b00      	cmp	r3, #0
 8023e00:	d024      	beq.n	8023e4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8023e02:	687b      	ldr	r3, [r7, #4]
 8023e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023e06:	6878      	ldr	r0, [r7, #4]
 8023e08:	4798      	blx	r3
 8023e0a:	e01f      	b.n	8023e4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8023e0c:	687b      	ldr	r3, [r7, #4]
 8023e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023e10:	2b00      	cmp	r3, #0
 8023e12:	d01b      	beq.n	8023e4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8023e14:	687b      	ldr	r3, [r7, #4]
 8023e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023e18:	6878      	ldr	r0, [r7, #4]
 8023e1a:	4798      	blx	r3
 8023e1c:	e016      	b.n	8023e4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8023e1e:	687b      	ldr	r3, [r7, #4]
 8023e20:	681b      	ldr	r3, [r3, #0]
 8023e22:	681b      	ldr	r3, [r3, #0]
 8023e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023e28:	2b00      	cmp	r3, #0
 8023e2a:	d107      	bne.n	8023e3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8023e2c:	687b      	ldr	r3, [r7, #4]
 8023e2e:	681b      	ldr	r3, [r3, #0]
 8023e30:	681a      	ldr	r2, [r3, #0]
 8023e32:	687b      	ldr	r3, [r7, #4]
 8023e34:	681b      	ldr	r3, [r3, #0]
 8023e36:	f022 0208 	bic.w	r2, r2, #8
 8023e3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8023e3c:	687b      	ldr	r3, [r7, #4]
 8023e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023e40:	2b00      	cmp	r3, #0
 8023e42:	d003      	beq.n	8023e4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8023e44:	687b      	ldr	r3, [r7, #4]
 8023e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023e48:	6878      	ldr	r0, [r7, #4]
 8023e4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8023e4c:	687b      	ldr	r3, [r7, #4]
 8023e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023e50:	2220      	movs	r2, #32
 8023e52:	409a      	lsls	r2, r3
 8023e54:	68fb      	ldr	r3, [r7, #12]
 8023e56:	4013      	ands	r3, r2
 8023e58:	2b00      	cmp	r3, #0
 8023e5a:	f000 808e 	beq.w	8023f7a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8023e5e:	687b      	ldr	r3, [r7, #4]
 8023e60:	681b      	ldr	r3, [r3, #0]
 8023e62:	681b      	ldr	r3, [r3, #0]
 8023e64:	f003 0310 	and.w	r3, r3, #16
 8023e68:	2b00      	cmp	r3, #0
 8023e6a:	f000 8086 	beq.w	8023f7a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8023e6e:	687b      	ldr	r3, [r7, #4]
 8023e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023e72:	2220      	movs	r2, #32
 8023e74:	409a      	lsls	r2, r3
 8023e76:	693b      	ldr	r3, [r7, #16]
 8023e78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8023e7a:	687b      	ldr	r3, [r7, #4]
 8023e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023e80:	b2db      	uxtb	r3, r3
 8023e82:	2b05      	cmp	r3, #5
 8023e84:	d136      	bne.n	8023ef4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8023e86:	687b      	ldr	r3, [r7, #4]
 8023e88:	681b      	ldr	r3, [r3, #0]
 8023e8a:	681a      	ldr	r2, [r3, #0]
 8023e8c:	687b      	ldr	r3, [r7, #4]
 8023e8e:	681b      	ldr	r3, [r3, #0]
 8023e90:	f022 0216 	bic.w	r2, r2, #22
 8023e94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8023e96:	687b      	ldr	r3, [r7, #4]
 8023e98:	681b      	ldr	r3, [r3, #0]
 8023e9a:	695a      	ldr	r2, [r3, #20]
 8023e9c:	687b      	ldr	r3, [r7, #4]
 8023e9e:	681b      	ldr	r3, [r3, #0]
 8023ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8023ea4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8023ea6:	687b      	ldr	r3, [r7, #4]
 8023ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023eaa:	2b00      	cmp	r3, #0
 8023eac:	d103      	bne.n	8023eb6 <HAL_DMA_IRQHandler+0x1da>
 8023eae:	687b      	ldr	r3, [r7, #4]
 8023eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023eb2:	2b00      	cmp	r3, #0
 8023eb4:	d007      	beq.n	8023ec6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8023eb6:	687b      	ldr	r3, [r7, #4]
 8023eb8:	681b      	ldr	r3, [r3, #0]
 8023eba:	681a      	ldr	r2, [r3, #0]
 8023ebc:	687b      	ldr	r3, [r7, #4]
 8023ebe:	681b      	ldr	r3, [r3, #0]
 8023ec0:	f022 0208 	bic.w	r2, r2, #8
 8023ec4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023ec6:	687b      	ldr	r3, [r7, #4]
 8023ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023eca:	223f      	movs	r2, #63	; 0x3f
 8023ecc:	409a      	lsls	r2, r3
 8023ece:	693b      	ldr	r3, [r7, #16]
 8023ed0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8023ed2:	687b      	ldr	r3, [r7, #4]
 8023ed4:	2200      	movs	r2, #0
 8023ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8023eda:	687b      	ldr	r3, [r7, #4]
 8023edc:	2201      	movs	r2, #1
 8023ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8023ee2:	687b      	ldr	r3, [r7, #4]
 8023ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023ee6:	2b00      	cmp	r3, #0
 8023ee8:	d07d      	beq.n	8023fe6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8023eea:	687b      	ldr	r3, [r7, #4]
 8023eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023eee:	6878      	ldr	r0, [r7, #4]
 8023ef0:	4798      	blx	r3
        }
        return;
 8023ef2:	e078      	b.n	8023fe6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8023ef4:	687b      	ldr	r3, [r7, #4]
 8023ef6:	681b      	ldr	r3, [r3, #0]
 8023ef8:	681b      	ldr	r3, [r3, #0]
 8023efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023efe:	2b00      	cmp	r3, #0
 8023f00:	d01c      	beq.n	8023f3c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8023f02:	687b      	ldr	r3, [r7, #4]
 8023f04:	681b      	ldr	r3, [r3, #0]
 8023f06:	681b      	ldr	r3, [r3, #0]
 8023f08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8023f0c:	2b00      	cmp	r3, #0
 8023f0e:	d108      	bne.n	8023f22 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8023f10:	687b      	ldr	r3, [r7, #4]
 8023f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023f14:	2b00      	cmp	r3, #0
 8023f16:	d030      	beq.n	8023f7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8023f18:	687b      	ldr	r3, [r7, #4]
 8023f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023f1c:	6878      	ldr	r0, [r7, #4]
 8023f1e:	4798      	blx	r3
 8023f20:	e02b      	b.n	8023f7a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8023f22:	687b      	ldr	r3, [r7, #4]
 8023f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023f26:	2b00      	cmp	r3, #0
 8023f28:	d027      	beq.n	8023f7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8023f2a:	687b      	ldr	r3, [r7, #4]
 8023f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023f2e:	6878      	ldr	r0, [r7, #4]
 8023f30:	4798      	blx	r3
 8023f32:	e022      	b.n	8023f7a <HAL_DMA_IRQHandler+0x29e>
 8023f34:	20000000 	.word	0x20000000
 8023f38:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8023f3c:	687b      	ldr	r3, [r7, #4]
 8023f3e:	681b      	ldr	r3, [r3, #0]
 8023f40:	681b      	ldr	r3, [r3, #0]
 8023f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023f46:	2b00      	cmp	r3, #0
 8023f48:	d10f      	bne.n	8023f6a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8023f4a:	687b      	ldr	r3, [r7, #4]
 8023f4c:	681b      	ldr	r3, [r3, #0]
 8023f4e:	681a      	ldr	r2, [r3, #0]
 8023f50:	687b      	ldr	r3, [r7, #4]
 8023f52:	681b      	ldr	r3, [r3, #0]
 8023f54:	f022 0210 	bic.w	r2, r2, #16
 8023f58:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8023f5a:	687b      	ldr	r3, [r7, #4]
 8023f5c:	2200      	movs	r2, #0
 8023f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8023f62:	687b      	ldr	r3, [r7, #4]
 8023f64:	2201      	movs	r2, #1
 8023f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8023f6a:	687b      	ldr	r3, [r7, #4]
 8023f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023f6e:	2b00      	cmp	r3, #0
 8023f70:	d003      	beq.n	8023f7a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8023f72:	687b      	ldr	r3, [r7, #4]
 8023f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023f76:	6878      	ldr	r0, [r7, #4]
 8023f78:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8023f7a:	687b      	ldr	r3, [r7, #4]
 8023f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023f7e:	2b00      	cmp	r3, #0
 8023f80:	d032      	beq.n	8023fe8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8023f82:	687b      	ldr	r3, [r7, #4]
 8023f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023f86:	f003 0301 	and.w	r3, r3, #1
 8023f8a:	2b00      	cmp	r3, #0
 8023f8c:	d022      	beq.n	8023fd4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8023f8e:	687b      	ldr	r3, [r7, #4]
 8023f90:	2205      	movs	r2, #5
 8023f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8023f96:	687b      	ldr	r3, [r7, #4]
 8023f98:	681b      	ldr	r3, [r3, #0]
 8023f9a:	681a      	ldr	r2, [r3, #0]
 8023f9c:	687b      	ldr	r3, [r7, #4]
 8023f9e:	681b      	ldr	r3, [r3, #0]
 8023fa0:	f022 0201 	bic.w	r2, r2, #1
 8023fa4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8023fa6:	68bb      	ldr	r3, [r7, #8]
 8023fa8:	3301      	adds	r3, #1
 8023faa:	60bb      	str	r3, [r7, #8]
 8023fac:	697a      	ldr	r2, [r7, #20]
 8023fae:	429a      	cmp	r2, r3
 8023fb0:	d307      	bcc.n	8023fc2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8023fb2:	687b      	ldr	r3, [r7, #4]
 8023fb4:	681b      	ldr	r3, [r3, #0]
 8023fb6:	681b      	ldr	r3, [r3, #0]
 8023fb8:	f003 0301 	and.w	r3, r3, #1
 8023fbc:	2b00      	cmp	r3, #0
 8023fbe:	d1f2      	bne.n	8023fa6 <HAL_DMA_IRQHandler+0x2ca>
 8023fc0:	e000      	b.n	8023fc4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8023fc2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8023fc4:	687b      	ldr	r3, [r7, #4]
 8023fc6:	2200      	movs	r2, #0
 8023fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8023fcc:	687b      	ldr	r3, [r7, #4]
 8023fce:	2201      	movs	r2, #1
 8023fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8023fd4:	687b      	ldr	r3, [r7, #4]
 8023fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023fd8:	2b00      	cmp	r3, #0
 8023fda:	d005      	beq.n	8023fe8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8023fdc:	687b      	ldr	r3, [r7, #4]
 8023fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023fe0:	6878      	ldr	r0, [r7, #4]
 8023fe2:	4798      	blx	r3
 8023fe4:	e000      	b.n	8023fe8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8023fe6:	bf00      	nop
    }
  }
}
 8023fe8:	3718      	adds	r7, #24
 8023fea:	46bd      	mov	sp, r7
 8023fec:	bd80      	pop	{r7, pc}
 8023fee:	bf00      	nop

08023ff0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8023ff0:	b480      	push	{r7}
 8023ff2:	b085      	sub	sp, #20
 8023ff4:	af00      	add	r7, sp, #0
 8023ff6:	60f8      	str	r0, [r7, #12]
 8023ff8:	60b9      	str	r1, [r7, #8]
 8023ffa:	607a      	str	r2, [r7, #4]
 8023ffc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8023ffe:	68fb      	ldr	r3, [r7, #12]
 8024000:	681b      	ldr	r3, [r3, #0]
 8024002:	681a      	ldr	r2, [r3, #0]
 8024004:	68fb      	ldr	r3, [r7, #12]
 8024006:	681b      	ldr	r3, [r3, #0]
 8024008:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802400c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 802400e:	68fb      	ldr	r3, [r7, #12]
 8024010:	681b      	ldr	r3, [r3, #0]
 8024012:	683a      	ldr	r2, [r7, #0]
 8024014:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8024016:	68fb      	ldr	r3, [r7, #12]
 8024018:	689b      	ldr	r3, [r3, #8]
 802401a:	2b40      	cmp	r3, #64	; 0x40
 802401c:	d108      	bne.n	8024030 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 802401e:	68fb      	ldr	r3, [r7, #12]
 8024020:	681b      	ldr	r3, [r3, #0]
 8024022:	687a      	ldr	r2, [r7, #4]
 8024024:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8024026:	68fb      	ldr	r3, [r7, #12]
 8024028:	681b      	ldr	r3, [r3, #0]
 802402a:	68ba      	ldr	r2, [r7, #8]
 802402c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 802402e:	e007      	b.n	8024040 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8024030:	68fb      	ldr	r3, [r7, #12]
 8024032:	681b      	ldr	r3, [r3, #0]
 8024034:	68ba      	ldr	r2, [r7, #8]
 8024036:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8024038:	68fb      	ldr	r3, [r7, #12]
 802403a:	681b      	ldr	r3, [r3, #0]
 802403c:	687a      	ldr	r2, [r7, #4]
 802403e:	60da      	str	r2, [r3, #12]
}
 8024040:	bf00      	nop
 8024042:	3714      	adds	r7, #20
 8024044:	46bd      	mov	sp, r7
 8024046:	f85d 7b04 	ldr.w	r7, [sp], #4
 802404a:	4770      	bx	lr

0802404c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802404c:	b480      	push	{r7}
 802404e:	b085      	sub	sp, #20
 8024050:	af00      	add	r7, sp, #0
 8024052:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8024054:	687b      	ldr	r3, [r7, #4]
 8024056:	681b      	ldr	r3, [r3, #0]
 8024058:	b2db      	uxtb	r3, r3
 802405a:	3b10      	subs	r3, #16
 802405c:	4a14      	ldr	r2, [pc, #80]	; (80240b0 <DMA_CalcBaseAndBitshift+0x64>)
 802405e:	fba2 2303 	umull	r2, r3, r2, r3
 8024062:	091b      	lsrs	r3, r3, #4
 8024064:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8024066:	4a13      	ldr	r2, [pc, #76]	; (80240b4 <DMA_CalcBaseAndBitshift+0x68>)
 8024068:	68fb      	ldr	r3, [r7, #12]
 802406a:	4413      	add	r3, r2
 802406c:	781b      	ldrb	r3, [r3, #0]
 802406e:	461a      	mov	r2, r3
 8024070:	687b      	ldr	r3, [r7, #4]
 8024072:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8024074:	68fb      	ldr	r3, [r7, #12]
 8024076:	2b03      	cmp	r3, #3
 8024078:	d909      	bls.n	802408e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802407a:	687b      	ldr	r3, [r7, #4]
 802407c:	681b      	ldr	r3, [r3, #0]
 802407e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8024082:	f023 0303 	bic.w	r3, r3, #3
 8024086:	1d1a      	adds	r2, r3, #4
 8024088:	687b      	ldr	r3, [r7, #4]
 802408a:	659a      	str	r2, [r3, #88]	; 0x58
 802408c:	e007      	b.n	802409e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 802408e:	687b      	ldr	r3, [r7, #4]
 8024090:	681b      	ldr	r3, [r3, #0]
 8024092:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8024096:	f023 0303 	bic.w	r3, r3, #3
 802409a:	687a      	ldr	r2, [r7, #4]
 802409c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 802409e:	687b      	ldr	r3, [r7, #4]
 80240a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80240a2:	4618      	mov	r0, r3
 80240a4:	3714      	adds	r7, #20
 80240a6:	46bd      	mov	sp, r7
 80240a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240ac:	4770      	bx	lr
 80240ae:	bf00      	nop
 80240b0:	aaaaaaab 	.word	0xaaaaaaab
 80240b4:	080285d0 	.word	0x080285d0

080240b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80240b8:	b480      	push	{r7}
 80240ba:	b085      	sub	sp, #20
 80240bc:	af00      	add	r7, sp, #0
 80240be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80240c0:	2300      	movs	r3, #0
 80240c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80240c4:	687b      	ldr	r3, [r7, #4]
 80240c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80240c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80240ca:	687b      	ldr	r3, [r7, #4]
 80240cc:	699b      	ldr	r3, [r3, #24]
 80240ce:	2b00      	cmp	r3, #0
 80240d0:	d11f      	bne.n	8024112 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80240d2:	68bb      	ldr	r3, [r7, #8]
 80240d4:	2b03      	cmp	r3, #3
 80240d6:	d855      	bhi.n	8024184 <DMA_CheckFifoParam+0xcc>
 80240d8:	a201      	add	r2, pc, #4	; (adr r2, 80240e0 <DMA_CheckFifoParam+0x28>)
 80240da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80240de:	bf00      	nop
 80240e0:	080240f1 	.word	0x080240f1
 80240e4:	08024103 	.word	0x08024103
 80240e8:	080240f1 	.word	0x080240f1
 80240ec:	08024185 	.word	0x08024185
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80240f0:	687b      	ldr	r3, [r7, #4]
 80240f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80240f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80240f8:	2b00      	cmp	r3, #0
 80240fa:	d045      	beq.n	8024188 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80240fc:	2301      	movs	r3, #1
 80240fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8024100:	e042      	b.n	8024188 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8024102:	687b      	ldr	r3, [r7, #4]
 8024104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024106:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802410a:	d13f      	bne.n	802418c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 802410c:	2301      	movs	r3, #1
 802410e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8024110:	e03c      	b.n	802418c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8024112:	687b      	ldr	r3, [r7, #4]
 8024114:	699b      	ldr	r3, [r3, #24]
 8024116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802411a:	d121      	bne.n	8024160 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 802411c:	68bb      	ldr	r3, [r7, #8]
 802411e:	2b03      	cmp	r3, #3
 8024120:	d836      	bhi.n	8024190 <DMA_CheckFifoParam+0xd8>
 8024122:	a201      	add	r2, pc, #4	; (adr r2, 8024128 <DMA_CheckFifoParam+0x70>)
 8024124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024128:	08024139 	.word	0x08024139
 802412c:	0802413f 	.word	0x0802413f
 8024130:	08024139 	.word	0x08024139
 8024134:	08024151 	.word	0x08024151
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8024138:	2301      	movs	r3, #1
 802413a:	73fb      	strb	r3, [r7, #15]
      break;
 802413c:	e02f      	b.n	802419e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802413e:	687b      	ldr	r3, [r7, #4]
 8024140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024142:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024146:	2b00      	cmp	r3, #0
 8024148:	d024      	beq.n	8024194 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 802414a:	2301      	movs	r3, #1
 802414c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802414e:	e021      	b.n	8024194 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8024150:	687b      	ldr	r3, [r7, #4]
 8024152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024154:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8024158:	d11e      	bne.n	8024198 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 802415a:	2301      	movs	r3, #1
 802415c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 802415e:	e01b      	b.n	8024198 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8024160:	68bb      	ldr	r3, [r7, #8]
 8024162:	2b02      	cmp	r3, #2
 8024164:	d902      	bls.n	802416c <DMA_CheckFifoParam+0xb4>
 8024166:	2b03      	cmp	r3, #3
 8024168:	d003      	beq.n	8024172 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 802416a:	e018      	b.n	802419e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 802416c:	2301      	movs	r3, #1
 802416e:	73fb      	strb	r3, [r7, #15]
      break;
 8024170:	e015      	b.n	802419e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8024172:	687b      	ldr	r3, [r7, #4]
 8024174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802417a:	2b00      	cmp	r3, #0
 802417c:	d00e      	beq.n	802419c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 802417e:	2301      	movs	r3, #1
 8024180:	73fb      	strb	r3, [r7, #15]
      break;
 8024182:	e00b      	b.n	802419c <DMA_CheckFifoParam+0xe4>
      break;
 8024184:	bf00      	nop
 8024186:	e00a      	b.n	802419e <DMA_CheckFifoParam+0xe6>
      break;
 8024188:	bf00      	nop
 802418a:	e008      	b.n	802419e <DMA_CheckFifoParam+0xe6>
      break;
 802418c:	bf00      	nop
 802418e:	e006      	b.n	802419e <DMA_CheckFifoParam+0xe6>
      break;
 8024190:	bf00      	nop
 8024192:	e004      	b.n	802419e <DMA_CheckFifoParam+0xe6>
      break;
 8024194:	bf00      	nop
 8024196:	e002      	b.n	802419e <DMA_CheckFifoParam+0xe6>
      break;   
 8024198:	bf00      	nop
 802419a:	e000      	b.n	802419e <DMA_CheckFifoParam+0xe6>
      break;
 802419c:	bf00      	nop
    }
  } 
  
  return status; 
 802419e:	7bfb      	ldrb	r3, [r7, #15]
}
 80241a0:	4618      	mov	r0, r3
 80241a2:	3714      	adds	r7, #20
 80241a4:	46bd      	mov	sp, r7
 80241a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241aa:	4770      	bx	lr

080241ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80241ac:	b480      	push	{r7}
 80241ae:	b089      	sub	sp, #36	; 0x24
 80241b0:	af00      	add	r7, sp, #0
 80241b2:	6078      	str	r0, [r7, #4]
 80241b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80241b6:	2300      	movs	r3, #0
 80241b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80241ba:	2300      	movs	r3, #0
 80241bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80241be:	2300      	movs	r3, #0
 80241c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80241c2:	2300      	movs	r3, #0
 80241c4:	61fb      	str	r3, [r7, #28]
 80241c6:	e16b      	b.n	80244a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80241c8:	2201      	movs	r2, #1
 80241ca:	69fb      	ldr	r3, [r7, #28]
 80241cc:	fa02 f303 	lsl.w	r3, r2, r3
 80241d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80241d2:	683b      	ldr	r3, [r7, #0]
 80241d4:	681b      	ldr	r3, [r3, #0]
 80241d6:	697a      	ldr	r2, [r7, #20]
 80241d8:	4013      	ands	r3, r2
 80241da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80241dc:	693a      	ldr	r2, [r7, #16]
 80241de:	697b      	ldr	r3, [r7, #20]
 80241e0:	429a      	cmp	r2, r3
 80241e2:	f040 815a 	bne.w	802449a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80241e6:	683b      	ldr	r3, [r7, #0]
 80241e8:	685b      	ldr	r3, [r3, #4]
 80241ea:	2b01      	cmp	r3, #1
 80241ec:	d00b      	beq.n	8024206 <HAL_GPIO_Init+0x5a>
 80241ee:	683b      	ldr	r3, [r7, #0]
 80241f0:	685b      	ldr	r3, [r3, #4]
 80241f2:	2b02      	cmp	r3, #2
 80241f4:	d007      	beq.n	8024206 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80241f6:	683b      	ldr	r3, [r7, #0]
 80241f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80241fa:	2b11      	cmp	r3, #17
 80241fc:	d003      	beq.n	8024206 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80241fe:	683b      	ldr	r3, [r7, #0]
 8024200:	685b      	ldr	r3, [r3, #4]
 8024202:	2b12      	cmp	r3, #18
 8024204:	d130      	bne.n	8024268 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8024206:	687b      	ldr	r3, [r7, #4]
 8024208:	689b      	ldr	r3, [r3, #8]
 802420a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802420c:	69fb      	ldr	r3, [r7, #28]
 802420e:	005b      	lsls	r3, r3, #1
 8024210:	2203      	movs	r2, #3
 8024212:	fa02 f303 	lsl.w	r3, r2, r3
 8024216:	43db      	mvns	r3, r3
 8024218:	69ba      	ldr	r2, [r7, #24]
 802421a:	4013      	ands	r3, r2
 802421c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802421e:	683b      	ldr	r3, [r7, #0]
 8024220:	68da      	ldr	r2, [r3, #12]
 8024222:	69fb      	ldr	r3, [r7, #28]
 8024224:	005b      	lsls	r3, r3, #1
 8024226:	fa02 f303 	lsl.w	r3, r2, r3
 802422a:	69ba      	ldr	r2, [r7, #24]
 802422c:	4313      	orrs	r3, r2
 802422e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8024230:	687b      	ldr	r3, [r7, #4]
 8024232:	69ba      	ldr	r2, [r7, #24]
 8024234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8024236:	687b      	ldr	r3, [r7, #4]
 8024238:	685b      	ldr	r3, [r3, #4]
 802423a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802423c:	2201      	movs	r2, #1
 802423e:	69fb      	ldr	r3, [r7, #28]
 8024240:	fa02 f303 	lsl.w	r3, r2, r3
 8024244:	43db      	mvns	r3, r3
 8024246:	69ba      	ldr	r2, [r7, #24]
 8024248:	4013      	ands	r3, r2
 802424a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 802424c:	683b      	ldr	r3, [r7, #0]
 802424e:	685b      	ldr	r3, [r3, #4]
 8024250:	091b      	lsrs	r3, r3, #4
 8024252:	f003 0201 	and.w	r2, r3, #1
 8024256:	69fb      	ldr	r3, [r7, #28]
 8024258:	fa02 f303 	lsl.w	r3, r2, r3
 802425c:	69ba      	ldr	r2, [r7, #24]
 802425e:	4313      	orrs	r3, r2
 8024260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8024262:	687b      	ldr	r3, [r7, #4]
 8024264:	69ba      	ldr	r2, [r7, #24]
 8024266:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8024268:	687b      	ldr	r3, [r7, #4]
 802426a:	68db      	ldr	r3, [r3, #12]
 802426c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802426e:	69fb      	ldr	r3, [r7, #28]
 8024270:	005b      	lsls	r3, r3, #1
 8024272:	2203      	movs	r2, #3
 8024274:	fa02 f303 	lsl.w	r3, r2, r3
 8024278:	43db      	mvns	r3, r3
 802427a:	69ba      	ldr	r2, [r7, #24]
 802427c:	4013      	ands	r3, r2
 802427e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8024280:	683b      	ldr	r3, [r7, #0]
 8024282:	689a      	ldr	r2, [r3, #8]
 8024284:	69fb      	ldr	r3, [r7, #28]
 8024286:	005b      	lsls	r3, r3, #1
 8024288:	fa02 f303 	lsl.w	r3, r2, r3
 802428c:	69ba      	ldr	r2, [r7, #24]
 802428e:	4313      	orrs	r3, r2
 8024290:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8024292:	687b      	ldr	r3, [r7, #4]
 8024294:	69ba      	ldr	r2, [r7, #24]
 8024296:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8024298:	683b      	ldr	r3, [r7, #0]
 802429a:	685b      	ldr	r3, [r3, #4]
 802429c:	2b02      	cmp	r3, #2
 802429e:	d003      	beq.n	80242a8 <HAL_GPIO_Init+0xfc>
 80242a0:	683b      	ldr	r3, [r7, #0]
 80242a2:	685b      	ldr	r3, [r3, #4]
 80242a4:	2b12      	cmp	r3, #18
 80242a6:	d123      	bne.n	80242f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80242a8:	69fb      	ldr	r3, [r7, #28]
 80242aa:	08da      	lsrs	r2, r3, #3
 80242ac:	687b      	ldr	r3, [r7, #4]
 80242ae:	3208      	adds	r2, #8
 80242b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80242b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80242b6:	69fb      	ldr	r3, [r7, #28]
 80242b8:	f003 0307 	and.w	r3, r3, #7
 80242bc:	009b      	lsls	r3, r3, #2
 80242be:	220f      	movs	r2, #15
 80242c0:	fa02 f303 	lsl.w	r3, r2, r3
 80242c4:	43db      	mvns	r3, r3
 80242c6:	69ba      	ldr	r2, [r7, #24]
 80242c8:	4013      	ands	r3, r2
 80242ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80242cc:	683b      	ldr	r3, [r7, #0]
 80242ce:	691a      	ldr	r2, [r3, #16]
 80242d0:	69fb      	ldr	r3, [r7, #28]
 80242d2:	f003 0307 	and.w	r3, r3, #7
 80242d6:	009b      	lsls	r3, r3, #2
 80242d8:	fa02 f303 	lsl.w	r3, r2, r3
 80242dc:	69ba      	ldr	r2, [r7, #24]
 80242de:	4313      	orrs	r3, r2
 80242e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80242e2:	69fb      	ldr	r3, [r7, #28]
 80242e4:	08da      	lsrs	r2, r3, #3
 80242e6:	687b      	ldr	r3, [r7, #4]
 80242e8:	3208      	adds	r2, #8
 80242ea:	69b9      	ldr	r1, [r7, #24]
 80242ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80242f0:	687b      	ldr	r3, [r7, #4]
 80242f2:	681b      	ldr	r3, [r3, #0]
 80242f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80242f6:	69fb      	ldr	r3, [r7, #28]
 80242f8:	005b      	lsls	r3, r3, #1
 80242fa:	2203      	movs	r2, #3
 80242fc:	fa02 f303 	lsl.w	r3, r2, r3
 8024300:	43db      	mvns	r3, r3
 8024302:	69ba      	ldr	r2, [r7, #24]
 8024304:	4013      	ands	r3, r2
 8024306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8024308:	683b      	ldr	r3, [r7, #0]
 802430a:	685b      	ldr	r3, [r3, #4]
 802430c:	f003 0203 	and.w	r2, r3, #3
 8024310:	69fb      	ldr	r3, [r7, #28]
 8024312:	005b      	lsls	r3, r3, #1
 8024314:	fa02 f303 	lsl.w	r3, r2, r3
 8024318:	69ba      	ldr	r2, [r7, #24]
 802431a:	4313      	orrs	r3, r2
 802431c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802431e:	687b      	ldr	r3, [r7, #4]
 8024320:	69ba      	ldr	r2, [r7, #24]
 8024322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8024324:	683b      	ldr	r3, [r7, #0]
 8024326:	685b      	ldr	r3, [r3, #4]
 8024328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802432c:	2b00      	cmp	r3, #0
 802432e:	f000 80b4 	beq.w	802449a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8024332:	2300      	movs	r3, #0
 8024334:	60fb      	str	r3, [r7, #12]
 8024336:	4b5f      	ldr	r3, [pc, #380]	; (80244b4 <HAL_GPIO_Init+0x308>)
 8024338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802433a:	4a5e      	ldr	r2, [pc, #376]	; (80244b4 <HAL_GPIO_Init+0x308>)
 802433c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024340:	6453      	str	r3, [r2, #68]	; 0x44
 8024342:	4b5c      	ldr	r3, [pc, #368]	; (80244b4 <HAL_GPIO_Init+0x308>)
 8024344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802434a:	60fb      	str	r3, [r7, #12]
 802434c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802434e:	4a5a      	ldr	r2, [pc, #360]	; (80244b8 <HAL_GPIO_Init+0x30c>)
 8024350:	69fb      	ldr	r3, [r7, #28]
 8024352:	089b      	lsrs	r3, r3, #2
 8024354:	3302      	adds	r3, #2
 8024356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802435a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802435c:	69fb      	ldr	r3, [r7, #28]
 802435e:	f003 0303 	and.w	r3, r3, #3
 8024362:	009b      	lsls	r3, r3, #2
 8024364:	220f      	movs	r2, #15
 8024366:	fa02 f303 	lsl.w	r3, r2, r3
 802436a:	43db      	mvns	r3, r3
 802436c:	69ba      	ldr	r2, [r7, #24]
 802436e:	4013      	ands	r3, r2
 8024370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8024372:	687b      	ldr	r3, [r7, #4]
 8024374:	4a51      	ldr	r2, [pc, #324]	; (80244bc <HAL_GPIO_Init+0x310>)
 8024376:	4293      	cmp	r3, r2
 8024378:	d02b      	beq.n	80243d2 <HAL_GPIO_Init+0x226>
 802437a:	687b      	ldr	r3, [r7, #4]
 802437c:	4a50      	ldr	r2, [pc, #320]	; (80244c0 <HAL_GPIO_Init+0x314>)
 802437e:	4293      	cmp	r3, r2
 8024380:	d025      	beq.n	80243ce <HAL_GPIO_Init+0x222>
 8024382:	687b      	ldr	r3, [r7, #4]
 8024384:	4a4f      	ldr	r2, [pc, #316]	; (80244c4 <HAL_GPIO_Init+0x318>)
 8024386:	4293      	cmp	r3, r2
 8024388:	d01f      	beq.n	80243ca <HAL_GPIO_Init+0x21e>
 802438a:	687b      	ldr	r3, [r7, #4]
 802438c:	4a4e      	ldr	r2, [pc, #312]	; (80244c8 <HAL_GPIO_Init+0x31c>)
 802438e:	4293      	cmp	r3, r2
 8024390:	d019      	beq.n	80243c6 <HAL_GPIO_Init+0x21a>
 8024392:	687b      	ldr	r3, [r7, #4]
 8024394:	4a4d      	ldr	r2, [pc, #308]	; (80244cc <HAL_GPIO_Init+0x320>)
 8024396:	4293      	cmp	r3, r2
 8024398:	d013      	beq.n	80243c2 <HAL_GPIO_Init+0x216>
 802439a:	687b      	ldr	r3, [r7, #4]
 802439c:	4a4c      	ldr	r2, [pc, #304]	; (80244d0 <HAL_GPIO_Init+0x324>)
 802439e:	4293      	cmp	r3, r2
 80243a0:	d00d      	beq.n	80243be <HAL_GPIO_Init+0x212>
 80243a2:	687b      	ldr	r3, [r7, #4]
 80243a4:	4a4b      	ldr	r2, [pc, #300]	; (80244d4 <HAL_GPIO_Init+0x328>)
 80243a6:	4293      	cmp	r3, r2
 80243a8:	d007      	beq.n	80243ba <HAL_GPIO_Init+0x20e>
 80243aa:	687b      	ldr	r3, [r7, #4]
 80243ac:	4a4a      	ldr	r2, [pc, #296]	; (80244d8 <HAL_GPIO_Init+0x32c>)
 80243ae:	4293      	cmp	r3, r2
 80243b0:	d101      	bne.n	80243b6 <HAL_GPIO_Init+0x20a>
 80243b2:	2307      	movs	r3, #7
 80243b4:	e00e      	b.n	80243d4 <HAL_GPIO_Init+0x228>
 80243b6:	2308      	movs	r3, #8
 80243b8:	e00c      	b.n	80243d4 <HAL_GPIO_Init+0x228>
 80243ba:	2306      	movs	r3, #6
 80243bc:	e00a      	b.n	80243d4 <HAL_GPIO_Init+0x228>
 80243be:	2305      	movs	r3, #5
 80243c0:	e008      	b.n	80243d4 <HAL_GPIO_Init+0x228>
 80243c2:	2304      	movs	r3, #4
 80243c4:	e006      	b.n	80243d4 <HAL_GPIO_Init+0x228>
 80243c6:	2303      	movs	r3, #3
 80243c8:	e004      	b.n	80243d4 <HAL_GPIO_Init+0x228>
 80243ca:	2302      	movs	r3, #2
 80243cc:	e002      	b.n	80243d4 <HAL_GPIO_Init+0x228>
 80243ce:	2301      	movs	r3, #1
 80243d0:	e000      	b.n	80243d4 <HAL_GPIO_Init+0x228>
 80243d2:	2300      	movs	r3, #0
 80243d4:	69fa      	ldr	r2, [r7, #28]
 80243d6:	f002 0203 	and.w	r2, r2, #3
 80243da:	0092      	lsls	r2, r2, #2
 80243dc:	4093      	lsls	r3, r2
 80243de:	69ba      	ldr	r2, [r7, #24]
 80243e0:	4313      	orrs	r3, r2
 80243e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80243e4:	4934      	ldr	r1, [pc, #208]	; (80244b8 <HAL_GPIO_Init+0x30c>)
 80243e6:	69fb      	ldr	r3, [r7, #28]
 80243e8:	089b      	lsrs	r3, r3, #2
 80243ea:	3302      	adds	r3, #2
 80243ec:	69ba      	ldr	r2, [r7, #24]
 80243ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80243f2:	4b3a      	ldr	r3, [pc, #232]	; (80244dc <HAL_GPIO_Init+0x330>)
 80243f4:	681b      	ldr	r3, [r3, #0]
 80243f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80243f8:	693b      	ldr	r3, [r7, #16]
 80243fa:	43db      	mvns	r3, r3
 80243fc:	69ba      	ldr	r2, [r7, #24]
 80243fe:	4013      	ands	r3, r2
 8024400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8024402:	683b      	ldr	r3, [r7, #0]
 8024404:	685b      	ldr	r3, [r3, #4]
 8024406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802440a:	2b00      	cmp	r3, #0
 802440c:	d003      	beq.n	8024416 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 802440e:	69ba      	ldr	r2, [r7, #24]
 8024410:	693b      	ldr	r3, [r7, #16]
 8024412:	4313      	orrs	r3, r2
 8024414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8024416:	4a31      	ldr	r2, [pc, #196]	; (80244dc <HAL_GPIO_Init+0x330>)
 8024418:	69bb      	ldr	r3, [r7, #24]
 802441a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 802441c:	4b2f      	ldr	r3, [pc, #188]	; (80244dc <HAL_GPIO_Init+0x330>)
 802441e:	685b      	ldr	r3, [r3, #4]
 8024420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024422:	693b      	ldr	r3, [r7, #16]
 8024424:	43db      	mvns	r3, r3
 8024426:	69ba      	ldr	r2, [r7, #24]
 8024428:	4013      	ands	r3, r2
 802442a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 802442c:	683b      	ldr	r3, [r7, #0]
 802442e:	685b      	ldr	r3, [r3, #4]
 8024430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024434:	2b00      	cmp	r3, #0
 8024436:	d003      	beq.n	8024440 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8024438:	69ba      	ldr	r2, [r7, #24]
 802443a:	693b      	ldr	r3, [r7, #16]
 802443c:	4313      	orrs	r3, r2
 802443e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8024440:	4a26      	ldr	r2, [pc, #152]	; (80244dc <HAL_GPIO_Init+0x330>)
 8024442:	69bb      	ldr	r3, [r7, #24]
 8024444:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8024446:	4b25      	ldr	r3, [pc, #148]	; (80244dc <HAL_GPIO_Init+0x330>)
 8024448:	689b      	ldr	r3, [r3, #8]
 802444a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802444c:	693b      	ldr	r3, [r7, #16]
 802444e:	43db      	mvns	r3, r3
 8024450:	69ba      	ldr	r2, [r7, #24]
 8024452:	4013      	ands	r3, r2
 8024454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8024456:	683b      	ldr	r3, [r7, #0]
 8024458:	685b      	ldr	r3, [r3, #4]
 802445a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802445e:	2b00      	cmp	r3, #0
 8024460:	d003      	beq.n	802446a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8024462:	69ba      	ldr	r2, [r7, #24]
 8024464:	693b      	ldr	r3, [r7, #16]
 8024466:	4313      	orrs	r3, r2
 8024468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 802446a:	4a1c      	ldr	r2, [pc, #112]	; (80244dc <HAL_GPIO_Init+0x330>)
 802446c:	69bb      	ldr	r3, [r7, #24]
 802446e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8024470:	4b1a      	ldr	r3, [pc, #104]	; (80244dc <HAL_GPIO_Init+0x330>)
 8024472:	68db      	ldr	r3, [r3, #12]
 8024474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024476:	693b      	ldr	r3, [r7, #16]
 8024478:	43db      	mvns	r3, r3
 802447a:	69ba      	ldr	r2, [r7, #24]
 802447c:	4013      	ands	r3, r2
 802447e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8024480:	683b      	ldr	r3, [r7, #0]
 8024482:	685b      	ldr	r3, [r3, #4]
 8024484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8024488:	2b00      	cmp	r3, #0
 802448a:	d003      	beq.n	8024494 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 802448c:	69ba      	ldr	r2, [r7, #24]
 802448e:	693b      	ldr	r3, [r7, #16]
 8024490:	4313      	orrs	r3, r2
 8024492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8024494:	4a11      	ldr	r2, [pc, #68]	; (80244dc <HAL_GPIO_Init+0x330>)
 8024496:	69bb      	ldr	r3, [r7, #24]
 8024498:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802449a:	69fb      	ldr	r3, [r7, #28]
 802449c:	3301      	adds	r3, #1
 802449e:	61fb      	str	r3, [r7, #28]
 80244a0:	69fb      	ldr	r3, [r7, #28]
 80244a2:	2b0f      	cmp	r3, #15
 80244a4:	f67f ae90 	bls.w	80241c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80244a8:	bf00      	nop
 80244aa:	3724      	adds	r7, #36	; 0x24
 80244ac:	46bd      	mov	sp, r7
 80244ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244b2:	4770      	bx	lr
 80244b4:	40023800 	.word	0x40023800
 80244b8:	40013800 	.word	0x40013800
 80244bc:	40020000 	.word	0x40020000
 80244c0:	40020400 	.word	0x40020400
 80244c4:	40020800 	.word	0x40020800
 80244c8:	40020c00 	.word	0x40020c00
 80244cc:	40021000 	.word	0x40021000
 80244d0:	40021400 	.word	0x40021400
 80244d4:	40021800 	.word	0x40021800
 80244d8:	40021c00 	.word	0x40021c00
 80244dc:	40013c00 	.word	0x40013c00

080244e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80244e0:	b480      	push	{r7}
 80244e2:	b085      	sub	sp, #20
 80244e4:	af00      	add	r7, sp, #0
 80244e6:	6078      	str	r0, [r7, #4]
 80244e8:	460b      	mov	r3, r1
 80244ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80244ec:	687b      	ldr	r3, [r7, #4]
 80244ee:	691a      	ldr	r2, [r3, #16]
 80244f0:	887b      	ldrh	r3, [r7, #2]
 80244f2:	4013      	ands	r3, r2
 80244f4:	2b00      	cmp	r3, #0
 80244f6:	d002      	beq.n	80244fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80244f8:	2301      	movs	r3, #1
 80244fa:	73fb      	strb	r3, [r7, #15]
 80244fc:	e001      	b.n	8024502 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80244fe:	2300      	movs	r3, #0
 8024500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8024502:	7bfb      	ldrb	r3, [r7, #15]
}
 8024504:	4618      	mov	r0, r3
 8024506:	3714      	adds	r7, #20
 8024508:	46bd      	mov	sp, r7
 802450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802450e:	4770      	bx	lr

08024510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8024510:	b480      	push	{r7}
 8024512:	b083      	sub	sp, #12
 8024514:	af00      	add	r7, sp, #0
 8024516:	6078      	str	r0, [r7, #4]
 8024518:	460b      	mov	r3, r1
 802451a:	807b      	strh	r3, [r7, #2]
 802451c:	4613      	mov	r3, r2
 802451e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8024520:	787b      	ldrb	r3, [r7, #1]
 8024522:	2b00      	cmp	r3, #0
 8024524:	d003      	beq.n	802452e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8024526:	887a      	ldrh	r2, [r7, #2]
 8024528:	687b      	ldr	r3, [r7, #4]
 802452a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 802452c:	e003      	b.n	8024536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802452e:	887b      	ldrh	r3, [r7, #2]
 8024530:	041a      	lsls	r2, r3, #16
 8024532:	687b      	ldr	r3, [r7, #4]
 8024534:	619a      	str	r2, [r3, #24]
}
 8024536:	bf00      	nop
 8024538:	370c      	adds	r7, #12
 802453a:	46bd      	mov	sp, r7
 802453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024540:	4770      	bx	lr
	...

08024544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8024544:	b580      	push	{r7, lr}
 8024546:	b084      	sub	sp, #16
 8024548:	af00      	add	r7, sp, #0
 802454a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802454c:	687b      	ldr	r3, [r7, #4]
 802454e:	2b00      	cmp	r3, #0
 8024550:	d101      	bne.n	8024556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8024552:	2301      	movs	r3, #1
 8024554:	e11f      	b.n	8024796 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8024556:	687b      	ldr	r3, [r7, #4]
 8024558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802455c:	b2db      	uxtb	r3, r3
 802455e:	2b00      	cmp	r3, #0
 8024560:	d106      	bne.n	8024570 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8024562:	687b      	ldr	r3, [r7, #4]
 8024564:	2200      	movs	r2, #0
 8024566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 802456a:	6878      	ldr	r0, [r7, #4]
 802456c:	f7fd ffe8 	bl	8022540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8024570:	687b      	ldr	r3, [r7, #4]
 8024572:	2224      	movs	r2, #36	; 0x24
 8024574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8024578:	687b      	ldr	r3, [r7, #4]
 802457a:	681b      	ldr	r3, [r3, #0]
 802457c:	681a      	ldr	r2, [r3, #0]
 802457e:	687b      	ldr	r3, [r7, #4]
 8024580:	681b      	ldr	r3, [r3, #0]
 8024582:	f022 0201 	bic.w	r2, r2, #1
 8024586:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8024588:	687b      	ldr	r3, [r7, #4]
 802458a:	681b      	ldr	r3, [r3, #0]
 802458c:	681a      	ldr	r2, [r3, #0]
 802458e:	687b      	ldr	r3, [r7, #4]
 8024590:	681b      	ldr	r3, [r3, #0]
 8024592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8024596:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8024598:	687b      	ldr	r3, [r7, #4]
 802459a:	681b      	ldr	r3, [r3, #0]
 802459c:	681a      	ldr	r2, [r3, #0]
 802459e:	687b      	ldr	r3, [r7, #4]
 80245a0:	681b      	ldr	r3, [r3, #0]
 80245a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80245a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80245a8:	f000 fd18 	bl	8024fdc <HAL_RCC_GetPCLK1Freq>
 80245ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80245ae:	687b      	ldr	r3, [r7, #4]
 80245b0:	685b      	ldr	r3, [r3, #4]
 80245b2:	4a7b      	ldr	r2, [pc, #492]	; (80247a0 <HAL_I2C_Init+0x25c>)
 80245b4:	4293      	cmp	r3, r2
 80245b6:	d807      	bhi.n	80245c8 <HAL_I2C_Init+0x84>
 80245b8:	68fb      	ldr	r3, [r7, #12]
 80245ba:	4a7a      	ldr	r2, [pc, #488]	; (80247a4 <HAL_I2C_Init+0x260>)
 80245bc:	4293      	cmp	r3, r2
 80245be:	bf94      	ite	ls
 80245c0:	2301      	movls	r3, #1
 80245c2:	2300      	movhi	r3, #0
 80245c4:	b2db      	uxtb	r3, r3
 80245c6:	e006      	b.n	80245d6 <HAL_I2C_Init+0x92>
 80245c8:	68fb      	ldr	r3, [r7, #12]
 80245ca:	4a77      	ldr	r2, [pc, #476]	; (80247a8 <HAL_I2C_Init+0x264>)
 80245cc:	4293      	cmp	r3, r2
 80245ce:	bf94      	ite	ls
 80245d0:	2301      	movls	r3, #1
 80245d2:	2300      	movhi	r3, #0
 80245d4:	b2db      	uxtb	r3, r3
 80245d6:	2b00      	cmp	r3, #0
 80245d8:	d001      	beq.n	80245de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80245da:	2301      	movs	r3, #1
 80245dc:	e0db      	b.n	8024796 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80245de:	68fb      	ldr	r3, [r7, #12]
 80245e0:	4a72      	ldr	r2, [pc, #456]	; (80247ac <HAL_I2C_Init+0x268>)
 80245e2:	fba2 2303 	umull	r2, r3, r2, r3
 80245e6:	0c9b      	lsrs	r3, r3, #18
 80245e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80245ea:	687b      	ldr	r3, [r7, #4]
 80245ec:	681b      	ldr	r3, [r3, #0]
 80245ee:	685b      	ldr	r3, [r3, #4]
 80245f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80245f4:	687b      	ldr	r3, [r7, #4]
 80245f6:	681b      	ldr	r3, [r3, #0]
 80245f8:	68ba      	ldr	r2, [r7, #8]
 80245fa:	430a      	orrs	r2, r1
 80245fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80245fe:	687b      	ldr	r3, [r7, #4]
 8024600:	681b      	ldr	r3, [r3, #0]
 8024602:	6a1b      	ldr	r3, [r3, #32]
 8024604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8024608:	687b      	ldr	r3, [r7, #4]
 802460a:	685b      	ldr	r3, [r3, #4]
 802460c:	4a64      	ldr	r2, [pc, #400]	; (80247a0 <HAL_I2C_Init+0x25c>)
 802460e:	4293      	cmp	r3, r2
 8024610:	d802      	bhi.n	8024618 <HAL_I2C_Init+0xd4>
 8024612:	68bb      	ldr	r3, [r7, #8]
 8024614:	3301      	adds	r3, #1
 8024616:	e009      	b.n	802462c <HAL_I2C_Init+0xe8>
 8024618:	68bb      	ldr	r3, [r7, #8]
 802461a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 802461e:	fb02 f303 	mul.w	r3, r2, r3
 8024622:	4a63      	ldr	r2, [pc, #396]	; (80247b0 <HAL_I2C_Init+0x26c>)
 8024624:	fba2 2303 	umull	r2, r3, r2, r3
 8024628:	099b      	lsrs	r3, r3, #6
 802462a:	3301      	adds	r3, #1
 802462c:	687a      	ldr	r2, [r7, #4]
 802462e:	6812      	ldr	r2, [r2, #0]
 8024630:	430b      	orrs	r3, r1
 8024632:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8024634:	687b      	ldr	r3, [r7, #4]
 8024636:	681b      	ldr	r3, [r3, #0]
 8024638:	69db      	ldr	r3, [r3, #28]
 802463a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 802463e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8024642:	687b      	ldr	r3, [r7, #4]
 8024644:	685b      	ldr	r3, [r3, #4]
 8024646:	4956      	ldr	r1, [pc, #344]	; (80247a0 <HAL_I2C_Init+0x25c>)
 8024648:	428b      	cmp	r3, r1
 802464a:	d80d      	bhi.n	8024668 <HAL_I2C_Init+0x124>
 802464c:	68fb      	ldr	r3, [r7, #12]
 802464e:	1e59      	subs	r1, r3, #1
 8024650:	687b      	ldr	r3, [r7, #4]
 8024652:	685b      	ldr	r3, [r3, #4]
 8024654:	005b      	lsls	r3, r3, #1
 8024656:	fbb1 f3f3 	udiv	r3, r1, r3
 802465a:	3301      	adds	r3, #1
 802465c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024660:	2b04      	cmp	r3, #4
 8024662:	bf38      	it	cc
 8024664:	2304      	movcc	r3, #4
 8024666:	e04f      	b.n	8024708 <HAL_I2C_Init+0x1c4>
 8024668:	687b      	ldr	r3, [r7, #4]
 802466a:	689b      	ldr	r3, [r3, #8]
 802466c:	2b00      	cmp	r3, #0
 802466e:	d111      	bne.n	8024694 <HAL_I2C_Init+0x150>
 8024670:	68fb      	ldr	r3, [r7, #12]
 8024672:	1e58      	subs	r0, r3, #1
 8024674:	687b      	ldr	r3, [r7, #4]
 8024676:	6859      	ldr	r1, [r3, #4]
 8024678:	460b      	mov	r3, r1
 802467a:	005b      	lsls	r3, r3, #1
 802467c:	440b      	add	r3, r1
 802467e:	fbb0 f3f3 	udiv	r3, r0, r3
 8024682:	3301      	adds	r3, #1
 8024684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024688:	2b00      	cmp	r3, #0
 802468a:	bf0c      	ite	eq
 802468c:	2301      	moveq	r3, #1
 802468e:	2300      	movne	r3, #0
 8024690:	b2db      	uxtb	r3, r3
 8024692:	e012      	b.n	80246ba <HAL_I2C_Init+0x176>
 8024694:	68fb      	ldr	r3, [r7, #12]
 8024696:	1e58      	subs	r0, r3, #1
 8024698:	687b      	ldr	r3, [r7, #4]
 802469a:	6859      	ldr	r1, [r3, #4]
 802469c:	460b      	mov	r3, r1
 802469e:	009b      	lsls	r3, r3, #2
 80246a0:	440b      	add	r3, r1
 80246a2:	0099      	lsls	r1, r3, #2
 80246a4:	440b      	add	r3, r1
 80246a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80246aa:	3301      	adds	r3, #1
 80246ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80246b0:	2b00      	cmp	r3, #0
 80246b2:	bf0c      	ite	eq
 80246b4:	2301      	moveq	r3, #1
 80246b6:	2300      	movne	r3, #0
 80246b8:	b2db      	uxtb	r3, r3
 80246ba:	2b00      	cmp	r3, #0
 80246bc:	d001      	beq.n	80246c2 <HAL_I2C_Init+0x17e>
 80246be:	2301      	movs	r3, #1
 80246c0:	e022      	b.n	8024708 <HAL_I2C_Init+0x1c4>
 80246c2:	687b      	ldr	r3, [r7, #4]
 80246c4:	689b      	ldr	r3, [r3, #8]
 80246c6:	2b00      	cmp	r3, #0
 80246c8:	d10e      	bne.n	80246e8 <HAL_I2C_Init+0x1a4>
 80246ca:	68fb      	ldr	r3, [r7, #12]
 80246cc:	1e58      	subs	r0, r3, #1
 80246ce:	687b      	ldr	r3, [r7, #4]
 80246d0:	6859      	ldr	r1, [r3, #4]
 80246d2:	460b      	mov	r3, r1
 80246d4:	005b      	lsls	r3, r3, #1
 80246d6:	440b      	add	r3, r1
 80246d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80246dc:	3301      	adds	r3, #1
 80246de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80246e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80246e6:	e00f      	b.n	8024708 <HAL_I2C_Init+0x1c4>
 80246e8:	68fb      	ldr	r3, [r7, #12]
 80246ea:	1e58      	subs	r0, r3, #1
 80246ec:	687b      	ldr	r3, [r7, #4]
 80246ee:	6859      	ldr	r1, [r3, #4]
 80246f0:	460b      	mov	r3, r1
 80246f2:	009b      	lsls	r3, r3, #2
 80246f4:	440b      	add	r3, r1
 80246f6:	0099      	lsls	r1, r3, #2
 80246f8:	440b      	add	r3, r1
 80246fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80246fe:	3301      	adds	r3, #1
 8024700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024704:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8024708:	6879      	ldr	r1, [r7, #4]
 802470a:	6809      	ldr	r1, [r1, #0]
 802470c:	4313      	orrs	r3, r2
 802470e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8024710:	687b      	ldr	r3, [r7, #4]
 8024712:	681b      	ldr	r3, [r3, #0]
 8024714:	681b      	ldr	r3, [r3, #0]
 8024716:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 802471a:	687b      	ldr	r3, [r7, #4]
 802471c:	69da      	ldr	r2, [r3, #28]
 802471e:	687b      	ldr	r3, [r7, #4]
 8024720:	6a1b      	ldr	r3, [r3, #32]
 8024722:	431a      	orrs	r2, r3
 8024724:	687b      	ldr	r3, [r7, #4]
 8024726:	681b      	ldr	r3, [r3, #0]
 8024728:	430a      	orrs	r2, r1
 802472a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 802472c:	687b      	ldr	r3, [r7, #4]
 802472e:	681b      	ldr	r3, [r3, #0]
 8024730:	689b      	ldr	r3, [r3, #8]
 8024732:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8024736:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 802473a:	687a      	ldr	r2, [r7, #4]
 802473c:	6911      	ldr	r1, [r2, #16]
 802473e:	687a      	ldr	r2, [r7, #4]
 8024740:	68d2      	ldr	r2, [r2, #12]
 8024742:	4311      	orrs	r1, r2
 8024744:	687a      	ldr	r2, [r7, #4]
 8024746:	6812      	ldr	r2, [r2, #0]
 8024748:	430b      	orrs	r3, r1
 802474a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 802474c:	687b      	ldr	r3, [r7, #4]
 802474e:	681b      	ldr	r3, [r3, #0]
 8024750:	68db      	ldr	r3, [r3, #12]
 8024752:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8024756:	687b      	ldr	r3, [r7, #4]
 8024758:	695a      	ldr	r2, [r3, #20]
 802475a:	687b      	ldr	r3, [r7, #4]
 802475c:	699b      	ldr	r3, [r3, #24]
 802475e:	431a      	orrs	r2, r3
 8024760:	687b      	ldr	r3, [r7, #4]
 8024762:	681b      	ldr	r3, [r3, #0]
 8024764:	430a      	orrs	r2, r1
 8024766:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8024768:	687b      	ldr	r3, [r7, #4]
 802476a:	681b      	ldr	r3, [r3, #0]
 802476c:	681a      	ldr	r2, [r3, #0]
 802476e:	687b      	ldr	r3, [r7, #4]
 8024770:	681b      	ldr	r3, [r3, #0]
 8024772:	f042 0201 	orr.w	r2, r2, #1
 8024776:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8024778:	687b      	ldr	r3, [r7, #4]
 802477a:	2200      	movs	r2, #0
 802477c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 802477e:	687b      	ldr	r3, [r7, #4]
 8024780:	2220      	movs	r2, #32
 8024782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8024786:	687b      	ldr	r3, [r7, #4]
 8024788:	2200      	movs	r2, #0
 802478a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802478c:	687b      	ldr	r3, [r7, #4]
 802478e:	2200      	movs	r2, #0
 8024790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8024794:	2300      	movs	r3, #0
}
 8024796:	4618      	mov	r0, r3
 8024798:	3710      	adds	r7, #16
 802479a:	46bd      	mov	sp, r7
 802479c:	bd80      	pop	{r7, pc}
 802479e:	bf00      	nop
 80247a0:	000186a0 	.word	0x000186a0
 80247a4:	001e847f 	.word	0x001e847f
 80247a8:	003d08ff 	.word	0x003d08ff
 80247ac:	431bde83 	.word	0x431bde83
 80247b0:	10624dd3 	.word	0x10624dd3

080247b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80247b4:	b580      	push	{r7, lr}
 80247b6:	b086      	sub	sp, #24
 80247b8:	af00      	add	r7, sp, #0
 80247ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80247bc:	687b      	ldr	r3, [r7, #4]
 80247be:	2b00      	cmp	r3, #0
 80247c0:	d101      	bne.n	80247c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80247c2:	2301      	movs	r3, #1
 80247c4:	e25b      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80247c6:	687b      	ldr	r3, [r7, #4]
 80247c8:	681b      	ldr	r3, [r3, #0]
 80247ca:	f003 0301 	and.w	r3, r3, #1
 80247ce:	2b00      	cmp	r3, #0
 80247d0:	d075      	beq.n	80248be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80247d2:	4ba3      	ldr	r3, [pc, #652]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 80247d4:	689b      	ldr	r3, [r3, #8]
 80247d6:	f003 030c 	and.w	r3, r3, #12
 80247da:	2b04      	cmp	r3, #4
 80247dc:	d00c      	beq.n	80247f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80247de:	4ba0      	ldr	r3, [pc, #640]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 80247e0:	689b      	ldr	r3, [r3, #8]
 80247e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80247e6:	2b08      	cmp	r3, #8
 80247e8:	d112      	bne.n	8024810 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80247ea:	4b9d      	ldr	r3, [pc, #628]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 80247ec:	685b      	ldr	r3, [r3, #4]
 80247ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80247f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80247f6:	d10b      	bne.n	8024810 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80247f8:	4b99      	ldr	r3, [pc, #612]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 80247fa:	681b      	ldr	r3, [r3, #0]
 80247fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024800:	2b00      	cmp	r3, #0
 8024802:	d05b      	beq.n	80248bc <HAL_RCC_OscConfig+0x108>
 8024804:	687b      	ldr	r3, [r7, #4]
 8024806:	685b      	ldr	r3, [r3, #4]
 8024808:	2b00      	cmp	r3, #0
 802480a:	d157      	bne.n	80248bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 802480c:	2301      	movs	r3, #1
 802480e:	e236      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8024810:	687b      	ldr	r3, [r7, #4]
 8024812:	685b      	ldr	r3, [r3, #4]
 8024814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8024818:	d106      	bne.n	8024828 <HAL_RCC_OscConfig+0x74>
 802481a:	4b91      	ldr	r3, [pc, #580]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 802481c:	681b      	ldr	r3, [r3, #0]
 802481e:	4a90      	ldr	r2, [pc, #576]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8024824:	6013      	str	r3, [r2, #0]
 8024826:	e01d      	b.n	8024864 <HAL_RCC_OscConfig+0xb0>
 8024828:	687b      	ldr	r3, [r7, #4]
 802482a:	685b      	ldr	r3, [r3, #4]
 802482c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8024830:	d10c      	bne.n	802484c <HAL_RCC_OscConfig+0x98>
 8024832:	4b8b      	ldr	r3, [pc, #556]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024834:	681b      	ldr	r3, [r3, #0]
 8024836:	4a8a      	ldr	r2, [pc, #552]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802483c:	6013      	str	r3, [r2, #0]
 802483e:	4b88      	ldr	r3, [pc, #544]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024840:	681b      	ldr	r3, [r3, #0]
 8024842:	4a87      	ldr	r2, [pc, #540]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8024848:	6013      	str	r3, [r2, #0]
 802484a:	e00b      	b.n	8024864 <HAL_RCC_OscConfig+0xb0>
 802484c:	4b84      	ldr	r3, [pc, #528]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 802484e:	681b      	ldr	r3, [r3, #0]
 8024850:	4a83      	ldr	r2, [pc, #524]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8024856:	6013      	str	r3, [r2, #0]
 8024858:	4b81      	ldr	r3, [pc, #516]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 802485a:	681b      	ldr	r3, [r3, #0]
 802485c:	4a80      	ldr	r2, [pc, #512]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 802485e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8024862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8024864:	687b      	ldr	r3, [r7, #4]
 8024866:	685b      	ldr	r3, [r3, #4]
 8024868:	2b00      	cmp	r3, #0
 802486a:	d013      	beq.n	8024894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802486c:	f7fe fbfc 	bl	8023068 <HAL_GetTick>
 8024870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8024872:	e008      	b.n	8024886 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8024874:	f7fe fbf8 	bl	8023068 <HAL_GetTick>
 8024878:	4602      	mov	r2, r0
 802487a:	693b      	ldr	r3, [r7, #16]
 802487c:	1ad3      	subs	r3, r2, r3
 802487e:	2b64      	cmp	r3, #100	; 0x64
 8024880:	d901      	bls.n	8024886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8024882:	2303      	movs	r3, #3
 8024884:	e1fb      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8024886:	4b76      	ldr	r3, [pc, #472]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024888:	681b      	ldr	r3, [r3, #0]
 802488a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802488e:	2b00      	cmp	r3, #0
 8024890:	d0f0      	beq.n	8024874 <HAL_RCC_OscConfig+0xc0>
 8024892:	e014      	b.n	80248be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024894:	f7fe fbe8 	bl	8023068 <HAL_GetTick>
 8024898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802489a:	e008      	b.n	80248ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802489c:	f7fe fbe4 	bl	8023068 <HAL_GetTick>
 80248a0:	4602      	mov	r2, r0
 80248a2:	693b      	ldr	r3, [r7, #16]
 80248a4:	1ad3      	subs	r3, r2, r3
 80248a6:	2b64      	cmp	r3, #100	; 0x64
 80248a8:	d901      	bls.n	80248ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80248aa:	2303      	movs	r3, #3
 80248ac:	e1e7      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80248ae:	4b6c      	ldr	r3, [pc, #432]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 80248b0:	681b      	ldr	r3, [r3, #0]
 80248b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80248b6:	2b00      	cmp	r3, #0
 80248b8:	d1f0      	bne.n	802489c <HAL_RCC_OscConfig+0xe8>
 80248ba:	e000      	b.n	80248be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80248bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80248be:	687b      	ldr	r3, [r7, #4]
 80248c0:	681b      	ldr	r3, [r3, #0]
 80248c2:	f003 0302 	and.w	r3, r3, #2
 80248c6:	2b00      	cmp	r3, #0
 80248c8:	d063      	beq.n	8024992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80248ca:	4b65      	ldr	r3, [pc, #404]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 80248cc:	689b      	ldr	r3, [r3, #8]
 80248ce:	f003 030c 	and.w	r3, r3, #12
 80248d2:	2b00      	cmp	r3, #0
 80248d4:	d00b      	beq.n	80248ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80248d6:	4b62      	ldr	r3, [pc, #392]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 80248d8:	689b      	ldr	r3, [r3, #8]
 80248da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80248de:	2b08      	cmp	r3, #8
 80248e0:	d11c      	bne.n	802491c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80248e2:	4b5f      	ldr	r3, [pc, #380]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 80248e4:	685b      	ldr	r3, [r3, #4]
 80248e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80248ea:	2b00      	cmp	r3, #0
 80248ec:	d116      	bne.n	802491c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80248ee:	4b5c      	ldr	r3, [pc, #368]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 80248f0:	681b      	ldr	r3, [r3, #0]
 80248f2:	f003 0302 	and.w	r3, r3, #2
 80248f6:	2b00      	cmp	r3, #0
 80248f8:	d005      	beq.n	8024906 <HAL_RCC_OscConfig+0x152>
 80248fa:	687b      	ldr	r3, [r7, #4]
 80248fc:	68db      	ldr	r3, [r3, #12]
 80248fe:	2b01      	cmp	r3, #1
 8024900:	d001      	beq.n	8024906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8024902:	2301      	movs	r3, #1
 8024904:	e1bb      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8024906:	4b56      	ldr	r3, [pc, #344]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024908:	681b      	ldr	r3, [r3, #0]
 802490a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802490e:	687b      	ldr	r3, [r7, #4]
 8024910:	691b      	ldr	r3, [r3, #16]
 8024912:	00db      	lsls	r3, r3, #3
 8024914:	4952      	ldr	r1, [pc, #328]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024916:	4313      	orrs	r3, r2
 8024918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802491a:	e03a      	b.n	8024992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 802491c:	687b      	ldr	r3, [r7, #4]
 802491e:	68db      	ldr	r3, [r3, #12]
 8024920:	2b00      	cmp	r3, #0
 8024922:	d020      	beq.n	8024966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8024924:	4b4f      	ldr	r3, [pc, #316]	; (8024a64 <HAL_RCC_OscConfig+0x2b0>)
 8024926:	2201      	movs	r2, #1
 8024928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802492a:	f7fe fb9d 	bl	8023068 <HAL_GetTick>
 802492e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8024930:	e008      	b.n	8024944 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8024932:	f7fe fb99 	bl	8023068 <HAL_GetTick>
 8024936:	4602      	mov	r2, r0
 8024938:	693b      	ldr	r3, [r7, #16]
 802493a:	1ad3      	subs	r3, r2, r3
 802493c:	2b02      	cmp	r3, #2
 802493e:	d901      	bls.n	8024944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8024940:	2303      	movs	r3, #3
 8024942:	e19c      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8024944:	4b46      	ldr	r3, [pc, #280]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024946:	681b      	ldr	r3, [r3, #0]
 8024948:	f003 0302 	and.w	r3, r3, #2
 802494c:	2b00      	cmp	r3, #0
 802494e:	d0f0      	beq.n	8024932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8024950:	4b43      	ldr	r3, [pc, #268]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024952:	681b      	ldr	r3, [r3, #0]
 8024954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8024958:	687b      	ldr	r3, [r7, #4]
 802495a:	691b      	ldr	r3, [r3, #16]
 802495c:	00db      	lsls	r3, r3, #3
 802495e:	4940      	ldr	r1, [pc, #256]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024960:	4313      	orrs	r3, r2
 8024962:	600b      	str	r3, [r1, #0]
 8024964:	e015      	b.n	8024992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8024966:	4b3f      	ldr	r3, [pc, #252]	; (8024a64 <HAL_RCC_OscConfig+0x2b0>)
 8024968:	2200      	movs	r2, #0
 802496a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802496c:	f7fe fb7c 	bl	8023068 <HAL_GetTick>
 8024970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8024972:	e008      	b.n	8024986 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8024974:	f7fe fb78 	bl	8023068 <HAL_GetTick>
 8024978:	4602      	mov	r2, r0
 802497a:	693b      	ldr	r3, [r7, #16]
 802497c:	1ad3      	subs	r3, r2, r3
 802497e:	2b02      	cmp	r3, #2
 8024980:	d901      	bls.n	8024986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8024982:	2303      	movs	r3, #3
 8024984:	e17b      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8024986:	4b36      	ldr	r3, [pc, #216]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024988:	681b      	ldr	r3, [r3, #0]
 802498a:	f003 0302 	and.w	r3, r3, #2
 802498e:	2b00      	cmp	r3, #0
 8024990:	d1f0      	bne.n	8024974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8024992:	687b      	ldr	r3, [r7, #4]
 8024994:	681b      	ldr	r3, [r3, #0]
 8024996:	f003 0308 	and.w	r3, r3, #8
 802499a:	2b00      	cmp	r3, #0
 802499c:	d030      	beq.n	8024a00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802499e:	687b      	ldr	r3, [r7, #4]
 80249a0:	695b      	ldr	r3, [r3, #20]
 80249a2:	2b00      	cmp	r3, #0
 80249a4:	d016      	beq.n	80249d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80249a6:	4b30      	ldr	r3, [pc, #192]	; (8024a68 <HAL_RCC_OscConfig+0x2b4>)
 80249a8:	2201      	movs	r2, #1
 80249aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80249ac:	f7fe fb5c 	bl	8023068 <HAL_GetTick>
 80249b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80249b2:	e008      	b.n	80249c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80249b4:	f7fe fb58 	bl	8023068 <HAL_GetTick>
 80249b8:	4602      	mov	r2, r0
 80249ba:	693b      	ldr	r3, [r7, #16]
 80249bc:	1ad3      	subs	r3, r2, r3
 80249be:	2b02      	cmp	r3, #2
 80249c0:	d901      	bls.n	80249c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80249c2:	2303      	movs	r3, #3
 80249c4:	e15b      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80249c6:	4b26      	ldr	r3, [pc, #152]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 80249c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80249ca:	f003 0302 	and.w	r3, r3, #2
 80249ce:	2b00      	cmp	r3, #0
 80249d0:	d0f0      	beq.n	80249b4 <HAL_RCC_OscConfig+0x200>
 80249d2:	e015      	b.n	8024a00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80249d4:	4b24      	ldr	r3, [pc, #144]	; (8024a68 <HAL_RCC_OscConfig+0x2b4>)
 80249d6:	2200      	movs	r2, #0
 80249d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80249da:	f7fe fb45 	bl	8023068 <HAL_GetTick>
 80249de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80249e0:	e008      	b.n	80249f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80249e2:	f7fe fb41 	bl	8023068 <HAL_GetTick>
 80249e6:	4602      	mov	r2, r0
 80249e8:	693b      	ldr	r3, [r7, #16]
 80249ea:	1ad3      	subs	r3, r2, r3
 80249ec:	2b02      	cmp	r3, #2
 80249ee:	d901      	bls.n	80249f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80249f0:	2303      	movs	r3, #3
 80249f2:	e144      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80249f4:	4b1a      	ldr	r3, [pc, #104]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 80249f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80249f8:	f003 0302 	and.w	r3, r3, #2
 80249fc:	2b00      	cmp	r3, #0
 80249fe:	d1f0      	bne.n	80249e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8024a00:	687b      	ldr	r3, [r7, #4]
 8024a02:	681b      	ldr	r3, [r3, #0]
 8024a04:	f003 0304 	and.w	r3, r3, #4
 8024a08:	2b00      	cmp	r3, #0
 8024a0a:	f000 80a0 	beq.w	8024b4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8024a0e:	2300      	movs	r3, #0
 8024a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8024a12:	4b13      	ldr	r3, [pc, #76]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8024a1a:	2b00      	cmp	r3, #0
 8024a1c:	d10f      	bne.n	8024a3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8024a1e:	2300      	movs	r3, #0
 8024a20:	60bb      	str	r3, [r7, #8]
 8024a22:	4b0f      	ldr	r3, [pc, #60]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a26:	4a0e      	ldr	r2, [pc, #56]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8024a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8024a2e:	4b0c      	ldr	r3, [pc, #48]	; (8024a60 <HAL_RCC_OscConfig+0x2ac>)
 8024a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8024a36:	60bb      	str	r3, [r7, #8]
 8024a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8024a3a:	2301      	movs	r3, #1
 8024a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8024a3e:	4b0b      	ldr	r3, [pc, #44]	; (8024a6c <HAL_RCC_OscConfig+0x2b8>)
 8024a40:	681b      	ldr	r3, [r3, #0]
 8024a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024a46:	2b00      	cmp	r3, #0
 8024a48:	d121      	bne.n	8024a8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8024a4a:	4b08      	ldr	r3, [pc, #32]	; (8024a6c <HAL_RCC_OscConfig+0x2b8>)
 8024a4c:	681b      	ldr	r3, [r3, #0]
 8024a4e:	4a07      	ldr	r2, [pc, #28]	; (8024a6c <HAL_RCC_OscConfig+0x2b8>)
 8024a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8024a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8024a56:	f7fe fb07 	bl	8023068 <HAL_GetTick>
 8024a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8024a5c:	e011      	b.n	8024a82 <HAL_RCC_OscConfig+0x2ce>
 8024a5e:	bf00      	nop
 8024a60:	40023800 	.word	0x40023800
 8024a64:	42470000 	.word	0x42470000
 8024a68:	42470e80 	.word	0x42470e80
 8024a6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8024a70:	f7fe fafa 	bl	8023068 <HAL_GetTick>
 8024a74:	4602      	mov	r2, r0
 8024a76:	693b      	ldr	r3, [r7, #16]
 8024a78:	1ad3      	subs	r3, r2, r3
 8024a7a:	2b02      	cmp	r3, #2
 8024a7c:	d901      	bls.n	8024a82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8024a7e:	2303      	movs	r3, #3
 8024a80:	e0fd      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8024a82:	4b81      	ldr	r3, [pc, #516]	; (8024c88 <HAL_RCC_OscConfig+0x4d4>)
 8024a84:	681b      	ldr	r3, [r3, #0]
 8024a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024a8a:	2b00      	cmp	r3, #0
 8024a8c:	d0f0      	beq.n	8024a70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8024a8e:	687b      	ldr	r3, [r7, #4]
 8024a90:	689b      	ldr	r3, [r3, #8]
 8024a92:	2b01      	cmp	r3, #1
 8024a94:	d106      	bne.n	8024aa4 <HAL_RCC_OscConfig+0x2f0>
 8024a96:	4b7d      	ldr	r3, [pc, #500]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024a9a:	4a7c      	ldr	r2, [pc, #496]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024a9c:	f043 0301 	orr.w	r3, r3, #1
 8024aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8024aa2:	e01c      	b.n	8024ade <HAL_RCC_OscConfig+0x32a>
 8024aa4:	687b      	ldr	r3, [r7, #4]
 8024aa6:	689b      	ldr	r3, [r3, #8]
 8024aa8:	2b05      	cmp	r3, #5
 8024aaa:	d10c      	bne.n	8024ac6 <HAL_RCC_OscConfig+0x312>
 8024aac:	4b77      	ldr	r3, [pc, #476]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024ab0:	4a76      	ldr	r2, [pc, #472]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024ab2:	f043 0304 	orr.w	r3, r3, #4
 8024ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8024ab8:	4b74      	ldr	r3, [pc, #464]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024abc:	4a73      	ldr	r2, [pc, #460]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024abe:	f043 0301 	orr.w	r3, r3, #1
 8024ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8024ac4:	e00b      	b.n	8024ade <HAL_RCC_OscConfig+0x32a>
 8024ac6:	4b71      	ldr	r3, [pc, #452]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024aca:	4a70      	ldr	r2, [pc, #448]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024acc:	f023 0301 	bic.w	r3, r3, #1
 8024ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8024ad2:	4b6e      	ldr	r3, [pc, #440]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024ad6:	4a6d      	ldr	r2, [pc, #436]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024ad8:	f023 0304 	bic.w	r3, r3, #4
 8024adc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8024ade:	687b      	ldr	r3, [r7, #4]
 8024ae0:	689b      	ldr	r3, [r3, #8]
 8024ae2:	2b00      	cmp	r3, #0
 8024ae4:	d015      	beq.n	8024b12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8024ae6:	f7fe fabf 	bl	8023068 <HAL_GetTick>
 8024aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8024aec:	e00a      	b.n	8024b04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8024aee:	f7fe fabb 	bl	8023068 <HAL_GetTick>
 8024af2:	4602      	mov	r2, r0
 8024af4:	693b      	ldr	r3, [r7, #16]
 8024af6:	1ad3      	subs	r3, r2, r3
 8024af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8024afc:	4293      	cmp	r3, r2
 8024afe:	d901      	bls.n	8024b04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8024b00:	2303      	movs	r3, #3
 8024b02:	e0bc      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8024b04:	4b61      	ldr	r3, [pc, #388]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024b08:	f003 0302 	and.w	r3, r3, #2
 8024b0c:	2b00      	cmp	r3, #0
 8024b0e:	d0ee      	beq.n	8024aee <HAL_RCC_OscConfig+0x33a>
 8024b10:	e014      	b.n	8024b3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8024b12:	f7fe faa9 	bl	8023068 <HAL_GetTick>
 8024b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8024b18:	e00a      	b.n	8024b30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8024b1a:	f7fe faa5 	bl	8023068 <HAL_GetTick>
 8024b1e:	4602      	mov	r2, r0
 8024b20:	693b      	ldr	r3, [r7, #16]
 8024b22:	1ad3      	subs	r3, r2, r3
 8024b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8024b28:	4293      	cmp	r3, r2
 8024b2a:	d901      	bls.n	8024b30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8024b2c:	2303      	movs	r3, #3
 8024b2e:	e0a6      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8024b30:	4b56      	ldr	r3, [pc, #344]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024b34:	f003 0302 	and.w	r3, r3, #2
 8024b38:	2b00      	cmp	r3, #0
 8024b3a:	d1ee      	bne.n	8024b1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8024b3c:	7dfb      	ldrb	r3, [r7, #23]
 8024b3e:	2b01      	cmp	r3, #1
 8024b40:	d105      	bne.n	8024b4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8024b42:	4b52      	ldr	r3, [pc, #328]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b46:	4a51      	ldr	r2, [pc, #324]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8024b4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8024b4e:	687b      	ldr	r3, [r7, #4]
 8024b50:	699b      	ldr	r3, [r3, #24]
 8024b52:	2b00      	cmp	r3, #0
 8024b54:	f000 8092 	beq.w	8024c7c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8024b58:	4b4c      	ldr	r3, [pc, #304]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024b5a:	689b      	ldr	r3, [r3, #8]
 8024b5c:	f003 030c 	and.w	r3, r3, #12
 8024b60:	2b08      	cmp	r3, #8
 8024b62:	d05c      	beq.n	8024c1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8024b64:	687b      	ldr	r3, [r7, #4]
 8024b66:	699b      	ldr	r3, [r3, #24]
 8024b68:	2b02      	cmp	r3, #2
 8024b6a:	d141      	bne.n	8024bf0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8024b6c:	4b48      	ldr	r3, [pc, #288]	; (8024c90 <HAL_RCC_OscConfig+0x4dc>)
 8024b6e:	2200      	movs	r2, #0
 8024b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024b72:	f7fe fa79 	bl	8023068 <HAL_GetTick>
 8024b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024b78:	e008      	b.n	8024b8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8024b7a:	f7fe fa75 	bl	8023068 <HAL_GetTick>
 8024b7e:	4602      	mov	r2, r0
 8024b80:	693b      	ldr	r3, [r7, #16]
 8024b82:	1ad3      	subs	r3, r2, r3
 8024b84:	2b02      	cmp	r3, #2
 8024b86:	d901      	bls.n	8024b8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8024b88:	2303      	movs	r3, #3
 8024b8a:	e078      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024b8c:	4b3f      	ldr	r3, [pc, #252]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024b8e:	681b      	ldr	r3, [r3, #0]
 8024b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024b94:	2b00      	cmp	r3, #0
 8024b96:	d1f0      	bne.n	8024b7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8024b98:	687b      	ldr	r3, [r7, #4]
 8024b9a:	69da      	ldr	r2, [r3, #28]
 8024b9c:	687b      	ldr	r3, [r7, #4]
 8024b9e:	6a1b      	ldr	r3, [r3, #32]
 8024ba0:	431a      	orrs	r2, r3
 8024ba2:	687b      	ldr	r3, [r7, #4]
 8024ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024ba6:	019b      	lsls	r3, r3, #6
 8024ba8:	431a      	orrs	r2, r3
 8024baa:	687b      	ldr	r3, [r7, #4]
 8024bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024bae:	085b      	lsrs	r3, r3, #1
 8024bb0:	3b01      	subs	r3, #1
 8024bb2:	041b      	lsls	r3, r3, #16
 8024bb4:	431a      	orrs	r2, r3
 8024bb6:	687b      	ldr	r3, [r7, #4]
 8024bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024bba:	061b      	lsls	r3, r3, #24
 8024bbc:	4933      	ldr	r1, [pc, #204]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024bbe:	4313      	orrs	r3, r2
 8024bc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8024bc2:	4b33      	ldr	r3, [pc, #204]	; (8024c90 <HAL_RCC_OscConfig+0x4dc>)
 8024bc4:	2201      	movs	r2, #1
 8024bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024bc8:	f7fe fa4e 	bl	8023068 <HAL_GetTick>
 8024bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8024bce:	e008      	b.n	8024be2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8024bd0:	f7fe fa4a 	bl	8023068 <HAL_GetTick>
 8024bd4:	4602      	mov	r2, r0
 8024bd6:	693b      	ldr	r3, [r7, #16]
 8024bd8:	1ad3      	subs	r3, r2, r3
 8024bda:	2b02      	cmp	r3, #2
 8024bdc:	d901      	bls.n	8024be2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8024bde:	2303      	movs	r3, #3
 8024be0:	e04d      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8024be2:	4b2a      	ldr	r3, [pc, #168]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024be4:	681b      	ldr	r3, [r3, #0]
 8024be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024bea:	2b00      	cmp	r3, #0
 8024bec:	d0f0      	beq.n	8024bd0 <HAL_RCC_OscConfig+0x41c>
 8024bee:	e045      	b.n	8024c7c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8024bf0:	4b27      	ldr	r3, [pc, #156]	; (8024c90 <HAL_RCC_OscConfig+0x4dc>)
 8024bf2:	2200      	movs	r2, #0
 8024bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024bf6:	f7fe fa37 	bl	8023068 <HAL_GetTick>
 8024bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024bfc:	e008      	b.n	8024c10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8024bfe:	f7fe fa33 	bl	8023068 <HAL_GetTick>
 8024c02:	4602      	mov	r2, r0
 8024c04:	693b      	ldr	r3, [r7, #16]
 8024c06:	1ad3      	subs	r3, r2, r3
 8024c08:	2b02      	cmp	r3, #2
 8024c0a:	d901      	bls.n	8024c10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8024c0c:	2303      	movs	r3, #3
 8024c0e:	e036      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024c10:	4b1e      	ldr	r3, [pc, #120]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024c12:	681b      	ldr	r3, [r3, #0]
 8024c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024c18:	2b00      	cmp	r3, #0
 8024c1a:	d1f0      	bne.n	8024bfe <HAL_RCC_OscConfig+0x44a>
 8024c1c:	e02e      	b.n	8024c7c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8024c1e:	687b      	ldr	r3, [r7, #4]
 8024c20:	699b      	ldr	r3, [r3, #24]
 8024c22:	2b01      	cmp	r3, #1
 8024c24:	d101      	bne.n	8024c2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8024c26:	2301      	movs	r3, #1
 8024c28:	e029      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8024c2a:	4b18      	ldr	r3, [pc, #96]	; (8024c8c <HAL_RCC_OscConfig+0x4d8>)
 8024c2c:	685b      	ldr	r3, [r3, #4]
 8024c2e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8024c30:	68fb      	ldr	r3, [r7, #12]
 8024c32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8024c36:	687b      	ldr	r3, [r7, #4]
 8024c38:	69db      	ldr	r3, [r3, #28]
 8024c3a:	429a      	cmp	r2, r3
 8024c3c:	d11c      	bne.n	8024c78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8024c3e:	68fb      	ldr	r3, [r7, #12]
 8024c40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8024c44:	687b      	ldr	r3, [r7, #4]
 8024c46:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8024c48:	429a      	cmp	r2, r3
 8024c4a:	d115      	bne.n	8024c78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8024c4c:	68fa      	ldr	r2, [r7, #12]
 8024c4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8024c52:	4013      	ands	r3, r2
 8024c54:	687a      	ldr	r2, [r7, #4]
 8024c56:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8024c58:	4293      	cmp	r3, r2
 8024c5a:	d10d      	bne.n	8024c78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8024c5c:	68fb      	ldr	r3, [r7, #12]
 8024c5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8024c62:	687b      	ldr	r3, [r7, #4]
 8024c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8024c66:	429a      	cmp	r2, r3
 8024c68:	d106      	bne.n	8024c78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8024c6a:	68fb      	ldr	r3, [r7, #12]
 8024c6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8024c70:	687b      	ldr	r3, [r7, #4]
 8024c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8024c74:	429a      	cmp	r2, r3
 8024c76:	d001      	beq.n	8024c7c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8024c78:	2301      	movs	r3, #1
 8024c7a:	e000      	b.n	8024c7e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8024c7c:	2300      	movs	r3, #0
}
 8024c7e:	4618      	mov	r0, r3
 8024c80:	3718      	adds	r7, #24
 8024c82:	46bd      	mov	sp, r7
 8024c84:	bd80      	pop	{r7, pc}
 8024c86:	bf00      	nop
 8024c88:	40007000 	.word	0x40007000
 8024c8c:	40023800 	.word	0x40023800
 8024c90:	42470060 	.word	0x42470060

08024c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8024c94:	b580      	push	{r7, lr}
 8024c96:	b084      	sub	sp, #16
 8024c98:	af00      	add	r7, sp, #0
 8024c9a:	6078      	str	r0, [r7, #4]
 8024c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8024c9e:	687b      	ldr	r3, [r7, #4]
 8024ca0:	2b00      	cmp	r3, #0
 8024ca2:	d101      	bne.n	8024ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8024ca4:	2301      	movs	r3, #1
 8024ca6:	e0cc      	b.n	8024e42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8024ca8:	4b68      	ldr	r3, [pc, #416]	; (8024e4c <HAL_RCC_ClockConfig+0x1b8>)
 8024caa:	681b      	ldr	r3, [r3, #0]
 8024cac:	f003 030f 	and.w	r3, r3, #15
 8024cb0:	683a      	ldr	r2, [r7, #0]
 8024cb2:	429a      	cmp	r2, r3
 8024cb4:	d90c      	bls.n	8024cd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8024cb6:	4b65      	ldr	r3, [pc, #404]	; (8024e4c <HAL_RCC_ClockConfig+0x1b8>)
 8024cb8:	683a      	ldr	r2, [r7, #0]
 8024cba:	b2d2      	uxtb	r2, r2
 8024cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8024cbe:	4b63      	ldr	r3, [pc, #396]	; (8024e4c <HAL_RCC_ClockConfig+0x1b8>)
 8024cc0:	681b      	ldr	r3, [r3, #0]
 8024cc2:	f003 030f 	and.w	r3, r3, #15
 8024cc6:	683a      	ldr	r2, [r7, #0]
 8024cc8:	429a      	cmp	r2, r3
 8024cca:	d001      	beq.n	8024cd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8024ccc:	2301      	movs	r3, #1
 8024cce:	e0b8      	b.n	8024e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8024cd0:	687b      	ldr	r3, [r7, #4]
 8024cd2:	681b      	ldr	r3, [r3, #0]
 8024cd4:	f003 0302 	and.w	r3, r3, #2
 8024cd8:	2b00      	cmp	r3, #0
 8024cda:	d020      	beq.n	8024d1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024cdc:	687b      	ldr	r3, [r7, #4]
 8024cde:	681b      	ldr	r3, [r3, #0]
 8024ce0:	f003 0304 	and.w	r3, r3, #4
 8024ce4:	2b00      	cmp	r3, #0
 8024ce6:	d005      	beq.n	8024cf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8024ce8:	4b59      	ldr	r3, [pc, #356]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024cea:	689b      	ldr	r3, [r3, #8]
 8024cec:	4a58      	ldr	r2, [pc, #352]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024cee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8024cf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024cf4:	687b      	ldr	r3, [r7, #4]
 8024cf6:	681b      	ldr	r3, [r3, #0]
 8024cf8:	f003 0308 	and.w	r3, r3, #8
 8024cfc:	2b00      	cmp	r3, #0
 8024cfe:	d005      	beq.n	8024d0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8024d00:	4b53      	ldr	r3, [pc, #332]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024d02:	689b      	ldr	r3, [r3, #8]
 8024d04:	4a52      	ldr	r2, [pc, #328]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024d06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8024d0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8024d0c:	4b50      	ldr	r3, [pc, #320]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024d0e:	689b      	ldr	r3, [r3, #8]
 8024d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8024d14:	687b      	ldr	r3, [r7, #4]
 8024d16:	689b      	ldr	r3, [r3, #8]
 8024d18:	494d      	ldr	r1, [pc, #308]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024d1a:	4313      	orrs	r3, r2
 8024d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8024d1e:	687b      	ldr	r3, [r7, #4]
 8024d20:	681b      	ldr	r3, [r3, #0]
 8024d22:	f003 0301 	and.w	r3, r3, #1
 8024d26:	2b00      	cmp	r3, #0
 8024d28:	d044      	beq.n	8024db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8024d2a:	687b      	ldr	r3, [r7, #4]
 8024d2c:	685b      	ldr	r3, [r3, #4]
 8024d2e:	2b01      	cmp	r3, #1
 8024d30:	d107      	bne.n	8024d42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8024d32:	4b47      	ldr	r3, [pc, #284]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024d34:	681b      	ldr	r3, [r3, #0]
 8024d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024d3a:	2b00      	cmp	r3, #0
 8024d3c:	d119      	bne.n	8024d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8024d3e:	2301      	movs	r3, #1
 8024d40:	e07f      	b.n	8024e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8024d42:	687b      	ldr	r3, [r7, #4]
 8024d44:	685b      	ldr	r3, [r3, #4]
 8024d46:	2b02      	cmp	r3, #2
 8024d48:	d003      	beq.n	8024d52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8024d4a:	687b      	ldr	r3, [r7, #4]
 8024d4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8024d4e:	2b03      	cmp	r3, #3
 8024d50:	d107      	bne.n	8024d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8024d52:	4b3f      	ldr	r3, [pc, #252]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024d54:	681b      	ldr	r3, [r3, #0]
 8024d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024d5a:	2b00      	cmp	r3, #0
 8024d5c:	d109      	bne.n	8024d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8024d5e:	2301      	movs	r3, #1
 8024d60:	e06f      	b.n	8024e42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8024d62:	4b3b      	ldr	r3, [pc, #236]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024d64:	681b      	ldr	r3, [r3, #0]
 8024d66:	f003 0302 	and.w	r3, r3, #2
 8024d6a:	2b00      	cmp	r3, #0
 8024d6c:	d101      	bne.n	8024d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8024d6e:	2301      	movs	r3, #1
 8024d70:	e067      	b.n	8024e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8024d72:	4b37      	ldr	r3, [pc, #220]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024d74:	689b      	ldr	r3, [r3, #8]
 8024d76:	f023 0203 	bic.w	r2, r3, #3
 8024d7a:	687b      	ldr	r3, [r7, #4]
 8024d7c:	685b      	ldr	r3, [r3, #4]
 8024d7e:	4934      	ldr	r1, [pc, #208]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024d80:	4313      	orrs	r3, r2
 8024d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8024d84:	f7fe f970 	bl	8023068 <HAL_GetTick>
 8024d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8024d8a:	e00a      	b.n	8024da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8024d8c:	f7fe f96c 	bl	8023068 <HAL_GetTick>
 8024d90:	4602      	mov	r2, r0
 8024d92:	68fb      	ldr	r3, [r7, #12]
 8024d94:	1ad3      	subs	r3, r2, r3
 8024d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8024d9a:	4293      	cmp	r3, r2
 8024d9c:	d901      	bls.n	8024da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8024d9e:	2303      	movs	r3, #3
 8024da0:	e04f      	b.n	8024e42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8024da2:	4b2b      	ldr	r3, [pc, #172]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024da4:	689b      	ldr	r3, [r3, #8]
 8024da6:	f003 020c 	and.w	r2, r3, #12
 8024daa:	687b      	ldr	r3, [r7, #4]
 8024dac:	685b      	ldr	r3, [r3, #4]
 8024dae:	009b      	lsls	r3, r3, #2
 8024db0:	429a      	cmp	r2, r3
 8024db2:	d1eb      	bne.n	8024d8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8024db4:	4b25      	ldr	r3, [pc, #148]	; (8024e4c <HAL_RCC_ClockConfig+0x1b8>)
 8024db6:	681b      	ldr	r3, [r3, #0]
 8024db8:	f003 030f 	and.w	r3, r3, #15
 8024dbc:	683a      	ldr	r2, [r7, #0]
 8024dbe:	429a      	cmp	r2, r3
 8024dc0:	d20c      	bcs.n	8024ddc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8024dc2:	4b22      	ldr	r3, [pc, #136]	; (8024e4c <HAL_RCC_ClockConfig+0x1b8>)
 8024dc4:	683a      	ldr	r2, [r7, #0]
 8024dc6:	b2d2      	uxtb	r2, r2
 8024dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8024dca:	4b20      	ldr	r3, [pc, #128]	; (8024e4c <HAL_RCC_ClockConfig+0x1b8>)
 8024dcc:	681b      	ldr	r3, [r3, #0]
 8024dce:	f003 030f 	and.w	r3, r3, #15
 8024dd2:	683a      	ldr	r2, [r7, #0]
 8024dd4:	429a      	cmp	r2, r3
 8024dd6:	d001      	beq.n	8024ddc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8024dd8:	2301      	movs	r3, #1
 8024dda:	e032      	b.n	8024e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024ddc:	687b      	ldr	r3, [r7, #4]
 8024dde:	681b      	ldr	r3, [r3, #0]
 8024de0:	f003 0304 	and.w	r3, r3, #4
 8024de4:	2b00      	cmp	r3, #0
 8024de6:	d008      	beq.n	8024dfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8024de8:	4b19      	ldr	r3, [pc, #100]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024dea:	689b      	ldr	r3, [r3, #8]
 8024dec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8024df0:	687b      	ldr	r3, [r7, #4]
 8024df2:	68db      	ldr	r3, [r3, #12]
 8024df4:	4916      	ldr	r1, [pc, #88]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024df6:	4313      	orrs	r3, r2
 8024df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024dfa:	687b      	ldr	r3, [r7, #4]
 8024dfc:	681b      	ldr	r3, [r3, #0]
 8024dfe:	f003 0308 	and.w	r3, r3, #8
 8024e02:	2b00      	cmp	r3, #0
 8024e04:	d009      	beq.n	8024e1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8024e06:	4b12      	ldr	r3, [pc, #72]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024e08:	689b      	ldr	r3, [r3, #8]
 8024e0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8024e0e:	687b      	ldr	r3, [r7, #4]
 8024e10:	691b      	ldr	r3, [r3, #16]
 8024e12:	00db      	lsls	r3, r3, #3
 8024e14:	490e      	ldr	r1, [pc, #56]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024e16:	4313      	orrs	r3, r2
 8024e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8024e1a:	f000 f821 	bl	8024e60 <HAL_RCC_GetSysClockFreq>
 8024e1e:	4601      	mov	r1, r0
 8024e20:	4b0b      	ldr	r3, [pc, #44]	; (8024e50 <HAL_RCC_ClockConfig+0x1bc>)
 8024e22:	689b      	ldr	r3, [r3, #8]
 8024e24:	091b      	lsrs	r3, r3, #4
 8024e26:	f003 030f 	and.w	r3, r3, #15
 8024e2a:	4a0a      	ldr	r2, [pc, #40]	; (8024e54 <HAL_RCC_ClockConfig+0x1c0>)
 8024e2c:	5cd3      	ldrb	r3, [r2, r3]
 8024e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8024e32:	4a09      	ldr	r2, [pc, #36]	; (8024e58 <HAL_RCC_ClockConfig+0x1c4>)
 8024e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8024e36:	4b09      	ldr	r3, [pc, #36]	; (8024e5c <HAL_RCC_ClockConfig+0x1c8>)
 8024e38:	681b      	ldr	r3, [r3, #0]
 8024e3a:	4618      	mov	r0, r3
 8024e3c:	f7fe f8d0 	bl	8022fe0 <HAL_InitTick>

  return HAL_OK;
 8024e40:	2300      	movs	r3, #0
}
 8024e42:	4618      	mov	r0, r3
 8024e44:	3710      	adds	r7, #16
 8024e46:	46bd      	mov	sp, r7
 8024e48:	bd80      	pop	{r7, pc}
 8024e4a:	bf00      	nop
 8024e4c:	40023c00 	.word	0x40023c00
 8024e50:	40023800 	.word	0x40023800
 8024e54:	080285b8 	.word	0x080285b8
 8024e58:	20000000 	.word	0x20000000
 8024e5c:	20000004 	.word	0x20000004

08024e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8024e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e62:	b085      	sub	sp, #20
 8024e64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8024e66:	2300      	movs	r3, #0
 8024e68:	607b      	str	r3, [r7, #4]
 8024e6a:	2300      	movs	r3, #0
 8024e6c:	60fb      	str	r3, [r7, #12]
 8024e6e:	2300      	movs	r3, #0
 8024e70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8024e72:	2300      	movs	r3, #0
 8024e74:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8024e76:	4b50      	ldr	r3, [pc, #320]	; (8024fb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8024e78:	689b      	ldr	r3, [r3, #8]
 8024e7a:	f003 030c 	and.w	r3, r3, #12
 8024e7e:	2b04      	cmp	r3, #4
 8024e80:	d007      	beq.n	8024e92 <HAL_RCC_GetSysClockFreq+0x32>
 8024e82:	2b08      	cmp	r3, #8
 8024e84:	d008      	beq.n	8024e98 <HAL_RCC_GetSysClockFreq+0x38>
 8024e86:	2b00      	cmp	r3, #0
 8024e88:	f040 808d 	bne.w	8024fa6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8024e8c:	4b4b      	ldr	r3, [pc, #300]	; (8024fbc <HAL_RCC_GetSysClockFreq+0x15c>)
 8024e8e:	60bb      	str	r3, [r7, #8]
       break;
 8024e90:	e08c      	b.n	8024fac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8024e92:	4b4b      	ldr	r3, [pc, #300]	; (8024fc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8024e94:	60bb      	str	r3, [r7, #8]
      break;
 8024e96:	e089      	b.n	8024fac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8024e98:	4b47      	ldr	r3, [pc, #284]	; (8024fb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8024e9a:	685b      	ldr	r3, [r3, #4]
 8024e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024ea0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8024ea2:	4b45      	ldr	r3, [pc, #276]	; (8024fb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8024ea4:	685b      	ldr	r3, [r3, #4]
 8024ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8024eaa:	2b00      	cmp	r3, #0
 8024eac:	d023      	beq.n	8024ef6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8024eae:	4b42      	ldr	r3, [pc, #264]	; (8024fb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8024eb0:	685b      	ldr	r3, [r3, #4]
 8024eb2:	099b      	lsrs	r3, r3, #6
 8024eb4:	f04f 0400 	mov.w	r4, #0
 8024eb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8024ebc:	f04f 0200 	mov.w	r2, #0
 8024ec0:	ea03 0501 	and.w	r5, r3, r1
 8024ec4:	ea04 0602 	and.w	r6, r4, r2
 8024ec8:	4a3d      	ldr	r2, [pc, #244]	; (8024fc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8024eca:	fb02 f106 	mul.w	r1, r2, r6
 8024ece:	2200      	movs	r2, #0
 8024ed0:	fb02 f205 	mul.w	r2, r2, r5
 8024ed4:	440a      	add	r2, r1
 8024ed6:	493a      	ldr	r1, [pc, #232]	; (8024fc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8024ed8:	fba5 0101 	umull	r0, r1, r5, r1
 8024edc:	1853      	adds	r3, r2, r1
 8024ede:	4619      	mov	r1, r3
 8024ee0:	687b      	ldr	r3, [r7, #4]
 8024ee2:	f04f 0400 	mov.w	r4, #0
 8024ee6:	461a      	mov	r2, r3
 8024ee8:	4623      	mov	r3, r4
 8024eea:	f7fb fd95 	bl	8020a18 <__aeabi_uldivmod>
 8024eee:	4603      	mov	r3, r0
 8024ef0:	460c      	mov	r4, r1
 8024ef2:	60fb      	str	r3, [r7, #12]
 8024ef4:	e049      	b.n	8024f8a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8024ef6:	4b30      	ldr	r3, [pc, #192]	; (8024fb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8024ef8:	685b      	ldr	r3, [r3, #4]
 8024efa:	099b      	lsrs	r3, r3, #6
 8024efc:	f04f 0400 	mov.w	r4, #0
 8024f00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8024f04:	f04f 0200 	mov.w	r2, #0
 8024f08:	ea03 0501 	and.w	r5, r3, r1
 8024f0c:	ea04 0602 	and.w	r6, r4, r2
 8024f10:	4629      	mov	r1, r5
 8024f12:	4632      	mov	r2, r6
 8024f14:	f04f 0300 	mov.w	r3, #0
 8024f18:	f04f 0400 	mov.w	r4, #0
 8024f1c:	0154      	lsls	r4, r2, #5
 8024f1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8024f22:	014b      	lsls	r3, r1, #5
 8024f24:	4619      	mov	r1, r3
 8024f26:	4622      	mov	r2, r4
 8024f28:	1b49      	subs	r1, r1, r5
 8024f2a:	eb62 0206 	sbc.w	r2, r2, r6
 8024f2e:	f04f 0300 	mov.w	r3, #0
 8024f32:	f04f 0400 	mov.w	r4, #0
 8024f36:	0194      	lsls	r4, r2, #6
 8024f38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8024f3c:	018b      	lsls	r3, r1, #6
 8024f3e:	1a5b      	subs	r3, r3, r1
 8024f40:	eb64 0402 	sbc.w	r4, r4, r2
 8024f44:	f04f 0100 	mov.w	r1, #0
 8024f48:	f04f 0200 	mov.w	r2, #0
 8024f4c:	00e2      	lsls	r2, r4, #3
 8024f4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8024f52:	00d9      	lsls	r1, r3, #3
 8024f54:	460b      	mov	r3, r1
 8024f56:	4614      	mov	r4, r2
 8024f58:	195b      	adds	r3, r3, r5
 8024f5a:	eb44 0406 	adc.w	r4, r4, r6
 8024f5e:	f04f 0100 	mov.w	r1, #0
 8024f62:	f04f 0200 	mov.w	r2, #0
 8024f66:	02a2      	lsls	r2, r4, #10
 8024f68:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8024f6c:	0299      	lsls	r1, r3, #10
 8024f6e:	460b      	mov	r3, r1
 8024f70:	4614      	mov	r4, r2
 8024f72:	4618      	mov	r0, r3
 8024f74:	4621      	mov	r1, r4
 8024f76:	687b      	ldr	r3, [r7, #4]
 8024f78:	f04f 0400 	mov.w	r4, #0
 8024f7c:	461a      	mov	r2, r3
 8024f7e:	4623      	mov	r3, r4
 8024f80:	f7fb fd4a 	bl	8020a18 <__aeabi_uldivmod>
 8024f84:	4603      	mov	r3, r0
 8024f86:	460c      	mov	r4, r1
 8024f88:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8024f8a:	4b0b      	ldr	r3, [pc, #44]	; (8024fb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8024f8c:	685b      	ldr	r3, [r3, #4]
 8024f8e:	0c1b      	lsrs	r3, r3, #16
 8024f90:	f003 0303 	and.w	r3, r3, #3
 8024f94:	3301      	adds	r3, #1
 8024f96:	005b      	lsls	r3, r3, #1
 8024f98:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8024f9a:	68fa      	ldr	r2, [r7, #12]
 8024f9c:	683b      	ldr	r3, [r7, #0]
 8024f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8024fa2:	60bb      	str	r3, [r7, #8]
      break;
 8024fa4:	e002      	b.n	8024fac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8024fa6:	4b05      	ldr	r3, [pc, #20]	; (8024fbc <HAL_RCC_GetSysClockFreq+0x15c>)
 8024fa8:	60bb      	str	r3, [r7, #8]
      break;
 8024faa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8024fac:	68bb      	ldr	r3, [r7, #8]
}
 8024fae:	4618      	mov	r0, r3
 8024fb0:	3714      	adds	r7, #20
 8024fb2:	46bd      	mov	sp, r7
 8024fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024fb6:	bf00      	nop
 8024fb8:	40023800 	.word	0x40023800
 8024fbc:	00f42400 	.word	0x00f42400
 8024fc0:	00b71b00 	.word	0x00b71b00

08024fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8024fc4:	b480      	push	{r7}
 8024fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8024fc8:	4b03      	ldr	r3, [pc, #12]	; (8024fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8024fca:	681b      	ldr	r3, [r3, #0]
}
 8024fcc:	4618      	mov	r0, r3
 8024fce:	46bd      	mov	sp, r7
 8024fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fd4:	4770      	bx	lr
 8024fd6:	bf00      	nop
 8024fd8:	20000000 	.word	0x20000000

08024fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8024fdc:	b580      	push	{r7, lr}
 8024fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8024fe0:	f7ff fff0 	bl	8024fc4 <HAL_RCC_GetHCLKFreq>
 8024fe4:	4601      	mov	r1, r0
 8024fe6:	4b05      	ldr	r3, [pc, #20]	; (8024ffc <HAL_RCC_GetPCLK1Freq+0x20>)
 8024fe8:	689b      	ldr	r3, [r3, #8]
 8024fea:	0a9b      	lsrs	r3, r3, #10
 8024fec:	f003 0307 	and.w	r3, r3, #7
 8024ff0:	4a03      	ldr	r2, [pc, #12]	; (8025000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8024ff2:	5cd3      	ldrb	r3, [r2, r3]
 8024ff4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8024ff8:	4618      	mov	r0, r3
 8024ffa:	bd80      	pop	{r7, pc}
 8024ffc:	40023800 	.word	0x40023800
 8025000:	080285c8 	.word	0x080285c8

08025004 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8025004:	b580      	push	{r7, lr}
 8025006:	b082      	sub	sp, #8
 8025008:	af00      	add	r7, sp, #0
 802500a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802500c:	687b      	ldr	r3, [r7, #4]
 802500e:	2b00      	cmp	r3, #0
 8025010:	d101      	bne.n	8025016 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8025012:	2301      	movs	r3, #1
 8025014:	e056      	b.n	80250c4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8025016:	687b      	ldr	r3, [r7, #4]
 8025018:	2200      	movs	r2, #0
 802501a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802501c:	687b      	ldr	r3, [r7, #4]
 802501e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8025022:	b2db      	uxtb	r3, r3
 8025024:	2b00      	cmp	r3, #0
 8025026:	d106      	bne.n	8025036 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8025028:	687b      	ldr	r3, [r7, #4]
 802502a:	2200      	movs	r2, #0
 802502c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8025030:	6878      	ldr	r0, [r7, #4]
 8025032:	f7fd facd 	bl	80225d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8025036:	687b      	ldr	r3, [r7, #4]
 8025038:	2202      	movs	r2, #2
 802503a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802503e:	687b      	ldr	r3, [r7, #4]
 8025040:	681b      	ldr	r3, [r3, #0]
 8025042:	681a      	ldr	r2, [r3, #0]
 8025044:	687b      	ldr	r3, [r7, #4]
 8025046:	681b      	ldr	r3, [r3, #0]
 8025048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802504c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 802504e:	687b      	ldr	r3, [r7, #4]
 8025050:	685a      	ldr	r2, [r3, #4]
 8025052:	687b      	ldr	r3, [r7, #4]
 8025054:	689b      	ldr	r3, [r3, #8]
 8025056:	431a      	orrs	r2, r3
 8025058:	687b      	ldr	r3, [r7, #4]
 802505a:	68db      	ldr	r3, [r3, #12]
 802505c:	431a      	orrs	r2, r3
 802505e:	687b      	ldr	r3, [r7, #4]
 8025060:	691b      	ldr	r3, [r3, #16]
 8025062:	431a      	orrs	r2, r3
 8025064:	687b      	ldr	r3, [r7, #4]
 8025066:	695b      	ldr	r3, [r3, #20]
 8025068:	431a      	orrs	r2, r3
 802506a:	687b      	ldr	r3, [r7, #4]
 802506c:	699b      	ldr	r3, [r3, #24]
 802506e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025072:	431a      	orrs	r2, r3
 8025074:	687b      	ldr	r3, [r7, #4]
 8025076:	69db      	ldr	r3, [r3, #28]
 8025078:	431a      	orrs	r2, r3
 802507a:	687b      	ldr	r3, [r7, #4]
 802507c:	6a1b      	ldr	r3, [r3, #32]
 802507e:	ea42 0103 	orr.w	r1, r2, r3
 8025082:	687b      	ldr	r3, [r7, #4]
 8025084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8025086:	687b      	ldr	r3, [r7, #4]
 8025088:	681b      	ldr	r3, [r3, #0]
 802508a:	430a      	orrs	r2, r1
 802508c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 802508e:	687b      	ldr	r3, [r7, #4]
 8025090:	699b      	ldr	r3, [r3, #24]
 8025092:	0c1b      	lsrs	r3, r3, #16
 8025094:	f003 0104 	and.w	r1, r3, #4
 8025098:	687b      	ldr	r3, [r7, #4]
 802509a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802509c:	687b      	ldr	r3, [r7, #4]
 802509e:	681b      	ldr	r3, [r3, #0]
 80250a0:	430a      	orrs	r2, r1
 80250a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80250a4:	687b      	ldr	r3, [r7, #4]
 80250a6:	681b      	ldr	r3, [r3, #0]
 80250a8:	69da      	ldr	r2, [r3, #28]
 80250aa:	687b      	ldr	r3, [r7, #4]
 80250ac:	681b      	ldr	r3, [r3, #0]
 80250ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80250b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80250b4:	687b      	ldr	r3, [r7, #4]
 80250b6:	2200      	movs	r2, #0
 80250b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80250ba:	687b      	ldr	r3, [r7, #4]
 80250bc:	2201      	movs	r2, #1
 80250be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80250c2:	2300      	movs	r3, #0
}
 80250c4:	4618      	mov	r0, r3
 80250c6:	3708      	adds	r7, #8
 80250c8:	46bd      	mov	sp, r7
 80250ca:	bd80      	pop	{r7, pc}

080250cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80250cc:	b580      	push	{r7, lr}
 80250ce:	b088      	sub	sp, #32
 80250d0:	af00      	add	r7, sp, #0
 80250d2:	60f8      	str	r0, [r7, #12]
 80250d4:	60b9      	str	r1, [r7, #8]
 80250d6:	603b      	str	r3, [r7, #0]
 80250d8:	4613      	mov	r3, r2
 80250da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80250dc:	2300      	movs	r3, #0
 80250de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80250e0:	68fb      	ldr	r3, [r7, #12]
 80250e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80250e6:	2b01      	cmp	r3, #1
 80250e8:	d101      	bne.n	80250ee <HAL_SPI_Transmit+0x22>
 80250ea:	2302      	movs	r3, #2
 80250ec:	e11e      	b.n	802532c <HAL_SPI_Transmit+0x260>
 80250ee:	68fb      	ldr	r3, [r7, #12]
 80250f0:	2201      	movs	r2, #1
 80250f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80250f6:	f7fd ffb7 	bl	8023068 <HAL_GetTick>
 80250fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80250fc:	88fb      	ldrh	r3, [r7, #6]
 80250fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8025100:	68fb      	ldr	r3, [r7, #12]
 8025102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8025106:	b2db      	uxtb	r3, r3
 8025108:	2b01      	cmp	r3, #1
 802510a:	d002      	beq.n	8025112 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 802510c:	2302      	movs	r3, #2
 802510e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8025110:	e103      	b.n	802531a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8025112:	68bb      	ldr	r3, [r7, #8]
 8025114:	2b00      	cmp	r3, #0
 8025116:	d002      	beq.n	802511e <HAL_SPI_Transmit+0x52>
 8025118:	88fb      	ldrh	r3, [r7, #6]
 802511a:	2b00      	cmp	r3, #0
 802511c:	d102      	bne.n	8025124 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 802511e:	2301      	movs	r3, #1
 8025120:	77fb      	strb	r3, [r7, #31]
    goto error;
 8025122:	e0fa      	b.n	802531a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8025124:	68fb      	ldr	r3, [r7, #12]
 8025126:	2203      	movs	r2, #3
 8025128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802512c:	68fb      	ldr	r3, [r7, #12]
 802512e:	2200      	movs	r2, #0
 8025130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8025132:	68fb      	ldr	r3, [r7, #12]
 8025134:	68ba      	ldr	r2, [r7, #8]
 8025136:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8025138:	68fb      	ldr	r3, [r7, #12]
 802513a:	88fa      	ldrh	r2, [r7, #6]
 802513c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802513e:	68fb      	ldr	r3, [r7, #12]
 8025140:	88fa      	ldrh	r2, [r7, #6]
 8025142:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8025144:	68fb      	ldr	r3, [r7, #12]
 8025146:	2200      	movs	r2, #0
 8025148:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 802514a:	68fb      	ldr	r3, [r7, #12]
 802514c:	2200      	movs	r2, #0
 802514e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8025150:	68fb      	ldr	r3, [r7, #12]
 8025152:	2200      	movs	r2, #0
 8025154:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8025156:	68fb      	ldr	r3, [r7, #12]
 8025158:	2200      	movs	r2, #0
 802515a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 802515c:	68fb      	ldr	r3, [r7, #12]
 802515e:	2200      	movs	r2, #0
 8025160:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8025162:	68fb      	ldr	r3, [r7, #12]
 8025164:	689b      	ldr	r3, [r3, #8]
 8025166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802516a:	d107      	bne.n	802517c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 802516c:	68fb      	ldr	r3, [r7, #12]
 802516e:	681b      	ldr	r3, [r3, #0]
 8025170:	681a      	ldr	r2, [r3, #0]
 8025172:	68fb      	ldr	r3, [r7, #12]
 8025174:	681b      	ldr	r3, [r3, #0]
 8025176:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802517a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802517c:	68fb      	ldr	r3, [r7, #12]
 802517e:	681b      	ldr	r3, [r3, #0]
 8025180:	681b      	ldr	r3, [r3, #0]
 8025182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025186:	2b40      	cmp	r3, #64	; 0x40
 8025188:	d007      	beq.n	802519a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802518a:	68fb      	ldr	r3, [r7, #12]
 802518c:	681b      	ldr	r3, [r3, #0]
 802518e:	681a      	ldr	r2, [r3, #0]
 8025190:	68fb      	ldr	r3, [r7, #12]
 8025192:	681b      	ldr	r3, [r3, #0]
 8025194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8025198:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802519a:	68fb      	ldr	r3, [r7, #12]
 802519c:	68db      	ldr	r3, [r3, #12]
 802519e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80251a2:	d14b      	bne.n	802523c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80251a4:	68fb      	ldr	r3, [r7, #12]
 80251a6:	685b      	ldr	r3, [r3, #4]
 80251a8:	2b00      	cmp	r3, #0
 80251aa:	d002      	beq.n	80251b2 <HAL_SPI_Transmit+0xe6>
 80251ac:	8afb      	ldrh	r3, [r7, #22]
 80251ae:	2b01      	cmp	r3, #1
 80251b0:	d13e      	bne.n	8025230 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80251b2:	68fb      	ldr	r3, [r7, #12]
 80251b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80251b6:	881a      	ldrh	r2, [r3, #0]
 80251b8:	68fb      	ldr	r3, [r7, #12]
 80251ba:	681b      	ldr	r3, [r3, #0]
 80251bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80251be:	68fb      	ldr	r3, [r7, #12]
 80251c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80251c2:	1c9a      	adds	r2, r3, #2
 80251c4:	68fb      	ldr	r3, [r7, #12]
 80251c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80251c8:	68fb      	ldr	r3, [r7, #12]
 80251ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80251cc:	b29b      	uxth	r3, r3
 80251ce:	3b01      	subs	r3, #1
 80251d0:	b29a      	uxth	r2, r3
 80251d2:	68fb      	ldr	r3, [r7, #12]
 80251d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80251d6:	e02b      	b.n	8025230 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80251d8:	68fb      	ldr	r3, [r7, #12]
 80251da:	681b      	ldr	r3, [r3, #0]
 80251dc:	689b      	ldr	r3, [r3, #8]
 80251de:	f003 0302 	and.w	r3, r3, #2
 80251e2:	2b02      	cmp	r3, #2
 80251e4:	d112      	bne.n	802520c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80251e6:	68fb      	ldr	r3, [r7, #12]
 80251e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80251ea:	881a      	ldrh	r2, [r3, #0]
 80251ec:	68fb      	ldr	r3, [r7, #12]
 80251ee:	681b      	ldr	r3, [r3, #0]
 80251f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80251f2:	68fb      	ldr	r3, [r7, #12]
 80251f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80251f6:	1c9a      	adds	r2, r3, #2
 80251f8:	68fb      	ldr	r3, [r7, #12]
 80251fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80251fc:	68fb      	ldr	r3, [r7, #12]
 80251fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025200:	b29b      	uxth	r3, r3
 8025202:	3b01      	subs	r3, #1
 8025204:	b29a      	uxth	r2, r3
 8025206:	68fb      	ldr	r3, [r7, #12]
 8025208:	86da      	strh	r2, [r3, #54]	; 0x36
 802520a:	e011      	b.n	8025230 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802520c:	f7fd ff2c 	bl	8023068 <HAL_GetTick>
 8025210:	4602      	mov	r2, r0
 8025212:	69bb      	ldr	r3, [r7, #24]
 8025214:	1ad3      	subs	r3, r2, r3
 8025216:	683a      	ldr	r2, [r7, #0]
 8025218:	429a      	cmp	r2, r3
 802521a:	d803      	bhi.n	8025224 <HAL_SPI_Transmit+0x158>
 802521c:	683b      	ldr	r3, [r7, #0]
 802521e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025222:	d102      	bne.n	802522a <HAL_SPI_Transmit+0x15e>
 8025224:	683b      	ldr	r3, [r7, #0]
 8025226:	2b00      	cmp	r3, #0
 8025228:	d102      	bne.n	8025230 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 802522a:	2303      	movs	r3, #3
 802522c:	77fb      	strb	r3, [r7, #31]
          goto error;
 802522e:	e074      	b.n	802531a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8025230:	68fb      	ldr	r3, [r7, #12]
 8025232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025234:	b29b      	uxth	r3, r3
 8025236:	2b00      	cmp	r3, #0
 8025238:	d1ce      	bne.n	80251d8 <HAL_SPI_Transmit+0x10c>
 802523a:	e04c      	b.n	80252d6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802523c:	68fb      	ldr	r3, [r7, #12]
 802523e:	685b      	ldr	r3, [r3, #4]
 8025240:	2b00      	cmp	r3, #0
 8025242:	d002      	beq.n	802524a <HAL_SPI_Transmit+0x17e>
 8025244:	8afb      	ldrh	r3, [r7, #22]
 8025246:	2b01      	cmp	r3, #1
 8025248:	d140      	bne.n	80252cc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802524a:	68fb      	ldr	r3, [r7, #12]
 802524c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802524e:	68fb      	ldr	r3, [r7, #12]
 8025250:	681b      	ldr	r3, [r3, #0]
 8025252:	330c      	adds	r3, #12
 8025254:	7812      	ldrb	r2, [r2, #0]
 8025256:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8025258:	68fb      	ldr	r3, [r7, #12]
 802525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802525c:	1c5a      	adds	r2, r3, #1
 802525e:	68fb      	ldr	r3, [r7, #12]
 8025260:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8025262:	68fb      	ldr	r3, [r7, #12]
 8025264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025266:	b29b      	uxth	r3, r3
 8025268:	3b01      	subs	r3, #1
 802526a:	b29a      	uxth	r2, r3
 802526c:	68fb      	ldr	r3, [r7, #12]
 802526e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8025270:	e02c      	b.n	80252cc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8025272:	68fb      	ldr	r3, [r7, #12]
 8025274:	681b      	ldr	r3, [r3, #0]
 8025276:	689b      	ldr	r3, [r3, #8]
 8025278:	f003 0302 	and.w	r3, r3, #2
 802527c:	2b02      	cmp	r3, #2
 802527e:	d113      	bne.n	80252a8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8025280:	68fb      	ldr	r3, [r7, #12]
 8025282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8025284:	68fb      	ldr	r3, [r7, #12]
 8025286:	681b      	ldr	r3, [r3, #0]
 8025288:	330c      	adds	r3, #12
 802528a:	7812      	ldrb	r2, [r2, #0]
 802528c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 802528e:	68fb      	ldr	r3, [r7, #12]
 8025290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025292:	1c5a      	adds	r2, r3, #1
 8025294:	68fb      	ldr	r3, [r7, #12]
 8025296:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8025298:	68fb      	ldr	r3, [r7, #12]
 802529a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802529c:	b29b      	uxth	r3, r3
 802529e:	3b01      	subs	r3, #1
 80252a0:	b29a      	uxth	r2, r3
 80252a2:	68fb      	ldr	r3, [r7, #12]
 80252a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80252a6:	e011      	b.n	80252cc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80252a8:	f7fd fede 	bl	8023068 <HAL_GetTick>
 80252ac:	4602      	mov	r2, r0
 80252ae:	69bb      	ldr	r3, [r7, #24]
 80252b0:	1ad3      	subs	r3, r2, r3
 80252b2:	683a      	ldr	r2, [r7, #0]
 80252b4:	429a      	cmp	r2, r3
 80252b6:	d803      	bhi.n	80252c0 <HAL_SPI_Transmit+0x1f4>
 80252b8:	683b      	ldr	r3, [r7, #0]
 80252ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80252be:	d102      	bne.n	80252c6 <HAL_SPI_Transmit+0x1fa>
 80252c0:	683b      	ldr	r3, [r7, #0]
 80252c2:	2b00      	cmp	r3, #0
 80252c4:	d102      	bne.n	80252cc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80252c6:	2303      	movs	r3, #3
 80252c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80252ca:	e026      	b.n	802531a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80252cc:	68fb      	ldr	r3, [r7, #12]
 80252ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80252d0:	b29b      	uxth	r3, r3
 80252d2:	2b00      	cmp	r3, #0
 80252d4:	d1cd      	bne.n	8025272 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80252d6:	69ba      	ldr	r2, [r7, #24]
 80252d8:	6839      	ldr	r1, [r7, #0]
 80252da:	68f8      	ldr	r0, [r7, #12]
 80252dc:	f000 fba4 	bl	8025a28 <SPI_EndRxTxTransaction>
 80252e0:	4603      	mov	r3, r0
 80252e2:	2b00      	cmp	r3, #0
 80252e4:	d002      	beq.n	80252ec <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80252e6:	68fb      	ldr	r3, [r7, #12]
 80252e8:	2220      	movs	r2, #32
 80252ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80252ec:	68fb      	ldr	r3, [r7, #12]
 80252ee:	689b      	ldr	r3, [r3, #8]
 80252f0:	2b00      	cmp	r3, #0
 80252f2:	d10a      	bne.n	802530a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80252f4:	2300      	movs	r3, #0
 80252f6:	613b      	str	r3, [r7, #16]
 80252f8:	68fb      	ldr	r3, [r7, #12]
 80252fa:	681b      	ldr	r3, [r3, #0]
 80252fc:	68db      	ldr	r3, [r3, #12]
 80252fe:	613b      	str	r3, [r7, #16]
 8025300:	68fb      	ldr	r3, [r7, #12]
 8025302:	681b      	ldr	r3, [r3, #0]
 8025304:	689b      	ldr	r3, [r3, #8]
 8025306:	613b      	str	r3, [r7, #16]
 8025308:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802530a:	68fb      	ldr	r3, [r7, #12]
 802530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802530e:	2b00      	cmp	r3, #0
 8025310:	d002      	beq.n	8025318 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8025312:	2301      	movs	r3, #1
 8025314:	77fb      	strb	r3, [r7, #31]
 8025316:	e000      	b.n	802531a <HAL_SPI_Transmit+0x24e>
  }

error:
 8025318:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802531a:	68fb      	ldr	r3, [r7, #12]
 802531c:	2201      	movs	r2, #1
 802531e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8025322:	68fb      	ldr	r3, [r7, #12]
 8025324:	2200      	movs	r2, #0
 8025326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802532a:	7ffb      	ldrb	r3, [r7, #31]
}
 802532c:	4618      	mov	r0, r3
 802532e:	3720      	adds	r7, #32
 8025330:	46bd      	mov	sp, r7
 8025332:	bd80      	pop	{r7, pc}

08025334 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8025334:	b580      	push	{r7, lr}
 8025336:	b088      	sub	sp, #32
 8025338:	af02      	add	r7, sp, #8
 802533a:	60f8      	str	r0, [r7, #12]
 802533c:	60b9      	str	r1, [r7, #8]
 802533e:	603b      	str	r3, [r7, #0]
 8025340:	4613      	mov	r3, r2
 8025342:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8025344:	2300      	movs	r3, #0
 8025346:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8025348:	68fb      	ldr	r3, [r7, #12]
 802534a:	685b      	ldr	r3, [r3, #4]
 802534c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8025350:	d112      	bne.n	8025378 <HAL_SPI_Receive+0x44>
 8025352:	68fb      	ldr	r3, [r7, #12]
 8025354:	689b      	ldr	r3, [r3, #8]
 8025356:	2b00      	cmp	r3, #0
 8025358:	d10e      	bne.n	8025378 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 802535a:	68fb      	ldr	r3, [r7, #12]
 802535c:	2204      	movs	r2, #4
 802535e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8025362:	88fa      	ldrh	r2, [r7, #6]
 8025364:	683b      	ldr	r3, [r7, #0]
 8025366:	9300      	str	r3, [sp, #0]
 8025368:	4613      	mov	r3, r2
 802536a:	68ba      	ldr	r2, [r7, #8]
 802536c:	68b9      	ldr	r1, [r7, #8]
 802536e:	68f8      	ldr	r0, [r7, #12]
 8025370:	f000 f8e9 	bl	8025546 <HAL_SPI_TransmitReceive>
 8025374:	4603      	mov	r3, r0
 8025376:	e0e2      	b.n	802553e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8025378:	68fb      	ldr	r3, [r7, #12]
 802537a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802537e:	2b01      	cmp	r3, #1
 8025380:	d101      	bne.n	8025386 <HAL_SPI_Receive+0x52>
 8025382:	2302      	movs	r3, #2
 8025384:	e0db      	b.n	802553e <HAL_SPI_Receive+0x20a>
 8025386:	68fb      	ldr	r3, [r7, #12]
 8025388:	2201      	movs	r2, #1
 802538a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802538e:	f7fd fe6b 	bl	8023068 <HAL_GetTick>
 8025392:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8025394:	68fb      	ldr	r3, [r7, #12]
 8025396:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802539a:	b2db      	uxtb	r3, r3
 802539c:	2b01      	cmp	r3, #1
 802539e:	d002      	beq.n	80253a6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80253a0:	2302      	movs	r3, #2
 80253a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80253a4:	e0c2      	b.n	802552c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80253a6:	68bb      	ldr	r3, [r7, #8]
 80253a8:	2b00      	cmp	r3, #0
 80253aa:	d002      	beq.n	80253b2 <HAL_SPI_Receive+0x7e>
 80253ac:	88fb      	ldrh	r3, [r7, #6]
 80253ae:	2b00      	cmp	r3, #0
 80253b0:	d102      	bne.n	80253b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80253b2:	2301      	movs	r3, #1
 80253b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80253b6:	e0b9      	b.n	802552c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80253b8:	68fb      	ldr	r3, [r7, #12]
 80253ba:	2204      	movs	r2, #4
 80253bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80253c0:	68fb      	ldr	r3, [r7, #12]
 80253c2:	2200      	movs	r2, #0
 80253c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80253c6:	68fb      	ldr	r3, [r7, #12]
 80253c8:	68ba      	ldr	r2, [r7, #8]
 80253ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80253cc:	68fb      	ldr	r3, [r7, #12]
 80253ce:	88fa      	ldrh	r2, [r7, #6]
 80253d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80253d2:	68fb      	ldr	r3, [r7, #12]
 80253d4:	88fa      	ldrh	r2, [r7, #6]
 80253d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80253d8:	68fb      	ldr	r3, [r7, #12]
 80253da:	2200      	movs	r2, #0
 80253dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80253de:	68fb      	ldr	r3, [r7, #12]
 80253e0:	2200      	movs	r2, #0
 80253e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80253e4:	68fb      	ldr	r3, [r7, #12]
 80253e6:	2200      	movs	r2, #0
 80253e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80253ea:	68fb      	ldr	r3, [r7, #12]
 80253ec:	2200      	movs	r2, #0
 80253ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80253f0:	68fb      	ldr	r3, [r7, #12]
 80253f2:	2200      	movs	r2, #0
 80253f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80253f6:	68fb      	ldr	r3, [r7, #12]
 80253f8:	689b      	ldr	r3, [r3, #8]
 80253fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80253fe:	d107      	bne.n	8025410 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8025400:	68fb      	ldr	r3, [r7, #12]
 8025402:	681b      	ldr	r3, [r3, #0]
 8025404:	681a      	ldr	r2, [r3, #0]
 8025406:	68fb      	ldr	r3, [r7, #12]
 8025408:	681b      	ldr	r3, [r3, #0]
 802540a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802540e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8025410:	68fb      	ldr	r3, [r7, #12]
 8025412:	681b      	ldr	r3, [r3, #0]
 8025414:	681b      	ldr	r3, [r3, #0]
 8025416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802541a:	2b40      	cmp	r3, #64	; 0x40
 802541c:	d007      	beq.n	802542e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802541e:	68fb      	ldr	r3, [r7, #12]
 8025420:	681b      	ldr	r3, [r3, #0]
 8025422:	681a      	ldr	r2, [r3, #0]
 8025424:	68fb      	ldr	r3, [r7, #12]
 8025426:	681b      	ldr	r3, [r3, #0]
 8025428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802542c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 802542e:	68fb      	ldr	r3, [r7, #12]
 8025430:	68db      	ldr	r3, [r3, #12]
 8025432:	2b00      	cmp	r3, #0
 8025434:	d162      	bne.n	80254fc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8025436:	e02e      	b.n	8025496 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8025438:	68fb      	ldr	r3, [r7, #12]
 802543a:	681b      	ldr	r3, [r3, #0]
 802543c:	689b      	ldr	r3, [r3, #8]
 802543e:	f003 0301 	and.w	r3, r3, #1
 8025442:	2b01      	cmp	r3, #1
 8025444:	d115      	bne.n	8025472 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8025446:	68fb      	ldr	r3, [r7, #12]
 8025448:	681b      	ldr	r3, [r3, #0]
 802544a:	f103 020c 	add.w	r2, r3, #12
 802544e:	68fb      	ldr	r3, [r7, #12]
 8025450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025452:	7812      	ldrb	r2, [r2, #0]
 8025454:	b2d2      	uxtb	r2, r2
 8025456:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8025458:	68fb      	ldr	r3, [r7, #12]
 802545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802545c:	1c5a      	adds	r2, r3, #1
 802545e:	68fb      	ldr	r3, [r7, #12]
 8025460:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8025462:	68fb      	ldr	r3, [r7, #12]
 8025464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8025466:	b29b      	uxth	r3, r3
 8025468:	3b01      	subs	r3, #1
 802546a:	b29a      	uxth	r2, r3
 802546c:	68fb      	ldr	r3, [r7, #12]
 802546e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8025470:	e011      	b.n	8025496 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8025472:	f7fd fdf9 	bl	8023068 <HAL_GetTick>
 8025476:	4602      	mov	r2, r0
 8025478:	693b      	ldr	r3, [r7, #16]
 802547a:	1ad3      	subs	r3, r2, r3
 802547c:	683a      	ldr	r2, [r7, #0]
 802547e:	429a      	cmp	r2, r3
 8025480:	d803      	bhi.n	802548a <HAL_SPI_Receive+0x156>
 8025482:	683b      	ldr	r3, [r7, #0]
 8025484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025488:	d102      	bne.n	8025490 <HAL_SPI_Receive+0x15c>
 802548a:	683b      	ldr	r3, [r7, #0]
 802548c:	2b00      	cmp	r3, #0
 802548e:	d102      	bne.n	8025496 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8025490:	2303      	movs	r3, #3
 8025492:	75fb      	strb	r3, [r7, #23]
          goto error;
 8025494:	e04a      	b.n	802552c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8025496:	68fb      	ldr	r3, [r7, #12]
 8025498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802549a:	b29b      	uxth	r3, r3
 802549c:	2b00      	cmp	r3, #0
 802549e:	d1cb      	bne.n	8025438 <HAL_SPI_Receive+0x104>
 80254a0:	e031      	b.n	8025506 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80254a2:	68fb      	ldr	r3, [r7, #12]
 80254a4:	681b      	ldr	r3, [r3, #0]
 80254a6:	689b      	ldr	r3, [r3, #8]
 80254a8:	f003 0301 	and.w	r3, r3, #1
 80254ac:	2b01      	cmp	r3, #1
 80254ae:	d113      	bne.n	80254d8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80254b0:	68fb      	ldr	r3, [r7, #12]
 80254b2:	681b      	ldr	r3, [r3, #0]
 80254b4:	68da      	ldr	r2, [r3, #12]
 80254b6:	68fb      	ldr	r3, [r7, #12]
 80254b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80254ba:	b292      	uxth	r2, r2
 80254bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80254be:	68fb      	ldr	r3, [r7, #12]
 80254c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80254c2:	1c9a      	adds	r2, r3, #2
 80254c4:	68fb      	ldr	r3, [r7, #12]
 80254c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80254c8:	68fb      	ldr	r3, [r7, #12]
 80254ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80254cc:	b29b      	uxth	r3, r3
 80254ce:	3b01      	subs	r3, #1
 80254d0:	b29a      	uxth	r2, r3
 80254d2:	68fb      	ldr	r3, [r7, #12]
 80254d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80254d6:	e011      	b.n	80254fc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80254d8:	f7fd fdc6 	bl	8023068 <HAL_GetTick>
 80254dc:	4602      	mov	r2, r0
 80254de:	693b      	ldr	r3, [r7, #16]
 80254e0:	1ad3      	subs	r3, r2, r3
 80254e2:	683a      	ldr	r2, [r7, #0]
 80254e4:	429a      	cmp	r2, r3
 80254e6:	d803      	bhi.n	80254f0 <HAL_SPI_Receive+0x1bc>
 80254e8:	683b      	ldr	r3, [r7, #0]
 80254ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80254ee:	d102      	bne.n	80254f6 <HAL_SPI_Receive+0x1c2>
 80254f0:	683b      	ldr	r3, [r7, #0]
 80254f2:	2b00      	cmp	r3, #0
 80254f4:	d102      	bne.n	80254fc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80254f6:	2303      	movs	r3, #3
 80254f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80254fa:	e017      	b.n	802552c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80254fc:	68fb      	ldr	r3, [r7, #12]
 80254fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8025500:	b29b      	uxth	r3, r3
 8025502:	2b00      	cmp	r3, #0
 8025504:	d1cd      	bne.n	80254a2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8025506:	693a      	ldr	r2, [r7, #16]
 8025508:	6839      	ldr	r1, [r7, #0]
 802550a:	68f8      	ldr	r0, [r7, #12]
 802550c:	f000 fa27 	bl	802595e <SPI_EndRxTransaction>
 8025510:	4603      	mov	r3, r0
 8025512:	2b00      	cmp	r3, #0
 8025514:	d002      	beq.n	802551c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8025516:	68fb      	ldr	r3, [r7, #12]
 8025518:	2220      	movs	r2, #32
 802551a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802551c:	68fb      	ldr	r3, [r7, #12]
 802551e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025520:	2b00      	cmp	r3, #0
 8025522:	d002      	beq.n	802552a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8025524:	2301      	movs	r3, #1
 8025526:	75fb      	strb	r3, [r7, #23]
 8025528:	e000      	b.n	802552c <HAL_SPI_Receive+0x1f8>
  }

error :
 802552a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802552c:	68fb      	ldr	r3, [r7, #12]
 802552e:	2201      	movs	r2, #1
 8025530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8025534:	68fb      	ldr	r3, [r7, #12]
 8025536:	2200      	movs	r2, #0
 8025538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802553c:	7dfb      	ldrb	r3, [r7, #23]
}
 802553e:	4618      	mov	r0, r3
 8025540:	3718      	adds	r7, #24
 8025542:	46bd      	mov	sp, r7
 8025544:	bd80      	pop	{r7, pc}

08025546 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8025546:	b580      	push	{r7, lr}
 8025548:	b08c      	sub	sp, #48	; 0x30
 802554a:	af00      	add	r7, sp, #0
 802554c:	60f8      	str	r0, [r7, #12]
 802554e:	60b9      	str	r1, [r7, #8]
 8025550:	607a      	str	r2, [r7, #4]
 8025552:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8025554:	2301      	movs	r3, #1
 8025556:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8025558:	2300      	movs	r3, #0
 802555a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802555e:	68fb      	ldr	r3, [r7, #12]
 8025560:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8025564:	2b01      	cmp	r3, #1
 8025566:	d101      	bne.n	802556c <HAL_SPI_TransmitReceive+0x26>
 8025568:	2302      	movs	r3, #2
 802556a:	e18a      	b.n	8025882 <HAL_SPI_TransmitReceive+0x33c>
 802556c:	68fb      	ldr	r3, [r7, #12]
 802556e:	2201      	movs	r2, #1
 8025570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8025574:	f7fd fd78 	bl	8023068 <HAL_GetTick>
 8025578:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 802557a:	68fb      	ldr	r3, [r7, #12]
 802557c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8025580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8025584:	68fb      	ldr	r3, [r7, #12]
 8025586:	685b      	ldr	r3, [r3, #4]
 8025588:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 802558a:	887b      	ldrh	r3, [r7, #2]
 802558c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802558e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025592:	2b01      	cmp	r3, #1
 8025594:	d00f      	beq.n	80255b6 <HAL_SPI_TransmitReceive+0x70>
 8025596:	69fb      	ldr	r3, [r7, #28]
 8025598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802559c:	d107      	bne.n	80255ae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 802559e:	68fb      	ldr	r3, [r7, #12]
 80255a0:	689b      	ldr	r3, [r3, #8]
 80255a2:	2b00      	cmp	r3, #0
 80255a4:	d103      	bne.n	80255ae <HAL_SPI_TransmitReceive+0x68>
 80255a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80255aa:	2b04      	cmp	r3, #4
 80255ac:	d003      	beq.n	80255b6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80255ae:	2302      	movs	r3, #2
 80255b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80255b4:	e15b      	b.n	802586e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80255b6:	68bb      	ldr	r3, [r7, #8]
 80255b8:	2b00      	cmp	r3, #0
 80255ba:	d005      	beq.n	80255c8 <HAL_SPI_TransmitReceive+0x82>
 80255bc:	687b      	ldr	r3, [r7, #4]
 80255be:	2b00      	cmp	r3, #0
 80255c0:	d002      	beq.n	80255c8 <HAL_SPI_TransmitReceive+0x82>
 80255c2:	887b      	ldrh	r3, [r7, #2]
 80255c4:	2b00      	cmp	r3, #0
 80255c6:	d103      	bne.n	80255d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80255c8:	2301      	movs	r3, #1
 80255ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80255ce:	e14e      	b.n	802586e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80255d0:	68fb      	ldr	r3, [r7, #12]
 80255d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80255d6:	b2db      	uxtb	r3, r3
 80255d8:	2b04      	cmp	r3, #4
 80255da:	d003      	beq.n	80255e4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80255dc:	68fb      	ldr	r3, [r7, #12]
 80255de:	2205      	movs	r2, #5
 80255e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80255e4:	68fb      	ldr	r3, [r7, #12]
 80255e6:	2200      	movs	r2, #0
 80255e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80255ea:	68fb      	ldr	r3, [r7, #12]
 80255ec:	687a      	ldr	r2, [r7, #4]
 80255ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80255f0:	68fb      	ldr	r3, [r7, #12]
 80255f2:	887a      	ldrh	r2, [r7, #2]
 80255f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80255f6:	68fb      	ldr	r3, [r7, #12]
 80255f8:	887a      	ldrh	r2, [r7, #2]
 80255fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80255fc:	68fb      	ldr	r3, [r7, #12]
 80255fe:	68ba      	ldr	r2, [r7, #8]
 8025600:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8025602:	68fb      	ldr	r3, [r7, #12]
 8025604:	887a      	ldrh	r2, [r7, #2]
 8025606:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8025608:	68fb      	ldr	r3, [r7, #12]
 802560a:	887a      	ldrh	r2, [r7, #2]
 802560c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802560e:	68fb      	ldr	r3, [r7, #12]
 8025610:	2200      	movs	r2, #0
 8025612:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8025614:	68fb      	ldr	r3, [r7, #12]
 8025616:	2200      	movs	r2, #0
 8025618:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802561a:	68fb      	ldr	r3, [r7, #12]
 802561c:	681b      	ldr	r3, [r3, #0]
 802561e:	681b      	ldr	r3, [r3, #0]
 8025620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025624:	2b40      	cmp	r3, #64	; 0x40
 8025626:	d007      	beq.n	8025638 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8025628:	68fb      	ldr	r3, [r7, #12]
 802562a:	681b      	ldr	r3, [r3, #0]
 802562c:	681a      	ldr	r2, [r3, #0]
 802562e:	68fb      	ldr	r3, [r7, #12]
 8025630:	681b      	ldr	r3, [r3, #0]
 8025632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8025636:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8025638:	68fb      	ldr	r3, [r7, #12]
 802563a:	68db      	ldr	r3, [r3, #12]
 802563c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8025640:	d178      	bne.n	8025734 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8025642:	68fb      	ldr	r3, [r7, #12]
 8025644:	685b      	ldr	r3, [r3, #4]
 8025646:	2b00      	cmp	r3, #0
 8025648:	d002      	beq.n	8025650 <HAL_SPI_TransmitReceive+0x10a>
 802564a:	8b7b      	ldrh	r3, [r7, #26]
 802564c:	2b01      	cmp	r3, #1
 802564e:	d166      	bne.n	802571e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8025650:	68fb      	ldr	r3, [r7, #12]
 8025652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025654:	881a      	ldrh	r2, [r3, #0]
 8025656:	68fb      	ldr	r3, [r7, #12]
 8025658:	681b      	ldr	r3, [r3, #0]
 802565a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802565c:	68fb      	ldr	r3, [r7, #12]
 802565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025660:	1c9a      	adds	r2, r3, #2
 8025662:	68fb      	ldr	r3, [r7, #12]
 8025664:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8025666:	68fb      	ldr	r3, [r7, #12]
 8025668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802566a:	b29b      	uxth	r3, r3
 802566c:	3b01      	subs	r3, #1
 802566e:	b29a      	uxth	r2, r3
 8025670:	68fb      	ldr	r3, [r7, #12]
 8025672:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8025674:	e053      	b.n	802571e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8025676:	68fb      	ldr	r3, [r7, #12]
 8025678:	681b      	ldr	r3, [r3, #0]
 802567a:	689b      	ldr	r3, [r3, #8]
 802567c:	f003 0302 	and.w	r3, r3, #2
 8025680:	2b02      	cmp	r3, #2
 8025682:	d11b      	bne.n	80256bc <HAL_SPI_TransmitReceive+0x176>
 8025684:	68fb      	ldr	r3, [r7, #12]
 8025686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025688:	b29b      	uxth	r3, r3
 802568a:	2b00      	cmp	r3, #0
 802568c:	d016      	beq.n	80256bc <HAL_SPI_TransmitReceive+0x176>
 802568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025690:	2b01      	cmp	r3, #1
 8025692:	d113      	bne.n	80256bc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8025694:	68fb      	ldr	r3, [r7, #12]
 8025696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025698:	881a      	ldrh	r2, [r3, #0]
 802569a:	68fb      	ldr	r3, [r7, #12]
 802569c:	681b      	ldr	r3, [r3, #0]
 802569e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80256a0:	68fb      	ldr	r3, [r7, #12]
 80256a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80256a4:	1c9a      	adds	r2, r3, #2
 80256a6:	68fb      	ldr	r3, [r7, #12]
 80256a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80256aa:	68fb      	ldr	r3, [r7, #12]
 80256ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80256ae:	b29b      	uxth	r3, r3
 80256b0:	3b01      	subs	r3, #1
 80256b2:	b29a      	uxth	r2, r3
 80256b4:	68fb      	ldr	r3, [r7, #12]
 80256b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80256b8:	2300      	movs	r3, #0
 80256ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80256bc:	68fb      	ldr	r3, [r7, #12]
 80256be:	681b      	ldr	r3, [r3, #0]
 80256c0:	689b      	ldr	r3, [r3, #8]
 80256c2:	f003 0301 	and.w	r3, r3, #1
 80256c6:	2b01      	cmp	r3, #1
 80256c8:	d119      	bne.n	80256fe <HAL_SPI_TransmitReceive+0x1b8>
 80256ca:	68fb      	ldr	r3, [r7, #12]
 80256cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80256ce:	b29b      	uxth	r3, r3
 80256d0:	2b00      	cmp	r3, #0
 80256d2:	d014      	beq.n	80256fe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80256d4:	68fb      	ldr	r3, [r7, #12]
 80256d6:	681b      	ldr	r3, [r3, #0]
 80256d8:	68da      	ldr	r2, [r3, #12]
 80256da:	68fb      	ldr	r3, [r7, #12]
 80256dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80256de:	b292      	uxth	r2, r2
 80256e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80256e2:	68fb      	ldr	r3, [r7, #12]
 80256e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80256e6:	1c9a      	adds	r2, r3, #2
 80256e8:	68fb      	ldr	r3, [r7, #12]
 80256ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80256ec:	68fb      	ldr	r3, [r7, #12]
 80256ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80256f0:	b29b      	uxth	r3, r3
 80256f2:	3b01      	subs	r3, #1
 80256f4:	b29a      	uxth	r2, r3
 80256f6:	68fb      	ldr	r3, [r7, #12]
 80256f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80256fa:	2301      	movs	r3, #1
 80256fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80256fe:	f7fd fcb3 	bl	8023068 <HAL_GetTick>
 8025702:	4602      	mov	r2, r0
 8025704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025706:	1ad3      	subs	r3, r2, r3
 8025708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802570a:	429a      	cmp	r2, r3
 802570c:	d807      	bhi.n	802571e <HAL_SPI_TransmitReceive+0x1d8>
 802570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025714:	d003      	beq.n	802571e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8025716:	2303      	movs	r3, #3
 8025718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 802571c:	e0a7      	b.n	802586e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802571e:	68fb      	ldr	r3, [r7, #12]
 8025720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8025722:	b29b      	uxth	r3, r3
 8025724:	2b00      	cmp	r3, #0
 8025726:	d1a6      	bne.n	8025676 <HAL_SPI_TransmitReceive+0x130>
 8025728:	68fb      	ldr	r3, [r7, #12]
 802572a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802572c:	b29b      	uxth	r3, r3
 802572e:	2b00      	cmp	r3, #0
 8025730:	d1a1      	bne.n	8025676 <HAL_SPI_TransmitReceive+0x130>
 8025732:	e07c      	b.n	802582e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8025734:	68fb      	ldr	r3, [r7, #12]
 8025736:	685b      	ldr	r3, [r3, #4]
 8025738:	2b00      	cmp	r3, #0
 802573a:	d002      	beq.n	8025742 <HAL_SPI_TransmitReceive+0x1fc>
 802573c:	8b7b      	ldrh	r3, [r7, #26]
 802573e:	2b01      	cmp	r3, #1
 8025740:	d16b      	bne.n	802581a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8025742:	68fb      	ldr	r3, [r7, #12]
 8025744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8025746:	68fb      	ldr	r3, [r7, #12]
 8025748:	681b      	ldr	r3, [r3, #0]
 802574a:	330c      	adds	r3, #12
 802574c:	7812      	ldrb	r2, [r2, #0]
 802574e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8025750:	68fb      	ldr	r3, [r7, #12]
 8025752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025754:	1c5a      	adds	r2, r3, #1
 8025756:	68fb      	ldr	r3, [r7, #12]
 8025758:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802575a:	68fb      	ldr	r3, [r7, #12]
 802575c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802575e:	b29b      	uxth	r3, r3
 8025760:	3b01      	subs	r3, #1
 8025762:	b29a      	uxth	r2, r3
 8025764:	68fb      	ldr	r3, [r7, #12]
 8025766:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8025768:	e057      	b.n	802581a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802576a:	68fb      	ldr	r3, [r7, #12]
 802576c:	681b      	ldr	r3, [r3, #0]
 802576e:	689b      	ldr	r3, [r3, #8]
 8025770:	f003 0302 	and.w	r3, r3, #2
 8025774:	2b02      	cmp	r3, #2
 8025776:	d11c      	bne.n	80257b2 <HAL_SPI_TransmitReceive+0x26c>
 8025778:	68fb      	ldr	r3, [r7, #12]
 802577a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802577c:	b29b      	uxth	r3, r3
 802577e:	2b00      	cmp	r3, #0
 8025780:	d017      	beq.n	80257b2 <HAL_SPI_TransmitReceive+0x26c>
 8025782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025784:	2b01      	cmp	r3, #1
 8025786:	d114      	bne.n	80257b2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8025788:	68fb      	ldr	r3, [r7, #12]
 802578a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802578c:	68fb      	ldr	r3, [r7, #12]
 802578e:	681b      	ldr	r3, [r3, #0]
 8025790:	330c      	adds	r3, #12
 8025792:	7812      	ldrb	r2, [r2, #0]
 8025794:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8025796:	68fb      	ldr	r3, [r7, #12]
 8025798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802579a:	1c5a      	adds	r2, r3, #1
 802579c:	68fb      	ldr	r3, [r7, #12]
 802579e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80257a0:	68fb      	ldr	r3, [r7, #12]
 80257a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80257a4:	b29b      	uxth	r3, r3
 80257a6:	3b01      	subs	r3, #1
 80257a8:	b29a      	uxth	r2, r3
 80257aa:	68fb      	ldr	r3, [r7, #12]
 80257ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80257ae:	2300      	movs	r3, #0
 80257b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80257b2:	68fb      	ldr	r3, [r7, #12]
 80257b4:	681b      	ldr	r3, [r3, #0]
 80257b6:	689b      	ldr	r3, [r3, #8]
 80257b8:	f003 0301 	and.w	r3, r3, #1
 80257bc:	2b01      	cmp	r3, #1
 80257be:	d119      	bne.n	80257f4 <HAL_SPI_TransmitReceive+0x2ae>
 80257c0:	68fb      	ldr	r3, [r7, #12]
 80257c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80257c4:	b29b      	uxth	r3, r3
 80257c6:	2b00      	cmp	r3, #0
 80257c8:	d014      	beq.n	80257f4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80257ca:	68fb      	ldr	r3, [r7, #12]
 80257cc:	681b      	ldr	r3, [r3, #0]
 80257ce:	68da      	ldr	r2, [r3, #12]
 80257d0:	68fb      	ldr	r3, [r7, #12]
 80257d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80257d4:	b2d2      	uxtb	r2, r2
 80257d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80257d8:	68fb      	ldr	r3, [r7, #12]
 80257da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80257dc:	1c5a      	adds	r2, r3, #1
 80257de:	68fb      	ldr	r3, [r7, #12]
 80257e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80257e2:	68fb      	ldr	r3, [r7, #12]
 80257e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80257e6:	b29b      	uxth	r3, r3
 80257e8:	3b01      	subs	r3, #1
 80257ea:	b29a      	uxth	r2, r3
 80257ec:	68fb      	ldr	r3, [r7, #12]
 80257ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80257f0:	2301      	movs	r3, #1
 80257f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80257f4:	f7fd fc38 	bl	8023068 <HAL_GetTick>
 80257f8:	4602      	mov	r2, r0
 80257fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80257fc:	1ad3      	subs	r3, r2, r3
 80257fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8025800:	429a      	cmp	r2, r3
 8025802:	d803      	bhi.n	802580c <HAL_SPI_TransmitReceive+0x2c6>
 8025804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025806:	f1b3 3fff 	cmp.w	r3, #4294967295
 802580a:	d102      	bne.n	8025812 <HAL_SPI_TransmitReceive+0x2cc>
 802580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802580e:	2b00      	cmp	r3, #0
 8025810:	d103      	bne.n	802581a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8025812:	2303      	movs	r3, #3
 8025814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8025818:	e029      	b.n	802586e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802581a:	68fb      	ldr	r3, [r7, #12]
 802581c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802581e:	b29b      	uxth	r3, r3
 8025820:	2b00      	cmp	r3, #0
 8025822:	d1a2      	bne.n	802576a <HAL_SPI_TransmitReceive+0x224>
 8025824:	68fb      	ldr	r3, [r7, #12]
 8025826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8025828:	b29b      	uxth	r3, r3
 802582a:	2b00      	cmp	r3, #0
 802582c:	d19d      	bne.n	802576a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802582e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025830:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8025832:	68f8      	ldr	r0, [r7, #12]
 8025834:	f000 f8f8 	bl	8025a28 <SPI_EndRxTxTransaction>
 8025838:	4603      	mov	r3, r0
 802583a:	2b00      	cmp	r3, #0
 802583c:	d006      	beq.n	802584c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 802583e:	2301      	movs	r3, #1
 8025840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8025844:	68fb      	ldr	r3, [r7, #12]
 8025846:	2220      	movs	r2, #32
 8025848:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 802584a:	e010      	b.n	802586e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802584c:	68fb      	ldr	r3, [r7, #12]
 802584e:	689b      	ldr	r3, [r3, #8]
 8025850:	2b00      	cmp	r3, #0
 8025852:	d10b      	bne.n	802586c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8025854:	2300      	movs	r3, #0
 8025856:	617b      	str	r3, [r7, #20]
 8025858:	68fb      	ldr	r3, [r7, #12]
 802585a:	681b      	ldr	r3, [r3, #0]
 802585c:	68db      	ldr	r3, [r3, #12]
 802585e:	617b      	str	r3, [r7, #20]
 8025860:	68fb      	ldr	r3, [r7, #12]
 8025862:	681b      	ldr	r3, [r3, #0]
 8025864:	689b      	ldr	r3, [r3, #8]
 8025866:	617b      	str	r3, [r7, #20]
 8025868:	697b      	ldr	r3, [r7, #20]
 802586a:	e000      	b.n	802586e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 802586c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802586e:	68fb      	ldr	r3, [r7, #12]
 8025870:	2201      	movs	r2, #1
 8025872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8025876:	68fb      	ldr	r3, [r7, #12]
 8025878:	2200      	movs	r2, #0
 802587a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802587e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8025882:	4618      	mov	r0, r3
 8025884:	3730      	adds	r7, #48	; 0x30
 8025886:	46bd      	mov	sp, r7
 8025888:	bd80      	pop	{r7, pc}

0802588a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 802588a:	b580      	push	{r7, lr}
 802588c:	b084      	sub	sp, #16
 802588e:	af00      	add	r7, sp, #0
 8025890:	60f8      	str	r0, [r7, #12]
 8025892:	60b9      	str	r1, [r7, #8]
 8025894:	603b      	str	r3, [r7, #0]
 8025896:	4613      	mov	r3, r2
 8025898:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802589a:	e04c      	b.n	8025936 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 802589c:	683b      	ldr	r3, [r7, #0]
 802589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80258a2:	d048      	beq.n	8025936 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80258a4:	f7fd fbe0 	bl	8023068 <HAL_GetTick>
 80258a8:	4602      	mov	r2, r0
 80258aa:	69bb      	ldr	r3, [r7, #24]
 80258ac:	1ad3      	subs	r3, r2, r3
 80258ae:	683a      	ldr	r2, [r7, #0]
 80258b0:	429a      	cmp	r2, r3
 80258b2:	d902      	bls.n	80258ba <SPI_WaitFlagStateUntilTimeout+0x30>
 80258b4:	683b      	ldr	r3, [r7, #0]
 80258b6:	2b00      	cmp	r3, #0
 80258b8:	d13d      	bne.n	8025936 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80258ba:	68fb      	ldr	r3, [r7, #12]
 80258bc:	681b      	ldr	r3, [r3, #0]
 80258be:	685a      	ldr	r2, [r3, #4]
 80258c0:	68fb      	ldr	r3, [r7, #12]
 80258c2:	681b      	ldr	r3, [r3, #0]
 80258c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80258c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80258ca:	68fb      	ldr	r3, [r7, #12]
 80258cc:	685b      	ldr	r3, [r3, #4]
 80258ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80258d2:	d111      	bne.n	80258f8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80258d4:	68fb      	ldr	r3, [r7, #12]
 80258d6:	689b      	ldr	r3, [r3, #8]
 80258d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80258dc:	d004      	beq.n	80258e8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80258de:	68fb      	ldr	r3, [r7, #12]
 80258e0:	689b      	ldr	r3, [r3, #8]
 80258e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80258e6:	d107      	bne.n	80258f8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80258e8:	68fb      	ldr	r3, [r7, #12]
 80258ea:	681b      	ldr	r3, [r3, #0]
 80258ec:	681a      	ldr	r2, [r3, #0]
 80258ee:	68fb      	ldr	r3, [r7, #12]
 80258f0:	681b      	ldr	r3, [r3, #0]
 80258f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80258f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80258f8:	68fb      	ldr	r3, [r7, #12]
 80258fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80258fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8025900:	d10f      	bne.n	8025922 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8025902:	68fb      	ldr	r3, [r7, #12]
 8025904:	681b      	ldr	r3, [r3, #0]
 8025906:	681a      	ldr	r2, [r3, #0]
 8025908:	68fb      	ldr	r3, [r7, #12]
 802590a:	681b      	ldr	r3, [r3, #0]
 802590c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8025910:	601a      	str	r2, [r3, #0]
 8025912:	68fb      	ldr	r3, [r7, #12]
 8025914:	681b      	ldr	r3, [r3, #0]
 8025916:	681a      	ldr	r2, [r3, #0]
 8025918:	68fb      	ldr	r3, [r7, #12]
 802591a:	681b      	ldr	r3, [r3, #0]
 802591c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8025920:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8025922:	68fb      	ldr	r3, [r7, #12]
 8025924:	2201      	movs	r2, #1
 8025926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 802592a:	68fb      	ldr	r3, [r7, #12]
 802592c:	2200      	movs	r2, #0
 802592e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8025932:	2303      	movs	r3, #3
 8025934:	e00f      	b.n	8025956 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8025936:	68fb      	ldr	r3, [r7, #12]
 8025938:	681b      	ldr	r3, [r3, #0]
 802593a:	689a      	ldr	r2, [r3, #8]
 802593c:	68bb      	ldr	r3, [r7, #8]
 802593e:	4013      	ands	r3, r2
 8025940:	68ba      	ldr	r2, [r7, #8]
 8025942:	429a      	cmp	r2, r3
 8025944:	bf0c      	ite	eq
 8025946:	2301      	moveq	r3, #1
 8025948:	2300      	movne	r3, #0
 802594a:	b2db      	uxtb	r3, r3
 802594c:	461a      	mov	r2, r3
 802594e:	79fb      	ldrb	r3, [r7, #7]
 8025950:	429a      	cmp	r2, r3
 8025952:	d1a3      	bne.n	802589c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8025954:	2300      	movs	r3, #0
}
 8025956:	4618      	mov	r0, r3
 8025958:	3710      	adds	r7, #16
 802595a:	46bd      	mov	sp, r7
 802595c:	bd80      	pop	{r7, pc}

0802595e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 802595e:	b580      	push	{r7, lr}
 8025960:	b086      	sub	sp, #24
 8025962:	af02      	add	r7, sp, #8
 8025964:	60f8      	str	r0, [r7, #12]
 8025966:	60b9      	str	r1, [r7, #8]
 8025968:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802596a:	68fb      	ldr	r3, [r7, #12]
 802596c:	685b      	ldr	r3, [r3, #4]
 802596e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8025972:	d111      	bne.n	8025998 <SPI_EndRxTransaction+0x3a>
 8025974:	68fb      	ldr	r3, [r7, #12]
 8025976:	689b      	ldr	r3, [r3, #8]
 8025978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802597c:	d004      	beq.n	8025988 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802597e:	68fb      	ldr	r3, [r7, #12]
 8025980:	689b      	ldr	r3, [r3, #8]
 8025982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025986:	d107      	bne.n	8025998 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8025988:	68fb      	ldr	r3, [r7, #12]
 802598a:	681b      	ldr	r3, [r3, #0]
 802598c:	681a      	ldr	r2, [r3, #0]
 802598e:	68fb      	ldr	r3, [r7, #12]
 8025990:	681b      	ldr	r3, [r3, #0]
 8025992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8025996:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8025998:	68fb      	ldr	r3, [r7, #12]
 802599a:	685b      	ldr	r3, [r3, #4]
 802599c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80259a0:	d12a      	bne.n	80259f8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80259a2:	68fb      	ldr	r3, [r7, #12]
 80259a4:	689b      	ldr	r3, [r3, #8]
 80259a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80259aa:	d012      	beq.n	80259d2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80259ac:	687b      	ldr	r3, [r7, #4]
 80259ae:	9300      	str	r3, [sp, #0]
 80259b0:	68bb      	ldr	r3, [r7, #8]
 80259b2:	2200      	movs	r2, #0
 80259b4:	2180      	movs	r1, #128	; 0x80
 80259b6:	68f8      	ldr	r0, [r7, #12]
 80259b8:	f7ff ff67 	bl	802588a <SPI_WaitFlagStateUntilTimeout>
 80259bc:	4603      	mov	r3, r0
 80259be:	2b00      	cmp	r3, #0
 80259c0:	d02d      	beq.n	8025a1e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80259c2:	68fb      	ldr	r3, [r7, #12]
 80259c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80259c6:	f043 0220 	orr.w	r2, r3, #32
 80259ca:	68fb      	ldr	r3, [r7, #12]
 80259cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80259ce:	2303      	movs	r3, #3
 80259d0:	e026      	b.n	8025a20 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80259d2:	687b      	ldr	r3, [r7, #4]
 80259d4:	9300      	str	r3, [sp, #0]
 80259d6:	68bb      	ldr	r3, [r7, #8]
 80259d8:	2200      	movs	r2, #0
 80259da:	2101      	movs	r1, #1
 80259dc:	68f8      	ldr	r0, [r7, #12]
 80259de:	f7ff ff54 	bl	802588a <SPI_WaitFlagStateUntilTimeout>
 80259e2:	4603      	mov	r3, r0
 80259e4:	2b00      	cmp	r3, #0
 80259e6:	d01a      	beq.n	8025a1e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80259e8:	68fb      	ldr	r3, [r7, #12]
 80259ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80259ec:	f043 0220 	orr.w	r2, r3, #32
 80259f0:	68fb      	ldr	r3, [r7, #12]
 80259f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80259f4:	2303      	movs	r3, #3
 80259f6:	e013      	b.n	8025a20 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80259f8:	687b      	ldr	r3, [r7, #4]
 80259fa:	9300      	str	r3, [sp, #0]
 80259fc:	68bb      	ldr	r3, [r7, #8]
 80259fe:	2200      	movs	r2, #0
 8025a00:	2101      	movs	r1, #1
 8025a02:	68f8      	ldr	r0, [r7, #12]
 8025a04:	f7ff ff41 	bl	802588a <SPI_WaitFlagStateUntilTimeout>
 8025a08:	4603      	mov	r3, r0
 8025a0a:	2b00      	cmp	r3, #0
 8025a0c:	d007      	beq.n	8025a1e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8025a0e:	68fb      	ldr	r3, [r7, #12]
 8025a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025a12:	f043 0220 	orr.w	r2, r3, #32
 8025a16:	68fb      	ldr	r3, [r7, #12]
 8025a18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8025a1a:	2303      	movs	r3, #3
 8025a1c:	e000      	b.n	8025a20 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8025a1e:	2300      	movs	r3, #0
}
 8025a20:	4618      	mov	r0, r3
 8025a22:	3710      	adds	r7, #16
 8025a24:	46bd      	mov	sp, r7
 8025a26:	bd80      	pop	{r7, pc}

08025a28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8025a28:	b580      	push	{r7, lr}
 8025a2a:	b088      	sub	sp, #32
 8025a2c:	af02      	add	r7, sp, #8
 8025a2e:	60f8      	str	r0, [r7, #12]
 8025a30:	60b9      	str	r1, [r7, #8]
 8025a32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8025a34:	4b1b      	ldr	r3, [pc, #108]	; (8025aa4 <SPI_EndRxTxTransaction+0x7c>)
 8025a36:	681b      	ldr	r3, [r3, #0]
 8025a38:	4a1b      	ldr	r2, [pc, #108]	; (8025aa8 <SPI_EndRxTxTransaction+0x80>)
 8025a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8025a3e:	0d5b      	lsrs	r3, r3, #21
 8025a40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8025a44:	fb02 f303 	mul.w	r3, r2, r3
 8025a48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8025a4a:	68fb      	ldr	r3, [r7, #12]
 8025a4c:	685b      	ldr	r3, [r3, #4]
 8025a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8025a52:	d112      	bne.n	8025a7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8025a54:	687b      	ldr	r3, [r7, #4]
 8025a56:	9300      	str	r3, [sp, #0]
 8025a58:	68bb      	ldr	r3, [r7, #8]
 8025a5a:	2200      	movs	r2, #0
 8025a5c:	2180      	movs	r1, #128	; 0x80
 8025a5e:	68f8      	ldr	r0, [r7, #12]
 8025a60:	f7ff ff13 	bl	802588a <SPI_WaitFlagStateUntilTimeout>
 8025a64:	4603      	mov	r3, r0
 8025a66:	2b00      	cmp	r3, #0
 8025a68:	d016      	beq.n	8025a98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8025a6a:	68fb      	ldr	r3, [r7, #12]
 8025a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025a6e:	f043 0220 	orr.w	r2, r3, #32
 8025a72:	68fb      	ldr	r3, [r7, #12]
 8025a74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8025a76:	2303      	movs	r3, #3
 8025a78:	e00f      	b.n	8025a9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8025a7a:	697b      	ldr	r3, [r7, #20]
 8025a7c:	2b00      	cmp	r3, #0
 8025a7e:	d00a      	beq.n	8025a96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8025a80:	697b      	ldr	r3, [r7, #20]
 8025a82:	3b01      	subs	r3, #1
 8025a84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8025a86:	68fb      	ldr	r3, [r7, #12]
 8025a88:	681b      	ldr	r3, [r3, #0]
 8025a8a:	689b      	ldr	r3, [r3, #8]
 8025a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025a90:	2b80      	cmp	r3, #128	; 0x80
 8025a92:	d0f2      	beq.n	8025a7a <SPI_EndRxTxTransaction+0x52>
 8025a94:	e000      	b.n	8025a98 <SPI_EndRxTxTransaction+0x70>
        break;
 8025a96:	bf00      	nop
  }

  return HAL_OK;
 8025a98:	2300      	movs	r3, #0
}
 8025a9a:	4618      	mov	r0, r3
 8025a9c:	3718      	adds	r7, #24
 8025a9e:	46bd      	mov	sp, r7
 8025aa0:	bd80      	pop	{r7, pc}
 8025aa2:	bf00      	nop
 8025aa4:	20000000 	.word	0x20000000
 8025aa8:	165e9f81 	.word	0x165e9f81

08025aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8025aac:	b580      	push	{r7, lr}
 8025aae:	b082      	sub	sp, #8
 8025ab0:	af00      	add	r7, sp, #0
 8025ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8025ab4:	687b      	ldr	r3, [r7, #4]
 8025ab6:	2b00      	cmp	r3, #0
 8025ab8:	d101      	bne.n	8025abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8025aba:	2301      	movs	r3, #1
 8025abc:	e01d      	b.n	8025afa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8025abe:	687b      	ldr	r3, [r7, #4]
 8025ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025ac4:	b2db      	uxtb	r3, r3
 8025ac6:	2b00      	cmp	r3, #0
 8025ac8:	d106      	bne.n	8025ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8025aca:	687b      	ldr	r3, [r7, #4]
 8025acc:	2200      	movs	r2, #0
 8025ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8025ad2:	6878      	ldr	r0, [r7, #4]
 8025ad4:	f7fc fe12 	bl	80226fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8025ad8:	687b      	ldr	r3, [r7, #4]
 8025ada:	2202      	movs	r2, #2
 8025adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8025ae0:	687b      	ldr	r3, [r7, #4]
 8025ae2:	681a      	ldr	r2, [r3, #0]
 8025ae4:	687b      	ldr	r3, [r7, #4]
 8025ae6:	3304      	adds	r3, #4
 8025ae8:	4619      	mov	r1, r3
 8025aea:	4610      	mov	r0, r2
 8025aec:	f000 fc0e 	bl	802630c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8025af0:	687b      	ldr	r3, [r7, #4]
 8025af2:	2201      	movs	r2, #1
 8025af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8025af8:	2300      	movs	r3, #0
}
 8025afa:	4618      	mov	r0, r3
 8025afc:	3708      	adds	r7, #8
 8025afe:	46bd      	mov	sp, r7
 8025b00:	bd80      	pop	{r7, pc}

08025b02 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8025b02:	b480      	push	{r7}
 8025b04:	b085      	sub	sp, #20
 8025b06:	af00      	add	r7, sp, #0
 8025b08:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8025b0a:	687b      	ldr	r3, [r7, #4]
 8025b0c:	681b      	ldr	r3, [r3, #0]
 8025b0e:	68da      	ldr	r2, [r3, #12]
 8025b10:	687b      	ldr	r3, [r7, #4]
 8025b12:	681b      	ldr	r3, [r3, #0]
 8025b14:	f042 0201 	orr.w	r2, r2, #1
 8025b18:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8025b1a:	687b      	ldr	r3, [r7, #4]
 8025b1c:	681b      	ldr	r3, [r3, #0]
 8025b1e:	689b      	ldr	r3, [r3, #8]
 8025b20:	f003 0307 	and.w	r3, r3, #7
 8025b24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8025b26:	68fb      	ldr	r3, [r7, #12]
 8025b28:	2b06      	cmp	r3, #6
 8025b2a:	d007      	beq.n	8025b3c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8025b2c:	687b      	ldr	r3, [r7, #4]
 8025b2e:	681b      	ldr	r3, [r3, #0]
 8025b30:	681a      	ldr	r2, [r3, #0]
 8025b32:	687b      	ldr	r3, [r7, #4]
 8025b34:	681b      	ldr	r3, [r3, #0]
 8025b36:	f042 0201 	orr.w	r2, r2, #1
 8025b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8025b3c:	2300      	movs	r3, #0
}
 8025b3e:	4618      	mov	r0, r3
 8025b40:	3714      	adds	r7, #20
 8025b42:	46bd      	mov	sp, r7
 8025b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b48:	4770      	bx	lr

08025b4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8025b4a:	b580      	push	{r7, lr}
 8025b4c:	b082      	sub	sp, #8
 8025b4e:	af00      	add	r7, sp, #0
 8025b50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8025b52:	687b      	ldr	r3, [r7, #4]
 8025b54:	2b00      	cmp	r3, #0
 8025b56:	d101      	bne.n	8025b5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8025b58:	2301      	movs	r3, #1
 8025b5a:	e01d      	b.n	8025b98 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8025b5c:	687b      	ldr	r3, [r7, #4]
 8025b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025b62:	b2db      	uxtb	r3, r3
 8025b64:	2b00      	cmp	r3, #0
 8025b66:	d106      	bne.n	8025b76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8025b68:	687b      	ldr	r3, [r7, #4]
 8025b6a:	2200      	movs	r2, #0
 8025b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8025b70:	6878      	ldr	r0, [r7, #4]
 8025b72:	f7fc fd75 	bl	8022660 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8025b76:	687b      	ldr	r3, [r7, #4]
 8025b78:	2202      	movs	r2, #2
 8025b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8025b7e:	687b      	ldr	r3, [r7, #4]
 8025b80:	681a      	ldr	r2, [r3, #0]
 8025b82:	687b      	ldr	r3, [r7, #4]
 8025b84:	3304      	adds	r3, #4
 8025b86:	4619      	mov	r1, r3
 8025b88:	4610      	mov	r0, r2
 8025b8a:	f000 fbbf 	bl	802630c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8025b8e:	687b      	ldr	r3, [r7, #4]
 8025b90:	2201      	movs	r2, #1
 8025b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8025b96:	2300      	movs	r3, #0
}
 8025b98:	4618      	mov	r0, r3
 8025b9a:	3708      	adds	r7, #8
 8025b9c:	46bd      	mov	sp, r7
 8025b9e:	bd80      	pop	{r7, pc}

08025ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8025ba0:	b580      	push	{r7, lr}
 8025ba2:	b084      	sub	sp, #16
 8025ba4:	af00      	add	r7, sp, #0
 8025ba6:	6078      	str	r0, [r7, #4]
 8025ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8025baa:	687b      	ldr	r3, [r7, #4]
 8025bac:	681b      	ldr	r3, [r3, #0]
 8025bae:	2201      	movs	r2, #1
 8025bb0:	6839      	ldr	r1, [r7, #0]
 8025bb2:	4618      	mov	r0, r3
 8025bb4:	f000 fe94 	bl	80268e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8025bb8:	687b      	ldr	r3, [r7, #4]
 8025bba:	681b      	ldr	r3, [r3, #0]
 8025bbc:	4a15      	ldr	r2, [pc, #84]	; (8025c14 <HAL_TIM_PWM_Start+0x74>)
 8025bbe:	4293      	cmp	r3, r2
 8025bc0:	d004      	beq.n	8025bcc <HAL_TIM_PWM_Start+0x2c>
 8025bc2:	687b      	ldr	r3, [r7, #4]
 8025bc4:	681b      	ldr	r3, [r3, #0]
 8025bc6:	4a14      	ldr	r2, [pc, #80]	; (8025c18 <HAL_TIM_PWM_Start+0x78>)
 8025bc8:	4293      	cmp	r3, r2
 8025bca:	d101      	bne.n	8025bd0 <HAL_TIM_PWM_Start+0x30>
 8025bcc:	2301      	movs	r3, #1
 8025bce:	e000      	b.n	8025bd2 <HAL_TIM_PWM_Start+0x32>
 8025bd0:	2300      	movs	r3, #0
 8025bd2:	2b00      	cmp	r3, #0
 8025bd4:	d007      	beq.n	8025be6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8025bd6:	687b      	ldr	r3, [r7, #4]
 8025bd8:	681b      	ldr	r3, [r3, #0]
 8025bda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8025bdc:	687b      	ldr	r3, [r7, #4]
 8025bde:	681b      	ldr	r3, [r3, #0]
 8025be0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8025be4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8025be6:	687b      	ldr	r3, [r7, #4]
 8025be8:	681b      	ldr	r3, [r3, #0]
 8025bea:	689b      	ldr	r3, [r3, #8]
 8025bec:	f003 0307 	and.w	r3, r3, #7
 8025bf0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8025bf2:	68fb      	ldr	r3, [r7, #12]
 8025bf4:	2b06      	cmp	r3, #6
 8025bf6:	d007      	beq.n	8025c08 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8025bf8:	687b      	ldr	r3, [r7, #4]
 8025bfa:	681b      	ldr	r3, [r3, #0]
 8025bfc:	681a      	ldr	r2, [r3, #0]
 8025bfe:	687b      	ldr	r3, [r7, #4]
 8025c00:	681b      	ldr	r3, [r3, #0]
 8025c02:	f042 0201 	orr.w	r2, r2, #1
 8025c06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8025c08:	2300      	movs	r3, #0
}
 8025c0a:	4618      	mov	r0, r3
 8025c0c:	3710      	adds	r7, #16
 8025c0e:	46bd      	mov	sp, r7
 8025c10:	bd80      	pop	{r7, pc}
 8025c12:	bf00      	nop
 8025c14:	40010000 	.word	0x40010000
 8025c18:	40010400 	.word	0x40010400

08025c1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8025c1c:	b580      	push	{r7, lr}
 8025c1e:	b086      	sub	sp, #24
 8025c20:	af00      	add	r7, sp, #0
 8025c22:	6078      	str	r0, [r7, #4]
 8025c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8025c26:	687b      	ldr	r3, [r7, #4]
 8025c28:	2b00      	cmp	r3, #0
 8025c2a:	d101      	bne.n	8025c30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8025c2c:	2301      	movs	r3, #1
 8025c2e:	e083      	b.n	8025d38 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8025c30:	687b      	ldr	r3, [r7, #4]
 8025c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025c36:	b2db      	uxtb	r3, r3
 8025c38:	2b00      	cmp	r3, #0
 8025c3a:	d106      	bne.n	8025c4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8025c3c:	687b      	ldr	r3, [r7, #4]
 8025c3e:	2200      	movs	r2, #0
 8025c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8025c44:	6878      	ldr	r0, [r7, #4]
 8025c46:	f7fc fdef 	bl	8022828 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8025c4a:	687b      	ldr	r3, [r7, #4]
 8025c4c:	2202      	movs	r2, #2
 8025c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8025c52:	687b      	ldr	r3, [r7, #4]
 8025c54:	681b      	ldr	r3, [r3, #0]
 8025c56:	689b      	ldr	r3, [r3, #8]
 8025c58:	687a      	ldr	r2, [r7, #4]
 8025c5a:	6812      	ldr	r2, [r2, #0]
 8025c5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8025c60:	f023 0307 	bic.w	r3, r3, #7
 8025c64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8025c66:	687b      	ldr	r3, [r7, #4]
 8025c68:	681a      	ldr	r2, [r3, #0]
 8025c6a:	687b      	ldr	r3, [r7, #4]
 8025c6c:	3304      	adds	r3, #4
 8025c6e:	4619      	mov	r1, r3
 8025c70:	4610      	mov	r0, r2
 8025c72:	f000 fb4b 	bl	802630c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8025c76:	687b      	ldr	r3, [r7, #4]
 8025c78:	681b      	ldr	r3, [r3, #0]
 8025c7a:	689b      	ldr	r3, [r3, #8]
 8025c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8025c7e:	687b      	ldr	r3, [r7, #4]
 8025c80:	681b      	ldr	r3, [r3, #0]
 8025c82:	699b      	ldr	r3, [r3, #24]
 8025c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8025c86:	687b      	ldr	r3, [r7, #4]
 8025c88:	681b      	ldr	r3, [r3, #0]
 8025c8a:	6a1b      	ldr	r3, [r3, #32]
 8025c8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8025c8e:	683b      	ldr	r3, [r7, #0]
 8025c90:	681b      	ldr	r3, [r3, #0]
 8025c92:	697a      	ldr	r2, [r7, #20]
 8025c94:	4313      	orrs	r3, r2
 8025c96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8025c98:	693b      	ldr	r3, [r7, #16]
 8025c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8025c9e:	f023 0303 	bic.w	r3, r3, #3
 8025ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8025ca4:	683b      	ldr	r3, [r7, #0]
 8025ca6:	689a      	ldr	r2, [r3, #8]
 8025ca8:	683b      	ldr	r3, [r7, #0]
 8025caa:	699b      	ldr	r3, [r3, #24]
 8025cac:	021b      	lsls	r3, r3, #8
 8025cae:	4313      	orrs	r3, r2
 8025cb0:	693a      	ldr	r2, [r7, #16]
 8025cb2:	4313      	orrs	r3, r2
 8025cb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8025cb6:	693b      	ldr	r3, [r7, #16]
 8025cb8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8025cbc:	f023 030c 	bic.w	r3, r3, #12
 8025cc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8025cc2:	693b      	ldr	r3, [r7, #16]
 8025cc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8025cc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8025ccc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8025cce:	683b      	ldr	r3, [r7, #0]
 8025cd0:	68da      	ldr	r2, [r3, #12]
 8025cd2:	683b      	ldr	r3, [r7, #0]
 8025cd4:	69db      	ldr	r3, [r3, #28]
 8025cd6:	021b      	lsls	r3, r3, #8
 8025cd8:	4313      	orrs	r3, r2
 8025cda:	693a      	ldr	r2, [r7, #16]
 8025cdc:	4313      	orrs	r3, r2
 8025cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8025ce0:	683b      	ldr	r3, [r7, #0]
 8025ce2:	691b      	ldr	r3, [r3, #16]
 8025ce4:	011a      	lsls	r2, r3, #4
 8025ce6:	683b      	ldr	r3, [r7, #0]
 8025ce8:	6a1b      	ldr	r3, [r3, #32]
 8025cea:	031b      	lsls	r3, r3, #12
 8025cec:	4313      	orrs	r3, r2
 8025cee:	693a      	ldr	r2, [r7, #16]
 8025cf0:	4313      	orrs	r3, r2
 8025cf2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8025cf4:	68fb      	ldr	r3, [r7, #12]
 8025cf6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8025cfa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8025cfc:	68fb      	ldr	r3, [r7, #12]
 8025cfe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8025d02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8025d04:	683b      	ldr	r3, [r7, #0]
 8025d06:	685a      	ldr	r2, [r3, #4]
 8025d08:	683b      	ldr	r3, [r7, #0]
 8025d0a:	695b      	ldr	r3, [r3, #20]
 8025d0c:	011b      	lsls	r3, r3, #4
 8025d0e:	4313      	orrs	r3, r2
 8025d10:	68fa      	ldr	r2, [r7, #12]
 8025d12:	4313      	orrs	r3, r2
 8025d14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8025d16:	687b      	ldr	r3, [r7, #4]
 8025d18:	681b      	ldr	r3, [r3, #0]
 8025d1a:	697a      	ldr	r2, [r7, #20]
 8025d1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8025d1e:	687b      	ldr	r3, [r7, #4]
 8025d20:	681b      	ldr	r3, [r3, #0]
 8025d22:	693a      	ldr	r2, [r7, #16]
 8025d24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8025d26:	687b      	ldr	r3, [r7, #4]
 8025d28:	681b      	ldr	r3, [r3, #0]
 8025d2a:	68fa      	ldr	r2, [r7, #12]
 8025d2c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8025d2e:	687b      	ldr	r3, [r7, #4]
 8025d30:	2201      	movs	r2, #1
 8025d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8025d36:	2300      	movs	r3, #0
}
 8025d38:	4618      	mov	r0, r3
 8025d3a:	3718      	adds	r7, #24
 8025d3c:	46bd      	mov	sp, r7
 8025d3e:	bd80      	pop	{r7, pc}

08025d40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8025d40:	b580      	push	{r7, lr}
 8025d42:	b082      	sub	sp, #8
 8025d44:	af00      	add	r7, sp, #0
 8025d46:	6078      	str	r0, [r7, #4]
 8025d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8025d4a:	683b      	ldr	r3, [r7, #0]
 8025d4c:	2b00      	cmp	r3, #0
 8025d4e:	d002      	beq.n	8025d56 <HAL_TIM_Encoder_Start+0x16>
 8025d50:	2b04      	cmp	r3, #4
 8025d52:	d008      	beq.n	8025d66 <HAL_TIM_Encoder_Start+0x26>
 8025d54:	e00f      	b.n	8025d76 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8025d56:	687b      	ldr	r3, [r7, #4]
 8025d58:	681b      	ldr	r3, [r3, #0]
 8025d5a:	2201      	movs	r2, #1
 8025d5c:	2100      	movs	r1, #0
 8025d5e:	4618      	mov	r0, r3
 8025d60:	f000 fdbe 	bl	80268e0 <TIM_CCxChannelCmd>
      break;
 8025d64:	e016      	b.n	8025d94 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8025d66:	687b      	ldr	r3, [r7, #4]
 8025d68:	681b      	ldr	r3, [r3, #0]
 8025d6a:	2201      	movs	r2, #1
 8025d6c:	2104      	movs	r1, #4
 8025d6e:	4618      	mov	r0, r3
 8025d70:	f000 fdb6 	bl	80268e0 <TIM_CCxChannelCmd>
      break;
 8025d74:	e00e      	b.n	8025d94 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8025d76:	687b      	ldr	r3, [r7, #4]
 8025d78:	681b      	ldr	r3, [r3, #0]
 8025d7a:	2201      	movs	r2, #1
 8025d7c:	2100      	movs	r1, #0
 8025d7e:	4618      	mov	r0, r3
 8025d80:	f000 fdae 	bl	80268e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8025d84:	687b      	ldr	r3, [r7, #4]
 8025d86:	681b      	ldr	r3, [r3, #0]
 8025d88:	2201      	movs	r2, #1
 8025d8a:	2104      	movs	r1, #4
 8025d8c:	4618      	mov	r0, r3
 8025d8e:	f000 fda7 	bl	80268e0 <TIM_CCxChannelCmd>
      break;
 8025d92:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8025d94:	687b      	ldr	r3, [r7, #4]
 8025d96:	681b      	ldr	r3, [r3, #0]
 8025d98:	681a      	ldr	r2, [r3, #0]
 8025d9a:	687b      	ldr	r3, [r7, #4]
 8025d9c:	681b      	ldr	r3, [r3, #0]
 8025d9e:	f042 0201 	orr.w	r2, r2, #1
 8025da2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8025da4:	2300      	movs	r3, #0
}
 8025da6:	4618      	mov	r0, r3
 8025da8:	3708      	adds	r7, #8
 8025daa:	46bd      	mov	sp, r7
 8025dac:	bd80      	pop	{r7, pc}

08025dae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8025dae:	b580      	push	{r7, lr}
 8025db0:	b082      	sub	sp, #8
 8025db2:	af00      	add	r7, sp, #0
 8025db4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8025db6:	687b      	ldr	r3, [r7, #4]
 8025db8:	681b      	ldr	r3, [r3, #0]
 8025dba:	691b      	ldr	r3, [r3, #16]
 8025dbc:	f003 0302 	and.w	r3, r3, #2
 8025dc0:	2b02      	cmp	r3, #2
 8025dc2:	d122      	bne.n	8025e0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8025dc4:	687b      	ldr	r3, [r7, #4]
 8025dc6:	681b      	ldr	r3, [r3, #0]
 8025dc8:	68db      	ldr	r3, [r3, #12]
 8025dca:	f003 0302 	and.w	r3, r3, #2
 8025dce:	2b02      	cmp	r3, #2
 8025dd0:	d11b      	bne.n	8025e0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8025dd2:	687b      	ldr	r3, [r7, #4]
 8025dd4:	681b      	ldr	r3, [r3, #0]
 8025dd6:	f06f 0202 	mvn.w	r2, #2
 8025dda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8025ddc:	687b      	ldr	r3, [r7, #4]
 8025dde:	2201      	movs	r2, #1
 8025de0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8025de2:	687b      	ldr	r3, [r7, #4]
 8025de4:	681b      	ldr	r3, [r3, #0]
 8025de6:	699b      	ldr	r3, [r3, #24]
 8025de8:	f003 0303 	and.w	r3, r3, #3
 8025dec:	2b00      	cmp	r3, #0
 8025dee:	d003      	beq.n	8025df8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8025df0:	6878      	ldr	r0, [r7, #4]
 8025df2:	f000 fa6c 	bl	80262ce <HAL_TIM_IC_CaptureCallback>
 8025df6:	e005      	b.n	8025e04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8025df8:	6878      	ldr	r0, [r7, #4]
 8025dfa:	f000 fa5e 	bl	80262ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8025dfe:	6878      	ldr	r0, [r7, #4]
 8025e00:	f000 fa6f 	bl	80262e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8025e04:	687b      	ldr	r3, [r7, #4]
 8025e06:	2200      	movs	r2, #0
 8025e08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8025e0a:	687b      	ldr	r3, [r7, #4]
 8025e0c:	681b      	ldr	r3, [r3, #0]
 8025e0e:	691b      	ldr	r3, [r3, #16]
 8025e10:	f003 0304 	and.w	r3, r3, #4
 8025e14:	2b04      	cmp	r3, #4
 8025e16:	d122      	bne.n	8025e5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8025e18:	687b      	ldr	r3, [r7, #4]
 8025e1a:	681b      	ldr	r3, [r3, #0]
 8025e1c:	68db      	ldr	r3, [r3, #12]
 8025e1e:	f003 0304 	and.w	r3, r3, #4
 8025e22:	2b04      	cmp	r3, #4
 8025e24:	d11b      	bne.n	8025e5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8025e26:	687b      	ldr	r3, [r7, #4]
 8025e28:	681b      	ldr	r3, [r3, #0]
 8025e2a:	f06f 0204 	mvn.w	r2, #4
 8025e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8025e30:	687b      	ldr	r3, [r7, #4]
 8025e32:	2202      	movs	r2, #2
 8025e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8025e36:	687b      	ldr	r3, [r7, #4]
 8025e38:	681b      	ldr	r3, [r3, #0]
 8025e3a:	699b      	ldr	r3, [r3, #24]
 8025e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8025e40:	2b00      	cmp	r3, #0
 8025e42:	d003      	beq.n	8025e4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8025e44:	6878      	ldr	r0, [r7, #4]
 8025e46:	f000 fa42 	bl	80262ce <HAL_TIM_IC_CaptureCallback>
 8025e4a:	e005      	b.n	8025e58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8025e4c:	6878      	ldr	r0, [r7, #4]
 8025e4e:	f000 fa34 	bl	80262ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8025e52:	6878      	ldr	r0, [r7, #4]
 8025e54:	f000 fa45 	bl	80262e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8025e58:	687b      	ldr	r3, [r7, #4]
 8025e5a:	2200      	movs	r2, #0
 8025e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8025e5e:	687b      	ldr	r3, [r7, #4]
 8025e60:	681b      	ldr	r3, [r3, #0]
 8025e62:	691b      	ldr	r3, [r3, #16]
 8025e64:	f003 0308 	and.w	r3, r3, #8
 8025e68:	2b08      	cmp	r3, #8
 8025e6a:	d122      	bne.n	8025eb2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8025e6c:	687b      	ldr	r3, [r7, #4]
 8025e6e:	681b      	ldr	r3, [r3, #0]
 8025e70:	68db      	ldr	r3, [r3, #12]
 8025e72:	f003 0308 	and.w	r3, r3, #8
 8025e76:	2b08      	cmp	r3, #8
 8025e78:	d11b      	bne.n	8025eb2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8025e7a:	687b      	ldr	r3, [r7, #4]
 8025e7c:	681b      	ldr	r3, [r3, #0]
 8025e7e:	f06f 0208 	mvn.w	r2, #8
 8025e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8025e84:	687b      	ldr	r3, [r7, #4]
 8025e86:	2204      	movs	r2, #4
 8025e88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8025e8a:	687b      	ldr	r3, [r7, #4]
 8025e8c:	681b      	ldr	r3, [r3, #0]
 8025e8e:	69db      	ldr	r3, [r3, #28]
 8025e90:	f003 0303 	and.w	r3, r3, #3
 8025e94:	2b00      	cmp	r3, #0
 8025e96:	d003      	beq.n	8025ea0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8025e98:	6878      	ldr	r0, [r7, #4]
 8025e9a:	f000 fa18 	bl	80262ce <HAL_TIM_IC_CaptureCallback>
 8025e9e:	e005      	b.n	8025eac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8025ea0:	6878      	ldr	r0, [r7, #4]
 8025ea2:	f000 fa0a 	bl	80262ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8025ea6:	6878      	ldr	r0, [r7, #4]
 8025ea8:	f000 fa1b 	bl	80262e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8025eac:	687b      	ldr	r3, [r7, #4]
 8025eae:	2200      	movs	r2, #0
 8025eb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8025eb2:	687b      	ldr	r3, [r7, #4]
 8025eb4:	681b      	ldr	r3, [r3, #0]
 8025eb6:	691b      	ldr	r3, [r3, #16]
 8025eb8:	f003 0310 	and.w	r3, r3, #16
 8025ebc:	2b10      	cmp	r3, #16
 8025ebe:	d122      	bne.n	8025f06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8025ec0:	687b      	ldr	r3, [r7, #4]
 8025ec2:	681b      	ldr	r3, [r3, #0]
 8025ec4:	68db      	ldr	r3, [r3, #12]
 8025ec6:	f003 0310 	and.w	r3, r3, #16
 8025eca:	2b10      	cmp	r3, #16
 8025ecc:	d11b      	bne.n	8025f06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8025ece:	687b      	ldr	r3, [r7, #4]
 8025ed0:	681b      	ldr	r3, [r3, #0]
 8025ed2:	f06f 0210 	mvn.w	r2, #16
 8025ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8025ed8:	687b      	ldr	r3, [r7, #4]
 8025eda:	2208      	movs	r2, #8
 8025edc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8025ede:	687b      	ldr	r3, [r7, #4]
 8025ee0:	681b      	ldr	r3, [r3, #0]
 8025ee2:	69db      	ldr	r3, [r3, #28]
 8025ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8025ee8:	2b00      	cmp	r3, #0
 8025eea:	d003      	beq.n	8025ef4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8025eec:	6878      	ldr	r0, [r7, #4]
 8025eee:	f000 f9ee 	bl	80262ce <HAL_TIM_IC_CaptureCallback>
 8025ef2:	e005      	b.n	8025f00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8025ef4:	6878      	ldr	r0, [r7, #4]
 8025ef6:	f000 f9e0 	bl	80262ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8025efa:	6878      	ldr	r0, [r7, #4]
 8025efc:	f000 f9f1 	bl	80262e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8025f00:	687b      	ldr	r3, [r7, #4]
 8025f02:	2200      	movs	r2, #0
 8025f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8025f06:	687b      	ldr	r3, [r7, #4]
 8025f08:	681b      	ldr	r3, [r3, #0]
 8025f0a:	691b      	ldr	r3, [r3, #16]
 8025f0c:	f003 0301 	and.w	r3, r3, #1
 8025f10:	2b01      	cmp	r3, #1
 8025f12:	d10e      	bne.n	8025f32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8025f14:	687b      	ldr	r3, [r7, #4]
 8025f16:	681b      	ldr	r3, [r3, #0]
 8025f18:	68db      	ldr	r3, [r3, #12]
 8025f1a:	f003 0301 	and.w	r3, r3, #1
 8025f1e:	2b01      	cmp	r3, #1
 8025f20:	d107      	bne.n	8025f32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8025f22:	687b      	ldr	r3, [r7, #4]
 8025f24:	681b      	ldr	r3, [r3, #0]
 8025f26:	f06f 0201 	mvn.w	r2, #1
 8025f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8025f2c:	6878      	ldr	r0, [r7, #4]
 8025f2e:	f7fb fb33 	bl	8021598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8025f32:	687b      	ldr	r3, [r7, #4]
 8025f34:	681b      	ldr	r3, [r3, #0]
 8025f36:	691b      	ldr	r3, [r3, #16]
 8025f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025f3c:	2b80      	cmp	r3, #128	; 0x80
 8025f3e:	d10e      	bne.n	8025f5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8025f40:	687b      	ldr	r3, [r7, #4]
 8025f42:	681b      	ldr	r3, [r3, #0]
 8025f44:	68db      	ldr	r3, [r3, #12]
 8025f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025f4a:	2b80      	cmp	r3, #128	; 0x80
 8025f4c:	d107      	bne.n	8025f5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8025f4e:	687b      	ldr	r3, [r7, #4]
 8025f50:	681b      	ldr	r3, [r3, #0]
 8025f52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8025f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8025f58:	6878      	ldr	r0, [r7, #4]
 8025f5a:	f000 fdbf 	bl	8026adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8025f5e:	687b      	ldr	r3, [r7, #4]
 8025f60:	681b      	ldr	r3, [r3, #0]
 8025f62:	691b      	ldr	r3, [r3, #16]
 8025f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025f68:	2b40      	cmp	r3, #64	; 0x40
 8025f6a:	d10e      	bne.n	8025f8a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8025f6c:	687b      	ldr	r3, [r7, #4]
 8025f6e:	681b      	ldr	r3, [r3, #0]
 8025f70:	68db      	ldr	r3, [r3, #12]
 8025f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025f76:	2b40      	cmp	r3, #64	; 0x40
 8025f78:	d107      	bne.n	8025f8a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8025f7a:	687b      	ldr	r3, [r7, #4]
 8025f7c:	681b      	ldr	r3, [r3, #0]
 8025f7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8025f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8025f84:	6878      	ldr	r0, [r7, #4]
 8025f86:	f000 f9b6 	bl	80262f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8025f8a:	687b      	ldr	r3, [r7, #4]
 8025f8c:	681b      	ldr	r3, [r3, #0]
 8025f8e:	691b      	ldr	r3, [r3, #16]
 8025f90:	f003 0320 	and.w	r3, r3, #32
 8025f94:	2b20      	cmp	r3, #32
 8025f96:	d10e      	bne.n	8025fb6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8025f98:	687b      	ldr	r3, [r7, #4]
 8025f9a:	681b      	ldr	r3, [r3, #0]
 8025f9c:	68db      	ldr	r3, [r3, #12]
 8025f9e:	f003 0320 	and.w	r3, r3, #32
 8025fa2:	2b20      	cmp	r3, #32
 8025fa4:	d107      	bne.n	8025fb6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8025fa6:	687b      	ldr	r3, [r7, #4]
 8025fa8:	681b      	ldr	r3, [r3, #0]
 8025faa:	f06f 0220 	mvn.w	r2, #32
 8025fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8025fb0:	6878      	ldr	r0, [r7, #4]
 8025fb2:	f000 fd89 	bl	8026ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8025fb6:	bf00      	nop
 8025fb8:	3708      	adds	r7, #8
 8025fba:	46bd      	mov	sp, r7
 8025fbc:	bd80      	pop	{r7, pc}
	...

08025fc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8025fc0:	b580      	push	{r7, lr}
 8025fc2:	b084      	sub	sp, #16
 8025fc4:	af00      	add	r7, sp, #0
 8025fc6:	60f8      	str	r0, [r7, #12]
 8025fc8:	60b9      	str	r1, [r7, #8]
 8025fca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8025fcc:	68fb      	ldr	r3, [r7, #12]
 8025fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8025fd2:	2b01      	cmp	r3, #1
 8025fd4:	d101      	bne.n	8025fda <HAL_TIM_PWM_ConfigChannel+0x1a>
 8025fd6:	2302      	movs	r3, #2
 8025fd8:	e0b4      	b.n	8026144 <HAL_TIM_PWM_ConfigChannel+0x184>
 8025fda:	68fb      	ldr	r3, [r7, #12]
 8025fdc:	2201      	movs	r2, #1
 8025fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8025fe2:	68fb      	ldr	r3, [r7, #12]
 8025fe4:	2202      	movs	r2, #2
 8025fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8025fea:	687b      	ldr	r3, [r7, #4]
 8025fec:	2b0c      	cmp	r3, #12
 8025fee:	f200 809f 	bhi.w	8026130 <HAL_TIM_PWM_ConfigChannel+0x170>
 8025ff2:	a201      	add	r2, pc, #4	; (adr r2, 8025ff8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8025ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025ff8:	0802602d 	.word	0x0802602d
 8025ffc:	08026131 	.word	0x08026131
 8026000:	08026131 	.word	0x08026131
 8026004:	08026131 	.word	0x08026131
 8026008:	0802606d 	.word	0x0802606d
 802600c:	08026131 	.word	0x08026131
 8026010:	08026131 	.word	0x08026131
 8026014:	08026131 	.word	0x08026131
 8026018:	080260af 	.word	0x080260af
 802601c:	08026131 	.word	0x08026131
 8026020:	08026131 	.word	0x08026131
 8026024:	08026131 	.word	0x08026131
 8026028:	080260ef 	.word	0x080260ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 802602c:	68fb      	ldr	r3, [r7, #12]
 802602e:	681b      	ldr	r3, [r3, #0]
 8026030:	68b9      	ldr	r1, [r7, #8]
 8026032:	4618      	mov	r0, r3
 8026034:	f000 fa0a 	bl	802644c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8026038:	68fb      	ldr	r3, [r7, #12]
 802603a:	681b      	ldr	r3, [r3, #0]
 802603c:	699a      	ldr	r2, [r3, #24]
 802603e:	68fb      	ldr	r3, [r7, #12]
 8026040:	681b      	ldr	r3, [r3, #0]
 8026042:	f042 0208 	orr.w	r2, r2, #8
 8026046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8026048:	68fb      	ldr	r3, [r7, #12]
 802604a:	681b      	ldr	r3, [r3, #0]
 802604c:	699a      	ldr	r2, [r3, #24]
 802604e:	68fb      	ldr	r3, [r7, #12]
 8026050:	681b      	ldr	r3, [r3, #0]
 8026052:	f022 0204 	bic.w	r2, r2, #4
 8026056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8026058:	68fb      	ldr	r3, [r7, #12]
 802605a:	681b      	ldr	r3, [r3, #0]
 802605c:	6999      	ldr	r1, [r3, #24]
 802605e:	68bb      	ldr	r3, [r7, #8]
 8026060:	691a      	ldr	r2, [r3, #16]
 8026062:	68fb      	ldr	r3, [r7, #12]
 8026064:	681b      	ldr	r3, [r3, #0]
 8026066:	430a      	orrs	r2, r1
 8026068:	619a      	str	r2, [r3, #24]
      break;
 802606a:	e062      	b.n	8026132 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 802606c:	68fb      	ldr	r3, [r7, #12]
 802606e:	681b      	ldr	r3, [r3, #0]
 8026070:	68b9      	ldr	r1, [r7, #8]
 8026072:	4618      	mov	r0, r3
 8026074:	f000 fa5a 	bl	802652c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8026078:	68fb      	ldr	r3, [r7, #12]
 802607a:	681b      	ldr	r3, [r3, #0]
 802607c:	699a      	ldr	r2, [r3, #24]
 802607e:	68fb      	ldr	r3, [r7, #12]
 8026080:	681b      	ldr	r3, [r3, #0]
 8026082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8026086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8026088:	68fb      	ldr	r3, [r7, #12]
 802608a:	681b      	ldr	r3, [r3, #0]
 802608c:	699a      	ldr	r2, [r3, #24]
 802608e:	68fb      	ldr	r3, [r7, #12]
 8026090:	681b      	ldr	r3, [r3, #0]
 8026092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8026096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8026098:	68fb      	ldr	r3, [r7, #12]
 802609a:	681b      	ldr	r3, [r3, #0]
 802609c:	6999      	ldr	r1, [r3, #24]
 802609e:	68bb      	ldr	r3, [r7, #8]
 80260a0:	691b      	ldr	r3, [r3, #16]
 80260a2:	021a      	lsls	r2, r3, #8
 80260a4:	68fb      	ldr	r3, [r7, #12]
 80260a6:	681b      	ldr	r3, [r3, #0]
 80260a8:	430a      	orrs	r2, r1
 80260aa:	619a      	str	r2, [r3, #24]
      break;
 80260ac:	e041      	b.n	8026132 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80260ae:	68fb      	ldr	r3, [r7, #12]
 80260b0:	681b      	ldr	r3, [r3, #0]
 80260b2:	68b9      	ldr	r1, [r7, #8]
 80260b4:	4618      	mov	r0, r3
 80260b6:	f000 faaf 	bl	8026618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80260ba:	68fb      	ldr	r3, [r7, #12]
 80260bc:	681b      	ldr	r3, [r3, #0]
 80260be:	69da      	ldr	r2, [r3, #28]
 80260c0:	68fb      	ldr	r3, [r7, #12]
 80260c2:	681b      	ldr	r3, [r3, #0]
 80260c4:	f042 0208 	orr.w	r2, r2, #8
 80260c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80260ca:	68fb      	ldr	r3, [r7, #12]
 80260cc:	681b      	ldr	r3, [r3, #0]
 80260ce:	69da      	ldr	r2, [r3, #28]
 80260d0:	68fb      	ldr	r3, [r7, #12]
 80260d2:	681b      	ldr	r3, [r3, #0]
 80260d4:	f022 0204 	bic.w	r2, r2, #4
 80260d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80260da:	68fb      	ldr	r3, [r7, #12]
 80260dc:	681b      	ldr	r3, [r3, #0]
 80260de:	69d9      	ldr	r1, [r3, #28]
 80260e0:	68bb      	ldr	r3, [r7, #8]
 80260e2:	691a      	ldr	r2, [r3, #16]
 80260e4:	68fb      	ldr	r3, [r7, #12]
 80260e6:	681b      	ldr	r3, [r3, #0]
 80260e8:	430a      	orrs	r2, r1
 80260ea:	61da      	str	r2, [r3, #28]
      break;
 80260ec:	e021      	b.n	8026132 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80260ee:	68fb      	ldr	r3, [r7, #12]
 80260f0:	681b      	ldr	r3, [r3, #0]
 80260f2:	68b9      	ldr	r1, [r7, #8]
 80260f4:	4618      	mov	r0, r3
 80260f6:	f000 fb03 	bl	8026700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80260fa:	68fb      	ldr	r3, [r7, #12]
 80260fc:	681b      	ldr	r3, [r3, #0]
 80260fe:	69da      	ldr	r2, [r3, #28]
 8026100:	68fb      	ldr	r3, [r7, #12]
 8026102:	681b      	ldr	r3, [r3, #0]
 8026104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8026108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 802610a:	68fb      	ldr	r3, [r7, #12]
 802610c:	681b      	ldr	r3, [r3, #0]
 802610e:	69da      	ldr	r2, [r3, #28]
 8026110:	68fb      	ldr	r3, [r7, #12]
 8026112:	681b      	ldr	r3, [r3, #0]
 8026114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8026118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 802611a:	68fb      	ldr	r3, [r7, #12]
 802611c:	681b      	ldr	r3, [r3, #0]
 802611e:	69d9      	ldr	r1, [r3, #28]
 8026120:	68bb      	ldr	r3, [r7, #8]
 8026122:	691b      	ldr	r3, [r3, #16]
 8026124:	021a      	lsls	r2, r3, #8
 8026126:	68fb      	ldr	r3, [r7, #12]
 8026128:	681b      	ldr	r3, [r3, #0]
 802612a:	430a      	orrs	r2, r1
 802612c:	61da      	str	r2, [r3, #28]
      break;
 802612e:	e000      	b.n	8026132 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8026130:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8026132:	68fb      	ldr	r3, [r7, #12]
 8026134:	2201      	movs	r2, #1
 8026136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802613a:	68fb      	ldr	r3, [r7, #12]
 802613c:	2200      	movs	r2, #0
 802613e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8026142:	2300      	movs	r3, #0
}
 8026144:	4618      	mov	r0, r3
 8026146:	3710      	adds	r7, #16
 8026148:	46bd      	mov	sp, r7
 802614a:	bd80      	pop	{r7, pc}

0802614c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 802614c:	b580      	push	{r7, lr}
 802614e:	b084      	sub	sp, #16
 8026150:	af00      	add	r7, sp, #0
 8026152:	6078      	str	r0, [r7, #4]
 8026154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8026156:	687b      	ldr	r3, [r7, #4]
 8026158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802615c:	2b01      	cmp	r3, #1
 802615e:	d101      	bne.n	8026164 <HAL_TIM_ConfigClockSource+0x18>
 8026160:	2302      	movs	r3, #2
 8026162:	e0a6      	b.n	80262b2 <HAL_TIM_ConfigClockSource+0x166>
 8026164:	687b      	ldr	r3, [r7, #4]
 8026166:	2201      	movs	r2, #1
 8026168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802616c:	687b      	ldr	r3, [r7, #4]
 802616e:	2202      	movs	r2, #2
 8026170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8026174:	687b      	ldr	r3, [r7, #4]
 8026176:	681b      	ldr	r3, [r3, #0]
 8026178:	689b      	ldr	r3, [r3, #8]
 802617a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802617c:	68fb      	ldr	r3, [r7, #12]
 802617e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8026182:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8026184:	68fb      	ldr	r3, [r7, #12]
 8026186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802618a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 802618c:	687b      	ldr	r3, [r7, #4]
 802618e:	681b      	ldr	r3, [r3, #0]
 8026190:	68fa      	ldr	r2, [r7, #12]
 8026192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8026194:	683b      	ldr	r3, [r7, #0]
 8026196:	681b      	ldr	r3, [r3, #0]
 8026198:	2b40      	cmp	r3, #64	; 0x40
 802619a:	d067      	beq.n	802626c <HAL_TIM_ConfigClockSource+0x120>
 802619c:	2b40      	cmp	r3, #64	; 0x40
 802619e:	d80b      	bhi.n	80261b8 <HAL_TIM_ConfigClockSource+0x6c>
 80261a0:	2b10      	cmp	r3, #16
 80261a2:	d073      	beq.n	802628c <HAL_TIM_ConfigClockSource+0x140>
 80261a4:	2b10      	cmp	r3, #16
 80261a6:	d802      	bhi.n	80261ae <HAL_TIM_ConfigClockSource+0x62>
 80261a8:	2b00      	cmp	r3, #0
 80261aa:	d06f      	beq.n	802628c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80261ac:	e078      	b.n	80262a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80261ae:	2b20      	cmp	r3, #32
 80261b0:	d06c      	beq.n	802628c <HAL_TIM_ConfigClockSource+0x140>
 80261b2:	2b30      	cmp	r3, #48	; 0x30
 80261b4:	d06a      	beq.n	802628c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80261b6:	e073      	b.n	80262a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80261b8:	2b70      	cmp	r3, #112	; 0x70
 80261ba:	d00d      	beq.n	80261d8 <HAL_TIM_ConfigClockSource+0x8c>
 80261bc:	2b70      	cmp	r3, #112	; 0x70
 80261be:	d804      	bhi.n	80261ca <HAL_TIM_ConfigClockSource+0x7e>
 80261c0:	2b50      	cmp	r3, #80	; 0x50
 80261c2:	d033      	beq.n	802622c <HAL_TIM_ConfigClockSource+0xe0>
 80261c4:	2b60      	cmp	r3, #96	; 0x60
 80261c6:	d041      	beq.n	802624c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80261c8:	e06a      	b.n	80262a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80261ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80261ce:	d066      	beq.n	802629e <HAL_TIM_ConfigClockSource+0x152>
 80261d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80261d4:	d017      	beq.n	8026206 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80261d6:	e063      	b.n	80262a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80261d8:	687b      	ldr	r3, [r7, #4]
 80261da:	6818      	ldr	r0, [r3, #0]
 80261dc:	683b      	ldr	r3, [r7, #0]
 80261de:	6899      	ldr	r1, [r3, #8]
 80261e0:	683b      	ldr	r3, [r7, #0]
 80261e2:	685a      	ldr	r2, [r3, #4]
 80261e4:	683b      	ldr	r3, [r7, #0]
 80261e6:	68db      	ldr	r3, [r3, #12]
 80261e8:	f000 fb5a 	bl	80268a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80261ec:	687b      	ldr	r3, [r7, #4]
 80261ee:	681b      	ldr	r3, [r3, #0]
 80261f0:	689b      	ldr	r3, [r3, #8]
 80261f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80261f4:	68fb      	ldr	r3, [r7, #12]
 80261f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80261fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80261fc:	687b      	ldr	r3, [r7, #4]
 80261fe:	681b      	ldr	r3, [r3, #0]
 8026200:	68fa      	ldr	r2, [r7, #12]
 8026202:	609a      	str	r2, [r3, #8]
      break;
 8026204:	e04c      	b.n	80262a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8026206:	687b      	ldr	r3, [r7, #4]
 8026208:	6818      	ldr	r0, [r3, #0]
 802620a:	683b      	ldr	r3, [r7, #0]
 802620c:	6899      	ldr	r1, [r3, #8]
 802620e:	683b      	ldr	r3, [r7, #0]
 8026210:	685a      	ldr	r2, [r3, #4]
 8026212:	683b      	ldr	r3, [r7, #0]
 8026214:	68db      	ldr	r3, [r3, #12]
 8026216:	f000 fb43 	bl	80268a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802621a:	687b      	ldr	r3, [r7, #4]
 802621c:	681b      	ldr	r3, [r3, #0]
 802621e:	689a      	ldr	r2, [r3, #8]
 8026220:	687b      	ldr	r3, [r7, #4]
 8026222:	681b      	ldr	r3, [r3, #0]
 8026224:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8026228:	609a      	str	r2, [r3, #8]
      break;
 802622a:	e039      	b.n	80262a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802622c:	687b      	ldr	r3, [r7, #4]
 802622e:	6818      	ldr	r0, [r3, #0]
 8026230:	683b      	ldr	r3, [r7, #0]
 8026232:	6859      	ldr	r1, [r3, #4]
 8026234:	683b      	ldr	r3, [r7, #0]
 8026236:	68db      	ldr	r3, [r3, #12]
 8026238:	461a      	mov	r2, r3
 802623a:	f000 fab7 	bl	80267ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 802623e:	687b      	ldr	r3, [r7, #4]
 8026240:	681b      	ldr	r3, [r3, #0]
 8026242:	2150      	movs	r1, #80	; 0x50
 8026244:	4618      	mov	r0, r3
 8026246:	f000 fb10 	bl	802686a <TIM_ITRx_SetConfig>
      break;
 802624a:	e029      	b.n	80262a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 802624c:	687b      	ldr	r3, [r7, #4]
 802624e:	6818      	ldr	r0, [r3, #0]
 8026250:	683b      	ldr	r3, [r7, #0]
 8026252:	6859      	ldr	r1, [r3, #4]
 8026254:	683b      	ldr	r3, [r7, #0]
 8026256:	68db      	ldr	r3, [r3, #12]
 8026258:	461a      	mov	r2, r3
 802625a:	f000 fad6 	bl	802680a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802625e:	687b      	ldr	r3, [r7, #4]
 8026260:	681b      	ldr	r3, [r3, #0]
 8026262:	2160      	movs	r1, #96	; 0x60
 8026264:	4618      	mov	r0, r3
 8026266:	f000 fb00 	bl	802686a <TIM_ITRx_SetConfig>
      break;
 802626a:	e019      	b.n	80262a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802626c:	687b      	ldr	r3, [r7, #4]
 802626e:	6818      	ldr	r0, [r3, #0]
 8026270:	683b      	ldr	r3, [r7, #0]
 8026272:	6859      	ldr	r1, [r3, #4]
 8026274:	683b      	ldr	r3, [r7, #0]
 8026276:	68db      	ldr	r3, [r3, #12]
 8026278:	461a      	mov	r2, r3
 802627a:	f000 fa97 	bl	80267ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802627e:	687b      	ldr	r3, [r7, #4]
 8026280:	681b      	ldr	r3, [r3, #0]
 8026282:	2140      	movs	r1, #64	; 0x40
 8026284:	4618      	mov	r0, r3
 8026286:	f000 faf0 	bl	802686a <TIM_ITRx_SetConfig>
      break;
 802628a:	e009      	b.n	80262a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802628c:	687b      	ldr	r3, [r7, #4]
 802628e:	681a      	ldr	r2, [r3, #0]
 8026290:	683b      	ldr	r3, [r7, #0]
 8026292:	681b      	ldr	r3, [r3, #0]
 8026294:	4619      	mov	r1, r3
 8026296:	4610      	mov	r0, r2
 8026298:	f000 fae7 	bl	802686a <TIM_ITRx_SetConfig>
      break;
 802629c:	e000      	b.n	80262a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 802629e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80262a0:	687b      	ldr	r3, [r7, #4]
 80262a2:	2201      	movs	r2, #1
 80262a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80262a8:	687b      	ldr	r3, [r7, #4]
 80262aa:	2200      	movs	r2, #0
 80262ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80262b0:	2300      	movs	r3, #0
}
 80262b2:	4618      	mov	r0, r3
 80262b4:	3710      	adds	r7, #16
 80262b6:	46bd      	mov	sp, r7
 80262b8:	bd80      	pop	{r7, pc}

080262ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80262ba:	b480      	push	{r7}
 80262bc:	b083      	sub	sp, #12
 80262be:	af00      	add	r7, sp, #0
 80262c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80262c2:	bf00      	nop
 80262c4:	370c      	adds	r7, #12
 80262c6:	46bd      	mov	sp, r7
 80262c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262cc:	4770      	bx	lr

080262ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80262ce:	b480      	push	{r7}
 80262d0:	b083      	sub	sp, #12
 80262d2:	af00      	add	r7, sp, #0
 80262d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80262d6:	bf00      	nop
 80262d8:	370c      	adds	r7, #12
 80262da:	46bd      	mov	sp, r7
 80262dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262e0:	4770      	bx	lr

080262e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80262e2:	b480      	push	{r7}
 80262e4:	b083      	sub	sp, #12
 80262e6:	af00      	add	r7, sp, #0
 80262e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80262ea:	bf00      	nop
 80262ec:	370c      	adds	r7, #12
 80262ee:	46bd      	mov	sp, r7
 80262f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262f4:	4770      	bx	lr

080262f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80262f6:	b480      	push	{r7}
 80262f8:	b083      	sub	sp, #12
 80262fa:	af00      	add	r7, sp, #0
 80262fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80262fe:	bf00      	nop
 8026300:	370c      	adds	r7, #12
 8026302:	46bd      	mov	sp, r7
 8026304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026308:	4770      	bx	lr
	...

0802630c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 802630c:	b480      	push	{r7}
 802630e:	b085      	sub	sp, #20
 8026310:	af00      	add	r7, sp, #0
 8026312:	6078      	str	r0, [r7, #4]
 8026314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8026316:	687b      	ldr	r3, [r7, #4]
 8026318:	681b      	ldr	r3, [r3, #0]
 802631a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802631c:	687b      	ldr	r3, [r7, #4]
 802631e:	4a40      	ldr	r2, [pc, #256]	; (8026420 <TIM_Base_SetConfig+0x114>)
 8026320:	4293      	cmp	r3, r2
 8026322:	d013      	beq.n	802634c <TIM_Base_SetConfig+0x40>
 8026324:	687b      	ldr	r3, [r7, #4]
 8026326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802632a:	d00f      	beq.n	802634c <TIM_Base_SetConfig+0x40>
 802632c:	687b      	ldr	r3, [r7, #4]
 802632e:	4a3d      	ldr	r2, [pc, #244]	; (8026424 <TIM_Base_SetConfig+0x118>)
 8026330:	4293      	cmp	r3, r2
 8026332:	d00b      	beq.n	802634c <TIM_Base_SetConfig+0x40>
 8026334:	687b      	ldr	r3, [r7, #4]
 8026336:	4a3c      	ldr	r2, [pc, #240]	; (8026428 <TIM_Base_SetConfig+0x11c>)
 8026338:	4293      	cmp	r3, r2
 802633a:	d007      	beq.n	802634c <TIM_Base_SetConfig+0x40>
 802633c:	687b      	ldr	r3, [r7, #4]
 802633e:	4a3b      	ldr	r2, [pc, #236]	; (802642c <TIM_Base_SetConfig+0x120>)
 8026340:	4293      	cmp	r3, r2
 8026342:	d003      	beq.n	802634c <TIM_Base_SetConfig+0x40>
 8026344:	687b      	ldr	r3, [r7, #4]
 8026346:	4a3a      	ldr	r2, [pc, #232]	; (8026430 <TIM_Base_SetConfig+0x124>)
 8026348:	4293      	cmp	r3, r2
 802634a:	d108      	bne.n	802635e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802634c:	68fb      	ldr	r3, [r7, #12]
 802634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8026352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8026354:	683b      	ldr	r3, [r7, #0]
 8026356:	685b      	ldr	r3, [r3, #4]
 8026358:	68fa      	ldr	r2, [r7, #12]
 802635a:	4313      	orrs	r3, r2
 802635c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802635e:	687b      	ldr	r3, [r7, #4]
 8026360:	4a2f      	ldr	r2, [pc, #188]	; (8026420 <TIM_Base_SetConfig+0x114>)
 8026362:	4293      	cmp	r3, r2
 8026364:	d02b      	beq.n	80263be <TIM_Base_SetConfig+0xb2>
 8026366:	687b      	ldr	r3, [r7, #4]
 8026368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802636c:	d027      	beq.n	80263be <TIM_Base_SetConfig+0xb2>
 802636e:	687b      	ldr	r3, [r7, #4]
 8026370:	4a2c      	ldr	r2, [pc, #176]	; (8026424 <TIM_Base_SetConfig+0x118>)
 8026372:	4293      	cmp	r3, r2
 8026374:	d023      	beq.n	80263be <TIM_Base_SetConfig+0xb2>
 8026376:	687b      	ldr	r3, [r7, #4]
 8026378:	4a2b      	ldr	r2, [pc, #172]	; (8026428 <TIM_Base_SetConfig+0x11c>)
 802637a:	4293      	cmp	r3, r2
 802637c:	d01f      	beq.n	80263be <TIM_Base_SetConfig+0xb2>
 802637e:	687b      	ldr	r3, [r7, #4]
 8026380:	4a2a      	ldr	r2, [pc, #168]	; (802642c <TIM_Base_SetConfig+0x120>)
 8026382:	4293      	cmp	r3, r2
 8026384:	d01b      	beq.n	80263be <TIM_Base_SetConfig+0xb2>
 8026386:	687b      	ldr	r3, [r7, #4]
 8026388:	4a29      	ldr	r2, [pc, #164]	; (8026430 <TIM_Base_SetConfig+0x124>)
 802638a:	4293      	cmp	r3, r2
 802638c:	d017      	beq.n	80263be <TIM_Base_SetConfig+0xb2>
 802638e:	687b      	ldr	r3, [r7, #4]
 8026390:	4a28      	ldr	r2, [pc, #160]	; (8026434 <TIM_Base_SetConfig+0x128>)
 8026392:	4293      	cmp	r3, r2
 8026394:	d013      	beq.n	80263be <TIM_Base_SetConfig+0xb2>
 8026396:	687b      	ldr	r3, [r7, #4]
 8026398:	4a27      	ldr	r2, [pc, #156]	; (8026438 <TIM_Base_SetConfig+0x12c>)
 802639a:	4293      	cmp	r3, r2
 802639c:	d00f      	beq.n	80263be <TIM_Base_SetConfig+0xb2>
 802639e:	687b      	ldr	r3, [r7, #4]
 80263a0:	4a26      	ldr	r2, [pc, #152]	; (802643c <TIM_Base_SetConfig+0x130>)
 80263a2:	4293      	cmp	r3, r2
 80263a4:	d00b      	beq.n	80263be <TIM_Base_SetConfig+0xb2>
 80263a6:	687b      	ldr	r3, [r7, #4]
 80263a8:	4a25      	ldr	r2, [pc, #148]	; (8026440 <TIM_Base_SetConfig+0x134>)
 80263aa:	4293      	cmp	r3, r2
 80263ac:	d007      	beq.n	80263be <TIM_Base_SetConfig+0xb2>
 80263ae:	687b      	ldr	r3, [r7, #4]
 80263b0:	4a24      	ldr	r2, [pc, #144]	; (8026444 <TIM_Base_SetConfig+0x138>)
 80263b2:	4293      	cmp	r3, r2
 80263b4:	d003      	beq.n	80263be <TIM_Base_SetConfig+0xb2>
 80263b6:	687b      	ldr	r3, [r7, #4]
 80263b8:	4a23      	ldr	r2, [pc, #140]	; (8026448 <TIM_Base_SetConfig+0x13c>)
 80263ba:	4293      	cmp	r3, r2
 80263bc:	d108      	bne.n	80263d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80263be:	68fb      	ldr	r3, [r7, #12]
 80263c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80263c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80263c6:	683b      	ldr	r3, [r7, #0]
 80263c8:	68db      	ldr	r3, [r3, #12]
 80263ca:	68fa      	ldr	r2, [r7, #12]
 80263cc:	4313      	orrs	r3, r2
 80263ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80263d0:	68fb      	ldr	r3, [r7, #12]
 80263d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80263d6:	683b      	ldr	r3, [r7, #0]
 80263d8:	695b      	ldr	r3, [r3, #20]
 80263da:	4313      	orrs	r3, r2
 80263dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80263de:	687b      	ldr	r3, [r7, #4]
 80263e0:	68fa      	ldr	r2, [r7, #12]
 80263e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80263e4:	683b      	ldr	r3, [r7, #0]
 80263e6:	689a      	ldr	r2, [r3, #8]
 80263e8:	687b      	ldr	r3, [r7, #4]
 80263ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80263ec:	683b      	ldr	r3, [r7, #0]
 80263ee:	681a      	ldr	r2, [r3, #0]
 80263f0:	687b      	ldr	r3, [r7, #4]
 80263f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80263f4:	687b      	ldr	r3, [r7, #4]
 80263f6:	4a0a      	ldr	r2, [pc, #40]	; (8026420 <TIM_Base_SetConfig+0x114>)
 80263f8:	4293      	cmp	r3, r2
 80263fa:	d003      	beq.n	8026404 <TIM_Base_SetConfig+0xf8>
 80263fc:	687b      	ldr	r3, [r7, #4]
 80263fe:	4a0c      	ldr	r2, [pc, #48]	; (8026430 <TIM_Base_SetConfig+0x124>)
 8026400:	4293      	cmp	r3, r2
 8026402:	d103      	bne.n	802640c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8026404:	683b      	ldr	r3, [r7, #0]
 8026406:	691a      	ldr	r2, [r3, #16]
 8026408:	687b      	ldr	r3, [r7, #4]
 802640a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802640c:	687b      	ldr	r3, [r7, #4]
 802640e:	2201      	movs	r2, #1
 8026410:	615a      	str	r2, [r3, #20]
}
 8026412:	bf00      	nop
 8026414:	3714      	adds	r7, #20
 8026416:	46bd      	mov	sp, r7
 8026418:	f85d 7b04 	ldr.w	r7, [sp], #4
 802641c:	4770      	bx	lr
 802641e:	bf00      	nop
 8026420:	40010000 	.word	0x40010000
 8026424:	40000400 	.word	0x40000400
 8026428:	40000800 	.word	0x40000800
 802642c:	40000c00 	.word	0x40000c00
 8026430:	40010400 	.word	0x40010400
 8026434:	40014000 	.word	0x40014000
 8026438:	40014400 	.word	0x40014400
 802643c:	40014800 	.word	0x40014800
 8026440:	40001800 	.word	0x40001800
 8026444:	40001c00 	.word	0x40001c00
 8026448:	40002000 	.word	0x40002000

0802644c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802644c:	b480      	push	{r7}
 802644e:	b087      	sub	sp, #28
 8026450:	af00      	add	r7, sp, #0
 8026452:	6078      	str	r0, [r7, #4]
 8026454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8026456:	687b      	ldr	r3, [r7, #4]
 8026458:	6a1b      	ldr	r3, [r3, #32]
 802645a:	f023 0201 	bic.w	r2, r3, #1
 802645e:	687b      	ldr	r3, [r7, #4]
 8026460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8026462:	687b      	ldr	r3, [r7, #4]
 8026464:	6a1b      	ldr	r3, [r3, #32]
 8026466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8026468:	687b      	ldr	r3, [r7, #4]
 802646a:	685b      	ldr	r3, [r3, #4]
 802646c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802646e:	687b      	ldr	r3, [r7, #4]
 8026470:	699b      	ldr	r3, [r3, #24]
 8026472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8026474:	68fb      	ldr	r3, [r7, #12]
 8026476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802647a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 802647c:	68fb      	ldr	r3, [r7, #12]
 802647e:	f023 0303 	bic.w	r3, r3, #3
 8026482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8026484:	683b      	ldr	r3, [r7, #0]
 8026486:	681b      	ldr	r3, [r3, #0]
 8026488:	68fa      	ldr	r2, [r7, #12]
 802648a:	4313      	orrs	r3, r2
 802648c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 802648e:	697b      	ldr	r3, [r7, #20]
 8026490:	f023 0302 	bic.w	r3, r3, #2
 8026494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8026496:	683b      	ldr	r3, [r7, #0]
 8026498:	689b      	ldr	r3, [r3, #8]
 802649a:	697a      	ldr	r2, [r7, #20]
 802649c:	4313      	orrs	r3, r2
 802649e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80264a0:	687b      	ldr	r3, [r7, #4]
 80264a2:	4a20      	ldr	r2, [pc, #128]	; (8026524 <TIM_OC1_SetConfig+0xd8>)
 80264a4:	4293      	cmp	r3, r2
 80264a6:	d003      	beq.n	80264b0 <TIM_OC1_SetConfig+0x64>
 80264a8:	687b      	ldr	r3, [r7, #4]
 80264aa:	4a1f      	ldr	r2, [pc, #124]	; (8026528 <TIM_OC1_SetConfig+0xdc>)
 80264ac:	4293      	cmp	r3, r2
 80264ae:	d10c      	bne.n	80264ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80264b0:	697b      	ldr	r3, [r7, #20]
 80264b2:	f023 0308 	bic.w	r3, r3, #8
 80264b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80264b8:	683b      	ldr	r3, [r7, #0]
 80264ba:	68db      	ldr	r3, [r3, #12]
 80264bc:	697a      	ldr	r2, [r7, #20]
 80264be:	4313      	orrs	r3, r2
 80264c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80264c2:	697b      	ldr	r3, [r7, #20]
 80264c4:	f023 0304 	bic.w	r3, r3, #4
 80264c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80264ca:	687b      	ldr	r3, [r7, #4]
 80264cc:	4a15      	ldr	r2, [pc, #84]	; (8026524 <TIM_OC1_SetConfig+0xd8>)
 80264ce:	4293      	cmp	r3, r2
 80264d0:	d003      	beq.n	80264da <TIM_OC1_SetConfig+0x8e>
 80264d2:	687b      	ldr	r3, [r7, #4]
 80264d4:	4a14      	ldr	r2, [pc, #80]	; (8026528 <TIM_OC1_SetConfig+0xdc>)
 80264d6:	4293      	cmp	r3, r2
 80264d8:	d111      	bne.n	80264fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80264da:	693b      	ldr	r3, [r7, #16]
 80264dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80264e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80264e2:	693b      	ldr	r3, [r7, #16]
 80264e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80264e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80264ea:	683b      	ldr	r3, [r7, #0]
 80264ec:	695b      	ldr	r3, [r3, #20]
 80264ee:	693a      	ldr	r2, [r7, #16]
 80264f0:	4313      	orrs	r3, r2
 80264f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80264f4:	683b      	ldr	r3, [r7, #0]
 80264f6:	699b      	ldr	r3, [r3, #24]
 80264f8:	693a      	ldr	r2, [r7, #16]
 80264fa:	4313      	orrs	r3, r2
 80264fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80264fe:	687b      	ldr	r3, [r7, #4]
 8026500:	693a      	ldr	r2, [r7, #16]
 8026502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8026504:	687b      	ldr	r3, [r7, #4]
 8026506:	68fa      	ldr	r2, [r7, #12]
 8026508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 802650a:	683b      	ldr	r3, [r7, #0]
 802650c:	685a      	ldr	r2, [r3, #4]
 802650e:	687b      	ldr	r3, [r7, #4]
 8026510:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8026512:	687b      	ldr	r3, [r7, #4]
 8026514:	697a      	ldr	r2, [r7, #20]
 8026516:	621a      	str	r2, [r3, #32]
}
 8026518:	bf00      	nop
 802651a:	371c      	adds	r7, #28
 802651c:	46bd      	mov	sp, r7
 802651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026522:	4770      	bx	lr
 8026524:	40010000 	.word	0x40010000
 8026528:	40010400 	.word	0x40010400

0802652c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802652c:	b480      	push	{r7}
 802652e:	b087      	sub	sp, #28
 8026530:	af00      	add	r7, sp, #0
 8026532:	6078      	str	r0, [r7, #4]
 8026534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8026536:	687b      	ldr	r3, [r7, #4]
 8026538:	6a1b      	ldr	r3, [r3, #32]
 802653a:	f023 0210 	bic.w	r2, r3, #16
 802653e:	687b      	ldr	r3, [r7, #4]
 8026540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8026542:	687b      	ldr	r3, [r7, #4]
 8026544:	6a1b      	ldr	r3, [r3, #32]
 8026546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8026548:	687b      	ldr	r3, [r7, #4]
 802654a:	685b      	ldr	r3, [r3, #4]
 802654c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802654e:	687b      	ldr	r3, [r7, #4]
 8026550:	699b      	ldr	r3, [r3, #24]
 8026552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8026554:	68fb      	ldr	r3, [r7, #12]
 8026556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802655a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 802655c:	68fb      	ldr	r3, [r7, #12]
 802655e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8026562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8026564:	683b      	ldr	r3, [r7, #0]
 8026566:	681b      	ldr	r3, [r3, #0]
 8026568:	021b      	lsls	r3, r3, #8
 802656a:	68fa      	ldr	r2, [r7, #12]
 802656c:	4313      	orrs	r3, r2
 802656e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8026570:	697b      	ldr	r3, [r7, #20]
 8026572:	f023 0320 	bic.w	r3, r3, #32
 8026576:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8026578:	683b      	ldr	r3, [r7, #0]
 802657a:	689b      	ldr	r3, [r3, #8]
 802657c:	011b      	lsls	r3, r3, #4
 802657e:	697a      	ldr	r2, [r7, #20]
 8026580:	4313      	orrs	r3, r2
 8026582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8026584:	687b      	ldr	r3, [r7, #4]
 8026586:	4a22      	ldr	r2, [pc, #136]	; (8026610 <TIM_OC2_SetConfig+0xe4>)
 8026588:	4293      	cmp	r3, r2
 802658a:	d003      	beq.n	8026594 <TIM_OC2_SetConfig+0x68>
 802658c:	687b      	ldr	r3, [r7, #4]
 802658e:	4a21      	ldr	r2, [pc, #132]	; (8026614 <TIM_OC2_SetConfig+0xe8>)
 8026590:	4293      	cmp	r3, r2
 8026592:	d10d      	bne.n	80265b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8026594:	697b      	ldr	r3, [r7, #20]
 8026596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802659a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 802659c:	683b      	ldr	r3, [r7, #0]
 802659e:	68db      	ldr	r3, [r3, #12]
 80265a0:	011b      	lsls	r3, r3, #4
 80265a2:	697a      	ldr	r2, [r7, #20]
 80265a4:	4313      	orrs	r3, r2
 80265a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80265a8:	697b      	ldr	r3, [r7, #20]
 80265aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80265ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80265b0:	687b      	ldr	r3, [r7, #4]
 80265b2:	4a17      	ldr	r2, [pc, #92]	; (8026610 <TIM_OC2_SetConfig+0xe4>)
 80265b4:	4293      	cmp	r3, r2
 80265b6:	d003      	beq.n	80265c0 <TIM_OC2_SetConfig+0x94>
 80265b8:	687b      	ldr	r3, [r7, #4]
 80265ba:	4a16      	ldr	r2, [pc, #88]	; (8026614 <TIM_OC2_SetConfig+0xe8>)
 80265bc:	4293      	cmp	r3, r2
 80265be:	d113      	bne.n	80265e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80265c0:	693b      	ldr	r3, [r7, #16]
 80265c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80265c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80265c8:	693b      	ldr	r3, [r7, #16]
 80265ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80265ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80265d0:	683b      	ldr	r3, [r7, #0]
 80265d2:	695b      	ldr	r3, [r3, #20]
 80265d4:	009b      	lsls	r3, r3, #2
 80265d6:	693a      	ldr	r2, [r7, #16]
 80265d8:	4313      	orrs	r3, r2
 80265da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80265dc:	683b      	ldr	r3, [r7, #0]
 80265de:	699b      	ldr	r3, [r3, #24]
 80265e0:	009b      	lsls	r3, r3, #2
 80265e2:	693a      	ldr	r2, [r7, #16]
 80265e4:	4313      	orrs	r3, r2
 80265e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80265e8:	687b      	ldr	r3, [r7, #4]
 80265ea:	693a      	ldr	r2, [r7, #16]
 80265ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80265ee:	687b      	ldr	r3, [r7, #4]
 80265f0:	68fa      	ldr	r2, [r7, #12]
 80265f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80265f4:	683b      	ldr	r3, [r7, #0]
 80265f6:	685a      	ldr	r2, [r3, #4]
 80265f8:	687b      	ldr	r3, [r7, #4]
 80265fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80265fc:	687b      	ldr	r3, [r7, #4]
 80265fe:	697a      	ldr	r2, [r7, #20]
 8026600:	621a      	str	r2, [r3, #32]
}
 8026602:	bf00      	nop
 8026604:	371c      	adds	r7, #28
 8026606:	46bd      	mov	sp, r7
 8026608:	f85d 7b04 	ldr.w	r7, [sp], #4
 802660c:	4770      	bx	lr
 802660e:	bf00      	nop
 8026610:	40010000 	.word	0x40010000
 8026614:	40010400 	.word	0x40010400

08026618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8026618:	b480      	push	{r7}
 802661a:	b087      	sub	sp, #28
 802661c:	af00      	add	r7, sp, #0
 802661e:	6078      	str	r0, [r7, #4]
 8026620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8026622:	687b      	ldr	r3, [r7, #4]
 8026624:	6a1b      	ldr	r3, [r3, #32]
 8026626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802662a:	687b      	ldr	r3, [r7, #4]
 802662c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802662e:	687b      	ldr	r3, [r7, #4]
 8026630:	6a1b      	ldr	r3, [r3, #32]
 8026632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8026634:	687b      	ldr	r3, [r7, #4]
 8026636:	685b      	ldr	r3, [r3, #4]
 8026638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802663a:	687b      	ldr	r3, [r7, #4]
 802663c:	69db      	ldr	r3, [r3, #28]
 802663e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8026640:	68fb      	ldr	r3, [r7, #12]
 8026642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8026646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8026648:	68fb      	ldr	r3, [r7, #12]
 802664a:	f023 0303 	bic.w	r3, r3, #3
 802664e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8026650:	683b      	ldr	r3, [r7, #0]
 8026652:	681b      	ldr	r3, [r3, #0]
 8026654:	68fa      	ldr	r2, [r7, #12]
 8026656:	4313      	orrs	r3, r2
 8026658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 802665a:	697b      	ldr	r3, [r7, #20]
 802665c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8026660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8026662:	683b      	ldr	r3, [r7, #0]
 8026664:	689b      	ldr	r3, [r3, #8]
 8026666:	021b      	lsls	r3, r3, #8
 8026668:	697a      	ldr	r2, [r7, #20]
 802666a:	4313      	orrs	r3, r2
 802666c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802666e:	687b      	ldr	r3, [r7, #4]
 8026670:	4a21      	ldr	r2, [pc, #132]	; (80266f8 <TIM_OC3_SetConfig+0xe0>)
 8026672:	4293      	cmp	r3, r2
 8026674:	d003      	beq.n	802667e <TIM_OC3_SetConfig+0x66>
 8026676:	687b      	ldr	r3, [r7, #4]
 8026678:	4a20      	ldr	r2, [pc, #128]	; (80266fc <TIM_OC3_SetConfig+0xe4>)
 802667a:	4293      	cmp	r3, r2
 802667c:	d10d      	bne.n	802669a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802667e:	697b      	ldr	r3, [r7, #20]
 8026680:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8026684:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8026686:	683b      	ldr	r3, [r7, #0]
 8026688:	68db      	ldr	r3, [r3, #12]
 802668a:	021b      	lsls	r3, r3, #8
 802668c:	697a      	ldr	r2, [r7, #20]
 802668e:	4313      	orrs	r3, r2
 8026690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8026692:	697b      	ldr	r3, [r7, #20]
 8026694:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8026698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802669a:	687b      	ldr	r3, [r7, #4]
 802669c:	4a16      	ldr	r2, [pc, #88]	; (80266f8 <TIM_OC3_SetConfig+0xe0>)
 802669e:	4293      	cmp	r3, r2
 80266a0:	d003      	beq.n	80266aa <TIM_OC3_SetConfig+0x92>
 80266a2:	687b      	ldr	r3, [r7, #4]
 80266a4:	4a15      	ldr	r2, [pc, #84]	; (80266fc <TIM_OC3_SetConfig+0xe4>)
 80266a6:	4293      	cmp	r3, r2
 80266a8:	d113      	bne.n	80266d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80266aa:	693b      	ldr	r3, [r7, #16]
 80266ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80266b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80266b2:	693b      	ldr	r3, [r7, #16]
 80266b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80266b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80266ba:	683b      	ldr	r3, [r7, #0]
 80266bc:	695b      	ldr	r3, [r3, #20]
 80266be:	011b      	lsls	r3, r3, #4
 80266c0:	693a      	ldr	r2, [r7, #16]
 80266c2:	4313      	orrs	r3, r2
 80266c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80266c6:	683b      	ldr	r3, [r7, #0]
 80266c8:	699b      	ldr	r3, [r3, #24]
 80266ca:	011b      	lsls	r3, r3, #4
 80266cc:	693a      	ldr	r2, [r7, #16]
 80266ce:	4313      	orrs	r3, r2
 80266d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80266d2:	687b      	ldr	r3, [r7, #4]
 80266d4:	693a      	ldr	r2, [r7, #16]
 80266d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80266d8:	687b      	ldr	r3, [r7, #4]
 80266da:	68fa      	ldr	r2, [r7, #12]
 80266dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80266de:	683b      	ldr	r3, [r7, #0]
 80266e0:	685a      	ldr	r2, [r3, #4]
 80266e2:	687b      	ldr	r3, [r7, #4]
 80266e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80266e6:	687b      	ldr	r3, [r7, #4]
 80266e8:	697a      	ldr	r2, [r7, #20]
 80266ea:	621a      	str	r2, [r3, #32]
}
 80266ec:	bf00      	nop
 80266ee:	371c      	adds	r7, #28
 80266f0:	46bd      	mov	sp, r7
 80266f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266f6:	4770      	bx	lr
 80266f8:	40010000 	.word	0x40010000
 80266fc:	40010400 	.word	0x40010400

08026700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8026700:	b480      	push	{r7}
 8026702:	b087      	sub	sp, #28
 8026704:	af00      	add	r7, sp, #0
 8026706:	6078      	str	r0, [r7, #4]
 8026708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802670a:	687b      	ldr	r3, [r7, #4]
 802670c:	6a1b      	ldr	r3, [r3, #32]
 802670e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8026712:	687b      	ldr	r3, [r7, #4]
 8026714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8026716:	687b      	ldr	r3, [r7, #4]
 8026718:	6a1b      	ldr	r3, [r3, #32]
 802671a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802671c:	687b      	ldr	r3, [r7, #4]
 802671e:	685b      	ldr	r3, [r3, #4]
 8026720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8026722:	687b      	ldr	r3, [r7, #4]
 8026724:	69db      	ldr	r3, [r3, #28]
 8026726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8026728:	68fb      	ldr	r3, [r7, #12]
 802672a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802672e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8026730:	68fb      	ldr	r3, [r7, #12]
 8026732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8026736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8026738:	683b      	ldr	r3, [r7, #0]
 802673a:	681b      	ldr	r3, [r3, #0]
 802673c:	021b      	lsls	r3, r3, #8
 802673e:	68fa      	ldr	r2, [r7, #12]
 8026740:	4313      	orrs	r3, r2
 8026742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8026744:	693b      	ldr	r3, [r7, #16]
 8026746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802674a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 802674c:	683b      	ldr	r3, [r7, #0]
 802674e:	689b      	ldr	r3, [r3, #8]
 8026750:	031b      	lsls	r3, r3, #12
 8026752:	693a      	ldr	r2, [r7, #16]
 8026754:	4313      	orrs	r3, r2
 8026756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8026758:	687b      	ldr	r3, [r7, #4]
 802675a:	4a12      	ldr	r2, [pc, #72]	; (80267a4 <TIM_OC4_SetConfig+0xa4>)
 802675c:	4293      	cmp	r3, r2
 802675e:	d003      	beq.n	8026768 <TIM_OC4_SetConfig+0x68>
 8026760:	687b      	ldr	r3, [r7, #4]
 8026762:	4a11      	ldr	r2, [pc, #68]	; (80267a8 <TIM_OC4_SetConfig+0xa8>)
 8026764:	4293      	cmp	r3, r2
 8026766:	d109      	bne.n	802677c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8026768:	697b      	ldr	r3, [r7, #20]
 802676a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802676e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8026770:	683b      	ldr	r3, [r7, #0]
 8026772:	695b      	ldr	r3, [r3, #20]
 8026774:	019b      	lsls	r3, r3, #6
 8026776:	697a      	ldr	r2, [r7, #20]
 8026778:	4313      	orrs	r3, r2
 802677a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802677c:	687b      	ldr	r3, [r7, #4]
 802677e:	697a      	ldr	r2, [r7, #20]
 8026780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8026782:	687b      	ldr	r3, [r7, #4]
 8026784:	68fa      	ldr	r2, [r7, #12]
 8026786:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8026788:	683b      	ldr	r3, [r7, #0]
 802678a:	685a      	ldr	r2, [r3, #4]
 802678c:	687b      	ldr	r3, [r7, #4]
 802678e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8026790:	687b      	ldr	r3, [r7, #4]
 8026792:	693a      	ldr	r2, [r7, #16]
 8026794:	621a      	str	r2, [r3, #32]
}
 8026796:	bf00      	nop
 8026798:	371c      	adds	r7, #28
 802679a:	46bd      	mov	sp, r7
 802679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267a0:	4770      	bx	lr
 80267a2:	bf00      	nop
 80267a4:	40010000 	.word	0x40010000
 80267a8:	40010400 	.word	0x40010400

080267ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80267ac:	b480      	push	{r7}
 80267ae:	b087      	sub	sp, #28
 80267b0:	af00      	add	r7, sp, #0
 80267b2:	60f8      	str	r0, [r7, #12]
 80267b4:	60b9      	str	r1, [r7, #8]
 80267b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80267b8:	68fb      	ldr	r3, [r7, #12]
 80267ba:	6a1b      	ldr	r3, [r3, #32]
 80267bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80267be:	68fb      	ldr	r3, [r7, #12]
 80267c0:	6a1b      	ldr	r3, [r3, #32]
 80267c2:	f023 0201 	bic.w	r2, r3, #1
 80267c6:	68fb      	ldr	r3, [r7, #12]
 80267c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80267ca:	68fb      	ldr	r3, [r7, #12]
 80267cc:	699b      	ldr	r3, [r3, #24]
 80267ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80267d0:	693b      	ldr	r3, [r7, #16]
 80267d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80267d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80267d8:	687b      	ldr	r3, [r7, #4]
 80267da:	011b      	lsls	r3, r3, #4
 80267dc:	693a      	ldr	r2, [r7, #16]
 80267de:	4313      	orrs	r3, r2
 80267e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80267e2:	697b      	ldr	r3, [r7, #20]
 80267e4:	f023 030a 	bic.w	r3, r3, #10
 80267e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80267ea:	697a      	ldr	r2, [r7, #20]
 80267ec:	68bb      	ldr	r3, [r7, #8]
 80267ee:	4313      	orrs	r3, r2
 80267f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80267f2:	68fb      	ldr	r3, [r7, #12]
 80267f4:	693a      	ldr	r2, [r7, #16]
 80267f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80267f8:	68fb      	ldr	r3, [r7, #12]
 80267fa:	697a      	ldr	r2, [r7, #20]
 80267fc:	621a      	str	r2, [r3, #32]
}
 80267fe:	bf00      	nop
 8026800:	371c      	adds	r7, #28
 8026802:	46bd      	mov	sp, r7
 8026804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026808:	4770      	bx	lr

0802680a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802680a:	b480      	push	{r7}
 802680c:	b087      	sub	sp, #28
 802680e:	af00      	add	r7, sp, #0
 8026810:	60f8      	str	r0, [r7, #12]
 8026812:	60b9      	str	r1, [r7, #8]
 8026814:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8026816:	68fb      	ldr	r3, [r7, #12]
 8026818:	6a1b      	ldr	r3, [r3, #32]
 802681a:	f023 0210 	bic.w	r2, r3, #16
 802681e:	68fb      	ldr	r3, [r7, #12]
 8026820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8026822:	68fb      	ldr	r3, [r7, #12]
 8026824:	699b      	ldr	r3, [r3, #24]
 8026826:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8026828:	68fb      	ldr	r3, [r7, #12]
 802682a:	6a1b      	ldr	r3, [r3, #32]
 802682c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802682e:	697b      	ldr	r3, [r7, #20]
 8026830:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8026834:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8026836:	687b      	ldr	r3, [r7, #4]
 8026838:	031b      	lsls	r3, r3, #12
 802683a:	697a      	ldr	r2, [r7, #20]
 802683c:	4313      	orrs	r3, r2
 802683e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8026840:	693b      	ldr	r3, [r7, #16]
 8026842:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8026846:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8026848:	68bb      	ldr	r3, [r7, #8]
 802684a:	011b      	lsls	r3, r3, #4
 802684c:	693a      	ldr	r2, [r7, #16]
 802684e:	4313      	orrs	r3, r2
 8026850:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8026852:	68fb      	ldr	r3, [r7, #12]
 8026854:	697a      	ldr	r2, [r7, #20]
 8026856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8026858:	68fb      	ldr	r3, [r7, #12]
 802685a:	693a      	ldr	r2, [r7, #16]
 802685c:	621a      	str	r2, [r3, #32]
}
 802685e:	bf00      	nop
 8026860:	371c      	adds	r7, #28
 8026862:	46bd      	mov	sp, r7
 8026864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026868:	4770      	bx	lr

0802686a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802686a:	b480      	push	{r7}
 802686c:	b085      	sub	sp, #20
 802686e:	af00      	add	r7, sp, #0
 8026870:	6078      	str	r0, [r7, #4]
 8026872:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8026874:	687b      	ldr	r3, [r7, #4]
 8026876:	689b      	ldr	r3, [r3, #8]
 8026878:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802687a:	68fb      	ldr	r3, [r7, #12]
 802687c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8026880:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8026882:	683a      	ldr	r2, [r7, #0]
 8026884:	68fb      	ldr	r3, [r7, #12]
 8026886:	4313      	orrs	r3, r2
 8026888:	f043 0307 	orr.w	r3, r3, #7
 802688c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802688e:	687b      	ldr	r3, [r7, #4]
 8026890:	68fa      	ldr	r2, [r7, #12]
 8026892:	609a      	str	r2, [r3, #8]
}
 8026894:	bf00      	nop
 8026896:	3714      	adds	r7, #20
 8026898:	46bd      	mov	sp, r7
 802689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802689e:	4770      	bx	lr

080268a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80268a0:	b480      	push	{r7}
 80268a2:	b087      	sub	sp, #28
 80268a4:	af00      	add	r7, sp, #0
 80268a6:	60f8      	str	r0, [r7, #12]
 80268a8:	60b9      	str	r1, [r7, #8]
 80268aa:	607a      	str	r2, [r7, #4]
 80268ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80268ae:	68fb      	ldr	r3, [r7, #12]
 80268b0:	689b      	ldr	r3, [r3, #8]
 80268b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80268b4:	697b      	ldr	r3, [r7, #20]
 80268b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80268ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80268bc:	683b      	ldr	r3, [r7, #0]
 80268be:	021a      	lsls	r2, r3, #8
 80268c0:	687b      	ldr	r3, [r7, #4]
 80268c2:	431a      	orrs	r2, r3
 80268c4:	68bb      	ldr	r3, [r7, #8]
 80268c6:	4313      	orrs	r3, r2
 80268c8:	697a      	ldr	r2, [r7, #20]
 80268ca:	4313      	orrs	r3, r2
 80268cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80268ce:	68fb      	ldr	r3, [r7, #12]
 80268d0:	697a      	ldr	r2, [r7, #20]
 80268d2:	609a      	str	r2, [r3, #8]
}
 80268d4:	bf00      	nop
 80268d6:	371c      	adds	r7, #28
 80268d8:	46bd      	mov	sp, r7
 80268da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268de:	4770      	bx	lr

080268e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80268e0:	b480      	push	{r7}
 80268e2:	b087      	sub	sp, #28
 80268e4:	af00      	add	r7, sp, #0
 80268e6:	60f8      	str	r0, [r7, #12]
 80268e8:	60b9      	str	r1, [r7, #8]
 80268ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80268ec:	68bb      	ldr	r3, [r7, #8]
 80268ee:	f003 031f 	and.w	r3, r3, #31
 80268f2:	2201      	movs	r2, #1
 80268f4:	fa02 f303 	lsl.w	r3, r2, r3
 80268f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80268fa:	68fb      	ldr	r3, [r7, #12]
 80268fc:	6a1a      	ldr	r2, [r3, #32]
 80268fe:	697b      	ldr	r3, [r7, #20]
 8026900:	43db      	mvns	r3, r3
 8026902:	401a      	ands	r2, r3
 8026904:	68fb      	ldr	r3, [r7, #12]
 8026906:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8026908:	68fb      	ldr	r3, [r7, #12]
 802690a:	6a1a      	ldr	r2, [r3, #32]
 802690c:	68bb      	ldr	r3, [r7, #8]
 802690e:	f003 031f 	and.w	r3, r3, #31
 8026912:	6879      	ldr	r1, [r7, #4]
 8026914:	fa01 f303 	lsl.w	r3, r1, r3
 8026918:	431a      	orrs	r2, r3
 802691a:	68fb      	ldr	r3, [r7, #12]
 802691c:	621a      	str	r2, [r3, #32]
}
 802691e:	bf00      	nop
 8026920:	371c      	adds	r7, #28
 8026922:	46bd      	mov	sp, r7
 8026924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026928:	4770      	bx	lr
	...

0802692c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802692c:	b480      	push	{r7}
 802692e:	b085      	sub	sp, #20
 8026930:	af00      	add	r7, sp, #0
 8026932:	6078      	str	r0, [r7, #4]
 8026934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8026936:	687b      	ldr	r3, [r7, #4]
 8026938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802693c:	2b01      	cmp	r3, #1
 802693e:	d101      	bne.n	8026944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8026940:	2302      	movs	r3, #2
 8026942:	e05a      	b.n	80269fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8026944:	687b      	ldr	r3, [r7, #4]
 8026946:	2201      	movs	r2, #1
 8026948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802694c:	687b      	ldr	r3, [r7, #4]
 802694e:	2202      	movs	r2, #2
 8026950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8026954:	687b      	ldr	r3, [r7, #4]
 8026956:	681b      	ldr	r3, [r3, #0]
 8026958:	685b      	ldr	r3, [r3, #4]
 802695a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802695c:	687b      	ldr	r3, [r7, #4]
 802695e:	681b      	ldr	r3, [r3, #0]
 8026960:	689b      	ldr	r3, [r3, #8]
 8026962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8026964:	68fb      	ldr	r3, [r7, #12]
 8026966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802696a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802696c:	683b      	ldr	r3, [r7, #0]
 802696e:	681b      	ldr	r3, [r3, #0]
 8026970:	68fa      	ldr	r2, [r7, #12]
 8026972:	4313      	orrs	r3, r2
 8026974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8026976:	687b      	ldr	r3, [r7, #4]
 8026978:	681b      	ldr	r3, [r3, #0]
 802697a:	68fa      	ldr	r2, [r7, #12]
 802697c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802697e:	687b      	ldr	r3, [r7, #4]
 8026980:	681b      	ldr	r3, [r3, #0]
 8026982:	4a21      	ldr	r2, [pc, #132]	; (8026a08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8026984:	4293      	cmp	r3, r2
 8026986:	d022      	beq.n	80269ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8026988:	687b      	ldr	r3, [r7, #4]
 802698a:	681b      	ldr	r3, [r3, #0]
 802698c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8026990:	d01d      	beq.n	80269ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8026992:	687b      	ldr	r3, [r7, #4]
 8026994:	681b      	ldr	r3, [r3, #0]
 8026996:	4a1d      	ldr	r2, [pc, #116]	; (8026a0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8026998:	4293      	cmp	r3, r2
 802699a:	d018      	beq.n	80269ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802699c:	687b      	ldr	r3, [r7, #4]
 802699e:	681b      	ldr	r3, [r3, #0]
 80269a0:	4a1b      	ldr	r2, [pc, #108]	; (8026a10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80269a2:	4293      	cmp	r3, r2
 80269a4:	d013      	beq.n	80269ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80269a6:	687b      	ldr	r3, [r7, #4]
 80269a8:	681b      	ldr	r3, [r3, #0]
 80269aa:	4a1a      	ldr	r2, [pc, #104]	; (8026a14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80269ac:	4293      	cmp	r3, r2
 80269ae:	d00e      	beq.n	80269ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80269b0:	687b      	ldr	r3, [r7, #4]
 80269b2:	681b      	ldr	r3, [r3, #0]
 80269b4:	4a18      	ldr	r2, [pc, #96]	; (8026a18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80269b6:	4293      	cmp	r3, r2
 80269b8:	d009      	beq.n	80269ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80269ba:	687b      	ldr	r3, [r7, #4]
 80269bc:	681b      	ldr	r3, [r3, #0]
 80269be:	4a17      	ldr	r2, [pc, #92]	; (8026a1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80269c0:	4293      	cmp	r3, r2
 80269c2:	d004      	beq.n	80269ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80269c4:	687b      	ldr	r3, [r7, #4]
 80269c6:	681b      	ldr	r3, [r3, #0]
 80269c8:	4a15      	ldr	r2, [pc, #84]	; (8026a20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80269ca:	4293      	cmp	r3, r2
 80269cc:	d10c      	bne.n	80269e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80269ce:	68bb      	ldr	r3, [r7, #8]
 80269d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80269d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80269d6:	683b      	ldr	r3, [r7, #0]
 80269d8:	685b      	ldr	r3, [r3, #4]
 80269da:	68ba      	ldr	r2, [r7, #8]
 80269dc:	4313      	orrs	r3, r2
 80269de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80269e0:	687b      	ldr	r3, [r7, #4]
 80269e2:	681b      	ldr	r3, [r3, #0]
 80269e4:	68ba      	ldr	r2, [r7, #8]
 80269e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80269e8:	687b      	ldr	r3, [r7, #4]
 80269ea:	2201      	movs	r2, #1
 80269ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80269f0:	687b      	ldr	r3, [r7, #4]
 80269f2:	2200      	movs	r2, #0
 80269f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80269f8:	2300      	movs	r3, #0
}
 80269fa:	4618      	mov	r0, r3
 80269fc:	3714      	adds	r7, #20
 80269fe:	46bd      	mov	sp, r7
 8026a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a04:	4770      	bx	lr
 8026a06:	bf00      	nop
 8026a08:	40010000 	.word	0x40010000
 8026a0c:	40000400 	.word	0x40000400
 8026a10:	40000800 	.word	0x40000800
 8026a14:	40000c00 	.word	0x40000c00
 8026a18:	40010400 	.word	0x40010400
 8026a1c:	40014000 	.word	0x40014000
 8026a20:	40001800 	.word	0x40001800

08026a24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8026a24:	b480      	push	{r7}
 8026a26:	b085      	sub	sp, #20
 8026a28:	af00      	add	r7, sp, #0
 8026a2a:	6078      	str	r0, [r7, #4]
 8026a2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8026a2e:	2300      	movs	r3, #0
 8026a30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8026a32:	687b      	ldr	r3, [r7, #4]
 8026a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026a38:	2b01      	cmp	r3, #1
 8026a3a:	d101      	bne.n	8026a40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8026a3c:	2302      	movs	r3, #2
 8026a3e:	e03d      	b.n	8026abc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8026a40:	687b      	ldr	r3, [r7, #4]
 8026a42:	2201      	movs	r2, #1
 8026a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8026a48:	68fb      	ldr	r3, [r7, #12]
 8026a4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8026a4e:	683b      	ldr	r3, [r7, #0]
 8026a50:	68db      	ldr	r3, [r3, #12]
 8026a52:	4313      	orrs	r3, r2
 8026a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8026a56:	68fb      	ldr	r3, [r7, #12]
 8026a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8026a5c:	683b      	ldr	r3, [r7, #0]
 8026a5e:	689b      	ldr	r3, [r3, #8]
 8026a60:	4313      	orrs	r3, r2
 8026a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8026a64:	68fb      	ldr	r3, [r7, #12]
 8026a66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8026a6a:	683b      	ldr	r3, [r7, #0]
 8026a6c:	685b      	ldr	r3, [r3, #4]
 8026a6e:	4313      	orrs	r3, r2
 8026a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8026a72:	68fb      	ldr	r3, [r7, #12]
 8026a74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8026a78:	683b      	ldr	r3, [r7, #0]
 8026a7a:	681b      	ldr	r3, [r3, #0]
 8026a7c:	4313      	orrs	r3, r2
 8026a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8026a80:	68fb      	ldr	r3, [r7, #12]
 8026a82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8026a86:	683b      	ldr	r3, [r7, #0]
 8026a88:	691b      	ldr	r3, [r3, #16]
 8026a8a:	4313      	orrs	r3, r2
 8026a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8026a8e:	68fb      	ldr	r3, [r7, #12]
 8026a90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8026a94:	683b      	ldr	r3, [r7, #0]
 8026a96:	695b      	ldr	r3, [r3, #20]
 8026a98:	4313      	orrs	r3, r2
 8026a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8026a9c:	68fb      	ldr	r3, [r7, #12]
 8026a9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8026aa2:	683b      	ldr	r3, [r7, #0]
 8026aa4:	69db      	ldr	r3, [r3, #28]
 8026aa6:	4313      	orrs	r3, r2
 8026aa8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8026aaa:	687b      	ldr	r3, [r7, #4]
 8026aac:	681b      	ldr	r3, [r3, #0]
 8026aae:	68fa      	ldr	r2, [r7, #12]
 8026ab0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8026ab2:	687b      	ldr	r3, [r7, #4]
 8026ab4:	2200      	movs	r2, #0
 8026ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8026aba:	2300      	movs	r3, #0
}
 8026abc:	4618      	mov	r0, r3
 8026abe:	3714      	adds	r7, #20
 8026ac0:	46bd      	mov	sp, r7
 8026ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ac6:	4770      	bx	lr

08026ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8026ac8:	b480      	push	{r7}
 8026aca:	b083      	sub	sp, #12
 8026acc:	af00      	add	r7, sp, #0
 8026ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8026ad0:	bf00      	nop
 8026ad2:	370c      	adds	r7, #12
 8026ad4:	46bd      	mov	sp, r7
 8026ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ada:	4770      	bx	lr

08026adc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8026adc:	b480      	push	{r7}
 8026ade:	b083      	sub	sp, #12
 8026ae0:	af00      	add	r7, sp, #0
 8026ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8026ae4:	bf00      	nop
 8026ae6:	370c      	adds	r7, #12
 8026ae8:	46bd      	mov	sp, r7
 8026aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026aee:	4770      	bx	lr

08026af0 <__errno>:
 8026af0:	4b01      	ldr	r3, [pc, #4]	; (8026af8 <__errno+0x8>)
 8026af2:	6818      	ldr	r0, [r3, #0]
 8026af4:	4770      	bx	lr
 8026af6:	bf00      	nop
 8026af8:	2000000c 	.word	0x2000000c

08026afc <__libc_init_array>:
 8026afc:	b570      	push	{r4, r5, r6, lr}
 8026afe:	4e0d      	ldr	r6, [pc, #52]	; (8026b34 <__libc_init_array+0x38>)
 8026b00:	4c0d      	ldr	r4, [pc, #52]	; (8026b38 <__libc_init_array+0x3c>)
 8026b02:	1ba4      	subs	r4, r4, r6
 8026b04:	10a4      	asrs	r4, r4, #2
 8026b06:	2500      	movs	r5, #0
 8026b08:	42a5      	cmp	r5, r4
 8026b0a:	d109      	bne.n	8026b20 <__libc_init_array+0x24>
 8026b0c:	4e0b      	ldr	r6, [pc, #44]	; (8026b3c <__libc_init_array+0x40>)
 8026b0e:	4c0c      	ldr	r4, [pc, #48]	; (8026b40 <__libc_init_array+0x44>)
 8026b10:	f001 fd46 	bl	80285a0 <_init>
 8026b14:	1ba4      	subs	r4, r4, r6
 8026b16:	10a4      	asrs	r4, r4, #2
 8026b18:	2500      	movs	r5, #0
 8026b1a:	42a5      	cmp	r5, r4
 8026b1c:	d105      	bne.n	8026b2a <__libc_init_array+0x2e>
 8026b1e:	bd70      	pop	{r4, r5, r6, pc}
 8026b20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026b24:	4798      	blx	r3
 8026b26:	3501      	adds	r5, #1
 8026b28:	e7ee      	b.n	8026b08 <__libc_init_array+0xc>
 8026b2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026b2e:	4798      	blx	r3
 8026b30:	3501      	adds	r5, #1
 8026b32:	e7f2      	b.n	8026b1a <__libc_init_array+0x1e>
 8026b34:	08028868 	.word	0x08028868
 8026b38:	08028868 	.word	0x08028868
 8026b3c:	08028868 	.word	0x08028868
 8026b40:	08028870 	.word	0x08028870

08026b44 <memcpy>:
 8026b44:	b510      	push	{r4, lr}
 8026b46:	1e43      	subs	r3, r0, #1
 8026b48:	440a      	add	r2, r1
 8026b4a:	4291      	cmp	r1, r2
 8026b4c:	d100      	bne.n	8026b50 <memcpy+0xc>
 8026b4e:	bd10      	pop	{r4, pc}
 8026b50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026b58:	e7f7      	b.n	8026b4a <memcpy+0x6>

08026b5a <memset>:
 8026b5a:	4402      	add	r2, r0
 8026b5c:	4603      	mov	r3, r0
 8026b5e:	4293      	cmp	r3, r2
 8026b60:	d100      	bne.n	8026b64 <memset+0xa>
 8026b62:	4770      	bx	lr
 8026b64:	f803 1b01 	strb.w	r1, [r3], #1
 8026b68:	e7f9      	b.n	8026b5e <memset+0x4>

08026b6a <__cvt>:
 8026b6a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026b6e:	ec55 4b10 	vmov	r4, r5, d0
 8026b72:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8026b74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8026b78:	2d00      	cmp	r5, #0
 8026b7a:	460e      	mov	r6, r1
 8026b7c:	4691      	mov	r9, r2
 8026b7e:	4619      	mov	r1, r3
 8026b80:	bfb8      	it	lt
 8026b82:	4622      	movlt	r2, r4
 8026b84:	462b      	mov	r3, r5
 8026b86:	f027 0720 	bic.w	r7, r7, #32
 8026b8a:	bfbb      	ittet	lt
 8026b8c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8026b90:	461d      	movlt	r5, r3
 8026b92:	2300      	movge	r3, #0
 8026b94:	232d      	movlt	r3, #45	; 0x2d
 8026b96:	bfb8      	it	lt
 8026b98:	4614      	movlt	r4, r2
 8026b9a:	2f46      	cmp	r7, #70	; 0x46
 8026b9c:	700b      	strb	r3, [r1, #0]
 8026b9e:	d004      	beq.n	8026baa <__cvt+0x40>
 8026ba0:	2f45      	cmp	r7, #69	; 0x45
 8026ba2:	d100      	bne.n	8026ba6 <__cvt+0x3c>
 8026ba4:	3601      	adds	r6, #1
 8026ba6:	2102      	movs	r1, #2
 8026ba8:	e000      	b.n	8026bac <__cvt+0x42>
 8026baa:	2103      	movs	r1, #3
 8026bac:	ab03      	add	r3, sp, #12
 8026bae:	9301      	str	r3, [sp, #4]
 8026bb0:	ab02      	add	r3, sp, #8
 8026bb2:	9300      	str	r3, [sp, #0]
 8026bb4:	4632      	mov	r2, r6
 8026bb6:	4653      	mov	r3, sl
 8026bb8:	ec45 4b10 	vmov	d0, r4, r5
 8026bbc:	f000 fbac 	bl	8027318 <_dtoa_r>
 8026bc0:	2f47      	cmp	r7, #71	; 0x47
 8026bc2:	4680      	mov	r8, r0
 8026bc4:	d102      	bne.n	8026bcc <__cvt+0x62>
 8026bc6:	f019 0f01 	tst.w	r9, #1
 8026bca:	d026      	beq.n	8026c1a <__cvt+0xb0>
 8026bcc:	2f46      	cmp	r7, #70	; 0x46
 8026bce:	eb08 0906 	add.w	r9, r8, r6
 8026bd2:	d111      	bne.n	8026bf8 <__cvt+0x8e>
 8026bd4:	f898 3000 	ldrb.w	r3, [r8]
 8026bd8:	2b30      	cmp	r3, #48	; 0x30
 8026bda:	d10a      	bne.n	8026bf2 <__cvt+0x88>
 8026bdc:	2200      	movs	r2, #0
 8026bde:	2300      	movs	r3, #0
 8026be0:	4620      	mov	r0, r4
 8026be2:	4629      	mov	r1, r5
 8026be4:	f7f9 fe58 	bl	8020898 <__aeabi_dcmpeq>
 8026be8:	b918      	cbnz	r0, 8026bf2 <__cvt+0x88>
 8026bea:	f1c6 0601 	rsb	r6, r6, #1
 8026bee:	f8ca 6000 	str.w	r6, [sl]
 8026bf2:	f8da 3000 	ldr.w	r3, [sl]
 8026bf6:	4499      	add	r9, r3
 8026bf8:	2200      	movs	r2, #0
 8026bfa:	2300      	movs	r3, #0
 8026bfc:	4620      	mov	r0, r4
 8026bfe:	4629      	mov	r1, r5
 8026c00:	f7f9 fe4a 	bl	8020898 <__aeabi_dcmpeq>
 8026c04:	b938      	cbnz	r0, 8026c16 <__cvt+0xac>
 8026c06:	2230      	movs	r2, #48	; 0x30
 8026c08:	9b03      	ldr	r3, [sp, #12]
 8026c0a:	454b      	cmp	r3, r9
 8026c0c:	d205      	bcs.n	8026c1a <__cvt+0xb0>
 8026c0e:	1c59      	adds	r1, r3, #1
 8026c10:	9103      	str	r1, [sp, #12]
 8026c12:	701a      	strb	r2, [r3, #0]
 8026c14:	e7f8      	b.n	8026c08 <__cvt+0x9e>
 8026c16:	f8cd 900c 	str.w	r9, [sp, #12]
 8026c1a:	9b03      	ldr	r3, [sp, #12]
 8026c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026c1e:	eba3 0308 	sub.w	r3, r3, r8
 8026c22:	4640      	mov	r0, r8
 8026c24:	6013      	str	r3, [r2, #0]
 8026c26:	b004      	add	sp, #16
 8026c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08026c2c <__exponent>:
 8026c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026c2e:	2900      	cmp	r1, #0
 8026c30:	4604      	mov	r4, r0
 8026c32:	bfba      	itte	lt
 8026c34:	4249      	neglt	r1, r1
 8026c36:	232d      	movlt	r3, #45	; 0x2d
 8026c38:	232b      	movge	r3, #43	; 0x2b
 8026c3a:	2909      	cmp	r1, #9
 8026c3c:	f804 2b02 	strb.w	r2, [r4], #2
 8026c40:	7043      	strb	r3, [r0, #1]
 8026c42:	dd20      	ble.n	8026c86 <__exponent+0x5a>
 8026c44:	f10d 0307 	add.w	r3, sp, #7
 8026c48:	461f      	mov	r7, r3
 8026c4a:	260a      	movs	r6, #10
 8026c4c:	fb91 f5f6 	sdiv	r5, r1, r6
 8026c50:	fb06 1115 	mls	r1, r6, r5, r1
 8026c54:	3130      	adds	r1, #48	; 0x30
 8026c56:	2d09      	cmp	r5, #9
 8026c58:	f803 1c01 	strb.w	r1, [r3, #-1]
 8026c5c:	f103 32ff 	add.w	r2, r3, #4294967295
 8026c60:	4629      	mov	r1, r5
 8026c62:	dc09      	bgt.n	8026c78 <__exponent+0x4c>
 8026c64:	3130      	adds	r1, #48	; 0x30
 8026c66:	3b02      	subs	r3, #2
 8026c68:	f802 1c01 	strb.w	r1, [r2, #-1]
 8026c6c:	42bb      	cmp	r3, r7
 8026c6e:	4622      	mov	r2, r4
 8026c70:	d304      	bcc.n	8026c7c <__exponent+0x50>
 8026c72:	1a10      	subs	r0, r2, r0
 8026c74:	b003      	add	sp, #12
 8026c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026c78:	4613      	mov	r3, r2
 8026c7a:	e7e7      	b.n	8026c4c <__exponent+0x20>
 8026c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026c80:	f804 2b01 	strb.w	r2, [r4], #1
 8026c84:	e7f2      	b.n	8026c6c <__exponent+0x40>
 8026c86:	2330      	movs	r3, #48	; 0x30
 8026c88:	4419      	add	r1, r3
 8026c8a:	7083      	strb	r3, [r0, #2]
 8026c8c:	1d02      	adds	r2, r0, #4
 8026c8e:	70c1      	strb	r1, [r0, #3]
 8026c90:	e7ef      	b.n	8026c72 <__exponent+0x46>
	...

08026c94 <_printf_float>:
 8026c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c98:	b08d      	sub	sp, #52	; 0x34
 8026c9a:	460c      	mov	r4, r1
 8026c9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8026ca0:	4616      	mov	r6, r2
 8026ca2:	461f      	mov	r7, r3
 8026ca4:	4605      	mov	r5, r0
 8026ca6:	f001 f8ef 	bl	8027e88 <_localeconv_r>
 8026caa:	6803      	ldr	r3, [r0, #0]
 8026cac:	9304      	str	r3, [sp, #16]
 8026cae:	4618      	mov	r0, r3
 8026cb0:	f7f9 f9c6 	bl	8020040 <strlen>
 8026cb4:	2300      	movs	r3, #0
 8026cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8026cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8026cbc:	9005      	str	r0, [sp, #20]
 8026cbe:	3307      	adds	r3, #7
 8026cc0:	f023 0307 	bic.w	r3, r3, #7
 8026cc4:	f103 0208 	add.w	r2, r3, #8
 8026cc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8026ccc:	f8d4 b000 	ldr.w	fp, [r4]
 8026cd0:	f8c8 2000 	str.w	r2, [r8]
 8026cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026cd8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8026cdc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8026ce0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8026ce4:	9307      	str	r3, [sp, #28]
 8026ce6:	f8cd 8018 	str.w	r8, [sp, #24]
 8026cea:	f04f 32ff 	mov.w	r2, #4294967295
 8026cee:	4ba7      	ldr	r3, [pc, #668]	; (8026f8c <_printf_float+0x2f8>)
 8026cf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8026cf4:	f7f9 fe02 	bl	80208fc <__aeabi_dcmpun>
 8026cf8:	bb70      	cbnz	r0, 8026d58 <_printf_float+0xc4>
 8026cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8026cfe:	4ba3      	ldr	r3, [pc, #652]	; (8026f8c <_printf_float+0x2f8>)
 8026d00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8026d04:	f7f9 fddc 	bl	80208c0 <__aeabi_dcmple>
 8026d08:	bb30      	cbnz	r0, 8026d58 <_printf_float+0xc4>
 8026d0a:	2200      	movs	r2, #0
 8026d0c:	2300      	movs	r3, #0
 8026d0e:	4640      	mov	r0, r8
 8026d10:	4649      	mov	r1, r9
 8026d12:	f7f9 fdcb 	bl	80208ac <__aeabi_dcmplt>
 8026d16:	b110      	cbz	r0, 8026d1e <_printf_float+0x8a>
 8026d18:	232d      	movs	r3, #45	; 0x2d
 8026d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026d1e:	4a9c      	ldr	r2, [pc, #624]	; (8026f90 <_printf_float+0x2fc>)
 8026d20:	4b9c      	ldr	r3, [pc, #624]	; (8026f94 <_printf_float+0x300>)
 8026d22:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8026d26:	bf8c      	ite	hi
 8026d28:	4690      	movhi	r8, r2
 8026d2a:	4698      	movls	r8, r3
 8026d2c:	2303      	movs	r3, #3
 8026d2e:	f02b 0204 	bic.w	r2, fp, #4
 8026d32:	6123      	str	r3, [r4, #16]
 8026d34:	6022      	str	r2, [r4, #0]
 8026d36:	f04f 0900 	mov.w	r9, #0
 8026d3a:	9700      	str	r7, [sp, #0]
 8026d3c:	4633      	mov	r3, r6
 8026d3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8026d40:	4621      	mov	r1, r4
 8026d42:	4628      	mov	r0, r5
 8026d44:	f000 f9e6 	bl	8027114 <_printf_common>
 8026d48:	3001      	adds	r0, #1
 8026d4a:	f040 808d 	bne.w	8026e68 <_printf_float+0x1d4>
 8026d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8026d52:	b00d      	add	sp, #52	; 0x34
 8026d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d58:	4642      	mov	r2, r8
 8026d5a:	464b      	mov	r3, r9
 8026d5c:	4640      	mov	r0, r8
 8026d5e:	4649      	mov	r1, r9
 8026d60:	f7f9 fdcc 	bl	80208fc <__aeabi_dcmpun>
 8026d64:	b110      	cbz	r0, 8026d6c <_printf_float+0xd8>
 8026d66:	4a8c      	ldr	r2, [pc, #560]	; (8026f98 <_printf_float+0x304>)
 8026d68:	4b8c      	ldr	r3, [pc, #560]	; (8026f9c <_printf_float+0x308>)
 8026d6a:	e7da      	b.n	8026d22 <_printf_float+0x8e>
 8026d6c:	6861      	ldr	r1, [r4, #4]
 8026d6e:	1c4b      	adds	r3, r1, #1
 8026d70:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8026d74:	a80a      	add	r0, sp, #40	; 0x28
 8026d76:	d13e      	bne.n	8026df6 <_printf_float+0x162>
 8026d78:	2306      	movs	r3, #6
 8026d7a:	6063      	str	r3, [r4, #4]
 8026d7c:	2300      	movs	r3, #0
 8026d7e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8026d82:	ab09      	add	r3, sp, #36	; 0x24
 8026d84:	9300      	str	r3, [sp, #0]
 8026d86:	ec49 8b10 	vmov	d0, r8, r9
 8026d8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8026d8e:	6022      	str	r2, [r4, #0]
 8026d90:	f8cd a004 	str.w	sl, [sp, #4]
 8026d94:	6861      	ldr	r1, [r4, #4]
 8026d96:	4628      	mov	r0, r5
 8026d98:	f7ff fee7 	bl	8026b6a <__cvt>
 8026d9c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8026da0:	2b47      	cmp	r3, #71	; 0x47
 8026da2:	4680      	mov	r8, r0
 8026da4:	d109      	bne.n	8026dba <_printf_float+0x126>
 8026da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026da8:	1cd8      	adds	r0, r3, #3
 8026daa:	db02      	blt.n	8026db2 <_printf_float+0x11e>
 8026dac:	6862      	ldr	r2, [r4, #4]
 8026dae:	4293      	cmp	r3, r2
 8026db0:	dd47      	ble.n	8026e42 <_printf_float+0x1ae>
 8026db2:	f1aa 0a02 	sub.w	sl, sl, #2
 8026db6:	fa5f fa8a 	uxtb.w	sl, sl
 8026dba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8026dbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026dc0:	d824      	bhi.n	8026e0c <_printf_float+0x178>
 8026dc2:	3901      	subs	r1, #1
 8026dc4:	4652      	mov	r2, sl
 8026dc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8026dca:	9109      	str	r1, [sp, #36]	; 0x24
 8026dcc:	f7ff ff2e 	bl	8026c2c <__exponent>
 8026dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026dd2:	1813      	adds	r3, r2, r0
 8026dd4:	2a01      	cmp	r2, #1
 8026dd6:	4681      	mov	r9, r0
 8026dd8:	6123      	str	r3, [r4, #16]
 8026dda:	dc02      	bgt.n	8026de2 <_printf_float+0x14e>
 8026ddc:	6822      	ldr	r2, [r4, #0]
 8026dde:	07d1      	lsls	r1, r2, #31
 8026de0:	d501      	bpl.n	8026de6 <_printf_float+0x152>
 8026de2:	3301      	adds	r3, #1
 8026de4:	6123      	str	r3, [r4, #16]
 8026de6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8026dea:	2b00      	cmp	r3, #0
 8026dec:	d0a5      	beq.n	8026d3a <_printf_float+0xa6>
 8026dee:	232d      	movs	r3, #45	; 0x2d
 8026df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026df4:	e7a1      	b.n	8026d3a <_printf_float+0xa6>
 8026df6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8026dfa:	f000 8177 	beq.w	80270ec <_printf_float+0x458>
 8026dfe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8026e02:	d1bb      	bne.n	8026d7c <_printf_float+0xe8>
 8026e04:	2900      	cmp	r1, #0
 8026e06:	d1b9      	bne.n	8026d7c <_printf_float+0xe8>
 8026e08:	2301      	movs	r3, #1
 8026e0a:	e7b6      	b.n	8026d7a <_printf_float+0xe6>
 8026e0c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8026e10:	d119      	bne.n	8026e46 <_printf_float+0x1b2>
 8026e12:	2900      	cmp	r1, #0
 8026e14:	6863      	ldr	r3, [r4, #4]
 8026e16:	dd0c      	ble.n	8026e32 <_printf_float+0x19e>
 8026e18:	6121      	str	r1, [r4, #16]
 8026e1a:	b913      	cbnz	r3, 8026e22 <_printf_float+0x18e>
 8026e1c:	6822      	ldr	r2, [r4, #0]
 8026e1e:	07d2      	lsls	r2, r2, #31
 8026e20:	d502      	bpl.n	8026e28 <_printf_float+0x194>
 8026e22:	3301      	adds	r3, #1
 8026e24:	440b      	add	r3, r1
 8026e26:	6123      	str	r3, [r4, #16]
 8026e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e2a:	65a3      	str	r3, [r4, #88]	; 0x58
 8026e2c:	f04f 0900 	mov.w	r9, #0
 8026e30:	e7d9      	b.n	8026de6 <_printf_float+0x152>
 8026e32:	b913      	cbnz	r3, 8026e3a <_printf_float+0x1a6>
 8026e34:	6822      	ldr	r2, [r4, #0]
 8026e36:	07d0      	lsls	r0, r2, #31
 8026e38:	d501      	bpl.n	8026e3e <_printf_float+0x1aa>
 8026e3a:	3302      	adds	r3, #2
 8026e3c:	e7f3      	b.n	8026e26 <_printf_float+0x192>
 8026e3e:	2301      	movs	r3, #1
 8026e40:	e7f1      	b.n	8026e26 <_printf_float+0x192>
 8026e42:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8026e46:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8026e4a:	4293      	cmp	r3, r2
 8026e4c:	db05      	blt.n	8026e5a <_printf_float+0x1c6>
 8026e4e:	6822      	ldr	r2, [r4, #0]
 8026e50:	6123      	str	r3, [r4, #16]
 8026e52:	07d1      	lsls	r1, r2, #31
 8026e54:	d5e8      	bpl.n	8026e28 <_printf_float+0x194>
 8026e56:	3301      	adds	r3, #1
 8026e58:	e7e5      	b.n	8026e26 <_printf_float+0x192>
 8026e5a:	2b00      	cmp	r3, #0
 8026e5c:	bfd4      	ite	le
 8026e5e:	f1c3 0302 	rsble	r3, r3, #2
 8026e62:	2301      	movgt	r3, #1
 8026e64:	4413      	add	r3, r2
 8026e66:	e7de      	b.n	8026e26 <_printf_float+0x192>
 8026e68:	6823      	ldr	r3, [r4, #0]
 8026e6a:	055a      	lsls	r2, r3, #21
 8026e6c:	d407      	bmi.n	8026e7e <_printf_float+0x1ea>
 8026e6e:	6923      	ldr	r3, [r4, #16]
 8026e70:	4642      	mov	r2, r8
 8026e72:	4631      	mov	r1, r6
 8026e74:	4628      	mov	r0, r5
 8026e76:	47b8      	blx	r7
 8026e78:	3001      	adds	r0, #1
 8026e7a:	d12b      	bne.n	8026ed4 <_printf_float+0x240>
 8026e7c:	e767      	b.n	8026d4e <_printf_float+0xba>
 8026e7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8026e82:	f240 80dc 	bls.w	802703e <_printf_float+0x3aa>
 8026e86:	2200      	movs	r2, #0
 8026e88:	2300      	movs	r3, #0
 8026e8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8026e8e:	f7f9 fd03 	bl	8020898 <__aeabi_dcmpeq>
 8026e92:	2800      	cmp	r0, #0
 8026e94:	d033      	beq.n	8026efe <_printf_float+0x26a>
 8026e96:	2301      	movs	r3, #1
 8026e98:	4a41      	ldr	r2, [pc, #260]	; (8026fa0 <_printf_float+0x30c>)
 8026e9a:	4631      	mov	r1, r6
 8026e9c:	4628      	mov	r0, r5
 8026e9e:	47b8      	blx	r7
 8026ea0:	3001      	adds	r0, #1
 8026ea2:	f43f af54 	beq.w	8026d4e <_printf_float+0xba>
 8026ea6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8026eaa:	429a      	cmp	r2, r3
 8026eac:	db02      	blt.n	8026eb4 <_printf_float+0x220>
 8026eae:	6823      	ldr	r3, [r4, #0]
 8026eb0:	07d8      	lsls	r0, r3, #31
 8026eb2:	d50f      	bpl.n	8026ed4 <_printf_float+0x240>
 8026eb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026eb8:	4631      	mov	r1, r6
 8026eba:	4628      	mov	r0, r5
 8026ebc:	47b8      	blx	r7
 8026ebe:	3001      	adds	r0, #1
 8026ec0:	f43f af45 	beq.w	8026d4e <_printf_float+0xba>
 8026ec4:	f04f 0800 	mov.w	r8, #0
 8026ec8:	f104 091a 	add.w	r9, r4, #26
 8026ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026ece:	3b01      	subs	r3, #1
 8026ed0:	4543      	cmp	r3, r8
 8026ed2:	dc09      	bgt.n	8026ee8 <_printf_float+0x254>
 8026ed4:	6823      	ldr	r3, [r4, #0]
 8026ed6:	079b      	lsls	r3, r3, #30
 8026ed8:	f100 8103 	bmi.w	80270e2 <_printf_float+0x44e>
 8026edc:	68e0      	ldr	r0, [r4, #12]
 8026ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026ee0:	4298      	cmp	r0, r3
 8026ee2:	bfb8      	it	lt
 8026ee4:	4618      	movlt	r0, r3
 8026ee6:	e734      	b.n	8026d52 <_printf_float+0xbe>
 8026ee8:	2301      	movs	r3, #1
 8026eea:	464a      	mov	r2, r9
 8026eec:	4631      	mov	r1, r6
 8026eee:	4628      	mov	r0, r5
 8026ef0:	47b8      	blx	r7
 8026ef2:	3001      	adds	r0, #1
 8026ef4:	f43f af2b 	beq.w	8026d4e <_printf_float+0xba>
 8026ef8:	f108 0801 	add.w	r8, r8, #1
 8026efc:	e7e6      	b.n	8026ecc <_printf_float+0x238>
 8026efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f00:	2b00      	cmp	r3, #0
 8026f02:	dc2b      	bgt.n	8026f5c <_printf_float+0x2c8>
 8026f04:	2301      	movs	r3, #1
 8026f06:	4a26      	ldr	r2, [pc, #152]	; (8026fa0 <_printf_float+0x30c>)
 8026f08:	4631      	mov	r1, r6
 8026f0a:	4628      	mov	r0, r5
 8026f0c:	47b8      	blx	r7
 8026f0e:	3001      	adds	r0, #1
 8026f10:	f43f af1d 	beq.w	8026d4e <_printf_float+0xba>
 8026f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f16:	b923      	cbnz	r3, 8026f22 <_printf_float+0x28e>
 8026f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026f1a:	b913      	cbnz	r3, 8026f22 <_printf_float+0x28e>
 8026f1c:	6823      	ldr	r3, [r4, #0]
 8026f1e:	07d9      	lsls	r1, r3, #31
 8026f20:	d5d8      	bpl.n	8026ed4 <_printf_float+0x240>
 8026f22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026f26:	4631      	mov	r1, r6
 8026f28:	4628      	mov	r0, r5
 8026f2a:	47b8      	blx	r7
 8026f2c:	3001      	adds	r0, #1
 8026f2e:	f43f af0e 	beq.w	8026d4e <_printf_float+0xba>
 8026f32:	f04f 0900 	mov.w	r9, #0
 8026f36:	f104 0a1a 	add.w	sl, r4, #26
 8026f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f3c:	425b      	negs	r3, r3
 8026f3e:	454b      	cmp	r3, r9
 8026f40:	dc01      	bgt.n	8026f46 <_printf_float+0x2b2>
 8026f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026f44:	e794      	b.n	8026e70 <_printf_float+0x1dc>
 8026f46:	2301      	movs	r3, #1
 8026f48:	4652      	mov	r2, sl
 8026f4a:	4631      	mov	r1, r6
 8026f4c:	4628      	mov	r0, r5
 8026f4e:	47b8      	blx	r7
 8026f50:	3001      	adds	r0, #1
 8026f52:	f43f aefc 	beq.w	8026d4e <_printf_float+0xba>
 8026f56:	f109 0901 	add.w	r9, r9, #1
 8026f5a:	e7ee      	b.n	8026f3a <_printf_float+0x2a6>
 8026f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026f5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8026f60:	429a      	cmp	r2, r3
 8026f62:	bfa8      	it	ge
 8026f64:	461a      	movge	r2, r3
 8026f66:	2a00      	cmp	r2, #0
 8026f68:	4691      	mov	r9, r2
 8026f6a:	dd07      	ble.n	8026f7c <_printf_float+0x2e8>
 8026f6c:	4613      	mov	r3, r2
 8026f6e:	4631      	mov	r1, r6
 8026f70:	4642      	mov	r2, r8
 8026f72:	4628      	mov	r0, r5
 8026f74:	47b8      	blx	r7
 8026f76:	3001      	adds	r0, #1
 8026f78:	f43f aee9 	beq.w	8026d4e <_printf_float+0xba>
 8026f7c:	f104 031a 	add.w	r3, r4, #26
 8026f80:	f04f 0b00 	mov.w	fp, #0
 8026f84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026f88:	9306      	str	r3, [sp, #24]
 8026f8a:	e015      	b.n	8026fb8 <_printf_float+0x324>
 8026f8c:	7fefffff 	.word	0x7fefffff
 8026f90:	080285dc 	.word	0x080285dc
 8026f94:	080285d8 	.word	0x080285d8
 8026f98:	080285e4 	.word	0x080285e4
 8026f9c:	080285e0 	.word	0x080285e0
 8026fa0:	080285e8 	.word	0x080285e8
 8026fa4:	2301      	movs	r3, #1
 8026fa6:	9a06      	ldr	r2, [sp, #24]
 8026fa8:	4631      	mov	r1, r6
 8026faa:	4628      	mov	r0, r5
 8026fac:	47b8      	blx	r7
 8026fae:	3001      	adds	r0, #1
 8026fb0:	f43f aecd 	beq.w	8026d4e <_printf_float+0xba>
 8026fb4:	f10b 0b01 	add.w	fp, fp, #1
 8026fb8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8026fbc:	ebaa 0309 	sub.w	r3, sl, r9
 8026fc0:	455b      	cmp	r3, fp
 8026fc2:	dcef      	bgt.n	8026fa4 <_printf_float+0x310>
 8026fc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8026fc8:	429a      	cmp	r2, r3
 8026fca:	44d0      	add	r8, sl
 8026fcc:	db15      	blt.n	8026ffa <_printf_float+0x366>
 8026fce:	6823      	ldr	r3, [r4, #0]
 8026fd0:	07da      	lsls	r2, r3, #31
 8026fd2:	d412      	bmi.n	8026ffa <_printf_float+0x366>
 8026fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026fd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026fd8:	eba3 020a 	sub.w	r2, r3, sl
 8026fdc:	eba3 0a01 	sub.w	sl, r3, r1
 8026fe0:	4592      	cmp	sl, r2
 8026fe2:	bfa8      	it	ge
 8026fe4:	4692      	movge	sl, r2
 8026fe6:	f1ba 0f00 	cmp.w	sl, #0
 8026fea:	dc0e      	bgt.n	802700a <_printf_float+0x376>
 8026fec:	f04f 0800 	mov.w	r8, #0
 8026ff0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026ff4:	f104 091a 	add.w	r9, r4, #26
 8026ff8:	e019      	b.n	802702e <_printf_float+0x39a>
 8026ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026ffe:	4631      	mov	r1, r6
 8027000:	4628      	mov	r0, r5
 8027002:	47b8      	blx	r7
 8027004:	3001      	adds	r0, #1
 8027006:	d1e5      	bne.n	8026fd4 <_printf_float+0x340>
 8027008:	e6a1      	b.n	8026d4e <_printf_float+0xba>
 802700a:	4653      	mov	r3, sl
 802700c:	4642      	mov	r2, r8
 802700e:	4631      	mov	r1, r6
 8027010:	4628      	mov	r0, r5
 8027012:	47b8      	blx	r7
 8027014:	3001      	adds	r0, #1
 8027016:	d1e9      	bne.n	8026fec <_printf_float+0x358>
 8027018:	e699      	b.n	8026d4e <_printf_float+0xba>
 802701a:	2301      	movs	r3, #1
 802701c:	464a      	mov	r2, r9
 802701e:	4631      	mov	r1, r6
 8027020:	4628      	mov	r0, r5
 8027022:	47b8      	blx	r7
 8027024:	3001      	adds	r0, #1
 8027026:	f43f ae92 	beq.w	8026d4e <_printf_float+0xba>
 802702a:	f108 0801 	add.w	r8, r8, #1
 802702e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8027032:	1a9b      	subs	r3, r3, r2
 8027034:	eba3 030a 	sub.w	r3, r3, sl
 8027038:	4543      	cmp	r3, r8
 802703a:	dcee      	bgt.n	802701a <_printf_float+0x386>
 802703c:	e74a      	b.n	8026ed4 <_printf_float+0x240>
 802703e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027040:	2a01      	cmp	r2, #1
 8027042:	dc01      	bgt.n	8027048 <_printf_float+0x3b4>
 8027044:	07db      	lsls	r3, r3, #31
 8027046:	d53a      	bpl.n	80270be <_printf_float+0x42a>
 8027048:	2301      	movs	r3, #1
 802704a:	4642      	mov	r2, r8
 802704c:	4631      	mov	r1, r6
 802704e:	4628      	mov	r0, r5
 8027050:	47b8      	blx	r7
 8027052:	3001      	adds	r0, #1
 8027054:	f43f ae7b 	beq.w	8026d4e <_printf_float+0xba>
 8027058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802705c:	4631      	mov	r1, r6
 802705e:	4628      	mov	r0, r5
 8027060:	47b8      	blx	r7
 8027062:	3001      	adds	r0, #1
 8027064:	f108 0801 	add.w	r8, r8, #1
 8027068:	f43f ae71 	beq.w	8026d4e <_printf_float+0xba>
 802706c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802706e:	2200      	movs	r2, #0
 8027070:	f103 3aff 	add.w	sl, r3, #4294967295
 8027074:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8027078:	2300      	movs	r3, #0
 802707a:	f7f9 fc0d 	bl	8020898 <__aeabi_dcmpeq>
 802707e:	b9c8      	cbnz	r0, 80270b4 <_printf_float+0x420>
 8027080:	4653      	mov	r3, sl
 8027082:	4642      	mov	r2, r8
 8027084:	4631      	mov	r1, r6
 8027086:	4628      	mov	r0, r5
 8027088:	47b8      	blx	r7
 802708a:	3001      	adds	r0, #1
 802708c:	d10e      	bne.n	80270ac <_printf_float+0x418>
 802708e:	e65e      	b.n	8026d4e <_printf_float+0xba>
 8027090:	2301      	movs	r3, #1
 8027092:	4652      	mov	r2, sl
 8027094:	4631      	mov	r1, r6
 8027096:	4628      	mov	r0, r5
 8027098:	47b8      	blx	r7
 802709a:	3001      	adds	r0, #1
 802709c:	f43f ae57 	beq.w	8026d4e <_printf_float+0xba>
 80270a0:	f108 0801 	add.w	r8, r8, #1
 80270a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80270a6:	3b01      	subs	r3, #1
 80270a8:	4543      	cmp	r3, r8
 80270aa:	dcf1      	bgt.n	8027090 <_printf_float+0x3fc>
 80270ac:	464b      	mov	r3, r9
 80270ae:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80270b2:	e6de      	b.n	8026e72 <_printf_float+0x1de>
 80270b4:	f04f 0800 	mov.w	r8, #0
 80270b8:	f104 0a1a 	add.w	sl, r4, #26
 80270bc:	e7f2      	b.n	80270a4 <_printf_float+0x410>
 80270be:	2301      	movs	r3, #1
 80270c0:	e7df      	b.n	8027082 <_printf_float+0x3ee>
 80270c2:	2301      	movs	r3, #1
 80270c4:	464a      	mov	r2, r9
 80270c6:	4631      	mov	r1, r6
 80270c8:	4628      	mov	r0, r5
 80270ca:	47b8      	blx	r7
 80270cc:	3001      	adds	r0, #1
 80270ce:	f43f ae3e 	beq.w	8026d4e <_printf_float+0xba>
 80270d2:	f108 0801 	add.w	r8, r8, #1
 80270d6:	68e3      	ldr	r3, [r4, #12]
 80270d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80270da:	1a9b      	subs	r3, r3, r2
 80270dc:	4543      	cmp	r3, r8
 80270de:	dcf0      	bgt.n	80270c2 <_printf_float+0x42e>
 80270e0:	e6fc      	b.n	8026edc <_printf_float+0x248>
 80270e2:	f04f 0800 	mov.w	r8, #0
 80270e6:	f104 0919 	add.w	r9, r4, #25
 80270ea:	e7f4      	b.n	80270d6 <_printf_float+0x442>
 80270ec:	2900      	cmp	r1, #0
 80270ee:	f43f ae8b 	beq.w	8026e08 <_printf_float+0x174>
 80270f2:	2300      	movs	r3, #0
 80270f4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80270f8:	ab09      	add	r3, sp, #36	; 0x24
 80270fa:	9300      	str	r3, [sp, #0]
 80270fc:	ec49 8b10 	vmov	d0, r8, r9
 8027100:	6022      	str	r2, [r4, #0]
 8027102:	f8cd a004 	str.w	sl, [sp, #4]
 8027106:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802710a:	4628      	mov	r0, r5
 802710c:	f7ff fd2d 	bl	8026b6a <__cvt>
 8027110:	4680      	mov	r8, r0
 8027112:	e648      	b.n	8026da6 <_printf_float+0x112>

08027114 <_printf_common>:
 8027114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027118:	4691      	mov	r9, r2
 802711a:	461f      	mov	r7, r3
 802711c:	688a      	ldr	r2, [r1, #8]
 802711e:	690b      	ldr	r3, [r1, #16]
 8027120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027124:	4293      	cmp	r3, r2
 8027126:	bfb8      	it	lt
 8027128:	4613      	movlt	r3, r2
 802712a:	f8c9 3000 	str.w	r3, [r9]
 802712e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027132:	4606      	mov	r6, r0
 8027134:	460c      	mov	r4, r1
 8027136:	b112      	cbz	r2, 802713e <_printf_common+0x2a>
 8027138:	3301      	adds	r3, #1
 802713a:	f8c9 3000 	str.w	r3, [r9]
 802713e:	6823      	ldr	r3, [r4, #0]
 8027140:	0699      	lsls	r1, r3, #26
 8027142:	bf42      	ittt	mi
 8027144:	f8d9 3000 	ldrmi.w	r3, [r9]
 8027148:	3302      	addmi	r3, #2
 802714a:	f8c9 3000 	strmi.w	r3, [r9]
 802714e:	6825      	ldr	r5, [r4, #0]
 8027150:	f015 0506 	ands.w	r5, r5, #6
 8027154:	d107      	bne.n	8027166 <_printf_common+0x52>
 8027156:	f104 0a19 	add.w	sl, r4, #25
 802715a:	68e3      	ldr	r3, [r4, #12]
 802715c:	f8d9 2000 	ldr.w	r2, [r9]
 8027160:	1a9b      	subs	r3, r3, r2
 8027162:	42ab      	cmp	r3, r5
 8027164:	dc28      	bgt.n	80271b8 <_printf_common+0xa4>
 8027166:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802716a:	6822      	ldr	r2, [r4, #0]
 802716c:	3300      	adds	r3, #0
 802716e:	bf18      	it	ne
 8027170:	2301      	movne	r3, #1
 8027172:	0692      	lsls	r2, r2, #26
 8027174:	d42d      	bmi.n	80271d2 <_printf_common+0xbe>
 8027176:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802717a:	4639      	mov	r1, r7
 802717c:	4630      	mov	r0, r6
 802717e:	47c0      	blx	r8
 8027180:	3001      	adds	r0, #1
 8027182:	d020      	beq.n	80271c6 <_printf_common+0xb2>
 8027184:	6823      	ldr	r3, [r4, #0]
 8027186:	68e5      	ldr	r5, [r4, #12]
 8027188:	f8d9 2000 	ldr.w	r2, [r9]
 802718c:	f003 0306 	and.w	r3, r3, #6
 8027190:	2b04      	cmp	r3, #4
 8027192:	bf08      	it	eq
 8027194:	1aad      	subeq	r5, r5, r2
 8027196:	68a3      	ldr	r3, [r4, #8]
 8027198:	6922      	ldr	r2, [r4, #16]
 802719a:	bf0c      	ite	eq
 802719c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80271a0:	2500      	movne	r5, #0
 80271a2:	4293      	cmp	r3, r2
 80271a4:	bfc4      	itt	gt
 80271a6:	1a9b      	subgt	r3, r3, r2
 80271a8:	18ed      	addgt	r5, r5, r3
 80271aa:	f04f 0900 	mov.w	r9, #0
 80271ae:	341a      	adds	r4, #26
 80271b0:	454d      	cmp	r5, r9
 80271b2:	d11a      	bne.n	80271ea <_printf_common+0xd6>
 80271b4:	2000      	movs	r0, #0
 80271b6:	e008      	b.n	80271ca <_printf_common+0xb6>
 80271b8:	2301      	movs	r3, #1
 80271ba:	4652      	mov	r2, sl
 80271bc:	4639      	mov	r1, r7
 80271be:	4630      	mov	r0, r6
 80271c0:	47c0      	blx	r8
 80271c2:	3001      	adds	r0, #1
 80271c4:	d103      	bne.n	80271ce <_printf_common+0xba>
 80271c6:	f04f 30ff 	mov.w	r0, #4294967295
 80271ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80271ce:	3501      	adds	r5, #1
 80271d0:	e7c3      	b.n	802715a <_printf_common+0x46>
 80271d2:	18e1      	adds	r1, r4, r3
 80271d4:	1c5a      	adds	r2, r3, #1
 80271d6:	2030      	movs	r0, #48	; 0x30
 80271d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80271dc:	4422      	add	r2, r4
 80271de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80271e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80271e6:	3302      	adds	r3, #2
 80271e8:	e7c5      	b.n	8027176 <_printf_common+0x62>
 80271ea:	2301      	movs	r3, #1
 80271ec:	4622      	mov	r2, r4
 80271ee:	4639      	mov	r1, r7
 80271f0:	4630      	mov	r0, r6
 80271f2:	47c0      	blx	r8
 80271f4:	3001      	adds	r0, #1
 80271f6:	d0e6      	beq.n	80271c6 <_printf_common+0xb2>
 80271f8:	f109 0901 	add.w	r9, r9, #1
 80271fc:	e7d8      	b.n	80271b0 <_printf_common+0x9c>

080271fe <quorem>:
 80271fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027202:	6903      	ldr	r3, [r0, #16]
 8027204:	690c      	ldr	r4, [r1, #16]
 8027206:	42a3      	cmp	r3, r4
 8027208:	4680      	mov	r8, r0
 802720a:	f2c0 8082 	blt.w	8027312 <quorem+0x114>
 802720e:	3c01      	subs	r4, #1
 8027210:	f101 0714 	add.w	r7, r1, #20
 8027214:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8027218:	f100 0614 	add.w	r6, r0, #20
 802721c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8027220:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8027224:	eb06 030c 	add.w	r3, r6, ip
 8027228:	3501      	adds	r5, #1
 802722a:	eb07 090c 	add.w	r9, r7, ip
 802722e:	9301      	str	r3, [sp, #4]
 8027230:	fbb0 f5f5 	udiv	r5, r0, r5
 8027234:	b395      	cbz	r5, 802729c <quorem+0x9e>
 8027236:	f04f 0a00 	mov.w	sl, #0
 802723a:	4638      	mov	r0, r7
 802723c:	46b6      	mov	lr, r6
 802723e:	46d3      	mov	fp, sl
 8027240:	f850 2b04 	ldr.w	r2, [r0], #4
 8027244:	b293      	uxth	r3, r2
 8027246:	fb05 a303 	mla	r3, r5, r3, sl
 802724a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802724e:	b29b      	uxth	r3, r3
 8027250:	ebab 0303 	sub.w	r3, fp, r3
 8027254:	0c12      	lsrs	r2, r2, #16
 8027256:	f8de b000 	ldr.w	fp, [lr]
 802725a:	fb05 a202 	mla	r2, r5, r2, sl
 802725e:	fa13 f38b 	uxtah	r3, r3, fp
 8027262:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8027266:	fa1f fb82 	uxth.w	fp, r2
 802726a:	f8de 2000 	ldr.w	r2, [lr]
 802726e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8027272:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8027276:	b29b      	uxth	r3, r3
 8027278:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802727c:	4581      	cmp	r9, r0
 802727e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8027282:	f84e 3b04 	str.w	r3, [lr], #4
 8027286:	d2db      	bcs.n	8027240 <quorem+0x42>
 8027288:	f856 300c 	ldr.w	r3, [r6, ip]
 802728c:	b933      	cbnz	r3, 802729c <quorem+0x9e>
 802728e:	9b01      	ldr	r3, [sp, #4]
 8027290:	3b04      	subs	r3, #4
 8027292:	429e      	cmp	r6, r3
 8027294:	461a      	mov	r2, r3
 8027296:	d330      	bcc.n	80272fa <quorem+0xfc>
 8027298:	f8c8 4010 	str.w	r4, [r8, #16]
 802729c:	4640      	mov	r0, r8
 802729e:	f001 f81f 	bl	80282e0 <__mcmp>
 80272a2:	2800      	cmp	r0, #0
 80272a4:	db25      	blt.n	80272f2 <quorem+0xf4>
 80272a6:	3501      	adds	r5, #1
 80272a8:	4630      	mov	r0, r6
 80272aa:	f04f 0c00 	mov.w	ip, #0
 80272ae:	f857 2b04 	ldr.w	r2, [r7], #4
 80272b2:	f8d0 e000 	ldr.w	lr, [r0]
 80272b6:	b293      	uxth	r3, r2
 80272b8:	ebac 0303 	sub.w	r3, ip, r3
 80272bc:	0c12      	lsrs	r2, r2, #16
 80272be:	fa13 f38e 	uxtah	r3, r3, lr
 80272c2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80272c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80272ca:	b29b      	uxth	r3, r3
 80272cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80272d0:	45b9      	cmp	r9, r7
 80272d2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80272d6:	f840 3b04 	str.w	r3, [r0], #4
 80272da:	d2e8      	bcs.n	80272ae <quorem+0xb0>
 80272dc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80272e0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80272e4:	b92a      	cbnz	r2, 80272f2 <quorem+0xf4>
 80272e6:	3b04      	subs	r3, #4
 80272e8:	429e      	cmp	r6, r3
 80272ea:	461a      	mov	r2, r3
 80272ec:	d30b      	bcc.n	8027306 <quorem+0x108>
 80272ee:	f8c8 4010 	str.w	r4, [r8, #16]
 80272f2:	4628      	mov	r0, r5
 80272f4:	b003      	add	sp, #12
 80272f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80272fa:	6812      	ldr	r2, [r2, #0]
 80272fc:	3b04      	subs	r3, #4
 80272fe:	2a00      	cmp	r2, #0
 8027300:	d1ca      	bne.n	8027298 <quorem+0x9a>
 8027302:	3c01      	subs	r4, #1
 8027304:	e7c5      	b.n	8027292 <quorem+0x94>
 8027306:	6812      	ldr	r2, [r2, #0]
 8027308:	3b04      	subs	r3, #4
 802730a:	2a00      	cmp	r2, #0
 802730c:	d1ef      	bne.n	80272ee <quorem+0xf0>
 802730e:	3c01      	subs	r4, #1
 8027310:	e7ea      	b.n	80272e8 <quorem+0xea>
 8027312:	2000      	movs	r0, #0
 8027314:	e7ee      	b.n	80272f4 <quorem+0xf6>
	...

08027318 <_dtoa_r>:
 8027318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802731c:	ec57 6b10 	vmov	r6, r7, d0
 8027320:	b097      	sub	sp, #92	; 0x5c
 8027322:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8027324:	9106      	str	r1, [sp, #24]
 8027326:	4604      	mov	r4, r0
 8027328:	920b      	str	r2, [sp, #44]	; 0x2c
 802732a:	9312      	str	r3, [sp, #72]	; 0x48
 802732c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8027330:	e9cd 6700 	strd	r6, r7, [sp]
 8027334:	b93d      	cbnz	r5, 8027346 <_dtoa_r+0x2e>
 8027336:	2010      	movs	r0, #16
 8027338:	f000 fdb4 	bl	8027ea4 <malloc>
 802733c:	6260      	str	r0, [r4, #36]	; 0x24
 802733e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8027342:	6005      	str	r5, [r0, #0]
 8027344:	60c5      	str	r5, [r0, #12]
 8027346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027348:	6819      	ldr	r1, [r3, #0]
 802734a:	b151      	cbz	r1, 8027362 <_dtoa_r+0x4a>
 802734c:	685a      	ldr	r2, [r3, #4]
 802734e:	604a      	str	r2, [r1, #4]
 8027350:	2301      	movs	r3, #1
 8027352:	4093      	lsls	r3, r2
 8027354:	608b      	str	r3, [r1, #8]
 8027356:	4620      	mov	r0, r4
 8027358:	f000 fde0 	bl	8027f1c <_Bfree>
 802735c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802735e:	2200      	movs	r2, #0
 8027360:	601a      	str	r2, [r3, #0]
 8027362:	1e3b      	subs	r3, r7, #0
 8027364:	bfbb      	ittet	lt
 8027366:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802736a:	9301      	strlt	r3, [sp, #4]
 802736c:	2300      	movge	r3, #0
 802736e:	2201      	movlt	r2, #1
 8027370:	bfac      	ite	ge
 8027372:	f8c8 3000 	strge.w	r3, [r8]
 8027376:	f8c8 2000 	strlt.w	r2, [r8]
 802737a:	4baf      	ldr	r3, [pc, #700]	; (8027638 <_dtoa_r+0x320>)
 802737c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8027380:	ea33 0308 	bics.w	r3, r3, r8
 8027384:	d114      	bne.n	80273b0 <_dtoa_r+0x98>
 8027386:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027388:	f242 730f 	movw	r3, #9999	; 0x270f
 802738c:	6013      	str	r3, [r2, #0]
 802738e:	9b00      	ldr	r3, [sp, #0]
 8027390:	b923      	cbnz	r3, 802739c <_dtoa_r+0x84>
 8027392:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8027396:	2800      	cmp	r0, #0
 8027398:	f000 8542 	beq.w	8027e20 <_dtoa_r+0xb08>
 802739c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802739e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 802764c <_dtoa_r+0x334>
 80273a2:	2b00      	cmp	r3, #0
 80273a4:	f000 8544 	beq.w	8027e30 <_dtoa_r+0xb18>
 80273a8:	f10b 0303 	add.w	r3, fp, #3
 80273ac:	f000 bd3e 	b.w	8027e2c <_dtoa_r+0xb14>
 80273b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80273b4:	2200      	movs	r2, #0
 80273b6:	2300      	movs	r3, #0
 80273b8:	4630      	mov	r0, r6
 80273ba:	4639      	mov	r1, r7
 80273bc:	f7f9 fa6c 	bl	8020898 <__aeabi_dcmpeq>
 80273c0:	4681      	mov	r9, r0
 80273c2:	b168      	cbz	r0, 80273e0 <_dtoa_r+0xc8>
 80273c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80273c6:	2301      	movs	r3, #1
 80273c8:	6013      	str	r3, [r2, #0]
 80273ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80273cc:	2b00      	cmp	r3, #0
 80273ce:	f000 8524 	beq.w	8027e1a <_dtoa_r+0xb02>
 80273d2:	4b9a      	ldr	r3, [pc, #616]	; (802763c <_dtoa_r+0x324>)
 80273d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80273d6:	f103 3bff 	add.w	fp, r3, #4294967295
 80273da:	6013      	str	r3, [r2, #0]
 80273dc:	f000 bd28 	b.w	8027e30 <_dtoa_r+0xb18>
 80273e0:	aa14      	add	r2, sp, #80	; 0x50
 80273e2:	a915      	add	r1, sp, #84	; 0x54
 80273e4:	ec47 6b10 	vmov	d0, r6, r7
 80273e8:	4620      	mov	r0, r4
 80273ea:	f000 fff0 	bl	80283ce <__d2b>
 80273ee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80273f2:	9004      	str	r0, [sp, #16]
 80273f4:	2d00      	cmp	r5, #0
 80273f6:	d07c      	beq.n	80274f2 <_dtoa_r+0x1da>
 80273f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80273fc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8027400:	46b2      	mov	sl, r6
 8027402:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8027406:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802740a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 802740e:	2200      	movs	r2, #0
 8027410:	4b8b      	ldr	r3, [pc, #556]	; (8027640 <_dtoa_r+0x328>)
 8027412:	4650      	mov	r0, sl
 8027414:	4659      	mov	r1, fp
 8027416:	f7f8 fe1f 	bl	8020058 <__aeabi_dsub>
 802741a:	a381      	add	r3, pc, #516	; (adr r3, 8027620 <_dtoa_r+0x308>)
 802741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027420:	f7f8 ffd2 	bl	80203c8 <__aeabi_dmul>
 8027424:	a380      	add	r3, pc, #512	; (adr r3, 8027628 <_dtoa_r+0x310>)
 8027426:	e9d3 2300 	ldrd	r2, r3, [r3]
 802742a:	f7f8 fe17 	bl	802005c <__adddf3>
 802742e:	4606      	mov	r6, r0
 8027430:	4628      	mov	r0, r5
 8027432:	460f      	mov	r7, r1
 8027434:	f7f8 ff5e 	bl	80202f4 <__aeabi_i2d>
 8027438:	a37d      	add	r3, pc, #500	; (adr r3, 8027630 <_dtoa_r+0x318>)
 802743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802743e:	f7f8 ffc3 	bl	80203c8 <__aeabi_dmul>
 8027442:	4602      	mov	r2, r0
 8027444:	460b      	mov	r3, r1
 8027446:	4630      	mov	r0, r6
 8027448:	4639      	mov	r1, r7
 802744a:	f7f8 fe07 	bl	802005c <__adddf3>
 802744e:	4606      	mov	r6, r0
 8027450:	460f      	mov	r7, r1
 8027452:	f7f9 fa69 	bl	8020928 <__aeabi_d2iz>
 8027456:	2200      	movs	r2, #0
 8027458:	4682      	mov	sl, r0
 802745a:	2300      	movs	r3, #0
 802745c:	4630      	mov	r0, r6
 802745e:	4639      	mov	r1, r7
 8027460:	f7f9 fa24 	bl	80208ac <__aeabi_dcmplt>
 8027464:	b148      	cbz	r0, 802747a <_dtoa_r+0x162>
 8027466:	4650      	mov	r0, sl
 8027468:	f7f8 ff44 	bl	80202f4 <__aeabi_i2d>
 802746c:	4632      	mov	r2, r6
 802746e:	463b      	mov	r3, r7
 8027470:	f7f9 fa12 	bl	8020898 <__aeabi_dcmpeq>
 8027474:	b908      	cbnz	r0, 802747a <_dtoa_r+0x162>
 8027476:	f10a 3aff 	add.w	sl, sl, #4294967295
 802747a:	f1ba 0f16 	cmp.w	sl, #22
 802747e:	d859      	bhi.n	8027534 <_dtoa_r+0x21c>
 8027480:	4970      	ldr	r1, [pc, #448]	; (8027644 <_dtoa_r+0x32c>)
 8027482:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8027486:	e9dd 2300 	ldrd	r2, r3, [sp]
 802748a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802748e:	f7f9 fa2b 	bl	80208e8 <__aeabi_dcmpgt>
 8027492:	2800      	cmp	r0, #0
 8027494:	d050      	beq.n	8027538 <_dtoa_r+0x220>
 8027496:	f10a 3aff 	add.w	sl, sl, #4294967295
 802749a:	2300      	movs	r3, #0
 802749c:	930f      	str	r3, [sp, #60]	; 0x3c
 802749e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80274a0:	1b5d      	subs	r5, r3, r5
 80274a2:	f1b5 0801 	subs.w	r8, r5, #1
 80274a6:	bf49      	itett	mi
 80274a8:	f1c5 0301 	rsbmi	r3, r5, #1
 80274ac:	2300      	movpl	r3, #0
 80274ae:	9305      	strmi	r3, [sp, #20]
 80274b0:	f04f 0800 	movmi.w	r8, #0
 80274b4:	bf58      	it	pl
 80274b6:	9305      	strpl	r3, [sp, #20]
 80274b8:	f1ba 0f00 	cmp.w	sl, #0
 80274bc:	db3e      	blt.n	802753c <_dtoa_r+0x224>
 80274be:	2300      	movs	r3, #0
 80274c0:	44d0      	add	r8, sl
 80274c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80274c6:	9307      	str	r3, [sp, #28]
 80274c8:	9b06      	ldr	r3, [sp, #24]
 80274ca:	2b09      	cmp	r3, #9
 80274cc:	f200 8090 	bhi.w	80275f0 <_dtoa_r+0x2d8>
 80274d0:	2b05      	cmp	r3, #5
 80274d2:	bfc4      	itt	gt
 80274d4:	3b04      	subgt	r3, #4
 80274d6:	9306      	strgt	r3, [sp, #24]
 80274d8:	9b06      	ldr	r3, [sp, #24]
 80274da:	f1a3 0302 	sub.w	r3, r3, #2
 80274de:	bfcc      	ite	gt
 80274e0:	2500      	movgt	r5, #0
 80274e2:	2501      	movle	r5, #1
 80274e4:	2b03      	cmp	r3, #3
 80274e6:	f200 808f 	bhi.w	8027608 <_dtoa_r+0x2f0>
 80274ea:	e8df f003 	tbb	[pc, r3]
 80274ee:	7f7d      	.short	0x7f7d
 80274f0:	7131      	.short	0x7131
 80274f2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80274f6:	441d      	add	r5, r3
 80274f8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80274fc:	2820      	cmp	r0, #32
 80274fe:	dd13      	ble.n	8027528 <_dtoa_r+0x210>
 8027500:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8027504:	9b00      	ldr	r3, [sp, #0]
 8027506:	fa08 f800 	lsl.w	r8, r8, r0
 802750a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 802750e:	fa23 f000 	lsr.w	r0, r3, r0
 8027512:	ea48 0000 	orr.w	r0, r8, r0
 8027516:	f7f8 fedd 	bl	80202d4 <__aeabi_ui2d>
 802751a:	2301      	movs	r3, #1
 802751c:	4682      	mov	sl, r0
 802751e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8027522:	3d01      	subs	r5, #1
 8027524:	9313      	str	r3, [sp, #76]	; 0x4c
 8027526:	e772      	b.n	802740e <_dtoa_r+0xf6>
 8027528:	9b00      	ldr	r3, [sp, #0]
 802752a:	f1c0 0020 	rsb	r0, r0, #32
 802752e:	fa03 f000 	lsl.w	r0, r3, r0
 8027532:	e7f0      	b.n	8027516 <_dtoa_r+0x1fe>
 8027534:	2301      	movs	r3, #1
 8027536:	e7b1      	b.n	802749c <_dtoa_r+0x184>
 8027538:	900f      	str	r0, [sp, #60]	; 0x3c
 802753a:	e7b0      	b.n	802749e <_dtoa_r+0x186>
 802753c:	9b05      	ldr	r3, [sp, #20]
 802753e:	eba3 030a 	sub.w	r3, r3, sl
 8027542:	9305      	str	r3, [sp, #20]
 8027544:	f1ca 0300 	rsb	r3, sl, #0
 8027548:	9307      	str	r3, [sp, #28]
 802754a:	2300      	movs	r3, #0
 802754c:	930e      	str	r3, [sp, #56]	; 0x38
 802754e:	e7bb      	b.n	80274c8 <_dtoa_r+0x1b0>
 8027550:	2301      	movs	r3, #1
 8027552:	930a      	str	r3, [sp, #40]	; 0x28
 8027554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027556:	2b00      	cmp	r3, #0
 8027558:	dd59      	ble.n	802760e <_dtoa_r+0x2f6>
 802755a:	9302      	str	r3, [sp, #8]
 802755c:	4699      	mov	r9, r3
 802755e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8027560:	2200      	movs	r2, #0
 8027562:	6072      	str	r2, [r6, #4]
 8027564:	2204      	movs	r2, #4
 8027566:	f102 0014 	add.w	r0, r2, #20
 802756a:	4298      	cmp	r0, r3
 802756c:	6871      	ldr	r1, [r6, #4]
 802756e:	d953      	bls.n	8027618 <_dtoa_r+0x300>
 8027570:	4620      	mov	r0, r4
 8027572:	f000 fc9f 	bl	8027eb4 <_Balloc>
 8027576:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027578:	6030      	str	r0, [r6, #0]
 802757a:	f1b9 0f0e 	cmp.w	r9, #14
 802757e:	f8d3 b000 	ldr.w	fp, [r3]
 8027582:	f200 80e6 	bhi.w	8027752 <_dtoa_r+0x43a>
 8027586:	2d00      	cmp	r5, #0
 8027588:	f000 80e3 	beq.w	8027752 <_dtoa_r+0x43a>
 802758c:	ed9d 7b00 	vldr	d7, [sp]
 8027590:	f1ba 0f00 	cmp.w	sl, #0
 8027594:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8027598:	dd74      	ble.n	8027684 <_dtoa_r+0x36c>
 802759a:	4a2a      	ldr	r2, [pc, #168]	; (8027644 <_dtoa_r+0x32c>)
 802759c:	f00a 030f 	and.w	r3, sl, #15
 80275a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80275a4:	ed93 7b00 	vldr	d7, [r3]
 80275a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80275ac:	06f0      	lsls	r0, r6, #27
 80275ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 80275b2:	d565      	bpl.n	8027680 <_dtoa_r+0x368>
 80275b4:	4b24      	ldr	r3, [pc, #144]	; (8027648 <_dtoa_r+0x330>)
 80275b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80275ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80275be:	f7f9 f82d 	bl	802061c <__aeabi_ddiv>
 80275c2:	e9cd 0100 	strd	r0, r1, [sp]
 80275c6:	f006 060f 	and.w	r6, r6, #15
 80275ca:	2503      	movs	r5, #3
 80275cc:	4f1e      	ldr	r7, [pc, #120]	; (8027648 <_dtoa_r+0x330>)
 80275ce:	e04c      	b.n	802766a <_dtoa_r+0x352>
 80275d0:	2301      	movs	r3, #1
 80275d2:	930a      	str	r3, [sp, #40]	; 0x28
 80275d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80275d6:	4453      	add	r3, sl
 80275d8:	f103 0901 	add.w	r9, r3, #1
 80275dc:	9302      	str	r3, [sp, #8]
 80275de:	464b      	mov	r3, r9
 80275e0:	2b01      	cmp	r3, #1
 80275e2:	bfb8      	it	lt
 80275e4:	2301      	movlt	r3, #1
 80275e6:	e7ba      	b.n	802755e <_dtoa_r+0x246>
 80275e8:	2300      	movs	r3, #0
 80275ea:	e7b2      	b.n	8027552 <_dtoa_r+0x23a>
 80275ec:	2300      	movs	r3, #0
 80275ee:	e7f0      	b.n	80275d2 <_dtoa_r+0x2ba>
 80275f0:	2501      	movs	r5, #1
 80275f2:	2300      	movs	r3, #0
 80275f4:	9306      	str	r3, [sp, #24]
 80275f6:	950a      	str	r5, [sp, #40]	; 0x28
 80275f8:	f04f 33ff 	mov.w	r3, #4294967295
 80275fc:	9302      	str	r3, [sp, #8]
 80275fe:	4699      	mov	r9, r3
 8027600:	2200      	movs	r2, #0
 8027602:	2312      	movs	r3, #18
 8027604:	920b      	str	r2, [sp, #44]	; 0x2c
 8027606:	e7aa      	b.n	802755e <_dtoa_r+0x246>
 8027608:	2301      	movs	r3, #1
 802760a:	930a      	str	r3, [sp, #40]	; 0x28
 802760c:	e7f4      	b.n	80275f8 <_dtoa_r+0x2e0>
 802760e:	2301      	movs	r3, #1
 8027610:	9302      	str	r3, [sp, #8]
 8027612:	4699      	mov	r9, r3
 8027614:	461a      	mov	r2, r3
 8027616:	e7f5      	b.n	8027604 <_dtoa_r+0x2ec>
 8027618:	3101      	adds	r1, #1
 802761a:	6071      	str	r1, [r6, #4]
 802761c:	0052      	lsls	r2, r2, #1
 802761e:	e7a2      	b.n	8027566 <_dtoa_r+0x24e>
 8027620:	636f4361 	.word	0x636f4361
 8027624:	3fd287a7 	.word	0x3fd287a7
 8027628:	8b60c8b3 	.word	0x8b60c8b3
 802762c:	3fc68a28 	.word	0x3fc68a28
 8027630:	509f79fb 	.word	0x509f79fb
 8027634:	3fd34413 	.word	0x3fd34413
 8027638:	7ff00000 	.word	0x7ff00000
 802763c:	080285e9 	.word	0x080285e9
 8027640:	3ff80000 	.word	0x3ff80000
 8027644:	08028680 	.word	0x08028680
 8027648:	08028658 	.word	0x08028658
 802764c:	080285f3 	.word	0x080285f3
 8027650:	07f1      	lsls	r1, r6, #31
 8027652:	d508      	bpl.n	8027666 <_dtoa_r+0x34e>
 8027654:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8027658:	e9d7 2300 	ldrd	r2, r3, [r7]
 802765c:	f7f8 feb4 	bl	80203c8 <__aeabi_dmul>
 8027660:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8027664:	3501      	adds	r5, #1
 8027666:	1076      	asrs	r6, r6, #1
 8027668:	3708      	adds	r7, #8
 802766a:	2e00      	cmp	r6, #0
 802766c:	d1f0      	bne.n	8027650 <_dtoa_r+0x338>
 802766e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8027672:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027676:	f7f8 ffd1 	bl	802061c <__aeabi_ddiv>
 802767a:	e9cd 0100 	strd	r0, r1, [sp]
 802767e:	e01a      	b.n	80276b6 <_dtoa_r+0x39e>
 8027680:	2502      	movs	r5, #2
 8027682:	e7a3      	b.n	80275cc <_dtoa_r+0x2b4>
 8027684:	f000 80a0 	beq.w	80277c8 <_dtoa_r+0x4b0>
 8027688:	f1ca 0600 	rsb	r6, sl, #0
 802768c:	4b9f      	ldr	r3, [pc, #636]	; (802790c <_dtoa_r+0x5f4>)
 802768e:	4fa0      	ldr	r7, [pc, #640]	; (8027910 <_dtoa_r+0x5f8>)
 8027690:	f006 020f 	and.w	r2, r6, #15
 8027694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8027698:	e9d3 2300 	ldrd	r2, r3, [r3]
 802769c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80276a0:	f7f8 fe92 	bl	80203c8 <__aeabi_dmul>
 80276a4:	e9cd 0100 	strd	r0, r1, [sp]
 80276a8:	1136      	asrs	r6, r6, #4
 80276aa:	2300      	movs	r3, #0
 80276ac:	2502      	movs	r5, #2
 80276ae:	2e00      	cmp	r6, #0
 80276b0:	d17f      	bne.n	80277b2 <_dtoa_r+0x49a>
 80276b2:	2b00      	cmp	r3, #0
 80276b4:	d1e1      	bne.n	802767a <_dtoa_r+0x362>
 80276b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80276b8:	2b00      	cmp	r3, #0
 80276ba:	f000 8087 	beq.w	80277cc <_dtoa_r+0x4b4>
 80276be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80276c2:	2200      	movs	r2, #0
 80276c4:	4b93      	ldr	r3, [pc, #588]	; (8027914 <_dtoa_r+0x5fc>)
 80276c6:	4630      	mov	r0, r6
 80276c8:	4639      	mov	r1, r7
 80276ca:	f7f9 f8ef 	bl	80208ac <__aeabi_dcmplt>
 80276ce:	2800      	cmp	r0, #0
 80276d0:	d07c      	beq.n	80277cc <_dtoa_r+0x4b4>
 80276d2:	f1b9 0f00 	cmp.w	r9, #0
 80276d6:	d079      	beq.n	80277cc <_dtoa_r+0x4b4>
 80276d8:	9b02      	ldr	r3, [sp, #8]
 80276da:	2b00      	cmp	r3, #0
 80276dc:	dd35      	ble.n	802774a <_dtoa_r+0x432>
 80276de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80276e2:	9308      	str	r3, [sp, #32]
 80276e4:	4639      	mov	r1, r7
 80276e6:	2200      	movs	r2, #0
 80276e8:	4b8b      	ldr	r3, [pc, #556]	; (8027918 <_dtoa_r+0x600>)
 80276ea:	4630      	mov	r0, r6
 80276ec:	f7f8 fe6c 	bl	80203c8 <__aeabi_dmul>
 80276f0:	e9cd 0100 	strd	r0, r1, [sp]
 80276f4:	9f02      	ldr	r7, [sp, #8]
 80276f6:	3501      	adds	r5, #1
 80276f8:	4628      	mov	r0, r5
 80276fa:	f7f8 fdfb 	bl	80202f4 <__aeabi_i2d>
 80276fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027702:	f7f8 fe61 	bl	80203c8 <__aeabi_dmul>
 8027706:	2200      	movs	r2, #0
 8027708:	4b84      	ldr	r3, [pc, #528]	; (802791c <_dtoa_r+0x604>)
 802770a:	f7f8 fca7 	bl	802005c <__adddf3>
 802770e:	4605      	mov	r5, r0
 8027710:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8027714:	2f00      	cmp	r7, #0
 8027716:	d15d      	bne.n	80277d4 <_dtoa_r+0x4bc>
 8027718:	2200      	movs	r2, #0
 802771a:	4b81      	ldr	r3, [pc, #516]	; (8027920 <_dtoa_r+0x608>)
 802771c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027720:	f7f8 fc9a 	bl	8020058 <__aeabi_dsub>
 8027724:	462a      	mov	r2, r5
 8027726:	4633      	mov	r3, r6
 8027728:	e9cd 0100 	strd	r0, r1, [sp]
 802772c:	f7f9 f8dc 	bl	80208e8 <__aeabi_dcmpgt>
 8027730:	2800      	cmp	r0, #0
 8027732:	f040 8288 	bne.w	8027c46 <_dtoa_r+0x92e>
 8027736:	462a      	mov	r2, r5
 8027738:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 802773c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027740:	f7f9 f8b4 	bl	80208ac <__aeabi_dcmplt>
 8027744:	2800      	cmp	r0, #0
 8027746:	f040 827c 	bne.w	8027c42 <_dtoa_r+0x92a>
 802774a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802774e:	e9cd 2300 	strd	r2, r3, [sp]
 8027752:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027754:	2b00      	cmp	r3, #0
 8027756:	f2c0 8150 	blt.w	80279fa <_dtoa_r+0x6e2>
 802775a:	f1ba 0f0e 	cmp.w	sl, #14
 802775e:	f300 814c 	bgt.w	80279fa <_dtoa_r+0x6e2>
 8027762:	4b6a      	ldr	r3, [pc, #424]	; (802790c <_dtoa_r+0x5f4>)
 8027764:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8027768:	ed93 7b00 	vldr	d7, [r3]
 802776c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802776e:	2b00      	cmp	r3, #0
 8027770:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027774:	f280 80d8 	bge.w	8027928 <_dtoa_r+0x610>
 8027778:	f1b9 0f00 	cmp.w	r9, #0
 802777c:	f300 80d4 	bgt.w	8027928 <_dtoa_r+0x610>
 8027780:	f040 825e 	bne.w	8027c40 <_dtoa_r+0x928>
 8027784:	2200      	movs	r2, #0
 8027786:	4b66      	ldr	r3, [pc, #408]	; (8027920 <_dtoa_r+0x608>)
 8027788:	ec51 0b17 	vmov	r0, r1, d7
 802778c:	f7f8 fe1c 	bl	80203c8 <__aeabi_dmul>
 8027790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027794:	f7f9 f89e 	bl	80208d4 <__aeabi_dcmpge>
 8027798:	464f      	mov	r7, r9
 802779a:	464e      	mov	r6, r9
 802779c:	2800      	cmp	r0, #0
 802779e:	f040 8234 	bne.w	8027c0a <_dtoa_r+0x8f2>
 80277a2:	2331      	movs	r3, #49	; 0x31
 80277a4:	f10b 0501 	add.w	r5, fp, #1
 80277a8:	f88b 3000 	strb.w	r3, [fp]
 80277ac:	f10a 0a01 	add.w	sl, sl, #1
 80277b0:	e22f      	b.n	8027c12 <_dtoa_r+0x8fa>
 80277b2:	07f2      	lsls	r2, r6, #31
 80277b4:	d505      	bpl.n	80277c2 <_dtoa_r+0x4aa>
 80277b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80277ba:	f7f8 fe05 	bl	80203c8 <__aeabi_dmul>
 80277be:	3501      	adds	r5, #1
 80277c0:	2301      	movs	r3, #1
 80277c2:	1076      	asrs	r6, r6, #1
 80277c4:	3708      	adds	r7, #8
 80277c6:	e772      	b.n	80276ae <_dtoa_r+0x396>
 80277c8:	2502      	movs	r5, #2
 80277ca:	e774      	b.n	80276b6 <_dtoa_r+0x39e>
 80277cc:	f8cd a020 	str.w	sl, [sp, #32]
 80277d0:	464f      	mov	r7, r9
 80277d2:	e791      	b.n	80276f8 <_dtoa_r+0x3e0>
 80277d4:	4b4d      	ldr	r3, [pc, #308]	; (802790c <_dtoa_r+0x5f4>)
 80277d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80277da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80277de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80277e0:	2b00      	cmp	r3, #0
 80277e2:	d047      	beq.n	8027874 <_dtoa_r+0x55c>
 80277e4:	4602      	mov	r2, r0
 80277e6:	460b      	mov	r3, r1
 80277e8:	2000      	movs	r0, #0
 80277ea:	494e      	ldr	r1, [pc, #312]	; (8027924 <_dtoa_r+0x60c>)
 80277ec:	f7f8 ff16 	bl	802061c <__aeabi_ddiv>
 80277f0:	462a      	mov	r2, r5
 80277f2:	4633      	mov	r3, r6
 80277f4:	f7f8 fc30 	bl	8020058 <__aeabi_dsub>
 80277f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80277fc:	465d      	mov	r5, fp
 80277fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027802:	f7f9 f891 	bl	8020928 <__aeabi_d2iz>
 8027806:	4606      	mov	r6, r0
 8027808:	f7f8 fd74 	bl	80202f4 <__aeabi_i2d>
 802780c:	4602      	mov	r2, r0
 802780e:	460b      	mov	r3, r1
 8027810:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027814:	f7f8 fc20 	bl	8020058 <__aeabi_dsub>
 8027818:	3630      	adds	r6, #48	; 0x30
 802781a:	f805 6b01 	strb.w	r6, [r5], #1
 802781e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8027822:	e9cd 0100 	strd	r0, r1, [sp]
 8027826:	f7f9 f841 	bl	80208ac <__aeabi_dcmplt>
 802782a:	2800      	cmp	r0, #0
 802782c:	d163      	bne.n	80278f6 <_dtoa_r+0x5de>
 802782e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027832:	2000      	movs	r0, #0
 8027834:	4937      	ldr	r1, [pc, #220]	; (8027914 <_dtoa_r+0x5fc>)
 8027836:	f7f8 fc0f 	bl	8020058 <__aeabi_dsub>
 802783a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802783e:	f7f9 f835 	bl	80208ac <__aeabi_dcmplt>
 8027842:	2800      	cmp	r0, #0
 8027844:	f040 80b7 	bne.w	80279b6 <_dtoa_r+0x69e>
 8027848:	eba5 030b 	sub.w	r3, r5, fp
 802784c:	429f      	cmp	r7, r3
 802784e:	f77f af7c 	ble.w	802774a <_dtoa_r+0x432>
 8027852:	2200      	movs	r2, #0
 8027854:	4b30      	ldr	r3, [pc, #192]	; (8027918 <_dtoa_r+0x600>)
 8027856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802785a:	f7f8 fdb5 	bl	80203c8 <__aeabi_dmul>
 802785e:	2200      	movs	r2, #0
 8027860:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8027864:	4b2c      	ldr	r3, [pc, #176]	; (8027918 <_dtoa_r+0x600>)
 8027866:	e9dd 0100 	ldrd	r0, r1, [sp]
 802786a:	f7f8 fdad 	bl	80203c8 <__aeabi_dmul>
 802786e:	e9cd 0100 	strd	r0, r1, [sp]
 8027872:	e7c4      	b.n	80277fe <_dtoa_r+0x4e6>
 8027874:	462a      	mov	r2, r5
 8027876:	4633      	mov	r3, r6
 8027878:	f7f8 fda6 	bl	80203c8 <__aeabi_dmul>
 802787c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8027880:	eb0b 0507 	add.w	r5, fp, r7
 8027884:	465e      	mov	r6, fp
 8027886:	e9dd 0100 	ldrd	r0, r1, [sp]
 802788a:	f7f9 f84d 	bl	8020928 <__aeabi_d2iz>
 802788e:	4607      	mov	r7, r0
 8027890:	f7f8 fd30 	bl	80202f4 <__aeabi_i2d>
 8027894:	3730      	adds	r7, #48	; 0x30
 8027896:	4602      	mov	r2, r0
 8027898:	460b      	mov	r3, r1
 802789a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802789e:	f7f8 fbdb 	bl	8020058 <__aeabi_dsub>
 80278a2:	f806 7b01 	strb.w	r7, [r6], #1
 80278a6:	42ae      	cmp	r6, r5
 80278a8:	e9cd 0100 	strd	r0, r1, [sp]
 80278ac:	f04f 0200 	mov.w	r2, #0
 80278b0:	d126      	bne.n	8027900 <_dtoa_r+0x5e8>
 80278b2:	4b1c      	ldr	r3, [pc, #112]	; (8027924 <_dtoa_r+0x60c>)
 80278b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80278b8:	f7f8 fbd0 	bl	802005c <__adddf3>
 80278bc:	4602      	mov	r2, r0
 80278be:	460b      	mov	r3, r1
 80278c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80278c4:	f7f9 f810 	bl	80208e8 <__aeabi_dcmpgt>
 80278c8:	2800      	cmp	r0, #0
 80278ca:	d174      	bne.n	80279b6 <_dtoa_r+0x69e>
 80278cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80278d0:	2000      	movs	r0, #0
 80278d2:	4914      	ldr	r1, [pc, #80]	; (8027924 <_dtoa_r+0x60c>)
 80278d4:	f7f8 fbc0 	bl	8020058 <__aeabi_dsub>
 80278d8:	4602      	mov	r2, r0
 80278da:	460b      	mov	r3, r1
 80278dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80278e0:	f7f8 ffe4 	bl	80208ac <__aeabi_dcmplt>
 80278e4:	2800      	cmp	r0, #0
 80278e6:	f43f af30 	beq.w	802774a <_dtoa_r+0x432>
 80278ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80278ee:	2b30      	cmp	r3, #48	; 0x30
 80278f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80278f4:	d002      	beq.n	80278fc <_dtoa_r+0x5e4>
 80278f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80278fa:	e04a      	b.n	8027992 <_dtoa_r+0x67a>
 80278fc:	4615      	mov	r5, r2
 80278fe:	e7f4      	b.n	80278ea <_dtoa_r+0x5d2>
 8027900:	4b05      	ldr	r3, [pc, #20]	; (8027918 <_dtoa_r+0x600>)
 8027902:	f7f8 fd61 	bl	80203c8 <__aeabi_dmul>
 8027906:	e9cd 0100 	strd	r0, r1, [sp]
 802790a:	e7bc      	b.n	8027886 <_dtoa_r+0x56e>
 802790c:	08028680 	.word	0x08028680
 8027910:	08028658 	.word	0x08028658
 8027914:	3ff00000 	.word	0x3ff00000
 8027918:	40240000 	.word	0x40240000
 802791c:	401c0000 	.word	0x401c0000
 8027920:	40140000 	.word	0x40140000
 8027924:	3fe00000 	.word	0x3fe00000
 8027928:	e9dd 6700 	ldrd	r6, r7, [sp]
 802792c:	465d      	mov	r5, fp
 802792e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027932:	4630      	mov	r0, r6
 8027934:	4639      	mov	r1, r7
 8027936:	f7f8 fe71 	bl	802061c <__aeabi_ddiv>
 802793a:	f7f8 fff5 	bl	8020928 <__aeabi_d2iz>
 802793e:	4680      	mov	r8, r0
 8027940:	f7f8 fcd8 	bl	80202f4 <__aeabi_i2d>
 8027944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027948:	f7f8 fd3e 	bl	80203c8 <__aeabi_dmul>
 802794c:	4602      	mov	r2, r0
 802794e:	460b      	mov	r3, r1
 8027950:	4630      	mov	r0, r6
 8027952:	4639      	mov	r1, r7
 8027954:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8027958:	f7f8 fb7e 	bl	8020058 <__aeabi_dsub>
 802795c:	f805 6b01 	strb.w	r6, [r5], #1
 8027960:	eba5 060b 	sub.w	r6, r5, fp
 8027964:	45b1      	cmp	r9, r6
 8027966:	4602      	mov	r2, r0
 8027968:	460b      	mov	r3, r1
 802796a:	d139      	bne.n	80279e0 <_dtoa_r+0x6c8>
 802796c:	f7f8 fb76 	bl	802005c <__adddf3>
 8027970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027974:	4606      	mov	r6, r0
 8027976:	460f      	mov	r7, r1
 8027978:	f7f8 ffb6 	bl	80208e8 <__aeabi_dcmpgt>
 802797c:	b9c8      	cbnz	r0, 80279b2 <_dtoa_r+0x69a>
 802797e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027982:	4630      	mov	r0, r6
 8027984:	4639      	mov	r1, r7
 8027986:	f7f8 ff87 	bl	8020898 <__aeabi_dcmpeq>
 802798a:	b110      	cbz	r0, 8027992 <_dtoa_r+0x67a>
 802798c:	f018 0f01 	tst.w	r8, #1
 8027990:	d10f      	bne.n	80279b2 <_dtoa_r+0x69a>
 8027992:	9904      	ldr	r1, [sp, #16]
 8027994:	4620      	mov	r0, r4
 8027996:	f000 fac1 	bl	8027f1c <_Bfree>
 802799a:	2300      	movs	r3, #0
 802799c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802799e:	702b      	strb	r3, [r5, #0]
 80279a0:	f10a 0301 	add.w	r3, sl, #1
 80279a4:	6013      	str	r3, [r2, #0]
 80279a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80279a8:	2b00      	cmp	r3, #0
 80279aa:	f000 8241 	beq.w	8027e30 <_dtoa_r+0xb18>
 80279ae:	601d      	str	r5, [r3, #0]
 80279b0:	e23e      	b.n	8027e30 <_dtoa_r+0xb18>
 80279b2:	f8cd a020 	str.w	sl, [sp, #32]
 80279b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80279ba:	2a39      	cmp	r2, #57	; 0x39
 80279bc:	f105 33ff 	add.w	r3, r5, #4294967295
 80279c0:	d108      	bne.n	80279d4 <_dtoa_r+0x6bc>
 80279c2:	459b      	cmp	fp, r3
 80279c4:	d10a      	bne.n	80279dc <_dtoa_r+0x6c4>
 80279c6:	9b08      	ldr	r3, [sp, #32]
 80279c8:	3301      	adds	r3, #1
 80279ca:	9308      	str	r3, [sp, #32]
 80279cc:	2330      	movs	r3, #48	; 0x30
 80279ce:	f88b 3000 	strb.w	r3, [fp]
 80279d2:	465b      	mov	r3, fp
 80279d4:	781a      	ldrb	r2, [r3, #0]
 80279d6:	3201      	adds	r2, #1
 80279d8:	701a      	strb	r2, [r3, #0]
 80279da:	e78c      	b.n	80278f6 <_dtoa_r+0x5de>
 80279dc:	461d      	mov	r5, r3
 80279de:	e7ea      	b.n	80279b6 <_dtoa_r+0x69e>
 80279e0:	2200      	movs	r2, #0
 80279e2:	4b9b      	ldr	r3, [pc, #620]	; (8027c50 <_dtoa_r+0x938>)
 80279e4:	f7f8 fcf0 	bl	80203c8 <__aeabi_dmul>
 80279e8:	2200      	movs	r2, #0
 80279ea:	2300      	movs	r3, #0
 80279ec:	4606      	mov	r6, r0
 80279ee:	460f      	mov	r7, r1
 80279f0:	f7f8 ff52 	bl	8020898 <__aeabi_dcmpeq>
 80279f4:	2800      	cmp	r0, #0
 80279f6:	d09a      	beq.n	802792e <_dtoa_r+0x616>
 80279f8:	e7cb      	b.n	8027992 <_dtoa_r+0x67a>
 80279fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80279fc:	2a00      	cmp	r2, #0
 80279fe:	f000 808b 	beq.w	8027b18 <_dtoa_r+0x800>
 8027a02:	9a06      	ldr	r2, [sp, #24]
 8027a04:	2a01      	cmp	r2, #1
 8027a06:	dc6e      	bgt.n	8027ae6 <_dtoa_r+0x7ce>
 8027a08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027a0a:	2a00      	cmp	r2, #0
 8027a0c:	d067      	beq.n	8027ade <_dtoa_r+0x7c6>
 8027a0e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8027a12:	9f07      	ldr	r7, [sp, #28]
 8027a14:	9d05      	ldr	r5, [sp, #20]
 8027a16:	9a05      	ldr	r2, [sp, #20]
 8027a18:	2101      	movs	r1, #1
 8027a1a:	441a      	add	r2, r3
 8027a1c:	4620      	mov	r0, r4
 8027a1e:	9205      	str	r2, [sp, #20]
 8027a20:	4498      	add	r8, r3
 8027a22:	f000 fb1b 	bl	802805c <__i2b>
 8027a26:	4606      	mov	r6, r0
 8027a28:	2d00      	cmp	r5, #0
 8027a2a:	dd0c      	ble.n	8027a46 <_dtoa_r+0x72e>
 8027a2c:	f1b8 0f00 	cmp.w	r8, #0
 8027a30:	dd09      	ble.n	8027a46 <_dtoa_r+0x72e>
 8027a32:	4545      	cmp	r5, r8
 8027a34:	9a05      	ldr	r2, [sp, #20]
 8027a36:	462b      	mov	r3, r5
 8027a38:	bfa8      	it	ge
 8027a3a:	4643      	movge	r3, r8
 8027a3c:	1ad2      	subs	r2, r2, r3
 8027a3e:	9205      	str	r2, [sp, #20]
 8027a40:	1aed      	subs	r5, r5, r3
 8027a42:	eba8 0803 	sub.w	r8, r8, r3
 8027a46:	9b07      	ldr	r3, [sp, #28]
 8027a48:	b1eb      	cbz	r3, 8027a86 <_dtoa_r+0x76e>
 8027a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027a4c:	2b00      	cmp	r3, #0
 8027a4e:	d067      	beq.n	8027b20 <_dtoa_r+0x808>
 8027a50:	b18f      	cbz	r7, 8027a76 <_dtoa_r+0x75e>
 8027a52:	4631      	mov	r1, r6
 8027a54:	463a      	mov	r2, r7
 8027a56:	4620      	mov	r0, r4
 8027a58:	f000 fba0 	bl	802819c <__pow5mult>
 8027a5c:	9a04      	ldr	r2, [sp, #16]
 8027a5e:	4601      	mov	r1, r0
 8027a60:	4606      	mov	r6, r0
 8027a62:	4620      	mov	r0, r4
 8027a64:	f000 fb03 	bl	802806e <__multiply>
 8027a68:	9904      	ldr	r1, [sp, #16]
 8027a6a:	9008      	str	r0, [sp, #32]
 8027a6c:	4620      	mov	r0, r4
 8027a6e:	f000 fa55 	bl	8027f1c <_Bfree>
 8027a72:	9b08      	ldr	r3, [sp, #32]
 8027a74:	9304      	str	r3, [sp, #16]
 8027a76:	9b07      	ldr	r3, [sp, #28]
 8027a78:	1bda      	subs	r2, r3, r7
 8027a7a:	d004      	beq.n	8027a86 <_dtoa_r+0x76e>
 8027a7c:	9904      	ldr	r1, [sp, #16]
 8027a7e:	4620      	mov	r0, r4
 8027a80:	f000 fb8c 	bl	802819c <__pow5mult>
 8027a84:	9004      	str	r0, [sp, #16]
 8027a86:	2101      	movs	r1, #1
 8027a88:	4620      	mov	r0, r4
 8027a8a:	f000 fae7 	bl	802805c <__i2b>
 8027a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027a90:	4607      	mov	r7, r0
 8027a92:	2b00      	cmp	r3, #0
 8027a94:	f000 81d0 	beq.w	8027e38 <_dtoa_r+0xb20>
 8027a98:	461a      	mov	r2, r3
 8027a9a:	4601      	mov	r1, r0
 8027a9c:	4620      	mov	r0, r4
 8027a9e:	f000 fb7d 	bl	802819c <__pow5mult>
 8027aa2:	9b06      	ldr	r3, [sp, #24]
 8027aa4:	2b01      	cmp	r3, #1
 8027aa6:	4607      	mov	r7, r0
 8027aa8:	dc40      	bgt.n	8027b2c <_dtoa_r+0x814>
 8027aaa:	9b00      	ldr	r3, [sp, #0]
 8027aac:	2b00      	cmp	r3, #0
 8027aae:	d139      	bne.n	8027b24 <_dtoa_r+0x80c>
 8027ab0:	9b01      	ldr	r3, [sp, #4]
 8027ab2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8027ab6:	2b00      	cmp	r3, #0
 8027ab8:	d136      	bne.n	8027b28 <_dtoa_r+0x810>
 8027aba:	9b01      	ldr	r3, [sp, #4]
 8027abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027ac0:	0d1b      	lsrs	r3, r3, #20
 8027ac2:	051b      	lsls	r3, r3, #20
 8027ac4:	b12b      	cbz	r3, 8027ad2 <_dtoa_r+0x7ba>
 8027ac6:	9b05      	ldr	r3, [sp, #20]
 8027ac8:	3301      	adds	r3, #1
 8027aca:	9305      	str	r3, [sp, #20]
 8027acc:	f108 0801 	add.w	r8, r8, #1
 8027ad0:	2301      	movs	r3, #1
 8027ad2:	9307      	str	r3, [sp, #28]
 8027ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027ad6:	2b00      	cmp	r3, #0
 8027ad8:	d12a      	bne.n	8027b30 <_dtoa_r+0x818>
 8027ada:	2001      	movs	r0, #1
 8027adc:	e030      	b.n	8027b40 <_dtoa_r+0x828>
 8027ade:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027ae0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8027ae4:	e795      	b.n	8027a12 <_dtoa_r+0x6fa>
 8027ae6:	9b07      	ldr	r3, [sp, #28]
 8027ae8:	f109 37ff 	add.w	r7, r9, #4294967295
 8027aec:	42bb      	cmp	r3, r7
 8027aee:	bfbf      	itttt	lt
 8027af0:	9b07      	ldrlt	r3, [sp, #28]
 8027af2:	9707      	strlt	r7, [sp, #28]
 8027af4:	1afa      	sublt	r2, r7, r3
 8027af6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8027af8:	bfbb      	ittet	lt
 8027afa:	189b      	addlt	r3, r3, r2
 8027afc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8027afe:	1bdf      	subge	r7, r3, r7
 8027b00:	2700      	movlt	r7, #0
 8027b02:	f1b9 0f00 	cmp.w	r9, #0
 8027b06:	bfb5      	itete	lt
 8027b08:	9b05      	ldrlt	r3, [sp, #20]
 8027b0a:	9d05      	ldrge	r5, [sp, #20]
 8027b0c:	eba3 0509 	sublt.w	r5, r3, r9
 8027b10:	464b      	movge	r3, r9
 8027b12:	bfb8      	it	lt
 8027b14:	2300      	movlt	r3, #0
 8027b16:	e77e      	b.n	8027a16 <_dtoa_r+0x6fe>
 8027b18:	9f07      	ldr	r7, [sp, #28]
 8027b1a:	9d05      	ldr	r5, [sp, #20]
 8027b1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8027b1e:	e783      	b.n	8027a28 <_dtoa_r+0x710>
 8027b20:	9a07      	ldr	r2, [sp, #28]
 8027b22:	e7ab      	b.n	8027a7c <_dtoa_r+0x764>
 8027b24:	2300      	movs	r3, #0
 8027b26:	e7d4      	b.n	8027ad2 <_dtoa_r+0x7ba>
 8027b28:	9b00      	ldr	r3, [sp, #0]
 8027b2a:	e7d2      	b.n	8027ad2 <_dtoa_r+0x7ba>
 8027b2c:	2300      	movs	r3, #0
 8027b2e:	9307      	str	r3, [sp, #28]
 8027b30:	693b      	ldr	r3, [r7, #16]
 8027b32:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8027b36:	6918      	ldr	r0, [r3, #16]
 8027b38:	f000 fa42 	bl	8027fc0 <__hi0bits>
 8027b3c:	f1c0 0020 	rsb	r0, r0, #32
 8027b40:	4440      	add	r0, r8
 8027b42:	f010 001f 	ands.w	r0, r0, #31
 8027b46:	d047      	beq.n	8027bd8 <_dtoa_r+0x8c0>
 8027b48:	f1c0 0320 	rsb	r3, r0, #32
 8027b4c:	2b04      	cmp	r3, #4
 8027b4e:	dd3b      	ble.n	8027bc8 <_dtoa_r+0x8b0>
 8027b50:	9b05      	ldr	r3, [sp, #20]
 8027b52:	f1c0 001c 	rsb	r0, r0, #28
 8027b56:	4403      	add	r3, r0
 8027b58:	9305      	str	r3, [sp, #20]
 8027b5a:	4405      	add	r5, r0
 8027b5c:	4480      	add	r8, r0
 8027b5e:	9b05      	ldr	r3, [sp, #20]
 8027b60:	2b00      	cmp	r3, #0
 8027b62:	dd05      	ble.n	8027b70 <_dtoa_r+0x858>
 8027b64:	461a      	mov	r2, r3
 8027b66:	9904      	ldr	r1, [sp, #16]
 8027b68:	4620      	mov	r0, r4
 8027b6a:	f000 fb65 	bl	8028238 <__lshift>
 8027b6e:	9004      	str	r0, [sp, #16]
 8027b70:	f1b8 0f00 	cmp.w	r8, #0
 8027b74:	dd05      	ble.n	8027b82 <_dtoa_r+0x86a>
 8027b76:	4639      	mov	r1, r7
 8027b78:	4642      	mov	r2, r8
 8027b7a:	4620      	mov	r0, r4
 8027b7c:	f000 fb5c 	bl	8028238 <__lshift>
 8027b80:	4607      	mov	r7, r0
 8027b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027b84:	b353      	cbz	r3, 8027bdc <_dtoa_r+0x8c4>
 8027b86:	4639      	mov	r1, r7
 8027b88:	9804      	ldr	r0, [sp, #16]
 8027b8a:	f000 fba9 	bl	80282e0 <__mcmp>
 8027b8e:	2800      	cmp	r0, #0
 8027b90:	da24      	bge.n	8027bdc <_dtoa_r+0x8c4>
 8027b92:	2300      	movs	r3, #0
 8027b94:	220a      	movs	r2, #10
 8027b96:	9904      	ldr	r1, [sp, #16]
 8027b98:	4620      	mov	r0, r4
 8027b9a:	f000 f9d6 	bl	8027f4a <__multadd>
 8027b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027ba0:	9004      	str	r0, [sp, #16]
 8027ba2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027ba6:	2b00      	cmp	r3, #0
 8027ba8:	f000 814d 	beq.w	8027e46 <_dtoa_r+0xb2e>
 8027bac:	2300      	movs	r3, #0
 8027bae:	4631      	mov	r1, r6
 8027bb0:	220a      	movs	r2, #10
 8027bb2:	4620      	mov	r0, r4
 8027bb4:	f000 f9c9 	bl	8027f4a <__multadd>
 8027bb8:	9b02      	ldr	r3, [sp, #8]
 8027bba:	2b00      	cmp	r3, #0
 8027bbc:	4606      	mov	r6, r0
 8027bbe:	dc4f      	bgt.n	8027c60 <_dtoa_r+0x948>
 8027bc0:	9b06      	ldr	r3, [sp, #24]
 8027bc2:	2b02      	cmp	r3, #2
 8027bc4:	dd4c      	ble.n	8027c60 <_dtoa_r+0x948>
 8027bc6:	e011      	b.n	8027bec <_dtoa_r+0x8d4>
 8027bc8:	d0c9      	beq.n	8027b5e <_dtoa_r+0x846>
 8027bca:	9a05      	ldr	r2, [sp, #20]
 8027bcc:	331c      	adds	r3, #28
 8027bce:	441a      	add	r2, r3
 8027bd0:	9205      	str	r2, [sp, #20]
 8027bd2:	441d      	add	r5, r3
 8027bd4:	4498      	add	r8, r3
 8027bd6:	e7c2      	b.n	8027b5e <_dtoa_r+0x846>
 8027bd8:	4603      	mov	r3, r0
 8027bda:	e7f6      	b.n	8027bca <_dtoa_r+0x8b2>
 8027bdc:	f1b9 0f00 	cmp.w	r9, #0
 8027be0:	dc38      	bgt.n	8027c54 <_dtoa_r+0x93c>
 8027be2:	9b06      	ldr	r3, [sp, #24]
 8027be4:	2b02      	cmp	r3, #2
 8027be6:	dd35      	ble.n	8027c54 <_dtoa_r+0x93c>
 8027be8:	f8cd 9008 	str.w	r9, [sp, #8]
 8027bec:	9b02      	ldr	r3, [sp, #8]
 8027bee:	b963      	cbnz	r3, 8027c0a <_dtoa_r+0x8f2>
 8027bf0:	4639      	mov	r1, r7
 8027bf2:	2205      	movs	r2, #5
 8027bf4:	4620      	mov	r0, r4
 8027bf6:	f000 f9a8 	bl	8027f4a <__multadd>
 8027bfa:	4601      	mov	r1, r0
 8027bfc:	4607      	mov	r7, r0
 8027bfe:	9804      	ldr	r0, [sp, #16]
 8027c00:	f000 fb6e 	bl	80282e0 <__mcmp>
 8027c04:	2800      	cmp	r0, #0
 8027c06:	f73f adcc 	bgt.w	80277a2 <_dtoa_r+0x48a>
 8027c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027c0c:	465d      	mov	r5, fp
 8027c0e:	ea6f 0a03 	mvn.w	sl, r3
 8027c12:	f04f 0900 	mov.w	r9, #0
 8027c16:	4639      	mov	r1, r7
 8027c18:	4620      	mov	r0, r4
 8027c1a:	f000 f97f 	bl	8027f1c <_Bfree>
 8027c1e:	2e00      	cmp	r6, #0
 8027c20:	f43f aeb7 	beq.w	8027992 <_dtoa_r+0x67a>
 8027c24:	f1b9 0f00 	cmp.w	r9, #0
 8027c28:	d005      	beq.n	8027c36 <_dtoa_r+0x91e>
 8027c2a:	45b1      	cmp	r9, r6
 8027c2c:	d003      	beq.n	8027c36 <_dtoa_r+0x91e>
 8027c2e:	4649      	mov	r1, r9
 8027c30:	4620      	mov	r0, r4
 8027c32:	f000 f973 	bl	8027f1c <_Bfree>
 8027c36:	4631      	mov	r1, r6
 8027c38:	4620      	mov	r0, r4
 8027c3a:	f000 f96f 	bl	8027f1c <_Bfree>
 8027c3e:	e6a8      	b.n	8027992 <_dtoa_r+0x67a>
 8027c40:	2700      	movs	r7, #0
 8027c42:	463e      	mov	r6, r7
 8027c44:	e7e1      	b.n	8027c0a <_dtoa_r+0x8f2>
 8027c46:	f8dd a020 	ldr.w	sl, [sp, #32]
 8027c4a:	463e      	mov	r6, r7
 8027c4c:	e5a9      	b.n	80277a2 <_dtoa_r+0x48a>
 8027c4e:	bf00      	nop
 8027c50:	40240000 	.word	0x40240000
 8027c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027c56:	f8cd 9008 	str.w	r9, [sp, #8]
 8027c5a:	2b00      	cmp	r3, #0
 8027c5c:	f000 80fa 	beq.w	8027e54 <_dtoa_r+0xb3c>
 8027c60:	2d00      	cmp	r5, #0
 8027c62:	dd05      	ble.n	8027c70 <_dtoa_r+0x958>
 8027c64:	4631      	mov	r1, r6
 8027c66:	462a      	mov	r2, r5
 8027c68:	4620      	mov	r0, r4
 8027c6a:	f000 fae5 	bl	8028238 <__lshift>
 8027c6e:	4606      	mov	r6, r0
 8027c70:	9b07      	ldr	r3, [sp, #28]
 8027c72:	2b00      	cmp	r3, #0
 8027c74:	d04c      	beq.n	8027d10 <_dtoa_r+0x9f8>
 8027c76:	6871      	ldr	r1, [r6, #4]
 8027c78:	4620      	mov	r0, r4
 8027c7a:	f000 f91b 	bl	8027eb4 <_Balloc>
 8027c7e:	6932      	ldr	r2, [r6, #16]
 8027c80:	3202      	adds	r2, #2
 8027c82:	4605      	mov	r5, r0
 8027c84:	0092      	lsls	r2, r2, #2
 8027c86:	f106 010c 	add.w	r1, r6, #12
 8027c8a:	300c      	adds	r0, #12
 8027c8c:	f7fe ff5a 	bl	8026b44 <memcpy>
 8027c90:	2201      	movs	r2, #1
 8027c92:	4629      	mov	r1, r5
 8027c94:	4620      	mov	r0, r4
 8027c96:	f000 facf 	bl	8028238 <__lshift>
 8027c9a:	9b00      	ldr	r3, [sp, #0]
 8027c9c:	f8cd b014 	str.w	fp, [sp, #20]
 8027ca0:	f003 0301 	and.w	r3, r3, #1
 8027ca4:	46b1      	mov	r9, r6
 8027ca6:	9307      	str	r3, [sp, #28]
 8027ca8:	4606      	mov	r6, r0
 8027caa:	4639      	mov	r1, r7
 8027cac:	9804      	ldr	r0, [sp, #16]
 8027cae:	f7ff faa6 	bl	80271fe <quorem>
 8027cb2:	4649      	mov	r1, r9
 8027cb4:	4605      	mov	r5, r0
 8027cb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8027cba:	9804      	ldr	r0, [sp, #16]
 8027cbc:	f000 fb10 	bl	80282e0 <__mcmp>
 8027cc0:	4632      	mov	r2, r6
 8027cc2:	9000      	str	r0, [sp, #0]
 8027cc4:	4639      	mov	r1, r7
 8027cc6:	4620      	mov	r0, r4
 8027cc8:	f000 fb24 	bl	8028314 <__mdiff>
 8027ccc:	68c3      	ldr	r3, [r0, #12]
 8027cce:	4602      	mov	r2, r0
 8027cd0:	bb03      	cbnz	r3, 8027d14 <_dtoa_r+0x9fc>
 8027cd2:	4601      	mov	r1, r0
 8027cd4:	9008      	str	r0, [sp, #32]
 8027cd6:	9804      	ldr	r0, [sp, #16]
 8027cd8:	f000 fb02 	bl	80282e0 <__mcmp>
 8027cdc:	9a08      	ldr	r2, [sp, #32]
 8027cde:	4603      	mov	r3, r0
 8027ce0:	4611      	mov	r1, r2
 8027ce2:	4620      	mov	r0, r4
 8027ce4:	9308      	str	r3, [sp, #32]
 8027ce6:	f000 f919 	bl	8027f1c <_Bfree>
 8027cea:	9b08      	ldr	r3, [sp, #32]
 8027cec:	b9a3      	cbnz	r3, 8027d18 <_dtoa_r+0xa00>
 8027cee:	9a06      	ldr	r2, [sp, #24]
 8027cf0:	b992      	cbnz	r2, 8027d18 <_dtoa_r+0xa00>
 8027cf2:	9a07      	ldr	r2, [sp, #28]
 8027cf4:	b982      	cbnz	r2, 8027d18 <_dtoa_r+0xa00>
 8027cf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8027cfa:	d029      	beq.n	8027d50 <_dtoa_r+0xa38>
 8027cfc:	9b00      	ldr	r3, [sp, #0]
 8027cfe:	2b00      	cmp	r3, #0
 8027d00:	dd01      	ble.n	8027d06 <_dtoa_r+0x9ee>
 8027d02:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8027d06:	9b05      	ldr	r3, [sp, #20]
 8027d08:	1c5d      	adds	r5, r3, #1
 8027d0a:	f883 8000 	strb.w	r8, [r3]
 8027d0e:	e782      	b.n	8027c16 <_dtoa_r+0x8fe>
 8027d10:	4630      	mov	r0, r6
 8027d12:	e7c2      	b.n	8027c9a <_dtoa_r+0x982>
 8027d14:	2301      	movs	r3, #1
 8027d16:	e7e3      	b.n	8027ce0 <_dtoa_r+0x9c8>
 8027d18:	9a00      	ldr	r2, [sp, #0]
 8027d1a:	2a00      	cmp	r2, #0
 8027d1c:	db04      	blt.n	8027d28 <_dtoa_r+0xa10>
 8027d1e:	d125      	bne.n	8027d6c <_dtoa_r+0xa54>
 8027d20:	9a06      	ldr	r2, [sp, #24]
 8027d22:	bb1a      	cbnz	r2, 8027d6c <_dtoa_r+0xa54>
 8027d24:	9a07      	ldr	r2, [sp, #28]
 8027d26:	bb0a      	cbnz	r2, 8027d6c <_dtoa_r+0xa54>
 8027d28:	2b00      	cmp	r3, #0
 8027d2a:	ddec      	ble.n	8027d06 <_dtoa_r+0x9ee>
 8027d2c:	2201      	movs	r2, #1
 8027d2e:	9904      	ldr	r1, [sp, #16]
 8027d30:	4620      	mov	r0, r4
 8027d32:	f000 fa81 	bl	8028238 <__lshift>
 8027d36:	4639      	mov	r1, r7
 8027d38:	9004      	str	r0, [sp, #16]
 8027d3a:	f000 fad1 	bl	80282e0 <__mcmp>
 8027d3e:	2800      	cmp	r0, #0
 8027d40:	dc03      	bgt.n	8027d4a <_dtoa_r+0xa32>
 8027d42:	d1e0      	bne.n	8027d06 <_dtoa_r+0x9ee>
 8027d44:	f018 0f01 	tst.w	r8, #1
 8027d48:	d0dd      	beq.n	8027d06 <_dtoa_r+0x9ee>
 8027d4a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8027d4e:	d1d8      	bne.n	8027d02 <_dtoa_r+0x9ea>
 8027d50:	9b05      	ldr	r3, [sp, #20]
 8027d52:	9a05      	ldr	r2, [sp, #20]
 8027d54:	1c5d      	adds	r5, r3, #1
 8027d56:	2339      	movs	r3, #57	; 0x39
 8027d58:	7013      	strb	r3, [r2, #0]
 8027d5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8027d5e:	2b39      	cmp	r3, #57	; 0x39
 8027d60:	f105 32ff 	add.w	r2, r5, #4294967295
 8027d64:	d04f      	beq.n	8027e06 <_dtoa_r+0xaee>
 8027d66:	3301      	adds	r3, #1
 8027d68:	7013      	strb	r3, [r2, #0]
 8027d6a:	e754      	b.n	8027c16 <_dtoa_r+0x8fe>
 8027d6c:	9a05      	ldr	r2, [sp, #20]
 8027d6e:	2b00      	cmp	r3, #0
 8027d70:	f102 0501 	add.w	r5, r2, #1
 8027d74:	dd06      	ble.n	8027d84 <_dtoa_r+0xa6c>
 8027d76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8027d7a:	d0e9      	beq.n	8027d50 <_dtoa_r+0xa38>
 8027d7c:	f108 0801 	add.w	r8, r8, #1
 8027d80:	9b05      	ldr	r3, [sp, #20]
 8027d82:	e7c2      	b.n	8027d0a <_dtoa_r+0x9f2>
 8027d84:	9a02      	ldr	r2, [sp, #8]
 8027d86:	f805 8c01 	strb.w	r8, [r5, #-1]
 8027d8a:	eba5 030b 	sub.w	r3, r5, fp
 8027d8e:	4293      	cmp	r3, r2
 8027d90:	d021      	beq.n	8027dd6 <_dtoa_r+0xabe>
 8027d92:	2300      	movs	r3, #0
 8027d94:	220a      	movs	r2, #10
 8027d96:	9904      	ldr	r1, [sp, #16]
 8027d98:	4620      	mov	r0, r4
 8027d9a:	f000 f8d6 	bl	8027f4a <__multadd>
 8027d9e:	45b1      	cmp	r9, r6
 8027da0:	9004      	str	r0, [sp, #16]
 8027da2:	f04f 0300 	mov.w	r3, #0
 8027da6:	f04f 020a 	mov.w	r2, #10
 8027daa:	4649      	mov	r1, r9
 8027dac:	4620      	mov	r0, r4
 8027dae:	d105      	bne.n	8027dbc <_dtoa_r+0xaa4>
 8027db0:	f000 f8cb 	bl	8027f4a <__multadd>
 8027db4:	4681      	mov	r9, r0
 8027db6:	4606      	mov	r6, r0
 8027db8:	9505      	str	r5, [sp, #20]
 8027dba:	e776      	b.n	8027caa <_dtoa_r+0x992>
 8027dbc:	f000 f8c5 	bl	8027f4a <__multadd>
 8027dc0:	4631      	mov	r1, r6
 8027dc2:	4681      	mov	r9, r0
 8027dc4:	2300      	movs	r3, #0
 8027dc6:	220a      	movs	r2, #10
 8027dc8:	4620      	mov	r0, r4
 8027dca:	f000 f8be 	bl	8027f4a <__multadd>
 8027dce:	4606      	mov	r6, r0
 8027dd0:	e7f2      	b.n	8027db8 <_dtoa_r+0xaa0>
 8027dd2:	f04f 0900 	mov.w	r9, #0
 8027dd6:	2201      	movs	r2, #1
 8027dd8:	9904      	ldr	r1, [sp, #16]
 8027dda:	4620      	mov	r0, r4
 8027ddc:	f000 fa2c 	bl	8028238 <__lshift>
 8027de0:	4639      	mov	r1, r7
 8027de2:	9004      	str	r0, [sp, #16]
 8027de4:	f000 fa7c 	bl	80282e0 <__mcmp>
 8027de8:	2800      	cmp	r0, #0
 8027dea:	dcb6      	bgt.n	8027d5a <_dtoa_r+0xa42>
 8027dec:	d102      	bne.n	8027df4 <_dtoa_r+0xadc>
 8027dee:	f018 0f01 	tst.w	r8, #1
 8027df2:	d1b2      	bne.n	8027d5a <_dtoa_r+0xa42>
 8027df4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8027df8:	2b30      	cmp	r3, #48	; 0x30
 8027dfa:	f105 32ff 	add.w	r2, r5, #4294967295
 8027dfe:	f47f af0a 	bne.w	8027c16 <_dtoa_r+0x8fe>
 8027e02:	4615      	mov	r5, r2
 8027e04:	e7f6      	b.n	8027df4 <_dtoa_r+0xadc>
 8027e06:	4593      	cmp	fp, r2
 8027e08:	d105      	bne.n	8027e16 <_dtoa_r+0xafe>
 8027e0a:	2331      	movs	r3, #49	; 0x31
 8027e0c:	f10a 0a01 	add.w	sl, sl, #1
 8027e10:	f88b 3000 	strb.w	r3, [fp]
 8027e14:	e6ff      	b.n	8027c16 <_dtoa_r+0x8fe>
 8027e16:	4615      	mov	r5, r2
 8027e18:	e79f      	b.n	8027d5a <_dtoa_r+0xa42>
 8027e1a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8027e80 <_dtoa_r+0xb68>
 8027e1e:	e007      	b.n	8027e30 <_dtoa_r+0xb18>
 8027e20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027e22:	f8df b060 	ldr.w	fp, [pc, #96]	; 8027e84 <_dtoa_r+0xb6c>
 8027e26:	b11b      	cbz	r3, 8027e30 <_dtoa_r+0xb18>
 8027e28:	f10b 0308 	add.w	r3, fp, #8
 8027e2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8027e2e:	6013      	str	r3, [r2, #0]
 8027e30:	4658      	mov	r0, fp
 8027e32:	b017      	add	sp, #92	; 0x5c
 8027e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027e38:	9b06      	ldr	r3, [sp, #24]
 8027e3a:	2b01      	cmp	r3, #1
 8027e3c:	f77f ae35 	ble.w	8027aaa <_dtoa_r+0x792>
 8027e40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027e42:	9307      	str	r3, [sp, #28]
 8027e44:	e649      	b.n	8027ada <_dtoa_r+0x7c2>
 8027e46:	9b02      	ldr	r3, [sp, #8]
 8027e48:	2b00      	cmp	r3, #0
 8027e4a:	dc03      	bgt.n	8027e54 <_dtoa_r+0xb3c>
 8027e4c:	9b06      	ldr	r3, [sp, #24]
 8027e4e:	2b02      	cmp	r3, #2
 8027e50:	f73f aecc 	bgt.w	8027bec <_dtoa_r+0x8d4>
 8027e54:	465d      	mov	r5, fp
 8027e56:	4639      	mov	r1, r7
 8027e58:	9804      	ldr	r0, [sp, #16]
 8027e5a:	f7ff f9d0 	bl	80271fe <quorem>
 8027e5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8027e62:	f805 8b01 	strb.w	r8, [r5], #1
 8027e66:	9a02      	ldr	r2, [sp, #8]
 8027e68:	eba5 030b 	sub.w	r3, r5, fp
 8027e6c:	429a      	cmp	r2, r3
 8027e6e:	ddb0      	ble.n	8027dd2 <_dtoa_r+0xaba>
 8027e70:	2300      	movs	r3, #0
 8027e72:	220a      	movs	r2, #10
 8027e74:	9904      	ldr	r1, [sp, #16]
 8027e76:	4620      	mov	r0, r4
 8027e78:	f000 f867 	bl	8027f4a <__multadd>
 8027e7c:	9004      	str	r0, [sp, #16]
 8027e7e:	e7ea      	b.n	8027e56 <_dtoa_r+0xb3e>
 8027e80:	080285e8 	.word	0x080285e8
 8027e84:	080285ea 	.word	0x080285ea

08027e88 <_localeconv_r>:
 8027e88:	4b04      	ldr	r3, [pc, #16]	; (8027e9c <_localeconv_r+0x14>)
 8027e8a:	681b      	ldr	r3, [r3, #0]
 8027e8c:	6a18      	ldr	r0, [r3, #32]
 8027e8e:	4b04      	ldr	r3, [pc, #16]	; (8027ea0 <_localeconv_r+0x18>)
 8027e90:	2800      	cmp	r0, #0
 8027e92:	bf08      	it	eq
 8027e94:	4618      	moveq	r0, r3
 8027e96:	30f0      	adds	r0, #240	; 0xf0
 8027e98:	4770      	bx	lr
 8027e9a:	bf00      	nop
 8027e9c:	2000000c 	.word	0x2000000c
 8027ea0:	20000070 	.word	0x20000070

08027ea4 <malloc>:
 8027ea4:	4b02      	ldr	r3, [pc, #8]	; (8027eb0 <malloc+0xc>)
 8027ea6:	4601      	mov	r1, r0
 8027ea8:	6818      	ldr	r0, [r3, #0]
 8027eaa:	f000 baed 	b.w	8028488 <_malloc_r>
 8027eae:	bf00      	nop
 8027eb0:	2000000c 	.word	0x2000000c

08027eb4 <_Balloc>:
 8027eb4:	b570      	push	{r4, r5, r6, lr}
 8027eb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8027eb8:	4604      	mov	r4, r0
 8027eba:	460e      	mov	r6, r1
 8027ebc:	b93d      	cbnz	r5, 8027ece <_Balloc+0x1a>
 8027ebe:	2010      	movs	r0, #16
 8027ec0:	f7ff fff0 	bl	8027ea4 <malloc>
 8027ec4:	6260      	str	r0, [r4, #36]	; 0x24
 8027ec6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8027eca:	6005      	str	r5, [r0, #0]
 8027ecc:	60c5      	str	r5, [r0, #12]
 8027ece:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8027ed0:	68eb      	ldr	r3, [r5, #12]
 8027ed2:	b183      	cbz	r3, 8027ef6 <_Balloc+0x42>
 8027ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027ed6:	68db      	ldr	r3, [r3, #12]
 8027ed8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8027edc:	b9b8      	cbnz	r0, 8027f0e <_Balloc+0x5a>
 8027ede:	2101      	movs	r1, #1
 8027ee0:	fa01 f506 	lsl.w	r5, r1, r6
 8027ee4:	1d6a      	adds	r2, r5, #5
 8027ee6:	0092      	lsls	r2, r2, #2
 8027ee8:	4620      	mov	r0, r4
 8027eea:	f000 fabf 	bl	802846c <_calloc_r>
 8027eee:	b160      	cbz	r0, 8027f0a <_Balloc+0x56>
 8027ef0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8027ef4:	e00e      	b.n	8027f14 <_Balloc+0x60>
 8027ef6:	2221      	movs	r2, #33	; 0x21
 8027ef8:	2104      	movs	r1, #4
 8027efa:	4620      	mov	r0, r4
 8027efc:	f000 fab6 	bl	802846c <_calloc_r>
 8027f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027f02:	60e8      	str	r0, [r5, #12]
 8027f04:	68db      	ldr	r3, [r3, #12]
 8027f06:	2b00      	cmp	r3, #0
 8027f08:	d1e4      	bne.n	8027ed4 <_Balloc+0x20>
 8027f0a:	2000      	movs	r0, #0
 8027f0c:	bd70      	pop	{r4, r5, r6, pc}
 8027f0e:	6802      	ldr	r2, [r0, #0]
 8027f10:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8027f14:	2300      	movs	r3, #0
 8027f16:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027f1a:	e7f7      	b.n	8027f0c <_Balloc+0x58>

08027f1c <_Bfree>:
 8027f1c:	b570      	push	{r4, r5, r6, lr}
 8027f1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8027f20:	4606      	mov	r6, r0
 8027f22:	460d      	mov	r5, r1
 8027f24:	b93c      	cbnz	r4, 8027f36 <_Bfree+0x1a>
 8027f26:	2010      	movs	r0, #16
 8027f28:	f7ff ffbc 	bl	8027ea4 <malloc>
 8027f2c:	6270      	str	r0, [r6, #36]	; 0x24
 8027f2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8027f32:	6004      	str	r4, [r0, #0]
 8027f34:	60c4      	str	r4, [r0, #12]
 8027f36:	b13d      	cbz	r5, 8027f48 <_Bfree+0x2c>
 8027f38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8027f3a:	686a      	ldr	r2, [r5, #4]
 8027f3c:	68db      	ldr	r3, [r3, #12]
 8027f3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8027f42:	6029      	str	r1, [r5, #0]
 8027f44:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8027f48:	bd70      	pop	{r4, r5, r6, pc}

08027f4a <__multadd>:
 8027f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027f4e:	690d      	ldr	r5, [r1, #16]
 8027f50:	461f      	mov	r7, r3
 8027f52:	4606      	mov	r6, r0
 8027f54:	460c      	mov	r4, r1
 8027f56:	f101 0c14 	add.w	ip, r1, #20
 8027f5a:	2300      	movs	r3, #0
 8027f5c:	f8dc 0000 	ldr.w	r0, [ip]
 8027f60:	b281      	uxth	r1, r0
 8027f62:	fb02 7101 	mla	r1, r2, r1, r7
 8027f66:	0c0f      	lsrs	r7, r1, #16
 8027f68:	0c00      	lsrs	r0, r0, #16
 8027f6a:	fb02 7000 	mla	r0, r2, r0, r7
 8027f6e:	b289      	uxth	r1, r1
 8027f70:	3301      	adds	r3, #1
 8027f72:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8027f76:	429d      	cmp	r5, r3
 8027f78:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8027f7c:	f84c 1b04 	str.w	r1, [ip], #4
 8027f80:	dcec      	bgt.n	8027f5c <__multadd+0x12>
 8027f82:	b1d7      	cbz	r7, 8027fba <__multadd+0x70>
 8027f84:	68a3      	ldr	r3, [r4, #8]
 8027f86:	42ab      	cmp	r3, r5
 8027f88:	dc12      	bgt.n	8027fb0 <__multadd+0x66>
 8027f8a:	6861      	ldr	r1, [r4, #4]
 8027f8c:	4630      	mov	r0, r6
 8027f8e:	3101      	adds	r1, #1
 8027f90:	f7ff ff90 	bl	8027eb4 <_Balloc>
 8027f94:	6922      	ldr	r2, [r4, #16]
 8027f96:	3202      	adds	r2, #2
 8027f98:	f104 010c 	add.w	r1, r4, #12
 8027f9c:	4680      	mov	r8, r0
 8027f9e:	0092      	lsls	r2, r2, #2
 8027fa0:	300c      	adds	r0, #12
 8027fa2:	f7fe fdcf 	bl	8026b44 <memcpy>
 8027fa6:	4621      	mov	r1, r4
 8027fa8:	4630      	mov	r0, r6
 8027faa:	f7ff ffb7 	bl	8027f1c <_Bfree>
 8027fae:	4644      	mov	r4, r8
 8027fb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8027fb4:	3501      	adds	r5, #1
 8027fb6:	615f      	str	r7, [r3, #20]
 8027fb8:	6125      	str	r5, [r4, #16]
 8027fba:	4620      	mov	r0, r4
 8027fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08027fc0 <__hi0bits>:
 8027fc0:	0c02      	lsrs	r2, r0, #16
 8027fc2:	0412      	lsls	r2, r2, #16
 8027fc4:	4603      	mov	r3, r0
 8027fc6:	b9b2      	cbnz	r2, 8027ff6 <__hi0bits+0x36>
 8027fc8:	0403      	lsls	r3, r0, #16
 8027fca:	2010      	movs	r0, #16
 8027fcc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8027fd0:	bf04      	itt	eq
 8027fd2:	021b      	lsleq	r3, r3, #8
 8027fd4:	3008      	addeq	r0, #8
 8027fd6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8027fda:	bf04      	itt	eq
 8027fdc:	011b      	lsleq	r3, r3, #4
 8027fde:	3004      	addeq	r0, #4
 8027fe0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8027fe4:	bf04      	itt	eq
 8027fe6:	009b      	lsleq	r3, r3, #2
 8027fe8:	3002      	addeq	r0, #2
 8027fea:	2b00      	cmp	r3, #0
 8027fec:	db06      	blt.n	8027ffc <__hi0bits+0x3c>
 8027fee:	005b      	lsls	r3, r3, #1
 8027ff0:	d503      	bpl.n	8027ffa <__hi0bits+0x3a>
 8027ff2:	3001      	adds	r0, #1
 8027ff4:	4770      	bx	lr
 8027ff6:	2000      	movs	r0, #0
 8027ff8:	e7e8      	b.n	8027fcc <__hi0bits+0xc>
 8027ffa:	2020      	movs	r0, #32
 8027ffc:	4770      	bx	lr

08027ffe <__lo0bits>:
 8027ffe:	6803      	ldr	r3, [r0, #0]
 8028000:	f013 0207 	ands.w	r2, r3, #7
 8028004:	4601      	mov	r1, r0
 8028006:	d00b      	beq.n	8028020 <__lo0bits+0x22>
 8028008:	07da      	lsls	r2, r3, #31
 802800a:	d423      	bmi.n	8028054 <__lo0bits+0x56>
 802800c:	0798      	lsls	r0, r3, #30
 802800e:	bf49      	itett	mi
 8028010:	085b      	lsrmi	r3, r3, #1
 8028012:	089b      	lsrpl	r3, r3, #2
 8028014:	2001      	movmi	r0, #1
 8028016:	600b      	strmi	r3, [r1, #0]
 8028018:	bf5c      	itt	pl
 802801a:	600b      	strpl	r3, [r1, #0]
 802801c:	2002      	movpl	r0, #2
 802801e:	4770      	bx	lr
 8028020:	b298      	uxth	r0, r3
 8028022:	b9a8      	cbnz	r0, 8028050 <__lo0bits+0x52>
 8028024:	0c1b      	lsrs	r3, r3, #16
 8028026:	2010      	movs	r0, #16
 8028028:	f013 0fff 	tst.w	r3, #255	; 0xff
 802802c:	bf04      	itt	eq
 802802e:	0a1b      	lsreq	r3, r3, #8
 8028030:	3008      	addeq	r0, #8
 8028032:	071a      	lsls	r2, r3, #28
 8028034:	bf04      	itt	eq
 8028036:	091b      	lsreq	r3, r3, #4
 8028038:	3004      	addeq	r0, #4
 802803a:	079a      	lsls	r2, r3, #30
 802803c:	bf04      	itt	eq
 802803e:	089b      	lsreq	r3, r3, #2
 8028040:	3002      	addeq	r0, #2
 8028042:	07da      	lsls	r2, r3, #31
 8028044:	d402      	bmi.n	802804c <__lo0bits+0x4e>
 8028046:	085b      	lsrs	r3, r3, #1
 8028048:	d006      	beq.n	8028058 <__lo0bits+0x5a>
 802804a:	3001      	adds	r0, #1
 802804c:	600b      	str	r3, [r1, #0]
 802804e:	4770      	bx	lr
 8028050:	4610      	mov	r0, r2
 8028052:	e7e9      	b.n	8028028 <__lo0bits+0x2a>
 8028054:	2000      	movs	r0, #0
 8028056:	4770      	bx	lr
 8028058:	2020      	movs	r0, #32
 802805a:	4770      	bx	lr

0802805c <__i2b>:
 802805c:	b510      	push	{r4, lr}
 802805e:	460c      	mov	r4, r1
 8028060:	2101      	movs	r1, #1
 8028062:	f7ff ff27 	bl	8027eb4 <_Balloc>
 8028066:	2201      	movs	r2, #1
 8028068:	6144      	str	r4, [r0, #20]
 802806a:	6102      	str	r2, [r0, #16]
 802806c:	bd10      	pop	{r4, pc}

0802806e <__multiply>:
 802806e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028072:	4614      	mov	r4, r2
 8028074:	690a      	ldr	r2, [r1, #16]
 8028076:	6923      	ldr	r3, [r4, #16]
 8028078:	429a      	cmp	r2, r3
 802807a:	bfb8      	it	lt
 802807c:	460b      	movlt	r3, r1
 802807e:	4688      	mov	r8, r1
 8028080:	bfbc      	itt	lt
 8028082:	46a0      	movlt	r8, r4
 8028084:	461c      	movlt	r4, r3
 8028086:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802808a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802808e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028092:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8028096:	eb07 0609 	add.w	r6, r7, r9
 802809a:	42b3      	cmp	r3, r6
 802809c:	bfb8      	it	lt
 802809e:	3101      	addlt	r1, #1
 80280a0:	f7ff ff08 	bl	8027eb4 <_Balloc>
 80280a4:	f100 0514 	add.w	r5, r0, #20
 80280a8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80280ac:	462b      	mov	r3, r5
 80280ae:	2200      	movs	r2, #0
 80280b0:	4573      	cmp	r3, lr
 80280b2:	d316      	bcc.n	80280e2 <__multiply+0x74>
 80280b4:	f104 0214 	add.w	r2, r4, #20
 80280b8:	f108 0114 	add.w	r1, r8, #20
 80280bc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80280c0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80280c4:	9300      	str	r3, [sp, #0]
 80280c6:	9b00      	ldr	r3, [sp, #0]
 80280c8:	9201      	str	r2, [sp, #4]
 80280ca:	4293      	cmp	r3, r2
 80280cc:	d80c      	bhi.n	80280e8 <__multiply+0x7a>
 80280ce:	2e00      	cmp	r6, #0
 80280d0:	dd03      	ble.n	80280da <__multiply+0x6c>
 80280d2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80280d6:	2b00      	cmp	r3, #0
 80280d8:	d05d      	beq.n	8028196 <__multiply+0x128>
 80280da:	6106      	str	r6, [r0, #16]
 80280dc:	b003      	add	sp, #12
 80280de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80280e2:	f843 2b04 	str.w	r2, [r3], #4
 80280e6:	e7e3      	b.n	80280b0 <__multiply+0x42>
 80280e8:	f8b2 b000 	ldrh.w	fp, [r2]
 80280ec:	f1bb 0f00 	cmp.w	fp, #0
 80280f0:	d023      	beq.n	802813a <__multiply+0xcc>
 80280f2:	4689      	mov	r9, r1
 80280f4:	46ac      	mov	ip, r5
 80280f6:	f04f 0800 	mov.w	r8, #0
 80280fa:	f859 4b04 	ldr.w	r4, [r9], #4
 80280fe:	f8dc a000 	ldr.w	sl, [ip]
 8028102:	b2a3      	uxth	r3, r4
 8028104:	fa1f fa8a 	uxth.w	sl, sl
 8028108:	fb0b a303 	mla	r3, fp, r3, sl
 802810c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8028110:	f8dc 4000 	ldr.w	r4, [ip]
 8028114:	4443      	add	r3, r8
 8028116:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802811a:	fb0b 840a 	mla	r4, fp, sl, r8
 802811e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8028122:	46e2      	mov	sl, ip
 8028124:	b29b      	uxth	r3, r3
 8028126:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802812a:	454f      	cmp	r7, r9
 802812c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8028130:	f84a 3b04 	str.w	r3, [sl], #4
 8028134:	d82b      	bhi.n	802818e <__multiply+0x120>
 8028136:	f8cc 8004 	str.w	r8, [ip, #4]
 802813a:	9b01      	ldr	r3, [sp, #4]
 802813c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8028140:	3204      	adds	r2, #4
 8028142:	f1ba 0f00 	cmp.w	sl, #0
 8028146:	d020      	beq.n	802818a <__multiply+0x11c>
 8028148:	682b      	ldr	r3, [r5, #0]
 802814a:	4689      	mov	r9, r1
 802814c:	46a8      	mov	r8, r5
 802814e:	f04f 0b00 	mov.w	fp, #0
 8028152:	f8b9 c000 	ldrh.w	ip, [r9]
 8028156:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 802815a:	fb0a 440c 	mla	r4, sl, ip, r4
 802815e:	445c      	add	r4, fp
 8028160:	46c4      	mov	ip, r8
 8028162:	b29b      	uxth	r3, r3
 8028164:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8028168:	f84c 3b04 	str.w	r3, [ip], #4
 802816c:	f859 3b04 	ldr.w	r3, [r9], #4
 8028170:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8028174:	0c1b      	lsrs	r3, r3, #16
 8028176:	fb0a b303 	mla	r3, sl, r3, fp
 802817a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 802817e:	454f      	cmp	r7, r9
 8028180:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8028184:	d805      	bhi.n	8028192 <__multiply+0x124>
 8028186:	f8c8 3004 	str.w	r3, [r8, #4]
 802818a:	3504      	adds	r5, #4
 802818c:	e79b      	b.n	80280c6 <__multiply+0x58>
 802818e:	46d4      	mov	ip, sl
 8028190:	e7b3      	b.n	80280fa <__multiply+0x8c>
 8028192:	46e0      	mov	r8, ip
 8028194:	e7dd      	b.n	8028152 <__multiply+0xe4>
 8028196:	3e01      	subs	r6, #1
 8028198:	e799      	b.n	80280ce <__multiply+0x60>
	...

0802819c <__pow5mult>:
 802819c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80281a0:	4615      	mov	r5, r2
 80281a2:	f012 0203 	ands.w	r2, r2, #3
 80281a6:	4606      	mov	r6, r0
 80281a8:	460f      	mov	r7, r1
 80281aa:	d007      	beq.n	80281bc <__pow5mult+0x20>
 80281ac:	3a01      	subs	r2, #1
 80281ae:	4c21      	ldr	r4, [pc, #132]	; (8028234 <__pow5mult+0x98>)
 80281b0:	2300      	movs	r3, #0
 80281b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80281b6:	f7ff fec8 	bl	8027f4a <__multadd>
 80281ba:	4607      	mov	r7, r0
 80281bc:	10ad      	asrs	r5, r5, #2
 80281be:	d035      	beq.n	802822c <__pow5mult+0x90>
 80281c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80281c2:	b93c      	cbnz	r4, 80281d4 <__pow5mult+0x38>
 80281c4:	2010      	movs	r0, #16
 80281c6:	f7ff fe6d 	bl	8027ea4 <malloc>
 80281ca:	6270      	str	r0, [r6, #36]	; 0x24
 80281cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80281d0:	6004      	str	r4, [r0, #0]
 80281d2:	60c4      	str	r4, [r0, #12]
 80281d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80281d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80281dc:	b94c      	cbnz	r4, 80281f2 <__pow5mult+0x56>
 80281de:	f240 2171 	movw	r1, #625	; 0x271
 80281e2:	4630      	mov	r0, r6
 80281e4:	f7ff ff3a 	bl	802805c <__i2b>
 80281e8:	2300      	movs	r3, #0
 80281ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80281ee:	4604      	mov	r4, r0
 80281f0:	6003      	str	r3, [r0, #0]
 80281f2:	f04f 0800 	mov.w	r8, #0
 80281f6:	07eb      	lsls	r3, r5, #31
 80281f8:	d50a      	bpl.n	8028210 <__pow5mult+0x74>
 80281fa:	4639      	mov	r1, r7
 80281fc:	4622      	mov	r2, r4
 80281fe:	4630      	mov	r0, r6
 8028200:	f7ff ff35 	bl	802806e <__multiply>
 8028204:	4639      	mov	r1, r7
 8028206:	4681      	mov	r9, r0
 8028208:	4630      	mov	r0, r6
 802820a:	f7ff fe87 	bl	8027f1c <_Bfree>
 802820e:	464f      	mov	r7, r9
 8028210:	106d      	asrs	r5, r5, #1
 8028212:	d00b      	beq.n	802822c <__pow5mult+0x90>
 8028214:	6820      	ldr	r0, [r4, #0]
 8028216:	b938      	cbnz	r0, 8028228 <__pow5mult+0x8c>
 8028218:	4622      	mov	r2, r4
 802821a:	4621      	mov	r1, r4
 802821c:	4630      	mov	r0, r6
 802821e:	f7ff ff26 	bl	802806e <__multiply>
 8028222:	6020      	str	r0, [r4, #0]
 8028224:	f8c0 8000 	str.w	r8, [r0]
 8028228:	4604      	mov	r4, r0
 802822a:	e7e4      	b.n	80281f6 <__pow5mult+0x5a>
 802822c:	4638      	mov	r0, r7
 802822e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028232:	bf00      	nop
 8028234:	08028748 	.word	0x08028748

08028238 <__lshift>:
 8028238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802823c:	460c      	mov	r4, r1
 802823e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8028242:	6923      	ldr	r3, [r4, #16]
 8028244:	6849      	ldr	r1, [r1, #4]
 8028246:	eb0a 0903 	add.w	r9, sl, r3
 802824a:	68a3      	ldr	r3, [r4, #8]
 802824c:	4607      	mov	r7, r0
 802824e:	4616      	mov	r6, r2
 8028250:	f109 0501 	add.w	r5, r9, #1
 8028254:	42ab      	cmp	r3, r5
 8028256:	db32      	blt.n	80282be <__lshift+0x86>
 8028258:	4638      	mov	r0, r7
 802825a:	f7ff fe2b 	bl	8027eb4 <_Balloc>
 802825e:	2300      	movs	r3, #0
 8028260:	4680      	mov	r8, r0
 8028262:	f100 0114 	add.w	r1, r0, #20
 8028266:	461a      	mov	r2, r3
 8028268:	4553      	cmp	r3, sl
 802826a:	db2b      	blt.n	80282c4 <__lshift+0x8c>
 802826c:	6920      	ldr	r0, [r4, #16]
 802826e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8028272:	f104 0314 	add.w	r3, r4, #20
 8028276:	f016 021f 	ands.w	r2, r6, #31
 802827a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802827e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8028282:	d025      	beq.n	80282d0 <__lshift+0x98>
 8028284:	f1c2 0e20 	rsb	lr, r2, #32
 8028288:	2000      	movs	r0, #0
 802828a:	681e      	ldr	r6, [r3, #0]
 802828c:	468a      	mov	sl, r1
 802828e:	4096      	lsls	r6, r2
 8028290:	4330      	orrs	r0, r6
 8028292:	f84a 0b04 	str.w	r0, [sl], #4
 8028296:	f853 0b04 	ldr.w	r0, [r3], #4
 802829a:	459c      	cmp	ip, r3
 802829c:	fa20 f00e 	lsr.w	r0, r0, lr
 80282a0:	d814      	bhi.n	80282cc <__lshift+0x94>
 80282a2:	6048      	str	r0, [r1, #4]
 80282a4:	b108      	cbz	r0, 80282aa <__lshift+0x72>
 80282a6:	f109 0502 	add.w	r5, r9, #2
 80282aa:	3d01      	subs	r5, #1
 80282ac:	4638      	mov	r0, r7
 80282ae:	f8c8 5010 	str.w	r5, [r8, #16]
 80282b2:	4621      	mov	r1, r4
 80282b4:	f7ff fe32 	bl	8027f1c <_Bfree>
 80282b8:	4640      	mov	r0, r8
 80282ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80282be:	3101      	adds	r1, #1
 80282c0:	005b      	lsls	r3, r3, #1
 80282c2:	e7c7      	b.n	8028254 <__lshift+0x1c>
 80282c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80282c8:	3301      	adds	r3, #1
 80282ca:	e7cd      	b.n	8028268 <__lshift+0x30>
 80282cc:	4651      	mov	r1, sl
 80282ce:	e7dc      	b.n	802828a <__lshift+0x52>
 80282d0:	3904      	subs	r1, #4
 80282d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80282d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80282da:	459c      	cmp	ip, r3
 80282dc:	d8f9      	bhi.n	80282d2 <__lshift+0x9a>
 80282de:	e7e4      	b.n	80282aa <__lshift+0x72>

080282e0 <__mcmp>:
 80282e0:	6903      	ldr	r3, [r0, #16]
 80282e2:	690a      	ldr	r2, [r1, #16]
 80282e4:	1a9b      	subs	r3, r3, r2
 80282e6:	b530      	push	{r4, r5, lr}
 80282e8:	d10c      	bne.n	8028304 <__mcmp+0x24>
 80282ea:	0092      	lsls	r2, r2, #2
 80282ec:	3014      	adds	r0, #20
 80282ee:	3114      	adds	r1, #20
 80282f0:	1884      	adds	r4, r0, r2
 80282f2:	4411      	add	r1, r2
 80282f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80282f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80282fc:	4295      	cmp	r5, r2
 80282fe:	d003      	beq.n	8028308 <__mcmp+0x28>
 8028300:	d305      	bcc.n	802830e <__mcmp+0x2e>
 8028302:	2301      	movs	r3, #1
 8028304:	4618      	mov	r0, r3
 8028306:	bd30      	pop	{r4, r5, pc}
 8028308:	42a0      	cmp	r0, r4
 802830a:	d3f3      	bcc.n	80282f4 <__mcmp+0x14>
 802830c:	e7fa      	b.n	8028304 <__mcmp+0x24>
 802830e:	f04f 33ff 	mov.w	r3, #4294967295
 8028312:	e7f7      	b.n	8028304 <__mcmp+0x24>

08028314 <__mdiff>:
 8028314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028318:	460d      	mov	r5, r1
 802831a:	4607      	mov	r7, r0
 802831c:	4611      	mov	r1, r2
 802831e:	4628      	mov	r0, r5
 8028320:	4614      	mov	r4, r2
 8028322:	f7ff ffdd 	bl	80282e0 <__mcmp>
 8028326:	1e06      	subs	r6, r0, #0
 8028328:	d108      	bne.n	802833c <__mdiff+0x28>
 802832a:	4631      	mov	r1, r6
 802832c:	4638      	mov	r0, r7
 802832e:	f7ff fdc1 	bl	8027eb4 <_Balloc>
 8028332:	2301      	movs	r3, #1
 8028334:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8028338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802833c:	bfa4      	itt	ge
 802833e:	4623      	movge	r3, r4
 8028340:	462c      	movge	r4, r5
 8028342:	4638      	mov	r0, r7
 8028344:	6861      	ldr	r1, [r4, #4]
 8028346:	bfa6      	itte	ge
 8028348:	461d      	movge	r5, r3
 802834a:	2600      	movge	r6, #0
 802834c:	2601      	movlt	r6, #1
 802834e:	f7ff fdb1 	bl	8027eb4 <_Balloc>
 8028352:	692b      	ldr	r3, [r5, #16]
 8028354:	60c6      	str	r6, [r0, #12]
 8028356:	6926      	ldr	r6, [r4, #16]
 8028358:	f105 0914 	add.w	r9, r5, #20
 802835c:	f104 0214 	add.w	r2, r4, #20
 8028360:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8028364:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8028368:	f100 0514 	add.w	r5, r0, #20
 802836c:	f04f 0e00 	mov.w	lr, #0
 8028370:	f852 ab04 	ldr.w	sl, [r2], #4
 8028374:	f859 4b04 	ldr.w	r4, [r9], #4
 8028378:	fa1e f18a 	uxtah	r1, lr, sl
 802837c:	b2a3      	uxth	r3, r4
 802837e:	1ac9      	subs	r1, r1, r3
 8028380:	0c23      	lsrs	r3, r4, #16
 8028382:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8028386:	eb03 4321 	add.w	r3, r3, r1, asr #16
 802838a:	b289      	uxth	r1, r1
 802838c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8028390:	45c8      	cmp	r8, r9
 8028392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8028396:	4694      	mov	ip, r2
 8028398:	f845 3b04 	str.w	r3, [r5], #4
 802839c:	d8e8      	bhi.n	8028370 <__mdiff+0x5c>
 802839e:	45bc      	cmp	ip, r7
 80283a0:	d304      	bcc.n	80283ac <__mdiff+0x98>
 80283a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80283a6:	b183      	cbz	r3, 80283ca <__mdiff+0xb6>
 80283a8:	6106      	str	r6, [r0, #16]
 80283aa:	e7c5      	b.n	8028338 <__mdiff+0x24>
 80283ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80283b0:	fa1e f381 	uxtah	r3, lr, r1
 80283b4:	141a      	asrs	r2, r3, #16
 80283b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80283ba:	b29b      	uxth	r3, r3
 80283bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80283c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80283c4:	f845 3b04 	str.w	r3, [r5], #4
 80283c8:	e7e9      	b.n	802839e <__mdiff+0x8a>
 80283ca:	3e01      	subs	r6, #1
 80283cc:	e7e9      	b.n	80283a2 <__mdiff+0x8e>

080283ce <__d2b>:
 80283ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80283d2:	460e      	mov	r6, r1
 80283d4:	2101      	movs	r1, #1
 80283d6:	ec59 8b10 	vmov	r8, r9, d0
 80283da:	4615      	mov	r5, r2
 80283dc:	f7ff fd6a 	bl	8027eb4 <_Balloc>
 80283e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80283e4:	4607      	mov	r7, r0
 80283e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80283ea:	bb34      	cbnz	r4, 802843a <__d2b+0x6c>
 80283ec:	9301      	str	r3, [sp, #4]
 80283ee:	f1b8 0300 	subs.w	r3, r8, #0
 80283f2:	d027      	beq.n	8028444 <__d2b+0x76>
 80283f4:	a802      	add	r0, sp, #8
 80283f6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80283fa:	f7ff fe00 	bl	8027ffe <__lo0bits>
 80283fe:	9900      	ldr	r1, [sp, #0]
 8028400:	b1f0      	cbz	r0, 8028440 <__d2b+0x72>
 8028402:	9a01      	ldr	r2, [sp, #4]
 8028404:	f1c0 0320 	rsb	r3, r0, #32
 8028408:	fa02 f303 	lsl.w	r3, r2, r3
 802840c:	430b      	orrs	r3, r1
 802840e:	40c2      	lsrs	r2, r0
 8028410:	617b      	str	r3, [r7, #20]
 8028412:	9201      	str	r2, [sp, #4]
 8028414:	9b01      	ldr	r3, [sp, #4]
 8028416:	61bb      	str	r3, [r7, #24]
 8028418:	2b00      	cmp	r3, #0
 802841a:	bf14      	ite	ne
 802841c:	2102      	movne	r1, #2
 802841e:	2101      	moveq	r1, #1
 8028420:	6139      	str	r1, [r7, #16]
 8028422:	b1c4      	cbz	r4, 8028456 <__d2b+0x88>
 8028424:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8028428:	4404      	add	r4, r0
 802842a:	6034      	str	r4, [r6, #0]
 802842c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8028430:	6028      	str	r0, [r5, #0]
 8028432:	4638      	mov	r0, r7
 8028434:	b003      	add	sp, #12
 8028436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802843a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802843e:	e7d5      	b.n	80283ec <__d2b+0x1e>
 8028440:	6179      	str	r1, [r7, #20]
 8028442:	e7e7      	b.n	8028414 <__d2b+0x46>
 8028444:	a801      	add	r0, sp, #4
 8028446:	f7ff fdda 	bl	8027ffe <__lo0bits>
 802844a:	9b01      	ldr	r3, [sp, #4]
 802844c:	617b      	str	r3, [r7, #20]
 802844e:	2101      	movs	r1, #1
 8028450:	6139      	str	r1, [r7, #16]
 8028452:	3020      	adds	r0, #32
 8028454:	e7e5      	b.n	8028422 <__d2b+0x54>
 8028456:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 802845a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802845e:	6030      	str	r0, [r6, #0]
 8028460:	6918      	ldr	r0, [r3, #16]
 8028462:	f7ff fdad 	bl	8027fc0 <__hi0bits>
 8028466:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 802846a:	e7e1      	b.n	8028430 <__d2b+0x62>

0802846c <_calloc_r>:
 802846c:	b538      	push	{r3, r4, r5, lr}
 802846e:	fb02 f401 	mul.w	r4, r2, r1
 8028472:	4621      	mov	r1, r4
 8028474:	f000 f808 	bl	8028488 <_malloc_r>
 8028478:	4605      	mov	r5, r0
 802847a:	b118      	cbz	r0, 8028484 <_calloc_r+0x18>
 802847c:	4622      	mov	r2, r4
 802847e:	2100      	movs	r1, #0
 8028480:	f7fe fb6b 	bl	8026b5a <memset>
 8028484:	4628      	mov	r0, r5
 8028486:	bd38      	pop	{r3, r4, r5, pc}

08028488 <_malloc_r>:
 8028488:	b570      	push	{r4, r5, r6, lr}
 802848a:	1ccd      	adds	r5, r1, #3
 802848c:	f025 0503 	bic.w	r5, r5, #3
 8028490:	3508      	adds	r5, #8
 8028492:	2d0c      	cmp	r5, #12
 8028494:	bf38      	it	cc
 8028496:	250c      	movcc	r5, #12
 8028498:	2d00      	cmp	r5, #0
 802849a:	4606      	mov	r6, r0
 802849c:	db01      	blt.n	80284a2 <_malloc_r+0x1a>
 802849e:	42a9      	cmp	r1, r5
 80284a0:	d903      	bls.n	80284aa <_malloc_r+0x22>
 80284a2:	230c      	movs	r3, #12
 80284a4:	6033      	str	r3, [r6, #0]
 80284a6:	2000      	movs	r0, #0
 80284a8:	bd70      	pop	{r4, r5, r6, pc}
 80284aa:	f000 f869 	bl	8028580 <__malloc_lock>
 80284ae:	4a21      	ldr	r2, [pc, #132]	; (8028534 <_malloc_r+0xac>)
 80284b0:	6814      	ldr	r4, [r2, #0]
 80284b2:	4621      	mov	r1, r4
 80284b4:	b991      	cbnz	r1, 80284dc <_malloc_r+0x54>
 80284b6:	4c20      	ldr	r4, [pc, #128]	; (8028538 <_malloc_r+0xb0>)
 80284b8:	6823      	ldr	r3, [r4, #0]
 80284ba:	b91b      	cbnz	r3, 80284c4 <_malloc_r+0x3c>
 80284bc:	4630      	mov	r0, r6
 80284be:	f000 f83d 	bl	802853c <_sbrk_r>
 80284c2:	6020      	str	r0, [r4, #0]
 80284c4:	4629      	mov	r1, r5
 80284c6:	4630      	mov	r0, r6
 80284c8:	f000 f838 	bl	802853c <_sbrk_r>
 80284cc:	1c43      	adds	r3, r0, #1
 80284ce:	d124      	bne.n	802851a <_malloc_r+0x92>
 80284d0:	230c      	movs	r3, #12
 80284d2:	6033      	str	r3, [r6, #0]
 80284d4:	4630      	mov	r0, r6
 80284d6:	f000 f854 	bl	8028582 <__malloc_unlock>
 80284da:	e7e4      	b.n	80284a6 <_malloc_r+0x1e>
 80284dc:	680b      	ldr	r3, [r1, #0]
 80284de:	1b5b      	subs	r3, r3, r5
 80284e0:	d418      	bmi.n	8028514 <_malloc_r+0x8c>
 80284e2:	2b0b      	cmp	r3, #11
 80284e4:	d90f      	bls.n	8028506 <_malloc_r+0x7e>
 80284e6:	600b      	str	r3, [r1, #0]
 80284e8:	50cd      	str	r5, [r1, r3]
 80284ea:	18cc      	adds	r4, r1, r3
 80284ec:	4630      	mov	r0, r6
 80284ee:	f000 f848 	bl	8028582 <__malloc_unlock>
 80284f2:	f104 000b 	add.w	r0, r4, #11
 80284f6:	1d23      	adds	r3, r4, #4
 80284f8:	f020 0007 	bic.w	r0, r0, #7
 80284fc:	1ac3      	subs	r3, r0, r3
 80284fe:	d0d3      	beq.n	80284a8 <_malloc_r+0x20>
 8028500:	425a      	negs	r2, r3
 8028502:	50e2      	str	r2, [r4, r3]
 8028504:	e7d0      	b.n	80284a8 <_malloc_r+0x20>
 8028506:	428c      	cmp	r4, r1
 8028508:	684b      	ldr	r3, [r1, #4]
 802850a:	bf16      	itet	ne
 802850c:	6063      	strne	r3, [r4, #4]
 802850e:	6013      	streq	r3, [r2, #0]
 8028510:	460c      	movne	r4, r1
 8028512:	e7eb      	b.n	80284ec <_malloc_r+0x64>
 8028514:	460c      	mov	r4, r1
 8028516:	6849      	ldr	r1, [r1, #4]
 8028518:	e7cc      	b.n	80284b4 <_malloc_r+0x2c>
 802851a:	1cc4      	adds	r4, r0, #3
 802851c:	f024 0403 	bic.w	r4, r4, #3
 8028520:	42a0      	cmp	r0, r4
 8028522:	d005      	beq.n	8028530 <_malloc_r+0xa8>
 8028524:	1a21      	subs	r1, r4, r0
 8028526:	4630      	mov	r0, r6
 8028528:	f000 f808 	bl	802853c <_sbrk_r>
 802852c:	3001      	adds	r0, #1
 802852e:	d0cf      	beq.n	80284d0 <_malloc_r+0x48>
 8028530:	6025      	str	r5, [r4, #0]
 8028532:	e7db      	b.n	80284ec <_malloc_r+0x64>
 8028534:	20010fa8 	.word	0x20010fa8
 8028538:	20010fac 	.word	0x20010fac

0802853c <_sbrk_r>:
 802853c:	b538      	push	{r3, r4, r5, lr}
 802853e:	4c06      	ldr	r4, [pc, #24]	; (8028558 <_sbrk_r+0x1c>)
 8028540:	2300      	movs	r3, #0
 8028542:	4605      	mov	r5, r0
 8028544:	4608      	mov	r0, r1
 8028546:	6023      	str	r3, [r4, #0]
 8028548:	f7fa fb1a 	bl	8022b80 <_sbrk>
 802854c:	1c43      	adds	r3, r0, #1
 802854e:	d102      	bne.n	8028556 <_sbrk_r+0x1a>
 8028550:	6823      	ldr	r3, [r4, #0]
 8028552:	b103      	cbz	r3, 8028556 <_sbrk_r+0x1a>
 8028554:	602b      	str	r3, [r5, #0]
 8028556:	bd38      	pop	{r3, r4, r5, pc}
 8028558:	2001138c 	.word	0x2001138c

0802855c <__ascii_mbtowc>:
 802855c:	b082      	sub	sp, #8
 802855e:	b901      	cbnz	r1, 8028562 <__ascii_mbtowc+0x6>
 8028560:	a901      	add	r1, sp, #4
 8028562:	b142      	cbz	r2, 8028576 <__ascii_mbtowc+0x1a>
 8028564:	b14b      	cbz	r3, 802857a <__ascii_mbtowc+0x1e>
 8028566:	7813      	ldrb	r3, [r2, #0]
 8028568:	600b      	str	r3, [r1, #0]
 802856a:	7812      	ldrb	r2, [r2, #0]
 802856c:	1c10      	adds	r0, r2, #0
 802856e:	bf18      	it	ne
 8028570:	2001      	movne	r0, #1
 8028572:	b002      	add	sp, #8
 8028574:	4770      	bx	lr
 8028576:	4610      	mov	r0, r2
 8028578:	e7fb      	b.n	8028572 <__ascii_mbtowc+0x16>
 802857a:	f06f 0001 	mvn.w	r0, #1
 802857e:	e7f8      	b.n	8028572 <__ascii_mbtowc+0x16>

08028580 <__malloc_lock>:
 8028580:	4770      	bx	lr

08028582 <__malloc_unlock>:
 8028582:	4770      	bx	lr

08028584 <__ascii_wctomb>:
 8028584:	b149      	cbz	r1, 802859a <__ascii_wctomb+0x16>
 8028586:	2aff      	cmp	r2, #255	; 0xff
 8028588:	bf85      	ittet	hi
 802858a:	238a      	movhi	r3, #138	; 0x8a
 802858c:	6003      	strhi	r3, [r0, #0]
 802858e:	700a      	strbls	r2, [r1, #0]
 8028590:	f04f 30ff 	movhi.w	r0, #4294967295
 8028594:	bf98      	it	ls
 8028596:	2001      	movls	r0, #1
 8028598:	4770      	bx	lr
 802859a:	4608      	mov	r0, r1
 802859c:	4770      	bx	lr
	...

080285a0 <_init>:
 80285a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80285a2:	bf00      	nop
 80285a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80285a6:	bc08      	pop	{r3}
 80285a8:	469e      	mov	lr, r3
 80285aa:	4770      	bx	lr

080285ac <_fini>:
 80285ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80285ae:	bf00      	nop
 80285b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80285b2:	bc08      	pop	{r3}
 80285b4:	469e      	mov	lr, r3
 80285b6:	4770      	bx	lr
