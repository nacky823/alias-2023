
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004044  08020000  08020000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08024044  08024044  00024044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802405c  0802405c  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  0802405c  0802405c  0002405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024064  08024064  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08024064  08024064  00024064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802406c  0802406c  0002406c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08024070  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ec  20000010  0802407c  00030010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  0802407c  000307fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e60e  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003286  00000000  00000000  0004e64a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a0  00000000  00000000  000518d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001178  00000000  00000000  00052b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023853  00000000  00000000  00053ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001031c  00000000  00000000  0007753b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca0bb  00000000  00000000  00087857  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151912  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dfc  00000000  00000000  00151990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	20000010 	.word	0x20000010
 802001c:	00000000 	.word	0x00000000
 8020020:	0802402c 	.word	0x0802402c

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	20000014 	.word	0x20000014
 802003c:	0802402c 	.word	0x0802402c

08020040 <__aeabi_uldivmod>:
 8020040:	b953      	cbnz	r3, 8020058 <__aeabi_uldivmod+0x18>
 8020042:	b94a      	cbnz	r2, 8020058 <__aeabi_uldivmod+0x18>
 8020044:	2900      	cmp	r1, #0
 8020046:	bf08      	it	eq
 8020048:	2800      	cmpeq	r0, #0
 802004a:	bf1c      	itt	ne
 802004c:	f04f 31ff 	movne.w	r1, #4294967295
 8020050:	f04f 30ff 	movne.w	r0, #4294967295
 8020054:	f000 b972 	b.w	802033c <__aeabi_idiv0>
 8020058:	f1ad 0c08 	sub.w	ip, sp, #8
 802005c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020060:	f000 f806 	bl	8020070 <__udivmoddi4>
 8020064:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802006c:	b004      	add	sp, #16
 802006e:	4770      	bx	lr

08020070 <__udivmoddi4>:
 8020070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020074:	9e08      	ldr	r6, [sp, #32]
 8020076:	4604      	mov	r4, r0
 8020078:	4688      	mov	r8, r1
 802007a:	2b00      	cmp	r3, #0
 802007c:	d14b      	bne.n	8020116 <__udivmoddi4+0xa6>
 802007e:	428a      	cmp	r2, r1
 8020080:	4615      	mov	r5, r2
 8020082:	d967      	bls.n	8020154 <__udivmoddi4+0xe4>
 8020084:	fab2 f282 	clz	r2, r2
 8020088:	b14a      	cbz	r2, 802009e <__udivmoddi4+0x2e>
 802008a:	f1c2 0720 	rsb	r7, r2, #32
 802008e:	fa01 f302 	lsl.w	r3, r1, r2
 8020092:	fa20 f707 	lsr.w	r7, r0, r7
 8020096:	4095      	lsls	r5, r2
 8020098:	ea47 0803 	orr.w	r8, r7, r3
 802009c:	4094      	lsls	r4, r2
 802009e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80200a2:	0c23      	lsrs	r3, r4, #16
 80200a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80200a8:	fa1f fc85 	uxth.w	ip, r5
 80200ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80200b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80200b4:	fb07 f10c 	mul.w	r1, r7, ip
 80200b8:	4299      	cmp	r1, r3
 80200ba:	d909      	bls.n	80200d0 <__udivmoddi4+0x60>
 80200bc:	18eb      	adds	r3, r5, r3
 80200be:	f107 30ff 	add.w	r0, r7, #4294967295
 80200c2:	f080 811b 	bcs.w	80202fc <__udivmoddi4+0x28c>
 80200c6:	4299      	cmp	r1, r3
 80200c8:	f240 8118 	bls.w	80202fc <__udivmoddi4+0x28c>
 80200cc:	3f02      	subs	r7, #2
 80200ce:	442b      	add	r3, r5
 80200d0:	1a5b      	subs	r3, r3, r1
 80200d2:	b2a4      	uxth	r4, r4
 80200d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80200d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80200dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80200e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80200e4:	45a4      	cmp	ip, r4
 80200e6:	d909      	bls.n	80200fc <__udivmoddi4+0x8c>
 80200e8:	192c      	adds	r4, r5, r4
 80200ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80200ee:	f080 8107 	bcs.w	8020300 <__udivmoddi4+0x290>
 80200f2:	45a4      	cmp	ip, r4
 80200f4:	f240 8104 	bls.w	8020300 <__udivmoddi4+0x290>
 80200f8:	3802      	subs	r0, #2
 80200fa:	442c      	add	r4, r5
 80200fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020100:	eba4 040c 	sub.w	r4, r4, ip
 8020104:	2700      	movs	r7, #0
 8020106:	b11e      	cbz	r6, 8020110 <__udivmoddi4+0xa0>
 8020108:	40d4      	lsrs	r4, r2
 802010a:	2300      	movs	r3, #0
 802010c:	e9c6 4300 	strd	r4, r3, [r6]
 8020110:	4639      	mov	r1, r7
 8020112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020116:	428b      	cmp	r3, r1
 8020118:	d909      	bls.n	802012e <__udivmoddi4+0xbe>
 802011a:	2e00      	cmp	r6, #0
 802011c:	f000 80eb 	beq.w	80202f6 <__udivmoddi4+0x286>
 8020120:	2700      	movs	r7, #0
 8020122:	e9c6 0100 	strd	r0, r1, [r6]
 8020126:	4638      	mov	r0, r7
 8020128:	4639      	mov	r1, r7
 802012a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802012e:	fab3 f783 	clz	r7, r3
 8020132:	2f00      	cmp	r7, #0
 8020134:	d147      	bne.n	80201c6 <__udivmoddi4+0x156>
 8020136:	428b      	cmp	r3, r1
 8020138:	d302      	bcc.n	8020140 <__udivmoddi4+0xd0>
 802013a:	4282      	cmp	r2, r0
 802013c:	f200 80fa 	bhi.w	8020334 <__udivmoddi4+0x2c4>
 8020140:	1a84      	subs	r4, r0, r2
 8020142:	eb61 0303 	sbc.w	r3, r1, r3
 8020146:	2001      	movs	r0, #1
 8020148:	4698      	mov	r8, r3
 802014a:	2e00      	cmp	r6, #0
 802014c:	d0e0      	beq.n	8020110 <__udivmoddi4+0xa0>
 802014e:	e9c6 4800 	strd	r4, r8, [r6]
 8020152:	e7dd      	b.n	8020110 <__udivmoddi4+0xa0>
 8020154:	b902      	cbnz	r2, 8020158 <__udivmoddi4+0xe8>
 8020156:	deff      	udf	#255	; 0xff
 8020158:	fab2 f282 	clz	r2, r2
 802015c:	2a00      	cmp	r2, #0
 802015e:	f040 808f 	bne.w	8020280 <__udivmoddi4+0x210>
 8020162:	1b49      	subs	r1, r1, r5
 8020164:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020168:	fa1f f885 	uxth.w	r8, r5
 802016c:	2701      	movs	r7, #1
 802016e:	fbb1 fcfe 	udiv	ip, r1, lr
 8020172:	0c23      	lsrs	r3, r4, #16
 8020174:	fb0e 111c 	mls	r1, lr, ip, r1
 8020178:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802017c:	fb08 f10c 	mul.w	r1, r8, ip
 8020180:	4299      	cmp	r1, r3
 8020182:	d907      	bls.n	8020194 <__udivmoddi4+0x124>
 8020184:	18eb      	adds	r3, r5, r3
 8020186:	f10c 30ff 	add.w	r0, ip, #4294967295
 802018a:	d202      	bcs.n	8020192 <__udivmoddi4+0x122>
 802018c:	4299      	cmp	r1, r3
 802018e:	f200 80cd 	bhi.w	802032c <__udivmoddi4+0x2bc>
 8020192:	4684      	mov	ip, r0
 8020194:	1a59      	subs	r1, r3, r1
 8020196:	b2a3      	uxth	r3, r4
 8020198:	fbb1 f0fe 	udiv	r0, r1, lr
 802019c:	fb0e 1410 	mls	r4, lr, r0, r1
 80201a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80201a4:	fb08 f800 	mul.w	r8, r8, r0
 80201a8:	45a0      	cmp	r8, r4
 80201aa:	d907      	bls.n	80201bc <__udivmoddi4+0x14c>
 80201ac:	192c      	adds	r4, r5, r4
 80201ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80201b2:	d202      	bcs.n	80201ba <__udivmoddi4+0x14a>
 80201b4:	45a0      	cmp	r8, r4
 80201b6:	f200 80b6 	bhi.w	8020326 <__udivmoddi4+0x2b6>
 80201ba:	4618      	mov	r0, r3
 80201bc:	eba4 0408 	sub.w	r4, r4, r8
 80201c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80201c4:	e79f      	b.n	8020106 <__udivmoddi4+0x96>
 80201c6:	f1c7 0c20 	rsb	ip, r7, #32
 80201ca:	40bb      	lsls	r3, r7
 80201cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80201d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80201d4:	fa01 f407 	lsl.w	r4, r1, r7
 80201d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80201dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80201e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80201e4:	4325      	orrs	r5, r4
 80201e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80201ea:	0c2c      	lsrs	r4, r5, #16
 80201ec:	fb08 3319 	mls	r3, r8, r9, r3
 80201f0:	fa1f fa8e 	uxth.w	sl, lr
 80201f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80201f8:	fb09 f40a 	mul.w	r4, r9, sl
 80201fc:	429c      	cmp	r4, r3
 80201fe:	fa02 f207 	lsl.w	r2, r2, r7
 8020202:	fa00 f107 	lsl.w	r1, r0, r7
 8020206:	d90b      	bls.n	8020220 <__udivmoddi4+0x1b0>
 8020208:	eb1e 0303 	adds.w	r3, lr, r3
 802020c:	f109 30ff 	add.w	r0, r9, #4294967295
 8020210:	f080 8087 	bcs.w	8020322 <__udivmoddi4+0x2b2>
 8020214:	429c      	cmp	r4, r3
 8020216:	f240 8084 	bls.w	8020322 <__udivmoddi4+0x2b2>
 802021a:	f1a9 0902 	sub.w	r9, r9, #2
 802021e:	4473      	add	r3, lr
 8020220:	1b1b      	subs	r3, r3, r4
 8020222:	b2ad      	uxth	r5, r5
 8020224:	fbb3 f0f8 	udiv	r0, r3, r8
 8020228:	fb08 3310 	mls	r3, r8, r0, r3
 802022c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020230:	fb00 fa0a 	mul.w	sl, r0, sl
 8020234:	45a2      	cmp	sl, r4
 8020236:	d908      	bls.n	802024a <__udivmoddi4+0x1da>
 8020238:	eb1e 0404 	adds.w	r4, lr, r4
 802023c:	f100 33ff 	add.w	r3, r0, #4294967295
 8020240:	d26b      	bcs.n	802031a <__udivmoddi4+0x2aa>
 8020242:	45a2      	cmp	sl, r4
 8020244:	d969      	bls.n	802031a <__udivmoddi4+0x2aa>
 8020246:	3802      	subs	r0, #2
 8020248:	4474      	add	r4, lr
 802024a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 802024e:	fba0 8902 	umull	r8, r9, r0, r2
 8020252:	eba4 040a 	sub.w	r4, r4, sl
 8020256:	454c      	cmp	r4, r9
 8020258:	46c2      	mov	sl, r8
 802025a:	464b      	mov	r3, r9
 802025c:	d354      	bcc.n	8020308 <__udivmoddi4+0x298>
 802025e:	d051      	beq.n	8020304 <__udivmoddi4+0x294>
 8020260:	2e00      	cmp	r6, #0
 8020262:	d069      	beq.n	8020338 <__udivmoddi4+0x2c8>
 8020264:	ebb1 050a 	subs.w	r5, r1, sl
 8020268:	eb64 0403 	sbc.w	r4, r4, r3
 802026c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020270:	40fd      	lsrs	r5, r7
 8020272:	40fc      	lsrs	r4, r7
 8020274:	ea4c 0505 	orr.w	r5, ip, r5
 8020278:	e9c6 5400 	strd	r5, r4, [r6]
 802027c:	2700      	movs	r7, #0
 802027e:	e747      	b.n	8020110 <__udivmoddi4+0xa0>
 8020280:	f1c2 0320 	rsb	r3, r2, #32
 8020284:	fa20 f703 	lsr.w	r7, r0, r3
 8020288:	4095      	lsls	r5, r2
 802028a:	fa01 f002 	lsl.w	r0, r1, r2
 802028e:	fa21 f303 	lsr.w	r3, r1, r3
 8020292:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020296:	4338      	orrs	r0, r7
 8020298:	0c01      	lsrs	r1, r0, #16
 802029a:	fbb3 f7fe 	udiv	r7, r3, lr
 802029e:	fa1f f885 	uxth.w	r8, r5
 80202a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80202a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80202aa:	fb07 f308 	mul.w	r3, r7, r8
 80202ae:	428b      	cmp	r3, r1
 80202b0:	fa04 f402 	lsl.w	r4, r4, r2
 80202b4:	d907      	bls.n	80202c6 <__udivmoddi4+0x256>
 80202b6:	1869      	adds	r1, r5, r1
 80202b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80202bc:	d22f      	bcs.n	802031e <__udivmoddi4+0x2ae>
 80202be:	428b      	cmp	r3, r1
 80202c0:	d92d      	bls.n	802031e <__udivmoddi4+0x2ae>
 80202c2:	3f02      	subs	r7, #2
 80202c4:	4429      	add	r1, r5
 80202c6:	1acb      	subs	r3, r1, r3
 80202c8:	b281      	uxth	r1, r0
 80202ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80202ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80202d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80202d6:	fb00 f308 	mul.w	r3, r0, r8
 80202da:	428b      	cmp	r3, r1
 80202dc:	d907      	bls.n	80202ee <__udivmoddi4+0x27e>
 80202de:	1869      	adds	r1, r5, r1
 80202e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80202e4:	d217      	bcs.n	8020316 <__udivmoddi4+0x2a6>
 80202e6:	428b      	cmp	r3, r1
 80202e8:	d915      	bls.n	8020316 <__udivmoddi4+0x2a6>
 80202ea:	3802      	subs	r0, #2
 80202ec:	4429      	add	r1, r5
 80202ee:	1ac9      	subs	r1, r1, r3
 80202f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80202f4:	e73b      	b.n	802016e <__udivmoddi4+0xfe>
 80202f6:	4637      	mov	r7, r6
 80202f8:	4630      	mov	r0, r6
 80202fa:	e709      	b.n	8020110 <__udivmoddi4+0xa0>
 80202fc:	4607      	mov	r7, r0
 80202fe:	e6e7      	b.n	80200d0 <__udivmoddi4+0x60>
 8020300:	4618      	mov	r0, r3
 8020302:	e6fb      	b.n	80200fc <__udivmoddi4+0x8c>
 8020304:	4541      	cmp	r1, r8
 8020306:	d2ab      	bcs.n	8020260 <__udivmoddi4+0x1f0>
 8020308:	ebb8 0a02 	subs.w	sl, r8, r2
 802030c:	eb69 020e 	sbc.w	r2, r9, lr
 8020310:	3801      	subs	r0, #1
 8020312:	4613      	mov	r3, r2
 8020314:	e7a4      	b.n	8020260 <__udivmoddi4+0x1f0>
 8020316:	4660      	mov	r0, ip
 8020318:	e7e9      	b.n	80202ee <__udivmoddi4+0x27e>
 802031a:	4618      	mov	r0, r3
 802031c:	e795      	b.n	802024a <__udivmoddi4+0x1da>
 802031e:	4667      	mov	r7, ip
 8020320:	e7d1      	b.n	80202c6 <__udivmoddi4+0x256>
 8020322:	4681      	mov	r9, r0
 8020324:	e77c      	b.n	8020220 <__udivmoddi4+0x1b0>
 8020326:	3802      	subs	r0, #2
 8020328:	442c      	add	r4, r5
 802032a:	e747      	b.n	80201bc <__udivmoddi4+0x14c>
 802032c:	f1ac 0c02 	sub.w	ip, ip, #2
 8020330:	442b      	add	r3, r5
 8020332:	e72f      	b.n	8020194 <__udivmoddi4+0x124>
 8020334:	4638      	mov	r0, r7
 8020336:	e708      	b.n	802014a <__udivmoddi4+0xda>
 8020338:	4637      	mov	r7, r6
 802033a:	e6e9      	b.n	8020110 <__udivmoddi4+0xa0>

0802033c <__aeabi_idiv0>:
 802033c:	4770      	bx	lr
 802033e:	bf00      	nop

08020340 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"

Encoder::Encoder() : distance_(0), distance_stack_(0), distance_difference_(0) {}
 8020340:	b480      	push	{r7}
 8020342:	b083      	sub	sp, #12
 8020344:	af00      	add	r7, sp, #0
 8020346:	6078      	str	r0, [r7, #4]
 8020348:	687b      	ldr	r3, [r7, #4]
 802034a:	f04f 0200 	mov.w	r2, #0
 802034e:	601a      	str	r2, [r3, #0]
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	f04f 0200 	mov.w	r2, #0
 8020356:	605a      	str	r2, [r3, #4]
 8020358:	687b      	ldr	r3, [r7, #4]
 802035a:	f04f 0200 	mov.w	r2, #0
 802035e:	609a      	str	r2, [r3, #8]
 8020360:	687b      	ldr	r3, [r7, #4]
 8020362:	4618      	mov	r0, r3
 8020364:	370c      	adds	r7, #12
 8020366:	46bd      	mov	sp, r7
 8020368:	f85d 7b04 	ldr.w	r7, [sp], #4
 802036c:	4770      	bx	lr

0802036e <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"

Iim42652::Iim42652() {}
 802036e:	b480      	push	{r7}
 8020370:	b083      	sub	sp, #12
 8020372:	af00      	add	r7, sp, #0
 8020374:	6078      	str	r0, [r7, #4]
 8020376:	687b      	ldr	r3, [r7, #4]
 8020378:	4618      	mov	r0, r3
 802037a:	370c      	adds	r7, #12
 802037c:	46bd      	mov	sp, r7
 802037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020382:	4770      	bx	lr

08020384 <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : adc_buffers_(), consecutive_adc_buffers_(), max_adc_values_(), min_adc_values_(), adc_values_(), emergency_stop_flag_(0) {}
 8020384:	b490      	push	{r4, r7}
 8020386:	b082      	sub	sp, #8
 8020388:	af00      	add	r7, sp, #0
 802038a:	6078      	str	r0, [r7, #4]
 802038c:	687a      	ldr	r2, [r7, #4]
 802038e:	230d      	movs	r3, #13
 8020390:	2b00      	cmp	r3, #0
 8020392:	db04      	blt.n	802039e <_ZN10LineSensorC1Ev+0x1a>
 8020394:	2100      	movs	r1, #0
 8020396:	8011      	strh	r1, [r2, #0]
 8020398:	3202      	adds	r2, #2
 802039a:	3b01      	subs	r3, #1
 802039c:	e7f8      	b.n	8020390 <_ZN10LineSensorC1Ev+0xc>
 802039e:	687b      	ldr	r3, [r7, #4]
 80203a0:	f103 021c 	add.w	r2, r3, #28
 80203a4:	2309      	movs	r3, #9
 80203a6:	4610      	mov	r0, r2
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	db0b      	blt.n	80203c4 <_ZN10LineSensorC1Ev+0x40>
 80203ac:	4601      	mov	r1, r0
 80203ae:	220d      	movs	r2, #13
 80203b0:	2a00      	cmp	r2, #0
 80203b2:	db04      	blt.n	80203be <_ZN10LineSensorC1Ev+0x3a>
 80203b4:	2400      	movs	r4, #0
 80203b6:	800c      	strh	r4, [r1, #0]
 80203b8:	3102      	adds	r1, #2
 80203ba:	3a01      	subs	r2, #1
 80203bc:	e7f8      	b.n	80203b0 <_ZN10LineSensorC1Ev+0x2c>
 80203be:	301c      	adds	r0, #28
 80203c0:	3b01      	subs	r3, #1
 80203c2:	e7f1      	b.n	80203a8 <_ZN10LineSensorC1Ev+0x24>
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	f503 729a 	add.w	r2, r3, #308	; 0x134
 80203ca:	230d      	movs	r3, #13
 80203cc:	2b00      	cmp	r3, #0
 80203ce:	db04      	blt.n	80203da <_ZN10LineSensorC1Ev+0x56>
 80203d0:	2100      	movs	r1, #0
 80203d2:	8011      	strh	r1, [r2, #0]
 80203d4:	3202      	adds	r2, #2
 80203d6:	3b01      	subs	r3, #1
 80203d8:	e7f8      	b.n	80203cc <_ZN10LineSensorC1Ev+0x48>
 80203da:	687b      	ldr	r3, [r7, #4]
 80203dc:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80203e0:	230d      	movs	r3, #13
 80203e2:	2b00      	cmp	r3, #0
 80203e4:	db04      	blt.n	80203f0 <_ZN10LineSensorC1Ev+0x6c>
 80203e6:	2100      	movs	r1, #0
 80203e8:	8011      	strh	r1, [r2, #0]
 80203ea:	3202      	adds	r2, #2
 80203ec:	3b01      	subs	r3, #1
 80203ee:	e7f8      	b.n	80203e2 <_ZN10LineSensorC1Ev+0x5e>
 80203f0:	687b      	ldr	r3, [r7, #4]
 80203f2:	f503 72b6 	add.w	r2, r3, #364	; 0x16c
 80203f6:	230d      	movs	r3, #13
 80203f8:	2b00      	cmp	r3, #0
 80203fa:	db04      	blt.n	8020406 <_ZN10LineSensorC1Ev+0x82>
 80203fc:	2100      	movs	r1, #0
 80203fe:	8011      	strh	r1, [r2, #0]
 8020400:	3202      	adds	r2, #2
 8020402:	3b01      	subs	r3, #1
 8020404:	e7f8      	b.n	80203f8 <_ZN10LineSensorC1Ev+0x74>
 8020406:	687b      	ldr	r3, [r7, #4]
 8020408:	2200      	movs	r2, #0
 802040a:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 802040e:	687b      	ldr	r3, [r7, #4]
 8020410:	4618      	mov	r0, r3
 8020412:	3708      	adds	r7, #8
 8020414:	46bd      	mov	sp, r7
 8020416:	bc90      	pop	{r4, r7}
 8020418:	4770      	bx	lr

0802041a <_ZN9LineTraceC1Ev>:
#include "line_trace.hpp"

LineTrace::LineTrace() : integral_error_(0) {}
 802041a:	b580      	push	{r7, lr}
 802041c:	b082      	sub	sp, #8
 802041e:	af00      	add	r7, sp, #0
 8020420:	6078      	str	r0, [r7, #4]
 8020422:	687b      	ldr	r3, [r7, #4]
 8020424:	f04f 0200 	mov.w	r2, #0
 8020428:	601a      	str	r2, [r3, #0]
 802042a:	687b      	ldr	r3, [r7, #4]
 802042c:	3304      	adds	r3, #4
 802042e:	4618      	mov	r0, r3
 8020430:	f7ff ffa8 	bl	8020384 <_ZN10LineSensorC1Ev>
 8020434:	687b      	ldr	r3, [r7, #4]
 8020436:	4618      	mov	r0, r3
 8020438:	3708      	adds	r7, #8
 802043a:	46bd      	mov	sp, r7
 802043c:	bd80      	pop	{r7, pc}
	...

08020440 <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() : const_distance_log_(), radian_log_(), various_log_(), const_distance_copy_(), radian_copy_(), various_copy_(), accel_address_(), decel_address_(), periodic_write_enable_(0), accel_position_write_enable_(0), excess_stack_(0), target_velocity_(MIN_VELOCITY) {}
 8020440:	b580      	push	{r7, lr}
 8020442:	b082      	sub	sp, #8
 8020444:	af00      	add	r7, sp, #0
 8020446:	6078      	str	r0, [r7, #4]
 8020448:	687a      	ldr	r2, [r7, #4]
 802044a:	2309      	movs	r3, #9
 802044c:	2b00      	cmp	r3, #0
 802044e:	db05      	blt.n	802045c <_ZN6LoggerC1Ev+0x1c>
 8020450:	f04f 0100 	mov.w	r1, #0
 8020454:	6011      	str	r1, [r2, #0]
 8020456:	3204      	adds	r2, #4
 8020458:	3b01      	subs	r3, #1
 802045a:	e7f7      	b.n	802044c <_ZN6LoggerC1Ev+0xc>
 802045c:	687b      	ldr	r3, [r7, #4]
 802045e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8020462:	2309      	movs	r3, #9
 8020464:	2b00      	cmp	r3, #0
 8020466:	db05      	blt.n	8020474 <_ZN6LoggerC1Ev+0x34>
 8020468:	f04f 0100 	mov.w	r1, #0
 802046c:	6011      	str	r1, [r2, #0]
 802046e:	3204      	adds	r2, #4
 8020470:	3b01      	subs	r3, #1
 8020472:	e7f7      	b.n	8020464 <_ZN6LoggerC1Ev+0x24>
 8020474:	687b      	ldr	r3, [r7, #4]
 8020476:	f103 0250 	add.w	r2, r3, #80	; 0x50
 802047a:	2309      	movs	r3, #9
 802047c:	2b00      	cmp	r3, #0
 802047e:	db04      	blt.n	802048a <_ZN6LoggerC1Ev+0x4a>
 8020480:	2100      	movs	r1, #0
 8020482:	8011      	strh	r1, [r2, #0]
 8020484:	3202      	adds	r2, #2
 8020486:	3b01      	subs	r3, #1
 8020488:	e7f8      	b.n	802047c <_ZN6LoggerC1Ev+0x3c>
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8020490:	2309      	movs	r3, #9
 8020492:	2b00      	cmp	r3, #0
 8020494:	db05      	blt.n	80204a2 <_ZN6LoggerC1Ev+0x62>
 8020496:	f04f 0100 	mov.w	r1, #0
 802049a:	6011      	str	r1, [r2, #0]
 802049c:	3204      	adds	r2, #4
 802049e:	3b01      	subs	r3, #1
 80204a0:	e7f7      	b.n	8020492 <_ZN6LoggerC1Ev+0x52>
 80204a2:	687b      	ldr	r3, [r7, #4]
 80204a4:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 80204a8:	2309      	movs	r3, #9
 80204aa:	2b00      	cmp	r3, #0
 80204ac:	db05      	blt.n	80204ba <_ZN6LoggerC1Ev+0x7a>
 80204ae:	f04f 0100 	mov.w	r1, #0
 80204b2:	6011      	str	r1, [r2, #0]
 80204b4:	3204      	adds	r2, #4
 80204b6:	3b01      	subs	r3, #1
 80204b8:	e7f7      	b.n	80204aa <_ZN6LoggerC1Ev+0x6a>
 80204ba:	687b      	ldr	r3, [r7, #4]
 80204bc:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 80204c0:	2309      	movs	r3, #9
 80204c2:	2b00      	cmp	r3, #0
 80204c4:	db04      	blt.n	80204d0 <_ZN6LoggerC1Ev+0x90>
 80204c6:	2100      	movs	r1, #0
 80204c8:	8011      	strh	r1, [r2, #0]
 80204ca:	3202      	adds	r2, #2
 80204cc:	3b01      	subs	r3, #1
 80204ce:	e7f8      	b.n	80204c2 <_ZN6LoggerC1Ev+0x82>
 80204d0:	687b      	ldr	r3, [r7, #4]
 80204d2:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 80204d6:	2304      	movs	r3, #4
 80204d8:	2b00      	cmp	r3, #0
 80204da:	db04      	blt.n	80204e6 <_ZN6LoggerC1Ev+0xa6>
 80204dc:	2100      	movs	r1, #0
 80204de:	8011      	strh	r1, [r2, #0]
 80204e0:	3202      	adds	r2, #2
 80204e2:	3b01      	subs	r3, #1
 80204e4:	e7f8      	b.n	80204d8 <_ZN6LoggerC1Ev+0x98>
 80204e6:	687b      	ldr	r3, [r7, #4]
 80204e8:	f103 02d2 	add.w	r2, r3, #210	; 0xd2
 80204ec:	2304      	movs	r3, #4
 80204ee:	2b00      	cmp	r3, #0
 80204f0:	db04      	blt.n	80204fc <_ZN6LoggerC1Ev+0xbc>
 80204f2:	2100      	movs	r1, #0
 80204f4:	8011      	strh	r1, [r2, #0]
 80204f6:	3202      	adds	r2, #2
 80204f8:	3b01      	subs	r3, #1
 80204fa:	e7f8      	b.n	80204ee <_ZN6LoggerC1Ev+0xae>
 80204fc:	687b      	ldr	r3, [r7, #4]
 80204fe:	2200      	movs	r2, #0
 8020500:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8020504:	687b      	ldr	r3, [r7, #4]
 8020506:	2200      	movs	r2, #0
 8020508:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 802050c:	687b      	ldr	r3, [r7, #4]
 802050e:	f04f 0200 	mov.w	r2, #0
 8020512:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8020516:	687b      	ldr	r3, [r7, #4]
 8020518:	4a0b      	ldr	r2, [pc, #44]	; (8020548 <_ZN6LoggerC1Ev+0x108>)
 802051a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 802051e:	687b      	ldr	r3, [r7, #4]
 8020520:	33e8      	adds	r3, #232	; 0xe8
 8020522:	4618      	mov	r0, r3
 8020524:	f7ff ff0c 	bl	8020340 <_ZN7EncoderC1Ev>
 8020528:	687b      	ldr	r3, [r7, #4]
 802052a:	33f8      	adds	r3, #248	; 0xf8
 802052c:	4618      	mov	r0, r3
 802052e:	f7ff ff1e 	bl	802036e <_ZN8Iim42652C1Ev>
 8020532:	687b      	ldr	r3, [r7, #4]
 8020534:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8020538:	4618      	mov	r0, r3
 802053a:	f000 fe32 	bl	80211a2 <_ZN10SideSensorC1Ev>
 802053e:	687b      	ldr	r3, [r7, #4]
 8020540:	4618      	mov	r0, r3
 8020542:	3708      	adds	r7, #8
 8020544:	46bd      	mov	sp, r7
 8020546:	bd80      	pop	{r7, pc}
 8020548:	3fa66666 	.word	0x3fa66666

0802054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802054c:	b580      	push	{r7, lr}
 802054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020550:	f001 fa76 	bl	8021a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020554:	f000 f81e 	bl	8020594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020558:	f000 fd44 	bl	8020fe4 <MX_GPIO_Init>
  MX_ADC1_Init();
 802055c:	f000 f884 	bl	8020668 <MX_ADC1_Init>
  MX_I2C2_Init();
 8020560:	f000 f98a 	bl	8020878 <MX_I2C2_Init>
  MX_SPI3_Init();
 8020564:	f000 f9b6 	bl	80208d4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8020568:	f000 f9ea 	bl	8020940 <MX_TIM1_Init>
  MX_TIM3_Init();
 802056c:	f000 fac6 	bl	8020afc <MX_TIM3_Init>
  MX_TIM4_Init();
 8020570:	f000 fb3e 	bl	8020bf0 <MX_TIM4_Init>
  MX_TIM6_Init();
 8020574:	f000 fbde 	bl	8020d34 <MX_TIM6_Init>
  MX_TIM7_Init();
 8020578:	f000 fc12 	bl	8020da0 <MX_TIM7_Init>
  MX_TIM8_Init();
 802057c:	f000 fc46 	bl	8020e0c <MX_TIM8_Init>
  MX_TIM11_Init();
 8020580:	f000 fc9c 	bl	8020ebc <MX_TIM11_Init>
  MX_TIM12_Init();
 8020584:	f000 fce8 	bl	8020f58 <MX_TIM12_Init>
  MX_TIM2_Init();
 8020588:	f000 fa6a 	bl	8020a60 <MX_TIM2_Init>
  MX_TIM5_Init();
 802058c:	f000 fb84 	bl	8020c98 <MX_TIM5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8020590:	e7fe      	b.n	8020590 <main+0x44>
	...

08020594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020594:	b580      	push	{r7, lr}
 8020596:	b094      	sub	sp, #80	; 0x50
 8020598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802059a:	f107 0320 	add.w	r3, r7, #32
 802059e:	2230      	movs	r2, #48	; 0x30
 80205a0:	2100      	movs	r1, #0
 80205a2:	4618      	mov	r0, r3
 80205a4:	f003 fd3a 	bl	802401c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80205a8:	f107 030c 	add.w	r3, r7, #12
 80205ac:	2200      	movs	r2, #0
 80205ae:	601a      	str	r2, [r3, #0]
 80205b0:	605a      	str	r2, [r3, #4]
 80205b2:	609a      	str	r2, [r3, #8]
 80205b4:	60da      	str	r2, [r3, #12]
 80205b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80205b8:	2300      	movs	r3, #0
 80205ba:	60bb      	str	r3, [r7, #8]
 80205bc:	4b28      	ldr	r3, [pc, #160]	; (8020660 <SystemClock_Config+0xcc>)
 80205be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80205c0:	4a27      	ldr	r2, [pc, #156]	; (8020660 <SystemClock_Config+0xcc>)
 80205c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80205c6:	6413      	str	r3, [r2, #64]	; 0x40
 80205c8:	4b25      	ldr	r3, [pc, #148]	; (8020660 <SystemClock_Config+0xcc>)
 80205ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80205cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80205d0:	60bb      	str	r3, [r7, #8]
 80205d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80205d4:	2300      	movs	r3, #0
 80205d6:	607b      	str	r3, [r7, #4]
 80205d8:	4b22      	ldr	r3, [pc, #136]	; (8020664 <SystemClock_Config+0xd0>)
 80205da:	681b      	ldr	r3, [r3, #0]
 80205dc:	4a21      	ldr	r2, [pc, #132]	; (8020664 <SystemClock_Config+0xd0>)
 80205de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80205e2:	6013      	str	r3, [r2, #0]
 80205e4:	4b1f      	ldr	r3, [pc, #124]	; (8020664 <SystemClock_Config+0xd0>)
 80205e6:	681b      	ldr	r3, [r3, #0]
 80205e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80205ec:	607b      	str	r3, [r7, #4]
 80205ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80205f0:	2301      	movs	r3, #1
 80205f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80205f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80205f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80205fa:	2302      	movs	r3, #2
 80205fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80205fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8020602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8020604:	2306      	movs	r3, #6
 8020606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8020608:	23a8      	movs	r3, #168	; 0xa8
 802060a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802060c:	2302      	movs	r3, #2
 802060e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8020610:	2304      	movs	r3, #4
 8020612:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020614:	f107 0320 	add.w	r3, r7, #32
 8020618:	4618      	mov	r0, r3
 802061a:	f002 f8e3 	bl	80227e4 <HAL_RCC_OscConfig>
 802061e:	4603      	mov	r3, r0
 8020620:	2b00      	cmp	r3, #0
 8020622:	d001      	beq.n	8020628 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8020624:	f000 fdae 	bl	8021184 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020628:	230f      	movs	r3, #15
 802062a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802062c:	2302      	movs	r3, #2
 802062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020630:	2300      	movs	r3, #0
 8020632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8020634:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020638:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 802063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8020640:	f107 030c 	add.w	r3, r7, #12
 8020644:	2105      	movs	r1, #5
 8020646:	4618      	mov	r0, r3
 8020648:	f002 fb3c 	bl	8022cc4 <HAL_RCC_ClockConfig>
 802064c:	4603      	mov	r3, r0
 802064e:	2b00      	cmp	r3, #0
 8020650:	d001      	beq.n	8020656 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8020652:	f000 fd97 	bl	8021184 <Error_Handler>
  }
}
 8020656:	bf00      	nop
 8020658:	3750      	adds	r7, #80	; 0x50
 802065a:	46bd      	mov	sp, r7
 802065c:	bd80      	pop	{r7, pc}
 802065e:	bf00      	nop
 8020660:	40023800 	.word	0x40023800
 8020664:	40007000 	.word	0x40007000

08020668 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8020668:	b580      	push	{r7, lr}
 802066a:	b084      	sub	sp, #16
 802066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 802066e:	463b      	mov	r3, r7
 8020670:	2200      	movs	r2, #0
 8020672:	601a      	str	r2, [r3, #0]
 8020674:	605a      	str	r2, [r3, #4]
 8020676:	609a      	str	r2, [r3, #8]
 8020678:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 802067a:	4b7c      	ldr	r3, [pc, #496]	; (802086c <MX_ADC1_Init+0x204>)
 802067c:	4a7c      	ldr	r2, [pc, #496]	; (8020870 <MX_ADC1_Init+0x208>)
 802067e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8020680:	4b7a      	ldr	r3, [pc, #488]	; (802086c <MX_ADC1_Init+0x204>)
 8020682:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8020686:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8020688:	4b78      	ldr	r3, [pc, #480]	; (802086c <MX_ADC1_Init+0x204>)
 802068a:	2200      	movs	r2, #0
 802068c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 802068e:	4b77      	ldr	r3, [pc, #476]	; (802086c <MX_ADC1_Init+0x204>)
 8020690:	2201      	movs	r2, #1
 8020692:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8020694:	4b75      	ldr	r3, [pc, #468]	; (802086c <MX_ADC1_Init+0x204>)
 8020696:	2201      	movs	r2, #1
 8020698:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 802069a:	4b74      	ldr	r3, [pc, #464]	; (802086c <MX_ADC1_Init+0x204>)
 802069c:	2200      	movs	r2, #0
 802069e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80206a2:	4b72      	ldr	r3, [pc, #456]	; (802086c <MX_ADC1_Init+0x204>)
 80206a4:	2200      	movs	r2, #0
 80206a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80206a8:	4b70      	ldr	r3, [pc, #448]	; (802086c <MX_ADC1_Init+0x204>)
 80206aa:	4a72      	ldr	r2, [pc, #456]	; (8020874 <MX_ADC1_Init+0x20c>)
 80206ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80206ae:	4b6f      	ldr	r3, [pc, #444]	; (802086c <MX_ADC1_Init+0x204>)
 80206b0:	2200      	movs	r2, #0
 80206b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 80206b4:	4b6d      	ldr	r3, [pc, #436]	; (802086c <MX_ADC1_Init+0x204>)
 80206b6:	220e      	movs	r2, #14
 80206b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80206ba:	4b6c      	ldr	r3, [pc, #432]	; (802086c <MX_ADC1_Init+0x204>)
 80206bc:	2200      	movs	r2, #0
 80206be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80206c2:	4b6a      	ldr	r3, [pc, #424]	; (802086c <MX_ADC1_Init+0x204>)
 80206c4:	2201      	movs	r2, #1
 80206c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80206c8:	4868      	ldr	r0, [pc, #416]	; (802086c <MX_ADC1_Init+0x204>)
 80206ca:	f001 fa2b 	bl	8021b24 <HAL_ADC_Init>
 80206ce:	4603      	mov	r3, r0
 80206d0:	2b00      	cmp	r3, #0
 80206d2:	d001      	beq.n	80206d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80206d4:	f000 fd56 	bl	8021184 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80206d8:	2303      	movs	r3, #3
 80206da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80206dc:	2301      	movs	r3, #1
 80206de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80206e0:	2301      	movs	r3, #1
 80206e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80206e4:	463b      	mov	r3, r7
 80206e6:	4619      	mov	r1, r3
 80206e8:	4860      	ldr	r0, [pc, #384]	; (802086c <MX_ADC1_Init+0x204>)
 80206ea:	f001 fa5f 	bl	8021bac <HAL_ADC_ConfigChannel>
 80206ee:	4603      	mov	r3, r0
 80206f0:	2b00      	cmp	r3, #0
 80206f2:	d001      	beq.n	80206f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80206f4:	f000 fd46 	bl	8021184 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80206f8:	2304      	movs	r3, #4
 80206fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80206fc:	2302      	movs	r3, #2
 80206fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020700:	463b      	mov	r3, r7
 8020702:	4619      	mov	r1, r3
 8020704:	4859      	ldr	r0, [pc, #356]	; (802086c <MX_ADC1_Init+0x204>)
 8020706:	f001 fa51 	bl	8021bac <HAL_ADC_ConfigChannel>
 802070a:	4603      	mov	r3, r0
 802070c:	2b00      	cmp	r3, #0
 802070e:	d001      	beq.n	8020714 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8020710:	f000 fd38 	bl	8021184 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8020714:	2305      	movs	r3, #5
 8020716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8020718:	2303      	movs	r3, #3
 802071a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802071c:	463b      	mov	r3, r7
 802071e:	4619      	mov	r1, r3
 8020720:	4852      	ldr	r0, [pc, #328]	; (802086c <MX_ADC1_Init+0x204>)
 8020722:	f001 fa43 	bl	8021bac <HAL_ADC_ConfigChannel>
 8020726:	4603      	mov	r3, r0
 8020728:	2b00      	cmp	r3, #0
 802072a:	d001      	beq.n	8020730 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 802072c:	f000 fd2a 	bl	8021184 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8020730:	2306      	movs	r3, #6
 8020732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8020734:	2304      	movs	r3, #4
 8020736:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020738:	463b      	mov	r3, r7
 802073a:	4619      	mov	r1, r3
 802073c:	484b      	ldr	r0, [pc, #300]	; (802086c <MX_ADC1_Init+0x204>)
 802073e:	f001 fa35 	bl	8021bac <HAL_ADC_ConfigChannel>
 8020742:	4603      	mov	r3, r0
 8020744:	2b00      	cmp	r3, #0
 8020746:	d001      	beq.n	802074c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8020748:	f000 fd1c 	bl	8021184 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 802074c:	2307      	movs	r3, #7
 802074e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8020750:	2305      	movs	r3, #5
 8020752:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020754:	463b      	mov	r3, r7
 8020756:	4619      	mov	r1, r3
 8020758:	4844      	ldr	r0, [pc, #272]	; (802086c <MX_ADC1_Init+0x204>)
 802075a:	f001 fa27 	bl	8021bac <HAL_ADC_ConfigChannel>
 802075e:	4603      	mov	r3, r0
 8020760:	2b00      	cmp	r3, #0
 8020762:	d001      	beq.n	8020768 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8020764:	f000 fd0e 	bl	8021184 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8020768:	230e      	movs	r3, #14
 802076a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 802076c:	2306      	movs	r3, #6
 802076e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020770:	463b      	mov	r3, r7
 8020772:	4619      	mov	r1, r3
 8020774:	483d      	ldr	r0, [pc, #244]	; (802086c <MX_ADC1_Init+0x204>)
 8020776:	f001 fa19 	bl	8021bac <HAL_ADC_ConfigChannel>
 802077a:	4603      	mov	r3, r0
 802077c:	2b00      	cmp	r3, #0
 802077e:	d001      	beq.n	8020784 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8020780:	f000 fd00 	bl	8021184 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8020784:	230f      	movs	r3, #15
 8020786:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8020788:	2307      	movs	r3, #7
 802078a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802078c:	463b      	mov	r3, r7
 802078e:	4619      	mov	r1, r3
 8020790:	4836      	ldr	r0, [pc, #216]	; (802086c <MX_ADC1_Init+0x204>)
 8020792:	f001 fa0b 	bl	8021bac <HAL_ADC_ConfigChannel>
 8020796:	4603      	mov	r3, r0
 8020798:	2b00      	cmp	r3, #0
 802079a:	d001      	beq.n	80207a0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 802079c:	f000 fcf2 	bl	8021184 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80207a0:	230a      	movs	r3, #10
 80207a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80207a4:	2308      	movs	r3, #8
 80207a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80207a8:	463b      	mov	r3, r7
 80207aa:	4619      	mov	r1, r3
 80207ac:	482f      	ldr	r0, [pc, #188]	; (802086c <MX_ADC1_Init+0x204>)
 80207ae:	f001 f9fd 	bl	8021bac <HAL_ADC_ConfigChannel>
 80207b2:	4603      	mov	r3, r0
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d001      	beq.n	80207bc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80207b8:	f000 fce4 	bl	8021184 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80207bc:	230b      	movs	r3, #11
 80207be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80207c0:	2309      	movs	r3, #9
 80207c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80207c4:	463b      	mov	r3, r7
 80207c6:	4619      	mov	r1, r3
 80207c8:	4828      	ldr	r0, [pc, #160]	; (802086c <MX_ADC1_Init+0x204>)
 80207ca:	f001 f9ef 	bl	8021bac <HAL_ADC_ConfigChannel>
 80207ce:	4603      	mov	r3, r0
 80207d0:	2b00      	cmp	r3, #0
 80207d2:	d001      	beq.n	80207d8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80207d4:	f000 fcd6 	bl	8021184 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80207d8:	230c      	movs	r3, #12
 80207da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80207dc:	230a      	movs	r3, #10
 80207de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80207e0:	463b      	mov	r3, r7
 80207e2:	4619      	mov	r1, r3
 80207e4:	4821      	ldr	r0, [pc, #132]	; (802086c <MX_ADC1_Init+0x204>)
 80207e6:	f001 f9e1 	bl	8021bac <HAL_ADC_ConfigChannel>
 80207ea:	4603      	mov	r3, r0
 80207ec:	2b00      	cmp	r3, #0
 80207ee:	d001      	beq.n	80207f4 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80207f0:	f000 fcc8 	bl	8021184 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80207f4:	230d      	movs	r3, #13
 80207f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80207f8:	230b      	movs	r3, #11
 80207fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80207fc:	463b      	mov	r3, r7
 80207fe:	4619      	mov	r1, r3
 8020800:	481a      	ldr	r0, [pc, #104]	; (802086c <MX_ADC1_Init+0x204>)
 8020802:	f001 f9d3 	bl	8021bac <HAL_ADC_ConfigChannel>
 8020806:	4603      	mov	r3, r0
 8020808:	2b00      	cmp	r3, #0
 802080a:	d001      	beq.n	8020810 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 802080c:	f000 fcba 	bl	8021184 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8020810:	2302      	movs	r3, #2
 8020812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8020814:	230c      	movs	r3, #12
 8020816:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020818:	463b      	mov	r3, r7
 802081a:	4619      	mov	r1, r3
 802081c:	4813      	ldr	r0, [pc, #76]	; (802086c <MX_ADC1_Init+0x204>)
 802081e:	f001 f9c5 	bl	8021bac <HAL_ADC_ConfigChannel>
 8020822:	4603      	mov	r3, r0
 8020824:	2b00      	cmp	r3, #0
 8020826:	d001      	beq.n	802082c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8020828:	f000 fcac 	bl	8021184 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 802082c:	2301      	movs	r3, #1
 802082e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8020830:	230d      	movs	r3, #13
 8020832:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020834:	463b      	mov	r3, r7
 8020836:	4619      	mov	r1, r3
 8020838:	480c      	ldr	r0, [pc, #48]	; (802086c <MX_ADC1_Init+0x204>)
 802083a:	f001 f9b7 	bl	8021bac <HAL_ADC_ConfigChannel>
 802083e:	4603      	mov	r3, r0
 8020840:	2b00      	cmp	r3, #0
 8020842:	d001      	beq.n	8020848 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8020844:	f000 fc9e 	bl	8021184 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8020848:	2300      	movs	r3, #0
 802084a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 802084c:	230e      	movs	r3, #14
 802084e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020850:	463b      	mov	r3, r7
 8020852:	4619      	mov	r1, r3
 8020854:	4805      	ldr	r0, [pc, #20]	; (802086c <MX_ADC1_Init+0x204>)
 8020856:	f001 f9a9 	bl	8021bac <HAL_ADC_ConfigChannel>
 802085a:	4603      	mov	r3, r0
 802085c:	2b00      	cmp	r3, #0
 802085e:	d001      	beq.n	8020864 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8020860:	f000 fc90 	bl	8021184 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8020864:	bf00      	nop
 8020866:	3710      	adds	r7, #16
 8020868:	46bd      	mov	sp, r7
 802086a:	bd80      	pop	{r7, pc}
 802086c:	20000630 	.word	0x20000630
 8020870:	40012000 	.word	0x40012000
 8020874:	0f000001 	.word	0x0f000001

08020878 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8020878:	b580      	push	{r7, lr}
 802087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 802087c:	4b12      	ldr	r3, [pc, #72]	; (80208c8 <MX_I2C2_Init+0x50>)
 802087e:	4a13      	ldr	r2, [pc, #76]	; (80208cc <MX_I2C2_Init+0x54>)
 8020880:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8020882:	4b11      	ldr	r3, [pc, #68]	; (80208c8 <MX_I2C2_Init+0x50>)
 8020884:	4a12      	ldr	r2, [pc, #72]	; (80208d0 <MX_I2C2_Init+0x58>)
 8020886:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8020888:	4b0f      	ldr	r3, [pc, #60]	; (80208c8 <MX_I2C2_Init+0x50>)
 802088a:	2200      	movs	r2, #0
 802088c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 802088e:	4b0e      	ldr	r3, [pc, #56]	; (80208c8 <MX_I2C2_Init+0x50>)
 8020890:	2200      	movs	r2, #0
 8020892:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020894:	4b0c      	ldr	r3, [pc, #48]	; (80208c8 <MX_I2C2_Init+0x50>)
 8020896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802089a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 802089c:	4b0a      	ldr	r3, [pc, #40]	; (80208c8 <MX_I2C2_Init+0x50>)
 802089e:	2200      	movs	r2, #0
 80208a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80208a2:	4b09      	ldr	r3, [pc, #36]	; (80208c8 <MX_I2C2_Init+0x50>)
 80208a4:	2200      	movs	r2, #0
 80208a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80208a8:	4b07      	ldr	r3, [pc, #28]	; (80208c8 <MX_I2C2_Init+0x50>)
 80208aa:	2200      	movs	r2, #0
 80208ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80208ae:	4b06      	ldr	r3, [pc, #24]	; (80208c8 <MX_I2C2_Init+0x50>)
 80208b0:	2200      	movs	r2, #0
 80208b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80208b4:	4804      	ldr	r0, [pc, #16]	; (80208c8 <MX_I2C2_Init+0x50>)
 80208b6:	f001 fe5d 	bl	8022574 <HAL_I2C_Init>
 80208ba:	4603      	mov	r3, r0
 80208bc:	2b00      	cmp	r3, #0
 80208be:	d001      	beq.n	80208c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80208c0:	f000 fc60 	bl	8021184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80208c4:	bf00      	nop
 80208c6:	bd80      	pop	{r7, pc}
 80208c8:	20000504 	.word	0x20000504
 80208cc:	40005800 	.word	0x40005800
 80208d0:	000186a0 	.word	0x000186a0

080208d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80208d4:	b580      	push	{r7, lr}
 80208d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80208d8:	4b17      	ldr	r3, [pc, #92]	; (8020938 <MX_SPI3_Init+0x64>)
 80208da:	4a18      	ldr	r2, [pc, #96]	; (802093c <MX_SPI3_Init+0x68>)
 80208dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80208de:	4b16      	ldr	r3, [pc, #88]	; (8020938 <MX_SPI3_Init+0x64>)
 80208e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80208e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80208e6:	4b14      	ldr	r3, [pc, #80]	; (8020938 <MX_SPI3_Init+0x64>)
 80208e8:	2200      	movs	r2, #0
 80208ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80208ec:	4b12      	ldr	r3, [pc, #72]	; (8020938 <MX_SPI3_Init+0x64>)
 80208ee:	2200      	movs	r2, #0
 80208f0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80208f2:	4b11      	ldr	r3, [pc, #68]	; (8020938 <MX_SPI3_Init+0x64>)
 80208f4:	2200      	movs	r2, #0
 80208f6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80208f8:	4b0f      	ldr	r3, [pc, #60]	; (8020938 <MX_SPI3_Init+0x64>)
 80208fa:	2200      	movs	r2, #0
 80208fc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80208fe:	4b0e      	ldr	r3, [pc, #56]	; (8020938 <MX_SPI3_Init+0x64>)
 8020900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020904:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8020906:	4b0c      	ldr	r3, [pc, #48]	; (8020938 <MX_SPI3_Init+0x64>)
 8020908:	2228      	movs	r2, #40	; 0x28
 802090a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 802090c:	4b0a      	ldr	r3, [pc, #40]	; (8020938 <MX_SPI3_Init+0x64>)
 802090e:	2200      	movs	r2, #0
 8020910:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8020912:	4b09      	ldr	r3, [pc, #36]	; (8020938 <MX_SPI3_Init+0x64>)
 8020914:	2200      	movs	r2, #0
 8020916:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020918:	4b07      	ldr	r3, [pc, #28]	; (8020938 <MX_SPI3_Init+0x64>)
 802091a:	2200      	movs	r2, #0
 802091c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 802091e:	4b06      	ldr	r3, [pc, #24]	; (8020938 <MX_SPI3_Init+0x64>)
 8020920:	220a      	movs	r2, #10
 8020922:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8020924:	4804      	ldr	r0, [pc, #16]	; (8020938 <MX_SPI3_Init+0x64>)
 8020926:	f002 fb85 	bl	8023034 <HAL_SPI_Init>
 802092a:	4603      	mov	r3, r0
 802092c:	2b00      	cmp	r3, #0
 802092e:	d001      	beq.n	8020934 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8020930:	f000 fc28 	bl	8021184 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8020934:	bf00      	nop
 8020936:	bd80      	pop	{r7, pc}
 8020938:	200005d8 	.word	0x200005d8
 802093c:	40003c00 	.word	0x40003c00

08020940 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8020940:	b580      	push	{r7, lr}
 8020942:	b092      	sub	sp, #72	; 0x48
 8020944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020946:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802094a:	2200      	movs	r2, #0
 802094c:	601a      	str	r2, [r3, #0]
 802094e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8020950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020954:	2200      	movs	r2, #0
 8020956:	601a      	str	r2, [r3, #0]
 8020958:	605a      	str	r2, [r3, #4]
 802095a:	609a      	str	r2, [r3, #8]
 802095c:	60da      	str	r2, [r3, #12]
 802095e:	611a      	str	r2, [r3, #16]
 8020960:	615a      	str	r2, [r3, #20]
 8020962:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8020964:	1d3b      	adds	r3, r7, #4
 8020966:	2220      	movs	r2, #32
 8020968:	2100      	movs	r1, #0
 802096a:	4618      	mov	r0, r3
 802096c:	f003 fb56 	bl	802401c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8020970:	4b39      	ldr	r3, [pc, #228]	; (8020a58 <MX_TIM1_Init+0x118>)
 8020972:	4a3a      	ldr	r2, [pc, #232]	; (8020a5c <MX_TIM1_Init+0x11c>)
 8020974:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8020976:	4b38      	ldr	r3, [pc, #224]	; (8020a58 <MX_TIM1_Init+0x118>)
 8020978:	2201      	movs	r2, #1
 802097a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 802097c:	4b36      	ldr	r3, [pc, #216]	; (8020a58 <MX_TIM1_Init+0x118>)
 802097e:	2200      	movs	r2, #0
 8020980:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 8020982:	4b35      	ldr	r3, [pc, #212]	; (8020a58 <MX_TIM1_Init+0x118>)
 8020984:	f240 4219 	movw	r2, #1049	; 0x419
 8020988:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802098a:	4b33      	ldr	r3, [pc, #204]	; (8020a58 <MX_TIM1_Init+0x118>)
 802098c:	2200      	movs	r2, #0
 802098e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8020990:	4b31      	ldr	r3, [pc, #196]	; (8020a58 <MX_TIM1_Init+0x118>)
 8020992:	2200      	movs	r2, #0
 8020994:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020996:	4b30      	ldr	r3, [pc, #192]	; (8020a58 <MX_TIM1_Init+0x118>)
 8020998:	2200      	movs	r2, #0
 802099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 802099c:	482e      	ldr	r0, [pc, #184]	; (8020a58 <MX_TIM1_Init+0x118>)
 802099e:	f002 fbd8 	bl	8023152 <HAL_TIM_PWM_Init>
 80209a2:	4603      	mov	r3, r0
 80209a4:	2b00      	cmp	r3, #0
 80209a6:	d001      	beq.n	80209ac <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80209a8:	f000 fbec 	bl	8021184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80209ac:	2300      	movs	r3, #0
 80209ae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80209b0:	2300      	movs	r3, #0
 80209b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80209b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80209b8:	4619      	mov	r1, r3
 80209ba:	4827      	ldr	r0, [pc, #156]	; (8020a58 <MX_TIM1_Init+0x118>)
 80209bc:	f003 fa28 	bl	8023e10 <HAL_TIMEx_MasterConfigSynchronization>
 80209c0:	4603      	mov	r3, r0
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	d001      	beq.n	80209ca <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80209c6:	f000 fbdd 	bl	8021184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80209ca:	2360      	movs	r3, #96	; 0x60
 80209cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80209ce:	2300      	movs	r3, #0
 80209d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80209d2:	2300      	movs	r3, #0
 80209d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80209d6:	2300      	movs	r3, #0
 80209d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80209da:	2300      	movs	r3, #0
 80209dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80209de:	2300      	movs	r3, #0
 80209e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80209e2:	2300      	movs	r3, #0
 80209e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80209e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80209ea:	2204      	movs	r2, #4
 80209ec:	4619      	mov	r1, r3
 80209ee:	481a      	ldr	r0, [pc, #104]	; (8020a58 <MX_TIM1_Init+0x118>)
 80209f0:	f002 fd74 	bl	80234dc <HAL_TIM_PWM_ConfigChannel>
 80209f4:	4603      	mov	r3, r0
 80209f6:	2b00      	cmp	r3, #0
 80209f8:	d001      	beq.n	80209fe <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80209fa:	f000 fbc3 	bl	8021184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80209fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020a02:	220c      	movs	r2, #12
 8020a04:	4619      	mov	r1, r3
 8020a06:	4814      	ldr	r0, [pc, #80]	; (8020a58 <MX_TIM1_Init+0x118>)
 8020a08:	f002 fd68 	bl	80234dc <HAL_TIM_PWM_ConfigChannel>
 8020a0c:	4603      	mov	r3, r0
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d001      	beq.n	8020a16 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8020a12:	f000 fbb7 	bl	8021184 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8020a16:	2300      	movs	r3, #0
 8020a18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8020a1a:	2300      	movs	r3, #0
 8020a1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8020a1e:	2300      	movs	r3, #0
 8020a20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8020a22:	2300      	movs	r3, #0
 8020a24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8020a26:	2300      	movs	r3, #0
 8020a28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8020a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8020a2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8020a30:	2300      	movs	r3, #0
 8020a32:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8020a34:	1d3b      	adds	r3, r7, #4
 8020a36:	4619      	mov	r1, r3
 8020a38:	4807      	ldr	r0, [pc, #28]	; (8020a58 <MX_TIM1_Init+0x118>)
 8020a3a:	f003 fa65 	bl	8023f08 <HAL_TIMEx_ConfigBreakDeadTime>
 8020a3e:	4603      	mov	r3, r0
 8020a40:	2b00      	cmp	r3, #0
 8020a42:	d001      	beq.n	8020a48 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8020a44:	f000 fb9e 	bl	8021184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8020a48:	4803      	ldr	r0, [pc, #12]	; (8020a58 <MX_TIM1_Init+0x118>)
 8020a4a:	f000 fe41 	bl	80216d0 <HAL_TIM_MspPostInit>

}
 8020a4e:	bf00      	nop
 8020a50:	3748      	adds	r7, #72	; 0x48
 8020a52:	46bd      	mov	sp, r7
 8020a54:	bd80      	pop	{r7, pc}
 8020a56:	bf00      	nop
 8020a58:	200006f8 	.word	0x200006f8
 8020a5c:	40010000 	.word	0x40010000

08020a60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8020a60:	b580      	push	{r7, lr}
 8020a62:	b086      	sub	sp, #24
 8020a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8020a66:	f107 0308 	add.w	r3, r7, #8
 8020a6a:	2200      	movs	r2, #0
 8020a6c:	601a      	str	r2, [r3, #0]
 8020a6e:	605a      	str	r2, [r3, #4]
 8020a70:	609a      	str	r2, [r3, #8]
 8020a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020a74:	463b      	mov	r3, r7
 8020a76:	2200      	movs	r2, #0
 8020a78:	601a      	str	r2, [r3, #0]
 8020a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8020a7c:	4b1d      	ldr	r3, [pc, #116]	; (8020af4 <MX_TIM2_Init+0x94>)
 8020a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8020a82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8020a84:	4b1b      	ldr	r3, [pc, #108]	; (8020af4 <MX_TIM2_Init+0x94>)
 8020a86:	2204      	movs	r2, #4
 8020a88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020a8a:	4b1a      	ldr	r3, [pc, #104]	; (8020af4 <MX_TIM2_Init+0x94>)
 8020a8c:	2200      	movs	r2, #0
 8020a8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 8020a90:	4b18      	ldr	r3, [pc, #96]	; (8020af4 <MX_TIM2_Init+0x94>)
 8020a92:	4a19      	ldr	r2, [pc, #100]	; (8020af8 <MX_TIM2_Init+0x98>)
 8020a94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020a96:	4b17      	ldr	r3, [pc, #92]	; (8020af4 <MX_TIM2_Init+0x94>)
 8020a98:	2200      	movs	r2, #0
 8020a9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020a9c:	4b15      	ldr	r3, [pc, #84]	; (8020af4 <MX_TIM2_Init+0x94>)
 8020a9e:	2200      	movs	r2, #0
 8020aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8020aa2:	4814      	ldr	r0, [pc, #80]	; (8020af4 <MX_TIM2_Init+0x94>)
 8020aa4:	f002 fb2a 	bl	80230fc <HAL_TIM_Base_Init>
 8020aa8:	4603      	mov	r3, r0
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	d001      	beq.n	8020ab2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8020aae:	f000 fb69 	bl	8021184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8020ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020ab6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8020ab8:	f107 0308 	add.w	r3, r7, #8
 8020abc:	4619      	mov	r1, r3
 8020abe:	480d      	ldr	r0, [pc, #52]	; (8020af4 <MX_TIM2_Init+0x94>)
 8020ac0:	f002 fdd2 	bl	8023668 <HAL_TIM_ConfigClockSource>
 8020ac4:	4603      	mov	r3, r0
 8020ac6:	2b00      	cmp	r3, #0
 8020ac8:	d001      	beq.n	8020ace <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8020aca:	f000 fb5b 	bl	8021184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020ace:	2300      	movs	r3, #0
 8020ad0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020ad2:	2300      	movs	r3, #0
 8020ad4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8020ad6:	463b      	mov	r3, r7
 8020ad8:	4619      	mov	r1, r3
 8020ada:	4806      	ldr	r0, [pc, #24]	; (8020af4 <MX_TIM2_Init+0x94>)
 8020adc:	f003 f998 	bl	8023e10 <HAL_TIMEx_MasterConfigSynchronization>
 8020ae0:	4603      	mov	r3, r0
 8020ae2:	2b00      	cmp	r3, #0
 8020ae4:	d001      	beq.n	8020aea <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8020ae6:	f000 fb4d 	bl	8021184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8020aea:	bf00      	nop
 8020aec:	3718      	adds	r7, #24
 8020aee:	46bd      	mov	sp, r7
 8020af0:	bd80      	pop	{r7, pc}
 8020af2:	bf00      	nop
 8020af4:	20000738 	.word	0x20000738
 8020af8:	00019a27 	.word	0x00019a27

08020afc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8020afc:	b580      	push	{r7, lr}
 8020afe:	b08a      	sub	sp, #40	; 0x28
 8020b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020b02:	f107 0320 	add.w	r3, r7, #32
 8020b06:	2200      	movs	r2, #0
 8020b08:	601a      	str	r2, [r3, #0]
 8020b0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8020b0c:	1d3b      	adds	r3, r7, #4
 8020b0e:	2200      	movs	r2, #0
 8020b10:	601a      	str	r2, [r3, #0]
 8020b12:	605a      	str	r2, [r3, #4]
 8020b14:	609a      	str	r2, [r3, #8]
 8020b16:	60da      	str	r2, [r3, #12]
 8020b18:	611a      	str	r2, [r3, #16]
 8020b1a:	615a      	str	r2, [r3, #20]
 8020b1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8020b1e:	4b32      	ldr	r3, [pc, #200]	; (8020be8 <MX_TIM3_Init+0xec>)
 8020b20:	4a32      	ldr	r2, [pc, #200]	; (8020bec <MX_TIM3_Init+0xf0>)
 8020b22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8020b24:	4b30      	ldr	r3, [pc, #192]	; (8020be8 <MX_TIM3_Init+0xec>)
 8020b26:	2200      	movs	r2, #0
 8020b28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020b2a:	4b2f      	ldr	r3, [pc, #188]	; (8020be8 <MX_TIM3_Init+0xec>)
 8020b2c:	2200      	movs	r2, #0
 8020b2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8020b30:	4b2d      	ldr	r3, [pc, #180]	; (8020be8 <MX_TIM3_Init+0xec>)
 8020b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020b36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020b38:	4b2b      	ldr	r3, [pc, #172]	; (8020be8 <MX_TIM3_Init+0xec>)
 8020b3a:	2200      	movs	r2, #0
 8020b3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020b3e:	4b2a      	ldr	r3, [pc, #168]	; (8020be8 <MX_TIM3_Init+0xec>)
 8020b40:	2200      	movs	r2, #0
 8020b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8020b44:	4828      	ldr	r0, [pc, #160]	; (8020be8 <MX_TIM3_Init+0xec>)
 8020b46:	f002 fb04 	bl	8023152 <HAL_TIM_PWM_Init>
 8020b4a:	4603      	mov	r3, r0
 8020b4c:	2b00      	cmp	r3, #0
 8020b4e:	d001      	beq.n	8020b54 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8020b50:	f000 fb18 	bl	8021184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020b54:	2300      	movs	r3, #0
 8020b56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020b58:	2300      	movs	r3, #0
 8020b5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8020b5c:	f107 0320 	add.w	r3, r7, #32
 8020b60:	4619      	mov	r1, r3
 8020b62:	4821      	ldr	r0, [pc, #132]	; (8020be8 <MX_TIM3_Init+0xec>)
 8020b64:	f003 f954 	bl	8023e10 <HAL_TIMEx_MasterConfigSynchronization>
 8020b68:	4603      	mov	r3, r0
 8020b6a:	2b00      	cmp	r3, #0
 8020b6c:	d001      	beq.n	8020b72 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8020b6e:	f000 fb09 	bl	8021184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8020b72:	2360      	movs	r3, #96	; 0x60
 8020b74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8020b76:	2300      	movs	r3, #0
 8020b78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8020b7a:	2300      	movs	r3, #0
 8020b7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8020b7e:	2300      	movs	r3, #0
 8020b80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8020b82:	1d3b      	adds	r3, r7, #4
 8020b84:	2200      	movs	r2, #0
 8020b86:	4619      	mov	r1, r3
 8020b88:	4817      	ldr	r0, [pc, #92]	; (8020be8 <MX_TIM3_Init+0xec>)
 8020b8a:	f002 fca7 	bl	80234dc <HAL_TIM_PWM_ConfigChannel>
 8020b8e:	4603      	mov	r3, r0
 8020b90:	2b00      	cmp	r3, #0
 8020b92:	d001      	beq.n	8020b98 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8020b94:	f000 faf6 	bl	8021184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8020b98:	1d3b      	adds	r3, r7, #4
 8020b9a:	2204      	movs	r2, #4
 8020b9c:	4619      	mov	r1, r3
 8020b9e:	4812      	ldr	r0, [pc, #72]	; (8020be8 <MX_TIM3_Init+0xec>)
 8020ba0:	f002 fc9c 	bl	80234dc <HAL_TIM_PWM_ConfigChannel>
 8020ba4:	4603      	mov	r3, r0
 8020ba6:	2b00      	cmp	r3, #0
 8020ba8:	d001      	beq.n	8020bae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8020baa:	f000 faeb 	bl	8021184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8020bae:	1d3b      	adds	r3, r7, #4
 8020bb0:	2208      	movs	r2, #8
 8020bb2:	4619      	mov	r1, r3
 8020bb4:	480c      	ldr	r0, [pc, #48]	; (8020be8 <MX_TIM3_Init+0xec>)
 8020bb6:	f002 fc91 	bl	80234dc <HAL_TIM_PWM_ConfigChannel>
 8020bba:	4603      	mov	r3, r0
 8020bbc:	2b00      	cmp	r3, #0
 8020bbe:	d001      	beq.n	8020bc4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8020bc0:	f000 fae0 	bl	8021184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8020bc4:	1d3b      	adds	r3, r7, #4
 8020bc6:	220c      	movs	r2, #12
 8020bc8:	4619      	mov	r1, r3
 8020bca:	4807      	ldr	r0, [pc, #28]	; (8020be8 <MX_TIM3_Init+0xec>)
 8020bcc:	f002 fc86 	bl	80234dc <HAL_TIM_PWM_ConfigChannel>
 8020bd0:	4603      	mov	r3, r0
 8020bd2:	2b00      	cmp	r3, #0
 8020bd4:	d001      	beq.n	8020bda <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8020bd6:	f000 fad5 	bl	8021184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8020bda:	4803      	ldr	r0, [pc, #12]	; (8020be8 <MX_TIM3_Init+0xec>)
 8020bdc:	f000 fd78 	bl	80216d0 <HAL_TIM_MspPostInit>

}
 8020be0:	bf00      	nop
 8020be2:	3728      	adds	r7, #40	; 0x28
 8020be4:	46bd      	mov	sp, r7
 8020be6:	bd80      	pop	{r7, pc}
 8020be8:	20000598 	.word	0x20000598
 8020bec:	40000400 	.word	0x40000400

08020bf0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8020bf0:	b580      	push	{r7, lr}
 8020bf2:	b08c      	sub	sp, #48	; 0x30
 8020bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8020bf6:	f107 030c 	add.w	r3, r7, #12
 8020bfa:	2224      	movs	r2, #36	; 0x24
 8020bfc:	2100      	movs	r1, #0
 8020bfe:	4618      	mov	r0, r3
 8020c00:	f003 fa0c 	bl	802401c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020c04:	1d3b      	adds	r3, r7, #4
 8020c06:	2200      	movs	r2, #0
 8020c08:	601a      	str	r2, [r3, #0]
 8020c0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8020c0c:	4b20      	ldr	r3, [pc, #128]	; (8020c90 <MX_TIM4_Init+0xa0>)
 8020c0e:	4a21      	ldr	r2, [pc, #132]	; (8020c94 <MX_TIM4_Init+0xa4>)
 8020c10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8020c12:	4b1f      	ldr	r3, [pc, #124]	; (8020c90 <MX_TIM4_Init+0xa0>)
 8020c14:	2200      	movs	r2, #0
 8020c16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020c18:	4b1d      	ldr	r3, [pc, #116]	; (8020c90 <MX_TIM4_Init+0xa0>)
 8020c1a:	2200      	movs	r2, #0
 8020c1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8020c1e:	4b1c      	ldr	r3, [pc, #112]	; (8020c90 <MX_TIM4_Init+0xa0>)
 8020c20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020c24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020c26:	4b1a      	ldr	r3, [pc, #104]	; (8020c90 <MX_TIM4_Init+0xa0>)
 8020c28:	2200      	movs	r2, #0
 8020c2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020c2c:	4b18      	ldr	r3, [pc, #96]	; (8020c90 <MX_TIM4_Init+0xa0>)
 8020c2e:	2200      	movs	r2, #0
 8020c30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8020c32:	2303      	movs	r3, #3
 8020c34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8020c36:	2300      	movs	r3, #0
 8020c38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8020c3a:	2301      	movs	r3, #1
 8020c3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8020c3e:	2300      	movs	r3, #0
 8020c40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8020c42:	2300      	movs	r3, #0
 8020c44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8020c46:	2300      	movs	r3, #0
 8020c48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8020c4a:	2301      	movs	r3, #1
 8020c4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8020c4e:	2300      	movs	r3, #0
 8020c50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8020c52:	2300      	movs	r3, #0
 8020c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8020c56:	f107 030c 	add.w	r3, r7, #12
 8020c5a:	4619      	mov	r1, r3
 8020c5c:	480c      	ldr	r0, [pc, #48]	; (8020c90 <MX_TIM4_Init+0xa0>)
 8020c5e:	f002 faa3 	bl	80231a8 <HAL_TIM_Encoder_Init>
 8020c62:	4603      	mov	r3, r0
 8020c64:	2b00      	cmp	r3, #0
 8020c66:	d001      	beq.n	8020c6c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8020c68:	f000 fa8c 	bl	8021184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020c6c:	2300      	movs	r3, #0
 8020c6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020c70:	2300      	movs	r3, #0
 8020c72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8020c74:	1d3b      	adds	r3, r7, #4
 8020c76:	4619      	mov	r1, r3
 8020c78:	4805      	ldr	r0, [pc, #20]	; (8020c90 <MX_TIM4_Init+0xa0>)
 8020c7a:	f003 f8c9 	bl	8023e10 <HAL_TIMEx_MasterConfigSynchronization>
 8020c7e:	4603      	mov	r3, r0
 8020c80:	2b00      	cmp	r3, #0
 8020c82:	d001      	beq.n	8020c88 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8020c84:	f000 fa7e 	bl	8021184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8020c88:	bf00      	nop
 8020c8a:	3730      	adds	r7, #48	; 0x30
 8020c8c:	46bd      	mov	sp, r7
 8020c8e:	bd80      	pop	{r7, pc}
 8020c90:	200004c4 	.word	0x200004c4
 8020c94:	40000800 	.word	0x40000800

08020c98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8020c98:	b580      	push	{r7, lr}
 8020c9a:	b086      	sub	sp, #24
 8020c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8020c9e:	f107 0308 	add.w	r3, r7, #8
 8020ca2:	2200      	movs	r2, #0
 8020ca4:	601a      	str	r2, [r3, #0]
 8020ca6:	605a      	str	r2, [r3, #4]
 8020ca8:	609a      	str	r2, [r3, #8]
 8020caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020cac:	463b      	mov	r3, r7
 8020cae:	2200      	movs	r2, #0
 8020cb0:	601a      	str	r2, [r3, #0]
 8020cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8020cb4:	4b1d      	ldr	r3, [pc, #116]	; (8020d2c <MX_TIM5_Init+0x94>)
 8020cb6:	4a1e      	ldr	r2, [pc, #120]	; (8020d30 <MX_TIM5_Init+0x98>)
 8020cb8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 8020cba:	4b1c      	ldr	r3, [pc, #112]	; (8020d2c <MX_TIM5_Init+0x94>)
 8020cbc:	2204      	movs	r2, #4
 8020cbe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020cc0:	4b1a      	ldr	r3, [pc, #104]	; (8020d2c <MX_TIM5_Init+0x94>)
 8020cc2:	2200      	movs	r2, #0
 8020cc4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 8020cc6:	4b19      	ldr	r3, [pc, #100]	; (8020d2c <MX_TIM5_Init+0x94>)
 8020cc8:	f245 2207 	movw	r2, #20999	; 0x5207
 8020ccc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020cce:	4b17      	ldr	r3, [pc, #92]	; (8020d2c <MX_TIM5_Init+0x94>)
 8020cd0:	2200      	movs	r2, #0
 8020cd2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020cd4:	4b15      	ldr	r3, [pc, #84]	; (8020d2c <MX_TIM5_Init+0x94>)
 8020cd6:	2200      	movs	r2, #0
 8020cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8020cda:	4814      	ldr	r0, [pc, #80]	; (8020d2c <MX_TIM5_Init+0x94>)
 8020cdc:	f002 fa0e 	bl	80230fc <HAL_TIM_Base_Init>
 8020ce0:	4603      	mov	r3, r0
 8020ce2:	2b00      	cmp	r3, #0
 8020ce4:	d001      	beq.n	8020cea <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8020ce6:	f000 fa4d 	bl	8021184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8020cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020cee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8020cf0:	f107 0308 	add.w	r3, r7, #8
 8020cf4:	4619      	mov	r1, r3
 8020cf6:	480d      	ldr	r0, [pc, #52]	; (8020d2c <MX_TIM5_Init+0x94>)
 8020cf8:	f002 fcb6 	bl	8023668 <HAL_TIM_ConfigClockSource>
 8020cfc:	4603      	mov	r3, r0
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	d001      	beq.n	8020d06 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8020d02:	f000 fa3f 	bl	8021184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020d06:	2300      	movs	r3, #0
 8020d08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020d0a:	2300      	movs	r3, #0
 8020d0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8020d0e:	463b      	mov	r3, r7
 8020d10:	4619      	mov	r1, r3
 8020d12:	4806      	ldr	r0, [pc, #24]	; (8020d2c <MX_TIM5_Init+0x94>)
 8020d14:	f003 f87c 	bl	8023e10 <HAL_TIMEx_MasterConfigSynchronization>
 8020d18:	4603      	mov	r3, r0
 8020d1a:	2b00      	cmp	r3, #0
 8020d1c:	d001      	beq.n	8020d22 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8020d1e:	f000 fa31 	bl	8021184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8020d22:	bf00      	nop
 8020d24:	3718      	adds	r7, #24
 8020d26:	46bd      	mov	sp, r7
 8020d28:	bd80      	pop	{r7, pc}
 8020d2a:	bf00      	nop
 8020d2c:	20000558 	.word	0x20000558
 8020d30:	40000c00 	.word	0x40000c00

08020d34 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8020d34:	b580      	push	{r7, lr}
 8020d36:	b082      	sub	sp, #8
 8020d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020d3a:	463b      	mov	r3, r7
 8020d3c:	2200      	movs	r2, #0
 8020d3e:	601a      	str	r2, [r3, #0]
 8020d40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8020d42:	4b15      	ldr	r3, [pc, #84]	; (8020d98 <MX_TIM6_Init+0x64>)
 8020d44:	4a15      	ldr	r2, [pc, #84]	; (8020d9c <MX_TIM6_Init+0x68>)
 8020d46:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8020d48:	4b13      	ldr	r3, [pc, #76]	; (8020d98 <MX_TIM6_Init+0x64>)
 8020d4a:	2204      	movs	r2, #4
 8020d4c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020d4e:	4b12      	ldr	r3, [pc, #72]	; (8020d98 <MX_TIM6_Init+0x64>)
 8020d50:	2200      	movs	r2, #0
 8020d52:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8020d54:	4b10      	ldr	r3, [pc, #64]	; (8020d98 <MX_TIM6_Init+0x64>)
 8020d56:	f642 1203 	movw	r2, #10499	; 0x2903
 8020d5a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020d5c:	4b0e      	ldr	r3, [pc, #56]	; (8020d98 <MX_TIM6_Init+0x64>)
 8020d5e:	2200      	movs	r2, #0
 8020d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8020d62:	480d      	ldr	r0, [pc, #52]	; (8020d98 <MX_TIM6_Init+0x64>)
 8020d64:	f002 f9ca 	bl	80230fc <HAL_TIM_Base_Init>
 8020d68:	4603      	mov	r3, r0
 8020d6a:	2b00      	cmp	r3, #0
 8020d6c:	d001      	beq.n	8020d72 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8020d6e:	f000 fa09 	bl	8021184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020d72:	2300      	movs	r3, #0
 8020d74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020d76:	2300      	movs	r3, #0
 8020d78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8020d7a:	463b      	mov	r3, r7
 8020d7c:	4619      	mov	r1, r3
 8020d7e:	4806      	ldr	r0, [pc, #24]	; (8020d98 <MX_TIM6_Init+0x64>)
 8020d80:	f003 f846 	bl	8023e10 <HAL_TIMEx_MasterConfigSynchronization>
 8020d84:	4603      	mov	r3, r0
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	d001      	beq.n	8020d8e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8020d8a:	f000 f9fb 	bl	8021184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8020d8e:	bf00      	nop
 8020d90:	3708      	adds	r7, #8
 8020d92:	46bd      	mov	sp, r7
 8020d94:	bd80      	pop	{r7, pc}
 8020d96:	bf00      	nop
 8020d98:	200006b8 	.word	0x200006b8
 8020d9c:	40001000 	.word	0x40001000

08020da0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8020da0:	b580      	push	{r7, lr}
 8020da2:	b082      	sub	sp, #8
 8020da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020da6:	463b      	mov	r3, r7
 8020da8:	2200      	movs	r2, #0
 8020daa:	601a      	str	r2, [r3, #0]
 8020dac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8020dae:	4b15      	ldr	r3, [pc, #84]	; (8020e04 <MX_TIM7_Init+0x64>)
 8020db0:	4a15      	ldr	r2, [pc, #84]	; (8020e08 <MX_TIM7_Init+0x68>)
 8020db2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8020db4:	4b13      	ldr	r3, [pc, #76]	; (8020e04 <MX_TIM7_Init+0x64>)
 8020db6:	2204      	movs	r2, #4
 8020db8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020dba:	4b12      	ldr	r3, [pc, #72]	; (8020e04 <MX_TIM7_Init+0x64>)
 8020dbc:	2200      	movs	r2, #0
 8020dbe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 8020dc0:	4b10      	ldr	r3, [pc, #64]	; (8020e04 <MX_TIM7_Init+0x64>)
 8020dc2:	f240 4219 	movw	r2, #1049	; 0x419
 8020dc6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020dc8:	4b0e      	ldr	r3, [pc, #56]	; (8020e04 <MX_TIM7_Init+0x64>)
 8020dca:	2200      	movs	r2, #0
 8020dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8020dce:	480d      	ldr	r0, [pc, #52]	; (8020e04 <MX_TIM7_Init+0x64>)
 8020dd0:	f002 f994 	bl	80230fc <HAL_TIM_Base_Init>
 8020dd4:	4603      	mov	r3, r0
 8020dd6:	2b00      	cmp	r3, #0
 8020dd8:	d001      	beq.n	8020dde <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8020dda:	f000 f9d3 	bl	8021184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020dde:	2300      	movs	r3, #0
 8020de0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020de2:	2300      	movs	r3, #0
 8020de4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8020de6:	463b      	mov	r3, r7
 8020de8:	4619      	mov	r1, r3
 8020dea:	4806      	ldr	r0, [pc, #24]	; (8020e04 <MX_TIM7_Init+0x64>)
 8020dec:	f003 f810 	bl	8023e10 <HAL_TIMEx_MasterConfigSynchronization>
 8020df0:	4603      	mov	r3, r0
 8020df2:	2b00      	cmp	r3, #0
 8020df4:	d001      	beq.n	8020dfa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8020df6:	f000 f9c5 	bl	8021184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8020dfa:	bf00      	nop
 8020dfc:	3708      	adds	r7, #8
 8020dfe:	46bd      	mov	sp, r7
 8020e00:	bd80      	pop	{r7, pc}
 8020e02:	bf00      	nop
 8020e04:	200007b8 	.word	0x200007b8
 8020e08:	40001400 	.word	0x40001400

08020e0c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8020e0c:	b580      	push	{r7, lr}
 8020e0e:	b08c      	sub	sp, #48	; 0x30
 8020e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8020e12:	f107 030c 	add.w	r3, r7, #12
 8020e16:	2224      	movs	r2, #36	; 0x24
 8020e18:	2100      	movs	r1, #0
 8020e1a:	4618      	mov	r0, r3
 8020e1c:	f003 f8fe 	bl	802401c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020e20:	1d3b      	adds	r3, r7, #4
 8020e22:	2200      	movs	r2, #0
 8020e24:	601a      	str	r2, [r3, #0]
 8020e26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8020e28:	4b22      	ldr	r3, [pc, #136]	; (8020eb4 <MX_TIM8_Init+0xa8>)
 8020e2a:	4a23      	ldr	r2, [pc, #140]	; (8020eb8 <MX_TIM8_Init+0xac>)
 8020e2c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8020e2e:	4b21      	ldr	r3, [pc, #132]	; (8020eb4 <MX_TIM8_Init+0xa8>)
 8020e30:	2200      	movs	r2, #0
 8020e32:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020e34:	4b1f      	ldr	r3, [pc, #124]	; (8020eb4 <MX_TIM8_Init+0xa8>)
 8020e36:	2200      	movs	r2, #0
 8020e38:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8020e3a:	4b1e      	ldr	r3, [pc, #120]	; (8020eb4 <MX_TIM8_Init+0xa8>)
 8020e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020e40:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020e42:	4b1c      	ldr	r3, [pc, #112]	; (8020eb4 <MX_TIM8_Init+0xa8>)
 8020e44:	2200      	movs	r2, #0
 8020e46:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8020e48:	4b1a      	ldr	r3, [pc, #104]	; (8020eb4 <MX_TIM8_Init+0xa8>)
 8020e4a:	2200      	movs	r2, #0
 8020e4c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020e4e:	4b19      	ldr	r3, [pc, #100]	; (8020eb4 <MX_TIM8_Init+0xa8>)
 8020e50:	2200      	movs	r2, #0
 8020e52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8020e54:	2303      	movs	r3, #3
 8020e56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8020e58:	2300      	movs	r3, #0
 8020e5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8020e5c:	2301      	movs	r3, #1
 8020e5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8020e60:	2300      	movs	r3, #0
 8020e62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8020e64:	2300      	movs	r3, #0
 8020e66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8020e68:	2300      	movs	r3, #0
 8020e6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8020e6c:	2301      	movs	r3, #1
 8020e6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8020e70:	2300      	movs	r3, #0
 8020e72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8020e74:	2300      	movs	r3, #0
 8020e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8020e78:	f107 030c 	add.w	r3, r7, #12
 8020e7c:	4619      	mov	r1, r3
 8020e7e:	480d      	ldr	r0, [pc, #52]	; (8020eb4 <MX_TIM8_Init+0xa8>)
 8020e80:	f002 f992 	bl	80231a8 <HAL_TIM_Encoder_Init>
 8020e84:	4603      	mov	r3, r0
 8020e86:	2b00      	cmp	r3, #0
 8020e88:	d001      	beq.n	8020e8e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8020e8a:	f000 f97b 	bl	8021184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020e8e:	2300      	movs	r3, #0
 8020e90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020e92:	2300      	movs	r3, #0
 8020e94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8020e96:	1d3b      	adds	r3, r7, #4
 8020e98:	4619      	mov	r1, r3
 8020e9a:	4806      	ldr	r0, [pc, #24]	; (8020eb4 <MX_TIM8_Init+0xa8>)
 8020e9c:	f002 ffb8 	bl	8023e10 <HAL_TIMEx_MasterConfigSynchronization>
 8020ea0:	4603      	mov	r3, r0
 8020ea2:	2b00      	cmp	r3, #0
 8020ea4:	d001      	beq.n	8020eaa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8020ea6:	f000 f96d 	bl	8021184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8020eaa:	bf00      	nop
 8020eac:	3730      	adds	r7, #48	; 0x30
 8020eae:	46bd      	mov	sp, r7
 8020eb0:	bd80      	pop	{r7, pc}
 8020eb2:	bf00      	nop
 8020eb4:	20000484 	.word	0x20000484
 8020eb8:	40010400 	.word	0x40010400

08020ebc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8020ebc:	b580      	push	{r7, lr}
 8020ebe:	b088      	sub	sp, #32
 8020ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8020ec2:	1d3b      	adds	r3, r7, #4
 8020ec4:	2200      	movs	r2, #0
 8020ec6:	601a      	str	r2, [r3, #0]
 8020ec8:	605a      	str	r2, [r3, #4]
 8020eca:	609a      	str	r2, [r3, #8]
 8020ecc:	60da      	str	r2, [r3, #12]
 8020ece:	611a      	str	r2, [r3, #16]
 8020ed0:	615a      	str	r2, [r3, #20]
 8020ed2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8020ed4:	4b1e      	ldr	r3, [pc, #120]	; (8020f50 <MX_TIM11_Init+0x94>)
 8020ed6:	4a1f      	ldr	r2, [pc, #124]	; (8020f54 <MX_TIM11_Init+0x98>)
 8020ed8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8020eda:	4b1d      	ldr	r3, [pc, #116]	; (8020f50 <MX_TIM11_Init+0x94>)
 8020edc:	2200      	movs	r2, #0
 8020ede:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020ee0:	4b1b      	ldr	r3, [pc, #108]	; (8020f50 <MX_TIM11_Init+0x94>)
 8020ee2:	2200      	movs	r2, #0
 8020ee4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 8020ee6:	4b1a      	ldr	r3, [pc, #104]	; (8020f50 <MX_TIM11_Init+0x94>)
 8020ee8:	f240 628f 	movw	r2, #1679	; 0x68f
 8020eec:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020eee:	4b18      	ldr	r3, [pc, #96]	; (8020f50 <MX_TIM11_Init+0x94>)
 8020ef0:	2200      	movs	r2, #0
 8020ef2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020ef4:	4b16      	ldr	r3, [pc, #88]	; (8020f50 <MX_TIM11_Init+0x94>)
 8020ef6:	2200      	movs	r2, #0
 8020ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8020efa:	4815      	ldr	r0, [pc, #84]	; (8020f50 <MX_TIM11_Init+0x94>)
 8020efc:	f002 f8fe 	bl	80230fc <HAL_TIM_Base_Init>
 8020f00:	4603      	mov	r3, r0
 8020f02:	2b00      	cmp	r3, #0
 8020f04:	d001      	beq.n	8020f0a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8020f06:	f000 f93d 	bl	8021184 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8020f0a:	4811      	ldr	r0, [pc, #68]	; (8020f50 <MX_TIM11_Init+0x94>)
 8020f0c:	f002 f921 	bl	8023152 <HAL_TIM_PWM_Init>
 8020f10:	4603      	mov	r3, r0
 8020f12:	2b00      	cmp	r3, #0
 8020f14:	d001      	beq.n	8020f1a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8020f16:	f000 f935 	bl	8021184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8020f1a:	2360      	movs	r3, #96	; 0x60
 8020f1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8020f1e:	2300      	movs	r3, #0
 8020f20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8020f22:	2300      	movs	r3, #0
 8020f24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8020f26:	2300      	movs	r3, #0
 8020f28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8020f2a:	1d3b      	adds	r3, r7, #4
 8020f2c:	2200      	movs	r2, #0
 8020f2e:	4619      	mov	r1, r3
 8020f30:	4807      	ldr	r0, [pc, #28]	; (8020f50 <MX_TIM11_Init+0x94>)
 8020f32:	f002 fad3 	bl	80234dc <HAL_TIM_PWM_ConfigChannel>
 8020f36:	4603      	mov	r3, r0
 8020f38:	2b00      	cmp	r3, #0
 8020f3a:	d001      	beq.n	8020f40 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8020f3c:	f000 f922 	bl	8021184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8020f40:	4803      	ldr	r0, [pc, #12]	; (8020f50 <MX_TIM11_Init+0x94>)
 8020f42:	f000 fbc5 	bl	80216d0 <HAL_TIM_MspPostInit>

}
 8020f46:	bf00      	nop
 8020f48:	3720      	adds	r7, #32
 8020f4a:	46bd      	mov	sp, r7
 8020f4c:	bd80      	pop	{r7, pc}
 8020f4e:	bf00      	nop
 8020f50:	20000678 	.word	0x20000678
 8020f54:	40014800 	.word	0x40014800

08020f58 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8020f58:	b580      	push	{r7, lr}
 8020f5a:	b088      	sub	sp, #32
 8020f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8020f5e:	1d3b      	adds	r3, r7, #4
 8020f60:	2200      	movs	r2, #0
 8020f62:	601a      	str	r2, [r3, #0]
 8020f64:	605a      	str	r2, [r3, #4]
 8020f66:	609a      	str	r2, [r3, #8]
 8020f68:	60da      	str	r2, [r3, #12]
 8020f6a:	611a      	str	r2, [r3, #16]
 8020f6c:	615a      	str	r2, [r3, #20]
 8020f6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8020f70:	4b1a      	ldr	r3, [pc, #104]	; (8020fdc <MX_TIM12_Init+0x84>)
 8020f72:	4a1b      	ldr	r2, [pc, #108]	; (8020fe0 <MX_TIM12_Init+0x88>)
 8020f74:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 8020f76:	4b19      	ldr	r3, [pc, #100]	; (8020fdc <MX_TIM12_Init+0x84>)
 8020f78:	f44f 725c 	mov.w	r2, #880	; 0x370
 8020f7c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020f7e:	4b17      	ldr	r3, [pc, #92]	; (8020fdc <MX_TIM12_Init+0x84>)
 8020f80:	2200      	movs	r2, #0
 8020f82:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 8020f84:	4b15      	ldr	r3, [pc, #84]	; (8020fdc <MX_TIM12_Init+0x84>)
 8020f86:	2235      	movs	r2, #53	; 0x35
 8020f88:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020f8a:	4b14      	ldr	r3, [pc, #80]	; (8020fdc <MX_TIM12_Init+0x84>)
 8020f8c:	2200      	movs	r2, #0
 8020f8e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020f90:	4b12      	ldr	r3, [pc, #72]	; (8020fdc <MX_TIM12_Init+0x84>)
 8020f92:	2200      	movs	r2, #0
 8020f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8020f96:	4811      	ldr	r0, [pc, #68]	; (8020fdc <MX_TIM12_Init+0x84>)
 8020f98:	f002 f8db 	bl	8023152 <HAL_TIM_PWM_Init>
 8020f9c:	4603      	mov	r3, r0
 8020f9e:	2b00      	cmp	r3, #0
 8020fa0:	d001      	beq.n	8020fa6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8020fa2:	f000 f8ef 	bl	8021184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8020fa6:	2360      	movs	r3, #96	; 0x60
 8020fa8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8020faa:	2300      	movs	r3, #0
 8020fac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8020fae:	2300      	movs	r3, #0
 8020fb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8020fb2:	2300      	movs	r3, #0
 8020fb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8020fb6:	1d3b      	adds	r3, r7, #4
 8020fb8:	2204      	movs	r2, #4
 8020fba:	4619      	mov	r1, r3
 8020fbc:	4807      	ldr	r0, [pc, #28]	; (8020fdc <MX_TIM12_Init+0x84>)
 8020fbe:	f002 fa8d 	bl	80234dc <HAL_TIM_PWM_ConfigChannel>
 8020fc2:	4603      	mov	r3, r0
 8020fc4:	2b00      	cmp	r3, #0
 8020fc6:	d001      	beq.n	8020fcc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8020fc8:	f000 f8dc 	bl	8021184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8020fcc:	4803      	ldr	r0, [pc, #12]	; (8020fdc <MX_TIM12_Init+0x84>)
 8020fce:	f000 fb7f 	bl	80216d0 <HAL_TIM_MspPostInit>

}
 8020fd2:	bf00      	nop
 8020fd4:	3720      	adds	r7, #32
 8020fd6:	46bd      	mov	sp, r7
 8020fd8:	bd80      	pop	{r7, pc}
 8020fda:	bf00      	nop
 8020fdc:	20000778 	.word	0x20000778
 8020fe0:	40001800 	.word	0x40001800

08020fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020fe4:	b580      	push	{r7, lr}
 8020fe6:	b08a      	sub	sp, #40	; 0x28
 8020fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020fea:	f107 0314 	add.w	r3, r7, #20
 8020fee:	2200      	movs	r2, #0
 8020ff0:	601a      	str	r2, [r3, #0]
 8020ff2:	605a      	str	r2, [r3, #4]
 8020ff4:	609a      	str	r2, [r3, #8]
 8020ff6:	60da      	str	r2, [r3, #12]
 8020ff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020ffa:	2300      	movs	r3, #0
 8020ffc:	613b      	str	r3, [r7, #16]
 8020ffe:	4b5c      	ldr	r3, [pc, #368]	; (8021170 <MX_GPIO_Init+0x18c>)
 8021000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021002:	4a5b      	ldr	r2, [pc, #364]	; (8021170 <MX_GPIO_Init+0x18c>)
 8021004:	f043 0304 	orr.w	r3, r3, #4
 8021008:	6313      	str	r3, [r2, #48]	; 0x30
 802100a:	4b59      	ldr	r3, [pc, #356]	; (8021170 <MX_GPIO_Init+0x18c>)
 802100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802100e:	f003 0304 	and.w	r3, r3, #4
 8021012:	613b      	str	r3, [r7, #16]
 8021014:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8021016:	2300      	movs	r3, #0
 8021018:	60fb      	str	r3, [r7, #12]
 802101a:	4b55      	ldr	r3, [pc, #340]	; (8021170 <MX_GPIO_Init+0x18c>)
 802101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802101e:	4a54      	ldr	r2, [pc, #336]	; (8021170 <MX_GPIO_Init+0x18c>)
 8021020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021024:	6313      	str	r3, [r2, #48]	; 0x30
 8021026:	4b52      	ldr	r3, [pc, #328]	; (8021170 <MX_GPIO_Init+0x18c>)
 8021028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802102e:	60fb      	str	r3, [r7, #12]
 8021030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8021032:	2300      	movs	r3, #0
 8021034:	60bb      	str	r3, [r7, #8]
 8021036:	4b4e      	ldr	r3, [pc, #312]	; (8021170 <MX_GPIO_Init+0x18c>)
 8021038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802103a:	4a4d      	ldr	r2, [pc, #308]	; (8021170 <MX_GPIO_Init+0x18c>)
 802103c:	f043 0301 	orr.w	r3, r3, #1
 8021040:	6313      	str	r3, [r2, #48]	; 0x30
 8021042:	4b4b      	ldr	r3, [pc, #300]	; (8021170 <MX_GPIO_Init+0x18c>)
 8021044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021046:	f003 0301 	and.w	r3, r3, #1
 802104a:	60bb      	str	r3, [r7, #8]
 802104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802104e:	2300      	movs	r3, #0
 8021050:	607b      	str	r3, [r7, #4]
 8021052:	4b47      	ldr	r3, [pc, #284]	; (8021170 <MX_GPIO_Init+0x18c>)
 8021054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021056:	4a46      	ldr	r2, [pc, #280]	; (8021170 <MX_GPIO_Init+0x18c>)
 8021058:	f043 0302 	orr.w	r3, r3, #2
 802105c:	6313      	str	r3, [r2, #48]	; 0x30
 802105e:	4b44      	ldr	r3, [pc, #272]	; (8021170 <MX_GPIO_Init+0x18c>)
 8021060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021062:	f003 0302 	and.w	r3, r3, #2
 8021066:	607b      	str	r3, [r7, #4]
 8021068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802106a:	2300      	movs	r3, #0
 802106c:	603b      	str	r3, [r7, #0]
 802106e:	4b40      	ldr	r3, [pc, #256]	; (8021170 <MX_GPIO_Init+0x18c>)
 8021070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021072:	4a3f      	ldr	r2, [pc, #252]	; (8021170 <MX_GPIO_Init+0x18c>)
 8021074:	f043 0308 	orr.w	r3, r3, #8
 8021078:	6313      	str	r3, [r2, #48]	; 0x30
 802107a:	4b3d      	ldr	r3, [pc, #244]	; (8021170 <MX_GPIO_Init+0x18c>)
 802107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802107e:	f003 0308 	and.w	r3, r3, #8
 8021082:	603b      	str	r3, [r7, #0]
 8021084:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8021086:	2200      	movs	r2, #0
 8021088:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 802108c:	4839      	ldr	r0, [pc, #228]	; (8021174 <MX_GPIO_Init+0x190>)
 802108e:	f001 fa57 	bl	8022540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8021092:	2201      	movs	r2, #1
 8021094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8021098:	4837      	ldr	r0, [pc, #220]	; (8021178 <MX_GPIO_Init+0x194>)
 802109a:	f001 fa51 	bl	8022540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 802109e:	2200      	movs	r2, #0
 80210a0:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 80210a4:	4835      	ldr	r0, [pc, #212]	; (802117c <MX_GPIO_Init+0x198>)
 80210a6:	f001 fa4b 	bl	8022540 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80210aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80210ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80210b0:	2301      	movs	r3, #1
 80210b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80210b4:	2300      	movs	r3, #0
 80210b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80210b8:	2300      	movs	r3, #0
 80210ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80210bc:	f107 0314 	add.w	r3, r7, #20
 80210c0:	4619      	mov	r1, r3
 80210c2:	482c      	ldr	r0, [pc, #176]	; (8021174 <MX_GPIO_Init+0x190>)
 80210c4:	f001 f8a2 	bl	802220c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80210c8:	2307      	movs	r3, #7
 80210ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80210cc:	2300      	movs	r3, #0
 80210ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80210d0:	2301      	movs	r3, #1
 80210d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80210d4:	f107 0314 	add.w	r3, r7, #20
 80210d8:	4619      	mov	r1, r3
 80210da:	4827      	ldr	r0, [pc, #156]	; (8021178 <MX_GPIO_Init+0x194>)
 80210dc:	f001 f896 	bl	802220c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80210e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80210e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80210e6:	2301      	movs	r3, #1
 80210e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80210ea:	2300      	movs	r3, #0
 80210ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80210ee:	2300      	movs	r3, #0
 80210f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80210f2:	f107 0314 	add.w	r3, r7, #20
 80210f6:	4619      	mov	r1, r3
 80210f8:	481f      	ldr	r0, [pc, #124]	; (8021178 <MX_GPIO_Init+0x194>)
 80210fa:	f001 f887 	bl	802220c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 80210fe:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8021102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021104:	2300      	movs	r3, #0
 8021106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021108:	2300      	movs	r3, #0
 802110a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802110c:	f107 0314 	add.w	r3, r7, #20
 8021110:	4619      	mov	r1, r3
 8021112:	4819      	ldr	r0, [pc, #100]	; (8021178 <MX_GPIO_Init+0x194>)
 8021114:	f001 f87a 	bl	802220c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8021118:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 802111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802111e:	2301      	movs	r3, #1
 8021120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021122:	2300      	movs	r3, #0
 8021124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021126:	2300      	movs	r3, #0
 8021128:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802112a:	f107 0314 	add.w	r3, r7, #20
 802112e:	4619      	mov	r1, r3
 8021130:	4812      	ldr	r0, [pc, #72]	; (802117c <MX_GPIO_Init+0x198>)
 8021132:	f001 f86b 	bl	802220c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8021136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802113c:	2300      	movs	r3, #0
 802113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021140:	2301      	movs	r3, #1
 8021142:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021144:	f107 0314 	add.w	r3, r7, #20
 8021148:	4619      	mov	r1, r3
 802114a:	480c      	ldr	r0, [pc, #48]	; (802117c <MX_GPIO_Init+0x198>)
 802114c:	f001 f85e 	bl	802220c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021150:	2304      	movs	r3, #4
 8021152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021154:	2300      	movs	r3, #0
 8021156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021158:	2300      	movs	r3, #0
 802115a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802115c:	f107 0314 	add.w	r3, r7, #20
 8021160:	4619      	mov	r1, r3
 8021162:	4807      	ldr	r0, [pc, #28]	; (8021180 <MX_GPIO_Init+0x19c>)
 8021164:	f001 f852 	bl	802220c <HAL_GPIO_Init>

}
 8021168:	bf00      	nop
 802116a:	3728      	adds	r7, #40	; 0x28
 802116c:	46bd      	mov	sp, r7
 802116e:	bd80      	pop	{r7, pc}
 8021170:	40023800 	.word	0x40023800
 8021174:	40020800 	.word	0x40020800
 8021178:	40020400 	.word	0x40020400
 802117c:	40020000 	.word	0x40020000
 8021180:	40020c00 	.word	0x40020c00

08021184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8021184:	b480      	push	{r7}
 8021186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8021188:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 802118a:	e7fe      	b.n	802118a <Error_Handler+0x6>

0802118c <_ZN5MotorC1Ev>:
#include "motor.hpp"

Motor::Motor() {}
 802118c:	b480      	push	{r7}
 802118e:	b083      	sub	sp, #12
 8021190:	af00      	add	r7, sp, #0
 8021192:	6078      	str	r0, [r7, #4]
 8021194:	687b      	ldr	r3, [r7, #4]
 8021196:	4618      	mov	r0, r3
 8021198:	370c      	adds	r7, #12
 802119a:	46bd      	mov	sp, r7
 802119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211a0:	4770      	bx	lr

080211a2 <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0), write_state_flags_(0), exception_flags_(0), master_count_(0), corner_marker_count_(0), cross_line_count_(0) {}
 80211a2:	b480      	push	{r7}
 80211a4:	b083      	sub	sp, #12
 80211a6:	af00      	add	r7, sp, #0
 80211a8:	6078      	str	r0, [r7, #4]
 80211aa:	687b      	ldr	r3, [r7, #4]
 80211ac:	2200      	movs	r2, #0
 80211ae:	701a      	strb	r2, [r3, #0]
 80211b0:	687b      	ldr	r3, [r7, #4]
 80211b2:	2200      	movs	r2, #0
 80211b4:	705a      	strb	r2, [r3, #1]
 80211b6:	687b      	ldr	r3, [r7, #4]
 80211b8:	2200      	movs	r2, #0
 80211ba:	709a      	strb	r2, [r3, #2]
 80211bc:	687b      	ldr	r3, [r7, #4]
 80211be:	2200      	movs	r2, #0
 80211c0:	70da      	strb	r2, [r3, #3]
 80211c2:	687b      	ldr	r3, [r7, #4]
 80211c4:	2200      	movs	r2, #0
 80211c6:	711a      	strb	r2, [r3, #4]
 80211c8:	687b      	ldr	r3, [r7, #4]
 80211ca:	2200      	movs	r2, #0
 80211cc:	715a      	strb	r2, [r3, #5]
 80211ce:	687b      	ldr	r3, [r7, #4]
 80211d0:	4618      	mov	r0, r3
 80211d2:	370c      	adds	r7, #12
 80211d4:	46bd      	mov	sp, r7
 80211d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211da:	4770      	bx	lr

080211dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80211dc:	b480      	push	{r7}
 80211de:	b083      	sub	sp, #12
 80211e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80211e2:	2300      	movs	r3, #0
 80211e4:	607b      	str	r3, [r7, #4]
 80211e6:	4b10      	ldr	r3, [pc, #64]	; (8021228 <HAL_MspInit+0x4c>)
 80211e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80211ea:	4a0f      	ldr	r2, [pc, #60]	; (8021228 <HAL_MspInit+0x4c>)
 80211ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80211f0:	6453      	str	r3, [r2, #68]	; 0x44
 80211f2:	4b0d      	ldr	r3, [pc, #52]	; (8021228 <HAL_MspInit+0x4c>)
 80211f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80211f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80211fa:	607b      	str	r3, [r7, #4]
 80211fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80211fe:	2300      	movs	r3, #0
 8021200:	603b      	str	r3, [r7, #0]
 8021202:	4b09      	ldr	r3, [pc, #36]	; (8021228 <HAL_MspInit+0x4c>)
 8021204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021206:	4a08      	ldr	r2, [pc, #32]	; (8021228 <HAL_MspInit+0x4c>)
 8021208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802120c:	6413      	str	r3, [r2, #64]	; 0x40
 802120e:	4b06      	ldr	r3, [pc, #24]	; (8021228 <HAL_MspInit+0x4c>)
 8021210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021216:	603b      	str	r3, [r7, #0]
 8021218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802121a:	bf00      	nop
 802121c:	370c      	adds	r7, #12
 802121e:	46bd      	mov	sp, r7
 8021220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021224:	4770      	bx	lr
 8021226:	bf00      	nop
 8021228:	40023800 	.word	0x40023800

0802122c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 802122c:	b580      	push	{r7, lr}
 802122e:	b08a      	sub	sp, #40	; 0x28
 8021230:	af00      	add	r7, sp, #0
 8021232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021234:	f107 0314 	add.w	r3, r7, #20
 8021238:	2200      	movs	r2, #0
 802123a:	601a      	str	r2, [r3, #0]
 802123c:	605a      	str	r2, [r3, #4]
 802123e:	609a      	str	r2, [r3, #8]
 8021240:	60da      	str	r2, [r3, #12]
 8021242:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	681b      	ldr	r3, [r3, #0]
 8021248:	4a24      	ldr	r2, [pc, #144]	; (80212dc <HAL_ADC_MspInit+0xb0>)
 802124a:	4293      	cmp	r3, r2
 802124c:	d141      	bne.n	80212d2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 802124e:	2300      	movs	r3, #0
 8021250:	613b      	str	r3, [r7, #16]
 8021252:	4b23      	ldr	r3, [pc, #140]	; (80212e0 <HAL_ADC_MspInit+0xb4>)
 8021254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021256:	4a22      	ldr	r2, [pc, #136]	; (80212e0 <HAL_ADC_MspInit+0xb4>)
 8021258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802125c:	6453      	str	r3, [r2, #68]	; 0x44
 802125e:	4b20      	ldr	r3, [pc, #128]	; (80212e0 <HAL_ADC_MspInit+0xb4>)
 8021260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021266:	613b      	str	r3, [r7, #16]
 8021268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802126a:	2300      	movs	r3, #0
 802126c:	60fb      	str	r3, [r7, #12]
 802126e:	4b1c      	ldr	r3, [pc, #112]	; (80212e0 <HAL_ADC_MspInit+0xb4>)
 8021270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021272:	4a1b      	ldr	r2, [pc, #108]	; (80212e0 <HAL_ADC_MspInit+0xb4>)
 8021274:	f043 0304 	orr.w	r3, r3, #4
 8021278:	6313      	str	r3, [r2, #48]	; 0x30
 802127a:	4b19      	ldr	r3, [pc, #100]	; (80212e0 <HAL_ADC_MspInit+0xb4>)
 802127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802127e:	f003 0304 	and.w	r3, r3, #4
 8021282:	60fb      	str	r3, [r7, #12]
 8021284:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021286:	2300      	movs	r3, #0
 8021288:	60bb      	str	r3, [r7, #8]
 802128a:	4b15      	ldr	r3, [pc, #84]	; (80212e0 <HAL_ADC_MspInit+0xb4>)
 802128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802128e:	4a14      	ldr	r2, [pc, #80]	; (80212e0 <HAL_ADC_MspInit+0xb4>)
 8021290:	f043 0301 	orr.w	r3, r3, #1
 8021294:	6313      	str	r3, [r2, #48]	; 0x30
 8021296:	4b12      	ldr	r3, [pc, #72]	; (80212e0 <HAL_ADC_MspInit+0xb4>)
 8021298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802129a:	f003 0301 	and.w	r3, r3, #1
 802129e:	60bb      	str	r3, [r7, #8]
 80212a0:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80212a2:	233f      	movs	r3, #63	; 0x3f
 80212a4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80212a6:	2303      	movs	r3, #3
 80212a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80212aa:	2300      	movs	r3, #0
 80212ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80212ae:	f107 0314 	add.w	r3, r7, #20
 80212b2:	4619      	mov	r1, r3
 80212b4:	480b      	ldr	r0, [pc, #44]	; (80212e4 <HAL_ADC_MspInit+0xb8>)
 80212b6:	f000 ffa9 	bl	802220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80212ba:	23ff      	movs	r3, #255	; 0xff
 80212bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80212be:	2303      	movs	r3, #3
 80212c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80212c2:	2300      	movs	r3, #0
 80212c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80212c6:	f107 0314 	add.w	r3, r7, #20
 80212ca:	4619      	mov	r1, r3
 80212cc:	4806      	ldr	r0, [pc, #24]	; (80212e8 <HAL_ADC_MspInit+0xbc>)
 80212ce:	f000 ff9d 	bl	802220c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80212d2:	bf00      	nop
 80212d4:	3728      	adds	r7, #40	; 0x28
 80212d6:	46bd      	mov	sp, r7
 80212d8:	bd80      	pop	{r7, pc}
 80212da:	bf00      	nop
 80212dc:	40012000 	.word	0x40012000
 80212e0:	40023800 	.word	0x40023800
 80212e4:	40020800 	.word	0x40020800
 80212e8:	40020000 	.word	0x40020000

080212ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80212ec:	b580      	push	{r7, lr}
 80212ee:	b08a      	sub	sp, #40	; 0x28
 80212f0:	af00      	add	r7, sp, #0
 80212f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80212f4:	f107 0314 	add.w	r3, r7, #20
 80212f8:	2200      	movs	r2, #0
 80212fa:	601a      	str	r2, [r3, #0]
 80212fc:	605a      	str	r2, [r3, #4]
 80212fe:	609a      	str	r2, [r3, #8]
 8021300:	60da      	str	r2, [r3, #12]
 8021302:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8021304:	687b      	ldr	r3, [r7, #4]
 8021306:	681b      	ldr	r3, [r3, #0]
 8021308:	4a19      	ldr	r2, [pc, #100]	; (8021370 <HAL_I2C_MspInit+0x84>)
 802130a:	4293      	cmp	r3, r2
 802130c:	d12c      	bne.n	8021368 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802130e:	2300      	movs	r3, #0
 8021310:	613b      	str	r3, [r7, #16]
 8021312:	4b18      	ldr	r3, [pc, #96]	; (8021374 <HAL_I2C_MspInit+0x88>)
 8021314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021316:	4a17      	ldr	r2, [pc, #92]	; (8021374 <HAL_I2C_MspInit+0x88>)
 8021318:	f043 0302 	orr.w	r3, r3, #2
 802131c:	6313      	str	r3, [r2, #48]	; 0x30
 802131e:	4b15      	ldr	r3, [pc, #84]	; (8021374 <HAL_I2C_MspInit+0x88>)
 8021320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021322:	f003 0302 	and.w	r3, r3, #2
 8021326:	613b      	str	r3, [r7, #16]
 8021328:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802132a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021330:	2312      	movs	r3, #18
 8021332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021334:	2301      	movs	r3, #1
 8021336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021338:	2303      	movs	r3, #3
 802133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 802133c:	2304      	movs	r3, #4
 802133e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021340:	f107 0314 	add.w	r3, r7, #20
 8021344:	4619      	mov	r1, r3
 8021346:	480c      	ldr	r0, [pc, #48]	; (8021378 <HAL_I2C_MspInit+0x8c>)
 8021348:	f000 ff60 	bl	802220c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 802134c:	2300      	movs	r3, #0
 802134e:	60fb      	str	r3, [r7, #12]
 8021350:	4b08      	ldr	r3, [pc, #32]	; (8021374 <HAL_I2C_MspInit+0x88>)
 8021352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021354:	4a07      	ldr	r2, [pc, #28]	; (8021374 <HAL_I2C_MspInit+0x88>)
 8021356:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802135a:	6413      	str	r3, [r2, #64]	; 0x40
 802135c:	4b05      	ldr	r3, [pc, #20]	; (8021374 <HAL_I2C_MspInit+0x88>)
 802135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8021364:	60fb      	str	r3, [r7, #12]
 8021366:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8021368:	bf00      	nop
 802136a:	3728      	adds	r7, #40	; 0x28
 802136c:	46bd      	mov	sp, r7
 802136e:	bd80      	pop	{r7, pc}
 8021370:	40005800 	.word	0x40005800
 8021374:	40023800 	.word	0x40023800
 8021378:	40020400 	.word	0x40020400

0802137c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 802137c:	b580      	push	{r7, lr}
 802137e:	b08a      	sub	sp, #40	; 0x28
 8021380:	af00      	add	r7, sp, #0
 8021382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021384:	f107 0314 	add.w	r3, r7, #20
 8021388:	2200      	movs	r2, #0
 802138a:	601a      	str	r2, [r3, #0]
 802138c:	605a      	str	r2, [r3, #4]
 802138e:	609a      	str	r2, [r3, #8]
 8021390:	60da      	str	r2, [r3, #12]
 8021392:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8021394:	687b      	ldr	r3, [r7, #4]
 8021396:	681b      	ldr	r3, [r3, #0]
 8021398:	4a19      	ldr	r2, [pc, #100]	; (8021400 <HAL_SPI_MspInit+0x84>)
 802139a:	4293      	cmp	r3, r2
 802139c:	d12c      	bne.n	80213f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 802139e:	2300      	movs	r3, #0
 80213a0:	613b      	str	r3, [r7, #16]
 80213a2:	4b18      	ldr	r3, [pc, #96]	; (8021404 <HAL_SPI_MspInit+0x88>)
 80213a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80213a6:	4a17      	ldr	r2, [pc, #92]	; (8021404 <HAL_SPI_MspInit+0x88>)
 80213a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80213ac:	6413      	str	r3, [r2, #64]	; 0x40
 80213ae:	4b15      	ldr	r3, [pc, #84]	; (8021404 <HAL_SPI_MspInit+0x88>)
 80213b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80213b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80213b6:	613b      	str	r3, [r7, #16]
 80213b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80213ba:	2300      	movs	r3, #0
 80213bc:	60fb      	str	r3, [r7, #12]
 80213be:	4b11      	ldr	r3, [pc, #68]	; (8021404 <HAL_SPI_MspInit+0x88>)
 80213c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80213c2:	4a10      	ldr	r2, [pc, #64]	; (8021404 <HAL_SPI_MspInit+0x88>)
 80213c4:	f043 0304 	orr.w	r3, r3, #4
 80213c8:	6313      	str	r3, [r2, #48]	; 0x30
 80213ca:	4b0e      	ldr	r3, [pc, #56]	; (8021404 <HAL_SPI_MspInit+0x88>)
 80213cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80213ce:	f003 0304 	and.w	r3, r3, #4
 80213d2:	60fb      	str	r3, [r7, #12]
 80213d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80213d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80213da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80213dc:	2302      	movs	r3, #2
 80213de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80213e0:	2300      	movs	r3, #0
 80213e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80213e4:	2303      	movs	r3, #3
 80213e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80213e8:	2306      	movs	r3, #6
 80213ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80213ec:	f107 0314 	add.w	r3, r7, #20
 80213f0:	4619      	mov	r1, r3
 80213f2:	4805      	ldr	r0, [pc, #20]	; (8021408 <HAL_SPI_MspInit+0x8c>)
 80213f4:	f000 ff0a 	bl	802220c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80213f8:	bf00      	nop
 80213fa:	3728      	adds	r7, #40	; 0x28
 80213fc:	46bd      	mov	sp, r7
 80213fe:	bd80      	pop	{r7, pc}
 8021400:	40003c00 	.word	0x40003c00
 8021404:	40023800 	.word	0x40023800
 8021408:	40020800 	.word	0x40020800

0802140c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 802140c:	b480      	push	{r7}
 802140e:	b087      	sub	sp, #28
 8021410:	af00      	add	r7, sp, #0
 8021412:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8021414:	687b      	ldr	r3, [r7, #4]
 8021416:	681b      	ldr	r3, [r3, #0]
 8021418:	4a1f      	ldr	r2, [pc, #124]	; (8021498 <HAL_TIM_PWM_MspInit+0x8c>)
 802141a:	4293      	cmp	r3, r2
 802141c:	d10e      	bne.n	802143c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 802141e:	2300      	movs	r3, #0
 8021420:	617b      	str	r3, [r7, #20]
 8021422:	4b1e      	ldr	r3, [pc, #120]	; (802149c <HAL_TIM_PWM_MspInit+0x90>)
 8021424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021426:	4a1d      	ldr	r2, [pc, #116]	; (802149c <HAL_TIM_PWM_MspInit+0x90>)
 8021428:	f043 0301 	orr.w	r3, r3, #1
 802142c:	6453      	str	r3, [r2, #68]	; 0x44
 802142e:	4b1b      	ldr	r3, [pc, #108]	; (802149c <HAL_TIM_PWM_MspInit+0x90>)
 8021430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021432:	f003 0301 	and.w	r3, r3, #1
 8021436:	617b      	str	r3, [r7, #20]
 8021438:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 802143a:	e026      	b.n	802148a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 802143c:	687b      	ldr	r3, [r7, #4]
 802143e:	681b      	ldr	r3, [r3, #0]
 8021440:	4a17      	ldr	r2, [pc, #92]	; (80214a0 <HAL_TIM_PWM_MspInit+0x94>)
 8021442:	4293      	cmp	r3, r2
 8021444:	d10e      	bne.n	8021464 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8021446:	2300      	movs	r3, #0
 8021448:	613b      	str	r3, [r7, #16]
 802144a:	4b14      	ldr	r3, [pc, #80]	; (802149c <HAL_TIM_PWM_MspInit+0x90>)
 802144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802144e:	4a13      	ldr	r2, [pc, #76]	; (802149c <HAL_TIM_PWM_MspInit+0x90>)
 8021450:	f043 0302 	orr.w	r3, r3, #2
 8021454:	6413      	str	r3, [r2, #64]	; 0x40
 8021456:	4b11      	ldr	r3, [pc, #68]	; (802149c <HAL_TIM_PWM_MspInit+0x90>)
 8021458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802145a:	f003 0302 	and.w	r3, r3, #2
 802145e:	613b      	str	r3, [r7, #16]
 8021460:	693b      	ldr	r3, [r7, #16]
}
 8021462:	e012      	b.n	802148a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8021464:	687b      	ldr	r3, [r7, #4]
 8021466:	681b      	ldr	r3, [r3, #0]
 8021468:	4a0e      	ldr	r2, [pc, #56]	; (80214a4 <HAL_TIM_PWM_MspInit+0x98>)
 802146a:	4293      	cmp	r3, r2
 802146c:	d10d      	bne.n	802148a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 802146e:	2300      	movs	r3, #0
 8021470:	60fb      	str	r3, [r7, #12]
 8021472:	4b0a      	ldr	r3, [pc, #40]	; (802149c <HAL_TIM_PWM_MspInit+0x90>)
 8021474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021476:	4a09      	ldr	r2, [pc, #36]	; (802149c <HAL_TIM_PWM_MspInit+0x90>)
 8021478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802147c:	6413      	str	r3, [r2, #64]	; 0x40
 802147e:	4b07      	ldr	r3, [pc, #28]	; (802149c <HAL_TIM_PWM_MspInit+0x90>)
 8021480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021486:	60fb      	str	r3, [r7, #12]
 8021488:	68fb      	ldr	r3, [r7, #12]
}
 802148a:	bf00      	nop
 802148c:	371c      	adds	r7, #28
 802148e:	46bd      	mov	sp, r7
 8021490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021494:	4770      	bx	lr
 8021496:	bf00      	nop
 8021498:	40010000 	.word	0x40010000
 802149c:	40023800 	.word	0x40023800
 80214a0:	40000400 	.word	0x40000400
 80214a4:	40001800 	.word	0x40001800

080214a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80214a8:	b580      	push	{r7, lr}
 80214aa:	b088      	sub	sp, #32
 80214ac:	af00      	add	r7, sp, #0
 80214ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80214b0:	687b      	ldr	r3, [r7, #4]
 80214b2:	681b      	ldr	r3, [r3, #0]
 80214b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80214b8:	d116      	bne.n	80214e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80214ba:	2300      	movs	r3, #0
 80214bc:	61fb      	str	r3, [r7, #28]
 80214be:	4b40      	ldr	r3, [pc, #256]	; (80215c0 <HAL_TIM_Base_MspInit+0x118>)
 80214c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214c2:	4a3f      	ldr	r2, [pc, #252]	; (80215c0 <HAL_TIM_Base_MspInit+0x118>)
 80214c4:	f043 0301 	orr.w	r3, r3, #1
 80214c8:	6413      	str	r3, [r2, #64]	; 0x40
 80214ca:	4b3d      	ldr	r3, [pc, #244]	; (80215c0 <HAL_TIM_Base_MspInit+0x118>)
 80214cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214ce:	f003 0301 	and.w	r3, r3, #1
 80214d2:	61fb      	str	r3, [r7, #28]
 80214d4:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80214d6:	2200      	movs	r2, #0
 80214d8:	2100      	movs	r1, #0
 80214da:	201c      	movs	r0, #28
 80214dc:	f000 fe5f 	bl	802219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80214e0:	201c      	movs	r0, #28
 80214e2:	f000 fe78 	bl	80221d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80214e6:	e066      	b.n	80215b6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 80214e8:	687b      	ldr	r3, [r7, #4]
 80214ea:	681b      	ldr	r3, [r3, #0]
 80214ec:	4a35      	ldr	r2, [pc, #212]	; (80215c4 <HAL_TIM_Base_MspInit+0x11c>)
 80214ee:	4293      	cmp	r3, r2
 80214f0:	d116      	bne.n	8021520 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80214f2:	2300      	movs	r3, #0
 80214f4:	61bb      	str	r3, [r7, #24]
 80214f6:	4b32      	ldr	r3, [pc, #200]	; (80215c0 <HAL_TIM_Base_MspInit+0x118>)
 80214f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214fa:	4a31      	ldr	r2, [pc, #196]	; (80215c0 <HAL_TIM_Base_MspInit+0x118>)
 80214fc:	f043 0308 	orr.w	r3, r3, #8
 8021500:	6413      	str	r3, [r2, #64]	; 0x40
 8021502:	4b2f      	ldr	r3, [pc, #188]	; (80215c0 <HAL_TIM_Base_MspInit+0x118>)
 8021504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021506:	f003 0308 	and.w	r3, r3, #8
 802150a:	61bb      	str	r3, [r7, #24]
 802150c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 802150e:	2200      	movs	r2, #0
 8021510:	2100      	movs	r1, #0
 8021512:	2032      	movs	r0, #50	; 0x32
 8021514:	f000 fe43 	bl	802219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8021518:	2032      	movs	r0, #50	; 0x32
 802151a:	f000 fe5c 	bl	80221d6 <HAL_NVIC_EnableIRQ>
}
 802151e:	e04a      	b.n	80215b6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8021520:	687b      	ldr	r3, [r7, #4]
 8021522:	681b      	ldr	r3, [r3, #0]
 8021524:	4a28      	ldr	r2, [pc, #160]	; (80215c8 <HAL_TIM_Base_MspInit+0x120>)
 8021526:	4293      	cmp	r3, r2
 8021528:	d116      	bne.n	8021558 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 802152a:	2300      	movs	r3, #0
 802152c:	617b      	str	r3, [r7, #20]
 802152e:	4b24      	ldr	r3, [pc, #144]	; (80215c0 <HAL_TIM_Base_MspInit+0x118>)
 8021530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021532:	4a23      	ldr	r2, [pc, #140]	; (80215c0 <HAL_TIM_Base_MspInit+0x118>)
 8021534:	f043 0310 	orr.w	r3, r3, #16
 8021538:	6413      	str	r3, [r2, #64]	; 0x40
 802153a:	4b21      	ldr	r3, [pc, #132]	; (80215c0 <HAL_TIM_Base_MspInit+0x118>)
 802153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802153e:	f003 0310 	and.w	r3, r3, #16
 8021542:	617b      	str	r3, [r7, #20]
 8021544:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8021546:	2200      	movs	r2, #0
 8021548:	2100      	movs	r1, #0
 802154a:	2036      	movs	r0, #54	; 0x36
 802154c:	f000 fe27 	bl	802219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021550:	2036      	movs	r0, #54	; 0x36
 8021552:	f000 fe40 	bl	80221d6 <HAL_NVIC_EnableIRQ>
}
 8021556:	e02e      	b.n	80215b6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8021558:	687b      	ldr	r3, [r7, #4]
 802155a:	681b      	ldr	r3, [r3, #0]
 802155c:	4a1b      	ldr	r2, [pc, #108]	; (80215cc <HAL_TIM_Base_MspInit+0x124>)
 802155e:	4293      	cmp	r3, r2
 8021560:	d116      	bne.n	8021590 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8021562:	2300      	movs	r3, #0
 8021564:	613b      	str	r3, [r7, #16]
 8021566:	4b16      	ldr	r3, [pc, #88]	; (80215c0 <HAL_TIM_Base_MspInit+0x118>)
 8021568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802156a:	4a15      	ldr	r2, [pc, #84]	; (80215c0 <HAL_TIM_Base_MspInit+0x118>)
 802156c:	f043 0320 	orr.w	r3, r3, #32
 8021570:	6413      	str	r3, [r2, #64]	; 0x40
 8021572:	4b13      	ldr	r3, [pc, #76]	; (80215c0 <HAL_TIM_Base_MspInit+0x118>)
 8021574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021576:	f003 0320 	and.w	r3, r3, #32
 802157a:	613b      	str	r3, [r7, #16]
 802157c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 802157e:	2200      	movs	r2, #0
 8021580:	2100      	movs	r1, #0
 8021582:	2037      	movs	r0, #55	; 0x37
 8021584:	f000 fe0b 	bl	802219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8021588:	2037      	movs	r0, #55	; 0x37
 802158a:	f000 fe24 	bl	80221d6 <HAL_NVIC_EnableIRQ>
}
 802158e:	e012      	b.n	80215b6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8021590:	687b      	ldr	r3, [r7, #4]
 8021592:	681b      	ldr	r3, [r3, #0]
 8021594:	4a0e      	ldr	r2, [pc, #56]	; (80215d0 <HAL_TIM_Base_MspInit+0x128>)
 8021596:	4293      	cmp	r3, r2
 8021598:	d10d      	bne.n	80215b6 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 802159a:	2300      	movs	r3, #0
 802159c:	60fb      	str	r3, [r7, #12]
 802159e:	4b08      	ldr	r3, [pc, #32]	; (80215c0 <HAL_TIM_Base_MspInit+0x118>)
 80215a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80215a2:	4a07      	ldr	r2, [pc, #28]	; (80215c0 <HAL_TIM_Base_MspInit+0x118>)
 80215a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80215a8:	6453      	str	r3, [r2, #68]	; 0x44
 80215aa:	4b05      	ldr	r3, [pc, #20]	; (80215c0 <HAL_TIM_Base_MspInit+0x118>)
 80215ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80215ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80215b2:	60fb      	str	r3, [r7, #12]
 80215b4:	68fb      	ldr	r3, [r7, #12]
}
 80215b6:	bf00      	nop
 80215b8:	3720      	adds	r7, #32
 80215ba:	46bd      	mov	sp, r7
 80215bc:	bd80      	pop	{r7, pc}
 80215be:	bf00      	nop
 80215c0:	40023800 	.word	0x40023800
 80215c4:	40000c00 	.word	0x40000c00
 80215c8:	40001000 	.word	0x40001000
 80215cc:	40001400 	.word	0x40001400
 80215d0:	40014800 	.word	0x40014800

080215d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80215d4:	b580      	push	{r7, lr}
 80215d6:	b08c      	sub	sp, #48	; 0x30
 80215d8:	af00      	add	r7, sp, #0
 80215da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80215dc:	f107 031c 	add.w	r3, r7, #28
 80215e0:	2200      	movs	r2, #0
 80215e2:	601a      	str	r2, [r3, #0]
 80215e4:	605a      	str	r2, [r3, #4]
 80215e6:	609a      	str	r2, [r3, #8]
 80215e8:	60da      	str	r2, [r3, #12]
 80215ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80215ec:	687b      	ldr	r3, [r7, #4]
 80215ee:	681b      	ldr	r3, [r3, #0]
 80215f0:	4a32      	ldr	r2, [pc, #200]	; (80216bc <HAL_TIM_Encoder_MspInit+0xe8>)
 80215f2:	4293      	cmp	r3, r2
 80215f4:	d12c      	bne.n	8021650 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80215f6:	2300      	movs	r3, #0
 80215f8:	61bb      	str	r3, [r7, #24]
 80215fa:	4b31      	ldr	r3, [pc, #196]	; (80216c0 <HAL_TIM_Encoder_MspInit+0xec>)
 80215fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80215fe:	4a30      	ldr	r2, [pc, #192]	; (80216c0 <HAL_TIM_Encoder_MspInit+0xec>)
 8021600:	f043 0304 	orr.w	r3, r3, #4
 8021604:	6413      	str	r3, [r2, #64]	; 0x40
 8021606:	4b2e      	ldr	r3, [pc, #184]	; (80216c0 <HAL_TIM_Encoder_MspInit+0xec>)
 8021608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802160a:	f003 0304 	and.w	r3, r3, #4
 802160e:	61bb      	str	r3, [r7, #24]
 8021610:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021612:	2300      	movs	r3, #0
 8021614:	617b      	str	r3, [r7, #20]
 8021616:	4b2a      	ldr	r3, [pc, #168]	; (80216c0 <HAL_TIM_Encoder_MspInit+0xec>)
 8021618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802161a:	4a29      	ldr	r2, [pc, #164]	; (80216c0 <HAL_TIM_Encoder_MspInit+0xec>)
 802161c:	f043 0302 	orr.w	r3, r3, #2
 8021620:	6313      	str	r3, [r2, #48]	; 0x30
 8021622:	4b27      	ldr	r3, [pc, #156]	; (80216c0 <HAL_TIM_Encoder_MspInit+0xec>)
 8021624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021626:	f003 0302 	and.w	r3, r3, #2
 802162a:	617b      	str	r3, [r7, #20]
 802162c:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 802162e:	23c0      	movs	r3, #192	; 0xc0
 8021630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021632:	2302      	movs	r3, #2
 8021634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021636:	2300      	movs	r3, #0
 8021638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802163a:	2300      	movs	r3, #0
 802163c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 802163e:	2302      	movs	r3, #2
 8021640:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021642:	f107 031c 	add.w	r3, r7, #28
 8021646:	4619      	mov	r1, r3
 8021648:	481e      	ldr	r0, [pc, #120]	; (80216c4 <HAL_TIM_Encoder_MspInit+0xf0>)
 802164a:	f000 fddf 	bl	802220c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 802164e:	e030      	b.n	80216b2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8021650:	687b      	ldr	r3, [r7, #4]
 8021652:	681b      	ldr	r3, [r3, #0]
 8021654:	4a1c      	ldr	r2, [pc, #112]	; (80216c8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8021656:	4293      	cmp	r3, r2
 8021658:	d12b      	bne.n	80216b2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 802165a:	2300      	movs	r3, #0
 802165c:	613b      	str	r3, [r7, #16]
 802165e:	4b18      	ldr	r3, [pc, #96]	; (80216c0 <HAL_TIM_Encoder_MspInit+0xec>)
 8021660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021662:	4a17      	ldr	r2, [pc, #92]	; (80216c0 <HAL_TIM_Encoder_MspInit+0xec>)
 8021664:	f043 0302 	orr.w	r3, r3, #2
 8021668:	6453      	str	r3, [r2, #68]	; 0x44
 802166a:	4b15      	ldr	r3, [pc, #84]	; (80216c0 <HAL_TIM_Encoder_MspInit+0xec>)
 802166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802166e:	f003 0302 	and.w	r3, r3, #2
 8021672:	613b      	str	r3, [r7, #16]
 8021674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021676:	2300      	movs	r3, #0
 8021678:	60fb      	str	r3, [r7, #12]
 802167a:	4b11      	ldr	r3, [pc, #68]	; (80216c0 <HAL_TIM_Encoder_MspInit+0xec>)
 802167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802167e:	4a10      	ldr	r2, [pc, #64]	; (80216c0 <HAL_TIM_Encoder_MspInit+0xec>)
 8021680:	f043 0304 	orr.w	r3, r3, #4
 8021684:	6313      	str	r3, [r2, #48]	; 0x30
 8021686:	4b0e      	ldr	r3, [pc, #56]	; (80216c0 <HAL_TIM_Encoder_MspInit+0xec>)
 8021688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802168a:	f003 0304 	and.w	r3, r3, #4
 802168e:	60fb      	str	r3, [r7, #12]
 8021690:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8021692:	23c0      	movs	r3, #192	; 0xc0
 8021694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021696:	2302      	movs	r3, #2
 8021698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802169a:	2300      	movs	r3, #0
 802169c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802169e:	2300      	movs	r3, #0
 80216a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80216a2:	2303      	movs	r3, #3
 80216a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80216a6:	f107 031c 	add.w	r3, r7, #28
 80216aa:	4619      	mov	r1, r3
 80216ac:	4807      	ldr	r0, [pc, #28]	; (80216cc <HAL_TIM_Encoder_MspInit+0xf8>)
 80216ae:	f000 fdad 	bl	802220c <HAL_GPIO_Init>
}
 80216b2:	bf00      	nop
 80216b4:	3730      	adds	r7, #48	; 0x30
 80216b6:	46bd      	mov	sp, r7
 80216b8:	bd80      	pop	{r7, pc}
 80216ba:	bf00      	nop
 80216bc:	40000800 	.word	0x40000800
 80216c0:	40023800 	.word	0x40023800
 80216c4:	40020400 	.word	0x40020400
 80216c8:	40010400 	.word	0x40010400
 80216cc:	40020800 	.word	0x40020800

080216d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80216d0:	b580      	push	{r7, lr}
 80216d2:	b08c      	sub	sp, #48	; 0x30
 80216d4:	af00      	add	r7, sp, #0
 80216d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80216d8:	f107 031c 	add.w	r3, r7, #28
 80216dc:	2200      	movs	r2, #0
 80216de:	601a      	str	r2, [r3, #0]
 80216e0:	605a      	str	r2, [r3, #4]
 80216e2:	609a      	str	r2, [r3, #8]
 80216e4:	60da      	str	r2, [r3, #12]
 80216e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	681b      	ldr	r3, [r3, #0]
 80216ec:	4a59      	ldr	r2, [pc, #356]	; (8021854 <HAL_TIM_MspPostInit+0x184>)
 80216ee:	4293      	cmp	r3, r2
 80216f0:	d11f      	bne.n	8021732 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80216f2:	2300      	movs	r3, #0
 80216f4:	61bb      	str	r3, [r7, #24]
 80216f6:	4b58      	ldr	r3, [pc, #352]	; (8021858 <HAL_TIM_MspPostInit+0x188>)
 80216f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216fa:	4a57      	ldr	r2, [pc, #348]	; (8021858 <HAL_TIM_MspPostInit+0x188>)
 80216fc:	f043 0301 	orr.w	r3, r3, #1
 8021700:	6313      	str	r3, [r2, #48]	; 0x30
 8021702:	4b55      	ldr	r3, [pc, #340]	; (8021858 <HAL_TIM_MspPostInit+0x188>)
 8021704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021706:	f003 0301 	and.w	r3, r3, #1
 802170a:	61bb      	str	r3, [r7, #24]
 802170c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 802170e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8021712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021714:	2302      	movs	r3, #2
 8021716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021718:	2300      	movs	r3, #0
 802171a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802171c:	2300      	movs	r3, #0
 802171e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8021720:	2301      	movs	r3, #1
 8021722:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021724:	f107 031c 	add.w	r3, r7, #28
 8021728:	4619      	mov	r1, r3
 802172a:	484c      	ldr	r0, [pc, #304]	; (802185c <HAL_TIM_MspPostInit+0x18c>)
 802172c:	f000 fd6e 	bl	802220c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8021730:	e08b      	b.n	802184a <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8021732:	687b      	ldr	r3, [r7, #4]
 8021734:	681b      	ldr	r3, [r3, #0]
 8021736:	4a4a      	ldr	r2, [pc, #296]	; (8021860 <HAL_TIM_MspPostInit+0x190>)
 8021738:	4293      	cmp	r3, r2
 802173a:	d13d      	bne.n	80217b8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802173c:	2300      	movs	r3, #0
 802173e:	617b      	str	r3, [r7, #20]
 8021740:	4b45      	ldr	r3, [pc, #276]	; (8021858 <HAL_TIM_MspPostInit+0x188>)
 8021742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021744:	4a44      	ldr	r2, [pc, #272]	; (8021858 <HAL_TIM_MspPostInit+0x188>)
 8021746:	f043 0304 	orr.w	r3, r3, #4
 802174a:	6313      	str	r3, [r2, #48]	; 0x30
 802174c:	4b42      	ldr	r3, [pc, #264]	; (8021858 <HAL_TIM_MspPostInit+0x188>)
 802174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021750:	f003 0304 	and.w	r3, r3, #4
 8021754:	617b      	str	r3, [r7, #20]
 8021756:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021758:	2300      	movs	r3, #0
 802175a:	613b      	str	r3, [r7, #16]
 802175c:	4b3e      	ldr	r3, [pc, #248]	; (8021858 <HAL_TIM_MspPostInit+0x188>)
 802175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021760:	4a3d      	ldr	r2, [pc, #244]	; (8021858 <HAL_TIM_MspPostInit+0x188>)
 8021762:	f043 0302 	orr.w	r3, r3, #2
 8021766:	6313      	str	r3, [r2, #48]	; 0x30
 8021768:	4b3b      	ldr	r3, [pc, #236]	; (8021858 <HAL_TIM_MspPostInit+0x188>)
 802176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802176c:	f003 0302 	and.w	r3, r3, #2
 8021770:	613b      	str	r3, [r7, #16]
 8021772:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8021774:	f44f 7340 	mov.w	r3, #768	; 0x300
 8021778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802177a:	2302      	movs	r3, #2
 802177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802177e:	2300      	movs	r3, #0
 8021780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021782:	2300      	movs	r3, #0
 8021784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8021786:	2302      	movs	r3, #2
 8021788:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802178a:	f107 031c 	add.w	r3, r7, #28
 802178e:	4619      	mov	r1, r3
 8021790:	4834      	ldr	r0, [pc, #208]	; (8021864 <HAL_TIM_MspPostInit+0x194>)
 8021792:	f000 fd3b 	bl	802220c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8021796:	2330      	movs	r3, #48	; 0x30
 8021798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802179a:	2302      	movs	r3, #2
 802179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802179e:	2300      	movs	r3, #0
 80217a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80217a2:	2300      	movs	r3, #0
 80217a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80217a6:	2302      	movs	r3, #2
 80217a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80217aa:	f107 031c 	add.w	r3, r7, #28
 80217ae:	4619      	mov	r1, r3
 80217b0:	482d      	ldr	r0, [pc, #180]	; (8021868 <HAL_TIM_MspPostInit+0x198>)
 80217b2:	f000 fd2b 	bl	802220c <HAL_GPIO_Init>
}
 80217b6:	e048      	b.n	802184a <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 80217b8:	687b      	ldr	r3, [r7, #4]
 80217ba:	681b      	ldr	r3, [r3, #0]
 80217bc:	4a2b      	ldr	r2, [pc, #172]	; (802186c <HAL_TIM_MspPostInit+0x19c>)
 80217be:	4293      	cmp	r3, r2
 80217c0:	d11f      	bne.n	8021802 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80217c2:	2300      	movs	r3, #0
 80217c4:	60fb      	str	r3, [r7, #12]
 80217c6:	4b24      	ldr	r3, [pc, #144]	; (8021858 <HAL_TIM_MspPostInit+0x188>)
 80217c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80217ca:	4a23      	ldr	r2, [pc, #140]	; (8021858 <HAL_TIM_MspPostInit+0x188>)
 80217cc:	f043 0302 	orr.w	r3, r3, #2
 80217d0:	6313      	str	r3, [r2, #48]	; 0x30
 80217d2:	4b21      	ldr	r3, [pc, #132]	; (8021858 <HAL_TIM_MspPostInit+0x188>)
 80217d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80217d6:	f003 0302 	and.w	r3, r3, #2
 80217da:	60fb      	str	r3, [r7, #12]
 80217dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80217de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80217e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80217e4:	2302      	movs	r3, #2
 80217e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80217e8:	2300      	movs	r3, #0
 80217ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80217ec:	2300      	movs	r3, #0
 80217ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80217f0:	2303      	movs	r3, #3
 80217f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80217f4:	f107 031c 	add.w	r3, r7, #28
 80217f8:	4619      	mov	r1, r3
 80217fa:	481b      	ldr	r0, [pc, #108]	; (8021868 <HAL_TIM_MspPostInit+0x198>)
 80217fc:	f000 fd06 	bl	802220c <HAL_GPIO_Init>
}
 8021800:	e023      	b.n	802184a <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8021802:	687b      	ldr	r3, [r7, #4]
 8021804:	681b      	ldr	r3, [r3, #0]
 8021806:	4a1a      	ldr	r2, [pc, #104]	; (8021870 <HAL_TIM_MspPostInit+0x1a0>)
 8021808:	4293      	cmp	r3, r2
 802180a:	d11e      	bne.n	802184a <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802180c:	2300      	movs	r3, #0
 802180e:	60bb      	str	r3, [r7, #8]
 8021810:	4b11      	ldr	r3, [pc, #68]	; (8021858 <HAL_TIM_MspPostInit+0x188>)
 8021812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021814:	4a10      	ldr	r2, [pc, #64]	; (8021858 <HAL_TIM_MspPostInit+0x188>)
 8021816:	f043 0302 	orr.w	r3, r3, #2
 802181a:	6313      	str	r3, [r2, #48]	; 0x30
 802181c:	4b0e      	ldr	r3, [pc, #56]	; (8021858 <HAL_TIM_MspPostInit+0x188>)
 802181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021820:	f003 0302 	and.w	r3, r3, #2
 8021824:	60bb      	str	r3, [r7, #8]
 8021826:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8021828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802182e:	2302      	movs	r3, #2
 8021830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021832:	2300      	movs	r3, #0
 8021834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021836:	2300      	movs	r3, #0
 8021838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 802183a:	2309      	movs	r3, #9
 802183c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802183e:	f107 031c 	add.w	r3, r7, #28
 8021842:	4619      	mov	r1, r3
 8021844:	4808      	ldr	r0, [pc, #32]	; (8021868 <HAL_TIM_MspPostInit+0x198>)
 8021846:	f000 fce1 	bl	802220c <HAL_GPIO_Init>
}
 802184a:	bf00      	nop
 802184c:	3730      	adds	r7, #48	; 0x30
 802184e:	46bd      	mov	sp, r7
 8021850:	bd80      	pop	{r7, pc}
 8021852:	bf00      	nop
 8021854:	40010000 	.word	0x40010000
 8021858:	40023800 	.word	0x40023800
 802185c:	40020000 	.word	0x40020000
 8021860:	40000400 	.word	0x40000400
 8021864:	40020800 	.word	0x40020800
 8021868:	40020400 	.word	0x40020400
 802186c:	40014800 	.word	0x40014800
 8021870:	40001800 	.word	0x40001800

08021874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021874:	b480      	push	{r7}
 8021876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021878:	e7fe      	b.n	8021878 <NMI_Handler+0x4>

0802187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802187a:	b480      	push	{r7}
 802187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802187e:	e7fe      	b.n	802187e <HardFault_Handler+0x4>

08021880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021880:	b480      	push	{r7}
 8021882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021884:	e7fe      	b.n	8021884 <MemManage_Handler+0x4>

08021886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021886:	b480      	push	{r7}
 8021888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802188a:	e7fe      	b.n	802188a <BusFault_Handler+0x4>

0802188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802188c:	b480      	push	{r7}
 802188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021890:	e7fe      	b.n	8021890 <UsageFault_Handler+0x4>

08021892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021892:	b480      	push	{r7}
 8021894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8021896:	bf00      	nop
 8021898:	46bd      	mov	sp, r7
 802189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802189e:	4770      	bx	lr

080218a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80218a0:	b480      	push	{r7}
 80218a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80218a4:	bf00      	nop
 80218a6:	46bd      	mov	sp, r7
 80218a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218ac:	4770      	bx	lr

080218ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80218ae:	b480      	push	{r7}
 80218b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80218b2:	bf00      	nop
 80218b4:	46bd      	mov	sp, r7
 80218b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218ba:	4770      	bx	lr

080218bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80218bc:	b580      	push	{r7, lr}
 80218be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80218c0:	f000 f910 	bl	8021ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80218c4:	bf00      	nop
 80218c6:	bd80      	pop	{r7, pc}

080218c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80218c8:	b580      	push	{r7, lr}
 80218ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80218cc:	4802      	ldr	r0, [pc, #8]	; (80218d8 <TIM2_IRQHandler+0x10>)
 80218ce:	f001 fcfd 	bl	80232cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80218d2:	bf00      	nop
 80218d4:	bd80      	pop	{r7, pc}
 80218d6:	bf00      	nop
 80218d8:	20000738 	.word	0x20000738

080218dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80218dc:	b580      	push	{r7, lr}
 80218de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80218e0:	4802      	ldr	r0, [pc, #8]	; (80218ec <TIM5_IRQHandler+0x10>)
 80218e2:	f001 fcf3 	bl	80232cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80218e6:	bf00      	nop
 80218e8:	bd80      	pop	{r7, pc}
 80218ea:	bf00      	nop
 80218ec:	20000558 	.word	0x20000558

080218f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80218f0:	b580      	push	{r7, lr}
 80218f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80218f4:	4802      	ldr	r0, [pc, #8]	; (8021900 <TIM6_DAC_IRQHandler+0x10>)
 80218f6:	f001 fce9 	bl	80232cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80218fa:	bf00      	nop
 80218fc:	bd80      	pop	{r7, pc}
 80218fe:	bf00      	nop
 8021900:	200006b8 	.word	0x200006b8

08021904 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8021904:	b580      	push	{r7, lr}
 8021906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8021908:	4802      	ldr	r0, [pc, #8]	; (8021914 <TIM7_IRQHandler+0x10>)
 802190a:	f001 fcdf 	bl	80232cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 802190e:	bf00      	nop
 8021910:	bd80      	pop	{r7, pc}
 8021912:	bf00      	nop
 8021914:	200007b8 	.word	0x200007b8

08021918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8021918:	b480      	push	{r7}
 802191a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802191c:	4b08      	ldr	r3, [pc, #32]	; (8021940 <SystemInit+0x28>)
 802191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021922:	4a07      	ldr	r2, [pc, #28]	; (8021940 <SystemInit+0x28>)
 8021924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 802192c:	4b04      	ldr	r3, [pc, #16]	; (8021940 <SystemInit+0x28>)
 802192e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8021932:	609a      	str	r2, [r3, #8]
#endif
}
 8021934:	bf00      	nop
 8021936:	46bd      	mov	sp, r7
 8021938:	f85d 7b04 	ldr.w	r7, [sp], #4
 802193c:	4770      	bx	lr
 802193e:	bf00      	nop
 8021940:	e000ed00 	.word	0xe000ed00

08021944 <_ZN15VelocityControlC1Ev>:
#include "velocity_control.hpp"

VelocityControl::VelocityControl() : integral_error_(0) {}
 8021944:	b580      	push	{r7, lr}
 8021946:	b082      	sub	sp, #8
 8021948:	af00      	add	r7, sp, #0
 802194a:	6078      	str	r0, [r7, #4]
 802194c:	687b      	ldr	r3, [r7, #4]
 802194e:	f04f 0200 	mov.w	r2, #0
 8021952:	601a      	str	r2, [r3, #0]
 8021954:	687b      	ldr	r3, [r7, #4]
 8021956:	3304      	adds	r3, #4
 8021958:	4618      	mov	r0, r3
 802195a:	f7fe fcf1 	bl	8020340 <_ZN7EncoderC1Ev>
 802195e:	687b      	ldr	r3, [r7, #4]
 8021960:	4618      	mov	r0, r3
 8021962:	3708      	adds	r7, #8
 8021964:	46bd      	mov	sp, r7
 8021966:	bd80      	pop	{r7, pc}

08021968 <_Z41__static_initialization_and_destruction_0ii>:
}

void ImuWriteByte(uint8_t send_address, uint8_t send_data, char imu_ic_lr)
{
    iim_42652.Write(send_address, send_data, imu_ic_lr);
}
 8021968:	b580      	push	{r7, lr}
 802196a:	b082      	sub	sp, #8
 802196c:	af00      	add	r7, sp, #0
 802196e:	6078      	str	r0, [r7, #4]
 8021970:	6039      	str	r1, [r7, #0]
 8021972:	687b      	ldr	r3, [r7, #4]
 8021974:	2b01      	cmp	r3, #1
 8021976:	d11c      	bne.n	80219b2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8021978:	683b      	ldr	r3, [r7, #0]
 802197a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802197e:	4293      	cmp	r3, r2
 8021980:	d117      	bne.n	80219b2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
Encoder encoder;
 8021982:	480e      	ldr	r0, [pc, #56]	; (80219bc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8021984:	f7fe fcdc 	bl	8020340 <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 8021988:	480d      	ldr	r0, [pc, #52]	; (80219c0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 802198a:	f7fe fcf0 	bl	802036e <_ZN8Iim42652C1Ev>
LineSensor line_sensor;
 802198e:	480d      	ldr	r0, [pc, #52]	; (80219c4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8021990:	f7fe fcf8 	bl	8020384 <_ZN10LineSensorC1Ev>
LineTrace line_trace;
 8021994:	480c      	ldr	r0, [pc, #48]	; (80219c8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8021996:	f7fe fd40 	bl	802041a <_ZN9LineTraceC1Ev>
Logger logger;
 802199a:	480c      	ldr	r0, [pc, #48]	; (80219cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 802199c:	f7fe fd50 	bl	8020440 <_ZN6LoggerC1Ev>
Motor motor;
 80219a0:	480b      	ldr	r0, [pc, #44]	; (80219d0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80219a2:	f7ff fbf3 	bl	802118c <_ZN5MotorC1Ev>
SideSensor side_sensor;
 80219a6:	480b      	ldr	r0, [pc, #44]	; (80219d4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80219a8:	f7ff fbfb 	bl	80211a2 <_ZN10SideSensorC1Ev>
VelocityControl velocity_control;
 80219ac:	480a      	ldr	r0, [pc, #40]	; (80219d8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80219ae:	f7ff ffc9 	bl	8021944 <_ZN15VelocityControlC1Ev>
}
 80219b2:	bf00      	nop
 80219b4:	3708      	adds	r7, #8
 80219b6:	46bd      	mov	sp, r7
 80219b8:	bd80      	pop	{r7, pc}
 80219ba:	bf00      	nop
 80219bc:	2000002c 	.word	0x2000002c
 80219c0:	20000038 	.word	0x20000038
 80219c4:	20000040 	.word	0x20000040
 80219c8:	200001cc 	.word	0x200001cc
 80219cc:	20000360 	.word	0x20000360
 80219d0:	20000468 	.word	0x20000468
 80219d4:	2000046c 	.word	0x2000046c
 80219d8:	20000474 	.word	0x20000474

080219dc <_GLOBAL__sub_I_encoder>:
 80219dc:	b580      	push	{r7, lr}
 80219de:	af00      	add	r7, sp, #0
 80219e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80219e4:	2001      	movs	r0, #1
 80219e6:	f7ff ffbf 	bl	8021968 <_Z41__static_initialization_and_destruction_0ii>
 80219ea:	bd80      	pop	{r7, pc}

080219ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80219ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021a24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80219f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80219f2:	e003      	b.n	80219fc <LoopCopyDataInit>

080219f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80219f4:	4b0c      	ldr	r3, [pc, #48]	; (8021a28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80219f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80219f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80219fa:	3104      	adds	r1, #4

080219fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80219fc:	480b      	ldr	r0, [pc, #44]	; (8021a2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80219fe:	4b0c      	ldr	r3, [pc, #48]	; (8021a30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8021a00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8021a02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8021a04:	d3f6      	bcc.n	80219f4 <CopyDataInit>
  ldr  r2, =_sbss
 8021a06:	4a0b      	ldr	r2, [pc, #44]	; (8021a34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8021a08:	e002      	b.n	8021a10 <LoopFillZerobss>

08021a0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8021a0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8021a0c:	f842 3b04 	str.w	r3, [r2], #4

08021a10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8021a10:	4b09      	ldr	r3, [pc, #36]	; (8021a38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8021a12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8021a14:	d3f9      	bcc.n	8021a0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8021a16:	f7ff ff7f 	bl	8021918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8021a1a:	f002 fadb 	bl	8023fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8021a1e:	f7fe fd95 	bl	802054c <main>
  bx  lr    
 8021a22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8021a24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8021a28:	08024070 	.word	0x08024070
  ldr  r0, =_sdata
 8021a2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8021a30:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8021a34:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8021a38:	200007fc 	.word	0x200007fc

08021a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8021a3c:	e7fe      	b.n	8021a3c <ADC_IRQHandler>
	...

08021a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8021a40:	b580      	push	{r7, lr}
 8021a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8021a44:	4b0e      	ldr	r3, [pc, #56]	; (8021a80 <HAL_Init+0x40>)
 8021a46:	681b      	ldr	r3, [r3, #0]
 8021a48:	4a0d      	ldr	r2, [pc, #52]	; (8021a80 <HAL_Init+0x40>)
 8021a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8021a50:	4b0b      	ldr	r3, [pc, #44]	; (8021a80 <HAL_Init+0x40>)
 8021a52:	681b      	ldr	r3, [r3, #0]
 8021a54:	4a0a      	ldr	r2, [pc, #40]	; (8021a80 <HAL_Init+0x40>)
 8021a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8021a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8021a5c:	4b08      	ldr	r3, [pc, #32]	; (8021a80 <HAL_Init+0x40>)
 8021a5e:	681b      	ldr	r3, [r3, #0]
 8021a60:	4a07      	ldr	r2, [pc, #28]	; (8021a80 <HAL_Init+0x40>)
 8021a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021a68:	2003      	movs	r0, #3
 8021a6a:	f000 fb8d 	bl	8022188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8021a6e:	2000      	movs	r0, #0
 8021a70:	f000 f808 	bl	8021a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8021a74:	f7ff fbb2 	bl	80211dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8021a78:	2300      	movs	r3, #0
}
 8021a7a:	4618      	mov	r0, r3
 8021a7c:	bd80      	pop	{r7, pc}
 8021a7e:	bf00      	nop
 8021a80:	40023c00 	.word	0x40023c00

08021a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021a84:	b580      	push	{r7, lr}
 8021a86:	b082      	sub	sp, #8
 8021a88:	af00      	add	r7, sp, #0
 8021a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8021a8c:	4b12      	ldr	r3, [pc, #72]	; (8021ad8 <HAL_InitTick+0x54>)
 8021a8e:	681a      	ldr	r2, [r3, #0]
 8021a90:	4b12      	ldr	r3, [pc, #72]	; (8021adc <HAL_InitTick+0x58>)
 8021a92:	781b      	ldrb	r3, [r3, #0]
 8021a94:	4619      	mov	r1, r3
 8021a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8021a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8021a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8021aa2:	4618      	mov	r0, r3
 8021aa4:	f000 fba5 	bl	80221f2 <HAL_SYSTICK_Config>
 8021aa8:	4603      	mov	r3, r0
 8021aaa:	2b00      	cmp	r3, #0
 8021aac:	d001      	beq.n	8021ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8021aae:	2301      	movs	r3, #1
 8021ab0:	e00e      	b.n	8021ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021ab2:	687b      	ldr	r3, [r7, #4]
 8021ab4:	2b0f      	cmp	r3, #15
 8021ab6:	d80a      	bhi.n	8021ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8021ab8:	2200      	movs	r2, #0
 8021aba:	6879      	ldr	r1, [r7, #4]
 8021abc:	f04f 30ff 	mov.w	r0, #4294967295
 8021ac0:	f000 fb6d 	bl	802219e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8021ac4:	4a06      	ldr	r2, [pc, #24]	; (8021ae0 <HAL_InitTick+0x5c>)
 8021ac6:	687b      	ldr	r3, [r7, #4]
 8021ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8021aca:	2300      	movs	r3, #0
 8021acc:	e000      	b.n	8021ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8021ace:	2301      	movs	r3, #1
}
 8021ad0:	4618      	mov	r0, r3
 8021ad2:	3708      	adds	r7, #8
 8021ad4:	46bd      	mov	sp, r7
 8021ad6:	bd80      	pop	{r7, pc}
 8021ad8:	20000000 	.word	0x20000000
 8021adc:	20000008 	.word	0x20000008
 8021ae0:	20000004 	.word	0x20000004

08021ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8021ae4:	b480      	push	{r7}
 8021ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8021ae8:	4b06      	ldr	r3, [pc, #24]	; (8021b04 <HAL_IncTick+0x20>)
 8021aea:	781b      	ldrb	r3, [r3, #0]
 8021aec:	461a      	mov	r2, r3
 8021aee:	4b06      	ldr	r3, [pc, #24]	; (8021b08 <HAL_IncTick+0x24>)
 8021af0:	681b      	ldr	r3, [r3, #0]
 8021af2:	4413      	add	r3, r2
 8021af4:	4a04      	ldr	r2, [pc, #16]	; (8021b08 <HAL_IncTick+0x24>)
 8021af6:	6013      	str	r3, [r2, #0]
}
 8021af8:	bf00      	nop
 8021afa:	46bd      	mov	sp, r7
 8021afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b00:	4770      	bx	lr
 8021b02:	bf00      	nop
 8021b04:	20000008 	.word	0x20000008
 8021b08:	200007f8 	.word	0x200007f8

08021b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8021b0c:	b480      	push	{r7}
 8021b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8021b10:	4b03      	ldr	r3, [pc, #12]	; (8021b20 <HAL_GetTick+0x14>)
 8021b12:	681b      	ldr	r3, [r3, #0]
}
 8021b14:	4618      	mov	r0, r3
 8021b16:	46bd      	mov	sp, r7
 8021b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b1c:	4770      	bx	lr
 8021b1e:	bf00      	nop
 8021b20:	200007f8 	.word	0x200007f8

08021b24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8021b24:	b580      	push	{r7, lr}
 8021b26:	b084      	sub	sp, #16
 8021b28:	af00      	add	r7, sp, #0
 8021b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8021b2c:	2300      	movs	r3, #0
 8021b2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8021b30:	687b      	ldr	r3, [r7, #4]
 8021b32:	2b00      	cmp	r3, #0
 8021b34:	d101      	bne.n	8021b3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8021b36:	2301      	movs	r3, #1
 8021b38:	e033      	b.n	8021ba2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8021b3a:	687b      	ldr	r3, [r7, #4]
 8021b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b3e:	2b00      	cmp	r3, #0
 8021b40:	d109      	bne.n	8021b56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8021b42:	6878      	ldr	r0, [r7, #4]
 8021b44:	f7ff fb72 	bl	802122c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8021b48:	687b      	ldr	r3, [r7, #4]
 8021b4a:	2200      	movs	r2, #0
 8021b4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8021b4e:	687b      	ldr	r3, [r7, #4]
 8021b50:	2200      	movs	r2, #0
 8021b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8021b56:	687b      	ldr	r3, [r7, #4]
 8021b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b5a:	f003 0310 	and.w	r3, r3, #16
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	d118      	bne.n	8021b94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8021b62:	687b      	ldr	r3, [r7, #4]
 8021b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8021b6a:	f023 0302 	bic.w	r3, r3, #2
 8021b6e:	f043 0202 	orr.w	r2, r3, #2
 8021b72:	687b      	ldr	r3, [r7, #4]
 8021b74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8021b76:	6878      	ldr	r0, [r7, #4]
 8021b78:	f000 f93a 	bl	8021df0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8021b7c:	687b      	ldr	r3, [r7, #4]
 8021b7e:	2200      	movs	r2, #0
 8021b80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8021b82:	687b      	ldr	r3, [r7, #4]
 8021b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b86:	f023 0303 	bic.w	r3, r3, #3
 8021b8a:	f043 0201 	orr.w	r2, r3, #1
 8021b8e:	687b      	ldr	r3, [r7, #4]
 8021b90:	641a      	str	r2, [r3, #64]	; 0x40
 8021b92:	e001      	b.n	8021b98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8021b94:	2301      	movs	r3, #1
 8021b96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8021b98:	687b      	ldr	r3, [r7, #4]
 8021b9a:	2200      	movs	r2, #0
 8021b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8021ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8021ba2:	4618      	mov	r0, r3
 8021ba4:	3710      	adds	r7, #16
 8021ba6:	46bd      	mov	sp, r7
 8021ba8:	bd80      	pop	{r7, pc}
	...

08021bac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8021bac:	b480      	push	{r7}
 8021bae:	b085      	sub	sp, #20
 8021bb0:	af00      	add	r7, sp, #0
 8021bb2:	6078      	str	r0, [r7, #4]
 8021bb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8021bb6:	2300      	movs	r3, #0
 8021bb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8021bba:	687b      	ldr	r3, [r7, #4]
 8021bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021bc0:	2b01      	cmp	r3, #1
 8021bc2:	d101      	bne.n	8021bc8 <HAL_ADC_ConfigChannel+0x1c>
 8021bc4:	2302      	movs	r3, #2
 8021bc6:	e105      	b.n	8021dd4 <HAL_ADC_ConfigChannel+0x228>
 8021bc8:	687b      	ldr	r3, [r7, #4]
 8021bca:	2201      	movs	r2, #1
 8021bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8021bd0:	683b      	ldr	r3, [r7, #0]
 8021bd2:	681b      	ldr	r3, [r3, #0]
 8021bd4:	2b09      	cmp	r3, #9
 8021bd6:	d925      	bls.n	8021c24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8021bd8:	687b      	ldr	r3, [r7, #4]
 8021bda:	681b      	ldr	r3, [r3, #0]
 8021bdc:	68d9      	ldr	r1, [r3, #12]
 8021bde:	683b      	ldr	r3, [r7, #0]
 8021be0:	681b      	ldr	r3, [r3, #0]
 8021be2:	b29b      	uxth	r3, r3
 8021be4:	461a      	mov	r2, r3
 8021be6:	4613      	mov	r3, r2
 8021be8:	005b      	lsls	r3, r3, #1
 8021bea:	4413      	add	r3, r2
 8021bec:	3b1e      	subs	r3, #30
 8021bee:	2207      	movs	r2, #7
 8021bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8021bf4:	43da      	mvns	r2, r3
 8021bf6:	687b      	ldr	r3, [r7, #4]
 8021bf8:	681b      	ldr	r3, [r3, #0]
 8021bfa:	400a      	ands	r2, r1
 8021bfc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8021bfe:	687b      	ldr	r3, [r7, #4]
 8021c00:	681b      	ldr	r3, [r3, #0]
 8021c02:	68d9      	ldr	r1, [r3, #12]
 8021c04:	683b      	ldr	r3, [r7, #0]
 8021c06:	689a      	ldr	r2, [r3, #8]
 8021c08:	683b      	ldr	r3, [r7, #0]
 8021c0a:	681b      	ldr	r3, [r3, #0]
 8021c0c:	b29b      	uxth	r3, r3
 8021c0e:	4618      	mov	r0, r3
 8021c10:	4603      	mov	r3, r0
 8021c12:	005b      	lsls	r3, r3, #1
 8021c14:	4403      	add	r3, r0
 8021c16:	3b1e      	subs	r3, #30
 8021c18:	409a      	lsls	r2, r3
 8021c1a:	687b      	ldr	r3, [r7, #4]
 8021c1c:	681b      	ldr	r3, [r3, #0]
 8021c1e:	430a      	orrs	r2, r1
 8021c20:	60da      	str	r2, [r3, #12]
 8021c22:	e022      	b.n	8021c6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8021c24:	687b      	ldr	r3, [r7, #4]
 8021c26:	681b      	ldr	r3, [r3, #0]
 8021c28:	6919      	ldr	r1, [r3, #16]
 8021c2a:	683b      	ldr	r3, [r7, #0]
 8021c2c:	681b      	ldr	r3, [r3, #0]
 8021c2e:	b29b      	uxth	r3, r3
 8021c30:	461a      	mov	r2, r3
 8021c32:	4613      	mov	r3, r2
 8021c34:	005b      	lsls	r3, r3, #1
 8021c36:	4413      	add	r3, r2
 8021c38:	2207      	movs	r2, #7
 8021c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8021c3e:	43da      	mvns	r2, r3
 8021c40:	687b      	ldr	r3, [r7, #4]
 8021c42:	681b      	ldr	r3, [r3, #0]
 8021c44:	400a      	ands	r2, r1
 8021c46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8021c48:	687b      	ldr	r3, [r7, #4]
 8021c4a:	681b      	ldr	r3, [r3, #0]
 8021c4c:	6919      	ldr	r1, [r3, #16]
 8021c4e:	683b      	ldr	r3, [r7, #0]
 8021c50:	689a      	ldr	r2, [r3, #8]
 8021c52:	683b      	ldr	r3, [r7, #0]
 8021c54:	681b      	ldr	r3, [r3, #0]
 8021c56:	b29b      	uxth	r3, r3
 8021c58:	4618      	mov	r0, r3
 8021c5a:	4603      	mov	r3, r0
 8021c5c:	005b      	lsls	r3, r3, #1
 8021c5e:	4403      	add	r3, r0
 8021c60:	409a      	lsls	r2, r3
 8021c62:	687b      	ldr	r3, [r7, #4]
 8021c64:	681b      	ldr	r3, [r3, #0]
 8021c66:	430a      	orrs	r2, r1
 8021c68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8021c6a:	683b      	ldr	r3, [r7, #0]
 8021c6c:	685b      	ldr	r3, [r3, #4]
 8021c6e:	2b06      	cmp	r3, #6
 8021c70:	d824      	bhi.n	8021cbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8021c72:	687b      	ldr	r3, [r7, #4]
 8021c74:	681b      	ldr	r3, [r3, #0]
 8021c76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8021c78:	683b      	ldr	r3, [r7, #0]
 8021c7a:	685a      	ldr	r2, [r3, #4]
 8021c7c:	4613      	mov	r3, r2
 8021c7e:	009b      	lsls	r3, r3, #2
 8021c80:	4413      	add	r3, r2
 8021c82:	3b05      	subs	r3, #5
 8021c84:	221f      	movs	r2, #31
 8021c86:	fa02 f303 	lsl.w	r3, r2, r3
 8021c8a:	43da      	mvns	r2, r3
 8021c8c:	687b      	ldr	r3, [r7, #4]
 8021c8e:	681b      	ldr	r3, [r3, #0]
 8021c90:	400a      	ands	r2, r1
 8021c92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8021c94:	687b      	ldr	r3, [r7, #4]
 8021c96:	681b      	ldr	r3, [r3, #0]
 8021c98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8021c9a:	683b      	ldr	r3, [r7, #0]
 8021c9c:	681b      	ldr	r3, [r3, #0]
 8021c9e:	b29b      	uxth	r3, r3
 8021ca0:	4618      	mov	r0, r3
 8021ca2:	683b      	ldr	r3, [r7, #0]
 8021ca4:	685a      	ldr	r2, [r3, #4]
 8021ca6:	4613      	mov	r3, r2
 8021ca8:	009b      	lsls	r3, r3, #2
 8021caa:	4413      	add	r3, r2
 8021cac:	3b05      	subs	r3, #5
 8021cae:	fa00 f203 	lsl.w	r2, r0, r3
 8021cb2:	687b      	ldr	r3, [r7, #4]
 8021cb4:	681b      	ldr	r3, [r3, #0]
 8021cb6:	430a      	orrs	r2, r1
 8021cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8021cba:	e04c      	b.n	8021d56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8021cbc:	683b      	ldr	r3, [r7, #0]
 8021cbe:	685b      	ldr	r3, [r3, #4]
 8021cc0:	2b0c      	cmp	r3, #12
 8021cc2:	d824      	bhi.n	8021d0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8021cc4:	687b      	ldr	r3, [r7, #4]
 8021cc6:	681b      	ldr	r3, [r3, #0]
 8021cc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8021cca:	683b      	ldr	r3, [r7, #0]
 8021ccc:	685a      	ldr	r2, [r3, #4]
 8021cce:	4613      	mov	r3, r2
 8021cd0:	009b      	lsls	r3, r3, #2
 8021cd2:	4413      	add	r3, r2
 8021cd4:	3b23      	subs	r3, #35	; 0x23
 8021cd6:	221f      	movs	r2, #31
 8021cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8021cdc:	43da      	mvns	r2, r3
 8021cde:	687b      	ldr	r3, [r7, #4]
 8021ce0:	681b      	ldr	r3, [r3, #0]
 8021ce2:	400a      	ands	r2, r1
 8021ce4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8021ce6:	687b      	ldr	r3, [r7, #4]
 8021ce8:	681b      	ldr	r3, [r3, #0]
 8021cea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8021cec:	683b      	ldr	r3, [r7, #0]
 8021cee:	681b      	ldr	r3, [r3, #0]
 8021cf0:	b29b      	uxth	r3, r3
 8021cf2:	4618      	mov	r0, r3
 8021cf4:	683b      	ldr	r3, [r7, #0]
 8021cf6:	685a      	ldr	r2, [r3, #4]
 8021cf8:	4613      	mov	r3, r2
 8021cfa:	009b      	lsls	r3, r3, #2
 8021cfc:	4413      	add	r3, r2
 8021cfe:	3b23      	subs	r3, #35	; 0x23
 8021d00:	fa00 f203 	lsl.w	r2, r0, r3
 8021d04:	687b      	ldr	r3, [r7, #4]
 8021d06:	681b      	ldr	r3, [r3, #0]
 8021d08:	430a      	orrs	r2, r1
 8021d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8021d0c:	e023      	b.n	8021d56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8021d0e:	687b      	ldr	r3, [r7, #4]
 8021d10:	681b      	ldr	r3, [r3, #0]
 8021d12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8021d14:	683b      	ldr	r3, [r7, #0]
 8021d16:	685a      	ldr	r2, [r3, #4]
 8021d18:	4613      	mov	r3, r2
 8021d1a:	009b      	lsls	r3, r3, #2
 8021d1c:	4413      	add	r3, r2
 8021d1e:	3b41      	subs	r3, #65	; 0x41
 8021d20:	221f      	movs	r2, #31
 8021d22:	fa02 f303 	lsl.w	r3, r2, r3
 8021d26:	43da      	mvns	r2, r3
 8021d28:	687b      	ldr	r3, [r7, #4]
 8021d2a:	681b      	ldr	r3, [r3, #0]
 8021d2c:	400a      	ands	r2, r1
 8021d2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8021d30:	687b      	ldr	r3, [r7, #4]
 8021d32:	681b      	ldr	r3, [r3, #0]
 8021d34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8021d36:	683b      	ldr	r3, [r7, #0]
 8021d38:	681b      	ldr	r3, [r3, #0]
 8021d3a:	b29b      	uxth	r3, r3
 8021d3c:	4618      	mov	r0, r3
 8021d3e:	683b      	ldr	r3, [r7, #0]
 8021d40:	685a      	ldr	r2, [r3, #4]
 8021d42:	4613      	mov	r3, r2
 8021d44:	009b      	lsls	r3, r3, #2
 8021d46:	4413      	add	r3, r2
 8021d48:	3b41      	subs	r3, #65	; 0x41
 8021d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8021d4e:	687b      	ldr	r3, [r7, #4]
 8021d50:	681b      	ldr	r3, [r3, #0]
 8021d52:	430a      	orrs	r2, r1
 8021d54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8021d56:	4b22      	ldr	r3, [pc, #136]	; (8021de0 <HAL_ADC_ConfigChannel+0x234>)
 8021d58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8021d5a:	687b      	ldr	r3, [r7, #4]
 8021d5c:	681b      	ldr	r3, [r3, #0]
 8021d5e:	4a21      	ldr	r2, [pc, #132]	; (8021de4 <HAL_ADC_ConfigChannel+0x238>)
 8021d60:	4293      	cmp	r3, r2
 8021d62:	d109      	bne.n	8021d78 <HAL_ADC_ConfigChannel+0x1cc>
 8021d64:	683b      	ldr	r3, [r7, #0]
 8021d66:	681b      	ldr	r3, [r3, #0]
 8021d68:	2b12      	cmp	r3, #18
 8021d6a:	d105      	bne.n	8021d78 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8021d6c:	68fb      	ldr	r3, [r7, #12]
 8021d6e:	685b      	ldr	r3, [r3, #4]
 8021d70:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8021d74:	68fb      	ldr	r3, [r7, #12]
 8021d76:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8021d78:	687b      	ldr	r3, [r7, #4]
 8021d7a:	681b      	ldr	r3, [r3, #0]
 8021d7c:	4a19      	ldr	r2, [pc, #100]	; (8021de4 <HAL_ADC_ConfigChannel+0x238>)
 8021d7e:	4293      	cmp	r3, r2
 8021d80:	d123      	bne.n	8021dca <HAL_ADC_ConfigChannel+0x21e>
 8021d82:	683b      	ldr	r3, [r7, #0]
 8021d84:	681b      	ldr	r3, [r3, #0]
 8021d86:	2b10      	cmp	r3, #16
 8021d88:	d003      	beq.n	8021d92 <HAL_ADC_ConfigChannel+0x1e6>
 8021d8a:	683b      	ldr	r3, [r7, #0]
 8021d8c:	681b      	ldr	r3, [r3, #0]
 8021d8e:	2b11      	cmp	r3, #17
 8021d90:	d11b      	bne.n	8021dca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8021d92:	68fb      	ldr	r3, [r7, #12]
 8021d94:	685b      	ldr	r3, [r3, #4]
 8021d96:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8021d9a:	68fb      	ldr	r3, [r7, #12]
 8021d9c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8021d9e:	683b      	ldr	r3, [r7, #0]
 8021da0:	681b      	ldr	r3, [r3, #0]
 8021da2:	2b10      	cmp	r3, #16
 8021da4:	d111      	bne.n	8021dca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8021da6:	4b10      	ldr	r3, [pc, #64]	; (8021de8 <HAL_ADC_ConfigChannel+0x23c>)
 8021da8:	681b      	ldr	r3, [r3, #0]
 8021daa:	4a10      	ldr	r2, [pc, #64]	; (8021dec <HAL_ADC_ConfigChannel+0x240>)
 8021dac:	fba2 2303 	umull	r2, r3, r2, r3
 8021db0:	0c9a      	lsrs	r2, r3, #18
 8021db2:	4613      	mov	r3, r2
 8021db4:	009b      	lsls	r3, r3, #2
 8021db6:	4413      	add	r3, r2
 8021db8:	005b      	lsls	r3, r3, #1
 8021dba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8021dbc:	e002      	b.n	8021dc4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8021dbe:	68bb      	ldr	r3, [r7, #8]
 8021dc0:	3b01      	subs	r3, #1
 8021dc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8021dc4:	68bb      	ldr	r3, [r7, #8]
 8021dc6:	2b00      	cmp	r3, #0
 8021dc8:	d1f9      	bne.n	8021dbe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8021dca:	687b      	ldr	r3, [r7, #4]
 8021dcc:	2200      	movs	r2, #0
 8021dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8021dd2:	2300      	movs	r3, #0
}
 8021dd4:	4618      	mov	r0, r3
 8021dd6:	3714      	adds	r7, #20
 8021dd8:	46bd      	mov	sp, r7
 8021dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dde:	4770      	bx	lr
 8021de0:	40012300 	.word	0x40012300
 8021de4:	40012000 	.word	0x40012000
 8021de8:	20000000 	.word	0x20000000
 8021dec:	431bde83 	.word	0x431bde83

08021df0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8021df0:	b480      	push	{r7}
 8021df2:	b085      	sub	sp, #20
 8021df4:	af00      	add	r7, sp, #0
 8021df6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8021df8:	4b79      	ldr	r3, [pc, #484]	; (8021fe0 <ADC_Init+0x1f0>)
 8021dfa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8021dfc:	68fb      	ldr	r3, [r7, #12]
 8021dfe:	685b      	ldr	r3, [r3, #4]
 8021e00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8021e04:	68fb      	ldr	r3, [r7, #12]
 8021e06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8021e08:	68fb      	ldr	r3, [r7, #12]
 8021e0a:	685a      	ldr	r2, [r3, #4]
 8021e0c:	687b      	ldr	r3, [r7, #4]
 8021e0e:	685b      	ldr	r3, [r3, #4]
 8021e10:	431a      	orrs	r2, r3
 8021e12:	68fb      	ldr	r3, [r7, #12]
 8021e14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8021e16:	687b      	ldr	r3, [r7, #4]
 8021e18:	681b      	ldr	r3, [r3, #0]
 8021e1a:	685a      	ldr	r2, [r3, #4]
 8021e1c:	687b      	ldr	r3, [r7, #4]
 8021e1e:	681b      	ldr	r3, [r3, #0]
 8021e20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8021e24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8021e26:	687b      	ldr	r3, [r7, #4]
 8021e28:	681b      	ldr	r3, [r3, #0]
 8021e2a:	6859      	ldr	r1, [r3, #4]
 8021e2c:	687b      	ldr	r3, [r7, #4]
 8021e2e:	691b      	ldr	r3, [r3, #16]
 8021e30:	021a      	lsls	r2, r3, #8
 8021e32:	687b      	ldr	r3, [r7, #4]
 8021e34:	681b      	ldr	r3, [r3, #0]
 8021e36:	430a      	orrs	r2, r1
 8021e38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8021e3a:	687b      	ldr	r3, [r7, #4]
 8021e3c:	681b      	ldr	r3, [r3, #0]
 8021e3e:	685a      	ldr	r2, [r3, #4]
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	681b      	ldr	r3, [r3, #0]
 8021e44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8021e48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8021e4a:	687b      	ldr	r3, [r7, #4]
 8021e4c:	681b      	ldr	r3, [r3, #0]
 8021e4e:	6859      	ldr	r1, [r3, #4]
 8021e50:	687b      	ldr	r3, [r7, #4]
 8021e52:	689a      	ldr	r2, [r3, #8]
 8021e54:	687b      	ldr	r3, [r7, #4]
 8021e56:	681b      	ldr	r3, [r3, #0]
 8021e58:	430a      	orrs	r2, r1
 8021e5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8021e5c:	687b      	ldr	r3, [r7, #4]
 8021e5e:	681b      	ldr	r3, [r3, #0]
 8021e60:	689a      	ldr	r2, [r3, #8]
 8021e62:	687b      	ldr	r3, [r7, #4]
 8021e64:	681b      	ldr	r3, [r3, #0]
 8021e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8021e6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8021e6c:	687b      	ldr	r3, [r7, #4]
 8021e6e:	681b      	ldr	r3, [r3, #0]
 8021e70:	6899      	ldr	r1, [r3, #8]
 8021e72:	687b      	ldr	r3, [r7, #4]
 8021e74:	68da      	ldr	r2, [r3, #12]
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	681b      	ldr	r3, [r3, #0]
 8021e7a:	430a      	orrs	r2, r1
 8021e7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8021e7e:	687b      	ldr	r3, [r7, #4]
 8021e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021e82:	4a58      	ldr	r2, [pc, #352]	; (8021fe4 <ADC_Init+0x1f4>)
 8021e84:	4293      	cmp	r3, r2
 8021e86:	d022      	beq.n	8021ece <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	681b      	ldr	r3, [r3, #0]
 8021e8c:	689a      	ldr	r2, [r3, #8]
 8021e8e:	687b      	ldr	r3, [r7, #4]
 8021e90:	681b      	ldr	r3, [r3, #0]
 8021e92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8021e96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8021e98:	687b      	ldr	r3, [r7, #4]
 8021e9a:	681b      	ldr	r3, [r3, #0]
 8021e9c:	6899      	ldr	r1, [r3, #8]
 8021e9e:	687b      	ldr	r3, [r7, #4]
 8021ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8021ea2:	687b      	ldr	r3, [r7, #4]
 8021ea4:	681b      	ldr	r3, [r3, #0]
 8021ea6:	430a      	orrs	r2, r1
 8021ea8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8021eaa:	687b      	ldr	r3, [r7, #4]
 8021eac:	681b      	ldr	r3, [r3, #0]
 8021eae:	689a      	ldr	r2, [r3, #8]
 8021eb0:	687b      	ldr	r3, [r7, #4]
 8021eb2:	681b      	ldr	r3, [r3, #0]
 8021eb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8021eb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8021eba:	687b      	ldr	r3, [r7, #4]
 8021ebc:	681b      	ldr	r3, [r3, #0]
 8021ebe:	6899      	ldr	r1, [r3, #8]
 8021ec0:	687b      	ldr	r3, [r7, #4]
 8021ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021ec4:	687b      	ldr	r3, [r7, #4]
 8021ec6:	681b      	ldr	r3, [r3, #0]
 8021ec8:	430a      	orrs	r2, r1
 8021eca:	609a      	str	r2, [r3, #8]
 8021ecc:	e00f      	b.n	8021eee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8021ece:	687b      	ldr	r3, [r7, #4]
 8021ed0:	681b      	ldr	r3, [r3, #0]
 8021ed2:	689a      	ldr	r2, [r3, #8]
 8021ed4:	687b      	ldr	r3, [r7, #4]
 8021ed6:	681b      	ldr	r3, [r3, #0]
 8021ed8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8021edc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8021ede:	687b      	ldr	r3, [r7, #4]
 8021ee0:	681b      	ldr	r3, [r3, #0]
 8021ee2:	689a      	ldr	r2, [r3, #8]
 8021ee4:	687b      	ldr	r3, [r7, #4]
 8021ee6:	681b      	ldr	r3, [r3, #0]
 8021ee8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8021eec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8021eee:	687b      	ldr	r3, [r7, #4]
 8021ef0:	681b      	ldr	r3, [r3, #0]
 8021ef2:	689a      	ldr	r2, [r3, #8]
 8021ef4:	687b      	ldr	r3, [r7, #4]
 8021ef6:	681b      	ldr	r3, [r3, #0]
 8021ef8:	f022 0202 	bic.w	r2, r2, #2
 8021efc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8021efe:	687b      	ldr	r3, [r7, #4]
 8021f00:	681b      	ldr	r3, [r3, #0]
 8021f02:	6899      	ldr	r1, [r3, #8]
 8021f04:	687b      	ldr	r3, [r7, #4]
 8021f06:	7e1b      	ldrb	r3, [r3, #24]
 8021f08:	005a      	lsls	r2, r3, #1
 8021f0a:	687b      	ldr	r3, [r7, #4]
 8021f0c:	681b      	ldr	r3, [r3, #0]
 8021f0e:	430a      	orrs	r2, r1
 8021f10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8021f12:	687b      	ldr	r3, [r7, #4]
 8021f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8021f18:	2b00      	cmp	r3, #0
 8021f1a:	d01b      	beq.n	8021f54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8021f1c:	687b      	ldr	r3, [r7, #4]
 8021f1e:	681b      	ldr	r3, [r3, #0]
 8021f20:	685a      	ldr	r2, [r3, #4]
 8021f22:	687b      	ldr	r3, [r7, #4]
 8021f24:	681b      	ldr	r3, [r3, #0]
 8021f26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8021f2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8021f2c:	687b      	ldr	r3, [r7, #4]
 8021f2e:	681b      	ldr	r3, [r3, #0]
 8021f30:	685a      	ldr	r2, [r3, #4]
 8021f32:	687b      	ldr	r3, [r7, #4]
 8021f34:	681b      	ldr	r3, [r3, #0]
 8021f36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8021f3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8021f3c:	687b      	ldr	r3, [r7, #4]
 8021f3e:	681b      	ldr	r3, [r3, #0]
 8021f40:	6859      	ldr	r1, [r3, #4]
 8021f42:	687b      	ldr	r3, [r7, #4]
 8021f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021f46:	3b01      	subs	r3, #1
 8021f48:	035a      	lsls	r2, r3, #13
 8021f4a:	687b      	ldr	r3, [r7, #4]
 8021f4c:	681b      	ldr	r3, [r3, #0]
 8021f4e:	430a      	orrs	r2, r1
 8021f50:	605a      	str	r2, [r3, #4]
 8021f52:	e007      	b.n	8021f64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8021f54:	687b      	ldr	r3, [r7, #4]
 8021f56:	681b      	ldr	r3, [r3, #0]
 8021f58:	685a      	ldr	r2, [r3, #4]
 8021f5a:	687b      	ldr	r3, [r7, #4]
 8021f5c:	681b      	ldr	r3, [r3, #0]
 8021f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8021f62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8021f64:	687b      	ldr	r3, [r7, #4]
 8021f66:	681b      	ldr	r3, [r3, #0]
 8021f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021f6a:	687b      	ldr	r3, [r7, #4]
 8021f6c:	681b      	ldr	r3, [r3, #0]
 8021f6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8021f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8021f74:	687b      	ldr	r3, [r7, #4]
 8021f76:	681b      	ldr	r3, [r3, #0]
 8021f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8021f7a:	687b      	ldr	r3, [r7, #4]
 8021f7c:	69db      	ldr	r3, [r3, #28]
 8021f7e:	3b01      	subs	r3, #1
 8021f80:	051a      	lsls	r2, r3, #20
 8021f82:	687b      	ldr	r3, [r7, #4]
 8021f84:	681b      	ldr	r3, [r3, #0]
 8021f86:	430a      	orrs	r2, r1
 8021f88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8021f8a:	687b      	ldr	r3, [r7, #4]
 8021f8c:	681b      	ldr	r3, [r3, #0]
 8021f8e:	689a      	ldr	r2, [r3, #8]
 8021f90:	687b      	ldr	r3, [r7, #4]
 8021f92:	681b      	ldr	r3, [r3, #0]
 8021f94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8021f98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8021f9a:	687b      	ldr	r3, [r7, #4]
 8021f9c:	681b      	ldr	r3, [r3, #0]
 8021f9e:	6899      	ldr	r1, [r3, #8]
 8021fa0:	687b      	ldr	r3, [r7, #4]
 8021fa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8021fa6:	025a      	lsls	r2, r3, #9
 8021fa8:	687b      	ldr	r3, [r7, #4]
 8021faa:	681b      	ldr	r3, [r3, #0]
 8021fac:	430a      	orrs	r2, r1
 8021fae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8021fb0:	687b      	ldr	r3, [r7, #4]
 8021fb2:	681b      	ldr	r3, [r3, #0]
 8021fb4:	689a      	ldr	r2, [r3, #8]
 8021fb6:	687b      	ldr	r3, [r7, #4]
 8021fb8:	681b      	ldr	r3, [r3, #0]
 8021fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8021fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8021fc0:	687b      	ldr	r3, [r7, #4]
 8021fc2:	681b      	ldr	r3, [r3, #0]
 8021fc4:	6899      	ldr	r1, [r3, #8]
 8021fc6:	687b      	ldr	r3, [r7, #4]
 8021fc8:	695b      	ldr	r3, [r3, #20]
 8021fca:	029a      	lsls	r2, r3, #10
 8021fcc:	687b      	ldr	r3, [r7, #4]
 8021fce:	681b      	ldr	r3, [r3, #0]
 8021fd0:	430a      	orrs	r2, r1
 8021fd2:	609a      	str	r2, [r3, #8]
}
 8021fd4:	bf00      	nop
 8021fd6:	3714      	adds	r7, #20
 8021fd8:	46bd      	mov	sp, r7
 8021fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fde:	4770      	bx	lr
 8021fe0:	40012300 	.word	0x40012300
 8021fe4:	0f000001 	.word	0x0f000001

08021fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021fe8:	b480      	push	{r7}
 8021fea:	b085      	sub	sp, #20
 8021fec:	af00      	add	r7, sp, #0
 8021fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8021ff0:	687b      	ldr	r3, [r7, #4]
 8021ff2:	f003 0307 	and.w	r3, r3, #7
 8021ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8021ff8:	4b0c      	ldr	r3, [pc, #48]	; (802202c <__NVIC_SetPriorityGrouping+0x44>)
 8021ffa:	68db      	ldr	r3, [r3, #12]
 8021ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8021ffe:	68ba      	ldr	r2, [r7, #8]
 8022000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8022004:	4013      	ands	r3, r2
 8022006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8022008:	68fb      	ldr	r3, [r7, #12]
 802200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802200c:	68bb      	ldr	r3, [r7, #8]
 802200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8022010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8022014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8022018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802201a:	4a04      	ldr	r2, [pc, #16]	; (802202c <__NVIC_SetPriorityGrouping+0x44>)
 802201c:	68bb      	ldr	r3, [r7, #8]
 802201e:	60d3      	str	r3, [r2, #12]
}
 8022020:	bf00      	nop
 8022022:	3714      	adds	r7, #20
 8022024:	46bd      	mov	sp, r7
 8022026:	f85d 7b04 	ldr.w	r7, [sp], #4
 802202a:	4770      	bx	lr
 802202c:	e000ed00 	.word	0xe000ed00

08022030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8022030:	b480      	push	{r7}
 8022032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8022034:	4b04      	ldr	r3, [pc, #16]	; (8022048 <__NVIC_GetPriorityGrouping+0x18>)
 8022036:	68db      	ldr	r3, [r3, #12]
 8022038:	0a1b      	lsrs	r3, r3, #8
 802203a:	f003 0307 	and.w	r3, r3, #7
}
 802203e:	4618      	mov	r0, r3
 8022040:	46bd      	mov	sp, r7
 8022042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022046:	4770      	bx	lr
 8022048:	e000ed00 	.word	0xe000ed00

0802204c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802204c:	b480      	push	{r7}
 802204e:	b083      	sub	sp, #12
 8022050:	af00      	add	r7, sp, #0
 8022052:	4603      	mov	r3, r0
 8022054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802205a:	2b00      	cmp	r3, #0
 802205c:	db0b      	blt.n	8022076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802205e:	79fb      	ldrb	r3, [r7, #7]
 8022060:	f003 021f 	and.w	r2, r3, #31
 8022064:	4907      	ldr	r1, [pc, #28]	; (8022084 <__NVIC_EnableIRQ+0x38>)
 8022066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802206a:	095b      	lsrs	r3, r3, #5
 802206c:	2001      	movs	r0, #1
 802206e:	fa00 f202 	lsl.w	r2, r0, r2
 8022072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8022076:	bf00      	nop
 8022078:	370c      	adds	r7, #12
 802207a:	46bd      	mov	sp, r7
 802207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022080:	4770      	bx	lr
 8022082:	bf00      	nop
 8022084:	e000e100 	.word	0xe000e100

08022088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8022088:	b480      	push	{r7}
 802208a:	b083      	sub	sp, #12
 802208c:	af00      	add	r7, sp, #0
 802208e:	4603      	mov	r3, r0
 8022090:	6039      	str	r1, [r7, #0]
 8022092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022098:	2b00      	cmp	r3, #0
 802209a:	db0a      	blt.n	80220b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802209c:	683b      	ldr	r3, [r7, #0]
 802209e:	b2da      	uxtb	r2, r3
 80220a0:	490c      	ldr	r1, [pc, #48]	; (80220d4 <__NVIC_SetPriority+0x4c>)
 80220a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80220a6:	0112      	lsls	r2, r2, #4
 80220a8:	b2d2      	uxtb	r2, r2
 80220aa:	440b      	add	r3, r1
 80220ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80220b0:	e00a      	b.n	80220c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80220b2:	683b      	ldr	r3, [r7, #0]
 80220b4:	b2da      	uxtb	r2, r3
 80220b6:	4908      	ldr	r1, [pc, #32]	; (80220d8 <__NVIC_SetPriority+0x50>)
 80220b8:	79fb      	ldrb	r3, [r7, #7]
 80220ba:	f003 030f 	and.w	r3, r3, #15
 80220be:	3b04      	subs	r3, #4
 80220c0:	0112      	lsls	r2, r2, #4
 80220c2:	b2d2      	uxtb	r2, r2
 80220c4:	440b      	add	r3, r1
 80220c6:	761a      	strb	r2, [r3, #24]
}
 80220c8:	bf00      	nop
 80220ca:	370c      	adds	r7, #12
 80220cc:	46bd      	mov	sp, r7
 80220ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220d2:	4770      	bx	lr
 80220d4:	e000e100 	.word	0xe000e100
 80220d8:	e000ed00 	.word	0xe000ed00

080220dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80220dc:	b480      	push	{r7}
 80220de:	b089      	sub	sp, #36	; 0x24
 80220e0:	af00      	add	r7, sp, #0
 80220e2:	60f8      	str	r0, [r7, #12]
 80220e4:	60b9      	str	r1, [r7, #8]
 80220e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80220e8:	68fb      	ldr	r3, [r7, #12]
 80220ea:	f003 0307 	and.w	r3, r3, #7
 80220ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80220f0:	69fb      	ldr	r3, [r7, #28]
 80220f2:	f1c3 0307 	rsb	r3, r3, #7
 80220f6:	2b04      	cmp	r3, #4
 80220f8:	bf28      	it	cs
 80220fa:	2304      	movcs	r3, #4
 80220fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80220fe:	69fb      	ldr	r3, [r7, #28]
 8022100:	3304      	adds	r3, #4
 8022102:	2b06      	cmp	r3, #6
 8022104:	d902      	bls.n	802210c <NVIC_EncodePriority+0x30>
 8022106:	69fb      	ldr	r3, [r7, #28]
 8022108:	3b03      	subs	r3, #3
 802210a:	e000      	b.n	802210e <NVIC_EncodePriority+0x32>
 802210c:	2300      	movs	r3, #0
 802210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022110:	f04f 32ff 	mov.w	r2, #4294967295
 8022114:	69bb      	ldr	r3, [r7, #24]
 8022116:	fa02 f303 	lsl.w	r3, r2, r3
 802211a:	43da      	mvns	r2, r3
 802211c:	68bb      	ldr	r3, [r7, #8]
 802211e:	401a      	ands	r2, r3
 8022120:	697b      	ldr	r3, [r7, #20]
 8022122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8022124:	f04f 31ff 	mov.w	r1, #4294967295
 8022128:	697b      	ldr	r3, [r7, #20]
 802212a:	fa01 f303 	lsl.w	r3, r1, r3
 802212e:	43d9      	mvns	r1, r3
 8022130:	687b      	ldr	r3, [r7, #4]
 8022132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022134:	4313      	orrs	r3, r2
         );
}
 8022136:	4618      	mov	r0, r3
 8022138:	3724      	adds	r7, #36	; 0x24
 802213a:	46bd      	mov	sp, r7
 802213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022140:	4770      	bx	lr
	...

08022144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8022144:	b580      	push	{r7, lr}
 8022146:	b082      	sub	sp, #8
 8022148:	af00      	add	r7, sp, #0
 802214a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802214c:	687b      	ldr	r3, [r7, #4]
 802214e:	3b01      	subs	r3, #1
 8022150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8022154:	d301      	bcc.n	802215a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8022156:	2301      	movs	r3, #1
 8022158:	e00f      	b.n	802217a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802215a:	4a0a      	ldr	r2, [pc, #40]	; (8022184 <SysTick_Config+0x40>)
 802215c:	687b      	ldr	r3, [r7, #4]
 802215e:	3b01      	subs	r3, #1
 8022160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8022162:	210f      	movs	r1, #15
 8022164:	f04f 30ff 	mov.w	r0, #4294967295
 8022168:	f7ff ff8e 	bl	8022088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802216c:	4b05      	ldr	r3, [pc, #20]	; (8022184 <SysTick_Config+0x40>)
 802216e:	2200      	movs	r2, #0
 8022170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8022172:	4b04      	ldr	r3, [pc, #16]	; (8022184 <SysTick_Config+0x40>)
 8022174:	2207      	movs	r2, #7
 8022176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8022178:	2300      	movs	r3, #0
}
 802217a:	4618      	mov	r0, r3
 802217c:	3708      	adds	r7, #8
 802217e:	46bd      	mov	sp, r7
 8022180:	bd80      	pop	{r7, pc}
 8022182:	bf00      	nop
 8022184:	e000e010 	.word	0xe000e010

08022188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022188:	b580      	push	{r7, lr}
 802218a:	b082      	sub	sp, #8
 802218c:	af00      	add	r7, sp, #0
 802218e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8022190:	6878      	ldr	r0, [r7, #4]
 8022192:	f7ff ff29 	bl	8021fe8 <__NVIC_SetPriorityGrouping>
}
 8022196:	bf00      	nop
 8022198:	3708      	adds	r7, #8
 802219a:	46bd      	mov	sp, r7
 802219c:	bd80      	pop	{r7, pc}

0802219e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802219e:	b580      	push	{r7, lr}
 80221a0:	b086      	sub	sp, #24
 80221a2:	af00      	add	r7, sp, #0
 80221a4:	4603      	mov	r3, r0
 80221a6:	60b9      	str	r1, [r7, #8]
 80221a8:	607a      	str	r2, [r7, #4]
 80221aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80221ac:	2300      	movs	r3, #0
 80221ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80221b0:	f7ff ff3e 	bl	8022030 <__NVIC_GetPriorityGrouping>
 80221b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80221b6:	687a      	ldr	r2, [r7, #4]
 80221b8:	68b9      	ldr	r1, [r7, #8]
 80221ba:	6978      	ldr	r0, [r7, #20]
 80221bc:	f7ff ff8e 	bl	80220dc <NVIC_EncodePriority>
 80221c0:	4602      	mov	r2, r0
 80221c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80221c6:	4611      	mov	r1, r2
 80221c8:	4618      	mov	r0, r3
 80221ca:	f7ff ff5d 	bl	8022088 <__NVIC_SetPriority>
}
 80221ce:	bf00      	nop
 80221d0:	3718      	adds	r7, #24
 80221d2:	46bd      	mov	sp, r7
 80221d4:	bd80      	pop	{r7, pc}

080221d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80221d6:	b580      	push	{r7, lr}
 80221d8:	b082      	sub	sp, #8
 80221da:	af00      	add	r7, sp, #0
 80221dc:	4603      	mov	r3, r0
 80221de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80221e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80221e4:	4618      	mov	r0, r3
 80221e6:	f7ff ff31 	bl	802204c <__NVIC_EnableIRQ>
}
 80221ea:	bf00      	nop
 80221ec:	3708      	adds	r7, #8
 80221ee:	46bd      	mov	sp, r7
 80221f0:	bd80      	pop	{r7, pc}

080221f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80221f2:	b580      	push	{r7, lr}
 80221f4:	b082      	sub	sp, #8
 80221f6:	af00      	add	r7, sp, #0
 80221f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80221fa:	6878      	ldr	r0, [r7, #4]
 80221fc:	f7ff ffa2 	bl	8022144 <SysTick_Config>
 8022200:	4603      	mov	r3, r0
}
 8022202:	4618      	mov	r0, r3
 8022204:	3708      	adds	r7, #8
 8022206:	46bd      	mov	sp, r7
 8022208:	bd80      	pop	{r7, pc}
	...

0802220c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802220c:	b480      	push	{r7}
 802220e:	b089      	sub	sp, #36	; 0x24
 8022210:	af00      	add	r7, sp, #0
 8022212:	6078      	str	r0, [r7, #4]
 8022214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8022216:	2300      	movs	r3, #0
 8022218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802221a:	2300      	movs	r3, #0
 802221c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802221e:	2300      	movs	r3, #0
 8022220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8022222:	2300      	movs	r3, #0
 8022224:	61fb      	str	r3, [r7, #28]
 8022226:	e16b      	b.n	8022500 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8022228:	2201      	movs	r2, #1
 802222a:	69fb      	ldr	r3, [r7, #28]
 802222c:	fa02 f303 	lsl.w	r3, r2, r3
 8022230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8022232:	683b      	ldr	r3, [r7, #0]
 8022234:	681b      	ldr	r3, [r3, #0]
 8022236:	697a      	ldr	r2, [r7, #20]
 8022238:	4013      	ands	r3, r2
 802223a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 802223c:	693a      	ldr	r2, [r7, #16]
 802223e:	697b      	ldr	r3, [r7, #20]
 8022240:	429a      	cmp	r2, r3
 8022242:	f040 815a 	bne.w	80224fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8022246:	683b      	ldr	r3, [r7, #0]
 8022248:	685b      	ldr	r3, [r3, #4]
 802224a:	2b01      	cmp	r3, #1
 802224c:	d00b      	beq.n	8022266 <HAL_GPIO_Init+0x5a>
 802224e:	683b      	ldr	r3, [r7, #0]
 8022250:	685b      	ldr	r3, [r3, #4]
 8022252:	2b02      	cmp	r3, #2
 8022254:	d007      	beq.n	8022266 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8022256:	683b      	ldr	r3, [r7, #0]
 8022258:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802225a:	2b11      	cmp	r3, #17
 802225c:	d003      	beq.n	8022266 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802225e:	683b      	ldr	r3, [r7, #0]
 8022260:	685b      	ldr	r3, [r3, #4]
 8022262:	2b12      	cmp	r3, #18
 8022264:	d130      	bne.n	80222c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	689b      	ldr	r3, [r3, #8]
 802226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802226c:	69fb      	ldr	r3, [r7, #28]
 802226e:	005b      	lsls	r3, r3, #1
 8022270:	2203      	movs	r2, #3
 8022272:	fa02 f303 	lsl.w	r3, r2, r3
 8022276:	43db      	mvns	r3, r3
 8022278:	69ba      	ldr	r2, [r7, #24]
 802227a:	4013      	ands	r3, r2
 802227c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802227e:	683b      	ldr	r3, [r7, #0]
 8022280:	68da      	ldr	r2, [r3, #12]
 8022282:	69fb      	ldr	r3, [r7, #28]
 8022284:	005b      	lsls	r3, r3, #1
 8022286:	fa02 f303 	lsl.w	r3, r2, r3
 802228a:	69ba      	ldr	r2, [r7, #24]
 802228c:	4313      	orrs	r3, r2
 802228e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8022290:	687b      	ldr	r3, [r7, #4]
 8022292:	69ba      	ldr	r2, [r7, #24]
 8022294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	685b      	ldr	r3, [r3, #4]
 802229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802229c:	2201      	movs	r2, #1
 802229e:	69fb      	ldr	r3, [r7, #28]
 80222a0:	fa02 f303 	lsl.w	r3, r2, r3
 80222a4:	43db      	mvns	r3, r3
 80222a6:	69ba      	ldr	r2, [r7, #24]
 80222a8:	4013      	ands	r3, r2
 80222aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80222ac:	683b      	ldr	r3, [r7, #0]
 80222ae:	685b      	ldr	r3, [r3, #4]
 80222b0:	091b      	lsrs	r3, r3, #4
 80222b2:	f003 0201 	and.w	r2, r3, #1
 80222b6:	69fb      	ldr	r3, [r7, #28]
 80222b8:	fa02 f303 	lsl.w	r3, r2, r3
 80222bc:	69ba      	ldr	r2, [r7, #24]
 80222be:	4313      	orrs	r3, r2
 80222c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80222c2:	687b      	ldr	r3, [r7, #4]
 80222c4:	69ba      	ldr	r2, [r7, #24]
 80222c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80222c8:	687b      	ldr	r3, [r7, #4]
 80222ca:	68db      	ldr	r3, [r3, #12]
 80222cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80222ce:	69fb      	ldr	r3, [r7, #28]
 80222d0:	005b      	lsls	r3, r3, #1
 80222d2:	2203      	movs	r2, #3
 80222d4:	fa02 f303 	lsl.w	r3, r2, r3
 80222d8:	43db      	mvns	r3, r3
 80222da:	69ba      	ldr	r2, [r7, #24]
 80222dc:	4013      	ands	r3, r2
 80222de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80222e0:	683b      	ldr	r3, [r7, #0]
 80222e2:	689a      	ldr	r2, [r3, #8]
 80222e4:	69fb      	ldr	r3, [r7, #28]
 80222e6:	005b      	lsls	r3, r3, #1
 80222e8:	fa02 f303 	lsl.w	r3, r2, r3
 80222ec:	69ba      	ldr	r2, [r7, #24]
 80222ee:	4313      	orrs	r3, r2
 80222f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80222f2:	687b      	ldr	r3, [r7, #4]
 80222f4:	69ba      	ldr	r2, [r7, #24]
 80222f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80222f8:	683b      	ldr	r3, [r7, #0]
 80222fa:	685b      	ldr	r3, [r3, #4]
 80222fc:	2b02      	cmp	r3, #2
 80222fe:	d003      	beq.n	8022308 <HAL_GPIO_Init+0xfc>
 8022300:	683b      	ldr	r3, [r7, #0]
 8022302:	685b      	ldr	r3, [r3, #4]
 8022304:	2b12      	cmp	r3, #18
 8022306:	d123      	bne.n	8022350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8022308:	69fb      	ldr	r3, [r7, #28]
 802230a:	08da      	lsrs	r2, r3, #3
 802230c:	687b      	ldr	r3, [r7, #4]
 802230e:	3208      	adds	r2, #8
 8022310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8022316:	69fb      	ldr	r3, [r7, #28]
 8022318:	f003 0307 	and.w	r3, r3, #7
 802231c:	009b      	lsls	r3, r3, #2
 802231e:	220f      	movs	r2, #15
 8022320:	fa02 f303 	lsl.w	r3, r2, r3
 8022324:	43db      	mvns	r3, r3
 8022326:	69ba      	ldr	r2, [r7, #24]
 8022328:	4013      	ands	r3, r2
 802232a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 802232c:	683b      	ldr	r3, [r7, #0]
 802232e:	691a      	ldr	r2, [r3, #16]
 8022330:	69fb      	ldr	r3, [r7, #28]
 8022332:	f003 0307 	and.w	r3, r3, #7
 8022336:	009b      	lsls	r3, r3, #2
 8022338:	fa02 f303 	lsl.w	r3, r2, r3
 802233c:	69ba      	ldr	r2, [r7, #24]
 802233e:	4313      	orrs	r3, r2
 8022340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8022342:	69fb      	ldr	r3, [r7, #28]
 8022344:	08da      	lsrs	r2, r3, #3
 8022346:	687b      	ldr	r3, [r7, #4]
 8022348:	3208      	adds	r2, #8
 802234a:	69b9      	ldr	r1, [r7, #24]
 802234c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	681b      	ldr	r3, [r3, #0]
 8022354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8022356:	69fb      	ldr	r3, [r7, #28]
 8022358:	005b      	lsls	r3, r3, #1
 802235a:	2203      	movs	r2, #3
 802235c:	fa02 f303 	lsl.w	r3, r2, r3
 8022360:	43db      	mvns	r3, r3
 8022362:	69ba      	ldr	r2, [r7, #24]
 8022364:	4013      	ands	r3, r2
 8022366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8022368:	683b      	ldr	r3, [r7, #0]
 802236a:	685b      	ldr	r3, [r3, #4]
 802236c:	f003 0203 	and.w	r2, r3, #3
 8022370:	69fb      	ldr	r3, [r7, #28]
 8022372:	005b      	lsls	r3, r3, #1
 8022374:	fa02 f303 	lsl.w	r3, r2, r3
 8022378:	69ba      	ldr	r2, [r7, #24]
 802237a:	4313      	orrs	r3, r2
 802237c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802237e:	687b      	ldr	r3, [r7, #4]
 8022380:	69ba      	ldr	r2, [r7, #24]
 8022382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8022384:	683b      	ldr	r3, [r7, #0]
 8022386:	685b      	ldr	r3, [r3, #4]
 8022388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802238c:	2b00      	cmp	r3, #0
 802238e:	f000 80b4 	beq.w	80224fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022392:	2300      	movs	r3, #0
 8022394:	60fb      	str	r3, [r7, #12]
 8022396:	4b5f      	ldr	r3, [pc, #380]	; (8022514 <HAL_GPIO_Init+0x308>)
 8022398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802239a:	4a5e      	ldr	r2, [pc, #376]	; (8022514 <HAL_GPIO_Init+0x308>)
 802239c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80223a0:	6453      	str	r3, [r2, #68]	; 0x44
 80223a2:	4b5c      	ldr	r3, [pc, #368]	; (8022514 <HAL_GPIO_Init+0x308>)
 80223a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80223a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80223aa:	60fb      	str	r3, [r7, #12]
 80223ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80223ae:	4a5a      	ldr	r2, [pc, #360]	; (8022518 <HAL_GPIO_Init+0x30c>)
 80223b0:	69fb      	ldr	r3, [r7, #28]
 80223b2:	089b      	lsrs	r3, r3, #2
 80223b4:	3302      	adds	r3, #2
 80223b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80223ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80223bc:	69fb      	ldr	r3, [r7, #28]
 80223be:	f003 0303 	and.w	r3, r3, #3
 80223c2:	009b      	lsls	r3, r3, #2
 80223c4:	220f      	movs	r2, #15
 80223c6:	fa02 f303 	lsl.w	r3, r2, r3
 80223ca:	43db      	mvns	r3, r3
 80223cc:	69ba      	ldr	r2, [r7, #24]
 80223ce:	4013      	ands	r3, r2
 80223d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80223d2:	687b      	ldr	r3, [r7, #4]
 80223d4:	4a51      	ldr	r2, [pc, #324]	; (802251c <HAL_GPIO_Init+0x310>)
 80223d6:	4293      	cmp	r3, r2
 80223d8:	d02b      	beq.n	8022432 <HAL_GPIO_Init+0x226>
 80223da:	687b      	ldr	r3, [r7, #4]
 80223dc:	4a50      	ldr	r2, [pc, #320]	; (8022520 <HAL_GPIO_Init+0x314>)
 80223de:	4293      	cmp	r3, r2
 80223e0:	d025      	beq.n	802242e <HAL_GPIO_Init+0x222>
 80223e2:	687b      	ldr	r3, [r7, #4]
 80223e4:	4a4f      	ldr	r2, [pc, #316]	; (8022524 <HAL_GPIO_Init+0x318>)
 80223e6:	4293      	cmp	r3, r2
 80223e8:	d01f      	beq.n	802242a <HAL_GPIO_Init+0x21e>
 80223ea:	687b      	ldr	r3, [r7, #4]
 80223ec:	4a4e      	ldr	r2, [pc, #312]	; (8022528 <HAL_GPIO_Init+0x31c>)
 80223ee:	4293      	cmp	r3, r2
 80223f0:	d019      	beq.n	8022426 <HAL_GPIO_Init+0x21a>
 80223f2:	687b      	ldr	r3, [r7, #4]
 80223f4:	4a4d      	ldr	r2, [pc, #308]	; (802252c <HAL_GPIO_Init+0x320>)
 80223f6:	4293      	cmp	r3, r2
 80223f8:	d013      	beq.n	8022422 <HAL_GPIO_Init+0x216>
 80223fa:	687b      	ldr	r3, [r7, #4]
 80223fc:	4a4c      	ldr	r2, [pc, #304]	; (8022530 <HAL_GPIO_Init+0x324>)
 80223fe:	4293      	cmp	r3, r2
 8022400:	d00d      	beq.n	802241e <HAL_GPIO_Init+0x212>
 8022402:	687b      	ldr	r3, [r7, #4]
 8022404:	4a4b      	ldr	r2, [pc, #300]	; (8022534 <HAL_GPIO_Init+0x328>)
 8022406:	4293      	cmp	r3, r2
 8022408:	d007      	beq.n	802241a <HAL_GPIO_Init+0x20e>
 802240a:	687b      	ldr	r3, [r7, #4]
 802240c:	4a4a      	ldr	r2, [pc, #296]	; (8022538 <HAL_GPIO_Init+0x32c>)
 802240e:	4293      	cmp	r3, r2
 8022410:	d101      	bne.n	8022416 <HAL_GPIO_Init+0x20a>
 8022412:	2307      	movs	r3, #7
 8022414:	e00e      	b.n	8022434 <HAL_GPIO_Init+0x228>
 8022416:	2308      	movs	r3, #8
 8022418:	e00c      	b.n	8022434 <HAL_GPIO_Init+0x228>
 802241a:	2306      	movs	r3, #6
 802241c:	e00a      	b.n	8022434 <HAL_GPIO_Init+0x228>
 802241e:	2305      	movs	r3, #5
 8022420:	e008      	b.n	8022434 <HAL_GPIO_Init+0x228>
 8022422:	2304      	movs	r3, #4
 8022424:	e006      	b.n	8022434 <HAL_GPIO_Init+0x228>
 8022426:	2303      	movs	r3, #3
 8022428:	e004      	b.n	8022434 <HAL_GPIO_Init+0x228>
 802242a:	2302      	movs	r3, #2
 802242c:	e002      	b.n	8022434 <HAL_GPIO_Init+0x228>
 802242e:	2301      	movs	r3, #1
 8022430:	e000      	b.n	8022434 <HAL_GPIO_Init+0x228>
 8022432:	2300      	movs	r3, #0
 8022434:	69fa      	ldr	r2, [r7, #28]
 8022436:	f002 0203 	and.w	r2, r2, #3
 802243a:	0092      	lsls	r2, r2, #2
 802243c:	4093      	lsls	r3, r2
 802243e:	69ba      	ldr	r2, [r7, #24]
 8022440:	4313      	orrs	r3, r2
 8022442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8022444:	4934      	ldr	r1, [pc, #208]	; (8022518 <HAL_GPIO_Init+0x30c>)
 8022446:	69fb      	ldr	r3, [r7, #28]
 8022448:	089b      	lsrs	r3, r3, #2
 802244a:	3302      	adds	r3, #2
 802244c:	69ba      	ldr	r2, [r7, #24]
 802244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8022452:	4b3a      	ldr	r3, [pc, #232]	; (802253c <HAL_GPIO_Init+0x330>)
 8022454:	681b      	ldr	r3, [r3, #0]
 8022456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022458:	693b      	ldr	r3, [r7, #16]
 802245a:	43db      	mvns	r3, r3
 802245c:	69ba      	ldr	r2, [r7, #24]
 802245e:	4013      	ands	r3, r2
 8022460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8022462:	683b      	ldr	r3, [r7, #0]
 8022464:	685b      	ldr	r3, [r3, #4]
 8022466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802246a:	2b00      	cmp	r3, #0
 802246c:	d003      	beq.n	8022476 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 802246e:	69ba      	ldr	r2, [r7, #24]
 8022470:	693b      	ldr	r3, [r7, #16]
 8022472:	4313      	orrs	r3, r2
 8022474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8022476:	4a31      	ldr	r2, [pc, #196]	; (802253c <HAL_GPIO_Init+0x330>)
 8022478:	69bb      	ldr	r3, [r7, #24]
 802247a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 802247c:	4b2f      	ldr	r3, [pc, #188]	; (802253c <HAL_GPIO_Init+0x330>)
 802247e:	685b      	ldr	r3, [r3, #4]
 8022480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022482:	693b      	ldr	r3, [r7, #16]
 8022484:	43db      	mvns	r3, r3
 8022486:	69ba      	ldr	r2, [r7, #24]
 8022488:	4013      	ands	r3, r2
 802248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 802248c:	683b      	ldr	r3, [r7, #0]
 802248e:	685b      	ldr	r3, [r3, #4]
 8022490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022494:	2b00      	cmp	r3, #0
 8022496:	d003      	beq.n	80224a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8022498:	69ba      	ldr	r2, [r7, #24]
 802249a:	693b      	ldr	r3, [r7, #16]
 802249c:	4313      	orrs	r3, r2
 802249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80224a0:	4a26      	ldr	r2, [pc, #152]	; (802253c <HAL_GPIO_Init+0x330>)
 80224a2:	69bb      	ldr	r3, [r7, #24]
 80224a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80224a6:	4b25      	ldr	r3, [pc, #148]	; (802253c <HAL_GPIO_Init+0x330>)
 80224a8:	689b      	ldr	r3, [r3, #8]
 80224aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80224ac:	693b      	ldr	r3, [r7, #16]
 80224ae:	43db      	mvns	r3, r3
 80224b0:	69ba      	ldr	r2, [r7, #24]
 80224b2:	4013      	ands	r3, r2
 80224b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80224b6:	683b      	ldr	r3, [r7, #0]
 80224b8:	685b      	ldr	r3, [r3, #4]
 80224ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80224be:	2b00      	cmp	r3, #0
 80224c0:	d003      	beq.n	80224ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80224c2:	69ba      	ldr	r2, [r7, #24]
 80224c4:	693b      	ldr	r3, [r7, #16]
 80224c6:	4313      	orrs	r3, r2
 80224c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80224ca:	4a1c      	ldr	r2, [pc, #112]	; (802253c <HAL_GPIO_Init+0x330>)
 80224cc:	69bb      	ldr	r3, [r7, #24]
 80224ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80224d0:	4b1a      	ldr	r3, [pc, #104]	; (802253c <HAL_GPIO_Init+0x330>)
 80224d2:	68db      	ldr	r3, [r3, #12]
 80224d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80224d6:	693b      	ldr	r3, [r7, #16]
 80224d8:	43db      	mvns	r3, r3
 80224da:	69ba      	ldr	r2, [r7, #24]
 80224dc:	4013      	ands	r3, r2
 80224de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80224e0:	683b      	ldr	r3, [r7, #0]
 80224e2:	685b      	ldr	r3, [r3, #4]
 80224e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80224e8:	2b00      	cmp	r3, #0
 80224ea:	d003      	beq.n	80224f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80224ec:	69ba      	ldr	r2, [r7, #24]
 80224ee:	693b      	ldr	r3, [r7, #16]
 80224f0:	4313      	orrs	r3, r2
 80224f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80224f4:	4a11      	ldr	r2, [pc, #68]	; (802253c <HAL_GPIO_Init+0x330>)
 80224f6:	69bb      	ldr	r3, [r7, #24]
 80224f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80224fa:	69fb      	ldr	r3, [r7, #28]
 80224fc:	3301      	adds	r3, #1
 80224fe:	61fb      	str	r3, [r7, #28]
 8022500:	69fb      	ldr	r3, [r7, #28]
 8022502:	2b0f      	cmp	r3, #15
 8022504:	f67f ae90 	bls.w	8022228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8022508:	bf00      	nop
 802250a:	3724      	adds	r7, #36	; 0x24
 802250c:	46bd      	mov	sp, r7
 802250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022512:	4770      	bx	lr
 8022514:	40023800 	.word	0x40023800
 8022518:	40013800 	.word	0x40013800
 802251c:	40020000 	.word	0x40020000
 8022520:	40020400 	.word	0x40020400
 8022524:	40020800 	.word	0x40020800
 8022528:	40020c00 	.word	0x40020c00
 802252c:	40021000 	.word	0x40021000
 8022530:	40021400 	.word	0x40021400
 8022534:	40021800 	.word	0x40021800
 8022538:	40021c00 	.word	0x40021c00
 802253c:	40013c00 	.word	0x40013c00

08022540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8022540:	b480      	push	{r7}
 8022542:	b083      	sub	sp, #12
 8022544:	af00      	add	r7, sp, #0
 8022546:	6078      	str	r0, [r7, #4]
 8022548:	460b      	mov	r3, r1
 802254a:	807b      	strh	r3, [r7, #2]
 802254c:	4613      	mov	r3, r2
 802254e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8022550:	787b      	ldrb	r3, [r7, #1]
 8022552:	2b00      	cmp	r3, #0
 8022554:	d003      	beq.n	802255e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8022556:	887a      	ldrh	r2, [r7, #2]
 8022558:	687b      	ldr	r3, [r7, #4]
 802255a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 802255c:	e003      	b.n	8022566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802255e:	887b      	ldrh	r3, [r7, #2]
 8022560:	041a      	lsls	r2, r3, #16
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	619a      	str	r2, [r3, #24]
}
 8022566:	bf00      	nop
 8022568:	370c      	adds	r7, #12
 802256a:	46bd      	mov	sp, r7
 802256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022570:	4770      	bx	lr
	...

08022574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8022574:	b580      	push	{r7, lr}
 8022576:	b084      	sub	sp, #16
 8022578:	af00      	add	r7, sp, #0
 802257a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802257c:	687b      	ldr	r3, [r7, #4]
 802257e:	2b00      	cmp	r3, #0
 8022580:	d101      	bne.n	8022586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8022582:	2301      	movs	r3, #1
 8022584:	e11f      	b.n	80227c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8022586:	687b      	ldr	r3, [r7, #4]
 8022588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802258c:	b2db      	uxtb	r3, r3
 802258e:	2b00      	cmp	r3, #0
 8022590:	d106      	bne.n	80225a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8022592:	687b      	ldr	r3, [r7, #4]
 8022594:	2200      	movs	r2, #0
 8022596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 802259a:	6878      	ldr	r0, [r7, #4]
 802259c:	f7fe fea6 	bl	80212ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80225a0:	687b      	ldr	r3, [r7, #4]
 80225a2:	2224      	movs	r2, #36	; 0x24
 80225a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	681b      	ldr	r3, [r3, #0]
 80225ac:	681a      	ldr	r2, [r3, #0]
 80225ae:	687b      	ldr	r3, [r7, #4]
 80225b0:	681b      	ldr	r3, [r3, #0]
 80225b2:	f022 0201 	bic.w	r2, r2, #1
 80225b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	681b      	ldr	r3, [r3, #0]
 80225bc:	681a      	ldr	r2, [r3, #0]
 80225be:	687b      	ldr	r3, [r7, #4]
 80225c0:	681b      	ldr	r3, [r3, #0]
 80225c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80225c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80225c8:	687b      	ldr	r3, [r7, #4]
 80225ca:	681b      	ldr	r3, [r3, #0]
 80225cc:	681a      	ldr	r2, [r3, #0]
 80225ce:	687b      	ldr	r3, [r7, #4]
 80225d0:	681b      	ldr	r3, [r3, #0]
 80225d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80225d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80225d8:	f000 fd18 	bl	802300c <HAL_RCC_GetPCLK1Freq>
 80225dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80225de:	687b      	ldr	r3, [r7, #4]
 80225e0:	685b      	ldr	r3, [r3, #4]
 80225e2:	4a7b      	ldr	r2, [pc, #492]	; (80227d0 <HAL_I2C_Init+0x25c>)
 80225e4:	4293      	cmp	r3, r2
 80225e6:	d807      	bhi.n	80225f8 <HAL_I2C_Init+0x84>
 80225e8:	68fb      	ldr	r3, [r7, #12]
 80225ea:	4a7a      	ldr	r2, [pc, #488]	; (80227d4 <HAL_I2C_Init+0x260>)
 80225ec:	4293      	cmp	r3, r2
 80225ee:	bf94      	ite	ls
 80225f0:	2301      	movls	r3, #1
 80225f2:	2300      	movhi	r3, #0
 80225f4:	b2db      	uxtb	r3, r3
 80225f6:	e006      	b.n	8022606 <HAL_I2C_Init+0x92>
 80225f8:	68fb      	ldr	r3, [r7, #12]
 80225fa:	4a77      	ldr	r2, [pc, #476]	; (80227d8 <HAL_I2C_Init+0x264>)
 80225fc:	4293      	cmp	r3, r2
 80225fe:	bf94      	ite	ls
 8022600:	2301      	movls	r3, #1
 8022602:	2300      	movhi	r3, #0
 8022604:	b2db      	uxtb	r3, r3
 8022606:	2b00      	cmp	r3, #0
 8022608:	d001      	beq.n	802260e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 802260a:	2301      	movs	r3, #1
 802260c:	e0db      	b.n	80227c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 802260e:	68fb      	ldr	r3, [r7, #12]
 8022610:	4a72      	ldr	r2, [pc, #456]	; (80227dc <HAL_I2C_Init+0x268>)
 8022612:	fba2 2303 	umull	r2, r3, r2, r3
 8022616:	0c9b      	lsrs	r3, r3, #18
 8022618:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802261a:	687b      	ldr	r3, [r7, #4]
 802261c:	681b      	ldr	r3, [r3, #0]
 802261e:	685b      	ldr	r3, [r3, #4]
 8022620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8022624:	687b      	ldr	r3, [r7, #4]
 8022626:	681b      	ldr	r3, [r3, #0]
 8022628:	68ba      	ldr	r2, [r7, #8]
 802262a:	430a      	orrs	r2, r1
 802262c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802262e:	687b      	ldr	r3, [r7, #4]
 8022630:	681b      	ldr	r3, [r3, #0]
 8022632:	6a1b      	ldr	r3, [r3, #32]
 8022634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8022638:	687b      	ldr	r3, [r7, #4]
 802263a:	685b      	ldr	r3, [r3, #4]
 802263c:	4a64      	ldr	r2, [pc, #400]	; (80227d0 <HAL_I2C_Init+0x25c>)
 802263e:	4293      	cmp	r3, r2
 8022640:	d802      	bhi.n	8022648 <HAL_I2C_Init+0xd4>
 8022642:	68bb      	ldr	r3, [r7, #8]
 8022644:	3301      	adds	r3, #1
 8022646:	e009      	b.n	802265c <HAL_I2C_Init+0xe8>
 8022648:	68bb      	ldr	r3, [r7, #8]
 802264a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 802264e:	fb02 f303 	mul.w	r3, r2, r3
 8022652:	4a63      	ldr	r2, [pc, #396]	; (80227e0 <HAL_I2C_Init+0x26c>)
 8022654:	fba2 2303 	umull	r2, r3, r2, r3
 8022658:	099b      	lsrs	r3, r3, #6
 802265a:	3301      	adds	r3, #1
 802265c:	687a      	ldr	r2, [r7, #4]
 802265e:	6812      	ldr	r2, [r2, #0]
 8022660:	430b      	orrs	r3, r1
 8022662:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8022664:	687b      	ldr	r3, [r7, #4]
 8022666:	681b      	ldr	r3, [r3, #0]
 8022668:	69db      	ldr	r3, [r3, #28]
 802266a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 802266e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8022672:	687b      	ldr	r3, [r7, #4]
 8022674:	685b      	ldr	r3, [r3, #4]
 8022676:	4956      	ldr	r1, [pc, #344]	; (80227d0 <HAL_I2C_Init+0x25c>)
 8022678:	428b      	cmp	r3, r1
 802267a:	d80d      	bhi.n	8022698 <HAL_I2C_Init+0x124>
 802267c:	68fb      	ldr	r3, [r7, #12]
 802267e:	1e59      	subs	r1, r3, #1
 8022680:	687b      	ldr	r3, [r7, #4]
 8022682:	685b      	ldr	r3, [r3, #4]
 8022684:	005b      	lsls	r3, r3, #1
 8022686:	fbb1 f3f3 	udiv	r3, r1, r3
 802268a:	3301      	adds	r3, #1
 802268c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022690:	2b04      	cmp	r3, #4
 8022692:	bf38      	it	cc
 8022694:	2304      	movcc	r3, #4
 8022696:	e04f      	b.n	8022738 <HAL_I2C_Init+0x1c4>
 8022698:	687b      	ldr	r3, [r7, #4]
 802269a:	689b      	ldr	r3, [r3, #8]
 802269c:	2b00      	cmp	r3, #0
 802269e:	d111      	bne.n	80226c4 <HAL_I2C_Init+0x150>
 80226a0:	68fb      	ldr	r3, [r7, #12]
 80226a2:	1e58      	subs	r0, r3, #1
 80226a4:	687b      	ldr	r3, [r7, #4]
 80226a6:	6859      	ldr	r1, [r3, #4]
 80226a8:	460b      	mov	r3, r1
 80226aa:	005b      	lsls	r3, r3, #1
 80226ac:	440b      	add	r3, r1
 80226ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80226b2:	3301      	adds	r3, #1
 80226b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80226b8:	2b00      	cmp	r3, #0
 80226ba:	bf0c      	ite	eq
 80226bc:	2301      	moveq	r3, #1
 80226be:	2300      	movne	r3, #0
 80226c0:	b2db      	uxtb	r3, r3
 80226c2:	e012      	b.n	80226ea <HAL_I2C_Init+0x176>
 80226c4:	68fb      	ldr	r3, [r7, #12]
 80226c6:	1e58      	subs	r0, r3, #1
 80226c8:	687b      	ldr	r3, [r7, #4]
 80226ca:	6859      	ldr	r1, [r3, #4]
 80226cc:	460b      	mov	r3, r1
 80226ce:	009b      	lsls	r3, r3, #2
 80226d0:	440b      	add	r3, r1
 80226d2:	0099      	lsls	r1, r3, #2
 80226d4:	440b      	add	r3, r1
 80226d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80226da:	3301      	adds	r3, #1
 80226dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80226e0:	2b00      	cmp	r3, #0
 80226e2:	bf0c      	ite	eq
 80226e4:	2301      	moveq	r3, #1
 80226e6:	2300      	movne	r3, #0
 80226e8:	b2db      	uxtb	r3, r3
 80226ea:	2b00      	cmp	r3, #0
 80226ec:	d001      	beq.n	80226f2 <HAL_I2C_Init+0x17e>
 80226ee:	2301      	movs	r3, #1
 80226f0:	e022      	b.n	8022738 <HAL_I2C_Init+0x1c4>
 80226f2:	687b      	ldr	r3, [r7, #4]
 80226f4:	689b      	ldr	r3, [r3, #8]
 80226f6:	2b00      	cmp	r3, #0
 80226f8:	d10e      	bne.n	8022718 <HAL_I2C_Init+0x1a4>
 80226fa:	68fb      	ldr	r3, [r7, #12]
 80226fc:	1e58      	subs	r0, r3, #1
 80226fe:	687b      	ldr	r3, [r7, #4]
 8022700:	6859      	ldr	r1, [r3, #4]
 8022702:	460b      	mov	r3, r1
 8022704:	005b      	lsls	r3, r3, #1
 8022706:	440b      	add	r3, r1
 8022708:	fbb0 f3f3 	udiv	r3, r0, r3
 802270c:	3301      	adds	r3, #1
 802270e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8022716:	e00f      	b.n	8022738 <HAL_I2C_Init+0x1c4>
 8022718:	68fb      	ldr	r3, [r7, #12]
 802271a:	1e58      	subs	r0, r3, #1
 802271c:	687b      	ldr	r3, [r7, #4]
 802271e:	6859      	ldr	r1, [r3, #4]
 8022720:	460b      	mov	r3, r1
 8022722:	009b      	lsls	r3, r3, #2
 8022724:	440b      	add	r3, r1
 8022726:	0099      	lsls	r1, r3, #2
 8022728:	440b      	add	r3, r1
 802272a:	fbb0 f3f3 	udiv	r3, r0, r3
 802272e:	3301      	adds	r3, #1
 8022730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8022738:	6879      	ldr	r1, [r7, #4]
 802273a:	6809      	ldr	r1, [r1, #0]
 802273c:	4313      	orrs	r3, r2
 802273e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8022740:	687b      	ldr	r3, [r7, #4]
 8022742:	681b      	ldr	r3, [r3, #0]
 8022744:	681b      	ldr	r3, [r3, #0]
 8022746:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 802274a:	687b      	ldr	r3, [r7, #4]
 802274c:	69da      	ldr	r2, [r3, #28]
 802274e:	687b      	ldr	r3, [r7, #4]
 8022750:	6a1b      	ldr	r3, [r3, #32]
 8022752:	431a      	orrs	r2, r3
 8022754:	687b      	ldr	r3, [r7, #4]
 8022756:	681b      	ldr	r3, [r3, #0]
 8022758:	430a      	orrs	r2, r1
 802275a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 802275c:	687b      	ldr	r3, [r7, #4]
 802275e:	681b      	ldr	r3, [r3, #0]
 8022760:	689b      	ldr	r3, [r3, #8]
 8022762:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8022766:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 802276a:	687a      	ldr	r2, [r7, #4]
 802276c:	6911      	ldr	r1, [r2, #16]
 802276e:	687a      	ldr	r2, [r7, #4]
 8022770:	68d2      	ldr	r2, [r2, #12]
 8022772:	4311      	orrs	r1, r2
 8022774:	687a      	ldr	r2, [r7, #4]
 8022776:	6812      	ldr	r2, [r2, #0]
 8022778:	430b      	orrs	r3, r1
 802277a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 802277c:	687b      	ldr	r3, [r7, #4]
 802277e:	681b      	ldr	r3, [r3, #0]
 8022780:	68db      	ldr	r3, [r3, #12]
 8022782:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8022786:	687b      	ldr	r3, [r7, #4]
 8022788:	695a      	ldr	r2, [r3, #20]
 802278a:	687b      	ldr	r3, [r7, #4]
 802278c:	699b      	ldr	r3, [r3, #24]
 802278e:	431a      	orrs	r2, r3
 8022790:	687b      	ldr	r3, [r7, #4]
 8022792:	681b      	ldr	r3, [r3, #0]
 8022794:	430a      	orrs	r2, r1
 8022796:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8022798:	687b      	ldr	r3, [r7, #4]
 802279a:	681b      	ldr	r3, [r3, #0]
 802279c:	681a      	ldr	r2, [r3, #0]
 802279e:	687b      	ldr	r3, [r7, #4]
 80227a0:	681b      	ldr	r3, [r3, #0]
 80227a2:	f042 0201 	orr.w	r2, r2, #1
 80227a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80227a8:	687b      	ldr	r3, [r7, #4]
 80227aa:	2200      	movs	r2, #0
 80227ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80227ae:	687b      	ldr	r3, [r7, #4]
 80227b0:	2220      	movs	r2, #32
 80227b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80227b6:	687b      	ldr	r3, [r7, #4]
 80227b8:	2200      	movs	r2, #0
 80227ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	2200      	movs	r2, #0
 80227c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80227c4:	2300      	movs	r3, #0
}
 80227c6:	4618      	mov	r0, r3
 80227c8:	3710      	adds	r7, #16
 80227ca:	46bd      	mov	sp, r7
 80227cc:	bd80      	pop	{r7, pc}
 80227ce:	bf00      	nop
 80227d0:	000186a0 	.word	0x000186a0
 80227d4:	001e847f 	.word	0x001e847f
 80227d8:	003d08ff 	.word	0x003d08ff
 80227dc:	431bde83 	.word	0x431bde83
 80227e0:	10624dd3 	.word	0x10624dd3

080227e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80227e4:	b580      	push	{r7, lr}
 80227e6:	b086      	sub	sp, #24
 80227e8:	af00      	add	r7, sp, #0
 80227ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80227ec:	687b      	ldr	r3, [r7, #4]
 80227ee:	2b00      	cmp	r3, #0
 80227f0:	d101      	bne.n	80227f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80227f2:	2301      	movs	r3, #1
 80227f4:	e25b      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80227f6:	687b      	ldr	r3, [r7, #4]
 80227f8:	681b      	ldr	r3, [r3, #0]
 80227fa:	f003 0301 	and.w	r3, r3, #1
 80227fe:	2b00      	cmp	r3, #0
 8022800:	d075      	beq.n	80228ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8022802:	4ba3      	ldr	r3, [pc, #652]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022804:	689b      	ldr	r3, [r3, #8]
 8022806:	f003 030c 	and.w	r3, r3, #12
 802280a:	2b04      	cmp	r3, #4
 802280c:	d00c      	beq.n	8022828 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802280e:	4ba0      	ldr	r3, [pc, #640]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022810:	689b      	ldr	r3, [r3, #8]
 8022812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8022816:	2b08      	cmp	r3, #8
 8022818:	d112      	bne.n	8022840 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802281a:	4b9d      	ldr	r3, [pc, #628]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 802281c:	685b      	ldr	r3, [r3, #4]
 802281e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8022826:	d10b      	bne.n	8022840 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8022828:	4b99      	ldr	r3, [pc, #612]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 802282a:	681b      	ldr	r3, [r3, #0]
 802282c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022830:	2b00      	cmp	r3, #0
 8022832:	d05b      	beq.n	80228ec <HAL_RCC_OscConfig+0x108>
 8022834:	687b      	ldr	r3, [r7, #4]
 8022836:	685b      	ldr	r3, [r3, #4]
 8022838:	2b00      	cmp	r3, #0
 802283a:	d157      	bne.n	80228ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 802283c:	2301      	movs	r3, #1
 802283e:	e236      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8022840:	687b      	ldr	r3, [r7, #4]
 8022842:	685b      	ldr	r3, [r3, #4]
 8022844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022848:	d106      	bne.n	8022858 <HAL_RCC_OscConfig+0x74>
 802284a:	4b91      	ldr	r3, [pc, #580]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 802284c:	681b      	ldr	r3, [r3, #0]
 802284e:	4a90      	ldr	r2, [pc, #576]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8022854:	6013      	str	r3, [r2, #0]
 8022856:	e01d      	b.n	8022894 <HAL_RCC_OscConfig+0xb0>
 8022858:	687b      	ldr	r3, [r7, #4]
 802285a:	685b      	ldr	r3, [r3, #4]
 802285c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8022860:	d10c      	bne.n	802287c <HAL_RCC_OscConfig+0x98>
 8022862:	4b8b      	ldr	r3, [pc, #556]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022864:	681b      	ldr	r3, [r3, #0]
 8022866:	4a8a      	ldr	r2, [pc, #552]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802286c:	6013      	str	r3, [r2, #0]
 802286e:	4b88      	ldr	r3, [pc, #544]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022870:	681b      	ldr	r3, [r3, #0]
 8022872:	4a87      	ldr	r2, [pc, #540]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8022878:	6013      	str	r3, [r2, #0]
 802287a:	e00b      	b.n	8022894 <HAL_RCC_OscConfig+0xb0>
 802287c:	4b84      	ldr	r3, [pc, #528]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 802287e:	681b      	ldr	r3, [r3, #0]
 8022880:	4a83      	ldr	r2, [pc, #524]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8022886:	6013      	str	r3, [r2, #0]
 8022888:	4b81      	ldr	r3, [pc, #516]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 802288a:	681b      	ldr	r3, [r3, #0]
 802288c:	4a80      	ldr	r2, [pc, #512]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 802288e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8022892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8022894:	687b      	ldr	r3, [r7, #4]
 8022896:	685b      	ldr	r3, [r3, #4]
 8022898:	2b00      	cmp	r3, #0
 802289a:	d013      	beq.n	80228c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802289c:	f7ff f936 	bl	8021b0c <HAL_GetTick>
 80228a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80228a2:	e008      	b.n	80228b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80228a4:	f7ff f932 	bl	8021b0c <HAL_GetTick>
 80228a8:	4602      	mov	r2, r0
 80228aa:	693b      	ldr	r3, [r7, #16]
 80228ac:	1ad3      	subs	r3, r2, r3
 80228ae:	2b64      	cmp	r3, #100	; 0x64
 80228b0:	d901      	bls.n	80228b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80228b2:	2303      	movs	r3, #3
 80228b4:	e1fb      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80228b6:	4b76      	ldr	r3, [pc, #472]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 80228b8:	681b      	ldr	r3, [r3, #0]
 80228ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80228be:	2b00      	cmp	r3, #0
 80228c0:	d0f0      	beq.n	80228a4 <HAL_RCC_OscConfig+0xc0>
 80228c2:	e014      	b.n	80228ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80228c4:	f7ff f922 	bl	8021b0c <HAL_GetTick>
 80228c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80228ca:	e008      	b.n	80228de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80228cc:	f7ff f91e 	bl	8021b0c <HAL_GetTick>
 80228d0:	4602      	mov	r2, r0
 80228d2:	693b      	ldr	r3, [r7, #16]
 80228d4:	1ad3      	subs	r3, r2, r3
 80228d6:	2b64      	cmp	r3, #100	; 0x64
 80228d8:	d901      	bls.n	80228de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80228da:	2303      	movs	r3, #3
 80228dc:	e1e7      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80228de:	4b6c      	ldr	r3, [pc, #432]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 80228e0:	681b      	ldr	r3, [r3, #0]
 80228e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80228e6:	2b00      	cmp	r3, #0
 80228e8:	d1f0      	bne.n	80228cc <HAL_RCC_OscConfig+0xe8>
 80228ea:	e000      	b.n	80228ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80228ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80228ee:	687b      	ldr	r3, [r7, #4]
 80228f0:	681b      	ldr	r3, [r3, #0]
 80228f2:	f003 0302 	and.w	r3, r3, #2
 80228f6:	2b00      	cmp	r3, #0
 80228f8:	d063      	beq.n	80229c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80228fa:	4b65      	ldr	r3, [pc, #404]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 80228fc:	689b      	ldr	r3, [r3, #8]
 80228fe:	f003 030c 	and.w	r3, r3, #12
 8022902:	2b00      	cmp	r3, #0
 8022904:	d00b      	beq.n	802291e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8022906:	4b62      	ldr	r3, [pc, #392]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022908:	689b      	ldr	r3, [r3, #8]
 802290a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802290e:	2b08      	cmp	r3, #8
 8022910:	d11c      	bne.n	802294c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8022912:	4b5f      	ldr	r3, [pc, #380]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022914:	685b      	ldr	r3, [r3, #4]
 8022916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802291a:	2b00      	cmp	r3, #0
 802291c:	d116      	bne.n	802294c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802291e:	4b5c      	ldr	r3, [pc, #368]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022920:	681b      	ldr	r3, [r3, #0]
 8022922:	f003 0302 	and.w	r3, r3, #2
 8022926:	2b00      	cmp	r3, #0
 8022928:	d005      	beq.n	8022936 <HAL_RCC_OscConfig+0x152>
 802292a:	687b      	ldr	r3, [r7, #4]
 802292c:	68db      	ldr	r3, [r3, #12]
 802292e:	2b01      	cmp	r3, #1
 8022930:	d001      	beq.n	8022936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8022932:	2301      	movs	r3, #1
 8022934:	e1bb      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8022936:	4b56      	ldr	r3, [pc, #344]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022938:	681b      	ldr	r3, [r3, #0]
 802293a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802293e:	687b      	ldr	r3, [r7, #4]
 8022940:	691b      	ldr	r3, [r3, #16]
 8022942:	00db      	lsls	r3, r3, #3
 8022944:	4952      	ldr	r1, [pc, #328]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022946:	4313      	orrs	r3, r2
 8022948:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802294a:	e03a      	b.n	80229c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 802294c:	687b      	ldr	r3, [r7, #4]
 802294e:	68db      	ldr	r3, [r3, #12]
 8022950:	2b00      	cmp	r3, #0
 8022952:	d020      	beq.n	8022996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8022954:	4b4f      	ldr	r3, [pc, #316]	; (8022a94 <HAL_RCC_OscConfig+0x2b0>)
 8022956:	2201      	movs	r2, #1
 8022958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802295a:	f7ff f8d7 	bl	8021b0c <HAL_GetTick>
 802295e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8022960:	e008      	b.n	8022974 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8022962:	f7ff f8d3 	bl	8021b0c <HAL_GetTick>
 8022966:	4602      	mov	r2, r0
 8022968:	693b      	ldr	r3, [r7, #16]
 802296a:	1ad3      	subs	r3, r2, r3
 802296c:	2b02      	cmp	r3, #2
 802296e:	d901      	bls.n	8022974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8022970:	2303      	movs	r3, #3
 8022972:	e19c      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8022974:	4b46      	ldr	r3, [pc, #280]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022976:	681b      	ldr	r3, [r3, #0]
 8022978:	f003 0302 	and.w	r3, r3, #2
 802297c:	2b00      	cmp	r3, #0
 802297e:	d0f0      	beq.n	8022962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8022980:	4b43      	ldr	r3, [pc, #268]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022982:	681b      	ldr	r3, [r3, #0]
 8022984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8022988:	687b      	ldr	r3, [r7, #4]
 802298a:	691b      	ldr	r3, [r3, #16]
 802298c:	00db      	lsls	r3, r3, #3
 802298e:	4940      	ldr	r1, [pc, #256]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022990:	4313      	orrs	r3, r2
 8022992:	600b      	str	r3, [r1, #0]
 8022994:	e015      	b.n	80229c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8022996:	4b3f      	ldr	r3, [pc, #252]	; (8022a94 <HAL_RCC_OscConfig+0x2b0>)
 8022998:	2200      	movs	r2, #0
 802299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802299c:	f7ff f8b6 	bl	8021b0c <HAL_GetTick>
 80229a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80229a2:	e008      	b.n	80229b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80229a4:	f7ff f8b2 	bl	8021b0c <HAL_GetTick>
 80229a8:	4602      	mov	r2, r0
 80229aa:	693b      	ldr	r3, [r7, #16]
 80229ac:	1ad3      	subs	r3, r2, r3
 80229ae:	2b02      	cmp	r3, #2
 80229b0:	d901      	bls.n	80229b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80229b2:	2303      	movs	r3, #3
 80229b4:	e17b      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80229b6:	4b36      	ldr	r3, [pc, #216]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 80229b8:	681b      	ldr	r3, [r3, #0]
 80229ba:	f003 0302 	and.w	r3, r3, #2
 80229be:	2b00      	cmp	r3, #0
 80229c0:	d1f0      	bne.n	80229a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80229c2:	687b      	ldr	r3, [r7, #4]
 80229c4:	681b      	ldr	r3, [r3, #0]
 80229c6:	f003 0308 	and.w	r3, r3, #8
 80229ca:	2b00      	cmp	r3, #0
 80229cc:	d030      	beq.n	8022a30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80229ce:	687b      	ldr	r3, [r7, #4]
 80229d0:	695b      	ldr	r3, [r3, #20]
 80229d2:	2b00      	cmp	r3, #0
 80229d4:	d016      	beq.n	8022a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80229d6:	4b30      	ldr	r3, [pc, #192]	; (8022a98 <HAL_RCC_OscConfig+0x2b4>)
 80229d8:	2201      	movs	r2, #1
 80229da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80229dc:	f7ff f896 	bl	8021b0c <HAL_GetTick>
 80229e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80229e2:	e008      	b.n	80229f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80229e4:	f7ff f892 	bl	8021b0c <HAL_GetTick>
 80229e8:	4602      	mov	r2, r0
 80229ea:	693b      	ldr	r3, [r7, #16]
 80229ec:	1ad3      	subs	r3, r2, r3
 80229ee:	2b02      	cmp	r3, #2
 80229f0:	d901      	bls.n	80229f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80229f2:	2303      	movs	r3, #3
 80229f4:	e15b      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80229f6:	4b26      	ldr	r3, [pc, #152]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 80229f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80229fa:	f003 0302 	and.w	r3, r3, #2
 80229fe:	2b00      	cmp	r3, #0
 8022a00:	d0f0      	beq.n	80229e4 <HAL_RCC_OscConfig+0x200>
 8022a02:	e015      	b.n	8022a30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8022a04:	4b24      	ldr	r3, [pc, #144]	; (8022a98 <HAL_RCC_OscConfig+0x2b4>)
 8022a06:	2200      	movs	r2, #0
 8022a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8022a0a:	f7ff f87f 	bl	8021b0c <HAL_GetTick>
 8022a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8022a10:	e008      	b.n	8022a24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8022a12:	f7ff f87b 	bl	8021b0c <HAL_GetTick>
 8022a16:	4602      	mov	r2, r0
 8022a18:	693b      	ldr	r3, [r7, #16]
 8022a1a:	1ad3      	subs	r3, r2, r3
 8022a1c:	2b02      	cmp	r3, #2
 8022a1e:	d901      	bls.n	8022a24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8022a20:	2303      	movs	r3, #3
 8022a22:	e144      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8022a24:	4b1a      	ldr	r3, [pc, #104]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8022a28:	f003 0302 	and.w	r3, r3, #2
 8022a2c:	2b00      	cmp	r3, #0
 8022a2e:	d1f0      	bne.n	8022a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8022a30:	687b      	ldr	r3, [r7, #4]
 8022a32:	681b      	ldr	r3, [r3, #0]
 8022a34:	f003 0304 	and.w	r3, r3, #4
 8022a38:	2b00      	cmp	r3, #0
 8022a3a:	f000 80a0 	beq.w	8022b7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8022a3e:	2300      	movs	r3, #0
 8022a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8022a42:	4b13      	ldr	r3, [pc, #76]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022a4a:	2b00      	cmp	r3, #0
 8022a4c:	d10f      	bne.n	8022a6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8022a4e:	2300      	movs	r3, #0
 8022a50:	60bb      	str	r3, [r7, #8]
 8022a52:	4b0f      	ldr	r3, [pc, #60]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022a56:	4a0e      	ldr	r2, [pc, #56]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8022a5e:	4b0c      	ldr	r3, [pc, #48]	; (8022a90 <HAL_RCC_OscConfig+0x2ac>)
 8022a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022a66:	60bb      	str	r3, [r7, #8]
 8022a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8022a6a:	2301      	movs	r3, #1
 8022a6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8022a6e:	4b0b      	ldr	r3, [pc, #44]	; (8022a9c <HAL_RCC_OscConfig+0x2b8>)
 8022a70:	681b      	ldr	r3, [r3, #0]
 8022a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022a76:	2b00      	cmp	r3, #0
 8022a78:	d121      	bne.n	8022abe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8022a7a:	4b08      	ldr	r3, [pc, #32]	; (8022a9c <HAL_RCC_OscConfig+0x2b8>)
 8022a7c:	681b      	ldr	r3, [r3, #0]
 8022a7e:	4a07      	ldr	r2, [pc, #28]	; (8022a9c <HAL_RCC_OscConfig+0x2b8>)
 8022a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8022a86:	f7ff f841 	bl	8021b0c <HAL_GetTick>
 8022a8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8022a8c:	e011      	b.n	8022ab2 <HAL_RCC_OscConfig+0x2ce>
 8022a8e:	bf00      	nop
 8022a90:	40023800 	.word	0x40023800
 8022a94:	42470000 	.word	0x42470000
 8022a98:	42470e80 	.word	0x42470e80
 8022a9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8022aa0:	f7ff f834 	bl	8021b0c <HAL_GetTick>
 8022aa4:	4602      	mov	r2, r0
 8022aa6:	693b      	ldr	r3, [r7, #16]
 8022aa8:	1ad3      	subs	r3, r2, r3
 8022aaa:	2b02      	cmp	r3, #2
 8022aac:	d901      	bls.n	8022ab2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8022aae:	2303      	movs	r3, #3
 8022ab0:	e0fd      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8022ab2:	4b81      	ldr	r3, [pc, #516]	; (8022cb8 <HAL_RCC_OscConfig+0x4d4>)
 8022ab4:	681b      	ldr	r3, [r3, #0]
 8022ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022aba:	2b00      	cmp	r3, #0
 8022abc:	d0f0      	beq.n	8022aa0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8022abe:	687b      	ldr	r3, [r7, #4]
 8022ac0:	689b      	ldr	r3, [r3, #8]
 8022ac2:	2b01      	cmp	r3, #1
 8022ac4:	d106      	bne.n	8022ad4 <HAL_RCC_OscConfig+0x2f0>
 8022ac6:	4b7d      	ldr	r3, [pc, #500]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022aca:	4a7c      	ldr	r2, [pc, #496]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022acc:	f043 0301 	orr.w	r3, r3, #1
 8022ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8022ad2:	e01c      	b.n	8022b0e <HAL_RCC_OscConfig+0x32a>
 8022ad4:	687b      	ldr	r3, [r7, #4]
 8022ad6:	689b      	ldr	r3, [r3, #8]
 8022ad8:	2b05      	cmp	r3, #5
 8022ada:	d10c      	bne.n	8022af6 <HAL_RCC_OscConfig+0x312>
 8022adc:	4b77      	ldr	r3, [pc, #476]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022ae0:	4a76      	ldr	r2, [pc, #472]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022ae2:	f043 0304 	orr.w	r3, r3, #4
 8022ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8022ae8:	4b74      	ldr	r3, [pc, #464]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022aec:	4a73      	ldr	r2, [pc, #460]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022aee:	f043 0301 	orr.w	r3, r3, #1
 8022af2:	6713      	str	r3, [r2, #112]	; 0x70
 8022af4:	e00b      	b.n	8022b0e <HAL_RCC_OscConfig+0x32a>
 8022af6:	4b71      	ldr	r3, [pc, #452]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022afa:	4a70      	ldr	r2, [pc, #448]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022afc:	f023 0301 	bic.w	r3, r3, #1
 8022b00:	6713      	str	r3, [r2, #112]	; 0x70
 8022b02:	4b6e      	ldr	r3, [pc, #440]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022b06:	4a6d      	ldr	r2, [pc, #436]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022b08:	f023 0304 	bic.w	r3, r3, #4
 8022b0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8022b0e:	687b      	ldr	r3, [r7, #4]
 8022b10:	689b      	ldr	r3, [r3, #8]
 8022b12:	2b00      	cmp	r3, #0
 8022b14:	d015      	beq.n	8022b42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022b16:	f7fe fff9 	bl	8021b0c <HAL_GetTick>
 8022b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8022b1c:	e00a      	b.n	8022b34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8022b1e:	f7fe fff5 	bl	8021b0c <HAL_GetTick>
 8022b22:	4602      	mov	r2, r0
 8022b24:	693b      	ldr	r3, [r7, #16]
 8022b26:	1ad3      	subs	r3, r2, r3
 8022b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8022b2c:	4293      	cmp	r3, r2
 8022b2e:	d901      	bls.n	8022b34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8022b30:	2303      	movs	r3, #3
 8022b32:	e0bc      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8022b34:	4b61      	ldr	r3, [pc, #388]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022b38:	f003 0302 	and.w	r3, r3, #2
 8022b3c:	2b00      	cmp	r3, #0
 8022b3e:	d0ee      	beq.n	8022b1e <HAL_RCC_OscConfig+0x33a>
 8022b40:	e014      	b.n	8022b6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8022b42:	f7fe ffe3 	bl	8021b0c <HAL_GetTick>
 8022b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8022b48:	e00a      	b.n	8022b60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8022b4a:	f7fe ffdf 	bl	8021b0c <HAL_GetTick>
 8022b4e:	4602      	mov	r2, r0
 8022b50:	693b      	ldr	r3, [r7, #16]
 8022b52:	1ad3      	subs	r3, r2, r3
 8022b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8022b58:	4293      	cmp	r3, r2
 8022b5a:	d901      	bls.n	8022b60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8022b5c:	2303      	movs	r3, #3
 8022b5e:	e0a6      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8022b60:	4b56      	ldr	r3, [pc, #344]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022b64:	f003 0302 	and.w	r3, r3, #2
 8022b68:	2b00      	cmp	r3, #0
 8022b6a:	d1ee      	bne.n	8022b4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8022b6c:	7dfb      	ldrb	r3, [r7, #23]
 8022b6e:	2b01      	cmp	r3, #1
 8022b70:	d105      	bne.n	8022b7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8022b72:	4b52      	ldr	r3, [pc, #328]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b76:	4a51      	ldr	r2, [pc, #324]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022b7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8022b7e:	687b      	ldr	r3, [r7, #4]
 8022b80:	699b      	ldr	r3, [r3, #24]
 8022b82:	2b00      	cmp	r3, #0
 8022b84:	f000 8092 	beq.w	8022cac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8022b88:	4b4c      	ldr	r3, [pc, #304]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022b8a:	689b      	ldr	r3, [r3, #8]
 8022b8c:	f003 030c 	and.w	r3, r3, #12
 8022b90:	2b08      	cmp	r3, #8
 8022b92:	d05c      	beq.n	8022c4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8022b94:	687b      	ldr	r3, [r7, #4]
 8022b96:	699b      	ldr	r3, [r3, #24]
 8022b98:	2b02      	cmp	r3, #2
 8022b9a:	d141      	bne.n	8022c20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8022b9c:	4b48      	ldr	r3, [pc, #288]	; (8022cc0 <HAL_RCC_OscConfig+0x4dc>)
 8022b9e:	2200      	movs	r2, #0
 8022ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022ba2:	f7fe ffb3 	bl	8021b0c <HAL_GetTick>
 8022ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022ba8:	e008      	b.n	8022bbc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8022baa:	f7fe ffaf 	bl	8021b0c <HAL_GetTick>
 8022bae:	4602      	mov	r2, r0
 8022bb0:	693b      	ldr	r3, [r7, #16]
 8022bb2:	1ad3      	subs	r3, r2, r3
 8022bb4:	2b02      	cmp	r3, #2
 8022bb6:	d901      	bls.n	8022bbc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8022bb8:	2303      	movs	r3, #3
 8022bba:	e078      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022bbc:	4b3f      	ldr	r3, [pc, #252]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022bbe:	681b      	ldr	r3, [r3, #0]
 8022bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022bc4:	2b00      	cmp	r3, #0
 8022bc6:	d1f0      	bne.n	8022baa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8022bc8:	687b      	ldr	r3, [r7, #4]
 8022bca:	69da      	ldr	r2, [r3, #28]
 8022bcc:	687b      	ldr	r3, [r7, #4]
 8022bce:	6a1b      	ldr	r3, [r3, #32]
 8022bd0:	431a      	orrs	r2, r3
 8022bd2:	687b      	ldr	r3, [r7, #4]
 8022bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022bd6:	019b      	lsls	r3, r3, #6
 8022bd8:	431a      	orrs	r2, r3
 8022bda:	687b      	ldr	r3, [r7, #4]
 8022bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022bde:	085b      	lsrs	r3, r3, #1
 8022be0:	3b01      	subs	r3, #1
 8022be2:	041b      	lsls	r3, r3, #16
 8022be4:	431a      	orrs	r2, r3
 8022be6:	687b      	ldr	r3, [r7, #4]
 8022be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022bea:	061b      	lsls	r3, r3, #24
 8022bec:	4933      	ldr	r1, [pc, #204]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022bee:	4313      	orrs	r3, r2
 8022bf0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8022bf2:	4b33      	ldr	r3, [pc, #204]	; (8022cc0 <HAL_RCC_OscConfig+0x4dc>)
 8022bf4:	2201      	movs	r2, #1
 8022bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022bf8:	f7fe ff88 	bl	8021b0c <HAL_GetTick>
 8022bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8022bfe:	e008      	b.n	8022c12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8022c00:	f7fe ff84 	bl	8021b0c <HAL_GetTick>
 8022c04:	4602      	mov	r2, r0
 8022c06:	693b      	ldr	r3, [r7, #16]
 8022c08:	1ad3      	subs	r3, r2, r3
 8022c0a:	2b02      	cmp	r3, #2
 8022c0c:	d901      	bls.n	8022c12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8022c0e:	2303      	movs	r3, #3
 8022c10:	e04d      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8022c12:	4b2a      	ldr	r3, [pc, #168]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022c14:	681b      	ldr	r3, [r3, #0]
 8022c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022c1a:	2b00      	cmp	r3, #0
 8022c1c:	d0f0      	beq.n	8022c00 <HAL_RCC_OscConfig+0x41c>
 8022c1e:	e045      	b.n	8022cac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8022c20:	4b27      	ldr	r3, [pc, #156]	; (8022cc0 <HAL_RCC_OscConfig+0x4dc>)
 8022c22:	2200      	movs	r2, #0
 8022c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022c26:	f7fe ff71 	bl	8021b0c <HAL_GetTick>
 8022c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022c2c:	e008      	b.n	8022c40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8022c2e:	f7fe ff6d 	bl	8021b0c <HAL_GetTick>
 8022c32:	4602      	mov	r2, r0
 8022c34:	693b      	ldr	r3, [r7, #16]
 8022c36:	1ad3      	subs	r3, r2, r3
 8022c38:	2b02      	cmp	r3, #2
 8022c3a:	d901      	bls.n	8022c40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8022c3c:	2303      	movs	r3, #3
 8022c3e:	e036      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022c40:	4b1e      	ldr	r3, [pc, #120]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022c42:	681b      	ldr	r3, [r3, #0]
 8022c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022c48:	2b00      	cmp	r3, #0
 8022c4a:	d1f0      	bne.n	8022c2e <HAL_RCC_OscConfig+0x44a>
 8022c4c:	e02e      	b.n	8022cac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8022c4e:	687b      	ldr	r3, [r7, #4]
 8022c50:	699b      	ldr	r3, [r3, #24]
 8022c52:	2b01      	cmp	r3, #1
 8022c54:	d101      	bne.n	8022c5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8022c56:	2301      	movs	r3, #1
 8022c58:	e029      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8022c5a:	4b18      	ldr	r3, [pc, #96]	; (8022cbc <HAL_RCC_OscConfig+0x4d8>)
 8022c5c:	685b      	ldr	r3, [r3, #4]
 8022c5e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8022c60:	68fb      	ldr	r3, [r7, #12]
 8022c62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8022c66:	687b      	ldr	r3, [r7, #4]
 8022c68:	69db      	ldr	r3, [r3, #28]
 8022c6a:	429a      	cmp	r2, r3
 8022c6c:	d11c      	bne.n	8022ca8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8022c6e:	68fb      	ldr	r3, [r7, #12]
 8022c70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8022c74:	687b      	ldr	r3, [r7, #4]
 8022c76:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8022c78:	429a      	cmp	r2, r3
 8022c7a:	d115      	bne.n	8022ca8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8022c7c:	68fa      	ldr	r2, [r7, #12]
 8022c7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8022c82:	4013      	ands	r3, r2
 8022c84:	687a      	ldr	r2, [r7, #4]
 8022c86:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8022c88:	4293      	cmp	r3, r2
 8022c8a:	d10d      	bne.n	8022ca8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8022c8c:	68fb      	ldr	r3, [r7, #12]
 8022c8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8022c92:	687b      	ldr	r3, [r7, #4]
 8022c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8022c96:	429a      	cmp	r2, r3
 8022c98:	d106      	bne.n	8022ca8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8022c9a:	68fb      	ldr	r3, [r7, #12]
 8022c9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8022ca0:	687b      	ldr	r3, [r7, #4]
 8022ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8022ca4:	429a      	cmp	r2, r3
 8022ca6:	d001      	beq.n	8022cac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8022ca8:	2301      	movs	r3, #1
 8022caa:	e000      	b.n	8022cae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8022cac:	2300      	movs	r3, #0
}
 8022cae:	4618      	mov	r0, r3
 8022cb0:	3718      	adds	r7, #24
 8022cb2:	46bd      	mov	sp, r7
 8022cb4:	bd80      	pop	{r7, pc}
 8022cb6:	bf00      	nop
 8022cb8:	40007000 	.word	0x40007000
 8022cbc:	40023800 	.word	0x40023800
 8022cc0:	42470060 	.word	0x42470060

08022cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8022cc4:	b580      	push	{r7, lr}
 8022cc6:	b084      	sub	sp, #16
 8022cc8:	af00      	add	r7, sp, #0
 8022cca:	6078      	str	r0, [r7, #4]
 8022ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8022cce:	687b      	ldr	r3, [r7, #4]
 8022cd0:	2b00      	cmp	r3, #0
 8022cd2:	d101      	bne.n	8022cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8022cd4:	2301      	movs	r3, #1
 8022cd6:	e0cc      	b.n	8022e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8022cd8:	4b68      	ldr	r3, [pc, #416]	; (8022e7c <HAL_RCC_ClockConfig+0x1b8>)
 8022cda:	681b      	ldr	r3, [r3, #0]
 8022cdc:	f003 030f 	and.w	r3, r3, #15
 8022ce0:	683a      	ldr	r2, [r7, #0]
 8022ce2:	429a      	cmp	r2, r3
 8022ce4:	d90c      	bls.n	8022d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022ce6:	4b65      	ldr	r3, [pc, #404]	; (8022e7c <HAL_RCC_ClockConfig+0x1b8>)
 8022ce8:	683a      	ldr	r2, [r7, #0]
 8022cea:	b2d2      	uxtb	r2, r2
 8022cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8022cee:	4b63      	ldr	r3, [pc, #396]	; (8022e7c <HAL_RCC_ClockConfig+0x1b8>)
 8022cf0:	681b      	ldr	r3, [r3, #0]
 8022cf2:	f003 030f 	and.w	r3, r3, #15
 8022cf6:	683a      	ldr	r2, [r7, #0]
 8022cf8:	429a      	cmp	r2, r3
 8022cfa:	d001      	beq.n	8022d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8022cfc:	2301      	movs	r3, #1
 8022cfe:	e0b8      	b.n	8022e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8022d00:	687b      	ldr	r3, [r7, #4]
 8022d02:	681b      	ldr	r3, [r3, #0]
 8022d04:	f003 0302 	and.w	r3, r3, #2
 8022d08:	2b00      	cmp	r3, #0
 8022d0a:	d020      	beq.n	8022d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022d0c:	687b      	ldr	r3, [r7, #4]
 8022d0e:	681b      	ldr	r3, [r3, #0]
 8022d10:	f003 0304 	and.w	r3, r3, #4
 8022d14:	2b00      	cmp	r3, #0
 8022d16:	d005      	beq.n	8022d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8022d18:	4b59      	ldr	r3, [pc, #356]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022d1a:	689b      	ldr	r3, [r3, #8]
 8022d1c:	4a58      	ldr	r2, [pc, #352]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8022d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022d24:	687b      	ldr	r3, [r7, #4]
 8022d26:	681b      	ldr	r3, [r3, #0]
 8022d28:	f003 0308 	and.w	r3, r3, #8
 8022d2c:	2b00      	cmp	r3, #0
 8022d2e:	d005      	beq.n	8022d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8022d30:	4b53      	ldr	r3, [pc, #332]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022d32:	689b      	ldr	r3, [r3, #8]
 8022d34:	4a52      	ldr	r2, [pc, #328]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8022d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8022d3c:	4b50      	ldr	r3, [pc, #320]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022d3e:	689b      	ldr	r3, [r3, #8]
 8022d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8022d44:	687b      	ldr	r3, [r7, #4]
 8022d46:	689b      	ldr	r3, [r3, #8]
 8022d48:	494d      	ldr	r1, [pc, #308]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022d4a:	4313      	orrs	r3, r2
 8022d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8022d4e:	687b      	ldr	r3, [r7, #4]
 8022d50:	681b      	ldr	r3, [r3, #0]
 8022d52:	f003 0301 	and.w	r3, r3, #1
 8022d56:	2b00      	cmp	r3, #0
 8022d58:	d044      	beq.n	8022de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8022d5a:	687b      	ldr	r3, [r7, #4]
 8022d5c:	685b      	ldr	r3, [r3, #4]
 8022d5e:	2b01      	cmp	r3, #1
 8022d60:	d107      	bne.n	8022d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8022d62:	4b47      	ldr	r3, [pc, #284]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022d64:	681b      	ldr	r3, [r3, #0]
 8022d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022d6a:	2b00      	cmp	r3, #0
 8022d6c:	d119      	bne.n	8022da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8022d6e:	2301      	movs	r3, #1
 8022d70:	e07f      	b.n	8022e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8022d72:	687b      	ldr	r3, [r7, #4]
 8022d74:	685b      	ldr	r3, [r3, #4]
 8022d76:	2b02      	cmp	r3, #2
 8022d78:	d003      	beq.n	8022d82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8022d7a:	687b      	ldr	r3, [r7, #4]
 8022d7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8022d7e:	2b03      	cmp	r3, #3
 8022d80:	d107      	bne.n	8022d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8022d82:	4b3f      	ldr	r3, [pc, #252]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022d84:	681b      	ldr	r3, [r3, #0]
 8022d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	d109      	bne.n	8022da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8022d8e:	2301      	movs	r3, #1
 8022d90:	e06f      	b.n	8022e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8022d92:	4b3b      	ldr	r3, [pc, #236]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022d94:	681b      	ldr	r3, [r3, #0]
 8022d96:	f003 0302 	and.w	r3, r3, #2
 8022d9a:	2b00      	cmp	r3, #0
 8022d9c:	d101      	bne.n	8022da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8022d9e:	2301      	movs	r3, #1
 8022da0:	e067      	b.n	8022e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8022da2:	4b37      	ldr	r3, [pc, #220]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022da4:	689b      	ldr	r3, [r3, #8]
 8022da6:	f023 0203 	bic.w	r2, r3, #3
 8022daa:	687b      	ldr	r3, [r7, #4]
 8022dac:	685b      	ldr	r3, [r3, #4]
 8022dae:	4934      	ldr	r1, [pc, #208]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022db0:	4313      	orrs	r3, r2
 8022db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8022db4:	f7fe feaa 	bl	8021b0c <HAL_GetTick>
 8022db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022dba:	e00a      	b.n	8022dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8022dbc:	f7fe fea6 	bl	8021b0c <HAL_GetTick>
 8022dc0:	4602      	mov	r2, r0
 8022dc2:	68fb      	ldr	r3, [r7, #12]
 8022dc4:	1ad3      	subs	r3, r2, r3
 8022dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8022dca:	4293      	cmp	r3, r2
 8022dcc:	d901      	bls.n	8022dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8022dce:	2303      	movs	r3, #3
 8022dd0:	e04f      	b.n	8022e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022dd2:	4b2b      	ldr	r3, [pc, #172]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022dd4:	689b      	ldr	r3, [r3, #8]
 8022dd6:	f003 020c 	and.w	r2, r3, #12
 8022dda:	687b      	ldr	r3, [r7, #4]
 8022ddc:	685b      	ldr	r3, [r3, #4]
 8022dde:	009b      	lsls	r3, r3, #2
 8022de0:	429a      	cmp	r2, r3
 8022de2:	d1eb      	bne.n	8022dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8022de4:	4b25      	ldr	r3, [pc, #148]	; (8022e7c <HAL_RCC_ClockConfig+0x1b8>)
 8022de6:	681b      	ldr	r3, [r3, #0]
 8022de8:	f003 030f 	and.w	r3, r3, #15
 8022dec:	683a      	ldr	r2, [r7, #0]
 8022dee:	429a      	cmp	r2, r3
 8022df0:	d20c      	bcs.n	8022e0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022df2:	4b22      	ldr	r3, [pc, #136]	; (8022e7c <HAL_RCC_ClockConfig+0x1b8>)
 8022df4:	683a      	ldr	r2, [r7, #0]
 8022df6:	b2d2      	uxtb	r2, r2
 8022df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8022dfa:	4b20      	ldr	r3, [pc, #128]	; (8022e7c <HAL_RCC_ClockConfig+0x1b8>)
 8022dfc:	681b      	ldr	r3, [r3, #0]
 8022dfe:	f003 030f 	and.w	r3, r3, #15
 8022e02:	683a      	ldr	r2, [r7, #0]
 8022e04:	429a      	cmp	r2, r3
 8022e06:	d001      	beq.n	8022e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8022e08:	2301      	movs	r3, #1
 8022e0a:	e032      	b.n	8022e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022e0c:	687b      	ldr	r3, [r7, #4]
 8022e0e:	681b      	ldr	r3, [r3, #0]
 8022e10:	f003 0304 	and.w	r3, r3, #4
 8022e14:	2b00      	cmp	r3, #0
 8022e16:	d008      	beq.n	8022e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8022e18:	4b19      	ldr	r3, [pc, #100]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022e1a:	689b      	ldr	r3, [r3, #8]
 8022e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8022e20:	687b      	ldr	r3, [r7, #4]
 8022e22:	68db      	ldr	r3, [r3, #12]
 8022e24:	4916      	ldr	r1, [pc, #88]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022e26:	4313      	orrs	r3, r2
 8022e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022e2a:	687b      	ldr	r3, [r7, #4]
 8022e2c:	681b      	ldr	r3, [r3, #0]
 8022e2e:	f003 0308 	and.w	r3, r3, #8
 8022e32:	2b00      	cmp	r3, #0
 8022e34:	d009      	beq.n	8022e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8022e36:	4b12      	ldr	r3, [pc, #72]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022e38:	689b      	ldr	r3, [r3, #8]
 8022e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8022e3e:	687b      	ldr	r3, [r7, #4]
 8022e40:	691b      	ldr	r3, [r3, #16]
 8022e42:	00db      	lsls	r3, r3, #3
 8022e44:	490e      	ldr	r1, [pc, #56]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022e46:	4313      	orrs	r3, r2
 8022e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8022e4a:	f000 f821 	bl	8022e90 <HAL_RCC_GetSysClockFreq>
 8022e4e:	4601      	mov	r1, r0
 8022e50:	4b0b      	ldr	r3, [pc, #44]	; (8022e80 <HAL_RCC_ClockConfig+0x1bc>)
 8022e52:	689b      	ldr	r3, [r3, #8]
 8022e54:	091b      	lsrs	r3, r3, #4
 8022e56:	f003 030f 	and.w	r3, r3, #15
 8022e5a:	4a0a      	ldr	r2, [pc, #40]	; (8022e84 <HAL_RCC_ClockConfig+0x1c0>)
 8022e5c:	5cd3      	ldrb	r3, [r2, r3]
 8022e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8022e62:	4a09      	ldr	r2, [pc, #36]	; (8022e88 <HAL_RCC_ClockConfig+0x1c4>)
 8022e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8022e66:	4b09      	ldr	r3, [pc, #36]	; (8022e8c <HAL_RCC_ClockConfig+0x1c8>)
 8022e68:	681b      	ldr	r3, [r3, #0]
 8022e6a:	4618      	mov	r0, r3
 8022e6c:	f7fe fe0a 	bl	8021a84 <HAL_InitTick>

  return HAL_OK;
 8022e70:	2300      	movs	r3, #0
}
 8022e72:	4618      	mov	r0, r3
 8022e74:	3710      	adds	r7, #16
 8022e76:	46bd      	mov	sp, r7
 8022e78:	bd80      	pop	{r7, pc}
 8022e7a:	bf00      	nop
 8022e7c:	40023c00 	.word	0x40023c00
 8022e80:	40023800 	.word	0x40023800
 8022e84:	08024044 	.word	0x08024044
 8022e88:	20000000 	.word	0x20000000
 8022e8c:	20000004 	.word	0x20000004

08022e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8022e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022e92:	b085      	sub	sp, #20
 8022e94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8022e96:	2300      	movs	r3, #0
 8022e98:	607b      	str	r3, [r7, #4]
 8022e9a:	2300      	movs	r3, #0
 8022e9c:	60fb      	str	r3, [r7, #12]
 8022e9e:	2300      	movs	r3, #0
 8022ea0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8022ea2:	2300      	movs	r3, #0
 8022ea4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8022ea6:	4b50      	ldr	r3, [pc, #320]	; (8022fe8 <HAL_RCC_GetSysClockFreq+0x158>)
 8022ea8:	689b      	ldr	r3, [r3, #8]
 8022eaa:	f003 030c 	and.w	r3, r3, #12
 8022eae:	2b04      	cmp	r3, #4
 8022eb0:	d007      	beq.n	8022ec2 <HAL_RCC_GetSysClockFreq+0x32>
 8022eb2:	2b08      	cmp	r3, #8
 8022eb4:	d008      	beq.n	8022ec8 <HAL_RCC_GetSysClockFreq+0x38>
 8022eb6:	2b00      	cmp	r3, #0
 8022eb8:	f040 808d 	bne.w	8022fd6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8022ebc:	4b4b      	ldr	r3, [pc, #300]	; (8022fec <HAL_RCC_GetSysClockFreq+0x15c>)
 8022ebe:	60bb      	str	r3, [r7, #8]
       break;
 8022ec0:	e08c      	b.n	8022fdc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8022ec2:	4b4b      	ldr	r3, [pc, #300]	; (8022ff0 <HAL_RCC_GetSysClockFreq+0x160>)
 8022ec4:	60bb      	str	r3, [r7, #8]
      break;
 8022ec6:	e089      	b.n	8022fdc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8022ec8:	4b47      	ldr	r3, [pc, #284]	; (8022fe8 <HAL_RCC_GetSysClockFreq+0x158>)
 8022eca:	685b      	ldr	r3, [r3, #4]
 8022ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8022ed0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8022ed2:	4b45      	ldr	r3, [pc, #276]	; (8022fe8 <HAL_RCC_GetSysClockFreq+0x158>)
 8022ed4:	685b      	ldr	r3, [r3, #4]
 8022ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022eda:	2b00      	cmp	r3, #0
 8022edc:	d023      	beq.n	8022f26 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8022ede:	4b42      	ldr	r3, [pc, #264]	; (8022fe8 <HAL_RCC_GetSysClockFreq+0x158>)
 8022ee0:	685b      	ldr	r3, [r3, #4]
 8022ee2:	099b      	lsrs	r3, r3, #6
 8022ee4:	f04f 0400 	mov.w	r4, #0
 8022ee8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8022eec:	f04f 0200 	mov.w	r2, #0
 8022ef0:	ea03 0501 	and.w	r5, r3, r1
 8022ef4:	ea04 0602 	and.w	r6, r4, r2
 8022ef8:	4a3d      	ldr	r2, [pc, #244]	; (8022ff0 <HAL_RCC_GetSysClockFreq+0x160>)
 8022efa:	fb02 f106 	mul.w	r1, r2, r6
 8022efe:	2200      	movs	r2, #0
 8022f00:	fb02 f205 	mul.w	r2, r2, r5
 8022f04:	440a      	add	r2, r1
 8022f06:	493a      	ldr	r1, [pc, #232]	; (8022ff0 <HAL_RCC_GetSysClockFreq+0x160>)
 8022f08:	fba5 0101 	umull	r0, r1, r5, r1
 8022f0c:	1853      	adds	r3, r2, r1
 8022f0e:	4619      	mov	r1, r3
 8022f10:	687b      	ldr	r3, [r7, #4]
 8022f12:	f04f 0400 	mov.w	r4, #0
 8022f16:	461a      	mov	r2, r3
 8022f18:	4623      	mov	r3, r4
 8022f1a:	f7fd f891 	bl	8020040 <__aeabi_uldivmod>
 8022f1e:	4603      	mov	r3, r0
 8022f20:	460c      	mov	r4, r1
 8022f22:	60fb      	str	r3, [r7, #12]
 8022f24:	e049      	b.n	8022fba <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8022f26:	4b30      	ldr	r3, [pc, #192]	; (8022fe8 <HAL_RCC_GetSysClockFreq+0x158>)
 8022f28:	685b      	ldr	r3, [r3, #4]
 8022f2a:	099b      	lsrs	r3, r3, #6
 8022f2c:	f04f 0400 	mov.w	r4, #0
 8022f30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8022f34:	f04f 0200 	mov.w	r2, #0
 8022f38:	ea03 0501 	and.w	r5, r3, r1
 8022f3c:	ea04 0602 	and.w	r6, r4, r2
 8022f40:	4629      	mov	r1, r5
 8022f42:	4632      	mov	r2, r6
 8022f44:	f04f 0300 	mov.w	r3, #0
 8022f48:	f04f 0400 	mov.w	r4, #0
 8022f4c:	0154      	lsls	r4, r2, #5
 8022f4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8022f52:	014b      	lsls	r3, r1, #5
 8022f54:	4619      	mov	r1, r3
 8022f56:	4622      	mov	r2, r4
 8022f58:	1b49      	subs	r1, r1, r5
 8022f5a:	eb62 0206 	sbc.w	r2, r2, r6
 8022f5e:	f04f 0300 	mov.w	r3, #0
 8022f62:	f04f 0400 	mov.w	r4, #0
 8022f66:	0194      	lsls	r4, r2, #6
 8022f68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8022f6c:	018b      	lsls	r3, r1, #6
 8022f6e:	1a5b      	subs	r3, r3, r1
 8022f70:	eb64 0402 	sbc.w	r4, r4, r2
 8022f74:	f04f 0100 	mov.w	r1, #0
 8022f78:	f04f 0200 	mov.w	r2, #0
 8022f7c:	00e2      	lsls	r2, r4, #3
 8022f7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8022f82:	00d9      	lsls	r1, r3, #3
 8022f84:	460b      	mov	r3, r1
 8022f86:	4614      	mov	r4, r2
 8022f88:	195b      	adds	r3, r3, r5
 8022f8a:	eb44 0406 	adc.w	r4, r4, r6
 8022f8e:	f04f 0100 	mov.w	r1, #0
 8022f92:	f04f 0200 	mov.w	r2, #0
 8022f96:	02a2      	lsls	r2, r4, #10
 8022f98:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8022f9c:	0299      	lsls	r1, r3, #10
 8022f9e:	460b      	mov	r3, r1
 8022fa0:	4614      	mov	r4, r2
 8022fa2:	4618      	mov	r0, r3
 8022fa4:	4621      	mov	r1, r4
 8022fa6:	687b      	ldr	r3, [r7, #4]
 8022fa8:	f04f 0400 	mov.w	r4, #0
 8022fac:	461a      	mov	r2, r3
 8022fae:	4623      	mov	r3, r4
 8022fb0:	f7fd f846 	bl	8020040 <__aeabi_uldivmod>
 8022fb4:	4603      	mov	r3, r0
 8022fb6:	460c      	mov	r4, r1
 8022fb8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8022fba:	4b0b      	ldr	r3, [pc, #44]	; (8022fe8 <HAL_RCC_GetSysClockFreq+0x158>)
 8022fbc:	685b      	ldr	r3, [r3, #4]
 8022fbe:	0c1b      	lsrs	r3, r3, #16
 8022fc0:	f003 0303 	and.w	r3, r3, #3
 8022fc4:	3301      	adds	r3, #1
 8022fc6:	005b      	lsls	r3, r3, #1
 8022fc8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8022fca:	68fa      	ldr	r2, [r7, #12]
 8022fcc:	683b      	ldr	r3, [r7, #0]
 8022fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8022fd2:	60bb      	str	r3, [r7, #8]
      break;
 8022fd4:	e002      	b.n	8022fdc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8022fd6:	4b05      	ldr	r3, [pc, #20]	; (8022fec <HAL_RCC_GetSysClockFreq+0x15c>)
 8022fd8:	60bb      	str	r3, [r7, #8]
      break;
 8022fda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8022fdc:	68bb      	ldr	r3, [r7, #8]
}
 8022fde:	4618      	mov	r0, r3
 8022fe0:	3714      	adds	r7, #20
 8022fe2:	46bd      	mov	sp, r7
 8022fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022fe6:	bf00      	nop
 8022fe8:	40023800 	.word	0x40023800
 8022fec:	00f42400 	.word	0x00f42400
 8022ff0:	00b71b00 	.word	0x00b71b00

08022ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8022ff4:	b480      	push	{r7}
 8022ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8022ff8:	4b03      	ldr	r3, [pc, #12]	; (8023008 <HAL_RCC_GetHCLKFreq+0x14>)
 8022ffa:	681b      	ldr	r3, [r3, #0]
}
 8022ffc:	4618      	mov	r0, r3
 8022ffe:	46bd      	mov	sp, r7
 8023000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023004:	4770      	bx	lr
 8023006:	bf00      	nop
 8023008:	20000000 	.word	0x20000000

0802300c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802300c:	b580      	push	{r7, lr}
 802300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8023010:	f7ff fff0 	bl	8022ff4 <HAL_RCC_GetHCLKFreq>
 8023014:	4601      	mov	r1, r0
 8023016:	4b05      	ldr	r3, [pc, #20]	; (802302c <HAL_RCC_GetPCLK1Freq+0x20>)
 8023018:	689b      	ldr	r3, [r3, #8]
 802301a:	0a9b      	lsrs	r3, r3, #10
 802301c:	f003 0307 	and.w	r3, r3, #7
 8023020:	4a03      	ldr	r2, [pc, #12]	; (8023030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8023022:	5cd3      	ldrb	r3, [r2, r3]
 8023024:	fa21 f303 	lsr.w	r3, r1, r3
}
 8023028:	4618      	mov	r0, r3
 802302a:	bd80      	pop	{r7, pc}
 802302c:	40023800 	.word	0x40023800
 8023030:	08024054 	.word	0x08024054

08023034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8023034:	b580      	push	{r7, lr}
 8023036:	b082      	sub	sp, #8
 8023038:	af00      	add	r7, sp, #0
 802303a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802303c:	687b      	ldr	r3, [r7, #4]
 802303e:	2b00      	cmp	r3, #0
 8023040:	d101      	bne.n	8023046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8023042:	2301      	movs	r3, #1
 8023044:	e056      	b.n	80230f4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8023046:	687b      	ldr	r3, [r7, #4]
 8023048:	2200      	movs	r2, #0
 802304a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802304c:	687b      	ldr	r3, [r7, #4]
 802304e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8023052:	b2db      	uxtb	r3, r3
 8023054:	2b00      	cmp	r3, #0
 8023056:	d106      	bne.n	8023066 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8023058:	687b      	ldr	r3, [r7, #4]
 802305a:	2200      	movs	r2, #0
 802305c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8023060:	6878      	ldr	r0, [r7, #4]
 8023062:	f7fe f98b 	bl	802137c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8023066:	687b      	ldr	r3, [r7, #4]
 8023068:	2202      	movs	r2, #2
 802306a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802306e:	687b      	ldr	r3, [r7, #4]
 8023070:	681b      	ldr	r3, [r3, #0]
 8023072:	681a      	ldr	r2, [r3, #0]
 8023074:	687b      	ldr	r3, [r7, #4]
 8023076:	681b      	ldr	r3, [r3, #0]
 8023078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802307c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 802307e:	687b      	ldr	r3, [r7, #4]
 8023080:	685a      	ldr	r2, [r3, #4]
 8023082:	687b      	ldr	r3, [r7, #4]
 8023084:	689b      	ldr	r3, [r3, #8]
 8023086:	431a      	orrs	r2, r3
 8023088:	687b      	ldr	r3, [r7, #4]
 802308a:	68db      	ldr	r3, [r3, #12]
 802308c:	431a      	orrs	r2, r3
 802308e:	687b      	ldr	r3, [r7, #4]
 8023090:	691b      	ldr	r3, [r3, #16]
 8023092:	431a      	orrs	r2, r3
 8023094:	687b      	ldr	r3, [r7, #4]
 8023096:	695b      	ldr	r3, [r3, #20]
 8023098:	431a      	orrs	r2, r3
 802309a:	687b      	ldr	r3, [r7, #4]
 802309c:	699b      	ldr	r3, [r3, #24]
 802309e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80230a2:	431a      	orrs	r2, r3
 80230a4:	687b      	ldr	r3, [r7, #4]
 80230a6:	69db      	ldr	r3, [r3, #28]
 80230a8:	431a      	orrs	r2, r3
 80230aa:	687b      	ldr	r3, [r7, #4]
 80230ac:	6a1b      	ldr	r3, [r3, #32]
 80230ae:	ea42 0103 	orr.w	r1, r2, r3
 80230b2:	687b      	ldr	r3, [r7, #4]
 80230b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80230b6:	687b      	ldr	r3, [r7, #4]
 80230b8:	681b      	ldr	r3, [r3, #0]
 80230ba:	430a      	orrs	r2, r1
 80230bc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80230be:	687b      	ldr	r3, [r7, #4]
 80230c0:	699b      	ldr	r3, [r3, #24]
 80230c2:	0c1b      	lsrs	r3, r3, #16
 80230c4:	f003 0104 	and.w	r1, r3, #4
 80230c8:	687b      	ldr	r3, [r7, #4]
 80230ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80230cc:	687b      	ldr	r3, [r7, #4]
 80230ce:	681b      	ldr	r3, [r3, #0]
 80230d0:	430a      	orrs	r2, r1
 80230d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80230d4:	687b      	ldr	r3, [r7, #4]
 80230d6:	681b      	ldr	r3, [r3, #0]
 80230d8:	69da      	ldr	r2, [r3, #28]
 80230da:	687b      	ldr	r3, [r7, #4]
 80230dc:	681b      	ldr	r3, [r3, #0]
 80230de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80230e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80230e4:	687b      	ldr	r3, [r7, #4]
 80230e6:	2200      	movs	r2, #0
 80230e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80230ea:	687b      	ldr	r3, [r7, #4]
 80230ec:	2201      	movs	r2, #1
 80230ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80230f2:	2300      	movs	r3, #0
}
 80230f4:	4618      	mov	r0, r3
 80230f6:	3708      	adds	r7, #8
 80230f8:	46bd      	mov	sp, r7
 80230fa:	bd80      	pop	{r7, pc}

080230fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80230fc:	b580      	push	{r7, lr}
 80230fe:	b082      	sub	sp, #8
 8023100:	af00      	add	r7, sp, #0
 8023102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8023104:	687b      	ldr	r3, [r7, #4]
 8023106:	2b00      	cmp	r3, #0
 8023108:	d101      	bne.n	802310e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802310a:	2301      	movs	r3, #1
 802310c:	e01d      	b.n	802314a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802310e:	687b      	ldr	r3, [r7, #4]
 8023110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023114:	b2db      	uxtb	r3, r3
 8023116:	2b00      	cmp	r3, #0
 8023118:	d106      	bne.n	8023128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802311a:	687b      	ldr	r3, [r7, #4]
 802311c:	2200      	movs	r2, #0
 802311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8023122:	6878      	ldr	r0, [r7, #4]
 8023124:	f7fe f9c0 	bl	80214a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8023128:	687b      	ldr	r3, [r7, #4]
 802312a:	2202      	movs	r2, #2
 802312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8023130:	687b      	ldr	r3, [r7, #4]
 8023132:	681a      	ldr	r2, [r3, #0]
 8023134:	687b      	ldr	r3, [r7, #4]
 8023136:	3304      	adds	r3, #4
 8023138:	4619      	mov	r1, r3
 802313a:	4610      	mov	r0, r2
 802313c:	f000 fb7e 	bl	802383c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8023140:	687b      	ldr	r3, [r7, #4]
 8023142:	2201      	movs	r2, #1
 8023144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8023148:	2300      	movs	r3, #0
}
 802314a:	4618      	mov	r0, r3
 802314c:	3708      	adds	r7, #8
 802314e:	46bd      	mov	sp, r7
 8023150:	bd80      	pop	{r7, pc}

08023152 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8023152:	b580      	push	{r7, lr}
 8023154:	b082      	sub	sp, #8
 8023156:	af00      	add	r7, sp, #0
 8023158:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802315a:	687b      	ldr	r3, [r7, #4]
 802315c:	2b00      	cmp	r3, #0
 802315e:	d101      	bne.n	8023164 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8023160:	2301      	movs	r3, #1
 8023162:	e01d      	b.n	80231a0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8023164:	687b      	ldr	r3, [r7, #4]
 8023166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802316a:	b2db      	uxtb	r3, r3
 802316c:	2b00      	cmp	r3, #0
 802316e:	d106      	bne.n	802317e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8023170:	687b      	ldr	r3, [r7, #4]
 8023172:	2200      	movs	r2, #0
 8023174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8023178:	6878      	ldr	r0, [r7, #4]
 802317a:	f7fe f947 	bl	802140c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802317e:	687b      	ldr	r3, [r7, #4]
 8023180:	2202      	movs	r2, #2
 8023182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8023186:	687b      	ldr	r3, [r7, #4]
 8023188:	681a      	ldr	r2, [r3, #0]
 802318a:	687b      	ldr	r3, [r7, #4]
 802318c:	3304      	adds	r3, #4
 802318e:	4619      	mov	r1, r3
 8023190:	4610      	mov	r0, r2
 8023192:	f000 fb53 	bl	802383c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8023196:	687b      	ldr	r3, [r7, #4]
 8023198:	2201      	movs	r2, #1
 802319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802319e:	2300      	movs	r3, #0
}
 80231a0:	4618      	mov	r0, r3
 80231a2:	3708      	adds	r7, #8
 80231a4:	46bd      	mov	sp, r7
 80231a6:	bd80      	pop	{r7, pc}

080231a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80231a8:	b580      	push	{r7, lr}
 80231aa:	b086      	sub	sp, #24
 80231ac:	af00      	add	r7, sp, #0
 80231ae:	6078      	str	r0, [r7, #4]
 80231b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80231b2:	687b      	ldr	r3, [r7, #4]
 80231b4:	2b00      	cmp	r3, #0
 80231b6:	d101      	bne.n	80231bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80231b8:	2301      	movs	r3, #1
 80231ba:	e083      	b.n	80232c4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80231bc:	687b      	ldr	r3, [r7, #4]
 80231be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80231c2:	b2db      	uxtb	r3, r3
 80231c4:	2b00      	cmp	r3, #0
 80231c6:	d106      	bne.n	80231d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80231c8:	687b      	ldr	r3, [r7, #4]
 80231ca:	2200      	movs	r2, #0
 80231cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80231d0:	6878      	ldr	r0, [r7, #4]
 80231d2:	f7fe f9ff 	bl	80215d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80231d6:	687b      	ldr	r3, [r7, #4]
 80231d8:	2202      	movs	r2, #2
 80231da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80231de:	687b      	ldr	r3, [r7, #4]
 80231e0:	681b      	ldr	r3, [r3, #0]
 80231e2:	689b      	ldr	r3, [r3, #8]
 80231e4:	687a      	ldr	r2, [r7, #4]
 80231e6:	6812      	ldr	r2, [r2, #0]
 80231e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80231ec:	f023 0307 	bic.w	r3, r3, #7
 80231f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80231f2:	687b      	ldr	r3, [r7, #4]
 80231f4:	681a      	ldr	r2, [r3, #0]
 80231f6:	687b      	ldr	r3, [r7, #4]
 80231f8:	3304      	adds	r3, #4
 80231fa:	4619      	mov	r1, r3
 80231fc:	4610      	mov	r0, r2
 80231fe:	f000 fb1d 	bl	802383c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8023202:	687b      	ldr	r3, [r7, #4]
 8023204:	681b      	ldr	r3, [r3, #0]
 8023206:	689b      	ldr	r3, [r3, #8]
 8023208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 802320a:	687b      	ldr	r3, [r7, #4]
 802320c:	681b      	ldr	r3, [r3, #0]
 802320e:	699b      	ldr	r3, [r3, #24]
 8023210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8023212:	687b      	ldr	r3, [r7, #4]
 8023214:	681b      	ldr	r3, [r3, #0]
 8023216:	6a1b      	ldr	r3, [r3, #32]
 8023218:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 802321a:	683b      	ldr	r3, [r7, #0]
 802321c:	681b      	ldr	r3, [r3, #0]
 802321e:	697a      	ldr	r2, [r7, #20]
 8023220:	4313      	orrs	r3, r2
 8023222:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8023224:	693b      	ldr	r3, [r7, #16]
 8023226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802322a:	f023 0303 	bic.w	r3, r3, #3
 802322e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8023230:	683b      	ldr	r3, [r7, #0]
 8023232:	689a      	ldr	r2, [r3, #8]
 8023234:	683b      	ldr	r3, [r7, #0]
 8023236:	699b      	ldr	r3, [r3, #24]
 8023238:	021b      	lsls	r3, r3, #8
 802323a:	4313      	orrs	r3, r2
 802323c:	693a      	ldr	r2, [r7, #16]
 802323e:	4313      	orrs	r3, r2
 8023240:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8023242:	693b      	ldr	r3, [r7, #16]
 8023244:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8023248:	f023 030c 	bic.w	r3, r3, #12
 802324c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 802324e:	693b      	ldr	r3, [r7, #16]
 8023250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8023254:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8023258:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 802325a:	683b      	ldr	r3, [r7, #0]
 802325c:	68da      	ldr	r2, [r3, #12]
 802325e:	683b      	ldr	r3, [r7, #0]
 8023260:	69db      	ldr	r3, [r3, #28]
 8023262:	021b      	lsls	r3, r3, #8
 8023264:	4313      	orrs	r3, r2
 8023266:	693a      	ldr	r2, [r7, #16]
 8023268:	4313      	orrs	r3, r2
 802326a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 802326c:	683b      	ldr	r3, [r7, #0]
 802326e:	691b      	ldr	r3, [r3, #16]
 8023270:	011a      	lsls	r2, r3, #4
 8023272:	683b      	ldr	r3, [r7, #0]
 8023274:	6a1b      	ldr	r3, [r3, #32]
 8023276:	031b      	lsls	r3, r3, #12
 8023278:	4313      	orrs	r3, r2
 802327a:	693a      	ldr	r2, [r7, #16]
 802327c:	4313      	orrs	r3, r2
 802327e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8023280:	68fb      	ldr	r3, [r7, #12]
 8023282:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8023286:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8023288:	68fb      	ldr	r3, [r7, #12]
 802328a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 802328e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8023290:	683b      	ldr	r3, [r7, #0]
 8023292:	685a      	ldr	r2, [r3, #4]
 8023294:	683b      	ldr	r3, [r7, #0]
 8023296:	695b      	ldr	r3, [r3, #20]
 8023298:	011b      	lsls	r3, r3, #4
 802329a:	4313      	orrs	r3, r2
 802329c:	68fa      	ldr	r2, [r7, #12]
 802329e:	4313      	orrs	r3, r2
 80232a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80232a2:	687b      	ldr	r3, [r7, #4]
 80232a4:	681b      	ldr	r3, [r3, #0]
 80232a6:	697a      	ldr	r2, [r7, #20]
 80232a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80232aa:	687b      	ldr	r3, [r7, #4]
 80232ac:	681b      	ldr	r3, [r3, #0]
 80232ae:	693a      	ldr	r2, [r7, #16]
 80232b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80232b2:	687b      	ldr	r3, [r7, #4]
 80232b4:	681b      	ldr	r3, [r3, #0]
 80232b6:	68fa      	ldr	r2, [r7, #12]
 80232b8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80232ba:	687b      	ldr	r3, [r7, #4]
 80232bc:	2201      	movs	r2, #1
 80232be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80232c2:	2300      	movs	r3, #0
}
 80232c4:	4618      	mov	r0, r3
 80232c6:	3718      	adds	r7, #24
 80232c8:	46bd      	mov	sp, r7
 80232ca:	bd80      	pop	{r7, pc}

080232cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80232cc:	b580      	push	{r7, lr}
 80232ce:	b082      	sub	sp, #8
 80232d0:	af00      	add	r7, sp, #0
 80232d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80232d4:	687b      	ldr	r3, [r7, #4]
 80232d6:	681b      	ldr	r3, [r3, #0]
 80232d8:	691b      	ldr	r3, [r3, #16]
 80232da:	f003 0302 	and.w	r3, r3, #2
 80232de:	2b02      	cmp	r3, #2
 80232e0:	d122      	bne.n	8023328 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80232e2:	687b      	ldr	r3, [r7, #4]
 80232e4:	681b      	ldr	r3, [r3, #0]
 80232e6:	68db      	ldr	r3, [r3, #12]
 80232e8:	f003 0302 	and.w	r3, r3, #2
 80232ec:	2b02      	cmp	r3, #2
 80232ee:	d11b      	bne.n	8023328 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80232f0:	687b      	ldr	r3, [r7, #4]
 80232f2:	681b      	ldr	r3, [r3, #0]
 80232f4:	f06f 0202 	mvn.w	r2, #2
 80232f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80232fa:	687b      	ldr	r3, [r7, #4]
 80232fc:	2201      	movs	r2, #1
 80232fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8023300:	687b      	ldr	r3, [r7, #4]
 8023302:	681b      	ldr	r3, [r3, #0]
 8023304:	699b      	ldr	r3, [r3, #24]
 8023306:	f003 0303 	and.w	r3, r3, #3
 802330a:	2b00      	cmp	r3, #0
 802330c:	d003      	beq.n	8023316 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802330e:	6878      	ldr	r0, [r7, #4]
 8023310:	f000 fa75 	bl	80237fe <HAL_TIM_IC_CaptureCallback>
 8023314:	e005      	b.n	8023322 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8023316:	6878      	ldr	r0, [r7, #4]
 8023318:	f000 fa67 	bl	80237ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802331c:	6878      	ldr	r0, [r7, #4]
 802331e:	f000 fa78 	bl	8023812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8023322:	687b      	ldr	r3, [r7, #4]
 8023324:	2200      	movs	r2, #0
 8023326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8023328:	687b      	ldr	r3, [r7, #4]
 802332a:	681b      	ldr	r3, [r3, #0]
 802332c:	691b      	ldr	r3, [r3, #16]
 802332e:	f003 0304 	and.w	r3, r3, #4
 8023332:	2b04      	cmp	r3, #4
 8023334:	d122      	bne.n	802337c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8023336:	687b      	ldr	r3, [r7, #4]
 8023338:	681b      	ldr	r3, [r3, #0]
 802333a:	68db      	ldr	r3, [r3, #12]
 802333c:	f003 0304 	and.w	r3, r3, #4
 8023340:	2b04      	cmp	r3, #4
 8023342:	d11b      	bne.n	802337c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8023344:	687b      	ldr	r3, [r7, #4]
 8023346:	681b      	ldr	r3, [r3, #0]
 8023348:	f06f 0204 	mvn.w	r2, #4
 802334c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802334e:	687b      	ldr	r3, [r7, #4]
 8023350:	2202      	movs	r2, #2
 8023352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8023354:	687b      	ldr	r3, [r7, #4]
 8023356:	681b      	ldr	r3, [r3, #0]
 8023358:	699b      	ldr	r3, [r3, #24]
 802335a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802335e:	2b00      	cmp	r3, #0
 8023360:	d003      	beq.n	802336a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8023362:	6878      	ldr	r0, [r7, #4]
 8023364:	f000 fa4b 	bl	80237fe <HAL_TIM_IC_CaptureCallback>
 8023368:	e005      	b.n	8023376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802336a:	6878      	ldr	r0, [r7, #4]
 802336c:	f000 fa3d 	bl	80237ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8023370:	6878      	ldr	r0, [r7, #4]
 8023372:	f000 fa4e 	bl	8023812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8023376:	687b      	ldr	r3, [r7, #4]
 8023378:	2200      	movs	r2, #0
 802337a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802337c:	687b      	ldr	r3, [r7, #4]
 802337e:	681b      	ldr	r3, [r3, #0]
 8023380:	691b      	ldr	r3, [r3, #16]
 8023382:	f003 0308 	and.w	r3, r3, #8
 8023386:	2b08      	cmp	r3, #8
 8023388:	d122      	bne.n	80233d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802338a:	687b      	ldr	r3, [r7, #4]
 802338c:	681b      	ldr	r3, [r3, #0]
 802338e:	68db      	ldr	r3, [r3, #12]
 8023390:	f003 0308 	and.w	r3, r3, #8
 8023394:	2b08      	cmp	r3, #8
 8023396:	d11b      	bne.n	80233d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8023398:	687b      	ldr	r3, [r7, #4]
 802339a:	681b      	ldr	r3, [r3, #0]
 802339c:	f06f 0208 	mvn.w	r2, #8
 80233a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80233a2:	687b      	ldr	r3, [r7, #4]
 80233a4:	2204      	movs	r2, #4
 80233a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80233a8:	687b      	ldr	r3, [r7, #4]
 80233aa:	681b      	ldr	r3, [r3, #0]
 80233ac:	69db      	ldr	r3, [r3, #28]
 80233ae:	f003 0303 	and.w	r3, r3, #3
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	d003      	beq.n	80233be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80233b6:	6878      	ldr	r0, [r7, #4]
 80233b8:	f000 fa21 	bl	80237fe <HAL_TIM_IC_CaptureCallback>
 80233bc:	e005      	b.n	80233ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80233be:	6878      	ldr	r0, [r7, #4]
 80233c0:	f000 fa13 	bl	80237ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80233c4:	6878      	ldr	r0, [r7, #4]
 80233c6:	f000 fa24 	bl	8023812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80233ca:	687b      	ldr	r3, [r7, #4]
 80233cc:	2200      	movs	r2, #0
 80233ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80233d0:	687b      	ldr	r3, [r7, #4]
 80233d2:	681b      	ldr	r3, [r3, #0]
 80233d4:	691b      	ldr	r3, [r3, #16]
 80233d6:	f003 0310 	and.w	r3, r3, #16
 80233da:	2b10      	cmp	r3, #16
 80233dc:	d122      	bne.n	8023424 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80233de:	687b      	ldr	r3, [r7, #4]
 80233e0:	681b      	ldr	r3, [r3, #0]
 80233e2:	68db      	ldr	r3, [r3, #12]
 80233e4:	f003 0310 	and.w	r3, r3, #16
 80233e8:	2b10      	cmp	r3, #16
 80233ea:	d11b      	bne.n	8023424 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80233ec:	687b      	ldr	r3, [r7, #4]
 80233ee:	681b      	ldr	r3, [r3, #0]
 80233f0:	f06f 0210 	mvn.w	r2, #16
 80233f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80233f6:	687b      	ldr	r3, [r7, #4]
 80233f8:	2208      	movs	r2, #8
 80233fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80233fc:	687b      	ldr	r3, [r7, #4]
 80233fe:	681b      	ldr	r3, [r3, #0]
 8023400:	69db      	ldr	r3, [r3, #28]
 8023402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8023406:	2b00      	cmp	r3, #0
 8023408:	d003      	beq.n	8023412 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802340a:	6878      	ldr	r0, [r7, #4]
 802340c:	f000 f9f7 	bl	80237fe <HAL_TIM_IC_CaptureCallback>
 8023410:	e005      	b.n	802341e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8023412:	6878      	ldr	r0, [r7, #4]
 8023414:	f000 f9e9 	bl	80237ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8023418:	6878      	ldr	r0, [r7, #4]
 802341a:	f000 f9fa 	bl	8023812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802341e:	687b      	ldr	r3, [r7, #4]
 8023420:	2200      	movs	r2, #0
 8023422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8023424:	687b      	ldr	r3, [r7, #4]
 8023426:	681b      	ldr	r3, [r3, #0]
 8023428:	691b      	ldr	r3, [r3, #16]
 802342a:	f003 0301 	and.w	r3, r3, #1
 802342e:	2b01      	cmp	r3, #1
 8023430:	d10e      	bne.n	8023450 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8023432:	687b      	ldr	r3, [r7, #4]
 8023434:	681b      	ldr	r3, [r3, #0]
 8023436:	68db      	ldr	r3, [r3, #12]
 8023438:	f003 0301 	and.w	r3, r3, #1
 802343c:	2b01      	cmp	r3, #1
 802343e:	d107      	bne.n	8023450 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8023440:	687b      	ldr	r3, [r7, #4]
 8023442:	681b      	ldr	r3, [r3, #0]
 8023444:	f06f 0201 	mvn.w	r2, #1
 8023448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802344a:	6878      	ldr	r0, [r7, #4]
 802344c:	f000 f9c3 	bl	80237d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8023450:	687b      	ldr	r3, [r7, #4]
 8023452:	681b      	ldr	r3, [r3, #0]
 8023454:	691b      	ldr	r3, [r3, #16]
 8023456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802345a:	2b80      	cmp	r3, #128	; 0x80
 802345c:	d10e      	bne.n	802347c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802345e:	687b      	ldr	r3, [r7, #4]
 8023460:	681b      	ldr	r3, [r3, #0]
 8023462:	68db      	ldr	r3, [r3, #12]
 8023464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023468:	2b80      	cmp	r3, #128	; 0x80
 802346a:	d107      	bne.n	802347c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802346c:	687b      	ldr	r3, [r7, #4]
 802346e:	681b      	ldr	r3, [r3, #0]
 8023470:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8023474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8023476:	6878      	ldr	r0, [r7, #4]
 8023478:	f000 fda2 	bl	8023fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802347c:	687b      	ldr	r3, [r7, #4]
 802347e:	681b      	ldr	r3, [r3, #0]
 8023480:	691b      	ldr	r3, [r3, #16]
 8023482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023486:	2b40      	cmp	r3, #64	; 0x40
 8023488:	d10e      	bne.n	80234a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802348a:	687b      	ldr	r3, [r7, #4]
 802348c:	681b      	ldr	r3, [r3, #0]
 802348e:	68db      	ldr	r3, [r3, #12]
 8023490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023494:	2b40      	cmp	r3, #64	; 0x40
 8023496:	d107      	bne.n	80234a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8023498:	687b      	ldr	r3, [r7, #4]
 802349a:	681b      	ldr	r3, [r3, #0]
 802349c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80234a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80234a2:	6878      	ldr	r0, [r7, #4]
 80234a4:	f000 f9bf 	bl	8023826 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80234a8:	687b      	ldr	r3, [r7, #4]
 80234aa:	681b      	ldr	r3, [r3, #0]
 80234ac:	691b      	ldr	r3, [r3, #16]
 80234ae:	f003 0320 	and.w	r3, r3, #32
 80234b2:	2b20      	cmp	r3, #32
 80234b4:	d10e      	bne.n	80234d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80234b6:	687b      	ldr	r3, [r7, #4]
 80234b8:	681b      	ldr	r3, [r3, #0]
 80234ba:	68db      	ldr	r3, [r3, #12]
 80234bc:	f003 0320 	and.w	r3, r3, #32
 80234c0:	2b20      	cmp	r3, #32
 80234c2:	d107      	bne.n	80234d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80234c4:	687b      	ldr	r3, [r7, #4]
 80234c6:	681b      	ldr	r3, [r3, #0]
 80234c8:	f06f 0220 	mvn.w	r2, #32
 80234cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80234ce:	6878      	ldr	r0, [r7, #4]
 80234d0:	f000 fd6c 	bl	8023fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80234d4:	bf00      	nop
 80234d6:	3708      	adds	r7, #8
 80234d8:	46bd      	mov	sp, r7
 80234da:	bd80      	pop	{r7, pc}

080234dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80234dc:	b580      	push	{r7, lr}
 80234de:	b084      	sub	sp, #16
 80234e0:	af00      	add	r7, sp, #0
 80234e2:	60f8      	str	r0, [r7, #12]
 80234e4:	60b9      	str	r1, [r7, #8]
 80234e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80234e8:	68fb      	ldr	r3, [r7, #12]
 80234ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80234ee:	2b01      	cmp	r3, #1
 80234f0:	d101      	bne.n	80234f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80234f2:	2302      	movs	r3, #2
 80234f4:	e0b4      	b.n	8023660 <HAL_TIM_PWM_ConfigChannel+0x184>
 80234f6:	68fb      	ldr	r3, [r7, #12]
 80234f8:	2201      	movs	r2, #1
 80234fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80234fe:	68fb      	ldr	r3, [r7, #12]
 8023500:	2202      	movs	r2, #2
 8023502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8023506:	687b      	ldr	r3, [r7, #4]
 8023508:	2b0c      	cmp	r3, #12
 802350a:	f200 809f 	bhi.w	802364c <HAL_TIM_PWM_ConfigChannel+0x170>
 802350e:	a201      	add	r2, pc, #4	; (adr r2, 8023514 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8023510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023514:	08023549 	.word	0x08023549
 8023518:	0802364d 	.word	0x0802364d
 802351c:	0802364d 	.word	0x0802364d
 8023520:	0802364d 	.word	0x0802364d
 8023524:	08023589 	.word	0x08023589
 8023528:	0802364d 	.word	0x0802364d
 802352c:	0802364d 	.word	0x0802364d
 8023530:	0802364d 	.word	0x0802364d
 8023534:	080235cb 	.word	0x080235cb
 8023538:	0802364d 	.word	0x0802364d
 802353c:	0802364d 	.word	0x0802364d
 8023540:	0802364d 	.word	0x0802364d
 8023544:	0802360b 	.word	0x0802360b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8023548:	68fb      	ldr	r3, [r7, #12]
 802354a:	681b      	ldr	r3, [r3, #0]
 802354c:	68b9      	ldr	r1, [r7, #8]
 802354e:	4618      	mov	r0, r3
 8023550:	f000 fa14 	bl	802397c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8023554:	68fb      	ldr	r3, [r7, #12]
 8023556:	681b      	ldr	r3, [r3, #0]
 8023558:	699a      	ldr	r2, [r3, #24]
 802355a:	68fb      	ldr	r3, [r7, #12]
 802355c:	681b      	ldr	r3, [r3, #0]
 802355e:	f042 0208 	orr.w	r2, r2, #8
 8023562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8023564:	68fb      	ldr	r3, [r7, #12]
 8023566:	681b      	ldr	r3, [r3, #0]
 8023568:	699a      	ldr	r2, [r3, #24]
 802356a:	68fb      	ldr	r3, [r7, #12]
 802356c:	681b      	ldr	r3, [r3, #0]
 802356e:	f022 0204 	bic.w	r2, r2, #4
 8023572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8023574:	68fb      	ldr	r3, [r7, #12]
 8023576:	681b      	ldr	r3, [r3, #0]
 8023578:	6999      	ldr	r1, [r3, #24]
 802357a:	68bb      	ldr	r3, [r7, #8]
 802357c:	691a      	ldr	r2, [r3, #16]
 802357e:	68fb      	ldr	r3, [r7, #12]
 8023580:	681b      	ldr	r3, [r3, #0]
 8023582:	430a      	orrs	r2, r1
 8023584:	619a      	str	r2, [r3, #24]
      break;
 8023586:	e062      	b.n	802364e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8023588:	68fb      	ldr	r3, [r7, #12]
 802358a:	681b      	ldr	r3, [r3, #0]
 802358c:	68b9      	ldr	r1, [r7, #8]
 802358e:	4618      	mov	r0, r3
 8023590:	f000 fa64 	bl	8023a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8023594:	68fb      	ldr	r3, [r7, #12]
 8023596:	681b      	ldr	r3, [r3, #0]
 8023598:	699a      	ldr	r2, [r3, #24]
 802359a:	68fb      	ldr	r3, [r7, #12]
 802359c:	681b      	ldr	r3, [r3, #0]
 802359e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80235a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80235a4:	68fb      	ldr	r3, [r7, #12]
 80235a6:	681b      	ldr	r3, [r3, #0]
 80235a8:	699a      	ldr	r2, [r3, #24]
 80235aa:	68fb      	ldr	r3, [r7, #12]
 80235ac:	681b      	ldr	r3, [r3, #0]
 80235ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80235b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80235b4:	68fb      	ldr	r3, [r7, #12]
 80235b6:	681b      	ldr	r3, [r3, #0]
 80235b8:	6999      	ldr	r1, [r3, #24]
 80235ba:	68bb      	ldr	r3, [r7, #8]
 80235bc:	691b      	ldr	r3, [r3, #16]
 80235be:	021a      	lsls	r2, r3, #8
 80235c0:	68fb      	ldr	r3, [r7, #12]
 80235c2:	681b      	ldr	r3, [r3, #0]
 80235c4:	430a      	orrs	r2, r1
 80235c6:	619a      	str	r2, [r3, #24]
      break;
 80235c8:	e041      	b.n	802364e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80235ca:	68fb      	ldr	r3, [r7, #12]
 80235cc:	681b      	ldr	r3, [r3, #0]
 80235ce:	68b9      	ldr	r1, [r7, #8]
 80235d0:	4618      	mov	r0, r3
 80235d2:	f000 fab9 	bl	8023b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80235d6:	68fb      	ldr	r3, [r7, #12]
 80235d8:	681b      	ldr	r3, [r3, #0]
 80235da:	69da      	ldr	r2, [r3, #28]
 80235dc:	68fb      	ldr	r3, [r7, #12]
 80235de:	681b      	ldr	r3, [r3, #0]
 80235e0:	f042 0208 	orr.w	r2, r2, #8
 80235e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80235e6:	68fb      	ldr	r3, [r7, #12]
 80235e8:	681b      	ldr	r3, [r3, #0]
 80235ea:	69da      	ldr	r2, [r3, #28]
 80235ec:	68fb      	ldr	r3, [r7, #12]
 80235ee:	681b      	ldr	r3, [r3, #0]
 80235f0:	f022 0204 	bic.w	r2, r2, #4
 80235f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80235f6:	68fb      	ldr	r3, [r7, #12]
 80235f8:	681b      	ldr	r3, [r3, #0]
 80235fa:	69d9      	ldr	r1, [r3, #28]
 80235fc:	68bb      	ldr	r3, [r7, #8]
 80235fe:	691a      	ldr	r2, [r3, #16]
 8023600:	68fb      	ldr	r3, [r7, #12]
 8023602:	681b      	ldr	r3, [r3, #0]
 8023604:	430a      	orrs	r2, r1
 8023606:	61da      	str	r2, [r3, #28]
      break;
 8023608:	e021      	b.n	802364e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 802360a:	68fb      	ldr	r3, [r7, #12]
 802360c:	681b      	ldr	r3, [r3, #0]
 802360e:	68b9      	ldr	r1, [r7, #8]
 8023610:	4618      	mov	r0, r3
 8023612:	f000 fb0d 	bl	8023c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8023616:	68fb      	ldr	r3, [r7, #12]
 8023618:	681b      	ldr	r3, [r3, #0]
 802361a:	69da      	ldr	r2, [r3, #28]
 802361c:	68fb      	ldr	r3, [r7, #12]
 802361e:	681b      	ldr	r3, [r3, #0]
 8023620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8023624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8023626:	68fb      	ldr	r3, [r7, #12]
 8023628:	681b      	ldr	r3, [r3, #0]
 802362a:	69da      	ldr	r2, [r3, #28]
 802362c:	68fb      	ldr	r3, [r7, #12]
 802362e:	681b      	ldr	r3, [r3, #0]
 8023630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8023636:	68fb      	ldr	r3, [r7, #12]
 8023638:	681b      	ldr	r3, [r3, #0]
 802363a:	69d9      	ldr	r1, [r3, #28]
 802363c:	68bb      	ldr	r3, [r7, #8]
 802363e:	691b      	ldr	r3, [r3, #16]
 8023640:	021a      	lsls	r2, r3, #8
 8023642:	68fb      	ldr	r3, [r7, #12]
 8023644:	681b      	ldr	r3, [r3, #0]
 8023646:	430a      	orrs	r2, r1
 8023648:	61da      	str	r2, [r3, #28]
      break;
 802364a:	e000      	b.n	802364e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 802364c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 802364e:	68fb      	ldr	r3, [r7, #12]
 8023650:	2201      	movs	r2, #1
 8023652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8023656:	68fb      	ldr	r3, [r7, #12]
 8023658:	2200      	movs	r2, #0
 802365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802365e:	2300      	movs	r3, #0
}
 8023660:	4618      	mov	r0, r3
 8023662:	3710      	adds	r7, #16
 8023664:	46bd      	mov	sp, r7
 8023666:	bd80      	pop	{r7, pc}

08023668 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8023668:	b580      	push	{r7, lr}
 802366a:	b084      	sub	sp, #16
 802366c:	af00      	add	r7, sp, #0
 802366e:	6078      	str	r0, [r7, #4]
 8023670:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8023672:	687b      	ldr	r3, [r7, #4]
 8023674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023678:	2b01      	cmp	r3, #1
 802367a:	d101      	bne.n	8023680 <HAL_TIM_ConfigClockSource+0x18>
 802367c:	2302      	movs	r3, #2
 802367e:	e0a6      	b.n	80237ce <HAL_TIM_ConfigClockSource+0x166>
 8023680:	687b      	ldr	r3, [r7, #4]
 8023682:	2201      	movs	r2, #1
 8023684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8023688:	687b      	ldr	r3, [r7, #4]
 802368a:	2202      	movs	r2, #2
 802368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8023690:	687b      	ldr	r3, [r7, #4]
 8023692:	681b      	ldr	r3, [r3, #0]
 8023694:	689b      	ldr	r3, [r3, #8]
 8023696:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8023698:	68fb      	ldr	r3, [r7, #12]
 802369a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802369e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80236a0:	68fb      	ldr	r3, [r7, #12]
 80236a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80236a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80236a8:	687b      	ldr	r3, [r7, #4]
 80236aa:	681b      	ldr	r3, [r3, #0]
 80236ac:	68fa      	ldr	r2, [r7, #12]
 80236ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80236b0:	683b      	ldr	r3, [r7, #0]
 80236b2:	681b      	ldr	r3, [r3, #0]
 80236b4:	2b40      	cmp	r3, #64	; 0x40
 80236b6:	d067      	beq.n	8023788 <HAL_TIM_ConfigClockSource+0x120>
 80236b8:	2b40      	cmp	r3, #64	; 0x40
 80236ba:	d80b      	bhi.n	80236d4 <HAL_TIM_ConfigClockSource+0x6c>
 80236bc:	2b10      	cmp	r3, #16
 80236be:	d073      	beq.n	80237a8 <HAL_TIM_ConfigClockSource+0x140>
 80236c0:	2b10      	cmp	r3, #16
 80236c2:	d802      	bhi.n	80236ca <HAL_TIM_ConfigClockSource+0x62>
 80236c4:	2b00      	cmp	r3, #0
 80236c6:	d06f      	beq.n	80237a8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80236c8:	e078      	b.n	80237bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80236ca:	2b20      	cmp	r3, #32
 80236cc:	d06c      	beq.n	80237a8 <HAL_TIM_ConfigClockSource+0x140>
 80236ce:	2b30      	cmp	r3, #48	; 0x30
 80236d0:	d06a      	beq.n	80237a8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80236d2:	e073      	b.n	80237bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80236d4:	2b70      	cmp	r3, #112	; 0x70
 80236d6:	d00d      	beq.n	80236f4 <HAL_TIM_ConfigClockSource+0x8c>
 80236d8:	2b70      	cmp	r3, #112	; 0x70
 80236da:	d804      	bhi.n	80236e6 <HAL_TIM_ConfigClockSource+0x7e>
 80236dc:	2b50      	cmp	r3, #80	; 0x50
 80236de:	d033      	beq.n	8023748 <HAL_TIM_ConfigClockSource+0xe0>
 80236e0:	2b60      	cmp	r3, #96	; 0x60
 80236e2:	d041      	beq.n	8023768 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80236e4:	e06a      	b.n	80237bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80236e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80236ea:	d066      	beq.n	80237ba <HAL_TIM_ConfigClockSource+0x152>
 80236ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80236f0:	d017      	beq.n	8023722 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80236f2:	e063      	b.n	80237bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80236f4:	687b      	ldr	r3, [r7, #4]
 80236f6:	6818      	ldr	r0, [r3, #0]
 80236f8:	683b      	ldr	r3, [r7, #0]
 80236fa:	6899      	ldr	r1, [r3, #8]
 80236fc:	683b      	ldr	r3, [r7, #0]
 80236fe:	685a      	ldr	r2, [r3, #4]
 8023700:	683b      	ldr	r3, [r7, #0]
 8023702:	68db      	ldr	r3, [r3, #12]
 8023704:	f000 fb64 	bl	8023dd0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8023708:	687b      	ldr	r3, [r7, #4]
 802370a:	681b      	ldr	r3, [r3, #0]
 802370c:	689b      	ldr	r3, [r3, #8]
 802370e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8023710:	68fb      	ldr	r3, [r7, #12]
 8023712:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8023716:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8023718:	687b      	ldr	r3, [r7, #4]
 802371a:	681b      	ldr	r3, [r3, #0]
 802371c:	68fa      	ldr	r2, [r7, #12]
 802371e:	609a      	str	r2, [r3, #8]
      break;
 8023720:	e04c      	b.n	80237bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8023722:	687b      	ldr	r3, [r7, #4]
 8023724:	6818      	ldr	r0, [r3, #0]
 8023726:	683b      	ldr	r3, [r7, #0]
 8023728:	6899      	ldr	r1, [r3, #8]
 802372a:	683b      	ldr	r3, [r7, #0]
 802372c:	685a      	ldr	r2, [r3, #4]
 802372e:	683b      	ldr	r3, [r7, #0]
 8023730:	68db      	ldr	r3, [r3, #12]
 8023732:	f000 fb4d 	bl	8023dd0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8023736:	687b      	ldr	r3, [r7, #4]
 8023738:	681b      	ldr	r3, [r3, #0]
 802373a:	689a      	ldr	r2, [r3, #8]
 802373c:	687b      	ldr	r3, [r7, #4]
 802373e:	681b      	ldr	r3, [r3, #0]
 8023740:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8023744:	609a      	str	r2, [r3, #8]
      break;
 8023746:	e039      	b.n	80237bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8023748:	687b      	ldr	r3, [r7, #4]
 802374a:	6818      	ldr	r0, [r3, #0]
 802374c:	683b      	ldr	r3, [r7, #0]
 802374e:	6859      	ldr	r1, [r3, #4]
 8023750:	683b      	ldr	r3, [r7, #0]
 8023752:	68db      	ldr	r3, [r3, #12]
 8023754:	461a      	mov	r2, r3
 8023756:	f000 fac1 	bl	8023cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 802375a:	687b      	ldr	r3, [r7, #4]
 802375c:	681b      	ldr	r3, [r3, #0]
 802375e:	2150      	movs	r1, #80	; 0x50
 8023760:	4618      	mov	r0, r3
 8023762:	f000 fb1a 	bl	8023d9a <TIM_ITRx_SetConfig>
      break;
 8023766:	e029      	b.n	80237bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8023768:	687b      	ldr	r3, [r7, #4]
 802376a:	6818      	ldr	r0, [r3, #0]
 802376c:	683b      	ldr	r3, [r7, #0]
 802376e:	6859      	ldr	r1, [r3, #4]
 8023770:	683b      	ldr	r3, [r7, #0]
 8023772:	68db      	ldr	r3, [r3, #12]
 8023774:	461a      	mov	r2, r3
 8023776:	f000 fae0 	bl	8023d3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802377a:	687b      	ldr	r3, [r7, #4]
 802377c:	681b      	ldr	r3, [r3, #0]
 802377e:	2160      	movs	r1, #96	; 0x60
 8023780:	4618      	mov	r0, r3
 8023782:	f000 fb0a 	bl	8023d9a <TIM_ITRx_SetConfig>
      break;
 8023786:	e019      	b.n	80237bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8023788:	687b      	ldr	r3, [r7, #4]
 802378a:	6818      	ldr	r0, [r3, #0]
 802378c:	683b      	ldr	r3, [r7, #0]
 802378e:	6859      	ldr	r1, [r3, #4]
 8023790:	683b      	ldr	r3, [r7, #0]
 8023792:	68db      	ldr	r3, [r3, #12]
 8023794:	461a      	mov	r2, r3
 8023796:	f000 faa1 	bl	8023cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802379a:	687b      	ldr	r3, [r7, #4]
 802379c:	681b      	ldr	r3, [r3, #0]
 802379e:	2140      	movs	r1, #64	; 0x40
 80237a0:	4618      	mov	r0, r3
 80237a2:	f000 fafa 	bl	8023d9a <TIM_ITRx_SetConfig>
      break;
 80237a6:	e009      	b.n	80237bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80237a8:	687b      	ldr	r3, [r7, #4]
 80237aa:	681a      	ldr	r2, [r3, #0]
 80237ac:	683b      	ldr	r3, [r7, #0]
 80237ae:	681b      	ldr	r3, [r3, #0]
 80237b0:	4619      	mov	r1, r3
 80237b2:	4610      	mov	r0, r2
 80237b4:	f000 faf1 	bl	8023d9a <TIM_ITRx_SetConfig>
      break;
 80237b8:	e000      	b.n	80237bc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80237ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80237bc:	687b      	ldr	r3, [r7, #4]
 80237be:	2201      	movs	r2, #1
 80237c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80237c4:	687b      	ldr	r3, [r7, #4]
 80237c6:	2200      	movs	r2, #0
 80237c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80237cc:	2300      	movs	r3, #0
}
 80237ce:	4618      	mov	r0, r3
 80237d0:	3710      	adds	r7, #16
 80237d2:	46bd      	mov	sp, r7
 80237d4:	bd80      	pop	{r7, pc}

080237d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80237d6:	b480      	push	{r7}
 80237d8:	b083      	sub	sp, #12
 80237da:	af00      	add	r7, sp, #0
 80237dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80237de:	bf00      	nop
 80237e0:	370c      	adds	r7, #12
 80237e2:	46bd      	mov	sp, r7
 80237e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237e8:	4770      	bx	lr

080237ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80237ea:	b480      	push	{r7}
 80237ec:	b083      	sub	sp, #12
 80237ee:	af00      	add	r7, sp, #0
 80237f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80237f2:	bf00      	nop
 80237f4:	370c      	adds	r7, #12
 80237f6:	46bd      	mov	sp, r7
 80237f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237fc:	4770      	bx	lr

080237fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80237fe:	b480      	push	{r7}
 8023800:	b083      	sub	sp, #12
 8023802:	af00      	add	r7, sp, #0
 8023804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8023806:	bf00      	nop
 8023808:	370c      	adds	r7, #12
 802380a:	46bd      	mov	sp, r7
 802380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023810:	4770      	bx	lr

08023812 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8023812:	b480      	push	{r7}
 8023814:	b083      	sub	sp, #12
 8023816:	af00      	add	r7, sp, #0
 8023818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802381a:	bf00      	nop
 802381c:	370c      	adds	r7, #12
 802381e:	46bd      	mov	sp, r7
 8023820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023824:	4770      	bx	lr

08023826 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8023826:	b480      	push	{r7}
 8023828:	b083      	sub	sp, #12
 802382a:	af00      	add	r7, sp, #0
 802382c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802382e:	bf00      	nop
 8023830:	370c      	adds	r7, #12
 8023832:	46bd      	mov	sp, r7
 8023834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023838:	4770      	bx	lr
	...

0802383c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 802383c:	b480      	push	{r7}
 802383e:	b085      	sub	sp, #20
 8023840:	af00      	add	r7, sp, #0
 8023842:	6078      	str	r0, [r7, #4]
 8023844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8023846:	687b      	ldr	r3, [r7, #4]
 8023848:	681b      	ldr	r3, [r3, #0]
 802384a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802384c:	687b      	ldr	r3, [r7, #4]
 802384e:	4a40      	ldr	r2, [pc, #256]	; (8023950 <TIM_Base_SetConfig+0x114>)
 8023850:	4293      	cmp	r3, r2
 8023852:	d013      	beq.n	802387c <TIM_Base_SetConfig+0x40>
 8023854:	687b      	ldr	r3, [r7, #4]
 8023856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802385a:	d00f      	beq.n	802387c <TIM_Base_SetConfig+0x40>
 802385c:	687b      	ldr	r3, [r7, #4]
 802385e:	4a3d      	ldr	r2, [pc, #244]	; (8023954 <TIM_Base_SetConfig+0x118>)
 8023860:	4293      	cmp	r3, r2
 8023862:	d00b      	beq.n	802387c <TIM_Base_SetConfig+0x40>
 8023864:	687b      	ldr	r3, [r7, #4]
 8023866:	4a3c      	ldr	r2, [pc, #240]	; (8023958 <TIM_Base_SetConfig+0x11c>)
 8023868:	4293      	cmp	r3, r2
 802386a:	d007      	beq.n	802387c <TIM_Base_SetConfig+0x40>
 802386c:	687b      	ldr	r3, [r7, #4]
 802386e:	4a3b      	ldr	r2, [pc, #236]	; (802395c <TIM_Base_SetConfig+0x120>)
 8023870:	4293      	cmp	r3, r2
 8023872:	d003      	beq.n	802387c <TIM_Base_SetConfig+0x40>
 8023874:	687b      	ldr	r3, [r7, #4]
 8023876:	4a3a      	ldr	r2, [pc, #232]	; (8023960 <TIM_Base_SetConfig+0x124>)
 8023878:	4293      	cmp	r3, r2
 802387a:	d108      	bne.n	802388e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802387c:	68fb      	ldr	r3, [r7, #12]
 802387e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8023882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8023884:	683b      	ldr	r3, [r7, #0]
 8023886:	685b      	ldr	r3, [r3, #4]
 8023888:	68fa      	ldr	r2, [r7, #12]
 802388a:	4313      	orrs	r3, r2
 802388c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802388e:	687b      	ldr	r3, [r7, #4]
 8023890:	4a2f      	ldr	r2, [pc, #188]	; (8023950 <TIM_Base_SetConfig+0x114>)
 8023892:	4293      	cmp	r3, r2
 8023894:	d02b      	beq.n	80238ee <TIM_Base_SetConfig+0xb2>
 8023896:	687b      	ldr	r3, [r7, #4]
 8023898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802389c:	d027      	beq.n	80238ee <TIM_Base_SetConfig+0xb2>
 802389e:	687b      	ldr	r3, [r7, #4]
 80238a0:	4a2c      	ldr	r2, [pc, #176]	; (8023954 <TIM_Base_SetConfig+0x118>)
 80238a2:	4293      	cmp	r3, r2
 80238a4:	d023      	beq.n	80238ee <TIM_Base_SetConfig+0xb2>
 80238a6:	687b      	ldr	r3, [r7, #4]
 80238a8:	4a2b      	ldr	r2, [pc, #172]	; (8023958 <TIM_Base_SetConfig+0x11c>)
 80238aa:	4293      	cmp	r3, r2
 80238ac:	d01f      	beq.n	80238ee <TIM_Base_SetConfig+0xb2>
 80238ae:	687b      	ldr	r3, [r7, #4]
 80238b0:	4a2a      	ldr	r2, [pc, #168]	; (802395c <TIM_Base_SetConfig+0x120>)
 80238b2:	4293      	cmp	r3, r2
 80238b4:	d01b      	beq.n	80238ee <TIM_Base_SetConfig+0xb2>
 80238b6:	687b      	ldr	r3, [r7, #4]
 80238b8:	4a29      	ldr	r2, [pc, #164]	; (8023960 <TIM_Base_SetConfig+0x124>)
 80238ba:	4293      	cmp	r3, r2
 80238bc:	d017      	beq.n	80238ee <TIM_Base_SetConfig+0xb2>
 80238be:	687b      	ldr	r3, [r7, #4]
 80238c0:	4a28      	ldr	r2, [pc, #160]	; (8023964 <TIM_Base_SetConfig+0x128>)
 80238c2:	4293      	cmp	r3, r2
 80238c4:	d013      	beq.n	80238ee <TIM_Base_SetConfig+0xb2>
 80238c6:	687b      	ldr	r3, [r7, #4]
 80238c8:	4a27      	ldr	r2, [pc, #156]	; (8023968 <TIM_Base_SetConfig+0x12c>)
 80238ca:	4293      	cmp	r3, r2
 80238cc:	d00f      	beq.n	80238ee <TIM_Base_SetConfig+0xb2>
 80238ce:	687b      	ldr	r3, [r7, #4]
 80238d0:	4a26      	ldr	r2, [pc, #152]	; (802396c <TIM_Base_SetConfig+0x130>)
 80238d2:	4293      	cmp	r3, r2
 80238d4:	d00b      	beq.n	80238ee <TIM_Base_SetConfig+0xb2>
 80238d6:	687b      	ldr	r3, [r7, #4]
 80238d8:	4a25      	ldr	r2, [pc, #148]	; (8023970 <TIM_Base_SetConfig+0x134>)
 80238da:	4293      	cmp	r3, r2
 80238dc:	d007      	beq.n	80238ee <TIM_Base_SetConfig+0xb2>
 80238de:	687b      	ldr	r3, [r7, #4]
 80238e0:	4a24      	ldr	r2, [pc, #144]	; (8023974 <TIM_Base_SetConfig+0x138>)
 80238e2:	4293      	cmp	r3, r2
 80238e4:	d003      	beq.n	80238ee <TIM_Base_SetConfig+0xb2>
 80238e6:	687b      	ldr	r3, [r7, #4]
 80238e8:	4a23      	ldr	r2, [pc, #140]	; (8023978 <TIM_Base_SetConfig+0x13c>)
 80238ea:	4293      	cmp	r3, r2
 80238ec:	d108      	bne.n	8023900 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80238ee:	68fb      	ldr	r3, [r7, #12]
 80238f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80238f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80238f6:	683b      	ldr	r3, [r7, #0]
 80238f8:	68db      	ldr	r3, [r3, #12]
 80238fa:	68fa      	ldr	r2, [r7, #12]
 80238fc:	4313      	orrs	r3, r2
 80238fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8023900:	68fb      	ldr	r3, [r7, #12]
 8023902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8023906:	683b      	ldr	r3, [r7, #0]
 8023908:	695b      	ldr	r3, [r3, #20]
 802390a:	4313      	orrs	r3, r2
 802390c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802390e:	687b      	ldr	r3, [r7, #4]
 8023910:	68fa      	ldr	r2, [r7, #12]
 8023912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8023914:	683b      	ldr	r3, [r7, #0]
 8023916:	689a      	ldr	r2, [r3, #8]
 8023918:	687b      	ldr	r3, [r7, #4]
 802391a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802391c:	683b      	ldr	r3, [r7, #0]
 802391e:	681a      	ldr	r2, [r3, #0]
 8023920:	687b      	ldr	r3, [r7, #4]
 8023922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8023924:	687b      	ldr	r3, [r7, #4]
 8023926:	4a0a      	ldr	r2, [pc, #40]	; (8023950 <TIM_Base_SetConfig+0x114>)
 8023928:	4293      	cmp	r3, r2
 802392a:	d003      	beq.n	8023934 <TIM_Base_SetConfig+0xf8>
 802392c:	687b      	ldr	r3, [r7, #4]
 802392e:	4a0c      	ldr	r2, [pc, #48]	; (8023960 <TIM_Base_SetConfig+0x124>)
 8023930:	4293      	cmp	r3, r2
 8023932:	d103      	bne.n	802393c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8023934:	683b      	ldr	r3, [r7, #0]
 8023936:	691a      	ldr	r2, [r3, #16]
 8023938:	687b      	ldr	r3, [r7, #4]
 802393a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802393c:	687b      	ldr	r3, [r7, #4]
 802393e:	2201      	movs	r2, #1
 8023940:	615a      	str	r2, [r3, #20]
}
 8023942:	bf00      	nop
 8023944:	3714      	adds	r7, #20
 8023946:	46bd      	mov	sp, r7
 8023948:	f85d 7b04 	ldr.w	r7, [sp], #4
 802394c:	4770      	bx	lr
 802394e:	bf00      	nop
 8023950:	40010000 	.word	0x40010000
 8023954:	40000400 	.word	0x40000400
 8023958:	40000800 	.word	0x40000800
 802395c:	40000c00 	.word	0x40000c00
 8023960:	40010400 	.word	0x40010400
 8023964:	40014000 	.word	0x40014000
 8023968:	40014400 	.word	0x40014400
 802396c:	40014800 	.word	0x40014800
 8023970:	40001800 	.word	0x40001800
 8023974:	40001c00 	.word	0x40001c00
 8023978:	40002000 	.word	0x40002000

0802397c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802397c:	b480      	push	{r7}
 802397e:	b087      	sub	sp, #28
 8023980:	af00      	add	r7, sp, #0
 8023982:	6078      	str	r0, [r7, #4]
 8023984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8023986:	687b      	ldr	r3, [r7, #4]
 8023988:	6a1b      	ldr	r3, [r3, #32]
 802398a:	f023 0201 	bic.w	r2, r3, #1
 802398e:	687b      	ldr	r3, [r7, #4]
 8023990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8023992:	687b      	ldr	r3, [r7, #4]
 8023994:	6a1b      	ldr	r3, [r3, #32]
 8023996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8023998:	687b      	ldr	r3, [r7, #4]
 802399a:	685b      	ldr	r3, [r3, #4]
 802399c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802399e:	687b      	ldr	r3, [r7, #4]
 80239a0:	699b      	ldr	r3, [r3, #24]
 80239a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80239a4:	68fb      	ldr	r3, [r7, #12]
 80239a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80239aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80239ac:	68fb      	ldr	r3, [r7, #12]
 80239ae:	f023 0303 	bic.w	r3, r3, #3
 80239b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80239b4:	683b      	ldr	r3, [r7, #0]
 80239b6:	681b      	ldr	r3, [r3, #0]
 80239b8:	68fa      	ldr	r2, [r7, #12]
 80239ba:	4313      	orrs	r3, r2
 80239bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80239be:	697b      	ldr	r3, [r7, #20]
 80239c0:	f023 0302 	bic.w	r3, r3, #2
 80239c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80239c6:	683b      	ldr	r3, [r7, #0]
 80239c8:	689b      	ldr	r3, [r3, #8]
 80239ca:	697a      	ldr	r2, [r7, #20]
 80239cc:	4313      	orrs	r3, r2
 80239ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80239d0:	687b      	ldr	r3, [r7, #4]
 80239d2:	4a20      	ldr	r2, [pc, #128]	; (8023a54 <TIM_OC1_SetConfig+0xd8>)
 80239d4:	4293      	cmp	r3, r2
 80239d6:	d003      	beq.n	80239e0 <TIM_OC1_SetConfig+0x64>
 80239d8:	687b      	ldr	r3, [r7, #4]
 80239da:	4a1f      	ldr	r2, [pc, #124]	; (8023a58 <TIM_OC1_SetConfig+0xdc>)
 80239dc:	4293      	cmp	r3, r2
 80239de:	d10c      	bne.n	80239fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80239e0:	697b      	ldr	r3, [r7, #20]
 80239e2:	f023 0308 	bic.w	r3, r3, #8
 80239e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80239e8:	683b      	ldr	r3, [r7, #0]
 80239ea:	68db      	ldr	r3, [r3, #12]
 80239ec:	697a      	ldr	r2, [r7, #20]
 80239ee:	4313      	orrs	r3, r2
 80239f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80239f2:	697b      	ldr	r3, [r7, #20]
 80239f4:	f023 0304 	bic.w	r3, r3, #4
 80239f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80239fa:	687b      	ldr	r3, [r7, #4]
 80239fc:	4a15      	ldr	r2, [pc, #84]	; (8023a54 <TIM_OC1_SetConfig+0xd8>)
 80239fe:	4293      	cmp	r3, r2
 8023a00:	d003      	beq.n	8023a0a <TIM_OC1_SetConfig+0x8e>
 8023a02:	687b      	ldr	r3, [r7, #4]
 8023a04:	4a14      	ldr	r2, [pc, #80]	; (8023a58 <TIM_OC1_SetConfig+0xdc>)
 8023a06:	4293      	cmp	r3, r2
 8023a08:	d111      	bne.n	8023a2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8023a0a:	693b      	ldr	r3, [r7, #16]
 8023a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8023a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8023a12:	693b      	ldr	r3, [r7, #16]
 8023a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8023a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8023a1a:	683b      	ldr	r3, [r7, #0]
 8023a1c:	695b      	ldr	r3, [r3, #20]
 8023a1e:	693a      	ldr	r2, [r7, #16]
 8023a20:	4313      	orrs	r3, r2
 8023a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8023a24:	683b      	ldr	r3, [r7, #0]
 8023a26:	699b      	ldr	r3, [r3, #24]
 8023a28:	693a      	ldr	r2, [r7, #16]
 8023a2a:	4313      	orrs	r3, r2
 8023a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8023a2e:	687b      	ldr	r3, [r7, #4]
 8023a30:	693a      	ldr	r2, [r7, #16]
 8023a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8023a34:	687b      	ldr	r3, [r7, #4]
 8023a36:	68fa      	ldr	r2, [r7, #12]
 8023a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8023a3a:	683b      	ldr	r3, [r7, #0]
 8023a3c:	685a      	ldr	r2, [r3, #4]
 8023a3e:	687b      	ldr	r3, [r7, #4]
 8023a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8023a42:	687b      	ldr	r3, [r7, #4]
 8023a44:	697a      	ldr	r2, [r7, #20]
 8023a46:	621a      	str	r2, [r3, #32]
}
 8023a48:	bf00      	nop
 8023a4a:	371c      	adds	r7, #28
 8023a4c:	46bd      	mov	sp, r7
 8023a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a52:	4770      	bx	lr
 8023a54:	40010000 	.word	0x40010000
 8023a58:	40010400 	.word	0x40010400

08023a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8023a5c:	b480      	push	{r7}
 8023a5e:	b087      	sub	sp, #28
 8023a60:	af00      	add	r7, sp, #0
 8023a62:	6078      	str	r0, [r7, #4]
 8023a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8023a66:	687b      	ldr	r3, [r7, #4]
 8023a68:	6a1b      	ldr	r3, [r3, #32]
 8023a6a:	f023 0210 	bic.w	r2, r3, #16
 8023a6e:	687b      	ldr	r3, [r7, #4]
 8023a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8023a72:	687b      	ldr	r3, [r7, #4]
 8023a74:	6a1b      	ldr	r3, [r3, #32]
 8023a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8023a78:	687b      	ldr	r3, [r7, #4]
 8023a7a:	685b      	ldr	r3, [r3, #4]
 8023a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8023a7e:	687b      	ldr	r3, [r7, #4]
 8023a80:	699b      	ldr	r3, [r3, #24]
 8023a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8023a84:	68fb      	ldr	r3, [r7, #12]
 8023a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8023a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8023a8c:	68fb      	ldr	r3, [r7, #12]
 8023a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8023a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8023a94:	683b      	ldr	r3, [r7, #0]
 8023a96:	681b      	ldr	r3, [r3, #0]
 8023a98:	021b      	lsls	r3, r3, #8
 8023a9a:	68fa      	ldr	r2, [r7, #12]
 8023a9c:	4313      	orrs	r3, r2
 8023a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8023aa0:	697b      	ldr	r3, [r7, #20]
 8023aa2:	f023 0320 	bic.w	r3, r3, #32
 8023aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8023aa8:	683b      	ldr	r3, [r7, #0]
 8023aaa:	689b      	ldr	r3, [r3, #8]
 8023aac:	011b      	lsls	r3, r3, #4
 8023aae:	697a      	ldr	r2, [r7, #20]
 8023ab0:	4313      	orrs	r3, r2
 8023ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8023ab4:	687b      	ldr	r3, [r7, #4]
 8023ab6:	4a22      	ldr	r2, [pc, #136]	; (8023b40 <TIM_OC2_SetConfig+0xe4>)
 8023ab8:	4293      	cmp	r3, r2
 8023aba:	d003      	beq.n	8023ac4 <TIM_OC2_SetConfig+0x68>
 8023abc:	687b      	ldr	r3, [r7, #4]
 8023abe:	4a21      	ldr	r2, [pc, #132]	; (8023b44 <TIM_OC2_SetConfig+0xe8>)
 8023ac0:	4293      	cmp	r3, r2
 8023ac2:	d10d      	bne.n	8023ae0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8023ac4:	697b      	ldr	r3, [r7, #20]
 8023ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8023aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8023acc:	683b      	ldr	r3, [r7, #0]
 8023ace:	68db      	ldr	r3, [r3, #12]
 8023ad0:	011b      	lsls	r3, r3, #4
 8023ad2:	697a      	ldr	r2, [r7, #20]
 8023ad4:	4313      	orrs	r3, r2
 8023ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8023ad8:	697b      	ldr	r3, [r7, #20]
 8023ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8023ade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8023ae0:	687b      	ldr	r3, [r7, #4]
 8023ae2:	4a17      	ldr	r2, [pc, #92]	; (8023b40 <TIM_OC2_SetConfig+0xe4>)
 8023ae4:	4293      	cmp	r3, r2
 8023ae6:	d003      	beq.n	8023af0 <TIM_OC2_SetConfig+0x94>
 8023ae8:	687b      	ldr	r3, [r7, #4]
 8023aea:	4a16      	ldr	r2, [pc, #88]	; (8023b44 <TIM_OC2_SetConfig+0xe8>)
 8023aec:	4293      	cmp	r3, r2
 8023aee:	d113      	bne.n	8023b18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8023af0:	693b      	ldr	r3, [r7, #16]
 8023af2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8023af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8023af8:	693b      	ldr	r3, [r7, #16]
 8023afa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8023afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8023b00:	683b      	ldr	r3, [r7, #0]
 8023b02:	695b      	ldr	r3, [r3, #20]
 8023b04:	009b      	lsls	r3, r3, #2
 8023b06:	693a      	ldr	r2, [r7, #16]
 8023b08:	4313      	orrs	r3, r2
 8023b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8023b0c:	683b      	ldr	r3, [r7, #0]
 8023b0e:	699b      	ldr	r3, [r3, #24]
 8023b10:	009b      	lsls	r3, r3, #2
 8023b12:	693a      	ldr	r2, [r7, #16]
 8023b14:	4313      	orrs	r3, r2
 8023b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8023b18:	687b      	ldr	r3, [r7, #4]
 8023b1a:	693a      	ldr	r2, [r7, #16]
 8023b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8023b1e:	687b      	ldr	r3, [r7, #4]
 8023b20:	68fa      	ldr	r2, [r7, #12]
 8023b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8023b24:	683b      	ldr	r3, [r7, #0]
 8023b26:	685a      	ldr	r2, [r3, #4]
 8023b28:	687b      	ldr	r3, [r7, #4]
 8023b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8023b2c:	687b      	ldr	r3, [r7, #4]
 8023b2e:	697a      	ldr	r2, [r7, #20]
 8023b30:	621a      	str	r2, [r3, #32]
}
 8023b32:	bf00      	nop
 8023b34:	371c      	adds	r7, #28
 8023b36:	46bd      	mov	sp, r7
 8023b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b3c:	4770      	bx	lr
 8023b3e:	bf00      	nop
 8023b40:	40010000 	.word	0x40010000
 8023b44:	40010400 	.word	0x40010400

08023b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8023b48:	b480      	push	{r7}
 8023b4a:	b087      	sub	sp, #28
 8023b4c:	af00      	add	r7, sp, #0
 8023b4e:	6078      	str	r0, [r7, #4]
 8023b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8023b52:	687b      	ldr	r3, [r7, #4]
 8023b54:	6a1b      	ldr	r3, [r3, #32]
 8023b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8023b5a:	687b      	ldr	r3, [r7, #4]
 8023b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	6a1b      	ldr	r3, [r3, #32]
 8023b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8023b64:	687b      	ldr	r3, [r7, #4]
 8023b66:	685b      	ldr	r3, [r3, #4]
 8023b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8023b6a:	687b      	ldr	r3, [r7, #4]
 8023b6c:	69db      	ldr	r3, [r3, #28]
 8023b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8023b70:	68fb      	ldr	r3, [r7, #12]
 8023b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8023b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8023b78:	68fb      	ldr	r3, [r7, #12]
 8023b7a:	f023 0303 	bic.w	r3, r3, #3
 8023b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8023b80:	683b      	ldr	r3, [r7, #0]
 8023b82:	681b      	ldr	r3, [r3, #0]
 8023b84:	68fa      	ldr	r2, [r7, #12]
 8023b86:	4313      	orrs	r3, r2
 8023b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8023b8a:	697b      	ldr	r3, [r7, #20]
 8023b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8023b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8023b92:	683b      	ldr	r3, [r7, #0]
 8023b94:	689b      	ldr	r3, [r3, #8]
 8023b96:	021b      	lsls	r3, r3, #8
 8023b98:	697a      	ldr	r2, [r7, #20]
 8023b9a:	4313      	orrs	r3, r2
 8023b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8023b9e:	687b      	ldr	r3, [r7, #4]
 8023ba0:	4a21      	ldr	r2, [pc, #132]	; (8023c28 <TIM_OC3_SetConfig+0xe0>)
 8023ba2:	4293      	cmp	r3, r2
 8023ba4:	d003      	beq.n	8023bae <TIM_OC3_SetConfig+0x66>
 8023ba6:	687b      	ldr	r3, [r7, #4]
 8023ba8:	4a20      	ldr	r2, [pc, #128]	; (8023c2c <TIM_OC3_SetConfig+0xe4>)
 8023baa:	4293      	cmp	r3, r2
 8023bac:	d10d      	bne.n	8023bca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8023bae:	697b      	ldr	r3, [r7, #20]
 8023bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8023bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8023bb6:	683b      	ldr	r3, [r7, #0]
 8023bb8:	68db      	ldr	r3, [r3, #12]
 8023bba:	021b      	lsls	r3, r3, #8
 8023bbc:	697a      	ldr	r2, [r7, #20]
 8023bbe:	4313      	orrs	r3, r2
 8023bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8023bc2:	697b      	ldr	r3, [r7, #20]
 8023bc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8023bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8023bca:	687b      	ldr	r3, [r7, #4]
 8023bcc:	4a16      	ldr	r2, [pc, #88]	; (8023c28 <TIM_OC3_SetConfig+0xe0>)
 8023bce:	4293      	cmp	r3, r2
 8023bd0:	d003      	beq.n	8023bda <TIM_OC3_SetConfig+0x92>
 8023bd2:	687b      	ldr	r3, [r7, #4]
 8023bd4:	4a15      	ldr	r2, [pc, #84]	; (8023c2c <TIM_OC3_SetConfig+0xe4>)
 8023bd6:	4293      	cmp	r3, r2
 8023bd8:	d113      	bne.n	8023c02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8023bda:	693b      	ldr	r3, [r7, #16]
 8023bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8023be2:	693b      	ldr	r3, [r7, #16]
 8023be4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8023be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8023bea:	683b      	ldr	r3, [r7, #0]
 8023bec:	695b      	ldr	r3, [r3, #20]
 8023bee:	011b      	lsls	r3, r3, #4
 8023bf0:	693a      	ldr	r2, [r7, #16]
 8023bf2:	4313      	orrs	r3, r2
 8023bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8023bf6:	683b      	ldr	r3, [r7, #0]
 8023bf8:	699b      	ldr	r3, [r3, #24]
 8023bfa:	011b      	lsls	r3, r3, #4
 8023bfc:	693a      	ldr	r2, [r7, #16]
 8023bfe:	4313      	orrs	r3, r2
 8023c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8023c02:	687b      	ldr	r3, [r7, #4]
 8023c04:	693a      	ldr	r2, [r7, #16]
 8023c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8023c08:	687b      	ldr	r3, [r7, #4]
 8023c0a:	68fa      	ldr	r2, [r7, #12]
 8023c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8023c0e:	683b      	ldr	r3, [r7, #0]
 8023c10:	685a      	ldr	r2, [r3, #4]
 8023c12:	687b      	ldr	r3, [r7, #4]
 8023c14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8023c16:	687b      	ldr	r3, [r7, #4]
 8023c18:	697a      	ldr	r2, [r7, #20]
 8023c1a:	621a      	str	r2, [r3, #32]
}
 8023c1c:	bf00      	nop
 8023c1e:	371c      	adds	r7, #28
 8023c20:	46bd      	mov	sp, r7
 8023c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c26:	4770      	bx	lr
 8023c28:	40010000 	.word	0x40010000
 8023c2c:	40010400 	.word	0x40010400

08023c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8023c30:	b480      	push	{r7}
 8023c32:	b087      	sub	sp, #28
 8023c34:	af00      	add	r7, sp, #0
 8023c36:	6078      	str	r0, [r7, #4]
 8023c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8023c3a:	687b      	ldr	r3, [r7, #4]
 8023c3c:	6a1b      	ldr	r3, [r3, #32]
 8023c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8023c42:	687b      	ldr	r3, [r7, #4]
 8023c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8023c46:	687b      	ldr	r3, [r7, #4]
 8023c48:	6a1b      	ldr	r3, [r3, #32]
 8023c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8023c4c:	687b      	ldr	r3, [r7, #4]
 8023c4e:	685b      	ldr	r3, [r3, #4]
 8023c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8023c52:	687b      	ldr	r3, [r7, #4]
 8023c54:	69db      	ldr	r3, [r3, #28]
 8023c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8023c58:	68fb      	ldr	r3, [r7, #12]
 8023c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8023c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8023c60:	68fb      	ldr	r3, [r7, #12]
 8023c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8023c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8023c68:	683b      	ldr	r3, [r7, #0]
 8023c6a:	681b      	ldr	r3, [r3, #0]
 8023c6c:	021b      	lsls	r3, r3, #8
 8023c6e:	68fa      	ldr	r2, [r7, #12]
 8023c70:	4313      	orrs	r3, r2
 8023c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8023c74:	693b      	ldr	r3, [r7, #16]
 8023c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8023c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8023c7c:	683b      	ldr	r3, [r7, #0]
 8023c7e:	689b      	ldr	r3, [r3, #8]
 8023c80:	031b      	lsls	r3, r3, #12
 8023c82:	693a      	ldr	r2, [r7, #16]
 8023c84:	4313      	orrs	r3, r2
 8023c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8023c88:	687b      	ldr	r3, [r7, #4]
 8023c8a:	4a12      	ldr	r2, [pc, #72]	; (8023cd4 <TIM_OC4_SetConfig+0xa4>)
 8023c8c:	4293      	cmp	r3, r2
 8023c8e:	d003      	beq.n	8023c98 <TIM_OC4_SetConfig+0x68>
 8023c90:	687b      	ldr	r3, [r7, #4]
 8023c92:	4a11      	ldr	r2, [pc, #68]	; (8023cd8 <TIM_OC4_SetConfig+0xa8>)
 8023c94:	4293      	cmp	r3, r2
 8023c96:	d109      	bne.n	8023cac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8023c98:	697b      	ldr	r3, [r7, #20]
 8023c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8023c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8023ca0:	683b      	ldr	r3, [r7, #0]
 8023ca2:	695b      	ldr	r3, [r3, #20]
 8023ca4:	019b      	lsls	r3, r3, #6
 8023ca6:	697a      	ldr	r2, [r7, #20]
 8023ca8:	4313      	orrs	r3, r2
 8023caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	697a      	ldr	r2, [r7, #20]
 8023cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8023cb2:	687b      	ldr	r3, [r7, #4]
 8023cb4:	68fa      	ldr	r2, [r7, #12]
 8023cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8023cb8:	683b      	ldr	r3, [r7, #0]
 8023cba:	685a      	ldr	r2, [r3, #4]
 8023cbc:	687b      	ldr	r3, [r7, #4]
 8023cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8023cc0:	687b      	ldr	r3, [r7, #4]
 8023cc2:	693a      	ldr	r2, [r7, #16]
 8023cc4:	621a      	str	r2, [r3, #32]
}
 8023cc6:	bf00      	nop
 8023cc8:	371c      	adds	r7, #28
 8023cca:	46bd      	mov	sp, r7
 8023ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cd0:	4770      	bx	lr
 8023cd2:	bf00      	nop
 8023cd4:	40010000 	.word	0x40010000
 8023cd8:	40010400 	.word	0x40010400

08023cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8023cdc:	b480      	push	{r7}
 8023cde:	b087      	sub	sp, #28
 8023ce0:	af00      	add	r7, sp, #0
 8023ce2:	60f8      	str	r0, [r7, #12]
 8023ce4:	60b9      	str	r1, [r7, #8]
 8023ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8023ce8:	68fb      	ldr	r3, [r7, #12]
 8023cea:	6a1b      	ldr	r3, [r3, #32]
 8023cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8023cee:	68fb      	ldr	r3, [r7, #12]
 8023cf0:	6a1b      	ldr	r3, [r3, #32]
 8023cf2:	f023 0201 	bic.w	r2, r3, #1
 8023cf6:	68fb      	ldr	r3, [r7, #12]
 8023cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8023cfa:	68fb      	ldr	r3, [r7, #12]
 8023cfc:	699b      	ldr	r3, [r3, #24]
 8023cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8023d00:	693b      	ldr	r3, [r7, #16]
 8023d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8023d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8023d08:	687b      	ldr	r3, [r7, #4]
 8023d0a:	011b      	lsls	r3, r3, #4
 8023d0c:	693a      	ldr	r2, [r7, #16]
 8023d0e:	4313      	orrs	r3, r2
 8023d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8023d12:	697b      	ldr	r3, [r7, #20]
 8023d14:	f023 030a 	bic.w	r3, r3, #10
 8023d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8023d1a:	697a      	ldr	r2, [r7, #20]
 8023d1c:	68bb      	ldr	r3, [r7, #8]
 8023d1e:	4313      	orrs	r3, r2
 8023d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8023d22:	68fb      	ldr	r3, [r7, #12]
 8023d24:	693a      	ldr	r2, [r7, #16]
 8023d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8023d28:	68fb      	ldr	r3, [r7, #12]
 8023d2a:	697a      	ldr	r2, [r7, #20]
 8023d2c:	621a      	str	r2, [r3, #32]
}
 8023d2e:	bf00      	nop
 8023d30:	371c      	adds	r7, #28
 8023d32:	46bd      	mov	sp, r7
 8023d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d38:	4770      	bx	lr

08023d3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8023d3a:	b480      	push	{r7}
 8023d3c:	b087      	sub	sp, #28
 8023d3e:	af00      	add	r7, sp, #0
 8023d40:	60f8      	str	r0, [r7, #12]
 8023d42:	60b9      	str	r1, [r7, #8]
 8023d44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8023d46:	68fb      	ldr	r3, [r7, #12]
 8023d48:	6a1b      	ldr	r3, [r3, #32]
 8023d4a:	f023 0210 	bic.w	r2, r3, #16
 8023d4e:	68fb      	ldr	r3, [r7, #12]
 8023d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8023d52:	68fb      	ldr	r3, [r7, #12]
 8023d54:	699b      	ldr	r3, [r3, #24]
 8023d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8023d58:	68fb      	ldr	r3, [r7, #12]
 8023d5a:	6a1b      	ldr	r3, [r3, #32]
 8023d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8023d5e:	697b      	ldr	r3, [r7, #20]
 8023d60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8023d64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8023d66:	687b      	ldr	r3, [r7, #4]
 8023d68:	031b      	lsls	r3, r3, #12
 8023d6a:	697a      	ldr	r2, [r7, #20]
 8023d6c:	4313      	orrs	r3, r2
 8023d6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8023d70:	693b      	ldr	r3, [r7, #16]
 8023d72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8023d76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8023d78:	68bb      	ldr	r3, [r7, #8]
 8023d7a:	011b      	lsls	r3, r3, #4
 8023d7c:	693a      	ldr	r2, [r7, #16]
 8023d7e:	4313      	orrs	r3, r2
 8023d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8023d82:	68fb      	ldr	r3, [r7, #12]
 8023d84:	697a      	ldr	r2, [r7, #20]
 8023d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8023d88:	68fb      	ldr	r3, [r7, #12]
 8023d8a:	693a      	ldr	r2, [r7, #16]
 8023d8c:	621a      	str	r2, [r3, #32]
}
 8023d8e:	bf00      	nop
 8023d90:	371c      	adds	r7, #28
 8023d92:	46bd      	mov	sp, r7
 8023d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d98:	4770      	bx	lr

08023d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8023d9a:	b480      	push	{r7}
 8023d9c:	b085      	sub	sp, #20
 8023d9e:	af00      	add	r7, sp, #0
 8023da0:	6078      	str	r0, [r7, #4]
 8023da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8023da4:	687b      	ldr	r3, [r7, #4]
 8023da6:	689b      	ldr	r3, [r3, #8]
 8023da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8023daa:	68fb      	ldr	r3, [r7, #12]
 8023dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8023db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8023db2:	683a      	ldr	r2, [r7, #0]
 8023db4:	68fb      	ldr	r3, [r7, #12]
 8023db6:	4313      	orrs	r3, r2
 8023db8:	f043 0307 	orr.w	r3, r3, #7
 8023dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8023dbe:	687b      	ldr	r3, [r7, #4]
 8023dc0:	68fa      	ldr	r2, [r7, #12]
 8023dc2:	609a      	str	r2, [r3, #8]
}
 8023dc4:	bf00      	nop
 8023dc6:	3714      	adds	r7, #20
 8023dc8:	46bd      	mov	sp, r7
 8023dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dce:	4770      	bx	lr

08023dd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8023dd0:	b480      	push	{r7}
 8023dd2:	b087      	sub	sp, #28
 8023dd4:	af00      	add	r7, sp, #0
 8023dd6:	60f8      	str	r0, [r7, #12]
 8023dd8:	60b9      	str	r1, [r7, #8]
 8023dda:	607a      	str	r2, [r7, #4]
 8023ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8023dde:	68fb      	ldr	r3, [r7, #12]
 8023de0:	689b      	ldr	r3, [r3, #8]
 8023de2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8023de4:	697b      	ldr	r3, [r7, #20]
 8023de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8023dea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8023dec:	683b      	ldr	r3, [r7, #0]
 8023dee:	021a      	lsls	r2, r3, #8
 8023df0:	687b      	ldr	r3, [r7, #4]
 8023df2:	431a      	orrs	r2, r3
 8023df4:	68bb      	ldr	r3, [r7, #8]
 8023df6:	4313      	orrs	r3, r2
 8023df8:	697a      	ldr	r2, [r7, #20]
 8023dfa:	4313      	orrs	r3, r2
 8023dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8023dfe:	68fb      	ldr	r3, [r7, #12]
 8023e00:	697a      	ldr	r2, [r7, #20]
 8023e02:	609a      	str	r2, [r3, #8]
}
 8023e04:	bf00      	nop
 8023e06:	371c      	adds	r7, #28
 8023e08:	46bd      	mov	sp, r7
 8023e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e0e:	4770      	bx	lr

08023e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8023e10:	b480      	push	{r7}
 8023e12:	b085      	sub	sp, #20
 8023e14:	af00      	add	r7, sp, #0
 8023e16:	6078      	str	r0, [r7, #4]
 8023e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8023e1a:	687b      	ldr	r3, [r7, #4]
 8023e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023e20:	2b01      	cmp	r3, #1
 8023e22:	d101      	bne.n	8023e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8023e24:	2302      	movs	r3, #2
 8023e26:	e05a      	b.n	8023ede <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8023e28:	687b      	ldr	r3, [r7, #4]
 8023e2a:	2201      	movs	r2, #1
 8023e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8023e30:	687b      	ldr	r3, [r7, #4]
 8023e32:	2202      	movs	r2, #2
 8023e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8023e38:	687b      	ldr	r3, [r7, #4]
 8023e3a:	681b      	ldr	r3, [r3, #0]
 8023e3c:	685b      	ldr	r3, [r3, #4]
 8023e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8023e40:	687b      	ldr	r3, [r7, #4]
 8023e42:	681b      	ldr	r3, [r3, #0]
 8023e44:	689b      	ldr	r3, [r3, #8]
 8023e46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8023e48:	68fb      	ldr	r3, [r7, #12]
 8023e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8023e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8023e50:	683b      	ldr	r3, [r7, #0]
 8023e52:	681b      	ldr	r3, [r3, #0]
 8023e54:	68fa      	ldr	r2, [r7, #12]
 8023e56:	4313      	orrs	r3, r2
 8023e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8023e5a:	687b      	ldr	r3, [r7, #4]
 8023e5c:	681b      	ldr	r3, [r3, #0]
 8023e5e:	68fa      	ldr	r2, [r7, #12]
 8023e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8023e62:	687b      	ldr	r3, [r7, #4]
 8023e64:	681b      	ldr	r3, [r3, #0]
 8023e66:	4a21      	ldr	r2, [pc, #132]	; (8023eec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8023e68:	4293      	cmp	r3, r2
 8023e6a:	d022      	beq.n	8023eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8023e6c:	687b      	ldr	r3, [r7, #4]
 8023e6e:	681b      	ldr	r3, [r3, #0]
 8023e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023e74:	d01d      	beq.n	8023eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8023e76:	687b      	ldr	r3, [r7, #4]
 8023e78:	681b      	ldr	r3, [r3, #0]
 8023e7a:	4a1d      	ldr	r2, [pc, #116]	; (8023ef0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8023e7c:	4293      	cmp	r3, r2
 8023e7e:	d018      	beq.n	8023eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8023e80:	687b      	ldr	r3, [r7, #4]
 8023e82:	681b      	ldr	r3, [r3, #0]
 8023e84:	4a1b      	ldr	r2, [pc, #108]	; (8023ef4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8023e86:	4293      	cmp	r3, r2
 8023e88:	d013      	beq.n	8023eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8023e8a:	687b      	ldr	r3, [r7, #4]
 8023e8c:	681b      	ldr	r3, [r3, #0]
 8023e8e:	4a1a      	ldr	r2, [pc, #104]	; (8023ef8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8023e90:	4293      	cmp	r3, r2
 8023e92:	d00e      	beq.n	8023eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8023e94:	687b      	ldr	r3, [r7, #4]
 8023e96:	681b      	ldr	r3, [r3, #0]
 8023e98:	4a18      	ldr	r2, [pc, #96]	; (8023efc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8023e9a:	4293      	cmp	r3, r2
 8023e9c:	d009      	beq.n	8023eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8023e9e:	687b      	ldr	r3, [r7, #4]
 8023ea0:	681b      	ldr	r3, [r3, #0]
 8023ea2:	4a17      	ldr	r2, [pc, #92]	; (8023f00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8023ea4:	4293      	cmp	r3, r2
 8023ea6:	d004      	beq.n	8023eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8023ea8:	687b      	ldr	r3, [r7, #4]
 8023eaa:	681b      	ldr	r3, [r3, #0]
 8023eac:	4a15      	ldr	r2, [pc, #84]	; (8023f04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8023eae:	4293      	cmp	r3, r2
 8023eb0:	d10c      	bne.n	8023ecc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8023eb2:	68bb      	ldr	r3, [r7, #8]
 8023eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8023eb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8023eba:	683b      	ldr	r3, [r7, #0]
 8023ebc:	685b      	ldr	r3, [r3, #4]
 8023ebe:	68ba      	ldr	r2, [r7, #8]
 8023ec0:	4313      	orrs	r3, r2
 8023ec2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8023ec4:	687b      	ldr	r3, [r7, #4]
 8023ec6:	681b      	ldr	r3, [r3, #0]
 8023ec8:	68ba      	ldr	r2, [r7, #8]
 8023eca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8023ecc:	687b      	ldr	r3, [r7, #4]
 8023ece:	2201      	movs	r2, #1
 8023ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8023ed4:	687b      	ldr	r3, [r7, #4]
 8023ed6:	2200      	movs	r2, #0
 8023ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8023edc:	2300      	movs	r3, #0
}
 8023ede:	4618      	mov	r0, r3
 8023ee0:	3714      	adds	r7, #20
 8023ee2:	46bd      	mov	sp, r7
 8023ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ee8:	4770      	bx	lr
 8023eea:	bf00      	nop
 8023eec:	40010000 	.word	0x40010000
 8023ef0:	40000400 	.word	0x40000400
 8023ef4:	40000800 	.word	0x40000800
 8023ef8:	40000c00 	.word	0x40000c00
 8023efc:	40010400 	.word	0x40010400
 8023f00:	40014000 	.word	0x40014000
 8023f04:	40001800 	.word	0x40001800

08023f08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8023f08:	b480      	push	{r7}
 8023f0a:	b085      	sub	sp, #20
 8023f0c:	af00      	add	r7, sp, #0
 8023f0e:	6078      	str	r0, [r7, #4]
 8023f10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8023f12:	2300      	movs	r3, #0
 8023f14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8023f16:	687b      	ldr	r3, [r7, #4]
 8023f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023f1c:	2b01      	cmp	r3, #1
 8023f1e:	d101      	bne.n	8023f24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8023f20:	2302      	movs	r3, #2
 8023f22:	e03d      	b.n	8023fa0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8023f24:	687b      	ldr	r3, [r7, #4]
 8023f26:	2201      	movs	r2, #1
 8023f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8023f2c:	68fb      	ldr	r3, [r7, #12]
 8023f2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8023f32:	683b      	ldr	r3, [r7, #0]
 8023f34:	68db      	ldr	r3, [r3, #12]
 8023f36:	4313      	orrs	r3, r2
 8023f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8023f3a:	68fb      	ldr	r3, [r7, #12]
 8023f3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8023f40:	683b      	ldr	r3, [r7, #0]
 8023f42:	689b      	ldr	r3, [r3, #8]
 8023f44:	4313      	orrs	r3, r2
 8023f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8023f48:	68fb      	ldr	r3, [r7, #12]
 8023f4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8023f4e:	683b      	ldr	r3, [r7, #0]
 8023f50:	685b      	ldr	r3, [r3, #4]
 8023f52:	4313      	orrs	r3, r2
 8023f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8023f56:	68fb      	ldr	r3, [r7, #12]
 8023f58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8023f5c:	683b      	ldr	r3, [r7, #0]
 8023f5e:	681b      	ldr	r3, [r3, #0]
 8023f60:	4313      	orrs	r3, r2
 8023f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8023f64:	68fb      	ldr	r3, [r7, #12]
 8023f66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8023f6a:	683b      	ldr	r3, [r7, #0]
 8023f6c:	691b      	ldr	r3, [r3, #16]
 8023f6e:	4313      	orrs	r3, r2
 8023f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8023f72:	68fb      	ldr	r3, [r7, #12]
 8023f74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8023f78:	683b      	ldr	r3, [r7, #0]
 8023f7a:	695b      	ldr	r3, [r3, #20]
 8023f7c:	4313      	orrs	r3, r2
 8023f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8023f80:	68fb      	ldr	r3, [r7, #12]
 8023f82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8023f86:	683b      	ldr	r3, [r7, #0]
 8023f88:	69db      	ldr	r3, [r3, #28]
 8023f8a:	4313      	orrs	r3, r2
 8023f8c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8023f8e:	687b      	ldr	r3, [r7, #4]
 8023f90:	681b      	ldr	r3, [r3, #0]
 8023f92:	68fa      	ldr	r2, [r7, #12]
 8023f94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8023f96:	687b      	ldr	r3, [r7, #4]
 8023f98:	2200      	movs	r2, #0
 8023f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8023f9e:	2300      	movs	r3, #0
}
 8023fa0:	4618      	mov	r0, r3
 8023fa2:	3714      	adds	r7, #20
 8023fa4:	46bd      	mov	sp, r7
 8023fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023faa:	4770      	bx	lr

08023fac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8023fac:	b480      	push	{r7}
 8023fae:	b083      	sub	sp, #12
 8023fb0:	af00      	add	r7, sp, #0
 8023fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8023fb4:	bf00      	nop
 8023fb6:	370c      	adds	r7, #12
 8023fb8:	46bd      	mov	sp, r7
 8023fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fbe:	4770      	bx	lr

08023fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8023fc0:	b480      	push	{r7}
 8023fc2:	b083      	sub	sp, #12
 8023fc4:	af00      	add	r7, sp, #0
 8023fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8023fc8:	bf00      	nop
 8023fca:	370c      	adds	r7, #12
 8023fcc:	46bd      	mov	sp, r7
 8023fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fd2:	4770      	bx	lr

08023fd4 <__libc_init_array>:
 8023fd4:	b570      	push	{r4, r5, r6, lr}
 8023fd6:	4e0d      	ldr	r6, [pc, #52]	; (802400c <__libc_init_array+0x38>)
 8023fd8:	4c0d      	ldr	r4, [pc, #52]	; (8024010 <__libc_init_array+0x3c>)
 8023fda:	1ba4      	subs	r4, r4, r6
 8023fdc:	10a4      	asrs	r4, r4, #2
 8023fde:	2500      	movs	r5, #0
 8023fe0:	42a5      	cmp	r5, r4
 8023fe2:	d109      	bne.n	8023ff8 <__libc_init_array+0x24>
 8023fe4:	4e0b      	ldr	r6, [pc, #44]	; (8024014 <__libc_init_array+0x40>)
 8023fe6:	4c0c      	ldr	r4, [pc, #48]	; (8024018 <__libc_init_array+0x44>)
 8023fe8:	f000 f820 	bl	802402c <_init>
 8023fec:	1ba4      	subs	r4, r4, r6
 8023fee:	10a4      	asrs	r4, r4, #2
 8023ff0:	2500      	movs	r5, #0
 8023ff2:	42a5      	cmp	r5, r4
 8023ff4:	d105      	bne.n	8024002 <__libc_init_array+0x2e>
 8023ff6:	bd70      	pop	{r4, r5, r6, pc}
 8023ff8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8023ffc:	4798      	blx	r3
 8023ffe:	3501      	adds	r5, #1
 8024000:	e7ee      	b.n	8023fe0 <__libc_init_array+0xc>
 8024002:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024006:	4798      	blx	r3
 8024008:	3501      	adds	r5, #1
 802400a:	e7f2      	b.n	8023ff2 <__libc_init_array+0x1e>
 802400c:	08024064 	.word	0x08024064
 8024010:	08024064 	.word	0x08024064
 8024014:	08024064 	.word	0x08024064
 8024018:	0802406c 	.word	0x0802406c

0802401c <memset>:
 802401c:	4402      	add	r2, r0
 802401e:	4603      	mov	r3, r0
 8024020:	4293      	cmp	r3, r2
 8024022:	d100      	bne.n	8024026 <memset+0xa>
 8024024:	4770      	bx	lr
 8024026:	f803 1b01 	strb.w	r1, [r3], #1
 802402a:	e7f9      	b.n	8024020 <memset+0x4>

0802402c <_init>:
 802402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802402e:	bf00      	nop
 8024030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024032:	bc08      	pop	{r3}
 8024034:	469e      	mov	lr, r3
 8024036:	4770      	bx	lr

08024038 <_fini>:
 8024038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802403a:	bf00      	nop
 802403c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802403e:	bc08      	pop	{r3}
 8024040:	469e      	mov	lr, r3
 8024042:	4770      	bx	lr
