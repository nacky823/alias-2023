
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3a4  08020000  08020000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0802a3a4  0802a3a4  0002a3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a3c4  0802a3c4  0003001c  2**0
                  CONTENTS
  4 .ARM          00000008  0802a3c4  0802a3c4  0002a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a3cc  0802a3cc  0003001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a3cc  0802a3cc  0002a3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a3d4  0802a3d4  0002a3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0802a3d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b68  20000020  0802a3f4  00030020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b88  0802a3f4  00030b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000230cb  00000000  00000000  0003004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e93  00000000  00000000  00053117  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001538  00000000  00000000  00056fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b0  00000000  00000000  000584e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024d24  00000000  00000000  00059898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013992  00000000  00000000  0007e5bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca9e9  00000000  00000000  00091f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c937  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a4c  00000000  00000000  0015c9b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	20000020 	.word	0x20000020
 802001c:	00000000 	.word	0x00000000
 8020020:	0802a38c 	.word	0x0802a38c

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	20000024 	.word	0x20000024
 802003c:	0802a38c 	.word	0x0802a38c

08020040 <__aeabi_drsub>:
 8020040:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020044:	e002      	b.n	802004c <__adddf3>
 8020046:	bf00      	nop

08020048 <__aeabi_dsub>:
 8020048:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802004c <__adddf3>:
 802004c:	b530      	push	{r4, r5, lr}
 802004e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020052:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020056:	ea94 0f05 	teq	r4, r5
 802005a:	bf08      	it	eq
 802005c:	ea90 0f02 	teqeq	r0, r2
 8020060:	bf1f      	itttt	ne
 8020062:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020066:	ea55 0c02 	orrsne.w	ip, r5, r2
 802006a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802006e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020072:	f000 80e2 	beq.w	802023a <__adddf3+0x1ee>
 8020076:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802007a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802007e:	bfb8      	it	lt
 8020080:	426d      	neglt	r5, r5
 8020082:	dd0c      	ble.n	802009e <__adddf3+0x52>
 8020084:	442c      	add	r4, r5
 8020086:	ea80 0202 	eor.w	r2, r0, r2
 802008a:	ea81 0303 	eor.w	r3, r1, r3
 802008e:	ea82 0000 	eor.w	r0, r2, r0
 8020092:	ea83 0101 	eor.w	r1, r3, r1
 8020096:	ea80 0202 	eor.w	r2, r0, r2
 802009a:	ea81 0303 	eor.w	r3, r1, r3
 802009e:	2d36      	cmp	r5, #54	; 0x36
 80200a0:	bf88      	it	hi
 80200a2:	bd30      	pophi	{r4, r5, pc}
 80200a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80200a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80200ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80200b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80200b4:	d002      	beq.n	80200bc <__adddf3+0x70>
 80200b6:	4240      	negs	r0, r0
 80200b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80200bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80200c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80200c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80200c8:	d002      	beq.n	80200d0 <__adddf3+0x84>
 80200ca:	4252      	negs	r2, r2
 80200cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80200d0:	ea94 0f05 	teq	r4, r5
 80200d4:	f000 80a7 	beq.w	8020226 <__adddf3+0x1da>
 80200d8:	f1a4 0401 	sub.w	r4, r4, #1
 80200dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80200e0:	db0d      	blt.n	80200fe <__adddf3+0xb2>
 80200e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80200e6:	fa22 f205 	lsr.w	r2, r2, r5
 80200ea:	1880      	adds	r0, r0, r2
 80200ec:	f141 0100 	adc.w	r1, r1, #0
 80200f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80200f4:	1880      	adds	r0, r0, r2
 80200f6:	fa43 f305 	asr.w	r3, r3, r5
 80200fa:	4159      	adcs	r1, r3
 80200fc:	e00e      	b.n	802011c <__adddf3+0xd0>
 80200fe:	f1a5 0520 	sub.w	r5, r5, #32
 8020102:	f10e 0e20 	add.w	lr, lr, #32
 8020106:	2a01      	cmp	r2, #1
 8020108:	fa03 fc0e 	lsl.w	ip, r3, lr
 802010c:	bf28      	it	cs
 802010e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020112:	fa43 f305 	asr.w	r3, r3, r5
 8020116:	18c0      	adds	r0, r0, r3
 8020118:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802011c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020120:	d507      	bpl.n	8020132 <__adddf3+0xe6>
 8020122:	f04f 0e00 	mov.w	lr, #0
 8020126:	f1dc 0c00 	rsbs	ip, ip, #0
 802012a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802012e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020132:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020136:	d31b      	bcc.n	8020170 <__adddf3+0x124>
 8020138:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802013c:	d30c      	bcc.n	8020158 <__adddf3+0x10c>
 802013e:	0849      	lsrs	r1, r1, #1
 8020140:	ea5f 0030 	movs.w	r0, r0, rrx
 8020144:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020148:	f104 0401 	add.w	r4, r4, #1
 802014c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020150:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020154:	f080 809a 	bcs.w	802028c <__adddf3+0x240>
 8020158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802015c:	bf08      	it	eq
 802015e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020162:	f150 0000 	adcs.w	r0, r0, #0
 8020166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802016a:	ea41 0105 	orr.w	r1, r1, r5
 802016e:	bd30      	pop	{r4, r5, pc}
 8020170:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020174:	4140      	adcs	r0, r0
 8020176:	eb41 0101 	adc.w	r1, r1, r1
 802017a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802017e:	f1a4 0401 	sub.w	r4, r4, #1
 8020182:	d1e9      	bne.n	8020158 <__adddf3+0x10c>
 8020184:	f091 0f00 	teq	r1, #0
 8020188:	bf04      	itt	eq
 802018a:	4601      	moveq	r1, r0
 802018c:	2000      	moveq	r0, #0
 802018e:	fab1 f381 	clz	r3, r1
 8020192:	bf08      	it	eq
 8020194:	3320      	addeq	r3, #32
 8020196:	f1a3 030b 	sub.w	r3, r3, #11
 802019a:	f1b3 0220 	subs.w	r2, r3, #32
 802019e:	da0c      	bge.n	80201ba <__adddf3+0x16e>
 80201a0:	320c      	adds	r2, #12
 80201a2:	dd08      	ble.n	80201b6 <__adddf3+0x16a>
 80201a4:	f102 0c14 	add.w	ip, r2, #20
 80201a8:	f1c2 020c 	rsb	r2, r2, #12
 80201ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80201b0:	fa21 f102 	lsr.w	r1, r1, r2
 80201b4:	e00c      	b.n	80201d0 <__adddf3+0x184>
 80201b6:	f102 0214 	add.w	r2, r2, #20
 80201ba:	bfd8      	it	le
 80201bc:	f1c2 0c20 	rsble	ip, r2, #32
 80201c0:	fa01 f102 	lsl.w	r1, r1, r2
 80201c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80201c8:	bfdc      	itt	le
 80201ca:	ea41 010c 	orrle.w	r1, r1, ip
 80201ce:	4090      	lslle	r0, r2
 80201d0:	1ae4      	subs	r4, r4, r3
 80201d2:	bfa2      	ittt	ge
 80201d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80201d8:	4329      	orrge	r1, r5
 80201da:	bd30      	popge	{r4, r5, pc}
 80201dc:	ea6f 0404 	mvn.w	r4, r4
 80201e0:	3c1f      	subs	r4, #31
 80201e2:	da1c      	bge.n	802021e <__adddf3+0x1d2>
 80201e4:	340c      	adds	r4, #12
 80201e6:	dc0e      	bgt.n	8020206 <__adddf3+0x1ba>
 80201e8:	f104 0414 	add.w	r4, r4, #20
 80201ec:	f1c4 0220 	rsb	r2, r4, #32
 80201f0:	fa20 f004 	lsr.w	r0, r0, r4
 80201f4:	fa01 f302 	lsl.w	r3, r1, r2
 80201f8:	ea40 0003 	orr.w	r0, r0, r3
 80201fc:	fa21 f304 	lsr.w	r3, r1, r4
 8020200:	ea45 0103 	orr.w	r1, r5, r3
 8020204:	bd30      	pop	{r4, r5, pc}
 8020206:	f1c4 040c 	rsb	r4, r4, #12
 802020a:	f1c4 0220 	rsb	r2, r4, #32
 802020e:	fa20 f002 	lsr.w	r0, r0, r2
 8020212:	fa01 f304 	lsl.w	r3, r1, r4
 8020216:	ea40 0003 	orr.w	r0, r0, r3
 802021a:	4629      	mov	r1, r5
 802021c:	bd30      	pop	{r4, r5, pc}
 802021e:	fa21 f004 	lsr.w	r0, r1, r4
 8020222:	4629      	mov	r1, r5
 8020224:	bd30      	pop	{r4, r5, pc}
 8020226:	f094 0f00 	teq	r4, #0
 802022a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802022e:	bf06      	itte	eq
 8020230:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020234:	3401      	addeq	r4, #1
 8020236:	3d01      	subne	r5, #1
 8020238:	e74e      	b.n	80200d8 <__adddf3+0x8c>
 802023a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802023e:	bf18      	it	ne
 8020240:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020244:	d029      	beq.n	802029a <__adddf3+0x24e>
 8020246:	ea94 0f05 	teq	r4, r5
 802024a:	bf08      	it	eq
 802024c:	ea90 0f02 	teqeq	r0, r2
 8020250:	d005      	beq.n	802025e <__adddf3+0x212>
 8020252:	ea54 0c00 	orrs.w	ip, r4, r0
 8020256:	bf04      	itt	eq
 8020258:	4619      	moveq	r1, r3
 802025a:	4610      	moveq	r0, r2
 802025c:	bd30      	pop	{r4, r5, pc}
 802025e:	ea91 0f03 	teq	r1, r3
 8020262:	bf1e      	ittt	ne
 8020264:	2100      	movne	r1, #0
 8020266:	2000      	movne	r0, #0
 8020268:	bd30      	popne	{r4, r5, pc}
 802026a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802026e:	d105      	bne.n	802027c <__adddf3+0x230>
 8020270:	0040      	lsls	r0, r0, #1
 8020272:	4149      	adcs	r1, r1
 8020274:	bf28      	it	cs
 8020276:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802027a:	bd30      	pop	{r4, r5, pc}
 802027c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020280:	bf3c      	itt	cc
 8020282:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020286:	bd30      	popcc	{r4, r5, pc}
 8020288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802028c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020290:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020294:	f04f 0000 	mov.w	r0, #0
 8020298:	bd30      	pop	{r4, r5, pc}
 802029a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802029e:	bf1a      	itte	ne
 80202a0:	4619      	movne	r1, r3
 80202a2:	4610      	movne	r0, r2
 80202a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80202a8:	bf1c      	itt	ne
 80202aa:	460b      	movne	r3, r1
 80202ac:	4602      	movne	r2, r0
 80202ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80202b2:	bf06      	itte	eq
 80202b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80202b8:	ea91 0f03 	teqeq	r1, r3
 80202bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80202c0:	bd30      	pop	{r4, r5, pc}
 80202c2:	bf00      	nop

080202c4 <__aeabi_ui2d>:
 80202c4:	f090 0f00 	teq	r0, #0
 80202c8:	bf04      	itt	eq
 80202ca:	2100      	moveq	r1, #0
 80202cc:	4770      	bxeq	lr
 80202ce:	b530      	push	{r4, r5, lr}
 80202d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202d8:	f04f 0500 	mov.w	r5, #0
 80202dc:	f04f 0100 	mov.w	r1, #0
 80202e0:	e750      	b.n	8020184 <__adddf3+0x138>
 80202e2:	bf00      	nop

080202e4 <__aeabi_i2d>:
 80202e4:	f090 0f00 	teq	r0, #0
 80202e8:	bf04      	itt	eq
 80202ea:	2100      	moveq	r1, #0
 80202ec:	4770      	bxeq	lr
 80202ee:	b530      	push	{r4, r5, lr}
 80202f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80202fc:	bf48      	it	mi
 80202fe:	4240      	negmi	r0, r0
 8020300:	f04f 0100 	mov.w	r1, #0
 8020304:	e73e      	b.n	8020184 <__adddf3+0x138>
 8020306:	bf00      	nop

08020308 <__aeabi_f2d>:
 8020308:	0042      	lsls	r2, r0, #1
 802030a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802030e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020312:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020316:	bf1f      	itttt	ne
 8020318:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802031c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020320:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020324:	4770      	bxne	lr
 8020326:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802032a:	bf08      	it	eq
 802032c:	4770      	bxeq	lr
 802032e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020332:	bf04      	itt	eq
 8020334:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020338:	4770      	bxeq	lr
 802033a:	b530      	push	{r4, r5, lr}
 802033c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020344:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020348:	e71c      	b.n	8020184 <__adddf3+0x138>
 802034a:	bf00      	nop

0802034c <__aeabi_ul2d>:
 802034c:	ea50 0201 	orrs.w	r2, r0, r1
 8020350:	bf08      	it	eq
 8020352:	4770      	bxeq	lr
 8020354:	b530      	push	{r4, r5, lr}
 8020356:	f04f 0500 	mov.w	r5, #0
 802035a:	e00a      	b.n	8020372 <__aeabi_l2d+0x16>

0802035c <__aeabi_l2d>:
 802035c:	ea50 0201 	orrs.w	r2, r0, r1
 8020360:	bf08      	it	eq
 8020362:	4770      	bxeq	lr
 8020364:	b530      	push	{r4, r5, lr}
 8020366:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802036a:	d502      	bpl.n	8020372 <__aeabi_l2d+0x16>
 802036c:	4240      	negs	r0, r0
 802036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020372:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020376:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802037a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802037e:	f43f aed8 	beq.w	8020132 <__adddf3+0xe6>
 8020382:	f04f 0203 	mov.w	r2, #3
 8020386:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802038a:	bf18      	it	ne
 802038c:	3203      	addne	r2, #3
 802038e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020392:	bf18      	it	ne
 8020394:	3203      	addne	r2, #3
 8020396:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802039a:	f1c2 0320 	rsb	r3, r2, #32
 802039e:	fa00 fc03 	lsl.w	ip, r0, r3
 80203a2:	fa20 f002 	lsr.w	r0, r0, r2
 80203a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80203aa:	ea40 000e 	orr.w	r0, r0, lr
 80203ae:	fa21 f102 	lsr.w	r1, r1, r2
 80203b2:	4414      	add	r4, r2
 80203b4:	e6bd      	b.n	8020132 <__adddf3+0xe6>
 80203b6:	bf00      	nop

080203b8 <__aeabi_dmul>:
 80203b8:	b570      	push	{r4, r5, r6, lr}
 80203ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80203be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80203c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80203c6:	bf1d      	ittte	ne
 80203c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80203cc:	ea94 0f0c 	teqne	r4, ip
 80203d0:	ea95 0f0c 	teqne	r5, ip
 80203d4:	f000 f8de 	bleq	8020594 <__aeabi_dmul+0x1dc>
 80203d8:	442c      	add	r4, r5
 80203da:	ea81 0603 	eor.w	r6, r1, r3
 80203de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80203e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80203e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80203ea:	bf18      	it	ne
 80203ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80203f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80203f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80203f8:	d038      	beq.n	802046c <__aeabi_dmul+0xb4>
 80203fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80203fe:	f04f 0500 	mov.w	r5, #0
 8020402:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020406:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802040a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802040e:	f04f 0600 	mov.w	r6, #0
 8020412:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020416:	f09c 0f00 	teq	ip, #0
 802041a:	bf18      	it	ne
 802041c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020420:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020424:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020428:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802042c:	d204      	bcs.n	8020438 <__aeabi_dmul+0x80>
 802042e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020432:	416d      	adcs	r5, r5
 8020434:	eb46 0606 	adc.w	r6, r6, r6
 8020438:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802043c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020440:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020444:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020448:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802044c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020450:	bf88      	it	hi
 8020452:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020456:	d81e      	bhi.n	8020496 <__aeabi_dmul+0xde>
 8020458:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802045c:	bf08      	it	eq
 802045e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020462:	f150 0000 	adcs.w	r0, r0, #0
 8020466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802046a:	bd70      	pop	{r4, r5, r6, pc}
 802046c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020470:	ea46 0101 	orr.w	r1, r6, r1
 8020474:	ea40 0002 	orr.w	r0, r0, r2
 8020478:	ea81 0103 	eor.w	r1, r1, r3
 802047c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020480:	bfc2      	ittt	gt
 8020482:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020486:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802048a:	bd70      	popgt	{r4, r5, r6, pc}
 802048c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020490:	f04f 0e00 	mov.w	lr, #0
 8020494:	3c01      	subs	r4, #1
 8020496:	f300 80ab 	bgt.w	80205f0 <__aeabi_dmul+0x238>
 802049a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802049e:	bfde      	ittt	le
 80204a0:	2000      	movle	r0, #0
 80204a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80204a6:	bd70      	pople	{r4, r5, r6, pc}
 80204a8:	f1c4 0400 	rsb	r4, r4, #0
 80204ac:	3c20      	subs	r4, #32
 80204ae:	da35      	bge.n	802051c <__aeabi_dmul+0x164>
 80204b0:	340c      	adds	r4, #12
 80204b2:	dc1b      	bgt.n	80204ec <__aeabi_dmul+0x134>
 80204b4:	f104 0414 	add.w	r4, r4, #20
 80204b8:	f1c4 0520 	rsb	r5, r4, #32
 80204bc:	fa00 f305 	lsl.w	r3, r0, r5
 80204c0:	fa20 f004 	lsr.w	r0, r0, r4
 80204c4:	fa01 f205 	lsl.w	r2, r1, r5
 80204c8:	ea40 0002 	orr.w	r0, r0, r2
 80204cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80204d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80204d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80204d8:	fa21 f604 	lsr.w	r6, r1, r4
 80204dc:	eb42 0106 	adc.w	r1, r2, r6
 80204e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80204e4:	bf08      	it	eq
 80204e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80204ea:	bd70      	pop	{r4, r5, r6, pc}
 80204ec:	f1c4 040c 	rsb	r4, r4, #12
 80204f0:	f1c4 0520 	rsb	r5, r4, #32
 80204f4:	fa00 f304 	lsl.w	r3, r0, r4
 80204f8:	fa20 f005 	lsr.w	r0, r0, r5
 80204fc:	fa01 f204 	lsl.w	r2, r1, r4
 8020500:	ea40 0002 	orr.w	r0, r0, r2
 8020504:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020508:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802050c:	f141 0100 	adc.w	r1, r1, #0
 8020510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020514:	bf08      	it	eq
 8020516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802051a:	bd70      	pop	{r4, r5, r6, pc}
 802051c:	f1c4 0520 	rsb	r5, r4, #32
 8020520:	fa00 f205 	lsl.w	r2, r0, r5
 8020524:	ea4e 0e02 	orr.w	lr, lr, r2
 8020528:	fa20 f304 	lsr.w	r3, r0, r4
 802052c:	fa01 f205 	lsl.w	r2, r1, r5
 8020530:	ea43 0302 	orr.w	r3, r3, r2
 8020534:	fa21 f004 	lsr.w	r0, r1, r4
 8020538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802053c:	fa21 f204 	lsr.w	r2, r1, r4
 8020540:	ea20 0002 	bic.w	r0, r0, r2
 8020544:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802054c:	bf08      	it	eq
 802054e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020552:	bd70      	pop	{r4, r5, r6, pc}
 8020554:	f094 0f00 	teq	r4, #0
 8020558:	d10f      	bne.n	802057a <__aeabi_dmul+0x1c2>
 802055a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802055e:	0040      	lsls	r0, r0, #1
 8020560:	eb41 0101 	adc.w	r1, r1, r1
 8020564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020568:	bf08      	it	eq
 802056a:	3c01      	subeq	r4, #1
 802056c:	d0f7      	beq.n	802055e <__aeabi_dmul+0x1a6>
 802056e:	ea41 0106 	orr.w	r1, r1, r6
 8020572:	f095 0f00 	teq	r5, #0
 8020576:	bf18      	it	ne
 8020578:	4770      	bxne	lr
 802057a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802057e:	0052      	lsls	r2, r2, #1
 8020580:	eb43 0303 	adc.w	r3, r3, r3
 8020584:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020588:	bf08      	it	eq
 802058a:	3d01      	subeq	r5, #1
 802058c:	d0f7      	beq.n	802057e <__aeabi_dmul+0x1c6>
 802058e:	ea43 0306 	orr.w	r3, r3, r6
 8020592:	4770      	bx	lr
 8020594:	ea94 0f0c 	teq	r4, ip
 8020598:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802059c:	bf18      	it	ne
 802059e:	ea95 0f0c 	teqne	r5, ip
 80205a2:	d00c      	beq.n	80205be <__aeabi_dmul+0x206>
 80205a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205a8:	bf18      	it	ne
 80205aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205ae:	d1d1      	bne.n	8020554 <__aeabi_dmul+0x19c>
 80205b0:	ea81 0103 	eor.w	r1, r1, r3
 80205b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205b8:	f04f 0000 	mov.w	r0, #0
 80205bc:	bd70      	pop	{r4, r5, r6, pc}
 80205be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205c2:	bf06      	itte	eq
 80205c4:	4610      	moveq	r0, r2
 80205c6:	4619      	moveq	r1, r3
 80205c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205cc:	d019      	beq.n	8020602 <__aeabi_dmul+0x24a>
 80205ce:	ea94 0f0c 	teq	r4, ip
 80205d2:	d102      	bne.n	80205da <__aeabi_dmul+0x222>
 80205d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80205d8:	d113      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205da:	ea95 0f0c 	teq	r5, ip
 80205de:	d105      	bne.n	80205ec <__aeabi_dmul+0x234>
 80205e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80205e4:	bf1c      	itt	ne
 80205e6:	4610      	movne	r0, r2
 80205e8:	4619      	movne	r1, r3
 80205ea:	d10a      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205ec:	ea81 0103 	eor.w	r1, r1, r3
 80205f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80205f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80205fc:	f04f 0000 	mov.w	r0, #0
 8020600:	bd70      	pop	{r4, r5, r6, pc}
 8020602:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020606:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802060a:	bd70      	pop	{r4, r5, r6, pc}

0802060c <__aeabi_ddiv>:
 802060c:	b570      	push	{r4, r5, r6, lr}
 802060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802061a:	bf1d      	ittte	ne
 802061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020620:	ea94 0f0c 	teqne	r4, ip
 8020624:	ea95 0f0c 	teqne	r5, ip
 8020628:	f000 f8a7 	bleq	802077a <__aeabi_ddiv+0x16e>
 802062c:	eba4 0405 	sub.w	r4, r4, r5
 8020630:	ea81 0e03 	eor.w	lr, r1, r3
 8020634:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802063c:	f000 8088 	beq.w	8020750 <__aeabi_ddiv+0x144>
 8020640:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020644:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020648:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802064c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020650:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020654:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020658:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802065c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020660:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020664:	429d      	cmp	r5, r3
 8020666:	bf08      	it	eq
 8020668:	4296      	cmpeq	r6, r2
 802066a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802066e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020672:	d202      	bcs.n	802067a <__aeabi_ddiv+0x6e>
 8020674:	085b      	lsrs	r3, r3, #1
 8020676:	ea4f 0232 	mov.w	r2, r2, rrx
 802067a:	1ab6      	subs	r6, r6, r2
 802067c:	eb65 0503 	sbc.w	r5, r5, r3
 8020680:	085b      	lsrs	r3, r3, #1
 8020682:	ea4f 0232 	mov.w	r2, r2, rrx
 8020686:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802068a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802068e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020692:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020696:	bf22      	ittt	cs
 8020698:	1ab6      	subcs	r6, r6, r2
 802069a:	4675      	movcs	r5, lr
 802069c:	ea40 000c 	orrcs.w	r0, r0, ip
 80206a0:	085b      	lsrs	r3, r3, #1
 80206a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206ae:	bf22      	ittt	cs
 80206b0:	1ab6      	subcs	r6, r6, r2
 80206b2:	4675      	movcs	r5, lr
 80206b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80206b8:	085b      	lsrs	r3, r3, #1
 80206ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80206be:	ebb6 0e02 	subs.w	lr, r6, r2
 80206c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206c6:	bf22      	ittt	cs
 80206c8:	1ab6      	subcs	r6, r6, r2
 80206ca:	4675      	movcs	r5, lr
 80206cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80206d0:	085b      	lsrs	r3, r3, #1
 80206d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206de:	bf22      	ittt	cs
 80206e0:	1ab6      	subcs	r6, r6, r2
 80206e2:	4675      	movcs	r5, lr
 80206e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80206e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80206ec:	d018      	beq.n	8020720 <__aeabi_ddiv+0x114>
 80206ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80206f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80206f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80206fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80206fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020702:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020706:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802070a:	d1c0      	bne.n	802068e <__aeabi_ddiv+0x82>
 802070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020710:	d10b      	bne.n	802072a <__aeabi_ddiv+0x11e>
 8020712:	ea41 0100 	orr.w	r1, r1, r0
 8020716:	f04f 0000 	mov.w	r0, #0
 802071a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802071e:	e7b6      	b.n	802068e <__aeabi_ddiv+0x82>
 8020720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020724:	bf04      	itt	eq
 8020726:	4301      	orreq	r1, r0
 8020728:	2000      	moveq	r0, #0
 802072a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802072e:	bf88      	it	hi
 8020730:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020734:	f63f aeaf 	bhi.w	8020496 <__aeabi_dmul+0xde>
 8020738:	ebb5 0c03 	subs.w	ip, r5, r3
 802073c:	bf04      	itt	eq
 802073e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020742:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020746:	f150 0000 	adcs.w	r0, r0, #0
 802074a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802074e:	bd70      	pop	{r4, r5, r6, pc}
 8020750:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020754:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020758:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802075c:	bfc2      	ittt	gt
 802075e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020762:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020766:	bd70      	popgt	{r4, r5, r6, pc}
 8020768:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802076c:	f04f 0e00 	mov.w	lr, #0
 8020770:	3c01      	subs	r4, #1
 8020772:	e690      	b.n	8020496 <__aeabi_dmul+0xde>
 8020774:	ea45 0e06 	orr.w	lr, r5, r6
 8020778:	e68d      	b.n	8020496 <__aeabi_dmul+0xde>
 802077a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802077e:	ea94 0f0c 	teq	r4, ip
 8020782:	bf08      	it	eq
 8020784:	ea95 0f0c 	teqeq	r5, ip
 8020788:	f43f af3b 	beq.w	8020602 <__aeabi_dmul+0x24a>
 802078c:	ea94 0f0c 	teq	r4, ip
 8020790:	d10a      	bne.n	80207a8 <__aeabi_ddiv+0x19c>
 8020792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020796:	f47f af34 	bne.w	8020602 <__aeabi_dmul+0x24a>
 802079a:	ea95 0f0c 	teq	r5, ip
 802079e:	f47f af25 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207a2:	4610      	mov	r0, r2
 80207a4:	4619      	mov	r1, r3
 80207a6:	e72c      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207a8:	ea95 0f0c 	teq	r5, ip
 80207ac:	d106      	bne.n	80207bc <__aeabi_ddiv+0x1b0>
 80207ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80207b2:	f43f aefd 	beq.w	80205b0 <__aeabi_dmul+0x1f8>
 80207b6:	4610      	mov	r0, r2
 80207b8:	4619      	mov	r1, r3
 80207ba:	e722      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207c0:	bf18      	it	ne
 80207c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207c6:	f47f aec5 	bne.w	8020554 <__aeabi_dmul+0x19c>
 80207ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80207ce:	f47f af0d 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80207d6:	f47f aeeb 	bne.w	80205b0 <__aeabi_dmul+0x1f8>
 80207da:	e712      	b.n	8020602 <__aeabi_dmul+0x24a>

080207dc <__gedf2>:
 80207dc:	f04f 3cff 	mov.w	ip, #4294967295
 80207e0:	e006      	b.n	80207f0 <__cmpdf2+0x4>
 80207e2:	bf00      	nop

080207e4 <__ledf2>:
 80207e4:	f04f 0c01 	mov.w	ip, #1
 80207e8:	e002      	b.n	80207f0 <__cmpdf2+0x4>
 80207ea:	bf00      	nop

080207ec <__cmpdf2>:
 80207ec:	f04f 0c01 	mov.w	ip, #1
 80207f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80207f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80207f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80207fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020800:	bf18      	it	ne
 8020802:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020806:	d01b      	beq.n	8020840 <__cmpdf2+0x54>
 8020808:	b001      	add	sp, #4
 802080a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802080e:	bf0c      	ite	eq
 8020810:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020814:	ea91 0f03 	teqne	r1, r3
 8020818:	bf02      	ittt	eq
 802081a:	ea90 0f02 	teqeq	r0, r2
 802081e:	2000      	moveq	r0, #0
 8020820:	4770      	bxeq	lr
 8020822:	f110 0f00 	cmn.w	r0, #0
 8020826:	ea91 0f03 	teq	r1, r3
 802082a:	bf58      	it	pl
 802082c:	4299      	cmppl	r1, r3
 802082e:	bf08      	it	eq
 8020830:	4290      	cmpeq	r0, r2
 8020832:	bf2c      	ite	cs
 8020834:	17d8      	asrcs	r0, r3, #31
 8020836:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802083a:	f040 0001 	orr.w	r0, r0, #1
 802083e:	4770      	bx	lr
 8020840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020848:	d102      	bne.n	8020850 <__cmpdf2+0x64>
 802084a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802084e:	d107      	bne.n	8020860 <__cmpdf2+0x74>
 8020850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020858:	d1d6      	bne.n	8020808 <__cmpdf2+0x1c>
 802085a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802085e:	d0d3      	beq.n	8020808 <__cmpdf2+0x1c>
 8020860:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020864:	4770      	bx	lr
 8020866:	bf00      	nop

08020868 <__aeabi_cdrcmple>:
 8020868:	4684      	mov	ip, r0
 802086a:	4610      	mov	r0, r2
 802086c:	4662      	mov	r2, ip
 802086e:	468c      	mov	ip, r1
 8020870:	4619      	mov	r1, r3
 8020872:	4663      	mov	r3, ip
 8020874:	e000      	b.n	8020878 <__aeabi_cdcmpeq>
 8020876:	bf00      	nop

08020878 <__aeabi_cdcmpeq>:
 8020878:	b501      	push	{r0, lr}
 802087a:	f7ff ffb7 	bl	80207ec <__cmpdf2>
 802087e:	2800      	cmp	r0, #0
 8020880:	bf48      	it	mi
 8020882:	f110 0f00 	cmnmi.w	r0, #0
 8020886:	bd01      	pop	{r0, pc}

08020888 <__aeabi_dcmpeq>:
 8020888:	f84d ed08 	str.w	lr, [sp, #-8]!
 802088c:	f7ff fff4 	bl	8020878 <__aeabi_cdcmpeq>
 8020890:	bf0c      	ite	eq
 8020892:	2001      	moveq	r0, #1
 8020894:	2000      	movne	r0, #0
 8020896:	f85d fb08 	ldr.w	pc, [sp], #8
 802089a:	bf00      	nop

0802089c <__aeabi_dcmplt>:
 802089c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208a0:	f7ff ffea 	bl	8020878 <__aeabi_cdcmpeq>
 80208a4:	bf34      	ite	cc
 80208a6:	2001      	movcc	r0, #1
 80208a8:	2000      	movcs	r0, #0
 80208aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ae:	bf00      	nop

080208b0 <__aeabi_dcmple>:
 80208b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208b4:	f7ff ffe0 	bl	8020878 <__aeabi_cdcmpeq>
 80208b8:	bf94      	ite	ls
 80208ba:	2001      	movls	r0, #1
 80208bc:	2000      	movhi	r0, #0
 80208be:	f85d fb08 	ldr.w	pc, [sp], #8
 80208c2:	bf00      	nop

080208c4 <__aeabi_dcmpge>:
 80208c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208c8:	f7ff ffce 	bl	8020868 <__aeabi_cdrcmple>
 80208cc:	bf94      	ite	ls
 80208ce:	2001      	movls	r0, #1
 80208d0:	2000      	movhi	r0, #0
 80208d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80208d6:	bf00      	nop

080208d8 <__aeabi_dcmpgt>:
 80208d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208dc:	f7ff ffc4 	bl	8020868 <__aeabi_cdrcmple>
 80208e0:	bf34      	ite	cc
 80208e2:	2001      	movcc	r0, #1
 80208e4:	2000      	movcs	r0, #0
 80208e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ea:	bf00      	nop

080208ec <__aeabi_d2f>:
 80208ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80208f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80208f4:	bf24      	itt	cs
 80208f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80208fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80208fe:	d90d      	bls.n	802091c <__aeabi_d2f+0x30>
 8020900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 802090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020914:	bf08      	it	eq
 8020916:	f020 0001 	biceq.w	r0, r0, #1
 802091a:	4770      	bx	lr
 802091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020920:	d121      	bne.n	8020966 <__aeabi_d2f+0x7a>
 8020922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020926:	bfbc      	itt	lt
 8020928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 802092c:	4770      	bxlt	lr
 802092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020936:	f1c2 0218 	rsb	r2, r2, #24
 802093a:	f1c2 0c20 	rsb	ip, r2, #32
 802093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8020942:	fa20 f002 	lsr.w	r0, r0, r2
 8020946:	bf18      	it	ne
 8020948:	f040 0001 	orrne.w	r0, r0, #1
 802094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020958:	ea40 000c 	orr.w	r0, r0, ip
 802095c:	fa23 f302 	lsr.w	r3, r3, r2
 8020960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020964:	e7cc      	b.n	8020900 <__aeabi_d2f+0x14>
 8020966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 802096a:	d107      	bne.n	802097c <__aeabi_d2f+0x90>
 802096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020970:	bf1e      	ittt	ne
 8020972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 802097a:	4770      	bxne	lr
 802097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020988:	4770      	bx	lr
 802098a:	bf00      	nop

0802098c <__aeabi_uldivmod>:
 802098c:	b953      	cbnz	r3, 80209a4 <__aeabi_uldivmod+0x18>
 802098e:	b94a      	cbnz	r2, 80209a4 <__aeabi_uldivmod+0x18>
 8020990:	2900      	cmp	r1, #0
 8020992:	bf08      	it	eq
 8020994:	2800      	cmpeq	r0, #0
 8020996:	bf1c      	itt	ne
 8020998:	f04f 31ff 	movne.w	r1, #4294967295
 802099c:	f04f 30ff 	movne.w	r0, #4294967295
 80209a0:	f000 b996 	b.w	8020cd0 <__aeabi_idiv0>
 80209a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80209a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80209ac:	f000 f82a 	bl	8020a04 <__udivmoddi4>
 80209b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80209b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80209b8:	b004      	add	sp, #16
 80209ba:	4770      	bx	lr

080209bc <__aeabi_f2ulz>:
 80209bc:	b5d0      	push	{r4, r6, r7, lr}
 80209be:	f7ff fca3 	bl	8020308 <__aeabi_f2d>
 80209c2:	2200      	movs	r2, #0
 80209c4:	4b0d      	ldr	r3, [pc, #52]	; (80209fc <__aeabi_f2ulz+0x40>)
 80209c6:	4606      	mov	r6, r0
 80209c8:	460f      	mov	r7, r1
 80209ca:	f7ff fcf5 	bl	80203b8 <__aeabi_dmul>
 80209ce:	f000 f981 	bl	8020cd4 <__aeabi_d2uiz>
 80209d2:	4604      	mov	r4, r0
 80209d4:	f7ff fc76 	bl	80202c4 <__aeabi_ui2d>
 80209d8:	2200      	movs	r2, #0
 80209da:	4b09      	ldr	r3, [pc, #36]	; (8020a00 <__aeabi_f2ulz+0x44>)
 80209dc:	f7ff fcec 	bl	80203b8 <__aeabi_dmul>
 80209e0:	4602      	mov	r2, r0
 80209e2:	460b      	mov	r3, r1
 80209e4:	4630      	mov	r0, r6
 80209e6:	4639      	mov	r1, r7
 80209e8:	f7ff fb2e 	bl	8020048 <__aeabi_dsub>
 80209ec:	f000 f972 	bl	8020cd4 <__aeabi_d2uiz>
 80209f0:	2200      	movs	r2, #0
 80209f2:	4623      	mov	r3, r4
 80209f4:	4310      	orrs	r0, r2
 80209f6:	4619      	mov	r1, r3
 80209f8:	bdd0      	pop	{r4, r6, r7, pc}
 80209fa:	bf00      	nop
 80209fc:	3df00000 	.word	0x3df00000
 8020a00:	41f00000 	.word	0x41f00000

08020a04 <__udivmoddi4>:
 8020a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a08:	9e08      	ldr	r6, [sp, #32]
 8020a0a:	4604      	mov	r4, r0
 8020a0c:	4688      	mov	r8, r1
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d14b      	bne.n	8020aaa <__udivmoddi4+0xa6>
 8020a12:	428a      	cmp	r2, r1
 8020a14:	4615      	mov	r5, r2
 8020a16:	d967      	bls.n	8020ae8 <__udivmoddi4+0xe4>
 8020a18:	fab2 f282 	clz	r2, r2
 8020a1c:	b14a      	cbz	r2, 8020a32 <__udivmoddi4+0x2e>
 8020a1e:	f1c2 0720 	rsb	r7, r2, #32
 8020a22:	fa01 f302 	lsl.w	r3, r1, r2
 8020a26:	fa20 f707 	lsr.w	r7, r0, r7
 8020a2a:	4095      	lsls	r5, r2
 8020a2c:	ea47 0803 	orr.w	r8, r7, r3
 8020a30:	4094      	lsls	r4, r2
 8020a32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020a36:	0c23      	lsrs	r3, r4, #16
 8020a38:	fbb8 f7fe 	udiv	r7, r8, lr
 8020a3c:	fa1f fc85 	uxth.w	ip, r5
 8020a40:	fb0e 8817 	mls	r8, lr, r7, r8
 8020a44:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020a48:	fb07 f10c 	mul.w	r1, r7, ip
 8020a4c:	4299      	cmp	r1, r3
 8020a4e:	d909      	bls.n	8020a64 <__udivmoddi4+0x60>
 8020a50:	18eb      	adds	r3, r5, r3
 8020a52:	f107 30ff 	add.w	r0, r7, #4294967295
 8020a56:	f080 811b 	bcs.w	8020c90 <__udivmoddi4+0x28c>
 8020a5a:	4299      	cmp	r1, r3
 8020a5c:	f240 8118 	bls.w	8020c90 <__udivmoddi4+0x28c>
 8020a60:	3f02      	subs	r7, #2
 8020a62:	442b      	add	r3, r5
 8020a64:	1a5b      	subs	r3, r3, r1
 8020a66:	b2a4      	uxth	r4, r4
 8020a68:	fbb3 f0fe 	udiv	r0, r3, lr
 8020a6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8020a70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020a74:	fb00 fc0c 	mul.w	ip, r0, ip
 8020a78:	45a4      	cmp	ip, r4
 8020a7a:	d909      	bls.n	8020a90 <__udivmoddi4+0x8c>
 8020a7c:	192c      	adds	r4, r5, r4
 8020a7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8020a82:	f080 8107 	bcs.w	8020c94 <__udivmoddi4+0x290>
 8020a86:	45a4      	cmp	ip, r4
 8020a88:	f240 8104 	bls.w	8020c94 <__udivmoddi4+0x290>
 8020a8c:	3802      	subs	r0, #2
 8020a8e:	442c      	add	r4, r5
 8020a90:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020a94:	eba4 040c 	sub.w	r4, r4, ip
 8020a98:	2700      	movs	r7, #0
 8020a9a:	b11e      	cbz	r6, 8020aa4 <__udivmoddi4+0xa0>
 8020a9c:	40d4      	lsrs	r4, r2
 8020a9e:	2300      	movs	r3, #0
 8020aa0:	e9c6 4300 	strd	r4, r3, [r6]
 8020aa4:	4639      	mov	r1, r7
 8020aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020aaa:	428b      	cmp	r3, r1
 8020aac:	d909      	bls.n	8020ac2 <__udivmoddi4+0xbe>
 8020aae:	2e00      	cmp	r6, #0
 8020ab0:	f000 80eb 	beq.w	8020c8a <__udivmoddi4+0x286>
 8020ab4:	2700      	movs	r7, #0
 8020ab6:	e9c6 0100 	strd	r0, r1, [r6]
 8020aba:	4638      	mov	r0, r7
 8020abc:	4639      	mov	r1, r7
 8020abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ac2:	fab3 f783 	clz	r7, r3
 8020ac6:	2f00      	cmp	r7, #0
 8020ac8:	d147      	bne.n	8020b5a <__udivmoddi4+0x156>
 8020aca:	428b      	cmp	r3, r1
 8020acc:	d302      	bcc.n	8020ad4 <__udivmoddi4+0xd0>
 8020ace:	4282      	cmp	r2, r0
 8020ad0:	f200 80fa 	bhi.w	8020cc8 <__udivmoddi4+0x2c4>
 8020ad4:	1a84      	subs	r4, r0, r2
 8020ad6:	eb61 0303 	sbc.w	r3, r1, r3
 8020ada:	2001      	movs	r0, #1
 8020adc:	4698      	mov	r8, r3
 8020ade:	2e00      	cmp	r6, #0
 8020ae0:	d0e0      	beq.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae2:	e9c6 4800 	strd	r4, r8, [r6]
 8020ae6:	e7dd      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae8:	b902      	cbnz	r2, 8020aec <__udivmoddi4+0xe8>
 8020aea:	deff      	udf	#255	; 0xff
 8020aec:	fab2 f282 	clz	r2, r2
 8020af0:	2a00      	cmp	r2, #0
 8020af2:	f040 808f 	bne.w	8020c14 <__udivmoddi4+0x210>
 8020af6:	1b49      	subs	r1, r1, r5
 8020af8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020afc:	fa1f f885 	uxth.w	r8, r5
 8020b00:	2701      	movs	r7, #1
 8020b02:	fbb1 fcfe 	udiv	ip, r1, lr
 8020b06:	0c23      	lsrs	r3, r4, #16
 8020b08:	fb0e 111c 	mls	r1, lr, ip, r1
 8020b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020b10:	fb08 f10c 	mul.w	r1, r8, ip
 8020b14:	4299      	cmp	r1, r3
 8020b16:	d907      	bls.n	8020b28 <__udivmoddi4+0x124>
 8020b18:	18eb      	adds	r3, r5, r3
 8020b1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020b1e:	d202      	bcs.n	8020b26 <__udivmoddi4+0x122>
 8020b20:	4299      	cmp	r1, r3
 8020b22:	f200 80cd 	bhi.w	8020cc0 <__udivmoddi4+0x2bc>
 8020b26:	4684      	mov	ip, r0
 8020b28:	1a59      	subs	r1, r3, r1
 8020b2a:	b2a3      	uxth	r3, r4
 8020b2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8020b30:	fb0e 1410 	mls	r4, lr, r0, r1
 8020b34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020b38:	fb08 f800 	mul.w	r8, r8, r0
 8020b3c:	45a0      	cmp	r8, r4
 8020b3e:	d907      	bls.n	8020b50 <__udivmoddi4+0x14c>
 8020b40:	192c      	adds	r4, r5, r4
 8020b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b46:	d202      	bcs.n	8020b4e <__udivmoddi4+0x14a>
 8020b48:	45a0      	cmp	r8, r4
 8020b4a:	f200 80b6 	bhi.w	8020cba <__udivmoddi4+0x2b6>
 8020b4e:	4618      	mov	r0, r3
 8020b50:	eba4 0408 	sub.w	r4, r4, r8
 8020b54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020b58:	e79f      	b.n	8020a9a <__udivmoddi4+0x96>
 8020b5a:	f1c7 0c20 	rsb	ip, r7, #32
 8020b5e:	40bb      	lsls	r3, r7
 8020b60:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020b64:	ea4e 0e03 	orr.w	lr, lr, r3
 8020b68:	fa01 f407 	lsl.w	r4, r1, r7
 8020b6c:	fa20 f50c 	lsr.w	r5, r0, ip
 8020b70:	fa21 f30c 	lsr.w	r3, r1, ip
 8020b74:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020b78:	4325      	orrs	r5, r4
 8020b7a:	fbb3 f9f8 	udiv	r9, r3, r8
 8020b7e:	0c2c      	lsrs	r4, r5, #16
 8020b80:	fb08 3319 	mls	r3, r8, r9, r3
 8020b84:	fa1f fa8e 	uxth.w	sl, lr
 8020b88:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020b8c:	fb09 f40a 	mul.w	r4, r9, sl
 8020b90:	429c      	cmp	r4, r3
 8020b92:	fa02 f207 	lsl.w	r2, r2, r7
 8020b96:	fa00 f107 	lsl.w	r1, r0, r7
 8020b9a:	d90b      	bls.n	8020bb4 <__udivmoddi4+0x1b0>
 8020b9c:	eb1e 0303 	adds.w	r3, lr, r3
 8020ba0:	f109 30ff 	add.w	r0, r9, #4294967295
 8020ba4:	f080 8087 	bcs.w	8020cb6 <__udivmoddi4+0x2b2>
 8020ba8:	429c      	cmp	r4, r3
 8020baa:	f240 8084 	bls.w	8020cb6 <__udivmoddi4+0x2b2>
 8020bae:	f1a9 0902 	sub.w	r9, r9, #2
 8020bb2:	4473      	add	r3, lr
 8020bb4:	1b1b      	subs	r3, r3, r4
 8020bb6:	b2ad      	uxth	r5, r5
 8020bb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8020bbc:	fb08 3310 	mls	r3, r8, r0, r3
 8020bc0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020bc4:	fb00 fa0a 	mul.w	sl, r0, sl
 8020bc8:	45a2      	cmp	sl, r4
 8020bca:	d908      	bls.n	8020bde <__udivmoddi4+0x1da>
 8020bcc:	eb1e 0404 	adds.w	r4, lr, r4
 8020bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8020bd4:	d26b      	bcs.n	8020cae <__udivmoddi4+0x2aa>
 8020bd6:	45a2      	cmp	sl, r4
 8020bd8:	d969      	bls.n	8020cae <__udivmoddi4+0x2aa>
 8020bda:	3802      	subs	r0, #2
 8020bdc:	4474      	add	r4, lr
 8020bde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020be2:	fba0 8902 	umull	r8, r9, r0, r2
 8020be6:	eba4 040a 	sub.w	r4, r4, sl
 8020bea:	454c      	cmp	r4, r9
 8020bec:	46c2      	mov	sl, r8
 8020bee:	464b      	mov	r3, r9
 8020bf0:	d354      	bcc.n	8020c9c <__udivmoddi4+0x298>
 8020bf2:	d051      	beq.n	8020c98 <__udivmoddi4+0x294>
 8020bf4:	2e00      	cmp	r6, #0
 8020bf6:	d069      	beq.n	8020ccc <__udivmoddi4+0x2c8>
 8020bf8:	ebb1 050a 	subs.w	r5, r1, sl
 8020bfc:	eb64 0403 	sbc.w	r4, r4, r3
 8020c00:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020c04:	40fd      	lsrs	r5, r7
 8020c06:	40fc      	lsrs	r4, r7
 8020c08:	ea4c 0505 	orr.w	r5, ip, r5
 8020c0c:	e9c6 5400 	strd	r5, r4, [r6]
 8020c10:	2700      	movs	r7, #0
 8020c12:	e747      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c14:	f1c2 0320 	rsb	r3, r2, #32
 8020c18:	fa20 f703 	lsr.w	r7, r0, r3
 8020c1c:	4095      	lsls	r5, r2
 8020c1e:	fa01 f002 	lsl.w	r0, r1, r2
 8020c22:	fa21 f303 	lsr.w	r3, r1, r3
 8020c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020c2a:	4338      	orrs	r0, r7
 8020c2c:	0c01      	lsrs	r1, r0, #16
 8020c2e:	fbb3 f7fe 	udiv	r7, r3, lr
 8020c32:	fa1f f885 	uxth.w	r8, r5
 8020c36:	fb0e 3317 	mls	r3, lr, r7, r3
 8020c3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c3e:	fb07 f308 	mul.w	r3, r7, r8
 8020c42:	428b      	cmp	r3, r1
 8020c44:	fa04 f402 	lsl.w	r4, r4, r2
 8020c48:	d907      	bls.n	8020c5a <__udivmoddi4+0x256>
 8020c4a:	1869      	adds	r1, r5, r1
 8020c4c:	f107 3cff 	add.w	ip, r7, #4294967295
 8020c50:	d22f      	bcs.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c52:	428b      	cmp	r3, r1
 8020c54:	d92d      	bls.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c56:	3f02      	subs	r7, #2
 8020c58:	4429      	add	r1, r5
 8020c5a:	1acb      	subs	r3, r1, r3
 8020c5c:	b281      	uxth	r1, r0
 8020c5e:	fbb3 f0fe 	udiv	r0, r3, lr
 8020c62:	fb0e 3310 	mls	r3, lr, r0, r3
 8020c66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c6a:	fb00 f308 	mul.w	r3, r0, r8
 8020c6e:	428b      	cmp	r3, r1
 8020c70:	d907      	bls.n	8020c82 <__udivmoddi4+0x27e>
 8020c72:	1869      	adds	r1, r5, r1
 8020c74:	f100 3cff 	add.w	ip, r0, #4294967295
 8020c78:	d217      	bcs.n	8020caa <__udivmoddi4+0x2a6>
 8020c7a:	428b      	cmp	r3, r1
 8020c7c:	d915      	bls.n	8020caa <__udivmoddi4+0x2a6>
 8020c7e:	3802      	subs	r0, #2
 8020c80:	4429      	add	r1, r5
 8020c82:	1ac9      	subs	r1, r1, r3
 8020c84:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020c88:	e73b      	b.n	8020b02 <__udivmoddi4+0xfe>
 8020c8a:	4637      	mov	r7, r6
 8020c8c:	4630      	mov	r0, r6
 8020c8e:	e709      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c90:	4607      	mov	r7, r0
 8020c92:	e6e7      	b.n	8020a64 <__udivmoddi4+0x60>
 8020c94:	4618      	mov	r0, r3
 8020c96:	e6fb      	b.n	8020a90 <__udivmoddi4+0x8c>
 8020c98:	4541      	cmp	r1, r8
 8020c9a:	d2ab      	bcs.n	8020bf4 <__udivmoddi4+0x1f0>
 8020c9c:	ebb8 0a02 	subs.w	sl, r8, r2
 8020ca0:	eb69 020e 	sbc.w	r2, r9, lr
 8020ca4:	3801      	subs	r0, #1
 8020ca6:	4613      	mov	r3, r2
 8020ca8:	e7a4      	b.n	8020bf4 <__udivmoddi4+0x1f0>
 8020caa:	4660      	mov	r0, ip
 8020cac:	e7e9      	b.n	8020c82 <__udivmoddi4+0x27e>
 8020cae:	4618      	mov	r0, r3
 8020cb0:	e795      	b.n	8020bde <__udivmoddi4+0x1da>
 8020cb2:	4667      	mov	r7, ip
 8020cb4:	e7d1      	b.n	8020c5a <__udivmoddi4+0x256>
 8020cb6:	4681      	mov	r9, r0
 8020cb8:	e77c      	b.n	8020bb4 <__udivmoddi4+0x1b0>
 8020cba:	3802      	subs	r0, #2
 8020cbc:	442c      	add	r4, r5
 8020cbe:	e747      	b.n	8020b50 <__udivmoddi4+0x14c>
 8020cc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8020cc4:	442b      	add	r3, r5
 8020cc6:	e72f      	b.n	8020b28 <__udivmoddi4+0x124>
 8020cc8:	4638      	mov	r0, r7
 8020cca:	e708      	b.n	8020ade <__udivmoddi4+0xda>
 8020ccc:	4637      	mov	r7, r6
 8020cce:	e6e9      	b.n	8020aa4 <__udivmoddi4+0xa0>

08020cd0 <__aeabi_idiv0>:
 8020cd0:	4770      	bx	lr
 8020cd2:	bf00      	nop

08020cd4 <__aeabi_d2uiz>:
 8020cd4:	004a      	lsls	r2, r1, #1
 8020cd6:	d211      	bcs.n	8020cfc <__aeabi_d2uiz+0x28>
 8020cd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020cdc:	d211      	bcs.n	8020d02 <__aeabi_d2uiz+0x2e>
 8020cde:	d50d      	bpl.n	8020cfc <__aeabi_d2uiz+0x28>
 8020ce0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020ce4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020ce8:	d40e      	bmi.n	8020d08 <__aeabi_d2uiz+0x34>
 8020cea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020cf2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020cf6:	fa23 f002 	lsr.w	r0, r3, r2
 8020cfa:	4770      	bx	lr
 8020cfc:	f04f 0000 	mov.w	r0, #0
 8020d00:	4770      	bx	lr
 8020d02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020d06:	d102      	bne.n	8020d0e <__aeabi_d2uiz+0x3a>
 8020d08:	f04f 30ff 	mov.w	r0, #4294967295
 8020d0c:	4770      	bx	lr
 8020d0e:	f04f 0000 	mov.w	r0, #0
 8020d12:	4770      	bx	lr

08020d14 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"

Encoder::Encoder() : distance_(0), distance_stack_(0), distance_difference_(0) {}
 8020d14:	b480      	push	{r7}
 8020d16:	b083      	sub	sp, #12
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	6078      	str	r0, [r7, #4]
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	f04f 0200 	mov.w	r2, #0
 8020d22:	601a      	str	r2, [r3, #0]
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	f04f 0200 	mov.w	r2, #0
 8020d2a:	605a      	str	r2, [r3, #4]
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	f04f 0200 	mov.w	r2, #0
 8020d32:	609a      	str	r2, [r3, #8]
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	4618      	mov	r0, r3
 8020d38:	370c      	adds	r7, #12
 8020d3a:	46bd      	mov	sp, r7
 8020d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d40:	4770      	bx	lr
	...

08020d44 <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020d44:	b580      	push	{r7, lr}
 8020d46:	b082      	sub	sp, #8
 8020d48:	af00      	add	r7, sp, #0
 8020d4a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8020d4c:	213c      	movs	r1, #60	; 0x3c
 8020d4e:	4805      	ldr	r0, [pc, #20]	; (8020d64 <_ZN7Encoder4InitEv+0x20>)
 8020d50:	f008 fbfc 	bl	802954c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8020d54:	213c      	movs	r1, #60	; 0x3c
 8020d56:	4804      	ldr	r0, [pc, #16]	; (8020d68 <_ZN7Encoder4InitEv+0x24>)
 8020d58:	f008 fbf8 	bl	802954c <HAL_TIM_Encoder_Start>
}
 8020d5c:	bf00      	nop
 8020d5e:	3708      	adds	r7, #8
 8020d60:	46bd      	mov	sp, r7
 8020d62:	bd80      	pop	{r7, pc}
 8020d64:	20000790 	.word	0x20000790
 8020d68:	200007d0 	.word	0x200007d0
 8020d6c:	00000000 	.word	0x00000000

08020d70 <_ZN7Encoder6UpdateEv>:

void Encoder::Update()
{
 8020d70:	b590      	push	{r4, r7, lr}
 8020d72:	b087      	sub	sp, #28
 8020d74:	af00      	add	r7, sp, #0
 8020d76:	6078      	str	r0, [r7, #4]
	int16_t count_l = static_cast<int16_t>((TIM8 -> CNT) - START_COUNT);
 8020d78:	4b39      	ldr	r3, [pc, #228]	; (8020e60 <_ZN7Encoder6UpdateEv+0xf0>)
 8020d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d7c:	b29b      	uxth	r3, r3
 8020d7e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8020d82:	3b7f      	subs	r3, #127	; 0x7f
 8020d84:	b29b      	uxth	r3, r3
 8020d86:	82fb      	strh	r3, [r7, #22]
	int16_t count_r = static_cast<int16_t>(START_COUNT - (TIM4 -> CNT));
 8020d88:	4b36      	ldr	r3, [pc, #216]	; (8020e64 <_ZN7Encoder6UpdateEv+0xf4>)
 8020d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d8c:	b29b      	uxth	r3, r3
 8020d8e:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8020d92:	337f      	adds	r3, #127	; 0x7f
 8020d94:	b29b      	uxth	r3, r3
 8020d96:	82bb      	strh	r3, [r7, #20]
	TIM8 -> CNT = START_COUNT;
 8020d98:	4b31      	ldr	r3, [pc, #196]	; (8020e60 <_ZN7Encoder6UpdateEv+0xf0>)
 8020d9a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020d9e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = START_COUNT;
 8020da0:	4b30      	ldr	r3, [pc, #192]	; (8020e64 <_ZN7Encoder6UpdateEv+0xf4>)
 8020da2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020da6:	625a      	str	r2, [r3, #36]	; 0x24
	float distance_l = static_cast<float>(count_l * DISTANCE_PER_COUNT);
 8020da8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020dac:	4618      	mov	r0, r3
 8020dae:	f7ff fa99 	bl	80202e4 <__aeabi_i2d>
 8020db2:	a329      	add	r3, pc, #164	; (adr r3, 8020e58 <_ZN7Encoder6UpdateEv+0xe8>)
 8020db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020db8:	f7ff fafe 	bl	80203b8 <__aeabi_dmul>
 8020dbc:	4603      	mov	r3, r0
 8020dbe:	460c      	mov	r4, r1
 8020dc0:	4618      	mov	r0, r3
 8020dc2:	4621      	mov	r1, r4
 8020dc4:	f7ff fd92 	bl	80208ec <__aeabi_d2f>
 8020dc8:	4603      	mov	r3, r0
 8020dca:	613b      	str	r3, [r7, #16]
	float distance_r = static_cast<float>(count_r * DISTANCE_PER_COUNT);
 8020dcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020dd0:	4618      	mov	r0, r3
 8020dd2:	f7ff fa87 	bl	80202e4 <__aeabi_i2d>
 8020dd6:	a320      	add	r3, pc, #128	; (adr r3, 8020e58 <_ZN7Encoder6UpdateEv+0xe8>)
 8020dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ddc:	f7ff faec 	bl	80203b8 <__aeabi_dmul>
 8020de0:	4603      	mov	r3, r0
 8020de2:	460c      	mov	r4, r1
 8020de4:	4618      	mov	r0, r3
 8020de6:	4621      	mov	r1, r4
 8020de8:	f7ff fd80 	bl	80208ec <__aeabi_d2f>
 8020dec:	4603      	mov	r3, r0
 8020dee:	60fb      	str	r3, [r7, #12]
	float distance = (distance_l + distance_r) / 2.0;
 8020df0:	ed97 7a04 	vldr	s14, [r7, #16]
 8020df4:	edd7 7a03 	vldr	s15, [r7, #12]
 8020df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020dfc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8020e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020e04:	edc7 7a02 	vstr	s15, [r7, #8]

	distance_ = distance;
 8020e08:	687b      	ldr	r3, [r7, #4]
 8020e0a:	68ba      	ldr	r2, [r7, #8]
 8020e0c:	601a      	str	r2, [r3, #0]
	distance_stack_ += distance;
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	ed93 7a01 	vldr	s14, [r3, #4]
 8020e14:	edd7 7a02 	vldr	s15, [r7, #8]
 8020e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020e1c:	687b      	ldr	r3, [r7, #4]
 8020e1e:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_difference_ = distance_r - distance_l;
 8020e22:	ed97 7a03 	vldr	s14, [r7, #12]
 8020e26:	edd7 7a04 	vldr	s15, [r7, #16]
 8020e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020e2e:	687b      	ldr	r3, [r7, #4]
 8020e30:	edc3 7a02 	vstr	s15, [r3, #8]

#ifdef DEBUG_MODE
	g_enc_cnt_l = count_l;  g_enc_cnt_r = count_r;
 8020e34:	4a0c      	ldr	r2, [pc, #48]	; (8020e68 <_ZN7Encoder6UpdateEv+0xf8>)
 8020e36:	8afb      	ldrh	r3, [r7, #22]
 8020e38:	8013      	strh	r3, [r2, #0]
 8020e3a:	4a0c      	ldr	r2, [pc, #48]	; (8020e6c <_ZN7Encoder6UpdateEv+0xfc>)
 8020e3c:	8abb      	ldrh	r3, [r7, #20]
 8020e3e:	8013      	strh	r3, [r2, #0]
	g_distance_l = distance_l;  g_distance_r = distance_r;
 8020e40:	4a0b      	ldr	r2, [pc, #44]	; (8020e70 <_ZN7Encoder6UpdateEv+0x100>)
 8020e42:	693b      	ldr	r3, [r7, #16]
 8020e44:	6013      	str	r3, [r2, #0]
 8020e46:	4a0b      	ldr	r2, [pc, #44]	; (8020e74 <_ZN7Encoder6UpdateEv+0x104>)
 8020e48:	68fb      	ldr	r3, [r7, #12]
 8020e4a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8020e4c:	bf00      	nop
 8020e4e:	371c      	adds	r7, #28
 8020e50:	46bd      	mov	sp, r7
 8020e52:	bd90      	pop	{r4, r7, pc}
 8020e54:	f3af 8000 	nop.w
 8020e58:	5d35653d 	.word	0x5d35653d
 8020e5c:	3f7d744f 	.word	0x3f7d744f
 8020e60:	40010400 	.word	0x40010400
 8020e64:	40000800 	.word	0x40000800
 8020e68:	20000270 	.word	0x20000270
 8020e6c:	20000272 	.word	0x20000272
 8020e70:	20000274 	.word	0x20000274
 8020e74:	20000278 	.word	0x20000278

08020e78 <_ZN7Encoder18ResetDistanceStackEv>:
	TIM8 -> CNT = START_COUNT;
	TIM4 -> CNT = START_COUNT;
}

void Encoder::ResetDistanceStack()
{
 8020e78:	b480      	push	{r7}
 8020e7a:	b083      	sub	sp, #12
 8020e7c:	af00      	add	r7, sp, #0
 8020e7e:	6078      	str	r0, [r7, #4]
	distance_stack_ = 0.0;
 8020e80:	687b      	ldr	r3, [r7, #4]
 8020e82:	f04f 0200 	mov.w	r2, #0
 8020e86:	605a      	str	r2, [r3, #4]
}
 8020e88:	bf00      	nop
 8020e8a:	370c      	adds	r7, #12
 8020e8c:	46bd      	mov	sp, r7
 8020e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e92:	4770      	bx	lr

08020e94 <_ZN7Encoder11GetDistanceEv>:

float Encoder::GetDistance()
{
 8020e94:	b480      	push	{r7}
 8020e96:	b083      	sub	sp, #12
 8020e98:	af00      	add	r7, sp, #0
 8020e9a:	6078      	str	r0, [r7, #4]
	return distance_;
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	681b      	ldr	r3, [r3, #0]
 8020ea0:	ee07 3a90 	vmov	s15, r3
}
 8020ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8020ea8:	370c      	adds	r7, #12
 8020eaa:	46bd      	mov	sp, r7
 8020eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eb0:	4770      	bx	lr

08020eb2 <_ZN7Encoder16GetDistanceStackEv>:

float Encoder::GetDistanceStack()
{
 8020eb2:	b480      	push	{r7}
 8020eb4:	b083      	sub	sp, #12
 8020eb6:	af00      	add	r7, sp, #0
 8020eb8:	6078      	str	r0, [r7, #4]
	return distance_stack_;
 8020eba:	687b      	ldr	r3, [r7, #4]
 8020ebc:	685b      	ldr	r3, [r3, #4]
 8020ebe:	ee07 3a90 	vmov	s15, r3
}
 8020ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8020ec6:	370c      	adds	r7, #12
 8020ec8:	46bd      	mov	sp, r7
 8020eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ece:	4770      	bx	lr

08020ed0 <_ZN7Encoder15AngularVelocityEv>:

float Encoder::AngularVelocity()
{
 8020ed0:	b590      	push	{r4, r7, lr}
 8020ed2:	b083      	sub	sp, #12
 8020ed4:	af00      	add	r7, sp, #0
 8020ed6:	6078      	str	r0, [r7, #4]
	return distance_difference_ / (TIM6_PERIOD * MACHINE_TREAD);
 8020ed8:	687b      	ldr	r3, [r7, #4]
 8020eda:	689b      	ldr	r3, [r3, #8]
 8020edc:	4618      	mov	r0, r3
 8020ede:	f7ff fa13 	bl	8020308 <__aeabi_f2d>
 8020ee2:	a309      	add	r3, pc, #36	; (adr r3, 8020f08 <_ZN7Encoder15AngularVelocityEv+0x38>)
 8020ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ee8:	f7ff fb90 	bl	802060c <__aeabi_ddiv>
 8020eec:	4603      	mov	r3, r0
 8020eee:	460c      	mov	r4, r1
 8020ef0:	4618      	mov	r0, r3
 8020ef2:	4621      	mov	r1, r4
 8020ef4:	f7ff fcfa 	bl	80208ec <__aeabi_d2f>
 8020ef8:	4603      	mov	r3, r0
 8020efa:	ee07 3a90 	vmov	s15, r3
 8020efe:	eeb0 0a67 	vmov.f32	s0, s15
 8020f02:	370c      	adds	r7, #12
 8020f04:	46bd      	mov	sp, r7
 8020f06:	bd90      	pop	{r4, r7, pc}
 8020f08:	00000000 	.word	0x00000000
 8020f0c:	407f9000 	.word	0x407f9000

08020f10 <_ZN5Flash5ClearEv>:
#include "flash.hpp"
#include <string.h>

bool Flash::Clear()
{
 8020f10:	b580      	push	{r7, lr}
 8020f12:	b088      	sub	sp, #32
 8020f14:	af00      	add	r7, sp, #0
 8020f16:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8020f18:	f006 facc 	bl	80274b4 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase;

    erase.TypeErase    = FLASH_TYPEERASE_SECTORS; // Erasure range : Sectors
 8020f1c:	2300      	movs	r3, #0
 8020f1e:	60fb      	str	r3, [r7, #12]
    erase.Sector       = FLASH_SECTOR_1;          // Which sector : 1
 8020f20:	2301      	movs	r3, #1
 8020f22:	617b      	str	r3, [r7, #20]
    erase.NbSectors    = 4;                       // How many sector : 4 (1,2,3,4)
 8020f24:	2304      	movs	r3, #4
 8020f26:	61bb      	str	r3, [r7, #24]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;   // Voltage range : 2.7 ~ 3.6 [V]
 8020f28:	2302      	movs	r3, #2
 8020f2a:	61fb      	str	r3, [r7, #28]

    // Success => 0xFFFFFFFF is stored.
    // Fail => Sector number is stored.
    uint32_t failed_sector = 0;
 8020f2c:	2300      	movs	r3, #0
 8020f2e:	60bb      	str	r3, [r7, #8]

    if(HAL_FLASHEx_Erase(&erase, &failed_sector) != HAL_OK)
 8020f30:	f107 0208 	add.w	r2, r7, #8
 8020f34:	f107 030c 	add.w	r3, r7, #12
 8020f38:	4611      	mov	r1, r2
 8020f3a:	4618      	mov	r0, r3
 8020f3c:	f006 fc1a 	bl	8027774 <HAL_FLASHEx_Erase>
 8020f40:	4603      	mov	r3, r0
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	bf14      	ite	ne
 8020f46:	2301      	movne	r3, #1
 8020f48:	2300      	moveq	r3, #0
 8020f4a:	b2db      	uxtb	r3, r3
 8020f4c:	2b00      	cmp	r3, #0
 8020f4e:	d004      	beq.n	8020f5a <_ZN5Flash5ClearEv+0x4a>
    {
#ifdef DEBUG_MODE
        g_erase_failed_sector = failed_sector;
 8020f50:	68bb      	ldr	r3, [r7, #8]
 8020f52:	4a08      	ldr	r2, [pc, #32]	; (8020f74 <_ZN5Flash5ClearEv+0x64>)
 8020f54:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

        return false;
 8020f56:	2300      	movs	r3, #0
 8020f58:	e008      	b.n	8020f6c <_ZN5Flash5ClearEv+0x5c>
    }

    HAL_FLASH_Lock();
 8020f5a:	f006 facd 	bl	80274f8 <HAL_FLASH_Lock>

    return failed_sector == 0xFFFFFFFF;
 8020f5e:	68bb      	ldr	r3, [r7, #8]
 8020f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f64:	bf0c      	ite	eq
 8020f66:	2301      	moveq	r3, #1
 8020f68:	2300      	movne	r3, #0
 8020f6a:	b2db      	uxtb	r3, r3
}
 8020f6c:	4618      	mov	r0, r3
 8020f6e:	3720      	adds	r7, #32
 8020f70:	46bd      	mov	sp, r7
 8020f72:	bd80      	pop	{r7, pc}
 8020f74:	200002a8 	.word	0x200002a8

08020f78 <_ZN5Flash10StoreUint8EmPhm>:

bool Flash::StoreUint8(uint32_t address, uint8_t *data, uint32_t number)
{
 8020f78:	b590      	push	{r4, r7, lr}
 8020f7a:	b087      	sub	sp, #28
 8020f7c:	af00      	add	r7, sp, #0
 8020f7e:	60f8      	str	r0, [r7, #12]
 8020f80:	60b9      	str	r1, [r7, #8]
 8020f82:	607a      	str	r2, [r7, #4]
 8020f84:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8020f86:	f006 fa95 	bl	80274b4 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8020f8a:	2300      	movs	r3, #0
 8020f8c:	613b      	str	r3, [r7, #16]
 8020f8e:	693a      	ldr	r2, [r7, #16]
 8020f90:	683b      	ldr	r3, [r7, #0]
 8020f92:	429a      	cmp	r2, r3
 8020f94:	d218      	bcs.n	8020fc8 <_ZN5Flash10StoreUint8EmPhm+0x50>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address++, *data++);
 8020f96:	68b9      	ldr	r1, [r7, #8]
 8020f98:	1c4b      	adds	r3, r1, #1
 8020f9a:	60bb      	str	r3, [r7, #8]
 8020f9c:	687b      	ldr	r3, [r7, #4]
 8020f9e:	1c5a      	adds	r2, r3, #1
 8020fa0:	607a      	str	r2, [r7, #4]
 8020fa2:	781b      	ldrb	r3, [r3, #0]
 8020fa4:	b2db      	uxtb	r3, r3
 8020fa6:	f04f 0400 	mov.w	r4, #0
 8020faa:	461a      	mov	r2, r3
 8020fac:	4623      	mov	r3, r4
 8020fae:	2000      	movs	r0, #0
 8020fb0:	f006 fa2c 	bl	802740c <HAL_FLASH_Program>
 8020fb4:	4603      	mov	r3, r0
 8020fb6:	75fb      	strb	r3, [r7, #23]
        if(result != HAL_OK) break;
 8020fb8:	7dfb      	ldrb	r3, [r7, #23]
 8020fba:	2b00      	cmp	r3, #0
 8020fbc:	d103      	bne.n	8020fc6 <_ZN5Flash10StoreUint8EmPhm+0x4e>
    for(uint32_t i = 0; i < number; i++)
 8020fbe:	693b      	ldr	r3, [r7, #16]
 8020fc0:	3301      	adds	r3, #1
 8020fc2:	613b      	str	r3, [r7, #16]
 8020fc4:	e7e3      	b.n	8020f8e <_ZN5Flash10StoreUint8EmPhm+0x16>
        if(result != HAL_OK) break;
 8020fc6:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8020fc8:	f006 fa96 	bl	80274f8 <HAL_FLASH_Lock>

    return result == HAL_OK;
 8020fcc:	7dfb      	ldrb	r3, [r7, #23]
 8020fce:	2b00      	cmp	r3, #0
 8020fd0:	bf0c      	ite	eq
 8020fd2:	2301      	moveq	r3, #1
 8020fd4:	2300      	movne	r3, #0
 8020fd6:	b2db      	uxtb	r3, r3
}
 8020fd8:	4618      	mov	r0, r3
 8020fda:	371c      	adds	r7, #28
 8020fdc:	46bd      	mov	sp, r7
 8020fde:	bd90      	pop	{r4, r7, pc}

08020fe0 <_ZN5Flash11StoreUint16EmPtm>:

bool Flash::StoreUint16(uint32_t address, uint16_t *data, uint32_t number)
{
 8020fe0:	b590      	push	{r4, r7, lr}
 8020fe2:	b087      	sub	sp, #28
 8020fe4:	af00      	add	r7, sp, #0
 8020fe6:	60f8      	str	r0, [r7, #12]
 8020fe8:	60b9      	str	r1, [r7, #8]
 8020fea:	607a      	str	r2, [r7, #4]
 8020fec:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8020fee:	f006 fa61 	bl	80274b4 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8020ff2:	2300      	movs	r3, #0
 8020ff4:	613b      	str	r3, [r7, #16]
 8020ff6:	693a      	ldr	r2, [r7, #16]
 8020ff8:	683b      	ldr	r3, [r7, #0]
 8020ffa:	429a      	cmp	r2, r3
 8020ffc:	d219      	bcs.n	8021032 <_ZN5Flash11StoreUint16EmPtm+0x52>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++);
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	1c9a      	adds	r2, r3, #2
 8021002:	607a      	str	r2, [r7, #4]
 8021004:	881b      	ldrh	r3, [r3, #0]
 8021006:	b29b      	uxth	r3, r3
 8021008:	f04f 0400 	mov.w	r4, #0
 802100c:	461a      	mov	r2, r3
 802100e:	4623      	mov	r3, r4
 8021010:	68b9      	ldr	r1, [r7, #8]
 8021012:	2001      	movs	r0, #1
 8021014:	f006 f9fa 	bl	802740c <HAL_FLASH_Program>
 8021018:	4603      	mov	r3, r0
 802101a:	75fb      	strb	r3, [r7, #23]
        address += 2;
 802101c:	68bb      	ldr	r3, [r7, #8]
 802101e:	3302      	adds	r3, #2
 8021020:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 8021022:	7dfb      	ldrb	r3, [r7, #23]
 8021024:	2b00      	cmp	r3, #0
 8021026:	d103      	bne.n	8021030 <_ZN5Flash11StoreUint16EmPtm+0x50>
    for(uint32_t i = 0; i < number; i++)
 8021028:	693b      	ldr	r3, [r7, #16]
 802102a:	3301      	adds	r3, #1
 802102c:	613b      	str	r3, [r7, #16]
 802102e:	e7e2      	b.n	8020ff6 <_ZN5Flash11StoreUint16EmPtm+0x16>
        if(result != HAL_OK) break;
 8021030:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8021032:	f006 fa61 	bl	80274f8 <HAL_FLASH_Lock>

    return result == HAL_OK;
 8021036:	7dfb      	ldrb	r3, [r7, #23]
 8021038:	2b00      	cmp	r3, #0
 802103a:	bf0c      	ite	eq
 802103c:	2301      	moveq	r3, #1
 802103e:	2300      	movne	r3, #0
 8021040:	b2db      	uxtb	r3, r3
}
 8021042:	4618      	mov	r0, r3
 8021044:	371c      	adds	r7, #28
 8021046:	46bd      	mov	sp, r7
 8021048:	bd90      	pop	{r4, r7, pc}

0802104a <_ZN5Flash10StoreInt16EmPsm>:

bool Flash::StoreInt16(uint32_t address, int16_t *data, uint32_t number)
{
 802104a:	b590      	push	{r4, r7, lr}
 802104c:	b087      	sub	sp, #28
 802104e:	af00      	add	r7, sp, #0
 8021050:	60f8      	str	r0, [r7, #12]
 8021052:	60b9      	str	r1, [r7, #8]
 8021054:	607a      	str	r2, [r7, #4]
 8021056:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021058:	f006 fa2c 	bl	80274b4 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 802105c:	2300      	movs	r3, #0
 802105e:	613b      	str	r3, [r7, #16]
 8021060:	693a      	ldr	r2, [r7, #16]
 8021062:	683b      	ldr	r3, [r7, #0]
 8021064:	429a      	cmp	r2, r3
 8021066:	d21a      	bcs.n	802109e <_ZN5Flash10StoreInt16EmPsm+0x54>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++);
 8021068:	687b      	ldr	r3, [r7, #4]
 802106a:	1c9a      	adds	r2, r3, #2
 802106c:	607a      	str	r2, [r7, #4]
 802106e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021072:	b21b      	sxth	r3, r3
 8021074:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8021078:	461a      	mov	r2, r3
 802107a:	4623      	mov	r3, r4
 802107c:	68b9      	ldr	r1, [r7, #8]
 802107e:	2001      	movs	r0, #1
 8021080:	f006 f9c4 	bl	802740c <HAL_FLASH_Program>
 8021084:	4603      	mov	r3, r0
 8021086:	75fb      	strb	r3, [r7, #23]
        address += 2;
 8021088:	68bb      	ldr	r3, [r7, #8]
 802108a:	3302      	adds	r3, #2
 802108c:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 802108e:	7dfb      	ldrb	r3, [r7, #23]
 8021090:	2b00      	cmp	r3, #0
 8021092:	d103      	bne.n	802109c <_ZN5Flash10StoreInt16EmPsm+0x52>
    for(uint32_t i = 0; i < number; i++)
 8021094:	693b      	ldr	r3, [r7, #16]
 8021096:	3301      	adds	r3, #1
 8021098:	613b      	str	r3, [r7, #16]
 802109a:	e7e1      	b.n	8021060 <_ZN5Flash10StoreInt16EmPsm+0x16>
        if(result != HAL_OK) break;
 802109c:	bf00      	nop
    }

    HAL_FLASH_Lock();
 802109e:	f006 fa2b 	bl	80274f8 <HAL_FLASH_Lock>

    return result == HAL_OK;
 80210a2:	7dfb      	ldrb	r3, [r7, #23]
 80210a4:	2b00      	cmp	r3, #0
 80210a6:	bf0c      	ite	eq
 80210a8:	2301      	moveq	r3, #1
 80210aa:	2300      	movne	r3, #0
 80210ac:	b2db      	uxtb	r3, r3
}
 80210ae:	4618      	mov	r0, r3
 80210b0:	371c      	adds	r7, #28
 80210b2:	46bd      	mov	sp, r7
 80210b4:	bd90      	pop	{r4, r7, pc}

080210b6 <_ZN5Flash10StoreFloatEmPfm>:

bool Flash::StoreFloat(uint32_t address, float *data, uint32_t number)
{
 80210b6:	b590      	push	{r4, r7, lr}
 80210b8:	b087      	sub	sp, #28
 80210ba:	af00      	add	r7, sp, #0
 80210bc:	60f8      	str	r0, [r7, #12]
 80210be:	60b9      	str	r1, [r7, #8]
 80210c0:	607a      	str	r2, [r7, #4]
 80210c2:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 80210c4:	f006 f9f6 	bl	80274b4 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 80210c8:	2300      	movs	r3, #0
 80210ca:	613b      	str	r3, [r7, #16]
 80210cc:	693a      	ldr	r2, [r7, #16]
 80210ce:	683b      	ldr	r3, [r7, #0]
 80210d0:	429a      	cmp	r2, r3
 80210d2:	d21b      	bcs.n	802110c <_ZN5Flash10StoreFloatEmPfm+0x56>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *data++);
 80210d4:	687b      	ldr	r3, [r7, #4]
 80210d6:	1d1a      	adds	r2, r3, #4
 80210d8:	607a      	str	r2, [r7, #4]
 80210da:	681b      	ldr	r3, [r3, #0]
 80210dc:	4618      	mov	r0, r3
 80210de:	f7ff fc6d 	bl	80209bc <__aeabi_f2ulz>
 80210e2:	4603      	mov	r3, r0
 80210e4:	460c      	mov	r4, r1
 80210e6:	461a      	mov	r2, r3
 80210e8:	4623      	mov	r3, r4
 80210ea:	68b9      	ldr	r1, [r7, #8]
 80210ec:	2002      	movs	r0, #2
 80210ee:	f006 f98d 	bl	802740c <HAL_FLASH_Program>
 80210f2:	4603      	mov	r3, r0
 80210f4:	75fb      	strb	r3, [r7, #23]
        address += 4;
 80210f6:	68bb      	ldr	r3, [r7, #8]
 80210f8:	3304      	adds	r3, #4
 80210fa:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 80210fc:	7dfb      	ldrb	r3, [r7, #23]
 80210fe:	2b00      	cmp	r3, #0
 8021100:	d103      	bne.n	802110a <_ZN5Flash10StoreFloatEmPfm+0x54>
    for(uint32_t i = 0; i < number; i++)
 8021102:	693b      	ldr	r3, [r7, #16]
 8021104:	3301      	adds	r3, #1
 8021106:	613b      	str	r3, [r7, #16]
 8021108:	e7e0      	b.n	80210cc <_ZN5Flash10StoreFloatEmPfm+0x16>
        if(result != HAL_OK) break;
 802110a:	bf00      	nop
    }

    HAL_FLASH_Lock();
 802110c:	f006 f9f4 	bl	80274f8 <HAL_FLASH_Lock>

    return result == HAL_OK;
 8021110:	7dfb      	ldrb	r3, [r7, #23]
 8021112:	2b00      	cmp	r3, #0
 8021114:	bf0c      	ite	eq
 8021116:	2301      	moveq	r3, #1
 8021118:	2300      	movne	r3, #0
 802111a:	b2db      	uxtb	r3, r3
}
 802111c:	4618      	mov	r0, r3
 802111e:	371c      	adds	r7, #28
 8021120:	46bd      	mov	sp, r7
 8021122:	bd90      	pop	{r4, r7, pc}

08021124 <_ZN5Flash4LoadEPvmm>:

void Flash::Load(void *data, uint32_t address, uint32_t size)
{
 8021124:	b580      	push	{r7, lr}
 8021126:	b084      	sub	sp, #16
 8021128:	af00      	add	r7, sp, #0
 802112a:	60f8      	str	r0, [r7, #12]
 802112c:	60b9      	str	r1, [r7, #8]
 802112e:	607a      	str	r2, [r7, #4]
 8021130:	603b      	str	r3, [r7, #0]
    memcpy(data, reinterpret_cast<uint32_t*>(address), size);
 8021132:	687b      	ldr	r3, [r7, #4]
 8021134:	683a      	ldr	r2, [r7, #0]
 8021136:	4619      	mov	r1, r3
 8021138:	68b8      	ldr	r0, [r7, #8]
 802113a:	f009 f913 	bl	802a364 <memcpy>
}
 802113e:	bf00      	nop
 8021140:	3710      	adds	r7, #16
 8021142:	46bd      	mov	sp, r7
 8021144:	bd80      	pop	{r7, pc}

08021146 <_ZN5Flash14CheckBlankByteEmm>:

bool Flash::CheckBlankByte(uint32_t address, uint32_t number)
{
 8021146:	b5b0      	push	{r4, r5, r7, lr}
 8021148:	b088      	sub	sp, #32
 802114a:	af00      	add	r7, sp, #0
 802114c:	60f8      	str	r0, [r7, #12]
 802114e:	60b9      	str	r1, [r7, #8]
 8021150:	607a      	str	r2, [r7, #4]

    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);

    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;

    return true;
 8021152:	466b      	mov	r3, sp
 8021154:	461d      	mov	r5, r3
    uint8_t byte[number];
 8021156:	687b      	ldr	r3, [r7, #4]
 8021158:	1e58      	subs	r0, r3, #1
 802115a:	61b8      	str	r0, [r7, #24]
 802115c:	4603      	mov	r3, r0
 802115e:	3301      	adds	r3, #1
 8021160:	4619      	mov	r1, r3
 8021162:	f04f 0200 	mov.w	r2, #0
 8021166:	f04f 0300 	mov.w	r3, #0
 802116a:	f04f 0400 	mov.w	r4, #0
 802116e:	00d4      	lsls	r4, r2, #3
 8021170:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8021174:	00cb      	lsls	r3, r1, #3
 8021176:	4603      	mov	r3, r0
 8021178:	3301      	adds	r3, #1
 802117a:	4619      	mov	r1, r3
 802117c:	f04f 0200 	mov.w	r2, #0
 8021180:	f04f 0300 	mov.w	r3, #0
 8021184:	f04f 0400 	mov.w	r4, #0
 8021188:	00d4      	lsls	r4, r2, #3
 802118a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 802118e:	00cb      	lsls	r3, r1, #3
 8021190:	4603      	mov	r3, r0
 8021192:	3301      	adds	r3, #1
 8021194:	3307      	adds	r3, #7
 8021196:	08db      	lsrs	r3, r3, #3
 8021198:	00db      	lsls	r3, r3, #3
 802119a:	ebad 0d03 	sub.w	sp, sp, r3
 802119e:	466b      	mov	r3, sp
 80211a0:	3300      	adds	r3, #0
 80211a2:	617b      	str	r3, [r7, #20]
    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);
 80211a4:	697b      	ldr	r3, [r7, #20]
 80211a6:	68b9      	ldr	r1, [r7, #8]
 80211a8:	687a      	ldr	r2, [r7, #4]
 80211aa:	4618      	mov	r0, r3
 80211ac:	f009 f8da 	bl	802a364 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;
 80211b0:	2300      	movs	r3, #0
 80211b2:	61fb      	str	r3, [r7, #28]
 80211b4:	69fa      	ldr	r2, [r7, #28]
 80211b6:	687b      	ldr	r3, [r7, #4]
 80211b8:	429a      	cmp	r2, r3
 80211ba:	d20b      	bcs.n	80211d4 <_ZN5Flash14CheckBlankByteEmm+0x8e>
 80211bc:	697a      	ldr	r2, [r7, #20]
 80211be:	69fb      	ldr	r3, [r7, #28]
 80211c0:	4413      	add	r3, r2
 80211c2:	781b      	ldrb	r3, [r3, #0]
 80211c4:	2bff      	cmp	r3, #255	; 0xff
 80211c6:	d001      	beq.n	80211cc <_ZN5Flash14CheckBlankByteEmm+0x86>
 80211c8:	2300      	movs	r3, #0
 80211ca:	e004      	b.n	80211d6 <_ZN5Flash14CheckBlankByteEmm+0x90>
 80211cc:	69fb      	ldr	r3, [r7, #28]
 80211ce:	3301      	adds	r3, #1
 80211d0:	61fb      	str	r3, [r7, #28]
 80211d2:	e7ef      	b.n	80211b4 <_ZN5Flash14CheckBlankByteEmm+0x6e>
    return true;
 80211d4:	2301      	movs	r3, #1
 80211d6:	46ad      	mov	sp, r5
}
 80211d8:	4618      	mov	r0, r3
 80211da:	3720      	adds	r7, #32
 80211dc:	46bd      	mov	sp, r7
 80211de:	bdb0      	pop	{r4, r5, r7, pc}

080211e0 <_ZN5Flash18CheckBlankHalfwordEmm>:

bool Flash::CheckBlankHalfword(uint32_t address, uint32_t number)
{
 80211e0:	b5b0      	push	{r4, r5, r7, lr}
 80211e2:	b088      	sub	sp, #32
 80211e4:	af00      	add	r7, sp, #0
 80211e6:	60f8      	str	r0, [r7, #12]
 80211e8:	60b9      	str	r1, [r7, #8]
 80211ea:	607a      	str	r2, [r7, #4]

    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);

    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;

    return true;
 80211ec:	466b      	mov	r3, sp
 80211ee:	461d      	mov	r5, r3
    uint16_t half[number];
 80211f0:	687b      	ldr	r3, [r7, #4]
 80211f2:	1e58      	subs	r0, r3, #1
 80211f4:	61b8      	str	r0, [r7, #24]
 80211f6:	4603      	mov	r3, r0
 80211f8:	3301      	adds	r3, #1
 80211fa:	4619      	mov	r1, r3
 80211fc:	f04f 0200 	mov.w	r2, #0
 8021200:	f04f 0300 	mov.w	r3, #0
 8021204:	f04f 0400 	mov.w	r4, #0
 8021208:	0114      	lsls	r4, r2, #4
 802120a:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 802120e:	010b      	lsls	r3, r1, #4
 8021210:	4603      	mov	r3, r0
 8021212:	3301      	adds	r3, #1
 8021214:	4619      	mov	r1, r3
 8021216:	f04f 0200 	mov.w	r2, #0
 802121a:	f04f 0300 	mov.w	r3, #0
 802121e:	f04f 0400 	mov.w	r4, #0
 8021222:	0114      	lsls	r4, r2, #4
 8021224:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021228:	010b      	lsls	r3, r1, #4
 802122a:	4603      	mov	r3, r0
 802122c:	3301      	adds	r3, #1
 802122e:	005b      	lsls	r3, r3, #1
 8021230:	3301      	adds	r3, #1
 8021232:	3307      	adds	r3, #7
 8021234:	08db      	lsrs	r3, r3, #3
 8021236:	00db      	lsls	r3, r3, #3
 8021238:	ebad 0d03 	sub.w	sp, sp, r3
 802123c:	466b      	mov	r3, sp
 802123e:	3301      	adds	r3, #1
 8021240:	085b      	lsrs	r3, r3, #1
 8021242:	005b      	lsls	r3, r3, #1
 8021244:	617b      	str	r3, [r7, #20]
    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);
 8021246:	6978      	ldr	r0, [r7, #20]
 8021248:	68b9      	ldr	r1, [r7, #8]
 802124a:	687b      	ldr	r3, [r7, #4]
 802124c:	005b      	lsls	r3, r3, #1
 802124e:	461a      	mov	r2, r3
 8021250:	f009 f888 	bl	802a364 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;
 8021254:	2300      	movs	r3, #0
 8021256:	61fb      	str	r3, [r7, #28]
 8021258:	69fa      	ldr	r2, [r7, #28]
 802125a:	687b      	ldr	r3, [r7, #4]
 802125c:	429a      	cmp	r2, r3
 802125e:	d20d      	bcs.n	802127c <_ZN5Flash18CheckBlankHalfwordEmm+0x9c>
 8021260:	697b      	ldr	r3, [r7, #20]
 8021262:	69fa      	ldr	r2, [r7, #28]
 8021264:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802126c:	4293      	cmp	r3, r2
 802126e:	d001      	beq.n	8021274 <_ZN5Flash18CheckBlankHalfwordEmm+0x94>
 8021270:	2300      	movs	r3, #0
 8021272:	e004      	b.n	802127e <_ZN5Flash18CheckBlankHalfwordEmm+0x9e>
 8021274:	69fb      	ldr	r3, [r7, #28]
 8021276:	3301      	adds	r3, #1
 8021278:	61fb      	str	r3, [r7, #28]
 802127a:	e7ed      	b.n	8021258 <_ZN5Flash18CheckBlankHalfwordEmm+0x78>
    return true;
 802127c:	2301      	movs	r3, #1
 802127e:	46ad      	mov	sp, r5
}
 8021280:	4618      	mov	r0, r3
 8021282:	3720      	adds	r7, #32
 8021284:	46bd      	mov	sp, r7
 8021286:	bdb0      	pop	{r4, r5, r7, pc}

08021288 <_ZN5Flash14CheckBlankWordEmm>:

bool Flash::CheckBlankWord(uint32_t address, uint32_t number)
{
 8021288:	b5b0      	push	{r4, r5, r7, lr}
 802128a:	b088      	sub	sp, #32
 802128c:	af00      	add	r7, sp, #0
 802128e:	60f8      	str	r0, [r7, #12]
 8021290:	60b9      	str	r1, [r7, #8]
 8021292:	607a      	str	r2, [r7, #4]

    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);

    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;

    return true;
 8021294:	466b      	mov	r3, sp
 8021296:	461d      	mov	r5, r3
    uint32_t word[number];
 8021298:	687b      	ldr	r3, [r7, #4]
 802129a:	1e58      	subs	r0, r3, #1
 802129c:	61b8      	str	r0, [r7, #24]
 802129e:	4603      	mov	r3, r0
 80212a0:	3301      	adds	r3, #1
 80212a2:	4619      	mov	r1, r3
 80212a4:	f04f 0200 	mov.w	r2, #0
 80212a8:	f04f 0300 	mov.w	r3, #0
 80212ac:	f04f 0400 	mov.w	r4, #0
 80212b0:	0154      	lsls	r4, r2, #5
 80212b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80212b6:	014b      	lsls	r3, r1, #5
 80212b8:	4603      	mov	r3, r0
 80212ba:	3301      	adds	r3, #1
 80212bc:	4619      	mov	r1, r3
 80212be:	f04f 0200 	mov.w	r2, #0
 80212c2:	f04f 0300 	mov.w	r3, #0
 80212c6:	f04f 0400 	mov.w	r4, #0
 80212ca:	0154      	lsls	r4, r2, #5
 80212cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80212d0:	014b      	lsls	r3, r1, #5
 80212d2:	4603      	mov	r3, r0
 80212d4:	3301      	adds	r3, #1
 80212d6:	009b      	lsls	r3, r3, #2
 80212d8:	3303      	adds	r3, #3
 80212da:	3307      	adds	r3, #7
 80212dc:	08db      	lsrs	r3, r3, #3
 80212de:	00db      	lsls	r3, r3, #3
 80212e0:	ebad 0d03 	sub.w	sp, sp, r3
 80212e4:	466b      	mov	r3, sp
 80212e6:	3303      	adds	r3, #3
 80212e8:	089b      	lsrs	r3, r3, #2
 80212ea:	009b      	lsls	r3, r3, #2
 80212ec:	617b      	str	r3, [r7, #20]
    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);
 80212ee:	6978      	ldr	r0, [r7, #20]
 80212f0:	68b9      	ldr	r1, [r7, #8]
 80212f2:	687b      	ldr	r3, [r7, #4]
 80212f4:	009b      	lsls	r3, r3, #2
 80212f6:	461a      	mov	r2, r3
 80212f8:	f009 f834 	bl	802a364 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;
 80212fc:	2300      	movs	r3, #0
 80212fe:	61fb      	str	r3, [r7, #28]
 8021300:	69fa      	ldr	r2, [r7, #28]
 8021302:	687b      	ldr	r3, [r7, #4]
 8021304:	429a      	cmp	r2, r3
 8021306:	d20c      	bcs.n	8021322 <_ZN5Flash14CheckBlankWordEmm+0x9a>
 8021308:	697b      	ldr	r3, [r7, #20]
 802130a:	69fa      	ldr	r2, [r7, #28]
 802130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021314:	d001      	beq.n	802131a <_ZN5Flash14CheckBlankWordEmm+0x92>
 8021316:	2300      	movs	r3, #0
 8021318:	e004      	b.n	8021324 <_ZN5Flash14CheckBlankWordEmm+0x9c>
 802131a:	69fb      	ldr	r3, [r7, #28]
 802131c:	3301      	adds	r3, #1
 802131e:	61fb      	str	r3, [r7, #28]
 8021320:	e7ee      	b.n	8021300 <_ZN5Flash14CheckBlankWordEmm+0x78>
    return true;
 8021322:	2301      	movs	r3, #1
 8021324:	46ad      	mov	sp, r5
 8021326:	4618      	mov	r0, r3
 8021328:	3720      	adds	r7, #32
 802132a:	46bd      	mov	sp, r7
 802132c:	bdb0      	pop	{r4, r5, r7, pc}

0802132e <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"

Iim42652::Iim42652() {}
 802132e:	b480      	push	{r7}
 8021330:	b083      	sub	sp, #12
 8021332:	af00      	add	r7, sp, #0
 8021334:	6078      	str	r0, [r7, #4]
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	4618      	mov	r0, r3
 802133a:	370c      	adds	r7, #12
 802133c:	46bd      	mov	sp, r7
 802133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021342:	4770      	bx	lr

08021344 <_ZN8Iim426524ReadEhc>:

    return 0x09;
}

uint8_t Iim42652::Read(uint8_t send_address, char imu_ic_lr)
{
 8021344:	b580      	push	{r7, lr}
 8021346:	b084      	sub	sp, #16
 8021348:	af00      	add	r7, sp, #0
 802134a:	6078      	str	r0, [r7, #4]
 802134c:	460b      	mov	r3, r1
 802134e:	70fb      	strb	r3, [r7, #3]
 8021350:	4613      	mov	r3, r2
 8021352:	70bb      	strb	r3, [r7, #2]
    uint8_t receive_reset_value = 0x00;
 8021354:	2300      	movs	r3, #0
 8021356:	73fb      	strb	r3, [r7, #15]

    send_address = send_address | 0x80; // Read 1--- ----
 8021358:	78fb      	ldrb	r3, [r7, #3]
 802135a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802135e:	b2db      	uxtb	r3, r3
 8021360:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 8021362:	78bb      	ldrb	r3, [r7, #2]
 8021364:	2b4c      	cmp	r3, #76	; 0x4c
 8021366:	d106      	bne.n	8021376 <_ZN8Iim426524ReadEhc+0x32>
 8021368:	2200      	movs	r2, #0
 802136a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802136e:	4819      	ldr	r0, [pc, #100]	; (80213d4 <_ZN8Iim426524ReadEhc+0x90>)
 8021370:	f006 fcd4 	bl	8027d1c <HAL_GPIO_WritePin>
 8021374:	e008      	b.n	8021388 <_ZN8Iim426524ReadEhc+0x44>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 8021376:	78bb      	ldrb	r3, [r7, #2]
 8021378:	2b52      	cmp	r3, #82	; 0x52
 802137a:	d105      	bne.n	8021388 <_ZN8Iim426524ReadEhc+0x44>
 802137c:	2200      	movs	r2, #0
 802137e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021382:	4815      	ldr	r0, [pc, #84]	; (80213d8 <_ZN8Iim426524ReadEhc+0x94>)
 8021384:	f006 fcca 	bl	8027d1c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 8021388:	1cf9      	adds	r1, r7, #3
 802138a:	2364      	movs	r3, #100	; 0x64
 802138c:	2201      	movs	r2, #1
 802138e:	4813      	ldr	r0, [pc, #76]	; (80213dc <_ZN8Iim426524ReadEhc+0x98>)
 8021390:	f007 faa2 	bl	80288d8 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &receive_reset_value, 1, 100);
 8021394:	f107 010f 	add.w	r1, r7, #15
 8021398:	2364      	movs	r3, #100	; 0x64
 802139a:	2201      	movs	r2, #1
 802139c:	480f      	ldr	r0, [pc, #60]	; (80213dc <_ZN8Iim426524ReadEhc+0x98>)
 802139e:	f007 fbcf 	bl	8028b40 <HAL_SPI_Receive>

    if(imu_ic_lr == 'L') CS_SET_L;
 80213a2:	78bb      	ldrb	r3, [r7, #2]
 80213a4:	2b4c      	cmp	r3, #76	; 0x4c
 80213a6:	d106      	bne.n	80213b6 <_ZN8Iim426524ReadEhc+0x72>
 80213a8:	2201      	movs	r2, #1
 80213aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80213ae:	4809      	ldr	r0, [pc, #36]	; (80213d4 <_ZN8Iim426524ReadEhc+0x90>)
 80213b0:	f006 fcb4 	bl	8027d1c <HAL_GPIO_WritePin>
 80213b4:	e008      	b.n	80213c8 <_ZN8Iim426524ReadEhc+0x84>
    else if(imu_ic_lr == 'R') CS_SET_R;
 80213b6:	78bb      	ldrb	r3, [r7, #2]
 80213b8:	2b52      	cmp	r3, #82	; 0x52
 80213ba:	d105      	bne.n	80213c8 <_ZN8Iim426524ReadEhc+0x84>
 80213bc:	2201      	movs	r2, #1
 80213be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80213c2:	4805      	ldr	r0, [pc, #20]	; (80213d8 <_ZN8Iim426524ReadEhc+0x94>)
 80213c4:	f006 fcaa 	bl	8027d1c <HAL_GPIO_WritePin>
    
    return receive_reset_value;
 80213c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80213ca:	4618      	mov	r0, r3
 80213cc:	3710      	adds	r7, #16
 80213ce:	46bd      	mov	sp, r7
 80213d0:	bd80      	pop	{r7, pc}
 80213d2:	bf00      	nop
 80213d4:	40020400 	.word	0x40020400
 80213d8:	40020000 	.word	0x40020000
 80213dc:	200008e4 	.word	0x200008e4

080213e0 <_ZN8Iim426529Read2ByteEhhc>:

    return CheckRead(send_address, send_data, imu_ic_lr);
}

int16_t Iim42652::Read2Byte(uint8_t upper_address, uint8_t lower_address, char imu_ic_lr)
{
 80213e0:	b580      	push	{r7, lr}
 80213e2:	b084      	sub	sp, #16
 80213e4:	af00      	add	r7, sp, #0
 80213e6:	6078      	str	r0, [r7, #4]
 80213e8:	4608      	mov	r0, r1
 80213ea:	4611      	mov	r1, r2
 80213ec:	461a      	mov	r2, r3
 80213ee:	4603      	mov	r3, r0
 80213f0:	70fb      	strb	r3, [r7, #3]
 80213f2:	460b      	mov	r3, r1
 80213f4:	70bb      	strb	r3, [r7, #2]
 80213f6:	4613      	mov	r3, r2
 80213f8:	707b      	strb	r3, [r7, #1]
    int16_t upper_receive, lower_receive;

    upper_receive = static_cast<int16_t>(Read(upper_address, imu_ic_lr));
 80213fa:	787a      	ldrb	r2, [r7, #1]
 80213fc:	78fb      	ldrb	r3, [r7, #3]
 80213fe:	4619      	mov	r1, r3
 8021400:	6878      	ldr	r0, [r7, #4]
 8021402:	f7ff ff9f 	bl	8021344 <_ZN8Iim426524ReadEhc>
 8021406:	4603      	mov	r3, r0
 8021408:	81fb      	strh	r3, [r7, #14]
    lower_receive = static_cast<int16_t>(Read(lower_address, imu_ic_lr));
 802140a:	787a      	ldrb	r2, [r7, #1]
 802140c:	78bb      	ldrb	r3, [r7, #2]
 802140e:	4619      	mov	r1, r3
 8021410:	6878      	ldr	r0, [r7, #4]
 8021412:	f7ff ff97 	bl	8021344 <_ZN8Iim426524ReadEhc>
 8021416:	4603      	mov	r3, r0
 8021418:	81bb      	strh	r3, [r7, #12]

    return (upper_receive << 8) | lower_receive;
 802141a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802141e:	021b      	lsls	r3, r3, #8
 8021420:	b21a      	sxth	r2, r3
 8021422:	89bb      	ldrh	r3, [r7, #12]
 8021424:	4313      	orrs	r3, r2
 8021426:	b21b      	sxth	r3, r3
}
 8021428:	4618      	mov	r0, r3
 802142a:	3710      	adds	r7, #16
 802142c:	46bd      	mov	sp, r7
 802142e:	bd80      	pop	{r7, pc}

08021430 <_ZN8Iim426526UpdateEv>:

void Iim42652::Update()
{
 8021430:	b590      	push	{r4, r7, lr}
 8021432:	b089      	sub	sp, #36	; 0x24
 8021434:	af00      	add	r7, sp, #0
 8021436:	6078      	str	r0, [r7, #4]
    int16_t raw_z_l = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
 8021438:	234c      	movs	r3, #76	; 0x4c
 802143a:	222a      	movs	r2, #42	; 0x2a
 802143c:	2129      	movs	r1, #41	; 0x29
 802143e:	6878      	ldr	r0, [r7, #4]
 8021440:	f7ff ffce 	bl	80213e0 <_ZN8Iim426529Read2ByteEhhc>
 8021444:	4603      	mov	r3, r0
 8021446:	83fb      	strh	r3, [r7, #30]
    int16_t raw_z_r = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 8021448:	2352      	movs	r3, #82	; 0x52
 802144a:	222a      	movs	r2, #42	; 0x2a
 802144c:	2129      	movs	r1, #41	; 0x29
 802144e:	6878      	ldr	r0, [r7, #4]
 8021450:	f7ff ffc6 	bl	80213e0 <_ZN8Iim426529Read2ByteEhhc>
 8021454:	4603      	mov	r3, r0
 8021456:	83bb      	strh	r3, [r7, #28]
    double avg_raw_z = static_cast<double>(raw_z_l + raw_z_r) / 2.0;
 8021458:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 802145c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8021460:	4413      	add	r3, r2
 8021462:	4618      	mov	r0, r3
 8021464:	f7fe ff3e 	bl	80202e4 <__aeabi_i2d>
 8021468:	f04f 0200 	mov.w	r2, #0
 802146c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021470:	f7ff f8cc 	bl	802060c <__aeabi_ddiv>
 8021474:	4603      	mov	r3, r0
 8021476:	460c      	mov	r4, r1
 8021478:	e9c7 3404 	strd	r3, r4, [r7, #16]
    double degree_z = avg_raw_z * NORMAL_FUCOR_DPS * TIM6_PERIOD;
 802147c:	a316      	add	r3, pc, #88	; (adr r3, 80214d8 <_ZN8Iim426526UpdateEv+0xa8>)
 802147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021482:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8021486:	f7fe ff97 	bl	80203b8 <__aeabi_dmul>
 802148a:	4603      	mov	r3, r0
 802148c:	460c      	mov	r4, r1
 802148e:	4618      	mov	r0, r3
 8021490:	4621      	mov	r1, r4
 8021492:	f04f 0200 	mov.w	r2, #0
 8021496:	4b0e      	ldr	r3, [pc, #56]	; (80214d0 <_ZN8Iim426526UpdateEv+0xa0>)
 8021498:	f7fe ff8e 	bl	80203b8 <__aeabi_dmul>
 802149c:	4603      	mov	r3, r0
 802149e:	460c      	mov	r4, r1
 80214a0:	e9c7 3402 	strd	r3, r4, [r7, #8]

    degree_stack_z_ += degree_z;
 80214a4:	687b      	ldr	r3, [r7, #4]
 80214a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80214aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80214ae:	f7fe fdcd 	bl	802004c <__adddf3>
 80214b2:	4603      	mov	r3, r0
 80214b4:	460c      	mov	r4, r1
 80214b6:	687a      	ldr	r2, [r7, #4]
 80214b8:	e9c2 3400 	strd	r3, r4, [r2]

#ifdef DEBUG_MODE
    g_deg_z = degree_z;
 80214bc:	4a05      	ldr	r2, [pc, #20]	; (80214d4 <_ZN8Iim426526UpdateEv+0xa4>)
 80214be:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80214c2:	e9c2 3400 	strd	r3, r4, [r2]
#endif // DEBUG_MODE
}
 80214c6:	bf00      	nop
 80214c8:	3724      	adds	r7, #36	; 0x24
 80214ca:	46bd      	mov	sp, r7
 80214cc:	bd90      	pop	{r4, r7, pc}
 80214ce:	bf00      	nop
 80214d0:	3ff40000 	.word	0x3ff40000
 80214d4:	20000268 	.word	0x20000268
 80214d8:	ddb1209f 	.word	0xddb1209f
 80214dc:	3faf403d 	.word	0x3faf403d

080214e0 <_ZN8Iim4265217ResetDegreeStackZEv>:

void Iim42652::ResetDegreeStackZ()
{
 80214e0:	b490      	push	{r4, r7}
 80214e2:	b082      	sub	sp, #8
 80214e4:	af00      	add	r7, sp, #0
 80214e6:	6078      	str	r0, [r7, #4]
    degree_stack_z_ = 0.0;
 80214e8:	687a      	ldr	r2, [r7, #4]
 80214ea:	f04f 0300 	mov.w	r3, #0
 80214ee:	f04f 0400 	mov.w	r4, #0
 80214f2:	e9c2 3400 	strd	r3, r4, [r2]
}
 80214f6:	bf00      	nop
 80214f8:	3708      	adds	r7, #8
 80214fa:	46bd      	mov	sp, r7
 80214fc:	bc90      	pop	{r4, r7}
 80214fe:	4770      	bx	lr

08021500 <_ZN8Iim4265215GetDegreeStackZEv>:

double Iim42652::GetDegreeStackZ()
{
 8021500:	b490      	push	{r4, r7}
 8021502:	b082      	sub	sp, #8
 8021504:	af00      	add	r7, sp, #0
 8021506:	6078      	str	r0, [r7, #4]
    return degree_stack_z_;
 8021508:	687b      	ldr	r3, [r7, #4]
 802150a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802150e:	ec44 3b17 	vmov	d7, r3, r4
}
 8021512:	eeb0 0a47 	vmov.f32	s0, s14
 8021516:	eef0 0a67 	vmov.f32	s1, s15
 802151a:	3708      	adds	r7, #8
 802151c:	46bd      	mov	sp, r7
 802151e:	bc90      	pop	{r4, r7}
 8021520:	4770      	bx	lr
	...

08021524 <_ZN3Led10ColorOrderEc>:
#include "led.hpp"

void Led::ColorOrder(char color)
{
 8021524:	b580      	push	{r7, lr}
 8021526:	b082      	sub	sp, #8
 8021528:	af00      	add	r7, sp, #0
 802152a:	6078      	str	r0, [r7, #4]
 802152c:	460b      	mov	r3, r1
 802152e:	70fb      	strb	r3, [r7, #3]
    switch(color)
 8021530:	78fb      	ldrb	r3, [r7, #3]
 8021532:	3b42      	subs	r3, #66	; 0x42
 8021534:	2b17      	cmp	r3, #23
 8021536:	f200 80b8 	bhi.w	80216aa <_ZN3Led10ColorOrderEc+0x186>
 802153a:	a201      	add	r2, pc, #4	; (adr r2, 8021540 <_ZN3Led10ColorOrderEc+0x1c>)
 802153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021540:	080215ed 	.word	0x080215ed
 8021544:	08021639 	.word	0x08021639
 8021548:	080216ab 	.word	0x080216ab
 802154c:	080216ab 	.word	0x080216ab
 8021550:	080216ab 	.word	0x080216ab
 8021554:	080215c7 	.word	0x080215c7
 8021558:	080216ab 	.word	0x080216ab
 802155c:	080216ab 	.word	0x080216ab
 8021560:	080216ab 	.word	0x080216ab
 8021564:	080216ab 	.word	0x080216ab
 8021568:	080216ab 	.word	0x080216ab
 802156c:	0802165f 	.word	0x0802165f
 8021570:	080216ab 	.word	0x080216ab
 8021574:	080216ab 	.word	0x080216ab
 8021578:	080216ab 	.word	0x080216ab
 802157c:	080216ab 	.word	0x080216ab
 8021580:	080215a1 	.word	0x080215a1
 8021584:	080216ab 	.word	0x080216ab
 8021588:	080216ab 	.word	0x080216ab
 802158c:	080216ab 	.word	0x080216ab
 8021590:	080216ab 	.word	0x080216ab
 8021594:	08021685 	.word	0x08021685
 8021598:	080216ab 	.word	0x080216ab
 802159c:	08021613 	.word	0x08021613
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 80215a0:	2200      	movs	r2, #0
 80215a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80215a6:	484c      	ldr	r0, [pc, #304]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80215a8:	f006 fbb8 	bl	8027d1c <HAL_GPIO_WritePin>
 80215ac:	2201      	movs	r2, #1
 80215ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80215b2:	4849      	ldr	r0, [pc, #292]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80215b4:	f006 fbb2 	bl	8027d1c <HAL_GPIO_WritePin>
 80215b8:	2201      	movs	r2, #1
 80215ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80215be:	4846      	ldr	r0, [pc, #280]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80215c0:	f006 fbac 	bl	8027d1c <HAL_GPIO_WritePin>
 80215c4:	e084      	b.n	80216d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 80215c6:	2201      	movs	r2, #1
 80215c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80215cc:	4842      	ldr	r0, [pc, #264]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80215ce:	f006 fba5 	bl	8027d1c <HAL_GPIO_WritePin>
 80215d2:	2200      	movs	r2, #0
 80215d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80215d8:	483f      	ldr	r0, [pc, #252]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80215da:	f006 fb9f 	bl	8027d1c <HAL_GPIO_WritePin>
 80215de:	2201      	movs	r2, #1
 80215e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80215e4:	483c      	ldr	r0, [pc, #240]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80215e6:	f006 fb99 	bl	8027d1c <HAL_GPIO_WritePin>
 80215ea:	e071      	b.n	80216d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 80215ec:	2201      	movs	r2, #1
 80215ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80215f2:	4839      	ldr	r0, [pc, #228]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80215f4:	f006 fb92 	bl	8027d1c <HAL_GPIO_WritePin>
 80215f8:	2201      	movs	r2, #1
 80215fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80215fe:	4836      	ldr	r0, [pc, #216]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021600:	f006 fb8c 	bl	8027d1c <HAL_GPIO_WritePin>
 8021604:	2200      	movs	r2, #0
 8021606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802160a:	4833      	ldr	r0, [pc, #204]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802160c:	f006 fb86 	bl	8027d1c <HAL_GPIO_WritePin>
 8021610:	e05e      	b.n	80216d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 8021612:	2200      	movs	r2, #0
 8021614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021618:	482f      	ldr	r0, [pc, #188]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802161a:	f006 fb7f 	bl	8027d1c <HAL_GPIO_WritePin>
 802161e:	2200      	movs	r2, #0
 8021620:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021624:	482c      	ldr	r0, [pc, #176]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021626:	f006 fb79 	bl	8027d1c <HAL_GPIO_WritePin>
 802162a:	2201      	movs	r2, #1
 802162c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021630:	4829      	ldr	r0, [pc, #164]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021632:	f006 fb73 	bl	8027d1c <HAL_GPIO_WritePin>
 8021636:	e04b      	b.n	80216d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 8021638:	2201      	movs	r2, #1
 802163a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802163e:	4826      	ldr	r0, [pc, #152]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021640:	f006 fb6c 	bl	8027d1c <HAL_GPIO_WritePin>
 8021644:	2200      	movs	r2, #0
 8021646:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802164a:	4823      	ldr	r0, [pc, #140]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802164c:	f006 fb66 	bl	8027d1c <HAL_GPIO_WritePin>
 8021650:	2200      	movs	r2, #0
 8021652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021656:	4820      	ldr	r0, [pc, #128]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021658:	f006 fb60 	bl	8027d1c <HAL_GPIO_WritePin>
 802165c:	e038      	b.n	80216d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 802165e:	2200      	movs	r2, #0
 8021660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021664:	481c      	ldr	r0, [pc, #112]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021666:	f006 fb59 	bl	8027d1c <HAL_GPIO_WritePin>
 802166a:	2201      	movs	r2, #1
 802166c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021670:	4819      	ldr	r0, [pc, #100]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021672:	f006 fb53 	bl	8027d1c <HAL_GPIO_WritePin>
 8021676:	2200      	movs	r2, #0
 8021678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802167c:	4816      	ldr	r0, [pc, #88]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802167e:	f006 fb4d 	bl	8027d1c <HAL_GPIO_WritePin>
 8021682:	e025      	b.n	80216d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 8021684:	2200      	movs	r2, #0
 8021686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802168a:	4813      	ldr	r0, [pc, #76]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802168c:	f006 fb46 	bl	8027d1c <HAL_GPIO_WritePin>
 8021690:	2200      	movs	r2, #0
 8021692:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021696:	4810      	ldr	r0, [pc, #64]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021698:	f006 fb40 	bl	8027d1c <HAL_GPIO_WritePin>
 802169c:	2200      	movs	r2, #0
 802169e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80216a2:	480d      	ldr	r0, [pc, #52]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80216a4:	f006 fb3a 	bl	8027d1c <HAL_GPIO_WritePin>
 80216a8:	e012      	b.n	80216d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 80216aa:	2201      	movs	r2, #1
 80216ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80216b0:	4809      	ldr	r0, [pc, #36]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80216b2:	f006 fb33 	bl	8027d1c <HAL_GPIO_WritePin>
 80216b6:	2201      	movs	r2, #1
 80216b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80216bc:	4806      	ldr	r0, [pc, #24]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80216be:	f006 fb2d 	bl	8027d1c <HAL_GPIO_WritePin>
 80216c2:	2201      	movs	r2, #1
 80216c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80216c8:	4803      	ldr	r0, [pc, #12]	; (80216d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80216ca:	f006 fb27 	bl	8027d1c <HAL_GPIO_WritePin>
 80216ce:	bf00      	nop
    }
}
 80216d0:	bf00      	nop
 80216d2:	3708      	adds	r7, #8
 80216d4:	46bd      	mov	sp, r7
 80216d6:	bd80      	pop	{r7, pc}
 80216d8:	40020800 	.word	0x40020800

080216dc <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 80216dc:	b580      	push	{r7, lr}
 80216de:	b084      	sub	sp, #16
 80216e0:	af00      	add	r7, sp, #0
 80216e2:	6078      	str	r0, [r7, #4]
 80216e4:	4608      	mov	r0, r1
 80216e6:	4611      	mov	r1, r2
 80216e8:	461a      	mov	r2, r3
 80216ea:	4603      	mov	r3, r0
 80216ec:	70fb      	strb	r3, [r7, #3]
 80216ee:	460b      	mov	r3, r1
 80216f0:	70bb      	strb	r3, [r7, #2]
 80216f2:	4613      	mov	r3, r2
 80216f4:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 80216f6:	2300      	movs	r3, #0
 80216f8:	73fb      	strb	r3, [r7, #15]
 80216fa:	7bfa      	ldrb	r2, [r7, #15]
 80216fc:	78fb      	ldrb	r3, [r7, #3]
 80216fe:	429a      	cmp	r2, r3
 8021700:	d215      	bcs.n	802172e <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 8021702:	78bb      	ldrb	r3, [r7, #2]
 8021704:	4619      	mov	r1, r3
 8021706:	6878      	ldr	r0, [r7, #4]
 8021708:	f7ff ff0c 	bl	8021524 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 802170c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021710:	f004 fde6 	bl	80262e0 <HAL_Delay>
        ColorOrder(color_2);
 8021714:	787b      	ldrb	r3, [r7, #1]
 8021716:	4619      	mov	r1, r3
 8021718:	6878      	ldr	r0, [r7, #4]
 802171a:	f7ff ff03 	bl	8021524 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 802171e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021722:	f004 fddd 	bl	80262e0 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021726:	7bfb      	ldrb	r3, [r7, #15]
 8021728:	3301      	adds	r3, #1
 802172a:	73fb      	strb	r3, [r7, #15]
 802172c:	e7e5      	b.n	80216fa <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 802172e:	bf00      	nop
 8021730:	3710      	adds	r7, #16
 8021732:	46bd      	mov	sp, r7
 8021734:	bd80      	pop	{r7, pc}

08021736 <_ZN3Led7RainbowEh>:

void Led::Rainbow(uint8_t times)
{
 8021736:	b580      	push	{r7, lr}
 8021738:	b084      	sub	sp, #16
 802173a:	af00      	add	r7, sp, #0
 802173c:	6078      	str	r0, [r7, #4]
 802173e:	460b      	mov	r3, r1
 8021740:	70fb      	strb	r3, [r7, #3]
    for(uint8_t i = 0; i < times; i++)
 8021742:	2300      	movs	r3, #0
 8021744:	73fb      	strb	r3, [r7, #15]
 8021746:	7bfa      	ldrb	r2, [r7, #15]
 8021748:	78fb      	ldrb	r3, [r7, #3]
 802174a:	429a      	cmp	r2, r3
 802174c:	d233      	bcs.n	80217b6 <_ZN3Led7RainbowEh+0x80>
    {
        ColorOrder('R');
 802174e:	2152      	movs	r1, #82	; 0x52
 8021750:	6878      	ldr	r0, [r7, #4]
 8021752:	f7ff fee7 	bl	8021524 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021756:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802175a:	f004 fdc1 	bl	80262e0 <HAL_Delay>
        ColorOrder('Y');
 802175e:	2159      	movs	r1, #89	; 0x59
 8021760:	6878      	ldr	r0, [r7, #4]
 8021762:	f7ff fedf 	bl	8021524 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021766:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802176a:	f004 fdb9 	bl	80262e0 <HAL_Delay>
        ColorOrder('G');
 802176e:	2147      	movs	r1, #71	; 0x47
 8021770:	6878      	ldr	r0, [r7, #4]
 8021772:	f7ff fed7 	bl	8021524 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021776:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802177a:	f004 fdb1 	bl	80262e0 <HAL_Delay>
        ColorOrder('C');
 802177e:	2143      	movs	r1, #67	; 0x43
 8021780:	6878      	ldr	r0, [r7, #4]
 8021782:	f7ff fecf 	bl	8021524 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021786:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802178a:	f004 fda9 	bl	80262e0 <HAL_Delay>
        ColorOrder('B');
 802178e:	2142      	movs	r1, #66	; 0x42
 8021790:	6878      	ldr	r0, [r7, #4]
 8021792:	f7ff fec7 	bl	8021524 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021796:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802179a:	f004 fda1 	bl	80262e0 <HAL_Delay>
        ColorOrder('M');
 802179e:	214d      	movs	r1, #77	; 0x4d
 80217a0:	6878      	ldr	r0, [r7, #4]
 80217a2:	f7ff febf 	bl	8021524 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 80217a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80217aa:	f004 fd99 	bl	80262e0 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 80217ae:	7bfb      	ldrb	r3, [r7, #15]
 80217b0:	3301      	adds	r3, #1
 80217b2:	73fb      	strb	r3, [r7, #15]
 80217b4:	e7c7      	b.n	8021746 <_ZN3Led7RainbowEh+0x10>
    }
 80217b6:	bf00      	nop
 80217b8:	3710      	adds	r7, #16
 80217ba:	46bd      	mov	sp, r7
 80217bc:	bd80      	pop	{r7, pc}

080217be <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_()
 80217be:	b490      	push	{r4, r7}
 80217c0:	b082      	sub	sp, #8
 80217c2:	af00      	add	r7, sp, #0
 80217c4:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_()
                         , max_line_sensors_valu_()
                         , min_line_sensors_valu_()
                         , line_sensors_valu_()
                         , emergency_stop_flag_(false) {}
 80217c6:	687a      	ldr	r2, [r7, #4]
 80217c8:	230d      	movs	r3, #13
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	db04      	blt.n	80217d8 <_ZN10LineSensorC1Ev+0x1a>
 80217ce:	2100      	movs	r1, #0
 80217d0:	8011      	strh	r1, [r2, #0]
 80217d2:	3202      	adds	r2, #2
 80217d4:	3b01      	subs	r3, #1
 80217d6:	e7f8      	b.n	80217ca <_ZN10LineSensorC1Ev+0xc>
 80217d8:	687b      	ldr	r3, [r7, #4]
 80217da:	f103 021c 	add.w	r2, r3, #28
 80217de:	2309      	movs	r3, #9
 80217e0:	4610      	mov	r0, r2
 80217e2:	2b00      	cmp	r3, #0
 80217e4:	db0b      	blt.n	80217fe <_ZN10LineSensorC1Ev+0x40>
 80217e6:	4601      	mov	r1, r0
 80217e8:	220d      	movs	r2, #13
 80217ea:	2a00      	cmp	r2, #0
 80217ec:	db04      	blt.n	80217f8 <_ZN10LineSensorC1Ev+0x3a>
 80217ee:	2400      	movs	r4, #0
 80217f0:	800c      	strh	r4, [r1, #0]
 80217f2:	3102      	adds	r1, #2
 80217f4:	3a01      	subs	r2, #1
 80217f6:	e7f8      	b.n	80217ea <_ZN10LineSensorC1Ev+0x2c>
 80217f8:	301c      	adds	r0, #28
 80217fa:	3b01      	subs	r3, #1
 80217fc:	e7f1      	b.n	80217e2 <_ZN10LineSensorC1Ev+0x24>
 80217fe:	687b      	ldr	r3, [r7, #4]
 8021800:	f503 729a 	add.w	r2, r3, #308	; 0x134
 8021804:	230d      	movs	r3, #13
 8021806:	2b00      	cmp	r3, #0
 8021808:	db04      	blt.n	8021814 <_ZN10LineSensorC1Ev+0x56>
 802180a:	2100      	movs	r1, #0
 802180c:	8011      	strh	r1, [r2, #0]
 802180e:	3202      	adds	r2, #2
 8021810:	3b01      	subs	r3, #1
 8021812:	e7f8      	b.n	8021806 <_ZN10LineSensorC1Ev+0x48>
 8021814:	687b      	ldr	r3, [r7, #4]
 8021816:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 802181a:	230d      	movs	r3, #13
 802181c:	2b00      	cmp	r3, #0
 802181e:	db04      	blt.n	802182a <_ZN10LineSensorC1Ev+0x6c>
 8021820:	2100      	movs	r1, #0
 8021822:	8011      	strh	r1, [r2, #0]
 8021824:	3202      	adds	r2, #2
 8021826:	3b01      	subs	r3, #1
 8021828:	e7f8      	b.n	802181c <_ZN10LineSensorC1Ev+0x5e>
 802182a:	687b      	ldr	r3, [r7, #4]
 802182c:	f503 72b6 	add.w	r2, r3, #364	; 0x16c
 8021830:	230d      	movs	r3, #13
 8021832:	2b00      	cmp	r3, #0
 8021834:	db04      	blt.n	8021840 <_ZN10LineSensorC1Ev+0x82>
 8021836:	2100      	movs	r1, #0
 8021838:	8011      	strh	r1, [r2, #0]
 802183a:	3202      	adds	r2, #2
 802183c:	3b01      	subs	r3, #1
 802183e:	e7f8      	b.n	8021832 <_ZN10LineSensorC1Ev+0x74>
 8021840:	687b      	ldr	r3, [r7, #4]
 8021842:	2200      	movs	r2, #0
 8021844:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8021848:	687b      	ldr	r3, [r7, #4]
 802184a:	4618      	mov	r0, r3
 802184c:	3708      	adds	r7, #8
 802184e:	46bd      	mov	sp, r7
 8021850:	bc90      	pop	{r4, r7}
 8021852:	4770      	bx	lr

08021854 <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 8021854:	b580      	push	{r7, lr}
 8021856:	b082      	sub	sp, #8
 8021858:	af00      	add	r7, sp, #0
 802185a:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 802185c:	687b      	ldr	r3, [r7, #4]
 802185e:	220e      	movs	r2, #14
 8021860:	4619      	mov	r1, r3
 8021862:	4815      	ldr	r0, [pc, #84]	; (80218b8 <_ZN10LineSensor4InitEv+0x64>)
 8021864:	f004 fda2 	bl	80263ac <HAL_ADC_Start_DMA>
 8021868:	4603      	mov	r3, r0
 802186a:	2b00      	cmp	r3, #0
 802186c:	bf14      	ite	ne
 802186e:	2301      	movne	r3, #1
 8021870:	2300      	moveq	r3, #0
 8021872:	b2db      	uxtb	r3, r3
 8021874:	2b00      	cmp	r3, #0
 8021876:	d004      	beq.n	8021882 <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 8021878:	4b10      	ldr	r3, [pc, #64]	; (80218bc <_ZN10LineSensor4InitEv+0x68>)
 802187a:	2201      	movs	r2, #1
 802187c:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 802187e:	f002 f8fd 	bl	8023a7c <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 8021882:	2100      	movs	r1, #0
 8021884:	480e      	ldr	r0, [pc, #56]	; (80218c0 <_ZN10LineSensor4InitEv+0x6c>)
 8021886:	f007 fd91 	bl	80293ac <HAL_TIM_PWM_Start>
 802188a:	4603      	mov	r3, r0
 802188c:	2b00      	cmp	r3, #0
 802188e:	bf14      	ite	ne
 8021890:	2301      	movne	r3, #1
 8021892:	2300      	moveq	r3, #0
 8021894:	b2db      	uxtb	r3, r3
 8021896:	2b00      	cmp	r3, #0
 8021898:	d004      	beq.n	80218a4 <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 802189a:	4b0a      	ldr	r3, [pc, #40]	; (80218c4 <_ZN10LineSensor4InitEv+0x70>)
 802189c:	2201      	movs	r2, #1
 802189e:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 80218a0:	f002 f8ec 	bl	8023a7c <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 80218a4:	4b06      	ldr	r3, [pc, #24]	; (80218c0 <_ZN10LineSensor4InitEv+0x6c>)
 80218a6:	681b      	ldr	r3, [r3, #0]
 80218a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80218ac:	635a      	str	r2, [r3, #52]	; 0x34
}
 80218ae:	bf00      	nop
 80218b0:	3708      	adds	r7, #8
 80218b2:	46bd      	mov	sp, r7
 80218b4:	bd80      	pop	{r7, pc}
 80218b6:	bf00      	nop
 80218b8:	2000093c 	.word	0x2000093c
 80218bc:	200000bd 	.word	0x200000bd
 80218c0:	20000984 	.word	0x20000984
 80218c4:	200000be 	.word	0x200000be

080218c8 <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 80218c8:	b480      	push	{r7}
 80218ca:	b085      	sub	sp, #20
 80218cc:	af00      	add	r7, sp, #0
 80218ce:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80218d0:	2300      	movs	r3, #0
 80218d2:	60fb      	str	r3, [r7, #12]
 80218d4:	68fb      	ldr	r3, [r7, #12]
 80218d6:	2b0d      	cmp	r3, #13
 80218d8:	dc16      	bgt.n	8021908 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 80218da:	4b15      	ldr	r3, [pc, #84]	; (8021930 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 80218dc:	781b      	ldrb	r3, [r3, #0]
 80218de:	4619      	mov	r1, r3
 80218e0:	687b      	ldr	r3, [r7, #4]
 80218e2:	68fa      	ldr	r2, [r7, #12]
 80218e4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80218e8:	687a      	ldr	r2, [r7, #4]
 80218ea:	460b      	mov	r3, r1
 80218ec:	00db      	lsls	r3, r3, #3
 80218ee:	1a5b      	subs	r3, r3, r1
 80218f0:	005b      	lsls	r3, r3, #1
 80218f2:	68f9      	ldr	r1, [r7, #12]
 80218f4:	440b      	add	r3, r1
 80218f6:	330c      	adds	r3, #12
 80218f8:	005b      	lsls	r3, r3, #1
 80218fa:	4413      	add	r3, r2
 80218fc:	4602      	mov	r2, r0
 80218fe:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021900:	68fb      	ldr	r3, [r7, #12]
 8021902:	3301      	adds	r3, #1
 8021904:	60fb      	str	r3, [r7, #12]
 8021906:	e7e5      	b.n	80218d4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    if(times < CONSECUTIVE_TIMES) times++;
 8021908:	4b09      	ldr	r3, [pc, #36]	; (8021930 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 802190a:	781b      	ldrb	r3, [r3, #0]
 802190c:	2b09      	cmp	r3, #9
 802190e:	d806      	bhi.n	802191e <_ZN10LineSensor20StoreConsecutiveBuffEv+0x56>
 8021910:	4b07      	ldr	r3, [pc, #28]	; (8021930 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021912:	781b      	ldrb	r3, [r3, #0]
 8021914:	3301      	adds	r3, #1
 8021916:	b2da      	uxtb	r2, r3
 8021918:	4b05      	ldr	r3, [pc, #20]	; (8021930 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 802191a:	701a      	strb	r2, [r3, #0]
    else times = 0;
}
 802191c:	e002      	b.n	8021924 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5c>
    else times = 0;
 802191e:	4b04      	ldr	r3, [pc, #16]	; (8021930 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021920:	2200      	movs	r2, #0
 8021922:	701a      	strb	r2, [r3, #0]
}
 8021924:	bf00      	nop
 8021926:	3714      	adds	r7, #20
 8021928:	46bd      	mov	sp, r7
 802192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802192e:	4770      	bx	lr
 8021930:	2000003c 	.word	0x2000003c

08021934 <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 8021934:	b5b0      	push	{r4, r5, r7, lr}
 8021936:	b088      	sub	sp, #32
 8021938:	af00      	add	r7, sp, #0
 802193a:	60f8      	str	r0, [r7, #12]
 802193c:	60b9      	str	r1, [r7, #8]
 802193e:	4611      	mov	r1, r2
 8021940:	461a      	mov	r2, r3
 8021942:	460b      	mov	r3, r1
 8021944:	71fb      	strb	r3, [r7, #7]
 8021946:	4613      	mov	r3, r2
 8021948:	71bb      	strb	r3, [r7, #6]

    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else                                     array[i] = temp_array[right--];
    }
 802194a:	466b      	mov	r3, sp
 802194c:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 802194e:	79fa      	ldrb	r2, [r7, #7]
 8021950:	79bb      	ldrb	r3, [r7, #6]
 8021952:	429a      	cmp	r2, r3
 8021954:	f080 80ba 	bcs.w	8021acc <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 8021958:	79b8      	ldrb	r0, [r7, #6]
 802195a:	61b8      	str	r0, [r7, #24]
 802195c:	4603      	mov	r3, r0
 802195e:	3301      	adds	r3, #1
 8021960:	4619      	mov	r1, r3
 8021962:	f04f 0200 	mov.w	r2, #0
 8021966:	f04f 0300 	mov.w	r3, #0
 802196a:	f04f 0400 	mov.w	r4, #0
 802196e:	0114      	lsls	r4, r2, #4
 8021970:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021974:	010b      	lsls	r3, r1, #4
 8021976:	4603      	mov	r3, r0
 8021978:	3301      	adds	r3, #1
 802197a:	4619      	mov	r1, r3
 802197c:	f04f 0200 	mov.w	r2, #0
 8021980:	f04f 0300 	mov.w	r3, #0
 8021984:	f04f 0400 	mov.w	r4, #0
 8021988:	0114      	lsls	r4, r2, #4
 802198a:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 802198e:	010b      	lsls	r3, r1, #4
 8021990:	4603      	mov	r3, r0
 8021992:	3301      	adds	r3, #1
 8021994:	005b      	lsls	r3, r3, #1
 8021996:	3301      	adds	r3, #1
 8021998:	3307      	adds	r3, #7
 802199a:	08db      	lsrs	r3, r3, #3
 802199c:	00db      	lsls	r3, r3, #3
 802199e:	ebad 0d03 	sub.w	sp, sp, r3
 80219a2:	466b      	mov	r3, sp
 80219a4:	3301      	adds	r3, #1
 80219a6:	085b      	lsrs	r3, r3, #1
 80219a8:	005b      	lsls	r3, r3, #1
 80219aa:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 80219ac:	79fa      	ldrb	r2, [r7, #7]
 80219ae:	79bb      	ldrb	r3, [r7, #6]
 80219b0:	4413      	add	r3, r2
 80219b2:	0fda      	lsrs	r2, r3, #31
 80219b4:	4413      	add	r3, r2
 80219b6:	105b      	asrs	r3, r3, #1
 80219b8:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 80219ba:	7cfb      	ldrb	r3, [r7, #19]
 80219bc:	79fa      	ldrb	r2, [r7, #7]
 80219be:	68b9      	ldr	r1, [r7, #8]
 80219c0:	68f8      	ldr	r0, [r7, #12]
 80219c2:	f7ff ffb7 	bl	8021934 <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 80219c6:	7cfb      	ldrb	r3, [r7, #19]
 80219c8:	3301      	adds	r3, #1
 80219ca:	b2da      	uxtb	r2, r3
 80219cc:	79bb      	ldrb	r3, [r7, #6]
 80219ce:	68b9      	ldr	r1, [r7, #8]
 80219d0:	68f8      	ldr	r0, [r7, #12]
 80219d2:	f7ff ffaf 	bl	8021934 <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--)
 80219d6:	7cfb      	ldrb	r3, [r7, #19]
 80219d8:	77bb      	strb	r3, [r7, #30]
 80219da:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80219de:	79fb      	ldrb	r3, [r7, #7]
 80219e0:	429a      	cmp	r2, r3
 80219e2:	db11      	blt.n	8021a08 <_ZN10LineSensor9MergeSortEPthh+0xd4>
        temp_array[i] = array[i];
 80219e4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80219e8:	005b      	lsls	r3, r3, #1
 80219ea:	68ba      	ldr	r2, [r7, #8]
 80219ec:	4413      	add	r3, r2
 80219ee:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80219f2:	8819      	ldrh	r1, [r3, #0]
 80219f4:	697b      	ldr	r3, [r7, #20]
 80219f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle; i >= first_index; i--)
 80219fa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80219fe:	b2db      	uxtb	r3, r3
 8021a00:	3b01      	subs	r3, #1
 8021a02:	b2db      	uxtb	r3, r3
 8021a04:	77bb      	strb	r3, [r7, #30]
 8021a06:	e7e8      	b.n	80219da <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 8021a08:	7cfb      	ldrb	r3, [r7, #19]
 8021a0a:	3301      	adds	r3, #1
 8021a0c:	b2db      	uxtb	r3, r3
 8021a0e:	77bb      	strb	r3, [r7, #30]
 8021a10:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021a14:	79bb      	ldrb	r3, [r7, #6]
 8021a16:	429a      	cmp	r2, r3
 8021a18:	dc17      	bgt.n	8021a4a <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 8021a1a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021a1e:	005b      	lsls	r3, r3, #1
 8021a20:	68ba      	ldr	r2, [r7, #8]
 8021a22:	4413      	add	r3, r2
 8021a24:	79b9      	ldrb	r1, [r7, #6]
 8021a26:	f997 001e 	ldrsb.w	r0, [r7, #30]
 8021a2a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8021a2e:	3201      	adds	r2, #1
 8021a30:	1a82      	subs	r2, r0, r2
 8021a32:	1a8a      	subs	r2, r1, r2
 8021a34:	8819      	ldrh	r1, [r3, #0]
 8021a36:	697b      	ldr	r3, [r7, #20]
 8021a38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 8021a3c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021a40:	b2db      	uxtb	r3, r3
 8021a42:	3301      	adds	r3, #1
 8021a44:	b2db      	uxtb	r3, r3
 8021a46:	77bb      	strb	r3, [r7, #30]
 8021a48:	e7e2      	b.n	8021a10 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 8021a4a:	79fb      	ldrb	r3, [r7, #7]
 8021a4c:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 8021a4e:	79bb      	ldrb	r3, [r7, #6]
 8021a50:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 8021a52:	79fb      	ldrb	r3, [r7, #7]
 8021a54:	77bb      	strb	r3, [r7, #30]
 8021a56:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021a5a:	79bb      	ldrb	r3, [r7, #6]
 8021a5c:	429a      	cmp	r2, r3
 8021a5e:	dc33      	bgt.n	8021ac8 <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 8021a60:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021a64:	697b      	ldr	r3, [r7, #20]
 8021a66:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021a6a:	f997 101d 	ldrsb.w	r1, [r7, #29]
 8021a6e:	697b      	ldr	r3, [r7, #20]
 8021a70:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8021a74:	429a      	cmp	r2, r3
 8021a76:	d210      	bcs.n	8021a9a <_ZN10LineSensor9MergeSortEPthh+0x166>
 8021a78:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021a7c:	b2d3      	uxtb	r3, r2
 8021a7e:	3301      	adds	r3, #1
 8021a80:	b2db      	uxtb	r3, r3
 8021a82:	77fb      	strb	r3, [r7, #31]
 8021a84:	4611      	mov	r1, r2
 8021a86:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021a8a:	005b      	lsls	r3, r3, #1
 8021a8c:	68ba      	ldr	r2, [r7, #8]
 8021a8e:	4413      	add	r3, r2
 8021a90:	697a      	ldr	r2, [r7, #20]
 8021a92:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021a96:	801a      	strh	r2, [r3, #0]
 8021a98:	e00f      	b.n	8021aba <_ZN10LineSensor9MergeSortEPthh+0x186>
        else                                     array[i] = temp_array[right--];
 8021a9a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8021a9e:	b2d3      	uxtb	r3, r2
 8021aa0:	3b01      	subs	r3, #1
 8021aa2:	b2db      	uxtb	r3, r3
 8021aa4:	777b      	strb	r3, [r7, #29]
 8021aa6:	4611      	mov	r1, r2
 8021aa8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021aac:	005b      	lsls	r3, r3, #1
 8021aae:	68ba      	ldr	r2, [r7, #8]
 8021ab0:	4413      	add	r3, r2
 8021ab2:	697a      	ldr	r2, [r7, #20]
 8021ab4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021ab8:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 8021aba:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021abe:	b2db      	uxtb	r3, r3
 8021ac0:	3301      	adds	r3, #1
 8021ac2:	b2db      	uxtb	r3, r3
 8021ac4:	77bb      	strb	r3, [r7, #30]
 8021ac6:	e7c6      	b.n	8021a56 <_ZN10LineSensor9MergeSortEPthh+0x122>
 8021ac8:	46ad      	mov	sp, r5
 8021aca:	e001      	b.n	8021ad0 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 8021acc:	bf00      	nop
 8021ace:	46ad      	mov	sp, r5
}
 8021ad0:	3720      	adds	r7, #32
 8021ad2:	46bd      	mov	sp, r7
 8021ad4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021ad8 <_ZN10LineSensor6UpdateEv>:

void LineSensor::Update()
{
 8021ad8:	b590      	push	{r4, r7, lr}
 8021ada:	b08b      	sub	sp, #44	; 0x2c
 8021adc:	af00      	add	r7, sp, #0
 8021ade:	6078      	str	r0, [r7, #4]
    uint8_t i, j;
    uint16_t temp_array[CONSECUTIVE_TIMES];
    uint16_t median, max, min, normalized;
    bool emergency = true;
 8021ae0:	2301      	movs	r3, #1
 8021ae2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021ae6:	2300      	movs	r3, #0
 8021ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021af0:	2b0d      	cmp	r3, #13
 8021af2:	f200 80a6 	bhi.w	8021c42 <_ZN10LineSensor6UpdateEv+0x16a>
    {
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021af6:	2300      	movs	r3, #0
 8021af8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021afc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021b00:	2b09      	cmp	r3, #9
 8021b02:	d81b      	bhi.n	8021b3c <_ZN10LineSensor6UpdateEv+0x64>
        {
            temp_array[j] = consecutive_line_sensors_buff_[j][i];
 8021b04:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8021b08:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8021b0c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021b10:	6878      	ldr	r0, [r7, #4]
 8021b12:	4613      	mov	r3, r2
 8021b14:	00db      	lsls	r3, r3, #3
 8021b16:	1a9b      	subs	r3, r3, r2
 8021b18:	005b      	lsls	r3, r3, #1
 8021b1a:	4423      	add	r3, r4
 8021b1c:	330c      	adds	r3, #12
 8021b1e:	005b      	lsls	r3, r3, #1
 8021b20:	4403      	add	r3, r0
 8021b22:	889a      	ldrh	r2, [r3, #4]
 8021b24:	004b      	lsls	r3, r1, #1
 8021b26:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8021b2a:	440b      	add	r3, r1
 8021b2c:	f823 2c20 	strh.w	r2, [r3, #-32]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021b30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021b34:	3301      	adds	r3, #1
 8021b36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021b3a:	e7df      	b.n	8021afc <_ZN10LineSensor6UpdateEv+0x24>
        }

        MergeSort(temp_array, 0, CONSECUTIVE_TIMES-1);
 8021b3c:	f107 0108 	add.w	r1, r7, #8
 8021b40:	2309      	movs	r3, #9
 8021b42:	2200      	movs	r2, #0
 8021b44:	6878      	ldr	r0, [r7, #4]
 8021b46:	f7ff fef5 	bl	8021934 <_ZN10LineSensor9MergeSortEPthh>
        median = temp_array[HALF_CONSECUTIVE_TIMES];
 8021b4a:	8a7b      	ldrh	r3, [r7, #18]
 8021b4c:	83fb      	strh	r3, [r7, #30]

#ifdef DEBUG_MODE
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021b4e:	2300      	movs	r3, #0
 8021b50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021b54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021b58:	2b09      	cmp	r3, #9
 8021b5a:	d81a      	bhi.n	8021b92 <_ZN10LineSensor6UpdateEv+0xba>
        {
            g_consecutive_line_buff[i][j] = temp_array[j];
 8021b5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021b60:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021b64:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021b68:	005b      	lsls	r3, r3, #1
 8021b6a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8021b6e:	4403      	add	r3, r0
 8021b70:	f833 4c20 	ldrh.w	r4, [r3, #-32]
 8021b74:	4837      	ldr	r0, [pc, #220]	; (8021c54 <_ZN10LineSensor6UpdateEv+0x17c>)
 8021b76:	4613      	mov	r3, r2
 8021b78:	009b      	lsls	r3, r3, #2
 8021b7a:	4413      	add	r3, r2
 8021b7c:	005b      	lsls	r3, r3, #1
 8021b7e:	440b      	add	r3, r1
 8021b80:	4622      	mov	r2, r4
 8021b82:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021b86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021b8a:	3301      	adds	r3, #1
 8021b8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021b90:	e7e0      	b.n	8021b54 <_ZN10LineSensor6UpdateEv+0x7c>
        }
#endif // DEBUG_MODE

        max = max_line_sensors_valu_[i];
 8021b92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021b96:	687a      	ldr	r2, [r7, #4]
 8021b98:	3398      	adds	r3, #152	; 0x98
 8021b9a:	005b      	lsls	r3, r3, #1
 8021b9c:	4413      	add	r3, r2
 8021b9e:	889b      	ldrh	r3, [r3, #4]
 8021ba0:	84bb      	strh	r3, [r7, #36]	; 0x24
        min = min_line_sensors_valu_[i];
 8021ba2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	32a8      	adds	r2, #168	; 0xa8
 8021baa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021bae:	847b      	strh	r3, [r7, #34]	; 0x22
        if(max < median)      max = median;
 8021bb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021bb2:	8bfb      	ldrh	r3, [r7, #30]
 8021bb4:	429a      	cmp	r2, r3
 8021bb6:	d202      	bcs.n	8021bbe <_ZN10LineSensor6UpdateEv+0xe6>
 8021bb8:	8bfb      	ldrh	r3, [r7, #30]
 8021bba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8021bbc:	e00b      	b.n	8021bd6 <_ZN10LineSensor6UpdateEv+0xfe>
        else if(min > median) min = median;
 8021bbe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021bc0:	8bfb      	ldrh	r3, [r7, #30]
 8021bc2:	429a      	cmp	r2, r3
 8021bc4:	d902      	bls.n	8021bcc <_ZN10LineSensor6UpdateEv+0xf4>
 8021bc6:	8bfb      	ldrh	r3, [r7, #30]
 8021bc8:	847b      	strh	r3, [r7, #34]	; 0x22
 8021bca:	e004      	b.n	8021bd6 <_ZN10LineSensor6UpdateEv+0xfe>
        else if(min == 0)     min = median;
 8021bcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021bce:	2b00      	cmp	r3, #0
 8021bd0:	d101      	bne.n	8021bd6 <_ZN10LineSensor6UpdateEv+0xfe>
 8021bd2:	8bfb      	ldrh	r3, [r7, #30]
 8021bd4:	847b      	strh	r3, [r7, #34]	; 0x22
        max_line_sensors_valu_[i] = max;
 8021bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021bda:	687a      	ldr	r2, [r7, #4]
 8021bdc:	3398      	adds	r3, #152	; 0x98
 8021bde:	005b      	lsls	r3, r3, #1
 8021be0:	4413      	add	r3, r2
 8021be2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021be4:	809a      	strh	r2, [r3, #4]
        min_line_sensors_valu_[i] = min;
 8021be6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021bea:	687b      	ldr	r3, [r7, #4]
 8021bec:	32a8      	adds	r2, #168	; 0xa8
 8021bee:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8021bf0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

        if(max > min)
 8021bf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021bf6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021bf8:	429a      	cmp	r2, r3
 8021bfa:	d91c      	bls.n	8021c36 <_ZN10LineSensor6UpdateEv+0x15e>
        {
            normalized = MAX_NORMALIZED_VALU * (median - min) / (max - min);
 8021bfc:	8bfa      	ldrh	r2, [r7, #30]
 8021bfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021c00:	1ad3      	subs	r3, r2, r3
 8021c02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8021c06:	fb02 f203 	mul.w	r2, r2, r3
 8021c0a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8021c0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021c0e:	1acb      	subs	r3, r1, r3
 8021c10:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c14:	83bb      	strh	r3, [r7, #28]
            line_sensors_valu_[i] = normalized;
 8021c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021c1a:	687a      	ldr	r2, [r7, #4]
 8021c1c:	33b4      	adds	r3, #180	; 0xb4
 8021c1e:	005b      	lsls	r3, r3, #1
 8021c20:	4413      	add	r3, r2
 8021c22:	8bba      	ldrh	r2, [r7, #28]
 8021c24:	809a      	strh	r2, [r3, #4]

            if(normalized < EMERGENCY_STOP_BORDER) emergency = false;
 8021c26:	8bbb      	ldrh	r3, [r7, #28]
 8021c28:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8021c2c:	4293      	cmp	r3, r2
 8021c2e:	d802      	bhi.n	8021c36 <_ZN10LineSensor6UpdateEv+0x15e>
 8021c30:	2300      	movs	r3, #0
 8021c32:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021c3a:	3301      	adds	r3, #1
 8021c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021c40:	e754      	b.n	8021aec <_ZN10LineSensor6UpdateEv+0x14>
        }
    }

    emergency_stop_flag_ = emergency;
 8021c42:	687b      	ldr	r3, [r7, #4]
 8021c44:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8021c48:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
}
 8021c4c:	bf00      	nop
 8021c4e:	372c      	adds	r7, #44	; 0x2c
 8021c50:	46bd      	mov	sp, r7
 8021c52:	bd90      	pop	{r4, r7, pc}
 8021c54:	200000dc 	.word	0x200000dc

08021c58 <_ZN10LineSensor20GetEmergencyStopFlagEv>:

bool LineSensor::GetEmergencyStopFlag()
{
 8021c58:	b480      	push	{r7}
 8021c5a:	b083      	sub	sp, #12
 8021c5c:	af00      	add	r7, sp, #0
 8021c5e:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8021c60:	687b      	ldr	r3, [r7, #4]
 8021c62:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
}
 8021c66:	4618      	mov	r0, r3
 8021c68:	370c      	adds	r7, #12
 8021c6a:	46bd      	mov	sp, r7
 8021c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c70:	4770      	bx	lr
 8021c72:	0000      	movs	r0, r0
 8021c74:	0000      	movs	r0, r0
	...

08021c78 <_ZN10LineSensor19LeftRightDifferenceEv>:

float LineSensor::LeftRightDifference()
{
 8021c78:	b5b0      	push	{r4, r5, r7, lr}
 8021c7a:	b086      	sub	sp, #24
 8021c7c:	af00      	add	r7, sp, #0
 8021c7e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t left = 0, right = 0;
 8021c80:	2300      	movs	r3, #0
 8021c82:	613b      	str	r3, [r7, #16]
 8021c84:	2300      	movs	r3, #0
 8021c86:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 8021c88:	2300      	movs	r3, #0
 8021c8a:	75fb      	strb	r3, [r7, #23]
 8021c8c:	7dfb      	ldrb	r3, [r7, #23]
 8021c8e:	2b06      	cmp	r3, #6
 8021c90:	d80d      	bhi.n	8021cae <_ZN10LineSensor19LeftRightDifferenceEv+0x36>
    {
        left += line_sensors_valu_[i];
 8021c92:	7dfb      	ldrb	r3, [r7, #23]
 8021c94:	687a      	ldr	r2, [r7, #4]
 8021c96:	33b4      	adds	r3, #180	; 0xb4
 8021c98:	005b      	lsls	r3, r3, #1
 8021c9a:	4413      	add	r3, r2
 8021c9c:	889b      	ldrh	r3, [r3, #4]
 8021c9e:	461a      	mov	r2, r3
 8021ca0:	693b      	ldr	r3, [r7, #16]
 8021ca2:	4413      	add	r3, r2
 8021ca4:	613b      	str	r3, [r7, #16]
    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 8021ca6:	7dfb      	ldrb	r3, [r7, #23]
 8021ca8:	3301      	adds	r3, #1
 8021caa:	75fb      	strb	r3, [r7, #23]
 8021cac:	e7ee      	b.n	8021c8c <_ZN10LineSensor19LeftRightDifferenceEv+0x14>
    }
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8021cae:	2307      	movs	r3, #7
 8021cb0:	75fb      	strb	r3, [r7, #23]
 8021cb2:	7dfb      	ldrb	r3, [r7, #23]
 8021cb4:	2b0d      	cmp	r3, #13
 8021cb6:	d80d      	bhi.n	8021cd4 <_ZN10LineSensor19LeftRightDifferenceEv+0x5c>
    {
        right += line_sensors_valu_[i];
 8021cb8:	7dfb      	ldrb	r3, [r7, #23]
 8021cba:	687a      	ldr	r2, [r7, #4]
 8021cbc:	33b4      	adds	r3, #180	; 0xb4
 8021cbe:	005b      	lsls	r3, r3, #1
 8021cc0:	4413      	add	r3, r2
 8021cc2:	889b      	ldrh	r3, [r3, #4]
 8021cc4:	461a      	mov	r2, r3
 8021cc6:	68fb      	ldr	r3, [r7, #12]
 8021cc8:	4413      	add	r3, r2
 8021cca:	60fb      	str	r3, [r7, #12]
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8021ccc:	7dfb      	ldrb	r3, [r7, #23]
 8021cce:	3301      	adds	r3, #1
 8021cd0:	75fb      	strb	r3, [r7, #23]
 8021cd2:	e7ee      	b.n	8021cb2 <_ZN10LineSensor19LeftRightDifferenceEv+0x3a>
    }

#ifdef DEBUG_MODE
    g_line_left = left;
 8021cd4:	4a18      	ldr	r2, [pc, #96]	; (8021d38 <_ZN10LineSensor19LeftRightDifferenceEv+0xc0>)
 8021cd6:	693b      	ldr	r3, [r7, #16]
 8021cd8:	6013      	str	r3, [r2, #0]
    g_line_right = right;
 8021cda:	4a18      	ldr	r2, [pc, #96]	; (8021d3c <_ZN10LineSensor19LeftRightDifferenceEv+0xc4>)
 8021cdc:	68fb      	ldr	r3, [r7, #12]
 8021cde:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float difference = right * LINE_SENSOR_CORRECTION - left;
 8021ce0:	68f8      	ldr	r0, [r7, #12]
 8021ce2:	f7fe faef 	bl	80202c4 <__aeabi_ui2d>
 8021ce6:	a312      	add	r3, pc, #72	; (adr r3, 8021d30 <_ZN10LineSensor19LeftRightDifferenceEv+0xb8>)
 8021ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cec:	f7fe fb64 	bl	80203b8 <__aeabi_dmul>
 8021cf0:	4603      	mov	r3, r0
 8021cf2:	460c      	mov	r4, r1
 8021cf4:	4625      	mov	r5, r4
 8021cf6:	461c      	mov	r4, r3
 8021cf8:	6938      	ldr	r0, [r7, #16]
 8021cfa:	f7fe fae3 	bl	80202c4 <__aeabi_ui2d>
 8021cfe:	4602      	mov	r2, r0
 8021d00:	460b      	mov	r3, r1
 8021d02:	4620      	mov	r0, r4
 8021d04:	4629      	mov	r1, r5
 8021d06:	f7fe f99f 	bl	8020048 <__aeabi_dsub>
 8021d0a:	4603      	mov	r3, r0
 8021d0c:	460c      	mov	r4, r1
 8021d0e:	4618      	mov	r0, r3
 8021d10:	4621      	mov	r1, r4
 8021d12:	f7fe fdeb 	bl	80208ec <__aeabi_d2f>
 8021d16:	4603      	mov	r3, r0
 8021d18:	60bb      	str	r3, [r7, #8]

    return difference;
 8021d1a:	68bb      	ldr	r3, [r7, #8]
 8021d1c:	ee07 3a90 	vmov	s15, r3
}
 8021d20:	eeb0 0a67 	vmov.f32	s0, s15
 8021d24:	3718      	adds	r7, #24
 8021d26:	46bd      	mov	sp, r7
 8021d28:	bdb0      	pop	{r4, r5, r7, pc}
 8021d2a:	bf00      	nop
 8021d2c:	f3af 8000 	nop.w
 8021d30:	66666666 	.word	0x66666666
 8021d34:	3fee6666 	.word	0x3fee6666
 8021d38:	20000248 	.word	0x20000248
 8021d3c:	2000024c 	.word	0x2000024c

08021d40 <_ZN10LineSensor16CheckCalibrationEv>:

bool LineSensor::CheckCalibration()
{
 8021d40:	b480      	push	{r7}
 8021d42:	b085      	sub	sp, #20
 8021d44:	af00      	add	r7, sp, #0
 8021d46:	6078      	str	r0, [r7, #4]
    static uint16_t timer = 0;
    static uint16_t pre_max[NUM_OF_LINE_SENSORS] = {0};
    static uint16_t pre_min[NUM_OF_LINE_SENSORS] = {0};
    uint16_t max, min;
    bool result = true;
 8021d48:	2301      	movs	r3, #1
 8021d4a:	73fb      	strb	r3, [r7, #15]

    for(uint8_t i = 0; i > NUM_OF_LINE_SENSORS; i++)
 8021d4c:	2300      	movs	r3, #0
 8021d4e:	73bb      	strb	r3, [r7, #14]
 8021d50:	7bbb      	ldrb	r3, [r7, #14]
 8021d52:	2b0e      	cmp	r3, #14
 8021d54:	d92d      	bls.n	8021db2 <_ZN10LineSensor16CheckCalibrationEv+0x72>
    {
        max = max_line_sensors_valu_[i];
 8021d56:	7bbb      	ldrb	r3, [r7, #14]
 8021d58:	687a      	ldr	r2, [r7, #4]
 8021d5a:	3398      	adds	r3, #152	; 0x98
 8021d5c:	005b      	lsls	r3, r3, #1
 8021d5e:	4413      	add	r3, r2
 8021d60:	889b      	ldrh	r3, [r3, #4]
 8021d62:	81bb      	strh	r3, [r7, #12]
        min = min_line_sensors_valu_[i];
 8021d64:	7bba      	ldrb	r2, [r7, #14]
 8021d66:	687b      	ldr	r3, [r7, #4]
 8021d68:	32a8      	adds	r2, #168	; 0xa8
 8021d6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021d6e:	817b      	strh	r3, [r7, #10]

        if(pre_max[i] != max)      result = false;
 8021d70:	7bbb      	ldrb	r3, [r7, #14]
 8021d72:	4a1e      	ldr	r2, [pc, #120]	; (8021dec <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 8021d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021d78:	89ba      	ldrh	r2, [r7, #12]
 8021d7a:	429a      	cmp	r2, r3
 8021d7c:	d002      	beq.n	8021d84 <_ZN10LineSensor16CheckCalibrationEv+0x44>
 8021d7e:	2300      	movs	r3, #0
 8021d80:	73fb      	strb	r3, [r7, #15]
 8021d82:	e008      	b.n	8021d96 <_ZN10LineSensor16CheckCalibrationEv+0x56>
        else if(pre_min[i] != min) result = false;
 8021d84:	7bbb      	ldrb	r3, [r7, #14]
 8021d86:	4a1a      	ldr	r2, [pc, #104]	; (8021df0 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 8021d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021d8c:	897a      	ldrh	r2, [r7, #10]
 8021d8e:	429a      	cmp	r2, r3
 8021d90:	d001      	beq.n	8021d96 <_ZN10LineSensor16CheckCalibrationEv+0x56>
 8021d92:	2300      	movs	r3, #0
 8021d94:	73fb      	strb	r3, [r7, #15]

        pre_max[i] = max;
 8021d96:	7bbb      	ldrb	r3, [r7, #14]
 8021d98:	4914      	ldr	r1, [pc, #80]	; (8021dec <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 8021d9a:	89ba      	ldrh	r2, [r7, #12]
 8021d9c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        pre_min[i] = min;
 8021da0:	7bbb      	ldrb	r3, [r7, #14]
 8021da2:	4913      	ldr	r1, [pc, #76]	; (8021df0 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 8021da4:	897a      	ldrh	r2, [r7, #10]
 8021da6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint8_t i = 0; i > NUM_OF_LINE_SENSORS; i++)
 8021daa:	7bbb      	ldrb	r3, [r7, #14]
 8021dac:	3301      	adds	r3, #1
 8021dae:	73bb      	strb	r3, [r7, #14]
 8021db0:	e7ce      	b.n	8021d50 <_ZN10LineSensor16CheckCalibrationEv+0x10>
    }

    if(result)
 8021db2:	7bfb      	ldrb	r3, [r7, #15]
 8021db4:	2b00      	cmp	r3, #0
 8021db6:	d00e      	beq.n	8021dd6 <_ZN10LineSensor16CheckCalibrationEv+0x96>
    {
        if(timer < CALIBRATION_SUCCESS_TIME)
 8021db8:	4b0e      	ldr	r3, [pc, #56]	; (8021df4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8021dba:	881b      	ldrh	r3, [r3, #0]
 8021dbc:	f240 52db 	movw	r2, #1499	; 0x5db
 8021dc0:	4293      	cmp	r3, r2
 8021dc2:	d80b      	bhi.n	8021ddc <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        {
            timer++;
 8021dc4:	4b0b      	ldr	r3, [pc, #44]	; (8021df4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8021dc6:	881b      	ldrh	r3, [r3, #0]
 8021dc8:	3301      	adds	r3, #1
 8021dca:	b29a      	uxth	r2, r3
 8021dcc:	4b09      	ldr	r3, [pc, #36]	; (8021df4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8021dce:	801a      	strh	r2, [r3, #0]
            result = false;
 8021dd0:	2300      	movs	r3, #0
 8021dd2:	73fb      	strb	r3, [r7, #15]
 8021dd4:	e002      	b.n	8021ddc <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        }
    }
    else timer = 0;
 8021dd6:	4b07      	ldr	r3, [pc, #28]	; (8021df4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8021dd8:	2200      	movs	r2, #0
 8021dda:	801a      	strh	r2, [r3, #0]
    
    return result;
 8021ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8021dde:	4618      	mov	r0, r3
 8021de0:	3714      	adds	r7, #20
 8021de2:	46bd      	mov	sp, r7
 8021de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021de8:	4770      	bx	lr
 8021dea:	bf00      	nop
 8021dec:	20000040 	.word	0x20000040
 8021df0:	2000005c 	.word	0x2000005c
 8021df4:	2000003e 	.word	0x2000003e

08021df8 <_ZN10LineSensor13MonitorArraysEv>:

#ifdef DEBUG_MODE
void LineSensor::MonitorArrays()
{
 8021df8:	b480      	push	{r7}
 8021dfa:	b085      	sub	sp, #20
 8021dfc:	af00      	add	r7, sp, #0
 8021dfe:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021e00:	2300      	movs	r3, #0
 8021e02:	73fb      	strb	r3, [r7, #15]
 8021e04:	7bfb      	ldrb	r3, [r7, #15]
 8021e06:	2b0d      	cmp	r3, #13
 8021e08:	d828      	bhi.n	8021e5c <_ZN10LineSensor13MonitorArraysEv+0x64>
    {
        g_line_buff[i] = line_sensors_buff_[i];
 8021e0a:	7bf9      	ldrb	r1, [r7, #15]
 8021e0c:	7bfb      	ldrb	r3, [r7, #15]
 8021e0e:	687a      	ldr	r2, [r7, #4]
 8021e10:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8021e14:	4a14      	ldr	r2, [pc, #80]	; (8021e68 <_ZN10LineSensor13MonitorArraysEv+0x70>)
 8021e16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        g_max_line_valu[i] = max_line_sensors_valu_[i];
 8021e1a:	7bfb      	ldrb	r3, [r7, #15]
 8021e1c:	7bfa      	ldrb	r2, [r7, #15]
 8021e1e:	6879      	ldr	r1, [r7, #4]
 8021e20:	3398      	adds	r3, #152	; 0x98
 8021e22:	005b      	lsls	r3, r3, #1
 8021e24:	440b      	add	r3, r1
 8021e26:	8899      	ldrh	r1, [r3, #4]
 8021e28:	4b10      	ldr	r3, [pc, #64]	; (8021e6c <_ZN10LineSensor13MonitorArraysEv+0x74>)
 8021e2a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_min_line_valu[i] = min_line_sensors_valu_[i];
 8021e2e:	7bf9      	ldrb	r1, [r7, #15]
 8021e30:	7bfb      	ldrb	r3, [r7, #15]
 8021e32:	687a      	ldr	r2, [r7, #4]
 8021e34:	31a8      	adds	r1, #168	; 0xa8
 8021e36:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8021e3a:	4a0d      	ldr	r2, [pc, #52]	; (8021e70 <_ZN10LineSensor13MonitorArraysEv+0x78>)
 8021e3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        g_line_valu[i] = line_sensors_valu_[i];
 8021e40:	7bfb      	ldrb	r3, [r7, #15]
 8021e42:	7bfa      	ldrb	r2, [r7, #15]
 8021e44:	6879      	ldr	r1, [r7, #4]
 8021e46:	33b4      	adds	r3, #180	; 0xb4
 8021e48:	005b      	lsls	r3, r3, #1
 8021e4a:	440b      	add	r3, r1
 8021e4c:	8899      	ldrh	r1, [r3, #4]
 8021e4e:	4b09      	ldr	r3, [pc, #36]	; (8021e74 <_ZN10LineSensor13MonitorArraysEv+0x7c>)
 8021e50:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021e54:	7bfb      	ldrb	r3, [r7, #15]
 8021e56:	3301      	adds	r3, #1
 8021e58:	73fb      	strb	r3, [r7, #15]
 8021e5a:	e7d3      	b.n	8021e04 <_ZN10LineSensor13MonitorArraysEv+0xc>
    }
}
 8021e5c:	bf00      	nop
 8021e5e:	3714      	adds	r7, #20
 8021e60:	46bd      	mov	sp, r7
 8021e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e66:	4770      	bx	lr
 8021e68:	200000c0 	.word	0x200000c0
 8021e6c:	200001f4 	.word	0x200001f4
 8021e70:	20000210 	.word	0x20000210
 8021e74:	2000022c 	.word	0x2000022c

08021e78 <_ZN9LineTraceC1Ev>:
#include "line_trace.hpp"

LineTrace::LineTrace() : integral_error_(0) {}
 8021e78:	b580      	push	{r7, lr}
 8021e7a:	b082      	sub	sp, #8
 8021e7c:	af00      	add	r7, sp, #0
 8021e7e:	6078      	str	r0, [r7, #4]
 8021e80:	687b      	ldr	r3, [r7, #4]
 8021e82:	f04f 0200 	mov.w	r2, #0
 8021e86:	601a      	str	r2, [r3, #0]
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	3304      	adds	r3, #4
 8021e8c:	4618      	mov	r0, r3
 8021e8e:	f7ff fc96 	bl	80217be <_ZN10LineSensorC1Ev>
 8021e92:	687b      	ldr	r3, [r7, #4]
 8021e94:	4618      	mov	r0, r3
 8021e96:	3708      	adds	r7, #8
 8021e98:	46bd      	mov	sp, r7
 8021e9a:	bd80      	pop	{r7, pc}
 8021e9c:	0000      	movs	r0, r0
	...

08021ea0 <_ZN9LineTrace10PidControlEfff>:
{
    integral_error_ = 0.0;
}

float LineTrace::PidControl(float p_gain, float i_gain, float d_gain)
{
 8021ea0:	b590      	push	{r4, r7, lr}
 8021ea2:	b08b      	sub	sp, #44	; 0x2c
 8021ea4:	af00      	add	r7, sp, #0
 8021ea6:	60f8      	str	r0, [r7, #12]
 8021ea8:	ed87 0a02 	vstr	s0, [r7, #8]
 8021eac:	edc7 0a01 	vstr	s1, [r7, #4]
 8021eb0:	ed87 1a00 	vstr	s2, [r7]
    static float pre_error = line_sensor.LeftRightDifference();
 8021eb4:	4b52      	ldr	r3, [pc, #328]	; (8022000 <_ZN9LineTrace10PidControlEfff+0x160>)
 8021eb6:	781b      	ldrb	r3, [r3, #0]
 8021eb8:	f3bf 8f5b 	dmb	ish
 8021ebc:	b2db      	uxtb	r3, r3
 8021ebe:	f003 0301 	and.w	r3, r3, #1
 8021ec2:	2b00      	cmp	r3, #0
 8021ec4:	bf0c      	ite	eq
 8021ec6:	2301      	moveq	r3, #1
 8021ec8:	2300      	movne	r3, #0
 8021eca:	b2db      	uxtb	r3, r3
 8021ecc:	2b00      	cmp	r3, #0
 8021ece:	d017      	beq.n	8021f00 <_ZN9LineTrace10PidControlEfff+0x60>
 8021ed0:	484b      	ldr	r0, [pc, #300]	; (8022000 <_ZN9LineTrace10PidControlEfff+0x160>)
 8021ed2:	f008 fa13 	bl	802a2fc <__cxa_guard_acquire>
 8021ed6:	4603      	mov	r3, r0
 8021ed8:	2b00      	cmp	r3, #0
 8021eda:	bf14      	ite	ne
 8021edc:	2301      	movne	r3, #1
 8021ede:	2300      	moveq	r3, #0
 8021ee0:	b2db      	uxtb	r3, r3
 8021ee2:	2b00      	cmp	r3, #0
 8021ee4:	d00c      	beq.n	8021f00 <_ZN9LineTrace10PidControlEfff+0x60>
 8021ee6:	68fb      	ldr	r3, [r7, #12]
 8021ee8:	3304      	adds	r3, #4
 8021eea:	4618      	mov	r0, r3
 8021eec:	f7ff fec4 	bl	8021c78 <_ZN10LineSensor19LeftRightDifferenceEv>
 8021ef0:	eef0 7a40 	vmov.f32	s15, s0
 8021ef4:	4b43      	ldr	r3, [pc, #268]	; (8022004 <_ZN9LineTrace10PidControlEfff+0x164>)
 8021ef6:	edc3 7a00 	vstr	s15, [r3]
 8021efa:	4841      	ldr	r0, [pc, #260]	; (8022000 <_ZN9LineTrace10PidControlEfff+0x160>)
 8021efc:	f008 fa0a 	bl	802a314 <__cxa_guard_release>
    float error, differential_error, integral_error;
    float p, d, i;

    error = line_sensor.LeftRightDifference();
 8021f00:	68fb      	ldr	r3, [r7, #12]
 8021f02:	3304      	adds	r3, #4
 8021f04:	4618      	mov	r0, r3
 8021f06:	f7ff feb7 	bl	8021c78 <_ZN10LineSensor19LeftRightDifferenceEv>
 8021f0a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    differential_error = (error - pre_error) / TIM6_PERIOD_S;
 8021f0e:	4b3d      	ldr	r3, [pc, #244]	; (8022004 <_ZN9LineTrace10PidControlEfff+0x164>)
 8021f10:	edd3 7a00 	vldr	s15, [r3]
 8021f14:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8021f18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021f1c:	ee17 0a90 	vmov	r0, s15
 8021f20:	f7fe f9f2 	bl	8020308 <__aeabi_f2d>
 8021f24:	a334      	add	r3, pc, #208	; (adr r3, 8021ff8 <_ZN9LineTrace10PidControlEfff+0x158>)
 8021f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f2a:	f7fe fb6f 	bl	802060c <__aeabi_ddiv>
 8021f2e:	4603      	mov	r3, r0
 8021f30:	460c      	mov	r4, r1
 8021f32:	4618      	mov	r0, r3
 8021f34:	4621      	mov	r1, r4
 8021f36:	f7fe fcd9 	bl	80208ec <__aeabi_d2f>
 8021f3a:	4603      	mov	r3, r0
 8021f3c:	623b      	str	r3, [r7, #32]
    integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 8021f3e:	4b31      	ldr	r3, [pc, #196]	; (8022004 <_ZN9LineTrace10PidControlEfff+0x164>)
 8021f40:	ed93 7a00 	vldr	s14, [r3]
 8021f44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8021f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021f4c:	ee17 0a90 	vmov	r0, s15
 8021f50:	f7fe f9da 	bl	8020308 <__aeabi_f2d>
 8021f54:	f04f 0200 	mov.w	r2, #0
 8021f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021f5c:	f7fe fb56 	bl	802060c <__aeabi_ddiv>
 8021f60:	4603      	mov	r3, r0
 8021f62:	460c      	mov	r4, r1
 8021f64:	4618      	mov	r0, r3
 8021f66:	4621      	mov	r1, r4
 8021f68:	a323      	add	r3, pc, #140	; (adr r3, 8021ff8 <_ZN9LineTrace10PidControlEfff+0x158>)
 8021f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f6e:	f7fe fa23 	bl	80203b8 <__aeabi_dmul>
 8021f72:	4603      	mov	r3, r0
 8021f74:	460c      	mov	r4, r1
 8021f76:	4618      	mov	r0, r3
 8021f78:	4621      	mov	r1, r4
 8021f7a:	f7fe fcb7 	bl	80208ec <__aeabi_d2f>
 8021f7e:	4603      	mov	r3, r0
 8021f80:	61fb      	str	r3, [r7, #28]
    SetIntegralError(integral_error);
 8021f82:	ed97 0a07 	vldr	s0, [r7, #28]
 8021f86:	68f8      	ldr	r0, [r7, #12]
 8021f88:	f000 f844 	bl	8022014 <_ZN9LineTrace16SetIntegralErrorEf>

    p = p_gain * error;
 8021f8c:	ed97 7a02 	vldr	s14, [r7, #8]
 8021f90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8021f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021f98:	edc7 7a06 	vstr	s15, [r7, #24]
    d = d_gain * differential_error;
 8021f9c:	ed97 7a00 	vldr	s14, [r7]
 8021fa0:	edd7 7a08 	vldr	s15, [r7, #32]
 8021fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021fa8:	edc7 7a05 	vstr	s15, [r7, #20]
    i = i_gain * integral_error_;
 8021fac:	68fb      	ldr	r3, [r7, #12]
 8021fae:	edd3 7a00 	vldr	s15, [r3]
 8021fb2:	ed97 7a01 	vldr	s14, [r7, #4]
 8021fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021fba:	edc7 7a04 	vstr	s15, [r7, #16]

#ifdef DEBUG_MODE
    g_trace_p = p;
 8021fbe:	4a12      	ldr	r2, [pc, #72]	; (8022008 <_ZN9LineTrace10PidControlEfff+0x168>)
 8021fc0:	69bb      	ldr	r3, [r7, #24]
 8021fc2:	6013      	str	r3, [r2, #0]
    g_trace_d = d;
 8021fc4:	4a11      	ldr	r2, [pc, #68]	; (802200c <_ZN9LineTrace10PidControlEfff+0x16c>)
 8021fc6:	697b      	ldr	r3, [r7, #20]
 8021fc8:	6013      	str	r3, [r2, #0]
    g_trace_i = i;
 8021fca:	4a11      	ldr	r2, [pc, #68]	; (8022010 <_ZN9LineTrace10PidControlEfff+0x170>)
 8021fcc:	693b      	ldr	r3, [r7, #16]
 8021fce:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    pre_error = error;
 8021fd0:	4a0c      	ldr	r2, [pc, #48]	; (8022004 <_ZN9LineTrace10PidControlEfff+0x164>)
 8021fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021fd4:	6013      	str	r3, [r2, #0]

    return p + d + i;
 8021fd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8021fda:	edd7 7a05 	vldr	s15, [r7, #20]
 8021fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021fe2:	edd7 7a04 	vldr	s15, [r7, #16]
 8021fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8021fea:	eeb0 0a67 	vmov.f32	s0, s15
 8021fee:	372c      	adds	r7, #44	; 0x2c
 8021ff0:	46bd      	mov	sp, r7
 8021ff2:	bd90      	pop	{r4, r7, pc}
 8021ff4:	f3af 8000 	nop.w
 8021ff8:	47ae147b 	.word	0x47ae147b
 8021ffc:	3f547ae1 	.word	0x3f547ae1
 8022000:	2000007c 	.word	0x2000007c
 8022004:	20000078 	.word	0x20000078
 8022008:	200002ac 	.word	0x200002ac
 802200c:	200002b4 	.word	0x200002b4
 8022010:	200002b0 	.word	0x200002b0

08022014 <_ZN9LineTrace16SetIntegralErrorEf>:

void LineTrace::SetIntegralError(float integral_error)
{
 8022014:	b480      	push	{r7}
 8022016:	b083      	sub	sp, #12
 8022018:	af00      	add	r7, sp, #0
 802201a:	6078      	str	r0, [r7, #4]
 802201c:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8022020:	687b      	ldr	r3, [r7, #4]
 8022022:	ed93 7a00 	vldr	s14, [r3]
 8022026:	edd7 7a00 	vldr	s15, [r7]
 802202a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802202e:	687b      	ldr	r3, [r7, #4]
 8022030:	edc3 7a00 	vstr	s15, [r3]
}
 8022034:	bf00      	nop
 8022036:	370c      	adds	r7, #12
 8022038:	46bd      	mov	sp, r7
 802203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802203e:	4770      	bx	lr

08022040 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8022040:	b480      	push	{r7}
 8022042:	b083      	sub	sp, #12
 8022044:	af00      	add	r7, sp, #0
 8022046:	ed87 0a01 	vstr	s0, [r7, #4]
 802204a:	edd7 7a01 	vldr	s15, [r7, #4]
 802204e:	eef0 7ae7 	vabs.f32	s15, s15
 8022052:	eeb0 0a67 	vmov.f32	s0, s15
 8022056:	370c      	adds	r7, #12
 8022058:	46bd      	mov	sp, r7
 802205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802205e:	4770      	bx	lr

08022060 <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() : const_distance_log_(), radian_log_(), various_log_(), const_distance_copy_(), radian_copy_(), various_copy_(), accel_address_(), decel_address_(), periodic_write_enable_(0), accel_position_write_enable_(0), excess_stack_(0), target_velocity_(MIN_VELOCITY) {}
 8022060:	b580      	push	{r7, lr}
 8022062:	b082      	sub	sp, #8
 8022064:	af00      	add	r7, sp, #0
 8022066:	6078      	str	r0, [r7, #4]
 8022068:	687a      	ldr	r2, [r7, #4]
 802206a:	2309      	movs	r3, #9
 802206c:	2b00      	cmp	r3, #0
 802206e:	db05      	blt.n	802207c <_ZN6LoggerC1Ev+0x1c>
 8022070:	f04f 0100 	mov.w	r1, #0
 8022074:	6011      	str	r1, [r2, #0]
 8022076:	3204      	adds	r2, #4
 8022078:	3b01      	subs	r3, #1
 802207a:	e7f7      	b.n	802206c <_ZN6LoggerC1Ev+0xc>
 802207c:	687b      	ldr	r3, [r7, #4]
 802207e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8022082:	2309      	movs	r3, #9
 8022084:	2b00      	cmp	r3, #0
 8022086:	db05      	blt.n	8022094 <_ZN6LoggerC1Ev+0x34>
 8022088:	f04f 0100 	mov.w	r1, #0
 802208c:	6011      	str	r1, [r2, #0]
 802208e:	3204      	adds	r2, #4
 8022090:	3b01      	subs	r3, #1
 8022092:	e7f7      	b.n	8022084 <_ZN6LoggerC1Ev+0x24>
 8022094:	687b      	ldr	r3, [r7, #4]
 8022096:	f103 0250 	add.w	r2, r3, #80	; 0x50
 802209a:	2309      	movs	r3, #9
 802209c:	2b00      	cmp	r3, #0
 802209e:	db04      	blt.n	80220aa <_ZN6LoggerC1Ev+0x4a>
 80220a0:	2100      	movs	r1, #0
 80220a2:	8011      	strh	r1, [r2, #0]
 80220a4:	3202      	adds	r2, #2
 80220a6:	3b01      	subs	r3, #1
 80220a8:	e7f8      	b.n	802209c <_ZN6LoggerC1Ev+0x3c>
 80220aa:	687b      	ldr	r3, [r7, #4]
 80220ac:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80220b0:	2309      	movs	r3, #9
 80220b2:	2b00      	cmp	r3, #0
 80220b4:	db05      	blt.n	80220c2 <_ZN6LoggerC1Ev+0x62>
 80220b6:	f04f 0100 	mov.w	r1, #0
 80220ba:	6011      	str	r1, [r2, #0]
 80220bc:	3204      	adds	r2, #4
 80220be:	3b01      	subs	r3, #1
 80220c0:	e7f7      	b.n	80220b2 <_ZN6LoggerC1Ev+0x52>
 80220c2:	687b      	ldr	r3, [r7, #4]
 80220c4:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 80220c8:	2309      	movs	r3, #9
 80220ca:	2b00      	cmp	r3, #0
 80220cc:	db05      	blt.n	80220da <_ZN6LoggerC1Ev+0x7a>
 80220ce:	f04f 0100 	mov.w	r1, #0
 80220d2:	6011      	str	r1, [r2, #0]
 80220d4:	3204      	adds	r2, #4
 80220d6:	3b01      	subs	r3, #1
 80220d8:	e7f7      	b.n	80220ca <_ZN6LoggerC1Ev+0x6a>
 80220da:	687b      	ldr	r3, [r7, #4]
 80220dc:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 80220e0:	2309      	movs	r3, #9
 80220e2:	2b00      	cmp	r3, #0
 80220e4:	db04      	blt.n	80220f0 <_ZN6LoggerC1Ev+0x90>
 80220e6:	2100      	movs	r1, #0
 80220e8:	8011      	strh	r1, [r2, #0]
 80220ea:	3202      	adds	r2, #2
 80220ec:	3b01      	subs	r3, #1
 80220ee:	e7f8      	b.n	80220e2 <_ZN6LoggerC1Ev+0x82>
 80220f0:	687b      	ldr	r3, [r7, #4]
 80220f2:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 80220f6:	2304      	movs	r3, #4
 80220f8:	2b00      	cmp	r3, #0
 80220fa:	db04      	blt.n	8022106 <_ZN6LoggerC1Ev+0xa6>
 80220fc:	2100      	movs	r1, #0
 80220fe:	8011      	strh	r1, [r2, #0]
 8022100:	3202      	adds	r2, #2
 8022102:	3b01      	subs	r3, #1
 8022104:	e7f8      	b.n	80220f8 <_ZN6LoggerC1Ev+0x98>
 8022106:	687b      	ldr	r3, [r7, #4]
 8022108:	f103 02d2 	add.w	r2, r3, #210	; 0xd2
 802210c:	2304      	movs	r3, #4
 802210e:	2b00      	cmp	r3, #0
 8022110:	db04      	blt.n	802211c <_ZN6LoggerC1Ev+0xbc>
 8022112:	2100      	movs	r1, #0
 8022114:	8011      	strh	r1, [r2, #0]
 8022116:	3202      	adds	r2, #2
 8022118:	3b01      	subs	r3, #1
 802211a:	e7f8      	b.n	802210e <_ZN6LoggerC1Ev+0xae>
 802211c:	687b      	ldr	r3, [r7, #4]
 802211e:	2200      	movs	r2, #0
 8022120:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8022124:	687b      	ldr	r3, [r7, #4]
 8022126:	2200      	movs	r2, #0
 8022128:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 802212c:	687b      	ldr	r3, [r7, #4]
 802212e:	f04f 0200 	mov.w	r2, #0
 8022132:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8022136:	687b      	ldr	r3, [r7, #4]
 8022138:	4a0b      	ldr	r2, [pc, #44]	; (8022168 <_ZN6LoggerC1Ev+0x108>)
 802213a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 802213e:	687b      	ldr	r3, [r7, #4]
 8022140:	33e8      	adds	r3, #232	; 0xe8
 8022142:	4618      	mov	r0, r3
 8022144:	f7fe fde6 	bl	8020d14 <_ZN7EncoderC1Ev>
 8022148:	687b      	ldr	r3, [r7, #4]
 802214a:	33f8      	adds	r3, #248	; 0xf8
 802214c:	4618      	mov	r0, r3
 802214e:	f7ff f8ee 	bl	802132e <_ZN8Iim42652C1Ev>
 8022152:	687b      	ldr	r3, [r7, #4]
 8022154:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022158:	4618      	mov	r0, r3
 802215a:	f001 fe53 	bl	8023e04 <_ZN10SideSensorC1Ev>
 802215e:	687b      	ldr	r3, [r7, #4]
 8022160:	4618      	mov	r0, r3
 8022162:	3708      	adds	r7, #8
 8022164:	46bd      	mov	sp, r7
 8022166:	bd80      	pop	{r7, pc}
 8022168:	3fa66666 	.word	0x3fa66666
 802216c:	00000000 	.word	0x00000000

08022170 <_ZN6Logger7LoggingEh>:

void Logger::Logging(uint8_t process_complete)
{
 8022170:	b5b0      	push	{r4, r5, r7, lr}
 8022172:	b08c      	sub	sp, #48	; 0x30
 8022174:	af00      	add	r7, sp, #0
 8022176:	6078      	str	r0, [r7, #4]
 8022178:	460b      	mov	r3, r1
 802217a:	70fb      	strb	r3, [r7, #3]
    float distance = encoder.GetDistanceStack();
 802217c:	687b      	ldr	r3, [r7, #4]
 802217e:	33e8      	adds	r3, #232	; 0xe8
 8022180:	4618      	mov	r0, r3
 8022182:	f7fe fe96 	bl	8020eb2 <_ZN7Encoder16GetDistanceStackEv>
 8022186:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    if(distance < LOGGING_CONST_DISTANCE) return;
 802218a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 802218e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802219a:	f100 81f5 	bmi.w	8022588 <_ZN6Logger7LoggingEh+0x418>
    encoder.ResetDistanceStack();
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	33e8      	adds	r3, #232	; 0xe8
 80221a2:	4618      	mov	r0, r3
 80221a4:	f7fe fe68 	bl	8020e78 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0; // flash address count. (0 ~ 6199)
    static uint16_t log_index = 0;   // Count up when interrupt.

    /* Mapping data of distance */
    const_distance_log_[log_index] = distance;
 80221a8:	4bb3      	ldr	r3, [pc, #716]	; (8022478 <_ZN6Logger7LoggingEh+0x308>)
 80221aa:	881b      	ldrh	r3, [r3, #0]
 80221ac:	687a      	ldr	r2, [r7, #4]
 80221ae:	009b      	lsls	r3, r3, #2
 80221b0:	4413      	add	r3, r2
 80221b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80221b4:	601a      	str	r2, [r3, #0]

    /* Mapping data of radian */
    double degree = iim_42652.GetDegreeStackZ();
 80221b6:	687b      	ldr	r3, [r7, #4]
 80221b8:	33f8      	adds	r3, #248	; 0xf8
 80221ba:	4618      	mov	r0, r3
 80221bc:	f7ff f9a0 	bl	8021500 <_ZN8Iim4265215GetDegreeStackZEv>
 80221c0:	ed87 0b06 	vstr	d0, [r7, #24]
    float radian = static_cast<float>(degree * M_PI / 180.0);
 80221c4:	a3aa      	add	r3, pc, #680	; (adr r3, 8022470 <_ZN6Logger7LoggingEh+0x300>)
 80221c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80221ce:	f7fe f8f3 	bl	80203b8 <__aeabi_dmul>
 80221d2:	4603      	mov	r3, r0
 80221d4:	460c      	mov	r4, r1
 80221d6:	4618      	mov	r0, r3
 80221d8:	4621      	mov	r1, r4
 80221da:	f04f 0200 	mov.w	r2, #0
 80221de:	4ba7      	ldr	r3, [pc, #668]	; (802247c <_ZN6Logger7LoggingEh+0x30c>)
 80221e0:	f7fe fa14 	bl	802060c <__aeabi_ddiv>
 80221e4:	4603      	mov	r3, r0
 80221e6:	460c      	mov	r4, r1
 80221e8:	4618      	mov	r0, r3
 80221ea:	4621      	mov	r1, r4
 80221ec:	f7fe fb7e 	bl	80208ec <__aeabi_d2f>
 80221f0:	4603      	mov	r3, r0
 80221f2:	617b      	str	r3, [r7, #20]
    radian_log_[log_index] = radian;
 80221f4:	4ba0      	ldr	r3, [pc, #640]	; (8022478 <_ZN6Logger7LoggingEh+0x308>)
 80221f6:	881b      	ldrh	r3, [r3, #0]
 80221f8:	687a      	ldr	r2, [r7, #4]
 80221fa:	330a      	adds	r3, #10
 80221fc:	009b      	lsls	r3, r3, #2
 80221fe:	4413      	add	r3, r2
 8022200:	697a      	ldr	r2, [r7, #20]
 8022202:	601a      	str	r2, [r3, #0]
    iim_42652.ResetDegreeStackZ();
 8022204:	687b      	ldr	r3, [r7, #4]
 8022206:	33f8      	adds	r3, #248	; 0xf8
 8022208:	4618      	mov	r0, r3
 802220a:	f7ff f969 	bl	80214e0 <_ZN8Iim4265217ResetDegreeStackZEv>

    /* Various log */
    static uint8_t pre_corner_cnt = side_sensor.GetCornerMarkerCount();
 802220e:	4b9c      	ldr	r3, [pc, #624]	; (8022480 <_ZN6Logger7LoggingEh+0x310>)
 8022210:	781b      	ldrb	r3, [r3, #0]
 8022212:	f3bf 8f5b 	dmb	ish
 8022216:	b2db      	uxtb	r3, r3
 8022218:	f003 0301 	and.w	r3, r3, #1
 802221c:	2b00      	cmp	r3, #0
 802221e:	bf0c      	ite	eq
 8022220:	2301      	moveq	r3, #1
 8022222:	2300      	movne	r3, #0
 8022224:	b2db      	uxtb	r3, r3
 8022226:	2b00      	cmp	r3, #0
 8022228:	d017      	beq.n	802225a <_ZN6Logger7LoggingEh+0xea>
 802222a:	4895      	ldr	r0, [pc, #596]	; (8022480 <_ZN6Logger7LoggingEh+0x310>)
 802222c:	f008 f866 	bl	802a2fc <__cxa_guard_acquire>
 8022230:	4603      	mov	r3, r0
 8022232:	2b00      	cmp	r3, #0
 8022234:	bf14      	ite	ne
 8022236:	2301      	movne	r3, #1
 8022238:	2300      	moveq	r3, #0
 802223a:	b2db      	uxtb	r3, r3
 802223c:	2b00      	cmp	r3, #0
 802223e:	d00c      	beq.n	802225a <_ZN6Logger7LoggingEh+0xea>
 8022240:	687b      	ldr	r3, [r7, #4]
 8022242:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022246:	4618      	mov	r0, r3
 8022248:	f002 f8d2 	bl	80243f0 <_ZN10SideSensor20GetCornerMarkerCountEv>
 802224c:	4603      	mov	r3, r0
 802224e:	461a      	mov	r2, r3
 8022250:	4b8c      	ldr	r3, [pc, #560]	; (8022484 <_ZN6Logger7LoggingEh+0x314>)
 8022252:	701a      	strb	r2, [r3, #0]
 8022254:	488a      	ldr	r0, [pc, #552]	; (8022480 <_ZN6Logger7LoggingEh+0x310>)
 8022256:	f008 f85d 	bl	802a314 <__cxa_guard_release>
    static uint8_t pre_cross_cnt  = side_sensor.GetCrossLineCount();
 802225a:	4b8b      	ldr	r3, [pc, #556]	; (8022488 <_ZN6Logger7LoggingEh+0x318>)
 802225c:	781b      	ldrb	r3, [r3, #0]
 802225e:	f3bf 8f5b 	dmb	ish
 8022262:	b2db      	uxtb	r3, r3
 8022264:	f003 0301 	and.w	r3, r3, #1
 8022268:	2b00      	cmp	r3, #0
 802226a:	bf0c      	ite	eq
 802226c:	2301      	moveq	r3, #1
 802226e:	2300      	movne	r3, #0
 8022270:	b2db      	uxtb	r3, r3
 8022272:	2b00      	cmp	r3, #0
 8022274:	d017      	beq.n	80222a6 <_ZN6Logger7LoggingEh+0x136>
 8022276:	4884      	ldr	r0, [pc, #528]	; (8022488 <_ZN6Logger7LoggingEh+0x318>)
 8022278:	f008 f840 	bl	802a2fc <__cxa_guard_acquire>
 802227c:	4603      	mov	r3, r0
 802227e:	2b00      	cmp	r3, #0
 8022280:	bf14      	ite	ne
 8022282:	2301      	movne	r3, #1
 8022284:	2300      	moveq	r3, #0
 8022286:	b2db      	uxtb	r3, r3
 8022288:	2b00      	cmp	r3, #0
 802228a:	d00c      	beq.n	80222a6 <_ZN6Logger7LoggingEh+0x136>
 802228c:	687b      	ldr	r3, [r7, #4]
 802228e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022292:	4618      	mov	r0, r3
 8022294:	f002 f8b8 	bl	8024408 <_ZN10SideSensor17GetCrossLineCountEv>
 8022298:	4603      	mov	r3, r0
 802229a:	461a      	mov	r2, r3
 802229c:	4b7b      	ldr	r3, [pc, #492]	; (802248c <_ZN6Logger7LoggingEh+0x31c>)
 802229e:	701a      	strb	r2, [r3, #0]
 80222a0:	4879      	ldr	r0, [pc, #484]	; (8022488 <_ZN6Logger7LoggingEh+0x318>)
 80222a2:	f008 f837 	bl	802a314 <__cxa_guard_release>
    uint8_t corner_cnt = side_sensor.GetCornerMarkerCount();
 80222a6:	687b      	ldr	r3, [r7, #4]
 80222a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80222ac:	4618      	mov	r0, r3
 80222ae:	f002 f89f 	bl	80243f0 <_ZN10SideSensor20GetCornerMarkerCountEv>
 80222b2:	4603      	mov	r3, r0
 80222b4:	74fb      	strb	r3, [r7, #19]
    uint8_t cross_cnt  = side_sensor.GetCrossLineCount();
 80222b6:	687b      	ldr	r3, [r7, #4]
 80222b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80222bc:	4618      	mov	r0, r3
 80222be:	f002 f8a3 	bl	8024408 <_ZN10SideSensor17GetCrossLineCountEv>
 80222c2:	4603      	mov	r3, r0
 80222c4:	74bb      	strb	r3, [r7, #18]
    uint16_t various_buff = 0;
 80222c6:	2300      	movs	r3, #0
 80222c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(process_complete != 0)        various_buff |= 0x0004;
 80222ca:	78fb      	ldrb	r3, [r7, #3]
 80222cc:	2b00      	cmp	r3, #0
 80222ce:	d003      	beq.n	80222d8 <_ZN6Logger7LoggingEh+0x168>
 80222d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80222d2:	f043 0304 	orr.w	r3, r3, #4
 80222d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_corner_cnt != corner_cnt) various_buff |= 0x0002;
 80222d8:	4b6a      	ldr	r3, [pc, #424]	; (8022484 <_ZN6Logger7LoggingEh+0x314>)
 80222da:	781b      	ldrb	r3, [r3, #0]
 80222dc:	7cfa      	ldrb	r2, [r7, #19]
 80222de:	429a      	cmp	r2, r3
 80222e0:	d003      	beq.n	80222ea <_ZN6Logger7LoggingEh+0x17a>
 80222e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80222e4:	f043 0302 	orr.w	r3, r3, #2
 80222e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_cross_cnt != cross_cnt)   various_buff |= 0x0001;
 80222ea:	4b68      	ldr	r3, [pc, #416]	; (802248c <_ZN6Logger7LoggingEh+0x31c>)
 80222ec:	781b      	ldrb	r3, [r3, #0]
 80222ee:	7cba      	ldrb	r2, [r7, #18]
 80222f0:	429a      	cmp	r2, r3
 80222f2:	d003      	beq.n	80222fc <_ZN6Logger7LoggingEh+0x18c>
 80222f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80222f6:	f043 0301 	orr.w	r3, r3, #1
 80222fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
    pre_corner_cnt = corner_cnt;
 80222fc:	4a61      	ldr	r2, [pc, #388]	; (8022484 <_ZN6Logger7LoggingEh+0x314>)
 80222fe:	7cfb      	ldrb	r3, [r7, #19]
 8022300:	7013      	strb	r3, [r2, #0]
    pre_cross_cnt  = cross_cnt;
 8022302:	4a62      	ldr	r2, [pc, #392]	; (802248c <_ZN6Logger7LoggingEh+0x31c>)
 8022304:	7cbb      	ldrb	r3, [r7, #18]
 8022306:	7013      	strb	r3, [r2, #0]
    various_log_[log_index] = various_buff;
 8022308:	4b5b      	ldr	r3, [pc, #364]	; (8022478 <_ZN6Logger7LoggingEh+0x308>)
 802230a:	881b      	ldrh	r3, [r3, #0]
 802230c:	461a      	mov	r2, r3
 802230e:	687b      	ldr	r3, [r7, #4]
 8022310:	3228      	adds	r2, #40	; 0x28
 8022312:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8022314:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /* Copy periodic log */
    if(log_index == LAST_LOG_INDEX)
 8022318:	4b57      	ldr	r3, [pc, #348]	; (8022478 <_ZN6Logger7LoggingEh+0x308>)
 802231a:	881b      	ldrh	r3, [r3, #0]
 802231c:	2b09      	cmp	r3, #9
 802231e:	d120      	bne.n	8022362 <_ZN6Logger7LoggingEh+0x1f2>
    {
        log_index = 0;
 8022320:	4b55      	ldr	r3, [pc, #340]	; (8022478 <_ZN6Logger7LoggingEh+0x308>)
 8022322:	2200      	movs	r2, #0
 8022324:	801a      	strh	r2, [r3, #0]
        memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 8022326:	687b      	ldr	r3, [r7, #4]
 8022328:	3364      	adds	r3, #100	; 0x64
 802232a:	6879      	ldr	r1, [r7, #4]
 802232c:	2228      	movs	r2, #40	; 0x28
 802232e:	4618      	mov	r0, r3
 8022330:	f008 f818 	bl	802a364 <memcpy>
        memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 8022334:	687b      	ldr	r3, [r7, #4]
 8022336:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 802233a:	687b      	ldr	r3, [r7, #4]
 802233c:	3328      	adds	r3, #40	; 0x28
 802233e:	2228      	movs	r2, #40	; 0x28
 8022340:	4619      	mov	r1, r3
 8022342:	f008 f80f 	bl	802a364 <memcpy>
        memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 8022346:	687b      	ldr	r3, [r7, #4]
 8022348:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 802234c:	687b      	ldr	r3, [r7, #4]
 802234e:	3350      	adds	r3, #80	; 0x50
 8022350:	2214      	movs	r2, #20
 8022352:	4619      	mov	r1, r3
 8022354:	f008 f806 	bl	802a364 <memcpy>
        periodic_write_enable_ = 1;
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	2201      	movs	r2, #1
 802235c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8022360:	e005      	b.n	802236e <_ZN6Logger7LoggingEh+0x1fe>
    }
    else log_index++;
 8022362:	4b45      	ldr	r3, [pc, #276]	; (8022478 <_ZN6Logger7LoggingEh+0x308>)
 8022364:	881b      	ldrh	r3, [r3, #0]
 8022366:	3301      	adds	r3, #1
 8022368:	b29a      	uxth	r2, r3
 802236a:	4b43      	ldr	r3, [pc, #268]	; (8022478 <_ZN6Logger7LoggingEh+0x308>)
 802236c:	801a      	strh	r2, [r3, #0]

    /* Distance correction */
    uint16_t correction_address = now_address;
 802236e:	4b48      	ldr	r3, [pc, #288]	; (8022490 <_ZN6Logger7LoggingEh+0x320>)
 8022370:	881b      	ldrh	r3, [r3, #0]
 8022372:	823b      	strh	r3, [r7, #16]
    float excess = excess_stack_;
 8022374:	687b      	ldr	r3, [r7, #4]
 8022376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802237a:	60fb      	str	r3, [r7, #12]
    excess += distance - LOGGING_CONST_DISTANCE;
 802237c:	68f8      	ldr	r0, [r7, #12]
 802237e:	f7fd ffc3 	bl	8020308 <__aeabi_f2d>
 8022382:	4604      	mov	r4, r0
 8022384:	460d      	mov	r5, r1
 8022386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022388:	f7fd ffbe 	bl	8020308 <__aeabi_f2d>
 802238c:	f04f 0200 	mov.w	r2, #0
 8022390:	4b40      	ldr	r3, [pc, #256]	; (8022494 <_ZN6Logger7LoggingEh+0x324>)
 8022392:	f7fd fe59 	bl	8020048 <__aeabi_dsub>
 8022396:	4602      	mov	r2, r0
 8022398:	460b      	mov	r3, r1
 802239a:	4620      	mov	r0, r4
 802239c:	4629      	mov	r1, r5
 802239e:	f7fd fe55 	bl	802004c <__adddf3>
 80223a2:	4603      	mov	r3, r0
 80223a4:	460c      	mov	r4, r1
 80223a6:	4618      	mov	r0, r3
 80223a8:	4621      	mov	r1, r4
 80223aa:	f7fe fa9f 	bl	80208ec <__aeabi_d2f>
 80223ae:	4603      	mov	r3, r0
 80223b0:	60fb      	str	r3, [r7, #12]
    if(excess > LOGGING_CONST_DISTANCE)
 80223b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80223b6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80223ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80223be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223c2:	dd6b      	ble.n	802249c <_ZN6Logger7LoggingEh+0x32c>
    {
        const_distance_log_[log_index] = excess;
 80223c4:	4b2c      	ldr	r3, [pc, #176]	; (8022478 <_ZN6Logger7LoggingEh+0x308>)
 80223c6:	881b      	ldrh	r3, [r3, #0]
 80223c8:	687a      	ldr	r2, [r7, #4]
 80223ca:	009b      	lsls	r3, r3, #2
 80223cc:	4413      	add	r3, r2
 80223ce:	68fa      	ldr	r2, [r7, #12]
 80223d0:	601a      	str	r2, [r3, #0]
        radian_log_[log_index] = radian;
 80223d2:	4b29      	ldr	r3, [pc, #164]	; (8022478 <_ZN6Logger7LoggingEh+0x308>)
 80223d4:	881b      	ldrh	r3, [r3, #0]
 80223d6:	687a      	ldr	r2, [r7, #4]
 80223d8:	330a      	adds	r3, #10
 80223da:	009b      	lsls	r3, r3, #2
 80223dc:	4413      	add	r3, r2
 80223de:	697a      	ldr	r2, [r7, #20]
 80223e0:	601a      	str	r2, [r3, #0]
        various_log_[log_index] = VARIOUS_LOG_DATA_WHEN_COPY;
 80223e2:	4b25      	ldr	r3, [pc, #148]	; (8022478 <_ZN6Logger7LoggingEh+0x308>)
 80223e4:	881b      	ldrh	r3, [r3, #0]
 80223e6:	461a      	mov	r2, r3
 80223e8:	687b      	ldr	r3, [r7, #4]
 80223ea:	3228      	adds	r2, #40	; 0x28
 80223ec:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 80223f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        excess_stack_ = excess - LOGGING_CONST_DISTANCE;
 80223f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80223f8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80223fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022400:	687b      	ldr	r3, [r7, #4]
 8022402:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
        now_address++;
 8022406:	4b22      	ldr	r3, [pc, #136]	; (8022490 <_ZN6Logger7LoggingEh+0x320>)
 8022408:	881b      	ldrh	r3, [r3, #0]
 802240a:	3301      	adds	r3, #1
 802240c:	b29a      	uxth	r2, r3
 802240e:	4b20      	ldr	r3, [pc, #128]	; (8022490 <_ZN6Logger7LoggingEh+0x320>)
 8022410:	801a      	strh	r2, [r3, #0]

        /* Copy periodic log */
        if(log_index == LAST_LOG_INDEX)
 8022412:	4b19      	ldr	r3, [pc, #100]	; (8022478 <_ZN6Logger7LoggingEh+0x308>)
 8022414:	881b      	ldrh	r3, [r3, #0]
 8022416:	2b09      	cmp	r3, #9
 8022418:	d120      	bne.n	802245c <_ZN6Logger7LoggingEh+0x2ec>
        {
            log_index = 0;
 802241a:	4b17      	ldr	r3, [pc, #92]	; (8022478 <_ZN6Logger7LoggingEh+0x308>)
 802241c:	2200      	movs	r2, #0
 802241e:	801a      	strh	r2, [r3, #0]
            memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	3364      	adds	r3, #100	; 0x64
 8022424:	6879      	ldr	r1, [r7, #4]
 8022426:	2228      	movs	r2, #40	; 0x28
 8022428:	4618      	mov	r0, r3
 802242a:	f007 ff9b 	bl	802a364 <memcpy>
            memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 802242e:	687b      	ldr	r3, [r7, #4]
 8022430:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8022434:	687b      	ldr	r3, [r7, #4]
 8022436:	3328      	adds	r3, #40	; 0x28
 8022438:	2228      	movs	r2, #40	; 0x28
 802243a:	4619      	mov	r1, r3
 802243c:	f007 ff92 	bl	802a364 <memcpy>
            memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 8022440:	687b      	ldr	r3, [r7, #4]
 8022442:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8022446:	687b      	ldr	r3, [r7, #4]
 8022448:	3350      	adds	r3, #80	; 0x50
 802244a:	2214      	movs	r2, #20
 802244c:	4619      	mov	r1, r3
 802244e:	f007 ff89 	bl	802a364 <memcpy>
            periodic_write_enable_ = 1;
 8022452:	687b      	ldr	r3, [r7, #4]
 8022454:	2201      	movs	r2, #1
 8022456:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 802245a:	e023      	b.n	80224a4 <_ZN6Logger7LoggingEh+0x334>
        }
        else log_index++;
 802245c:	4b06      	ldr	r3, [pc, #24]	; (8022478 <_ZN6Logger7LoggingEh+0x308>)
 802245e:	881b      	ldrh	r3, [r3, #0]
 8022460:	3301      	adds	r3, #1
 8022462:	b29a      	uxth	r2, r3
 8022464:	4b04      	ldr	r3, [pc, #16]	; (8022478 <_ZN6Logger7LoggingEh+0x308>)
 8022466:	801a      	strh	r2, [r3, #0]
 8022468:	e01c      	b.n	80224a4 <_ZN6Logger7LoggingEh+0x334>
 802246a:	bf00      	nop
 802246c:	f3af 8000 	nop.w
 8022470:	54442d18 	.word	0x54442d18
 8022474:	400921fb 	.word	0x400921fb
 8022478:	20000082 	.word	0x20000082
 802247c:	40668000 	.word	0x40668000
 8022480:	20000088 	.word	0x20000088
 8022484:	20000084 	.word	0x20000084
 8022488:	20000090 	.word	0x20000090
 802248c:	2000008c 	.word	0x2000008c
 8022490:	20000080 	.word	0x20000080
 8022494:	40340000 	.word	0x40340000
 8022498:	43ca0000 	.word	0x43ca0000
    }
    else excess_stack_ = excess;
 802249c:	687b      	ldr	r3, [r7, #4]
 802249e:	68fa      	ldr	r2, [r7, #12]
 80224a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    /* Accel position log */
    static uint16_t accel_straight_cnt = 0;
    static uint8_t accel_step = 0;
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA)
 80224a4:	687b      	ldr	r3, [r7, #4]
 80224a6:	33e8      	adds	r3, #232	; 0xe8
 80224a8:	4618      	mov	r0, r3
 80224aa:	f7fe fd11 	bl	8020ed0 <_ZN7Encoder15AngularVelocityEv>
 80224ae:	eef0 7a40 	vmov.f32	s15, s0
 80224b2:	eeb0 0a67 	vmov.f32	s0, s15
 80224b6:	f7ff fdc3 	bl	8022040 <_ZSt4fabsf>
 80224ba:	eeb0 7a40 	vmov.f32	s14, s0
 80224be:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 8022498 <_ZN6Logger7LoggingEh+0x328>
 80224c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80224c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224ca:	bf4c      	ite	mi
 80224cc:	2301      	movmi	r3, #1
 80224ce:	2300      	movpl	r3, #0
 80224d0:	b2db      	uxtb	r3, r3
 80224d2:	2b00      	cmp	r3, #0
 80224d4:	d021      	beq.n	802251a <_ZN6Logger7LoggingEh+0x3aa>
    {
        accel_straight_cnt++;
 80224d6:	4b2e      	ldr	r3, [pc, #184]	; (8022590 <_ZN6Logger7LoggingEh+0x420>)
 80224d8:	881b      	ldrh	r3, [r3, #0]
 80224da:	3301      	adds	r3, #1
 80224dc:	b29a      	uxth	r2, r3
 80224de:	4b2c      	ldr	r3, [pc, #176]	; (8022590 <_ZN6Logger7LoggingEh+0x420>)
 80224e0:	801a      	strh	r2, [r3, #0]
        if(accel_straight_cnt >= CNT_OF_ACCEL_STEP_UP && accel_step < NUM_OF_ACCEL_STEP)
 80224e2:	4b2b      	ldr	r3, [pc, #172]	; (8022590 <_ZN6Logger7LoggingEh+0x420>)
 80224e4:	881b      	ldrh	r3, [r3, #0]
 80224e6:	2b07      	cmp	r3, #7
 80224e8:	d947      	bls.n	802257a <_ZN6Logger7LoggingEh+0x40a>
 80224ea:	4b2a      	ldr	r3, [pc, #168]	; (8022594 <_ZN6Logger7LoggingEh+0x424>)
 80224ec:	781b      	ldrb	r3, [r3, #0]
 80224ee:	2b04      	cmp	r3, #4
 80224f0:	d843      	bhi.n	802257a <_ZN6Logger7LoggingEh+0x40a>
        {
            accel_step++;
 80224f2:	4b28      	ldr	r3, [pc, #160]	; (8022594 <_ZN6Logger7LoggingEh+0x424>)
 80224f4:	781b      	ldrb	r3, [r3, #0]
 80224f6:	3301      	adds	r3, #1
 80224f8:	b2da      	uxtb	r2, r3
 80224fa:	4b26      	ldr	r3, [pc, #152]	; (8022594 <_ZN6Logger7LoggingEh+0x424>)
 80224fc:	701a      	strb	r2, [r3, #0]
            accel_address_[accel_step-1] = correction_address - CNT_OF_ACCEL_STEP_UP;
 80224fe:	4b25      	ldr	r3, [pc, #148]	; (8022594 <_ZN6Logger7LoggingEh+0x424>)
 8022500:	781b      	ldrb	r3, [r3, #0]
 8022502:	1e5a      	subs	r2, r3, #1
 8022504:	8a3b      	ldrh	r3, [r7, #16]
 8022506:	3b08      	subs	r3, #8
 8022508:	b299      	uxth	r1, r3
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	3264      	adds	r2, #100	; 0x64
 802250e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            accel_straight_cnt = 0;
 8022512:	4b1f      	ldr	r3, [pc, #124]	; (8022590 <_ZN6Logger7LoggingEh+0x420>)
 8022514:	2200      	movs	r2, #0
 8022516:	801a      	strh	r2, [r3, #0]
 8022518:	e02f      	b.n	802257a <_ZN6Logger7LoggingEh+0x40a>
        }
    }
    else if(accel_step != 0)
 802251a:	4b1e      	ldr	r3, [pc, #120]	; (8022594 <_ZN6Logger7LoggingEh+0x424>)
 802251c:	781b      	ldrb	r3, [r3, #0]
 802251e:	2b00      	cmp	r3, #0
 8022520:	d028      	beq.n	8022574 <_ZN6Logger7LoggingEh+0x404>
    {
        for(int i = 1; i <= accel_step; i++)
 8022522:	2301      	movs	r3, #1
 8022524:	62bb      	str	r3, [r7, #40]	; 0x28
 8022526:	4b1b      	ldr	r3, [pc, #108]	; (8022594 <_ZN6Logger7LoggingEh+0x424>)
 8022528:	781b      	ldrb	r3, [r3, #0]
 802252a:	461a      	mov	r2, r3
 802252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802252e:	4293      	cmp	r3, r2
 8022530:	dc14      	bgt.n	802255c <_ZN6Logger7LoggingEh+0x3ec>
        {
            decel_address_[i-1] = (correction_address-1) - (DIFF_NEXT_ACCEL_STEP * i);
 8022532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022534:	b29b      	uxth	r3, r3
 8022536:	009b      	lsls	r3, r3, #2
 8022538:	b29b      	uxth	r3, r3
 802253a:	8a3a      	ldrh	r2, [r7, #16]
 802253c:	1ad3      	subs	r3, r2, r3
 802253e:	b29a      	uxth	r2, r3
 8022540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022542:	3b01      	subs	r3, #1
 8022544:	3a01      	subs	r2, #1
 8022546:	b291      	uxth	r1, r2
 8022548:	687a      	ldr	r2, [r7, #4]
 802254a:	3368      	adds	r3, #104	; 0x68
 802254c:	005b      	lsls	r3, r3, #1
 802254e:	4413      	add	r3, r2
 8022550:	460a      	mov	r2, r1
 8022552:	805a      	strh	r2, [r3, #2]
        for(int i = 1; i <= accel_step; i++)
 8022554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022556:	3301      	adds	r3, #1
 8022558:	62bb      	str	r3, [r7, #40]	; 0x28
 802255a:	e7e4      	b.n	8022526 <_ZN6Logger7LoggingEh+0x3b6>
        }
        accel_position_write_enable_ = accel_step;
 802255c:	4b0d      	ldr	r3, [pc, #52]	; (8022594 <_ZN6Logger7LoggingEh+0x424>)
 802255e:	781a      	ldrb	r2, [r3, #0]
 8022560:	687b      	ldr	r3, [r7, #4]
 8022562:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        accel_step = 0;
 8022566:	4b0b      	ldr	r3, [pc, #44]	; (8022594 <_ZN6Logger7LoggingEh+0x424>)
 8022568:	2200      	movs	r2, #0
 802256a:	701a      	strb	r2, [r3, #0]
        accel_straight_cnt = 0;
 802256c:	4b08      	ldr	r3, [pc, #32]	; (8022590 <_ZN6Logger7LoggingEh+0x420>)
 802256e:	2200      	movs	r2, #0
 8022570:	801a      	strh	r2, [r3, #0]
 8022572:	e002      	b.n	802257a <_ZN6Logger7LoggingEh+0x40a>
    }
    else accel_straight_cnt = 0;
 8022574:	4b06      	ldr	r3, [pc, #24]	; (8022590 <_ZN6Logger7LoggingEh+0x420>)
 8022576:	2200      	movs	r2, #0
 8022578:	801a      	strh	r2, [r3, #0]

    now_address++;
 802257a:	4b07      	ldr	r3, [pc, #28]	; (8022598 <_ZN6Logger7LoggingEh+0x428>)
 802257c:	881b      	ldrh	r3, [r3, #0]
 802257e:	3301      	adds	r3, #1
 8022580:	b29a      	uxth	r2, r3
 8022582:	4b05      	ldr	r3, [pc, #20]	; (8022598 <_ZN6Logger7LoggingEh+0x428>)
 8022584:	801a      	strh	r2, [r3, #0]
 8022586:	e000      	b.n	802258a <_ZN6Logger7LoggingEh+0x41a>
    if(distance < LOGGING_CONST_DISTANCE) return;
 8022588:	bf00      	nop
}
 802258a:	3730      	adds	r7, #48	; 0x30
 802258c:	46bd      	mov	sp, r7
 802258e:	bdb0      	pop	{r4, r5, r7, pc}
 8022590:	20000094 	.word	0x20000094
 8022594:	20000096 	.word	0x20000096
 8022598:	20000080 	.word	0x20000080

0802259c <_ZN6Logger16StorePeriodicLogEv>:

uint8_t Logger::StorePeriodicLog()
{
 802259c:	b580      	push	{r7, lr}
 802259e:	b084      	sub	sp, #16
 80225a0:	af00      	add	r7, sp, #0
 80225a2:	6078      	str	r0, [r7, #4]
    if(periodic_write_enable_ == 0) return 0;
 80225a4:	687b      	ldr	r3, [r7, #4]
 80225a6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80225aa:	2b00      	cmp	r3, #0
 80225ac:	d101      	bne.n	80225b2 <_ZN6Logger16StorePeriodicLogEv+0x16>
 80225ae:	2300      	movs	r3, #0
 80225b0:	e087      	b.n	80226c2 <_ZN6Logger16StorePeriodicLogEv+0x126>
    else periodic_write_enable_ = 0;
 80225b2:	687b      	ldr	r3, [r7, #4]
 80225b4:	2200      	movs	r2, #0
 80225b6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    static uint32_t address_a = HEAD_ADDRESS_BLOCK_A;
    static uint32_t address_b = HEAD_ADDRESS_BLOCK_B;
    static uint32_t address_c = HEAD_ADDRESS_BLOCK_C;
    uint8_t result = 0;
 80225ba:	2300      	movs	r3, #0
 80225bc:	73fb      	strb	r3, [r7, #15]

    if(!flash.CheckBlankWord(address_a, NUM_OF_LOG))     return 0x10;
 80225be:	687b      	ldr	r3, [r7, #4]
 80225c0:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80225c4:	4b41      	ldr	r3, [pc, #260]	; (80226cc <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80225c6:	681b      	ldr	r3, [r3, #0]
 80225c8:	220a      	movs	r2, #10
 80225ca:	4619      	mov	r1, r3
 80225cc:	f7fe fe5c 	bl	8021288 <_ZN5Flash14CheckBlankWordEmm>
 80225d0:	4603      	mov	r3, r0
 80225d2:	f083 0301 	eor.w	r3, r3, #1
 80225d6:	b2db      	uxtb	r3, r3
 80225d8:	2b00      	cmp	r3, #0
 80225da:	d001      	beq.n	80225e0 <_ZN6Logger16StorePeriodicLogEv+0x44>
 80225dc:	2310      	movs	r3, #16
 80225de:	e070      	b.n	80226c2 <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankWord(address_b, NUM_OF_LOG))     return 0x20;
 80225e0:	687b      	ldr	r3, [r7, #4]
 80225e2:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80225e6:	4b3a      	ldr	r3, [pc, #232]	; (80226d0 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80225e8:	681b      	ldr	r3, [r3, #0]
 80225ea:	220a      	movs	r2, #10
 80225ec:	4619      	mov	r1, r3
 80225ee:	f7fe fe4b 	bl	8021288 <_ZN5Flash14CheckBlankWordEmm>
 80225f2:	4603      	mov	r3, r0
 80225f4:	f083 0301 	eor.w	r3, r3, #1
 80225f8:	b2db      	uxtb	r3, r3
 80225fa:	2b00      	cmp	r3, #0
 80225fc:	d001      	beq.n	8022602 <_ZN6Logger16StorePeriodicLogEv+0x66>
 80225fe:	2320      	movs	r3, #32
 8022600:	e05f      	b.n	80226c2 <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankHalfword(address_c, NUM_OF_LOG)) return 0x40;
 8022602:	687b      	ldr	r3, [r7, #4]
 8022604:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022608:	4b32      	ldr	r3, [pc, #200]	; (80226d4 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 802260a:	681b      	ldr	r3, [r3, #0]
 802260c:	220a      	movs	r2, #10
 802260e:	4619      	mov	r1, r3
 8022610:	f7fe fde6 	bl	80211e0 <_ZN5Flash18CheckBlankHalfwordEmm>
 8022614:	4603      	mov	r3, r0
 8022616:	f083 0301 	eor.w	r3, r3, #1
 802261a:	b2db      	uxtb	r3, r3
 802261c:	2b00      	cmp	r3, #0
 802261e:	d001      	beq.n	8022624 <_ZN6Logger16StorePeriodicLogEv+0x88>
 8022620:	2340      	movs	r3, #64	; 0x40
 8022622:	e04e      	b.n	80226c2 <_ZN6Logger16StorePeriodicLogEv+0x126>

    if(!flash.StoreFloat(address_a, const_distance_copy_, NUM_OF_LOG)) result |= 0x01;
 8022624:	687b      	ldr	r3, [r7, #4]
 8022626:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 802262a:	4b28      	ldr	r3, [pc, #160]	; (80226cc <_ZN6Logger16StorePeriodicLogEv+0x130>)
 802262c:	6819      	ldr	r1, [r3, #0]
 802262e:	687b      	ldr	r3, [r7, #4]
 8022630:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8022634:	230a      	movs	r3, #10
 8022636:	f7fe fd3e 	bl	80210b6 <_ZN5Flash10StoreFloatEmPfm>
 802263a:	4603      	mov	r3, r0
 802263c:	f083 0301 	eor.w	r3, r3, #1
 8022640:	b2db      	uxtb	r3, r3
 8022642:	2b00      	cmp	r3, #0
 8022644:	d003      	beq.n	802264e <_ZN6Logger16StorePeriodicLogEv+0xb2>
 8022646:	7bfb      	ldrb	r3, [r7, #15]
 8022648:	f043 0301 	orr.w	r3, r3, #1
 802264c:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreFloat(address_b, radian_copy_, NUM_OF_LOG))         result |= 0x02;
 802264e:	687b      	ldr	r3, [r7, #4]
 8022650:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022654:	4b1e      	ldr	r3, [pc, #120]	; (80226d0 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022656:	6819      	ldr	r1, [r3, #0]
 8022658:	687b      	ldr	r3, [r7, #4]
 802265a:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 802265e:	230a      	movs	r3, #10
 8022660:	f7fe fd29 	bl	80210b6 <_ZN5Flash10StoreFloatEmPfm>
 8022664:	4603      	mov	r3, r0
 8022666:	f083 0301 	eor.w	r3, r3, #1
 802266a:	b2db      	uxtb	r3, r3
 802266c:	2b00      	cmp	r3, #0
 802266e:	d003      	beq.n	8022678 <_ZN6Logger16StorePeriodicLogEv+0xdc>
 8022670:	7bfb      	ldrb	r3, [r7, #15]
 8022672:	f043 0302 	orr.w	r3, r3, #2
 8022676:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreUint16(address_c, various_copy_, NUM_OF_LOG))       result |= 0x04;
 8022678:	687b      	ldr	r3, [r7, #4]
 802267a:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 802267e:	4b15      	ldr	r3, [pc, #84]	; (80226d4 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022680:	6819      	ldr	r1, [r3, #0]
 8022682:	687b      	ldr	r3, [r7, #4]
 8022684:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8022688:	230a      	movs	r3, #10
 802268a:	f7fe fca9 	bl	8020fe0 <_ZN5Flash11StoreUint16EmPtm>
 802268e:	4603      	mov	r3, r0
 8022690:	f083 0301 	eor.w	r3, r3, #1
 8022694:	b2db      	uxtb	r3, r3
 8022696:	2b00      	cmp	r3, #0
 8022698:	d003      	beq.n	80226a2 <_ZN6Logger16StorePeriodicLogEv+0x106>
 802269a:	7bfb      	ldrb	r3, [r7, #15]
 802269c:	f043 0304 	orr.w	r3, r3, #4
 80226a0:	73fb      	strb	r3, [r7, #15]

    address_a += NUM_OF_LOG * 4;
 80226a2:	4b0a      	ldr	r3, [pc, #40]	; (80226cc <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80226a4:	681b      	ldr	r3, [r3, #0]
 80226a6:	3328      	adds	r3, #40	; 0x28
 80226a8:	4a08      	ldr	r2, [pc, #32]	; (80226cc <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80226aa:	6013      	str	r3, [r2, #0]
    address_b += NUM_OF_LOG * 4;
 80226ac:	4b08      	ldr	r3, [pc, #32]	; (80226d0 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80226ae:	681b      	ldr	r3, [r3, #0]
 80226b0:	3328      	adds	r3, #40	; 0x28
 80226b2:	4a07      	ldr	r2, [pc, #28]	; (80226d0 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80226b4:	6013      	str	r3, [r2, #0]
    address_c += NUM_OF_LOG * 2;
 80226b6:	4b07      	ldr	r3, [pc, #28]	; (80226d4 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80226b8:	681b      	ldr	r3, [r3, #0]
 80226ba:	3314      	adds	r3, #20
 80226bc:	4a05      	ldr	r2, [pc, #20]	; (80226d4 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80226be:	6013      	str	r3, [r2, #0]

    return result;
 80226c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80226c2:	4618      	mov	r0, r3
 80226c4:	3710      	adds	r7, #16
 80226c6:	46bd      	mov	sp, r7
 80226c8:	bd80      	pop	{r7, pc}
 80226ca:	bf00      	nop
 80226cc:	20000000 	.word	0x20000000
 80226d0:	20000004 	.word	0x20000004
 80226d4:	20000008 	.word	0x20000008

080226d8 <_ZN6Logger21StoreAccelPositionLogEv>:

uint8_t Logger::StoreAccelPositionLog()
{
 80226d8:	b580      	push	{r7, lr}
 80226da:	b086      	sub	sp, #24
 80226dc:	af00      	add	r7, sp, #0
 80226de:	6078      	str	r0, [r7, #4]
    uint8_t accel_step = accel_position_write_enable_;
 80226e0:	687b      	ldr	r3, [r7, #4]
 80226e2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80226e6:	75bb      	strb	r3, [r7, #22]
    if(accel_step == 0) return 0;
 80226e8:	7dbb      	ldrb	r3, [r7, #22]
 80226ea:	2b00      	cmp	r3, #0
 80226ec:	d101      	bne.n	80226f2 <_ZN6Logger21StoreAccelPositionLogEv+0x1a>
 80226ee:	2300      	movs	r3, #0
 80226f0:	e079      	b.n	80227e6 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    else accel_position_write_enable_ = 0;
 80226f2:	687b      	ldr	r3, [r7, #4]
 80226f4:	2200      	movs	r2, #0
 80226f6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    uint32_t address;
    uint8_t accel = 0; // step 0x01, 0x02, 0x03, 0x04, 0x05.
 80226fa:	2300      	movs	r3, #0
 80226fc:	73fb      	strb	r3, [r7, #15]
    uint8_t decel = 0; // step 0x10, 0x20, 0x30, 0x40, 0x50.
 80226fe:	2300      	movs	r3, #0
 8022700:	73bb      	strb	r3, [r7, #14]
    uint8_t i;

    for(i = 1; i <= accel_step; i++)
 8022702:	2301      	movs	r3, #1
 8022704:	75fb      	strb	r3, [r7, #23]
 8022706:	7dfa      	ldrb	r2, [r7, #23]
 8022708:	7dbb      	ldrb	r3, [r7, #22]
 802270a:	429a      	cmp	r2, r3
 802270c:	d830      	bhi.n	8022770 <_ZN6Logger21StoreAccelPositionLogEv+0x98>
    {
        accel = i;
 802270e:	7dfb      	ldrb	r3, [r7, #23]
 8022710:	73fb      	strb	r3, [r7, #15]
        address = HEAD_ADDRESS_BLOCK_D + accel_address_[i-1];
 8022712:	7dfb      	ldrb	r3, [r7, #23]
 8022714:	1e5a      	subs	r2, r3, #1
 8022716:	687b      	ldr	r3, [r7, #4]
 8022718:	3264      	adds	r2, #100	; 0x64
 802271a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802271e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022722:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022726:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x10;
 8022728:	687b      	ldr	r3, [r7, #4]
 802272a:	33f4      	adds	r3, #244	; 0xf4
 802272c:	2201      	movs	r2, #1
 802272e:	6939      	ldr	r1, [r7, #16]
 8022730:	4618      	mov	r0, r3
 8022732:	f7fe fd08 	bl	8021146 <_ZN5Flash14CheckBlankByteEmm>
 8022736:	4603      	mov	r3, r0
 8022738:	f083 0301 	eor.w	r3, r3, #1
 802273c:	b2db      	uxtb	r3, r3
 802273e:	2b00      	cmp	r3, #0
 8022740:	d001      	beq.n	8022746 <_ZN6Logger21StoreAccelPositionLogEv+0x6e>
 8022742:	2310      	movs	r3, #16
 8022744:	e04f      	b.n	80227e6 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &accel, 1)) return 0x20;
 8022746:	687b      	ldr	r3, [r7, #4]
 8022748:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 802274c:	f107 020f 	add.w	r2, r7, #15
 8022750:	2301      	movs	r3, #1
 8022752:	6939      	ldr	r1, [r7, #16]
 8022754:	f7fe fc10 	bl	8020f78 <_ZN5Flash10StoreUint8EmPhm>
 8022758:	4603      	mov	r3, r0
 802275a:	f083 0301 	eor.w	r3, r3, #1
 802275e:	b2db      	uxtb	r3, r3
 8022760:	2b00      	cmp	r3, #0
 8022762:	d001      	beq.n	8022768 <_ZN6Logger21StoreAccelPositionLogEv+0x90>
 8022764:	2320      	movs	r3, #32
 8022766:	e03e      	b.n	80227e6 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 8022768:	7dfb      	ldrb	r3, [r7, #23]
 802276a:	3301      	adds	r3, #1
 802276c:	75fb      	strb	r3, [r7, #23]
 802276e:	e7ca      	b.n	8022706 <_ZN6Logger21StoreAccelPositionLogEv+0x2e>
    }
    for(i = 1; i <= accel_step; i++)
 8022770:	2301      	movs	r3, #1
 8022772:	75fb      	strb	r3, [r7, #23]
 8022774:	7dfa      	ldrb	r2, [r7, #23]
 8022776:	7dbb      	ldrb	r3, [r7, #22]
 8022778:	429a      	cmp	r2, r3
 802277a:	d833      	bhi.n	80227e4 <_ZN6Logger21StoreAccelPositionLogEv+0x10c>
    {
        decel = i << 4;
 802277c:	7dfb      	ldrb	r3, [r7, #23]
 802277e:	011b      	lsls	r3, r3, #4
 8022780:	b2db      	uxtb	r3, r3
 8022782:	73bb      	strb	r3, [r7, #14]
        address = HEAD_ADDRESS_BLOCK_D + decel_address_[i-1];
 8022784:	7dfb      	ldrb	r3, [r7, #23]
 8022786:	3b01      	subs	r3, #1
 8022788:	687a      	ldr	r2, [r7, #4]
 802278a:	3368      	adds	r3, #104	; 0x68
 802278c:	005b      	lsls	r3, r3, #1
 802278e:	4413      	add	r3, r2
 8022790:	885b      	ldrh	r3, [r3, #2]
 8022792:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022796:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 802279a:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x30;
 802279c:	687b      	ldr	r3, [r7, #4]
 802279e:	33f4      	adds	r3, #244	; 0xf4
 80227a0:	2201      	movs	r2, #1
 80227a2:	6939      	ldr	r1, [r7, #16]
 80227a4:	4618      	mov	r0, r3
 80227a6:	f7fe fcce 	bl	8021146 <_ZN5Flash14CheckBlankByteEmm>
 80227aa:	4603      	mov	r3, r0
 80227ac:	f083 0301 	eor.w	r3, r3, #1
 80227b0:	b2db      	uxtb	r3, r3
 80227b2:	2b00      	cmp	r3, #0
 80227b4:	d001      	beq.n	80227ba <_ZN6Logger21StoreAccelPositionLogEv+0xe2>
 80227b6:	2330      	movs	r3, #48	; 0x30
 80227b8:	e015      	b.n	80227e6 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &decel, 1)) return 0x40;
 80227ba:	687b      	ldr	r3, [r7, #4]
 80227bc:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80227c0:	f107 020e 	add.w	r2, r7, #14
 80227c4:	2301      	movs	r3, #1
 80227c6:	6939      	ldr	r1, [r7, #16]
 80227c8:	f7fe fbd6 	bl	8020f78 <_ZN5Flash10StoreUint8EmPhm>
 80227cc:	4603      	mov	r3, r0
 80227ce:	f083 0301 	eor.w	r3, r3, #1
 80227d2:	b2db      	uxtb	r3, r3
 80227d4:	2b00      	cmp	r3, #0
 80227d6:	d001      	beq.n	80227dc <_ZN6Logger21StoreAccelPositionLogEv+0x104>
 80227d8:	2340      	movs	r3, #64	; 0x40
 80227da:	e004      	b.n	80227e6 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 80227dc:	7dfb      	ldrb	r3, [r7, #23]
 80227de:	3301      	adds	r3, #1
 80227e0:	75fb      	strb	r3, [r7, #23]
 80227e2:	e7c7      	b.n	8022774 <_ZN6Logger21StoreAccelPositionLogEv+0x9c>
    }
    
    return 0;
 80227e4:	2300      	movs	r3, #0
}
 80227e6:	4618      	mov	r0, r3
 80227e8:	3718      	adds	r7, #24
 80227ea:	46bd      	mov	sp, r7
 80227ec:	bd80      	pop	{r7, pc}
	...

080227f0 <_ZN6Logger7LoadingEv>:

void Logger::Loading()
{
 80227f0:	b580      	push	{r7, lr}
 80227f2:	b08c      	sub	sp, #48	; 0x30
 80227f4:	af00      	add	r7, sp, #0
 80227f6:	6078      	str	r0, [r7, #4]
    float distance = encoder.GetDistanceStack();
 80227f8:	687b      	ldr	r3, [r7, #4]
 80227fa:	33e8      	adds	r3, #232	; 0xe8
 80227fc:	4618      	mov	r0, r3
 80227fe:	f7fe fb58 	bl	8020eb2 <_ZN7Encoder16GetDistanceStackEv>
 8022802:	ed87 0a08 	vstr	s0, [r7, #32]

    if(distance < LOGGING_CONST_DISTANCE) return;
 8022806:	edd7 7a08 	vldr	s15, [r7, #32]
 802280a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 802280e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022816:	f100 8299 	bmi.w	8022d4c <_ZN6Logger7LoadingEv+0x55c>
    encoder.ResetDistanceStack();
 802281a:	687b      	ldr	r3, [r7, #4]
 802281c:	33e8      	adds	r3, #232	; 0xe8
 802281e:	4618      	mov	r0, r3
 8022820:	f7fe fb2a 	bl	8020e78 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0;

    /* Load curvature radius */
    float log_distance = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_A));
 8022824:	4bad      	ldr	r3, [pc, #692]	; (8022adc <_ZN6Logger7LoadingEv+0x2ec>)
 8022826:	881b      	ldrh	r3, [r3, #0]
 8022828:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 802282c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8022830:	681b      	ldr	r3, [r3, #0]
 8022832:	61fb      	str	r3, [r7, #28]
    float log_radian = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_B));
 8022834:	4ba9      	ldr	r3, [pc, #676]	; (8022adc <_ZN6Logger7LoadingEv+0x2ec>)
 8022836:	881b      	ldrh	r3, [r3, #0]
 8022838:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 802283c:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8022840:	681b      	ldr	r3, [r3, #0]
 8022842:	61bb      	str	r3, [r7, #24]
    float radius = log_distance / log_radian;
 8022844:	edd7 6a07 	vldr	s13, [r7, #28]
 8022848:	ed97 7a06 	vldr	s14, [r7, #24]
 802284c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022850:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Load correction position */
    uint16_t log_various = *(reinterpret_cast<uint16_t*>(now_address + HEAD_ADDRESS_BLOCK_C));
 8022854:	4ba1      	ldr	r3, [pc, #644]	; (8022adc <_ZN6Logger7LoadingEv+0x2ec>)
 8022856:	881b      	ldrh	r3, [r3, #0]
 8022858:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 802285c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8022860:	881b      	ldrh	r3, [r3, #0]
 8022862:	827b      	strh	r3, [r7, #18]
    bool log_corner = false, log_corner_pass = false;
 8022864:	2300      	movs	r3, #0
 8022866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 802286a:	2300      	movs	r3, #0
 802286c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    bool log_cross = false, log_cross_pass = false;
 8022870:	2300      	movs	r3, #0
 8022872:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8022876:	2300      	movs	r3, #0
 8022878:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    if((log_various & 0x0002) == 0x0002) log_corner = true;
 802287c:	8a7b      	ldrh	r3, [r7, #18]
 802287e:	f003 0302 	and.w	r3, r3, #2
 8022882:	2b00      	cmp	r3, #0
 8022884:	d002      	beq.n	802288c <_ZN6Logger7LoadingEv+0x9c>
 8022886:	2301      	movs	r3, #1
 8022888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if((log_various & 0x0001) == 0x0001) log_cross = true;
 802288c:	8a7b      	ldrh	r3, [r7, #18]
 802288e:	f003 0301 	and.w	r3, r3, #1
 8022892:	2b00      	cmp	r3, #0
 8022894:	d002      	beq.n	802289c <_ZN6Logger7LoadingEv+0xac>
 8022896:	2301      	movs	r3, #1
 8022898:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    /* Get correction position */
    bool run_corner = false, run_corner_pass = false;
 802289c:	2300      	movs	r3, #0
 802289e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80228a2:	2300      	movs	r3, #0
 80228a4:	747b      	strb	r3, [r7, #17]
    bool run_cross = false, run_cross_pass = false;
 80228a6:	2300      	movs	r3, #0
 80228a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80228ac:	2300      	movs	r3, #0
 80228ae:	743b      	strb	r3, [r7, #16]
    uint8_t corner = side_sensor.GetCornerMarkerCount();
 80228b0:	687b      	ldr	r3, [r7, #4]
 80228b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80228b6:	4618      	mov	r0, r3
 80228b8:	f001 fd9a 	bl	80243f0 <_ZN10SideSensor20GetCornerMarkerCountEv>
 80228bc:	4603      	mov	r3, r0
 80228be:	73fb      	strb	r3, [r7, #15]
    uint8_t cross = side_sensor.GetCrossLineCount();
 80228c0:	687b      	ldr	r3, [r7, #4]
 80228c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80228c6:	4618      	mov	r0, r3
 80228c8:	f001 fd9e 	bl	8024408 <_ZN10SideSensor17GetCrossLineCountEv>
 80228cc:	4603      	mov	r3, r0
 80228ce:	73bb      	strb	r3, [r7, #14]
    static uint8_t pre_corner = corner;
 80228d0:	4b83      	ldr	r3, [pc, #524]	; (8022ae0 <_ZN6Logger7LoadingEv+0x2f0>)
 80228d2:	781b      	ldrb	r3, [r3, #0]
 80228d4:	f3bf 8f5b 	dmb	ish
 80228d8:	b2db      	uxtb	r3, r3
 80228da:	f003 0301 	and.w	r3, r3, #1
 80228de:	2b00      	cmp	r3, #0
 80228e0:	bf0c      	ite	eq
 80228e2:	2301      	moveq	r3, #1
 80228e4:	2300      	movne	r3, #0
 80228e6:	b2db      	uxtb	r3, r3
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	d010      	beq.n	802290e <_ZN6Logger7LoadingEv+0x11e>
 80228ec:	487c      	ldr	r0, [pc, #496]	; (8022ae0 <_ZN6Logger7LoadingEv+0x2f0>)
 80228ee:	f007 fd05 	bl	802a2fc <__cxa_guard_acquire>
 80228f2:	4603      	mov	r3, r0
 80228f4:	2b00      	cmp	r3, #0
 80228f6:	bf14      	ite	ne
 80228f8:	2301      	movne	r3, #1
 80228fa:	2300      	moveq	r3, #0
 80228fc:	b2db      	uxtb	r3, r3
 80228fe:	2b00      	cmp	r3, #0
 8022900:	d005      	beq.n	802290e <_ZN6Logger7LoadingEv+0x11e>
 8022902:	4a78      	ldr	r2, [pc, #480]	; (8022ae4 <_ZN6Logger7LoadingEv+0x2f4>)
 8022904:	7bfb      	ldrb	r3, [r7, #15]
 8022906:	7013      	strb	r3, [r2, #0]
 8022908:	4875      	ldr	r0, [pc, #468]	; (8022ae0 <_ZN6Logger7LoadingEv+0x2f0>)
 802290a:	f007 fd03 	bl	802a314 <__cxa_guard_release>
    static uint8_t pre_cross = cross;
 802290e:	4b76      	ldr	r3, [pc, #472]	; (8022ae8 <_ZN6Logger7LoadingEv+0x2f8>)
 8022910:	781b      	ldrb	r3, [r3, #0]
 8022912:	f3bf 8f5b 	dmb	ish
 8022916:	b2db      	uxtb	r3, r3
 8022918:	f003 0301 	and.w	r3, r3, #1
 802291c:	2b00      	cmp	r3, #0
 802291e:	bf0c      	ite	eq
 8022920:	2301      	moveq	r3, #1
 8022922:	2300      	movne	r3, #0
 8022924:	b2db      	uxtb	r3, r3
 8022926:	2b00      	cmp	r3, #0
 8022928:	d010      	beq.n	802294c <_ZN6Logger7LoadingEv+0x15c>
 802292a:	486f      	ldr	r0, [pc, #444]	; (8022ae8 <_ZN6Logger7LoadingEv+0x2f8>)
 802292c:	f007 fce6 	bl	802a2fc <__cxa_guard_acquire>
 8022930:	4603      	mov	r3, r0
 8022932:	2b00      	cmp	r3, #0
 8022934:	bf14      	ite	ne
 8022936:	2301      	movne	r3, #1
 8022938:	2300      	moveq	r3, #0
 802293a:	b2db      	uxtb	r3, r3
 802293c:	2b00      	cmp	r3, #0
 802293e:	d005      	beq.n	802294c <_ZN6Logger7LoadingEv+0x15c>
 8022940:	4a6a      	ldr	r2, [pc, #424]	; (8022aec <_ZN6Logger7LoadingEv+0x2fc>)
 8022942:	7bbb      	ldrb	r3, [r7, #14]
 8022944:	7013      	strb	r3, [r2, #0]
 8022946:	4868      	ldr	r0, [pc, #416]	; (8022ae8 <_ZN6Logger7LoadingEv+0x2f8>)
 8022948:	f007 fce4 	bl	802a314 <__cxa_guard_release>
    static uint8_t straight_cnt = 0;
    bool straight = false;
 802294c:	2300      	movs	r3, #0
 802294e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA){
 8022952:	687b      	ldr	r3, [r7, #4]
 8022954:	33e8      	adds	r3, #232	; 0xe8
 8022956:	4618      	mov	r0, r3
 8022958:	f7fe faba 	bl	8020ed0 <_ZN7Encoder15AngularVelocityEv>
 802295c:	eef0 7a40 	vmov.f32	s15, s0
 8022960:	eeb0 0a67 	vmov.f32	s0, s15
 8022964:	f7ff fb6c 	bl	8022040 <_ZSt4fabsf>
 8022968:	eeb0 7a40 	vmov.f32	s14, s0
 802296c:	eddf 7a60 	vldr	s15, [pc, #384]	; 8022af0 <_ZN6Logger7LoadingEv+0x300>
 8022970:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022978:	bf4c      	ite	mi
 802297a:	2301      	movmi	r3, #1
 802297c:	2300      	movpl	r3, #0
 802297e:	b2db      	uxtb	r3, r3
 8022980:	2b00      	cmp	r3, #0
 8022982:	d00e      	beq.n	80229a2 <_ZN6Logger7LoadingEv+0x1b2>
        if(straight_cnt <= STRAIGHT_JUDGE_COUNT) straight_cnt++;
 8022984:	4b5b      	ldr	r3, [pc, #364]	; (8022af4 <_ZN6Logger7LoadingEv+0x304>)
 8022986:	781b      	ldrb	r3, [r3, #0]
 8022988:	2b05      	cmp	r3, #5
 802298a:	d806      	bhi.n	802299a <_ZN6Logger7LoadingEv+0x1aa>
 802298c:	4b59      	ldr	r3, [pc, #356]	; (8022af4 <_ZN6Logger7LoadingEv+0x304>)
 802298e:	781b      	ldrb	r3, [r3, #0]
 8022990:	3301      	adds	r3, #1
 8022992:	b2da      	uxtb	r2, r3
 8022994:	4b57      	ldr	r3, [pc, #348]	; (8022af4 <_ZN6Logger7LoadingEv+0x304>)
 8022996:	701a      	strb	r2, [r3, #0]
 8022998:	e006      	b.n	80229a8 <_ZN6Logger7LoadingEv+0x1b8>
        else straight = true;
 802299a:	2301      	movs	r3, #1
 802299c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80229a0:	e002      	b.n	80229a8 <_ZN6Logger7LoadingEv+0x1b8>
    }else straight_cnt = 0;
 80229a2:	4b54      	ldr	r3, [pc, #336]	; (8022af4 <_ZN6Logger7LoadingEv+0x304>)
 80229a4:	2200      	movs	r2, #0
 80229a6:	701a      	strb	r2, [r3, #0]
    if(corner > pre_corner && straight) run_corner = true;
 80229a8:	4b4e      	ldr	r3, [pc, #312]	; (8022ae4 <_ZN6Logger7LoadingEv+0x2f4>)
 80229aa:	781b      	ldrb	r3, [r3, #0]
 80229ac:	7bfa      	ldrb	r2, [r7, #15]
 80229ae:	429a      	cmp	r2, r3
 80229b0:	d906      	bls.n	80229c0 <_ZN6Logger7LoadingEv+0x1d0>
 80229b2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80229b6:	2b00      	cmp	r3, #0
 80229b8:	d002      	beq.n	80229c0 <_ZN6Logger7LoadingEv+0x1d0>
 80229ba:	2301      	movs	r3, #1
 80229bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if(cross > pre_cross) run_cross = true;
 80229c0:	4b4a      	ldr	r3, [pc, #296]	; (8022aec <_ZN6Logger7LoadingEv+0x2fc>)
 80229c2:	781b      	ldrb	r3, [r3, #0]
 80229c4:	7bba      	ldrb	r2, [r7, #14]
 80229c6:	429a      	cmp	r2, r3
 80229c8:	d902      	bls.n	80229d0 <_ZN6Logger7LoadingEv+0x1e0>
 80229ca:	2301      	movs	r3, #1
 80229cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    pre_corner = corner;
 80229d0:	4a44      	ldr	r2, [pc, #272]	; (8022ae4 <_ZN6Logger7LoadingEv+0x2f4>)
 80229d2:	7bfb      	ldrb	r3, [r7, #15]
 80229d4:	7013      	strb	r3, [r2, #0]
    pre_cross = cross;
 80229d6:	4a45      	ldr	r2, [pc, #276]	; (8022aec <_ZN6Logger7LoadingEv+0x2fc>)
 80229d8:	7bbb      	ldrb	r3, [r7, #14]
 80229da:	7013      	strb	r3, [r2, #0]

    /* Position correction at corner marker */
    static uint16_t log_corner_address, run_corner_address;
    static uint8_t log_corner_wait = 0, run_corner_wait = 0;
    if(log_corner == true){
 80229dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80229e0:	2b00      	cmp	r3, #0
 80229e2:	d01f      	beq.n	8022a24 <_ZN6Logger7LoadingEv+0x234>
        if(run_corner_pass == true){
 80229e4:	7c7b      	ldrb	r3, [r7, #17]
 80229e6:	2b00      	cmp	r3, #0
 80229e8:	d011      	beq.n	8022a0e <_ZN6Logger7LoadingEv+0x21e>
            now_address += now_address - run_corner_address;
 80229ea:	4b3c      	ldr	r3, [pc, #240]	; (8022adc <_ZN6Logger7LoadingEv+0x2ec>)
 80229ec:	881a      	ldrh	r2, [r3, #0]
 80229ee:	4b42      	ldr	r3, [pc, #264]	; (8022af8 <_ZN6Logger7LoadingEv+0x308>)
 80229f0:	881b      	ldrh	r3, [r3, #0]
 80229f2:	1ad3      	subs	r3, r2, r3
 80229f4:	b29a      	uxth	r2, r3
 80229f6:	4b39      	ldr	r3, [pc, #228]	; (8022adc <_ZN6Logger7LoadingEv+0x2ec>)
 80229f8:	881b      	ldrh	r3, [r3, #0]
 80229fa:	4413      	add	r3, r2
 80229fc:	b29a      	uxth	r2, r3
 80229fe:	4b37      	ldr	r3, [pc, #220]	; (8022adc <_ZN6Logger7LoadingEv+0x2ec>)
 8022a00:	801a      	strh	r2, [r3, #0]
            run_corner_wait = 0;
 8022a02:	4b3e      	ldr	r3, [pc, #248]	; (8022afc <_ZN6Logger7LoadingEv+0x30c>)
 8022a04:	2200      	movs	r2, #0
 8022a06:	701a      	strb	r2, [r3, #0]
            run_corner_pass = false;
 8022a08:	2300      	movs	r3, #0
 8022a0a:	747b      	strb	r3, [r7, #17]
 8022a0c:	e017      	b.n	8022a3e <_ZN6Logger7LoadingEv+0x24e>
        }else{
            log_corner_address = now_address;
 8022a0e:	4b33      	ldr	r3, [pc, #204]	; (8022adc <_ZN6Logger7LoadingEv+0x2ec>)
 8022a10:	881a      	ldrh	r2, [r3, #0]
 8022a12:	4b3b      	ldr	r3, [pc, #236]	; (8022b00 <_ZN6Logger7LoadingEv+0x310>)
 8022a14:	801a      	strh	r2, [r3, #0]
            log_corner_pass = true;
 8022a16:	2301      	movs	r3, #1
 8022a18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            log_corner_wait = CORRECTION_WAIT_COUNT;
 8022a1c:	4b39      	ldr	r3, [pc, #228]	; (8022b04 <_ZN6Logger7LoadingEv+0x314>)
 8022a1e:	2203      	movs	r2, #3
 8022a20:	701a      	strb	r2, [r3, #0]
 8022a22:	e00c      	b.n	8022a3e <_ZN6Logger7LoadingEv+0x24e>
        }
    }else{
        if(run_corner_wait > 0) run_corner_wait--;
 8022a24:	4b35      	ldr	r3, [pc, #212]	; (8022afc <_ZN6Logger7LoadingEv+0x30c>)
 8022a26:	781b      	ldrb	r3, [r3, #0]
 8022a28:	2b00      	cmp	r3, #0
 8022a2a:	d006      	beq.n	8022a3a <_ZN6Logger7LoadingEv+0x24a>
 8022a2c:	4b33      	ldr	r3, [pc, #204]	; (8022afc <_ZN6Logger7LoadingEv+0x30c>)
 8022a2e:	781b      	ldrb	r3, [r3, #0]
 8022a30:	3b01      	subs	r3, #1
 8022a32:	b2da      	uxtb	r2, r3
 8022a34:	4b31      	ldr	r3, [pc, #196]	; (8022afc <_ZN6Logger7LoadingEv+0x30c>)
 8022a36:	701a      	strb	r2, [r3, #0]
 8022a38:	e001      	b.n	8022a3e <_ZN6Logger7LoadingEv+0x24e>
        else run_corner_pass = false;
 8022a3a:	2300      	movs	r3, #0
 8022a3c:	747b      	strb	r3, [r7, #17]
    }
    if(run_corner == true){
 8022a3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8022a42:	2b00      	cmp	r3, #0
 8022a44:	d018      	beq.n	8022a78 <_ZN6Logger7LoadingEv+0x288>
        if(log_corner_pass == true){
 8022a46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8022a4a:	2b00      	cmp	r3, #0
 8022a4c:	d00a      	beq.n	8022a64 <_ZN6Logger7LoadingEv+0x274>
            now_address = log_corner_address;
 8022a4e:	4b2c      	ldr	r3, [pc, #176]	; (8022b00 <_ZN6Logger7LoadingEv+0x310>)
 8022a50:	881a      	ldrh	r2, [r3, #0]
 8022a52:	4b22      	ldr	r3, [pc, #136]	; (8022adc <_ZN6Logger7LoadingEv+0x2ec>)
 8022a54:	801a      	strh	r2, [r3, #0]
            log_corner_wait = 0;
 8022a56:	4b2b      	ldr	r3, [pc, #172]	; (8022b04 <_ZN6Logger7LoadingEv+0x314>)
 8022a58:	2200      	movs	r2, #0
 8022a5a:	701a      	strb	r2, [r3, #0]
            log_corner_pass = false;
 8022a5c:	2300      	movs	r3, #0
 8022a5e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8022a62:	e017      	b.n	8022a94 <_ZN6Logger7LoadingEv+0x2a4>
        }else{
            run_corner_address = now_address;
 8022a64:	4b1d      	ldr	r3, [pc, #116]	; (8022adc <_ZN6Logger7LoadingEv+0x2ec>)
 8022a66:	881a      	ldrh	r2, [r3, #0]
 8022a68:	4b23      	ldr	r3, [pc, #140]	; (8022af8 <_ZN6Logger7LoadingEv+0x308>)
 8022a6a:	801a      	strh	r2, [r3, #0]
            run_corner_pass = true;
 8022a6c:	2301      	movs	r3, #1
 8022a6e:	747b      	strb	r3, [r7, #17]
            run_corner_wait = CORRECTION_WAIT_COUNT;
 8022a70:	4b22      	ldr	r3, [pc, #136]	; (8022afc <_ZN6Logger7LoadingEv+0x30c>)
 8022a72:	2203      	movs	r2, #3
 8022a74:	701a      	strb	r2, [r3, #0]
 8022a76:	e00d      	b.n	8022a94 <_ZN6Logger7LoadingEv+0x2a4>
        }
    }else{
        if(log_corner_wait > 0) log_corner_wait--;
 8022a78:	4b22      	ldr	r3, [pc, #136]	; (8022b04 <_ZN6Logger7LoadingEv+0x314>)
 8022a7a:	781b      	ldrb	r3, [r3, #0]
 8022a7c:	2b00      	cmp	r3, #0
 8022a7e:	d006      	beq.n	8022a8e <_ZN6Logger7LoadingEv+0x29e>
 8022a80:	4b20      	ldr	r3, [pc, #128]	; (8022b04 <_ZN6Logger7LoadingEv+0x314>)
 8022a82:	781b      	ldrb	r3, [r3, #0]
 8022a84:	3b01      	subs	r3, #1
 8022a86:	b2da      	uxtb	r2, r3
 8022a88:	4b1e      	ldr	r3, [pc, #120]	; (8022b04 <_ZN6Logger7LoadingEv+0x314>)
 8022a8a:	701a      	strb	r2, [r3, #0]
 8022a8c:	e002      	b.n	8022a94 <_ZN6Logger7LoadingEv+0x2a4>
        else log_corner_pass = false;
 8022a8e:	2300      	movs	r3, #0
 8022a90:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    /* Position correction at cross line */
    static uint16_t log_cross_address, run_cross_address;
    static uint8_t log_cross_wait = 0, run_cross_wait = 0;
    if(log_cross == true){
 8022a94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8022a98:	2b00      	cmp	r3, #0
 8022a9a:	d03d      	beq.n	8022b18 <_ZN6Logger7LoadingEv+0x328>
        if(run_cross_pass == true){
 8022a9c:	7c3b      	ldrb	r3, [r7, #16]
 8022a9e:	2b00      	cmp	r3, #0
 8022aa0:	d011      	beq.n	8022ac6 <_ZN6Logger7LoadingEv+0x2d6>
            now_address += now_address - run_cross_address;
 8022aa2:	4b0e      	ldr	r3, [pc, #56]	; (8022adc <_ZN6Logger7LoadingEv+0x2ec>)
 8022aa4:	881a      	ldrh	r2, [r3, #0]
 8022aa6:	4b18      	ldr	r3, [pc, #96]	; (8022b08 <_ZN6Logger7LoadingEv+0x318>)
 8022aa8:	881b      	ldrh	r3, [r3, #0]
 8022aaa:	1ad3      	subs	r3, r2, r3
 8022aac:	b29a      	uxth	r2, r3
 8022aae:	4b0b      	ldr	r3, [pc, #44]	; (8022adc <_ZN6Logger7LoadingEv+0x2ec>)
 8022ab0:	881b      	ldrh	r3, [r3, #0]
 8022ab2:	4413      	add	r3, r2
 8022ab4:	b29a      	uxth	r2, r3
 8022ab6:	4b09      	ldr	r3, [pc, #36]	; (8022adc <_ZN6Logger7LoadingEv+0x2ec>)
 8022ab8:	801a      	strh	r2, [r3, #0]
            run_cross_wait = 0;
 8022aba:	4b14      	ldr	r3, [pc, #80]	; (8022b0c <_ZN6Logger7LoadingEv+0x31c>)
 8022abc:	2200      	movs	r2, #0
 8022abe:	701a      	strb	r2, [r3, #0]
            run_cross_pass = false;
 8022ac0:	2300      	movs	r3, #0
 8022ac2:	743b      	strb	r3, [r7, #16]
 8022ac4:	e035      	b.n	8022b32 <_ZN6Logger7LoadingEv+0x342>
        }else{
            log_cross_address = now_address;
 8022ac6:	4b05      	ldr	r3, [pc, #20]	; (8022adc <_ZN6Logger7LoadingEv+0x2ec>)
 8022ac8:	881a      	ldrh	r2, [r3, #0]
 8022aca:	4b11      	ldr	r3, [pc, #68]	; (8022b10 <_ZN6Logger7LoadingEv+0x320>)
 8022acc:	801a      	strh	r2, [r3, #0]
            log_cross_pass = true;
 8022ace:	2301      	movs	r3, #1
 8022ad0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            log_cross_wait = CORRECTION_WAIT_COUNT;
 8022ad4:	4b0f      	ldr	r3, [pc, #60]	; (8022b14 <_ZN6Logger7LoadingEv+0x324>)
 8022ad6:	2203      	movs	r2, #3
 8022ad8:	701a      	strb	r2, [r3, #0]
 8022ada:	e02a      	b.n	8022b32 <_ZN6Logger7LoadingEv+0x342>
 8022adc:	20000098 	.word	0x20000098
 8022ae0:	2000009c 	.word	0x2000009c
 8022ae4:	2000009a 	.word	0x2000009a
 8022ae8:	200000a4 	.word	0x200000a4
 8022aec:	200000a0 	.word	0x200000a0
 8022af0:	43ca0000 	.word	0x43ca0000
 8022af4:	200000a8 	.word	0x200000a8
 8022af8:	200000ac 	.word	0x200000ac
 8022afc:	200000af 	.word	0x200000af
 8022b00:	200000aa 	.word	0x200000aa
 8022b04:	200000ae 	.word	0x200000ae
 8022b08:	200000b2 	.word	0x200000b2
 8022b0c:	200000b5 	.word	0x200000b5
 8022b10:	200000b0 	.word	0x200000b0
 8022b14:	200000b4 	.word	0x200000b4
        }
    }else{
        if(run_cross_wait > 0) run_cross_wait--;
 8022b18:	4b8e      	ldr	r3, [pc, #568]	; (8022d54 <_ZN6Logger7LoadingEv+0x564>)
 8022b1a:	781b      	ldrb	r3, [r3, #0]
 8022b1c:	2b00      	cmp	r3, #0
 8022b1e:	d006      	beq.n	8022b2e <_ZN6Logger7LoadingEv+0x33e>
 8022b20:	4b8c      	ldr	r3, [pc, #560]	; (8022d54 <_ZN6Logger7LoadingEv+0x564>)
 8022b22:	781b      	ldrb	r3, [r3, #0]
 8022b24:	3b01      	subs	r3, #1
 8022b26:	b2da      	uxtb	r2, r3
 8022b28:	4b8a      	ldr	r3, [pc, #552]	; (8022d54 <_ZN6Logger7LoadingEv+0x564>)
 8022b2a:	701a      	strb	r2, [r3, #0]
 8022b2c:	e001      	b.n	8022b32 <_ZN6Logger7LoadingEv+0x342>
        else run_cross_pass = false;
 8022b2e:	2300      	movs	r3, #0
 8022b30:	743b      	strb	r3, [r7, #16]
    }
    if(run_cross == true){
 8022b32:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8022b36:	2b00      	cmp	r3, #0
 8022b38:	d018      	beq.n	8022b6c <_ZN6Logger7LoadingEv+0x37c>
        if(log_cross_pass == true){
 8022b3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8022b3e:	2b00      	cmp	r3, #0
 8022b40:	d00a      	beq.n	8022b58 <_ZN6Logger7LoadingEv+0x368>
            now_address = log_cross_address;
 8022b42:	4b85      	ldr	r3, [pc, #532]	; (8022d58 <_ZN6Logger7LoadingEv+0x568>)
 8022b44:	881a      	ldrh	r2, [r3, #0]
 8022b46:	4b85      	ldr	r3, [pc, #532]	; (8022d5c <_ZN6Logger7LoadingEv+0x56c>)
 8022b48:	801a      	strh	r2, [r3, #0]
            log_cross_wait = 0;
 8022b4a:	4b85      	ldr	r3, [pc, #532]	; (8022d60 <_ZN6Logger7LoadingEv+0x570>)
 8022b4c:	2200      	movs	r2, #0
 8022b4e:	701a      	strb	r2, [r3, #0]
            log_cross_pass = false;
 8022b50:	2300      	movs	r3, #0
 8022b52:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8022b56:	e017      	b.n	8022b88 <_ZN6Logger7LoadingEv+0x398>
        }else{
            run_cross_address = now_address;
 8022b58:	4b80      	ldr	r3, [pc, #512]	; (8022d5c <_ZN6Logger7LoadingEv+0x56c>)
 8022b5a:	881a      	ldrh	r2, [r3, #0]
 8022b5c:	4b81      	ldr	r3, [pc, #516]	; (8022d64 <_ZN6Logger7LoadingEv+0x574>)
 8022b5e:	801a      	strh	r2, [r3, #0]
            run_cross_pass = true;
 8022b60:	2301      	movs	r3, #1
 8022b62:	743b      	strb	r3, [r7, #16]
            run_cross_wait = CORRECTION_WAIT_COUNT;
 8022b64:	4b7b      	ldr	r3, [pc, #492]	; (8022d54 <_ZN6Logger7LoadingEv+0x564>)
 8022b66:	2203      	movs	r2, #3
 8022b68:	701a      	strb	r2, [r3, #0]
 8022b6a:	e00d      	b.n	8022b88 <_ZN6Logger7LoadingEv+0x398>
        }
    }else{
        if(log_cross_wait > 0) log_cross_wait--;
 8022b6c:	4b7c      	ldr	r3, [pc, #496]	; (8022d60 <_ZN6Logger7LoadingEv+0x570>)
 8022b6e:	781b      	ldrb	r3, [r3, #0]
 8022b70:	2b00      	cmp	r3, #0
 8022b72:	d006      	beq.n	8022b82 <_ZN6Logger7LoadingEv+0x392>
 8022b74:	4b7a      	ldr	r3, [pc, #488]	; (8022d60 <_ZN6Logger7LoadingEv+0x570>)
 8022b76:	781b      	ldrb	r3, [r3, #0]
 8022b78:	3b01      	subs	r3, #1
 8022b7a:	b2da      	uxtb	r2, r3
 8022b7c:	4b78      	ldr	r3, [pc, #480]	; (8022d60 <_ZN6Logger7LoadingEv+0x570>)
 8022b7e:	701a      	strb	r2, [r3, #0]
 8022b80:	e002      	b.n	8022b88 <_ZN6Logger7LoadingEv+0x398>
        else log_cross_pass = false;
 8022b82:	2300      	movs	r3, #0
 8022b84:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    /* Accel straight */
    uint8_t accel_step = *(reinterpret_cast<uint8_t*>(now_address + HEAD_ADDRESS_BLOCK_D));
 8022b88:	4b74      	ldr	r3, [pc, #464]	; (8022d5c <_ZN6Logger7LoadingEv+0x56c>)
 8022b8a:	881b      	ldrh	r3, [r3, #0]
 8022b8c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022b90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022b94:	781b      	ldrb	r3, [r3, #0]
 8022b96:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(!straight) accel_step = 0x10;
 8022b9a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8022b9e:	f083 0301 	eor.w	r3, r3, #1
 8022ba2:	b2db      	uxtb	r3, r3
 8022ba4:	2b00      	cmp	r3, #0
 8022ba6:	d002      	beq.n	8022bae <_ZN6Logger7LoadingEv+0x3be>
 8022ba8:	2310      	movs	r3, #16
 8022baa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    float target = MIN_VELOCITY;
 8022bae:	4b6e      	ldr	r3, [pc, #440]	; (8022d68 <_ZN6Logger7LoadingEv+0x578>)
 8022bb0:	627b      	str	r3, [r7, #36]	; 0x24
    static float pre_target = MIN_VELOCITY;
    switch(accel_step){
 8022bb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8022bb6:	3b01      	subs	r3, #1
 8022bb8:	2b4f      	cmp	r3, #79	; 0x4f
 8022bba:	f200 80b5 	bhi.w	8022d28 <_ZN6Logger7LoadingEv+0x538>
 8022bbe:	a201      	add	r2, pc, #4	; (adr r2, 8022bc4 <_ZN6Logger7LoadingEv+0x3d4>)
 8022bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022bc4:	08022d0b 	.word	0x08022d0b
 8022bc8:	08022d11 	.word	0x08022d11
 8022bcc:	08022d17 	.word	0x08022d17
 8022bd0:	08022d1d 	.word	0x08022d1d
 8022bd4:	08022d23 	.word	0x08022d23
 8022bd8:	08022d29 	.word	0x08022d29
 8022bdc:	08022d29 	.word	0x08022d29
 8022be0:	08022d29 	.word	0x08022d29
 8022be4:	08022d29 	.word	0x08022d29
 8022be8:	08022d29 	.word	0x08022d29
 8022bec:	08022d29 	.word	0x08022d29
 8022bf0:	08022d29 	.word	0x08022d29
 8022bf4:	08022d29 	.word	0x08022d29
 8022bf8:	08022d29 	.word	0x08022d29
 8022bfc:	08022d29 	.word	0x08022d29
 8022c00:	08022d05 	.word	0x08022d05
 8022c04:	08022d29 	.word	0x08022d29
 8022c08:	08022d29 	.word	0x08022d29
 8022c0c:	08022d29 	.word	0x08022d29
 8022c10:	08022d29 	.word	0x08022d29
 8022c14:	08022d29 	.word	0x08022d29
 8022c18:	08022d29 	.word	0x08022d29
 8022c1c:	08022d29 	.word	0x08022d29
 8022c20:	08022d29 	.word	0x08022d29
 8022c24:	08022d29 	.word	0x08022d29
 8022c28:	08022d29 	.word	0x08022d29
 8022c2c:	08022d29 	.word	0x08022d29
 8022c30:	08022d29 	.word	0x08022d29
 8022c34:	08022d29 	.word	0x08022d29
 8022c38:	08022d29 	.word	0x08022d29
 8022c3c:	08022d29 	.word	0x08022d29
 8022c40:	08022d0b 	.word	0x08022d0b
 8022c44:	08022d29 	.word	0x08022d29
 8022c48:	08022d29 	.word	0x08022d29
 8022c4c:	08022d29 	.word	0x08022d29
 8022c50:	08022d29 	.word	0x08022d29
 8022c54:	08022d29 	.word	0x08022d29
 8022c58:	08022d29 	.word	0x08022d29
 8022c5c:	08022d29 	.word	0x08022d29
 8022c60:	08022d29 	.word	0x08022d29
 8022c64:	08022d29 	.word	0x08022d29
 8022c68:	08022d29 	.word	0x08022d29
 8022c6c:	08022d29 	.word	0x08022d29
 8022c70:	08022d29 	.word	0x08022d29
 8022c74:	08022d29 	.word	0x08022d29
 8022c78:	08022d29 	.word	0x08022d29
 8022c7c:	08022d29 	.word	0x08022d29
 8022c80:	08022d11 	.word	0x08022d11
 8022c84:	08022d29 	.word	0x08022d29
 8022c88:	08022d29 	.word	0x08022d29
 8022c8c:	08022d29 	.word	0x08022d29
 8022c90:	08022d29 	.word	0x08022d29
 8022c94:	08022d29 	.word	0x08022d29
 8022c98:	08022d29 	.word	0x08022d29
 8022c9c:	08022d29 	.word	0x08022d29
 8022ca0:	08022d29 	.word	0x08022d29
 8022ca4:	08022d29 	.word	0x08022d29
 8022ca8:	08022d29 	.word	0x08022d29
 8022cac:	08022d29 	.word	0x08022d29
 8022cb0:	08022d29 	.word	0x08022d29
 8022cb4:	08022d29 	.word	0x08022d29
 8022cb8:	08022d29 	.word	0x08022d29
 8022cbc:	08022d29 	.word	0x08022d29
 8022cc0:	08022d17 	.word	0x08022d17
 8022cc4:	08022d29 	.word	0x08022d29
 8022cc8:	08022d29 	.word	0x08022d29
 8022ccc:	08022d29 	.word	0x08022d29
 8022cd0:	08022d29 	.word	0x08022d29
 8022cd4:	08022d29 	.word	0x08022d29
 8022cd8:	08022d29 	.word	0x08022d29
 8022cdc:	08022d29 	.word	0x08022d29
 8022ce0:	08022d29 	.word	0x08022d29
 8022ce4:	08022d29 	.word	0x08022d29
 8022ce8:	08022d29 	.word	0x08022d29
 8022cec:	08022d29 	.word	0x08022d29
 8022cf0:	08022d29 	.word	0x08022d29
 8022cf4:	08022d29 	.word	0x08022d29
 8022cf8:	08022d29 	.word	0x08022d29
 8022cfc:	08022d29 	.word	0x08022d29
 8022d00:	08022d1d 	.word	0x08022d1d
        case 0x10: target = MIN_VELOCITY; break;
 8022d04:	4b18      	ldr	r3, [pc, #96]	; (8022d68 <_ZN6Logger7LoadingEv+0x578>)
 8022d06:	627b      	str	r3, [r7, #36]	; 0x24
 8022d08:	e012      	b.n	8022d30 <_ZN6Logger7LoadingEv+0x540>
        case 0x01:
        case 0x20: target = MIN_VELOCITY + (ACCEL_VELOCITY * 1); break;
 8022d0a:	4b18      	ldr	r3, [pc, #96]	; (8022d6c <_ZN6Logger7LoadingEv+0x57c>)
 8022d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8022d0e:	e00f      	b.n	8022d30 <_ZN6Logger7LoadingEv+0x540>
        case 0x02:
        case 0x30: target = MIN_VELOCITY + (ACCEL_VELOCITY * 2); break;
 8022d10:	4b17      	ldr	r3, [pc, #92]	; (8022d70 <_ZN6Logger7LoadingEv+0x580>)
 8022d12:	627b      	str	r3, [r7, #36]	; 0x24
 8022d14:	e00c      	b.n	8022d30 <_ZN6Logger7LoadingEv+0x540>
        case 0x03:
        case 0x40: target = MIN_VELOCITY + (ACCEL_VELOCITY * 3); break;
 8022d16:	4b17      	ldr	r3, [pc, #92]	; (8022d74 <_ZN6Logger7LoadingEv+0x584>)
 8022d18:	627b      	str	r3, [r7, #36]	; 0x24
 8022d1a:	e009      	b.n	8022d30 <_ZN6Logger7LoadingEv+0x540>
        case 0x04:
        case 0x50: target = MIN_VELOCITY + (ACCEL_VELOCITY * 4); break;
 8022d1c:	4b16      	ldr	r3, [pc, #88]	; (8022d78 <_ZN6Logger7LoadingEv+0x588>)
 8022d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8022d20:	e006      	b.n	8022d30 <_ZN6Logger7LoadingEv+0x540>
        case 0x05: target = MIN_VELOCITY + (ACCEL_VELOCITY * 5); break;
 8022d22:	4b16      	ldr	r3, [pc, #88]	; (8022d7c <_ZN6Logger7LoadingEv+0x58c>)
 8022d24:	627b      	str	r3, [r7, #36]	; 0x24
 8022d26:	e003      	b.n	8022d30 <_ZN6Logger7LoadingEv+0x540>
        default: target = pre_target; break;
 8022d28:	4b15      	ldr	r3, [pc, #84]	; (8022d80 <_ZN6Logger7LoadingEv+0x590>)
 8022d2a:	681b      	ldr	r3, [r3, #0]
 8022d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8022d2e:	bf00      	nop
    }
    pre_target = target;
 8022d30:	4a13      	ldr	r2, [pc, #76]	; (8022d80 <_ZN6Logger7LoadingEv+0x590>)
 8022d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022d34:	6013      	str	r3, [r2, #0]
    target_velocity_ = target;
 8022d36:	687b      	ldr	r3, [r7, #4]
 8022d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022d3a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

    now_address++;
 8022d3e:	4b07      	ldr	r3, [pc, #28]	; (8022d5c <_ZN6Logger7LoadingEv+0x56c>)
 8022d40:	881b      	ldrh	r3, [r3, #0]
 8022d42:	3301      	adds	r3, #1
 8022d44:	b29a      	uxth	r2, r3
 8022d46:	4b05      	ldr	r3, [pc, #20]	; (8022d5c <_ZN6Logger7LoadingEv+0x56c>)
 8022d48:	801a      	strh	r2, [r3, #0]
 8022d4a:	e000      	b.n	8022d4e <_ZN6Logger7LoadingEv+0x55e>
    if(distance < LOGGING_CONST_DISTANCE) return;
 8022d4c:	bf00      	nop
}
 8022d4e:	3730      	adds	r7, #48	; 0x30
 8022d50:	46bd      	mov	sp, r7
 8022d52:	bd80      	pop	{r7, pc}
 8022d54:	200000b5 	.word	0x200000b5
 8022d58:	200000b0 	.word	0x200000b0
 8022d5c:	20000098 	.word	0x20000098
 8022d60:	200000b4 	.word	0x200000b4
 8022d64:	200000b2 	.word	0x200000b2
 8022d68:	3fa66666 	.word	0x3fa66666
 8022d6c:	3fe66666 	.word	0x3fe66666
 8022d70:	40133333 	.word	0x40133333
 8022d74:	40333333 	.word	0x40333333
 8022d78:	40533333 	.word	0x40533333
 8022d7c:	40733333 	.word	0x40733333
 8022d80:	2000000c 	.word	0x2000000c

08022d84 <_ZN6Logger17GetTargetVelocityEv>:

float Logger::GetTargetVelocity()
{
 8022d84:	b480      	push	{r7}
 8022d86:	b083      	sub	sp, #12
 8022d88:	af00      	add	r7, sp, #0
 8022d8a:	6078      	str	r0, [r7, #4]
    return target_velocity_;
 8022d8c:	687b      	ldr	r3, [r7, #4]
 8022d8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8022d92:	ee07 3a90 	vmov	s15, r3
 8022d96:	eeb0 0a67 	vmov.f32	s0, s15
 8022d9a:	370c      	adds	r7, #12
 8022d9c:	46bd      	mov	sp, r7
 8022d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022da2:	4770      	bx	lr

08022da4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8022da4:	b580      	push	{r7, lr}
 8022da6:	b082      	sub	sp, #8
 8022da8:	af00      	add	r7, sp, #0
 8022daa:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8022dac:	687b      	ldr	r3, [r7, #4]
 8022dae:	681b      	ldr	r3, [r3, #0]
 8022db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022db4:	d101      	bne.n	8022dba <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 8022db6:	f002 fb9f 	bl	80254f8 <InterruptTim2>
  }
  if(htim->Instance == TIM5)
 8022dba:	687b      	ldr	r3, [r7, #4]
 8022dbc:	681b      	ldr	r3, [r3, #0]
 8022dbe:	4a0b      	ldr	r2, [pc, #44]	; (8022dec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8022dc0:	4293      	cmp	r3, r2
 8022dc2:	d101      	bne.n	8022dc8 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim5();
 8022dc4:	f002 fb2a 	bl	802541c <InterruptTim5>
  }
  if(htim->Instance == TIM6)
 8022dc8:	687b      	ldr	r3, [r7, #4]
 8022dca:	681b      	ldr	r3, [r3, #0]
 8022dcc:	4a08      	ldr	r2, [pc, #32]	; (8022df0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8022dce:	4293      	cmp	r3, r2
 8022dd0:	d101      	bne.n	8022dd6 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim6();
 8022dd2:	f002 f88d 	bl	8024ef0 <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 8022dd6:	687b      	ldr	r3, [r7, #4]
 8022dd8:	681b      	ldr	r3, [r3, #0]
 8022dda:	4a06      	ldr	r2, [pc, #24]	; (8022df4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8022ddc:	4293      	cmp	r3, r2
 8022dde:	d101      	bne.n	8022de4 <HAL_TIM_PeriodElapsedCallback+0x40>
  {
    InterruptTim7();
 8022de0:	f002 f876 	bl	8024ed0 <InterruptTim7>
  }
}
 8022de4:	bf00      	nop
 8022de6:	3708      	adds	r7, #8
 8022de8:	46bd      	mov	sp, r7
 8022dea:	bd80      	pop	{r7, pc}
 8022dec:	40000c00 	.word	0x40000c00
 8022df0:	40001000 	.word	0x40001000
 8022df4:	40001400 	.word	0x40001400

08022df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8022df8:	b580      	push	{r7, lr}
 8022dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  Init();
 8022dfc:	f002 f840 	bl	8024e80 <Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8022e00:	f003 f9fc 	bl	80261fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8022e04:	f000 f822 	bl	8022e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8022e08:	f000 fd68 	bl	80238dc <MX_GPIO_Init>
  MX_DMA_Init();
 8022e0c:	f000 fd46 	bl	802389c <MX_DMA_Init>
  MX_ADC1_Init();
 8022e10:	f000 f886 	bl	8022f20 <MX_ADC1_Init>
  MX_I2C2_Init();
 8022e14:	f000 f98c 	bl	8023130 <MX_I2C2_Init>
  MX_SPI3_Init();
 8022e18:	f000 f9b8 	bl	802318c <MX_SPI3_Init>
  MX_TIM1_Init();
 8022e1c:	f000 f9ec 	bl	80231f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8022e20:	f000 fac8 	bl	80233b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8022e24:	f000 fb40 	bl	80234a8 <MX_TIM4_Init>
  MX_TIM6_Init();
 8022e28:	f000 fbe0 	bl	80235ec <MX_TIM6_Init>
  MX_TIM7_Init();
 8022e2c:	f000 fc14 	bl	8023658 <MX_TIM7_Init>
  MX_TIM8_Init();
 8022e30:	f000 fc48 	bl	80236c4 <MX_TIM8_Init>
  MX_TIM11_Init();
 8022e34:	f000 fc9e 	bl	8023774 <MX_TIM11_Init>
  MX_TIM12_Init();
 8022e38:	f000 fcea 	bl	8023810 <MX_TIM12_Init>
  MX_TIM2_Init();
 8022e3c:	f000 fa6c 	bl	8023318 <MX_TIM2_Init>
  MX_TIM5_Init();
 8022e40:	f000 fb86 	bl	8023550 <MX_TIM5_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Loop();
 8022e44:	f002 fbb6 	bl	80255b4 <Loop>
 8022e48:	e7fc      	b.n	8022e44 <main+0x4c>
	...

08022e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8022e4c:	b580      	push	{r7, lr}
 8022e4e:	b094      	sub	sp, #80	; 0x50
 8022e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8022e52:	f107 0320 	add.w	r3, r7, #32
 8022e56:	2230      	movs	r2, #48	; 0x30
 8022e58:	2100      	movs	r1, #0
 8022e5a:	4618      	mov	r0, r3
 8022e5c:	f007 fa8d 	bl	802a37a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8022e60:	f107 030c 	add.w	r3, r7, #12
 8022e64:	2200      	movs	r2, #0
 8022e66:	601a      	str	r2, [r3, #0]
 8022e68:	605a      	str	r2, [r3, #4]
 8022e6a:	609a      	str	r2, [r3, #8]
 8022e6c:	60da      	str	r2, [r3, #12]
 8022e6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8022e70:	2300      	movs	r3, #0
 8022e72:	60bb      	str	r3, [r7, #8]
 8022e74:	4b28      	ldr	r3, [pc, #160]	; (8022f18 <SystemClock_Config+0xcc>)
 8022e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022e78:	4a27      	ldr	r2, [pc, #156]	; (8022f18 <SystemClock_Config+0xcc>)
 8022e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8022e80:	4b25      	ldr	r3, [pc, #148]	; (8022f18 <SystemClock_Config+0xcc>)
 8022e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022e88:	60bb      	str	r3, [r7, #8]
 8022e8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8022e8c:	2300      	movs	r3, #0
 8022e8e:	607b      	str	r3, [r7, #4]
 8022e90:	4b22      	ldr	r3, [pc, #136]	; (8022f1c <SystemClock_Config+0xd0>)
 8022e92:	681b      	ldr	r3, [r3, #0]
 8022e94:	4a21      	ldr	r2, [pc, #132]	; (8022f1c <SystemClock_Config+0xd0>)
 8022e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022e9a:	6013      	str	r3, [r2, #0]
 8022e9c:	4b1f      	ldr	r3, [pc, #124]	; (8022f1c <SystemClock_Config+0xd0>)
 8022e9e:	681b      	ldr	r3, [r3, #0]
 8022ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022ea4:	607b      	str	r3, [r7, #4]
 8022ea6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8022ea8:	2301      	movs	r3, #1
 8022eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8022eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8022eb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8022eb2:	2302      	movs	r3, #2
 8022eb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8022eb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8022eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8022ebc:	2306      	movs	r3, #6
 8022ebe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8022ec0:	23a8      	movs	r3, #168	; 0xa8
 8022ec2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8022ec4:	2302      	movs	r3, #2
 8022ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8022ec8:	2304      	movs	r3, #4
 8022eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8022ecc:	f107 0320 	add.w	r3, r7, #32
 8022ed0:	4618      	mov	r0, r3
 8022ed2:	f005 f875 	bl	8027fc0 <HAL_RCC_OscConfig>
 8022ed6:	4603      	mov	r3, r0
 8022ed8:	2b00      	cmp	r3, #0
 8022eda:	d001      	beq.n	8022ee0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8022edc:	f000 fdce 	bl	8023a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8022ee0:	230f      	movs	r3, #15
 8022ee2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8022ee4:	2302      	movs	r3, #2
 8022ee6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8022ee8:	2300      	movs	r3, #0
 8022eea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8022eec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8022ef0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8022ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022ef6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8022ef8:	f107 030c 	add.w	r3, r7, #12
 8022efc:	2105      	movs	r1, #5
 8022efe:	4618      	mov	r0, r3
 8022f00:	f005 face 	bl	80284a0 <HAL_RCC_ClockConfig>
 8022f04:	4603      	mov	r3, r0
 8022f06:	2b00      	cmp	r3, #0
 8022f08:	d001      	beq.n	8022f0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8022f0a:	f000 fdb7 	bl	8023a7c <Error_Handler>
  }
}
 8022f0e:	bf00      	nop
 8022f10:	3750      	adds	r7, #80	; 0x50
 8022f12:	46bd      	mov	sp, r7
 8022f14:	bd80      	pop	{r7, pc}
 8022f16:	bf00      	nop
 8022f18:	40023800 	.word	0x40023800
 8022f1c:	40007000 	.word	0x40007000

08022f20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8022f20:	b580      	push	{r7, lr}
 8022f22:	b084      	sub	sp, #16
 8022f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8022f26:	463b      	mov	r3, r7
 8022f28:	2200      	movs	r2, #0
 8022f2a:	601a      	str	r2, [r3, #0]
 8022f2c:	605a      	str	r2, [r3, #4]
 8022f2e:	609a      	str	r2, [r3, #8]
 8022f30:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8022f32:	4b7c      	ldr	r3, [pc, #496]	; (8023124 <MX_ADC1_Init+0x204>)
 8022f34:	4a7c      	ldr	r2, [pc, #496]	; (8023128 <MX_ADC1_Init+0x208>)
 8022f36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8022f38:	4b7a      	ldr	r3, [pc, #488]	; (8023124 <MX_ADC1_Init+0x204>)
 8022f3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8022f3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8022f40:	4b78      	ldr	r3, [pc, #480]	; (8023124 <MX_ADC1_Init+0x204>)
 8022f42:	2200      	movs	r2, #0
 8022f44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8022f46:	4b77      	ldr	r3, [pc, #476]	; (8023124 <MX_ADC1_Init+0x204>)
 8022f48:	2201      	movs	r2, #1
 8022f4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8022f4c:	4b75      	ldr	r3, [pc, #468]	; (8023124 <MX_ADC1_Init+0x204>)
 8022f4e:	2201      	movs	r2, #1
 8022f50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8022f52:	4b74      	ldr	r3, [pc, #464]	; (8023124 <MX_ADC1_Init+0x204>)
 8022f54:	2200      	movs	r2, #0
 8022f56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8022f5a:	4b72      	ldr	r3, [pc, #456]	; (8023124 <MX_ADC1_Init+0x204>)
 8022f5c:	2200      	movs	r2, #0
 8022f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8022f60:	4b70      	ldr	r3, [pc, #448]	; (8023124 <MX_ADC1_Init+0x204>)
 8022f62:	4a72      	ldr	r2, [pc, #456]	; (802312c <MX_ADC1_Init+0x20c>)
 8022f64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8022f66:	4b6f      	ldr	r3, [pc, #444]	; (8023124 <MX_ADC1_Init+0x204>)
 8022f68:	2200      	movs	r2, #0
 8022f6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8022f6c:	4b6d      	ldr	r3, [pc, #436]	; (8023124 <MX_ADC1_Init+0x204>)
 8022f6e:	220e      	movs	r2, #14
 8022f70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8022f72:	4b6c      	ldr	r3, [pc, #432]	; (8023124 <MX_ADC1_Init+0x204>)
 8022f74:	2201      	movs	r2, #1
 8022f76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8022f7a:	4b6a      	ldr	r3, [pc, #424]	; (8023124 <MX_ADC1_Init+0x204>)
 8022f7c:	2201      	movs	r2, #1
 8022f7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8022f80:	4868      	ldr	r0, [pc, #416]	; (8023124 <MX_ADC1_Init+0x204>)
 8022f82:	f003 f9cf 	bl	8026324 <HAL_ADC_Init>
 8022f86:	4603      	mov	r3, r0
 8022f88:	2b00      	cmp	r3, #0
 8022f8a:	d001      	beq.n	8022f90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8022f8c:	f000 fd76 	bl	8023a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8022f90:	2303      	movs	r3, #3
 8022f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8022f94:	2301      	movs	r3, #1
 8022f96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8022f98:	2301      	movs	r3, #1
 8022f9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8022f9c:	463b      	mov	r3, r7
 8022f9e:	4619      	mov	r1, r3
 8022fa0:	4860      	ldr	r0, [pc, #384]	; (8023124 <MX_ADC1_Init+0x204>)
 8022fa2:	f003 fb13 	bl	80265cc <HAL_ADC_ConfigChannel>
 8022fa6:	4603      	mov	r3, r0
 8022fa8:	2b00      	cmp	r3, #0
 8022faa:	d001      	beq.n	8022fb0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8022fac:	f000 fd66 	bl	8023a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8022fb0:	2304      	movs	r3, #4
 8022fb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8022fb4:	2302      	movs	r3, #2
 8022fb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8022fb8:	463b      	mov	r3, r7
 8022fba:	4619      	mov	r1, r3
 8022fbc:	4859      	ldr	r0, [pc, #356]	; (8023124 <MX_ADC1_Init+0x204>)
 8022fbe:	f003 fb05 	bl	80265cc <HAL_ADC_ConfigChannel>
 8022fc2:	4603      	mov	r3, r0
 8022fc4:	2b00      	cmp	r3, #0
 8022fc6:	d001      	beq.n	8022fcc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8022fc8:	f000 fd58 	bl	8023a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8022fcc:	2305      	movs	r3, #5
 8022fce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8022fd0:	2303      	movs	r3, #3
 8022fd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8022fd4:	463b      	mov	r3, r7
 8022fd6:	4619      	mov	r1, r3
 8022fd8:	4852      	ldr	r0, [pc, #328]	; (8023124 <MX_ADC1_Init+0x204>)
 8022fda:	f003 faf7 	bl	80265cc <HAL_ADC_ConfigChannel>
 8022fde:	4603      	mov	r3, r0
 8022fe0:	2b00      	cmp	r3, #0
 8022fe2:	d001      	beq.n	8022fe8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8022fe4:	f000 fd4a 	bl	8023a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8022fe8:	2306      	movs	r3, #6
 8022fea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8022fec:	2304      	movs	r3, #4
 8022fee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8022ff0:	463b      	mov	r3, r7
 8022ff2:	4619      	mov	r1, r3
 8022ff4:	484b      	ldr	r0, [pc, #300]	; (8023124 <MX_ADC1_Init+0x204>)
 8022ff6:	f003 fae9 	bl	80265cc <HAL_ADC_ConfigChannel>
 8022ffa:	4603      	mov	r3, r0
 8022ffc:	2b00      	cmp	r3, #0
 8022ffe:	d001      	beq.n	8023004 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8023000:	f000 fd3c 	bl	8023a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8023004:	2307      	movs	r3, #7
 8023006:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8023008:	2305      	movs	r3, #5
 802300a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802300c:	463b      	mov	r3, r7
 802300e:	4619      	mov	r1, r3
 8023010:	4844      	ldr	r0, [pc, #272]	; (8023124 <MX_ADC1_Init+0x204>)
 8023012:	f003 fadb 	bl	80265cc <HAL_ADC_ConfigChannel>
 8023016:	4603      	mov	r3, r0
 8023018:	2b00      	cmp	r3, #0
 802301a:	d001      	beq.n	8023020 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 802301c:	f000 fd2e 	bl	8023a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8023020:	230e      	movs	r3, #14
 8023022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8023024:	2306      	movs	r3, #6
 8023026:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023028:	463b      	mov	r3, r7
 802302a:	4619      	mov	r1, r3
 802302c:	483d      	ldr	r0, [pc, #244]	; (8023124 <MX_ADC1_Init+0x204>)
 802302e:	f003 facd 	bl	80265cc <HAL_ADC_ConfigChannel>
 8023032:	4603      	mov	r3, r0
 8023034:	2b00      	cmp	r3, #0
 8023036:	d001      	beq.n	802303c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8023038:	f000 fd20 	bl	8023a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 802303c:	230f      	movs	r3, #15
 802303e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8023040:	2307      	movs	r3, #7
 8023042:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023044:	463b      	mov	r3, r7
 8023046:	4619      	mov	r1, r3
 8023048:	4836      	ldr	r0, [pc, #216]	; (8023124 <MX_ADC1_Init+0x204>)
 802304a:	f003 fabf 	bl	80265cc <HAL_ADC_ConfigChannel>
 802304e:	4603      	mov	r3, r0
 8023050:	2b00      	cmp	r3, #0
 8023052:	d001      	beq.n	8023058 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8023054:	f000 fd12 	bl	8023a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8023058:	230a      	movs	r3, #10
 802305a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 802305c:	2308      	movs	r3, #8
 802305e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023060:	463b      	mov	r3, r7
 8023062:	4619      	mov	r1, r3
 8023064:	482f      	ldr	r0, [pc, #188]	; (8023124 <MX_ADC1_Init+0x204>)
 8023066:	f003 fab1 	bl	80265cc <HAL_ADC_ConfigChannel>
 802306a:	4603      	mov	r3, r0
 802306c:	2b00      	cmp	r3, #0
 802306e:	d001      	beq.n	8023074 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8023070:	f000 fd04 	bl	8023a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8023074:	230b      	movs	r3, #11
 8023076:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8023078:	2309      	movs	r3, #9
 802307a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802307c:	463b      	mov	r3, r7
 802307e:	4619      	mov	r1, r3
 8023080:	4828      	ldr	r0, [pc, #160]	; (8023124 <MX_ADC1_Init+0x204>)
 8023082:	f003 faa3 	bl	80265cc <HAL_ADC_ConfigChannel>
 8023086:	4603      	mov	r3, r0
 8023088:	2b00      	cmp	r3, #0
 802308a:	d001      	beq.n	8023090 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 802308c:	f000 fcf6 	bl	8023a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8023090:	230c      	movs	r3, #12
 8023092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8023094:	230a      	movs	r3, #10
 8023096:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023098:	463b      	mov	r3, r7
 802309a:	4619      	mov	r1, r3
 802309c:	4821      	ldr	r0, [pc, #132]	; (8023124 <MX_ADC1_Init+0x204>)
 802309e:	f003 fa95 	bl	80265cc <HAL_ADC_ConfigChannel>
 80230a2:	4603      	mov	r3, r0
 80230a4:	2b00      	cmp	r3, #0
 80230a6:	d001      	beq.n	80230ac <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80230a8:	f000 fce8 	bl	8023a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80230ac:	230d      	movs	r3, #13
 80230ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80230b0:	230b      	movs	r3, #11
 80230b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80230b4:	463b      	mov	r3, r7
 80230b6:	4619      	mov	r1, r3
 80230b8:	481a      	ldr	r0, [pc, #104]	; (8023124 <MX_ADC1_Init+0x204>)
 80230ba:	f003 fa87 	bl	80265cc <HAL_ADC_ConfigChannel>
 80230be:	4603      	mov	r3, r0
 80230c0:	2b00      	cmp	r3, #0
 80230c2:	d001      	beq.n	80230c8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80230c4:	f000 fcda 	bl	8023a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80230c8:	2302      	movs	r3, #2
 80230ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80230cc:	230c      	movs	r3, #12
 80230ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80230d0:	463b      	mov	r3, r7
 80230d2:	4619      	mov	r1, r3
 80230d4:	4813      	ldr	r0, [pc, #76]	; (8023124 <MX_ADC1_Init+0x204>)
 80230d6:	f003 fa79 	bl	80265cc <HAL_ADC_ConfigChannel>
 80230da:	4603      	mov	r3, r0
 80230dc:	2b00      	cmp	r3, #0
 80230de:	d001      	beq.n	80230e4 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80230e0:	f000 fccc 	bl	8023a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80230e4:	2301      	movs	r3, #1
 80230e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80230e8:	230d      	movs	r3, #13
 80230ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80230ec:	463b      	mov	r3, r7
 80230ee:	4619      	mov	r1, r3
 80230f0:	480c      	ldr	r0, [pc, #48]	; (8023124 <MX_ADC1_Init+0x204>)
 80230f2:	f003 fa6b 	bl	80265cc <HAL_ADC_ConfigChannel>
 80230f6:	4603      	mov	r3, r0
 80230f8:	2b00      	cmp	r3, #0
 80230fa:	d001      	beq.n	8023100 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80230fc:	f000 fcbe 	bl	8023a7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8023100:	2300      	movs	r3, #0
 8023102:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8023104:	230e      	movs	r3, #14
 8023106:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023108:	463b      	mov	r3, r7
 802310a:	4619      	mov	r1, r3
 802310c:	4805      	ldr	r0, [pc, #20]	; (8023124 <MX_ADC1_Init+0x204>)
 802310e:	f003 fa5d 	bl	80265cc <HAL_ADC_ConfigChannel>
 8023112:	4603      	mov	r3, r0
 8023114:	2b00      	cmp	r3, #0
 8023116:	d001      	beq.n	802311c <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8023118:	f000 fcb0 	bl	8023a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 802311c:	bf00      	nop
 802311e:	3710      	adds	r7, #16
 8023120:	46bd      	mov	sp, r7
 8023122:	bd80      	pop	{r7, pc}
 8023124:	2000093c 	.word	0x2000093c
 8023128:	40012000 	.word	0x40012000
 802312c:	0f000001 	.word	0x0f000001

08023130 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8023130:	b580      	push	{r7, lr}
 8023132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8023134:	4b12      	ldr	r3, [pc, #72]	; (8023180 <MX_I2C2_Init+0x50>)
 8023136:	4a13      	ldr	r2, [pc, #76]	; (8023184 <MX_I2C2_Init+0x54>)
 8023138:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 802313a:	4b11      	ldr	r3, [pc, #68]	; (8023180 <MX_I2C2_Init+0x50>)
 802313c:	4a12      	ldr	r2, [pc, #72]	; (8023188 <MX_I2C2_Init+0x58>)
 802313e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8023140:	4b0f      	ldr	r3, [pc, #60]	; (8023180 <MX_I2C2_Init+0x50>)
 8023142:	2200      	movs	r2, #0
 8023144:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8023146:	4b0e      	ldr	r3, [pc, #56]	; (8023180 <MX_I2C2_Init+0x50>)
 8023148:	2200      	movs	r2, #0
 802314a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 802314c:	4b0c      	ldr	r3, [pc, #48]	; (8023180 <MX_I2C2_Init+0x50>)
 802314e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8023152:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8023154:	4b0a      	ldr	r3, [pc, #40]	; (8023180 <MX_I2C2_Init+0x50>)
 8023156:	2200      	movs	r2, #0
 8023158:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 802315a:	4b09      	ldr	r3, [pc, #36]	; (8023180 <MX_I2C2_Init+0x50>)
 802315c:	2200      	movs	r2, #0
 802315e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8023160:	4b07      	ldr	r3, [pc, #28]	; (8023180 <MX_I2C2_Init+0x50>)
 8023162:	2200      	movs	r2, #0
 8023164:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8023166:	4b06      	ldr	r3, [pc, #24]	; (8023180 <MX_I2C2_Init+0x50>)
 8023168:	2200      	movs	r2, #0
 802316a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 802316c:	4804      	ldr	r0, [pc, #16]	; (8023180 <MX_I2C2_Init+0x50>)
 802316e:	f004 fdef 	bl	8027d50 <HAL_I2C_Init>
 8023172:	4603      	mov	r3, r0
 8023174:	2b00      	cmp	r3, #0
 8023176:	d001      	beq.n	802317c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8023178:	f000 fc80 	bl	8023a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 802317c:	bf00      	nop
 802317e:	bd80      	pop	{r7, pc}
 8023180:	20000810 	.word	0x20000810
 8023184:	40005800 	.word	0x40005800
 8023188:	000186a0 	.word	0x000186a0

0802318c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 802318c:	b580      	push	{r7, lr}
 802318e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8023190:	4b17      	ldr	r3, [pc, #92]	; (80231f0 <MX_SPI3_Init+0x64>)
 8023192:	4a18      	ldr	r2, [pc, #96]	; (80231f4 <MX_SPI3_Init+0x68>)
 8023194:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8023196:	4b16      	ldr	r3, [pc, #88]	; (80231f0 <MX_SPI3_Init+0x64>)
 8023198:	f44f 7282 	mov.w	r2, #260	; 0x104
 802319c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 802319e:	4b14      	ldr	r3, [pc, #80]	; (80231f0 <MX_SPI3_Init+0x64>)
 80231a0:	2200      	movs	r2, #0
 80231a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80231a4:	4b12      	ldr	r3, [pc, #72]	; (80231f0 <MX_SPI3_Init+0x64>)
 80231a6:	2200      	movs	r2, #0
 80231a8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80231aa:	4b11      	ldr	r3, [pc, #68]	; (80231f0 <MX_SPI3_Init+0x64>)
 80231ac:	2200      	movs	r2, #0
 80231ae:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80231b0:	4b0f      	ldr	r3, [pc, #60]	; (80231f0 <MX_SPI3_Init+0x64>)
 80231b2:	2200      	movs	r2, #0
 80231b4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80231b6:	4b0e      	ldr	r3, [pc, #56]	; (80231f0 <MX_SPI3_Init+0x64>)
 80231b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80231bc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80231be:	4b0c      	ldr	r3, [pc, #48]	; (80231f0 <MX_SPI3_Init+0x64>)
 80231c0:	2238      	movs	r2, #56	; 0x38
 80231c2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80231c4:	4b0a      	ldr	r3, [pc, #40]	; (80231f0 <MX_SPI3_Init+0x64>)
 80231c6:	2200      	movs	r2, #0
 80231c8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80231ca:	4b09      	ldr	r3, [pc, #36]	; (80231f0 <MX_SPI3_Init+0x64>)
 80231cc:	2200      	movs	r2, #0
 80231ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80231d0:	4b07      	ldr	r3, [pc, #28]	; (80231f0 <MX_SPI3_Init+0x64>)
 80231d2:	2200      	movs	r2, #0
 80231d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80231d6:	4b06      	ldr	r3, [pc, #24]	; (80231f0 <MX_SPI3_Init+0x64>)
 80231d8:	220a      	movs	r2, #10
 80231da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80231dc:	4804      	ldr	r0, [pc, #16]	; (80231f0 <MX_SPI3_Init+0x64>)
 80231de:	f005 fb17 	bl	8028810 <HAL_SPI_Init>
 80231e2:	4603      	mov	r3, r0
 80231e4:	2b00      	cmp	r3, #0
 80231e6:	d001      	beq.n	80231ec <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80231e8:	f000 fc48 	bl	8023a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80231ec:	bf00      	nop
 80231ee:	bd80      	pop	{r7, pc}
 80231f0:	200008e4 	.word	0x200008e4
 80231f4:	40003c00 	.word	0x40003c00

080231f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80231f8:	b580      	push	{r7, lr}
 80231fa:	b092      	sub	sp, #72	; 0x48
 80231fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80231fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8023202:	2200      	movs	r2, #0
 8023204:	601a      	str	r2, [r3, #0]
 8023206:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802320c:	2200      	movs	r2, #0
 802320e:	601a      	str	r2, [r3, #0]
 8023210:	605a      	str	r2, [r3, #4]
 8023212:	609a      	str	r2, [r3, #8]
 8023214:	60da      	str	r2, [r3, #12]
 8023216:	611a      	str	r2, [r3, #16]
 8023218:	615a      	str	r2, [r3, #20]
 802321a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 802321c:	1d3b      	adds	r3, r7, #4
 802321e:	2220      	movs	r2, #32
 8023220:	2100      	movs	r1, #0
 8023222:	4618      	mov	r0, r3
 8023224:	f007 f8a9 	bl	802a37a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8023228:	4b39      	ldr	r3, [pc, #228]	; (8023310 <MX_TIM1_Init+0x118>)
 802322a:	4a3a      	ldr	r2, [pc, #232]	; (8023314 <MX_TIM1_Init+0x11c>)
 802322c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 802322e:	4b38      	ldr	r3, [pc, #224]	; (8023310 <MX_TIM1_Init+0x118>)
 8023230:	2201      	movs	r2, #1
 8023232:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023234:	4b36      	ldr	r3, [pc, #216]	; (8023310 <MX_TIM1_Init+0x118>)
 8023236:	2200      	movs	r2, #0
 8023238:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 802323a:	4b35      	ldr	r3, [pc, #212]	; (8023310 <MX_TIM1_Init+0x118>)
 802323c:	f240 4219 	movw	r2, #1049	; 0x419
 8023240:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023242:	4b33      	ldr	r3, [pc, #204]	; (8023310 <MX_TIM1_Init+0x118>)
 8023244:	2200      	movs	r2, #0
 8023246:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8023248:	4b31      	ldr	r3, [pc, #196]	; (8023310 <MX_TIM1_Init+0x118>)
 802324a:	2200      	movs	r2, #0
 802324c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802324e:	4b30      	ldr	r3, [pc, #192]	; (8023310 <MX_TIM1_Init+0x118>)
 8023250:	2200      	movs	r2, #0
 8023252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8023254:	482e      	ldr	r0, [pc, #184]	; (8023310 <MX_TIM1_Init+0x118>)
 8023256:	f006 f87e 	bl	8029356 <HAL_TIM_PWM_Init>
 802325a:	4603      	mov	r3, r0
 802325c:	2b00      	cmp	r3, #0
 802325e:	d001      	beq.n	8023264 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8023260:	f000 fc0c 	bl	8023a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023264:	2300      	movs	r3, #0
 8023266:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023268:	2300      	movs	r3, #0
 802326a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 802326c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8023270:	4619      	mov	r1, r3
 8023272:	4827      	ldr	r0, [pc, #156]	; (8023310 <MX_TIM1_Init+0x118>)
 8023274:	f006 ff60 	bl	802a138 <HAL_TIMEx_MasterConfigSynchronization>
 8023278:	4603      	mov	r3, r0
 802327a:	2b00      	cmp	r3, #0
 802327c:	d001      	beq.n	8023282 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 802327e:	f000 fbfd 	bl	8023a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023282:	2360      	movs	r3, #96	; 0x60
 8023284:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8023286:	2300      	movs	r3, #0
 8023288:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802328a:	2300      	movs	r3, #0
 802328c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 802328e:	2300      	movs	r3, #0
 8023290:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023292:	2300      	movs	r3, #0
 8023294:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8023296:	2300      	movs	r3, #0
 8023298:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 802329a:	2300      	movs	r3, #0
 802329c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 802329e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80232a2:	2204      	movs	r2, #4
 80232a4:	4619      	mov	r1, r3
 80232a6:	481a      	ldr	r0, [pc, #104]	; (8023310 <MX_TIM1_Init+0x118>)
 80232a8:	f006 fa90 	bl	80297cc <HAL_TIM_PWM_ConfigChannel>
 80232ac:	4603      	mov	r3, r0
 80232ae:	2b00      	cmp	r3, #0
 80232b0:	d001      	beq.n	80232b6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80232b2:	f000 fbe3 	bl	8023a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80232b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80232ba:	220c      	movs	r2, #12
 80232bc:	4619      	mov	r1, r3
 80232be:	4814      	ldr	r0, [pc, #80]	; (8023310 <MX_TIM1_Init+0x118>)
 80232c0:	f006 fa84 	bl	80297cc <HAL_TIM_PWM_ConfigChannel>
 80232c4:	4603      	mov	r3, r0
 80232c6:	2b00      	cmp	r3, #0
 80232c8:	d001      	beq.n	80232ce <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80232ca:	f000 fbd7 	bl	8023a7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80232ce:	2300      	movs	r3, #0
 80232d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80232d2:	2300      	movs	r3, #0
 80232d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80232d6:	2300      	movs	r3, #0
 80232d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80232da:	2300      	movs	r3, #0
 80232dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80232de:	2300      	movs	r3, #0
 80232e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80232e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80232e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80232e8:	2300      	movs	r3, #0
 80232ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80232ec:	1d3b      	adds	r3, r7, #4
 80232ee:	4619      	mov	r1, r3
 80232f0:	4807      	ldr	r0, [pc, #28]	; (8023310 <MX_TIM1_Init+0x118>)
 80232f2:	f006 ff9d 	bl	802a230 <HAL_TIMEx_ConfigBreakDeadTime>
 80232f6:	4603      	mov	r3, r0
 80232f8:	2b00      	cmp	r3, #0
 80232fa:	d001      	beq.n	8023300 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80232fc:	f000 fbbe 	bl	8023a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8023300:	4803      	ldr	r0, [pc, #12]	; (8023310 <MX_TIM1_Init+0x118>)
 8023302:	f001 fb3b 	bl	802497c <HAL_TIM_MspPostInit>

}
 8023306:	bf00      	nop
 8023308:	3748      	adds	r7, #72	; 0x48
 802330a:	46bd      	mov	sp, r7
 802330c:	bd80      	pop	{r7, pc}
 802330e:	bf00      	nop
 8023310:	20000a64 	.word	0x20000a64
 8023314:	40010000 	.word	0x40010000

08023318 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8023318:	b580      	push	{r7, lr}
 802331a:	b086      	sub	sp, #24
 802331c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802331e:	f107 0308 	add.w	r3, r7, #8
 8023322:	2200      	movs	r2, #0
 8023324:	601a      	str	r2, [r3, #0]
 8023326:	605a      	str	r2, [r3, #4]
 8023328:	609a      	str	r2, [r3, #8]
 802332a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802332c:	463b      	mov	r3, r7
 802332e:	2200      	movs	r2, #0
 8023330:	601a      	str	r2, [r3, #0]
 8023332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8023334:	4b1d      	ldr	r3, [pc, #116]	; (80233ac <MX_TIM2_Init+0x94>)
 8023336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802333a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 802333c:	4b1b      	ldr	r3, [pc, #108]	; (80233ac <MX_TIM2_Init+0x94>)
 802333e:	2204      	movs	r2, #4
 8023340:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023342:	4b1a      	ldr	r3, [pc, #104]	; (80233ac <MX_TIM2_Init+0x94>)
 8023344:	2200      	movs	r2, #0
 8023346:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 8023348:	4b18      	ldr	r3, [pc, #96]	; (80233ac <MX_TIM2_Init+0x94>)
 802334a:	4a19      	ldr	r2, [pc, #100]	; (80233b0 <MX_TIM2_Init+0x98>)
 802334c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802334e:	4b17      	ldr	r3, [pc, #92]	; (80233ac <MX_TIM2_Init+0x94>)
 8023350:	2200      	movs	r2, #0
 8023352:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023354:	4b15      	ldr	r3, [pc, #84]	; (80233ac <MX_TIM2_Init+0x94>)
 8023356:	2200      	movs	r2, #0
 8023358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802335a:	4814      	ldr	r0, [pc, #80]	; (80233ac <MX_TIM2_Init+0x94>)
 802335c:	f005 ffac 	bl	80292b8 <HAL_TIM_Base_Init>
 8023360:	4603      	mov	r3, r0
 8023362:	2b00      	cmp	r3, #0
 8023364:	d001      	beq.n	802336a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8023366:	f000 fb89 	bl	8023a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802336a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802336e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8023370:	f107 0308 	add.w	r3, r7, #8
 8023374:	4619      	mov	r1, r3
 8023376:	480d      	ldr	r0, [pc, #52]	; (80233ac <MX_TIM2_Init+0x94>)
 8023378:	f006 faee 	bl	8029958 <HAL_TIM_ConfigClockSource>
 802337c:	4603      	mov	r3, r0
 802337e:	2b00      	cmp	r3, #0
 8023380:	d001      	beq.n	8023386 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8023382:	f000 fb7b 	bl	8023a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023386:	2300      	movs	r3, #0
 8023388:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802338a:	2300      	movs	r3, #0
 802338c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802338e:	463b      	mov	r3, r7
 8023390:	4619      	mov	r1, r3
 8023392:	4806      	ldr	r0, [pc, #24]	; (80233ac <MX_TIM2_Init+0x94>)
 8023394:	f006 fed0 	bl	802a138 <HAL_TIMEx_MasterConfigSynchronization>
 8023398:	4603      	mov	r3, r0
 802339a:	2b00      	cmp	r3, #0
 802339c:	d001      	beq.n	80233a2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 802339e:	f000 fb6d 	bl	8023a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80233a2:	bf00      	nop
 80233a4:	3718      	adds	r7, #24
 80233a6:	46bd      	mov	sp, r7
 80233a8:	bd80      	pop	{r7, pc}
 80233aa:	bf00      	nop
 80233ac:	20000aa4 	.word	0x20000aa4
 80233b0:	00019a27 	.word	0x00019a27

080233b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80233b4:	b580      	push	{r7, lr}
 80233b6:	b08a      	sub	sp, #40	; 0x28
 80233b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80233ba:	f107 0320 	add.w	r3, r7, #32
 80233be:	2200      	movs	r2, #0
 80233c0:	601a      	str	r2, [r3, #0]
 80233c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80233c4:	1d3b      	adds	r3, r7, #4
 80233c6:	2200      	movs	r2, #0
 80233c8:	601a      	str	r2, [r3, #0]
 80233ca:	605a      	str	r2, [r3, #4]
 80233cc:	609a      	str	r2, [r3, #8]
 80233ce:	60da      	str	r2, [r3, #12]
 80233d0:	611a      	str	r2, [r3, #16]
 80233d2:	615a      	str	r2, [r3, #20]
 80233d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80233d6:	4b32      	ldr	r3, [pc, #200]	; (80234a0 <MX_TIM3_Init+0xec>)
 80233d8:	4a32      	ldr	r2, [pc, #200]	; (80234a4 <MX_TIM3_Init+0xf0>)
 80233da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80233dc:	4b30      	ldr	r3, [pc, #192]	; (80234a0 <MX_TIM3_Init+0xec>)
 80233de:	2200      	movs	r2, #0
 80233e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80233e2:	4b2f      	ldr	r3, [pc, #188]	; (80234a0 <MX_TIM3_Init+0xec>)
 80233e4:	2200      	movs	r2, #0
 80233e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80233e8:	4b2d      	ldr	r3, [pc, #180]	; (80234a0 <MX_TIM3_Init+0xec>)
 80233ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80233ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80233f0:	4b2b      	ldr	r3, [pc, #172]	; (80234a0 <MX_TIM3_Init+0xec>)
 80233f2:	2200      	movs	r2, #0
 80233f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80233f6:	4b2a      	ldr	r3, [pc, #168]	; (80234a0 <MX_TIM3_Init+0xec>)
 80233f8:	2200      	movs	r2, #0
 80233fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80233fc:	4828      	ldr	r0, [pc, #160]	; (80234a0 <MX_TIM3_Init+0xec>)
 80233fe:	f005 ffaa 	bl	8029356 <HAL_TIM_PWM_Init>
 8023402:	4603      	mov	r3, r0
 8023404:	2b00      	cmp	r3, #0
 8023406:	d001      	beq.n	802340c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8023408:	f000 fb38 	bl	8023a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802340c:	2300      	movs	r3, #0
 802340e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023410:	2300      	movs	r3, #0
 8023412:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8023414:	f107 0320 	add.w	r3, r7, #32
 8023418:	4619      	mov	r1, r3
 802341a:	4821      	ldr	r0, [pc, #132]	; (80234a0 <MX_TIM3_Init+0xec>)
 802341c:	f006 fe8c 	bl	802a138 <HAL_TIMEx_MasterConfigSynchronization>
 8023420:	4603      	mov	r3, r0
 8023422:	2b00      	cmp	r3, #0
 8023424:	d001      	beq.n	802342a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8023426:	f000 fb29 	bl	8023a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802342a:	2360      	movs	r3, #96	; 0x60
 802342c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 802342e:	2300      	movs	r3, #0
 8023430:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023432:	2300      	movs	r3, #0
 8023434:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023436:	2300      	movs	r3, #0
 8023438:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 802343a:	1d3b      	adds	r3, r7, #4
 802343c:	2200      	movs	r2, #0
 802343e:	4619      	mov	r1, r3
 8023440:	4817      	ldr	r0, [pc, #92]	; (80234a0 <MX_TIM3_Init+0xec>)
 8023442:	f006 f9c3 	bl	80297cc <HAL_TIM_PWM_ConfigChannel>
 8023446:	4603      	mov	r3, r0
 8023448:	2b00      	cmp	r3, #0
 802344a:	d001      	beq.n	8023450 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 802344c:	f000 fb16 	bl	8023a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023450:	1d3b      	adds	r3, r7, #4
 8023452:	2204      	movs	r2, #4
 8023454:	4619      	mov	r1, r3
 8023456:	4812      	ldr	r0, [pc, #72]	; (80234a0 <MX_TIM3_Init+0xec>)
 8023458:	f006 f9b8 	bl	80297cc <HAL_TIM_PWM_ConfigChannel>
 802345c:	4603      	mov	r3, r0
 802345e:	2b00      	cmp	r3, #0
 8023460:	d001      	beq.n	8023466 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8023462:	f000 fb0b 	bl	8023a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8023466:	1d3b      	adds	r3, r7, #4
 8023468:	2208      	movs	r2, #8
 802346a:	4619      	mov	r1, r3
 802346c:	480c      	ldr	r0, [pc, #48]	; (80234a0 <MX_TIM3_Init+0xec>)
 802346e:	f006 f9ad 	bl	80297cc <HAL_TIM_PWM_ConfigChannel>
 8023472:	4603      	mov	r3, r0
 8023474:	2b00      	cmp	r3, #0
 8023476:	d001      	beq.n	802347c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8023478:	f000 fb00 	bl	8023a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 802347c:	1d3b      	adds	r3, r7, #4
 802347e:	220c      	movs	r2, #12
 8023480:	4619      	mov	r1, r3
 8023482:	4807      	ldr	r0, [pc, #28]	; (80234a0 <MX_TIM3_Init+0xec>)
 8023484:	f006 f9a2 	bl	80297cc <HAL_TIM_PWM_ConfigChannel>
 8023488:	4603      	mov	r3, r0
 802348a:	2b00      	cmp	r3, #0
 802348c:	d001      	beq.n	8023492 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 802348e:	f000 faf5 	bl	8023a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8023492:	4803      	ldr	r0, [pc, #12]	; (80234a0 <MX_TIM3_Init+0xec>)
 8023494:	f001 fa72 	bl	802497c <HAL_TIM_MspPostInit>

}
 8023498:	bf00      	nop
 802349a:	3728      	adds	r7, #40	; 0x28
 802349c:	46bd      	mov	sp, r7
 802349e:	bd80      	pop	{r7, pc}
 80234a0:	200008a4 	.word	0x200008a4
 80234a4:	40000400 	.word	0x40000400

080234a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80234a8:	b580      	push	{r7, lr}
 80234aa:	b08c      	sub	sp, #48	; 0x30
 80234ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80234ae:	f107 030c 	add.w	r3, r7, #12
 80234b2:	2224      	movs	r2, #36	; 0x24
 80234b4:	2100      	movs	r1, #0
 80234b6:	4618      	mov	r0, r3
 80234b8:	f006 ff5f 	bl	802a37a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80234bc:	1d3b      	adds	r3, r7, #4
 80234be:	2200      	movs	r2, #0
 80234c0:	601a      	str	r2, [r3, #0]
 80234c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80234c4:	4b20      	ldr	r3, [pc, #128]	; (8023548 <MX_TIM4_Init+0xa0>)
 80234c6:	4a21      	ldr	r2, [pc, #132]	; (802354c <MX_TIM4_Init+0xa4>)
 80234c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80234ca:	4b1f      	ldr	r3, [pc, #124]	; (8023548 <MX_TIM4_Init+0xa0>)
 80234cc:	2200      	movs	r2, #0
 80234ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80234d0:	4b1d      	ldr	r3, [pc, #116]	; (8023548 <MX_TIM4_Init+0xa0>)
 80234d2:	2200      	movs	r2, #0
 80234d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80234d6:	4b1c      	ldr	r3, [pc, #112]	; (8023548 <MX_TIM4_Init+0xa0>)
 80234d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80234dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80234de:	4b1a      	ldr	r3, [pc, #104]	; (8023548 <MX_TIM4_Init+0xa0>)
 80234e0:	2200      	movs	r2, #0
 80234e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80234e4:	4b18      	ldr	r3, [pc, #96]	; (8023548 <MX_TIM4_Init+0xa0>)
 80234e6:	2200      	movs	r2, #0
 80234e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80234ea:	2303      	movs	r3, #3
 80234ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80234ee:	2300      	movs	r3, #0
 80234f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80234f2:	2301      	movs	r3, #1
 80234f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80234f6:	2300      	movs	r3, #0
 80234f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80234fa:	2300      	movs	r3, #0
 80234fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80234fe:	2300      	movs	r3, #0
 8023500:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8023502:	2301      	movs	r3, #1
 8023504:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8023506:	2300      	movs	r3, #0
 8023508:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 802350a:	2300      	movs	r3, #0
 802350c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 802350e:	f107 030c 	add.w	r3, r7, #12
 8023512:	4619      	mov	r1, r3
 8023514:	480c      	ldr	r0, [pc, #48]	; (8023548 <MX_TIM4_Init+0xa0>)
 8023516:	f005 ff87 	bl	8029428 <HAL_TIM_Encoder_Init>
 802351a:	4603      	mov	r3, r0
 802351c:	2b00      	cmp	r3, #0
 802351e:	d001      	beq.n	8023524 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8023520:	f000 faac 	bl	8023a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023524:	2300      	movs	r3, #0
 8023526:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023528:	2300      	movs	r3, #0
 802352a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 802352c:	1d3b      	adds	r3, r7, #4
 802352e:	4619      	mov	r1, r3
 8023530:	4805      	ldr	r0, [pc, #20]	; (8023548 <MX_TIM4_Init+0xa0>)
 8023532:	f006 fe01 	bl	802a138 <HAL_TIMEx_MasterConfigSynchronization>
 8023536:	4603      	mov	r3, r0
 8023538:	2b00      	cmp	r3, #0
 802353a:	d001      	beq.n	8023540 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 802353c:	f000 fa9e 	bl	8023a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8023540:	bf00      	nop
 8023542:	3730      	adds	r7, #48	; 0x30
 8023544:	46bd      	mov	sp, r7
 8023546:	bd80      	pop	{r7, pc}
 8023548:	200007d0 	.word	0x200007d0
 802354c:	40000800 	.word	0x40000800

08023550 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8023550:	b580      	push	{r7, lr}
 8023552:	b086      	sub	sp, #24
 8023554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8023556:	f107 0308 	add.w	r3, r7, #8
 802355a:	2200      	movs	r2, #0
 802355c:	601a      	str	r2, [r3, #0]
 802355e:	605a      	str	r2, [r3, #4]
 8023560:	609a      	str	r2, [r3, #8]
 8023562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023564:	463b      	mov	r3, r7
 8023566:	2200      	movs	r2, #0
 8023568:	601a      	str	r2, [r3, #0]
 802356a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 802356c:	4b1d      	ldr	r3, [pc, #116]	; (80235e4 <MX_TIM5_Init+0x94>)
 802356e:	4a1e      	ldr	r2, [pc, #120]	; (80235e8 <MX_TIM5_Init+0x98>)
 8023570:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 8023572:	4b1c      	ldr	r3, [pc, #112]	; (80235e4 <MX_TIM5_Init+0x94>)
 8023574:	2204      	movs	r2, #4
 8023576:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023578:	4b1a      	ldr	r3, [pc, #104]	; (80235e4 <MX_TIM5_Init+0x94>)
 802357a:	2200      	movs	r2, #0
 802357c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 802357e:	4b19      	ldr	r3, [pc, #100]	; (80235e4 <MX_TIM5_Init+0x94>)
 8023580:	f245 2207 	movw	r2, #20999	; 0x5207
 8023584:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023586:	4b17      	ldr	r3, [pc, #92]	; (80235e4 <MX_TIM5_Init+0x94>)
 8023588:	2200      	movs	r2, #0
 802358a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802358c:	4b15      	ldr	r3, [pc, #84]	; (80235e4 <MX_TIM5_Init+0x94>)
 802358e:	2200      	movs	r2, #0
 8023590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8023592:	4814      	ldr	r0, [pc, #80]	; (80235e4 <MX_TIM5_Init+0x94>)
 8023594:	f005 fe90 	bl	80292b8 <HAL_TIM_Base_Init>
 8023598:	4603      	mov	r3, r0
 802359a:	2b00      	cmp	r3, #0
 802359c:	d001      	beq.n	80235a2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 802359e:	f000 fa6d 	bl	8023a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80235a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80235a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80235a8:	f107 0308 	add.w	r3, r7, #8
 80235ac:	4619      	mov	r1, r3
 80235ae:	480d      	ldr	r0, [pc, #52]	; (80235e4 <MX_TIM5_Init+0x94>)
 80235b0:	f006 f9d2 	bl	8029958 <HAL_TIM_ConfigClockSource>
 80235b4:	4603      	mov	r3, r0
 80235b6:	2b00      	cmp	r3, #0
 80235b8:	d001      	beq.n	80235be <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80235ba:	f000 fa5f 	bl	8023a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80235be:	2300      	movs	r3, #0
 80235c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80235c2:	2300      	movs	r3, #0
 80235c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80235c6:	463b      	mov	r3, r7
 80235c8:	4619      	mov	r1, r3
 80235ca:	4806      	ldr	r0, [pc, #24]	; (80235e4 <MX_TIM5_Init+0x94>)
 80235cc:	f006 fdb4 	bl	802a138 <HAL_TIMEx_MasterConfigSynchronization>
 80235d0:	4603      	mov	r3, r0
 80235d2:	2b00      	cmp	r3, #0
 80235d4:	d001      	beq.n	80235da <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80235d6:	f000 fa51 	bl	8023a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80235da:	bf00      	nop
 80235dc:	3718      	adds	r7, #24
 80235de:	46bd      	mov	sp, r7
 80235e0:	bd80      	pop	{r7, pc}
 80235e2:	bf00      	nop
 80235e4:	20000864 	.word	0x20000864
 80235e8:	40000c00 	.word	0x40000c00

080235ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80235ec:	b580      	push	{r7, lr}
 80235ee:	b082      	sub	sp, #8
 80235f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80235f2:	463b      	mov	r3, r7
 80235f4:	2200      	movs	r2, #0
 80235f6:	601a      	str	r2, [r3, #0]
 80235f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80235fa:	4b15      	ldr	r3, [pc, #84]	; (8023650 <MX_TIM6_Init+0x64>)
 80235fc:	4a15      	ldr	r2, [pc, #84]	; (8023654 <MX_TIM6_Init+0x68>)
 80235fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8023600:	4b13      	ldr	r3, [pc, #76]	; (8023650 <MX_TIM6_Init+0x64>)
 8023602:	2204      	movs	r2, #4
 8023604:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023606:	4b12      	ldr	r3, [pc, #72]	; (8023650 <MX_TIM6_Init+0x64>)
 8023608:	2200      	movs	r2, #0
 802360a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 802360c:	4b10      	ldr	r3, [pc, #64]	; (8023650 <MX_TIM6_Init+0x64>)
 802360e:	f642 1203 	movw	r2, #10499	; 0x2903
 8023612:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023614:	4b0e      	ldr	r3, [pc, #56]	; (8023650 <MX_TIM6_Init+0x64>)
 8023616:	2200      	movs	r2, #0
 8023618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 802361a:	480d      	ldr	r0, [pc, #52]	; (8023650 <MX_TIM6_Init+0x64>)
 802361c:	f005 fe4c 	bl	80292b8 <HAL_TIM_Base_Init>
 8023620:	4603      	mov	r3, r0
 8023622:	2b00      	cmp	r3, #0
 8023624:	d001      	beq.n	802362a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8023626:	f000 fa29 	bl	8023a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802362a:	2300      	movs	r3, #0
 802362c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802362e:	2300      	movs	r3, #0
 8023630:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8023632:	463b      	mov	r3, r7
 8023634:	4619      	mov	r1, r3
 8023636:	4806      	ldr	r0, [pc, #24]	; (8023650 <MX_TIM6_Init+0x64>)
 8023638:	f006 fd7e 	bl	802a138 <HAL_TIMEx_MasterConfigSynchronization>
 802363c:	4603      	mov	r3, r0
 802363e:	2b00      	cmp	r3, #0
 8023640:	d001      	beq.n	8023646 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8023642:	f000 fa1b 	bl	8023a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8023646:	bf00      	nop
 8023648:	3708      	adds	r7, #8
 802364a:	46bd      	mov	sp, r7
 802364c:	bd80      	pop	{r7, pc}
 802364e:	bf00      	nop
 8023650:	20000a24 	.word	0x20000a24
 8023654:	40001000 	.word	0x40001000

08023658 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8023658:	b580      	push	{r7, lr}
 802365a:	b082      	sub	sp, #8
 802365c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802365e:	463b      	mov	r3, r7
 8023660:	2200      	movs	r2, #0
 8023662:	601a      	str	r2, [r3, #0]
 8023664:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8023666:	4b15      	ldr	r3, [pc, #84]	; (80236bc <MX_TIM7_Init+0x64>)
 8023668:	4a15      	ldr	r2, [pc, #84]	; (80236c0 <MX_TIM7_Init+0x68>)
 802366a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 802366c:	4b13      	ldr	r3, [pc, #76]	; (80236bc <MX_TIM7_Init+0x64>)
 802366e:	2204      	movs	r2, #4
 8023670:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023672:	4b12      	ldr	r3, [pc, #72]	; (80236bc <MX_TIM7_Init+0x64>)
 8023674:	2200      	movs	r2, #0
 8023676:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 8023678:	4b10      	ldr	r3, [pc, #64]	; (80236bc <MX_TIM7_Init+0x64>)
 802367a:	f240 4219 	movw	r2, #1049	; 0x419
 802367e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023680:	4b0e      	ldr	r3, [pc, #56]	; (80236bc <MX_TIM7_Init+0x64>)
 8023682:	2200      	movs	r2, #0
 8023684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8023686:	480d      	ldr	r0, [pc, #52]	; (80236bc <MX_TIM7_Init+0x64>)
 8023688:	f005 fe16 	bl	80292b8 <HAL_TIM_Base_Init>
 802368c:	4603      	mov	r3, r0
 802368e:	2b00      	cmp	r3, #0
 8023690:	d001      	beq.n	8023696 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8023692:	f000 f9f3 	bl	8023a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023696:	2300      	movs	r3, #0
 8023698:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802369a:	2300      	movs	r3, #0
 802369c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 802369e:	463b      	mov	r3, r7
 80236a0:	4619      	mov	r1, r3
 80236a2:	4806      	ldr	r0, [pc, #24]	; (80236bc <MX_TIM7_Init+0x64>)
 80236a4:	f006 fd48 	bl	802a138 <HAL_TIMEx_MasterConfigSynchronization>
 80236a8:	4603      	mov	r3, r0
 80236aa:	2b00      	cmp	r3, #0
 80236ac:	d001      	beq.n	80236b2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80236ae:	f000 f9e5 	bl	8023a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80236b2:	bf00      	nop
 80236b4:	3708      	adds	r7, #8
 80236b6:	46bd      	mov	sp, r7
 80236b8:	bd80      	pop	{r7, pc}
 80236ba:	bf00      	nop
 80236bc:	20000b24 	.word	0x20000b24
 80236c0:	40001400 	.word	0x40001400

080236c4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80236c4:	b580      	push	{r7, lr}
 80236c6:	b08c      	sub	sp, #48	; 0x30
 80236c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80236ca:	f107 030c 	add.w	r3, r7, #12
 80236ce:	2224      	movs	r2, #36	; 0x24
 80236d0:	2100      	movs	r1, #0
 80236d2:	4618      	mov	r0, r3
 80236d4:	f006 fe51 	bl	802a37a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80236d8:	1d3b      	adds	r3, r7, #4
 80236da:	2200      	movs	r2, #0
 80236dc:	601a      	str	r2, [r3, #0]
 80236de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80236e0:	4b22      	ldr	r3, [pc, #136]	; (802376c <MX_TIM8_Init+0xa8>)
 80236e2:	4a23      	ldr	r2, [pc, #140]	; (8023770 <MX_TIM8_Init+0xac>)
 80236e4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80236e6:	4b21      	ldr	r3, [pc, #132]	; (802376c <MX_TIM8_Init+0xa8>)
 80236e8:	2200      	movs	r2, #0
 80236ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80236ec:	4b1f      	ldr	r3, [pc, #124]	; (802376c <MX_TIM8_Init+0xa8>)
 80236ee:	2200      	movs	r2, #0
 80236f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80236f2:	4b1e      	ldr	r3, [pc, #120]	; (802376c <MX_TIM8_Init+0xa8>)
 80236f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80236f8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80236fa:	4b1c      	ldr	r3, [pc, #112]	; (802376c <MX_TIM8_Init+0xa8>)
 80236fc:	2200      	movs	r2, #0
 80236fe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8023700:	4b1a      	ldr	r3, [pc, #104]	; (802376c <MX_TIM8_Init+0xa8>)
 8023702:	2200      	movs	r2, #0
 8023704:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023706:	4b19      	ldr	r3, [pc, #100]	; (802376c <MX_TIM8_Init+0xa8>)
 8023708:	2200      	movs	r2, #0
 802370a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 802370c:	2303      	movs	r3, #3
 802370e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8023710:	2300      	movs	r3, #0
 8023712:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8023714:	2301      	movs	r3, #1
 8023716:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8023718:	2300      	movs	r3, #0
 802371a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 802371c:	2300      	movs	r3, #0
 802371e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8023720:	2300      	movs	r3, #0
 8023722:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8023724:	2301      	movs	r3, #1
 8023726:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8023728:	2300      	movs	r3, #0
 802372a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 802372c:	2300      	movs	r3, #0
 802372e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8023730:	f107 030c 	add.w	r3, r7, #12
 8023734:	4619      	mov	r1, r3
 8023736:	480d      	ldr	r0, [pc, #52]	; (802376c <MX_TIM8_Init+0xa8>)
 8023738:	f005 fe76 	bl	8029428 <HAL_TIM_Encoder_Init>
 802373c:	4603      	mov	r3, r0
 802373e:	2b00      	cmp	r3, #0
 8023740:	d001      	beq.n	8023746 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8023742:	f000 f99b 	bl	8023a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023746:	2300      	movs	r3, #0
 8023748:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802374a:	2300      	movs	r3, #0
 802374c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 802374e:	1d3b      	adds	r3, r7, #4
 8023750:	4619      	mov	r1, r3
 8023752:	4806      	ldr	r0, [pc, #24]	; (802376c <MX_TIM8_Init+0xa8>)
 8023754:	f006 fcf0 	bl	802a138 <HAL_TIMEx_MasterConfigSynchronization>
 8023758:	4603      	mov	r3, r0
 802375a:	2b00      	cmp	r3, #0
 802375c:	d001      	beq.n	8023762 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 802375e:	f000 f98d 	bl	8023a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8023762:	bf00      	nop
 8023764:	3730      	adds	r7, #48	; 0x30
 8023766:	46bd      	mov	sp, r7
 8023768:	bd80      	pop	{r7, pc}
 802376a:	bf00      	nop
 802376c:	20000790 	.word	0x20000790
 8023770:	40010400 	.word	0x40010400

08023774 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8023774:	b580      	push	{r7, lr}
 8023776:	b088      	sub	sp, #32
 8023778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 802377a:	1d3b      	adds	r3, r7, #4
 802377c:	2200      	movs	r2, #0
 802377e:	601a      	str	r2, [r3, #0]
 8023780:	605a      	str	r2, [r3, #4]
 8023782:	609a      	str	r2, [r3, #8]
 8023784:	60da      	str	r2, [r3, #12]
 8023786:	611a      	str	r2, [r3, #16]
 8023788:	615a      	str	r2, [r3, #20]
 802378a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 802378c:	4b1e      	ldr	r3, [pc, #120]	; (8023808 <MX_TIM11_Init+0x94>)
 802378e:	4a1f      	ldr	r2, [pc, #124]	; (802380c <MX_TIM11_Init+0x98>)
 8023790:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8023792:	4b1d      	ldr	r3, [pc, #116]	; (8023808 <MX_TIM11_Init+0x94>)
 8023794:	2200      	movs	r2, #0
 8023796:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023798:	4b1b      	ldr	r3, [pc, #108]	; (8023808 <MX_TIM11_Init+0x94>)
 802379a:	2200      	movs	r2, #0
 802379c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 802379e:	4b1a      	ldr	r3, [pc, #104]	; (8023808 <MX_TIM11_Init+0x94>)
 80237a0:	f240 628f 	movw	r2, #1679	; 0x68f
 80237a4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80237a6:	4b18      	ldr	r3, [pc, #96]	; (8023808 <MX_TIM11_Init+0x94>)
 80237a8:	2200      	movs	r2, #0
 80237aa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80237ac:	4b16      	ldr	r3, [pc, #88]	; (8023808 <MX_TIM11_Init+0x94>)
 80237ae:	2200      	movs	r2, #0
 80237b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80237b2:	4815      	ldr	r0, [pc, #84]	; (8023808 <MX_TIM11_Init+0x94>)
 80237b4:	f005 fd80 	bl	80292b8 <HAL_TIM_Base_Init>
 80237b8:	4603      	mov	r3, r0
 80237ba:	2b00      	cmp	r3, #0
 80237bc:	d001      	beq.n	80237c2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80237be:	f000 f95d 	bl	8023a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80237c2:	4811      	ldr	r0, [pc, #68]	; (8023808 <MX_TIM11_Init+0x94>)
 80237c4:	f005 fdc7 	bl	8029356 <HAL_TIM_PWM_Init>
 80237c8:	4603      	mov	r3, r0
 80237ca:	2b00      	cmp	r3, #0
 80237cc:	d001      	beq.n	80237d2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80237ce:	f000 f955 	bl	8023a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80237d2:	2360      	movs	r3, #96	; 0x60
 80237d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80237d6:	2300      	movs	r3, #0
 80237d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80237da:	2300      	movs	r3, #0
 80237dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80237de:	2300      	movs	r3, #0
 80237e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80237e2:	1d3b      	adds	r3, r7, #4
 80237e4:	2200      	movs	r2, #0
 80237e6:	4619      	mov	r1, r3
 80237e8:	4807      	ldr	r0, [pc, #28]	; (8023808 <MX_TIM11_Init+0x94>)
 80237ea:	f005 ffef 	bl	80297cc <HAL_TIM_PWM_ConfigChannel>
 80237ee:	4603      	mov	r3, r0
 80237f0:	2b00      	cmp	r3, #0
 80237f2:	d001      	beq.n	80237f8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80237f4:	f000 f942 	bl	8023a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80237f8:	4803      	ldr	r0, [pc, #12]	; (8023808 <MX_TIM11_Init+0x94>)
 80237fa:	f001 f8bf 	bl	802497c <HAL_TIM_MspPostInit>

}
 80237fe:	bf00      	nop
 8023800:	3720      	adds	r7, #32
 8023802:	46bd      	mov	sp, r7
 8023804:	bd80      	pop	{r7, pc}
 8023806:	bf00      	nop
 8023808:	20000984 	.word	0x20000984
 802380c:	40014800 	.word	0x40014800

08023810 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8023810:	b580      	push	{r7, lr}
 8023812:	b088      	sub	sp, #32
 8023814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8023816:	1d3b      	adds	r3, r7, #4
 8023818:	2200      	movs	r2, #0
 802381a:	601a      	str	r2, [r3, #0]
 802381c:	605a      	str	r2, [r3, #4]
 802381e:	609a      	str	r2, [r3, #8]
 8023820:	60da      	str	r2, [r3, #12]
 8023822:	611a      	str	r2, [r3, #16]
 8023824:	615a      	str	r2, [r3, #20]
 8023826:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8023828:	4b1a      	ldr	r3, [pc, #104]	; (8023894 <MX_TIM12_Init+0x84>)
 802382a:	4a1b      	ldr	r2, [pc, #108]	; (8023898 <MX_TIM12_Init+0x88>)
 802382c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 802382e:	4b19      	ldr	r3, [pc, #100]	; (8023894 <MX_TIM12_Init+0x84>)
 8023830:	f44f 725c 	mov.w	r2, #880	; 0x370
 8023834:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023836:	4b17      	ldr	r3, [pc, #92]	; (8023894 <MX_TIM12_Init+0x84>)
 8023838:	2200      	movs	r2, #0
 802383a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 802383c:	4b15      	ldr	r3, [pc, #84]	; (8023894 <MX_TIM12_Init+0x84>)
 802383e:	2235      	movs	r2, #53	; 0x35
 8023840:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023842:	4b14      	ldr	r3, [pc, #80]	; (8023894 <MX_TIM12_Init+0x84>)
 8023844:	2200      	movs	r2, #0
 8023846:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023848:	4b12      	ldr	r3, [pc, #72]	; (8023894 <MX_TIM12_Init+0x84>)
 802384a:	2200      	movs	r2, #0
 802384c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 802384e:	4811      	ldr	r0, [pc, #68]	; (8023894 <MX_TIM12_Init+0x84>)
 8023850:	f005 fd81 	bl	8029356 <HAL_TIM_PWM_Init>
 8023854:	4603      	mov	r3, r0
 8023856:	2b00      	cmp	r3, #0
 8023858:	d001      	beq.n	802385e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 802385a:	f000 f90f 	bl	8023a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802385e:	2360      	movs	r3, #96	; 0x60
 8023860:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023862:	2300      	movs	r3, #0
 8023864:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023866:	2300      	movs	r3, #0
 8023868:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802386a:	2300      	movs	r3, #0
 802386c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 802386e:	1d3b      	adds	r3, r7, #4
 8023870:	2204      	movs	r2, #4
 8023872:	4619      	mov	r1, r3
 8023874:	4807      	ldr	r0, [pc, #28]	; (8023894 <MX_TIM12_Init+0x84>)
 8023876:	f005 ffa9 	bl	80297cc <HAL_TIM_PWM_ConfigChannel>
 802387a:	4603      	mov	r3, r0
 802387c:	2b00      	cmp	r3, #0
 802387e:	d001      	beq.n	8023884 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8023880:	f000 f8fc 	bl	8023a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8023884:	4803      	ldr	r0, [pc, #12]	; (8023894 <MX_TIM12_Init+0x84>)
 8023886:	f001 f879 	bl	802497c <HAL_TIM_MspPostInit>

}
 802388a:	bf00      	nop
 802388c:	3720      	adds	r7, #32
 802388e:	46bd      	mov	sp, r7
 8023890:	bd80      	pop	{r7, pc}
 8023892:	bf00      	nop
 8023894:	20000ae4 	.word	0x20000ae4
 8023898:	40001800 	.word	0x40001800

0802389c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 802389c:	b580      	push	{r7, lr}
 802389e:	b082      	sub	sp, #8
 80238a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80238a2:	2300      	movs	r3, #0
 80238a4:	607b      	str	r3, [r7, #4]
 80238a6:	4b0c      	ldr	r3, [pc, #48]	; (80238d8 <MX_DMA_Init+0x3c>)
 80238a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80238aa:	4a0b      	ldr	r2, [pc, #44]	; (80238d8 <MX_DMA_Init+0x3c>)
 80238ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80238b0:	6313      	str	r3, [r2, #48]	; 0x30
 80238b2:	4b09      	ldr	r3, [pc, #36]	; (80238d8 <MX_DMA_Init+0x3c>)
 80238b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80238b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80238ba:	607b      	str	r3, [r7, #4]
 80238bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80238be:	2200      	movs	r2, #0
 80238c0:	2100      	movs	r1, #0
 80238c2:	2038      	movs	r0, #56	; 0x38
 80238c4:	f003 f9fd 	bl	8026cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80238c8:	2038      	movs	r0, #56	; 0x38
 80238ca:	f003 fa16 	bl	8026cfa <HAL_NVIC_EnableIRQ>

}
 80238ce:	bf00      	nop
 80238d0:	3708      	adds	r7, #8
 80238d2:	46bd      	mov	sp, r7
 80238d4:	bd80      	pop	{r7, pc}
 80238d6:	bf00      	nop
 80238d8:	40023800 	.word	0x40023800

080238dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80238dc:	b580      	push	{r7, lr}
 80238de:	b08a      	sub	sp, #40	; 0x28
 80238e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80238e2:	f107 0314 	add.w	r3, r7, #20
 80238e6:	2200      	movs	r2, #0
 80238e8:	601a      	str	r2, [r3, #0]
 80238ea:	605a      	str	r2, [r3, #4]
 80238ec:	609a      	str	r2, [r3, #8]
 80238ee:	60da      	str	r2, [r3, #12]
 80238f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80238f2:	2300      	movs	r3, #0
 80238f4:	613b      	str	r3, [r7, #16]
 80238f6:	4b5c      	ldr	r3, [pc, #368]	; (8023a68 <MX_GPIO_Init+0x18c>)
 80238f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80238fa:	4a5b      	ldr	r2, [pc, #364]	; (8023a68 <MX_GPIO_Init+0x18c>)
 80238fc:	f043 0304 	orr.w	r3, r3, #4
 8023900:	6313      	str	r3, [r2, #48]	; 0x30
 8023902:	4b59      	ldr	r3, [pc, #356]	; (8023a68 <MX_GPIO_Init+0x18c>)
 8023904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023906:	f003 0304 	and.w	r3, r3, #4
 802390a:	613b      	str	r3, [r7, #16]
 802390c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802390e:	2300      	movs	r3, #0
 8023910:	60fb      	str	r3, [r7, #12]
 8023912:	4b55      	ldr	r3, [pc, #340]	; (8023a68 <MX_GPIO_Init+0x18c>)
 8023914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023916:	4a54      	ldr	r2, [pc, #336]	; (8023a68 <MX_GPIO_Init+0x18c>)
 8023918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802391c:	6313      	str	r3, [r2, #48]	; 0x30
 802391e:	4b52      	ldr	r3, [pc, #328]	; (8023a68 <MX_GPIO_Init+0x18c>)
 8023920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023926:	60fb      	str	r3, [r7, #12]
 8023928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802392a:	2300      	movs	r3, #0
 802392c:	60bb      	str	r3, [r7, #8]
 802392e:	4b4e      	ldr	r3, [pc, #312]	; (8023a68 <MX_GPIO_Init+0x18c>)
 8023930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023932:	4a4d      	ldr	r2, [pc, #308]	; (8023a68 <MX_GPIO_Init+0x18c>)
 8023934:	f043 0301 	orr.w	r3, r3, #1
 8023938:	6313      	str	r3, [r2, #48]	; 0x30
 802393a:	4b4b      	ldr	r3, [pc, #300]	; (8023a68 <MX_GPIO_Init+0x18c>)
 802393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802393e:	f003 0301 	and.w	r3, r3, #1
 8023942:	60bb      	str	r3, [r7, #8]
 8023944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8023946:	2300      	movs	r3, #0
 8023948:	607b      	str	r3, [r7, #4]
 802394a:	4b47      	ldr	r3, [pc, #284]	; (8023a68 <MX_GPIO_Init+0x18c>)
 802394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802394e:	4a46      	ldr	r2, [pc, #280]	; (8023a68 <MX_GPIO_Init+0x18c>)
 8023950:	f043 0302 	orr.w	r3, r3, #2
 8023954:	6313      	str	r3, [r2, #48]	; 0x30
 8023956:	4b44      	ldr	r3, [pc, #272]	; (8023a68 <MX_GPIO_Init+0x18c>)
 8023958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802395a:	f003 0302 	and.w	r3, r3, #2
 802395e:	607b      	str	r3, [r7, #4]
 8023960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023962:	2300      	movs	r3, #0
 8023964:	603b      	str	r3, [r7, #0]
 8023966:	4b40      	ldr	r3, [pc, #256]	; (8023a68 <MX_GPIO_Init+0x18c>)
 8023968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802396a:	4a3f      	ldr	r2, [pc, #252]	; (8023a68 <MX_GPIO_Init+0x18c>)
 802396c:	f043 0308 	orr.w	r3, r3, #8
 8023970:	6313      	str	r3, [r2, #48]	; 0x30
 8023972:	4b3d      	ldr	r3, [pc, #244]	; (8023a68 <MX_GPIO_Init+0x18c>)
 8023974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023976:	f003 0308 	and.w	r3, r3, #8
 802397a:	603b      	str	r3, [r7, #0]
 802397c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 802397e:	2200      	movs	r2, #0
 8023980:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8023984:	4839      	ldr	r0, [pc, #228]	; (8023a6c <MX_GPIO_Init+0x190>)
 8023986:	f004 f9c9 	bl	8027d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 802398a:	2201      	movs	r2, #1
 802398c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8023990:	4837      	ldr	r0, [pc, #220]	; (8023a70 <MX_GPIO_Init+0x194>)
 8023992:	f004 f9c3 	bl	8027d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8023996:	2200      	movs	r2, #0
 8023998:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 802399c:	4835      	ldr	r0, [pc, #212]	; (8023a74 <MX_GPIO_Init+0x198>)
 802399e:	f004 f9bd 	bl	8027d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80239a2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80239a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80239a8:	2301      	movs	r3, #1
 80239aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80239ac:	2300      	movs	r3, #0
 80239ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80239b0:	2300      	movs	r3, #0
 80239b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80239b4:	f107 0314 	add.w	r3, r7, #20
 80239b8:	4619      	mov	r1, r3
 80239ba:	482c      	ldr	r0, [pc, #176]	; (8023a6c <MX_GPIO_Init+0x190>)
 80239bc:	f003 fffc 	bl	80279b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80239c0:	2307      	movs	r3, #7
 80239c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80239c4:	2300      	movs	r3, #0
 80239c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80239c8:	2301      	movs	r3, #1
 80239ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80239cc:	f107 0314 	add.w	r3, r7, #20
 80239d0:	4619      	mov	r1, r3
 80239d2:	4827      	ldr	r0, [pc, #156]	; (8023a70 <MX_GPIO_Init+0x194>)
 80239d4:	f003 fff0 	bl	80279b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80239d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80239dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80239de:	2301      	movs	r3, #1
 80239e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80239e2:	2300      	movs	r3, #0
 80239e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80239e6:	2300      	movs	r3, #0
 80239e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80239ea:	f107 0314 	add.w	r3, r7, #20
 80239ee:	4619      	mov	r1, r3
 80239f0:	481f      	ldr	r0, [pc, #124]	; (8023a70 <MX_GPIO_Init+0x194>)
 80239f2:	f003 ffe1 	bl	80279b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 80239f6:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 80239fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80239fc:	2300      	movs	r3, #0
 80239fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023a00:	2300      	movs	r3, #0
 8023a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023a04:	f107 0314 	add.w	r3, r7, #20
 8023a08:	4619      	mov	r1, r3
 8023a0a:	4819      	ldr	r0, [pc, #100]	; (8023a70 <MX_GPIO_Init+0x194>)
 8023a0c:	f003 ffd4 	bl	80279b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8023a10:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8023a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023a16:	2301      	movs	r3, #1
 8023a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023a1a:	2300      	movs	r3, #0
 8023a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023a1e:	2300      	movs	r3, #0
 8023a20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023a22:	f107 0314 	add.w	r3, r7, #20
 8023a26:	4619      	mov	r1, r3
 8023a28:	4812      	ldr	r0, [pc, #72]	; (8023a74 <MX_GPIO_Init+0x198>)
 8023a2a:	f003 ffc5 	bl	80279b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023a34:	2300      	movs	r3, #0
 8023a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023a38:	2301      	movs	r3, #1
 8023a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023a3c:	f107 0314 	add.w	r3, r7, #20
 8023a40:	4619      	mov	r1, r3
 8023a42:	480c      	ldr	r0, [pc, #48]	; (8023a74 <MX_GPIO_Init+0x198>)
 8023a44:	f003 ffb8 	bl	80279b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8023a48:	2304      	movs	r3, #4
 8023a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023a4c:	2300      	movs	r3, #0
 8023a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023a50:	2300      	movs	r3, #0
 8023a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023a54:	f107 0314 	add.w	r3, r7, #20
 8023a58:	4619      	mov	r1, r3
 8023a5a:	4807      	ldr	r0, [pc, #28]	; (8023a78 <MX_GPIO_Init+0x19c>)
 8023a5c:	f003 ffac 	bl	80279b8 <HAL_GPIO_Init>

}
 8023a60:	bf00      	nop
 8023a62:	3728      	adds	r7, #40	; 0x28
 8023a64:	46bd      	mov	sp, r7
 8023a66:	bd80      	pop	{r7, pc}
 8023a68:	40023800 	.word	0x40023800
 8023a6c:	40020800 	.word	0x40020800
 8023a70:	40020400 	.word	0x40020400
 8023a74:	40020000 	.word	0x40020000
 8023a78:	40020c00 	.word	0x40020c00

08023a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8023a7c:	b480      	push	{r7}
 8023a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8023a80:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8023a82:	e7fe      	b.n	8023a82 <Error_Handler+0x6>

08023a84 <_ZN5MotorC1Ev>:
#include "motor.hpp"

Motor::Motor() {}
 8023a84:	b480      	push	{r7}
 8023a86:	b083      	sub	sp, #12
 8023a88:	af00      	add	r7, sp, #0
 8023a8a:	6078      	str	r0, [r7, #4]
 8023a8c:	687b      	ldr	r3, [r7, #4]
 8023a8e:	4618      	mov	r0, r3
 8023a90:	370c      	adds	r7, #12
 8023a92:	46bd      	mov	sp, r7
 8023a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a98:	4770      	bx	lr
	...

08023a9c <_ZN5Motor4InitEv>:

void Motor::Init()
{
 8023a9c:	b580      	push	{r7, lr}
 8023a9e:	b082      	sub	sp, #8
 8023aa0:	af00      	add	r7, sp, #0
 8023aa2:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8023aa4:	2104      	movs	r1, #4
 8023aa6:	4810      	ldr	r0, [pc, #64]	; (8023ae8 <_ZN5Motor4InitEv+0x4c>)
 8023aa8:	f005 fc80 	bl	80293ac <HAL_TIM_PWM_Start>
 8023aac:	4603      	mov	r3, r0
 8023aae:	2b00      	cmp	r3, #0
 8023ab0:	bf14      	ite	ne
 8023ab2:	2301      	movne	r3, #1
 8023ab4:	2300      	moveq	r3, #0
 8023ab6:	b2db      	uxtb	r3, r3
 8023ab8:	2b00      	cmp	r3, #0
 8023aba:	d002      	beq.n	8023ac2 <_ZN5Motor4InitEv+0x26>
    {
        Error_Handler(); // MOTOR_R
 8023abc:	f7ff ffde 	bl	8023a7c <Error_Handler>
    }
    else if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
    {
        Error_Handler(); // MOTOR_L
    }
}
 8023ac0:	e00d      	b.n	8023ade <_ZN5Motor4InitEv+0x42>
    else if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8023ac2:	210c      	movs	r1, #12
 8023ac4:	4808      	ldr	r0, [pc, #32]	; (8023ae8 <_ZN5Motor4InitEv+0x4c>)
 8023ac6:	f005 fc71 	bl	80293ac <HAL_TIM_PWM_Start>
 8023aca:	4603      	mov	r3, r0
 8023acc:	2b00      	cmp	r3, #0
 8023ace:	bf14      	ite	ne
 8023ad0:	2301      	movne	r3, #1
 8023ad2:	2300      	moveq	r3, #0
 8023ad4:	b2db      	uxtb	r3, r3
 8023ad6:	2b00      	cmp	r3, #0
 8023ad8:	d001      	beq.n	8023ade <_ZN5Motor4InitEv+0x42>
        Error_Handler(); // MOTOR_L
 8023ada:	f7ff ffcf 	bl	8023a7c <Error_Handler>
}
 8023ade:	bf00      	nop
 8023ae0:	3708      	adds	r7, #8
 8023ae2:	46bd      	mov	sp, r7
 8023ae4:	bd80      	pop	{r7, pc}
 8023ae6:	bf00      	nop
 8023ae8:	20000a64 	.word	0x20000a64
 8023aec:	00000000 	.word	0x00000000

08023af0 <_ZN5Motor5DriveEff>:

void Motor::Drive(float translation_ratio, float rotation_ratio)
{
 8023af0:	b580      	push	{r7, lr}
 8023af2:	b08a      	sub	sp, #40	; 0x28
 8023af4:	af00      	add	r7, sp, #0
 8023af6:	60f8      	str	r0, [r7, #12]
 8023af8:	ed87 0a02 	vstr	s0, [r7, #8]
 8023afc:	edc7 0a01 	vstr	s1, [r7, #4]
#ifdef DEBUG_MODE
    g_translation_ratio = translation_ratio;  g_rotation_ratio = rotation_ratio;
 8023b00:	4a89      	ldr	r2, [pc, #548]	; (8023d28 <_ZN5Motor5DriveEff+0x238>)
 8023b02:	68bb      	ldr	r3, [r7, #8]
 8023b04:	6013      	str	r3, [r2, #0]
 8023b06:	4a89      	ldr	r2, [pc, #548]	; (8023d2c <_ZN5Motor5DriveEff+0x23c>)
 8023b08:	687b      	ldr	r3, [r7, #4]
 8023b0a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(translation_ratio > LIMIT_TRANS_DUTY)       translation_ratio =  LIMIT_TRANS_DUTY;
 8023b0c:	68b8      	ldr	r0, [r7, #8]
 8023b0e:	f7fc fbfb 	bl	8020308 <__aeabi_f2d>
 8023b12:	a381      	add	r3, pc, #516	; (adr r3, 8023d18 <_ZN5Motor5DriveEff+0x228>)
 8023b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b18:	f7fc fede 	bl	80208d8 <__aeabi_dcmpgt>
 8023b1c:	4603      	mov	r3, r0
 8023b1e:	2b00      	cmp	r3, #0
 8023b20:	d002      	beq.n	8023b28 <_ZN5Motor5DriveEff+0x38>
 8023b22:	4b83      	ldr	r3, [pc, #524]	; (8023d30 <_ZN5Motor5DriveEff+0x240>)
 8023b24:	60bb      	str	r3, [r7, #8]
 8023b26:	e00c      	b.n	8023b42 <_ZN5Motor5DriveEff+0x52>
    else if(translation_ratio < -LIMIT_TRANS_DUTY) translation_ratio = -LIMIT_TRANS_DUTY;
 8023b28:	68b8      	ldr	r0, [r7, #8]
 8023b2a:	f7fc fbed 	bl	8020308 <__aeabi_f2d>
 8023b2e:	a37c      	add	r3, pc, #496	; (adr r3, 8023d20 <_ZN5Motor5DriveEff+0x230>)
 8023b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b34:	f7fc feb2 	bl	802089c <__aeabi_dcmplt>
 8023b38:	4603      	mov	r3, r0
 8023b3a:	2b00      	cmp	r3, #0
 8023b3c:	d001      	beq.n	8023b42 <_ZN5Motor5DriveEff+0x52>
 8023b3e:	4b7d      	ldr	r3, [pc, #500]	; (8023d34 <_ZN5Motor5DriveEff+0x244>)
 8023b40:	60bb      	str	r3, [r7, #8]

    float sum = translation_ratio + rotation_ratio;
 8023b42:	ed97 7a02 	vldr	s14, [r7, #8]
 8023b46:	edd7 7a01 	vldr	s15, [r7, #4]
 8023b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023b4e:	edc7 7a06 	vstr	s15, [r7, #24]
    float excess = 0;
 8023b52:	f04f 0300 	mov.w	r3, #0
 8023b56:	627b      	str	r3, [r7, #36]	; 0x24

    if(sum > 1.0)       excess = sum - 1.0;
 8023b58:	edd7 7a06 	vldr	s15, [r7, #24]
 8023b5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b68:	dd08      	ble.n	8023b7c <_ZN5Motor5DriveEff+0x8c>
 8023b6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8023b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023b72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023b76:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8023b7a:	e010      	b.n	8023b9e <_ZN5Motor5DriveEff+0xae>
    else if(sum < -1.0) excess = sum + 1.0;
 8023b7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8023b80:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b8c:	d507      	bpl.n	8023b9e <_ZN5Motor5DriveEff+0xae>
 8023b8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8023b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023b96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023b9a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    translation_ratio -= excess;
 8023b9e:	ed97 7a02 	vldr	s14, [r7, #8]
 8023ba2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8023ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023baa:	edc7 7a02 	vstr	s15, [r7, #8]

#ifdef DEBUG_MODE
    g_sum_raito = sum;  g_excess_ratio = excess;  g_reduced_translation = translation_ratio;
 8023bae:	4a62      	ldr	r2, [pc, #392]	; (8023d38 <_ZN5Motor5DriveEff+0x248>)
 8023bb0:	69bb      	ldr	r3, [r7, #24]
 8023bb2:	6013      	str	r3, [r2, #0]
 8023bb4:	4a61      	ldr	r2, [pc, #388]	; (8023d3c <_ZN5Motor5DriveEff+0x24c>)
 8023bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023bb8:	6013      	str	r3, [r2, #0]
 8023bba:	4a61      	ldr	r2, [pc, #388]	; (8023d40 <_ZN5Motor5DriveEff+0x250>)
 8023bbc:	68bb      	ldr	r3, [r7, #8]
 8023bbe:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float duty_l = translation_ratio - rotation_ratio;
 8023bc0:	ed97 7a02 	vldr	s14, [r7, #8]
 8023bc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8023bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023bcc:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_r = translation_ratio + rotation_ratio;
 8023bd0:	ed97 7a02 	vldr	s14, [r7, #8]
 8023bd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8023bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023bdc:	edc7 7a07 	vstr	s15, [r7, #28]

    if(duty_l > 1.0)       duty_l =  1.0;
 8023be0:	edd7 7a08 	vldr	s15, [r7, #32]
 8023be4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023bf0:	dd03      	ble.n	8023bfa <_ZN5Motor5DriveEff+0x10a>
 8023bf2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023bf6:	623b      	str	r3, [r7, #32]
 8023bf8:	e00a      	b.n	8023c10 <_ZN5Motor5DriveEff+0x120>
    else if(duty_l < -1.0) duty_l = -1.0;
 8023bfa:	edd7 7a08 	vldr	s15, [r7, #32]
 8023bfe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c0a:	d501      	bpl.n	8023c10 <_ZN5Motor5DriveEff+0x120>
 8023c0c:	4b4d      	ldr	r3, [pc, #308]	; (8023d44 <_ZN5Motor5DriveEff+0x254>)
 8023c0e:	623b      	str	r3, [r7, #32]

    if(duty_r > 1.0)       duty_r =  1.0;
 8023c10:	edd7 7a07 	vldr	s15, [r7, #28]
 8023c14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c20:	dd03      	ble.n	8023c2a <_ZN5Motor5DriveEff+0x13a>
 8023c22:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023c26:	61fb      	str	r3, [r7, #28]
 8023c28:	e00a      	b.n	8023c40 <_ZN5Motor5DriveEff+0x150>
    else if(duty_r < -1.0) duty_r = -1.0;
 8023c2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8023c2e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c3a:	d501      	bpl.n	8023c40 <_ZN5Motor5DriveEff+0x150>
 8023c3c:	4b41      	ldr	r3, [pc, #260]	; (8023d44 <_ZN5Motor5DriveEff+0x254>)
 8023c3e:	61fb      	str	r3, [r7, #28]

#ifdef DEBUG_MODE
    g_duty_l = duty_l;  g_duty_r = duty_r;
 8023c40:	4a41      	ldr	r2, [pc, #260]	; (8023d48 <_ZN5Motor5DriveEff+0x258>)
 8023c42:	6a3b      	ldr	r3, [r7, #32]
 8023c44:	6013      	str	r3, [r2, #0]
 8023c46:	4a41      	ldr	r2, [pc, #260]	; (8023d4c <_ZN5Motor5DriveEff+0x25c>)
 8023c48:	69fb      	ldr	r3, [r7, #28]
 8023c4a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int16_t count_l = static_cast<int16_t>(COUNTER_PERIOD * duty_l);
 8023c4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8023c50:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8023d50 <_ZN5Motor5DriveEff+0x260>
 8023c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023c5c:	ee17 3a90 	vmov	r3, s15
 8023c60:	b21b      	sxth	r3, r3
 8023c62:	82fb      	strh	r3, [r7, #22]
    int16_t count_r = static_cast<int16_t>(COUNTER_PERIOD * duty_r);
 8023c64:	edd7 7a07 	vldr	s15, [r7, #28]
 8023c68:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8023d50 <_ZN5Motor5DriveEff+0x260>
 8023c6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023c70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023c74:	ee17 3a90 	vmov	r3, s15
 8023c78:	b21b      	sxth	r3, r3
 8023c7a:	82bb      	strh	r3, [r7, #20]

    if(count_l < 0) { count_l *= -1; BACKWARD_L; }
 8023c7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023c80:	2b00      	cmp	r3, #0
 8023c82:	da0d      	bge.n	8023ca0 <_ZN5Motor5DriveEff+0x1b0>
 8023c84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023c88:	b29b      	uxth	r3, r3
 8023c8a:	425b      	negs	r3, r3
 8023c8c:	b29b      	uxth	r3, r3
 8023c8e:	b21b      	sxth	r3, r3
 8023c90:	82fb      	strh	r3, [r7, #22]
 8023c92:	2200      	movs	r2, #0
 8023c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023c98:	482e      	ldr	r0, [pc, #184]	; (8023d54 <_ZN5Motor5DriveEff+0x264>)
 8023c9a:	f004 f83f 	bl	8027d1c <HAL_GPIO_WritePin>
 8023c9e:	e009      	b.n	8023cb4 <_ZN5Motor5DriveEff+0x1c4>
    else if(count_l >= 0) FORWARD_L;
 8023ca0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023ca4:	2b00      	cmp	r3, #0
 8023ca6:	db05      	blt.n	8023cb4 <_ZN5Motor5DriveEff+0x1c4>
 8023ca8:	2201      	movs	r2, #1
 8023caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023cae:	4829      	ldr	r0, [pc, #164]	; (8023d54 <_ZN5Motor5DriveEff+0x264>)
 8023cb0:	f004 f834 	bl	8027d1c <HAL_GPIO_WritePin>

    if(count_r < 0) { count_r *= -1; BACKWARD_R; }
 8023cb4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023cb8:	2b00      	cmp	r3, #0
 8023cba:	da0d      	bge.n	8023cd8 <_ZN5Motor5DriveEff+0x1e8>
 8023cbc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023cc0:	b29b      	uxth	r3, r3
 8023cc2:	425b      	negs	r3, r3
 8023cc4:	b29b      	uxth	r3, r3
 8023cc6:	b21b      	sxth	r3, r3
 8023cc8:	82bb      	strh	r3, [r7, #20]
 8023cca:	2201      	movs	r2, #1
 8023ccc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023cd0:	4820      	ldr	r0, [pc, #128]	; (8023d54 <_ZN5Motor5DriveEff+0x264>)
 8023cd2:	f004 f823 	bl	8027d1c <HAL_GPIO_WritePin>
 8023cd6:	e009      	b.n	8023cec <_ZN5Motor5DriveEff+0x1fc>
    else if(count_r >= 0) FORWARD_R;
 8023cd8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023cdc:	2b00      	cmp	r3, #0
 8023cde:	db05      	blt.n	8023cec <_ZN5Motor5DriveEff+0x1fc>
 8023ce0:	2200      	movs	r2, #0
 8023ce2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023ce6:	481b      	ldr	r0, [pc, #108]	; (8023d54 <_ZN5Motor5DriveEff+0x264>)
 8023ce8:	f004 f818 	bl	8027d1c <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, count_l);
 8023cec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023cf0:	4b19      	ldr	r3, [pc, #100]	; (8023d58 <_ZN5Motor5DriveEff+0x268>)
 8023cf2:	681b      	ldr	r3, [r3, #0]
 8023cf4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, count_r);
 8023cf6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8023cfa:	4b17      	ldr	r3, [pc, #92]	; (8023d58 <_ZN5Motor5DriveEff+0x268>)
 8023cfc:	681b      	ldr	r3, [r3, #0]
 8023cfe:	641a      	str	r2, [r3, #64]	; 0x40

#ifdef DEBUG_MODE
    g_motor_compare_l = count_l;  g_motor_compare_r = count_r;
 8023d00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023d04:	4b15      	ldr	r3, [pc, #84]	; (8023d5c <_ZN5Motor5DriveEff+0x26c>)
 8023d06:	801a      	strh	r2, [r3, #0]
 8023d08:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8023d0c:	4b14      	ldr	r3, [pc, #80]	; (8023d60 <_ZN5Motor5DriveEff+0x270>)
 8023d0e:	801a      	strh	r2, [r3, #0]
#endif // DEBUG_MODE
 8023d10:	bf00      	nop
 8023d12:	3728      	adds	r7, #40	; 0x28
 8023d14:	46bd      	mov	sp, r7
 8023d16:	bd80      	pop	{r7, pc}
 8023d18:	cccccccd 	.word	0xcccccccd
 8023d1c:	3feccccc 	.word	0x3feccccc
 8023d20:	cccccccd 	.word	0xcccccccd
 8023d24:	bfeccccc 	.word	0xbfeccccc
 8023d28:	20000288 	.word	0x20000288
 8023d2c:	2000028c 	.word	0x2000028c
 8023d30:	3f666666 	.word	0x3f666666
 8023d34:	bf666666 	.word	0xbf666666
 8023d38:	20000290 	.word	0x20000290
 8023d3c:	20000294 	.word	0x20000294
 8023d40:	20000298 	.word	0x20000298
 8023d44:	bf800000 	.word	0xbf800000
 8023d48:	2000029c 	.word	0x2000029c
 8023d4c:	200002a0 	.word	0x200002a0
 8023d50:	44832000 	.word	0x44832000
 8023d54:	40020000 	.word	0x40020000
 8023d58:	20000a64 	.word	0x20000a64
 8023d5c:	200002a4 	.word	0x200002a4
 8023d60:	200002a6 	.word	0x200002a6

08023d64 <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 8023d64:	b580      	push	{r7, lr}
 8023d66:	b084      	sub	sp, #16
 8023d68:	af00      	add	r7, sp, #0
 8023d6a:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 8023d6c:	2300      	movs	r3, #0
 8023d6e:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 8023d70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8023d74:	4821      	ldr	r0, [pc, #132]	; (8023dfc <_ZN12RotarySwitch5StateEv+0x98>)
 8023d76:	f003 ffb9 	bl	8027cec <HAL_GPIO_ReadPin>
 8023d7a:	4603      	mov	r3, r0
 8023d7c:	2b00      	cmp	r3, #0
 8023d7e:	bf0c      	ite	eq
 8023d80:	2301      	moveq	r3, #1
 8023d82:	2300      	movne	r3, #0
 8023d84:	b2db      	uxtb	r3, r3
 8023d86:	2b00      	cmp	r3, #0
 8023d88:	d003      	beq.n	8023d92 <_ZN12RotarySwitch5StateEv+0x2e>
 8023d8a:	7bfb      	ldrb	r3, [r7, #15]
 8023d8c:	f043 0301 	orr.w	r3, r3, #1
 8023d90:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 8023d92:	2104      	movs	r1, #4
 8023d94:	481a      	ldr	r0, [pc, #104]	; (8023e00 <_ZN12RotarySwitch5StateEv+0x9c>)
 8023d96:	f003 ffa9 	bl	8027cec <HAL_GPIO_ReadPin>
 8023d9a:	4603      	mov	r3, r0
 8023d9c:	2b00      	cmp	r3, #0
 8023d9e:	bf0c      	ite	eq
 8023da0:	2301      	moveq	r3, #1
 8023da2:	2300      	movne	r3, #0
 8023da4:	b2db      	uxtb	r3, r3
 8023da6:	2b00      	cmp	r3, #0
 8023da8:	d003      	beq.n	8023db2 <_ZN12RotarySwitch5StateEv+0x4e>
 8023daa:	7bfb      	ldrb	r3, [r7, #15]
 8023dac:	f043 0302 	orr.w	r3, r3, #2
 8023db0:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 8023db2:	2102      	movs	r1, #2
 8023db4:	4812      	ldr	r0, [pc, #72]	; (8023e00 <_ZN12RotarySwitch5StateEv+0x9c>)
 8023db6:	f003 ff99 	bl	8027cec <HAL_GPIO_ReadPin>
 8023dba:	4603      	mov	r3, r0
 8023dbc:	2b00      	cmp	r3, #0
 8023dbe:	bf0c      	ite	eq
 8023dc0:	2301      	moveq	r3, #1
 8023dc2:	2300      	movne	r3, #0
 8023dc4:	b2db      	uxtb	r3, r3
 8023dc6:	2b00      	cmp	r3, #0
 8023dc8:	d003      	beq.n	8023dd2 <_ZN12RotarySwitch5StateEv+0x6e>
 8023dca:	7bfb      	ldrb	r3, [r7, #15]
 8023dcc:	f043 0304 	orr.w	r3, r3, #4
 8023dd0:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 8023dd2:	2101      	movs	r1, #1
 8023dd4:	480a      	ldr	r0, [pc, #40]	; (8023e00 <_ZN12RotarySwitch5StateEv+0x9c>)
 8023dd6:	f003 ff89 	bl	8027cec <HAL_GPIO_ReadPin>
 8023dda:	4603      	mov	r3, r0
 8023ddc:	2b00      	cmp	r3, #0
 8023dde:	bf0c      	ite	eq
 8023de0:	2301      	moveq	r3, #1
 8023de2:	2300      	movne	r3, #0
 8023de4:	b2db      	uxtb	r3, r3
 8023de6:	2b00      	cmp	r3, #0
 8023de8:	d003      	beq.n	8023df2 <_ZN12RotarySwitch5StateEv+0x8e>
 8023dea:	7bfb      	ldrb	r3, [r7, #15]
 8023dec:	f043 0308 	orr.w	r3, r3, #8
 8023df0:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 8023df2:	7bfb      	ldrb	r3, [r7, #15]
 8023df4:	4618      	mov	r0, r3
 8023df6:	3710      	adds	r7, #16
 8023df8:	46bd      	mov	sp, r7
 8023dfa:	bd80      	pop	{r7, pc}
 8023dfc:	40020000 	.word	0x40020000
 8023e00:	40020400 	.word	0x40020400

08023e04 <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0), write_state_flags_(0), exception_flags_(0), master_count_(0), corner_marker_count_(0), cross_line_count_(0) {}
 8023e04:	b480      	push	{r7}
 8023e06:	b083      	sub	sp, #12
 8023e08:	af00      	add	r7, sp, #0
 8023e0a:	6078      	str	r0, [r7, #4]
 8023e0c:	687b      	ldr	r3, [r7, #4]
 8023e0e:	2200      	movs	r2, #0
 8023e10:	701a      	strb	r2, [r3, #0]
 8023e12:	687b      	ldr	r3, [r7, #4]
 8023e14:	2200      	movs	r2, #0
 8023e16:	705a      	strb	r2, [r3, #1]
 8023e18:	687b      	ldr	r3, [r7, #4]
 8023e1a:	2200      	movs	r2, #0
 8023e1c:	709a      	strb	r2, [r3, #2]
 8023e1e:	687b      	ldr	r3, [r7, #4]
 8023e20:	2200      	movs	r2, #0
 8023e22:	70da      	strb	r2, [r3, #3]
 8023e24:	687b      	ldr	r3, [r7, #4]
 8023e26:	2200      	movs	r2, #0
 8023e28:	711a      	strb	r2, [r3, #4]
 8023e2a:	687b      	ldr	r3, [r7, #4]
 8023e2c:	2200      	movs	r2, #0
 8023e2e:	715a      	strb	r2, [r3, #5]
 8023e30:	687b      	ldr	r3, [r7, #4]
 8023e32:	4618      	mov	r0, r3
 8023e34:	370c      	adds	r7, #12
 8023e36:	46bd      	mov	sp, r7
 8023e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e3c:	4770      	bx	lr
	...

08023e40 <_ZN10SideSensor12SensorUpdateEv>:

void SideSensor::SensorUpdate()
{
 8023e40:	b580      	push	{r7, lr}
 8023e42:	b084      	sub	sp, #16
 8023e44:	af00      	add	r7, sp, #0
 8023e46:	6078      	str	r0, [r7, #4]
    uint8_t io_state = 0xFF; // Lower bits represent the positions of sensors.
 8023e48:	23ff      	movs	r3, #255	; 0xff
 8023e4a:	73fb      	strb	r3, [r7, #15]

    if(IO_OUTSIDE_L == 0) io_state &= 0xF7; // 0111
 8023e4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8023e50:	4849      	ldr	r0, [pc, #292]	; (8023f78 <_ZN10SideSensor12SensorUpdateEv+0x138>)
 8023e52:	f003 ff4b 	bl	8027cec <HAL_GPIO_ReadPin>
 8023e56:	4603      	mov	r3, r0
 8023e58:	2b00      	cmp	r3, #0
 8023e5a:	bf0c      	ite	eq
 8023e5c:	2301      	moveq	r3, #1
 8023e5e:	2300      	movne	r3, #0
 8023e60:	b2db      	uxtb	r3, r3
 8023e62:	2b00      	cmp	r3, #0
 8023e64:	d003      	beq.n	8023e6e <_ZN10SideSensor12SensorUpdateEv+0x2e>
 8023e66:	7bfb      	ldrb	r3, [r7, #15]
 8023e68:	f023 0308 	bic.w	r3, r3, #8
 8023e6c:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_L == 0)  io_state &= 0xFB; // 1011
 8023e6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8023e72:	4841      	ldr	r0, [pc, #260]	; (8023f78 <_ZN10SideSensor12SensorUpdateEv+0x138>)
 8023e74:	f003 ff3a 	bl	8027cec <HAL_GPIO_ReadPin>
 8023e78:	4603      	mov	r3, r0
 8023e7a:	2b00      	cmp	r3, #0
 8023e7c:	bf0c      	ite	eq
 8023e7e:	2301      	moveq	r3, #1
 8023e80:	2300      	movne	r3, #0
 8023e82:	b2db      	uxtb	r3, r3
 8023e84:	2b00      	cmp	r3, #0
 8023e86:	d003      	beq.n	8023e90 <_ZN10SideSensor12SensorUpdateEv+0x50>
 8023e88:	7bfb      	ldrb	r3, [r7, #15]
 8023e8a:	f023 0304 	bic.w	r3, r3, #4
 8023e8e:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_R == 0)  io_state &= 0xFD; // 1101
 8023e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023e94:	4838      	ldr	r0, [pc, #224]	; (8023f78 <_ZN10SideSensor12SensorUpdateEv+0x138>)
 8023e96:	f003 ff29 	bl	8027cec <HAL_GPIO_ReadPin>
 8023e9a:	4603      	mov	r3, r0
 8023e9c:	2b00      	cmp	r3, #0
 8023e9e:	bf0c      	ite	eq
 8023ea0:	2301      	moveq	r3, #1
 8023ea2:	2300      	movne	r3, #0
 8023ea4:	b2db      	uxtb	r3, r3
 8023ea6:	2b00      	cmp	r3, #0
 8023ea8:	d003      	beq.n	8023eb2 <_ZN10SideSensor12SensorUpdateEv+0x72>
 8023eaa:	7bfb      	ldrb	r3, [r7, #15]
 8023eac:	f023 0302 	bic.w	r3, r3, #2
 8023eb0:	73fb      	strb	r3, [r7, #15]
    if(IO_OUTSIDE_R == 0) io_state &= 0xFE; // 1110
 8023eb2:	2104      	movs	r1, #4
 8023eb4:	4831      	ldr	r0, [pc, #196]	; (8023f7c <_ZN10SideSensor12SensorUpdateEv+0x13c>)
 8023eb6:	f003 ff19 	bl	8027cec <HAL_GPIO_ReadPin>
 8023eba:	4603      	mov	r3, r0
 8023ebc:	2b00      	cmp	r3, #0
 8023ebe:	bf0c      	ite	eq
 8023ec0:	2301      	moveq	r3, #1
 8023ec2:	2300      	movne	r3, #0
 8023ec4:	b2db      	uxtb	r3, r3
 8023ec6:	2b00      	cmp	r3, #0
 8023ec8:	d003      	beq.n	8023ed2 <_ZN10SideSensor12SensorUpdateEv+0x92>
 8023eca:	7bfb      	ldrb	r3, [r7, #15]
 8023ecc:	f023 0301 	bic.w	r3, r3, #1
 8023ed0:	73fb      	strb	r3, [r7, #15]

    read_state_flags_ <<= 4;
 8023ed2:	687b      	ldr	r3, [r7, #4]
 8023ed4:	781b      	ldrb	r3, [r3, #0]
 8023ed6:	011b      	lsls	r3, r3, #4
 8023ed8:	b2da      	uxtb	r2, r3
 8023eda:	687b      	ldr	r3, [r7, #4]
 8023edc:	701a      	strb	r2, [r3, #0]

    switch(io_state)
 8023ede:	7bfb      	ldrb	r3, [r7, #15]
 8023ee0:	3bf0      	subs	r3, #240	; 0xf0
 8023ee2:	2b0f      	cmp	r3, #15
 8023ee4:	d842      	bhi.n	8023f6c <_ZN10SideSensor12SensorUpdateEv+0x12c>
 8023ee6:	a201      	add	r2, pc, #4	; (adr r2, 8023eec <_ZN10SideSensor12SensorUpdateEv+0xac>)
 8023ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023eec:	08023f5d 	.word	0x08023f5d
 8023ef0:	08023f5d 	.word	0x08023f5d
 8023ef4:	08023f5d 	.word	0x08023f5d
 8023ef8:	08023f4d 	.word	0x08023f4d
 8023efc:	08023f5d 	.word	0x08023f5d
 8023f00:	08023f6d 	.word	0x08023f6d
 8023f04:	08023f5d 	.word	0x08023f5d
 8023f08:	08023f4d 	.word	0x08023f4d
 8023f0c:	08023f5d 	.word	0x08023f5d
 8023f10:	08023f5d 	.word	0x08023f5d
 8023f14:	08023f6d 	.word	0x08023f6d
 8023f18:	08023f4d 	.word	0x08023f4d
 8023f1c:	08023f3d 	.word	0x08023f3d
 8023f20:	08023f6d 	.word	0x08023f6d
 8023f24:	08023f6d 	.word	0x08023f6d
 8023f28:	08023f2d 	.word	0x08023f2d
    {
        case 0xFF: // 1111
            read_state_flags_ |= 0x08; break;
 8023f2c:	687b      	ldr	r3, [r7, #4]
 8023f2e:	781b      	ldrb	r3, [r3, #0]
 8023f30:	f043 0308 	orr.w	r3, r3, #8
 8023f34:	b2da      	uxtb	r2, r3
 8023f36:	687b      	ldr	r3, [r7, #4]
 8023f38:	701a      	strb	r2, [r3, #0]
 8023f3a:	e018      	b.n	8023f6e <_ZN10SideSensor12SensorUpdateEv+0x12e>
        case 0xFC: // 1100  If through goal, increase pattern.
            read_state_flags_ |= 0x04; break;
 8023f3c:	687b      	ldr	r3, [r7, #4]
 8023f3e:	781b      	ldrb	r3, [r3, #0]
 8023f40:	f043 0304 	orr.w	r3, r3, #4
 8023f44:	b2da      	uxtb	r2, r3
 8023f46:	687b      	ldr	r3, [r7, #4]
 8023f48:	701a      	strb	r2, [r3, #0]
 8023f4a:	e010      	b.n	8023f6e <_ZN10SideSensor12SensorUpdateEv+0x12e>
        case 0xFB: // 1011
        case 0xF7: // 0111
        case 0xF3: // 0011
            read_state_flags_ |= 0x02; break;
 8023f4c:	687b      	ldr	r3, [r7, #4]
 8023f4e:	781b      	ldrb	r3, [r3, #0]
 8023f50:	f043 0302 	orr.w	r3, r3, #2
 8023f54:	b2da      	uxtb	r2, r3
 8023f56:	687b      	ldr	r3, [r7, #4]
 8023f58:	701a      	strb	r2, [r3, #0]
 8023f5a:	e008      	b.n	8023f6e <_ZN10SideSensor12SensorUpdateEv+0x12e>
        case 0xF4: // 0100
        case 0xF0: // 0000
        case 0xF1: // 0001
        case 0xF8: // 1000
        case 0xF9: // 1001
            read_state_flags_ |= 0x01; break;
 8023f5c:	687b      	ldr	r3, [r7, #4]
 8023f5e:	781b      	ldrb	r3, [r3, #0]
 8023f60:	f043 0301 	orr.w	r3, r3, #1
 8023f64:	b2da      	uxtb	r2, r3
 8023f66:	687b      	ldr	r3, [r7, #4]
 8023f68:	701a      	strb	r2, [r3, #0]
 8023f6a:	e000      	b.n	8023f6e <_ZN10SideSensor12SensorUpdateEv+0x12e>
        default: break;
 8023f6c:	bf00      	nop
    }
}
 8023f6e:	bf00      	nop
 8023f70:	3710      	adds	r7, #16
 8023f72:	46bd      	mov	sp, r7
 8023f74:	bd80      	pop	{r7, pc}
 8023f76:	bf00      	nop
 8023f78:	40020400 	.word	0x40020400
 8023f7c:	40020c00 	.word	0x40020c00

08023f80 <_ZN10SideSensor14IgnoreJudgmentEv>:

void SideSensor::IgnoreJudgment()
{
 8023f80:	b580      	push	{r7, lr}
 8023f82:	b084      	sub	sp, #16
 8023f84:	af00      	add	r7, sp, #0
 8023f86:	6078      	str	r0, [r7, #4]
    uint8_t ignore_flag = exception_flags_ & 0x01;
 8023f88:	687b      	ldr	r3, [r7, #4]
 8023f8a:	789b      	ldrb	r3, [r3, #2]
 8023f8c:	f003 0301 	and.w	r3, r3, #1
 8023f90:	73fb      	strb	r3, [r7, #15]

#ifdef DEBUG_MODE
    g_ignore_flag = ignore_flag;
 8023f92:	4a22      	ldr	r2, [pc, #136]	; (802401c <_ZN10SideSensor14IgnoreJudgmentEv+0x9c>)
 8023f94:	7bfb      	ldrb	r3, [r7, #15]
 8023f96:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(ignore_flag == 0x01)
 8023f98:	7bfb      	ldrb	r3, [r7, #15]
 8023f9a:	2b01      	cmp	r3, #1
 8023f9c:	d111      	bne.n	8023fc2 <_ZN10SideSensor14IgnoreJudgmentEv+0x42>
    {
        if(master_count_ < IGNORE_COUNT) master_count_++;
 8023f9e:	687b      	ldr	r3, [r7, #4]
 8023fa0:	78db      	ldrb	r3, [r3, #3]
 8023fa2:	2b04      	cmp	r3, #4
 8023fa4:	d806      	bhi.n	8023fb4 <_ZN10SideSensor14IgnoreJudgmentEv+0x34>
 8023fa6:	687b      	ldr	r3, [r7, #4]
 8023fa8:	78db      	ldrb	r3, [r3, #3]
 8023faa:	3301      	adds	r3, #1
 8023fac:	b2da      	uxtb	r2, r3
 8023fae:	687b      	ldr	r3, [r7, #4]
 8023fb0:	70da      	strb	r2, [r3, #3]
        {
            exception_flags_ &= 0xF3;
            CountUp();
        }
    }
}
 8023fb2:	e02e      	b.n	8024012 <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
        else exception_flags_ >>= 1; 
 8023fb4:	687b      	ldr	r3, [r7, #4]
 8023fb6:	789b      	ldrb	r3, [r3, #2]
 8023fb8:	105b      	asrs	r3, r3, #1
 8023fba:	b2da      	uxtb	r2, r3
 8023fbc:	687b      	ldr	r3, [r7, #4]
 8023fbe:	709a      	strb	r2, [r3, #2]
}
 8023fc0:	e027      	b.n	8024012 <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
    else if(ignore_flag == 0x00)
 8023fc2:	7bfb      	ldrb	r3, [r7, #15]
 8023fc4:	2b00      	cmp	r3, #0
 8023fc6:	d124      	bne.n	8024012 <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
        SensorUpdate();
 8023fc8:	6878      	ldr	r0, [r7, #4]
 8023fca:	f7ff ff39 	bl	8023e40 <_ZN10SideSensor12SensorUpdateEv>
        uint8_t now_state = read_state_flags_;
 8023fce:	687b      	ldr	r3, [r7, #4]
 8023fd0:	781b      	ldrb	r3, [r3, #0]
 8023fd2:	73bb      	strb	r3, [r7, #14]
        uint8_t pre_state = (now_state << 4) | (now_state >> 4);
 8023fd4:	7bbb      	ldrb	r3, [r7, #14]
 8023fd6:	011b      	lsls	r3, r3, #4
 8023fd8:	b25a      	sxtb	r2, r3
 8023fda:	7bbb      	ldrb	r3, [r7, #14]
 8023fdc:	111b      	asrs	r3, r3, #4
 8023fde:	b25b      	sxtb	r3, r3
 8023fe0:	4313      	orrs	r3, r2
 8023fe2:	b25b      	sxtb	r3, r3
 8023fe4:	737b      	strb	r3, [r7, #13]
        if(pre_state != now_state)
 8023fe6:	7b7a      	ldrb	r2, [r7, #13]
 8023fe8:	7bbb      	ldrb	r3, [r7, #14]
 8023fea:	429a      	cmp	r2, r3
 8023fec:	d003      	beq.n	8023ff6 <_ZN10SideSensor14IgnoreJudgmentEv+0x76>
            NoiseTolerance();
 8023fee:	6878      	ldr	r0, [r7, #4]
 8023ff0:	f000 f816 	bl	8024020 <_ZN10SideSensor14NoiseToleranceEv>
}
 8023ff4:	e00d      	b.n	8024012 <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
        else if(pre_state == now_state)
 8023ff6:	7b7a      	ldrb	r2, [r7, #13]
 8023ff8:	7bbb      	ldrb	r3, [r7, #14]
 8023ffa:	429a      	cmp	r2, r3
 8023ffc:	d109      	bne.n	8024012 <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
            exception_flags_ &= 0xF3;
 8023ffe:	687b      	ldr	r3, [r7, #4]
 8024000:	789b      	ldrb	r3, [r3, #2]
 8024002:	f023 030c 	bic.w	r3, r3, #12
 8024006:	b2da      	uxtb	r2, r3
 8024008:	687b      	ldr	r3, [r7, #4]
 802400a:	709a      	strb	r2, [r3, #2]
            CountUp();
 802400c:	6878      	ldr	r0, [r7, #4]
 802400e:	f000 f855 	bl	80240bc <_ZN10SideSensor7CountUpEv>
}
 8024012:	bf00      	nop
 8024014:	3710      	adds	r7, #16
 8024016:	46bd      	mov	sp, r7
 8024018:	bd80      	pop	{r7, pc}
 802401a:	bf00      	nop
 802401c:	20000250 	.word	0x20000250

08024020 <_ZN10SideSensor14NoiseToleranceEv>:

void SideSensor::NoiseTolerance()
{
 8024020:	b580      	push	{r7, lr}
 8024022:	b084      	sub	sp, #16
 8024024:	af00      	add	r7, sp, #0
 8024026:	6078      	str	r0, [r7, #4]
    uint8_t noise_count = (exception_flags_ & 0x0C) >> 2;
 8024028:	687b      	ldr	r3, [r7, #4]
 802402a:	789b      	ldrb	r3, [r3, #2]
 802402c:	109b      	asrs	r3, r3, #2
 802402e:	b2db      	uxtb	r3, r3
 8024030:	f003 0303 	and.w	r3, r3, #3
 8024034:	73fb      	strb	r3, [r7, #15]

    if(noise_count == 0x00)
 8024036:	7bfb      	ldrb	r3, [r7, #15]
 8024038:	2b00      	cmp	r3, #0
 802403a:	d11f      	bne.n	802407c <_ZN10SideSensor14NoiseToleranceEv+0x5c>
    {
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ & 0xF0);
 802403c:	687b      	ldr	r3, [r7, #4]
 802403e:	789b      	ldrb	r3, [r3, #2]
 8024040:	f003 030f 	and.w	r3, r3, #15
 8024044:	b2da      	uxtb	r2, r3
 8024046:	687b      	ldr	r3, [r7, #4]
 8024048:	781b      	ldrb	r3, [r3, #0]
 802404a:	f023 030f 	bic.w	r3, r3, #15
 802404e:	b2db      	uxtb	r3, r3
 8024050:	4313      	orrs	r3, r2
 8024052:	b2da      	uxtb	r2, r3
 8024054:	687b      	ldr	r3, [r7, #4]
 8024056:	709a      	strb	r2, [r3, #2]
        noise_count++;
 8024058:	7bfb      	ldrb	r3, [r7, #15]
 802405a:	3301      	adds	r3, #1
 802405c:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 802405e:	687b      	ldr	r3, [r7, #4]
 8024060:	789b      	ldrb	r3, [r3, #2]
 8024062:	b25b      	sxtb	r3, r3
 8024064:	f023 030c 	bic.w	r3, r3, #12
 8024068:	b25a      	sxtb	r2, r3
 802406a:	7bfb      	ldrb	r3, [r7, #15]
 802406c:	009b      	lsls	r3, r3, #2
 802406e:	b25b      	sxtb	r3, r3
 8024070:	4313      	orrs	r3, r2
 8024072:	b25b      	sxtb	r3, r3
 8024074:	b2da      	uxtb	r2, r3
 8024076:	687b      	ldr	r3, [r7, #4]
 8024078:	709a      	strb	r2, [r3, #2]
        noise_count++;
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
        CountUp();
    }
    else master_count_ = 0;
}
 802407a:	e01a      	b.n	80240b2 <_ZN10SideSensor14NoiseToleranceEv+0x92>
    else if(noise_count == 0x01)
 802407c:	7bfb      	ldrb	r3, [r7, #15]
 802407e:	2b01      	cmp	r3, #1
 8024080:	d114      	bne.n	80240ac <_ZN10SideSensor14NoiseToleranceEv+0x8c>
        noise_count++;
 8024082:	7bfb      	ldrb	r3, [r7, #15]
 8024084:	3301      	adds	r3, #1
 8024086:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8024088:	687b      	ldr	r3, [r7, #4]
 802408a:	789b      	ldrb	r3, [r3, #2]
 802408c:	b25b      	sxtb	r3, r3
 802408e:	f023 030c 	bic.w	r3, r3, #12
 8024092:	b25a      	sxtb	r2, r3
 8024094:	7bfb      	ldrb	r3, [r7, #15]
 8024096:	009b      	lsls	r3, r3, #2
 8024098:	b25b      	sxtb	r3, r3
 802409a:	4313      	orrs	r3, r2
 802409c:	b25b      	sxtb	r3, r3
 802409e:	b2da      	uxtb	r2, r3
 80240a0:	687b      	ldr	r3, [r7, #4]
 80240a2:	709a      	strb	r2, [r3, #2]
        CountUp();
 80240a4:	6878      	ldr	r0, [r7, #4]
 80240a6:	f000 f809 	bl	80240bc <_ZN10SideSensor7CountUpEv>
}
 80240aa:	e002      	b.n	80240b2 <_ZN10SideSensor14NoiseToleranceEv+0x92>
    else master_count_ = 0;
 80240ac:	687b      	ldr	r3, [r7, #4]
 80240ae:	2200      	movs	r2, #0
 80240b0:	70da      	strb	r2, [r3, #3]
}
 80240b2:	bf00      	nop
 80240b4:	3710      	adds	r7, #16
 80240b6:	46bd      	mov	sp, r7
 80240b8:	bd80      	pop	{r7, pc}
	...

080240bc <_ZN10SideSensor7CountUpEv>:

void SideSensor::CountUp()
{
 80240bc:	b480      	push	{r7}
 80240be:	b087      	sub	sp, #28
 80240c0:	af00      	add	r7, sp, #0
 80240c2:	6078      	str	r0, [r7, #4]
    uint8_t pre_noise_state = exception_flags_ >> 4;
 80240c4:	687b      	ldr	r3, [r7, #4]
 80240c6:	789b      	ldrb	r3, [r3, #2]
 80240c8:	111b      	asrs	r3, r3, #4
 80240ca:	75fb      	strb	r3, [r7, #23]
    uint8_t current_state   = read_state_flags_ & 0x0F;
 80240cc:	687b      	ldr	r3, [r7, #4]
 80240ce:	781b      	ldrb	r3, [r3, #0]
 80240d0:	f003 030f 	and.w	r3, r3, #15
 80240d4:	75bb      	strb	r3, [r7, #22]

    if(pre_noise_state != current_state)
 80240d6:	7dfa      	ldrb	r2, [r7, #23]
 80240d8:	7dbb      	ldrb	r3, [r7, #22]
 80240da:	429a      	cmp	r2, r3
 80240dc:	d012      	beq.n	8024104 <_ZN10SideSensor7CountUpEv+0x48>
    {
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ << 4);
 80240de:	687b      	ldr	r3, [r7, #4]
 80240e0:	789b      	ldrb	r3, [r3, #2]
 80240e2:	b25b      	sxtb	r3, r3
 80240e4:	f003 030f 	and.w	r3, r3, #15
 80240e8:	b25a      	sxtb	r2, r3
 80240ea:	687b      	ldr	r3, [r7, #4]
 80240ec:	781b      	ldrb	r3, [r3, #0]
 80240ee:	011b      	lsls	r3, r3, #4
 80240f0:	b25b      	sxtb	r3, r3
 80240f2:	4313      	orrs	r3, r2
 80240f4:	b25b      	sxtb	r3, r3
 80240f6:	b2da      	uxtb	r2, r3
 80240f8:	687b      	ldr	r3, [r7, #4]
 80240fa:	709a      	strb	r2, [r3, #2]
        master_count_ = 0;
 80240fc:	687b      	ldr	r3, [r7, #4]
 80240fe:	2200      	movs	r2, #0
 8024100:	70da      	strb	r2, [r3, #3]
 8024102:	e009      	b.n	8024118 <_ZN10SideSensor7CountUpEv+0x5c>
    }
    else if(master_count_ < MAX_INTERRUPT_COUNT) master_count_++;
 8024104:	687b      	ldr	r3, [r7, #4]
 8024106:	78db      	ldrb	r3, [r3, #3]
 8024108:	2bf9      	cmp	r3, #249	; 0xf9
 802410a:	d805      	bhi.n	8024118 <_ZN10SideSensor7CountUpEv+0x5c>
 802410c:	687b      	ldr	r3, [r7, #4]
 802410e:	78db      	ldrb	r3, [r3, #3]
 8024110:	3301      	adds	r3, #1
 8024112:	b2da      	uxtb	r2, r3
 8024114:	687b      	ldr	r3, [r7, #4]
 8024116:	70da      	strb	r2, [r3, #3]

#ifdef DEBUG_MODE
    g_pre_noise_state_cntup = pre_noise_state;
 8024118:	4a9a      	ldr	r2, [pc, #616]	; (8024384 <_ZN10SideSensor7CountUpEv+0x2c8>)
 802411a:	7dfb      	ldrb	r3, [r7, #23]
 802411c:	7013      	strb	r3, [r2, #0]
    g_current_state_cntup   = current_state;
 802411e:	4a9a      	ldr	r2, [pc, #616]	; (8024388 <_ZN10SideSensor7CountUpEv+0x2cc>)
 8024120:	7dbb      	ldrb	r3, [r7, #22]
 8024122:	7013      	strb	r3, [r2, #0]
    g_exception_flags_cntup = exception_flags_;
 8024124:	687b      	ldr	r3, [r7, #4]
 8024126:	789a      	ldrb	r2, [r3, #2]
 8024128:	4b98      	ldr	r3, [pc, #608]	; (802438c <_ZN10SideSensor7CountUpEv+0x2d0>)
 802412a:	701a      	strb	r2, [r3, #0]
    g_master_count_cntup    = master_count_;
 802412c:	687b      	ldr	r3, [r7, #4]
 802412e:	78da      	ldrb	r2, [r3, #3]
 8024130:	4b97      	ldr	r3, [pc, #604]	; (8024390 <_ZN10SideSensor7CountUpEv+0x2d4>)
 8024132:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

    if(current_state == 0x08 && master_count_ >= BLACK_BLACK_COUNT)
 8024134:	7dbb      	ldrb	r3, [r7, #22]
 8024136:	2b08      	cmp	r3, #8
 8024138:	d10e      	bne.n	8024158 <_ZN10SideSensor7CountUpEv+0x9c>
 802413a:	687b      	ldr	r3, [r7, #4]
 802413c:	78db      	ldrb	r3, [r3, #3]
 802413e:	2b01      	cmp	r3, #1
 8024140:	d90a      	bls.n	8024158 <_ZN10SideSensor7CountUpEv+0x9c>
    {
        write_state_flags_ = (write_state_flags_ & 0xF0) | 0x08;
 8024142:	687b      	ldr	r3, [r7, #4]
 8024144:	785b      	ldrb	r3, [r3, #1]
 8024146:	f023 030f 	bic.w	r3, r3, #15
 802414a:	b2db      	uxtb	r3, r3
 802414c:	f043 0308 	orr.w	r3, r3, #8
 8024150:	b2da      	uxtb	r2, r3
 8024152:	687b      	ldr	r3, [r7, #4]
 8024154:	705a      	strb	r2, [r3, #1]
 8024156:	e037      	b.n	80241c8 <_ZN10SideSensor7CountUpEv+0x10c>
    }
    else if(current_state == 0x04 && master_count_ >= BLACK_WHITE_COUNT)
 8024158:	7dbb      	ldrb	r3, [r7, #22]
 802415a:	2b04      	cmp	r3, #4
 802415c:	d10b      	bne.n	8024176 <_ZN10SideSensor7CountUpEv+0xba>
 802415e:	687b      	ldr	r3, [r7, #4]
 8024160:	78db      	ldrb	r3, [r3, #3]
 8024162:	2b00      	cmp	r3, #0
 8024164:	d007      	beq.n	8024176 <_ZN10SideSensor7CountUpEv+0xba>
    {
        write_state_flags_ |= 0x04;
 8024166:	687b      	ldr	r3, [r7, #4]
 8024168:	785b      	ldrb	r3, [r3, #1]
 802416a:	f043 0304 	orr.w	r3, r3, #4
 802416e:	b2da      	uxtb	r2, r3
 8024170:	687b      	ldr	r3, [r7, #4]
 8024172:	705a      	strb	r2, [r3, #1]
 8024174:	e028      	b.n	80241c8 <_ZN10SideSensor7CountUpEv+0x10c>
    }
    else if(current_state == 0x02 && master_count_ >= WHITE_BLACK_COUNT)
 8024176:	7dbb      	ldrb	r3, [r7, #22]
 8024178:	2b02      	cmp	r3, #2
 802417a:	d10b      	bne.n	8024194 <_ZN10SideSensor7CountUpEv+0xd8>
 802417c:	687b      	ldr	r3, [r7, #4]
 802417e:	78db      	ldrb	r3, [r3, #3]
 8024180:	2b00      	cmp	r3, #0
 8024182:	d007      	beq.n	8024194 <_ZN10SideSensor7CountUpEv+0xd8>
    {
        write_state_flags_ |= 0x02;
 8024184:	687b      	ldr	r3, [r7, #4]
 8024186:	785b      	ldrb	r3, [r3, #1]
 8024188:	f043 0302 	orr.w	r3, r3, #2
 802418c:	b2da      	uxtb	r2, r3
 802418e:	687b      	ldr	r3, [r7, #4]
 8024190:	705a      	strb	r2, [r3, #1]
 8024192:	e019      	b.n	80241c8 <_ZN10SideSensor7CountUpEv+0x10c>
    }
    else if(current_state == 0x01 && master_count_ >= WHITE_WHITE_COUNT)
 8024194:	7dbb      	ldrb	r3, [r7, #22]
 8024196:	2b01      	cmp	r3, #1
 8024198:	d116      	bne.n	80241c8 <_ZN10SideSensor7CountUpEv+0x10c>
    {
        write_state_flags_ = (write_state_flags_ & 0xC0) | 0x01;
 802419a:	687b      	ldr	r3, [r7, #4]
 802419c:	785b      	ldrb	r3, [r3, #1]
 802419e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80241a2:	b2db      	uxtb	r3, r3
 80241a4:	f043 0301 	orr.w	r3, r3, #1
 80241a8:	b2da      	uxtb	r2, r3
 80241aa:	687b      	ldr	r3, [r7, #4]
 80241ac:	705a      	strb	r2, [r3, #1]
        exception_flags_ = (exception_flags_ << 8) | 0x01;
 80241ae:	687b      	ldr	r3, [r7, #4]
 80241b0:	789b      	ldrb	r3, [r3, #2]
 80241b2:	021b      	lsls	r3, r3, #8
 80241b4:	b25b      	sxtb	r3, r3
 80241b6:	f043 0301 	orr.w	r3, r3, #1
 80241ba:	b25b      	sxtb	r3, r3
 80241bc:	b2da      	uxtb	r2, r3
 80241be:	687b      	ldr	r3, [r7, #4]
 80241c0:	709a      	strb	r2, [r3, #2]
        master_count_ = 0;
 80241c2:	687b      	ldr	r3, [r7, #4]
 80241c4:	2200      	movs	r2, #0
 80241c6:	70da      	strb	r2, [r3, #3]
    }

    uint8_t black_flag   = write_state_flags_ & 0x08;
 80241c8:	687b      	ldr	r3, [r7, #4]
 80241ca:	785b      	ldrb	r3, [r3, #1]
 80241cc:	f003 0308 	and.w	r3, r3, #8
 80241d0:	757b      	strb	r3, [r7, #21]
    uint8_t goal_flag    = write_state_flags_ & 0x04;
 80241d2:	687b      	ldr	r3, [r7, #4]
 80241d4:	785b      	ldrb	r3, [r3, #1]
 80241d6:	f003 0304 	and.w	r3, r3, #4
 80241da:	753b      	strb	r3, [r7, #20]
    uint8_t goal_reach   = write_state_flags_ & 0x20;
 80241dc:	687b      	ldr	r3, [r7, #4]
 80241de:	785b      	ldrb	r3, [r3, #1]
 80241e0:	f003 0320 	and.w	r3, r3, #32
 80241e4:	74fb      	strb	r3, [r7, #19]
    uint8_t goal_count   = (write_state_flags_ & 0xC0) >> 6;
 80241e6:	687b      	ldr	r3, [r7, #4]
 80241e8:	785b      	ldrb	r3, [r3, #1]
 80241ea:	099b      	lsrs	r3, r3, #6
 80241ec:	74bb      	strb	r3, [r7, #18]
    uint8_t corner_flag  = write_state_flags_ & 0x02;
 80241ee:	687b      	ldr	r3, [r7, #4]
 80241f0:	785b      	ldrb	r3, [r3, #1]
 80241f2:	f003 0302 	and.w	r3, r3, #2
 80241f6:	747b      	strb	r3, [r7, #17]
    uint8_t corner_reach = write_state_flags_ & 0x10;
 80241f8:	687b      	ldr	r3, [r7, #4]
 80241fa:	785b      	ldrb	r3, [r3, #1]
 80241fc:	f003 0310 	and.w	r3, r3, #16
 8024200:	743b      	strb	r3, [r7, #16]
    uint8_t cross_flag   = write_state_flags_ & 0x01;
 8024202:	687b      	ldr	r3, [r7, #4]
 8024204:	785b      	ldrb	r3, [r3, #1]
 8024206:	f003 0301 	and.w	r3, r3, #1
 802420a:	73fb      	strb	r3, [r7, #15]

#ifdef DEBUG_MODE
    g_exception_flags_cross = exception_flags_;
 802420c:	687b      	ldr	r3, [r7, #4]
 802420e:	789a      	ldrb	r2, [r3, #2]
 8024210:	4b60      	ldr	r3, [pc, #384]	; (8024394 <_ZN10SideSensor7CountUpEv+0x2d8>)
 8024212:	701a      	strb	r2, [r3, #0]
    g_master_count_cross    = master_count_;
 8024214:	687b      	ldr	r3, [r7, #4]
 8024216:	78da      	ldrb	r2, [r3, #3]
 8024218:	4b5f      	ldr	r3, [pc, #380]	; (8024398 <_ZN10SideSensor7CountUpEv+0x2dc>)
 802421a:	701a      	strb	r2, [r3, #0]
    g_write_state_cntup  = write_state_flags_;
 802421c:	687b      	ldr	r3, [r7, #4]
 802421e:	785a      	ldrb	r2, [r3, #1]
 8024220:	4b5e      	ldr	r3, [pc, #376]	; (802439c <_ZN10SideSensor7CountUpEv+0x2e0>)
 8024222:	701a      	strb	r2, [r3, #0]
    g_goal_reach_cntup   = goal_reach   >> 5;
 8024224:	7cfb      	ldrb	r3, [r7, #19]
 8024226:	115b      	asrs	r3, r3, #5
 8024228:	b2da      	uxtb	r2, r3
 802422a:	4b5d      	ldr	r3, [pc, #372]	; (80243a0 <_ZN10SideSensor7CountUpEv+0x2e4>)
 802422c:	701a      	strb	r2, [r3, #0]
    g_corner_reach_cntup = corner_reach >> 4;
 802422e:	7c3b      	ldrb	r3, [r7, #16]
 8024230:	111b      	asrs	r3, r3, #4
 8024232:	b2da      	uxtb	r2, r3
 8024234:	4b5b      	ldr	r3, [pc, #364]	; (80243a4 <_ZN10SideSensor7CountUpEv+0x2e8>)
 8024236:	701a      	strb	r2, [r3, #0]
    g_black_flag_cntup   = black_flag   >> 3;
 8024238:	7d7b      	ldrb	r3, [r7, #21]
 802423a:	10db      	asrs	r3, r3, #3
 802423c:	b2da      	uxtb	r2, r3
 802423e:	4b5a      	ldr	r3, [pc, #360]	; (80243a8 <_ZN10SideSensor7CountUpEv+0x2ec>)
 8024240:	701a      	strb	r2, [r3, #0]
    g_goal_flag_cntup    = goal_flag    >> 2;
 8024242:	7d3b      	ldrb	r3, [r7, #20]
 8024244:	109b      	asrs	r3, r3, #2
 8024246:	b2da      	uxtb	r2, r3
 8024248:	4b58      	ldr	r3, [pc, #352]	; (80243ac <_ZN10SideSensor7CountUpEv+0x2f0>)
 802424a:	701a      	strb	r2, [r3, #0]
    g_corner_flag_cntup  = corner_flag  >> 1;
 802424c:	7c7b      	ldrb	r3, [r7, #17]
 802424e:	105b      	asrs	r3, r3, #1
 8024250:	b2da      	uxtb	r2, r3
 8024252:	4b57      	ldr	r3, [pc, #348]	; (80243b0 <_ZN10SideSensor7CountUpEv+0x2f4>)
 8024254:	701a      	strb	r2, [r3, #0]
    g_cross_flag_cntup   = cross_flag;  // LSB
 8024256:	4a57      	ldr	r2, [pc, #348]	; (80243b4 <_ZN10SideSensor7CountUpEv+0x2f8>)
 8024258:	7bfb      	ldrb	r3, [r7, #15]
 802425a:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
    
    if(goal_flag == 0x04 && black_flag == 0x08)
 802425c:	7d3b      	ldrb	r3, [r7, #20]
 802425e:	2b04      	cmp	r3, #4
 8024260:	d111      	bne.n	8024286 <_ZN10SideSensor7CountUpEv+0x1ca>
 8024262:	7d7b      	ldrb	r3, [r7, #21]
 8024264:	2b08      	cmp	r3, #8
 8024266:	d10e      	bne.n	8024286 <_ZN10SideSensor7CountUpEv+0x1ca>
    {
        write_state_flags_ &= 0xF7;
 8024268:	687b      	ldr	r3, [r7, #4]
 802426a:	785b      	ldrb	r3, [r3, #1]
 802426c:	f023 0308 	bic.w	r3, r3, #8
 8024270:	b2da      	uxtb	r2, r3
 8024272:	687b      	ldr	r3, [r7, #4]
 8024274:	705a      	strb	r2, [r3, #1]
        write_state_flags_ |= 0x20;
 8024276:	687b      	ldr	r3, [r7, #4]
 8024278:	785b      	ldrb	r3, [r3, #1]
 802427a:	f043 0320 	orr.w	r3, r3, #32
 802427e:	b2da      	uxtb	r2, r3
 8024280:	687b      	ldr	r3, [r7, #4]
 8024282:	705a      	strb	r2, [r3, #1]
 8024284:	e057      	b.n	8024336 <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(goal_reach == 0x20 && black_flag == 0x08)
 8024286:	7cfb      	ldrb	r3, [r7, #19]
 8024288:	2b20      	cmp	r3, #32
 802428a:	d11b      	bne.n	80242c4 <_ZN10SideSensor7CountUpEv+0x208>
 802428c:	7d7b      	ldrb	r3, [r7, #21]
 802428e:	2b08      	cmp	r3, #8
 8024290:	d118      	bne.n	80242c4 <_ZN10SideSensor7CountUpEv+0x208>
    {
        write_state_flags_ &= 0xDF;
 8024292:	687b      	ldr	r3, [r7, #4]
 8024294:	785b      	ldrb	r3, [r3, #1]
 8024296:	f023 0320 	bic.w	r3, r3, #32
 802429a:	b2da      	uxtb	r2, r3
 802429c:	687b      	ldr	r3, [r7, #4]
 802429e:	705a      	strb	r2, [r3, #1]
        goal_count++;
 80242a0:	7cbb      	ldrb	r3, [r7, #18]
 80242a2:	3301      	adds	r3, #1
 80242a4:	74bb      	strb	r3, [r7, #18]
        write_state_flags_ = (write_state_flags_ & 0x3F) | (goal_count << 6);
 80242a6:	687b      	ldr	r3, [r7, #4]
 80242a8:	785b      	ldrb	r3, [r3, #1]
 80242aa:	b25b      	sxtb	r3, r3
 80242ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80242b0:	b25a      	sxtb	r2, r3
 80242b2:	7cbb      	ldrb	r3, [r7, #18]
 80242b4:	019b      	lsls	r3, r3, #6
 80242b6:	b25b      	sxtb	r3, r3
 80242b8:	4313      	orrs	r3, r2
 80242ba:	b25b      	sxtb	r3, r3
 80242bc:	b2da      	uxtb	r2, r3
 80242be:	687b      	ldr	r3, [r7, #4]
 80242c0:	705a      	strb	r2, [r3, #1]
 80242c2:	e038      	b.n	8024336 <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(corner_flag == 0x02 && black_flag == 0x08)
 80242c4:	7c7b      	ldrb	r3, [r7, #17]
 80242c6:	2b02      	cmp	r3, #2
 80242c8:	d111      	bne.n	80242ee <_ZN10SideSensor7CountUpEv+0x232>
 80242ca:	7d7b      	ldrb	r3, [r7, #21]
 80242cc:	2b08      	cmp	r3, #8
 80242ce:	d10e      	bne.n	80242ee <_ZN10SideSensor7CountUpEv+0x232>
    {
        write_state_flags_ &= 0xF7;
 80242d0:	687b      	ldr	r3, [r7, #4]
 80242d2:	785b      	ldrb	r3, [r3, #1]
 80242d4:	f023 0308 	bic.w	r3, r3, #8
 80242d8:	b2da      	uxtb	r2, r3
 80242da:	687b      	ldr	r3, [r7, #4]
 80242dc:	705a      	strb	r2, [r3, #1]
        write_state_flags_ |= 0x10;
 80242de:	687b      	ldr	r3, [r7, #4]
 80242e0:	785b      	ldrb	r3, [r3, #1]
 80242e2:	f043 0310 	orr.w	r3, r3, #16
 80242e6:	b2da      	uxtb	r2, r3
 80242e8:	687b      	ldr	r3, [r7, #4]
 80242ea:	705a      	strb	r2, [r3, #1]
 80242ec:	e023      	b.n	8024336 <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(corner_reach == 0x10 && black_flag == 0x08)
 80242ee:	7c3b      	ldrb	r3, [r7, #16]
 80242f0:	2b10      	cmp	r3, #16
 80242f2:	d110      	bne.n	8024316 <_ZN10SideSensor7CountUpEv+0x25a>
 80242f4:	7d7b      	ldrb	r3, [r7, #21]
 80242f6:	2b08      	cmp	r3, #8
 80242f8:	d10d      	bne.n	8024316 <_ZN10SideSensor7CountUpEv+0x25a>
    {
        write_state_flags_ &= 0xEF;
 80242fa:	687b      	ldr	r3, [r7, #4]
 80242fc:	785b      	ldrb	r3, [r3, #1]
 80242fe:	f023 0310 	bic.w	r3, r3, #16
 8024302:	b2da      	uxtb	r2, r3
 8024304:	687b      	ldr	r3, [r7, #4]
 8024306:	705a      	strb	r2, [r3, #1]
        corner_marker_count_++;
 8024308:	687b      	ldr	r3, [r7, #4]
 802430a:	791b      	ldrb	r3, [r3, #4]
 802430c:	3301      	adds	r3, #1
 802430e:	b2da      	uxtb	r2, r3
 8024310:	687b      	ldr	r3, [r7, #4]
 8024312:	711a      	strb	r2, [r3, #4]
 8024314:	e00f      	b.n	8024336 <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(cross_flag == 0x01)
 8024316:	7bfb      	ldrb	r3, [r7, #15]
 8024318:	2b01      	cmp	r3, #1
 802431a:	d10c      	bne.n	8024336 <_ZN10SideSensor7CountUpEv+0x27a>
    {
        write_state_flags_ &= 0xFE;
 802431c:	687b      	ldr	r3, [r7, #4]
 802431e:	785b      	ldrb	r3, [r3, #1]
 8024320:	f023 0301 	bic.w	r3, r3, #1
 8024324:	b2da      	uxtb	r2, r3
 8024326:	687b      	ldr	r3, [r7, #4]
 8024328:	705a      	strb	r2, [r3, #1]
        cross_line_count_++;
 802432a:	687b      	ldr	r3, [r7, #4]
 802432c:	795b      	ldrb	r3, [r3, #5]
 802432e:	3301      	adds	r3, #1
 8024330:	b2da      	uxtb	r2, r3
 8024332:	687b      	ldr	r3, [r7, #4]
 8024334:	715a      	strb	r2, [r3, #5]
    }

#ifdef DEBUG_MODE
    g_write_state_cntup_2  = write_state_flags_;
 8024336:	687b      	ldr	r3, [r7, #4]
 8024338:	785a      	ldrb	r2, [r3, #1]
 802433a:	4b1f      	ldr	r3, [pc, #124]	; (80243b8 <_ZN10SideSensor7CountUpEv+0x2fc>)
 802433c:	701a      	strb	r2, [r3, #0]
    g_goal_reach_cntup_2   = goal_reach   >> 5;
 802433e:	7cfb      	ldrb	r3, [r7, #19]
 8024340:	115b      	asrs	r3, r3, #5
 8024342:	b2da      	uxtb	r2, r3
 8024344:	4b1d      	ldr	r3, [pc, #116]	; (80243bc <_ZN10SideSensor7CountUpEv+0x300>)
 8024346:	701a      	strb	r2, [r3, #0]
    g_corner_reach_cntup_2 = corner_reach >> 4;
 8024348:	7c3b      	ldrb	r3, [r7, #16]
 802434a:	111b      	asrs	r3, r3, #4
 802434c:	b2da      	uxtb	r2, r3
 802434e:	4b1c      	ldr	r3, [pc, #112]	; (80243c0 <_ZN10SideSensor7CountUpEv+0x304>)
 8024350:	701a      	strb	r2, [r3, #0]
    g_black_flag_cntup_2   = black_flag   >> 3;
 8024352:	7d7b      	ldrb	r3, [r7, #21]
 8024354:	10db      	asrs	r3, r3, #3
 8024356:	b2da      	uxtb	r2, r3
 8024358:	4b1a      	ldr	r3, [pc, #104]	; (80243c4 <_ZN10SideSensor7CountUpEv+0x308>)
 802435a:	701a      	strb	r2, [r3, #0]
    g_goal_flag_cntup_2    = goal_flag    >> 2;
 802435c:	7d3b      	ldrb	r3, [r7, #20]
 802435e:	109b      	asrs	r3, r3, #2
 8024360:	b2da      	uxtb	r2, r3
 8024362:	4b19      	ldr	r3, [pc, #100]	; (80243c8 <_ZN10SideSensor7CountUpEv+0x30c>)
 8024364:	701a      	strb	r2, [r3, #0]
    g_corner_flag_cntup_2  = corner_flag  >> 1;
 8024366:	7c7b      	ldrb	r3, [r7, #17]
 8024368:	105b      	asrs	r3, r3, #1
 802436a:	b2da      	uxtb	r2, r3
 802436c:	4b17      	ldr	r3, [pc, #92]	; (80243cc <_ZN10SideSensor7CountUpEv+0x310>)
 802436e:	701a      	strb	r2, [r3, #0]
    g_cross_flag_cntup_2   = cross_flag;  // LSB
 8024370:	4a17      	ldr	r2, [pc, #92]	; (80243d0 <_ZN10SideSensor7CountUpEv+0x314>)
 8024372:	7bfb      	ldrb	r3, [r7, #15]
 8024374:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8024376:	bf00      	nop
 8024378:	371c      	adds	r7, #28
 802437a:	46bd      	mov	sp, r7
 802437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024380:	4770      	bx	lr
 8024382:	bf00      	nop
 8024384:	20000253 	.word	0x20000253
 8024388:	20000254 	.word	0x20000254
 802438c:	20000255 	.word	0x20000255
 8024390:	20000256 	.word	0x20000256
 8024394:	20000257 	.word	0x20000257
 8024398:	20000258 	.word	0x20000258
 802439c:	20000259 	.word	0x20000259
 80243a0:	2000025a 	.word	0x2000025a
 80243a4:	2000025b 	.word	0x2000025b
 80243a8:	2000025c 	.word	0x2000025c
 80243ac:	2000025d 	.word	0x2000025d
 80243b0:	2000025e 	.word	0x2000025e
 80243b4:	2000025f 	.word	0x2000025f
 80243b8:	20000260 	.word	0x20000260
 80243bc:	20000261 	.word	0x20000261
 80243c0:	20000262 	.word	0x20000262
 80243c4:	20000263 	.word	0x20000263
 80243c8:	20000264 	.word	0x20000264
 80243cc:	20000265 	.word	0x20000265
 80243d0:	20000266 	.word	0x20000266

080243d4 <_ZN10SideSensor18GetGoalMarkerCountEv>:

uint8_t SideSensor::GetGoalMarkerCount()
{
 80243d4:	b480      	push	{r7}
 80243d6:	b083      	sub	sp, #12
 80243d8:	af00      	add	r7, sp, #0
 80243da:	6078      	str	r0, [r7, #4]
    return (write_state_flags_ & 0xC0) >> 6;
 80243dc:	687b      	ldr	r3, [r7, #4]
 80243de:	785b      	ldrb	r3, [r3, #1]
 80243e0:	099b      	lsrs	r3, r3, #6
 80243e2:	b2db      	uxtb	r3, r3
}
 80243e4:	4618      	mov	r0, r3
 80243e6:	370c      	adds	r7, #12
 80243e8:	46bd      	mov	sp, r7
 80243ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243ee:	4770      	bx	lr

080243f0 <_ZN10SideSensor20GetCornerMarkerCountEv>:

uint8_t SideSensor::GetCornerMarkerCount()
{
 80243f0:	b480      	push	{r7}
 80243f2:	b083      	sub	sp, #12
 80243f4:	af00      	add	r7, sp, #0
 80243f6:	6078      	str	r0, [r7, #4]
    return corner_marker_count_;
 80243f8:	687b      	ldr	r3, [r7, #4]
 80243fa:	791b      	ldrb	r3, [r3, #4]
}
 80243fc:	4618      	mov	r0, r3
 80243fe:	370c      	adds	r7, #12
 8024400:	46bd      	mov	sp, r7
 8024402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024406:	4770      	bx	lr

08024408 <_ZN10SideSensor17GetCrossLineCountEv>:

uint8_t SideSensor::GetCrossLineCount()
{
 8024408:	b480      	push	{r7}
 802440a:	b083      	sub	sp, #12
 802440c:	af00      	add	r7, sp, #0
 802440e:	6078      	str	r0, [r7, #4]
    return cross_line_count_;
 8024410:	687b      	ldr	r3, [r7, #4]
 8024412:	795b      	ldrb	r3, [r3, #5]
 8024414:	4618      	mov	r0, r3
 8024416:	370c      	adds	r7, #12
 8024418:	46bd      	mov	sp, r7
 802441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802441e:	4770      	bx	lr

08024420 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8024420:	b480      	push	{r7}
 8024422:	b083      	sub	sp, #12
 8024424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8024426:	2300      	movs	r3, #0
 8024428:	607b      	str	r3, [r7, #4]
 802442a:	4b10      	ldr	r3, [pc, #64]	; (802446c <HAL_MspInit+0x4c>)
 802442c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802442e:	4a0f      	ldr	r2, [pc, #60]	; (802446c <HAL_MspInit+0x4c>)
 8024430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024434:	6453      	str	r3, [r2, #68]	; 0x44
 8024436:	4b0d      	ldr	r3, [pc, #52]	; (802446c <HAL_MspInit+0x4c>)
 8024438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802443a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802443e:	607b      	str	r3, [r7, #4]
 8024440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8024442:	2300      	movs	r3, #0
 8024444:	603b      	str	r3, [r7, #0]
 8024446:	4b09      	ldr	r3, [pc, #36]	; (802446c <HAL_MspInit+0x4c>)
 8024448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802444a:	4a08      	ldr	r2, [pc, #32]	; (802446c <HAL_MspInit+0x4c>)
 802444c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8024450:	6413      	str	r3, [r2, #64]	; 0x40
 8024452:	4b06      	ldr	r3, [pc, #24]	; (802446c <HAL_MspInit+0x4c>)
 8024454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802445a:	603b      	str	r3, [r7, #0]
 802445c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802445e:	bf00      	nop
 8024460:	370c      	adds	r7, #12
 8024462:	46bd      	mov	sp, r7
 8024464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024468:	4770      	bx	lr
 802446a:	bf00      	nop
 802446c:	40023800 	.word	0x40023800

08024470 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8024470:	b580      	push	{r7, lr}
 8024472:	b08a      	sub	sp, #40	; 0x28
 8024474:	af00      	add	r7, sp, #0
 8024476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024478:	f107 0314 	add.w	r3, r7, #20
 802447c:	2200      	movs	r2, #0
 802447e:	601a      	str	r2, [r3, #0]
 8024480:	605a      	str	r2, [r3, #4]
 8024482:	609a      	str	r2, [r3, #8]
 8024484:	60da      	str	r2, [r3, #12]
 8024486:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8024488:	687b      	ldr	r3, [r7, #4]
 802448a:	681b      	ldr	r3, [r3, #0]
 802448c:	4a3c      	ldr	r2, [pc, #240]	; (8024580 <HAL_ADC_MspInit+0x110>)
 802448e:	4293      	cmp	r3, r2
 8024490:	d171      	bne.n	8024576 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8024492:	2300      	movs	r3, #0
 8024494:	613b      	str	r3, [r7, #16]
 8024496:	4b3b      	ldr	r3, [pc, #236]	; (8024584 <HAL_ADC_MspInit+0x114>)
 8024498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802449a:	4a3a      	ldr	r2, [pc, #232]	; (8024584 <HAL_ADC_MspInit+0x114>)
 802449c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80244a0:	6453      	str	r3, [r2, #68]	; 0x44
 80244a2:	4b38      	ldr	r3, [pc, #224]	; (8024584 <HAL_ADC_MspInit+0x114>)
 80244a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80244a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80244aa:	613b      	str	r3, [r7, #16]
 80244ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80244ae:	2300      	movs	r3, #0
 80244b0:	60fb      	str	r3, [r7, #12]
 80244b2:	4b34      	ldr	r3, [pc, #208]	; (8024584 <HAL_ADC_MspInit+0x114>)
 80244b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80244b6:	4a33      	ldr	r2, [pc, #204]	; (8024584 <HAL_ADC_MspInit+0x114>)
 80244b8:	f043 0304 	orr.w	r3, r3, #4
 80244bc:	6313      	str	r3, [r2, #48]	; 0x30
 80244be:	4b31      	ldr	r3, [pc, #196]	; (8024584 <HAL_ADC_MspInit+0x114>)
 80244c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80244c2:	f003 0304 	and.w	r3, r3, #4
 80244c6:	60fb      	str	r3, [r7, #12]
 80244c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80244ca:	2300      	movs	r3, #0
 80244cc:	60bb      	str	r3, [r7, #8]
 80244ce:	4b2d      	ldr	r3, [pc, #180]	; (8024584 <HAL_ADC_MspInit+0x114>)
 80244d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80244d2:	4a2c      	ldr	r2, [pc, #176]	; (8024584 <HAL_ADC_MspInit+0x114>)
 80244d4:	f043 0301 	orr.w	r3, r3, #1
 80244d8:	6313      	str	r3, [r2, #48]	; 0x30
 80244da:	4b2a      	ldr	r3, [pc, #168]	; (8024584 <HAL_ADC_MspInit+0x114>)
 80244dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80244de:	f003 0301 	and.w	r3, r3, #1
 80244e2:	60bb      	str	r3, [r7, #8]
 80244e4:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80244e6:	233f      	movs	r3, #63	; 0x3f
 80244e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80244ea:	2303      	movs	r3, #3
 80244ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80244ee:	2300      	movs	r3, #0
 80244f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80244f2:	f107 0314 	add.w	r3, r7, #20
 80244f6:	4619      	mov	r1, r3
 80244f8:	4823      	ldr	r0, [pc, #140]	; (8024588 <HAL_ADC_MspInit+0x118>)
 80244fa:	f003 fa5d 	bl	80279b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80244fe:	23ff      	movs	r3, #255	; 0xff
 8024500:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8024502:	2303      	movs	r3, #3
 8024504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024506:	2300      	movs	r3, #0
 8024508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802450a:	f107 0314 	add.w	r3, r7, #20
 802450e:	4619      	mov	r1, r3
 8024510:	481e      	ldr	r0, [pc, #120]	; (802458c <HAL_ADC_MspInit+0x11c>)
 8024512:	f003 fa51 	bl	80279b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8024516:	4b1e      	ldr	r3, [pc, #120]	; (8024590 <HAL_ADC_MspInit+0x120>)
 8024518:	4a1e      	ldr	r2, [pc, #120]	; (8024594 <HAL_ADC_MspInit+0x124>)
 802451a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 802451c:	4b1c      	ldr	r3, [pc, #112]	; (8024590 <HAL_ADC_MspInit+0x120>)
 802451e:	2200      	movs	r2, #0
 8024520:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8024522:	4b1b      	ldr	r3, [pc, #108]	; (8024590 <HAL_ADC_MspInit+0x120>)
 8024524:	2200      	movs	r2, #0
 8024526:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8024528:	4b19      	ldr	r3, [pc, #100]	; (8024590 <HAL_ADC_MspInit+0x120>)
 802452a:	2200      	movs	r2, #0
 802452c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 802452e:	4b18      	ldr	r3, [pc, #96]	; (8024590 <HAL_ADC_MspInit+0x120>)
 8024530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8024534:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8024536:	4b16      	ldr	r3, [pc, #88]	; (8024590 <HAL_ADC_MspInit+0x120>)
 8024538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802453c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 802453e:	4b14      	ldr	r3, [pc, #80]	; (8024590 <HAL_ADC_MspInit+0x120>)
 8024540:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8024544:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8024546:	4b12      	ldr	r3, [pc, #72]	; (8024590 <HAL_ADC_MspInit+0x120>)
 8024548:	f44f 7280 	mov.w	r2, #256	; 0x100
 802454c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 802454e:	4b10      	ldr	r3, [pc, #64]	; (8024590 <HAL_ADC_MspInit+0x120>)
 8024550:	2200      	movs	r2, #0
 8024552:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8024554:	4b0e      	ldr	r3, [pc, #56]	; (8024590 <HAL_ADC_MspInit+0x120>)
 8024556:	2200      	movs	r2, #0
 8024558:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 802455a:	480d      	ldr	r0, [pc, #52]	; (8024590 <HAL_ADC_MspInit+0x120>)
 802455c:	f002 fbe8 	bl	8026d30 <HAL_DMA_Init>
 8024560:	4603      	mov	r3, r0
 8024562:	2b00      	cmp	r3, #0
 8024564:	d001      	beq.n	802456a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8024566:	f7ff fa89 	bl	8023a7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 802456a:	687b      	ldr	r3, [r7, #4]
 802456c:	4a08      	ldr	r2, [pc, #32]	; (8024590 <HAL_ADC_MspInit+0x120>)
 802456e:	639a      	str	r2, [r3, #56]	; 0x38
 8024570:	4a07      	ldr	r2, [pc, #28]	; (8024590 <HAL_ADC_MspInit+0x120>)
 8024572:	687b      	ldr	r3, [r7, #4]
 8024574:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8024576:	bf00      	nop
 8024578:	3728      	adds	r7, #40	; 0x28
 802457a:	46bd      	mov	sp, r7
 802457c:	bd80      	pop	{r7, pc}
 802457e:	bf00      	nop
 8024580:	40012000 	.word	0x40012000
 8024584:	40023800 	.word	0x40023800
 8024588:	40020800 	.word	0x40020800
 802458c:	40020000 	.word	0x40020000
 8024590:	200009c4 	.word	0x200009c4
 8024594:	40026410 	.word	0x40026410

08024598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8024598:	b580      	push	{r7, lr}
 802459a:	b08a      	sub	sp, #40	; 0x28
 802459c:	af00      	add	r7, sp, #0
 802459e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80245a0:	f107 0314 	add.w	r3, r7, #20
 80245a4:	2200      	movs	r2, #0
 80245a6:	601a      	str	r2, [r3, #0]
 80245a8:	605a      	str	r2, [r3, #4]
 80245aa:	609a      	str	r2, [r3, #8]
 80245ac:	60da      	str	r2, [r3, #12]
 80245ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80245b0:	687b      	ldr	r3, [r7, #4]
 80245b2:	681b      	ldr	r3, [r3, #0]
 80245b4:	4a19      	ldr	r2, [pc, #100]	; (802461c <HAL_I2C_MspInit+0x84>)
 80245b6:	4293      	cmp	r3, r2
 80245b8:	d12c      	bne.n	8024614 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80245ba:	2300      	movs	r3, #0
 80245bc:	613b      	str	r3, [r7, #16]
 80245be:	4b18      	ldr	r3, [pc, #96]	; (8024620 <HAL_I2C_MspInit+0x88>)
 80245c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80245c2:	4a17      	ldr	r2, [pc, #92]	; (8024620 <HAL_I2C_MspInit+0x88>)
 80245c4:	f043 0302 	orr.w	r3, r3, #2
 80245c8:	6313      	str	r3, [r2, #48]	; 0x30
 80245ca:	4b15      	ldr	r3, [pc, #84]	; (8024620 <HAL_I2C_MspInit+0x88>)
 80245cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80245ce:	f003 0302 	and.w	r3, r3, #2
 80245d2:	613b      	str	r3, [r7, #16]
 80245d4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80245d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80245da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80245dc:	2312      	movs	r3, #18
 80245de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80245e0:	2301      	movs	r3, #1
 80245e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80245e4:	2303      	movs	r3, #3
 80245e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80245e8:	2304      	movs	r3, #4
 80245ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80245ec:	f107 0314 	add.w	r3, r7, #20
 80245f0:	4619      	mov	r1, r3
 80245f2:	480c      	ldr	r0, [pc, #48]	; (8024624 <HAL_I2C_MspInit+0x8c>)
 80245f4:	f003 f9e0 	bl	80279b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80245f8:	2300      	movs	r3, #0
 80245fa:	60fb      	str	r3, [r7, #12]
 80245fc:	4b08      	ldr	r3, [pc, #32]	; (8024620 <HAL_I2C_MspInit+0x88>)
 80245fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024600:	4a07      	ldr	r2, [pc, #28]	; (8024620 <HAL_I2C_MspInit+0x88>)
 8024602:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8024606:	6413      	str	r3, [r2, #64]	; 0x40
 8024608:	4b05      	ldr	r3, [pc, #20]	; (8024620 <HAL_I2C_MspInit+0x88>)
 802460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802460c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8024610:	60fb      	str	r3, [r7, #12]
 8024612:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8024614:	bf00      	nop
 8024616:	3728      	adds	r7, #40	; 0x28
 8024618:	46bd      	mov	sp, r7
 802461a:	bd80      	pop	{r7, pc}
 802461c:	40005800 	.word	0x40005800
 8024620:	40023800 	.word	0x40023800
 8024624:	40020400 	.word	0x40020400

08024628 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8024628:	b580      	push	{r7, lr}
 802462a:	b08a      	sub	sp, #40	; 0x28
 802462c:	af00      	add	r7, sp, #0
 802462e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024630:	f107 0314 	add.w	r3, r7, #20
 8024634:	2200      	movs	r2, #0
 8024636:	601a      	str	r2, [r3, #0]
 8024638:	605a      	str	r2, [r3, #4]
 802463a:	609a      	str	r2, [r3, #8]
 802463c:	60da      	str	r2, [r3, #12]
 802463e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8024640:	687b      	ldr	r3, [r7, #4]
 8024642:	681b      	ldr	r3, [r3, #0]
 8024644:	4a19      	ldr	r2, [pc, #100]	; (80246ac <HAL_SPI_MspInit+0x84>)
 8024646:	4293      	cmp	r3, r2
 8024648:	d12c      	bne.n	80246a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 802464a:	2300      	movs	r3, #0
 802464c:	613b      	str	r3, [r7, #16]
 802464e:	4b18      	ldr	r3, [pc, #96]	; (80246b0 <HAL_SPI_MspInit+0x88>)
 8024650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024652:	4a17      	ldr	r2, [pc, #92]	; (80246b0 <HAL_SPI_MspInit+0x88>)
 8024654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8024658:	6413      	str	r3, [r2, #64]	; 0x40
 802465a:	4b15      	ldr	r3, [pc, #84]	; (80246b0 <HAL_SPI_MspInit+0x88>)
 802465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802465e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024662:	613b      	str	r3, [r7, #16]
 8024664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8024666:	2300      	movs	r3, #0
 8024668:	60fb      	str	r3, [r7, #12]
 802466a:	4b11      	ldr	r3, [pc, #68]	; (80246b0 <HAL_SPI_MspInit+0x88>)
 802466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802466e:	4a10      	ldr	r2, [pc, #64]	; (80246b0 <HAL_SPI_MspInit+0x88>)
 8024670:	f043 0304 	orr.w	r3, r3, #4
 8024674:	6313      	str	r3, [r2, #48]	; 0x30
 8024676:	4b0e      	ldr	r3, [pc, #56]	; (80246b0 <HAL_SPI_MspInit+0x88>)
 8024678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802467a:	f003 0304 	and.w	r3, r3, #4
 802467e:	60fb      	str	r3, [r7, #12]
 8024680:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8024682:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8024686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024688:	2302      	movs	r3, #2
 802468a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802468c:	2300      	movs	r3, #0
 802468e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8024690:	2303      	movs	r3, #3
 8024692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8024694:	2306      	movs	r3, #6
 8024696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8024698:	f107 0314 	add.w	r3, r7, #20
 802469c:	4619      	mov	r1, r3
 802469e:	4805      	ldr	r0, [pc, #20]	; (80246b4 <HAL_SPI_MspInit+0x8c>)
 80246a0:	f003 f98a 	bl	80279b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80246a4:	bf00      	nop
 80246a6:	3728      	adds	r7, #40	; 0x28
 80246a8:	46bd      	mov	sp, r7
 80246aa:	bd80      	pop	{r7, pc}
 80246ac:	40003c00 	.word	0x40003c00
 80246b0:	40023800 	.word	0x40023800
 80246b4:	40020800 	.word	0x40020800

080246b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80246b8:	b480      	push	{r7}
 80246ba:	b087      	sub	sp, #28
 80246bc:	af00      	add	r7, sp, #0
 80246be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80246c0:	687b      	ldr	r3, [r7, #4]
 80246c2:	681b      	ldr	r3, [r3, #0]
 80246c4:	4a1f      	ldr	r2, [pc, #124]	; (8024744 <HAL_TIM_PWM_MspInit+0x8c>)
 80246c6:	4293      	cmp	r3, r2
 80246c8:	d10e      	bne.n	80246e8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80246ca:	2300      	movs	r3, #0
 80246cc:	617b      	str	r3, [r7, #20]
 80246ce:	4b1e      	ldr	r3, [pc, #120]	; (8024748 <HAL_TIM_PWM_MspInit+0x90>)
 80246d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80246d2:	4a1d      	ldr	r2, [pc, #116]	; (8024748 <HAL_TIM_PWM_MspInit+0x90>)
 80246d4:	f043 0301 	orr.w	r3, r3, #1
 80246d8:	6453      	str	r3, [r2, #68]	; 0x44
 80246da:	4b1b      	ldr	r3, [pc, #108]	; (8024748 <HAL_TIM_PWM_MspInit+0x90>)
 80246dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80246de:	f003 0301 	and.w	r3, r3, #1
 80246e2:	617b      	str	r3, [r7, #20]
 80246e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80246e6:	e026      	b.n	8024736 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80246e8:	687b      	ldr	r3, [r7, #4]
 80246ea:	681b      	ldr	r3, [r3, #0]
 80246ec:	4a17      	ldr	r2, [pc, #92]	; (802474c <HAL_TIM_PWM_MspInit+0x94>)
 80246ee:	4293      	cmp	r3, r2
 80246f0:	d10e      	bne.n	8024710 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80246f2:	2300      	movs	r3, #0
 80246f4:	613b      	str	r3, [r7, #16]
 80246f6:	4b14      	ldr	r3, [pc, #80]	; (8024748 <HAL_TIM_PWM_MspInit+0x90>)
 80246f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80246fa:	4a13      	ldr	r2, [pc, #76]	; (8024748 <HAL_TIM_PWM_MspInit+0x90>)
 80246fc:	f043 0302 	orr.w	r3, r3, #2
 8024700:	6413      	str	r3, [r2, #64]	; 0x40
 8024702:	4b11      	ldr	r3, [pc, #68]	; (8024748 <HAL_TIM_PWM_MspInit+0x90>)
 8024704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024706:	f003 0302 	and.w	r3, r3, #2
 802470a:	613b      	str	r3, [r7, #16]
 802470c:	693b      	ldr	r3, [r7, #16]
}
 802470e:	e012      	b.n	8024736 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8024710:	687b      	ldr	r3, [r7, #4]
 8024712:	681b      	ldr	r3, [r3, #0]
 8024714:	4a0e      	ldr	r2, [pc, #56]	; (8024750 <HAL_TIM_PWM_MspInit+0x98>)
 8024716:	4293      	cmp	r3, r2
 8024718:	d10d      	bne.n	8024736 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 802471a:	2300      	movs	r3, #0
 802471c:	60fb      	str	r3, [r7, #12]
 802471e:	4b0a      	ldr	r3, [pc, #40]	; (8024748 <HAL_TIM_PWM_MspInit+0x90>)
 8024720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024722:	4a09      	ldr	r2, [pc, #36]	; (8024748 <HAL_TIM_PWM_MspInit+0x90>)
 8024724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024728:	6413      	str	r3, [r2, #64]	; 0x40
 802472a:	4b07      	ldr	r3, [pc, #28]	; (8024748 <HAL_TIM_PWM_MspInit+0x90>)
 802472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024732:	60fb      	str	r3, [r7, #12]
 8024734:	68fb      	ldr	r3, [r7, #12]
}
 8024736:	bf00      	nop
 8024738:	371c      	adds	r7, #28
 802473a:	46bd      	mov	sp, r7
 802473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024740:	4770      	bx	lr
 8024742:	bf00      	nop
 8024744:	40010000 	.word	0x40010000
 8024748:	40023800 	.word	0x40023800
 802474c:	40000400 	.word	0x40000400
 8024750:	40001800 	.word	0x40001800

08024754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8024754:	b580      	push	{r7, lr}
 8024756:	b088      	sub	sp, #32
 8024758:	af00      	add	r7, sp, #0
 802475a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 802475c:	687b      	ldr	r3, [r7, #4]
 802475e:	681b      	ldr	r3, [r3, #0]
 8024760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8024764:	d116      	bne.n	8024794 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8024766:	2300      	movs	r3, #0
 8024768:	61fb      	str	r3, [r7, #28]
 802476a:	4b40      	ldr	r3, [pc, #256]	; (802486c <HAL_TIM_Base_MspInit+0x118>)
 802476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802476e:	4a3f      	ldr	r2, [pc, #252]	; (802486c <HAL_TIM_Base_MspInit+0x118>)
 8024770:	f043 0301 	orr.w	r3, r3, #1
 8024774:	6413      	str	r3, [r2, #64]	; 0x40
 8024776:	4b3d      	ldr	r3, [pc, #244]	; (802486c <HAL_TIM_Base_MspInit+0x118>)
 8024778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802477a:	f003 0301 	and.w	r3, r3, #1
 802477e:	61fb      	str	r3, [r7, #28]
 8024780:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8024782:	2200      	movs	r2, #0
 8024784:	2100      	movs	r1, #0
 8024786:	201c      	movs	r0, #28
 8024788:	f002 fa9b 	bl	8026cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 802478c:	201c      	movs	r0, #28
 802478e:	f002 fab4 	bl	8026cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8024792:	e066      	b.n	8024862 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8024794:	687b      	ldr	r3, [r7, #4]
 8024796:	681b      	ldr	r3, [r3, #0]
 8024798:	4a35      	ldr	r2, [pc, #212]	; (8024870 <HAL_TIM_Base_MspInit+0x11c>)
 802479a:	4293      	cmp	r3, r2
 802479c:	d116      	bne.n	80247cc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 802479e:	2300      	movs	r3, #0
 80247a0:	61bb      	str	r3, [r7, #24]
 80247a2:	4b32      	ldr	r3, [pc, #200]	; (802486c <HAL_TIM_Base_MspInit+0x118>)
 80247a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80247a6:	4a31      	ldr	r2, [pc, #196]	; (802486c <HAL_TIM_Base_MspInit+0x118>)
 80247a8:	f043 0308 	orr.w	r3, r3, #8
 80247ac:	6413      	str	r3, [r2, #64]	; 0x40
 80247ae:	4b2f      	ldr	r3, [pc, #188]	; (802486c <HAL_TIM_Base_MspInit+0x118>)
 80247b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80247b2:	f003 0308 	and.w	r3, r3, #8
 80247b6:	61bb      	str	r3, [r7, #24]
 80247b8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80247ba:	2200      	movs	r2, #0
 80247bc:	2100      	movs	r1, #0
 80247be:	2032      	movs	r0, #50	; 0x32
 80247c0:	f002 fa7f 	bl	8026cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80247c4:	2032      	movs	r0, #50	; 0x32
 80247c6:	f002 fa98 	bl	8026cfa <HAL_NVIC_EnableIRQ>
}
 80247ca:	e04a      	b.n	8024862 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 80247cc:	687b      	ldr	r3, [r7, #4]
 80247ce:	681b      	ldr	r3, [r3, #0]
 80247d0:	4a28      	ldr	r2, [pc, #160]	; (8024874 <HAL_TIM_Base_MspInit+0x120>)
 80247d2:	4293      	cmp	r3, r2
 80247d4:	d116      	bne.n	8024804 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80247d6:	2300      	movs	r3, #0
 80247d8:	617b      	str	r3, [r7, #20]
 80247da:	4b24      	ldr	r3, [pc, #144]	; (802486c <HAL_TIM_Base_MspInit+0x118>)
 80247dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80247de:	4a23      	ldr	r2, [pc, #140]	; (802486c <HAL_TIM_Base_MspInit+0x118>)
 80247e0:	f043 0310 	orr.w	r3, r3, #16
 80247e4:	6413      	str	r3, [r2, #64]	; 0x40
 80247e6:	4b21      	ldr	r3, [pc, #132]	; (802486c <HAL_TIM_Base_MspInit+0x118>)
 80247e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80247ea:	f003 0310 	and.w	r3, r3, #16
 80247ee:	617b      	str	r3, [r7, #20]
 80247f0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80247f2:	2200      	movs	r2, #0
 80247f4:	2100      	movs	r1, #0
 80247f6:	2036      	movs	r0, #54	; 0x36
 80247f8:	f002 fa63 	bl	8026cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80247fc:	2036      	movs	r0, #54	; 0x36
 80247fe:	f002 fa7c 	bl	8026cfa <HAL_NVIC_EnableIRQ>
}
 8024802:	e02e      	b.n	8024862 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8024804:	687b      	ldr	r3, [r7, #4]
 8024806:	681b      	ldr	r3, [r3, #0]
 8024808:	4a1b      	ldr	r2, [pc, #108]	; (8024878 <HAL_TIM_Base_MspInit+0x124>)
 802480a:	4293      	cmp	r3, r2
 802480c:	d116      	bne.n	802483c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 802480e:	2300      	movs	r3, #0
 8024810:	613b      	str	r3, [r7, #16]
 8024812:	4b16      	ldr	r3, [pc, #88]	; (802486c <HAL_TIM_Base_MspInit+0x118>)
 8024814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024816:	4a15      	ldr	r2, [pc, #84]	; (802486c <HAL_TIM_Base_MspInit+0x118>)
 8024818:	f043 0320 	orr.w	r3, r3, #32
 802481c:	6413      	str	r3, [r2, #64]	; 0x40
 802481e:	4b13      	ldr	r3, [pc, #76]	; (802486c <HAL_TIM_Base_MspInit+0x118>)
 8024820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024822:	f003 0320 	and.w	r3, r3, #32
 8024826:	613b      	str	r3, [r7, #16]
 8024828:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 802482a:	2200      	movs	r2, #0
 802482c:	2100      	movs	r1, #0
 802482e:	2037      	movs	r0, #55	; 0x37
 8024830:	f002 fa47 	bl	8026cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8024834:	2037      	movs	r0, #55	; 0x37
 8024836:	f002 fa60 	bl	8026cfa <HAL_NVIC_EnableIRQ>
}
 802483a:	e012      	b.n	8024862 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	681b      	ldr	r3, [r3, #0]
 8024840:	4a0e      	ldr	r2, [pc, #56]	; (802487c <HAL_TIM_Base_MspInit+0x128>)
 8024842:	4293      	cmp	r3, r2
 8024844:	d10d      	bne.n	8024862 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8024846:	2300      	movs	r3, #0
 8024848:	60fb      	str	r3, [r7, #12]
 802484a:	4b08      	ldr	r3, [pc, #32]	; (802486c <HAL_TIM_Base_MspInit+0x118>)
 802484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802484e:	4a07      	ldr	r2, [pc, #28]	; (802486c <HAL_TIM_Base_MspInit+0x118>)
 8024850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8024854:	6453      	str	r3, [r2, #68]	; 0x44
 8024856:	4b05      	ldr	r3, [pc, #20]	; (802486c <HAL_TIM_Base_MspInit+0x118>)
 8024858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802485a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802485e:	60fb      	str	r3, [r7, #12]
 8024860:	68fb      	ldr	r3, [r7, #12]
}
 8024862:	bf00      	nop
 8024864:	3720      	adds	r7, #32
 8024866:	46bd      	mov	sp, r7
 8024868:	bd80      	pop	{r7, pc}
 802486a:	bf00      	nop
 802486c:	40023800 	.word	0x40023800
 8024870:	40000c00 	.word	0x40000c00
 8024874:	40001000 	.word	0x40001000
 8024878:	40001400 	.word	0x40001400
 802487c:	40014800 	.word	0x40014800

08024880 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8024880:	b580      	push	{r7, lr}
 8024882:	b08c      	sub	sp, #48	; 0x30
 8024884:	af00      	add	r7, sp, #0
 8024886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024888:	f107 031c 	add.w	r3, r7, #28
 802488c:	2200      	movs	r2, #0
 802488e:	601a      	str	r2, [r3, #0]
 8024890:	605a      	str	r2, [r3, #4]
 8024892:	609a      	str	r2, [r3, #8]
 8024894:	60da      	str	r2, [r3, #12]
 8024896:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8024898:	687b      	ldr	r3, [r7, #4]
 802489a:	681b      	ldr	r3, [r3, #0]
 802489c:	4a32      	ldr	r2, [pc, #200]	; (8024968 <HAL_TIM_Encoder_MspInit+0xe8>)
 802489e:	4293      	cmp	r3, r2
 80248a0:	d12c      	bne.n	80248fc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80248a2:	2300      	movs	r3, #0
 80248a4:	61bb      	str	r3, [r7, #24]
 80248a6:	4b31      	ldr	r3, [pc, #196]	; (802496c <HAL_TIM_Encoder_MspInit+0xec>)
 80248a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80248aa:	4a30      	ldr	r2, [pc, #192]	; (802496c <HAL_TIM_Encoder_MspInit+0xec>)
 80248ac:	f043 0304 	orr.w	r3, r3, #4
 80248b0:	6413      	str	r3, [r2, #64]	; 0x40
 80248b2:	4b2e      	ldr	r3, [pc, #184]	; (802496c <HAL_TIM_Encoder_MspInit+0xec>)
 80248b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80248b6:	f003 0304 	and.w	r3, r3, #4
 80248ba:	61bb      	str	r3, [r7, #24]
 80248bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80248be:	2300      	movs	r3, #0
 80248c0:	617b      	str	r3, [r7, #20]
 80248c2:	4b2a      	ldr	r3, [pc, #168]	; (802496c <HAL_TIM_Encoder_MspInit+0xec>)
 80248c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80248c6:	4a29      	ldr	r2, [pc, #164]	; (802496c <HAL_TIM_Encoder_MspInit+0xec>)
 80248c8:	f043 0302 	orr.w	r3, r3, #2
 80248cc:	6313      	str	r3, [r2, #48]	; 0x30
 80248ce:	4b27      	ldr	r3, [pc, #156]	; (802496c <HAL_TIM_Encoder_MspInit+0xec>)
 80248d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80248d2:	f003 0302 	and.w	r3, r3, #2
 80248d6:	617b      	str	r3, [r7, #20]
 80248d8:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80248da:	23c0      	movs	r3, #192	; 0xc0
 80248dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80248de:	2302      	movs	r3, #2
 80248e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80248e2:	2300      	movs	r3, #0
 80248e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80248e6:	2300      	movs	r3, #0
 80248e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80248ea:	2302      	movs	r3, #2
 80248ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80248ee:	f107 031c 	add.w	r3, r7, #28
 80248f2:	4619      	mov	r1, r3
 80248f4:	481e      	ldr	r0, [pc, #120]	; (8024970 <HAL_TIM_Encoder_MspInit+0xf0>)
 80248f6:	f003 f85f 	bl	80279b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80248fa:	e030      	b.n	802495e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 80248fc:	687b      	ldr	r3, [r7, #4]
 80248fe:	681b      	ldr	r3, [r3, #0]
 8024900:	4a1c      	ldr	r2, [pc, #112]	; (8024974 <HAL_TIM_Encoder_MspInit+0xf4>)
 8024902:	4293      	cmp	r3, r2
 8024904:	d12b      	bne.n	802495e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8024906:	2300      	movs	r3, #0
 8024908:	613b      	str	r3, [r7, #16]
 802490a:	4b18      	ldr	r3, [pc, #96]	; (802496c <HAL_TIM_Encoder_MspInit+0xec>)
 802490c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802490e:	4a17      	ldr	r2, [pc, #92]	; (802496c <HAL_TIM_Encoder_MspInit+0xec>)
 8024910:	f043 0302 	orr.w	r3, r3, #2
 8024914:	6453      	str	r3, [r2, #68]	; 0x44
 8024916:	4b15      	ldr	r3, [pc, #84]	; (802496c <HAL_TIM_Encoder_MspInit+0xec>)
 8024918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802491a:	f003 0302 	and.w	r3, r3, #2
 802491e:	613b      	str	r3, [r7, #16]
 8024920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8024922:	2300      	movs	r3, #0
 8024924:	60fb      	str	r3, [r7, #12]
 8024926:	4b11      	ldr	r3, [pc, #68]	; (802496c <HAL_TIM_Encoder_MspInit+0xec>)
 8024928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802492a:	4a10      	ldr	r2, [pc, #64]	; (802496c <HAL_TIM_Encoder_MspInit+0xec>)
 802492c:	f043 0304 	orr.w	r3, r3, #4
 8024930:	6313      	str	r3, [r2, #48]	; 0x30
 8024932:	4b0e      	ldr	r3, [pc, #56]	; (802496c <HAL_TIM_Encoder_MspInit+0xec>)
 8024934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024936:	f003 0304 	and.w	r3, r3, #4
 802493a:	60fb      	str	r3, [r7, #12]
 802493c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 802493e:	23c0      	movs	r3, #192	; 0xc0
 8024940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024942:	2302      	movs	r3, #2
 8024944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024946:	2300      	movs	r3, #0
 8024948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802494a:	2300      	movs	r3, #0
 802494c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 802494e:	2303      	movs	r3, #3
 8024950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8024952:	f107 031c 	add.w	r3, r7, #28
 8024956:	4619      	mov	r1, r3
 8024958:	4807      	ldr	r0, [pc, #28]	; (8024978 <HAL_TIM_Encoder_MspInit+0xf8>)
 802495a:	f003 f82d 	bl	80279b8 <HAL_GPIO_Init>
}
 802495e:	bf00      	nop
 8024960:	3730      	adds	r7, #48	; 0x30
 8024962:	46bd      	mov	sp, r7
 8024964:	bd80      	pop	{r7, pc}
 8024966:	bf00      	nop
 8024968:	40000800 	.word	0x40000800
 802496c:	40023800 	.word	0x40023800
 8024970:	40020400 	.word	0x40020400
 8024974:	40010400 	.word	0x40010400
 8024978:	40020800 	.word	0x40020800

0802497c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 802497c:	b580      	push	{r7, lr}
 802497e:	b08c      	sub	sp, #48	; 0x30
 8024980:	af00      	add	r7, sp, #0
 8024982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024984:	f107 031c 	add.w	r3, r7, #28
 8024988:	2200      	movs	r2, #0
 802498a:	601a      	str	r2, [r3, #0]
 802498c:	605a      	str	r2, [r3, #4]
 802498e:	609a      	str	r2, [r3, #8]
 8024990:	60da      	str	r2, [r3, #12]
 8024992:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8024994:	687b      	ldr	r3, [r7, #4]
 8024996:	681b      	ldr	r3, [r3, #0]
 8024998:	4a59      	ldr	r2, [pc, #356]	; (8024b00 <HAL_TIM_MspPostInit+0x184>)
 802499a:	4293      	cmp	r3, r2
 802499c:	d11f      	bne.n	80249de <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802499e:	2300      	movs	r3, #0
 80249a0:	61bb      	str	r3, [r7, #24]
 80249a2:	4b58      	ldr	r3, [pc, #352]	; (8024b04 <HAL_TIM_MspPostInit+0x188>)
 80249a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80249a6:	4a57      	ldr	r2, [pc, #348]	; (8024b04 <HAL_TIM_MspPostInit+0x188>)
 80249a8:	f043 0301 	orr.w	r3, r3, #1
 80249ac:	6313      	str	r3, [r2, #48]	; 0x30
 80249ae:	4b55      	ldr	r3, [pc, #340]	; (8024b04 <HAL_TIM_MspPostInit+0x188>)
 80249b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80249b2:	f003 0301 	and.w	r3, r3, #1
 80249b6:	61bb      	str	r3, [r7, #24]
 80249b8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80249ba:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80249be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80249c0:	2302      	movs	r3, #2
 80249c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80249c4:	2300      	movs	r3, #0
 80249c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80249c8:	2300      	movs	r3, #0
 80249ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80249cc:	2301      	movs	r3, #1
 80249ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80249d0:	f107 031c 	add.w	r3, r7, #28
 80249d4:	4619      	mov	r1, r3
 80249d6:	484c      	ldr	r0, [pc, #304]	; (8024b08 <HAL_TIM_MspPostInit+0x18c>)
 80249d8:	f002 ffee 	bl	80279b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80249dc:	e08b      	b.n	8024af6 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 80249de:	687b      	ldr	r3, [r7, #4]
 80249e0:	681b      	ldr	r3, [r3, #0]
 80249e2:	4a4a      	ldr	r2, [pc, #296]	; (8024b0c <HAL_TIM_MspPostInit+0x190>)
 80249e4:	4293      	cmp	r3, r2
 80249e6:	d13d      	bne.n	8024a64 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80249e8:	2300      	movs	r3, #0
 80249ea:	617b      	str	r3, [r7, #20]
 80249ec:	4b45      	ldr	r3, [pc, #276]	; (8024b04 <HAL_TIM_MspPostInit+0x188>)
 80249ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80249f0:	4a44      	ldr	r2, [pc, #272]	; (8024b04 <HAL_TIM_MspPostInit+0x188>)
 80249f2:	f043 0304 	orr.w	r3, r3, #4
 80249f6:	6313      	str	r3, [r2, #48]	; 0x30
 80249f8:	4b42      	ldr	r3, [pc, #264]	; (8024b04 <HAL_TIM_MspPostInit+0x188>)
 80249fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80249fc:	f003 0304 	and.w	r3, r3, #4
 8024a00:	617b      	str	r3, [r7, #20]
 8024a02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8024a04:	2300      	movs	r3, #0
 8024a06:	613b      	str	r3, [r7, #16]
 8024a08:	4b3e      	ldr	r3, [pc, #248]	; (8024b04 <HAL_TIM_MspPostInit+0x188>)
 8024a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024a0c:	4a3d      	ldr	r2, [pc, #244]	; (8024b04 <HAL_TIM_MspPostInit+0x188>)
 8024a0e:	f043 0302 	orr.w	r3, r3, #2
 8024a12:	6313      	str	r3, [r2, #48]	; 0x30
 8024a14:	4b3b      	ldr	r3, [pc, #236]	; (8024b04 <HAL_TIM_MspPostInit+0x188>)
 8024a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024a18:	f003 0302 	and.w	r3, r3, #2
 8024a1c:	613b      	str	r3, [r7, #16]
 8024a1e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8024a20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8024a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024a26:	2302      	movs	r3, #2
 8024a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024a2a:	2300      	movs	r3, #0
 8024a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024a2e:	2300      	movs	r3, #0
 8024a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8024a32:	2302      	movs	r3, #2
 8024a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8024a36:	f107 031c 	add.w	r3, r7, #28
 8024a3a:	4619      	mov	r1, r3
 8024a3c:	4834      	ldr	r0, [pc, #208]	; (8024b10 <HAL_TIM_MspPostInit+0x194>)
 8024a3e:	f002 ffbb 	bl	80279b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8024a42:	2330      	movs	r3, #48	; 0x30
 8024a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024a46:	2302      	movs	r3, #2
 8024a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024a4a:	2300      	movs	r3, #0
 8024a4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024a4e:	2300      	movs	r3, #0
 8024a50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8024a52:	2302      	movs	r3, #2
 8024a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024a56:	f107 031c 	add.w	r3, r7, #28
 8024a5a:	4619      	mov	r1, r3
 8024a5c:	482d      	ldr	r0, [pc, #180]	; (8024b14 <HAL_TIM_MspPostInit+0x198>)
 8024a5e:	f002 ffab 	bl	80279b8 <HAL_GPIO_Init>
}
 8024a62:	e048      	b.n	8024af6 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 8024a64:	687b      	ldr	r3, [r7, #4]
 8024a66:	681b      	ldr	r3, [r3, #0]
 8024a68:	4a2b      	ldr	r2, [pc, #172]	; (8024b18 <HAL_TIM_MspPostInit+0x19c>)
 8024a6a:	4293      	cmp	r3, r2
 8024a6c:	d11f      	bne.n	8024aae <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8024a6e:	2300      	movs	r3, #0
 8024a70:	60fb      	str	r3, [r7, #12]
 8024a72:	4b24      	ldr	r3, [pc, #144]	; (8024b04 <HAL_TIM_MspPostInit+0x188>)
 8024a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024a76:	4a23      	ldr	r2, [pc, #140]	; (8024b04 <HAL_TIM_MspPostInit+0x188>)
 8024a78:	f043 0302 	orr.w	r3, r3, #2
 8024a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8024a7e:	4b21      	ldr	r3, [pc, #132]	; (8024b04 <HAL_TIM_MspPostInit+0x188>)
 8024a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024a82:	f003 0302 	and.w	r3, r3, #2
 8024a86:	60fb      	str	r3, [r7, #12]
 8024a88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8024a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024a90:	2302      	movs	r3, #2
 8024a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024a94:	2300      	movs	r3, #0
 8024a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024a98:	2300      	movs	r3, #0
 8024a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8024a9c:	2303      	movs	r3, #3
 8024a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024aa0:	f107 031c 	add.w	r3, r7, #28
 8024aa4:	4619      	mov	r1, r3
 8024aa6:	481b      	ldr	r0, [pc, #108]	; (8024b14 <HAL_TIM_MspPostInit+0x198>)
 8024aa8:	f002 ff86 	bl	80279b8 <HAL_GPIO_Init>
}
 8024aac:	e023      	b.n	8024af6 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8024aae:	687b      	ldr	r3, [r7, #4]
 8024ab0:	681b      	ldr	r3, [r3, #0]
 8024ab2:	4a1a      	ldr	r2, [pc, #104]	; (8024b1c <HAL_TIM_MspPostInit+0x1a0>)
 8024ab4:	4293      	cmp	r3, r2
 8024ab6:	d11e      	bne.n	8024af6 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8024ab8:	2300      	movs	r3, #0
 8024aba:	60bb      	str	r3, [r7, #8]
 8024abc:	4b11      	ldr	r3, [pc, #68]	; (8024b04 <HAL_TIM_MspPostInit+0x188>)
 8024abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024ac0:	4a10      	ldr	r2, [pc, #64]	; (8024b04 <HAL_TIM_MspPostInit+0x188>)
 8024ac2:	f043 0302 	orr.w	r3, r3, #2
 8024ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8024ac8:	4b0e      	ldr	r3, [pc, #56]	; (8024b04 <HAL_TIM_MspPostInit+0x188>)
 8024aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024acc:	f003 0302 	and.w	r3, r3, #2
 8024ad0:	60bb      	str	r3, [r7, #8]
 8024ad2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8024ad4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8024ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024ada:	2302      	movs	r3, #2
 8024adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024ade:	2300      	movs	r3, #0
 8024ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024ae2:	2300      	movs	r3, #0
 8024ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8024ae6:	2309      	movs	r3, #9
 8024ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024aea:	f107 031c 	add.w	r3, r7, #28
 8024aee:	4619      	mov	r1, r3
 8024af0:	4808      	ldr	r0, [pc, #32]	; (8024b14 <HAL_TIM_MspPostInit+0x198>)
 8024af2:	f002 ff61 	bl	80279b8 <HAL_GPIO_Init>
}
 8024af6:	bf00      	nop
 8024af8:	3730      	adds	r7, #48	; 0x30
 8024afa:	46bd      	mov	sp, r7
 8024afc:	bd80      	pop	{r7, pc}
 8024afe:	bf00      	nop
 8024b00:	40010000 	.word	0x40010000
 8024b04:	40023800 	.word	0x40023800
 8024b08:	40020000 	.word	0x40020000
 8024b0c:	40000400 	.word	0x40000400
 8024b10:	40020800 	.word	0x40020800
 8024b14:	40020400 	.word	0x40020400
 8024b18:	40014800 	.word	0x40014800
 8024b1c:	40001800 	.word	0x40001800

08024b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8024b20:	b480      	push	{r7}
 8024b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8024b24:	e7fe      	b.n	8024b24 <NMI_Handler+0x4>

08024b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8024b26:	b480      	push	{r7}
 8024b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8024b2a:	e7fe      	b.n	8024b2a <HardFault_Handler+0x4>

08024b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8024b2c:	b480      	push	{r7}
 8024b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8024b30:	e7fe      	b.n	8024b30 <MemManage_Handler+0x4>

08024b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8024b32:	b480      	push	{r7}
 8024b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8024b36:	e7fe      	b.n	8024b36 <BusFault_Handler+0x4>

08024b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8024b38:	b480      	push	{r7}
 8024b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8024b3c:	e7fe      	b.n	8024b3c <UsageFault_Handler+0x4>

08024b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8024b3e:	b480      	push	{r7}
 8024b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8024b42:	bf00      	nop
 8024b44:	46bd      	mov	sp, r7
 8024b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b4a:	4770      	bx	lr

08024b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8024b4c:	b480      	push	{r7}
 8024b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8024b50:	bf00      	nop
 8024b52:	46bd      	mov	sp, r7
 8024b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b58:	4770      	bx	lr

08024b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8024b5a:	b480      	push	{r7}
 8024b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8024b5e:	bf00      	nop
 8024b60:	46bd      	mov	sp, r7
 8024b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b66:	4770      	bx	lr

08024b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8024b68:	b580      	push	{r7, lr}
 8024b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8024b6c:	f001 fb98 	bl	80262a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8024b70:	bf00      	nop
 8024b72:	bd80      	pop	{r7, pc}

08024b74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8024b74:	b580      	push	{r7, lr}
 8024b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8024b78:	4802      	ldr	r0, [pc, #8]	; (8024b84 <TIM2_IRQHandler+0x10>)
 8024b7a:	f004 fd1e 	bl	80295ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8024b7e:	bf00      	nop
 8024b80:	bd80      	pop	{r7, pc}
 8024b82:	bf00      	nop
 8024b84:	20000aa4 	.word	0x20000aa4

08024b88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8024b88:	b580      	push	{r7, lr}
 8024b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8024b8c:	4802      	ldr	r0, [pc, #8]	; (8024b98 <TIM5_IRQHandler+0x10>)
 8024b8e:	f004 fd14 	bl	80295ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8024b92:	bf00      	nop
 8024b94:	bd80      	pop	{r7, pc}
 8024b96:	bf00      	nop
 8024b98:	20000864 	.word	0x20000864

08024b9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8024b9c:	b580      	push	{r7, lr}
 8024b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8024ba0:	4802      	ldr	r0, [pc, #8]	; (8024bac <TIM6_DAC_IRQHandler+0x10>)
 8024ba2:	f004 fd0a 	bl	80295ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8024ba6:	bf00      	nop
 8024ba8:	bd80      	pop	{r7, pc}
 8024baa:	bf00      	nop
 8024bac:	20000a24 	.word	0x20000a24

08024bb0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8024bb0:	b580      	push	{r7, lr}
 8024bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8024bb4:	4802      	ldr	r0, [pc, #8]	; (8024bc0 <TIM7_IRQHandler+0x10>)
 8024bb6:	f004 fd00 	bl	80295ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8024bba:	bf00      	nop
 8024bbc:	bd80      	pop	{r7, pc}
 8024bbe:	bf00      	nop
 8024bc0:	20000b24 	.word	0x20000b24

08024bc4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8024bc4:	b580      	push	{r7, lr}
 8024bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8024bc8:	4802      	ldr	r0, [pc, #8]	; (8024bd4 <DMA2_Stream0_IRQHandler+0x10>)
 8024bca:	f002 f9b7 	bl	8026f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8024bce:	bf00      	nop
 8024bd0:	bd80      	pop	{r7, pc}
 8024bd2:	bf00      	nop
 8024bd4:	200009c4 	.word	0x200009c4

08024bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8024bd8:	b480      	push	{r7}
 8024bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8024bdc:	4b08      	ldr	r3, [pc, #32]	; (8024c00 <SystemInit+0x28>)
 8024bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024be2:	4a07      	ldr	r2, [pc, #28]	; (8024c00 <SystemInit+0x28>)
 8024be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8024be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8024bec:	4b04      	ldr	r3, [pc, #16]	; (8024c00 <SystemInit+0x28>)
 8024bee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8024bf2:	609a      	str	r2, [r3, #8]
#endif
}
 8024bf4:	bf00      	nop
 8024bf6:	46bd      	mov	sp, r7
 8024bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bfc:	4770      	bx	lr
 8024bfe:	bf00      	nop
 8024c00:	e000ed00 	.word	0xe000ed00

08024c04 <_ZN15VelocityControlC1Ev>:
#include "velocity_control.hpp"

VelocityControl::VelocityControl() : integral_error_(0) {}
 8024c04:	b580      	push	{r7, lr}
 8024c06:	b082      	sub	sp, #8
 8024c08:	af00      	add	r7, sp, #0
 8024c0a:	6078      	str	r0, [r7, #4]
 8024c0c:	687b      	ldr	r3, [r7, #4]
 8024c0e:	f04f 0200 	mov.w	r2, #0
 8024c12:	601a      	str	r2, [r3, #0]
 8024c14:	687b      	ldr	r3, [r7, #4]
 8024c16:	3304      	adds	r3, #4
 8024c18:	4618      	mov	r0, r3
 8024c1a:	f7fc f87b 	bl	8020d14 <_ZN7EncoderC1Ev>
 8024c1e:	687b      	ldr	r3, [r7, #4]
 8024c20:	4618      	mov	r0, r3
 8024c22:	3708      	adds	r7, #8
 8024c24:	46bd      	mov	sp, r7
 8024c26:	bd80      	pop	{r7, pc}

08024c28 <_ZN15VelocityControl10PidControlEffff>:
{
    integral_error_ = 0.0;
}

float VelocityControl::PidControl(float target, float p_gain, float i_gain, float d_gain)
{
 8024c28:	b5b0      	push	{r4, r5, r7, lr}
 8024c2a:	b08e      	sub	sp, #56	; 0x38
 8024c2c:	af00      	add	r7, sp, #0
 8024c2e:	6178      	str	r0, [r7, #20]
 8024c30:	ed87 0a04 	vstr	s0, [r7, #16]
 8024c34:	edc7 0a03 	vstr	s1, [r7, #12]
 8024c38:	ed87 1a02 	vstr	s2, [r7, #8]
 8024c3c:	edc7 1a01 	vstr	s3, [r7, #4]
    float current = encoder.GetDistance() / TIM6_PERIOD; // [mm/ms]
 8024c40:	697b      	ldr	r3, [r7, #20]
 8024c42:	3304      	adds	r3, #4
 8024c44:	4618      	mov	r0, r3
 8024c46:	f7fc f925 	bl	8020e94 <_ZN7Encoder11GetDistanceEv>
 8024c4a:	eef0 6a40 	vmov.f32	s13, s0
 8024c4e:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8024c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8024c56:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    static float pre_filter = 0.0;
    float filter = pre_filter * (1.0 - LPF_VELOCITY) + (current * LPF_VELOCITY);
 8024c5a:	4b71      	ldr	r3, [pc, #452]	; (8024e20 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8024c5c:	681b      	ldr	r3, [r3, #0]
 8024c5e:	4618      	mov	r0, r3
 8024c60:	f7fb fb52 	bl	8020308 <__aeabi_f2d>
 8024c64:	a368      	add	r3, pc, #416	; (adr r3, 8024e08 <_ZN15VelocityControl10PidControlEffff+0x1e0>)
 8024c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c6a:	f7fb fba5 	bl	80203b8 <__aeabi_dmul>
 8024c6e:	4603      	mov	r3, r0
 8024c70:	460c      	mov	r4, r1
 8024c72:	4625      	mov	r5, r4
 8024c74:	461c      	mov	r4, r3
 8024c76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024c78:	f7fb fb46 	bl	8020308 <__aeabi_f2d>
 8024c7c:	a364      	add	r3, pc, #400	; (adr r3, 8024e10 <_ZN15VelocityControl10PidControlEffff+0x1e8>)
 8024c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c82:	f7fb fb99 	bl	80203b8 <__aeabi_dmul>
 8024c86:	4602      	mov	r2, r0
 8024c88:	460b      	mov	r3, r1
 8024c8a:	4620      	mov	r0, r4
 8024c8c:	4629      	mov	r1, r5
 8024c8e:	f7fb f9dd 	bl	802004c <__adddf3>
 8024c92:	4603      	mov	r3, r0
 8024c94:	460c      	mov	r4, r1
 8024c96:	4618      	mov	r0, r3
 8024c98:	4621      	mov	r1, r4
 8024c9a:	f7fb fe27 	bl	80208ec <__aeabi_d2f>
 8024c9e:	4603      	mov	r3, r0
 8024ca0:	633b      	str	r3, [r7, #48]	; 0x30
    pre_filter = filter;
 8024ca2:	4a5f      	ldr	r2, [pc, #380]	; (8024e20 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8024ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024ca6:	6013      	str	r3, [r2, #0]

    float error = target - filter;
 8024ca8:	ed97 7a04 	vldr	s14, [r7, #16]
 8024cac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8024cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024cb4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    static float pre_error = error;
 8024cb8:	4b5a      	ldr	r3, [pc, #360]	; (8024e24 <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8024cba:	781b      	ldrb	r3, [r3, #0]
 8024cbc:	f3bf 8f5b 	dmb	ish
 8024cc0:	b2db      	uxtb	r3, r3
 8024cc2:	f003 0301 	and.w	r3, r3, #1
 8024cc6:	2b00      	cmp	r3, #0
 8024cc8:	bf0c      	ite	eq
 8024cca:	2301      	moveq	r3, #1
 8024ccc:	2300      	movne	r3, #0
 8024cce:	b2db      	uxtb	r3, r3
 8024cd0:	2b00      	cmp	r3, #0
 8024cd2:	d010      	beq.n	8024cf6 <_ZN15VelocityControl10PidControlEffff+0xce>
 8024cd4:	4853      	ldr	r0, [pc, #332]	; (8024e24 <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8024cd6:	f005 fb11 	bl	802a2fc <__cxa_guard_acquire>
 8024cda:	4603      	mov	r3, r0
 8024cdc:	2b00      	cmp	r3, #0
 8024cde:	bf14      	ite	ne
 8024ce0:	2301      	movne	r3, #1
 8024ce2:	2300      	moveq	r3, #0
 8024ce4:	b2db      	uxtb	r3, r3
 8024ce6:	2b00      	cmp	r3, #0
 8024ce8:	d005      	beq.n	8024cf6 <_ZN15VelocityControl10PidControlEffff+0xce>
 8024cea:	4a4f      	ldr	r2, [pc, #316]	; (8024e28 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8024cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024cee:	6013      	str	r3, [r2, #0]
 8024cf0:	484c      	ldr	r0, [pc, #304]	; (8024e24 <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8024cf2:	f005 fb0f 	bl	802a314 <__cxa_guard_release>

    float differential_error = (error - pre_error) / TIM6_PERIOD_S;
 8024cf6:	4b4c      	ldr	r3, [pc, #304]	; (8024e28 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8024cf8:	edd3 7a00 	vldr	s15, [r3]
 8024cfc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8024d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024d04:	ee17 0a90 	vmov	r0, s15
 8024d08:	f7fb fafe 	bl	8020308 <__aeabi_f2d>
 8024d0c:	a342      	add	r3, pc, #264	; (adr r3, 8024e18 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8024d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d12:	f7fb fc7b 	bl	802060c <__aeabi_ddiv>
 8024d16:	4603      	mov	r3, r0
 8024d18:	460c      	mov	r4, r1
 8024d1a:	4618      	mov	r0, r3
 8024d1c:	4621      	mov	r1, r4
 8024d1e:	f7fb fde5 	bl	80208ec <__aeabi_d2f>
 8024d22:	4603      	mov	r3, r0
 8024d24:	62bb      	str	r3, [r7, #40]	; 0x28
    float integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 8024d26:	4b40      	ldr	r3, [pc, #256]	; (8024e28 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8024d28:	ed93 7a00 	vldr	s14, [r3]
 8024d2c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8024d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024d34:	ee17 0a90 	vmov	r0, s15
 8024d38:	f7fb fae6 	bl	8020308 <__aeabi_f2d>
 8024d3c:	f04f 0200 	mov.w	r2, #0
 8024d40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024d44:	f7fb fc62 	bl	802060c <__aeabi_ddiv>
 8024d48:	4603      	mov	r3, r0
 8024d4a:	460c      	mov	r4, r1
 8024d4c:	4618      	mov	r0, r3
 8024d4e:	4621      	mov	r1, r4
 8024d50:	a331      	add	r3, pc, #196	; (adr r3, 8024e18 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8024d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d56:	f7fb fb2f 	bl	80203b8 <__aeabi_dmul>
 8024d5a:	4603      	mov	r3, r0
 8024d5c:	460c      	mov	r4, r1
 8024d5e:	4618      	mov	r0, r3
 8024d60:	4621      	mov	r1, r4
 8024d62:	f7fb fdc3 	bl	80208ec <__aeabi_d2f>
 8024d66:	4603      	mov	r3, r0
 8024d68:	627b      	str	r3, [r7, #36]	; 0x24
    SetIntegralError(integral_error);
 8024d6a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8024d6e:	6978      	ldr	r0, [r7, #20]
 8024d70:	f000 f870 	bl	8024e54 <_ZN15VelocityControl16SetIntegralErrorEf>
    pre_error = error;
 8024d74:	4a2c      	ldr	r2, [pc, #176]	; (8024e28 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8024d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d78:	6013      	str	r3, [r2, #0]

    float p = p_gain * error;
 8024d7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8024d7e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8024d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024d86:	edc7 7a08 	vstr	s15, [r7, #32]
    float d = d_gain * differential_error;
 8024d8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8024d8e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8024d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024d96:	edc7 7a07 	vstr	s15, [r7, #28]
    float i = i_gain * integral_error_;
 8024d9a:	697b      	ldr	r3, [r7, #20]
 8024d9c:	edd3 7a00 	vldr	s15, [r3]
 8024da0:	ed97 7a02 	vldr	s14, [r7, #8]
 8024da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024da8:	edc7 7a06 	vstr	s15, [r7, #24]

#ifdef DEBUG_MODE
    g_target_velocity  = target;
 8024dac:	4a1f      	ldr	r2, [pc, #124]	; (8024e2c <_ZN15VelocityControl10PidControlEffff+0x204>)
 8024dae:	693b      	ldr	r3, [r7, #16]
 8024db0:	6013      	str	r3, [r2, #0]
    g_current_velocity = current;
 8024db2:	4a1f      	ldr	r2, [pc, #124]	; (8024e30 <_ZN15VelocityControl10PidControlEffff+0x208>)
 8024db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024db6:	6013      	str	r3, [r2, #0]
    g_filter_velocity  = filter;
 8024db8:	4a1e      	ldr	r2, [pc, #120]	; (8024e34 <_ZN15VelocityControl10PidControlEffff+0x20c>)
 8024dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024dbc:	6013      	str	r3, [r2, #0]
    g_velocity_error   = error;
 8024dbe:	4a1e      	ldr	r2, [pc, #120]	; (8024e38 <_ZN15VelocityControl10PidControlEffff+0x210>)
 8024dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024dc2:	6013      	str	r3, [r2, #0]
    g_velocity_p = p;       g_velocity_d = d;       g_velocity_i = i;
 8024dc4:	4a1d      	ldr	r2, [pc, #116]	; (8024e3c <_ZN15VelocityControl10PidControlEffff+0x214>)
 8024dc6:	6a3b      	ldr	r3, [r7, #32]
 8024dc8:	6013      	str	r3, [r2, #0]
 8024dca:	4a1d      	ldr	r2, [pc, #116]	; (8024e40 <_ZN15VelocityControl10PidControlEffff+0x218>)
 8024dcc:	69fb      	ldr	r3, [r7, #28]
 8024dce:	6013      	str	r3, [r2, #0]
 8024dd0:	4a1c      	ldr	r2, [pc, #112]	; (8024e44 <_ZN15VelocityControl10PidControlEffff+0x21c>)
 8024dd2:	69bb      	ldr	r3, [r7, #24]
 8024dd4:	6013      	str	r3, [r2, #0]
    g_velocity_p_gain = p;  g_velocity_d_gain = p;  g_velocity_i_gain = p;
 8024dd6:	4a1c      	ldr	r2, [pc, #112]	; (8024e48 <_ZN15VelocityControl10PidControlEffff+0x220>)
 8024dd8:	6a3b      	ldr	r3, [r7, #32]
 8024dda:	6013      	str	r3, [r2, #0]
 8024ddc:	4a1b      	ldr	r2, [pc, #108]	; (8024e4c <_ZN15VelocityControl10PidControlEffff+0x224>)
 8024dde:	6a3b      	ldr	r3, [r7, #32]
 8024de0:	6013      	str	r3, [r2, #0]
 8024de2:	4a1b      	ldr	r2, [pc, #108]	; (8024e50 <_ZN15VelocityControl10PidControlEffff+0x228>)
 8024de4:	6a3b      	ldr	r3, [r7, #32]
 8024de6:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    return p + d + i;
 8024de8:	ed97 7a08 	vldr	s14, [r7, #32]
 8024dec:	edd7 7a07 	vldr	s15, [r7, #28]
 8024df0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8024df4:	edd7 7a06 	vldr	s15, [r7, #24]
 8024df8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8024dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8024e00:	3738      	adds	r7, #56	; 0x38
 8024e02:	46bd      	mov	sp, r7
 8024e04:	bdb0      	pop	{r4, r5, r7, pc}
 8024e06:	bf00      	nop
 8024e08:	33333334 	.word	0x33333334
 8024e0c:	3fd33333 	.word	0x3fd33333
 8024e10:	66666666 	.word	0x66666666
 8024e14:	3fe66666 	.word	0x3fe66666
 8024e18:	47ae147b 	.word	0x47ae147b
 8024e1c:	3f547ae1 	.word	0x3f547ae1
 8024e20:	20000318 	.word	0x20000318
 8024e24:	20000320 	.word	0x20000320
 8024e28:	2000031c 	.word	0x2000031c
 8024e2c:	200002b8 	.word	0x200002b8
 8024e30:	200002bc 	.word	0x200002bc
 8024e34:	200002c0 	.word	0x200002c0
 8024e38:	200002c4 	.word	0x200002c4
 8024e3c:	200002c8 	.word	0x200002c8
 8024e40:	200002d0 	.word	0x200002d0
 8024e44:	200002cc 	.word	0x200002cc
 8024e48:	200002d4 	.word	0x200002d4
 8024e4c:	200002dc 	.word	0x200002dc
 8024e50:	200002d8 	.word	0x200002d8

08024e54 <_ZN15VelocityControl16SetIntegralErrorEf>:

void VelocityControl::SetIntegralError(float integral_error)
{
 8024e54:	b480      	push	{r7}
 8024e56:	b083      	sub	sp, #12
 8024e58:	af00      	add	r7, sp, #0
 8024e5a:	6078      	str	r0, [r7, #4]
 8024e5c:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8024e60:	687b      	ldr	r3, [r7, #4]
 8024e62:	ed93 7a00 	vldr	s14, [r3]
 8024e66:	edd7 7a00 	vldr	s15, [r7]
 8024e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024e6e:	687b      	ldr	r3, [r7, #4]
 8024e70:	edc3 7a00 	vstr	s15, [r3]
}
 8024e74:	bf00      	nop
 8024e76:	370c      	adds	r7, #12
 8024e78:	46bd      	mov	sp, r7
 8024e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e7e:	4770      	bx	lr

08024e80 <Init>:
RotarySwitch rotary_switch;
SideSensor side_sensor;
VelocityControl velocity_control;

void Init()
{
 8024e80:	b580      	push	{r7, lr}
 8024e82:	af00      	add	r7, sp, #0
    line_sensor.Init();
 8024e84:	480b      	ldr	r0, [pc, #44]	; (8024eb4 <Init+0x34>)
 8024e86:	f7fc fce5 	bl	8021854 <_ZN10LineSensor4InitEv>
    encoder.Init();
 8024e8a:	480b      	ldr	r0, [pc, #44]	; (8024eb8 <Init+0x38>)
 8024e8c:	f7fb ff5a 	bl	8020d44 <_ZN7Encoder4InitEv>
    motor.Init();
 8024e90:	480a      	ldr	r0, [pc, #40]	; (8024ebc <Init+0x3c>)
 8024e92:	f7fe fe03 	bl	8023a9c <_ZN5Motor4InitEv>
#ifdef DEBUG_MODE
    g_imu_init = imu_init;
#endif // DEBUG_MODE
    */

    HAL_TIM_Base_Start_IT(&htim2);
 8024e96:	480a      	ldr	r0, [pc, #40]	; (8024ec0 <Init+0x40>)
 8024e98:	f004 fa39 	bl	802930e <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim5);
 8024e9c:	4809      	ldr	r0, [pc, #36]	; (8024ec4 <Init+0x44>)
 8024e9e:	f004 fa36 	bl	802930e <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 8024ea2:	4809      	ldr	r0, [pc, #36]	; (8024ec8 <Init+0x48>)
 8024ea4:	f004 fa33 	bl	802930e <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 8024ea8:	4808      	ldr	r0, [pc, #32]	; (8024ecc <Init+0x4c>)
 8024eaa:	f004 fa30 	bl	802930e <HAL_TIM_Base_Start_IT>
}
 8024eae:	bf00      	nop
 8024eb0:	bd80      	pop	{r7, pc}
 8024eb2:	bf00      	nop
 8024eb4:	20000344 	.word	0x20000344
 8024eb8:	20000324 	.word	0x20000324
 8024ebc:	20000768 	.word	0x20000768
 8024ec0:	20000aa4 	.word	0x20000aa4
 8024ec4:	20000864 	.word	0x20000864
 8024ec8:	20000a24 	.word	0x20000a24
 8024ecc:	20000b24 	.word	0x20000b24

08024ed0 <InterruptTim7>:
#endif // DEBUG_MODE
}


void InterruptTim7()
{
 8024ed0:	b580      	push	{r7, lr}
 8024ed2:	af00      	add	r7, sp, #0
    line_sensor.StoreConsecutiveBuff();
 8024ed4:	4804      	ldr	r0, [pc, #16]	; (8024ee8 <InterruptTim7+0x18>)
 8024ed6:	f7fc fcf7 	bl	80218c8 <_ZN10LineSensor20StoreConsecutiveBuffEv>

#ifdef DEBUG_MODE
    g_tim7++;
 8024eda:	4b04      	ldr	r3, [pc, #16]	; (8024eec <InterruptTim7+0x1c>)
 8024edc:	681b      	ldr	r3, [r3, #0]
 8024ede:	3301      	adds	r3, #1
 8024ee0:	4a02      	ldr	r2, [pc, #8]	; (8024eec <InterruptTim7+0x1c>)
 8024ee2:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8024ee4:	bf00      	nop
 8024ee6:	bd80      	pop	{r7, pc}
 8024ee8:	20000344 	.word	0x20000344
 8024eec:	200002e0 	.word	0x200002e0

08024ef0 <InterruptTim6>:


void InterruptTim6()
{
 8024ef0:	b580      	push	{r7, lr}
 8024ef2:	af00      	add	r7, sp, #0
    if(g_tim6_complete == 0) g_tim6_yet = 0x01;
 8024ef4:	4bbf      	ldr	r3, [pc, #764]	; (80251f4 <InterruptTim6+0x304>)
 8024ef6:	781b      	ldrb	r3, [r3, #0]
 8024ef8:	2b00      	cmp	r3, #0
 8024efa:	d102      	bne.n	8024f02 <InterruptTim6+0x12>
 8024efc:	4bbe      	ldr	r3, [pc, #760]	; (80251f8 <InterruptTim6+0x308>)
 8024efe:	2201      	movs	r2, #1
 8024f00:	701a      	strb	r2, [r3, #0]
    g_tim6_complete = 0;
 8024f02:	4bbc      	ldr	r3, [pc, #752]	; (80251f4 <InterruptTim6+0x304>)
 8024f04:	2200      	movs	r2, #0
 8024f06:	701a      	strb	r2, [r3, #0]

    switch(g_mode)
 8024f08:	4bbc      	ldr	r3, [pc, #752]	; (80251fc <InterruptTim6+0x30c>)
 8024f0a:	781b      	ldrb	r3, [r3, #0]
 8024f0c:	2b20      	cmp	r3, #32
 8024f0e:	f200 824b 	bhi.w	80253a8 <InterruptTim6+0x4b8>
 8024f12:	a201      	add	r2, pc, #4	; (adr r2, 8024f18 <InterruptTim6+0x28>)
 8024f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024f18:	08024fcd 	.word	0x08024fcd
 8024f1c:	08024fdd 	.word	0x08024fdd
 8024f20:	0802509f 	.word	0x0802509f
 8024f24:	080253a9 	.word	0x080253a9
 8024f28:	0802524d 	.word	0x0802524d
 8024f2c:	08025169 	.word	0x08025169
 8024f30:	080253a9 	.word	0x080253a9
 8024f34:	080253a9 	.word	0x080253a9
 8024f38:	080253a9 	.word	0x080253a9
 8024f3c:	080253a9 	.word	0x080253a9
 8024f40:	080253a9 	.word	0x080253a9
 8024f44:	080253a9 	.word	0x080253a9
 8024f48:	08025353 	.word	0x08025353
 8024f4c:	08025301 	.word	0x08025301
 8024f50:	080252fb 	.word	0x080252fb
 8024f54:	08024f9d 	.word	0x08024f9d
 8024f58:	08025075 	.word	0x08025075
 8024f5c:	080253a9 	.word	0x080253a9
 8024f60:	080253a9 	.word	0x080253a9
 8024f64:	080253a9 	.word	0x080253a9
 8024f68:	080253a9 	.word	0x080253a9
 8024f6c:	080253a9 	.word	0x080253a9
 8024f70:	080253a9 	.word	0x080253a9
 8024f74:	080253a9 	.word	0x080253a9
 8024f78:	080253a9 	.word	0x080253a9
 8024f7c:	080253a9 	.word	0x080253a9
 8024f80:	080253a9 	.word	0x080253a9
 8024f84:	080253a9 	.word	0x080253a9
 8024f88:	080253a9 	.word	0x080253a9
 8024f8c:	080253a9 	.word	0x080253a9
 8024f90:	080253a9 	.word	0x080253a9
 8024f94:	080253a9 	.word	0x080253a9
 8024f98:	08025151 	.word	0x08025151
    {
        case READY:
            line_sensor.Update();
 8024f9c:	4898      	ldr	r0, [pc, #608]	; (8025200 <InterruptTim6+0x310>)
 8024f9e:	f7fc fd9b 	bl	8021ad8 <_ZN10LineSensor6UpdateEv>
            g_line_calib = line_sensor.CheckCalibration();
 8024fa2:	4897      	ldr	r0, [pc, #604]	; (8025200 <InterruptTim6+0x310>)
 8024fa4:	f7fc fecc 	bl	8021d40 <_ZN10LineSensor16CheckCalibrationEv>
 8024fa8:	4603      	mov	r3, r0
 8024faa:	461a      	mov	r2, r3
 8024fac:	4b95      	ldr	r3, [pc, #596]	; (8025204 <InterruptTim6+0x314>)
 8024fae:	701a      	strb	r2, [r3, #0]
            if(g_line_calib == 0) led.ColorOrder('X');
 8024fb0:	4b94      	ldr	r3, [pc, #592]	; (8025204 <InterruptTim6+0x314>)
 8024fb2:	781b      	ldrb	r3, [r3, #0]
 8024fb4:	2b00      	cmp	r3, #0
 8024fb6:	d104      	bne.n	8024fc2 <InterruptTim6+0xd2>
 8024fb8:	2158      	movs	r1, #88	; 0x58
 8024fba:	4893      	ldr	r0, [pc, #588]	; (8025208 <InterruptTim6+0x318>)
 8024fbc:	f7fc fab2 	bl	8021524 <_ZN3Led10ColorOrderEc>
            else led.ColorOrder('R');
            break;
 8024fc0:	e1ff      	b.n	80253c2 <InterruptTim6+0x4d2>
            else led.ColorOrder('R');
 8024fc2:	2152      	movs	r1, #82	; 0x52
 8024fc4:	4890      	ldr	r0, [pc, #576]	; (8025208 <InterruptTim6+0x318>)
 8024fc6:	f7fc faad 	bl	8021524 <_ZN3Led10ColorOrderEc>
            break;
 8024fca:	e1fa      	b.n	80253c2 <InterruptTim6+0x4d2>

        case STANDBY:
            motor.Drive(0, 0);
 8024fcc:	eddf 0a8f 	vldr	s1, [pc, #572]	; 802520c <InterruptTim6+0x31c>
 8024fd0:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 802520c <InterruptTim6+0x31c>
 8024fd4:	488e      	ldr	r0, [pc, #568]	; (8025210 <InterruptTim6+0x320>)
 8024fd6:	f7fe fd8b 	bl	8023af0 <_ZN5Motor5DriveEff>
            break;
 8024fda:	e1f2      	b.n	80253c2 <InterruptTim6+0x4d2>

        case FIRST_RUN:
            /* Sensor update */
            line_sensor.Update();
 8024fdc:	4888      	ldr	r0, [pc, #544]	; (8025200 <InterruptTim6+0x310>)
 8024fde:	f7fc fd7b 	bl	8021ad8 <_ZN10LineSensor6UpdateEv>
            encoder.Update();
 8024fe2:	488c      	ldr	r0, [pc, #560]	; (8025214 <InterruptTim6+0x324>)
 8024fe4:	f7fb fec4 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 8024fe8:	488b      	ldr	r0, [pc, #556]	; (8025218 <InterruptTim6+0x328>)
 8024fea:	f7fe ffc9 	bl	8023f80 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 8024fee:	488a      	ldr	r0, [pc, #552]	; (8025218 <InterruptTim6+0x328>)
 8024ff0:	f7ff f9f0 	bl	80243d4 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024ff4:	4603      	mov	r3, r0
 8024ff6:	461a      	mov	r2, r3
 8024ff8:	4b88      	ldr	r3, [pc, #544]	; (802521c <InterruptTim6+0x32c>)
 8024ffa:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_target = TargetVelocity(MIN_VELOCITY, MIN_VELOCITY);
 8024ffc:	eddf 0a88 	vldr	s1, [pc, #544]	; 8025220 <InterruptTim6+0x330>
 8025000:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8025220 <InterruptTim6+0x330>
 8025004:	f000 fca4 	bl	8025950 <TargetVelocity>
 8025008:	eef0 7a40 	vmov.f32	s15, s0
 802500c:	4b85      	ldr	r3, [pc, #532]	; (8025224 <InterruptTim6+0x334>)
 802500e:	edc3 7a00 	vstr	s15, [r3]
            g_trans = velocity_control.PidControl(g_target, V_P_1, V_I_1, V_D_1);
 8025012:	4b84      	ldr	r3, [pc, #528]	; (8025224 <InterruptTim6+0x334>)
 8025014:	edd3 7a00 	vldr	s15, [r3]
 8025018:	eddf 1a7c 	vldr	s3, [pc, #496]	; 802520c <InterruptTim6+0x31c>
 802501c:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 802520c <InterruptTim6+0x31c>
 8025020:	eddf 0a7a 	vldr	s1, [pc, #488]	; 802520c <InterruptTim6+0x31c>
 8025024:	eeb0 0a67 	vmov.f32	s0, s15
 8025028:	487f      	ldr	r0, [pc, #508]	; (8025228 <InterruptTim6+0x338>)
 802502a:	f7ff fdfd 	bl	8024c28 <_ZN15VelocityControl10PidControlEffff>
 802502e:	eef0 7a40 	vmov.f32	s15, s0
 8025032:	4b7e      	ldr	r3, [pc, #504]	; (802522c <InterruptTim6+0x33c>)
 8025034:	edc3 7a00 	vstr	s15, [r3]
            g_rotat = line_trace.PidControl(LINE_P_1, LINE_I_1, LINE_D_1);
 8025038:	ed9f 1a74 	vldr	s2, [pc, #464]	; 802520c <InterruptTim6+0x31c>
 802503c:	eddf 0a73 	vldr	s1, [pc, #460]	; 802520c <InterruptTim6+0x31c>
 8025040:	ed9f 0a72 	vldr	s0, [pc, #456]	; 802520c <InterruptTim6+0x31c>
 8025044:	487a      	ldr	r0, [pc, #488]	; (8025230 <InterruptTim6+0x340>)
 8025046:	f7fc ff2b 	bl	8021ea0 <_ZN9LineTrace10PidControlEfff>
 802504a:	eef0 7a40 	vmov.f32	s15, s0
 802504e:	4b79      	ldr	r3, [pc, #484]	; (8025234 <InterruptTim6+0x344>)
 8025050:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(g_trans, g_rotat);
 8025054:	4b75      	ldr	r3, [pc, #468]	; (802522c <InterruptTim6+0x33c>)
 8025056:	edd3 7a00 	vldr	s15, [r3]
 802505a:	4b76      	ldr	r3, [pc, #472]	; (8025234 <InterruptTim6+0x344>)
 802505c:	ed93 7a00 	vldr	s14, [r3]
 8025060:	eef0 0a47 	vmov.f32	s1, s14
 8025064:	eeb0 0a67 	vmov.f32	s0, s15
 8025068:	4869      	ldr	r0, [pc, #420]	; (8025210 <InterruptTim6+0x320>)
 802506a:	f7fe fd41 	bl	8023af0 <_ZN5Motor5DriveEff>
            EmergencyStop();
 802506e:	f000 fc3b 	bl	80258e8 <EmergencyStop>
            break;
 8025072:	e1a6      	b.n	80253c2 <InterruptTim6+0x4d2>
        
        case FIRST_GOAL:
            motor.Drive(0, 0);
 8025074:	eddf 0a65 	vldr	s1, [pc, #404]	; 802520c <InterruptTim6+0x31c>
 8025078:	ed9f 0a64 	vldr	s0, [pc, #400]	; 802520c <InterruptTim6+0x31c>
 802507c:	4864      	ldr	r0, [pc, #400]	; (8025210 <InterruptTim6+0x320>)
 802507e:	f7fe fd37 	bl	8023af0 <_ZN5Motor5DriveEff>
            if(g_first_log_failed == 1) led.ColorOrder('R');
 8025082:	4b6d      	ldr	r3, [pc, #436]	; (8025238 <InterruptTim6+0x348>)
 8025084:	781b      	ldrb	r3, [r3, #0]
 8025086:	2b01      	cmp	r3, #1
 8025088:	d104      	bne.n	8025094 <InterruptTim6+0x1a4>
 802508a:	2152      	movs	r1, #82	; 0x52
 802508c:	485e      	ldr	r0, [pc, #376]	; (8025208 <InterruptTim6+0x318>)
 802508e:	f7fc fa49 	bl	8021524 <_ZN3Led10ColorOrderEc>
            else led.ColorOrder('B');
            break;
 8025092:	e196      	b.n	80253c2 <InterruptTim6+0x4d2>
            else led.ColorOrder('B');
 8025094:	2142      	movs	r1, #66	; 0x42
 8025096:	485c      	ldr	r0, [pc, #368]	; (8025208 <InterruptTim6+0x318>)
 8025098:	f7fc fa44 	bl	8021524 <_ZN3Led10ColorOrderEc>
            break;
 802509c:	e191      	b.n	80253c2 <InterruptTim6+0x4d2>

        case SECOND_RUN:
            /* Sensor update */
            line_sensor.Update();
 802509e:	4858      	ldr	r0, [pc, #352]	; (8025200 <InterruptTim6+0x310>)
 80250a0:	f7fc fd1a 	bl	8021ad8 <_ZN10LineSensor6UpdateEv>
            encoder.Update();
 80250a4:	485b      	ldr	r0, [pc, #364]	; (8025214 <InterruptTim6+0x324>)
 80250a6:	f7fb fe63 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 80250aa:	485b      	ldr	r0, [pc, #364]	; (8025218 <InterruptTim6+0x328>)
 80250ac:	f7fe ff68 	bl	8023f80 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 80250b0:	4859      	ldr	r0, [pc, #356]	; (8025218 <InterruptTim6+0x328>)
 80250b2:	f7ff f98f 	bl	80243d4 <_ZN10SideSensor18GetGoalMarkerCountEv>
 80250b6:	4603      	mov	r3, r0
 80250b8:	461a      	mov	r2, r3
 80250ba:	4b58      	ldr	r3, [pc, #352]	; (802521c <InterruptTim6+0x32c>)
 80250bc:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_target = TargetVelocity(logger.GetTargetVelocity(), MIN_VELOCITY);
 80250be:	485f      	ldr	r0, [pc, #380]	; (802523c <InterruptTim6+0x34c>)
 80250c0:	f7fd fe60 	bl	8022d84 <_ZN6Logger17GetTargetVelocityEv>
 80250c4:	eef0 7a40 	vmov.f32	s15, s0
 80250c8:	eddf 0a55 	vldr	s1, [pc, #340]	; 8025220 <InterruptTim6+0x330>
 80250cc:	eeb0 0a67 	vmov.f32	s0, s15
 80250d0:	f000 fc3e 	bl	8025950 <TargetVelocity>
 80250d4:	eef0 7a40 	vmov.f32	s15, s0
 80250d8:	4b52      	ldr	r3, [pc, #328]	; (8025224 <InterruptTim6+0x334>)
 80250da:	edc3 7a00 	vstr	s15, [r3]
            g_trans = velocity_control.PidControl(g_target, V_P_1, V_I_1, V_D_1);
 80250de:	4b51      	ldr	r3, [pc, #324]	; (8025224 <InterruptTim6+0x334>)
 80250e0:	edd3 7a00 	vldr	s15, [r3]
 80250e4:	eddf 1a49 	vldr	s3, [pc, #292]	; 802520c <InterruptTim6+0x31c>
 80250e8:	ed9f 1a48 	vldr	s2, [pc, #288]	; 802520c <InterruptTim6+0x31c>
 80250ec:	eddf 0a47 	vldr	s1, [pc, #284]	; 802520c <InterruptTim6+0x31c>
 80250f0:	eeb0 0a67 	vmov.f32	s0, s15
 80250f4:	484c      	ldr	r0, [pc, #304]	; (8025228 <InterruptTim6+0x338>)
 80250f6:	f7ff fd97 	bl	8024c28 <_ZN15VelocityControl10PidControlEffff>
 80250fa:	eef0 7a40 	vmov.f32	s15, s0
 80250fe:	4b4b      	ldr	r3, [pc, #300]	; (802522c <InterruptTim6+0x33c>)
 8025100:	edc3 7a00 	vstr	s15, [r3]
            g_rotat = line_trace.PidControl(LINE_P_1, LINE_I_1, LINE_D_1);
 8025104:	ed9f 1a41 	vldr	s2, [pc, #260]	; 802520c <InterruptTim6+0x31c>
 8025108:	eddf 0a40 	vldr	s1, [pc, #256]	; 802520c <InterruptTim6+0x31c>
 802510c:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 802520c <InterruptTim6+0x31c>
 8025110:	4847      	ldr	r0, [pc, #284]	; (8025230 <InterruptTim6+0x340>)
 8025112:	f7fc fec5 	bl	8021ea0 <_ZN9LineTrace10PidControlEfff>
 8025116:	eef0 7a40 	vmov.f32	s15, s0
 802511a:	4b46      	ldr	r3, [pc, #280]	; (8025234 <InterruptTim6+0x344>)
 802511c:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(g_trans, g_rotat);
 8025120:	4b42      	ldr	r3, [pc, #264]	; (802522c <InterruptTim6+0x33c>)
 8025122:	edd3 7a00 	vldr	s15, [r3]
 8025126:	4b43      	ldr	r3, [pc, #268]	; (8025234 <InterruptTim6+0x344>)
 8025128:	ed93 7a00 	vldr	s14, [r3]
 802512c:	eef0 0a47 	vmov.f32	s1, s14
 8025130:	eeb0 0a67 	vmov.f32	s0, s15
 8025134:	4836      	ldr	r0, [pc, #216]	; (8025210 <InterruptTim6+0x320>)
 8025136:	f7fe fcdb 	bl	8023af0 <_ZN5Motor5DriveEff>
            EmergencyStop();
 802513a:	f000 fbd5 	bl	80258e8 <EmergencyStop>
            if(g_run_end == 1) g_mode = SECOND_GOAL;
 802513e:	4b40      	ldr	r3, [pc, #256]	; (8025240 <InterruptTim6+0x350>)
 8025140:	781b      	ldrb	r3, [r3, #0]
 8025142:	2b01      	cmp	r3, #1
 8025144:	f040 8138 	bne.w	80253b8 <InterruptTim6+0x4c8>
 8025148:	4b2c      	ldr	r3, [pc, #176]	; (80251fc <InterruptTim6+0x30c>)
 802514a:	2220      	movs	r2, #32
 802514c:	701a      	strb	r2, [r3, #0]
            break;
 802514e:	e133      	b.n	80253b8 <InterruptTim6+0x4c8>

        case SECOND_GOAL:
            motor.Drive(0, 0);
 8025150:	eddf 0a2e 	vldr	s1, [pc, #184]	; 802520c <InterruptTim6+0x31c>
 8025154:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 802520c <InterruptTim6+0x31c>
 8025158:	482d      	ldr	r0, [pc, #180]	; (8025210 <InterruptTim6+0x320>)
 802515a:	f7fe fcc9 	bl	8023af0 <_ZN5Motor5DriveEff>
            led.ColorOrder('M');
 802515e:	214d      	movs	r1, #77	; 0x4d
 8025160:	4829      	ldr	r0, [pc, #164]	; (8025208 <InterruptTim6+0x318>)
 8025162:	f7fc f9df 	bl	8021524 <_ZN3Led10ColorOrderEc>
            break;
 8025166:	e12c      	b.n	80253c2 <InterruptTim6+0x4d2>

        case LINE_TRACE:
            /* Sensor update */
            line_sensor.Update();
 8025168:	4825      	ldr	r0, [pc, #148]	; (8025200 <InterruptTim6+0x310>)
 802516a:	f7fc fcb5 	bl	8021ad8 <_ZN10LineSensor6UpdateEv>
            encoder.Update();
 802516e:	4829      	ldr	r0, [pc, #164]	; (8025214 <InterruptTim6+0x324>)
 8025170:	f7fb fdfe 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 8025174:	4828      	ldr	r0, [pc, #160]	; (8025218 <InterruptTim6+0x328>)
 8025176:	f7fe ff03 	bl	8023f80 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 802517a:	4827      	ldr	r0, [pc, #156]	; (8025218 <InterruptTim6+0x328>)
 802517c:	f7ff f92a 	bl	80243d4 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8025180:	4603      	mov	r3, r0
 8025182:	461a      	mov	r2, r3
 8025184:	4b25      	ldr	r3, [pc, #148]	; (802521c <InterruptTim6+0x32c>)
 8025186:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_common_speed = TargetDuty(COMMON_DUTY, COMMON_DUTY);
 8025188:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8025244 <InterruptTim6+0x354>
 802518c:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8025244 <InterruptTim6+0x354>
 8025190:	f000 fc16 	bl	80259c0 <TargetDuty>
 8025194:	eef0 7a40 	vmov.f32	s15, s0
 8025198:	4b2b      	ldr	r3, [pc, #172]	; (8025248 <InterruptTim6+0x358>)
 802519a:	edc3 7a00 	vstr	s15, [r3]
            g_rotat = line_trace.PidControl(LINE_P_1, LINE_I_1, LINE_D_1);
 802519e:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 802520c <InterruptTim6+0x31c>
 80251a2:	eddf 0a1a 	vldr	s1, [pc, #104]	; 802520c <InterruptTim6+0x31c>
 80251a6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 802520c <InterruptTim6+0x31c>
 80251aa:	4821      	ldr	r0, [pc, #132]	; (8025230 <InterruptTim6+0x340>)
 80251ac:	f7fc fe78 	bl	8021ea0 <_ZN9LineTrace10PidControlEfff>
 80251b0:	eef0 7a40 	vmov.f32	s15, s0
 80251b4:	4b1f      	ldr	r3, [pc, #124]	; (8025234 <InterruptTim6+0x344>)
 80251b6:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(g_common_speed, g_rotat);
 80251ba:	4b23      	ldr	r3, [pc, #140]	; (8025248 <InterruptTim6+0x358>)
 80251bc:	edd3 7a00 	vldr	s15, [r3]
 80251c0:	4b1c      	ldr	r3, [pc, #112]	; (8025234 <InterruptTim6+0x344>)
 80251c2:	ed93 7a00 	vldr	s14, [r3]
 80251c6:	eef0 0a47 	vmov.f32	s1, s14
 80251ca:	eeb0 0a67 	vmov.f32	s0, s15
 80251ce:	4810      	ldr	r0, [pc, #64]	; (8025210 <InterruptTim6+0x320>)
 80251d0:	f7fe fc8e 	bl	8023af0 <_ZN5Motor5DriveEff>
            EmergencyStop();
 80251d4:	f000 fb88 	bl	80258e8 <EmergencyStop>
            if(g_run_end == 1)
 80251d8:	4b19      	ldr	r3, [pc, #100]	; (8025240 <InterruptTim6+0x350>)
 80251da:	781b      	ldrb	r3, [r3, #0]
 80251dc:	2b01      	cmp	r3, #1
 80251de:	f040 80ed 	bne.w	80253bc <InterruptTim6+0x4cc>
            {
                led.ColorOrder('Y');
 80251e2:	2159      	movs	r1, #89	; 0x59
 80251e4:	4808      	ldr	r0, [pc, #32]	; (8025208 <InterruptTim6+0x318>)
 80251e6:	f7fc f99d 	bl	8021524 <_ZN3Led10ColorOrderEc>
                g_mode = STANDBY;
 80251ea:	4b04      	ldr	r3, [pc, #16]	; (80251fc <InterruptTim6+0x30c>)
 80251ec:	2200      	movs	r2, #0
 80251ee:	701a      	strb	r2, [r3, #0]
            }
            break;
 80251f0:	e0e4      	b.n	80253bc <InterruptTim6+0x4cc>
 80251f2:	bf00      	nop
 80251f4:	200002f6 	.word	0x200002f6
 80251f8:	200002f9 	.word	0x200002f9
 80251fc:	200002f3 	.word	0x200002f3
 8025200:	20000344 	.word	0x20000344
 8025204:	200002fc 	.word	0x200002fc
 8025208:	20000340 	.word	0x20000340
 802520c:	00000000 	.word	0x00000000
 8025210:	20000768 	.word	0x20000768
 8025214:	20000324 	.word	0x20000324
 8025218:	20000770 	.word	0x20000770
 802521c:	200002fd 	.word	0x200002fd
 8025220:	3fa66666 	.word	0x3fa66666
 8025224:	2000030c 	.word	0x2000030c
 8025228:	20000778 	.word	0x20000778
 802522c:	20000300 	.word	0x20000300
 8025230:	200004d0 	.word	0x200004d0
 8025234:	20000304 	.word	0x20000304
 8025238:	20000308 	.word	0x20000308
 802523c:	20000660 	.word	0x20000660
 8025240:	200002f5 	.word	0x200002f5
 8025244:	3e4ccccd 	.word	0x3e4ccccd
 8025248:	20000310 	.word	0x20000310

        case VELOCITY_CONTROL:
            /* Sensor update */
            line_sensor.Update();
 802524c:	4862      	ldr	r0, [pc, #392]	; (80253d8 <InterruptTim6+0x4e8>)
 802524e:	f7fc fc43 	bl	8021ad8 <_ZN10LineSensor6UpdateEv>
            encoder.Update();
 8025252:	4862      	ldr	r0, [pc, #392]	; (80253dc <InterruptTim6+0x4ec>)
 8025254:	f7fb fd8c 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 8025258:	4861      	ldr	r0, [pc, #388]	; (80253e0 <InterruptTim6+0x4f0>)
 802525a:	f7fe fe91 	bl	8023f80 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 802525e:	4860      	ldr	r0, [pc, #384]	; (80253e0 <InterruptTim6+0x4f0>)
 8025260:	f7ff f8b8 	bl	80243d4 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8025264:	4603      	mov	r3, r0
 8025266:	461a      	mov	r2, r3
 8025268:	4b5e      	ldr	r3, [pc, #376]	; (80253e4 <InterruptTim6+0x4f4>)
 802526a:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_target = TargetVelocity(MIN_VELOCITY, MIN_VELOCITY);
 802526c:	eddf 0a5e 	vldr	s1, [pc, #376]	; 80253e8 <InterruptTim6+0x4f8>
 8025270:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 80253e8 <InterruptTim6+0x4f8>
 8025274:	f000 fb6c 	bl	8025950 <TargetVelocity>
 8025278:	eef0 7a40 	vmov.f32	s15, s0
 802527c:	4b5b      	ldr	r3, [pc, #364]	; (80253ec <InterruptTim6+0x4fc>)
 802527e:	edc3 7a00 	vstr	s15, [r3]
            g_trans = velocity_control.PidControl(g_target, V_P_1, V_I_1, V_D_1);
 8025282:	4b5a      	ldr	r3, [pc, #360]	; (80253ec <InterruptTim6+0x4fc>)
 8025284:	edd3 7a00 	vldr	s15, [r3]
 8025288:	eddf 1a59 	vldr	s3, [pc, #356]	; 80253f0 <InterruptTim6+0x500>
 802528c:	ed9f 1a58 	vldr	s2, [pc, #352]	; 80253f0 <InterruptTim6+0x500>
 8025290:	eddf 0a57 	vldr	s1, [pc, #348]	; 80253f0 <InterruptTim6+0x500>
 8025294:	eeb0 0a67 	vmov.f32	s0, s15
 8025298:	4856      	ldr	r0, [pc, #344]	; (80253f4 <InterruptTim6+0x504>)
 802529a:	f7ff fcc5 	bl	8024c28 <_ZN15VelocityControl10PidControlEffff>
 802529e:	eef0 7a40 	vmov.f32	s15, s0
 80252a2:	4b55      	ldr	r3, [pc, #340]	; (80253f8 <InterruptTim6+0x508>)
 80252a4:	edc3 7a00 	vstr	s15, [r3]
            g_rotat = line_trace.PidControl(LINE_P_1, LINE_I_1, LINE_D_1);
 80252a8:	ed9f 1a51 	vldr	s2, [pc, #324]	; 80253f0 <InterruptTim6+0x500>
 80252ac:	eddf 0a50 	vldr	s1, [pc, #320]	; 80253f0 <InterruptTim6+0x500>
 80252b0:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80253f0 <InterruptTim6+0x500>
 80252b4:	4851      	ldr	r0, [pc, #324]	; (80253fc <InterruptTim6+0x50c>)
 80252b6:	f7fc fdf3 	bl	8021ea0 <_ZN9LineTrace10PidControlEfff>
 80252ba:	eef0 7a40 	vmov.f32	s15, s0
 80252be:	4b50      	ldr	r3, [pc, #320]	; (8025400 <InterruptTim6+0x510>)
 80252c0:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(g_trans, g_rotat);
 80252c4:	4b4c      	ldr	r3, [pc, #304]	; (80253f8 <InterruptTim6+0x508>)
 80252c6:	edd3 7a00 	vldr	s15, [r3]
 80252ca:	4b4d      	ldr	r3, [pc, #308]	; (8025400 <InterruptTim6+0x510>)
 80252cc:	ed93 7a00 	vldr	s14, [r3]
 80252d0:	eef0 0a47 	vmov.f32	s1, s14
 80252d4:	eeb0 0a67 	vmov.f32	s0, s15
 80252d8:	484a      	ldr	r0, [pc, #296]	; (8025404 <InterruptTim6+0x514>)
 80252da:	f7fe fc09 	bl	8023af0 <_ZN5Motor5DriveEff>
            EmergencyStop();
 80252de:	f000 fb03 	bl	80258e8 <EmergencyStop>
            if(g_run_end == 1)
 80252e2:	4b49      	ldr	r3, [pc, #292]	; (8025408 <InterruptTim6+0x518>)
 80252e4:	781b      	ldrb	r3, [r3, #0]
 80252e6:	2b01      	cmp	r3, #1
 80252e8:	d16a      	bne.n	80253c0 <InterruptTim6+0x4d0>
            {
                led.ColorOrder('C');
 80252ea:	2143      	movs	r1, #67	; 0x43
 80252ec:	4847      	ldr	r0, [pc, #284]	; (802540c <InterruptTim6+0x51c>)
 80252ee:	f7fc f919 	bl	8021524 <_ZN3Led10ColorOrderEc>
                g_mode = STANDBY;
 80252f2:	4b47      	ldr	r3, [pc, #284]	; (8025410 <InterruptTim6+0x520>)
 80252f4:	2200      	movs	r2, #0
 80252f6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80252f8:	e062      	b.n	80253c0 <InterruptTim6+0x4d0>

#ifdef DEBUG_MODE
        case INITIAL_DEBUG:
            InitialTest();
 80252fa:	f000 fe9d 	bl	8026038 <InitialTest>
            break;
 80252fe:	e060      	b.n	80253c2 <InterruptTim6+0x4d2>
        
        case LINE_TRACE_DEBUG:
            /* Sensor update */
            line_sensor.Update();
 8025300:	4835      	ldr	r0, [pc, #212]	; (80253d8 <InterruptTim6+0x4e8>)
 8025302:	f7fc fbe9 	bl	8021ad8 <_ZN10LineSensor6UpdateEv>
            encoder.Update();
 8025306:	4835      	ldr	r0, [pc, #212]	; (80253dc <InterruptTim6+0x4ec>)
 8025308:	f7fb fd32 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 802530c:	4834      	ldr	r0, [pc, #208]	; (80253e0 <InterruptTim6+0x4f0>)
 802530e:	f7fe fe37 	bl	8023f80 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 8025312:	4833      	ldr	r0, [pc, #204]	; (80253e0 <InterruptTim6+0x4f0>)
 8025314:	f7ff f85e 	bl	80243d4 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8025318:	4603      	mov	r3, r0
 802531a:	461a      	mov	r2, r3
 802531c:	4b31      	ldr	r3, [pc, #196]	; (80253e4 <InterruptTim6+0x4f4>)
 802531e:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_rotat = line_trace.PidControl(LINE_P_1, LINE_I_1, LINE_D_1);
 8025320:	ed9f 1a33 	vldr	s2, [pc, #204]	; 80253f0 <InterruptTim6+0x500>
 8025324:	eddf 0a32 	vldr	s1, [pc, #200]	; 80253f0 <InterruptTim6+0x500>
 8025328:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80253f0 <InterruptTim6+0x500>
 802532c:	4833      	ldr	r0, [pc, #204]	; (80253fc <InterruptTim6+0x50c>)
 802532e:	f7fc fdb7 	bl	8021ea0 <_ZN9LineTrace10PidControlEfff>
 8025332:	eef0 7a40 	vmov.f32	s15, s0
 8025336:	4b32      	ldr	r3, [pc, #200]	; (8025400 <InterruptTim6+0x510>)
 8025338:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(0, g_rotat);
 802533c:	4b30      	ldr	r3, [pc, #192]	; (8025400 <InterruptTim6+0x510>)
 802533e:	edd3 7a00 	vldr	s15, [r3]
 8025342:	eef0 0a67 	vmov.f32	s1, s15
 8025346:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80253f0 <InterruptTim6+0x500>
 802534a:	482e      	ldr	r0, [pc, #184]	; (8025404 <InterruptTim6+0x514>)
 802534c:	f7fe fbd0 	bl	8023af0 <_ZN5Motor5DriveEff>
            break;
 8025350:	e037      	b.n	80253c2 <InterruptTim6+0x4d2>
        
        case VELOCITY_CONTROL_DEBUG:
            /* Sensor update */
            line_sensor.Update();
 8025352:	4821      	ldr	r0, [pc, #132]	; (80253d8 <InterruptTim6+0x4e8>)
 8025354:	f7fc fbc0 	bl	8021ad8 <_ZN10LineSensor6UpdateEv>
            encoder.Update();
 8025358:	4820      	ldr	r0, [pc, #128]	; (80253dc <InterruptTim6+0x4ec>)
 802535a:	f7fb fd09 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 802535e:	4820      	ldr	r0, [pc, #128]	; (80253e0 <InterruptTim6+0x4f0>)
 8025360:	f7fe fe0e 	bl	8023f80 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 8025364:	481e      	ldr	r0, [pc, #120]	; (80253e0 <InterruptTim6+0x4f0>)
 8025366:	f7ff f835 	bl	80243d4 <_ZN10SideSensor18GetGoalMarkerCountEv>
 802536a:	4603      	mov	r3, r0
 802536c:	461a      	mov	r2, r3
 802536e:	4b1d      	ldr	r3, [pc, #116]	; (80253e4 <InterruptTim6+0x4f4>)
 8025370:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_trans = velocity_control.PidControl(MIN_VELOCITY, V_P_1, V_I_1, V_D_1);
 8025372:	eddf 1a1f 	vldr	s3, [pc, #124]	; 80253f0 <InterruptTim6+0x500>
 8025376:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80253f0 <InterruptTim6+0x500>
 802537a:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80253f0 <InterruptTim6+0x500>
 802537e:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80253e8 <InterruptTim6+0x4f8>
 8025382:	481c      	ldr	r0, [pc, #112]	; (80253f4 <InterruptTim6+0x504>)
 8025384:	f7ff fc50 	bl	8024c28 <_ZN15VelocityControl10PidControlEffff>
 8025388:	eef0 7a40 	vmov.f32	s15, s0
 802538c:	4b1a      	ldr	r3, [pc, #104]	; (80253f8 <InterruptTim6+0x508>)
 802538e:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(g_trans, 0);
 8025392:	4b19      	ldr	r3, [pc, #100]	; (80253f8 <InterruptTim6+0x508>)
 8025394:	edd3 7a00 	vldr	s15, [r3]
 8025398:	eddf 0a15 	vldr	s1, [pc, #84]	; 80253f0 <InterruptTim6+0x500>
 802539c:	eeb0 0a67 	vmov.f32	s0, s15
 80253a0:	4818      	ldr	r0, [pc, #96]	; (8025404 <InterruptTim6+0x514>)
 80253a2:	f7fe fba5 	bl	8023af0 <_ZN5Motor5DriveEff>
            break;
 80253a6:	e00c      	b.n	80253c2 <InterruptTim6+0x4d2>
#endif // DEBUG_MODE

        default:
            motor.Drive(0, 0); break;
 80253a8:	eddf 0a11 	vldr	s1, [pc, #68]	; 80253f0 <InterruptTim6+0x500>
 80253ac:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80253f0 <InterruptTim6+0x500>
 80253b0:	4814      	ldr	r0, [pc, #80]	; (8025404 <InterruptTim6+0x514>)
 80253b2:	f7fe fb9d 	bl	8023af0 <_ZN5Motor5DriveEff>
 80253b6:	e004      	b.n	80253c2 <InterruptTim6+0x4d2>
            break;
 80253b8:	bf00      	nop
 80253ba:	e002      	b.n	80253c2 <InterruptTim6+0x4d2>
            break;
 80253bc:	bf00      	nop
 80253be:	e000      	b.n	80253c2 <InterruptTim6+0x4d2>
            break;
 80253c0:	bf00      	nop
    }
    g_tim6_complete = 1;
 80253c2:	4b14      	ldr	r3, [pc, #80]	; (8025414 <InterruptTim6+0x524>)
 80253c4:	2201      	movs	r2, #1
 80253c6:	701a      	strb	r2, [r3, #0]

#ifdef DEBUG_MODE
    g_tim6++;
 80253c8:	4b13      	ldr	r3, [pc, #76]	; (8025418 <InterruptTim6+0x528>)
 80253ca:	681b      	ldr	r3, [r3, #0]
 80253cc:	3301      	adds	r3, #1
 80253ce:	4a12      	ldr	r2, [pc, #72]	; (8025418 <InterruptTim6+0x528>)
 80253d0:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 80253d2:	bf00      	nop
 80253d4:	bd80      	pop	{r7, pc}
 80253d6:	bf00      	nop
 80253d8:	20000344 	.word	0x20000344
 80253dc:	20000324 	.word	0x20000324
 80253e0:	20000770 	.word	0x20000770
 80253e4:	200002fd 	.word	0x200002fd
 80253e8:	3fa66666 	.word	0x3fa66666
 80253ec:	2000030c 	.word	0x2000030c
 80253f0:	00000000 	.word	0x00000000
 80253f4:	20000778 	.word	0x20000778
 80253f8:	20000300 	.word	0x20000300
 80253fc:	200004d0 	.word	0x200004d0
 8025400:	20000304 	.word	0x20000304
 8025404:	20000768 	.word	0x20000768
 8025408:	200002f5 	.word	0x200002f5
 802540c:	20000340 	.word	0x20000340
 8025410:	200002f3 	.word	0x200002f3
 8025414:	200002f6 	.word	0x200002f6
 8025418:	200002e4 	.word	0x200002e4

0802541c <InterruptTim5>:


void InterruptTim5()
{
 802541c:	b580      	push	{r7, lr}
 802541e:	af00      	add	r7, sp, #0
    if(g_tim5_complete == 0) g_tim5_yet = 0x02;
 8025420:	4b2b      	ldr	r3, [pc, #172]	; (80254d0 <InterruptTim5+0xb4>)
 8025422:	781b      	ldrb	r3, [r3, #0]
 8025424:	2b00      	cmp	r3, #0
 8025426:	d102      	bne.n	802542e <InterruptTim5+0x12>
 8025428:	4b2a      	ldr	r3, [pc, #168]	; (80254d4 <InterruptTim5+0xb8>)
 802542a:	2202      	movs	r2, #2
 802542c:	701a      	strb	r2, [r3, #0]
    g_tim5_complete = 0;
 802542e:	4b28      	ldr	r3, [pc, #160]	; (80254d0 <InterruptTim5+0xb4>)
 8025430:	2200      	movs	r2, #0
 8025432:	701a      	strb	r2, [r3, #0]

    switch(g_mode)
 8025434:	4b28      	ldr	r3, [pc, #160]	; (80254d8 <InterruptTim5+0xbc>)
 8025436:	781b      	ldrb	r3, [r3, #0]
 8025438:	2b01      	cmp	r3, #1
 802543a:	d002      	beq.n	8025442 <InterruptTim5+0x26>
 802543c:	2b02      	cmp	r3, #2
 802543e:	d032      	beq.n	80254a6 <InterruptTim5+0x8a>
        case SECOND_RUN:
            iim_42652.Update();
            if(g_goal_cnt == 1) logger.Loading();
            break;

        default: break;
 8025440:	e03c      	b.n	80254bc <InterruptTim5+0xa0>
            iim_42652.Update();
 8025442:	4826      	ldr	r0, [pc, #152]	; (80254dc <InterruptTim5+0xc0>)
 8025444:	f7fb fff4 	bl	8021430 <_ZN8Iim426526UpdateEv>
            g_process_complete = 0;
 8025448:	4b25      	ldr	r3, [pc, #148]	; (80254e0 <InterruptTim5+0xc4>)
 802544a:	2200      	movs	r2, #0
 802544c:	701a      	strb	r2, [r3, #0]
            g_process_complete |= g_tim6_yet;
 802544e:	4b24      	ldr	r3, [pc, #144]	; (80254e0 <InterruptTim5+0xc4>)
 8025450:	781a      	ldrb	r2, [r3, #0]
 8025452:	4b24      	ldr	r3, [pc, #144]	; (80254e4 <InterruptTim5+0xc8>)
 8025454:	781b      	ldrb	r3, [r3, #0]
 8025456:	4313      	orrs	r3, r2
 8025458:	b2da      	uxtb	r2, r3
 802545a:	4b21      	ldr	r3, [pc, #132]	; (80254e0 <InterruptTim5+0xc4>)
 802545c:	701a      	strb	r2, [r3, #0]
            g_process_complete |= g_tim5_yet;
 802545e:	4b20      	ldr	r3, [pc, #128]	; (80254e0 <InterruptTim5+0xc4>)
 8025460:	781a      	ldrb	r2, [r3, #0]
 8025462:	4b1c      	ldr	r3, [pc, #112]	; (80254d4 <InterruptTim5+0xb8>)
 8025464:	781b      	ldrb	r3, [r3, #0]
 8025466:	4313      	orrs	r3, r2
 8025468:	b2da      	uxtb	r2, r3
 802546a:	4b1d      	ldr	r3, [pc, #116]	; (80254e0 <InterruptTim5+0xc4>)
 802546c:	701a      	strb	r2, [r3, #0]
            g_process_complete |= g_tim2_yet;
 802546e:	4b1c      	ldr	r3, [pc, #112]	; (80254e0 <InterruptTim5+0xc4>)
 8025470:	781a      	ldrb	r2, [r3, #0]
 8025472:	4b1d      	ldr	r3, [pc, #116]	; (80254e8 <InterruptTim5+0xcc>)
 8025474:	781b      	ldrb	r3, [r3, #0]
 8025476:	4313      	orrs	r3, r2
 8025478:	b2da      	uxtb	r2, r3
 802547a:	4b19      	ldr	r3, [pc, #100]	; (80254e0 <InterruptTim5+0xc4>)
 802547c:	701a      	strb	r2, [r3, #0]
            if(g_goal_cnt == 1) logger.Logging(g_process_complete);
 802547e:	4b1b      	ldr	r3, [pc, #108]	; (80254ec <InterruptTim5+0xd0>)
 8025480:	781b      	ldrb	r3, [r3, #0]
 8025482:	2b01      	cmp	r3, #1
 8025484:	d105      	bne.n	8025492 <InterruptTim5+0x76>
 8025486:	4b16      	ldr	r3, [pc, #88]	; (80254e0 <InterruptTim5+0xc4>)
 8025488:	781b      	ldrb	r3, [r3, #0]
 802548a:	4619      	mov	r1, r3
 802548c:	4818      	ldr	r0, [pc, #96]	; (80254f0 <InterruptTim5+0xd4>)
 802548e:	f7fc fe6f 	bl	8022170 <_ZN6Logger7LoggingEh>
            g_tim6_yet = 0;
 8025492:	4b14      	ldr	r3, [pc, #80]	; (80254e4 <InterruptTim5+0xc8>)
 8025494:	2200      	movs	r2, #0
 8025496:	701a      	strb	r2, [r3, #0]
            g_tim5_yet = 0;
 8025498:	4b0e      	ldr	r3, [pc, #56]	; (80254d4 <InterruptTim5+0xb8>)
 802549a:	2200      	movs	r2, #0
 802549c:	701a      	strb	r2, [r3, #0]
            g_tim2_yet = 0;
 802549e:	4b12      	ldr	r3, [pc, #72]	; (80254e8 <InterruptTim5+0xcc>)
 80254a0:	2200      	movs	r2, #0
 80254a2:	701a      	strb	r2, [r3, #0]
            break;
 80254a4:	e00a      	b.n	80254bc <InterruptTim5+0xa0>
            iim_42652.Update();
 80254a6:	480d      	ldr	r0, [pc, #52]	; (80254dc <InterruptTim5+0xc0>)
 80254a8:	f7fb ffc2 	bl	8021430 <_ZN8Iim426526UpdateEv>
            if(g_goal_cnt == 1) logger.Loading();
 80254ac:	4b0f      	ldr	r3, [pc, #60]	; (80254ec <InterruptTim5+0xd0>)
 80254ae:	781b      	ldrb	r3, [r3, #0]
 80254b0:	2b01      	cmp	r3, #1
 80254b2:	d102      	bne.n	80254ba <InterruptTim5+0x9e>
 80254b4:	480e      	ldr	r0, [pc, #56]	; (80254f0 <InterruptTim5+0xd4>)
 80254b6:	f7fd f99b 	bl	80227f0 <_ZN6Logger7LoadingEv>
            break;
 80254ba:	bf00      	nop
    }
    g_tim5_complete = 1;
 80254bc:	4b04      	ldr	r3, [pc, #16]	; (80254d0 <InterruptTim5+0xb4>)
 80254be:	2201      	movs	r2, #1
 80254c0:	701a      	strb	r2, [r3, #0]

#ifdef DEBUG_MODE
    g_tim5++;
 80254c2:	4b0c      	ldr	r3, [pc, #48]	; (80254f4 <InterruptTim5+0xd8>)
 80254c4:	681b      	ldr	r3, [r3, #0]
 80254c6:	3301      	adds	r3, #1
 80254c8:	4a0a      	ldr	r2, [pc, #40]	; (80254f4 <InterruptTim5+0xd8>)
 80254ca:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 80254cc:	bf00      	nop
 80254ce:	bd80      	pop	{r7, pc}
 80254d0:	200002f7 	.word	0x200002f7
 80254d4:	200002fa 	.word	0x200002fa
 80254d8:	200002f3 	.word	0x200002f3
 80254dc:	20000338 	.word	0x20000338
 80254e0:	20000314 	.word	0x20000314
 80254e4:	200002f9 	.word	0x200002f9
 80254e8:	200002fb 	.word	0x200002fb
 80254ec:	200002fd 	.word	0x200002fd
 80254f0:	20000660 	.word	0x20000660
 80254f4:	200002e8 	.word	0x200002e8

080254f8 <InterruptTim2>:


void InterruptTim2()
{
 80254f8:	b580      	push	{r7, lr}
 80254fa:	af00      	add	r7, sp, #0
    if(g_tim2_complete == 0) g_tim2_yet = 0x02;
 80254fc:	4b22      	ldr	r3, [pc, #136]	; (8025588 <InterruptTim2+0x90>)
 80254fe:	781b      	ldrb	r3, [r3, #0]
 8025500:	2b00      	cmp	r3, #0
 8025502:	d102      	bne.n	802550a <InterruptTim2+0x12>
 8025504:	4b21      	ldr	r3, [pc, #132]	; (802558c <InterruptTim2+0x94>)
 8025506:	2202      	movs	r2, #2
 8025508:	701a      	strb	r2, [r3, #0]
    g_tim2_complete = 0;
 802550a:	4b1f      	ldr	r3, [pc, #124]	; (8025588 <InterruptTim2+0x90>)
 802550c:	2200      	movs	r2, #0
 802550e:	701a      	strb	r2, [r3, #0]

    if(g_emergency_stop == 1) g_mode =STANDBY;
 8025510:	4b1f      	ldr	r3, [pc, #124]	; (8025590 <InterruptTim2+0x98>)
 8025512:	781b      	ldrb	r3, [r3, #0]
 8025514:	2b01      	cmp	r3, #1
 8025516:	d102      	bne.n	802551e <InterruptTim2+0x26>
 8025518:	4b1e      	ldr	r3, [pc, #120]	; (8025594 <InterruptTim2+0x9c>)
 802551a:	2200      	movs	r2, #0
 802551c:	701a      	strb	r2, [r3, #0]

    switch(g_mode)
 802551e:	4b1d      	ldr	r3, [pc, #116]	; (8025594 <InterruptTim2+0x9c>)
 8025520:	781b      	ldrb	r3, [r3, #0]
 8025522:	2b01      	cmp	r3, #1
 8025524:	d000      	beq.n	8025528 <InterruptTim2+0x30>
                if(g_store_periodic_log + g_store_accel_log != 0) g_first_log_failed = 1;
            }
            else if(g_run_end == 1) g_mode = FIRST_GOAL;
            break;

        default: break;
 8025526:	e025      	b.n	8025574 <InterruptTim2+0x7c>
            if(g_goal_cnt == 1)
 8025528:	4b1b      	ldr	r3, [pc, #108]	; (8025598 <InterruptTim2+0xa0>)
 802552a:	781b      	ldrb	r3, [r3, #0]
 802552c:	2b01      	cmp	r3, #1
 802552e:	d119      	bne.n	8025564 <InterruptTim2+0x6c>
                g_store_periodic_log = logger.StorePeriodicLog();
 8025530:	481a      	ldr	r0, [pc, #104]	; (802559c <InterruptTim2+0xa4>)
 8025532:	f7fd f833 	bl	802259c <_ZN6Logger16StorePeriodicLogEv>
 8025536:	4603      	mov	r3, r0
 8025538:	461a      	mov	r2, r3
 802553a:	4b19      	ldr	r3, [pc, #100]	; (80255a0 <InterruptTim2+0xa8>)
 802553c:	701a      	strb	r2, [r3, #0]
                g_store_accel_log = logger.StoreAccelPositionLog();
 802553e:	4817      	ldr	r0, [pc, #92]	; (802559c <InterruptTim2+0xa4>)
 8025540:	f7fd f8ca 	bl	80226d8 <_ZN6Logger21StoreAccelPositionLogEv>
 8025544:	4603      	mov	r3, r0
 8025546:	461a      	mov	r2, r3
 8025548:	4b16      	ldr	r3, [pc, #88]	; (80255a4 <InterruptTim2+0xac>)
 802554a:	701a      	strb	r2, [r3, #0]
                if(g_store_periodic_log + g_store_accel_log != 0) g_first_log_failed = 1;
 802554c:	4b14      	ldr	r3, [pc, #80]	; (80255a0 <InterruptTim2+0xa8>)
 802554e:	781b      	ldrb	r3, [r3, #0]
 8025550:	461a      	mov	r2, r3
 8025552:	4b14      	ldr	r3, [pc, #80]	; (80255a4 <InterruptTim2+0xac>)
 8025554:	781b      	ldrb	r3, [r3, #0]
 8025556:	4413      	add	r3, r2
 8025558:	2b00      	cmp	r3, #0
 802555a:	d00a      	beq.n	8025572 <InterruptTim2+0x7a>
 802555c:	4b12      	ldr	r3, [pc, #72]	; (80255a8 <InterruptTim2+0xb0>)
 802555e:	2201      	movs	r2, #1
 8025560:	701a      	strb	r2, [r3, #0]
            break;
 8025562:	e006      	b.n	8025572 <InterruptTim2+0x7a>
            else if(g_run_end == 1) g_mode = FIRST_GOAL;
 8025564:	4b11      	ldr	r3, [pc, #68]	; (80255ac <InterruptTim2+0xb4>)
 8025566:	781b      	ldrb	r3, [r3, #0]
 8025568:	2b01      	cmp	r3, #1
 802556a:	d102      	bne.n	8025572 <InterruptTim2+0x7a>
 802556c:	4b09      	ldr	r3, [pc, #36]	; (8025594 <InterruptTim2+0x9c>)
 802556e:	2210      	movs	r2, #16
 8025570:	701a      	strb	r2, [r3, #0]
            break;
 8025572:	bf00      	nop
    }
    g_tim2_complete = 1;
 8025574:	4b04      	ldr	r3, [pc, #16]	; (8025588 <InterruptTim2+0x90>)
 8025576:	2201      	movs	r2, #1
 8025578:	701a      	strb	r2, [r3, #0]

#ifdef DEBUG_MODE
    g_tim2++;
 802557a:	4b0d      	ldr	r3, [pc, #52]	; (80255b0 <InterruptTim2+0xb8>)
 802557c:	681b      	ldr	r3, [r3, #0]
 802557e:	3301      	adds	r3, #1
 8025580:	4a0b      	ldr	r2, [pc, #44]	; (80255b0 <InterruptTim2+0xb8>)
 8025582:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8025584:	bf00      	nop
 8025586:	bd80      	pop	{r7, pc}
 8025588:	200002f8 	.word	0x200002f8
 802558c:	200002fb 	.word	0x200002fb
 8025590:	200002f4 	.word	0x200002f4
 8025594:	200002f3 	.word	0x200002f3
 8025598:	200002fd 	.word	0x200002fd
 802559c:	20000660 	.word	0x20000660
 80255a0:	20000309 	.word	0x20000309
 80255a4:	2000030a 	.word	0x2000030a
 80255a8:	20000308 	.word	0x20000308
 80255ac:	200002f5 	.word	0x200002f5
 80255b0:	200002ec 	.word	0x200002ec

080255b4 <Loop>:


void Loop()
{
 80255b4:	b580      	push	{r7, lr}
 80255b6:	af00      	add	r7, sp, #0
    g_main_while_reset = 0;
 80255b8:	4bbf      	ldr	r3, [pc, #764]	; (80258b8 <Loop+0x304>)
 80255ba:	2200      	movs	r2, #0
 80255bc:	701a      	strb	r2, [r3, #0]
    g_switch_state = rotary_switch.State();
 80255be:	48bf      	ldr	r0, [pc, #764]	; (80258bc <Loop+0x308>)
 80255c0:	f7fe fbd0 	bl	8023d64 <_ZN12RotarySwitch5StateEv>
 80255c4:	4603      	mov	r3, r0
 80255c6:	461a      	mov	r2, r3
 80255c8:	4bbd      	ldr	r3, [pc, #756]	; (80258c0 <Loop+0x30c>)
 80255ca:	701a      	strb	r2, [r3, #0]

    switch(g_switch_state)
 80255cc:	4bbc      	ldr	r3, [pc, #752]	; (80258c0 <Loop+0x30c>)
 80255ce:	781b      	ldrb	r3, [r3, #0]
 80255d0:	2b0f      	cmp	r3, #15
 80255d2:	f200 8137 	bhi.w	8025844 <Loop+0x290>
 80255d6:	a201      	add	r2, pc, #4	; (adr r2, 80255dc <Loop+0x28>)
 80255d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80255dc:	08025757 	.word	0x08025757
 80255e0:	08025783 	.word	0x08025783
 80255e4:	080257b1 	.word	0x080257b1
 80255e8:	08025845 	.word	0x08025845
 80255ec:	080257dd 	.word	0x080257dd
 80255f0:	08025811 	.word	0x08025811
 80255f4:	08025845 	.word	0x08025845
 80255f8:	08025845 	.word	0x08025845
 80255fc:	08025845 	.word	0x08025845
 8025600:	08025845 	.word	0x08025845
 8025604:	08025845 	.word	0x08025845
 8025608:	0802561d 	.word	0x0802561d
 802560c:	08025687 	.word	0x08025687
 8025610:	080256bf 	.word	0x080256bf
 8025614:	080256f7 	.word	0x080256f7
 8025618:	08025727 	.word	0x08025727
    {
#ifdef DEBUG_MODE
        case 0x0B: // Flash debug
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 802561c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025620:	f000 fe5e 	bl	80262e0 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025624:	4ba4      	ldr	r3, [pc, #656]	; (80258b8 <Loop+0x304>)
 8025626:	781b      	ldrb	r3, [r3, #0]
 8025628:	2b01      	cmp	r3, #1
 802562a:	f000 8121 	beq.w	8025870 <Loop+0x2bc>
            led.Blink(3, 'R', 'X');
 802562e:	2358      	movs	r3, #88	; 0x58
 8025630:	2252      	movs	r2, #82	; 0x52
 8025632:	2103      	movs	r1, #3
 8025634:	48a3      	ldr	r0, [pc, #652]	; (80258c4 <Loop+0x310>)
 8025636:	f7fc f851 	bl	80216dc <_ZN3Led5BlinkEhcc>
            g_mode = STANDBY;
 802563a:	4ba3      	ldr	r3, [pc, #652]	; (80258c8 <Loop+0x314>)
 802563c:	2200      	movs	r2, #0
 802563e:	701a      	strb	r2, [r3, #0]
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025640:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025644:	f000 fe4c 	bl	80262e0 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025648:	4b9b      	ldr	r3, [pc, #620]	; (80258b8 <Loop+0x304>)
 802564a:	781b      	ldrb	r3, [r3, #0]
 802564c:	2b01      	cmp	r3, #1
 802564e:	f000 8111 	beq.w	8025874 <Loop+0x2c0>

            led.Blink(3, 'R', 'X');
 8025652:	2358      	movs	r3, #88	; 0x58
 8025654:	2252      	movs	r2, #82	; 0x52
 8025656:	2103      	movs	r1, #3
 8025658:	489a      	ldr	r0, [pc, #616]	; (80258c4 <Loop+0x310>)
 802565a:	f7fc f83f 	bl	80216dc <_ZN3Led5BlinkEhcc>
            g_flash_test = FlashTest();
 802565e:	f000 f9f5 	bl	8025a4c <FlashTest>
 8025662:	4603      	mov	r3, r0
 8025664:	461a      	mov	r2, r3
 8025666:	4b99      	ldr	r3, [pc, #612]	; (80258cc <Loop+0x318>)
 8025668:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0)
 802566a:	4b93      	ldr	r3, [pc, #588]	; (80258b8 <Loop+0x304>)
 802566c:	781b      	ldrb	r3, [r3, #0]
 802566e:	2b00      	cmp	r3, #0
 8025670:	f040 8102 	bne.w	8025878 <Loop+0x2c4>
            {
                if(g_flash_test == 0x0E) led.Rainbow(1);
 8025674:	4b95      	ldr	r3, [pc, #596]	; (80258cc <Loop+0x318>)
 8025676:	781b      	ldrb	r3, [r3, #0]
 8025678:	2b0e      	cmp	r3, #14
 802567a:	d1f6      	bne.n	802566a <Loop+0xb6>
 802567c:	2101      	movs	r1, #1
 802567e:	4891      	ldr	r0, [pc, #580]	; (80258c4 <Loop+0x310>)
 8025680:	f7fc f859 	bl	8021736 <_ZN3Led7RainbowEh>
            while(g_main_while_reset == 0)
 8025684:	e7f1      	b.n	802566a <Loop+0xb6>
            }
            break;

        case 0x0C: // Velocity control debug
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025686:	f640 30b8 	movw	r0, #3000	; 0xbb8
 802568a:	f000 fe29 	bl	80262e0 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 802568e:	4b8a      	ldr	r3, [pc, #552]	; (80258b8 <Loop+0x304>)
 8025690:	781b      	ldrb	r3, [r3, #0]
 8025692:	2b01      	cmp	r3, #1
 8025694:	f000 80f2 	beq.w	802587c <Loop+0x2c8>

            led.Blink(3, 'G', 'B');
 8025698:	2342      	movs	r3, #66	; 0x42
 802569a:	2247      	movs	r2, #71	; 0x47
 802569c:	2103      	movs	r1, #3
 802569e:	4889      	ldr	r0, [pc, #548]	; (80258c4 <Loop+0x310>)
 80256a0:	f7fc f81c 	bl	80216dc <_ZN3Led5BlinkEhcc>
            led.ColorOrder('X');
 80256a4:	2158      	movs	r1, #88	; 0x58
 80256a6:	4887      	ldr	r0, [pc, #540]	; (80258c4 <Loop+0x310>)
 80256a8:	f7fb ff3c 	bl	8021524 <_ZN3Led10ColorOrderEc>
            g_mode = VELOCITY_CONTROL_DEBUG;
 80256ac:	4b86      	ldr	r3, [pc, #536]	; (80258c8 <Loop+0x314>)
 80256ae:	220c      	movs	r2, #12
 80256b0:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 80256b2:	4b81      	ldr	r3, [pc, #516]	; (80258b8 <Loop+0x304>)
 80256b4:	781b      	ldrb	r3, [r3, #0]
 80256b6:	2b00      	cmp	r3, #0
 80256b8:	f040 80e2 	bne.w	8025880 <Loop+0x2cc>
 80256bc:	e7f9      	b.n	80256b2 <Loop+0xfe>
            break;

        case 0x0D: // Line trace debug
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 80256be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80256c2:	f000 fe0d 	bl	80262e0 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 80256c6:	4b7c      	ldr	r3, [pc, #496]	; (80258b8 <Loop+0x304>)
 80256c8:	781b      	ldrb	r3, [r3, #0]
 80256ca:	2b01      	cmp	r3, #1
 80256cc:	f000 80da 	beq.w	8025884 <Loop+0x2d0>

            led.Blink(3, 'G', 'Y');
 80256d0:	2359      	movs	r3, #89	; 0x59
 80256d2:	2247      	movs	r2, #71	; 0x47
 80256d4:	2103      	movs	r1, #3
 80256d6:	487b      	ldr	r0, [pc, #492]	; (80258c4 <Loop+0x310>)
 80256d8:	f7fc f800 	bl	80216dc <_ZN3Led5BlinkEhcc>
            led.ColorOrder('X');
 80256dc:	2158      	movs	r1, #88	; 0x58
 80256de:	4879      	ldr	r0, [pc, #484]	; (80258c4 <Loop+0x310>)
 80256e0:	f7fb ff20 	bl	8021524 <_ZN3Led10ColorOrderEc>
            g_mode = LINE_TRACE_DEBUG;
 80256e4:	4b78      	ldr	r3, [pc, #480]	; (80258c8 <Loop+0x314>)
 80256e6:	220d      	movs	r2, #13
 80256e8:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 80256ea:	4b73      	ldr	r3, [pc, #460]	; (80258b8 <Loop+0x304>)
 80256ec:	781b      	ldrb	r3, [r3, #0]
 80256ee:	2b00      	cmp	r3, #0
 80256f0:	f040 80ca 	bne.w	8025888 <Loop+0x2d4>
 80256f4:	e7f9      	b.n	80256ea <Loop+0x136>
            break;

        case 0x0E: // Initial debug
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 80256f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80256fa:	f000 fdf1 	bl	80262e0 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 80256fe:	4b6e      	ldr	r3, [pc, #440]	; (80258b8 <Loop+0x304>)
 8025700:	781b      	ldrb	r3, [r3, #0]
 8025702:	2b01      	cmp	r3, #1
 8025704:	f000 80c2 	beq.w	802588c <Loop+0x2d8>

            led.Blink(3, 'G', 'X');
 8025708:	2358      	movs	r3, #88	; 0x58
 802570a:	2247      	movs	r2, #71	; 0x47
 802570c:	2103      	movs	r1, #3
 802570e:	486d      	ldr	r0, [pc, #436]	; (80258c4 <Loop+0x310>)
 8025710:	f7fb ffe4 	bl	80216dc <_ZN3Led5BlinkEhcc>
            g_mode = INITIAL_DEBUG;
 8025714:	4b6c      	ldr	r3, [pc, #432]	; (80258c8 <Loop+0x314>)
 8025716:	220e      	movs	r2, #14
 8025718:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 802571a:	4b67      	ldr	r3, [pc, #412]	; (80258b8 <Loop+0x304>)
 802571c:	781b      	ldrb	r3, [r3, #0]
 802571e:	2b00      	cmp	r3, #0
 8025720:	f040 80b6 	bne.w	8025890 <Loop+0x2dc>
 8025724:	e7f9      	b.n	802571a <Loop+0x166>
            }
            break;
#endif // DEBUG_MODE

        case 0x0F:
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025726:	f640 30b8 	movw	r0, #3000	; 0xbb8
 802572a:	f000 fdd9 	bl	80262e0 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 802572e:	4b62      	ldr	r3, [pc, #392]	; (80258b8 <Loop+0x304>)
 8025730:	781b      	ldrb	r3, [r3, #0]
 8025732:	2b01      	cmp	r3, #1
 8025734:	f000 80ae 	beq.w	8025894 <Loop+0x2e0>

            led.Blink(3, 'Y', 'X');
 8025738:	2358      	movs	r3, #88	; 0x58
 802573a:	2259      	movs	r2, #89	; 0x59
 802573c:	2103      	movs	r1, #3
 802573e:	4861      	ldr	r0, [pc, #388]	; (80258c4 <Loop+0x310>)
 8025740:	f7fb ffcc 	bl	80216dc <_ZN3Led5BlinkEhcc>
            g_mode = READY;
 8025744:	4b60      	ldr	r3, [pc, #384]	; (80258c8 <Loop+0x314>)
 8025746:	220f      	movs	r2, #15
 8025748:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 802574a:	4b5b      	ldr	r3, [pc, #364]	; (80258b8 <Loop+0x304>)
 802574c:	781b      	ldrb	r3, [r3, #0]
 802574e:	2b00      	cmp	r3, #0
 8025750:	f040 80a2 	bne.w	8025898 <Loop+0x2e4>
 8025754:	e7f9      	b.n	802574a <Loop+0x196>
            break;

        case 0x00:
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025756:	f640 30b8 	movw	r0, #3000	; 0xbb8
 802575a:	f000 fdc1 	bl	80262e0 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 802575e:	4b56      	ldr	r3, [pc, #344]	; (80258b8 <Loop+0x304>)
 8025760:	781b      	ldrb	r3, [r3, #0]
 8025762:	2b01      	cmp	r3, #1
 8025764:	f000 809a 	beq.w	802589c <Loop+0x2e8>

            g_mode = STANDBY;
 8025768:	4b57      	ldr	r3, [pc, #348]	; (80258c8 <Loop+0x314>)
 802576a:	2200      	movs	r2, #0
 802576c:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) { led.Rainbow(1); }
 802576e:	4b52      	ldr	r3, [pc, #328]	; (80258b8 <Loop+0x304>)
 8025770:	781b      	ldrb	r3, [r3, #0]
 8025772:	2b00      	cmp	r3, #0
 8025774:	f040 8094 	bne.w	80258a0 <Loop+0x2ec>
 8025778:	2101      	movs	r1, #1
 802577a:	4852      	ldr	r0, [pc, #328]	; (80258c4 <Loop+0x310>)
 802577c:	f7fb ffdb 	bl	8021736 <_ZN3Led7RainbowEh>
 8025780:	e7f5      	b.n	802576e <Loop+0x1ba>
            break;

        case 0x01:
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025782:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025786:	f000 fdab 	bl	80262e0 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 802578a:	4b4b      	ldr	r3, [pc, #300]	; (80258b8 <Loop+0x304>)
 802578c:	781b      	ldrb	r3, [r3, #0]
 802578e:	2b01      	cmp	r3, #1
 8025790:	f000 8088 	beq.w	80258a4 <Loop+0x2f0>

            led.Blink(3, 'B', 'X');
 8025794:	2358      	movs	r3, #88	; 0x58
 8025796:	2242      	movs	r2, #66	; 0x42
 8025798:	2103      	movs	r1, #3
 802579a:	484a      	ldr	r0, [pc, #296]	; (80258c4 <Loop+0x310>)
 802579c:	f7fb ff9e 	bl	80216dc <_ZN3Led5BlinkEhcc>
            g_mode = FIRST_RUN;
 80257a0:	4b49      	ldr	r3, [pc, #292]	; (80258c8 <Loop+0x314>)
 80257a2:	2201      	movs	r2, #1
 80257a4:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 80257a6:	4b44      	ldr	r3, [pc, #272]	; (80258b8 <Loop+0x304>)
 80257a8:	781b      	ldrb	r3, [r3, #0]
 80257aa:	2b00      	cmp	r3, #0
 80257ac:	d17c      	bne.n	80258a8 <Loop+0x2f4>
 80257ae:	e7fa      	b.n	80257a6 <Loop+0x1f2>
            break;

        case 0x02:
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 80257b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80257b4:	f000 fd94 	bl	80262e0 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 80257b8:	4b3f      	ldr	r3, [pc, #252]	; (80258b8 <Loop+0x304>)
 80257ba:	781b      	ldrb	r3, [r3, #0]
 80257bc:	2b01      	cmp	r3, #1
 80257be:	d075      	beq.n	80258ac <Loop+0x2f8>

            led.Blink(3, 'M', 'X');
 80257c0:	2358      	movs	r3, #88	; 0x58
 80257c2:	224d      	movs	r2, #77	; 0x4d
 80257c4:	2103      	movs	r1, #3
 80257c6:	483f      	ldr	r0, [pc, #252]	; (80258c4 <Loop+0x310>)
 80257c8:	f7fb ff88 	bl	80216dc <_ZN3Led5BlinkEhcc>
            g_mode = SECOND_RUN;
 80257cc:	4b3e      	ldr	r3, [pc, #248]	; (80258c8 <Loop+0x314>)
 80257ce:	2202      	movs	r2, #2
 80257d0:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 80257d2:	4b39      	ldr	r3, [pc, #228]	; (80258b8 <Loop+0x304>)
 80257d4:	781b      	ldrb	r3, [r3, #0]
 80257d6:	2b00      	cmp	r3, #0
 80257d8:	d16a      	bne.n	80258b0 <Loop+0x2fc>
 80257da:	e7fa      	b.n	80257d2 <Loop+0x21e>
            break;

        case 0x04: // Velocity control
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 80257dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80257e0:	f000 fd7e 	bl	80262e0 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 80257e4:	4b34      	ldr	r3, [pc, #208]	; (80258b8 <Loop+0x304>)
 80257e6:	781b      	ldrb	r3, [r3, #0]
 80257e8:	2b01      	cmp	r3, #1
 80257ea:	d063      	beq.n	80258b4 <Loop+0x300>

            led.Blink(3, 'G', 'B');
 80257ec:	2342      	movs	r3, #66	; 0x42
 80257ee:	2247      	movs	r2, #71	; 0x47
 80257f0:	2103      	movs	r1, #3
 80257f2:	4834      	ldr	r0, [pc, #208]	; (80258c4 <Loop+0x310>)
 80257f4:	f7fb ff72 	bl	80216dc <_ZN3Led5BlinkEhcc>
            led.ColorOrder('X');
 80257f8:	2158      	movs	r1, #88	; 0x58
 80257fa:	4832      	ldr	r0, [pc, #200]	; (80258c4 <Loop+0x310>)
 80257fc:	f7fb fe92 	bl	8021524 <_ZN3Led10ColorOrderEc>
            g_mode = VELOCITY_CONTROL;
 8025800:	4b31      	ldr	r3, [pc, #196]	; (80258c8 <Loop+0x314>)
 8025802:	2204      	movs	r2, #4
 8025804:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 8025806:	4b2c      	ldr	r3, [pc, #176]	; (80258b8 <Loop+0x304>)
 8025808:	781b      	ldrb	r3, [r3, #0]
 802580a:	2b00      	cmp	r3, #0
 802580c:	d160      	bne.n	80258d0 <Loop+0x31c>
 802580e:	e7fa      	b.n	8025806 <Loop+0x252>
            break;

        case 0x05: // Line trace
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025810:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025814:	f000 fd64 	bl	80262e0 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025818:	4b27      	ldr	r3, [pc, #156]	; (80258b8 <Loop+0x304>)
 802581a:	781b      	ldrb	r3, [r3, #0]
 802581c:	2b01      	cmp	r3, #1
 802581e:	d059      	beq.n	80258d4 <Loop+0x320>

            led.Blink(3, 'G', 'Y');
 8025820:	2359      	movs	r3, #89	; 0x59
 8025822:	2247      	movs	r2, #71	; 0x47
 8025824:	2103      	movs	r1, #3
 8025826:	4827      	ldr	r0, [pc, #156]	; (80258c4 <Loop+0x310>)
 8025828:	f7fb ff58 	bl	80216dc <_ZN3Led5BlinkEhcc>
            led.ColorOrder('X');
 802582c:	2158      	movs	r1, #88	; 0x58
 802582e:	4825      	ldr	r0, [pc, #148]	; (80258c4 <Loop+0x310>)
 8025830:	f7fb fe78 	bl	8021524 <_ZN3Led10ColorOrderEc>
            g_mode = LINE_TRACE;
 8025834:	4b24      	ldr	r3, [pc, #144]	; (80258c8 <Loop+0x314>)
 8025836:	2205      	movs	r2, #5
 8025838:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 802583a:	4b1f      	ldr	r3, [pc, #124]	; (80258b8 <Loop+0x304>)
 802583c:	781b      	ldrb	r3, [r3, #0]
 802583e:	2b00      	cmp	r3, #0
 8025840:	d14a      	bne.n	80258d8 <Loop+0x324>
 8025842:	e7fa      	b.n	802583a <Loop+0x286>
            break;

        default:
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025844:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025848:	f000 fd4a 	bl	80262e0 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 802584c:	4b1a      	ldr	r3, [pc, #104]	; (80258b8 <Loop+0x304>)
 802584e:	781b      	ldrb	r3, [r3, #0]
 8025850:	2b01      	cmp	r3, #1
 8025852:	d043      	beq.n	80258dc <Loop+0x328>

            g_mode = STANDBY;
 8025854:	4b1c      	ldr	r3, [pc, #112]	; (80258c8 <Loop+0x314>)
 8025856:	2200      	movs	r2, #0
 8025858:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) { led.Blink(1, 'W', 'X'); }
 802585a:	4b17      	ldr	r3, [pc, #92]	; (80258b8 <Loop+0x304>)
 802585c:	781b      	ldrb	r3, [r3, #0]
 802585e:	2b00      	cmp	r3, #0
 8025860:	d13e      	bne.n	80258e0 <Loop+0x32c>
 8025862:	2358      	movs	r3, #88	; 0x58
 8025864:	2257      	movs	r2, #87	; 0x57
 8025866:	2101      	movs	r1, #1
 8025868:	4816      	ldr	r0, [pc, #88]	; (80258c4 <Loop+0x310>)
 802586a:	f7fb ff37 	bl	80216dc <_ZN3Led5BlinkEhcc>
 802586e:	e7f4      	b.n	802585a <Loop+0x2a6>
            if(g_main_while_reset == 1) break;
 8025870:	bf00      	nop
 8025872:	e036      	b.n	80258e2 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025874:	bf00      	nop
 8025876:	e034      	b.n	80258e2 <Loop+0x32e>
            break;
 8025878:	bf00      	nop
 802587a:	e032      	b.n	80258e2 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 802587c:	bf00      	nop
 802587e:	e030      	b.n	80258e2 <Loop+0x32e>
            break;
 8025880:	bf00      	nop
 8025882:	e02e      	b.n	80258e2 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025884:	bf00      	nop
 8025886:	e02c      	b.n	80258e2 <Loop+0x32e>
            break;
 8025888:	bf00      	nop
 802588a:	e02a      	b.n	80258e2 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 802588c:	bf00      	nop
 802588e:	e028      	b.n	80258e2 <Loop+0x32e>
            break;
 8025890:	bf00      	nop
 8025892:	e026      	b.n	80258e2 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025894:	bf00      	nop
 8025896:	e024      	b.n	80258e2 <Loop+0x32e>
            break;
 8025898:	bf00      	nop
 802589a:	e022      	b.n	80258e2 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 802589c:	bf00      	nop
 802589e:	e020      	b.n	80258e2 <Loop+0x32e>
            break;
 80258a0:	bf00      	nop
 80258a2:	e01e      	b.n	80258e2 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 80258a4:	bf00      	nop
 80258a6:	e01c      	b.n	80258e2 <Loop+0x32e>
            break;
 80258a8:	bf00      	nop
 80258aa:	e01a      	b.n	80258e2 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 80258ac:	bf00      	nop
 80258ae:	e018      	b.n	80258e2 <Loop+0x32e>
            break;
 80258b0:	bf00      	nop
 80258b2:	e016      	b.n	80258e2 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 80258b4:	bf00      	nop
 80258b6:	e014      	b.n	80258e2 <Loop+0x32e>
 80258b8:	200002f1 	.word	0x200002f1
 80258bc:	2000076c 	.word	0x2000076c
 80258c0:	200002f2 	.word	0x200002f2
 80258c4:	20000340 	.word	0x20000340
 80258c8:	200002f3 	.word	0x200002f3
 80258cc:	200002f0 	.word	0x200002f0
            break;
 80258d0:	bf00      	nop
 80258d2:	e006      	b.n	80258e2 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 80258d4:	bf00      	nop
 80258d6:	e004      	b.n	80258e2 <Loop+0x32e>
            break;
 80258d8:	bf00      	nop
 80258da:	e002      	b.n	80258e2 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 80258dc:	bf00      	nop
 80258de:	e000      	b.n	80258e2 <Loop+0x32e>
            break;
 80258e0:	bf00      	nop
    }
}
 80258e2:	bf00      	nop
 80258e4:	bd80      	pop	{r7, pc}
 80258e6:	bf00      	nop

080258e8 <EmergencyStop>:


void EmergencyStop()
{
 80258e8:	b580      	push	{r7, lr}
 80258ea:	af00      	add	r7, sp, #0
    static uint8_t emergency_cnt = 0;

    if(emergency_cnt >= EMERGENCY_STOP_COUNT)
 80258ec:	4b12      	ldr	r3, [pc, #72]	; (8025938 <EmergencyStop+0x50>)
 80258ee:	781b      	ldrb	r3, [r3, #0]
 80258f0:	2b04      	cmp	r3, #4
 80258f2:	d90e      	bls.n	8025912 <EmergencyStop+0x2a>
    {
        motor.Drive(0, 0);
 80258f4:	eddf 0a11 	vldr	s1, [pc, #68]	; 802593c <EmergencyStop+0x54>
 80258f8:	ed9f 0a10 	vldr	s0, [pc, #64]	; 802593c <EmergencyStop+0x54>
 80258fc:	4810      	ldr	r0, [pc, #64]	; (8025940 <EmergencyStop+0x58>)
 80258fe:	f7fe f8f7 	bl	8023af0 <_ZN5Motor5DriveEff>
        led.ColorOrder('W');
 8025902:	2157      	movs	r1, #87	; 0x57
 8025904:	480f      	ldr	r0, [pc, #60]	; (8025944 <EmergencyStop+0x5c>)
 8025906:	f7fb fe0d 	bl	8021524 <_ZN3Led10ColorOrderEc>
        g_emergency_stop = 1;
 802590a:	4b0f      	ldr	r3, [pc, #60]	; (8025948 <EmergencyStop+0x60>)
 802590c:	2201      	movs	r2, #1
 802590e:	701a      	strb	r2, [r3, #0]
    }
    else if(line_sensor.GetEmergencyStopFlag() == 1) emergency_cnt++;
    else emergency_cnt = 0;
}
 8025910:	e00f      	b.n	8025932 <EmergencyStop+0x4a>
    else if(line_sensor.GetEmergencyStopFlag() == 1) emergency_cnt++;
 8025912:	480e      	ldr	r0, [pc, #56]	; (802594c <EmergencyStop+0x64>)
 8025914:	f7fc f9a0 	bl	8021c58 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 8025918:	4603      	mov	r3, r0
 802591a:	2b00      	cmp	r3, #0
 802591c:	d006      	beq.n	802592c <EmergencyStop+0x44>
 802591e:	4b06      	ldr	r3, [pc, #24]	; (8025938 <EmergencyStop+0x50>)
 8025920:	781b      	ldrb	r3, [r3, #0]
 8025922:	3301      	adds	r3, #1
 8025924:	b2da      	uxtb	r2, r3
 8025926:	4b04      	ldr	r3, [pc, #16]	; (8025938 <EmergencyStop+0x50>)
 8025928:	701a      	strb	r2, [r3, #0]
}
 802592a:	e002      	b.n	8025932 <EmergencyStop+0x4a>
    else emergency_cnt = 0;
 802592c:	4b02      	ldr	r3, [pc, #8]	; (8025938 <EmergencyStop+0x50>)
 802592e:	2200      	movs	r2, #0
 8025930:	701a      	strb	r2, [r3, #0]
}
 8025932:	bf00      	nop
 8025934:	bd80      	pop	{r7, pc}
 8025936:	bf00      	nop
 8025938:	20000788 	.word	0x20000788
 802593c:	00000000 	.word	0x00000000
 8025940:	20000768 	.word	0x20000768
 8025944:	20000340 	.word	0x20000340
 8025948:	200002f4 	.word	0x200002f4
 802594c:	20000344 	.word	0x20000344

08025950 <TargetVelocity>:


float TargetVelocity(float target, float min)
{
 8025950:	b480      	push	{r7}
 8025952:	b083      	sub	sp, #12
 8025954:	af00      	add	r7, sp, #0
 8025956:	ed87 0a01 	vstr	s0, [r7, #4]
 802595a:	edc7 0a00 	vstr	s1, [r7]
    static uint8_t slow_cnt = 0;
    static uint8_t stop_cnt = 0;

    if(g_goal_cnt == 1) return target;
 802595e:	4b15      	ldr	r3, [pc, #84]	; (80259b4 <TargetVelocity+0x64>)
 8025960:	781b      	ldrb	r3, [r3, #0]
 8025962:	2b01      	cmp	r3, #1
 8025964:	d101      	bne.n	802596a <TargetVelocity+0x1a>
 8025966:	687b      	ldr	r3, [r7, #4]
 8025968:	e01a      	b.n	80259a0 <TargetVelocity+0x50>
    else if(g_goal_cnt >= 2)
 802596a:	4b12      	ldr	r3, [pc, #72]	; (80259b4 <TargetVelocity+0x64>)
 802596c:	781b      	ldrb	r3, [r3, #0]
 802596e:	2b01      	cmp	r3, #1
 8025970:	d915      	bls.n	802599e <TargetVelocity+0x4e>
    {
        if(slow_cnt < GOAL_SLOW_COUNT)
 8025972:	4b11      	ldr	r3, [pc, #68]	; (80259b8 <TargetVelocity+0x68>)
 8025974:	781b      	ldrb	r3, [r3, #0]
 8025976:	2b09      	cmp	r3, #9
 8025978:	d808      	bhi.n	802598c <TargetVelocity+0x3c>
        {
            slow_cnt++; return GOAL_SLOW_VELOCITY;
 802597a:	4b0f      	ldr	r3, [pc, #60]	; (80259b8 <TargetVelocity+0x68>)
 802597c:	781b      	ldrb	r3, [r3, #0]
 802597e:	3301      	adds	r3, #1
 8025980:	b2da      	uxtb	r2, r3
 8025982:	4b0d      	ldr	r3, [pc, #52]	; (80259b8 <TargetVelocity+0x68>)
 8025984:	701a      	strb	r2, [r3, #0]
 8025986:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 802598a:	e009      	b.n	80259a0 <TargetVelocity+0x50>
        }
        else if(stop_cnt < GOAL_STOP_COUNT)
        {
            stop_cnt++; return 0;
 802598c:	4b0b      	ldr	r3, [pc, #44]	; (80259bc <TargetVelocity+0x6c>)
 802598e:	781b      	ldrb	r3, [r3, #0]
 8025990:	3301      	adds	r3, #1
 8025992:	b2da      	uxtb	r2, r3
 8025994:	4b09      	ldr	r3, [pc, #36]	; (80259bc <TargetVelocity+0x6c>)
 8025996:	701a      	strb	r2, [r3, #0]
 8025998:	f04f 0300 	mov.w	r3, #0
 802599c:	e000      	b.n	80259a0 <TargetVelocity+0x50>
        else
        {
            g_run_end = 1; return 0;
        }
    }
    else return min;
 802599e:	683b      	ldr	r3, [r7, #0]
 80259a0:	ee07 3a90 	vmov	s15, r3
}
 80259a4:	eeb0 0a67 	vmov.f32	s0, s15
 80259a8:	370c      	adds	r7, #12
 80259aa:	46bd      	mov	sp, r7
 80259ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259b0:	4770      	bx	lr
 80259b2:	bf00      	nop
 80259b4:	200002fd 	.word	0x200002fd
 80259b8:	20000789 	.word	0x20000789
 80259bc:	2000078a 	.word	0x2000078a

080259c0 <TargetDuty>:


float TargetDuty(float target, float min)
{
 80259c0:	b590      	push	{r4, r7, lr}
 80259c2:	b083      	sub	sp, #12
 80259c4:	af00      	add	r7, sp, #0
 80259c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80259ca:	edc7 0a00 	vstr	s1, [r7]
    static uint8_t slow_cnt = 0;
    static uint8_t stop_cnt = 0;

    if(g_goal_cnt == 1) return target;
 80259ce:	4b1c      	ldr	r3, [pc, #112]	; (8025a40 <TargetDuty+0x80>)
 80259d0:	781b      	ldrb	r3, [r3, #0]
 80259d2:	2b01      	cmp	r3, #1
 80259d4:	d101      	bne.n	80259da <TargetDuty+0x1a>
 80259d6:	687b      	ldr	r3, [r7, #4]
 80259d8:	e027      	b.n	8025a2a <TargetDuty+0x6a>
    else if(g_goal_cnt >= 2)
 80259da:	4b19      	ldr	r3, [pc, #100]	; (8025a40 <TargetDuty+0x80>)
 80259dc:	781b      	ldrb	r3, [r3, #0]
 80259de:	2b01      	cmp	r3, #1
 80259e0:	d922      	bls.n	8025a28 <TargetDuty+0x68>
    {
        if(slow_cnt < GOAL_SLOW_COUNT)
 80259e2:	4b18      	ldr	r3, [pc, #96]	; (8025a44 <TargetDuty+0x84>)
 80259e4:	781b      	ldrb	r3, [r3, #0]
 80259e6:	2b09      	cmp	r3, #9
 80259e8:	d815      	bhi.n	8025a16 <TargetDuty+0x56>
        {
            slow_cnt++; return min * 0.6;
 80259ea:	4b16      	ldr	r3, [pc, #88]	; (8025a44 <TargetDuty+0x84>)
 80259ec:	781b      	ldrb	r3, [r3, #0]
 80259ee:	3301      	adds	r3, #1
 80259f0:	b2da      	uxtb	r2, r3
 80259f2:	4b14      	ldr	r3, [pc, #80]	; (8025a44 <TargetDuty+0x84>)
 80259f4:	701a      	strb	r2, [r3, #0]
 80259f6:	6838      	ldr	r0, [r7, #0]
 80259f8:	f7fa fc86 	bl	8020308 <__aeabi_f2d>
 80259fc:	a30e      	add	r3, pc, #56	; (adr r3, 8025a38 <TargetDuty+0x78>)
 80259fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a02:	f7fa fcd9 	bl	80203b8 <__aeabi_dmul>
 8025a06:	4603      	mov	r3, r0
 8025a08:	460c      	mov	r4, r1
 8025a0a:	4618      	mov	r0, r3
 8025a0c:	4621      	mov	r1, r4
 8025a0e:	f7fa ff6d 	bl	80208ec <__aeabi_d2f>
 8025a12:	4603      	mov	r3, r0
 8025a14:	e009      	b.n	8025a2a <TargetDuty+0x6a>
        }
        else if(stop_cnt < GOAL_STOP_COUNT)
        {
            stop_cnt++; return 0;
 8025a16:	4b0c      	ldr	r3, [pc, #48]	; (8025a48 <TargetDuty+0x88>)
 8025a18:	781b      	ldrb	r3, [r3, #0]
 8025a1a:	3301      	adds	r3, #1
 8025a1c:	b2da      	uxtb	r2, r3
 8025a1e:	4b0a      	ldr	r3, [pc, #40]	; (8025a48 <TargetDuty+0x88>)
 8025a20:	701a      	strb	r2, [r3, #0]
 8025a22:	f04f 0300 	mov.w	r3, #0
 8025a26:	e000      	b.n	8025a2a <TargetDuty+0x6a>
        else
        {
            g_run_end = 1; return 0;
        }
    }
    else return min;
 8025a28:	683b      	ldr	r3, [r7, #0]
 8025a2a:	ee07 3a90 	vmov	s15, r3
}
 8025a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8025a32:	370c      	adds	r7, #12
 8025a34:	46bd      	mov	sp, r7
 8025a36:	bd90      	pop	{r4, r7, pc}
 8025a38:	33333333 	.word	0x33333333
 8025a3c:	3fe33333 	.word	0x3fe33333
 8025a40:	200002fd 	.word	0x200002fd
 8025a44:	2000078b 	.word	0x2000078b
 8025a48:	2000078c 	.word	0x2000078c

08025a4c <FlashTest>:


#ifdef DEBUG_MODE
uint8_t FlashTest()
{
 8025a4c:	b5b0      	push	{r4, r5, r7, lr}
 8025a4e:	b096      	sub	sp, #88	; 0x58
 8025a50:	af00      	add	r7, sp, #0
    if(!flash.CheckBlankWord(address_4, num_of_data)) return 0x0B;
    if(!flash.StoreFloat(address_4, d, num_of_data)) return 0x0C;
    flash.Load(buff_d, address_4, num_of_data*4);
    for(i = 0; i < num_of_data; i++) if(d[i] != buff_d[i]) return 0x0D;

    return 0x0E;
 8025a52:	466b      	mov	r3, sp
 8025a54:	461d      	mov	r5, r3
    uint32_t address_1 = SECTOR_1_ADDRESS_HEAD;
 8025a56:	4bd7      	ldr	r3, [pc, #860]	; (8025db4 <FlashTest+0x368>)
 8025a58:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t address_2 = SECTOR_2_ADDRESS_HEAD;
 8025a5a:	4bd7      	ldr	r3, [pc, #860]	; (8025db8 <FlashTest+0x36c>)
 8025a5c:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t address_3 = SECTOR_3_ADDRESS_HEAD;
 8025a5e:	4bd7      	ldr	r3, [pc, #860]	; (8025dbc <FlashTest+0x370>)
 8025a60:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t address_4 = SECTOR_4_ADDRESS_HEAD;
 8025a62:	4bd7      	ldr	r3, [pc, #860]	; (8025dc0 <FlashTest+0x374>)
 8025a64:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t i, num_of_data = 3;
 8025a66:	2303      	movs	r3, #3
 8025a68:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t a[num_of_data] = {1,2,3};
 8025a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025a6c:	1e58      	subs	r0, r3, #1
 8025a6e:	6578      	str	r0, [r7, #84]	; 0x54
 8025a70:	4603      	mov	r3, r0
 8025a72:	3301      	adds	r3, #1
 8025a74:	4619      	mov	r1, r3
 8025a76:	f04f 0200 	mov.w	r2, #0
 8025a7a:	f04f 0300 	mov.w	r3, #0
 8025a7e:	f04f 0400 	mov.w	r4, #0
 8025a82:	00d4      	lsls	r4, r2, #3
 8025a84:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025a88:	00cb      	lsls	r3, r1, #3
 8025a8a:	4603      	mov	r3, r0
 8025a8c:	3301      	adds	r3, #1
 8025a8e:	4619      	mov	r1, r3
 8025a90:	f04f 0200 	mov.w	r2, #0
 8025a94:	f04f 0300 	mov.w	r3, #0
 8025a98:	f04f 0400 	mov.w	r4, #0
 8025a9c:	00d4      	lsls	r4, r2, #3
 8025a9e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025aa2:	00cb      	lsls	r3, r1, #3
 8025aa4:	4603      	mov	r3, r0
 8025aa6:	3301      	adds	r3, #1
 8025aa8:	3307      	adds	r3, #7
 8025aaa:	08db      	lsrs	r3, r3, #3
 8025aac:	00db      	lsls	r3, r3, #3
 8025aae:	ebad 0d03 	sub.w	sp, sp, r3
 8025ab2:	466b      	mov	r3, sp
 8025ab4:	3300      	adds	r3, #0
 8025ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8025ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025aba:	4602      	mov	r2, r0
 8025abc:	2101      	movs	r1, #1
 8025abe:	7019      	strb	r1, [r3, #0]
 8025ac0:	3301      	adds	r3, #1
 8025ac2:	3a01      	subs	r2, #1
 8025ac4:	2102      	movs	r1, #2
 8025ac6:	7019      	strb	r1, [r3, #0]
 8025ac8:	3301      	adds	r3, #1
 8025aca:	1e51      	subs	r1, r2, #1
 8025acc:	2203      	movs	r2, #3
 8025ace:	701a      	strb	r2, [r3, #0]
 8025ad0:	1c5a      	adds	r2, r3, #1
 8025ad2:	1e4b      	subs	r3, r1, #1
 8025ad4:	2b00      	cmp	r3, #0
 8025ad6:	db04      	blt.n	8025ae2 <FlashTest+0x96>
 8025ad8:	2100      	movs	r1, #0
 8025ada:	7011      	strb	r1, [r2, #0]
 8025adc:	3201      	adds	r2, #1
 8025ade:	3b01      	subs	r3, #1
 8025ae0:	e7f8      	b.n	8025ad4 <FlashTest+0x88>
    uint16_t b[num_of_data] = {4,5,6};
 8025ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025ae4:	1e58      	subs	r0, r3, #1
 8025ae6:	6378      	str	r0, [r7, #52]	; 0x34
 8025ae8:	4603      	mov	r3, r0
 8025aea:	3301      	adds	r3, #1
 8025aec:	4619      	mov	r1, r3
 8025aee:	f04f 0200 	mov.w	r2, #0
 8025af2:	f04f 0300 	mov.w	r3, #0
 8025af6:	f04f 0400 	mov.w	r4, #0
 8025afa:	0114      	lsls	r4, r2, #4
 8025afc:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025b00:	010b      	lsls	r3, r1, #4
 8025b02:	4603      	mov	r3, r0
 8025b04:	3301      	adds	r3, #1
 8025b06:	4619      	mov	r1, r3
 8025b08:	f04f 0200 	mov.w	r2, #0
 8025b0c:	f04f 0300 	mov.w	r3, #0
 8025b10:	f04f 0400 	mov.w	r4, #0
 8025b14:	0114      	lsls	r4, r2, #4
 8025b16:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025b1a:	010b      	lsls	r3, r1, #4
 8025b1c:	4603      	mov	r3, r0
 8025b1e:	3301      	adds	r3, #1
 8025b20:	005b      	lsls	r3, r3, #1
 8025b22:	3301      	adds	r3, #1
 8025b24:	3307      	adds	r3, #7
 8025b26:	08db      	lsrs	r3, r3, #3
 8025b28:	00db      	lsls	r3, r3, #3
 8025b2a:	ebad 0d03 	sub.w	sp, sp, r3
 8025b2e:	466b      	mov	r3, sp
 8025b30:	3301      	adds	r3, #1
 8025b32:	085b      	lsrs	r3, r3, #1
 8025b34:	005b      	lsls	r3, r3, #1
 8025b36:	633b      	str	r3, [r7, #48]	; 0x30
 8025b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b3a:	4602      	mov	r2, r0
 8025b3c:	2104      	movs	r1, #4
 8025b3e:	8019      	strh	r1, [r3, #0]
 8025b40:	3302      	adds	r3, #2
 8025b42:	3a01      	subs	r2, #1
 8025b44:	2105      	movs	r1, #5
 8025b46:	8019      	strh	r1, [r3, #0]
 8025b48:	3302      	adds	r3, #2
 8025b4a:	1e51      	subs	r1, r2, #1
 8025b4c:	2206      	movs	r2, #6
 8025b4e:	801a      	strh	r2, [r3, #0]
 8025b50:	1c9a      	adds	r2, r3, #2
 8025b52:	1e4b      	subs	r3, r1, #1
 8025b54:	2b00      	cmp	r3, #0
 8025b56:	db04      	blt.n	8025b62 <FlashTest+0x116>
 8025b58:	2100      	movs	r1, #0
 8025b5a:	8011      	strh	r1, [r2, #0]
 8025b5c:	3202      	adds	r2, #2
 8025b5e:	3b01      	subs	r3, #1
 8025b60:	e7f8      	b.n	8025b54 <FlashTest+0x108>
    int16_t c[num_of_data] = {-7,-8,-9};
 8025b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025b64:	1e58      	subs	r0, r3, #1
 8025b66:	62f8      	str	r0, [r7, #44]	; 0x2c
 8025b68:	4603      	mov	r3, r0
 8025b6a:	3301      	adds	r3, #1
 8025b6c:	4619      	mov	r1, r3
 8025b6e:	f04f 0200 	mov.w	r2, #0
 8025b72:	f04f 0300 	mov.w	r3, #0
 8025b76:	f04f 0400 	mov.w	r4, #0
 8025b7a:	0114      	lsls	r4, r2, #4
 8025b7c:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025b80:	010b      	lsls	r3, r1, #4
 8025b82:	4603      	mov	r3, r0
 8025b84:	3301      	adds	r3, #1
 8025b86:	4619      	mov	r1, r3
 8025b88:	f04f 0200 	mov.w	r2, #0
 8025b8c:	f04f 0300 	mov.w	r3, #0
 8025b90:	f04f 0400 	mov.w	r4, #0
 8025b94:	0114      	lsls	r4, r2, #4
 8025b96:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025b9a:	010b      	lsls	r3, r1, #4
 8025b9c:	4603      	mov	r3, r0
 8025b9e:	3301      	adds	r3, #1
 8025ba0:	005b      	lsls	r3, r3, #1
 8025ba2:	3301      	adds	r3, #1
 8025ba4:	3307      	adds	r3, #7
 8025ba6:	08db      	lsrs	r3, r3, #3
 8025ba8:	00db      	lsls	r3, r3, #3
 8025baa:	ebad 0d03 	sub.w	sp, sp, r3
 8025bae:	466b      	mov	r3, sp
 8025bb0:	3301      	adds	r3, #1
 8025bb2:	085b      	lsrs	r3, r3, #1
 8025bb4:	005b      	lsls	r3, r3, #1
 8025bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8025bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025bba:	4602      	mov	r2, r0
 8025bbc:	f64f 71f9 	movw	r1, #65529	; 0xfff9
 8025bc0:	8019      	strh	r1, [r3, #0]
 8025bc2:	3302      	adds	r3, #2
 8025bc4:	3a01      	subs	r2, #1
 8025bc6:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8025bca:	8019      	strh	r1, [r3, #0]
 8025bcc:	3302      	adds	r3, #2
 8025bce:	1e51      	subs	r1, r2, #1
 8025bd0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8025bd4:	801a      	strh	r2, [r3, #0]
 8025bd6:	1c9a      	adds	r2, r3, #2
 8025bd8:	1e4b      	subs	r3, r1, #1
 8025bda:	2b00      	cmp	r3, #0
 8025bdc:	db04      	blt.n	8025be8 <FlashTest+0x19c>
 8025bde:	2100      	movs	r1, #0
 8025be0:	8011      	strh	r1, [r2, #0]
 8025be2:	3202      	adds	r2, #2
 8025be4:	3b01      	subs	r3, #1
 8025be6:	e7f8      	b.n	8025bda <FlashTest+0x18e>
    float d[num_of_data] = {0.1,0.2,0.3};
 8025be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025bea:	1e58      	subs	r0, r3, #1
 8025bec:	6278      	str	r0, [r7, #36]	; 0x24
 8025bee:	4603      	mov	r3, r0
 8025bf0:	3301      	adds	r3, #1
 8025bf2:	4619      	mov	r1, r3
 8025bf4:	f04f 0200 	mov.w	r2, #0
 8025bf8:	f04f 0300 	mov.w	r3, #0
 8025bfc:	f04f 0400 	mov.w	r4, #0
 8025c00:	0154      	lsls	r4, r2, #5
 8025c02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8025c06:	014b      	lsls	r3, r1, #5
 8025c08:	4603      	mov	r3, r0
 8025c0a:	3301      	adds	r3, #1
 8025c0c:	4619      	mov	r1, r3
 8025c0e:	f04f 0200 	mov.w	r2, #0
 8025c12:	f04f 0300 	mov.w	r3, #0
 8025c16:	f04f 0400 	mov.w	r4, #0
 8025c1a:	0154      	lsls	r4, r2, #5
 8025c1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8025c20:	014b      	lsls	r3, r1, #5
 8025c22:	4603      	mov	r3, r0
 8025c24:	3301      	adds	r3, #1
 8025c26:	009b      	lsls	r3, r3, #2
 8025c28:	3303      	adds	r3, #3
 8025c2a:	3307      	adds	r3, #7
 8025c2c:	08db      	lsrs	r3, r3, #3
 8025c2e:	00db      	lsls	r3, r3, #3
 8025c30:	ebad 0d03 	sub.w	sp, sp, r3
 8025c34:	466b      	mov	r3, sp
 8025c36:	3303      	adds	r3, #3
 8025c38:	089b      	lsrs	r3, r3, #2
 8025c3a:	009b      	lsls	r3, r3, #2
 8025c3c:	623b      	str	r3, [r7, #32]
 8025c3e:	6a3b      	ldr	r3, [r7, #32]
 8025c40:	4601      	mov	r1, r0
 8025c42:	4a60      	ldr	r2, [pc, #384]	; (8025dc4 <FlashTest+0x378>)
 8025c44:	601a      	str	r2, [r3, #0]
 8025c46:	3304      	adds	r3, #4
 8025c48:	1e4a      	subs	r2, r1, #1
 8025c4a:	495f      	ldr	r1, [pc, #380]	; (8025dc8 <FlashTest+0x37c>)
 8025c4c:	6019      	str	r1, [r3, #0]
 8025c4e:	3304      	adds	r3, #4
 8025c50:	1e51      	subs	r1, r2, #1
 8025c52:	4a5e      	ldr	r2, [pc, #376]	; (8025dcc <FlashTest+0x380>)
 8025c54:	601a      	str	r2, [r3, #0]
 8025c56:	1d1a      	adds	r2, r3, #4
 8025c58:	1e4b      	subs	r3, r1, #1
 8025c5a:	2b00      	cmp	r3, #0
 8025c5c:	db05      	blt.n	8025c6a <FlashTest+0x21e>
 8025c5e:	f04f 0100 	mov.w	r1, #0
 8025c62:	6011      	str	r1, [r2, #0]
 8025c64:	3204      	adds	r2, #4
 8025c66:	3b01      	subs	r3, #1
 8025c68:	e7f7      	b.n	8025c5a <FlashTest+0x20e>
    uint8_t buff_a[num_of_data] = {0};
 8025c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025c6c:	1e58      	subs	r0, r3, #1
 8025c6e:	61f8      	str	r0, [r7, #28]
 8025c70:	4603      	mov	r3, r0
 8025c72:	3301      	adds	r3, #1
 8025c74:	4619      	mov	r1, r3
 8025c76:	f04f 0200 	mov.w	r2, #0
 8025c7a:	f04f 0300 	mov.w	r3, #0
 8025c7e:	f04f 0400 	mov.w	r4, #0
 8025c82:	00d4      	lsls	r4, r2, #3
 8025c84:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025c88:	00cb      	lsls	r3, r1, #3
 8025c8a:	4603      	mov	r3, r0
 8025c8c:	3301      	adds	r3, #1
 8025c8e:	4619      	mov	r1, r3
 8025c90:	f04f 0200 	mov.w	r2, #0
 8025c94:	f04f 0300 	mov.w	r3, #0
 8025c98:	f04f 0400 	mov.w	r4, #0
 8025c9c:	00d4      	lsls	r4, r2, #3
 8025c9e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025ca2:	00cb      	lsls	r3, r1, #3
 8025ca4:	4603      	mov	r3, r0
 8025ca6:	3301      	adds	r3, #1
 8025ca8:	3307      	adds	r3, #7
 8025caa:	08db      	lsrs	r3, r3, #3
 8025cac:	00db      	lsls	r3, r3, #3
 8025cae:	ebad 0d03 	sub.w	sp, sp, r3
 8025cb2:	466b      	mov	r3, sp
 8025cb4:	3300      	adds	r3, #0
 8025cb6:	61bb      	str	r3, [r7, #24]
 8025cb8:	69bb      	ldr	r3, [r7, #24]
 8025cba:	4601      	mov	r1, r0
 8025cbc:	2200      	movs	r2, #0
 8025cbe:	701a      	strb	r2, [r3, #0]
 8025cc0:	1c5a      	adds	r2, r3, #1
 8025cc2:	1e4b      	subs	r3, r1, #1
 8025cc4:	2b00      	cmp	r3, #0
 8025cc6:	db04      	blt.n	8025cd2 <FlashTest+0x286>
 8025cc8:	2100      	movs	r1, #0
 8025cca:	7011      	strb	r1, [r2, #0]
 8025ccc:	3201      	adds	r2, #1
 8025cce:	3b01      	subs	r3, #1
 8025cd0:	e7f8      	b.n	8025cc4 <FlashTest+0x278>
    uint16_t buff_b[num_of_data] = {0};
 8025cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025cd4:	1e58      	subs	r0, r3, #1
 8025cd6:	6178      	str	r0, [r7, #20]
 8025cd8:	4603      	mov	r3, r0
 8025cda:	3301      	adds	r3, #1
 8025cdc:	4619      	mov	r1, r3
 8025cde:	f04f 0200 	mov.w	r2, #0
 8025ce2:	f04f 0300 	mov.w	r3, #0
 8025ce6:	f04f 0400 	mov.w	r4, #0
 8025cea:	0114      	lsls	r4, r2, #4
 8025cec:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025cf0:	010b      	lsls	r3, r1, #4
 8025cf2:	4603      	mov	r3, r0
 8025cf4:	3301      	adds	r3, #1
 8025cf6:	4619      	mov	r1, r3
 8025cf8:	f04f 0200 	mov.w	r2, #0
 8025cfc:	f04f 0300 	mov.w	r3, #0
 8025d00:	f04f 0400 	mov.w	r4, #0
 8025d04:	0114      	lsls	r4, r2, #4
 8025d06:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025d0a:	010b      	lsls	r3, r1, #4
 8025d0c:	4603      	mov	r3, r0
 8025d0e:	3301      	adds	r3, #1
 8025d10:	005b      	lsls	r3, r3, #1
 8025d12:	3301      	adds	r3, #1
 8025d14:	3307      	adds	r3, #7
 8025d16:	08db      	lsrs	r3, r3, #3
 8025d18:	00db      	lsls	r3, r3, #3
 8025d1a:	ebad 0d03 	sub.w	sp, sp, r3
 8025d1e:	466b      	mov	r3, sp
 8025d20:	3301      	adds	r3, #1
 8025d22:	085b      	lsrs	r3, r3, #1
 8025d24:	005b      	lsls	r3, r3, #1
 8025d26:	613b      	str	r3, [r7, #16]
 8025d28:	693b      	ldr	r3, [r7, #16]
 8025d2a:	4601      	mov	r1, r0
 8025d2c:	2200      	movs	r2, #0
 8025d2e:	801a      	strh	r2, [r3, #0]
 8025d30:	1c9a      	adds	r2, r3, #2
 8025d32:	1e4b      	subs	r3, r1, #1
 8025d34:	2b00      	cmp	r3, #0
 8025d36:	db04      	blt.n	8025d42 <FlashTest+0x2f6>
 8025d38:	2100      	movs	r1, #0
 8025d3a:	8011      	strh	r1, [r2, #0]
 8025d3c:	3202      	adds	r2, #2
 8025d3e:	3b01      	subs	r3, #1
 8025d40:	e7f8      	b.n	8025d34 <FlashTest+0x2e8>
    int16_t buff_c[num_of_data] = {0};
 8025d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025d44:	1e58      	subs	r0, r3, #1
 8025d46:	60f8      	str	r0, [r7, #12]
 8025d48:	4603      	mov	r3, r0
 8025d4a:	3301      	adds	r3, #1
 8025d4c:	4619      	mov	r1, r3
 8025d4e:	f04f 0200 	mov.w	r2, #0
 8025d52:	f04f 0300 	mov.w	r3, #0
 8025d56:	f04f 0400 	mov.w	r4, #0
 8025d5a:	0114      	lsls	r4, r2, #4
 8025d5c:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025d60:	010b      	lsls	r3, r1, #4
 8025d62:	4603      	mov	r3, r0
 8025d64:	3301      	adds	r3, #1
 8025d66:	4619      	mov	r1, r3
 8025d68:	f04f 0200 	mov.w	r2, #0
 8025d6c:	f04f 0300 	mov.w	r3, #0
 8025d70:	f04f 0400 	mov.w	r4, #0
 8025d74:	0114      	lsls	r4, r2, #4
 8025d76:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025d7a:	010b      	lsls	r3, r1, #4
 8025d7c:	4603      	mov	r3, r0
 8025d7e:	3301      	adds	r3, #1
 8025d80:	005b      	lsls	r3, r3, #1
 8025d82:	3301      	adds	r3, #1
 8025d84:	3307      	adds	r3, #7
 8025d86:	08db      	lsrs	r3, r3, #3
 8025d88:	00db      	lsls	r3, r3, #3
 8025d8a:	ebad 0d03 	sub.w	sp, sp, r3
 8025d8e:	466b      	mov	r3, sp
 8025d90:	3301      	adds	r3, #1
 8025d92:	085b      	lsrs	r3, r3, #1
 8025d94:	005b      	lsls	r3, r3, #1
 8025d96:	60bb      	str	r3, [r7, #8]
 8025d98:	68bb      	ldr	r3, [r7, #8]
 8025d9a:	4601      	mov	r1, r0
 8025d9c:	2200      	movs	r2, #0
 8025d9e:	801a      	strh	r2, [r3, #0]
 8025da0:	1c9a      	adds	r2, r3, #2
 8025da2:	1e4b      	subs	r3, r1, #1
 8025da4:	2b00      	cmp	r3, #0
 8025da6:	db13      	blt.n	8025dd0 <FlashTest+0x384>
 8025da8:	2100      	movs	r1, #0
 8025daa:	8011      	strh	r1, [r2, #0]
 8025dac:	3202      	adds	r2, #2
 8025dae:	3b01      	subs	r3, #1
 8025db0:	e7f8      	b.n	8025da4 <FlashTest+0x358>
 8025db2:	bf00      	nop
 8025db4:	08004000 	.word	0x08004000
 8025db8:	08008000 	.word	0x08008000
 8025dbc:	0800c000 	.word	0x0800c000
 8025dc0:	08010000 	.word	0x08010000
 8025dc4:	3dcccccd 	.word	0x3dcccccd
 8025dc8:	3e4ccccd 	.word	0x3e4ccccd
 8025dcc:	3e99999a 	.word	0x3e99999a
    float buff_d[num_of_data] = {0};
 8025dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025dd2:	1e58      	subs	r0, r3, #1
 8025dd4:	6078      	str	r0, [r7, #4]
 8025dd6:	4603      	mov	r3, r0
 8025dd8:	3301      	adds	r3, #1
 8025dda:	4619      	mov	r1, r3
 8025ddc:	f04f 0200 	mov.w	r2, #0
 8025de0:	f04f 0300 	mov.w	r3, #0
 8025de4:	f04f 0400 	mov.w	r4, #0
 8025de8:	0154      	lsls	r4, r2, #5
 8025dea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8025dee:	014b      	lsls	r3, r1, #5
 8025df0:	4603      	mov	r3, r0
 8025df2:	3301      	adds	r3, #1
 8025df4:	4619      	mov	r1, r3
 8025df6:	f04f 0200 	mov.w	r2, #0
 8025dfa:	f04f 0300 	mov.w	r3, #0
 8025dfe:	f04f 0400 	mov.w	r4, #0
 8025e02:	0154      	lsls	r4, r2, #5
 8025e04:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8025e08:	014b      	lsls	r3, r1, #5
 8025e0a:	4603      	mov	r3, r0
 8025e0c:	3301      	adds	r3, #1
 8025e0e:	009b      	lsls	r3, r3, #2
 8025e10:	3303      	adds	r3, #3
 8025e12:	3307      	adds	r3, #7
 8025e14:	08db      	lsrs	r3, r3, #3
 8025e16:	00db      	lsls	r3, r3, #3
 8025e18:	ebad 0d03 	sub.w	sp, sp, r3
 8025e1c:	466b      	mov	r3, sp
 8025e1e:	3303      	adds	r3, #3
 8025e20:	089b      	lsrs	r3, r3, #2
 8025e22:	009b      	lsls	r3, r3, #2
 8025e24:	603b      	str	r3, [r7, #0]
 8025e26:	683b      	ldr	r3, [r7, #0]
 8025e28:	4601      	mov	r1, r0
 8025e2a:	f04f 0200 	mov.w	r2, #0
 8025e2e:	601a      	str	r2, [r3, #0]
 8025e30:	1d1a      	adds	r2, r3, #4
 8025e32:	1e4b      	subs	r3, r1, #1
 8025e34:	2b00      	cmp	r3, #0
 8025e36:	db05      	blt.n	8025e44 <FlashTest+0x3f8>
 8025e38:	f04f 0100 	mov.w	r1, #0
 8025e3c:	6011      	str	r1, [r2, #0]
 8025e3e:	3204      	adds	r2, #4
 8025e40:	3b01      	subs	r3, #1
 8025e42:	e7f7      	b.n	8025e34 <FlashTest+0x3e8>
    if(!flash.Clear()) return 0x01;
 8025e44:	487b      	ldr	r0, [pc, #492]	; (8026034 <FlashTest+0x5e8>)
 8025e46:	f7fb f863 	bl	8020f10 <_ZN5Flash5ClearEv>
 8025e4a:	4603      	mov	r3, r0
 8025e4c:	f083 0301 	eor.w	r3, r3, #1
 8025e50:	b2db      	uxtb	r3, r3
 8025e52:	2b00      	cmp	r3, #0
 8025e54:	d001      	beq.n	8025e5a <FlashTest+0x40e>
 8025e56:	2301      	movs	r3, #1
 8025e58:	e0e6      	b.n	8026028 <FlashTest+0x5dc>
    if(!flash.CheckBlankByte(address_1, num_of_data)) return 0x02;
 8025e5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025e5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8025e5e:	4875      	ldr	r0, [pc, #468]	; (8026034 <FlashTest+0x5e8>)
 8025e60:	f7fb f971 	bl	8021146 <_ZN5Flash14CheckBlankByteEmm>
 8025e64:	4603      	mov	r3, r0
 8025e66:	f083 0301 	eor.w	r3, r3, #1
 8025e6a:	b2db      	uxtb	r3, r3
 8025e6c:	2b00      	cmp	r3, #0
 8025e6e:	d001      	beq.n	8025e74 <FlashTest+0x428>
 8025e70:	2302      	movs	r3, #2
 8025e72:	e0d9      	b.n	8026028 <FlashTest+0x5dc>
    if(!flash.StoreUint8(address_1, a, num_of_data)) return 0x03;
 8025e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8025e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025e78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8025e7a:	486e      	ldr	r0, [pc, #440]	; (8026034 <FlashTest+0x5e8>)
 8025e7c:	f7fb f87c 	bl	8020f78 <_ZN5Flash10StoreUint8EmPhm>
 8025e80:	4603      	mov	r3, r0
 8025e82:	f083 0301 	eor.w	r3, r3, #1
 8025e86:	b2db      	uxtb	r3, r3
 8025e88:	2b00      	cmp	r3, #0
 8025e8a:	d001      	beq.n	8025e90 <FlashTest+0x444>
 8025e8c:	2303      	movs	r3, #3
 8025e8e:	e0cb      	b.n	8026028 <FlashTest+0x5dc>
    flash.Load(buff_a, address_1, num_of_data);
 8025e90:	69b9      	ldr	r1, [r7, #24]
 8025e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025e94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8025e96:	4867      	ldr	r0, [pc, #412]	; (8026034 <FlashTest+0x5e8>)
 8025e98:	f7fb f944 	bl	8021124 <_ZN5Flash4LoadEPvmm>
    for(i = 0; i < num_of_data; i++) if(a[i] != buff_a[i]) return 0x04;
 8025e9c:	2300      	movs	r3, #0
 8025e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8025ea0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025ea4:	429a      	cmp	r2, r3
 8025ea6:	d20f      	bcs.n	8025ec8 <FlashTest+0x47c>
 8025ea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8025eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025eac:	4413      	add	r3, r2
 8025eae:	781a      	ldrb	r2, [r3, #0]
 8025eb0:	69b9      	ldr	r1, [r7, #24]
 8025eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025eb4:	440b      	add	r3, r1
 8025eb6:	781b      	ldrb	r3, [r3, #0]
 8025eb8:	429a      	cmp	r2, r3
 8025eba:	d001      	beq.n	8025ec0 <FlashTest+0x474>
 8025ebc:	2304      	movs	r3, #4
 8025ebe:	e0b3      	b.n	8026028 <FlashTest+0x5dc>
 8025ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025ec2:	3301      	adds	r3, #1
 8025ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8025ec6:	e7eb      	b.n	8025ea0 <FlashTest+0x454>
    if(!flash.CheckBlankHalfword(address_2, num_of_data)) return 0x05;
 8025ec8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025eca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8025ecc:	4859      	ldr	r0, [pc, #356]	; (8026034 <FlashTest+0x5e8>)
 8025ece:	f7fb f987 	bl	80211e0 <_ZN5Flash18CheckBlankHalfwordEmm>
 8025ed2:	4603      	mov	r3, r0
 8025ed4:	f083 0301 	eor.w	r3, r3, #1
 8025ed8:	b2db      	uxtb	r3, r3
 8025eda:	2b00      	cmp	r3, #0
 8025edc:	d001      	beq.n	8025ee2 <FlashTest+0x496>
 8025ede:	2305      	movs	r3, #5
 8025ee0:	e0a2      	b.n	8026028 <FlashTest+0x5dc>
    if(!flash.StoreUint16(address_2, b, num_of_data)) return 0x06;
 8025ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025ee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8025ee8:	4852      	ldr	r0, [pc, #328]	; (8026034 <FlashTest+0x5e8>)
 8025eea:	f7fb f879 	bl	8020fe0 <_ZN5Flash11StoreUint16EmPtm>
 8025eee:	4603      	mov	r3, r0
 8025ef0:	f083 0301 	eor.w	r3, r3, #1
 8025ef4:	b2db      	uxtb	r3, r3
 8025ef6:	2b00      	cmp	r3, #0
 8025ef8:	d001      	beq.n	8025efe <FlashTest+0x4b2>
 8025efa:	2306      	movs	r3, #6
 8025efc:	e094      	b.n	8026028 <FlashTest+0x5dc>
    flash.Load(buff_b, address_2, num_of_data*2);
 8025efe:	6939      	ldr	r1, [r7, #16]
 8025f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025f02:	005b      	lsls	r3, r3, #1
 8025f04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8025f06:	484b      	ldr	r0, [pc, #300]	; (8026034 <FlashTest+0x5e8>)
 8025f08:	f7fb f90c 	bl	8021124 <_ZN5Flash4LoadEPvmm>
    for(i = 0; i < num_of_data; i++) if(b[i] != buff_b[i]) return 0x07;
 8025f0c:	2300      	movs	r3, #0
 8025f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8025f10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025f14:	429a      	cmp	r2, r3
 8025f16:	d20f      	bcs.n	8025f38 <FlashTest+0x4ec>
 8025f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025f1c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8025f20:	693b      	ldr	r3, [r7, #16]
 8025f22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8025f24:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8025f28:	429a      	cmp	r2, r3
 8025f2a:	d001      	beq.n	8025f30 <FlashTest+0x4e4>
 8025f2c:	2307      	movs	r3, #7
 8025f2e:	e07b      	b.n	8026028 <FlashTest+0x5dc>
 8025f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025f32:	3301      	adds	r3, #1
 8025f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8025f36:	e7eb      	b.n	8025f10 <FlashTest+0x4c4>
    if(!flash.CheckBlankHalfword(address_3, num_of_data)) return 0x08;
 8025f38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025f3a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8025f3c:	483d      	ldr	r0, [pc, #244]	; (8026034 <FlashTest+0x5e8>)
 8025f3e:	f7fb f94f 	bl	80211e0 <_ZN5Flash18CheckBlankHalfwordEmm>
 8025f42:	4603      	mov	r3, r0
 8025f44:	f083 0301 	eor.w	r3, r3, #1
 8025f48:	b2db      	uxtb	r3, r3
 8025f4a:	2b00      	cmp	r3, #0
 8025f4c:	d001      	beq.n	8025f52 <FlashTest+0x506>
 8025f4e:	2308      	movs	r3, #8
 8025f50:	e06a      	b.n	8026028 <FlashTest+0x5dc>
    if(!flash.StoreInt16(address_3, c, num_of_data)) return 0x09;
 8025f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025f56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8025f58:	4836      	ldr	r0, [pc, #216]	; (8026034 <FlashTest+0x5e8>)
 8025f5a:	f7fb f876 	bl	802104a <_ZN5Flash10StoreInt16EmPsm>
 8025f5e:	4603      	mov	r3, r0
 8025f60:	f083 0301 	eor.w	r3, r3, #1
 8025f64:	b2db      	uxtb	r3, r3
 8025f66:	2b00      	cmp	r3, #0
 8025f68:	d001      	beq.n	8025f6e <FlashTest+0x522>
 8025f6a:	2309      	movs	r3, #9
 8025f6c:	e05c      	b.n	8026028 <FlashTest+0x5dc>
    flash.Load(buff_c, address_3, num_of_data*2);
 8025f6e:	68b9      	ldr	r1, [r7, #8]
 8025f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025f72:	005b      	lsls	r3, r3, #1
 8025f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025f76:	482f      	ldr	r0, [pc, #188]	; (8026034 <FlashTest+0x5e8>)
 8025f78:	f7fb f8d4 	bl	8021124 <_ZN5Flash4LoadEPvmm>
    for(i = 0; i < num_of_data; i++) if(c[i] != buff_c[i]) return 0x0A;
 8025f7c:	2300      	movs	r3, #0
 8025f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8025f80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025f84:	429a      	cmp	r2, r3
 8025f86:	d20f      	bcs.n	8025fa8 <FlashTest+0x55c>
 8025f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025f8c:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8025f90:	68bb      	ldr	r3, [r7, #8]
 8025f92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8025f94:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8025f98:	429a      	cmp	r2, r3
 8025f9a:	d001      	beq.n	8025fa0 <FlashTest+0x554>
 8025f9c:	230a      	movs	r3, #10
 8025f9e:	e043      	b.n	8026028 <FlashTest+0x5dc>
 8025fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025fa2:	3301      	adds	r3, #1
 8025fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8025fa6:	e7eb      	b.n	8025f80 <FlashTest+0x534>
    if(!flash.CheckBlankWord(address_4, num_of_data)) return 0x0B;
 8025fa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025faa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8025fac:	4821      	ldr	r0, [pc, #132]	; (8026034 <FlashTest+0x5e8>)
 8025fae:	f7fb f96b 	bl	8021288 <_ZN5Flash14CheckBlankWordEmm>
 8025fb2:	4603      	mov	r3, r0
 8025fb4:	f083 0301 	eor.w	r3, r3, #1
 8025fb8:	b2db      	uxtb	r3, r3
 8025fba:	2b00      	cmp	r3, #0
 8025fbc:	d001      	beq.n	8025fc2 <FlashTest+0x576>
 8025fbe:	230b      	movs	r3, #11
 8025fc0:	e032      	b.n	8026028 <FlashTest+0x5dc>
    if(!flash.StoreFloat(address_4, d, num_of_data)) return 0x0C;
 8025fc2:	6a3a      	ldr	r2, [r7, #32]
 8025fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025fc6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8025fc8:	481a      	ldr	r0, [pc, #104]	; (8026034 <FlashTest+0x5e8>)
 8025fca:	f7fb f874 	bl	80210b6 <_ZN5Flash10StoreFloatEmPfm>
 8025fce:	4603      	mov	r3, r0
 8025fd0:	f083 0301 	eor.w	r3, r3, #1
 8025fd4:	b2db      	uxtb	r3, r3
 8025fd6:	2b00      	cmp	r3, #0
 8025fd8:	d001      	beq.n	8025fde <FlashTest+0x592>
 8025fda:	230c      	movs	r3, #12
 8025fdc:	e024      	b.n	8026028 <FlashTest+0x5dc>
    flash.Load(buff_d, address_4, num_of_data*4);
 8025fde:	6839      	ldr	r1, [r7, #0]
 8025fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025fe2:	009b      	lsls	r3, r3, #2
 8025fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8025fe6:	4813      	ldr	r0, [pc, #76]	; (8026034 <FlashTest+0x5e8>)
 8025fe8:	f7fb f89c 	bl	8021124 <_ZN5Flash4LoadEPvmm>
    for(i = 0; i < num_of_data; i++) if(d[i] != buff_d[i]) return 0x0D;
 8025fec:	2300      	movs	r3, #0
 8025fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8025ff0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025ff4:	429a      	cmp	r2, r3
 8025ff6:	d216      	bcs.n	8026026 <FlashTest+0x5da>
 8025ff8:	6a3a      	ldr	r2, [r7, #32]
 8025ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025ffc:	009b      	lsls	r3, r3, #2
 8025ffe:	4413      	add	r3, r2
 8026000:	ed93 7a00 	vldr	s14, [r3]
 8026004:	683a      	ldr	r2, [r7, #0]
 8026006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026008:	009b      	lsls	r3, r3, #2
 802600a:	4413      	add	r3, r2
 802600c:	edd3 7a00 	vldr	s15, [r3]
 8026010:	eeb4 7a67 	vcmp.f32	s14, s15
 8026014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026018:	d001      	beq.n	802601e <FlashTest+0x5d2>
 802601a:	230d      	movs	r3, #13
 802601c:	e004      	b.n	8026028 <FlashTest+0x5dc>
 802601e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026020:	3301      	adds	r3, #1
 8026022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026024:	e7e4      	b.n	8025ff0 <FlashTest+0x5a4>
    return 0x0E;
 8026026:	230e      	movs	r3, #14
 8026028:	46ad      	mov	sp, r5
}
 802602a:	4618      	mov	r0, r3
 802602c:	3758      	adds	r7, #88	; 0x58
 802602e:	46bd      	mov	sp, r7
 8026030:	bdb0      	pop	{r4, r5, r7, pc}
 8026032:	bf00      	nop
 8026034:	20000330 	.word	0x20000330

08026038 <InitialTest>:

void InitialTest()
{
 8026038:	b580      	push	{r7, lr}
 802603a:	af00      	add	r7, sp, #0
    /* Line sensor */
    line_sensor.Update();
 802603c:	482b      	ldr	r0, [pc, #172]	; (80260ec <InitialTest+0xb4>)
 802603e:	f7fb fd4b 	bl	8021ad8 <_ZN10LineSensor6UpdateEv>
    line_sensor.MonitorArrays();
 8026042:	482a      	ldr	r0, [pc, #168]	; (80260ec <InitialTest+0xb4>)
 8026044:	f7fb fed8 	bl	8021df8 <_ZN10LineSensor13MonitorArraysEv>
    g_line_diff = line_sensor.LeftRightDifference();
 8026048:	4828      	ldr	r0, [pc, #160]	; (80260ec <InitialTest+0xb4>)
 802604a:	f7fb fe15 	bl	8021c78 <_ZN10LineSensor19LeftRightDifferenceEv>
 802604e:	eef0 7a40 	vmov.f32	s15, s0
 8026052:	4b27      	ldr	r3, [pc, #156]	; (80260f0 <InitialTest+0xb8>)
 8026054:	edc3 7a00 	vstr	s15, [r3]
    g_line_emer = line_sensor.GetEmergencyStopFlag();
 8026058:	4824      	ldr	r0, [pc, #144]	; (80260ec <InitialTest+0xb4>)
 802605a:	f7fb fdfd 	bl	8021c58 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 802605e:	4603      	mov	r3, r0
 8026060:	461a      	mov	r2, r3
 8026062:	4b24      	ldr	r3, [pc, #144]	; (80260f4 <InitialTest+0xbc>)
 8026064:	701a      	strb	r2, [r3, #0]
    g_line_calib = line_sensor.CheckCalibration();
 8026066:	4821      	ldr	r0, [pc, #132]	; (80260ec <InitialTest+0xb4>)
 8026068:	f7fb fe6a 	bl	8021d40 <_ZN10LineSensor16CheckCalibrationEv>
 802606c:	4603      	mov	r3, r0
 802606e:	461a      	mov	r2, r3
 8026070:	4b21      	ldr	r3, [pc, #132]	; (80260f8 <InitialTest+0xc0>)
 8026072:	701a      	strb	r2, [r3, #0]

    /* Side seneor */
    side_sensor.IgnoreJudgment();
 8026074:	4821      	ldr	r0, [pc, #132]	; (80260fc <InitialTest+0xc4>)
 8026076:	f7fd ff83 	bl	8023f80 <_ZN10SideSensor14IgnoreJudgmentEv>
    g_goal_cnt = side_sensor.GetGoalMarkerCount();
 802607a:	4820      	ldr	r0, [pc, #128]	; (80260fc <InitialTest+0xc4>)
 802607c:	f7fe f9aa 	bl	80243d4 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8026080:	4603      	mov	r3, r0
 8026082:	461a      	mov	r2, r3
 8026084:	4b1e      	ldr	r3, [pc, #120]	; (8026100 <InitialTest+0xc8>)
 8026086:	701a      	strb	r2, [r3, #0]
    g_corner_cnt = side_sensor.GetCornerMarkerCount();
 8026088:	481c      	ldr	r0, [pc, #112]	; (80260fc <InitialTest+0xc4>)
 802608a:	f7fe f9b1 	bl	80243f0 <_ZN10SideSensor20GetCornerMarkerCountEv>
 802608e:	4603      	mov	r3, r0
 8026090:	461a      	mov	r2, r3
 8026092:	4b1c      	ldr	r3, [pc, #112]	; (8026104 <InitialTest+0xcc>)
 8026094:	701a      	strb	r2, [r3, #0]
    g_cross_cnt = side_sensor.GetCrossLineCount();
 8026096:	4819      	ldr	r0, [pc, #100]	; (80260fc <InitialTest+0xc4>)
 8026098:	f7fe f9b6 	bl	8024408 <_ZN10SideSensor17GetCrossLineCountEv>
 802609c:	4603      	mov	r3, r0
 802609e:	461a      	mov	r2, r3
 80260a0:	4b19      	ldr	r3, [pc, #100]	; (8026108 <InitialTest+0xd0>)
 80260a2:	701a      	strb	r2, [r3, #0]
    g_accel_z_r = iim_42652.AccelZRight();
    */


    /* Encoder */
    encoder.Update();
 80260a4:	4819      	ldr	r0, [pc, #100]	; (802610c <InitialTest+0xd4>)
 80260a6:	f7fa fe63 	bl	8020d70 <_ZN7Encoder6UpdateEv>
    g_distance = encoder.GetDistance();
 80260aa:	4818      	ldr	r0, [pc, #96]	; (802610c <InitialTest+0xd4>)
 80260ac:	f7fa fef2 	bl	8020e94 <_ZN7Encoder11GetDistanceEv>
 80260b0:	eef0 7a40 	vmov.f32	s15, s0
 80260b4:	4b16      	ldr	r3, [pc, #88]	; (8026110 <InitialTest+0xd8>)
 80260b6:	edc3 7a00 	vstr	s15, [r3]
    g_distance_stack = encoder.GetDistanceStack();
 80260ba:	4814      	ldr	r0, [pc, #80]	; (802610c <InitialTest+0xd4>)
 80260bc:	f7fa fef9 	bl	8020eb2 <_ZN7Encoder16GetDistanceStackEv>
 80260c0:	eef0 7a40 	vmov.f32	s15, s0
 80260c4:	4b13      	ldr	r3, [pc, #76]	; (8026114 <InitialTest+0xdc>)
 80260c6:	edc3 7a00 	vstr	s15, [r3]
    g_distance_diff = encoder.AngularVelocity();
 80260ca:	4810      	ldr	r0, [pc, #64]	; (802610c <InitialTest+0xd4>)
 80260cc:	f7fa ff00 	bl	8020ed0 <_ZN7Encoder15AngularVelocityEv>
 80260d0:	eef0 7a40 	vmov.f32	s15, s0
 80260d4:	4b10      	ldr	r3, [pc, #64]	; (8026118 <InitialTest+0xe0>)
 80260d6:	edc3 7a00 	vstr	s15, [r3]

    /* Motor */
    motor.Drive(INIT_DEBUG_MOTOR_DUTY, 0);
 80260da:	eddf 0a10 	vldr	s1, [pc, #64]	; 802611c <InitialTest+0xe4>
 80260de:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 802611c <InitialTest+0xe4>
 80260e2:	480f      	ldr	r0, [pc, #60]	; (8026120 <InitialTest+0xe8>)
 80260e4:	f7fd fd04 	bl	8023af0 <_ZN5Motor5DriveEff>
}
 80260e8:	bf00      	nop
 80260ea:	bd80      	pop	{r7, pc}
 80260ec:	20000344 	.word	0x20000344
 80260f0:	200000b8 	.word	0x200000b8
 80260f4:	200000bc 	.word	0x200000bc
 80260f8:	200002fc 	.word	0x200002fc
 80260fc:	20000770 	.word	0x20000770
 8026100:	200002fd 	.word	0x200002fd
 8026104:	20000251 	.word	0x20000251
 8026108:	20000252 	.word	0x20000252
 802610c:	20000324 	.word	0x20000324
 8026110:	2000027c 	.word	0x2000027c
 8026114:	20000280 	.word	0x20000280
 8026118:	20000284 	.word	0x20000284
 802611c:	00000000 	.word	0x00000000
 8026120:	20000768 	.word	0x20000768

08026124 <_Z41__static_initialization_and_destruction_0ii>:
}

void ImuWriteByte(uint8_t send_address, uint8_t send_data, char imu_ic_lr)
{
    iim_42652.Write(send_address, send_data, imu_ic_lr);
}
 8026124:	b580      	push	{r7, lr}
 8026126:	b082      	sub	sp, #8
 8026128:	af00      	add	r7, sp, #0
 802612a:	6078      	str	r0, [r7, #4]
 802612c:	6039      	str	r1, [r7, #0]
 802612e:	687b      	ldr	r3, [r7, #4]
 8026130:	2b01      	cmp	r3, #1
 8026132:	d11c      	bne.n	802616e <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8026134:	683b      	ldr	r3, [r7, #0]
 8026136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802613a:	4293      	cmp	r3, r2
 802613c:	d117      	bne.n	802616e <_Z41__static_initialization_and_destruction_0ii+0x4a>
Encoder encoder;
 802613e:	480e      	ldr	r0, [pc, #56]	; (8026178 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8026140:	f7fa fde8 	bl	8020d14 <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 8026144:	480d      	ldr	r0, [pc, #52]	; (802617c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8026146:	f7fb f8f2 	bl	802132e <_ZN8Iim42652C1Ev>
LineSensor line_sensor;
 802614a:	480d      	ldr	r0, [pc, #52]	; (8026180 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 802614c:	f7fb fb37 	bl	80217be <_ZN10LineSensorC1Ev>
LineTrace line_trace;
 8026150:	480c      	ldr	r0, [pc, #48]	; (8026184 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8026152:	f7fb fe91 	bl	8021e78 <_ZN9LineTraceC1Ev>
Logger logger;
 8026156:	480c      	ldr	r0, [pc, #48]	; (8026188 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8026158:	f7fb ff82 	bl	8022060 <_ZN6LoggerC1Ev>
Motor motor;
 802615c:	480b      	ldr	r0, [pc, #44]	; (802618c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 802615e:	f7fd fc91 	bl	8023a84 <_ZN5MotorC1Ev>
SideSensor side_sensor;
 8026162:	480b      	ldr	r0, [pc, #44]	; (8026190 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8026164:	f7fd fe4e 	bl	8023e04 <_ZN10SideSensorC1Ev>
VelocityControl velocity_control;
 8026168:	480a      	ldr	r0, [pc, #40]	; (8026194 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 802616a:	f7fe fd4b 	bl	8024c04 <_ZN15VelocityControlC1Ev>
}
 802616e:	bf00      	nop
 8026170:	3708      	adds	r7, #8
 8026172:	46bd      	mov	sp, r7
 8026174:	bd80      	pop	{r7, pc}
 8026176:	bf00      	nop
 8026178:	20000324 	.word	0x20000324
 802617c:	20000338 	.word	0x20000338
 8026180:	20000344 	.word	0x20000344
 8026184:	200004d0 	.word	0x200004d0
 8026188:	20000660 	.word	0x20000660
 802618c:	20000768 	.word	0x20000768
 8026190:	20000770 	.word	0x20000770
 8026194:	20000778 	.word	0x20000778

08026198 <_GLOBAL__sub_I_encoder>:
 8026198:	b580      	push	{r7, lr}
 802619a:	af00      	add	r7, sp, #0
 802619c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80261a0:	2001      	movs	r0, #1
 80261a2:	f7ff ffbf 	bl	8026124 <_Z41__static_initialization_and_destruction_0ii>
 80261a6:	bd80      	pop	{r7, pc}

080261a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80261a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80261e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80261ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80261ae:	e003      	b.n	80261b8 <LoopCopyDataInit>

080261b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80261b0:	4b0c      	ldr	r3, [pc, #48]	; (80261e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80261b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80261b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80261b6:	3104      	adds	r1, #4

080261b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80261b8:	480b      	ldr	r0, [pc, #44]	; (80261e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80261ba:	4b0c      	ldr	r3, [pc, #48]	; (80261ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80261bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80261be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80261c0:	d3f6      	bcc.n	80261b0 <CopyDataInit>
  ldr  r2, =_sbss
 80261c2:	4a0b      	ldr	r2, [pc, #44]	; (80261f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80261c4:	e002      	b.n	80261cc <LoopFillZerobss>

080261c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80261c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80261c8:	f842 3b04 	str.w	r3, [r2], #4

080261cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80261cc:	4b09      	ldr	r3, [pc, #36]	; (80261f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80261ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80261d0:	d3f9      	bcc.n	80261c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80261d2:	f7fe fd01 	bl	8024bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80261d6:	f004 f8a1 	bl	802a31c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80261da:	f7fc fe0d 	bl	8022df8 <main>
  bx  lr    
 80261de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80261e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80261e4:	0802a3d8 	.word	0x0802a3d8
  ldr  r0, =_sdata
 80261e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80261ec:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 80261f0:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 80261f4:	20000b88 	.word	0x20000b88

080261f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80261f8:	e7fe      	b.n	80261f8 <ADC_IRQHandler>
	...

080261fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80261fc:	b580      	push	{r7, lr}
 80261fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8026200:	4b0e      	ldr	r3, [pc, #56]	; (802623c <HAL_Init+0x40>)
 8026202:	681b      	ldr	r3, [r3, #0]
 8026204:	4a0d      	ldr	r2, [pc, #52]	; (802623c <HAL_Init+0x40>)
 8026206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802620a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 802620c:	4b0b      	ldr	r3, [pc, #44]	; (802623c <HAL_Init+0x40>)
 802620e:	681b      	ldr	r3, [r3, #0]
 8026210:	4a0a      	ldr	r2, [pc, #40]	; (802623c <HAL_Init+0x40>)
 8026212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8026216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8026218:	4b08      	ldr	r3, [pc, #32]	; (802623c <HAL_Init+0x40>)
 802621a:	681b      	ldr	r3, [r3, #0]
 802621c:	4a07      	ldr	r2, [pc, #28]	; (802623c <HAL_Init+0x40>)
 802621e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8026224:	2003      	movs	r0, #3
 8026226:	f000 fd41 	bl	8026cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802622a:	2001      	movs	r0, #1
 802622c:	f000 f808 	bl	8026240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8026230:	f7fe f8f6 	bl	8024420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8026234:	2300      	movs	r3, #0
}
 8026236:	4618      	mov	r0, r3
 8026238:	bd80      	pop	{r7, pc}
 802623a:	bf00      	nop
 802623c:	40023c00 	.word	0x40023c00

08026240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8026240:	b580      	push	{r7, lr}
 8026242:	b082      	sub	sp, #8
 8026244:	af00      	add	r7, sp, #0
 8026246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8026248:	4b12      	ldr	r3, [pc, #72]	; (8026294 <HAL_InitTick+0x54>)
 802624a:	681a      	ldr	r2, [r3, #0]
 802624c:	4b12      	ldr	r3, [pc, #72]	; (8026298 <HAL_InitTick+0x58>)
 802624e:	781b      	ldrb	r3, [r3, #0]
 8026250:	4619      	mov	r1, r3
 8026252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026256:	fbb3 f3f1 	udiv	r3, r3, r1
 802625a:	fbb2 f3f3 	udiv	r3, r2, r3
 802625e:	4618      	mov	r0, r3
 8026260:	f000 fd59 	bl	8026d16 <HAL_SYSTICK_Config>
 8026264:	4603      	mov	r3, r0
 8026266:	2b00      	cmp	r3, #0
 8026268:	d001      	beq.n	802626e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 802626a:	2301      	movs	r3, #1
 802626c:	e00e      	b.n	802628c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802626e:	687b      	ldr	r3, [r7, #4]
 8026270:	2b0f      	cmp	r3, #15
 8026272:	d80a      	bhi.n	802628a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8026274:	2200      	movs	r2, #0
 8026276:	6879      	ldr	r1, [r7, #4]
 8026278:	f04f 30ff 	mov.w	r0, #4294967295
 802627c:	f000 fd21 	bl	8026cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8026280:	4a06      	ldr	r2, [pc, #24]	; (802629c <HAL_InitTick+0x5c>)
 8026282:	687b      	ldr	r3, [r7, #4]
 8026284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8026286:	2300      	movs	r3, #0
 8026288:	e000      	b.n	802628c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 802628a:	2301      	movs	r3, #1
}
 802628c:	4618      	mov	r0, r3
 802628e:	3708      	adds	r7, #8
 8026290:	46bd      	mov	sp, r7
 8026292:	bd80      	pop	{r7, pc}
 8026294:	20000010 	.word	0x20000010
 8026298:	20000018 	.word	0x20000018
 802629c:	20000014 	.word	0x20000014

080262a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80262a0:	b480      	push	{r7}
 80262a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80262a4:	4b06      	ldr	r3, [pc, #24]	; (80262c0 <HAL_IncTick+0x20>)
 80262a6:	781b      	ldrb	r3, [r3, #0]
 80262a8:	461a      	mov	r2, r3
 80262aa:	4b06      	ldr	r3, [pc, #24]	; (80262c4 <HAL_IncTick+0x24>)
 80262ac:	681b      	ldr	r3, [r3, #0]
 80262ae:	4413      	add	r3, r2
 80262b0:	4a04      	ldr	r2, [pc, #16]	; (80262c4 <HAL_IncTick+0x24>)
 80262b2:	6013      	str	r3, [r2, #0]
}
 80262b4:	bf00      	nop
 80262b6:	46bd      	mov	sp, r7
 80262b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262bc:	4770      	bx	lr
 80262be:	bf00      	nop
 80262c0:	20000018 	.word	0x20000018
 80262c4:	20000b64 	.word	0x20000b64

080262c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80262c8:	b480      	push	{r7}
 80262ca:	af00      	add	r7, sp, #0
  return uwTick;
 80262cc:	4b03      	ldr	r3, [pc, #12]	; (80262dc <HAL_GetTick+0x14>)
 80262ce:	681b      	ldr	r3, [r3, #0]
}
 80262d0:	4618      	mov	r0, r3
 80262d2:	46bd      	mov	sp, r7
 80262d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262d8:	4770      	bx	lr
 80262da:	bf00      	nop
 80262dc:	20000b64 	.word	0x20000b64

080262e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80262e0:	b580      	push	{r7, lr}
 80262e2:	b084      	sub	sp, #16
 80262e4:	af00      	add	r7, sp, #0
 80262e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80262e8:	f7ff ffee 	bl	80262c8 <HAL_GetTick>
 80262ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80262ee:	687b      	ldr	r3, [r7, #4]
 80262f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80262f2:	68fb      	ldr	r3, [r7, #12]
 80262f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80262f8:	d005      	beq.n	8026306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80262fa:	4b09      	ldr	r3, [pc, #36]	; (8026320 <HAL_Delay+0x40>)
 80262fc:	781b      	ldrb	r3, [r3, #0]
 80262fe:	461a      	mov	r2, r3
 8026300:	68fb      	ldr	r3, [r7, #12]
 8026302:	4413      	add	r3, r2
 8026304:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8026306:	bf00      	nop
 8026308:	f7ff ffde 	bl	80262c8 <HAL_GetTick>
 802630c:	4602      	mov	r2, r0
 802630e:	68bb      	ldr	r3, [r7, #8]
 8026310:	1ad3      	subs	r3, r2, r3
 8026312:	68fa      	ldr	r2, [r7, #12]
 8026314:	429a      	cmp	r2, r3
 8026316:	d8f7      	bhi.n	8026308 <HAL_Delay+0x28>
  {
  }
}
 8026318:	bf00      	nop
 802631a:	3710      	adds	r7, #16
 802631c:	46bd      	mov	sp, r7
 802631e:	bd80      	pop	{r7, pc}
 8026320:	20000018 	.word	0x20000018

08026324 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8026324:	b580      	push	{r7, lr}
 8026326:	b084      	sub	sp, #16
 8026328:	af00      	add	r7, sp, #0
 802632a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 802632c:	2300      	movs	r3, #0
 802632e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8026330:	687b      	ldr	r3, [r7, #4]
 8026332:	2b00      	cmp	r3, #0
 8026334:	d101      	bne.n	802633a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8026336:	2301      	movs	r3, #1
 8026338:	e033      	b.n	80263a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 802633a:	687b      	ldr	r3, [r7, #4]
 802633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802633e:	2b00      	cmp	r3, #0
 8026340:	d109      	bne.n	8026356 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8026342:	6878      	ldr	r0, [r7, #4]
 8026344:	f7fe f894 	bl	8024470 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8026348:	687b      	ldr	r3, [r7, #4]
 802634a:	2200      	movs	r2, #0
 802634c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 802634e:	687b      	ldr	r3, [r7, #4]
 8026350:	2200      	movs	r2, #0
 8026352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8026356:	687b      	ldr	r3, [r7, #4]
 8026358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802635a:	f003 0310 	and.w	r3, r3, #16
 802635e:	2b00      	cmp	r3, #0
 8026360:	d118      	bne.n	8026394 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8026362:	687b      	ldr	r3, [r7, #4]
 8026364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026366:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 802636a:	f023 0302 	bic.w	r3, r3, #2
 802636e:	f043 0202 	orr.w	r2, r3, #2
 8026372:	687b      	ldr	r3, [r7, #4]
 8026374:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8026376:	6878      	ldr	r0, [r7, #4]
 8026378:	f000 fa4a 	bl	8026810 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 802637c:	687b      	ldr	r3, [r7, #4]
 802637e:	2200      	movs	r2, #0
 8026380:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8026382:	687b      	ldr	r3, [r7, #4]
 8026384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026386:	f023 0303 	bic.w	r3, r3, #3
 802638a:	f043 0201 	orr.w	r2, r3, #1
 802638e:	687b      	ldr	r3, [r7, #4]
 8026390:	641a      	str	r2, [r3, #64]	; 0x40
 8026392:	e001      	b.n	8026398 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8026394:	2301      	movs	r3, #1
 8026396:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8026398:	687b      	ldr	r3, [r7, #4]
 802639a:	2200      	movs	r2, #0
 802639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80263a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80263a2:	4618      	mov	r0, r3
 80263a4:	3710      	adds	r7, #16
 80263a6:	46bd      	mov	sp, r7
 80263a8:	bd80      	pop	{r7, pc}
	...

080263ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80263ac:	b580      	push	{r7, lr}
 80263ae:	b086      	sub	sp, #24
 80263b0:	af00      	add	r7, sp, #0
 80263b2:	60f8      	str	r0, [r7, #12]
 80263b4:	60b9      	str	r1, [r7, #8]
 80263b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80263b8:	2300      	movs	r3, #0
 80263ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80263bc:	68fb      	ldr	r3, [r7, #12]
 80263be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80263c2:	2b01      	cmp	r3, #1
 80263c4:	d101      	bne.n	80263ca <HAL_ADC_Start_DMA+0x1e>
 80263c6:	2302      	movs	r3, #2
 80263c8:	e0cc      	b.n	8026564 <HAL_ADC_Start_DMA+0x1b8>
 80263ca:	68fb      	ldr	r3, [r7, #12]
 80263cc:	2201      	movs	r2, #1
 80263ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80263d2:	68fb      	ldr	r3, [r7, #12]
 80263d4:	681b      	ldr	r3, [r3, #0]
 80263d6:	689b      	ldr	r3, [r3, #8]
 80263d8:	f003 0301 	and.w	r3, r3, #1
 80263dc:	2b01      	cmp	r3, #1
 80263de:	d018      	beq.n	8026412 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80263e0:	68fb      	ldr	r3, [r7, #12]
 80263e2:	681b      	ldr	r3, [r3, #0]
 80263e4:	689a      	ldr	r2, [r3, #8]
 80263e6:	68fb      	ldr	r3, [r7, #12]
 80263e8:	681b      	ldr	r3, [r3, #0]
 80263ea:	f042 0201 	orr.w	r2, r2, #1
 80263ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80263f0:	4b5e      	ldr	r3, [pc, #376]	; (802656c <HAL_ADC_Start_DMA+0x1c0>)
 80263f2:	681b      	ldr	r3, [r3, #0]
 80263f4:	4a5e      	ldr	r2, [pc, #376]	; (8026570 <HAL_ADC_Start_DMA+0x1c4>)
 80263f6:	fba2 2303 	umull	r2, r3, r2, r3
 80263fa:	0c9a      	lsrs	r2, r3, #18
 80263fc:	4613      	mov	r3, r2
 80263fe:	005b      	lsls	r3, r3, #1
 8026400:	4413      	add	r3, r2
 8026402:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8026404:	e002      	b.n	802640c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8026406:	693b      	ldr	r3, [r7, #16]
 8026408:	3b01      	subs	r3, #1
 802640a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 802640c:	693b      	ldr	r3, [r7, #16]
 802640e:	2b00      	cmp	r3, #0
 8026410:	d1f9      	bne.n	8026406 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8026412:	68fb      	ldr	r3, [r7, #12]
 8026414:	681b      	ldr	r3, [r3, #0]
 8026416:	689b      	ldr	r3, [r3, #8]
 8026418:	f003 0301 	and.w	r3, r3, #1
 802641c:	2b01      	cmp	r3, #1
 802641e:	f040 80a0 	bne.w	8026562 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8026422:	68fb      	ldr	r3, [r7, #12]
 8026424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026426:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 802642a:	f023 0301 	bic.w	r3, r3, #1
 802642e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8026432:	68fb      	ldr	r3, [r7, #12]
 8026434:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8026436:	68fb      	ldr	r3, [r7, #12]
 8026438:	681b      	ldr	r3, [r3, #0]
 802643a:	685b      	ldr	r3, [r3, #4]
 802643c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8026440:	2b00      	cmp	r3, #0
 8026442:	d007      	beq.n	8026454 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8026444:	68fb      	ldr	r3, [r7, #12]
 8026446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026448:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 802644c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8026450:	68fb      	ldr	r3, [r7, #12]
 8026452:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8026454:	68fb      	ldr	r3, [r7, #12]
 8026456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802645c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026460:	d106      	bne.n	8026470 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8026462:	68fb      	ldr	r3, [r7, #12]
 8026464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026466:	f023 0206 	bic.w	r2, r3, #6
 802646a:	68fb      	ldr	r3, [r7, #12]
 802646c:	645a      	str	r2, [r3, #68]	; 0x44
 802646e:	e002      	b.n	8026476 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8026470:	68fb      	ldr	r3, [r7, #12]
 8026472:	2200      	movs	r2, #0
 8026474:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8026476:	68fb      	ldr	r3, [r7, #12]
 8026478:	2200      	movs	r2, #0
 802647a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802647e:	4b3d      	ldr	r3, [pc, #244]	; (8026574 <HAL_ADC_Start_DMA+0x1c8>)
 8026480:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8026482:	68fb      	ldr	r3, [r7, #12]
 8026484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026486:	4a3c      	ldr	r2, [pc, #240]	; (8026578 <HAL_ADC_Start_DMA+0x1cc>)
 8026488:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 802648a:	68fb      	ldr	r3, [r7, #12]
 802648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802648e:	4a3b      	ldr	r2, [pc, #236]	; (802657c <HAL_ADC_Start_DMA+0x1d0>)
 8026490:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8026492:	68fb      	ldr	r3, [r7, #12]
 8026494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026496:	4a3a      	ldr	r2, [pc, #232]	; (8026580 <HAL_ADC_Start_DMA+0x1d4>)
 8026498:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 802649a:	68fb      	ldr	r3, [r7, #12]
 802649c:	681b      	ldr	r3, [r3, #0]
 802649e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80264a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80264a4:	68fb      	ldr	r3, [r7, #12]
 80264a6:	681b      	ldr	r3, [r3, #0]
 80264a8:	685a      	ldr	r2, [r3, #4]
 80264aa:	68fb      	ldr	r3, [r7, #12]
 80264ac:	681b      	ldr	r3, [r3, #0]
 80264ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80264b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80264b4:	68fb      	ldr	r3, [r7, #12]
 80264b6:	681b      	ldr	r3, [r3, #0]
 80264b8:	689a      	ldr	r2, [r3, #8]
 80264ba:	68fb      	ldr	r3, [r7, #12]
 80264bc:	681b      	ldr	r3, [r3, #0]
 80264be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80264c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80264c4:	68fb      	ldr	r3, [r7, #12]
 80264c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80264c8:	68fb      	ldr	r3, [r7, #12]
 80264ca:	681b      	ldr	r3, [r3, #0]
 80264cc:	334c      	adds	r3, #76	; 0x4c
 80264ce:	4619      	mov	r1, r3
 80264d0:	68ba      	ldr	r2, [r7, #8]
 80264d2:	687b      	ldr	r3, [r7, #4]
 80264d4:	f000 fcda 	bl	8026e8c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80264d8:	697b      	ldr	r3, [r7, #20]
 80264da:	685b      	ldr	r3, [r3, #4]
 80264dc:	f003 031f 	and.w	r3, r3, #31
 80264e0:	2b00      	cmp	r3, #0
 80264e2:	d12a      	bne.n	802653a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80264e4:	68fb      	ldr	r3, [r7, #12]
 80264e6:	681b      	ldr	r3, [r3, #0]
 80264e8:	4a26      	ldr	r2, [pc, #152]	; (8026584 <HAL_ADC_Start_DMA+0x1d8>)
 80264ea:	4293      	cmp	r3, r2
 80264ec:	d015      	beq.n	802651a <HAL_ADC_Start_DMA+0x16e>
 80264ee:	68fb      	ldr	r3, [r7, #12]
 80264f0:	681b      	ldr	r3, [r3, #0]
 80264f2:	4a25      	ldr	r2, [pc, #148]	; (8026588 <HAL_ADC_Start_DMA+0x1dc>)
 80264f4:	4293      	cmp	r3, r2
 80264f6:	d105      	bne.n	8026504 <HAL_ADC_Start_DMA+0x158>
 80264f8:	4b1e      	ldr	r3, [pc, #120]	; (8026574 <HAL_ADC_Start_DMA+0x1c8>)
 80264fa:	685b      	ldr	r3, [r3, #4]
 80264fc:	f003 031f 	and.w	r3, r3, #31
 8026500:	2b00      	cmp	r3, #0
 8026502:	d00a      	beq.n	802651a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8026504:	68fb      	ldr	r3, [r7, #12]
 8026506:	681b      	ldr	r3, [r3, #0]
 8026508:	4a20      	ldr	r2, [pc, #128]	; (802658c <HAL_ADC_Start_DMA+0x1e0>)
 802650a:	4293      	cmp	r3, r2
 802650c:	d129      	bne.n	8026562 <HAL_ADC_Start_DMA+0x1b6>
 802650e:	4b19      	ldr	r3, [pc, #100]	; (8026574 <HAL_ADC_Start_DMA+0x1c8>)
 8026510:	685b      	ldr	r3, [r3, #4]
 8026512:	f003 031f 	and.w	r3, r3, #31
 8026516:	2b0f      	cmp	r3, #15
 8026518:	d823      	bhi.n	8026562 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 802651a:	68fb      	ldr	r3, [r7, #12]
 802651c:	681b      	ldr	r3, [r3, #0]
 802651e:	689b      	ldr	r3, [r3, #8]
 8026520:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8026524:	2b00      	cmp	r3, #0
 8026526:	d11c      	bne.n	8026562 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8026528:	68fb      	ldr	r3, [r7, #12]
 802652a:	681b      	ldr	r3, [r3, #0]
 802652c:	689a      	ldr	r2, [r3, #8]
 802652e:	68fb      	ldr	r3, [r7, #12]
 8026530:	681b      	ldr	r3, [r3, #0]
 8026532:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8026536:	609a      	str	r2, [r3, #8]
 8026538:	e013      	b.n	8026562 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 802653a:	68fb      	ldr	r3, [r7, #12]
 802653c:	681b      	ldr	r3, [r3, #0]
 802653e:	4a11      	ldr	r2, [pc, #68]	; (8026584 <HAL_ADC_Start_DMA+0x1d8>)
 8026540:	4293      	cmp	r3, r2
 8026542:	d10e      	bne.n	8026562 <HAL_ADC_Start_DMA+0x1b6>
 8026544:	68fb      	ldr	r3, [r7, #12]
 8026546:	681b      	ldr	r3, [r3, #0]
 8026548:	689b      	ldr	r3, [r3, #8]
 802654a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802654e:	2b00      	cmp	r3, #0
 8026550:	d107      	bne.n	8026562 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8026552:	68fb      	ldr	r3, [r7, #12]
 8026554:	681b      	ldr	r3, [r3, #0]
 8026556:	689a      	ldr	r2, [r3, #8]
 8026558:	68fb      	ldr	r3, [r7, #12]
 802655a:	681b      	ldr	r3, [r3, #0]
 802655c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8026560:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8026562:	2300      	movs	r3, #0
}
 8026564:	4618      	mov	r0, r3
 8026566:	3718      	adds	r7, #24
 8026568:	46bd      	mov	sp, r7
 802656a:	bd80      	pop	{r7, pc}
 802656c:	20000010 	.word	0x20000010
 8026570:	431bde83 	.word	0x431bde83
 8026574:	40012300 	.word	0x40012300
 8026578:	08026a09 	.word	0x08026a09
 802657c:	08026ac3 	.word	0x08026ac3
 8026580:	08026adf 	.word	0x08026adf
 8026584:	40012000 	.word	0x40012000
 8026588:	40012100 	.word	0x40012100
 802658c:	40012200 	.word	0x40012200

08026590 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8026590:	b480      	push	{r7}
 8026592:	b083      	sub	sp, #12
 8026594:	af00      	add	r7, sp, #0
 8026596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8026598:	bf00      	nop
 802659a:	370c      	adds	r7, #12
 802659c:	46bd      	mov	sp, r7
 802659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265a2:	4770      	bx	lr

080265a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80265a4:	b480      	push	{r7}
 80265a6:	b083      	sub	sp, #12
 80265a8:	af00      	add	r7, sp, #0
 80265aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80265ac:	bf00      	nop
 80265ae:	370c      	adds	r7, #12
 80265b0:	46bd      	mov	sp, r7
 80265b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265b6:	4770      	bx	lr

080265b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80265b8:	b480      	push	{r7}
 80265ba:	b083      	sub	sp, #12
 80265bc:	af00      	add	r7, sp, #0
 80265be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80265c0:	bf00      	nop
 80265c2:	370c      	adds	r7, #12
 80265c4:	46bd      	mov	sp, r7
 80265c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265ca:	4770      	bx	lr

080265cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80265cc:	b480      	push	{r7}
 80265ce:	b085      	sub	sp, #20
 80265d0:	af00      	add	r7, sp, #0
 80265d2:	6078      	str	r0, [r7, #4]
 80265d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80265d6:	2300      	movs	r3, #0
 80265d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80265da:	687b      	ldr	r3, [r7, #4]
 80265dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80265e0:	2b01      	cmp	r3, #1
 80265e2:	d101      	bne.n	80265e8 <HAL_ADC_ConfigChannel+0x1c>
 80265e4:	2302      	movs	r3, #2
 80265e6:	e105      	b.n	80267f4 <HAL_ADC_ConfigChannel+0x228>
 80265e8:	687b      	ldr	r3, [r7, #4]
 80265ea:	2201      	movs	r2, #1
 80265ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80265f0:	683b      	ldr	r3, [r7, #0]
 80265f2:	681b      	ldr	r3, [r3, #0]
 80265f4:	2b09      	cmp	r3, #9
 80265f6:	d925      	bls.n	8026644 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80265f8:	687b      	ldr	r3, [r7, #4]
 80265fa:	681b      	ldr	r3, [r3, #0]
 80265fc:	68d9      	ldr	r1, [r3, #12]
 80265fe:	683b      	ldr	r3, [r7, #0]
 8026600:	681b      	ldr	r3, [r3, #0]
 8026602:	b29b      	uxth	r3, r3
 8026604:	461a      	mov	r2, r3
 8026606:	4613      	mov	r3, r2
 8026608:	005b      	lsls	r3, r3, #1
 802660a:	4413      	add	r3, r2
 802660c:	3b1e      	subs	r3, #30
 802660e:	2207      	movs	r2, #7
 8026610:	fa02 f303 	lsl.w	r3, r2, r3
 8026614:	43da      	mvns	r2, r3
 8026616:	687b      	ldr	r3, [r7, #4]
 8026618:	681b      	ldr	r3, [r3, #0]
 802661a:	400a      	ands	r2, r1
 802661c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 802661e:	687b      	ldr	r3, [r7, #4]
 8026620:	681b      	ldr	r3, [r3, #0]
 8026622:	68d9      	ldr	r1, [r3, #12]
 8026624:	683b      	ldr	r3, [r7, #0]
 8026626:	689a      	ldr	r2, [r3, #8]
 8026628:	683b      	ldr	r3, [r7, #0]
 802662a:	681b      	ldr	r3, [r3, #0]
 802662c:	b29b      	uxth	r3, r3
 802662e:	4618      	mov	r0, r3
 8026630:	4603      	mov	r3, r0
 8026632:	005b      	lsls	r3, r3, #1
 8026634:	4403      	add	r3, r0
 8026636:	3b1e      	subs	r3, #30
 8026638:	409a      	lsls	r2, r3
 802663a:	687b      	ldr	r3, [r7, #4]
 802663c:	681b      	ldr	r3, [r3, #0]
 802663e:	430a      	orrs	r2, r1
 8026640:	60da      	str	r2, [r3, #12]
 8026642:	e022      	b.n	802668a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8026644:	687b      	ldr	r3, [r7, #4]
 8026646:	681b      	ldr	r3, [r3, #0]
 8026648:	6919      	ldr	r1, [r3, #16]
 802664a:	683b      	ldr	r3, [r7, #0]
 802664c:	681b      	ldr	r3, [r3, #0]
 802664e:	b29b      	uxth	r3, r3
 8026650:	461a      	mov	r2, r3
 8026652:	4613      	mov	r3, r2
 8026654:	005b      	lsls	r3, r3, #1
 8026656:	4413      	add	r3, r2
 8026658:	2207      	movs	r2, #7
 802665a:	fa02 f303 	lsl.w	r3, r2, r3
 802665e:	43da      	mvns	r2, r3
 8026660:	687b      	ldr	r3, [r7, #4]
 8026662:	681b      	ldr	r3, [r3, #0]
 8026664:	400a      	ands	r2, r1
 8026666:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8026668:	687b      	ldr	r3, [r7, #4]
 802666a:	681b      	ldr	r3, [r3, #0]
 802666c:	6919      	ldr	r1, [r3, #16]
 802666e:	683b      	ldr	r3, [r7, #0]
 8026670:	689a      	ldr	r2, [r3, #8]
 8026672:	683b      	ldr	r3, [r7, #0]
 8026674:	681b      	ldr	r3, [r3, #0]
 8026676:	b29b      	uxth	r3, r3
 8026678:	4618      	mov	r0, r3
 802667a:	4603      	mov	r3, r0
 802667c:	005b      	lsls	r3, r3, #1
 802667e:	4403      	add	r3, r0
 8026680:	409a      	lsls	r2, r3
 8026682:	687b      	ldr	r3, [r7, #4]
 8026684:	681b      	ldr	r3, [r3, #0]
 8026686:	430a      	orrs	r2, r1
 8026688:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 802668a:	683b      	ldr	r3, [r7, #0]
 802668c:	685b      	ldr	r3, [r3, #4]
 802668e:	2b06      	cmp	r3, #6
 8026690:	d824      	bhi.n	80266dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8026692:	687b      	ldr	r3, [r7, #4]
 8026694:	681b      	ldr	r3, [r3, #0]
 8026696:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8026698:	683b      	ldr	r3, [r7, #0]
 802669a:	685a      	ldr	r2, [r3, #4]
 802669c:	4613      	mov	r3, r2
 802669e:	009b      	lsls	r3, r3, #2
 80266a0:	4413      	add	r3, r2
 80266a2:	3b05      	subs	r3, #5
 80266a4:	221f      	movs	r2, #31
 80266a6:	fa02 f303 	lsl.w	r3, r2, r3
 80266aa:	43da      	mvns	r2, r3
 80266ac:	687b      	ldr	r3, [r7, #4]
 80266ae:	681b      	ldr	r3, [r3, #0]
 80266b0:	400a      	ands	r2, r1
 80266b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80266b4:	687b      	ldr	r3, [r7, #4]
 80266b6:	681b      	ldr	r3, [r3, #0]
 80266b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80266ba:	683b      	ldr	r3, [r7, #0]
 80266bc:	681b      	ldr	r3, [r3, #0]
 80266be:	b29b      	uxth	r3, r3
 80266c0:	4618      	mov	r0, r3
 80266c2:	683b      	ldr	r3, [r7, #0]
 80266c4:	685a      	ldr	r2, [r3, #4]
 80266c6:	4613      	mov	r3, r2
 80266c8:	009b      	lsls	r3, r3, #2
 80266ca:	4413      	add	r3, r2
 80266cc:	3b05      	subs	r3, #5
 80266ce:	fa00 f203 	lsl.w	r2, r0, r3
 80266d2:	687b      	ldr	r3, [r7, #4]
 80266d4:	681b      	ldr	r3, [r3, #0]
 80266d6:	430a      	orrs	r2, r1
 80266d8:	635a      	str	r2, [r3, #52]	; 0x34
 80266da:	e04c      	b.n	8026776 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80266dc:	683b      	ldr	r3, [r7, #0]
 80266de:	685b      	ldr	r3, [r3, #4]
 80266e0:	2b0c      	cmp	r3, #12
 80266e2:	d824      	bhi.n	802672e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80266e4:	687b      	ldr	r3, [r7, #4]
 80266e6:	681b      	ldr	r3, [r3, #0]
 80266e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80266ea:	683b      	ldr	r3, [r7, #0]
 80266ec:	685a      	ldr	r2, [r3, #4]
 80266ee:	4613      	mov	r3, r2
 80266f0:	009b      	lsls	r3, r3, #2
 80266f2:	4413      	add	r3, r2
 80266f4:	3b23      	subs	r3, #35	; 0x23
 80266f6:	221f      	movs	r2, #31
 80266f8:	fa02 f303 	lsl.w	r3, r2, r3
 80266fc:	43da      	mvns	r2, r3
 80266fe:	687b      	ldr	r3, [r7, #4]
 8026700:	681b      	ldr	r3, [r3, #0]
 8026702:	400a      	ands	r2, r1
 8026704:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8026706:	687b      	ldr	r3, [r7, #4]
 8026708:	681b      	ldr	r3, [r3, #0]
 802670a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802670c:	683b      	ldr	r3, [r7, #0]
 802670e:	681b      	ldr	r3, [r3, #0]
 8026710:	b29b      	uxth	r3, r3
 8026712:	4618      	mov	r0, r3
 8026714:	683b      	ldr	r3, [r7, #0]
 8026716:	685a      	ldr	r2, [r3, #4]
 8026718:	4613      	mov	r3, r2
 802671a:	009b      	lsls	r3, r3, #2
 802671c:	4413      	add	r3, r2
 802671e:	3b23      	subs	r3, #35	; 0x23
 8026720:	fa00 f203 	lsl.w	r2, r0, r3
 8026724:	687b      	ldr	r3, [r7, #4]
 8026726:	681b      	ldr	r3, [r3, #0]
 8026728:	430a      	orrs	r2, r1
 802672a:	631a      	str	r2, [r3, #48]	; 0x30
 802672c:	e023      	b.n	8026776 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 802672e:	687b      	ldr	r3, [r7, #4]
 8026730:	681b      	ldr	r3, [r3, #0]
 8026732:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026734:	683b      	ldr	r3, [r7, #0]
 8026736:	685a      	ldr	r2, [r3, #4]
 8026738:	4613      	mov	r3, r2
 802673a:	009b      	lsls	r3, r3, #2
 802673c:	4413      	add	r3, r2
 802673e:	3b41      	subs	r3, #65	; 0x41
 8026740:	221f      	movs	r2, #31
 8026742:	fa02 f303 	lsl.w	r3, r2, r3
 8026746:	43da      	mvns	r2, r3
 8026748:	687b      	ldr	r3, [r7, #4]
 802674a:	681b      	ldr	r3, [r3, #0]
 802674c:	400a      	ands	r2, r1
 802674e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8026750:	687b      	ldr	r3, [r7, #4]
 8026752:	681b      	ldr	r3, [r3, #0]
 8026754:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026756:	683b      	ldr	r3, [r7, #0]
 8026758:	681b      	ldr	r3, [r3, #0]
 802675a:	b29b      	uxth	r3, r3
 802675c:	4618      	mov	r0, r3
 802675e:	683b      	ldr	r3, [r7, #0]
 8026760:	685a      	ldr	r2, [r3, #4]
 8026762:	4613      	mov	r3, r2
 8026764:	009b      	lsls	r3, r3, #2
 8026766:	4413      	add	r3, r2
 8026768:	3b41      	subs	r3, #65	; 0x41
 802676a:	fa00 f203 	lsl.w	r2, r0, r3
 802676e:	687b      	ldr	r3, [r7, #4]
 8026770:	681b      	ldr	r3, [r3, #0]
 8026772:	430a      	orrs	r2, r1
 8026774:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026776:	4b22      	ldr	r3, [pc, #136]	; (8026800 <HAL_ADC_ConfigChannel+0x234>)
 8026778:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 802677a:	687b      	ldr	r3, [r7, #4]
 802677c:	681b      	ldr	r3, [r3, #0]
 802677e:	4a21      	ldr	r2, [pc, #132]	; (8026804 <HAL_ADC_ConfigChannel+0x238>)
 8026780:	4293      	cmp	r3, r2
 8026782:	d109      	bne.n	8026798 <HAL_ADC_ConfigChannel+0x1cc>
 8026784:	683b      	ldr	r3, [r7, #0]
 8026786:	681b      	ldr	r3, [r3, #0]
 8026788:	2b12      	cmp	r3, #18
 802678a:	d105      	bne.n	8026798 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 802678c:	68fb      	ldr	r3, [r7, #12]
 802678e:	685b      	ldr	r3, [r3, #4]
 8026790:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8026794:	68fb      	ldr	r3, [r7, #12]
 8026796:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8026798:	687b      	ldr	r3, [r7, #4]
 802679a:	681b      	ldr	r3, [r3, #0]
 802679c:	4a19      	ldr	r2, [pc, #100]	; (8026804 <HAL_ADC_ConfigChannel+0x238>)
 802679e:	4293      	cmp	r3, r2
 80267a0:	d123      	bne.n	80267ea <HAL_ADC_ConfigChannel+0x21e>
 80267a2:	683b      	ldr	r3, [r7, #0]
 80267a4:	681b      	ldr	r3, [r3, #0]
 80267a6:	2b10      	cmp	r3, #16
 80267a8:	d003      	beq.n	80267b2 <HAL_ADC_ConfigChannel+0x1e6>
 80267aa:	683b      	ldr	r3, [r7, #0]
 80267ac:	681b      	ldr	r3, [r3, #0]
 80267ae:	2b11      	cmp	r3, #17
 80267b0:	d11b      	bne.n	80267ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80267b2:	68fb      	ldr	r3, [r7, #12]
 80267b4:	685b      	ldr	r3, [r3, #4]
 80267b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80267ba:	68fb      	ldr	r3, [r7, #12]
 80267bc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80267be:	683b      	ldr	r3, [r7, #0]
 80267c0:	681b      	ldr	r3, [r3, #0]
 80267c2:	2b10      	cmp	r3, #16
 80267c4:	d111      	bne.n	80267ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80267c6:	4b10      	ldr	r3, [pc, #64]	; (8026808 <HAL_ADC_ConfigChannel+0x23c>)
 80267c8:	681b      	ldr	r3, [r3, #0]
 80267ca:	4a10      	ldr	r2, [pc, #64]	; (802680c <HAL_ADC_ConfigChannel+0x240>)
 80267cc:	fba2 2303 	umull	r2, r3, r2, r3
 80267d0:	0c9a      	lsrs	r2, r3, #18
 80267d2:	4613      	mov	r3, r2
 80267d4:	009b      	lsls	r3, r3, #2
 80267d6:	4413      	add	r3, r2
 80267d8:	005b      	lsls	r3, r3, #1
 80267da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80267dc:	e002      	b.n	80267e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80267de:	68bb      	ldr	r3, [r7, #8]
 80267e0:	3b01      	subs	r3, #1
 80267e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80267e4:	68bb      	ldr	r3, [r7, #8]
 80267e6:	2b00      	cmp	r3, #0
 80267e8:	d1f9      	bne.n	80267de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80267ea:	687b      	ldr	r3, [r7, #4]
 80267ec:	2200      	movs	r2, #0
 80267ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80267f2:	2300      	movs	r3, #0
}
 80267f4:	4618      	mov	r0, r3
 80267f6:	3714      	adds	r7, #20
 80267f8:	46bd      	mov	sp, r7
 80267fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267fe:	4770      	bx	lr
 8026800:	40012300 	.word	0x40012300
 8026804:	40012000 	.word	0x40012000
 8026808:	20000010 	.word	0x20000010
 802680c:	431bde83 	.word	0x431bde83

08026810 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8026810:	b480      	push	{r7}
 8026812:	b085      	sub	sp, #20
 8026814:	af00      	add	r7, sp, #0
 8026816:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026818:	4b79      	ldr	r3, [pc, #484]	; (8026a00 <ADC_Init+0x1f0>)
 802681a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 802681c:	68fb      	ldr	r3, [r7, #12]
 802681e:	685b      	ldr	r3, [r3, #4]
 8026820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8026824:	68fb      	ldr	r3, [r7, #12]
 8026826:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8026828:	68fb      	ldr	r3, [r7, #12]
 802682a:	685a      	ldr	r2, [r3, #4]
 802682c:	687b      	ldr	r3, [r7, #4]
 802682e:	685b      	ldr	r3, [r3, #4]
 8026830:	431a      	orrs	r2, r3
 8026832:	68fb      	ldr	r3, [r7, #12]
 8026834:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8026836:	687b      	ldr	r3, [r7, #4]
 8026838:	681b      	ldr	r3, [r3, #0]
 802683a:	685a      	ldr	r2, [r3, #4]
 802683c:	687b      	ldr	r3, [r7, #4]
 802683e:	681b      	ldr	r3, [r3, #0]
 8026840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8026844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8026846:	687b      	ldr	r3, [r7, #4]
 8026848:	681b      	ldr	r3, [r3, #0]
 802684a:	6859      	ldr	r1, [r3, #4]
 802684c:	687b      	ldr	r3, [r7, #4]
 802684e:	691b      	ldr	r3, [r3, #16]
 8026850:	021a      	lsls	r2, r3, #8
 8026852:	687b      	ldr	r3, [r7, #4]
 8026854:	681b      	ldr	r3, [r3, #0]
 8026856:	430a      	orrs	r2, r1
 8026858:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 802685a:	687b      	ldr	r3, [r7, #4]
 802685c:	681b      	ldr	r3, [r3, #0]
 802685e:	685a      	ldr	r2, [r3, #4]
 8026860:	687b      	ldr	r3, [r7, #4]
 8026862:	681b      	ldr	r3, [r3, #0]
 8026864:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8026868:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 802686a:	687b      	ldr	r3, [r7, #4]
 802686c:	681b      	ldr	r3, [r3, #0]
 802686e:	6859      	ldr	r1, [r3, #4]
 8026870:	687b      	ldr	r3, [r7, #4]
 8026872:	689a      	ldr	r2, [r3, #8]
 8026874:	687b      	ldr	r3, [r7, #4]
 8026876:	681b      	ldr	r3, [r3, #0]
 8026878:	430a      	orrs	r2, r1
 802687a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 802687c:	687b      	ldr	r3, [r7, #4]
 802687e:	681b      	ldr	r3, [r3, #0]
 8026880:	689a      	ldr	r2, [r3, #8]
 8026882:	687b      	ldr	r3, [r7, #4]
 8026884:	681b      	ldr	r3, [r3, #0]
 8026886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802688a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 802688c:	687b      	ldr	r3, [r7, #4]
 802688e:	681b      	ldr	r3, [r3, #0]
 8026890:	6899      	ldr	r1, [r3, #8]
 8026892:	687b      	ldr	r3, [r7, #4]
 8026894:	68da      	ldr	r2, [r3, #12]
 8026896:	687b      	ldr	r3, [r7, #4]
 8026898:	681b      	ldr	r3, [r3, #0]
 802689a:	430a      	orrs	r2, r1
 802689c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 802689e:	687b      	ldr	r3, [r7, #4]
 80268a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80268a2:	4a58      	ldr	r2, [pc, #352]	; (8026a04 <ADC_Init+0x1f4>)
 80268a4:	4293      	cmp	r3, r2
 80268a6:	d022      	beq.n	80268ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80268a8:	687b      	ldr	r3, [r7, #4]
 80268aa:	681b      	ldr	r3, [r3, #0]
 80268ac:	689a      	ldr	r2, [r3, #8]
 80268ae:	687b      	ldr	r3, [r7, #4]
 80268b0:	681b      	ldr	r3, [r3, #0]
 80268b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80268b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80268b8:	687b      	ldr	r3, [r7, #4]
 80268ba:	681b      	ldr	r3, [r3, #0]
 80268bc:	6899      	ldr	r1, [r3, #8]
 80268be:	687b      	ldr	r3, [r7, #4]
 80268c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80268c2:	687b      	ldr	r3, [r7, #4]
 80268c4:	681b      	ldr	r3, [r3, #0]
 80268c6:	430a      	orrs	r2, r1
 80268c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80268ca:	687b      	ldr	r3, [r7, #4]
 80268cc:	681b      	ldr	r3, [r3, #0]
 80268ce:	689a      	ldr	r2, [r3, #8]
 80268d0:	687b      	ldr	r3, [r7, #4]
 80268d2:	681b      	ldr	r3, [r3, #0]
 80268d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80268d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80268da:	687b      	ldr	r3, [r7, #4]
 80268dc:	681b      	ldr	r3, [r3, #0]
 80268de:	6899      	ldr	r1, [r3, #8]
 80268e0:	687b      	ldr	r3, [r7, #4]
 80268e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80268e4:	687b      	ldr	r3, [r7, #4]
 80268e6:	681b      	ldr	r3, [r3, #0]
 80268e8:	430a      	orrs	r2, r1
 80268ea:	609a      	str	r2, [r3, #8]
 80268ec:	e00f      	b.n	802690e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80268ee:	687b      	ldr	r3, [r7, #4]
 80268f0:	681b      	ldr	r3, [r3, #0]
 80268f2:	689a      	ldr	r2, [r3, #8]
 80268f4:	687b      	ldr	r3, [r7, #4]
 80268f6:	681b      	ldr	r3, [r3, #0]
 80268f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80268fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80268fe:	687b      	ldr	r3, [r7, #4]
 8026900:	681b      	ldr	r3, [r3, #0]
 8026902:	689a      	ldr	r2, [r3, #8]
 8026904:	687b      	ldr	r3, [r7, #4]
 8026906:	681b      	ldr	r3, [r3, #0]
 8026908:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 802690c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 802690e:	687b      	ldr	r3, [r7, #4]
 8026910:	681b      	ldr	r3, [r3, #0]
 8026912:	689a      	ldr	r2, [r3, #8]
 8026914:	687b      	ldr	r3, [r7, #4]
 8026916:	681b      	ldr	r3, [r3, #0]
 8026918:	f022 0202 	bic.w	r2, r2, #2
 802691c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 802691e:	687b      	ldr	r3, [r7, #4]
 8026920:	681b      	ldr	r3, [r3, #0]
 8026922:	6899      	ldr	r1, [r3, #8]
 8026924:	687b      	ldr	r3, [r7, #4]
 8026926:	7e1b      	ldrb	r3, [r3, #24]
 8026928:	005a      	lsls	r2, r3, #1
 802692a:	687b      	ldr	r3, [r7, #4]
 802692c:	681b      	ldr	r3, [r3, #0]
 802692e:	430a      	orrs	r2, r1
 8026930:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8026932:	687b      	ldr	r3, [r7, #4]
 8026934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8026938:	2b00      	cmp	r3, #0
 802693a:	d01b      	beq.n	8026974 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 802693c:	687b      	ldr	r3, [r7, #4]
 802693e:	681b      	ldr	r3, [r3, #0]
 8026940:	685a      	ldr	r2, [r3, #4]
 8026942:	687b      	ldr	r3, [r7, #4]
 8026944:	681b      	ldr	r3, [r3, #0]
 8026946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802694a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 802694c:	687b      	ldr	r3, [r7, #4]
 802694e:	681b      	ldr	r3, [r3, #0]
 8026950:	685a      	ldr	r2, [r3, #4]
 8026952:	687b      	ldr	r3, [r7, #4]
 8026954:	681b      	ldr	r3, [r3, #0]
 8026956:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 802695a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 802695c:	687b      	ldr	r3, [r7, #4]
 802695e:	681b      	ldr	r3, [r3, #0]
 8026960:	6859      	ldr	r1, [r3, #4]
 8026962:	687b      	ldr	r3, [r7, #4]
 8026964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026966:	3b01      	subs	r3, #1
 8026968:	035a      	lsls	r2, r3, #13
 802696a:	687b      	ldr	r3, [r7, #4]
 802696c:	681b      	ldr	r3, [r3, #0]
 802696e:	430a      	orrs	r2, r1
 8026970:	605a      	str	r2, [r3, #4]
 8026972:	e007      	b.n	8026984 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8026974:	687b      	ldr	r3, [r7, #4]
 8026976:	681b      	ldr	r3, [r3, #0]
 8026978:	685a      	ldr	r2, [r3, #4]
 802697a:	687b      	ldr	r3, [r7, #4]
 802697c:	681b      	ldr	r3, [r3, #0]
 802697e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8026982:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8026984:	687b      	ldr	r3, [r7, #4]
 8026986:	681b      	ldr	r3, [r3, #0]
 8026988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802698a:	687b      	ldr	r3, [r7, #4]
 802698c:	681b      	ldr	r3, [r3, #0]
 802698e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8026992:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8026994:	687b      	ldr	r3, [r7, #4]
 8026996:	681b      	ldr	r3, [r3, #0]
 8026998:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802699a:	687b      	ldr	r3, [r7, #4]
 802699c:	69db      	ldr	r3, [r3, #28]
 802699e:	3b01      	subs	r3, #1
 80269a0:	051a      	lsls	r2, r3, #20
 80269a2:	687b      	ldr	r3, [r7, #4]
 80269a4:	681b      	ldr	r3, [r3, #0]
 80269a6:	430a      	orrs	r2, r1
 80269a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80269aa:	687b      	ldr	r3, [r7, #4]
 80269ac:	681b      	ldr	r3, [r3, #0]
 80269ae:	689a      	ldr	r2, [r3, #8]
 80269b0:	687b      	ldr	r3, [r7, #4]
 80269b2:	681b      	ldr	r3, [r3, #0]
 80269b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80269b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80269ba:	687b      	ldr	r3, [r7, #4]
 80269bc:	681b      	ldr	r3, [r3, #0]
 80269be:	6899      	ldr	r1, [r3, #8]
 80269c0:	687b      	ldr	r3, [r7, #4]
 80269c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80269c6:	025a      	lsls	r2, r3, #9
 80269c8:	687b      	ldr	r3, [r7, #4]
 80269ca:	681b      	ldr	r3, [r3, #0]
 80269cc:	430a      	orrs	r2, r1
 80269ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80269d0:	687b      	ldr	r3, [r7, #4]
 80269d2:	681b      	ldr	r3, [r3, #0]
 80269d4:	689a      	ldr	r2, [r3, #8]
 80269d6:	687b      	ldr	r3, [r7, #4]
 80269d8:	681b      	ldr	r3, [r3, #0]
 80269da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80269de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80269e0:	687b      	ldr	r3, [r7, #4]
 80269e2:	681b      	ldr	r3, [r3, #0]
 80269e4:	6899      	ldr	r1, [r3, #8]
 80269e6:	687b      	ldr	r3, [r7, #4]
 80269e8:	695b      	ldr	r3, [r3, #20]
 80269ea:	029a      	lsls	r2, r3, #10
 80269ec:	687b      	ldr	r3, [r7, #4]
 80269ee:	681b      	ldr	r3, [r3, #0]
 80269f0:	430a      	orrs	r2, r1
 80269f2:	609a      	str	r2, [r3, #8]
}
 80269f4:	bf00      	nop
 80269f6:	3714      	adds	r7, #20
 80269f8:	46bd      	mov	sp, r7
 80269fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269fe:	4770      	bx	lr
 8026a00:	40012300 	.word	0x40012300
 8026a04:	0f000001 	.word	0x0f000001

08026a08 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026a08:	b580      	push	{r7, lr}
 8026a0a:	b084      	sub	sp, #16
 8026a0c:	af00      	add	r7, sp, #0
 8026a0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026a10:	687b      	ldr	r3, [r7, #4]
 8026a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026a14:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8026a16:	68fb      	ldr	r3, [r7, #12]
 8026a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026a1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8026a1e:	2b00      	cmp	r3, #0
 8026a20:	d13c      	bne.n	8026a9c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8026a22:	68fb      	ldr	r3, [r7, #12]
 8026a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026a26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8026a2a:	68fb      	ldr	r3, [r7, #12]
 8026a2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8026a2e:	68fb      	ldr	r3, [r7, #12]
 8026a30:	681b      	ldr	r3, [r3, #0]
 8026a32:	689b      	ldr	r3, [r3, #8]
 8026a34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8026a38:	2b00      	cmp	r3, #0
 8026a3a:	d12b      	bne.n	8026a94 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8026a3c:	68fb      	ldr	r3, [r7, #12]
 8026a3e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8026a40:	2b00      	cmp	r3, #0
 8026a42:	d127      	bne.n	8026a94 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8026a44:	68fb      	ldr	r3, [r7, #12]
 8026a46:	681b      	ldr	r3, [r3, #0]
 8026a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026a4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8026a4e:	2b00      	cmp	r3, #0
 8026a50:	d006      	beq.n	8026a60 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8026a52:	68fb      	ldr	r3, [r7, #12]
 8026a54:	681b      	ldr	r3, [r3, #0]
 8026a56:	689b      	ldr	r3, [r3, #8]
 8026a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8026a5c:	2b00      	cmp	r3, #0
 8026a5e:	d119      	bne.n	8026a94 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8026a60:	68fb      	ldr	r3, [r7, #12]
 8026a62:	681b      	ldr	r3, [r3, #0]
 8026a64:	685a      	ldr	r2, [r3, #4]
 8026a66:	68fb      	ldr	r3, [r7, #12]
 8026a68:	681b      	ldr	r3, [r3, #0]
 8026a6a:	f022 0220 	bic.w	r2, r2, #32
 8026a6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8026a70:	68fb      	ldr	r3, [r7, #12]
 8026a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026a74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8026a78:	68fb      	ldr	r3, [r7, #12]
 8026a7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8026a7c:	68fb      	ldr	r3, [r7, #12]
 8026a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026a84:	2b00      	cmp	r3, #0
 8026a86:	d105      	bne.n	8026a94 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8026a88:	68fb      	ldr	r3, [r7, #12]
 8026a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026a8c:	f043 0201 	orr.w	r2, r3, #1
 8026a90:	68fb      	ldr	r3, [r7, #12]
 8026a92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8026a94:	68f8      	ldr	r0, [r7, #12]
 8026a96:	f7ff fd7b 	bl	8026590 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8026a9a:	e00e      	b.n	8026aba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8026a9c:	68fb      	ldr	r3, [r7, #12]
 8026a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026aa0:	f003 0310 	and.w	r3, r3, #16
 8026aa4:	2b00      	cmp	r3, #0
 8026aa6:	d003      	beq.n	8026ab0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8026aa8:	68f8      	ldr	r0, [r7, #12]
 8026aaa:	f7ff fd85 	bl	80265b8 <HAL_ADC_ErrorCallback>
}
 8026aae:	e004      	b.n	8026aba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8026ab0:	68fb      	ldr	r3, [r7, #12]
 8026ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8026ab6:	6878      	ldr	r0, [r7, #4]
 8026ab8:	4798      	blx	r3
}
 8026aba:	bf00      	nop
 8026abc:	3710      	adds	r7, #16
 8026abe:	46bd      	mov	sp, r7
 8026ac0:	bd80      	pop	{r7, pc}

08026ac2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026ac2:	b580      	push	{r7, lr}
 8026ac4:	b084      	sub	sp, #16
 8026ac6:	af00      	add	r7, sp, #0
 8026ac8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026aca:	687b      	ldr	r3, [r7, #4]
 8026acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026ace:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8026ad0:	68f8      	ldr	r0, [r7, #12]
 8026ad2:	f7ff fd67 	bl	80265a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026ad6:	bf00      	nop
 8026ad8:	3710      	adds	r7, #16
 8026ada:	46bd      	mov	sp, r7
 8026adc:	bd80      	pop	{r7, pc}

08026ade <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8026ade:	b580      	push	{r7, lr}
 8026ae0:	b084      	sub	sp, #16
 8026ae2:	af00      	add	r7, sp, #0
 8026ae4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026ae6:	687b      	ldr	r3, [r7, #4]
 8026ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026aea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8026aec:	68fb      	ldr	r3, [r7, #12]
 8026aee:	2240      	movs	r2, #64	; 0x40
 8026af0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8026af2:	68fb      	ldr	r3, [r7, #12]
 8026af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026af6:	f043 0204 	orr.w	r2, r3, #4
 8026afa:	68fb      	ldr	r3, [r7, #12]
 8026afc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8026afe:	68f8      	ldr	r0, [r7, #12]
 8026b00:	f7ff fd5a 	bl	80265b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026b04:	bf00      	nop
 8026b06:	3710      	adds	r7, #16
 8026b08:	46bd      	mov	sp, r7
 8026b0a:	bd80      	pop	{r7, pc}

08026b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026b0c:	b480      	push	{r7}
 8026b0e:	b085      	sub	sp, #20
 8026b10:	af00      	add	r7, sp, #0
 8026b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8026b14:	687b      	ldr	r3, [r7, #4]
 8026b16:	f003 0307 	and.w	r3, r3, #7
 8026b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8026b1c:	4b0c      	ldr	r3, [pc, #48]	; (8026b50 <__NVIC_SetPriorityGrouping+0x44>)
 8026b1e:	68db      	ldr	r3, [r3, #12]
 8026b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8026b22:	68ba      	ldr	r2, [r7, #8]
 8026b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8026b28:	4013      	ands	r3, r2
 8026b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8026b2c:	68fb      	ldr	r3, [r7, #12]
 8026b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8026b30:	68bb      	ldr	r3, [r7, #8]
 8026b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8026b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8026b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8026b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8026b3e:	4a04      	ldr	r2, [pc, #16]	; (8026b50 <__NVIC_SetPriorityGrouping+0x44>)
 8026b40:	68bb      	ldr	r3, [r7, #8]
 8026b42:	60d3      	str	r3, [r2, #12]
}
 8026b44:	bf00      	nop
 8026b46:	3714      	adds	r7, #20
 8026b48:	46bd      	mov	sp, r7
 8026b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b4e:	4770      	bx	lr
 8026b50:	e000ed00 	.word	0xe000ed00

08026b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8026b54:	b480      	push	{r7}
 8026b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8026b58:	4b04      	ldr	r3, [pc, #16]	; (8026b6c <__NVIC_GetPriorityGrouping+0x18>)
 8026b5a:	68db      	ldr	r3, [r3, #12]
 8026b5c:	0a1b      	lsrs	r3, r3, #8
 8026b5e:	f003 0307 	and.w	r3, r3, #7
}
 8026b62:	4618      	mov	r0, r3
 8026b64:	46bd      	mov	sp, r7
 8026b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b6a:	4770      	bx	lr
 8026b6c:	e000ed00 	.word	0xe000ed00

08026b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026b70:	b480      	push	{r7}
 8026b72:	b083      	sub	sp, #12
 8026b74:	af00      	add	r7, sp, #0
 8026b76:	4603      	mov	r3, r0
 8026b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026b7e:	2b00      	cmp	r3, #0
 8026b80:	db0b      	blt.n	8026b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8026b82:	79fb      	ldrb	r3, [r7, #7]
 8026b84:	f003 021f 	and.w	r2, r3, #31
 8026b88:	4907      	ldr	r1, [pc, #28]	; (8026ba8 <__NVIC_EnableIRQ+0x38>)
 8026b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026b8e:	095b      	lsrs	r3, r3, #5
 8026b90:	2001      	movs	r0, #1
 8026b92:	fa00 f202 	lsl.w	r2, r0, r2
 8026b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8026b9a:	bf00      	nop
 8026b9c:	370c      	adds	r7, #12
 8026b9e:	46bd      	mov	sp, r7
 8026ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ba4:	4770      	bx	lr
 8026ba6:	bf00      	nop
 8026ba8:	e000e100 	.word	0xe000e100

08026bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8026bac:	b480      	push	{r7}
 8026bae:	b083      	sub	sp, #12
 8026bb0:	af00      	add	r7, sp, #0
 8026bb2:	4603      	mov	r3, r0
 8026bb4:	6039      	str	r1, [r7, #0]
 8026bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026bbc:	2b00      	cmp	r3, #0
 8026bbe:	db0a      	blt.n	8026bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026bc0:	683b      	ldr	r3, [r7, #0]
 8026bc2:	b2da      	uxtb	r2, r3
 8026bc4:	490c      	ldr	r1, [pc, #48]	; (8026bf8 <__NVIC_SetPriority+0x4c>)
 8026bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026bca:	0112      	lsls	r2, r2, #4
 8026bcc:	b2d2      	uxtb	r2, r2
 8026bce:	440b      	add	r3, r1
 8026bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8026bd4:	e00a      	b.n	8026bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026bd6:	683b      	ldr	r3, [r7, #0]
 8026bd8:	b2da      	uxtb	r2, r3
 8026bda:	4908      	ldr	r1, [pc, #32]	; (8026bfc <__NVIC_SetPriority+0x50>)
 8026bdc:	79fb      	ldrb	r3, [r7, #7]
 8026bde:	f003 030f 	and.w	r3, r3, #15
 8026be2:	3b04      	subs	r3, #4
 8026be4:	0112      	lsls	r2, r2, #4
 8026be6:	b2d2      	uxtb	r2, r2
 8026be8:	440b      	add	r3, r1
 8026bea:	761a      	strb	r2, [r3, #24]
}
 8026bec:	bf00      	nop
 8026bee:	370c      	adds	r7, #12
 8026bf0:	46bd      	mov	sp, r7
 8026bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bf6:	4770      	bx	lr
 8026bf8:	e000e100 	.word	0xe000e100
 8026bfc:	e000ed00 	.word	0xe000ed00

08026c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8026c00:	b480      	push	{r7}
 8026c02:	b089      	sub	sp, #36	; 0x24
 8026c04:	af00      	add	r7, sp, #0
 8026c06:	60f8      	str	r0, [r7, #12]
 8026c08:	60b9      	str	r1, [r7, #8]
 8026c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8026c0c:	68fb      	ldr	r3, [r7, #12]
 8026c0e:	f003 0307 	and.w	r3, r3, #7
 8026c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8026c14:	69fb      	ldr	r3, [r7, #28]
 8026c16:	f1c3 0307 	rsb	r3, r3, #7
 8026c1a:	2b04      	cmp	r3, #4
 8026c1c:	bf28      	it	cs
 8026c1e:	2304      	movcs	r3, #4
 8026c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8026c22:	69fb      	ldr	r3, [r7, #28]
 8026c24:	3304      	adds	r3, #4
 8026c26:	2b06      	cmp	r3, #6
 8026c28:	d902      	bls.n	8026c30 <NVIC_EncodePriority+0x30>
 8026c2a:	69fb      	ldr	r3, [r7, #28]
 8026c2c:	3b03      	subs	r3, #3
 8026c2e:	e000      	b.n	8026c32 <NVIC_EncodePriority+0x32>
 8026c30:	2300      	movs	r3, #0
 8026c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026c34:	f04f 32ff 	mov.w	r2, #4294967295
 8026c38:	69bb      	ldr	r3, [r7, #24]
 8026c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8026c3e:	43da      	mvns	r2, r3
 8026c40:	68bb      	ldr	r3, [r7, #8]
 8026c42:	401a      	ands	r2, r3
 8026c44:	697b      	ldr	r3, [r7, #20]
 8026c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8026c48:	f04f 31ff 	mov.w	r1, #4294967295
 8026c4c:	697b      	ldr	r3, [r7, #20]
 8026c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8026c52:	43d9      	mvns	r1, r3
 8026c54:	687b      	ldr	r3, [r7, #4]
 8026c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026c58:	4313      	orrs	r3, r2
         );
}
 8026c5a:	4618      	mov	r0, r3
 8026c5c:	3724      	adds	r7, #36	; 0x24
 8026c5e:	46bd      	mov	sp, r7
 8026c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c64:	4770      	bx	lr
	...

08026c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8026c68:	b580      	push	{r7, lr}
 8026c6a:	b082      	sub	sp, #8
 8026c6c:	af00      	add	r7, sp, #0
 8026c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8026c70:	687b      	ldr	r3, [r7, #4]
 8026c72:	3b01      	subs	r3, #1
 8026c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8026c78:	d301      	bcc.n	8026c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8026c7a:	2301      	movs	r3, #1
 8026c7c:	e00f      	b.n	8026c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8026c7e:	4a0a      	ldr	r2, [pc, #40]	; (8026ca8 <SysTick_Config+0x40>)
 8026c80:	687b      	ldr	r3, [r7, #4]
 8026c82:	3b01      	subs	r3, #1
 8026c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8026c86:	210f      	movs	r1, #15
 8026c88:	f04f 30ff 	mov.w	r0, #4294967295
 8026c8c:	f7ff ff8e 	bl	8026bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8026c90:	4b05      	ldr	r3, [pc, #20]	; (8026ca8 <SysTick_Config+0x40>)
 8026c92:	2200      	movs	r2, #0
 8026c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8026c96:	4b04      	ldr	r3, [pc, #16]	; (8026ca8 <SysTick_Config+0x40>)
 8026c98:	2207      	movs	r2, #7
 8026c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8026c9c:	2300      	movs	r3, #0
}
 8026c9e:	4618      	mov	r0, r3
 8026ca0:	3708      	adds	r7, #8
 8026ca2:	46bd      	mov	sp, r7
 8026ca4:	bd80      	pop	{r7, pc}
 8026ca6:	bf00      	nop
 8026ca8:	e000e010 	.word	0xe000e010

08026cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026cac:	b580      	push	{r7, lr}
 8026cae:	b082      	sub	sp, #8
 8026cb0:	af00      	add	r7, sp, #0
 8026cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8026cb4:	6878      	ldr	r0, [r7, #4]
 8026cb6:	f7ff ff29 	bl	8026b0c <__NVIC_SetPriorityGrouping>
}
 8026cba:	bf00      	nop
 8026cbc:	3708      	adds	r7, #8
 8026cbe:	46bd      	mov	sp, r7
 8026cc0:	bd80      	pop	{r7, pc}

08026cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8026cc2:	b580      	push	{r7, lr}
 8026cc4:	b086      	sub	sp, #24
 8026cc6:	af00      	add	r7, sp, #0
 8026cc8:	4603      	mov	r3, r0
 8026cca:	60b9      	str	r1, [r7, #8]
 8026ccc:	607a      	str	r2, [r7, #4]
 8026cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8026cd0:	2300      	movs	r3, #0
 8026cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8026cd4:	f7ff ff3e 	bl	8026b54 <__NVIC_GetPriorityGrouping>
 8026cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8026cda:	687a      	ldr	r2, [r7, #4]
 8026cdc:	68b9      	ldr	r1, [r7, #8]
 8026cde:	6978      	ldr	r0, [r7, #20]
 8026ce0:	f7ff ff8e 	bl	8026c00 <NVIC_EncodePriority>
 8026ce4:	4602      	mov	r2, r0
 8026ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8026cea:	4611      	mov	r1, r2
 8026cec:	4618      	mov	r0, r3
 8026cee:	f7ff ff5d 	bl	8026bac <__NVIC_SetPriority>
}
 8026cf2:	bf00      	nop
 8026cf4:	3718      	adds	r7, #24
 8026cf6:	46bd      	mov	sp, r7
 8026cf8:	bd80      	pop	{r7, pc}

08026cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026cfa:	b580      	push	{r7, lr}
 8026cfc:	b082      	sub	sp, #8
 8026cfe:	af00      	add	r7, sp, #0
 8026d00:	4603      	mov	r3, r0
 8026d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8026d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026d08:	4618      	mov	r0, r3
 8026d0a:	f7ff ff31 	bl	8026b70 <__NVIC_EnableIRQ>
}
 8026d0e:	bf00      	nop
 8026d10:	3708      	adds	r7, #8
 8026d12:	46bd      	mov	sp, r7
 8026d14:	bd80      	pop	{r7, pc}

08026d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8026d16:	b580      	push	{r7, lr}
 8026d18:	b082      	sub	sp, #8
 8026d1a:	af00      	add	r7, sp, #0
 8026d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8026d1e:	6878      	ldr	r0, [r7, #4]
 8026d20:	f7ff ffa2 	bl	8026c68 <SysTick_Config>
 8026d24:	4603      	mov	r3, r0
}
 8026d26:	4618      	mov	r0, r3
 8026d28:	3708      	adds	r7, #8
 8026d2a:	46bd      	mov	sp, r7
 8026d2c:	bd80      	pop	{r7, pc}
	...

08026d30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8026d30:	b580      	push	{r7, lr}
 8026d32:	b086      	sub	sp, #24
 8026d34:	af00      	add	r7, sp, #0
 8026d36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8026d38:	2300      	movs	r3, #0
 8026d3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8026d3c:	f7ff fac4 	bl	80262c8 <HAL_GetTick>
 8026d40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8026d42:	687b      	ldr	r3, [r7, #4]
 8026d44:	2b00      	cmp	r3, #0
 8026d46:	d101      	bne.n	8026d4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8026d48:	2301      	movs	r3, #1
 8026d4a:	e099      	b.n	8026e80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8026d4c:	687b      	ldr	r3, [r7, #4]
 8026d4e:	2200      	movs	r2, #0
 8026d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8026d54:	687b      	ldr	r3, [r7, #4]
 8026d56:	2202      	movs	r2, #2
 8026d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8026d5c:	687b      	ldr	r3, [r7, #4]
 8026d5e:	681b      	ldr	r3, [r3, #0]
 8026d60:	681a      	ldr	r2, [r3, #0]
 8026d62:	687b      	ldr	r3, [r7, #4]
 8026d64:	681b      	ldr	r3, [r3, #0]
 8026d66:	f022 0201 	bic.w	r2, r2, #1
 8026d6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026d6c:	e00f      	b.n	8026d8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8026d6e:	f7ff faab 	bl	80262c8 <HAL_GetTick>
 8026d72:	4602      	mov	r2, r0
 8026d74:	693b      	ldr	r3, [r7, #16]
 8026d76:	1ad3      	subs	r3, r2, r3
 8026d78:	2b05      	cmp	r3, #5
 8026d7a:	d908      	bls.n	8026d8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8026d7c:	687b      	ldr	r3, [r7, #4]
 8026d7e:	2220      	movs	r2, #32
 8026d80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8026d82:	687b      	ldr	r3, [r7, #4]
 8026d84:	2203      	movs	r2, #3
 8026d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8026d8a:	2303      	movs	r3, #3
 8026d8c:	e078      	b.n	8026e80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026d8e:	687b      	ldr	r3, [r7, #4]
 8026d90:	681b      	ldr	r3, [r3, #0]
 8026d92:	681b      	ldr	r3, [r3, #0]
 8026d94:	f003 0301 	and.w	r3, r3, #1
 8026d98:	2b00      	cmp	r3, #0
 8026d9a:	d1e8      	bne.n	8026d6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8026d9c:	687b      	ldr	r3, [r7, #4]
 8026d9e:	681b      	ldr	r3, [r3, #0]
 8026da0:	681b      	ldr	r3, [r3, #0]
 8026da2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8026da4:	697a      	ldr	r2, [r7, #20]
 8026da6:	4b38      	ldr	r3, [pc, #224]	; (8026e88 <HAL_DMA_Init+0x158>)
 8026da8:	4013      	ands	r3, r2
 8026daa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026dac:	687b      	ldr	r3, [r7, #4]
 8026dae:	685a      	ldr	r2, [r3, #4]
 8026db0:	687b      	ldr	r3, [r7, #4]
 8026db2:	689b      	ldr	r3, [r3, #8]
 8026db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026db6:	687b      	ldr	r3, [r7, #4]
 8026db8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026dbc:	687b      	ldr	r3, [r7, #4]
 8026dbe:	691b      	ldr	r3, [r3, #16]
 8026dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026dc2:	687b      	ldr	r3, [r7, #4]
 8026dc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026dc8:	687b      	ldr	r3, [r7, #4]
 8026dca:	699b      	ldr	r3, [r3, #24]
 8026dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026dce:	687b      	ldr	r3, [r7, #4]
 8026dd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026dd4:	687b      	ldr	r3, [r7, #4]
 8026dd6:	6a1b      	ldr	r3, [r3, #32]
 8026dd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026dda:	697a      	ldr	r2, [r7, #20]
 8026ddc:	4313      	orrs	r3, r2
 8026dde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026de0:	687b      	ldr	r3, [r7, #4]
 8026de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026de4:	2b04      	cmp	r3, #4
 8026de6:	d107      	bne.n	8026df8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8026de8:	687b      	ldr	r3, [r7, #4]
 8026dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026dec:	687b      	ldr	r3, [r7, #4]
 8026dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026df0:	4313      	orrs	r3, r2
 8026df2:	697a      	ldr	r2, [r7, #20]
 8026df4:	4313      	orrs	r3, r2
 8026df6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8026df8:	687b      	ldr	r3, [r7, #4]
 8026dfa:	681b      	ldr	r3, [r3, #0]
 8026dfc:	697a      	ldr	r2, [r7, #20]
 8026dfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8026e00:	687b      	ldr	r3, [r7, #4]
 8026e02:	681b      	ldr	r3, [r3, #0]
 8026e04:	695b      	ldr	r3, [r3, #20]
 8026e06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8026e08:	697b      	ldr	r3, [r7, #20]
 8026e0a:	f023 0307 	bic.w	r3, r3, #7
 8026e0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8026e10:	687b      	ldr	r3, [r7, #4]
 8026e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026e14:	697a      	ldr	r2, [r7, #20]
 8026e16:	4313      	orrs	r3, r2
 8026e18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026e1a:	687b      	ldr	r3, [r7, #4]
 8026e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026e1e:	2b04      	cmp	r3, #4
 8026e20:	d117      	bne.n	8026e52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8026e22:	687b      	ldr	r3, [r7, #4]
 8026e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026e26:	697a      	ldr	r2, [r7, #20]
 8026e28:	4313      	orrs	r3, r2
 8026e2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8026e2c:	687b      	ldr	r3, [r7, #4]
 8026e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026e30:	2b00      	cmp	r3, #0
 8026e32:	d00e      	beq.n	8026e52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8026e34:	6878      	ldr	r0, [r7, #4]
 8026e36:	f000 fa6f 	bl	8027318 <DMA_CheckFifoParam>
 8026e3a:	4603      	mov	r3, r0
 8026e3c:	2b00      	cmp	r3, #0
 8026e3e:	d008      	beq.n	8026e52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8026e40:	687b      	ldr	r3, [r7, #4]
 8026e42:	2240      	movs	r2, #64	; 0x40
 8026e44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8026e46:	687b      	ldr	r3, [r7, #4]
 8026e48:	2201      	movs	r2, #1
 8026e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8026e4e:	2301      	movs	r3, #1
 8026e50:	e016      	b.n	8026e80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8026e52:	687b      	ldr	r3, [r7, #4]
 8026e54:	681b      	ldr	r3, [r3, #0]
 8026e56:	697a      	ldr	r2, [r7, #20]
 8026e58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8026e5a:	6878      	ldr	r0, [r7, #4]
 8026e5c:	f000 fa26 	bl	80272ac <DMA_CalcBaseAndBitshift>
 8026e60:	4603      	mov	r3, r0
 8026e62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026e64:	687b      	ldr	r3, [r7, #4]
 8026e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026e68:	223f      	movs	r2, #63	; 0x3f
 8026e6a:	409a      	lsls	r2, r3
 8026e6c:	68fb      	ldr	r3, [r7, #12]
 8026e6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8026e70:	687b      	ldr	r3, [r7, #4]
 8026e72:	2200      	movs	r2, #0
 8026e74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8026e76:	687b      	ldr	r3, [r7, #4]
 8026e78:	2201      	movs	r2, #1
 8026e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8026e7e:	2300      	movs	r3, #0
}
 8026e80:	4618      	mov	r0, r3
 8026e82:	3718      	adds	r7, #24
 8026e84:	46bd      	mov	sp, r7
 8026e86:	bd80      	pop	{r7, pc}
 8026e88:	f010803f 	.word	0xf010803f

08026e8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8026e8c:	b580      	push	{r7, lr}
 8026e8e:	b086      	sub	sp, #24
 8026e90:	af00      	add	r7, sp, #0
 8026e92:	60f8      	str	r0, [r7, #12]
 8026e94:	60b9      	str	r1, [r7, #8]
 8026e96:	607a      	str	r2, [r7, #4]
 8026e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8026e9a:	2300      	movs	r3, #0
 8026e9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8026e9e:	68fb      	ldr	r3, [r7, #12]
 8026ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8026ea2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8026ea4:	68fb      	ldr	r3, [r7, #12]
 8026ea6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8026eaa:	2b01      	cmp	r3, #1
 8026eac:	d101      	bne.n	8026eb2 <HAL_DMA_Start_IT+0x26>
 8026eae:	2302      	movs	r3, #2
 8026eb0:	e040      	b.n	8026f34 <HAL_DMA_Start_IT+0xa8>
 8026eb2:	68fb      	ldr	r3, [r7, #12]
 8026eb4:	2201      	movs	r2, #1
 8026eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8026eba:	68fb      	ldr	r3, [r7, #12]
 8026ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8026ec0:	b2db      	uxtb	r3, r3
 8026ec2:	2b01      	cmp	r3, #1
 8026ec4:	d12f      	bne.n	8026f26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8026ec6:	68fb      	ldr	r3, [r7, #12]
 8026ec8:	2202      	movs	r2, #2
 8026eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8026ece:	68fb      	ldr	r3, [r7, #12]
 8026ed0:	2200      	movs	r2, #0
 8026ed2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8026ed4:	683b      	ldr	r3, [r7, #0]
 8026ed6:	687a      	ldr	r2, [r7, #4]
 8026ed8:	68b9      	ldr	r1, [r7, #8]
 8026eda:	68f8      	ldr	r0, [r7, #12]
 8026edc:	f000 f9b8 	bl	8027250 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026ee0:	68fb      	ldr	r3, [r7, #12]
 8026ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026ee4:	223f      	movs	r2, #63	; 0x3f
 8026ee6:	409a      	lsls	r2, r3
 8026ee8:	693b      	ldr	r3, [r7, #16]
 8026eea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8026eec:	68fb      	ldr	r3, [r7, #12]
 8026eee:	681b      	ldr	r3, [r3, #0]
 8026ef0:	681a      	ldr	r2, [r3, #0]
 8026ef2:	68fb      	ldr	r3, [r7, #12]
 8026ef4:	681b      	ldr	r3, [r3, #0]
 8026ef6:	f042 0216 	orr.w	r2, r2, #22
 8026efa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8026efc:	68fb      	ldr	r3, [r7, #12]
 8026efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026f00:	2b00      	cmp	r3, #0
 8026f02:	d007      	beq.n	8026f14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8026f04:	68fb      	ldr	r3, [r7, #12]
 8026f06:	681b      	ldr	r3, [r3, #0]
 8026f08:	681a      	ldr	r2, [r3, #0]
 8026f0a:	68fb      	ldr	r3, [r7, #12]
 8026f0c:	681b      	ldr	r3, [r3, #0]
 8026f0e:	f042 0208 	orr.w	r2, r2, #8
 8026f12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8026f14:	68fb      	ldr	r3, [r7, #12]
 8026f16:	681b      	ldr	r3, [r3, #0]
 8026f18:	681a      	ldr	r2, [r3, #0]
 8026f1a:	68fb      	ldr	r3, [r7, #12]
 8026f1c:	681b      	ldr	r3, [r3, #0]
 8026f1e:	f042 0201 	orr.w	r2, r2, #1
 8026f22:	601a      	str	r2, [r3, #0]
 8026f24:	e005      	b.n	8026f32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8026f26:	68fb      	ldr	r3, [r7, #12]
 8026f28:	2200      	movs	r2, #0
 8026f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8026f2e:	2302      	movs	r3, #2
 8026f30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8026f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8026f34:	4618      	mov	r0, r3
 8026f36:	3718      	adds	r7, #24
 8026f38:	46bd      	mov	sp, r7
 8026f3a:	bd80      	pop	{r7, pc}

08026f3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8026f3c:	b580      	push	{r7, lr}
 8026f3e:	b086      	sub	sp, #24
 8026f40:	af00      	add	r7, sp, #0
 8026f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8026f44:	2300      	movs	r3, #0
 8026f46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8026f48:	4b92      	ldr	r3, [pc, #584]	; (8027194 <HAL_DMA_IRQHandler+0x258>)
 8026f4a:	681b      	ldr	r3, [r3, #0]
 8026f4c:	4a92      	ldr	r2, [pc, #584]	; (8027198 <HAL_DMA_IRQHandler+0x25c>)
 8026f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8026f52:	0a9b      	lsrs	r3, r3, #10
 8026f54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8026f56:	687b      	ldr	r3, [r7, #4]
 8026f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8026f5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8026f5c:	693b      	ldr	r3, [r7, #16]
 8026f5e:	681b      	ldr	r3, [r3, #0]
 8026f60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8026f62:	687b      	ldr	r3, [r7, #4]
 8026f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026f66:	2208      	movs	r2, #8
 8026f68:	409a      	lsls	r2, r3
 8026f6a:	68fb      	ldr	r3, [r7, #12]
 8026f6c:	4013      	ands	r3, r2
 8026f6e:	2b00      	cmp	r3, #0
 8026f70:	d01a      	beq.n	8026fa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8026f72:	687b      	ldr	r3, [r7, #4]
 8026f74:	681b      	ldr	r3, [r3, #0]
 8026f76:	681b      	ldr	r3, [r3, #0]
 8026f78:	f003 0304 	and.w	r3, r3, #4
 8026f7c:	2b00      	cmp	r3, #0
 8026f7e:	d013      	beq.n	8026fa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8026f80:	687b      	ldr	r3, [r7, #4]
 8026f82:	681b      	ldr	r3, [r3, #0]
 8026f84:	681a      	ldr	r2, [r3, #0]
 8026f86:	687b      	ldr	r3, [r7, #4]
 8026f88:	681b      	ldr	r3, [r3, #0]
 8026f8a:	f022 0204 	bic.w	r2, r2, #4
 8026f8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8026f90:	687b      	ldr	r3, [r7, #4]
 8026f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026f94:	2208      	movs	r2, #8
 8026f96:	409a      	lsls	r2, r3
 8026f98:	693b      	ldr	r3, [r7, #16]
 8026f9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8026f9c:	687b      	ldr	r3, [r7, #4]
 8026f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026fa0:	f043 0201 	orr.w	r2, r3, #1
 8026fa4:	687b      	ldr	r3, [r7, #4]
 8026fa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8026fa8:	687b      	ldr	r3, [r7, #4]
 8026faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026fac:	2201      	movs	r2, #1
 8026fae:	409a      	lsls	r2, r3
 8026fb0:	68fb      	ldr	r3, [r7, #12]
 8026fb2:	4013      	ands	r3, r2
 8026fb4:	2b00      	cmp	r3, #0
 8026fb6:	d012      	beq.n	8026fde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8026fb8:	687b      	ldr	r3, [r7, #4]
 8026fba:	681b      	ldr	r3, [r3, #0]
 8026fbc:	695b      	ldr	r3, [r3, #20]
 8026fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026fc2:	2b00      	cmp	r3, #0
 8026fc4:	d00b      	beq.n	8026fde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8026fc6:	687b      	ldr	r3, [r7, #4]
 8026fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026fca:	2201      	movs	r2, #1
 8026fcc:	409a      	lsls	r2, r3
 8026fce:	693b      	ldr	r3, [r7, #16]
 8026fd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8026fd2:	687b      	ldr	r3, [r7, #4]
 8026fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026fd6:	f043 0202 	orr.w	r2, r3, #2
 8026fda:	687b      	ldr	r3, [r7, #4]
 8026fdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8026fde:	687b      	ldr	r3, [r7, #4]
 8026fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026fe2:	2204      	movs	r2, #4
 8026fe4:	409a      	lsls	r2, r3
 8026fe6:	68fb      	ldr	r3, [r7, #12]
 8026fe8:	4013      	ands	r3, r2
 8026fea:	2b00      	cmp	r3, #0
 8026fec:	d012      	beq.n	8027014 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8026fee:	687b      	ldr	r3, [r7, #4]
 8026ff0:	681b      	ldr	r3, [r3, #0]
 8026ff2:	681b      	ldr	r3, [r3, #0]
 8026ff4:	f003 0302 	and.w	r3, r3, #2
 8026ff8:	2b00      	cmp	r3, #0
 8026ffa:	d00b      	beq.n	8027014 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8026ffc:	687b      	ldr	r3, [r7, #4]
 8026ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027000:	2204      	movs	r2, #4
 8027002:	409a      	lsls	r2, r3
 8027004:	693b      	ldr	r3, [r7, #16]
 8027006:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8027008:	687b      	ldr	r3, [r7, #4]
 802700a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802700c:	f043 0204 	orr.w	r2, r3, #4
 8027010:	687b      	ldr	r3, [r7, #4]
 8027012:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8027014:	687b      	ldr	r3, [r7, #4]
 8027016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027018:	2210      	movs	r2, #16
 802701a:	409a      	lsls	r2, r3
 802701c:	68fb      	ldr	r3, [r7, #12]
 802701e:	4013      	ands	r3, r2
 8027020:	2b00      	cmp	r3, #0
 8027022:	d043      	beq.n	80270ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8027024:	687b      	ldr	r3, [r7, #4]
 8027026:	681b      	ldr	r3, [r3, #0]
 8027028:	681b      	ldr	r3, [r3, #0]
 802702a:	f003 0308 	and.w	r3, r3, #8
 802702e:	2b00      	cmp	r3, #0
 8027030:	d03c      	beq.n	80270ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8027032:	687b      	ldr	r3, [r7, #4]
 8027034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027036:	2210      	movs	r2, #16
 8027038:	409a      	lsls	r2, r3
 802703a:	693b      	ldr	r3, [r7, #16]
 802703c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802703e:	687b      	ldr	r3, [r7, #4]
 8027040:	681b      	ldr	r3, [r3, #0]
 8027042:	681b      	ldr	r3, [r3, #0]
 8027044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8027048:	2b00      	cmp	r3, #0
 802704a:	d018      	beq.n	802707e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802704c:	687b      	ldr	r3, [r7, #4]
 802704e:	681b      	ldr	r3, [r3, #0]
 8027050:	681b      	ldr	r3, [r3, #0]
 8027052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8027056:	2b00      	cmp	r3, #0
 8027058:	d108      	bne.n	802706c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802705a:	687b      	ldr	r3, [r7, #4]
 802705c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802705e:	2b00      	cmp	r3, #0
 8027060:	d024      	beq.n	80270ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8027062:	687b      	ldr	r3, [r7, #4]
 8027064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027066:	6878      	ldr	r0, [r7, #4]
 8027068:	4798      	blx	r3
 802706a:	e01f      	b.n	80270ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 802706c:	687b      	ldr	r3, [r7, #4]
 802706e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027070:	2b00      	cmp	r3, #0
 8027072:	d01b      	beq.n	80270ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8027074:	687b      	ldr	r3, [r7, #4]
 8027076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027078:	6878      	ldr	r0, [r7, #4]
 802707a:	4798      	blx	r3
 802707c:	e016      	b.n	80270ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802707e:	687b      	ldr	r3, [r7, #4]
 8027080:	681b      	ldr	r3, [r3, #0]
 8027082:	681b      	ldr	r3, [r3, #0]
 8027084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027088:	2b00      	cmp	r3, #0
 802708a:	d107      	bne.n	802709c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802708c:	687b      	ldr	r3, [r7, #4]
 802708e:	681b      	ldr	r3, [r3, #0]
 8027090:	681a      	ldr	r2, [r3, #0]
 8027092:	687b      	ldr	r3, [r7, #4]
 8027094:	681b      	ldr	r3, [r3, #0]
 8027096:	f022 0208 	bic.w	r2, r2, #8
 802709a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 802709c:	687b      	ldr	r3, [r7, #4]
 802709e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80270a0:	2b00      	cmp	r3, #0
 80270a2:	d003      	beq.n	80270ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80270a4:	687b      	ldr	r3, [r7, #4]
 80270a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80270a8:	6878      	ldr	r0, [r7, #4]
 80270aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80270ac:	687b      	ldr	r3, [r7, #4]
 80270ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80270b0:	2220      	movs	r2, #32
 80270b2:	409a      	lsls	r2, r3
 80270b4:	68fb      	ldr	r3, [r7, #12]
 80270b6:	4013      	ands	r3, r2
 80270b8:	2b00      	cmp	r3, #0
 80270ba:	f000 808e 	beq.w	80271da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80270be:	687b      	ldr	r3, [r7, #4]
 80270c0:	681b      	ldr	r3, [r3, #0]
 80270c2:	681b      	ldr	r3, [r3, #0]
 80270c4:	f003 0310 	and.w	r3, r3, #16
 80270c8:	2b00      	cmp	r3, #0
 80270ca:	f000 8086 	beq.w	80271da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80270ce:	687b      	ldr	r3, [r7, #4]
 80270d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80270d2:	2220      	movs	r2, #32
 80270d4:	409a      	lsls	r2, r3
 80270d6:	693b      	ldr	r3, [r7, #16]
 80270d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80270da:	687b      	ldr	r3, [r7, #4]
 80270dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80270e0:	b2db      	uxtb	r3, r3
 80270e2:	2b05      	cmp	r3, #5
 80270e4:	d136      	bne.n	8027154 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80270e6:	687b      	ldr	r3, [r7, #4]
 80270e8:	681b      	ldr	r3, [r3, #0]
 80270ea:	681a      	ldr	r2, [r3, #0]
 80270ec:	687b      	ldr	r3, [r7, #4]
 80270ee:	681b      	ldr	r3, [r3, #0]
 80270f0:	f022 0216 	bic.w	r2, r2, #22
 80270f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80270f6:	687b      	ldr	r3, [r7, #4]
 80270f8:	681b      	ldr	r3, [r3, #0]
 80270fa:	695a      	ldr	r2, [r3, #20]
 80270fc:	687b      	ldr	r3, [r7, #4]
 80270fe:	681b      	ldr	r3, [r3, #0]
 8027100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8027104:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8027106:	687b      	ldr	r3, [r7, #4]
 8027108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802710a:	2b00      	cmp	r3, #0
 802710c:	d103      	bne.n	8027116 <HAL_DMA_IRQHandler+0x1da>
 802710e:	687b      	ldr	r3, [r7, #4]
 8027110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027112:	2b00      	cmp	r3, #0
 8027114:	d007      	beq.n	8027126 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8027116:	687b      	ldr	r3, [r7, #4]
 8027118:	681b      	ldr	r3, [r3, #0]
 802711a:	681a      	ldr	r2, [r3, #0]
 802711c:	687b      	ldr	r3, [r7, #4]
 802711e:	681b      	ldr	r3, [r3, #0]
 8027120:	f022 0208 	bic.w	r2, r2, #8
 8027124:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8027126:	687b      	ldr	r3, [r7, #4]
 8027128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802712a:	223f      	movs	r2, #63	; 0x3f
 802712c:	409a      	lsls	r2, r3
 802712e:	693b      	ldr	r3, [r7, #16]
 8027130:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8027132:	687b      	ldr	r3, [r7, #4]
 8027134:	2200      	movs	r2, #0
 8027136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802713a:	687b      	ldr	r3, [r7, #4]
 802713c:	2201      	movs	r2, #1
 802713e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8027142:	687b      	ldr	r3, [r7, #4]
 8027144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027146:	2b00      	cmp	r3, #0
 8027148:	d07d      	beq.n	8027246 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 802714a:	687b      	ldr	r3, [r7, #4]
 802714c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802714e:	6878      	ldr	r0, [r7, #4]
 8027150:	4798      	blx	r3
        }
        return;
 8027152:	e078      	b.n	8027246 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8027154:	687b      	ldr	r3, [r7, #4]
 8027156:	681b      	ldr	r3, [r3, #0]
 8027158:	681b      	ldr	r3, [r3, #0]
 802715a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802715e:	2b00      	cmp	r3, #0
 8027160:	d01c      	beq.n	802719c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8027162:	687b      	ldr	r3, [r7, #4]
 8027164:	681b      	ldr	r3, [r3, #0]
 8027166:	681b      	ldr	r3, [r3, #0]
 8027168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802716c:	2b00      	cmp	r3, #0
 802716e:	d108      	bne.n	8027182 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8027170:	687b      	ldr	r3, [r7, #4]
 8027172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027174:	2b00      	cmp	r3, #0
 8027176:	d030      	beq.n	80271da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8027178:	687b      	ldr	r3, [r7, #4]
 802717a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802717c:	6878      	ldr	r0, [r7, #4]
 802717e:	4798      	blx	r3
 8027180:	e02b      	b.n	80271da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8027182:	687b      	ldr	r3, [r7, #4]
 8027184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027186:	2b00      	cmp	r3, #0
 8027188:	d027      	beq.n	80271da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 802718a:	687b      	ldr	r3, [r7, #4]
 802718c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802718e:	6878      	ldr	r0, [r7, #4]
 8027190:	4798      	blx	r3
 8027192:	e022      	b.n	80271da <HAL_DMA_IRQHandler+0x29e>
 8027194:	20000010 	.word	0x20000010
 8027198:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802719c:	687b      	ldr	r3, [r7, #4]
 802719e:	681b      	ldr	r3, [r3, #0]
 80271a0:	681b      	ldr	r3, [r3, #0]
 80271a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80271a6:	2b00      	cmp	r3, #0
 80271a8:	d10f      	bne.n	80271ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80271aa:	687b      	ldr	r3, [r7, #4]
 80271ac:	681b      	ldr	r3, [r3, #0]
 80271ae:	681a      	ldr	r2, [r3, #0]
 80271b0:	687b      	ldr	r3, [r7, #4]
 80271b2:	681b      	ldr	r3, [r3, #0]
 80271b4:	f022 0210 	bic.w	r2, r2, #16
 80271b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80271ba:	687b      	ldr	r3, [r7, #4]
 80271bc:	2200      	movs	r2, #0
 80271be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80271c2:	687b      	ldr	r3, [r7, #4]
 80271c4:	2201      	movs	r2, #1
 80271c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80271ca:	687b      	ldr	r3, [r7, #4]
 80271cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80271ce:	2b00      	cmp	r3, #0
 80271d0:	d003      	beq.n	80271da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80271d2:	687b      	ldr	r3, [r7, #4]
 80271d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80271d6:	6878      	ldr	r0, [r7, #4]
 80271d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80271da:	687b      	ldr	r3, [r7, #4]
 80271dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80271de:	2b00      	cmp	r3, #0
 80271e0:	d032      	beq.n	8027248 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80271e2:	687b      	ldr	r3, [r7, #4]
 80271e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80271e6:	f003 0301 	and.w	r3, r3, #1
 80271ea:	2b00      	cmp	r3, #0
 80271ec:	d022      	beq.n	8027234 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80271ee:	687b      	ldr	r3, [r7, #4]
 80271f0:	2205      	movs	r2, #5
 80271f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80271f6:	687b      	ldr	r3, [r7, #4]
 80271f8:	681b      	ldr	r3, [r3, #0]
 80271fa:	681a      	ldr	r2, [r3, #0]
 80271fc:	687b      	ldr	r3, [r7, #4]
 80271fe:	681b      	ldr	r3, [r3, #0]
 8027200:	f022 0201 	bic.w	r2, r2, #1
 8027204:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8027206:	68bb      	ldr	r3, [r7, #8]
 8027208:	3301      	adds	r3, #1
 802720a:	60bb      	str	r3, [r7, #8]
 802720c:	697a      	ldr	r2, [r7, #20]
 802720e:	429a      	cmp	r2, r3
 8027210:	d307      	bcc.n	8027222 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8027212:	687b      	ldr	r3, [r7, #4]
 8027214:	681b      	ldr	r3, [r3, #0]
 8027216:	681b      	ldr	r3, [r3, #0]
 8027218:	f003 0301 	and.w	r3, r3, #1
 802721c:	2b00      	cmp	r3, #0
 802721e:	d1f2      	bne.n	8027206 <HAL_DMA_IRQHandler+0x2ca>
 8027220:	e000      	b.n	8027224 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8027222:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8027224:	687b      	ldr	r3, [r7, #4]
 8027226:	2200      	movs	r2, #0
 8027228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802722c:	687b      	ldr	r3, [r7, #4]
 802722e:	2201      	movs	r2, #1
 8027230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8027234:	687b      	ldr	r3, [r7, #4]
 8027236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027238:	2b00      	cmp	r3, #0
 802723a:	d005      	beq.n	8027248 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 802723c:	687b      	ldr	r3, [r7, #4]
 802723e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027240:	6878      	ldr	r0, [r7, #4]
 8027242:	4798      	blx	r3
 8027244:	e000      	b.n	8027248 <HAL_DMA_IRQHandler+0x30c>
        return;
 8027246:	bf00      	nop
    }
  }
}
 8027248:	3718      	adds	r7, #24
 802724a:	46bd      	mov	sp, r7
 802724c:	bd80      	pop	{r7, pc}
 802724e:	bf00      	nop

08027250 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8027250:	b480      	push	{r7}
 8027252:	b085      	sub	sp, #20
 8027254:	af00      	add	r7, sp, #0
 8027256:	60f8      	str	r0, [r7, #12]
 8027258:	60b9      	str	r1, [r7, #8]
 802725a:	607a      	str	r2, [r7, #4]
 802725c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802725e:	68fb      	ldr	r3, [r7, #12]
 8027260:	681b      	ldr	r3, [r3, #0]
 8027262:	681a      	ldr	r2, [r3, #0]
 8027264:	68fb      	ldr	r3, [r7, #12]
 8027266:	681b      	ldr	r3, [r3, #0]
 8027268:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802726c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 802726e:	68fb      	ldr	r3, [r7, #12]
 8027270:	681b      	ldr	r3, [r3, #0]
 8027272:	683a      	ldr	r2, [r7, #0]
 8027274:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8027276:	68fb      	ldr	r3, [r7, #12]
 8027278:	689b      	ldr	r3, [r3, #8]
 802727a:	2b40      	cmp	r3, #64	; 0x40
 802727c:	d108      	bne.n	8027290 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 802727e:	68fb      	ldr	r3, [r7, #12]
 8027280:	681b      	ldr	r3, [r3, #0]
 8027282:	687a      	ldr	r2, [r7, #4]
 8027284:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8027286:	68fb      	ldr	r3, [r7, #12]
 8027288:	681b      	ldr	r3, [r3, #0]
 802728a:	68ba      	ldr	r2, [r7, #8]
 802728c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 802728e:	e007      	b.n	80272a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8027290:	68fb      	ldr	r3, [r7, #12]
 8027292:	681b      	ldr	r3, [r3, #0]
 8027294:	68ba      	ldr	r2, [r7, #8]
 8027296:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8027298:	68fb      	ldr	r3, [r7, #12]
 802729a:	681b      	ldr	r3, [r3, #0]
 802729c:	687a      	ldr	r2, [r7, #4]
 802729e:	60da      	str	r2, [r3, #12]
}
 80272a0:	bf00      	nop
 80272a2:	3714      	adds	r7, #20
 80272a4:	46bd      	mov	sp, r7
 80272a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272aa:	4770      	bx	lr

080272ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80272ac:	b480      	push	{r7}
 80272ae:	b085      	sub	sp, #20
 80272b0:	af00      	add	r7, sp, #0
 80272b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80272b4:	687b      	ldr	r3, [r7, #4]
 80272b6:	681b      	ldr	r3, [r3, #0]
 80272b8:	b2db      	uxtb	r3, r3
 80272ba:	3b10      	subs	r3, #16
 80272bc:	4a14      	ldr	r2, [pc, #80]	; (8027310 <DMA_CalcBaseAndBitshift+0x64>)
 80272be:	fba2 2303 	umull	r2, r3, r2, r3
 80272c2:	091b      	lsrs	r3, r3, #4
 80272c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80272c6:	4a13      	ldr	r2, [pc, #76]	; (8027314 <DMA_CalcBaseAndBitshift+0x68>)
 80272c8:	68fb      	ldr	r3, [r7, #12]
 80272ca:	4413      	add	r3, r2
 80272cc:	781b      	ldrb	r3, [r3, #0]
 80272ce:	461a      	mov	r2, r3
 80272d0:	687b      	ldr	r3, [r7, #4]
 80272d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80272d4:	68fb      	ldr	r3, [r7, #12]
 80272d6:	2b03      	cmp	r3, #3
 80272d8:	d909      	bls.n	80272ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80272da:	687b      	ldr	r3, [r7, #4]
 80272dc:	681b      	ldr	r3, [r3, #0]
 80272de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80272e2:	f023 0303 	bic.w	r3, r3, #3
 80272e6:	1d1a      	adds	r2, r3, #4
 80272e8:	687b      	ldr	r3, [r7, #4]
 80272ea:	659a      	str	r2, [r3, #88]	; 0x58
 80272ec:	e007      	b.n	80272fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80272ee:	687b      	ldr	r3, [r7, #4]
 80272f0:	681b      	ldr	r3, [r3, #0]
 80272f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80272f6:	f023 0303 	bic.w	r3, r3, #3
 80272fa:	687a      	ldr	r2, [r7, #4]
 80272fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80272fe:	687b      	ldr	r3, [r7, #4]
 8027300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8027302:	4618      	mov	r0, r3
 8027304:	3714      	adds	r7, #20
 8027306:	46bd      	mov	sp, r7
 8027308:	f85d 7b04 	ldr.w	r7, [sp], #4
 802730c:	4770      	bx	lr
 802730e:	bf00      	nop
 8027310:	aaaaaaab 	.word	0xaaaaaaab
 8027314:	0802a3bc 	.word	0x0802a3bc

08027318 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8027318:	b480      	push	{r7}
 802731a:	b085      	sub	sp, #20
 802731c:	af00      	add	r7, sp, #0
 802731e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8027320:	2300      	movs	r3, #0
 8027322:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8027324:	687b      	ldr	r3, [r7, #4]
 8027326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027328:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802732a:	687b      	ldr	r3, [r7, #4]
 802732c:	699b      	ldr	r3, [r3, #24]
 802732e:	2b00      	cmp	r3, #0
 8027330:	d11f      	bne.n	8027372 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8027332:	68bb      	ldr	r3, [r7, #8]
 8027334:	2b03      	cmp	r3, #3
 8027336:	d855      	bhi.n	80273e4 <DMA_CheckFifoParam+0xcc>
 8027338:	a201      	add	r2, pc, #4	; (adr r2, 8027340 <DMA_CheckFifoParam+0x28>)
 802733a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802733e:	bf00      	nop
 8027340:	08027351 	.word	0x08027351
 8027344:	08027363 	.word	0x08027363
 8027348:	08027351 	.word	0x08027351
 802734c:	080273e5 	.word	0x080273e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8027350:	687b      	ldr	r3, [r7, #4]
 8027352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027358:	2b00      	cmp	r3, #0
 802735a:	d045      	beq.n	80273e8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 802735c:	2301      	movs	r3, #1
 802735e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027360:	e042      	b.n	80273e8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8027362:	687b      	ldr	r3, [r7, #4]
 8027364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027366:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802736a:	d13f      	bne.n	80273ec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 802736c:	2301      	movs	r3, #1
 802736e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027370:	e03c      	b.n	80273ec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8027372:	687b      	ldr	r3, [r7, #4]
 8027374:	699b      	ldr	r3, [r3, #24]
 8027376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802737a:	d121      	bne.n	80273c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 802737c:	68bb      	ldr	r3, [r7, #8]
 802737e:	2b03      	cmp	r3, #3
 8027380:	d836      	bhi.n	80273f0 <DMA_CheckFifoParam+0xd8>
 8027382:	a201      	add	r2, pc, #4	; (adr r2, 8027388 <DMA_CheckFifoParam+0x70>)
 8027384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027388:	08027399 	.word	0x08027399
 802738c:	0802739f 	.word	0x0802739f
 8027390:	08027399 	.word	0x08027399
 8027394:	080273b1 	.word	0x080273b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8027398:	2301      	movs	r3, #1
 802739a:	73fb      	strb	r3, [r7, #15]
      break;
 802739c:	e02f      	b.n	80273fe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802739e:	687b      	ldr	r3, [r7, #4]
 80273a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80273a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80273a6:	2b00      	cmp	r3, #0
 80273a8:	d024      	beq.n	80273f4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80273aa:	2301      	movs	r3, #1
 80273ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80273ae:	e021      	b.n	80273f4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80273b0:	687b      	ldr	r3, [r7, #4]
 80273b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80273b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80273b8:	d11e      	bne.n	80273f8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80273ba:	2301      	movs	r3, #1
 80273bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80273be:	e01b      	b.n	80273f8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80273c0:	68bb      	ldr	r3, [r7, #8]
 80273c2:	2b02      	cmp	r3, #2
 80273c4:	d902      	bls.n	80273cc <DMA_CheckFifoParam+0xb4>
 80273c6:	2b03      	cmp	r3, #3
 80273c8:	d003      	beq.n	80273d2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80273ca:	e018      	b.n	80273fe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80273cc:	2301      	movs	r3, #1
 80273ce:	73fb      	strb	r3, [r7, #15]
      break;
 80273d0:	e015      	b.n	80273fe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80273d2:	687b      	ldr	r3, [r7, #4]
 80273d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80273d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80273da:	2b00      	cmp	r3, #0
 80273dc:	d00e      	beq.n	80273fc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80273de:	2301      	movs	r3, #1
 80273e0:	73fb      	strb	r3, [r7, #15]
      break;
 80273e2:	e00b      	b.n	80273fc <DMA_CheckFifoParam+0xe4>
      break;
 80273e4:	bf00      	nop
 80273e6:	e00a      	b.n	80273fe <DMA_CheckFifoParam+0xe6>
      break;
 80273e8:	bf00      	nop
 80273ea:	e008      	b.n	80273fe <DMA_CheckFifoParam+0xe6>
      break;
 80273ec:	bf00      	nop
 80273ee:	e006      	b.n	80273fe <DMA_CheckFifoParam+0xe6>
      break;
 80273f0:	bf00      	nop
 80273f2:	e004      	b.n	80273fe <DMA_CheckFifoParam+0xe6>
      break;
 80273f4:	bf00      	nop
 80273f6:	e002      	b.n	80273fe <DMA_CheckFifoParam+0xe6>
      break;   
 80273f8:	bf00      	nop
 80273fa:	e000      	b.n	80273fe <DMA_CheckFifoParam+0xe6>
      break;
 80273fc:	bf00      	nop
    }
  } 
  
  return status; 
 80273fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8027400:	4618      	mov	r0, r3
 8027402:	3714      	adds	r7, #20
 8027404:	46bd      	mov	sp, r7
 8027406:	f85d 7b04 	ldr.w	r7, [sp], #4
 802740a:	4770      	bx	lr

0802740c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 802740c:	b580      	push	{r7, lr}
 802740e:	b086      	sub	sp, #24
 8027410:	af00      	add	r7, sp, #0
 8027412:	60f8      	str	r0, [r7, #12]
 8027414:	60b9      	str	r1, [r7, #8]
 8027416:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 802741a:	2301      	movs	r3, #1
 802741c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802741e:	4b23      	ldr	r3, [pc, #140]	; (80274ac <HAL_FLASH_Program+0xa0>)
 8027420:	7e1b      	ldrb	r3, [r3, #24]
 8027422:	2b01      	cmp	r3, #1
 8027424:	d101      	bne.n	802742a <HAL_FLASH_Program+0x1e>
 8027426:	2302      	movs	r3, #2
 8027428:	e03b      	b.n	80274a2 <HAL_FLASH_Program+0x96>
 802742a:	4b20      	ldr	r3, [pc, #128]	; (80274ac <HAL_FLASH_Program+0xa0>)
 802742c:	2201      	movs	r2, #1
 802742e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027430:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027434:	f000 f870 	bl	8027518 <FLASH_WaitForLastOperation>
 8027438:	4603      	mov	r3, r0
 802743a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 802743c:	7dfb      	ldrb	r3, [r7, #23]
 802743e:	2b00      	cmp	r3, #0
 8027440:	d12b      	bne.n	802749a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8027442:	68fb      	ldr	r3, [r7, #12]
 8027444:	2b00      	cmp	r3, #0
 8027446:	d105      	bne.n	8027454 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8027448:	783b      	ldrb	r3, [r7, #0]
 802744a:	4619      	mov	r1, r3
 802744c:	68b8      	ldr	r0, [r7, #8]
 802744e:	f000 f919 	bl	8027684 <FLASH_Program_Byte>
 8027452:	e016      	b.n	8027482 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8027454:	68fb      	ldr	r3, [r7, #12]
 8027456:	2b01      	cmp	r3, #1
 8027458:	d105      	bne.n	8027466 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 802745a:	883b      	ldrh	r3, [r7, #0]
 802745c:	4619      	mov	r1, r3
 802745e:	68b8      	ldr	r0, [r7, #8]
 8027460:	f000 f8ec 	bl	802763c <FLASH_Program_HalfWord>
 8027464:	e00d      	b.n	8027482 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8027466:	68fb      	ldr	r3, [r7, #12]
 8027468:	2b02      	cmp	r3, #2
 802746a:	d105      	bne.n	8027478 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 802746c:	683b      	ldr	r3, [r7, #0]
 802746e:	4619      	mov	r1, r3
 8027470:	68b8      	ldr	r0, [r7, #8]
 8027472:	f000 f8c1 	bl	80275f8 <FLASH_Program_Word>
 8027476:	e004      	b.n	8027482 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8027478:	e9d7 2300 	ldrd	r2, r3, [r7]
 802747c:	68b8      	ldr	r0, [r7, #8]
 802747e:	f000 f88b 	bl	8027598 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027482:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027486:	f000 f847 	bl	8027518 <FLASH_WaitForLastOperation>
 802748a:	4603      	mov	r3, r0
 802748c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 802748e:	4b08      	ldr	r3, [pc, #32]	; (80274b0 <HAL_FLASH_Program+0xa4>)
 8027490:	691b      	ldr	r3, [r3, #16]
 8027492:	4a07      	ldr	r2, [pc, #28]	; (80274b0 <HAL_FLASH_Program+0xa4>)
 8027494:	f023 0301 	bic.w	r3, r3, #1
 8027498:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802749a:	4b04      	ldr	r3, [pc, #16]	; (80274ac <HAL_FLASH_Program+0xa0>)
 802749c:	2200      	movs	r2, #0
 802749e:	761a      	strb	r2, [r3, #24]
  
  return status;
 80274a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80274a2:	4618      	mov	r0, r3
 80274a4:	3718      	adds	r7, #24
 80274a6:	46bd      	mov	sp, r7
 80274a8:	bd80      	pop	{r7, pc}
 80274aa:	bf00      	nop
 80274ac:	20000b68 	.word	0x20000b68
 80274b0:	40023c00 	.word	0x40023c00

080274b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80274b4:	b480      	push	{r7}
 80274b6:	b083      	sub	sp, #12
 80274b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80274ba:	2300      	movs	r3, #0
 80274bc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80274be:	4b0b      	ldr	r3, [pc, #44]	; (80274ec <HAL_FLASH_Unlock+0x38>)
 80274c0:	691b      	ldr	r3, [r3, #16]
 80274c2:	2b00      	cmp	r3, #0
 80274c4:	da0b      	bge.n	80274de <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80274c6:	4b09      	ldr	r3, [pc, #36]	; (80274ec <HAL_FLASH_Unlock+0x38>)
 80274c8:	4a09      	ldr	r2, [pc, #36]	; (80274f0 <HAL_FLASH_Unlock+0x3c>)
 80274ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80274cc:	4b07      	ldr	r3, [pc, #28]	; (80274ec <HAL_FLASH_Unlock+0x38>)
 80274ce:	4a09      	ldr	r2, [pc, #36]	; (80274f4 <HAL_FLASH_Unlock+0x40>)
 80274d0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80274d2:	4b06      	ldr	r3, [pc, #24]	; (80274ec <HAL_FLASH_Unlock+0x38>)
 80274d4:	691b      	ldr	r3, [r3, #16]
 80274d6:	2b00      	cmp	r3, #0
 80274d8:	da01      	bge.n	80274de <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80274da:	2301      	movs	r3, #1
 80274dc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80274de:	79fb      	ldrb	r3, [r7, #7]
}
 80274e0:	4618      	mov	r0, r3
 80274e2:	370c      	adds	r7, #12
 80274e4:	46bd      	mov	sp, r7
 80274e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274ea:	4770      	bx	lr
 80274ec:	40023c00 	.word	0x40023c00
 80274f0:	45670123 	.word	0x45670123
 80274f4:	cdef89ab 	.word	0xcdef89ab

080274f8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80274f8:	b480      	push	{r7}
 80274fa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80274fc:	4b05      	ldr	r3, [pc, #20]	; (8027514 <HAL_FLASH_Lock+0x1c>)
 80274fe:	691b      	ldr	r3, [r3, #16]
 8027500:	4a04      	ldr	r2, [pc, #16]	; (8027514 <HAL_FLASH_Lock+0x1c>)
 8027502:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8027506:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8027508:	2300      	movs	r3, #0
}
 802750a:	4618      	mov	r0, r3
 802750c:	46bd      	mov	sp, r7
 802750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027512:	4770      	bx	lr
 8027514:	40023c00 	.word	0x40023c00

08027518 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8027518:	b580      	push	{r7, lr}
 802751a:	b084      	sub	sp, #16
 802751c:	af00      	add	r7, sp, #0
 802751e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027520:	2300      	movs	r3, #0
 8027522:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8027524:	4b1a      	ldr	r3, [pc, #104]	; (8027590 <FLASH_WaitForLastOperation+0x78>)
 8027526:	2200      	movs	r2, #0
 8027528:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 802752a:	f7fe fecd 	bl	80262c8 <HAL_GetTick>
 802752e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027530:	e010      	b.n	8027554 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8027532:	687b      	ldr	r3, [r7, #4]
 8027534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027538:	d00c      	beq.n	8027554 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 802753a:	687b      	ldr	r3, [r7, #4]
 802753c:	2b00      	cmp	r3, #0
 802753e:	d007      	beq.n	8027550 <FLASH_WaitForLastOperation+0x38>
 8027540:	f7fe fec2 	bl	80262c8 <HAL_GetTick>
 8027544:	4602      	mov	r2, r0
 8027546:	68fb      	ldr	r3, [r7, #12]
 8027548:	1ad3      	subs	r3, r2, r3
 802754a:	687a      	ldr	r2, [r7, #4]
 802754c:	429a      	cmp	r2, r3
 802754e:	d201      	bcs.n	8027554 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8027550:	2303      	movs	r3, #3
 8027552:	e019      	b.n	8027588 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027554:	4b0f      	ldr	r3, [pc, #60]	; (8027594 <FLASH_WaitForLastOperation+0x7c>)
 8027556:	68db      	ldr	r3, [r3, #12]
 8027558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802755c:	2b00      	cmp	r3, #0
 802755e:	d1e8      	bne.n	8027532 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8027560:	4b0c      	ldr	r3, [pc, #48]	; (8027594 <FLASH_WaitForLastOperation+0x7c>)
 8027562:	68db      	ldr	r3, [r3, #12]
 8027564:	f003 0301 	and.w	r3, r3, #1
 8027568:	2b00      	cmp	r3, #0
 802756a:	d002      	beq.n	8027572 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 802756c:	4b09      	ldr	r3, [pc, #36]	; (8027594 <FLASH_WaitForLastOperation+0x7c>)
 802756e:	2201      	movs	r2, #1
 8027570:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8027572:	4b08      	ldr	r3, [pc, #32]	; (8027594 <FLASH_WaitForLastOperation+0x7c>)
 8027574:	68db      	ldr	r3, [r3, #12]
 8027576:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 802757a:	2b00      	cmp	r3, #0
 802757c:	d003      	beq.n	8027586 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 802757e:	f000 f8a3 	bl	80276c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8027582:	2301      	movs	r3, #1
 8027584:	e000      	b.n	8027588 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8027586:	2300      	movs	r3, #0
  
}  
 8027588:	4618      	mov	r0, r3
 802758a:	3710      	adds	r7, #16
 802758c:	46bd      	mov	sp, r7
 802758e:	bd80      	pop	{r7, pc}
 8027590:	20000b68 	.word	0x20000b68
 8027594:	40023c00 	.word	0x40023c00

08027598 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8027598:	b490      	push	{r4, r7}
 802759a:	b084      	sub	sp, #16
 802759c:	af00      	add	r7, sp, #0
 802759e:	60f8      	str	r0, [r7, #12]
 80275a0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80275a4:	4b13      	ldr	r3, [pc, #76]	; (80275f4 <FLASH_Program_DoubleWord+0x5c>)
 80275a6:	691b      	ldr	r3, [r3, #16]
 80275a8:	4a12      	ldr	r2, [pc, #72]	; (80275f4 <FLASH_Program_DoubleWord+0x5c>)
 80275aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80275ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80275b0:	4b10      	ldr	r3, [pc, #64]	; (80275f4 <FLASH_Program_DoubleWord+0x5c>)
 80275b2:	691b      	ldr	r3, [r3, #16]
 80275b4:	4a0f      	ldr	r2, [pc, #60]	; (80275f4 <FLASH_Program_DoubleWord+0x5c>)
 80275b6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80275ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80275bc:	4b0d      	ldr	r3, [pc, #52]	; (80275f4 <FLASH_Program_DoubleWord+0x5c>)
 80275be:	691b      	ldr	r3, [r3, #16]
 80275c0:	4a0c      	ldr	r2, [pc, #48]	; (80275f4 <FLASH_Program_DoubleWord+0x5c>)
 80275c2:	f043 0301 	orr.w	r3, r3, #1
 80275c6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80275c8:	68fb      	ldr	r3, [r7, #12]
 80275ca:	683a      	ldr	r2, [r7, #0]
 80275cc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80275ce:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80275d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80275d6:	f04f 0300 	mov.w	r3, #0
 80275da:	f04f 0400 	mov.w	r4, #0
 80275de:	0013      	movs	r3, r2
 80275e0:	2400      	movs	r4, #0
 80275e2:	68fa      	ldr	r2, [r7, #12]
 80275e4:	3204      	adds	r2, #4
 80275e6:	6013      	str	r3, [r2, #0]
}
 80275e8:	bf00      	nop
 80275ea:	3710      	adds	r7, #16
 80275ec:	46bd      	mov	sp, r7
 80275ee:	bc90      	pop	{r4, r7}
 80275f0:	4770      	bx	lr
 80275f2:	bf00      	nop
 80275f4:	40023c00 	.word	0x40023c00

080275f8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80275f8:	b480      	push	{r7}
 80275fa:	b083      	sub	sp, #12
 80275fc:	af00      	add	r7, sp, #0
 80275fe:	6078      	str	r0, [r7, #4]
 8027600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027602:	4b0d      	ldr	r3, [pc, #52]	; (8027638 <FLASH_Program_Word+0x40>)
 8027604:	691b      	ldr	r3, [r3, #16]
 8027606:	4a0c      	ldr	r2, [pc, #48]	; (8027638 <FLASH_Program_Word+0x40>)
 8027608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802760c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 802760e:	4b0a      	ldr	r3, [pc, #40]	; (8027638 <FLASH_Program_Word+0x40>)
 8027610:	691b      	ldr	r3, [r3, #16]
 8027612:	4a09      	ldr	r2, [pc, #36]	; (8027638 <FLASH_Program_Word+0x40>)
 8027614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027618:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802761a:	4b07      	ldr	r3, [pc, #28]	; (8027638 <FLASH_Program_Word+0x40>)
 802761c:	691b      	ldr	r3, [r3, #16]
 802761e:	4a06      	ldr	r2, [pc, #24]	; (8027638 <FLASH_Program_Word+0x40>)
 8027620:	f043 0301 	orr.w	r3, r3, #1
 8027624:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8027626:	687b      	ldr	r3, [r7, #4]
 8027628:	683a      	ldr	r2, [r7, #0]
 802762a:	601a      	str	r2, [r3, #0]
}
 802762c:	bf00      	nop
 802762e:	370c      	adds	r7, #12
 8027630:	46bd      	mov	sp, r7
 8027632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027636:	4770      	bx	lr
 8027638:	40023c00 	.word	0x40023c00

0802763c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 802763c:	b480      	push	{r7}
 802763e:	b083      	sub	sp, #12
 8027640:	af00      	add	r7, sp, #0
 8027642:	6078      	str	r0, [r7, #4]
 8027644:	460b      	mov	r3, r1
 8027646:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027648:	4b0d      	ldr	r3, [pc, #52]	; (8027680 <FLASH_Program_HalfWord+0x44>)
 802764a:	691b      	ldr	r3, [r3, #16]
 802764c:	4a0c      	ldr	r2, [pc, #48]	; (8027680 <FLASH_Program_HalfWord+0x44>)
 802764e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027652:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8027654:	4b0a      	ldr	r3, [pc, #40]	; (8027680 <FLASH_Program_HalfWord+0x44>)
 8027656:	691b      	ldr	r3, [r3, #16]
 8027658:	4a09      	ldr	r2, [pc, #36]	; (8027680 <FLASH_Program_HalfWord+0x44>)
 802765a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802765e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027660:	4b07      	ldr	r3, [pc, #28]	; (8027680 <FLASH_Program_HalfWord+0x44>)
 8027662:	691b      	ldr	r3, [r3, #16]
 8027664:	4a06      	ldr	r2, [pc, #24]	; (8027680 <FLASH_Program_HalfWord+0x44>)
 8027666:	f043 0301 	orr.w	r3, r3, #1
 802766a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 802766c:	687b      	ldr	r3, [r7, #4]
 802766e:	887a      	ldrh	r2, [r7, #2]
 8027670:	801a      	strh	r2, [r3, #0]
}
 8027672:	bf00      	nop
 8027674:	370c      	adds	r7, #12
 8027676:	46bd      	mov	sp, r7
 8027678:	f85d 7b04 	ldr.w	r7, [sp], #4
 802767c:	4770      	bx	lr
 802767e:	bf00      	nop
 8027680:	40023c00 	.word	0x40023c00

08027684 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8027684:	b480      	push	{r7}
 8027686:	b083      	sub	sp, #12
 8027688:	af00      	add	r7, sp, #0
 802768a:	6078      	str	r0, [r7, #4]
 802768c:	460b      	mov	r3, r1
 802768e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027690:	4b0c      	ldr	r3, [pc, #48]	; (80276c4 <FLASH_Program_Byte+0x40>)
 8027692:	691b      	ldr	r3, [r3, #16]
 8027694:	4a0b      	ldr	r2, [pc, #44]	; (80276c4 <FLASH_Program_Byte+0x40>)
 8027696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802769a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 802769c:	4b09      	ldr	r3, [pc, #36]	; (80276c4 <FLASH_Program_Byte+0x40>)
 802769e:	4a09      	ldr	r2, [pc, #36]	; (80276c4 <FLASH_Program_Byte+0x40>)
 80276a0:	691b      	ldr	r3, [r3, #16]
 80276a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80276a4:	4b07      	ldr	r3, [pc, #28]	; (80276c4 <FLASH_Program_Byte+0x40>)
 80276a6:	691b      	ldr	r3, [r3, #16]
 80276a8:	4a06      	ldr	r2, [pc, #24]	; (80276c4 <FLASH_Program_Byte+0x40>)
 80276aa:	f043 0301 	orr.w	r3, r3, #1
 80276ae:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80276b0:	687b      	ldr	r3, [r7, #4]
 80276b2:	78fa      	ldrb	r2, [r7, #3]
 80276b4:	701a      	strb	r2, [r3, #0]
}
 80276b6:	bf00      	nop
 80276b8:	370c      	adds	r7, #12
 80276ba:	46bd      	mov	sp, r7
 80276bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276c0:	4770      	bx	lr
 80276c2:	bf00      	nop
 80276c4:	40023c00 	.word	0x40023c00

080276c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80276c8:	b480      	push	{r7}
 80276ca:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80276cc:	4b27      	ldr	r3, [pc, #156]	; (802776c <FLASH_SetErrorCode+0xa4>)
 80276ce:	68db      	ldr	r3, [r3, #12]
 80276d0:	f003 0310 	and.w	r3, r3, #16
 80276d4:	2b00      	cmp	r3, #0
 80276d6:	d008      	beq.n	80276ea <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80276d8:	4b25      	ldr	r3, [pc, #148]	; (8027770 <FLASH_SetErrorCode+0xa8>)
 80276da:	69db      	ldr	r3, [r3, #28]
 80276dc:	f043 0310 	orr.w	r3, r3, #16
 80276e0:	4a23      	ldr	r2, [pc, #140]	; (8027770 <FLASH_SetErrorCode+0xa8>)
 80276e2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80276e4:	4b21      	ldr	r3, [pc, #132]	; (802776c <FLASH_SetErrorCode+0xa4>)
 80276e6:	2210      	movs	r2, #16
 80276e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80276ea:	4b20      	ldr	r3, [pc, #128]	; (802776c <FLASH_SetErrorCode+0xa4>)
 80276ec:	68db      	ldr	r3, [r3, #12]
 80276ee:	f003 0320 	and.w	r3, r3, #32
 80276f2:	2b00      	cmp	r3, #0
 80276f4:	d008      	beq.n	8027708 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80276f6:	4b1e      	ldr	r3, [pc, #120]	; (8027770 <FLASH_SetErrorCode+0xa8>)
 80276f8:	69db      	ldr	r3, [r3, #28]
 80276fa:	f043 0308 	orr.w	r3, r3, #8
 80276fe:	4a1c      	ldr	r2, [pc, #112]	; (8027770 <FLASH_SetErrorCode+0xa8>)
 8027700:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8027702:	4b1a      	ldr	r3, [pc, #104]	; (802776c <FLASH_SetErrorCode+0xa4>)
 8027704:	2220      	movs	r2, #32
 8027706:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8027708:	4b18      	ldr	r3, [pc, #96]	; (802776c <FLASH_SetErrorCode+0xa4>)
 802770a:	68db      	ldr	r3, [r3, #12]
 802770c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027710:	2b00      	cmp	r3, #0
 8027712:	d008      	beq.n	8027726 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8027714:	4b16      	ldr	r3, [pc, #88]	; (8027770 <FLASH_SetErrorCode+0xa8>)
 8027716:	69db      	ldr	r3, [r3, #28]
 8027718:	f043 0304 	orr.w	r3, r3, #4
 802771c:	4a14      	ldr	r2, [pc, #80]	; (8027770 <FLASH_SetErrorCode+0xa8>)
 802771e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8027720:	4b12      	ldr	r3, [pc, #72]	; (802776c <FLASH_SetErrorCode+0xa4>)
 8027722:	2240      	movs	r2, #64	; 0x40
 8027724:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8027726:	4b11      	ldr	r3, [pc, #68]	; (802776c <FLASH_SetErrorCode+0xa4>)
 8027728:	68db      	ldr	r3, [r3, #12]
 802772a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802772e:	2b00      	cmp	r3, #0
 8027730:	d008      	beq.n	8027744 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8027732:	4b0f      	ldr	r3, [pc, #60]	; (8027770 <FLASH_SetErrorCode+0xa8>)
 8027734:	69db      	ldr	r3, [r3, #28]
 8027736:	f043 0302 	orr.w	r3, r3, #2
 802773a:	4a0d      	ldr	r2, [pc, #52]	; (8027770 <FLASH_SetErrorCode+0xa8>)
 802773c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 802773e:	4b0b      	ldr	r3, [pc, #44]	; (802776c <FLASH_SetErrorCode+0xa4>)
 8027740:	2280      	movs	r2, #128	; 0x80
 8027742:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8027744:	4b09      	ldr	r3, [pc, #36]	; (802776c <FLASH_SetErrorCode+0xa4>)
 8027746:	68db      	ldr	r3, [r3, #12]
 8027748:	f003 0302 	and.w	r3, r3, #2
 802774c:	2b00      	cmp	r3, #0
 802774e:	d008      	beq.n	8027762 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8027750:	4b07      	ldr	r3, [pc, #28]	; (8027770 <FLASH_SetErrorCode+0xa8>)
 8027752:	69db      	ldr	r3, [r3, #28]
 8027754:	f043 0320 	orr.w	r3, r3, #32
 8027758:	4a05      	ldr	r2, [pc, #20]	; (8027770 <FLASH_SetErrorCode+0xa8>)
 802775a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 802775c:	4b03      	ldr	r3, [pc, #12]	; (802776c <FLASH_SetErrorCode+0xa4>)
 802775e:	2202      	movs	r2, #2
 8027760:	60da      	str	r2, [r3, #12]
  }
}
 8027762:	bf00      	nop
 8027764:	46bd      	mov	sp, r7
 8027766:	f85d 7b04 	ldr.w	r7, [sp], #4
 802776a:	4770      	bx	lr
 802776c:	40023c00 	.word	0x40023c00
 8027770:	20000b68 	.word	0x20000b68

08027774 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8027774:	b580      	push	{r7, lr}
 8027776:	b084      	sub	sp, #16
 8027778:	af00      	add	r7, sp, #0
 802777a:	6078      	str	r0, [r7, #4]
 802777c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 802777e:	2301      	movs	r3, #1
 8027780:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8027782:	2300      	movs	r3, #0
 8027784:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8027786:	4b31      	ldr	r3, [pc, #196]	; (802784c <HAL_FLASHEx_Erase+0xd8>)
 8027788:	7e1b      	ldrb	r3, [r3, #24]
 802778a:	2b01      	cmp	r3, #1
 802778c:	d101      	bne.n	8027792 <HAL_FLASHEx_Erase+0x1e>
 802778e:	2302      	movs	r3, #2
 8027790:	e058      	b.n	8027844 <HAL_FLASHEx_Erase+0xd0>
 8027792:	4b2e      	ldr	r3, [pc, #184]	; (802784c <HAL_FLASHEx_Erase+0xd8>)
 8027794:	2201      	movs	r2, #1
 8027796:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027798:	f24c 3050 	movw	r0, #50000	; 0xc350
 802779c:	f7ff febc 	bl	8027518 <FLASH_WaitForLastOperation>
 80277a0:	4603      	mov	r3, r0
 80277a2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80277a4:	7bfb      	ldrb	r3, [r7, #15]
 80277a6:	2b00      	cmp	r3, #0
 80277a8:	d148      	bne.n	802783c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80277aa:	683b      	ldr	r3, [r7, #0]
 80277ac:	f04f 32ff 	mov.w	r2, #4294967295
 80277b0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80277b2:	687b      	ldr	r3, [r7, #4]
 80277b4:	681b      	ldr	r3, [r3, #0]
 80277b6:	2b01      	cmp	r3, #1
 80277b8:	d115      	bne.n	80277e6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80277ba:	687b      	ldr	r3, [r7, #4]
 80277bc:	691b      	ldr	r3, [r3, #16]
 80277be:	b2da      	uxtb	r2, r3
 80277c0:	687b      	ldr	r3, [r7, #4]
 80277c2:	685b      	ldr	r3, [r3, #4]
 80277c4:	4619      	mov	r1, r3
 80277c6:	4610      	mov	r0, r2
 80277c8:	f000 f844 	bl	8027854 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80277cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80277d0:	f7ff fea2 	bl	8027518 <FLASH_WaitForLastOperation>
 80277d4:	4603      	mov	r3, r0
 80277d6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80277d8:	4b1d      	ldr	r3, [pc, #116]	; (8027850 <HAL_FLASHEx_Erase+0xdc>)
 80277da:	691b      	ldr	r3, [r3, #16]
 80277dc:	4a1c      	ldr	r2, [pc, #112]	; (8027850 <HAL_FLASHEx_Erase+0xdc>)
 80277de:	f023 0304 	bic.w	r3, r3, #4
 80277e2:	6113      	str	r3, [r2, #16]
 80277e4:	e028      	b.n	8027838 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80277e6:	687b      	ldr	r3, [r7, #4]
 80277e8:	689b      	ldr	r3, [r3, #8]
 80277ea:	60bb      	str	r3, [r7, #8]
 80277ec:	e01c      	b.n	8027828 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80277ee:	687b      	ldr	r3, [r7, #4]
 80277f0:	691b      	ldr	r3, [r3, #16]
 80277f2:	b2db      	uxtb	r3, r3
 80277f4:	4619      	mov	r1, r3
 80277f6:	68b8      	ldr	r0, [r7, #8]
 80277f8:	f000 f850 	bl	802789c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80277fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027800:	f7ff fe8a 	bl	8027518 <FLASH_WaitForLastOperation>
 8027804:	4603      	mov	r3, r0
 8027806:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8027808:	4b11      	ldr	r3, [pc, #68]	; (8027850 <HAL_FLASHEx_Erase+0xdc>)
 802780a:	691b      	ldr	r3, [r3, #16]
 802780c:	4a10      	ldr	r2, [pc, #64]	; (8027850 <HAL_FLASHEx_Erase+0xdc>)
 802780e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8027812:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8027814:	7bfb      	ldrb	r3, [r7, #15]
 8027816:	2b00      	cmp	r3, #0
 8027818:	d003      	beq.n	8027822 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 802781a:	683b      	ldr	r3, [r7, #0]
 802781c:	68ba      	ldr	r2, [r7, #8]
 802781e:	601a      	str	r2, [r3, #0]
          break;
 8027820:	e00a      	b.n	8027838 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8027822:	68bb      	ldr	r3, [r7, #8]
 8027824:	3301      	adds	r3, #1
 8027826:	60bb      	str	r3, [r7, #8]
 8027828:	687b      	ldr	r3, [r7, #4]
 802782a:	68da      	ldr	r2, [r3, #12]
 802782c:	687b      	ldr	r3, [r7, #4]
 802782e:	689b      	ldr	r3, [r3, #8]
 8027830:	4413      	add	r3, r2
 8027832:	68ba      	ldr	r2, [r7, #8]
 8027834:	429a      	cmp	r2, r3
 8027836:	d3da      	bcc.n	80277ee <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8027838:	f000 f878 	bl	802792c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802783c:	4b03      	ldr	r3, [pc, #12]	; (802784c <HAL_FLASHEx_Erase+0xd8>)
 802783e:	2200      	movs	r2, #0
 8027840:	761a      	strb	r2, [r3, #24]

  return status;
 8027842:	7bfb      	ldrb	r3, [r7, #15]
}
 8027844:	4618      	mov	r0, r3
 8027846:	3710      	adds	r7, #16
 8027848:	46bd      	mov	sp, r7
 802784a:	bd80      	pop	{r7, pc}
 802784c:	20000b68 	.word	0x20000b68
 8027850:	40023c00 	.word	0x40023c00

08027854 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8027854:	b480      	push	{r7}
 8027856:	b083      	sub	sp, #12
 8027858:	af00      	add	r7, sp, #0
 802785a:	4603      	mov	r3, r0
 802785c:	6039      	str	r1, [r7, #0]
 802785e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027860:	4b0d      	ldr	r3, [pc, #52]	; (8027898 <FLASH_MassErase+0x44>)
 8027862:	691b      	ldr	r3, [r3, #16]
 8027864:	4a0c      	ldr	r2, [pc, #48]	; (8027898 <FLASH_MassErase+0x44>)
 8027866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802786a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 802786c:	4b0a      	ldr	r3, [pc, #40]	; (8027898 <FLASH_MassErase+0x44>)
 802786e:	691b      	ldr	r3, [r3, #16]
 8027870:	4a09      	ldr	r2, [pc, #36]	; (8027898 <FLASH_MassErase+0x44>)
 8027872:	f043 0304 	orr.w	r3, r3, #4
 8027876:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8027878:	4b07      	ldr	r3, [pc, #28]	; (8027898 <FLASH_MassErase+0x44>)
 802787a:	691a      	ldr	r2, [r3, #16]
 802787c:	79fb      	ldrb	r3, [r7, #7]
 802787e:	021b      	lsls	r3, r3, #8
 8027880:	4313      	orrs	r3, r2
 8027882:	4a05      	ldr	r2, [pc, #20]	; (8027898 <FLASH_MassErase+0x44>)
 8027884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027888:	6113      	str	r3, [r2, #16]
}
 802788a:	bf00      	nop
 802788c:	370c      	adds	r7, #12
 802788e:	46bd      	mov	sp, r7
 8027890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027894:	4770      	bx	lr
 8027896:	bf00      	nop
 8027898:	40023c00 	.word	0x40023c00

0802789c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 802789c:	b480      	push	{r7}
 802789e:	b085      	sub	sp, #20
 80278a0:	af00      	add	r7, sp, #0
 80278a2:	6078      	str	r0, [r7, #4]
 80278a4:	460b      	mov	r3, r1
 80278a6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80278a8:	2300      	movs	r3, #0
 80278aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80278ac:	78fb      	ldrb	r3, [r7, #3]
 80278ae:	2b00      	cmp	r3, #0
 80278b0:	d102      	bne.n	80278b8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80278b2:	2300      	movs	r3, #0
 80278b4:	60fb      	str	r3, [r7, #12]
 80278b6:	e010      	b.n	80278da <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80278b8:	78fb      	ldrb	r3, [r7, #3]
 80278ba:	2b01      	cmp	r3, #1
 80278bc:	d103      	bne.n	80278c6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80278be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80278c2:	60fb      	str	r3, [r7, #12]
 80278c4:	e009      	b.n	80278da <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80278c6:	78fb      	ldrb	r3, [r7, #3]
 80278c8:	2b02      	cmp	r3, #2
 80278ca:	d103      	bne.n	80278d4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80278cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80278d0:	60fb      	str	r3, [r7, #12]
 80278d2:	e002      	b.n	80278da <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80278d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80278d8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80278da:	4b13      	ldr	r3, [pc, #76]	; (8027928 <FLASH_Erase_Sector+0x8c>)
 80278dc:	691b      	ldr	r3, [r3, #16]
 80278de:	4a12      	ldr	r2, [pc, #72]	; (8027928 <FLASH_Erase_Sector+0x8c>)
 80278e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80278e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80278e6:	4b10      	ldr	r3, [pc, #64]	; (8027928 <FLASH_Erase_Sector+0x8c>)
 80278e8:	691a      	ldr	r2, [r3, #16]
 80278ea:	490f      	ldr	r1, [pc, #60]	; (8027928 <FLASH_Erase_Sector+0x8c>)
 80278ec:	68fb      	ldr	r3, [r7, #12]
 80278ee:	4313      	orrs	r3, r2
 80278f0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80278f2:	4b0d      	ldr	r3, [pc, #52]	; (8027928 <FLASH_Erase_Sector+0x8c>)
 80278f4:	691b      	ldr	r3, [r3, #16]
 80278f6:	4a0c      	ldr	r2, [pc, #48]	; (8027928 <FLASH_Erase_Sector+0x8c>)
 80278f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80278fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80278fe:	4b0a      	ldr	r3, [pc, #40]	; (8027928 <FLASH_Erase_Sector+0x8c>)
 8027900:	691a      	ldr	r2, [r3, #16]
 8027902:	687b      	ldr	r3, [r7, #4]
 8027904:	00db      	lsls	r3, r3, #3
 8027906:	4313      	orrs	r3, r2
 8027908:	4a07      	ldr	r2, [pc, #28]	; (8027928 <FLASH_Erase_Sector+0x8c>)
 802790a:	f043 0302 	orr.w	r3, r3, #2
 802790e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8027910:	4b05      	ldr	r3, [pc, #20]	; (8027928 <FLASH_Erase_Sector+0x8c>)
 8027912:	691b      	ldr	r3, [r3, #16]
 8027914:	4a04      	ldr	r2, [pc, #16]	; (8027928 <FLASH_Erase_Sector+0x8c>)
 8027916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802791a:	6113      	str	r3, [r2, #16]
}
 802791c:	bf00      	nop
 802791e:	3714      	adds	r7, #20
 8027920:	46bd      	mov	sp, r7
 8027922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027926:	4770      	bx	lr
 8027928:	40023c00 	.word	0x40023c00

0802792c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 802792c:	b480      	push	{r7}
 802792e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8027930:	4b20      	ldr	r3, [pc, #128]	; (80279b4 <FLASH_FlushCaches+0x88>)
 8027932:	681b      	ldr	r3, [r3, #0]
 8027934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027938:	2b00      	cmp	r3, #0
 802793a:	d017      	beq.n	802796c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 802793c:	4b1d      	ldr	r3, [pc, #116]	; (80279b4 <FLASH_FlushCaches+0x88>)
 802793e:	681b      	ldr	r3, [r3, #0]
 8027940:	4a1c      	ldr	r2, [pc, #112]	; (80279b4 <FLASH_FlushCaches+0x88>)
 8027942:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8027946:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8027948:	4b1a      	ldr	r3, [pc, #104]	; (80279b4 <FLASH_FlushCaches+0x88>)
 802794a:	681b      	ldr	r3, [r3, #0]
 802794c:	4a19      	ldr	r2, [pc, #100]	; (80279b4 <FLASH_FlushCaches+0x88>)
 802794e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8027952:	6013      	str	r3, [r2, #0]
 8027954:	4b17      	ldr	r3, [pc, #92]	; (80279b4 <FLASH_FlushCaches+0x88>)
 8027956:	681b      	ldr	r3, [r3, #0]
 8027958:	4a16      	ldr	r2, [pc, #88]	; (80279b4 <FLASH_FlushCaches+0x88>)
 802795a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802795e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8027960:	4b14      	ldr	r3, [pc, #80]	; (80279b4 <FLASH_FlushCaches+0x88>)
 8027962:	681b      	ldr	r3, [r3, #0]
 8027964:	4a13      	ldr	r2, [pc, #76]	; (80279b4 <FLASH_FlushCaches+0x88>)
 8027966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802796a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 802796c:	4b11      	ldr	r3, [pc, #68]	; (80279b4 <FLASH_FlushCaches+0x88>)
 802796e:	681b      	ldr	r3, [r3, #0]
 8027970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027974:	2b00      	cmp	r3, #0
 8027976:	d017      	beq.n	80279a8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8027978:	4b0e      	ldr	r3, [pc, #56]	; (80279b4 <FLASH_FlushCaches+0x88>)
 802797a:	681b      	ldr	r3, [r3, #0]
 802797c:	4a0d      	ldr	r2, [pc, #52]	; (80279b4 <FLASH_FlushCaches+0x88>)
 802797e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8027982:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8027984:	4b0b      	ldr	r3, [pc, #44]	; (80279b4 <FLASH_FlushCaches+0x88>)
 8027986:	681b      	ldr	r3, [r3, #0]
 8027988:	4a0a      	ldr	r2, [pc, #40]	; (80279b4 <FLASH_FlushCaches+0x88>)
 802798a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802798e:	6013      	str	r3, [r2, #0]
 8027990:	4b08      	ldr	r3, [pc, #32]	; (80279b4 <FLASH_FlushCaches+0x88>)
 8027992:	681b      	ldr	r3, [r3, #0]
 8027994:	4a07      	ldr	r2, [pc, #28]	; (80279b4 <FLASH_FlushCaches+0x88>)
 8027996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802799a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 802799c:	4b05      	ldr	r3, [pc, #20]	; (80279b4 <FLASH_FlushCaches+0x88>)
 802799e:	681b      	ldr	r3, [r3, #0]
 80279a0:	4a04      	ldr	r2, [pc, #16]	; (80279b4 <FLASH_FlushCaches+0x88>)
 80279a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80279a6:	6013      	str	r3, [r2, #0]
  }
}
 80279a8:	bf00      	nop
 80279aa:	46bd      	mov	sp, r7
 80279ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279b0:	4770      	bx	lr
 80279b2:	bf00      	nop
 80279b4:	40023c00 	.word	0x40023c00

080279b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80279b8:	b480      	push	{r7}
 80279ba:	b089      	sub	sp, #36	; 0x24
 80279bc:	af00      	add	r7, sp, #0
 80279be:	6078      	str	r0, [r7, #4]
 80279c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80279c2:	2300      	movs	r3, #0
 80279c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80279c6:	2300      	movs	r3, #0
 80279c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80279ca:	2300      	movs	r3, #0
 80279cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80279ce:	2300      	movs	r3, #0
 80279d0:	61fb      	str	r3, [r7, #28]
 80279d2:	e16b      	b.n	8027cac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80279d4:	2201      	movs	r2, #1
 80279d6:	69fb      	ldr	r3, [r7, #28]
 80279d8:	fa02 f303 	lsl.w	r3, r2, r3
 80279dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80279de:	683b      	ldr	r3, [r7, #0]
 80279e0:	681b      	ldr	r3, [r3, #0]
 80279e2:	697a      	ldr	r2, [r7, #20]
 80279e4:	4013      	ands	r3, r2
 80279e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80279e8:	693a      	ldr	r2, [r7, #16]
 80279ea:	697b      	ldr	r3, [r7, #20]
 80279ec:	429a      	cmp	r2, r3
 80279ee:	f040 815a 	bne.w	8027ca6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80279f2:	683b      	ldr	r3, [r7, #0]
 80279f4:	685b      	ldr	r3, [r3, #4]
 80279f6:	2b01      	cmp	r3, #1
 80279f8:	d00b      	beq.n	8027a12 <HAL_GPIO_Init+0x5a>
 80279fa:	683b      	ldr	r3, [r7, #0]
 80279fc:	685b      	ldr	r3, [r3, #4]
 80279fe:	2b02      	cmp	r3, #2
 8027a00:	d007      	beq.n	8027a12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027a02:	683b      	ldr	r3, [r7, #0]
 8027a04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8027a06:	2b11      	cmp	r3, #17
 8027a08:	d003      	beq.n	8027a12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027a0a:	683b      	ldr	r3, [r7, #0]
 8027a0c:	685b      	ldr	r3, [r3, #4]
 8027a0e:	2b12      	cmp	r3, #18
 8027a10:	d130      	bne.n	8027a74 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8027a12:	687b      	ldr	r3, [r7, #4]
 8027a14:	689b      	ldr	r3, [r3, #8]
 8027a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8027a18:	69fb      	ldr	r3, [r7, #28]
 8027a1a:	005b      	lsls	r3, r3, #1
 8027a1c:	2203      	movs	r2, #3
 8027a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8027a22:	43db      	mvns	r3, r3
 8027a24:	69ba      	ldr	r2, [r7, #24]
 8027a26:	4013      	ands	r3, r2
 8027a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8027a2a:	683b      	ldr	r3, [r7, #0]
 8027a2c:	68da      	ldr	r2, [r3, #12]
 8027a2e:	69fb      	ldr	r3, [r7, #28]
 8027a30:	005b      	lsls	r3, r3, #1
 8027a32:	fa02 f303 	lsl.w	r3, r2, r3
 8027a36:	69ba      	ldr	r2, [r7, #24]
 8027a38:	4313      	orrs	r3, r2
 8027a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8027a3c:	687b      	ldr	r3, [r7, #4]
 8027a3e:	69ba      	ldr	r2, [r7, #24]
 8027a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8027a42:	687b      	ldr	r3, [r7, #4]
 8027a44:	685b      	ldr	r3, [r3, #4]
 8027a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8027a48:	2201      	movs	r2, #1
 8027a4a:	69fb      	ldr	r3, [r7, #28]
 8027a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8027a50:	43db      	mvns	r3, r3
 8027a52:	69ba      	ldr	r2, [r7, #24]
 8027a54:	4013      	ands	r3, r2
 8027a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8027a58:	683b      	ldr	r3, [r7, #0]
 8027a5a:	685b      	ldr	r3, [r3, #4]
 8027a5c:	091b      	lsrs	r3, r3, #4
 8027a5e:	f003 0201 	and.w	r2, r3, #1
 8027a62:	69fb      	ldr	r3, [r7, #28]
 8027a64:	fa02 f303 	lsl.w	r3, r2, r3
 8027a68:	69ba      	ldr	r2, [r7, #24]
 8027a6a:	4313      	orrs	r3, r2
 8027a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8027a6e:	687b      	ldr	r3, [r7, #4]
 8027a70:	69ba      	ldr	r2, [r7, #24]
 8027a72:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8027a74:	687b      	ldr	r3, [r7, #4]
 8027a76:	68db      	ldr	r3, [r3, #12]
 8027a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8027a7a:	69fb      	ldr	r3, [r7, #28]
 8027a7c:	005b      	lsls	r3, r3, #1
 8027a7e:	2203      	movs	r2, #3
 8027a80:	fa02 f303 	lsl.w	r3, r2, r3
 8027a84:	43db      	mvns	r3, r3
 8027a86:	69ba      	ldr	r2, [r7, #24]
 8027a88:	4013      	ands	r3, r2
 8027a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8027a8c:	683b      	ldr	r3, [r7, #0]
 8027a8e:	689a      	ldr	r2, [r3, #8]
 8027a90:	69fb      	ldr	r3, [r7, #28]
 8027a92:	005b      	lsls	r3, r3, #1
 8027a94:	fa02 f303 	lsl.w	r3, r2, r3
 8027a98:	69ba      	ldr	r2, [r7, #24]
 8027a9a:	4313      	orrs	r3, r2
 8027a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8027a9e:	687b      	ldr	r3, [r7, #4]
 8027aa0:	69ba      	ldr	r2, [r7, #24]
 8027aa2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027aa4:	683b      	ldr	r3, [r7, #0]
 8027aa6:	685b      	ldr	r3, [r3, #4]
 8027aa8:	2b02      	cmp	r3, #2
 8027aaa:	d003      	beq.n	8027ab4 <HAL_GPIO_Init+0xfc>
 8027aac:	683b      	ldr	r3, [r7, #0]
 8027aae:	685b      	ldr	r3, [r3, #4]
 8027ab0:	2b12      	cmp	r3, #18
 8027ab2:	d123      	bne.n	8027afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8027ab4:	69fb      	ldr	r3, [r7, #28]
 8027ab6:	08da      	lsrs	r2, r3, #3
 8027ab8:	687b      	ldr	r3, [r7, #4]
 8027aba:	3208      	adds	r2, #8
 8027abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8027ac2:	69fb      	ldr	r3, [r7, #28]
 8027ac4:	f003 0307 	and.w	r3, r3, #7
 8027ac8:	009b      	lsls	r3, r3, #2
 8027aca:	220f      	movs	r2, #15
 8027acc:	fa02 f303 	lsl.w	r3, r2, r3
 8027ad0:	43db      	mvns	r3, r3
 8027ad2:	69ba      	ldr	r2, [r7, #24]
 8027ad4:	4013      	ands	r3, r2
 8027ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8027ad8:	683b      	ldr	r3, [r7, #0]
 8027ada:	691a      	ldr	r2, [r3, #16]
 8027adc:	69fb      	ldr	r3, [r7, #28]
 8027ade:	f003 0307 	and.w	r3, r3, #7
 8027ae2:	009b      	lsls	r3, r3, #2
 8027ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8027ae8:	69ba      	ldr	r2, [r7, #24]
 8027aea:	4313      	orrs	r3, r2
 8027aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8027aee:	69fb      	ldr	r3, [r7, #28]
 8027af0:	08da      	lsrs	r2, r3, #3
 8027af2:	687b      	ldr	r3, [r7, #4]
 8027af4:	3208      	adds	r2, #8
 8027af6:	69b9      	ldr	r1, [r7, #24]
 8027af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8027afc:	687b      	ldr	r3, [r7, #4]
 8027afe:	681b      	ldr	r3, [r3, #0]
 8027b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8027b02:	69fb      	ldr	r3, [r7, #28]
 8027b04:	005b      	lsls	r3, r3, #1
 8027b06:	2203      	movs	r2, #3
 8027b08:	fa02 f303 	lsl.w	r3, r2, r3
 8027b0c:	43db      	mvns	r3, r3
 8027b0e:	69ba      	ldr	r2, [r7, #24]
 8027b10:	4013      	ands	r3, r2
 8027b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8027b14:	683b      	ldr	r3, [r7, #0]
 8027b16:	685b      	ldr	r3, [r3, #4]
 8027b18:	f003 0203 	and.w	r2, r3, #3
 8027b1c:	69fb      	ldr	r3, [r7, #28]
 8027b1e:	005b      	lsls	r3, r3, #1
 8027b20:	fa02 f303 	lsl.w	r3, r2, r3
 8027b24:	69ba      	ldr	r2, [r7, #24]
 8027b26:	4313      	orrs	r3, r2
 8027b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8027b2a:	687b      	ldr	r3, [r7, #4]
 8027b2c:	69ba      	ldr	r2, [r7, #24]
 8027b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8027b30:	683b      	ldr	r3, [r7, #0]
 8027b32:	685b      	ldr	r3, [r3, #4]
 8027b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027b38:	2b00      	cmp	r3, #0
 8027b3a:	f000 80b4 	beq.w	8027ca6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8027b3e:	2300      	movs	r3, #0
 8027b40:	60fb      	str	r3, [r7, #12]
 8027b42:	4b5f      	ldr	r3, [pc, #380]	; (8027cc0 <HAL_GPIO_Init+0x308>)
 8027b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027b46:	4a5e      	ldr	r2, [pc, #376]	; (8027cc0 <HAL_GPIO_Init+0x308>)
 8027b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8027b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8027b4e:	4b5c      	ldr	r3, [pc, #368]	; (8027cc0 <HAL_GPIO_Init+0x308>)
 8027b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8027b56:	60fb      	str	r3, [r7, #12]
 8027b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8027b5a:	4a5a      	ldr	r2, [pc, #360]	; (8027cc4 <HAL_GPIO_Init+0x30c>)
 8027b5c:	69fb      	ldr	r3, [r7, #28]
 8027b5e:	089b      	lsrs	r3, r3, #2
 8027b60:	3302      	adds	r3, #2
 8027b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8027b68:	69fb      	ldr	r3, [r7, #28]
 8027b6a:	f003 0303 	and.w	r3, r3, #3
 8027b6e:	009b      	lsls	r3, r3, #2
 8027b70:	220f      	movs	r2, #15
 8027b72:	fa02 f303 	lsl.w	r3, r2, r3
 8027b76:	43db      	mvns	r3, r3
 8027b78:	69ba      	ldr	r2, [r7, #24]
 8027b7a:	4013      	ands	r3, r2
 8027b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8027b7e:	687b      	ldr	r3, [r7, #4]
 8027b80:	4a51      	ldr	r2, [pc, #324]	; (8027cc8 <HAL_GPIO_Init+0x310>)
 8027b82:	4293      	cmp	r3, r2
 8027b84:	d02b      	beq.n	8027bde <HAL_GPIO_Init+0x226>
 8027b86:	687b      	ldr	r3, [r7, #4]
 8027b88:	4a50      	ldr	r2, [pc, #320]	; (8027ccc <HAL_GPIO_Init+0x314>)
 8027b8a:	4293      	cmp	r3, r2
 8027b8c:	d025      	beq.n	8027bda <HAL_GPIO_Init+0x222>
 8027b8e:	687b      	ldr	r3, [r7, #4]
 8027b90:	4a4f      	ldr	r2, [pc, #316]	; (8027cd0 <HAL_GPIO_Init+0x318>)
 8027b92:	4293      	cmp	r3, r2
 8027b94:	d01f      	beq.n	8027bd6 <HAL_GPIO_Init+0x21e>
 8027b96:	687b      	ldr	r3, [r7, #4]
 8027b98:	4a4e      	ldr	r2, [pc, #312]	; (8027cd4 <HAL_GPIO_Init+0x31c>)
 8027b9a:	4293      	cmp	r3, r2
 8027b9c:	d019      	beq.n	8027bd2 <HAL_GPIO_Init+0x21a>
 8027b9e:	687b      	ldr	r3, [r7, #4]
 8027ba0:	4a4d      	ldr	r2, [pc, #308]	; (8027cd8 <HAL_GPIO_Init+0x320>)
 8027ba2:	4293      	cmp	r3, r2
 8027ba4:	d013      	beq.n	8027bce <HAL_GPIO_Init+0x216>
 8027ba6:	687b      	ldr	r3, [r7, #4]
 8027ba8:	4a4c      	ldr	r2, [pc, #304]	; (8027cdc <HAL_GPIO_Init+0x324>)
 8027baa:	4293      	cmp	r3, r2
 8027bac:	d00d      	beq.n	8027bca <HAL_GPIO_Init+0x212>
 8027bae:	687b      	ldr	r3, [r7, #4]
 8027bb0:	4a4b      	ldr	r2, [pc, #300]	; (8027ce0 <HAL_GPIO_Init+0x328>)
 8027bb2:	4293      	cmp	r3, r2
 8027bb4:	d007      	beq.n	8027bc6 <HAL_GPIO_Init+0x20e>
 8027bb6:	687b      	ldr	r3, [r7, #4]
 8027bb8:	4a4a      	ldr	r2, [pc, #296]	; (8027ce4 <HAL_GPIO_Init+0x32c>)
 8027bba:	4293      	cmp	r3, r2
 8027bbc:	d101      	bne.n	8027bc2 <HAL_GPIO_Init+0x20a>
 8027bbe:	2307      	movs	r3, #7
 8027bc0:	e00e      	b.n	8027be0 <HAL_GPIO_Init+0x228>
 8027bc2:	2308      	movs	r3, #8
 8027bc4:	e00c      	b.n	8027be0 <HAL_GPIO_Init+0x228>
 8027bc6:	2306      	movs	r3, #6
 8027bc8:	e00a      	b.n	8027be0 <HAL_GPIO_Init+0x228>
 8027bca:	2305      	movs	r3, #5
 8027bcc:	e008      	b.n	8027be0 <HAL_GPIO_Init+0x228>
 8027bce:	2304      	movs	r3, #4
 8027bd0:	e006      	b.n	8027be0 <HAL_GPIO_Init+0x228>
 8027bd2:	2303      	movs	r3, #3
 8027bd4:	e004      	b.n	8027be0 <HAL_GPIO_Init+0x228>
 8027bd6:	2302      	movs	r3, #2
 8027bd8:	e002      	b.n	8027be0 <HAL_GPIO_Init+0x228>
 8027bda:	2301      	movs	r3, #1
 8027bdc:	e000      	b.n	8027be0 <HAL_GPIO_Init+0x228>
 8027bde:	2300      	movs	r3, #0
 8027be0:	69fa      	ldr	r2, [r7, #28]
 8027be2:	f002 0203 	and.w	r2, r2, #3
 8027be6:	0092      	lsls	r2, r2, #2
 8027be8:	4093      	lsls	r3, r2
 8027bea:	69ba      	ldr	r2, [r7, #24]
 8027bec:	4313      	orrs	r3, r2
 8027bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8027bf0:	4934      	ldr	r1, [pc, #208]	; (8027cc4 <HAL_GPIO_Init+0x30c>)
 8027bf2:	69fb      	ldr	r3, [r7, #28]
 8027bf4:	089b      	lsrs	r3, r3, #2
 8027bf6:	3302      	adds	r3, #2
 8027bf8:	69ba      	ldr	r2, [r7, #24]
 8027bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8027bfe:	4b3a      	ldr	r3, [pc, #232]	; (8027ce8 <HAL_GPIO_Init+0x330>)
 8027c00:	681b      	ldr	r3, [r3, #0]
 8027c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027c04:	693b      	ldr	r3, [r7, #16]
 8027c06:	43db      	mvns	r3, r3
 8027c08:	69ba      	ldr	r2, [r7, #24]
 8027c0a:	4013      	ands	r3, r2
 8027c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8027c0e:	683b      	ldr	r3, [r7, #0]
 8027c10:	685b      	ldr	r3, [r3, #4]
 8027c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027c16:	2b00      	cmp	r3, #0
 8027c18:	d003      	beq.n	8027c22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8027c1a:	69ba      	ldr	r2, [r7, #24]
 8027c1c:	693b      	ldr	r3, [r7, #16]
 8027c1e:	4313      	orrs	r3, r2
 8027c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8027c22:	4a31      	ldr	r2, [pc, #196]	; (8027ce8 <HAL_GPIO_Init+0x330>)
 8027c24:	69bb      	ldr	r3, [r7, #24]
 8027c26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8027c28:	4b2f      	ldr	r3, [pc, #188]	; (8027ce8 <HAL_GPIO_Init+0x330>)
 8027c2a:	685b      	ldr	r3, [r3, #4]
 8027c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027c2e:	693b      	ldr	r3, [r7, #16]
 8027c30:	43db      	mvns	r3, r3
 8027c32:	69ba      	ldr	r2, [r7, #24]
 8027c34:	4013      	ands	r3, r2
 8027c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8027c38:	683b      	ldr	r3, [r7, #0]
 8027c3a:	685b      	ldr	r3, [r3, #4]
 8027c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027c40:	2b00      	cmp	r3, #0
 8027c42:	d003      	beq.n	8027c4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8027c44:	69ba      	ldr	r2, [r7, #24]
 8027c46:	693b      	ldr	r3, [r7, #16]
 8027c48:	4313      	orrs	r3, r2
 8027c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8027c4c:	4a26      	ldr	r2, [pc, #152]	; (8027ce8 <HAL_GPIO_Init+0x330>)
 8027c4e:	69bb      	ldr	r3, [r7, #24]
 8027c50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8027c52:	4b25      	ldr	r3, [pc, #148]	; (8027ce8 <HAL_GPIO_Init+0x330>)
 8027c54:	689b      	ldr	r3, [r3, #8]
 8027c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027c58:	693b      	ldr	r3, [r7, #16]
 8027c5a:	43db      	mvns	r3, r3
 8027c5c:	69ba      	ldr	r2, [r7, #24]
 8027c5e:	4013      	ands	r3, r2
 8027c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8027c62:	683b      	ldr	r3, [r7, #0]
 8027c64:	685b      	ldr	r3, [r3, #4]
 8027c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8027c6a:	2b00      	cmp	r3, #0
 8027c6c:	d003      	beq.n	8027c76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8027c6e:	69ba      	ldr	r2, [r7, #24]
 8027c70:	693b      	ldr	r3, [r7, #16]
 8027c72:	4313      	orrs	r3, r2
 8027c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8027c76:	4a1c      	ldr	r2, [pc, #112]	; (8027ce8 <HAL_GPIO_Init+0x330>)
 8027c78:	69bb      	ldr	r3, [r7, #24]
 8027c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8027c7c:	4b1a      	ldr	r3, [pc, #104]	; (8027ce8 <HAL_GPIO_Init+0x330>)
 8027c7e:	68db      	ldr	r3, [r3, #12]
 8027c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027c82:	693b      	ldr	r3, [r7, #16]
 8027c84:	43db      	mvns	r3, r3
 8027c86:	69ba      	ldr	r2, [r7, #24]
 8027c88:	4013      	ands	r3, r2
 8027c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8027c8c:	683b      	ldr	r3, [r7, #0]
 8027c8e:	685b      	ldr	r3, [r3, #4]
 8027c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8027c94:	2b00      	cmp	r3, #0
 8027c96:	d003      	beq.n	8027ca0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8027c98:	69ba      	ldr	r2, [r7, #24]
 8027c9a:	693b      	ldr	r3, [r7, #16]
 8027c9c:	4313      	orrs	r3, r2
 8027c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8027ca0:	4a11      	ldr	r2, [pc, #68]	; (8027ce8 <HAL_GPIO_Init+0x330>)
 8027ca2:	69bb      	ldr	r3, [r7, #24]
 8027ca4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8027ca6:	69fb      	ldr	r3, [r7, #28]
 8027ca8:	3301      	adds	r3, #1
 8027caa:	61fb      	str	r3, [r7, #28]
 8027cac:	69fb      	ldr	r3, [r7, #28]
 8027cae:	2b0f      	cmp	r3, #15
 8027cb0:	f67f ae90 	bls.w	80279d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8027cb4:	bf00      	nop
 8027cb6:	3724      	adds	r7, #36	; 0x24
 8027cb8:	46bd      	mov	sp, r7
 8027cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cbe:	4770      	bx	lr
 8027cc0:	40023800 	.word	0x40023800
 8027cc4:	40013800 	.word	0x40013800
 8027cc8:	40020000 	.word	0x40020000
 8027ccc:	40020400 	.word	0x40020400
 8027cd0:	40020800 	.word	0x40020800
 8027cd4:	40020c00 	.word	0x40020c00
 8027cd8:	40021000 	.word	0x40021000
 8027cdc:	40021400 	.word	0x40021400
 8027ce0:	40021800 	.word	0x40021800
 8027ce4:	40021c00 	.word	0x40021c00
 8027ce8:	40013c00 	.word	0x40013c00

08027cec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8027cec:	b480      	push	{r7}
 8027cee:	b085      	sub	sp, #20
 8027cf0:	af00      	add	r7, sp, #0
 8027cf2:	6078      	str	r0, [r7, #4]
 8027cf4:	460b      	mov	r3, r1
 8027cf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8027cf8:	687b      	ldr	r3, [r7, #4]
 8027cfa:	691a      	ldr	r2, [r3, #16]
 8027cfc:	887b      	ldrh	r3, [r7, #2]
 8027cfe:	4013      	ands	r3, r2
 8027d00:	2b00      	cmp	r3, #0
 8027d02:	d002      	beq.n	8027d0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8027d04:	2301      	movs	r3, #1
 8027d06:	73fb      	strb	r3, [r7, #15]
 8027d08:	e001      	b.n	8027d0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8027d0a:	2300      	movs	r3, #0
 8027d0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8027d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8027d10:	4618      	mov	r0, r3
 8027d12:	3714      	adds	r7, #20
 8027d14:	46bd      	mov	sp, r7
 8027d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d1a:	4770      	bx	lr

08027d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8027d1c:	b480      	push	{r7}
 8027d1e:	b083      	sub	sp, #12
 8027d20:	af00      	add	r7, sp, #0
 8027d22:	6078      	str	r0, [r7, #4]
 8027d24:	460b      	mov	r3, r1
 8027d26:	807b      	strh	r3, [r7, #2]
 8027d28:	4613      	mov	r3, r2
 8027d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8027d2c:	787b      	ldrb	r3, [r7, #1]
 8027d2e:	2b00      	cmp	r3, #0
 8027d30:	d003      	beq.n	8027d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8027d32:	887a      	ldrh	r2, [r7, #2]
 8027d34:	687b      	ldr	r3, [r7, #4]
 8027d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8027d38:	e003      	b.n	8027d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8027d3a:	887b      	ldrh	r3, [r7, #2]
 8027d3c:	041a      	lsls	r2, r3, #16
 8027d3e:	687b      	ldr	r3, [r7, #4]
 8027d40:	619a      	str	r2, [r3, #24]
}
 8027d42:	bf00      	nop
 8027d44:	370c      	adds	r7, #12
 8027d46:	46bd      	mov	sp, r7
 8027d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d4c:	4770      	bx	lr
	...

08027d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8027d50:	b580      	push	{r7, lr}
 8027d52:	b084      	sub	sp, #16
 8027d54:	af00      	add	r7, sp, #0
 8027d56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8027d58:	687b      	ldr	r3, [r7, #4]
 8027d5a:	2b00      	cmp	r3, #0
 8027d5c:	d101      	bne.n	8027d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8027d5e:	2301      	movs	r3, #1
 8027d60:	e11f      	b.n	8027fa2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8027d62:	687b      	ldr	r3, [r7, #4]
 8027d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027d68:	b2db      	uxtb	r3, r3
 8027d6a:	2b00      	cmp	r3, #0
 8027d6c:	d106      	bne.n	8027d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8027d6e:	687b      	ldr	r3, [r7, #4]
 8027d70:	2200      	movs	r2, #0
 8027d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8027d76:	6878      	ldr	r0, [r7, #4]
 8027d78:	f7fc fc0e 	bl	8024598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8027d7c:	687b      	ldr	r3, [r7, #4]
 8027d7e:	2224      	movs	r2, #36	; 0x24
 8027d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8027d84:	687b      	ldr	r3, [r7, #4]
 8027d86:	681b      	ldr	r3, [r3, #0]
 8027d88:	681a      	ldr	r2, [r3, #0]
 8027d8a:	687b      	ldr	r3, [r7, #4]
 8027d8c:	681b      	ldr	r3, [r3, #0]
 8027d8e:	f022 0201 	bic.w	r2, r2, #1
 8027d92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8027d94:	687b      	ldr	r3, [r7, #4]
 8027d96:	681b      	ldr	r3, [r3, #0]
 8027d98:	681a      	ldr	r2, [r3, #0]
 8027d9a:	687b      	ldr	r3, [r7, #4]
 8027d9c:	681b      	ldr	r3, [r3, #0]
 8027d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8027da2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8027da4:	687b      	ldr	r3, [r7, #4]
 8027da6:	681b      	ldr	r3, [r3, #0]
 8027da8:	681a      	ldr	r2, [r3, #0]
 8027daa:	687b      	ldr	r3, [r7, #4]
 8027dac:	681b      	ldr	r3, [r3, #0]
 8027dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8027db2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8027db4:	f000 fd18 	bl	80287e8 <HAL_RCC_GetPCLK1Freq>
 8027db8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8027dba:	687b      	ldr	r3, [r7, #4]
 8027dbc:	685b      	ldr	r3, [r3, #4]
 8027dbe:	4a7b      	ldr	r2, [pc, #492]	; (8027fac <HAL_I2C_Init+0x25c>)
 8027dc0:	4293      	cmp	r3, r2
 8027dc2:	d807      	bhi.n	8027dd4 <HAL_I2C_Init+0x84>
 8027dc4:	68fb      	ldr	r3, [r7, #12]
 8027dc6:	4a7a      	ldr	r2, [pc, #488]	; (8027fb0 <HAL_I2C_Init+0x260>)
 8027dc8:	4293      	cmp	r3, r2
 8027dca:	bf94      	ite	ls
 8027dcc:	2301      	movls	r3, #1
 8027dce:	2300      	movhi	r3, #0
 8027dd0:	b2db      	uxtb	r3, r3
 8027dd2:	e006      	b.n	8027de2 <HAL_I2C_Init+0x92>
 8027dd4:	68fb      	ldr	r3, [r7, #12]
 8027dd6:	4a77      	ldr	r2, [pc, #476]	; (8027fb4 <HAL_I2C_Init+0x264>)
 8027dd8:	4293      	cmp	r3, r2
 8027dda:	bf94      	ite	ls
 8027ddc:	2301      	movls	r3, #1
 8027dde:	2300      	movhi	r3, #0
 8027de0:	b2db      	uxtb	r3, r3
 8027de2:	2b00      	cmp	r3, #0
 8027de4:	d001      	beq.n	8027dea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8027de6:	2301      	movs	r3, #1
 8027de8:	e0db      	b.n	8027fa2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8027dea:	68fb      	ldr	r3, [r7, #12]
 8027dec:	4a72      	ldr	r2, [pc, #456]	; (8027fb8 <HAL_I2C_Init+0x268>)
 8027dee:	fba2 2303 	umull	r2, r3, r2, r3
 8027df2:	0c9b      	lsrs	r3, r3, #18
 8027df4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8027df6:	687b      	ldr	r3, [r7, #4]
 8027df8:	681b      	ldr	r3, [r3, #0]
 8027dfa:	685b      	ldr	r3, [r3, #4]
 8027dfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027e00:	687b      	ldr	r3, [r7, #4]
 8027e02:	681b      	ldr	r3, [r3, #0]
 8027e04:	68ba      	ldr	r2, [r7, #8]
 8027e06:	430a      	orrs	r2, r1
 8027e08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8027e0a:	687b      	ldr	r3, [r7, #4]
 8027e0c:	681b      	ldr	r3, [r3, #0]
 8027e0e:	6a1b      	ldr	r3, [r3, #32]
 8027e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027e14:	687b      	ldr	r3, [r7, #4]
 8027e16:	685b      	ldr	r3, [r3, #4]
 8027e18:	4a64      	ldr	r2, [pc, #400]	; (8027fac <HAL_I2C_Init+0x25c>)
 8027e1a:	4293      	cmp	r3, r2
 8027e1c:	d802      	bhi.n	8027e24 <HAL_I2C_Init+0xd4>
 8027e1e:	68bb      	ldr	r3, [r7, #8]
 8027e20:	3301      	adds	r3, #1
 8027e22:	e009      	b.n	8027e38 <HAL_I2C_Init+0xe8>
 8027e24:	68bb      	ldr	r3, [r7, #8]
 8027e26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8027e2a:	fb02 f303 	mul.w	r3, r2, r3
 8027e2e:	4a63      	ldr	r2, [pc, #396]	; (8027fbc <HAL_I2C_Init+0x26c>)
 8027e30:	fba2 2303 	umull	r2, r3, r2, r3
 8027e34:	099b      	lsrs	r3, r3, #6
 8027e36:	3301      	adds	r3, #1
 8027e38:	687a      	ldr	r2, [r7, #4]
 8027e3a:	6812      	ldr	r2, [r2, #0]
 8027e3c:	430b      	orrs	r3, r1
 8027e3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8027e40:	687b      	ldr	r3, [r7, #4]
 8027e42:	681b      	ldr	r3, [r3, #0]
 8027e44:	69db      	ldr	r3, [r3, #28]
 8027e46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8027e4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8027e4e:	687b      	ldr	r3, [r7, #4]
 8027e50:	685b      	ldr	r3, [r3, #4]
 8027e52:	4956      	ldr	r1, [pc, #344]	; (8027fac <HAL_I2C_Init+0x25c>)
 8027e54:	428b      	cmp	r3, r1
 8027e56:	d80d      	bhi.n	8027e74 <HAL_I2C_Init+0x124>
 8027e58:	68fb      	ldr	r3, [r7, #12]
 8027e5a:	1e59      	subs	r1, r3, #1
 8027e5c:	687b      	ldr	r3, [r7, #4]
 8027e5e:	685b      	ldr	r3, [r3, #4]
 8027e60:	005b      	lsls	r3, r3, #1
 8027e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8027e66:	3301      	adds	r3, #1
 8027e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027e6c:	2b04      	cmp	r3, #4
 8027e6e:	bf38      	it	cc
 8027e70:	2304      	movcc	r3, #4
 8027e72:	e04f      	b.n	8027f14 <HAL_I2C_Init+0x1c4>
 8027e74:	687b      	ldr	r3, [r7, #4]
 8027e76:	689b      	ldr	r3, [r3, #8]
 8027e78:	2b00      	cmp	r3, #0
 8027e7a:	d111      	bne.n	8027ea0 <HAL_I2C_Init+0x150>
 8027e7c:	68fb      	ldr	r3, [r7, #12]
 8027e7e:	1e58      	subs	r0, r3, #1
 8027e80:	687b      	ldr	r3, [r7, #4]
 8027e82:	6859      	ldr	r1, [r3, #4]
 8027e84:	460b      	mov	r3, r1
 8027e86:	005b      	lsls	r3, r3, #1
 8027e88:	440b      	add	r3, r1
 8027e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8027e8e:	3301      	adds	r3, #1
 8027e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027e94:	2b00      	cmp	r3, #0
 8027e96:	bf0c      	ite	eq
 8027e98:	2301      	moveq	r3, #1
 8027e9a:	2300      	movne	r3, #0
 8027e9c:	b2db      	uxtb	r3, r3
 8027e9e:	e012      	b.n	8027ec6 <HAL_I2C_Init+0x176>
 8027ea0:	68fb      	ldr	r3, [r7, #12]
 8027ea2:	1e58      	subs	r0, r3, #1
 8027ea4:	687b      	ldr	r3, [r7, #4]
 8027ea6:	6859      	ldr	r1, [r3, #4]
 8027ea8:	460b      	mov	r3, r1
 8027eaa:	009b      	lsls	r3, r3, #2
 8027eac:	440b      	add	r3, r1
 8027eae:	0099      	lsls	r1, r3, #2
 8027eb0:	440b      	add	r3, r1
 8027eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8027eb6:	3301      	adds	r3, #1
 8027eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027ebc:	2b00      	cmp	r3, #0
 8027ebe:	bf0c      	ite	eq
 8027ec0:	2301      	moveq	r3, #1
 8027ec2:	2300      	movne	r3, #0
 8027ec4:	b2db      	uxtb	r3, r3
 8027ec6:	2b00      	cmp	r3, #0
 8027ec8:	d001      	beq.n	8027ece <HAL_I2C_Init+0x17e>
 8027eca:	2301      	movs	r3, #1
 8027ecc:	e022      	b.n	8027f14 <HAL_I2C_Init+0x1c4>
 8027ece:	687b      	ldr	r3, [r7, #4]
 8027ed0:	689b      	ldr	r3, [r3, #8]
 8027ed2:	2b00      	cmp	r3, #0
 8027ed4:	d10e      	bne.n	8027ef4 <HAL_I2C_Init+0x1a4>
 8027ed6:	68fb      	ldr	r3, [r7, #12]
 8027ed8:	1e58      	subs	r0, r3, #1
 8027eda:	687b      	ldr	r3, [r7, #4]
 8027edc:	6859      	ldr	r1, [r3, #4]
 8027ede:	460b      	mov	r3, r1
 8027ee0:	005b      	lsls	r3, r3, #1
 8027ee2:	440b      	add	r3, r1
 8027ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8027ee8:	3301      	adds	r3, #1
 8027eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8027ef2:	e00f      	b.n	8027f14 <HAL_I2C_Init+0x1c4>
 8027ef4:	68fb      	ldr	r3, [r7, #12]
 8027ef6:	1e58      	subs	r0, r3, #1
 8027ef8:	687b      	ldr	r3, [r7, #4]
 8027efa:	6859      	ldr	r1, [r3, #4]
 8027efc:	460b      	mov	r3, r1
 8027efe:	009b      	lsls	r3, r3, #2
 8027f00:	440b      	add	r3, r1
 8027f02:	0099      	lsls	r1, r3, #2
 8027f04:	440b      	add	r3, r1
 8027f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8027f0a:	3301      	adds	r3, #1
 8027f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8027f14:	6879      	ldr	r1, [r7, #4]
 8027f16:	6809      	ldr	r1, [r1, #0]
 8027f18:	4313      	orrs	r3, r2
 8027f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8027f1c:	687b      	ldr	r3, [r7, #4]
 8027f1e:	681b      	ldr	r3, [r3, #0]
 8027f20:	681b      	ldr	r3, [r3, #0]
 8027f22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8027f26:	687b      	ldr	r3, [r7, #4]
 8027f28:	69da      	ldr	r2, [r3, #28]
 8027f2a:	687b      	ldr	r3, [r7, #4]
 8027f2c:	6a1b      	ldr	r3, [r3, #32]
 8027f2e:	431a      	orrs	r2, r3
 8027f30:	687b      	ldr	r3, [r7, #4]
 8027f32:	681b      	ldr	r3, [r3, #0]
 8027f34:	430a      	orrs	r2, r1
 8027f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8027f38:	687b      	ldr	r3, [r7, #4]
 8027f3a:	681b      	ldr	r3, [r3, #0]
 8027f3c:	689b      	ldr	r3, [r3, #8]
 8027f3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8027f42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8027f46:	687a      	ldr	r2, [r7, #4]
 8027f48:	6911      	ldr	r1, [r2, #16]
 8027f4a:	687a      	ldr	r2, [r7, #4]
 8027f4c:	68d2      	ldr	r2, [r2, #12]
 8027f4e:	4311      	orrs	r1, r2
 8027f50:	687a      	ldr	r2, [r7, #4]
 8027f52:	6812      	ldr	r2, [r2, #0]
 8027f54:	430b      	orrs	r3, r1
 8027f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8027f58:	687b      	ldr	r3, [r7, #4]
 8027f5a:	681b      	ldr	r3, [r3, #0]
 8027f5c:	68db      	ldr	r3, [r3, #12]
 8027f5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8027f62:	687b      	ldr	r3, [r7, #4]
 8027f64:	695a      	ldr	r2, [r3, #20]
 8027f66:	687b      	ldr	r3, [r7, #4]
 8027f68:	699b      	ldr	r3, [r3, #24]
 8027f6a:	431a      	orrs	r2, r3
 8027f6c:	687b      	ldr	r3, [r7, #4]
 8027f6e:	681b      	ldr	r3, [r3, #0]
 8027f70:	430a      	orrs	r2, r1
 8027f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8027f74:	687b      	ldr	r3, [r7, #4]
 8027f76:	681b      	ldr	r3, [r3, #0]
 8027f78:	681a      	ldr	r2, [r3, #0]
 8027f7a:	687b      	ldr	r3, [r7, #4]
 8027f7c:	681b      	ldr	r3, [r3, #0]
 8027f7e:	f042 0201 	orr.w	r2, r2, #1
 8027f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8027f84:	687b      	ldr	r3, [r7, #4]
 8027f86:	2200      	movs	r2, #0
 8027f88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8027f8a:	687b      	ldr	r3, [r7, #4]
 8027f8c:	2220      	movs	r2, #32
 8027f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8027f92:	687b      	ldr	r3, [r7, #4]
 8027f94:	2200      	movs	r2, #0
 8027f96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8027f98:	687b      	ldr	r3, [r7, #4]
 8027f9a:	2200      	movs	r2, #0
 8027f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8027fa0:	2300      	movs	r3, #0
}
 8027fa2:	4618      	mov	r0, r3
 8027fa4:	3710      	adds	r7, #16
 8027fa6:	46bd      	mov	sp, r7
 8027fa8:	bd80      	pop	{r7, pc}
 8027faa:	bf00      	nop
 8027fac:	000186a0 	.word	0x000186a0
 8027fb0:	001e847f 	.word	0x001e847f
 8027fb4:	003d08ff 	.word	0x003d08ff
 8027fb8:	431bde83 	.word	0x431bde83
 8027fbc:	10624dd3 	.word	0x10624dd3

08027fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8027fc0:	b580      	push	{r7, lr}
 8027fc2:	b086      	sub	sp, #24
 8027fc4:	af00      	add	r7, sp, #0
 8027fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8027fc8:	687b      	ldr	r3, [r7, #4]
 8027fca:	2b00      	cmp	r3, #0
 8027fcc:	d101      	bne.n	8027fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8027fce:	2301      	movs	r3, #1
 8027fd0:	e25b      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8027fd2:	687b      	ldr	r3, [r7, #4]
 8027fd4:	681b      	ldr	r3, [r3, #0]
 8027fd6:	f003 0301 	and.w	r3, r3, #1
 8027fda:	2b00      	cmp	r3, #0
 8027fdc:	d075      	beq.n	80280ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8027fde:	4ba3      	ldr	r3, [pc, #652]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8027fe0:	689b      	ldr	r3, [r3, #8]
 8027fe2:	f003 030c 	and.w	r3, r3, #12
 8027fe6:	2b04      	cmp	r3, #4
 8027fe8:	d00c      	beq.n	8028004 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8027fea:	4ba0      	ldr	r3, [pc, #640]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8027fec:	689b      	ldr	r3, [r3, #8]
 8027fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8027ff2:	2b08      	cmp	r3, #8
 8027ff4:	d112      	bne.n	802801c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8027ff6:	4b9d      	ldr	r3, [pc, #628]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8027ff8:	685b      	ldr	r3, [r3, #4]
 8027ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8028002:	d10b      	bne.n	802801c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8028004:	4b99      	ldr	r3, [pc, #612]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8028006:	681b      	ldr	r3, [r3, #0]
 8028008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802800c:	2b00      	cmp	r3, #0
 802800e:	d05b      	beq.n	80280c8 <HAL_RCC_OscConfig+0x108>
 8028010:	687b      	ldr	r3, [r7, #4]
 8028012:	685b      	ldr	r3, [r3, #4]
 8028014:	2b00      	cmp	r3, #0
 8028016:	d157      	bne.n	80280c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8028018:	2301      	movs	r3, #1
 802801a:	e236      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802801c:	687b      	ldr	r3, [r7, #4]
 802801e:	685b      	ldr	r3, [r3, #4]
 8028020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8028024:	d106      	bne.n	8028034 <HAL_RCC_OscConfig+0x74>
 8028026:	4b91      	ldr	r3, [pc, #580]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8028028:	681b      	ldr	r3, [r3, #0]
 802802a:	4a90      	ldr	r2, [pc, #576]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 802802c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028030:	6013      	str	r3, [r2, #0]
 8028032:	e01d      	b.n	8028070 <HAL_RCC_OscConfig+0xb0>
 8028034:	687b      	ldr	r3, [r7, #4]
 8028036:	685b      	ldr	r3, [r3, #4]
 8028038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802803c:	d10c      	bne.n	8028058 <HAL_RCC_OscConfig+0x98>
 802803e:	4b8b      	ldr	r3, [pc, #556]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8028040:	681b      	ldr	r3, [r3, #0]
 8028042:	4a8a      	ldr	r2, [pc, #552]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8028044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8028048:	6013      	str	r3, [r2, #0]
 802804a:	4b88      	ldr	r3, [pc, #544]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 802804c:	681b      	ldr	r3, [r3, #0]
 802804e:	4a87      	ldr	r2, [pc, #540]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8028050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028054:	6013      	str	r3, [r2, #0]
 8028056:	e00b      	b.n	8028070 <HAL_RCC_OscConfig+0xb0>
 8028058:	4b84      	ldr	r3, [pc, #528]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 802805a:	681b      	ldr	r3, [r3, #0]
 802805c:	4a83      	ldr	r2, [pc, #524]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 802805e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8028062:	6013      	str	r3, [r2, #0]
 8028064:	4b81      	ldr	r3, [pc, #516]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8028066:	681b      	ldr	r3, [r3, #0]
 8028068:	4a80      	ldr	r2, [pc, #512]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 802806a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802806e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8028070:	687b      	ldr	r3, [r7, #4]
 8028072:	685b      	ldr	r3, [r3, #4]
 8028074:	2b00      	cmp	r3, #0
 8028076:	d013      	beq.n	80280a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028078:	f7fe f926 	bl	80262c8 <HAL_GetTick>
 802807c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802807e:	e008      	b.n	8028092 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8028080:	f7fe f922 	bl	80262c8 <HAL_GetTick>
 8028084:	4602      	mov	r2, r0
 8028086:	693b      	ldr	r3, [r7, #16]
 8028088:	1ad3      	subs	r3, r2, r3
 802808a:	2b64      	cmp	r3, #100	; 0x64
 802808c:	d901      	bls.n	8028092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802808e:	2303      	movs	r3, #3
 8028090:	e1fb      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8028092:	4b76      	ldr	r3, [pc, #472]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8028094:	681b      	ldr	r3, [r3, #0]
 8028096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802809a:	2b00      	cmp	r3, #0
 802809c:	d0f0      	beq.n	8028080 <HAL_RCC_OscConfig+0xc0>
 802809e:	e014      	b.n	80280ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80280a0:	f7fe f912 	bl	80262c8 <HAL_GetTick>
 80280a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80280a6:	e008      	b.n	80280ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80280a8:	f7fe f90e 	bl	80262c8 <HAL_GetTick>
 80280ac:	4602      	mov	r2, r0
 80280ae:	693b      	ldr	r3, [r7, #16]
 80280b0:	1ad3      	subs	r3, r2, r3
 80280b2:	2b64      	cmp	r3, #100	; 0x64
 80280b4:	d901      	bls.n	80280ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80280b6:	2303      	movs	r3, #3
 80280b8:	e1e7      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80280ba:	4b6c      	ldr	r3, [pc, #432]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 80280bc:	681b      	ldr	r3, [r3, #0]
 80280be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80280c2:	2b00      	cmp	r3, #0
 80280c4:	d1f0      	bne.n	80280a8 <HAL_RCC_OscConfig+0xe8>
 80280c6:	e000      	b.n	80280ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80280c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80280ca:	687b      	ldr	r3, [r7, #4]
 80280cc:	681b      	ldr	r3, [r3, #0]
 80280ce:	f003 0302 	and.w	r3, r3, #2
 80280d2:	2b00      	cmp	r3, #0
 80280d4:	d063      	beq.n	802819e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80280d6:	4b65      	ldr	r3, [pc, #404]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 80280d8:	689b      	ldr	r3, [r3, #8]
 80280da:	f003 030c 	and.w	r3, r3, #12
 80280de:	2b00      	cmp	r3, #0
 80280e0:	d00b      	beq.n	80280fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80280e2:	4b62      	ldr	r3, [pc, #392]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 80280e4:	689b      	ldr	r3, [r3, #8]
 80280e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80280ea:	2b08      	cmp	r3, #8
 80280ec:	d11c      	bne.n	8028128 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80280ee:	4b5f      	ldr	r3, [pc, #380]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 80280f0:	685b      	ldr	r3, [r3, #4]
 80280f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80280f6:	2b00      	cmp	r3, #0
 80280f8:	d116      	bne.n	8028128 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80280fa:	4b5c      	ldr	r3, [pc, #368]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 80280fc:	681b      	ldr	r3, [r3, #0]
 80280fe:	f003 0302 	and.w	r3, r3, #2
 8028102:	2b00      	cmp	r3, #0
 8028104:	d005      	beq.n	8028112 <HAL_RCC_OscConfig+0x152>
 8028106:	687b      	ldr	r3, [r7, #4]
 8028108:	68db      	ldr	r3, [r3, #12]
 802810a:	2b01      	cmp	r3, #1
 802810c:	d001      	beq.n	8028112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 802810e:	2301      	movs	r3, #1
 8028110:	e1bb      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8028112:	4b56      	ldr	r3, [pc, #344]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8028114:	681b      	ldr	r3, [r3, #0]
 8028116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802811a:	687b      	ldr	r3, [r7, #4]
 802811c:	691b      	ldr	r3, [r3, #16]
 802811e:	00db      	lsls	r3, r3, #3
 8028120:	4952      	ldr	r1, [pc, #328]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8028122:	4313      	orrs	r3, r2
 8028124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8028126:	e03a      	b.n	802819e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8028128:	687b      	ldr	r3, [r7, #4]
 802812a:	68db      	ldr	r3, [r3, #12]
 802812c:	2b00      	cmp	r3, #0
 802812e:	d020      	beq.n	8028172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8028130:	4b4f      	ldr	r3, [pc, #316]	; (8028270 <HAL_RCC_OscConfig+0x2b0>)
 8028132:	2201      	movs	r2, #1
 8028134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028136:	f7fe f8c7 	bl	80262c8 <HAL_GetTick>
 802813a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802813c:	e008      	b.n	8028150 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802813e:	f7fe f8c3 	bl	80262c8 <HAL_GetTick>
 8028142:	4602      	mov	r2, r0
 8028144:	693b      	ldr	r3, [r7, #16]
 8028146:	1ad3      	subs	r3, r2, r3
 8028148:	2b02      	cmp	r3, #2
 802814a:	d901      	bls.n	8028150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 802814c:	2303      	movs	r3, #3
 802814e:	e19c      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8028150:	4b46      	ldr	r3, [pc, #280]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8028152:	681b      	ldr	r3, [r3, #0]
 8028154:	f003 0302 	and.w	r3, r3, #2
 8028158:	2b00      	cmp	r3, #0
 802815a:	d0f0      	beq.n	802813e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802815c:	4b43      	ldr	r3, [pc, #268]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 802815e:	681b      	ldr	r3, [r3, #0]
 8028160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8028164:	687b      	ldr	r3, [r7, #4]
 8028166:	691b      	ldr	r3, [r3, #16]
 8028168:	00db      	lsls	r3, r3, #3
 802816a:	4940      	ldr	r1, [pc, #256]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 802816c:	4313      	orrs	r3, r2
 802816e:	600b      	str	r3, [r1, #0]
 8028170:	e015      	b.n	802819e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8028172:	4b3f      	ldr	r3, [pc, #252]	; (8028270 <HAL_RCC_OscConfig+0x2b0>)
 8028174:	2200      	movs	r2, #0
 8028176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028178:	f7fe f8a6 	bl	80262c8 <HAL_GetTick>
 802817c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802817e:	e008      	b.n	8028192 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8028180:	f7fe f8a2 	bl	80262c8 <HAL_GetTick>
 8028184:	4602      	mov	r2, r0
 8028186:	693b      	ldr	r3, [r7, #16]
 8028188:	1ad3      	subs	r3, r2, r3
 802818a:	2b02      	cmp	r3, #2
 802818c:	d901      	bls.n	8028192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802818e:	2303      	movs	r3, #3
 8028190:	e17b      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8028192:	4b36      	ldr	r3, [pc, #216]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8028194:	681b      	ldr	r3, [r3, #0]
 8028196:	f003 0302 	and.w	r3, r3, #2
 802819a:	2b00      	cmp	r3, #0
 802819c:	d1f0      	bne.n	8028180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802819e:	687b      	ldr	r3, [r7, #4]
 80281a0:	681b      	ldr	r3, [r3, #0]
 80281a2:	f003 0308 	and.w	r3, r3, #8
 80281a6:	2b00      	cmp	r3, #0
 80281a8:	d030      	beq.n	802820c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80281aa:	687b      	ldr	r3, [r7, #4]
 80281ac:	695b      	ldr	r3, [r3, #20]
 80281ae:	2b00      	cmp	r3, #0
 80281b0:	d016      	beq.n	80281e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80281b2:	4b30      	ldr	r3, [pc, #192]	; (8028274 <HAL_RCC_OscConfig+0x2b4>)
 80281b4:	2201      	movs	r2, #1
 80281b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80281b8:	f7fe f886 	bl	80262c8 <HAL_GetTick>
 80281bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80281be:	e008      	b.n	80281d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80281c0:	f7fe f882 	bl	80262c8 <HAL_GetTick>
 80281c4:	4602      	mov	r2, r0
 80281c6:	693b      	ldr	r3, [r7, #16]
 80281c8:	1ad3      	subs	r3, r2, r3
 80281ca:	2b02      	cmp	r3, #2
 80281cc:	d901      	bls.n	80281d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80281ce:	2303      	movs	r3, #3
 80281d0:	e15b      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80281d2:	4b26      	ldr	r3, [pc, #152]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 80281d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80281d6:	f003 0302 	and.w	r3, r3, #2
 80281da:	2b00      	cmp	r3, #0
 80281dc:	d0f0      	beq.n	80281c0 <HAL_RCC_OscConfig+0x200>
 80281de:	e015      	b.n	802820c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80281e0:	4b24      	ldr	r3, [pc, #144]	; (8028274 <HAL_RCC_OscConfig+0x2b4>)
 80281e2:	2200      	movs	r2, #0
 80281e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80281e6:	f7fe f86f 	bl	80262c8 <HAL_GetTick>
 80281ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80281ec:	e008      	b.n	8028200 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80281ee:	f7fe f86b 	bl	80262c8 <HAL_GetTick>
 80281f2:	4602      	mov	r2, r0
 80281f4:	693b      	ldr	r3, [r7, #16]
 80281f6:	1ad3      	subs	r3, r2, r3
 80281f8:	2b02      	cmp	r3, #2
 80281fa:	d901      	bls.n	8028200 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80281fc:	2303      	movs	r3, #3
 80281fe:	e144      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8028200:	4b1a      	ldr	r3, [pc, #104]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8028202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028204:	f003 0302 	and.w	r3, r3, #2
 8028208:	2b00      	cmp	r3, #0
 802820a:	d1f0      	bne.n	80281ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802820c:	687b      	ldr	r3, [r7, #4]
 802820e:	681b      	ldr	r3, [r3, #0]
 8028210:	f003 0304 	and.w	r3, r3, #4
 8028214:	2b00      	cmp	r3, #0
 8028216:	f000 80a0 	beq.w	802835a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 802821a:	2300      	movs	r3, #0
 802821c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802821e:	4b13      	ldr	r3, [pc, #76]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8028220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028226:	2b00      	cmp	r3, #0
 8028228:	d10f      	bne.n	802824a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802822a:	2300      	movs	r3, #0
 802822c:	60bb      	str	r3, [r7, #8]
 802822e:	4b0f      	ldr	r3, [pc, #60]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8028230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028232:	4a0e      	ldr	r2, [pc, #56]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 8028234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028238:	6413      	str	r3, [r2, #64]	; 0x40
 802823a:	4b0c      	ldr	r3, [pc, #48]	; (802826c <HAL_RCC_OscConfig+0x2ac>)
 802823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802823e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028242:	60bb      	str	r3, [r7, #8]
 8028244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8028246:	2301      	movs	r3, #1
 8028248:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802824a:	4b0b      	ldr	r3, [pc, #44]	; (8028278 <HAL_RCC_OscConfig+0x2b8>)
 802824c:	681b      	ldr	r3, [r3, #0]
 802824e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028252:	2b00      	cmp	r3, #0
 8028254:	d121      	bne.n	802829a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8028256:	4b08      	ldr	r3, [pc, #32]	; (8028278 <HAL_RCC_OscConfig+0x2b8>)
 8028258:	681b      	ldr	r3, [r3, #0]
 802825a:	4a07      	ldr	r2, [pc, #28]	; (8028278 <HAL_RCC_OscConfig+0x2b8>)
 802825c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8028262:	f7fe f831 	bl	80262c8 <HAL_GetTick>
 8028266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028268:	e011      	b.n	802828e <HAL_RCC_OscConfig+0x2ce>
 802826a:	bf00      	nop
 802826c:	40023800 	.word	0x40023800
 8028270:	42470000 	.word	0x42470000
 8028274:	42470e80 	.word	0x42470e80
 8028278:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802827c:	f7fe f824 	bl	80262c8 <HAL_GetTick>
 8028280:	4602      	mov	r2, r0
 8028282:	693b      	ldr	r3, [r7, #16]
 8028284:	1ad3      	subs	r3, r2, r3
 8028286:	2b02      	cmp	r3, #2
 8028288:	d901      	bls.n	802828e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 802828a:	2303      	movs	r3, #3
 802828c:	e0fd      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802828e:	4b81      	ldr	r3, [pc, #516]	; (8028494 <HAL_RCC_OscConfig+0x4d4>)
 8028290:	681b      	ldr	r3, [r3, #0]
 8028292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028296:	2b00      	cmp	r3, #0
 8028298:	d0f0      	beq.n	802827c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802829a:	687b      	ldr	r3, [r7, #4]
 802829c:	689b      	ldr	r3, [r3, #8]
 802829e:	2b01      	cmp	r3, #1
 80282a0:	d106      	bne.n	80282b0 <HAL_RCC_OscConfig+0x2f0>
 80282a2:	4b7d      	ldr	r3, [pc, #500]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 80282a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80282a6:	4a7c      	ldr	r2, [pc, #496]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 80282a8:	f043 0301 	orr.w	r3, r3, #1
 80282ac:	6713      	str	r3, [r2, #112]	; 0x70
 80282ae:	e01c      	b.n	80282ea <HAL_RCC_OscConfig+0x32a>
 80282b0:	687b      	ldr	r3, [r7, #4]
 80282b2:	689b      	ldr	r3, [r3, #8]
 80282b4:	2b05      	cmp	r3, #5
 80282b6:	d10c      	bne.n	80282d2 <HAL_RCC_OscConfig+0x312>
 80282b8:	4b77      	ldr	r3, [pc, #476]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 80282ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80282bc:	4a76      	ldr	r2, [pc, #472]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 80282be:	f043 0304 	orr.w	r3, r3, #4
 80282c2:	6713      	str	r3, [r2, #112]	; 0x70
 80282c4:	4b74      	ldr	r3, [pc, #464]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 80282c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80282c8:	4a73      	ldr	r2, [pc, #460]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 80282ca:	f043 0301 	orr.w	r3, r3, #1
 80282ce:	6713      	str	r3, [r2, #112]	; 0x70
 80282d0:	e00b      	b.n	80282ea <HAL_RCC_OscConfig+0x32a>
 80282d2:	4b71      	ldr	r3, [pc, #452]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 80282d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80282d6:	4a70      	ldr	r2, [pc, #448]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 80282d8:	f023 0301 	bic.w	r3, r3, #1
 80282dc:	6713      	str	r3, [r2, #112]	; 0x70
 80282de:	4b6e      	ldr	r3, [pc, #440]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 80282e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80282e2:	4a6d      	ldr	r2, [pc, #436]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 80282e4:	f023 0304 	bic.w	r3, r3, #4
 80282e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80282ea:	687b      	ldr	r3, [r7, #4]
 80282ec:	689b      	ldr	r3, [r3, #8]
 80282ee:	2b00      	cmp	r3, #0
 80282f0:	d015      	beq.n	802831e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80282f2:	f7fd ffe9 	bl	80262c8 <HAL_GetTick>
 80282f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80282f8:	e00a      	b.n	8028310 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80282fa:	f7fd ffe5 	bl	80262c8 <HAL_GetTick>
 80282fe:	4602      	mov	r2, r0
 8028300:	693b      	ldr	r3, [r7, #16]
 8028302:	1ad3      	subs	r3, r2, r3
 8028304:	f241 3288 	movw	r2, #5000	; 0x1388
 8028308:	4293      	cmp	r3, r2
 802830a:	d901      	bls.n	8028310 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 802830c:	2303      	movs	r3, #3
 802830e:	e0bc      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028310:	4b61      	ldr	r3, [pc, #388]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 8028312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028314:	f003 0302 	and.w	r3, r3, #2
 8028318:	2b00      	cmp	r3, #0
 802831a:	d0ee      	beq.n	80282fa <HAL_RCC_OscConfig+0x33a>
 802831c:	e014      	b.n	8028348 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802831e:	f7fd ffd3 	bl	80262c8 <HAL_GetTick>
 8028322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8028324:	e00a      	b.n	802833c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8028326:	f7fd ffcf 	bl	80262c8 <HAL_GetTick>
 802832a:	4602      	mov	r2, r0
 802832c:	693b      	ldr	r3, [r7, #16]
 802832e:	1ad3      	subs	r3, r2, r3
 8028330:	f241 3288 	movw	r2, #5000	; 0x1388
 8028334:	4293      	cmp	r3, r2
 8028336:	d901      	bls.n	802833c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8028338:	2303      	movs	r3, #3
 802833a:	e0a6      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802833c:	4b56      	ldr	r3, [pc, #344]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 802833e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028340:	f003 0302 	and.w	r3, r3, #2
 8028344:	2b00      	cmp	r3, #0
 8028346:	d1ee      	bne.n	8028326 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8028348:	7dfb      	ldrb	r3, [r7, #23]
 802834a:	2b01      	cmp	r3, #1
 802834c:	d105      	bne.n	802835a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802834e:	4b52      	ldr	r3, [pc, #328]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 8028350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028352:	4a51      	ldr	r2, [pc, #324]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 8028354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8028358:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802835a:	687b      	ldr	r3, [r7, #4]
 802835c:	699b      	ldr	r3, [r3, #24]
 802835e:	2b00      	cmp	r3, #0
 8028360:	f000 8092 	beq.w	8028488 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8028364:	4b4c      	ldr	r3, [pc, #304]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 8028366:	689b      	ldr	r3, [r3, #8]
 8028368:	f003 030c 	and.w	r3, r3, #12
 802836c:	2b08      	cmp	r3, #8
 802836e:	d05c      	beq.n	802842a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8028370:	687b      	ldr	r3, [r7, #4]
 8028372:	699b      	ldr	r3, [r3, #24]
 8028374:	2b02      	cmp	r3, #2
 8028376:	d141      	bne.n	80283fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8028378:	4b48      	ldr	r3, [pc, #288]	; (802849c <HAL_RCC_OscConfig+0x4dc>)
 802837a:	2200      	movs	r2, #0
 802837c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802837e:	f7fd ffa3 	bl	80262c8 <HAL_GetTick>
 8028382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028384:	e008      	b.n	8028398 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028386:	f7fd ff9f 	bl	80262c8 <HAL_GetTick>
 802838a:	4602      	mov	r2, r0
 802838c:	693b      	ldr	r3, [r7, #16]
 802838e:	1ad3      	subs	r3, r2, r3
 8028390:	2b02      	cmp	r3, #2
 8028392:	d901      	bls.n	8028398 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8028394:	2303      	movs	r3, #3
 8028396:	e078      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028398:	4b3f      	ldr	r3, [pc, #252]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 802839a:	681b      	ldr	r3, [r3, #0]
 802839c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80283a0:	2b00      	cmp	r3, #0
 80283a2:	d1f0      	bne.n	8028386 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80283a4:	687b      	ldr	r3, [r7, #4]
 80283a6:	69da      	ldr	r2, [r3, #28]
 80283a8:	687b      	ldr	r3, [r7, #4]
 80283aa:	6a1b      	ldr	r3, [r3, #32]
 80283ac:	431a      	orrs	r2, r3
 80283ae:	687b      	ldr	r3, [r7, #4]
 80283b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80283b2:	019b      	lsls	r3, r3, #6
 80283b4:	431a      	orrs	r2, r3
 80283b6:	687b      	ldr	r3, [r7, #4]
 80283b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80283ba:	085b      	lsrs	r3, r3, #1
 80283bc:	3b01      	subs	r3, #1
 80283be:	041b      	lsls	r3, r3, #16
 80283c0:	431a      	orrs	r2, r3
 80283c2:	687b      	ldr	r3, [r7, #4]
 80283c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80283c6:	061b      	lsls	r3, r3, #24
 80283c8:	4933      	ldr	r1, [pc, #204]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 80283ca:	4313      	orrs	r3, r2
 80283cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80283ce:	4b33      	ldr	r3, [pc, #204]	; (802849c <HAL_RCC_OscConfig+0x4dc>)
 80283d0:	2201      	movs	r2, #1
 80283d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80283d4:	f7fd ff78 	bl	80262c8 <HAL_GetTick>
 80283d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80283da:	e008      	b.n	80283ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80283dc:	f7fd ff74 	bl	80262c8 <HAL_GetTick>
 80283e0:	4602      	mov	r2, r0
 80283e2:	693b      	ldr	r3, [r7, #16]
 80283e4:	1ad3      	subs	r3, r2, r3
 80283e6:	2b02      	cmp	r3, #2
 80283e8:	d901      	bls.n	80283ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80283ea:	2303      	movs	r3, #3
 80283ec:	e04d      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80283ee:	4b2a      	ldr	r3, [pc, #168]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 80283f0:	681b      	ldr	r3, [r3, #0]
 80283f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80283f6:	2b00      	cmp	r3, #0
 80283f8:	d0f0      	beq.n	80283dc <HAL_RCC_OscConfig+0x41c>
 80283fa:	e045      	b.n	8028488 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80283fc:	4b27      	ldr	r3, [pc, #156]	; (802849c <HAL_RCC_OscConfig+0x4dc>)
 80283fe:	2200      	movs	r2, #0
 8028400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028402:	f7fd ff61 	bl	80262c8 <HAL_GetTick>
 8028406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028408:	e008      	b.n	802841c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802840a:	f7fd ff5d 	bl	80262c8 <HAL_GetTick>
 802840e:	4602      	mov	r2, r0
 8028410:	693b      	ldr	r3, [r7, #16]
 8028412:	1ad3      	subs	r3, r2, r3
 8028414:	2b02      	cmp	r3, #2
 8028416:	d901      	bls.n	802841c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8028418:	2303      	movs	r3, #3
 802841a:	e036      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802841c:	4b1e      	ldr	r3, [pc, #120]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 802841e:	681b      	ldr	r3, [r3, #0]
 8028420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028424:	2b00      	cmp	r3, #0
 8028426:	d1f0      	bne.n	802840a <HAL_RCC_OscConfig+0x44a>
 8028428:	e02e      	b.n	8028488 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802842a:	687b      	ldr	r3, [r7, #4]
 802842c:	699b      	ldr	r3, [r3, #24]
 802842e:	2b01      	cmp	r3, #1
 8028430:	d101      	bne.n	8028436 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8028432:	2301      	movs	r3, #1
 8028434:	e029      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8028436:	4b18      	ldr	r3, [pc, #96]	; (8028498 <HAL_RCC_OscConfig+0x4d8>)
 8028438:	685b      	ldr	r3, [r3, #4]
 802843a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802843c:	68fb      	ldr	r3, [r7, #12]
 802843e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8028442:	687b      	ldr	r3, [r7, #4]
 8028444:	69db      	ldr	r3, [r3, #28]
 8028446:	429a      	cmp	r2, r3
 8028448:	d11c      	bne.n	8028484 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 802844a:	68fb      	ldr	r3, [r7, #12]
 802844c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8028450:	687b      	ldr	r3, [r7, #4]
 8028452:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8028454:	429a      	cmp	r2, r3
 8028456:	d115      	bne.n	8028484 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8028458:	68fa      	ldr	r2, [r7, #12]
 802845a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 802845e:	4013      	ands	r3, r2
 8028460:	687a      	ldr	r2, [r7, #4]
 8028462:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8028464:	4293      	cmp	r3, r2
 8028466:	d10d      	bne.n	8028484 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8028468:	68fb      	ldr	r3, [r7, #12]
 802846a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 802846e:	687b      	ldr	r3, [r7, #4]
 8028470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8028472:	429a      	cmp	r2, r3
 8028474:	d106      	bne.n	8028484 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8028476:	68fb      	ldr	r3, [r7, #12]
 8028478:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 802847c:	687b      	ldr	r3, [r7, #4]
 802847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8028480:	429a      	cmp	r2, r3
 8028482:	d001      	beq.n	8028488 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8028484:	2301      	movs	r3, #1
 8028486:	e000      	b.n	802848a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8028488:	2300      	movs	r3, #0
}
 802848a:	4618      	mov	r0, r3
 802848c:	3718      	adds	r7, #24
 802848e:	46bd      	mov	sp, r7
 8028490:	bd80      	pop	{r7, pc}
 8028492:	bf00      	nop
 8028494:	40007000 	.word	0x40007000
 8028498:	40023800 	.word	0x40023800
 802849c:	42470060 	.word	0x42470060

080284a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80284a0:	b580      	push	{r7, lr}
 80284a2:	b084      	sub	sp, #16
 80284a4:	af00      	add	r7, sp, #0
 80284a6:	6078      	str	r0, [r7, #4]
 80284a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80284aa:	687b      	ldr	r3, [r7, #4]
 80284ac:	2b00      	cmp	r3, #0
 80284ae:	d101      	bne.n	80284b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80284b0:	2301      	movs	r3, #1
 80284b2:	e0cc      	b.n	802864e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80284b4:	4b68      	ldr	r3, [pc, #416]	; (8028658 <HAL_RCC_ClockConfig+0x1b8>)
 80284b6:	681b      	ldr	r3, [r3, #0]
 80284b8:	f003 030f 	and.w	r3, r3, #15
 80284bc:	683a      	ldr	r2, [r7, #0]
 80284be:	429a      	cmp	r2, r3
 80284c0:	d90c      	bls.n	80284dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80284c2:	4b65      	ldr	r3, [pc, #404]	; (8028658 <HAL_RCC_ClockConfig+0x1b8>)
 80284c4:	683a      	ldr	r2, [r7, #0]
 80284c6:	b2d2      	uxtb	r2, r2
 80284c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80284ca:	4b63      	ldr	r3, [pc, #396]	; (8028658 <HAL_RCC_ClockConfig+0x1b8>)
 80284cc:	681b      	ldr	r3, [r3, #0]
 80284ce:	f003 030f 	and.w	r3, r3, #15
 80284d2:	683a      	ldr	r2, [r7, #0]
 80284d4:	429a      	cmp	r2, r3
 80284d6:	d001      	beq.n	80284dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80284d8:	2301      	movs	r3, #1
 80284da:	e0b8      	b.n	802864e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80284dc:	687b      	ldr	r3, [r7, #4]
 80284de:	681b      	ldr	r3, [r3, #0]
 80284e0:	f003 0302 	and.w	r3, r3, #2
 80284e4:	2b00      	cmp	r3, #0
 80284e6:	d020      	beq.n	802852a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80284e8:	687b      	ldr	r3, [r7, #4]
 80284ea:	681b      	ldr	r3, [r3, #0]
 80284ec:	f003 0304 	and.w	r3, r3, #4
 80284f0:	2b00      	cmp	r3, #0
 80284f2:	d005      	beq.n	8028500 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80284f4:	4b59      	ldr	r3, [pc, #356]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 80284f6:	689b      	ldr	r3, [r3, #8]
 80284f8:	4a58      	ldr	r2, [pc, #352]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 80284fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80284fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028500:	687b      	ldr	r3, [r7, #4]
 8028502:	681b      	ldr	r3, [r3, #0]
 8028504:	f003 0308 	and.w	r3, r3, #8
 8028508:	2b00      	cmp	r3, #0
 802850a:	d005      	beq.n	8028518 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802850c:	4b53      	ldr	r3, [pc, #332]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 802850e:	689b      	ldr	r3, [r3, #8]
 8028510:	4a52      	ldr	r2, [pc, #328]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 8028512:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8028516:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8028518:	4b50      	ldr	r3, [pc, #320]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 802851a:	689b      	ldr	r3, [r3, #8]
 802851c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8028520:	687b      	ldr	r3, [r7, #4]
 8028522:	689b      	ldr	r3, [r3, #8]
 8028524:	494d      	ldr	r1, [pc, #308]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 8028526:	4313      	orrs	r3, r2
 8028528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802852a:	687b      	ldr	r3, [r7, #4]
 802852c:	681b      	ldr	r3, [r3, #0]
 802852e:	f003 0301 	and.w	r3, r3, #1
 8028532:	2b00      	cmp	r3, #0
 8028534:	d044      	beq.n	80285c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8028536:	687b      	ldr	r3, [r7, #4]
 8028538:	685b      	ldr	r3, [r3, #4]
 802853a:	2b01      	cmp	r3, #1
 802853c:	d107      	bne.n	802854e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802853e:	4b47      	ldr	r3, [pc, #284]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 8028540:	681b      	ldr	r3, [r3, #0]
 8028542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028546:	2b00      	cmp	r3, #0
 8028548:	d119      	bne.n	802857e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802854a:	2301      	movs	r3, #1
 802854c:	e07f      	b.n	802864e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802854e:	687b      	ldr	r3, [r7, #4]
 8028550:	685b      	ldr	r3, [r3, #4]
 8028552:	2b02      	cmp	r3, #2
 8028554:	d003      	beq.n	802855e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8028556:	687b      	ldr	r3, [r7, #4]
 8028558:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802855a:	2b03      	cmp	r3, #3
 802855c:	d107      	bne.n	802856e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802855e:	4b3f      	ldr	r3, [pc, #252]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 8028560:	681b      	ldr	r3, [r3, #0]
 8028562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028566:	2b00      	cmp	r3, #0
 8028568:	d109      	bne.n	802857e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802856a:	2301      	movs	r3, #1
 802856c:	e06f      	b.n	802864e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802856e:	4b3b      	ldr	r3, [pc, #236]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 8028570:	681b      	ldr	r3, [r3, #0]
 8028572:	f003 0302 	and.w	r3, r3, #2
 8028576:	2b00      	cmp	r3, #0
 8028578:	d101      	bne.n	802857e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802857a:	2301      	movs	r3, #1
 802857c:	e067      	b.n	802864e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802857e:	4b37      	ldr	r3, [pc, #220]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 8028580:	689b      	ldr	r3, [r3, #8]
 8028582:	f023 0203 	bic.w	r2, r3, #3
 8028586:	687b      	ldr	r3, [r7, #4]
 8028588:	685b      	ldr	r3, [r3, #4]
 802858a:	4934      	ldr	r1, [pc, #208]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 802858c:	4313      	orrs	r3, r2
 802858e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8028590:	f7fd fe9a 	bl	80262c8 <HAL_GetTick>
 8028594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028596:	e00a      	b.n	80285ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8028598:	f7fd fe96 	bl	80262c8 <HAL_GetTick>
 802859c:	4602      	mov	r2, r0
 802859e:	68fb      	ldr	r3, [r7, #12]
 80285a0:	1ad3      	subs	r3, r2, r3
 80285a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80285a6:	4293      	cmp	r3, r2
 80285a8:	d901      	bls.n	80285ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80285aa:	2303      	movs	r3, #3
 80285ac:	e04f      	b.n	802864e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80285ae:	4b2b      	ldr	r3, [pc, #172]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 80285b0:	689b      	ldr	r3, [r3, #8]
 80285b2:	f003 020c 	and.w	r2, r3, #12
 80285b6:	687b      	ldr	r3, [r7, #4]
 80285b8:	685b      	ldr	r3, [r3, #4]
 80285ba:	009b      	lsls	r3, r3, #2
 80285bc:	429a      	cmp	r2, r3
 80285be:	d1eb      	bne.n	8028598 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80285c0:	4b25      	ldr	r3, [pc, #148]	; (8028658 <HAL_RCC_ClockConfig+0x1b8>)
 80285c2:	681b      	ldr	r3, [r3, #0]
 80285c4:	f003 030f 	and.w	r3, r3, #15
 80285c8:	683a      	ldr	r2, [r7, #0]
 80285ca:	429a      	cmp	r2, r3
 80285cc:	d20c      	bcs.n	80285e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80285ce:	4b22      	ldr	r3, [pc, #136]	; (8028658 <HAL_RCC_ClockConfig+0x1b8>)
 80285d0:	683a      	ldr	r2, [r7, #0]
 80285d2:	b2d2      	uxtb	r2, r2
 80285d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80285d6:	4b20      	ldr	r3, [pc, #128]	; (8028658 <HAL_RCC_ClockConfig+0x1b8>)
 80285d8:	681b      	ldr	r3, [r3, #0]
 80285da:	f003 030f 	and.w	r3, r3, #15
 80285de:	683a      	ldr	r2, [r7, #0]
 80285e0:	429a      	cmp	r2, r3
 80285e2:	d001      	beq.n	80285e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80285e4:	2301      	movs	r3, #1
 80285e6:	e032      	b.n	802864e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80285e8:	687b      	ldr	r3, [r7, #4]
 80285ea:	681b      	ldr	r3, [r3, #0]
 80285ec:	f003 0304 	and.w	r3, r3, #4
 80285f0:	2b00      	cmp	r3, #0
 80285f2:	d008      	beq.n	8028606 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80285f4:	4b19      	ldr	r3, [pc, #100]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 80285f6:	689b      	ldr	r3, [r3, #8]
 80285f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80285fc:	687b      	ldr	r3, [r7, #4]
 80285fe:	68db      	ldr	r3, [r3, #12]
 8028600:	4916      	ldr	r1, [pc, #88]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 8028602:	4313      	orrs	r3, r2
 8028604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028606:	687b      	ldr	r3, [r7, #4]
 8028608:	681b      	ldr	r3, [r3, #0]
 802860a:	f003 0308 	and.w	r3, r3, #8
 802860e:	2b00      	cmp	r3, #0
 8028610:	d009      	beq.n	8028626 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8028612:	4b12      	ldr	r3, [pc, #72]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 8028614:	689b      	ldr	r3, [r3, #8]
 8028616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802861a:	687b      	ldr	r3, [r7, #4]
 802861c:	691b      	ldr	r3, [r3, #16]
 802861e:	00db      	lsls	r3, r3, #3
 8028620:	490e      	ldr	r1, [pc, #56]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 8028622:	4313      	orrs	r3, r2
 8028624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8028626:	f000 f821 	bl	802866c <HAL_RCC_GetSysClockFreq>
 802862a:	4601      	mov	r1, r0
 802862c:	4b0b      	ldr	r3, [pc, #44]	; (802865c <HAL_RCC_ClockConfig+0x1bc>)
 802862e:	689b      	ldr	r3, [r3, #8]
 8028630:	091b      	lsrs	r3, r3, #4
 8028632:	f003 030f 	and.w	r3, r3, #15
 8028636:	4a0a      	ldr	r2, [pc, #40]	; (8028660 <HAL_RCC_ClockConfig+0x1c0>)
 8028638:	5cd3      	ldrb	r3, [r2, r3]
 802863a:	fa21 f303 	lsr.w	r3, r1, r3
 802863e:	4a09      	ldr	r2, [pc, #36]	; (8028664 <HAL_RCC_ClockConfig+0x1c4>)
 8028640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8028642:	4b09      	ldr	r3, [pc, #36]	; (8028668 <HAL_RCC_ClockConfig+0x1c8>)
 8028644:	681b      	ldr	r3, [r3, #0]
 8028646:	4618      	mov	r0, r3
 8028648:	f7fd fdfa 	bl	8026240 <HAL_InitTick>

  return HAL_OK;
 802864c:	2300      	movs	r3, #0
}
 802864e:	4618      	mov	r0, r3
 8028650:	3710      	adds	r7, #16
 8028652:	46bd      	mov	sp, r7
 8028654:	bd80      	pop	{r7, pc}
 8028656:	bf00      	nop
 8028658:	40023c00 	.word	0x40023c00
 802865c:	40023800 	.word	0x40023800
 8028660:	0802a3a4 	.word	0x0802a3a4
 8028664:	20000010 	.word	0x20000010
 8028668:	20000014 	.word	0x20000014

0802866c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802866c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802866e:	b085      	sub	sp, #20
 8028670:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8028672:	2300      	movs	r3, #0
 8028674:	607b      	str	r3, [r7, #4]
 8028676:	2300      	movs	r3, #0
 8028678:	60fb      	str	r3, [r7, #12]
 802867a:	2300      	movs	r3, #0
 802867c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 802867e:	2300      	movs	r3, #0
 8028680:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8028682:	4b50      	ldr	r3, [pc, #320]	; (80287c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8028684:	689b      	ldr	r3, [r3, #8]
 8028686:	f003 030c 	and.w	r3, r3, #12
 802868a:	2b04      	cmp	r3, #4
 802868c:	d007      	beq.n	802869e <HAL_RCC_GetSysClockFreq+0x32>
 802868e:	2b08      	cmp	r3, #8
 8028690:	d008      	beq.n	80286a4 <HAL_RCC_GetSysClockFreq+0x38>
 8028692:	2b00      	cmp	r3, #0
 8028694:	f040 808d 	bne.w	80287b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8028698:	4b4b      	ldr	r3, [pc, #300]	; (80287c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 802869a:	60bb      	str	r3, [r7, #8]
       break;
 802869c:	e08c      	b.n	80287b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802869e:	4b4b      	ldr	r3, [pc, #300]	; (80287cc <HAL_RCC_GetSysClockFreq+0x160>)
 80286a0:	60bb      	str	r3, [r7, #8]
      break;
 80286a2:	e089      	b.n	80287b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80286a4:	4b47      	ldr	r3, [pc, #284]	; (80287c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80286a6:	685b      	ldr	r3, [r3, #4]
 80286a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80286ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80286ae:	4b45      	ldr	r3, [pc, #276]	; (80287c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80286b0:	685b      	ldr	r3, [r3, #4]
 80286b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80286b6:	2b00      	cmp	r3, #0
 80286b8:	d023      	beq.n	8028702 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80286ba:	4b42      	ldr	r3, [pc, #264]	; (80287c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80286bc:	685b      	ldr	r3, [r3, #4]
 80286be:	099b      	lsrs	r3, r3, #6
 80286c0:	f04f 0400 	mov.w	r4, #0
 80286c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80286c8:	f04f 0200 	mov.w	r2, #0
 80286cc:	ea03 0501 	and.w	r5, r3, r1
 80286d0:	ea04 0602 	and.w	r6, r4, r2
 80286d4:	4a3d      	ldr	r2, [pc, #244]	; (80287cc <HAL_RCC_GetSysClockFreq+0x160>)
 80286d6:	fb02 f106 	mul.w	r1, r2, r6
 80286da:	2200      	movs	r2, #0
 80286dc:	fb02 f205 	mul.w	r2, r2, r5
 80286e0:	440a      	add	r2, r1
 80286e2:	493a      	ldr	r1, [pc, #232]	; (80287cc <HAL_RCC_GetSysClockFreq+0x160>)
 80286e4:	fba5 0101 	umull	r0, r1, r5, r1
 80286e8:	1853      	adds	r3, r2, r1
 80286ea:	4619      	mov	r1, r3
 80286ec:	687b      	ldr	r3, [r7, #4]
 80286ee:	f04f 0400 	mov.w	r4, #0
 80286f2:	461a      	mov	r2, r3
 80286f4:	4623      	mov	r3, r4
 80286f6:	f7f8 f949 	bl	802098c <__aeabi_uldivmod>
 80286fa:	4603      	mov	r3, r0
 80286fc:	460c      	mov	r4, r1
 80286fe:	60fb      	str	r3, [r7, #12]
 8028700:	e049      	b.n	8028796 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8028702:	4b30      	ldr	r3, [pc, #192]	; (80287c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8028704:	685b      	ldr	r3, [r3, #4]
 8028706:	099b      	lsrs	r3, r3, #6
 8028708:	f04f 0400 	mov.w	r4, #0
 802870c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8028710:	f04f 0200 	mov.w	r2, #0
 8028714:	ea03 0501 	and.w	r5, r3, r1
 8028718:	ea04 0602 	and.w	r6, r4, r2
 802871c:	4629      	mov	r1, r5
 802871e:	4632      	mov	r2, r6
 8028720:	f04f 0300 	mov.w	r3, #0
 8028724:	f04f 0400 	mov.w	r4, #0
 8028728:	0154      	lsls	r4, r2, #5
 802872a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 802872e:	014b      	lsls	r3, r1, #5
 8028730:	4619      	mov	r1, r3
 8028732:	4622      	mov	r2, r4
 8028734:	1b49      	subs	r1, r1, r5
 8028736:	eb62 0206 	sbc.w	r2, r2, r6
 802873a:	f04f 0300 	mov.w	r3, #0
 802873e:	f04f 0400 	mov.w	r4, #0
 8028742:	0194      	lsls	r4, r2, #6
 8028744:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8028748:	018b      	lsls	r3, r1, #6
 802874a:	1a5b      	subs	r3, r3, r1
 802874c:	eb64 0402 	sbc.w	r4, r4, r2
 8028750:	f04f 0100 	mov.w	r1, #0
 8028754:	f04f 0200 	mov.w	r2, #0
 8028758:	00e2      	lsls	r2, r4, #3
 802875a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 802875e:	00d9      	lsls	r1, r3, #3
 8028760:	460b      	mov	r3, r1
 8028762:	4614      	mov	r4, r2
 8028764:	195b      	adds	r3, r3, r5
 8028766:	eb44 0406 	adc.w	r4, r4, r6
 802876a:	f04f 0100 	mov.w	r1, #0
 802876e:	f04f 0200 	mov.w	r2, #0
 8028772:	02a2      	lsls	r2, r4, #10
 8028774:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8028778:	0299      	lsls	r1, r3, #10
 802877a:	460b      	mov	r3, r1
 802877c:	4614      	mov	r4, r2
 802877e:	4618      	mov	r0, r3
 8028780:	4621      	mov	r1, r4
 8028782:	687b      	ldr	r3, [r7, #4]
 8028784:	f04f 0400 	mov.w	r4, #0
 8028788:	461a      	mov	r2, r3
 802878a:	4623      	mov	r3, r4
 802878c:	f7f8 f8fe 	bl	802098c <__aeabi_uldivmod>
 8028790:	4603      	mov	r3, r0
 8028792:	460c      	mov	r4, r1
 8028794:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8028796:	4b0b      	ldr	r3, [pc, #44]	; (80287c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8028798:	685b      	ldr	r3, [r3, #4]
 802879a:	0c1b      	lsrs	r3, r3, #16
 802879c:	f003 0303 	and.w	r3, r3, #3
 80287a0:	3301      	adds	r3, #1
 80287a2:	005b      	lsls	r3, r3, #1
 80287a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80287a6:	68fa      	ldr	r2, [r7, #12]
 80287a8:	683b      	ldr	r3, [r7, #0]
 80287aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80287ae:	60bb      	str	r3, [r7, #8]
      break;
 80287b0:	e002      	b.n	80287b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80287b2:	4b05      	ldr	r3, [pc, #20]	; (80287c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80287b4:	60bb      	str	r3, [r7, #8]
      break;
 80287b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80287b8:	68bb      	ldr	r3, [r7, #8]
}
 80287ba:	4618      	mov	r0, r3
 80287bc:	3714      	adds	r7, #20
 80287be:	46bd      	mov	sp, r7
 80287c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80287c2:	bf00      	nop
 80287c4:	40023800 	.word	0x40023800
 80287c8:	00f42400 	.word	0x00f42400
 80287cc:	00b71b00 	.word	0x00b71b00

080287d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80287d0:	b480      	push	{r7}
 80287d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80287d4:	4b03      	ldr	r3, [pc, #12]	; (80287e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80287d6:	681b      	ldr	r3, [r3, #0]
}
 80287d8:	4618      	mov	r0, r3
 80287da:	46bd      	mov	sp, r7
 80287dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287e0:	4770      	bx	lr
 80287e2:	bf00      	nop
 80287e4:	20000010 	.word	0x20000010

080287e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80287e8:	b580      	push	{r7, lr}
 80287ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80287ec:	f7ff fff0 	bl	80287d0 <HAL_RCC_GetHCLKFreq>
 80287f0:	4601      	mov	r1, r0
 80287f2:	4b05      	ldr	r3, [pc, #20]	; (8028808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80287f4:	689b      	ldr	r3, [r3, #8]
 80287f6:	0a9b      	lsrs	r3, r3, #10
 80287f8:	f003 0307 	and.w	r3, r3, #7
 80287fc:	4a03      	ldr	r2, [pc, #12]	; (802880c <HAL_RCC_GetPCLK1Freq+0x24>)
 80287fe:	5cd3      	ldrb	r3, [r2, r3]
 8028800:	fa21 f303 	lsr.w	r3, r1, r3
}
 8028804:	4618      	mov	r0, r3
 8028806:	bd80      	pop	{r7, pc}
 8028808:	40023800 	.word	0x40023800
 802880c:	0802a3b4 	.word	0x0802a3b4

08028810 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8028810:	b580      	push	{r7, lr}
 8028812:	b082      	sub	sp, #8
 8028814:	af00      	add	r7, sp, #0
 8028816:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8028818:	687b      	ldr	r3, [r7, #4]
 802881a:	2b00      	cmp	r3, #0
 802881c:	d101      	bne.n	8028822 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802881e:	2301      	movs	r3, #1
 8028820:	e056      	b.n	80288d0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8028822:	687b      	ldr	r3, [r7, #4]
 8028824:	2200      	movs	r2, #0
 8028826:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8028828:	687b      	ldr	r3, [r7, #4]
 802882a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802882e:	b2db      	uxtb	r3, r3
 8028830:	2b00      	cmp	r3, #0
 8028832:	d106      	bne.n	8028842 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8028834:	687b      	ldr	r3, [r7, #4]
 8028836:	2200      	movs	r2, #0
 8028838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802883c:	6878      	ldr	r0, [r7, #4]
 802883e:	f7fb fef3 	bl	8024628 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8028842:	687b      	ldr	r3, [r7, #4]
 8028844:	2202      	movs	r2, #2
 8028846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802884a:	687b      	ldr	r3, [r7, #4]
 802884c:	681b      	ldr	r3, [r3, #0]
 802884e:	681a      	ldr	r2, [r3, #0]
 8028850:	687b      	ldr	r3, [r7, #4]
 8028852:	681b      	ldr	r3, [r3, #0]
 8028854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028858:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 802885a:	687b      	ldr	r3, [r7, #4]
 802885c:	685a      	ldr	r2, [r3, #4]
 802885e:	687b      	ldr	r3, [r7, #4]
 8028860:	689b      	ldr	r3, [r3, #8]
 8028862:	431a      	orrs	r2, r3
 8028864:	687b      	ldr	r3, [r7, #4]
 8028866:	68db      	ldr	r3, [r3, #12]
 8028868:	431a      	orrs	r2, r3
 802886a:	687b      	ldr	r3, [r7, #4]
 802886c:	691b      	ldr	r3, [r3, #16]
 802886e:	431a      	orrs	r2, r3
 8028870:	687b      	ldr	r3, [r7, #4]
 8028872:	695b      	ldr	r3, [r3, #20]
 8028874:	431a      	orrs	r2, r3
 8028876:	687b      	ldr	r3, [r7, #4]
 8028878:	699b      	ldr	r3, [r3, #24]
 802887a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802887e:	431a      	orrs	r2, r3
 8028880:	687b      	ldr	r3, [r7, #4]
 8028882:	69db      	ldr	r3, [r3, #28]
 8028884:	431a      	orrs	r2, r3
 8028886:	687b      	ldr	r3, [r7, #4]
 8028888:	6a1b      	ldr	r3, [r3, #32]
 802888a:	ea42 0103 	orr.w	r1, r2, r3
 802888e:	687b      	ldr	r3, [r7, #4]
 8028890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8028892:	687b      	ldr	r3, [r7, #4]
 8028894:	681b      	ldr	r3, [r3, #0]
 8028896:	430a      	orrs	r2, r1
 8028898:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 802889a:	687b      	ldr	r3, [r7, #4]
 802889c:	699b      	ldr	r3, [r3, #24]
 802889e:	0c1b      	lsrs	r3, r3, #16
 80288a0:	f003 0104 	and.w	r1, r3, #4
 80288a4:	687b      	ldr	r3, [r7, #4]
 80288a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80288a8:	687b      	ldr	r3, [r7, #4]
 80288aa:	681b      	ldr	r3, [r3, #0]
 80288ac:	430a      	orrs	r2, r1
 80288ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80288b0:	687b      	ldr	r3, [r7, #4]
 80288b2:	681b      	ldr	r3, [r3, #0]
 80288b4:	69da      	ldr	r2, [r3, #28]
 80288b6:	687b      	ldr	r3, [r7, #4]
 80288b8:	681b      	ldr	r3, [r3, #0]
 80288ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80288be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80288c0:	687b      	ldr	r3, [r7, #4]
 80288c2:	2200      	movs	r2, #0
 80288c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80288c6:	687b      	ldr	r3, [r7, #4]
 80288c8:	2201      	movs	r2, #1
 80288ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80288ce:	2300      	movs	r3, #0
}
 80288d0:	4618      	mov	r0, r3
 80288d2:	3708      	adds	r7, #8
 80288d4:	46bd      	mov	sp, r7
 80288d6:	bd80      	pop	{r7, pc}

080288d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80288d8:	b580      	push	{r7, lr}
 80288da:	b088      	sub	sp, #32
 80288dc:	af00      	add	r7, sp, #0
 80288de:	60f8      	str	r0, [r7, #12]
 80288e0:	60b9      	str	r1, [r7, #8]
 80288e2:	603b      	str	r3, [r7, #0]
 80288e4:	4613      	mov	r3, r2
 80288e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80288e8:	2300      	movs	r3, #0
 80288ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80288ec:	68fb      	ldr	r3, [r7, #12]
 80288ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80288f2:	2b01      	cmp	r3, #1
 80288f4:	d101      	bne.n	80288fa <HAL_SPI_Transmit+0x22>
 80288f6:	2302      	movs	r3, #2
 80288f8:	e11e      	b.n	8028b38 <HAL_SPI_Transmit+0x260>
 80288fa:	68fb      	ldr	r3, [r7, #12]
 80288fc:	2201      	movs	r2, #1
 80288fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028902:	f7fd fce1 	bl	80262c8 <HAL_GetTick>
 8028906:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8028908:	88fb      	ldrh	r3, [r7, #6]
 802890a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 802890c:	68fb      	ldr	r3, [r7, #12]
 802890e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028912:	b2db      	uxtb	r3, r3
 8028914:	2b01      	cmp	r3, #1
 8028916:	d002      	beq.n	802891e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8028918:	2302      	movs	r3, #2
 802891a:	77fb      	strb	r3, [r7, #31]
    goto error;
 802891c:	e103      	b.n	8028b26 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 802891e:	68bb      	ldr	r3, [r7, #8]
 8028920:	2b00      	cmp	r3, #0
 8028922:	d002      	beq.n	802892a <HAL_SPI_Transmit+0x52>
 8028924:	88fb      	ldrh	r3, [r7, #6]
 8028926:	2b00      	cmp	r3, #0
 8028928:	d102      	bne.n	8028930 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 802892a:	2301      	movs	r3, #1
 802892c:	77fb      	strb	r3, [r7, #31]
    goto error;
 802892e:	e0fa      	b.n	8028b26 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8028930:	68fb      	ldr	r3, [r7, #12]
 8028932:	2203      	movs	r2, #3
 8028934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028938:	68fb      	ldr	r3, [r7, #12]
 802893a:	2200      	movs	r2, #0
 802893c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 802893e:	68fb      	ldr	r3, [r7, #12]
 8028940:	68ba      	ldr	r2, [r7, #8]
 8028942:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8028944:	68fb      	ldr	r3, [r7, #12]
 8028946:	88fa      	ldrh	r2, [r7, #6]
 8028948:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802894a:	68fb      	ldr	r3, [r7, #12]
 802894c:	88fa      	ldrh	r2, [r7, #6]
 802894e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8028950:	68fb      	ldr	r3, [r7, #12]
 8028952:	2200      	movs	r2, #0
 8028954:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8028956:	68fb      	ldr	r3, [r7, #12]
 8028958:	2200      	movs	r2, #0
 802895a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 802895c:	68fb      	ldr	r3, [r7, #12]
 802895e:	2200      	movs	r2, #0
 8028960:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8028962:	68fb      	ldr	r3, [r7, #12]
 8028964:	2200      	movs	r2, #0
 8028966:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8028968:	68fb      	ldr	r3, [r7, #12]
 802896a:	2200      	movs	r2, #0
 802896c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802896e:	68fb      	ldr	r3, [r7, #12]
 8028970:	689b      	ldr	r3, [r3, #8]
 8028972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028976:	d107      	bne.n	8028988 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8028978:	68fb      	ldr	r3, [r7, #12]
 802897a:	681b      	ldr	r3, [r3, #0]
 802897c:	681a      	ldr	r2, [r3, #0]
 802897e:	68fb      	ldr	r3, [r7, #12]
 8028980:	681b      	ldr	r3, [r3, #0]
 8028982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8028986:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028988:	68fb      	ldr	r3, [r7, #12]
 802898a:	681b      	ldr	r3, [r3, #0]
 802898c:	681b      	ldr	r3, [r3, #0]
 802898e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028992:	2b40      	cmp	r3, #64	; 0x40
 8028994:	d007      	beq.n	80289a6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028996:	68fb      	ldr	r3, [r7, #12]
 8028998:	681b      	ldr	r3, [r3, #0]
 802899a:	681a      	ldr	r2, [r3, #0]
 802899c:	68fb      	ldr	r3, [r7, #12]
 802899e:	681b      	ldr	r3, [r3, #0]
 80289a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80289a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80289a6:	68fb      	ldr	r3, [r7, #12]
 80289a8:	68db      	ldr	r3, [r3, #12]
 80289aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80289ae:	d14b      	bne.n	8028a48 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80289b0:	68fb      	ldr	r3, [r7, #12]
 80289b2:	685b      	ldr	r3, [r3, #4]
 80289b4:	2b00      	cmp	r3, #0
 80289b6:	d002      	beq.n	80289be <HAL_SPI_Transmit+0xe6>
 80289b8:	8afb      	ldrh	r3, [r7, #22]
 80289ba:	2b01      	cmp	r3, #1
 80289bc:	d13e      	bne.n	8028a3c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80289be:	68fb      	ldr	r3, [r7, #12]
 80289c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289c2:	881a      	ldrh	r2, [r3, #0]
 80289c4:	68fb      	ldr	r3, [r7, #12]
 80289c6:	681b      	ldr	r3, [r3, #0]
 80289c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80289ca:	68fb      	ldr	r3, [r7, #12]
 80289cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289ce:	1c9a      	adds	r2, r3, #2
 80289d0:	68fb      	ldr	r3, [r7, #12]
 80289d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80289d4:	68fb      	ldr	r3, [r7, #12]
 80289d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80289d8:	b29b      	uxth	r3, r3
 80289da:	3b01      	subs	r3, #1
 80289dc:	b29a      	uxth	r2, r3
 80289de:	68fb      	ldr	r3, [r7, #12]
 80289e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80289e2:	e02b      	b.n	8028a3c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80289e4:	68fb      	ldr	r3, [r7, #12]
 80289e6:	681b      	ldr	r3, [r3, #0]
 80289e8:	689b      	ldr	r3, [r3, #8]
 80289ea:	f003 0302 	and.w	r3, r3, #2
 80289ee:	2b02      	cmp	r3, #2
 80289f0:	d112      	bne.n	8028a18 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80289f2:	68fb      	ldr	r3, [r7, #12]
 80289f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289f6:	881a      	ldrh	r2, [r3, #0]
 80289f8:	68fb      	ldr	r3, [r7, #12]
 80289fa:	681b      	ldr	r3, [r3, #0]
 80289fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80289fe:	68fb      	ldr	r3, [r7, #12]
 8028a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a02:	1c9a      	adds	r2, r3, #2
 8028a04:	68fb      	ldr	r3, [r7, #12]
 8028a06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028a08:	68fb      	ldr	r3, [r7, #12]
 8028a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028a0c:	b29b      	uxth	r3, r3
 8028a0e:	3b01      	subs	r3, #1
 8028a10:	b29a      	uxth	r2, r3
 8028a12:	68fb      	ldr	r3, [r7, #12]
 8028a14:	86da      	strh	r2, [r3, #54]	; 0x36
 8028a16:	e011      	b.n	8028a3c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028a18:	f7fd fc56 	bl	80262c8 <HAL_GetTick>
 8028a1c:	4602      	mov	r2, r0
 8028a1e:	69bb      	ldr	r3, [r7, #24]
 8028a20:	1ad3      	subs	r3, r2, r3
 8028a22:	683a      	ldr	r2, [r7, #0]
 8028a24:	429a      	cmp	r2, r3
 8028a26:	d803      	bhi.n	8028a30 <HAL_SPI_Transmit+0x158>
 8028a28:	683b      	ldr	r3, [r7, #0]
 8028a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028a2e:	d102      	bne.n	8028a36 <HAL_SPI_Transmit+0x15e>
 8028a30:	683b      	ldr	r3, [r7, #0]
 8028a32:	2b00      	cmp	r3, #0
 8028a34:	d102      	bne.n	8028a3c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8028a36:	2303      	movs	r3, #3
 8028a38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028a3a:	e074      	b.n	8028b26 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8028a3c:	68fb      	ldr	r3, [r7, #12]
 8028a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028a40:	b29b      	uxth	r3, r3
 8028a42:	2b00      	cmp	r3, #0
 8028a44:	d1ce      	bne.n	80289e4 <HAL_SPI_Transmit+0x10c>
 8028a46:	e04c      	b.n	8028ae2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028a48:	68fb      	ldr	r3, [r7, #12]
 8028a4a:	685b      	ldr	r3, [r3, #4]
 8028a4c:	2b00      	cmp	r3, #0
 8028a4e:	d002      	beq.n	8028a56 <HAL_SPI_Transmit+0x17e>
 8028a50:	8afb      	ldrh	r3, [r7, #22]
 8028a52:	2b01      	cmp	r3, #1
 8028a54:	d140      	bne.n	8028ad8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028a56:	68fb      	ldr	r3, [r7, #12]
 8028a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028a5a:	68fb      	ldr	r3, [r7, #12]
 8028a5c:	681b      	ldr	r3, [r3, #0]
 8028a5e:	330c      	adds	r3, #12
 8028a60:	7812      	ldrb	r2, [r2, #0]
 8028a62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028a64:	68fb      	ldr	r3, [r7, #12]
 8028a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a68:	1c5a      	adds	r2, r3, #1
 8028a6a:	68fb      	ldr	r3, [r7, #12]
 8028a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028a6e:	68fb      	ldr	r3, [r7, #12]
 8028a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028a72:	b29b      	uxth	r3, r3
 8028a74:	3b01      	subs	r3, #1
 8028a76:	b29a      	uxth	r2, r3
 8028a78:	68fb      	ldr	r3, [r7, #12]
 8028a7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8028a7c:	e02c      	b.n	8028ad8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028a7e:	68fb      	ldr	r3, [r7, #12]
 8028a80:	681b      	ldr	r3, [r3, #0]
 8028a82:	689b      	ldr	r3, [r3, #8]
 8028a84:	f003 0302 	and.w	r3, r3, #2
 8028a88:	2b02      	cmp	r3, #2
 8028a8a:	d113      	bne.n	8028ab4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028a8c:	68fb      	ldr	r3, [r7, #12]
 8028a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028a90:	68fb      	ldr	r3, [r7, #12]
 8028a92:	681b      	ldr	r3, [r3, #0]
 8028a94:	330c      	adds	r3, #12
 8028a96:	7812      	ldrb	r2, [r2, #0]
 8028a98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8028a9a:	68fb      	ldr	r3, [r7, #12]
 8028a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a9e:	1c5a      	adds	r2, r3, #1
 8028aa0:	68fb      	ldr	r3, [r7, #12]
 8028aa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028aa4:	68fb      	ldr	r3, [r7, #12]
 8028aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028aa8:	b29b      	uxth	r3, r3
 8028aaa:	3b01      	subs	r3, #1
 8028aac:	b29a      	uxth	r2, r3
 8028aae:	68fb      	ldr	r3, [r7, #12]
 8028ab0:	86da      	strh	r2, [r3, #54]	; 0x36
 8028ab2:	e011      	b.n	8028ad8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028ab4:	f7fd fc08 	bl	80262c8 <HAL_GetTick>
 8028ab8:	4602      	mov	r2, r0
 8028aba:	69bb      	ldr	r3, [r7, #24]
 8028abc:	1ad3      	subs	r3, r2, r3
 8028abe:	683a      	ldr	r2, [r7, #0]
 8028ac0:	429a      	cmp	r2, r3
 8028ac2:	d803      	bhi.n	8028acc <HAL_SPI_Transmit+0x1f4>
 8028ac4:	683b      	ldr	r3, [r7, #0]
 8028ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028aca:	d102      	bne.n	8028ad2 <HAL_SPI_Transmit+0x1fa>
 8028acc:	683b      	ldr	r3, [r7, #0]
 8028ace:	2b00      	cmp	r3, #0
 8028ad0:	d102      	bne.n	8028ad8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8028ad2:	2303      	movs	r3, #3
 8028ad4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028ad6:	e026      	b.n	8028b26 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8028ad8:	68fb      	ldr	r3, [r7, #12]
 8028ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028adc:	b29b      	uxth	r3, r3
 8028ade:	2b00      	cmp	r3, #0
 8028ae0:	d1cd      	bne.n	8028a7e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028ae2:	69ba      	ldr	r2, [r7, #24]
 8028ae4:	6839      	ldr	r1, [r7, #0]
 8028ae6:	68f8      	ldr	r0, [r7, #12]
 8028ae8:	f000 fba4 	bl	8029234 <SPI_EndRxTxTransaction>
 8028aec:	4603      	mov	r3, r0
 8028aee:	2b00      	cmp	r3, #0
 8028af0:	d002      	beq.n	8028af8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028af2:	68fb      	ldr	r3, [r7, #12]
 8028af4:	2220      	movs	r2, #32
 8028af6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028af8:	68fb      	ldr	r3, [r7, #12]
 8028afa:	689b      	ldr	r3, [r3, #8]
 8028afc:	2b00      	cmp	r3, #0
 8028afe:	d10a      	bne.n	8028b16 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028b00:	2300      	movs	r3, #0
 8028b02:	613b      	str	r3, [r7, #16]
 8028b04:	68fb      	ldr	r3, [r7, #12]
 8028b06:	681b      	ldr	r3, [r3, #0]
 8028b08:	68db      	ldr	r3, [r3, #12]
 8028b0a:	613b      	str	r3, [r7, #16]
 8028b0c:	68fb      	ldr	r3, [r7, #12]
 8028b0e:	681b      	ldr	r3, [r3, #0]
 8028b10:	689b      	ldr	r3, [r3, #8]
 8028b12:	613b      	str	r3, [r7, #16]
 8028b14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028b16:	68fb      	ldr	r3, [r7, #12]
 8028b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028b1a:	2b00      	cmp	r3, #0
 8028b1c:	d002      	beq.n	8028b24 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8028b1e:	2301      	movs	r3, #1
 8028b20:	77fb      	strb	r3, [r7, #31]
 8028b22:	e000      	b.n	8028b26 <HAL_SPI_Transmit+0x24e>
  }

error:
 8028b24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028b26:	68fb      	ldr	r3, [r7, #12]
 8028b28:	2201      	movs	r2, #1
 8028b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8028b2e:	68fb      	ldr	r3, [r7, #12]
 8028b30:	2200      	movs	r2, #0
 8028b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028b36:	7ffb      	ldrb	r3, [r7, #31]
}
 8028b38:	4618      	mov	r0, r3
 8028b3a:	3720      	adds	r7, #32
 8028b3c:	46bd      	mov	sp, r7
 8028b3e:	bd80      	pop	{r7, pc}

08028b40 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028b40:	b580      	push	{r7, lr}
 8028b42:	b088      	sub	sp, #32
 8028b44:	af02      	add	r7, sp, #8
 8028b46:	60f8      	str	r0, [r7, #12]
 8028b48:	60b9      	str	r1, [r7, #8]
 8028b4a:	603b      	str	r3, [r7, #0]
 8028b4c:	4613      	mov	r3, r2
 8028b4e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028b50:	2300      	movs	r3, #0
 8028b52:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8028b54:	68fb      	ldr	r3, [r7, #12]
 8028b56:	685b      	ldr	r3, [r3, #4]
 8028b58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028b5c:	d112      	bne.n	8028b84 <HAL_SPI_Receive+0x44>
 8028b5e:	68fb      	ldr	r3, [r7, #12]
 8028b60:	689b      	ldr	r3, [r3, #8]
 8028b62:	2b00      	cmp	r3, #0
 8028b64:	d10e      	bne.n	8028b84 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8028b66:	68fb      	ldr	r3, [r7, #12]
 8028b68:	2204      	movs	r2, #4
 8028b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8028b6e:	88fa      	ldrh	r2, [r7, #6]
 8028b70:	683b      	ldr	r3, [r7, #0]
 8028b72:	9300      	str	r3, [sp, #0]
 8028b74:	4613      	mov	r3, r2
 8028b76:	68ba      	ldr	r2, [r7, #8]
 8028b78:	68b9      	ldr	r1, [r7, #8]
 8028b7a:	68f8      	ldr	r0, [r7, #12]
 8028b7c:	f000 f8e9 	bl	8028d52 <HAL_SPI_TransmitReceive>
 8028b80:	4603      	mov	r3, r0
 8028b82:	e0e2      	b.n	8028d4a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028b84:	68fb      	ldr	r3, [r7, #12]
 8028b86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028b8a:	2b01      	cmp	r3, #1
 8028b8c:	d101      	bne.n	8028b92 <HAL_SPI_Receive+0x52>
 8028b8e:	2302      	movs	r3, #2
 8028b90:	e0db      	b.n	8028d4a <HAL_SPI_Receive+0x20a>
 8028b92:	68fb      	ldr	r3, [r7, #12]
 8028b94:	2201      	movs	r2, #1
 8028b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028b9a:	f7fd fb95 	bl	80262c8 <HAL_GetTick>
 8028b9e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028ba0:	68fb      	ldr	r3, [r7, #12]
 8028ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028ba6:	b2db      	uxtb	r3, r3
 8028ba8:	2b01      	cmp	r3, #1
 8028baa:	d002      	beq.n	8028bb2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8028bac:	2302      	movs	r3, #2
 8028bae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028bb0:	e0c2      	b.n	8028d38 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8028bb2:	68bb      	ldr	r3, [r7, #8]
 8028bb4:	2b00      	cmp	r3, #0
 8028bb6:	d002      	beq.n	8028bbe <HAL_SPI_Receive+0x7e>
 8028bb8:	88fb      	ldrh	r3, [r7, #6]
 8028bba:	2b00      	cmp	r3, #0
 8028bbc:	d102      	bne.n	8028bc4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8028bbe:	2301      	movs	r3, #1
 8028bc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028bc2:	e0b9      	b.n	8028d38 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8028bc4:	68fb      	ldr	r3, [r7, #12]
 8028bc6:	2204      	movs	r2, #4
 8028bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028bcc:	68fb      	ldr	r3, [r7, #12]
 8028bce:	2200      	movs	r2, #0
 8028bd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8028bd2:	68fb      	ldr	r3, [r7, #12]
 8028bd4:	68ba      	ldr	r2, [r7, #8]
 8028bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8028bd8:	68fb      	ldr	r3, [r7, #12]
 8028bda:	88fa      	ldrh	r2, [r7, #6]
 8028bdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8028bde:	68fb      	ldr	r3, [r7, #12]
 8028be0:	88fa      	ldrh	r2, [r7, #6]
 8028be2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8028be4:	68fb      	ldr	r3, [r7, #12]
 8028be6:	2200      	movs	r2, #0
 8028be8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8028bea:	68fb      	ldr	r3, [r7, #12]
 8028bec:	2200      	movs	r2, #0
 8028bee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8028bf0:	68fb      	ldr	r3, [r7, #12]
 8028bf2:	2200      	movs	r2, #0
 8028bf4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8028bf6:	68fb      	ldr	r3, [r7, #12]
 8028bf8:	2200      	movs	r2, #0
 8028bfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028bfc:	68fb      	ldr	r3, [r7, #12]
 8028bfe:	2200      	movs	r2, #0
 8028c00:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028c02:	68fb      	ldr	r3, [r7, #12]
 8028c04:	689b      	ldr	r3, [r3, #8]
 8028c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028c0a:	d107      	bne.n	8028c1c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8028c0c:	68fb      	ldr	r3, [r7, #12]
 8028c0e:	681b      	ldr	r3, [r3, #0]
 8028c10:	681a      	ldr	r2, [r3, #0]
 8028c12:	68fb      	ldr	r3, [r7, #12]
 8028c14:	681b      	ldr	r3, [r3, #0]
 8028c16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8028c1a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028c1c:	68fb      	ldr	r3, [r7, #12]
 8028c1e:	681b      	ldr	r3, [r3, #0]
 8028c20:	681b      	ldr	r3, [r3, #0]
 8028c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028c26:	2b40      	cmp	r3, #64	; 0x40
 8028c28:	d007      	beq.n	8028c3a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028c2a:	68fb      	ldr	r3, [r7, #12]
 8028c2c:	681b      	ldr	r3, [r3, #0]
 8028c2e:	681a      	ldr	r2, [r3, #0]
 8028c30:	68fb      	ldr	r3, [r7, #12]
 8028c32:	681b      	ldr	r3, [r3, #0]
 8028c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028c38:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8028c3a:	68fb      	ldr	r3, [r7, #12]
 8028c3c:	68db      	ldr	r3, [r3, #12]
 8028c3e:	2b00      	cmp	r3, #0
 8028c40:	d162      	bne.n	8028d08 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8028c42:	e02e      	b.n	8028ca2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028c44:	68fb      	ldr	r3, [r7, #12]
 8028c46:	681b      	ldr	r3, [r3, #0]
 8028c48:	689b      	ldr	r3, [r3, #8]
 8028c4a:	f003 0301 	and.w	r3, r3, #1
 8028c4e:	2b01      	cmp	r3, #1
 8028c50:	d115      	bne.n	8028c7e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8028c52:	68fb      	ldr	r3, [r7, #12]
 8028c54:	681b      	ldr	r3, [r3, #0]
 8028c56:	f103 020c 	add.w	r2, r3, #12
 8028c5a:	68fb      	ldr	r3, [r7, #12]
 8028c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028c5e:	7812      	ldrb	r2, [r2, #0]
 8028c60:	b2d2      	uxtb	r2, r2
 8028c62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8028c64:	68fb      	ldr	r3, [r7, #12]
 8028c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028c68:	1c5a      	adds	r2, r3, #1
 8028c6a:	68fb      	ldr	r3, [r7, #12]
 8028c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028c6e:	68fb      	ldr	r3, [r7, #12]
 8028c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028c72:	b29b      	uxth	r3, r3
 8028c74:	3b01      	subs	r3, #1
 8028c76:	b29a      	uxth	r2, r3
 8028c78:	68fb      	ldr	r3, [r7, #12]
 8028c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028c7c:	e011      	b.n	8028ca2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028c7e:	f7fd fb23 	bl	80262c8 <HAL_GetTick>
 8028c82:	4602      	mov	r2, r0
 8028c84:	693b      	ldr	r3, [r7, #16]
 8028c86:	1ad3      	subs	r3, r2, r3
 8028c88:	683a      	ldr	r2, [r7, #0]
 8028c8a:	429a      	cmp	r2, r3
 8028c8c:	d803      	bhi.n	8028c96 <HAL_SPI_Receive+0x156>
 8028c8e:	683b      	ldr	r3, [r7, #0]
 8028c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028c94:	d102      	bne.n	8028c9c <HAL_SPI_Receive+0x15c>
 8028c96:	683b      	ldr	r3, [r7, #0]
 8028c98:	2b00      	cmp	r3, #0
 8028c9a:	d102      	bne.n	8028ca2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8028c9c:	2303      	movs	r3, #3
 8028c9e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028ca0:	e04a      	b.n	8028d38 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028ca2:	68fb      	ldr	r3, [r7, #12]
 8028ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028ca6:	b29b      	uxth	r3, r3
 8028ca8:	2b00      	cmp	r3, #0
 8028caa:	d1cb      	bne.n	8028c44 <HAL_SPI_Receive+0x104>
 8028cac:	e031      	b.n	8028d12 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028cae:	68fb      	ldr	r3, [r7, #12]
 8028cb0:	681b      	ldr	r3, [r3, #0]
 8028cb2:	689b      	ldr	r3, [r3, #8]
 8028cb4:	f003 0301 	and.w	r3, r3, #1
 8028cb8:	2b01      	cmp	r3, #1
 8028cba:	d113      	bne.n	8028ce4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028cbc:	68fb      	ldr	r3, [r7, #12]
 8028cbe:	681b      	ldr	r3, [r3, #0]
 8028cc0:	68da      	ldr	r2, [r3, #12]
 8028cc2:	68fb      	ldr	r3, [r7, #12]
 8028cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028cc6:	b292      	uxth	r2, r2
 8028cc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028cca:	68fb      	ldr	r3, [r7, #12]
 8028ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028cce:	1c9a      	adds	r2, r3, #2
 8028cd0:	68fb      	ldr	r3, [r7, #12]
 8028cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028cd4:	68fb      	ldr	r3, [r7, #12]
 8028cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028cd8:	b29b      	uxth	r3, r3
 8028cda:	3b01      	subs	r3, #1
 8028cdc:	b29a      	uxth	r2, r3
 8028cde:	68fb      	ldr	r3, [r7, #12]
 8028ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028ce2:	e011      	b.n	8028d08 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028ce4:	f7fd faf0 	bl	80262c8 <HAL_GetTick>
 8028ce8:	4602      	mov	r2, r0
 8028cea:	693b      	ldr	r3, [r7, #16]
 8028cec:	1ad3      	subs	r3, r2, r3
 8028cee:	683a      	ldr	r2, [r7, #0]
 8028cf0:	429a      	cmp	r2, r3
 8028cf2:	d803      	bhi.n	8028cfc <HAL_SPI_Receive+0x1bc>
 8028cf4:	683b      	ldr	r3, [r7, #0]
 8028cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028cfa:	d102      	bne.n	8028d02 <HAL_SPI_Receive+0x1c2>
 8028cfc:	683b      	ldr	r3, [r7, #0]
 8028cfe:	2b00      	cmp	r3, #0
 8028d00:	d102      	bne.n	8028d08 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8028d02:	2303      	movs	r3, #3
 8028d04:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028d06:	e017      	b.n	8028d38 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028d08:	68fb      	ldr	r3, [r7, #12]
 8028d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028d0c:	b29b      	uxth	r3, r3
 8028d0e:	2b00      	cmp	r3, #0
 8028d10:	d1cd      	bne.n	8028cae <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028d12:	693a      	ldr	r2, [r7, #16]
 8028d14:	6839      	ldr	r1, [r7, #0]
 8028d16:	68f8      	ldr	r0, [r7, #12]
 8028d18:	f000 fa27 	bl	802916a <SPI_EndRxTransaction>
 8028d1c:	4603      	mov	r3, r0
 8028d1e:	2b00      	cmp	r3, #0
 8028d20:	d002      	beq.n	8028d28 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028d22:	68fb      	ldr	r3, [r7, #12]
 8028d24:	2220      	movs	r2, #32
 8028d26:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028d28:	68fb      	ldr	r3, [r7, #12]
 8028d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028d2c:	2b00      	cmp	r3, #0
 8028d2e:	d002      	beq.n	8028d36 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8028d30:	2301      	movs	r3, #1
 8028d32:	75fb      	strb	r3, [r7, #23]
 8028d34:	e000      	b.n	8028d38 <HAL_SPI_Receive+0x1f8>
  }

error :
 8028d36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028d38:	68fb      	ldr	r3, [r7, #12]
 8028d3a:	2201      	movs	r2, #1
 8028d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028d40:	68fb      	ldr	r3, [r7, #12]
 8028d42:	2200      	movs	r2, #0
 8028d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8028d4a:	4618      	mov	r0, r3
 8028d4c:	3718      	adds	r7, #24
 8028d4e:	46bd      	mov	sp, r7
 8028d50:	bd80      	pop	{r7, pc}

08028d52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8028d52:	b580      	push	{r7, lr}
 8028d54:	b08c      	sub	sp, #48	; 0x30
 8028d56:	af00      	add	r7, sp, #0
 8028d58:	60f8      	str	r0, [r7, #12]
 8028d5a:	60b9      	str	r1, [r7, #8]
 8028d5c:	607a      	str	r2, [r7, #4]
 8028d5e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8028d60:	2301      	movs	r3, #1
 8028d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8028d64:	2300      	movs	r3, #0
 8028d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028d6a:	68fb      	ldr	r3, [r7, #12]
 8028d6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028d70:	2b01      	cmp	r3, #1
 8028d72:	d101      	bne.n	8028d78 <HAL_SPI_TransmitReceive+0x26>
 8028d74:	2302      	movs	r3, #2
 8028d76:	e18a      	b.n	802908e <HAL_SPI_TransmitReceive+0x33c>
 8028d78:	68fb      	ldr	r3, [r7, #12]
 8028d7a:	2201      	movs	r2, #1
 8028d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028d80:	f7fd faa2 	bl	80262c8 <HAL_GetTick>
 8028d84:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8028d86:	68fb      	ldr	r3, [r7, #12]
 8028d88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8028d90:	68fb      	ldr	r3, [r7, #12]
 8028d92:	685b      	ldr	r3, [r3, #4]
 8028d94:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8028d96:	887b      	ldrh	r3, [r7, #2]
 8028d98:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8028d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028d9e:	2b01      	cmp	r3, #1
 8028da0:	d00f      	beq.n	8028dc2 <HAL_SPI_TransmitReceive+0x70>
 8028da2:	69fb      	ldr	r3, [r7, #28]
 8028da4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028da8:	d107      	bne.n	8028dba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8028daa:	68fb      	ldr	r3, [r7, #12]
 8028dac:	689b      	ldr	r3, [r3, #8]
 8028dae:	2b00      	cmp	r3, #0
 8028db0:	d103      	bne.n	8028dba <HAL_SPI_TransmitReceive+0x68>
 8028db2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028db6:	2b04      	cmp	r3, #4
 8028db8:	d003      	beq.n	8028dc2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8028dba:	2302      	movs	r3, #2
 8028dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028dc0:	e15b      	b.n	802907a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8028dc2:	68bb      	ldr	r3, [r7, #8]
 8028dc4:	2b00      	cmp	r3, #0
 8028dc6:	d005      	beq.n	8028dd4 <HAL_SPI_TransmitReceive+0x82>
 8028dc8:	687b      	ldr	r3, [r7, #4]
 8028dca:	2b00      	cmp	r3, #0
 8028dcc:	d002      	beq.n	8028dd4 <HAL_SPI_TransmitReceive+0x82>
 8028dce:	887b      	ldrh	r3, [r7, #2]
 8028dd0:	2b00      	cmp	r3, #0
 8028dd2:	d103      	bne.n	8028ddc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8028dd4:	2301      	movs	r3, #1
 8028dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028dda:	e14e      	b.n	802907a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8028ddc:	68fb      	ldr	r3, [r7, #12]
 8028dde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028de2:	b2db      	uxtb	r3, r3
 8028de4:	2b04      	cmp	r3, #4
 8028de6:	d003      	beq.n	8028df0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8028de8:	68fb      	ldr	r3, [r7, #12]
 8028dea:	2205      	movs	r2, #5
 8028dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028df0:	68fb      	ldr	r3, [r7, #12]
 8028df2:	2200      	movs	r2, #0
 8028df4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8028df6:	68fb      	ldr	r3, [r7, #12]
 8028df8:	687a      	ldr	r2, [r7, #4]
 8028dfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8028dfc:	68fb      	ldr	r3, [r7, #12]
 8028dfe:	887a      	ldrh	r2, [r7, #2]
 8028e00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8028e02:	68fb      	ldr	r3, [r7, #12]
 8028e04:	887a      	ldrh	r2, [r7, #2]
 8028e06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8028e08:	68fb      	ldr	r3, [r7, #12]
 8028e0a:	68ba      	ldr	r2, [r7, #8]
 8028e0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8028e0e:	68fb      	ldr	r3, [r7, #12]
 8028e10:	887a      	ldrh	r2, [r7, #2]
 8028e12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8028e14:	68fb      	ldr	r3, [r7, #12]
 8028e16:	887a      	ldrh	r2, [r7, #2]
 8028e18:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8028e1a:	68fb      	ldr	r3, [r7, #12]
 8028e1c:	2200      	movs	r2, #0
 8028e1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028e20:	68fb      	ldr	r3, [r7, #12]
 8028e22:	2200      	movs	r2, #0
 8028e24:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028e26:	68fb      	ldr	r3, [r7, #12]
 8028e28:	681b      	ldr	r3, [r3, #0]
 8028e2a:	681b      	ldr	r3, [r3, #0]
 8028e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028e30:	2b40      	cmp	r3, #64	; 0x40
 8028e32:	d007      	beq.n	8028e44 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028e34:	68fb      	ldr	r3, [r7, #12]
 8028e36:	681b      	ldr	r3, [r3, #0]
 8028e38:	681a      	ldr	r2, [r3, #0]
 8028e3a:	68fb      	ldr	r3, [r7, #12]
 8028e3c:	681b      	ldr	r3, [r3, #0]
 8028e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028e42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028e44:	68fb      	ldr	r3, [r7, #12]
 8028e46:	68db      	ldr	r3, [r3, #12]
 8028e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028e4c:	d178      	bne.n	8028f40 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028e4e:	68fb      	ldr	r3, [r7, #12]
 8028e50:	685b      	ldr	r3, [r3, #4]
 8028e52:	2b00      	cmp	r3, #0
 8028e54:	d002      	beq.n	8028e5c <HAL_SPI_TransmitReceive+0x10a>
 8028e56:	8b7b      	ldrh	r3, [r7, #26]
 8028e58:	2b01      	cmp	r3, #1
 8028e5a:	d166      	bne.n	8028f2a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028e5c:	68fb      	ldr	r3, [r7, #12]
 8028e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e60:	881a      	ldrh	r2, [r3, #0]
 8028e62:	68fb      	ldr	r3, [r7, #12]
 8028e64:	681b      	ldr	r3, [r3, #0]
 8028e66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8028e68:	68fb      	ldr	r3, [r7, #12]
 8028e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e6c:	1c9a      	adds	r2, r3, #2
 8028e6e:	68fb      	ldr	r3, [r7, #12]
 8028e70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028e72:	68fb      	ldr	r3, [r7, #12]
 8028e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028e76:	b29b      	uxth	r3, r3
 8028e78:	3b01      	subs	r3, #1
 8028e7a:	b29a      	uxth	r2, r3
 8028e7c:	68fb      	ldr	r3, [r7, #12]
 8028e7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028e80:	e053      	b.n	8028f2a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028e82:	68fb      	ldr	r3, [r7, #12]
 8028e84:	681b      	ldr	r3, [r3, #0]
 8028e86:	689b      	ldr	r3, [r3, #8]
 8028e88:	f003 0302 	and.w	r3, r3, #2
 8028e8c:	2b02      	cmp	r3, #2
 8028e8e:	d11b      	bne.n	8028ec8 <HAL_SPI_TransmitReceive+0x176>
 8028e90:	68fb      	ldr	r3, [r7, #12]
 8028e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028e94:	b29b      	uxth	r3, r3
 8028e96:	2b00      	cmp	r3, #0
 8028e98:	d016      	beq.n	8028ec8 <HAL_SPI_TransmitReceive+0x176>
 8028e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028e9c:	2b01      	cmp	r3, #1
 8028e9e:	d113      	bne.n	8028ec8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028ea0:	68fb      	ldr	r3, [r7, #12]
 8028ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ea4:	881a      	ldrh	r2, [r3, #0]
 8028ea6:	68fb      	ldr	r3, [r7, #12]
 8028ea8:	681b      	ldr	r3, [r3, #0]
 8028eaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028eac:	68fb      	ldr	r3, [r7, #12]
 8028eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028eb0:	1c9a      	adds	r2, r3, #2
 8028eb2:	68fb      	ldr	r3, [r7, #12]
 8028eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028eb6:	68fb      	ldr	r3, [r7, #12]
 8028eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028eba:	b29b      	uxth	r3, r3
 8028ebc:	3b01      	subs	r3, #1
 8028ebe:	b29a      	uxth	r2, r3
 8028ec0:	68fb      	ldr	r3, [r7, #12]
 8028ec2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028ec4:	2300      	movs	r3, #0
 8028ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028ec8:	68fb      	ldr	r3, [r7, #12]
 8028eca:	681b      	ldr	r3, [r3, #0]
 8028ecc:	689b      	ldr	r3, [r3, #8]
 8028ece:	f003 0301 	and.w	r3, r3, #1
 8028ed2:	2b01      	cmp	r3, #1
 8028ed4:	d119      	bne.n	8028f0a <HAL_SPI_TransmitReceive+0x1b8>
 8028ed6:	68fb      	ldr	r3, [r7, #12]
 8028ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028eda:	b29b      	uxth	r3, r3
 8028edc:	2b00      	cmp	r3, #0
 8028ede:	d014      	beq.n	8028f0a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028ee0:	68fb      	ldr	r3, [r7, #12]
 8028ee2:	681b      	ldr	r3, [r3, #0]
 8028ee4:	68da      	ldr	r2, [r3, #12]
 8028ee6:	68fb      	ldr	r3, [r7, #12]
 8028ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028eea:	b292      	uxth	r2, r2
 8028eec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028eee:	68fb      	ldr	r3, [r7, #12]
 8028ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028ef2:	1c9a      	adds	r2, r3, #2
 8028ef4:	68fb      	ldr	r3, [r7, #12]
 8028ef6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028ef8:	68fb      	ldr	r3, [r7, #12]
 8028efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028efc:	b29b      	uxth	r3, r3
 8028efe:	3b01      	subs	r3, #1
 8028f00:	b29a      	uxth	r2, r3
 8028f02:	68fb      	ldr	r3, [r7, #12]
 8028f04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028f06:	2301      	movs	r3, #1
 8028f08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8028f0a:	f7fd f9dd 	bl	80262c8 <HAL_GetTick>
 8028f0e:	4602      	mov	r2, r0
 8028f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f12:	1ad3      	subs	r3, r2, r3
 8028f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028f16:	429a      	cmp	r2, r3
 8028f18:	d807      	bhi.n	8028f2a <HAL_SPI_TransmitReceive+0x1d8>
 8028f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028f20:	d003      	beq.n	8028f2a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8028f22:	2303      	movs	r3, #3
 8028f24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028f28:	e0a7      	b.n	802907a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028f2a:	68fb      	ldr	r3, [r7, #12]
 8028f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028f2e:	b29b      	uxth	r3, r3
 8028f30:	2b00      	cmp	r3, #0
 8028f32:	d1a6      	bne.n	8028e82 <HAL_SPI_TransmitReceive+0x130>
 8028f34:	68fb      	ldr	r3, [r7, #12]
 8028f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028f38:	b29b      	uxth	r3, r3
 8028f3a:	2b00      	cmp	r3, #0
 8028f3c:	d1a1      	bne.n	8028e82 <HAL_SPI_TransmitReceive+0x130>
 8028f3e:	e07c      	b.n	802903a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028f40:	68fb      	ldr	r3, [r7, #12]
 8028f42:	685b      	ldr	r3, [r3, #4]
 8028f44:	2b00      	cmp	r3, #0
 8028f46:	d002      	beq.n	8028f4e <HAL_SPI_TransmitReceive+0x1fc>
 8028f48:	8b7b      	ldrh	r3, [r7, #26]
 8028f4a:	2b01      	cmp	r3, #1
 8028f4c:	d16b      	bne.n	8029026 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028f4e:	68fb      	ldr	r3, [r7, #12]
 8028f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028f52:	68fb      	ldr	r3, [r7, #12]
 8028f54:	681b      	ldr	r3, [r3, #0]
 8028f56:	330c      	adds	r3, #12
 8028f58:	7812      	ldrb	r2, [r2, #0]
 8028f5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028f5c:	68fb      	ldr	r3, [r7, #12]
 8028f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028f60:	1c5a      	adds	r2, r3, #1
 8028f62:	68fb      	ldr	r3, [r7, #12]
 8028f64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028f66:	68fb      	ldr	r3, [r7, #12]
 8028f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028f6a:	b29b      	uxth	r3, r3
 8028f6c:	3b01      	subs	r3, #1
 8028f6e:	b29a      	uxth	r2, r3
 8028f70:	68fb      	ldr	r3, [r7, #12]
 8028f72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028f74:	e057      	b.n	8029026 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028f76:	68fb      	ldr	r3, [r7, #12]
 8028f78:	681b      	ldr	r3, [r3, #0]
 8028f7a:	689b      	ldr	r3, [r3, #8]
 8028f7c:	f003 0302 	and.w	r3, r3, #2
 8028f80:	2b02      	cmp	r3, #2
 8028f82:	d11c      	bne.n	8028fbe <HAL_SPI_TransmitReceive+0x26c>
 8028f84:	68fb      	ldr	r3, [r7, #12]
 8028f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028f88:	b29b      	uxth	r3, r3
 8028f8a:	2b00      	cmp	r3, #0
 8028f8c:	d017      	beq.n	8028fbe <HAL_SPI_TransmitReceive+0x26c>
 8028f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028f90:	2b01      	cmp	r3, #1
 8028f92:	d114      	bne.n	8028fbe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8028f94:	68fb      	ldr	r3, [r7, #12]
 8028f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028f98:	68fb      	ldr	r3, [r7, #12]
 8028f9a:	681b      	ldr	r3, [r3, #0]
 8028f9c:	330c      	adds	r3, #12
 8028f9e:	7812      	ldrb	r2, [r2, #0]
 8028fa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8028fa2:	68fb      	ldr	r3, [r7, #12]
 8028fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028fa6:	1c5a      	adds	r2, r3, #1
 8028fa8:	68fb      	ldr	r3, [r7, #12]
 8028faa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028fac:	68fb      	ldr	r3, [r7, #12]
 8028fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028fb0:	b29b      	uxth	r3, r3
 8028fb2:	3b01      	subs	r3, #1
 8028fb4:	b29a      	uxth	r2, r3
 8028fb6:	68fb      	ldr	r3, [r7, #12]
 8028fb8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028fba:	2300      	movs	r3, #0
 8028fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028fbe:	68fb      	ldr	r3, [r7, #12]
 8028fc0:	681b      	ldr	r3, [r3, #0]
 8028fc2:	689b      	ldr	r3, [r3, #8]
 8028fc4:	f003 0301 	and.w	r3, r3, #1
 8028fc8:	2b01      	cmp	r3, #1
 8028fca:	d119      	bne.n	8029000 <HAL_SPI_TransmitReceive+0x2ae>
 8028fcc:	68fb      	ldr	r3, [r7, #12]
 8028fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028fd0:	b29b      	uxth	r3, r3
 8028fd2:	2b00      	cmp	r3, #0
 8028fd4:	d014      	beq.n	8029000 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8028fd6:	68fb      	ldr	r3, [r7, #12]
 8028fd8:	681b      	ldr	r3, [r3, #0]
 8028fda:	68da      	ldr	r2, [r3, #12]
 8028fdc:	68fb      	ldr	r3, [r7, #12]
 8028fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028fe0:	b2d2      	uxtb	r2, r2
 8028fe2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8028fe4:	68fb      	ldr	r3, [r7, #12]
 8028fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028fe8:	1c5a      	adds	r2, r3, #1
 8028fea:	68fb      	ldr	r3, [r7, #12]
 8028fec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028fee:	68fb      	ldr	r3, [r7, #12]
 8028ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028ff2:	b29b      	uxth	r3, r3
 8028ff4:	3b01      	subs	r3, #1
 8028ff6:	b29a      	uxth	r2, r3
 8028ff8:	68fb      	ldr	r3, [r7, #12]
 8028ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028ffc:	2301      	movs	r3, #1
 8028ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8029000:	f7fd f962 	bl	80262c8 <HAL_GetTick>
 8029004:	4602      	mov	r2, r0
 8029006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029008:	1ad3      	subs	r3, r2, r3
 802900a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802900c:	429a      	cmp	r2, r3
 802900e:	d803      	bhi.n	8029018 <HAL_SPI_TransmitReceive+0x2c6>
 8029010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029016:	d102      	bne.n	802901e <HAL_SPI_TransmitReceive+0x2cc>
 8029018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802901a:	2b00      	cmp	r3, #0
 802901c:	d103      	bne.n	8029026 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 802901e:	2303      	movs	r3, #3
 8029020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8029024:	e029      	b.n	802907a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8029026:	68fb      	ldr	r3, [r7, #12]
 8029028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802902a:	b29b      	uxth	r3, r3
 802902c:	2b00      	cmp	r3, #0
 802902e:	d1a2      	bne.n	8028f76 <HAL_SPI_TransmitReceive+0x224>
 8029030:	68fb      	ldr	r3, [r7, #12]
 8029032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029034:	b29b      	uxth	r3, r3
 8029036:	2b00      	cmp	r3, #0
 8029038:	d19d      	bne.n	8028f76 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802903a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802903c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802903e:	68f8      	ldr	r0, [r7, #12]
 8029040:	f000 f8f8 	bl	8029234 <SPI_EndRxTxTransaction>
 8029044:	4603      	mov	r3, r0
 8029046:	2b00      	cmp	r3, #0
 8029048:	d006      	beq.n	8029058 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 802904a:	2301      	movs	r3, #1
 802904c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8029050:	68fb      	ldr	r3, [r7, #12]
 8029052:	2220      	movs	r2, #32
 8029054:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8029056:	e010      	b.n	802907a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8029058:	68fb      	ldr	r3, [r7, #12]
 802905a:	689b      	ldr	r3, [r3, #8]
 802905c:	2b00      	cmp	r3, #0
 802905e:	d10b      	bne.n	8029078 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8029060:	2300      	movs	r3, #0
 8029062:	617b      	str	r3, [r7, #20]
 8029064:	68fb      	ldr	r3, [r7, #12]
 8029066:	681b      	ldr	r3, [r3, #0]
 8029068:	68db      	ldr	r3, [r3, #12]
 802906a:	617b      	str	r3, [r7, #20]
 802906c:	68fb      	ldr	r3, [r7, #12]
 802906e:	681b      	ldr	r3, [r3, #0]
 8029070:	689b      	ldr	r3, [r3, #8]
 8029072:	617b      	str	r3, [r7, #20]
 8029074:	697b      	ldr	r3, [r7, #20]
 8029076:	e000      	b.n	802907a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8029078:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802907a:	68fb      	ldr	r3, [r7, #12]
 802907c:	2201      	movs	r2, #1
 802907e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8029082:	68fb      	ldr	r3, [r7, #12]
 8029084:	2200      	movs	r2, #0
 8029086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802908a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 802908e:	4618      	mov	r0, r3
 8029090:	3730      	adds	r7, #48	; 0x30
 8029092:	46bd      	mov	sp, r7
 8029094:	bd80      	pop	{r7, pc}

08029096 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8029096:	b580      	push	{r7, lr}
 8029098:	b084      	sub	sp, #16
 802909a:	af00      	add	r7, sp, #0
 802909c:	60f8      	str	r0, [r7, #12]
 802909e:	60b9      	str	r1, [r7, #8]
 80290a0:	603b      	str	r3, [r7, #0]
 80290a2:	4613      	mov	r3, r2
 80290a4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80290a6:	e04c      	b.n	8029142 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80290a8:	683b      	ldr	r3, [r7, #0]
 80290aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80290ae:	d048      	beq.n	8029142 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80290b0:	f7fd f90a 	bl	80262c8 <HAL_GetTick>
 80290b4:	4602      	mov	r2, r0
 80290b6:	69bb      	ldr	r3, [r7, #24]
 80290b8:	1ad3      	subs	r3, r2, r3
 80290ba:	683a      	ldr	r2, [r7, #0]
 80290bc:	429a      	cmp	r2, r3
 80290be:	d902      	bls.n	80290c6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80290c0:	683b      	ldr	r3, [r7, #0]
 80290c2:	2b00      	cmp	r3, #0
 80290c4:	d13d      	bne.n	8029142 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80290c6:	68fb      	ldr	r3, [r7, #12]
 80290c8:	681b      	ldr	r3, [r3, #0]
 80290ca:	685a      	ldr	r2, [r3, #4]
 80290cc:	68fb      	ldr	r3, [r7, #12]
 80290ce:	681b      	ldr	r3, [r3, #0]
 80290d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80290d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80290d6:	68fb      	ldr	r3, [r7, #12]
 80290d8:	685b      	ldr	r3, [r3, #4]
 80290da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80290de:	d111      	bne.n	8029104 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80290e0:	68fb      	ldr	r3, [r7, #12]
 80290e2:	689b      	ldr	r3, [r3, #8]
 80290e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80290e8:	d004      	beq.n	80290f4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80290ea:	68fb      	ldr	r3, [r7, #12]
 80290ec:	689b      	ldr	r3, [r3, #8]
 80290ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80290f2:	d107      	bne.n	8029104 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80290f4:	68fb      	ldr	r3, [r7, #12]
 80290f6:	681b      	ldr	r3, [r3, #0]
 80290f8:	681a      	ldr	r2, [r3, #0]
 80290fa:	68fb      	ldr	r3, [r7, #12]
 80290fc:	681b      	ldr	r3, [r3, #0]
 80290fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8029102:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8029104:	68fb      	ldr	r3, [r7, #12]
 8029106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802910c:	d10f      	bne.n	802912e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 802910e:	68fb      	ldr	r3, [r7, #12]
 8029110:	681b      	ldr	r3, [r3, #0]
 8029112:	681a      	ldr	r2, [r3, #0]
 8029114:	68fb      	ldr	r3, [r7, #12]
 8029116:	681b      	ldr	r3, [r3, #0]
 8029118:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802911c:	601a      	str	r2, [r3, #0]
 802911e:	68fb      	ldr	r3, [r7, #12]
 8029120:	681b      	ldr	r3, [r3, #0]
 8029122:	681a      	ldr	r2, [r3, #0]
 8029124:	68fb      	ldr	r3, [r7, #12]
 8029126:	681b      	ldr	r3, [r3, #0]
 8029128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802912c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 802912e:	68fb      	ldr	r3, [r7, #12]
 8029130:	2201      	movs	r2, #1
 8029132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8029136:	68fb      	ldr	r3, [r7, #12]
 8029138:	2200      	movs	r2, #0
 802913a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 802913e:	2303      	movs	r3, #3
 8029140:	e00f      	b.n	8029162 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8029142:	68fb      	ldr	r3, [r7, #12]
 8029144:	681b      	ldr	r3, [r3, #0]
 8029146:	689a      	ldr	r2, [r3, #8]
 8029148:	68bb      	ldr	r3, [r7, #8]
 802914a:	4013      	ands	r3, r2
 802914c:	68ba      	ldr	r2, [r7, #8]
 802914e:	429a      	cmp	r2, r3
 8029150:	bf0c      	ite	eq
 8029152:	2301      	moveq	r3, #1
 8029154:	2300      	movne	r3, #0
 8029156:	b2db      	uxtb	r3, r3
 8029158:	461a      	mov	r2, r3
 802915a:	79fb      	ldrb	r3, [r7, #7]
 802915c:	429a      	cmp	r2, r3
 802915e:	d1a3      	bne.n	80290a8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8029160:	2300      	movs	r3, #0
}
 8029162:	4618      	mov	r0, r3
 8029164:	3710      	adds	r7, #16
 8029166:	46bd      	mov	sp, r7
 8029168:	bd80      	pop	{r7, pc}

0802916a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 802916a:	b580      	push	{r7, lr}
 802916c:	b086      	sub	sp, #24
 802916e:	af02      	add	r7, sp, #8
 8029170:	60f8      	str	r0, [r7, #12]
 8029172:	60b9      	str	r1, [r7, #8]
 8029174:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8029176:	68fb      	ldr	r3, [r7, #12]
 8029178:	685b      	ldr	r3, [r3, #4]
 802917a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802917e:	d111      	bne.n	80291a4 <SPI_EndRxTransaction+0x3a>
 8029180:	68fb      	ldr	r3, [r7, #12]
 8029182:	689b      	ldr	r3, [r3, #8]
 8029184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029188:	d004      	beq.n	8029194 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802918a:	68fb      	ldr	r3, [r7, #12]
 802918c:	689b      	ldr	r3, [r3, #8]
 802918e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029192:	d107      	bne.n	80291a4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8029194:	68fb      	ldr	r3, [r7, #12]
 8029196:	681b      	ldr	r3, [r3, #0]
 8029198:	681a      	ldr	r2, [r3, #0]
 802919a:	68fb      	ldr	r3, [r7, #12]
 802919c:	681b      	ldr	r3, [r3, #0]
 802919e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80291a2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80291a4:	68fb      	ldr	r3, [r7, #12]
 80291a6:	685b      	ldr	r3, [r3, #4]
 80291a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80291ac:	d12a      	bne.n	8029204 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80291ae:	68fb      	ldr	r3, [r7, #12]
 80291b0:	689b      	ldr	r3, [r3, #8]
 80291b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80291b6:	d012      	beq.n	80291de <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80291b8:	687b      	ldr	r3, [r7, #4]
 80291ba:	9300      	str	r3, [sp, #0]
 80291bc:	68bb      	ldr	r3, [r7, #8]
 80291be:	2200      	movs	r2, #0
 80291c0:	2180      	movs	r1, #128	; 0x80
 80291c2:	68f8      	ldr	r0, [r7, #12]
 80291c4:	f7ff ff67 	bl	8029096 <SPI_WaitFlagStateUntilTimeout>
 80291c8:	4603      	mov	r3, r0
 80291ca:	2b00      	cmp	r3, #0
 80291cc:	d02d      	beq.n	802922a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80291ce:	68fb      	ldr	r3, [r7, #12]
 80291d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80291d2:	f043 0220 	orr.w	r2, r3, #32
 80291d6:	68fb      	ldr	r3, [r7, #12]
 80291d8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80291da:	2303      	movs	r3, #3
 80291dc:	e026      	b.n	802922c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80291de:	687b      	ldr	r3, [r7, #4]
 80291e0:	9300      	str	r3, [sp, #0]
 80291e2:	68bb      	ldr	r3, [r7, #8]
 80291e4:	2200      	movs	r2, #0
 80291e6:	2101      	movs	r1, #1
 80291e8:	68f8      	ldr	r0, [r7, #12]
 80291ea:	f7ff ff54 	bl	8029096 <SPI_WaitFlagStateUntilTimeout>
 80291ee:	4603      	mov	r3, r0
 80291f0:	2b00      	cmp	r3, #0
 80291f2:	d01a      	beq.n	802922a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80291f4:	68fb      	ldr	r3, [r7, #12]
 80291f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80291f8:	f043 0220 	orr.w	r2, r3, #32
 80291fc:	68fb      	ldr	r3, [r7, #12]
 80291fe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8029200:	2303      	movs	r3, #3
 8029202:	e013      	b.n	802922c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8029204:	687b      	ldr	r3, [r7, #4]
 8029206:	9300      	str	r3, [sp, #0]
 8029208:	68bb      	ldr	r3, [r7, #8]
 802920a:	2200      	movs	r2, #0
 802920c:	2101      	movs	r1, #1
 802920e:	68f8      	ldr	r0, [r7, #12]
 8029210:	f7ff ff41 	bl	8029096 <SPI_WaitFlagStateUntilTimeout>
 8029214:	4603      	mov	r3, r0
 8029216:	2b00      	cmp	r3, #0
 8029218:	d007      	beq.n	802922a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802921a:	68fb      	ldr	r3, [r7, #12]
 802921c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802921e:	f043 0220 	orr.w	r2, r3, #32
 8029222:	68fb      	ldr	r3, [r7, #12]
 8029224:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8029226:	2303      	movs	r3, #3
 8029228:	e000      	b.n	802922c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 802922a:	2300      	movs	r3, #0
}
 802922c:	4618      	mov	r0, r3
 802922e:	3710      	adds	r7, #16
 8029230:	46bd      	mov	sp, r7
 8029232:	bd80      	pop	{r7, pc}

08029234 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8029234:	b580      	push	{r7, lr}
 8029236:	b088      	sub	sp, #32
 8029238:	af02      	add	r7, sp, #8
 802923a:	60f8      	str	r0, [r7, #12]
 802923c:	60b9      	str	r1, [r7, #8]
 802923e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8029240:	4b1b      	ldr	r3, [pc, #108]	; (80292b0 <SPI_EndRxTxTransaction+0x7c>)
 8029242:	681b      	ldr	r3, [r3, #0]
 8029244:	4a1b      	ldr	r2, [pc, #108]	; (80292b4 <SPI_EndRxTxTransaction+0x80>)
 8029246:	fba2 2303 	umull	r2, r3, r2, r3
 802924a:	0d5b      	lsrs	r3, r3, #21
 802924c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8029250:	fb02 f303 	mul.w	r3, r2, r3
 8029254:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8029256:	68fb      	ldr	r3, [r7, #12]
 8029258:	685b      	ldr	r3, [r3, #4]
 802925a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802925e:	d112      	bne.n	8029286 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8029260:	687b      	ldr	r3, [r7, #4]
 8029262:	9300      	str	r3, [sp, #0]
 8029264:	68bb      	ldr	r3, [r7, #8]
 8029266:	2200      	movs	r2, #0
 8029268:	2180      	movs	r1, #128	; 0x80
 802926a:	68f8      	ldr	r0, [r7, #12]
 802926c:	f7ff ff13 	bl	8029096 <SPI_WaitFlagStateUntilTimeout>
 8029270:	4603      	mov	r3, r0
 8029272:	2b00      	cmp	r3, #0
 8029274:	d016      	beq.n	80292a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029276:	68fb      	ldr	r3, [r7, #12]
 8029278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802927a:	f043 0220 	orr.w	r2, r3, #32
 802927e:	68fb      	ldr	r3, [r7, #12]
 8029280:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8029282:	2303      	movs	r3, #3
 8029284:	e00f      	b.n	80292a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8029286:	697b      	ldr	r3, [r7, #20]
 8029288:	2b00      	cmp	r3, #0
 802928a:	d00a      	beq.n	80292a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 802928c:	697b      	ldr	r3, [r7, #20]
 802928e:	3b01      	subs	r3, #1
 8029290:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8029292:	68fb      	ldr	r3, [r7, #12]
 8029294:	681b      	ldr	r3, [r3, #0]
 8029296:	689b      	ldr	r3, [r3, #8]
 8029298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802929c:	2b80      	cmp	r3, #128	; 0x80
 802929e:	d0f2      	beq.n	8029286 <SPI_EndRxTxTransaction+0x52>
 80292a0:	e000      	b.n	80292a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80292a2:	bf00      	nop
  }

  return HAL_OK;
 80292a4:	2300      	movs	r3, #0
}
 80292a6:	4618      	mov	r0, r3
 80292a8:	3718      	adds	r7, #24
 80292aa:	46bd      	mov	sp, r7
 80292ac:	bd80      	pop	{r7, pc}
 80292ae:	bf00      	nop
 80292b0:	20000010 	.word	0x20000010
 80292b4:	165e9f81 	.word	0x165e9f81

080292b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80292b8:	b580      	push	{r7, lr}
 80292ba:	b082      	sub	sp, #8
 80292bc:	af00      	add	r7, sp, #0
 80292be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80292c0:	687b      	ldr	r3, [r7, #4]
 80292c2:	2b00      	cmp	r3, #0
 80292c4:	d101      	bne.n	80292ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80292c6:	2301      	movs	r3, #1
 80292c8:	e01d      	b.n	8029306 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80292ca:	687b      	ldr	r3, [r7, #4]
 80292cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80292d0:	b2db      	uxtb	r3, r3
 80292d2:	2b00      	cmp	r3, #0
 80292d4:	d106      	bne.n	80292e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80292d6:	687b      	ldr	r3, [r7, #4]
 80292d8:	2200      	movs	r2, #0
 80292da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80292de:	6878      	ldr	r0, [r7, #4]
 80292e0:	f7fb fa38 	bl	8024754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80292e4:	687b      	ldr	r3, [r7, #4]
 80292e6:	2202      	movs	r2, #2
 80292e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80292ec:	687b      	ldr	r3, [r7, #4]
 80292ee:	681a      	ldr	r2, [r3, #0]
 80292f0:	687b      	ldr	r3, [r7, #4]
 80292f2:	3304      	adds	r3, #4
 80292f4:	4619      	mov	r1, r3
 80292f6:	4610      	mov	r0, r2
 80292f8:	f000 fc0e 	bl	8029b18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80292fc:	687b      	ldr	r3, [r7, #4]
 80292fe:	2201      	movs	r2, #1
 8029300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029304:	2300      	movs	r3, #0
}
 8029306:	4618      	mov	r0, r3
 8029308:	3708      	adds	r7, #8
 802930a:	46bd      	mov	sp, r7
 802930c:	bd80      	pop	{r7, pc}

0802930e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 802930e:	b480      	push	{r7}
 8029310:	b085      	sub	sp, #20
 8029312:	af00      	add	r7, sp, #0
 8029314:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8029316:	687b      	ldr	r3, [r7, #4]
 8029318:	681b      	ldr	r3, [r3, #0]
 802931a:	68da      	ldr	r2, [r3, #12]
 802931c:	687b      	ldr	r3, [r7, #4]
 802931e:	681b      	ldr	r3, [r3, #0]
 8029320:	f042 0201 	orr.w	r2, r2, #1
 8029324:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8029326:	687b      	ldr	r3, [r7, #4]
 8029328:	681b      	ldr	r3, [r3, #0]
 802932a:	689b      	ldr	r3, [r3, #8]
 802932c:	f003 0307 	and.w	r3, r3, #7
 8029330:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029332:	68fb      	ldr	r3, [r7, #12]
 8029334:	2b06      	cmp	r3, #6
 8029336:	d007      	beq.n	8029348 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8029338:	687b      	ldr	r3, [r7, #4]
 802933a:	681b      	ldr	r3, [r3, #0]
 802933c:	681a      	ldr	r2, [r3, #0]
 802933e:	687b      	ldr	r3, [r7, #4]
 8029340:	681b      	ldr	r3, [r3, #0]
 8029342:	f042 0201 	orr.w	r2, r2, #1
 8029346:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8029348:	2300      	movs	r3, #0
}
 802934a:	4618      	mov	r0, r3
 802934c:	3714      	adds	r7, #20
 802934e:	46bd      	mov	sp, r7
 8029350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029354:	4770      	bx	lr

08029356 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8029356:	b580      	push	{r7, lr}
 8029358:	b082      	sub	sp, #8
 802935a:	af00      	add	r7, sp, #0
 802935c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802935e:	687b      	ldr	r3, [r7, #4]
 8029360:	2b00      	cmp	r3, #0
 8029362:	d101      	bne.n	8029368 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8029364:	2301      	movs	r3, #1
 8029366:	e01d      	b.n	80293a4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029368:	687b      	ldr	r3, [r7, #4]
 802936a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802936e:	b2db      	uxtb	r3, r3
 8029370:	2b00      	cmp	r3, #0
 8029372:	d106      	bne.n	8029382 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029374:	687b      	ldr	r3, [r7, #4]
 8029376:	2200      	movs	r2, #0
 8029378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 802937c:	6878      	ldr	r0, [r7, #4]
 802937e:	f7fb f99b 	bl	80246b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029382:	687b      	ldr	r3, [r7, #4]
 8029384:	2202      	movs	r2, #2
 8029386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802938a:	687b      	ldr	r3, [r7, #4]
 802938c:	681a      	ldr	r2, [r3, #0]
 802938e:	687b      	ldr	r3, [r7, #4]
 8029390:	3304      	adds	r3, #4
 8029392:	4619      	mov	r1, r3
 8029394:	4610      	mov	r0, r2
 8029396:	f000 fbbf 	bl	8029b18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802939a:	687b      	ldr	r3, [r7, #4]
 802939c:	2201      	movs	r2, #1
 802939e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80293a2:	2300      	movs	r3, #0
}
 80293a4:	4618      	mov	r0, r3
 80293a6:	3708      	adds	r7, #8
 80293a8:	46bd      	mov	sp, r7
 80293aa:	bd80      	pop	{r7, pc}

080293ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80293ac:	b580      	push	{r7, lr}
 80293ae:	b084      	sub	sp, #16
 80293b0:	af00      	add	r7, sp, #0
 80293b2:	6078      	str	r0, [r7, #4]
 80293b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80293b6:	687b      	ldr	r3, [r7, #4]
 80293b8:	681b      	ldr	r3, [r3, #0]
 80293ba:	2201      	movs	r2, #1
 80293bc:	6839      	ldr	r1, [r7, #0]
 80293be:	4618      	mov	r0, r3
 80293c0:	f000 fe94 	bl	802a0ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80293c4:	687b      	ldr	r3, [r7, #4]
 80293c6:	681b      	ldr	r3, [r3, #0]
 80293c8:	4a15      	ldr	r2, [pc, #84]	; (8029420 <HAL_TIM_PWM_Start+0x74>)
 80293ca:	4293      	cmp	r3, r2
 80293cc:	d004      	beq.n	80293d8 <HAL_TIM_PWM_Start+0x2c>
 80293ce:	687b      	ldr	r3, [r7, #4]
 80293d0:	681b      	ldr	r3, [r3, #0]
 80293d2:	4a14      	ldr	r2, [pc, #80]	; (8029424 <HAL_TIM_PWM_Start+0x78>)
 80293d4:	4293      	cmp	r3, r2
 80293d6:	d101      	bne.n	80293dc <HAL_TIM_PWM_Start+0x30>
 80293d8:	2301      	movs	r3, #1
 80293da:	e000      	b.n	80293de <HAL_TIM_PWM_Start+0x32>
 80293dc:	2300      	movs	r3, #0
 80293de:	2b00      	cmp	r3, #0
 80293e0:	d007      	beq.n	80293f2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80293e2:	687b      	ldr	r3, [r7, #4]
 80293e4:	681b      	ldr	r3, [r3, #0]
 80293e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80293e8:	687b      	ldr	r3, [r7, #4]
 80293ea:	681b      	ldr	r3, [r3, #0]
 80293ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80293f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80293f2:	687b      	ldr	r3, [r7, #4]
 80293f4:	681b      	ldr	r3, [r3, #0]
 80293f6:	689b      	ldr	r3, [r3, #8]
 80293f8:	f003 0307 	and.w	r3, r3, #7
 80293fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80293fe:	68fb      	ldr	r3, [r7, #12]
 8029400:	2b06      	cmp	r3, #6
 8029402:	d007      	beq.n	8029414 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8029404:	687b      	ldr	r3, [r7, #4]
 8029406:	681b      	ldr	r3, [r3, #0]
 8029408:	681a      	ldr	r2, [r3, #0]
 802940a:	687b      	ldr	r3, [r7, #4]
 802940c:	681b      	ldr	r3, [r3, #0]
 802940e:	f042 0201 	orr.w	r2, r2, #1
 8029412:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8029414:	2300      	movs	r3, #0
}
 8029416:	4618      	mov	r0, r3
 8029418:	3710      	adds	r7, #16
 802941a:	46bd      	mov	sp, r7
 802941c:	bd80      	pop	{r7, pc}
 802941e:	bf00      	nop
 8029420:	40010000 	.word	0x40010000
 8029424:	40010400 	.word	0x40010400

08029428 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8029428:	b580      	push	{r7, lr}
 802942a:	b086      	sub	sp, #24
 802942c:	af00      	add	r7, sp, #0
 802942e:	6078      	str	r0, [r7, #4]
 8029430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029432:	687b      	ldr	r3, [r7, #4]
 8029434:	2b00      	cmp	r3, #0
 8029436:	d101      	bne.n	802943c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8029438:	2301      	movs	r3, #1
 802943a:	e083      	b.n	8029544 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 802943c:	687b      	ldr	r3, [r7, #4]
 802943e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029442:	b2db      	uxtb	r3, r3
 8029444:	2b00      	cmp	r3, #0
 8029446:	d106      	bne.n	8029456 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029448:	687b      	ldr	r3, [r7, #4]
 802944a:	2200      	movs	r2, #0
 802944c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8029450:	6878      	ldr	r0, [r7, #4]
 8029452:	f7fb fa15 	bl	8024880 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029456:	687b      	ldr	r3, [r7, #4]
 8029458:	2202      	movs	r2, #2
 802945a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 802945e:	687b      	ldr	r3, [r7, #4]
 8029460:	681b      	ldr	r3, [r3, #0]
 8029462:	689b      	ldr	r3, [r3, #8]
 8029464:	687a      	ldr	r2, [r7, #4]
 8029466:	6812      	ldr	r2, [r2, #0]
 8029468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802946c:	f023 0307 	bic.w	r3, r3, #7
 8029470:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029472:	687b      	ldr	r3, [r7, #4]
 8029474:	681a      	ldr	r2, [r3, #0]
 8029476:	687b      	ldr	r3, [r7, #4]
 8029478:	3304      	adds	r3, #4
 802947a:	4619      	mov	r1, r3
 802947c:	4610      	mov	r0, r2
 802947e:	f000 fb4b 	bl	8029b18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8029482:	687b      	ldr	r3, [r7, #4]
 8029484:	681b      	ldr	r3, [r3, #0]
 8029486:	689b      	ldr	r3, [r3, #8]
 8029488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 802948a:	687b      	ldr	r3, [r7, #4]
 802948c:	681b      	ldr	r3, [r3, #0]
 802948e:	699b      	ldr	r3, [r3, #24]
 8029490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8029492:	687b      	ldr	r3, [r7, #4]
 8029494:	681b      	ldr	r3, [r3, #0]
 8029496:	6a1b      	ldr	r3, [r3, #32]
 8029498:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 802949a:	683b      	ldr	r3, [r7, #0]
 802949c:	681b      	ldr	r3, [r3, #0]
 802949e:	697a      	ldr	r2, [r7, #20]
 80294a0:	4313      	orrs	r3, r2
 80294a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80294a4:	693b      	ldr	r3, [r7, #16]
 80294a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80294aa:	f023 0303 	bic.w	r3, r3, #3
 80294ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80294b0:	683b      	ldr	r3, [r7, #0]
 80294b2:	689a      	ldr	r2, [r3, #8]
 80294b4:	683b      	ldr	r3, [r7, #0]
 80294b6:	699b      	ldr	r3, [r3, #24]
 80294b8:	021b      	lsls	r3, r3, #8
 80294ba:	4313      	orrs	r3, r2
 80294bc:	693a      	ldr	r2, [r7, #16]
 80294be:	4313      	orrs	r3, r2
 80294c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80294c2:	693b      	ldr	r3, [r7, #16]
 80294c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80294c8:	f023 030c 	bic.w	r3, r3, #12
 80294cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80294ce:	693b      	ldr	r3, [r7, #16]
 80294d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80294d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80294d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80294da:	683b      	ldr	r3, [r7, #0]
 80294dc:	68da      	ldr	r2, [r3, #12]
 80294de:	683b      	ldr	r3, [r7, #0]
 80294e0:	69db      	ldr	r3, [r3, #28]
 80294e2:	021b      	lsls	r3, r3, #8
 80294e4:	4313      	orrs	r3, r2
 80294e6:	693a      	ldr	r2, [r7, #16]
 80294e8:	4313      	orrs	r3, r2
 80294ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80294ec:	683b      	ldr	r3, [r7, #0]
 80294ee:	691b      	ldr	r3, [r3, #16]
 80294f0:	011a      	lsls	r2, r3, #4
 80294f2:	683b      	ldr	r3, [r7, #0]
 80294f4:	6a1b      	ldr	r3, [r3, #32]
 80294f6:	031b      	lsls	r3, r3, #12
 80294f8:	4313      	orrs	r3, r2
 80294fa:	693a      	ldr	r2, [r7, #16]
 80294fc:	4313      	orrs	r3, r2
 80294fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8029500:	68fb      	ldr	r3, [r7, #12]
 8029502:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8029506:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8029508:	68fb      	ldr	r3, [r7, #12]
 802950a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 802950e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8029510:	683b      	ldr	r3, [r7, #0]
 8029512:	685a      	ldr	r2, [r3, #4]
 8029514:	683b      	ldr	r3, [r7, #0]
 8029516:	695b      	ldr	r3, [r3, #20]
 8029518:	011b      	lsls	r3, r3, #4
 802951a:	4313      	orrs	r3, r2
 802951c:	68fa      	ldr	r2, [r7, #12]
 802951e:	4313      	orrs	r3, r2
 8029520:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8029522:	687b      	ldr	r3, [r7, #4]
 8029524:	681b      	ldr	r3, [r3, #0]
 8029526:	697a      	ldr	r2, [r7, #20]
 8029528:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 802952a:	687b      	ldr	r3, [r7, #4]
 802952c:	681b      	ldr	r3, [r3, #0]
 802952e:	693a      	ldr	r2, [r7, #16]
 8029530:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8029532:	687b      	ldr	r3, [r7, #4]
 8029534:	681b      	ldr	r3, [r3, #0]
 8029536:	68fa      	ldr	r2, [r7, #12]
 8029538:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802953a:	687b      	ldr	r3, [r7, #4]
 802953c:	2201      	movs	r2, #1
 802953e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029542:	2300      	movs	r3, #0
}
 8029544:	4618      	mov	r0, r3
 8029546:	3718      	adds	r7, #24
 8029548:	46bd      	mov	sp, r7
 802954a:	bd80      	pop	{r7, pc}

0802954c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 802954c:	b580      	push	{r7, lr}
 802954e:	b082      	sub	sp, #8
 8029550:	af00      	add	r7, sp, #0
 8029552:	6078      	str	r0, [r7, #4]
 8029554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8029556:	683b      	ldr	r3, [r7, #0]
 8029558:	2b00      	cmp	r3, #0
 802955a:	d002      	beq.n	8029562 <HAL_TIM_Encoder_Start+0x16>
 802955c:	2b04      	cmp	r3, #4
 802955e:	d008      	beq.n	8029572 <HAL_TIM_Encoder_Start+0x26>
 8029560:	e00f      	b.n	8029582 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8029562:	687b      	ldr	r3, [r7, #4]
 8029564:	681b      	ldr	r3, [r3, #0]
 8029566:	2201      	movs	r2, #1
 8029568:	2100      	movs	r1, #0
 802956a:	4618      	mov	r0, r3
 802956c:	f000 fdbe 	bl	802a0ec <TIM_CCxChannelCmd>
      break;
 8029570:	e016      	b.n	80295a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8029572:	687b      	ldr	r3, [r7, #4]
 8029574:	681b      	ldr	r3, [r3, #0]
 8029576:	2201      	movs	r2, #1
 8029578:	2104      	movs	r1, #4
 802957a:	4618      	mov	r0, r3
 802957c:	f000 fdb6 	bl	802a0ec <TIM_CCxChannelCmd>
      break;
 8029580:	e00e      	b.n	80295a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8029582:	687b      	ldr	r3, [r7, #4]
 8029584:	681b      	ldr	r3, [r3, #0]
 8029586:	2201      	movs	r2, #1
 8029588:	2100      	movs	r1, #0
 802958a:	4618      	mov	r0, r3
 802958c:	f000 fdae 	bl	802a0ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8029590:	687b      	ldr	r3, [r7, #4]
 8029592:	681b      	ldr	r3, [r3, #0]
 8029594:	2201      	movs	r2, #1
 8029596:	2104      	movs	r1, #4
 8029598:	4618      	mov	r0, r3
 802959a:	f000 fda7 	bl	802a0ec <TIM_CCxChannelCmd>
      break;
 802959e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80295a0:	687b      	ldr	r3, [r7, #4]
 80295a2:	681b      	ldr	r3, [r3, #0]
 80295a4:	681a      	ldr	r2, [r3, #0]
 80295a6:	687b      	ldr	r3, [r7, #4]
 80295a8:	681b      	ldr	r3, [r3, #0]
 80295aa:	f042 0201 	orr.w	r2, r2, #1
 80295ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80295b0:	2300      	movs	r3, #0
}
 80295b2:	4618      	mov	r0, r3
 80295b4:	3708      	adds	r7, #8
 80295b6:	46bd      	mov	sp, r7
 80295b8:	bd80      	pop	{r7, pc}

080295ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80295ba:	b580      	push	{r7, lr}
 80295bc:	b082      	sub	sp, #8
 80295be:	af00      	add	r7, sp, #0
 80295c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80295c2:	687b      	ldr	r3, [r7, #4]
 80295c4:	681b      	ldr	r3, [r3, #0]
 80295c6:	691b      	ldr	r3, [r3, #16]
 80295c8:	f003 0302 	and.w	r3, r3, #2
 80295cc:	2b02      	cmp	r3, #2
 80295ce:	d122      	bne.n	8029616 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80295d0:	687b      	ldr	r3, [r7, #4]
 80295d2:	681b      	ldr	r3, [r3, #0]
 80295d4:	68db      	ldr	r3, [r3, #12]
 80295d6:	f003 0302 	and.w	r3, r3, #2
 80295da:	2b02      	cmp	r3, #2
 80295dc:	d11b      	bne.n	8029616 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80295de:	687b      	ldr	r3, [r7, #4]
 80295e0:	681b      	ldr	r3, [r3, #0]
 80295e2:	f06f 0202 	mvn.w	r2, #2
 80295e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80295e8:	687b      	ldr	r3, [r7, #4]
 80295ea:	2201      	movs	r2, #1
 80295ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80295ee:	687b      	ldr	r3, [r7, #4]
 80295f0:	681b      	ldr	r3, [r3, #0]
 80295f2:	699b      	ldr	r3, [r3, #24]
 80295f4:	f003 0303 	and.w	r3, r3, #3
 80295f8:	2b00      	cmp	r3, #0
 80295fa:	d003      	beq.n	8029604 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80295fc:	6878      	ldr	r0, [r7, #4]
 80295fe:	f000 fa6c 	bl	8029ada <HAL_TIM_IC_CaptureCallback>
 8029602:	e005      	b.n	8029610 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8029604:	6878      	ldr	r0, [r7, #4]
 8029606:	f000 fa5e 	bl	8029ac6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802960a:	6878      	ldr	r0, [r7, #4]
 802960c:	f000 fa6f 	bl	8029aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029610:	687b      	ldr	r3, [r7, #4]
 8029612:	2200      	movs	r2, #0
 8029614:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8029616:	687b      	ldr	r3, [r7, #4]
 8029618:	681b      	ldr	r3, [r3, #0]
 802961a:	691b      	ldr	r3, [r3, #16]
 802961c:	f003 0304 	and.w	r3, r3, #4
 8029620:	2b04      	cmp	r3, #4
 8029622:	d122      	bne.n	802966a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8029624:	687b      	ldr	r3, [r7, #4]
 8029626:	681b      	ldr	r3, [r3, #0]
 8029628:	68db      	ldr	r3, [r3, #12]
 802962a:	f003 0304 	and.w	r3, r3, #4
 802962e:	2b04      	cmp	r3, #4
 8029630:	d11b      	bne.n	802966a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8029632:	687b      	ldr	r3, [r7, #4]
 8029634:	681b      	ldr	r3, [r3, #0]
 8029636:	f06f 0204 	mvn.w	r2, #4
 802963a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802963c:	687b      	ldr	r3, [r7, #4]
 802963e:	2202      	movs	r2, #2
 8029640:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8029642:	687b      	ldr	r3, [r7, #4]
 8029644:	681b      	ldr	r3, [r3, #0]
 8029646:	699b      	ldr	r3, [r3, #24]
 8029648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802964c:	2b00      	cmp	r3, #0
 802964e:	d003      	beq.n	8029658 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029650:	6878      	ldr	r0, [r7, #4]
 8029652:	f000 fa42 	bl	8029ada <HAL_TIM_IC_CaptureCallback>
 8029656:	e005      	b.n	8029664 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029658:	6878      	ldr	r0, [r7, #4]
 802965a:	f000 fa34 	bl	8029ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802965e:	6878      	ldr	r0, [r7, #4]
 8029660:	f000 fa45 	bl	8029aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029664:	687b      	ldr	r3, [r7, #4]
 8029666:	2200      	movs	r2, #0
 8029668:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802966a:	687b      	ldr	r3, [r7, #4]
 802966c:	681b      	ldr	r3, [r3, #0]
 802966e:	691b      	ldr	r3, [r3, #16]
 8029670:	f003 0308 	and.w	r3, r3, #8
 8029674:	2b08      	cmp	r3, #8
 8029676:	d122      	bne.n	80296be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8029678:	687b      	ldr	r3, [r7, #4]
 802967a:	681b      	ldr	r3, [r3, #0]
 802967c:	68db      	ldr	r3, [r3, #12]
 802967e:	f003 0308 	and.w	r3, r3, #8
 8029682:	2b08      	cmp	r3, #8
 8029684:	d11b      	bne.n	80296be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8029686:	687b      	ldr	r3, [r7, #4]
 8029688:	681b      	ldr	r3, [r3, #0]
 802968a:	f06f 0208 	mvn.w	r2, #8
 802968e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8029690:	687b      	ldr	r3, [r7, #4]
 8029692:	2204      	movs	r2, #4
 8029694:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8029696:	687b      	ldr	r3, [r7, #4]
 8029698:	681b      	ldr	r3, [r3, #0]
 802969a:	69db      	ldr	r3, [r3, #28]
 802969c:	f003 0303 	and.w	r3, r3, #3
 80296a0:	2b00      	cmp	r3, #0
 80296a2:	d003      	beq.n	80296ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80296a4:	6878      	ldr	r0, [r7, #4]
 80296a6:	f000 fa18 	bl	8029ada <HAL_TIM_IC_CaptureCallback>
 80296aa:	e005      	b.n	80296b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80296ac:	6878      	ldr	r0, [r7, #4]
 80296ae:	f000 fa0a 	bl	8029ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80296b2:	6878      	ldr	r0, [r7, #4]
 80296b4:	f000 fa1b 	bl	8029aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80296b8:	687b      	ldr	r3, [r7, #4]
 80296ba:	2200      	movs	r2, #0
 80296bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80296be:	687b      	ldr	r3, [r7, #4]
 80296c0:	681b      	ldr	r3, [r3, #0]
 80296c2:	691b      	ldr	r3, [r3, #16]
 80296c4:	f003 0310 	and.w	r3, r3, #16
 80296c8:	2b10      	cmp	r3, #16
 80296ca:	d122      	bne.n	8029712 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80296cc:	687b      	ldr	r3, [r7, #4]
 80296ce:	681b      	ldr	r3, [r3, #0]
 80296d0:	68db      	ldr	r3, [r3, #12]
 80296d2:	f003 0310 	and.w	r3, r3, #16
 80296d6:	2b10      	cmp	r3, #16
 80296d8:	d11b      	bne.n	8029712 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80296da:	687b      	ldr	r3, [r7, #4]
 80296dc:	681b      	ldr	r3, [r3, #0]
 80296de:	f06f 0210 	mvn.w	r2, #16
 80296e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80296e4:	687b      	ldr	r3, [r7, #4]
 80296e6:	2208      	movs	r2, #8
 80296e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80296ea:	687b      	ldr	r3, [r7, #4]
 80296ec:	681b      	ldr	r3, [r3, #0]
 80296ee:	69db      	ldr	r3, [r3, #28]
 80296f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80296f4:	2b00      	cmp	r3, #0
 80296f6:	d003      	beq.n	8029700 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80296f8:	6878      	ldr	r0, [r7, #4]
 80296fa:	f000 f9ee 	bl	8029ada <HAL_TIM_IC_CaptureCallback>
 80296fe:	e005      	b.n	802970c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029700:	6878      	ldr	r0, [r7, #4]
 8029702:	f000 f9e0 	bl	8029ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029706:	6878      	ldr	r0, [r7, #4]
 8029708:	f000 f9f1 	bl	8029aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802970c:	687b      	ldr	r3, [r7, #4]
 802970e:	2200      	movs	r2, #0
 8029710:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8029712:	687b      	ldr	r3, [r7, #4]
 8029714:	681b      	ldr	r3, [r3, #0]
 8029716:	691b      	ldr	r3, [r3, #16]
 8029718:	f003 0301 	and.w	r3, r3, #1
 802971c:	2b01      	cmp	r3, #1
 802971e:	d10e      	bne.n	802973e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8029720:	687b      	ldr	r3, [r7, #4]
 8029722:	681b      	ldr	r3, [r3, #0]
 8029724:	68db      	ldr	r3, [r3, #12]
 8029726:	f003 0301 	and.w	r3, r3, #1
 802972a:	2b01      	cmp	r3, #1
 802972c:	d107      	bne.n	802973e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802972e:	687b      	ldr	r3, [r7, #4]
 8029730:	681b      	ldr	r3, [r3, #0]
 8029732:	f06f 0201 	mvn.w	r2, #1
 8029736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8029738:	6878      	ldr	r0, [r7, #4]
 802973a:	f7f9 fb33 	bl	8022da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802973e:	687b      	ldr	r3, [r7, #4]
 8029740:	681b      	ldr	r3, [r3, #0]
 8029742:	691b      	ldr	r3, [r3, #16]
 8029744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029748:	2b80      	cmp	r3, #128	; 0x80
 802974a:	d10e      	bne.n	802976a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802974c:	687b      	ldr	r3, [r7, #4]
 802974e:	681b      	ldr	r3, [r3, #0]
 8029750:	68db      	ldr	r3, [r3, #12]
 8029752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029756:	2b80      	cmp	r3, #128	; 0x80
 8029758:	d107      	bne.n	802976a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802975a:	687b      	ldr	r3, [r7, #4]
 802975c:	681b      	ldr	r3, [r3, #0]
 802975e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8029762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8029764:	6878      	ldr	r0, [r7, #4]
 8029766:	f000 fdbf 	bl	802a2e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802976a:	687b      	ldr	r3, [r7, #4]
 802976c:	681b      	ldr	r3, [r3, #0]
 802976e:	691b      	ldr	r3, [r3, #16]
 8029770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029774:	2b40      	cmp	r3, #64	; 0x40
 8029776:	d10e      	bne.n	8029796 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8029778:	687b      	ldr	r3, [r7, #4]
 802977a:	681b      	ldr	r3, [r3, #0]
 802977c:	68db      	ldr	r3, [r3, #12]
 802977e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029782:	2b40      	cmp	r3, #64	; 0x40
 8029784:	d107      	bne.n	8029796 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8029786:	687b      	ldr	r3, [r7, #4]
 8029788:	681b      	ldr	r3, [r3, #0]
 802978a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802978e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8029790:	6878      	ldr	r0, [r7, #4]
 8029792:	f000 f9b6 	bl	8029b02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8029796:	687b      	ldr	r3, [r7, #4]
 8029798:	681b      	ldr	r3, [r3, #0]
 802979a:	691b      	ldr	r3, [r3, #16]
 802979c:	f003 0320 	and.w	r3, r3, #32
 80297a0:	2b20      	cmp	r3, #32
 80297a2:	d10e      	bne.n	80297c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80297a4:	687b      	ldr	r3, [r7, #4]
 80297a6:	681b      	ldr	r3, [r3, #0]
 80297a8:	68db      	ldr	r3, [r3, #12]
 80297aa:	f003 0320 	and.w	r3, r3, #32
 80297ae:	2b20      	cmp	r3, #32
 80297b0:	d107      	bne.n	80297c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80297b2:	687b      	ldr	r3, [r7, #4]
 80297b4:	681b      	ldr	r3, [r3, #0]
 80297b6:	f06f 0220 	mvn.w	r2, #32
 80297ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80297bc:	6878      	ldr	r0, [r7, #4]
 80297be:	f000 fd89 	bl	802a2d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80297c2:	bf00      	nop
 80297c4:	3708      	adds	r7, #8
 80297c6:	46bd      	mov	sp, r7
 80297c8:	bd80      	pop	{r7, pc}
	...

080297cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80297cc:	b580      	push	{r7, lr}
 80297ce:	b084      	sub	sp, #16
 80297d0:	af00      	add	r7, sp, #0
 80297d2:	60f8      	str	r0, [r7, #12]
 80297d4:	60b9      	str	r1, [r7, #8]
 80297d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80297d8:	68fb      	ldr	r3, [r7, #12]
 80297da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80297de:	2b01      	cmp	r3, #1
 80297e0:	d101      	bne.n	80297e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80297e2:	2302      	movs	r3, #2
 80297e4:	e0b4      	b.n	8029950 <HAL_TIM_PWM_ConfigChannel+0x184>
 80297e6:	68fb      	ldr	r3, [r7, #12]
 80297e8:	2201      	movs	r2, #1
 80297ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80297ee:	68fb      	ldr	r3, [r7, #12]
 80297f0:	2202      	movs	r2, #2
 80297f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80297f6:	687b      	ldr	r3, [r7, #4]
 80297f8:	2b0c      	cmp	r3, #12
 80297fa:	f200 809f 	bhi.w	802993c <HAL_TIM_PWM_ConfigChannel+0x170>
 80297fe:	a201      	add	r2, pc, #4	; (adr r2, 8029804 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8029800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029804:	08029839 	.word	0x08029839
 8029808:	0802993d 	.word	0x0802993d
 802980c:	0802993d 	.word	0x0802993d
 8029810:	0802993d 	.word	0x0802993d
 8029814:	08029879 	.word	0x08029879
 8029818:	0802993d 	.word	0x0802993d
 802981c:	0802993d 	.word	0x0802993d
 8029820:	0802993d 	.word	0x0802993d
 8029824:	080298bb 	.word	0x080298bb
 8029828:	0802993d 	.word	0x0802993d
 802982c:	0802993d 	.word	0x0802993d
 8029830:	0802993d 	.word	0x0802993d
 8029834:	080298fb 	.word	0x080298fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8029838:	68fb      	ldr	r3, [r7, #12]
 802983a:	681b      	ldr	r3, [r3, #0]
 802983c:	68b9      	ldr	r1, [r7, #8]
 802983e:	4618      	mov	r0, r3
 8029840:	f000 fa0a 	bl	8029c58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8029844:	68fb      	ldr	r3, [r7, #12]
 8029846:	681b      	ldr	r3, [r3, #0]
 8029848:	699a      	ldr	r2, [r3, #24]
 802984a:	68fb      	ldr	r3, [r7, #12]
 802984c:	681b      	ldr	r3, [r3, #0]
 802984e:	f042 0208 	orr.w	r2, r2, #8
 8029852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8029854:	68fb      	ldr	r3, [r7, #12]
 8029856:	681b      	ldr	r3, [r3, #0]
 8029858:	699a      	ldr	r2, [r3, #24]
 802985a:	68fb      	ldr	r3, [r7, #12]
 802985c:	681b      	ldr	r3, [r3, #0]
 802985e:	f022 0204 	bic.w	r2, r2, #4
 8029862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8029864:	68fb      	ldr	r3, [r7, #12]
 8029866:	681b      	ldr	r3, [r3, #0]
 8029868:	6999      	ldr	r1, [r3, #24]
 802986a:	68bb      	ldr	r3, [r7, #8]
 802986c:	691a      	ldr	r2, [r3, #16]
 802986e:	68fb      	ldr	r3, [r7, #12]
 8029870:	681b      	ldr	r3, [r3, #0]
 8029872:	430a      	orrs	r2, r1
 8029874:	619a      	str	r2, [r3, #24]
      break;
 8029876:	e062      	b.n	802993e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8029878:	68fb      	ldr	r3, [r7, #12]
 802987a:	681b      	ldr	r3, [r3, #0]
 802987c:	68b9      	ldr	r1, [r7, #8]
 802987e:	4618      	mov	r0, r3
 8029880:	f000 fa5a 	bl	8029d38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8029884:	68fb      	ldr	r3, [r7, #12]
 8029886:	681b      	ldr	r3, [r3, #0]
 8029888:	699a      	ldr	r2, [r3, #24]
 802988a:	68fb      	ldr	r3, [r7, #12]
 802988c:	681b      	ldr	r3, [r3, #0]
 802988e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8029892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8029894:	68fb      	ldr	r3, [r7, #12]
 8029896:	681b      	ldr	r3, [r3, #0]
 8029898:	699a      	ldr	r2, [r3, #24]
 802989a:	68fb      	ldr	r3, [r7, #12]
 802989c:	681b      	ldr	r3, [r3, #0]
 802989e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80298a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80298a4:	68fb      	ldr	r3, [r7, #12]
 80298a6:	681b      	ldr	r3, [r3, #0]
 80298a8:	6999      	ldr	r1, [r3, #24]
 80298aa:	68bb      	ldr	r3, [r7, #8]
 80298ac:	691b      	ldr	r3, [r3, #16]
 80298ae:	021a      	lsls	r2, r3, #8
 80298b0:	68fb      	ldr	r3, [r7, #12]
 80298b2:	681b      	ldr	r3, [r3, #0]
 80298b4:	430a      	orrs	r2, r1
 80298b6:	619a      	str	r2, [r3, #24]
      break;
 80298b8:	e041      	b.n	802993e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80298ba:	68fb      	ldr	r3, [r7, #12]
 80298bc:	681b      	ldr	r3, [r3, #0]
 80298be:	68b9      	ldr	r1, [r7, #8]
 80298c0:	4618      	mov	r0, r3
 80298c2:	f000 faaf 	bl	8029e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80298c6:	68fb      	ldr	r3, [r7, #12]
 80298c8:	681b      	ldr	r3, [r3, #0]
 80298ca:	69da      	ldr	r2, [r3, #28]
 80298cc:	68fb      	ldr	r3, [r7, #12]
 80298ce:	681b      	ldr	r3, [r3, #0]
 80298d0:	f042 0208 	orr.w	r2, r2, #8
 80298d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80298d6:	68fb      	ldr	r3, [r7, #12]
 80298d8:	681b      	ldr	r3, [r3, #0]
 80298da:	69da      	ldr	r2, [r3, #28]
 80298dc:	68fb      	ldr	r3, [r7, #12]
 80298de:	681b      	ldr	r3, [r3, #0]
 80298e0:	f022 0204 	bic.w	r2, r2, #4
 80298e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80298e6:	68fb      	ldr	r3, [r7, #12]
 80298e8:	681b      	ldr	r3, [r3, #0]
 80298ea:	69d9      	ldr	r1, [r3, #28]
 80298ec:	68bb      	ldr	r3, [r7, #8]
 80298ee:	691a      	ldr	r2, [r3, #16]
 80298f0:	68fb      	ldr	r3, [r7, #12]
 80298f2:	681b      	ldr	r3, [r3, #0]
 80298f4:	430a      	orrs	r2, r1
 80298f6:	61da      	str	r2, [r3, #28]
      break;
 80298f8:	e021      	b.n	802993e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80298fa:	68fb      	ldr	r3, [r7, #12]
 80298fc:	681b      	ldr	r3, [r3, #0]
 80298fe:	68b9      	ldr	r1, [r7, #8]
 8029900:	4618      	mov	r0, r3
 8029902:	f000 fb03 	bl	8029f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8029906:	68fb      	ldr	r3, [r7, #12]
 8029908:	681b      	ldr	r3, [r3, #0]
 802990a:	69da      	ldr	r2, [r3, #28]
 802990c:	68fb      	ldr	r3, [r7, #12]
 802990e:	681b      	ldr	r3, [r3, #0]
 8029910:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8029914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8029916:	68fb      	ldr	r3, [r7, #12]
 8029918:	681b      	ldr	r3, [r3, #0]
 802991a:	69da      	ldr	r2, [r3, #28]
 802991c:	68fb      	ldr	r3, [r7, #12]
 802991e:	681b      	ldr	r3, [r3, #0]
 8029920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8029924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8029926:	68fb      	ldr	r3, [r7, #12]
 8029928:	681b      	ldr	r3, [r3, #0]
 802992a:	69d9      	ldr	r1, [r3, #28]
 802992c:	68bb      	ldr	r3, [r7, #8]
 802992e:	691b      	ldr	r3, [r3, #16]
 8029930:	021a      	lsls	r2, r3, #8
 8029932:	68fb      	ldr	r3, [r7, #12]
 8029934:	681b      	ldr	r3, [r3, #0]
 8029936:	430a      	orrs	r2, r1
 8029938:	61da      	str	r2, [r3, #28]
      break;
 802993a:	e000      	b.n	802993e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 802993c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 802993e:	68fb      	ldr	r3, [r7, #12]
 8029940:	2201      	movs	r2, #1
 8029942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029946:	68fb      	ldr	r3, [r7, #12]
 8029948:	2200      	movs	r2, #0
 802994a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802994e:	2300      	movs	r3, #0
}
 8029950:	4618      	mov	r0, r3
 8029952:	3710      	adds	r7, #16
 8029954:	46bd      	mov	sp, r7
 8029956:	bd80      	pop	{r7, pc}

08029958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8029958:	b580      	push	{r7, lr}
 802995a:	b084      	sub	sp, #16
 802995c:	af00      	add	r7, sp, #0
 802995e:	6078      	str	r0, [r7, #4]
 8029960:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8029962:	687b      	ldr	r3, [r7, #4]
 8029964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029968:	2b01      	cmp	r3, #1
 802996a:	d101      	bne.n	8029970 <HAL_TIM_ConfigClockSource+0x18>
 802996c:	2302      	movs	r3, #2
 802996e:	e0a6      	b.n	8029abe <HAL_TIM_ConfigClockSource+0x166>
 8029970:	687b      	ldr	r3, [r7, #4]
 8029972:	2201      	movs	r2, #1
 8029974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029978:	687b      	ldr	r3, [r7, #4]
 802997a:	2202      	movs	r2, #2
 802997c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8029980:	687b      	ldr	r3, [r7, #4]
 8029982:	681b      	ldr	r3, [r3, #0]
 8029984:	689b      	ldr	r3, [r3, #8]
 8029986:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8029988:	68fb      	ldr	r3, [r7, #12]
 802998a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802998e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029990:	68fb      	ldr	r3, [r7, #12]
 8029992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029996:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8029998:	687b      	ldr	r3, [r7, #4]
 802999a:	681b      	ldr	r3, [r3, #0]
 802999c:	68fa      	ldr	r2, [r7, #12]
 802999e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80299a0:	683b      	ldr	r3, [r7, #0]
 80299a2:	681b      	ldr	r3, [r3, #0]
 80299a4:	2b40      	cmp	r3, #64	; 0x40
 80299a6:	d067      	beq.n	8029a78 <HAL_TIM_ConfigClockSource+0x120>
 80299a8:	2b40      	cmp	r3, #64	; 0x40
 80299aa:	d80b      	bhi.n	80299c4 <HAL_TIM_ConfigClockSource+0x6c>
 80299ac:	2b10      	cmp	r3, #16
 80299ae:	d073      	beq.n	8029a98 <HAL_TIM_ConfigClockSource+0x140>
 80299b0:	2b10      	cmp	r3, #16
 80299b2:	d802      	bhi.n	80299ba <HAL_TIM_ConfigClockSource+0x62>
 80299b4:	2b00      	cmp	r3, #0
 80299b6:	d06f      	beq.n	8029a98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80299b8:	e078      	b.n	8029aac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80299ba:	2b20      	cmp	r3, #32
 80299bc:	d06c      	beq.n	8029a98 <HAL_TIM_ConfigClockSource+0x140>
 80299be:	2b30      	cmp	r3, #48	; 0x30
 80299c0:	d06a      	beq.n	8029a98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80299c2:	e073      	b.n	8029aac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80299c4:	2b70      	cmp	r3, #112	; 0x70
 80299c6:	d00d      	beq.n	80299e4 <HAL_TIM_ConfigClockSource+0x8c>
 80299c8:	2b70      	cmp	r3, #112	; 0x70
 80299ca:	d804      	bhi.n	80299d6 <HAL_TIM_ConfigClockSource+0x7e>
 80299cc:	2b50      	cmp	r3, #80	; 0x50
 80299ce:	d033      	beq.n	8029a38 <HAL_TIM_ConfigClockSource+0xe0>
 80299d0:	2b60      	cmp	r3, #96	; 0x60
 80299d2:	d041      	beq.n	8029a58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80299d4:	e06a      	b.n	8029aac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80299d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80299da:	d066      	beq.n	8029aaa <HAL_TIM_ConfigClockSource+0x152>
 80299dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80299e0:	d017      	beq.n	8029a12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80299e2:	e063      	b.n	8029aac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80299e4:	687b      	ldr	r3, [r7, #4]
 80299e6:	6818      	ldr	r0, [r3, #0]
 80299e8:	683b      	ldr	r3, [r7, #0]
 80299ea:	6899      	ldr	r1, [r3, #8]
 80299ec:	683b      	ldr	r3, [r7, #0]
 80299ee:	685a      	ldr	r2, [r3, #4]
 80299f0:	683b      	ldr	r3, [r7, #0]
 80299f2:	68db      	ldr	r3, [r3, #12]
 80299f4:	f000 fb5a 	bl	802a0ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80299f8:	687b      	ldr	r3, [r7, #4]
 80299fa:	681b      	ldr	r3, [r3, #0]
 80299fc:	689b      	ldr	r3, [r3, #8]
 80299fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8029a00:	68fb      	ldr	r3, [r7, #12]
 8029a02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8029a06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8029a08:	687b      	ldr	r3, [r7, #4]
 8029a0a:	681b      	ldr	r3, [r3, #0]
 8029a0c:	68fa      	ldr	r2, [r7, #12]
 8029a0e:	609a      	str	r2, [r3, #8]
      break;
 8029a10:	e04c      	b.n	8029aac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8029a12:	687b      	ldr	r3, [r7, #4]
 8029a14:	6818      	ldr	r0, [r3, #0]
 8029a16:	683b      	ldr	r3, [r7, #0]
 8029a18:	6899      	ldr	r1, [r3, #8]
 8029a1a:	683b      	ldr	r3, [r7, #0]
 8029a1c:	685a      	ldr	r2, [r3, #4]
 8029a1e:	683b      	ldr	r3, [r7, #0]
 8029a20:	68db      	ldr	r3, [r3, #12]
 8029a22:	f000 fb43 	bl	802a0ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8029a26:	687b      	ldr	r3, [r7, #4]
 8029a28:	681b      	ldr	r3, [r3, #0]
 8029a2a:	689a      	ldr	r2, [r3, #8]
 8029a2c:	687b      	ldr	r3, [r7, #4]
 8029a2e:	681b      	ldr	r3, [r3, #0]
 8029a30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8029a34:	609a      	str	r2, [r3, #8]
      break;
 8029a36:	e039      	b.n	8029aac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8029a38:	687b      	ldr	r3, [r7, #4]
 8029a3a:	6818      	ldr	r0, [r3, #0]
 8029a3c:	683b      	ldr	r3, [r7, #0]
 8029a3e:	6859      	ldr	r1, [r3, #4]
 8029a40:	683b      	ldr	r3, [r7, #0]
 8029a42:	68db      	ldr	r3, [r3, #12]
 8029a44:	461a      	mov	r2, r3
 8029a46:	f000 fab7 	bl	8029fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8029a4a:	687b      	ldr	r3, [r7, #4]
 8029a4c:	681b      	ldr	r3, [r3, #0]
 8029a4e:	2150      	movs	r1, #80	; 0x50
 8029a50:	4618      	mov	r0, r3
 8029a52:	f000 fb10 	bl	802a076 <TIM_ITRx_SetConfig>
      break;
 8029a56:	e029      	b.n	8029aac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8029a58:	687b      	ldr	r3, [r7, #4]
 8029a5a:	6818      	ldr	r0, [r3, #0]
 8029a5c:	683b      	ldr	r3, [r7, #0]
 8029a5e:	6859      	ldr	r1, [r3, #4]
 8029a60:	683b      	ldr	r3, [r7, #0]
 8029a62:	68db      	ldr	r3, [r3, #12]
 8029a64:	461a      	mov	r2, r3
 8029a66:	f000 fad6 	bl	802a016 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8029a6a:	687b      	ldr	r3, [r7, #4]
 8029a6c:	681b      	ldr	r3, [r3, #0]
 8029a6e:	2160      	movs	r1, #96	; 0x60
 8029a70:	4618      	mov	r0, r3
 8029a72:	f000 fb00 	bl	802a076 <TIM_ITRx_SetConfig>
      break;
 8029a76:	e019      	b.n	8029aac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8029a78:	687b      	ldr	r3, [r7, #4]
 8029a7a:	6818      	ldr	r0, [r3, #0]
 8029a7c:	683b      	ldr	r3, [r7, #0]
 8029a7e:	6859      	ldr	r1, [r3, #4]
 8029a80:	683b      	ldr	r3, [r7, #0]
 8029a82:	68db      	ldr	r3, [r3, #12]
 8029a84:	461a      	mov	r2, r3
 8029a86:	f000 fa97 	bl	8029fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8029a8a:	687b      	ldr	r3, [r7, #4]
 8029a8c:	681b      	ldr	r3, [r3, #0]
 8029a8e:	2140      	movs	r1, #64	; 0x40
 8029a90:	4618      	mov	r0, r3
 8029a92:	f000 faf0 	bl	802a076 <TIM_ITRx_SetConfig>
      break;
 8029a96:	e009      	b.n	8029aac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8029a98:	687b      	ldr	r3, [r7, #4]
 8029a9a:	681a      	ldr	r2, [r3, #0]
 8029a9c:	683b      	ldr	r3, [r7, #0]
 8029a9e:	681b      	ldr	r3, [r3, #0]
 8029aa0:	4619      	mov	r1, r3
 8029aa2:	4610      	mov	r0, r2
 8029aa4:	f000 fae7 	bl	802a076 <TIM_ITRx_SetConfig>
      break;
 8029aa8:	e000      	b.n	8029aac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8029aaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8029aac:	687b      	ldr	r3, [r7, #4]
 8029aae:	2201      	movs	r2, #1
 8029ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029ab4:	687b      	ldr	r3, [r7, #4]
 8029ab6:	2200      	movs	r2, #0
 8029ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029abc:	2300      	movs	r3, #0
}
 8029abe:	4618      	mov	r0, r3
 8029ac0:	3710      	adds	r7, #16
 8029ac2:	46bd      	mov	sp, r7
 8029ac4:	bd80      	pop	{r7, pc}

08029ac6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8029ac6:	b480      	push	{r7}
 8029ac8:	b083      	sub	sp, #12
 8029aca:	af00      	add	r7, sp, #0
 8029acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8029ace:	bf00      	nop
 8029ad0:	370c      	adds	r7, #12
 8029ad2:	46bd      	mov	sp, r7
 8029ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ad8:	4770      	bx	lr

08029ada <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8029ada:	b480      	push	{r7}
 8029adc:	b083      	sub	sp, #12
 8029ade:	af00      	add	r7, sp, #0
 8029ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8029ae2:	bf00      	nop
 8029ae4:	370c      	adds	r7, #12
 8029ae6:	46bd      	mov	sp, r7
 8029ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029aec:	4770      	bx	lr

08029aee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8029aee:	b480      	push	{r7}
 8029af0:	b083      	sub	sp, #12
 8029af2:	af00      	add	r7, sp, #0
 8029af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8029af6:	bf00      	nop
 8029af8:	370c      	adds	r7, #12
 8029afa:	46bd      	mov	sp, r7
 8029afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b00:	4770      	bx	lr

08029b02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8029b02:	b480      	push	{r7}
 8029b04:	b083      	sub	sp, #12
 8029b06:	af00      	add	r7, sp, #0
 8029b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8029b0a:	bf00      	nop
 8029b0c:	370c      	adds	r7, #12
 8029b0e:	46bd      	mov	sp, r7
 8029b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b14:	4770      	bx	lr
	...

08029b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8029b18:	b480      	push	{r7}
 8029b1a:	b085      	sub	sp, #20
 8029b1c:	af00      	add	r7, sp, #0
 8029b1e:	6078      	str	r0, [r7, #4]
 8029b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8029b22:	687b      	ldr	r3, [r7, #4]
 8029b24:	681b      	ldr	r3, [r3, #0]
 8029b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8029b28:	687b      	ldr	r3, [r7, #4]
 8029b2a:	4a40      	ldr	r2, [pc, #256]	; (8029c2c <TIM_Base_SetConfig+0x114>)
 8029b2c:	4293      	cmp	r3, r2
 8029b2e:	d013      	beq.n	8029b58 <TIM_Base_SetConfig+0x40>
 8029b30:	687b      	ldr	r3, [r7, #4]
 8029b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029b36:	d00f      	beq.n	8029b58 <TIM_Base_SetConfig+0x40>
 8029b38:	687b      	ldr	r3, [r7, #4]
 8029b3a:	4a3d      	ldr	r2, [pc, #244]	; (8029c30 <TIM_Base_SetConfig+0x118>)
 8029b3c:	4293      	cmp	r3, r2
 8029b3e:	d00b      	beq.n	8029b58 <TIM_Base_SetConfig+0x40>
 8029b40:	687b      	ldr	r3, [r7, #4]
 8029b42:	4a3c      	ldr	r2, [pc, #240]	; (8029c34 <TIM_Base_SetConfig+0x11c>)
 8029b44:	4293      	cmp	r3, r2
 8029b46:	d007      	beq.n	8029b58 <TIM_Base_SetConfig+0x40>
 8029b48:	687b      	ldr	r3, [r7, #4]
 8029b4a:	4a3b      	ldr	r2, [pc, #236]	; (8029c38 <TIM_Base_SetConfig+0x120>)
 8029b4c:	4293      	cmp	r3, r2
 8029b4e:	d003      	beq.n	8029b58 <TIM_Base_SetConfig+0x40>
 8029b50:	687b      	ldr	r3, [r7, #4]
 8029b52:	4a3a      	ldr	r2, [pc, #232]	; (8029c3c <TIM_Base_SetConfig+0x124>)
 8029b54:	4293      	cmp	r3, r2
 8029b56:	d108      	bne.n	8029b6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8029b58:	68fb      	ldr	r3, [r7, #12]
 8029b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8029b60:	683b      	ldr	r3, [r7, #0]
 8029b62:	685b      	ldr	r3, [r3, #4]
 8029b64:	68fa      	ldr	r2, [r7, #12]
 8029b66:	4313      	orrs	r3, r2
 8029b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8029b6a:	687b      	ldr	r3, [r7, #4]
 8029b6c:	4a2f      	ldr	r2, [pc, #188]	; (8029c2c <TIM_Base_SetConfig+0x114>)
 8029b6e:	4293      	cmp	r3, r2
 8029b70:	d02b      	beq.n	8029bca <TIM_Base_SetConfig+0xb2>
 8029b72:	687b      	ldr	r3, [r7, #4]
 8029b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029b78:	d027      	beq.n	8029bca <TIM_Base_SetConfig+0xb2>
 8029b7a:	687b      	ldr	r3, [r7, #4]
 8029b7c:	4a2c      	ldr	r2, [pc, #176]	; (8029c30 <TIM_Base_SetConfig+0x118>)
 8029b7e:	4293      	cmp	r3, r2
 8029b80:	d023      	beq.n	8029bca <TIM_Base_SetConfig+0xb2>
 8029b82:	687b      	ldr	r3, [r7, #4]
 8029b84:	4a2b      	ldr	r2, [pc, #172]	; (8029c34 <TIM_Base_SetConfig+0x11c>)
 8029b86:	4293      	cmp	r3, r2
 8029b88:	d01f      	beq.n	8029bca <TIM_Base_SetConfig+0xb2>
 8029b8a:	687b      	ldr	r3, [r7, #4]
 8029b8c:	4a2a      	ldr	r2, [pc, #168]	; (8029c38 <TIM_Base_SetConfig+0x120>)
 8029b8e:	4293      	cmp	r3, r2
 8029b90:	d01b      	beq.n	8029bca <TIM_Base_SetConfig+0xb2>
 8029b92:	687b      	ldr	r3, [r7, #4]
 8029b94:	4a29      	ldr	r2, [pc, #164]	; (8029c3c <TIM_Base_SetConfig+0x124>)
 8029b96:	4293      	cmp	r3, r2
 8029b98:	d017      	beq.n	8029bca <TIM_Base_SetConfig+0xb2>
 8029b9a:	687b      	ldr	r3, [r7, #4]
 8029b9c:	4a28      	ldr	r2, [pc, #160]	; (8029c40 <TIM_Base_SetConfig+0x128>)
 8029b9e:	4293      	cmp	r3, r2
 8029ba0:	d013      	beq.n	8029bca <TIM_Base_SetConfig+0xb2>
 8029ba2:	687b      	ldr	r3, [r7, #4]
 8029ba4:	4a27      	ldr	r2, [pc, #156]	; (8029c44 <TIM_Base_SetConfig+0x12c>)
 8029ba6:	4293      	cmp	r3, r2
 8029ba8:	d00f      	beq.n	8029bca <TIM_Base_SetConfig+0xb2>
 8029baa:	687b      	ldr	r3, [r7, #4]
 8029bac:	4a26      	ldr	r2, [pc, #152]	; (8029c48 <TIM_Base_SetConfig+0x130>)
 8029bae:	4293      	cmp	r3, r2
 8029bb0:	d00b      	beq.n	8029bca <TIM_Base_SetConfig+0xb2>
 8029bb2:	687b      	ldr	r3, [r7, #4]
 8029bb4:	4a25      	ldr	r2, [pc, #148]	; (8029c4c <TIM_Base_SetConfig+0x134>)
 8029bb6:	4293      	cmp	r3, r2
 8029bb8:	d007      	beq.n	8029bca <TIM_Base_SetConfig+0xb2>
 8029bba:	687b      	ldr	r3, [r7, #4]
 8029bbc:	4a24      	ldr	r2, [pc, #144]	; (8029c50 <TIM_Base_SetConfig+0x138>)
 8029bbe:	4293      	cmp	r3, r2
 8029bc0:	d003      	beq.n	8029bca <TIM_Base_SetConfig+0xb2>
 8029bc2:	687b      	ldr	r3, [r7, #4]
 8029bc4:	4a23      	ldr	r2, [pc, #140]	; (8029c54 <TIM_Base_SetConfig+0x13c>)
 8029bc6:	4293      	cmp	r3, r2
 8029bc8:	d108      	bne.n	8029bdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8029bca:	68fb      	ldr	r3, [r7, #12]
 8029bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8029bd2:	683b      	ldr	r3, [r7, #0]
 8029bd4:	68db      	ldr	r3, [r3, #12]
 8029bd6:	68fa      	ldr	r2, [r7, #12]
 8029bd8:	4313      	orrs	r3, r2
 8029bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8029bdc:	68fb      	ldr	r3, [r7, #12]
 8029bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8029be2:	683b      	ldr	r3, [r7, #0]
 8029be4:	695b      	ldr	r3, [r3, #20]
 8029be6:	4313      	orrs	r3, r2
 8029be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8029bea:	687b      	ldr	r3, [r7, #4]
 8029bec:	68fa      	ldr	r2, [r7, #12]
 8029bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8029bf0:	683b      	ldr	r3, [r7, #0]
 8029bf2:	689a      	ldr	r2, [r3, #8]
 8029bf4:	687b      	ldr	r3, [r7, #4]
 8029bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8029bf8:	683b      	ldr	r3, [r7, #0]
 8029bfa:	681a      	ldr	r2, [r3, #0]
 8029bfc:	687b      	ldr	r3, [r7, #4]
 8029bfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8029c00:	687b      	ldr	r3, [r7, #4]
 8029c02:	4a0a      	ldr	r2, [pc, #40]	; (8029c2c <TIM_Base_SetConfig+0x114>)
 8029c04:	4293      	cmp	r3, r2
 8029c06:	d003      	beq.n	8029c10 <TIM_Base_SetConfig+0xf8>
 8029c08:	687b      	ldr	r3, [r7, #4]
 8029c0a:	4a0c      	ldr	r2, [pc, #48]	; (8029c3c <TIM_Base_SetConfig+0x124>)
 8029c0c:	4293      	cmp	r3, r2
 8029c0e:	d103      	bne.n	8029c18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8029c10:	683b      	ldr	r3, [r7, #0]
 8029c12:	691a      	ldr	r2, [r3, #16]
 8029c14:	687b      	ldr	r3, [r7, #4]
 8029c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8029c18:	687b      	ldr	r3, [r7, #4]
 8029c1a:	2201      	movs	r2, #1
 8029c1c:	615a      	str	r2, [r3, #20]
}
 8029c1e:	bf00      	nop
 8029c20:	3714      	adds	r7, #20
 8029c22:	46bd      	mov	sp, r7
 8029c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c28:	4770      	bx	lr
 8029c2a:	bf00      	nop
 8029c2c:	40010000 	.word	0x40010000
 8029c30:	40000400 	.word	0x40000400
 8029c34:	40000800 	.word	0x40000800
 8029c38:	40000c00 	.word	0x40000c00
 8029c3c:	40010400 	.word	0x40010400
 8029c40:	40014000 	.word	0x40014000
 8029c44:	40014400 	.word	0x40014400
 8029c48:	40014800 	.word	0x40014800
 8029c4c:	40001800 	.word	0x40001800
 8029c50:	40001c00 	.word	0x40001c00
 8029c54:	40002000 	.word	0x40002000

08029c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029c58:	b480      	push	{r7}
 8029c5a:	b087      	sub	sp, #28
 8029c5c:	af00      	add	r7, sp, #0
 8029c5e:	6078      	str	r0, [r7, #4]
 8029c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029c62:	687b      	ldr	r3, [r7, #4]
 8029c64:	6a1b      	ldr	r3, [r3, #32]
 8029c66:	f023 0201 	bic.w	r2, r3, #1
 8029c6a:	687b      	ldr	r3, [r7, #4]
 8029c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029c6e:	687b      	ldr	r3, [r7, #4]
 8029c70:	6a1b      	ldr	r3, [r3, #32]
 8029c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029c74:	687b      	ldr	r3, [r7, #4]
 8029c76:	685b      	ldr	r3, [r3, #4]
 8029c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029c7a:	687b      	ldr	r3, [r7, #4]
 8029c7c:	699b      	ldr	r3, [r3, #24]
 8029c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8029c80:	68fb      	ldr	r3, [r7, #12]
 8029c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8029c88:	68fb      	ldr	r3, [r7, #12]
 8029c8a:	f023 0303 	bic.w	r3, r3, #3
 8029c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029c90:	683b      	ldr	r3, [r7, #0]
 8029c92:	681b      	ldr	r3, [r3, #0]
 8029c94:	68fa      	ldr	r2, [r7, #12]
 8029c96:	4313      	orrs	r3, r2
 8029c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8029c9a:	697b      	ldr	r3, [r7, #20]
 8029c9c:	f023 0302 	bic.w	r3, r3, #2
 8029ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8029ca2:	683b      	ldr	r3, [r7, #0]
 8029ca4:	689b      	ldr	r3, [r3, #8]
 8029ca6:	697a      	ldr	r2, [r7, #20]
 8029ca8:	4313      	orrs	r3, r2
 8029caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8029cac:	687b      	ldr	r3, [r7, #4]
 8029cae:	4a20      	ldr	r2, [pc, #128]	; (8029d30 <TIM_OC1_SetConfig+0xd8>)
 8029cb0:	4293      	cmp	r3, r2
 8029cb2:	d003      	beq.n	8029cbc <TIM_OC1_SetConfig+0x64>
 8029cb4:	687b      	ldr	r3, [r7, #4]
 8029cb6:	4a1f      	ldr	r2, [pc, #124]	; (8029d34 <TIM_OC1_SetConfig+0xdc>)
 8029cb8:	4293      	cmp	r3, r2
 8029cba:	d10c      	bne.n	8029cd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8029cbc:	697b      	ldr	r3, [r7, #20]
 8029cbe:	f023 0308 	bic.w	r3, r3, #8
 8029cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8029cc4:	683b      	ldr	r3, [r7, #0]
 8029cc6:	68db      	ldr	r3, [r3, #12]
 8029cc8:	697a      	ldr	r2, [r7, #20]
 8029cca:	4313      	orrs	r3, r2
 8029ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8029cce:	697b      	ldr	r3, [r7, #20]
 8029cd0:	f023 0304 	bic.w	r3, r3, #4
 8029cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029cd6:	687b      	ldr	r3, [r7, #4]
 8029cd8:	4a15      	ldr	r2, [pc, #84]	; (8029d30 <TIM_OC1_SetConfig+0xd8>)
 8029cda:	4293      	cmp	r3, r2
 8029cdc:	d003      	beq.n	8029ce6 <TIM_OC1_SetConfig+0x8e>
 8029cde:	687b      	ldr	r3, [r7, #4]
 8029ce0:	4a14      	ldr	r2, [pc, #80]	; (8029d34 <TIM_OC1_SetConfig+0xdc>)
 8029ce2:	4293      	cmp	r3, r2
 8029ce4:	d111      	bne.n	8029d0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8029ce6:	693b      	ldr	r3, [r7, #16]
 8029ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8029cee:	693b      	ldr	r3, [r7, #16]
 8029cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8029cf6:	683b      	ldr	r3, [r7, #0]
 8029cf8:	695b      	ldr	r3, [r3, #20]
 8029cfa:	693a      	ldr	r2, [r7, #16]
 8029cfc:	4313      	orrs	r3, r2
 8029cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8029d00:	683b      	ldr	r3, [r7, #0]
 8029d02:	699b      	ldr	r3, [r3, #24]
 8029d04:	693a      	ldr	r2, [r7, #16]
 8029d06:	4313      	orrs	r3, r2
 8029d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029d0a:	687b      	ldr	r3, [r7, #4]
 8029d0c:	693a      	ldr	r2, [r7, #16]
 8029d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029d10:	687b      	ldr	r3, [r7, #4]
 8029d12:	68fa      	ldr	r2, [r7, #12]
 8029d14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8029d16:	683b      	ldr	r3, [r7, #0]
 8029d18:	685a      	ldr	r2, [r3, #4]
 8029d1a:	687b      	ldr	r3, [r7, #4]
 8029d1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029d1e:	687b      	ldr	r3, [r7, #4]
 8029d20:	697a      	ldr	r2, [r7, #20]
 8029d22:	621a      	str	r2, [r3, #32]
}
 8029d24:	bf00      	nop
 8029d26:	371c      	adds	r7, #28
 8029d28:	46bd      	mov	sp, r7
 8029d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d2e:	4770      	bx	lr
 8029d30:	40010000 	.word	0x40010000
 8029d34:	40010400 	.word	0x40010400

08029d38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029d38:	b480      	push	{r7}
 8029d3a:	b087      	sub	sp, #28
 8029d3c:	af00      	add	r7, sp, #0
 8029d3e:	6078      	str	r0, [r7, #4]
 8029d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029d42:	687b      	ldr	r3, [r7, #4]
 8029d44:	6a1b      	ldr	r3, [r3, #32]
 8029d46:	f023 0210 	bic.w	r2, r3, #16
 8029d4a:	687b      	ldr	r3, [r7, #4]
 8029d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029d4e:	687b      	ldr	r3, [r7, #4]
 8029d50:	6a1b      	ldr	r3, [r3, #32]
 8029d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029d54:	687b      	ldr	r3, [r7, #4]
 8029d56:	685b      	ldr	r3, [r3, #4]
 8029d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029d5a:	687b      	ldr	r3, [r7, #4]
 8029d5c:	699b      	ldr	r3, [r3, #24]
 8029d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8029d60:	68fb      	ldr	r3, [r7, #12]
 8029d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8029d68:	68fb      	ldr	r3, [r7, #12]
 8029d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029d70:	683b      	ldr	r3, [r7, #0]
 8029d72:	681b      	ldr	r3, [r3, #0]
 8029d74:	021b      	lsls	r3, r3, #8
 8029d76:	68fa      	ldr	r2, [r7, #12]
 8029d78:	4313      	orrs	r3, r2
 8029d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8029d7c:	697b      	ldr	r3, [r7, #20]
 8029d7e:	f023 0320 	bic.w	r3, r3, #32
 8029d82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8029d84:	683b      	ldr	r3, [r7, #0]
 8029d86:	689b      	ldr	r3, [r3, #8]
 8029d88:	011b      	lsls	r3, r3, #4
 8029d8a:	697a      	ldr	r2, [r7, #20]
 8029d8c:	4313      	orrs	r3, r2
 8029d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8029d90:	687b      	ldr	r3, [r7, #4]
 8029d92:	4a22      	ldr	r2, [pc, #136]	; (8029e1c <TIM_OC2_SetConfig+0xe4>)
 8029d94:	4293      	cmp	r3, r2
 8029d96:	d003      	beq.n	8029da0 <TIM_OC2_SetConfig+0x68>
 8029d98:	687b      	ldr	r3, [r7, #4]
 8029d9a:	4a21      	ldr	r2, [pc, #132]	; (8029e20 <TIM_OC2_SetConfig+0xe8>)
 8029d9c:	4293      	cmp	r3, r2
 8029d9e:	d10d      	bne.n	8029dbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8029da0:	697b      	ldr	r3, [r7, #20]
 8029da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8029da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8029da8:	683b      	ldr	r3, [r7, #0]
 8029daa:	68db      	ldr	r3, [r3, #12]
 8029dac:	011b      	lsls	r3, r3, #4
 8029dae:	697a      	ldr	r2, [r7, #20]
 8029db0:	4313      	orrs	r3, r2
 8029db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8029db4:	697b      	ldr	r3, [r7, #20]
 8029db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029dba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029dbc:	687b      	ldr	r3, [r7, #4]
 8029dbe:	4a17      	ldr	r2, [pc, #92]	; (8029e1c <TIM_OC2_SetConfig+0xe4>)
 8029dc0:	4293      	cmp	r3, r2
 8029dc2:	d003      	beq.n	8029dcc <TIM_OC2_SetConfig+0x94>
 8029dc4:	687b      	ldr	r3, [r7, #4]
 8029dc6:	4a16      	ldr	r2, [pc, #88]	; (8029e20 <TIM_OC2_SetConfig+0xe8>)
 8029dc8:	4293      	cmp	r3, r2
 8029dca:	d113      	bne.n	8029df4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8029dcc:	693b      	ldr	r3, [r7, #16]
 8029dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8029dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8029dd4:	693b      	ldr	r3, [r7, #16]
 8029dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8029ddc:	683b      	ldr	r3, [r7, #0]
 8029dde:	695b      	ldr	r3, [r3, #20]
 8029de0:	009b      	lsls	r3, r3, #2
 8029de2:	693a      	ldr	r2, [r7, #16]
 8029de4:	4313      	orrs	r3, r2
 8029de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8029de8:	683b      	ldr	r3, [r7, #0]
 8029dea:	699b      	ldr	r3, [r3, #24]
 8029dec:	009b      	lsls	r3, r3, #2
 8029dee:	693a      	ldr	r2, [r7, #16]
 8029df0:	4313      	orrs	r3, r2
 8029df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029df4:	687b      	ldr	r3, [r7, #4]
 8029df6:	693a      	ldr	r2, [r7, #16]
 8029df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029dfa:	687b      	ldr	r3, [r7, #4]
 8029dfc:	68fa      	ldr	r2, [r7, #12]
 8029dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8029e00:	683b      	ldr	r3, [r7, #0]
 8029e02:	685a      	ldr	r2, [r3, #4]
 8029e04:	687b      	ldr	r3, [r7, #4]
 8029e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029e08:	687b      	ldr	r3, [r7, #4]
 8029e0a:	697a      	ldr	r2, [r7, #20]
 8029e0c:	621a      	str	r2, [r3, #32]
}
 8029e0e:	bf00      	nop
 8029e10:	371c      	adds	r7, #28
 8029e12:	46bd      	mov	sp, r7
 8029e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e18:	4770      	bx	lr
 8029e1a:	bf00      	nop
 8029e1c:	40010000 	.word	0x40010000
 8029e20:	40010400 	.word	0x40010400

08029e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029e24:	b480      	push	{r7}
 8029e26:	b087      	sub	sp, #28
 8029e28:	af00      	add	r7, sp, #0
 8029e2a:	6078      	str	r0, [r7, #4]
 8029e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8029e2e:	687b      	ldr	r3, [r7, #4]
 8029e30:	6a1b      	ldr	r3, [r3, #32]
 8029e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8029e36:	687b      	ldr	r3, [r7, #4]
 8029e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029e3a:	687b      	ldr	r3, [r7, #4]
 8029e3c:	6a1b      	ldr	r3, [r3, #32]
 8029e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029e40:	687b      	ldr	r3, [r7, #4]
 8029e42:	685b      	ldr	r3, [r3, #4]
 8029e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8029e46:	687b      	ldr	r3, [r7, #4]
 8029e48:	69db      	ldr	r3, [r3, #28]
 8029e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8029e4c:	68fb      	ldr	r3, [r7, #12]
 8029e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8029e54:	68fb      	ldr	r3, [r7, #12]
 8029e56:	f023 0303 	bic.w	r3, r3, #3
 8029e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029e5c:	683b      	ldr	r3, [r7, #0]
 8029e5e:	681b      	ldr	r3, [r3, #0]
 8029e60:	68fa      	ldr	r2, [r7, #12]
 8029e62:	4313      	orrs	r3, r2
 8029e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8029e66:	697b      	ldr	r3, [r7, #20]
 8029e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8029e6e:	683b      	ldr	r3, [r7, #0]
 8029e70:	689b      	ldr	r3, [r3, #8]
 8029e72:	021b      	lsls	r3, r3, #8
 8029e74:	697a      	ldr	r2, [r7, #20]
 8029e76:	4313      	orrs	r3, r2
 8029e78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8029e7a:	687b      	ldr	r3, [r7, #4]
 8029e7c:	4a21      	ldr	r2, [pc, #132]	; (8029f04 <TIM_OC3_SetConfig+0xe0>)
 8029e7e:	4293      	cmp	r3, r2
 8029e80:	d003      	beq.n	8029e8a <TIM_OC3_SetConfig+0x66>
 8029e82:	687b      	ldr	r3, [r7, #4]
 8029e84:	4a20      	ldr	r2, [pc, #128]	; (8029f08 <TIM_OC3_SetConfig+0xe4>)
 8029e86:	4293      	cmp	r3, r2
 8029e88:	d10d      	bne.n	8029ea6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8029e8a:	697b      	ldr	r3, [r7, #20]
 8029e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8029e92:	683b      	ldr	r3, [r7, #0]
 8029e94:	68db      	ldr	r3, [r3, #12]
 8029e96:	021b      	lsls	r3, r3, #8
 8029e98:	697a      	ldr	r2, [r7, #20]
 8029e9a:	4313      	orrs	r3, r2
 8029e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8029e9e:	697b      	ldr	r3, [r7, #20]
 8029ea0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8029ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029ea6:	687b      	ldr	r3, [r7, #4]
 8029ea8:	4a16      	ldr	r2, [pc, #88]	; (8029f04 <TIM_OC3_SetConfig+0xe0>)
 8029eaa:	4293      	cmp	r3, r2
 8029eac:	d003      	beq.n	8029eb6 <TIM_OC3_SetConfig+0x92>
 8029eae:	687b      	ldr	r3, [r7, #4]
 8029eb0:	4a15      	ldr	r2, [pc, #84]	; (8029f08 <TIM_OC3_SetConfig+0xe4>)
 8029eb2:	4293      	cmp	r3, r2
 8029eb4:	d113      	bne.n	8029ede <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8029eb6:	693b      	ldr	r3, [r7, #16]
 8029eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8029ebe:	693b      	ldr	r3, [r7, #16]
 8029ec0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8029ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8029ec6:	683b      	ldr	r3, [r7, #0]
 8029ec8:	695b      	ldr	r3, [r3, #20]
 8029eca:	011b      	lsls	r3, r3, #4
 8029ecc:	693a      	ldr	r2, [r7, #16]
 8029ece:	4313      	orrs	r3, r2
 8029ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8029ed2:	683b      	ldr	r3, [r7, #0]
 8029ed4:	699b      	ldr	r3, [r3, #24]
 8029ed6:	011b      	lsls	r3, r3, #4
 8029ed8:	693a      	ldr	r2, [r7, #16]
 8029eda:	4313      	orrs	r3, r2
 8029edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029ede:	687b      	ldr	r3, [r7, #4]
 8029ee0:	693a      	ldr	r2, [r7, #16]
 8029ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8029ee4:	687b      	ldr	r3, [r7, #4]
 8029ee6:	68fa      	ldr	r2, [r7, #12]
 8029ee8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8029eea:	683b      	ldr	r3, [r7, #0]
 8029eec:	685a      	ldr	r2, [r3, #4]
 8029eee:	687b      	ldr	r3, [r7, #4]
 8029ef0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029ef2:	687b      	ldr	r3, [r7, #4]
 8029ef4:	697a      	ldr	r2, [r7, #20]
 8029ef6:	621a      	str	r2, [r3, #32]
}
 8029ef8:	bf00      	nop
 8029efa:	371c      	adds	r7, #28
 8029efc:	46bd      	mov	sp, r7
 8029efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f02:	4770      	bx	lr
 8029f04:	40010000 	.word	0x40010000
 8029f08:	40010400 	.word	0x40010400

08029f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029f0c:	b480      	push	{r7}
 8029f0e:	b087      	sub	sp, #28
 8029f10:	af00      	add	r7, sp, #0
 8029f12:	6078      	str	r0, [r7, #4]
 8029f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8029f16:	687b      	ldr	r3, [r7, #4]
 8029f18:	6a1b      	ldr	r3, [r3, #32]
 8029f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8029f1e:	687b      	ldr	r3, [r7, #4]
 8029f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029f22:	687b      	ldr	r3, [r7, #4]
 8029f24:	6a1b      	ldr	r3, [r3, #32]
 8029f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029f28:	687b      	ldr	r3, [r7, #4]
 8029f2a:	685b      	ldr	r3, [r3, #4]
 8029f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8029f2e:	687b      	ldr	r3, [r7, #4]
 8029f30:	69db      	ldr	r3, [r3, #28]
 8029f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8029f34:	68fb      	ldr	r3, [r7, #12]
 8029f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8029f3c:	68fb      	ldr	r3, [r7, #12]
 8029f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029f44:	683b      	ldr	r3, [r7, #0]
 8029f46:	681b      	ldr	r3, [r3, #0]
 8029f48:	021b      	lsls	r3, r3, #8
 8029f4a:	68fa      	ldr	r2, [r7, #12]
 8029f4c:	4313      	orrs	r3, r2
 8029f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8029f50:	693b      	ldr	r3, [r7, #16]
 8029f52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8029f56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8029f58:	683b      	ldr	r3, [r7, #0]
 8029f5a:	689b      	ldr	r3, [r3, #8]
 8029f5c:	031b      	lsls	r3, r3, #12
 8029f5e:	693a      	ldr	r2, [r7, #16]
 8029f60:	4313      	orrs	r3, r2
 8029f62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029f64:	687b      	ldr	r3, [r7, #4]
 8029f66:	4a12      	ldr	r2, [pc, #72]	; (8029fb0 <TIM_OC4_SetConfig+0xa4>)
 8029f68:	4293      	cmp	r3, r2
 8029f6a:	d003      	beq.n	8029f74 <TIM_OC4_SetConfig+0x68>
 8029f6c:	687b      	ldr	r3, [r7, #4]
 8029f6e:	4a11      	ldr	r2, [pc, #68]	; (8029fb4 <TIM_OC4_SetConfig+0xa8>)
 8029f70:	4293      	cmp	r3, r2
 8029f72:	d109      	bne.n	8029f88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8029f74:	697b      	ldr	r3, [r7, #20]
 8029f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029f7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8029f7c:	683b      	ldr	r3, [r7, #0]
 8029f7e:	695b      	ldr	r3, [r3, #20]
 8029f80:	019b      	lsls	r3, r3, #6
 8029f82:	697a      	ldr	r2, [r7, #20]
 8029f84:	4313      	orrs	r3, r2
 8029f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029f88:	687b      	ldr	r3, [r7, #4]
 8029f8a:	697a      	ldr	r2, [r7, #20]
 8029f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8029f8e:	687b      	ldr	r3, [r7, #4]
 8029f90:	68fa      	ldr	r2, [r7, #12]
 8029f92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8029f94:	683b      	ldr	r3, [r7, #0]
 8029f96:	685a      	ldr	r2, [r3, #4]
 8029f98:	687b      	ldr	r3, [r7, #4]
 8029f9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029f9c:	687b      	ldr	r3, [r7, #4]
 8029f9e:	693a      	ldr	r2, [r7, #16]
 8029fa0:	621a      	str	r2, [r3, #32]
}
 8029fa2:	bf00      	nop
 8029fa4:	371c      	adds	r7, #28
 8029fa6:	46bd      	mov	sp, r7
 8029fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fac:	4770      	bx	lr
 8029fae:	bf00      	nop
 8029fb0:	40010000 	.word	0x40010000
 8029fb4:	40010400 	.word	0x40010400

08029fb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029fb8:	b480      	push	{r7}
 8029fba:	b087      	sub	sp, #28
 8029fbc:	af00      	add	r7, sp, #0
 8029fbe:	60f8      	str	r0, [r7, #12]
 8029fc0:	60b9      	str	r1, [r7, #8]
 8029fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8029fc4:	68fb      	ldr	r3, [r7, #12]
 8029fc6:	6a1b      	ldr	r3, [r3, #32]
 8029fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029fca:	68fb      	ldr	r3, [r7, #12]
 8029fcc:	6a1b      	ldr	r3, [r3, #32]
 8029fce:	f023 0201 	bic.w	r2, r3, #1
 8029fd2:	68fb      	ldr	r3, [r7, #12]
 8029fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029fd6:	68fb      	ldr	r3, [r7, #12]
 8029fd8:	699b      	ldr	r3, [r3, #24]
 8029fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8029fdc:	693b      	ldr	r3, [r7, #16]
 8029fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8029fe4:	687b      	ldr	r3, [r7, #4]
 8029fe6:	011b      	lsls	r3, r3, #4
 8029fe8:	693a      	ldr	r2, [r7, #16]
 8029fea:	4313      	orrs	r3, r2
 8029fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8029fee:	697b      	ldr	r3, [r7, #20]
 8029ff0:	f023 030a 	bic.w	r3, r3, #10
 8029ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8029ff6:	697a      	ldr	r2, [r7, #20]
 8029ff8:	68bb      	ldr	r3, [r7, #8]
 8029ffa:	4313      	orrs	r3, r2
 8029ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8029ffe:	68fb      	ldr	r3, [r7, #12]
 802a000:	693a      	ldr	r2, [r7, #16]
 802a002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a004:	68fb      	ldr	r3, [r7, #12]
 802a006:	697a      	ldr	r2, [r7, #20]
 802a008:	621a      	str	r2, [r3, #32]
}
 802a00a:	bf00      	nop
 802a00c:	371c      	adds	r7, #28
 802a00e:	46bd      	mov	sp, r7
 802a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a014:	4770      	bx	lr

0802a016 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802a016:	b480      	push	{r7}
 802a018:	b087      	sub	sp, #28
 802a01a:	af00      	add	r7, sp, #0
 802a01c:	60f8      	str	r0, [r7, #12]
 802a01e:	60b9      	str	r1, [r7, #8]
 802a020:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802a022:	68fb      	ldr	r3, [r7, #12]
 802a024:	6a1b      	ldr	r3, [r3, #32]
 802a026:	f023 0210 	bic.w	r2, r3, #16
 802a02a:	68fb      	ldr	r3, [r7, #12]
 802a02c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802a02e:	68fb      	ldr	r3, [r7, #12]
 802a030:	699b      	ldr	r3, [r3, #24]
 802a032:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802a034:	68fb      	ldr	r3, [r7, #12]
 802a036:	6a1b      	ldr	r3, [r3, #32]
 802a038:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802a03a:	697b      	ldr	r3, [r7, #20]
 802a03c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802a040:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802a042:	687b      	ldr	r3, [r7, #4]
 802a044:	031b      	lsls	r3, r3, #12
 802a046:	697a      	ldr	r2, [r7, #20]
 802a048:	4313      	orrs	r3, r2
 802a04a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802a04c:	693b      	ldr	r3, [r7, #16]
 802a04e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802a052:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802a054:	68bb      	ldr	r3, [r7, #8]
 802a056:	011b      	lsls	r3, r3, #4
 802a058:	693a      	ldr	r2, [r7, #16]
 802a05a:	4313      	orrs	r3, r2
 802a05c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802a05e:	68fb      	ldr	r3, [r7, #12]
 802a060:	697a      	ldr	r2, [r7, #20]
 802a062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a064:	68fb      	ldr	r3, [r7, #12]
 802a066:	693a      	ldr	r2, [r7, #16]
 802a068:	621a      	str	r2, [r3, #32]
}
 802a06a:	bf00      	nop
 802a06c:	371c      	adds	r7, #28
 802a06e:	46bd      	mov	sp, r7
 802a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a074:	4770      	bx	lr

0802a076 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802a076:	b480      	push	{r7}
 802a078:	b085      	sub	sp, #20
 802a07a:	af00      	add	r7, sp, #0
 802a07c:	6078      	str	r0, [r7, #4]
 802a07e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802a080:	687b      	ldr	r3, [r7, #4]
 802a082:	689b      	ldr	r3, [r3, #8]
 802a084:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802a086:	68fb      	ldr	r3, [r7, #12]
 802a088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a08c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802a08e:	683a      	ldr	r2, [r7, #0]
 802a090:	68fb      	ldr	r3, [r7, #12]
 802a092:	4313      	orrs	r3, r2
 802a094:	f043 0307 	orr.w	r3, r3, #7
 802a098:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a09a:	687b      	ldr	r3, [r7, #4]
 802a09c:	68fa      	ldr	r2, [r7, #12]
 802a09e:	609a      	str	r2, [r3, #8]
}
 802a0a0:	bf00      	nop
 802a0a2:	3714      	adds	r7, #20
 802a0a4:	46bd      	mov	sp, r7
 802a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0aa:	4770      	bx	lr

0802a0ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802a0ac:	b480      	push	{r7}
 802a0ae:	b087      	sub	sp, #28
 802a0b0:	af00      	add	r7, sp, #0
 802a0b2:	60f8      	str	r0, [r7, #12]
 802a0b4:	60b9      	str	r1, [r7, #8]
 802a0b6:	607a      	str	r2, [r7, #4]
 802a0b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802a0ba:	68fb      	ldr	r3, [r7, #12]
 802a0bc:	689b      	ldr	r3, [r3, #8]
 802a0be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802a0c0:	697b      	ldr	r3, [r7, #20]
 802a0c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802a0c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802a0c8:	683b      	ldr	r3, [r7, #0]
 802a0ca:	021a      	lsls	r2, r3, #8
 802a0cc:	687b      	ldr	r3, [r7, #4]
 802a0ce:	431a      	orrs	r2, r3
 802a0d0:	68bb      	ldr	r3, [r7, #8]
 802a0d2:	4313      	orrs	r3, r2
 802a0d4:	697a      	ldr	r2, [r7, #20]
 802a0d6:	4313      	orrs	r3, r2
 802a0d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a0da:	68fb      	ldr	r3, [r7, #12]
 802a0dc:	697a      	ldr	r2, [r7, #20]
 802a0de:	609a      	str	r2, [r3, #8]
}
 802a0e0:	bf00      	nop
 802a0e2:	371c      	adds	r7, #28
 802a0e4:	46bd      	mov	sp, r7
 802a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0ea:	4770      	bx	lr

0802a0ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 802a0ec:	b480      	push	{r7}
 802a0ee:	b087      	sub	sp, #28
 802a0f0:	af00      	add	r7, sp, #0
 802a0f2:	60f8      	str	r0, [r7, #12]
 802a0f4:	60b9      	str	r1, [r7, #8]
 802a0f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 802a0f8:	68bb      	ldr	r3, [r7, #8]
 802a0fa:	f003 031f 	and.w	r3, r3, #31
 802a0fe:	2201      	movs	r2, #1
 802a100:	fa02 f303 	lsl.w	r3, r2, r3
 802a104:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802a106:	68fb      	ldr	r3, [r7, #12]
 802a108:	6a1a      	ldr	r2, [r3, #32]
 802a10a:	697b      	ldr	r3, [r7, #20]
 802a10c:	43db      	mvns	r3, r3
 802a10e:	401a      	ands	r2, r3
 802a110:	68fb      	ldr	r3, [r7, #12]
 802a112:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802a114:	68fb      	ldr	r3, [r7, #12]
 802a116:	6a1a      	ldr	r2, [r3, #32]
 802a118:	68bb      	ldr	r3, [r7, #8]
 802a11a:	f003 031f 	and.w	r3, r3, #31
 802a11e:	6879      	ldr	r1, [r7, #4]
 802a120:	fa01 f303 	lsl.w	r3, r1, r3
 802a124:	431a      	orrs	r2, r3
 802a126:	68fb      	ldr	r3, [r7, #12]
 802a128:	621a      	str	r2, [r3, #32]
}
 802a12a:	bf00      	nop
 802a12c:	371c      	adds	r7, #28
 802a12e:	46bd      	mov	sp, r7
 802a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a134:	4770      	bx	lr
	...

0802a138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802a138:	b480      	push	{r7}
 802a13a:	b085      	sub	sp, #20
 802a13c:	af00      	add	r7, sp, #0
 802a13e:	6078      	str	r0, [r7, #4]
 802a140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802a142:	687b      	ldr	r3, [r7, #4]
 802a144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a148:	2b01      	cmp	r3, #1
 802a14a:	d101      	bne.n	802a150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802a14c:	2302      	movs	r3, #2
 802a14e:	e05a      	b.n	802a206 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802a150:	687b      	ldr	r3, [r7, #4]
 802a152:	2201      	movs	r2, #1
 802a154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802a158:	687b      	ldr	r3, [r7, #4]
 802a15a:	2202      	movs	r2, #2
 802a15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802a160:	687b      	ldr	r3, [r7, #4]
 802a162:	681b      	ldr	r3, [r3, #0]
 802a164:	685b      	ldr	r3, [r3, #4]
 802a166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802a168:	687b      	ldr	r3, [r7, #4]
 802a16a:	681b      	ldr	r3, [r3, #0]
 802a16c:	689b      	ldr	r3, [r3, #8]
 802a16e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802a170:	68fb      	ldr	r3, [r7, #12]
 802a172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802a178:	683b      	ldr	r3, [r7, #0]
 802a17a:	681b      	ldr	r3, [r3, #0]
 802a17c:	68fa      	ldr	r2, [r7, #12]
 802a17e:	4313      	orrs	r3, r2
 802a180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802a182:	687b      	ldr	r3, [r7, #4]
 802a184:	681b      	ldr	r3, [r3, #0]
 802a186:	68fa      	ldr	r2, [r7, #12]
 802a188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802a18a:	687b      	ldr	r3, [r7, #4]
 802a18c:	681b      	ldr	r3, [r3, #0]
 802a18e:	4a21      	ldr	r2, [pc, #132]	; (802a214 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 802a190:	4293      	cmp	r3, r2
 802a192:	d022      	beq.n	802a1da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a194:	687b      	ldr	r3, [r7, #4]
 802a196:	681b      	ldr	r3, [r3, #0]
 802a198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a19c:	d01d      	beq.n	802a1da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a19e:	687b      	ldr	r3, [r7, #4]
 802a1a0:	681b      	ldr	r3, [r3, #0]
 802a1a2:	4a1d      	ldr	r2, [pc, #116]	; (802a218 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802a1a4:	4293      	cmp	r3, r2
 802a1a6:	d018      	beq.n	802a1da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a1a8:	687b      	ldr	r3, [r7, #4]
 802a1aa:	681b      	ldr	r3, [r3, #0]
 802a1ac:	4a1b      	ldr	r2, [pc, #108]	; (802a21c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802a1ae:	4293      	cmp	r3, r2
 802a1b0:	d013      	beq.n	802a1da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a1b2:	687b      	ldr	r3, [r7, #4]
 802a1b4:	681b      	ldr	r3, [r3, #0]
 802a1b6:	4a1a      	ldr	r2, [pc, #104]	; (802a220 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 802a1b8:	4293      	cmp	r3, r2
 802a1ba:	d00e      	beq.n	802a1da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a1bc:	687b      	ldr	r3, [r7, #4]
 802a1be:	681b      	ldr	r3, [r3, #0]
 802a1c0:	4a18      	ldr	r2, [pc, #96]	; (802a224 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802a1c2:	4293      	cmp	r3, r2
 802a1c4:	d009      	beq.n	802a1da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a1c6:	687b      	ldr	r3, [r7, #4]
 802a1c8:	681b      	ldr	r3, [r3, #0]
 802a1ca:	4a17      	ldr	r2, [pc, #92]	; (802a228 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802a1cc:	4293      	cmp	r3, r2
 802a1ce:	d004      	beq.n	802a1da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a1d0:	687b      	ldr	r3, [r7, #4]
 802a1d2:	681b      	ldr	r3, [r3, #0]
 802a1d4:	4a15      	ldr	r2, [pc, #84]	; (802a22c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802a1d6:	4293      	cmp	r3, r2
 802a1d8:	d10c      	bne.n	802a1f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802a1da:	68bb      	ldr	r3, [r7, #8]
 802a1dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802a1e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802a1e2:	683b      	ldr	r3, [r7, #0]
 802a1e4:	685b      	ldr	r3, [r3, #4]
 802a1e6:	68ba      	ldr	r2, [r7, #8]
 802a1e8:	4313      	orrs	r3, r2
 802a1ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802a1ec:	687b      	ldr	r3, [r7, #4]
 802a1ee:	681b      	ldr	r3, [r3, #0]
 802a1f0:	68ba      	ldr	r2, [r7, #8]
 802a1f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802a1f4:	687b      	ldr	r3, [r7, #4]
 802a1f6:	2201      	movs	r2, #1
 802a1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a1fc:	687b      	ldr	r3, [r7, #4]
 802a1fe:	2200      	movs	r2, #0
 802a200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a204:	2300      	movs	r3, #0
}
 802a206:	4618      	mov	r0, r3
 802a208:	3714      	adds	r7, #20
 802a20a:	46bd      	mov	sp, r7
 802a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a210:	4770      	bx	lr
 802a212:	bf00      	nop
 802a214:	40010000 	.word	0x40010000
 802a218:	40000400 	.word	0x40000400
 802a21c:	40000800 	.word	0x40000800
 802a220:	40000c00 	.word	0x40000c00
 802a224:	40010400 	.word	0x40010400
 802a228:	40014000 	.word	0x40014000
 802a22c:	40001800 	.word	0x40001800

0802a230 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 802a230:	b480      	push	{r7}
 802a232:	b085      	sub	sp, #20
 802a234:	af00      	add	r7, sp, #0
 802a236:	6078      	str	r0, [r7, #4]
 802a238:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802a23a:	2300      	movs	r3, #0
 802a23c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 802a23e:	687b      	ldr	r3, [r7, #4]
 802a240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a244:	2b01      	cmp	r3, #1
 802a246:	d101      	bne.n	802a24c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 802a248:	2302      	movs	r3, #2
 802a24a:	e03d      	b.n	802a2c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 802a24c:	687b      	ldr	r3, [r7, #4]
 802a24e:	2201      	movs	r2, #1
 802a250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 802a254:	68fb      	ldr	r3, [r7, #12]
 802a256:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802a25a:	683b      	ldr	r3, [r7, #0]
 802a25c:	68db      	ldr	r3, [r3, #12]
 802a25e:	4313      	orrs	r3, r2
 802a260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 802a262:	68fb      	ldr	r3, [r7, #12]
 802a264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 802a268:	683b      	ldr	r3, [r7, #0]
 802a26a:	689b      	ldr	r3, [r3, #8]
 802a26c:	4313      	orrs	r3, r2
 802a26e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 802a270:	68fb      	ldr	r3, [r7, #12]
 802a272:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 802a276:	683b      	ldr	r3, [r7, #0]
 802a278:	685b      	ldr	r3, [r3, #4]
 802a27a:	4313      	orrs	r3, r2
 802a27c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 802a27e:	68fb      	ldr	r3, [r7, #12]
 802a280:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 802a284:	683b      	ldr	r3, [r7, #0]
 802a286:	681b      	ldr	r3, [r3, #0]
 802a288:	4313      	orrs	r3, r2
 802a28a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 802a28c:	68fb      	ldr	r3, [r7, #12]
 802a28e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a292:	683b      	ldr	r3, [r7, #0]
 802a294:	691b      	ldr	r3, [r3, #16]
 802a296:	4313      	orrs	r3, r2
 802a298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 802a29a:	68fb      	ldr	r3, [r7, #12]
 802a29c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 802a2a0:	683b      	ldr	r3, [r7, #0]
 802a2a2:	695b      	ldr	r3, [r3, #20]
 802a2a4:	4313      	orrs	r3, r2
 802a2a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 802a2a8:	68fb      	ldr	r3, [r7, #12]
 802a2aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 802a2ae:	683b      	ldr	r3, [r7, #0]
 802a2b0:	69db      	ldr	r3, [r3, #28]
 802a2b2:	4313      	orrs	r3, r2
 802a2b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 802a2b6:	687b      	ldr	r3, [r7, #4]
 802a2b8:	681b      	ldr	r3, [r3, #0]
 802a2ba:	68fa      	ldr	r2, [r7, #12]
 802a2bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 802a2be:	687b      	ldr	r3, [r7, #4]
 802a2c0:	2200      	movs	r2, #0
 802a2c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a2c6:	2300      	movs	r3, #0
}
 802a2c8:	4618      	mov	r0, r3
 802a2ca:	3714      	adds	r7, #20
 802a2cc:	46bd      	mov	sp, r7
 802a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2d2:	4770      	bx	lr

0802a2d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802a2d4:	b480      	push	{r7}
 802a2d6:	b083      	sub	sp, #12
 802a2d8:	af00      	add	r7, sp, #0
 802a2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802a2dc:	bf00      	nop
 802a2de:	370c      	adds	r7, #12
 802a2e0:	46bd      	mov	sp, r7
 802a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2e6:	4770      	bx	lr

0802a2e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802a2e8:	b480      	push	{r7}
 802a2ea:	b083      	sub	sp, #12
 802a2ec:	af00      	add	r7, sp, #0
 802a2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802a2f0:	bf00      	nop
 802a2f2:	370c      	adds	r7, #12
 802a2f4:	46bd      	mov	sp, r7
 802a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2fa:	4770      	bx	lr

0802a2fc <__cxa_guard_acquire>:
 802a2fc:	6803      	ldr	r3, [r0, #0]
 802a2fe:	07db      	lsls	r3, r3, #31
 802a300:	d406      	bmi.n	802a310 <__cxa_guard_acquire+0x14>
 802a302:	7843      	ldrb	r3, [r0, #1]
 802a304:	b103      	cbz	r3, 802a308 <__cxa_guard_acquire+0xc>
 802a306:	deff      	udf	#255	; 0xff
 802a308:	2301      	movs	r3, #1
 802a30a:	7043      	strb	r3, [r0, #1]
 802a30c:	4618      	mov	r0, r3
 802a30e:	4770      	bx	lr
 802a310:	2000      	movs	r0, #0
 802a312:	4770      	bx	lr

0802a314 <__cxa_guard_release>:
 802a314:	2301      	movs	r3, #1
 802a316:	6003      	str	r3, [r0, #0]
 802a318:	4770      	bx	lr
	...

0802a31c <__libc_init_array>:
 802a31c:	b570      	push	{r4, r5, r6, lr}
 802a31e:	4e0d      	ldr	r6, [pc, #52]	; (802a354 <__libc_init_array+0x38>)
 802a320:	4c0d      	ldr	r4, [pc, #52]	; (802a358 <__libc_init_array+0x3c>)
 802a322:	1ba4      	subs	r4, r4, r6
 802a324:	10a4      	asrs	r4, r4, #2
 802a326:	2500      	movs	r5, #0
 802a328:	42a5      	cmp	r5, r4
 802a32a:	d109      	bne.n	802a340 <__libc_init_array+0x24>
 802a32c:	4e0b      	ldr	r6, [pc, #44]	; (802a35c <__libc_init_array+0x40>)
 802a32e:	4c0c      	ldr	r4, [pc, #48]	; (802a360 <__libc_init_array+0x44>)
 802a330:	f000 f82c 	bl	802a38c <_init>
 802a334:	1ba4      	subs	r4, r4, r6
 802a336:	10a4      	asrs	r4, r4, #2
 802a338:	2500      	movs	r5, #0
 802a33a:	42a5      	cmp	r5, r4
 802a33c:	d105      	bne.n	802a34a <__libc_init_array+0x2e>
 802a33e:	bd70      	pop	{r4, r5, r6, pc}
 802a340:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a344:	4798      	blx	r3
 802a346:	3501      	adds	r5, #1
 802a348:	e7ee      	b.n	802a328 <__libc_init_array+0xc>
 802a34a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a34e:	4798      	blx	r3
 802a350:	3501      	adds	r5, #1
 802a352:	e7f2      	b.n	802a33a <__libc_init_array+0x1e>
 802a354:	0802a3cc 	.word	0x0802a3cc
 802a358:	0802a3cc 	.word	0x0802a3cc
 802a35c:	0802a3cc 	.word	0x0802a3cc
 802a360:	0802a3d4 	.word	0x0802a3d4

0802a364 <memcpy>:
 802a364:	b510      	push	{r4, lr}
 802a366:	1e43      	subs	r3, r0, #1
 802a368:	440a      	add	r2, r1
 802a36a:	4291      	cmp	r1, r2
 802a36c:	d100      	bne.n	802a370 <memcpy+0xc>
 802a36e:	bd10      	pop	{r4, pc}
 802a370:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a374:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a378:	e7f7      	b.n	802a36a <memcpy+0x6>

0802a37a <memset>:
 802a37a:	4402      	add	r2, r0
 802a37c:	4603      	mov	r3, r0
 802a37e:	4293      	cmp	r3, r2
 802a380:	d100      	bne.n	802a384 <memset+0xa>
 802a382:	4770      	bx	lr
 802a384:	f803 1b01 	strb.w	r1, [r3], #1
 802a388:	e7f9      	b.n	802a37e <memset+0x4>
	...

0802a38c <_init>:
 802a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a38e:	bf00      	nop
 802a390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a392:	bc08      	pop	{r3}
 802a394:	469e      	mov	lr, r3
 802a396:	4770      	bx	lr

0802a398 <_fini>:
 802a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a39a:	bf00      	nop
 802a39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a39e:	bc08      	pop	{r3}
 802a3a0:	469e      	mov	lr, r3
 802a3a2:	4770      	bx	lr
