
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a828  08020000  08020000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0802a828  0802a828  0002a828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a848  0802a848  0003001c  2**0
                  CONTENTS
  4 .ARM          00000008  0802a848  0802a848  0002a848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a850  0802a850  0003001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a850  0802a850  0002a850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a858  0802a858  0002a858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0802a85c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b90  20000020  0802a878  00030020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb0  0802a878  00030bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023065  00000000  00000000  0003004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003eb8  00000000  00000000  000530b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001538  00000000  00000000  00056f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b0  00000000  00000000  000584a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024d24  00000000  00000000  00059858  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000139a2  00000000  00000000  0007e57c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca9e9  00000000  00000000  00091f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c907  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a54  00000000  00000000  0015c984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	20000020 	.word	0x20000020
 802001c:	00000000 	.word	0x00000000
 8020020:	0802a810 	.word	0x0802a810

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	20000024 	.word	0x20000024
 802003c:	0802a810 	.word	0x0802a810

08020040 <__aeabi_drsub>:
 8020040:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020044:	e002      	b.n	802004c <__adddf3>
 8020046:	bf00      	nop

08020048 <__aeabi_dsub>:
 8020048:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802004c <__adddf3>:
 802004c:	b530      	push	{r4, r5, lr}
 802004e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020052:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020056:	ea94 0f05 	teq	r4, r5
 802005a:	bf08      	it	eq
 802005c:	ea90 0f02 	teqeq	r0, r2
 8020060:	bf1f      	itttt	ne
 8020062:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020066:	ea55 0c02 	orrsne.w	ip, r5, r2
 802006a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802006e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020072:	f000 80e2 	beq.w	802023a <__adddf3+0x1ee>
 8020076:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802007a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802007e:	bfb8      	it	lt
 8020080:	426d      	neglt	r5, r5
 8020082:	dd0c      	ble.n	802009e <__adddf3+0x52>
 8020084:	442c      	add	r4, r5
 8020086:	ea80 0202 	eor.w	r2, r0, r2
 802008a:	ea81 0303 	eor.w	r3, r1, r3
 802008e:	ea82 0000 	eor.w	r0, r2, r0
 8020092:	ea83 0101 	eor.w	r1, r3, r1
 8020096:	ea80 0202 	eor.w	r2, r0, r2
 802009a:	ea81 0303 	eor.w	r3, r1, r3
 802009e:	2d36      	cmp	r5, #54	; 0x36
 80200a0:	bf88      	it	hi
 80200a2:	bd30      	pophi	{r4, r5, pc}
 80200a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80200a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80200ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80200b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80200b4:	d002      	beq.n	80200bc <__adddf3+0x70>
 80200b6:	4240      	negs	r0, r0
 80200b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80200bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80200c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80200c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80200c8:	d002      	beq.n	80200d0 <__adddf3+0x84>
 80200ca:	4252      	negs	r2, r2
 80200cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80200d0:	ea94 0f05 	teq	r4, r5
 80200d4:	f000 80a7 	beq.w	8020226 <__adddf3+0x1da>
 80200d8:	f1a4 0401 	sub.w	r4, r4, #1
 80200dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80200e0:	db0d      	blt.n	80200fe <__adddf3+0xb2>
 80200e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80200e6:	fa22 f205 	lsr.w	r2, r2, r5
 80200ea:	1880      	adds	r0, r0, r2
 80200ec:	f141 0100 	adc.w	r1, r1, #0
 80200f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80200f4:	1880      	adds	r0, r0, r2
 80200f6:	fa43 f305 	asr.w	r3, r3, r5
 80200fa:	4159      	adcs	r1, r3
 80200fc:	e00e      	b.n	802011c <__adddf3+0xd0>
 80200fe:	f1a5 0520 	sub.w	r5, r5, #32
 8020102:	f10e 0e20 	add.w	lr, lr, #32
 8020106:	2a01      	cmp	r2, #1
 8020108:	fa03 fc0e 	lsl.w	ip, r3, lr
 802010c:	bf28      	it	cs
 802010e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020112:	fa43 f305 	asr.w	r3, r3, r5
 8020116:	18c0      	adds	r0, r0, r3
 8020118:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802011c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020120:	d507      	bpl.n	8020132 <__adddf3+0xe6>
 8020122:	f04f 0e00 	mov.w	lr, #0
 8020126:	f1dc 0c00 	rsbs	ip, ip, #0
 802012a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802012e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020132:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020136:	d31b      	bcc.n	8020170 <__adddf3+0x124>
 8020138:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802013c:	d30c      	bcc.n	8020158 <__adddf3+0x10c>
 802013e:	0849      	lsrs	r1, r1, #1
 8020140:	ea5f 0030 	movs.w	r0, r0, rrx
 8020144:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020148:	f104 0401 	add.w	r4, r4, #1
 802014c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020150:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020154:	f080 809a 	bcs.w	802028c <__adddf3+0x240>
 8020158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802015c:	bf08      	it	eq
 802015e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020162:	f150 0000 	adcs.w	r0, r0, #0
 8020166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802016a:	ea41 0105 	orr.w	r1, r1, r5
 802016e:	bd30      	pop	{r4, r5, pc}
 8020170:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020174:	4140      	adcs	r0, r0
 8020176:	eb41 0101 	adc.w	r1, r1, r1
 802017a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802017e:	f1a4 0401 	sub.w	r4, r4, #1
 8020182:	d1e9      	bne.n	8020158 <__adddf3+0x10c>
 8020184:	f091 0f00 	teq	r1, #0
 8020188:	bf04      	itt	eq
 802018a:	4601      	moveq	r1, r0
 802018c:	2000      	moveq	r0, #0
 802018e:	fab1 f381 	clz	r3, r1
 8020192:	bf08      	it	eq
 8020194:	3320      	addeq	r3, #32
 8020196:	f1a3 030b 	sub.w	r3, r3, #11
 802019a:	f1b3 0220 	subs.w	r2, r3, #32
 802019e:	da0c      	bge.n	80201ba <__adddf3+0x16e>
 80201a0:	320c      	adds	r2, #12
 80201a2:	dd08      	ble.n	80201b6 <__adddf3+0x16a>
 80201a4:	f102 0c14 	add.w	ip, r2, #20
 80201a8:	f1c2 020c 	rsb	r2, r2, #12
 80201ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80201b0:	fa21 f102 	lsr.w	r1, r1, r2
 80201b4:	e00c      	b.n	80201d0 <__adddf3+0x184>
 80201b6:	f102 0214 	add.w	r2, r2, #20
 80201ba:	bfd8      	it	le
 80201bc:	f1c2 0c20 	rsble	ip, r2, #32
 80201c0:	fa01 f102 	lsl.w	r1, r1, r2
 80201c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80201c8:	bfdc      	itt	le
 80201ca:	ea41 010c 	orrle.w	r1, r1, ip
 80201ce:	4090      	lslle	r0, r2
 80201d0:	1ae4      	subs	r4, r4, r3
 80201d2:	bfa2      	ittt	ge
 80201d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80201d8:	4329      	orrge	r1, r5
 80201da:	bd30      	popge	{r4, r5, pc}
 80201dc:	ea6f 0404 	mvn.w	r4, r4
 80201e0:	3c1f      	subs	r4, #31
 80201e2:	da1c      	bge.n	802021e <__adddf3+0x1d2>
 80201e4:	340c      	adds	r4, #12
 80201e6:	dc0e      	bgt.n	8020206 <__adddf3+0x1ba>
 80201e8:	f104 0414 	add.w	r4, r4, #20
 80201ec:	f1c4 0220 	rsb	r2, r4, #32
 80201f0:	fa20 f004 	lsr.w	r0, r0, r4
 80201f4:	fa01 f302 	lsl.w	r3, r1, r2
 80201f8:	ea40 0003 	orr.w	r0, r0, r3
 80201fc:	fa21 f304 	lsr.w	r3, r1, r4
 8020200:	ea45 0103 	orr.w	r1, r5, r3
 8020204:	bd30      	pop	{r4, r5, pc}
 8020206:	f1c4 040c 	rsb	r4, r4, #12
 802020a:	f1c4 0220 	rsb	r2, r4, #32
 802020e:	fa20 f002 	lsr.w	r0, r0, r2
 8020212:	fa01 f304 	lsl.w	r3, r1, r4
 8020216:	ea40 0003 	orr.w	r0, r0, r3
 802021a:	4629      	mov	r1, r5
 802021c:	bd30      	pop	{r4, r5, pc}
 802021e:	fa21 f004 	lsr.w	r0, r1, r4
 8020222:	4629      	mov	r1, r5
 8020224:	bd30      	pop	{r4, r5, pc}
 8020226:	f094 0f00 	teq	r4, #0
 802022a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802022e:	bf06      	itte	eq
 8020230:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020234:	3401      	addeq	r4, #1
 8020236:	3d01      	subne	r5, #1
 8020238:	e74e      	b.n	80200d8 <__adddf3+0x8c>
 802023a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802023e:	bf18      	it	ne
 8020240:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020244:	d029      	beq.n	802029a <__adddf3+0x24e>
 8020246:	ea94 0f05 	teq	r4, r5
 802024a:	bf08      	it	eq
 802024c:	ea90 0f02 	teqeq	r0, r2
 8020250:	d005      	beq.n	802025e <__adddf3+0x212>
 8020252:	ea54 0c00 	orrs.w	ip, r4, r0
 8020256:	bf04      	itt	eq
 8020258:	4619      	moveq	r1, r3
 802025a:	4610      	moveq	r0, r2
 802025c:	bd30      	pop	{r4, r5, pc}
 802025e:	ea91 0f03 	teq	r1, r3
 8020262:	bf1e      	ittt	ne
 8020264:	2100      	movne	r1, #0
 8020266:	2000      	movne	r0, #0
 8020268:	bd30      	popne	{r4, r5, pc}
 802026a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802026e:	d105      	bne.n	802027c <__adddf3+0x230>
 8020270:	0040      	lsls	r0, r0, #1
 8020272:	4149      	adcs	r1, r1
 8020274:	bf28      	it	cs
 8020276:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802027a:	bd30      	pop	{r4, r5, pc}
 802027c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020280:	bf3c      	itt	cc
 8020282:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020286:	bd30      	popcc	{r4, r5, pc}
 8020288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802028c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020290:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020294:	f04f 0000 	mov.w	r0, #0
 8020298:	bd30      	pop	{r4, r5, pc}
 802029a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802029e:	bf1a      	itte	ne
 80202a0:	4619      	movne	r1, r3
 80202a2:	4610      	movne	r0, r2
 80202a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80202a8:	bf1c      	itt	ne
 80202aa:	460b      	movne	r3, r1
 80202ac:	4602      	movne	r2, r0
 80202ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80202b2:	bf06      	itte	eq
 80202b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80202b8:	ea91 0f03 	teqeq	r1, r3
 80202bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80202c0:	bd30      	pop	{r4, r5, pc}
 80202c2:	bf00      	nop

080202c4 <__aeabi_ui2d>:
 80202c4:	f090 0f00 	teq	r0, #0
 80202c8:	bf04      	itt	eq
 80202ca:	2100      	moveq	r1, #0
 80202cc:	4770      	bxeq	lr
 80202ce:	b530      	push	{r4, r5, lr}
 80202d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202d8:	f04f 0500 	mov.w	r5, #0
 80202dc:	f04f 0100 	mov.w	r1, #0
 80202e0:	e750      	b.n	8020184 <__adddf3+0x138>
 80202e2:	bf00      	nop

080202e4 <__aeabi_i2d>:
 80202e4:	f090 0f00 	teq	r0, #0
 80202e8:	bf04      	itt	eq
 80202ea:	2100      	moveq	r1, #0
 80202ec:	4770      	bxeq	lr
 80202ee:	b530      	push	{r4, r5, lr}
 80202f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80202fc:	bf48      	it	mi
 80202fe:	4240      	negmi	r0, r0
 8020300:	f04f 0100 	mov.w	r1, #0
 8020304:	e73e      	b.n	8020184 <__adddf3+0x138>
 8020306:	bf00      	nop

08020308 <__aeabi_f2d>:
 8020308:	0042      	lsls	r2, r0, #1
 802030a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802030e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020312:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020316:	bf1f      	itttt	ne
 8020318:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802031c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020320:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020324:	4770      	bxne	lr
 8020326:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802032a:	bf08      	it	eq
 802032c:	4770      	bxeq	lr
 802032e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020332:	bf04      	itt	eq
 8020334:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020338:	4770      	bxeq	lr
 802033a:	b530      	push	{r4, r5, lr}
 802033c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020344:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020348:	e71c      	b.n	8020184 <__adddf3+0x138>
 802034a:	bf00      	nop

0802034c <__aeabi_ul2d>:
 802034c:	ea50 0201 	orrs.w	r2, r0, r1
 8020350:	bf08      	it	eq
 8020352:	4770      	bxeq	lr
 8020354:	b530      	push	{r4, r5, lr}
 8020356:	f04f 0500 	mov.w	r5, #0
 802035a:	e00a      	b.n	8020372 <__aeabi_l2d+0x16>

0802035c <__aeabi_l2d>:
 802035c:	ea50 0201 	orrs.w	r2, r0, r1
 8020360:	bf08      	it	eq
 8020362:	4770      	bxeq	lr
 8020364:	b530      	push	{r4, r5, lr}
 8020366:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802036a:	d502      	bpl.n	8020372 <__aeabi_l2d+0x16>
 802036c:	4240      	negs	r0, r0
 802036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020372:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020376:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802037a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802037e:	f43f aed8 	beq.w	8020132 <__adddf3+0xe6>
 8020382:	f04f 0203 	mov.w	r2, #3
 8020386:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802038a:	bf18      	it	ne
 802038c:	3203      	addne	r2, #3
 802038e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020392:	bf18      	it	ne
 8020394:	3203      	addne	r2, #3
 8020396:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802039a:	f1c2 0320 	rsb	r3, r2, #32
 802039e:	fa00 fc03 	lsl.w	ip, r0, r3
 80203a2:	fa20 f002 	lsr.w	r0, r0, r2
 80203a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80203aa:	ea40 000e 	orr.w	r0, r0, lr
 80203ae:	fa21 f102 	lsr.w	r1, r1, r2
 80203b2:	4414      	add	r4, r2
 80203b4:	e6bd      	b.n	8020132 <__adddf3+0xe6>
 80203b6:	bf00      	nop

080203b8 <__aeabi_dmul>:
 80203b8:	b570      	push	{r4, r5, r6, lr}
 80203ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80203be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80203c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80203c6:	bf1d      	ittte	ne
 80203c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80203cc:	ea94 0f0c 	teqne	r4, ip
 80203d0:	ea95 0f0c 	teqne	r5, ip
 80203d4:	f000 f8de 	bleq	8020594 <__aeabi_dmul+0x1dc>
 80203d8:	442c      	add	r4, r5
 80203da:	ea81 0603 	eor.w	r6, r1, r3
 80203de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80203e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80203e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80203ea:	bf18      	it	ne
 80203ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80203f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80203f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80203f8:	d038      	beq.n	802046c <__aeabi_dmul+0xb4>
 80203fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80203fe:	f04f 0500 	mov.w	r5, #0
 8020402:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020406:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802040a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802040e:	f04f 0600 	mov.w	r6, #0
 8020412:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020416:	f09c 0f00 	teq	ip, #0
 802041a:	bf18      	it	ne
 802041c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020420:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020424:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020428:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802042c:	d204      	bcs.n	8020438 <__aeabi_dmul+0x80>
 802042e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020432:	416d      	adcs	r5, r5
 8020434:	eb46 0606 	adc.w	r6, r6, r6
 8020438:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802043c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020440:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020444:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020448:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802044c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020450:	bf88      	it	hi
 8020452:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020456:	d81e      	bhi.n	8020496 <__aeabi_dmul+0xde>
 8020458:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802045c:	bf08      	it	eq
 802045e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020462:	f150 0000 	adcs.w	r0, r0, #0
 8020466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802046a:	bd70      	pop	{r4, r5, r6, pc}
 802046c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020470:	ea46 0101 	orr.w	r1, r6, r1
 8020474:	ea40 0002 	orr.w	r0, r0, r2
 8020478:	ea81 0103 	eor.w	r1, r1, r3
 802047c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020480:	bfc2      	ittt	gt
 8020482:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020486:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802048a:	bd70      	popgt	{r4, r5, r6, pc}
 802048c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020490:	f04f 0e00 	mov.w	lr, #0
 8020494:	3c01      	subs	r4, #1
 8020496:	f300 80ab 	bgt.w	80205f0 <__aeabi_dmul+0x238>
 802049a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802049e:	bfde      	ittt	le
 80204a0:	2000      	movle	r0, #0
 80204a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80204a6:	bd70      	pople	{r4, r5, r6, pc}
 80204a8:	f1c4 0400 	rsb	r4, r4, #0
 80204ac:	3c20      	subs	r4, #32
 80204ae:	da35      	bge.n	802051c <__aeabi_dmul+0x164>
 80204b0:	340c      	adds	r4, #12
 80204b2:	dc1b      	bgt.n	80204ec <__aeabi_dmul+0x134>
 80204b4:	f104 0414 	add.w	r4, r4, #20
 80204b8:	f1c4 0520 	rsb	r5, r4, #32
 80204bc:	fa00 f305 	lsl.w	r3, r0, r5
 80204c0:	fa20 f004 	lsr.w	r0, r0, r4
 80204c4:	fa01 f205 	lsl.w	r2, r1, r5
 80204c8:	ea40 0002 	orr.w	r0, r0, r2
 80204cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80204d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80204d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80204d8:	fa21 f604 	lsr.w	r6, r1, r4
 80204dc:	eb42 0106 	adc.w	r1, r2, r6
 80204e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80204e4:	bf08      	it	eq
 80204e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80204ea:	bd70      	pop	{r4, r5, r6, pc}
 80204ec:	f1c4 040c 	rsb	r4, r4, #12
 80204f0:	f1c4 0520 	rsb	r5, r4, #32
 80204f4:	fa00 f304 	lsl.w	r3, r0, r4
 80204f8:	fa20 f005 	lsr.w	r0, r0, r5
 80204fc:	fa01 f204 	lsl.w	r2, r1, r4
 8020500:	ea40 0002 	orr.w	r0, r0, r2
 8020504:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020508:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802050c:	f141 0100 	adc.w	r1, r1, #0
 8020510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020514:	bf08      	it	eq
 8020516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802051a:	bd70      	pop	{r4, r5, r6, pc}
 802051c:	f1c4 0520 	rsb	r5, r4, #32
 8020520:	fa00 f205 	lsl.w	r2, r0, r5
 8020524:	ea4e 0e02 	orr.w	lr, lr, r2
 8020528:	fa20 f304 	lsr.w	r3, r0, r4
 802052c:	fa01 f205 	lsl.w	r2, r1, r5
 8020530:	ea43 0302 	orr.w	r3, r3, r2
 8020534:	fa21 f004 	lsr.w	r0, r1, r4
 8020538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802053c:	fa21 f204 	lsr.w	r2, r1, r4
 8020540:	ea20 0002 	bic.w	r0, r0, r2
 8020544:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802054c:	bf08      	it	eq
 802054e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020552:	bd70      	pop	{r4, r5, r6, pc}
 8020554:	f094 0f00 	teq	r4, #0
 8020558:	d10f      	bne.n	802057a <__aeabi_dmul+0x1c2>
 802055a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802055e:	0040      	lsls	r0, r0, #1
 8020560:	eb41 0101 	adc.w	r1, r1, r1
 8020564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020568:	bf08      	it	eq
 802056a:	3c01      	subeq	r4, #1
 802056c:	d0f7      	beq.n	802055e <__aeabi_dmul+0x1a6>
 802056e:	ea41 0106 	orr.w	r1, r1, r6
 8020572:	f095 0f00 	teq	r5, #0
 8020576:	bf18      	it	ne
 8020578:	4770      	bxne	lr
 802057a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802057e:	0052      	lsls	r2, r2, #1
 8020580:	eb43 0303 	adc.w	r3, r3, r3
 8020584:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020588:	bf08      	it	eq
 802058a:	3d01      	subeq	r5, #1
 802058c:	d0f7      	beq.n	802057e <__aeabi_dmul+0x1c6>
 802058e:	ea43 0306 	orr.w	r3, r3, r6
 8020592:	4770      	bx	lr
 8020594:	ea94 0f0c 	teq	r4, ip
 8020598:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802059c:	bf18      	it	ne
 802059e:	ea95 0f0c 	teqne	r5, ip
 80205a2:	d00c      	beq.n	80205be <__aeabi_dmul+0x206>
 80205a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205a8:	bf18      	it	ne
 80205aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205ae:	d1d1      	bne.n	8020554 <__aeabi_dmul+0x19c>
 80205b0:	ea81 0103 	eor.w	r1, r1, r3
 80205b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205b8:	f04f 0000 	mov.w	r0, #0
 80205bc:	bd70      	pop	{r4, r5, r6, pc}
 80205be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205c2:	bf06      	itte	eq
 80205c4:	4610      	moveq	r0, r2
 80205c6:	4619      	moveq	r1, r3
 80205c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205cc:	d019      	beq.n	8020602 <__aeabi_dmul+0x24a>
 80205ce:	ea94 0f0c 	teq	r4, ip
 80205d2:	d102      	bne.n	80205da <__aeabi_dmul+0x222>
 80205d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80205d8:	d113      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205da:	ea95 0f0c 	teq	r5, ip
 80205de:	d105      	bne.n	80205ec <__aeabi_dmul+0x234>
 80205e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80205e4:	bf1c      	itt	ne
 80205e6:	4610      	movne	r0, r2
 80205e8:	4619      	movne	r1, r3
 80205ea:	d10a      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205ec:	ea81 0103 	eor.w	r1, r1, r3
 80205f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80205f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80205fc:	f04f 0000 	mov.w	r0, #0
 8020600:	bd70      	pop	{r4, r5, r6, pc}
 8020602:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020606:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802060a:	bd70      	pop	{r4, r5, r6, pc}

0802060c <__aeabi_ddiv>:
 802060c:	b570      	push	{r4, r5, r6, lr}
 802060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802061a:	bf1d      	ittte	ne
 802061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020620:	ea94 0f0c 	teqne	r4, ip
 8020624:	ea95 0f0c 	teqne	r5, ip
 8020628:	f000 f8a7 	bleq	802077a <__aeabi_ddiv+0x16e>
 802062c:	eba4 0405 	sub.w	r4, r4, r5
 8020630:	ea81 0e03 	eor.w	lr, r1, r3
 8020634:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802063c:	f000 8088 	beq.w	8020750 <__aeabi_ddiv+0x144>
 8020640:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020644:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020648:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802064c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020650:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020654:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020658:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802065c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020660:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020664:	429d      	cmp	r5, r3
 8020666:	bf08      	it	eq
 8020668:	4296      	cmpeq	r6, r2
 802066a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802066e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020672:	d202      	bcs.n	802067a <__aeabi_ddiv+0x6e>
 8020674:	085b      	lsrs	r3, r3, #1
 8020676:	ea4f 0232 	mov.w	r2, r2, rrx
 802067a:	1ab6      	subs	r6, r6, r2
 802067c:	eb65 0503 	sbc.w	r5, r5, r3
 8020680:	085b      	lsrs	r3, r3, #1
 8020682:	ea4f 0232 	mov.w	r2, r2, rrx
 8020686:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802068a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802068e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020692:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020696:	bf22      	ittt	cs
 8020698:	1ab6      	subcs	r6, r6, r2
 802069a:	4675      	movcs	r5, lr
 802069c:	ea40 000c 	orrcs.w	r0, r0, ip
 80206a0:	085b      	lsrs	r3, r3, #1
 80206a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206ae:	bf22      	ittt	cs
 80206b0:	1ab6      	subcs	r6, r6, r2
 80206b2:	4675      	movcs	r5, lr
 80206b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80206b8:	085b      	lsrs	r3, r3, #1
 80206ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80206be:	ebb6 0e02 	subs.w	lr, r6, r2
 80206c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206c6:	bf22      	ittt	cs
 80206c8:	1ab6      	subcs	r6, r6, r2
 80206ca:	4675      	movcs	r5, lr
 80206cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80206d0:	085b      	lsrs	r3, r3, #1
 80206d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206de:	bf22      	ittt	cs
 80206e0:	1ab6      	subcs	r6, r6, r2
 80206e2:	4675      	movcs	r5, lr
 80206e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80206e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80206ec:	d018      	beq.n	8020720 <__aeabi_ddiv+0x114>
 80206ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80206f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80206f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80206fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80206fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020702:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020706:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802070a:	d1c0      	bne.n	802068e <__aeabi_ddiv+0x82>
 802070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020710:	d10b      	bne.n	802072a <__aeabi_ddiv+0x11e>
 8020712:	ea41 0100 	orr.w	r1, r1, r0
 8020716:	f04f 0000 	mov.w	r0, #0
 802071a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802071e:	e7b6      	b.n	802068e <__aeabi_ddiv+0x82>
 8020720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020724:	bf04      	itt	eq
 8020726:	4301      	orreq	r1, r0
 8020728:	2000      	moveq	r0, #0
 802072a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802072e:	bf88      	it	hi
 8020730:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020734:	f63f aeaf 	bhi.w	8020496 <__aeabi_dmul+0xde>
 8020738:	ebb5 0c03 	subs.w	ip, r5, r3
 802073c:	bf04      	itt	eq
 802073e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020742:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020746:	f150 0000 	adcs.w	r0, r0, #0
 802074a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802074e:	bd70      	pop	{r4, r5, r6, pc}
 8020750:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020754:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020758:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802075c:	bfc2      	ittt	gt
 802075e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020762:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020766:	bd70      	popgt	{r4, r5, r6, pc}
 8020768:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802076c:	f04f 0e00 	mov.w	lr, #0
 8020770:	3c01      	subs	r4, #1
 8020772:	e690      	b.n	8020496 <__aeabi_dmul+0xde>
 8020774:	ea45 0e06 	orr.w	lr, r5, r6
 8020778:	e68d      	b.n	8020496 <__aeabi_dmul+0xde>
 802077a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802077e:	ea94 0f0c 	teq	r4, ip
 8020782:	bf08      	it	eq
 8020784:	ea95 0f0c 	teqeq	r5, ip
 8020788:	f43f af3b 	beq.w	8020602 <__aeabi_dmul+0x24a>
 802078c:	ea94 0f0c 	teq	r4, ip
 8020790:	d10a      	bne.n	80207a8 <__aeabi_ddiv+0x19c>
 8020792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020796:	f47f af34 	bne.w	8020602 <__aeabi_dmul+0x24a>
 802079a:	ea95 0f0c 	teq	r5, ip
 802079e:	f47f af25 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207a2:	4610      	mov	r0, r2
 80207a4:	4619      	mov	r1, r3
 80207a6:	e72c      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207a8:	ea95 0f0c 	teq	r5, ip
 80207ac:	d106      	bne.n	80207bc <__aeabi_ddiv+0x1b0>
 80207ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80207b2:	f43f aefd 	beq.w	80205b0 <__aeabi_dmul+0x1f8>
 80207b6:	4610      	mov	r0, r2
 80207b8:	4619      	mov	r1, r3
 80207ba:	e722      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207c0:	bf18      	it	ne
 80207c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207c6:	f47f aec5 	bne.w	8020554 <__aeabi_dmul+0x19c>
 80207ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80207ce:	f47f af0d 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80207d6:	f47f aeeb 	bne.w	80205b0 <__aeabi_dmul+0x1f8>
 80207da:	e712      	b.n	8020602 <__aeabi_dmul+0x24a>

080207dc <__gedf2>:
 80207dc:	f04f 3cff 	mov.w	ip, #4294967295
 80207e0:	e006      	b.n	80207f0 <__cmpdf2+0x4>
 80207e2:	bf00      	nop

080207e4 <__ledf2>:
 80207e4:	f04f 0c01 	mov.w	ip, #1
 80207e8:	e002      	b.n	80207f0 <__cmpdf2+0x4>
 80207ea:	bf00      	nop

080207ec <__cmpdf2>:
 80207ec:	f04f 0c01 	mov.w	ip, #1
 80207f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80207f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80207f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80207fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020800:	bf18      	it	ne
 8020802:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020806:	d01b      	beq.n	8020840 <__cmpdf2+0x54>
 8020808:	b001      	add	sp, #4
 802080a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802080e:	bf0c      	ite	eq
 8020810:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020814:	ea91 0f03 	teqne	r1, r3
 8020818:	bf02      	ittt	eq
 802081a:	ea90 0f02 	teqeq	r0, r2
 802081e:	2000      	moveq	r0, #0
 8020820:	4770      	bxeq	lr
 8020822:	f110 0f00 	cmn.w	r0, #0
 8020826:	ea91 0f03 	teq	r1, r3
 802082a:	bf58      	it	pl
 802082c:	4299      	cmppl	r1, r3
 802082e:	bf08      	it	eq
 8020830:	4290      	cmpeq	r0, r2
 8020832:	bf2c      	ite	cs
 8020834:	17d8      	asrcs	r0, r3, #31
 8020836:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802083a:	f040 0001 	orr.w	r0, r0, #1
 802083e:	4770      	bx	lr
 8020840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020848:	d102      	bne.n	8020850 <__cmpdf2+0x64>
 802084a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802084e:	d107      	bne.n	8020860 <__cmpdf2+0x74>
 8020850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020858:	d1d6      	bne.n	8020808 <__cmpdf2+0x1c>
 802085a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802085e:	d0d3      	beq.n	8020808 <__cmpdf2+0x1c>
 8020860:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020864:	4770      	bx	lr
 8020866:	bf00      	nop

08020868 <__aeabi_cdrcmple>:
 8020868:	4684      	mov	ip, r0
 802086a:	4610      	mov	r0, r2
 802086c:	4662      	mov	r2, ip
 802086e:	468c      	mov	ip, r1
 8020870:	4619      	mov	r1, r3
 8020872:	4663      	mov	r3, ip
 8020874:	e000      	b.n	8020878 <__aeabi_cdcmpeq>
 8020876:	bf00      	nop

08020878 <__aeabi_cdcmpeq>:
 8020878:	b501      	push	{r0, lr}
 802087a:	f7ff ffb7 	bl	80207ec <__cmpdf2>
 802087e:	2800      	cmp	r0, #0
 8020880:	bf48      	it	mi
 8020882:	f110 0f00 	cmnmi.w	r0, #0
 8020886:	bd01      	pop	{r0, pc}

08020888 <__aeabi_dcmpeq>:
 8020888:	f84d ed08 	str.w	lr, [sp, #-8]!
 802088c:	f7ff fff4 	bl	8020878 <__aeabi_cdcmpeq>
 8020890:	bf0c      	ite	eq
 8020892:	2001      	moveq	r0, #1
 8020894:	2000      	movne	r0, #0
 8020896:	f85d fb08 	ldr.w	pc, [sp], #8
 802089a:	bf00      	nop

0802089c <__aeabi_dcmplt>:
 802089c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208a0:	f7ff ffea 	bl	8020878 <__aeabi_cdcmpeq>
 80208a4:	bf34      	ite	cc
 80208a6:	2001      	movcc	r0, #1
 80208a8:	2000      	movcs	r0, #0
 80208aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ae:	bf00      	nop

080208b0 <__aeabi_dcmple>:
 80208b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208b4:	f7ff ffe0 	bl	8020878 <__aeabi_cdcmpeq>
 80208b8:	bf94      	ite	ls
 80208ba:	2001      	movls	r0, #1
 80208bc:	2000      	movhi	r0, #0
 80208be:	f85d fb08 	ldr.w	pc, [sp], #8
 80208c2:	bf00      	nop

080208c4 <__aeabi_dcmpge>:
 80208c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208c8:	f7ff ffce 	bl	8020868 <__aeabi_cdrcmple>
 80208cc:	bf94      	ite	ls
 80208ce:	2001      	movls	r0, #1
 80208d0:	2000      	movhi	r0, #0
 80208d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80208d6:	bf00      	nop

080208d8 <__aeabi_dcmpgt>:
 80208d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208dc:	f7ff ffc4 	bl	8020868 <__aeabi_cdrcmple>
 80208e0:	bf34      	ite	cc
 80208e2:	2001      	movcc	r0, #1
 80208e4:	2000      	movcs	r0, #0
 80208e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ea:	bf00      	nop

080208ec <__aeabi_d2f>:
 80208ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80208f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80208f4:	bf24      	itt	cs
 80208f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80208fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80208fe:	d90d      	bls.n	802091c <__aeabi_d2f+0x30>
 8020900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 802090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020914:	bf08      	it	eq
 8020916:	f020 0001 	biceq.w	r0, r0, #1
 802091a:	4770      	bx	lr
 802091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020920:	d121      	bne.n	8020966 <__aeabi_d2f+0x7a>
 8020922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020926:	bfbc      	itt	lt
 8020928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 802092c:	4770      	bxlt	lr
 802092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020936:	f1c2 0218 	rsb	r2, r2, #24
 802093a:	f1c2 0c20 	rsb	ip, r2, #32
 802093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8020942:	fa20 f002 	lsr.w	r0, r0, r2
 8020946:	bf18      	it	ne
 8020948:	f040 0001 	orrne.w	r0, r0, #1
 802094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020958:	ea40 000c 	orr.w	r0, r0, ip
 802095c:	fa23 f302 	lsr.w	r3, r3, r2
 8020960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020964:	e7cc      	b.n	8020900 <__aeabi_d2f+0x14>
 8020966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 802096a:	d107      	bne.n	802097c <__aeabi_d2f+0x90>
 802096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020970:	bf1e      	ittt	ne
 8020972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 802097a:	4770      	bxne	lr
 802097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020988:	4770      	bx	lr
 802098a:	bf00      	nop

0802098c <__aeabi_uldivmod>:
 802098c:	b953      	cbnz	r3, 80209a4 <__aeabi_uldivmod+0x18>
 802098e:	b94a      	cbnz	r2, 80209a4 <__aeabi_uldivmod+0x18>
 8020990:	2900      	cmp	r1, #0
 8020992:	bf08      	it	eq
 8020994:	2800      	cmpeq	r0, #0
 8020996:	bf1c      	itt	ne
 8020998:	f04f 31ff 	movne.w	r1, #4294967295
 802099c:	f04f 30ff 	movne.w	r0, #4294967295
 80209a0:	f000 b996 	b.w	8020cd0 <__aeabi_idiv0>
 80209a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80209a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80209ac:	f000 f82a 	bl	8020a04 <__udivmoddi4>
 80209b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80209b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80209b8:	b004      	add	sp, #16
 80209ba:	4770      	bx	lr

080209bc <__aeabi_f2ulz>:
 80209bc:	b5d0      	push	{r4, r6, r7, lr}
 80209be:	f7ff fca3 	bl	8020308 <__aeabi_f2d>
 80209c2:	2200      	movs	r2, #0
 80209c4:	4b0d      	ldr	r3, [pc, #52]	; (80209fc <__aeabi_f2ulz+0x40>)
 80209c6:	4606      	mov	r6, r0
 80209c8:	460f      	mov	r7, r1
 80209ca:	f7ff fcf5 	bl	80203b8 <__aeabi_dmul>
 80209ce:	f000 f981 	bl	8020cd4 <__aeabi_d2uiz>
 80209d2:	4604      	mov	r4, r0
 80209d4:	f7ff fc76 	bl	80202c4 <__aeabi_ui2d>
 80209d8:	2200      	movs	r2, #0
 80209da:	4b09      	ldr	r3, [pc, #36]	; (8020a00 <__aeabi_f2ulz+0x44>)
 80209dc:	f7ff fcec 	bl	80203b8 <__aeabi_dmul>
 80209e0:	4602      	mov	r2, r0
 80209e2:	460b      	mov	r3, r1
 80209e4:	4630      	mov	r0, r6
 80209e6:	4639      	mov	r1, r7
 80209e8:	f7ff fb2e 	bl	8020048 <__aeabi_dsub>
 80209ec:	f000 f972 	bl	8020cd4 <__aeabi_d2uiz>
 80209f0:	2200      	movs	r2, #0
 80209f2:	4623      	mov	r3, r4
 80209f4:	4310      	orrs	r0, r2
 80209f6:	4619      	mov	r1, r3
 80209f8:	bdd0      	pop	{r4, r6, r7, pc}
 80209fa:	bf00      	nop
 80209fc:	3df00000 	.word	0x3df00000
 8020a00:	41f00000 	.word	0x41f00000

08020a04 <__udivmoddi4>:
 8020a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a08:	9e08      	ldr	r6, [sp, #32]
 8020a0a:	4604      	mov	r4, r0
 8020a0c:	4688      	mov	r8, r1
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d14b      	bne.n	8020aaa <__udivmoddi4+0xa6>
 8020a12:	428a      	cmp	r2, r1
 8020a14:	4615      	mov	r5, r2
 8020a16:	d967      	bls.n	8020ae8 <__udivmoddi4+0xe4>
 8020a18:	fab2 f282 	clz	r2, r2
 8020a1c:	b14a      	cbz	r2, 8020a32 <__udivmoddi4+0x2e>
 8020a1e:	f1c2 0720 	rsb	r7, r2, #32
 8020a22:	fa01 f302 	lsl.w	r3, r1, r2
 8020a26:	fa20 f707 	lsr.w	r7, r0, r7
 8020a2a:	4095      	lsls	r5, r2
 8020a2c:	ea47 0803 	orr.w	r8, r7, r3
 8020a30:	4094      	lsls	r4, r2
 8020a32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020a36:	0c23      	lsrs	r3, r4, #16
 8020a38:	fbb8 f7fe 	udiv	r7, r8, lr
 8020a3c:	fa1f fc85 	uxth.w	ip, r5
 8020a40:	fb0e 8817 	mls	r8, lr, r7, r8
 8020a44:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020a48:	fb07 f10c 	mul.w	r1, r7, ip
 8020a4c:	4299      	cmp	r1, r3
 8020a4e:	d909      	bls.n	8020a64 <__udivmoddi4+0x60>
 8020a50:	18eb      	adds	r3, r5, r3
 8020a52:	f107 30ff 	add.w	r0, r7, #4294967295
 8020a56:	f080 811b 	bcs.w	8020c90 <__udivmoddi4+0x28c>
 8020a5a:	4299      	cmp	r1, r3
 8020a5c:	f240 8118 	bls.w	8020c90 <__udivmoddi4+0x28c>
 8020a60:	3f02      	subs	r7, #2
 8020a62:	442b      	add	r3, r5
 8020a64:	1a5b      	subs	r3, r3, r1
 8020a66:	b2a4      	uxth	r4, r4
 8020a68:	fbb3 f0fe 	udiv	r0, r3, lr
 8020a6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8020a70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020a74:	fb00 fc0c 	mul.w	ip, r0, ip
 8020a78:	45a4      	cmp	ip, r4
 8020a7a:	d909      	bls.n	8020a90 <__udivmoddi4+0x8c>
 8020a7c:	192c      	adds	r4, r5, r4
 8020a7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8020a82:	f080 8107 	bcs.w	8020c94 <__udivmoddi4+0x290>
 8020a86:	45a4      	cmp	ip, r4
 8020a88:	f240 8104 	bls.w	8020c94 <__udivmoddi4+0x290>
 8020a8c:	3802      	subs	r0, #2
 8020a8e:	442c      	add	r4, r5
 8020a90:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020a94:	eba4 040c 	sub.w	r4, r4, ip
 8020a98:	2700      	movs	r7, #0
 8020a9a:	b11e      	cbz	r6, 8020aa4 <__udivmoddi4+0xa0>
 8020a9c:	40d4      	lsrs	r4, r2
 8020a9e:	2300      	movs	r3, #0
 8020aa0:	e9c6 4300 	strd	r4, r3, [r6]
 8020aa4:	4639      	mov	r1, r7
 8020aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020aaa:	428b      	cmp	r3, r1
 8020aac:	d909      	bls.n	8020ac2 <__udivmoddi4+0xbe>
 8020aae:	2e00      	cmp	r6, #0
 8020ab0:	f000 80eb 	beq.w	8020c8a <__udivmoddi4+0x286>
 8020ab4:	2700      	movs	r7, #0
 8020ab6:	e9c6 0100 	strd	r0, r1, [r6]
 8020aba:	4638      	mov	r0, r7
 8020abc:	4639      	mov	r1, r7
 8020abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ac2:	fab3 f783 	clz	r7, r3
 8020ac6:	2f00      	cmp	r7, #0
 8020ac8:	d147      	bne.n	8020b5a <__udivmoddi4+0x156>
 8020aca:	428b      	cmp	r3, r1
 8020acc:	d302      	bcc.n	8020ad4 <__udivmoddi4+0xd0>
 8020ace:	4282      	cmp	r2, r0
 8020ad0:	f200 80fa 	bhi.w	8020cc8 <__udivmoddi4+0x2c4>
 8020ad4:	1a84      	subs	r4, r0, r2
 8020ad6:	eb61 0303 	sbc.w	r3, r1, r3
 8020ada:	2001      	movs	r0, #1
 8020adc:	4698      	mov	r8, r3
 8020ade:	2e00      	cmp	r6, #0
 8020ae0:	d0e0      	beq.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae2:	e9c6 4800 	strd	r4, r8, [r6]
 8020ae6:	e7dd      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae8:	b902      	cbnz	r2, 8020aec <__udivmoddi4+0xe8>
 8020aea:	deff      	udf	#255	; 0xff
 8020aec:	fab2 f282 	clz	r2, r2
 8020af0:	2a00      	cmp	r2, #0
 8020af2:	f040 808f 	bne.w	8020c14 <__udivmoddi4+0x210>
 8020af6:	1b49      	subs	r1, r1, r5
 8020af8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020afc:	fa1f f885 	uxth.w	r8, r5
 8020b00:	2701      	movs	r7, #1
 8020b02:	fbb1 fcfe 	udiv	ip, r1, lr
 8020b06:	0c23      	lsrs	r3, r4, #16
 8020b08:	fb0e 111c 	mls	r1, lr, ip, r1
 8020b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020b10:	fb08 f10c 	mul.w	r1, r8, ip
 8020b14:	4299      	cmp	r1, r3
 8020b16:	d907      	bls.n	8020b28 <__udivmoddi4+0x124>
 8020b18:	18eb      	adds	r3, r5, r3
 8020b1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020b1e:	d202      	bcs.n	8020b26 <__udivmoddi4+0x122>
 8020b20:	4299      	cmp	r1, r3
 8020b22:	f200 80cd 	bhi.w	8020cc0 <__udivmoddi4+0x2bc>
 8020b26:	4684      	mov	ip, r0
 8020b28:	1a59      	subs	r1, r3, r1
 8020b2a:	b2a3      	uxth	r3, r4
 8020b2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8020b30:	fb0e 1410 	mls	r4, lr, r0, r1
 8020b34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020b38:	fb08 f800 	mul.w	r8, r8, r0
 8020b3c:	45a0      	cmp	r8, r4
 8020b3e:	d907      	bls.n	8020b50 <__udivmoddi4+0x14c>
 8020b40:	192c      	adds	r4, r5, r4
 8020b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b46:	d202      	bcs.n	8020b4e <__udivmoddi4+0x14a>
 8020b48:	45a0      	cmp	r8, r4
 8020b4a:	f200 80b6 	bhi.w	8020cba <__udivmoddi4+0x2b6>
 8020b4e:	4618      	mov	r0, r3
 8020b50:	eba4 0408 	sub.w	r4, r4, r8
 8020b54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020b58:	e79f      	b.n	8020a9a <__udivmoddi4+0x96>
 8020b5a:	f1c7 0c20 	rsb	ip, r7, #32
 8020b5e:	40bb      	lsls	r3, r7
 8020b60:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020b64:	ea4e 0e03 	orr.w	lr, lr, r3
 8020b68:	fa01 f407 	lsl.w	r4, r1, r7
 8020b6c:	fa20 f50c 	lsr.w	r5, r0, ip
 8020b70:	fa21 f30c 	lsr.w	r3, r1, ip
 8020b74:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020b78:	4325      	orrs	r5, r4
 8020b7a:	fbb3 f9f8 	udiv	r9, r3, r8
 8020b7e:	0c2c      	lsrs	r4, r5, #16
 8020b80:	fb08 3319 	mls	r3, r8, r9, r3
 8020b84:	fa1f fa8e 	uxth.w	sl, lr
 8020b88:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020b8c:	fb09 f40a 	mul.w	r4, r9, sl
 8020b90:	429c      	cmp	r4, r3
 8020b92:	fa02 f207 	lsl.w	r2, r2, r7
 8020b96:	fa00 f107 	lsl.w	r1, r0, r7
 8020b9a:	d90b      	bls.n	8020bb4 <__udivmoddi4+0x1b0>
 8020b9c:	eb1e 0303 	adds.w	r3, lr, r3
 8020ba0:	f109 30ff 	add.w	r0, r9, #4294967295
 8020ba4:	f080 8087 	bcs.w	8020cb6 <__udivmoddi4+0x2b2>
 8020ba8:	429c      	cmp	r4, r3
 8020baa:	f240 8084 	bls.w	8020cb6 <__udivmoddi4+0x2b2>
 8020bae:	f1a9 0902 	sub.w	r9, r9, #2
 8020bb2:	4473      	add	r3, lr
 8020bb4:	1b1b      	subs	r3, r3, r4
 8020bb6:	b2ad      	uxth	r5, r5
 8020bb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8020bbc:	fb08 3310 	mls	r3, r8, r0, r3
 8020bc0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020bc4:	fb00 fa0a 	mul.w	sl, r0, sl
 8020bc8:	45a2      	cmp	sl, r4
 8020bca:	d908      	bls.n	8020bde <__udivmoddi4+0x1da>
 8020bcc:	eb1e 0404 	adds.w	r4, lr, r4
 8020bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8020bd4:	d26b      	bcs.n	8020cae <__udivmoddi4+0x2aa>
 8020bd6:	45a2      	cmp	sl, r4
 8020bd8:	d969      	bls.n	8020cae <__udivmoddi4+0x2aa>
 8020bda:	3802      	subs	r0, #2
 8020bdc:	4474      	add	r4, lr
 8020bde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020be2:	fba0 8902 	umull	r8, r9, r0, r2
 8020be6:	eba4 040a 	sub.w	r4, r4, sl
 8020bea:	454c      	cmp	r4, r9
 8020bec:	46c2      	mov	sl, r8
 8020bee:	464b      	mov	r3, r9
 8020bf0:	d354      	bcc.n	8020c9c <__udivmoddi4+0x298>
 8020bf2:	d051      	beq.n	8020c98 <__udivmoddi4+0x294>
 8020bf4:	2e00      	cmp	r6, #0
 8020bf6:	d069      	beq.n	8020ccc <__udivmoddi4+0x2c8>
 8020bf8:	ebb1 050a 	subs.w	r5, r1, sl
 8020bfc:	eb64 0403 	sbc.w	r4, r4, r3
 8020c00:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020c04:	40fd      	lsrs	r5, r7
 8020c06:	40fc      	lsrs	r4, r7
 8020c08:	ea4c 0505 	orr.w	r5, ip, r5
 8020c0c:	e9c6 5400 	strd	r5, r4, [r6]
 8020c10:	2700      	movs	r7, #0
 8020c12:	e747      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c14:	f1c2 0320 	rsb	r3, r2, #32
 8020c18:	fa20 f703 	lsr.w	r7, r0, r3
 8020c1c:	4095      	lsls	r5, r2
 8020c1e:	fa01 f002 	lsl.w	r0, r1, r2
 8020c22:	fa21 f303 	lsr.w	r3, r1, r3
 8020c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020c2a:	4338      	orrs	r0, r7
 8020c2c:	0c01      	lsrs	r1, r0, #16
 8020c2e:	fbb3 f7fe 	udiv	r7, r3, lr
 8020c32:	fa1f f885 	uxth.w	r8, r5
 8020c36:	fb0e 3317 	mls	r3, lr, r7, r3
 8020c3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c3e:	fb07 f308 	mul.w	r3, r7, r8
 8020c42:	428b      	cmp	r3, r1
 8020c44:	fa04 f402 	lsl.w	r4, r4, r2
 8020c48:	d907      	bls.n	8020c5a <__udivmoddi4+0x256>
 8020c4a:	1869      	adds	r1, r5, r1
 8020c4c:	f107 3cff 	add.w	ip, r7, #4294967295
 8020c50:	d22f      	bcs.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c52:	428b      	cmp	r3, r1
 8020c54:	d92d      	bls.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c56:	3f02      	subs	r7, #2
 8020c58:	4429      	add	r1, r5
 8020c5a:	1acb      	subs	r3, r1, r3
 8020c5c:	b281      	uxth	r1, r0
 8020c5e:	fbb3 f0fe 	udiv	r0, r3, lr
 8020c62:	fb0e 3310 	mls	r3, lr, r0, r3
 8020c66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c6a:	fb00 f308 	mul.w	r3, r0, r8
 8020c6e:	428b      	cmp	r3, r1
 8020c70:	d907      	bls.n	8020c82 <__udivmoddi4+0x27e>
 8020c72:	1869      	adds	r1, r5, r1
 8020c74:	f100 3cff 	add.w	ip, r0, #4294967295
 8020c78:	d217      	bcs.n	8020caa <__udivmoddi4+0x2a6>
 8020c7a:	428b      	cmp	r3, r1
 8020c7c:	d915      	bls.n	8020caa <__udivmoddi4+0x2a6>
 8020c7e:	3802      	subs	r0, #2
 8020c80:	4429      	add	r1, r5
 8020c82:	1ac9      	subs	r1, r1, r3
 8020c84:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020c88:	e73b      	b.n	8020b02 <__udivmoddi4+0xfe>
 8020c8a:	4637      	mov	r7, r6
 8020c8c:	4630      	mov	r0, r6
 8020c8e:	e709      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c90:	4607      	mov	r7, r0
 8020c92:	e6e7      	b.n	8020a64 <__udivmoddi4+0x60>
 8020c94:	4618      	mov	r0, r3
 8020c96:	e6fb      	b.n	8020a90 <__udivmoddi4+0x8c>
 8020c98:	4541      	cmp	r1, r8
 8020c9a:	d2ab      	bcs.n	8020bf4 <__udivmoddi4+0x1f0>
 8020c9c:	ebb8 0a02 	subs.w	sl, r8, r2
 8020ca0:	eb69 020e 	sbc.w	r2, r9, lr
 8020ca4:	3801      	subs	r0, #1
 8020ca6:	4613      	mov	r3, r2
 8020ca8:	e7a4      	b.n	8020bf4 <__udivmoddi4+0x1f0>
 8020caa:	4660      	mov	r0, ip
 8020cac:	e7e9      	b.n	8020c82 <__udivmoddi4+0x27e>
 8020cae:	4618      	mov	r0, r3
 8020cb0:	e795      	b.n	8020bde <__udivmoddi4+0x1da>
 8020cb2:	4667      	mov	r7, ip
 8020cb4:	e7d1      	b.n	8020c5a <__udivmoddi4+0x256>
 8020cb6:	4681      	mov	r9, r0
 8020cb8:	e77c      	b.n	8020bb4 <__udivmoddi4+0x1b0>
 8020cba:	3802      	subs	r0, #2
 8020cbc:	442c      	add	r4, r5
 8020cbe:	e747      	b.n	8020b50 <__udivmoddi4+0x14c>
 8020cc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8020cc4:	442b      	add	r3, r5
 8020cc6:	e72f      	b.n	8020b28 <__udivmoddi4+0x124>
 8020cc8:	4638      	mov	r0, r7
 8020cca:	e708      	b.n	8020ade <__udivmoddi4+0xda>
 8020ccc:	4637      	mov	r7, r6
 8020cce:	e6e9      	b.n	8020aa4 <__udivmoddi4+0xa0>

08020cd0 <__aeabi_idiv0>:
 8020cd0:	4770      	bx	lr
 8020cd2:	bf00      	nop

08020cd4 <__aeabi_d2uiz>:
 8020cd4:	004a      	lsls	r2, r1, #1
 8020cd6:	d211      	bcs.n	8020cfc <__aeabi_d2uiz+0x28>
 8020cd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020cdc:	d211      	bcs.n	8020d02 <__aeabi_d2uiz+0x2e>
 8020cde:	d50d      	bpl.n	8020cfc <__aeabi_d2uiz+0x28>
 8020ce0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020ce4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020ce8:	d40e      	bmi.n	8020d08 <__aeabi_d2uiz+0x34>
 8020cea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020cf2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020cf6:	fa23 f002 	lsr.w	r0, r3, r2
 8020cfa:	4770      	bx	lr
 8020cfc:	f04f 0000 	mov.w	r0, #0
 8020d00:	4770      	bx	lr
 8020d02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020d06:	d102      	bne.n	8020d0e <__aeabi_d2uiz+0x3a>
 8020d08:	f04f 30ff 	mov.w	r0, #4294967295
 8020d0c:	4770      	bx	lr
 8020d0e:	f04f 0000 	mov.w	r0, #0
 8020d12:	4770      	bx	lr

08020d14 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"

Encoder::Encoder() : distance_(0), distance_stack_(0), distance_difference_(0) {}
 8020d14:	b480      	push	{r7}
 8020d16:	b083      	sub	sp, #12
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	6078      	str	r0, [r7, #4]
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	f04f 0200 	mov.w	r2, #0
 8020d22:	601a      	str	r2, [r3, #0]
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	f04f 0200 	mov.w	r2, #0
 8020d2a:	605a      	str	r2, [r3, #4]
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	f04f 0200 	mov.w	r2, #0
 8020d32:	609a      	str	r2, [r3, #8]
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	4618      	mov	r0, r3
 8020d38:	370c      	adds	r7, #12
 8020d3a:	46bd      	mov	sp, r7
 8020d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d40:	4770      	bx	lr
	...

08020d44 <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020d44:	b580      	push	{r7, lr}
 8020d46:	b082      	sub	sp, #8
 8020d48:	af00      	add	r7, sp, #0
 8020d4a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8020d4c:	213c      	movs	r1, #60	; 0x3c
 8020d4e:	4805      	ldr	r0, [pc, #20]	; (8020d64 <_ZN7Encoder4InitEv+0x20>)
 8020d50:	f008 fe3e 	bl	80299d0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8020d54:	213c      	movs	r1, #60	; 0x3c
 8020d56:	4804      	ldr	r0, [pc, #16]	; (8020d68 <_ZN7Encoder4InitEv+0x24>)
 8020d58:	f008 fe3a 	bl	80299d0 <HAL_TIM_Encoder_Start>
}
 8020d5c:	bf00      	nop
 8020d5e:	3708      	adds	r7, #8
 8020d60:	46bd      	mov	sp, r7
 8020d62:	bd80      	pop	{r7, pc}
 8020d64:	200007b8 	.word	0x200007b8
 8020d68:	200007f8 	.word	0x200007f8
 8020d6c:	00000000 	.word	0x00000000

08020d70 <_ZN7Encoder6UpdateEv>:

void Encoder::Update()
{
 8020d70:	b590      	push	{r4, r7, lr}
 8020d72:	b087      	sub	sp, #28
 8020d74:	af00      	add	r7, sp, #0
 8020d76:	6078      	str	r0, [r7, #4]
	int16_t count_l = static_cast<int16_t>((TIM8 -> CNT) - START_COUNT);
 8020d78:	4b39      	ldr	r3, [pc, #228]	; (8020e60 <_ZN7Encoder6UpdateEv+0xf0>)
 8020d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d7c:	b29b      	uxth	r3, r3
 8020d7e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8020d82:	3b7f      	subs	r3, #127	; 0x7f
 8020d84:	b29b      	uxth	r3, r3
 8020d86:	82fb      	strh	r3, [r7, #22]
	int16_t count_r = static_cast<int16_t>(START_COUNT - (TIM4 -> CNT));
 8020d88:	4b36      	ldr	r3, [pc, #216]	; (8020e64 <_ZN7Encoder6UpdateEv+0xf4>)
 8020d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d8c:	b29b      	uxth	r3, r3
 8020d8e:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8020d92:	337f      	adds	r3, #127	; 0x7f
 8020d94:	b29b      	uxth	r3, r3
 8020d96:	82bb      	strh	r3, [r7, #20]
	TIM8 -> CNT = START_COUNT;
 8020d98:	4b31      	ldr	r3, [pc, #196]	; (8020e60 <_ZN7Encoder6UpdateEv+0xf0>)
 8020d9a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020d9e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = START_COUNT;
 8020da0:	4b30      	ldr	r3, [pc, #192]	; (8020e64 <_ZN7Encoder6UpdateEv+0xf4>)
 8020da2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020da6:	625a      	str	r2, [r3, #36]	; 0x24
	float distance_l = static_cast<float>(count_l * DISTANCE_PER_COUNT);
 8020da8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020dac:	4618      	mov	r0, r3
 8020dae:	f7ff fa99 	bl	80202e4 <__aeabi_i2d>
 8020db2:	a329      	add	r3, pc, #164	; (adr r3, 8020e58 <_ZN7Encoder6UpdateEv+0xe8>)
 8020db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020db8:	f7ff fafe 	bl	80203b8 <__aeabi_dmul>
 8020dbc:	4603      	mov	r3, r0
 8020dbe:	460c      	mov	r4, r1
 8020dc0:	4618      	mov	r0, r3
 8020dc2:	4621      	mov	r1, r4
 8020dc4:	f7ff fd92 	bl	80208ec <__aeabi_d2f>
 8020dc8:	4603      	mov	r3, r0
 8020dca:	613b      	str	r3, [r7, #16]
	float distance_r = static_cast<float>(count_r * DISTANCE_PER_COUNT);
 8020dcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020dd0:	4618      	mov	r0, r3
 8020dd2:	f7ff fa87 	bl	80202e4 <__aeabi_i2d>
 8020dd6:	a320      	add	r3, pc, #128	; (adr r3, 8020e58 <_ZN7Encoder6UpdateEv+0xe8>)
 8020dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ddc:	f7ff faec 	bl	80203b8 <__aeabi_dmul>
 8020de0:	4603      	mov	r3, r0
 8020de2:	460c      	mov	r4, r1
 8020de4:	4618      	mov	r0, r3
 8020de6:	4621      	mov	r1, r4
 8020de8:	f7ff fd80 	bl	80208ec <__aeabi_d2f>
 8020dec:	4603      	mov	r3, r0
 8020dee:	60fb      	str	r3, [r7, #12]
	float distance = (distance_l + distance_r) / 2.0;
 8020df0:	ed97 7a04 	vldr	s14, [r7, #16]
 8020df4:	edd7 7a03 	vldr	s15, [r7, #12]
 8020df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020dfc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8020e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020e04:	edc7 7a02 	vstr	s15, [r7, #8]

	distance_ = distance;
 8020e08:	687b      	ldr	r3, [r7, #4]
 8020e0a:	68ba      	ldr	r2, [r7, #8]
 8020e0c:	601a      	str	r2, [r3, #0]
	distance_stack_ += distance;
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	ed93 7a01 	vldr	s14, [r3, #4]
 8020e14:	edd7 7a02 	vldr	s15, [r7, #8]
 8020e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020e1c:	687b      	ldr	r3, [r7, #4]
 8020e1e:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_difference_ = distance_r - distance_l;
 8020e22:	ed97 7a03 	vldr	s14, [r7, #12]
 8020e26:	edd7 7a04 	vldr	s15, [r7, #16]
 8020e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020e2e:	687b      	ldr	r3, [r7, #4]
 8020e30:	edc3 7a02 	vstr	s15, [r3, #8]

#ifdef DEBUG_MODE
	g_enc_cnt_l = count_l;  g_enc_cnt_r = count_r;
 8020e34:	4a0c      	ldr	r2, [pc, #48]	; (8020e68 <_ZN7Encoder6UpdateEv+0xf8>)
 8020e36:	8afb      	ldrh	r3, [r7, #22]
 8020e38:	8013      	strh	r3, [r2, #0]
 8020e3a:	4a0c      	ldr	r2, [pc, #48]	; (8020e6c <_ZN7Encoder6UpdateEv+0xfc>)
 8020e3c:	8abb      	ldrh	r3, [r7, #20]
 8020e3e:	8013      	strh	r3, [r2, #0]
	g_distance_l = distance_l;  g_distance_r = distance_r;
 8020e40:	4a0b      	ldr	r2, [pc, #44]	; (8020e70 <_ZN7Encoder6UpdateEv+0x100>)
 8020e42:	693b      	ldr	r3, [r7, #16]
 8020e44:	6013      	str	r3, [r2, #0]
 8020e46:	4a0b      	ldr	r2, [pc, #44]	; (8020e74 <_ZN7Encoder6UpdateEv+0x104>)
 8020e48:	68fb      	ldr	r3, [r7, #12]
 8020e4a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8020e4c:	bf00      	nop
 8020e4e:	371c      	adds	r7, #28
 8020e50:	46bd      	mov	sp, r7
 8020e52:	bd90      	pop	{r4, r7, pc}
 8020e54:	f3af 8000 	nop.w
 8020e58:	5d35653d 	.word	0x5d35653d
 8020e5c:	3f7d744f 	.word	0x3f7d744f
 8020e60:	40010400 	.word	0x40010400
 8020e64:	40000800 	.word	0x40000800
 8020e68:	20000298 	.word	0x20000298
 8020e6c:	2000029a 	.word	0x2000029a
 8020e70:	2000029c 	.word	0x2000029c
 8020e74:	200002a0 	.word	0x200002a0

08020e78 <_ZN7Encoder18ResetDistanceStackEv>:
	TIM8 -> CNT = START_COUNT;
	TIM4 -> CNT = START_COUNT;
}

void Encoder::ResetDistanceStack()
{
 8020e78:	b480      	push	{r7}
 8020e7a:	b083      	sub	sp, #12
 8020e7c:	af00      	add	r7, sp, #0
 8020e7e:	6078      	str	r0, [r7, #4]
	distance_stack_ = 0.0;
 8020e80:	687b      	ldr	r3, [r7, #4]
 8020e82:	f04f 0200 	mov.w	r2, #0
 8020e86:	605a      	str	r2, [r3, #4]
}
 8020e88:	bf00      	nop
 8020e8a:	370c      	adds	r7, #12
 8020e8c:	46bd      	mov	sp, r7
 8020e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e92:	4770      	bx	lr

08020e94 <_ZN7Encoder11GetDistanceEv>:

float Encoder::GetDistance()
{
 8020e94:	b480      	push	{r7}
 8020e96:	b083      	sub	sp, #12
 8020e98:	af00      	add	r7, sp, #0
 8020e9a:	6078      	str	r0, [r7, #4]
	return distance_;
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	681b      	ldr	r3, [r3, #0]
 8020ea0:	ee07 3a90 	vmov	s15, r3
}
 8020ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8020ea8:	370c      	adds	r7, #12
 8020eaa:	46bd      	mov	sp, r7
 8020eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eb0:	4770      	bx	lr

08020eb2 <_ZN7Encoder16GetDistanceStackEv>:

float Encoder::GetDistanceStack()
{
 8020eb2:	b480      	push	{r7}
 8020eb4:	b083      	sub	sp, #12
 8020eb6:	af00      	add	r7, sp, #0
 8020eb8:	6078      	str	r0, [r7, #4]
	return distance_stack_;
 8020eba:	687b      	ldr	r3, [r7, #4]
 8020ebc:	685b      	ldr	r3, [r3, #4]
 8020ebe:	ee07 3a90 	vmov	s15, r3
}
 8020ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8020ec6:	370c      	adds	r7, #12
 8020ec8:	46bd      	mov	sp, r7
 8020eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ece:	4770      	bx	lr

08020ed0 <_ZN7Encoder15AngularVelocityEv>:

float Encoder::AngularVelocity()
{
 8020ed0:	b590      	push	{r4, r7, lr}
 8020ed2:	b083      	sub	sp, #12
 8020ed4:	af00      	add	r7, sp, #0
 8020ed6:	6078      	str	r0, [r7, #4]
	return distance_difference_ / (TIM6_PERIOD * MACHINE_TREAD);
 8020ed8:	687b      	ldr	r3, [r7, #4]
 8020eda:	689b      	ldr	r3, [r3, #8]
 8020edc:	4618      	mov	r0, r3
 8020ede:	f7ff fa13 	bl	8020308 <__aeabi_f2d>
 8020ee2:	a309      	add	r3, pc, #36	; (adr r3, 8020f08 <_ZN7Encoder15AngularVelocityEv+0x38>)
 8020ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ee8:	f7ff fb90 	bl	802060c <__aeabi_ddiv>
 8020eec:	4603      	mov	r3, r0
 8020eee:	460c      	mov	r4, r1
 8020ef0:	4618      	mov	r0, r3
 8020ef2:	4621      	mov	r1, r4
 8020ef4:	f7ff fcfa 	bl	80208ec <__aeabi_d2f>
 8020ef8:	4603      	mov	r3, r0
 8020efa:	ee07 3a90 	vmov	s15, r3
 8020efe:	eeb0 0a67 	vmov.f32	s0, s15
 8020f02:	370c      	adds	r7, #12
 8020f04:	46bd      	mov	sp, r7
 8020f06:	bd90      	pop	{r4, r7, pc}
 8020f08:	00000000 	.word	0x00000000
 8020f0c:	407f9000 	.word	0x407f9000

08020f10 <_ZN5Flash5ClearEv>:
#include "flash.hpp"
#include <string.h>

bool Flash::Clear()
{
 8020f10:	b580      	push	{r7, lr}
 8020f12:	b088      	sub	sp, #32
 8020f14:	af00      	add	r7, sp, #0
 8020f16:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8020f18:	f006 fd0e 	bl	8027938 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase;

    erase.TypeErase    = FLASH_TYPEERASE_SECTORS; // Erasure range : Sectors
 8020f1c:	2300      	movs	r3, #0
 8020f1e:	60fb      	str	r3, [r7, #12]
    erase.Sector       = FLASH_SECTOR_1;          // Which sector : 1
 8020f20:	2301      	movs	r3, #1
 8020f22:	617b      	str	r3, [r7, #20]
    erase.NbSectors    = 4;                       // How many sector : 4 (1,2,3,4)
 8020f24:	2304      	movs	r3, #4
 8020f26:	61bb      	str	r3, [r7, #24]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;   // Voltage range : 2.7 ~ 3.6 [V]
 8020f28:	2302      	movs	r3, #2
 8020f2a:	61fb      	str	r3, [r7, #28]

    // Success => 0xFFFFFFFF is stored.
    // Fail => Sector number is stored.
    uint32_t failed_sector = 0;
 8020f2c:	2300      	movs	r3, #0
 8020f2e:	60bb      	str	r3, [r7, #8]

    if(HAL_FLASHEx_Erase(&erase, &failed_sector) != HAL_OK)
 8020f30:	f107 0208 	add.w	r2, r7, #8
 8020f34:	f107 030c 	add.w	r3, r7, #12
 8020f38:	4611      	mov	r1, r2
 8020f3a:	4618      	mov	r0, r3
 8020f3c:	f006 fe5c 	bl	8027bf8 <HAL_FLASHEx_Erase>
 8020f40:	4603      	mov	r3, r0
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	bf14      	ite	ne
 8020f46:	2301      	movne	r3, #1
 8020f48:	2300      	moveq	r3, #0
 8020f4a:	b2db      	uxtb	r3, r3
 8020f4c:	2b00      	cmp	r3, #0
 8020f4e:	d004      	beq.n	8020f5a <_ZN5Flash5ClearEv+0x4a>
    {
#ifdef DEBUG_MODE
        g_erase_failed_sector = failed_sector;
 8020f50:	68bb      	ldr	r3, [r7, #8]
 8020f52:	4a08      	ldr	r2, [pc, #32]	; (8020f74 <_ZN5Flash5ClearEv+0x64>)
 8020f54:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

        return false;
 8020f56:	2300      	movs	r3, #0
 8020f58:	e008      	b.n	8020f6c <_ZN5Flash5ClearEv+0x5c>
    }

    HAL_FLASH_Lock();
 8020f5a:	f006 fd0f 	bl	802797c <HAL_FLASH_Lock>

    return failed_sector == 0xFFFFFFFF;
 8020f5e:	68bb      	ldr	r3, [r7, #8]
 8020f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f64:	bf0c      	ite	eq
 8020f66:	2301      	moveq	r3, #1
 8020f68:	2300      	movne	r3, #0
 8020f6a:	b2db      	uxtb	r3, r3
}
 8020f6c:	4618      	mov	r0, r3
 8020f6e:	3720      	adds	r7, #32
 8020f70:	46bd      	mov	sp, r7
 8020f72:	bd80      	pop	{r7, pc}
 8020f74:	200002d0 	.word	0x200002d0

08020f78 <_ZN5Flash10StoreUint8EmPhm>:

bool Flash::StoreUint8(uint32_t address, uint8_t *data, uint32_t number)
{
 8020f78:	b590      	push	{r4, r7, lr}
 8020f7a:	b087      	sub	sp, #28
 8020f7c:	af00      	add	r7, sp, #0
 8020f7e:	60f8      	str	r0, [r7, #12]
 8020f80:	60b9      	str	r1, [r7, #8]
 8020f82:	607a      	str	r2, [r7, #4]
 8020f84:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8020f86:	f006 fcd7 	bl	8027938 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8020f8a:	2300      	movs	r3, #0
 8020f8c:	613b      	str	r3, [r7, #16]
 8020f8e:	693a      	ldr	r2, [r7, #16]
 8020f90:	683b      	ldr	r3, [r7, #0]
 8020f92:	429a      	cmp	r2, r3
 8020f94:	d218      	bcs.n	8020fc8 <_ZN5Flash10StoreUint8EmPhm+0x50>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address++, *data++);
 8020f96:	68b9      	ldr	r1, [r7, #8]
 8020f98:	1c4b      	adds	r3, r1, #1
 8020f9a:	60bb      	str	r3, [r7, #8]
 8020f9c:	687b      	ldr	r3, [r7, #4]
 8020f9e:	1c5a      	adds	r2, r3, #1
 8020fa0:	607a      	str	r2, [r7, #4]
 8020fa2:	781b      	ldrb	r3, [r3, #0]
 8020fa4:	b2db      	uxtb	r3, r3
 8020fa6:	f04f 0400 	mov.w	r4, #0
 8020faa:	461a      	mov	r2, r3
 8020fac:	4623      	mov	r3, r4
 8020fae:	2000      	movs	r0, #0
 8020fb0:	f006 fc6e 	bl	8027890 <HAL_FLASH_Program>
 8020fb4:	4603      	mov	r3, r0
 8020fb6:	75fb      	strb	r3, [r7, #23]
        if(result != HAL_OK) break;
 8020fb8:	7dfb      	ldrb	r3, [r7, #23]
 8020fba:	2b00      	cmp	r3, #0
 8020fbc:	d103      	bne.n	8020fc6 <_ZN5Flash10StoreUint8EmPhm+0x4e>
    for(uint32_t i = 0; i < number; i++)
 8020fbe:	693b      	ldr	r3, [r7, #16]
 8020fc0:	3301      	adds	r3, #1
 8020fc2:	613b      	str	r3, [r7, #16]
 8020fc4:	e7e3      	b.n	8020f8e <_ZN5Flash10StoreUint8EmPhm+0x16>
        if(result != HAL_OK) break;
 8020fc6:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8020fc8:	f006 fcd8 	bl	802797c <HAL_FLASH_Lock>

    return result == HAL_OK;
 8020fcc:	7dfb      	ldrb	r3, [r7, #23]
 8020fce:	2b00      	cmp	r3, #0
 8020fd0:	bf0c      	ite	eq
 8020fd2:	2301      	moveq	r3, #1
 8020fd4:	2300      	movne	r3, #0
 8020fd6:	b2db      	uxtb	r3, r3
}
 8020fd8:	4618      	mov	r0, r3
 8020fda:	371c      	adds	r7, #28
 8020fdc:	46bd      	mov	sp, r7
 8020fde:	bd90      	pop	{r4, r7, pc}

08020fe0 <_ZN5Flash11StoreUint16EmPtm>:

bool Flash::StoreUint16(uint32_t address, uint16_t *data, uint32_t number)
{
 8020fe0:	b590      	push	{r4, r7, lr}
 8020fe2:	b087      	sub	sp, #28
 8020fe4:	af00      	add	r7, sp, #0
 8020fe6:	60f8      	str	r0, [r7, #12]
 8020fe8:	60b9      	str	r1, [r7, #8]
 8020fea:	607a      	str	r2, [r7, #4]
 8020fec:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8020fee:	f006 fca3 	bl	8027938 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8020ff2:	2300      	movs	r3, #0
 8020ff4:	613b      	str	r3, [r7, #16]
 8020ff6:	693a      	ldr	r2, [r7, #16]
 8020ff8:	683b      	ldr	r3, [r7, #0]
 8020ffa:	429a      	cmp	r2, r3
 8020ffc:	d219      	bcs.n	8021032 <_ZN5Flash11StoreUint16EmPtm+0x52>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++);
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	1c9a      	adds	r2, r3, #2
 8021002:	607a      	str	r2, [r7, #4]
 8021004:	881b      	ldrh	r3, [r3, #0]
 8021006:	b29b      	uxth	r3, r3
 8021008:	f04f 0400 	mov.w	r4, #0
 802100c:	461a      	mov	r2, r3
 802100e:	4623      	mov	r3, r4
 8021010:	68b9      	ldr	r1, [r7, #8]
 8021012:	2001      	movs	r0, #1
 8021014:	f006 fc3c 	bl	8027890 <HAL_FLASH_Program>
 8021018:	4603      	mov	r3, r0
 802101a:	75fb      	strb	r3, [r7, #23]
        address += 2;
 802101c:	68bb      	ldr	r3, [r7, #8]
 802101e:	3302      	adds	r3, #2
 8021020:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 8021022:	7dfb      	ldrb	r3, [r7, #23]
 8021024:	2b00      	cmp	r3, #0
 8021026:	d103      	bne.n	8021030 <_ZN5Flash11StoreUint16EmPtm+0x50>
    for(uint32_t i = 0; i < number; i++)
 8021028:	693b      	ldr	r3, [r7, #16]
 802102a:	3301      	adds	r3, #1
 802102c:	613b      	str	r3, [r7, #16]
 802102e:	e7e2      	b.n	8020ff6 <_ZN5Flash11StoreUint16EmPtm+0x16>
        if(result != HAL_OK) break;
 8021030:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8021032:	f006 fca3 	bl	802797c <HAL_FLASH_Lock>

    return result == HAL_OK;
 8021036:	7dfb      	ldrb	r3, [r7, #23]
 8021038:	2b00      	cmp	r3, #0
 802103a:	bf0c      	ite	eq
 802103c:	2301      	moveq	r3, #1
 802103e:	2300      	movne	r3, #0
 8021040:	b2db      	uxtb	r3, r3
}
 8021042:	4618      	mov	r0, r3
 8021044:	371c      	adds	r7, #28
 8021046:	46bd      	mov	sp, r7
 8021048:	bd90      	pop	{r4, r7, pc}

0802104a <_ZN5Flash10StoreInt16EmPsm>:

bool Flash::StoreInt16(uint32_t address, int16_t *data, uint32_t number)
{
 802104a:	b590      	push	{r4, r7, lr}
 802104c:	b087      	sub	sp, #28
 802104e:	af00      	add	r7, sp, #0
 8021050:	60f8      	str	r0, [r7, #12]
 8021052:	60b9      	str	r1, [r7, #8]
 8021054:	607a      	str	r2, [r7, #4]
 8021056:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021058:	f006 fc6e 	bl	8027938 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 802105c:	2300      	movs	r3, #0
 802105e:	613b      	str	r3, [r7, #16]
 8021060:	693a      	ldr	r2, [r7, #16]
 8021062:	683b      	ldr	r3, [r7, #0]
 8021064:	429a      	cmp	r2, r3
 8021066:	d21a      	bcs.n	802109e <_ZN5Flash10StoreInt16EmPsm+0x54>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++);
 8021068:	687b      	ldr	r3, [r7, #4]
 802106a:	1c9a      	adds	r2, r3, #2
 802106c:	607a      	str	r2, [r7, #4]
 802106e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021072:	b21b      	sxth	r3, r3
 8021074:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8021078:	461a      	mov	r2, r3
 802107a:	4623      	mov	r3, r4
 802107c:	68b9      	ldr	r1, [r7, #8]
 802107e:	2001      	movs	r0, #1
 8021080:	f006 fc06 	bl	8027890 <HAL_FLASH_Program>
 8021084:	4603      	mov	r3, r0
 8021086:	75fb      	strb	r3, [r7, #23]
        address += 2;
 8021088:	68bb      	ldr	r3, [r7, #8]
 802108a:	3302      	adds	r3, #2
 802108c:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 802108e:	7dfb      	ldrb	r3, [r7, #23]
 8021090:	2b00      	cmp	r3, #0
 8021092:	d103      	bne.n	802109c <_ZN5Flash10StoreInt16EmPsm+0x52>
    for(uint32_t i = 0; i < number; i++)
 8021094:	693b      	ldr	r3, [r7, #16]
 8021096:	3301      	adds	r3, #1
 8021098:	613b      	str	r3, [r7, #16]
 802109a:	e7e1      	b.n	8021060 <_ZN5Flash10StoreInt16EmPsm+0x16>
        if(result != HAL_OK) break;
 802109c:	bf00      	nop
    }

    HAL_FLASH_Lock();
 802109e:	f006 fc6d 	bl	802797c <HAL_FLASH_Lock>

    return result == HAL_OK;
 80210a2:	7dfb      	ldrb	r3, [r7, #23]
 80210a4:	2b00      	cmp	r3, #0
 80210a6:	bf0c      	ite	eq
 80210a8:	2301      	moveq	r3, #1
 80210aa:	2300      	movne	r3, #0
 80210ac:	b2db      	uxtb	r3, r3
}
 80210ae:	4618      	mov	r0, r3
 80210b0:	371c      	adds	r7, #28
 80210b2:	46bd      	mov	sp, r7
 80210b4:	bd90      	pop	{r4, r7, pc}

080210b6 <_ZN5Flash10StoreFloatEmPfm>:

bool Flash::StoreFloat(uint32_t address, float *data, uint32_t number)
{
 80210b6:	b590      	push	{r4, r7, lr}
 80210b8:	b087      	sub	sp, #28
 80210ba:	af00      	add	r7, sp, #0
 80210bc:	60f8      	str	r0, [r7, #12]
 80210be:	60b9      	str	r1, [r7, #8]
 80210c0:	607a      	str	r2, [r7, #4]
 80210c2:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 80210c4:	f006 fc38 	bl	8027938 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 80210c8:	2300      	movs	r3, #0
 80210ca:	613b      	str	r3, [r7, #16]
 80210cc:	693a      	ldr	r2, [r7, #16]
 80210ce:	683b      	ldr	r3, [r7, #0]
 80210d0:	429a      	cmp	r2, r3
 80210d2:	d21b      	bcs.n	802110c <_ZN5Flash10StoreFloatEmPfm+0x56>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *data++);
 80210d4:	687b      	ldr	r3, [r7, #4]
 80210d6:	1d1a      	adds	r2, r3, #4
 80210d8:	607a      	str	r2, [r7, #4]
 80210da:	681b      	ldr	r3, [r3, #0]
 80210dc:	4618      	mov	r0, r3
 80210de:	f7ff fc6d 	bl	80209bc <__aeabi_f2ulz>
 80210e2:	4603      	mov	r3, r0
 80210e4:	460c      	mov	r4, r1
 80210e6:	461a      	mov	r2, r3
 80210e8:	4623      	mov	r3, r4
 80210ea:	68b9      	ldr	r1, [r7, #8]
 80210ec:	2002      	movs	r0, #2
 80210ee:	f006 fbcf 	bl	8027890 <HAL_FLASH_Program>
 80210f2:	4603      	mov	r3, r0
 80210f4:	75fb      	strb	r3, [r7, #23]
        address += 4;
 80210f6:	68bb      	ldr	r3, [r7, #8]
 80210f8:	3304      	adds	r3, #4
 80210fa:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 80210fc:	7dfb      	ldrb	r3, [r7, #23]
 80210fe:	2b00      	cmp	r3, #0
 8021100:	d103      	bne.n	802110a <_ZN5Flash10StoreFloatEmPfm+0x54>
    for(uint32_t i = 0; i < number; i++)
 8021102:	693b      	ldr	r3, [r7, #16]
 8021104:	3301      	adds	r3, #1
 8021106:	613b      	str	r3, [r7, #16]
 8021108:	e7e0      	b.n	80210cc <_ZN5Flash10StoreFloatEmPfm+0x16>
        if(result != HAL_OK) break;
 802110a:	bf00      	nop
    }

    HAL_FLASH_Lock();
 802110c:	f006 fc36 	bl	802797c <HAL_FLASH_Lock>

    return result == HAL_OK;
 8021110:	7dfb      	ldrb	r3, [r7, #23]
 8021112:	2b00      	cmp	r3, #0
 8021114:	bf0c      	ite	eq
 8021116:	2301      	moveq	r3, #1
 8021118:	2300      	movne	r3, #0
 802111a:	b2db      	uxtb	r3, r3
}
 802111c:	4618      	mov	r0, r3
 802111e:	371c      	adds	r7, #28
 8021120:	46bd      	mov	sp, r7
 8021122:	bd90      	pop	{r4, r7, pc}

08021124 <_ZN5Flash4LoadEPvmm>:

void Flash::Load(void *data, uint32_t address, uint32_t size)
{
 8021124:	b580      	push	{r7, lr}
 8021126:	b084      	sub	sp, #16
 8021128:	af00      	add	r7, sp, #0
 802112a:	60f8      	str	r0, [r7, #12]
 802112c:	60b9      	str	r1, [r7, #8]
 802112e:	607a      	str	r2, [r7, #4]
 8021130:	603b      	str	r3, [r7, #0]
    memcpy(data, reinterpret_cast<uint32_t*>(address), size);
 8021132:	687b      	ldr	r3, [r7, #4]
 8021134:	683a      	ldr	r2, [r7, #0]
 8021136:	4619      	mov	r1, r3
 8021138:	68b8      	ldr	r0, [r7, #8]
 802113a:	f009 fb55 	bl	802a7e8 <memcpy>
}
 802113e:	bf00      	nop
 8021140:	3710      	adds	r7, #16
 8021142:	46bd      	mov	sp, r7
 8021144:	bd80      	pop	{r7, pc}

08021146 <_ZN5Flash14CheckBlankByteEmm>:

bool Flash::CheckBlankByte(uint32_t address, uint32_t number)
{
 8021146:	b5b0      	push	{r4, r5, r7, lr}
 8021148:	b088      	sub	sp, #32
 802114a:	af00      	add	r7, sp, #0
 802114c:	60f8      	str	r0, [r7, #12]
 802114e:	60b9      	str	r1, [r7, #8]
 8021150:	607a      	str	r2, [r7, #4]

    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);

    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;

    return true;
 8021152:	466b      	mov	r3, sp
 8021154:	461d      	mov	r5, r3
    uint8_t byte[number];
 8021156:	687b      	ldr	r3, [r7, #4]
 8021158:	1e58      	subs	r0, r3, #1
 802115a:	61b8      	str	r0, [r7, #24]
 802115c:	4603      	mov	r3, r0
 802115e:	3301      	adds	r3, #1
 8021160:	4619      	mov	r1, r3
 8021162:	f04f 0200 	mov.w	r2, #0
 8021166:	f04f 0300 	mov.w	r3, #0
 802116a:	f04f 0400 	mov.w	r4, #0
 802116e:	00d4      	lsls	r4, r2, #3
 8021170:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8021174:	00cb      	lsls	r3, r1, #3
 8021176:	4603      	mov	r3, r0
 8021178:	3301      	adds	r3, #1
 802117a:	4619      	mov	r1, r3
 802117c:	f04f 0200 	mov.w	r2, #0
 8021180:	f04f 0300 	mov.w	r3, #0
 8021184:	f04f 0400 	mov.w	r4, #0
 8021188:	00d4      	lsls	r4, r2, #3
 802118a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 802118e:	00cb      	lsls	r3, r1, #3
 8021190:	4603      	mov	r3, r0
 8021192:	3301      	adds	r3, #1
 8021194:	3307      	adds	r3, #7
 8021196:	08db      	lsrs	r3, r3, #3
 8021198:	00db      	lsls	r3, r3, #3
 802119a:	ebad 0d03 	sub.w	sp, sp, r3
 802119e:	466b      	mov	r3, sp
 80211a0:	3300      	adds	r3, #0
 80211a2:	617b      	str	r3, [r7, #20]
    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);
 80211a4:	697b      	ldr	r3, [r7, #20]
 80211a6:	68b9      	ldr	r1, [r7, #8]
 80211a8:	687a      	ldr	r2, [r7, #4]
 80211aa:	4618      	mov	r0, r3
 80211ac:	f009 fb1c 	bl	802a7e8 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;
 80211b0:	2300      	movs	r3, #0
 80211b2:	61fb      	str	r3, [r7, #28]
 80211b4:	69fa      	ldr	r2, [r7, #28]
 80211b6:	687b      	ldr	r3, [r7, #4]
 80211b8:	429a      	cmp	r2, r3
 80211ba:	d20b      	bcs.n	80211d4 <_ZN5Flash14CheckBlankByteEmm+0x8e>
 80211bc:	697a      	ldr	r2, [r7, #20]
 80211be:	69fb      	ldr	r3, [r7, #28]
 80211c0:	4413      	add	r3, r2
 80211c2:	781b      	ldrb	r3, [r3, #0]
 80211c4:	2bff      	cmp	r3, #255	; 0xff
 80211c6:	d001      	beq.n	80211cc <_ZN5Flash14CheckBlankByteEmm+0x86>
 80211c8:	2300      	movs	r3, #0
 80211ca:	e004      	b.n	80211d6 <_ZN5Flash14CheckBlankByteEmm+0x90>
 80211cc:	69fb      	ldr	r3, [r7, #28]
 80211ce:	3301      	adds	r3, #1
 80211d0:	61fb      	str	r3, [r7, #28]
 80211d2:	e7ef      	b.n	80211b4 <_ZN5Flash14CheckBlankByteEmm+0x6e>
    return true;
 80211d4:	2301      	movs	r3, #1
 80211d6:	46ad      	mov	sp, r5
}
 80211d8:	4618      	mov	r0, r3
 80211da:	3720      	adds	r7, #32
 80211dc:	46bd      	mov	sp, r7
 80211de:	bdb0      	pop	{r4, r5, r7, pc}

080211e0 <_ZN5Flash18CheckBlankHalfwordEmm>:

bool Flash::CheckBlankHalfword(uint32_t address, uint32_t number)
{
 80211e0:	b5b0      	push	{r4, r5, r7, lr}
 80211e2:	b088      	sub	sp, #32
 80211e4:	af00      	add	r7, sp, #0
 80211e6:	60f8      	str	r0, [r7, #12]
 80211e8:	60b9      	str	r1, [r7, #8]
 80211ea:	607a      	str	r2, [r7, #4]

    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);

    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;

    return true;
 80211ec:	466b      	mov	r3, sp
 80211ee:	461d      	mov	r5, r3
    uint16_t half[number];
 80211f0:	687b      	ldr	r3, [r7, #4]
 80211f2:	1e58      	subs	r0, r3, #1
 80211f4:	61b8      	str	r0, [r7, #24]
 80211f6:	4603      	mov	r3, r0
 80211f8:	3301      	adds	r3, #1
 80211fa:	4619      	mov	r1, r3
 80211fc:	f04f 0200 	mov.w	r2, #0
 8021200:	f04f 0300 	mov.w	r3, #0
 8021204:	f04f 0400 	mov.w	r4, #0
 8021208:	0114      	lsls	r4, r2, #4
 802120a:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 802120e:	010b      	lsls	r3, r1, #4
 8021210:	4603      	mov	r3, r0
 8021212:	3301      	adds	r3, #1
 8021214:	4619      	mov	r1, r3
 8021216:	f04f 0200 	mov.w	r2, #0
 802121a:	f04f 0300 	mov.w	r3, #0
 802121e:	f04f 0400 	mov.w	r4, #0
 8021222:	0114      	lsls	r4, r2, #4
 8021224:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021228:	010b      	lsls	r3, r1, #4
 802122a:	4603      	mov	r3, r0
 802122c:	3301      	adds	r3, #1
 802122e:	005b      	lsls	r3, r3, #1
 8021230:	3301      	adds	r3, #1
 8021232:	3307      	adds	r3, #7
 8021234:	08db      	lsrs	r3, r3, #3
 8021236:	00db      	lsls	r3, r3, #3
 8021238:	ebad 0d03 	sub.w	sp, sp, r3
 802123c:	466b      	mov	r3, sp
 802123e:	3301      	adds	r3, #1
 8021240:	085b      	lsrs	r3, r3, #1
 8021242:	005b      	lsls	r3, r3, #1
 8021244:	617b      	str	r3, [r7, #20]
    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);
 8021246:	6978      	ldr	r0, [r7, #20]
 8021248:	68b9      	ldr	r1, [r7, #8]
 802124a:	687b      	ldr	r3, [r7, #4]
 802124c:	005b      	lsls	r3, r3, #1
 802124e:	461a      	mov	r2, r3
 8021250:	f009 faca 	bl	802a7e8 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;
 8021254:	2300      	movs	r3, #0
 8021256:	61fb      	str	r3, [r7, #28]
 8021258:	69fa      	ldr	r2, [r7, #28]
 802125a:	687b      	ldr	r3, [r7, #4]
 802125c:	429a      	cmp	r2, r3
 802125e:	d20d      	bcs.n	802127c <_ZN5Flash18CheckBlankHalfwordEmm+0x9c>
 8021260:	697b      	ldr	r3, [r7, #20]
 8021262:	69fa      	ldr	r2, [r7, #28]
 8021264:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802126c:	4293      	cmp	r3, r2
 802126e:	d001      	beq.n	8021274 <_ZN5Flash18CheckBlankHalfwordEmm+0x94>
 8021270:	2300      	movs	r3, #0
 8021272:	e004      	b.n	802127e <_ZN5Flash18CheckBlankHalfwordEmm+0x9e>
 8021274:	69fb      	ldr	r3, [r7, #28]
 8021276:	3301      	adds	r3, #1
 8021278:	61fb      	str	r3, [r7, #28]
 802127a:	e7ed      	b.n	8021258 <_ZN5Flash18CheckBlankHalfwordEmm+0x78>
    return true;
 802127c:	2301      	movs	r3, #1
 802127e:	46ad      	mov	sp, r5
}
 8021280:	4618      	mov	r0, r3
 8021282:	3720      	adds	r7, #32
 8021284:	46bd      	mov	sp, r7
 8021286:	bdb0      	pop	{r4, r5, r7, pc}

08021288 <_ZN5Flash14CheckBlankWordEmm>:

bool Flash::CheckBlankWord(uint32_t address, uint32_t number)
{
 8021288:	b5b0      	push	{r4, r5, r7, lr}
 802128a:	b088      	sub	sp, #32
 802128c:	af00      	add	r7, sp, #0
 802128e:	60f8      	str	r0, [r7, #12]
 8021290:	60b9      	str	r1, [r7, #8]
 8021292:	607a      	str	r2, [r7, #4]

    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);

    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;

    return true;
 8021294:	466b      	mov	r3, sp
 8021296:	461d      	mov	r5, r3
    uint32_t word[number];
 8021298:	687b      	ldr	r3, [r7, #4]
 802129a:	1e58      	subs	r0, r3, #1
 802129c:	61b8      	str	r0, [r7, #24]
 802129e:	4603      	mov	r3, r0
 80212a0:	3301      	adds	r3, #1
 80212a2:	4619      	mov	r1, r3
 80212a4:	f04f 0200 	mov.w	r2, #0
 80212a8:	f04f 0300 	mov.w	r3, #0
 80212ac:	f04f 0400 	mov.w	r4, #0
 80212b0:	0154      	lsls	r4, r2, #5
 80212b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80212b6:	014b      	lsls	r3, r1, #5
 80212b8:	4603      	mov	r3, r0
 80212ba:	3301      	adds	r3, #1
 80212bc:	4619      	mov	r1, r3
 80212be:	f04f 0200 	mov.w	r2, #0
 80212c2:	f04f 0300 	mov.w	r3, #0
 80212c6:	f04f 0400 	mov.w	r4, #0
 80212ca:	0154      	lsls	r4, r2, #5
 80212cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80212d0:	014b      	lsls	r3, r1, #5
 80212d2:	4603      	mov	r3, r0
 80212d4:	3301      	adds	r3, #1
 80212d6:	009b      	lsls	r3, r3, #2
 80212d8:	3303      	adds	r3, #3
 80212da:	3307      	adds	r3, #7
 80212dc:	08db      	lsrs	r3, r3, #3
 80212de:	00db      	lsls	r3, r3, #3
 80212e0:	ebad 0d03 	sub.w	sp, sp, r3
 80212e4:	466b      	mov	r3, sp
 80212e6:	3303      	adds	r3, #3
 80212e8:	089b      	lsrs	r3, r3, #2
 80212ea:	009b      	lsls	r3, r3, #2
 80212ec:	617b      	str	r3, [r7, #20]
    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);
 80212ee:	6978      	ldr	r0, [r7, #20]
 80212f0:	68b9      	ldr	r1, [r7, #8]
 80212f2:	687b      	ldr	r3, [r7, #4]
 80212f4:	009b      	lsls	r3, r3, #2
 80212f6:	461a      	mov	r2, r3
 80212f8:	f009 fa76 	bl	802a7e8 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;
 80212fc:	2300      	movs	r3, #0
 80212fe:	61fb      	str	r3, [r7, #28]
 8021300:	69fa      	ldr	r2, [r7, #28]
 8021302:	687b      	ldr	r3, [r7, #4]
 8021304:	429a      	cmp	r2, r3
 8021306:	d20c      	bcs.n	8021322 <_ZN5Flash14CheckBlankWordEmm+0x9a>
 8021308:	697b      	ldr	r3, [r7, #20]
 802130a:	69fa      	ldr	r2, [r7, #28]
 802130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021314:	d001      	beq.n	802131a <_ZN5Flash14CheckBlankWordEmm+0x92>
 8021316:	2300      	movs	r3, #0
 8021318:	e004      	b.n	8021324 <_ZN5Flash14CheckBlankWordEmm+0x9c>
 802131a:	69fb      	ldr	r3, [r7, #28]
 802131c:	3301      	adds	r3, #1
 802131e:	61fb      	str	r3, [r7, #28]
 8021320:	e7ee      	b.n	8021300 <_ZN5Flash14CheckBlankWordEmm+0x78>
    return true;
 8021322:	2301      	movs	r3, #1
 8021324:	46ad      	mov	sp, r5
 8021326:	4618      	mov	r0, r3
 8021328:	3720      	adds	r7, #32
 802132a:	46bd      	mov	sp, r7
 802132c:	bdb0      	pop	{r4, r5, r7, pc}

0802132e <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"

Iim42652::Iim42652() {}
 802132e:	b480      	push	{r7}
 8021330:	b083      	sub	sp, #12
 8021332:	af00      	add	r7, sp, #0
 8021334:	6078      	str	r0, [r7, #4]
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	4618      	mov	r0, r3
 802133a:	370c      	adds	r7, #12
 802133c:	46bd      	mov	sp, r7
 802133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021342:	4770      	bx	lr

08021344 <_ZN8Iim426524InitEv>:

uint8_t Iim42652::Init()
{
 8021344:	b580      	push	{r7, lr}
 8021346:	b084      	sub	sp, #16
 8021348:	af00      	add	r7, sp, #0
 802134a:	6078      	str	r0, [r7, #4]
    uint8_t who_l  = Read(WHO_AM_I_ADD, 'L');
 802134c:	224c      	movs	r2, #76	; 0x4c
 802134e:	2175      	movs	r1, #117	; 0x75
 8021350:	6878      	ldr	r0, [r7, #4]
 8021352:	f000 f897 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021356:	4603      	mov	r3, r0
 8021358:	73fb      	strb	r3, [r7, #15]
    uint8_t who_r  = Read(WHO_AM_I_ADD, 'R');
 802135a:	2252      	movs	r2, #82	; 0x52
 802135c:	2175      	movs	r1, #117	; 0x75
 802135e:	6878      	ldr	r0, [r7, #4]
 8021360:	f000 f890 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021364:	4603      	mov	r3, r0
 8021366:	73bb      	strb	r3, [r7, #14]
    uint8_t bank_l = Read(REG_BANK_SEL_ADD, 'L');
 8021368:	224c      	movs	r2, #76	; 0x4c
 802136a:	2176      	movs	r1, #118	; 0x76
 802136c:	6878      	ldr	r0, [r7, #4]
 802136e:	f000 f889 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021372:	4603      	mov	r3, r0
 8021374:	737b      	strb	r3, [r7, #13]
    uint8_t bank_r = Read(REG_BANK_SEL_ADD, 'R');
 8021376:	2252      	movs	r2, #82	; 0x52
 8021378:	2176      	movs	r1, #118	; 0x76
 802137a:	6878      	ldr	r0, [r7, #4]
 802137c:	f000 f882 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021380:	4603      	mov	r3, r0
 8021382:	733b      	strb	r3, [r7, #12]
    uint8_t pwr_l  = Read(PWR_MGMT0_ADD, 'L');
 8021384:	224c      	movs	r2, #76	; 0x4c
 8021386:	214e      	movs	r1, #78	; 0x4e
 8021388:	6878      	ldr	r0, [r7, #4]
 802138a:	f000 f87b 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802138e:	4603      	mov	r3, r0
 8021390:	72fb      	strb	r3, [r7, #11]
    uint8_t pwr_r  = Read(PWR_MGMT0_ADD, 'R');
 8021392:	2252      	movs	r2, #82	; 0x52
 8021394:	214e      	movs	r1, #78	; 0x4e
 8021396:	6878      	ldr	r0, [r7, #4]
 8021398:	f000 f874 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802139c:	4603      	mov	r3, r0
 802139e:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_who_l  = who_l;  g_imu_who_r  = who_r;
 80213a0:	4a32      	ldr	r2, [pc, #200]	; (802146c <_ZN8Iim426524InitEv+0x128>)
 80213a2:	7bfb      	ldrb	r3, [r7, #15]
 80213a4:	7013      	strb	r3, [r2, #0]
 80213a6:	4a32      	ldr	r2, [pc, #200]	; (8021470 <_ZN8Iim426524InitEv+0x12c>)
 80213a8:	7bbb      	ldrb	r3, [r7, #14]
 80213aa:	7013      	strb	r3, [r2, #0]
    g_imu_bank_l = bank_l; g_imu_bank_r = bank_r;
 80213ac:	4a31      	ldr	r2, [pc, #196]	; (8021474 <_ZN8Iim426524InitEv+0x130>)
 80213ae:	7b7b      	ldrb	r3, [r7, #13]
 80213b0:	7013      	strb	r3, [r2, #0]
 80213b2:	4a31      	ldr	r2, [pc, #196]	; (8021478 <_ZN8Iim426524InitEv+0x134>)
 80213b4:	7b3b      	ldrb	r3, [r7, #12]
 80213b6:	7013      	strb	r3, [r2, #0]
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 80213b8:	4a30      	ldr	r2, [pc, #192]	; (802147c <_ZN8Iim426524InitEv+0x138>)
 80213ba:	7afb      	ldrb	r3, [r7, #11]
 80213bc:	7013      	strb	r3, [r2, #0]
 80213be:	4a30      	ldr	r2, [pc, #192]	; (8021480 <_ZN8Iim426524InitEv+0x13c>)
 80213c0:	7abb      	ldrb	r3, [r7, #10]
 80213c2:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(who_l != WHO_AM_I_RES)      return 0x01;
 80213c4:	7bfb      	ldrb	r3, [r7, #15]
 80213c6:	2b6f      	cmp	r3, #111	; 0x6f
 80213c8:	d001      	beq.n	80213ce <_ZN8Iim426524InitEv+0x8a>
 80213ca:	2301      	movs	r3, #1
 80213cc:	e049      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>
    if(who_r != WHO_AM_I_RES)      return 0x02;
 80213ce:	7bbb      	ldrb	r3, [r7, #14]
 80213d0:	2b6f      	cmp	r3, #111	; 0x6f
 80213d2:	d001      	beq.n	80213d8 <_ZN8Iim426524InitEv+0x94>
 80213d4:	2302      	movs	r3, #2
 80213d6:	e044      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>
    if(bank_l != REG_BANK_SEL_RES) return 0x03;
 80213d8:	7b7b      	ldrb	r3, [r7, #13]
 80213da:	2b00      	cmp	r3, #0
 80213dc:	d001      	beq.n	80213e2 <_ZN8Iim426524InitEv+0x9e>
 80213de:	2303      	movs	r3, #3
 80213e0:	e03f      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>
    if(bank_r != REG_BANK_SEL_RES) return 0x04;
 80213e2:	7b3b      	ldrb	r3, [r7, #12]
 80213e4:	2b00      	cmp	r3, #0
 80213e6:	d001      	beq.n	80213ec <_ZN8Iim426524InitEv+0xa8>
 80213e8:	2304      	movs	r3, #4
 80213ea:	e03a      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>
    if(pwr_l != PWR_MGMT0_RES)     return 0x05;
 80213ec:	7afb      	ldrb	r3, [r7, #11]
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	d001      	beq.n	80213f6 <_ZN8Iim426524InitEv+0xb2>
 80213f2:	2305      	movs	r3, #5
 80213f4:	e035      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>
    if(pwr_r != PWR_MGMT0_RES)     return 0x06;
 80213f6:	7abb      	ldrb	r3, [r7, #10]
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d001      	beq.n	8021400 <_ZN8Iim426524InitEv+0xbc>
 80213fc:	2306      	movs	r3, #6
 80213fe:	e030      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>

    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'L');
 8021400:	234c      	movs	r3, #76	; 0x4c
 8021402:	220f      	movs	r2, #15
 8021404:	214e      	movs	r1, #78	; 0x4e
 8021406:	6878      	ldr	r0, [r7, #4]
 8021408:	f000 f88a 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 802140c:	2064      	movs	r0, #100	; 0x64
 802140e:	f005 f9a9 	bl	8026764 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'R');
 8021412:	2352      	movs	r3, #82	; 0x52
 8021414:	220f      	movs	r2, #15
 8021416:	214e      	movs	r1, #78	; 0x4e
 8021418:	6878      	ldr	r0, [r7, #4]
 802141a:	f000 f881 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 802141e:	2064      	movs	r0, #100	; 0x64
 8021420:	f005 f9a0 	bl	8026764 <HAL_Delay>
    pwr_l = Read(PWR_MGMT0_ADD, 'L');
 8021424:	224c      	movs	r2, #76	; 0x4c
 8021426:	214e      	movs	r1, #78	; 0x4e
 8021428:	6878      	ldr	r0, [r7, #4]
 802142a:	f000 f82b 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802142e:	4603      	mov	r3, r0
 8021430:	72fb      	strb	r3, [r7, #11]
    pwr_r = Read(PWR_MGMT0_ADD, 'R');
 8021432:	2252      	movs	r2, #82	; 0x52
 8021434:	214e      	movs	r1, #78	; 0x4e
 8021436:	6878      	ldr	r0, [r7, #4]
 8021438:	f000 f824 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802143c:	4603      	mov	r3, r0
 802143e:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 8021440:	4a0e      	ldr	r2, [pc, #56]	; (802147c <_ZN8Iim426524InitEv+0x138>)
 8021442:	7afb      	ldrb	r3, [r7, #11]
 8021444:	7013      	strb	r3, [r2, #0]
 8021446:	4a0e      	ldr	r2, [pc, #56]	; (8021480 <_ZN8Iim426524InitEv+0x13c>)
 8021448:	7abb      	ldrb	r3, [r7, #10]
 802144a:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(pwr_l != PWR_MGMT0_ON) return 0x07;
 802144c:	7afb      	ldrb	r3, [r7, #11]
 802144e:	2b0f      	cmp	r3, #15
 8021450:	d001      	beq.n	8021456 <_ZN8Iim426524InitEv+0x112>
 8021452:	2307      	movs	r3, #7
 8021454:	e005      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>
    if(pwr_r != PWR_MGMT0_ON) return 0x08;
 8021456:	7abb      	ldrb	r3, [r7, #10]
 8021458:	2b0f      	cmp	r3, #15
 802145a:	d001      	beq.n	8021460 <_ZN8Iim426524InitEv+0x11c>
 802145c:	2308      	movs	r3, #8
 802145e:	e000      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>

    return 0x09;
 8021460:	2309      	movs	r3, #9
}
 8021462:	4618      	mov	r0, r3
 8021464:	3710      	adds	r7, #16
 8021466:	46bd      	mov	sp, r7
 8021468:	bd80      	pop	{r7, pc}
 802146a:	bf00      	nop
 802146c:	20000267 	.word	0x20000267
 8021470:	20000268 	.word	0x20000268
 8021474:	20000269 	.word	0x20000269
 8021478:	2000026a 	.word	0x2000026a
 802147c:	2000026b 	.word	0x2000026b
 8021480:	2000026c 	.word	0x2000026c

08021484 <_ZN8Iim426524ReadEhc>:

uint8_t Iim42652::Read(uint8_t send_address, char imu_ic_lr)
{
 8021484:	b580      	push	{r7, lr}
 8021486:	b084      	sub	sp, #16
 8021488:	af00      	add	r7, sp, #0
 802148a:	6078      	str	r0, [r7, #4]
 802148c:	460b      	mov	r3, r1
 802148e:	70fb      	strb	r3, [r7, #3]
 8021490:	4613      	mov	r3, r2
 8021492:	70bb      	strb	r3, [r7, #2]
    uint8_t receive_reset_value = 0x00;
 8021494:	2300      	movs	r3, #0
 8021496:	73fb      	strb	r3, [r7, #15]

    send_address = send_address | 0x80; // Read 1--- ----
 8021498:	78fb      	ldrb	r3, [r7, #3]
 802149a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802149e:	b2db      	uxtb	r3, r3
 80214a0:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 80214a2:	78bb      	ldrb	r3, [r7, #2]
 80214a4:	2b4c      	cmp	r3, #76	; 0x4c
 80214a6:	d106      	bne.n	80214b6 <_ZN8Iim426524ReadEhc+0x32>
 80214a8:	2200      	movs	r2, #0
 80214aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80214ae:	4819      	ldr	r0, [pc, #100]	; (8021514 <_ZN8Iim426524ReadEhc+0x90>)
 80214b0:	f006 fe76 	bl	80281a0 <HAL_GPIO_WritePin>
 80214b4:	e008      	b.n	80214c8 <_ZN8Iim426524ReadEhc+0x44>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 80214b6:	78bb      	ldrb	r3, [r7, #2]
 80214b8:	2b52      	cmp	r3, #82	; 0x52
 80214ba:	d105      	bne.n	80214c8 <_ZN8Iim426524ReadEhc+0x44>
 80214bc:	2200      	movs	r2, #0
 80214be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80214c2:	4815      	ldr	r0, [pc, #84]	; (8021518 <_ZN8Iim426524ReadEhc+0x94>)
 80214c4:	f006 fe6c 	bl	80281a0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 80214c8:	1cf9      	adds	r1, r7, #3
 80214ca:	2364      	movs	r3, #100	; 0x64
 80214cc:	2201      	movs	r2, #1
 80214ce:	4813      	ldr	r0, [pc, #76]	; (802151c <_ZN8Iim426524ReadEhc+0x98>)
 80214d0:	f007 fc44 	bl	8028d5c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &receive_reset_value, 1, 100);
 80214d4:	f107 010f 	add.w	r1, r7, #15
 80214d8:	2364      	movs	r3, #100	; 0x64
 80214da:	2201      	movs	r2, #1
 80214dc:	480f      	ldr	r0, [pc, #60]	; (802151c <_ZN8Iim426524ReadEhc+0x98>)
 80214de:	f007 fd71 	bl	8028fc4 <HAL_SPI_Receive>

    if(imu_ic_lr == 'L') CS_SET_L;
 80214e2:	78bb      	ldrb	r3, [r7, #2]
 80214e4:	2b4c      	cmp	r3, #76	; 0x4c
 80214e6:	d106      	bne.n	80214f6 <_ZN8Iim426524ReadEhc+0x72>
 80214e8:	2201      	movs	r2, #1
 80214ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80214ee:	4809      	ldr	r0, [pc, #36]	; (8021514 <_ZN8Iim426524ReadEhc+0x90>)
 80214f0:	f006 fe56 	bl	80281a0 <HAL_GPIO_WritePin>
 80214f4:	e008      	b.n	8021508 <_ZN8Iim426524ReadEhc+0x84>
    else if(imu_ic_lr == 'R') CS_SET_R;
 80214f6:	78bb      	ldrb	r3, [r7, #2]
 80214f8:	2b52      	cmp	r3, #82	; 0x52
 80214fa:	d105      	bne.n	8021508 <_ZN8Iim426524ReadEhc+0x84>
 80214fc:	2201      	movs	r2, #1
 80214fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021502:	4805      	ldr	r0, [pc, #20]	; (8021518 <_ZN8Iim426524ReadEhc+0x94>)
 8021504:	f006 fe4c 	bl	80281a0 <HAL_GPIO_WritePin>
    
    return receive_reset_value;
 8021508:	7bfb      	ldrb	r3, [r7, #15]
}
 802150a:	4618      	mov	r0, r3
 802150c:	3710      	adds	r7, #16
 802150e:	46bd      	mov	sp, r7
 8021510:	bd80      	pop	{r7, pc}
 8021512:	bf00      	nop
 8021514:	40020400 	.word	0x40020400
 8021518:	40020000 	.word	0x40020000
 802151c:	2000090c 	.word	0x2000090c

08021520 <_ZN8Iim426525WriteEhhc>:

void Iim42652::Write(uint8_t send_address, uint8_t send_data, char imu_ic_lr)
{
 8021520:	b580      	push	{r7, lr}
 8021522:	b082      	sub	sp, #8
 8021524:	af00      	add	r7, sp, #0
 8021526:	6078      	str	r0, [r7, #4]
 8021528:	4608      	mov	r0, r1
 802152a:	4611      	mov	r1, r2
 802152c:	461a      	mov	r2, r3
 802152e:	4603      	mov	r3, r0
 8021530:	70fb      	strb	r3, [r7, #3]
 8021532:	460b      	mov	r3, r1
 8021534:	70bb      	strb	r3, [r7, #2]
 8021536:	4613      	mov	r3, r2
 8021538:	707b      	strb	r3, [r7, #1]
    send_address = send_address & 0x7F; // Write 0--- ----
 802153a:	78fb      	ldrb	r3, [r7, #3]
 802153c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021540:	b2db      	uxtb	r3, r3
 8021542:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 8021544:	787b      	ldrb	r3, [r7, #1]
 8021546:	2b4c      	cmp	r3, #76	; 0x4c
 8021548:	d106      	bne.n	8021558 <_ZN8Iim426525WriteEhhc+0x38>
 802154a:	2200      	movs	r2, #0
 802154c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8021550:	4817      	ldr	r0, [pc, #92]	; (80215b0 <_ZN8Iim426525WriteEhhc+0x90>)
 8021552:	f006 fe25 	bl	80281a0 <HAL_GPIO_WritePin>
 8021556:	e008      	b.n	802156a <_ZN8Iim426525WriteEhhc+0x4a>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 8021558:	787b      	ldrb	r3, [r7, #1]
 802155a:	2b52      	cmp	r3, #82	; 0x52
 802155c:	d105      	bne.n	802156a <_ZN8Iim426525WriteEhhc+0x4a>
 802155e:	2200      	movs	r2, #0
 8021560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021564:	4813      	ldr	r0, [pc, #76]	; (80215b4 <_ZN8Iim426525WriteEhhc+0x94>)
 8021566:	f006 fe1b 	bl	80281a0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 802156a:	1cf9      	adds	r1, r7, #3
 802156c:	2364      	movs	r3, #100	; 0x64
 802156e:	2201      	movs	r2, #1
 8021570:	4811      	ldr	r0, [pc, #68]	; (80215b8 <_ZN8Iim426525WriteEhhc+0x98>)
 8021572:	f007 fbf3 	bl	8028d5c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &send_data, 1, 100);
 8021576:	1cb9      	adds	r1, r7, #2
 8021578:	2364      	movs	r3, #100	; 0x64
 802157a:	2201      	movs	r2, #1
 802157c:	480e      	ldr	r0, [pc, #56]	; (80215b8 <_ZN8Iim426525WriteEhhc+0x98>)
 802157e:	f007 fbed 	bl	8028d5c <HAL_SPI_Transmit>

    if(imu_ic_lr == 'L') CS_SET_L;
 8021582:	787b      	ldrb	r3, [r7, #1]
 8021584:	2b4c      	cmp	r3, #76	; 0x4c
 8021586:	d106      	bne.n	8021596 <_ZN8Iim426525WriteEhhc+0x76>
 8021588:	2201      	movs	r2, #1
 802158a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802158e:	4808      	ldr	r0, [pc, #32]	; (80215b0 <_ZN8Iim426525WriteEhhc+0x90>)
 8021590:	f006 fe06 	bl	80281a0 <HAL_GPIO_WritePin>
    else if(imu_ic_lr == 'R') CS_SET_R;
}
 8021594:	e008      	b.n	80215a8 <_ZN8Iim426525WriteEhhc+0x88>
    else if(imu_ic_lr == 'R') CS_SET_R;
 8021596:	787b      	ldrb	r3, [r7, #1]
 8021598:	2b52      	cmp	r3, #82	; 0x52
 802159a:	d105      	bne.n	80215a8 <_ZN8Iim426525WriteEhhc+0x88>
 802159c:	2201      	movs	r2, #1
 802159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80215a2:	4804      	ldr	r0, [pc, #16]	; (80215b4 <_ZN8Iim426525WriteEhhc+0x94>)
 80215a4:	f006 fdfc 	bl	80281a0 <HAL_GPIO_WritePin>
}
 80215a8:	bf00      	nop
 80215aa:	3708      	adds	r7, #8
 80215ac:	46bd      	mov	sp, r7
 80215ae:	bd80      	pop	{r7, pc}
 80215b0:	40020400 	.word	0x40020400
 80215b4:	40020000 	.word	0x40020000
 80215b8:	2000090c 	.word	0x2000090c

080215bc <_ZN8Iim426529Read2ByteEhhc>:

    return CheckRead(send_address, send_data, imu_ic_lr);
}

int16_t Iim42652::Read2Byte(uint8_t upper_address, uint8_t lower_address, char imu_ic_lr)
{
 80215bc:	b580      	push	{r7, lr}
 80215be:	b084      	sub	sp, #16
 80215c0:	af00      	add	r7, sp, #0
 80215c2:	6078      	str	r0, [r7, #4]
 80215c4:	4608      	mov	r0, r1
 80215c6:	4611      	mov	r1, r2
 80215c8:	461a      	mov	r2, r3
 80215ca:	4603      	mov	r3, r0
 80215cc:	70fb      	strb	r3, [r7, #3]
 80215ce:	460b      	mov	r3, r1
 80215d0:	70bb      	strb	r3, [r7, #2]
 80215d2:	4613      	mov	r3, r2
 80215d4:	707b      	strb	r3, [r7, #1]
    int16_t upper_receive, lower_receive;

    upper_receive = static_cast<int16_t>(Read(upper_address, imu_ic_lr));
 80215d6:	787a      	ldrb	r2, [r7, #1]
 80215d8:	78fb      	ldrb	r3, [r7, #3]
 80215da:	4619      	mov	r1, r3
 80215dc:	6878      	ldr	r0, [r7, #4]
 80215de:	f7ff ff51 	bl	8021484 <_ZN8Iim426524ReadEhc>
 80215e2:	4603      	mov	r3, r0
 80215e4:	81fb      	strh	r3, [r7, #14]
    lower_receive = static_cast<int16_t>(Read(lower_address, imu_ic_lr));
 80215e6:	787a      	ldrb	r2, [r7, #1]
 80215e8:	78bb      	ldrb	r3, [r7, #2]
 80215ea:	4619      	mov	r1, r3
 80215ec:	6878      	ldr	r0, [r7, #4]
 80215ee:	f7ff ff49 	bl	8021484 <_ZN8Iim426524ReadEhc>
 80215f2:	4603      	mov	r3, r0
 80215f4:	81bb      	strh	r3, [r7, #12]

    return (upper_receive << 8) | lower_receive;
 80215f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80215fa:	021b      	lsls	r3, r3, #8
 80215fc:	b21a      	sxth	r2, r3
 80215fe:	89bb      	ldrh	r3, [r7, #12]
 8021600:	4313      	orrs	r3, r2
 8021602:	b21b      	sxth	r3, r3
}
 8021604:	4618      	mov	r0, r3
 8021606:	3710      	adds	r7, #16
 8021608:	46bd      	mov	sp, r7
 802160a:	bd80      	pop	{r7, pc}
 802160c:	0000      	movs	r0, r0
	...

08021610 <_ZN8Iim426526UpdateEv>:

void Iim42652::Update()
{
 8021610:	b590      	push	{r4, r7, lr}
 8021612:	b089      	sub	sp, #36	; 0x24
 8021614:	af00      	add	r7, sp, #0
 8021616:	6078      	str	r0, [r7, #4]
    int16_t raw_z_l = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
 8021618:	234c      	movs	r3, #76	; 0x4c
 802161a:	222a      	movs	r2, #42	; 0x2a
 802161c:	2129      	movs	r1, #41	; 0x29
 802161e:	6878      	ldr	r0, [r7, #4]
 8021620:	f7ff ffcc 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021624:	4603      	mov	r3, r0
 8021626:	83fb      	strh	r3, [r7, #30]
    int16_t raw_z_r = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 8021628:	2352      	movs	r3, #82	; 0x52
 802162a:	222a      	movs	r2, #42	; 0x2a
 802162c:	2129      	movs	r1, #41	; 0x29
 802162e:	6878      	ldr	r0, [r7, #4]
 8021630:	f7ff ffc4 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021634:	4603      	mov	r3, r0
 8021636:	83bb      	strh	r3, [r7, #28]
    double avg_raw_z = static_cast<double>(raw_z_l + raw_z_r) / 2.0;
 8021638:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 802163c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8021640:	4413      	add	r3, r2
 8021642:	4618      	mov	r0, r3
 8021644:	f7fe fe4e 	bl	80202e4 <__aeabi_i2d>
 8021648:	f04f 0200 	mov.w	r2, #0
 802164c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021650:	f7fe ffdc 	bl	802060c <__aeabi_ddiv>
 8021654:	4603      	mov	r3, r0
 8021656:	460c      	mov	r4, r1
 8021658:	e9c7 3404 	strd	r3, r4, [r7, #16]
    double degree_z = avg_raw_z * NORMAL_FUCOR_DPS * TIM6_PERIOD;
 802165c:	a316      	add	r3, pc, #88	; (adr r3, 80216b8 <_ZN8Iim426526UpdateEv+0xa8>)
 802165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021662:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8021666:	f7fe fea7 	bl	80203b8 <__aeabi_dmul>
 802166a:	4603      	mov	r3, r0
 802166c:	460c      	mov	r4, r1
 802166e:	4618      	mov	r0, r3
 8021670:	4621      	mov	r1, r4
 8021672:	f04f 0200 	mov.w	r2, #0
 8021676:	4b0e      	ldr	r3, [pc, #56]	; (80216b0 <_ZN8Iim426526UpdateEv+0xa0>)
 8021678:	f7fe fe9e 	bl	80203b8 <__aeabi_dmul>
 802167c:	4603      	mov	r3, r0
 802167e:	460c      	mov	r4, r1
 8021680:	e9c7 3402 	strd	r3, r4, [r7, #8]

    degree_stack_z_ += degree_z;
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	e9d3 0100 	ldrd	r0, r1, [r3]
 802168a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802168e:	f7fe fcdd 	bl	802004c <__adddf3>
 8021692:	4603      	mov	r3, r0
 8021694:	460c      	mov	r4, r1
 8021696:	687a      	ldr	r2, [r7, #4]
 8021698:	e9c2 3400 	strd	r3, r4, [r2]

#ifdef DEBUG_MODE
    g_deg_z = degree_z;
 802169c:	4a05      	ldr	r2, [pc, #20]	; (80216b4 <_ZN8Iim426526UpdateEv+0xa4>)
 802169e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80216a2:	e9c2 3400 	strd	r3, r4, [r2]
#endif // DEBUG_MODE
}
 80216a6:	bf00      	nop
 80216a8:	3724      	adds	r7, #36	; 0x24
 80216aa:	46bd      	mov	sp, r7
 80216ac:	bd90      	pop	{r4, r7, pc}
 80216ae:	bf00      	nop
 80216b0:	3ff40000 	.word	0x3ff40000
 80216b4:	20000278 	.word	0x20000278
 80216b8:	ddb1209f 	.word	0xddb1209f
 80216bc:	3faf403d 	.word	0x3faf403d

080216c0 <_ZN8Iim4265217ResetDegreeStackZEv>:

void Iim42652::ResetDegreeStackZ()
{
 80216c0:	b490      	push	{r4, r7}
 80216c2:	b082      	sub	sp, #8
 80216c4:	af00      	add	r7, sp, #0
 80216c6:	6078      	str	r0, [r7, #4]
    degree_stack_z_ = 0.0;
 80216c8:	687a      	ldr	r2, [r7, #4]
 80216ca:	f04f 0300 	mov.w	r3, #0
 80216ce:	f04f 0400 	mov.w	r4, #0
 80216d2:	e9c2 3400 	strd	r3, r4, [r2]
}
 80216d6:	bf00      	nop
 80216d8:	3708      	adds	r7, #8
 80216da:	46bd      	mov	sp, r7
 80216dc:	bc90      	pop	{r4, r7}
 80216de:	4770      	bx	lr

080216e0 <_ZN8Iim4265215GetDegreeStackZEv>:

double Iim42652::GetDegreeStackZ()
{
 80216e0:	b490      	push	{r4, r7}
 80216e2:	b082      	sub	sp, #8
 80216e4:	af00      	add	r7, sp, #0
 80216e6:	6078      	str	r0, [r7, #4]
    return degree_stack_z_;
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80216ee:	ec44 3b17 	vmov	d7, r3, r4
}
 80216f2:	eeb0 0a47 	vmov.f32	s0, s14
 80216f6:	eef0 0a67 	vmov.f32	s1, s15
 80216fa:	3708      	adds	r7, #8
 80216fc:	46bd      	mov	sp, r7
 80216fe:	bc90      	pop	{r4, r7}
 8021700:	4770      	bx	lr

08021702 <_ZN8Iim426529GyroXLeftEv>:

int16_t Iim42652::GyroXLeft()
{
 8021702:	b580      	push	{r7, lr}
 8021704:	b082      	sub	sp, #8
 8021706:	af00      	add	r7, sp, #0
 8021708:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_X1_ADD, GYRO_DATA_X0_ADD, 'L');
 802170a:	234c      	movs	r3, #76	; 0x4c
 802170c:	2226      	movs	r2, #38	; 0x26
 802170e:	2125      	movs	r1, #37	; 0x25
 8021710:	6878      	ldr	r0, [r7, #4]
 8021712:	f7ff ff53 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021716:	4603      	mov	r3, r0
}
 8021718:	4618      	mov	r0, r3
 802171a:	3708      	adds	r7, #8
 802171c:	46bd      	mov	sp, r7
 802171e:	bd80      	pop	{r7, pc}

08021720 <_ZN8Iim4265210GyroXRightEv>:

int16_t Iim42652::GyroXRight()
{
 8021720:	b580      	push	{r7, lr}
 8021722:	b082      	sub	sp, #8
 8021724:	af00      	add	r7, sp, #0
 8021726:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_X1_ADD, GYRO_DATA_X0_ADD, 'R');
 8021728:	2352      	movs	r3, #82	; 0x52
 802172a:	2226      	movs	r2, #38	; 0x26
 802172c:	2125      	movs	r1, #37	; 0x25
 802172e:	6878      	ldr	r0, [r7, #4]
 8021730:	f7ff ff44 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021734:	4603      	mov	r3, r0
}
 8021736:	4618      	mov	r0, r3
 8021738:	3708      	adds	r7, #8
 802173a:	46bd      	mov	sp, r7
 802173c:	bd80      	pop	{r7, pc}

0802173e <_ZN8Iim426529GyroYLeftEv>:

int16_t Iim42652::GyroYLeft()
{
 802173e:	b580      	push	{r7, lr}
 8021740:	b082      	sub	sp, #8
 8021742:	af00      	add	r7, sp, #0
 8021744:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Y1_ADD, GYRO_DATA_Y0_ADD, 'L');
 8021746:	234c      	movs	r3, #76	; 0x4c
 8021748:	2228      	movs	r2, #40	; 0x28
 802174a:	2127      	movs	r1, #39	; 0x27
 802174c:	6878      	ldr	r0, [r7, #4]
 802174e:	f7ff ff35 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021752:	4603      	mov	r3, r0
}
 8021754:	4618      	mov	r0, r3
 8021756:	3708      	adds	r7, #8
 8021758:	46bd      	mov	sp, r7
 802175a:	bd80      	pop	{r7, pc}

0802175c <_ZN8Iim4265210GyroYRightEv>:

int16_t Iim42652::GyroYRight()
{
 802175c:	b580      	push	{r7, lr}
 802175e:	b082      	sub	sp, #8
 8021760:	af00      	add	r7, sp, #0
 8021762:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Y1_ADD, GYRO_DATA_Y0_ADD, 'R');
 8021764:	2352      	movs	r3, #82	; 0x52
 8021766:	2228      	movs	r2, #40	; 0x28
 8021768:	2127      	movs	r1, #39	; 0x27
 802176a:	6878      	ldr	r0, [r7, #4]
 802176c:	f7ff ff26 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021770:	4603      	mov	r3, r0
}
 8021772:	4618      	mov	r0, r3
 8021774:	3708      	adds	r7, #8
 8021776:	46bd      	mov	sp, r7
 8021778:	bd80      	pop	{r7, pc}

0802177a <_ZN8Iim426529GyroZLeftEv>:

int16_t Iim42652::GyroZLeft()
{
 802177a:	b580      	push	{r7, lr}
 802177c:	b082      	sub	sp, #8
 802177e:	af00      	add	r7, sp, #0
 8021780:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
 8021782:	234c      	movs	r3, #76	; 0x4c
 8021784:	222a      	movs	r2, #42	; 0x2a
 8021786:	2129      	movs	r1, #41	; 0x29
 8021788:	6878      	ldr	r0, [r7, #4]
 802178a:	f7ff ff17 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 802178e:	4603      	mov	r3, r0
}
 8021790:	4618      	mov	r0, r3
 8021792:	3708      	adds	r7, #8
 8021794:	46bd      	mov	sp, r7
 8021796:	bd80      	pop	{r7, pc}

08021798 <_ZN8Iim4265210GyroZRightEv>:

int16_t Iim42652::GyroZRight()
{
 8021798:	b580      	push	{r7, lr}
 802179a:	b082      	sub	sp, #8
 802179c:	af00      	add	r7, sp, #0
 802179e:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 80217a0:	2352      	movs	r3, #82	; 0x52
 80217a2:	222a      	movs	r2, #42	; 0x2a
 80217a4:	2129      	movs	r1, #41	; 0x29
 80217a6:	6878      	ldr	r0, [r7, #4]
 80217a8:	f7ff ff08 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 80217ac:	4603      	mov	r3, r0
}
 80217ae:	4618      	mov	r0, r3
 80217b0:	3708      	adds	r7, #8
 80217b2:	46bd      	mov	sp, r7
 80217b4:	bd80      	pop	{r7, pc}

080217b6 <_ZN8Iim4265210AccelXLeftEv>:

int16_t Iim42652::AccelXLeft()
{
 80217b6:	b580      	push	{r7, lr}
 80217b8:	b082      	sub	sp, #8
 80217ba:	af00      	add	r7, sp, #0
 80217bc:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_X1_ADD, ACCEL_DATA_X0_ADD, 'L');
 80217be:	234c      	movs	r3, #76	; 0x4c
 80217c0:	2220      	movs	r2, #32
 80217c2:	211f      	movs	r1, #31
 80217c4:	6878      	ldr	r0, [r7, #4]
 80217c6:	f7ff fef9 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 80217ca:	4603      	mov	r3, r0
}
 80217cc:	4618      	mov	r0, r3
 80217ce:	3708      	adds	r7, #8
 80217d0:	46bd      	mov	sp, r7
 80217d2:	bd80      	pop	{r7, pc}

080217d4 <_ZN8Iim4265211AccelXRightEv>:

int16_t Iim42652::AccelXRight()
{
 80217d4:	b580      	push	{r7, lr}
 80217d6:	b082      	sub	sp, #8
 80217d8:	af00      	add	r7, sp, #0
 80217da:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_X1_ADD, ACCEL_DATA_X0_ADD, 'R');
 80217dc:	2352      	movs	r3, #82	; 0x52
 80217de:	2220      	movs	r2, #32
 80217e0:	211f      	movs	r1, #31
 80217e2:	6878      	ldr	r0, [r7, #4]
 80217e4:	f7ff feea 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 80217e8:	4603      	mov	r3, r0
}
 80217ea:	4618      	mov	r0, r3
 80217ec:	3708      	adds	r7, #8
 80217ee:	46bd      	mov	sp, r7
 80217f0:	bd80      	pop	{r7, pc}

080217f2 <_ZN8Iim4265210AccelYLeftEv>:

int16_t Iim42652::AccelYLeft()
{
 80217f2:	b580      	push	{r7, lr}
 80217f4:	b082      	sub	sp, #8
 80217f6:	af00      	add	r7, sp, #0
 80217f8:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Y1_ADD, ACCEL_DATA_Y0_ADD, 'L');
 80217fa:	234c      	movs	r3, #76	; 0x4c
 80217fc:	2222      	movs	r2, #34	; 0x22
 80217fe:	2121      	movs	r1, #33	; 0x21
 8021800:	6878      	ldr	r0, [r7, #4]
 8021802:	f7ff fedb 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021806:	4603      	mov	r3, r0
}
 8021808:	4618      	mov	r0, r3
 802180a:	3708      	adds	r7, #8
 802180c:	46bd      	mov	sp, r7
 802180e:	bd80      	pop	{r7, pc}

08021810 <_ZN8Iim4265211AccelYRightEv>:

int16_t Iim42652::AccelYRight()
{
 8021810:	b580      	push	{r7, lr}
 8021812:	b082      	sub	sp, #8
 8021814:	af00      	add	r7, sp, #0
 8021816:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Y1_ADD, ACCEL_DATA_Y0_ADD, 'R');
 8021818:	2352      	movs	r3, #82	; 0x52
 802181a:	2222      	movs	r2, #34	; 0x22
 802181c:	2121      	movs	r1, #33	; 0x21
 802181e:	6878      	ldr	r0, [r7, #4]
 8021820:	f7ff fecc 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021824:	4603      	mov	r3, r0
}
 8021826:	4618      	mov	r0, r3
 8021828:	3708      	adds	r7, #8
 802182a:	46bd      	mov	sp, r7
 802182c:	bd80      	pop	{r7, pc}

0802182e <_ZN8Iim4265210AccelZLeftEv>:

int16_t Iim42652::AccelZLeft()
{
 802182e:	b580      	push	{r7, lr}
 8021830:	b082      	sub	sp, #8
 8021832:	af00      	add	r7, sp, #0
 8021834:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Z1_ADD, ACCEL_DATA_Z0_ADD, 'L');
 8021836:	234c      	movs	r3, #76	; 0x4c
 8021838:	2224      	movs	r2, #36	; 0x24
 802183a:	2123      	movs	r1, #35	; 0x23
 802183c:	6878      	ldr	r0, [r7, #4]
 802183e:	f7ff febd 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021842:	4603      	mov	r3, r0
}
 8021844:	4618      	mov	r0, r3
 8021846:	3708      	adds	r7, #8
 8021848:	46bd      	mov	sp, r7
 802184a:	bd80      	pop	{r7, pc}

0802184c <_ZN8Iim4265211AccelZRightEv>:

int16_t Iim42652::AccelZRight()
{
 802184c:	b580      	push	{r7, lr}
 802184e:	b082      	sub	sp, #8
 8021850:	af00      	add	r7, sp, #0
 8021852:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Z1_ADD, ACCEL_DATA_Z0_ADD, 'R');
 8021854:	2352      	movs	r3, #82	; 0x52
 8021856:	2224      	movs	r2, #36	; 0x24
 8021858:	2123      	movs	r1, #35	; 0x23
 802185a:	6878      	ldr	r0, [r7, #4]
 802185c:	f7ff feae 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021860:	4603      	mov	r3, r0
 8021862:	4618      	mov	r0, r3
 8021864:	3708      	adds	r7, #8
 8021866:	46bd      	mov	sp, r7
 8021868:	bd80      	pop	{r7, pc}
	...

0802186c <_ZN3Led10ColorOrderEc>:
#include "led.hpp"

void Led::ColorOrder(char color)
{
 802186c:	b580      	push	{r7, lr}
 802186e:	b082      	sub	sp, #8
 8021870:	af00      	add	r7, sp, #0
 8021872:	6078      	str	r0, [r7, #4]
 8021874:	460b      	mov	r3, r1
 8021876:	70fb      	strb	r3, [r7, #3]
    switch(color)
 8021878:	78fb      	ldrb	r3, [r7, #3]
 802187a:	3b42      	subs	r3, #66	; 0x42
 802187c:	2b17      	cmp	r3, #23
 802187e:	f200 80b8 	bhi.w	80219f2 <_ZN3Led10ColorOrderEc+0x186>
 8021882:	a201      	add	r2, pc, #4	; (adr r2, 8021888 <_ZN3Led10ColorOrderEc+0x1c>)
 8021884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021888:	08021935 	.word	0x08021935
 802188c:	08021981 	.word	0x08021981
 8021890:	080219f3 	.word	0x080219f3
 8021894:	080219f3 	.word	0x080219f3
 8021898:	080219f3 	.word	0x080219f3
 802189c:	0802190f 	.word	0x0802190f
 80218a0:	080219f3 	.word	0x080219f3
 80218a4:	080219f3 	.word	0x080219f3
 80218a8:	080219f3 	.word	0x080219f3
 80218ac:	080219f3 	.word	0x080219f3
 80218b0:	080219f3 	.word	0x080219f3
 80218b4:	080219a7 	.word	0x080219a7
 80218b8:	080219f3 	.word	0x080219f3
 80218bc:	080219f3 	.word	0x080219f3
 80218c0:	080219f3 	.word	0x080219f3
 80218c4:	080219f3 	.word	0x080219f3
 80218c8:	080218e9 	.word	0x080218e9
 80218cc:	080219f3 	.word	0x080219f3
 80218d0:	080219f3 	.word	0x080219f3
 80218d4:	080219f3 	.word	0x080219f3
 80218d8:	080219f3 	.word	0x080219f3
 80218dc:	080219cd 	.word	0x080219cd
 80218e0:	080219f3 	.word	0x080219f3
 80218e4:	0802195b 	.word	0x0802195b
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 80218e8:	2200      	movs	r2, #0
 80218ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80218ee:	484c      	ldr	r0, [pc, #304]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218f0:	f006 fc56 	bl	80281a0 <HAL_GPIO_WritePin>
 80218f4:	2201      	movs	r2, #1
 80218f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80218fa:	4849      	ldr	r0, [pc, #292]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218fc:	f006 fc50 	bl	80281a0 <HAL_GPIO_WritePin>
 8021900:	2201      	movs	r2, #1
 8021902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021906:	4846      	ldr	r0, [pc, #280]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021908:	f006 fc4a 	bl	80281a0 <HAL_GPIO_WritePin>
 802190c:	e084      	b.n	8021a18 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 802190e:	2201      	movs	r2, #1
 8021910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021914:	4842      	ldr	r0, [pc, #264]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021916:	f006 fc43 	bl	80281a0 <HAL_GPIO_WritePin>
 802191a:	2200      	movs	r2, #0
 802191c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021920:	483f      	ldr	r0, [pc, #252]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021922:	f006 fc3d 	bl	80281a0 <HAL_GPIO_WritePin>
 8021926:	2201      	movs	r2, #1
 8021928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802192c:	483c      	ldr	r0, [pc, #240]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 802192e:	f006 fc37 	bl	80281a0 <HAL_GPIO_WritePin>
 8021932:	e071      	b.n	8021a18 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 8021934:	2201      	movs	r2, #1
 8021936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802193a:	4839      	ldr	r0, [pc, #228]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 802193c:	f006 fc30 	bl	80281a0 <HAL_GPIO_WritePin>
 8021940:	2201      	movs	r2, #1
 8021942:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021946:	4836      	ldr	r0, [pc, #216]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021948:	f006 fc2a 	bl	80281a0 <HAL_GPIO_WritePin>
 802194c:	2200      	movs	r2, #0
 802194e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021952:	4833      	ldr	r0, [pc, #204]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021954:	f006 fc24 	bl	80281a0 <HAL_GPIO_WritePin>
 8021958:	e05e      	b.n	8021a18 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 802195a:	2200      	movs	r2, #0
 802195c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021960:	482f      	ldr	r0, [pc, #188]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021962:	f006 fc1d 	bl	80281a0 <HAL_GPIO_WritePin>
 8021966:	2200      	movs	r2, #0
 8021968:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802196c:	482c      	ldr	r0, [pc, #176]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 802196e:	f006 fc17 	bl	80281a0 <HAL_GPIO_WritePin>
 8021972:	2201      	movs	r2, #1
 8021974:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021978:	4829      	ldr	r0, [pc, #164]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 802197a:	f006 fc11 	bl	80281a0 <HAL_GPIO_WritePin>
 802197e:	e04b      	b.n	8021a18 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 8021980:	2201      	movs	r2, #1
 8021982:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021986:	4826      	ldr	r0, [pc, #152]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021988:	f006 fc0a 	bl	80281a0 <HAL_GPIO_WritePin>
 802198c:	2200      	movs	r2, #0
 802198e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021992:	4823      	ldr	r0, [pc, #140]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021994:	f006 fc04 	bl	80281a0 <HAL_GPIO_WritePin>
 8021998:	2200      	movs	r2, #0
 802199a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802199e:	4820      	ldr	r0, [pc, #128]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219a0:	f006 fbfe 	bl	80281a0 <HAL_GPIO_WritePin>
 80219a4:	e038      	b.n	8021a18 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 80219a6:	2200      	movs	r2, #0
 80219a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219ac:	481c      	ldr	r0, [pc, #112]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219ae:	f006 fbf7 	bl	80281a0 <HAL_GPIO_WritePin>
 80219b2:	2201      	movs	r2, #1
 80219b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80219b8:	4819      	ldr	r0, [pc, #100]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219ba:	f006 fbf1 	bl	80281a0 <HAL_GPIO_WritePin>
 80219be:	2200      	movs	r2, #0
 80219c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80219c4:	4816      	ldr	r0, [pc, #88]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219c6:	f006 fbeb 	bl	80281a0 <HAL_GPIO_WritePin>
 80219ca:	e025      	b.n	8021a18 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 80219cc:	2200      	movs	r2, #0
 80219ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219d2:	4813      	ldr	r0, [pc, #76]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219d4:	f006 fbe4 	bl	80281a0 <HAL_GPIO_WritePin>
 80219d8:	2200      	movs	r2, #0
 80219da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80219de:	4810      	ldr	r0, [pc, #64]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219e0:	f006 fbde 	bl	80281a0 <HAL_GPIO_WritePin>
 80219e4:	2200      	movs	r2, #0
 80219e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80219ea:	480d      	ldr	r0, [pc, #52]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219ec:	f006 fbd8 	bl	80281a0 <HAL_GPIO_WritePin>
 80219f0:	e012      	b.n	8021a18 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 80219f2:	2201      	movs	r2, #1
 80219f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219f8:	4809      	ldr	r0, [pc, #36]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219fa:	f006 fbd1 	bl	80281a0 <HAL_GPIO_WritePin>
 80219fe:	2201      	movs	r2, #1
 8021a00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021a04:	4806      	ldr	r0, [pc, #24]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a06:	f006 fbcb 	bl	80281a0 <HAL_GPIO_WritePin>
 8021a0a:	2201      	movs	r2, #1
 8021a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021a10:	4803      	ldr	r0, [pc, #12]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a12:	f006 fbc5 	bl	80281a0 <HAL_GPIO_WritePin>
 8021a16:	bf00      	nop
    }
}
 8021a18:	bf00      	nop
 8021a1a:	3708      	adds	r7, #8
 8021a1c:	46bd      	mov	sp, r7
 8021a1e:	bd80      	pop	{r7, pc}
 8021a20:	40020800 	.word	0x40020800

08021a24 <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 8021a24:	b580      	push	{r7, lr}
 8021a26:	b084      	sub	sp, #16
 8021a28:	af00      	add	r7, sp, #0
 8021a2a:	6078      	str	r0, [r7, #4]
 8021a2c:	4608      	mov	r0, r1
 8021a2e:	4611      	mov	r1, r2
 8021a30:	461a      	mov	r2, r3
 8021a32:	4603      	mov	r3, r0
 8021a34:	70fb      	strb	r3, [r7, #3]
 8021a36:	460b      	mov	r3, r1
 8021a38:	70bb      	strb	r3, [r7, #2]
 8021a3a:	4613      	mov	r3, r2
 8021a3c:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 8021a3e:	2300      	movs	r3, #0
 8021a40:	73fb      	strb	r3, [r7, #15]
 8021a42:	7bfa      	ldrb	r2, [r7, #15]
 8021a44:	78fb      	ldrb	r3, [r7, #3]
 8021a46:	429a      	cmp	r2, r3
 8021a48:	d215      	bcs.n	8021a76 <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 8021a4a:	78bb      	ldrb	r3, [r7, #2]
 8021a4c:	4619      	mov	r1, r3
 8021a4e:	6878      	ldr	r0, [r7, #4]
 8021a50:	f7ff ff0c 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 8021a54:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021a58:	f004 fe84 	bl	8026764 <HAL_Delay>
        ColorOrder(color_2);
 8021a5c:	787b      	ldrb	r3, [r7, #1]
 8021a5e:	4619      	mov	r1, r3
 8021a60:	6878      	ldr	r0, [r7, #4]
 8021a62:	f7ff ff03 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 8021a66:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021a6a:	f004 fe7b 	bl	8026764 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021a6e:	7bfb      	ldrb	r3, [r7, #15]
 8021a70:	3301      	adds	r3, #1
 8021a72:	73fb      	strb	r3, [r7, #15]
 8021a74:	e7e5      	b.n	8021a42 <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 8021a76:	bf00      	nop
 8021a78:	3710      	adds	r7, #16
 8021a7a:	46bd      	mov	sp, r7
 8021a7c:	bd80      	pop	{r7, pc}

08021a7e <_ZN3Led7RainbowEh>:

void Led::Rainbow(uint8_t times)
{
 8021a7e:	b580      	push	{r7, lr}
 8021a80:	b084      	sub	sp, #16
 8021a82:	af00      	add	r7, sp, #0
 8021a84:	6078      	str	r0, [r7, #4]
 8021a86:	460b      	mov	r3, r1
 8021a88:	70fb      	strb	r3, [r7, #3]
    for(uint8_t i = 0; i < times; i++)
 8021a8a:	2300      	movs	r3, #0
 8021a8c:	73fb      	strb	r3, [r7, #15]
 8021a8e:	7bfa      	ldrb	r2, [r7, #15]
 8021a90:	78fb      	ldrb	r3, [r7, #3]
 8021a92:	429a      	cmp	r2, r3
 8021a94:	d233      	bcs.n	8021afe <_ZN3Led7RainbowEh+0x80>
    {
        ColorOrder('R');
 8021a96:	2152      	movs	r1, #82	; 0x52
 8021a98:	6878      	ldr	r0, [r7, #4]
 8021a9a:	f7ff fee7 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021a9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021aa2:	f004 fe5f 	bl	8026764 <HAL_Delay>
        ColorOrder('Y');
 8021aa6:	2159      	movs	r1, #89	; 0x59
 8021aa8:	6878      	ldr	r0, [r7, #4]
 8021aaa:	f7ff fedf 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021aae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021ab2:	f004 fe57 	bl	8026764 <HAL_Delay>
        ColorOrder('G');
 8021ab6:	2147      	movs	r1, #71	; 0x47
 8021ab8:	6878      	ldr	r0, [r7, #4]
 8021aba:	f7ff fed7 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021abe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021ac2:	f004 fe4f 	bl	8026764 <HAL_Delay>
        ColorOrder('C');
 8021ac6:	2143      	movs	r1, #67	; 0x43
 8021ac8:	6878      	ldr	r0, [r7, #4]
 8021aca:	f7ff fecf 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021ace:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021ad2:	f004 fe47 	bl	8026764 <HAL_Delay>
        ColorOrder('B');
 8021ad6:	2142      	movs	r1, #66	; 0x42
 8021ad8:	6878      	ldr	r0, [r7, #4]
 8021ada:	f7ff fec7 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021ade:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021ae2:	f004 fe3f 	bl	8026764 <HAL_Delay>
        ColorOrder('M');
 8021ae6:	214d      	movs	r1, #77	; 0x4d
 8021ae8:	6878      	ldr	r0, [r7, #4]
 8021aea:	f7ff febf 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021aee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021af2:	f004 fe37 	bl	8026764 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021af6:	7bfb      	ldrb	r3, [r7, #15]
 8021af8:	3301      	adds	r3, #1
 8021afa:	73fb      	strb	r3, [r7, #15]
 8021afc:	e7c7      	b.n	8021a8e <_ZN3Led7RainbowEh+0x10>
    }
 8021afe:	bf00      	nop
 8021b00:	3710      	adds	r7, #16
 8021b02:	46bd      	mov	sp, r7
 8021b04:	bd80      	pop	{r7, pc}

08021b06 <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_()
 8021b06:	b490      	push	{r4, r7}
 8021b08:	b082      	sub	sp, #8
 8021b0a:	af00      	add	r7, sp, #0
 8021b0c:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_()
                         , max_line_sensors_valu_()
                         , min_line_sensors_valu_()
                         , line_sensors_valu_()
                         , emergency_stop_flag_(false) {}
 8021b0e:	687a      	ldr	r2, [r7, #4]
 8021b10:	230d      	movs	r3, #13
 8021b12:	2b00      	cmp	r3, #0
 8021b14:	db04      	blt.n	8021b20 <_ZN10LineSensorC1Ev+0x1a>
 8021b16:	2100      	movs	r1, #0
 8021b18:	8011      	strh	r1, [r2, #0]
 8021b1a:	3202      	adds	r2, #2
 8021b1c:	3b01      	subs	r3, #1
 8021b1e:	e7f8      	b.n	8021b12 <_ZN10LineSensorC1Ev+0xc>
 8021b20:	687b      	ldr	r3, [r7, #4]
 8021b22:	f103 021c 	add.w	r2, r3, #28
 8021b26:	2309      	movs	r3, #9
 8021b28:	4610      	mov	r0, r2
 8021b2a:	2b00      	cmp	r3, #0
 8021b2c:	db0b      	blt.n	8021b46 <_ZN10LineSensorC1Ev+0x40>
 8021b2e:	4601      	mov	r1, r0
 8021b30:	220d      	movs	r2, #13
 8021b32:	2a00      	cmp	r2, #0
 8021b34:	db04      	blt.n	8021b40 <_ZN10LineSensorC1Ev+0x3a>
 8021b36:	2400      	movs	r4, #0
 8021b38:	800c      	strh	r4, [r1, #0]
 8021b3a:	3102      	adds	r1, #2
 8021b3c:	3a01      	subs	r2, #1
 8021b3e:	e7f8      	b.n	8021b32 <_ZN10LineSensorC1Ev+0x2c>
 8021b40:	301c      	adds	r0, #28
 8021b42:	3b01      	subs	r3, #1
 8021b44:	e7f1      	b.n	8021b2a <_ZN10LineSensorC1Ev+0x24>
 8021b46:	687b      	ldr	r3, [r7, #4]
 8021b48:	f503 729a 	add.w	r2, r3, #308	; 0x134
 8021b4c:	230d      	movs	r3, #13
 8021b4e:	2b00      	cmp	r3, #0
 8021b50:	db04      	blt.n	8021b5c <_ZN10LineSensorC1Ev+0x56>
 8021b52:	2100      	movs	r1, #0
 8021b54:	8011      	strh	r1, [r2, #0]
 8021b56:	3202      	adds	r2, #2
 8021b58:	3b01      	subs	r3, #1
 8021b5a:	e7f8      	b.n	8021b4e <_ZN10LineSensorC1Ev+0x48>
 8021b5c:	687b      	ldr	r3, [r7, #4]
 8021b5e:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8021b62:	230d      	movs	r3, #13
 8021b64:	2b00      	cmp	r3, #0
 8021b66:	db04      	blt.n	8021b72 <_ZN10LineSensorC1Ev+0x6c>
 8021b68:	2100      	movs	r1, #0
 8021b6a:	8011      	strh	r1, [r2, #0]
 8021b6c:	3202      	adds	r2, #2
 8021b6e:	3b01      	subs	r3, #1
 8021b70:	e7f8      	b.n	8021b64 <_ZN10LineSensorC1Ev+0x5e>
 8021b72:	687b      	ldr	r3, [r7, #4]
 8021b74:	f503 72b6 	add.w	r2, r3, #364	; 0x16c
 8021b78:	230d      	movs	r3, #13
 8021b7a:	2b00      	cmp	r3, #0
 8021b7c:	db04      	blt.n	8021b88 <_ZN10LineSensorC1Ev+0x82>
 8021b7e:	2100      	movs	r1, #0
 8021b80:	8011      	strh	r1, [r2, #0]
 8021b82:	3202      	adds	r2, #2
 8021b84:	3b01      	subs	r3, #1
 8021b86:	e7f8      	b.n	8021b7a <_ZN10LineSensorC1Ev+0x74>
 8021b88:	687b      	ldr	r3, [r7, #4]
 8021b8a:	2200      	movs	r2, #0
 8021b8c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8021b90:	687b      	ldr	r3, [r7, #4]
 8021b92:	4618      	mov	r0, r3
 8021b94:	3708      	adds	r7, #8
 8021b96:	46bd      	mov	sp, r7
 8021b98:	bc90      	pop	{r4, r7}
 8021b9a:	4770      	bx	lr

08021b9c <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 8021b9c:	b580      	push	{r7, lr}
 8021b9e:	b082      	sub	sp, #8
 8021ba0:	af00      	add	r7, sp, #0
 8021ba2:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 8021ba4:	687b      	ldr	r3, [r7, #4]
 8021ba6:	220e      	movs	r2, #14
 8021ba8:	4619      	mov	r1, r3
 8021baa:	4815      	ldr	r0, [pc, #84]	; (8021c00 <_ZN10LineSensor4InitEv+0x64>)
 8021bac:	f004 fe40 	bl	8026830 <HAL_ADC_Start_DMA>
 8021bb0:	4603      	mov	r3, r0
 8021bb2:	2b00      	cmp	r3, #0
 8021bb4:	bf14      	ite	ne
 8021bb6:	2301      	movne	r3, #1
 8021bb8:	2300      	moveq	r3, #0
 8021bba:	b2db      	uxtb	r3, r3
 8021bbc:	2b00      	cmp	r3, #0
 8021bbe:	d004      	beq.n	8021bca <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 8021bc0:	4b10      	ldr	r3, [pc, #64]	; (8021c04 <_ZN10LineSensor4InitEv+0x68>)
 8021bc2:	2201      	movs	r2, #1
 8021bc4:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021bc6:	f002 f8fd 	bl	8023dc4 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 8021bca:	2100      	movs	r1, #0
 8021bcc:	480e      	ldr	r0, [pc, #56]	; (8021c08 <_ZN10LineSensor4InitEv+0x6c>)
 8021bce:	f007 fe2f 	bl	8029830 <HAL_TIM_PWM_Start>
 8021bd2:	4603      	mov	r3, r0
 8021bd4:	2b00      	cmp	r3, #0
 8021bd6:	bf14      	ite	ne
 8021bd8:	2301      	movne	r3, #1
 8021bda:	2300      	moveq	r3, #0
 8021bdc:	b2db      	uxtb	r3, r3
 8021bde:	2b00      	cmp	r3, #0
 8021be0:	d004      	beq.n	8021bec <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 8021be2:	4b0a      	ldr	r3, [pc, #40]	; (8021c0c <_ZN10LineSensor4InitEv+0x70>)
 8021be4:	2201      	movs	r2, #1
 8021be6:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021be8:	f002 f8ec 	bl	8023dc4 <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 8021bec:	4b06      	ldr	r3, [pc, #24]	; (8021c08 <_ZN10LineSensor4InitEv+0x6c>)
 8021bee:	681b      	ldr	r3, [r3, #0]
 8021bf0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8021bf4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8021bf6:	bf00      	nop
 8021bf8:	3708      	adds	r7, #8
 8021bfa:	46bd      	mov	sp, r7
 8021bfc:	bd80      	pop	{r7, pc}
 8021bfe:	bf00      	nop
 8021c00:	20000964 	.word	0x20000964
 8021c04:	200000bd 	.word	0x200000bd
 8021c08:	200009ac 	.word	0x200009ac
 8021c0c:	200000be 	.word	0x200000be

08021c10 <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 8021c10:	b480      	push	{r7}
 8021c12:	b085      	sub	sp, #20
 8021c14:	af00      	add	r7, sp, #0
 8021c16:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021c18:	2300      	movs	r3, #0
 8021c1a:	60fb      	str	r3, [r7, #12]
 8021c1c:	68fb      	ldr	r3, [r7, #12]
 8021c1e:	2b0d      	cmp	r3, #13
 8021c20:	dc16      	bgt.n	8021c50 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 8021c22:	4b15      	ldr	r3, [pc, #84]	; (8021c78 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021c24:	781b      	ldrb	r3, [r3, #0]
 8021c26:	4619      	mov	r1, r3
 8021c28:	687b      	ldr	r3, [r7, #4]
 8021c2a:	68fa      	ldr	r2, [r7, #12]
 8021c2c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8021c30:	687a      	ldr	r2, [r7, #4]
 8021c32:	460b      	mov	r3, r1
 8021c34:	00db      	lsls	r3, r3, #3
 8021c36:	1a5b      	subs	r3, r3, r1
 8021c38:	005b      	lsls	r3, r3, #1
 8021c3a:	68f9      	ldr	r1, [r7, #12]
 8021c3c:	440b      	add	r3, r1
 8021c3e:	330c      	adds	r3, #12
 8021c40:	005b      	lsls	r3, r3, #1
 8021c42:	4413      	add	r3, r2
 8021c44:	4602      	mov	r2, r0
 8021c46:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021c48:	68fb      	ldr	r3, [r7, #12]
 8021c4a:	3301      	adds	r3, #1
 8021c4c:	60fb      	str	r3, [r7, #12]
 8021c4e:	e7e5      	b.n	8021c1c <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    if(times < CONSECUTIVE_TIMES) times++;
 8021c50:	4b09      	ldr	r3, [pc, #36]	; (8021c78 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021c52:	781b      	ldrb	r3, [r3, #0]
 8021c54:	2b09      	cmp	r3, #9
 8021c56:	d806      	bhi.n	8021c66 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x56>
 8021c58:	4b07      	ldr	r3, [pc, #28]	; (8021c78 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021c5a:	781b      	ldrb	r3, [r3, #0]
 8021c5c:	3301      	adds	r3, #1
 8021c5e:	b2da      	uxtb	r2, r3
 8021c60:	4b05      	ldr	r3, [pc, #20]	; (8021c78 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021c62:	701a      	strb	r2, [r3, #0]
    else times = 0;
}
 8021c64:	e002      	b.n	8021c6c <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5c>
    else times = 0;
 8021c66:	4b04      	ldr	r3, [pc, #16]	; (8021c78 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021c68:	2200      	movs	r2, #0
 8021c6a:	701a      	strb	r2, [r3, #0]
}
 8021c6c:	bf00      	nop
 8021c6e:	3714      	adds	r7, #20
 8021c70:	46bd      	mov	sp, r7
 8021c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c76:	4770      	bx	lr
 8021c78:	2000003c 	.word	0x2000003c

08021c7c <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 8021c7c:	b5b0      	push	{r4, r5, r7, lr}
 8021c7e:	b088      	sub	sp, #32
 8021c80:	af00      	add	r7, sp, #0
 8021c82:	60f8      	str	r0, [r7, #12]
 8021c84:	60b9      	str	r1, [r7, #8]
 8021c86:	4611      	mov	r1, r2
 8021c88:	461a      	mov	r2, r3
 8021c8a:	460b      	mov	r3, r1
 8021c8c:	71fb      	strb	r3, [r7, #7]
 8021c8e:	4613      	mov	r3, r2
 8021c90:	71bb      	strb	r3, [r7, #6]

    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else                                     array[i] = temp_array[right--];
    }
 8021c92:	466b      	mov	r3, sp
 8021c94:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 8021c96:	79fa      	ldrb	r2, [r7, #7]
 8021c98:	79bb      	ldrb	r3, [r7, #6]
 8021c9a:	429a      	cmp	r2, r3
 8021c9c:	f080 80ba 	bcs.w	8021e14 <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 8021ca0:	79b8      	ldrb	r0, [r7, #6]
 8021ca2:	61b8      	str	r0, [r7, #24]
 8021ca4:	4603      	mov	r3, r0
 8021ca6:	3301      	adds	r3, #1
 8021ca8:	4619      	mov	r1, r3
 8021caa:	f04f 0200 	mov.w	r2, #0
 8021cae:	f04f 0300 	mov.w	r3, #0
 8021cb2:	f04f 0400 	mov.w	r4, #0
 8021cb6:	0114      	lsls	r4, r2, #4
 8021cb8:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021cbc:	010b      	lsls	r3, r1, #4
 8021cbe:	4603      	mov	r3, r0
 8021cc0:	3301      	adds	r3, #1
 8021cc2:	4619      	mov	r1, r3
 8021cc4:	f04f 0200 	mov.w	r2, #0
 8021cc8:	f04f 0300 	mov.w	r3, #0
 8021ccc:	f04f 0400 	mov.w	r4, #0
 8021cd0:	0114      	lsls	r4, r2, #4
 8021cd2:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021cd6:	010b      	lsls	r3, r1, #4
 8021cd8:	4603      	mov	r3, r0
 8021cda:	3301      	adds	r3, #1
 8021cdc:	005b      	lsls	r3, r3, #1
 8021cde:	3301      	adds	r3, #1
 8021ce0:	3307      	adds	r3, #7
 8021ce2:	08db      	lsrs	r3, r3, #3
 8021ce4:	00db      	lsls	r3, r3, #3
 8021ce6:	ebad 0d03 	sub.w	sp, sp, r3
 8021cea:	466b      	mov	r3, sp
 8021cec:	3301      	adds	r3, #1
 8021cee:	085b      	lsrs	r3, r3, #1
 8021cf0:	005b      	lsls	r3, r3, #1
 8021cf2:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 8021cf4:	79fa      	ldrb	r2, [r7, #7]
 8021cf6:	79bb      	ldrb	r3, [r7, #6]
 8021cf8:	4413      	add	r3, r2
 8021cfa:	0fda      	lsrs	r2, r3, #31
 8021cfc:	4413      	add	r3, r2
 8021cfe:	105b      	asrs	r3, r3, #1
 8021d00:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 8021d02:	7cfb      	ldrb	r3, [r7, #19]
 8021d04:	79fa      	ldrb	r2, [r7, #7]
 8021d06:	68b9      	ldr	r1, [r7, #8]
 8021d08:	68f8      	ldr	r0, [r7, #12]
 8021d0a:	f7ff ffb7 	bl	8021c7c <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 8021d0e:	7cfb      	ldrb	r3, [r7, #19]
 8021d10:	3301      	adds	r3, #1
 8021d12:	b2da      	uxtb	r2, r3
 8021d14:	79bb      	ldrb	r3, [r7, #6]
 8021d16:	68b9      	ldr	r1, [r7, #8]
 8021d18:	68f8      	ldr	r0, [r7, #12]
 8021d1a:	f7ff ffaf 	bl	8021c7c <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--)
 8021d1e:	7cfb      	ldrb	r3, [r7, #19]
 8021d20:	77bb      	strb	r3, [r7, #30]
 8021d22:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021d26:	79fb      	ldrb	r3, [r7, #7]
 8021d28:	429a      	cmp	r2, r3
 8021d2a:	db11      	blt.n	8021d50 <_ZN10LineSensor9MergeSortEPthh+0xd4>
        temp_array[i] = array[i];
 8021d2c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d30:	005b      	lsls	r3, r3, #1
 8021d32:	68ba      	ldr	r2, [r7, #8]
 8021d34:	4413      	add	r3, r2
 8021d36:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021d3a:	8819      	ldrh	r1, [r3, #0]
 8021d3c:	697b      	ldr	r3, [r7, #20]
 8021d3e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle; i >= first_index; i--)
 8021d42:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d46:	b2db      	uxtb	r3, r3
 8021d48:	3b01      	subs	r3, #1
 8021d4a:	b2db      	uxtb	r3, r3
 8021d4c:	77bb      	strb	r3, [r7, #30]
 8021d4e:	e7e8      	b.n	8021d22 <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 8021d50:	7cfb      	ldrb	r3, [r7, #19]
 8021d52:	3301      	adds	r3, #1
 8021d54:	b2db      	uxtb	r3, r3
 8021d56:	77bb      	strb	r3, [r7, #30]
 8021d58:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021d5c:	79bb      	ldrb	r3, [r7, #6]
 8021d5e:	429a      	cmp	r2, r3
 8021d60:	dc17      	bgt.n	8021d92 <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 8021d62:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d66:	005b      	lsls	r3, r3, #1
 8021d68:	68ba      	ldr	r2, [r7, #8]
 8021d6a:	4413      	add	r3, r2
 8021d6c:	79b9      	ldrb	r1, [r7, #6]
 8021d6e:	f997 001e 	ldrsb.w	r0, [r7, #30]
 8021d72:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8021d76:	3201      	adds	r2, #1
 8021d78:	1a82      	subs	r2, r0, r2
 8021d7a:	1a8a      	subs	r2, r1, r2
 8021d7c:	8819      	ldrh	r1, [r3, #0]
 8021d7e:	697b      	ldr	r3, [r7, #20]
 8021d80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 8021d84:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d88:	b2db      	uxtb	r3, r3
 8021d8a:	3301      	adds	r3, #1
 8021d8c:	b2db      	uxtb	r3, r3
 8021d8e:	77bb      	strb	r3, [r7, #30]
 8021d90:	e7e2      	b.n	8021d58 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 8021d92:	79fb      	ldrb	r3, [r7, #7]
 8021d94:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 8021d96:	79bb      	ldrb	r3, [r7, #6]
 8021d98:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 8021d9a:	79fb      	ldrb	r3, [r7, #7]
 8021d9c:	77bb      	strb	r3, [r7, #30]
 8021d9e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021da2:	79bb      	ldrb	r3, [r7, #6]
 8021da4:	429a      	cmp	r2, r3
 8021da6:	dc33      	bgt.n	8021e10 <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 8021da8:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021dac:	697b      	ldr	r3, [r7, #20]
 8021dae:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021db2:	f997 101d 	ldrsb.w	r1, [r7, #29]
 8021db6:	697b      	ldr	r3, [r7, #20]
 8021db8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8021dbc:	429a      	cmp	r2, r3
 8021dbe:	d210      	bcs.n	8021de2 <_ZN10LineSensor9MergeSortEPthh+0x166>
 8021dc0:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021dc4:	b2d3      	uxtb	r3, r2
 8021dc6:	3301      	adds	r3, #1
 8021dc8:	b2db      	uxtb	r3, r3
 8021dca:	77fb      	strb	r3, [r7, #31]
 8021dcc:	4611      	mov	r1, r2
 8021dce:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021dd2:	005b      	lsls	r3, r3, #1
 8021dd4:	68ba      	ldr	r2, [r7, #8]
 8021dd6:	4413      	add	r3, r2
 8021dd8:	697a      	ldr	r2, [r7, #20]
 8021dda:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021dde:	801a      	strh	r2, [r3, #0]
 8021de0:	e00f      	b.n	8021e02 <_ZN10LineSensor9MergeSortEPthh+0x186>
        else                                     array[i] = temp_array[right--];
 8021de2:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8021de6:	b2d3      	uxtb	r3, r2
 8021de8:	3b01      	subs	r3, #1
 8021dea:	b2db      	uxtb	r3, r3
 8021dec:	777b      	strb	r3, [r7, #29]
 8021dee:	4611      	mov	r1, r2
 8021df0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021df4:	005b      	lsls	r3, r3, #1
 8021df6:	68ba      	ldr	r2, [r7, #8]
 8021df8:	4413      	add	r3, r2
 8021dfa:	697a      	ldr	r2, [r7, #20]
 8021dfc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021e00:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 8021e02:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021e06:	b2db      	uxtb	r3, r3
 8021e08:	3301      	adds	r3, #1
 8021e0a:	b2db      	uxtb	r3, r3
 8021e0c:	77bb      	strb	r3, [r7, #30]
 8021e0e:	e7c6      	b.n	8021d9e <_ZN10LineSensor9MergeSortEPthh+0x122>
 8021e10:	46ad      	mov	sp, r5
 8021e12:	e001      	b.n	8021e18 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 8021e14:	bf00      	nop
 8021e16:	46ad      	mov	sp, r5
}
 8021e18:	3720      	adds	r7, #32
 8021e1a:	46bd      	mov	sp, r7
 8021e1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021e20 <_ZN10LineSensor6UpdateEv>:

void LineSensor::Update()
{
 8021e20:	b590      	push	{r4, r7, lr}
 8021e22:	b08b      	sub	sp, #44	; 0x2c
 8021e24:	af00      	add	r7, sp, #0
 8021e26:	6078      	str	r0, [r7, #4]
    uint8_t i, j;
    uint16_t temp_array[CONSECUTIVE_TIMES];
    uint16_t median, max, min, normalized;
    bool emergency = true;
 8021e28:	2301      	movs	r3, #1
 8021e2a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021e2e:	2300      	movs	r3, #0
 8021e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021e38:	2b0d      	cmp	r3, #13
 8021e3a:	f200 80a6 	bhi.w	8021f8a <_ZN10LineSensor6UpdateEv+0x16a>
    {
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021e3e:	2300      	movs	r3, #0
 8021e40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021e44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021e48:	2b09      	cmp	r3, #9
 8021e4a:	d81b      	bhi.n	8021e84 <_ZN10LineSensor6UpdateEv+0x64>
        {
            temp_array[j] = consecutive_line_sensors_buff_[j][i];
 8021e4c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8021e50:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8021e54:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021e58:	6878      	ldr	r0, [r7, #4]
 8021e5a:	4613      	mov	r3, r2
 8021e5c:	00db      	lsls	r3, r3, #3
 8021e5e:	1a9b      	subs	r3, r3, r2
 8021e60:	005b      	lsls	r3, r3, #1
 8021e62:	4423      	add	r3, r4
 8021e64:	330c      	adds	r3, #12
 8021e66:	005b      	lsls	r3, r3, #1
 8021e68:	4403      	add	r3, r0
 8021e6a:	889a      	ldrh	r2, [r3, #4]
 8021e6c:	004b      	lsls	r3, r1, #1
 8021e6e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8021e72:	440b      	add	r3, r1
 8021e74:	f823 2c20 	strh.w	r2, [r3, #-32]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021e78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021e7c:	3301      	adds	r3, #1
 8021e7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021e82:	e7df      	b.n	8021e44 <_ZN10LineSensor6UpdateEv+0x24>
        }

        MergeSort(temp_array, 0, CONSECUTIVE_TIMES-1);
 8021e84:	f107 0108 	add.w	r1, r7, #8
 8021e88:	2309      	movs	r3, #9
 8021e8a:	2200      	movs	r2, #0
 8021e8c:	6878      	ldr	r0, [r7, #4]
 8021e8e:	f7ff fef5 	bl	8021c7c <_ZN10LineSensor9MergeSortEPthh>
        median = temp_array[HALF_CONSECUTIVE_TIMES];
 8021e92:	8a7b      	ldrh	r3, [r7, #18]
 8021e94:	83fb      	strh	r3, [r7, #30]

#ifdef DEBUG_MODE
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021e96:	2300      	movs	r3, #0
 8021e98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021ea0:	2b09      	cmp	r3, #9
 8021ea2:	d81a      	bhi.n	8021eda <_ZN10LineSensor6UpdateEv+0xba>
        {
            g_consecutive_line_buff[i][j] = temp_array[j];
 8021ea4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021ea8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021eac:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021eb0:	005b      	lsls	r3, r3, #1
 8021eb2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8021eb6:	4403      	add	r3, r0
 8021eb8:	f833 4c20 	ldrh.w	r4, [r3, #-32]
 8021ebc:	4837      	ldr	r0, [pc, #220]	; (8021f9c <_ZN10LineSensor6UpdateEv+0x17c>)
 8021ebe:	4613      	mov	r3, r2
 8021ec0:	009b      	lsls	r3, r3, #2
 8021ec2:	4413      	add	r3, r2
 8021ec4:	005b      	lsls	r3, r3, #1
 8021ec6:	440b      	add	r3, r1
 8021ec8:	4622      	mov	r2, r4
 8021eca:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021ece:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021ed2:	3301      	adds	r3, #1
 8021ed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021ed8:	e7e0      	b.n	8021e9c <_ZN10LineSensor6UpdateEv+0x7c>
        }
#endif // DEBUG_MODE

        max = max_line_sensors_valu_[i];
 8021eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ede:	687a      	ldr	r2, [r7, #4]
 8021ee0:	3398      	adds	r3, #152	; 0x98
 8021ee2:	005b      	lsls	r3, r3, #1
 8021ee4:	4413      	add	r3, r2
 8021ee6:	889b      	ldrh	r3, [r3, #4]
 8021ee8:	84bb      	strh	r3, [r7, #36]	; 0x24
        min = min_line_sensors_valu_[i];
 8021eea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021eee:	687b      	ldr	r3, [r7, #4]
 8021ef0:	32a8      	adds	r2, #168	; 0xa8
 8021ef2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021ef6:	847b      	strh	r3, [r7, #34]	; 0x22
        if(max < median)      max = median;
 8021ef8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021efa:	8bfb      	ldrh	r3, [r7, #30]
 8021efc:	429a      	cmp	r2, r3
 8021efe:	d202      	bcs.n	8021f06 <_ZN10LineSensor6UpdateEv+0xe6>
 8021f00:	8bfb      	ldrh	r3, [r7, #30]
 8021f02:	84bb      	strh	r3, [r7, #36]	; 0x24
 8021f04:	e00b      	b.n	8021f1e <_ZN10LineSensor6UpdateEv+0xfe>
        else if(min > median) min = median;
 8021f06:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021f08:	8bfb      	ldrh	r3, [r7, #30]
 8021f0a:	429a      	cmp	r2, r3
 8021f0c:	d902      	bls.n	8021f14 <_ZN10LineSensor6UpdateEv+0xf4>
 8021f0e:	8bfb      	ldrh	r3, [r7, #30]
 8021f10:	847b      	strh	r3, [r7, #34]	; 0x22
 8021f12:	e004      	b.n	8021f1e <_ZN10LineSensor6UpdateEv+0xfe>
        else if(min == 0)     min = median;
 8021f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021f16:	2b00      	cmp	r3, #0
 8021f18:	d101      	bne.n	8021f1e <_ZN10LineSensor6UpdateEv+0xfe>
 8021f1a:	8bfb      	ldrh	r3, [r7, #30]
 8021f1c:	847b      	strh	r3, [r7, #34]	; 0x22
        max_line_sensors_valu_[i] = max;
 8021f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021f22:	687a      	ldr	r2, [r7, #4]
 8021f24:	3398      	adds	r3, #152	; 0x98
 8021f26:	005b      	lsls	r3, r3, #1
 8021f28:	4413      	add	r3, r2
 8021f2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021f2c:	809a      	strh	r2, [r3, #4]
        min_line_sensors_valu_[i] = min;
 8021f2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021f32:	687b      	ldr	r3, [r7, #4]
 8021f34:	32a8      	adds	r2, #168	; 0xa8
 8021f36:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8021f38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

        if(max > min)
 8021f3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021f3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021f40:	429a      	cmp	r2, r3
 8021f42:	d91c      	bls.n	8021f7e <_ZN10LineSensor6UpdateEv+0x15e>
        {
            normalized = MAX_NORMALIZED_VALU * (median - min) / (max - min);
 8021f44:	8bfa      	ldrh	r2, [r7, #30]
 8021f46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021f48:	1ad3      	subs	r3, r2, r3
 8021f4a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8021f4e:	fb02 f203 	mul.w	r2, r2, r3
 8021f52:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8021f54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021f56:	1acb      	subs	r3, r1, r3
 8021f58:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f5c:	83bb      	strh	r3, [r7, #28]
            line_sensors_valu_[i] = normalized;
 8021f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021f62:	687a      	ldr	r2, [r7, #4]
 8021f64:	33b4      	adds	r3, #180	; 0xb4
 8021f66:	005b      	lsls	r3, r3, #1
 8021f68:	4413      	add	r3, r2
 8021f6a:	8bba      	ldrh	r2, [r7, #28]
 8021f6c:	809a      	strh	r2, [r3, #4]

            if(normalized < EMERGENCY_STOP_BORDER) emergency = false;
 8021f6e:	8bbb      	ldrh	r3, [r7, #28]
 8021f70:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8021f74:	4293      	cmp	r3, r2
 8021f76:	d802      	bhi.n	8021f7e <_ZN10LineSensor6UpdateEv+0x15e>
 8021f78:	2300      	movs	r3, #0
 8021f7a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021f82:	3301      	adds	r3, #1
 8021f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021f88:	e754      	b.n	8021e34 <_ZN10LineSensor6UpdateEv+0x14>
        }
    }

    emergency_stop_flag_ = emergency;
 8021f8a:	687b      	ldr	r3, [r7, #4]
 8021f8c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8021f90:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
}
 8021f94:	bf00      	nop
 8021f96:	372c      	adds	r7, #44	; 0x2c
 8021f98:	46bd      	mov	sp, r7
 8021f9a:	bd90      	pop	{r4, r7, pc}
 8021f9c:	200000dc 	.word	0x200000dc

08021fa0 <_ZN10LineSensor20GetEmergencyStopFlagEv>:

bool LineSensor::GetEmergencyStopFlag()
{
 8021fa0:	b480      	push	{r7}
 8021fa2:	b083      	sub	sp, #12
 8021fa4:	af00      	add	r7, sp, #0
 8021fa6:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8021fa8:	687b      	ldr	r3, [r7, #4]
 8021faa:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
}
 8021fae:	4618      	mov	r0, r3
 8021fb0:	370c      	adds	r7, #12
 8021fb2:	46bd      	mov	sp, r7
 8021fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fb8:	4770      	bx	lr
 8021fba:	0000      	movs	r0, r0
 8021fbc:	0000      	movs	r0, r0
	...

08021fc0 <_ZN10LineSensor19LeftRightDifferenceEv>:

float LineSensor::LeftRightDifference()
{
 8021fc0:	b5b0      	push	{r4, r5, r7, lr}
 8021fc2:	b086      	sub	sp, #24
 8021fc4:	af00      	add	r7, sp, #0
 8021fc6:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t left = 0, right = 0;
 8021fc8:	2300      	movs	r3, #0
 8021fca:	613b      	str	r3, [r7, #16]
 8021fcc:	2300      	movs	r3, #0
 8021fce:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 8021fd0:	2300      	movs	r3, #0
 8021fd2:	75fb      	strb	r3, [r7, #23]
 8021fd4:	7dfb      	ldrb	r3, [r7, #23]
 8021fd6:	2b06      	cmp	r3, #6
 8021fd8:	d80d      	bhi.n	8021ff6 <_ZN10LineSensor19LeftRightDifferenceEv+0x36>
    {
        left += line_sensors_valu_[i];
 8021fda:	7dfb      	ldrb	r3, [r7, #23]
 8021fdc:	687a      	ldr	r2, [r7, #4]
 8021fde:	33b4      	adds	r3, #180	; 0xb4
 8021fe0:	005b      	lsls	r3, r3, #1
 8021fe2:	4413      	add	r3, r2
 8021fe4:	889b      	ldrh	r3, [r3, #4]
 8021fe6:	461a      	mov	r2, r3
 8021fe8:	693b      	ldr	r3, [r7, #16]
 8021fea:	4413      	add	r3, r2
 8021fec:	613b      	str	r3, [r7, #16]
    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 8021fee:	7dfb      	ldrb	r3, [r7, #23]
 8021ff0:	3301      	adds	r3, #1
 8021ff2:	75fb      	strb	r3, [r7, #23]
 8021ff4:	e7ee      	b.n	8021fd4 <_ZN10LineSensor19LeftRightDifferenceEv+0x14>
    }
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8021ff6:	2307      	movs	r3, #7
 8021ff8:	75fb      	strb	r3, [r7, #23]
 8021ffa:	7dfb      	ldrb	r3, [r7, #23]
 8021ffc:	2b0d      	cmp	r3, #13
 8021ffe:	d80d      	bhi.n	802201c <_ZN10LineSensor19LeftRightDifferenceEv+0x5c>
    {
        right += line_sensors_valu_[i];
 8022000:	7dfb      	ldrb	r3, [r7, #23]
 8022002:	687a      	ldr	r2, [r7, #4]
 8022004:	33b4      	adds	r3, #180	; 0xb4
 8022006:	005b      	lsls	r3, r3, #1
 8022008:	4413      	add	r3, r2
 802200a:	889b      	ldrh	r3, [r3, #4]
 802200c:	461a      	mov	r2, r3
 802200e:	68fb      	ldr	r3, [r7, #12]
 8022010:	4413      	add	r3, r2
 8022012:	60fb      	str	r3, [r7, #12]
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8022014:	7dfb      	ldrb	r3, [r7, #23]
 8022016:	3301      	adds	r3, #1
 8022018:	75fb      	strb	r3, [r7, #23]
 802201a:	e7ee      	b.n	8021ffa <_ZN10LineSensor19LeftRightDifferenceEv+0x3a>
    }

#ifdef DEBUG_MODE
    g_line_left = left;
 802201c:	4a18      	ldr	r2, [pc, #96]	; (8022080 <_ZN10LineSensor19LeftRightDifferenceEv+0xc0>)
 802201e:	693b      	ldr	r3, [r7, #16]
 8022020:	6013      	str	r3, [r2, #0]
    g_line_right = right;
 8022022:	4a18      	ldr	r2, [pc, #96]	; (8022084 <_ZN10LineSensor19LeftRightDifferenceEv+0xc4>)
 8022024:	68fb      	ldr	r3, [r7, #12]
 8022026:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float difference = right * LINE_SENSOR_CORRECTION - left;
 8022028:	68f8      	ldr	r0, [r7, #12]
 802202a:	f7fe f94b 	bl	80202c4 <__aeabi_ui2d>
 802202e:	a312      	add	r3, pc, #72	; (adr r3, 8022078 <_ZN10LineSensor19LeftRightDifferenceEv+0xb8>)
 8022030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022034:	f7fe f9c0 	bl	80203b8 <__aeabi_dmul>
 8022038:	4603      	mov	r3, r0
 802203a:	460c      	mov	r4, r1
 802203c:	4625      	mov	r5, r4
 802203e:	461c      	mov	r4, r3
 8022040:	6938      	ldr	r0, [r7, #16]
 8022042:	f7fe f93f 	bl	80202c4 <__aeabi_ui2d>
 8022046:	4602      	mov	r2, r0
 8022048:	460b      	mov	r3, r1
 802204a:	4620      	mov	r0, r4
 802204c:	4629      	mov	r1, r5
 802204e:	f7fd fffb 	bl	8020048 <__aeabi_dsub>
 8022052:	4603      	mov	r3, r0
 8022054:	460c      	mov	r4, r1
 8022056:	4618      	mov	r0, r3
 8022058:	4621      	mov	r1, r4
 802205a:	f7fe fc47 	bl	80208ec <__aeabi_d2f>
 802205e:	4603      	mov	r3, r0
 8022060:	60bb      	str	r3, [r7, #8]

    return difference;
 8022062:	68bb      	ldr	r3, [r7, #8]
 8022064:	ee07 3a90 	vmov	s15, r3
}
 8022068:	eeb0 0a67 	vmov.f32	s0, s15
 802206c:	3718      	adds	r7, #24
 802206e:	46bd      	mov	sp, r7
 8022070:	bdb0      	pop	{r4, r5, r7, pc}
 8022072:	bf00      	nop
 8022074:	f3af 8000 	nop.w
 8022078:	66666666 	.word	0x66666666
 802207c:	3fee6666 	.word	0x3fee6666
 8022080:	20000248 	.word	0x20000248
 8022084:	2000024c 	.word	0x2000024c

08022088 <_ZN10LineSensor16CheckCalibrationEv>:

bool LineSensor::CheckCalibration()
{
 8022088:	b480      	push	{r7}
 802208a:	b085      	sub	sp, #20
 802208c:	af00      	add	r7, sp, #0
 802208e:	6078      	str	r0, [r7, #4]
    static uint16_t timer = 0;
    static uint16_t pre_max[NUM_OF_LINE_SENSORS] = {0};
    static uint16_t pre_min[NUM_OF_LINE_SENSORS] = {0};
    uint16_t max, min;
    bool result = true;
 8022090:	2301      	movs	r3, #1
 8022092:	73fb      	strb	r3, [r7, #15]

    for(uint8_t i = 0; i > NUM_OF_LINE_SENSORS; i++)
 8022094:	2300      	movs	r3, #0
 8022096:	73bb      	strb	r3, [r7, #14]
 8022098:	7bbb      	ldrb	r3, [r7, #14]
 802209a:	2b0e      	cmp	r3, #14
 802209c:	d92d      	bls.n	80220fa <_ZN10LineSensor16CheckCalibrationEv+0x72>
    {
        max = max_line_sensors_valu_[i];
 802209e:	7bbb      	ldrb	r3, [r7, #14]
 80220a0:	687a      	ldr	r2, [r7, #4]
 80220a2:	3398      	adds	r3, #152	; 0x98
 80220a4:	005b      	lsls	r3, r3, #1
 80220a6:	4413      	add	r3, r2
 80220a8:	889b      	ldrh	r3, [r3, #4]
 80220aa:	81bb      	strh	r3, [r7, #12]
        min = min_line_sensors_valu_[i];
 80220ac:	7bba      	ldrb	r2, [r7, #14]
 80220ae:	687b      	ldr	r3, [r7, #4]
 80220b0:	32a8      	adds	r2, #168	; 0xa8
 80220b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80220b6:	817b      	strh	r3, [r7, #10]

        if(pre_max[i] != max)      result = false;
 80220b8:	7bbb      	ldrb	r3, [r7, #14]
 80220ba:	4a1e      	ldr	r2, [pc, #120]	; (8022134 <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 80220bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80220c0:	89ba      	ldrh	r2, [r7, #12]
 80220c2:	429a      	cmp	r2, r3
 80220c4:	d002      	beq.n	80220cc <_ZN10LineSensor16CheckCalibrationEv+0x44>
 80220c6:	2300      	movs	r3, #0
 80220c8:	73fb      	strb	r3, [r7, #15]
 80220ca:	e008      	b.n	80220de <_ZN10LineSensor16CheckCalibrationEv+0x56>
        else if(pre_min[i] != min) result = false;
 80220cc:	7bbb      	ldrb	r3, [r7, #14]
 80220ce:	4a1a      	ldr	r2, [pc, #104]	; (8022138 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 80220d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80220d4:	897a      	ldrh	r2, [r7, #10]
 80220d6:	429a      	cmp	r2, r3
 80220d8:	d001      	beq.n	80220de <_ZN10LineSensor16CheckCalibrationEv+0x56>
 80220da:	2300      	movs	r3, #0
 80220dc:	73fb      	strb	r3, [r7, #15]

        pre_max[i] = max;
 80220de:	7bbb      	ldrb	r3, [r7, #14]
 80220e0:	4914      	ldr	r1, [pc, #80]	; (8022134 <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 80220e2:	89ba      	ldrh	r2, [r7, #12]
 80220e4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        pre_min[i] = min;
 80220e8:	7bbb      	ldrb	r3, [r7, #14]
 80220ea:	4913      	ldr	r1, [pc, #76]	; (8022138 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 80220ec:	897a      	ldrh	r2, [r7, #10]
 80220ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint8_t i = 0; i > NUM_OF_LINE_SENSORS; i++)
 80220f2:	7bbb      	ldrb	r3, [r7, #14]
 80220f4:	3301      	adds	r3, #1
 80220f6:	73bb      	strb	r3, [r7, #14]
 80220f8:	e7ce      	b.n	8022098 <_ZN10LineSensor16CheckCalibrationEv+0x10>
    }

    if(result)
 80220fa:	7bfb      	ldrb	r3, [r7, #15]
 80220fc:	2b00      	cmp	r3, #0
 80220fe:	d00e      	beq.n	802211e <_ZN10LineSensor16CheckCalibrationEv+0x96>
    {
        if(timer < CALIBRATION_SUCCESS_TIME)
 8022100:	4b0e      	ldr	r3, [pc, #56]	; (802213c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8022102:	881b      	ldrh	r3, [r3, #0]
 8022104:	f240 52db 	movw	r2, #1499	; 0x5db
 8022108:	4293      	cmp	r3, r2
 802210a:	d80b      	bhi.n	8022124 <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        {
            timer++;
 802210c:	4b0b      	ldr	r3, [pc, #44]	; (802213c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802210e:	881b      	ldrh	r3, [r3, #0]
 8022110:	3301      	adds	r3, #1
 8022112:	b29a      	uxth	r2, r3
 8022114:	4b09      	ldr	r3, [pc, #36]	; (802213c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8022116:	801a      	strh	r2, [r3, #0]
            result = false;
 8022118:	2300      	movs	r3, #0
 802211a:	73fb      	strb	r3, [r7, #15]
 802211c:	e002      	b.n	8022124 <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        }
    }
    else timer = 0;
 802211e:	4b07      	ldr	r3, [pc, #28]	; (802213c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8022120:	2200      	movs	r2, #0
 8022122:	801a      	strh	r2, [r3, #0]
    
    return result;
 8022124:	7bfb      	ldrb	r3, [r7, #15]
}
 8022126:	4618      	mov	r0, r3
 8022128:	3714      	adds	r7, #20
 802212a:	46bd      	mov	sp, r7
 802212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022130:	4770      	bx	lr
 8022132:	bf00      	nop
 8022134:	20000040 	.word	0x20000040
 8022138:	2000005c 	.word	0x2000005c
 802213c:	2000003e 	.word	0x2000003e

08022140 <_ZN10LineSensor13MonitorArraysEv>:

#ifdef DEBUG_MODE
void LineSensor::MonitorArrays()
{
 8022140:	b480      	push	{r7}
 8022142:	b085      	sub	sp, #20
 8022144:	af00      	add	r7, sp, #0
 8022146:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8022148:	2300      	movs	r3, #0
 802214a:	73fb      	strb	r3, [r7, #15]
 802214c:	7bfb      	ldrb	r3, [r7, #15]
 802214e:	2b0d      	cmp	r3, #13
 8022150:	d828      	bhi.n	80221a4 <_ZN10LineSensor13MonitorArraysEv+0x64>
    {
        g_line_buff[i] = line_sensors_buff_[i];
 8022152:	7bf9      	ldrb	r1, [r7, #15]
 8022154:	7bfb      	ldrb	r3, [r7, #15]
 8022156:	687a      	ldr	r2, [r7, #4]
 8022158:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 802215c:	4a14      	ldr	r2, [pc, #80]	; (80221b0 <_ZN10LineSensor13MonitorArraysEv+0x70>)
 802215e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        g_max_line_valu[i] = max_line_sensors_valu_[i];
 8022162:	7bfb      	ldrb	r3, [r7, #15]
 8022164:	7bfa      	ldrb	r2, [r7, #15]
 8022166:	6879      	ldr	r1, [r7, #4]
 8022168:	3398      	adds	r3, #152	; 0x98
 802216a:	005b      	lsls	r3, r3, #1
 802216c:	440b      	add	r3, r1
 802216e:	8899      	ldrh	r1, [r3, #4]
 8022170:	4b10      	ldr	r3, [pc, #64]	; (80221b4 <_ZN10LineSensor13MonitorArraysEv+0x74>)
 8022172:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_min_line_valu[i] = min_line_sensors_valu_[i];
 8022176:	7bf9      	ldrb	r1, [r7, #15]
 8022178:	7bfb      	ldrb	r3, [r7, #15]
 802217a:	687a      	ldr	r2, [r7, #4]
 802217c:	31a8      	adds	r1, #168	; 0xa8
 802217e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8022182:	4a0d      	ldr	r2, [pc, #52]	; (80221b8 <_ZN10LineSensor13MonitorArraysEv+0x78>)
 8022184:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        g_line_valu[i] = line_sensors_valu_[i];
 8022188:	7bfb      	ldrb	r3, [r7, #15]
 802218a:	7bfa      	ldrb	r2, [r7, #15]
 802218c:	6879      	ldr	r1, [r7, #4]
 802218e:	33b4      	adds	r3, #180	; 0xb4
 8022190:	005b      	lsls	r3, r3, #1
 8022192:	440b      	add	r3, r1
 8022194:	8899      	ldrh	r1, [r3, #4]
 8022196:	4b09      	ldr	r3, [pc, #36]	; (80221bc <_ZN10LineSensor13MonitorArraysEv+0x7c>)
 8022198:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802219c:	7bfb      	ldrb	r3, [r7, #15]
 802219e:	3301      	adds	r3, #1
 80221a0:	73fb      	strb	r3, [r7, #15]
 80221a2:	e7d3      	b.n	802214c <_ZN10LineSensor13MonitorArraysEv+0xc>
    }
}
 80221a4:	bf00      	nop
 80221a6:	3714      	adds	r7, #20
 80221a8:	46bd      	mov	sp, r7
 80221aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221ae:	4770      	bx	lr
 80221b0:	200000c0 	.word	0x200000c0
 80221b4:	200001f4 	.word	0x200001f4
 80221b8:	20000210 	.word	0x20000210
 80221bc:	2000022c 	.word	0x2000022c

080221c0 <_ZN9LineTraceC1Ev>:
#include "line_trace.hpp"

LineTrace::LineTrace() : integral_error_(0) {}
 80221c0:	b580      	push	{r7, lr}
 80221c2:	b082      	sub	sp, #8
 80221c4:	af00      	add	r7, sp, #0
 80221c6:	6078      	str	r0, [r7, #4]
 80221c8:	687b      	ldr	r3, [r7, #4]
 80221ca:	f04f 0200 	mov.w	r2, #0
 80221ce:	601a      	str	r2, [r3, #0]
 80221d0:	687b      	ldr	r3, [r7, #4]
 80221d2:	3304      	adds	r3, #4
 80221d4:	4618      	mov	r0, r3
 80221d6:	f7ff fc96 	bl	8021b06 <_ZN10LineSensorC1Ev>
 80221da:	687b      	ldr	r3, [r7, #4]
 80221dc:	4618      	mov	r0, r3
 80221de:	3708      	adds	r7, #8
 80221e0:	46bd      	mov	sp, r7
 80221e2:	bd80      	pop	{r7, pc}
 80221e4:	0000      	movs	r0, r0
	...

080221e8 <_ZN9LineTrace10PidControlEfff>:
{
    integral_error_ = 0.0;
}

float LineTrace::PidControl(float p_gain, float i_gain, float d_gain)
{
 80221e8:	b590      	push	{r4, r7, lr}
 80221ea:	b08b      	sub	sp, #44	; 0x2c
 80221ec:	af00      	add	r7, sp, #0
 80221ee:	60f8      	str	r0, [r7, #12]
 80221f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80221f4:	edc7 0a01 	vstr	s1, [r7, #4]
 80221f8:	ed87 1a00 	vstr	s2, [r7]
    static float pre_error = line_sensor.LeftRightDifference();
 80221fc:	4b52      	ldr	r3, [pc, #328]	; (8022348 <_ZN9LineTrace10PidControlEfff+0x160>)
 80221fe:	781b      	ldrb	r3, [r3, #0]
 8022200:	f3bf 8f5b 	dmb	ish
 8022204:	b2db      	uxtb	r3, r3
 8022206:	f003 0301 	and.w	r3, r3, #1
 802220a:	2b00      	cmp	r3, #0
 802220c:	bf0c      	ite	eq
 802220e:	2301      	moveq	r3, #1
 8022210:	2300      	movne	r3, #0
 8022212:	b2db      	uxtb	r3, r3
 8022214:	2b00      	cmp	r3, #0
 8022216:	d017      	beq.n	8022248 <_ZN9LineTrace10PidControlEfff+0x60>
 8022218:	484b      	ldr	r0, [pc, #300]	; (8022348 <_ZN9LineTrace10PidControlEfff+0x160>)
 802221a:	f008 fab1 	bl	802a780 <__cxa_guard_acquire>
 802221e:	4603      	mov	r3, r0
 8022220:	2b00      	cmp	r3, #0
 8022222:	bf14      	ite	ne
 8022224:	2301      	movne	r3, #1
 8022226:	2300      	moveq	r3, #0
 8022228:	b2db      	uxtb	r3, r3
 802222a:	2b00      	cmp	r3, #0
 802222c:	d00c      	beq.n	8022248 <_ZN9LineTrace10PidControlEfff+0x60>
 802222e:	68fb      	ldr	r3, [r7, #12]
 8022230:	3304      	adds	r3, #4
 8022232:	4618      	mov	r0, r3
 8022234:	f7ff fec4 	bl	8021fc0 <_ZN10LineSensor19LeftRightDifferenceEv>
 8022238:	eef0 7a40 	vmov.f32	s15, s0
 802223c:	4b43      	ldr	r3, [pc, #268]	; (802234c <_ZN9LineTrace10PidControlEfff+0x164>)
 802223e:	edc3 7a00 	vstr	s15, [r3]
 8022242:	4841      	ldr	r0, [pc, #260]	; (8022348 <_ZN9LineTrace10PidControlEfff+0x160>)
 8022244:	f008 faa8 	bl	802a798 <__cxa_guard_release>
    float error, differential_error, integral_error;
    float p, d, i;

    error = line_sensor.LeftRightDifference();
 8022248:	68fb      	ldr	r3, [r7, #12]
 802224a:	3304      	adds	r3, #4
 802224c:	4618      	mov	r0, r3
 802224e:	f7ff feb7 	bl	8021fc0 <_ZN10LineSensor19LeftRightDifferenceEv>
 8022252:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    differential_error = (error - pre_error) / TIM6_PERIOD_S;
 8022256:	4b3d      	ldr	r3, [pc, #244]	; (802234c <_ZN9LineTrace10PidControlEfff+0x164>)
 8022258:	edd3 7a00 	vldr	s15, [r3]
 802225c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8022260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022264:	ee17 0a90 	vmov	r0, s15
 8022268:	f7fe f84e 	bl	8020308 <__aeabi_f2d>
 802226c:	a334      	add	r3, pc, #208	; (adr r3, 8022340 <_ZN9LineTrace10PidControlEfff+0x158>)
 802226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022272:	f7fe f9cb 	bl	802060c <__aeabi_ddiv>
 8022276:	4603      	mov	r3, r0
 8022278:	460c      	mov	r4, r1
 802227a:	4618      	mov	r0, r3
 802227c:	4621      	mov	r1, r4
 802227e:	f7fe fb35 	bl	80208ec <__aeabi_d2f>
 8022282:	4603      	mov	r3, r0
 8022284:	623b      	str	r3, [r7, #32]
    integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 8022286:	4b31      	ldr	r3, [pc, #196]	; (802234c <_ZN9LineTrace10PidControlEfff+0x164>)
 8022288:	ed93 7a00 	vldr	s14, [r3]
 802228c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8022290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022294:	ee17 0a90 	vmov	r0, s15
 8022298:	f7fe f836 	bl	8020308 <__aeabi_f2d>
 802229c:	f04f 0200 	mov.w	r2, #0
 80222a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80222a4:	f7fe f9b2 	bl	802060c <__aeabi_ddiv>
 80222a8:	4603      	mov	r3, r0
 80222aa:	460c      	mov	r4, r1
 80222ac:	4618      	mov	r0, r3
 80222ae:	4621      	mov	r1, r4
 80222b0:	a323      	add	r3, pc, #140	; (adr r3, 8022340 <_ZN9LineTrace10PidControlEfff+0x158>)
 80222b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222b6:	f7fe f87f 	bl	80203b8 <__aeabi_dmul>
 80222ba:	4603      	mov	r3, r0
 80222bc:	460c      	mov	r4, r1
 80222be:	4618      	mov	r0, r3
 80222c0:	4621      	mov	r1, r4
 80222c2:	f7fe fb13 	bl	80208ec <__aeabi_d2f>
 80222c6:	4603      	mov	r3, r0
 80222c8:	61fb      	str	r3, [r7, #28]
    SetIntegralError(integral_error);
 80222ca:	ed97 0a07 	vldr	s0, [r7, #28]
 80222ce:	68f8      	ldr	r0, [r7, #12]
 80222d0:	f000 f844 	bl	802235c <_ZN9LineTrace16SetIntegralErrorEf>

    p = p_gain * error;
 80222d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80222d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80222dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80222e0:	edc7 7a06 	vstr	s15, [r7, #24]
    d = d_gain * differential_error;
 80222e4:	ed97 7a00 	vldr	s14, [r7]
 80222e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80222ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80222f0:	edc7 7a05 	vstr	s15, [r7, #20]
    i = i_gain * integral_error_;
 80222f4:	68fb      	ldr	r3, [r7, #12]
 80222f6:	edd3 7a00 	vldr	s15, [r3]
 80222fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80222fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022302:	edc7 7a04 	vstr	s15, [r7, #16]

#ifdef DEBUG_MODE
    g_trace_p = p;
 8022306:	4a12      	ldr	r2, [pc, #72]	; (8022350 <_ZN9LineTrace10PidControlEfff+0x168>)
 8022308:	69bb      	ldr	r3, [r7, #24]
 802230a:	6013      	str	r3, [r2, #0]
    g_trace_d = d;
 802230c:	4a11      	ldr	r2, [pc, #68]	; (8022354 <_ZN9LineTrace10PidControlEfff+0x16c>)
 802230e:	697b      	ldr	r3, [r7, #20]
 8022310:	6013      	str	r3, [r2, #0]
    g_trace_i = i;
 8022312:	4a11      	ldr	r2, [pc, #68]	; (8022358 <_ZN9LineTrace10PidControlEfff+0x170>)
 8022314:	693b      	ldr	r3, [r7, #16]
 8022316:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    pre_error = error;
 8022318:	4a0c      	ldr	r2, [pc, #48]	; (802234c <_ZN9LineTrace10PidControlEfff+0x164>)
 802231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802231c:	6013      	str	r3, [r2, #0]

    return p + d + i;
 802231e:	ed97 7a06 	vldr	s14, [r7, #24]
 8022322:	edd7 7a05 	vldr	s15, [r7, #20]
 8022326:	ee37 7a27 	vadd.f32	s14, s14, s15
 802232a:	edd7 7a04 	vldr	s15, [r7, #16]
 802232e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8022332:	eeb0 0a67 	vmov.f32	s0, s15
 8022336:	372c      	adds	r7, #44	; 0x2c
 8022338:	46bd      	mov	sp, r7
 802233a:	bd90      	pop	{r4, r7, pc}
 802233c:	f3af 8000 	nop.w
 8022340:	47ae147b 	.word	0x47ae147b
 8022344:	3f547ae1 	.word	0x3f547ae1
 8022348:	2000007c 	.word	0x2000007c
 802234c:	20000078 	.word	0x20000078
 8022350:	200002d4 	.word	0x200002d4
 8022354:	200002dc 	.word	0x200002dc
 8022358:	200002d8 	.word	0x200002d8

0802235c <_ZN9LineTrace16SetIntegralErrorEf>:

void LineTrace::SetIntegralError(float integral_error)
{
 802235c:	b480      	push	{r7}
 802235e:	b083      	sub	sp, #12
 8022360:	af00      	add	r7, sp, #0
 8022362:	6078      	str	r0, [r7, #4]
 8022364:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8022368:	687b      	ldr	r3, [r7, #4]
 802236a:	ed93 7a00 	vldr	s14, [r3]
 802236e:	edd7 7a00 	vldr	s15, [r7]
 8022372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022376:	687b      	ldr	r3, [r7, #4]
 8022378:	edc3 7a00 	vstr	s15, [r3]
}
 802237c:	bf00      	nop
 802237e:	370c      	adds	r7, #12
 8022380:	46bd      	mov	sp, r7
 8022382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022386:	4770      	bx	lr

08022388 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8022388:	b480      	push	{r7}
 802238a:	b083      	sub	sp, #12
 802238c:	af00      	add	r7, sp, #0
 802238e:	ed87 0a01 	vstr	s0, [r7, #4]
 8022392:	edd7 7a01 	vldr	s15, [r7, #4]
 8022396:	eef0 7ae7 	vabs.f32	s15, s15
 802239a:	eeb0 0a67 	vmov.f32	s0, s15
 802239e:	370c      	adds	r7, #12
 80223a0:	46bd      	mov	sp, r7
 80223a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223a6:	4770      	bx	lr

080223a8 <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() : const_distance_log_(), radian_log_(), various_log_(), const_distance_copy_(), radian_copy_(), various_copy_(), accel_address_(), decel_address_(), periodic_write_enable_(0), accel_position_write_enable_(0), excess_stack_(0), target_velocity_(MIN_VELOCITY) {}
 80223a8:	b580      	push	{r7, lr}
 80223aa:	b082      	sub	sp, #8
 80223ac:	af00      	add	r7, sp, #0
 80223ae:	6078      	str	r0, [r7, #4]
 80223b0:	687a      	ldr	r2, [r7, #4]
 80223b2:	2309      	movs	r3, #9
 80223b4:	2b00      	cmp	r3, #0
 80223b6:	db05      	blt.n	80223c4 <_ZN6LoggerC1Ev+0x1c>
 80223b8:	f04f 0100 	mov.w	r1, #0
 80223bc:	6011      	str	r1, [r2, #0]
 80223be:	3204      	adds	r2, #4
 80223c0:	3b01      	subs	r3, #1
 80223c2:	e7f7      	b.n	80223b4 <_ZN6LoggerC1Ev+0xc>
 80223c4:	687b      	ldr	r3, [r7, #4]
 80223c6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80223ca:	2309      	movs	r3, #9
 80223cc:	2b00      	cmp	r3, #0
 80223ce:	db05      	blt.n	80223dc <_ZN6LoggerC1Ev+0x34>
 80223d0:	f04f 0100 	mov.w	r1, #0
 80223d4:	6011      	str	r1, [r2, #0]
 80223d6:	3204      	adds	r2, #4
 80223d8:	3b01      	subs	r3, #1
 80223da:	e7f7      	b.n	80223cc <_ZN6LoggerC1Ev+0x24>
 80223dc:	687b      	ldr	r3, [r7, #4]
 80223de:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80223e2:	2309      	movs	r3, #9
 80223e4:	2b00      	cmp	r3, #0
 80223e6:	db04      	blt.n	80223f2 <_ZN6LoggerC1Ev+0x4a>
 80223e8:	2100      	movs	r1, #0
 80223ea:	8011      	strh	r1, [r2, #0]
 80223ec:	3202      	adds	r2, #2
 80223ee:	3b01      	subs	r3, #1
 80223f0:	e7f8      	b.n	80223e4 <_ZN6LoggerC1Ev+0x3c>
 80223f2:	687b      	ldr	r3, [r7, #4]
 80223f4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80223f8:	2309      	movs	r3, #9
 80223fa:	2b00      	cmp	r3, #0
 80223fc:	db05      	blt.n	802240a <_ZN6LoggerC1Ev+0x62>
 80223fe:	f04f 0100 	mov.w	r1, #0
 8022402:	6011      	str	r1, [r2, #0]
 8022404:	3204      	adds	r2, #4
 8022406:	3b01      	subs	r3, #1
 8022408:	e7f7      	b.n	80223fa <_ZN6LoggerC1Ev+0x52>
 802240a:	687b      	ldr	r3, [r7, #4]
 802240c:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8022410:	2309      	movs	r3, #9
 8022412:	2b00      	cmp	r3, #0
 8022414:	db05      	blt.n	8022422 <_ZN6LoggerC1Ev+0x7a>
 8022416:	f04f 0100 	mov.w	r1, #0
 802241a:	6011      	str	r1, [r2, #0]
 802241c:	3204      	adds	r2, #4
 802241e:	3b01      	subs	r3, #1
 8022420:	e7f7      	b.n	8022412 <_ZN6LoggerC1Ev+0x6a>
 8022422:	687b      	ldr	r3, [r7, #4]
 8022424:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8022428:	2309      	movs	r3, #9
 802242a:	2b00      	cmp	r3, #0
 802242c:	db04      	blt.n	8022438 <_ZN6LoggerC1Ev+0x90>
 802242e:	2100      	movs	r1, #0
 8022430:	8011      	strh	r1, [r2, #0]
 8022432:	3202      	adds	r2, #2
 8022434:	3b01      	subs	r3, #1
 8022436:	e7f8      	b.n	802242a <_ZN6LoggerC1Ev+0x82>
 8022438:	687b      	ldr	r3, [r7, #4]
 802243a:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 802243e:	2304      	movs	r3, #4
 8022440:	2b00      	cmp	r3, #0
 8022442:	db04      	blt.n	802244e <_ZN6LoggerC1Ev+0xa6>
 8022444:	2100      	movs	r1, #0
 8022446:	8011      	strh	r1, [r2, #0]
 8022448:	3202      	adds	r2, #2
 802244a:	3b01      	subs	r3, #1
 802244c:	e7f8      	b.n	8022440 <_ZN6LoggerC1Ev+0x98>
 802244e:	687b      	ldr	r3, [r7, #4]
 8022450:	f103 02d2 	add.w	r2, r3, #210	; 0xd2
 8022454:	2304      	movs	r3, #4
 8022456:	2b00      	cmp	r3, #0
 8022458:	db04      	blt.n	8022464 <_ZN6LoggerC1Ev+0xbc>
 802245a:	2100      	movs	r1, #0
 802245c:	8011      	strh	r1, [r2, #0]
 802245e:	3202      	adds	r2, #2
 8022460:	3b01      	subs	r3, #1
 8022462:	e7f8      	b.n	8022456 <_ZN6LoggerC1Ev+0xae>
 8022464:	687b      	ldr	r3, [r7, #4]
 8022466:	2200      	movs	r2, #0
 8022468:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 802246c:	687b      	ldr	r3, [r7, #4]
 802246e:	2200      	movs	r2, #0
 8022470:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8022474:	687b      	ldr	r3, [r7, #4]
 8022476:	f04f 0200 	mov.w	r2, #0
 802247a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 802247e:	687b      	ldr	r3, [r7, #4]
 8022480:	4a0b      	ldr	r2, [pc, #44]	; (80224b0 <_ZN6LoggerC1Ev+0x108>)
 8022482:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8022486:	687b      	ldr	r3, [r7, #4]
 8022488:	33e8      	adds	r3, #232	; 0xe8
 802248a:	4618      	mov	r0, r3
 802248c:	f7fe fc42 	bl	8020d14 <_ZN7EncoderC1Ev>
 8022490:	687b      	ldr	r3, [r7, #4]
 8022492:	33f8      	adds	r3, #248	; 0xf8
 8022494:	4618      	mov	r0, r3
 8022496:	f7fe ff4a 	bl	802132e <_ZN8Iim42652C1Ev>
 802249a:	687b      	ldr	r3, [r7, #4]
 802249c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80224a0:	4618      	mov	r0, r3
 80224a2:	f001 fe53 	bl	802414c <_ZN10SideSensorC1Ev>
 80224a6:	687b      	ldr	r3, [r7, #4]
 80224a8:	4618      	mov	r0, r3
 80224aa:	3708      	adds	r7, #8
 80224ac:	46bd      	mov	sp, r7
 80224ae:	bd80      	pop	{r7, pc}
 80224b0:	3fa66666 	.word	0x3fa66666
 80224b4:	00000000 	.word	0x00000000

080224b8 <_ZN6Logger7LoggingEh>:

void Logger::Logging(uint8_t process_complete)
{
 80224b8:	b5b0      	push	{r4, r5, r7, lr}
 80224ba:	b08c      	sub	sp, #48	; 0x30
 80224bc:	af00      	add	r7, sp, #0
 80224be:	6078      	str	r0, [r7, #4]
 80224c0:	460b      	mov	r3, r1
 80224c2:	70fb      	strb	r3, [r7, #3]
    float distance = encoder.GetDistanceStack();
 80224c4:	687b      	ldr	r3, [r7, #4]
 80224c6:	33e8      	adds	r3, #232	; 0xe8
 80224c8:	4618      	mov	r0, r3
 80224ca:	f7fe fcf2 	bl	8020eb2 <_ZN7Encoder16GetDistanceStackEv>
 80224ce:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    if(distance < LOGGING_CONST_DISTANCE) return;
 80224d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80224d6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80224da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80224de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224e2:	f100 81f5 	bmi.w	80228d0 <_ZN6Logger7LoggingEh+0x418>
    encoder.ResetDistanceStack();
 80224e6:	687b      	ldr	r3, [r7, #4]
 80224e8:	33e8      	adds	r3, #232	; 0xe8
 80224ea:	4618      	mov	r0, r3
 80224ec:	f7fe fcc4 	bl	8020e78 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0; // flash address count. (0 ~ 6199)
    static uint16_t log_index = 0;   // Count up when interrupt.

    /* Mapping data of distance */
    const_distance_log_[log_index] = distance;
 80224f0:	4bb3      	ldr	r3, [pc, #716]	; (80227c0 <_ZN6Logger7LoggingEh+0x308>)
 80224f2:	881b      	ldrh	r3, [r3, #0]
 80224f4:	687a      	ldr	r2, [r7, #4]
 80224f6:	009b      	lsls	r3, r3, #2
 80224f8:	4413      	add	r3, r2
 80224fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80224fc:	601a      	str	r2, [r3, #0]

    /* Mapping data of radian */
    double degree = iim_42652.GetDegreeStackZ();
 80224fe:	687b      	ldr	r3, [r7, #4]
 8022500:	33f8      	adds	r3, #248	; 0xf8
 8022502:	4618      	mov	r0, r3
 8022504:	f7ff f8ec 	bl	80216e0 <_ZN8Iim4265215GetDegreeStackZEv>
 8022508:	ed87 0b06 	vstr	d0, [r7, #24]
    float radian = static_cast<float>(degree * M_PI / 180.0);
 802250c:	a3aa      	add	r3, pc, #680	; (adr r3, 80227b8 <_ZN6Logger7LoggingEh+0x300>)
 802250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022512:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8022516:	f7fd ff4f 	bl	80203b8 <__aeabi_dmul>
 802251a:	4603      	mov	r3, r0
 802251c:	460c      	mov	r4, r1
 802251e:	4618      	mov	r0, r3
 8022520:	4621      	mov	r1, r4
 8022522:	f04f 0200 	mov.w	r2, #0
 8022526:	4ba7      	ldr	r3, [pc, #668]	; (80227c4 <_ZN6Logger7LoggingEh+0x30c>)
 8022528:	f7fe f870 	bl	802060c <__aeabi_ddiv>
 802252c:	4603      	mov	r3, r0
 802252e:	460c      	mov	r4, r1
 8022530:	4618      	mov	r0, r3
 8022532:	4621      	mov	r1, r4
 8022534:	f7fe f9da 	bl	80208ec <__aeabi_d2f>
 8022538:	4603      	mov	r3, r0
 802253a:	617b      	str	r3, [r7, #20]
    radian_log_[log_index] = radian;
 802253c:	4ba0      	ldr	r3, [pc, #640]	; (80227c0 <_ZN6Logger7LoggingEh+0x308>)
 802253e:	881b      	ldrh	r3, [r3, #0]
 8022540:	687a      	ldr	r2, [r7, #4]
 8022542:	330a      	adds	r3, #10
 8022544:	009b      	lsls	r3, r3, #2
 8022546:	4413      	add	r3, r2
 8022548:	697a      	ldr	r2, [r7, #20]
 802254a:	601a      	str	r2, [r3, #0]
    iim_42652.ResetDegreeStackZ();
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	33f8      	adds	r3, #248	; 0xf8
 8022550:	4618      	mov	r0, r3
 8022552:	f7ff f8b5 	bl	80216c0 <_ZN8Iim4265217ResetDegreeStackZEv>

    /* Various log */
    static uint8_t pre_corner_cnt = side_sensor.GetCornerMarkerCount();
 8022556:	4b9c      	ldr	r3, [pc, #624]	; (80227c8 <_ZN6Logger7LoggingEh+0x310>)
 8022558:	781b      	ldrb	r3, [r3, #0]
 802255a:	f3bf 8f5b 	dmb	ish
 802255e:	b2db      	uxtb	r3, r3
 8022560:	f003 0301 	and.w	r3, r3, #1
 8022564:	2b00      	cmp	r3, #0
 8022566:	bf0c      	ite	eq
 8022568:	2301      	moveq	r3, #1
 802256a:	2300      	movne	r3, #0
 802256c:	b2db      	uxtb	r3, r3
 802256e:	2b00      	cmp	r3, #0
 8022570:	d017      	beq.n	80225a2 <_ZN6Logger7LoggingEh+0xea>
 8022572:	4895      	ldr	r0, [pc, #596]	; (80227c8 <_ZN6Logger7LoggingEh+0x310>)
 8022574:	f008 f904 	bl	802a780 <__cxa_guard_acquire>
 8022578:	4603      	mov	r3, r0
 802257a:	2b00      	cmp	r3, #0
 802257c:	bf14      	ite	ne
 802257e:	2301      	movne	r3, #1
 8022580:	2300      	moveq	r3, #0
 8022582:	b2db      	uxtb	r3, r3
 8022584:	2b00      	cmp	r3, #0
 8022586:	d00c      	beq.n	80225a2 <_ZN6Logger7LoggingEh+0xea>
 8022588:	687b      	ldr	r3, [r7, #4]
 802258a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802258e:	4618      	mov	r0, r3
 8022590:	f002 f8d2 	bl	8024738 <_ZN10SideSensor20GetCornerMarkerCountEv>
 8022594:	4603      	mov	r3, r0
 8022596:	461a      	mov	r2, r3
 8022598:	4b8c      	ldr	r3, [pc, #560]	; (80227cc <_ZN6Logger7LoggingEh+0x314>)
 802259a:	701a      	strb	r2, [r3, #0]
 802259c:	488a      	ldr	r0, [pc, #552]	; (80227c8 <_ZN6Logger7LoggingEh+0x310>)
 802259e:	f008 f8fb 	bl	802a798 <__cxa_guard_release>
    static uint8_t pre_cross_cnt  = side_sensor.GetCrossLineCount();
 80225a2:	4b8b      	ldr	r3, [pc, #556]	; (80227d0 <_ZN6Logger7LoggingEh+0x318>)
 80225a4:	781b      	ldrb	r3, [r3, #0]
 80225a6:	f3bf 8f5b 	dmb	ish
 80225aa:	b2db      	uxtb	r3, r3
 80225ac:	f003 0301 	and.w	r3, r3, #1
 80225b0:	2b00      	cmp	r3, #0
 80225b2:	bf0c      	ite	eq
 80225b4:	2301      	moveq	r3, #1
 80225b6:	2300      	movne	r3, #0
 80225b8:	b2db      	uxtb	r3, r3
 80225ba:	2b00      	cmp	r3, #0
 80225bc:	d017      	beq.n	80225ee <_ZN6Logger7LoggingEh+0x136>
 80225be:	4884      	ldr	r0, [pc, #528]	; (80227d0 <_ZN6Logger7LoggingEh+0x318>)
 80225c0:	f008 f8de 	bl	802a780 <__cxa_guard_acquire>
 80225c4:	4603      	mov	r3, r0
 80225c6:	2b00      	cmp	r3, #0
 80225c8:	bf14      	ite	ne
 80225ca:	2301      	movne	r3, #1
 80225cc:	2300      	moveq	r3, #0
 80225ce:	b2db      	uxtb	r3, r3
 80225d0:	2b00      	cmp	r3, #0
 80225d2:	d00c      	beq.n	80225ee <_ZN6Logger7LoggingEh+0x136>
 80225d4:	687b      	ldr	r3, [r7, #4]
 80225d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80225da:	4618      	mov	r0, r3
 80225dc:	f002 f8b8 	bl	8024750 <_ZN10SideSensor17GetCrossLineCountEv>
 80225e0:	4603      	mov	r3, r0
 80225e2:	461a      	mov	r2, r3
 80225e4:	4b7b      	ldr	r3, [pc, #492]	; (80227d4 <_ZN6Logger7LoggingEh+0x31c>)
 80225e6:	701a      	strb	r2, [r3, #0]
 80225e8:	4879      	ldr	r0, [pc, #484]	; (80227d0 <_ZN6Logger7LoggingEh+0x318>)
 80225ea:	f008 f8d5 	bl	802a798 <__cxa_guard_release>
    uint8_t corner_cnt = side_sensor.GetCornerMarkerCount();
 80225ee:	687b      	ldr	r3, [r7, #4]
 80225f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80225f4:	4618      	mov	r0, r3
 80225f6:	f002 f89f 	bl	8024738 <_ZN10SideSensor20GetCornerMarkerCountEv>
 80225fa:	4603      	mov	r3, r0
 80225fc:	74fb      	strb	r3, [r7, #19]
    uint8_t cross_cnt  = side_sensor.GetCrossLineCount();
 80225fe:	687b      	ldr	r3, [r7, #4]
 8022600:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022604:	4618      	mov	r0, r3
 8022606:	f002 f8a3 	bl	8024750 <_ZN10SideSensor17GetCrossLineCountEv>
 802260a:	4603      	mov	r3, r0
 802260c:	74bb      	strb	r3, [r7, #18]
    uint16_t various_buff = 0;
 802260e:	2300      	movs	r3, #0
 8022610:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(process_complete != 0)        various_buff |= 0x0004;
 8022612:	78fb      	ldrb	r3, [r7, #3]
 8022614:	2b00      	cmp	r3, #0
 8022616:	d003      	beq.n	8022620 <_ZN6Logger7LoggingEh+0x168>
 8022618:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802261a:	f043 0304 	orr.w	r3, r3, #4
 802261e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_corner_cnt != corner_cnt) various_buff |= 0x0002;
 8022620:	4b6a      	ldr	r3, [pc, #424]	; (80227cc <_ZN6Logger7LoggingEh+0x314>)
 8022622:	781b      	ldrb	r3, [r3, #0]
 8022624:	7cfa      	ldrb	r2, [r7, #19]
 8022626:	429a      	cmp	r2, r3
 8022628:	d003      	beq.n	8022632 <_ZN6Logger7LoggingEh+0x17a>
 802262a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802262c:	f043 0302 	orr.w	r3, r3, #2
 8022630:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_cross_cnt != cross_cnt)   various_buff |= 0x0001;
 8022632:	4b68      	ldr	r3, [pc, #416]	; (80227d4 <_ZN6Logger7LoggingEh+0x31c>)
 8022634:	781b      	ldrb	r3, [r3, #0]
 8022636:	7cba      	ldrb	r2, [r7, #18]
 8022638:	429a      	cmp	r2, r3
 802263a:	d003      	beq.n	8022644 <_ZN6Logger7LoggingEh+0x18c>
 802263c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802263e:	f043 0301 	orr.w	r3, r3, #1
 8022642:	85fb      	strh	r3, [r7, #46]	; 0x2e
    pre_corner_cnt = corner_cnt;
 8022644:	4a61      	ldr	r2, [pc, #388]	; (80227cc <_ZN6Logger7LoggingEh+0x314>)
 8022646:	7cfb      	ldrb	r3, [r7, #19]
 8022648:	7013      	strb	r3, [r2, #0]
    pre_cross_cnt  = cross_cnt;
 802264a:	4a62      	ldr	r2, [pc, #392]	; (80227d4 <_ZN6Logger7LoggingEh+0x31c>)
 802264c:	7cbb      	ldrb	r3, [r7, #18]
 802264e:	7013      	strb	r3, [r2, #0]
    various_log_[log_index] = various_buff;
 8022650:	4b5b      	ldr	r3, [pc, #364]	; (80227c0 <_ZN6Logger7LoggingEh+0x308>)
 8022652:	881b      	ldrh	r3, [r3, #0]
 8022654:	461a      	mov	r2, r3
 8022656:	687b      	ldr	r3, [r7, #4]
 8022658:	3228      	adds	r2, #40	; 0x28
 802265a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 802265c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /* Copy periodic log */
    if(log_index == LAST_LOG_INDEX)
 8022660:	4b57      	ldr	r3, [pc, #348]	; (80227c0 <_ZN6Logger7LoggingEh+0x308>)
 8022662:	881b      	ldrh	r3, [r3, #0]
 8022664:	2b09      	cmp	r3, #9
 8022666:	d120      	bne.n	80226aa <_ZN6Logger7LoggingEh+0x1f2>
    {
        log_index = 0;
 8022668:	4b55      	ldr	r3, [pc, #340]	; (80227c0 <_ZN6Logger7LoggingEh+0x308>)
 802266a:	2200      	movs	r2, #0
 802266c:	801a      	strh	r2, [r3, #0]
        memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 802266e:	687b      	ldr	r3, [r7, #4]
 8022670:	3364      	adds	r3, #100	; 0x64
 8022672:	6879      	ldr	r1, [r7, #4]
 8022674:	2228      	movs	r2, #40	; 0x28
 8022676:	4618      	mov	r0, r3
 8022678:	f008 f8b6 	bl	802a7e8 <memcpy>
        memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 802267c:	687b      	ldr	r3, [r7, #4]
 802267e:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8022682:	687b      	ldr	r3, [r7, #4]
 8022684:	3328      	adds	r3, #40	; 0x28
 8022686:	2228      	movs	r2, #40	; 0x28
 8022688:	4619      	mov	r1, r3
 802268a:	f008 f8ad 	bl	802a7e8 <memcpy>
        memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 802268e:	687b      	ldr	r3, [r7, #4]
 8022690:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8022694:	687b      	ldr	r3, [r7, #4]
 8022696:	3350      	adds	r3, #80	; 0x50
 8022698:	2214      	movs	r2, #20
 802269a:	4619      	mov	r1, r3
 802269c:	f008 f8a4 	bl	802a7e8 <memcpy>
        periodic_write_enable_ = 1;
 80226a0:	687b      	ldr	r3, [r7, #4]
 80226a2:	2201      	movs	r2, #1
 80226a4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80226a8:	e005      	b.n	80226b6 <_ZN6Logger7LoggingEh+0x1fe>
    }
    else log_index++;
 80226aa:	4b45      	ldr	r3, [pc, #276]	; (80227c0 <_ZN6Logger7LoggingEh+0x308>)
 80226ac:	881b      	ldrh	r3, [r3, #0]
 80226ae:	3301      	adds	r3, #1
 80226b0:	b29a      	uxth	r2, r3
 80226b2:	4b43      	ldr	r3, [pc, #268]	; (80227c0 <_ZN6Logger7LoggingEh+0x308>)
 80226b4:	801a      	strh	r2, [r3, #0]

    /* Distance correction */
    uint16_t correction_address = now_address;
 80226b6:	4b48      	ldr	r3, [pc, #288]	; (80227d8 <_ZN6Logger7LoggingEh+0x320>)
 80226b8:	881b      	ldrh	r3, [r3, #0]
 80226ba:	823b      	strh	r3, [r7, #16]
    float excess = excess_stack_;
 80226bc:	687b      	ldr	r3, [r7, #4]
 80226be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80226c2:	60fb      	str	r3, [r7, #12]
    excess += distance - LOGGING_CONST_DISTANCE;
 80226c4:	68f8      	ldr	r0, [r7, #12]
 80226c6:	f7fd fe1f 	bl	8020308 <__aeabi_f2d>
 80226ca:	4604      	mov	r4, r0
 80226cc:	460d      	mov	r5, r1
 80226ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80226d0:	f7fd fe1a 	bl	8020308 <__aeabi_f2d>
 80226d4:	f04f 0200 	mov.w	r2, #0
 80226d8:	4b40      	ldr	r3, [pc, #256]	; (80227dc <_ZN6Logger7LoggingEh+0x324>)
 80226da:	f7fd fcb5 	bl	8020048 <__aeabi_dsub>
 80226de:	4602      	mov	r2, r0
 80226e0:	460b      	mov	r3, r1
 80226e2:	4620      	mov	r0, r4
 80226e4:	4629      	mov	r1, r5
 80226e6:	f7fd fcb1 	bl	802004c <__adddf3>
 80226ea:	4603      	mov	r3, r0
 80226ec:	460c      	mov	r4, r1
 80226ee:	4618      	mov	r0, r3
 80226f0:	4621      	mov	r1, r4
 80226f2:	f7fe f8fb 	bl	80208ec <__aeabi_d2f>
 80226f6:	4603      	mov	r3, r0
 80226f8:	60fb      	str	r3, [r7, #12]
    if(excess > LOGGING_CONST_DISTANCE)
 80226fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80226fe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802270a:	dd6b      	ble.n	80227e4 <_ZN6Logger7LoggingEh+0x32c>
    {
        const_distance_log_[log_index] = excess;
 802270c:	4b2c      	ldr	r3, [pc, #176]	; (80227c0 <_ZN6Logger7LoggingEh+0x308>)
 802270e:	881b      	ldrh	r3, [r3, #0]
 8022710:	687a      	ldr	r2, [r7, #4]
 8022712:	009b      	lsls	r3, r3, #2
 8022714:	4413      	add	r3, r2
 8022716:	68fa      	ldr	r2, [r7, #12]
 8022718:	601a      	str	r2, [r3, #0]
        radian_log_[log_index] = radian;
 802271a:	4b29      	ldr	r3, [pc, #164]	; (80227c0 <_ZN6Logger7LoggingEh+0x308>)
 802271c:	881b      	ldrh	r3, [r3, #0]
 802271e:	687a      	ldr	r2, [r7, #4]
 8022720:	330a      	adds	r3, #10
 8022722:	009b      	lsls	r3, r3, #2
 8022724:	4413      	add	r3, r2
 8022726:	697a      	ldr	r2, [r7, #20]
 8022728:	601a      	str	r2, [r3, #0]
        various_log_[log_index] = VARIOUS_LOG_DATA_WHEN_COPY;
 802272a:	4b25      	ldr	r3, [pc, #148]	; (80227c0 <_ZN6Logger7LoggingEh+0x308>)
 802272c:	881b      	ldrh	r3, [r3, #0]
 802272e:	461a      	mov	r2, r3
 8022730:	687b      	ldr	r3, [r7, #4]
 8022732:	3228      	adds	r2, #40	; 0x28
 8022734:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 8022738:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        excess_stack_ = excess - LOGGING_CONST_DISTANCE;
 802273c:	edd7 7a03 	vldr	s15, [r7, #12]
 8022740:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022748:	687b      	ldr	r3, [r7, #4]
 802274a:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
        now_address++;
 802274e:	4b22      	ldr	r3, [pc, #136]	; (80227d8 <_ZN6Logger7LoggingEh+0x320>)
 8022750:	881b      	ldrh	r3, [r3, #0]
 8022752:	3301      	adds	r3, #1
 8022754:	b29a      	uxth	r2, r3
 8022756:	4b20      	ldr	r3, [pc, #128]	; (80227d8 <_ZN6Logger7LoggingEh+0x320>)
 8022758:	801a      	strh	r2, [r3, #0]

        /* Copy periodic log */
        if(log_index == LAST_LOG_INDEX)
 802275a:	4b19      	ldr	r3, [pc, #100]	; (80227c0 <_ZN6Logger7LoggingEh+0x308>)
 802275c:	881b      	ldrh	r3, [r3, #0]
 802275e:	2b09      	cmp	r3, #9
 8022760:	d120      	bne.n	80227a4 <_ZN6Logger7LoggingEh+0x2ec>
        {
            log_index = 0;
 8022762:	4b17      	ldr	r3, [pc, #92]	; (80227c0 <_ZN6Logger7LoggingEh+0x308>)
 8022764:	2200      	movs	r2, #0
 8022766:	801a      	strh	r2, [r3, #0]
            memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 8022768:	687b      	ldr	r3, [r7, #4]
 802276a:	3364      	adds	r3, #100	; 0x64
 802276c:	6879      	ldr	r1, [r7, #4]
 802276e:	2228      	movs	r2, #40	; 0x28
 8022770:	4618      	mov	r0, r3
 8022772:	f008 f839 	bl	802a7e8 <memcpy>
            memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 8022776:	687b      	ldr	r3, [r7, #4]
 8022778:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 802277c:	687b      	ldr	r3, [r7, #4]
 802277e:	3328      	adds	r3, #40	; 0x28
 8022780:	2228      	movs	r2, #40	; 0x28
 8022782:	4619      	mov	r1, r3
 8022784:	f008 f830 	bl	802a7e8 <memcpy>
            memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 8022788:	687b      	ldr	r3, [r7, #4]
 802278a:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 802278e:	687b      	ldr	r3, [r7, #4]
 8022790:	3350      	adds	r3, #80	; 0x50
 8022792:	2214      	movs	r2, #20
 8022794:	4619      	mov	r1, r3
 8022796:	f008 f827 	bl	802a7e8 <memcpy>
            periodic_write_enable_ = 1;
 802279a:	687b      	ldr	r3, [r7, #4]
 802279c:	2201      	movs	r2, #1
 802279e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80227a2:	e023      	b.n	80227ec <_ZN6Logger7LoggingEh+0x334>
        }
        else log_index++;
 80227a4:	4b06      	ldr	r3, [pc, #24]	; (80227c0 <_ZN6Logger7LoggingEh+0x308>)
 80227a6:	881b      	ldrh	r3, [r3, #0]
 80227a8:	3301      	adds	r3, #1
 80227aa:	b29a      	uxth	r2, r3
 80227ac:	4b04      	ldr	r3, [pc, #16]	; (80227c0 <_ZN6Logger7LoggingEh+0x308>)
 80227ae:	801a      	strh	r2, [r3, #0]
 80227b0:	e01c      	b.n	80227ec <_ZN6Logger7LoggingEh+0x334>
 80227b2:	bf00      	nop
 80227b4:	f3af 8000 	nop.w
 80227b8:	54442d18 	.word	0x54442d18
 80227bc:	400921fb 	.word	0x400921fb
 80227c0:	20000082 	.word	0x20000082
 80227c4:	40668000 	.word	0x40668000
 80227c8:	20000088 	.word	0x20000088
 80227cc:	20000084 	.word	0x20000084
 80227d0:	20000090 	.word	0x20000090
 80227d4:	2000008c 	.word	0x2000008c
 80227d8:	20000080 	.word	0x20000080
 80227dc:	40340000 	.word	0x40340000
 80227e0:	43ca0000 	.word	0x43ca0000
    }
    else excess_stack_ = excess;
 80227e4:	687b      	ldr	r3, [r7, #4]
 80227e6:	68fa      	ldr	r2, [r7, #12]
 80227e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    /* Accel position log */
    static uint16_t accel_straight_cnt = 0;
    static uint8_t accel_step = 0;
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA)
 80227ec:	687b      	ldr	r3, [r7, #4]
 80227ee:	33e8      	adds	r3, #232	; 0xe8
 80227f0:	4618      	mov	r0, r3
 80227f2:	f7fe fb6d 	bl	8020ed0 <_ZN7Encoder15AngularVelocityEv>
 80227f6:	eef0 7a40 	vmov.f32	s15, s0
 80227fa:	eeb0 0a67 	vmov.f32	s0, s15
 80227fe:	f7ff fdc3 	bl	8022388 <_ZSt4fabsf>
 8022802:	eeb0 7a40 	vmov.f32	s14, s0
 8022806:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 80227e0 <_ZN6Logger7LoggingEh+0x328>
 802280a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022812:	bf4c      	ite	mi
 8022814:	2301      	movmi	r3, #1
 8022816:	2300      	movpl	r3, #0
 8022818:	b2db      	uxtb	r3, r3
 802281a:	2b00      	cmp	r3, #0
 802281c:	d021      	beq.n	8022862 <_ZN6Logger7LoggingEh+0x3aa>
    {
        accel_straight_cnt++;
 802281e:	4b2e      	ldr	r3, [pc, #184]	; (80228d8 <_ZN6Logger7LoggingEh+0x420>)
 8022820:	881b      	ldrh	r3, [r3, #0]
 8022822:	3301      	adds	r3, #1
 8022824:	b29a      	uxth	r2, r3
 8022826:	4b2c      	ldr	r3, [pc, #176]	; (80228d8 <_ZN6Logger7LoggingEh+0x420>)
 8022828:	801a      	strh	r2, [r3, #0]
        if(accel_straight_cnt >= CNT_OF_ACCEL_STEP_UP && accel_step < NUM_OF_ACCEL_STEP)
 802282a:	4b2b      	ldr	r3, [pc, #172]	; (80228d8 <_ZN6Logger7LoggingEh+0x420>)
 802282c:	881b      	ldrh	r3, [r3, #0]
 802282e:	2b07      	cmp	r3, #7
 8022830:	d947      	bls.n	80228c2 <_ZN6Logger7LoggingEh+0x40a>
 8022832:	4b2a      	ldr	r3, [pc, #168]	; (80228dc <_ZN6Logger7LoggingEh+0x424>)
 8022834:	781b      	ldrb	r3, [r3, #0]
 8022836:	2b04      	cmp	r3, #4
 8022838:	d843      	bhi.n	80228c2 <_ZN6Logger7LoggingEh+0x40a>
        {
            accel_step++;
 802283a:	4b28      	ldr	r3, [pc, #160]	; (80228dc <_ZN6Logger7LoggingEh+0x424>)
 802283c:	781b      	ldrb	r3, [r3, #0]
 802283e:	3301      	adds	r3, #1
 8022840:	b2da      	uxtb	r2, r3
 8022842:	4b26      	ldr	r3, [pc, #152]	; (80228dc <_ZN6Logger7LoggingEh+0x424>)
 8022844:	701a      	strb	r2, [r3, #0]
            accel_address_[accel_step-1] = correction_address - CNT_OF_ACCEL_STEP_UP;
 8022846:	4b25      	ldr	r3, [pc, #148]	; (80228dc <_ZN6Logger7LoggingEh+0x424>)
 8022848:	781b      	ldrb	r3, [r3, #0]
 802284a:	1e5a      	subs	r2, r3, #1
 802284c:	8a3b      	ldrh	r3, [r7, #16]
 802284e:	3b08      	subs	r3, #8
 8022850:	b299      	uxth	r1, r3
 8022852:	687b      	ldr	r3, [r7, #4]
 8022854:	3264      	adds	r2, #100	; 0x64
 8022856:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            accel_straight_cnt = 0;
 802285a:	4b1f      	ldr	r3, [pc, #124]	; (80228d8 <_ZN6Logger7LoggingEh+0x420>)
 802285c:	2200      	movs	r2, #0
 802285e:	801a      	strh	r2, [r3, #0]
 8022860:	e02f      	b.n	80228c2 <_ZN6Logger7LoggingEh+0x40a>
        }
    }
    else if(accel_step != 0)
 8022862:	4b1e      	ldr	r3, [pc, #120]	; (80228dc <_ZN6Logger7LoggingEh+0x424>)
 8022864:	781b      	ldrb	r3, [r3, #0]
 8022866:	2b00      	cmp	r3, #0
 8022868:	d028      	beq.n	80228bc <_ZN6Logger7LoggingEh+0x404>
    {
        for(int i = 1; i <= accel_step; i++)
 802286a:	2301      	movs	r3, #1
 802286c:	62bb      	str	r3, [r7, #40]	; 0x28
 802286e:	4b1b      	ldr	r3, [pc, #108]	; (80228dc <_ZN6Logger7LoggingEh+0x424>)
 8022870:	781b      	ldrb	r3, [r3, #0]
 8022872:	461a      	mov	r2, r3
 8022874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022876:	4293      	cmp	r3, r2
 8022878:	dc14      	bgt.n	80228a4 <_ZN6Logger7LoggingEh+0x3ec>
        {
            decel_address_[i-1] = (correction_address-1) - (DIFF_NEXT_ACCEL_STEP * i);
 802287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802287c:	b29b      	uxth	r3, r3
 802287e:	009b      	lsls	r3, r3, #2
 8022880:	b29b      	uxth	r3, r3
 8022882:	8a3a      	ldrh	r2, [r7, #16]
 8022884:	1ad3      	subs	r3, r2, r3
 8022886:	b29a      	uxth	r2, r3
 8022888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802288a:	3b01      	subs	r3, #1
 802288c:	3a01      	subs	r2, #1
 802288e:	b291      	uxth	r1, r2
 8022890:	687a      	ldr	r2, [r7, #4]
 8022892:	3368      	adds	r3, #104	; 0x68
 8022894:	005b      	lsls	r3, r3, #1
 8022896:	4413      	add	r3, r2
 8022898:	460a      	mov	r2, r1
 802289a:	805a      	strh	r2, [r3, #2]
        for(int i = 1; i <= accel_step; i++)
 802289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802289e:	3301      	adds	r3, #1
 80228a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80228a2:	e7e4      	b.n	802286e <_ZN6Logger7LoggingEh+0x3b6>
        }
        accel_position_write_enable_ = accel_step;
 80228a4:	4b0d      	ldr	r3, [pc, #52]	; (80228dc <_ZN6Logger7LoggingEh+0x424>)
 80228a6:	781a      	ldrb	r2, [r3, #0]
 80228a8:	687b      	ldr	r3, [r7, #4]
 80228aa:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        accel_step = 0;
 80228ae:	4b0b      	ldr	r3, [pc, #44]	; (80228dc <_ZN6Logger7LoggingEh+0x424>)
 80228b0:	2200      	movs	r2, #0
 80228b2:	701a      	strb	r2, [r3, #0]
        accel_straight_cnt = 0;
 80228b4:	4b08      	ldr	r3, [pc, #32]	; (80228d8 <_ZN6Logger7LoggingEh+0x420>)
 80228b6:	2200      	movs	r2, #0
 80228b8:	801a      	strh	r2, [r3, #0]
 80228ba:	e002      	b.n	80228c2 <_ZN6Logger7LoggingEh+0x40a>
    }
    else accel_straight_cnt = 0;
 80228bc:	4b06      	ldr	r3, [pc, #24]	; (80228d8 <_ZN6Logger7LoggingEh+0x420>)
 80228be:	2200      	movs	r2, #0
 80228c0:	801a      	strh	r2, [r3, #0]

    now_address++;
 80228c2:	4b07      	ldr	r3, [pc, #28]	; (80228e0 <_ZN6Logger7LoggingEh+0x428>)
 80228c4:	881b      	ldrh	r3, [r3, #0]
 80228c6:	3301      	adds	r3, #1
 80228c8:	b29a      	uxth	r2, r3
 80228ca:	4b05      	ldr	r3, [pc, #20]	; (80228e0 <_ZN6Logger7LoggingEh+0x428>)
 80228cc:	801a      	strh	r2, [r3, #0]
 80228ce:	e000      	b.n	80228d2 <_ZN6Logger7LoggingEh+0x41a>
    if(distance < LOGGING_CONST_DISTANCE) return;
 80228d0:	bf00      	nop
}
 80228d2:	3730      	adds	r7, #48	; 0x30
 80228d4:	46bd      	mov	sp, r7
 80228d6:	bdb0      	pop	{r4, r5, r7, pc}
 80228d8:	20000094 	.word	0x20000094
 80228dc:	20000096 	.word	0x20000096
 80228e0:	20000080 	.word	0x20000080

080228e4 <_ZN6Logger16StorePeriodicLogEv>:

uint8_t Logger::StorePeriodicLog()
{
 80228e4:	b580      	push	{r7, lr}
 80228e6:	b084      	sub	sp, #16
 80228e8:	af00      	add	r7, sp, #0
 80228ea:	6078      	str	r0, [r7, #4]
    if(periodic_write_enable_ == 0) return 0;
 80228ec:	687b      	ldr	r3, [r7, #4]
 80228ee:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80228f2:	2b00      	cmp	r3, #0
 80228f4:	d101      	bne.n	80228fa <_ZN6Logger16StorePeriodicLogEv+0x16>
 80228f6:	2300      	movs	r3, #0
 80228f8:	e087      	b.n	8022a0a <_ZN6Logger16StorePeriodicLogEv+0x126>
    else periodic_write_enable_ = 0;
 80228fa:	687b      	ldr	r3, [r7, #4]
 80228fc:	2200      	movs	r2, #0
 80228fe:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    static uint32_t address_a = HEAD_ADDRESS_BLOCK_A;
    static uint32_t address_b = HEAD_ADDRESS_BLOCK_B;
    static uint32_t address_c = HEAD_ADDRESS_BLOCK_C;
    uint8_t result = 0;
 8022902:	2300      	movs	r3, #0
 8022904:	73fb      	strb	r3, [r7, #15]

    if(!flash.CheckBlankWord(address_a, NUM_OF_LOG))     return 0x10;
 8022906:	687b      	ldr	r3, [r7, #4]
 8022908:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 802290c:	4b41      	ldr	r3, [pc, #260]	; (8022a14 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 802290e:	681b      	ldr	r3, [r3, #0]
 8022910:	220a      	movs	r2, #10
 8022912:	4619      	mov	r1, r3
 8022914:	f7fe fcb8 	bl	8021288 <_ZN5Flash14CheckBlankWordEmm>
 8022918:	4603      	mov	r3, r0
 802291a:	f083 0301 	eor.w	r3, r3, #1
 802291e:	b2db      	uxtb	r3, r3
 8022920:	2b00      	cmp	r3, #0
 8022922:	d001      	beq.n	8022928 <_ZN6Logger16StorePeriodicLogEv+0x44>
 8022924:	2310      	movs	r3, #16
 8022926:	e070      	b.n	8022a0a <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankWord(address_b, NUM_OF_LOG))     return 0x20;
 8022928:	687b      	ldr	r3, [r7, #4]
 802292a:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 802292e:	4b3a      	ldr	r3, [pc, #232]	; (8022a18 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022930:	681b      	ldr	r3, [r3, #0]
 8022932:	220a      	movs	r2, #10
 8022934:	4619      	mov	r1, r3
 8022936:	f7fe fca7 	bl	8021288 <_ZN5Flash14CheckBlankWordEmm>
 802293a:	4603      	mov	r3, r0
 802293c:	f083 0301 	eor.w	r3, r3, #1
 8022940:	b2db      	uxtb	r3, r3
 8022942:	2b00      	cmp	r3, #0
 8022944:	d001      	beq.n	802294a <_ZN6Logger16StorePeriodicLogEv+0x66>
 8022946:	2320      	movs	r3, #32
 8022948:	e05f      	b.n	8022a0a <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankHalfword(address_c, NUM_OF_LOG)) return 0x40;
 802294a:	687b      	ldr	r3, [r7, #4]
 802294c:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022950:	4b32      	ldr	r3, [pc, #200]	; (8022a1c <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022952:	681b      	ldr	r3, [r3, #0]
 8022954:	220a      	movs	r2, #10
 8022956:	4619      	mov	r1, r3
 8022958:	f7fe fc42 	bl	80211e0 <_ZN5Flash18CheckBlankHalfwordEmm>
 802295c:	4603      	mov	r3, r0
 802295e:	f083 0301 	eor.w	r3, r3, #1
 8022962:	b2db      	uxtb	r3, r3
 8022964:	2b00      	cmp	r3, #0
 8022966:	d001      	beq.n	802296c <_ZN6Logger16StorePeriodicLogEv+0x88>
 8022968:	2340      	movs	r3, #64	; 0x40
 802296a:	e04e      	b.n	8022a0a <_ZN6Logger16StorePeriodicLogEv+0x126>

    if(!flash.StoreFloat(address_a, const_distance_copy_, NUM_OF_LOG)) result |= 0x01;
 802296c:	687b      	ldr	r3, [r7, #4]
 802296e:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022972:	4b28      	ldr	r3, [pc, #160]	; (8022a14 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 8022974:	6819      	ldr	r1, [r3, #0]
 8022976:	687b      	ldr	r3, [r7, #4]
 8022978:	f103 0264 	add.w	r2, r3, #100	; 0x64
 802297c:	230a      	movs	r3, #10
 802297e:	f7fe fb9a 	bl	80210b6 <_ZN5Flash10StoreFloatEmPfm>
 8022982:	4603      	mov	r3, r0
 8022984:	f083 0301 	eor.w	r3, r3, #1
 8022988:	b2db      	uxtb	r3, r3
 802298a:	2b00      	cmp	r3, #0
 802298c:	d003      	beq.n	8022996 <_ZN6Logger16StorePeriodicLogEv+0xb2>
 802298e:	7bfb      	ldrb	r3, [r7, #15]
 8022990:	f043 0301 	orr.w	r3, r3, #1
 8022994:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreFloat(address_b, radian_copy_, NUM_OF_LOG))         result |= 0x02;
 8022996:	687b      	ldr	r3, [r7, #4]
 8022998:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 802299c:	4b1e      	ldr	r3, [pc, #120]	; (8022a18 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 802299e:	6819      	ldr	r1, [r3, #0]
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 80229a6:	230a      	movs	r3, #10
 80229a8:	f7fe fb85 	bl	80210b6 <_ZN5Flash10StoreFloatEmPfm>
 80229ac:	4603      	mov	r3, r0
 80229ae:	f083 0301 	eor.w	r3, r3, #1
 80229b2:	b2db      	uxtb	r3, r3
 80229b4:	2b00      	cmp	r3, #0
 80229b6:	d003      	beq.n	80229c0 <_ZN6Logger16StorePeriodicLogEv+0xdc>
 80229b8:	7bfb      	ldrb	r3, [r7, #15]
 80229ba:	f043 0302 	orr.w	r3, r3, #2
 80229be:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreUint16(address_c, various_copy_, NUM_OF_LOG))       result |= 0x04;
 80229c0:	687b      	ldr	r3, [r7, #4]
 80229c2:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80229c6:	4b15      	ldr	r3, [pc, #84]	; (8022a1c <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80229c8:	6819      	ldr	r1, [r3, #0]
 80229ca:	687b      	ldr	r3, [r7, #4]
 80229cc:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 80229d0:	230a      	movs	r3, #10
 80229d2:	f7fe fb05 	bl	8020fe0 <_ZN5Flash11StoreUint16EmPtm>
 80229d6:	4603      	mov	r3, r0
 80229d8:	f083 0301 	eor.w	r3, r3, #1
 80229dc:	b2db      	uxtb	r3, r3
 80229de:	2b00      	cmp	r3, #0
 80229e0:	d003      	beq.n	80229ea <_ZN6Logger16StorePeriodicLogEv+0x106>
 80229e2:	7bfb      	ldrb	r3, [r7, #15]
 80229e4:	f043 0304 	orr.w	r3, r3, #4
 80229e8:	73fb      	strb	r3, [r7, #15]

    address_a += NUM_OF_LOG * 4;
 80229ea:	4b0a      	ldr	r3, [pc, #40]	; (8022a14 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80229ec:	681b      	ldr	r3, [r3, #0]
 80229ee:	3328      	adds	r3, #40	; 0x28
 80229f0:	4a08      	ldr	r2, [pc, #32]	; (8022a14 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80229f2:	6013      	str	r3, [r2, #0]
    address_b += NUM_OF_LOG * 4;
 80229f4:	4b08      	ldr	r3, [pc, #32]	; (8022a18 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80229f6:	681b      	ldr	r3, [r3, #0]
 80229f8:	3328      	adds	r3, #40	; 0x28
 80229fa:	4a07      	ldr	r2, [pc, #28]	; (8022a18 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80229fc:	6013      	str	r3, [r2, #0]
    address_c += NUM_OF_LOG * 2;
 80229fe:	4b07      	ldr	r3, [pc, #28]	; (8022a1c <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022a00:	681b      	ldr	r3, [r3, #0]
 8022a02:	3314      	adds	r3, #20
 8022a04:	4a05      	ldr	r2, [pc, #20]	; (8022a1c <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022a06:	6013      	str	r3, [r2, #0]

    return result;
 8022a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8022a0a:	4618      	mov	r0, r3
 8022a0c:	3710      	adds	r7, #16
 8022a0e:	46bd      	mov	sp, r7
 8022a10:	bd80      	pop	{r7, pc}
 8022a12:	bf00      	nop
 8022a14:	20000000 	.word	0x20000000
 8022a18:	20000004 	.word	0x20000004
 8022a1c:	20000008 	.word	0x20000008

08022a20 <_ZN6Logger21StoreAccelPositionLogEv>:

uint8_t Logger::StoreAccelPositionLog()
{
 8022a20:	b580      	push	{r7, lr}
 8022a22:	b086      	sub	sp, #24
 8022a24:	af00      	add	r7, sp, #0
 8022a26:	6078      	str	r0, [r7, #4]
    uint8_t accel_step = accel_position_write_enable_;
 8022a28:	687b      	ldr	r3, [r7, #4]
 8022a2a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8022a2e:	75bb      	strb	r3, [r7, #22]
    if(accel_step == 0) return 0;
 8022a30:	7dbb      	ldrb	r3, [r7, #22]
 8022a32:	2b00      	cmp	r3, #0
 8022a34:	d101      	bne.n	8022a3a <_ZN6Logger21StoreAccelPositionLogEv+0x1a>
 8022a36:	2300      	movs	r3, #0
 8022a38:	e079      	b.n	8022b2e <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    else accel_position_write_enable_ = 0;
 8022a3a:	687b      	ldr	r3, [r7, #4]
 8022a3c:	2200      	movs	r2, #0
 8022a3e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    uint32_t address;
    uint8_t accel = 0; // step 0x01, 0x02, 0x03, 0x04, 0x05.
 8022a42:	2300      	movs	r3, #0
 8022a44:	73fb      	strb	r3, [r7, #15]
    uint8_t decel = 0; // step 0x10, 0x20, 0x30, 0x40, 0x50.
 8022a46:	2300      	movs	r3, #0
 8022a48:	73bb      	strb	r3, [r7, #14]
    uint8_t i;

    for(i = 1; i <= accel_step; i++)
 8022a4a:	2301      	movs	r3, #1
 8022a4c:	75fb      	strb	r3, [r7, #23]
 8022a4e:	7dfa      	ldrb	r2, [r7, #23]
 8022a50:	7dbb      	ldrb	r3, [r7, #22]
 8022a52:	429a      	cmp	r2, r3
 8022a54:	d830      	bhi.n	8022ab8 <_ZN6Logger21StoreAccelPositionLogEv+0x98>
    {
        accel = i;
 8022a56:	7dfb      	ldrb	r3, [r7, #23]
 8022a58:	73fb      	strb	r3, [r7, #15]
        address = HEAD_ADDRESS_BLOCK_D + accel_address_[i-1];
 8022a5a:	7dfb      	ldrb	r3, [r7, #23]
 8022a5c:	1e5a      	subs	r2, r3, #1
 8022a5e:	687b      	ldr	r3, [r7, #4]
 8022a60:	3264      	adds	r2, #100	; 0x64
 8022a62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022a66:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022a6a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022a6e:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x10;
 8022a70:	687b      	ldr	r3, [r7, #4]
 8022a72:	33f4      	adds	r3, #244	; 0xf4
 8022a74:	2201      	movs	r2, #1
 8022a76:	6939      	ldr	r1, [r7, #16]
 8022a78:	4618      	mov	r0, r3
 8022a7a:	f7fe fb64 	bl	8021146 <_ZN5Flash14CheckBlankByteEmm>
 8022a7e:	4603      	mov	r3, r0
 8022a80:	f083 0301 	eor.w	r3, r3, #1
 8022a84:	b2db      	uxtb	r3, r3
 8022a86:	2b00      	cmp	r3, #0
 8022a88:	d001      	beq.n	8022a8e <_ZN6Logger21StoreAccelPositionLogEv+0x6e>
 8022a8a:	2310      	movs	r3, #16
 8022a8c:	e04f      	b.n	8022b2e <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &accel, 1)) return 0x20;
 8022a8e:	687b      	ldr	r3, [r7, #4]
 8022a90:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022a94:	f107 020f 	add.w	r2, r7, #15
 8022a98:	2301      	movs	r3, #1
 8022a9a:	6939      	ldr	r1, [r7, #16]
 8022a9c:	f7fe fa6c 	bl	8020f78 <_ZN5Flash10StoreUint8EmPhm>
 8022aa0:	4603      	mov	r3, r0
 8022aa2:	f083 0301 	eor.w	r3, r3, #1
 8022aa6:	b2db      	uxtb	r3, r3
 8022aa8:	2b00      	cmp	r3, #0
 8022aaa:	d001      	beq.n	8022ab0 <_ZN6Logger21StoreAccelPositionLogEv+0x90>
 8022aac:	2320      	movs	r3, #32
 8022aae:	e03e      	b.n	8022b2e <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 8022ab0:	7dfb      	ldrb	r3, [r7, #23]
 8022ab2:	3301      	adds	r3, #1
 8022ab4:	75fb      	strb	r3, [r7, #23]
 8022ab6:	e7ca      	b.n	8022a4e <_ZN6Logger21StoreAccelPositionLogEv+0x2e>
    }
    for(i = 1; i <= accel_step; i++)
 8022ab8:	2301      	movs	r3, #1
 8022aba:	75fb      	strb	r3, [r7, #23]
 8022abc:	7dfa      	ldrb	r2, [r7, #23]
 8022abe:	7dbb      	ldrb	r3, [r7, #22]
 8022ac0:	429a      	cmp	r2, r3
 8022ac2:	d833      	bhi.n	8022b2c <_ZN6Logger21StoreAccelPositionLogEv+0x10c>
    {
        decel = i << 4;
 8022ac4:	7dfb      	ldrb	r3, [r7, #23]
 8022ac6:	011b      	lsls	r3, r3, #4
 8022ac8:	b2db      	uxtb	r3, r3
 8022aca:	73bb      	strb	r3, [r7, #14]
        address = HEAD_ADDRESS_BLOCK_D + decel_address_[i-1];
 8022acc:	7dfb      	ldrb	r3, [r7, #23]
 8022ace:	3b01      	subs	r3, #1
 8022ad0:	687a      	ldr	r2, [r7, #4]
 8022ad2:	3368      	adds	r3, #104	; 0x68
 8022ad4:	005b      	lsls	r3, r3, #1
 8022ad6:	4413      	add	r3, r2
 8022ad8:	885b      	ldrh	r3, [r3, #2]
 8022ada:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022ade:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022ae2:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x30;
 8022ae4:	687b      	ldr	r3, [r7, #4]
 8022ae6:	33f4      	adds	r3, #244	; 0xf4
 8022ae8:	2201      	movs	r2, #1
 8022aea:	6939      	ldr	r1, [r7, #16]
 8022aec:	4618      	mov	r0, r3
 8022aee:	f7fe fb2a 	bl	8021146 <_ZN5Flash14CheckBlankByteEmm>
 8022af2:	4603      	mov	r3, r0
 8022af4:	f083 0301 	eor.w	r3, r3, #1
 8022af8:	b2db      	uxtb	r3, r3
 8022afa:	2b00      	cmp	r3, #0
 8022afc:	d001      	beq.n	8022b02 <_ZN6Logger21StoreAccelPositionLogEv+0xe2>
 8022afe:	2330      	movs	r3, #48	; 0x30
 8022b00:	e015      	b.n	8022b2e <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &decel, 1)) return 0x40;
 8022b02:	687b      	ldr	r3, [r7, #4]
 8022b04:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022b08:	f107 020e 	add.w	r2, r7, #14
 8022b0c:	2301      	movs	r3, #1
 8022b0e:	6939      	ldr	r1, [r7, #16]
 8022b10:	f7fe fa32 	bl	8020f78 <_ZN5Flash10StoreUint8EmPhm>
 8022b14:	4603      	mov	r3, r0
 8022b16:	f083 0301 	eor.w	r3, r3, #1
 8022b1a:	b2db      	uxtb	r3, r3
 8022b1c:	2b00      	cmp	r3, #0
 8022b1e:	d001      	beq.n	8022b24 <_ZN6Logger21StoreAccelPositionLogEv+0x104>
 8022b20:	2340      	movs	r3, #64	; 0x40
 8022b22:	e004      	b.n	8022b2e <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 8022b24:	7dfb      	ldrb	r3, [r7, #23]
 8022b26:	3301      	adds	r3, #1
 8022b28:	75fb      	strb	r3, [r7, #23]
 8022b2a:	e7c7      	b.n	8022abc <_ZN6Logger21StoreAccelPositionLogEv+0x9c>
    }
    
    return 0;
 8022b2c:	2300      	movs	r3, #0
}
 8022b2e:	4618      	mov	r0, r3
 8022b30:	3718      	adds	r7, #24
 8022b32:	46bd      	mov	sp, r7
 8022b34:	bd80      	pop	{r7, pc}
	...

08022b38 <_ZN6Logger7LoadingEv>:

void Logger::Loading()
{
 8022b38:	b580      	push	{r7, lr}
 8022b3a:	b08c      	sub	sp, #48	; 0x30
 8022b3c:	af00      	add	r7, sp, #0
 8022b3e:	6078      	str	r0, [r7, #4]
    float distance = encoder.GetDistanceStack();
 8022b40:	687b      	ldr	r3, [r7, #4]
 8022b42:	33e8      	adds	r3, #232	; 0xe8
 8022b44:	4618      	mov	r0, r3
 8022b46:	f7fe f9b4 	bl	8020eb2 <_ZN7Encoder16GetDistanceStackEv>
 8022b4a:	ed87 0a08 	vstr	s0, [r7, #32]

    if(distance < LOGGING_CONST_DISTANCE) return;
 8022b4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8022b52:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022b56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b5e:	f100 8299 	bmi.w	8023094 <_ZN6Logger7LoadingEv+0x55c>
    encoder.ResetDistanceStack();
 8022b62:	687b      	ldr	r3, [r7, #4]
 8022b64:	33e8      	adds	r3, #232	; 0xe8
 8022b66:	4618      	mov	r0, r3
 8022b68:	f7fe f986 	bl	8020e78 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0;

    /* Load curvature radius */
    float log_distance = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_A));
 8022b6c:	4bad      	ldr	r3, [pc, #692]	; (8022e24 <_ZN6Logger7LoadingEv+0x2ec>)
 8022b6e:	881b      	ldrh	r3, [r3, #0]
 8022b70:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022b74:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8022b78:	681b      	ldr	r3, [r3, #0]
 8022b7a:	61fb      	str	r3, [r7, #28]
    float log_radian = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_B));
 8022b7c:	4ba9      	ldr	r3, [pc, #676]	; (8022e24 <_ZN6Logger7LoadingEv+0x2ec>)
 8022b7e:	881b      	ldrh	r3, [r3, #0]
 8022b80:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022b84:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8022b88:	681b      	ldr	r3, [r3, #0]
 8022b8a:	61bb      	str	r3, [r7, #24]
    float radius = log_distance / log_radian;
 8022b8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8022b90:	ed97 7a06 	vldr	s14, [r7, #24]
 8022b94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022b98:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Load correction position */
    uint16_t log_various = *(reinterpret_cast<uint16_t*>(now_address + HEAD_ADDRESS_BLOCK_C));
 8022b9c:	4ba1      	ldr	r3, [pc, #644]	; (8022e24 <_ZN6Logger7LoadingEv+0x2ec>)
 8022b9e:	881b      	ldrh	r3, [r3, #0]
 8022ba0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022ba4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8022ba8:	881b      	ldrh	r3, [r3, #0]
 8022baa:	827b      	strh	r3, [r7, #18]
    bool log_corner = false, log_corner_pass = false;
 8022bac:	2300      	movs	r3, #0
 8022bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8022bb2:	2300      	movs	r3, #0
 8022bb4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    bool log_cross = false, log_cross_pass = false;
 8022bb8:	2300      	movs	r3, #0
 8022bba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8022bbe:	2300      	movs	r3, #0
 8022bc0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    if((log_various & 0x0002) == 0x0002) log_corner = true;
 8022bc4:	8a7b      	ldrh	r3, [r7, #18]
 8022bc6:	f003 0302 	and.w	r3, r3, #2
 8022bca:	2b00      	cmp	r3, #0
 8022bcc:	d002      	beq.n	8022bd4 <_ZN6Logger7LoadingEv+0x9c>
 8022bce:	2301      	movs	r3, #1
 8022bd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if((log_various & 0x0001) == 0x0001) log_cross = true;
 8022bd4:	8a7b      	ldrh	r3, [r7, #18]
 8022bd6:	f003 0301 	and.w	r3, r3, #1
 8022bda:	2b00      	cmp	r3, #0
 8022bdc:	d002      	beq.n	8022be4 <_ZN6Logger7LoadingEv+0xac>
 8022bde:	2301      	movs	r3, #1
 8022be0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    /* Get correction position */
    bool run_corner = false, run_corner_pass = false;
 8022be4:	2300      	movs	r3, #0
 8022be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022bea:	2300      	movs	r3, #0
 8022bec:	747b      	strb	r3, [r7, #17]
    bool run_cross = false, run_cross_pass = false;
 8022bee:	2300      	movs	r3, #0
 8022bf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8022bf4:	2300      	movs	r3, #0
 8022bf6:	743b      	strb	r3, [r7, #16]
    uint8_t corner = side_sensor.GetCornerMarkerCount();
 8022bf8:	687b      	ldr	r3, [r7, #4]
 8022bfa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022bfe:	4618      	mov	r0, r3
 8022c00:	f001 fd9a 	bl	8024738 <_ZN10SideSensor20GetCornerMarkerCountEv>
 8022c04:	4603      	mov	r3, r0
 8022c06:	73fb      	strb	r3, [r7, #15]
    uint8_t cross = side_sensor.GetCrossLineCount();
 8022c08:	687b      	ldr	r3, [r7, #4]
 8022c0a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022c0e:	4618      	mov	r0, r3
 8022c10:	f001 fd9e 	bl	8024750 <_ZN10SideSensor17GetCrossLineCountEv>
 8022c14:	4603      	mov	r3, r0
 8022c16:	73bb      	strb	r3, [r7, #14]
    static uint8_t pre_corner = corner;
 8022c18:	4b83      	ldr	r3, [pc, #524]	; (8022e28 <_ZN6Logger7LoadingEv+0x2f0>)
 8022c1a:	781b      	ldrb	r3, [r3, #0]
 8022c1c:	f3bf 8f5b 	dmb	ish
 8022c20:	b2db      	uxtb	r3, r3
 8022c22:	f003 0301 	and.w	r3, r3, #1
 8022c26:	2b00      	cmp	r3, #0
 8022c28:	bf0c      	ite	eq
 8022c2a:	2301      	moveq	r3, #1
 8022c2c:	2300      	movne	r3, #0
 8022c2e:	b2db      	uxtb	r3, r3
 8022c30:	2b00      	cmp	r3, #0
 8022c32:	d010      	beq.n	8022c56 <_ZN6Logger7LoadingEv+0x11e>
 8022c34:	487c      	ldr	r0, [pc, #496]	; (8022e28 <_ZN6Logger7LoadingEv+0x2f0>)
 8022c36:	f007 fda3 	bl	802a780 <__cxa_guard_acquire>
 8022c3a:	4603      	mov	r3, r0
 8022c3c:	2b00      	cmp	r3, #0
 8022c3e:	bf14      	ite	ne
 8022c40:	2301      	movne	r3, #1
 8022c42:	2300      	moveq	r3, #0
 8022c44:	b2db      	uxtb	r3, r3
 8022c46:	2b00      	cmp	r3, #0
 8022c48:	d005      	beq.n	8022c56 <_ZN6Logger7LoadingEv+0x11e>
 8022c4a:	4a78      	ldr	r2, [pc, #480]	; (8022e2c <_ZN6Logger7LoadingEv+0x2f4>)
 8022c4c:	7bfb      	ldrb	r3, [r7, #15]
 8022c4e:	7013      	strb	r3, [r2, #0]
 8022c50:	4875      	ldr	r0, [pc, #468]	; (8022e28 <_ZN6Logger7LoadingEv+0x2f0>)
 8022c52:	f007 fda1 	bl	802a798 <__cxa_guard_release>
    static uint8_t pre_cross = cross;
 8022c56:	4b76      	ldr	r3, [pc, #472]	; (8022e30 <_ZN6Logger7LoadingEv+0x2f8>)
 8022c58:	781b      	ldrb	r3, [r3, #0]
 8022c5a:	f3bf 8f5b 	dmb	ish
 8022c5e:	b2db      	uxtb	r3, r3
 8022c60:	f003 0301 	and.w	r3, r3, #1
 8022c64:	2b00      	cmp	r3, #0
 8022c66:	bf0c      	ite	eq
 8022c68:	2301      	moveq	r3, #1
 8022c6a:	2300      	movne	r3, #0
 8022c6c:	b2db      	uxtb	r3, r3
 8022c6e:	2b00      	cmp	r3, #0
 8022c70:	d010      	beq.n	8022c94 <_ZN6Logger7LoadingEv+0x15c>
 8022c72:	486f      	ldr	r0, [pc, #444]	; (8022e30 <_ZN6Logger7LoadingEv+0x2f8>)
 8022c74:	f007 fd84 	bl	802a780 <__cxa_guard_acquire>
 8022c78:	4603      	mov	r3, r0
 8022c7a:	2b00      	cmp	r3, #0
 8022c7c:	bf14      	ite	ne
 8022c7e:	2301      	movne	r3, #1
 8022c80:	2300      	moveq	r3, #0
 8022c82:	b2db      	uxtb	r3, r3
 8022c84:	2b00      	cmp	r3, #0
 8022c86:	d005      	beq.n	8022c94 <_ZN6Logger7LoadingEv+0x15c>
 8022c88:	4a6a      	ldr	r2, [pc, #424]	; (8022e34 <_ZN6Logger7LoadingEv+0x2fc>)
 8022c8a:	7bbb      	ldrb	r3, [r7, #14]
 8022c8c:	7013      	strb	r3, [r2, #0]
 8022c8e:	4868      	ldr	r0, [pc, #416]	; (8022e30 <_ZN6Logger7LoadingEv+0x2f8>)
 8022c90:	f007 fd82 	bl	802a798 <__cxa_guard_release>
    static uint8_t straight_cnt = 0;
    bool straight = false;
 8022c94:	2300      	movs	r3, #0
 8022c96:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA){
 8022c9a:	687b      	ldr	r3, [r7, #4]
 8022c9c:	33e8      	adds	r3, #232	; 0xe8
 8022c9e:	4618      	mov	r0, r3
 8022ca0:	f7fe f916 	bl	8020ed0 <_ZN7Encoder15AngularVelocityEv>
 8022ca4:	eef0 7a40 	vmov.f32	s15, s0
 8022ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8022cac:	f7ff fb6c 	bl	8022388 <_ZSt4fabsf>
 8022cb0:	eeb0 7a40 	vmov.f32	s14, s0
 8022cb4:	eddf 7a60 	vldr	s15, [pc, #384]	; 8022e38 <_ZN6Logger7LoadingEv+0x300>
 8022cb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022cc0:	bf4c      	ite	mi
 8022cc2:	2301      	movmi	r3, #1
 8022cc4:	2300      	movpl	r3, #0
 8022cc6:	b2db      	uxtb	r3, r3
 8022cc8:	2b00      	cmp	r3, #0
 8022cca:	d00e      	beq.n	8022cea <_ZN6Logger7LoadingEv+0x1b2>
        if(straight_cnt <= STRAIGHT_JUDGE_COUNT) straight_cnt++;
 8022ccc:	4b5b      	ldr	r3, [pc, #364]	; (8022e3c <_ZN6Logger7LoadingEv+0x304>)
 8022cce:	781b      	ldrb	r3, [r3, #0]
 8022cd0:	2b05      	cmp	r3, #5
 8022cd2:	d806      	bhi.n	8022ce2 <_ZN6Logger7LoadingEv+0x1aa>
 8022cd4:	4b59      	ldr	r3, [pc, #356]	; (8022e3c <_ZN6Logger7LoadingEv+0x304>)
 8022cd6:	781b      	ldrb	r3, [r3, #0]
 8022cd8:	3301      	adds	r3, #1
 8022cda:	b2da      	uxtb	r2, r3
 8022cdc:	4b57      	ldr	r3, [pc, #348]	; (8022e3c <_ZN6Logger7LoadingEv+0x304>)
 8022cde:	701a      	strb	r2, [r3, #0]
 8022ce0:	e006      	b.n	8022cf0 <_ZN6Logger7LoadingEv+0x1b8>
        else straight = true;
 8022ce2:	2301      	movs	r3, #1
 8022ce4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8022ce8:	e002      	b.n	8022cf0 <_ZN6Logger7LoadingEv+0x1b8>
    }else straight_cnt = 0;
 8022cea:	4b54      	ldr	r3, [pc, #336]	; (8022e3c <_ZN6Logger7LoadingEv+0x304>)
 8022cec:	2200      	movs	r2, #0
 8022cee:	701a      	strb	r2, [r3, #0]
    if(corner > pre_corner && straight) run_corner = true;
 8022cf0:	4b4e      	ldr	r3, [pc, #312]	; (8022e2c <_ZN6Logger7LoadingEv+0x2f4>)
 8022cf2:	781b      	ldrb	r3, [r3, #0]
 8022cf4:	7bfa      	ldrb	r2, [r7, #15]
 8022cf6:	429a      	cmp	r2, r3
 8022cf8:	d906      	bls.n	8022d08 <_ZN6Logger7LoadingEv+0x1d0>
 8022cfa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8022cfe:	2b00      	cmp	r3, #0
 8022d00:	d002      	beq.n	8022d08 <_ZN6Logger7LoadingEv+0x1d0>
 8022d02:	2301      	movs	r3, #1
 8022d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if(cross > pre_cross) run_cross = true;
 8022d08:	4b4a      	ldr	r3, [pc, #296]	; (8022e34 <_ZN6Logger7LoadingEv+0x2fc>)
 8022d0a:	781b      	ldrb	r3, [r3, #0]
 8022d0c:	7bba      	ldrb	r2, [r7, #14]
 8022d0e:	429a      	cmp	r2, r3
 8022d10:	d902      	bls.n	8022d18 <_ZN6Logger7LoadingEv+0x1e0>
 8022d12:	2301      	movs	r3, #1
 8022d14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    pre_corner = corner;
 8022d18:	4a44      	ldr	r2, [pc, #272]	; (8022e2c <_ZN6Logger7LoadingEv+0x2f4>)
 8022d1a:	7bfb      	ldrb	r3, [r7, #15]
 8022d1c:	7013      	strb	r3, [r2, #0]
    pre_cross = cross;
 8022d1e:	4a45      	ldr	r2, [pc, #276]	; (8022e34 <_ZN6Logger7LoadingEv+0x2fc>)
 8022d20:	7bbb      	ldrb	r3, [r7, #14]
 8022d22:	7013      	strb	r3, [r2, #0]

    /* Position correction at corner marker */
    static uint16_t log_corner_address, run_corner_address;
    static uint8_t log_corner_wait = 0, run_corner_wait = 0;
    if(log_corner == true){
 8022d24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8022d28:	2b00      	cmp	r3, #0
 8022d2a:	d01f      	beq.n	8022d6c <_ZN6Logger7LoadingEv+0x234>
        if(run_corner_pass == true){
 8022d2c:	7c7b      	ldrb	r3, [r7, #17]
 8022d2e:	2b00      	cmp	r3, #0
 8022d30:	d011      	beq.n	8022d56 <_ZN6Logger7LoadingEv+0x21e>
            now_address += now_address - run_corner_address;
 8022d32:	4b3c      	ldr	r3, [pc, #240]	; (8022e24 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d34:	881a      	ldrh	r2, [r3, #0]
 8022d36:	4b42      	ldr	r3, [pc, #264]	; (8022e40 <_ZN6Logger7LoadingEv+0x308>)
 8022d38:	881b      	ldrh	r3, [r3, #0]
 8022d3a:	1ad3      	subs	r3, r2, r3
 8022d3c:	b29a      	uxth	r2, r3
 8022d3e:	4b39      	ldr	r3, [pc, #228]	; (8022e24 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d40:	881b      	ldrh	r3, [r3, #0]
 8022d42:	4413      	add	r3, r2
 8022d44:	b29a      	uxth	r2, r3
 8022d46:	4b37      	ldr	r3, [pc, #220]	; (8022e24 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d48:	801a      	strh	r2, [r3, #0]
            run_corner_wait = 0;
 8022d4a:	4b3e      	ldr	r3, [pc, #248]	; (8022e44 <_ZN6Logger7LoadingEv+0x30c>)
 8022d4c:	2200      	movs	r2, #0
 8022d4e:	701a      	strb	r2, [r3, #0]
            run_corner_pass = false;
 8022d50:	2300      	movs	r3, #0
 8022d52:	747b      	strb	r3, [r7, #17]
 8022d54:	e017      	b.n	8022d86 <_ZN6Logger7LoadingEv+0x24e>
        }else{
            log_corner_address = now_address;
 8022d56:	4b33      	ldr	r3, [pc, #204]	; (8022e24 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d58:	881a      	ldrh	r2, [r3, #0]
 8022d5a:	4b3b      	ldr	r3, [pc, #236]	; (8022e48 <_ZN6Logger7LoadingEv+0x310>)
 8022d5c:	801a      	strh	r2, [r3, #0]
            log_corner_pass = true;
 8022d5e:	2301      	movs	r3, #1
 8022d60:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            log_corner_wait = CORRECTION_WAIT_COUNT;
 8022d64:	4b39      	ldr	r3, [pc, #228]	; (8022e4c <_ZN6Logger7LoadingEv+0x314>)
 8022d66:	2203      	movs	r2, #3
 8022d68:	701a      	strb	r2, [r3, #0]
 8022d6a:	e00c      	b.n	8022d86 <_ZN6Logger7LoadingEv+0x24e>
        }
    }else{
        if(run_corner_wait > 0) run_corner_wait--;
 8022d6c:	4b35      	ldr	r3, [pc, #212]	; (8022e44 <_ZN6Logger7LoadingEv+0x30c>)
 8022d6e:	781b      	ldrb	r3, [r3, #0]
 8022d70:	2b00      	cmp	r3, #0
 8022d72:	d006      	beq.n	8022d82 <_ZN6Logger7LoadingEv+0x24a>
 8022d74:	4b33      	ldr	r3, [pc, #204]	; (8022e44 <_ZN6Logger7LoadingEv+0x30c>)
 8022d76:	781b      	ldrb	r3, [r3, #0]
 8022d78:	3b01      	subs	r3, #1
 8022d7a:	b2da      	uxtb	r2, r3
 8022d7c:	4b31      	ldr	r3, [pc, #196]	; (8022e44 <_ZN6Logger7LoadingEv+0x30c>)
 8022d7e:	701a      	strb	r2, [r3, #0]
 8022d80:	e001      	b.n	8022d86 <_ZN6Logger7LoadingEv+0x24e>
        else run_corner_pass = false;
 8022d82:	2300      	movs	r3, #0
 8022d84:	747b      	strb	r3, [r7, #17]
    }
    if(run_corner == true){
 8022d86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	d018      	beq.n	8022dc0 <_ZN6Logger7LoadingEv+0x288>
        if(log_corner_pass == true){
 8022d8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8022d92:	2b00      	cmp	r3, #0
 8022d94:	d00a      	beq.n	8022dac <_ZN6Logger7LoadingEv+0x274>
            now_address = log_corner_address;
 8022d96:	4b2c      	ldr	r3, [pc, #176]	; (8022e48 <_ZN6Logger7LoadingEv+0x310>)
 8022d98:	881a      	ldrh	r2, [r3, #0]
 8022d9a:	4b22      	ldr	r3, [pc, #136]	; (8022e24 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d9c:	801a      	strh	r2, [r3, #0]
            log_corner_wait = 0;
 8022d9e:	4b2b      	ldr	r3, [pc, #172]	; (8022e4c <_ZN6Logger7LoadingEv+0x314>)
 8022da0:	2200      	movs	r2, #0
 8022da2:	701a      	strb	r2, [r3, #0]
            log_corner_pass = false;
 8022da4:	2300      	movs	r3, #0
 8022da6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8022daa:	e017      	b.n	8022ddc <_ZN6Logger7LoadingEv+0x2a4>
        }else{
            run_corner_address = now_address;
 8022dac:	4b1d      	ldr	r3, [pc, #116]	; (8022e24 <_ZN6Logger7LoadingEv+0x2ec>)
 8022dae:	881a      	ldrh	r2, [r3, #0]
 8022db0:	4b23      	ldr	r3, [pc, #140]	; (8022e40 <_ZN6Logger7LoadingEv+0x308>)
 8022db2:	801a      	strh	r2, [r3, #0]
            run_corner_pass = true;
 8022db4:	2301      	movs	r3, #1
 8022db6:	747b      	strb	r3, [r7, #17]
            run_corner_wait = CORRECTION_WAIT_COUNT;
 8022db8:	4b22      	ldr	r3, [pc, #136]	; (8022e44 <_ZN6Logger7LoadingEv+0x30c>)
 8022dba:	2203      	movs	r2, #3
 8022dbc:	701a      	strb	r2, [r3, #0]
 8022dbe:	e00d      	b.n	8022ddc <_ZN6Logger7LoadingEv+0x2a4>
        }
    }else{
        if(log_corner_wait > 0) log_corner_wait--;
 8022dc0:	4b22      	ldr	r3, [pc, #136]	; (8022e4c <_ZN6Logger7LoadingEv+0x314>)
 8022dc2:	781b      	ldrb	r3, [r3, #0]
 8022dc4:	2b00      	cmp	r3, #0
 8022dc6:	d006      	beq.n	8022dd6 <_ZN6Logger7LoadingEv+0x29e>
 8022dc8:	4b20      	ldr	r3, [pc, #128]	; (8022e4c <_ZN6Logger7LoadingEv+0x314>)
 8022dca:	781b      	ldrb	r3, [r3, #0]
 8022dcc:	3b01      	subs	r3, #1
 8022dce:	b2da      	uxtb	r2, r3
 8022dd0:	4b1e      	ldr	r3, [pc, #120]	; (8022e4c <_ZN6Logger7LoadingEv+0x314>)
 8022dd2:	701a      	strb	r2, [r3, #0]
 8022dd4:	e002      	b.n	8022ddc <_ZN6Logger7LoadingEv+0x2a4>
        else log_corner_pass = false;
 8022dd6:	2300      	movs	r3, #0
 8022dd8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    /* Position correction at cross line */
    static uint16_t log_cross_address, run_cross_address;
    static uint8_t log_cross_wait = 0, run_cross_wait = 0;
    if(log_cross == true){
 8022ddc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8022de0:	2b00      	cmp	r3, #0
 8022de2:	d03d      	beq.n	8022e60 <_ZN6Logger7LoadingEv+0x328>
        if(run_cross_pass == true){
 8022de4:	7c3b      	ldrb	r3, [r7, #16]
 8022de6:	2b00      	cmp	r3, #0
 8022de8:	d011      	beq.n	8022e0e <_ZN6Logger7LoadingEv+0x2d6>
            now_address += now_address - run_cross_address;
 8022dea:	4b0e      	ldr	r3, [pc, #56]	; (8022e24 <_ZN6Logger7LoadingEv+0x2ec>)
 8022dec:	881a      	ldrh	r2, [r3, #0]
 8022dee:	4b18      	ldr	r3, [pc, #96]	; (8022e50 <_ZN6Logger7LoadingEv+0x318>)
 8022df0:	881b      	ldrh	r3, [r3, #0]
 8022df2:	1ad3      	subs	r3, r2, r3
 8022df4:	b29a      	uxth	r2, r3
 8022df6:	4b0b      	ldr	r3, [pc, #44]	; (8022e24 <_ZN6Logger7LoadingEv+0x2ec>)
 8022df8:	881b      	ldrh	r3, [r3, #0]
 8022dfa:	4413      	add	r3, r2
 8022dfc:	b29a      	uxth	r2, r3
 8022dfe:	4b09      	ldr	r3, [pc, #36]	; (8022e24 <_ZN6Logger7LoadingEv+0x2ec>)
 8022e00:	801a      	strh	r2, [r3, #0]
            run_cross_wait = 0;
 8022e02:	4b14      	ldr	r3, [pc, #80]	; (8022e54 <_ZN6Logger7LoadingEv+0x31c>)
 8022e04:	2200      	movs	r2, #0
 8022e06:	701a      	strb	r2, [r3, #0]
            run_cross_pass = false;
 8022e08:	2300      	movs	r3, #0
 8022e0a:	743b      	strb	r3, [r7, #16]
 8022e0c:	e035      	b.n	8022e7a <_ZN6Logger7LoadingEv+0x342>
        }else{
            log_cross_address = now_address;
 8022e0e:	4b05      	ldr	r3, [pc, #20]	; (8022e24 <_ZN6Logger7LoadingEv+0x2ec>)
 8022e10:	881a      	ldrh	r2, [r3, #0]
 8022e12:	4b11      	ldr	r3, [pc, #68]	; (8022e58 <_ZN6Logger7LoadingEv+0x320>)
 8022e14:	801a      	strh	r2, [r3, #0]
            log_cross_pass = true;
 8022e16:	2301      	movs	r3, #1
 8022e18:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            log_cross_wait = CORRECTION_WAIT_COUNT;
 8022e1c:	4b0f      	ldr	r3, [pc, #60]	; (8022e5c <_ZN6Logger7LoadingEv+0x324>)
 8022e1e:	2203      	movs	r2, #3
 8022e20:	701a      	strb	r2, [r3, #0]
 8022e22:	e02a      	b.n	8022e7a <_ZN6Logger7LoadingEv+0x342>
 8022e24:	20000098 	.word	0x20000098
 8022e28:	2000009c 	.word	0x2000009c
 8022e2c:	2000009a 	.word	0x2000009a
 8022e30:	200000a4 	.word	0x200000a4
 8022e34:	200000a0 	.word	0x200000a0
 8022e38:	43ca0000 	.word	0x43ca0000
 8022e3c:	200000a8 	.word	0x200000a8
 8022e40:	200000ac 	.word	0x200000ac
 8022e44:	200000af 	.word	0x200000af
 8022e48:	200000aa 	.word	0x200000aa
 8022e4c:	200000ae 	.word	0x200000ae
 8022e50:	200000b2 	.word	0x200000b2
 8022e54:	200000b5 	.word	0x200000b5
 8022e58:	200000b0 	.word	0x200000b0
 8022e5c:	200000b4 	.word	0x200000b4
        }
    }else{
        if(run_cross_wait > 0) run_cross_wait--;
 8022e60:	4b8e      	ldr	r3, [pc, #568]	; (802309c <_ZN6Logger7LoadingEv+0x564>)
 8022e62:	781b      	ldrb	r3, [r3, #0]
 8022e64:	2b00      	cmp	r3, #0
 8022e66:	d006      	beq.n	8022e76 <_ZN6Logger7LoadingEv+0x33e>
 8022e68:	4b8c      	ldr	r3, [pc, #560]	; (802309c <_ZN6Logger7LoadingEv+0x564>)
 8022e6a:	781b      	ldrb	r3, [r3, #0]
 8022e6c:	3b01      	subs	r3, #1
 8022e6e:	b2da      	uxtb	r2, r3
 8022e70:	4b8a      	ldr	r3, [pc, #552]	; (802309c <_ZN6Logger7LoadingEv+0x564>)
 8022e72:	701a      	strb	r2, [r3, #0]
 8022e74:	e001      	b.n	8022e7a <_ZN6Logger7LoadingEv+0x342>
        else run_cross_pass = false;
 8022e76:	2300      	movs	r3, #0
 8022e78:	743b      	strb	r3, [r7, #16]
    }
    if(run_cross == true){
 8022e7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8022e7e:	2b00      	cmp	r3, #0
 8022e80:	d018      	beq.n	8022eb4 <_ZN6Logger7LoadingEv+0x37c>
        if(log_cross_pass == true){
 8022e82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8022e86:	2b00      	cmp	r3, #0
 8022e88:	d00a      	beq.n	8022ea0 <_ZN6Logger7LoadingEv+0x368>
            now_address = log_cross_address;
 8022e8a:	4b85      	ldr	r3, [pc, #532]	; (80230a0 <_ZN6Logger7LoadingEv+0x568>)
 8022e8c:	881a      	ldrh	r2, [r3, #0]
 8022e8e:	4b85      	ldr	r3, [pc, #532]	; (80230a4 <_ZN6Logger7LoadingEv+0x56c>)
 8022e90:	801a      	strh	r2, [r3, #0]
            log_cross_wait = 0;
 8022e92:	4b85      	ldr	r3, [pc, #532]	; (80230a8 <_ZN6Logger7LoadingEv+0x570>)
 8022e94:	2200      	movs	r2, #0
 8022e96:	701a      	strb	r2, [r3, #0]
            log_cross_pass = false;
 8022e98:	2300      	movs	r3, #0
 8022e9a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8022e9e:	e017      	b.n	8022ed0 <_ZN6Logger7LoadingEv+0x398>
        }else{
            run_cross_address = now_address;
 8022ea0:	4b80      	ldr	r3, [pc, #512]	; (80230a4 <_ZN6Logger7LoadingEv+0x56c>)
 8022ea2:	881a      	ldrh	r2, [r3, #0]
 8022ea4:	4b81      	ldr	r3, [pc, #516]	; (80230ac <_ZN6Logger7LoadingEv+0x574>)
 8022ea6:	801a      	strh	r2, [r3, #0]
            run_cross_pass = true;
 8022ea8:	2301      	movs	r3, #1
 8022eaa:	743b      	strb	r3, [r7, #16]
            run_cross_wait = CORRECTION_WAIT_COUNT;
 8022eac:	4b7b      	ldr	r3, [pc, #492]	; (802309c <_ZN6Logger7LoadingEv+0x564>)
 8022eae:	2203      	movs	r2, #3
 8022eb0:	701a      	strb	r2, [r3, #0]
 8022eb2:	e00d      	b.n	8022ed0 <_ZN6Logger7LoadingEv+0x398>
        }
    }else{
        if(log_cross_wait > 0) log_cross_wait--;
 8022eb4:	4b7c      	ldr	r3, [pc, #496]	; (80230a8 <_ZN6Logger7LoadingEv+0x570>)
 8022eb6:	781b      	ldrb	r3, [r3, #0]
 8022eb8:	2b00      	cmp	r3, #0
 8022eba:	d006      	beq.n	8022eca <_ZN6Logger7LoadingEv+0x392>
 8022ebc:	4b7a      	ldr	r3, [pc, #488]	; (80230a8 <_ZN6Logger7LoadingEv+0x570>)
 8022ebe:	781b      	ldrb	r3, [r3, #0]
 8022ec0:	3b01      	subs	r3, #1
 8022ec2:	b2da      	uxtb	r2, r3
 8022ec4:	4b78      	ldr	r3, [pc, #480]	; (80230a8 <_ZN6Logger7LoadingEv+0x570>)
 8022ec6:	701a      	strb	r2, [r3, #0]
 8022ec8:	e002      	b.n	8022ed0 <_ZN6Logger7LoadingEv+0x398>
        else log_cross_pass = false;
 8022eca:	2300      	movs	r3, #0
 8022ecc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    /* Accel straight */
    uint8_t accel_step = *(reinterpret_cast<uint8_t*>(now_address + HEAD_ADDRESS_BLOCK_D));
 8022ed0:	4b74      	ldr	r3, [pc, #464]	; (80230a4 <_ZN6Logger7LoadingEv+0x56c>)
 8022ed2:	881b      	ldrh	r3, [r3, #0]
 8022ed4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022ed8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022edc:	781b      	ldrb	r3, [r3, #0]
 8022ede:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(!straight) accel_step = 0x10;
 8022ee2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8022ee6:	f083 0301 	eor.w	r3, r3, #1
 8022eea:	b2db      	uxtb	r3, r3
 8022eec:	2b00      	cmp	r3, #0
 8022eee:	d002      	beq.n	8022ef6 <_ZN6Logger7LoadingEv+0x3be>
 8022ef0:	2310      	movs	r3, #16
 8022ef2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    float target = MIN_VELOCITY;
 8022ef6:	4b6e      	ldr	r3, [pc, #440]	; (80230b0 <_ZN6Logger7LoadingEv+0x578>)
 8022ef8:	627b      	str	r3, [r7, #36]	; 0x24
    static float pre_target = MIN_VELOCITY;
    switch(accel_step){
 8022efa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8022efe:	3b01      	subs	r3, #1
 8022f00:	2b4f      	cmp	r3, #79	; 0x4f
 8022f02:	f200 80b5 	bhi.w	8023070 <_ZN6Logger7LoadingEv+0x538>
 8022f06:	a201      	add	r2, pc, #4	; (adr r2, 8022f0c <_ZN6Logger7LoadingEv+0x3d4>)
 8022f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022f0c:	08023053 	.word	0x08023053
 8022f10:	08023059 	.word	0x08023059
 8022f14:	0802305f 	.word	0x0802305f
 8022f18:	08023065 	.word	0x08023065
 8022f1c:	0802306b 	.word	0x0802306b
 8022f20:	08023071 	.word	0x08023071
 8022f24:	08023071 	.word	0x08023071
 8022f28:	08023071 	.word	0x08023071
 8022f2c:	08023071 	.word	0x08023071
 8022f30:	08023071 	.word	0x08023071
 8022f34:	08023071 	.word	0x08023071
 8022f38:	08023071 	.word	0x08023071
 8022f3c:	08023071 	.word	0x08023071
 8022f40:	08023071 	.word	0x08023071
 8022f44:	08023071 	.word	0x08023071
 8022f48:	0802304d 	.word	0x0802304d
 8022f4c:	08023071 	.word	0x08023071
 8022f50:	08023071 	.word	0x08023071
 8022f54:	08023071 	.word	0x08023071
 8022f58:	08023071 	.word	0x08023071
 8022f5c:	08023071 	.word	0x08023071
 8022f60:	08023071 	.word	0x08023071
 8022f64:	08023071 	.word	0x08023071
 8022f68:	08023071 	.word	0x08023071
 8022f6c:	08023071 	.word	0x08023071
 8022f70:	08023071 	.word	0x08023071
 8022f74:	08023071 	.word	0x08023071
 8022f78:	08023071 	.word	0x08023071
 8022f7c:	08023071 	.word	0x08023071
 8022f80:	08023071 	.word	0x08023071
 8022f84:	08023071 	.word	0x08023071
 8022f88:	08023053 	.word	0x08023053
 8022f8c:	08023071 	.word	0x08023071
 8022f90:	08023071 	.word	0x08023071
 8022f94:	08023071 	.word	0x08023071
 8022f98:	08023071 	.word	0x08023071
 8022f9c:	08023071 	.word	0x08023071
 8022fa0:	08023071 	.word	0x08023071
 8022fa4:	08023071 	.word	0x08023071
 8022fa8:	08023071 	.word	0x08023071
 8022fac:	08023071 	.word	0x08023071
 8022fb0:	08023071 	.word	0x08023071
 8022fb4:	08023071 	.word	0x08023071
 8022fb8:	08023071 	.word	0x08023071
 8022fbc:	08023071 	.word	0x08023071
 8022fc0:	08023071 	.word	0x08023071
 8022fc4:	08023071 	.word	0x08023071
 8022fc8:	08023059 	.word	0x08023059
 8022fcc:	08023071 	.word	0x08023071
 8022fd0:	08023071 	.word	0x08023071
 8022fd4:	08023071 	.word	0x08023071
 8022fd8:	08023071 	.word	0x08023071
 8022fdc:	08023071 	.word	0x08023071
 8022fe0:	08023071 	.word	0x08023071
 8022fe4:	08023071 	.word	0x08023071
 8022fe8:	08023071 	.word	0x08023071
 8022fec:	08023071 	.word	0x08023071
 8022ff0:	08023071 	.word	0x08023071
 8022ff4:	08023071 	.word	0x08023071
 8022ff8:	08023071 	.word	0x08023071
 8022ffc:	08023071 	.word	0x08023071
 8023000:	08023071 	.word	0x08023071
 8023004:	08023071 	.word	0x08023071
 8023008:	0802305f 	.word	0x0802305f
 802300c:	08023071 	.word	0x08023071
 8023010:	08023071 	.word	0x08023071
 8023014:	08023071 	.word	0x08023071
 8023018:	08023071 	.word	0x08023071
 802301c:	08023071 	.word	0x08023071
 8023020:	08023071 	.word	0x08023071
 8023024:	08023071 	.word	0x08023071
 8023028:	08023071 	.word	0x08023071
 802302c:	08023071 	.word	0x08023071
 8023030:	08023071 	.word	0x08023071
 8023034:	08023071 	.word	0x08023071
 8023038:	08023071 	.word	0x08023071
 802303c:	08023071 	.word	0x08023071
 8023040:	08023071 	.word	0x08023071
 8023044:	08023071 	.word	0x08023071
 8023048:	08023065 	.word	0x08023065
        case 0x10: target = MIN_VELOCITY; break;
 802304c:	4b18      	ldr	r3, [pc, #96]	; (80230b0 <_ZN6Logger7LoadingEv+0x578>)
 802304e:	627b      	str	r3, [r7, #36]	; 0x24
 8023050:	e012      	b.n	8023078 <_ZN6Logger7LoadingEv+0x540>
        case 0x01:
        case 0x20: target = MIN_VELOCITY + (ACCEL_VELOCITY * 1); break;
 8023052:	4b18      	ldr	r3, [pc, #96]	; (80230b4 <_ZN6Logger7LoadingEv+0x57c>)
 8023054:	627b      	str	r3, [r7, #36]	; 0x24
 8023056:	e00f      	b.n	8023078 <_ZN6Logger7LoadingEv+0x540>
        case 0x02:
        case 0x30: target = MIN_VELOCITY + (ACCEL_VELOCITY * 2); break;
 8023058:	4b17      	ldr	r3, [pc, #92]	; (80230b8 <_ZN6Logger7LoadingEv+0x580>)
 802305a:	627b      	str	r3, [r7, #36]	; 0x24
 802305c:	e00c      	b.n	8023078 <_ZN6Logger7LoadingEv+0x540>
        case 0x03:
        case 0x40: target = MIN_VELOCITY + (ACCEL_VELOCITY * 3); break;
 802305e:	4b17      	ldr	r3, [pc, #92]	; (80230bc <_ZN6Logger7LoadingEv+0x584>)
 8023060:	627b      	str	r3, [r7, #36]	; 0x24
 8023062:	e009      	b.n	8023078 <_ZN6Logger7LoadingEv+0x540>
        case 0x04:
        case 0x50: target = MIN_VELOCITY + (ACCEL_VELOCITY * 4); break;
 8023064:	4b16      	ldr	r3, [pc, #88]	; (80230c0 <_ZN6Logger7LoadingEv+0x588>)
 8023066:	627b      	str	r3, [r7, #36]	; 0x24
 8023068:	e006      	b.n	8023078 <_ZN6Logger7LoadingEv+0x540>
        case 0x05: target = MIN_VELOCITY + (ACCEL_VELOCITY * 5); break;
 802306a:	4b16      	ldr	r3, [pc, #88]	; (80230c4 <_ZN6Logger7LoadingEv+0x58c>)
 802306c:	627b      	str	r3, [r7, #36]	; 0x24
 802306e:	e003      	b.n	8023078 <_ZN6Logger7LoadingEv+0x540>
        default: target = pre_target; break;
 8023070:	4b15      	ldr	r3, [pc, #84]	; (80230c8 <_ZN6Logger7LoadingEv+0x590>)
 8023072:	681b      	ldr	r3, [r3, #0]
 8023074:	627b      	str	r3, [r7, #36]	; 0x24
 8023076:	bf00      	nop
    }
    pre_target = target;
 8023078:	4a13      	ldr	r2, [pc, #76]	; (80230c8 <_ZN6Logger7LoadingEv+0x590>)
 802307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802307c:	6013      	str	r3, [r2, #0]
    target_velocity_ = target;
 802307e:	687b      	ldr	r3, [r7, #4]
 8023080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023082:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

    now_address++;
 8023086:	4b07      	ldr	r3, [pc, #28]	; (80230a4 <_ZN6Logger7LoadingEv+0x56c>)
 8023088:	881b      	ldrh	r3, [r3, #0]
 802308a:	3301      	adds	r3, #1
 802308c:	b29a      	uxth	r2, r3
 802308e:	4b05      	ldr	r3, [pc, #20]	; (80230a4 <_ZN6Logger7LoadingEv+0x56c>)
 8023090:	801a      	strh	r2, [r3, #0]
 8023092:	e000      	b.n	8023096 <_ZN6Logger7LoadingEv+0x55e>
    if(distance < LOGGING_CONST_DISTANCE) return;
 8023094:	bf00      	nop
}
 8023096:	3730      	adds	r7, #48	; 0x30
 8023098:	46bd      	mov	sp, r7
 802309a:	bd80      	pop	{r7, pc}
 802309c:	200000b5 	.word	0x200000b5
 80230a0:	200000b0 	.word	0x200000b0
 80230a4:	20000098 	.word	0x20000098
 80230a8:	200000b4 	.word	0x200000b4
 80230ac:	200000b2 	.word	0x200000b2
 80230b0:	3fa66666 	.word	0x3fa66666
 80230b4:	3fe66666 	.word	0x3fe66666
 80230b8:	40133333 	.word	0x40133333
 80230bc:	40333333 	.word	0x40333333
 80230c0:	40533333 	.word	0x40533333
 80230c4:	40733333 	.word	0x40733333
 80230c8:	2000000c 	.word	0x2000000c

080230cc <_ZN6Logger17GetTargetVelocityEv>:

float Logger::GetTargetVelocity()
{
 80230cc:	b480      	push	{r7}
 80230ce:	b083      	sub	sp, #12
 80230d0:	af00      	add	r7, sp, #0
 80230d2:	6078      	str	r0, [r7, #4]
    return target_velocity_;
 80230d4:	687b      	ldr	r3, [r7, #4]
 80230d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80230da:	ee07 3a90 	vmov	s15, r3
 80230de:	eeb0 0a67 	vmov.f32	s0, s15
 80230e2:	370c      	adds	r7, #12
 80230e4:	46bd      	mov	sp, r7
 80230e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230ea:	4770      	bx	lr

080230ec <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80230ec:	b580      	push	{r7, lr}
 80230ee:	b082      	sub	sp, #8
 80230f0:	af00      	add	r7, sp, #0
 80230f2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 80230f4:	687b      	ldr	r3, [r7, #4]
 80230f6:	681b      	ldr	r3, [r3, #0]
 80230f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80230fc:	d101      	bne.n	8023102 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 80230fe:	f002 fbbf 	bl	8025880 <InterruptTim2>
  }
  if(htim->Instance == TIM5)
 8023102:	687b      	ldr	r3, [r7, #4]
 8023104:	681b      	ldr	r3, [r3, #0]
 8023106:	4a0b      	ldr	r2, [pc, #44]	; (8023134 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8023108:	4293      	cmp	r3, r2
 802310a:	d101      	bne.n	8023110 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim5();
 802310c:	f002 fb4a 	bl	80257a4 <InterruptTim5>
  }
  if(htim->Instance == TIM6)
 8023110:	687b      	ldr	r3, [r7, #4]
 8023112:	681b      	ldr	r3, [r3, #0]
 8023114:	4a08      	ldr	r2, [pc, #32]	; (8023138 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8023116:	4293      	cmp	r3, r2
 8023118:	d101      	bne.n	802311e <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim6();
 802311a:	f002 f8ad 	bl	8025278 <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 802311e:	687b      	ldr	r3, [r7, #4]
 8023120:	681b      	ldr	r3, [r3, #0]
 8023122:	4a06      	ldr	r2, [pc, #24]	; (802313c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8023124:	4293      	cmp	r3, r2
 8023126:	d101      	bne.n	802312c <HAL_TIM_PeriodElapsedCallback+0x40>
  {
    InterruptTim7();
 8023128:	f002 f896 	bl	8025258 <InterruptTim7>
  }
}
 802312c:	bf00      	nop
 802312e:	3708      	adds	r7, #8
 8023130:	46bd      	mov	sp, r7
 8023132:	bd80      	pop	{r7, pc}
 8023134:	40000c00 	.word	0x40000c00
 8023138:	40001000 	.word	0x40001000
 802313c:	40001400 	.word	0x40001400

08023140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8023140:	b580      	push	{r7, lr}
 8023142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  Init();
 8023144:	f002 f840 	bl	80251c8 <Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8023148:	f003 fa9a 	bl	8026680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802314c:	f000 f822 	bl	8023194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8023150:	f000 fd68 	bl	8023c24 <MX_GPIO_Init>
  MX_DMA_Init();
 8023154:	f000 fd46 	bl	8023be4 <MX_DMA_Init>
  MX_ADC1_Init();
 8023158:	f000 f886 	bl	8023268 <MX_ADC1_Init>
  MX_I2C2_Init();
 802315c:	f000 f98c 	bl	8023478 <MX_I2C2_Init>
  MX_SPI3_Init();
 8023160:	f000 f9b8 	bl	80234d4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8023164:	f000 f9ec 	bl	8023540 <MX_TIM1_Init>
  MX_TIM3_Init();
 8023168:	f000 fac8 	bl	80236fc <MX_TIM3_Init>
  MX_TIM4_Init();
 802316c:	f000 fb40 	bl	80237f0 <MX_TIM4_Init>
  MX_TIM6_Init();
 8023170:	f000 fbe0 	bl	8023934 <MX_TIM6_Init>
  MX_TIM7_Init();
 8023174:	f000 fc14 	bl	80239a0 <MX_TIM7_Init>
  MX_TIM8_Init();
 8023178:	f000 fc48 	bl	8023a0c <MX_TIM8_Init>
  MX_TIM11_Init();
 802317c:	f000 fc9e 	bl	8023abc <MX_TIM11_Init>
  MX_TIM12_Init();
 8023180:	f000 fcea 	bl	8023b58 <MX_TIM12_Init>
  MX_TIM2_Init();
 8023184:	f000 fa6c 	bl	8023660 <MX_TIM2_Init>
  MX_TIM5_Init();
 8023188:	f000 fb86 	bl	8023898 <MX_TIM5_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Loop();
 802318c:	f002 fbd6 	bl	802593c <Loop>
 8023190:	e7fc      	b.n	802318c <main+0x4c>
	...

08023194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8023194:	b580      	push	{r7, lr}
 8023196:	b094      	sub	sp, #80	; 0x50
 8023198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802319a:	f107 0320 	add.w	r3, r7, #32
 802319e:	2230      	movs	r2, #48	; 0x30
 80231a0:	2100      	movs	r1, #0
 80231a2:	4618      	mov	r0, r3
 80231a4:	f007 fb2b 	bl	802a7fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80231a8:	f107 030c 	add.w	r3, r7, #12
 80231ac:	2200      	movs	r2, #0
 80231ae:	601a      	str	r2, [r3, #0]
 80231b0:	605a      	str	r2, [r3, #4]
 80231b2:	609a      	str	r2, [r3, #8]
 80231b4:	60da      	str	r2, [r3, #12]
 80231b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80231b8:	2300      	movs	r3, #0
 80231ba:	60bb      	str	r3, [r7, #8]
 80231bc:	4b28      	ldr	r3, [pc, #160]	; (8023260 <SystemClock_Config+0xcc>)
 80231be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231c0:	4a27      	ldr	r2, [pc, #156]	; (8023260 <SystemClock_Config+0xcc>)
 80231c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80231c6:	6413      	str	r3, [r2, #64]	; 0x40
 80231c8:	4b25      	ldr	r3, [pc, #148]	; (8023260 <SystemClock_Config+0xcc>)
 80231ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80231d0:	60bb      	str	r3, [r7, #8]
 80231d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80231d4:	2300      	movs	r3, #0
 80231d6:	607b      	str	r3, [r7, #4]
 80231d8:	4b22      	ldr	r3, [pc, #136]	; (8023264 <SystemClock_Config+0xd0>)
 80231da:	681b      	ldr	r3, [r3, #0]
 80231dc:	4a21      	ldr	r2, [pc, #132]	; (8023264 <SystemClock_Config+0xd0>)
 80231de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80231e2:	6013      	str	r3, [r2, #0]
 80231e4:	4b1f      	ldr	r3, [pc, #124]	; (8023264 <SystemClock_Config+0xd0>)
 80231e6:	681b      	ldr	r3, [r3, #0]
 80231e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80231ec:	607b      	str	r3, [r7, #4]
 80231ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80231f0:	2301      	movs	r3, #1
 80231f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80231f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80231f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80231fa:	2302      	movs	r3, #2
 80231fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80231fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8023202:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8023204:	2306      	movs	r3, #6
 8023206:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8023208:	23a8      	movs	r3, #168	; 0xa8
 802320a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802320c:	2302      	movs	r3, #2
 802320e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8023210:	2304      	movs	r3, #4
 8023212:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8023214:	f107 0320 	add.w	r3, r7, #32
 8023218:	4618      	mov	r0, r3
 802321a:	f005 f913 	bl	8028444 <HAL_RCC_OscConfig>
 802321e:	4603      	mov	r3, r0
 8023220:	2b00      	cmp	r3, #0
 8023222:	d001      	beq.n	8023228 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8023224:	f000 fdce 	bl	8023dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8023228:	230f      	movs	r3, #15
 802322a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802322c:	2302      	movs	r3, #2
 802322e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8023230:	2300      	movs	r3, #0
 8023232:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8023234:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8023238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 802323a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802323e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8023240:	f107 030c 	add.w	r3, r7, #12
 8023244:	2105      	movs	r1, #5
 8023246:	4618      	mov	r0, r3
 8023248:	f005 fb6c 	bl	8028924 <HAL_RCC_ClockConfig>
 802324c:	4603      	mov	r3, r0
 802324e:	2b00      	cmp	r3, #0
 8023250:	d001      	beq.n	8023256 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8023252:	f000 fdb7 	bl	8023dc4 <Error_Handler>
  }
}
 8023256:	bf00      	nop
 8023258:	3750      	adds	r7, #80	; 0x50
 802325a:	46bd      	mov	sp, r7
 802325c:	bd80      	pop	{r7, pc}
 802325e:	bf00      	nop
 8023260:	40023800 	.word	0x40023800
 8023264:	40007000 	.word	0x40007000

08023268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8023268:	b580      	push	{r7, lr}
 802326a:	b084      	sub	sp, #16
 802326c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 802326e:	463b      	mov	r3, r7
 8023270:	2200      	movs	r2, #0
 8023272:	601a      	str	r2, [r3, #0]
 8023274:	605a      	str	r2, [r3, #4]
 8023276:	609a      	str	r2, [r3, #8]
 8023278:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 802327a:	4b7c      	ldr	r3, [pc, #496]	; (802346c <MX_ADC1_Init+0x204>)
 802327c:	4a7c      	ldr	r2, [pc, #496]	; (8023470 <MX_ADC1_Init+0x208>)
 802327e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8023280:	4b7a      	ldr	r3, [pc, #488]	; (802346c <MX_ADC1_Init+0x204>)
 8023282:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8023286:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8023288:	4b78      	ldr	r3, [pc, #480]	; (802346c <MX_ADC1_Init+0x204>)
 802328a:	2200      	movs	r2, #0
 802328c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 802328e:	4b77      	ldr	r3, [pc, #476]	; (802346c <MX_ADC1_Init+0x204>)
 8023290:	2201      	movs	r2, #1
 8023292:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8023294:	4b75      	ldr	r3, [pc, #468]	; (802346c <MX_ADC1_Init+0x204>)
 8023296:	2201      	movs	r2, #1
 8023298:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 802329a:	4b74      	ldr	r3, [pc, #464]	; (802346c <MX_ADC1_Init+0x204>)
 802329c:	2200      	movs	r2, #0
 802329e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80232a2:	4b72      	ldr	r3, [pc, #456]	; (802346c <MX_ADC1_Init+0x204>)
 80232a4:	2200      	movs	r2, #0
 80232a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80232a8:	4b70      	ldr	r3, [pc, #448]	; (802346c <MX_ADC1_Init+0x204>)
 80232aa:	4a72      	ldr	r2, [pc, #456]	; (8023474 <MX_ADC1_Init+0x20c>)
 80232ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80232ae:	4b6f      	ldr	r3, [pc, #444]	; (802346c <MX_ADC1_Init+0x204>)
 80232b0:	2200      	movs	r2, #0
 80232b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 80232b4:	4b6d      	ldr	r3, [pc, #436]	; (802346c <MX_ADC1_Init+0x204>)
 80232b6:	220e      	movs	r2, #14
 80232b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80232ba:	4b6c      	ldr	r3, [pc, #432]	; (802346c <MX_ADC1_Init+0x204>)
 80232bc:	2201      	movs	r2, #1
 80232be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80232c2:	4b6a      	ldr	r3, [pc, #424]	; (802346c <MX_ADC1_Init+0x204>)
 80232c4:	2201      	movs	r2, #1
 80232c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80232c8:	4868      	ldr	r0, [pc, #416]	; (802346c <MX_ADC1_Init+0x204>)
 80232ca:	f003 fa6d 	bl	80267a8 <HAL_ADC_Init>
 80232ce:	4603      	mov	r3, r0
 80232d0:	2b00      	cmp	r3, #0
 80232d2:	d001      	beq.n	80232d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80232d4:	f000 fd76 	bl	8023dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80232d8:	2303      	movs	r3, #3
 80232da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80232dc:	2301      	movs	r3, #1
 80232de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80232e0:	2301      	movs	r3, #1
 80232e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80232e4:	463b      	mov	r3, r7
 80232e6:	4619      	mov	r1, r3
 80232e8:	4860      	ldr	r0, [pc, #384]	; (802346c <MX_ADC1_Init+0x204>)
 80232ea:	f003 fbb1 	bl	8026a50 <HAL_ADC_ConfigChannel>
 80232ee:	4603      	mov	r3, r0
 80232f0:	2b00      	cmp	r3, #0
 80232f2:	d001      	beq.n	80232f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80232f4:	f000 fd66 	bl	8023dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80232f8:	2304      	movs	r3, #4
 80232fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80232fc:	2302      	movs	r3, #2
 80232fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023300:	463b      	mov	r3, r7
 8023302:	4619      	mov	r1, r3
 8023304:	4859      	ldr	r0, [pc, #356]	; (802346c <MX_ADC1_Init+0x204>)
 8023306:	f003 fba3 	bl	8026a50 <HAL_ADC_ConfigChannel>
 802330a:	4603      	mov	r3, r0
 802330c:	2b00      	cmp	r3, #0
 802330e:	d001      	beq.n	8023314 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8023310:	f000 fd58 	bl	8023dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8023314:	2305      	movs	r3, #5
 8023316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8023318:	2303      	movs	r3, #3
 802331a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802331c:	463b      	mov	r3, r7
 802331e:	4619      	mov	r1, r3
 8023320:	4852      	ldr	r0, [pc, #328]	; (802346c <MX_ADC1_Init+0x204>)
 8023322:	f003 fb95 	bl	8026a50 <HAL_ADC_ConfigChannel>
 8023326:	4603      	mov	r3, r0
 8023328:	2b00      	cmp	r3, #0
 802332a:	d001      	beq.n	8023330 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 802332c:	f000 fd4a 	bl	8023dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8023330:	2306      	movs	r3, #6
 8023332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8023334:	2304      	movs	r3, #4
 8023336:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023338:	463b      	mov	r3, r7
 802333a:	4619      	mov	r1, r3
 802333c:	484b      	ldr	r0, [pc, #300]	; (802346c <MX_ADC1_Init+0x204>)
 802333e:	f003 fb87 	bl	8026a50 <HAL_ADC_ConfigChannel>
 8023342:	4603      	mov	r3, r0
 8023344:	2b00      	cmp	r3, #0
 8023346:	d001      	beq.n	802334c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8023348:	f000 fd3c 	bl	8023dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 802334c:	2307      	movs	r3, #7
 802334e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8023350:	2305      	movs	r3, #5
 8023352:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023354:	463b      	mov	r3, r7
 8023356:	4619      	mov	r1, r3
 8023358:	4844      	ldr	r0, [pc, #272]	; (802346c <MX_ADC1_Init+0x204>)
 802335a:	f003 fb79 	bl	8026a50 <HAL_ADC_ConfigChannel>
 802335e:	4603      	mov	r3, r0
 8023360:	2b00      	cmp	r3, #0
 8023362:	d001      	beq.n	8023368 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8023364:	f000 fd2e 	bl	8023dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8023368:	230e      	movs	r3, #14
 802336a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 802336c:	2306      	movs	r3, #6
 802336e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023370:	463b      	mov	r3, r7
 8023372:	4619      	mov	r1, r3
 8023374:	483d      	ldr	r0, [pc, #244]	; (802346c <MX_ADC1_Init+0x204>)
 8023376:	f003 fb6b 	bl	8026a50 <HAL_ADC_ConfigChannel>
 802337a:	4603      	mov	r3, r0
 802337c:	2b00      	cmp	r3, #0
 802337e:	d001      	beq.n	8023384 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8023380:	f000 fd20 	bl	8023dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8023384:	230f      	movs	r3, #15
 8023386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8023388:	2307      	movs	r3, #7
 802338a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802338c:	463b      	mov	r3, r7
 802338e:	4619      	mov	r1, r3
 8023390:	4836      	ldr	r0, [pc, #216]	; (802346c <MX_ADC1_Init+0x204>)
 8023392:	f003 fb5d 	bl	8026a50 <HAL_ADC_ConfigChannel>
 8023396:	4603      	mov	r3, r0
 8023398:	2b00      	cmp	r3, #0
 802339a:	d001      	beq.n	80233a0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 802339c:	f000 fd12 	bl	8023dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80233a0:	230a      	movs	r3, #10
 80233a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80233a4:	2308      	movs	r3, #8
 80233a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80233a8:	463b      	mov	r3, r7
 80233aa:	4619      	mov	r1, r3
 80233ac:	482f      	ldr	r0, [pc, #188]	; (802346c <MX_ADC1_Init+0x204>)
 80233ae:	f003 fb4f 	bl	8026a50 <HAL_ADC_ConfigChannel>
 80233b2:	4603      	mov	r3, r0
 80233b4:	2b00      	cmp	r3, #0
 80233b6:	d001      	beq.n	80233bc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80233b8:	f000 fd04 	bl	8023dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80233bc:	230b      	movs	r3, #11
 80233be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80233c0:	2309      	movs	r3, #9
 80233c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80233c4:	463b      	mov	r3, r7
 80233c6:	4619      	mov	r1, r3
 80233c8:	4828      	ldr	r0, [pc, #160]	; (802346c <MX_ADC1_Init+0x204>)
 80233ca:	f003 fb41 	bl	8026a50 <HAL_ADC_ConfigChannel>
 80233ce:	4603      	mov	r3, r0
 80233d0:	2b00      	cmp	r3, #0
 80233d2:	d001      	beq.n	80233d8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80233d4:	f000 fcf6 	bl	8023dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80233d8:	230c      	movs	r3, #12
 80233da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80233dc:	230a      	movs	r3, #10
 80233de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80233e0:	463b      	mov	r3, r7
 80233e2:	4619      	mov	r1, r3
 80233e4:	4821      	ldr	r0, [pc, #132]	; (802346c <MX_ADC1_Init+0x204>)
 80233e6:	f003 fb33 	bl	8026a50 <HAL_ADC_ConfigChannel>
 80233ea:	4603      	mov	r3, r0
 80233ec:	2b00      	cmp	r3, #0
 80233ee:	d001      	beq.n	80233f4 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80233f0:	f000 fce8 	bl	8023dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80233f4:	230d      	movs	r3, #13
 80233f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80233f8:	230b      	movs	r3, #11
 80233fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80233fc:	463b      	mov	r3, r7
 80233fe:	4619      	mov	r1, r3
 8023400:	481a      	ldr	r0, [pc, #104]	; (802346c <MX_ADC1_Init+0x204>)
 8023402:	f003 fb25 	bl	8026a50 <HAL_ADC_ConfigChannel>
 8023406:	4603      	mov	r3, r0
 8023408:	2b00      	cmp	r3, #0
 802340a:	d001      	beq.n	8023410 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 802340c:	f000 fcda 	bl	8023dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8023410:	2302      	movs	r3, #2
 8023412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8023414:	230c      	movs	r3, #12
 8023416:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023418:	463b      	mov	r3, r7
 802341a:	4619      	mov	r1, r3
 802341c:	4813      	ldr	r0, [pc, #76]	; (802346c <MX_ADC1_Init+0x204>)
 802341e:	f003 fb17 	bl	8026a50 <HAL_ADC_ConfigChannel>
 8023422:	4603      	mov	r3, r0
 8023424:	2b00      	cmp	r3, #0
 8023426:	d001      	beq.n	802342c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8023428:	f000 fccc 	bl	8023dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 802342c:	2301      	movs	r3, #1
 802342e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8023430:	230d      	movs	r3, #13
 8023432:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023434:	463b      	mov	r3, r7
 8023436:	4619      	mov	r1, r3
 8023438:	480c      	ldr	r0, [pc, #48]	; (802346c <MX_ADC1_Init+0x204>)
 802343a:	f003 fb09 	bl	8026a50 <HAL_ADC_ConfigChannel>
 802343e:	4603      	mov	r3, r0
 8023440:	2b00      	cmp	r3, #0
 8023442:	d001      	beq.n	8023448 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8023444:	f000 fcbe 	bl	8023dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8023448:	2300      	movs	r3, #0
 802344a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 802344c:	230e      	movs	r3, #14
 802344e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023450:	463b      	mov	r3, r7
 8023452:	4619      	mov	r1, r3
 8023454:	4805      	ldr	r0, [pc, #20]	; (802346c <MX_ADC1_Init+0x204>)
 8023456:	f003 fafb 	bl	8026a50 <HAL_ADC_ConfigChannel>
 802345a:	4603      	mov	r3, r0
 802345c:	2b00      	cmp	r3, #0
 802345e:	d001      	beq.n	8023464 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8023460:	f000 fcb0 	bl	8023dc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8023464:	bf00      	nop
 8023466:	3710      	adds	r7, #16
 8023468:	46bd      	mov	sp, r7
 802346a:	bd80      	pop	{r7, pc}
 802346c:	20000964 	.word	0x20000964
 8023470:	40012000 	.word	0x40012000
 8023474:	0f000001 	.word	0x0f000001

08023478 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8023478:	b580      	push	{r7, lr}
 802347a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 802347c:	4b12      	ldr	r3, [pc, #72]	; (80234c8 <MX_I2C2_Init+0x50>)
 802347e:	4a13      	ldr	r2, [pc, #76]	; (80234cc <MX_I2C2_Init+0x54>)
 8023480:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8023482:	4b11      	ldr	r3, [pc, #68]	; (80234c8 <MX_I2C2_Init+0x50>)
 8023484:	4a12      	ldr	r2, [pc, #72]	; (80234d0 <MX_I2C2_Init+0x58>)
 8023486:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8023488:	4b0f      	ldr	r3, [pc, #60]	; (80234c8 <MX_I2C2_Init+0x50>)
 802348a:	2200      	movs	r2, #0
 802348c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 802348e:	4b0e      	ldr	r3, [pc, #56]	; (80234c8 <MX_I2C2_Init+0x50>)
 8023490:	2200      	movs	r2, #0
 8023492:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8023494:	4b0c      	ldr	r3, [pc, #48]	; (80234c8 <MX_I2C2_Init+0x50>)
 8023496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802349a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 802349c:	4b0a      	ldr	r3, [pc, #40]	; (80234c8 <MX_I2C2_Init+0x50>)
 802349e:	2200      	movs	r2, #0
 80234a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80234a2:	4b09      	ldr	r3, [pc, #36]	; (80234c8 <MX_I2C2_Init+0x50>)
 80234a4:	2200      	movs	r2, #0
 80234a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80234a8:	4b07      	ldr	r3, [pc, #28]	; (80234c8 <MX_I2C2_Init+0x50>)
 80234aa:	2200      	movs	r2, #0
 80234ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80234ae:	4b06      	ldr	r3, [pc, #24]	; (80234c8 <MX_I2C2_Init+0x50>)
 80234b0:	2200      	movs	r2, #0
 80234b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80234b4:	4804      	ldr	r0, [pc, #16]	; (80234c8 <MX_I2C2_Init+0x50>)
 80234b6:	f004 fe8d 	bl	80281d4 <HAL_I2C_Init>
 80234ba:	4603      	mov	r3, r0
 80234bc:	2b00      	cmp	r3, #0
 80234be:	d001      	beq.n	80234c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80234c0:	f000 fc80 	bl	8023dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80234c4:	bf00      	nop
 80234c6:	bd80      	pop	{r7, pc}
 80234c8:	20000838 	.word	0x20000838
 80234cc:	40005800 	.word	0x40005800
 80234d0:	000186a0 	.word	0x000186a0

080234d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80234d4:	b580      	push	{r7, lr}
 80234d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80234d8:	4b17      	ldr	r3, [pc, #92]	; (8023538 <MX_SPI3_Init+0x64>)
 80234da:	4a18      	ldr	r2, [pc, #96]	; (802353c <MX_SPI3_Init+0x68>)
 80234dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80234de:	4b16      	ldr	r3, [pc, #88]	; (8023538 <MX_SPI3_Init+0x64>)
 80234e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80234e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80234e6:	4b14      	ldr	r3, [pc, #80]	; (8023538 <MX_SPI3_Init+0x64>)
 80234e8:	2200      	movs	r2, #0
 80234ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80234ec:	4b12      	ldr	r3, [pc, #72]	; (8023538 <MX_SPI3_Init+0x64>)
 80234ee:	2200      	movs	r2, #0
 80234f0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80234f2:	4b11      	ldr	r3, [pc, #68]	; (8023538 <MX_SPI3_Init+0x64>)
 80234f4:	2200      	movs	r2, #0
 80234f6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80234f8:	4b0f      	ldr	r3, [pc, #60]	; (8023538 <MX_SPI3_Init+0x64>)
 80234fa:	2200      	movs	r2, #0
 80234fc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80234fe:	4b0e      	ldr	r3, [pc, #56]	; (8023538 <MX_SPI3_Init+0x64>)
 8023500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023504:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8023506:	4b0c      	ldr	r3, [pc, #48]	; (8023538 <MX_SPI3_Init+0x64>)
 8023508:	2238      	movs	r2, #56	; 0x38
 802350a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 802350c:	4b0a      	ldr	r3, [pc, #40]	; (8023538 <MX_SPI3_Init+0x64>)
 802350e:	2200      	movs	r2, #0
 8023510:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8023512:	4b09      	ldr	r3, [pc, #36]	; (8023538 <MX_SPI3_Init+0x64>)
 8023514:	2200      	movs	r2, #0
 8023516:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8023518:	4b07      	ldr	r3, [pc, #28]	; (8023538 <MX_SPI3_Init+0x64>)
 802351a:	2200      	movs	r2, #0
 802351c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 802351e:	4b06      	ldr	r3, [pc, #24]	; (8023538 <MX_SPI3_Init+0x64>)
 8023520:	220a      	movs	r2, #10
 8023522:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8023524:	4804      	ldr	r0, [pc, #16]	; (8023538 <MX_SPI3_Init+0x64>)
 8023526:	f005 fbb5 	bl	8028c94 <HAL_SPI_Init>
 802352a:	4603      	mov	r3, r0
 802352c:	2b00      	cmp	r3, #0
 802352e:	d001      	beq.n	8023534 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8023530:	f000 fc48 	bl	8023dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8023534:	bf00      	nop
 8023536:	bd80      	pop	{r7, pc}
 8023538:	2000090c 	.word	0x2000090c
 802353c:	40003c00 	.word	0x40003c00

08023540 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8023540:	b580      	push	{r7, lr}
 8023542:	b092      	sub	sp, #72	; 0x48
 8023544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023546:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802354a:	2200      	movs	r2, #0
 802354c:	601a      	str	r2, [r3, #0]
 802354e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023554:	2200      	movs	r2, #0
 8023556:	601a      	str	r2, [r3, #0]
 8023558:	605a      	str	r2, [r3, #4]
 802355a:	609a      	str	r2, [r3, #8]
 802355c:	60da      	str	r2, [r3, #12]
 802355e:	611a      	str	r2, [r3, #16]
 8023560:	615a      	str	r2, [r3, #20]
 8023562:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8023564:	1d3b      	adds	r3, r7, #4
 8023566:	2220      	movs	r2, #32
 8023568:	2100      	movs	r1, #0
 802356a:	4618      	mov	r0, r3
 802356c:	f007 f947 	bl	802a7fe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8023570:	4b39      	ldr	r3, [pc, #228]	; (8023658 <MX_TIM1_Init+0x118>)
 8023572:	4a3a      	ldr	r2, [pc, #232]	; (802365c <MX_TIM1_Init+0x11c>)
 8023574:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8023576:	4b38      	ldr	r3, [pc, #224]	; (8023658 <MX_TIM1_Init+0x118>)
 8023578:	2201      	movs	r2, #1
 802357a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 802357c:	4b36      	ldr	r3, [pc, #216]	; (8023658 <MX_TIM1_Init+0x118>)
 802357e:	2200      	movs	r2, #0
 8023580:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 8023582:	4b35      	ldr	r3, [pc, #212]	; (8023658 <MX_TIM1_Init+0x118>)
 8023584:	f240 4219 	movw	r2, #1049	; 0x419
 8023588:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802358a:	4b33      	ldr	r3, [pc, #204]	; (8023658 <MX_TIM1_Init+0x118>)
 802358c:	2200      	movs	r2, #0
 802358e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8023590:	4b31      	ldr	r3, [pc, #196]	; (8023658 <MX_TIM1_Init+0x118>)
 8023592:	2200      	movs	r2, #0
 8023594:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023596:	4b30      	ldr	r3, [pc, #192]	; (8023658 <MX_TIM1_Init+0x118>)
 8023598:	2200      	movs	r2, #0
 802359a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 802359c:	482e      	ldr	r0, [pc, #184]	; (8023658 <MX_TIM1_Init+0x118>)
 802359e:	f006 f91c 	bl	80297da <HAL_TIM_PWM_Init>
 80235a2:	4603      	mov	r3, r0
 80235a4:	2b00      	cmp	r3, #0
 80235a6:	d001      	beq.n	80235ac <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80235a8:	f000 fc0c 	bl	8023dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80235ac:	2300      	movs	r3, #0
 80235ae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80235b0:	2300      	movs	r3, #0
 80235b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80235b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80235b8:	4619      	mov	r1, r3
 80235ba:	4827      	ldr	r0, [pc, #156]	; (8023658 <MX_TIM1_Init+0x118>)
 80235bc:	f006 fffe 	bl	802a5bc <HAL_TIMEx_MasterConfigSynchronization>
 80235c0:	4603      	mov	r3, r0
 80235c2:	2b00      	cmp	r3, #0
 80235c4:	d001      	beq.n	80235ca <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80235c6:	f000 fbfd 	bl	8023dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80235ca:	2360      	movs	r3, #96	; 0x60
 80235cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80235ce:	2300      	movs	r3, #0
 80235d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80235d2:	2300      	movs	r3, #0
 80235d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80235d6:	2300      	movs	r3, #0
 80235d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80235da:	2300      	movs	r3, #0
 80235dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80235de:	2300      	movs	r3, #0
 80235e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80235e2:	2300      	movs	r3, #0
 80235e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80235e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80235ea:	2204      	movs	r2, #4
 80235ec:	4619      	mov	r1, r3
 80235ee:	481a      	ldr	r0, [pc, #104]	; (8023658 <MX_TIM1_Init+0x118>)
 80235f0:	f006 fb2e 	bl	8029c50 <HAL_TIM_PWM_ConfigChannel>
 80235f4:	4603      	mov	r3, r0
 80235f6:	2b00      	cmp	r3, #0
 80235f8:	d001      	beq.n	80235fe <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80235fa:	f000 fbe3 	bl	8023dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80235fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023602:	220c      	movs	r2, #12
 8023604:	4619      	mov	r1, r3
 8023606:	4814      	ldr	r0, [pc, #80]	; (8023658 <MX_TIM1_Init+0x118>)
 8023608:	f006 fb22 	bl	8029c50 <HAL_TIM_PWM_ConfigChannel>
 802360c:	4603      	mov	r3, r0
 802360e:	2b00      	cmp	r3, #0
 8023610:	d001      	beq.n	8023616 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8023612:	f000 fbd7 	bl	8023dc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8023616:	2300      	movs	r3, #0
 8023618:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 802361a:	2300      	movs	r3, #0
 802361c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 802361e:	2300      	movs	r3, #0
 8023620:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8023622:	2300      	movs	r3, #0
 8023624:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8023626:	2300      	movs	r3, #0
 8023628:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 802362a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802362e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8023630:	2300      	movs	r3, #0
 8023632:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8023634:	1d3b      	adds	r3, r7, #4
 8023636:	4619      	mov	r1, r3
 8023638:	4807      	ldr	r0, [pc, #28]	; (8023658 <MX_TIM1_Init+0x118>)
 802363a:	f007 f83b 	bl	802a6b4 <HAL_TIMEx_ConfigBreakDeadTime>
 802363e:	4603      	mov	r3, r0
 8023640:	2b00      	cmp	r3, #0
 8023642:	d001      	beq.n	8023648 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8023644:	f000 fbbe 	bl	8023dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8023648:	4803      	ldr	r0, [pc, #12]	; (8023658 <MX_TIM1_Init+0x118>)
 802364a:	f001 fb3b 	bl	8024cc4 <HAL_TIM_MspPostInit>

}
 802364e:	bf00      	nop
 8023650:	3748      	adds	r7, #72	; 0x48
 8023652:	46bd      	mov	sp, r7
 8023654:	bd80      	pop	{r7, pc}
 8023656:	bf00      	nop
 8023658:	20000a8c 	.word	0x20000a8c
 802365c:	40010000 	.word	0x40010000

08023660 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8023660:	b580      	push	{r7, lr}
 8023662:	b086      	sub	sp, #24
 8023664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8023666:	f107 0308 	add.w	r3, r7, #8
 802366a:	2200      	movs	r2, #0
 802366c:	601a      	str	r2, [r3, #0]
 802366e:	605a      	str	r2, [r3, #4]
 8023670:	609a      	str	r2, [r3, #8]
 8023672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023674:	463b      	mov	r3, r7
 8023676:	2200      	movs	r2, #0
 8023678:	601a      	str	r2, [r3, #0]
 802367a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 802367c:	4b1d      	ldr	r3, [pc, #116]	; (80236f4 <MX_TIM2_Init+0x94>)
 802367e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023682:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8023684:	4b1b      	ldr	r3, [pc, #108]	; (80236f4 <MX_TIM2_Init+0x94>)
 8023686:	2204      	movs	r2, #4
 8023688:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 802368a:	4b1a      	ldr	r3, [pc, #104]	; (80236f4 <MX_TIM2_Init+0x94>)
 802368c:	2200      	movs	r2, #0
 802368e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 8023690:	4b18      	ldr	r3, [pc, #96]	; (80236f4 <MX_TIM2_Init+0x94>)
 8023692:	4a19      	ldr	r2, [pc, #100]	; (80236f8 <MX_TIM2_Init+0x98>)
 8023694:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023696:	4b17      	ldr	r3, [pc, #92]	; (80236f4 <MX_TIM2_Init+0x94>)
 8023698:	2200      	movs	r2, #0
 802369a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802369c:	4b15      	ldr	r3, [pc, #84]	; (80236f4 <MX_TIM2_Init+0x94>)
 802369e:	2200      	movs	r2, #0
 80236a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80236a2:	4814      	ldr	r0, [pc, #80]	; (80236f4 <MX_TIM2_Init+0x94>)
 80236a4:	f006 f84a 	bl	802973c <HAL_TIM_Base_Init>
 80236a8:	4603      	mov	r3, r0
 80236aa:	2b00      	cmp	r3, #0
 80236ac:	d001      	beq.n	80236b2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80236ae:	f000 fb89 	bl	8023dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80236b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80236b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80236b8:	f107 0308 	add.w	r3, r7, #8
 80236bc:	4619      	mov	r1, r3
 80236be:	480d      	ldr	r0, [pc, #52]	; (80236f4 <MX_TIM2_Init+0x94>)
 80236c0:	f006 fb8c 	bl	8029ddc <HAL_TIM_ConfigClockSource>
 80236c4:	4603      	mov	r3, r0
 80236c6:	2b00      	cmp	r3, #0
 80236c8:	d001      	beq.n	80236ce <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80236ca:	f000 fb7b 	bl	8023dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80236ce:	2300      	movs	r3, #0
 80236d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80236d2:	2300      	movs	r3, #0
 80236d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80236d6:	463b      	mov	r3, r7
 80236d8:	4619      	mov	r1, r3
 80236da:	4806      	ldr	r0, [pc, #24]	; (80236f4 <MX_TIM2_Init+0x94>)
 80236dc:	f006 ff6e 	bl	802a5bc <HAL_TIMEx_MasterConfigSynchronization>
 80236e0:	4603      	mov	r3, r0
 80236e2:	2b00      	cmp	r3, #0
 80236e4:	d001      	beq.n	80236ea <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80236e6:	f000 fb6d 	bl	8023dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80236ea:	bf00      	nop
 80236ec:	3718      	adds	r7, #24
 80236ee:	46bd      	mov	sp, r7
 80236f0:	bd80      	pop	{r7, pc}
 80236f2:	bf00      	nop
 80236f4:	20000acc 	.word	0x20000acc
 80236f8:	00019a27 	.word	0x00019a27

080236fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80236fc:	b580      	push	{r7, lr}
 80236fe:	b08a      	sub	sp, #40	; 0x28
 8023700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023702:	f107 0320 	add.w	r3, r7, #32
 8023706:	2200      	movs	r2, #0
 8023708:	601a      	str	r2, [r3, #0]
 802370a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 802370c:	1d3b      	adds	r3, r7, #4
 802370e:	2200      	movs	r2, #0
 8023710:	601a      	str	r2, [r3, #0]
 8023712:	605a      	str	r2, [r3, #4]
 8023714:	609a      	str	r2, [r3, #8]
 8023716:	60da      	str	r2, [r3, #12]
 8023718:	611a      	str	r2, [r3, #16]
 802371a:	615a      	str	r2, [r3, #20]
 802371c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 802371e:	4b32      	ldr	r3, [pc, #200]	; (80237e8 <MX_TIM3_Init+0xec>)
 8023720:	4a32      	ldr	r2, [pc, #200]	; (80237ec <MX_TIM3_Init+0xf0>)
 8023722:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8023724:	4b30      	ldr	r3, [pc, #192]	; (80237e8 <MX_TIM3_Init+0xec>)
 8023726:	2200      	movs	r2, #0
 8023728:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802372a:	4b2f      	ldr	r3, [pc, #188]	; (80237e8 <MX_TIM3_Init+0xec>)
 802372c:	2200      	movs	r2, #0
 802372e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8023730:	4b2d      	ldr	r3, [pc, #180]	; (80237e8 <MX_TIM3_Init+0xec>)
 8023732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023736:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023738:	4b2b      	ldr	r3, [pc, #172]	; (80237e8 <MX_TIM3_Init+0xec>)
 802373a:	2200      	movs	r2, #0
 802373c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802373e:	4b2a      	ldr	r3, [pc, #168]	; (80237e8 <MX_TIM3_Init+0xec>)
 8023740:	2200      	movs	r2, #0
 8023742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8023744:	4828      	ldr	r0, [pc, #160]	; (80237e8 <MX_TIM3_Init+0xec>)
 8023746:	f006 f848 	bl	80297da <HAL_TIM_PWM_Init>
 802374a:	4603      	mov	r3, r0
 802374c:	2b00      	cmp	r3, #0
 802374e:	d001      	beq.n	8023754 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8023750:	f000 fb38 	bl	8023dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023754:	2300      	movs	r3, #0
 8023756:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023758:	2300      	movs	r3, #0
 802375a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 802375c:	f107 0320 	add.w	r3, r7, #32
 8023760:	4619      	mov	r1, r3
 8023762:	4821      	ldr	r0, [pc, #132]	; (80237e8 <MX_TIM3_Init+0xec>)
 8023764:	f006 ff2a 	bl	802a5bc <HAL_TIMEx_MasterConfigSynchronization>
 8023768:	4603      	mov	r3, r0
 802376a:	2b00      	cmp	r3, #0
 802376c:	d001      	beq.n	8023772 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 802376e:	f000 fb29 	bl	8023dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023772:	2360      	movs	r3, #96	; 0x60
 8023774:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023776:	2300      	movs	r3, #0
 8023778:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802377a:	2300      	movs	r3, #0
 802377c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802377e:	2300      	movs	r3, #0
 8023780:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023782:	1d3b      	adds	r3, r7, #4
 8023784:	2200      	movs	r2, #0
 8023786:	4619      	mov	r1, r3
 8023788:	4817      	ldr	r0, [pc, #92]	; (80237e8 <MX_TIM3_Init+0xec>)
 802378a:	f006 fa61 	bl	8029c50 <HAL_TIM_PWM_ConfigChannel>
 802378e:	4603      	mov	r3, r0
 8023790:	2b00      	cmp	r3, #0
 8023792:	d001      	beq.n	8023798 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8023794:	f000 fb16 	bl	8023dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023798:	1d3b      	adds	r3, r7, #4
 802379a:	2204      	movs	r2, #4
 802379c:	4619      	mov	r1, r3
 802379e:	4812      	ldr	r0, [pc, #72]	; (80237e8 <MX_TIM3_Init+0xec>)
 80237a0:	f006 fa56 	bl	8029c50 <HAL_TIM_PWM_ConfigChannel>
 80237a4:	4603      	mov	r3, r0
 80237a6:	2b00      	cmp	r3, #0
 80237a8:	d001      	beq.n	80237ae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80237aa:	f000 fb0b 	bl	8023dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80237ae:	1d3b      	adds	r3, r7, #4
 80237b0:	2208      	movs	r2, #8
 80237b2:	4619      	mov	r1, r3
 80237b4:	480c      	ldr	r0, [pc, #48]	; (80237e8 <MX_TIM3_Init+0xec>)
 80237b6:	f006 fa4b 	bl	8029c50 <HAL_TIM_PWM_ConfigChannel>
 80237ba:	4603      	mov	r3, r0
 80237bc:	2b00      	cmp	r3, #0
 80237be:	d001      	beq.n	80237c4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80237c0:	f000 fb00 	bl	8023dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80237c4:	1d3b      	adds	r3, r7, #4
 80237c6:	220c      	movs	r2, #12
 80237c8:	4619      	mov	r1, r3
 80237ca:	4807      	ldr	r0, [pc, #28]	; (80237e8 <MX_TIM3_Init+0xec>)
 80237cc:	f006 fa40 	bl	8029c50 <HAL_TIM_PWM_ConfigChannel>
 80237d0:	4603      	mov	r3, r0
 80237d2:	2b00      	cmp	r3, #0
 80237d4:	d001      	beq.n	80237da <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80237d6:	f000 faf5 	bl	8023dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80237da:	4803      	ldr	r0, [pc, #12]	; (80237e8 <MX_TIM3_Init+0xec>)
 80237dc:	f001 fa72 	bl	8024cc4 <HAL_TIM_MspPostInit>

}
 80237e0:	bf00      	nop
 80237e2:	3728      	adds	r7, #40	; 0x28
 80237e4:	46bd      	mov	sp, r7
 80237e6:	bd80      	pop	{r7, pc}
 80237e8:	200008cc 	.word	0x200008cc
 80237ec:	40000400 	.word	0x40000400

080237f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80237f0:	b580      	push	{r7, lr}
 80237f2:	b08c      	sub	sp, #48	; 0x30
 80237f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80237f6:	f107 030c 	add.w	r3, r7, #12
 80237fa:	2224      	movs	r2, #36	; 0x24
 80237fc:	2100      	movs	r1, #0
 80237fe:	4618      	mov	r0, r3
 8023800:	f006 fffd 	bl	802a7fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023804:	1d3b      	adds	r3, r7, #4
 8023806:	2200      	movs	r2, #0
 8023808:	601a      	str	r2, [r3, #0]
 802380a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 802380c:	4b20      	ldr	r3, [pc, #128]	; (8023890 <MX_TIM4_Init+0xa0>)
 802380e:	4a21      	ldr	r2, [pc, #132]	; (8023894 <MX_TIM4_Init+0xa4>)
 8023810:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8023812:	4b1f      	ldr	r3, [pc, #124]	; (8023890 <MX_TIM4_Init+0xa0>)
 8023814:	2200      	movs	r2, #0
 8023816:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023818:	4b1d      	ldr	r3, [pc, #116]	; (8023890 <MX_TIM4_Init+0xa0>)
 802381a:	2200      	movs	r2, #0
 802381c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 802381e:	4b1c      	ldr	r3, [pc, #112]	; (8023890 <MX_TIM4_Init+0xa0>)
 8023820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023824:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023826:	4b1a      	ldr	r3, [pc, #104]	; (8023890 <MX_TIM4_Init+0xa0>)
 8023828:	2200      	movs	r2, #0
 802382a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802382c:	4b18      	ldr	r3, [pc, #96]	; (8023890 <MX_TIM4_Init+0xa0>)
 802382e:	2200      	movs	r2, #0
 8023830:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8023832:	2303      	movs	r3, #3
 8023834:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8023836:	2300      	movs	r3, #0
 8023838:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 802383a:	2301      	movs	r3, #1
 802383c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 802383e:	2300      	movs	r3, #0
 8023840:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8023842:	2300      	movs	r3, #0
 8023844:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8023846:	2300      	movs	r3, #0
 8023848:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 802384a:	2301      	movs	r3, #1
 802384c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 802384e:	2300      	movs	r3, #0
 8023850:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8023852:	2300      	movs	r3, #0
 8023854:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8023856:	f107 030c 	add.w	r3, r7, #12
 802385a:	4619      	mov	r1, r3
 802385c:	480c      	ldr	r0, [pc, #48]	; (8023890 <MX_TIM4_Init+0xa0>)
 802385e:	f006 f825 	bl	80298ac <HAL_TIM_Encoder_Init>
 8023862:	4603      	mov	r3, r0
 8023864:	2b00      	cmp	r3, #0
 8023866:	d001      	beq.n	802386c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8023868:	f000 faac 	bl	8023dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802386c:	2300      	movs	r3, #0
 802386e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023870:	2300      	movs	r3, #0
 8023872:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8023874:	1d3b      	adds	r3, r7, #4
 8023876:	4619      	mov	r1, r3
 8023878:	4805      	ldr	r0, [pc, #20]	; (8023890 <MX_TIM4_Init+0xa0>)
 802387a:	f006 fe9f 	bl	802a5bc <HAL_TIMEx_MasterConfigSynchronization>
 802387e:	4603      	mov	r3, r0
 8023880:	2b00      	cmp	r3, #0
 8023882:	d001      	beq.n	8023888 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8023884:	f000 fa9e 	bl	8023dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8023888:	bf00      	nop
 802388a:	3730      	adds	r7, #48	; 0x30
 802388c:	46bd      	mov	sp, r7
 802388e:	bd80      	pop	{r7, pc}
 8023890:	200007f8 	.word	0x200007f8
 8023894:	40000800 	.word	0x40000800

08023898 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8023898:	b580      	push	{r7, lr}
 802389a:	b086      	sub	sp, #24
 802389c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802389e:	f107 0308 	add.w	r3, r7, #8
 80238a2:	2200      	movs	r2, #0
 80238a4:	601a      	str	r2, [r3, #0]
 80238a6:	605a      	str	r2, [r3, #4]
 80238a8:	609a      	str	r2, [r3, #8]
 80238aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80238ac:	463b      	mov	r3, r7
 80238ae:	2200      	movs	r2, #0
 80238b0:	601a      	str	r2, [r3, #0]
 80238b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80238b4:	4b1d      	ldr	r3, [pc, #116]	; (802392c <MX_TIM5_Init+0x94>)
 80238b6:	4a1e      	ldr	r2, [pc, #120]	; (8023930 <MX_TIM5_Init+0x98>)
 80238b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 80238ba:	4b1c      	ldr	r3, [pc, #112]	; (802392c <MX_TIM5_Init+0x94>)
 80238bc:	2204      	movs	r2, #4
 80238be:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80238c0:	4b1a      	ldr	r3, [pc, #104]	; (802392c <MX_TIM5_Init+0x94>)
 80238c2:	2200      	movs	r2, #0
 80238c4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 80238c6:	4b19      	ldr	r3, [pc, #100]	; (802392c <MX_TIM5_Init+0x94>)
 80238c8:	f245 2207 	movw	r2, #20999	; 0x5207
 80238cc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80238ce:	4b17      	ldr	r3, [pc, #92]	; (802392c <MX_TIM5_Init+0x94>)
 80238d0:	2200      	movs	r2, #0
 80238d2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80238d4:	4b15      	ldr	r3, [pc, #84]	; (802392c <MX_TIM5_Init+0x94>)
 80238d6:	2200      	movs	r2, #0
 80238d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80238da:	4814      	ldr	r0, [pc, #80]	; (802392c <MX_TIM5_Init+0x94>)
 80238dc:	f005 ff2e 	bl	802973c <HAL_TIM_Base_Init>
 80238e0:	4603      	mov	r3, r0
 80238e2:	2b00      	cmp	r3, #0
 80238e4:	d001      	beq.n	80238ea <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80238e6:	f000 fa6d 	bl	8023dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80238ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80238ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80238f0:	f107 0308 	add.w	r3, r7, #8
 80238f4:	4619      	mov	r1, r3
 80238f6:	480d      	ldr	r0, [pc, #52]	; (802392c <MX_TIM5_Init+0x94>)
 80238f8:	f006 fa70 	bl	8029ddc <HAL_TIM_ConfigClockSource>
 80238fc:	4603      	mov	r3, r0
 80238fe:	2b00      	cmp	r3, #0
 8023900:	d001      	beq.n	8023906 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8023902:	f000 fa5f 	bl	8023dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023906:	2300      	movs	r3, #0
 8023908:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802390a:	2300      	movs	r3, #0
 802390c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 802390e:	463b      	mov	r3, r7
 8023910:	4619      	mov	r1, r3
 8023912:	4806      	ldr	r0, [pc, #24]	; (802392c <MX_TIM5_Init+0x94>)
 8023914:	f006 fe52 	bl	802a5bc <HAL_TIMEx_MasterConfigSynchronization>
 8023918:	4603      	mov	r3, r0
 802391a:	2b00      	cmp	r3, #0
 802391c:	d001      	beq.n	8023922 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 802391e:	f000 fa51 	bl	8023dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8023922:	bf00      	nop
 8023924:	3718      	adds	r7, #24
 8023926:	46bd      	mov	sp, r7
 8023928:	bd80      	pop	{r7, pc}
 802392a:	bf00      	nop
 802392c:	2000088c 	.word	0x2000088c
 8023930:	40000c00 	.word	0x40000c00

08023934 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8023934:	b580      	push	{r7, lr}
 8023936:	b082      	sub	sp, #8
 8023938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802393a:	463b      	mov	r3, r7
 802393c:	2200      	movs	r2, #0
 802393e:	601a      	str	r2, [r3, #0]
 8023940:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8023942:	4b15      	ldr	r3, [pc, #84]	; (8023998 <MX_TIM6_Init+0x64>)
 8023944:	4a15      	ldr	r2, [pc, #84]	; (802399c <MX_TIM6_Init+0x68>)
 8023946:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8023948:	4b13      	ldr	r3, [pc, #76]	; (8023998 <MX_TIM6_Init+0x64>)
 802394a:	2204      	movs	r2, #4
 802394c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 802394e:	4b12      	ldr	r3, [pc, #72]	; (8023998 <MX_TIM6_Init+0x64>)
 8023950:	2200      	movs	r2, #0
 8023952:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8023954:	4b10      	ldr	r3, [pc, #64]	; (8023998 <MX_TIM6_Init+0x64>)
 8023956:	f642 1203 	movw	r2, #10499	; 0x2903
 802395a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802395c:	4b0e      	ldr	r3, [pc, #56]	; (8023998 <MX_TIM6_Init+0x64>)
 802395e:	2200      	movs	r2, #0
 8023960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8023962:	480d      	ldr	r0, [pc, #52]	; (8023998 <MX_TIM6_Init+0x64>)
 8023964:	f005 feea 	bl	802973c <HAL_TIM_Base_Init>
 8023968:	4603      	mov	r3, r0
 802396a:	2b00      	cmp	r3, #0
 802396c:	d001      	beq.n	8023972 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 802396e:	f000 fa29 	bl	8023dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023972:	2300      	movs	r3, #0
 8023974:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023976:	2300      	movs	r3, #0
 8023978:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 802397a:	463b      	mov	r3, r7
 802397c:	4619      	mov	r1, r3
 802397e:	4806      	ldr	r0, [pc, #24]	; (8023998 <MX_TIM6_Init+0x64>)
 8023980:	f006 fe1c 	bl	802a5bc <HAL_TIMEx_MasterConfigSynchronization>
 8023984:	4603      	mov	r3, r0
 8023986:	2b00      	cmp	r3, #0
 8023988:	d001      	beq.n	802398e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 802398a:	f000 fa1b 	bl	8023dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 802398e:	bf00      	nop
 8023990:	3708      	adds	r7, #8
 8023992:	46bd      	mov	sp, r7
 8023994:	bd80      	pop	{r7, pc}
 8023996:	bf00      	nop
 8023998:	20000a4c 	.word	0x20000a4c
 802399c:	40001000 	.word	0x40001000

080239a0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80239a0:	b580      	push	{r7, lr}
 80239a2:	b082      	sub	sp, #8
 80239a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80239a6:	463b      	mov	r3, r7
 80239a8:	2200      	movs	r2, #0
 80239aa:	601a      	str	r2, [r3, #0]
 80239ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80239ae:	4b15      	ldr	r3, [pc, #84]	; (8023a04 <MX_TIM7_Init+0x64>)
 80239b0:	4a15      	ldr	r2, [pc, #84]	; (8023a08 <MX_TIM7_Init+0x68>)
 80239b2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 80239b4:	4b13      	ldr	r3, [pc, #76]	; (8023a04 <MX_TIM7_Init+0x64>)
 80239b6:	2204      	movs	r2, #4
 80239b8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80239ba:	4b12      	ldr	r3, [pc, #72]	; (8023a04 <MX_TIM7_Init+0x64>)
 80239bc:	2200      	movs	r2, #0
 80239be:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 80239c0:	4b10      	ldr	r3, [pc, #64]	; (8023a04 <MX_TIM7_Init+0x64>)
 80239c2:	f240 4219 	movw	r2, #1049	; 0x419
 80239c6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80239c8:	4b0e      	ldr	r3, [pc, #56]	; (8023a04 <MX_TIM7_Init+0x64>)
 80239ca:	2200      	movs	r2, #0
 80239cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80239ce:	480d      	ldr	r0, [pc, #52]	; (8023a04 <MX_TIM7_Init+0x64>)
 80239d0:	f005 feb4 	bl	802973c <HAL_TIM_Base_Init>
 80239d4:	4603      	mov	r3, r0
 80239d6:	2b00      	cmp	r3, #0
 80239d8:	d001      	beq.n	80239de <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80239da:	f000 f9f3 	bl	8023dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80239de:	2300      	movs	r3, #0
 80239e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80239e2:	2300      	movs	r3, #0
 80239e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80239e6:	463b      	mov	r3, r7
 80239e8:	4619      	mov	r1, r3
 80239ea:	4806      	ldr	r0, [pc, #24]	; (8023a04 <MX_TIM7_Init+0x64>)
 80239ec:	f006 fde6 	bl	802a5bc <HAL_TIMEx_MasterConfigSynchronization>
 80239f0:	4603      	mov	r3, r0
 80239f2:	2b00      	cmp	r3, #0
 80239f4:	d001      	beq.n	80239fa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80239f6:	f000 f9e5 	bl	8023dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80239fa:	bf00      	nop
 80239fc:	3708      	adds	r7, #8
 80239fe:	46bd      	mov	sp, r7
 8023a00:	bd80      	pop	{r7, pc}
 8023a02:	bf00      	nop
 8023a04:	20000b4c 	.word	0x20000b4c
 8023a08:	40001400 	.word	0x40001400

08023a0c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8023a0c:	b580      	push	{r7, lr}
 8023a0e:	b08c      	sub	sp, #48	; 0x30
 8023a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8023a12:	f107 030c 	add.w	r3, r7, #12
 8023a16:	2224      	movs	r2, #36	; 0x24
 8023a18:	2100      	movs	r1, #0
 8023a1a:	4618      	mov	r0, r3
 8023a1c:	f006 feef 	bl	802a7fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023a20:	1d3b      	adds	r3, r7, #4
 8023a22:	2200      	movs	r2, #0
 8023a24:	601a      	str	r2, [r3, #0]
 8023a26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8023a28:	4b22      	ldr	r3, [pc, #136]	; (8023ab4 <MX_TIM8_Init+0xa8>)
 8023a2a:	4a23      	ldr	r2, [pc, #140]	; (8023ab8 <MX_TIM8_Init+0xac>)
 8023a2c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8023a2e:	4b21      	ldr	r3, [pc, #132]	; (8023ab4 <MX_TIM8_Init+0xa8>)
 8023a30:	2200      	movs	r2, #0
 8023a32:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023a34:	4b1f      	ldr	r3, [pc, #124]	; (8023ab4 <MX_TIM8_Init+0xa8>)
 8023a36:	2200      	movs	r2, #0
 8023a38:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8023a3a:	4b1e      	ldr	r3, [pc, #120]	; (8023ab4 <MX_TIM8_Init+0xa8>)
 8023a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023a40:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023a42:	4b1c      	ldr	r3, [pc, #112]	; (8023ab4 <MX_TIM8_Init+0xa8>)
 8023a44:	2200      	movs	r2, #0
 8023a46:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8023a48:	4b1a      	ldr	r3, [pc, #104]	; (8023ab4 <MX_TIM8_Init+0xa8>)
 8023a4a:	2200      	movs	r2, #0
 8023a4c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023a4e:	4b19      	ldr	r3, [pc, #100]	; (8023ab4 <MX_TIM8_Init+0xa8>)
 8023a50:	2200      	movs	r2, #0
 8023a52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8023a54:	2303      	movs	r3, #3
 8023a56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8023a58:	2300      	movs	r3, #0
 8023a5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8023a5c:	2301      	movs	r3, #1
 8023a5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8023a60:	2300      	movs	r3, #0
 8023a62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8023a64:	2300      	movs	r3, #0
 8023a66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8023a68:	2300      	movs	r3, #0
 8023a6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8023a6c:	2301      	movs	r3, #1
 8023a6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8023a70:	2300      	movs	r3, #0
 8023a72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8023a74:	2300      	movs	r3, #0
 8023a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8023a78:	f107 030c 	add.w	r3, r7, #12
 8023a7c:	4619      	mov	r1, r3
 8023a7e:	480d      	ldr	r0, [pc, #52]	; (8023ab4 <MX_TIM8_Init+0xa8>)
 8023a80:	f005 ff14 	bl	80298ac <HAL_TIM_Encoder_Init>
 8023a84:	4603      	mov	r3, r0
 8023a86:	2b00      	cmp	r3, #0
 8023a88:	d001      	beq.n	8023a8e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8023a8a:	f000 f99b 	bl	8023dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023a8e:	2300      	movs	r3, #0
 8023a90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023a92:	2300      	movs	r3, #0
 8023a94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8023a96:	1d3b      	adds	r3, r7, #4
 8023a98:	4619      	mov	r1, r3
 8023a9a:	4806      	ldr	r0, [pc, #24]	; (8023ab4 <MX_TIM8_Init+0xa8>)
 8023a9c:	f006 fd8e 	bl	802a5bc <HAL_TIMEx_MasterConfigSynchronization>
 8023aa0:	4603      	mov	r3, r0
 8023aa2:	2b00      	cmp	r3, #0
 8023aa4:	d001      	beq.n	8023aaa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8023aa6:	f000 f98d 	bl	8023dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8023aaa:	bf00      	nop
 8023aac:	3730      	adds	r7, #48	; 0x30
 8023aae:	46bd      	mov	sp, r7
 8023ab0:	bd80      	pop	{r7, pc}
 8023ab2:	bf00      	nop
 8023ab4:	200007b8 	.word	0x200007b8
 8023ab8:	40010400 	.word	0x40010400

08023abc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8023abc:	b580      	push	{r7, lr}
 8023abe:	b088      	sub	sp, #32
 8023ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8023ac2:	1d3b      	adds	r3, r7, #4
 8023ac4:	2200      	movs	r2, #0
 8023ac6:	601a      	str	r2, [r3, #0]
 8023ac8:	605a      	str	r2, [r3, #4]
 8023aca:	609a      	str	r2, [r3, #8]
 8023acc:	60da      	str	r2, [r3, #12]
 8023ace:	611a      	str	r2, [r3, #16]
 8023ad0:	615a      	str	r2, [r3, #20]
 8023ad2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8023ad4:	4b1e      	ldr	r3, [pc, #120]	; (8023b50 <MX_TIM11_Init+0x94>)
 8023ad6:	4a1f      	ldr	r2, [pc, #124]	; (8023b54 <MX_TIM11_Init+0x98>)
 8023ad8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8023ada:	4b1d      	ldr	r3, [pc, #116]	; (8023b50 <MX_TIM11_Init+0x94>)
 8023adc:	2200      	movs	r2, #0
 8023ade:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023ae0:	4b1b      	ldr	r3, [pc, #108]	; (8023b50 <MX_TIM11_Init+0x94>)
 8023ae2:	2200      	movs	r2, #0
 8023ae4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 8023ae6:	4b1a      	ldr	r3, [pc, #104]	; (8023b50 <MX_TIM11_Init+0x94>)
 8023ae8:	f240 628f 	movw	r2, #1679	; 0x68f
 8023aec:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023aee:	4b18      	ldr	r3, [pc, #96]	; (8023b50 <MX_TIM11_Init+0x94>)
 8023af0:	2200      	movs	r2, #0
 8023af2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023af4:	4b16      	ldr	r3, [pc, #88]	; (8023b50 <MX_TIM11_Init+0x94>)
 8023af6:	2200      	movs	r2, #0
 8023af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8023afa:	4815      	ldr	r0, [pc, #84]	; (8023b50 <MX_TIM11_Init+0x94>)
 8023afc:	f005 fe1e 	bl	802973c <HAL_TIM_Base_Init>
 8023b00:	4603      	mov	r3, r0
 8023b02:	2b00      	cmp	r3, #0
 8023b04:	d001      	beq.n	8023b0a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8023b06:	f000 f95d 	bl	8023dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8023b0a:	4811      	ldr	r0, [pc, #68]	; (8023b50 <MX_TIM11_Init+0x94>)
 8023b0c:	f005 fe65 	bl	80297da <HAL_TIM_PWM_Init>
 8023b10:	4603      	mov	r3, r0
 8023b12:	2b00      	cmp	r3, #0
 8023b14:	d001      	beq.n	8023b1a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8023b16:	f000 f955 	bl	8023dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023b1a:	2360      	movs	r3, #96	; 0x60
 8023b1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023b1e:	2300      	movs	r3, #0
 8023b20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023b22:	2300      	movs	r3, #0
 8023b24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023b26:	2300      	movs	r3, #0
 8023b28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023b2a:	1d3b      	adds	r3, r7, #4
 8023b2c:	2200      	movs	r2, #0
 8023b2e:	4619      	mov	r1, r3
 8023b30:	4807      	ldr	r0, [pc, #28]	; (8023b50 <MX_TIM11_Init+0x94>)
 8023b32:	f006 f88d 	bl	8029c50 <HAL_TIM_PWM_ConfigChannel>
 8023b36:	4603      	mov	r3, r0
 8023b38:	2b00      	cmp	r3, #0
 8023b3a:	d001      	beq.n	8023b40 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8023b3c:	f000 f942 	bl	8023dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8023b40:	4803      	ldr	r0, [pc, #12]	; (8023b50 <MX_TIM11_Init+0x94>)
 8023b42:	f001 f8bf 	bl	8024cc4 <HAL_TIM_MspPostInit>

}
 8023b46:	bf00      	nop
 8023b48:	3720      	adds	r7, #32
 8023b4a:	46bd      	mov	sp, r7
 8023b4c:	bd80      	pop	{r7, pc}
 8023b4e:	bf00      	nop
 8023b50:	200009ac 	.word	0x200009ac
 8023b54:	40014800 	.word	0x40014800

08023b58 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8023b58:	b580      	push	{r7, lr}
 8023b5a:	b088      	sub	sp, #32
 8023b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8023b5e:	1d3b      	adds	r3, r7, #4
 8023b60:	2200      	movs	r2, #0
 8023b62:	601a      	str	r2, [r3, #0]
 8023b64:	605a      	str	r2, [r3, #4]
 8023b66:	609a      	str	r2, [r3, #8]
 8023b68:	60da      	str	r2, [r3, #12]
 8023b6a:	611a      	str	r2, [r3, #16]
 8023b6c:	615a      	str	r2, [r3, #20]
 8023b6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8023b70:	4b1a      	ldr	r3, [pc, #104]	; (8023bdc <MX_TIM12_Init+0x84>)
 8023b72:	4a1b      	ldr	r2, [pc, #108]	; (8023be0 <MX_TIM12_Init+0x88>)
 8023b74:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 8023b76:	4b19      	ldr	r3, [pc, #100]	; (8023bdc <MX_TIM12_Init+0x84>)
 8023b78:	f44f 725c 	mov.w	r2, #880	; 0x370
 8023b7c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023b7e:	4b17      	ldr	r3, [pc, #92]	; (8023bdc <MX_TIM12_Init+0x84>)
 8023b80:	2200      	movs	r2, #0
 8023b82:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 8023b84:	4b15      	ldr	r3, [pc, #84]	; (8023bdc <MX_TIM12_Init+0x84>)
 8023b86:	2235      	movs	r2, #53	; 0x35
 8023b88:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023b8a:	4b14      	ldr	r3, [pc, #80]	; (8023bdc <MX_TIM12_Init+0x84>)
 8023b8c:	2200      	movs	r2, #0
 8023b8e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023b90:	4b12      	ldr	r3, [pc, #72]	; (8023bdc <MX_TIM12_Init+0x84>)
 8023b92:	2200      	movs	r2, #0
 8023b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8023b96:	4811      	ldr	r0, [pc, #68]	; (8023bdc <MX_TIM12_Init+0x84>)
 8023b98:	f005 fe1f 	bl	80297da <HAL_TIM_PWM_Init>
 8023b9c:	4603      	mov	r3, r0
 8023b9e:	2b00      	cmp	r3, #0
 8023ba0:	d001      	beq.n	8023ba6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8023ba2:	f000 f90f 	bl	8023dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023ba6:	2360      	movs	r3, #96	; 0x60
 8023ba8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023baa:	2300      	movs	r3, #0
 8023bac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023bae:	2300      	movs	r3, #0
 8023bb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023bb2:	2300      	movs	r3, #0
 8023bb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023bb6:	1d3b      	adds	r3, r7, #4
 8023bb8:	2204      	movs	r2, #4
 8023bba:	4619      	mov	r1, r3
 8023bbc:	4807      	ldr	r0, [pc, #28]	; (8023bdc <MX_TIM12_Init+0x84>)
 8023bbe:	f006 f847 	bl	8029c50 <HAL_TIM_PWM_ConfigChannel>
 8023bc2:	4603      	mov	r3, r0
 8023bc4:	2b00      	cmp	r3, #0
 8023bc6:	d001      	beq.n	8023bcc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8023bc8:	f000 f8fc 	bl	8023dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8023bcc:	4803      	ldr	r0, [pc, #12]	; (8023bdc <MX_TIM12_Init+0x84>)
 8023bce:	f001 f879 	bl	8024cc4 <HAL_TIM_MspPostInit>

}
 8023bd2:	bf00      	nop
 8023bd4:	3720      	adds	r7, #32
 8023bd6:	46bd      	mov	sp, r7
 8023bd8:	bd80      	pop	{r7, pc}
 8023bda:	bf00      	nop
 8023bdc:	20000b0c 	.word	0x20000b0c
 8023be0:	40001800 	.word	0x40001800

08023be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8023be4:	b580      	push	{r7, lr}
 8023be6:	b082      	sub	sp, #8
 8023be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8023bea:	2300      	movs	r3, #0
 8023bec:	607b      	str	r3, [r7, #4]
 8023bee:	4b0c      	ldr	r3, [pc, #48]	; (8023c20 <MX_DMA_Init+0x3c>)
 8023bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023bf2:	4a0b      	ldr	r2, [pc, #44]	; (8023c20 <MX_DMA_Init+0x3c>)
 8023bf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8023bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8023bfa:	4b09      	ldr	r3, [pc, #36]	; (8023c20 <MX_DMA_Init+0x3c>)
 8023bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023c02:	607b      	str	r3, [r7, #4]
 8023c04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8023c06:	2200      	movs	r2, #0
 8023c08:	2100      	movs	r1, #0
 8023c0a:	2038      	movs	r0, #56	; 0x38
 8023c0c:	f003 fa9b 	bl	8027146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8023c10:	2038      	movs	r0, #56	; 0x38
 8023c12:	f003 fab4 	bl	802717e <HAL_NVIC_EnableIRQ>

}
 8023c16:	bf00      	nop
 8023c18:	3708      	adds	r7, #8
 8023c1a:	46bd      	mov	sp, r7
 8023c1c:	bd80      	pop	{r7, pc}
 8023c1e:	bf00      	nop
 8023c20:	40023800 	.word	0x40023800

08023c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8023c24:	b580      	push	{r7, lr}
 8023c26:	b08a      	sub	sp, #40	; 0x28
 8023c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023c2a:	f107 0314 	add.w	r3, r7, #20
 8023c2e:	2200      	movs	r2, #0
 8023c30:	601a      	str	r2, [r3, #0]
 8023c32:	605a      	str	r2, [r3, #4]
 8023c34:	609a      	str	r2, [r3, #8]
 8023c36:	60da      	str	r2, [r3, #12]
 8023c38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8023c3a:	2300      	movs	r3, #0
 8023c3c:	613b      	str	r3, [r7, #16]
 8023c3e:	4b5c      	ldr	r3, [pc, #368]	; (8023db0 <MX_GPIO_Init+0x18c>)
 8023c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c42:	4a5b      	ldr	r2, [pc, #364]	; (8023db0 <MX_GPIO_Init+0x18c>)
 8023c44:	f043 0304 	orr.w	r3, r3, #4
 8023c48:	6313      	str	r3, [r2, #48]	; 0x30
 8023c4a:	4b59      	ldr	r3, [pc, #356]	; (8023db0 <MX_GPIO_Init+0x18c>)
 8023c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c4e:	f003 0304 	and.w	r3, r3, #4
 8023c52:	613b      	str	r3, [r7, #16]
 8023c54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8023c56:	2300      	movs	r3, #0
 8023c58:	60fb      	str	r3, [r7, #12]
 8023c5a:	4b55      	ldr	r3, [pc, #340]	; (8023db0 <MX_GPIO_Init+0x18c>)
 8023c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c5e:	4a54      	ldr	r2, [pc, #336]	; (8023db0 <MX_GPIO_Init+0x18c>)
 8023c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023c64:	6313      	str	r3, [r2, #48]	; 0x30
 8023c66:	4b52      	ldr	r3, [pc, #328]	; (8023db0 <MX_GPIO_Init+0x18c>)
 8023c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023c6e:	60fb      	str	r3, [r7, #12]
 8023c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c72:	2300      	movs	r3, #0
 8023c74:	60bb      	str	r3, [r7, #8]
 8023c76:	4b4e      	ldr	r3, [pc, #312]	; (8023db0 <MX_GPIO_Init+0x18c>)
 8023c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c7a:	4a4d      	ldr	r2, [pc, #308]	; (8023db0 <MX_GPIO_Init+0x18c>)
 8023c7c:	f043 0301 	orr.w	r3, r3, #1
 8023c80:	6313      	str	r3, [r2, #48]	; 0x30
 8023c82:	4b4b      	ldr	r3, [pc, #300]	; (8023db0 <MX_GPIO_Init+0x18c>)
 8023c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c86:	f003 0301 	and.w	r3, r3, #1
 8023c8a:	60bb      	str	r3, [r7, #8]
 8023c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8023c8e:	2300      	movs	r3, #0
 8023c90:	607b      	str	r3, [r7, #4]
 8023c92:	4b47      	ldr	r3, [pc, #284]	; (8023db0 <MX_GPIO_Init+0x18c>)
 8023c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c96:	4a46      	ldr	r2, [pc, #280]	; (8023db0 <MX_GPIO_Init+0x18c>)
 8023c98:	f043 0302 	orr.w	r3, r3, #2
 8023c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8023c9e:	4b44      	ldr	r3, [pc, #272]	; (8023db0 <MX_GPIO_Init+0x18c>)
 8023ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023ca2:	f003 0302 	and.w	r3, r3, #2
 8023ca6:	607b      	str	r3, [r7, #4]
 8023ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023caa:	2300      	movs	r3, #0
 8023cac:	603b      	str	r3, [r7, #0]
 8023cae:	4b40      	ldr	r3, [pc, #256]	; (8023db0 <MX_GPIO_Init+0x18c>)
 8023cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023cb2:	4a3f      	ldr	r2, [pc, #252]	; (8023db0 <MX_GPIO_Init+0x18c>)
 8023cb4:	f043 0308 	orr.w	r3, r3, #8
 8023cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8023cba:	4b3d      	ldr	r3, [pc, #244]	; (8023db0 <MX_GPIO_Init+0x18c>)
 8023cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023cbe:	f003 0308 	and.w	r3, r3, #8
 8023cc2:	603b      	str	r3, [r7, #0]
 8023cc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8023cc6:	2200      	movs	r2, #0
 8023cc8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8023ccc:	4839      	ldr	r0, [pc, #228]	; (8023db4 <MX_GPIO_Init+0x190>)
 8023cce:	f004 fa67 	bl	80281a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8023cd2:	2201      	movs	r2, #1
 8023cd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8023cd8:	4837      	ldr	r0, [pc, #220]	; (8023db8 <MX_GPIO_Init+0x194>)
 8023cda:	f004 fa61 	bl	80281a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8023cde:	2200      	movs	r2, #0
 8023ce0:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 8023ce4:	4835      	ldr	r0, [pc, #212]	; (8023dbc <MX_GPIO_Init+0x198>)
 8023ce6:	f004 fa5b 	bl	80281a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8023cea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8023cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023cf0:	2301      	movs	r3, #1
 8023cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023cf4:	2300      	movs	r3, #0
 8023cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023cf8:	2300      	movs	r3, #0
 8023cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023cfc:	f107 0314 	add.w	r3, r7, #20
 8023d00:	4619      	mov	r1, r3
 8023d02:	482c      	ldr	r0, [pc, #176]	; (8023db4 <MX_GPIO_Init+0x190>)
 8023d04:	f004 f89a 	bl	8027e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8023d08:	2307      	movs	r3, #7
 8023d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023d0c:	2300      	movs	r3, #0
 8023d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023d10:	2301      	movs	r3, #1
 8023d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023d14:	f107 0314 	add.w	r3, r7, #20
 8023d18:	4619      	mov	r1, r3
 8023d1a:	4827      	ldr	r0, [pc, #156]	; (8023db8 <MX_GPIO_Init+0x194>)
 8023d1c:	f004 f88e 	bl	8027e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023d26:	2301      	movs	r3, #1
 8023d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023d2a:	2300      	movs	r3, #0
 8023d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023d2e:	2300      	movs	r3, #0
 8023d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023d32:	f107 0314 	add.w	r3, r7, #20
 8023d36:	4619      	mov	r1, r3
 8023d38:	481f      	ldr	r0, [pc, #124]	; (8023db8 <MX_GPIO_Init+0x194>)
 8023d3a:	f004 f87f 	bl	8027e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 8023d3e:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8023d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023d44:	2300      	movs	r3, #0
 8023d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023d48:	2300      	movs	r3, #0
 8023d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023d4c:	f107 0314 	add.w	r3, r7, #20
 8023d50:	4619      	mov	r1, r3
 8023d52:	4819      	ldr	r0, [pc, #100]	; (8023db8 <MX_GPIO_Init+0x194>)
 8023d54:	f004 f872 	bl	8027e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8023d58:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8023d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023d5e:	2301      	movs	r3, #1
 8023d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023d62:	2300      	movs	r3, #0
 8023d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023d66:	2300      	movs	r3, #0
 8023d68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023d6a:	f107 0314 	add.w	r3, r7, #20
 8023d6e:	4619      	mov	r1, r3
 8023d70:	4812      	ldr	r0, [pc, #72]	; (8023dbc <MX_GPIO_Init+0x198>)
 8023d72:	f004 f863 	bl	8027e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023d7c:	2300      	movs	r3, #0
 8023d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023d80:	2301      	movs	r3, #1
 8023d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023d84:	f107 0314 	add.w	r3, r7, #20
 8023d88:	4619      	mov	r1, r3
 8023d8a:	480c      	ldr	r0, [pc, #48]	; (8023dbc <MX_GPIO_Init+0x198>)
 8023d8c:	f004 f856 	bl	8027e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8023d90:	2304      	movs	r3, #4
 8023d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023d94:	2300      	movs	r3, #0
 8023d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023d98:	2300      	movs	r3, #0
 8023d9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023d9c:	f107 0314 	add.w	r3, r7, #20
 8023da0:	4619      	mov	r1, r3
 8023da2:	4807      	ldr	r0, [pc, #28]	; (8023dc0 <MX_GPIO_Init+0x19c>)
 8023da4:	f004 f84a 	bl	8027e3c <HAL_GPIO_Init>

}
 8023da8:	bf00      	nop
 8023daa:	3728      	adds	r7, #40	; 0x28
 8023dac:	46bd      	mov	sp, r7
 8023dae:	bd80      	pop	{r7, pc}
 8023db0:	40023800 	.word	0x40023800
 8023db4:	40020800 	.word	0x40020800
 8023db8:	40020400 	.word	0x40020400
 8023dbc:	40020000 	.word	0x40020000
 8023dc0:	40020c00 	.word	0x40020c00

08023dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8023dc4:	b480      	push	{r7}
 8023dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8023dc8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8023dca:	e7fe      	b.n	8023dca <Error_Handler+0x6>

08023dcc <_ZN5MotorC1Ev>:
#include "motor.hpp"

Motor::Motor() {}
 8023dcc:	b480      	push	{r7}
 8023dce:	b083      	sub	sp, #12
 8023dd0:	af00      	add	r7, sp, #0
 8023dd2:	6078      	str	r0, [r7, #4]
 8023dd4:	687b      	ldr	r3, [r7, #4]
 8023dd6:	4618      	mov	r0, r3
 8023dd8:	370c      	adds	r7, #12
 8023dda:	46bd      	mov	sp, r7
 8023ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023de0:	4770      	bx	lr
	...

08023de4 <_ZN5Motor4InitEv>:

void Motor::Init()
{
 8023de4:	b580      	push	{r7, lr}
 8023de6:	b082      	sub	sp, #8
 8023de8:	af00      	add	r7, sp, #0
 8023dea:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8023dec:	2104      	movs	r1, #4
 8023dee:	4810      	ldr	r0, [pc, #64]	; (8023e30 <_ZN5Motor4InitEv+0x4c>)
 8023df0:	f005 fd1e 	bl	8029830 <HAL_TIM_PWM_Start>
 8023df4:	4603      	mov	r3, r0
 8023df6:	2b00      	cmp	r3, #0
 8023df8:	bf14      	ite	ne
 8023dfa:	2301      	movne	r3, #1
 8023dfc:	2300      	moveq	r3, #0
 8023dfe:	b2db      	uxtb	r3, r3
 8023e00:	2b00      	cmp	r3, #0
 8023e02:	d002      	beq.n	8023e0a <_ZN5Motor4InitEv+0x26>
    {
        Error_Handler(); // MOTOR_R
 8023e04:	f7ff ffde 	bl	8023dc4 <Error_Handler>
    }
    else if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
    {
        Error_Handler(); // MOTOR_L
    }
}
 8023e08:	e00d      	b.n	8023e26 <_ZN5Motor4InitEv+0x42>
    else if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8023e0a:	210c      	movs	r1, #12
 8023e0c:	4808      	ldr	r0, [pc, #32]	; (8023e30 <_ZN5Motor4InitEv+0x4c>)
 8023e0e:	f005 fd0f 	bl	8029830 <HAL_TIM_PWM_Start>
 8023e12:	4603      	mov	r3, r0
 8023e14:	2b00      	cmp	r3, #0
 8023e16:	bf14      	ite	ne
 8023e18:	2301      	movne	r3, #1
 8023e1a:	2300      	moveq	r3, #0
 8023e1c:	b2db      	uxtb	r3, r3
 8023e1e:	2b00      	cmp	r3, #0
 8023e20:	d001      	beq.n	8023e26 <_ZN5Motor4InitEv+0x42>
        Error_Handler(); // MOTOR_L
 8023e22:	f7ff ffcf 	bl	8023dc4 <Error_Handler>
}
 8023e26:	bf00      	nop
 8023e28:	3708      	adds	r7, #8
 8023e2a:	46bd      	mov	sp, r7
 8023e2c:	bd80      	pop	{r7, pc}
 8023e2e:	bf00      	nop
 8023e30:	20000a8c 	.word	0x20000a8c
 8023e34:	00000000 	.word	0x00000000

08023e38 <_ZN5Motor5DriveEff>:

void Motor::Drive(float translation_ratio, float rotation_ratio)
{
 8023e38:	b580      	push	{r7, lr}
 8023e3a:	b08a      	sub	sp, #40	; 0x28
 8023e3c:	af00      	add	r7, sp, #0
 8023e3e:	60f8      	str	r0, [r7, #12]
 8023e40:	ed87 0a02 	vstr	s0, [r7, #8]
 8023e44:	edc7 0a01 	vstr	s1, [r7, #4]
#ifdef DEBUG_MODE
    g_translation_ratio = translation_ratio;  g_rotation_ratio = rotation_ratio;
 8023e48:	4a89      	ldr	r2, [pc, #548]	; (8024070 <_ZN5Motor5DriveEff+0x238>)
 8023e4a:	68bb      	ldr	r3, [r7, #8]
 8023e4c:	6013      	str	r3, [r2, #0]
 8023e4e:	4a89      	ldr	r2, [pc, #548]	; (8024074 <_ZN5Motor5DriveEff+0x23c>)
 8023e50:	687b      	ldr	r3, [r7, #4]
 8023e52:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(translation_ratio > LIMIT_TRANS_DUTY)       translation_ratio =  LIMIT_TRANS_DUTY;
 8023e54:	68b8      	ldr	r0, [r7, #8]
 8023e56:	f7fc fa57 	bl	8020308 <__aeabi_f2d>
 8023e5a:	a381      	add	r3, pc, #516	; (adr r3, 8024060 <_ZN5Motor5DriveEff+0x228>)
 8023e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e60:	f7fc fd3a 	bl	80208d8 <__aeabi_dcmpgt>
 8023e64:	4603      	mov	r3, r0
 8023e66:	2b00      	cmp	r3, #0
 8023e68:	d002      	beq.n	8023e70 <_ZN5Motor5DriveEff+0x38>
 8023e6a:	4b83      	ldr	r3, [pc, #524]	; (8024078 <_ZN5Motor5DriveEff+0x240>)
 8023e6c:	60bb      	str	r3, [r7, #8]
 8023e6e:	e00c      	b.n	8023e8a <_ZN5Motor5DriveEff+0x52>
    else if(translation_ratio < -LIMIT_TRANS_DUTY) translation_ratio = -LIMIT_TRANS_DUTY;
 8023e70:	68b8      	ldr	r0, [r7, #8]
 8023e72:	f7fc fa49 	bl	8020308 <__aeabi_f2d>
 8023e76:	a37c      	add	r3, pc, #496	; (adr r3, 8024068 <_ZN5Motor5DriveEff+0x230>)
 8023e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e7c:	f7fc fd0e 	bl	802089c <__aeabi_dcmplt>
 8023e80:	4603      	mov	r3, r0
 8023e82:	2b00      	cmp	r3, #0
 8023e84:	d001      	beq.n	8023e8a <_ZN5Motor5DriveEff+0x52>
 8023e86:	4b7d      	ldr	r3, [pc, #500]	; (802407c <_ZN5Motor5DriveEff+0x244>)
 8023e88:	60bb      	str	r3, [r7, #8]

    float sum = translation_ratio + rotation_ratio;
 8023e8a:	ed97 7a02 	vldr	s14, [r7, #8]
 8023e8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8023e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023e96:	edc7 7a06 	vstr	s15, [r7, #24]
    float excess = 0;
 8023e9a:	f04f 0300 	mov.w	r3, #0
 8023e9e:	627b      	str	r3, [r7, #36]	; 0x24

    if(sum > 1.0)       excess = sum - 1.0;
 8023ea0:	edd7 7a06 	vldr	s15, [r7, #24]
 8023ea4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023eb0:	dd08      	ble.n	8023ec4 <_ZN5Motor5DriveEff+0x8c>
 8023eb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8023eb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023eba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023ebe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8023ec2:	e010      	b.n	8023ee6 <_ZN5Motor5DriveEff+0xae>
    else if(sum < -1.0) excess = sum + 1.0;
 8023ec4:	edd7 7a06 	vldr	s15, [r7, #24]
 8023ec8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ed4:	d507      	bpl.n	8023ee6 <_ZN5Motor5DriveEff+0xae>
 8023ed6:	edd7 7a06 	vldr	s15, [r7, #24]
 8023eda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023ede:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023ee2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    translation_ratio -= excess;
 8023ee6:	ed97 7a02 	vldr	s14, [r7, #8]
 8023eea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8023eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023ef2:	edc7 7a02 	vstr	s15, [r7, #8]

#ifdef DEBUG_MODE
    g_sum_raito = sum;  g_excess_ratio = excess;  g_reduced_translation = translation_ratio;
 8023ef6:	4a62      	ldr	r2, [pc, #392]	; (8024080 <_ZN5Motor5DriveEff+0x248>)
 8023ef8:	69bb      	ldr	r3, [r7, #24]
 8023efa:	6013      	str	r3, [r2, #0]
 8023efc:	4a61      	ldr	r2, [pc, #388]	; (8024084 <_ZN5Motor5DriveEff+0x24c>)
 8023efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023f00:	6013      	str	r3, [r2, #0]
 8023f02:	4a61      	ldr	r2, [pc, #388]	; (8024088 <_ZN5Motor5DriveEff+0x250>)
 8023f04:	68bb      	ldr	r3, [r7, #8]
 8023f06:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float duty_l = translation_ratio - rotation_ratio;
 8023f08:	ed97 7a02 	vldr	s14, [r7, #8]
 8023f0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8023f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023f14:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_r = translation_ratio + rotation_ratio;
 8023f18:	ed97 7a02 	vldr	s14, [r7, #8]
 8023f1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8023f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023f24:	edc7 7a07 	vstr	s15, [r7, #28]

    if(duty_l > 1.0)       duty_l =  1.0;
 8023f28:	edd7 7a08 	vldr	s15, [r7, #32]
 8023f2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f38:	dd03      	ble.n	8023f42 <_ZN5Motor5DriveEff+0x10a>
 8023f3a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023f3e:	623b      	str	r3, [r7, #32]
 8023f40:	e00a      	b.n	8023f58 <_ZN5Motor5DriveEff+0x120>
    else if(duty_l < -1.0) duty_l = -1.0;
 8023f42:	edd7 7a08 	vldr	s15, [r7, #32]
 8023f46:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f52:	d501      	bpl.n	8023f58 <_ZN5Motor5DriveEff+0x120>
 8023f54:	4b4d      	ldr	r3, [pc, #308]	; (802408c <_ZN5Motor5DriveEff+0x254>)
 8023f56:	623b      	str	r3, [r7, #32]

    if(duty_r > 1.0)       duty_r =  1.0;
 8023f58:	edd7 7a07 	vldr	s15, [r7, #28]
 8023f5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023f60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f68:	dd03      	ble.n	8023f72 <_ZN5Motor5DriveEff+0x13a>
 8023f6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023f6e:	61fb      	str	r3, [r7, #28]
 8023f70:	e00a      	b.n	8023f88 <_ZN5Motor5DriveEff+0x150>
    else if(duty_r < -1.0) duty_r = -1.0;
 8023f72:	edd7 7a07 	vldr	s15, [r7, #28]
 8023f76:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f82:	d501      	bpl.n	8023f88 <_ZN5Motor5DriveEff+0x150>
 8023f84:	4b41      	ldr	r3, [pc, #260]	; (802408c <_ZN5Motor5DriveEff+0x254>)
 8023f86:	61fb      	str	r3, [r7, #28]

#ifdef DEBUG_MODE
    g_duty_l = duty_l;  g_duty_r = duty_r;
 8023f88:	4a41      	ldr	r2, [pc, #260]	; (8024090 <_ZN5Motor5DriveEff+0x258>)
 8023f8a:	6a3b      	ldr	r3, [r7, #32]
 8023f8c:	6013      	str	r3, [r2, #0]
 8023f8e:	4a41      	ldr	r2, [pc, #260]	; (8024094 <_ZN5Motor5DriveEff+0x25c>)
 8023f90:	69fb      	ldr	r3, [r7, #28]
 8023f92:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int16_t count_l = static_cast<int16_t>(COUNTER_PERIOD * duty_l);
 8023f94:	edd7 7a08 	vldr	s15, [r7, #32]
 8023f98:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8024098 <_ZN5Motor5DriveEff+0x260>
 8023f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023fa4:	ee17 3a90 	vmov	r3, s15
 8023fa8:	b21b      	sxth	r3, r3
 8023faa:	82fb      	strh	r3, [r7, #22]
    int16_t count_r = static_cast<int16_t>(COUNTER_PERIOD * duty_r);
 8023fac:	edd7 7a07 	vldr	s15, [r7, #28]
 8023fb0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8024098 <_ZN5Motor5DriveEff+0x260>
 8023fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023fbc:	ee17 3a90 	vmov	r3, s15
 8023fc0:	b21b      	sxth	r3, r3
 8023fc2:	82bb      	strh	r3, [r7, #20]

    if(count_l < 0) { count_l *= -1; BACKWARD_L; }
 8023fc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023fc8:	2b00      	cmp	r3, #0
 8023fca:	da0d      	bge.n	8023fe8 <_ZN5Motor5DriveEff+0x1b0>
 8023fcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023fd0:	b29b      	uxth	r3, r3
 8023fd2:	425b      	negs	r3, r3
 8023fd4:	b29b      	uxth	r3, r3
 8023fd6:	b21b      	sxth	r3, r3
 8023fd8:	82fb      	strh	r3, [r7, #22]
 8023fda:	2200      	movs	r2, #0
 8023fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023fe0:	482e      	ldr	r0, [pc, #184]	; (802409c <_ZN5Motor5DriveEff+0x264>)
 8023fe2:	f004 f8dd 	bl	80281a0 <HAL_GPIO_WritePin>
 8023fe6:	e009      	b.n	8023ffc <_ZN5Motor5DriveEff+0x1c4>
    else if(count_l >= 0) FORWARD_L;
 8023fe8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023fec:	2b00      	cmp	r3, #0
 8023fee:	db05      	blt.n	8023ffc <_ZN5Motor5DriveEff+0x1c4>
 8023ff0:	2201      	movs	r2, #1
 8023ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023ff6:	4829      	ldr	r0, [pc, #164]	; (802409c <_ZN5Motor5DriveEff+0x264>)
 8023ff8:	f004 f8d2 	bl	80281a0 <HAL_GPIO_WritePin>

    if(count_r < 0) { count_r *= -1; BACKWARD_R; }
 8023ffc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8024000:	2b00      	cmp	r3, #0
 8024002:	da0d      	bge.n	8024020 <_ZN5Motor5DriveEff+0x1e8>
 8024004:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8024008:	b29b      	uxth	r3, r3
 802400a:	425b      	negs	r3, r3
 802400c:	b29b      	uxth	r3, r3
 802400e:	b21b      	sxth	r3, r3
 8024010:	82bb      	strh	r3, [r7, #20]
 8024012:	2201      	movs	r2, #1
 8024014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024018:	4820      	ldr	r0, [pc, #128]	; (802409c <_ZN5Motor5DriveEff+0x264>)
 802401a:	f004 f8c1 	bl	80281a0 <HAL_GPIO_WritePin>
 802401e:	e009      	b.n	8024034 <_ZN5Motor5DriveEff+0x1fc>
    else if(count_r >= 0) FORWARD_R;
 8024020:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8024024:	2b00      	cmp	r3, #0
 8024026:	db05      	blt.n	8024034 <_ZN5Motor5DriveEff+0x1fc>
 8024028:	2200      	movs	r2, #0
 802402a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802402e:	481b      	ldr	r0, [pc, #108]	; (802409c <_ZN5Motor5DriveEff+0x264>)
 8024030:	f004 f8b6 	bl	80281a0 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, count_l);
 8024034:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024038:	4b19      	ldr	r3, [pc, #100]	; (80240a0 <_ZN5Motor5DriveEff+0x268>)
 802403a:	681b      	ldr	r3, [r3, #0]
 802403c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, count_r);
 802403e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8024042:	4b17      	ldr	r3, [pc, #92]	; (80240a0 <_ZN5Motor5DriveEff+0x268>)
 8024044:	681b      	ldr	r3, [r3, #0]
 8024046:	641a      	str	r2, [r3, #64]	; 0x40

#ifdef DEBUG_MODE
    g_motor_compare_l = count_l;  g_motor_compare_r = count_r;
 8024048:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802404c:	4b15      	ldr	r3, [pc, #84]	; (80240a4 <_ZN5Motor5DriveEff+0x26c>)
 802404e:	801a      	strh	r2, [r3, #0]
 8024050:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8024054:	4b14      	ldr	r3, [pc, #80]	; (80240a8 <_ZN5Motor5DriveEff+0x270>)
 8024056:	801a      	strh	r2, [r3, #0]
#endif // DEBUG_MODE
 8024058:	bf00      	nop
 802405a:	3728      	adds	r7, #40	; 0x28
 802405c:	46bd      	mov	sp, r7
 802405e:	bd80      	pop	{r7, pc}
 8024060:	cccccccd 	.word	0xcccccccd
 8024064:	3feccccc 	.word	0x3feccccc
 8024068:	cccccccd 	.word	0xcccccccd
 802406c:	bfeccccc 	.word	0xbfeccccc
 8024070:	200002b0 	.word	0x200002b0
 8024074:	200002b4 	.word	0x200002b4
 8024078:	3f666666 	.word	0x3f666666
 802407c:	bf666666 	.word	0xbf666666
 8024080:	200002b8 	.word	0x200002b8
 8024084:	200002bc 	.word	0x200002bc
 8024088:	200002c0 	.word	0x200002c0
 802408c:	bf800000 	.word	0xbf800000
 8024090:	200002c4 	.word	0x200002c4
 8024094:	200002c8 	.word	0x200002c8
 8024098:	44832000 	.word	0x44832000
 802409c:	40020000 	.word	0x40020000
 80240a0:	20000a8c 	.word	0x20000a8c
 80240a4:	200002cc 	.word	0x200002cc
 80240a8:	200002ce 	.word	0x200002ce

080240ac <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 80240ac:	b580      	push	{r7, lr}
 80240ae:	b084      	sub	sp, #16
 80240b0:	af00      	add	r7, sp, #0
 80240b2:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 80240b4:	2300      	movs	r3, #0
 80240b6:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 80240b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80240bc:	4821      	ldr	r0, [pc, #132]	; (8024144 <_ZN12RotarySwitch5StateEv+0x98>)
 80240be:	f004 f857 	bl	8028170 <HAL_GPIO_ReadPin>
 80240c2:	4603      	mov	r3, r0
 80240c4:	2b00      	cmp	r3, #0
 80240c6:	bf0c      	ite	eq
 80240c8:	2301      	moveq	r3, #1
 80240ca:	2300      	movne	r3, #0
 80240cc:	b2db      	uxtb	r3, r3
 80240ce:	2b00      	cmp	r3, #0
 80240d0:	d003      	beq.n	80240da <_ZN12RotarySwitch5StateEv+0x2e>
 80240d2:	7bfb      	ldrb	r3, [r7, #15]
 80240d4:	f043 0301 	orr.w	r3, r3, #1
 80240d8:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 80240da:	2104      	movs	r1, #4
 80240dc:	481a      	ldr	r0, [pc, #104]	; (8024148 <_ZN12RotarySwitch5StateEv+0x9c>)
 80240de:	f004 f847 	bl	8028170 <HAL_GPIO_ReadPin>
 80240e2:	4603      	mov	r3, r0
 80240e4:	2b00      	cmp	r3, #0
 80240e6:	bf0c      	ite	eq
 80240e8:	2301      	moveq	r3, #1
 80240ea:	2300      	movne	r3, #0
 80240ec:	b2db      	uxtb	r3, r3
 80240ee:	2b00      	cmp	r3, #0
 80240f0:	d003      	beq.n	80240fa <_ZN12RotarySwitch5StateEv+0x4e>
 80240f2:	7bfb      	ldrb	r3, [r7, #15]
 80240f4:	f043 0302 	orr.w	r3, r3, #2
 80240f8:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 80240fa:	2102      	movs	r1, #2
 80240fc:	4812      	ldr	r0, [pc, #72]	; (8024148 <_ZN12RotarySwitch5StateEv+0x9c>)
 80240fe:	f004 f837 	bl	8028170 <HAL_GPIO_ReadPin>
 8024102:	4603      	mov	r3, r0
 8024104:	2b00      	cmp	r3, #0
 8024106:	bf0c      	ite	eq
 8024108:	2301      	moveq	r3, #1
 802410a:	2300      	movne	r3, #0
 802410c:	b2db      	uxtb	r3, r3
 802410e:	2b00      	cmp	r3, #0
 8024110:	d003      	beq.n	802411a <_ZN12RotarySwitch5StateEv+0x6e>
 8024112:	7bfb      	ldrb	r3, [r7, #15]
 8024114:	f043 0304 	orr.w	r3, r3, #4
 8024118:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 802411a:	2101      	movs	r1, #1
 802411c:	480a      	ldr	r0, [pc, #40]	; (8024148 <_ZN12RotarySwitch5StateEv+0x9c>)
 802411e:	f004 f827 	bl	8028170 <HAL_GPIO_ReadPin>
 8024122:	4603      	mov	r3, r0
 8024124:	2b00      	cmp	r3, #0
 8024126:	bf0c      	ite	eq
 8024128:	2301      	moveq	r3, #1
 802412a:	2300      	movne	r3, #0
 802412c:	b2db      	uxtb	r3, r3
 802412e:	2b00      	cmp	r3, #0
 8024130:	d003      	beq.n	802413a <_ZN12RotarySwitch5StateEv+0x8e>
 8024132:	7bfb      	ldrb	r3, [r7, #15]
 8024134:	f043 0308 	orr.w	r3, r3, #8
 8024138:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 802413a:	7bfb      	ldrb	r3, [r7, #15]
 802413c:	4618      	mov	r0, r3
 802413e:	3710      	adds	r7, #16
 8024140:	46bd      	mov	sp, r7
 8024142:	bd80      	pop	{r7, pc}
 8024144:	40020000 	.word	0x40020000
 8024148:	40020400 	.word	0x40020400

0802414c <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0), write_state_flags_(0), exception_flags_(0), master_count_(0), corner_marker_count_(0), cross_line_count_(0) {}
 802414c:	b480      	push	{r7}
 802414e:	b083      	sub	sp, #12
 8024150:	af00      	add	r7, sp, #0
 8024152:	6078      	str	r0, [r7, #4]
 8024154:	687b      	ldr	r3, [r7, #4]
 8024156:	2200      	movs	r2, #0
 8024158:	701a      	strb	r2, [r3, #0]
 802415a:	687b      	ldr	r3, [r7, #4]
 802415c:	2200      	movs	r2, #0
 802415e:	705a      	strb	r2, [r3, #1]
 8024160:	687b      	ldr	r3, [r7, #4]
 8024162:	2200      	movs	r2, #0
 8024164:	709a      	strb	r2, [r3, #2]
 8024166:	687b      	ldr	r3, [r7, #4]
 8024168:	2200      	movs	r2, #0
 802416a:	70da      	strb	r2, [r3, #3]
 802416c:	687b      	ldr	r3, [r7, #4]
 802416e:	2200      	movs	r2, #0
 8024170:	711a      	strb	r2, [r3, #4]
 8024172:	687b      	ldr	r3, [r7, #4]
 8024174:	2200      	movs	r2, #0
 8024176:	715a      	strb	r2, [r3, #5]
 8024178:	687b      	ldr	r3, [r7, #4]
 802417a:	4618      	mov	r0, r3
 802417c:	370c      	adds	r7, #12
 802417e:	46bd      	mov	sp, r7
 8024180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024184:	4770      	bx	lr
	...

08024188 <_ZN10SideSensor12SensorUpdateEv>:

void SideSensor::SensorUpdate()
{
 8024188:	b580      	push	{r7, lr}
 802418a:	b084      	sub	sp, #16
 802418c:	af00      	add	r7, sp, #0
 802418e:	6078      	str	r0, [r7, #4]
    uint8_t io_state = 0xFF; // Lower bits represent the positions of sensors.
 8024190:	23ff      	movs	r3, #255	; 0xff
 8024192:	73fb      	strb	r3, [r7, #15]

    if(IO_OUTSIDE_L == 0) io_state &= 0xF7; // 0111
 8024194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8024198:	4849      	ldr	r0, [pc, #292]	; (80242c0 <_ZN10SideSensor12SensorUpdateEv+0x138>)
 802419a:	f003 ffe9 	bl	8028170 <HAL_GPIO_ReadPin>
 802419e:	4603      	mov	r3, r0
 80241a0:	2b00      	cmp	r3, #0
 80241a2:	bf0c      	ite	eq
 80241a4:	2301      	moveq	r3, #1
 80241a6:	2300      	movne	r3, #0
 80241a8:	b2db      	uxtb	r3, r3
 80241aa:	2b00      	cmp	r3, #0
 80241ac:	d003      	beq.n	80241b6 <_ZN10SideSensor12SensorUpdateEv+0x2e>
 80241ae:	7bfb      	ldrb	r3, [r7, #15]
 80241b0:	f023 0308 	bic.w	r3, r3, #8
 80241b4:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_L == 0)  io_state &= 0xFB; // 1011
 80241b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80241ba:	4841      	ldr	r0, [pc, #260]	; (80242c0 <_ZN10SideSensor12SensorUpdateEv+0x138>)
 80241bc:	f003 ffd8 	bl	8028170 <HAL_GPIO_ReadPin>
 80241c0:	4603      	mov	r3, r0
 80241c2:	2b00      	cmp	r3, #0
 80241c4:	bf0c      	ite	eq
 80241c6:	2301      	moveq	r3, #1
 80241c8:	2300      	movne	r3, #0
 80241ca:	b2db      	uxtb	r3, r3
 80241cc:	2b00      	cmp	r3, #0
 80241ce:	d003      	beq.n	80241d8 <_ZN10SideSensor12SensorUpdateEv+0x50>
 80241d0:	7bfb      	ldrb	r3, [r7, #15]
 80241d2:	f023 0304 	bic.w	r3, r3, #4
 80241d6:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_R == 0)  io_state &= 0xFD; // 1101
 80241d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80241dc:	4838      	ldr	r0, [pc, #224]	; (80242c0 <_ZN10SideSensor12SensorUpdateEv+0x138>)
 80241de:	f003 ffc7 	bl	8028170 <HAL_GPIO_ReadPin>
 80241e2:	4603      	mov	r3, r0
 80241e4:	2b00      	cmp	r3, #0
 80241e6:	bf0c      	ite	eq
 80241e8:	2301      	moveq	r3, #1
 80241ea:	2300      	movne	r3, #0
 80241ec:	b2db      	uxtb	r3, r3
 80241ee:	2b00      	cmp	r3, #0
 80241f0:	d003      	beq.n	80241fa <_ZN10SideSensor12SensorUpdateEv+0x72>
 80241f2:	7bfb      	ldrb	r3, [r7, #15]
 80241f4:	f023 0302 	bic.w	r3, r3, #2
 80241f8:	73fb      	strb	r3, [r7, #15]
    if(IO_OUTSIDE_R == 0) io_state &= 0xFE; // 1110
 80241fa:	2104      	movs	r1, #4
 80241fc:	4831      	ldr	r0, [pc, #196]	; (80242c4 <_ZN10SideSensor12SensorUpdateEv+0x13c>)
 80241fe:	f003 ffb7 	bl	8028170 <HAL_GPIO_ReadPin>
 8024202:	4603      	mov	r3, r0
 8024204:	2b00      	cmp	r3, #0
 8024206:	bf0c      	ite	eq
 8024208:	2301      	moveq	r3, #1
 802420a:	2300      	movne	r3, #0
 802420c:	b2db      	uxtb	r3, r3
 802420e:	2b00      	cmp	r3, #0
 8024210:	d003      	beq.n	802421a <_ZN10SideSensor12SensorUpdateEv+0x92>
 8024212:	7bfb      	ldrb	r3, [r7, #15]
 8024214:	f023 0301 	bic.w	r3, r3, #1
 8024218:	73fb      	strb	r3, [r7, #15]

    read_state_flags_ <<= 4;
 802421a:	687b      	ldr	r3, [r7, #4]
 802421c:	781b      	ldrb	r3, [r3, #0]
 802421e:	011b      	lsls	r3, r3, #4
 8024220:	b2da      	uxtb	r2, r3
 8024222:	687b      	ldr	r3, [r7, #4]
 8024224:	701a      	strb	r2, [r3, #0]

    switch(io_state)
 8024226:	7bfb      	ldrb	r3, [r7, #15]
 8024228:	3bf0      	subs	r3, #240	; 0xf0
 802422a:	2b0f      	cmp	r3, #15
 802422c:	d842      	bhi.n	80242b4 <_ZN10SideSensor12SensorUpdateEv+0x12c>
 802422e:	a201      	add	r2, pc, #4	; (adr r2, 8024234 <_ZN10SideSensor12SensorUpdateEv+0xac>)
 8024230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024234:	080242a5 	.word	0x080242a5
 8024238:	080242a5 	.word	0x080242a5
 802423c:	080242a5 	.word	0x080242a5
 8024240:	08024295 	.word	0x08024295
 8024244:	080242a5 	.word	0x080242a5
 8024248:	080242b5 	.word	0x080242b5
 802424c:	080242a5 	.word	0x080242a5
 8024250:	08024295 	.word	0x08024295
 8024254:	080242a5 	.word	0x080242a5
 8024258:	080242a5 	.word	0x080242a5
 802425c:	080242b5 	.word	0x080242b5
 8024260:	08024295 	.word	0x08024295
 8024264:	08024285 	.word	0x08024285
 8024268:	080242b5 	.word	0x080242b5
 802426c:	080242b5 	.word	0x080242b5
 8024270:	08024275 	.word	0x08024275
    {
        case 0xFF: // 1111
            read_state_flags_ |= 0x08; break;
 8024274:	687b      	ldr	r3, [r7, #4]
 8024276:	781b      	ldrb	r3, [r3, #0]
 8024278:	f043 0308 	orr.w	r3, r3, #8
 802427c:	b2da      	uxtb	r2, r3
 802427e:	687b      	ldr	r3, [r7, #4]
 8024280:	701a      	strb	r2, [r3, #0]
 8024282:	e018      	b.n	80242b6 <_ZN10SideSensor12SensorUpdateEv+0x12e>
        case 0xFC: // 1100  If through goal, increase pattern.
            read_state_flags_ |= 0x04; break;
 8024284:	687b      	ldr	r3, [r7, #4]
 8024286:	781b      	ldrb	r3, [r3, #0]
 8024288:	f043 0304 	orr.w	r3, r3, #4
 802428c:	b2da      	uxtb	r2, r3
 802428e:	687b      	ldr	r3, [r7, #4]
 8024290:	701a      	strb	r2, [r3, #0]
 8024292:	e010      	b.n	80242b6 <_ZN10SideSensor12SensorUpdateEv+0x12e>
        case 0xFB: // 1011
        case 0xF7: // 0111
        case 0xF3: // 0011
            read_state_flags_ |= 0x02; break;
 8024294:	687b      	ldr	r3, [r7, #4]
 8024296:	781b      	ldrb	r3, [r3, #0]
 8024298:	f043 0302 	orr.w	r3, r3, #2
 802429c:	b2da      	uxtb	r2, r3
 802429e:	687b      	ldr	r3, [r7, #4]
 80242a0:	701a      	strb	r2, [r3, #0]
 80242a2:	e008      	b.n	80242b6 <_ZN10SideSensor12SensorUpdateEv+0x12e>
        case 0xF4: // 0100
        case 0xF0: // 0000
        case 0xF1: // 0001
        case 0xF8: // 1000
        case 0xF9: // 1001
            read_state_flags_ |= 0x01; break;
 80242a4:	687b      	ldr	r3, [r7, #4]
 80242a6:	781b      	ldrb	r3, [r3, #0]
 80242a8:	f043 0301 	orr.w	r3, r3, #1
 80242ac:	b2da      	uxtb	r2, r3
 80242ae:	687b      	ldr	r3, [r7, #4]
 80242b0:	701a      	strb	r2, [r3, #0]
 80242b2:	e000      	b.n	80242b6 <_ZN10SideSensor12SensorUpdateEv+0x12e>
        default: break;
 80242b4:	bf00      	nop
    }
}
 80242b6:	bf00      	nop
 80242b8:	3710      	adds	r7, #16
 80242ba:	46bd      	mov	sp, r7
 80242bc:	bd80      	pop	{r7, pc}
 80242be:	bf00      	nop
 80242c0:	40020400 	.word	0x40020400
 80242c4:	40020c00 	.word	0x40020c00

080242c8 <_ZN10SideSensor14IgnoreJudgmentEv>:

void SideSensor::IgnoreJudgment()
{
 80242c8:	b580      	push	{r7, lr}
 80242ca:	b084      	sub	sp, #16
 80242cc:	af00      	add	r7, sp, #0
 80242ce:	6078      	str	r0, [r7, #4]
    uint8_t ignore_flag = exception_flags_ & 0x01;
 80242d0:	687b      	ldr	r3, [r7, #4]
 80242d2:	789b      	ldrb	r3, [r3, #2]
 80242d4:	f003 0301 	and.w	r3, r3, #1
 80242d8:	73fb      	strb	r3, [r7, #15]

#ifdef DEBUG_MODE
    g_ignore_flag = ignore_flag;
 80242da:	4a22      	ldr	r2, [pc, #136]	; (8024364 <_ZN10SideSensor14IgnoreJudgmentEv+0x9c>)
 80242dc:	7bfb      	ldrb	r3, [r7, #15]
 80242de:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(ignore_flag == 0x01)
 80242e0:	7bfb      	ldrb	r3, [r7, #15]
 80242e2:	2b01      	cmp	r3, #1
 80242e4:	d111      	bne.n	802430a <_ZN10SideSensor14IgnoreJudgmentEv+0x42>
    {
        if(master_count_ < IGNORE_COUNT) master_count_++;
 80242e6:	687b      	ldr	r3, [r7, #4]
 80242e8:	78db      	ldrb	r3, [r3, #3]
 80242ea:	2b04      	cmp	r3, #4
 80242ec:	d806      	bhi.n	80242fc <_ZN10SideSensor14IgnoreJudgmentEv+0x34>
 80242ee:	687b      	ldr	r3, [r7, #4]
 80242f0:	78db      	ldrb	r3, [r3, #3]
 80242f2:	3301      	adds	r3, #1
 80242f4:	b2da      	uxtb	r2, r3
 80242f6:	687b      	ldr	r3, [r7, #4]
 80242f8:	70da      	strb	r2, [r3, #3]
        {
            exception_flags_ &= 0xF3;
            CountUp();
        }
    }
}
 80242fa:	e02e      	b.n	802435a <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
        else exception_flags_ >>= 1; 
 80242fc:	687b      	ldr	r3, [r7, #4]
 80242fe:	789b      	ldrb	r3, [r3, #2]
 8024300:	105b      	asrs	r3, r3, #1
 8024302:	b2da      	uxtb	r2, r3
 8024304:	687b      	ldr	r3, [r7, #4]
 8024306:	709a      	strb	r2, [r3, #2]
}
 8024308:	e027      	b.n	802435a <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
    else if(ignore_flag == 0x00)
 802430a:	7bfb      	ldrb	r3, [r7, #15]
 802430c:	2b00      	cmp	r3, #0
 802430e:	d124      	bne.n	802435a <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
        SensorUpdate();
 8024310:	6878      	ldr	r0, [r7, #4]
 8024312:	f7ff ff39 	bl	8024188 <_ZN10SideSensor12SensorUpdateEv>
        uint8_t now_state = read_state_flags_;
 8024316:	687b      	ldr	r3, [r7, #4]
 8024318:	781b      	ldrb	r3, [r3, #0]
 802431a:	73bb      	strb	r3, [r7, #14]
        uint8_t pre_state = (now_state << 4) | (now_state >> 4);
 802431c:	7bbb      	ldrb	r3, [r7, #14]
 802431e:	011b      	lsls	r3, r3, #4
 8024320:	b25a      	sxtb	r2, r3
 8024322:	7bbb      	ldrb	r3, [r7, #14]
 8024324:	111b      	asrs	r3, r3, #4
 8024326:	b25b      	sxtb	r3, r3
 8024328:	4313      	orrs	r3, r2
 802432a:	b25b      	sxtb	r3, r3
 802432c:	737b      	strb	r3, [r7, #13]
        if(pre_state != now_state)
 802432e:	7b7a      	ldrb	r2, [r7, #13]
 8024330:	7bbb      	ldrb	r3, [r7, #14]
 8024332:	429a      	cmp	r2, r3
 8024334:	d003      	beq.n	802433e <_ZN10SideSensor14IgnoreJudgmentEv+0x76>
            NoiseTolerance();
 8024336:	6878      	ldr	r0, [r7, #4]
 8024338:	f000 f816 	bl	8024368 <_ZN10SideSensor14NoiseToleranceEv>
}
 802433c:	e00d      	b.n	802435a <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
        else if(pre_state == now_state)
 802433e:	7b7a      	ldrb	r2, [r7, #13]
 8024340:	7bbb      	ldrb	r3, [r7, #14]
 8024342:	429a      	cmp	r2, r3
 8024344:	d109      	bne.n	802435a <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
            exception_flags_ &= 0xF3;
 8024346:	687b      	ldr	r3, [r7, #4]
 8024348:	789b      	ldrb	r3, [r3, #2]
 802434a:	f023 030c 	bic.w	r3, r3, #12
 802434e:	b2da      	uxtb	r2, r3
 8024350:	687b      	ldr	r3, [r7, #4]
 8024352:	709a      	strb	r2, [r3, #2]
            CountUp();
 8024354:	6878      	ldr	r0, [r7, #4]
 8024356:	f000 f855 	bl	8024404 <_ZN10SideSensor7CountUpEv>
}
 802435a:	bf00      	nop
 802435c:	3710      	adds	r7, #16
 802435e:	46bd      	mov	sp, r7
 8024360:	bd80      	pop	{r7, pc}
 8024362:	bf00      	nop
 8024364:	20000250 	.word	0x20000250

08024368 <_ZN10SideSensor14NoiseToleranceEv>:

void SideSensor::NoiseTolerance()
{
 8024368:	b580      	push	{r7, lr}
 802436a:	b084      	sub	sp, #16
 802436c:	af00      	add	r7, sp, #0
 802436e:	6078      	str	r0, [r7, #4]
    uint8_t noise_count = (exception_flags_ & 0x0C) >> 2;
 8024370:	687b      	ldr	r3, [r7, #4]
 8024372:	789b      	ldrb	r3, [r3, #2]
 8024374:	109b      	asrs	r3, r3, #2
 8024376:	b2db      	uxtb	r3, r3
 8024378:	f003 0303 	and.w	r3, r3, #3
 802437c:	73fb      	strb	r3, [r7, #15]

    if(noise_count == 0x00)
 802437e:	7bfb      	ldrb	r3, [r7, #15]
 8024380:	2b00      	cmp	r3, #0
 8024382:	d11f      	bne.n	80243c4 <_ZN10SideSensor14NoiseToleranceEv+0x5c>
    {
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ & 0xF0);
 8024384:	687b      	ldr	r3, [r7, #4]
 8024386:	789b      	ldrb	r3, [r3, #2]
 8024388:	f003 030f 	and.w	r3, r3, #15
 802438c:	b2da      	uxtb	r2, r3
 802438e:	687b      	ldr	r3, [r7, #4]
 8024390:	781b      	ldrb	r3, [r3, #0]
 8024392:	f023 030f 	bic.w	r3, r3, #15
 8024396:	b2db      	uxtb	r3, r3
 8024398:	4313      	orrs	r3, r2
 802439a:	b2da      	uxtb	r2, r3
 802439c:	687b      	ldr	r3, [r7, #4]
 802439e:	709a      	strb	r2, [r3, #2]
        noise_count++;
 80243a0:	7bfb      	ldrb	r3, [r7, #15]
 80243a2:	3301      	adds	r3, #1
 80243a4:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 80243a6:	687b      	ldr	r3, [r7, #4]
 80243a8:	789b      	ldrb	r3, [r3, #2]
 80243aa:	b25b      	sxtb	r3, r3
 80243ac:	f023 030c 	bic.w	r3, r3, #12
 80243b0:	b25a      	sxtb	r2, r3
 80243b2:	7bfb      	ldrb	r3, [r7, #15]
 80243b4:	009b      	lsls	r3, r3, #2
 80243b6:	b25b      	sxtb	r3, r3
 80243b8:	4313      	orrs	r3, r2
 80243ba:	b25b      	sxtb	r3, r3
 80243bc:	b2da      	uxtb	r2, r3
 80243be:	687b      	ldr	r3, [r7, #4]
 80243c0:	709a      	strb	r2, [r3, #2]
        noise_count++;
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
        CountUp();
    }
    else master_count_ = 0;
}
 80243c2:	e01a      	b.n	80243fa <_ZN10SideSensor14NoiseToleranceEv+0x92>
    else if(noise_count == 0x01)
 80243c4:	7bfb      	ldrb	r3, [r7, #15]
 80243c6:	2b01      	cmp	r3, #1
 80243c8:	d114      	bne.n	80243f4 <_ZN10SideSensor14NoiseToleranceEv+0x8c>
        noise_count++;
 80243ca:	7bfb      	ldrb	r3, [r7, #15]
 80243cc:	3301      	adds	r3, #1
 80243ce:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 80243d0:	687b      	ldr	r3, [r7, #4]
 80243d2:	789b      	ldrb	r3, [r3, #2]
 80243d4:	b25b      	sxtb	r3, r3
 80243d6:	f023 030c 	bic.w	r3, r3, #12
 80243da:	b25a      	sxtb	r2, r3
 80243dc:	7bfb      	ldrb	r3, [r7, #15]
 80243de:	009b      	lsls	r3, r3, #2
 80243e0:	b25b      	sxtb	r3, r3
 80243e2:	4313      	orrs	r3, r2
 80243e4:	b25b      	sxtb	r3, r3
 80243e6:	b2da      	uxtb	r2, r3
 80243e8:	687b      	ldr	r3, [r7, #4]
 80243ea:	709a      	strb	r2, [r3, #2]
        CountUp();
 80243ec:	6878      	ldr	r0, [r7, #4]
 80243ee:	f000 f809 	bl	8024404 <_ZN10SideSensor7CountUpEv>
}
 80243f2:	e002      	b.n	80243fa <_ZN10SideSensor14NoiseToleranceEv+0x92>
    else master_count_ = 0;
 80243f4:	687b      	ldr	r3, [r7, #4]
 80243f6:	2200      	movs	r2, #0
 80243f8:	70da      	strb	r2, [r3, #3]
}
 80243fa:	bf00      	nop
 80243fc:	3710      	adds	r7, #16
 80243fe:	46bd      	mov	sp, r7
 8024400:	bd80      	pop	{r7, pc}
	...

08024404 <_ZN10SideSensor7CountUpEv>:

void SideSensor::CountUp()
{
 8024404:	b480      	push	{r7}
 8024406:	b087      	sub	sp, #28
 8024408:	af00      	add	r7, sp, #0
 802440a:	6078      	str	r0, [r7, #4]
    uint8_t pre_noise_state = exception_flags_ >> 4;
 802440c:	687b      	ldr	r3, [r7, #4]
 802440e:	789b      	ldrb	r3, [r3, #2]
 8024410:	111b      	asrs	r3, r3, #4
 8024412:	75fb      	strb	r3, [r7, #23]
    uint8_t current_state   = read_state_flags_ & 0x0F;
 8024414:	687b      	ldr	r3, [r7, #4]
 8024416:	781b      	ldrb	r3, [r3, #0]
 8024418:	f003 030f 	and.w	r3, r3, #15
 802441c:	75bb      	strb	r3, [r7, #22]

    if(pre_noise_state != current_state)
 802441e:	7dfa      	ldrb	r2, [r7, #23]
 8024420:	7dbb      	ldrb	r3, [r7, #22]
 8024422:	429a      	cmp	r2, r3
 8024424:	d012      	beq.n	802444c <_ZN10SideSensor7CountUpEv+0x48>
    {
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ << 4);
 8024426:	687b      	ldr	r3, [r7, #4]
 8024428:	789b      	ldrb	r3, [r3, #2]
 802442a:	b25b      	sxtb	r3, r3
 802442c:	f003 030f 	and.w	r3, r3, #15
 8024430:	b25a      	sxtb	r2, r3
 8024432:	687b      	ldr	r3, [r7, #4]
 8024434:	781b      	ldrb	r3, [r3, #0]
 8024436:	011b      	lsls	r3, r3, #4
 8024438:	b25b      	sxtb	r3, r3
 802443a:	4313      	orrs	r3, r2
 802443c:	b25b      	sxtb	r3, r3
 802443e:	b2da      	uxtb	r2, r3
 8024440:	687b      	ldr	r3, [r7, #4]
 8024442:	709a      	strb	r2, [r3, #2]
        master_count_ = 0;
 8024444:	687b      	ldr	r3, [r7, #4]
 8024446:	2200      	movs	r2, #0
 8024448:	70da      	strb	r2, [r3, #3]
 802444a:	e009      	b.n	8024460 <_ZN10SideSensor7CountUpEv+0x5c>
    }
    else if(master_count_ < MAX_INTERRUPT_COUNT) master_count_++;
 802444c:	687b      	ldr	r3, [r7, #4]
 802444e:	78db      	ldrb	r3, [r3, #3]
 8024450:	2bf9      	cmp	r3, #249	; 0xf9
 8024452:	d805      	bhi.n	8024460 <_ZN10SideSensor7CountUpEv+0x5c>
 8024454:	687b      	ldr	r3, [r7, #4]
 8024456:	78db      	ldrb	r3, [r3, #3]
 8024458:	3301      	adds	r3, #1
 802445a:	b2da      	uxtb	r2, r3
 802445c:	687b      	ldr	r3, [r7, #4]
 802445e:	70da      	strb	r2, [r3, #3]

#ifdef DEBUG_MODE
    g_pre_noise_state_cntup = pre_noise_state;
 8024460:	4a9a      	ldr	r2, [pc, #616]	; (80246cc <_ZN10SideSensor7CountUpEv+0x2c8>)
 8024462:	7dfb      	ldrb	r3, [r7, #23]
 8024464:	7013      	strb	r3, [r2, #0]
    g_current_state_cntup   = current_state;
 8024466:	4a9a      	ldr	r2, [pc, #616]	; (80246d0 <_ZN10SideSensor7CountUpEv+0x2cc>)
 8024468:	7dbb      	ldrb	r3, [r7, #22]
 802446a:	7013      	strb	r3, [r2, #0]
    g_exception_flags_cntup = exception_flags_;
 802446c:	687b      	ldr	r3, [r7, #4]
 802446e:	789a      	ldrb	r2, [r3, #2]
 8024470:	4b98      	ldr	r3, [pc, #608]	; (80246d4 <_ZN10SideSensor7CountUpEv+0x2d0>)
 8024472:	701a      	strb	r2, [r3, #0]
    g_master_count_cntup    = master_count_;
 8024474:	687b      	ldr	r3, [r7, #4]
 8024476:	78da      	ldrb	r2, [r3, #3]
 8024478:	4b97      	ldr	r3, [pc, #604]	; (80246d8 <_ZN10SideSensor7CountUpEv+0x2d4>)
 802447a:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

    if(current_state == 0x08 && master_count_ >= BLACK_BLACK_COUNT)
 802447c:	7dbb      	ldrb	r3, [r7, #22]
 802447e:	2b08      	cmp	r3, #8
 8024480:	d10e      	bne.n	80244a0 <_ZN10SideSensor7CountUpEv+0x9c>
 8024482:	687b      	ldr	r3, [r7, #4]
 8024484:	78db      	ldrb	r3, [r3, #3]
 8024486:	2b01      	cmp	r3, #1
 8024488:	d90a      	bls.n	80244a0 <_ZN10SideSensor7CountUpEv+0x9c>
    {
        write_state_flags_ = (write_state_flags_ & 0xF0) | 0x08;
 802448a:	687b      	ldr	r3, [r7, #4]
 802448c:	785b      	ldrb	r3, [r3, #1]
 802448e:	f023 030f 	bic.w	r3, r3, #15
 8024492:	b2db      	uxtb	r3, r3
 8024494:	f043 0308 	orr.w	r3, r3, #8
 8024498:	b2da      	uxtb	r2, r3
 802449a:	687b      	ldr	r3, [r7, #4]
 802449c:	705a      	strb	r2, [r3, #1]
 802449e:	e037      	b.n	8024510 <_ZN10SideSensor7CountUpEv+0x10c>
    }
    else if(current_state == 0x04 && master_count_ >= BLACK_WHITE_COUNT)
 80244a0:	7dbb      	ldrb	r3, [r7, #22]
 80244a2:	2b04      	cmp	r3, #4
 80244a4:	d10b      	bne.n	80244be <_ZN10SideSensor7CountUpEv+0xba>
 80244a6:	687b      	ldr	r3, [r7, #4]
 80244a8:	78db      	ldrb	r3, [r3, #3]
 80244aa:	2b00      	cmp	r3, #0
 80244ac:	d007      	beq.n	80244be <_ZN10SideSensor7CountUpEv+0xba>
    {
        write_state_flags_ |= 0x04;
 80244ae:	687b      	ldr	r3, [r7, #4]
 80244b0:	785b      	ldrb	r3, [r3, #1]
 80244b2:	f043 0304 	orr.w	r3, r3, #4
 80244b6:	b2da      	uxtb	r2, r3
 80244b8:	687b      	ldr	r3, [r7, #4]
 80244ba:	705a      	strb	r2, [r3, #1]
 80244bc:	e028      	b.n	8024510 <_ZN10SideSensor7CountUpEv+0x10c>
    }
    else if(current_state == 0x02 && master_count_ >= WHITE_BLACK_COUNT)
 80244be:	7dbb      	ldrb	r3, [r7, #22]
 80244c0:	2b02      	cmp	r3, #2
 80244c2:	d10b      	bne.n	80244dc <_ZN10SideSensor7CountUpEv+0xd8>
 80244c4:	687b      	ldr	r3, [r7, #4]
 80244c6:	78db      	ldrb	r3, [r3, #3]
 80244c8:	2b00      	cmp	r3, #0
 80244ca:	d007      	beq.n	80244dc <_ZN10SideSensor7CountUpEv+0xd8>
    {
        write_state_flags_ |= 0x02;
 80244cc:	687b      	ldr	r3, [r7, #4]
 80244ce:	785b      	ldrb	r3, [r3, #1]
 80244d0:	f043 0302 	orr.w	r3, r3, #2
 80244d4:	b2da      	uxtb	r2, r3
 80244d6:	687b      	ldr	r3, [r7, #4]
 80244d8:	705a      	strb	r2, [r3, #1]
 80244da:	e019      	b.n	8024510 <_ZN10SideSensor7CountUpEv+0x10c>
    }
    else if(current_state == 0x01 && master_count_ >= WHITE_WHITE_COUNT)
 80244dc:	7dbb      	ldrb	r3, [r7, #22]
 80244de:	2b01      	cmp	r3, #1
 80244e0:	d116      	bne.n	8024510 <_ZN10SideSensor7CountUpEv+0x10c>
    {
        write_state_flags_ = (write_state_flags_ & 0xC0) | 0x01;
 80244e2:	687b      	ldr	r3, [r7, #4]
 80244e4:	785b      	ldrb	r3, [r3, #1]
 80244e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80244ea:	b2db      	uxtb	r3, r3
 80244ec:	f043 0301 	orr.w	r3, r3, #1
 80244f0:	b2da      	uxtb	r2, r3
 80244f2:	687b      	ldr	r3, [r7, #4]
 80244f4:	705a      	strb	r2, [r3, #1]
        exception_flags_ = (exception_flags_ << 8) | 0x01;
 80244f6:	687b      	ldr	r3, [r7, #4]
 80244f8:	789b      	ldrb	r3, [r3, #2]
 80244fa:	021b      	lsls	r3, r3, #8
 80244fc:	b25b      	sxtb	r3, r3
 80244fe:	f043 0301 	orr.w	r3, r3, #1
 8024502:	b25b      	sxtb	r3, r3
 8024504:	b2da      	uxtb	r2, r3
 8024506:	687b      	ldr	r3, [r7, #4]
 8024508:	709a      	strb	r2, [r3, #2]
        master_count_ = 0;
 802450a:	687b      	ldr	r3, [r7, #4]
 802450c:	2200      	movs	r2, #0
 802450e:	70da      	strb	r2, [r3, #3]
    }

    uint8_t black_flag   = write_state_flags_ & 0x08;
 8024510:	687b      	ldr	r3, [r7, #4]
 8024512:	785b      	ldrb	r3, [r3, #1]
 8024514:	f003 0308 	and.w	r3, r3, #8
 8024518:	757b      	strb	r3, [r7, #21]
    uint8_t goal_flag    = write_state_flags_ & 0x04;
 802451a:	687b      	ldr	r3, [r7, #4]
 802451c:	785b      	ldrb	r3, [r3, #1]
 802451e:	f003 0304 	and.w	r3, r3, #4
 8024522:	753b      	strb	r3, [r7, #20]
    uint8_t goal_reach   = write_state_flags_ & 0x20;
 8024524:	687b      	ldr	r3, [r7, #4]
 8024526:	785b      	ldrb	r3, [r3, #1]
 8024528:	f003 0320 	and.w	r3, r3, #32
 802452c:	74fb      	strb	r3, [r7, #19]
    uint8_t goal_count   = (write_state_flags_ & 0xC0) >> 6;
 802452e:	687b      	ldr	r3, [r7, #4]
 8024530:	785b      	ldrb	r3, [r3, #1]
 8024532:	099b      	lsrs	r3, r3, #6
 8024534:	74bb      	strb	r3, [r7, #18]
    uint8_t corner_flag  = write_state_flags_ & 0x02;
 8024536:	687b      	ldr	r3, [r7, #4]
 8024538:	785b      	ldrb	r3, [r3, #1]
 802453a:	f003 0302 	and.w	r3, r3, #2
 802453e:	747b      	strb	r3, [r7, #17]
    uint8_t corner_reach = write_state_flags_ & 0x10;
 8024540:	687b      	ldr	r3, [r7, #4]
 8024542:	785b      	ldrb	r3, [r3, #1]
 8024544:	f003 0310 	and.w	r3, r3, #16
 8024548:	743b      	strb	r3, [r7, #16]
    uint8_t cross_flag   = write_state_flags_ & 0x01;
 802454a:	687b      	ldr	r3, [r7, #4]
 802454c:	785b      	ldrb	r3, [r3, #1]
 802454e:	f003 0301 	and.w	r3, r3, #1
 8024552:	73fb      	strb	r3, [r7, #15]

#ifdef DEBUG_MODE
    g_exception_flags_cross = exception_flags_;
 8024554:	687b      	ldr	r3, [r7, #4]
 8024556:	789a      	ldrb	r2, [r3, #2]
 8024558:	4b60      	ldr	r3, [pc, #384]	; (80246dc <_ZN10SideSensor7CountUpEv+0x2d8>)
 802455a:	701a      	strb	r2, [r3, #0]
    g_master_count_cross    = master_count_;
 802455c:	687b      	ldr	r3, [r7, #4]
 802455e:	78da      	ldrb	r2, [r3, #3]
 8024560:	4b5f      	ldr	r3, [pc, #380]	; (80246e0 <_ZN10SideSensor7CountUpEv+0x2dc>)
 8024562:	701a      	strb	r2, [r3, #0]
    g_write_state_cntup  = write_state_flags_;
 8024564:	687b      	ldr	r3, [r7, #4]
 8024566:	785a      	ldrb	r2, [r3, #1]
 8024568:	4b5e      	ldr	r3, [pc, #376]	; (80246e4 <_ZN10SideSensor7CountUpEv+0x2e0>)
 802456a:	701a      	strb	r2, [r3, #0]
    g_goal_reach_cntup   = goal_reach   >> 5;
 802456c:	7cfb      	ldrb	r3, [r7, #19]
 802456e:	115b      	asrs	r3, r3, #5
 8024570:	b2da      	uxtb	r2, r3
 8024572:	4b5d      	ldr	r3, [pc, #372]	; (80246e8 <_ZN10SideSensor7CountUpEv+0x2e4>)
 8024574:	701a      	strb	r2, [r3, #0]
    g_corner_reach_cntup = corner_reach >> 4;
 8024576:	7c3b      	ldrb	r3, [r7, #16]
 8024578:	111b      	asrs	r3, r3, #4
 802457a:	b2da      	uxtb	r2, r3
 802457c:	4b5b      	ldr	r3, [pc, #364]	; (80246ec <_ZN10SideSensor7CountUpEv+0x2e8>)
 802457e:	701a      	strb	r2, [r3, #0]
    g_black_flag_cntup   = black_flag   >> 3;
 8024580:	7d7b      	ldrb	r3, [r7, #21]
 8024582:	10db      	asrs	r3, r3, #3
 8024584:	b2da      	uxtb	r2, r3
 8024586:	4b5a      	ldr	r3, [pc, #360]	; (80246f0 <_ZN10SideSensor7CountUpEv+0x2ec>)
 8024588:	701a      	strb	r2, [r3, #0]
    g_goal_flag_cntup    = goal_flag    >> 2;
 802458a:	7d3b      	ldrb	r3, [r7, #20]
 802458c:	109b      	asrs	r3, r3, #2
 802458e:	b2da      	uxtb	r2, r3
 8024590:	4b58      	ldr	r3, [pc, #352]	; (80246f4 <_ZN10SideSensor7CountUpEv+0x2f0>)
 8024592:	701a      	strb	r2, [r3, #0]
    g_corner_flag_cntup  = corner_flag  >> 1;
 8024594:	7c7b      	ldrb	r3, [r7, #17]
 8024596:	105b      	asrs	r3, r3, #1
 8024598:	b2da      	uxtb	r2, r3
 802459a:	4b57      	ldr	r3, [pc, #348]	; (80246f8 <_ZN10SideSensor7CountUpEv+0x2f4>)
 802459c:	701a      	strb	r2, [r3, #0]
    g_cross_flag_cntup   = cross_flag;  // LSB
 802459e:	4a57      	ldr	r2, [pc, #348]	; (80246fc <_ZN10SideSensor7CountUpEv+0x2f8>)
 80245a0:	7bfb      	ldrb	r3, [r7, #15]
 80245a2:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
    
    if(goal_flag == 0x04 && black_flag == 0x08)
 80245a4:	7d3b      	ldrb	r3, [r7, #20]
 80245a6:	2b04      	cmp	r3, #4
 80245a8:	d111      	bne.n	80245ce <_ZN10SideSensor7CountUpEv+0x1ca>
 80245aa:	7d7b      	ldrb	r3, [r7, #21]
 80245ac:	2b08      	cmp	r3, #8
 80245ae:	d10e      	bne.n	80245ce <_ZN10SideSensor7CountUpEv+0x1ca>
    {
        write_state_flags_ &= 0xF7;
 80245b0:	687b      	ldr	r3, [r7, #4]
 80245b2:	785b      	ldrb	r3, [r3, #1]
 80245b4:	f023 0308 	bic.w	r3, r3, #8
 80245b8:	b2da      	uxtb	r2, r3
 80245ba:	687b      	ldr	r3, [r7, #4]
 80245bc:	705a      	strb	r2, [r3, #1]
        write_state_flags_ |= 0x20;
 80245be:	687b      	ldr	r3, [r7, #4]
 80245c0:	785b      	ldrb	r3, [r3, #1]
 80245c2:	f043 0320 	orr.w	r3, r3, #32
 80245c6:	b2da      	uxtb	r2, r3
 80245c8:	687b      	ldr	r3, [r7, #4]
 80245ca:	705a      	strb	r2, [r3, #1]
 80245cc:	e057      	b.n	802467e <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(goal_reach == 0x20 && black_flag == 0x08)
 80245ce:	7cfb      	ldrb	r3, [r7, #19]
 80245d0:	2b20      	cmp	r3, #32
 80245d2:	d11b      	bne.n	802460c <_ZN10SideSensor7CountUpEv+0x208>
 80245d4:	7d7b      	ldrb	r3, [r7, #21]
 80245d6:	2b08      	cmp	r3, #8
 80245d8:	d118      	bne.n	802460c <_ZN10SideSensor7CountUpEv+0x208>
    {
        write_state_flags_ &= 0xDF;
 80245da:	687b      	ldr	r3, [r7, #4]
 80245dc:	785b      	ldrb	r3, [r3, #1]
 80245de:	f023 0320 	bic.w	r3, r3, #32
 80245e2:	b2da      	uxtb	r2, r3
 80245e4:	687b      	ldr	r3, [r7, #4]
 80245e6:	705a      	strb	r2, [r3, #1]
        goal_count++;
 80245e8:	7cbb      	ldrb	r3, [r7, #18]
 80245ea:	3301      	adds	r3, #1
 80245ec:	74bb      	strb	r3, [r7, #18]
        write_state_flags_ = (write_state_flags_ & 0x3F) | (goal_count << 6);
 80245ee:	687b      	ldr	r3, [r7, #4]
 80245f0:	785b      	ldrb	r3, [r3, #1]
 80245f2:	b25b      	sxtb	r3, r3
 80245f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80245f8:	b25a      	sxtb	r2, r3
 80245fa:	7cbb      	ldrb	r3, [r7, #18]
 80245fc:	019b      	lsls	r3, r3, #6
 80245fe:	b25b      	sxtb	r3, r3
 8024600:	4313      	orrs	r3, r2
 8024602:	b25b      	sxtb	r3, r3
 8024604:	b2da      	uxtb	r2, r3
 8024606:	687b      	ldr	r3, [r7, #4]
 8024608:	705a      	strb	r2, [r3, #1]
 802460a:	e038      	b.n	802467e <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(corner_flag == 0x02 && black_flag == 0x08)
 802460c:	7c7b      	ldrb	r3, [r7, #17]
 802460e:	2b02      	cmp	r3, #2
 8024610:	d111      	bne.n	8024636 <_ZN10SideSensor7CountUpEv+0x232>
 8024612:	7d7b      	ldrb	r3, [r7, #21]
 8024614:	2b08      	cmp	r3, #8
 8024616:	d10e      	bne.n	8024636 <_ZN10SideSensor7CountUpEv+0x232>
    {
        write_state_flags_ &= 0xF7;
 8024618:	687b      	ldr	r3, [r7, #4]
 802461a:	785b      	ldrb	r3, [r3, #1]
 802461c:	f023 0308 	bic.w	r3, r3, #8
 8024620:	b2da      	uxtb	r2, r3
 8024622:	687b      	ldr	r3, [r7, #4]
 8024624:	705a      	strb	r2, [r3, #1]
        write_state_flags_ |= 0x10;
 8024626:	687b      	ldr	r3, [r7, #4]
 8024628:	785b      	ldrb	r3, [r3, #1]
 802462a:	f043 0310 	orr.w	r3, r3, #16
 802462e:	b2da      	uxtb	r2, r3
 8024630:	687b      	ldr	r3, [r7, #4]
 8024632:	705a      	strb	r2, [r3, #1]
 8024634:	e023      	b.n	802467e <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(corner_reach == 0x10 && black_flag == 0x08)
 8024636:	7c3b      	ldrb	r3, [r7, #16]
 8024638:	2b10      	cmp	r3, #16
 802463a:	d110      	bne.n	802465e <_ZN10SideSensor7CountUpEv+0x25a>
 802463c:	7d7b      	ldrb	r3, [r7, #21]
 802463e:	2b08      	cmp	r3, #8
 8024640:	d10d      	bne.n	802465e <_ZN10SideSensor7CountUpEv+0x25a>
    {
        write_state_flags_ &= 0xEF;
 8024642:	687b      	ldr	r3, [r7, #4]
 8024644:	785b      	ldrb	r3, [r3, #1]
 8024646:	f023 0310 	bic.w	r3, r3, #16
 802464a:	b2da      	uxtb	r2, r3
 802464c:	687b      	ldr	r3, [r7, #4]
 802464e:	705a      	strb	r2, [r3, #1]
        corner_marker_count_++;
 8024650:	687b      	ldr	r3, [r7, #4]
 8024652:	791b      	ldrb	r3, [r3, #4]
 8024654:	3301      	adds	r3, #1
 8024656:	b2da      	uxtb	r2, r3
 8024658:	687b      	ldr	r3, [r7, #4]
 802465a:	711a      	strb	r2, [r3, #4]
 802465c:	e00f      	b.n	802467e <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(cross_flag == 0x01)
 802465e:	7bfb      	ldrb	r3, [r7, #15]
 8024660:	2b01      	cmp	r3, #1
 8024662:	d10c      	bne.n	802467e <_ZN10SideSensor7CountUpEv+0x27a>
    {
        write_state_flags_ &= 0xFE;
 8024664:	687b      	ldr	r3, [r7, #4]
 8024666:	785b      	ldrb	r3, [r3, #1]
 8024668:	f023 0301 	bic.w	r3, r3, #1
 802466c:	b2da      	uxtb	r2, r3
 802466e:	687b      	ldr	r3, [r7, #4]
 8024670:	705a      	strb	r2, [r3, #1]
        cross_line_count_++;
 8024672:	687b      	ldr	r3, [r7, #4]
 8024674:	795b      	ldrb	r3, [r3, #5]
 8024676:	3301      	adds	r3, #1
 8024678:	b2da      	uxtb	r2, r3
 802467a:	687b      	ldr	r3, [r7, #4]
 802467c:	715a      	strb	r2, [r3, #5]
    }

#ifdef DEBUG_MODE
    g_write_state_cntup_2  = write_state_flags_;
 802467e:	687b      	ldr	r3, [r7, #4]
 8024680:	785a      	ldrb	r2, [r3, #1]
 8024682:	4b1f      	ldr	r3, [pc, #124]	; (8024700 <_ZN10SideSensor7CountUpEv+0x2fc>)
 8024684:	701a      	strb	r2, [r3, #0]
    g_goal_reach_cntup_2   = goal_reach   >> 5;
 8024686:	7cfb      	ldrb	r3, [r7, #19]
 8024688:	115b      	asrs	r3, r3, #5
 802468a:	b2da      	uxtb	r2, r3
 802468c:	4b1d      	ldr	r3, [pc, #116]	; (8024704 <_ZN10SideSensor7CountUpEv+0x300>)
 802468e:	701a      	strb	r2, [r3, #0]
    g_corner_reach_cntup_2 = corner_reach >> 4;
 8024690:	7c3b      	ldrb	r3, [r7, #16]
 8024692:	111b      	asrs	r3, r3, #4
 8024694:	b2da      	uxtb	r2, r3
 8024696:	4b1c      	ldr	r3, [pc, #112]	; (8024708 <_ZN10SideSensor7CountUpEv+0x304>)
 8024698:	701a      	strb	r2, [r3, #0]
    g_black_flag_cntup_2   = black_flag   >> 3;
 802469a:	7d7b      	ldrb	r3, [r7, #21]
 802469c:	10db      	asrs	r3, r3, #3
 802469e:	b2da      	uxtb	r2, r3
 80246a0:	4b1a      	ldr	r3, [pc, #104]	; (802470c <_ZN10SideSensor7CountUpEv+0x308>)
 80246a2:	701a      	strb	r2, [r3, #0]
    g_goal_flag_cntup_2    = goal_flag    >> 2;
 80246a4:	7d3b      	ldrb	r3, [r7, #20]
 80246a6:	109b      	asrs	r3, r3, #2
 80246a8:	b2da      	uxtb	r2, r3
 80246aa:	4b19      	ldr	r3, [pc, #100]	; (8024710 <_ZN10SideSensor7CountUpEv+0x30c>)
 80246ac:	701a      	strb	r2, [r3, #0]
    g_corner_flag_cntup_2  = corner_flag  >> 1;
 80246ae:	7c7b      	ldrb	r3, [r7, #17]
 80246b0:	105b      	asrs	r3, r3, #1
 80246b2:	b2da      	uxtb	r2, r3
 80246b4:	4b17      	ldr	r3, [pc, #92]	; (8024714 <_ZN10SideSensor7CountUpEv+0x310>)
 80246b6:	701a      	strb	r2, [r3, #0]
    g_cross_flag_cntup_2   = cross_flag;  // LSB
 80246b8:	4a17      	ldr	r2, [pc, #92]	; (8024718 <_ZN10SideSensor7CountUpEv+0x314>)
 80246ba:	7bfb      	ldrb	r3, [r7, #15]
 80246bc:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
}
 80246be:	bf00      	nop
 80246c0:	371c      	adds	r7, #28
 80246c2:	46bd      	mov	sp, r7
 80246c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246c8:	4770      	bx	lr
 80246ca:	bf00      	nop
 80246cc:	20000253 	.word	0x20000253
 80246d0:	20000254 	.word	0x20000254
 80246d4:	20000255 	.word	0x20000255
 80246d8:	20000256 	.word	0x20000256
 80246dc:	20000257 	.word	0x20000257
 80246e0:	20000258 	.word	0x20000258
 80246e4:	20000259 	.word	0x20000259
 80246e8:	2000025a 	.word	0x2000025a
 80246ec:	2000025b 	.word	0x2000025b
 80246f0:	2000025c 	.word	0x2000025c
 80246f4:	2000025d 	.word	0x2000025d
 80246f8:	2000025e 	.word	0x2000025e
 80246fc:	2000025f 	.word	0x2000025f
 8024700:	20000260 	.word	0x20000260
 8024704:	20000261 	.word	0x20000261
 8024708:	20000262 	.word	0x20000262
 802470c:	20000263 	.word	0x20000263
 8024710:	20000264 	.word	0x20000264
 8024714:	20000265 	.word	0x20000265
 8024718:	20000266 	.word	0x20000266

0802471c <_ZN10SideSensor18GetGoalMarkerCountEv>:

uint8_t SideSensor::GetGoalMarkerCount()
{
 802471c:	b480      	push	{r7}
 802471e:	b083      	sub	sp, #12
 8024720:	af00      	add	r7, sp, #0
 8024722:	6078      	str	r0, [r7, #4]
    return (write_state_flags_ & 0xC0) >> 6;
 8024724:	687b      	ldr	r3, [r7, #4]
 8024726:	785b      	ldrb	r3, [r3, #1]
 8024728:	099b      	lsrs	r3, r3, #6
 802472a:	b2db      	uxtb	r3, r3
}
 802472c:	4618      	mov	r0, r3
 802472e:	370c      	adds	r7, #12
 8024730:	46bd      	mov	sp, r7
 8024732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024736:	4770      	bx	lr

08024738 <_ZN10SideSensor20GetCornerMarkerCountEv>:

uint8_t SideSensor::GetCornerMarkerCount()
{
 8024738:	b480      	push	{r7}
 802473a:	b083      	sub	sp, #12
 802473c:	af00      	add	r7, sp, #0
 802473e:	6078      	str	r0, [r7, #4]
    return corner_marker_count_;
 8024740:	687b      	ldr	r3, [r7, #4]
 8024742:	791b      	ldrb	r3, [r3, #4]
}
 8024744:	4618      	mov	r0, r3
 8024746:	370c      	adds	r7, #12
 8024748:	46bd      	mov	sp, r7
 802474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802474e:	4770      	bx	lr

08024750 <_ZN10SideSensor17GetCrossLineCountEv>:

uint8_t SideSensor::GetCrossLineCount()
{
 8024750:	b480      	push	{r7}
 8024752:	b083      	sub	sp, #12
 8024754:	af00      	add	r7, sp, #0
 8024756:	6078      	str	r0, [r7, #4]
    return cross_line_count_;
 8024758:	687b      	ldr	r3, [r7, #4]
 802475a:	795b      	ldrb	r3, [r3, #5]
 802475c:	4618      	mov	r0, r3
 802475e:	370c      	adds	r7, #12
 8024760:	46bd      	mov	sp, r7
 8024762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024766:	4770      	bx	lr

08024768 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8024768:	b480      	push	{r7}
 802476a:	b083      	sub	sp, #12
 802476c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802476e:	2300      	movs	r3, #0
 8024770:	607b      	str	r3, [r7, #4]
 8024772:	4b10      	ldr	r3, [pc, #64]	; (80247b4 <HAL_MspInit+0x4c>)
 8024774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024776:	4a0f      	ldr	r2, [pc, #60]	; (80247b4 <HAL_MspInit+0x4c>)
 8024778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802477c:	6453      	str	r3, [r2, #68]	; 0x44
 802477e:	4b0d      	ldr	r3, [pc, #52]	; (80247b4 <HAL_MspInit+0x4c>)
 8024780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024786:	607b      	str	r3, [r7, #4]
 8024788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802478a:	2300      	movs	r3, #0
 802478c:	603b      	str	r3, [r7, #0]
 802478e:	4b09      	ldr	r3, [pc, #36]	; (80247b4 <HAL_MspInit+0x4c>)
 8024790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024792:	4a08      	ldr	r2, [pc, #32]	; (80247b4 <HAL_MspInit+0x4c>)
 8024794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8024798:	6413      	str	r3, [r2, #64]	; 0x40
 802479a:	4b06      	ldr	r3, [pc, #24]	; (80247b4 <HAL_MspInit+0x4c>)
 802479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80247a2:	603b      	str	r3, [r7, #0]
 80247a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80247a6:	bf00      	nop
 80247a8:	370c      	adds	r7, #12
 80247aa:	46bd      	mov	sp, r7
 80247ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247b0:	4770      	bx	lr
 80247b2:	bf00      	nop
 80247b4:	40023800 	.word	0x40023800

080247b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80247b8:	b580      	push	{r7, lr}
 80247ba:	b08a      	sub	sp, #40	; 0x28
 80247bc:	af00      	add	r7, sp, #0
 80247be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80247c0:	f107 0314 	add.w	r3, r7, #20
 80247c4:	2200      	movs	r2, #0
 80247c6:	601a      	str	r2, [r3, #0]
 80247c8:	605a      	str	r2, [r3, #4]
 80247ca:	609a      	str	r2, [r3, #8]
 80247cc:	60da      	str	r2, [r3, #12]
 80247ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80247d0:	687b      	ldr	r3, [r7, #4]
 80247d2:	681b      	ldr	r3, [r3, #0]
 80247d4:	4a3c      	ldr	r2, [pc, #240]	; (80248c8 <HAL_ADC_MspInit+0x110>)
 80247d6:	4293      	cmp	r3, r2
 80247d8:	d171      	bne.n	80248be <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80247da:	2300      	movs	r3, #0
 80247dc:	613b      	str	r3, [r7, #16]
 80247de:	4b3b      	ldr	r3, [pc, #236]	; (80248cc <HAL_ADC_MspInit+0x114>)
 80247e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80247e2:	4a3a      	ldr	r2, [pc, #232]	; (80248cc <HAL_ADC_MspInit+0x114>)
 80247e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80247e8:	6453      	str	r3, [r2, #68]	; 0x44
 80247ea:	4b38      	ldr	r3, [pc, #224]	; (80248cc <HAL_ADC_MspInit+0x114>)
 80247ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80247ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80247f2:	613b      	str	r3, [r7, #16]
 80247f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80247f6:	2300      	movs	r3, #0
 80247f8:	60fb      	str	r3, [r7, #12]
 80247fa:	4b34      	ldr	r3, [pc, #208]	; (80248cc <HAL_ADC_MspInit+0x114>)
 80247fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80247fe:	4a33      	ldr	r2, [pc, #204]	; (80248cc <HAL_ADC_MspInit+0x114>)
 8024800:	f043 0304 	orr.w	r3, r3, #4
 8024804:	6313      	str	r3, [r2, #48]	; 0x30
 8024806:	4b31      	ldr	r3, [pc, #196]	; (80248cc <HAL_ADC_MspInit+0x114>)
 8024808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802480a:	f003 0304 	and.w	r3, r3, #4
 802480e:	60fb      	str	r3, [r7, #12]
 8024810:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024812:	2300      	movs	r3, #0
 8024814:	60bb      	str	r3, [r7, #8]
 8024816:	4b2d      	ldr	r3, [pc, #180]	; (80248cc <HAL_ADC_MspInit+0x114>)
 8024818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802481a:	4a2c      	ldr	r2, [pc, #176]	; (80248cc <HAL_ADC_MspInit+0x114>)
 802481c:	f043 0301 	orr.w	r3, r3, #1
 8024820:	6313      	str	r3, [r2, #48]	; 0x30
 8024822:	4b2a      	ldr	r3, [pc, #168]	; (80248cc <HAL_ADC_MspInit+0x114>)
 8024824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024826:	f003 0301 	and.w	r3, r3, #1
 802482a:	60bb      	str	r3, [r7, #8]
 802482c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 802482e:	233f      	movs	r3, #63	; 0x3f
 8024830:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8024832:	2303      	movs	r3, #3
 8024834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024836:	2300      	movs	r3, #0
 8024838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802483a:	f107 0314 	add.w	r3, r7, #20
 802483e:	4619      	mov	r1, r3
 8024840:	4823      	ldr	r0, [pc, #140]	; (80248d0 <HAL_ADC_MspInit+0x118>)
 8024842:	f003 fafb 	bl	8027e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8024846:	23ff      	movs	r3, #255	; 0xff
 8024848:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802484a:	2303      	movs	r3, #3
 802484c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802484e:	2300      	movs	r3, #0
 8024850:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8024852:	f107 0314 	add.w	r3, r7, #20
 8024856:	4619      	mov	r1, r3
 8024858:	481e      	ldr	r0, [pc, #120]	; (80248d4 <HAL_ADC_MspInit+0x11c>)
 802485a:	f003 faef 	bl	8027e3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 802485e:	4b1e      	ldr	r3, [pc, #120]	; (80248d8 <HAL_ADC_MspInit+0x120>)
 8024860:	4a1e      	ldr	r2, [pc, #120]	; (80248dc <HAL_ADC_MspInit+0x124>)
 8024862:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8024864:	4b1c      	ldr	r3, [pc, #112]	; (80248d8 <HAL_ADC_MspInit+0x120>)
 8024866:	2200      	movs	r2, #0
 8024868:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802486a:	4b1b      	ldr	r3, [pc, #108]	; (80248d8 <HAL_ADC_MspInit+0x120>)
 802486c:	2200      	movs	r2, #0
 802486e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8024870:	4b19      	ldr	r3, [pc, #100]	; (80248d8 <HAL_ADC_MspInit+0x120>)
 8024872:	2200      	movs	r2, #0
 8024874:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8024876:	4b18      	ldr	r3, [pc, #96]	; (80248d8 <HAL_ADC_MspInit+0x120>)
 8024878:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802487c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 802487e:	4b16      	ldr	r3, [pc, #88]	; (80248d8 <HAL_ADC_MspInit+0x120>)
 8024880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8024884:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8024886:	4b14      	ldr	r3, [pc, #80]	; (80248d8 <HAL_ADC_MspInit+0x120>)
 8024888:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802488c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 802488e:	4b12      	ldr	r3, [pc, #72]	; (80248d8 <HAL_ADC_MspInit+0x120>)
 8024890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8024894:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8024896:	4b10      	ldr	r3, [pc, #64]	; (80248d8 <HAL_ADC_MspInit+0x120>)
 8024898:	2200      	movs	r2, #0
 802489a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802489c:	4b0e      	ldr	r3, [pc, #56]	; (80248d8 <HAL_ADC_MspInit+0x120>)
 802489e:	2200      	movs	r2, #0
 80248a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80248a2:	480d      	ldr	r0, [pc, #52]	; (80248d8 <HAL_ADC_MspInit+0x120>)
 80248a4:	f002 fc86 	bl	80271b4 <HAL_DMA_Init>
 80248a8:	4603      	mov	r3, r0
 80248aa:	2b00      	cmp	r3, #0
 80248ac:	d001      	beq.n	80248b2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80248ae:	f7ff fa89 	bl	8023dc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80248b2:	687b      	ldr	r3, [r7, #4]
 80248b4:	4a08      	ldr	r2, [pc, #32]	; (80248d8 <HAL_ADC_MspInit+0x120>)
 80248b6:	639a      	str	r2, [r3, #56]	; 0x38
 80248b8:	4a07      	ldr	r2, [pc, #28]	; (80248d8 <HAL_ADC_MspInit+0x120>)
 80248ba:	687b      	ldr	r3, [r7, #4]
 80248bc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80248be:	bf00      	nop
 80248c0:	3728      	adds	r7, #40	; 0x28
 80248c2:	46bd      	mov	sp, r7
 80248c4:	bd80      	pop	{r7, pc}
 80248c6:	bf00      	nop
 80248c8:	40012000 	.word	0x40012000
 80248cc:	40023800 	.word	0x40023800
 80248d0:	40020800 	.word	0x40020800
 80248d4:	40020000 	.word	0x40020000
 80248d8:	200009ec 	.word	0x200009ec
 80248dc:	40026410 	.word	0x40026410

080248e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80248e0:	b580      	push	{r7, lr}
 80248e2:	b08a      	sub	sp, #40	; 0x28
 80248e4:	af00      	add	r7, sp, #0
 80248e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80248e8:	f107 0314 	add.w	r3, r7, #20
 80248ec:	2200      	movs	r2, #0
 80248ee:	601a      	str	r2, [r3, #0]
 80248f0:	605a      	str	r2, [r3, #4]
 80248f2:	609a      	str	r2, [r3, #8]
 80248f4:	60da      	str	r2, [r3, #12]
 80248f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80248f8:	687b      	ldr	r3, [r7, #4]
 80248fa:	681b      	ldr	r3, [r3, #0]
 80248fc:	4a19      	ldr	r2, [pc, #100]	; (8024964 <HAL_I2C_MspInit+0x84>)
 80248fe:	4293      	cmp	r3, r2
 8024900:	d12c      	bne.n	802495c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8024902:	2300      	movs	r3, #0
 8024904:	613b      	str	r3, [r7, #16]
 8024906:	4b18      	ldr	r3, [pc, #96]	; (8024968 <HAL_I2C_MspInit+0x88>)
 8024908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802490a:	4a17      	ldr	r2, [pc, #92]	; (8024968 <HAL_I2C_MspInit+0x88>)
 802490c:	f043 0302 	orr.w	r3, r3, #2
 8024910:	6313      	str	r3, [r2, #48]	; 0x30
 8024912:	4b15      	ldr	r3, [pc, #84]	; (8024968 <HAL_I2C_MspInit+0x88>)
 8024914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024916:	f003 0302 	and.w	r3, r3, #2
 802491a:	613b      	str	r3, [r7, #16]
 802491c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802491e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8024922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8024924:	2312      	movs	r3, #18
 8024926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8024928:	2301      	movs	r3, #1
 802492a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802492c:	2303      	movs	r3, #3
 802492e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8024930:	2304      	movs	r3, #4
 8024932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024934:	f107 0314 	add.w	r3, r7, #20
 8024938:	4619      	mov	r1, r3
 802493a:	480c      	ldr	r0, [pc, #48]	; (802496c <HAL_I2C_MspInit+0x8c>)
 802493c:	f003 fa7e 	bl	8027e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8024940:	2300      	movs	r3, #0
 8024942:	60fb      	str	r3, [r7, #12]
 8024944:	4b08      	ldr	r3, [pc, #32]	; (8024968 <HAL_I2C_MspInit+0x88>)
 8024946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024948:	4a07      	ldr	r2, [pc, #28]	; (8024968 <HAL_I2C_MspInit+0x88>)
 802494a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802494e:	6413      	str	r3, [r2, #64]	; 0x40
 8024950:	4b05      	ldr	r3, [pc, #20]	; (8024968 <HAL_I2C_MspInit+0x88>)
 8024952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8024958:	60fb      	str	r3, [r7, #12]
 802495a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 802495c:	bf00      	nop
 802495e:	3728      	adds	r7, #40	; 0x28
 8024960:	46bd      	mov	sp, r7
 8024962:	bd80      	pop	{r7, pc}
 8024964:	40005800 	.word	0x40005800
 8024968:	40023800 	.word	0x40023800
 802496c:	40020400 	.word	0x40020400

08024970 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8024970:	b580      	push	{r7, lr}
 8024972:	b08a      	sub	sp, #40	; 0x28
 8024974:	af00      	add	r7, sp, #0
 8024976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024978:	f107 0314 	add.w	r3, r7, #20
 802497c:	2200      	movs	r2, #0
 802497e:	601a      	str	r2, [r3, #0]
 8024980:	605a      	str	r2, [r3, #4]
 8024982:	609a      	str	r2, [r3, #8]
 8024984:	60da      	str	r2, [r3, #12]
 8024986:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8024988:	687b      	ldr	r3, [r7, #4]
 802498a:	681b      	ldr	r3, [r3, #0]
 802498c:	4a19      	ldr	r2, [pc, #100]	; (80249f4 <HAL_SPI_MspInit+0x84>)
 802498e:	4293      	cmp	r3, r2
 8024990:	d12c      	bne.n	80249ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8024992:	2300      	movs	r3, #0
 8024994:	613b      	str	r3, [r7, #16]
 8024996:	4b18      	ldr	r3, [pc, #96]	; (80249f8 <HAL_SPI_MspInit+0x88>)
 8024998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802499a:	4a17      	ldr	r2, [pc, #92]	; (80249f8 <HAL_SPI_MspInit+0x88>)
 802499c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80249a0:	6413      	str	r3, [r2, #64]	; 0x40
 80249a2:	4b15      	ldr	r3, [pc, #84]	; (80249f8 <HAL_SPI_MspInit+0x88>)
 80249a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80249aa:	613b      	str	r3, [r7, #16]
 80249ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80249ae:	2300      	movs	r3, #0
 80249b0:	60fb      	str	r3, [r7, #12]
 80249b2:	4b11      	ldr	r3, [pc, #68]	; (80249f8 <HAL_SPI_MspInit+0x88>)
 80249b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80249b6:	4a10      	ldr	r2, [pc, #64]	; (80249f8 <HAL_SPI_MspInit+0x88>)
 80249b8:	f043 0304 	orr.w	r3, r3, #4
 80249bc:	6313      	str	r3, [r2, #48]	; 0x30
 80249be:	4b0e      	ldr	r3, [pc, #56]	; (80249f8 <HAL_SPI_MspInit+0x88>)
 80249c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80249c2:	f003 0304 	and.w	r3, r3, #4
 80249c6:	60fb      	str	r3, [r7, #12]
 80249c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80249ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80249ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80249d0:	2302      	movs	r3, #2
 80249d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80249d4:	2300      	movs	r3, #0
 80249d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80249d8:	2303      	movs	r3, #3
 80249da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80249dc:	2306      	movs	r3, #6
 80249de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80249e0:	f107 0314 	add.w	r3, r7, #20
 80249e4:	4619      	mov	r1, r3
 80249e6:	4805      	ldr	r0, [pc, #20]	; (80249fc <HAL_SPI_MspInit+0x8c>)
 80249e8:	f003 fa28 	bl	8027e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80249ec:	bf00      	nop
 80249ee:	3728      	adds	r7, #40	; 0x28
 80249f0:	46bd      	mov	sp, r7
 80249f2:	bd80      	pop	{r7, pc}
 80249f4:	40003c00 	.word	0x40003c00
 80249f8:	40023800 	.word	0x40023800
 80249fc:	40020800 	.word	0x40020800

08024a00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8024a00:	b480      	push	{r7}
 8024a02:	b087      	sub	sp, #28
 8024a04:	af00      	add	r7, sp, #0
 8024a06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8024a08:	687b      	ldr	r3, [r7, #4]
 8024a0a:	681b      	ldr	r3, [r3, #0]
 8024a0c:	4a1f      	ldr	r2, [pc, #124]	; (8024a8c <HAL_TIM_PWM_MspInit+0x8c>)
 8024a0e:	4293      	cmp	r3, r2
 8024a10:	d10e      	bne.n	8024a30 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8024a12:	2300      	movs	r3, #0
 8024a14:	617b      	str	r3, [r7, #20]
 8024a16:	4b1e      	ldr	r3, [pc, #120]	; (8024a90 <HAL_TIM_PWM_MspInit+0x90>)
 8024a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024a1a:	4a1d      	ldr	r2, [pc, #116]	; (8024a90 <HAL_TIM_PWM_MspInit+0x90>)
 8024a1c:	f043 0301 	orr.w	r3, r3, #1
 8024a20:	6453      	str	r3, [r2, #68]	; 0x44
 8024a22:	4b1b      	ldr	r3, [pc, #108]	; (8024a90 <HAL_TIM_PWM_MspInit+0x90>)
 8024a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024a26:	f003 0301 	and.w	r3, r3, #1
 8024a2a:	617b      	str	r3, [r7, #20]
 8024a2c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8024a2e:	e026      	b.n	8024a7e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8024a30:	687b      	ldr	r3, [r7, #4]
 8024a32:	681b      	ldr	r3, [r3, #0]
 8024a34:	4a17      	ldr	r2, [pc, #92]	; (8024a94 <HAL_TIM_PWM_MspInit+0x94>)
 8024a36:	4293      	cmp	r3, r2
 8024a38:	d10e      	bne.n	8024a58 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8024a3a:	2300      	movs	r3, #0
 8024a3c:	613b      	str	r3, [r7, #16]
 8024a3e:	4b14      	ldr	r3, [pc, #80]	; (8024a90 <HAL_TIM_PWM_MspInit+0x90>)
 8024a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a42:	4a13      	ldr	r2, [pc, #76]	; (8024a90 <HAL_TIM_PWM_MspInit+0x90>)
 8024a44:	f043 0302 	orr.w	r3, r3, #2
 8024a48:	6413      	str	r3, [r2, #64]	; 0x40
 8024a4a:	4b11      	ldr	r3, [pc, #68]	; (8024a90 <HAL_TIM_PWM_MspInit+0x90>)
 8024a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a4e:	f003 0302 	and.w	r3, r3, #2
 8024a52:	613b      	str	r3, [r7, #16]
 8024a54:	693b      	ldr	r3, [r7, #16]
}
 8024a56:	e012      	b.n	8024a7e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8024a58:	687b      	ldr	r3, [r7, #4]
 8024a5a:	681b      	ldr	r3, [r3, #0]
 8024a5c:	4a0e      	ldr	r2, [pc, #56]	; (8024a98 <HAL_TIM_PWM_MspInit+0x98>)
 8024a5e:	4293      	cmp	r3, r2
 8024a60:	d10d      	bne.n	8024a7e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8024a62:	2300      	movs	r3, #0
 8024a64:	60fb      	str	r3, [r7, #12]
 8024a66:	4b0a      	ldr	r3, [pc, #40]	; (8024a90 <HAL_TIM_PWM_MspInit+0x90>)
 8024a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a6a:	4a09      	ldr	r2, [pc, #36]	; (8024a90 <HAL_TIM_PWM_MspInit+0x90>)
 8024a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024a70:	6413      	str	r3, [r2, #64]	; 0x40
 8024a72:	4b07      	ldr	r3, [pc, #28]	; (8024a90 <HAL_TIM_PWM_MspInit+0x90>)
 8024a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024a7a:	60fb      	str	r3, [r7, #12]
 8024a7c:	68fb      	ldr	r3, [r7, #12]
}
 8024a7e:	bf00      	nop
 8024a80:	371c      	adds	r7, #28
 8024a82:	46bd      	mov	sp, r7
 8024a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a88:	4770      	bx	lr
 8024a8a:	bf00      	nop
 8024a8c:	40010000 	.word	0x40010000
 8024a90:	40023800 	.word	0x40023800
 8024a94:	40000400 	.word	0x40000400
 8024a98:	40001800 	.word	0x40001800

08024a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8024a9c:	b580      	push	{r7, lr}
 8024a9e:	b088      	sub	sp, #32
 8024aa0:	af00      	add	r7, sp, #0
 8024aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8024aa4:	687b      	ldr	r3, [r7, #4]
 8024aa6:	681b      	ldr	r3, [r3, #0]
 8024aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8024aac:	d116      	bne.n	8024adc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8024aae:	2300      	movs	r3, #0
 8024ab0:	61fb      	str	r3, [r7, #28]
 8024ab2:	4b40      	ldr	r3, [pc, #256]	; (8024bb4 <HAL_TIM_Base_MspInit+0x118>)
 8024ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024ab6:	4a3f      	ldr	r2, [pc, #252]	; (8024bb4 <HAL_TIM_Base_MspInit+0x118>)
 8024ab8:	f043 0301 	orr.w	r3, r3, #1
 8024abc:	6413      	str	r3, [r2, #64]	; 0x40
 8024abe:	4b3d      	ldr	r3, [pc, #244]	; (8024bb4 <HAL_TIM_Base_MspInit+0x118>)
 8024ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024ac2:	f003 0301 	and.w	r3, r3, #1
 8024ac6:	61fb      	str	r3, [r7, #28]
 8024ac8:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8024aca:	2200      	movs	r2, #0
 8024acc:	2100      	movs	r1, #0
 8024ace:	201c      	movs	r0, #28
 8024ad0:	f002 fb39 	bl	8027146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8024ad4:	201c      	movs	r0, #28
 8024ad6:	f002 fb52 	bl	802717e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8024ada:	e066      	b.n	8024baa <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8024adc:	687b      	ldr	r3, [r7, #4]
 8024ade:	681b      	ldr	r3, [r3, #0]
 8024ae0:	4a35      	ldr	r2, [pc, #212]	; (8024bb8 <HAL_TIM_Base_MspInit+0x11c>)
 8024ae2:	4293      	cmp	r3, r2
 8024ae4:	d116      	bne.n	8024b14 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8024ae6:	2300      	movs	r3, #0
 8024ae8:	61bb      	str	r3, [r7, #24]
 8024aea:	4b32      	ldr	r3, [pc, #200]	; (8024bb4 <HAL_TIM_Base_MspInit+0x118>)
 8024aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024aee:	4a31      	ldr	r2, [pc, #196]	; (8024bb4 <HAL_TIM_Base_MspInit+0x118>)
 8024af0:	f043 0308 	orr.w	r3, r3, #8
 8024af4:	6413      	str	r3, [r2, #64]	; 0x40
 8024af6:	4b2f      	ldr	r3, [pc, #188]	; (8024bb4 <HAL_TIM_Base_MspInit+0x118>)
 8024af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024afa:	f003 0308 	and.w	r3, r3, #8
 8024afe:	61bb      	str	r3, [r7, #24]
 8024b00:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8024b02:	2200      	movs	r2, #0
 8024b04:	2100      	movs	r1, #0
 8024b06:	2032      	movs	r0, #50	; 0x32
 8024b08:	f002 fb1d 	bl	8027146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8024b0c:	2032      	movs	r0, #50	; 0x32
 8024b0e:	f002 fb36 	bl	802717e <HAL_NVIC_EnableIRQ>
}
 8024b12:	e04a      	b.n	8024baa <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8024b14:	687b      	ldr	r3, [r7, #4]
 8024b16:	681b      	ldr	r3, [r3, #0]
 8024b18:	4a28      	ldr	r2, [pc, #160]	; (8024bbc <HAL_TIM_Base_MspInit+0x120>)
 8024b1a:	4293      	cmp	r3, r2
 8024b1c:	d116      	bne.n	8024b4c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8024b1e:	2300      	movs	r3, #0
 8024b20:	617b      	str	r3, [r7, #20]
 8024b22:	4b24      	ldr	r3, [pc, #144]	; (8024bb4 <HAL_TIM_Base_MspInit+0x118>)
 8024b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b26:	4a23      	ldr	r2, [pc, #140]	; (8024bb4 <HAL_TIM_Base_MspInit+0x118>)
 8024b28:	f043 0310 	orr.w	r3, r3, #16
 8024b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8024b2e:	4b21      	ldr	r3, [pc, #132]	; (8024bb4 <HAL_TIM_Base_MspInit+0x118>)
 8024b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b32:	f003 0310 	and.w	r3, r3, #16
 8024b36:	617b      	str	r3, [r7, #20]
 8024b38:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8024b3a:	2200      	movs	r2, #0
 8024b3c:	2100      	movs	r1, #0
 8024b3e:	2036      	movs	r0, #54	; 0x36
 8024b40:	f002 fb01 	bl	8027146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8024b44:	2036      	movs	r0, #54	; 0x36
 8024b46:	f002 fb1a 	bl	802717e <HAL_NVIC_EnableIRQ>
}
 8024b4a:	e02e      	b.n	8024baa <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8024b4c:	687b      	ldr	r3, [r7, #4]
 8024b4e:	681b      	ldr	r3, [r3, #0]
 8024b50:	4a1b      	ldr	r2, [pc, #108]	; (8024bc0 <HAL_TIM_Base_MspInit+0x124>)
 8024b52:	4293      	cmp	r3, r2
 8024b54:	d116      	bne.n	8024b84 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8024b56:	2300      	movs	r3, #0
 8024b58:	613b      	str	r3, [r7, #16]
 8024b5a:	4b16      	ldr	r3, [pc, #88]	; (8024bb4 <HAL_TIM_Base_MspInit+0x118>)
 8024b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b5e:	4a15      	ldr	r2, [pc, #84]	; (8024bb4 <HAL_TIM_Base_MspInit+0x118>)
 8024b60:	f043 0320 	orr.w	r3, r3, #32
 8024b64:	6413      	str	r3, [r2, #64]	; 0x40
 8024b66:	4b13      	ldr	r3, [pc, #76]	; (8024bb4 <HAL_TIM_Base_MspInit+0x118>)
 8024b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b6a:	f003 0320 	and.w	r3, r3, #32
 8024b6e:	613b      	str	r3, [r7, #16]
 8024b70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8024b72:	2200      	movs	r2, #0
 8024b74:	2100      	movs	r1, #0
 8024b76:	2037      	movs	r0, #55	; 0x37
 8024b78:	f002 fae5 	bl	8027146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8024b7c:	2037      	movs	r0, #55	; 0x37
 8024b7e:	f002 fafe 	bl	802717e <HAL_NVIC_EnableIRQ>
}
 8024b82:	e012      	b.n	8024baa <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8024b84:	687b      	ldr	r3, [r7, #4]
 8024b86:	681b      	ldr	r3, [r3, #0]
 8024b88:	4a0e      	ldr	r2, [pc, #56]	; (8024bc4 <HAL_TIM_Base_MspInit+0x128>)
 8024b8a:	4293      	cmp	r3, r2
 8024b8c:	d10d      	bne.n	8024baa <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8024b8e:	2300      	movs	r3, #0
 8024b90:	60fb      	str	r3, [r7, #12]
 8024b92:	4b08      	ldr	r3, [pc, #32]	; (8024bb4 <HAL_TIM_Base_MspInit+0x118>)
 8024b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024b96:	4a07      	ldr	r2, [pc, #28]	; (8024bb4 <HAL_TIM_Base_MspInit+0x118>)
 8024b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8024b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8024b9e:	4b05      	ldr	r3, [pc, #20]	; (8024bb4 <HAL_TIM_Base_MspInit+0x118>)
 8024ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8024ba6:	60fb      	str	r3, [r7, #12]
 8024ba8:	68fb      	ldr	r3, [r7, #12]
}
 8024baa:	bf00      	nop
 8024bac:	3720      	adds	r7, #32
 8024bae:	46bd      	mov	sp, r7
 8024bb0:	bd80      	pop	{r7, pc}
 8024bb2:	bf00      	nop
 8024bb4:	40023800 	.word	0x40023800
 8024bb8:	40000c00 	.word	0x40000c00
 8024bbc:	40001000 	.word	0x40001000
 8024bc0:	40001400 	.word	0x40001400
 8024bc4:	40014800 	.word	0x40014800

08024bc8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8024bc8:	b580      	push	{r7, lr}
 8024bca:	b08c      	sub	sp, #48	; 0x30
 8024bcc:	af00      	add	r7, sp, #0
 8024bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024bd0:	f107 031c 	add.w	r3, r7, #28
 8024bd4:	2200      	movs	r2, #0
 8024bd6:	601a      	str	r2, [r3, #0]
 8024bd8:	605a      	str	r2, [r3, #4]
 8024bda:	609a      	str	r2, [r3, #8]
 8024bdc:	60da      	str	r2, [r3, #12]
 8024bde:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8024be0:	687b      	ldr	r3, [r7, #4]
 8024be2:	681b      	ldr	r3, [r3, #0]
 8024be4:	4a32      	ldr	r2, [pc, #200]	; (8024cb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8024be6:	4293      	cmp	r3, r2
 8024be8:	d12c      	bne.n	8024c44 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8024bea:	2300      	movs	r3, #0
 8024bec:	61bb      	str	r3, [r7, #24]
 8024bee:	4b31      	ldr	r3, [pc, #196]	; (8024cb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8024bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024bf2:	4a30      	ldr	r2, [pc, #192]	; (8024cb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8024bf4:	f043 0304 	orr.w	r3, r3, #4
 8024bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8024bfa:	4b2e      	ldr	r3, [pc, #184]	; (8024cb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8024bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024bfe:	f003 0304 	and.w	r3, r3, #4
 8024c02:	61bb      	str	r3, [r7, #24]
 8024c04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8024c06:	2300      	movs	r3, #0
 8024c08:	617b      	str	r3, [r7, #20]
 8024c0a:	4b2a      	ldr	r3, [pc, #168]	; (8024cb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8024c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024c0e:	4a29      	ldr	r2, [pc, #164]	; (8024cb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8024c10:	f043 0302 	orr.w	r3, r3, #2
 8024c14:	6313      	str	r3, [r2, #48]	; 0x30
 8024c16:	4b27      	ldr	r3, [pc, #156]	; (8024cb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8024c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024c1a:	f003 0302 	and.w	r3, r3, #2
 8024c1e:	617b      	str	r3, [r7, #20]
 8024c20:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8024c22:	23c0      	movs	r3, #192	; 0xc0
 8024c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024c26:	2302      	movs	r3, #2
 8024c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024c2a:	2300      	movs	r3, #0
 8024c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024c2e:	2300      	movs	r3, #0
 8024c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8024c32:	2302      	movs	r3, #2
 8024c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024c36:	f107 031c 	add.w	r3, r7, #28
 8024c3a:	4619      	mov	r1, r3
 8024c3c:	481e      	ldr	r0, [pc, #120]	; (8024cb8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8024c3e:	f003 f8fd 	bl	8027e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8024c42:	e030      	b.n	8024ca6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8024c44:	687b      	ldr	r3, [r7, #4]
 8024c46:	681b      	ldr	r3, [r3, #0]
 8024c48:	4a1c      	ldr	r2, [pc, #112]	; (8024cbc <HAL_TIM_Encoder_MspInit+0xf4>)
 8024c4a:	4293      	cmp	r3, r2
 8024c4c:	d12b      	bne.n	8024ca6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8024c4e:	2300      	movs	r3, #0
 8024c50:	613b      	str	r3, [r7, #16]
 8024c52:	4b18      	ldr	r3, [pc, #96]	; (8024cb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8024c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024c56:	4a17      	ldr	r2, [pc, #92]	; (8024cb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8024c58:	f043 0302 	orr.w	r3, r3, #2
 8024c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8024c5e:	4b15      	ldr	r3, [pc, #84]	; (8024cb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8024c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024c62:	f003 0302 	and.w	r3, r3, #2
 8024c66:	613b      	str	r3, [r7, #16]
 8024c68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8024c6a:	2300      	movs	r3, #0
 8024c6c:	60fb      	str	r3, [r7, #12]
 8024c6e:	4b11      	ldr	r3, [pc, #68]	; (8024cb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8024c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024c72:	4a10      	ldr	r2, [pc, #64]	; (8024cb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8024c74:	f043 0304 	orr.w	r3, r3, #4
 8024c78:	6313      	str	r3, [r2, #48]	; 0x30
 8024c7a:	4b0e      	ldr	r3, [pc, #56]	; (8024cb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8024c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024c7e:	f003 0304 	and.w	r3, r3, #4
 8024c82:	60fb      	str	r3, [r7, #12]
 8024c84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8024c86:	23c0      	movs	r3, #192	; 0xc0
 8024c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024c8a:	2302      	movs	r3, #2
 8024c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024c8e:	2300      	movs	r3, #0
 8024c90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024c92:	2300      	movs	r3, #0
 8024c94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8024c96:	2303      	movs	r3, #3
 8024c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8024c9a:	f107 031c 	add.w	r3, r7, #28
 8024c9e:	4619      	mov	r1, r3
 8024ca0:	4807      	ldr	r0, [pc, #28]	; (8024cc0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8024ca2:	f003 f8cb 	bl	8027e3c <HAL_GPIO_Init>
}
 8024ca6:	bf00      	nop
 8024ca8:	3730      	adds	r7, #48	; 0x30
 8024caa:	46bd      	mov	sp, r7
 8024cac:	bd80      	pop	{r7, pc}
 8024cae:	bf00      	nop
 8024cb0:	40000800 	.word	0x40000800
 8024cb4:	40023800 	.word	0x40023800
 8024cb8:	40020400 	.word	0x40020400
 8024cbc:	40010400 	.word	0x40010400
 8024cc0:	40020800 	.word	0x40020800

08024cc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8024cc4:	b580      	push	{r7, lr}
 8024cc6:	b08c      	sub	sp, #48	; 0x30
 8024cc8:	af00      	add	r7, sp, #0
 8024cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024ccc:	f107 031c 	add.w	r3, r7, #28
 8024cd0:	2200      	movs	r2, #0
 8024cd2:	601a      	str	r2, [r3, #0]
 8024cd4:	605a      	str	r2, [r3, #4]
 8024cd6:	609a      	str	r2, [r3, #8]
 8024cd8:	60da      	str	r2, [r3, #12]
 8024cda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8024cdc:	687b      	ldr	r3, [r7, #4]
 8024cde:	681b      	ldr	r3, [r3, #0]
 8024ce0:	4a59      	ldr	r2, [pc, #356]	; (8024e48 <HAL_TIM_MspPostInit+0x184>)
 8024ce2:	4293      	cmp	r3, r2
 8024ce4:	d11f      	bne.n	8024d26 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024ce6:	2300      	movs	r3, #0
 8024ce8:	61bb      	str	r3, [r7, #24]
 8024cea:	4b58      	ldr	r3, [pc, #352]	; (8024e4c <HAL_TIM_MspPostInit+0x188>)
 8024cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024cee:	4a57      	ldr	r2, [pc, #348]	; (8024e4c <HAL_TIM_MspPostInit+0x188>)
 8024cf0:	f043 0301 	orr.w	r3, r3, #1
 8024cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8024cf6:	4b55      	ldr	r3, [pc, #340]	; (8024e4c <HAL_TIM_MspPostInit+0x188>)
 8024cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024cfa:	f003 0301 	and.w	r3, r3, #1
 8024cfe:	61bb      	str	r3, [r7, #24]
 8024d00:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8024d02:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8024d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024d08:	2302      	movs	r3, #2
 8024d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024d0c:	2300      	movs	r3, #0
 8024d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024d10:	2300      	movs	r3, #0
 8024d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8024d14:	2301      	movs	r3, #1
 8024d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8024d18:	f107 031c 	add.w	r3, r7, #28
 8024d1c:	4619      	mov	r1, r3
 8024d1e:	484c      	ldr	r0, [pc, #304]	; (8024e50 <HAL_TIM_MspPostInit+0x18c>)
 8024d20:	f003 f88c 	bl	8027e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8024d24:	e08b      	b.n	8024e3e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8024d26:	687b      	ldr	r3, [r7, #4]
 8024d28:	681b      	ldr	r3, [r3, #0]
 8024d2a:	4a4a      	ldr	r2, [pc, #296]	; (8024e54 <HAL_TIM_MspPostInit+0x190>)
 8024d2c:	4293      	cmp	r3, r2
 8024d2e:	d13d      	bne.n	8024dac <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8024d30:	2300      	movs	r3, #0
 8024d32:	617b      	str	r3, [r7, #20]
 8024d34:	4b45      	ldr	r3, [pc, #276]	; (8024e4c <HAL_TIM_MspPostInit+0x188>)
 8024d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024d38:	4a44      	ldr	r2, [pc, #272]	; (8024e4c <HAL_TIM_MspPostInit+0x188>)
 8024d3a:	f043 0304 	orr.w	r3, r3, #4
 8024d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8024d40:	4b42      	ldr	r3, [pc, #264]	; (8024e4c <HAL_TIM_MspPostInit+0x188>)
 8024d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024d44:	f003 0304 	and.w	r3, r3, #4
 8024d48:	617b      	str	r3, [r7, #20]
 8024d4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8024d4c:	2300      	movs	r3, #0
 8024d4e:	613b      	str	r3, [r7, #16]
 8024d50:	4b3e      	ldr	r3, [pc, #248]	; (8024e4c <HAL_TIM_MspPostInit+0x188>)
 8024d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024d54:	4a3d      	ldr	r2, [pc, #244]	; (8024e4c <HAL_TIM_MspPostInit+0x188>)
 8024d56:	f043 0302 	orr.w	r3, r3, #2
 8024d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8024d5c:	4b3b      	ldr	r3, [pc, #236]	; (8024e4c <HAL_TIM_MspPostInit+0x188>)
 8024d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024d60:	f003 0302 	and.w	r3, r3, #2
 8024d64:	613b      	str	r3, [r7, #16]
 8024d66:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8024d68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8024d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024d6e:	2302      	movs	r3, #2
 8024d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024d72:	2300      	movs	r3, #0
 8024d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024d76:	2300      	movs	r3, #0
 8024d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8024d7a:	2302      	movs	r3, #2
 8024d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8024d7e:	f107 031c 	add.w	r3, r7, #28
 8024d82:	4619      	mov	r1, r3
 8024d84:	4834      	ldr	r0, [pc, #208]	; (8024e58 <HAL_TIM_MspPostInit+0x194>)
 8024d86:	f003 f859 	bl	8027e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8024d8a:	2330      	movs	r3, #48	; 0x30
 8024d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024d8e:	2302      	movs	r3, #2
 8024d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024d92:	2300      	movs	r3, #0
 8024d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024d96:	2300      	movs	r3, #0
 8024d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8024d9a:	2302      	movs	r3, #2
 8024d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024d9e:	f107 031c 	add.w	r3, r7, #28
 8024da2:	4619      	mov	r1, r3
 8024da4:	482d      	ldr	r0, [pc, #180]	; (8024e5c <HAL_TIM_MspPostInit+0x198>)
 8024da6:	f003 f849 	bl	8027e3c <HAL_GPIO_Init>
}
 8024daa:	e048      	b.n	8024e3e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 8024dac:	687b      	ldr	r3, [r7, #4]
 8024dae:	681b      	ldr	r3, [r3, #0]
 8024db0:	4a2b      	ldr	r2, [pc, #172]	; (8024e60 <HAL_TIM_MspPostInit+0x19c>)
 8024db2:	4293      	cmp	r3, r2
 8024db4:	d11f      	bne.n	8024df6 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8024db6:	2300      	movs	r3, #0
 8024db8:	60fb      	str	r3, [r7, #12]
 8024dba:	4b24      	ldr	r3, [pc, #144]	; (8024e4c <HAL_TIM_MspPostInit+0x188>)
 8024dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024dbe:	4a23      	ldr	r2, [pc, #140]	; (8024e4c <HAL_TIM_MspPostInit+0x188>)
 8024dc0:	f043 0302 	orr.w	r3, r3, #2
 8024dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8024dc6:	4b21      	ldr	r3, [pc, #132]	; (8024e4c <HAL_TIM_MspPostInit+0x188>)
 8024dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024dca:	f003 0302 	and.w	r3, r3, #2
 8024dce:	60fb      	str	r3, [r7, #12]
 8024dd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8024dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024dd8:	2302      	movs	r3, #2
 8024dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024ddc:	2300      	movs	r3, #0
 8024dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024de0:	2300      	movs	r3, #0
 8024de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8024de4:	2303      	movs	r3, #3
 8024de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024de8:	f107 031c 	add.w	r3, r7, #28
 8024dec:	4619      	mov	r1, r3
 8024dee:	481b      	ldr	r0, [pc, #108]	; (8024e5c <HAL_TIM_MspPostInit+0x198>)
 8024df0:	f003 f824 	bl	8027e3c <HAL_GPIO_Init>
}
 8024df4:	e023      	b.n	8024e3e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8024df6:	687b      	ldr	r3, [r7, #4]
 8024df8:	681b      	ldr	r3, [r3, #0]
 8024dfa:	4a1a      	ldr	r2, [pc, #104]	; (8024e64 <HAL_TIM_MspPostInit+0x1a0>)
 8024dfc:	4293      	cmp	r3, r2
 8024dfe:	d11e      	bne.n	8024e3e <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8024e00:	2300      	movs	r3, #0
 8024e02:	60bb      	str	r3, [r7, #8]
 8024e04:	4b11      	ldr	r3, [pc, #68]	; (8024e4c <HAL_TIM_MspPostInit+0x188>)
 8024e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024e08:	4a10      	ldr	r2, [pc, #64]	; (8024e4c <HAL_TIM_MspPostInit+0x188>)
 8024e0a:	f043 0302 	orr.w	r3, r3, #2
 8024e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8024e10:	4b0e      	ldr	r3, [pc, #56]	; (8024e4c <HAL_TIM_MspPostInit+0x188>)
 8024e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024e14:	f003 0302 	and.w	r3, r3, #2
 8024e18:	60bb      	str	r3, [r7, #8]
 8024e1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8024e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8024e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024e22:	2302      	movs	r3, #2
 8024e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024e26:	2300      	movs	r3, #0
 8024e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024e2a:	2300      	movs	r3, #0
 8024e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8024e2e:	2309      	movs	r3, #9
 8024e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024e32:	f107 031c 	add.w	r3, r7, #28
 8024e36:	4619      	mov	r1, r3
 8024e38:	4808      	ldr	r0, [pc, #32]	; (8024e5c <HAL_TIM_MspPostInit+0x198>)
 8024e3a:	f002 ffff 	bl	8027e3c <HAL_GPIO_Init>
}
 8024e3e:	bf00      	nop
 8024e40:	3730      	adds	r7, #48	; 0x30
 8024e42:	46bd      	mov	sp, r7
 8024e44:	bd80      	pop	{r7, pc}
 8024e46:	bf00      	nop
 8024e48:	40010000 	.word	0x40010000
 8024e4c:	40023800 	.word	0x40023800
 8024e50:	40020000 	.word	0x40020000
 8024e54:	40000400 	.word	0x40000400
 8024e58:	40020800 	.word	0x40020800
 8024e5c:	40020400 	.word	0x40020400
 8024e60:	40014800 	.word	0x40014800
 8024e64:	40001800 	.word	0x40001800

08024e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8024e68:	b480      	push	{r7}
 8024e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8024e6c:	e7fe      	b.n	8024e6c <NMI_Handler+0x4>

08024e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8024e6e:	b480      	push	{r7}
 8024e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8024e72:	e7fe      	b.n	8024e72 <HardFault_Handler+0x4>

08024e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8024e74:	b480      	push	{r7}
 8024e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8024e78:	e7fe      	b.n	8024e78 <MemManage_Handler+0x4>

08024e7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8024e7a:	b480      	push	{r7}
 8024e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8024e7e:	e7fe      	b.n	8024e7e <BusFault_Handler+0x4>

08024e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8024e80:	b480      	push	{r7}
 8024e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8024e84:	e7fe      	b.n	8024e84 <UsageFault_Handler+0x4>

08024e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8024e86:	b480      	push	{r7}
 8024e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8024e8a:	bf00      	nop
 8024e8c:	46bd      	mov	sp, r7
 8024e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e92:	4770      	bx	lr

08024e94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8024e94:	b480      	push	{r7}
 8024e96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8024e98:	bf00      	nop
 8024e9a:	46bd      	mov	sp, r7
 8024e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ea0:	4770      	bx	lr

08024ea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8024ea2:	b480      	push	{r7}
 8024ea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8024ea6:	bf00      	nop
 8024ea8:	46bd      	mov	sp, r7
 8024eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024eae:	4770      	bx	lr

08024eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8024eb0:	b580      	push	{r7, lr}
 8024eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8024eb4:	f001 fc36 	bl	8026724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8024eb8:	bf00      	nop
 8024eba:	bd80      	pop	{r7, pc}

08024ebc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8024ebc:	b580      	push	{r7, lr}
 8024ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8024ec0:	4802      	ldr	r0, [pc, #8]	; (8024ecc <TIM2_IRQHandler+0x10>)
 8024ec2:	f004 fdbc 	bl	8029a3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8024ec6:	bf00      	nop
 8024ec8:	bd80      	pop	{r7, pc}
 8024eca:	bf00      	nop
 8024ecc:	20000acc 	.word	0x20000acc

08024ed0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8024ed0:	b580      	push	{r7, lr}
 8024ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8024ed4:	4802      	ldr	r0, [pc, #8]	; (8024ee0 <TIM5_IRQHandler+0x10>)
 8024ed6:	f004 fdb2 	bl	8029a3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8024eda:	bf00      	nop
 8024edc:	bd80      	pop	{r7, pc}
 8024ede:	bf00      	nop
 8024ee0:	2000088c 	.word	0x2000088c

08024ee4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8024ee4:	b580      	push	{r7, lr}
 8024ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8024ee8:	4802      	ldr	r0, [pc, #8]	; (8024ef4 <TIM6_DAC_IRQHandler+0x10>)
 8024eea:	f004 fda8 	bl	8029a3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8024eee:	bf00      	nop
 8024ef0:	bd80      	pop	{r7, pc}
 8024ef2:	bf00      	nop
 8024ef4:	20000a4c 	.word	0x20000a4c

08024ef8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8024ef8:	b580      	push	{r7, lr}
 8024efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8024efc:	4802      	ldr	r0, [pc, #8]	; (8024f08 <TIM7_IRQHandler+0x10>)
 8024efe:	f004 fd9e 	bl	8029a3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8024f02:	bf00      	nop
 8024f04:	bd80      	pop	{r7, pc}
 8024f06:	bf00      	nop
 8024f08:	20000b4c 	.word	0x20000b4c

08024f0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8024f0c:	b580      	push	{r7, lr}
 8024f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8024f10:	4802      	ldr	r0, [pc, #8]	; (8024f1c <DMA2_Stream0_IRQHandler+0x10>)
 8024f12:	f002 fa55 	bl	80273c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8024f16:	bf00      	nop
 8024f18:	bd80      	pop	{r7, pc}
 8024f1a:	bf00      	nop
 8024f1c:	200009ec 	.word	0x200009ec

08024f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8024f20:	b480      	push	{r7}
 8024f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8024f24:	4b08      	ldr	r3, [pc, #32]	; (8024f48 <SystemInit+0x28>)
 8024f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024f2a:	4a07      	ldr	r2, [pc, #28]	; (8024f48 <SystemInit+0x28>)
 8024f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8024f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8024f34:	4b04      	ldr	r3, [pc, #16]	; (8024f48 <SystemInit+0x28>)
 8024f36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8024f3a:	609a      	str	r2, [r3, #8]
#endif
}
 8024f3c:	bf00      	nop
 8024f3e:	46bd      	mov	sp, r7
 8024f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f44:	4770      	bx	lr
 8024f46:	bf00      	nop
 8024f48:	e000ed00 	.word	0xe000ed00

08024f4c <_ZN15VelocityControlC1Ev>:
#include "velocity_control.hpp"

VelocityControl::VelocityControl() : integral_error_(0) {}
 8024f4c:	b580      	push	{r7, lr}
 8024f4e:	b082      	sub	sp, #8
 8024f50:	af00      	add	r7, sp, #0
 8024f52:	6078      	str	r0, [r7, #4]
 8024f54:	687b      	ldr	r3, [r7, #4]
 8024f56:	f04f 0200 	mov.w	r2, #0
 8024f5a:	601a      	str	r2, [r3, #0]
 8024f5c:	687b      	ldr	r3, [r7, #4]
 8024f5e:	3304      	adds	r3, #4
 8024f60:	4618      	mov	r0, r3
 8024f62:	f7fb fed7 	bl	8020d14 <_ZN7EncoderC1Ev>
 8024f66:	687b      	ldr	r3, [r7, #4]
 8024f68:	4618      	mov	r0, r3
 8024f6a:	3708      	adds	r7, #8
 8024f6c:	46bd      	mov	sp, r7
 8024f6e:	bd80      	pop	{r7, pc}

08024f70 <_ZN15VelocityControl10PidControlEffff>:
{
    integral_error_ = 0.0;
}

float VelocityControl::PidControl(float target, float p_gain, float i_gain, float d_gain)
{
 8024f70:	b5b0      	push	{r4, r5, r7, lr}
 8024f72:	b08e      	sub	sp, #56	; 0x38
 8024f74:	af00      	add	r7, sp, #0
 8024f76:	6178      	str	r0, [r7, #20]
 8024f78:	ed87 0a04 	vstr	s0, [r7, #16]
 8024f7c:	edc7 0a03 	vstr	s1, [r7, #12]
 8024f80:	ed87 1a02 	vstr	s2, [r7, #8]
 8024f84:	edc7 1a01 	vstr	s3, [r7, #4]
    float current = encoder.GetDistance() / TIM6_PERIOD; // [mm/ms]
 8024f88:	697b      	ldr	r3, [r7, #20]
 8024f8a:	3304      	adds	r3, #4
 8024f8c:	4618      	mov	r0, r3
 8024f8e:	f7fb ff81 	bl	8020e94 <_ZN7Encoder11GetDistanceEv>
 8024f92:	eef0 6a40 	vmov.f32	s13, s0
 8024f96:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8024f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8024f9e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    static float pre_filter = 0.0;
    float filter = pre_filter * (1.0 - LPF_VELOCITY) + (current * LPF_VELOCITY);
 8024fa2:	4b71      	ldr	r3, [pc, #452]	; (8025168 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8024fa4:	681b      	ldr	r3, [r3, #0]
 8024fa6:	4618      	mov	r0, r3
 8024fa8:	f7fb f9ae 	bl	8020308 <__aeabi_f2d>
 8024fac:	a368      	add	r3, pc, #416	; (adr r3, 8025150 <_ZN15VelocityControl10PidControlEffff+0x1e0>)
 8024fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fb2:	f7fb fa01 	bl	80203b8 <__aeabi_dmul>
 8024fb6:	4603      	mov	r3, r0
 8024fb8:	460c      	mov	r4, r1
 8024fba:	4625      	mov	r5, r4
 8024fbc:	461c      	mov	r4, r3
 8024fbe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024fc0:	f7fb f9a2 	bl	8020308 <__aeabi_f2d>
 8024fc4:	a364      	add	r3, pc, #400	; (adr r3, 8025158 <_ZN15VelocityControl10PidControlEffff+0x1e8>)
 8024fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fca:	f7fb f9f5 	bl	80203b8 <__aeabi_dmul>
 8024fce:	4602      	mov	r2, r0
 8024fd0:	460b      	mov	r3, r1
 8024fd2:	4620      	mov	r0, r4
 8024fd4:	4629      	mov	r1, r5
 8024fd6:	f7fb f839 	bl	802004c <__adddf3>
 8024fda:	4603      	mov	r3, r0
 8024fdc:	460c      	mov	r4, r1
 8024fde:	4618      	mov	r0, r3
 8024fe0:	4621      	mov	r1, r4
 8024fe2:	f7fb fc83 	bl	80208ec <__aeabi_d2f>
 8024fe6:	4603      	mov	r3, r0
 8024fe8:	633b      	str	r3, [r7, #48]	; 0x30
    pre_filter = filter;
 8024fea:	4a5f      	ldr	r2, [pc, #380]	; (8025168 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8024fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024fee:	6013      	str	r3, [r2, #0]

    float error = target - filter;
 8024ff0:	ed97 7a04 	vldr	s14, [r7, #16]
 8024ff4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8024ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024ffc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    static float pre_error = error;
 8025000:	4b5a      	ldr	r3, [pc, #360]	; (802516c <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8025002:	781b      	ldrb	r3, [r3, #0]
 8025004:	f3bf 8f5b 	dmb	ish
 8025008:	b2db      	uxtb	r3, r3
 802500a:	f003 0301 	and.w	r3, r3, #1
 802500e:	2b00      	cmp	r3, #0
 8025010:	bf0c      	ite	eq
 8025012:	2301      	moveq	r3, #1
 8025014:	2300      	movne	r3, #0
 8025016:	b2db      	uxtb	r3, r3
 8025018:	2b00      	cmp	r3, #0
 802501a:	d010      	beq.n	802503e <_ZN15VelocityControl10PidControlEffff+0xce>
 802501c:	4853      	ldr	r0, [pc, #332]	; (802516c <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 802501e:	f005 fbaf 	bl	802a780 <__cxa_guard_acquire>
 8025022:	4603      	mov	r3, r0
 8025024:	2b00      	cmp	r3, #0
 8025026:	bf14      	ite	ne
 8025028:	2301      	movne	r3, #1
 802502a:	2300      	moveq	r3, #0
 802502c:	b2db      	uxtb	r3, r3
 802502e:	2b00      	cmp	r3, #0
 8025030:	d005      	beq.n	802503e <_ZN15VelocityControl10PidControlEffff+0xce>
 8025032:	4a4f      	ldr	r2, [pc, #316]	; (8025170 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025036:	6013      	str	r3, [r2, #0]
 8025038:	484c      	ldr	r0, [pc, #304]	; (802516c <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 802503a:	f005 fbad 	bl	802a798 <__cxa_guard_release>

    float differential_error = (error - pre_error) / TIM6_PERIOD_S;
 802503e:	4b4c      	ldr	r3, [pc, #304]	; (8025170 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025040:	edd3 7a00 	vldr	s15, [r3]
 8025044:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8025048:	ee77 7a67 	vsub.f32	s15, s14, s15
 802504c:	ee17 0a90 	vmov	r0, s15
 8025050:	f7fb f95a 	bl	8020308 <__aeabi_f2d>
 8025054:	a342      	add	r3, pc, #264	; (adr r3, 8025160 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8025056:	e9d3 2300 	ldrd	r2, r3, [r3]
 802505a:	f7fb fad7 	bl	802060c <__aeabi_ddiv>
 802505e:	4603      	mov	r3, r0
 8025060:	460c      	mov	r4, r1
 8025062:	4618      	mov	r0, r3
 8025064:	4621      	mov	r1, r4
 8025066:	f7fb fc41 	bl	80208ec <__aeabi_d2f>
 802506a:	4603      	mov	r3, r0
 802506c:	62bb      	str	r3, [r7, #40]	; 0x28
    float integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 802506e:	4b40      	ldr	r3, [pc, #256]	; (8025170 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025070:	ed93 7a00 	vldr	s14, [r3]
 8025074:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8025078:	ee77 7a27 	vadd.f32	s15, s14, s15
 802507c:	ee17 0a90 	vmov	r0, s15
 8025080:	f7fb f942 	bl	8020308 <__aeabi_f2d>
 8025084:	f04f 0200 	mov.w	r2, #0
 8025088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802508c:	f7fb fabe 	bl	802060c <__aeabi_ddiv>
 8025090:	4603      	mov	r3, r0
 8025092:	460c      	mov	r4, r1
 8025094:	4618      	mov	r0, r3
 8025096:	4621      	mov	r1, r4
 8025098:	a331      	add	r3, pc, #196	; (adr r3, 8025160 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 802509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802509e:	f7fb f98b 	bl	80203b8 <__aeabi_dmul>
 80250a2:	4603      	mov	r3, r0
 80250a4:	460c      	mov	r4, r1
 80250a6:	4618      	mov	r0, r3
 80250a8:	4621      	mov	r1, r4
 80250aa:	f7fb fc1f 	bl	80208ec <__aeabi_d2f>
 80250ae:	4603      	mov	r3, r0
 80250b0:	627b      	str	r3, [r7, #36]	; 0x24
    SetIntegralError(integral_error);
 80250b2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80250b6:	6978      	ldr	r0, [r7, #20]
 80250b8:	f000 f870 	bl	802519c <_ZN15VelocityControl16SetIntegralErrorEf>
    pre_error = error;
 80250bc:	4a2c      	ldr	r2, [pc, #176]	; (8025170 <_ZN15VelocityControl10PidControlEffff+0x200>)
 80250be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80250c0:	6013      	str	r3, [r2, #0]

    float p = p_gain * error;
 80250c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80250c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80250ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80250ce:	edc7 7a08 	vstr	s15, [r7, #32]
    float d = d_gain * differential_error;
 80250d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80250d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80250da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80250de:	edc7 7a07 	vstr	s15, [r7, #28]
    float i = i_gain * integral_error_;
 80250e2:	697b      	ldr	r3, [r7, #20]
 80250e4:	edd3 7a00 	vldr	s15, [r3]
 80250e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80250ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80250f0:	edc7 7a06 	vstr	s15, [r7, #24]

#ifdef DEBUG_MODE
    g_target_velocity  = target;
 80250f4:	4a1f      	ldr	r2, [pc, #124]	; (8025174 <_ZN15VelocityControl10PidControlEffff+0x204>)
 80250f6:	693b      	ldr	r3, [r7, #16]
 80250f8:	6013      	str	r3, [r2, #0]
    g_current_velocity = current;
 80250fa:	4a1f      	ldr	r2, [pc, #124]	; (8025178 <_ZN15VelocityControl10PidControlEffff+0x208>)
 80250fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80250fe:	6013      	str	r3, [r2, #0]
    g_filter_velocity  = filter;
 8025100:	4a1e      	ldr	r2, [pc, #120]	; (802517c <_ZN15VelocityControl10PidControlEffff+0x20c>)
 8025102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025104:	6013      	str	r3, [r2, #0]
    g_velocity_error   = error;
 8025106:	4a1e      	ldr	r2, [pc, #120]	; (8025180 <_ZN15VelocityControl10PidControlEffff+0x210>)
 8025108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802510a:	6013      	str	r3, [r2, #0]
    g_velocity_p = p;       g_velocity_d = d;       g_velocity_i = i;
 802510c:	4a1d      	ldr	r2, [pc, #116]	; (8025184 <_ZN15VelocityControl10PidControlEffff+0x214>)
 802510e:	6a3b      	ldr	r3, [r7, #32]
 8025110:	6013      	str	r3, [r2, #0]
 8025112:	4a1d      	ldr	r2, [pc, #116]	; (8025188 <_ZN15VelocityControl10PidControlEffff+0x218>)
 8025114:	69fb      	ldr	r3, [r7, #28]
 8025116:	6013      	str	r3, [r2, #0]
 8025118:	4a1c      	ldr	r2, [pc, #112]	; (802518c <_ZN15VelocityControl10PidControlEffff+0x21c>)
 802511a:	69bb      	ldr	r3, [r7, #24]
 802511c:	6013      	str	r3, [r2, #0]
    g_velocity_p_gain = p;  g_velocity_d_gain = p;  g_velocity_i_gain = p;
 802511e:	4a1c      	ldr	r2, [pc, #112]	; (8025190 <_ZN15VelocityControl10PidControlEffff+0x220>)
 8025120:	6a3b      	ldr	r3, [r7, #32]
 8025122:	6013      	str	r3, [r2, #0]
 8025124:	4a1b      	ldr	r2, [pc, #108]	; (8025194 <_ZN15VelocityControl10PidControlEffff+0x224>)
 8025126:	6a3b      	ldr	r3, [r7, #32]
 8025128:	6013      	str	r3, [r2, #0]
 802512a:	4a1b      	ldr	r2, [pc, #108]	; (8025198 <_ZN15VelocityControl10PidControlEffff+0x228>)
 802512c:	6a3b      	ldr	r3, [r7, #32]
 802512e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    return p + d + i;
 8025130:	ed97 7a08 	vldr	s14, [r7, #32]
 8025134:	edd7 7a07 	vldr	s15, [r7, #28]
 8025138:	ee37 7a27 	vadd.f32	s14, s14, s15
 802513c:	edd7 7a06 	vldr	s15, [r7, #24]
 8025140:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8025144:	eeb0 0a67 	vmov.f32	s0, s15
 8025148:	3738      	adds	r7, #56	; 0x38
 802514a:	46bd      	mov	sp, r7
 802514c:	bdb0      	pop	{r4, r5, r7, pc}
 802514e:	bf00      	nop
 8025150:	33333334 	.word	0x33333334
 8025154:	3fd33333 	.word	0x3fd33333
 8025158:	66666666 	.word	0x66666666
 802515c:	3fe66666 	.word	0x3fe66666
 8025160:	47ae147b 	.word	0x47ae147b
 8025164:	3f547ae1 	.word	0x3f547ae1
 8025168:	20000340 	.word	0x20000340
 802516c:	20000348 	.word	0x20000348
 8025170:	20000344 	.word	0x20000344
 8025174:	200002e0 	.word	0x200002e0
 8025178:	200002e4 	.word	0x200002e4
 802517c:	200002e8 	.word	0x200002e8
 8025180:	200002ec 	.word	0x200002ec
 8025184:	200002f0 	.word	0x200002f0
 8025188:	200002f8 	.word	0x200002f8
 802518c:	200002f4 	.word	0x200002f4
 8025190:	200002fc 	.word	0x200002fc
 8025194:	20000304 	.word	0x20000304
 8025198:	20000300 	.word	0x20000300

0802519c <_ZN15VelocityControl16SetIntegralErrorEf>:

void VelocityControl::SetIntegralError(float integral_error)
{
 802519c:	b480      	push	{r7}
 802519e:	b083      	sub	sp, #12
 80251a0:	af00      	add	r7, sp, #0
 80251a2:	6078      	str	r0, [r7, #4]
 80251a4:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 80251a8:	687b      	ldr	r3, [r7, #4]
 80251aa:	ed93 7a00 	vldr	s14, [r3]
 80251ae:	edd7 7a00 	vldr	s15, [r7]
 80251b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80251b6:	687b      	ldr	r3, [r7, #4]
 80251b8:	edc3 7a00 	vstr	s15, [r3]
}
 80251bc:	bf00      	nop
 80251be:	370c      	adds	r7, #12
 80251c0:	46bd      	mov	sp, r7
 80251c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251c6:	4770      	bx	lr

080251c8 <Init>:
RotarySwitch rotary_switch;
SideSensor side_sensor;
VelocityControl velocity_control;

void Init()
{
 80251c8:	b580      	push	{r7, lr}
 80251ca:	b082      	sub	sp, #8
 80251cc:	af00      	add	r7, sp, #0
    line_sensor.Init();
 80251ce:	4818      	ldr	r0, [pc, #96]	; (8025230 <Init+0x68>)
 80251d0:	f7fc fce4 	bl	8021b9c <_ZN10LineSensor4InitEv>
    encoder.Init();
 80251d4:	4817      	ldr	r0, [pc, #92]	; (8025234 <Init+0x6c>)
 80251d6:	f7fb fdb5 	bl	8020d44 <_ZN7Encoder4InitEv>
    motor.Init();
 80251da:	4817      	ldr	r0, [pc, #92]	; (8025238 <Init+0x70>)
 80251dc:	f7fe fe02 	bl	8023de4 <_ZN5Motor4InitEv>
    uint8_t imu_init = iim_42652.Init();
 80251e0:	4816      	ldr	r0, [pc, #88]	; (802523c <Init+0x74>)
 80251e2:	f7fc f8af 	bl	8021344 <_ZN8Iim426524InitEv>
 80251e6:	4603      	mov	r3, r0
 80251e8:	71fb      	strb	r3, [r7, #7]

    if(imu_init == 0x09)
 80251ea:	79fb      	ldrb	r3, [r7, #7]
 80251ec:	2b09      	cmp	r3, #9
 80251ee:	d10b      	bne.n	8025208 <Init+0x40>
    {
        led.Blink(1,'R','G');
 80251f0:	2347      	movs	r3, #71	; 0x47
 80251f2:	2252      	movs	r2, #82	; 0x52
 80251f4:	2101      	movs	r1, #1
 80251f6:	4812      	ldr	r0, [pc, #72]	; (8025240 <Init+0x78>)
 80251f8:	f7fc fc14 	bl	8021a24 <_ZN3Led5BlinkEhcc>
        led.Blink(1,'B','X');
 80251fc:	2358      	movs	r3, #88	; 0x58
 80251fe:	2242      	movs	r2, #66	; 0x42
 8025200:	2101      	movs	r1, #1
 8025202:	480f      	ldr	r0, [pc, #60]	; (8025240 <Init+0x78>)
 8025204:	f7fc fc0e 	bl	8021a24 <_ZN3Led5BlinkEhcc>
    }

#ifdef DEBUG_MODE
    g_imu_init = imu_init;
 8025208:	4a0e      	ldr	r2, [pc, #56]	; (8025244 <Init+0x7c>)
 802520a:	79fb      	ldrb	r3, [r7, #7]
 802520c:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    HAL_TIM_Base_Start_IT(&htim2);
 802520e:	480e      	ldr	r0, [pc, #56]	; (8025248 <Init+0x80>)
 8025210:	f004 fabf 	bl	8029792 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim5);
 8025214:	480d      	ldr	r0, [pc, #52]	; (802524c <Init+0x84>)
 8025216:	f004 fabc 	bl	8029792 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 802521a:	480d      	ldr	r0, [pc, #52]	; (8025250 <Init+0x88>)
 802521c:	f004 fab9 	bl	8029792 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 8025220:	480c      	ldr	r0, [pc, #48]	; (8025254 <Init+0x8c>)
 8025222:	f004 fab6 	bl	8029792 <HAL_TIM_Base_Start_IT>
}
 8025226:	bf00      	nop
 8025228:	3708      	adds	r7, #8
 802522a:	46bd      	mov	sp, r7
 802522c:	bd80      	pop	{r7, pc}
 802522e:	bf00      	nop
 8025230:	2000036c 	.word	0x2000036c
 8025234:	2000034c 	.word	0x2000034c
 8025238:	20000790 	.word	0x20000790
 802523c:	20000360 	.word	0x20000360
 8025240:	20000368 	.word	0x20000368
 8025244:	2000026d 	.word	0x2000026d
 8025248:	20000acc 	.word	0x20000acc
 802524c:	2000088c 	.word	0x2000088c
 8025250:	20000a4c 	.word	0x20000a4c
 8025254:	20000b4c 	.word	0x20000b4c

08025258 <InterruptTim7>:
#endif // DEBUG_MODE
}


void InterruptTim7()
{
 8025258:	b580      	push	{r7, lr}
 802525a:	af00      	add	r7, sp, #0
    line_sensor.StoreConsecutiveBuff();
 802525c:	4804      	ldr	r0, [pc, #16]	; (8025270 <InterruptTim7+0x18>)
 802525e:	f7fc fcd7 	bl	8021c10 <_ZN10LineSensor20StoreConsecutiveBuffEv>

#ifdef DEBUG_MODE
    g_tim7++;
 8025262:	4b04      	ldr	r3, [pc, #16]	; (8025274 <InterruptTim7+0x1c>)
 8025264:	681b      	ldr	r3, [r3, #0]
 8025266:	3301      	adds	r3, #1
 8025268:	4a02      	ldr	r2, [pc, #8]	; (8025274 <InterruptTim7+0x1c>)
 802526a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 802526c:	bf00      	nop
 802526e:	bd80      	pop	{r7, pc}
 8025270:	2000036c 	.word	0x2000036c
 8025274:	20000308 	.word	0x20000308

08025278 <InterruptTim6>:


void InterruptTim6()
{
 8025278:	b580      	push	{r7, lr}
 802527a:	af00      	add	r7, sp, #0
    if(g_tim6_complete == 0) g_tim6_yet = 0x01;
 802527c:	4bbf      	ldr	r3, [pc, #764]	; (802557c <InterruptTim6+0x304>)
 802527e:	781b      	ldrb	r3, [r3, #0]
 8025280:	2b00      	cmp	r3, #0
 8025282:	d102      	bne.n	802528a <InterruptTim6+0x12>
 8025284:	4bbe      	ldr	r3, [pc, #760]	; (8025580 <InterruptTim6+0x308>)
 8025286:	2201      	movs	r2, #1
 8025288:	701a      	strb	r2, [r3, #0]
    g_tim6_complete = 0;
 802528a:	4bbc      	ldr	r3, [pc, #752]	; (802557c <InterruptTim6+0x304>)
 802528c:	2200      	movs	r2, #0
 802528e:	701a      	strb	r2, [r3, #0]

    switch(g_mode)
 8025290:	4bbc      	ldr	r3, [pc, #752]	; (8025584 <InterruptTim6+0x30c>)
 8025292:	781b      	ldrb	r3, [r3, #0]
 8025294:	2b20      	cmp	r3, #32
 8025296:	f200 824b 	bhi.w	8025730 <InterruptTim6+0x4b8>
 802529a:	a201      	add	r2, pc, #4	; (adr r2, 80252a0 <InterruptTim6+0x28>)
 802529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80252a0:	08025355 	.word	0x08025355
 80252a4:	08025365 	.word	0x08025365
 80252a8:	08025427 	.word	0x08025427
 80252ac:	08025731 	.word	0x08025731
 80252b0:	080255d5 	.word	0x080255d5
 80252b4:	080254f1 	.word	0x080254f1
 80252b8:	08025731 	.word	0x08025731
 80252bc:	08025731 	.word	0x08025731
 80252c0:	08025731 	.word	0x08025731
 80252c4:	08025731 	.word	0x08025731
 80252c8:	08025731 	.word	0x08025731
 80252cc:	08025731 	.word	0x08025731
 80252d0:	080256db 	.word	0x080256db
 80252d4:	08025689 	.word	0x08025689
 80252d8:	08025683 	.word	0x08025683
 80252dc:	08025325 	.word	0x08025325
 80252e0:	080253fd 	.word	0x080253fd
 80252e4:	08025731 	.word	0x08025731
 80252e8:	08025731 	.word	0x08025731
 80252ec:	08025731 	.word	0x08025731
 80252f0:	08025731 	.word	0x08025731
 80252f4:	08025731 	.word	0x08025731
 80252f8:	08025731 	.word	0x08025731
 80252fc:	08025731 	.word	0x08025731
 8025300:	08025731 	.word	0x08025731
 8025304:	08025731 	.word	0x08025731
 8025308:	08025731 	.word	0x08025731
 802530c:	08025731 	.word	0x08025731
 8025310:	08025731 	.word	0x08025731
 8025314:	08025731 	.word	0x08025731
 8025318:	08025731 	.word	0x08025731
 802531c:	08025731 	.word	0x08025731
 8025320:	080254d9 	.word	0x080254d9
    {
        case READY:
            line_sensor.Update();
 8025324:	4898      	ldr	r0, [pc, #608]	; (8025588 <InterruptTim6+0x310>)
 8025326:	f7fc fd7b 	bl	8021e20 <_ZN10LineSensor6UpdateEv>
            g_line_calib = line_sensor.CheckCalibration();
 802532a:	4897      	ldr	r0, [pc, #604]	; (8025588 <InterruptTim6+0x310>)
 802532c:	f7fc feac 	bl	8022088 <_ZN10LineSensor16CheckCalibrationEv>
 8025330:	4603      	mov	r3, r0
 8025332:	461a      	mov	r2, r3
 8025334:	4b95      	ldr	r3, [pc, #596]	; (802558c <InterruptTim6+0x314>)
 8025336:	701a      	strb	r2, [r3, #0]
            if(g_line_calib == 0) led.ColorOrder('X');
 8025338:	4b94      	ldr	r3, [pc, #592]	; (802558c <InterruptTim6+0x314>)
 802533a:	781b      	ldrb	r3, [r3, #0]
 802533c:	2b00      	cmp	r3, #0
 802533e:	d104      	bne.n	802534a <InterruptTim6+0xd2>
 8025340:	2158      	movs	r1, #88	; 0x58
 8025342:	4893      	ldr	r0, [pc, #588]	; (8025590 <InterruptTim6+0x318>)
 8025344:	f7fc fa92 	bl	802186c <_ZN3Led10ColorOrderEc>
            else led.ColorOrder('R');
            break;
 8025348:	e1ff      	b.n	802574a <InterruptTim6+0x4d2>
            else led.ColorOrder('R');
 802534a:	2152      	movs	r1, #82	; 0x52
 802534c:	4890      	ldr	r0, [pc, #576]	; (8025590 <InterruptTim6+0x318>)
 802534e:	f7fc fa8d 	bl	802186c <_ZN3Led10ColorOrderEc>
            break;
 8025352:	e1fa      	b.n	802574a <InterruptTim6+0x4d2>

        case STANDBY:
            motor.Drive(0, 0);
 8025354:	eddf 0a8f 	vldr	s1, [pc, #572]	; 8025594 <InterruptTim6+0x31c>
 8025358:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8025594 <InterruptTim6+0x31c>
 802535c:	488e      	ldr	r0, [pc, #568]	; (8025598 <InterruptTim6+0x320>)
 802535e:	f7fe fd6b 	bl	8023e38 <_ZN5Motor5DriveEff>
            break;
 8025362:	e1f2      	b.n	802574a <InterruptTim6+0x4d2>

        case FIRST_RUN:
            /* Sensor update */
            line_sensor.Update();
 8025364:	4888      	ldr	r0, [pc, #544]	; (8025588 <InterruptTim6+0x310>)
 8025366:	f7fc fd5b 	bl	8021e20 <_ZN10LineSensor6UpdateEv>
            encoder.Update();
 802536a:	488c      	ldr	r0, [pc, #560]	; (802559c <InterruptTim6+0x324>)
 802536c:	f7fb fd00 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 8025370:	488b      	ldr	r0, [pc, #556]	; (80255a0 <InterruptTim6+0x328>)
 8025372:	f7fe ffa9 	bl	80242c8 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 8025376:	488a      	ldr	r0, [pc, #552]	; (80255a0 <InterruptTim6+0x328>)
 8025378:	f7ff f9d0 	bl	802471c <_ZN10SideSensor18GetGoalMarkerCountEv>
 802537c:	4603      	mov	r3, r0
 802537e:	461a      	mov	r2, r3
 8025380:	4b88      	ldr	r3, [pc, #544]	; (80255a4 <InterruptTim6+0x32c>)
 8025382:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_target = TargetVelocity(MIN_VELOCITY, MIN_VELOCITY);
 8025384:	eddf 0a88 	vldr	s1, [pc, #544]	; 80255a8 <InterruptTim6+0x330>
 8025388:	ed9f 0a87 	vldr	s0, [pc, #540]	; 80255a8 <InterruptTim6+0x330>
 802538c:	f000 fca4 	bl	8025cd8 <TargetVelocity>
 8025390:	eef0 7a40 	vmov.f32	s15, s0
 8025394:	4b85      	ldr	r3, [pc, #532]	; (80255ac <InterruptTim6+0x334>)
 8025396:	edc3 7a00 	vstr	s15, [r3]
            g_trans = velocity_control.PidControl(g_target, V_P_1, V_I_1, V_D_1);
 802539a:	4b84      	ldr	r3, [pc, #528]	; (80255ac <InterruptTim6+0x334>)
 802539c:	edd3 7a00 	vldr	s15, [r3]
 80253a0:	eddf 1a7c 	vldr	s3, [pc, #496]	; 8025594 <InterruptTim6+0x31c>
 80253a4:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 8025594 <InterruptTim6+0x31c>
 80253a8:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8025594 <InterruptTim6+0x31c>
 80253ac:	eeb0 0a67 	vmov.f32	s0, s15
 80253b0:	487f      	ldr	r0, [pc, #508]	; (80255b0 <InterruptTim6+0x338>)
 80253b2:	f7ff fddd 	bl	8024f70 <_ZN15VelocityControl10PidControlEffff>
 80253b6:	eef0 7a40 	vmov.f32	s15, s0
 80253ba:	4b7e      	ldr	r3, [pc, #504]	; (80255b4 <InterruptTim6+0x33c>)
 80253bc:	edc3 7a00 	vstr	s15, [r3]
            g_rotat = line_trace.PidControl(LINE_P_1, LINE_I_1, LINE_D_1);
 80253c0:	ed9f 1a74 	vldr	s2, [pc, #464]	; 8025594 <InterruptTim6+0x31c>
 80253c4:	eddf 0a73 	vldr	s1, [pc, #460]	; 8025594 <InterruptTim6+0x31c>
 80253c8:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8025594 <InterruptTim6+0x31c>
 80253cc:	487a      	ldr	r0, [pc, #488]	; (80255b8 <InterruptTim6+0x340>)
 80253ce:	f7fc ff0b 	bl	80221e8 <_ZN9LineTrace10PidControlEfff>
 80253d2:	eef0 7a40 	vmov.f32	s15, s0
 80253d6:	4b79      	ldr	r3, [pc, #484]	; (80255bc <InterruptTim6+0x344>)
 80253d8:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(g_trans, g_rotat);
 80253dc:	4b75      	ldr	r3, [pc, #468]	; (80255b4 <InterruptTim6+0x33c>)
 80253de:	edd3 7a00 	vldr	s15, [r3]
 80253e2:	4b76      	ldr	r3, [pc, #472]	; (80255bc <InterruptTim6+0x344>)
 80253e4:	ed93 7a00 	vldr	s14, [r3]
 80253e8:	eef0 0a47 	vmov.f32	s1, s14
 80253ec:	eeb0 0a67 	vmov.f32	s0, s15
 80253f0:	4869      	ldr	r0, [pc, #420]	; (8025598 <InterruptTim6+0x320>)
 80253f2:	f7fe fd21 	bl	8023e38 <_ZN5Motor5DriveEff>
            EmergencyStop();
 80253f6:	f000 fc3b 	bl	8025c70 <EmergencyStop>
            break;
 80253fa:	e1a6      	b.n	802574a <InterruptTim6+0x4d2>
        
        case FIRST_GOAL:
            motor.Drive(0, 0);
 80253fc:	eddf 0a65 	vldr	s1, [pc, #404]	; 8025594 <InterruptTim6+0x31c>
 8025400:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8025594 <InterruptTim6+0x31c>
 8025404:	4864      	ldr	r0, [pc, #400]	; (8025598 <InterruptTim6+0x320>)
 8025406:	f7fe fd17 	bl	8023e38 <_ZN5Motor5DriveEff>
            if(g_first_log_failed == 1) led.ColorOrder('R');
 802540a:	4b6d      	ldr	r3, [pc, #436]	; (80255c0 <InterruptTim6+0x348>)
 802540c:	781b      	ldrb	r3, [r3, #0]
 802540e:	2b01      	cmp	r3, #1
 8025410:	d104      	bne.n	802541c <InterruptTim6+0x1a4>
 8025412:	2152      	movs	r1, #82	; 0x52
 8025414:	485e      	ldr	r0, [pc, #376]	; (8025590 <InterruptTim6+0x318>)
 8025416:	f7fc fa29 	bl	802186c <_ZN3Led10ColorOrderEc>
            else led.ColorOrder('B');
            break;
 802541a:	e196      	b.n	802574a <InterruptTim6+0x4d2>
            else led.ColorOrder('B');
 802541c:	2142      	movs	r1, #66	; 0x42
 802541e:	485c      	ldr	r0, [pc, #368]	; (8025590 <InterruptTim6+0x318>)
 8025420:	f7fc fa24 	bl	802186c <_ZN3Led10ColorOrderEc>
            break;
 8025424:	e191      	b.n	802574a <InterruptTim6+0x4d2>

        case SECOND_RUN:
            /* Sensor update */
            line_sensor.Update();
 8025426:	4858      	ldr	r0, [pc, #352]	; (8025588 <InterruptTim6+0x310>)
 8025428:	f7fc fcfa 	bl	8021e20 <_ZN10LineSensor6UpdateEv>
            encoder.Update();
 802542c:	485b      	ldr	r0, [pc, #364]	; (802559c <InterruptTim6+0x324>)
 802542e:	f7fb fc9f 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 8025432:	485b      	ldr	r0, [pc, #364]	; (80255a0 <InterruptTim6+0x328>)
 8025434:	f7fe ff48 	bl	80242c8 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 8025438:	4859      	ldr	r0, [pc, #356]	; (80255a0 <InterruptTim6+0x328>)
 802543a:	f7ff f96f 	bl	802471c <_ZN10SideSensor18GetGoalMarkerCountEv>
 802543e:	4603      	mov	r3, r0
 8025440:	461a      	mov	r2, r3
 8025442:	4b58      	ldr	r3, [pc, #352]	; (80255a4 <InterruptTim6+0x32c>)
 8025444:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_target = TargetVelocity(logger.GetTargetVelocity(), MIN_VELOCITY);
 8025446:	485f      	ldr	r0, [pc, #380]	; (80255c4 <InterruptTim6+0x34c>)
 8025448:	f7fd fe40 	bl	80230cc <_ZN6Logger17GetTargetVelocityEv>
 802544c:	eef0 7a40 	vmov.f32	s15, s0
 8025450:	eddf 0a55 	vldr	s1, [pc, #340]	; 80255a8 <InterruptTim6+0x330>
 8025454:	eeb0 0a67 	vmov.f32	s0, s15
 8025458:	f000 fc3e 	bl	8025cd8 <TargetVelocity>
 802545c:	eef0 7a40 	vmov.f32	s15, s0
 8025460:	4b52      	ldr	r3, [pc, #328]	; (80255ac <InterruptTim6+0x334>)
 8025462:	edc3 7a00 	vstr	s15, [r3]
            g_trans = velocity_control.PidControl(g_target, V_P_1, V_I_1, V_D_1);
 8025466:	4b51      	ldr	r3, [pc, #324]	; (80255ac <InterruptTim6+0x334>)
 8025468:	edd3 7a00 	vldr	s15, [r3]
 802546c:	eddf 1a49 	vldr	s3, [pc, #292]	; 8025594 <InterruptTim6+0x31c>
 8025470:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8025594 <InterruptTim6+0x31c>
 8025474:	eddf 0a47 	vldr	s1, [pc, #284]	; 8025594 <InterruptTim6+0x31c>
 8025478:	eeb0 0a67 	vmov.f32	s0, s15
 802547c:	484c      	ldr	r0, [pc, #304]	; (80255b0 <InterruptTim6+0x338>)
 802547e:	f7ff fd77 	bl	8024f70 <_ZN15VelocityControl10PidControlEffff>
 8025482:	eef0 7a40 	vmov.f32	s15, s0
 8025486:	4b4b      	ldr	r3, [pc, #300]	; (80255b4 <InterruptTim6+0x33c>)
 8025488:	edc3 7a00 	vstr	s15, [r3]
            g_rotat = line_trace.PidControl(LINE_P_1, LINE_I_1, LINE_D_1);
 802548c:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8025594 <InterruptTim6+0x31c>
 8025490:	eddf 0a40 	vldr	s1, [pc, #256]	; 8025594 <InterruptTim6+0x31c>
 8025494:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8025594 <InterruptTim6+0x31c>
 8025498:	4847      	ldr	r0, [pc, #284]	; (80255b8 <InterruptTim6+0x340>)
 802549a:	f7fc fea5 	bl	80221e8 <_ZN9LineTrace10PidControlEfff>
 802549e:	eef0 7a40 	vmov.f32	s15, s0
 80254a2:	4b46      	ldr	r3, [pc, #280]	; (80255bc <InterruptTim6+0x344>)
 80254a4:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(g_trans, g_rotat);
 80254a8:	4b42      	ldr	r3, [pc, #264]	; (80255b4 <InterruptTim6+0x33c>)
 80254aa:	edd3 7a00 	vldr	s15, [r3]
 80254ae:	4b43      	ldr	r3, [pc, #268]	; (80255bc <InterruptTim6+0x344>)
 80254b0:	ed93 7a00 	vldr	s14, [r3]
 80254b4:	eef0 0a47 	vmov.f32	s1, s14
 80254b8:	eeb0 0a67 	vmov.f32	s0, s15
 80254bc:	4836      	ldr	r0, [pc, #216]	; (8025598 <InterruptTim6+0x320>)
 80254be:	f7fe fcbb 	bl	8023e38 <_ZN5Motor5DriveEff>
            EmergencyStop();
 80254c2:	f000 fbd5 	bl	8025c70 <EmergencyStop>
            if(g_run_end == 1) g_mode = SECOND_GOAL;
 80254c6:	4b40      	ldr	r3, [pc, #256]	; (80255c8 <InterruptTim6+0x350>)
 80254c8:	781b      	ldrb	r3, [r3, #0]
 80254ca:	2b01      	cmp	r3, #1
 80254cc:	f040 8138 	bne.w	8025740 <InterruptTim6+0x4c8>
 80254d0:	4b2c      	ldr	r3, [pc, #176]	; (8025584 <InterruptTim6+0x30c>)
 80254d2:	2220      	movs	r2, #32
 80254d4:	701a      	strb	r2, [r3, #0]
            break;
 80254d6:	e133      	b.n	8025740 <InterruptTim6+0x4c8>

        case SECOND_GOAL:
            motor.Drive(0, 0);
 80254d8:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8025594 <InterruptTim6+0x31c>
 80254dc:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8025594 <InterruptTim6+0x31c>
 80254e0:	482d      	ldr	r0, [pc, #180]	; (8025598 <InterruptTim6+0x320>)
 80254e2:	f7fe fca9 	bl	8023e38 <_ZN5Motor5DriveEff>
            led.ColorOrder('M');
 80254e6:	214d      	movs	r1, #77	; 0x4d
 80254e8:	4829      	ldr	r0, [pc, #164]	; (8025590 <InterruptTim6+0x318>)
 80254ea:	f7fc f9bf 	bl	802186c <_ZN3Led10ColorOrderEc>
            break;
 80254ee:	e12c      	b.n	802574a <InterruptTim6+0x4d2>

        case LINE_TRACE:
            /* Sensor update */
            line_sensor.Update();
 80254f0:	4825      	ldr	r0, [pc, #148]	; (8025588 <InterruptTim6+0x310>)
 80254f2:	f7fc fc95 	bl	8021e20 <_ZN10LineSensor6UpdateEv>
            encoder.Update();
 80254f6:	4829      	ldr	r0, [pc, #164]	; (802559c <InterruptTim6+0x324>)
 80254f8:	f7fb fc3a 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 80254fc:	4828      	ldr	r0, [pc, #160]	; (80255a0 <InterruptTim6+0x328>)
 80254fe:	f7fe fee3 	bl	80242c8 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 8025502:	4827      	ldr	r0, [pc, #156]	; (80255a0 <InterruptTim6+0x328>)
 8025504:	f7ff f90a 	bl	802471c <_ZN10SideSensor18GetGoalMarkerCountEv>
 8025508:	4603      	mov	r3, r0
 802550a:	461a      	mov	r2, r3
 802550c:	4b25      	ldr	r3, [pc, #148]	; (80255a4 <InterruptTim6+0x32c>)
 802550e:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_common_speed = TargetDuty(COMMON_DUTY, COMMON_DUTY);
 8025510:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80255cc <InterruptTim6+0x354>
 8025514:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80255cc <InterruptTim6+0x354>
 8025518:	f000 fc16 	bl	8025d48 <TargetDuty>
 802551c:	eef0 7a40 	vmov.f32	s15, s0
 8025520:	4b2b      	ldr	r3, [pc, #172]	; (80255d0 <InterruptTim6+0x358>)
 8025522:	edc3 7a00 	vstr	s15, [r3]
            g_rotat = line_trace.PidControl(LINE_P_1, LINE_I_1, LINE_D_1);
 8025526:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8025594 <InterruptTim6+0x31c>
 802552a:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8025594 <InterruptTim6+0x31c>
 802552e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8025594 <InterruptTim6+0x31c>
 8025532:	4821      	ldr	r0, [pc, #132]	; (80255b8 <InterruptTim6+0x340>)
 8025534:	f7fc fe58 	bl	80221e8 <_ZN9LineTrace10PidControlEfff>
 8025538:	eef0 7a40 	vmov.f32	s15, s0
 802553c:	4b1f      	ldr	r3, [pc, #124]	; (80255bc <InterruptTim6+0x344>)
 802553e:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(g_common_speed, g_rotat);
 8025542:	4b23      	ldr	r3, [pc, #140]	; (80255d0 <InterruptTim6+0x358>)
 8025544:	edd3 7a00 	vldr	s15, [r3]
 8025548:	4b1c      	ldr	r3, [pc, #112]	; (80255bc <InterruptTim6+0x344>)
 802554a:	ed93 7a00 	vldr	s14, [r3]
 802554e:	eef0 0a47 	vmov.f32	s1, s14
 8025552:	eeb0 0a67 	vmov.f32	s0, s15
 8025556:	4810      	ldr	r0, [pc, #64]	; (8025598 <InterruptTim6+0x320>)
 8025558:	f7fe fc6e 	bl	8023e38 <_ZN5Motor5DriveEff>
            EmergencyStop();
 802555c:	f000 fb88 	bl	8025c70 <EmergencyStop>
            if(g_run_end == 1)
 8025560:	4b19      	ldr	r3, [pc, #100]	; (80255c8 <InterruptTim6+0x350>)
 8025562:	781b      	ldrb	r3, [r3, #0]
 8025564:	2b01      	cmp	r3, #1
 8025566:	f040 80ed 	bne.w	8025744 <InterruptTim6+0x4cc>
            {
                led.ColorOrder('Y');
 802556a:	2159      	movs	r1, #89	; 0x59
 802556c:	4808      	ldr	r0, [pc, #32]	; (8025590 <InterruptTim6+0x318>)
 802556e:	f7fc f97d 	bl	802186c <_ZN3Led10ColorOrderEc>
                g_mode = STANDBY;
 8025572:	4b04      	ldr	r3, [pc, #16]	; (8025584 <InterruptTim6+0x30c>)
 8025574:	2200      	movs	r2, #0
 8025576:	701a      	strb	r2, [r3, #0]
            }
            break;
 8025578:	e0e4      	b.n	8025744 <InterruptTim6+0x4cc>
 802557a:	bf00      	nop
 802557c:	2000031e 	.word	0x2000031e
 8025580:	20000321 	.word	0x20000321
 8025584:	2000031b 	.word	0x2000031b
 8025588:	2000036c 	.word	0x2000036c
 802558c:	20000324 	.word	0x20000324
 8025590:	20000368 	.word	0x20000368
 8025594:	00000000 	.word	0x00000000
 8025598:	20000790 	.word	0x20000790
 802559c:	2000034c 	.word	0x2000034c
 80255a0:	20000798 	.word	0x20000798
 80255a4:	20000325 	.word	0x20000325
 80255a8:	3fa66666 	.word	0x3fa66666
 80255ac:	20000334 	.word	0x20000334
 80255b0:	200007a0 	.word	0x200007a0
 80255b4:	20000328 	.word	0x20000328
 80255b8:	200004f8 	.word	0x200004f8
 80255bc:	2000032c 	.word	0x2000032c
 80255c0:	20000330 	.word	0x20000330
 80255c4:	20000688 	.word	0x20000688
 80255c8:	2000031d 	.word	0x2000031d
 80255cc:	3e4ccccd 	.word	0x3e4ccccd
 80255d0:	20000338 	.word	0x20000338

        case VELOCITY_CONTROL:
            /* Sensor update */
            line_sensor.Update();
 80255d4:	4862      	ldr	r0, [pc, #392]	; (8025760 <InterruptTim6+0x4e8>)
 80255d6:	f7fc fc23 	bl	8021e20 <_ZN10LineSensor6UpdateEv>
            encoder.Update();
 80255da:	4862      	ldr	r0, [pc, #392]	; (8025764 <InterruptTim6+0x4ec>)
 80255dc:	f7fb fbc8 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 80255e0:	4861      	ldr	r0, [pc, #388]	; (8025768 <InterruptTim6+0x4f0>)
 80255e2:	f7fe fe71 	bl	80242c8 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 80255e6:	4860      	ldr	r0, [pc, #384]	; (8025768 <InterruptTim6+0x4f0>)
 80255e8:	f7ff f898 	bl	802471c <_ZN10SideSensor18GetGoalMarkerCountEv>
 80255ec:	4603      	mov	r3, r0
 80255ee:	461a      	mov	r2, r3
 80255f0:	4b5e      	ldr	r3, [pc, #376]	; (802576c <InterruptTim6+0x4f4>)
 80255f2:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_target = TargetVelocity(MIN_VELOCITY, MIN_VELOCITY);
 80255f4:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8025770 <InterruptTim6+0x4f8>
 80255f8:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8025770 <InterruptTim6+0x4f8>
 80255fc:	f000 fb6c 	bl	8025cd8 <TargetVelocity>
 8025600:	eef0 7a40 	vmov.f32	s15, s0
 8025604:	4b5b      	ldr	r3, [pc, #364]	; (8025774 <InterruptTim6+0x4fc>)
 8025606:	edc3 7a00 	vstr	s15, [r3]
            g_trans = velocity_control.PidControl(g_target, V_P_1, V_I_1, V_D_1);
 802560a:	4b5a      	ldr	r3, [pc, #360]	; (8025774 <InterruptTim6+0x4fc>)
 802560c:	edd3 7a00 	vldr	s15, [r3]
 8025610:	eddf 1a59 	vldr	s3, [pc, #356]	; 8025778 <InterruptTim6+0x500>
 8025614:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8025778 <InterruptTim6+0x500>
 8025618:	eddf 0a57 	vldr	s1, [pc, #348]	; 8025778 <InterruptTim6+0x500>
 802561c:	eeb0 0a67 	vmov.f32	s0, s15
 8025620:	4856      	ldr	r0, [pc, #344]	; (802577c <InterruptTim6+0x504>)
 8025622:	f7ff fca5 	bl	8024f70 <_ZN15VelocityControl10PidControlEffff>
 8025626:	eef0 7a40 	vmov.f32	s15, s0
 802562a:	4b55      	ldr	r3, [pc, #340]	; (8025780 <InterruptTim6+0x508>)
 802562c:	edc3 7a00 	vstr	s15, [r3]
            g_rotat = line_trace.PidControl(LINE_P_1, LINE_I_1, LINE_D_1);
 8025630:	ed9f 1a51 	vldr	s2, [pc, #324]	; 8025778 <InterruptTim6+0x500>
 8025634:	eddf 0a50 	vldr	s1, [pc, #320]	; 8025778 <InterruptTim6+0x500>
 8025638:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8025778 <InterruptTim6+0x500>
 802563c:	4851      	ldr	r0, [pc, #324]	; (8025784 <InterruptTim6+0x50c>)
 802563e:	f7fc fdd3 	bl	80221e8 <_ZN9LineTrace10PidControlEfff>
 8025642:	eef0 7a40 	vmov.f32	s15, s0
 8025646:	4b50      	ldr	r3, [pc, #320]	; (8025788 <InterruptTim6+0x510>)
 8025648:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(g_trans, g_rotat);
 802564c:	4b4c      	ldr	r3, [pc, #304]	; (8025780 <InterruptTim6+0x508>)
 802564e:	edd3 7a00 	vldr	s15, [r3]
 8025652:	4b4d      	ldr	r3, [pc, #308]	; (8025788 <InterruptTim6+0x510>)
 8025654:	ed93 7a00 	vldr	s14, [r3]
 8025658:	eef0 0a47 	vmov.f32	s1, s14
 802565c:	eeb0 0a67 	vmov.f32	s0, s15
 8025660:	484a      	ldr	r0, [pc, #296]	; (802578c <InterruptTim6+0x514>)
 8025662:	f7fe fbe9 	bl	8023e38 <_ZN5Motor5DriveEff>
            EmergencyStop();
 8025666:	f000 fb03 	bl	8025c70 <EmergencyStop>
            if(g_run_end == 1)
 802566a:	4b49      	ldr	r3, [pc, #292]	; (8025790 <InterruptTim6+0x518>)
 802566c:	781b      	ldrb	r3, [r3, #0]
 802566e:	2b01      	cmp	r3, #1
 8025670:	d16a      	bne.n	8025748 <InterruptTim6+0x4d0>
            {
                led.ColorOrder('C');
 8025672:	2143      	movs	r1, #67	; 0x43
 8025674:	4847      	ldr	r0, [pc, #284]	; (8025794 <InterruptTim6+0x51c>)
 8025676:	f7fc f8f9 	bl	802186c <_ZN3Led10ColorOrderEc>
                g_mode = STANDBY;
 802567a:	4b47      	ldr	r3, [pc, #284]	; (8025798 <InterruptTim6+0x520>)
 802567c:	2200      	movs	r2, #0
 802567e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8025680:	e062      	b.n	8025748 <InterruptTim6+0x4d0>

#ifdef DEBUG_MODE
        case INITIAL_DEBUG:
            InitialTest();
 8025682:	f000 fe9d 	bl	80263c0 <InitialTest>
            break;
 8025686:	e060      	b.n	802574a <InterruptTim6+0x4d2>
        
        case LINE_TRACE_DEBUG:
            /* Sensor update */
            line_sensor.Update();
 8025688:	4835      	ldr	r0, [pc, #212]	; (8025760 <InterruptTim6+0x4e8>)
 802568a:	f7fc fbc9 	bl	8021e20 <_ZN10LineSensor6UpdateEv>
            encoder.Update();
 802568e:	4835      	ldr	r0, [pc, #212]	; (8025764 <InterruptTim6+0x4ec>)
 8025690:	f7fb fb6e 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 8025694:	4834      	ldr	r0, [pc, #208]	; (8025768 <InterruptTim6+0x4f0>)
 8025696:	f7fe fe17 	bl	80242c8 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 802569a:	4833      	ldr	r0, [pc, #204]	; (8025768 <InterruptTim6+0x4f0>)
 802569c:	f7ff f83e 	bl	802471c <_ZN10SideSensor18GetGoalMarkerCountEv>
 80256a0:	4603      	mov	r3, r0
 80256a2:	461a      	mov	r2, r3
 80256a4:	4b31      	ldr	r3, [pc, #196]	; (802576c <InterruptTim6+0x4f4>)
 80256a6:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_rotat = line_trace.PidControl(LINE_P_1, LINE_I_1, LINE_D_1);
 80256a8:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8025778 <InterruptTim6+0x500>
 80256ac:	eddf 0a32 	vldr	s1, [pc, #200]	; 8025778 <InterruptTim6+0x500>
 80256b0:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8025778 <InterruptTim6+0x500>
 80256b4:	4833      	ldr	r0, [pc, #204]	; (8025784 <InterruptTim6+0x50c>)
 80256b6:	f7fc fd97 	bl	80221e8 <_ZN9LineTrace10PidControlEfff>
 80256ba:	eef0 7a40 	vmov.f32	s15, s0
 80256be:	4b32      	ldr	r3, [pc, #200]	; (8025788 <InterruptTim6+0x510>)
 80256c0:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(0, g_rotat);
 80256c4:	4b30      	ldr	r3, [pc, #192]	; (8025788 <InterruptTim6+0x510>)
 80256c6:	edd3 7a00 	vldr	s15, [r3]
 80256ca:	eef0 0a67 	vmov.f32	s1, s15
 80256ce:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8025778 <InterruptTim6+0x500>
 80256d2:	482e      	ldr	r0, [pc, #184]	; (802578c <InterruptTim6+0x514>)
 80256d4:	f7fe fbb0 	bl	8023e38 <_ZN5Motor5DriveEff>
            break;
 80256d8:	e037      	b.n	802574a <InterruptTim6+0x4d2>
        
        case VELOCITY_CONTROL_DEBUG:
            /* Sensor update */
            line_sensor.Update();
 80256da:	4821      	ldr	r0, [pc, #132]	; (8025760 <InterruptTim6+0x4e8>)
 80256dc:	f7fc fba0 	bl	8021e20 <_ZN10LineSensor6UpdateEv>
            encoder.Update();
 80256e0:	4820      	ldr	r0, [pc, #128]	; (8025764 <InterruptTim6+0x4ec>)
 80256e2:	f7fb fb45 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 80256e6:	4820      	ldr	r0, [pc, #128]	; (8025768 <InterruptTim6+0x4f0>)
 80256e8:	f7fe fdee 	bl	80242c8 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 80256ec:	481e      	ldr	r0, [pc, #120]	; (8025768 <InterruptTim6+0x4f0>)
 80256ee:	f7ff f815 	bl	802471c <_ZN10SideSensor18GetGoalMarkerCountEv>
 80256f2:	4603      	mov	r3, r0
 80256f4:	461a      	mov	r2, r3
 80256f6:	4b1d      	ldr	r3, [pc, #116]	; (802576c <InterruptTim6+0x4f4>)
 80256f8:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_trans = velocity_control.PidControl(MIN_VELOCITY, V_P_1, V_I_1, V_D_1);
 80256fa:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8025778 <InterruptTim6+0x500>
 80256fe:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8025778 <InterruptTim6+0x500>
 8025702:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8025778 <InterruptTim6+0x500>
 8025706:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8025770 <InterruptTim6+0x4f8>
 802570a:	481c      	ldr	r0, [pc, #112]	; (802577c <InterruptTim6+0x504>)
 802570c:	f7ff fc30 	bl	8024f70 <_ZN15VelocityControl10PidControlEffff>
 8025710:	eef0 7a40 	vmov.f32	s15, s0
 8025714:	4b1a      	ldr	r3, [pc, #104]	; (8025780 <InterruptTim6+0x508>)
 8025716:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(g_trans, 0);
 802571a:	4b19      	ldr	r3, [pc, #100]	; (8025780 <InterruptTim6+0x508>)
 802571c:	edd3 7a00 	vldr	s15, [r3]
 8025720:	eddf 0a15 	vldr	s1, [pc, #84]	; 8025778 <InterruptTim6+0x500>
 8025724:	eeb0 0a67 	vmov.f32	s0, s15
 8025728:	4818      	ldr	r0, [pc, #96]	; (802578c <InterruptTim6+0x514>)
 802572a:	f7fe fb85 	bl	8023e38 <_ZN5Motor5DriveEff>
            break;
 802572e:	e00c      	b.n	802574a <InterruptTim6+0x4d2>
#endif // DEBUG_MODE

        default:
            motor.Drive(0, 0); break;
 8025730:	eddf 0a11 	vldr	s1, [pc, #68]	; 8025778 <InterruptTim6+0x500>
 8025734:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8025778 <InterruptTim6+0x500>
 8025738:	4814      	ldr	r0, [pc, #80]	; (802578c <InterruptTim6+0x514>)
 802573a:	f7fe fb7d 	bl	8023e38 <_ZN5Motor5DriveEff>
 802573e:	e004      	b.n	802574a <InterruptTim6+0x4d2>
            break;
 8025740:	bf00      	nop
 8025742:	e002      	b.n	802574a <InterruptTim6+0x4d2>
            break;
 8025744:	bf00      	nop
 8025746:	e000      	b.n	802574a <InterruptTim6+0x4d2>
            break;
 8025748:	bf00      	nop
    }
    g_tim6_complete = 1;
 802574a:	4b14      	ldr	r3, [pc, #80]	; (802579c <InterruptTim6+0x524>)
 802574c:	2201      	movs	r2, #1
 802574e:	701a      	strb	r2, [r3, #0]

#ifdef DEBUG_MODE
    g_tim6++;
 8025750:	4b13      	ldr	r3, [pc, #76]	; (80257a0 <InterruptTim6+0x528>)
 8025752:	681b      	ldr	r3, [r3, #0]
 8025754:	3301      	adds	r3, #1
 8025756:	4a12      	ldr	r2, [pc, #72]	; (80257a0 <InterruptTim6+0x528>)
 8025758:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 802575a:	bf00      	nop
 802575c:	bd80      	pop	{r7, pc}
 802575e:	bf00      	nop
 8025760:	2000036c 	.word	0x2000036c
 8025764:	2000034c 	.word	0x2000034c
 8025768:	20000798 	.word	0x20000798
 802576c:	20000325 	.word	0x20000325
 8025770:	3fa66666 	.word	0x3fa66666
 8025774:	20000334 	.word	0x20000334
 8025778:	00000000 	.word	0x00000000
 802577c:	200007a0 	.word	0x200007a0
 8025780:	20000328 	.word	0x20000328
 8025784:	200004f8 	.word	0x200004f8
 8025788:	2000032c 	.word	0x2000032c
 802578c:	20000790 	.word	0x20000790
 8025790:	2000031d 	.word	0x2000031d
 8025794:	20000368 	.word	0x20000368
 8025798:	2000031b 	.word	0x2000031b
 802579c:	2000031e 	.word	0x2000031e
 80257a0:	2000030c 	.word	0x2000030c

080257a4 <InterruptTim5>:


void InterruptTim5()
{
 80257a4:	b580      	push	{r7, lr}
 80257a6:	af00      	add	r7, sp, #0
    if(g_tim5_complete == 0) g_tim5_yet = 0x02;
 80257a8:	4b2b      	ldr	r3, [pc, #172]	; (8025858 <InterruptTim5+0xb4>)
 80257aa:	781b      	ldrb	r3, [r3, #0]
 80257ac:	2b00      	cmp	r3, #0
 80257ae:	d102      	bne.n	80257b6 <InterruptTim5+0x12>
 80257b0:	4b2a      	ldr	r3, [pc, #168]	; (802585c <InterruptTim5+0xb8>)
 80257b2:	2202      	movs	r2, #2
 80257b4:	701a      	strb	r2, [r3, #0]
    g_tim5_complete = 0;
 80257b6:	4b28      	ldr	r3, [pc, #160]	; (8025858 <InterruptTim5+0xb4>)
 80257b8:	2200      	movs	r2, #0
 80257ba:	701a      	strb	r2, [r3, #0]

    switch(g_mode)
 80257bc:	4b28      	ldr	r3, [pc, #160]	; (8025860 <InterruptTim5+0xbc>)
 80257be:	781b      	ldrb	r3, [r3, #0]
 80257c0:	2b01      	cmp	r3, #1
 80257c2:	d002      	beq.n	80257ca <InterruptTim5+0x26>
 80257c4:	2b02      	cmp	r3, #2
 80257c6:	d032      	beq.n	802582e <InterruptTim5+0x8a>
        case SECOND_RUN:
            iim_42652.Update();
            if(g_goal_cnt == 1) logger.Loading();
            break;

        default: break;
 80257c8:	e03c      	b.n	8025844 <InterruptTim5+0xa0>
            iim_42652.Update();
 80257ca:	4826      	ldr	r0, [pc, #152]	; (8025864 <InterruptTim5+0xc0>)
 80257cc:	f7fb ff20 	bl	8021610 <_ZN8Iim426526UpdateEv>
            g_process_complete = 0;
 80257d0:	4b25      	ldr	r3, [pc, #148]	; (8025868 <InterruptTim5+0xc4>)
 80257d2:	2200      	movs	r2, #0
 80257d4:	701a      	strb	r2, [r3, #0]
            g_process_complete |= g_tim6_yet;
 80257d6:	4b24      	ldr	r3, [pc, #144]	; (8025868 <InterruptTim5+0xc4>)
 80257d8:	781a      	ldrb	r2, [r3, #0]
 80257da:	4b24      	ldr	r3, [pc, #144]	; (802586c <InterruptTim5+0xc8>)
 80257dc:	781b      	ldrb	r3, [r3, #0]
 80257de:	4313      	orrs	r3, r2
 80257e0:	b2da      	uxtb	r2, r3
 80257e2:	4b21      	ldr	r3, [pc, #132]	; (8025868 <InterruptTim5+0xc4>)
 80257e4:	701a      	strb	r2, [r3, #0]
            g_process_complete |= g_tim5_yet;
 80257e6:	4b20      	ldr	r3, [pc, #128]	; (8025868 <InterruptTim5+0xc4>)
 80257e8:	781a      	ldrb	r2, [r3, #0]
 80257ea:	4b1c      	ldr	r3, [pc, #112]	; (802585c <InterruptTim5+0xb8>)
 80257ec:	781b      	ldrb	r3, [r3, #0]
 80257ee:	4313      	orrs	r3, r2
 80257f0:	b2da      	uxtb	r2, r3
 80257f2:	4b1d      	ldr	r3, [pc, #116]	; (8025868 <InterruptTim5+0xc4>)
 80257f4:	701a      	strb	r2, [r3, #0]
            g_process_complete |= g_tim2_yet;
 80257f6:	4b1c      	ldr	r3, [pc, #112]	; (8025868 <InterruptTim5+0xc4>)
 80257f8:	781a      	ldrb	r2, [r3, #0]
 80257fa:	4b1d      	ldr	r3, [pc, #116]	; (8025870 <InterruptTim5+0xcc>)
 80257fc:	781b      	ldrb	r3, [r3, #0]
 80257fe:	4313      	orrs	r3, r2
 8025800:	b2da      	uxtb	r2, r3
 8025802:	4b19      	ldr	r3, [pc, #100]	; (8025868 <InterruptTim5+0xc4>)
 8025804:	701a      	strb	r2, [r3, #0]
            if(g_goal_cnt == 1) logger.Logging(g_process_complete);
 8025806:	4b1b      	ldr	r3, [pc, #108]	; (8025874 <InterruptTim5+0xd0>)
 8025808:	781b      	ldrb	r3, [r3, #0]
 802580a:	2b01      	cmp	r3, #1
 802580c:	d105      	bne.n	802581a <InterruptTim5+0x76>
 802580e:	4b16      	ldr	r3, [pc, #88]	; (8025868 <InterruptTim5+0xc4>)
 8025810:	781b      	ldrb	r3, [r3, #0]
 8025812:	4619      	mov	r1, r3
 8025814:	4818      	ldr	r0, [pc, #96]	; (8025878 <InterruptTim5+0xd4>)
 8025816:	f7fc fe4f 	bl	80224b8 <_ZN6Logger7LoggingEh>
            g_tim6_yet = 0;
 802581a:	4b14      	ldr	r3, [pc, #80]	; (802586c <InterruptTim5+0xc8>)
 802581c:	2200      	movs	r2, #0
 802581e:	701a      	strb	r2, [r3, #0]
            g_tim5_yet = 0;
 8025820:	4b0e      	ldr	r3, [pc, #56]	; (802585c <InterruptTim5+0xb8>)
 8025822:	2200      	movs	r2, #0
 8025824:	701a      	strb	r2, [r3, #0]
            g_tim2_yet = 0;
 8025826:	4b12      	ldr	r3, [pc, #72]	; (8025870 <InterruptTim5+0xcc>)
 8025828:	2200      	movs	r2, #0
 802582a:	701a      	strb	r2, [r3, #0]
            break;
 802582c:	e00a      	b.n	8025844 <InterruptTim5+0xa0>
            iim_42652.Update();
 802582e:	480d      	ldr	r0, [pc, #52]	; (8025864 <InterruptTim5+0xc0>)
 8025830:	f7fb feee 	bl	8021610 <_ZN8Iim426526UpdateEv>
            if(g_goal_cnt == 1) logger.Loading();
 8025834:	4b0f      	ldr	r3, [pc, #60]	; (8025874 <InterruptTim5+0xd0>)
 8025836:	781b      	ldrb	r3, [r3, #0]
 8025838:	2b01      	cmp	r3, #1
 802583a:	d102      	bne.n	8025842 <InterruptTim5+0x9e>
 802583c:	480e      	ldr	r0, [pc, #56]	; (8025878 <InterruptTim5+0xd4>)
 802583e:	f7fd f97b 	bl	8022b38 <_ZN6Logger7LoadingEv>
            break;
 8025842:	bf00      	nop
    }
    g_tim5_complete = 1;
 8025844:	4b04      	ldr	r3, [pc, #16]	; (8025858 <InterruptTim5+0xb4>)
 8025846:	2201      	movs	r2, #1
 8025848:	701a      	strb	r2, [r3, #0]

#ifdef DEBUG_MODE
    g_tim5++;
 802584a:	4b0c      	ldr	r3, [pc, #48]	; (802587c <InterruptTim5+0xd8>)
 802584c:	681b      	ldr	r3, [r3, #0]
 802584e:	3301      	adds	r3, #1
 8025850:	4a0a      	ldr	r2, [pc, #40]	; (802587c <InterruptTim5+0xd8>)
 8025852:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8025854:	bf00      	nop
 8025856:	bd80      	pop	{r7, pc}
 8025858:	2000031f 	.word	0x2000031f
 802585c:	20000322 	.word	0x20000322
 8025860:	2000031b 	.word	0x2000031b
 8025864:	20000360 	.word	0x20000360
 8025868:	2000033c 	.word	0x2000033c
 802586c:	20000321 	.word	0x20000321
 8025870:	20000323 	.word	0x20000323
 8025874:	20000325 	.word	0x20000325
 8025878:	20000688 	.word	0x20000688
 802587c:	20000310 	.word	0x20000310

08025880 <InterruptTim2>:


void InterruptTim2()
{
 8025880:	b580      	push	{r7, lr}
 8025882:	af00      	add	r7, sp, #0
    if(g_tim2_complete == 0) g_tim2_yet = 0x02;
 8025884:	4b22      	ldr	r3, [pc, #136]	; (8025910 <InterruptTim2+0x90>)
 8025886:	781b      	ldrb	r3, [r3, #0]
 8025888:	2b00      	cmp	r3, #0
 802588a:	d102      	bne.n	8025892 <InterruptTim2+0x12>
 802588c:	4b21      	ldr	r3, [pc, #132]	; (8025914 <InterruptTim2+0x94>)
 802588e:	2202      	movs	r2, #2
 8025890:	701a      	strb	r2, [r3, #0]
    g_tim2_complete = 0;
 8025892:	4b1f      	ldr	r3, [pc, #124]	; (8025910 <InterruptTim2+0x90>)
 8025894:	2200      	movs	r2, #0
 8025896:	701a      	strb	r2, [r3, #0]

    if(g_emergency_stop == 1) g_mode =STANDBY;
 8025898:	4b1f      	ldr	r3, [pc, #124]	; (8025918 <InterruptTim2+0x98>)
 802589a:	781b      	ldrb	r3, [r3, #0]
 802589c:	2b01      	cmp	r3, #1
 802589e:	d102      	bne.n	80258a6 <InterruptTim2+0x26>
 80258a0:	4b1e      	ldr	r3, [pc, #120]	; (802591c <InterruptTim2+0x9c>)
 80258a2:	2200      	movs	r2, #0
 80258a4:	701a      	strb	r2, [r3, #0]

    switch(g_mode)
 80258a6:	4b1d      	ldr	r3, [pc, #116]	; (802591c <InterruptTim2+0x9c>)
 80258a8:	781b      	ldrb	r3, [r3, #0]
 80258aa:	2b01      	cmp	r3, #1
 80258ac:	d000      	beq.n	80258b0 <InterruptTim2+0x30>
                if(g_store_periodic_log + g_store_accel_log != 0) g_first_log_failed = 1;
            }
            else if(g_run_end == 1) g_mode = FIRST_GOAL;
            break;

        default: break;
 80258ae:	e025      	b.n	80258fc <InterruptTim2+0x7c>
            if(g_goal_cnt == 1)
 80258b0:	4b1b      	ldr	r3, [pc, #108]	; (8025920 <InterruptTim2+0xa0>)
 80258b2:	781b      	ldrb	r3, [r3, #0]
 80258b4:	2b01      	cmp	r3, #1
 80258b6:	d119      	bne.n	80258ec <InterruptTim2+0x6c>
                g_store_periodic_log = logger.StorePeriodicLog();
 80258b8:	481a      	ldr	r0, [pc, #104]	; (8025924 <InterruptTim2+0xa4>)
 80258ba:	f7fd f813 	bl	80228e4 <_ZN6Logger16StorePeriodicLogEv>
 80258be:	4603      	mov	r3, r0
 80258c0:	461a      	mov	r2, r3
 80258c2:	4b19      	ldr	r3, [pc, #100]	; (8025928 <InterruptTim2+0xa8>)
 80258c4:	701a      	strb	r2, [r3, #0]
                g_store_accel_log = logger.StoreAccelPositionLog();
 80258c6:	4817      	ldr	r0, [pc, #92]	; (8025924 <InterruptTim2+0xa4>)
 80258c8:	f7fd f8aa 	bl	8022a20 <_ZN6Logger21StoreAccelPositionLogEv>
 80258cc:	4603      	mov	r3, r0
 80258ce:	461a      	mov	r2, r3
 80258d0:	4b16      	ldr	r3, [pc, #88]	; (802592c <InterruptTim2+0xac>)
 80258d2:	701a      	strb	r2, [r3, #0]
                if(g_store_periodic_log + g_store_accel_log != 0) g_first_log_failed = 1;
 80258d4:	4b14      	ldr	r3, [pc, #80]	; (8025928 <InterruptTim2+0xa8>)
 80258d6:	781b      	ldrb	r3, [r3, #0]
 80258d8:	461a      	mov	r2, r3
 80258da:	4b14      	ldr	r3, [pc, #80]	; (802592c <InterruptTim2+0xac>)
 80258dc:	781b      	ldrb	r3, [r3, #0]
 80258de:	4413      	add	r3, r2
 80258e0:	2b00      	cmp	r3, #0
 80258e2:	d00a      	beq.n	80258fa <InterruptTim2+0x7a>
 80258e4:	4b12      	ldr	r3, [pc, #72]	; (8025930 <InterruptTim2+0xb0>)
 80258e6:	2201      	movs	r2, #1
 80258e8:	701a      	strb	r2, [r3, #0]
            break;
 80258ea:	e006      	b.n	80258fa <InterruptTim2+0x7a>
            else if(g_run_end == 1) g_mode = FIRST_GOAL;
 80258ec:	4b11      	ldr	r3, [pc, #68]	; (8025934 <InterruptTim2+0xb4>)
 80258ee:	781b      	ldrb	r3, [r3, #0]
 80258f0:	2b01      	cmp	r3, #1
 80258f2:	d102      	bne.n	80258fa <InterruptTim2+0x7a>
 80258f4:	4b09      	ldr	r3, [pc, #36]	; (802591c <InterruptTim2+0x9c>)
 80258f6:	2210      	movs	r2, #16
 80258f8:	701a      	strb	r2, [r3, #0]
            break;
 80258fa:	bf00      	nop
    }
    g_tim2_complete = 1;
 80258fc:	4b04      	ldr	r3, [pc, #16]	; (8025910 <InterruptTim2+0x90>)
 80258fe:	2201      	movs	r2, #1
 8025900:	701a      	strb	r2, [r3, #0]

#ifdef DEBUG_MODE
    g_tim2++;
 8025902:	4b0d      	ldr	r3, [pc, #52]	; (8025938 <InterruptTim2+0xb8>)
 8025904:	681b      	ldr	r3, [r3, #0]
 8025906:	3301      	adds	r3, #1
 8025908:	4a0b      	ldr	r2, [pc, #44]	; (8025938 <InterruptTim2+0xb8>)
 802590a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 802590c:	bf00      	nop
 802590e:	bd80      	pop	{r7, pc}
 8025910:	20000320 	.word	0x20000320
 8025914:	20000323 	.word	0x20000323
 8025918:	2000031c 	.word	0x2000031c
 802591c:	2000031b 	.word	0x2000031b
 8025920:	20000325 	.word	0x20000325
 8025924:	20000688 	.word	0x20000688
 8025928:	20000331 	.word	0x20000331
 802592c:	20000332 	.word	0x20000332
 8025930:	20000330 	.word	0x20000330
 8025934:	2000031d 	.word	0x2000031d
 8025938:	20000314 	.word	0x20000314

0802593c <Loop>:


void Loop()
{
 802593c:	b580      	push	{r7, lr}
 802593e:	af00      	add	r7, sp, #0
    g_main_while_reset = 0;
 8025940:	4bbf      	ldr	r3, [pc, #764]	; (8025c40 <Loop+0x304>)
 8025942:	2200      	movs	r2, #0
 8025944:	701a      	strb	r2, [r3, #0]
    g_switch_state = rotary_switch.State();
 8025946:	48bf      	ldr	r0, [pc, #764]	; (8025c44 <Loop+0x308>)
 8025948:	f7fe fbb0 	bl	80240ac <_ZN12RotarySwitch5StateEv>
 802594c:	4603      	mov	r3, r0
 802594e:	461a      	mov	r2, r3
 8025950:	4bbd      	ldr	r3, [pc, #756]	; (8025c48 <Loop+0x30c>)
 8025952:	701a      	strb	r2, [r3, #0]

    switch(g_switch_state)
 8025954:	4bbc      	ldr	r3, [pc, #752]	; (8025c48 <Loop+0x30c>)
 8025956:	781b      	ldrb	r3, [r3, #0]
 8025958:	2b0f      	cmp	r3, #15
 802595a:	f200 8137 	bhi.w	8025bcc <Loop+0x290>
 802595e:	a201      	add	r2, pc, #4	; (adr r2, 8025964 <Loop+0x28>)
 8025960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025964:	08025adf 	.word	0x08025adf
 8025968:	08025b0b 	.word	0x08025b0b
 802596c:	08025b39 	.word	0x08025b39
 8025970:	08025bcd 	.word	0x08025bcd
 8025974:	08025b65 	.word	0x08025b65
 8025978:	08025b99 	.word	0x08025b99
 802597c:	08025bcd 	.word	0x08025bcd
 8025980:	08025bcd 	.word	0x08025bcd
 8025984:	08025bcd 	.word	0x08025bcd
 8025988:	08025bcd 	.word	0x08025bcd
 802598c:	08025bcd 	.word	0x08025bcd
 8025990:	080259a5 	.word	0x080259a5
 8025994:	08025a0f 	.word	0x08025a0f
 8025998:	08025a47 	.word	0x08025a47
 802599c:	08025a7f 	.word	0x08025a7f
 80259a0:	08025aaf 	.word	0x08025aaf
    {
#ifdef DEBUG_MODE
        case 0x0B: // Flash debug
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 80259a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80259a8:	f000 fedc 	bl	8026764 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 80259ac:	4ba4      	ldr	r3, [pc, #656]	; (8025c40 <Loop+0x304>)
 80259ae:	781b      	ldrb	r3, [r3, #0]
 80259b0:	2b01      	cmp	r3, #1
 80259b2:	f000 8121 	beq.w	8025bf8 <Loop+0x2bc>
            led.Blink(3, 'R', 'X');
 80259b6:	2358      	movs	r3, #88	; 0x58
 80259b8:	2252      	movs	r2, #82	; 0x52
 80259ba:	2103      	movs	r1, #3
 80259bc:	48a3      	ldr	r0, [pc, #652]	; (8025c4c <Loop+0x310>)
 80259be:	f7fc f831 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            g_mode = STANDBY;
 80259c2:	4ba3      	ldr	r3, [pc, #652]	; (8025c50 <Loop+0x314>)
 80259c4:	2200      	movs	r2, #0
 80259c6:	701a      	strb	r2, [r3, #0]
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 80259c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80259cc:	f000 feca 	bl	8026764 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 80259d0:	4b9b      	ldr	r3, [pc, #620]	; (8025c40 <Loop+0x304>)
 80259d2:	781b      	ldrb	r3, [r3, #0]
 80259d4:	2b01      	cmp	r3, #1
 80259d6:	f000 8111 	beq.w	8025bfc <Loop+0x2c0>

            led.Blink(3, 'R', 'X');
 80259da:	2358      	movs	r3, #88	; 0x58
 80259dc:	2252      	movs	r2, #82	; 0x52
 80259de:	2103      	movs	r1, #3
 80259e0:	489a      	ldr	r0, [pc, #616]	; (8025c4c <Loop+0x310>)
 80259e2:	f7fc f81f 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            g_flash_test = FlashTest();
 80259e6:	f000 f9f5 	bl	8025dd4 <FlashTest>
 80259ea:	4603      	mov	r3, r0
 80259ec:	461a      	mov	r2, r3
 80259ee:	4b99      	ldr	r3, [pc, #612]	; (8025c54 <Loop+0x318>)
 80259f0:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0)
 80259f2:	4b93      	ldr	r3, [pc, #588]	; (8025c40 <Loop+0x304>)
 80259f4:	781b      	ldrb	r3, [r3, #0]
 80259f6:	2b00      	cmp	r3, #0
 80259f8:	f040 8102 	bne.w	8025c00 <Loop+0x2c4>
            {
                if(g_flash_test == 0x0E) led.Rainbow(1);
 80259fc:	4b95      	ldr	r3, [pc, #596]	; (8025c54 <Loop+0x318>)
 80259fe:	781b      	ldrb	r3, [r3, #0]
 8025a00:	2b0e      	cmp	r3, #14
 8025a02:	d1f6      	bne.n	80259f2 <Loop+0xb6>
 8025a04:	2101      	movs	r1, #1
 8025a06:	4891      	ldr	r0, [pc, #580]	; (8025c4c <Loop+0x310>)
 8025a08:	f7fc f839 	bl	8021a7e <_ZN3Led7RainbowEh>
            while(g_main_while_reset == 0)
 8025a0c:	e7f1      	b.n	80259f2 <Loop+0xb6>
            }
            break;

        case 0x0C: // Velocity control debug
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025a0e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025a12:	f000 fea7 	bl	8026764 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025a16:	4b8a      	ldr	r3, [pc, #552]	; (8025c40 <Loop+0x304>)
 8025a18:	781b      	ldrb	r3, [r3, #0]
 8025a1a:	2b01      	cmp	r3, #1
 8025a1c:	f000 80f2 	beq.w	8025c04 <Loop+0x2c8>

            led.Blink(3, 'G', 'B');
 8025a20:	2342      	movs	r3, #66	; 0x42
 8025a22:	2247      	movs	r2, #71	; 0x47
 8025a24:	2103      	movs	r1, #3
 8025a26:	4889      	ldr	r0, [pc, #548]	; (8025c4c <Loop+0x310>)
 8025a28:	f7fb fffc 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            led.ColorOrder('X');
 8025a2c:	2158      	movs	r1, #88	; 0x58
 8025a2e:	4887      	ldr	r0, [pc, #540]	; (8025c4c <Loop+0x310>)
 8025a30:	f7fb ff1c 	bl	802186c <_ZN3Led10ColorOrderEc>
            g_mode = VELOCITY_CONTROL_DEBUG;
 8025a34:	4b86      	ldr	r3, [pc, #536]	; (8025c50 <Loop+0x314>)
 8025a36:	220c      	movs	r2, #12
 8025a38:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 8025a3a:	4b81      	ldr	r3, [pc, #516]	; (8025c40 <Loop+0x304>)
 8025a3c:	781b      	ldrb	r3, [r3, #0]
 8025a3e:	2b00      	cmp	r3, #0
 8025a40:	f040 80e2 	bne.w	8025c08 <Loop+0x2cc>
 8025a44:	e7f9      	b.n	8025a3a <Loop+0xfe>
            break;

        case 0x0D: // Line trace debug
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025a46:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025a4a:	f000 fe8b 	bl	8026764 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025a4e:	4b7c      	ldr	r3, [pc, #496]	; (8025c40 <Loop+0x304>)
 8025a50:	781b      	ldrb	r3, [r3, #0]
 8025a52:	2b01      	cmp	r3, #1
 8025a54:	f000 80da 	beq.w	8025c0c <Loop+0x2d0>

            led.Blink(3, 'G', 'Y');
 8025a58:	2359      	movs	r3, #89	; 0x59
 8025a5a:	2247      	movs	r2, #71	; 0x47
 8025a5c:	2103      	movs	r1, #3
 8025a5e:	487b      	ldr	r0, [pc, #492]	; (8025c4c <Loop+0x310>)
 8025a60:	f7fb ffe0 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            led.ColorOrder('X');
 8025a64:	2158      	movs	r1, #88	; 0x58
 8025a66:	4879      	ldr	r0, [pc, #484]	; (8025c4c <Loop+0x310>)
 8025a68:	f7fb ff00 	bl	802186c <_ZN3Led10ColorOrderEc>
            g_mode = LINE_TRACE_DEBUG;
 8025a6c:	4b78      	ldr	r3, [pc, #480]	; (8025c50 <Loop+0x314>)
 8025a6e:	220d      	movs	r2, #13
 8025a70:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 8025a72:	4b73      	ldr	r3, [pc, #460]	; (8025c40 <Loop+0x304>)
 8025a74:	781b      	ldrb	r3, [r3, #0]
 8025a76:	2b00      	cmp	r3, #0
 8025a78:	f040 80ca 	bne.w	8025c10 <Loop+0x2d4>
 8025a7c:	e7f9      	b.n	8025a72 <Loop+0x136>
            break;

        case 0x0E: // Initial debug
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025a7e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025a82:	f000 fe6f 	bl	8026764 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025a86:	4b6e      	ldr	r3, [pc, #440]	; (8025c40 <Loop+0x304>)
 8025a88:	781b      	ldrb	r3, [r3, #0]
 8025a8a:	2b01      	cmp	r3, #1
 8025a8c:	f000 80c2 	beq.w	8025c14 <Loop+0x2d8>

            led.Blink(3, 'G', 'X');
 8025a90:	2358      	movs	r3, #88	; 0x58
 8025a92:	2247      	movs	r2, #71	; 0x47
 8025a94:	2103      	movs	r1, #3
 8025a96:	486d      	ldr	r0, [pc, #436]	; (8025c4c <Loop+0x310>)
 8025a98:	f7fb ffc4 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            g_mode = INITIAL_DEBUG;
 8025a9c:	4b6c      	ldr	r3, [pc, #432]	; (8025c50 <Loop+0x314>)
 8025a9e:	220e      	movs	r2, #14
 8025aa0:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 8025aa2:	4b67      	ldr	r3, [pc, #412]	; (8025c40 <Loop+0x304>)
 8025aa4:	781b      	ldrb	r3, [r3, #0]
 8025aa6:	2b00      	cmp	r3, #0
 8025aa8:	f040 80b6 	bne.w	8025c18 <Loop+0x2dc>
 8025aac:	e7f9      	b.n	8025aa2 <Loop+0x166>
            }
            break;
#endif // DEBUG_MODE

        case 0x0F:
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025aae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025ab2:	f000 fe57 	bl	8026764 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025ab6:	4b62      	ldr	r3, [pc, #392]	; (8025c40 <Loop+0x304>)
 8025ab8:	781b      	ldrb	r3, [r3, #0]
 8025aba:	2b01      	cmp	r3, #1
 8025abc:	f000 80ae 	beq.w	8025c1c <Loop+0x2e0>

            led.Blink(3, 'Y', 'X');
 8025ac0:	2358      	movs	r3, #88	; 0x58
 8025ac2:	2259      	movs	r2, #89	; 0x59
 8025ac4:	2103      	movs	r1, #3
 8025ac6:	4861      	ldr	r0, [pc, #388]	; (8025c4c <Loop+0x310>)
 8025ac8:	f7fb ffac 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            g_mode = READY;
 8025acc:	4b60      	ldr	r3, [pc, #384]	; (8025c50 <Loop+0x314>)
 8025ace:	220f      	movs	r2, #15
 8025ad0:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 8025ad2:	4b5b      	ldr	r3, [pc, #364]	; (8025c40 <Loop+0x304>)
 8025ad4:	781b      	ldrb	r3, [r3, #0]
 8025ad6:	2b00      	cmp	r3, #0
 8025ad8:	f040 80a2 	bne.w	8025c20 <Loop+0x2e4>
 8025adc:	e7f9      	b.n	8025ad2 <Loop+0x196>
            break;

        case 0x00:
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025ade:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025ae2:	f000 fe3f 	bl	8026764 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025ae6:	4b56      	ldr	r3, [pc, #344]	; (8025c40 <Loop+0x304>)
 8025ae8:	781b      	ldrb	r3, [r3, #0]
 8025aea:	2b01      	cmp	r3, #1
 8025aec:	f000 809a 	beq.w	8025c24 <Loop+0x2e8>

            g_mode = STANDBY;
 8025af0:	4b57      	ldr	r3, [pc, #348]	; (8025c50 <Loop+0x314>)
 8025af2:	2200      	movs	r2, #0
 8025af4:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) { led.Rainbow(1); }
 8025af6:	4b52      	ldr	r3, [pc, #328]	; (8025c40 <Loop+0x304>)
 8025af8:	781b      	ldrb	r3, [r3, #0]
 8025afa:	2b00      	cmp	r3, #0
 8025afc:	f040 8094 	bne.w	8025c28 <Loop+0x2ec>
 8025b00:	2101      	movs	r1, #1
 8025b02:	4852      	ldr	r0, [pc, #328]	; (8025c4c <Loop+0x310>)
 8025b04:	f7fb ffbb 	bl	8021a7e <_ZN3Led7RainbowEh>
 8025b08:	e7f5      	b.n	8025af6 <Loop+0x1ba>
            break;

        case 0x01:
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025b0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025b0e:	f000 fe29 	bl	8026764 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025b12:	4b4b      	ldr	r3, [pc, #300]	; (8025c40 <Loop+0x304>)
 8025b14:	781b      	ldrb	r3, [r3, #0]
 8025b16:	2b01      	cmp	r3, #1
 8025b18:	f000 8088 	beq.w	8025c2c <Loop+0x2f0>

            led.Blink(3, 'B', 'X');
 8025b1c:	2358      	movs	r3, #88	; 0x58
 8025b1e:	2242      	movs	r2, #66	; 0x42
 8025b20:	2103      	movs	r1, #3
 8025b22:	484a      	ldr	r0, [pc, #296]	; (8025c4c <Loop+0x310>)
 8025b24:	f7fb ff7e 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            g_mode = FIRST_RUN;
 8025b28:	4b49      	ldr	r3, [pc, #292]	; (8025c50 <Loop+0x314>)
 8025b2a:	2201      	movs	r2, #1
 8025b2c:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 8025b2e:	4b44      	ldr	r3, [pc, #272]	; (8025c40 <Loop+0x304>)
 8025b30:	781b      	ldrb	r3, [r3, #0]
 8025b32:	2b00      	cmp	r3, #0
 8025b34:	d17c      	bne.n	8025c30 <Loop+0x2f4>
 8025b36:	e7fa      	b.n	8025b2e <Loop+0x1f2>
            break;

        case 0x02:
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025b38:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025b3c:	f000 fe12 	bl	8026764 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025b40:	4b3f      	ldr	r3, [pc, #252]	; (8025c40 <Loop+0x304>)
 8025b42:	781b      	ldrb	r3, [r3, #0]
 8025b44:	2b01      	cmp	r3, #1
 8025b46:	d075      	beq.n	8025c34 <Loop+0x2f8>

            led.Blink(3, 'M', 'X');
 8025b48:	2358      	movs	r3, #88	; 0x58
 8025b4a:	224d      	movs	r2, #77	; 0x4d
 8025b4c:	2103      	movs	r1, #3
 8025b4e:	483f      	ldr	r0, [pc, #252]	; (8025c4c <Loop+0x310>)
 8025b50:	f7fb ff68 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            g_mode = SECOND_RUN;
 8025b54:	4b3e      	ldr	r3, [pc, #248]	; (8025c50 <Loop+0x314>)
 8025b56:	2202      	movs	r2, #2
 8025b58:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 8025b5a:	4b39      	ldr	r3, [pc, #228]	; (8025c40 <Loop+0x304>)
 8025b5c:	781b      	ldrb	r3, [r3, #0]
 8025b5e:	2b00      	cmp	r3, #0
 8025b60:	d16a      	bne.n	8025c38 <Loop+0x2fc>
 8025b62:	e7fa      	b.n	8025b5a <Loop+0x21e>
            break;

        case 0x04: // Velocity control
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025b64:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025b68:	f000 fdfc 	bl	8026764 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025b6c:	4b34      	ldr	r3, [pc, #208]	; (8025c40 <Loop+0x304>)
 8025b6e:	781b      	ldrb	r3, [r3, #0]
 8025b70:	2b01      	cmp	r3, #1
 8025b72:	d063      	beq.n	8025c3c <Loop+0x300>

            led.Blink(3, 'G', 'B');
 8025b74:	2342      	movs	r3, #66	; 0x42
 8025b76:	2247      	movs	r2, #71	; 0x47
 8025b78:	2103      	movs	r1, #3
 8025b7a:	4834      	ldr	r0, [pc, #208]	; (8025c4c <Loop+0x310>)
 8025b7c:	f7fb ff52 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            led.ColorOrder('X');
 8025b80:	2158      	movs	r1, #88	; 0x58
 8025b82:	4832      	ldr	r0, [pc, #200]	; (8025c4c <Loop+0x310>)
 8025b84:	f7fb fe72 	bl	802186c <_ZN3Led10ColorOrderEc>
            g_mode = VELOCITY_CONTROL;
 8025b88:	4b31      	ldr	r3, [pc, #196]	; (8025c50 <Loop+0x314>)
 8025b8a:	2204      	movs	r2, #4
 8025b8c:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 8025b8e:	4b2c      	ldr	r3, [pc, #176]	; (8025c40 <Loop+0x304>)
 8025b90:	781b      	ldrb	r3, [r3, #0]
 8025b92:	2b00      	cmp	r3, #0
 8025b94:	d160      	bne.n	8025c58 <Loop+0x31c>
 8025b96:	e7fa      	b.n	8025b8e <Loop+0x252>
            break;

        case 0x05: // Line trace
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025b98:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025b9c:	f000 fde2 	bl	8026764 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025ba0:	4b27      	ldr	r3, [pc, #156]	; (8025c40 <Loop+0x304>)
 8025ba2:	781b      	ldrb	r3, [r3, #0]
 8025ba4:	2b01      	cmp	r3, #1
 8025ba6:	d059      	beq.n	8025c5c <Loop+0x320>

            led.Blink(3, 'G', 'Y');
 8025ba8:	2359      	movs	r3, #89	; 0x59
 8025baa:	2247      	movs	r2, #71	; 0x47
 8025bac:	2103      	movs	r1, #3
 8025bae:	4827      	ldr	r0, [pc, #156]	; (8025c4c <Loop+0x310>)
 8025bb0:	f7fb ff38 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            led.ColorOrder('X');
 8025bb4:	2158      	movs	r1, #88	; 0x58
 8025bb6:	4825      	ldr	r0, [pc, #148]	; (8025c4c <Loop+0x310>)
 8025bb8:	f7fb fe58 	bl	802186c <_ZN3Led10ColorOrderEc>
            g_mode = LINE_TRACE;
 8025bbc:	4b24      	ldr	r3, [pc, #144]	; (8025c50 <Loop+0x314>)
 8025bbe:	2205      	movs	r2, #5
 8025bc0:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 8025bc2:	4b1f      	ldr	r3, [pc, #124]	; (8025c40 <Loop+0x304>)
 8025bc4:	781b      	ldrb	r3, [r3, #0]
 8025bc6:	2b00      	cmp	r3, #0
 8025bc8:	d14a      	bne.n	8025c60 <Loop+0x324>
 8025bca:	e7fa      	b.n	8025bc2 <Loop+0x286>
            break;

        default:
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025bcc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025bd0:	f000 fdc8 	bl	8026764 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025bd4:	4b1a      	ldr	r3, [pc, #104]	; (8025c40 <Loop+0x304>)
 8025bd6:	781b      	ldrb	r3, [r3, #0]
 8025bd8:	2b01      	cmp	r3, #1
 8025bda:	d043      	beq.n	8025c64 <Loop+0x328>

            g_mode = STANDBY;
 8025bdc:	4b1c      	ldr	r3, [pc, #112]	; (8025c50 <Loop+0x314>)
 8025bde:	2200      	movs	r2, #0
 8025be0:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) { led.Blink(1, 'W', 'X'); }
 8025be2:	4b17      	ldr	r3, [pc, #92]	; (8025c40 <Loop+0x304>)
 8025be4:	781b      	ldrb	r3, [r3, #0]
 8025be6:	2b00      	cmp	r3, #0
 8025be8:	d13e      	bne.n	8025c68 <Loop+0x32c>
 8025bea:	2358      	movs	r3, #88	; 0x58
 8025bec:	2257      	movs	r2, #87	; 0x57
 8025bee:	2101      	movs	r1, #1
 8025bf0:	4816      	ldr	r0, [pc, #88]	; (8025c4c <Loop+0x310>)
 8025bf2:	f7fb ff17 	bl	8021a24 <_ZN3Led5BlinkEhcc>
 8025bf6:	e7f4      	b.n	8025be2 <Loop+0x2a6>
            if(g_main_while_reset == 1) break;
 8025bf8:	bf00      	nop
 8025bfa:	e036      	b.n	8025c6a <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025bfc:	bf00      	nop
 8025bfe:	e034      	b.n	8025c6a <Loop+0x32e>
            break;
 8025c00:	bf00      	nop
 8025c02:	e032      	b.n	8025c6a <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025c04:	bf00      	nop
 8025c06:	e030      	b.n	8025c6a <Loop+0x32e>
            break;
 8025c08:	bf00      	nop
 8025c0a:	e02e      	b.n	8025c6a <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025c0c:	bf00      	nop
 8025c0e:	e02c      	b.n	8025c6a <Loop+0x32e>
            break;
 8025c10:	bf00      	nop
 8025c12:	e02a      	b.n	8025c6a <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025c14:	bf00      	nop
 8025c16:	e028      	b.n	8025c6a <Loop+0x32e>
            break;
 8025c18:	bf00      	nop
 8025c1a:	e026      	b.n	8025c6a <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025c1c:	bf00      	nop
 8025c1e:	e024      	b.n	8025c6a <Loop+0x32e>
            break;
 8025c20:	bf00      	nop
 8025c22:	e022      	b.n	8025c6a <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025c24:	bf00      	nop
 8025c26:	e020      	b.n	8025c6a <Loop+0x32e>
            break;
 8025c28:	bf00      	nop
 8025c2a:	e01e      	b.n	8025c6a <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025c2c:	bf00      	nop
 8025c2e:	e01c      	b.n	8025c6a <Loop+0x32e>
            break;
 8025c30:	bf00      	nop
 8025c32:	e01a      	b.n	8025c6a <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025c34:	bf00      	nop
 8025c36:	e018      	b.n	8025c6a <Loop+0x32e>
            break;
 8025c38:	bf00      	nop
 8025c3a:	e016      	b.n	8025c6a <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025c3c:	bf00      	nop
 8025c3e:	e014      	b.n	8025c6a <Loop+0x32e>
 8025c40:	20000319 	.word	0x20000319
 8025c44:	20000794 	.word	0x20000794
 8025c48:	2000031a 	.word	0x2000031a
 8025c4c:	20000368 	.word	0x20000368
 8025c50:	2000031b 	.word	0x2000031b
 8025c54:	20000318 	.word	0x20000318
            break;
 8025c58:	bf00      	nop
 8025c5a:	e006      	b.n	8025c6a <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025c5c:	bf00      	nop
 8025c5e:	e004      	b.n	8025c6a <Loop+0x32e>
            break;
 8025c60:	bf00      	nop
 8025c62:	e002      	b.n	8025c6a <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025c64:	bf00      	nop
 8025c66:	e000      	b.n	8025c6a <Loop+0x32e>
            break;
 8025c68:	bf00      	nop
    }
}
 8025c6a:	bf00      	nop
 8025c6c:	bd80      	pop	{r7, pc}
 8025c6e:	bf00      	nop

08025c70 <EmergencyStop>:


void EmergencyStop()
{
 8025c70:	b580      	push	{r7, lr}
 8025c72:	af00      	add	r7, sp, #0
    static uint8_t emergency_cnt = 0;

    if(emergency_cnt >= EMERGENCY_STOP_COUNT)
 8025c74:	4b12      	ldr	r3, [pc, #72]	; (8025cc0 <EmergencyStop+0x50>)
 8025c76:	781b      	ldrb	r3, [r3, #0]
 8025c78:	2b04      	cmp	r3, #4
 8025c7a:	d90e      	bls.n	8025c9a <EmergencyStop+0x2a>
    {
        motor.Drive(0, 0);
 8025c7c:	eddf 0a11 	vldr	s1, [pc, #68]	; 8025cc4 <EmergencyStop+0x54>
 8025c80:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8025cc4 <EmergencyStop+0x54>
 8025c84:	4810      	ldr	r0, [pc, #64]	; (8025cc8 <EmergencyStop+0x58>)
 8025c86:	f7fe f8d7 	bl	8023e38 <_ZN5Motor5DriveEff>
        led.ColorOrder('W');
 8025c8a:	2157      	movs	r1, #87	; 0x57
 8025c8c:	480f      	ldr	r0, [pc, #60]	; (8025ccc <EmergencyStop+0x5c>)
 8025c8e:	f7fb fded 	bl	802186c <_ZN3Led10ColorOrderEc>
        g_emergency_stop = 1;
 8025c92:	4b0f      	ldr	r3, [pc, #60]	; (8025cd0 <EmergencyStop+0x60>)
 8025c94:	2201      	movs	r2, #1
 8025c96:	701a      	strb	r2, [r3, #0]
    }
    else if(line_sensor.GetEmergencyStopFlag() == 1) emergency_cnt++;
    else emergency_cnt = 0;
}
 8025c98:	e00f      	b.n	8025cba <EmergencyStop+0x4a>
    else if(line_sensor.GetEmergencyStopFlag() == 1) emergency_cnt++;
 8025c9a:	480e      	ldr	r0, [pc, #56]	; (8025cd4 <EmergencyStop+0x64>)
 8025c9c:	f7fc f980 	bl	8021fa0 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 8025ca0:	4603      	mov	r3, r0
 8025ca2:	2b00      	cmp	r3, #0
 8025ca4:	d006      	beq.n	8025cb4 <EmergencyStop+0x44>
 8025ca6:	4b06      	ldr	r3, [pc, #24]	; (8025cc0 <EmergencyStop+0x50>)
 8025ca8:	781b      	ldrb	r3, [r3, #0]
 8025caa:	3301      	adds	r3, #1
 8025cac:	b2da      	uxtb	r2, r3
 8025cae:	4b04      	ldr	r3, [pc, #16]	; (8025cc0 <EmergencyStop+0x50>)
 8025cb0:	701a      	strb	r2, [r3, #0]
}
 8025cb2:	e002      	b.n	8025cba <EmergencyStop+0x4a>
    else emergency_cnt = 0;
 8025cb4:	4b02      	ldr	r3, [pc, #8]	; (8025cc0 <EmergencyStop+0x50>)
 8025cb6:	2200      	movs	r2, #0
 8025cb8:	701a      	strb	r2, [r3, #0]
}
 8025cba:	bf00      	nop
 8025cbc:	bd80      	pop	{r7, pc}
 8025cbe:	bf00      	nop
 8025cc0:	200007b0 	.word	0x200007b0
 8025cc4:	00000000 	.word	0x00000000
 8025cc8:	20000790 	.word	0x20000790
 8025ccc:	20000368 	.word	0x20000368
 8025cd0:	2000031c 	.word	0x2000031c
 8025cd4:	2000036c 	.word	0x2000036c

08025cd8 <TargetVelocity>:


float TargetVelocity(float target, float min)
{
 8025cd8:	b480      	push	{r7}
 8025cda:	b083      	sub	sp, #12
 8025cdc:	af00      	add	r7, sp, #0
 8025cde:	ed87 0a01 	vstr	s0, [r7, #4]
 8025ce2:	edc7 0a00 	vstr	s1, [r7]
    static uint8_t slow_cnt = 0;
    static uint8_t stop_cnt = 0;

    if(g_goal_cnt == 1) return target;
 8025ce6:	4b15      	ldr	r3, [pc, #84]	; (8025d3c <TargetVelocity+0x64>)
 8025ce8:	781b      	ldrb	r3, [r3, #0]
 8025cea:	2b01      	cmp	r3, #1
 8025cec:	d101      	bne.n	8025cf2 <TargetVelocity+0x1a>
 8025cee:	687b      	ldr	r3, [r7, #4]
 8025cf0:	e01a      	b.n	8025d28 <TargetVelocity+0x50>
    else if(g_goal_cnt >= 2)
 8025cf2:	4b12      	ldr	r3, [pc, #72]	; (8025d3c <TargetVelocity+0x64>)
 8025cf4:	781b      	ldrb	r3, [r3, #0]
 8025cf6:	2b01      	cmp	r3, #1
 8025cf8:	d915      	bls.n	8025d26 <TargetVelocity+0x4e>
    {
        if(slow_cnt < GOAL_SLOW_COUNT)
 8025cfa:	4b11      	ldr	r3, [pc, #68]	; (8025d40 <TargetVelocity+0x68>)
 8025cfc:	781b      	ldrb	r3, [r3, #0]
 8025cfe:	2b09      	cmp	r3, #9
 8025d00:	d808      	bhi.n	8025d14 <TargetVelocity+0x3c>
        {
            slow_cnt++; return GOAL_SLOW_VELOCITY;
 8025d02:	4b0f      	ldr	r3, [pc, #60]	; (8025d40 <TargetVelocity+0x68>)
 8025d04:	781b      	ldrb	r3, [r3, #0]
 8025d06:	3301      	adds	r3, #1
 8025d08:	b2da      	uxtb	r2, r3
 8025d0a:	4b0d      	ldr	r3, [pc, #52]	; (8025d40 <TargetVelocity+0x68>)
 8025d0c:	701a      	strb	r2, [r3, #0]
 8025d0e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8025d12:	e009      	b.n	8025d28 <TargetVelocity+0x50>
        }
        else if(stop_cnt < GOAL_STOP_COUNT)
        {
            stop_cnt++; return 0;
 8025d14:	4b0b      	ldr	r3, [pc, #44]	; (8025d44 <TargetVelocity+0x6c>)
 8025d16:	781b      	ldrb	r3, [r3, #0]
 8025d18:	3301      	adds	r3, #1
 8025d1a:	b2da      	uxtb	r2, r3
 8025d1c:	4b09      	ldr	r3, [pc, #36]	; (8025d44 <TargetVelocity+0x6c>)
 8025d1e:	701a      	strb	r2, [r3, #0]
 8025d20:	f04f 0300 	mov.w	r3, #0
 8025d24:	e000      	b.n	8025d28 <TargetVelocity+0x50>
        else
        {
            g_run_end = 1; return 0;
        }
    }
    else return min;
 8025d26:	683b      	ldr	r3, [r7, #0]
 8025d28:	ee07 3a90 	vmov	s15, r3
}
 8025d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8025d30:	370c      	adds	r7, #12
 8025d32:	46bd      	mov	sp, r7
 8025d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d38:	4770      	bx	lr
 8025d3a:	bf00      	nop
 8025d3c:	20000325 	.word	0x20000325
 8025d40:	200007b1 	.word	0x200007b1
 8025d44:	200007b2 	.word	0x200007b2

08025d48 <TargetDuty>:


float TargetDuty(float target, float min)
{
 8025d48:	b590      	push	{r4, r7, lr}
 8025d4a:	b083      	sub	sp, #12
 8025d4c:	af00      	add	r7, sp, #0
 8025d4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8025d52:	edc7 0a00 	vstr	s1, [r7]
    static uint8_t slow_cnt = 0;
    static uint8_t stop_cnt = 0;

    if(g_goal_cnt == 1) return target;
 8025d56:	4b1c      	ldr	r3, [pc, #112]	; (8025dc8 <TargetDuty+0x80>)
 8025d58:	781b      	ldrb	r3, [r3, #0]
 8025d5a:	2b01      	cmp	r3, #1
 8025d5c:	d101      	bne.n	8025d62 <TargetDuty+0x1a>
 8025d5e:	687b      	ldr	r3, [r7, #4]
 8025d60:	e027      	b.n	8025db2 <TargetDuty+0x6a>
    else if(g_goal_cnt >= 2)
 8025d62:	4b19      	ldr	r3, [pc, #100]	; (8025dc8 <TargetDuty+0x80>)
 8025d64:	781b      	ldrb	r3, [r3, #0]
 8025d66:	2b01      	cmp	r3, #1
 8025d68:	d922      	bls.n	8025db0 <TargetDuty+0x68>
    {
        if(slow_cnt < GOAL_SLOW_COUNT)
 8025d6a:	4b18      	ldr	r3, [pc, #96]	; (8025dcc <TargetDuty+0x84>)
 8025d6c:	781b      	ldrb	r3, [r3, #0]
 8025d6e:	2b09      	cmp	r3, #9
 8025d70:	d815      	bhi.n	8025d9e <TargetDuty+0x56>
        {
            slow_cnt++; return min * 0.6;
 8025d72:	4b16      	ldr	r3, [pc, #88]	; (8025dcc <TargetDuty+0x84>)
 8025d74:	781b      	ldrb	r3, [r3, #0]
 8025d76:	3301      	adds	r3, #1
 8025d78:	b2da      	uxtb	r2, r3
 8025d7a:	4b14      	ldr	r3, [pc, #80]	; (8025dcc <TargetDuty+0x84>)
 8025d7c:	701a      	strb	r2, [r3, #0]
 8025d7e:	6838      	ldr	r0, [r7, #0]
 8025d80:	f7fa fac2 	bl	8020308 <__aeabi_f2d>
 8025d84:	a30e      	add	r3, pc, #56	; (adr r3, 8025dc0 <TargetDuty+0x78>)
 8025d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d8a:	f7fa fb15 	bl	80203b8 <__aeabi_dmul>
 8025d8e:	4603      	mov	r3, r0
 8025d90:	460c      	mov	r4, r1
 8025d92:	4618      	mov	r0, r3
 8025d94:	4621      	mov	r1, r4
 8025d96:	f7fa fda9 	bl	80208ec <__aeabi_d2f>
 8025d9a:	4603      	mov	r3, r0
 8025d9c:	e009      	b.n	8025db2 <TargetDuty+0x6a>
        }
        else if(stop_cnt < GOAL_STOP_COUNT)
        {
            stop_cnt++; return 0;
 8025d9e:	4b0c      	ldr	r3, [pc, #48]	; (8025dd0 <TargetDuty+0x88>)
 8025da0:	781b      	ldrb	r3, [r3, #0]
 8025da2:	3301      	adds	r3, #1
 8025da4:	b2da      	uxtb	r2, r3
 8025da6:	4b0a      	ldr	r3, [pc, #40]	; (8025dd0 <TargetDuty+0x88>)
 8025da8:	701a      	strb	r2, [r3, #0]
 8025daa:	f04f 0300 	mov.w	r3, #0
 8025dae:	e000      	b.n	8025db2 <TargetDuty+0x6a>
        else
        {
            g_run_end = 1; return 0;
        }
    }
    else return min;
 8025db0:	683b      	ldr	r3, [r7, #0]
 8025db2:	ee07 3a90 	vmov	s15, r3
}
 8025db6:	eeb0 0a67 	vmov.f32	s0, s15
 8025dba:	370c      	adds	r7, #12
 8025dbc:	46bd      	mov	sp, r7
 8025dbe:	bd90      	pop	{r4, r7, pc}
 8025dc0:	33333333 	.word	0x33333333
 8025dc4:	3fe33333 	.word	0x3fe33333
 8025dc8:	20000325 	.word	0x20000325
 8025dcc:	200007b3 	.word	0x200007b3
 8025dd0:	200007b4 	.word	0x200007b4

08025dd4 <FlashTest>:


#ifdef DEBUG_MODE
uint8_t FlashTest()
{
 8025dd4:	b5b0      	push	{r4, r5, r7, lr}
 8025dd6:	b096      	sub	sp, #88	; 0x58
 8025dd8:	af00      	add	r7, sp, #0
    if(!flash.CheckBlankWord(address_4, num_of_data)) return 0x0B;
    if(!flash.StoreFloat(address_4, d, num_of_data)) return 0x0C;
    flash.Load(buff_d, address_4, num_of_data*4);
    for(i = 0; i < num_of_data; i++) if(d[i] != buff_d[i]) return 0x0D;

    return 0x0E;
 8025dda:	466b      	mov	r3, sp
 8025ddc:	461d      	mov	r5, r3
    uint32_t address_1 = SECTOR_1_ADDRESS_HEAD;
 8025dde:	4bd7      	ldr	r3, [pc, #860]	; (802613c <FlashTest+0x368>)
 8025de0:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t address_2 = SECTOR_2_ADDRESS_HEAD;
 8025de2:	4bd7      	ldr	r3, [pc, #860]	; (8026140 <FlashTest+0x36c>)
 8025de4:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t address_3 = SECTOR_3_ADDRESS_HEAD;
 8025de6:	4bd7      	ldr	r3, [pc, #860]	; (8026144 <FlashTest+0x370>)
 8025de8:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t address_4 = SECTOR_4_ADDRESS_HEAD;
 8025dea:	4bd7      	ldr	r3, [pc, #860]	; (8026148 <FlashTest+0x374>)
 8025dec:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t i, num_of_data = 3;
 8025dee:	2303      	movs	r3, #3
 8025df0:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t a[num_of_data] = {1,2,3};
 8025df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025df4:	1e58      	subs	r0, r3, #1
 8025df6:	6578      	str	r0, [r7, #84]	; 0x54
 8025df8:	4603      	mov	r3, r0
 8025dfa:	3301      	adds	r3, #1
 8025dfc:	4619      	mov	r1, r3
 8025dfe:	f04f 0200 	mov.w	r2, #0
 8025e02:	f04f 0300 	mov.w	r3, #0
 8025e06:	f04f 0400 	mov.w	r4, #0
 8025e0a:	00d4      	lsls	r4, r2, #3
 8025e0c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025e10:	00cb      	lsls	r3, r1, #3
 8025e12:	4603      	mov	r3, r0
 8025e14:	3301      	adds	r3, #1
 8025e16:	4619      	mov	r1, r3
 8025e18:	f04f 0200 	mov.w	r2, #0
 8025e1c:	f04f 0300 	mov.w	r3, #0
 8025e20:	f04f 0400 	mov.w	r4, #0
 8025e24:	00d4      	lsls	r4, r2, #3
 8025e26:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025e2a:	00cb      	lsls	r3, r1, #3
 8025e2c:	4603      	mov	r3, r0
 8025e2e:	3301      	adds	r3, #1
 8025e30:	3307      	adds	r3, #7
 8025e32:	08db      	lsrs	r3, r3, #3
 8025e34:	00db      	lsls	r3, r3, #3
 8025e36:	ebad 0d03 	sub.w	sp, sp, r3
 8025e3a:	466b      	mov	r3, sp
 8025e3c:	3300      	adds	r3, #0
 8025e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8025e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025e42:	4602      	mov	r2, r0
 8025e44:	2101      	movs	r1, #1
 8025e46:	7019      	strb	r1, [r3, #0]
 8025e48:	3301      	adds	r3, #1
 8025e4a:	3a01      	subs	r2, #1
 8025e4c:	2102      	movs	r1, #2
 8025e4e:	7019      	strb	r1, [r3, #0]
 8025e50:	3301      	adds	r3, #1
 8025e52:	1e51      	subs	r1, r2, #1
 8025e54:	2203      	movs	r2, #3
 8025e56:	701a      	strb	r2, [r3, #0]
 8025e58:	1c5a      	adds	r2, r3, #1
 8025e5a:	1e4b      	subs	r3, r1, #1
 8025e5c:	2b00      	cmp	r3, #0
 8025e5e:	db04      	blt.n	8025e6a <FlashTest+0x96>
 8025e60:	2100      	movs	r1, #0
 8025e62:	7011      	strb	r1, [r2, #0]
 8025e64:	3201      	adds	r2, #1
 8025e66:	3b01      	subs	r3, #1
 8025e68:	e7f8      	b.n	8025e5c <FlashTest+0x88>
    uint16_t b[num_of_data] = {4,5,6};
 8025e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025e6c:	1e58      	subs	r0, r3, #1
 8025e6e:	6378      	str	r0, [r7, #52]	; 0x34
 8025e70:	4603      	mov	r3, r0
 8025e72:	3301      	adds	r3, #1
 8025e74:	4619      	mov	r1, r3
 8025e76:	f04f 0200 	mov.w	r2, #0
 8025e7a:	f04f 0300 	mov.w	r3, #0
 8025e7e:	f04f 0400 	mov.w	r4, #0
 8025e82:	0114      	lsls	r4, r2, #4
 8025e84:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025e88:	010b      	lsls	r3, r1, #4
 8025e8a:	4603      	mov	r3, r0
 8025e8c:	3301      	adds	r3, #1
 8025e8e:	4619      	mov	r1, r3
 8025e90:	f04f 0200 	mov.w	r2, #0
 8025e94:	f04f 0300 	mov.w	r3, #0
 8025e98:	f04f 0400 	mov.w	r4, #0
 8025e9c:	0114      	lsls	r4, r2, #4
 8025e9e:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025ea2:	010b      	lsls	r3, r1, #4
 8025ea4:	4603      	mov	r3, r0
 8025ea6:	3301      	adds	r3, #1
 8025ea8:	005b      	lsls	r3, r3, #1
 8025eaa:	3301      	adds	r3, #1
 8025eac:	3307      	adds	r3, #7
 8025eae:	08db      	lsrs	r3, r3, #3
 8025eb0:	00db      	lsls	r3, r3, #3
 8025eb2:	ebad 0d03 	sub.w	sp, sp, r3
 8025eb6:	466b      	mov	r3, sp
 8025eb8:	3301      	adds	r3, #1
 8025eba:	085b      	lsrs	r3, r3, #1
 8025ebc:	005b      	lsls	r3, r3, #1
 8025ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8025ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025ec2:	4602      	mov	r2, r0
 8025ec4:	2104      	movs	r1, #4
 8025ec6:	8019      	strh	r1, [r3, #0]
 8025ec8:	3302      	adds	r3, #2
 8025eca:	3a01      	subs	r2, #1
 8025ecc:	2105      	movs	r1, #5
 8025ece:	8019      	strh	r1, [r3, #0]
 8025ed0:	3302      	adds	r3, #2
 8025ed2:	1e51      	subs	r1, r2, #1
 8025ed4:	2206      	movs	r2, #6
 8025ed6:	801a      	strh	r2, [r3, #0]
 8025ed8:	1c9a      	adds	r2, r3, #2
 8025eda:	1e4b      	subs	r3, r1, #1
 8025edc:	2b00      	cmp	r3, #0
 8025ede:	db04      	blt.n	8025eea <FlashTest+0x116>
 8025ee0:	2100      	movs	r1, #0
 8025ee2:	8011      	strh	r1, [r2, #0]
 8025ee4:	3202      	adds	r2, #2
 8025ee6:	3b01      	subs	r3, #1
 8025ee8:	e7f8      	b.n	8025edc <FlashTest+0x108>
    int16_t c[num_of_data] = {-7,-8,-9};
 8025eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025eec:	1e58      	subs	r0, r3, #1
 8025eee:	62f8      	str	r0, [r7, #44]	; 0x2c
 8025ef0:	4603      	mov	r3, r0
 8025ef2:	3301      	adds	r3, #1
 8025ef4:	4619      	mov	r1, r3
 8025ef6:	f04f 0200 	mov.w	r2, #0
 8025efa:	f04f 0300 	mov.w	r3, #0
 8025efe:	f04f 0400 	mov.w	r4, #0
 8025f02:	0114      	lsls	r4, r2, #4
 8025f04:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025f08:	010b      	lsls	r3, r1, #4
 8025f0a:	4603      	mov	r3, r0
 8025f0c:	3301      	adds	r3, #1
 8025f0e:	4619      	mov	r1, r3
 8025f10:	f04f 0200 	mov.w	r2, #0
 8025f14:	f04f 0300 	mov.w	r3, #0
 8025f18:	f04f 0400 	mov.w	r4, #0
 8025f1c:	0114      	lsls	r4, r2, #4
 8025f1e:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025f22:	010b      	lsls	r3, r1, #4
 8025f24:	4603      	mov	r3, r0
 8025f26:	3301      	adds	r3, #1
 8025f28:	005b      	lsls	r3, r3, #1
 8025f2a:	3301      	adds	r3, #1
 8025f2c:	3307      	adds	r3, #7
 8025f2e:	08db      	lsrs	r3, r3, #3
 8025f30:	00db      	lsls	r3, r3, #3
 8025f32:	ebad 0d03 	sub.w	sp, sp, r3
 8025f36:	466b      	mov	r3, sp
 8025f38:	3301      	adds	r3, #1
 8025f3a:	085b      	lsrs	r3, r3, #1
 8025f3c:	005b      	lsls	r3, r3, #1
 8025f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8025f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f42:	4602      	mov	r2, r0
 8025f44:	f64f 71f9 	movw	r1, #65529	; 0xfff9
 8025f48:	8019      	strh	r1, [r3, #0]
 8025f4a:	3302      	adds	r3, #2
 8025f4c:	3a01      	subs	r2, #1
 8025f4e:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8025f52:	8019      	strh	r1, [r3, #0]
 8025f54:	3302      	adds	r3, #2
 8025f56:	1e51      	subs	r1, r2, #1
 8025f58:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8025f5c:	801a      	strh	r2, [r3, #0]
 8025f5e:	1c9a      	adds	r2, r3, #2
 8025f60:	1e4b      	subs	r3, r1, #1
 8025f62:	2b00      	cmp	r3, #0
 8025f64:	db04      	blt.n	8025f70 <FlashTest+0x19c>
 8025f66:	2100      	movs	r1, #0
 8025f68:	8011      	strh	r1, [r2, #0]
 8025f6a:	3202      	adds	r2, #2
 8025f6c:	3b01      	subs	r3, #1
 8025f6e:	e7f8      	b.n	8025f62 <FlashTest+0x18e>
    float d[num_of_data] = {0.1,0.2,0.3};
 8025f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025f72:	1e58      	subs	r0, r3, #1
 8025f74:	6278      	str	r0, [r7, #36]	; 0x24
 8025f76:	4603      	mov	r3, r0
 8025f78:	3301      	adds	r3, #1
 8025f7a:	4619      	mov	r1, r3
 8025f7c:	f04f 0200 	mov.w	r2, #0
 8025f80:	f04f 0300 	mov.w	r3, #0
 8025f84:	f04f 0400 	mov.w	r4, #0
 8025f88:	0154      	lsls	r4, r2, #5
 8025f8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8025f8e:	014b      	lsls	r3, r1, #5
 8025f90:	4603      	mov	r3, r0
 8025f92:	3301      	adds	r3, #1
 8025f94:	4619      	mov	r1, r3
 8025f96:	f04f 0200 	mov.w	r2, #0
 8025f9a:	f04f 0300 	mov.w	r3, #0
 8025f9e:	f04f 0400 	mov.w	r4, #0
 8025fa2:	0154      	lsls	r4, r2, #5
 8025fa4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8025fa8:	014b      	lsls	r3, r1, #5
 8025faa:	4603      	mov	r3, r0
 8025fac:	3301      	adds	r3, #1
 8025fae:	009b      	lsls	r3, r3, #2
 8025fb0:	3303      	adds	r3, #3
 8025fb2:	3307      	adds	r3, #7
 8025fb4:	08db      	lsrs	r3, r3, #3
 8025fb6:	00db      	lsls	r3, r3, #3
 8025fb8:	ebad 0d03 	sub.w	sp, sp, r3
 8025fbc:	466b      	mov	r3, sp
 8025fbe:	3303      	adds	r3, #3
 8025fc0:	089b      	lsrs	r3, r3, #2
 8025fc2:	009b      	lsls	r3, r3, #2
 8025fc4:	623b      	str	r3, [r7, #32]
 8025fc6:	6a3b      	ldr	r3, [r7, #32]
 8025fc8:	4601      	mov	r1, r0
 8025fca:	4a60      	ldr	r2, [pc, #384]	; (802614c <FlashTest+0x378>)
 8025fcc:	601a      	str	r2, [r3, #0]
 8025fce:	3304      	adds	r3, #4
 8025fd0:	1e4a      	subs	r2, r1, #1
 8025fd2:	495f      	ldr	r1, [pc, #380]	; (8026150 <FlashTest+0x37c>)
 8025fd4:	6019      	str	r1, [r3, #0]
 8025fd6:	3304      	adds	r3, #4
 8025fd8:	1e51      	subs	r1, r2, #1
 8025fda:	4a5e      	ldr	r2, [pc, #376]	; (8026154 <FlashTest+0x380>)
 8025fdc:	601a      	str	r2, [r3, #0]
 8025fde:	1d1a      	adds	r2, r3, #4
 8025fe0:	1e4b      	subs	r3, r1, #1
 8025fe2:	2b00      	cmp	r3, #0
 8025fe4:	db05      	blt.n	8025ff2 <FlashTest+0x21e>
 8025fe6:	f04f 0100 	mov.w	r1, #0
 8025fea:	6011      	str	r1, [r2, #0]
 8025fec:	3204      	adds	r2, #4
 8025fee:	3b01      	subs	r3, #1
 8025ff0:	e7f7      	b.n	8025fe2 <FlashTest+0x20e>
    uint8_t buff_a[num_of_data] = {0};
 8025ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025ff4:	1e58      	subs	r0, r3, #1
 8025ff6:	61f8      	str	r0, [r7, #28]
 8025ff8:	4603      	mov	r3, r0
 8025ffa:	3301      	adds	r3, #1
 8025ffc:	4619      	mov	r1, r3
 8025ffe:	f04f 0200 	mov.w	r2, #0
 8026002:	f04f 0300 	mov.w	r3, #0
 8026006:	f04f 0400 	mov.w	r4, #0
 802600a:	00d4      	lsls	r4, r2, #3
 802600c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8026010:	00cb      	lsls	r3, r1, #3
 8026012:	4603      	mov	r3, r0
 8026014:	3301      	adds	r3, #1
 8026016:	4619      	mov	r1, r3
 8026018:	f04f 0200 	mov.w	r2, #0
 802601c:	f04f 0300 	mov.w	r3, #0
 8026020:	f04f 0400 	mov.w	r4, #0
 8026024:	00d4      	lsls	r4, r2, #3
 8026026:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 802602a:	00cb      	lsls	r3, r1, #3
 802602c:	4603      	mov	r3, r0
 802602e:	3301      	adds	r3, #1
 8026030:	3307      	adds	r3, #7
 8026032:	08db      	lsrs	r3, r3, #3
 8026034:	00db      	lsls	r3, r3, #3
 8026036:	ebad 0d03 	sub.w	sp, sp, r3
 802603a:	466b      	mov	r3, sp
 802603c:	3300      	adds	r3, #0
 802603e:	61bb      	str	r3, [r7, #24]
 8026040:	69bb      	ldr	r3, [r7, #24]
 8026042:	4601      	mov	r1, r0
 8026044:	2200      	movs	r2, #0
 8026046:	701a      	strb	r2, [r3, #0]
 8026048:	1c5a      	adds	r2, r3, #1
 802604a:	1e4b      	subs	r3, r1, #1
 802604c:	2b00      	cmp	r3, #0
 802604e:	db04      	blt.n	802605a <FlashTest+0x286>
 8026050:	2100      	movs	r1, #0
 8026052:	7011      	strb	r1, [r2, #0]
 8026054:	3201      	adds	r2, #1
 8026056:	3b01      	subs	r3, #1
 8026058:	e7f8      	b.n	802604c <FlashTest+0x278>
    uint16_t buff_b[num_of_data] = {0};
 802605a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802605c:	1e58      	subs	r0, r3, #1
 802605e:	6178      	str	r0, [r7, #20]
 8026060:	4603      	mov	r3, r0
 8026062:	3301      	adds	r3, #1
 8026064:	4619      	mov	r1, r3
 8026066:	f04f 0200 	mov.w	r2, #0
 802606a:	f04f 0300 	mov.w	r3, #0
 802606e:	f04f 0400 	mov.w	r4, #0
 8026072:	0114      	lsls	r4, r2, #4
 8026074:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8026078:	010b      	lsls	r3, r1, #4
 802607a:	4603      	mov	r3, r0
 802607c:	3301      	adds	r3, #1
 802607e:	4619      	mov	r1, r3
 8026080:	f04f 0200 	mov.w	r2, #0
 8026084:	f04f 0300 	mov.w	r3, #0
 8026088:	f04f 0400 	mov.w	r4, #0
 802608c:	0114      	lsls	r4, r2, #4
 802608e:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8026092:	010b      	lsls	r3, r1, #4
 8026094:	4603      	mov	r3, r0
 8026096:	3301      	adds	r3, #1
 8026098:	005b      	lsls	r3, r3, #1
 802609a:	3301      	adds	r3, #1
 802609c:	3307      	adds	r3, #7
 802609e:	08db      	lsrs	r3, r3, #3
 80260a0:	00db      	lsls	r3, r3, #3
 80260a2:	ebad 0d03 	sub.w	sp, sp, r3
 80260a6:	466b      	mov	r3, sp
 80260a8:	3301      	adds	r3, #1
 80260aa:	085b      	lsrs	r3, r3, #1
 80260ac:	005b      	lsls	r3, r3, #1
 80260ae:	613b      	str	r3, [r7, #16]
 80260b0:	693b      	ldr	r3, [r7, #16]
 80260b2:	4601      	mov	r1, r0
 80260b4:	2200      	movs	r2, #0
 80260b6:	801a      	strh	r2, [r3, #0]
 80260b8:	1c9a      	adds	r2, r3, #2
 80260ba:	1e4b      	subs	r3, r1, #1
 80260bc:	2b00      	cmp	r3, #0
 80260be:	db04      	blt.n	80260ca <FlashTest+0x2f6>
 80260c0:	2100      	movs	r1, #0
 80260c2:	8011      	strh	r1, [r2, #0]
 80260c4:	3202      	adds	r2, #2
 80260c6:	3b01      	subs	r3, #1
 80260c8:	e7f8      	b.n	80260bc <FlashTest+0x2e8>
    int16_t buff_c[num_of_data] = {0};
 80260ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80260cc:	1e58      	subs	r0, r3, #1
 80260ce:	60f8      	str	r0, [r7, #12]
 80260d0:	4603      	mov	r3, r0
 80260d2:	3301      	adds	r3, #1
 80260d4:	4619      	mov	r1, r3
 80260d6:	f04f 0200 	mov.w	r2, #0
 80260da:	f04f 0300 	mov.w	r3, #0
 80260de:	f04f 0400 	mov.w	r4, #0
 80260e2:	0114      	lsls	r4, r2, #4
 80260e4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80260e8:	010b      	lsls	r3, r1, #4
 80260ea:	4603      	mov	r3, r0
 80260ec:	3301      	adds	r3, #1
 80260ee:	4619      	mov	r1, r3
 80260f0:	f04f 0200 	mov.w	r2, #0
 80260f4:	f04f 0300 	mov.w	r3, #0
 80260f8:	f04f 0400 	mov.w	r4, #0
 80260fc:	0114      	lsls	r4, r2, #4
 80260fe:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8026102:	010b      	lsls	r3, r1, #4
 8026104:	4603      	mov	r3, r0
 8026106:	3301      	adds	r3, #1
 8026108:	005b      	lsls	r3, r3, #1
 802610a:	3301      	adds	r3, #1
 802610c:	3307      	adds	r3, #7
 802610e:	08db      	lsrs	r3, r3, #3
 8026110:	00db      	lsls	r3, r3, #3
 8026112:	ebad 0d03 	sub.w	sp, sp, r3
 8026116:	466b      	mov	r3, sp
 8026118:	3301      	adds	r3, #1
 802611a:	085b      	lsrs	r3, r3, #1
 802611c:	005b      	lsls	r3, r3, #1
 802611e:	60bb      	str	r3, [r7, #8]
 8026120:	68bb      	ldr	r3, [r7, #8]
 8026122:	4601      	mov	r1, r0
 8026124:	2200      	movs	r2, #0
 8026126:	801a      	strh	r2, [r3, #0]
 8026128:	1c9a      	adds	r2, r3, #2
 802612a:	1e4b      	subs	r3, r1, #1
 802612c:	2b00      	cmp	r3, #0
 802612e:	db13      	blt.n	8026158 <FlashTest+0x384>
 8026130:	2100      	movs	r1, #0
 8026132:	8011      	strh	r1, [r2, #0]
 8026134:	3202      	adds	r2, #2
 8026136:	3b01      	subs	r3, #1
 8026138:	e7f8      	b.n	802612c <FlashTest+0x358>
 802613a:	bf00      	nop
 802613c:	08004000 	.word	0x08004000
 8026140:	08008000 	.word	0x08008000
 8026144:	0800c000 	.word	0x0800c000
 8026148:	08010000 	.word	0x08010000
 802614c:	3dcccccd 	.word	0x3dcccccd
 8026150:	3e4ccccd 	.word	0x3e4ccccd
 8026154:	3e99999a 	.word	0x3e99999a
    float buff_d[num_of_data] = {0};
 8026158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802615a:	1e58      	subs	r0, r3, #1
 802615c:	6078      	str	r0, [r7, #4]
 802615e:	4603      	mov	r3, r0
 8026160:	3301      	adds	r3, #1
 8026162:	4619      	mov	r1, r3
 8026164:	f04f 0200 	mov.w	r2, #0
 8026168:	f04f 0300 	mov.w	r3, #0
 802616c:	f04f 0400 	mov.w	r4, #0
 8026170:	0154      	lsls	r4, r2, #5
 8026172:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8026176:	014b      	lsls	r3, r1, #5
 8026178:	4603      	mov	r3, r0
 802617a:	3301      	adds	r3, #1
 802617c:	4619      	mov	r1, r3
 802617e:	f04f 0200 	mov.w	r2, #0
 8026182:	f04f 0300 	mov.w	r3, #0
 8026186:	f04f 0400 	mov.w	r4, #0
 802618a:	0154      	lsls	r4, r2, #5
 802618c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8026190:	014b      	lsls	r3, r1, #5
 8026192:	4603      	mov	r3, r0
 8026194:	3301      	adds	r3, #1
 8026196:	009b      	lsls	r3, r3, #2
 8026198:	3303      	adds	r3, #3
 802619a:	3307      	adds	r3, #7
 802619c:	08db      	lsrs	r3, r3, #3
 802619e:	00db      	lsls	r3, r3, #3
 80261a0:	ebad 0d03 	sub.w	sp, sp, r3
 80261a4:	466b      	mov	r3, sp
 80261a6:	3303      	adds	r3, #3
 80261a8:	089b      	lsrs	r3, r3, #2
 80261aa:	009b      	lsls	r3, r3, #2
 80261ac:	603b      	str	r3, [r7, #0]
 80261ae:	683b      	ldr	r3, [r7, #0]
 80261b0:	4601      	mov	r1, r0
 80261b2:	f04f 0200 	mov.w	r2, #0
 80261b6:	601a      	str	r2, [r3, #0]
 80261b8:	1d1a      	adds	r2, r3, #4
 80261ba:	1e4b      	subs	r3, r1, #1
 80261bc:	2b00      	cmp	r3, #0
 80261be:	db05      	blt.n	80261cc <FlashTest+0x3f8>
 80261c0:	f04f 0100 	mov.w	r1, #0
 80261c4:	6011      	str	r1, [r2, #0]
 80261c6:	3204      	adds	r2, #4
 80261c8:	3b01      	subs	r3, #1
 80261ca:	e7f7      	b.n	80261bc <FlashTest+0x3e8>
    if(!flash.Clear()) return 0x01;
 80261cc:	487b      	ldr	r0, [pc, #492]	; (80263bc <FlashTest+0x5e8>)
 80261ce:	f7fa fe9f 	bl	8020f10 <_ZN5Flash5ClearEv>
 80261d2:	4603      	mov	r3, r0
 80261d4:	f083 0301 	eor.w	r3, r3, #1
 80261d8:	b2db      	uxtb	r3, r3
 80261da:	2b00      	cmp	r3, #0
 80261dc:	d001      	beq.n	80261e2 <FlashTest+0x40e>
 80261de:	2301      	movs	r3, #1
 80261e0:	e0e6      	b.n	80263b0 <FlashTest+0x5dc>
    if(!flash.CheckBlankByte(address_1, num_of_data)) return 0x02;
 80261e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80261e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80261e6:	4875      	ldr	r0, [pc, #468]	; (80263bc <FlashTest+0x5e8>)
 80261e8:	f7fa ffad 	bl	8021146 <_ZN5Flash14CheckBlankByteEmm>
 80261ec:	4603      	mov	r3, r0
 80261ee:	f083 0301 	eor.w	r3, r3, #1
 80261f2:	b2db      	uxtb	r3, r3
 80261f4:	2b00      	cmp	r3, #0
 80261f6:	d001      	beq.n	80261fc <FlashTest+0x428>
 80261f8:	2302      	movs	r3, #2
 80261fa:	e0d9      	b.n	80263b0 <FlashTest+0x5dc>
    if(!flash.StoreUint8(address_1, a, num_of_data)) return 0x03;
 80261fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80261fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8026200:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8026202:	486e      	ldr	r0, [pc, #440]	; (80263bc <FlashTest+0x5e8>)
 8026204:	f7fa feb8 	bl	8020f78 <_ZN5Flash10StoreUint8EmPhm>
 8026208:	4603      	mov	r3, r0
 802620a:	f083 0301 	eor.w	r3, r3, #1
 802620e:	b2db      	uxtb	r3, r3
 8026210:	2b00      	cmp	r3, #0
 8026212:	d001      	beq.n	8026218 <FlashTest+0x444>
 8026214:	2303      	movs	r3, #3
 8026216:	e0cb      	b.n	80263b0 <FlashTest+0x5dc>
    flash.Load(buff_a, address_1, num_of_data);
 8026218:	69b9      	ldr	r1, [r7, #24]
 802621a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802621c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802621e:	4867      	ldr	r0, [pc, #412]	; (80263bc <FlashTest+0x5e8>)
 8026220:	f7fa ff80 	bl	8021124 <_ZN5Flash4LoadEPvmm>
    for(i = 0; i < num_of_data; i++) if(a[i] != buff_a[i]) return 0x04;
 8026224:	2300      	movs	r3, #0
 8026226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026228:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802622a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802622c:	429a      	cmp	r2, r3
 802622e:	d20f      	bcs.n	8026250 <FlashTest+0x47c>
 8026230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026234:	4413      	add	r3, r2
 8026236:	781a      	ldrb	r2, [r3, #0]
 8026238:	69b9      	ldr	r1, [r7, #24]
 802623a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802623c:	440b      	add	r3, r1
 802623e:	781b      	ldrb	r3, [r3, #0]
 8026240:	429a      	cmp	r2, r3
 8026242:	d001      	beq.n	8026248 <FlashTest+0x474>
 8026244:	2304      	movs	r3, #4
 8026246:	e0b3      	b.n	80263b0 <FlashTest+0x5dc>
 8026248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802624a:	3301      	adds	r3, #1
 802624c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802624e:	e7eb      	b.n	8026228 <FlashTest+0x454>
    if(!flash.CheckBlankHalfword(address_2, num_of_data)) return 0x05;
 8026250:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8026252:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8026254:	4859      	ldr	r0, [pc, #356]	; (80263bc <FlashTest+0x5e8>)
 8026256:	f7fa ffc3 	bl	80211e0 <_ZN5Flash18CheckBlankHalfwordEmm>
 802625a:	4603      	mov	r3, r0
 802625c:	f083 0301 	eor.w	r3, r3, #1
 8026260:	b2db      	uxtb	r3, r3
 8026262:	2b00      	cmp	r3, #0
 8026264:	d001      	beq.n	802626a <FlashTest+0x496>
 8026266:	2305      	movs	r3, #5
 8026268:	e0a2      	b.n	80263b0 <FlashTest+0x5dc>
    if(!flash.StoreUint16(address_2, b, num_of_data)) return 0x06;
 802626a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802626c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802626e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8026270:	4852      	ldr	r0, [pc, #328]	; (80263bc <FlashTest+0x5e8>)
 8026272:	f7fa feb5 	bl	8020fe0 <_ZN5Flash11StoreUint16EmPtm>
 8026276:	4603      	mov	r3, r0
 8026278:	f083 0301 	eor.w	r3, r3, #1
 802627c:	b2db      	uxtb	r3, r3
 802627e:	2b00      	cmp	r3, #0
 8026280:	d001      	beq.n	8026286 <FlashTest+0x4b2>
 8026282:	2306      	movs	r3, #6
 8026284:	e094      	b.n	80263b0 <FlashTest+0x5dc>
    flash.Load(buff_b, address_2, num_of_data*2);
 8026286:	6939      	ldr	r1, [r7, #16]
 8026288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802628a:	005b      	lsls	r3, r3, #1
 802628c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802628e:	484b      	ldr	r0, [pc, #300]	; (80263bc <FlashTest+0x5e8>)
 8026290:	f7fa ff48 	bl	8021124 <_ZN5Flash4LoadEPvmm>
    for(i = 0; i < num_of_data; i++) if(b[i] != buff_b[i]) return 0x07;
 8026294:	2300      	movs	r3, #0
 8026296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026298:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802629a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802629c:	429a      	cmp	r2, r3
 802629e:	d20f      	bcs.n	80262c0 <FlashTest+0x4ec>
 80262a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80262a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80262a4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80262a8:	693b      	ldr	r3, [r7, #16]
 80262aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80262ac:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80262b0:	429a      	cmp	r2, r3
 80262b2:	d001      	beq.n	80262b8 <FlashTest+0x4e4>
 80262b4:	2307      	movs	r3, #7
 80262b6:	e07b      	b.n	80263b0 <FlashTest+0x5dc>
 80262b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80262ba:	3301      	adds	r3, #1
 80262bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80262be:	e7eb      	b.n	8026298 <FlashTest+0x4c4>
    if(!flash.CheckBlankHalfword(address_3, num_of_data)) return 0x08;
 80262c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80262c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80262c4:	483d      	ldr	r0, [pc, #244]	; (80263bc <FlashTest+0x5e8>)
 80262c6:	f7fa ff8b 	bl	80211e0 <_ZN5Flash18CheckBlankHalfwordEmm>
 80262ca:	4603      	mov	r3, r0
 80262cc:	f083 0301 	eor.w	r3, r3, #1
 80262d0:	b2db      	uxtb	r3, r3
 80262d2:	2b00      	cmp	r3, #0
 80262d4:	d001      	beq.n	80262da <FlashTest+0x506>
 80262d6:	2308      	movs	r3, #8
 80262d8:	e06a      	b.n	80263b0 <FlashTest+0x5dc>
    if(!flash.StoreInt16(address_3, c, num_of_data)) return 0x09;
 80262da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80262dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80262de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80262e0:	4836      	ldr	r0, [pc, #216]	; (80263bc <FlashTest+0x5e8>)
 80262e2:	f7fa feb2 	bl	802104a <_ZN5Flash10StoreInt16EmPsm>
 80262e6:	4603      	mov	r3, r0
 80262e8:	f083 0301 	eor.w	r3, r3, #1
 80262ec:	b2db      	uxtb	r3, r3
 80262ee:	2b00      	cmp	r3, #0
 80262f0:	d001      	beq.n	80262f6 <FlashTest+0x522>
 80262f2:	2309      	movs	r3, #9
 80262f4:	e05c      	b.n	80263b0 <FlashTest+0x5dc>
    flash.Load(buff_c, address_3, num_of_data*2);
 80262f6:	68b9      	ldr	r1, [r7, #8]
 80262f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80262fa:	005b      	lsls	r3, r3, #1
 80262fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80262fe:	482f      	ldr	r0, [pc, #188]	; (80263bc <FlashTest+0x5e8>)
 8026300:	f7fa ff10 	bl	8021124 <_ZN5Flash4LoadEPvmm>
    for(i = 0; i < num_of_data; i++) if(c[i] != buff_c[i]) return 0x0A;
 8026304:	2300      	movs	r3, #0
 8026306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026308:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802630a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802630c:	429a      	cmp	r2, r3
 802630e:	d20f      	bcs.n	8026330 <FlashTest+0x55c>
 8026310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026312:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8026314:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8026318:	68bb      	ldr	r3, [r7, #8]
 802631a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802631c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8026320:	429a      	cmp	r2, r3
 8026322:	d001      	beq.n	8026328 <FlashTest+0x554>
 8026324:	230a      	movs	r3, #10
 8026326:	e043      	b.n	80263b0 <FlashTest+0x5dc>
 8026328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802632a:	3301      	adds	r3, #1
 802632c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802632e:	e7eb      	b.n	8026308 <FlashTest+0x534>
    if(!flash.CheckBlankWord(address_4, num_of_data)) return 0x0B;
 8026330:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8026332:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8026334:	4821      	ldr	r0, [pc, #132]	; (80263bc <FlashTest+0x5e8>)
 8026336:	f7fa ffa7 	bl	8021288 <_ZN5Flash14CheckBlankWordEmm>
 802633a:	4603      	mov	r3, r0
 802633c:	f083 0301 	eor.w	r3, r3, #1
 8026340:	b2db      	uxtb	r3, r3
 8026342:	2b00      	cmp	r3, #0
 8026344:	d001      	beq.n	802634a <FlashTest+0x576>
 8026346:	230b      	movs	r3, #11
 8026348:	e032      	b.n	80263b0 <FlashTest+0x5dc>
    if(!flash.StoreFloat(address_4, d, num_of_data)) return 0x0C;
 802634a:	6a3a      	ldr	r2, [r7, #32]
 802634c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802634e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8026350:	481a      	ldr	r0, [pc, #104]	; (80263bc <FlashTest+0x5e8>)
 8026352:	f7fa feb0 	bl	80210b6 <_ZN5Flash10StoreFloatEmPfm>
 8026356:	4603      	mov	r3, r0
 8026358:	f083 0301 	eor.w	r3, r3, #1
 802635c:	b2db      	uxtb	r3, r3
 802635e:	2b00      	cmp	r3, #0
 8026360:	d001      	beq.n	8026366 <FlashTest+0x592>
 8026362:	230c      	movs	r3, #12
 8026364:	e024      	b.n	80263b0 <FlashTest+0x5dc>
    flash.Load(buff_d, address_4, num_of_data*4);
 8026366:	6839      	ldr	r1, [r7, #0]
 8026368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802636a:	009b      	lsls	r3, r3, #2
 802636c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802636e:	4813      	ldr	r0, [pc, #76]	; (80263bc <FlashTest+0x5e8>)
 8026370:	f7fa fed8 	bl	8021124 <_ZN5Flash4LoadEPvmm>
    for(i = 0; i < num_of_data; i++) if(d[i] != buff_d[i]) return 0x0D;
 8026374:	2300      	movs	r3, #0
 8026376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026378:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802637a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802637c:	429a      	cmp	r2, r3
 802637e:	d216      	bcs.n	80263ae <FlashTest+0x5da>
 8026380:	6a3a      	ldr	r2, [r7, #32]
 8026382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026384:	009b      	lsls	r3, r3, #2
 8026386:	4413      	add	r3, r2
 8026388:	ed93 7a00 	vldr	s14, [r3]
 802638c:	683a      	ldr	r2, [r7, #0]
 802638e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026390:	009b      	lsls	r3, r3, #2
 8026392:	4413      	add	r3, r2
 8026394:	edd3 7a00 	vldr	s15, [r3]
 8026398:	eeb4 7a67 	vcmp.f32	s14, s15
 802639c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80263a0:	d001      	beq.n	80263a6 <FlashTest+0x5d2>
 80263a2:	230d      	movs	r3, #13
 80263a4:	e004      	b.n	80263b0 <FlashTest+0x5dc>
 80263a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80263a8:	3301      	adds	r3, #1
 80263aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80263ac:	e7e4      	b.n	8026378 <FlashTest+0x5a4>
    return 0x0E;
 80263ae:	230e      	movs	r3, #14
 80263b0:	46ad      	mov	sp, r5
}
 80263b2:	4618      	mov	r0, r3
 80263b4:	3758      	adds	r7, #88	; 0x58
 80263b6:	46bd      	mov	sp, r7
 80263b8:	bdb0      	pop	{r4, r5, r7, pc}
 80263ba:	bf00      	nop
 80263bc:	20000358 	.word	0x20000358

080263c0 <InitialTest>:

void InitialTest()
{
 80263c0:	b580      	push	{r7, lr}
 80263c2:	af00      	add	r7, sp, #0
    /* Line sensor */
    line_sensor.Update();
 80263c4:	485c      	ldr	r0, [pc, #368]	; (8026538 <InitialTest+0x178>)
 80263c6:	f7fb fd2b 	bl	8021e20 <_ZN10LineSensor6UpdateEv>
    line_sensor.MonitorArrays();
 80263ca:	485b      	ldr	r0, [pc, #364]	; (8026538 <InitialTest+0x178>)
 80263cc:	f7fb feb8 	bl	8022140 <_ZN10LineSensor13MonitorArraysEv>
    g_line_diff = line_sensor.LeftRightDifference();
 80263d0:	4859      	ldr	r0, [pc, #356]	; (8026538 <InitialTest+0x178>)
 80263d2:	f7fb fdf5 	bl	8021fc0 <_ZN10LineSensor19LeftRightDifferenceEv>
 80263d6:	eef0 7a40 	vmov.f32	s15, s0
 80263da:	4b58      	ldr	r3, [pc, #352]	; (802653c <InitialTest+0x17c>)
 80263dc:	edc3 7a00 	vstr	s15, [r3]
    g_line_emer = line_sensor.GetEmergencyStopFlag();
 80263e0:	4855      	ldr	r0, [pc, #340]	; (8026538 <InitialTest+0x178>)
 80263e2:	f7fb fddd 	bl	8021fa0 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 80263e6:	4603      	mov	r3, r0
 80263e8:	461a      	mov	r2, r3
 80263ea:	4b55      	ldr	r3, [pc, #340]	; (8026540 <InitialTest+0x180>)
 80263ec:	701a      	strb	r2, [r3, #0]
    g_line_calib = line_sensor.CheckCalibration();
 80263ee:	4852      	ldr	r0, [pc, #328]	; (8026538 <InitialTest+0x178>)
 80263f0:	f7fb fe4a 	bl	8022088 <_ZN10LineSensor16CheckCalibrationEv>
 80263f4:	4603      	mov	r3, r0
 80263f6:	461a      	mov	r2, r3
 80263f8:	4b52      	ldr	r3, [pc, #328]	; (8026544 <InitialTest+0x184>)
 80263fa:	701a      	strb	r2, [r3, #0]

    /* Side seneor */
    side_sensor.IgnoreJudgment();
 80263fc:	4852      	ldr	r0, [pc, #328]	; (8026548 <InitialTest+0x188>)
 80263fe:	f7fd ff63 	bl	80242c8 <_ZN10SideSensor14IgnoreJudgmentEv>
    g_goal_cnt = side_sensor.GetGoalMarkerCount();
 8026402:	4851      	ldr	r0, [pc, #324]	; (8026548 <InitialTest+0x188>)
 8026404:	f7fe f98a 	bl	802471c <_ZN10SideSensor18GetGoalMarkerCountEv>
 8026408:	4603      	mov	r3, r0
 802640a:	461a      	mov	r2, r3
 802640c:	4b4f      	ldr	r3, [pc, #316]	; (802654c <InitialTest+0x18c>)
 802640e:	701a      	strb	r2, [r3, #0]
    g_corner_cnt = side_sensor.GetCornerMarkerCount();
 8026410:	484d      	ldr	r0, [pc, #308]	; (8026548 <InitialTest+0x188>)
 8026412:	f7fe f991 	bl	8024738 <_ZN10SideSensor20GetCornerMarkerCountEv>
 8026416:	4603      	mov	r3, r0
 8026418:	461a      	mov	r2, r3
 802641a:	4b4d      	ldr	r3, [pc, #308]	; (8026550 <InitialTest+0x190>)
 802641c:	701a      	strb	r2, [r3, #0]
    g_cross_cnt = side_sensor.GetCrossLineCount();
 802641e:	484a      	ldr	r0, [pc, #296]	; (8026548 <InitialTest+0x188>)
 8026420:	f7fe f996 	bl	8024750 <_ZN10SideSensor17GetCrossLineCountEv>
 8026424:	4603      	mov	r3, r0
 8026426:	461a      	mov	r2, r3
 8026428:	4b4a      	ldr	r3, [pc, #296]	; (8026554 <InitialTest+0x194>)
 802642a:	701a      	strb	r2, [r3, #0]

    /* IMU */
    iim_42652.Update();
 802642c:	484a      	ldr	r0, [pc, #296]	; (8026558 <InitialTest+0x198>)
 802642e:	f7fb f8ef 	bl	8021610 <_ZN8Iim426526UpdateEv>
    g_deg_stack_z = iim_42652.GetDegreeStackZ();
 8026432:	4849      	ldr	r0, [pc, #292]	; (8026558 <InitialTest+0x198>)
 8026434:	f7fb f954 	bl	80216e0 <_ZN8Iim4265215GetDegreeStackZEv>
 8026438:	eeb0 7a40 	vmov.f32	s14, s0
 802643c:	eef0 7a60 	vmov.f32	s15, s1
 8026440:	4b46      	ldr	r3, [pc, #280]	; (802655c <InitialTest+0x19c>)
 8026442:	ed83 7b00 	vstr	d7, [r3]
    g_gyro_x_l = iim_42652.GyroXLeft();
 8026446:	4844      	ldr	r0, [pc, #272]	; (8026558 <InitialTest+0x198>)
 8026448:	f7fb f95b 	bl	8021702 <_ZN8Iim426529GyroXLeftEv>
 802644c:	4603      	mov	r3, r0
 802644e:	461a      	mov	r2, r3
 8026450:	4b43      	ldr	r3, [pc, #268]	; (8026560 <InitialTest+0x1a0>)
 8026452:	801a      	strh	r2, [r3, #0]
    g_gyro_x_r = iim_42652.GyroXRight();
 8026454:	4840      	ldr	r0, [pc, #256]	; (8026558 <InitialTest+0x198>)
 8026456:	f7fb f963 	bl	8021720 <_ZN8Iim4265210GyroXRightEv>
 802645a:	4603      	mov	r3, r0
 802645c:	461a      	mov	r2, r3
 802645e:	4b41      	ldr	r3, [pc, #260]	; (8026564 <InitialTest+0x1a4>)
 8026460:	801a      	strh	r2, [r3, #0]
    g_gyro_y_l = iim_42652.GyroYLeft();
 8026462:	483d      	ldr	r0, [pc, #244]	; (8026558 <InitialTest+0x198>)
 8026464:	f7fb f96b 	bl	802173e <_ZN8Iim426529GyroYLeftEv>
 8026468:	4603      	mov	r3, r0
 802646a:	461a      	mov	r2, r3
 802646c:	4b3e      	ldr	r3, [pc, #248]	; (8026568 <InitialTest+0x1a8>)
 802646e:	801a      	strh	r2, [r3, #0]
    g_gyro_y_r = iim_42652.GyroYRight();
 8026470:	4839      	ldr	r0, [pc, #228]	; (8026558 <InitialTest+0x198>)
 8026472:	f7fb f973 	bl	802175c <_ZN8Iim4265210GyroYRightEv>
 8026476:	4603      	mov	r3, r0
 8026478:	461a      	mov	r2, r3
 802647a:	4b3c      	ldr	r3, [pc, #240]	; (802656c <InitialTest+0x1ac>)
 802647c:	801a      	strh	r2, [r3, #0]
    g_gyro_z_l = iim_42652.GyroZLeft();
 802647e:	4836      	ldr	r0, [pc, #216]	; (8026558 <InitialTest+0x198>)
 8026480:	f7fb f97b 	bl	802177a <_ZN8Iim426529GyroZLeftEv>
 8026484:	4603      	mov	r3, r0
 8026486:	461a      	mov	r2, r3
 8026488:	4b39      	ldr	r3, [pc, #228]	; (8026570 <InitialTest+0x1b0>)
 802648a:	801a      	strh	r2, [r3, #0]
    g_gyro_z_r = iim_42652.GyroZRight();
 802648c:	4832      	ldr	r0, [pc, #200]	; (8026558 <InitialTest+0x198>)
 802648e:	f7fb f983 	bl	8021798 <_ZN8Iim4265210GyroZRightEv>
 8026492:	4603      	mov	r3, r0
 8026494:	461a      	mov	r2, r3
 8026496:	4b37      	ldr	r3, [pc, #220]	; (8026574 <InitialTest+0x1b4>)
 8026498:	801a      	strh	r2, [r3, #0]
    g_accel_x_l = iim_42652.AccelXLeft();
 802649a:	482f      	ldr	r0, [pc, #188]	; (8026558 <InitialTest+0x198>)
 802649c:	f7fb f98b 	bl	80217b6 <_ZN8Iim4265210AccelXLeftEv>
 80264a0:	4603      	mov	r3, r0
 80264a2:	461a      	mov	r2, r3
 80264a4:	4b34      	ldr	r3, [pc, #208]	; (8026578 <InitialTest+0x1b8>)
 80264a6:	801a      	strh	r2, [r3, #0]
    g_accel_x_r = iim_42652.AccelXRight();
 80264a8:	482b      	ldr	r0, [pc, #172]	; (8026558 <InitialTest+0x198>)
 80264aa:	f7fb f993 	bl	80217d4 <_ZN8Iim4265211AccelXRightEv>
 80264ae:	4603      	mov	r3, r0
 80264b0:	461a      	mov	r2, r3
 80264b2:	4b32      	ldr	r3, [pc, #200]	; (802657c <InitialTest+0x1bc>)
 80264b4:	801a      	strh	r2, [r3, #0]
    g_accel_y_l = iim_42652.AccelYLeft();
 80264b6:	4828      	ldr	r0, [pc, #160]	; (8026558 <InitialTest+0x198>)
 80264b8:	f7fb f99b 	bl	80217f2 <_ZN8Iim4265210AccelYLeftEv>
 80264bc:	4603      	mov	r3, r0
 80264be:	461a      	mov	r2, r3
 80264c0:	4b2f      	ldr	r3, [pc, #188]	; (8026580 <InitialTest+0x1c0>)
 80264c2:	801a      	strh	r2, [r3, #0]
    g_accel_y_r = iim_42652.AccelYRight();
 80264c4:	4824      	ldr	r0, [pc, #144]	; (8026558 <InitialTest+0x198>)
 80264c6:	f7fb f9a3 	bl	8021810 <_ZN8Iim4265211AccelYRightEv>
 80264ca:	4603      	mov	r3, r0
 80264cc:	461a      	mov	r2, r3
 80264ce:	4b2d      	ldr	r3, [pc, #180]	; (8026584 <InitialTest+0x1c4>)
 80264d0:	801a      	strh	r2, [r3, #0]
    g_accel_z_l = iim_42652.AccelZLeft();
 80264d2:	4821      	ldr	r0, [pc, #132]	; (8026558 <InitialTest+0x198>)
 80264d4:	f7fb f9ab 	bl	802182e <_ZN8Iim4265210AccelZLeftEv>
 80264d8:	4603      	mov	r3, r0
 80264da:	461a      	mov	r2, r3
 80264dc:	4b2a      	ldr	r3, [pc, #168]	; (8026588 <InitialTest+0x1c8>)
 80264de:	801a      	strh	r2, [r3, #0]
    g_accel_z_r = iim_42652.AccelZRight();
 80264e0:	481d      	ldr	r0, [pc, #116]	; (8026558 <InitialTest+0x198>)
 80264e2:	f7fb f9b3 	bl	802184c <_ZN8Iim4265211AccelZRightEv>
 80264e6:	4603      	mov	r3, r0
 80264e8:	461a      	mov	r2, r3
 80264ea:	4b28      	ldr	r3, [pc, #160]	; (802658c <InitialTest+0x1cc>)
 80264ec:	801a      	strh	r2, [r3, #0]

    /* Encoder */
    encoder.Update();
 80264ee:	4828      	ldr	r0, [pc, #160]	; (8026590 <InitialTest+0x1d0>)
 80264f0:	f7fa fc3e 	bl	8020d70 <_ZN7Encoder6UpdateEv>
    g_distance = encoder.GetDistance();
 80264f4:	4826      	ldr	r0, [pc, #152]	; (8026590 <InitialTest+0x1d0>)
 80264f6:	f7fa fccd 	bl	8020e94 <_ZN7Encoder11GetDistanceEv>
 80264fa:	eef0 7a40 	vmov.f32	s15, s0
 80264fe:	4b25      	ldr	r3, [pc, #148]	; (8026594 <InitialTest+0x1d4>)
 8026500:	edc3 7a00 	vstr	s15, [r3]
    g_distance_stack = encoder.GetDistanceStack();
 8026504:	4822      	ldr	r0, [pc, #136]	; (8026590 <InitialTest+0x1d0>)
 8026506:	f7fa fcd4 	bl	8020eb2 <_ZN7Encoder16GetDistanceStackEv>
 802650a:	eef0 7a40 	vmov.f32	s15, s0
 802650e:	4b22      	ldr	r3, [pc, #136]	; (8026598 <InitialTest+0x1d8>)
 8026510:	edc3 7a00 	vstr	s15, [r3]
    g_distance_diff = encoder.AngularVelocity();
 8026514:	481e      	ldr	r0, [pc, #120]	; (8026590 <InitialTest+0x1d0>)
 8026516:	f7fa fcdb 	bl	8020ed0 <_ZN7Encoder15AngularVelocityEv>
 802651a:	eef0 7a40 	vmov.f32	s15, s0
 802651e:	4b1f      	ldr	r3, [pc, #124]	; (802659c <InitialTest+0x1dc>)
 8026520:	edc3 7a00 	vstr	s15, [r3]

    /* Motor */
    motor.Drive(INIT_DEBUG_MOTOR_DUTY, 0);
 8026524:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80265a0 <InitialTest+0x1e0>
 8026528:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80265a0 <InitialTest+0x1e0>
 802652c:	481d      	ldr	r0, [pc, #116]	; (80265a4 <InitialTest+0x1e4>)
 802652e:	f7fd fc83 	bl	8023e38 <_ZN5Motor5DriveEff>
}
 8026532:	bf00      	nop
 8026534:	bd80      	pop	{r7, pc}
 8026536:	bf00      	nop
 8026538:	2000036c 	.word	0x2000036c
 802653c:	200000b8 	.word	0x200000b8
 8026540:	200000bc 	.word	0x200000bc
 8026544:	20000324 	.word	0x20000324
 8026548:	20000798 	.word	0x20000798
 802654c:	20000325 	.word	0x20000325
 8026550:	20000251 	.word	0x20000251
 8026554:	20000252 	.word	0x20000252
 8026558:	20000360 	.word	0x20000360
 802655c:	20000270 	.word	0x20000270
 8026560:	20000280 	.word	0x20000280
 8026564:	20000282 	.word	0x20000282
 8026568:	20000284 	.word	0x20000284
 802656c:	20000286 	.word	0x20000286
 8026570:	20000288 	.word	0x20000288
 8026574:	2000028a 	.word	0x2000028a
 8026578:	2000028c 	.word	0x2000028c
 802657c:	2000028e 	.word	0x2000028e
 8026580:	20000290 	.word	0x20000290
 8026584:	20000292 	.word	0x20000292
 8026588:	20000294 	.word	0x20000294
 802658c:	20000296 	.word	0x20000296
 8026590:	2000034c 	.word	0x2000034c
 8026594:	200002a4 	.word	0x200002a4
 8026598:	200002a8 	.word	0x200002a8
 802659c:	200002ac 	.word	0x200002ac
 80265a0:	00000000 	.word	0x00000000
 80265a4:	20000790 	.word	0x20000790

080265a8 <_Z41__static_initialization_and_destruction_0ii>:
}

void ImuWriteByte(uint8_t send_address, uint8_t send_data, char imu_ic_lr)
{
    iim_42652.Write(send_address, send_data, imu_ic_lr);
}
 80265a8:	b580      	push	{r7, lr}
 80265aa:	b082      	sub	sp, #8
 80265ac:	af00      	add	r7, sp, #0
 80265ae:	6078      	str	r0, [r7, #4]
 80265b0:	6039      	str	r1, [r7, #0]
 80265b2:	687b      	ldr	r3, [r7, #4]
 80265b4:	2b01      	cmp	r3, #1
 80265b6:	d11c      	bne.n	80265f2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 80265b8:	683b      	ldr	r3, [r7, #0]
 80265ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80265be:	4293      	cmp	r3, r2
 80265c0:	d117      	bne.n	80265f2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
Encoder encoder;
 80265c2:	480e      	ldr	r0, [pc, #56]	; (80265fc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80265c4:	f7fa fba6 	bl	8020d14 <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 80265c8:	480d      	ldr	r0, [pc, #52]	; (8026600 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80265ca:	f7fa feb0 	bl	802132e <_ZN8Iim42652C1Ev>
LineSensor line_sensor;
 80265ce:	480d      	ldr	r0, [pc, #52]	; (8026604 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80265d0:	f7fb fa99 	bl	8021b06 <_ZN10LineSensorC1Ev>
LineTrace line_trace;
 80265d4:	480c      	ldr	r0, [pc, #48]	; (8026608 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80265d6:	f7fb fdf3 	bl	80221c0 <_ZN9LineTraceC1Ev>
Logger logger;
 80265da:	480c      	ldr	r0, [pc, #48]	; (802660c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80265dc:	f7fb fee4 	bl	80223a8 <_ZN6LoggerC1Ev>
Motor motor;
 80265e0:	480b      	ldr	r0, [pc, #44]	; (8026610 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80265e2:	f7fd fbf3 	bl	8023dcc <_ZN5MotorC1Ev>
SideSensor side_sensor;
 80265e6:	480b      	ldr	r0, [pc, #44]	; (8026614 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80265e8:	f7fd fdb0 	bl	802414c <_ZN10SideSensorC1Ev>
VelocityControl velocity_control;
 80265ec:	480a      	ldr	r0, [pc, #40]	; (8026618 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80265ee:	f7fe fcad 	bl	8024f4c <_ZN15VelocityControlC1Ev>
}
 80265f2:	bf00      	nop
 80265f4:	3708      	adds	r7, #8
 80265f6:	46bd      	mov	sp, r7
 80265f8:	bd80      	pop	{r7, pc}
 80265fa:	bf00      	nop
 80265fc:	2000034c 	.word	0x2000034c
 8026600:	20000360 	.word	0x20000360
 8026604:	2000036c 	.word	0x2000036c
 8026608:	200004f8 	.word	0x200004f8
 802660c:	20000688 	.word	0x20000688
 8026610:	20000790 	.word	0x20000790
 8026614:	20000798 	.word	0x20000798
 8026618:	200007a0 	.word	0x200007a0

0802661c <_GLOBAL__sub_I_encoder>:
 802661c:	b580      	push	{r7, lr}
 802661e:	af00      	add	r7, sp, #0
 8026620:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8026624:	2001      	movs	r0, #1
 8026626:	f7ff ffbf 	bl	80265a8 <_Z41__static_initialization_and_destruction_0ii>
 802662a:	bd80      	pop	{r7, pc}

0802662c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 802662c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8026664 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8026630:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8026632:	e003      	b.n	802663c <LoopCopyDataInit>

08026634 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8026634:	4b0c      	ldr	r3, [pc, #48]	; (8026668 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8026636:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8026638:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 802663a:	3104      	adds	r1, #4

0802663c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 802663c:	480b      	ldr	r0, [pc, #44]	; (802666c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 802663e:	4b0c      	ldr	r3, [pc, #48]	; (8026670 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8026640:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8026642:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8026644:	d3f6      	bcc.n	8026634 <CopyDataInit>
  ldr  r2, =_sbss
 8026646:	4a0b      	ldr	r2, [pc, #44]	; (8026674 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8026648:	e002      	b.n	8026650 <LoopFillZerobss>

0802664a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 802664a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 802664c:	f842 3b04 	str.w	r3, [r2], #4

08026650 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8026650:	4b09      	ldr	r3, [pc, #36]	; (8026678 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8026652:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8026654:	d3f9      	bcc.n	802664a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8026656:	f7fe fc63 	bl	8024f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802665a:	f004 f8a1 	bl	802a7a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802665e:	f7fc fd6f 	bl	8023140 <main>
  bx  lr    
 8026662:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8026664:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8026668:	0802a85c 	.word	0x0802a85c
  ldr  r0, =_sdata
 802666c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8026670:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8026674:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8026678:	20000bb0 	.word	0x20000bb0

0802667c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802667c:	e7fe      	b.n	802667c <ADC_IRQHandler>
	...

08026680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8026680:	b580      	push	{r7, lr}
 8026682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8026684:	4b0e      	ldr	r3, [pc, #56]	; (80266c0 <HAL_Init+0x40>)
 8026686:	681b      	ldr	r3, [r3, #0]
 8026688:	4a0d      	ldr	r2, [pc, #52]	; (80266c0 <HAL_Init+0x40>)
 802668a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802668e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8026690:	4b0b      	ldr	r3, [pc, #44]	; (80266c0 <HAL_Init+0x40>)
 8026692:	681b      	ldr	r3, [r3, #0]
 8026694:	4a0a      	ldr	r2, [pc, #40]	; (80266c0 <HAL_Init+0x40>)
 8026696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802669a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 802669c:	4b08      	ldr	r3, [pc, #32]	; (80266c0 <HAL_Init+0x40>)
 802669e:	681b      	ldr	r3, [r3, #0]
 80266a0:	4a07      	ldr	r2, [pc, #28]	; (80266c0 <HAL_Init+0x40>)
 80266a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80266a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80266a8:	2003      	movs	r0, #3
 80266aa:	f000 fd41 	bl	8027130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80266ae:	2000      	movs	r0, #0
 80266b0:	f000 f808 	bl	80266c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80266b4:	f7fe f858 	bl	8024768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80266b8:	2300      	movs	r3, #0
}
 80266ba:	4618      	mov	r0, r3
 80266bc:	bd80      	pop	{r7, pc}
 80266be:	bf00      	nop
 80266c0:	40023c00 	.word	0x40023c00

080266c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80266c4:	b580      	push	{r7, lr}
 80266c6:	b082      	sub	sp, #8
 80266c8:	af00      	add	r7, sp, #0
 80266ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80266cc:	4b12      	ldr	r3, [pc, #72]	; (8026718 <HAL_InitTick+0x54>)
 80266ce:	681a      	ldr	r2, [r3, #0]
 80266d0:	4b12      	ldr	r3, [pc, #72]	; (802671c <HAL_InitTick+0x58>)
 80266d2:	781b      	ldrb	r3, [r3, #0]
 80266d4:	4619      	mov	r1, r3
 80266d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80266da:	fbb3 f3f1 	udiv	r3, r3, r1
 80266de:	fbb2 f3f3 	udiv	r3, r2, r3
 80266e2:	4618      	mov	r0, r3
 80266e4:	f000 fd59 	bl	802719a <HAL_SYSTICK_Config>
 80266e8:	4603      	mov	r3, r0
 80266ea:	2b00      	cmp	r3, #0
 80266ec:	d001      	beq.n	80266f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80266ee:	2301      	movs	r3, #1
 80266f0:	e00e      	b.n	8026710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80266f2:	687b      	ldr	r3, [r7, #4]
 80266f4:	2b0f      	cmp	r3, #15
 80266f6:	d80a      	bhi.n	802670e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80266f8:	2200      	movs	r2, #0
 80266fa:	6879      	ldr	r1, [r7, #4]
 80266fc:	f04f 30ff 	mov.w	r0, #4294967295
 8026700:	f000 fd21 	bl	8027146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8026704:	4a06      	ldr	r2, [pc, #24]	; (8026720 <HAL_InitTick+0x5c>)
 8026706:	687b      	ldr	r3, [r7, #4]
 8026708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802670a:	2300      	movs	r3, #0
 802670c:	e000      	b.n	8026710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 802670e:	2301      	movs	r3, #1
}
 8026710:	4618      	mov	r0, r3
 8026712:	3708      	adds	r7, #8
 8026714:	46bd      	mov	sp, r7
 8026716:	bd80      	pop	{r7, pc}
 8026718:	20000010 	.word	0x20000010
 802671c:	20000018 	.word	0x20000018
 8026720:	20000014 	.word	0x20000014

08026724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8026724:	b480      	push	{r7}
 8026726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8026728:	4b06      	ldr	r3, [pc, #24]	; (8026744 <HAL_IncTick+0x20>)
 802672a:	781b      	ldrb	r3, [r3, #0]
 802672c:	461a      	mov	r2, r3
 802672e:	4b06      	ldr	r3, [pc, #24]	; (8026748 <HAL_IncTick+0x24>)
 8026730:	681b      	ldr	r3, [r3, #0]
 8026732:	4413      	add	r3, r2
 8026734:	4a04      	ldr	r2, [pc, #16]	; (8026748 <HAL_IncTick+0x24>)
 8026736:	6013      	str	r3, [r2, #0]
}
 8026738:	bf00      	nop
 802673a:	46bd      	mov	sp, r7
 802673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026740:	4770      	bx	lr
 8026742:	bf00      	nop
 8026744:	20000018 	.word	0x20000018
 8026748:	20000b8c 	.word	0x20000b8c

0802674c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802674c:	b480      	push	{r7}
 802674e:	af00      	add	r7, sp, #0
  return uwTick;
 8026750:	4b03      	ldr	r3, [pc, #12]	; (8026760 <HAL_GetTick+0x14>)
 8026752:	681b      	ldr	r3, [r3, #0]
}
 8026754:	4618      	mov	r0, r3
 8026756:	46bd      	mov	sp, r7
 8026758:	f85d 7b04 	ldr.w	r7, [sp], #4
 802675c:	4770      	bx	lr
 802675e:	bf00      	nop
 8026760:	20000b8c 	.word	0x20000b8c

08026764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8026764:	b580      	push	{r7, lr}
 8026766:	b084      	sub	sp, #16
 8026768:	af00      	add	r7, sp, #0
 802676a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802676c:	f7ff ffee 	bl	802674c <HAL_GetTick>
 8026770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8026772:	687b      	ldr	r3, [r7, #4]
 8026774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8026776:	68fb      	ldr	r3, [r7, #12]
 8026778:	f1b3 3fff 	cmp.w	r3, #4294967295
 802677c:	d005      	beq.n	802678a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802677e:	4b09      	ldr	r3, [pc, #36]	; (80267a4 <HAL_Delay+0x40>)
 8026780:	781b      	ldrb	r3, [r3, #0]
 8026782:	461a      	mov	r2, r3
 8026784:	68fb      	ldr	r3, [r7, #12]
 8026786:	4413      	add	r3, r2
 8026788:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 802678a:	bf00      	nop
 802678c:	f7ff ffde 	bl	802674c <HAL_GetTick>
 8026790:	4602      	mov	r2, r0
 8026792:	68bb      	ldr	r3, [r7, #8]
 8026794:	1ad3      	subs	r3, r2, r3
 8026796:	68fa      	ldr	r2, [r7, #12]
 8026798:	429a      	cmp	r2, r3
 802679a:	d8f7      	bhi.n	802678c <HAL_Delay+0x28>
  {
  }
}
 802679c:	bf00      	nop
 802679e:	3710      	adds	r7, #16
 80267a0:	46bd      	mov	sp, r7
 80267a2:	bd80      	pop	{r7, pc}
 80267a4:	20000018 	.word	0x20000018

080267a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80267a8:	b580      	push	{r7, lr}
 80267aa:	b084      	sub	sp, #16
 80267ac:	af00      	add	r7, sp, #0
 80267ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80267b0:	2300      	movs	r3, #0
 80267b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80267b4:	687b      	ldr	r3, [r7, #4]
 80267b6:	2b00      	cmp	r3, #0
 80267b8:	d101      	bne.n	80267be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80267ba:	2301      	movs	r3, #1
 80267bc:	e033      	b.n	8026826 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80267be:	687b      	ldr	r3, [r7, #4]
 80267c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80267c2:	2b00      	cmp	r3, #0
 80267c4:	d109      	bne.n	80267da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80267c6:	6878      	ldr	r0, [r7, #4]
 80267c8:	f7fd fff6 	bl	80247b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80267cc:	687b      	ldr	r3, [r7, #4]
 80267ce:	2200      	movs	r2, #0
 80267d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80267d2:	687b      	ldr	r3, [r7, #4]
 80267d4:	2200      	movs	r2, #0
 80267d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80267da:	687b      	ldr	r3, [r7, #4]
 80267dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80267de:	f003 0310 	and.w	r3, r3, #16
 80267e2:	2b00      	cmp	r3, #0
 80267e4:	d118      	bne.n	8026818 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80267e6:	687b      	ldr	r3, [r7, #4]
 80267e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80267ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80267ee:	f023 0302 	bic.w	r3, r3, #2
 80267f2:	f043 0202 	orr.w	r2, r3, #2
 80267f6:	687b      	ldr	r3, [r7, #4]
 80267f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80267fa:	6878      	ldr	r0, [r7, #4]
 80267fc:	f000 fa4a 	bl	8026c94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8026800:	687b      	ldr	r3, [r7, #4]
 8026802:	2200      	movs	r2, #0
 8026804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8026806:	687b      	ldr	r3, [r7, #4]
 8026808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802680a:	f023 0303 	bic.w	r3, r3, #3
 802680e:	f043 0201 	orr.w	r2, r3, #1
 8026812:	687b      	ldr	r3, [r7, #4]
 8026814:	641a      	str	r2, [r3, #64]	; 0x40
 8026816:	e001      	b.n	802681c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8026818:	2301      	movs	r3, #1
 802681a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 802681c:	687b      	ldr	r3, [r7, #4]
 802681e:	2200      	movs	r2, #0
 8026820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8026824:	7bfb      	ldrb	r3, [r7, #15]
}
 8026826:	4618      	mov	r0, r3
 8026828:	3710      	adds	r7, #16
 802682a:	46bd      	mov	sp, r7
 802682c:	bd80      	pop	{r7, pc}
	...

08026830 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8026830:	b580      	push	{r7, lr}
 8026832:	b086      	sub	sp, #24
 8026834:	af00      	add	r7, sp, #0
 8026836:	60f8      	str	r0, [r7, #12]
 8026838:	60b9      	str	r1, [r7, #8]
 802683a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 802683c:	2300      	movs	r3, #0
 802683e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8026840:	68fb      	ldr	r3, [r7, #12]
 8026842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026846:	2b01      	cmp	r3, #1
 8026848:	d101      	bne.n	802684e <HAL_ADC_Start_DMA+0x1e>
 802684a:	2302      	movs	r3, #2
 802684c:	e0cc      	b.n	80269e8 <HAL_ADC_Start_DMA+0x1b8>
 802684e:	68fb      	ldr	r3, [r7, #12]
 8026850:	2201      	movs	r2, #1
 8026852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8026856:	68fb      	ldr	r3, [r7, #12]
 8026858:	681b      	ldr	r3, [r3, #0]
 802685a:	689b      	ldr	r3, [r3, #8]
 802685c:	f003 0301 	and.w	r3, r3, #1
 8026860:	2b01      	cmp	r3, #1
 8026862:	d018      	beq.n	8026896 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8026864:	68fb      	ldr	r3, [r7, #12]
 8026866:	681b      	ldr	r3, [r3, #0]
 8026868:	689a      	ldr	r2, [r3, #8]
 802686a:	68fb      	ldr	r3, [r7, #12]
 802686c:	681b      	ldr	r3, [r3, #0]
 802686e:	f042 0201 	orr.w	r2, r2, #1
 8026872:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8026874:	4b5e      	ldr	r3, [pc, #376]	; (80269f0 <HAL_ADC_Start_DMA+0x1c0>)
 8026876:	681b      	ldr	r3, [r3, #0]
 8026878:	4a5e      	ldr	r2, [pc, #376]	; (80269f4 <HAL_ADC_Start_DMA+0x1c4>)
 802687a:	fba2 2303 	umull	r2, r3, r2, r3
 802687e:	0c9a      	lsrs	r2, r3, #18
 8026880:	4613      	mov	r3, r2
 8026882:	005b      	lsls	r3, r3, #1
 8026884:	4413      	add	r3, r2
 8026886:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8026888:	e002      	b.n	8026890 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 802688a:	693b      	ldr	r3, [r7, #16]
 802688c:	3b01      	subs	r3, #1
 802688e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8026890:	693b      	ldr	r3, [r7, #16]
 8026892:	2b00      	cmp	r3, #0
 8026894:	d1f9      	bne.n	802688a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8026896:	68fb      	ldr	r3, [r7, #12]
 8026898:	681b      	ldr	r3, [r3, #0]
 802689a:	689b      	ldr	r3, [r3, #8]
 802689c:	f003 0301 	and.w	r3, r3, #1
 80268a0:	2b01      	cmp	r3, #1
 80268a2:	f040 80a0 	bne.w	80269e6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80268a6:	68fb      	ldr	r3, [r7, #12]
 80268a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80268aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80268ae:	f023 0301 	bic.w	r3, r3, #1
 80268b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80268b6:	68fb      	ldr	r3, [r7, #12]
 80268b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80268ba:	68fb      	ldr	r3, [r7, #12]
 80268bc:	681b      	ldr	r3, [r3, #0]
 80268be:	685b      	ldr	r3, [r3, #4]
 80268c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80268c4:	2b00      	cmp	r3, #0
 80268c6:	d007      	beq.n	80268d8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80268c8:	68fb      	ldr	r3, [r7, #12]
 80268ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80268cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80268d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80268d4:	68fb      	ldr	r3, [r7, #12]
 80268d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80268d8:	68fb      	ldr	r3, [r7, #12]
 80268da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80268dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80268e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80268e4:	d106      	bne.n	80268f4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80268e6:	68fb      	ldr	r3, [r7, #12]
 80268e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80268ea:	f023 0206 	bic.w	r2, r3, #6
 80268ee:	68fb      	ldr	r3, [r7, #12]
 80268f0:	645a      	str	r2, [r3, #68]	; 0x44
 80268f2:	e002      	b.n	80268fa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80268f4:	68fb      	ldr	r3, [r7, #12]
 80268f6:	2200      	movs	r2, #0
 80268f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80268fa:	68fb      	ldr	r3, [r7, #12]
 80268fc:	2200      	movs	r2, #0
 80268fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026902:	4b3d      	ldr	r3, [pc, #244]	; (80269f8 <HAL_ADC_Start_DMA+0x1c8>)
 8026904:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8026906:	68fb      	ldr	r3, [r7, #12]
 8026908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802690a:	4a3c      	ldr	r2, [pc, #240]	; (80269fc <HAL_ADC_Start_DMA+0x1cc>)
 802690c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 802690e:	68fb      	ldr	r3, [r7, #12]
 8026910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026912:	4a3b      	ldr	r2, [pc, #236]	; (8026a00 <HAL_ADC_Start_DMA+0x1d0>)
 8026914:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8026916:	68fb      	ldr	r3, [r7, #12]
 8026918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802691a:	4a3a      	ldr	r2, [pc, #232]	; (8026a04 <HAL_ADC_Start_DMA+0x1d4>)
 802691c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 802691e:	68fb      	ldr	r3, [r7, #12]
 8026920:	681b      	ldr	r3, [r3, #0]
 8026922:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8026926:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8026928:	68fb      	ldr	r3, [r7, #12]
 802692a:	681b      	ldr	r3, [r3, #0]
 802692c:	685a      	ldr	r2, [r3, #4]
 802692e:	68fb      	ldr	r3, [r7, #12]
 8026930:	681b      	ldr	r3, [r3, #0]
 8026932:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8026936:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8026938:	68fb      	ldr	r3, [r7, #12]
 802693a:	681b      	ldr	r3, [r3, #0]
 802693c:	689a      	ldr	r2, [r3, #8]
 802693e:	68fb      	ldr	r3, [r7, #12]
 8026940:	681b      	ldr	r3, [r3, #0]
 8026942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8026946:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8026948:	68fb      	ldr	r3, [r7, #12]
 802694a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 802694c:	68fb      	ldr	r3, [r7, #12]
 802694e:	681b      	ldr	r3, [r3, #0]
 8026950:	334c      	adds	r3, #76	; 0x4c
 8026952:	4619      	mov	r1, r3
 8026954:	68ba      	ldr	r2, [r7, #8]
 8026956:	687b      	ldr	r3, [r7, #4]
 8026958:	f000 fcda 	bl	8027310 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 802695c:	697b      	ldr	r3, [r7, #20]
 802695e:	685b      	ldr	r3, [r3, #4]
 8026960:	f003 031f 	and.w	r3, r3, #31
 8026964:	2b00      	cmp	r3, #0
 8026966:	d12a      	bne.n	80269be <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8026968:	68fb      	ldr	r3, [r7, #12]
 802696a:	681b      	ldr	r3, [r3, #0]
 802696c:	4a26      	ldr	r2, [pc, #152]	; (8026a08 <HAL_ADC_Start_DMA+0x1d8>)
 802696e:	4293      	cmp	r3, r2
 8026970:	d015      	beq.n	802699e <HAL_ADC_Start_DMA+0x16e>
 8026972:	68fb      	ldr	r3, [r7, #12]
 8026974:	681b      	ldr	r3, [r3, #0]
 8026976:	4a25      	ldr	r2, [pc, #148]	; (8026a0c <HAL_ADC_Start_DMA+0x1dc>)
 8026978:	4293      	cmp	r3, r2
 802697a:	d105      	bne.n	8026988 <HAL_ADC_Start_DMA+0x158>
 802697c:	4b1e      	ldr	r3, [pc, #120]	; (80269f8 <HAL_ADC_Start_DMA+0x1c8>)
 802697e:	685b      	ldr	r3, [r3, #4]
 8026980:	f003 031f 	and.w	r3, r3, #31
 8026984:	2b00      	cmp	r3, #0
 8026986:	d00a      	beq.n	802699e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8026988:	68fb      	ldr	r3, [r7, #12]
 802698a:	681b      	ldr	r3, [r3, #0]
 802698c:	4a20      	ldr	r2, [pc, #128]	; (8026a10 <HAL_ADC_Start_DMA+0x1e0>)
 802698e:	4293      	cmp	r3, r2
 8026990:	d129      	bne.n	80269e6 <HAL_ADC_Start_DMA+0x1b6>
 8026992:	4b19      	ldr	r3, [pc, #100]	; (80269f8 <HAL_ADC_Start_DMA+0x1c8>)
 8026994:	685b      	ldr	r3, [r3, #4]
 8026996:	f003 031f 	and.w	r3, r3, #31
 802699a:	2b0f      	cmp	r3, #15
 802699c:	d823      	bhi.n	80269e6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 802699e:	68fb      	ldr	r3, [r7, #12]
 80269a0:	681b      	ldr	r3, [r3, #0]
 80269a2:	689b      	ldr	r3, [r3, #8]
 80269a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80269a8:	2b00      	cmp	r3, #0
 80269aa:	d11c      	bne.n	80269e6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80269ac:	68fb      	ldr	r3, [r7, #12]
 80269ae:	681b      	ldr	r3, [r3, #0]
 80269b0:	689a      	ldr	r2, [r3, #8]
 80269b2:	68fb      	ldr	r3, [r7, #12]
 80269b4:	681b      	ldr	r3, [r3, #0]
 80269b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80269ba:	609a      	str	r2, [r3, #8]
 80269bc:	e013      	b.n	80269e6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80269be:	68fb      	ldr	r3, [r7, #12]
 80269c0:	681b      	ldr	r3, [r3, #0]
 80269c2:	4a11      	ldr	r2, [pc, #68]	; (8026a08 <HAL_ADC_Start_DMA+0x1d8>)
 80269c4:	4293      	cmp	r3, r2
 80269c6:	d10e      	bne.n	80269e6 <HAL_ADC_Start_DMA+0x1b6>
 80269c8:	68fb      	ldr	r3, [r7, #12]
 80269ca:	681b      	ldr	r3, [r3, #0]
 80269cc:	689b      	ldr	r3, [r3, #8]
 80269ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80269d2:	2b00      	cmp	r3, #0
 80269d4:	d107      	bne.n	80269e6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80269d6:	68fb      	ldr	r3, [r7, #12]
 80269d8:	681b      	ldr	r3, [r3, #0]
 80269da:	689a      	ldr	r2, [r3, #8]
 80269dc:	68fb      	ldr	r3, [r7, #12]
 80269de:	681b      	ldr	r3, [r3, #0]
 80269e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80269e4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80269e6:	2300      	movs	r3, #0
}
 80269e8:	4618      	mov	r0, r3
 80269ea:	3718      	adds	r7, #24
 80269ec:	46bd      	mov	sp, r7
 80269ee:	bd80      	pop	{r7, pc}
 80269f0:	20000010 	.word	0x20000010
 80269f4:	431bde83 	.word	0x431bde83
 80269f8:	40012300 	.word	0x40012300
 80269fc:	08026e8d 	.word	0x08026e8d
 8026a00:	08026f47 	.word	0x08026f47
 8026a04:	08026f63 	.word	0x08026f63
 8026a08:	40012000 	.word	0x40012000
 8026a0c:	40012100 	.word	0x40012100
 8026a10:	40012200 	.word	0x40012200

08026a14 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8026a14:	b480      	push	{r7}
 8026a16:	b083      	sub	sp, #12
 8026a18:	af00      	add	r7, sp, #0
 8026a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8026a1c:	bf00      	nop
 8026a1e:	370c      	adds	r7, #12
 8026a20:	46bd      	mov	sp, r7
 8026a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a26:	4770      	bx	lr

08026a28 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8026a28:	b480      	push	{r7}
 8026a2a:	b083      	sub	sp, #12
 8026a2c:	af00      	add	r7, sp, #0
 8026a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8026a30:	bf00      	nop
 8026a32:	370c      	adds	r7, #12
 8026a34:	46bd      	mov	sp, r7
 8026a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a3a:	4770      	bx	lr

08026a3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8026a3c:	b480      	push	{r7}
 8026a3e:	b083      	sub	sp, #12
 8026a40:	af00      	add	r7, sp, #0
 8026a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8026a44:	bf00      	nop
 8026a46:	370c      	adds	r7, #12
 8026a48:	46bd      	mov	sp, r7
 8026a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a4e:	4770      	bx	lr

08026a50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8026a50:	b480      	push	{r7}
 8026a52:	b085      	sub	sp, #20
 8026a54:	af00      	add	r7, sp, #0
 8026a56:	6078      	str	r0, [r7, #4]
 8026a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8026a5a:	2300      	movs	r3, #0
 8026a5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8026a5e:	687b      	ldr	r3, [r7, #4]
 8026a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026a64:	2b01      	cmp	r3, #1
 8026a66:	d101      	bne.n	8026a6c <HAL_ADC_ConfigChannel+0x1c>
 8026a68:	2302      	movs	r3, #2
 8026a6a:	e105      	b.n	8026c78 <HAL_ADC_ConfigChannel+0x228>
 8026a6c:	687b      	ldr	r3, [r7, #4]
 8026a6e:	2201      	movs	r2, #1
 8026a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8026a74:	683b      	ldr	r3, [r7, #0]
 8026a76:	681b      	ldr	r3, [r3, #0]
 8026a78:	2b09      	cmp	r3, #9
 8026a7a:	d925      	bls.n	8026ac8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8026a7c:	687b      	ldr	r3, [r7, #4]
 8026a7e:	681b      	ldr	r3, [r3, #0]
 8026a80:	68d9      	ldr	r1, [r3, #12]
 8026a82:	683b      	ldr	r3, [r7, #0]
 8026a84:	681b      	ldr	r3, [r3, #0]
 8026a86:	b29b      	uxth	r3, r3
 8026a88:	461a      	mov	r2, r3
 8026a8a:	4613      	mov	r3, r2
 8026a8c:	005b      	lsls	r3, r3, #1
 8026a8e:	4413      	add	r3, r2
 8026a90:	3b1e      	subs	r3, #30
 8026a92:	2207      	movs	r2, #7
 8026a94:	fa02 f303 	lsl.w	r3, r2, r3
 8026a98:	43da      	mvns	r2, r3
 8026a9a:	687b      	ldr	r3, [r7, #4]
 8026a9c:	681b      	ldr	r3, [r3, #0]
 8026a9e:	400a      	ands	r2, r1
 8026aa0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8026aa2:	687b      	ldr	r3, [r7, #4]
 8026aa4:	681b      	ldr	r3, [r3, #0]
 8026aa6:	68d9      	ldr	r1, [r3, #12]
 8026aa8:	683b      	ldr	r3, [r7, #0]
 8026aaa:	689a      	ldr	r2, [r3, #8]
 8026aac:	683b      	ldr	r3, [r7, #0]
 8026aae:	681b      	ldr	r3, [r3, #0]
 8026ab0:	b29b      	uxth	r3, r3
 8026ab2:	4618      	mov	r0, r3
 8026ab4:	4603      	mov	r3, r0
 8026ab6:	005b      	lsls	r3, r3, #1
 8026ab8:	4403      	add	r3, r0
 8026aba:	3b1e      	subs	r3, #30
 8026abc:	409a      	lsls	r2, r3
 8026abe:	687b      	ldr	r3, [r7, #4]
 8026ac0:	681b      	ldr	r3, [r3, #0]
 8026ac2:	430a      	orrs	r2, r1
 8026ac4:	60da      	str	r2, [r3, #12]
 8026ac6:	e022      	b.n	8026b0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8026ac8:	687b      	ldr	r3, [r7, #4]
 8026aca:	681b      	ldr	r3, [r3, #0]
 8026acc:	6919      	ldr	r1, [r3, #16]
 8026ace:	683b      	ldr	r3, [r7, #0]
 8026ad0:	681b      	ldr	r3, [r3, #0]
 8026ad2:	b29b      	uxth	r3, r3
 8026ad4:	461a      	mov	r2, r3
 8026ad6:	4613      	mov	r3, r2
 8026ad8:	005b      	lsls	r3, r3, #1
 8026ada:	4413      	add	r3, r2
 8026adc:	2207      	movs	r2, #7
 8026ade:	fa02 f303 	lsl.w	r3, r2, r3
 8026ae2:	43da      	mvns	r2, r3
 8026ae4:	687b      	ldr	r3, [r7, #4]
 8026ae6:	681b      	ldr	r3, [r3, #0]
 8026ae8:	400a      	ands	r2, r1
 8026aea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8026aec:	687b      	ldr	r3, [r7, #4]
 8026aee:	681b      	ldr	r3, [r3, #0]
 8026af0:	6919      	ldr	r1, [r3, #16]
 8026af2:	683b      	ldr	r3, [r7, #0]
 8026af4:	689a      	ldr	r2, [r3, #8]
 8026af6:	683b      	ldr	r3, [r7, #0]
 8026af8:	681b      	ldr	r3, [r3, #0]
 8026afa:	b29b      	uxth	r3, r3
 8026afc:	4618      	mov	r0, r3
 8026afe:	4603      	mov	r3, r0
 8026b00:	005b      	lsls	r3, r3, #1
 8026b02:	4403      	add	r3, r0
 8026b04:	409a      	lsls	r2, r3
 8026b06:	687b      	ldr	r3, [r7, #4]
 8026b08:	681b      	ldr	r3, [r3, #0]
 8026b0a:	430a      	orrs	r2, r1
 8026b0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8026b0e:	683b      	ldr	r3, [r7, #0]
 8026b10:	685b      	ldr	r3, [r3, #4]
 8026b12:	2b06      	cmp	r3, #6
 8026b14:	d824      	bhi.n	8026b60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8026b16:	687b      	ldr	r3, [r7, #4]
 8026b18:	681b      	ldr	r3, [r3, #0]
 8026b1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8026b1c:	683b      	ldr	r3, [r7, #0]
 8026b1e:	685a      	ldr	r2, [r3, #4]
 8026b20:	4613      	mov	r3, r2
 8026b22:	009b      	lsls	r3, r3, #2
 8026b24:	4413      	add	r3, r2
 8026b26:	3b05      	subs	r3, #5
 8026b28:	221f      	movs	r2, #31
 8026b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8026b2e:	43da      	mvns	r2, r3
 8026b30:	687b      	ldr	r3, [r7, #4]
 8026b32:	681b      	ldr	r3, [r3, #0]
 8026b34:	400a      	ands	r2, r1
 8026b36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8026b38:	687b      	ldr	r3, [r7, #4]
 8026b3a:	681b      	ldr	r3, [r3, #0]
 8026b3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8026b3e:	683b      	ldr	r3, [r7, #0]
 8026b40:	681b      	ldr	r3, [r3, #0]
 8026b42:	b29b      	uxth	r3, r3
 8026b44:	4618      	mov	r0, r3
 8026b46:	683b      	ldr	r3, [r7, #0]
 8026b48:	685a      	ldr	r2, [r3, #4]
 8026b4a:	4613      	mov	r3, r2
 8026b4c:	009b      	lsls	r3, r3, #2
 8026b4e:	4413      	add	r3, r2
 8026b50:	3b05      	subs	r3, #5
 8026b52:	fa00 f203 	lsl.w	r2, r0, r3
 8026b56:	687b      	ldr	r3, [r7, #4]
 8026b58:	681b      	ldr	r3, [r3, #0]
 8026b5a:	430a      	orrs	r2, r1
 8026b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8026b5e:	e04c      	b.n	8026bfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8026b60:	683b      	ldr	r3, [r7, #0]
 8026b62:	685b      	ldr	r3, [r3, #4]
 8026b64:	2b0c      	cmp	r3, #12
 8026b66:	d824      	bhi.n	8026bb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8026b68:	687b      	ldr	r3, [r7, #4]
 8026b6a:	681b      	ldr	r3, [r3, #0]
 8026b6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8026b6e:	683b      	ldr	r3, [r7, #0]
 8026b70:	685a      	ldr	r2, [r3, #4]
 8026b72:	4613      	mov	r3, r2
 8026b74:	009b      	lsls	r3, r3, #2
 8026b76:	4413      	add	r3, r2
 8026b78:	3b23      	subs	r3, #35	; 0x23
 8026b7a:	221f      	movs	r2, #31
 8026b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8026b80:	43da      	mvns	r2, r3
 8026b82:	687b      	ldr	r3, [r7, #4]
 8026b84:	681b      	ldr	r3, [r3, #0]
 8026b86:	400a      	ands	r2, r1
 8026b88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8026b8a:	687b      	ldr	r3, [r7, #4]
 8026b8c:	681b      	ldr	r3, [r3, #0]
 8026b8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8026b90:	683b      	ldr	r3, [r7, #0]
 8026b92:	681b      	ldr	r3, [r3, #0]
 8026b94:	b29b      	uxth	r3, r3
 8026b96:	4618      	mov	r0, r3
 8026b98:	683b      	ldr	r3, [r7, #0]
 8026b9a:	685a      	ldr	r2, [r3, #4]
 8026b9c:	4613      	mov	r3, r2
 8026b9e:	009b      	lsls	r3, r3, #2
 8026ba0:	4413      	add	r3, r2
 8026ba2:	3b23      	subs	r3, #35	; 0x23
 8026ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8026ba8:	687b      	ldr	r3, [r7, #4]
 8026baa:	681b      	ldr	r3, [r3, #0]
 8026bac:	430a      	orrs	r2, r1
 8026bae:	631a      	str	r2, [r3, #48]	; 0x30
 8026bb0:	e023      	b.n	8026bfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8026bb2:	687b      	ldr	r3, [r7, #4]
 8026bb4:	681b      	ldr	r3, [r3, #0]
 8026bb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026bb8:	683b      	ldr	r3, [r7, #0]
 8026bba:	685a      	ldr	r2, [r3, #4]
 8026bbc:	4613      	mov	r3, r2
 8026bbe:	009b      	lsls	r3, r3, #2
 8026bc0:	4413      	add	r3, r2
 8026bc2:	3b41      	subs	r3, #65	; 0x41
 8026bc4:	221f      	movs	r2, #31
 8026bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8026bca:	43da      	mvns	r2, r3
 8026bcc:	687b      	ldr	r3, [r7, #4]
 8026bce:	681b      	ldr	r3, [r3, #0]
 8026bd0:	400a      	ands	r2, r1
 8026bd2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8026bd4:	687b      	ldr	r3, [r7, #4]
 8026bd6:	681b      	ldr	r3, [r3, #0]
 8026bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026bda:	683b      	ldr	r3, [r7, #0]
 8026bdc:	681b      	ldr	r3, [r3, #0]
 8026bde:	b29b      	uxth	r3, r3
 8026be0:	4618      	mov	r0, r3
 8026be2:	683b      	ldr	r3, [r7, #0]
 8026be4:	685a      	ldr	r2, [r3, #4]
 8026be6:	4613      	mov	r3, r2
 8026be8:	009b      	lsls	r3, r3, #2
 8026bea:	4413      	add	r3, r2
 8026bec:	3b41      	subs	r3, #65	; 0x41
 8026bee:	fa00 f203 	lsl.w	r2, r0, r3
 8026bf2:	687b      	ldr	r3, [r7, #4]
 8026bf4:	681b      	ldr	r3, [r3, #0]
 8026bf6:	430a      	orrs	r2, r1
 8026bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026bfa:	4b22      	ldr	r3, [pc, #136]	; (8026c84 <HAL_ADC_ConfigChannel+0x234>)
 8026bfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8026bfe:	687b      	ldr	r3, [r7, #4]
 8026c00:	681b      	ldr	r3, [r3, #0]
 8026c02:	4a21      	ldr	r2, [pc, #132]	; (8026c88 <HAL_ADC_ConfigChannel+0x238>)
 8026c04:	4293      	cmp	r3, r2
 8026c06:	d109      	bne.n	8026c1c <HAL_ADC_ConfigChannel+0x1cc>
 8026c08:	683b      	ldr	r3, [r7, #0]
 8026c0a:	681b      	ldr	r3, [r3, #0]
 8026c0c:	2b12      	cmp	r3, #18
 8026c0e:	d105      	bne.n	8026c1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8026c10:	68fb      	ldr	r3, [r7, #12]
 8026c12:	685b      	ldr	r3, [r3, #4]
 8026c14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8026c18:	68fb      	ldr	r3, [r7, #12]
 8026c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8026c1c:	687b      	ldr	r3, [r7, #4]
 8026c1e:	681b      	ldr	r3, [r3, #0]
 8026c20:	4a19      	ldr	r2, [pc, #100]	; (8026c88 <HAL_ADC_ConfigChannel+0x238>)
 8026c22:	4293      	cmp	r3, r2
 8026c24:	d123      	bne.n	8026c6e <HAL_ADC_ConfigChannel+0x21e>
 8026c26:	683b      	ldr	r3, [r7, #0]
 8026c28:	681b      	ldr	r3, [r3, #0]
 8026c2a:	2b10      	cmp	r3, #16
 8026c2c:	d003      	beq.n	8026c36 <HAL_ADC_ConfigChannel+0x1e6>
 8026c2e:	683b      	ldr	r3, [r7, #0]
 8026c30:	681b      	ldr	r3, [r3, #0]
 8026c32:	2b11      	cmp	r3, #17
 8026c34:	d11b      	bne.n	8026c6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8026c36:	68fb      	ldr	r3, [r7, #12]
 8026c38:	685b      	ldr	r3, [r3, #4]
 8026c3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8026c3e:	68fb      	ldr	r3, [r7, #12]
 8026c40:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8026c42:	683b      	ldr	r3, [r7, #0]
 8026c44:	681b      	ldr	r3, [r3, #0]
 8026c46:	2b10      	cmp	r3, #16
 8026c48:	d111      	bne.n	8026c6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8026c4a:	4b10      	ldr	r3, [pc, #64]	; (8026c8c <HAL_ADC_ConfigChannel+0x23c>)
 8026c4c:	681b      	ldr	r3, [r3, #0]
 8026c4e:	4a10      	ldr	r2, [pc, #64]	; (8026c90 <HAL_ADC_ConfigChannel+0x240>)
 8026c50:	fba2 2303 	umull	r2, r3, r2, r3
 8026c54:	0c9a      	lsrs	r2, r3, #18
 8026c56:	4613      	mov	r3, r2
 8026c58:	009b      	lsls	r3, r3, #2
 8026c5a:	4413      	add	r3, r2
 8026c5c:	005b      	lsls	r3, r3, #1
 8026c5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8026c60:	e002      	b.n	8026c68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8026c62:	68bb      	ldr	r3, [r7, #8]
 8026c64:	3b01      	subs	r3, #1
 8026c66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8026c68:	68bb      	ldr	r3, [r7, #8]
 8026c6a:	2b00      	cmp	r3, #0
 8026c6c:	d1f9      	bne.n	8026c62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8026c6e:	687b      	ldr	r3, [r7, #4]
 8026c70:	2200      	movs	r2, #0
 8026c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8026c76:	2300      	movs	r3, #0
}
 8026c78:	4618      	mov	r0, r3
 8026c7a:	3714      	adds	r7, #20
 8026c7c:	46bd      	mov	sp, r7
 8026c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c82:	4770      	bx	lr
 8026c84:	40012300 	.word	0x40012300
 8026c88:	40012000 	.word	0x40012000
 8026c8c:	20000010 	.word	0x20000010
 8026c90:	431bde83 	.word	0x431bde83

08026c94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8026c94:	b480      	push	{r7}
 8026c96:	b085      	sub	sp, #20
 8026c98:	af00      	add	r7, sp, #0
 8026c9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026c9c:	4b79      	ldr	r3, [pc, #484]	; (8026e84 <ADC_Init+0x1f0>)
 8026c9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8026ca0:	68fb      	ldr	r3, [r7, #12]
 8026ca2:	685b      	ldr	r3, [r3, #4]
 8026ca4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8026ca8:	68fb      	ldr	r3, [r7, #12]
 8026caa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8026cac:	68fb      	ldr	r3, [r7, #12]
 8026cae:	685a      	ldr	r2, [r3, #4]
 8026cb0:	687b      	ldr	r3, [r7, #4]
 8026cb2:	685b      	ldr	r3, [r3, #4]
 8026cb4:	431a      	orrs	r2, r3
 8026cb6:	68fb      	ldr	r3, [r7, #12]
 8026cb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8026cba:	687b      	ldr	r3, [r7, #4]
 8026cbc:	681b      	ldr	r3, [r3, #0]
 8026cbe:	685a      	ldr	r2, [r3, #4]
 8026cc0:	687b      	ldr	r3, [r7, #4]
 8026cc2:	681b      	ldr	r3, [r3, #0]
 8026cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8026cc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8026cca:	687b      	ldr	r3, [r7, #4]
 8026ccc:	681b      	ldr	r3, [r3, #0]
 8026cce:	6859      	ldr	r1, [r3, #4]
 8026cd0:	687b      	ldr	r3, [r7, #4]
 8026cd2:	691b      	ldr	r3, [r3, #16]
 8026cd4:	021a      	lsls	r2, r3, #8
 8026cd6:	687b      	ldr	r3, [r7, #4]
 8026cd8:	681b      	ldr	r3, [r3, #0]
 8026cda:	430a      	orrs	r2, r1
 8026cdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8026cde:	687b      	ldr	r3, [r7, #4]
 8026ce0:	681b      	ldr	r3, [r3, #0]
 8026ce2:	685a      	ldr	r2, [r3, #4]
 8026ce4:	687b      	ldr	r3, [r7, #4]
 8026ce6:	681b      	ldr	r3, [r3, #0]
 8026ce8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8026cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8026cee:	687b      	ldr	r3, [r7, #4]
 8026cf0:	681b      	ldr	r3, [r3, #0]
 8026cf2:	6859      	ldr	r1, [r3, #4]
 8026cf4:	687b      	ldr	r3, [r7, #4]
 8026cf6:	689a      	ldr	r2, [r3, #8]
 8026cf8:	687b      	ldr	r3, [r7, #4]
 8026cfa:	681b      	ldr	r3, [r3, #0]
 8026cfc:	430a      	orrs	r2, r1
 8026cfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8026d00:	687b      	ldr	r3, [r7, #4]
 8026d02:	681b      	ldr	r3, [r3, #0]
 8026d04:	689a      	ldr	r2, [r3, #8]
 8026d06:	687b      	ldr	r3, [r7, #4]
 8026d08:	681b      	ldr	r3, [r3, #0]
 8026d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8026d0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8026d10:	687b      	ldr	r3, [r7, #4]
 8026d12:	681b      	ldr	r3, [r3, #0]
 8026d14:	6899      	ldr	r1, [r3, #8]
 8026d16:	687b      	ldr	r3, [r7, #4]
 8026d18:	68da      	ldr	r2, [r3, #12]
 8026d1a:	687b      	ldr	r3, [r7, #4]
 8026d1c:	681b      	ldr	r3, [r3, #0]
 8026d1e:	430a      	orrs	r2, r1
 8026d20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8026d22:	687b      	ldr	r3, [r7, #4]
 8026d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026d26:	4a58      	ldr	r2, [pc, #352]	; (8026e88 <ADC_Init+0x1f4>)
 8026d28:	4293      	cmp	r3, r2
 8026d2a:	d022      	beq.n	8026d72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8026d2c:	687b      	ldr	r3, [r7, #4]
 8026d2e:	681b      	ldr	r3, [r3, #0]
 8026d30:	689a      	ldr	r2, [r3, #8]
 8026d32:	687b      	ldr	r3, [r7, #4]
 8026d34:	681b      	ldr	r3, [r3, #0]
 8026d36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8026d3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8026d3c:	687b      	ldr	r3, [r7, #4]
 8026d3e:	681b      	ldr	r3, [r3, #0]
 8026d40:	6899      	ldr	r1, [r3, #8]
 8026d42:	687b      	ldr	r3, [r7, #4]
 8026d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026d46:	687b      	ldr	r3, [r7, #4]
 8026d48:	681b      	ldr	r3, [r3, #0]
 8026d4a:	430a      	orrs	r2, r1
 8026d4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8026d4e:	687b      	ldr	r3, [r7, #4]
 8026d50:	681b      	ldr	r3, [r3, #0]
 8026d52:	689a      	ldr	r2, [r3, #8]
 8026d54:	687b      	ldr	r3, [r7, #4]
 8026d56:	681b      	ldr	r3, [r3, #0]
 8026d58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8026d5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8026d5e:	687b      	ldr	r3, [r7, #4]
 8026d60:	681b      	ldr	r3, [r3, #0]
 8026d62:	6899      	ldr	r1, [r3, #8]
 8026d64:	687b      	ldr	r3, [r7, #4]
 8026d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026d68:	687b      	ldr	r3, [r7, #4]
 8026d6a:	681b      	ldr	r3, [r3, #0]
 8026d6c:	430a      	orrs	r2, r1
 8026d6e:	609a      	str	r2, [r3, #8]
 8026d70:	e00f      	b.n	8026d92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8026d72:	687b      	ldr	r3, [r7, #4]
 8026d74:	681b      	ldr	r3, [r3, #0]
 8026d76:	689a      	ldr	r2, [r3, #8]
 8026d78:	687b      	ldr	r3, [r7, #4]
 8026d7a:	681b      	ldr	r3, [r3, #0]
 8026d7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8026d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8026d82:	687b      	ldr	r3, [r7, #4]
 8026d84:	681b      	ldr	r3, [r3, #0]
 8026d86:	689a      	ldr	r2, [r3, #8]
 8026d88:	687b      	ldr	r3, [r7, #4]
 8026d8a:	681b      	ldr	r3, [r3, #0]
 8026d8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8026d90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8026d92:	687b      	ldr	r3, [r7, #4]
 8026d94:	681b      	ldr	r3, [r3, #0]
 8026d96:	689a      	ldr	r2, [r3, #8]
 8026d98:	687b      	ldr	r3, [r7, #4]
 8026d9a:	681b      	ldr	r3, [r3, #0]
 8026d9c:	f022 0202 	bic.w	r2, r2, #2
 8026da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8026da2:	687b      	ldr	r3, [r7, #4]
 8026da4:	681b      	ldr	r3, [r3, #0]
 8026da6:	6899      	ldr	r1, [r3, #8]
 8026da8:	687b      	ldr	r3, [r7, #4]
 8026daa:	7e1b      	ldrb	r3, [r3, #24]
 8026dac:	005a      	lsls	r2, r3, #1
 8026dae:	687b      	ldr	r3, [r7, #4]
 8026db0:	681b      	ldr	r3, [r3, #0]
 8026db2:	430a      	orrs	r2, r1
 8026db4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8026db6:	687b      	ldr	r3, [r7, #4]
 8026db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8026dbc:	2b00      	cmp	r3, #0
 8026dbe:	d01b      	beq.n	8026df8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8026dc0:	687b      	ldr	r3, [r7, #4]
 8026dc2:	681b      	ldr	r3, [r3, #0]
 8026dc4:	685a      	ldr	r2, [r3, #4]
 8026dc6:	687b      	ldr	r3, [r7, #4]
 8026dc8:	681b      	ldr	r3, [r3, #0]
 8026dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8026dce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8026dd0:	687b      	ldr	r3, [r7, #4]
 8026dd2:	681b      	ldr	r3, [r3, #0]
 8026dd4:	685a      	ldr	r2, [r3, #4]
 8026dd6:	687b      	ldr	r3, [r7, #4]
 8026dd8:	681b      	ldr	r3, [r3, #0]
 8026dda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8026dde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8026de0:	687b      	ldr	r3, [r7, #4]
 8026de2:	681b      	ldr	r3, [r3, #0]
 8026de4:	6859      	ldr	r1, [r3, #4]
 8026de6:	687b      	ldr	r3, [r7, #4]
 8026de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026dea:	3b01      	subs	r3, #1
 8026dec:	035a      	lsls	r2, r3, #13
 8026dee:	687b      	ldr	r3, [r7, #4]
 8026df0:	681b      	ldr	r3, [r3, #0]
 8026df2:	430a      	orrs	r2, r1
 8026df4:	605a      	str	r2, [r3, #4]
 8026df6:	e007      	b.n	8026e08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8026df8:	687b      	ldr	r3, [r7, #4]
 8026dfa:	681b      	ldr	r3, [r3, #0]
 8026dfc:	685a      	ldr	r2, [r3, #4]
 8026dfe:	687b      	ldr	r3, [r7, #4]
 8026e00:	681b      	ldr	r3, [r3, #0]
 8026e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8026e06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8026e08:	687b      	ldr	r3, [r7, #4]
 8026e0a:	681b      	ldr	r3, [r3, #0]
 8026e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026e0e:	687b      	ldr	r3, [r7, #4]
 8026e10:	681b      	ldr	r3, [r3, #0]
 8026e12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8026e16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8026e18:	687b      	ldr	r3, [r7, #4]
 8026e1a:	681b      	ldr	r3, [r3, #0]
 8026e1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026e1e:	687b      	ldr	r3, [r7, #4]
 8026e20:	69db      	ldr	r3, [r3, #28]
 8026e22:	3b01      	subs	r3, #1
 8026e24:	051a      	lsls	r2, r3, #20
 8026e26:	687b      	ldr	r3, [r7, #4]
 8026e28:	681b      	ldr	r3, [r3, #0]
 8026e2a:	430a      	orrs	r2, r1
 8026e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8026e2e:	687b      	ldr	r3, [r7, #4]
 8026e30:	681b      	ldr	r3, [r3, #0]
 8026e32:	689a      	ldr	r2, [r3, #8]
 8026e34:	687b      	ldr	r3, [r7, #4]
 8026e36:	681b      	ldr	r3, [r3, #0]
 8026e38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8026e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8026e3e:	687b      	ldr	r3, [r7, #4]
 8026e40:	681b      	ldr	r3, [r3, #0]
 8026e42:	6899      	ldr	r1, [r3, #8]
 8026e44:	687b      	ldr	r3, [r7, #4]
 8026e46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8026e4a:	025a      	lsls	r2, r3, #9
 8026e4c:	687b      	ldr	r3, [r7, #4]
 8026e4e:	681b      	ldr	r3, [r3, #0]
 8026e50:	430a      	orrs	r2, r1
 8026e52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8026e54:	687b      	ldr	r3, [r7, #4]
 8026e56:	681b      	ldr	r3, [r3, #0]
 8026e58:	689a      	ldr	r2, [r3, #8]
 8026e5a:	687b      	ldr	r3, [r7, #4]
 8026e5c:	681b      	ldr	r3, [r3, #0]
 8026e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8026e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8026e64:	687b      	ldr	r3, [r7, #4]
 8026e66:	681b      	ldr	r3, [r3, #0]
 8026e68:	6899      	ldr	r1, [r3, #8]
 8026e6a:	687b      	ldr	r3, [r7, #4]
 8026e6c:	695b      	ldr	r3, [r3, #20]
 8026e6e:	029a      	lsls	r2, r3, #10
 8026e70:	687b      	ldr	r3, [r7, #4]
 8026e72:	681b      	ldr	r3, [r3, #0]
 8026e74:	430a      	orrs	r2, r1
 8026e76:	609a      	str	r2, [r3, #8]
}
 8026e78:	bf00      	nop
 8026e7a:	3714      	adds	r7, #20
 8026e7c:	46bd      	mov	sp, r7
 8026e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e82:	4770      	bx	lr
 8026e84:	40012300 	.word	0x40012300
 8026e88:	0f000001 	.word	0x0f000001

08026e8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026e8c:	b580      	push	{r7, lr}
 8026e8e:	b084      	sub	sp, #16
 8026e90:	af00      	add	r7, sp, #0
 8026e92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026e94:	687b      	ldr	r3, [r7, #4]
 8026e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026e98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8026e9a:	68fb      	ldr	r3, [r7, #12]
 8026e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8026ea2:	2b00      	cmp	r3, #0
 8026ea4:	d13c      	bne.n	8026f20 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8026ea6:	68fb      	ldr	r3, [r7, #12]
 8026ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026eaa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8026eae:	68fb      	ldr	r3, [r7, #12]
 8026eb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8026eb2:	68fb      	ldr	r3, [r7, #12]
 8026eb4:	681b      	ldr	r3, [r3, #0]
 8026eb6:	689b      	ldr	r3, [r3, #8]
 8026eb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8026ebc:	2b00      	cmp	r3, #0
 8026ebe:	d12b      	bne.n	8026f18 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8026ec0:	68fb      	ldr	r3, [r7, #12]
 8026ec2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8026ec4:	2b00      	cmp	r3, #0
 8026ec6:	d127      	bne.n	8026f18 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8026ec8:	68fb      	ldr	r3, [r7, #12]
 8026eca:	681b      	ldr	r3, [r3, #0]
 8026ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026ece:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8026ed2:	2b00      	cmp	r3, #0
 8026ed4:	d006      	beq.n	8026ee4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8026ed6:	68fb      	ldr	r3, [r7, #12]
 8026ed8:	681b      	ldr	r3, [r3, #0]
 8026eda:	689b      	ldr	r3, [r3, #8]
 8026edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8026ee0:	2b00      	cmp	r3, #0
 8026ee2:	d119      	bne.n	8026f18 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8026ee4:	68fb      	ldr	r3, [r7, #12]
 8026ee6:	681b      	ldr	r3, [r3, #0]
 8026ee8:	685a      	ldr	r2, [r3, #4]
 8026eea:	68fb      	ldr	r3, [r7, #12]
 8026eec:	681b      	ldr	r3, [r3, #0]
 8026eee:	f022 0220 	bic.w	r2, r2, #32
 8026ef2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8026ef4:	68fb      	ldr	r3, [r7, #12]
 8026ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026ef8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8026efc:	68fb      	ldr	r3, [r7, #12]
 8026efe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8026f00:	68fb      	ldr	r3, [r7, #12]
 8026f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026f08:	2b00      	cmp	r3, #0
 8026f0a:	d105      	bne.n	8026f18 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8026f0c:	68fb      	ldr	r3, [r7, #12]
 8026f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026f10:	f043 0201 	orr.w	r2, r3, #1
 8026f14:	68fb      	ldr	r3, [r7, #12]
 8026f16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8026f18:	68f8      	ldr	r0, [r7, #12]
 8026f1a:	f7ff fd7b 	bl	8026a14 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8026f1e:	e00e      	b.n	8026f3e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8026f20:	68fb      	ldr	r3, [r7, #12]
 8026f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026f24:	f003 0310 	and.w	r3, r3, #16
 8026f28:	2b00      	cmp	r3, #0
 8026f2a:	d003      	beq.n	8026f34 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8026f2c:	68f8      	ldr	r0, [r7, #12]
 8026f2e:	f7ff fd85 	bl	8026a3c <HAL_ADC_ErrorCallback>
}
 8026f32:	e004      	b.n	8026f3e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8026f34:	68fb      	ldr	r3, [r7, #12]
 8026f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8026f3a:	6878      	ldr	r0, [r7, #4]
 8026f3c:	4798      	blx	r3
}
 8026f3e:	bf00      	nop
 8026f40:	3710      	adds	r7, #16
 8026f42:	46bd      	mov	sp, r7
 8026f44:	bd80      	pop	{r7, pc}

08026f46 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026f46:	b580      	push	{r7, lr}
 8026f48:	b084      	sub	sp, #16
 8026f4a:	af00      	add	r7, sp, #0
 8026f4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026f4e:	687b      	ldr	r3, [r7, #4]
 8026f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026f52:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8026f54:	68f8      	ldr	r0, [r7, #12]
 8026f56:	f7ff fd67 	bl	8026a28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026f5a:	bf00      	nop
 8026f5c:	3710      	adds	r7, #16
 8026f5e:	46bd      	mov	sp, r7
 8026f60:	bd80      	pop	{r7, pc}

08026f62 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8026f62:	b580      	push	{r7, lr}
 8026f64:	b084      	sub	sp, #16
 8026f66:	af00      	add	r7, sp, #0
 8026f68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026f6a:	687b      	ldr	r3, [r7, #4]
 8026f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026f6e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8026f70:	68fb      	ldr	r3, [r7, #12]
 8026f72:	2240      	movs	r2, #64	; 0x40
 8026f74:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8026f76:	68fb      	ldr	r3, [r7, #12]
 8026f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026f7a:	f043 0204 	orr.w	r2, r3, #4
 8026f7e:	68fb      	ldr	r3, [r7, #12]
 8026f80:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8026f82:	68f8      	ldr	r0, [r7, #12]
 8026f84:	f7ff fd5a 	bl	8026a3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026f88:	bf00      	nop
 8026f8a:	3710      	adds	r7, #16
 8026f8c:	46bd      	mov	sp, r7
 8026f8e:	bd80      	pop	{r7, pc}

08026f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026f90:	b480      	push	{r7}
 8026f92:	b085      	sub	sp, #20
 8026f94:	af00      	add	r7, sp, #0
 8026f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8026f98:	687b      	ldr	r3, [r7, #4]
 8026f9a:	f003 0307 	and.w	r3, r3, #7
 8026f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8026fa0:	4b0c      	ldr	r3, [pc, #48]	; (8026fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8026fa2:	68db      	ldr	r3, [r3, #12]
 8026fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8026fa6:	68ba      	ldr	r2, [r7, #8]
 8026fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8026fac:	4013      	ands	r3, r2
 8026fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8026fb0:	68fb      	ldr	r3, [r7, #12]
 8026fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8026fb4:	68bb      	ldr	r3, [r7, #8]
 8026fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8026fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8026fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8026fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8026fc2:	4a04      	ldr	r2, [pc, #16]	; (8026fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8026fc4:	68bb      	ldr	r3, [r7, #8]
 8026fc6:	60d3      	str	r3, [r2, #12]
}
 8026fc8:	bf00      	nop
 8026fca:	3714      	adds	r7, #20
 8026fcc:	46bd      	mov	sp, r7
 8026fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fd2:	4770      	bx	lr
 8026fd4:	e000ed00 	.word	0xe000ed00

08026fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8026fd8:	b480      	push	{r7}
 8026fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8026fdc:	4b04      	ldr	r3, [pc, #16]	; (8026ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8026fde:	68db      	ldr	r3, [r3, #12]
 8026fe0:	0a1b      	lsrs	r3, r3, #8
 8026fe2:	f003 0307 	and.w	r3, r3, #7
}
 8026fe6:	4618      	mov	r0, r3
 8026fe8:	46bd      	mov	sp, r7
 8026fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fee:	4770      	bx	lr
 8026ff0:	e000ed00 	.word	0xe000ed00

08026ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026ff4:	b480      	push	{r7}
 8026ff6:	b083      	sub	sp, #12
 8026ff8:	af00      	add	r7, sp, #0
 8026ffa:	4603      	mov	r3, r0
 8026ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027002:	2b00      	cmp	r3, #0
 8027004:	db0b      	blt.n	802701e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8027006:	79fb      	ldrb	r3, [r7, #7]
 8027008:	f003 021f 	and.w	r2, r3, #31
 802700c:	4907      	ldr	r1, [pc, #28]	; (802702c <__NVIC_EnableIRQ+0x38>)
 802700e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027012:	095b      	lsrs	r3, r3, #5
 8027014:	2001      	movs	r0, #1
 8027016:	fa00 f202 	lsl.w	r2, r0, r2
 802701a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 802701e:	bf00      	nop
 8027020:	370c      	adds	r7, #12
 8027022:	46bd      	mov	sp, r7
 8027024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027028:	4770      	bx	lr
 802702a:	bf00      	nop
 802702c:	e000e100 	.word	0xe000e100

08027030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8027030:	b480      	push	{r7}
 8027032:	b083      	sub	sp, #12
 8027034:	af00      	add	r7, sp, #0
 8027036:	4603      	mov	r3, r0
 8027038:	6039      	str	r1, [r7, #0]
 802703a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802703c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027040:	2b00      	cmp	r3, #0
 8027042:	db0a      	blt.n	802705a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8027044:	683b      	ldr	r3, [r7, #0]
 8027046:	b2da      	uxtb	r2, r3
 8027048:	490c      	ldr	r1, [pc, #48]	; (802707c <__NVIC_SetPriority+0x4c>)
 802704a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802704e:	0112      	lsls	r2, r2, #4
 8027050:	b2d2      	uxtb	r2, r2
 8027052:	440b      	add	r3, r1
 8027054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8027058:	e00a      	b.n	8027070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802705a:	683b      	ldr	r3, [r7, #0]
 802705c:	b2da      	uxtb	r2, r3
 802705e:	4908      	ldr	r1, [pc, #32]	; (8027080 <__NVIC_SetPriority+0x50>)
 8027060:	79fb      	ldrb	r3, [r7, #7]
 8027062:	f003 030f 	and.w	r3, r3, #15
 8027066:	3b04      	subs	r3, #4
 8027068:	0112      	lsls	r2, r2, #4
 802706a:	b2d2      	uxtb	r2, r2
 802706c:	440b      	add	r3, r1
 802706e:	761a      	strb	r2, [r3, #24]
}
 8027070:	bf00      	nop
 8027072:	370c      	adds	r7, #12
 8027074:	46bd      	mov	sp, r7
 8027076:	f85d 7b04 	ldr.w	r7, [sp], #4
 802707a:	4770      	bx	lr
 802707c:	e000e100 	.word	0xe000e100
 8027080:	e000ed00 	.word	0xe000ed00

08027084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8027084:	b480      	push	{r7}
 8027086:	b089      	sub	sp, #36	; 0x24
 8027088:	af00      	add	r7, sp, #0
 802708a:	60f8      	str	r0, [r7, #12]
 802708c:	60b9      	str	r1, [r7, #8]
 802708e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8027090:	68fb      	ldr	r3, [r7, #12]
 8027092:	f003 0307 	and.w	r3, r3, #7
 8027096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8027098:	69fb      	ldr	r3, [r7, #28]
 802709a:	f1c3 0307 	rsb	r3, r3, #7
 802709e:	2b04      	cmp	r3, #4
 80270a0:	bf28      	it	cs
 80270a2:	2304      	movcs	r3, #4
 80270a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80270a6:	69fb      	ldr	r3, [r7, #28]
 80270a8:	3304      	adds	r3, #4
 80270aa:	2b06      	cmp	r3, #6
 80270ac:	d902      	bls.n	80270b4 <NVIC_EncodePriority+0x30>
 80270ae:	69fb      	ldr	r3, [r7, #28]
 80270b0:	3b03      	subs	r3, #3
 80270b2:	e000      	b.n	80270b6 <NVIC_EncodePriority+0x32>
 80270b4:	2300      	movs	r3, #0
 80270b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80270b8:	f04f 32ff 	mov.w	r2, #4294967295
 80270bc:	69bb      	ldr	r3, [r7, #24]
 80270be:	fa02 f303 	lsl.w	r3, r2, r3
 80270c2:	43da      	mvns	r2, r3
 80270c4:	68bb      	ldr	r3, [r7, #8]
 80270c6:	401a      	ands	r2, r3
 80270c8:	697b      	ldr	r3, [r7, #20]
 80270ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80270cc:	f04f 31ff 	mov.w	r1, #4294967295
 80270d0:	697b      	ldr	r3, [r7, #20]
 80270d2:	fa01 f303 	lsl.w	r3, r1, r3
 80270d6:	43d9      	mvns	r1, r3
 80270d8:	687b      	ldr	r3, [r7, #4]
 80270da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80270dc:	4313      	orrs	r3, r2
         );
}
 80270de:	4618      	mov	r0, r3
 80270e0:	3724      	adds	r7, #36	; 0x24
 80270e2:	46bd      	mov	sp, r7
 80270e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270e8:	4770      	bx	lr
	...

080270ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80270ec:	b580      	push	{r7, lr}
 80270ee:	b082      	sub	sp, #8
 80270f0:	af00      	add	r7, sp, #0
 80270f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80270f4:	687b      	ldr	r3, [r7, #4]
 80270f6:	3b01      	subs	r3, #1
 80270f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80270fc:	d301      	bcc.n	8027102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80270fe:	2301      	movs	r3, #1
 8027100:	e00f      	b.n	8027122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8027102:	4a0a      	ldr	r2, [pc, #40]	; (802712c <SysTick_Config+0x40>)
 8027104:	687b      	ldr	r3, [r7, #4]
 8027106:	3b01      	subs	r3, #1
 8027108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802710a:	210f      	movs	r1, #15
 802710c:	f04f 30ff 	mov.w	r0, #4294967295
 8027110:	f7ff ff8e 	bl	8027030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8027114:	4b05      	ldr	r3, [pc, #20]	; (802712c <SysTick_Config+0x40>)
 8027116:	2200      	movs	r2, #0
 8027118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802711a:	4b04      	ldr	r3, [pc, #16]	; (802712c <SysTick_Config+0x40>)
 802711c:	2207      	movs	r2, #7
 802711e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8027120:	2300      	movs	r3, #0
}
 8027122:	4618      	mov	r0, r3
 8027124:	3708      	adds	r7, #8
 8027126:	46bd      	mov	sp, r7
 8027128:	bd80      	pop	{r7, pc}
 802712a:	bf00      	nop
 802712c:	e000e010 	.word	0xe000e010

08027130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8027130:	b580      	push	{r7, lr}
 8027132:	b082      	sub	sp, #8
 8027134:	af00      	add	r7, sp, #0
 8027136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8027138:	6878      	ldr	r0, [r7, #4]
 802713a:	f7ff ff29 	bl	8026f90 <__NVIC_SetPriorityGrouping>
}
 802713e:	bf00      	nop
 8027140:	3708      	adds	r7, #8
 8027142:	46bd      	mov	sp, r7
 8027144:	bd80      	pop	{r7, pc}

08027146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8027146:	b580      	push	{r7, lr}
 8027148:	b086      	sub	sp, #24
 802714a:	af00      	add	r7, sp, #0
 802714c:	4603      	mov	r3, r0
 802714e:	60b9      	str	r1, [r7, #8]
 8027150:	607a      	str	r2, [r7, #4]
 8027152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8027154:	2300      	movs	r3, #0
 8027156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8027158:	f7ff ff3e 	bl	8026fd8 <__NVIC_GetPriorityGrouping>
 802715c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802715e:	687a      	ldr	r2, [r7, #4]
 8027160:	68b9      	ldr	r1, [r7, #8]
 8027162:	6978      	ldr	r0, [r7, #20]
 8027164:	f7ff ff8e 	bl	8027084 <NVIC_EncodePriority>
 8027168:	4602      	mov	r2, r0
 802716a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802716e:	4611      	mov	r1, r2
 8027170:	4618      	mov	r0, r3
 8027172:	f7ff ff5d 	bl	8027030 <__NVIC_SetPriority>
}
 8027176:	bf00      	nop
 8027178:	3718      	adds	r7, #24
 802717a:	46bd      	mov	sp, r7
 802717c:	bd80      	pop	{r7, pc}

0802717e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802717e:	b580      	push	{r7, lr}
 8027180:	b082      	sub	sp, #8
 8027182:	af00      	add	r7, sp, #0
 8027184:	4603      	mov	r3, r0
 8027186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8027188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802718c:	4618      	mov	r0, r3
 802718e:	f7ff ff31 	bl	8026ff4 <__NVIC_EnableIRQ>
}
 8027192:	bf00      	nop
 8027194:	3708      	adds	r7, #8
 8027196:	46bd      	mov	sp, r7
 8027198:	bd80      	pop	{r7, pc}

0802719a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802719a:	b580      	push	{r7, lr}
 802719c:	b082      	sub	sp, #8
 802719e:	af00      	add	r7, sp, #0
 80271a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80271a2:	6878      	ldr	r0, [r7, #4]
 80271a4:	f7ff ffa2 	bl	80270ec <SysTick_Config>
 80271a8:	4603      	mov	r3, r0
}
 80271aa:	4618      	mov	r0, r3
 80271ac:	3708      	adds	r7, #8
 80271ae:	46bd      	mov	sp, r7
 80271b0:	bd80      	pop	{r7, pc}
	...

080271b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80271b4:	b580      	push	{r7, lr}
 80271b6:	b086      	sub	sp, #24
 80271b8:	af00      	add	r7, sp, #0
 80271ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80271bc:	2300      	movs	r3, #0
 80271be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80271c0:	f7ff fac4 	bl	802674c <HAL_GetTick>
 80271c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80271c6:	687b      	ldr	r3, [r7, #4]
 80271c8:	2b00      	cmp	r3, #0
 80271ca:	d101      	bne.n	80271d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80271cc:	2301      	movs	r3, #1
 80271ce:	e099      	b.n	8027304 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80271d0:	687b      	ldr	r3, [r7, #4]
 80271d2:	2200      	movs	r2, #0
 80271d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80271d8:	687b      	ldr	r3, [r7, #4]
 80271da:	2202      	movs	r2, #2
 80271dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80271e0:	687b      	ldr	r3, [r7, #4]
 80271e2:	681b      	ldr	r3, [r3, #0]
 80271e4:	681a      	ldr	r2, [r3, #0]
 80271e6:	687b      	ldr	r3, [r7, #4]
 80271e8:	681b      	ldr	r3, [r3, #0]
 80271ea:	f022 0201 	bic.w	r2, r2, #1
 80271ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80271f0:	e00f      	b.n	8027212 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80271f2:	f7ff faab 	bl	802674c <HAL_GetTick>
 80271f6:	4602      	mov	r2, r0
 80271f8:	693b      	ldr	r3, [r7, #16]
 80271fa:	1ad3      	subs	r3, r2, r3
 80271fc:	2b05      	cmp	r3, #5
 80271fe:	d908      	bls.n	8027212 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8027200:	687b      	ldr	r3, [r7, #4]
 8027202:	2220      	movs	r2, #32
 8027204:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8027206:	687b      	ldr	r3, [r7, #4]
 8027208:	2203      	movs	r2, #3
 802720a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 802720e:	2303      	movs	r3, #3
 8027210:	e078      	b.n	8027304 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8027212:	687b      	ldr	r3, [r7, #4]
 8027214:	681b      	ldr	r3, [r3, #0]
 8027216:	681b      	ldr	r3, [r3, #0]
 8027218:	f003 0301 	and.w	r3, r3, #1
 802721c:	2b00      	cmp	r3, #0
 802721e:	d1e8      	bne.n	80271f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8027220:	687b      	ldr	r3, [r7, #4]
 8027222:	681b      	ldr	r3, [r3, #0]
 8027224:	681b      	ldr	r3, [r3, #0]
 8027226:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8027228:	697a      	ldr	r2, [r7, #20]
 802722a:	4b38      	ldr	r3, [pc, #224]	; (802730c <HAL_DMA_Init+0x158>)
 802722c:	4013      	ands	r3, r2
 802722e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8027230:	687b      	ldr	r3, [r7, #4]
 8027232:	685a      	ldr	r2, [r3, #4]
 8027234:	687b      	ldr	r3, [r7, #4]
 8027236:	689b      	ldr	r3, [r3, #8]
 8027238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802723a:	687b      	ldr	r3, [r7, #4]
 802723c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802723e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8027240:	687b      	ldr	r3, [r7, #4]
 8027242:	691b      	ldr	r3, [r3, #16]
 8027244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8027246:	687b      	ldr	r3, [r7, #4]
 8027248:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802724a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802724c:	687b      	ldr	r3, [r7, #4]
 802724e:	699b      	ldr	r3, [r3, #24]
 8027250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8027252:	687b      	ldr	r3, [r7, #4]
 8027254:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8027256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8027258:	687b      	ldr	r3, [r7, #4]
 802725a:	6a1b      	ldr	r3, [r3, #32]
 802725c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802725e:	697a      	ldr	r2, [r7, #20]
 8027260:	4313      	orrs	r3, r2
 8027262:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8027264:	687b      	ldr	r3, [r7, #4]
 8027266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027268:	2b04      	cmp	r3, #4
 802726a:	d107      	bne.n	802727c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802726c:	687b      	ldr	r3, [r7, #4]
 802726e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027270:	687b      	ldr	r3, [r7, #4]
 8027272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027274:	4313      	orrs	r3, r2
 8027276:	697a      	ldr	r2, [r7, #20]
 8027278:	4313      	orrs	r3, r2
 802727a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 802727c:	687b      	ldr	r3, [r7, #4]
 802727e:	681b      	ldr	r3, [r3, #0]
 8027280:	697a      	ldr	r2, [r7, #20]
 8027282:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8027284:	687b      	ldr	r3, [r7, #4]
 8027286:	681b      	ldr	r3, [r3, #0]
 8027288:	695b      	ldr	r3, [r3, #20]
 802728a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802728c:	697b      	ldr	r3, [r7, #20]
 802728e:	f023 0307 	bic.w	r3, r3, #7
 8027292:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8027294:	687b      	ldr	r3, [r7, #4]
 8027296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027298:	697a      	ldr	r2, [r7, #20]
 802729a:	4313      	orrs	r3, r2
 802729c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802729e:	687b      	ldr	r3, [r7, #4]
 80272a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80272a2:	2b04      	cmp	r3, #4
 80272a4:	d117      	bne.n	80272d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80272a6:	687b      	ldr	r3, [r7, #4]
 80272a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80272aa:	697a      	ldr	r2, [r7, #20]
 80272ac:	4313      	orrs	r3, r2
 80272ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80272b0:	687b      	ldr	r3, [r7, #4]
 80272b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80272b4:	2b00      	cmp	r3, #0
 80272b6:	d00e      	beq.n	80272d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80272b8:	6878      	ldr	r0, [r7, #4]
 80272ba:	f000 fa6f 	bl	802779c <DMA_CheckFifoParam>
 80272be:	4603      	mov	r3, r0
 80272c0:	2b00      	cmp	r3, #0
 80272c2:	d008      	beq.n	80272d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80272c4:	687b      	ldr	r3, [r7, #4]
 80272c6:	2240      	movs	r2, #64	; 0x40
 80272c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80272ca:	687b      	ldr	r3, [r7, #4]
 80272cc:	2201      	movs	r2, #1
 80272ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80272d2:	2301      	movs	r3, #1
 80272d4:	e016      	b.n	8027304 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80272d6:	687b      	ldr	r3, [r7, #4]
 80272d8:	681b      	ldr	r3, [r3, #0]
 80272da:	697a      	ldr	r2, [r7, #20]
 80272dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80272de:	6878      	ldr	r0, [r7, #4]
 80272e0:	f000 fa26 	bl	8027730 <DMA_CalcBaseAndBitshift>
 80272e4:	4603      	mov	r3, r0
 80272e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80272e8:	687b      	ldr	r3, [r7, #4]
 80272ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80272ec:	223f      	movs	r2, #63	; 0x3f
 80272ee:	409a      	lsls	r2, r3
 80272f0:	68fb      	ldr	r3, [r7, #12]
 80272f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80272f4:	687b      	ldr	r3, [r7, #4]
 80272f6:	2200      	movs	r2, #0
 80272f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80272fa:	687b      	ldr	r3, [r7, #4]
 80272fc:	2201      	movs	r2, #1
 80272fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8027302:	2300      	movs	r3, #0
}
 8027304:	4618      	mov	r0, r3
 8027306:	3718      	adds	r7, #24
 8027308:	46bd      	mov	sp, r7
 802730a:	bd80      	pop	{r7, pc}
 802730c:	f010803f 	.word	0xf010803f

08027310 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8027310:	b580      	push	{r7, lr}
 8027312:	b086      	sub	sp, #24
 8027314:	af00      	add	r7, sp, #0
 8027316:	60f8      	str	r0, [r7, #12]
 8027318:	60b9      	str	r1, [r7, #8]
 802731a:	607a      	str	r2, [r7, #4]
 802731c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802731e:	2300      	movs	r3, #0
 8027320:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8027322:	68fb      	ldr	r3, [r7, #12]
 8027324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027326:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8027328:	68fb      	ldr	r3, [r7, #12]
 802732a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802732e:	2b01      	cmp	r3, #1
 8027330:	d101      	bne.n	8027336 <HAL_DMA_Start_IT+0x26>
 8027332:	2302      	movs	r3, #2
 8027334:	e040      	b.n	80273b8 <HAL_DMA_Start_IT+0xa8>
 8027336:	68fb      	ldr	r3, [r7, #12]
 8027338:	2201      	movs	r2, #1
 802733a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 802733e:	68fb      	ldr	r3, [r7, #12]
 8027340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8027344:	b2db      	uxtb	r3, r3
 8027346:	2b01      	cmp	r3, #1
 8027348:	d12f      	bne.n	80273aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802734a:	68fb      	ldr	r3, [r7, #12]
 802734c:	2202      	movs	r2, #2
 802734e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8027352:	68fb      	ldr	r3, [r7, #12]
 8027354:	2200      	movs	r2, #0
 8027356:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8027358:	683b      	ldr	r3, [r7, #0]
 802735a:	687a      	ldr	r2, [r7, #4]
 802735c:	68b9      	ldr	r1, [r7, #8]
 802735e:	68f8      	ldr	r0, [r7, #12]
 8027360:	f000 f9b8 	bl	80276d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8027364:	68fb      	ldr	r3, [r7, #12]
 8027366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027368:	223f      	movs	r2, #63	; 0x3f
 802736a:	409a      	lsls	r2, r3
 802736c:	693b      	ldr	r3, [r7, #16]
 802736e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8027370:	68fb      	ldr	r3, [r7, #12]
 8027372:	681b      	ldr	r3, [r3, #0]
 8027374:	681a      	ldr	r2, [r3, #0]
 8027376:	68fb      	ldr	r3, [r7, #12]
 8027378:	681b      	ldr	r3, [r3, #0]
 802737a:	f042 0216 	orr.w	r2, r2, #22
 802737e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8027380:	68fb      	ldr	r3, [r7, #12]
 8027382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027384:	2b00      	cmp	r3, #0
 8027386:	d007      	beq.n	8027398 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8027388:	68fb      	ldr	r3, [r7, #12]
 802738a:	681b      	ldr	r3, [r3, #0]
 802738c:	681a      	ldr	r2, [r3, #0]
 802738e:	68fb      	ldr	r3, [r7, #12]
 8027390:	681b      	ldr	r3, [r3, #0]
 8027392:	f042 0208 	orr.w	r2, r2, #8
 8027396:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8027398:	68fb      	ldr	r3, [r7, #12]
 802739a:	681b      	ldr	r3, [r3, #0]
 802739c:	681a      	ldr	r2, [r3, #0]
 802739e:	68fb      	ldr	r3, [r7, #12]
 80273a0:	681b      	ldr	r3, [r3, #0]
 80273a2:	f042 0201 	orr.w	r2, r2, #1
 80273a6:	601a      	str	r2, [r3, #0]
 80273a8:	e005      	b.n	80273b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80273aa:	68fb      	ldr	r3, [r7, #12]
 80273ac:	2200      	movs	r2, #0
 80273ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80273b2:	2302      	movs	r3, #2
 80273b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80273b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80273b8:	4618      	mov	r0, r3
 80273ba:	3718      	adds	r7, #24
 80273bc:	46bd      	mov	sp, r7
 80273be:	bd80      	pop	{r7, pc}

080273c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80273c0:	b580      	push	{r7, lr}
 80273c2:	b086      	sub	sp, #24
 80273c4:	af00      	add	r7, sp, #0
 80273c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80273c8:	2300      	movs	r3, #0
 80273ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80273cc:	4b92      	ldr	r3, [pc, #584]	; (8027618 <HAL_DMA_IRQHandler+0x258>)
 80273ce:	681b      	ldr	r3, [r3, #0]
 80273d0:	4a92      	ldr	r2, [pc, #584]	; (802761c <HAL_DMA_IRQHandler+0x25c>)
 80273d2:	fba2 2303 	umull	r2, r3, r2, r3
 80273d6:	0a9b      	lsrs	r3, r3, #10
 80273d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80273da:	687b      	ldr	r3, [r7, #4]
 80273dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80273de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80273e0:	693b      	ldr	r3, [r7, #16]
 80273e2:	681b      	ldr	r3, [r3, #0]
 80273e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80273e6:	687b      	ldr	r3, [r7, #4]
 80273e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80273ea:	2208      	movs	r2, #8
 80273ec:	409a      	lsls	r2, r3
 80273ee:	68fb      	ldr	r3, [r7, #12]
 80273f0:	4013      	ands	r3, r2
 80273f2:	2b00      	cmp	r3, #0
 80273f4:	d01a      	beq.n	802742c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80273f6:	687b      	ldr	r3, [r7, #4]
 80273f8:	681b      	ldr	r3, [r3, #0]
 80273fa:	681b      	ldr	r3, [r3, #0]
 80273fc:	f003 0304 	and.w	r3, r3, #4
 8027400:	2b00      	cmp	r3, #0
 8027402:	d013      	beq.n	802742c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8027404:	687b      	ldr	r3, [r7, #4]
 8027406:	681b      	ldr	r3, [r3, #0]
 8027408:	681a      	ldr	r2, [r3, #0]
 802740a:	687b      	ldr	r3, [r7, #4]
 802740c:	681b      	ldr	r3, [r3, #0]
 802740e:	f022 0204 	bic.w	r2, r2, #4
 8027412:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8027414:	687b      	ldr	r3, [r7, #4]
 8027416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027418:	2208      	movs	r2, #8
 802741a:	409a      	lsls	r2, r3
 802741c:	693b      	ldr	r3, [r7, #16]
 802741e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8027420:	687b      	ldr	r3, [r7, #4]
 8027422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027424:	f043 0201 	orr.w	r2, r3, #1
 8027428:	687b      	ldr	r3, [r7, #4]
 802742a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 802742c:	687b      	ldr	r3, [r7, #4]
 802742e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027430:	2201      	movs	r2, #1
 8027432:	409a      	lsls	r2, r3
 8027434:	68fb      	ldr	r3, [r7, #12]
 8027436:	4013      	ands	r3, r2
 8027438:	2b00      	cmp	r3, #0
 802743a:	d012      	beq.n	8027462 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 802743c:	687b      	ldr	r3, [r7, #4]
 802743e:	681b      	ldr	r3, [r3, #0]
 8027440:	695b      	ldr	r3, [r3, #20]
 8027442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027446:	2b00      	cmp	r3, #0
 8027448:	d00b      	beq.n	8027462 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 802744a:	687b      	ldr	r3, [r7, #4]
 802744c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802744e:	2201      	movs	r2, #1
 8027450:	409a      	lsls	r2, r3
 8027452:	693b      	ldr	r3, [r7, #16]
 8027454:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8027456:	687b      	ldr	r3, [r7, #4]
 8027458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802745a:	f043 0202 	orr.w	r2, r3, #2
 802745e:	687b      	ldr	r3, [r7, #4]
 8027460:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8027462:	687b      	ldr	r3, [r7, #4]
 8027464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027466:	2204      	movs	r2, #4
 8027468:	409a      	lsls	r2, r3
 802746a:	68fb      	ldr	r3, [r7, #12]
 802746c:	4013      	ands	r3, r2
 802746e:	2b00      	cmp	r3, #0
 8027470:	d012      	beq.n	8027498 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8027472:	687b      	ldr	r3, [r7, #4]
 8027474:	681b      	ldr	r3, [r3, #0]
 8027476:	681b      	ldr	r3, [r3, #0]
 8027478:	f003 0302 	and.w	r3, r3, #2
 802747c:	2b00      	cmp	r3, #0
 802747e:	d00b      	beq.n	8027498 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8027480:	687b      	ldr	r3, [r7, #4]
 8027482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027484:	2204      	movs	r2, #4
 8027486:	409a      	lsls	r2, r3
 8027488:	693b      	ldr	r3, [r7, #16]
 802748a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 802748c:	687b      	ldr	r3, [r7, #4]
 802748e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027490:	f043 0204 	orr.w	r2, r3, #4
 8027494:	687b      	ldr	r3, [r7, #4]
 8027496:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8027498:	687b      	ldr	r3, [r7, #4]
 802749a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802749c:	2210      	movs	r2, #16
 802749e:	409a      	lsls	r2, r3
 80274a0:	68fb      	ldr	r3, [r7, #12]
 80274a2:	4013      	ands	r3, r2
 80274a4:	2b00      	cmp	r3, #0
 80274a6:	d043      	beq.n	8027530 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80274a8:	687b      	ldr	r3, [r7, #4]
 80274aa:	681b      	ldr	r3, [r3, #0]
 80274ac:	681b      	ldr	r3, [r3, #0]
 80274ae:	f003 0308 	and.w	r3, r3, #8
 80274b2:	2b00      	cmp	r3, #0
 80274b4:	d03c      	beq.n	8027530 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80274b6:	687b      	ldr	r3, [r7, #4]
 80274b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80274ba:	2210      	movs	r2, #16
 80274bc:	409a      	lsls	r2, r3
 80274be:	693b      	ldr	r3, [r7, #16]
 80274c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80274c2:	687b      	ldr	r3, [r7, #4]
 80274c4:	681b      	ldr	r3, [r3, #0]
 80274c6:	681b      	ldr	r3, [r3, #0]
 80274c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80274cc:	2b00      	cmp	r3, #0
 80274ce:	d018      	beq.n	8027502 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80274d0:	687b      	ldr	r3, [r7, #4]
 80274d2:	681b      	ldr	r3, [r3, #0]
 80274d4:	681b      	ldr	r3, [r3, #0]
 80274d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80274da:	2b00      	cmp	r3, #0
 80274dc:	d108      	bne.n	80274f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80274de:	687b      	ldr	r3, [r7, #4]
 80274e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80274e2:	2b00      	cmp	r3, #0
 80274e4:	d024      	beq.n	8027530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80274e6:	687b      	ldr	r3, [r7, #4]
 80274e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80274ea:	6878      	ldr	r0, [r7, #4]
 80274ec:	4798      	blx	r3
 80274ee:	e01f      	b.n	8027530 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80274f0:	687b      	ldr	r3, [r7, #4]
 80274f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80274f4:	2b00      	cmp	r3, #0
 80274f6:	d01b      	beq.n	8027530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80274f8:	687b      	ldr	r3, [r7, #4]
 80274fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80274fc:	6878      	ldr	r0, [r7, #4]
 80274fe:	4798      	blx	r3
 8027500:	e016      	b.n	8027530 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8027502:	687b      	ldr	r3, [r7, #4]
 8027504:	681b      	ldr	r3, [r3, #0]
 8027506:	681b      	ldr	r3, [r3, #0]
 8027508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802750c:	2b00      	cmp	r3, #0
 802750e:	d107      	bne.n	8027520 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8027510:	687b      	ldr	r3, [r7, #4]
 8027512:	681b      	ldr	r3, [r3, #0]
 8027514:	681a      	ldr	r2, [r3, #0]
 8027516:	687b      	ldr	r3, [r7, #4]
 8027518:	681b      	ldr	r3, [r3, #0]
 802751a:	f022 0208 	bic.w	r2, r2, #8
 802751e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8027520:	687b      	ldr	r3, [r7, #4]
 8027522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027524:	2b00      	cmp	r3, #0
 8027526:	d003      	beq.n	8027530 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8027528:	687b      	ldr	r3, [r7, #4]
 802752a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802752c:	6878      	ldr	r0, [r7, #4]
 802752e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8027530:	687b      	ldr	r3, [r7, #4]
 8027532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027534:	2220      	movs	r2, #32
 8027536:	409a      	lsls	r2, r3
 8027538:	68fb      	ldr	r3, [r7, #12]
 802753a:	4013      	ands	r3, r2
 802753c:	2b00      	cmp	r3, #0
 802753e:	f000 808e 	beq.w	802765e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8027542:	687b      	ldr	r3, [r7, #4]
 8027544:	681b      	ldr	r3, [r3, #0]
 8027546:	681b      	ldr	r3, [r3, #0]
 8027548:	f003 0310 	and.w	r3, r3, #16
 802754c:	2b00      	cmp	r3, #0
 802754e:	f000 8086 	beq.w	802765e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8027552:	687b      	ldr	r3, [r7, #4]
 8027554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027556:	2220      	movs	r2, #32
 8027558:	409a      	lsls	r2, r3
 802755a:	693b      	ldr	r3, [r7, #16]
 802755c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 802755e:	687b      	ldr	r3, [r7, #4]
 8027560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8027564:	b2db      	uxtb	r3, r3
 8027566:	2b05      	cmp	r3, #5
 8027568:	d136      	bne.n	80275d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802756a:	687b      	ldr	r3, [r7, #4]
 802756c:	681b      	ldr	r3, [r3, #0]
 802756e:	681a      	ldr	r2, [r3, #0]
 8027570:	687b      	ldr	r3, [r7, #4]
 8027572:	681b      	ldr	r3, [r3, #0]
 8027574:	f022 0216 	bic.w	r2, r2, #22
 8027578:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 802757a:	687b      	ldr	r3, [r7, #4]
 802757c:	681b      	ldr	r3, [r3, #0]
 802757e:	695a      	ldr	r2, [r3, #20]
 8027580:	687b      	ldr	r3, [r7, #4]
 8027582:	681b      	ldr	r3, [r3, #0]
 8027584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8027588:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802758a:	687b      	ldr	r3, [r7, #4]
 802758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802758e:	2b00      	cmp	r3, #0
 8027590:	d103      	bne.n	802759a <HAL_DMA_IRQHandler+0x1da>
 8027592:	687b      	ldr	r3, [r7, #4]
 8027594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027596:	2b00      	cmp	r3, #0
 8027598:	d007      	beq.n	80275aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802759a:	687b      	ldr	r3, [r7, #4]
 802759c:	681b      	ldr	r3, [r3, #0]
 802759e:	681a      	ldr	r2, [r3, #0]
 80275a0:	687b      	ldr	r3, [r7, #4]
 80275a2:	681b      	ldr	r3, [r3, #0]
 80275a4:	f022 0208 	bic.w	r2, r2, #8
 80275a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80275aa:	687b      	ldr	r3, [r7, #4]
 80275ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80275ae:	223f      	movs	r2, #63	; 0x3f
 80275b0:	409a      	lsls	r2, r3
 80275b2:	693b      	ldr	r3, [r7, #16]
 80275b4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80275b6:	687b      	ldr	r3, [r7, #4]
 80275b8:	2200      	movs	r2, #0
 80275ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80275be:	687b      	ldr	r3, [r7, #4]
 80275c0:	2201      	movs	r2, #1
 80275c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80275c6:	687b      	ldr	r3, [r7, #4]
 80275c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80275ca:	2b00      	cmp	r3, #0
 80275cc:	d07d      	beq.n	80276ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80275ce:	687b      	ldr	r3, [r7, #4]
 80275d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80275d2:	6878      	ldr	r0, [r7, #4]
 80275d4:	4798      	blx	r3
        }
        return;
 80275d6:	e078      	b.n	80276ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80275d8:	687b      	ldr	r3, [r7, #4]
 80275da:	681b      	ldr	r3, [r3, #0]
 80275dc:	681b      	ldr	r3, [r3, #0]
 80275de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80275e2:	2b00      	cmp	r3, #0
 80275e4:	d01c      	beq.n	8027620 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80275e6:	687b      	ldr	r3, [r7, #4]
 80275e8:	681b      	ldr	r3, [r3, #0]
 80275ea:	681b      	ldr	r3, [r3, #0]
 80275ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80275f0:	2b00      	cmp	r3, #0
 80275f2:	d108      	bne.n	8027606 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80275f4:	687b      	ldr	r3, [r7, #4]
 80275f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80275f8:	2b00      	cmp	r3, #0
 80275fa:	d030      	beq.n	802765e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80275fc:	687b      	ldr	r3, [r7, #4]
 80275fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027600:	6878      	ldr	r0, [r7, #4]
 8027602:	4798      	blx	r3
 8027604:	e02b      	b.n	802765e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8027606:	687b      	ldr	r3, [r7, #4]
 8027608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802760a:	2b00      	cmp	r3, #0
 802760c:	d027      	beq.n	802765e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 802760e:	687b      	ldr	r3, [r7, #4]
 8027610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027612:	6878      	ldr	r0, [r7, #4]
 8027614:	4798      	blx	r3
 8027616:	e022      	b.n	802765e <HAL_DMA_IRQHandler+0x29e>
 8027618:	20000010 	.word	0x20000010
 802761c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8027620:	687b      	ldr	r3, [r7, #4]
 8027622:	681b      	ldr	r3, [r3, #0]
 8027624:	681b      	ldr	r3, [r3, #0]
 8027626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802762a:	2b00      	cmp	r3, #0
 802762c:	d10f      	bne.n	802764e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 802762e:	687b      	ldr	r3, [r7, #4]
 8027630:	681b      	ldr	r3, [r3, #0]
 8027632:	681a      	ldr	r2, [r3, #0]
 8027634:	687b      	ldr	r3, [r7, #4]
 8027636:	681b      	ldr	r3, [r3, #0]
 8027638:	f022 0210 	bic.w	r2, r2, #16
 802763c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802763e:	687b      	ldr	r3, [r7, #4]
 8027640:	2200      	movs	r2, #0
 8027642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8027646:	687b      	ldr	r3, [r7, #4]
 8027648:	2201      	movs	r2, #1
 802764a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 802764e:	687b      	ldr	r3, [r7, #4]
 8027650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027652:	2b00      	cmp	r3, #0
 8027654:	d003      	beq.n	802765e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8027656:	687b      	ldr	r3, [r7, #4]
 8027658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802765a:	6878      	ldr	r0, [r7, #4]
 802765c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802765e:	687b      	ldr	r3, [r7, #4]
 8027660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027662:	2b00      	cmp	r3, #0
 8027664:	d032      	beq.n	80276cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8027666:	687b      	ldr	r3, [r7, #4]
 8027668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802766a:	f003 0301 	and.w	r3, r3, #1
 802766e:	2b00      	cmp	r3, #0
 8027670:	d022      	beq.n	80276b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8027672:	687b      	ldr	r3, [r7, #4]
 8027674:	2205      	movs	r2, #5
 8027676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802767a:	687b      	ldr	r3, [r7, #4]
 802767c:	681b      	ldr	r3, [r3, #0]
 802767e:	681a      	ldr	r2, [r3, #0]
 8027680:	687b      	ldr	r3, [r7, #4]
 8027682:	681b      	ldr	r3, [r3, #0]
 8027684:	f022 0201 	bic.w	r2, r2, #1
 8027688:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 802768a:	68bb      	ldr	r3, [r7, #8]
 802768c:	3301      	adds	r3, #1
 802768e:	60bb      	str	r3, [r7, #8]
 8027690:	697a      	ldr	r2, [r7, #20]
 8027692:	429a      	cmp	r2, r3
 8027694:	d307      	bcc.n	80276a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8027696:	687b      	ldr	r3, [r7, #4]
 8027698:	681b      	ldr	r3, [r3, #0]
 802769a:	681b      	ldr	r3, [r3, #0]
 802769c:	f003 0301 	and.w	r3, r3, #1
 80276a0:	2b00      	cmp	r3, #0
 80276a2:	d1f2      	bne.n	802768a <HAL_DMA_IRQHandler+0x2ca>
 80276a4:	e000      	b.n	80276a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80276a6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80276a8:	687b      	ldr	r3, [r7, #4]
 80276aa:	2200      	movs	r2, #0
 80276ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80276b0:	687b      	ldr	r3, [r7, #4]
 80276b2:	2201      	movs	r2, #1
 80276b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80276b8:	687b      	ldr	r3, [r7, #4]
 80276ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80276bc:	2b00      	cmp	r3, #0
 80276be:	d005      	beq.n	80276cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80276c0:	687b      	ldr	r3, [r7, #4]
 80276c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80276c4:	6878      	ldr	r0, [r7, #4]
 80276c6:	4798      	blx	r3
 80276c8:	e000      	b.n	80276cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80276ca:	bf00      	nop
    }
  }
}
 80276cc:	3718      	adds	r7, #24
 80276ce:	46bd      	mov	sp, r7
 80276d0:	bd80      	pop	{r7, pc}
 80276d2:	bf00      	nop

080276d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80276d4:	b480      	push	{r7}
 80276d6:	b085      	sub	sp, #20
 80276d8:	af00      	add	r7, sp, #0
 80276da:	60f8      	str	r0, [r7, #12]
 80276dc:	60b9      	str	r1, [r7, #8]
 80276de:	607a      	str	r2, [r7, #4]
 80276e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80276e2:	68fb      	ldr	r3, [r7, #12]
 80276e4:	681b      	ldr	r3, [r3, #0]
 80276e6:	681a      	ldr	r2, [r3, #0]
 80276e8:	68fb      	ldr	r3, [r7, #12]
 80276ea:	681b      	ldr	r3, [r3, #0]
 80276ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80276f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80276f2:	68fb      	ldr	r3, [r7, #12]
 80276f4:	681b      	ldr	r3, [r3, #0]
 80276f6:	683a      	ldr	r2, [r7, #0]
 80276f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80276fa:	68fb      	ldr	r3, [r7, #12]
 80276fc:	689b      	ldr	r3, [r3, #8]
 80276fe:	2b40      	cmp	r3, #64	; 0x40
 8027700:	d108      	bne.n	8027714 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8027702:	68fb      	ldr	r3, [r7, #12]
 8027704:	681b      	ldr	r3, [r3, #0]
 8027706:	687a      	ldr	r2, [r7, #4]
 8027708:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 802770a:	68fb      	ldr	r3, [r7, #12]
 802770c:	681b      	ldr	r3, [r3, #0]
 802770e:	68ba      	ldr	r2, [r7, #8]
 8027710:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8027712:	e007      	b.n	8027724 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8027714:	68fb      	ldr	r3, [r7, #12]
 8027716:	681b      	ldr	r3, [r3, #0]
 8027718:	68ba      	ldr	r2, [r7, #8]
 802771a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 802771c:	68fb      	ldr	r3, [r7, #12]
 802771e:	681b      	ldr	r3, [r3, #0]
 8027720:	687a      	ldr	r2, [r7, #4]
 8027722:	60da      	str	r2, [r3, #12]
}
 8027724:	bf00      	nop
 8027726:	3714      	adds	r7, #20
 8027728:	46bd      	mov	sp, r7
 802772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802772e:	4770      	bx	lr

08027730 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8027730:	b480      	push	{r7}
 8027732:	b085      	sub	sp, #20
 8027734:	af00      	add	r7, sp, #0
 8027736:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8027738:	687b      	ldr	r3, [r7, #4]
 802773a:	681b      	ldr	r3, [r3, #0]
 802773c:	b2db      	uxtb	r3, r3
 802773e:	3b10      	subs	r3, #16
 8027740:	4a14      	ldr	r2, [pc, #80]	; (8027794 <DMA_CalcBaseAndBitshift+0x64>)
 8027742:	fba2 2303 	umull	r2, r3, r2, r3
 8027746:	091b      	lsrs	r3, r3, #4
 8027748:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802774a:	4a13      	ldr	r2, [pc, #76]	; (8027798 <DMA_CalcBaseAndBitshift+0x68>)
 802774c:	68fb      	ldr	r3, [r7, #12]
 802774e:	4413      	add	r3, r2
 8027750:	781b      	ldrb	r3, [r3, #0]
 8027752:	461a      	mov	r2, r3
 8027754:	687b      	ldr	r3, [r7, #4]
 8027756:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8027758:	68fb      	ldr	r3, [r7, #12]
 802775a:	2b03      	cmp	r3, #3
 802775c:	d909      	bls.n	8027772 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802775e:	687b      	ldr	r3, [r7, #4]
 8027760:	681b      	ldr	r3, [r3, #0]
 8027762:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8027766:	f023 0303 	bic.w	r3, r3, #3
 802776a:	1d1a      	adds	r2, r3, #4
 802776c:	687b      	ldr	r3, [r7, #4]
 802776e:	659a      	str	r2, [r3, #88]	; 0x58
 8027770:	e007      	b.n	8027782 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8027772:	687b      	ldr	r3, [r7, #4]
 8027774:	681b      	ldr	r3, [r3, #0]
 8027776:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802777a:	f023 0303 	bic.w	r3, r3, #3
 802777e:	687a      	ldr	r2, [r7, #4]
 8027780:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8027782:	687b      	ldr	r3, [r7, #4]
 8027784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8027786:	4618      	mov	r0, r3
 8027788:	3714      	adds	r7, #20
 802778a:	46bd      	mov	sp, r7
 802778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027790:	4770      	bx	lr
 8027792:	bf00      	nop
 8027794:	aaaaaaab 	.word	0xaaaaaaab
 8027798:	0802a840 	.word	0x0802a840

0802779c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802779c:	b480      	push	{r7}
 802779e:	b085      	sub	sp, #20
 80277a0:	af00      	add	r7, sp, #0
 80277a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80277a4:	2300      	movs	r3, #0
 80277a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80277a8:	687b      	ldr	r3, [r7, #4]
 80277aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80277ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80277ae:	687b      	ldr	r3, [r7, #4]
 80277b0:	699b      	ldr	r3, [r3, #24]
 80277b2:	2b00      	cmp	r3, #0
 80277b4:	d11f      	bne.n	80277f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80277b6:	68bb      	ldr	r3, [r7, #8]
 80277b8:	2b03      	cmp	r3, #3
 80277ba:	d855      	bhi.n	8027868 <DMA_CheckFifoParam+0xcc>
 80277bc:	a201      	add	r2, pc, #4	; (adr r2, 80277c4 <DMA_CheckFifoParam+0x28>)
 80277be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80277c2:	bf00      	nop
 80277c4:	080277d5 	.word	0x080277d5
 80277c8:	080277e7 	.word	0x080277e7
 80277cc:	080277d5 	.word	0x080277d5
 80277d0:	08027869 	.word	0x08027869
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80277d4:	687b      	ldr	r3, [r7, #4]
 80277d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80277d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80277dc:	2b00      	cmp	r3, #0
 80277de:	d045      	beq.n	802786c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80277e0:	2301      	movs	r3, #1
 80277e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80277e4:	e042      	b.n	802786c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80277e6:	687b      	ldr	r3, [r7, #4]
 80277e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80277ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80277ee:	d13f      	bne.n	8027870 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80277f0:	2301      	movs	r3, #1
 80277f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80277f4:	e03c      	b.n	8027870 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80277f6:	687b      	ldr	r3, [r7, #4]
 80277f8:	699b      	ldr	r3, [r3, #24]
 80277fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80277fe:	d121      	bne.n	8027844 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8027800:	68bb      	ldr	r3, [r7, #8]
 8027802:	2b03      	cmp	r3, #3
 8027804:	d836      	bhi.n	8027874 <DMA_CheckFifoParam+0xd8>
 8027806:	a201      	add	r2, pc, #4	; (adr r2, 802780c <DMA_CheckFifoParam+0x70>)
 8027808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802780c:	0802781d 	.word	0x0802781d
 8027810:	08027823 	.word	0x08027823
 8027814:	0802781d 	.word	0x0802781d
 8027818:	08027835 	.word	0x08027835
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 802781c:	2301      	movs	r3, #1
 802781e:	73fb      	strb	r3, [r7, #15]
      break;
 8027820:	e02f      	b.n	8027882 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8027822:	687b      	ldr	r3, [r7, #4]
 8027824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802782a:	2b00      	cmp	r3, #0
 802782c:	d024      	beq.n	8027878 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 802782e:	2301      	movs	r3, #1
 8027830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027832:	e021      	b.n	8027878 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8027834:	687b      	ldr	r3, [r7, #4]
 8027836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027838:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802783c:	d11e      	bne.n	802787c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 802783e:	2301      	movs	r3, #1
 8027840:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8027842:	e01b      	b.n	802787c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8027844:	68bb      	ldr	r3, [r7, #8]
 8027846:	2b02      	cmp	r3, #2
 8027848:	d902      	bls.n	8027850 <DMA_CheckFifoParam+0xb4>
 802784a:	2b03      	cmp	r3, #3
 802784c:	d003      	beq.n	8027856 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 802784e:	e018      	b.n	8027882 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8027850:	2301      	movs	r3, #1
 8027852:	73fb      	strb	r3, [r7, #15]
      break;
 8027854:	e015      	b.n	8027882 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8027856:	687b      	ldr	r3, [r7, #4]
 8027858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802785a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802785e:	2b00      	cmp	r3, #0
 8027860:	d00e      	beq.n	8027880 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8027862:	2301      	movs	r3, #1
 8027864:	73fb      	strb	r3, [r7, #15]
      break;
 8027866:	e00b      	b.n	8027880 <DMA_CheckFifoParam+0xe4>
      break;
 8027868:	bf00      	nop
 802786a:	e00a      	b.n	8027882 <DMA_CheckFifoParam+0xe6>
      break;
 802786c:	bf00      	nop
 802786e:	e008      	b.n	8027882 <DMA_CheckFifoParam+0xe6>
      break;
 8027870:	bf00      	nop
 8027872:	e006      	b.n	8027882 <DMA_CheckFifoParam+0xe6>
      break;
 8027874:	bf00      	nop
 8027876:	e004      	b.n	8027882 <DMA_CheckFifoParam+0xe6>
      break;
 8027878:	bf00      	nop
 802787a:	e002      	b.n	8027882 <DMA_CheckFifoParam+0xe6>
      break;   
 802787c:	bf00      	nop
 802787e:	e000      	b.n	8027882 <DMA_CheckFifoParam+0xe6>
      break;
 8027880:	bf00      	nop
    }
  } 
  
  return status; 
 8027882:	7bfb      	ldrb	r3, [r7, #15]
}
 8027884:	4618      	mov	r0, r3
 8027886:	3714      	adds	r7, #20
 8027888:	46bd      	mov	sp, r7
 802788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802788e:	4770      	bx	lr

08027890 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8027890:	b580      	push	{r7, lr}
 8027892:	b086      	sub	sp, #24
 8027894:	af00      	add	r7, sp, #0
 8027896:	60f8      	str	r0, [r7, #12]
 8027898:	60b9      	str	r1, [r7, #8]
 802789a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 802789e:	2301      	movs	r3, #1
 80278a0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80278a2:	4b23      	ldr	r3, [pc, #140]	; (8027930 <HAL_FLASH_Program+0xa0>)
 80278a4:	7e1b      	ldrb	r3, [r3, #24]
 80278a6:	2b01      	cmp	r3, #1
 80278a8:	d101      	bne.n	80278ae <HAL_FLASH_Program+0x1e>
 80278aa:	2302      	movs	r3, #2
 80278ac:	e03b      	b.n	8027926 <HAL_FLASH_Program+0x96>
 80278ae:	4b20      	ldr	r3, [pc, #128]	; (8027930 <HAL_FLASH_Program+0xa0>)
 80278b0:	2201      	movs	r2, #1
 80278b2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80278b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80278b8:	f000 f870 	bl	802799c <FLASH_WaitForLastOperation>
 80278bc:	4603      	mov	r3, r0
 80278be:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80278c0:	7dfb      	ldrb	r3, [r7, #23]
 80278c2:	2b00      	cmp	r3, #0
 80278c4:	d12b      	bne.n	802791e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80278c6:	68fb      	ldr	r3, [r7, #12]
 80278c8:	2b00      	cmp	r3, #0
 80278ca:	d105      	bne.n	80278d8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80278cc:	783b      	ldrb	r3, [r7, #0]
 80278ce:	4619      	mov	r1, r3
 80278d0:	68b8      	ldr	r0, [r7, #8]
 80278d2:	f000 f919 	bl	8027b08 <FLASH_Program_Byte>
 80278d6:	e016      	b.n	8027906 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80278d8:	68fb      	ldr	r3, [r7, #12]
 80278da:	2b01      	cmp	r3, #1
 80278dc:	d105      	bne.n	80278ea <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80278de:	883b      	ldrh	r3, [r7, #0]
 80278e0:	4619      	mov	r1, r3
 80278e2:	68b8      	ldr	r0, [r7, #8]
 80278e4:	f000 f8ec 	bl	8027ac0 <FLASH_Program_HalfWord>
 80278e8:	e00d      	b.n	8027906 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80278ea:	68fb      	ldr	r3, [r7, #12]
 80278ec:	2b02      	cmp	r3, #2
 80278ee:	d105      	bne.n	80278fc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80278f0:	683b      	ldr	r3, [r7, #0]
 80278f2:	4619      	mov	r1, r3
 80278f4:	68b8      	ldr	r0, [r7, #8]
 80278f6:	f000 f8c1 	bl	8027a7c <FLASH_Program_Word>
 80278fa:	e004      	b.n	8027906 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80278fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8027900:	68b8      	ldr	r0, [r7, #8]
 8027902:	f000 f88b 	bl	8027a1c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027906:	f24c 3050 	movw	r0, #50000	; 0xc350
 802790a:	f000 f847 	bl	802799c <FLASH_WaitForLastOperation>
 802790e:	4603      	mov	r3, r0
 8027910:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8027912:	4b08      	ldr	r3, [pc, #32]	; (8027934 <HAL_FLASH_Program+0xa4>)
 8027914:	691b      	ldr	r3, [r3, #16]
 8027916:	4a07      	ldr	r2, [pc, #28]	; (8027934 <HAL_FLASH_Program+0xa4>)
 8027918:	f023 0301 	bic.w	r3, r3, #1
 802791c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802791e:	4b04      	ldr	r3, [pc, #16]	; (8027930 <HAL_FLASH_Program+0xa0>)
 8027920:	2200      	movs	r2, #0
 8027922:	761a      	strb	r2, [r3, #24]
  
  return status;
 8027924:	7dfb      	ldrb	r3, [r7, #23]
}
 8027926:	4618      	mov	r0, r3
 8027928:	3718      	adds	r7, #24
 802792a:	46bd      	mov	sp, r7
 802792c:	bd80      	pop	{r7, pc}
 802792e:	bf00      	nop
 8027930:	20000b90 	.word	0x20000b90
 8027934:	40023c00 	.word	0x40023c00

08027938 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8027938:	b480      	push	{r7}
 802793a:	b083      	sub	sp, #12
 802793c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 802793e:	2300      	movs	r3, #0
 8027940:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8027942:	4b0b      	ldr	r3, [pc, #44]	; (8027970 <HAL_FLASH_Unlock+0x38>)
 8027944:	691b      	ldr	r3, [r3, #16]
 8027946:	2b00      	cmp	r3, #0
 8027948:	da0b      	bge.n	8027962 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 802794a:	4b09      	ldr	r3, [pc, #36]	; (8027970 <HAL_FLASH_Unlock+0x38>)
 802794c:	4a09      	ldr	r2, [pc, #36]	; (8027974 <HAL_FLASH_Unlock+0x3c>)
 802794e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8027950:	4b07      	ldr	r3, [pc, #28]	; (8027970 <HAL_FLASH_Unlock+0x38>)
 8027952:	4a09      	ldr	r2, [pc, #36]	; (8027978 <HAL_FLASH_Unlock+0x40>)
 8027954:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8027956:	4b06      	ldr	r3, [pc, #24]	; (8027970 <HAL_FLASH_Unlock+0x38>)
 8027958:	691b      	ldr	r3, [r3, #16]
 802795a:	2b00      	cmp	r3, #0
 802795c:	da01      	bge.n	8027962 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 802795e:	2301      	movs	r3, #1
 8027960:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8027962:	79fb      	ldrb	r3, [r7, #7]
}
 8027964:	4618      	mov	r0, r3
 8027966:	370c      	adds	r7, #12
 8027968:	46bd      	mov	sp, r7
 802796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802796e:	4770      	bx	lr
 8027970:	40023c00 	.word	0x40023c00
 8027974:	45670123 	.word	0x45670123
 8027978:	cdef89ab 	.word	0xcdef89ab

0802797c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 802797c:	b480      	push	{r7}
 802797e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8027980:	4b05      	ldr	r3, [pc, #20]	; (8027998 <HAL_FLASH_Lock+0x1c>)
 8027982:	691b      	ldr	r3, [r3, #16]
 8027984:	4a04      	ldr	r2, [pc, #16]	; (8027998 <HAL_FLASH_Lock+0x1c>)
 8027986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802798a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 802798c:	2300      	movs	r3, #0
}
 802798e:	4618      	mov	r0, r3
 8027990:	46bd      	mov	sp, r7
 8027992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027996:	4770      	bx	lr
 8027998:	40023c00 	.word	0x40023c00

0802799c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 802799c:	b580      	push	{r7, lr}
 802799e:	b084      	sub	sp, #16
 80279a0:	af00      	add	r7, sp, #0
 80279a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80279a4:	2300      	movs	r3, #0
 80279a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80279a8:	4b1a      	ldr	r3, [pc, #104]	; (8027a14 <FLASH_WaitForLastOperation+0x78>)
 80279aa:	2200      	movs	r2, #0
 80279ac:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80279ae:	f7fe fecd 	bl	802674c <HAL_GetTick>
 80279b2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80279b4:	e010      	b.n	80279d8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80279b6:	687b      	ldr	r3, [r7, #4]
 80279b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80279bc:	d00c      	beq.n	80279d8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80279be:	687b      	ldr	r3, [r7, #4]
 80279c0:	2b00      	cmp	r3, #0
 80279c2:	d007      	beq.n	80279d4 <FLASH_WaitForLastOperation+0x38>
 80279c4:	f7fe fec2 	bl	802674c <HAL_GetTick>
 80279c8:	4602      	mov	r2, r0
 80279ca:	68fb      	ldr	r3, [r7, #12]
 80279cc:	1ad3      	subs	r3, r2, r3
 80279ce:	687a      	ldr	r2, [r7, #4]
 80279d0:	429a      	cmp	r2, r3
 80279d2:	d201      	bcs.n	80279d8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80279d4:	2303      	movs	r3, #3
 80279d6:	e019      	b.n	8027a0c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80279d8:	4b0f      	ldr	r3, [pc, #60]	; (8027a18 <FLASH_WaitForLastOperation+0x7c>)
 80279da:	68db      	ldr	r3, [r3, #12]
 80279dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80279e0:	2b00      	cmp	r3, #0
 80279e2:	d1e8      	bne.n	80279b6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80279e4:	4b0c      	ldr	r3, [pc, #48]	; (8027a18 <FLASH_WaitForLastOperation+0x7c>)
 80279e6:	68db      	ldr	r3, [r3, #12]
 80279e8:	f003 0301 	and.w	r3, r3, #1
 80279ec:	2b00      	cmp	r3, #0
 80279ee:	d002      	beq.n	80279f6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80279f0:	4b09      	ldr	r3, [pc, #36]	; (8027a18 <FLASH_WaitForLastOperation+0x7c>)
 80279f2:	2201      	movs	r2, #1
 80279f4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80279f6:	4b08      	ldr	r3, [pc, #32]	; (8027a18 <FLASH_WaitForLastOperation+0x7c>)
 80279f8:	68db      	ldr	r3, [r3, #12]
 80279fa:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80279fe:	2b00      	cmp	r3, #0
 8027a00:	d003      	beq.n	8027a0a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8027a02:	f000 f8a3 	bl	8027b4c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8027a06:	2301      	movs	r3, #1
 8027a08:	e000      	b.n	8027a0c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8027a0a:	2300      	movs	r3, #0
  
}  
 8027a0c:	4618      	mov	r0, r3
 8027a0e:	3710      	adds	r7, #16
 8027a10:	46bd      	mov	sp, r7
 8027a12:	bd80      	pop	{r7, pc}
 8027a14:	20000b90 	.word	0x20000b90
 8027a18:	40023c00 	.word	0x40023c00

08027a1c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8027a1c:	b490      	push	{r4, r7}
 8027a1e:	b084      	sub	sp, #16
 8027a20:	af00      	add	r7, sp, #0
 8027a22:	60f8      	str	r0, [r7, #12]
 8027a24:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027a28:	4b13      	ldr	r3, [pc, #76]	; (8027a78 <FLASH_Program_DoubleWord+0x5c>)
 8027a2a:	691b      	ldr	r3, [r3, #16]
 8027a2c:	4a12      	ldr	r2, [pc, #72]	; (8027a78 <FLASH_Program_DoubleWord+0x5c>)
 8027a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027a32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8027a34:	4b10      	ldr	r3, [pc, #64]	; (8027a78 <FLASH_Program_DoubleWord+0x5c>)
 8027a36:	691b      	ldr	r3, [r3, #16]
 8027a38:	4a0f      	ldr	r2, [pc, #60]	; (8027a78 <FLASH_Program_DoubleWord+0x5c>)
 8027a3a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8027a3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027a40:	4b0d      	ldr	r3, [pc, #52]	; (8027a78 <FLASH_Program_DoubleWord+0x5c>)
 8027a42:	691b      	ldr	r3, [r3, #16]
 8027a44:	4a0c      	ldr	r2, [pc, #48]	; (8027a78 <FLASH_Program_DoubleWord+0x5c>)
 8027a46:	f043 0301 	orr.w	r3, r3, #1
 8027a4a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8027a4c:	68fb      	ldr	r3, [r7, #12]
 8027a4e:	683a      	ldr	r2, [r7, #0]
 8027a50:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8027a52:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8027a56:	e9d7 1200 	ldrd	r1, r2, [r7]
 8027a5a:	f04f 0300 	mov.w	r3, #0
 8027a5e:	f04f 0400 	mov.w	r4, #0
 8027a62:	0013      	movs	r3, r2
 8027a64:	2400      	movs	r4, #0
 8027a66:	68fa      	ldr	r2, [r7, #12]
 8027a68:	3204      	adds	r2, #4
 8027a6a:	6013      	str	r3, [r2, #0]
}
 8027a6c:	bf00      	nop
 8027a6e:	3710      	adds	r7, #16
 8027a70:	46bd      	mov	sp, r7
 8027a72:	bc90      	pop	{r4, r7}
 8027a74:	4770      	bx	lr
 8027a76:	bf00      	nop
 8027a78:	40023c00 	.word	0x40023c00

08027a7c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8027a7c:	b480      	push	{r7}
 8027a7e:	b083      	sub	sp, #12
 8027a80:	af00      	add	r7, sp, #0
 8027a82:	6078      	str	r0, [r7, #4]
 8027a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027a86:	4b0d      	ldr	r3, [pc, #52]	; (8027abc <FLASH_Program_Word+0x40>)
 8027a88:	691b      	ldr	r3, [r3, #16]
 8027a8a:	4a0c      	ldr	r2, [pc, #48]	; (8027abc <FLASH_Program_Word+0x40>)
 8027a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027a90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8027a92:	4b0a      	ldr	r3, [pc, #40]	; (8027abc <FLASH_Program_Word+0x40>)
 8027a94:	691b      	ldr	r3, [r3, #16]
 8027a96:	4a09      	ldr	r2, [pc, #36]	; (8027abc <FLASH_Program_Word+0x40>)
 8027a98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027a9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027a9e:	4b07      	ldr	r3, [pc, #28]	; (8027abc <FLASH_Program_Word+0x40>)
 8027aa0:	691b      	ldr	r3, [r3, #16]
 8027aa2:	4a06      	ldr	r2, [pc, #24]	; (8027abc <FLASH_Program_Word+0x40>)
 8027aa4:	f043 0301 	orr.w	r3, r3, #1
 8027aa8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8027aaa:	687b      	ldr	r3, [r7, #4]
 8027aac:	683a      	ldr	r2, [r7, #0]
 8027aae:	601a      	str	r2, [r3, #0]
}
 8027ab0:	bf00      	nop
 8027ab2:	370c      	adds	r7, #12
 8027ab4:	46bd      	mov	sp, r7
 8027ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027aba:	4770      	bx	lr
 8027abc:	40023c00 	.word	0x40023c00

08027ac0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8027ac0:	b480      	push	{r7}
 8027ac2:	b083      	sub	sp, #12
 8027ac4:	af00      	add	r7, sp, #0
 8027ac6:	6078      	str	r0, [r7, #4]
 8027ac8:	460b      	mov	r3, r1
 8027aca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027acc:	4b0d      	ldr	r3, [pc, #52]	; (8027b04 <FLASH_Program_HalfWord+0x44>)
 8027ace:	691b      	ldr	r3, [r3, #16]
 8027ad0:	4a0c      	ldr	r2, [pc, #48]	; (8027b04 <FLASH_Program_HalfWord+0x44>)
 8027ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027ad6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8027ad8:	4b0a      	ldr	r3, [pc, #40]	; (8027b04 <FLASH_Program_HalfWord+0x44>)
 8027ada:	691b      	ldr	r3, [r3, #16]
 8027adc:	4a09      	ldr	r2, [pc, #36]	; (8027b04 <FLASH_Program_HalfWord+0x44>)
 8027ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027ae2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027ae4:	4b07      	ldr	r3, [pc, #28]	; (8027b04 <FLASH_Program_HalfWord+0x44>)
 8027ae6:	691b      	ldr	r3, [r3, #16]
 8027ae8:	4a06      	ldr	r2, [pc, #24]	; (8027b04 <FLASH_Program_HalfWord+0x44>)
 8027aea:	f043 0301 	orr.w	r3, r3, #1
 8027aee:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8027af0:	687b      	ldr	r3, [r7, #4]
 8027af2:	887a      	ldrh	r2, [r7, #2]
 8027af4:	801a      	strh	r2, [r3, #0]
}
 8027af6:	bf00      	nop
 8027af8:	370c      	adds	r7, #12
 8027afa:	46bd      	mov	sp, r7
 8027afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b00:	4770      	bx	lr
 8027b02:	bf00      	nop
 8027b04:	40023c00 	.word	0x40023c00

08027b08 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8027b08:	b480      	push	{r7}
 8027b0a:	b083      	sub	sp, #12
 8027b0c:	af00      	add	r7, sp, #0
 8027b0e:	6078      	str	r0, [r7, #4]
 8027b10:	460b      	mov	r3, r1
 8027b12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027b14:	4b0c      	ldr	r3, [pc, #48]	; (8027b48 <FLASH_Program_Byte+0x40>)
 8027b16:	691b      	ldr	r3, [r3, #16]
 8027b18:	4a0b      	ldr	r2, [pc, #44]	; (8027b48 <FLASH_Program_Byte+0x40>)
 8027b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027b1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8027b20:	4b09      	ldr	r3, [pc, #36]	; (8027b48 <FLASH_Program_Byte+0x40>)
 8027b22:	4a09      	ldr	r2, [pc, #36]	; (8027b48 <FLASH_Program_Byte+0x40>)
 8027b24:	691b      	ldr	r3, [r3, #16]
 8027b26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027b28:	4b07      	ldr	r3, [pc, #28]	; (8027b48 <FLASH_Program_Byte+0x40>)
 8027b2a:	691b      	ldr	r3, [r3, #16]
 8027b2c:	4a06      	ldr	r2, [pc, #24]	; (8027b48 <FLASH_Program_Byte+0x40>)
 8027b2e:	f043 0301 	orr.w	r3, r3, #1
 8027b32:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8027b34:	687b      	ldr	r3, [r7, #4]
 8027b36:	78fa      	ldrb	r2, [r7, #3]
 8027b38:	701a      	strb	r2, [r3, #0]
}
 8027b3a:	bf00      	nop
 8027b3c:	370c      	adds	r7, #12
 8027b3e:	46bd      	mov	sp, r7
 8027b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b44:	4770      	bx	lr
 8027b46:	bf00      	nop
 8027b48:	40023c00 	.word	0x40023c00

08027b4c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8027b4c:	b480      	push	{r7}
 8027b4e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8027b50:	4b27      	ldr	r3, [pc, #156]	; (8027bf0 <FLASH_SetErrorCode+0xa4>)
 8027b52:	68db      	ldr	r3, [r3, #12]
 8027b54:	f003 0310 	and.w	r3, r3, #16
 8027b58:	2b00      	cmp	r3, #0
 8027b5a:	d008      	beq.n	8027b6e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8027b5c:	4b25      	ldr	r3, [pc, #148]	; (8027bf4 <FLASH_SetErrorCode+0xa8>)
 8027b5e:	69db      	ldr	r3, [r3, #28]
 8027b60:	f043 0310 	orr.w	r3, r3, #16
 8027b64:	4a23      	ldr	r2, [pc, #140]	; (8027bf4 <FLASH_SetErrorCode+0xa8>)
 8027b66:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8027b68:	4b21      	ldr	r3, [pc, #132]	; (8027bf0 <FLASH_SetErrorCode+0xa4>)
 8027b6a:	2210      	movs	r2, #16
 8027b6c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8027b6e:	4b20      	ldr	r3, [pc, #128]	; (8027bf0 <FLASH_SetErrorCode+0xa4>)
 8027b70:	68db      	ldr	r3, [r3, #12]
 8027b72:	f003 0320 	and.w	r3, r3, #32
 8027b76:	2b00      	cmp	r3, #0
 8027b78:	d008      	beq.n	8027b8c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8027b7a:	4b1e      	ldr	r3, [pc, #120]	; (8027bf4 <FLASH_SetErrorCode+0xa8>)
 8027b7c:	69db      	ldr	r3, [r3, #28]
 8027b7e:	f043 0308 	orr.w	r3, r3, #8
 8027b82:	4a1c      	ldr	r2, [pc, #112]	; (8027bf4 <FLASH_SetErrorCode+0xa8>)
 8027b84:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8027b86:	4b1a      	ldr	r3, [pc, #104]	; (8027bf0 <FLASH_SetErrorCode+0xa4>)
 8027b88:	2220      	movs	r2, #32
 8027b8a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8027b8c:	4b18      	ldr	r3, [pc, #96]	; (8027bf0 <FLASH_SetErrorCode+0xa4>)
 8027b8e:	68db      	ldr	r3, [r3, #12]
 8027b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027b94:	2b00      	cmp	r3, #0
 8027b96:	d008      	beq.n	8027baa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8027b98:	4b16      	ldr	r3, [pc, #88]	; (8027bf4 <FLASH_SetErrorCode+0xa8>)
 8027b9a:	69db      	ldr	r3, [r3, #28]
 8027b9c:	f043 0304 	orr.w	r3, r3, #4
 8027ba0:	4a14      	ldr	r2, [pc, #80]	; (8027bf4 <FLASH_SetErrorCode+0xa8>)
 8027ba2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8027ba4:	4b12      	ldr	r3, [pc, #72]	; (8027bf0 <FLASH_SetErrorCode+0xa4>)
 8027ba6:	2240      	movs	r2, #64	; 0x40
 8027ba8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8027baa:	4b11      	ldr	r3, [pc, #68]	; (8027bf0 <FLASH_SetErrorCode+0xa4>)
 8027bac:	68db      	ldr	r3, [r3, #12]
 8027bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027bb2:	2b00      	cmp	r3, #0
 8027bb4:	d008      	beq.n	8027bc8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8027bb6:	4b0f      	ldr	r3, [pc, #60]	; (8027bf4 <FLASH_SetErrorCode+0xa8>)
 8027bb8:	69db      	ldr	r3, [r3, #28]
 8027bba:	f043 0302 	orr.w	r3, r3, #2
 8027bbe:	4a0d      	ldr	r2, [pc, #52]	; (8027bf4 <FLASH_SetErrorCode+0xa8>)
 8027bc0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8027bc2:	4b0b      	ldr	r3, [pc, #44]	; (8027bf0 <FLASH_SetErrorCode+0xa4>)
 8027bc4:	2280      	movs	r2, #128	; 0x80
 8027bc6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8027bc8:	4b09      	ldr	r3, [pc, #36]	; (8027bf0 <FLASH_SetErrorCode+0xa4>)
 8027bca:	68db      	ldr	r3, [r3, #12]
 8027bcc:	f003 0302 	and.w	r3, r3, #2
 8027bd0:	2b00      	cmp	r3, #0
 8027bd2:	d008      	beq.n	8027be6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8027bd4:	4b07      	ldr	r3, [pc, #28]	; (8027bf4 <FLASH_SetErrorCode+0xa8>)
 8027bd6:	69db      	ldr	r3, [r3, #28]
 8027bd8:	f043 0320 	orr.w	r3, r3, #32
 8027bdc:	4a05      	ldr	r2, [pc, #20]	; (8027bf4 <FLASH_SetErrorCode+0xa8>)
 8027bde:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8027be0:	4b03      	ldr	r3, [pc, #12]	; (8027bf0 <FLASH_SetErrorCode+0xa4>)
 8027be2:	2202      	movs	r2, #2
 8027be4:	60da      	str	r2, [r3, #12]
  }
}
 8027be6:	bf00      	nop
 8027be8:	46bd      	mov	sp, r7
 8027bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027bee:	4770      	bx	lr
 8027bf0:	40023c00 	.word	0x40023c00
 8027bf4:	20000b90 	.word	0x20000b90

08027bf8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8027bf8:	b580      	push	{r7, lr}
 8027bfa:	b084      	sub	sp, #16
 8027bfc:	af00      	add	r7, sp, #0
 8027bfe:	6078      	str	r0, [r7, #4]
 8027c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8027c02:	2301      	movs	r3, #1
 8027c04:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8027c06:	2300      	movs	r3, #0
 8027c08:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8027c0a:	4b31      	ldr	r3, [pc, #196]	; (8027cd0 <HAL_FLASHEx_Erase+0xd8>)
 8027c0c:	7e1b      	ldrb	r3, [r3, #24]
 8027c0e:	2b01      	cmp	r3, #1
 8027c10:	d101      	bne.n	8027c16 <HAL_FLASHEx_Erase+0x1e>
 8027c12:	2302      	movs	r3, #2
 8027c14:	e058      	b.n	8027cc8 <HAL_FLASHEx_Erase+0xd0>
 8027c16:	4b2e      	ldr	r3, [pc, #184]	; (8027cd0 <HAL_FLASHEx_Erase+0xd8>)
 8027c18:	2201      	movs	r2, #1
 8027c1a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027c1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027c20:	f7ff febc 	bl	802799c <FLASH_WaitForLastOperation>
 8027c24:	4603      	mov	r3, r0
 8027c26:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8027c28:	7bfb      	ldrb	r3, [r7, #15]
 8027c2a:	2b00      	cmp	r3, #0
 8027c2c:	d148      	bne.n	8027cc0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8027c2e:	683b      	ldr	r3, [r7, #0]
 8027c30:	f04f 32ff 	mov.w	r2, #4294967295
 8027c34:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8027c36:	687b      	ldr	r3, [r7, #4]
 8027c38:	681b      	ldr	r3, [r3, #0]
 8027c3a:	2b01      	cmp	r3, #1
 8027c3c:	d115      	bne.n	8027c6a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8027c3e:	687b      	ldr	r3, [r7, #4]
 8027c40:	691b      	ldr	r3, [r3, #16]
 8027c42:	b2da      	uxtb	r2, r3
 8027c44:	687b      	ldr	r3, [r7, #4]
 8027c46:	685b      	ldr	r3, [r3, #4]
 8027c48:	4619      	mov	r1, r3
 8027c4a:	4610      	mov	r0, r2
 8027c4c:	f000 f844 	bl	8027cd8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027c50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027c54:	f7ff fea2 	bl	802799c <FLASH_WaitForLastOperation>
 8027c58:	4603      	mov	r3, r0
 8027c5a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8027c5c:	4b1d      	ldr	r3, [pc, #116]	; (8027cd4 <HAL_FLASHEx_Erase+0xdc>)
 8027c5e:	691b      	ldr	r3, [r3, #16]
 8027c60:	4a1c      	ldr	r2, [pc, #112]	; (8027cd4 <HAL_FLASHEx_Erase+0xdc>)
 8027c62:	f023 0304 	bic.w	r3, r3, #4
 8027c66:	6113      	str	r3, [r2, #16]
 8027c68:	e028      	b.n	8027cbc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8027c6a:	687b      	ldr	r3, [r7, #4]
 8027c6c:	689b      	ldr	r3, [r3, #8]
 8027c6e:	60bb      	str	r3, [r7, #8]
 8027c70:	e01c      	b.n	8027cac <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8027c72:	687b      	ldr	r3, [r7, #4]
 8027c74:	691b      	ldr	r3, [r3, #16]
 8027c76:	b2db      	uxtb	r3, r3
 8027c78:	4619      	mov	r1, r3
 8027c7a:	68b8      	ldr	r0, [r7, #8]
 8027c7c:	f000 f850 	bl	8027d20 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027c80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027c84:	f7ff fe8a 	bl	802799c <FLASH_WaitForLastOperation>
 8027c88:	4603      	mov	r3, r0
 8027c8a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8027c8c:	4b11      	ldr	r3, [pc, #68]	; (8027cd4 <HAL_FLASHEx_Erase+0xdc>)
 8027c8e:	691b      	ldr	r3, [r3, #16]
 8027c90:	4a10      	ldr	r2, [pc, #64]	; (8027cd4 <HAL_FLASHEx_Erase+0xdc>)
 8027c92:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8027c96:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8027c98:	7bfb      	ldrb	r3, [r7, #15]
 8027c9a:	2b00      	cmp	r3, #0
 8027c9c:	d003      	beq.n	8027ca6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8027c9e:	683b      	ldr	r3, [r7, #0]
 8027ca0:	68ba      	ldr	r2, [r7, #8]
 8027ca2:	601a      	str	r2, [r3, #0]
          break;
 8027ca4:	e00a      	b.n	8027cbc <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8027ca6:	68bb      	ldr	r3, [r7, #8]
 8027ca8:	3301      	adds	r3, #1
 8027caa:	60bb      	str	r3, [r7, #8]
 8027cac:	687b      	ldr	r3, [r7, #4]
 8027cae:	68da      	ldr	r2, [r3, #12]
 8027cb0:	687b      	ldr	r3, [r7, #4]
 8027cb2:	689b      	ldr	r3, [r3, #8]
 8027cb4:	4413      	add	r3, r2
 8027cb6:	68ba      	ldr	r2, [r7, #8]
 8027cb8:	429a      	cmp	r2, r3
 8027cba:	d3da      	bcc.n	8027c72 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8027cbc:	f000 f878 	bl	8027db0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8027cc0:	4b03      	ldr	r3, [pc, #12]	; (8027cd0 <HAL_FLASHEx_Erase+0xd8>)
 8027cc2:	2200      	movs	r2, #0
 8027cc4:	761a      	strb	r2, [r3, #24]

  return status;
 8027cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8027cc8:	4618      	mov	r0, r3
 8027cca:	3710      	adds	r7, #16
 8027ccc:	46bd      	mov	sp, r7
 8027cce:	bd80      	pop	{r7, pc}
 8027cd0:	20000b90 	.word	0x20000b90
 8027cd4:	40023c00 	.word	0x40023c00

08027cd8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8027cd8:	b480      	push	{r7}
 8027cda:	b083      	sub	sp, #12
 8027cdc:	af00      	add	r7, sp, #0
 8027cde:	4603      	mov	r3, r0
 8027ce0:	6039      	str	r1, [r7, #0]
 8027ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027ce4:	4b0d      	ldr	r3, [pc, #52]	; (8027d1c <FLASH_MassErase+0x44>)
 8027ce6:	691b      	ldr	r3, [r3, #16]
 8027ce8:	4a0c      	ldr	r2, [pc, #48]	; (8027d1c <FLASH_MassErase+0x44>)
 8027cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027cee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8027cf0:	4b0a      	ldr	r3, [pc, #40]	; (8027d1c <FLASH_MassErase+0x44>)
 8027cf2:	691b      	ldr	r3, [r3, #16]
 8027cf4:	4a09      	ldr	r2, [pc, #36]	; (8027d1c <FLASH_MassErase+0x44>)
 8027cf6:	f043 0304 	orr.w	r3, r3, #4
 8027cfa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8027cfc:	4b07      	ldr	r3, [pc, #28]	; (8027d1c <FLASH_MassErase+0x44>)
 8027cfe:	691a      	ldr	r2, [r3, #16]
 8027d00:	79fb      	ldrb	r3, [r7, #7]
 8027d02:	021b      	lsls	r3, r3, #8
 8027d04:	4313      	orrs	r3, r2
 8027d06:	4a05      	ldr	r2, [pc, #20]	; (8027d1c <FLASH_MassErase+0x44>)
 8027d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027d0c:	6113      	str	r3, [r2, #16]
}
 8027d0e:	bf00      	nop
 8027d10:	370c      	adds	r7, #12
 8027d12:	46bd      	mov	sp, r7
 8027d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d18:	4770      	bx	lr
 8027d1a:	bf00      	nop
 8027d1c:	40023c00 	.word	0x40023c00

08027d20 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8027d20:	b480      	push	{r7}
 8027d22:	b085      	sub	sp, #20
 8027d24:	af00      	add	r7, sp, #0
 8027d26:	6078      	str	r0, [r7, #4]
 8027d28:	460b      	mov	r3, r1
 8027d2a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8027d2c:	2300      	movs	r3, #0
 8027d2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8027d30:	78fb      	ldrb	r3, [r7, #3]
 8027d32:	2b00      	cmp	r3, #0
 8027d34:	d102      	bne.n	8027d3c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8027d36:	2300      	movs	r3, #0
 8027d38:	60fb      	str	r3, [r7, #12]
 8027d3a:	e010      	b.n	8027d5e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8027d3c:	78fb      	ldrb	r3, [r7, #3]
 8027d3e:	2b01      	cmp	r3, #1
 8027d40:	d103      	bne.n	8027d4a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8027d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8027d46:	60fb      	str	r3, [r7, #12]
 8027d48:	e009      	b.n	8027d5e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8027d4a:	78fb      	ldrb	r3, [r7, #3]
 8027d4c:	2b02      	cmp	r3, #2
 8027d4e:	d103      	bne.n	8027d58 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8027d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8027d54:	60fb      	str	r3, [r7, #12]
 8027d56:	e002      	b.n	8027d5e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8027d58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8027d5c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027d5e:	4b13      	ldr	r3, [pc, #76]	; (8027dac <FLASH_Erase_Sector+0x8c>)
 8027d60:	691b      	ldr	r3, [r3, #16]
 8027d62:	4a12      	ldr	r2, [pc, #72]	; (8027dac <FLASH_Erase_Sector+0x8c>)
 8027d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027d68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8027d6a:	4b10      	ldr	r3, [pc, #64]	; (8027dac <FLASH_Erase_Sector+0x8c>)
 8027d6c:	691a      	ldr	r2, [r3, #16]
 8027d6e:	490f      	ldr	r1, [pc, #60]	; (8027dac <FLASH_Erase_Sector+0x8c>)
 8027d70:	68fb      	ldr	r3, [r7, #12]
 8027d72:	4313      	orrs	r3, r2
 8027d74:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8027d76:	4b0d      	ldr	r3, [pc, #52]	; (8027dac <FLASH_Erase_Sector+0x8c>)
 8027d78:	691b      	ldr	r3, [r3, #16]
 8027d7a:	4a0c      	ldr	r2, [pc, #48]	; (8027dac <FLASH_Erase_Sector+0x8c>)
 8027d7c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8027d80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8027d82:	4b0a      	ldr	r3, [pc, #40]	; (8027dac <FLASH_Erase_Sector+0x8c>)
 8027d84:	691a      	ldr	r2, [r3, #16]
 8027d86:	687b      	ldr	r3, [r7, #4]
 8027d88:	00db      	lsls	r3, r3, #3
 8027d8a:	4313      	orrs	r3, r2
 8027d8c:	4a07      	ldr	r2, [pc, #28]	; (8027dac <FLASH_Erase_Sector+0x8c>)
 8027d8e:	f043 0302 	orr.w	r3, r3, #2
 8027d92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8027d94:	4b05      	ldr	r3, [pc, #20]	; (8027dac <FLASH_Erase_Sector+0x8c>)
 8027d96:	691b      	ldr	r3, [r3, #16]
 8027d98:	4a04      	ldr	r2, [pc, #16]	; (8027dac <FLASH_Erase_Sector+0x8c>)
 8027d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027d9e:	6113      	str	r3, [r2, #16]
}
 8027da0:	bf00      	nop
 8027da2:	3714      	adds	r7, #20
 8027da4:	46bd      	mov	sp, r7
 8027da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027daa:	4770      	bx	lr
 8027dac:	40023c00 	.word	0x40023c00

08027db0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8027db0:	b480      	push	{r7}
 8027db2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8027db4:	4b20      	ldr	r3, [pc, #128]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027db6:	681b      	ldr	r3, [r3, #0]
 8027db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027dbc:	2b00      	cmp	r3, #0
 8027dbe:	d017      	beq.n	8027df0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8027dc0:	4b1d      	ldr	r3, [pc, #116]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027dc2:	681b      	ldr	r3, [r3, #0]
 8027dc4:	4a1c      	ldr	r2, [pc, #112]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027dc6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8027dca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8027dcc:	4b1a      	ldr	r3, [pc, #104]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027dce:	681b      	ldr	r3, [r3, #0]
 8027dd0:	4a19      	ldr	r2, [pc, #100]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027dd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8027dd6:	6013      	str	r3, [r2, #0]
 8027dd8:	4b17      	ldr	r3, [pc, #92]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027dda:	681b      	ldr	r3, [r3, #0]
 8027ddc:	4a16      	ldr	r2, [pc, #88]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8027de2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8027de4:	4b14      	ldr	r3, [pc, #80]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027de6:	681b      	ldr	r3, [r3, #0]
 8027de8:	4a13      	ldr	r2, [pc, #76]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027dee:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8027df0:	4b11      	ldr	r3, [pc, #68]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027df2:	681b      	ldr	r3, [r3, #0]
 8027df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027df8:	2b00      	cmp	r3, #0
 8027dfa:	d017      	beq.n	8027e2c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8027dfc:	4b0e      	ldr	r3, [pc, #56]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027dfe:	681b      	ldr	r3, [r3, #0]
 8027e00:	4a0d      	ldr	r2, [pc, #52]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8027e06:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8027e08:	4b0b      	ldr	r3, [pc, #44]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027e0a:	681b      	ldr	r3, [r3, #0]
 8027e0c:	4a0a      	ldr	r2, [pc, #40]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027e0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8027e12:	6013      	str	r3, [r2, #0]
 8027e14:	4b08      	ldr	r3, [pc, #32]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027e16:	681b      	ldr	r3, [r3, #0]
 8027e18:	4a07      	ldr	r2, [pc, #28]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027e1e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8027e20:	4b05      	ldr	r3, [pc, #20]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027e22:	681b      	ldr	r3, [r3, #0]
 8027e24:	4a04      	ldr	r2, [pc, #16]	; (8027e38 <FLASH_FlushCaches+0x88>)
 8027e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8027e2a:	6013      	str	r3, [r2, #0]
  }
}
 8027e2c:	bf00      	nop
 8027e2e:	46bd      	mov	sp, r7
 8027e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e34:	4770      	bx	lr
 8027e36:	bf00      	nop
 8027e38:	40023c00 	.word	0x40023c00

08027e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8027e3c:	b480      	push	{r7}
 8027e3e:	b089      	sub	sp, #36	; 0x24
 8027e40:	af00      	add	r7, sp, #0
 8027e42:	6078      	str	r0, [r7, #4]
 8027e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8027e46:	2300      	movs	r3, #0
 8027e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8027e4a:	2300      	movs	r3, #0
 8027e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8027e4e:	2300      	movs	r3, #0
 8027e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8027e52:	2300      	movs	r3, #0
 8027e54:	61fb      	str	r3, [r7, #28]
 8027e56:	e16b      	b.n	8028130 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8027e58:	2201      	movs	r2, #1
 8027e5a:	69fb      	ldr	r3, [r7, #28]
 8027e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8027e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8027e62:	683b      	ldr	r3, [r7, #0]
 8027e64:	681b      	ldr	r3, [r3, #0]
 8027e66:	697a      	ldr	r2, [r7, #20]
 8027e68:	4013      	ands	r3, r2
 8027e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8027e6c:	693a      	ldr	r2, [r7, #16]
 8027e6e:	697b      	ldr	r3, [r7, #20]
 8027e70:	429a      	cmp	r2, r3
 8027e72:	f040 815a 	bne.w	802812a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8027e76:	683b      	ldr	r3, [r7, #0]
 8027e78:	685b      	ldr	r3, [r3, #4]
 8027e7a:	2b01      	cmp	r3, #1
 8027e7c:	d00b      	beq.n	8027e96 <HAL_GPIO_Init+0x5a>
 8027e7e:	683b      	ldr	r3, [r7, #0]
 8027e80:	685b      	ldr	r3, [r3, #4]
 8027e82:	2b02      	cmp	r3, #2
 8027e84:	d007      	beq.n	8027e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027e86:	683b      	ldr	r3, [r7, #0]
 8027e88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8027e8a:	2b11      	cmp	r3, #17
 8027e8c:	d003      	beq.n	8027e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027e8e:	683b      	ldr	r3, [r7, #0]
 8027e90:	685b      	ldr	r3, [r3, #4]
 8027e92:	2b12      	cmp	r3, #18
 8027e94:	d130      	bne.n	8027ef8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8027e96:	687b      	ldr	r3, [r7, #4]
 8027e98:	689b      	ldr	r3, [r3, #8]
 8027e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8027e9c:	69fb      	ldr	r3, [r7, #28]
 8027e9e:	005b      	lsls	r3, r3, #1
 8027ea0:	2203      	movs	r2, #3
 8027ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8027ea6:	43db      	mvns	r3, r3
 8027ea8:	69ba      	ldr	r2, [r7, #24]
 8027eaa:	4013      	ands	r3, r2
 8027eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8027eae:	683b      	ldr	r3, [r7, #0]
 8027eb0:	68da      	ldr	r2, [r3, #12]
 8027eb2:	69fb      	ldr	r3, [r7, #28]
 8027eb4:	005b      	lsls	r3, r3, #1
 8027eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8027eba:	69ba      	ldr	r2, [r7, #24]
 8027ebc:	4313      	orrs	r3, r2
 8027ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8027ec0:	687b      	ldr	r3, [r7, #4]
 8027ec2:	69ba      	ldr	r2, [r7, #24]
 8027ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8027ec6:	687b      	ldr	r3, [r7, #4]
 8027ec8:	685b      	ldr	r3, [r3, #4]
 8027eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8027ecc:	2201      	movs	r2, #1
 8027ece:	69fb      	ldr	r3, [r7, #28]
 8027ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8027ed4:	43db      	mvns	r3, r3
 8027ed6:	69ba      	ldr	r2, [r7, #24]
 8027ed8:	4013      	ands	r3, r2
 8027eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8027edc:	683b      	ldr	r3, [r7, #0]
 8027ede:	685b      	ldr	r3, [r3, #4]
 8027ee0:	091b      	lsrs	r3, r3, #4
 8027ee2:	f003 0201 	and.w	r2, r3, #1
 8027ee6:	69fb      	ldr	r3, [r7, #28]
 8027ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8027eec:	69ba      	ldr	r2, [r7, #24]
 8027eee:	4313      	orrs	r3, r2
 8027ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8027ef2:	687b      	ldr	r3, [r7, #4]
 8027ef4:	69ba      	ldr	r2, [r7, #24]
 8027ef6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8027ef8:	687b      	ldr	r3, [r7, #4]
 8027efa:	68db      	ldr	r3, [r3, #12]
 8027efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8027efe:	69fb      	ldr	r3, [r7, #28]
 8027f00:	005b      	lsls	r3, r3, #1
 8027f02:	2203      	movs	r2, #3
 8027f04:	fa02 f303 	lsl.w	r3, r2, r3
 8027f08:	43db      	mvns	r3, r3
 8027f0a:	69ba      	ldr	r2, [r7, #24]
 8027f0c:	4013      	ands	r3, r2
 8027f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8027f10:	683b      	ldr	r3, [r7, #0]
 8027f12:	689a      	ldr	r2, [r3, #8]
 8027f14:	69fb      	ldr	r3, [r7, #28]
 8027f16:	005b      	lsls	r3, r3, #1
 8027f18:	fa02 f303 	lsl.w	r3, r2, r3
 8027f1c:	69ba      	ldr	r2, [r7, #24]
 8027f1e:	4313      	orrs	r3, r2
 8027f20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8027f22:	687b      	ldr	r3, [r7, #4]
 8027f24:	69ba      	ldr	r2, [r7, #24]
 8027f26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027f28:	683b      	ldr	r3, [r7, #0]
 8027f2a:	685b      	ldr	r3, [r3, #4]
 8027f2c:	2b02      	cmp	r3, #2
 8027f2e:	d003      	beq.n	8027f38 <HAL_GPIO_Init+0xfc>
 8027f30:	683b      	ldr	r3, [r7, #0]
 8027f32:	685b      	ldr	r3, [r3, #4]
 8027f34:	2b12      	cmp	r3, #18
 8027f36:	d123      	bne.n	8027f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8027f38:	69fb      	ldr	r3, [r7, #28]
 8027f3a:	08da      	lsrs	r2, r3, #3
 8027f3c:	687b      	ldr	r3, [r7, #4]
 8027f3e:	3208      	adds	r2, #8
 8027f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8027f46:	69fb      	ldr	r3, [r7, #28]
 8027f48:	f003 0307 	and.w	r3, r3, #7
 8027f4c:	009b      	lsls	r3, r3, #2
 8027f4e:	220f      	movs	r2, #15
 8027f50:	fa02 f303 	lsl.w	r3, r2, r3
 8027f54:	43db      	mvns	r3, r3
 8027f56:	69ba      	ldr	r2, [r7, #24]
 8027f58:	4013      	ands	r3, r2
 8027f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8027f5c:	683b      	ldr	r3, [r7, #0]
 8027f5e:	691a      	ldr	r2, [r3, #16]
 8027f60:	69fb      	ldr	r3, [r7, #28]
 8027f62:	f003 0307 	and.w	r3, r3, #7
 8027f66:	009b      	lsls	r3, r3, #2
 8027f68:	fa02 f303 	lsl.w	r3, r2, r3
 8027f6c:	69ba      	ldr	r2, [r7, #24]
 8027f6e:	4313      	orrs	r3, r2
 8027f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8027f72:	69fb      	ldr	r3, [r7, #28]
 8027f74:	08da      	lsrs	r2, r3, #3
 8027f76:	687b      	ldr	r3, [r7, #4]
 8027f78:	3208      	adds	r2, #8
 8027f7a:	69b9      	ldr	r1, [r7, #24]
 8027f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8027f80:	687b      	ldr	r3, [r7, #4]
 8027f82:	681b      	ldr	r3, [r3, #0]
 8027f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8027f86:	69fb      	ldr	r3, [r7, #28]
 8027f88:	005b      	lsls	r3, r3, #1
 8027f8a:	2203      	movs	r2, #3
 8027f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8027f90:	43db      	mvns	r3, r3
 8027f92:	69ba      	ldr	r2, [r7, #24]
 8027f94:	4013      	ands	r3, r2
 8027f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8027f98:	683b      	ldr	r3, [r7, #0]
 8027f9a:	685b      	ldr	r3, [r3, #4]
 8027f9c:	f003 0203 	and.w	r2, r3, #3
 8027fa0:	69fb      	ldr	r3, [r7, #28]
 8027fa2:	005b      	lsls	r3, r3, #1
 8027fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8027fa8:	69ba      	ldr	r2, [r7, #24]
 8027faa:	4313      	orrs	r3, r2
 8027fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8027fae:	687b      	ldr	r3, [r7, #4]
 8027fb0:	69ba      	ldr	r2, [r7, #24]
 8027fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8027fb4:	683b      	ldr	r3, [r7, #0]
 8027fb6:	685b      	ldr	r3, [r3, #4]
 8027fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027fbc:	2b00      	cmp	r3, #0
 8027fbe:	f000 80b4 	beq.w	802812a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8027fc2:	2300      	movs	r3, #0
 8027fc4:	60fb      	str	r3, [r7, #12]
 8027fc6:	4b5f      	ldr	r3, [pc, #380]	; (8028144 <HAL_GPIO_Init+0x308>)
 8027fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027fca:	4a5e      	ldr	r2, [pc, #376]	; (8028144 <HAL_GPIO_Init+0x308>)
 8027fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8027fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8027fd2:	4b5c      	ldr	r3, [pc, #368]	; (8028144 <HAL_GPIO_Init+0x308>)
 8027fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8027fda:	60fb      	str	r3, [r7, #12]
 8027fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8027fde:	4a5a      	ldr	r2, [pc, #360]	; (8028148 <HAL_GPIO_Init+0x30c>)
 8027fe0:	69fb      	ldr	r3, [r7, #28]
 8027fe2:	089b      	lsrs	r3, r3, #2
 8027fe4:	3302      	adds	r3, #2
 8027fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8027fec:	69fb      	ldr	r3, [r7, #28]
 8027fee:	f003 0303 	and.w	r3, r3, #3
 8027ff2:	009b      	lsls	r3, r3, #2
 8027ff4:	220f      	movs	r2, #15
 8027ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8027ffa:	43db      	mvns	r3, r3
 8027ffc:	69ba      	ldr	r2, [r7, #24]
 8027ffe:	4013      	ands	r3, r2
 8028000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8028002:	687b      	ldr	r3, [r7, #4]
 8028004:	4a51      	ldr	r2, [pc, #324]	; (802814c <HAL_GPIO_Init+0x310>)
 8028006:	4293      	cmp	r3, r2
 8028008:	d02b      	beq.n	8028062 <HAL_GPIO_Init+0x226>
 802800a:	687b      	ldr	r3, [r7, #4]
 802800c:	4a50      	ldr	r2, [pc, #320]	; (8028150 <HAL_GPIO_Init+0x314>)
 802800e:	4293      	cmp	r3, r2
 8028010:	d025      	beq.n	802805e <HAL_GPIO_Init+0x222>
 8028012:	687b      	ldr	r3, [r7, #4]
 8028014:	4a4f      	ldr	r2, [pc, #316]	; (8028154 <HAL_GPIO_Init+0x318>)
 8028016:	4293      	cmp	r3, r2
 8028018:	d01f      	beq.n	802805a <HAL_GPIO_Init+0x21e>
 802801a:	687b      	ldr	r3, [r7, #4]
 802801c:	4a4e      	ldr	r2, [pc, #312]	; (8028158 <HAL_GPIO_Init+0x31c>)
 802801e:	4293      	cmp	r3, r2
 8028020:	d019      	beq.n	8028056 <HAL_GPIO_Init+0x21a>
 8028022:	687b      	ldr	r3, [r7, #4]
 8028024:	4a4d      	ldr	r2, [pc, #308]	; (802815c <HAL_GPIO_Init+0x320>)
 8028026:	4293      	cmp	r3, r2
 8028028:	d013      	beq.n	8028052 <HAL_GPIO_Init+0x216>
 802802a:	687b      	ldr	r3, [r7, #4]
 802802c:	4a4c      	ldr	r2, [pc, #304]	; (8028160 <HAL_GPIO_Init+0x324>)
 802802e:	4293      	cmp	r3, r2
 8028030:	d00d      	beq.n	802804e <HAL_GPIO_Init+0x212>
 8028032:	687b      	ldr	r3, [r7, #4]
 8028034:	4a4b      	ldr	r2, [pc, #300]	; (8028164 <HAL_GPIO_Init+0x328>)
 8028036:	4293      	cmp	r3, r2
 8028038:	d007      	beq.n	802804a <HAL_GPIO_Init+0x20e>
 802803a:	687b      	ldr	r3, [r7, #4]
 802803c:	4a4a      	ldr	r2, [pc, #296]	; (8028168 <HAL_GPIO_Init+0x32c>)
 802803e:	4293      	cmp	r3, r2
 8028040:	d101      	bne.n	8028046 <HAL_GPIO_Init+0x20a>
 8028042:	2307      	movs	r3, #7
 8028044:	e00e      	b.n	8028064 <HAL_GPIO_Init+0x228>
 8028046:	2308      	movs	r3, #8
 8028048:	e00c      	b.n	8028064 <HAL_GPIO_Init+0x228>
 802804a:	2306      	movs	r3, #6
 802804c:	e00a      	b.n	8028064 <HAL_GPIO_Init+0x228>
 802804e:	2305      	movs	r3, #5
 8028050:	e008      	b.n	8028064 <HAL_GPIO_Init+0x228>
 8028052:	2304      	movs	r3, #4
 8028054:	e006      	b.n	8028064 <HAL_GPIO_Init+0x228>
 8028056:	2303      	movs	r3, #3
 8028058:	e004      	b.n	8028064 <HAL_GPIO_Init+0x228>
 802805a:	2302      	movs	r3, #2
 802805c:	e002      	b.n	8028064 <HAL_GPIO_Init+0x228>
 802805e:	2301      	movs	r3, #1
 8028060:	e000      	b.n	8028064 <HAL_GPIO_Init+0x228>
 8028062:	2300      	movs	r3, #0
 8028064:	69fa      	ldr	r2, [r7, #28]
 8028066:	f002 0203 	and.w	r2, r2, #3
 802806a:	0092      	lsls	r2, r2, #2
 802806c:	4093      	lsls	r3, r2
 802806e:	69ba      	ldr	r2, [r7, #24]
 8028070:	4313      	orrs	r3, r2
 8028072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8028074:	4934      	ldr	r1, [pc, #208]	; (8028148 <HAL_GPIO_Init+0x30c>)
 8028076:	69fb      	ldr	r3, [r7, #28]
 8028078:	089b      	lsrs	r3, r3, #2
 802807a:	3302      	adds	r3, #2
 802807c:	69ba      	ldr	r2, [r7, #24]
 802807e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8028082:	4b3a      	ldr	r3, [pc, #232]	; (802816c <HAL_GPIO_Init+0x330>)
 8028084:	681b      	ldr	r3, [r3, #0]
 8028086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028088:	693b      	ldr	r3, [r7, #16]
 802808a:	43db      	mvns	r3, r3
 802808c:	69ba      	ldr	r2, [r7, #24]
 802808e:	4013      	ands	r3, r2
 8028090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8028092:	683b      	ldr	r3, [r7, #0]
 8028094:	685b      	ldr	r3, [r3, #4]
 8028096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802809a:	2b00      	cmp	r3, #0
 802809c:	d003      	beq.n	80280a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 802809e:	69ba      	ldr	r2, [r7, #24]
 80280a0:	693b      	ldr	r3, [r7, #16]
 80280a2:	4313      	orrs	r3, r2
 80280a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80280a6:	4a31      	ldr	r2, [pc, #196]	; (802816c <HAL_GPIO_Init+0x330>)
 80280a8:	69bb      	ldr	r3, [r7, #24]
 80280aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80280ac:	4b2f      	ldr	r3, [pc, #188]	; (802816c <HAL_GPIO_Init+0x330>)
 80280ae:	685b      	ldr	r3, [r3, #4]
 80280b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80280b2:	693b      	ldr	r3, [r7, #16]
 80280b4:	43db      	mvns	r3, r3
 80280b6:	69ba      	ldr	r2, [r7, #24]
 80280b8:	4013      	ands	r3, r2
 80280ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80280bc:	683b      	ldr	r3, [r7, #0]
 80280be:	685b      	ldr	r3, [r3, #4]
 80280c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80280c4:	2b00      	cmp	r3, #0
 80280c6:	d003      	beq.n	80280d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80280c8:	69ba      	ldr	r2, [r7, #24]
 80280ca:	693b      	ldr	r3, [r7, #16]
 80280cc:	4313      	orrs	r3, r2
 80280ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80280d0:	4a26      	ldr	r2, [pc, #152]	; (802816c <HAL_GPIO_Init+0x330>)
 80280d2:	69bb      	ldr	r3, [r7, #24]
 80280d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80280d6:	4b25      	ldr	r3, [pc, #148]	; (802816c <HAL_GPIO_Init+0x330>)
 80280d8:	689b      	ldr	r3, [r3, #8]
 80280da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80280dc:	693b      	ldr	r3, [r7, #16]
 80280de:	43db      	mvns	r3, r3
 80280e0:	69ba      	ldr	r2, [r7, #24]
 80280e2:	4013      	ands	r3, r2
 80280e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80280e6:	683b      	ldr	r3, [r7, #0]
 80280e8:	685b      	ldr	r3, [r3, #4]
 80280ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80280ee:	2b00      	cmp	r3, #0
 80280f0:	d003      	beq.n	80280fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80280f2:	69ba      	ldr	r2, [r7, #24]
 80280f4:	693b      	ldr	r3, [r7, #16]
 80280f6:	4313      	orrs	r3, r2
 80280f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80280fa:	4a1c      	ldr	r2, [pc, #112]	; (802816c <HAL_GPIO_Init+0x330>)
 80280fc:	69bb      	ldr	r3, [r7, #24]
 80280fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8028100:	4b1a      	ldr	r3, [pc, #104]	; (802816c <HAL_GPIO_Init+0x330>)
 8028102:	68db      	ldr	r3, [r3, #12]
 8028104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028106:	693b      	ldr	r3, [r7, #16]
 8028108:	43db      	mvns	r3, r3
 802810a:	69ba      	ldr	r2, [r7, #24]
 802810c:	4013      	ands	r3, r2
 802810e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8028110:	683b      	ldr	r3, [r7, #0]
 8028112:	685b      	ldr	r3, [r3, #4]
 8028114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8028118:	2b00      	cmp	r3, #0
 802811a:	d003      	beq.n	8028124 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 802811c:	69ba      	ldr	r2, [r7, #24]
 802811e:	693b      	ldr	r3, [r7, #16]
 8028120:	4313      	orrs	r3, r2
 8028122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8028124:	4a11      	ldr	r2, [pc, #68]	; (802816c <HAL_GPIO_Init+0x330>)
 8028126:	69bb      	ldr	r3, [r7, #24]
 8028128:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802812a:	69fb      	ldr	r3, [r7, #28]
 802812c:	3301      	adds	r3, #1
 802812e:	61fb      	str	r3, [r7, #28]
 8028130:	69fb      	ldr	r3, [r7, #28]
 8028132:	2b0f      	cmp	r3, #15
 8028134:	f67f ae90 	bls.w	8027e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8028138:	bf00      	nop
 802813a:	3724      	adds	r7, #36	; 0x24
 802813c:	46bd      	mov	sp, r7
 802813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028142:	4770      	bx	lr
 8028144:	40023800 	.word	0x40023800
 8028148:	40013800 	.word	0x40013800
 802814c:	40020000 	.word	0x40020000
 8028150:	40020400 	.word	0x40020400
 8028154:	40020800 	.word	0x40020800
 8028158:	40020c00 	.word	0x40020c00
 802815c:	40021000 	.word	0x40021000
 8028160:	40021400 	.word	0x40021400
 8028164:	40021800 	.word	0x40021800
 8028168:	40021c00 	.word	0x40021c00
 802816c:	40013c00 	.word	0x40013c00

08028170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8028170:	b480      	push	{r7}
 8028172:	b085      	sub	sp, #20
 8028174:	af00      	add	r7, sp, #0
 8028176:	6078      	str	r0, [r7, #4]
 8028178:	460b      	mov	r3, r1
 802817a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 802817c:	687b      	ldr	r3, [r7, #4]
 802817e:	691a      	ldr	r2, [r3, #16]
 8028180:	887b      	ldrh	r3, [r7, #2]
 8028182:	4013      	ands	r3, r2
 8028184:	2b00      	cmp	r3, #0
 8028186:	d002      	beq.n	802818e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8028188:	2301      	movs	r3, #1
 802818a:	73fb      	strb	r3, [r7, #15]
 802818c:	e001      	b.n	8028192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 802818e:	2300      	movs	r3, #0
 8028190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8028192:	7bfb      	ldrb	r3, [r7, #15]
}
 8028194:	4618      	mov	r0, r3
 8028196:	3714      	adds	r7, #20
 8028198:	46bd      	mov	sp, r7
 802819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802819e:	4770      	bx	lr

080281a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80281a0:	b480      	push	{r7}
 80281a2:	b083      	sub	sp, #12
 80281a4:	af00      	add	r7, sp, #0
 80281a6:	6078      	str	r0, [r7, #4]
 80281a8:	460b      	mov	r3, r1
 80281aa:	807b      	strh	r3, [r7, #2]
 80281ac:	4613      	mov	r3, r2
 80281ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80281b0:	787b      	ldrb	r3, [r7, #1]
 80281b2:	2b00      	cmp	r3, #0
 80281b4:	d003      	beq.n	80281be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80281b6:	887a      	ldrh	r2, [r7, #2]
 80281b8:	687b      	ldr	r3, [r7, #4]
 80281ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80281bc:	e003      	b.n	80281c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80281be:	887b      	ldrh	r3, [r7, #2]
 80281c0:	041a      	lsls	r2, r3, #16
 80281c2:	687b      	ldr	r3, [r7, #4]
 80281c4:	619a      	str	r2, [r3, #24]
}
 80281c6:	bf00      	nop
 80281c8:	370c      	adds	r7, #12
 80281ca:	46bd      	mov	sp, r7
 80281cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281d0:	4770      	bx	lr
	...

080281d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80281d4:	b580      	push	{r7, lr}
 80281d6:	b084      	sub	sp, #16
 80281d8:	af00      	add	r7, sp, #0
 80281da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80281dc:	687b      	ldr	r3, [r7, #4]
 80281de:	2b00      	cmp	r3, #0
 80281e0:	d101      	bne.n	80281e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80281e2:	2301      	movs	r3, #1
 80281e4:	e11f      	b.n	8028426 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80281e6:	687b      	ldr	r3, [r7, #4]
 80281e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80281ec:	b2db      	uxtb	r3, r3
 80281ee:	2b00      	cmp	r3, #0
 80281f0:	d106      	bne.n	8028200 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80281f2:	687b      	ldr	r3, [r7, #4]
 80281f4:	2200      	movs	r2, #0
 80281f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80281fa:	6878      	ldr	r0, [r7, #4]
 80281fc:	f7fc fb70 	bl	80248e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8028200:	687b      	ldr	r3, [r7, #4]
 8028202:	2224      	movs	r2, #36	; 0x24
 8028204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8028208:	687b      	ldr	r3, [r7, #4]
 802820a:	681b      	ldr	r3, [r3, #0]
 802820c:	681a      	ldr	r2, [r3, #0]
 802820e:	687b      	ldr	r3, [r7, #4]
 8028210:	681b      	ldr	r3, [r3, #0]
 8028212:	f022 0201 	bic.w	r2, r2, #1
 8028216:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8028218:	687b      	ldr	r3, [r7, #4]
 802821a:	681b      	ldr	r3, [r3, #0]
 802821c:	681a      	ldr	r2, [r3, #0]
 802821e:	687b      	ldr	r3, [r7, #4]
 8028220:	681b      	ldr	r3, [r3, #0]
 8028222:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8028226:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8028228:	687b      	ldr	r3, [r7, #4]
 802822a:	681b      	ldr	r3, [r3, #0]
 802822c:	681a      	ldr	r2, [r3, #0]
 802822e:	687b      	ldr	r3, [r7, #4]
 8028230:	681b      	ldr	r3, [r3, #0]
 8028232:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8028236:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8028238:	f000 fd18 	bl	8028c6c <HAL_RCC_GetPCLK1Freq>
 802823c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 802823e:	687b      	ldr	r3, [r7, #4]
 8028240:	685b      	ldr	r3, [r3, #4]
 8028242:	4a7b      	ldr	r2, [pc, #492]	; (8028430 <HAL_I2C_Init+0x25c>)
 8028244:	4293      	cmp	r3, r2
 8028246:	d807      	bhi.n	8028258 <HAL_I2C_Init+0x84>
 8028248:	68fb      	ldr	r3, [r7, #12]
 802824a:	4a7a      	ldr	r2, [pc, #488]	; (8028434 <HAL_I2C_Init+0x260>)
 802824c:	4293      	cmp	r3, r2
 802824e:	bf94      	ite	ls
 8028250:	2301      	movls	r3, #1
 8028252:	2300      	movhi	r3, #0
 8028254:	b2db      	uxtb	r3, r3
 8028256:	e006      	b.n	8028266 <HAL_I2C_Init+0x92>
 8028258:	68fb      	ldr	r3, [r7, #12]
 802825a:	4a77      	ldr	r2, [pc, #476]	; (8028438 <HAL_I2C_Init+0x264>)
 802825c:	4293      	cmp	r3, r2
 802825e:	bf94      	ite	ls
 8028260:	2301      	movls	r3, #1
 8028262:	2300      	movhi	r3, #0
 8028264:	b2db      	uxtb	r3, r3
 8028266:	2b00      	cmp	r3, #0
 8028268:	d001      	beq.n	802826e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 802826a:	2301      	movs	r3, #1
 802826c:	e0db      	b.n	8028426 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 802826e:	68fb      	ldr	r3, [r7, #12]
 8028270:	4a72      	ldr	r2, [pc, #456]	; (802843c <HAL_I2C_Init+0x268>)
 8028272:	fba2 2303 	umull	r2, r3, r2, r3
 8028276:	0c9b      	lsrs	r3, r3, #18
 8028278:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802827a:	687b      	ldr	r3, [r7, #4]
 802827c:	681b      	ldr	r3, [r3, #0]
 802827e:	685b      	ldr	r3, [r3, #4]
 8028280:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8028284:	687b      	ldr	r3, [r7, #4]
 8028286:	681b      	ldr	r3, [r3, #0]
 8028288:	68ba      	ldr	r2, [r7, #8]
 802828a:	430a      	orrs	r2, r1
 802828c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802828e:	687b      	ldr	r3, [r7, #4]
 8028290:	681b      	ldr	r3, [r3, #0]
 8028292:	6a1b      	ldr	r3, [r3, #32]
 8028294:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8028298:	687b      	ldr	r3, [r7, #4]
 802829a:	685b      	ldr	r3, [r3, #4]
 802829c:	4a64      	ldr	r2, [pc, #400]	; (8028430 <HAL_I2C_Init+0x25c>)
 802829e:	4293      	cmp	r3, r2
 80282a0:	d802      	bhi.n	80282a8 <HAL_I2C_Init+0xd4>
 80282a2:	68bb      	ldr	r3, [r7, #8]
 80282a4:	3301      	adds	r3, #1
 80282a6:	e009      	b.n	80282bc <HAL_I2C_Init+0xe8>
 80282a8:	68bb      	ldr	r3, [r7, #8]
 80282aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80282ae:	fb02 f303 	mul.w	r3, r2, r3
 80282b2:	4a63      	ldr	r2, [pc, #396]	; (8028440 <HAL_I2C_Init+0x26c>)
 80282b4:	fba2 2303 	umull	r2, r3, r2, r3
 80282b8:	099b      	lsrs	r3, r3, #6
 80282ba:	3301      	adds	r3, #1
 80282bc:	687a      	ldr	r2, [r7, #4]
 80282be:	6812      	ldr	r2, [r2, #0]
 80282c0:	430b      	orrs	r3, r1
 80282c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80282c4:	687b      	ldr	r3, [r7, #4]
 80282c6:	681b      	ldr	r3, [r3, #0]
 80282c8:	69db      	ldr	r3, [r3, #28]
 80282ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80282ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80282d2:	687b      	ldr	r3, [r7, #4]
 80282d4:	685b      	ldr	r3, [r3, #4]
 80282d6:	4956      	ldr	r1, [pc, #344]	; (8028430 <HAL_I2C_Init+0x25c>)
 80282d8:	428b      	cmp	r3, r1
 80282da:	d80d      	bhi.n	80282f8 <HAL_I2C_Init+0x124>
 80282dc:	68fb      	ldr	r3, [r7, #12]
 80282de:	1e59      	subs	r1, r3, #1
 80282e0:	687b      	ldr	r3, [r7, #4]
 80282e2:	685b      	ldr	r3, [r3, #4]
 80282e4:	005b      	lsls	r3, r3, #1
 80282e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80282ea:	3301      	adds	r3, #1
 80282ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80282f0:	2b04      	cmp	r3, #4
 80282f2:	bf38      	it	cc
 80282f4:	2304      	movcc	r3, #4
 80282f6:	e04f      	b.n	8028398 <HAL_I2C_Init+0x1c4>
 80282f8:	687b      	ldr	r3, [r7, #4]
 80282fa:	689b      	ldr	r3, [r3, #8]
 80282fc:	2b00      	cmp	r3, #0
 80282fe:	d111      	bne.n	8028324 <HAL_I2C_Init+0x150>
 8028300:	68fb      	ldr	r3, [r7, #12]
 8028302:	1e58      	subs	r0, r3, #1
 8028304:	687b      	ldr	r3, [r7, #4]
 8028306:	6859      	ldr	r1, [r3, #4]
 8028308:	460b      	mov	r3, r1
 802830a:	005b      	lsls	r3, r3, #1
 802830c:	440b      	add	r3, r1
 802830e:	fbb0 f3f3 	udiv	r3, r0, r3
 8028312:	3301      	adds	r3, #1
 8028314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028318:	2b00      	cmp	r3, #0
 802831a:	bf0c      	ite	eq
 802831c:	2301      	moveq	r3, #1
 802831e:	2300      	movne	r3, #0
 8028320:	b2db      	uxtb	r3, r3
 8028322:	e012      	b.n	802834a <HAL_I2C_Init+0x176>
 8028324:	68fb      	ldr	r3, [r7, #12]
 8028326:	1e58      	subs	r0, r3, #1
 8028328:	687b      	ldr	r3, [r7, #4]
 802832a:	6859      	ldr	r1, [r3, #4]
 802832c:	460b      	mov	r3, r1
 802832e:	009b      	lsls	r3, r3, #2
 8028330:	440b      	add	r3, r1
 8028332:	0099      	lsls	r1, r3, #2
 8028334:	440b      	add	r3, r1
 8028336:	fbb0 f3f3 	udiv	r3, r0, r3
 802833a:	3301      	adds	r3, #1
 802833c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028340:	2b00      	cmp	r3, #0
 8028342:	bf0c      	ite	eq
 8028344:	2301      	moveq	r3, #1
 8028346:	2300      	movne	r3, #0
 8028348:	b2db      	uxtb	r3, r3
 802834a:	2b00      	cmp	r3, #0
 802834c:	d001      	beq.n	8028352 <HAL_I2C_Init+0x17e>
 802834e:	2301      	movs	r3, #1
 8028350:	e022      	b.n	8028398 <HAL_I2C_Init+0x1c4>
 8028352:	687b      	ldr	r3, [r7, #4]
 8028354:	689b      	ldr	r3, [r3, #8]
 8028356:	2b00      	cmp	r3, #0
 8028358:	d10e      	bne.n	8028378 <HAL_I2C_Init+0x1a4>
 802835a:	68fb      	ldr	r3, [r7, #12]
 802835c:	1e58      	subs	r0, r3, #1
 802835e:	687b      	ldr	r3, [r7, #4]
 8028360:	6859      	ldr	r1, [r3, #4]
 8028362:	460b      	mov	r3, r1
 8028364:	005b      	lsls	r3, r3, #1
 8028366:	440b      	add	r3, r1
 8028368:	fbb0 f3f3 	udiv	r3, r0, r3
 802836c:	3301      	adds	r3, #1
 802836e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8028376:	e00f      	b.n	8028398 <HAL_I2C_Init+0x1c4>
 8028378:	68fb      	ldr	r3, [r7, #12]
 802837a:	1e58      	subs	r0, r3, #1
 802837c:	687b      	ldr	r3, [r7, #4]
 802837e:	6859      	ldr	r1, [r3, #4]
 8028380:	460b      	mov	r3, r1
 8028382:	009b      	lsls	r3, r3, #2
 8028384:	440b      	add	r3, r1
 8028386:	0099      	lsls	r1, r3, #2
 8028388:	440b      	add	r3, r1
 802838a:	fbb0 f3f3 	udiv	r3, r0, r3
 802838e:	3301      	adds	r3, #1
 8028390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8028398:	6879      	ldr	r1, [r7, #4]
 802839a:	6809      	ldr	r1, [r1, #0]
 802839c:	4313      	orrs	r3, r2
 802839e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80283a0:	687b      	ldr	r3, [r7, #4]
 80283a2:	681b      	ldr	r3, [r3, #0]
 80283a4:	681b      	ldr	r3, [r3, #0]
 80283a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80283aa:	687b      	ldr	r3, [r7, #4]
 80283ac:	69da      	ldr	r2, [r3, #28]
 80283ae:	687b      	ldr	r3, [r7, #4]
 80283b0:	6a1b      	ldr	r3, [r3, #32]
 80283b2:	431a      	orrs	r2, r3
 80283b4:	687b      	ldr	r3, [r7, #4]
 80283b6:	681b      	ldr	r3, [r3, #0]
 80283b8:	430a      	orrs	r2, r1
 80283ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80283bc:	687b      	ldr	r3, [r7, #4]
 80283be:	681b      	ldr	r3, [r3, #0]
 80283c0:	689b      	ldr	r3, [r3, #8]
 80283c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80283c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80283ca:	687a      	ldr	r2, [r7, #4]
 80283cc:	6911      	ldr	r1, [r2, #16]
 80283ce:	687a      	ldr	r2, [r7, #4]
 80283d0:	68d2      	ldr	r2, [r2, #12]
 80283d2:	4311      	orrs	r1, r2
 80283d4:	687a      	ldr	r2, [r7, #4]
 80283d6:	6812      	ldr	r2, [r2, #0]
 80283d8:	430b      	orrs	r3, r1
 80283da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80283dc:	687b      	ldr	r3, [r7, #4]
 80283de:	681b      	ldr	r3, [r3, #0]
 80283e0:	68db      	ldr	r3, [r3, #12]
 80283e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80283e6:	687b      	ldr	r3, [r7, #4]
 80283e8:	695a      	ldr	r2, [r3, #20]
 80283ea:	687b      	ldr	r3, [r7, #4]
 80283ec:	699b      	ldr	r3, [r3, #24]
 80283ee:	431a      	orrs	r2, r3
 80283f0:	687b      	ldr	r3, [r7, #4]
 80283f2:	681b      	ldr	r3, [r3, #0]
 80283f4:	430a      	orrs	r2, r1
 80283f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80283f8:	687b      	ldr	r3, [r7, #4]
 80283fa:	681b      	ldr	r3, [r3, #0]
 80283fc:	681a      	ldr	r2, [r3, #0]
 80283fe:	687b      	ldr	r3, [r7, #4]
 8028400:	681b      	ldr	r3, [r3, #0]
 8028402:	f042 0201 	orr.w	r2, r2, #1
 8028406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8028408:	687b      	ldr	r3, [r7, #4]
 802840a:	2200      	movs	r2, #0
 802840c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 802840e:	687b      	ldr	r3, [r7, #4]
 8028410:	2220      	movs	r2, #32
 8028412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8028416:	687b      	ldr	r3, [r7, #4]
 8028418:	2200      	movs	r2, #0
 802841a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802841c:	687b      	ldr	r3, [r7, #4]
 802841e:	2200      	movs	r2, #0
 8028420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8028424:	2300      	movs	r3, #0
}
 8028426:	4618      	mov	r0, r3
 8028428:	3710      	adds	r7, #16
 802842a:	46bd      	mov	sp, r7
 802842c:	bd80      	pop	{r7, pc}
 802842e:	bf00      	nop
 8028430:	000186a0 	.word	0x000186a0
 8028434:	001e847f 	.word	0x001e847f
 8028438:	003d08ff 	.word	0x003d08ff
 802843c:	431bde83 	.word	0x431bde83
 8028440:	10624dd3 	.word	0x10624dd3

08028444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8028444:	b580      	push	{r7, lr}
 8028446:	b086      	sub	sp, #24
 8028448:	af00      	add	r7, sp, #0
 802844a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 802844c:	687b      	ldr	r3, [r7, #4]
 802844e:	2b00      	cmp	r3, #0
 8028450:	d101      	bne.n	8028456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8028452:	2301      	movs	r3, #1
 8028454:	e25b      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8028456:	687b      	ldr	r3, [r7, #4]
 8028458:	681b      	ldr	r3, [r3, #0]
 802845a:	f003 0301 	and.w	r3, r3, #1
 802845e:	2b00      	cmp	r3, #0
 8028460:	d075      	beq.n	802854e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8028462:	4ba3      	ldr	r3, [pc, #652]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 8028464:	689b      	ldr	r3, [r3, #8]
 8028466:	f003 030c 	and.w	r3, r3, #12
 802846a:	2b04      	cmp	r3, #4
 802846c:	d00c      	beq.n	8028488 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802846e:	4ba0      	ldr	r3, [pc, #640]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 8028470:	689b      	ldr	r3, [r3, #8]
 8028472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8028476:	2b08      	cmp	r3, #8
 8028478:	d112      	bne.n	80284a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802847a:	4b9d      	ldr	r3, [pc, #628]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 802847c:	685b      	ldr	r3, [r3, #4]
 802847e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8028482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8028486:	d10b      	bne.n	80284a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8028488:	4b99      	ldr	r3, [pc, #612]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 802848a:	681b      	ldr	r3, [r3, #0]
 802848c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028490:	2b00      	cmp	r3, #0
 8028492:	d05b      	beq.n	802854c <HAL_RCC_OscConfig+0x108>
 8028494:	687b      	ldr	r3, [r7, #4]
 8028496:	685b      	ldr	r3, [r3, #4]
 8028498:	2b00      	cmp	r3, #0
 802849a:	d157      	bne.n	802854c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 802849c:	2301      	movs	r3, #1
 802849e:	e236      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80284a0:	687b      	ldr	r3, [r7, #4]
 80284a2:	685b      	ldr	r3, [r3, #4]
 80284a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80284a8:	d106      	bne.n	80284b8 <HAL_RCC_OscConfig+0x74>
 80284aa:	4b91      	ldr	r3, [pc, #580]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80284ac:	681b      	ldr	r3, [r3, #0]
 80284ae:	4a90      	ldr	r2, [pc, #576]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80284b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80284b4:	6013      	str	r3, [r2, #0]
 80284b6:	e01d      	b.n	80284f4 <HAL_RCC_OscConfig+0xb0>
 80284b8:	687b      	ldr	r3, [r7, #4]
 80284ba:	685b      	ldr	r3, [r3, #4]
 80284bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80284c0:	d10c      	bne.n	80284dc <HAL_RCC_OscConfig+0x98>
 80284c2:	4b8b      	ldr	r3, [pc, #556]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80284c4:	681b      	ldr	r3, [r3, #0]
 80284c6:	4a8a      	ldr	r2, [pc, #552]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80284c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80284cc:	6013      	str	r3, [r2, #0]
 80284ce:	4b88      	ldr	r3, [pc, #544]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80284d0:	681b      	ldr	r3, [r3, #0]
 80284d2:	4a87      	ldr	r2, [pc, #540]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80284d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80284d8:	6013      	str	r3, [r2, #0]
 80284da:	e00b      	b.n	80284f4 <HAL_RCC_OscConfig+0xb0>
 80284dc:	4b84      	ldr	r3, [pc, #528]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80284de:	681b      	ldr	r3, [r3, #0]
 80284e0:	4a83      	ldr	r2, [pc, #524]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80284e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80284e6:	6013      	str	r3, [r2, #0]
 80284e8:	4b81      	ldr	r3, [pc, #516]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80284ea:	681b      	ldr	r3, [r3, #0]
 80284ec:	4a80      	ldr	r2, [pc, #512]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80284ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80284f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80284f4:	687b      	ldr	r3, [r7, #4]
 80284f6:	685b      	ldr	r3, [r3, #4]
 80284f8:	2b00      	cmp	r3, #0
 80284fa:	d013      	beq.n	8028524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80284fc:	f7fe f926 	bl	802674c <HAL_GetTick>
 8028500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8028502:	e008      	b.n	8028516 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8028504:	f7fe f922 	bl	802674c <HAL_GetTick>
 8028508:	4602      	mov	r2, r0
 802850a:	693b      	ldr	r3, [r7, #16]
 802850c:	1ad3      	subs	r3, r2, r3
 802850e:	2b64      	cmp	r3, #100	; 0x64
 8028510:	d901      	bls.n	8028516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8028512:	2303      	movs	r3, #3
 8028514:	e1fb      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8028516:	4b76      	ldr	r3, [pc, #472]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 8028518:	681b      	ldr	r3, [r3, #0]
 802851a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802851e:	2b00      	cmp	r3, #0
 8028520:	d0f0      	beq.n	8028504 <HAL_RCC_OscConfig+0xc0>
 8028522:	e014      	b.n	802854e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028524:	f7fe f912 	bl	802674c <HAL_GetTick>
 8028528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802852a:	e008      	b.n	802853e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802852c:	f7fe f90e 	bl	802674c <HAL_GetTick>
 8028530:	4602      	mov	r2, r0
 8028532:	693b      	ldr	r3, [r7, #16]
 8028534:	1ad3      	subs	r3, r2, r3
 8028536:	2b64      	cmp	r3, #100	; 0x64
 8028538:	d901      	bls.n	802853e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802853a:	2303      	movs	r3, #3
 802853c:	e1e7      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802853e:	4b6c      	ldr	r3, [pc, #432]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 8028540:	681b      	ldr	r3, [r3, #0]
 8028542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028546:	2b00      	cmp	r3, #0
 8028548:	d1f0      	bne.n	802852c <HAL_RCC_OscConfig+0xe8>
 802854a:	e000      	b.n	802854e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802854c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802854e:	687b      	ldr	r3, [r7, #4]
 8028550:	681b      	ldr	r3, [r3, #0]
 8028552:	f003 0302 	and.w	r3, r3, #2
 8028556:	2b00      	cmp	r3, #0
 8028558:	d063      	beq.n	8028622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802855a:	4b65      	ldr	r3, [pc, #404]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 802855c:	689b      	ldr	r3, [r3, #8]
 802855e:	f003 030c 	and.w	r3, r3, #12
 8028562:	2b00      	cmp	r3, #0
 8028564:	d00b      	beq.n	802857e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8028566:	4b62      	ldr	r3, [pc, #392]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 8028568:	689b      	ldr	r3, [r3, #8]
 802856a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802856e:	2b08      	cmp	r3, #8
 8028570:	d11c      	bne.n	80285ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8028572:	4b5f      	ldr	r3, [pc, #380]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 8028574:	685b      	ldr	r3, [r3, #4]
 8028576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802857a:	2b00      	cmp	r3, #0
 802857c:	d116      	bne.n	80285ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802857e:	4b5c      	ldr	r3, [pc, #368]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 8028580:	681b      	ldr	r3, [r3, #0]
 8028582:	f003 0302 	and.w	r3, r3, #2
 8028586:	2b00      	cmp	r3, #0
 8028588:	d005      	beq.n	8028596 <HAL_RCC_OscConfig+0x152>
 802858a:	687b      	ldr	r3, [r7, #4]
 802858c:	68db      	ldr	r3, [r3, #12]
 802858e:	2b01      	cmp	r3, #1
 8028590:	d001      	beq.n	8028596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8028592:	2301      	movs	r3, #1
 8028594:	e1bb      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8028596:	4b56      	ldr	r3, [pc, #344]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 8028598:	681b      	ldr	r3, [r3, #0]
 802859a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802859e:	687b      	ldr	r3, [r7, #4]
 80285a0:	691b      	ldr	r3, [r3, #16]
 80285a2:	00db      	lsls	r3, r3, #3
 80285a4:	4952      	ldr	r1, [pc, #328]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80285a6:	4313      	orrs	r3, r2
 80285a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80285aa:	e03a      	b.n	8028622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80285ac:	687b      	ldr	r3, [r7, #4]
 80285ae:	68db      	ldr	r3, [r3, #12]
 80285b0:	2b00      	cmp	r3, #0
 80285b2:	d020      	beq.n	80285f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80285b4:	4b4f      	ldr	r3, [pc, #316]	; (80286f4 <HAL_RCC_OscConfig+0x2b0>)
 80285b6:	2201      	movs	r2, #1
 80285b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80285ba:	f7fe f8c7 	bl	802674c <HAL_GetTick>
 80285be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80285c0:	e008      	b.n	80285d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80285c2:	f7fe f8c3 	bl	802674c <HAL_GetTick>
 80285c6:	4602      	mov	r2, r0
 80285c8:	693b      	ldr	r3, [r7, #16]
 80285ca:	1ad3      	subs	r3, r2, r3
 80285cc:	2b02      	cmp	r3, #2
 80285ce:	d901      	bls.n	80285d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80285d0:	2303      	movs	r3, #3
 80285d2:	e19c      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80285d4:	4b46      	ldr	r3, [pc, #280]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80285d6:	681b      	ldr	r3, [r3, #0]
 80285d8:	f003 0302 	and.w	r3, r3, #2
 80285dc:	2b00      	cmp	r3, #0
 80285de:	d0f0      	beq.n	80285c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80285e0:	4b43      	ldr	r3, [pc, #268]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80285e2:	681b      	ldr	r3, [r3, #0]
 80285e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80285e8:	687b      	ldr	r3, [r7, #4]
 80285ea:	691b      	ldr	r3, [r3, #16]
 80285ec:	00db      	lsls	r3, r3, #3
 80285ee:	4940      	ldr	r1, [pc, #256]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80285f0:	4313      	orrs	r3, r2
 80285f2:	600b      	str	r3, [r1, #0]
 80285f4:	e015      	b.n	8028622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80285f6:	4b3f      	ldr	r3, [pc, #252]	; (80286f4 <HAL_RCC_OscConfig+0x2b0>)
 80285f8:	2200      	movs	r2, #0
 80285fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80285fc:	f7fe f8a6 	bl	802674c <HAL_GetTick>
 8028600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8028602:	e008      	b.n	8028616 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8028604:	f7fe f8a2 	bl	802674c <HAL_GetTick>
 8028608:	4602      	mov	r2, r0
 802860a:	693b      	ldr	r3, [r7, #16]
 802860c:	1ad3      	subs	r3, r2, r3
 802860e:	2b02      	cmp	r3, #2
 8028610:	d901      	bls.n	8028616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8028612:	2303      	movs	r3, #3
 8028614:	e17b      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8028616:	4b36      	ldr	r3, [pc, #216]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 8028618:	681b      	ldr	r3, [r3, #0]
 802861a:	f003 0302 	and.w	r3, r3, #2
 802861e:	2b00      	cmp	r3, #0
 8028620:	d1f0      	bne.n	8028604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8028622:	687b      	ldr	r3, [r7, #4]
 8028624:	681b      	ldr	r3, [r3, #0]
 8028626:	f003 0308 	and.w	r3, r3, #8
 802862a:	2b00      	cmp	r3, #0
 802862c:	d030      	beq.n	8028690 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802862e:	687b      	ldr	r3, [r7, #4]
 8028630:	695b      	ldr	r3, [r3, #20]
 8028632:	2b00      	cmp	r3, #0
 8028634:	d016      	beq.n	8028664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8028636:	4b30      	ldr	r3, [pc, #192]	; (80286f8 <HAL_RCC_OscConfig+0x2b4>)
 8028638:	2201      	movs	r2, #1
 802863a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802863c:	f7fe f886 	bl	802674c <HAL_GetTick>
 8028640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8028642:	e008      	b.n	8028656 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8028644:	f7fe f882 	bl	802674c <HAL_GetTick>
 8028648:	4602      	mov	r2, r0
 802864a:	693b      	ldr	r3, [r7, #16]
 802864c:	1ad3      	subs	r3, r2, r3
 802864e:	2b02      	cmp	r3, #2
 8028650:	d901      	bls.n	8028656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8028652:	2303      	movs	r3, #3
 8028654:	e15b      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8028656:	4b26      	ldr	r3, [pc, #152]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 8028658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802865a:	f003 0302 	and.w	r3, r3, #2
 802865e:	2b00      	cmp	r3, #0
 8028660:	d0f0      	beq.n	8028644 <HAL_RCC_OscConfig+0x200>
 8028662:	e015      	b.n	8028690 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8028664:	4b24      	ldr	r3, [pc, #144]	; (80286f8 <HAL_RCC_OscConfig+0x2b4>)
 8028666:	2200      	movs	r2, #0
 8028668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802866a:	f7fe f86f 	bl	802674c <HAL_GetTick>
 802866e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8028670:	e008      	b.n	8028684 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8028672:	f7fe f86b 	bl	802674c <HAL_GetTick>
 8028676:	4602      	mov	r2, r0
 8028678:	693b      	ldr	r3, [r7, #16]
 802867a:	1ad3      	subs	r3, r2, r3
 802867c:	2b02      	cmp	r3, #2
 802867e:	d901      	bls.n	8028684 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8028680:	2303      	movs	r3, #3
 8028682:	e144      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8028684:	4b1a      	ldr	r3, [pc, #104]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 8028686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028688:	f003 0302 	and.w	r3, r3, #2
 802868c:	2b00      	cmp	r3, #0
 802868e:	d1f0      	bne.n	8028672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8028690:	687b      	ldr	r3, [r7, #4]
 8028692:	681b      	ldr	r3, [r3, #0]
 8028694:	f003 0304 	and.w	r3, r3, #4
 8028698:	2b00      	cmp	r3, #0
 802869a:	f000 80a0 	beq.w	80287de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 802869e:	2300      	movs	r3, #0
 80286a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80286a2:	4b13      	ldr	r3, [pc, #76]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80286a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80286a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80286aa:	2b00      	cmp	r3, #0
 80286ac:	d10f      	bne.n	80286ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80286ae:	2300      	movs	r3, #0
 80286b0:	60bb      	str	r3, [r7, #8]
 80286b2:	4b0f      	ldr	r3, [pc, #60]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80286b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80286b6:	4a0e      	ldr	r2, [pc, #56]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80286b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80286bc:	6413      	str	r3, [r2, #64]	; 0x40
 80286be:	4b0c      	ldr	r3, [pc, #48]	; (80286f0 <HAL_RCC_OscConfig+0x2ac>)
 80286c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80286c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80286c6:	60bb      	str	r3, [r7, #8]
 80286c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80286ca:	2301      	movs	r3, #1
 80286cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80286ce:	4b0b      	ldr	r3, [pc, #44]	; (80286fc <HAL_RCC_OscConfig+0x2b8>)
 80286d0:	681b      	ldr	r3, [r3, #0]
 80286d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80286d6:	2b00      	cmp	r3, #0
 80286d8:	d121      	bne.n	802871e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80286da:	4b08      	ldr	r3, [pc, #32]	; (80286fc <HAL_RCC_OscConfig+0x2b8>)
 80286dc:	681b      	ldr	r3, [r3, #0]
 80286de:	4a07      	ldr	r2, [pc, #28]	; (80286fc <HAL_RCC_OscConfig+0x2b8>)
 80286e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80286e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80286e6:	f7fe f831 	bl	802674c <HAL_GetTick>
 80286ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80286ec:	e011      	b.n	8028712 <HAL_RCC_OscConfig+0x2ce>
 80286ee:	bf00      	nop
 80286f0:	40023800 	.word	0x40023800
 80286f4:	42470000 	.word	0x42470000
 80286f8:	42470e80 	.word	0x42470e80
 80286fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8028700:	f7fe f824 	bl	802674c <HAL_GetTick>
 8028704:	4602      	mov	r2, r0
 8028706:	693b      	ldr	r3, [r7, #16]
 8028708:	1ad3      	subs	r3, r2, r3
 802870a:	2b02      	cmp	r3, #2
 802870c:	d901      	bls.n	8028712 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 802870e:	2303      	movs	r3, #3
 8028710:	e0fd      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028712:	4b81      	ldr	r3, [pc, #516]	; (8028918 <HAL_RCC_OscConfig+0x4d4>)
 8028714:	681b      	ldr	r3, [r3, #0]
 8028716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802871a:	2b00      	cmp	r3, #0
 802871c:	d0f0      	beq.n	8028700 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802871e:	687b      	ldr	r3, [r7, #4]
 8028720:	689b      	ldr	r3, [r3, #8]
 8028722:	2b01      	cmp	r3, #1
 8028724:	d106      	bne.n	8028734 <HAL_RCC_OscConfig+0x2f0>
 8028726:	4b7d      	ldr	r3, [pc, #500]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 8028728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802872a:	4a7c      	ldr	r2, [pc, #496]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 802872c:	f043 0301 	orr.w	r3, r3, #1
 8028730:	6713      	str	r3, [r2, #112]	; 0x70
 8028732:	e01c      	b.n	802876e <HAL_RCC_OscConfig+0x32a>
 8028734:	687b      	ldr	r3, [r7, #4]
 8028736:	689b      	ldr	r3, [r3, #8]
 8028738:	2b05      	cmp	r3, #5
 802873a:	d10c      	bne.n	8028756 <HAL_RCC_OscConfig+0x312>
 802873c:	4b77      	ldr	r3, [pc, #476]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 802873e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028740:	4a76      	ldr	r2, [pc, #472]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 8028742:	f043 0304 	orr.w	r3, r3, #4
 8028746:	6713      	str	r3, [r2, #112]	; 0x70
 8028748:	4b74      	ldr	r3, [pc, #464]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 802874a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802874c:	4a73      	ldr	r2, [pc, #460]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 802874e:	f043 0301 	orr.w	r3, r3, #1
 8028752:	6713      	str	r3, [r2, #112]	; 0x70
 8028754:	e00b      	b.n	802876e <HAL_RCC_OscConfig+0x32a>
 8028756:	4b71      	ldr	r3, [pc, #452]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 8028758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802875a:	4a70      	ldr	r2, [pc, #448]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 802875c:	f023 0301 	bic.w	r3, r3, #1
 8028760:	6713      	str	r3, [r2, #112]	; 0x70
 8028762:	4b6e      	ldr	r3, [pc, #440]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 8028764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028766:	4a6d      	ldr	r2, [pc, #436]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 8028768:	f023 0304 	bic.w	r3, r3, #4
 802876c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802876e:	687b      	ldr	r3, [r7, #4]
 8028770:	689b      	ldr	r3, [r3, #8]
 8028772:	2b00      	cmp	r3, #0
 8028774:	d015      	beq.n	80287a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028776:	f7fd ffe9 	bl	802674c <HAL_GetTick>
 802877a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802877c:	e00a      	b.n	8028794 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802877e:	f7fd ffe5 	bl	802674c <HAL_GetTick>
 8028782:	4602      	mov	r2, r0
 8028784:	693b      	ldr	r3, [r7, #16]
 8028786:	1ad3      	subs	r3, r2, r3
 8028788:	f241 3288 	movw	r2, #5000	; 0x1388
 802878c:	4293      	cmp	r3, r2
 802878e:	d901      	bls.n	8028794 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8028790:	2303      	movs	r3, #3
 8028792:	e0bc      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028794:	4b61      	ldr	r3, [pc, #388]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 8028796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028798:	f003 0302 	and.w	r3, r3, #2
 802879c:	2b00      	cmp	r3, #0
 802879e:	d0ee      	beq.n	802877e <HAL_RCC_OscConfig+0x33a>
 80287a0:	e014      	b.n	80287cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80287a2:	f7fd ffd3 	bl	802674c <HAL_GetTick>
 80287a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80287a8:	e00a      	b.n	80287c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80287aa:	f7fd ffcf 	bl	802674c <HAL_GetTick>
 80287ae:	4602      	mov	r2, r0
 80287b0:	693b      	ldr	r3, [r7, #16]
 80287b2:	1ad3      	subs	r3, r2, r3
 80287b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80287b8:	4293      	cmp	r3, r2
 80287ba:	d901      	bls.n	80287c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80287bc:	2303      	movs	r3, #3
 80287be:	e0a6      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80287c0:	4b56      	ldr	r3, [pc, #344]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 80287c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80287c4:	f003 0302 	and.w	r3, r3, #2
 80287c8:	2b00      	cmp	r3, #0
 80287ca:	d1ee      	bne.n	80287aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80287cc:	7dfb      	ldrb	r3, [r7, #23]
 80287ce:	2b01      	cmp	r3, #1
 80287d0:	d105      	bne.n	80287de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80287d2:	4b52      	ldr	r3, [pc, #328]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 80287d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80287d6:	4a51      	ldr	r2, [pc, #324]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 80287d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80287dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80287de:	687b      	ldr	r3, [r7, #4]
 80287e0:	699b      	ldr	r3, [r3, #24]
 80287e2:	2b00      	cmp	r3, #0
 80287e4:	f000 8092 	beq.w	802890c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80287e8:	4b4c      	ldr	r3, [pc, #304]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 80287ea:	689b      	ldr	r3, [r3, #8]
 80287ec:	f003 030c 	and.w	r3, r3, #12
 80287f0:	2b08      	cmp	r3, #8
 80287f2:	d05c      	beq.n	80288ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80287f4:	687b      	ldr	r3, [r7, #4]
 80287f6:	699b      	ldr	r3, [r3, #24]
 80287f8:	2b02      	cmp	r3, #2
 80287fa:	d141      	bne.n	8028880 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80287fc:	4b48      	ldr	r3, [pc, #288]	; (8028920 <HAL_RCC_OscConfig+0x4dc>)
 80287fe:	2200      	movs	r2, #0
 8028800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028802:	f7fd ffa3 	bl	802674c <HAL_GetTick>
 8028806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028808:	e008      	b.n	802881c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802880a:	f7fd ff9f 	bl	802674c <HAL_GetTick>
 802880e:	4602      	mov	r2, r0
 8028810:	693b      	ldr	r3, [r7, #16]
 8028812:	1ad3      	subs	r3, r2, r3
 8028814:	2b02      	cmp	r3, #2
 8028816:	d901      	bls.n	802881c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8028818:	2303      	movs	r3, #3
 802881a:	e078      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802881c:	4b3f      	ldr	r3, [pc, #252]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 802881e:	681b      	ldr	r3, [r3, #0]
 8028820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028824:	2b00      	cmp	r3, #0
 8028826:	d1f0      	bne.n	802880a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8028828:	687b      	ldr	r3, [r7, #4]
 802882a:	69da      	ldr	r2, [r3, #28]
 802882c:	687b      	ldr	r3, [r7, #4]
 802882e:	6a1b      	ldr	r3, [r3, #32]
 8028830:	431a      	orrs	r2, r3
 8028832:	687b      	ldr	r3, [r7, #4]
 8028834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028836:	019b      	lsls	r3, r3, #6
 8028838:	431a      	orrs	r2, r3
 802883a:	687b      	ldr	r3, [r7, #4]
 802883c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802883e:	085b      	lsrs	r3, r3, #1
 8028840:	3b01      	subs	r3, #1
 8028842:	041b      	lsls	r3, r3, #16
 8028844:	431a      	orrs	r2, r3
 8028846:	687b      	ldr	r3, [r7, #4]
 8028848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802884a:	061b      	lsls	r3, r3, #24
 802884c:	4933      	ldr	r1, [pc, #204]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 802884e:	4313      	orrs	r3, r2
 8028850:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8028852:	4b33      	ldr	r3, [pc, #204]	; (8028920 <HAL_RCC_OscConfig+0x4dc>)
 8028854:	2201      	movs	r2, #1
 8028856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028858:	f7fd ff78 	bl	802674c <HAL_GetTick>
 802885c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802885e:	e008      	b.n	8028872 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028860:	f7fd ff74 	bl	802674c <HAL_GetTick>
 8028864:	4602      	mov	r2, r0
 8028866:	693b      	ldr	r3, [r7, #16]
 8028868:	1ad3      	subs	r3, r2, r3
 802886a:	2b02      	cmp	r3, #2
 802886c:	d901      	bls.n	8028872 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 802886e:	2303      	movs	r3, #3
 8028870:	e04d      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028872:	4b2a      	ldr	r3, [pc, #168]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 8028874:	681b      	ldr	r3, [r3, #0]
 8028876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802887a:	2b00      	cmp	r3, #0
 802887c:	d0f0      	beq.n	8028860 <HAL_RCC_OscConfig+0x41c>
 802887e:	e045      	b.n	802890c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8028880:	4b27      	ldr	r3, [pc, #156]	; (8028920 <HAL_RCC_OscConfig+0x4dc>)
 8028882:	2200      	movs	r2, #0
 8028884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028886:	f7fd ff61 	bl	802674c <HAL_GetTick>
 802888a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802888c:	e008      	b.n	80288a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802888e:	f7fd ff5d 	bl	802674c <HAL_GetTick>
 8028892:	4602      	mov	r2, r0
 8028894:	693b      	ldr	r3, [r7, #16]
 8028896:	1ad3      	subs	r3, r2, r3
 8028898:	2b02      	cmp	r3, #2
 802889a:	d901      	bls.n	80288a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 802889c:	2303      	movs	r3, #3
 802889e:	e036      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80288a0:	4b1e      	ldr	r3, [pc, #120]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 80288a2:	681b      	ldr	r3, [r3, #0]
 80288a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80288a8:	2b00      	cmp	r3, #0
 80288aa:	d1f0      	bne.n	802888e <HAL_RCC_OscConfig+0x44a>
 80288ac:	e02e      	b.n	802890c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80288ae:	687b      	ldr	r3, [r7, #4]
 80288b0:	699b      	ldr	r3, [r3, #24]
 80288b2:	2b01      	cmp	r3, #1
 80288b4:	d101      	bne.n	80288ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80288b6:	2301      	movs	r3, #1
 80288b8:	e029      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80288ba:	4b18      	ldr	r3, [pc, #96]	; (802891c <HAL_RCC_OscConfig+0x4d8>)
 80288bc:	685b      	ldr	r3, [r3, #4]
 80288be:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80288c0:	68fb      	ldr	r3, [r7, #12]
 80288c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80288c6:	687b      	ldr	r3, [r7, #4]
 80288c8:	69db      	ldr	r3, [r3, #28]
 80288ca:	429a      	cmp	r2, r3
 80288cc:	d11c      	bne.n	8028908 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80288ce:	68fb      	ldr	r3, [r7, #12]
 80288d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80288d4:	687b      	ldr	r3, [r7, #4]
 80288d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80288d8:	429a      	cmp	r2, r3
 80288da:	d115      	bne.n	8028908 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80288dc:	68fa      	ldr	r2, [r7, #12]
 80288de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80288e2:	4013      	ands	r3, r2
 80288e4:	687a      	ldr	r2, [r7, #4]
 80288e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80288e8:	4293      	cmp	r3, r2
 80288ea:	d10d      	bne.n	8028908 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80288ec:	68fb      	ldr	r3, [r7, #12]
 80288ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80288f2:	687b      	ldr	r3, [r7, #4]
 80288f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80288f6:	429a      	cmp	r2, r3
 80288f8:	d106      	bne.n	8028908 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80288fa:	68fb      	ldr	r3, [r7, #12]
 80288fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8028900:	687b      	ldr	r3, [r7, #4]
 8028902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8028904:	429a      	cmp	r2, r3
 8028906:	d001      	beq.n	802890c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8028908:	2301      	movs	r3, #1
 802890a:	e000      	b.n	802890e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 802890c:	2300      	movs	r3, #0
}
 802890e:	4618      	mov	r0, r3
 8028910:	3718      	adds	r7, #24
 8028912:	46bd      	mov	sp, r7
 8028914:	bd80      	pop	{r7, pc}
 8028916:	bf00      	nop
 8028918:	40007000 	.word	0x40007000
 802891c:	40023800 	.word	0x40023800
 8028920:	42470060 	.word	0x42470060

08028924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8028924:	b580      	push	{r7, lr}
 8028926:	b084      	sub	sp, #16
 8028928:	af00      	add	r7, sp, #0
 802892a:	6078      	str	r0, [r7, #4]
 802892c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802892e:	687b      	ldr	r3, [r7, #4]
 8028930:	2b00      	cmp	r3, #0
 8028932:	d101      	bne.n	8028938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8028934:	2301      	movs	r3, #1
 8028936:	e0cc      	b.n	8028ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8028938:	4b68      	ldr	r3, [pc, #416]	; (8028adc <HAL_RCC_ClockConfig+0x1b8>)
 802893a:	681b      	ldr	r3, [r3, #0]
 802893c:	f003 030f 	and.w	r3, r3, #15
 8028940:	683a      	ldr	r2, [r7, #0]
 8028942:	429a      	cmp	r2, r3
 8028944:	d90c      	bls.n	8028960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8028946:	4b65      	ldr	r3, [pc, #404]	; (8028adc <HAL_RCC_ClockConfig+0x1b8>)
 8028948:	683a      	ldr	r2, [r7, #0]
 802894a:	b2d2      	uxtb	r2, r2
 802894c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802894e:	4b63      	ldr	r3, [pc, #396]	; (8028adc <HAL_RCC_ClockConfig+0x1b8>)
 8028950:	681b      	ldr	r3, [r3, #0]
 8028952:	f003 030f 	and.w	r3, r3, #15
 8028956:	683a      	ldr	r2, [r7, #0]
 8028958:	429a      	cmp	r2, r3
 802895a:	d001      	beq.n	8028960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802895c:	2301      	movs	r3, #1
 802895e:	e0b8      	b.n	8028ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8028960:	687b      	ldr	r3, [r7, #4]
 8028962:	681b      	ldr	r3, [r3, #0]
 8028964:	f003 0302 	and.w	r3, r3, #2
 8028968:	2b00      	cmp	r3, #0
 802896a:	d020      	beq.n	80289ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802896c:	687b      	ldr	r3, [r7, #4]
 802896e:	681b      	ldr	r3, [r3, #0]
 8028970:	f003 0304 	and.w	r3, r3, #4
 8028974:	2b00      	cmp	r3, #0
 8028976:	d005      	beq.n	8028984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8028978:	4b59      	ldr	r3, [pc, #356]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 802897a:	689b      	ldr	r3, [r3, #8]
 802897c:	4a58      	ldr	r2, [pc, #352]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 802897e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8028982:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028984:	687b      	ldr	r3, [r7, #4]
 8028986:	681b      	ldr	r3, [r3, #0]
 8028988:	f003 0308 	and.w	r3, r3, #8
 802898c:	2b00      	cmp	r3, #0
 802898e:	d005      	beq.n	802899c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8028990:	4b53      	ldr	r3, [pc, #332]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8028992:	689b      	ldr	r3, [r3, #8]
 8028994:	4a52      	ldr	r2, [pc, #328]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8028996:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802899a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802899c:	4b50      	ldr	r3, [pc, #320]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 802899e:	689b      	ldr	r3, [r3, #8]
 80289a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80289a4:	687b      	ldr	r3, [r7, #4]
 80289a6:	689b      	ldr	r3, [r3, #8]
 80289a8:	494d      	ldr	r1, [pc, #308]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80289aa:	4313      	orrs	r3, r2
 80289ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80289ae:	687b      	ldr	r3, [r7, #4]
 80289b0:	681b      	ldr	r3, [r3, #0]
 80289b2:	f003 0301 	and.w	r3, r3, #1
 80289b6:	2b00      	cmp	r3, #0
 80289b8:	d044      	beq.n	8028a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80289ba:	687b      	ldr	r3, [r7, #4]
 80289bc:	685b      	ldr	r3, [r3, #4]
 80289be:	2b01      	cmp	r3, #1
 80289c0:	d107      	bne.n	80289d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80289c2:	4b47      	ldr	r3, [pc, #284]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80289c4:	681b      	ldr	r3, [r3, #0]
 80289c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80289ca:	2b00      	cmp	r3, #0
 80289cc:	d119      	bne.n	8028a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80289ce:	2301      	movs	r3, #1
 80289d0:	e07f      	b.n	8028ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80289d2:	687b      	ldr	r3, [r7, #4]
 80289d4:	685b      	ldr	r3, [r3, #4]
 80289d6:	2b02      	cmp	r3, #2
 80289d8:	d003      	beq.n	80289e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80289da:	687b      	ldr	r3, [r7, #4]
 80289dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80289de:	2b03      	cmp	r3, #3
 80289e0:	d107      	bne.n	80289f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80289e2:	4b3f      	ldr	r3, [pc, #252]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80289e4:	681b      	ldr	r3, [r3, #0]
 80289e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80289ea:	2b00      	cmp	r3, #0
 80289ec:	d109      	bne.n	8028a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80289ee:	2301      	movs	r3, #1
 80289f0:	e06f      	b.n	8028ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80289f2:	4b3b      	ldr	r3, [pc, #236]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80289f4:	681b      	ldr	r3, [r3, #0]
 80289f6:	f003 0302 	and.w	r3, r3, #2
 80289fa:	2b00      	cmp	r3, #0
 80289fc:	d101      	bne.n	8028a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80289fe:	2301      	movs	r3, #1
 8028a00:	e067      	b.n	8028ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8028a02:	4b37      	ldr	r3, [pc, #220]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8028a04:	689b      	ldr	r3, [r3, #8]
 8028a06:	f023 0203 	bic.w	r2, r3, #3
 8028a0a:	687b      	ldr	r3, [r7, #4]
 8028a0c:	685b      	ldr	r3, [r3, #4]
 8028a0e:	4934      	ldr	r1, [pc, #208]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8028a10:	4313      	orrs	r3, r2
 8028a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8028a14:	f7fd fe9a 	bl	802674c <HAL_GetTick>
 8028a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028a1a:	e00a      	b.n	8028a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8028a1c:	f7fd fe96 	bl	802674c <HAL_GetTick>
 8028a20:	4602      	mov	r2, r0
 8028a22:	68fb      	ldr	r3, [r7, #12]
 8028a24:	1ad3      	subs	r3, r2, r3
 8028a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8028a2a:	4293      	cmp	r3, r2
 8028a2c:	d901      	bls.n	8028a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8028a2e:	2303      	movs	r3, #3
 8028a30:	e04f      	b.n	8028ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028a32:	4b2b      	ldr	r3, [pc, #172]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8028a34:	689b      	ldr	r3, [r3, #8]
 8028a36:	f003 020c 	and.w	r2, r3, #12
 8028a3a:	687b      	ldr	r3, [r7, #4]
 8028a3c:	685b      	ldr	r3, [r3, #4]
 8028a3e:	009b      	lsls	r3, r3, #2
 8028a40:	429a      	cmp	r2, r3
 8028a42:	d1eb      	bne.n	8028a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8028a44:	4b25      	ldr	r3, [pc, #148]	; (8028adc <HAL_RCC_ClockConfig+0x1b8>)
 8028a46:	681b      	ldr	r3, [r3, #0]
 8028a48:	f003 030f 	and.w	r3, r3, #15
 8028a4c:	683a      	ldr	r2, [r7, #0]
 8028a4e:	429a      	cmp	r2, r3
 8028a50:	d20c      	bcs.n	8028a6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8028a52:	4b22      	ldr	r3, [pc, #136]	; (8028adc <HAL_RCC_ClockConfig+0x1b8>)
 8028a54:	683a      	ldr	r2, [r7, #0]
 8028a56:	b2d2      	uxtb	r2, r2
 8028a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8028a5a:	4b20      	ldr	r3, [pc, #128]	; (8028adc <HAL_RCC_ClockConfig+0x1b8>)
 8028a5c:	681b      	ldr	r3, [r3, #0]
 8028a5e:	f003 030f 	and.w	r3, r3, #15
 8028a62:	683a      	ldr	r2, [r7, #0]
 8028a64:	429a      	cmp	r2, r3
 8028a66:	d001      	beq.n	8028a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8028a68:	2301      	movs	r3, #1
 8028a6a:	e032      	b.n	8028ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028a6c:	687b      	ldr	r3, [r7, #4]
 8028a6e:	681b      	ldr	r3, [r3, #0]
 8028a70:	f003 0304 	and.w	r3, r3, #4
 8028a74:	2b00      	cmp	r3, #0
 8028a76:	d008      	beq.n	8028a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8028a78:	4b19      	ldr	r3, [pc, #100]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8028a7a:	689b      	ldr	r3, [r3, #8]
 8028a7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8028a80:	687b      	ldr	r3, [r7, #4]
 8028a82:	68db      	ldr	r3, [r3, #12]
 8028a84:	4916      	ldr	r1, [pc, #88]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8028a86:	4313      	orrs	r3, r2
 8028a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028a8a:	687b      	ldr	r3, [r7, #4]
 8028a8c:	681b      	ldr	r3, [r3, #0]
 8028a8e:	f003 0308 	and.w	r3, r3, #8
 8028a92:	2b00      	cmp	r3, #0
 8028a94:	d009      	beq.n	8028aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8028a96:	4b12      	ldr	r3, [pc, #72]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8028a98:	689b      	ldr	r3, [r3, #8]
 8028a9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8028a9e:	687b      	ldr	r3, [r7, #4]
 8028aa0:	691b      	ldr	r3, [r3, #16]
 8028aa2:	00db      	lsls	r3, r3, #3
 8028aa4:	490e      	ldr	r1, [pc, #56]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8028aa6:	4313      	orrs	r3, r2
 8028aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8028aaa:	f000 f821 	bl	8028af0 <HAL_RCC_GetSysClockFreq>
 8028aae:	4601      	mov	r1, r0
 8028ab0:	4b0b      	ldr	r3, [pc, #44]	; (8028ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8028ab2:	689b      	ldr	r3, [r3, #8]
 8028ab4:	091b      	lsrs	r3, r3, #4
 8028ab6:	f003 030f 	and.w	r3, r3, #15
 8028aba:	4a0a      	ldr	r2, [pc, #40]	; (8028ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8028abc:	5cd3      	ldrb	r3, [r2, r3]
 8028abe:	fa21 f303 	lsr.w	r3, r1, r3
 8028ac2:	4a09      	ldr	r2, [pc, #36]	; (8028ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8028ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8028ac6:	4b09      	ldr	r3, [pc, #36]	; (8028aec <HAL_RCC_ClockConfig+0x1c8>)
 8028ac8:	681b      	ldr	r3, [r3, #0]
 8028aca:	4618      	mov	r0, r3
 8028acc:	f7fd fdfa 	bl	80266c4 <HAL_InitTick>

  return HAL_OK;
 8028ad0:	2300      	movs	r3, #0
}
 8028ad2:	4618      	mov	r0, r3
 8028ad4:	3710      	adds	r7, #16
 8028ad6:	46bd      	mov	sp, r7
 8028ad8:	bd80      	pop	{r7, pc}
 8028ada:	bf00      	nop
 8028adc:	40023c00 	.word	0x40023c00
 8028ae0:	40023800 	.word	0x40023800
 8028ae4:	0802a828 	.word	0x0802a828
 8028ae8:	20000010 	.word	0x20000010
 8028aec:	20000014 	.word	0x20000014

08028af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8028af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028af2:	b085      	sub	sp, #20
 8028af4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8028af6:	2300      	movs	r3, #0
 8028af8:	607b      	str	r3, [r7, #4]
 8028afa:	2300      	movs	r3, #0
 8028afc:	60fb      	str	r3, [r7, #12]
 8028afe:	2300      	movs	r3, #0
 8028b00:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8028b02:	2300      	movs	r3, #0
 8028b04:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8028b06:	4b50      	ldr	r3, [pc, #320]	; (8028c48 <HAL_RCC_GetSysClockFreq+0x158>)
 8028b08:	689b      	ldr	r3, [r3, #8]
 8028b0a:	f003 030c 	and.w	r3, r3, #12
 8028b0e:	2b04      	cmp	r3, #4
 8028b10:	d007      	beq.n	8028b22 <HAL_RCC_GetSysClockFreq+0x32>
 8028b12:	2b08      	cmp	r3, #8
 8028b14:	d008      	beq.n	8028b28 <HAL_RCC_GetSysClockFreq+0x38>
 8028b16:	2b00      	cmp	r3, #0
 8028b18:	f040 808d 	bne.w	8028c36 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8028b1c:	4b4b      	ldr	r3, [pc, #300]	; (8028c4c <HAL_RCC_GetSysClockFreq+0x15c>)
 8028b1e:	60bb      	str	r3, [r7, #8]
       break;
 8028b20:	e08c      	b.n	8028c3c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8028b22:	4b4b      	ldr	r3, [pc, #300]	; (8028c50 <HAL_RCC_GetSysClockFreq+0x160>)
 8028b24:	60bb      	str	r3, [r7, #8]
      break;
 8028b26:	e089      	b.n	8028c3c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8028b28:	4b47      	ldr	r3, [pc, #284]	; (8028c48 <HAL_RCC_GetSysClockFreq+0x158>)
 8028b2a:	685b      	ldr	r3, [r3, #4]
 8028b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8028b30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8028b32:	4b45      	ldr	r3, [pc, #276]	; (8028c48 <HAL_RCC_GetSysClockFreq+0x158>)
 8028b34:	685b      	ldr	r3, [r3, #4]
 8028b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8028b3a:	2b00      	cmp	r3, #0
 8028b3c:	d023      	beq.n	8028b86 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8028b3e:	4b42      	ldr	r3, [pc, #264]	; (8028c48 <HAL_RCC_GetSysClockFreq+0x158>)
 8028b40:	685b      	ldr	r3, [r3, #4]
 8028b42:	099b      	lsrs	r3, r3, #6
 8028b44:	f04f 0400 	mov.w	r4, #0
 8028b48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8028b4c:	f04f 0200 	mov.w	r2, #0
 8028b50:	ea03 0501 	and.w	r5, r3, r1
 8028b54:	ea04 0602 	and.w	r6, r4, r2
 8028b58:	4a3d      	ldr	r2, [pc, #244]	; (8028c50 <HAL_RCC_GetSysClockFreq+0x160>)
 8028b5a:	fb02 f106 	mul.w	r1, r2, r6
 8028b5e:	2200      	movs	r2, #0
 8028b60:	fb02 f205 	mul.w	r2, r2, r5
 8028b64:	440a      	add	r2, r1
 8028b66:	493a      	ldr	r1, [pc, #232]	; (8028c50 <HAL_RCC_GetSysClockFreq+0x160>)
 8028b68:	fba5 0101 	umull	r0, r1, r5, r1
 8028b6c:	1853      	adds	r3, r2, r1
 8028b6e:	4619      	mov	r1, r3
 8028b70:	687b      	ldr	r3, [r7, #4]
 8028b72:	f04f 0400 	mov.w	r4, #0
 8028b76:	461a      	mov	r2, r3
 8028b78:	4623      	mov	r3, r4
 8028b7a:	f7f7 ff07 	bl	802098c <__aeabi_uldivmod>
 8028b7e:	4603      	mov	r3, r0
 8028b80:	460c      	mov	r4, r1
 8028b82:	60fb      	str	r3, [r7, #12]
 8028b84:	e049      	b.n	8028c1a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8028b86:	4b30      	ldr	r3, [pc, #192]	; (8028c48 <HAL_RCC_GetSysClockFreq+0x158>)
 8028b88:	685b      	ldr	r3, [r3, #4]
 8028b8a:	099b      	lsrs	r3, r3, #6
 8028b8c:	f04f 0400 	mov.w	r4, #0
 8028b90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8028b94:	f04f 0200 	mov.w	r2, #0
 8028b98:	ea03 0501 	and.w	r5, r3, r1
 8028b9c:	ea04 0602 	and.w	r6, r4, r2
 8028ba0:	4629      	mov	r1, r5
 8028ba2:	4632      	mov	r2, r6
 8028ba4:	f04f 0300 	mov.w	r3, #0
 8028ba8:	f04f 0400 	mov.w	r4, #0
 8028bac:	0154      	lsls	r4, r2, #5
 8028bae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8028bb2:	014b      	lsls	r3, r1, #5
 8028bb4:	4619      	mov	r1, r3
 8028bb6:	4622      	mov	r2, r4
 8028bb8:	1b49      	subs	r1, r1, r5
 8028bba:	eb62 0206 	sbc.w	r2, r2, r6
 8028bbe:	f04f 0300 	mov.w	r3, #0
 8028bc2:	f04f 0400 	mov.w	r4, #0
 8028bc6:	0194      	lsls	r4, r2, #6
 8028bc8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8028bcc:	018b      	lsls	r3, r1, #6
 8028bce:	1a5b      	subs	r3, r3, r1
 8028bd0:	eb64 0402 	sbc.w	r4, r4, r2
 8028bd4:	f04f 0100 	mov.w	r1, #0
 8028bd8:	f04f 0200 	mov.w	r2, #0
 8028bdc:	00e2      	lsls	r2, r4, #3
 8028bde:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8028be2:	00d9      	lsls	r1, r3, #3
 8028be4:	460b      	mov	r3, r1
 8028be6:	4614      	mov	r4, r2
 8028be8:	195b      	adds	r3, r3, r5
 8028bea:	eb44 0406 	adc.w	r4, r4, r6
 8028bee:	f04f 0100 	mov.w	r1, #0
 8028bf2:	f04f 0200 	mov.w	r2, #0
 8028bf6:	02a2      	lsls	r2, r4, #10
 8028bf8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8028bfc:	0299      	lsls	r1, r3, #10
 8028bfe:	460b      	mov	r3, r1
 8028c00:	4614      	mov	r4, r2
 8028c02:	4618      	mov	r0, r3
 8028c04:	4621      	mov	r1, r4
 8028c06:	687b      	ldr	r3, [r7, #4]
 8028c08:	f04f 0400 	mov.w	r4, #0
 8028c0c:	461a      	mov	r2, r3
 8028c0e:	4623      	mov	r3, r4
 8028c10:	f7f7 febc 	bl	802098c <__aeabi_uldivmod>
 8028c14:	4603      	mov	r3, r0
 8028c16:	460c      	mov	r4, r1
 8028c18:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8028c1a:	4b0b      	ldr	r3, [pc, #44]	; (8028c48 <HAL_RCC_GetSysClockFreq+0x158>)
 8028c1c:	685b      	ldr	r3, [r3, #4]
 8028c1e:	0c1b      	lsrs	r3, r3, #16
 8028c20:	f003 0303 	and.w	r3, r3, #3
 8028c24:	3301      	adds	r3, #1
 8028c26:	005b      	lsls	r3, r3, #1
 8028c28:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8028c2a:	68fa      	ldr	r2, [r7, #12]
 8028c2c:	683b      	ldr	r3, [r7, #0]
 8028c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8028c32:	60bb      	str	r3, [r7, #8]
      break;
 8028c34:	e002      	b.n	8028c3c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8028c36:	4b05      	ldr	r3, [pc, #20]	; (8028c4c <HAL_RCC_GetSysClockFreq+0x15c>)
 8028c38:	60bb      	str	r3, [r7, #8]
      break;
 8028c3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8028c3c:	68bb      	ldr	r3, [r7, #8]
}
 8028c3e:	4618      	mov	r0, r3
 8028c40:	3714      	adds	r7, #20
 8028c42:	46bd      	mov	sp, r7
 8028c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028c46:	bf00      	nop
 8028c48:	40023800 	.word	0x40023800
 8028c4c:	00f42400 	.word	0x00f42400
 8028c50:	00b71b00 	.word	0x00b71b00

08028c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8028c54:	b480      	push	{r7}
 8028c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8028c58:	4b03      	ldr	r3, [pc, #12]	; (8028c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8028c5a:	681b      	ldr	r3, [r3, #0]
}
 8028c5c:	4618      	mov	r0, r3
 8028c5e:	46bd      	mov	sp, r7
 8028c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c64:	4770      	bx	lr
 8028c66:	bf00      	nop
 8028c68:	20000010 	.word	0x20000010

08028c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8028c6c:	b580      	push	{r7, lr}
 8028c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8028c70:	f7ff fff0 	bl	8028c54 <HAL_RCC_GetHCLKFreq>
 8028c74:	4601      	mov	r1, r0
 8028c76:	4b05      	ldr	r3, [pc, #20]	; (8028c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8028c78:	689b      	ldr	r3, [r3, #8]
 8028c7a:	0a9b      	lsrs	r3, r3, #10
 8028c7c:	f003 0307 	and.w	r3, r3, #7
 8028c80:	4a03      	ldr	r2, [pc, #12]	; (8028c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8028c82:	5cd3      	ldrb	r3, [r2, r3]
 8028c84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8028c88:	4618      	mov	r0, r3
 8028c8a:	bd80      	pop	{r7, pc}
 8028c8c:	40023800 	.word	0x40023800
 8028c90:	0802a838 	.word	0x0802a838

08028c94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8028c94:	b580      	push	{r7, lr}
 8028c96:	b082      	sub	sp, #8
 8028c98:	af00      	add	r7, sp, #0
 8028c9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8028c9c:	687b      	ldr	r3, [r7, #4]
 8028c9e:	2b00      	cmp	r3, #0
 8028ca0:	d101      	bne.n	8028ca6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8028ca2:	2301      	movs	r3, #1
 8028ca4:	e056      	b.n	8028d54 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8028ca6:	687b      	ldr	r3, [r7, #4]
 8028ca8:	2200      	movs	r2, #0
 8028caa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8028cac:	687b      	ldr	r3, [r7, #4]
 8028cae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028cb2:	b2db      	uxtb	r3, r3
 8028cb4:	2b00      	cmp	r3, #0
 8028cb6:	d106      	bne.n	8028cc6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8028cb8:	687b      	ldr	r3, [r7, #4]
 8028cba:	2200      	movs	r2, #0
 8028cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8028cc0:	6878      	ldr	r0, [r7, #4]
 8028cc2:	f7fb fe55 	bl	8024970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8028cc6:	687b      	ldr	r3, [r7, #4]
 8028cc8:	2202      	movs	r2, #2
 8028cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8028cce:	687b      	ldr	r3, [r7, #4]
 8028cd0:	681b      	ldr	r3, [r3, #0]
 8028cd2:	681a      	ldr	r2, [r3, #0]
 8028cd4:	687b      	ldr	r3, [r7, #4]
 8028cd6:	681b      	ldr	r3, [r3, #0]
 8028cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028cdc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8028cde:	687b      	ldr	r3, [r7, #4]
 8028ce0:	685a      	ldr	r2, [r3, #4]
 8028ce2:	687b      	ldr	r3, [r7, #4]
 8028ce4:	689b      	ldr	r3, [r3, #8]
 8028ce6:	431a      	orrs	r2, r3
 8028ce8:	687b      	ldr	r3, [r7, #4]
 8028cea:	68db      	ldr	r3, [r3, #12]
 8028cec:	431a      	orrs	r2, r3
 8028cee:	687b      	ldr	r3, [r7, #4]
 8028cf0:	691b      	ldr	r3, [r3, #16]
 8028cf2:	431a      	orrs	r2, r3
 8028cf4:	687b      	ldr	r3, [r7, #4]
 8028cf6:	695b      	ldr	r3, [r3, #20]
 8028cf8:	431a      	orrs	r2, r3
 8028cfa:	687b      	ldr	r3, [r7, #4]
 8028cfc:	699b      	ldr	r3, [r3, #24]
 8028cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8028d02:	431a      	orrs	r2, r3
 8028d04:	687b      	ldr	r3, [r7, #4]
 8028d06:	69db      	ldr	r3, [r3, #28]
 8028d08:	431a      	orrs	r2, r3
 8028d0a:	687b      	ldr	r3, [r7, #4]
 8028d0c:	6a1b      	ldr	r3, [r3, #32]
 8028d0e:	ea42 0103 	orr.w	r1, r2, r3
 8028d12:	687b      	ldr	r3, [r7, #4]
 8028d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8028d16:	687b      	ldr	r3, [r7, #4]
 8028d18:	681b      	ldr	r3, [r3, #0]
 8028d1a:	430a      	orrs	r2, r1
 8028d1c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8028d1e:	687b      	ldr	r3, [r7, #4]
 8028d20:	699b      	ldr	r3, [r3, #24]
 8028d22:	0c1b      	lsrs	r3, r3, #16
 8028d24:	f003 0104 	and.w	r1, r3, #4
 8028d28:	687b      	ldr	r3, [r7, #4]
 8028d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028d2c:	687b      	ldr	r3, [r7, #4]
 8028d2e:	681b      	ldr	r3, [r3, #0]
 8028d30:	430a      	orrs	r2, r1
 8028d32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8028d34:	687b      	ldr	r3, [r7, #4]
 8028d36:	681b      	ldr	r3, [r3, #0]
 8028d38:	69da      	ldr	r2, [r3, #28]
 8028d3a:	687b      	ldr	r3, [r7, #4]
 8028d3c:	681b      	ldr	r3, [r3, #0]
 8028d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8028d42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8028d44:	687b      	ldr	r3, [r7, #4]
 8028d46:	2200      	movs	r2, #0
 8028d48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8028d4a:	687b      	ldr	r3, [r7, #4]
 8028d4c:	2201      	movs	r2, #1
 8028d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8028d52:	2300      	movs	r3, #0
}
 8028d54:	4618      	mov	r0, r3
 8028d56:	3708      	adds	r7, #8
 8028d58:	46bd      	mov	sp, r7
 8028d5a:	bd80      	pop	{r7, pc}

08028d5c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028d5c:	b580      	push	{r7, lr}
 8028d5e:	b088      	sub	sp, #32
 8028d60:	af00      	add	r7, sp, #0
 8028d62:	60f8      	str	r0, [r7, #12]
 8028d64:	60b9      	str	r1, [r7, #8]
 8028d66:	603b      	str	r3, [r7, #0]
 8028d68:	4613      	mov	r3, r2
 8028d6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028d6c:	2300      	movs	r3, #0
 8028d6e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028d70:	68fb      	ldr	r3, [r7, #12]
 8028d72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028d76:	2b01      	cmp	r3, #1
 8028d78:	d101      	bne.n	8028d7e <HAL_SPI_Transmit+0x22>
 8028d7a:	2302      	movs	r3, #2
 8028d7c:	e11e      	b.n	8028fbc <HAL_SPI_Transmit+0x260>
 8028d7e:	68fb      	ldr	r3, [r7, #12]
 8028d80:	2201      	movs	r2, #1
 8028d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028d86:	f7fd fce1 	bl	802674c <HAL_GetTick>
 8028d8a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8028d8c:	88fb      	ldrh	r3, [r7, #6]
 8028d8e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028d90:	68fb      	ldr	r3, [r7, #12]
 8028d92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028d96:	b2db      	uxtb	r3, r3
 8028d98:	2b01      	cmp	r3, #1
 8028d9a:	d002      	beq.n	8028da2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8028d9c:	2302      	movs	r3, #2
 8028d9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028da0:	e103      	b.n	8028faa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8028da2:	68bb      	ldr	r3, [r7, #8]
 8028da4:	2b00      	cmp	r3, #0
 8028da6:	d002      	beq.n	8028dae <HAL_SPI_Transmit+0x52>
 8028da8:	88fb      	ldrh	r3, [r7, #6]
 8028daa:	2b00      	cmp	r3, #0
 8028dac:	d102      	bne.n	8028db4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8028dae:	2301      	movs	r3, #1
 8028db0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028db2:	e0fa      	b.n	8028faa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8028db4:	68fb      	ldr	r3, [r7, #12]
 8028db6:	2203      	movs	r2, #3
 8028db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028dbc:	68fb      	ldr	r3, [r7, #12]
 8028dbe:	2200      	movs	r2, #0
 8028dc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8028dc2:	68fb      	ldr	r3, [r7, #12]
 8028dc4:	68ba      	ldr	r2, [r7, #8]
 8028dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8028dc8:	68fb      	ldr	r3, [r7, #12]
 8028dca:	88fa      	ldrh	r2, [r7, #6]
 8028dcc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8028dce:	68fb      	ldr	r3, [r7, #12]
 8028dd0:	88fa      	ldrh	r2, [r7, #6]
 8028dd2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8028dd4:	68fb      	ldr	r3, [r7, #12]
 8028dd6:	2200      	movs	r2, #0
 8028dd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8028dda:	68fb      	ldr	r3, [r7, #12]
 8028ddc:	2200      	movs	r2, #0
 8028dde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8028de0:	68fb      	ldr	r3, [r7, #12]
 8028de2:	2200      	movs	r2, #0
 8028de4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8028de6:	68fb      	ldr	r3, [r7, #12]
 8028de8:	2200      	movs	r2, #0
 8028dea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8028dec:	68fb      	ldr	r3, [r7, #12]
 8028dee:	2200      	movs	r2, #0
 8028df0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028df2:	68fb      	ldr	r3, [r7, #12]
 8028df4:	689b      	ldr	r3, [r3, #8]
 8028df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028dfa:	d107      	bne.n	8028e0c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8028dfc:	68fb      	ldr	r3, [r7, #12]
 8028dfe:	681b      	ldr	r3, [r3, #0]
 8028e00:	681a      	ldr	r2, [r3, #0]
 8028e02:	68fb      	ldr	r3, [r7, #12]
 8028e04:	681b      	ldr	r3, [r3, #0]
 8028e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8028e0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028e0c:	68fb      	ldr	r3, [r7, #12]
 8028e0e:	681b      	ldr	r3, [r3, #0]
 8028e10:	681b      	ldr	r3, [r3, #0]
 8028e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028e16:	2b40      	cmp	r3, #64	; 0x40
 8028e18:	d007      	beq.n	8028e2a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028e1a:	68fb      	ldr	r3, [r7, #12]
 8028e1c:	681b      	ldr	r3, [r3, #0]
 8028e1e:	681a      	ldr	r2, [r3, #0]
 8028e20:	68fb      	ldr	r3, [r7, #12]
 8028e22:	681b      	ldr	r3, [r3, #0]
 8028e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028e28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028e2a:	68fb      	ldr	r3, [r7, #12]
 8028e2c:	68db      	ldr	r3, [r3, #12]
 8028e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028e32:	d14b      	bne.n	8028ecc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028e34:	68fb      	ldr	r3, [r7, #12]
 8028e36:	685b      	ldr	r3, [r3, #4]
 8028e38:	2b00      	cmp	r3, #0
 8028e3a:	d002      	beq.n	8028e42 <HAL_SPI_Transmit+0xe6>
 8028e3c:	8afb      	ldrh	r3, [r7, #22]
 8028e3e:	2b01      	cmp	r3, #1
 8028e40:	d13e      	bne.n	8028ec0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028e42:	68fb      	ldr	r3, [r7, #12]
 8028e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e46:	881a      	ldrh	r2, [r3, #0]
 8028e48:	68fb      	ldr	r3, [r7, #12]
 8028e4a:	681b      	ldr	r3, [r3, #0]
 8028e4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8028e4e:	68fb      	ldr	r3, [r7, #12]
 8028e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e52:	1c9a      	adds	r2, r3, #2
 8028e54:	68fb      	ldr	r3, [r7, #12]
 8028e56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028e58:	68fb      	ldr	r3, [r7, #12]
 8028e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028e5c:	b29b      	uxth	r3, r3
 8028e5e:	3b01      	subs	r3, #1
 8028e60:	b29a      	uxth	r2, r3
 8028e62:	68fb      	ldr	r3, [r7, #12]
 8028e64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8028e66:	e02b      	b.n	8028ec0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028e68:	68fb      	ldr	r3, [r7, #12]
 8028e6a:	681b      	ldr	r3, [r3, #0]
 8028e6c:	689b      	ldr	r3, [r3, #8]
 8028e6e:	f003 0302 	and.w	r3, r3, #2
 8028e72:	2b02      	cmp	r3, #2
 8028e74:	d112      	bne.n	8028e9c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028e76:	68fb      	ldr	r3, [r7, #12]
 8028e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e7a:	881a      	ldrh	r2, [r3, #0]
 8028e7c:	68fb      	ldr	r3, [r7, #12]
 8028e7e:	681b      	ldr	r3, [r3, #0]
 8028e80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028e82:	68fb      	ldr	r3, [r7, #12]
 8028e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e86:	1c9a      	adds	r2, r3, #2
 8028e88:	68fb      	ldr	r3, [r7, #12]
 8028e8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028e8c:	68fb      	ldr	r3, [r7, #12]
 8028e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028e90:	b29b      	uxth	r3, r3
 8028e92:	3b01      	subs	r3, #1
 8028e94:	b29a      	uxth	r2, r3
 8028e96:	68fb      	ldr	r3, [r7, #12]
 8028e98:	86da      	strh	r2, [r3, #54]	; 0x36
 8028e9a:	e011      	b.n	8028ec0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028e9c:	f7fd fc56 	bl	802674c <HAL_GetTick>
 8028ea0:	4602      	mov	r2, r0
 8028ea2:	69bb      	ldr	r3, [r7, #24]
 8028ea4:	1ad3      	subs	r3, r2, r3
 8028ea6:	683a      	ldr	r2, [r7, #0]
 8028ea8:	429a      	cmp	r2, r3
 8028eaa:	d803      	bhi.n	8028eb4 <HAL_SPI_Transmit+0x158>
 8028eac:	683b      	ldr	r3, [r7, #0]
 8028eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028eb2:	d102      	bne.n	8028eba <HAL_SPI_Transmit+0x15e>
 8028eb4:	683b      	ldr	r3, [r7, #0]
 8028eb6:	2b00      	cmp	r3, #0
 8028eb8:	d102      	bne.n	8028ec0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8028eba:	2303      	movs	r3, #3
 8028ebc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028ebe:	e074      	b.n	8028faa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8028ec0:	68fb      	ldr	r3, [r7, #12]
 8028ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028ec4:	b29b      	uxth	r3, r3
 8028ec6:	2b00      	cmp	r3, #0
 8028ec8:	d1ce      	bne.n	8028e68 <HAL_SPI_Transmit+0x10c>
 8028eca:	e04c      	b.n	8028f66 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028ecc:	68fb      	ldr	r3, [r7, #12]
 8028ece:	685b      	ldr	r3, [r3, #4]
 8028ed0:	2b00      	cmp	r3, #0
 8028ed2:	d002      	beq.n	8028eda <HAL_SPI_Transmit+0x17e>
 8028ed4:	8afb      	ldrh	r3, [r7, #22]
 8028ed6:	2b01      	cmp	r3, #1
 8028ed8:	d140      	bne.n	8028f5c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028eda:	68fb      	ldr	r3, [r7, #12]
 8028edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028ede:	68fb      	ldr	r3, [r7, #12]
 8028ee0:	681b      	ldr	r3, [r3, #0]
 8028ee2:	330c      	adds	r3, #12
 8028ee4:	7812      	ldrb	r2, [r2, #0]
 8028ee6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028ee8:	68fb      	ldr	r3, [r7, #12]
 8028eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028eec:	1c5a      	adds	r2, r3, #1
 8028eee:	68fb      	ldr	r3, [r7, #12]
 8028ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028ef2:	68fb      	ldr	r3, [r7, #12]
 8028ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028ef6:	b29b      	uxth	r3, r3
 8028ef8:	3b01      	subs	r3, #1
 8028efa:	b29a      	uxth	r2, r3
 8028efc:	68fb      	ldr	r3, [r7, #12]
 8028efe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8028f00:	e02c      	b.n	8028f5c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028f02:	68fb      	ldr	r3, [r7, #12]
 8028f04:	681b      	ldr	r3, [r3, #0]
 8028f06:	689b      	ldr	r3, [r3, #8]
 8028f08:	f003 0302 	and.w	r3, r3, #2
 8028f0c:	2b02      	cmp	r3, #2
 8028f0e:	d113      	bne.n	8028f38 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028f10:	68fb      	ldr	r3, [r7, #12]
 8028f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028f14:	68fb      	ldr	r3, [r7, #12]
 8028f16:	681b      	ldr	r3, [r3, #0]
 8028f18:	330c      	adds	r3, #12
 8028f1a:	7812      	ldrb	r2, [r2, #0]
 8028f1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8028f1e:	68fb      	ldr	r3, [r7, #12]
 8028f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028f22:	1c5a      	adds	r2, r3, #1
 8028f24:	68fb      	ldr	r3, [r7, #12]
 8028f26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028f28:	68fb      	ldr	r3, [r7, #12]
 8028f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028f2c:	b29b      	uxth	r3, r3
 8028f2e:	3b01      	subs	r3, #1
 8028f30:	b29a      	uxth	r2, r3
 8028f32:	68fb      	ldr	r3, [r7, #12]
 8028f34:	86da      	strh	r2, [r3, #54]	; 0x36
 8028f36:	e011      	b.n	8028f5c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028f38:	f7fd fc08 	bl	802674c <HAL_GetTick>
 8028f3c:	4602      	mov	r2, r0
 8028f3e:	69bb      	ldr	r3, [r7, #24]
 8028f40:	1ad3      	subs	r3, r2, r3
 8028f42:	683a      	ldr	r2, [r7, #0]
 8028f44:	429a      	cmp	r2, r3
 8028f46:	d803      	bhi.n	8028f50 <HAL_SPI_Transmit+0x1f4>
 8028f48:	683b      	ldr	r3, [r7, #0]
 8028f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028f4e:	d102      	bne.n	8028f56 <HAL_SPI_Transmit+0x1fa>
 8028f50:	683b      	ldr	r3, [r7, #0]
 8028f52:	2b00      	cmp	r3, #0
 8028f54:	d102      	bne.n	8028f5c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8028f56:	2303      	movs	r3, #3
 8028f58:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028f5a:	e026      	b.n	8028faa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8028f5c:	68fb      	ldr	r3, [r7, #12]
 8028f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028f60:	b29b      	uxth	r3, r3
 8028f62:	2b00      	cmp	r3, #0
 8028f64:	d1cd      	bne.n	8028f02 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028f66:	69ba      	ldr	r2, [r7, #24]
 8028f68:	6839      	ldr	r1, [r7, #0]
 8028f6a:	68f8      	ldr	r0, [r7, #12]
 8028f6c:	f000 fba4 	bl	80296b8 <SPI_EndRxTxTransaction>
 8028f70:	4603      	mov	r3, r0
 8028f72:	2b00      	cmp	r3, #0
 8028f74:	d002      	beq.n	8028f7c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028f76:	68fb      	ldr	r3, [r7, #12]
 8028f78:	2220      	movs	r2, #32
 8028f7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028f7c:	68fb      	ldr	r3, [r7, #12]
 8028f7e:	689b      	ldr	r3, [r3, #8]
 8028f80:	2b00      	cmp	r3, #0
 8028f82:	d10a      	bne.n	8028f9a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028f84:	2300      	movs	r3, #0
 8028f86:	613b      	str	r3, [r7, #16]
 8028f88:	68fb      	ldr	r3, [r7, #12]
 8028f8a:	681b      	ldr	r3, [r3, #0]
 8028f8c:	68db      	ldr	r3, [r3, #12]
 8028f8e:	613b      	str	r3, [r7, #16]
 8028f90:	68fb      	ldr	r3, [r7, #12]
 8028f92:	681b      	ldr	r3, [r3, #0]
 8028f94:	689b      	ldr	r3, [r3, #8]
 8028f96:	613b      	str	r3, [r7, #16]
 8028f98:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028f9a:	68fb      	ldr	r3, [r7, #12]
 8028f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028f9e:	2b00      	cmp	r3, #0
 8028fa0:	d002      	beq.n	8028fa8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8028fa2:	2301      	movs	r3, #1
 8028fa4:	77fb      	strb	r3, [r7, #31]
 8028fa6:	e000      	b.n	8028faa <HAL_SPI_Transmit+0x24e>
  }

error:
 8028fa8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028faa:	68fb      	ldr	r3, [r7, #12]
 8028fac:	2201      	movs	r2, #1
 8028fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8028fb2:	68fb      	ldr	r3, [r7, #12]
 8028fb4:	2200      	movs	r2, #0
 8028fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028fba:	7ffb      	ldrb	r3, [r7, #31]
}
 8028fbc:	4618      	mov	r0, r3
 8028fbe:	3720      	adds	r7, #32
 8028fc0:	46bd      	mov	sp, r7
 8028fc2:	bd80      	pop	{r7, pc}

08028fc4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028fc4:	b580      	push	{r7, lr}
 8028fc6:	b088      	sub	sp, #32
 8028fc8:	af02      	add	r7, sp, #8
 8028fca:	60f8      	str	r0, [r7, #12]
 8028fcc:	60b9      	str	r1, [r7, #8]
 8028fce:	603b      	str	r3, [r7, #0]
 8028fd0:	4613      	mov	r3, r2
 8028fd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028fd4:	2300      	movs	r3, #0
 8028fd6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8028fd8:	68fb      	ldr	r3, [r7, #12]
 8028fda:	685b      	ldr	r3, [r3, #4]
 8028fdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028fe0:	d112      	bne.n	8029008 <HAL_SPI_Receive+0x44>
 8028fe2:	68fb      	ldr	r3, [r7, #12]
 8028fe4:	689b      	ldr	r3, [r3, #8]
 8028fe6:	2b00      	cmp	r3, #0
 8028fe8:	d10e      	bne.n	8029008 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8028fea:	68fb      	ldr	r3, [r7, #12]
 8028fec:	2204      	movs	r2, #4
 8028fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8028ff2:	88fa      	ldrh	r2, [r7, #6]
 8028ff4:	683b      	ldr	r3, [r7, #0]
 8028ff6:	9300      	str	r3, [sp, #0]
 8028ff8:	4613      	mov	r3, r2
 8028ffa:	68ba      	ldr	r2, [r7, #8]
 8028ffc:	68b9      	ldr	r1, [r7, #8]
 8028ffe:	68f8      	ldr	r0, [r7, #12]
 8029000:	f000 f8e9 	bl	80291d6 <HAL_SPI_TransmitReceive>
 8029004:	4603      	mov	r3, r0
 8029006:	e0e2      	b.n	80291ce <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8029008:	68fb      	ldr	r3, [r7, #12]
 802900a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802900e:	2b01      	cmp	r3, #1
 8029010:	d101      	bne.n	8029016 <HAL_SPI_Receive+0x52>
 8029012:	2302      	movs	r3, #2
 8029014:	e0db      	b.n	80291ce <HAL_SPI_Receive+0x20a>
 8029016:	68fb      	ldr	r3, [r7, #12]
 8029018:	2201      	movs	r2, #1
 802901a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802901e:	f7fd fb95 	bl	802674c <HAL_GetTick>
 8029022:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8029024:	68fb      	ldr	r3, [r7, #12]
 8029026:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802902a:	b2db      	uxtb	r3, r3
 802902c:	2b01      	cmp	r3, #1
 802902e:	d002      	beq.n	8029036 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8029030:	2302      	movs	r3, #2
 8029032:	75fb      	strb	r3, [r7, #23]
    goto error;
 8029034:	e0c2      	b.n	80291bc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8029036:	68bb      	ldr	r3, [r7, #8]
 8029038:	2b00      	cmp	r3, #0
 802903a:	d002      	beq.n	8029042 <HAL_SPI_Receive+0x7e>
 802903c:	88fb      	ldrh	r3, [r7, #6]
 802903e:	2b00      	cmp	r3, #0
 8029040:	d102      	bne.n	8029048 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8029042:	2301      	movs	r3, #1
 8029044:	75fb      	strb	r3, [r7, #23]
    goto error;
 8029046:	e0b9      	b.n	80291bc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8029048:	68fb      	ldr	r3, [r7, #12]
 802904a:	2204      	movs	r2, #4
 802904c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8029050:	68fb      	ldr	r3, [r7, #12]
 8029052:	2200      	movs	r2, #0
 8029054:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8029056:	68fb      	ldr	r3, [r7, #12]
 8029058:	68ba      	ldr	r2, [r7, #8]
 802905a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 802905c:	68fb      	ldr	r3, [r7, #12]
 802905e:	88fa      	ldrh	r2, [r7, #6]
 8029060:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8029062:	68fb      	ldr	r3, [r7, #12]
 8029064:	88fa      	ldrh	r2, [r7, #6]
 8029066:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8029068:	68fb      	ldr	r3, [r7, #12]
 802906a:	2200      	movs	r2, #0
 802906c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 802906e:	68fb      	ldr	r3, [r7, #12]
 8029070:	2200      	movs	r2, #0
 8029072:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8029074:	68fb      	ldr	r3, [r7, #12]
 8029076:	2200      	movs	r2, #0
 8029078:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 802907a:	68fb      	ldr	r3, [r7, #12]
 802907c:	2200      	movs	r2, #0
 802907e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8029080:	68fb      	ldr	r3, [r7, #12]
 8029082:	2200      	movs	r2, #0
 8029084:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8029086:	68fb      	ldr	r3, [r7, #12]
 8029088:	689b      	ldr	r3, [r3, #8]
 802908a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802908e:	d107      	bne.n	80290a0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8029090:	68fb      	ldr	r3, [r7, #12]
 8029092:	681b      	ldr	r3, [r3, #0]
 8029094:	681a      	ldr	r2, [r3, #0]
 8029096:	68fb      	ldr	r3, [r7, #12]
 8029098:	681b      	ldr	r3, [r3, #0]
 802909a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802909e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80290a0:	68fb      	ldr	r3, [r7, #12]
 80290a2:	681b      	ldr	r3, [r3, #0]
 80290a4:	681b      	ldr	r3, [r3, #0]
 80290a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80290aa:	2b40      	cmp	r3, #64	; 0x40
 80290ac:	d007      	beq.n	80290be <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80290ae:	68fb      	ldr	r3, [r7, #12]
 80290b0:	681b      	ldr	r3, [r3, #0]
 80290b2:	681a      	ldr	r2, [r3, #0]
 80290b4:	68fb      	ldr	r3, [r7, #12]
 80290b6:	681b      	ldr	r3, [r3, #0]
 80290b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80290bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80290be:	68fb      	ldr	r3, [r7, #12]
 80290c0:	68db      	ldr	r3, [r3, #12]
 80290c2:	2b00      	cmp	r3, #0
 80290c4:	d162      	bne.n	802918c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80290c6:	e02e      	b.n	8029126 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80290c8:	68fb      	ldr	r3, [r7, #12]
 80290ca:	681b      	ldr	r3, [r3, #0]
 80290cc:	689b      	ldr	r3, [r3, #8]
 80290ce:	f003 0301 	and.w	r3, r3, #1
 80290d2:	2b01      	cmp	r3, #1
 80290d4:	d115      	bne.n	8029102 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80290d6:	68fb      	ldr	r3, [r7, #12]
 80290d8:	681b      	ldr	r3, [r3, #0]
 80290da:	f103 020c 	add.w	r2, r3, #12
 80290de:	68fb      	ldr	r3, [r7, #12]
 80290e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80290e2:	7812      	ldrb	r2, [r2, #0]
 80290e4:	b2d2      	uxtb	r2, r2
 80290e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80290e8:	68fb      	ldr	r3, [r7, #12]
 80290ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80290ec:	1c5a      	adds	r2, r3, #1
 80290ee:	68fb      	ldr	r3, [r7, #12]
 80290f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80290f2:	68fb      	ldr	r3, [r7, #12]
 80290f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80290f6:	b29b      	uxth	r3, r3
 80290f8:	3b01      	subs	r3, #1
 80290fa:	b29a      	uxth	r2, r3
 80290fc:	68fb      	ldr	r3, [r7, #12]
 80290fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8029100:	e011      	b.n	8029126 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8029102:	f7fd fb23 	bl	802674c <HAL_GetTick>
 8029106:	4602      	mov	r2, r0
 8029108:	693b      	ldr	r3, [r7, #16]
 802910a:	1ad3      	subs	r3, r2, r3
 802910c:	683a      	ldr	r2, [r7, #0]
 802910e:	429a      	cmp	r2, r3
 8029110:	d803      	bhi.n	802911a <HAL_SPI_Receive+0x156>
 8029112:	683b      	ldr	r3, [r7, #0]
 8029114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029118:	d102      	bne.n	8029120 <HAL_SPI_Receive+0x15c>
 802911a:	683b      	ldr	r3, [r7, #0]
 802911c:	2b00      	cmp	r3, #0
 802911e:	d102      	bne.n	8029126 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8029120:	2303      	movs	r3, #3
 8029122:	75fb      	strb	r3, [r7, #23]
          goto error;
 8029124:	e04a      	b.n	80291bc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8029126:	68fb      	ldr	r3, [r7, #12]
 8029128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802912a:	b29b      	uxth	r3, r3
 802912c:	2b00      	cmp	r3, #0
 802912e:	d1cb      	bne.n	80290c8 <HAL_SPI_Receive+0x104>
 8029130:	e031      	b.n	8029196 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8029132:	68fb      	ldr	r3, [r7, #12]
 8029134:	681b      	ldr	r3, [r3, #0]
 8029136:	689b      	ldr	r3, [r3, #8]
 8029138:	f003 0301 	and.w	r3, r3, #1
 802913c:	2b01      	cmp	r3, #1
 802913e:	d113      	bne.n	8029168 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8029140:	68fb      	ldr	r3, [r7, #12]
 8029142:	681b      	ldr	r3, [r3, #0]
 8029144:	68da      	ldr	r2, [r3, #12]
 8029146:	68fb      	ldr	r3, [r7, #12]
 8029148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802914a:	b292      	uxth	r2, r2
 802914c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802914e:	68fb      	ldr	r3, [r7, #12]
 8029150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029152:	1c9a      	adds	r2, r3, #2
 8029154:	68fb      	ldr	r3, [r7, #12]
 8029156:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8029158:	68fb      	ldr	r3, [r7, #12]
 802915a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802915c:	b29b      	uxth	r3, r3
 802915e:	3b01      	subs	r3, #1
 8029160:	b29a      	uxth	r2, r3
 8029162:	68fb      	ldr	r3, [r7, #12]
 8029164:	87da      	strh	r2, [r3, #62]	; 0x3e
 8029166:	e011      	b.n	802918c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8029168:	f7fd faf0 	bl	802674c <HAL_GetTick>
 802916c:	4602      	mov	r2, r0
 802916e:	693b      	ldr	r3, [r7, #16]
 8029170:	1ad3      	subs	r3, r2, r3
 8029172:	683a      	ldr	r2, [r7, #0]
 8029174:	429a      	cmp	r2, r3
 8029176:	d803      	bhi.n	8029180 <HAL_SPI_Receive+0x1bc>
 8029178:	683b      	ldr	r3, [r7, #0]
 802917a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802917e:	d102      	bne.n	8029186 <HAL_SPI_Receive+0x1c2>
 8029180:	683b      	ldr	r3, [r7, #0]
 8029182:	2b00      	cmp	r3, #0
 8029184:	d102      	bne.n	802918c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8029186:	2303      	movs	r3, #3
 8029188:	75fb      	strb	r3, [r7, #23]
          goto error;
 802918a:	e017      	b.n	80291bc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 802918c:	68fb      	ldr	r3, [r7, #12]
 802918e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029190:	b29b      	uxth	r3, r3
 8029192:	2b00      	cmp	r3, #0
 8029194:	d1cd      	bne.n	8029132 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8029196:	693a      	ldr	r2, [r7, #16]
 8029198:	6839      	ldr	r1, [r7, #0]
 802919a:	68f8      	ldr	r0, [r7, #12]
 802919c:	f000 fa27 	bl	80295ee <SPI_EndRxTransaction>
 80291a0:	4603      	mov	r3, r0
 80291a2:	2b00      	cmp	r3, #0
 80291a4:	d002      	beq.n	80291ac <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80291a6:	68fb      	ldr	r3, [r7, #12]
 80291a8:	2220      	movs	r2, #32
 80291aa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80291ac:	68fb      	ldr	r3, [r7, #12]
 80291ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80291b0:	2b00      	cmp	r3, #0
 80291b2:	d002      	beq.n	80291ba <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80291b4:	2301      	movs	r3, #1
 80291b6:	75fb      	strb	r3, [r7, #23]
 80291b8:	e000      	b.n	80291bc <HAL_SPI_Receive+0x1f8>
  }

error :
 80291ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80291bc:	68fb      	ldr	r3, [r7, #12]
 80291be:	2201      	movs	r2, #1
 80291c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80291c4:	68fb      	ldr	r3, [r7, #12]
 80291c6:	2200      	movs	r2, #0
 80291c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80291cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80291ce:	4618      	mov	r0, r3
 80291d0:	3718      	adds	r7, #24
 80291d2:	46bd      	mov	sp, r7
 80291d4:	bd80      	pop	{r7, pc}

080291d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80291d6:	b580      	push	{r7, lr}
 80291d8:	b08c      	sub	sp, #48	; 0x30
 80291da:	af00      	add	r7, sp, #0
 80291dc:	60f8      	str	r0, [r7, #12]
 80291de:	60b9      	str	r1, [r7, #8]
 80291e0:	607a      	str	r2, [r7, #4]
 80291e2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80291e4:	2301      	movs	r3, #1
 80291e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80291e8:	2300      	movs	r3, #0
 80291ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80291ee:	68fb      	ldr	r3, [r7, #12]
 80291f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80291f4:	2b01      	cmp	r3, #1
 80291f6:	d101      	bne.n	80291fc <HAL_SPI_TransmitReceive+0x26>
 80291f8:	2302      	movs	r3, #2
 80291fa:	e18a      	b.n	8029512 <HAL_SPI_TransmitReceive+0x33c>
 80291fc:	68fb      	ldr	r3, [r7, #12]
 80291fe:	2201      	movs	r2, #1
 8029200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8029204:	f7fd faa2 	bl	802674c <HAL_GetTick>
 8029208:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 802920a:	68fb      	ldr	r3, [r7, #12]
 802920c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8029210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8029214:	68fb      	ldr	r3, [r7, #12]
 8029216:	685b      	ldr	r3, [r3, #4]
 8029218:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 802921a:	887b      	ldrh	r3, [r7, #2]
 802921c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802921e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8029222:	2b01      	cmp	r3, #1
 8029224:	d00f      	beq.n	8029246 <HAL_SPI_TransmitReceive+0x70>
 8029226:	69fb      	ldr	r3, [r7, #28]
 8029228:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802922c:	d107      	bne.n	802923e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 802922e:	68fb      	ldr	r3, [r7, #12]
 8029230:	689b      	ldr	r3, [r3, #8]
 8029232:	2b00      	cmp	r3, #0
 8029234:	d103      	bne.n	802923e <HAL_SPI_TransmitReceive+0x68>
 8029236:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802923a:	2b04      	cmp	r3, #4
 802923c:	d003      	beq.n	8029246 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 802923e:	2302      	movs	r3, #2
 8029240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8029244:	e15b      	b.n	80294fe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8029246:	68bb      	ldr	r3, [r7, #8]
 8029248:	2b00      	cmp	r3, #0
 802924a:	d005      	beq.n	8029258 <HAL_SPI_TransmitReceive+0x82>
 802924c:	687b      	ldr	r3, [r7, #4]
 802924e:	2b00      	cmp	r3, #0
 8029250:	d002      	beq.n	8029258 <HAL_SPI_TransmitReceive+0x82>
 8029252:	887b      	ldrh	r3, [r7, #2]
 8029254:	2b00      	cmp	r3, #0
 8029256:	d103      	bne.n	8029260 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8029258:	2301      	movs	r3, #1
 802925a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 802925e:	e14e      	b.n	80294fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8029260:	68fb      	ldr	r3, [r7, #12]
 8029262:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8029266:	b2db      	uxtb	r3, r3
 8029268:	2b04      	cmp	r3, #4
 802926a:	d003      	beq.n	8029274 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 802926c:	68fb      	ldr	r3, [r7, #12]
 802926e:	2205      	movs	r2, #5
 8029270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8029274:	68fb      	ldr	r3, [r7, #12]
 8029276:	2200      	movs	r2, #0
 8029278:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802927a:	68fb      	ldr	r3, [r7, #12]
 802927c:	687a      	ldr	r2, [r7, #4]
 802927e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8029280:	68fb      	ldr	r3, [r7, #12]
 8029282:	887a      	ldrh	r2, [r7, #2]
 8029284:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8029286:	68fb      	ldr	r3, [r7, #12]
 8029288:	887a      	ldrh	r2, [r7, #2]
 802928a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 802928c:	68fb      	ldr	r3, [r7, #12]
 802928e:	68ba      	ldr	r2, [r7, #8]
 8029290:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8029292:	68fb      	ldr	r3, [r7, #12]
 8029294:	887a      	ldrh	r2, [r7, #2]
 8029296:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8029298:	68fb      	ldr	r3, [r7, #12]
 802929a:	887a      	ldrh	r2, [r7, #2]
 802929c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802929e:	68fb      	ldr	r3, [r7, #12]
 80292a0:	2200      	movs	r2, #0
 80292a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80292a4:	68fb      	ldr	r3, [r7, #12]
 80292a6:	2200      	movs	r2, #0
 80292a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80292aa:	68fb      	ldr	r3, [r7, #12]
 80292ac:	681b      	ldr	r3, [r3, #0]
 80292ae:	681b      	ldr	r3, [r3, #0]
 80292b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80292b4:	2b40      	cmp	r3, #64	; 0x40
 80292b6:	d007      	beq.n	80292c8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80292b8:	68fb      	ldr	r3, [r7, #12]
 80292ba:	681b      	ldr	r3, [r3, #0]
 80292bc:	681a      	ldr	r2, [r3, #0]
 80292be:	68fb      	ldr	r3, [r7, #12]
 80292c0:	681b      	ldr	r3, [r3, #0]
 80292c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80292c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80292c8:	68fb      	ldr	r3, [r7, #12]
 80292ca:	68db      	ldr	r3, [r3, #12]
 80292cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80292d0:	d178      	bne.n	80293c4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80292d2:	68fb      	ldr	r3, [r7, #12]
 80292d4:	685b      	ldr	r3, [r3, #4]
 80292d6:	2b00      	cmp	r3, #0
 80292d8:	d002      	beq.n	80292e0 <HAL_SPI_TransmitReceive+0x10a>
 80292da:	8b7b      	ldrh	r3, [r7, #26]
 80292dc:	2b01      	cmp	r3, #1
 80292de:	d166      	bne.n	80293ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80292e0:	68fb      	ldr	r3, [r7, #12]
 80292e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80292e4:	881a      	ldrh	r2, [r3, #0]
 80292e6:	68fb      	ldr	r3, [r7, #12]
 80292e8:	681b      	ldr	r3, [r3, #0]
 80292ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80292ec:	68fb      	ldr	r3, [r7, #12]
 80292ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80292f0:	1c9a      	adds	r2, r3, #2
 80292f2:	68fb      	ldr	r3, [r7, #12]
 80292f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80292f6:	68fb      	ldr	r3, [r7, #12]
 80292f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80292fa:	b29b      	uxth	r3, r3
 80292fc:	3b01      	subs	r3, #1
 80292fe:	b29a      	uxth	r2, r3
 8029300:	68fb      	ldr	r3, [r7, #12]
 8029302:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8029304:	e053      	b.n	80293ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8029306:	68fb      	ldr	r3, [r7, #12]
 8029308:	681b      	ldr	r3, [r3, #0]
 802930a:	689b      	ldr	r3, [r3, #8]
 802930c:	f003 0302 	and.w	r3, r3, #2
 8029310:	2b02      	cmp	r3, #2
 8029312:	d11b      	bne.n	802934c <HAL_SPI_TransmitReceive+0x176>
 8029314:	68fb      	ldr	r3, [r7, #12]
 8029316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029318:	b29b      	uxth	r3, r3
 802931a:	2b00      	cmp	r3, #0
 802931c:	d016      	beq.n	802934c <HAL_SPI_TransmitReceive+0x176>
 802931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029320:	2b01      	cmp	r3, #1
 8029322:	d113      	bne.n	802934c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8029324:	68fb      	ldr	r3, [r7, #12]
 8029326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029328:	881a      	ldrh	r2, [r3, #0]
 802932a:	68fb      	ldr	r3, [r7, #12]
 802932c:	681b      	ldr	r3, [r3, #0]
 802932e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8029330:	68fb      	ldr	r3, [r7, #12]
 8029332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029334:	1c9a      	adds	r2, r3, #2
 8029336:	68fb      	ldr	r3, [r7, #12]
 8029338:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802933a:	68fb      	ldr	r3, [r7, #12]
 802933c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802933e:	b29b      	uxth	r3, r3
 8029340:	3b01      	subs	r3, #1
 8029342:	b29a      	uxth	r2, r3
 8029344:	68fb      	ldr	r3, [r7, #12]
 8029346:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8029348:	2300      	movs	r3, #0
 802934a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802934c:	68fb      	ldr	r3, [r7, #12]
 802934e:	681b      	ldr	r3, [r3, #0]
 8029350:	689b      	ldr	r3, [r3, #8]
 8029352:	f003 0301 	and.w	r3, r3, #1
 8029356:	2b01      	cmp	r3, #1
 8029358:	d119      	bne.n	802938e <HAL_SPI_TransmitReceive+0x1b8>
 802935a:	68fb      	ldr	r3, [r7, #12]
 802935c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802935e:	b29b      	uxth	r3, r3
 8029360:	2b00      	cmp	r3, #0
 8029362:	d014      	beq.n	802938e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8029364:	68fb      	ldr	r3, [r7, #12]
 8029366:	681b      	ldr	r3, [r3, #0]
 8029368:	68da      	ldr	r2, [r3, #12]
 802936a:	68fb      	ldr	r3, [r7, #12]
 802936c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802936e:	b292      	uxth	r2, r2
 8029370:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8029372:	68fb      	ldr	r3, [r7, #12]
 8029374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029376:	1c9a      	adds	r2, r3, #2
 8029378:	68fb      	ldr	r3, [r7, #12]
 802937a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802937c:	68fb      	ldr	r3, [r7, #12]
 802937e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029380:	b29b      	uxth	r3, r3
 8029382:	3b01      	subs	r3, #1
 8029384:	b29a      	uxth	r2, r3
 8029386:	68fb      	ldr	r3, [r7, #12]
 8029388:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802938a:	2301      	movs	r3, #1
 802938c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 802938e:	f7fd f9dd 	bl	802674c <HAL_GetTick>
 8029392:	4602      	mov	r2, r0
 8029394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029396:	1ad3      	subs	r3, r2, r3
 8029398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802939a:	429a      	cmp	r2, r3
 802939c:	d807      	bhi.n	80293ae <HAL_SPI_TransmitReceive+0x1d8>
 802939e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80293a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80293a4:	d003      	beq.n	80293ae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80293a6:	2303      	movs	r3, #3
 80293a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80293ac:	e0a7      	b.n	80294fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80293ae:	68fb      	ldr	r3, [r7, #12]
 80293b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80293b2:	b29b      	uxth	r3, r3
 80293b4:	2b00      	cmp	r3, #0
 80293b6:	d1a6      	bne.n	8029306 <HAL_SPI_TransmitReceive+0x130>
 80293b8:	68fb      	ldr	r3, [r7, #12]
 80293ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80293bc:	b29b      	uxth	r3, r3
 80293be:	2b00      	cmp	r3, #0
 80293c0:	d1a1      	bne.n	8029306 <HAL_SPI_TransmitReceive+0x130>
 80293c2:	e07c      	b.n	80294be <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80293c4:	68fb      	ldr	r3, [r7, #12]
 80293c6:	685b      	ldr	r3, [r3, #4]
 80293c8:	2b00      	cmp	r3, #0
 80293ca:	d002      	beq.n	80293d2 <HAL_SPI_TransmitReceive+0x1fc>
 80293cc:	8b7b      	ldrh	r3, [r7, #26]
 80293ce:	2b01      	cmp	r3, #1
 80293d0:	d16b      	bne.n	80294aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80293d2:	68fb      	ldr	r3, [r7, #12]
 80293d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80293d6:	68fb      	ldr	r3, [r7, #12]
 80293d8:	681b      	ldr	r3, [r3, #0]
 80293da:	330c      	adds	r3, #12
 80293dc:	7812      	ldrb	r2, [r2, #0]
 80293de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80293e0:	68fb      	ldr	r3, [r7, #12]
 80293e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80293e4:	1c5a      	adds	r2, r3, #1
 80293e6:	68fb      	ldr	r3, [r7, #12]
 80293e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80293ea:	68fb      	ldr	r3, [r7, #12]
 80293ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80293ee:	b29b      	uxth	r3, r3
 80293f0:	3b01      	subs	r3, #1
 80293f2:	b29a      	uxth	r2, r3
 80293f4:	68fb      	ldr	r3, [r7, #12]
 80293f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80293f8:	e057      	b.n	80294aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80293fa:	68fb      	ldr	r3, [r7, #12]
 80293fc:	681b      	ldr	r3, [r3, #0]
 80293fe:	689b      	ldr	r3, [r3, #8]
 8029400:	f003 0302 	and.w	r3, r3, #2
 8029404:	2b02      	cmp	r3, #2
 8029406:	d11c      	bne.n	8029442 <HAL_SPI_TransmitReceive+0x26c>
 8029408:	68fb      	ldr	r3, [r7, #12]
 802940a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802940c:	b29b      	uxth	r3, r3
 802940e:	2b00      	cmp	r3, #0
 8029410:	d017      	beq.n	8029442 <HAL_SPI_TransmitReceive+0x26c>
 8029412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029414:	2b01      	cmp	r3, #1
 8029416:	d114      	bne.n	8029442 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8029418:	68fb      	ldr	r3, [r7, #12]
 802941a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802941c:	68fb      	ldr	r3, [r7, #12]
 802941e:	681b      	ldr	r3, [r3, #0]
 8029420:	330c      	adds	r3, #12
 8029422:	7812      	ldrb	r2, [r2, #0]
 8029424:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8029426:	68fb      	ldr	r3, [r7, #12]
 8029428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802942a:	1c5a      	adds	r2, r3, #1
 802942c:	68fb      	ldr	r3, [r7, #12]
 802942e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8029430:	68fb      	ldr	r3, [r7, #12]
 8029432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029434:	b29b      	uxth	r3, r3
 8029436:	3b01      	subs	r3, #1
 8029438:	b29a      	uxth	r2, r3
 802943a:	68fb      	ldr	r3, [r7, #12]
 802943c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 802943e:	2300      	movs	r3, #0
 8029440:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8029442:	68fb      	ldr	r3, [r7, #12]
 8029444:	681b      	ldr	r3, [r3, #0]
 8029446:	689b      	ldr	r3, [r3, #8]
 8029448:	f003 0301 	and.w	r3, r3, #1
 802944c:	2b01      	cmp	r3, #1
 802944e:	d119      	bne.n	8029484 <HAL_SPI_TransmitReceive+0x2ae>
 8029450:	68fb      	ldr	r3, [r7, #12]
 8029452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029454:	b29b      	uxth	r3, r3
 8029456:	2b00      	cmp	r3, #0
 8029458:	d014      	beq.n	8029484 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 802945a:	68fb      	ldr	r3, [r7, #12]
 802945c:	681b      	ldr	r3, [r3, #0]
 802945e:	68da      	ldr	r2, [r3, #12]
 8029460:	68fb      	ldr	r3, [r7, #12]
 8029462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029464:	b2d2      	uxtb	r2, r2
 8029466:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8029468:	68fb      	ldr	r3, [r7, #12]
 802946a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802946c:	1c5a      	adds	r2, r3, #1
 802946e:	68fb      	ldr	r3, [r7, #12]
 8029470:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8029472:	68fb      	ldr	r3, [r7, #12]
 8029474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029476:	b29b      	uxth	r3, r3
 8029478:	3b01      	subs	r3, #1
 802947a:	b29a      	uxth	r2, r3
 802947c:	68fb      	ldr	r3, [r7, #12]
 802947e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8029480:	2301      	movs	r3, #1
 8029482:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8029484:	f7fd f962 	bl	802674c <HAL_GetTick>
 8029488:	4602      	mov	r2, r0
 802948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802948c:	1ad3      	subs	r3, r2, r3
 802948e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029490:	429a      	cmp	r2, r3
 8029492:	d803      	bhi.n	802949c <HAL_SPI_TransmitReceive+0x2c6>
 8029494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029496:	f1b3 3fff 	cmp.w	r3, #4294967295
 802949a:	d102      	bne.n	80294a2 <HAL_SPI_TransmitReceive+0x2cc>
 802949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802949e:	2b00      	cmp	r3, #0
 80294a0:	d103      	bne.n	80294aa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80294a2:	2303      	movs	r3, #3
 80294a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80294a8:	e029      	b.n	80294fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80294aa:	68fb      	ldr	r3, [r7, #12]
 80294ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80294ae:	b29b      	uxth	r3, r3
 80294b0:	2b00      	cmp	r3, #0
 80294b2:	d1a2      	bne.n	80293fa <HAL_SPI_TransmitReceive+0x224>
 80294b4:	68fb      	ldr	r3, [r7, #12]
 80294b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80294b8:	b29b      	uxth	r3, r3
 80294ba:	2b00      	cmp	r3, #0
 80294bc:	d19d      	bne.n	80293fa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80294be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80294c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80294c2:	68f8      	ldr	r0, [r7, #12]
 80294c4:	f000 f8f8 	bl	80296b8 <SPI_EndRxTxTransaction>
 80294c8:	4603      	mov	r3, r0
 80294ca:	2b00      	cmp	r3, #0
 80294cc:	d006      	beq.n	80294dc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80294ce:	2301      	movs	r3, #1
 80294d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80294d4:	68fb      	ldr	r3, [r7, #12]
 80294d6:	2220      	movs	r2, #32
 80294d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80294da:	e010      	b.n	80294fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80294dc:	68fb      	ldr	r3, [r7, #12]
 80294de:	689b      	ldr	r3, [r3, #8]
 80294e0:	2b00      	cmp	r3, #0
 80294e2:	d10b      	bne.n	80294fc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80294e4:	2300      	movs	r3, #0
 80294e6:	617b      	str	r3, [r7, #20]
 80294e8:	68fb      	ldr	r3, [r7, #12]
 80294ea:	681b      	ldr	r3, [r3, #0]
 80294ec:	68db      	ldr	r3, [r3, #12]
 80294ee:	617b      	str	r3, [r7, #20]
 80294f0:	68fb      	ldr	r3, [r7, #12]
 80294f2:	681b      	ldr	r3, [r3, #0]
 80294f4:	689b      	ldr	r3, [r3, #8]
 80294f6:	617b      	str	r3, [r7, #20]
 80294f8:	697b      	ldr	r3, [r7, #20]
 80294fa:	e000      	b.n	80294fe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80294fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80294fe:	68fb      	ldr	r3, [r7, #12]
 8029500:	2201      	movs	r2, #1
 8029502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8029506:	68fb      	ldr	r3, [r7, #12]
 8029508:	2200      	movs	r2, #0
 802950a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802950e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8029512:	4618      	mov	r0, r3
 8029514:	3730      	adds	r7, #48	; 0x30
 8029516:	46bd      	mov	sp, r7
 8029518:	bd80      	pop	{r7, pc}

0802951a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 802951a:	b580      	push	{r7, lr}
 802951c:	b084      	sub	sp, #16
 802951e:	af00      	add	r7, sp, #0
 8029520:	60f8      	str	r0, [r7, #12]
 8029522:	60b9      	str	r1, [r7, #8]
 8029524:	603b      	str	r3, [r7, #0]
 8029526:	4613      	mov	r3, r2
 8029528:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802952a:	e04c      	b.n	80295c6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 802952c:	683b      	ldr	r3, [r7, #0]
 802952e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029532:	d048      	beq.n	80295c6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8029534:	f7fd f90a 	bl	802674c <HAL_GetTick>
 8029538:	4602      	mov	r2, r0
 802953a:	69bb      	ldr	r3, [r7, #24]
 802953c:	1ad3      	subs	r3, r2, r3
 802953e:	683a      	ldr	r2, [r7, #0]
 8029540:	429a      	cmp	r2, r3
 8029542:	d902      	bls.n	802954a <SPI_WaitFlagStateUntilTimeout+0x30>
 8029544:	683b      	ldr	r3, [r7, #0]
 8029546:	2b00      	cmp	r3, #0
 8029548:	d13d      	bne.n	80295c6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802954a:	68fb      	ldr	r3, [r7, #12]
 802954c:	681b      	ldr	r3, [r3, #0]
 802954e:	685a      	ldr	r2, [r3, #4]
 8029550:	68fb      	ldr	r3, [r7, #12]
 8029552:	681b      	ldr	r3, [r3, #0]
 8029554:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8029558:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802955a:	68fb      	ldr	r3, [r7, #12]
 802955c:	685b      	ldr	r3, [r3, #4]
 802955e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029562:	d111      	bne.n	8029588 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8029564:	68fb      	ldr	r3, [r7, #12]
 8029566:	689b      	ldr	r3, [r3, #8]
 8029568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802956c:	d004      	beq.n	8029578 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802956e:	68fb      	ldr	r3, [r7, #12]
 8029570:	689b      	ldr	r3, [r3, #8]
 8029572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029576:	d107      	bne.n	8029588 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8029578:	68fb      	ldr	r3, [r7, #12]
 802957a:	681b      	ldr	r3, [r3, #0]
 802957c:	681a      	ldr	r2, [r3, #0]
 802957e:	68fb      	ldr	r3, [r7, #12]
 8029580:	681b      	ldr	r3, [r3, #0]
 8029582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8029586:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8029588:	68fb      	ldr	r3, [r7, #12]
 802958a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802958c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029590:	d10f      	bne.n	80295b2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8029592:	68fb      	ldr	r3, [r7, #12]
 8029594:	681b      	ldr	r3, [r3, #0]
 8029596:	681a      	ldr	r2, [r3, #0]
 8029598:	68fb      	ldr	r3, [r7, #12]
 802959a:	681b      	ldr	r3, [r3, #0]
 802959c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80295a0:	601a      	str	r2, [r3, #0]
 80295a2:	68fb      	ldr	r3, [r7, #12]
 80295a4:	681b      	ldr	r3, [r3, #0]
 80295a6:	681a      	ldr	r2, [r3, #0]
 80295a8:	68fb      	ldr	r3, [r7, #12]
 80295aa:	681b      	ldr	r3, [r3, #0]
 80295ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80295b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80295b2:	68fb      	ldr	r3, [r7, #12]
 80295b4:	2201      	movs	r2, #1
 80295b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80295ba:	68fb      	ldr	r3, [r7, #12]
 80295bc:	2200      	movs	r2, #0
 80295be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80295c2:	2303      	movs	r3, #3
 80295c4:	e00f      	b.n	80295e6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80295c6:	68fb      	ldr	r3, [r7, #12]
 80295c8:	681b      	ldr	r3, [r3, #0]
 80295ca:	689a      	ldr	r2, [r3, #8]
 80295cc:	68bb      	ldr	r3, [r7, #8]
 80295ce:	4013      	ands	r3, r2
 80295d0:	68ba      	ldr	r2, [r7, #8]
 80295d2:	429a      	cmp	r2, r3
 80295d4:	bf0c      	ite	eq
 80295d6:	2301      	moveq	r3, #1
 80295d8:	2300      	movne	r3, #0
 80295da:	b2db      	uxtb	r3, r3
 80295dc:	461a      	mov	r2, r3
 80295de:	79fb      	ldrb	r3, [r7, #7]
 80295e0:	429a      	cmp	r2, r3
 80295e2:	d1a3      	bne.n	802952c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80295e4:	2300      	movs	r3, #0
}
 80295e6:	4618      	mov	r0, r3
 80295e8:	3710      	adds	r7, #16
 80295ea:	46bd      	mov	sp, r7
 80295ec:	bd80      	pop	{r7, pc}

080295ee <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80295ee:	b580      	push	{r7, lr}
 80295f0:	b086      	sub	sp, #24
 80295f2:	af02      	add	r7, sp, #8
 80295f4:	60f8      	str	r0, [r7, #12]
 80295f6:	60b9      	str	r1, [r7, #8]
 80295f8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80295fa:	68fb      	ldr	r3, [r7, #12]
 80295fc:	685b      	ldr	r3, [r3, #4]
 80295fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029602:	d111      	bne.n	8029628 <SPI_EndRxTransaction+0x3a>
 8029604:	68fb      	ldr	r3, [r7, #12]
 8029606:	689b      	ldr	r3, [r3, #8]
 8029608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802960c:	d004      	beq.n	8029618 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802960e:	68fb      	ldr	r3, [r7, #12]
 8029610:	689b      	ldr	r3, [r3, #8]
 8029612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029616:	d107      	bne.n	8029628 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8029618:	68fb      	ldr	r3, [r7, #12]
 802961a:	681b      	ldr	r3, [r3, #0]
 802961c:	681a      	ldr	r2, [r3, #0]
 802961e:	68fb      	ldr	r3, [r7, #12]
 8029620:	681b      	ldr	r3, [r3, #0]
 8029622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8029626:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8029628:	68fb      	ldr	r3, [r7, #12]
 802962a:	685b      	ldr	r3, [r3, #4]
 802962c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029630:	d12a      	bne.n	8029688 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8029632:	68fb      	ldr	r3, [r7, #12]
 8029634:	689b      	ldr	r3, [r3, #8]
 8029636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802963a:	d012      	beq.n	8029662 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 802963c:	687b      	ldr	r3, [r7, #4]
 802963e:	9300      	str	r3, [sp, #0]
 8029640:	68bb      	ldr	r3, [r7, #8]
 8029642:	2200      	movs	r2, #0
 8029644:	2180      	movs	r1, #128	; 0x80
 8029646:	68f8      	ldr	r0, [r7, #12]
 8029648:	f7ff ff67 	bl	802951a <SPI_WaitFlagStateUntilTimeout>
 802964c:	4603      	mov	r3, r0
 802964e:	2b00      	cmp	r3, #0
 8029650:	d02d      	beq.n	80296ae <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029652:	68fb      	ldr	r3, [r7, #12]
 8029654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029656:	f043 0220 	orr.w	r2, r3, #32
 802965a:	68fb      	ldr	r3, [r7, #12]
 802965c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 802965e:	2303      	movs	r3, #3
 8029660:	e026      	b.n	80296b0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8029662:	687b      	ldr	r3, [r7, #4]
 8029664:	9300      	str	r3, [sp, #0]
 8029666:	68bb      	ldr	r3, [r7, #8]
 8029668:	2200      	movs	r2, #0
 802966a:	2101      	movs	r1, #1
 802966c:	68f8      	ldr	r0, [r7, #12]
 802966e:	f7ff ff54 	bl	802951a <SPI_WaitFlagStateUntilTimeout>
 8029672:	4603      	mov	r3, r0
 8029674:	2b00      	cmp	r3, #0
 8029676:	d01a      	beq.n	80296ae <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029678:	68fb      	ldr	r3, [r7, #12]
 802967a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802967c:	f043 0220 	orr.w	r2, r3, #32
 8029680:	68fb      	ldr	r3, [r7, #12]
 8029682:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8029684:	2303      	movs	r3, #3
 8029686:	e013      	b.n	80296b0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8029688:	687b      	ldr	r3, [r7, #4]
 802968a:	9300      	str	r3, [sp, #0]
 802968c:	68bb      	ldr	r3, [r7, #8]
 802968e:	2200      	movs	r2, #0
 8029690:	2101      	movs	r1, #1
 8029692:	68f8      	ldr	r0, [r7, #12]
 8029694:	f7ff ff41 	bl	802951a <SPI_WaitFlagStateUntilTimeout>
 8029698:	4603      	mov	r3, r0
 802969a:	2b00      	cmp	r3, #0
 802969c:	d007      	beq.n	80296ae <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802969e:	68fb      	ldr	r3, [r7, #12]
 80296a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80296a2:	f043 0220 	orr.w	r2, r3, #32
 80296a6:	68fb      	ldr	r3, [r7, #12]
 80296a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80296aa:	2303      	movs	r3, #3
 80296ac:	e000      	b.n	80296b0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80296ae:	2300      	movs	r3, #0
}
 80296b0:	4618      	mov	r0, r3
 80296b2:	3710      	adds	r7, #16
 80296b4:	46bd      	mov	sp, r7
 80296b6:	bd80      	pop	{r7, pc}

080296b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80296b8:	b580      	push	{r7, lr}
 80296ba:	b088      	sub	sp, #32
 80296bc:	af02      	add	r7, sp, #8
 80296be:	60f8      	str	r0, [r7, #12]
 80296c0:	60b9      	str	r1, [r7, #8]
 80296c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80296c4:	4b1b      	ldr	r3, [pc, #108]	; (8029734 <SPI_EndRxTxTransaction+0x7c>)
 80296c6:	681b      	ldr	r3, [r3, #0]
 80296c8:	4a1b      	ldr	r2, [pc, #108]	; (8029738 <SPI_EndRxTxTransaction+0x80>)
 80296ca:	fba2 2303 	umull	r2, r3, r2, r3
 80296ce:	0d5b      	lsrs	r3, r3, #21
 80296d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80296d4:	fb02 f303 	mul.w	r3, r2, r3
 80296d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80296da:	68fb      	ldr	r3, [r7, #12]
 80296dc:	685b      	ldr	r3, [r3, #4]
 80296de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80296e2:	d112      	bne.n	802970a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80296e4:	687b      	ldr	r3, [r7, #4]
 80296e6:	9300      	str	r3, [sp, #0]
 80296e8:	68bb      	ldr	r3, [r7, #8]
 80296ea:	2200      	movs	r2, #0
 80296ec:	2180      	movs	r1, #128	; 0x80
 80296ee:	68f8      	ldr	r0, [r7, #12]
 80296f0:	f7ff ff13 	bl	802951a <SPI_WaitFlagStateUntilTimeout>
 80296f4:	4603      	mov	r3, r0
 80296f6:	2b00      	cmp	r3, #0
 80296f8:	d016      	beq.n	8029728 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80296fa:	68fb      	ldr	r3, [r7, #12]
 80296fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80296fe:	f043 0220 	orr.w	r2, r3, #32
 8029702:	68fb      	ldr	r3, [r7, #12]
 8029704:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8029706:	2303      	movs	r3, #3
 8029708:	e00f      	b.n	802972a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 802970a:	697b      	ldr	r3, [r7, #20]
 802970c:	2b00      	cmp	r3, #0
 802970e:	d00a      	beq.n	8029726 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8029710:	697b      	ldr	r3, [r7, #20]
 8029712:	3b01      	subs	r3, #1
 8029714:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8029716:	68fb      	ldr	r3, [r7, #12]
 8029718:	681b      	ldr	r3, [r3, #0]
 802971a:	689b      	ldr	r3, [r3, #8]
 802971c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029720:	2b80      	cmp	r3, #128	; 0x80
 8029722:	d0f2      	beq.n	802970a <SPI_EndRxTxTransaction+0x52>
 8029724:	e000      	b.n	8029728 <SPI_EndRxTxTransaction+0x70>
        break;
 8029726:	bf00      	nop
  }

  return HAL_OK;
 8029728:	2300      	movs	r3, #0
}
 802972a:	4618      	mov	r0, r3
 802972c:	3718      	adds	r7, #24
 802972e:	46bd      	mov	sp, r7
 8029730:	bd80      	pop	{r7, pc}
 8029732:	bf00      	nop
 8029734:	20000010 	.word	0x20000010
 8029738:	165e9f81 	.word	0x165e9f81

0802973c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 802973c:	b580      	push	{r7, lr}
 802973e:	b082      	sub	sp, #8
 8029740:	af00      	add	r7, sp, #0
 8029742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029744:	687b      	ldr	r3, [r7, #4]
 8029746:	2b00      	cmp	r3, #0
 8029748:	d101      	bne.n	802974e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802974a:	2301      	movs	r3, #1
 802974c:	e01d      	b.n	802978a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802974e:	687b      	ldr	r3, [r7, #4]
 8029750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029754:	b2db      	uxtb	r3, r3
 8029756:	2b00      	cmp	r3, #0
 8029758:	d106      	bne.n	8029768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802975a:	687b      	ldr	r3, [r7, #4]
 802975c:	2200      	movs	r2, #0
 802975e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8029762:	6878      	ldr	r0, [r7, #4]
 8029764:	f7fb f99a 	bl	8024a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029768:	687b      	ldr	r3, [r7, #4]
 802976a:	2202      	movs	r2, #2
 802976c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029770:	687b      	ldr	r3, [r7, #4]
 8029772:	681a      	ldr	r2, [r3, #0]
 8029774:	687b      	ldr	r3, [r7, #4]
 8029776:	3304      	adds	r3, #4
 8029778:	4619      	mov	r1, r3
 802977a:	4610      	mov	r0, r2
 802977c:	f000 fc0e 	bl	8029f9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029780:	687b      	ldr	r3, [r7, #4]
 8029782:	2201      	movs	r2, #1
 8029784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029788:	2300      	movs	r3, #0
}
 802978a:	4618      	mov	r0, r3
 802978c:	3708      	adds	r7, #8
 802978e:	46bd      	mov	sp, r7
 8029790:	bd80      	pop	{r7, pc}

08029792 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8029792:	b480      	push	{r7}
 8029794:	b085      	sub	sp, #20
 8029796:	af00      	add	r7, sp, #0
 8029798:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 802979a:	687b      	ldr	r3, [r7, #4]
 802979c:	681b      	ldr	r3, [r3, #0]
 802979e:	68da      	ldr	r2, [r3, #12]
 80297a0:	687b      	ldr	r3, [r7, #4]
 80297a2:	681b      	ldr	r3, [r3, #0]
 80297a4:	f042 0201 	orr.w	r2, r2, #1
 80297a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80297aa:	687b      	ldr	r3, [r7, #4]
 80297ac:	681b      	ldr	r3, [r3, #0]
 80297ae:	689b      	ldr	r3, [r3, #8]
 80297b0:	f003 0307 	and.w	r3, r3, #7
 80297b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80297b6:	68fb      	ldr	r3, [r7, #12]
 80297b8:	2b06      	cmp	r3, #6
 80297ba:	d007      	beq.n	80297cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80297bc:	687b      	ldr	r3, [r7, #4]
 80297be:	681b      	ldr	r3, [r3, #0]
 80297c0:	681a      	ldr	r2, [r3, #0]
 80297c2:	687b      	ldr	r3, [r7, #4]
 80297c4:	681b      	ldr	r3, [r3, #0]
 80297c6:	f042 0201 	orr.w	r2, r2, #1
 80297ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80297cc:	2300      	movs	r3, #0
}
 80297ce:	4618      	mov	r0, r3
 80297d0:	3714      	adds	r7, #20
 80297d2:	46bd      	mov	sp, r7
 80297d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80297d8:	4770      	bx	lr

080297da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80297da:	b580      	push	{r7, lr}
 80297dc:	b082      	sub	sp, #8
 80297de:	af00      	add	r7, sp, #0
 80297e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80297e2:	687b      	ldr	r3, [r7, #4]
 80297e4:	2b00      	cmp	r3, #0
 80297e6:	d101      	bne.n	80297ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80297e8:	2301      	movs	r3, #1
 80297ea:	e01d      	b.n	8029828 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80297ec:	687b      	ldr	r3, [r7, #4]
 80297ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80297f2:	b2db      	uxtb	r3, r3
 80297f4:	2b00      	cmp	r3, #0
 80297f6:	d106      	bne.n	8029806 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80297f8:	687b      	ldr	r3, [r7, #4]
 80297fa:	2200      	movs	r2, #0
 80297fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8029800:	6878      	ldr	r0, [r7, #4]
 8029802:	f7fb f8fd 	bl	8024a00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029806:	687b      	ldr	r3, [r7, #4]
 8029808:	2202      	movs	r2, #2
 802980a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802980e:	687b      	ldr	r3, [r7, #4]
 8029810:	681a      	ldr	r2, [r3, #0]
 8029812:	687b      	ldr	r3, [r7, #4]
 8029814:	3304      	adds	r3, #4
 8029816:	4619      	mov	r1, r3
 8029818:	4610      	mov	r0, r2
 802981a:	f000 fbbf 	bl	8029f9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802981e:	687b      	ldr	r3, [r7, #4]
 8029820:	2201      	movs	r2, #1
 8029822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029826:	2300      	movs	r3, #0
}
 8029828:	4618      	mov	r0, r3
 802982a:	3708      	adds	r7, #8
 802982c:	46bd      	mov	sp, r7
 802982e:	bd80      	pop	{r7, pc}

08029830 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8029830:	b580      	push	{r7, lr}
 8029832:	b084      	sub	sp, #16
 8029834:	af00      	add	r7, sp, #0
 8029836:	6078      	str	r0, [r7, #4]
 8029838:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 802983a:	687b      	ldr	r3, [r7, #4]
 802983c:	681b      	ldr	r3, [r3, #0]
 802983e:	2201      	movs	r2, #1
 8029840:	6839      	ldr	r1, [r7, #0]
 8029842:	4618      	mov	r0, r3
 8029844:	f000 fe94 	bl	802a570 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8029848:	687b      	ldr	r3, [r7, #4]
 802984a:	681b      	ldr	r3, [r3, #0]
 802984c:	4a15      	ldr	r2, [pc, #84]	; (80298a4 <HAL_TIM_PWM_Start+0x74>)
 802984e:	4293      	cmp	r3, r2
 8029850:	d004      	beq.n	802985c <HAL_TIM_PWM_Start+0x2c>
 8029852:	687b      	ldr	r3, [r7, #4]
 8029854:	681b      	ldr	r3, [r3, #0]
 8029856:	4a14      	ldr	r2, [pc, #80]	; (80298a8 <HAL_TIM_PWM_Start+0x78>)
 8029858:	4293      	cmp	r3, r2
 802985a:	d101      	bne.n	8029860 <HAL_TIM_PWM_Start+0x30>
 802985c:	2301      	movs	r3, #1
 802985e:	e000      	b.n	8029862 <HAL_TIM_PWM_Start+0x32>
 8029860:	2300      	movs	r3, #0
 8029862:	2b00      	cmp	r3, #0
 8029864:	d007      	beq.n	8029876 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8029866:	687b      	ldr	r3, [r7, #4]
 8029868:	681b      	ldr	r3, [r3, #0]
 802986a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802986c:	687b      	ldr	r3, [r7, #4]
 802986e:	681b      	ldr	r3, [r3, #0]
 8029870:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029874:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8029876:	687b      	ldr	r3, [r7, #4]
 8029878:	681b      	ldr	r3, [r3, #0]
 802987a:	689b      	ldr	r3, [r3, #8]
 802987c:	f003 0307 	and.w	r3, r3, #7
 8029880:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029882:	68fb      	ldr	r3, [r7, #12]
 8029884:	2b06      	cmp	r3, #6
 8029886:	d007      	beq.n	8029898 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8029888:	687b      	ldr	r3, [r7, #4]
 802988a:	681b      	ldr	r3, [r3, #0]
 802988c:	681a      	ldr	r2, [r3, #0]
 802988e:	687b      	ldr	r3, [r7, #4]
 8029890:	681b      	ldr	r3, [r3, #0]
 8029892:	f042 0201 	orr.w	r2, r2, #1
 8029896:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8029898:	2300      	movs	r3, #0
}
 802989a:	4618      	mov	r0, r3
 802989c:	3710      	adds	r7, #16
 802989e:	46bd      	mov	sp, r7
 80298a0:	bd80      	pop	{r7, pc}
 80298a2:	bf00      	nop
 80298a4:	40010000 	.word	0x40010000
 80298a8:	40010400 	.word	0x40010400

080298ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80298ac:	b580      	push	{r7, lr}
 80298ae:	b086      	sub	sp, #24
 80298b0:	af00      	add	r7, sp, #0
 80298b2:	6078      	str	r0, [r7, #4]
 80298b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80298b6:	687b      	ldr	r3, [r7, #4]
 80298b8:	2b00      	cmp	r3, #0
 80298ba:	d101      	bne.n	80298c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80298bc:	2301      	movs	r3, #1
 80298be:	e083      	b.n	80299c8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80298c0:	687b      	ldr	r3, [r7, #4]
 80298c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80298c6:	b2db      	uxtb	r3, r3
 80298c8:	2b00      	cmp	r3, #0
 80298ca:	d106      	bne.n	80298da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80298cc:	687b      	ldr	r3, [r7, #4]
 80298ce:	2200      	movs	r2, #0
 80298d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80298d4:	6878      	ldr	r0, [r7, #4]
 80298d6:	f7fb f977 	bl	8024bc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80298da:	687b      	ldr	r3, [r7, #4]
 80298dc:	2202      	movs	r2, #2
 80298de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80298e2:	687b      	ldr	r3, [r7, #4]
 80298e4:	681b      	ldr	r3, [r3, #0]
 80298e6:	689b      	ldr	r3, [r3, #8]
 80298e8:	687a      	ldr	r2, [r7, #4]
 80298ea:	6812      	ldr	r2, [r2, #0]
 80298ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80298f0:	f023 0307 	bic.w	r3, r3, #7
 80298f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80298f6:	687b      	ldr	r3, [r7, #4]
 80298f8:	681a      	ldr	r2, [r3, #0]
 80298fa:	687b      	ldr	r3, [r7, #4]
 80298fc:	3304      	adds	r3, #4
 80298fe:	4619      	mov	r1, r3
 8029900:	4610      	mov	r0, r2
 8029902:	f000 fb4b 	bl	8029f9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8029906:	687b      	ldr	r3, [r7, #4]
 8029908:	681b      	ldr	r3, [r3, #0]
 802990a:	689b      	ldr	r3, [r3, #8]
 802990c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 802990e:	687b      	ldr	r3, [r7, #4]
 8029910:	681b      	ldr	r3, [r3, #0]
 8029912:	699b      	ldr	r3, [r3, #24]
 8029914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8029916:	687b      	ldr	r3, [r7, #4]
 8029918:	681b      	ldr	r3, [r3, #0]
 802991a:	6a1b      	ldr	r3, [r3, #32]
 802991c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 802991e:	683b      	ldr	r3, [r7, #0]
 8029920:	681b      	ldr	r3, [r3, #0]
 8029922:	697a      	ldr	r2, [r7, #20]
 8029924:	4313      	orrs	r3, r2
 8029926:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8029928:	693b      	ldr	r3, [r7, #16]
 802992a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802992e:	f023 0303 	bic.w	r3, r3, #3
 8029932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8029934:	683b      	ldr	r3, [r7, #0]
 8029936:	689a      	ldr	r2, [r3, #8]
 8029938:	683b      	ldr	r3, [r7, #0]
 802993a:	699b      	ldr	r3, [r3, #24]
 802993c:	021b      	lsls	r3, r3, #8
 802993e:	4313      	orrs	r3, r2
 8029940:	693a      	ldr	r2, [r7, #16]
 8029942:	4313      	orrs	r3, r2
 8029944:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8029946:	693b      	ldr	r3, [r7, #16]
 8029948:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 802994c:	f023 030c 	bic.w	r3, r3, #12
 8029950:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8029952:	693b      	ldr	r3, [r7, #16]
 8029954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029958:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802995c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 802995e:	683b      	ldr	r3, [r7, #0]
 8029960:	68da      	ldr	r2, [r3, #12]
 8029962:	683b      	ldr	r3, [r7, #0]
 8029964:	69db      	ldr	r3, [r3, #28]
 8029966:	021b      	lsls	r3, r3, #8
 8029968:	4313      	orrs	r3, r2
 802996a:	693a      	ldr	r2, [r7, #16]
 802996c:	4313      	orrs	r3, r2
 802996e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8029970:	683b      	ldr	r3, [r7, #0]
 8029972:	691b      	ldr	r3, [r3, #16]
 8029974:	011a      	lsls	r2, r3, #4
 8029976:	683b      	ldr	r3, [r7, #0]
 8029978:	6a1b      	ldr	r3, [r3, #32]
 802997a:	031b      	lsls	r3, r3, #12
 802997c:	4313      	orrs	r3, r2
 802997e:	693a      	ldr	r2, [r7, #16]
 8029980:	4313      	orrs	r3, r2
 8029982:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8029984:	68fb      	ldr	r3, [r7, #12]
 8029986:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 802998a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 802998c:	68fb      	ldr	r3, [r7, #12]
 802998e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8029992:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8029994:	683b      	ldr	r3, [r7, #0]
 8029996:	685a      	ldr	r2, [r3, #4]
 8029998:	683b      	ldr	r3, [r7, #0]
 802999a:	695b      	ldr	r3, [r3, #20]
 802999c:	011b      	lsls	r3, r3, #4
 802999e:	4313      	orrs	r3, r2
 80299a0:	68fa      	ldr	r2, [r7, #12]
 80299a2:	4313      	orrs	r3, r2
 80299a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80299a6:	687b      	ldr	r3, [r7, #4]
 80299a8:	681b      	ldr	r3, [r3, #0]
 80299aa:	697a      	ldr	r2, [r7, #20]
 80299ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80299ae:	687b      	ldr	r3, [r7, #4]
 80299b0:	681b      	ldr	r3, [r3, #0]
 80299b2:	693a      	ldr	r2, [r7, #16]
 80299b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80299b6:	687b      	ldr	r3, [r7, #4]
 80299b8:	681b      	ldr	r3, [r3, #0]
 80299ba:	68fa      	ldr	r2, [r7, #12]
 80299bc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80299be:	687b      	ldr	r3, [r7, #4]
 80299c0:	2201      	movs	r2, #1
 80299c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80299c6:	2300      	movs	r3, #0
}
 80299c8:	4618      	mov	r0, r3
 80299ca:	3718      	adds	r7, #24
 80299cc:	46bd      	mov	sp, r7
 80299ce:	bd80      	pop	{r7, pc}

080299d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80299d0:	b580      	push	{r7, lr}
 80299d2:	b082      	sub	sp, #8
 80299d4:	af00      	add	r7, sp, #0
 80299d6:	6078      	str	r0, [r7, #4]
 80299d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80299da:	683b      	ldr	r3, [r7, #0]
 80299dc:	2b00      	cmp	r3, #0
 80299de:	d002      	beq.n	80299e6 <HAL_TIM_Encoder_Start+0x16>
 80299e0:	2b04      	cmp	r3, #4
 80299e2:	d008      	beq.n	80299f6 <HAL_TIM_Encoder_Start+0x26>
 80299e4:	e00f      	b.n	8029a06 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80299e6:	687b      	ldr	r3, [r7, #4]
 80299e8:	681b      	ldr	r3, [r3, #0]
 80299ea:	2201      	movs	r2, #1
 80299ec:	2100      	movs	r1, #0
 80299ee:	4618      	mov	r0, r3
 80299f0:	f000 fdbe 	bl	802a570 <TIM_CCxChannelCmd>
      break;
 80299f4:	e016      	b.n	8029a24 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80299f6:	687b      	ldr	r3, [r7, #4]
 80299f8:	681b      	ldr	r3, [r3, #0]
 80299fa:	2201      	movs	r2, #1
 80299fc:	2104      	movs	r1, #4
 80299fe:	4618      	mov	r0, r3
 8029a00:	f000 fdb6 	bl	802a570 <TIM_CCxChannelCmd>
      break;
 8029a04:	e00e      	b.n	8029a24 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8029a06:	687b      	ldr	r3, [r7, #4]
 8029a08:	681b      	ldr	r3, [r3, #0]
 8029a0a:	2201      	movs	r2, #1
 8029a0c:	2100      	movs	r1, #0
 8029a0e:	4618      	mov	r0, r3
 8029a10:	f000 fdae 	bl	802a570 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8029a14:	687b      	ldr	r3, [r7, #4]
 8029a16:	681b      	ldr	r3, [r3, #0]
 8029a18:	2201      	movs	r2, #1
 8029a1a:	2104      	movs	r1, #4
 8029a1c:	4618      	mov	r0, r3
 8029a1e:	f000 fda7 	bl	802a570 <TIM_CCxChannelCmd>
      break;
 8029a22:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8029a24:	687b      	ldr	r3, [r7, #4]
 8029a26:	681b      	ldr	r3, [r3, #0]
 8029a28:	681a      	ldr	r2, [r3, #0]
 8029a2a:	687b      	ldr	r3, [r7, #4]
 8029a2c:	681b      	ldr	r3, [r3, #0]
 8029a2e:	f042 0201 	orr.w	r2, r2, #1
 8029a32:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8029a34:	2300      	movs	r3, #0
}
 8029a36:	4618      	mov	r0, r3
 8029a38:	3708      	adds	r7, #8
 8029a3a:	46bd      	mov	sp, r7
 8029a3c:	bd80      	pop	{r7, pc}

08029a3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8029a3e:	b580      	push	{r7, lr}
 8029a40:	b082      	sub	sp, #8
 8029a42:	af00      	add	r7, sp, #0
 8029a44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8029a46:	687b      	ldr	r3, [r7, #4]
 8029a48:	681b      	ldr	r3, [r3, #0]
 8029a4a:	691b      	ldr	r3, [r3, #16]
 8029a4c:	f003 0302 	and.w	r3, r3, #2
 8029a50:	2b02      	cmp	r3, #2
 8029a52:	d122      	bne.n	8029a9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8029a54:	687b      	ldr	r3, [r7, #4]
 8029a56:	681b      	ldr	r3, [r3, #0]
 8029a58:	68db      	ldr	r3, [r3, #12]
 8029a5a:	f003 0302 	and.w	r3, r3, #2
 8029a5e:	2b02      	cmp	r3, #2
 8029a60:	d11b      	bne.n	8029a9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8029a62:	687b      	ldr	r3, [r7, #4]
 8029a64:	681b      	ldr	r3, [r3, #0]
 8029a66:	f06f 0202 	mvn.w	r2, #2
 8029a6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8029a6c:	687b      	ldr	r3, [r7, #4]
 8029a6e:	2201      	movs	r2, #1
 8029a70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8029a72:	687b      	ldr	r3, [r7, #4]
 8029a74:	681b      	ldr	r3, [r3, #0]
 8029a76:	699b      	ldr	r3, [r3, #24]
 8029a78:	f003 0303 	and.w	r3, r3, #3
 8029a7c:	2b00      	cmp	r3, #0
 8029a7e:	d003      	beq.n	8029a88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8029a80:	6878      	ldr	r0, [r7, #4]
 8029a82:	f000 fa6c 	bl	8029f5e <HAL_TIM_IC_CaptureCallback>
 8029a86:	e005      	b.n	8029a94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8029a88:	6878      	ldr	r0, [r7, #4]
 8029a8a:	f000 fa5e 	bl	8029f4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029a8e:	6878      	ldr	r0, [r7, #4]
 8029a90:	f000 fa6f 	bl	8029f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029a94:	687b      	ldr	r3, [r7, #4]
 8029a96:	2200      	movs	r2, #0
 8029a98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8029a9a:	687b      	ldr	r3, [r7, #4]
 8029a9c:	681b      	ldr	r3, [r3, #0]
 8029a9e:	691b      	ldr	r3, [r3, #16]
 8029aa0:	f003 0304 	and.w	r3, r3, #4
 8029aa4:	2b04      	cmp	r3, #4
 8029aa6:	d122      	bne.n	8029aee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8029aa8:	687b      	ldr	r3, [r7, #4]
 8029aaa:	681b      	ldr	r3, [r3, #0]
 8029aac:	68db      	ldr	r3, [r3, #12]
 8029aae:	f003 0304 	and.w	r3, r3, #4
 8029ab2:	2b04      	cmp	r3, #4
 8029ab4:	d11b      	bne.n	8029aee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8029ab6:	687b      	ldr	r3, [r7, #4]
 8029ab8:	681b      	ldr	r3, [r3, #0]
 8029aba:	f06f 0204 	mvn.w	r2, #4
 8029abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8029ac0:	687b      	ldr	r3, [r7, #4]
 8029ac2:	2202      	movs	r2, #2
 8029ac4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8029ac6:	687b      	ldr	r3, [r7, #4]
 8029ac8:	681b      	ldr	r3, [r3, #0]
 8029aca:	699b      	ldr	r3, [r3, #24]
 8029acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029ad0:	2b00      	cmp	r3, #0
 8029ad2:	d003      	beq.n	8029adc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029ad4:	6878      	ldr	r0, [r7, #4]
 8029ad6:	f000 fa42 	bl	8029f5e <HAL_TIM_IC_CaptureCallback>
 8029ada:	e005      	b.n	8029ae8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029adc:	6878      	ldr	r0, [r7, #4]
 8029ade:	f000 fa34 	bl	8029f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029ae2:	6878      	ldr	r0, [r7, #4]
 8029ae4:	f000 fa45 	bl	8029f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029ae8:	687b      	ldr	r3, [r7, #4]
 8029aea:	2200      	movs	r2, #0
 8029aec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8029aee:	687b      	ldr	r3, [r7, #4]
 8029af0:	681b      	ldr	r3, [r3, #0]
 8029af2:	691b      	ldr	r3, [r3, #16]
 8029af4:	f003 0308 	and.w	r3, r3, #8
 8029af8:	2b08      	cmp	r3, #8
 8029afa:	d122      	bne.n	8029b42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8029afc:	687b      	ldr	r3, [r7, #4]
 8029afe:	681b      	ldr	r3, [r3, #0]
 8029b00:	68db      	ldr	r3, [r3, #12]
 8029b02:	f003 0308 	and.w	r3, r3, #8
 8029b06:	2b08      	cmp	r3, #8
 8029b08:	d11b      	bne.n	8029b42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8029b0a:	687b      	ldr	r3, [r7, #4]
 8029b0c:	681b      	ldr	r3, [r3, #0]
 8029b0e:	f06f 0208 	mvn.w	r2, #8
 8029b12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8029b14:	687b      	ldr	r3, [r7, #4]
 8029b16:	2204      	movs	r2, #4
 8029b18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8029b1a:	687b      	ldr	r3, [r7, #4]
 8029b1c:	681b      	ldr	r3, [r3, #0]
 8029b1e:	69db      	ldr	r3, [r3, #28]
 8029b20:	f003 0303 	and.w	r3, r3, #3
 8029b24:	2b00      	cmp	r3, #0
 8029b26:	d003      	beq.n	8029b30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029b28:	6878      	ldr	r0, [r7, #4]
 8029b2a:	f000 fa18 	bl	8029f5e <HAL_TIM_IC_CaptureCallback>
 8029b2e:	e005      	b.n	8029b3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029b30:	6878      	ldr	r0, [r7, #4]
 8029b32:	f000 fa0a 	bl	8029f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029b36:	6878      	ldr	r0, [r7, #4]
 8029b38:	f000 fa1b 	bl	8029f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029b3c:	687b      	ldr	r3, [r7, #4]
 8029b3e:	2200      	movs	r2, #0
 8029b40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8029b42:	687b      	ldr	r3, [r7, #4]
 8029b44:	681b      	ldr	r3, [r3, #0]
 8029b46:	691b      	ldr	r3, [r3, #16]
 8029b48:	f003 0310 	and.w	r3, r3, #16
 8029b4c:	2b10      	cmp	r3, #16
 8029b4e:	d122      	bne.n	8029b96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8029b50:	687b      	ldr	r3, [r7, #4]
 8029b52:	681b      	ldr	r3, [r3, #0]
 8029b54:	68db      	ldr	r3, [r3, #12]
 8029b56:	f003 0310 	and.w	r3, r3, #16
 8029b5a:	2b10      	cmp	r3, #16
 8029b5c:	d11b      	bne.n	8029b96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8029b5e:	687b      	ldr	r3, [r7, #4]
 8029b60:	681b      	ldr	r3, [r3, #0]
 8029b62:	f06f 0210 	mvn.w	r2, #16
 8029b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8029b68:	687b      	ldr	r3, [r7, #4]
 8029b6a:	2208      	movs	r2, #8
 8029b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8029b6e:	687b      	ldr	r3, [r7, #4]
 8029b70:	681b      	ldr	r3, [r3, #0]
 8029b72:	69db      	ldr	r3, [r3, #28]
 8029b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029b78:	2b00      	cmp	r3, #0
 8029b7a:	d003      	beq.n	8029b84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029b7c:	6878      	ldr	r0, [r7, #4]
 8029b7e:	f000 f9ee 	bl	8029f5e <HAL_TIM_IC_CaptureCallback>
 8029b82:	e005      	b.n	8029b90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029b84:	6878      	ldr	r0, [r7, #4]
 8029b86:	f000 f9e0 	bl	8029f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029b8a:	6878      	ldr	r0, [r7, #4]
 8029b8c:	f000 f9f1 	bl	8029f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029b90:	687b      	ldr	r3, [r7, #4]
 8029b92:	2200      	movs	r2, #0
 8029b94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8029b96:	687b      	ldr	r3, [r7, #4]
 8029b98:	681b      	ldr	r3, [r3, #0]
 8029b9a:	691b      	ldr	r3, [r3, #16]
 8029b9c:	f003 0301 	and.w	r3, r3, #1
 8029ba0:	2b01      	cmp	r3, #1
 8029ba2:	d10e      	bne.n	8029bc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8029ba4:	687b      	ldr	r3, [r7, #4]
 8029ba6:	681b      	ldr	r3, [r3, #0]
 8029ba8:	68db      	ldr	r3, [r3, #12]
 8029baa:	f003 0301 	and.w	r3, r3, #1
 8029bae:	2b01      	cmp	r3, #1
 8029bb0:	d107      	bne.n	8029bc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8029bb2:	687b      	ldr	r3, [r7, #4]
 8029bb4:	681b      	ldr	r3, [r3, #0]
 8029bb6:	f06f 0201 	mvn.w	r2, #1
 8029bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8029bbc:	6878      	ldr	r0, [r7, #4]
 8029bbe:	f7f9 fa95 	bl	80230ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8029bc2:	687b      	ldr	r3, [r7, #4]
 8029bc4:	681b      	ldr	r3, [r3, #0]
 8029bc6:	691b      	ldr	r3, [r3, #16]
 8029bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029bcc:	2b80      	cmp	r3, #128	; 0x80
 8029bce:	d10e      	bne.n	8029bee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029bd0:	687b      	ldr	r3, [r7, #4]
 8029bd2:	681b      	ldr	r3, [r3, #0]
 8029bd4:	68db      	ldr	r3, [r3, #12]
 8029bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029bda:	2b80      	cmp	r3, #128	; 0x80
 8029bdc:	d107      	bne.n	8029bee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8029bde:	687b      	ldr	r3, [r7, #4]
 8029be0:	681b      	ldr	r3, [r3, #0]
 8029be2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8029be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8029be8:	6878      	ldr	r0, [r7, #4]
 8029bea:	f000 fdbf 	bl	802a76c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8029bee:	687b      	ldr	r3, [r7, #4]
 8029bf0:	681b      	ldr	r3, [r3, #0]
 8029bf2:	691b      	ldr	r3, [r3, #16]
 8029bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029bf8:	2b40      	cmp	r3, #64	; 0x40
 8029bfa:	d10e      	bne.n	8029c1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8029bfc:	687b      	ldr	r3, [r7, #4]
 8029bfe:	681b      	ldr	r3, [r3, #0]
 8029c00:	68db      	ldr	r3, [r3, #12]
 8029c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029c06:	2b40      	cmp	r3, #64	; 0x40
 8029c08:	d107      	bne.n	8029c1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8029c0a:	687b      	ldr	r3, [r7, #4]
 8029c0c:	681b      	ldr	r3, [r3, #0]
 8029c0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8029c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8029c14:	6878      	ldr	r0, [r7, #4]
 8029c16:	f000 f9b6 	bl	8029f86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8029c1a:	687b      	ldr	r3, [r7, #4]
 8029c1c:	681b      	ldr	r3, [r3, #0]
 8029c1e:	691b      	ldr	r3, [r3, #16]
 8029c20:	f003 0320 	and.w	r3, r3, #32
 8029c24:	2b20      	cmp	r3, #32
 8029c26:	d10e      	bne.n	8029c46 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8029c28:	687b      	ldr	r3, [r7, #4]
 8029c2a:	681b      	ldr	r3, [r3, #0]
 8029c2c:	68db      	ldr	r3, [r3, #12]
 8029c2e:	f003 0320 	and.w	r3, r3, #32
 8029c32:	2b20      	cmp	r3, #32
 8029c34:	d107      	bne.n	8029c46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8029c36:	687b      	ldr	r3, [r7, #4]
 8029c38:	681b      	ldr	r3, [r3, #0]
 8029c3a:	f06f 0220 	mvn.w	r2, #32
 8029c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8029c40:	6878      	ldr	r0, [r7, #4]
 8029c42:	f000 fd89 	bl	802a758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8029c46:	bf00      	nop
 8029c48:	3708      	adds	r7, #8
 8029c4a:	46bd      	mov	sp, r7
 8029c4c:	bd80      	pop	{r7, pc}
	...

08029c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8029c50:	b580      	push	{r7, lr}
 8029c52:	b084      	sub	sp, #16
 8029c54:	af00      	add	r7, sp, #0
 8029c56:	60f8      	str	r0, [r7, #12]
 8029c58:	60b9      	str	r1, [r7, #8]
 8029c5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8029c5c:	68fb      	ldr	r3, [r7, #12]
 8029c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029c62:	2b01      	cmp	r3, #1
 8029c64:	d101      	bne.n	8029c6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8029c66:	2302      	movs	r3, #2
 8029c68:	e0b4      	b.n	8029dd4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8029c6a:	68fb      	ldr	r3, [r7, #12]
 8029c6c:	2201      	movs	r2, #1
 8029c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029c72:	68fb      	ldr	r3, [r7, #12]
 8029c74:	2202      	movs	r2, #2
 8029c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8029c7a:	687b      	ldr	r3, [r7, #4]
 8029c7c:	2b0c      	cmp	r3, #12
 8029c7e:	f200 809f 	bhi.w	8029dc0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8029c82:	a201      	add	r2, pc, #4	; (adr r2, 8029c88 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8029c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029c88:	08029cbd 	.word	0x08029cbd
 8029c8c:	08029dc1 	.word	0x08029dc1
 8029c90:	08029dc1 	.word	0x08029dc1
 8029c94:	08029dc1 	.word	0x08029dc1
 8029c98:	08029cfd 	.word	0x08029cfd
 8029c9c:	08029dc1 	.word	0x08029dc1
 8029ca0:	08029dc1 	.word	0x08029dc1
 8029ca4:	08029dc1 	.word	0x08029dc1
 8029ca8:	08029d3f 	.word	0x08029d3f
 8029cac:	08029dc1 	.word	0x08029dc1
 8029cb0:	08029dc1 	.word	0x08029dc1
 8029cb4:	08029dc1 	.word	0x08029dc1
 8029cb8:	08029d7f 	.word	0x08029d7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8029cbc:	68fb      	ldr	r3, [r7, #12]
 8029cbe:	681b      	ldr	r3, [r3, #0]
 8029cc0:	68b9      	ldr	r1, [r7, #8]
 8029cc2:	4618      	mov	r0, r3
 8029cc4:	f000 fa0a 	bl	802a0dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8029cc8:	68fb      	ldr	r3, [r7, #12]
 8029cca:	681b      	ldr	r3, [r3, #0]
 8029ccc:	699a      	ldr	r2, [r3, #24]
 8029cce:	68fb      	ldr	r3, [r7, #12]
 8029cd0:	681b      	ldr	r3, [r3, #0]
 8029cd2:	f042 0208 	orr.w	r2, r2, #8
 8029cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8029cd8:	68fb      	ldr	r3, [r7, #12]
 8029cda:	681b      	ldr	r3, [r3, #0]
 8029cdc:	699a      	ldr	r2, [r3, #24]
 8029cde:	68fb      	ldr	r3, [r7, #12]
 8029ce0:	681b      	ldr	r3, [r3, #0]
 8029ce2:	f022 0204 	bic.w	r2, r2, #4
 8029ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8029ce8:	68fb      	ldr	r3, [r7, #12]
 8029cea:	681b      	ldr	r3, [r3, #0]
 8029cec:	6999      	ldr	r1, [r3, #24]
 8029cee:	68bb      	ldr	r3, [r7, #8]
 8029cf0:	691a      	ldr	r2, [r3, #16]
 8029cf2:	68fb      	ldr	r3, [r7, #12]
 8029cf4:	681b      	ldr	r3, [r3, #0]
 8029cf6:	430a      	orrs	r2, r1
 8029cf8:	619a      	str	r2, [r3, #24]
      break;
 8029cfa:	e062      	b.n	8029dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8029cfc:	68fb      	ldr	r3, [r7, #12]
 8029cfe:	681b      	ldr	r3, [r3, #0]
 8029d00:	68b9      	ldr	r1, [r7, #8]
 8029d02:	4618      	mov	r0, r3
 8029d04:	f000 fa5a 	bl	802a1bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8029d08:	68fb      	ldr	r3, [r7, #12]
 8029d0a:	681b      	ldr	r3, [r3, #0]
 8029d0c:	699a      	ldr	r2, [r3, #24]
 8029d0e:	68fb      	ldr	r3, [r7, #12]
 8029d10:	681b      	ldr	r3, [r3, #0]
 8029d12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8029d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8029d18:	68fb      	ldr	r3, [r7, #12]
 8029d1a:	681b      	ldr	r3, [r3, #0]
 8029d1c:	699a      	ldr	r2, [r3, #24]
 8029d1e:	68fb      	ldr	r3, [r7, #12]
 8029d20:	681b      	ldr	r3, [r3, #0]
 8029d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8029d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8029d28:	68fb      	ldr	r3, [r7, #12]
 8029d2a:	681b      	ldr	r3, [r3, #0]
 8029d2c:	6999      	ldr	r1, [r3, #24]
 8029d2e:	68bb      	ldr	r3, [r7, #8]
 8029d30:	691b      	ldr	r3, [r3, #16]
 8029d32:	021a      	lsls	r2, r3, #8
 8029d34:	68fb      	ldr	r3, [r7, #12]
 8029d36:	681b      	ldr	r3, [r3, #0]
 8029d38:	430a      	orrs	r2, r1
 8029d3a:	619a      	str	r2, [r3, #24]
      break;
 8029d3c:	e041      	b.n	8029dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8029d3e:	68fb      	ldr	r3, [r7, #12]
 8029d40:	681b      	ldr	r3, [r3, #0]
 8029d42:	68b9      	ldr	r1, [r7, #8]
 8029d44:	4618      	mov	r0, r3
 8029d46:	f000 faaf 	bl	802a2a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8029d4a:	68fb      	ldr	r3, [r7, #12]
 8029d4c:	681b      	ldr	r3, [r3, #0]
 8029d4e:	69da      	ldr	r2, [r3, #28]
 8029d50:	68fb      	ldr	r3, [r7, #12]
 8029d52:	681b      	ldr	r3, [r3, #0]
 8029d54:	f042 0208 	orr.w	r2, r2, #8
 8029d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8029d5a:	68fb      	ldr	r3, [r7, #12]
 8029d5c:	681b      	ldr	r3, [r3, #0]
 8029d5e:	69da      	ldr	r2, [r3, #28]
 8029d60:	68fb      	ldr	r3, [r7, #12]
 8029d62:	681b      	ldr	r3, [r3, #0]
 8029d64:	f022 0204 	bic.w	r2, r2, #4
 8029d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8029d6a:	68fb      	ldr	r3, [r7, #12]
 8029d6c:	681b      	ldr	r3, [r3, #0]
 8029d6e:	69d9      	ldr	r1, [r3, #28]
 8029d70:	68bb      	ldr	r3, [r7, #8]
 8029d72:	691a      	ldr	r2, [r3, #16]
 8029d74:	68fb      	ldr	r3, [r7, #12]
 8029d76:	681b      	ldr	r3, [r3, #0]
 8029d78:	430a      	orrs	r2, r1
 8029d7a:	61da      	str	r2, [r3, #28]
      break;
 8029d7c:	e021      	b.n	8029dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8029d7e:	68fb      	ldr	r3, [r7, #12]
 8029d80:	681b      	ldr	r3, [r3, #0]
 8029d82:	68b9      	ldr	r1, [r7, #8]
 8029d84:	4618      	mov	r0, r3
 8029d86:	f000 fb03 	bl	802a390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8029d8a:	68fb      	ldr	r3, [r7, #12]
 8029d8c:	681b      	ldr	r3, [r3, #0]
 8029d8e:	69da      	ldr	r2, [r3, #28]
 8029d90:	68fb      	ldr	r3, [r7, #12]
 8029d92:	681b      	ldr	r3, [r3, #0]
 8029d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8029d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8029d9a:	68fb      	ldr	r3, [r7, #12]
 8029d9c:	681b      	ldr	r3, [r3, #0]
 8029d9e:	69da      	ldr	r2, [r3, #28]
 8029da0:	68fb      	ldr	r3, [r7, #12]
 8029da2:	681b      	ldr	r3, [r3, #0]
 8029da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8029da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8029daa:	68fb      	ldr	r3, [r7, #12]
 8029dac:	681b      	ldr	r3, [r3, #0]
 8029dae:	69d9      	ldr	r1, [r3, #28]
 8029db0:	68bb      	ldr	r3, [r7, #8]
 8029db2:	691b      	ldr	r3, [r3, #16]
 8029db4:	021a      	lsls	r2, r3, #8
 8029db6:	68fb      	ldr	r3, [r7, #12]
 8029db8:	681b      	ldr	r3, [r3, #0]
 8029dba:	430a      	orrs	r2, r1
 8029dbc:	61da      	str	r2, [r3, #28]
      break;
 8029dbe:	e000      	b.n	8029dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8029dc0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8029dc2:	68fb      	ldr	r3, [r7, #12]
 8029dc4:	2201      	movs	r2, #1
 8029dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029dca:	68fb      	ldr	r3, [r7, #12]
 8029dcc:	2200      	movs	r2, #0
 8029dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029dd2:	2300      	movs	r3, #0
}
 8029dd4:	4618      	mov	r0, r3
 8029dd6:	3710      	adds	r7, #16
 8029dd8:	46bd      	mov	sp, r7
 8029dda:	bd80      	pop	{r7, pc}

08029ddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8029ddc:	b580      	push	{r7, lr}
 8029dde:	b084      	sub	sp, #16
 8029de0:	af00      	add	r7, sp, #0
 8029de2:	6078      	str	r0, [r7, #4]
 8029de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8029de6:	687b      	ldr	r3, [r7, #4]
 8029de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029dec:	2b01      	cmp	r3, #1
 8029dee:	d101      	bne.n	8029df4 <HAL_TIM_ConfigClockSource+0x18>
 8029df0:	2302      	movs	r3, #2
 8029df2:	e0a6      	b.n	8029f42 <HAL_TIM_ConfigClockSource+0x166>
 8029df4:	687b      	ldr	r3, [r7, #4]
 8029df6:	2201      	movs	r2, #1
 8029df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029dfc:	687b      	ldr	r3, [r7, #4]
 8029dfe:	2202      	movs	r2, #2
 8029e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8029e04:	687b      	ldr	r3, [r7, #4]
 8029e06:	681b      	ldr	r3, [r3, #0]
 8029e08:	689b      	ldr	r3, [r3, #8]
 8029e0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8029e0c:	68fb      	ldr	r3, [r7, #12]
 8029e0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8029e12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029e14:	68fb      	ldr	r3, [r7, #12]
 8029e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029e1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8029e1c:	687b      	ldr	r3, [r7, #4]
 8029e1e:	681b      	ldr	r3, [r3, #0]
 8029e20:	68fa      	ldr	r2, [r7, #12]
 8029e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8029e24:	683b      	ldr	r3, [r7, #0]
 8029e26:	681b      	ldr	r3, [r3, #0]
 8029e28:	2b40      	cmp	r3, #64	; 0x40
 8029e2a:	d067      	beq.n	8029efc <HAL_TIM_ConfigClockSource+0x120>
 8029e2c:	2b40      	cmp	r3, #64	; 0x40
 8029e2e:	d80b      	bhi.n	8029e48 <HAL_TIM_ConfigClockSource+0x6c>
 8029e30:	2b10      	cmp	r3, #16
 8029e32:	d073      	beq.n	8029f1c <HAL_TIM_ConfigClockSource+0x140>
 8029e34:	2b10      	cmp	r3, #16
 8029e36:	d802      	bhi.n	8029e3e <HAL_TIM_ConfigClockSource+0x62>
 8029e38:	2b00      	cmp	r3, #0
 8029e3a:	d06f      	beq.n	8029f1c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8029e3c:	e078      	b.n	8029f30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029e3e:	2b20      	cmp	r3, #32
 8029e40:	d06c      	beq.n	8029f1c <HAL_TIM_ConfigClockSource+0x140>
 8029e42:	2b30      	cmp	r3, #48	; 0x30
 8029e44:	d06a      	beq.n	8029f1c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8029e46:	e073      	b.n	8029f30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029e48:	2b70      	cmp	r3, #112	; 0x70
 8029e4a:	d00d      	beq.n	8029e68 <HAL_TIM_ConfigClockSource+0x8c>
 8029e4c:	2b70      	cmp	r3, #112	; 0x70
 8029e4e:	d804      	bhi.n	8029e5a <HAL_TIM_ConfigClockSource+0x7e>
 8029e50:	2b50      	cmp	r3, #80	; 0x50
 8029e52:	d033      	beq.n	8029ebc <HAL_TIM_ConfigClockSource+0xe0>
 8029e54:	2b60      	cmp	r3, #96	; 0x60
 8029e56:	d041      	beq.n	8029edc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8029e58:	e06a      	b.n	8029f30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029e5e:	d066      	beq.n	8029f2e <HAL_TIM_ConfigClockSource+0x152>
 8029e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029e64:	d017      	beq.n	8029e96 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8029e66:	e063      	b.n	8029f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8029e68:	687b      	ldr	r3, [r7, #4]
 8029e6a:	6818      	ldr	r0, [r3, #0]
 8029e6c:	683b      	ldr	r3, [r7, #0]
 8029e6e:	6899      	ldr	r1, [r3, #8]
 8029e70:	683b      	ldr	r3, [r7, #0]
 8029e72:	685a      	ldr	r2, [r3, #4]
 8029e74:	683b      	ldr	r3, [r7, #0]
 8029e76:	68db      	ldr	r3, [r3, #12]
 8029e78:	f000 fb5a 	bl	802a530 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8029e7c:	687b      	ldr	r3, [r7, #4]
 8029e7e:	681b      	ldr	r3, [r3, #0]
 8029e80:	689b      	ldr	r3, [r3, #8]
 8029e82:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8029e84:	68fb      	ldr	r3, [r7, #12]
 8029e86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8029e8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8029e8c:	687b      	ldr	r3, [r7, #4]
 8029e8e:	681b      	ldr	r3, [r3, #0]
 8029e90:	68fa      	ldr	r2, [r7, #12]
 8029e92:	609a      	str	r2, [r3, #8]
      break;
 8029e94:	e04c      	b.n	8029f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8029e96:	687b      	ldr	r3, [r7, #4]
 8029e98:	6818      	ldr	r0, [r3, #0]
 8029e9a:	683b      	ldr	r3, [r7, #0]
 8029e9c:	6899      	ldr	r1, [r3, #8]
 8029e9e:	683b      	ldr	r3, [r7, #0]
 8029ea0:	685a      	ldr	r2, [r3, #4]
 8029ea2:	683b      	ldr	r3, [r7, #0]
 8029ea4:	68db      	ldr	r3, [r3, #12]
 8029ea6:	f000 fb43 	bl	802a530 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8029eaa:	687b      	ldr	r3, [r7, #4]
 8029eac:	681b      	ldr	r3, [r3, #0]
 8029eae:	689a      	ldr	r2, [r3, #8]
 8029eb0:	687b      	ldr	r3, [r7, #4]
 8029eb2:	681b      	ldr	r3, [r3, #0]
 8029eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8029eb8:	609a      	str	r2, [r3, #8]
      break;
 8029eba:	e039      	b.n	8029f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8029ebc:	687b      	ldr	r3, [r7, #4]
 8029ebe:	6818      	ldr	r0, [r3, #0]
 8029ec0:	683b      	ldr	r3, [r7, #0]
 8029ec2:	6859      	ldr	r1, [r3, #4]
 8029ec4:	683b      	ldr	r3, [r7, #0]
 8029ec6:	68db      	ldr	r3, [r3, #12]
 8029ec8:	461a      	mov	r2, r3
 8029eca:	f000 fab7 	bl	802a43c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8029ece:	687b      	ldr	r3, [r7, #4]
 8029ed0:	681b      	ldr	r3, [r3, #0]
 8029ed2:	2150      	movs	r1, #80	; 0x50
 8029ed4:	4618      	mov	r0, r3
 8029ed6:	f000 fb10 	bl	802a4fa <TIM_ITRx_SetConfig>
      break;
 8029eda:	e029      	b.n	8029f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8029edc:	687b      	ldr	r3, [r7, #4]
 8029ede:	6818      	ldr	r0, [r3, #0]
 8029ee0:	683b      	ldr	r3, [r7, #0]
 8029ee2:	6859      	ldr	r1, [r3, #4]
 8029ee4:	683b      	ldr	r3, [r7, #0]
 8029ee6:	68db      	ldr	r3, [r3, #12]
 8029ee8:	461a      	mov	r2, r3
 8029eea:	f000 fad6 	bl	802a49a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8029eee:	687b      	ldr	r3, [r7, #4]
 8029ef0:	681b      	ldr	r3, [r3, #0]
 8029ef2:	2160      	movs	r1, #96	; 0x60
 8029ef4:	4618      	mov	r0, r3
 8029ef6:	f000 fb00 	bl	802a4fa <TIM_ITRx_SetConfig>
      break;
 8029efa:	e019      	b.n	8029f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8029efc:	687b      	ldr	r3, [r7, #4]
 8029efe:	6818      	ldr	r0, [r3, #0]
 8029f00:	683b      	ldr	r3, [r7, #0]
 8029f02:	6859      	ldr	r1, [r3, #4]
 8029f04:	683b      	ldr	r3, [r7, #0]
 8029f06:	68db      	ldr	r3, [r3, #12]
 8029f08:	461a      	mov	r2, r3
 8029f0a:	f000 fa97 	bl	802a43c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8029f0e:	687b      	ldr	r3, [r7, #4]
 8029f10:	681b      	ldr	r3, [r3, #0]
 8029f12:	2140      	movs	r1, #64	; 0x40
 8029f14:	4618      	mov	r0, r3
 8029f16:	f000 faf0 	bl	802a4fa <TIM_ITRx_SetConfig>
      break;
 8029f1a:	e009      	b.n	8029f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8029f1c:	687b      	ldr	r3, [r7, #4]
 8029f1e:	681a      	ldr	r2, [r3, #0]
 8029f20:	683b      	ldr	r3, [r7, #0]
 8029f22:	681b      	ldr	r3, [r3, #0]
 8029f24:	4619      	mov	r1, r3
 8029f26:	4610      	mov	r0, r2
 8029f28:	f000 fae7 	bl	802a4fa <TIM_ITRx_SetConfig>
      break;
 8029f2c:	e000      	b.n	8029f30 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8029f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8029f30:	687b      	ldr	r3, [r7, #4]
 8029f32:	2201      	movs	r2, #1
 8029f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029f38:	687b      	ldr	r3, [r7, #4]
 8029f3a:	2200      	movs	r2, #0
 8029f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029f40:	2300      	movs	r3, #0
}
 8029f42:	4618      	mov	r0, r3
 8029f44:	3710      	adds	r7, #16
 8029f46:	46bd      	mov	sp, r7
 8029f48:	bd80      	pop	{r7, pc}

08029f4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8029f4a:	b480      	push	{r7}
 8029f4c:	b083      	sub	sp, #12
 8029f4e:	af00      	add	r7, sp, #0
 8029f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8029f52:	bf00      	nop
 8029f54:	370c      	adds	r7, #12
 8029f56:	46bd      	mov	sp, r7
 8029f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f5c:	4770      	bx	lr

08029f5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8029f5e:	b480      	push	{r7}
 8029f60:	b083      	sub	sp, #12
 8029f62:	af00      	add	r7, sp, #0
 8029f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8029f66:	bf00      	nop
 8029f68:	370c      	adds	r7, #12
 8029f6a:	46bd      	mov	sp, r7
 8029f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f70:	4770      	bx	lr

08029f72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8029f72:	b480      	push	{r7}
 8029f74:	b083      	sub	sp, #12
 8029f76:	af00      	add	r7, sp, #0
 8029f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8029f7a:	bf00      	nop
 8029f7c:	370c      	adds	r7, #12
 8029f7e:	46bd      	mov	sp, r7
 8029f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f84:	4770      	bx	lr

08029f86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8029f86:	b480      	push	{r7}
 8029f88:	b083      	sub	sp, #12
 8029f8a:	af00      	add	r7, sp, #0
 8029f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8029f8e:	bf00      	nop
 8029f90:	370c      	adds	r7, #12
 8029f92:	46bd      	mov	sp, r7
 8029f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f98:	4770      	bx	lr
	...

08029f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8029f9c:	b480      	push	{r7}
 8029f9e:	b085      	sub	sp, #20
 8029fa0:	af00      	add	r7, sp, #0
 8029fa2:	6078      	str	r0, [r7, #4]
 8029fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8029fa6:	687b      	ldr	r3, [r7, #4]
 8029fa8:	681b      	ldr	r3, [r3, #0]
 8029faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8029fac:	687b      	ldr	r3, [r7, #4]
 8029fae:	4a40      	ldr	r2, [pc, #256]	; (802a0b0 <TIM_Base_SetConfig+0x114>)
 8029fb0:	4293      	cmp	r3, r2
 8029fb2:	d013      	beq.n	8029fdc <TIM_Base_SetConfig+0x40>
 8029fb4:	687b      	ldr	r3, [r7, #4]
 8029fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029fba:	d00f      	beq.n	8029fdc <TIM_Base_SetConfig+0x40>
 8029fbc:	687b      	ldr	r3, [r7, #4]
 8029fbe:	4a3d      	ldr	r2, [pc, #244]	; (802a0b4 <TIM_Base_SetConfig+0x118>)
 8029fc0:	4293      	cmp	r3, r2
 8029fc2:	d00b      	beq.n	8029fdc <TIM_Base_SetConfig+0x40>
 8029fc4:	687b      	ldr	r3, [r7, #4]
 8029fc6:	4a3c      	ldr	r2, [pc, #240]	; (802a0b8 <TIM_Base_SetConfig+0x11c>)
 8029fc8:	4293      	cmp	r3, r2
 8029fca:	d007      	beq.n	8029fdc <TIM_Base_SetConfig+0x40>
 8029fcc:	687b      	ldr	r3, [r7, #4]
 8029fce:	4a3b      	ldr	r2, [pc, #236]	; (802a0bc <TIM_Base_SetConfig+0x120>)
 8029fd0:	4293      	cmp	r3, r2
 8029fd2:	d003      	beq.n	8029fdc <TIM_Base_SetConfig+0x40>
 8029fd4:	687b      	ldr	r3, [r7, #4]
 8029fd6:	4a3a      	ldr	r2, [pc, #232]	; (802a0c0 <TIM_Base_SetConfig+0x124>)
 8029fd8:	4293      	cmp	r3, r2
 8029fda:	d108      	bne.n	8029fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8029fdc:	68fb      	ldr	r3, [r7, #12]
 8029fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8029fe4:	683b      	ldr	r3, [r7, #0]
 8029fe6:	685b      	ldr	r3, [r3, #4]
 8029fe8:	68fa      	ldr	r2, [r7, #12]
 8029fea:	4313      	orrs	r3, r2
 8029fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8029fee:	687b      	ldr	r3, [r7, #4]
 8029ff0:	4a2f      	ldr	r2, [pc, #188]	; (802a0b0 <TIM_Base_SetConfig+0x114>)
 8029ff2:	4293      	cmp	r3, r2
 8029ff4:	d02b      	beq.n	802a04e <TIM_Base_SetConfig+0xb2>
 8029ff6:	687b      	ldr	r3, [r7, #4]
 8029ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029ffc:	d027      	beq.n	802a04e <TIM_Base_SetConfig+0xb2>
 8029ffe:	687b      	ldr	r3, [r7, #4]
 802a000:	4a2c      	ldr	r2, [pc, #176]	; (802a0b4 <TIM_Base_SetConfig+0x118>)
 802a002:	4293      	cmp	r3, r2
 802a004:	d023      	beq.n	802a04e <TIM_Base_SetConfig+0xb2>
 802a006:	687b      	ldr	r3, [r7, #4]
 802a008:	4a2b      	ldr	r2, [pc, #172]	; (802a0b8 <TIM_Base_SetConfig+0x11c>)
 802a00a:	4293      	cmp	r3, r2
 802a00c:	d01f      	beq.n	802a04e <TIM_Base_SetConfig+0xb2>
 802a00e:	687b      	ldr	r3, [r7, #4]
 802a010:	4a2a      	ldr	r2, [pc, #168]	; (802a0bc <TIM_Base_SetConfig+0x120>)
 802a012:	4293      	cmp	r3, r2
 802a014:	d01b      	beq.n	802a04e <TIM_Base_SetConfig+0xb2>
 802a016:	687b      	ldr	r3, [r7, #4]
 802a018:	4a29      	ldr	r2, [pc, #164]	; (802a0c0 <TIM_Base_SetConfig+0x124>)
 802a01a:	4293      	cmp	r3, r2
 802a01c:	d017      	beq.n	802a04e <TIM_Base_SetConfig+0xb2>
 802a01e:	687b      	ldr	r3, [r7, #4]
 802a020:	4a28      	ldr	r2, [pc, #160]	; (802a0c4 <TIM_Base_SetConfig+0x128>)
 802a022:	4293      	cmp	r3, r2
 802a024:	d013      	beq.n	802a04e <TIM_Base_SetConfig+0xb2>
 802a026:	687b      	ldr	r3, [r7, #4]
 802a028:	4a27      	ldr	r2, [pc, #156]	; (802a0c8 <TIM_Base_SetConfig+0x12c>)
 802a02a:	4293      	cmp	r3, r2
 802a02c:	d00f      	beq.n	802a04e <TIM_Base_SetConfig+0xb2>
 802a02e:	687b      	ldr	r3, [r7, #4]
 802a030:	4a26      	ldr	r2, [pc, #152]	; (802a0cc <TIM_Base_SetConfig+0x130>)
 802a032:	4293      	cmp	r3, r2
 802a034:	d00b      	beq.n	802a04e <TIM_Base_SetConfig+0xb2>
 802a036:	687b      	ldr	r3, [r7, #4]
 802a038:	4a25      	ldr	r2, [pc, #148]	; (802a0d0 <TIM_Base_SetConfig+0x134>)
 802a03a:	4293      	cmp	r3, r2
 802a03c:	d007      	beq.n	802a04e <TIM_Base_SetConfig+0xb2>
 802a03e:	687b      	ldr	r3, [r7, #4]
 802a040:	4a24      	ldr	r2, [pc, #144]	; (802a0d4 <TIM_Base_SetConfig+0x138>)
 802a042:	4293      	cmp	r3, r2
 802a044:	d003      	beq.n	802a04e <TIM_Base_SetConfig+0xb2>
 802a046:	687b      	ldr	r3, [r7, #4]
 802a048:	4a23      	ldr	r2, [pc, #140]	; (802a0d8 <TIM_Base_SetConfig+0x13c>)
 802a04a:	4293      	cmp	r3, r2
 802a04c:	d108      	bne.n	802a060 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802a04e:	68fb      	ldr	r3, [r7, #12]
 802a050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802a056:	683b      	ldr	r3, [r7, #0]
 802a058:	68db      	ldr	r3, [r3, #12]
 802a05a:	68fa      	ldr	r2, [r7, #12]
 802a05c:	4313      	orrs	r3, r2
 802a05e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802a060:	68fb      	ldr	r3, [r7, #12]
 802a062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802a066:	683b      	ldr	r3, [r7, #0]
 802a068:	695b      	ldr	r3, [r3, #20]
 802a06a:	4313      	orrs	r3, r2
 802a06c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802a06e:	687b      	ldr	r3, [r7, #4]
 802a070:	68fa      	ldr	r2, [r7, #12]
 802a072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802a074:	683b      	ldr	r3, [r7, #0]
 802a076:	689a      	ldr	r2, [r3, #8]
 802a078:	687b      	ldr	r3, [r7, #4]
 802a07a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802a07c:	683b      	ldr	r3, [r7, #0]
 802a07e:	681a      	ldr	r2, [r3, #0]
 802a080:	687b      	ldr	r3, [r7, #4]
 802a082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802a084:	687b      	ldr	r3, [r7, #4]
 802a086:	4a0a      	ldr	r2, [pc, #40]	; (802a0b0 <TIM_Base_SetConfig+0x114>)
 802a088:	4293      	cmp	r3, r2
 802a08a:	d003      	beq.n	802a094 <TIM_Base_SetConfig+0xf8>
 802a08c:	687b      	ldr	r3, [r7, #4]
 802a08e:	4a0c      	ldr	r2, [pc, #48]	; (802a0c0 <TIM_Base_SetConfig+0x124>)
 802a090:	4293      	cmp	r3, r2
 802a092:	d103      	bne.n	802a09c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802a094:	683b      	ldr	r3, [r7, #0]
 802a096:	691a      	ldr	r2, [r3, #16]
 802a098:	687b      	ldr	r3, [r7, #4]
 802a09a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802a09c:	687b      	ldr	r3, [r7, #4]
 802a09e:	2201      	movs	r2, #1
 802a0a0:	615a      	str	r2, [r3, #20]
}
 802a0a2:	bf00      	nop
 802a0a4:	3714      	adds	r7, #20
 802a0a6:	46bd      	mov	sp, r7
 802a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0ac:	4770      	bx	lr
 802a0ae:	bf00      	nop
 802a0b0:	40010000 	.word	0x40010000
 802a0b4:	40000400 	.word	0x40000400
 802a0b8:	40000800 	.word	0x40000800
 802a0bc:	40000c00 	.word	0x40000c00
 802a0c0:	40010400 	.word	0x40010400
 802a0c4:	40014000 	.word	0x40014000
 802a0c8:	40014400 	.word	0x40014400
 802a0cc:	40014800 	.word	0x40014800
 802a0d0:	40001800 	.word	0x40001800
 802a0d4:	40001c00 	.word	0x40001c00
 802a0d8:	40002000 	.word	0x40002000

0802a0dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a0dc:	b480      	push	{r7}
 802a0de:	b087      	sub	sp, #28
 802a0e0:	af00      	add	r7, sp, #0
 802a0e2:	6078      	str	r0, [r7, #4]
 802a0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802a0e6:	687b      	ldr	r3, [r7, #4]
 802a0e8:	6a1b      	ldr	r3, [r3, #32]
 802a0ea:	f023 0201 	bic.w	r2, r3, #1
 802a0ee:	687b      	ldr	r3, [r7, #4]
 802a0f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a0f2:	687b      	ldr	r3, [r7, #4]
 802a0f4:	6a1b      	ldr	r3, [r3, #32]
 802a0f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a0f8:	687b      	ldr	r3, [r7, #4]
 802a0fa:	685b      	ldr	r3, [r3, #4]
 802a0fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802a0fe:	687b      	ldr	r3, [r7, #4]
 802a100:	699b      	ldr	r3, [r3, #24]
 802a102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 802a104:	68fb      	ldr	r3, [r7, #12]
 802a106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a10a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 802a10c:	68fb      	ldr	r3, [r7, #12]
 802a10e:	f023 0303 	bic.w	r3, r3, #3
 802a112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802a114:	683b      	ldr	r3, [r7, #0]
 802a116:	681b      	ldr	r3, [r3, #0]
 802a118:	68fa      	ldr	r2, [r7, #12]
 802a11a:	4313      	orrs	r3, r2
 802a11c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 802a11e:	697b      	ldr	r3, [r7, #20]
 802a120:	f023 0302 	bic.w	r3, r3, #2
 802a124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802a126:	683b      	ldr	r3, [r7, #0]
 802a128:	689b      	ldr	r3, [r3, #8]
 802a12a:	697a      	ldr	r2, [r7, #20]
 802a12c:	4313      	orrs	r3, r2
 802a12e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 802a130:	687b      	ldr	r3, [r7, #4]
 802a132:	4a20      	ldr	r2, [pc, #128]	; (802a1b4 <TIM_OC1_SetConfig+0xd8>)
 802a134:	4293      	cmp	r3, r2
 802a136:	d003      	beq.n	802a140 <TIM_OC1_SetConfig+0x64>
 802a138:	687b      	ldr	r3, [r7, #4]
 802a13a:	4a1f      	ldr	r2, [pc, #124]	; (802a1b8 <TIM_OC1_SetConfig+0xdc>)
 802a13c:	4293      	cmp	r3, r2
 802a13e:	d10c      	bne.n	802a15a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 802a140:	697b      	ldr	r3, [r7, #20]
 802a142:	f023 0308 	bic.w	r3, r3, #8
 802a146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 802a148:	683b      	ldr	r3, [r7, #0]
 802a14a:	68db      	ldr	r3, [r3, #12]
 802a14c:	697a      	ldr	r2, [r7, #20]
 802a14e:	4313      	orrs	r3, r2
 802a150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 802a152:	697b      	ldr	r3, [r7, #20]
 802a154:	f023 0304 	bic.w	r3, r3, #4
 802a158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a15a:	687b      	ldr	r3, [r7, #4]
 802a15c:	4a15      	ldr	r2, [pc, #84]	; (802a1b4 <TIM_OC1_SetConfig+0xd8>)
 802a15e:	4293      	cmp	r3, r2
 802a160:	d003      	beq.n	802a16a <TIM_OC1_SetConfig+0x8e>
 802a162:	687b      	ldr	r3, [r7, #4]
 802a164:	4a14      	ldr	r2, [pc, #80]	; (802a1b8 <TIM_OC1_SetConfig+0xdc>)
 802a166:	4293      	cmp	r3, r2
 802a168:	d111      	bne.n	802a18e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 802a16a:	693b      	ldr	r3, [r7, #16]
 802a16c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802a170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 802a172:	693b      	ldr	r3, [r7, #16]
 802a174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802a178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 802a17a:	683b      	ldr	r3, [r7, #0]
 802a17c:	695b      	ldr	r3, [r3, #20]
 802a17e:	693a      	ldr	r2, [r7, #16]
 802a180:	4313      	orrs	r3, r2
 802a182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 802a184:	683b      	ldr	r3, [r7, #0]
 802a186:	699b      	ldr	r3, [r3, #24]
 802a188:	693a      	ldr	r2, [r7, #16]
 802a18a:	4313      	orrs	r3, r2
 802a18c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a18e:	687b      	ldr	r3, [r7, #4]
 802a190:	693a      	ldr	r2, [r7, #16]
 802a192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802a194:	687b      	ldr	r3, [r7, #4]
 802a196:	68fa      	ldr	r2, [r7, #12]
 802a198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 802a19a:	683b      	ldr	r3, [r7, #0]
 802a19c:	685a      	ldr	r2, [r3, #4]
 802a19e:	687b      	ldr	r3, [r7, #4]
 802a1a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a1a2:	687b      	ldr	r3, [r7, #4]
 802a1a4:	697a      	ldr	r2, [r7, #20]
 802a1a6:	621a      	str	r2, [r3, #32]
}
 802a1a8:	bf00      	nop
 802a1aa:	371c      	adds	r7, #28
 802a1ac:	46bd      	mov	sp, r7
 802a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1b2:	4770      	bx	lr
 802a1b4:	40010000 	.word	0x40010000
 802a1b8:	40010400 	.word	0x40010400

0802a1bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a1bc:	b480      	push	{r7}
 802a1be:	b087      	sub	sp, #28
 802a1c0:	af00      	add	r7, sp, #0
 802a1c2:	6078      	str	r0, [r7, #4]
 802a1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802a1c6:	687b      	ldr	r3, [r7, #4]
 802a1c8:	6a1b      	ldr	r3, [r3, #32]
 802a1ca:	f023 0210 	bic.w	r2, r3, #16
 802a1ce:	687b      	ldr	r3, [r7, #4]
 802a1d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a1d2:	687b      	ldr	r3, [r7, #4]
 802a1d4:	6a1b      	ldr	r3, [r3, #32]
 802a1d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a1d8:	687b      	ldr	r3, [r7, #4]
 802a1da:	685b      	ldr	r3, [r3, #4]
 802a1dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802a1de:	687b      	ldr	r3, [r7, #4]
 802a1e0:	699b      	ldr	r3, [r3, #24]
 802a1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 802a1e4:	68fb      	ldr	r3, [r7, #12]
 802a1e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802a1ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 802a1ec:	68fb      	ldr	r3, [r7, #12]
 802a1ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a1f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802a1f4:	683b      	ldr	r3, [r7, #0]
 802a1f6:	681b      	ldr	r3, [r3, #0]
 802a1f8:	021b      	lsls	r3, r3, #8
 802a1fa:	68fa      	ldr	r2, [r7, #12]
 802a1fc:	4313      	orrs	r3, r2
 802a1fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 802a200:	697b      	ldr	r3, [r7, #20]
 802a202:	f023 0320 	bic.w	r3, r3, #32
 802a206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 802a208:	683b      	ldr	r3, [r7, #0]
 802a20a:	689b      	ldr	r3, [r3, #8]
 802a20c:	011b      	lsls	r3, r3, #4
 802a20e:	697a      	ldr	r2, [r7, #20]
 802a210:	4313      	orrs	r3, r2
 802a212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 802a214:	687b      	ldr	r3, [r7, #4]
 802a216:	4a22      	ldr	r2, [pc, #136]	; (802a2a0 <TIM_OC2_SetConfig+0xe4>)
 802a218:	4293      	cmp	r3, r2
 802a21a:	d003      	beq.n	802a224 <TIM_OC2_SetConfig+0x68>
 802a21c:	687b      	ldr	r3, [r7, #4]
 802a21e:	4a21      	ldr	r2, [pc, #132]	; (802a2a4 <TIM_OC2_SetConfig+0xe8>)
 802a220:	4293      	cmp	r3, r2
 802a222:	d10d      	bne.n	802a240 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 802a224:	697b      	ldr	r3, [r7, #20]
 802a226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802a22a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 802a22c:	683b      	ldr	r3, [r7, #0]
 802a22e:	68db      	ldr	r3, [r3, #12]
 802a230:	011b      	lsls	r3, r3, #4
 802a232:	697a      	ldr	r2, [r7, #20]
 802a234:	4313      	orrs	r3, r2
 802a236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 802a238:	697b      	ldr	r3, [r7, #20]
 802a23a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802a23e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a240:	687b      	ldr	r3, [r7, #4]
 802a242:	4a17      	ldr	r2, [pc, #92]	; (802a2a0 <TIM_OC2_SetConfig+0xe4>)
 802a244:	4293      	cmp	r3, r2
 802a246:	d003      	beq.n	802a250 <TIM_OC2_SetConfig+0x94>
 802a248:	687b      	ldr	r3, [r7, #4]
 802a24a:	4a16      	ldr	r2, [pc, #88]	; (802a2a4 <TIM_OC2_SetConfig+0xe8>)
 802a24c:	4293      	cmp	r3, r2
 802a24e:	d113      	bne.n	802a278 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 802a250:	693b      	ldr	r3, [r7, #16]
 802a252:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802a256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 802a258:	693b      	ldr	r3, [r7, #16]
 802a25a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802a25e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 802a260:	683b      	ldr	r3, [r7, #0]
 802a262:	695b      	ldr	r3, [r3, #20]
 802a264:	009b      	lsls	r3, r3, #2
 802a266:	693a      	ldr	r2, [r7, #16]
 802a268:	4313      	orrs	r3, r2
 802a26a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 802a26c:	683b      	ldr	r3, [r7, #0]
 802a26e:	699b      	ldr	r3, [r3, #24]
 802a270:	009b      	lsls	r3, r3, #2
 802a272:	693a      	ldr	r2, [r7, #16]
 802a274:	4313      	orrs	r3, r2
 802a276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a278:	687b      	ldr	r3, [r7, #4]
 802a27a:	693a      	ldr	r2, [r7, #16]
 802a27c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802a27e:	687b      	ldr	r3, [r7, #4]
 802a280:	68fa      	ldr	r2, [r7, #12]
 802a282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 802a284:	683b      	ldr	r3, [r7, #0]
 802a286:	685a      	ldr	r2, [r3, #4]
 802a288:	687b      	ldr	r3, [r7, #4]
 802a28a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a28c:	687b      	ldr	r3, [r7, #4]
 802a28e:	697a      	ldr	r2, [r7, #20]
 802a290:	621a      	str	r2, [r3, #32]
}
 802a292:	bf00      	nop
 802a294:	371c      	adds	r7, #28
 802a296:	46bd      	mov	sp, r7
 802a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a29c:	4770      	bx	lr
 802a29e:	bf00      	nop
 802a2a0:	40010000 	.word	0x40010000
 802a2a4:	40010400 	.word	0x40010400

0802a2a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a2a8:	b480      	push	{r7}
 802a2aa:	b087      	sub	sp, #28
 802a2ac:	af00      	add	r7, sp, #0
 802a2ae:	6078      	str	r0, [r7, #4]
 802a2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802a2b2:	687b      	ldr	r3, [r7, #4]
 802a2b4:	6a1b      	ldr	r3, [r3, #32]
 802a2b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802a2ba:	687b      	ldr	r3, [r7, #4]
 802a2bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a2be:	687b      	ldr	r3, [r7, #4]
 802a2c0:	6a1b      	ldr	r3, [r3, #32]
 802a2c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a2c4:	687b      	ldr	r3, [r7, #4]
 802a2c6:	685b      	ldr	r3, [r3, #4]
 802a2c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802a2ca:	687b      	ldr	r3, [r7, #4]
 802a2cc:	69db      	ldr	r3, [r3, #28]
 802a2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 802a2d0:	68fb      	ldr	r3, [r7, #12]
 802a2d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a2d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 802a2d8:	68fb      	ldr	r3, [r7, #12]
 802a2da:	f023 0303 	bic.w	r3, r3, #3
 802a2de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802a2e0:	683b      	ldr	r3, [r7, #0]
 802a2e2:	681b      	ldr	r3, [r3, #0]
 802a2e4:	68fa      	ldr	r2, [r7, #12]
 802a2e6:	4313      	orrs	r3, r2
 802a2e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 802a2ea:	697b      	ldr	r3, [r7, #20]
 802a2ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802a2f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 802a2f2:	683b      	ldr	r3, [r7, #0]
 802a2f4:	689b      	ldr	r3, [r3, #8]
 802a2f6:	021b      	lsls	r3, r3, #8
 802a2f8:	697a      	ldr	r2, [r7, #20]
 802a2fa:	4313      	orrs	r3, r2
 802a2fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802a2fe:	687b      	ldr	r3, [r7, #4]
 802a300:	4a21      	ldr	r2, [pc, #132]	; (802a388 <TIM_OC3_SetConfig+0xe0>)
 802a302:	4293      	cmp	r3, r2
 802a304:	d003      	beq.n	802a30e <TIM_OC3_SetConfig+0x66>
 802a306:	687b      	ldr	r3, [r7, #4]
 802a308:	4a20      	ldr	r2, [pc, #128]	; (802a38c <TIM_OC3_SetConfig+0xe4>)
 802a30a:	4293      	cmp	r3, r2
 802a30c:	d10d      	bne.n	802a32a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802a30e:	697b      	ldr	r3, [r7, #20]
 802a310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802a314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 802a316:	683b      	ldr	r3, [r7, #0]
 802a318:	68db      	ldr	r3, [r3, #12]
 802a31a:	021b      	lsls	r3, r3, #8
 802a31c:	697a      	ldr	r2, [r7, #20]
 802a31e:	4313      	orrs	r3, r2
 802a320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802a322:	697b      	ldr	r3, [r7, #20]
 802a324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802a328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a32a:	687b      	ldr	r3, [r7, #4]
 802a32c:	4a16      	ldr	r2, [pc, #88]	; (802a388 <TIM_OC3_SetConfig+0xe0>)
 802a32e:	4293      	cmp	r3, r2
 802a330:	d003      	beq.n	802a33a <TIM_OC3_SetConfig+0x92>
 802a332:	687b      	ldr	r3, [r7, #4]
 802a334:	4a15      	ldr	r2, [pc, #84]	; (802a38c <TIM_OC3_SetConfig+0xe4>)
 802a336:	4293      	cmp	r3, r2
 802a338:	d113      	bne.n	802a362 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 802a33a:	693b      	ldr	r3, [r7, #16]
 802a33c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 802a342:	693b      	ldr	r3, [r7, #16]
 802a344:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802a348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802a34a:	683b      	ldr	r3, [r7, #0]
 802a34c:	695b      	ldr	r3, [r3, #20]
 802a34e:	011b      	lsls	r3, r3, #4
 802a350:	693a      	ldr	r2, [r7, #16]
 802a352:	4313      	orrs	r3, r2
 802a354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802a356:	683b      	ldr	r3, [r7, #0]
 802a358:	699b      	ldr	r3, [r3, #24]
 802a35a:	011b      	lsls	r3, r3, #4
 802a35c:	693a      	ldr	r2, [r7, #16]
 802a35e:	4313      	orrs	r3, r2
 802a360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a362:	687b      	ldr	r3, [r7, #4]
 802a364:	693a      	ldr	r2, [r7, #16]
 802a366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802a368:	687b      	ldr	r3, [r7, #4]
 802a36a:	68fa      	ldr	r2, [r7, #12]
 802a36c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 802a36e:	683b      	ldr	r3, [r7, #0]
 802a370:	685a      	ldr	r2, [r3, #4]
 802a372:	687b      	ldr	r3, [r7, #4]
 802a374:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a376:	687b      	ldr	r3, [r7, #4]
 802a378:	697a      	ldr	r2, [r7, #20]
 802a37a:	621a      	str	r2, [r3, #32]
}
 802a37c:	bf00      	nop
 802a37e:	371c      	adds	r7, #28
 802a380:	46bd      	mov	sp, r7
 802a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a386:	4770      	bx	lr
 802a388:	40010000 	.word	0x40010000
 802a38c:	40010400 	.word	0x40010400

0802a390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a390:	b480      	push	{r7}
 802a392:	b087      	sub	sp, #28
 802a394:	af00      	add	r7, sp, #0
 802a396:	6078      	str	r0, [r7, #4]
 802a398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802a39a:	687b      	ldr	r3, [r7, #4]
 802a39c:	6a1b      	ldr	r3, [r3, #32]
 802a39e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a3a2:	687b      	ldr	r3, [r7, #4]
 802a3a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a3a6:	687b      	ldr	r3, [r7, #4]
 802a3a8:	6a1b      	ldr	r3, [r3, #32]
 802a3aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a3ac:	687b      	ldr	r3, [r7, #4]
 802a3ae:	685b      	ldr	r3, [r3, #4]
 802a3b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802a3b2:	687b      	ldr	r3, [r7, #4]
 802a3b4:	69db      	ldr	r3, [r3, #28]
 802a3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 802a3b8:	68fb      	ldr	r3, [r7, #12]
 802a3ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802a3be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 802a3c0:	68fb      	ldr	r3, [r7, #12]
 802a3c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a3c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802a3c8:	683b      	ldr	r3, [r7, #0]
 802a3ca:	681b      	ldr	r3, [r3, #0]
 802a3cc:	021b      	lsls	r3, r3, #8
 802a3ce:	68fa      	ldr	r2, [r7, #12]
 802a3d0:	4313      	orrs	r3, r2
 802a3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802a3d4:	693b      	ldr	r3, [r7, #16]
 802a3d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802a3da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 802a3dc:	683b      	ldr	r3, [r7, #0]
 802a3de:	689b      	ldr	r3, [r3, #8]
 802a3e0:	031b      	lsls	r3, r3, #12
 802a3e2:	693a      	ldr	r2, [r7, #16]
 802a3e4:	4313      	orrs	r3, r2
 802a3e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a3e8:	687b      	ldr	r3, [r7, #4]
 802a3ea:	4a12      	ldr	r2, [pc, #72]	; (802a434 <TIM_OC4_SetConfig+0xa4>)
 802a3ec:	4293      	cmp	r3, r2
 802a3ee:	d003      	beq.n	802a3f8 <TIM_OC4_SetConfig+0x68>
 802a3f0:	687b      	ldr	r3, [r7, #4]
 802a3f2:	4a11      	ldr	r2, [pc, #68]	; (802a438 <TIM_OC4_SetConfig+0xa8>)
 802a3f4:	4293      	cmp	r3, r2
 802a3f6:	d109      	bne.n	802a40c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 802a3f8:	697b      	ldr	r3, [r7, #20]
 802a3fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802a3fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 802a400:	683b      	ldr	r3, [r7, #0]
 802a402:	695b      	ldr	r3, [r3, #20]
 802a404:	019b      	lsls	r3, r3, #6
 802a406:	697a      	ldr	r2, [r7, #20]
 802a408:	4313      	orrs	r3, r2
 802a40a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a40c:	687b      	ldr	r3, [r7, #4]
 802a40e:	697a      	ldr	r2, [r7, #20]
 802a410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802a412:	687b      	ldr	r3, [r7, #4]
 802a414:	68fa      	ldr	r2, [r7, #12]
 802a416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 802a418:	683b      	ldr	r3, [r7, #0]
 802a41a:	685a      	ldr	r2, [r3, #4]
 802a41c:	687b      	ldr	r3, [r7, #4]
 802a41e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a420:	687b      	ldr	r3, [r7, #4]
 802a422:	693a      	ldr	r2, [r7, #16]
 802a424:	621a      	str	r2, [r3, #32]
}
 802a426:	bf00      	nop
 802a428:	371c      	adds	r7, #28
 802a42a:	46bd      	mov	sp, r7
 802a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a430:	4770      	bx	lr
 802a432:	bf00      	nop
 802a434:	40010000 	.word	0x40010000
 802a438:	40010400 	.word	0x40010400

0802a43c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802a43c:	b480      	push	{r7}
 802a43e:	b087      	sub	sp, #28
 802a440:	af00      	add	r7, sp, #0
 802a442:	60f8      	str	r0, [r7, #12]
 802a444:	60b9      	str	r1, [r7, #8]
 802a446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802a448:	68fb      	ldr	r3, [r7, #12]
 802a44a:	6a1b      	ldr	r3, [r3, #32]
 802a44c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802a44e:	68fb      	ldr	r3, [r7, #12]
 802a450:	6a1b      	ldr	r3, [r3, #32]
 802a452:	f023 0201 	bic.w	r2, r3, #1
 802a456:	68fb      	ldr	r3, [r7, #12]
 802a458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802a45a:	68fb      	ldr	r3, [r7, #12]
 802a45c:	699b      	ldr	r3, [r3, #24]
 802a45e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802a460:	693b      	ldr	r3, [r7, #16]
 802a462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802a466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802a468:	687b      	ldr	r3, [r7, #4]
 802a46a:	011b      	lsls	r3, r3, #4
 802a46c:	693a      	ldr	r2, [r7, #16]
 802a46e:	4313      	orrs	r3, r2
 802a470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802a472:	697b      	ldr	r3, [r7, #20]
 802a474:	f023 030a 	bic.w	r3, r3, #10
 802a478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802a47a:	697a      	ldr	r2, [r7, #20]
 802a47c:	68bb      	ldr	r3, [r7, #8]
 802a47e:	4313      	orrs	r3, r2
 802a480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802a482:	68fb      	ldr	r3, [r7, #12]
 802a484:	693a      	ldr	r2, [r7, #16]
 802a486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a488:	68fb      	ldr	r3, [r7, #12]
 802a48a:	697a      	ldr	r2, [r7, #20]
 802a48c:	621a      	str	r2, [r3, #32]
}
 802a48e:	bf00      	nop
 802a490:	371c      	adds	r7, #28
 802a492:	46bd      	mov	sp, r7
 802a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a498:	4770      	bx	lr

0802a49a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802a49a:	b480      	push	{r7}
 802a49c:	b087      	sub	sp, #28
 802a49e:	af00      	add	r7, sp, #0
 802a4a0:	60f8      	str	r0, [r7, #12]
 802a4a2:	60b9      	str	r1, [r7, #8]
 802a4a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802a4a6:	68fb      	ldr	r3, [r7, #12]
 802a4a8:	6a1b      	ldr	r3, [r3, #32]
 802a4aa:	f023 0210 	bic.w	r2, r3, #16
 802a4ae:	68fb      	ldr	r3, [r7, #12]
 802a4b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802a4b2:	68fb      	ldr	r3, [r7, #12]
 802a4b4:	699b      	ldr	r3, [r3, #24]
 802a4b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802a4b8:	68fb      	ldr	r3, [r7, #12]
 802a4ba:	6a1b      	ldr	r3, [r3, #32]
 802a4bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802a4be:	697b      	ldr	r3, [r7, #20]
 802a4c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802a4c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802a4c6:	687b      	ldr	r3, [r7, #4]
 802a4c8:	031b      	lsls	r3, r3, #12
 802a4ca:	697a      	ldr	r2, [r7, #20]
 802a4cc:	4313      	orrs	r3, r2
 802a4ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802a4d0:	693b      	ldr	r3, [r7, #16]
 802a4d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802a4d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802a4d8:	68bb      	ldr	r3, [r7, #8]
 802a4da:	011b      	lsls	r3, r3, #4
 802a4dc:	693a      	ldr	r2, [r7, #16]
 802a4de:	4313      	orrs	r3, r2
 802a4e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802a4e2:	68fb      	ldr	r3, [r7, #12]
 802a4e4:	697a      	ldr	r2, [r7, #20]
 802a4e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a4e8:	68fb      	ldr	r3, [r7, #12]
 802a4ea:	693a      	ldr	r2, [r7, #16]
 802a4ec:	621a      	str	r2, [r3, #32]
}
 802a4ee:	bf00      	nop
 802a4f0:	371c      	adds	r7, #28
 802a4f2:	46bd      	mov	sp, r7
 802a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4f8:	4770      	bx	lr

0802a4fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802a4fa:	b480      	push	{r7}
 802a4fc:	b085      	sub	sp, #20
 802a4fe:	af00      	add	r7, sp, #0
 802a500:	6078      	str	r0, [r7, #4]
 802a502:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802a504:	687b      	ldr	r3, [r7, #4]
 802a506:	689b      	ldr	r3, [r3, #8]
 802a508:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802a50a:	68fb      	ldr	r3, [r7, #12]
 802a50c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802a512:	683a      	ldr	r2, [r7, #0]
 802a514:	68fb      	ldr	r3, [r7, #12]
 802a516:	4313      	orrs	r3, r2
 802a518:	f043 0307 	orr.w	r3, r3, #7
 802a51c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a51e:	687b      	ldr	r3, [r7, #4]
 802a520:	68fa      	ldr	r2, [r7, #12]
 802a522:	609a      	str	r2, [r3, #8]
}
 802a524:	bf00      	nop
 802a526:	3714      	adds	r7, #20
 802a528:	46bd      	mov	sp, r7
 802a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a52e:	4770      	bx	lr

0802a530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802a530:	b480      	push	{r7}
 802a532:	b087      	sub	sp, #28
 802a534:	af00      	add	r7, sp, #0
 802a536:	60f8      	str	r0, [r7, #12]
 802a538:	60b9      	str	r1, [r7, #8]
 802a53a:	607a      	str	r2, [r7, #4]
 802a53c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802a53e:	68fb      	ldr	r3, [r7, #12]
 802a540:	689b      	ldr	r3, [r3, #8]
 802a542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802a544:	697b      	ldr	r3, [r7, #20]
 802a546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802a54a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802a54c:	683b      	ldr	r3, [r7, #0]
 802a54e:	021a      	lsls	r2, r3, #8
 802a550:	687b      	ldr	r3, [r7, #4]
 802a552:	431a      	orrs	r2, r3
 802a554:	68bb      	ldr	r3, [r7, #8]
 802a556:	4313      	orrs	r3, r2
 802a558:	697a      	ldr	r2, [r7, #20]
 802a55a:	4313      	orrs	r3, r2
 802a55c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a55e:	68fb      	ldr	r3, [r7, #12]
 802a560:	697a      	ldr	r2, [r7, #20]
 802a562:	609a      	str	r2, [r3, #8]
}
 802a564:	bf00      	nop
 802a566:	371c      	adds	r7, #28
 802a568:	46bd      	mov	sp, r7
 802a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a56e:	4770      	bx	lr

0802a570 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 802a570:	b480      	push	{r7}
 802a572:	b087      	sub	sp, #28
 802a574:	af00      	add	r7, sp, #0
 802a576:	60f8      	str	r0, [r7, #12]
 802a578:	60b9      	str	r1, [r7, #8]
 802a57a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 802a57c:	68bb      	ldr	r3, [r7, #8]
 802a57e:	f003 031f 	and.w	r3, r3, #31
 802a582:	2201      	movs	r2, #1
 802a584:	fa02 f303 	lsl.w	r3, r2, r3
 802a588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802a58a:	68fb      	ldr	r3, [r7, #12]
 802a58c:	6a1a      	ldr	r2, [r3, #32]
 802a58e:	697b      	ldr	r3, [r7, #20]
 802a590:	43db      	mvns	r3, r3
 802a592:	401a      	ands	r2, r3
 802a594:	68fb      	ldr	r3, [r7, #12]
 802a596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802a598:	68fb      	ldr	r3, [r7, #12]
 802a59a:	6a1a      	ldr	r2, [r3, #32]
 802a59c:	68bb      	ldr	r3, [r7, #8]
 802a59e:	f003 031f 	and.w	r3, r3, #31
 802a5a2:	6879      	ldr	r1, [r7, #4]
 802a5a4:	fa01 f303 	lsl.w	r3, r1, r3
 802a5a8:	431a      	orrs	r2, r3
 802a5aa:	68fb      	ldr	r3, [r7, #12]
 802a5ac:	621a      	str	r2, [r3, #32]
}
 802a5ae:	bf00      	nop
 802a5b0:	371c      	adds	r7, #28
 802a5b2:	46bd      	mov	sp, r7
 802a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a5b8:	4770      	bx	lr
	...

0802a5bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802a5bc:	b480      	push	{r7}
 802a5be:	b085      	sub	sp, #20
 802a5c0:	af00      	add	r7, sp, #0
 802a5c2:	6078      	str	r0, [r7, #4]
 802a5c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802a5c6:	687b      	ldr	r3, [r7, #4]
 802a5c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a5cc:	2b01      	cmp	r3, #1
 802a5ce:	d101      	bne.n	802a5d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802a5d0:	2302      	movs	r3, #2
 802a5d2:	e05a      	b.n	802a68a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802a5d4:	687b      	ldr	r3, [r7, #4]
 802a5d6:	2201      	movs	r2, #1
 802a5d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802a5dc:	687b      	ldr	r3, [r7, #4]
 802a5de:	2202      	movs	r2, #2
 802a5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802a5e4:	687b      	ldr	r3, [r7, #4]
 802a5e6:	681b      	ldr	r3, [r3, #0]
 802a5e8:	685b      	ldr	r3, [r3, #4]
 802a5ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802a5ec:	687b      	ldr	r3, [r7, #4]
 802a5ee:	681b      	ldr	r3, [r3, #0]
 802a5f0:	689b      	ldr	r3, [r3, #8]
 802a5f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802a5f4:	68fb      	ldr	r3, [r7, #12]
 802a5f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a5fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802a5fc:	683b      	ldr	r3, [r7, #0]
 802a5fe:	681b      	ldr	r3, [r3, #0]
 802a600:	68fa      	ldr	r2, [r7, #12]
 802a602:	4313      	orrs	r3, r2
 802a604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802a606:	687b      	ldr	r3, [r7, #4]
 802a608:	681b      	ldr	r3, [r3, #0]
 802a60a:	68fa      	ldr	r2, [r7, #12]
 802a60c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802a60e:	687b      	ldr	r3, [r7, #4]
 802a610:	681b      	ldr	r3, [r3, #0]
 802a612:	4a21      	ldr	r2, [pc, #132]	; (802a698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 802a614:	4293      	cmp	r3, r2
 802a616:	d022      	beq.n	802a65e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a618:	687b      	ldr	r3, [r7, #4]
 802a61a:	681b      	ldr	r3, [r3, #0]
 802a61c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a620:	d01d      	beq.n	802a65e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a622:	687b      	ldr	r3, [r7, #4]
 802a624:	681b      	ldr	r3, [r3, #0]
 802a626:	4a1d      	ldr	r2, [pc, #116]	; (802a69c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802a628:	4293      	cmp	r3, r2
 802a62a:	d018      	beq.n	802a65e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a62c:	687b      	ldr	r3, [r7, #4]
 802a62e:	681b      	ldr	r3, [r3, #0]
 802a630:	4a1b      	ldr	r2, [pc, #108]	; (802a6a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802a632:	4293      	cmp	r3, r2
 802a634:	d013      	beq.n	802a65e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a636:	687b      	ldr	r3, [r7, #4]
 802a638:	681b      	ldr	r3, [r3, #0]
 802a63a:	4a1a      	ldr	r2, [pc, #104]	; (802a6a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 802a63c:	4293      	cmp	r3, r2
 802a63e:	d00e      	beq.n	802a65e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a640:	687b      	ldr	r3, [r7, #4]
 802a642:	681b      	ldr	r3, [r3, #0]
 802a644:	4a18      	ldr	r2, [pc, #96]	; (802a6a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802a646:	4293      	cmp	r3, r2
 802a648:	d009      	beq.n	802a65e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a64a:	687b      	ldr	r3, [r7, #4]
 802a64c:	681b      	ldr	r3, [r3, #0]
 802a64e:	4a17      	ldr	r2, [pc, #92]	; (802a6ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802a650:	4293      	cmp	r3, r2
 802a652:	d004      	beq.n	802a65e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a654:	687b      	ldr	r3, [r7, #4]
 802a656:	681b      	ldr	r3, [r3, #0]
 802a658:	4a15      	ldr	r2, [pc, #84]	; (802a6b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802a65a:	4293      	cmp	r3, r2
 802a65c:	d10c      	bne.n	802a678 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802a65e:	68bb      	ldr	r3, [r7, #8]
 802a660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802a664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802a666:	683b      	ldr	r3, [r7, #0]
 802a668:	685b      	ldr	r3, [r3, #4]
 802a66a:	68ba      	ldr	r2, [r7, #8]
 802a66c:	4313      	orrs	r3, r2
 802a66e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802a670:	687b      	ldr	r3, [r7, #4]
 802a672:	681b      	ldr	r3, [r3, #0]
 802a674:	68ba      	ldr	r2, [r7, #8]
 802a676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802a678:	687b      	ldr	r3, [r7, #4]
 802a67a:	2201      	movs	r2, #1
 802a67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a680:	687b      	ldr	r3, [r7, #4]
 802a682:	2200      	movs	r2, #0
 802a684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a688:	2300      	movs	r3, #0
}
 802a68a:	4618      	mov	r0, r3
 802a68c:	3714      	adds	r7, #20
 802a68e:	46bd      	mov	sp, r7
 802a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a694:	4770      	bx	lr
 802a696:	bf00      	nop
 802a698:	40010000 	.word	0x40010000
 802a69c:	40000400 	.word	0x40000400
 802a6a0:	40000800 	.word	0x40000800
 802a6a4:	40000c00 	.word	0x40000c00
 802a6a8:	40010400 	.word	0x40010400
 802a6ac:	40014000 	.word	0x40014000
 802a6b0:	40001800 	.word	0x40001800

0802a6b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 802a6b4:	b480      	push	{r7}
 802a6b6:	b085      	sub	sp, #20
 802a6b8:	af00      	add	r7, sp, #0
 802a6ba:	6078      	str	r0, [r7, #4]
 802a6bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802a6be:	2300      	movs	r3, #0
 802a6c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 802a6c2:	687b      	ldr	r3, [r7, #4]
 802a6c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a6c8:	2b01      	cmp	r3, #1
 802a6ca:	d101      	bne.n	802a6d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 802a6cc:	2302      	movs	r3, #2
 802a6ce:	e03d      	b.n	802a74c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 802a6d0:	687b      	ldr	r3, [r7, #4]
 802a6d2:	2201      	movs	r2, #1
 802a6d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 802a6d8:	68fb      	ldr	r3, [r7, #12]
 802a6da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802a6de:	683b      	ldr	r3, [r7, #0]
 802a6e0:	68db      	ldr	r3, [r3, #12]
 802a6e2:	4313      	orrs	r3, r2
 802a6e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 802a6e6:	68fb      	ldr	r3, [r7, #12]
 802a6e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 802a6ec:	683b      	ldr	r3, [r7, #0]
 802a6ee:	689b      	ldr	r3, [r3, #8]
 802a6f0:	4313      	orrs	r3, r2
 802a6f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 802a6f4:	68fb      	ldr	r3, [r7, #12]
 802a6f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 802a6fa:	683b      	ldr	r3, [r7, #0]
 802a6fc:	685b      	ldr	r3, [r3, #4]
 802a6fe:	4313      	orrs	r3, r2
 802a700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 802a702:	68fb      	ldr	r3, [r7, #12]
 802a704:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 802a708:	683b      	ldr	r3, [r7, #0]
 802a70a:	681b      	ldr	r3, [r3, #0]
 802a70c:	4313      	orrs	r3, r2
 802a70e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 802a710:	68fb      	ldr	r3, [r7, #12]
 802a712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a716:	683b      	ldr	r3, [r7, #0]
 802a718:	691b      	ldr	r3, [r3, #16]
 802a71a:	4313      	orrs	r3, r2
 802a71c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 802a71e:	68fb      	ldr	r3, [r7, #12]
 802a720:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 802a724:	683b      	ldr	r3, [r7, #0]
 802a726:	695b      	ldr	r3, [r3, #20]
 802a728:	4313      	orrs	r3, r2
 802a72a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 802a72c:	68fb      	ldr	r3, [r7, #12]
 802a72e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 802a732:	683b      	ldr	r3, [r7, #0]
 802a734:	69db      	ldr	r3, [r3, #28]
 802a736:	4313      	orrs	r3, r2
 802a738:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 802a73a:	687b      	ldr	r3, [r7, #4]
 802a73c:	681b      	ldr	r3, [r3, #0]
 802a73e:	68fa      	ldr	r2, [r7, #12]
 802a740:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 802a742:	687b      	ldr	r3, [r7, #4]
 802a744:	2200      	movs	r2, #0
 802a746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a74a:	2300      	movs	r3, #0
}
 802a74c:	4618      	mov	r0, r3
 802a74e:	3714      	adds	r7, #20
 802a750:	46bd      	mov	sp, r7
 802a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a756:	4770      	bx	lr

0802a758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802a758:	b480      	push	{r7}
 802a75a:	b083      	sub	sp, #12
 802a75c:	af00      	add	r7, sp, #0
 802a75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802a760:	bf00      	nop
 802a762:	370c      	adds	r7, #12
 802a764:	46bd      	mov	sp, r7
 802a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a76a:	4770      	bx	lr

0802a76c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802a76c:	b480      	push	{r7}
 802a76e:	b083      	sub	sp, #12
 802a770:	af00      	add	r7, sp, #0
 802a772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802a774:	bf00      	nop
 802a776:	370c      	adds	r7, #12
 802a778:	46bd      	mov	sp, r7
 802a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a77e:	4770      	bx	lr

0802a780 <__cxa_guard_acquire>:
 802a780:	6803      	ldr	r3, [r0, #0]
 802a782:	07db      	lsls	r3, r3, #31
 802a784:	d406      	bmi.n	802a794 <__cxa_guard_acquire+0x14>
 802a786:	7843      	ldrb	r3, [r0, #1]
 802a788:	b103      	cbz	r3, 802a78c <__cxa_guard_acquire+0xc>
 802a78a:	deff      	udf	#255	; 0xff
 802a78c:	2301      	movs	r3, #1
 802a78e:	7043      	strb	r3, [r0, #1]
 802a790:	4618      	mov	r0, r3
 802a792:	4770      	bx	lr
 802a794:	2000      	movs	r0, #0
 802a796:	4770      	bx	lr

0802a798 <__cxa_guard_release>:
 802a798:	2301      	movs	r3, #1
 802a79a:	6003      	str	r3, [r0, #0]
 802a79c:	4770      	bx	lr
	...

0802a7a0 <__libc_init_array>:
 802a7a0:	b570      	push	{r4, r5, r6, lr}
 802a7a2:	4e0d      	ldr	r6, [pc, #52]	; (802a7d8 <__libc_init_array+0x38>)
 802a7a4:	4c0d      	ldr	r4, [pc, #52]	; (802a7dc <__libc_init_array+0x3c>)
 802a7a6:	1ba4      	subs	r4, r4, r6
 802a7a8:	10a4      	asrs	r4, r4, #2
 802a7aa:	2500      	movs	r5, #0
 802a7ac:	42a5      	cmp	r5, r4
 802a7ae:	d109      	bne.n	802a7c4 <__libc_init_array+0x24>
 802a7b0:	4e0b      	ldr	r6, [pc, #44]	; (802a7e0 <__libc_init_array+0x40>)
 802a7b2:	4c0c      	ldr	r4, [pc, #48]	; (802a7e4 <__libc_init_array+0x44>)
 802a7b4:	f000 f82c 	bl	802a810 <_init>
 802a7b8:	1ba4      	subs	r4, r4, r6
 802a7ba:	10a4      	asrs	r4, r4, #2
 802a7bc:	2500      	movs	r5, #0
 802a7be:	42a5      	cmp	r5, r4
 802a7c0:	d105      	bne.n	802a7ce <__libc_init_array+0x2e>
 802a7c2:	bd70      	pop	{r4, r5, r6, pc}
 802a7c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a7c8:	4798      	blx	r3
 802a7ca:	3501      	adds	r5, #1
 802a7cc:	e7ee      	b.n	802a7ac <__libc_init_array+0xc>
 802a7ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a7d2:	4798      	blx	r3
 802a7d4:	3501      	adds	r5, #1
 802a7d6:	e7f2      	b.n	802a7be <__libc_init_array+0x1e>
 802a7d8:	0802a850 	.word	0x0802a850
 802a7dc:	0802a850 	.word	0x0802a850
 802a7e0:	0802a850 	.word	0x0802a850
 802a7e4:	0802a858 	.word	0x0802a858

0802a7e8 <memcpy>:
 802a7e8:	b510      	push	{r4, lr}
 802a7ea:	1e43      	subs	r3, r0, #1
 802a7ec:	440a      	add	r2, r1
 802a7ee:	4291      	cmp	r1, r2
 802a7f0:	d100      	bne.n	802a7f4 <memcpy+0xc>
 802a7f2:	bd10      	pop	{r4, pc}
 802a7f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a7f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a7fc:	e7f7      	b.n	802a7ee <memcpy+0x6>

0802a7fe <memset>:
 802a7fe:	4402      	add	r2, r0
 802a800:	4603      	mov	r3, r0
 802a802:	4293      	cmp	r3, r2
 802a804:	d100      	bne.n	802a808 <memset+0xa>
 802a806:	4770      	bx	lr
 802a808:	f803 1b01 	strb.w	r1, [r3], #1
 802a80c:	e7f9      	b.n	802a802 <memset+0x4>
	...

0802a810 <_init>:
 802a810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a812:	bf00      	nop
 802a814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a816:	bc08      	pop	{r3}
 802a818:	469e      	mov	lr, r3
 802a81a:	4770      	bx	lr

0802a81c <_fini>:
 802a81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a81e:	bf00      	nop
 802a820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a822:	bc08      	pop	{r3}
 802a824:	469e      	mov	lr, r3
 802a826:	4770      	bx	lr
