
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a188  08020000  08020000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0802a188  0802a188  0002a188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a1a0  0802a1a0  0003001c  2**0
                  CONTENTS
  4 .ARM          00000008  0802a1a0  0802a1a0  0002a1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a1a8  0802a1a8  0003001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a1a8  0802a1a8  0002a1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a1b0  0802a1b0  0002a1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0802a1b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b30  20000020  0802a1d0  00030020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b50  0802a1d0  00030b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002300a  00000000  00000000  0003004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e86  00000000  00000000  00053056  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001528  00000000  00000000  00056ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a0  00000000  00000000  00058408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024cda  00000000  00000000  000597a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013942  00000000  00000000  0007e482  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca921  00000000  00000000  00091dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c6e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a14  00000000  00000000  0015c760  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	20000020 	.word	0x20000020
 802001c:	00000000 	.word	0x00000000
 8020020:	0802a170 	.word	0x0802a170

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	20000024 	.word	0x20000024
 802003c:	0802a170 	.word	0x0802a170

08020040 <__aeabi_drsub>:
 8020040:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020044:	e002      	b.n	802004c <__adddf3>
 8020046:	bf00      	nop

08020048 <__aeabi_dsub>:
 8020048:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802004c <__adddf3>:
 802004c:	b530      	push	{r4, r5, lr}
 802004e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020052:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020056:	ea94 0f05 	teq	r4, r5
 802005a:	bf08      	it	eq
 802005c:	ea90 0f02 	teqeq	r0, r2
 8020060:	bf1f      	itttt	ne
 8020062:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020066:	ea55 0c02 	orrsne.w	ip, r5, r2
 802006a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802006e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020072:	f000 80e2 	beq.w	802023a <__adddf3+0x1ee>
 8020076:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802007a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802007e:	bfb8      	it	lt
 8020080:	426d      	neglt	r5, r5
 8020082:	dd0c      	ble.n	802009e <__adddf3+0x52>
 8020084:	442c      	add	r4, r5
 8020086:	ea80 0202 	eor.w	r2, r0, r2
 802008a:	ea81 0303 	eor.w	r3, r1, r3
 802008e:	ea82 0000 	eor.w	r0, r2, r0
 8020092:	ea83 0101 	eor.w	r1, r3, r1
 8020096:	ea80 0202 	eor.w	r2, r0, r2
 802009a:	ea81 0303 	eor.w	r3, r1, r3
 802009e:	2d36      	cmp	r5, #54	; 0x36
 80200a0:	bf88      	it	hi
 80200a2:	bd30      	pophi	{r4, r5, pc}
 80200a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80200a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80200ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80200b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80200b4:	d002      	beq.n	80200bc <__adddf3+0x70>
 80200b6:	4240      	negs	r0, r0
 80200b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80200bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80200c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80200c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80200c8:	d002      	beq.n	80200d0 <__adddf3+0x84>
 80200ca:	4252      	negs	r2, r2
 80200cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80200d0:	ea94 0f05 	teq	r4, r5
 80200d4:	f000 80a7 	beq.w	8020226 <__adddf3+0x1da>
 80200d8:	f1a4 0401 	sub.w	r4, r4, #1
 80200dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80200e0:	db0d      	blt.n	80200fe <__adddf3+0xb2>
 80200e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80200e6:	fa22 f205 	lsr.w	r2, r2, r5
 80200ea:	1880      	adds	r0, r0, r2
 80200ec:	f141 0100 	adc.w	r1, r1, #0
 80200f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80200f4:	1880      	adds	r0, r0, r2
 80200f6:	fa43 f305 	asr.w	r3, r3, r5
 80200fa:	4159      	adcs	r1, r3
 80200fc:	e00e      	b.n	802011c <__adddf3+0xd0>
 80200fe:	f1a5 0520 	sub.w	r5, r5, #32
 8020102:	f10e 0e20 	add.w	lr, lr, #32
 8020106:	2a01      	cmp	r2, #1
 8020108:	fa03 fc0e 	lsl.w	ip, r3, lr
 802010c:	bf28      	it	cs
 802010e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020112:	fa43 f305 	asr.w	r3, r3, r5
 8020116:	18c0      	adds	r0, r0, r3
 8020118:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802011c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020120:	d507      	bpl.n	8020132 <__adddf3+0xe6>
 8020122:	f04f 0e00 	mov.w	lr, #0
 8020126:	f1dc 0c00 	rsbs	ip, ip, #0
 802012a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802012e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020132:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020136:	d31b      	bcc.n	8020170 <__adddf3+0x124>
 8020138:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802013c:	d30c      	bcc.n	8020158 <__adddf3+0x10c>
 802013e:	0849      	lsrs	r1, r1, #1
 8020140:	ea5f 0030 	movs.w	r0, r0, rrx
 8020144:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020148:	f104 0401 	add.w	r4, r4, #1
 802014c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020150:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020154:	f080 809a 	bcs.w	802028c <__adddf3+0x240>
 8020158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802015c:	bf08      	it	eq
 802015e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020162:	f150 0000 	adcs.w	r0, r0, #0
 8020166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802016a:	ea41 0105 	orr.w	r1, r1, r5
 802016e:	bd30      	pop	{r4, r5, pc}
 8020170:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020174:	4140      	adcs	r0, r0
 8020176:	eb41 0101 	adc.w	r1, r1, r1
 802017a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802017e:	f1a4 0401 	sub.w	r4, r4, #1
 8020182:	d1e9      	bne.n	8020158 <__adddf3+0x10c>
 8020184:	f091 0f00 	teq	r1, #0
 8020188:	bf04      	itt	eq
 802018a:	4601      	moveq	r1, r0
 802018c:	2000      	moveq	r0, #0
 802018e:	fab1 f381 	clz	r3, r1
 8020192:	bf08      	it	eq
 8020194:	3320      	addeq	r3, #32
 8020196:	f1a3 030b 	sub.w	r3, r3, #11
 802019a:	f1b3 0220 	subs.w	r2, r3, #32
 802019e:	da0c      	bge.n	80201ba <__adddf3+0x16e>
 80201a0:	320c      	adds	r2, #12
 80201a2:	dd08      	ble.n	80201b6 <__adddf3+0x16a>
 80201a4:	f102 0c14 	add.w	ip, r2, #20
 80201a8:	f1c2 020c 	rsb	r2, r2, #12
 80201ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80201b0:	fa21 f102 	lsr.w	r1, r1, r2
 80201b4:	e00c      	b.n	80201d0 <__adddf3+0x184>
 80201b6:	f102 0214 	add.w	r2, r2, #20
 80201ba:	bfd8      	it	le
 80201bc:	f1c2 0c20 	rsble	ip, r2, #32
 80201c0:	fa01 f102 	lsl.w	r1, r1, r2
 80201c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80201c8:	bfdc      	itt	le
 80201ca:	ea41 010c 	orrle.w	r1, r1, ip
 80201ce:	4090      	lslle	r0, r2
 80201d0:	1ae4      	subs	r4, r4, r3
 80201d2:	bfa2      	ittt	ge
 80201d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80201d8:	4329      	orrge	r1, r5
 80201da:	bd30      	popge	{r4, r5, pc}
 80201dc:	ea6f 0404 	mvn.w	r4, r4
 80201e0:	3c1f      	subs	r4, #31
 80201e2:	da1c      	bge.n	802021e <__adddf3+0x1d2>
 80201e4:	340c      	adds	r4, #12
 80201e6:	dc0e      	bgt.n	8020206 <__adddf3+0x1ba>
 80201e8:	f104 0414 	add.w	r4, r4, #20
 80201ec:	f1c4 0220 	rsb	r2, r4, #32
 80201f0:	fa20 f004 	lsr.w	r0, r0, r4
 80201f4:	fa01 f302 	lsl.w	r3, r1, r2
 80201f8:	ea40 0003 	orr.w	r0, r0, r3
 80201fc:	fa21 f304 	lsr.w	r3, r1, r4
 8020200:	ea45 0103 	orr.w	r1, r5, r3
 8020204:	bd30      	pop	{r4, r5, pc}
 8020206:	f1c4 040c 	rsb	r4, r4, #12
 802020a:	f1c4 0220 	rsb	r2, r4, #32
 802020e:	fa20 f002 	lsr.w	r0, r0, r2
 8020212:	fa01 f304 	lsl.w	r3, r1, r4
 8020216:	ea40 0003 	orr.w	r0, r0, r3
 802021a:	4629      	mov	r1, r5
 802021c:	bd30      	pop	{r4, r5, pc}
 802021e:	fa21 f004 	lsr.w	r0, r1, r4
 8020222:	4629      	mov	r1, r5
 8020224:	bd30      	pop	{r4, r5, pc}
 8020226:	f094 0f00 	teq	r4, #0
 802022a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802022e:	bf06      	itte	eq
 8020230:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020234:	3401      	addeq	r4, #1
 8020236:	3d01      	subne	r5, #1
 8020238:	e74e      	b.n	80200d8 <__adddf3+0x8c>
 802023a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802023e:	bf18      	it	ne
 8020240:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020244:	d029      	beq.n	802029a <__adddf3+0x24e>
 8020246:	ea94 0f05 	teq	r4, r5
 802024a:	bf08      	it	eq
 802024c:	ea90 0f02 	teqeq	r0, r2
 8020250:	d005      	beq.n	802025e <__adddf3+0x212>
 8020252:	ea54 0c00 	orrs.w	ip, r4, r0
 8020256:	bf04      	itt	eq
 8020258:	4619      	moveq	r1, r3
 802025a:	4610      	moveq	r0, r2
 802025c:	bd30      	pop	{r4, r5, pc}
 802025e:	ea91 0f03 	teq	r1, r3
 8020262:	bf1e      	ittt	ne
 8020264:	2100      	movne	r1, #0
 8020266:	2000      	movne	r0, #0
 8020268:	bd30      	popne	{r4, r5, pc}
 802026a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802026e:	d105      	bne.n	802027c <__adddf3+0x230>
 8020270:	0040      	lsls	r0, r0, #1
 8020272:	4149      	adcs	r1, r1
 8020274:	bf28      	it	cs
 8020276:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802027a:	bd30      	pop	{r4, r5, pc}
 802027c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020280:	bf3c      	itt	cc
 8020282:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020286:	bd30      	popcc	{r4, r5, pc}
 8020288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802028c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020290:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020294:	f04f 0000 	mov.w	r0, #0
 8020298:	bd30      	pop	{r4, r5, pc}
 802029a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802029e:	bf1a      	itte	ne
 80202a0:	4619      	movne	r1, r3
 80202a2:	4610      	movne	r0, r2
 80202a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80202a8:	bf1c      	itt	ne
 80202aa:	460b      	movne	r3, r1
 80202ac:	4602      	movne	r2, r0
 80202ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80202b2:	bf06      	itte	eq
 80202b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80202b8:	ea91 0f03 	teqeq	r1, r3
 80202bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80202c0:	bd30      	pop	{r4, r5, pc}
 80202c2:	bf00      	nop

080202c4 <__aeabi_ui2d>:
 80202c4:	f090 0f00 	teq	r0, #0
 80202c8:	bf04      	itt	eq
 80202ca:	2100      	moveq	r1, #0
 80202cc:	4770      	bxeq	lr
 80202ce:	b530      	push	{r4, r5, lr}
 80202d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202d8:	f04f 0500 	mov.w	r5, #0
 80202dc:	f04f 0100 	mov.w	r1, #0
 80202e0:	e750      	b.n	8020184 <__adddf3+0x138>
 80202e2:	bf00      	nop

080202e4 <__aeabi_i2d>:
 80202e4:	f090 0f00 	teq	r0, #0
 80202e8:	bf04      	itt	eq
 80202ea:	2100      	moveq	r1, #0
 80202ec:	4770      	bxeq	lr
 80202ee:	b530      	push	{r4, r5, lr}
 80202f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80202fc:	bf48      	it	mi
 80202fe:	4240      	negmi	r0, r0
 8020300:	f04f 0100 	mov.w	r1, #0
 8020304:	e73e      	b.n	8020184 <__adddf3+0x138>
 8020306:	bf00      	nop

08020308 <__aeabi_f2d>:
 8020308:	0042      	lsls	r2, r0, #1
 802030a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802030e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020312:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020316:	bf1f      	itttt	ne
 8020318:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802031c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020320:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020324:	4770      	bxne	lr
 8020326:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802032a:	bf08      	it	eq
 802032c:	4770      	bxeq	lr
 802032e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020332:	bf04      	itt	eq
 8020334:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020338:	4770      	bxeq	lr
 802033a:	b530      	push	{r4, r5, lr}
 802033c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020344:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020348:	e71c      	b.n	8020184 <__adddf3+0x138>
 802034a:	bf00      	nop

0802034c <__aeabi_ul2d>:
 802034c:	ea50 0201 	orrs.w	r2, r0, r1
 8020350:	bf08      	it	eq
 8020352:	4770      	bxeq	lr
 8020354:	b530      	push	{r4, r5, lr}
 8020356:	f04f 0500 	mov.w	r5, #0
 802035a:	e00a      	b.n	8020372 <__aeabi_l2d+0x16>

0802035c <__aeabi_l2d>:
 802035c:	ea50 0201 	orrs.w	r2, r0, r1
 8020360:	bf08      	it	eq
 8020362:	4770      	bxeq	lr
 8020364:	b530      	push	{r4, r5, lr}
 8020366:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802036a:	d502      	bpl.n	8020372 <__aeabi_l2d+0x16>
 802036c:	4240      	negs	r0, r0
 802036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020372:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020376:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802037a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802037e:	f43f aed8 	beq.w	8020132 <__adddf3+0xe6>
 8020382:	f04f 0203 	mov.w	r2, #3
 8020386:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802038a:	bf18      	it	ne
 802038c:	3203      	addne	r2, #3
 802038e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020392:	bf18      	it	ne
 8020394:	3203      	addne	r2, #3
 8020396:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802039a:	f1c2 0320 	rsb	r3, r2, #32
 802039e:	fa00 fc03 	lsl.w	ip, r0, r3
 80203a2:	fa20 f002 	lsr.w	r0, r0, r2
 80203a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80203aa:	ea40 000e 	orr.w	r0, r0, lr
 80203ae:	fa21 f102 	lsr.w	r1, r1, r2
 80203b2:	4414      	add	r4, r2
 80203b4:	e6bd      	b.n	8020132 <__adddf3+0xe6>
 80203b6:	bf00      	nop

080203b8 <__aeabi_dmul>:
 80203b8:	b570      	push	{r4, r5, r6, lr}
 80203ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80203be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80203c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80203c6:	bf1d      	ittte	ne
 80203c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80203cc:	ea94 0f0c 	teqne	r4, ip
 80203d0:	ea95 0f0c 	teqne	r5, ip
 80203d4:	f000 f8de 	bleq	8020594 <__aeabi_dmul+0x1dc>
 80203d8:	442c      	add	r4, r5
 80203da:	ea81 0603 	eor.w	r6, r1, r3
 80203de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80203e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80203e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80203ea:	bf18      	it	ne
 80203ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80203f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80203f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80203f8:	d038      	beq.n	802046c <__aeabi_dmul+0xb4>
 80203fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80203fe:	f04f 0500 	mov.w	r5, #0
 8020402:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020406:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802040a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802040e:	f04f 0600 	mov.w	r6, #0
 8020412:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020416:	f09c 0f00 	teq	ip, #0
 802041a:	bf18      	it	ne
 802041c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020420:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020424:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020428:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802042c:	d204      	bcs.n	8020438 <__aeabi_dmul+0x80>
 802042e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020432:	416d      	adcs	r5, r5
 8020434:	eb46 0606 	adc.w	r6, r6, r6
 8020438:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802043c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020440:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020444:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020448:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802044c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020450:	bf88      	it	hi
 8020452:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020456:	d81e      	bhi.n	8020496 <__aeabi_dmul+0xde>
 8020458:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802045c:	bf08      	it	eq
 802045e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020462:	f150 0000 	adcs.w	r0, r0, #0
 8020466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802046a:	bd70      	pop	{r4, r5, r6, pc}
 802046c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020470:	ea46 0101 	orr.w	r1, r6, r1
 8020474:	ea40 0002 	orr.w	r0, r0, r2
 8020478:	ea81 0103 	eor.w	r1, r1, r3
 802047c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020480:	bfc2      	ittt	gt
 8020482:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020486:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802048a:	bd70      	popgt	{r4, r5, r6, pc}
 802048c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020490:	f04f 0e00 	mov.w	lr, #0
 8020494:	3c01      	subs	r4, #1
 8020496:	f300 80ab 	bgt.w	80205f0 <__aeabi_dmul+0x238>
 802049a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802049e:	bfde      	ittt	le
 80204a0:	2000      	movle	r0, #0
 80204a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80204a6:	bd70      	pople	{r4, r5, r6, pc}
 80204a8:	f1c4 0400 	rsb	r4, r4, #0
 80204ac:	3c20      	subs	r4, #32
 80204ae:	da35      	bge.n	802051c <__aeabi_dmul+0x164>
 80204b0:	340c      	adds	r4, #12
 80204b2:	dc1b      	bgt.n	80204ec <__aeabi_dmul+0x134>
 80204b4:	f104 0414 	add.w	r4, r4, #20
 80204b8:	f1c4 0520 	rsb	r5, r4, #32
 80204bc:	fa00 f305 	lsl.w	r3, r0, r5
 80204c0:	fa20 f004 	lsr.w	r0, r0, r4
 80204c4:	fa01 f205 	lsl.w	r2, r1, r5
 80204c8:	ea40 0002 	orr.w	r0, r0, r2
 80204cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80204d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80204d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80204d8:	fa21 f604 	lsr.w	r6, r1, r4
 80204dc:	eb42 0106 	adc.w	r1, r2, r6
 80204e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80204e4:	bf08      	it	eq
 80204e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80204ea:	bd70      	pop	{r4, r5, r6, pc}
 80204ec:	f1c4 040c 	rsb	r4, r4, #12
 80204f0:	f1c4 0520 	rsb	r5, r4, #32
 80204f4:	fa00 f304 	lsl.w	r3, r0, r4
 80204f8:	fa20 f005 	lsr.w	r0, r0, r5
 80204fc:	fa01 f204 	lsl.w	r2, r1, r4
 8020500:	ea40 0002 	orr.w	r0, r0, r2
 8020504:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020508:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802050c:	f141 0100 	adc.w	r1, r1, #0
 8020510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020514:	bf08      	it	eq
 8020516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802051a:	bd70      	pop	{r4, r5, r6, pc}
 802051c:	f1c4 0520 	rsb	r5, r4, #32
 8020520:	fa00 f205 	lsl.w	r2, r0, r5
 8020524:	ea4e 0e02 	orr.w	lr, lr, r2
 8020528:	fa20 f304 	lsr.w	r3, r0, r4
 802052c:	fa01 f205 	lsl.w	r2, r1, r5
 8020530:	ea43 0302 	orr.w	r3, r3, r2
 8020534:	fa21 f004 	lsr.w	r0, r1, r4
 8020538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802053c:	fa21 f204 	lsr.w	r2, r1, r4
 8020540:	ea20 0002 	bic.w	r0, r0, r2
 8020544:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802054c:	bf08      	it	eq
 802054e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020552:	bd70      	pop	{r4, r5, r6, pc}
 8020554:	f094 0f00 	teq	r4, #0
 8020558:	d10f      	bne.n	802057a <__aeabi_dmul+0x1c2>
 802055a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802055e:	0040      	lsls	r0, r0, #1
 8020560:	eb41 0101 	adc.w	r1, r1, r1
 8020564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020568:	bf08      	it	eq
 802056a:	3c01      	subeq	r4, #1
 802056c:	d0f7      	beq.n	802055e <__aeabi_dmul+0x1a6>
 802056e:	ea41 0106 	orr.w	r1, r1, r6
 8020572:	f095 0f00 	teq	r5, #0
 8020576:	bf18      	it	ne
 8020578:	4770      	bxne	lr
 802057a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802057e:	0052      	lsls	r2, r2, #1
 8020580:	eb43 0303 	adc.w	r3, r3, r3
 8020584:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020588:	bf08      	it	eq
 802058a:	3d01      	subeq	r5, #1
 802058c:	d0f7      	beq.n	802057e <__aeabi_dmul+0x1c6>
 802058e:	ea43 0306 	orr.w	r3, r3, r6
 8020592:	4770      	bx	lr
 8020594:	ea94 0f0c 	teq	r4, ip
 8020598:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802059c:	bf18      	it	ne
 802059e:	ea95 0f0c 	teqne	r5, ip
 80205a2:	d00c      	beq.n	80205be <__aeabi_dmul+0x206>
 80205a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205a8:	bf18      	it	ne
 80205aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205ae:	d1d1      	bne.n	8020554 <__aeabi_dmul+0x19c>
 80205b0:	ea81 0103 	eor.w	r1, r1, r3
 80205b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205b8:	f04f 0000 	mov.w	r0, #0
 80205bc:	bd70      	pop	{r4, r5, r6, pc}
 80205be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205c2:	bf06      	itte	eq
 80205c4:	4610      	moveq	r0, r2
 80205c6:	4619      	moveq	r1, r3
 80205c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205cc:	d019      	beq.n	8020602 <__aeabi_dmul+0x24a>
 80205ce:	ea94 0f0c 	teq	r4, ip
 80205d2:	d102      	bne.n	80205da <__aeabi_dmul+0x222>
 80205d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80205d8:	d113      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205da:	ea95 0f0c 	teq	r5, ip
 80205de:	d105      	bne.n	80205ec <__aeabi_dmul+0x234>
 80205e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80205e4:	bf1c      	itt	ne
 80205e6:	4610      	movne	r0, r2
 80205e8:	4619      	movne	r1, r3
 80205ea:	d10a      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205ec:	ea81 0103 	eor.w	r1, r1, r3
 80205f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80205f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80205fc:	f04f 0000 	mov.w	r0, #0
 8020600:	bd70      	pop	{r4, r5, r6, pc}
 8020602:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020606:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802060a:	bd70      	pop	{r4, r5, r6, pc}

0802060c <__aeabi_ddiv>:
 802060c:	b570      	push	{r4, r5, r6, lr}
 802060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802061a:	bf1d      	ittte	ne
 802061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020620:	ea94 0f0c 	teqne	r4, ip
 8020624:	ea95 0f0c 	teqne	r5, ip
 8020628:	f000 f8a7 	bleq	802077a <__aeabi_ddiv+0x16e>
 802062c:	eba4 0405 	sub.w	r4, r4, r5
 8020630:	ea81 0e03 	eor.w	lr, r1, r3
 8020634:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802063c:	f000 8088 	beq.w	8020750 <__aeabi_ddiv+0x144>
 8020640:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020644:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020648:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802064c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020650:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020654:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020658:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802065c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020660:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020664:	429d      	cmp	r5, r3
 8020666:	bf08      	it	eq
 8020668:	4296      	cmpeq	r6, r2
 802066a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802066e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020672:	d202      	bcs.n	802067a <__aeabi_ddiv+0x6e>
 8020674:	085b      	lsrs	r3, r3, #1
 8020676:	ea4f 0232 	mov.w	r2, r2, rrx
 802067a:	1ab6      	subs	r6, r6, r2
 802067c:	eb65 0503 	sbc.w	r5, r5, r3
 8020680:	085b      	lsrs	r3, r3, #1
 8020682:	ea4f 0232 	mov.w	r2, r2, rrx
 8020686:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802068a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802068e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020692:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020696:	bf22      	ittt	cs
 8020698:	1ab6      	subcs	r6, r6, r2
 802069a:	4675      	movcs	r5, lr
 802069c:	ea40 000c 	orrcs.w	r0, r0, ip
 80206a0:	085b      	lsrs	r3, r3, #1
 80206a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206ae:	bf22      	ittt	cs
 80206b0:	1ab6      	subcs	r6, r6, r2
 80206b2:	4675      	movcs	r5, lr
 80206b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80206b8:	085b      	lsrs	r3, r3, #1
 80206ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80206be:	ebb6 0e02 	subs.w	lr, r6, r2
 80206c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206c6:	bf22      	ittt	cs
 80206c8:	1ab6      	subcs	r6, r6, r2
 80206ca:	4675      	movcs	r5, lr
 80206cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80206d0:	085b      	lsrs	r3, r3, #1
 80206d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206de:	bf22      	ittt	cs
 80206e0:	1ab6      	subcs	r6, r6, r2
 80206e2:	4675      	movcs	r5, lr
 80206e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80206e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80206ec:	d018      	beq.n	8020720 <__aeabi_ddiv+0x114>
 80206ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80206f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80206f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80206fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80206fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020702:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020706:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802070a:	d1c0      	bne.n	802068e <__aeabi_ddiv+0x82>
 802070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020710:	d10b      	bne.n	802072a <__aeabi_ddiv+0x11e>
 8020712:	ea41 0100 	orr.w	r1, r1, r0
 8020716:	f04f 0000 	mov.w	r0, #0
 802071a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802071e:	e7b6      	b.n	802068e <__aeabi_ddiv+0x82>
 8020720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020724:	bf04      	itt	eq
 8020726:	4301      	orreq	r1, r0
 8020728:	2000      	moveq	r0, #0
 802072a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802072e:	bf88      	it	hi
 8020730:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020734:	f63f aeaf 	bhi.w	8020496 <__aeabi_dmul+0xde>
 8020738:	ebb5 0c03 	subs.w	ip, r5, r3
 802073c:	bf04      	itt	eq
 802073e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020742:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020746:	f150 0000 	adcs.w	r0, r0, #0
 802074a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802074e:	bd70      	pop	{r4, r5, r6, pc}
 8020750:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020754:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020758:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802075c:	bfc2      	ittt	gt
 802075e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020762:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020766:	bd70      	popgt	{r4, r5, r6, pc}
 8020768:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802076c:	f04f 0e00 	mov.w	lr, #0
 8020770:	3c01      	subs	r4, #1
 8020772:	e690      	b.n	8020496 <__aeabi_dmul+0xde>
 8020774:	ea45 0e06 	orr.w	lr, r5, r6
 8020778:	e68d      	b.n	8020496 <__aeabi_dmul+0xde>
 802077a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802077e:	ea94 0f0c 	teq	r4, ip
 8020782:	bf08      	it	eq
 8020784:	ea95 0f0c 	teqeq	r5, ip
 8020788:	f43f af3b 	beq.w	8020602 <__aeabi_dmul+0x24a>
 802078c:	ea94 0f0c 	teq	r4, ip
 8020790:	d10a      	bne.n	80207a8 <__aeabi_ddiv+0x19c>
 8020792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020796:	f47f af34 	bne.w	8020602 <__aeabi_dmul+0x24a>
 802079a:	ea95 0f0c 	teq	r5, ip
 802079e:	f47f af25 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207a2:	4610      	mov	r0, r2
 80207a4:	4619      	mov	r1, r3
 80207a6:	e72c      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207a8:	ea95 0f0c 	teq	r5, ip
 80207ac:	d106      	bne.n	80207bc <__aeabi_ddiv+0x1b0>
 80207ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80207b2:	f43f aefd 	beq.w	80205b0 <__aeabi_dmul+0x1f8>
 80207b6:	4610      	mov	r0, r2
 80207b8:	4619      	mov	r1, r3
 80207ba:	e722      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207c0:	bf18      	it	ne
 80207c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207c6:	f47f aec5 	bne.w	8020554 <__aeabi_dmul+0x19c>
 80207ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80207ce:	f47f af0d 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80207d6:	f47f aeeb 	bne.w	80205b0 <__aeabi_dmul+0x1f8>
 80207da:	e712      	b.n	8020602 <__aeabi_dmul+0x24a>

080207dc <__gedf2>:
 80207dc:	f04f 3cff 	mov.w	ip, #4294967295
 80207e0:	e006      	b.n	80207f0 <__cmpdf2+0x4>
 80207e2:	bf00      	nop

080207e4 <__ledf2>:
 80207e4:	f04f 0c01 	mov.w	ip, #1
 80207e8:	e002      	b.n	80207f0 <__cmpdf2+0x4>
 80207ea:	bf00      	nop

080207ec <__cmpdf2>:
 80207ec:	f04f 0c01 	mov.w	ip, #1
 80207f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80207f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80207f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80207fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020800:	bf18      	it	ne
 8020802:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020806:	d01b      	beq.n	8020840 <__cmpdf2+0x54>
 8020808:	b001      	add	sp, #4
 802080a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802080e:	bf0c      	ite	eq
 8020810:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020814:	ea91 0f03 	teqne	r1, r3
 8020818:	bf02      	ittt	eq
 802081a:	ea90 0f02 	teqeq	r0, r2
 802081e:	2000      	moveq	r0, #0
 8020820:	4770      	bxeq	lr
 8020822:	f110 0f00 	cmn.w	r0, #0
 8020826:	ea91 0f03 	teq	r1, r3
 802082a:	bf58      	it	pl
 802082c:	4299      	cmppl	r1, r3
 802082e:	bf08      	it	eq
 8020830:	4290      	cmpeq	r0, r2
 8020832:	bf2c      	ite	cs
 8020834:	17d8      	asrcs	r0, r3, #31
 8020836:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802083a:	f040 0001 	orr.w	r0, r0, #1
 802083e:	4770      	bx	lr
 8020840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020848:	d102      	bne.n	8020850 <__cmpdf2+0x64>
 802084a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802084e:	d107      	bne.n	8020860 <__cmpdf2+0x74>
 8020850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020858:	d1d6      	bne.n	8020808 <__cmpdf2+0x1c>
 802085a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802085e:	d0d3      	beq.n	8020808 <__cmpdf2+0x1c>
 8020860:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020864:	4770      	bx	lr
 8020866:	bf00      	nop

08020868 <__aeabi_cdrcmple>:
 8020868:	4684      	mov	ip, r0
 802086a:	4610      	mov	r0, r2
 802086c:	4662      	mov	r2, ip
 802086e:	468c      	mov	ip, r1
 8020870:	4619      	mov	r1, r3
 8020872:	4663      	mov	r3, ip
 8020874:	e000      	b.n	8020878 <__aeabi_cdcmpeq>
 8020876:	bf00      	nop

08020878 <__aeabi_cdcmpeq>:
 8020878:	b501      	push	{r0, lr}
 802087a:	f7ff ffb7 	bl	80207ec <__cmpdf2>
 802087e:	2800      	cmp	r0, #0
 8020880:	bf48      	it	mi
 8020882:	f110 0f00 	cmnmi.w	r0, #0
 8020886:	bd01      	pop	{r0, pc}

08020888 <__aeabi_dcmpeq>:
 8020888:	f84d ed08 	str.w	lr, [sp, #-8]!
 802088c:	f7ff fff4 	bl	8020878 <__aeabi_cdcmpeq>
 8020890:	bf0c      	ite	eq
 8020892:	2001      	moveq	r0, #1
 8020894:	2000      	movne	r0, #0
 8020896:	f85d fb08 	ldr.w	pc, [sp], #8
 802089a:	bf00      	nop

0802089c <__aeabi_dcmplt>:
 802089c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208a0:	f7ff ffea 	bl	8020878 <__aeabi_cdcmpeq>
 80208a4:	bf34      	ite	cc
 80208a6:	2001      	movcc	r0, #1
 80208a8:	2000      	movcs	r0, #0
 80208aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ae:	bf00      	nop

080208b0 <__aeabi_dcmple>:
 80208b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208b4:	f7ff ffe0 	bl	8020878 <__aeabi_cdcmpeq>
 80208b8:	bf94      	ite	ls
 80208ba:	2001      	movls	r0, #1
 80208bc:	2000      	movhi	r0, #0
 80208be:	f85d fb08 	ldr.w	pc, [sp], #8
 80208c2:	bf00      	nop

080208c4 <__aeabi_dcmpge>:
 80208c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208c8:	f7ff ffce 	bl	8020868 <__aeabi_cdrcmple>
 80208cc:	bf94      	ite	ls
 80208ce:	2001      	movls	r0, #1
 80208d0:	2000      	movhi	r0, #0
 80208d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80208d6:	bf00      	nop

080208d8 <__aeabi_dcmpgt>:
 80208d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208dc:	f7ff ffc4 	bl	8020868 <__aeabi_cdrcmple>
 80208e0:	bf34      	ite	cc
 80208e2:	2001      	movcc	r0, #1
 80208e4:	2000      	movcs	r0, #0
 80208e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ea:	bf00      	nop

080208ec <__aeabi_d2f>:
 80208ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80208f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80208f4:	bf24      	itt	cs
 80208f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80208fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80208fe:	d90d      	bls.n	802091c <__aeabi_d2f+0x30>
 8020900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 802090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020914:	bf08      	it	eq
 8020916:	f020 0001 	biceq.w	r0, r0, #1
 802091a:	4770      	bx	lr
 802091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020920:	d121      	bne.n	8020966 <__aeabi_d2f+0x7a>
 8020922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020926:	bfbc      	itt	lt
 8020928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 802092c:	4770      	bxlt	lr
 802092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020936:	f1c2 0218 	rsb	r2, r2, #24
 802093a:	f1c2 0c20 	rsb	ip, r2, #32
 802093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8020942:	fa20 f002 	lsr.w	r0, r0, r2
 8020946:	bf18      	it	ne
 8020948:	f040 0001 	orrne.w	r0, r0, #1
 802094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020958:	ea40 000c 	orr.w	r0, r0, ip
 802095c:	fa23 f302 	lsr.w	r3, r3, r2
 8020960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020964:	e7cc      	b.n	8020900 <__aeabi_d2f+0x14>
 8020966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 802096a:	d107      	bne.n	802097c <__aeabi_d2f+0x90>
 802096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020970:	bf1e      	ittt	ne
 8020972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 802097a:	4770      	bxne	lr
 802097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020988:	4770      	bx	lr
 802098a:	bf00      	nop

0802098c <__aeabi_uldivmod>:
 802098c:	b953      	cbnz	r3, 80209a4 <__aeabi_uldivmod+0x18>
 802098e:	b94a      	cbnz	r2, 80209a4 <__aeabi_uldivmod+0x18>
 8020990:	2900      	cmp	r1, #0
 8020992:	bf08      	it	eq
 8020994:	2800      	cmpeq	r0, #0
 8020996:	bf1c      	itt	ne
 8020998:	f04f 31ff 	movne.w	r1, #4294967295
 802099c:	f04f 30ff 	movne.w	r0, #4294967295
 80209a0:	f000 b996 	b.w	8020cd0 <__aeabi_idiv0>
 80209a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80209a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80209ac:	f000 f82a 	bl	8020a04 <__udivmoddi4>
 80209b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80209b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80209b8:	b004      	add	sp, #16
 80209ba:	4770      	bx	lr

080209bc <__aeabi_f2ulz>:
 80209bc:	b5d0      	push	{r4, r6, r7, lr}
 80209be:	f7ff fca3 	bl	8020308 <__aeabi_f2d>
 80209c2:	2200      	movs	r2, #0
 80209c4:	4b0d      	ldr	r3, [pc, #52]	; (80209fc <__aeabi_f2ulz+0x40>)
 80209c6:	4606      	mov	r6, r0
 80209c8:	460f      	mov	r7, r1
 80209ca:	f7ff fcf5 	bl	80203b8 <__aeabi_dmul>
 80209ce:	f000 f981 	bl	8020cd4 <__aeabi_d2uiz>
 80209d2:	4604      	mov	r4, r0
 80209d4:	f7ff fc76 	bl	80202c4 <__aeabi_ui2d>
 80209d8:	2200      	movs	r2, #0
 80209da:	4b09      	ldr	r3, [pc, #36]	; (8020a00 <__aeabi_f2ulz+0x44>)
 80209dc:	f7ff fcec 	bl	80203b8 <__aeabi_dmul>
 80209e0:	4602      	mov	r2, r0
 80209e2:	460b      	mov	r3, r1
 80209e4:	4630      	mov	r0, r6
 80209e6:	4639      	mov	r1, r7
 80209e8:	f7ff fb2e 	bl	8020048 <__aeabi_dsub>
 80209ec:	f000 f972 	bl	8020cd4 <__aeabi_d2uiz>
 80209f0:	2200      	movs	r2, #0
 80209f2:	4623      	mov	r3, r4
 80209f4:	4310      	orrs	r0, r2
 80209f6:	4619      	mov	r1, r3
 80209f8:	bdd0      	pop	{r4, r6, r7, pc}
 80209fa:	bf00      	nop
 80209fc:	3df00000 	.word	0x3df00000
 8020a00:	41f00000 	.word	0x41f00000

08020a04 <__udivmoddi4>:
 8020a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a08:	9e08      	ldr	r6, [sp, #32]
 8020a0a:	4604      	mov	r4, r0
 8020a0c:	4688      	mov	r8, r1
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d14b      	bne.n	8020aaa <__udivmoddi4+0xa6>
 8020a12:	428a      	cmp	r2, r1
 8020a14:	4615      	mov	r5, r2
 8020a16:	d967      	bls.n	8020ae8 <__udivmoddi4+0xe4>
 8020a18:	fab2 f282 	clz	r2, r2
 8020a1c:	b14a      	cbz	r2, 8020a32 <__udivmoddi4+0x2e>
 8020a1e:	f1c2 0720 	rsb	r7, r2, #32
 8020a22:	fa01 f302 	lsl.w	r3, r1, r2
 8020a26:	fa20 f707 	lsr.w	r7, r0, r7
 8020a2a:	4095      	lsls	r5, r2
 8020a2c:	ea47 0803 	orr.w	r8, r7, r3
 8020a30:	4094      	lsls	r4, r2
 8020a32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020a36:	0c23      	lsrs	r3, r4, #16
 8020a38:	fbb8 f7fe 	udiv	r7, r8, lr
 8020a3c:	fa1f fc85 	uxth.w	ip, r5
 8020a40:	fb0e 8817 	mls	r8, lr, r7, r8
 8020a44:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020a48:	fb07 f10c 	mul.w	r1, r7, ip
 8020a4c:	4299      	cmp	r1, r3
 8020a4e:	d909      	bls.n	8020a64 <__udivmoddi4+0x60>
 8020a50:	18eb      	adds	r3, r5, r3
 8020a52:	f107 30ff 	add.w	r0, r7, #4294967295
 8020a56:	f080 811b 	bcs.w	8020c90 <__udivmoddi4+0x28c>
 8020a5a:	4299      	cmp	r1, r3
 8020a5c:	f240 8118 	bls.w	8020c90 <__udivmoddi4+0x28c>
 8020a60:	3f02      	subs	r7, #2
 8020a62:	442b      	add	r3, r5
 8020a64:	1a5b      	subs	r3, r3, r1
 8020a66:	b2a4      	uxth	r4, r4
 8020a68:	fbb3 f0fe 	udiv	r0, r3, lr
 8020a6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8020a70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020a74:	fb00 fc0c 	mul.w	ip, r0, ip
 8020a78:	45a4      	cmp	ip, r4
 8020a7a:	d909      	bls.n	8020a90 <__udivmoddi4+0x8c>
 8020a7c:	192c      	adds	r4, r5, r4
 8020a7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8020a82:	f080 8107 	bcs.w	8020c94 <__udivmoddi4+0x290>
 8020a86:	45a4      	cmp	ip, r4
 8020a88:	f240 8104 	bls.w	8020c94 <__udivmoddi4+0x290>
 8020a8c:	3802      	subs	r0, #2
 8020a8e:	442c      	add	r4, r5
 8020a90:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020a94:	eba4 040c 	sub.w	r4, r4, ip
 8020a98:	2700      	movs	r7, #0
 8020a9a:	b11e      	cbz	r6, 8020aa4 <__udivmoddi4+0xa0>
 8020a9c:	40d4      	lsrs	r4, r2
 8020a9e:	2300      	movs	r3, #0
 8020aa0:	e9c6 4300 	strd	r4, r3, [r6]
 8020aa4:	4639      	mov	r1, r7
 8020aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020aaa:	428b      	cmp	r3, r1
 8020aac:	d909      	bls.n	8020ac2 <__udivmoddi4+0xbe>
 8020aae:	2e00      	cmp	r6, #0
 8020ab0:	f000 80eb 	beq.w	8020c8a <__udivmoddi4+0x286>
 8020ab4:	2700      	movs	r7, #0
 8020ab6:	e9c6 0100 	strd	r0, r1, [r6]
 8020aba:	4638      	mov	r0, r7
 8020abc:	4639      	mov	r1, r7
 8020abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ac2:	fab3 f783 	clz	r7, r3
 8020ac6:	2f00      	cmp	r7, #0
 8020ac8:	d147      	bne.n	8020b5a <__udivmoddi4+0x156>
 8020aca:	428b      	cmp	r3, r1
 8020acc:	d302      	bcc.n	8020ad4 <__udivmoddi4+0xd0>
 8020ace:	4282      	cmp	r2, r0
 8020ad0:	f200 80fa 	bhi.w	8020cc8 <__udivmoddi4+0x2c4>
 8020ad4:	1a84      	subs	r4, r0, r2
 8020ad6:	eb61 0303 	sbc.w	r3, r1, r3
 8020ada:	2001      	movs	r0, #1
 8020adc:	4698      	mov	r8, r3
 8020ade:	2e00      	cmp	r6, #0
 8020ae0:	d0e0      	beq.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae2:	e9c6 4800 	strd	r4, r8, [r6]
 8020ae6:	e7dd      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae8:	b902      	cbnz	r2, 8020aec <__udivmoddi4+0xe8>
 8020aea:	deff      	udf	#255	; 0xff
 8020aec:	fab2 f282 	clz	r2, r2
 8020af0:	2a00      	cmp	r2, #0
 8020af2:	f040 808f 	bne.w	8020c14 <__udivmoddi4+0x210>
 8020af6:	1b49      	subs	r1, r1, r5
 8020af8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020afc:	fa1f f885 	uxth.w	r8, r5
 8020b00:	2701      	movs	r7, #1
 8020b02:	fbb1 fcfe 	udiv	ip, r1, lr
 8020b06:	0c23      	lsrs	r3, r4, #16
 8020b08:	fb0e 111c 	mls	r1, lr, ip, r1
 8020b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020b10:	fb08 f10c 	mul.w	r1, r8, ip
 8020b14:	4299      	cmp	r1, r3
 8020b16:	d907      	bls.n	8020b28 <__udivmoddi4+0x124>
 8020b18:	18eb      	adds	r3, r5, r3
 8020b1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020b1e:	d202      	bcs.n	8020b26 <__udivmoddi4+0x122>
 8020b20:	4299      	cmp	r1, r3
 8020b22:	f200 80cd 	bhi.w	8020cc0 <__udivmoddi4+0x2bc>
 8020b26:	4684      	mov	ip, r0
 8020b28:	1a59      	subs	r1, r3, r1
 8020b2a:	b2a3      	uxth	r3, r4
 8020b2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8020b30:	fb0e 1410 	mls	r4, lr, r0, r1
 8020b34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020b38:	fb08 f800 	mul.w	r8, r8, r0
 8020b3c:	45a0      	cmp	r8, r4
 8020b3e:	d907      	bls.n	8020b50 <__udivmoddi4+0x14c>
 8020b40:	192c      	adds	r4, r5, r4
 8020b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b46:	d202      	bcs.n	8020b4e <__udivmoddi4+0x14a>
 8020b48:	45a0      	cmp	r8, r4
 8020b4a:	f200 80b6 	bhi.w	8020cba <__udivmoddi4+0x2b6>
 8020b4e:	4618      	mov	r0, r3
 8020b50:	eba4 0408 	sub.w	r4, r4, r8
 8020b54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020b58:	e79f      	b.n	8020a9a <__udivmoddi4+0x96>
 8020b5a:	f1c7 0c20 	rsb	ip, r7, #32
 8020b5e:	40bb      	lsls	r3, r7
 8020b60:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020b64:	ea4e 0e03 	orr.w	lr, lr, r3
 8020b68:	fa01 f407 	lsl.w	r4, r1, r7
 8020b6c:	fa20 f50c 	lsr.w	r5, r0, ip
 8020b70:	fa21 f30c 	lsr.w	r3, r1, ip
 8020b74:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020b78:	4325      	orrs	r5, r4
 8020b7a:	fbb3 f9f8 	udiv	r9, r3, r8
 8020b7e:	0c2c      	lsrs	r4, r5, #16
 8020b80:	fb08 3319 	mls	r3, r8, r9, r3
 8020b84:	fa1f fa8e 	uxth.w	sl, lr
 8020b88:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020b8c:	fb09 f40a 	mul.w	r4, r9, sl
 8020b90:	429c      	cmp	r4, r3
 8020b92:	fa02 f207 	lsl.w	r2, r2, r7
 8020b96:	fa00 f107 	lsl.w	r1, r0, r7
 8020b9a:	d90b      	bls.n	8020bb4 <__udivmoddi4+0x1b0>
 8020b9c:	eb1e 0303 	adds.w	r3, lr, r3
 8020ba0:	f109 30ff 	add.w	r0, r9, #4294967295
 8020ba4:	f080 8087 	bcs.w	8020cb6 <__udivmoddi4+0x2b2>
 8020ba8:	429c      	cmp	r4, r3
 8020baa:	f240 8084 	bls.w	8020cb6 <__udivmoddi4+0x2b2>
 8020bae:	f1a9 0902 	sub.w	r9, r9, #2
 8020bb2:	4473      	add	r3, lr
 8020bb4:	1b1b      	subs	r3, r3, r4
 8020bb6:	b2ad      	uxth	r5, r5
 8020bb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8020bbc:	fb08 3310 	mls	r3, r8, r0, r3
 8020bc0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020bc4:	fb00 fa0a 	mul.w	sl, r0, sl
 8020bc8:	45a2      	cmp	sl, r4
 8020bca:	d908      	bls.n	8020bde <__udivmoddi4+0x1da>
 8020bcc:	eb1e 0404 	adds.w	r4, lr, r4
 8020bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8020bd4:	d26b      	bcs.n	8020cae <__udivmoddi4+0x2aa>
 8020bd6:	45a2      	cmp	sl, r4
 8020bd8:	d969      	bls.n	8020cae <__udivmoddi4+0x2aa>
 8020bda:	3802      	subs	r0, #2
 8020bdc:	4474      	add	r4, lr
 8020bde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020be2:	fba0 8902 	umull	r8, r9, r0, r2
 8020be6:	eba4 040a 	sub.w	r4, r4, sl
 8020bea:	454c      	cmp	r4, r9
 8020bec:	46c2      	mov	sl, r8
 8020bee:	464b      	mov	r3, r9
 8020bf0:	d354      	bcc.n	8020c9c <__udivmoddi4+0x298>
 8020bf2:	d051      	beq.n	8020c98 <__udivmoddi4+0x294>
 8020bf4:	2e00      	cmp	r6, #0
 8020bf6:	d069      	beq.n	8020ccc <__udivmoddi4+0x2c8>
 8020bf8:	ebb1 050a 	subs.w	r5, r1, sl
 8020bfc:	eb64 0403 	sbc.w	r4, r4, r3
 8020c00:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020c04:	40fd      	lsrs	r5, r7
 8020c06:	40fc      	lsrs	r4, r7
 8020c08:	ea4c 0505 	orr.w	r5, ip, r5
 8020c0c:	e9c6 5400 	strd	r5, r4, [r6]
 8020c10:	2700      	movs	r7, #0
 8020c12:	e747      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c14:	f1c2 0320 	rsb	r3, r2, #32
 8020c18:	fa20 f703 	lsr.w	r7, r0, r3
 8020c1c:	4095      	lsls	r5, r2
 8020c1e:	fa01 f002 	lsl.w	r0, r1, r2
 8020c22:	fa21 f303 	lsr.w	r3, r1, r3
 8020c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020c2a:	4338      	orrs	r0, r7
 8020c2c:	0c01      	lsrs	r1, r0, #16
 8020c2e:	fbb3 f7fe 	udiv	r7, r3, lr
 8020c32:	fa1f f885 	uxth.w	r8, r5
 8020c36:	fb0e 3317 	mls	r3, lr, r7, r3
 8020c3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c3e:	fb07 f308 	mul.w	r3, r7, r8
 8020c42:	428b      	cmp	r3, r1
 8020c44:	fa04 f402 	lsl.w	r4, r4, r2
 8020c48:	d907      	bls.n	8020c5a <__udivmoddi4+0x256>
 8020c4a:	1869      	adds	r1, r5, r1
 8020c4c:	f107 3cff 	add.w	ip, r7, #4294967295
 8020c50:	d22f      	bcs.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c52:	428b      	cmp	r3, r1
 8020c54:	d92d      	bls.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c56:	3f02      	subs	r7, #2
 8020c58:	4429      	add	r1, r5
 8020c5a:	1acb      	subs	r3, r1, r3
 8020c5c:	b281      	uxth	r1, r0
 8020c5e:	fbb3 f0fe 	udiv	r0, r3, lr
 8020c62:	fb0e 3310 	mls	r3, lr, r0, r3
 8020c66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c6a:	fb00 f308 	mul.w	r3, r0, r8
 8020c6e:	428b      	cmp	r3, r1
 8020c70:	d907      	bls.n	8020c82 <__udivmoddi4+0x27e>
 8020c72:	1869      	adds	r1, r5, r1
 8020c74:	f100 3cff 	add.w	ip, r0, #4294967295
 8020c78:	d217      	bcs.n	8020caa <__udivmoddi4+0x2a6>
 8020c7a:	428b      	cmp	r3, r1
 8020c7c:	d915      	bls.n	8020caa <__udivmoddi4+0x2a6>
 8020c7e:	3802      	subs	r0, #2
 8020c80:	4429      	add	r1, r5
 8020c82:	1ac9      	subs	r1, r1, r3
 8020c84:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020c88:	e73b      	b.n	8020b02 <__udivmoddi4+0xfe>
 8020c8a:	4637      	mov	r7, r6
 8020c8c:	4630      	mov	r0, r6
 8020c8e:	e709      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c90:	4607      	mov	r7, r0
 8020c92:	e6e7      	b.n	8020a64 <__udivmoddi4+0x60>
 8020c94:	4618      	mov	r0, r3
 8020c96:	e6fb      	b.n	8020a90 <__udivmoddi4+0x8c>
 8020c98:	4541      	cmp	r1, r8
 8020c9a:	d2ab      	bcs.n	8020bf4 <__udivmoddi4+0x1f0>
 8020c9c:	ebb8 0a02 	subs.w	sl, r8, r2
 8020ca0:	eb69 020e 	sbc.w	r2, r9, lr
 8020ca4:	3801      	subs	r0, #1
 8020ca6:	4613      	mov	r3, r2
 8020ca8:	e7a4      	b.n	8020bf4 <__udivmoddi4+0x1f0>
 8020caa:	4660      	mov	r0, ip
 8020cac:	e7e9      	b.n	8020c82 <__udivmoddi4+0x27e>
 8020cae:	4618      	mov	r0, r3
 8020cb0:	e795      	b.n	8020bde <__udivmoddi4+0x1da>
 8020cb2:	4667      	mov	r7, ip
 8020cb4:	e7d1      	b.n	8020c5a <__udivmoddi4+0x256>
 8020cb6:	4681      	mov	r9, r0
 8020cb8:	e77c      	b.n	8020bb4 <__udivmoddi4+0x1b0>
 8020cba:	3802      	subs	r0, #2
 8020cbc:	442c      	add	r4, r5
 8020cbe:	e747      	b.n	8020b50 <__udivmoddi4+0x14c>
 8020cc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8020cc4:	442b      	add	r3, r5
 8020cc6:	e72f      	b.n	8020b28 <__udivmoddi4+0x124>
 8020cc8:	4638      	mov	r0, r7
 8020cca:	e708      	b.n	8020ade <__udivmoddi4+0xda>
 8020ccc:	4637      	mov	r7, r6
 8020cce:	e6e9      	b.n	8020aa4 <__udivmoddi4+0xa0>

08020cd0 <__aeabi_idiv0>:
 8020cd0:	4770      	bx	lr
 8020cd2:	bf00      	nop

08020cd4 <__aeabi_d2uiz>:
 8020cd4:	004a      	lsls	r2, r1, #1
 8020cd6:	d211      	bcs.n	8020cfc <__aeabi_d2uiz+0x28>
 8020cd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020cdc:	d211      	bcs.n	8020d02 <__aeabi_d2uiz+0x2e>
 8020cde:	d50d      	bpl.n	8020cfc <__aeabi_d2uiz+0x28>
 8020ce0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020ce4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020ce8:	d40e      	bmi.n	8020d08 <__aeabi_d2uiz+0x34>
 8020cea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020cf2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020cf6:	fa23 f002 	lsr.w	r0, r3, r2
 8020cfa:	4770      	bx	lr
 8020cfc:	f04f 0000 	mov.w	r0, #0
 8020d00:	4770      	bx	lr
 8020d02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020d06:	d102      	bne.n	8020d0e <__aeabi_d2uiz+0x3a>
 8020d08:	f04f 30ff 	mov.w	r0, #4294967295
 8020d0c:	4770      	bx	lr
 8020d0e:	f04f 0000 	mov.w	r0, #0
 8020d12:	4770      	bx	lr

08020d14 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"

Encoder::Encoder() : distance_(0), distance_stack_(0), distance_difference_(0) {}
 8020d14:	b480      	push	{r7}
 8020d16:	b083      	sub	sp, #12
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	6078      	str	r0, [r7, #4]
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	f04f 0200 	mov.w	r2, #0
 8020d22:	601a      	str	r2, [r3, #0]
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	f04f 0200 	mov.w	r2, #0
 8020d2a:	605a      	str	r2, [r3, #4]
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	f04f 0200 	mov.w	r2, #0
 8020d32:	609a      	str	r2, [r3, #8]
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	4618      	mov	r0, r3
 8020d38:	370c      	adds	r7, #12
 8020d3a:	46bd      	mov	sp, r7
 8020d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d40:	4770      	bx	lr
	...

08020d44 <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020d44:	b580      	push	{r7, lr}
 8020d46:	b082      	sub	sp, #8
 8020d48:	af00      	add	r7, sp, #0
 8020d4a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8020d4c:	213c      	movs	r1, #60	; 0x3c
 8020d4e:	4805      	ldr	r0, [pc, #20]	; (8020d64 <_ZN7Encoder4InitEv+0x20>)
 8020d50:	f008 faee 	bl	8029330 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8020d54:	213c      	movs	r1, #60	; 0x3c
 8020d56:	4804      	ldr	r0, [pc, #16]	; (8020d68 <_ZN7Encoder4InitEv+0x24>)
 8020d58:	f008 faea 	bl	8029330 <HAL_TIM_Encoder_Start>
}
 8020d5c:	bf00      	nop
 8020d5e:	3708      	adds	r7, #8
 8020d60:	46bd      	mov	sp, r7
 8020d62:	bd80      	pop	{r7, pc}
 8020d64:	200007b8 	.word	0x200007b8
 8020d68:	200007f8 	.word	0x200007f8
 8020d6c:	00000000 	.word	0x00000000

08020d70 <_ZN7Encoder6UpdateEv>:

void Encoder::Update()
{
 8020d70:	b590      	push	{r4, r7, lr}
 8020d72:	b087      	sub	sp, #28
 8020d74:	af00      	add	r7, sp, #0
 8020d76:	6078      	str	r0, [r7, #4]
	int16_t count_l = static_cast<int16_t>((TIM8 -> CNT) - START_COUNT);
 8020d78:	4b39      	ldr	r3, [pc, #228]	; (8020e60 <_ZN7Encoder6UpdateEv+0xf0>)
 8020d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d7c:	b29b      	uxth	r3, r3
 8020d7e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8020d82:	3b7f      	subs	r3, #127	; 0x7f
 8020d84:	b29b      	uxth	r3, r3
 8020d86:	82fb      	strh	r3, [r7, #22]
	int16_t count_r = static_cast<int16_t>(START_COUNT - (TIM4 -> CNT));
 8020d88:	4b36      	ldr	r3, [pc, #216]	; (8020e64 <_ZN7Encoder6UpdateEv+0xf4>)
 8020d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d8c:	b29b      	uxth	r3, r3
 8020d8e:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8020d92:	337f      	adds	r3, #127	; 0x7f
 8020d94:	b29b      	uxth	r3, r3
 8020d96:	82bb      	strh	r3, [r7, #20]
	TIM8 -> CNT = START_COUNT;
 8020d98:	4b31      	ldr	r3, [pc, #196]	; (8020e60 <_ZN7Encoder6UpdateEv+0xf0>)
 8020d9a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020d9e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = START_COUNT;
 8020da0:	4b30      	ldr	r3, [pc, #192]	; (8020e64 <_ZN7Encoder6UpdateEv+0xf4>)
 8020da2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020da6:	625a      	str	r2, [r3, #36]	; 0x24
	float distance_l = static_cast<float>(count_l * DISTANCE_PER_COUNT);
 8020da8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020dac:	4618      	mov	r0, r3
 8020dae:	f7ff fa99 	bl	80202e4 <__aeabi_i2d>
 8020db2:	a329      	add	r3, pc, #164	; (adr r3, 8020e58 <_ZN7Encoder6UpdateEv+0xe8>)
 8020db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020db8:	f7ff fafe 	bl	80203b8 <__aeabi_dmul>
 8020dbc:	4603      	mov	r3, r0
 8020dbe:	460c      	mov	r4, r1
 8020dc0:	4618      	mov	r0, r3
 8020dc2:	4621      	mov	r1, r4
 8020dc4:	f7ff fd92 	bl	80208ec <__aeabi_d2f>
 8020dc8:	4603      	mov	r3, r0
 8020dca:	613b      	str	r3, [r7, #16]
	float distance_r = static_cast<float>(count_r * DISTANCE_PER_COUNT);
 8020dcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020dd0:	4618      	mov	r0, r3
 8020dd2:	f7ff fa87 	bl	80202e4 <__aeabi_i2d>
 8020dd6:	a320      	add	r3, pc, #128	; (adr r3, 8020e58 <_ZN7Encoder6UpdateEv+0xe8>)
 8020dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ddc:	f7ff faec 	bl	80203b8 <__aeabi_dmul>
 8020de0:	4603      	mov	r3, r0
 8020de2:	460c      	mov	r4, r1
 8020de4:	4618      	mov	r0, r3
 8020de6:	4621      	mov	r1, r4
 8020de8:	f7ff fd80 	bl	80208ec <__aeabi_d2f>
 8020dec:	4603      	mov	r3, r0
 8020dee:	60fb      	str	r3, [r7, #12]
	float distance = (distance_l + distance_r) / 2.0;
 8020df0:	ed97 7a04 	vldr	s14, [r7, #16]
 8020df4:	edd7 7a03 	vldr	s15, [r7, #12]
 8020df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020dfc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8020e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020e04:	edc7 7a02 	vstr	s15, [r7, #8]

	distance_ = distance;
 8020e08:	687b      	ldr	r3, [r7, #4]
 8020e0a:	68ba      	ldr	r2, [r7, #8]
 8020e0c:	601a      	str	r2, [r3, #0]
	distance_stack_ += distance;
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	ed93 7a01 	vldr	s14, [r3, #4]
 8020e14:	edd7 7a02 	vldr	s15, [r7, #8]
 8020e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020e1c:	687b      	ldr	r3, [r7, #4]
 8020e1e:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_difference_ = distance_r - distance_l;
 8020e22:	ed97 7a03 	vldr	s14, [r7, #12]
 8020e26:	edd7 7a04 	vldr	s15, [r7, #16]
 8020e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020e2e:	687b      	ldr	r3, [r7, #4]
 8020e30:	edc3 7a02 	vstr	s15, [r3, #8]

#ifdef DEBUG_MODE
	g_enc_cnt_l = count_l;  g_enc_cnt_r = count_r;
 8020e34:	4a0c      	ldr	r2, [pc, #48]	; (8020e68 <_ZN7Encoder6UpdateEv+0xf8>)
 8020e36:	8afb      	ldrh	r3, [r7, #22]
 8020e38:	8013      	strh	r3, [r2, #0]
 8020e3a:	4a0c      	ldr	r2, [pc, #48]	; (8020e6c <_ZN7Encoder6UpdateEv+0xfc>)
 8020e3c:	8abb      	ldrh	r3, [r7, #20]
 8020e3e:	8013      	strh	r3, [r2, #0]
	g_distance_l = distance_l;  g_distance_r = distance_r;
 8020e40:	4a0b      	ldr	r2, [pc, #44]	; (8020e70 <_ZN7Encoder6UpdateEv+0x100>)
 8020e42:	693b      	ldr	r3, [r7, #16]
 8020e44:	6013      	str	r3, [r2, #0]
 8020e46:	4a0b      	ldr	r2, [pc, #44]	; (8020e74 <_ZN7Encoder6UpdateEv+0x104>)
 8020e48:	68fb      	ldr	r3, [r7, #12]
 8020e4a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8020e4c:	bf00      	nop
 8020e4e:	371c      	adds	r7, #28
 8020e50:	46bd      	mov	sp, r7
 8020e52:	bd90      	pop	{r4, r7, pc}
 8020e54:	f3af 8000 	nop.w
 8020e58:	5d35653d 	.word	0x5d35653d
 8020e5c:	3f7d744f 	.word	0x3f7d744f
 8020e60:	40010400 	.word	0x40010400
 8020e64:	40000800 	.word	0x40000800
 8020e68:	20000298 	.word	0x20000298
 8020e6c:	2000029a 	.word	0x2000029a
 8020e70:	2000029c 	.word	0x2000029c
 8020e74:	200002a0 	.word	0x200002a0

08020e78 <_ZN7Encoder18ResetDistanceStackEv>:
	TIM8 -> CNT = START_COUNT;
	TIM4 -> CNT = START_COUNT;
}

void Encoder::ResetDistanceStack()
{
 8020e78:	b480      	push	{r7}
 8020e7a:	b083      	sub	sp, #12
 8020e7c:	af00      	add	r7, sp, #0
 8020e7e:	6078      	str	r0, [r7, #4]
	distance_stack_ = 0.0;
 8020e80:	687b      	ldr	r3, [r7, #4]
 8020e82:	f04f 0200 	mov.w	r2, #0
 8020e86:	605a      	str	r2, [r3, #4]
}
 8020e88:	bf00      	nop
 8020e8a:	370c      	adds	r7, #12
 8020e8c:	46bd      	mov	sp, r7
 8020e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e92:	4770      	bx	lr

08020e94 <_ZN7Encoder11GetDistanceEv>:

float Encoder::GetDistance()
{
 8020e94:	b480      	push	{r7}
 8020e96:	b083      	sub	sp, #12
 8020e98:	af00      	add	r7, sp, #0
 8020e9a:	6078      	str	r0, [r7, #4]
	return distance_;
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	681b      	ldr	r3, [r3, #0]
 8020ea0:	ee07 3a90 	vmov	s15, r3
}
 8020ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8020ea8:	370c      	adds	r7, #12
 8020eaa:	46bd      	mov	sp, r7
 8020eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eb0:	4770      	bx	lr

08020eb2 <_ZN7Encoder16GetDistanceStackEv>:

float Encoder::GetDistanceStack()
{
 8020eb2:	b480      	push	{r7}
 8020eb4:	b083      	sub	sp, #12
 8020eb6:	af00      	add	r7, sp, #0
 8020eb8:	6078      	str	r0, [r7, #4]
	return distance_stack_;
 8020eba:	687b      	ldr	r3, [r7, #4]
 8020ebc:	685b      	ldr	r3, [r3, #4]
 8020ebe:	ee07 3a90 	vmov	s15, r3
}
 8020ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8020ec6:	370c      	adds	r7, #12
 8020ec8:	46bd      	mov	sp, r7
 8020eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ece:	4770      	bx	lr

08020ed0 <_ZN7Encoder15AngularVelocityEv>:

float Encoder::AngularVelocity()
{
 8020ed0:	b590      	push	{r4, r7, lr}
 8020ed2:	b083      	sub	sp, #12
 8020ed4:	af00      	add	r7, sp, #0
 8020ed6:	6078      	str	r0, [r7, #4]
	return distance_difference_ / (TIM6_PERIOD * MACHINE_TREAD);
 8020ed8:	687b      	ldr	r3, [r7, #4]
 8020eda:	689b      	ldr	r3, [r3, #8]
 8020edc:	4618      	mov	r0, r3
 8020ede:	f7ff fa13 	bl	8020308 <__aeabi_f2d>
 8020ee2:	a309      	add	r3, pc, #36	; (adr r3, 8020f08 <_ZN7Encoder15AngularVelocityEv+0x38>)
 8020ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ee8:	f7ff fb90 	bl	802060c <__aeabi_ddiv>
 8020eec:	4603      	mov	r3, r0
 8020eee:	460c      	mov	r4, r1
 8020ef0:	4618      	mov	r0, r3
 8020ef2:	4621      	mov	r1, r4
 8020ef4:	f7ff fcfa 	bl	80208ec <__aeabi_d2f>
 8020ef8:	4603      	mov	r3, r0
 8020efa:	ee07 3a90 	vmov	s15, r3
 8020efe:	eeb0 0a67 	vmov.f32	s0, s15
 8020f02:	370c      	adds	r7, #12
 8020f04:	46bd      	mov	sp, r7
 8020f06:	bd90      	pop	{r4, r7, pc}
 8020f08:	00000000 	.word	0x00000000
 8020f0c:	407f9000 	.word	0x407f9000

08020f10 <_ZN5Flash5ClearEv>:
#include "flash.hpp"
#include <string.h>

bool Flash::Clear()
{
 8020f10:	b580      	push	{r7, lr}
 8020f12:	b088      	sub	sp, #32
 8020f14:	af00      	add	r7, sp, #0
 8020f16:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8020f18:	f006 f9be 	bl	8027298 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase;

    erase.TypeErase    = FLASH_TYPEERASE_SECTORS; // Erasure range : Sectors
 8020f1c:	2300      	movs	r3, #0
 8020f1e:	60fb      	str	r3, [r7, #12]
    erase.Sector       = FLASH_SECTOR_1;          // Which sector : 1
 8020f20:	2301      	movs	r3, #1
 8020f22:	617b      	str	r3, [r7, #20]
    erase.NbSectors    = 4;                       // How many sector : 4 (1,2,3,4)
 8020f24:	2304      	movs	r3, #4
 8020f26:	61bb      	str	r3, [r7, #24]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;   // Voltage range : 2.7 ~ 3.6 [V]
 8020f28:	2302      	movs	r3, #2
 8020f2a:	61fb      	str	r3, [r7, #28]

    // Success => 0xFFFFFFFF is stored.
    // Fail => Sector number is stored.
    uint32_t failed_sector = 0;
 8020f2c:	2300      	movs	r3, #0
 8020f2e:	60bb      	str	r3, [r7, #8]

    if(HAL_FLASHEx_Erase(&erase, &failed_sector) != HAL_OK)
 8020f30:	f107 0208 	add.w	r2, r7, #8
 8020f34:	f107 030c 	add.w	r3, r7, #12
 8020f38:	4611      	mov	r1, r2
 8020f3a:	4618      	mov	r0, r3
 8020f3c:	f006 fb0c 	bl	8027558 <HAL_FLASHEx_Erase>
 8020f40:	4603      	mov	r3, r0
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	bf14      	ite	ne
 8020f46:	2301      	movne	r3, #1
 8020f48:	2300      	moveq	r3, #0
 8020f4a:	b2db      	uxtb	r3, r3
 8020f4c:	2b00      	cmp	r3, #0
 8020f4e:	d004      	beq.n	8020f5a <_ZN5Flash5ClearEv+0x4a>
    {
#ifdef DEBUG_MODE
        g_erase_failed_sector = failed_sector;
 8020f50:	68bb      	ldr	r3, [r7, #8]
 8020f52:	4a08      	ldr	r2, [pc, #32]	; (8020f74 <_ZN5Flash5ClearEv+0x64>)
 8020f54:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

        return false;
 8020f56:	2300      	movs	r3, #0
 8020f58:	e008      	b.n	8020f6c <_ZN5Flash5ClearEv+0x5c>
    }

    HAL_FLASH_Lock();
 8020f5a:	f006 f9bf 	bl	80272dc <HAL_FLASH_Lock>

    return failed_sector == 0xFFFFFFFF;
 8020f5e:	68bb      	ldr	r3, [r7, #8]
 8020f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f64:	bf0c      	ite	eq
 8020f66:	2301      	moveq	r3, #1
 8020f68:	2300      	movne	r3, #0
 8020f6a:	b2db      	uxtb	r3, r3
}
 8020f6c:	4618      	mov	r0, r3
 8020f6e:	3720      	adds	r7, #32
 8020f70:	46bd      	mov	sp, r7
 8020f72:	bd80      	pop	{r7, pc}
 8020f74:	200002d0 	.word	0x200002d0

08020f78 <_ZN5Flash10StoreUint8EmPhm>:

bool Flash::StoreUint8(uint32_t address, uint8_t *data, uint32_t number)
{
 8020f78:	b590      	push	{r4, r7, lr}
 8020f7a:	b087      	sub	sp, #28
 8020f7c:	af00      	add	r7, sp, #0
 8020f7e:	60f8      	str	r0, [r7, #12]
 8020f80:	60b9      	str	r1, [r7, #8]
 8020f82:	607a      	str	r2, [r7, #4]
 8020f84:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8020f86:	f006 f987 	bl	8027298 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8020f8a:	2300      	movs	r3, #0
 8020f8c:	613b      	str	r3, [r7, #16]
 8020f8e:	693a      	ldr	r2, [r7, #16]
 8020f90:	683b      	ldr	r3, [r7, #0]
 8020f92:	429a      	cmp	r2, r3
 8020f94:	d218      	bcs.n	8020fc8 <_ZN5Flash10StoreUint8EmPhm+0x50>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address++, *data++);
 8020f96:	68b9      	ldr	r1, [r7, #8]
 8020f98:	1c4b      	adds	r3, r1, #1
 8020f9a:	60bb      	str	r3, [r7, #8]
 8020f9c:	687b      	ldr	r3, [r7, #4]
 8020f9e:	1c5a      	adds	r2, r3, #1
 8020fa0:	607a      	str	r2, [r7, #4]
 8020fa2:	781b      	ldrb	r3, [r3, #0]
 8020fa4:	b2db      	uxtb	r3, r3
 8020fa6:	f04f 0400 	mov.w	r4, #0
 8020faa:	461a      	mov	r2, r3
 8020fac:	4623      	mov	r3, r4
 8020fae:	2000      	movs	r0, #0
 8020fb0:	f006 f91e 	bl	80271f0 <HAL_FLASH_Program>
 8020fb4:	4603      	mov	r3, r0
 8020fb6:	75fb      	strb	r3, [r7, #23]
        if(result != HAL_OK) break;
 8020fb8:	7dfb      	ldrb	r3, [r7, #23]
 8020fba:	2b00      	cmp	r3, #0
 8020fbc:	d103      	bne.n	8020fc6 <_ZN5Flash10StoreUint8EmPhm+0x4e>
    for(uint32_t i = 0; i < number; i++)
 8020fbe:	693b      	ldr	r3, [r7, #16]
 8020fc0:	3301      	adds	r3, #1
 8020fc2:	613b      	str	r3, [r7, #16]
 8020fc4:	e7e3      	b.n	8020f8e <_ZN5Flash10StoreUint8EmPhm+0x16>
        if(result != HAL_OK) break;
 8020fc6:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8020fc8:	f006 f988 	bl	80272dc <HAL_FLASH_Lock>

    return result == HAL_OK;
 8020fcc:	7dfb      	ldrb	r3, [r7, #23]
 8020fce:	2b00      	cmp	r3, #0
 8020fd0:	bf0c      	ite	eq
 8020fd2:	2301      	moveq	r3, #1
 8020fd4:	2300      	movne	r3, #0
 8020fd6:	b2db      	uxtb	r3, r3
}
 8020fd8:	4618      	mov	r0, r3
 8020fda:	371c      	adds	r7, #28
 8020fdc:	46bd      	mov	sp, r7
 8020fde:	bd90      	pop	{r4, r7, pc}

08020fe0 <_ZN5Flash11StoreUint16EmPtm>:

bool Flash::StoreUint16(uint32_t address, uint16_t *data, uint32_t number)
{
 8020fe0:	b590      	push	{r4, r7, lr}
 8020fe2:	b087      	sub	sp, #28
 8020fe4:	af00      	add	r7, sp, #0
 8020fe6:	60f8      	str	r0, [r7, #12]
 8020fe8:	60b9      	str	r1, [r7, #8]
 8020fea:	607a      	str	r2, [r7, #4]
 8020fec:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8020fee:	f006 f953 	bl	8027298 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8020ff2:	2300      	movs	r3, #0
 8020ff4:	613b      	str	r3, [r7, #16]
 8020ff6:	693a      	ldr	r2, [r7, #16]
 8020ff8:	683b      	ldr	r3, [r7, #0]
 8020ffa:	429a      	cmp	r2, r3
 8020ffc:	d219      	bcs.n	8021032 <_ZN5Flash11StoreUint16EmPtm+0x52>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++);
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	1c9a      	adds	r2, r3, #2
 8021002:	607a      	str	r2, [r7, #4]
 8021004:	881b      	ldrh	r3, [r3, #0]
 8021006:	b29b      	uxth	r3, r3
 8021008:	f04f 0400 	mov.w	r4, #0
 802100c:	461a      	mov	r2, r3
 802100e:	4623      	mov	r3, r4
 8021010:	68b9      	ldr	r1, [r7, #8]
 8021012:	2001      	movs	r0, #1
 8021014:	f006 f8ec 	bl	80271f0 <HAL_FLASH_Program>
 8021018:	4603      	mov	r3, r0
 802101a:	75fb      	strb	r3, [r7, #23]
        address += 2;
 802101c:	68bb      	ldr	r3, [r7, #8]
 802101e:	3302      	adds	r3, #2
 8021020:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 8021022:	7dfb      	ldrb	r3, [r7, #23]
 8021024:	2b00      	cmp	r3, #0
 8021026:	d103      	bne.n	8021030 <_ZN5Flash11StoreUint16EmPtm+0x50>
    for(uint32_t i = 0; i < number; i++)
 8021028:	693b      	ldr	r3, [r7, #16]
 802102a:	3301      	adds	r3, #1
 802102c:	613b      	str	r3, [r7, #16]
 802102e:	e7e2      	b.n	8020ff6 <_ZN5Flash11StoreUint16EmPtm+0x16>
        if(result != HAL_OK) break;
 8021030:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8021032:	f006 f953 	bl	80272dc <HAL_FLASH_Lock>

    return result == HAL_OK;
 8021036:	7dfb      	ldrb	r3, [r7, #23]
 8021038:	2b00      	cmp	r3, #0
 802103a:	bf0c      	ite	eq
 802103c:	2301      	moveq	r3, #1
 802103e:	2300      	movne	r3, #0
 8021040:	b2db      	uxtb	r3, r3
}
 8021042:	4618      	mov	r0, r3
 8021044:	371c      	adds	r7, #28
 8021046:	46bd      	mov	sp, r7
 8021048:	bd90      	pop	{r4, r7, pc}

0802104a <_ZN5Flash10StoreInt16EmPsm>:

bool Flash::StoreInt16(uint32_t address, int16_t *data, uint32_t number)
{
 802104a:	b590      	push	{r4, r7, lr}
 802104c:	b087      	sub	sp, #28
 802104e:	af00      	add	r7, sp, #0
 8021050:	60f8      	str	r0, [r7, #12]
 8021052:	60b9      	str	r1, [r7, #8]
 8021054:	607a      	str	r2, [r7, #4]
 8021056:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021058:	f006 f91e 	bl	8027298 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 802105c:	2300      	movs	r3, #0
 802105e:	613b      	str	r3, [r7, #16]
 8021060:	693a      	ldr	r2, [r7, #16]
 8021062:	683b      	ldr	r3, [r7, #0]
 8021064:	429a      	cmp	r2, r3
 8021066:	d21a      	bcs.n	802109e <_ZN5Flash10StoreInt16EmPsm+0x54>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++);
 8021068:	687b      	ldr	r3, [r7, #4]
 802106a:	1c9a      	adds	r2, r3, #2
 802106c:	607a      	str	r2, [r7, #4]
 802106e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021072:	b21b      	sxth	r3, r3
 8021074:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8021078:	461a      	mov	r2, r3
 802107a:	4623      	mov	r3, r4
 802107c:	68b9      	ldr	r1, [r7, #8]
 802107e:	2001      	movs	r0, #1
 8021080:	f006 f8b6 	bl	80271f0 <HAL_FLASH_Program>
 8021084:	4603      	mov	r3, r0
 8021086:	75fb      	strb	r3, [r7, #23]
        address += 2;
 8021088:	68bb      	ldr	r3, [r7, #8]
 802108a:	3302      	adds	r3, #2
 802108c:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 802108e:	7dfb      	ldrb	r3, [r7, #23]
 8021090:	2b00      	cmp	r3, #0
 8021092:	d103      	bne.n	802109c <_ZN5Flash10StoreInt16EmPsm+0x52>
    for(uint32_t i = 0; i < number; i++)
 8021094:	693b      	ldr	r3, [r7, #16]
 8021096:	3301      	adds	r3, #1
 8021098:	613b      	str	r3, [r7, #16]
 802109a:	e7e1      	b.n	8021060 <_ZN5Flash10StoreInt16EmPsm+0x16>
        if(result != HAL_OK) break;
 802109c:	bf00      	nop
    }

    HAL_FLASH_Lock();
 802109e:	f006 f91d 	bl	80272dc <HAL_FLASH_Lock>

    return result == HAL_OK;
 80210a2:	7dfb      	ldrb	r3, [r7, #23]
 80210a4:	2b00      	cmp	r3, #0
 80210a6:	bf0c      	ite	eq
 80210a8:	2301      	moveq	r3, #1
 80210aa:	2300      	movne	r3, #0
 80210ac:	b2db      	uxtb	r3, r3
}
 80210ae:	4618      	mov	r0, r3
 80210b0:	371c      	adds	r7, #28
 80210b2:	46bd      	mov	sp, r7
 80210b4:	bd90      	pop	{r4, r7, pc}

080210b6 <_ZN5Flash10StoreFloatEmPfm>:

bool Flash::StoreFloat(uint32_t address, float *data, uint32_t number)
{
 80210b6:	b590      	push	{r4, r7, lr}
 80210b8:	b087      	sub	sp, #28
 80210ba:	af00      	add	r7, sp, #0
 80210bc:	60f8      	str	r0, [r7, #12]
 80210be:	60b9      	str	r1, [r7, #8]
 80210c0:	607a      	str	r2, [r7, #4]
 80210c2:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 80210c4:	f006 f8e8 	bl	8027298 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 80210c8:	2300      	movs	r3, #0
 80210ca:	613b      	str	r3, [r7, #16]
 80210cc:	693a      	ldr	r2, [r7, #16]
 80210ce:	683b      	ldr	r3, [r7, #0]
 80210d0:	429a      	cmp	r2, r3
 80210d2:	d21b      	bcs.n	802110c <_ZN5Flash10StoreFloatEmPfm+0x56>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *data++);
 80210d4:	687b      	ldr	r3, [r7, #4]
 80210d6:	1d1a      	adds	r2, r3, #4
 80210d8:	607a      	str	r2, [r7, #4]
 80210da:	681b      	ldr	r3, [r3, #0]
 80210dc:	4618      	mov	r0, r3
 80210de:	f7ff fc6d 	bl	80209bc <__aeabi_f2ulz>
 80210e2:	4603      	mov	r3, r0
 80210e4:	460c      	mov	r4, r1
 80210e6:	461a      	mov	r2, r3
 80210e8:	4623      	mov	r3, r4
 80210ea:	68b9      	ldr	r1, [r7, #8]
 80210ec:	2002      	movs	r0, #2
 80210ee:	f006 f87f 	bl	80271f0 <HAL_FLASH_Program>
 80210f2:	4603      	mov	r3, r0
 80210f4:	75fb      	strb	r3, [r7, #23]
        address += 4;
 80210f6:	68bb      	ldr	r3, [r7, #8]
 80210f8:	3304      	adds	r3, #4
 80210fa:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 80210fc:	7dfb      	ldrb	r3, [r7, #23]
 80210fe:	2b00      	cmp	r3, #0
 8021100:	d103      	bne.n	802110a <_ZN5Flash10StoreFloatEmPfm+0x54>
    for(uint32_t i = 0; i < number; i++)
 8021102:	693b      	ldr	r3, [r7, #16]
 8021104:	3301      	adds	r3, #1
 8021106:	613b      	str	r3, [r7, #16]
 8021108:	e7e0      	b.n	80210cc <_ZN5Flash10StoreFloatEmPfm+0x16>
        if(result != HAL_OK) break;
 802110a:	bf00      	nop
    }

    HAL_FLASH_Lock();
 802110c:	f006 f8e6 	bl	80272dc <HAL_FLASH_Lock>

    return result == HAL_OK;
 8021110:	7dfb      	ldrb	r3, [r7, #23]
 8021112:	2b00      	cmp	r3, #0
 8021114:	bf0c      	ite	eq
 8021116:	2301      	moveq	r3, #1
 8021118:	2300      	movne	r3, #0
 802111a:	b2db      	uxtb	r3, r3
}
 802111c:	4618      	mov	r0, r3
 802111e:	371c      	adds	r7, #28
 8021120:	46bd      	mov	sp, r7
 8021122:	bd90      	pop	{r4, r7, pc}

08021124 <_ZN5Flash4LoadEPvmm>:

void Flash::Load(void *data, uint32_t address, uint32_t size)
{
 8021124:	b580      	push	{r7, lr}
 8021126:	b084      	sub	sp, #16
 8021128:	af00      	add	r7, sp, #0
 802112a:	60f8      	str	r0, [r7, #12]
 802112c:	60b9      	str	r1, [r7, #8]
 802112e:	607a      	str	r2, [r7, #4]
 8021130:	603b      	str	r3, [r7, #0]
    memcpy(data, reinterpret_cast<uint32_t*>(address), size);
 8021132:	687b      	ldr	r3, [r7, #4]
 8021134:	683a      	ldr	r2, [r7, #0]
 8021136:	4619      	mov	r1, r3
 8021138:	68b8      	ldr	r0, [r7, #8]
 802113a:	f009 f805 	bl	802a148 <memcpy>
}
 802113e:	bf00      	nop
 8021140:	3710      	adds	r7, #16
 8021142:	46bd      	mov	sp, r7
 8021144:	bd80      	pop	{r7, pc}

08021146 <_ZN5Flash14CheckBlankByteEmm>:

bool Flash::CheckBlankByte(uint32_t address, uint32_t number)
{
 8021146:	b5b0      	push	{r4, r5, r7, lr}
 8021148:	b088      	sub	sp, #32
 802114a:	af00      	add	r7, sp, #0
 802114c:	60f8      	str	r0, [r7, #12]
 802114e:	60b9      	str	r1, [r7, #8]
 8021150:	607a      	str	r2, [r7, #4]

    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);

    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;

    return true;
 8021152:	466b      	mov	r3, sp
 8021154:	461d      	mov	r5, r3
    uint8_t byte[number];
 8021156:	687b      	ldr	r3, [r7, #4]
 8021158:	1e58      	subs	r0, r3, #1
 802115a:	61b8      	str	r0, [r7, #24]
 802115c:	4603      	mov	r3, r0
 802115e:	3301      	adds	r3, #1
 8021160:	4619      	mov	r1, r3
 8021162:	f04f 0200 	mov.w	r2, #0
 8021166:	f04f 0300 	mov.w	r3, #0
 802116a:	f04f 0400 	mov.w	r4, #0
 802116e:	00d4      	lsls	r4, r2, #3
 8021170:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8021174:	00cb      	lsls	r3, r1, #3
 8021176:	4603      	mov	r3, r0
 8021178:	3301      	adds	r3, #1
 802117a:	4619      	mov	r1, r3
 802117c:	f04f 0200 	mov.w	r2, #0
 8021180:	f04f 0300 	mov.w	r3, #0
 8021184:	f04f 0400 	mov.w	r4, #0
 8021188:	00d4      	lsls	r4, r2, #3
 802118a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 802118e:	00cb      	lsls	r3, r1, #3
 8021190:	4603      	mov	r3, r0
 8021192:	3301      	adds	r3, #1
 8021194:	3307      	adds	r3, #7
 8021196:	08db      	lsrs	r3, r3, #3
 8021198:	00db      	lsls	r3, r3, #3
 802119a:	ebad 0d03 	sub.w	sp, sp, r3
 802119e:	466b      	mov	r3, sp
 80211a0:	3300      	adds	r3, #0
 80211a2:	617b      	str	r3, [r7, #20]
    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);
 80211a4:	697b      	ldr	r3, [r7, #20]
 80211a6:	68b9      	ldr	r1, [r7, #8]
 80211a8:	687a      	ldr	r2, [r7, #4]
 80211aa:	4618      	mov	r0, r3
 80211ac:	f008 ffcc 	bl	802a148 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;
 80211b0:	2300      	movs	r3, #0
 80211b2:	61fb      	str	r3, [r7, #28]
 80211b4:	69fa      	ldr	r2, [r7, #28]
 80211b6:	687b      	ldr	r3, [r7, #4]
 80211b8:	429a      	cmp	r2, r3
 80211ba:	d20b      	bcs.n	80211d4 <_ZN5Flash14CheckBlankByteEmm+0x8e>
 80211bc:	697a      	ldr	r2, [r7, #20]
 80211be:	69fb      	ldr	r3, [r7, #28]
 80211c0:	4413      	add	r3, r2
 80211c2:	781b      	ldrb	r3, [r3, #0]
 80211c4:	2bff      	cmp	r3, #255	; 0xff
 80211c6:	d001      	beq.n	80211cc <_ZN5Flash14CheckBlankByteEmm+0x86>
 80211c8:	2300      	movs	r3, #0
 80211ca:	e004      	b.n	80211d6 <_ZN5Flash14CheckBlankByteEmm+0x90>
 80211cc:	69fb      	ldr	r3, [r7, #28]
 80211ce:	3301      	adds	r3, #1
 80211d0:	61fb      	str	r3, [r7, #28]
 80211d2:	e7ef      	b.n	80211b4 <_ZN5Flash14CheckBlankByteEmm+0x6e>
    return true;
 80211d4:	2301      	movs	r3, #1
 80211d6:	46ad      	mov	sp, r5
}
 80211d8:	4618      	mov	r0, r3
 80211da:	3720      	adds	r7, #32
 80211dc:	46bd      	mov	sp, r7
 80211de:	bdb0      	pop	{r4, r5, r7, pc}

080211e0 <_ZN5Flash18CheckBlankHalfwordEmm>:

bool Flash::CheckBlankHalfword(uint32_t address, uint32_t number)
{
 80211e0:	b5b0      	push	{r4, r5, r7, lr}
 80211e2:	b088      	sub	sp, #32
 80211e4:	af00      	add	r7, sp, #0
 80211e6:	60f8      	str	r0, [r7, #12]
 80211e8:	60b9      	str	r1, [r7, #8]
 80211ea:	607a      	str	r2, [r7, #4]

    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);

    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;

    return true;
 80211ec:	466b      	mov	r3, sp
 80211ee:	461d      	mov	r5, r3
    uint16_t half[number];
 80211f0:	687b      	ldr	r3, [r7, #4]
 80211f2:	1e58      	subs	r0, r3, #1
 80211f4:	61b8      	str	r0, [r7, #24]
 80211f6:	4603      	mov	r3, r0
 80211f8:	3301      	adds	r3, #1
 80211fa:	4619      	mov	r1, r3
 80211fc:	f04f 0200 	mov.w	r2, #0
 8021200:	f04f 0300 	mov.w	r3, #0
 8021204:	f04f 0400 	mov.w	r4, #0
 8021208:	0114      	lsls	r4, r2, #4
 802120a:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 802120e:	010b      	lsls	r3, r1, #4
 8021210:	4603      	mov	r3, r0
 8021212:	3301      	adds	r3, #1
 8021214:	4619      	mov	r1, r3
 8021216:	f04f 0200 	mov.w	r2, #0
 802121a:	f04f 0300 	mov.w	r3, #0
 802121e:	f04f 0400 	mov.w	r4, #0
 8021222:	0114      	lsls	r4, r2, #4
 8021224:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021228:	010b      	lsls	r3, r1, #4
 802122a:	4603      	mov	r3, r0
 802122c:	3301      	adds	r3, #1
 802122e:	005b      	lsls	r3, r3, #1
 8021230:	3301      	adds	r3, #1
 8021232:	3307      	adds	r3, #7
 8021234:	08db      	lsrs	r3, r3, #3
 8021236:	00db      	lsls	r3, r3, #3
 8021238:	ebad 0d03 	sub.w	sp, sp, r3
 802123c:	466b      	mov	r3, sp
 802123e:	3301      	adds	r3, #1
 8021240:	085b      	lsrs	r3, r3, #1
 8021242:	005b      	lsls	r3, r3, #1
 8021244:	617b      	str	r3, [r7, #20]
    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);
 8021246:	6978      	ldr	r0, [r7, #20]
 8021248:	68b9      	ldr	r1, [r7, #8]
 802124a:	687b      	ldr	r3, [r7, #4]
 802124c:	005b      	lsls	r3, r3, #1
 802124e:	461a      	mov	r2, r3
 8021250:	f008 ff7a 	bl	802a148 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;
 8021254:	2300      	movs	r3, #0
 8021256:	61fb      	str	r3, [r7, #28]
 8021258:	69fa      	ldr	r2, [r7, #28]
 802125a:	687b      	ldr	r3, [r7, #4]
 802125c:	429a      	cmp	r2, r3
 802125e:	d20d      	bcs.n	802127c <_ZN5Flash18CheckBlankHalfwordEmm+0x9c>
 8021260:	697b      	ldr	r3, [r7, #20]
 8021262:	69fa      	ldr	r2, [r7, #28]
 8021264:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802126c:	4293      	cmp	r3, r2
 802126e:	d001      	beq.n	8021274 <_ZN5Flash18CheckBlankHalfwordEmm+0x94>
 8021270:	2300      	movs	r3, #0
 8021272:	e004      	b.n	802127e <_ZN5Flash18CheckBlankHalfwordEmm+0x9e>
 8021274:	69fb      	ldr	r3, [r7, #28]
 8021276:	3301      	adds	r3, #1
 8021278:	61fb      	str	r3, [r7, #28]
 802127a:	e7ed      	b.n	8021258 <_ZN5Flash18CheckBlankHalfwordEmm+0x78>
    return true;
 802127c:	2301      	movs	r3, #1
 802127e:	46ad      	mov	sp, r5
}
 8021280:	4618      	mov	r0, r3
 8021282:	3720      	adds	r7, #32
 8021284:	46bd      	mov	sp, r7
 8021286:	bdb0      	pop	{r4, r5, r7, pc}

08021288 <_ZN5Flash14CheckBlankWordEmm>:

bool Flash::CheckBlankWord(uint32_t address, uint32_t number)
{
 8021288:	b5b0      	push	{r4, r5, r7, lr}
 802128a:	b088      	sub	sp, #32
 802128c:	af00      	add	r7, sp, #0
 802128e:	60f8      	str	r0, [r7, #12]
 8021290:	60b9      	str	r1, [r7, #8]
 8021292:	607a      	str	r2, [r7, #4]

    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);

    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;

    return true;
 8021294:	466b      	mov	r3, sp
 8021296:	461d      	mov	r5, r3
    uint32_t word[number];
 8021298:	687b      	ldr	r3, [r7, #4]
 802129a:	1e58      	subs	r0, r3, #1
 802129c:	61b8      	str	r0, [r7, #24]
 802129e:	4603      	mov	r3, r0
 80212a0:	3301      	adds	r3, #1
 80212a2:	4619      	mov	r1, r3
 80212a4:	f04f 0200 	mov.w	r2, #0
 80212a8:	f04f 0300 	mov.w	r3, #0
 80212ac:	f04f 0400 	mov.w	r4, #0
 80212b0:	0154      	lsls	r4, r2, #5
 80212b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80212b6:	014b      	lsls	r3, r1, #5
 80212b8:	4603      	mov	r3, r0
 80212ba:	3301      	adds	r3, #1
 80212bc:	4619      	mov	r1, r3
 80212be:	f04f 0200 	mov.w	r2, #0
 80212c2:	f04f 0300 	mov.w	r3, #0
 80212c6:	f04f 0400 	mov.w	r4, #0
 80212ca:	0154      	lsls	r4, r2, #5
 80212cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80212d0:	014b      	lsls	r3, r1, #5
 80212d2:	4603      	mov	r3, r0
 80212d4:	3301      	adds	r3, #1
 80212d6:	009b      	lsls	r3, r3, #2
 80212d8:	3303      	adds	r3, #3
 80212da:	3307      	adds	r3, #7
 80212dc:	08db      	lsrs	r3, r3, #3
 80212de:	00db      	lsls	r3, r3, #3
 80212e0:	ebad 0d03 	sub.w	sp, sp, r3
 80212e4:	466b      	mov	r3, sp
 80212e6:	3303      	adds	r3, #3
 80212e8:	089b      	lsrs	r3, r3, #2
 80212ea:	009b      	lsls	r3, r3, #2
 80212ec:	617b      	str	r3, [r7, #20]
    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);
 80212ee:	6978      	ldr	r0, [r7, #20]
 80212f0:	68b9      	ldr	r1, [r7, #8]
 80212f2:	687b      	ldr	r3, [r7, #4]
 80212f4:	009b      	lsls	r3, r3, #2
 80212f6:	461a      	mov	r2, r3
 80212f8:	f008 ff26 	bl	802a148 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;
 80212fc:	2300      	movs	r3, #0
 80212fe:	61fb      	str	r3, [r7, #28]
 8021300:	69fa      	ldr	r2, [r7, #28]
 8021302:	687b      	ldr	r3, [r7, #4]
 8021304:	429a      	cmp	r2, r3
 8021306:	d20c      	bcs.n	8021322 <_ZN5Flash14CheckBlankWordEmm+0x9a>
 8021308:	697b      	ldr	r3, [r7, #20]
 802130a:	69fa      	ldr	r2, [r7, #28]
 802130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021314:	d001      	beq.n	802131a <_ZN5Flash14CheckBlankWordEmm+0x92>
 8021316:	2300      	movs	r3, #0
 8021318:	e004      	b.n	8021324 <_ZN5Flash14CheckBlankWordEmm+0x9c>
 802131a:	69fb      	ldr	r3, [r7, #28]
 802131c:	3301      	adds	r3, #1
 802131e:	61fb      	str	r3, [r7, #28]
 8021320:	e7ee      	b.n	8021300 <_ZN5Flash14CheckBlankWordEmm+0x78>
    return true;
 8021322:	2301      	movs	r3, #1
 8021324:	46ad      	mov	sp, r5
 8021326:	4618      	mov	r0, r3
 8021328:	3720      	adds	r7, #32
 802132a:	46bd      	mov	sp, r7
 802132c:	bdb0      	pop	{r4, r5, r7, pc}

0802132e <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"

Iim42652::Iim42652() {}
 802132e:	b480      	push	{r7}
 8021330:	b083      	sub	sp, #12
 8021332:	af00      	add	r7, sp, #0
 8021334:	6078      	str	r0, [r7, #4]
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	4618      	mov	r0, r3
 802133a:	370c      	adds	r7, #12
 802133c:	46bd      	mov	sp, r7
 802133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021342:	4770      	bx	lr

08021344 <_ZN8Iim426524InitEv>:

uint8_t Iim42652::Init()
{
 8021344:	b580      	push	{r7, lr}
 8021346:	b084      	sub	sp, #16
 8021348:	af00      	add	r7, sp, #0
 802134a:	6078      	str	r0, [r7, #4]
    uint8_t who_l  = Read(WHO_AM_I_ADD, 'L');
 802134c:	224c      	movs	r2, #76	; 0x4c
 802134e:	2175      	movs	r1, #117	; 0x75
 8021350:	6878      	ldr	r0, [r7, #4]
 8021352:	f000 f897 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021356:	4603      	mov	r3, r0
 8021358:	73fb      	strb	r3, [r7, #15]
    uint8_t who_r  = Read(WHO_AM_I_ADD, 'R');
 802135a:	2252      	movs	r2, #82	; 0x52
 802135c:	2175      	movs	r1, #117	; 0x75
 802135e:	6878      	ldr	r0, [r7, #4]
 8021360:	f000 f890 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021364:	4603      	mov	r3, r0
 8021366:	73bb      	strb	r3, [r7, #14]
    uint8_t bank_l = Read(REG_BANK_SEL_ADD, 'L');
 8021368:	224c      	movs	r2, #76	; 0x4c
 802136a:	2176      	movs	r1, #118	; 0x76
 802136c:	6878      	ldr	r0, [r7, #4]
 802136e:	f000 f889 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021372:	4603      	mov	r3, r0
 8021374:	737b      	strb	r3, [r7, #13]
    uint8_t bank_r = Read(REG_BANK_SEL_ADD, 'R');
 8021376:	2252      	movs	r2, #82	; 0x52
 8021378:	2176      	movs	r1, #118	; 0x76
 802137a:	6878      	ldr	r0, [r7, #4]
 802137c:	f000 f882 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021380:	4603      	mov	r3, r0
 8021382:	733b      	strb	r3, [r7, #12]
    uint8_t pwr_l  = Read(PWR_MGMT0_ADD, 'L');
 8021384:	224c      	movs	r2, #76	; 0x4c
 8021386:	214e      	movs	r1, #78	; 0x4e
 8021388:	6878      	ldr	r0, [r7, #4]
 802138a:	f000 f87b 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802138e:	4603      	mov	r3, r0
 8021390:	72fb      	strb	r3, [r7, #11]
    uint8_t pwr_r  = Read(PWR_MGMT0_ADD, 'R');
 8021392:	2252      	movs	r2, #82	; 0x52
 8021394:	214e      	movs	r1, #78	; 0x4e
 8021396:	6878      	ldr	r0, [r7, #4]
 8021398:	f000 f874 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802139c:	4603      	mov	r3, r0
 802139e:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_who_l  = who_l;  g_imu_who_r  = who_r;
 80213a0:	4a32      	ldr	r2, [pc, #200]	; (802146c <_ZN8Iim426524InitEv+0x128>)
 80213a2:	7bfb      	ldrb	r3, [r7, #15]
 80213a4:	7013      	strb	r3, [r2, #0]
 80213a6:	4a32      	ldr	r2, [pc, #200]	; (8021470 <_ZN8Iim426524InitEv+0x12c>)
 80213a8:	7bbb      	ldrb	r3, [r7, #14]
 80213aa:	7013      	strb	r3, [r2, #0]
    g_imu_bank_l = bank_l; g_imu_bank_r = bank_r;
 80213ac:	4a31      	ldr	r2, [pc, #196]	; (8021474 <_ZN8Iim426524InitEv+0x130>)
 80213ae:	7b7b      	ldrb	r3, [r7, #13]
 80213b0:	7013      	strb	r3, [r2, #0]
 80213b2:	4a31      	ldr	r2, [pc, #196]	; (8021478 <_ZN8Iim426524InitEv+0x134>)
 80213b4:	7b3b      	ldrb	r3, [r7, #12]
 80213b6:	7013      	strb	r3, [r2, #0]
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 80213b8:	4a30      	ldr	r2, [pc, #192]	; (802147c <_ZN8Iim426524InitEv+0x138>)
 80213ba:	7afb      	ldrb	r3, [r7, #11]
 80213bc:	7013      	strb	r3, [r2, #0]
 80213be:	4a30      	ldr	r2, [pc, #192]	; (8021480 <_ZN8Iim426524InitEv+0x13c>)
 80213c0:	7abb      	ldrb	r3, [r7, #10]
 80213c2:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(who_l != WHO_AM_I_RES)      return 0x01;
 80213c4:	7bfb      	ldrb	r3, [r7, #15]
 80213c6:	2b6f      	cmp	r3, #111	; 0x6f
 80213c8:	d001      	beq.n	80213ce <_ZN8Iim426524InitEv+0x8a>
 80213ca:	2301      	movs	r3, #1
 80213cc:	e049      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>
    if(who_r != WHO_AM_I_RES)      return 0x02;
 80213ce:	7bbb      	ldrb	r3, [r7, #14]
 80213d0:	2b6f      	cmp	r3, #111	; 0x6f
 80213d2:	d001      	beq.n	80213d8 <_ZN8Iim426524InitEv+0x94>
 80213d4:	2302      	movs	r3, #2
 80213d6:	e044      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>
    if(bank_l != REG_BANK_SEL_RES) return 0x03;
 80213d8:	7b7b      	ldrb	r3, [r7, #13]
 80213da:	2b00      	cmp	r3, #0
 80213dc:	d001      	beq.n	80213e2 <_ZN8Iim426524InitEv+0x9e>
 80213de:	2303      	movs	r3, #3
 80213e0:	e03f      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>
    if(bank_r != REG_BANK_SEL_RES) return 0x04;
 80213e2:	7b3b      	ldrb	r3, [r7, #12]
 80213e4:	2b00      	cmp	r3, #0
 80213e6:	d001      	beq.n	80213ec <_ZN8Iim426524InitEv+0xa8>
 80213e8:	2304      	movs	r3, #4
 80213ea:	e03a      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>
    if(pwr_l != PWR_MGMT0_RES)     return 0x05;
 80213ec:	7afb      	ldrb	r3, [r7, #11]
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	d001      	beq.n	80213f6 <_ZN8Iim426524InitEv+0xb2>
 80213f2:	2305      	movs	r3, #5
 80213f4:	e035      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>
    if(pwr_r != PWR_MGMT0_RES)     return 0x06;
 80213f6:	7abb      	ldrb	r3, [r7, #10]
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d001      	beq.n	8021400 <_ZN8Iim426524InitEv+0xbc>
 80213fc:	2306      	movs	r3, #6
 80213fe:	e030      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>

    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'L');
 8021400:	234c      	movs	r3, #76	; 0x4c
 8021402:	220f      	movs	r2, #15
 8021404:	214e      	movs	r1, #78	; 0x4e
 8021406:	6878      	ldr	r0, [r7, #4]
 8021408:	f000 f88a 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 802140c:	2064      	movs	r0, #100	; 0x64
 802140e:	f005 f941 	bl	8026694 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'R');
 8021412:	2352      	movs	r3, #82	; 0x52
 8021414:	220f      	movs	r2, #15
 8021416:	214e      	movs	r1, #78	; 0x4e
 8021418:	6878      	ldr	r0, [r7, #4]
 802141a:	f000 f881 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 802141e:	2064      	movs	r0, #100	; 0x64
 8021420:	f005 f938 	bl	8026694 <HAL_Delay>
    pwr_l = Read(PWR_MGMT0_ADD, 'L');
 8021424:	224c      	movs	r2, #76	; 0x4c
 8021426:	214e      	movs	r1, #78	; 0x4e
 8021428:	6878      	ldr	r0, [r7, #4]
 802142a:	f000 f82b 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802142e:	4603      	mov	r3, r0
 8021430:	72fb      	strb	r3, [r7, #11]
    pwr_r = Read(PWR_MGMT0_ADD, 'R');
 8021432:	2252      	movs	r2, #82	; 0x52
 8021434:	214e      	movs	r1, #78	; 0x4e
 8021436:	6878      	ldr	r0, [r7, #4]
 8021438:	f000 f824 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802143c:	4603      	mov	r3, r0
 802143e:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 8021440:	4a0e      	ldr	r2, [pc, #56]	; (802147c <_ZN8Iim426524InitEv+0x138>)
 8021442:	7afb      	ldrb	r3, [r7, #11]
 8021444:	7013      	strb	r3, [r2, #0]
 8021446:	4a0e      	ldr	r2, [pc, #56]	; (8021480 <_ZN8Iim426524InitEv+0x13c>)
 8021448:	7abb      	ldrb	r3, [r7, #10]
 802144a:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(pwr_l != PWR_MGMT0_ON) return 0x07;
 802144c:	7afb      	ldrb	r3, [r7, #11]
 802144e:	2b0f      	cmp	r3, #15
 8021450:	d001      	beq.n	8021456 <_ZN8Iim426524InitEv+0x112>
 8021452:	2307      	movs	r3, #7
 8021454:	e005      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>
    if(pwr_r != PWR_MGMT0_ON) return 0x08;
 8021456:	7abb      	ldrb	r3, [r7, #10]
 8021458:	2b0f      	cmp	r3, #15
 802145a:	d001      	beq.n	8021460 <_ZN8Iim426524InitEv+0x11c>
 802145c:	2308      	movs	r3, #8
 802145e:	e000      	b.n	8021462 <_ZN8Iim426524InitEv+0x11e>

    return 0x09;
 8021460:	2309      	movs	r3, #9
}
 8021462:	4618      	mov	r0, r3
 8021464:	3710      	adds	r7, #16
 8021466:	46bd      	mov	sp, r7
 8021468:	bd80      	pop	{r7, pc}
 802146a:	bf00      	nop
 802146c:	20000264 	.word	0x20000264
 8021470:	20000265 	.word	0x20000265
 8021474:	20000266 	.word	0x20000266
 8021478:	20000267 	.word	0x20000267
 802147c:	20000268 	.word	0x20000268
 8021480:	20000269 	.word	0x20000269

08021484 <_ZN8Iim426524ReadEhc>:

uint8_t Iim42652::Read(uint8_t send_address, char imu_ic_lr)
{
 8021484:	b580      	push	{r7, lr}
 8021486:	b084      	sub	sp, #16
 8021488:	af00      	add	r7, sp, #0
 802148a:	6078      	str	r0, [r7, #4]
 802148c:	460b      	mov	r3, r1
 802148e:	70fb      	strb	r3, [r7, #3]
 8021490:	4613      	mov	r3, r2
 8021492:	70bb      	strb	r3, [r7, #2]
    uint8_t receive_reset_value = 0x00;
 8021494:	2300      	movs	r3, #0
 8021496:	73fb      	strb	r3, [r7, #15]

    send_address = send_address | 0x80; // Read 1--- ----
 8021498:	78fb      	ldrb	r3, [r7, #3]
 802149a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802149e:	b2db      	uxtb	r3, r3
 80214a0:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 80214a2:	78bb      	ldrb	r3, [r7, #2]
 80214a4:	2b4c      	cmp	r3, #76	; 0x4c
 80214a6:	d106      	bne.n	80214b6 <_ZN8Iim426524ReadEhc+0x32>
 80214a8:	2200      	movs	r2, #0
 80214aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80214ae:	4819      	ldr	r0, [pc, #100]	; (8021514 <_ZN8Iim426524ReadEhc+0x90>)
 80214b0:	f006 fb26 	bl	8027b00 <HAL_GPIO_WritePin>
 80214b4:	e008      	b.n	80214c8 <_ZN8Iim426524ReadEhc+0x44>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 80214b6:	78bb      	ldrb	r3, [r7, #2]
 80214b8:	2b52      	cmp	r3, #82	; 0x52
 80214ba:	d105      	bne.n	80214c8 <_ZN8Iim426524ReadEhc+0x44>
 80214bc:	2200      	movs	r2, #0
 80214be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80214c2:	4815      	ldr	r0, [pc, #84]	; (8021518 <_ZN8Iim426524ReadEhc+0x94>)
 80214c4:	f006 fb1c 	bl	8027b00 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 80214c8:	1cf9      	adds	r1, r7, #3
 80214ca:	2364      	movs	r3, #100	; 0x64
 80214cc:	2201      	movs	r2, #1
 80214ce:	4813      	ldr	r0, [pc, #76]	; (802151c <_ZN8Iim426524ReadEhc+0x98>)
 80214d0:	f007 f8f4 	bl	80286bc <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &receive_reset_value, 1, 100);
 80214d4:	f107 010f 	add.w	r1, r7, #15
 80214d8:	2364      	movs	r3, #100	; 0x64
 80214da:	2201      	movs	r2, #1
 80214dc:	480f      	ldr	r0, [pc, #60]	; (802151c <_ZN8Iim426524ReadEhc+0x98>)
 80214de:	f007 fa21 	bl	8028924 <HAL_SPI_Receive>

    if(imu_ic_lr == 'L') CS_SET_L;
 80214e2:	78bb      	ldrb	r3, [r7, #2]
 80214e4:	2b4c      	cmp	r3, #76	; 0x4c
 80214e6:	d106      	bne.n	80214f6 <_ZN8Iim426524ReadEhc+0x72>
 80214e8:	2201      	movs	r2, #1
 80214ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80214ee:	4809      	ldr	r0, [pc, #36]	; (8021514 <_ZN8Iim426524ReadEhc+0x90>)
 80214f0:	f006 fb06 	bl	8027b00 <HAL_GPIO_WritePin>
 80214f4:	e008      	b.n	8021508 <_ZN8Iim426524ReadEhc+0x84>
    else if(imu_ic_lr == 'R') CS_SET_R;
 80214f6:	78bb      	ldrb	r3, [r7, #2]
 80214f8:	2b52      	cmp	r3, #82	; 0x52
 80214fa:	d105      	bne.n	8021508 <_ZN8Iim426524ReadEhc+0x84>
 80214fc:	2201      	movs	r2, #1
 80214fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021502:	4805      	ldr	r0, [pc, #20]	; (8021518 <_ZN8Iim426524ReadEhc+0x94>)
 8021504:	f006 fafc 	bl	8027b00 <HAL_GPIO_WritePin>
    
    return receive_reset_value;
 8021508:	7bfb      	ldrb	r3, [r7, #15]
}
 802150a:	4618      	mov	r0, r3
 802150c:	3710      	adds	r7, #16
 802150e:	46bd      	mov	sp, r7
 8021510:	bd80      	pop	{r7, pc}
 8021512:	bf00      	nop
 8021514:	40020400 	.word	0x40020400
 8021518:	40020000 	.word	0x40020000
 802151c:	2000090c 	.word	0x2000090c

08021520 <_ZN8Iim426525WriteEhhc>:

void Iim42652::Write(uint8_t send_address, uint8_t send_data, char imu_ic_lr)
{
 8021520:	b580      	push	{r7, lr}
 8021522:	b082      	sub	sp, #8
 8021524:	af00      	add	r7, sp, #0
 8021526:	6078      	str	r0, [r7, #4]
 8021528:	4608      	mov	r0, r1
 802152a:	4611      	mov	r1, r2
 802152c:	461a      	mov	r2, r3
 802152e:	4603      	mov	r3, r0
 8021530:	70fb      	strb	r3, [r7, #3]
 8021532:	460b      	mov	r3, r1
 8021534:	70bb      	strb	r3, [r7, #2]
 8021536:	4613      	mov	r3, r2
 8021538:	707b      	strb	r3, [r7, #1]
    send_address = send_address & 0x7F; // Write 0--- ----
 802153a:	78fb      	ldrb	r3, [r7, #3]
 802153c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021540:	b2db      	uxtb	r3, r3
 8021542:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 8021544:	787b      	ldrb	r3, [r7, #1]
 8021546:	2b4c      	cmp	r3, #76	; 0x4c
 8021548:	d106      	bne.n	8021558 <_ZN8Iim426525WriteEhhc+0x38>
 802154a:	2200      	movs	r2, #0
 802154c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8021550:	4817      	ldr	r0, [pc, #92]	; (80215b0 <_ZN8Iim426525WriteEhhc+0x90>)
 8021552:	f006 fad5 	bl	8027b00 <HAL_GPIO_WritePin>
 8021556:	e008      	b.n	802156a <_ZN8Iim426525WriteEhhc+0x4a>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 8021558:	787b      	ldrb	r3, [r7, #1]
 802155a:	2b52      	cmp	r3, #82	; 0x52
 802155c:	d105      	bne.n	802156a <_ZN8Iim426525WriteEhhc+0x4a>
 802155e:	2200      	movs	r2, #0
 8021560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021564:	4813      	ldr	r0, [pc, #76]	; (80215b4 <_ZN8Iim426525WriteEhhc+0x94>)
 8021566:	f006 facb 	bl	8027b00 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 802156a:	1cf9      	adds	r1, r7, #3
 802156c:	2364      	movs	r3, #100	; 0x64
 802156e:	2201      	movs	r2, #1
 8021570:	4811      	ldr	r0, [pc, #68]	; (80215b8 <_ZN8Iim426525WriteEhhc+0x98>)
 8021572:	f007 f8a3 	bl	80286bc <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &send_data, 1, 100);
 8021576:	1cb9      	adds	r1, r7, #2
 8021578:	2364      	movs	r3, #100	; 0x64
 802157a:	2201      	movs	r2, #1
 802157c:	480e      	ldr	r0, [pc, #56]	; (80215b8 <_ZN8Iim426525WriteEhhc+0x98>)
 802157e:	f007 f89d 	bl	80286bc <HAL_SPI_Transmit>

    if(imu_ic_lr == 'L') CS_SET_L;
 8021582:	787b      	ldrb	r3, [r7, #1]
 8021584:	2b4c      	cmp	r3, #76	; 0x4c
 8021586:	d106      	bne.n	8021596 <_ZN8Iim426525WriteEhhc+0x76>
 8021588:	2201      	movs	r2, #1
 802158a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802158e:	4808      	ldr	r0, [pc, #32]	; (80215b0 <_ZN8Iim426525WriteEhhc+0x90>)
 8021590:	f006 fab6 	bl	8027b00 <HAL_GPIO_WritePin>
    else if(imu_ic_lr == 'R') CS_SET_R;
}
 8021594:	e008      	b.n	80215a8 <_ZN8Iim426525WriteEhhc+0x88>
    else if(imu_ic_lr == 'R') CS_SET_R;
 8021596:	787b      	ldrb	r3, [r7, #1]
 8021598:	2b52      	cmp	r3, #82	; 0x52
 802159a:	d105      	bne.n	80215a8 <_ZN8Iim426525WriteEhhc+0x88>
 802159c:	2201      	movs	r2, #1
 802159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80215a2:	4804      	ldr	r0, [pc, #16]	; (80215b4 <_ZN8Iim426525WriteEhhc+0x94>)
 80215a4:	f006 faac 	bl	8027b00 <HAL_GPIO_WritePin>
}
 80215a8:	bf00      	nop
 80215aa:	3708      	adds	r7, #8
 80215ac:	46bd      	mov	sp, r7
 80215ae:	bd80      	pop	{r7, pc}
 80215b0:	40020400 	.word	0x40020400
 80215b4:	40020000 	.word	0x40020000
 80215b8:	2000090c 	.word	0x2000090c

080215bc <_ZN8Iim426529Read2ByteEhhc>:

    return CheckRead(send_address, send_data, imu_ic_lr);
}

int16_t Iim42652::Read2Byte(uint8_t upper_address, uint8_t lower_address, char imu_ic_lr)
{
 80215bc:	b580      	push	{r7, lr}
 80215be:	b084      	sub	sp, #16
 80215c0:	af00      	add	r7, sp, #0
 80215c2:	6078      	str	r0, [r7, #4]
 80215c4:	4608      	mov	r0, r1
 80215c6:	4611      	mov	r1, r2
 80215c8:	461a      	mov	r2, r3
 80215ca:	4603      	mov	r3, r0
 80215cc:	70fb      	strb	r3, [r7, #3]
 80215ce:	460b      	mov	r3, r1
 80215d0:	70bb      	strb	r3, [r7, #2]
 80215d2:	4613      	mov	r3, r2
 80215d4:	707b      	strb	r3, [r7, #1]
    int16_t upper_receive, lower_receive;

    upper_receive = static_cast<int16_t>(Read(upper_address, imu_ic_lr));
 80215d6:	787a      	ldrb	r2, [r7, #1]
 80215d8:	78fb      	ldrb	r3, [r7, #3]
 80215da:	4619      	mov	r1, r3
 80215dc:	6878      	ldr	r0, [r7, #4]
 80215de:	f7ff ff51 	bl	8021484 <_ZN8Iim426524ReadEhc>
 80215e2:	4603      	mov	r3, r0
 80215e4:	81fb      	strh	r3, [r7, #14]
    lower_receive = static_cast<int16_t>(Read(lower_address, imu_ic_lr));
 80215e6:	787a      	ldrb	r2, [r7, #1]
 80215e8:	78bb      	ldrb	r3, [r7, #2]
 80215ea:	4619      	mov	r1, r3
 80215ec:	6878      	ldr	r0, [r7, #4]
 80215ee:	f7ff ff49 	bl	8021484 <_ZN8Iim426524ReadEhc>
 80215f2:	4603      	mov	r3, r0
 80215f4:	81bb      	strh	r3, [r7, #12]

    return (upper_receive << 8) | lower_receive;
 80215f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80215fa:	021b      	lsls	r3, r3, #8
 80215fc:	b21a      	sxth	r2, r3
 80215fe:	89bb      	ldrh	r3, [r7, #12]
 8021600:	4313      	orrs	r3, r2
 8021602:	b21b      	sxth	r3, r3
}
 8021604:	4618      	mov	r0, r3
 8021606:	3710      	adds	r7, #16
 8021608:	46bd      	mov	sp, r7
 802160a:	bd80      	pop	{r7, pc}
 802160c:	0000      	movs	r0, r0
	...

08021610 <_ZN8Iim426526UpdateEv>:

void Iim42652::Update()
{
 8021610:	b590      	push	{r4, r7, lr}
 8021612:	b089      	sub	sp, #36	; 0x24
 8021614:	af00      	add	r7, sp, #0
 8021616:	6078      	str	r0, [r7, #4]
    int16_t raw_z_l = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
 8021618:	234c      	movs	r3, #76	; 0x4c
 802161a:	222a      	movs	r2, #42	; 0x2a
 802161c:	2129      	movs	r1, #41	; 0x29
 802161e:	6878      	ldr	r0, [r7, #4]
 8021620:	f7ff ffcc 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021624:	4603      	mov	r3, r0
 8021626:	83fb      	strh	r3, [r7, #30]
    int16_t raw_z_r = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 8021628:	2352      	movs	r3, #82	; 0x52
 802162a:	222a      	movs	r2, #42	; 0x2a
 802162c:	2129      	movs	r1, #41	; 0x29
 802162e:	6878      	ldr	r0, [r7, #4]
 8021630:	f7ff ffc4 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021634:	4603      	mov	r3, r0
 8021636:	83bb      	strh	r3, [r7, #28]
    double avg_raw_z = static_cast<double>(raw_z_l + raw_z_r) / 2.0;
 8021638:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 802163c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8021640:	4413      	add	r3, r2
 8021642:	4618      	mov	r0, r3
 8021644:	f7fe fe4e 	bl	80202e4 <__aeabi_i2d>
 8021648:	f04f 0200 	mov.w	r2, #0
 802164c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021650:	f7fe ffdc 	bl	802060c <__aeabi_ddiv>
 8021654:	4603      	mov	r3, r0
 8021656:	460c      	mov	r4, r1
 8021658:	e9c7 3404 	strd	r3, r4, [r7, #16]
    double degree_z = avg_raw_z * NORMAL_FUCOR_DPS * TIM6_PERIOD;
 802165c:	a316      	add	r3, pc, #88	; (adr r3, 80216b8 <_ZN8Iim426526UpdateEv+0xa8>)
 802165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021662:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8021666:	f7fe fea7 	bl	80203b8 <__aeabi_dmul>
 802166a:	4603      	mov	r3, r0
 802166c:	460c      	mov	r4, r1
 802166e:	4618      	mov	r0, r3
 8021670:	4621      	mov	r1, r4
 8021672:	f04f 0200 	mov.w	r2, #0
 8021676:	4b0e      	ldr	r3, [pc, #56]	; (80216b0 <_ZN8Iim426526UpdateEv+0xa0>)
 8021678:	f7fe fe9e 	bl	80203b8 <__aeabi_dmul>
 802167c:	4603      	mov	r3, r0
 802167e:	460c      	mov	r4, r1
 8021680:	e9c7 3402 	strd	r3, r4, [r7, #8]

    degree_stack_z_ += degree_z;
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	e9d3 0100 	ldrd	r0, r1, [r3]
 802168a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802168e:	f7fe fcdd 	bl	802004c <__adddf3>
 8021692:	4603      	mov	r3, r0
 8021694:	460c      	mov	r4, r1
 8021696:	687a      	ldr	r2, [r7, #4]
 8021698:	e9c2 3400 	strd	r3, r4, [r2]

#ifdef DEBUG_MODE
    g_deg_z = degree_z;
 802169c:	4a05      	ldr	r2, [pc, #20]	; (80216b4 <_ZN8Iim426526UpdateEv+0xa4>)
 802169e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80216a2:	e9c2 3400 	strd	r3, r4, [r2]
#endif // DEBUG_MODE
}
 80216a6:	bf00      	nop
 80216a8:	3724      	adds	r7, #36	; 0x24
 80216aa:	46bd      	mov	sp, r7
 80216ac:	bd90      	pop	{r4, r7, pc}
 80216ae:	bf00      	nop
 80216b0:	3ff40000 	.word	0x3ff40000
 80216b4:	20000278 	.word	0x20000278
 80216b8:	ddb1209f 	.word	0xddb1209f
 80216bc:	3faf403d 	.word	0x3faf403d

080216c0 <_ZN8Iim4265217ResetDegreeStackZEv>:

void Iim42652::ResetDegreeStackZ()
{
 80216c0:	b490      	push	{r4, r7}
 80216c2:	b082      	sub	sp, #8
 80216c4:	af00      	add	r7, sp, #0
 80216c6:	6078      	str	r0, [r7, #4]
    degree_stack_z_ = 0.0;
 80216c8:	687a      	ldr	r2, [r7, #4]
 80216ca:	f04f 0300 	mov.w	r3, #0
 80216ce:	f04f 0400 	mov.w	r4, #0
 80216d2:	e9c2 3400 	strd	r3, r4, [r2]
}
 80216d6:	bf00      	nop
 80216d8:	3708      	adds	r7, #8
 80216da:	46bd      	mov	sp, r7
 80216dc:	bc90      	pop	{r4, r7}
 80216de:	4770      	bx	lr

080216e0 <_ZN8Iim4265215GetDegreeStackZEv>:

double Iim42652::GetDegreeStackZ()
{
 80216e0:	b490      	push	{r4, r7}
 80216e2:	b082      	sub	sp, #8
 80216e4:	af00      	add	r7, sp, #0
 80216e6:	6078      	str	r0, [r7, #4]
    return degree_stack_z_;
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80216ee:	ec44 3b17 	vmov	d7, r3, r4
}
 80216f2:	eeb0 0a47 	vmov.f32	s0, s14
 80216f6:	eef0 0a67 	vmov.f32	s1, s15
 80216fa:	3708      	adds	r7, #8
 80216fc:	46bd      	mov	sp, r7
 80216fe:	bc90      	pop	{r4, r7}
 8021700:	4770      	bx	lr

08021702 <_ZN8Iim426529GyroXLeftEv>:

int16_t Iim42652::GyroXLeft()
{
 8021702:	b580      	push	{r7, lr}
 8021704:	b082      	sub	sp, #8
 8021706:	af00      	add	r7, sp, #0
 8021708:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_X1_ADD, GYRO_DATA_X0_ADD, 'L');
 802170a:	234c      	movs	r3, #76	; 0x4c
 802170c:	2226      	movs	r2, #38	; 0x26
 802170e:	2125      	movs	r1, #37	; 0x25
 8021710:	6878      	ldr	r0, [r7, #4]
 8021712:	f7ff ff53 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021716:	4603      	mov	r3, r0
}
 8021718:	4618      	mov	r0, r3
 802171a:	3708      	adds	r7, #8
 802171c:	46bd      	mov	sp, r7
 802171e:	bd80      	pop	{r7, pc}

08021720 <_ZN8Iim4265210GyroXRightEv>:

int16_t Iim42652::GyroXRight()
{
 8021720:	b580      	push	{r7, lr}
 8021722:	b082      	sub	sp, #8
 8021724:	af00      	add	r7, sp, #0
 8021726:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_X1_ADD, GYRO_DATA_X0_ADD, 'R');
 8021728:	2352      	movs	r3, #82	; 0x52
 802172a:	2226      	movs	r2, #38	; 0x26
 802172c:	2125      	movs	r1, #37	; 0x25
 802172e:	6878      	ldr	r0, [r7, #4]
 8021730:	f7ff ff44 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021734:	4603      	mov	r3, r0
}
 8021736:	4618      	mov	r0, r3
 8021738:	3708      	adds	r7, #8
 802173a:	46bd      	mov	sp, r7
 802173c:	bd80      	pop	{r7, pc}

0802173e <_ZN8Iim426529GyroYLeftEv>:

int16_t Iim42652::GyroYLeft()
{
 802173e:	b580      	push	{r7, lr}
 8021740:	b082      	sub	sp, #8
 8021742:	af00      	add	r7, sp, #0
 8021744:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Y1_ADD, GYRO_DATA_Y0_ADD, 'L');
 8021746:	234c      	movs	r3, #76	; 0x4c
 8021748:	2228      	movs	r2, #40	; 0x28
 802174a:	2127      	movs	r1, #39	; 0x27
 802174c:	6878      	ldr	r0, [r7, #4]
 802174e:	f7ff ff35 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021752:	4603      	mov	r3, r0
}
 8021754:	4618      	mov	r0, r3
 8021756:	3708      	adds	r7, #8
 8021758:	46bd      	mov	sp, r7
 802175a:	bd80      	pop	{r7, pc}

0802175c <_ZN8Iim4265210GyroYRightEv>:

int16_t Iim42652::GyroYRight()
{
 802175c:	b580      	push	{r7, lr}
 802175e:	b082      	sub	sp, #8
 8021760:	af00      	add	r7, sp, #0
 8021762:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Y1_ADD, GYRO_DATA_Y0_ADD, 'R');
 8021764:	2352      	movs	r3, #82	; 0x52
 8021766:	2228      	movs	r2, #40	; 0x28
 8021768:	2127      	movs	r1, #39	; 0x27
 802176a:	6878      	ldr	r0, [r7, #4]
 802176c:	f7ff ff26 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021770:	4603      	mov	r3, r0
}
 8021772:	4618      	mov	r0, r3
 8021774:	3708      	adds	r7, #8
 8021776:	46bd      	mov	sp, r7
 8021778:	bd80      	pop	{r7, pc}

0802177a <_ZN8Iim426529GyroZLeftEv>:

int16_t Iim42652::GyroZLeft()
{
 802177a:	b580      	push	{r7, lr}
 802177c:	b082      	sub	sp, #8
 802177e:	af00      	add	r7, sp, #0
 8021780:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
 8021782:	234c      	movs	r3, #76	; 0x4c
 8021784:	222a      	movs	r2, #42	; 0x2a
 8021786:	2129      	movs	r1, #41	; 0x29
 8021788:	6878      	ldr	r0, [r7, #4]
 802178a:	f7ff ff17 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 802178e:	4603      	mov	r3, r0
}
 8021790:	4618      	mov	r0, r3
 8021792:	3708      	adds	r7, #8
 8021794:	46bd      	mov	sp, r7
 8021796:	bd80      	pop	{r7, pc}

08021798 <_ZN8Iim4265210GyroZRightEv>:

int16_t Iim42652::GyroZRight()
{
 8021798:	b580      	push	{r7, lr}
 802179a:	b082      	sub	sp, #8
 802179c:	af00      	add	r7, sp, #0
 802179e:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 80217a0:	2352      	movs	r3, #82	; 0x52
 80217a2:	222a      	movs	r2, #42	; 0x2a
 80217a4:	2129      	movs	r1, #41	; 0x29
 80217a6:	6878      	ldr	r0, [r7, #4]
 80217a8:	f7ff ff08 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 80217ac:	4603      	mov	r3, r0
}
 80217ae:	4618      	mov	r0, r3
 80217b0:	3708      	adds	r7, #8
 80217b2:	46bd      	mov	sp, r7
 80217b4:	bd80      	pop	{r7, pc}

080217b6 <_ZN8Iim4265210AccelXLeftEv>:

int16_t Iim42652::AccelXLeft()
{
 80217b6:	b580      	push	{r7, lr}
 80217b8:	b082      	sub	sp, #8
 80217ba:	af00      	add	r7, sp, #0
 80217bc:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_X1_ADD, ACCEL_DATA_X0_ADD, 'L');
 80217be:	234c      	movs	r3, #76	; 0x4c
 80217c0:	2220      	movs	r2, #32
 80217c2:	211f      	movs	r1, #31
 80217c4:	6878      	ldr	r0, [r7, #4]
 80217c6:	f7ff fef9 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 80217ca:	4603      	mov	r3, r0
}
 80217cc:	4618      	mov	r0, r3
 80217ce:	3708      	adds	r7, #8
 80217d0:	46bd      	mov	sp, r7
 80217d2:	bd80      	pop	{r7, pc}

080217d4 <_ZN8Iim4265211AccelXRightEv>:

int16_t Iim42652::AccelXRight()
{
 80217d4:	b580      	push	{r7, lr}
 80217d6:	b082      	sub	sp, #8
 80217d8:	af00      	add	r7, sp, #0
 80217da:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_X1_ADD, ACCEL_DATA_X0_ADD, 'R');
 80217dc:	2352      	movs	r3, #82	; 0x52
 80217de:	2220      	movs	r2, #32
 80217e0:	211f      	movs	r1, #31
 80217e2:	6878      	ldr	r0, [r7, #4]
 80217e4:	f7ff feea 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 80217e8:	4603      	mov	r3, r0
}
 80217ea:	4618      	mov	r0, r3
 80217ec:	3708      	adds	r7, #8
 80217ee:	46bd      	mov	sp, r7
 80217f0:	bd80      	pop	{r7, pc}

080217f2 <_ZN8Iim4265210AccelYLeftEv>:

int16_t Iim42652::AccelYLeft()
{
 80217f2:	b580      	push	{r7, lr}
 80217f4:	b082      	sub	sp, #8
 80217f6:	af00      	add	r7, sp, #0
 80217f8:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Y1_ADD, ACCEL_DATA_Y0_ADD, 'L');
 80217fa:	234c      	movs	r3, #76	; 0x4c
 80217fc:	2222      	movs	r2, #34	; 0x22
 80217fe:	2121      	movs	r1, #33	; 0x21
 8021800:	6878      	ldr	r0, [r7, #4]
 8021802:	f7ff fedb 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021806:	4603      	mov	r3, r0
}
 8021808:	4618      	mov	r0, r3
 802180a:	3708      	adds	r7, #8
 802180c:	46bd      	mov	sp, r7
 802180e:	bd80      	pop	{r7, pc}

08021810 <_ZN8Iim4265211AccelYRightEv>:

int16_t Iim42652::AccelYRight()
{
 8021810:	b580      	push	{r7, lr}
 8021812:	b082      	sub	sp, #8
 8021814:	af00      	add	r7, sp, #0
 8021816:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Y1_ADD, ACCEL_DATA_Y0_ADD, 'R');
 8021818:	2352      	movs	r3, #82	; 0x52
 802181a:	2222      	movs	r2, #34	; 0x22
 802181c:	2121      	movs	r1, #33	; 0x21
 802181e:	6878      	ldr	r0, [r7, #4]
 8021820:	f7ff fecc 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021824:	4603      	mov	r3, r0
}
 8021826:	4618      	mov	r0, r3
 8021828:	3708      	adds	r7, #8
 802182a:	46bd      	mov	sp, r7
 802182c:	bd80      	pop	{r7, pc}

0802182e <_ZN8Iim4265210AccelZLeftEv>:

int16_t Iim42652::AccelZLeft()
{
 802182e:	b580      	push	{r7, lr}
 8021830:	b082      	sub	sp, #8
 8021832:	af00      	add	r7, sp, #0
 8021834:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Z1_ADD, ACCEL_DATA_Z0_ADD, 'L');
 8021836:	234c      	movs	r3, #76	; 0x4c
 8021838:	2224      	movs	r2, #36	; 0x24
 802183a:	2123      	movs	r1, #35	; 0x23
 802183c:	6878      	ldr	r0, [r7, #4]
 802183e:	f7ff febd 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021842:	4603      	mov	r3, r0
}
 8021844:	4618      	mov	r0, r3
 8021846:	3708      	adds	r7, #8
 8021848:	46bd      	mov	sp, r7
 802184a:	bd80      	pop	{r7, pc}

0802184c <_ZN8Iim4265211AccelZRightEv>:

int16_t Iim42652::AccelZRight()
{
 802184c:	b580      	push	{r7, lr}
 802184e:	b082      	sub	sp, #8
 8021850:	af00      	add	r7, sp, #0
 8021852:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Z1_ADD, ACCEL_DATA_Z0_ADD, 'R');
 8021854:	2352      	movs	r3, #82	; 0x52
 8021856:	2224      	movs	r2, #36	; 0x24
 8021858:	2123      	movs	r1, #35	; 0x23
 802185a:	6878      	ldr	r0, [r7, #4]
 802185c:	f7ff feae 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021860:	4603      	mov	r3, r0
 8021862:	4618      	mov	r0, r3
 8021864:	3708      	adds	r7, #8
 8021866:	46bd      	mov	sp, r7
 8021868:	bd80      	pop	{r7, pc}
	...

0802186c <_ZN3Led10ColorOrderEc>:
#include "led.hpp"

void Led::ColorOrder(char color)
{
 802186c:	b580      	push	{r7, lr}
 802186e:	b082      	sub	sp, #8
 8021870:	af00      	add	r7, sp, #0
 8021872:	6078      	str	r0, [r7, #4]
 8021874:	460b      	mov	r3, r1
 8021876:	70fb      	strb	r3, [r7, #3]
    switch(color)
 8021878:	78fb      	ldrb	r3, [r7, #3]
 802187a:	3b42      	subs	r3, #66	; 0x42
 802187c:	2b17      	cmp	r3, #23
 802187e:	f200 80b8 	bhi.w	80219f2 <_ZN3Led10ColorOrderEc+0x186>
 8021882:	a201      	add	r2, pc, #4	; (adr r2, 8021888 <_ZN3Led10ColorOrderEc+0x1c>)
 8021884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021888:	08021935 	.word	0x08021935
 802188c:	08021981 	.word	0x08021981
 8021890:	080219f3 	.word	0x080219f3
 8021894:	080219f3 	.word	0x080219f3
 8021898:	080219f3 	.word	0x080219f3
 802189c:	0802190f 	.word	0x0802190f
 80218a0:	080219f3 	.word	0x080219f3
 80218a4:	080219f3 	.word	0x080219f3
 80218a8:	080219f3 	.word	0x080219f3
 80218ac:	080219f3 	.word	0x080219f3
 80218b0:	080219f3 	.word	0x080219f3
 80218b4:	080219a7 	.word	0x080219a7
 80218b8:	080219f3 	.word	0x080219f3
 80218bc:	080219f3 	.word	0x080219f3
 80218c0:	080219f3 	.word	0x080219f3
 80218c4:	080219f3 	.word	0x080219f3
 80218c8:	080218e9 	.word	0x080218e9
 80218cc:	080219f3 	.word	0x080219f3
 80218d0:	080219f3 	.word	0x080219f3
 80218d4:	080219f3 	.word	0x080219f3
 80218d8:	080219f3 	.word	0x080219f3
 80218dc:	080219cd 	.word	0x080219cd
 80218e0:	080219f3 	.word	0x080219f3
 80218e4:	0802195b 	.word	0x0802195b
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 80218e8:	2200      	movs	r2, #0
 80218ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80218ee:	484c      	ldr	r0, [pc, #304]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218f0:	f006 f906 	bl	8027b00 <HAL_GPIO_WritePin>
 80218f4:	2201      	movs	r2, #1
 80218f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80218fa:	4849      	ldr	r0, [pc, #292]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218fc:	f006 f900 	bl	8027b00 <HAL_GPIO_WritePin>
 8021900:	2201      	movs	r2, #1
 8021902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021906:	4846      	ldr	r0, [pc, #280]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021908:	f006 f8fa 	bl	8027b00 <HAL_GPIO_WritePin>
 802190c:	e084      	b.n	8021a18 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 802190e:	2201      	movs	r2, #1
 8021910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021914:	4842      	ldr	r0, [pc, #264]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021916:	f006 f8f3 	bl	8027b00 <HAL_GPIO_WritePin>
 802191a:	2200      	movs	r2, #0
 802191c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021920:	483f      	ldr	r0, [pc, #252]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021922:	f006 f8ed 	bl	8027b00 <HAL_GPIO_WritePin>
 8021926:	2201      	movs	r2, #1
 8021928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802192c:	483c      	ldr	r0, [pc, #240]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 802192e:	f006 f8e7 	bl	8027b00 <HAL_GPIO_WritePin>
 8021932:	e071      	b.n	8021a18 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 8021934:	2201      	movs	r2, #1
 8021936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802193a:	4839      	ldr	r0, [pc, #228]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 802193c:	f006 f8e0 	bl	8027b00 <HAL_GPIO_WritePin>
 8021940:	2201      	movs	r2, #1
 8021942:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021946:	4836      	ldr	r0, [pc, #216]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021948:	f006 f8da 	bl	8027b00 <HAL_GPIO_WritePin>
 802194c:	2200      	movs	r2, #0
 802194e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021952:	4833      	ldr	r0, [pc, #204]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021954:	f006 f8d4 	bl	8027b00 <HAL_GPIO_WritePin>
 8021958:	e05e      	b.n	8021a18 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 802195a:	2200      	movs	r2, #0
 802195c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021960:	482f      	ldr	r0, [pc, #188]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021962:	f006 f8cd 	bl	8027b00 <HAL_GPIO_WritePin>
 8021966:	2200      	movs	r2, #0
 8021968:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802196c:	482c      	ldr	r0, [pc, #176]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 802196e:	f006 f8c7 	bl	8027b00 <HAL_GPIO_WritePin>
 8021972:	2201      	movs	r2, #1
 8021974:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021978:	4829      	ldr	r0, [pc, #164]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 802197a:	f006 f8c1 	bl	8027b00 <HAL_GPIO_WritePin>
 802197e:	e04b      	b.n	8021a18 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 8021980:	2201      	movs	r2, #1
 8021982:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021986:	4826      	ldr	r0, [pc, #152]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021988:	f006 f8ba 	bl	8027b00 <HAL_GPIO_WritePin>
 802198c:	2200      	movs	r2, #0
 802198e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021992:	4823      	ldr	r0, [pc, #140]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021994:	f006 f8b4 	bl	8027b00 <HAL_GPIO_WritePin>
 8021998:	2200      	movs	r2, #0
 802199a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802199e:	4820      	ldr	r0, [pc, #128]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219a0:	f006 f8ae 	bl	8027b00 <HAL_GPIO_WritePin>
 80219a4:	e038      	b.n	8021a18 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 80219a6:	2200      	movs	r2, #0
 80219a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219ac:	481c      	ldr	r0, [pc, #112]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219ae:	f006 f8a7 	bl	8027b00 <HAL_GPIO_WritePin>
 80219b2:	2201      	movs	r2, #1
 80219b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80219b8:	4819      	ldr	r0, [pc, #100]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219ba:	f006 f8a1 	bl	8027b00 <HAL_GPIO_WritePin>
 80219be:	2200      	movs	r2, #0
 80219c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80219c4:	4816      	ldr	r0, [pc, #88]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219c6:	f006 f89b 	bl	8027b00 <HAL_GPIO_WritePin>
 80219ca:	e025      	b.n	8021a18 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 80219cc:	2200      	movs	r2, #0
 80219ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219d2:	4813      	ldr	r0, [pc, #76]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219d4:	f006 f894 	bl	8027b00 <HAL_GPIO_WritePin>
 80219d8:	2200      	movs	r2, #0
 80219da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80219de:	4810      	ldr	r0, [pc, #64]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219e0:	f006 f88e 	bl	8027b00 <HAL_GPIO_WritePin>
 80219e4:	2200      	movs	r2, #0
 80219e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80219ea:	480d      	ldr	r0, [pc, #52]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219ec:	f006 f888 	bl	8027b00 <HAL_GPIO_WritePin>
 80219f0:	e012      	b.n	8021a18 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 80219f2:	2201      	movs	r2, #1
 80219f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219f8:	4809      	ldr	r0, [pc, #36]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219fa:	f006 f881 	bl	8027b00 <HAL_GPIO_WritePin>
 80219fe:	2201      	movs	r2, #1
 8021a00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021a04:	4806      	ldr	r0, [pc, #24]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a06:	f006 f87b 	bl	8027b00 <HAL_GPIO_WritePin>
 8021a0a:	2201      	movs	r2, #1
 8021a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021a10:	4803      	ldr	r0, [pc, #12]	; (8021a20 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a12:	f006 f875 	bl	8027b00 <HAL_GPIO_WritePin>
 8021a16:	bf00      	nop
    }
}
 8021a18:	bf00      	nop
 8021a1a:	3708      	adds	r7, #8
 8021a1c:	46bd      	mov	sp, r7
 8021a1e:	bd80      	pop	{r7, pc}
 8021a20:	40020800 	.word	0x40020800

08021a24 <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 8021a24:	b580      	push	{r7, lr}
 8021a26:	b084      	sub	sp, #16
 8021a28:	af00      	add	r7, sp, #0
 8021a2a:	6078      	str	r0, [r7, #4]
 8021a2c:	4608      	mov	r0, r1
 8021a2e:	4611      	mov	r1, r2
 8021a30:	461a      	mov	r2, r3
 8021a32:	4603      	mov	r3, r0
 8021a34:	70fb      	strb	r3, [r7, #3]
 8021a36:	460b      	mov	r3, r1
 8021a38:	70bb      	strb	r3, [r7, #2]
 8021a3a:	4613      	mov	r3, r2
 8021a3c:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 8021a3e:	2300      	movs	r3, #0
 8021a40:	73fb      	strb	r3, [r7, #15]
 8021a42:	7bfa      	ldrb	r2, [r7, #15]
 8021a44:	78fb      	ldrb	r3, [r7, #3]
 8021a46:	429a      	cmp	r2, r3
 8021a48:	d215      	bcs.n	8021a76 <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 8021a4a:	78bb      	ldrb	r3, [r7, #2]
 8021a4c:	4619      	mov	r1, r3
 8021a4e:	6878      	ldr	r0, [r7, #4]
 8021a50:	f7ff ff0c 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 8021a54:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021a58:	f004 fe1c 	bl	8026694 <HAL_Delay>
        ColorOrder(color_2);
 8021a5c:	787b      	ldrb	r3, [r7, #1]
 8021a5e:	4619      	mov	r1, r3
 8021a60:	6878      	ldr	r0, [r7, #4]
 8021a62:	f7ff ff03 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 8021a66:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021a6a:	f004 fe13 	bl	8026694 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021a6e:	7bfb      	ldrb	r3, [r7, #15]
 8021a70:	3301      	adds	r3, #1
 8021a72:	73fb      	strb	r3, [r7, #15]
 8021a74:	e7e5      	b.n	8021a42 <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 8021a76:	bf00      	nop
 8021a78:	3710      	adds	r7, #16
 8021a7a:	46bd      	mov	sp, r7
 8021a7c:	bd80      	pop	{r7, pc}

08021a7e <_ZN3Led7RainbowEh>:

void Led::Rainbow(uint8_t times)
{
 8021a7e:	b580      	push	{r7, lr}
 8021a80:	b084      	sub	sp, #16
 8021a82:	af00      	add	r7, sp, #0
 8021a84:	6078      	str	r0, [r7, #4]
 8021a86:	460b      	mov	r3, r1
 8021a88:	70fb      	strb	r3, [r7, #3]
    for(uint8_t i = 0; i < times; i++)
 8021a8a:	2300      	movs	r3, #0
 8021a8c:	73fb      	strb	r3, [r7, #15]
 8021a8e:	7bfa      	ldrb	r2, [r7, #15]
 8021a90:	78fb      	ldrb	r3, [r7, #3]
 8021a92:	429a      	cmp	r2, r3
 8021a94:	d233      	bcs.n	8021afe <_ZN3Led7RainbowEh+0x80>
    {
        ColorOrder('R');
 8021a96:	2152      	movs	r1, #82	; 0x52
 8021a98:	6878      	ldr	r0, [r7, #4]
 8021a9a:	f7ff fee7 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021a9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021aa2:	f004 fdf7 	bl	8026694 <HAL_Delay>
        ColorOrder('Y');
 8021aa6:	2159      	movs	r1, #89	; 0x59
 8021aa8:	6878      	ldr	r0, [r7, #4]
 8021aaa:	f7ff fedf 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021aae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021ab2:	f004 fdef 	bl	8026694 <HAL_Delay>
        ColorOrder('G');
 8021ab6:	2147      	movs	r1, #71	; 0x47
 8021ab8:	6878      	ldr	r0, [r7, #4]
 8021aba:	f7ff fed7 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021abe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021ac2:	f004 fde7 	bl	8026694 <HAL_Delay>
        ColorOrder('C');
 8021ac6:	2143      	movs	r1, #67	; 0x43
 8021ac8:	6878      	ldr	r0, [r7, #4]
 8021aca:	f7ff fecf 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021ace:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021ad2:	f004 fddf 	bl	8026694 <HAL_Delay>
        ColorOrder('B');
 8021ad6:	2142      	movs	r1, #66	; 0x42
 8021ad8:	6878      	ldr	r0, [r7, #4]
 8021ada:	f7ff fec7 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021ade:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021ae2:	f004 fdd7 	bl	8026694 <HAL_Delay>
        ColorOrder('M');
 8021ae6:	214d      	movs	r1, #77	; 0x4d
 8021ae8:	6878      	ldr	r0, [r7, #4]
 8021aea:	f7ff febf 	bl	802186c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021aee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021af2:	f004 fdcf 	bl	8026694 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021af6:	7bfb      	ldrb	r3, [r7, #15]
 8021af8:	3301      	adds	r3, #1
 8021afa:	73fb      	strb	r3, [r7, #15]
 8021afc:	e7c7      	b.n	8021a8e <_ZN3Led7RainbowEh+0x10>
    }
 8021afe:	bf00      	nop
 8021b00:	3710      	adds	r7, #16
 8021b02:	46bd      	mov	sp, r7
 8021b04:	bd80      	pop	{r7, pc}

08021b06 <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : adc_buffers_(), consecutive_adc_buffers_(), max_adc_values_(), min_adc_values_(), adc_values_(), emergency_stop_flag_(0) {}
 8021b06:	b490      	push	{r4, r7}
 8021b08:	b082      	sub	sp, #8
 8021b0a:	af00      	add	r7, sp, #0
 8021b0c:	6078      	str	r0, [r7, #4]
 8021b0e:	687a      	ldr	r2, [r7, #4]
 8021b10:	230d      	movs	r3, #13
 8021b12:	2b00      	cmp	r3, #0
 8021b14:	db04      	blt.n	8021b20 <_ZN10LineSensorC1Ev+0x1a>
 8021b16:	2100      	movs	r1, #0
 8021b18:	8011      	strh	r1, [r2, #0]
 8021b1a:	3202      	adds	r2, #2
 8021b1c:	3b01      	subs	r3, #1
 8021b1e:	e7f8      	b.n	8021b12 <_ZN10LineSensorC1Ev+0xc>
 8021b20:	687b      	ldr	r3, [r7, #4]
 8021b22:	f103 021c 	add.w	r2, r3, #28
 8021b26:	2309      	movs	r3, #9
 8021b28:	4610      	mov	r0, r2
 8021b2a:	2b00      	cmp	r3, #0
 8021b2c:	db0b      	blt.n	8021b46 <_ZN10LineSensorC1Ev+0x40>
 8021b2e:	4601      	mov	r1, r0
 8021b30:	220d      	movs	r2, #13
 8021b32:	2a00      	cmp	r2, #0
 8021b34:	db04      	blt.n	8021b40 <_ZN10LineSensorC1Ev+0x3a>
 8021b36:	2400      	movs	r4, #0
 8021b38:	800c      	strh	r4, [r1, #0]
 8021b3a:	3102      	adds	r1, #2
 8021b3c:	3a01      	subs	r2, #1
 8021b3e:	e7f8      	b.n	8021b32 <_ZN10LineSensorC1Ev+0x2c>
 8021b40:	301c      	adds	r0, #28
 8021b42:	3b01      	subs	r3, #1
 8021b44:	e7f1      	b.n	8021b2a <_ZN10LineSensorC1Ev+0x24>
 8021b46:	687b      	ldr	r3, [r7, #4]
 8021b48:	f503 729a 	add.w	r2, r3, #308	; 0x134
 8021b4c:	230d      	movs	r3, #13
 8021b4e:	2b00      	cmp	r3, #0
 8021b50:	db04      	blt.n	8021b5c <_ZN10LineSensorC1Ev+0x56>
 8021b52:	2100      	movs	r1, #0
 8021b54:	8011      	strh	r1, [r2, #0]
 8021b56:	3202      	adds	r2, #2
 8021b58:	3b01      	subs	r3, #1
 8021b5a:	e7f8      	b.n	8021b4e <_ZN10LineSensorC1Ev+0x48>
 8021b5c:	687b      	ldr	r3, [r7, #4]
 8021b5e:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8021b62:	230d      	movs	r3, #13
 8021b64:	2b00      	cmp	r3, #0
 8021b66:	db04      	blt.n	8021b72 <_ZN10LineSensorC1Ev+0x6c>
 8021b68:	2100      	movs	r1, #0
 8021b6a:	8011      	strh	r1, [r2, #0]
 8021b6c:	3202      	adds	r2, #2
 8021b6e:	3b01      	subs	r3, #1
 8021b70:	e7f8      	b.n	8021b64 <_ZN10LineSensorC1Ev+0x5e>
 8021b72:	687b      	ldr	r3, [r7, #4]
 8021b74:	f503 72b6 	add.w	r2, r3, #364	; 0x16c
 8021b78:	230d      	movs	r3, #13
 8021b7a:	2b00      	cmp	r3, #0
 8021b7c:	db04      	blt.n	8021b88 <_ZN10LineSensorC1Ev+0x82>
 8021b7e:	2100      	movs	r1, #0
 8021b80:	8011      	strh	r1, [r2, #0]
 8021b82:	3202      	adds	r2, #2
 8021b84:	3b01      	subs	r3, #1
 8021b86:	e7f8      	b.n	8021b7a <_ZN10LineSensorC1Ev+0x74>
 8021b88:	687b      	ldr	r3, [r7, #4]
 8021b8a:	2200      	movs	r2, #0
 8021b8c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8021b90:	687b      	ldr	r3, [r7, #4]
 8021b92:	4618      	mov	r0, r3
 8021b94:	3708      	adds	r7, #8
 8021b96:	46bd      	mov	sp, r7
 8021b98:	bc90      	pop	{r4, r7}
 8021b9a:	4770      	bx	lr

08021b9c <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 8021b9c:	b580      	push	{r7, lr}
 8021b9e:	b082      	sub	sp, #8
 8021ba0:	af00      	add	r7, sp, #0
 8021ba2:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffers_, NUMBER_OF_ADC) != HAL_OK)
 8021ba4:	687b      	ldr	r3, [r7, #4]
 8021ba6:	220e      	movs	r2, #14
 8021ba8:	4619      	mov	r1, r3
 8021baa:	4812      	ldr	r0, [pc, #72]	; (8021bf4 <_ZN10LineSensor4InitEv+0x58>)
 8021bac:	f004 fdd8 	bl	8026760 <HAL_ADC_Start_DMA>
 8021bb0:	4603      	mov	r3, r0
 8021bb2:	2b00      	cmp	r3, #0
 8021bb4:	bf14      	ite	ne
 8021bb6:	2301      	movne	r3, #1
 8021bb8:	2300      	moveq	r3, #0
 8021bba:	b2db      	uxtb	r3, r3
 8021bbc:	2b00      	cmp	r3, #0
 8021bbe:	d001      	beq.n	8021bc4 <_ZN10LineSensor4InitEv+0x28>
    {
        Error_Handler();
 8021bc0:	f002 f8d2 	bl	8023d68 <Error_Handler>
    }
    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 8021bc4:	2100      	movs	r1, #0
 8021bc6:	480c      	ldr	r0, [pc, #48]	; (8021bf8 <_ZN10LineSensor4InitEv+0x5c>)
 8021bc8:	f007 fae2 	bl	8029190 <HAL_TIM_PWM_Start>
 8021bcc:	4603      	mov	r3, r0
 8021bce:	2b00      	cmp	r3, #0
 8021bd0:	bf14      	ite	ne
 8021bd2:	2301      	movne	r3, #1
 8021bd4:	2300      	moveq	r3, #0
 8021bd6:	b2db      	uxtb	r3, r3
 8021bd8:	2b00      	cmp	r3, #0
 8021bda:	d001      	beq.n	8021be0 <_ZN10LineSensor4InitEv+0x44>
    {
        Error_Handler();
 8021bdc:	f002 f8c4 	bl	8023d68 <Error_Handler>
    }
    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LED_COMPARE);
 8021be0:	4b05      	ldr	r3, [pc, #20]	; (8021bf8 <_ZN10LineSensor4InitEv+0x5c>)
 8021be2:	681b      	ldr	r3, [r3, #0]
 8021be4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8021be8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8021bea:	bf00      	nop
 8021bec:	3708      	adds	r7, #8
 8021bee:	46bd      	mov	sp, r7
 8021bf0:	bd80      	pop	{r7, pc}
 8021bf2:	bf00      	nop
 8021bf4:	20000964 	.word	0x20000964
 8021bf8:	200009ac 	.word	0x200009ac

08021bfc <_ZN10LineSensor26StoreConsecutiveAdcBuffersEv>:

void LineSensor::StoreConsecutiveAdcBuffers()
{
 8021bfc:	b480      	push	{r7}
 8021bfe:	b085      	sub	sp, #20
 8021c00:	af00      	add	r7, sp, #0
 8021c02:	6078      	str	r0, [r7, #4]
    static uint8_t count = 0;

    for(int i = 0; i < NUMBER_OF_ADC; i++)
 8021c04:	2300      	movs	r3, #0
 8021c06:	60fb      	str	r3, [r7, #12]
 8021c08:	68fb      	ldr	r3, [r7, #12]
 8021c0a:	2b0d      	cmp	r3, #13
 8021c0c:	dc16      	bgt.n	8021c3c <_ZN10LineSensor26StoreConsecutiveAdcBuffersEv+0x40>
    {
        consecutive_adc_buffers_[count][i] = adc_buffers_[i];
 8021c0e:	4b15      	ldr	r3, [pc, #84]	; (8021c64 <_ZN10LineSensor26StoreConsecutiveAdcBuffersEv+0x68>)
 8021c10:	781b      	ldrb	r3, [r3, #0]
 8021c12:	4619      	mov	r1, r3
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	68fa      	ldr	r2, [r7, #12]
 8021c18:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8021c1c:	687a      	ldr	r2, [r7, #4]
 8021c1e:	460b      	mov	r3, r1
 8021c20:	00db      	lsls	r3, r3, #3
 8021c22:	1a5b      	subs	r3, r3, r1
 8021c24:	005b      	lsls	r3, r3, #1
 8021c26:	68f9      	ldr	r1, [r7, #12]
 8021c28:	440b      	add	r3, r1
 8021c2a:	330c      	adds	r3, #12
 8021c2c:	005b      	lsls	r3, r3, #1
 8021c2e:	4413      	add	r3, r2
 8021c30:	4602      	mov	r2, r0
 8021c32:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUMBER_OF_ADC; i++)
 8021c34:	68fb      	ldr	r3, [r7, #12]
 8021c36:	3301      	adds	r3, #1
 8021c38:	60fb      	str	r3, [r7, #12]
 8021c3a:	e7e5      	b.n	8021c08 <_ZN10LineSensor26StoreConsecutiveAdcBuffersEv+0xc>
    }
    if(count < NUMBER_OF_SAMPLE) count++;
 8021c3c:	4b09      	ldr	r3, [pc, #36]	; (8021c64 <_ZN10LineSensor26StoreConsecutiveAdcBuffersEv+0x68>)
 8021c3e:	781b      	ldrb	r3, [r3, #0]
 8021c40:	2b09      	cmp	r3, #9
 8021c42:	d806      	bhi.n	8021c52 <_ZN10LineSensor26StoreConsecutiveAdcBuffersEv+0x56>
 8021c44:	4b07      	ldr	r3, [pc, #28]	; (8021c64 <_ZN10LineSensor26StoreConsecutiveAdcBuffersEv+0x68>)
 8021c46:	781b      	ldrb	r3, [r3, #0]
 8021c48:	3301      	adds	r3, #1
 8021c4a:	b2da      	uxtb	r2, r3
 8021c4c:	4b05      	ldr	r3, [pc, #20]	; (8021c64 <_ZN10LineSensor26StoreConsecutiveAdcBuffersEv+0x68>)
 8021c4e:	701a      	strb	r2, [r3, #0]
    else count = 0;
}
 8021c50:	e002      	b.n	8021c58 <_ZN10LineSensor26StoreConsecutiveAdcBuffersEv+0x5c>
    else count = 0;
 8021c52:	4b04      	ldr	r3, [pc, #16]	; (8021c64 <_ZN10LineSensor26StoreConsecutiveAdcBuffersEv+0x68>)
 8021c54:	2200      	movs	r2, #0
 8021c56:	701a      	strb	r2, [r3, #0]
}
 8021c58:	bf00      	nop
 8021c5a:	3714      	adds	r7, #20
 8021c5c:	46bd      	mov	sp, r7
 8021c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c62:	4770      	bx	lr
 8021c64:	2000003c 	.word	0x2000003c

08021c68 <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 8021c68:	b5b0      	push	{r4, r5, r7, lr}
 8021c6a:	b088      	sub	sp, #32
 8021c6c:	af00      	add	r7, sp, #0
 8021c6e:	60f8      	str	r0, [r7, #12]
 8021c70:	60b9      	str	r1, [r7, #8]
 8021c72:	4611      	mov	r1, r2
 8021c74:	461a      	mov	r2, r3
 8021c76:	460b      	mov	r3, r1
 8021c78:	71fb      	strb	r3, [r7, #7]
 8021c7a:	4613      	mov	r3, r2
 8021c7c:	71bb      	strb	r3, [r7, #6]
    right = last_index;
    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else array[i] = temp_array[right--];
    }
 8021c7e:	466b      	mov	r3, sp
 8021c80:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 8021c82:	79fa      	ldrb	r2, [r7, #7]
 8021c84:	79bb      	ldrb	r3, [r7, #6]
 8021c86:	429a      	cmp	r2, r3
 8021c88:	f080 80ba 	bcs.w	8021e00 <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 8021c8c:	79b8      	ldrb	r0, [r7, #6]
 8021c8e:	61b8      	str	r0, [r7, #24]
 8021c90:	4603      	mov	r3, r0
 8021c92:	3301      	adds	r3, #1
 8021c94:	4619      	mov	r1, r3
 8021c96:	f04f 0200 	mov.w	r2, #0
 8021c9a:	f04f 0300 	mov.w	r3, #0
 8021c9e:	f04f 0400 	mov.w	r4, #0
 8021ca2:	0114      	lsls	r4, r2, #4
 8021ca4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021ca8:	010b      	lsls	r3, r1, #4
 8021caa:	4603      	mov	r3, r0
 8021cac:	3301      	adds	r3, #1
 8021cae:	4619      	mov	r1, r3
 8021cb0:	f04f 0200 	mov.w	r2, #0
 8021cb4:	f04f 0300 	mov.w	r3, #0
 8021cb8:	f04f 0400 	mov.w	r4, #0
 8021cbc:	0114      	lsls	r4, r2, #4
 8021cbe:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021cc2:	010b      	lsls	r3, r1, #4
 8021cc4:	4603      	mov	r3, r0
 8021cc6:	3301      	adds	r3, #1
 8021cc8:	005b      	lsls	r3, r3, #1
 8021cca:	3301      	adds	r3, #1
 8021ccc:	3307      	adds	r3, #7
 8021cce:	08db      	lsrs	r3, r3, #3
 8021cd0:	00db      	lsls	r3, r3, #3
 8021cd2:	ebad 0d03 	sub.w	sp, sp, r3
 8021cd6:	466b      	mov	r3, sp
 8021cd8:	3301      	adds	r3, #1
 8021cda:	085b      	lsrs	r3, r3, #1
 8021cdc:	005b      	lsls	r3, r3, #1
 8021cde:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 8021ce0:	79fa      	ldrb	r2, [r7, #7]
 8021ce2:	79bb      	ldrb	r3, [r7, #6]
 8021ce4:	4413      	add	r3, r2
 8021ce6:	0fda      	lsrs	r2, r3, #31
 8021ce8:	4413      	add	r3, r2
 8021cea:	105b      	asrs	r3, r3, #1
 8021cec:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 8021cee:	7cfb      	ldrb	r3, [r7, #19]
 8021cf0:	79fa      	ldrb	r2, [r7, #7]
 8021cf2:	68b9      	ldr	r1, [r7, #8]
 8021cf4:	68f8      	ldr	r0, [r7, #12]
 8021cf6:	f7ff ffb7 	bl	8021c68 <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 8021cfa:	7cfb      	ldrb	r3, [r7, #19]
 8021cfc:	3301      	adds	r3, #1
 8021cfe:	b2da      	uxtb	r2, r3
 8021d00:	79bb      	ldrb	r3, [r7, #6]
 8021d02:	68b9      	ldr	r1, [r7, #8]
 8021d04:	68f8      	ldr	r0, [r7, #12]
 8021d06:	f7ff ffaf 	bl	8021c68 <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--) temp_array[i] = array[i];
 8021d0a:	7cfb      	ldrb	r3, [r7, #19]
 8021d0c:	77bb      	strb	r3, [r7, #30]
 8021d0e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021d12:	79fb      	ldrb	r3, [r7, #7]
 8021d14:	429a      	cmp	r2, r3
 8021d16:	db11      	blt.n	8021d3c <_ZN10LineSensor9MergeSortEPthh+0xd4>
 8021d18:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d1c:	005b      	lsls	r3, r3, #1
 8021d1e:	68ba      	ldr	r2, [r7, #8]
 8021d20:	4413      	add	r3, r2
 8021d22:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021d26:	8819      	ldrh	r1, [r3, #0]
 8021d28:	697b      	ldr	r3, [r7, #20]
 8021d2a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8021d2e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d32:	b2db      	uxtb	r3, r3
 8021d34:	3b01      	subs	r3, #1
 8021d36:	b2db      	uxtb	r3, r3
 8021d38:	77bb      	strb	r3, [r7, #30]
 8021d3a:	e7e8      	b.n	8021d0e <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 8021d3c:	7cfb      	ldrb	r3, [r7, #19]
 8021d3e:	3301      	adds	r3, #1
 8021d40:	b2db      	uxtb	r3, r3
 8021d42:	77bb      	strb	r3, [r7, #30]
 8021d44:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021d48:	79bb      	ldrb	r3, [r7, #6]
 8021d4a:	429a      	cmp	r2, r3
 8021d4c:	dc17      	bgt.n	8021d7e <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 8021d4e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d52:	005b      	lsls	r3, r3, #1
 8021d54:	68ba      	ldr	r2, [r7, #8]
 8021d56:	4413      	add	r3, r2
 8021d58:	79b9      	ldrb	r1, [r7, #6]
 8021d5a:	f997 001e 	ldrsb.w	r0, [r7, #30]
 8021d5e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8021d62:	3201      	adds	r2, #1
 8021d64:	1a82      	subs	r2, r0, r2
 8021d66:	1a8a      	subs	r2, r1, r2
 8021d68:	8819      	ldrh	r1, [r3, #0]
 8021d6a:	697b      	ldr	r3, [r7, #20]
 8021d6c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 8021d70:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d74:	b2db      	uxtb	r3, r3
 8021d76:	3301      	adds	r3, #1
 8021d78:	b2db      	uxtb	r3, r3
 8021d7a:	77bb      	strb	r3, [r7, #30]
 8021d7c:	e7e2      	b.n	8021d44 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 8021d7e:	79fb      	ldrb	r3, [r7, #7]
 8021d80:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 8021d82:	79bb      	ldrb	r3, [r7, #6]
 8021d84:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 8021d86:	79fb      	ldrb	r3, [r7, #7]
 8021d88:	77bb      	strb	r3, [r7, #30]
 8021d8a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021d8e:	79bb      	ldrb	r3, [r7, #6]
 8021d90:	429a      	cmp	r2, r3
 8021d92:	dc33      	bgt.n	8021dfc <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 8021d94:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021d98:	697b      	ldr	r3, [r7, #20]
 8021d9a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021d9e:	f997 101d 	ldrsb.w	r1, [r7, #29]
 8021da2:	697b      	ldr	r3, [r7, #20]
 8021da4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8021da8:	429a      	cmp	r2, r3
 8021daa:	d210      	bcs.n	8021dce <_ZN10LineSensor9MergeSortEPthh+0x166>
 8021dac:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021db0:	b2d3      	uxtb	r3, r2
 8021db2:	3301      	adds	r3, #1
 8021db4:	b2db      	uxtb	r3, r3
 8021db6:	77fb      	strb	r3, [r7, #31]
 8021db8:	4611      	mov	r1, r2
 8021dba:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021dbe:	005b      	lsls	r3, r3, #1
 8021dc0:	68ba      	ldr	r2, [r7, #8]
 8021dc2:	4413      	add	r3, r2
 8021dc4:	697a      	ldr	r2, [r7, #20]
 8021dc6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021dca:	801a      	strh	r2, [r3, #0]
 8021dcc:	e00f      	b.n	8021dee <_ZN10LineSensor9MergeSortEPthh+0x186>
        else array[i] = temp_array[right--];
 8021dce:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8021dd2:	b2d3      	uxtb	r3, r2
 8021dd4:	3b01      	subs	r3, #1
 8021dd6:	b2db      	uxtb	r3, r3
 8021dd8:	777b      	strb	r3, [r7, #29]
 8021dda:	4611      	mov	r1, r2
 8021ddc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021de0:	005b      	lsls	r3, r3, #1
 8021de2:	68ba      	ldr	r2, [r7, #8]
 8021de4:	4413      	add	r3, r2
 8021de6:	697a      	ldr	r2, [r7, #20]
 8021de8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021dec:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 8021dee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021df2:	b2db      	uxtb	r3, r3
 8021df4:	3301      	adds	r3, #1
 8021df6:	b2db      	uxtb	r3, r3
 8021df8:	77bb      	strb	r3, [r7, #30]
 8021dfa:	e7c6      	b.n	8021d8a <_ZN10LineSensor9MergeSortEPthh+0x122>
 8021dfc:	46ad      	mov	sp, r5
 8021dfe:	e001      	b.n	8021e04 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 8021e00:	bf00      	nop
 8021e02:	46ad      	mov	sp, r5
}
 8021e04:	3720      	adds	r7, #32
 8021e06:	46bd      	mov	sp, r7
 8021e08:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021e0c <_ZN10LineSensor15UpdateAdcValuesEv>:

void LineSensor::UpdateAdcValues()
{
 8021e0c:	b590      	push	{r4, r7, lr}
 8021e0e:	b08d      	sub	sp, #52	; 0x34
 8021e10:	af00      	add	r7, sp, #0
 8021e12:	6078      	str	r0, [r7, #4]
    uint8_t i, j, emergency = 1;
 8021e14:	2301      	movs	r3, #1
 8021e16:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t sample_array[NUMBER_OF_SAMPLE];
    uint16_t sample_median, max, min, max_range, normal = 0;
 8021e1a:	2300      	movs	r3, #0
 8021e1c:	84fb      	strh	r3, [r7, #38]	; 0x26

    for(i = 0; i < NUMBER_OF_ADC; i++)
 8021e1e:	2300      	movs	r3, #0
 8021e20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8021e24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021e28:	2b0d      	cmp	r3, #13
 8021e2a:	f200 80a3 	bhi.w	8021f74 <_ZN10LineSensor15UpdateAdcValuesEv+0x168>
    {
        for(j = 0; j < NUMBER_OF_SAMPLE; j++)
 8021e2e:	2300      	movs	r3, #0
 8021e30:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8021e34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8021e38:	2b09      	cmp	r3, #9
 8021e3a:	d81b      	bhi.n	8021e74 <_ZN10LineSensor15UpdateAdcValuesEv+0x68>
        {
            sample_array[j] = consecutive_adc_buffers_[j][i];
 8021e3c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8021e40:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8021e44:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8021e48:	6878      	ldr	r0, [r7, #4]
 8021e4a:	4613      	mov	r3, r2
 8021e4c:	00db      	lsls	r3, r3, #3
 8021e4e:	1a9b      	subs	r3, r3, r2
 8021e50:	005b      	lsls	r3, r3, #1
 8021e52:	4423      	add	r3, r4
 8021e54:	330c      	adds	r3, #12
 8021e56:	005b      	lsls	r3, r3, #1
 8021e58:	4403      	add	r3, r0
 8021e5a:	889a      	ldrh	r2, [r3, #4]
 8021e5c:	004b      	lsls	r3, r1, #1
 8021e5e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8021e62:	440b      	add	r3, r1
 8021e64:	f823 2c24 	strh.w	r2, [r3, #-36]
        for(j = 0; j < NUMBER_OF_SAMPLE; j++)
 8021e68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8021e6c:	3301      	adds	r3, #1
 8021e6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8021e72:	e7df      	b.n	8021e34 <_ZN10LineSensor15UpdateAdcValuesEv+0x28>
        }
        MergeSort(sample_array, 0, NUMBER_OF_SAMPLE-1);
 8021e74:	f107 010c 	add.w	r1, r7, #12
 8021e78:	2309      	movs	r3, #9
 8021e7a:	2200      	movs	r2, #0
 8021e7c:	6878      	ldr	r0, [r7, #4]
 8021e7e:	f7ff fef3 	bl	8021c68 <_ZN10LineSensor9MergeSortEPthh>
        sample_median = sample_array[INDEX_OF_SAMPLE_MEDIAN];
 8021e82:	8afb      	ldrh	r3, [r7, #22]
 8021e84:	84bb      	strh	r3, [r7, #36]	; 0x24

#ifdef DEBUG_MODE
        for(j = 0; j < NUMBER_OF_SAMPLE; j++) g_consecutive_buffers[i][j] = sample_array[j];
 8021e86:	2300      	movs	r3, #0
 8021e88:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8021e8c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8021e90:	2b09      	cmp	r3, #9
 8021e92:	d81a      	bhi.n	8021eca <_ZN10LineSensor15UpdateAdcValuesEv+0xbe>
 8021e94:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8021e98:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8021e9c:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8021ea0:	005b      	lsls	r3, r3, #1
 8021ea2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8021ea6:	4403      	add	r3, r0
 8021ea8:	f833 4c24 	ldrh.w	r4, [r3, #-36]
 8021eac:	4836      	ldr	r0, [pc, #216]	; (8021f88 <_ZN10LineSensor15UpdateAdcValuesEv+0x17c>)
 8021eae:	4613      	mov	r3, r2
 8021eb0:	009b      	lsls	r3, r3, #2
 8021eb2:	4413      	add	r3, r2
 8021eb4:	005b      	lsls	r3, r3, #1
 8021eb6:	440b      	add	r3, r1
 8021eb8:	4622      	mov	r2, r4
 8021eba:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8021ebe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8021ec2:	3301      	adds	r3, #1
 8021ec4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8021ec8:	e7e0      	b.n	8021e8c <_ZN10LineSensor15UpdateAdcValuesEv+0x80>
#endif // DEBUG_MODE

        if(sample_median < EMERGENCY_STOP_BORDER) emergency = 0;
 8021eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021ecc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8021ed0:	d202      	bcs.n	8021ed8 <_ZN10LineSensor15UpdateAdcValuesEv+0xcc>
 8021ed2:	2300      	movs	r3, #0
 8021ed4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

        max = max_adc_values_[i];
 8021ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021edc:	687a      	ldr	r2, [r7, #4]
 8021ede:	3398      	adds	r3, #152	; 0x98
 8021ee0:	005b      	lsls	r3, r3, #1
 8021ee2:	4413      	add	r3, r2
 8021ee4:	889b      	ldrh	r3, [r3, #4]
 8021ee6:	857b      	strh	r3, [r7, #42]	; 0x2a
        min = min_adc_values_[i];
 8021ee8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8021eec:	687b      	ldr	r3, [r7, #4]
 8021eee:	32a8      	adds	r2, #168	; 0xa8
 8021ef0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021ef4:	853b      	strh	r3, [r7, #40]	; 0x28
        if(min > sample_median || min == 0) min = sample_median;
 8021ef6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8021ef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021efa:	429a      	cmp	r2, r3
 8021efc:	d802      	bhi.n	8021f04 <_ZN10LineSensor15UpdateAdcValuesEv+0xf8>
 8021efe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021f00:	2b00      	cmp	r3, #0
 8021f02:	d102      	bne.n	8021f0a <_ZN10LineSensor15UpdateAdcValuesEv+0xfe>
 8021f04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021f06:	853b      	strh	r3, [r7, #40]	; 0x28
 8021f08:	e005      	b.n	8021f16 <_ZN10LineSensor15UpdateAdcValuesEv+0x10a>
        else if(max < sample_median)        max = sample_median;
 8021f0a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8021f0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021f0e:	429a      	cmp	r2, r3
 8021f10:	d201      	bcs.n	8021f16 <_ZN10LineSensor15UpdateAdcValuesEv+0x10a>
 8021f12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021f14:	857b      	strh	r3, [r7, #42]	; 0x2a
        max_adc_values_[i] = max;
 8021f16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021f1a:	687a      	ldr	r2, [r7, #4]
 8021f1c:	3398      	adds	r3, #152	; 0x98
 8021f1e:	005b      	lsls	r3, r3, #1
 8021f20:	4413      	add	r3, r2
 8021f22:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8021f24:	809a      	strh	r2, [r3, #4]
        min_adc_values_[i] = min;
 8021f26:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8021f2a:	687b      	ldr	r3, [r7, #4]
 8021f2c:	32a8      	adds	r2, #168	; 0xa8
 8021f2e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8021f30:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

        max_range = max - min;
 8021f34:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8021f36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021f38:	1ad3      	subs	r3, r2, r3
 8021f3a:	847b      	strh	r3, [r7, #34]	; 0x22
        if(max_range != 0) normal = MAX_VALUE * (sample_median - min) / max_range;
 8021f3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021f3e:	2b00      	cmp	r3, #0
 8021f40:	d00a      	beq.n	8021f58 <_ZN10LineSensor15UpdateAdcValuesEv+0x14c>
 8021f42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021f44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021f46:	1ad3      	subs	r3, r2, r3
 8021f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8021f4c:	fb02 f203 	mul.w	r2, r2, r3
 8021f50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021f52:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f56:	84fb      	strh	r3, [r7, #38]	; 0x26
        adc_values_[i] = normal;
 8021f58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021f5c:	687a      	ldr	r2, [r7, #4]
 8021f5e:	33b4      	adds	r3, #180	; 0xb4
 8021f60:	005b      	lsls	r3, r3, #1
 8021f62:	4413      	add	r3, r2
 8021f64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021f66:	809a      	strh	r2, [r3, #4]
    for(i = 0; i < NUMBER_OF_ADC; i++)
 8021f68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021f6c:	3301      	adds	r3, #1
 8021f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8021f72:	e757      	b.n	8021e24 <_ZN10LineSensor15UpdateAdcValuesEv+0x18>
    }
    emergency_stop_flag_ = emergency;
 8021f74:	687b      	ldr	r3, [r7, #4]
 8021f76:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8021f7a:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
}
 8021f7e:	bf00      	nop
 8021f80:	3734      	adds	r7, #52	; 0x34
 8021f82:	46bd      	mov	sp, r7
 8021f84:	bd90      	pop	{r4, r7, pc}
 8021f86:	bf00      	nop
 8021f88:	200000d4 	.word	0x200000d4

08021f8c <_ZN10LineSensor20GetEmergencyStopFlagEv>:

uint8_t LineSensor::GetEmergencyStopFlag()
{
 8021f8c:	b480      	push	{r7}
 8021f8e:	b083      	sub	sp, #12
 8021f90:	af00      	add	r7, sp, #0
 8021f92:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
}
 8021f9a:	4618      	mov	r0, r3
 8021f9c:	370c      	adds	r7, #12
 8021f9e:	46bd      	mov	sp, r7
 8021fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fa4:	4770      	bx	lr
	...

08021fa8 <_ZN10LineSensor19LeftRightDifferenceEv>:

float LineSensor::LeftRightDifference()
{
 8021fa8:	b5b0      	push	{r4, r5, r7, lr}
 8021faa:	b086      	sub	sp, #24
 8021fac:	af00      	add	r7, sp, #0
 8021fae:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t left = 0, right = 0;
 8021fb0:	2300      	movs	r3, #0
 8021fb2:	613b      	str	r3, [r7, #16]
 8021fb4:	2300      	movs	r3, #0
 8021fb6:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < HALF_NUMBER_OF_ADC; i++) left += adc_values_[i];
 8021fb8:	2300      	movs	r3, #0
 8021fba:	75fb      	strb	r3, [r7, #23]
 8021fbc:	7dfb      	ldrb	r3, [r7, #23]
 8021fbe:	2b06      	cmp	r3, #6
 8021fc0:	d80d      	bhi.n	8021fde <_ZN10LineSensor19LeftRightDifferenceEv+0x36>
 8021fc2:	7dfb      	ldrb	r3, [r7, #23]
 8021fc4:	687a      	ldr	r2, [r7, #4]
 8021fc6:	33b4      	adds	r3, #180	; 0xb4
 8021fc8:	005b      	lsls	r3, r3, #1
 8021fca:	4413      	add	r3, r2
 8021fcc:	889b      	ldrh	r3, [r3, #4]
 8021fce:	461a      	mov	r2, r3
 8021fd0:	693b      	ldr	r3, [r7, #16]
 8021fd2:	4413      	add	r3, r2
 8021fd4:	613b      	str	r3, [r7, #16]
 8021fd6:	7dfb      	ldrb	r3, [r7, #23]
 8021fd8:	3301      	adds	r3, #1
 8021fda:	75fb      	strb	r3, [r7, #23]
 8021fdc:	e7ee      	b.n	8021fbc <_ZN10LineSensor19LeftRightDifferenceEv+0x14>
    for(i = HALF_NUMBER_OF_ADC; i < NUMBER_OF_ADC; i++) right += adc_values_[i];
 8021fde:	2307      	movs	r3, #7
 8021fe0:	75fb      	strb	r3, [r7, #23]
 8021fe2:	7dfb      	ldrb	r3, [r7, #23]
 8021fe4:	2b0d      	cmp	r3, #13
 8021fe6:	d80d      	bhi.n	8022004 <_ZN10LineSensor19LeftRightDifferenceEv+0x5c>
 8021fe8:	7dfb      	ldrb	r3, [r7, #23]
 8021fea:	687a      	ldr	r2, [r7, #4]
 8021fec:	33b4      	adds	r3, #180	; 0xb4
 8021fee:	005b      	lsls	r3, r3, #1
 8021ff0:	4413      	add	r3, r2
 8021ff2:	889b      	ldrh	r3, [r3, #4]
 8021ff4:	461a      	mov	r2, r3
 8021ff6:	68fb      	ldr	r3, [r7, #12]
 8021ff8:	4413      	add	r3, r2
 8021ffa:	60fb      	str	r3, [r7, #12]
 8021ffc:	7dfb      	ldrb	r3, [r7, #23]
 8021ffe:	3301      	adds	r3, #1
 8022000:	75fb      	strb	r3, [r7, #23]
 8022002:	e7ee      	b.n	8021fe2 <_ZN10LineSensor19LeftRightDifferenceEv+0x3a>

#ifdef DEBUG_MODE
    g_line_left = left;  g_line_right = right;
 8022004:	4a16      	ldr	r2, [pc, #88]	; (8022060 <_ZN10LineSensor19LeftRightDifferenceEv+0xb8>)
 8022006:	693b      	ldr	r3, [r7, #16]
 8022008:	6013      	str	r3, [r2, #0]
 802200a:	4a16      	ldr	r2, [pc, #88]	; (8022064 <_ZN10LineSensor19LeftRightDifferenceEv+0xbc>)
 802200c:	68fb      	ldr	r3, [r7, #12]
 802200e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    return static_cast<float>((right * LINE_SENSOR_CORRECTION) - left);
 8022010:	68f8      	ldr	r0, [r7, #12]
 8022012:	f7fe f957 	bl	80202c4 <__aeabi_ui2d>
 8022016:	a310      	add	r3, pc, #64	; (adr r3, 8022058 <_ZN10LineSensor19LeftRightDifferenceEv+0xb0>)
 8022018:	e9d3 2300 	ldrd	r2, r3, [r3]
 802201c:	f7fe f9cc 	bl	80203b8 <__aeabi_dmul>
 8022020:	4603      	mov	r3, r0
 8022022:	460c      	mov	r4, r1
 8022024:	4625      	mov	r5, r4
 8022026:	461c      	mov	r4, r3
 8022028:	6938      	ldr	r0, [r7, #16]
 802202a:	f7fe f94b 	bl	80202c4 <__aeabi_ui2d>
 802202e:	4602      	mov	r2, r0
 8022030:	460b      	mov	r3, r1
 8022032:	4620      	mov	r0, r4
 8022034:	4629      	mov	r1, r5
 8022036:	f7fe f807 	bl	8020048 <__aeabi_dsub>
 802203a:	4603      	mov	r3, r0
 802203c:	460c      	mov	r4, r1
 802203e:	4618      	mov	r0, r3
 8022040:	4621      	mov	r1, r4
 8022042:	f7fe fc53 	bl	80208ec <__aeabi_d2f>
 8022046:	4603      	mov	r3, r0
 8022048:	ee07 3a90 	vmov	s15, r3
}
 802204c:	eeb0 0a67 	vmov.f32	s0, s15
 8022050:	3718      	adds	r7, #24
 8022052:	46bd      	mov	sp, r7
 8022054:	bdb0      	pop	{r4, r5, r7, pc}
 8022056:	bf00      	nop
 8022058:	66666666 	.word	0x66666666
 802205c:	3fee6666 	.word	0x3fee6666
 8022060:	20000240 	.word	0x20000240
 8022064:	20000244 	.word	0x20000244

08022068 <_ZN10LineSensor16CheckCalibrationEv>:

uint8_t LineSensor::CheckCalibration()
{
 8022068:	b480      	push	{r7}
 802206a:	b085      	sub	sp, #20
 802206c:	af00      	add	r7, sp, #0
 802206e:	6078      	str	r0, [r7, #4]
    uint8_t result = 0;
 8022070:	2300      	movs	r3, #0
 8022072:	73fb      	strb	r3, [r7, #15]
    static uint16_t count = 0;
    static uint16_t pre_max[NUMBER_OF_ADC] = {0};
    static uint16_t pre_min[NUMBER_OF_ADC] = {0};

    for(uint8_t i = 0; i > NUMBER_OF_ADC; i++)
 8022074:	2300      	movs	r3, #0
 8022076:	73bb      	strb	r3, [r7, #14]
 8022078:	7bbb      	ldrb	r3, [r7, #14]
 802207a:	2b0e      	cmp	r3, #14
 802207c:	d932      	bls.n	80220e4 <_ZN10LineSensor16CheckCalibrationEv+0x7c>
    {
        if(pre_max[i] != max_adc_values_[i]) result = 1;
 802207e:	7bbb      	ldrb	r3, [r7, #14]
 8022080:	4a26      	ldr	r2, [pc, #152]	; (802211c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8022082:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8022086:	7bbb      	ldrb	r3, [r7, #14]
 8022088:	6879      	ldr	r1, [r7, #4]
 802208a:	3398      	adds	r3, #152	; 0x98
 802208c:	005b      	lsls	r3, r3, #1
 802208e:	440b      	add	r3, r1
 8022090:	889b      	ldrh	r3, [r3, #4]
 8022092:	429a      	cmp	r2, r3
 8022094:	d002      	beq.n	802209c <_ZN10LineSensor16CheckCalibrationEv+0x34>
 8022096:	2301      	movs	r3, #1
 8022098:	73fb      	strb	r3, [r7, #15]
 802209a:	e00c      	b.n	80220b6 <_ZN10LineSensor16CheckCalibrationEv+0x4e>
        else if(pre_min[i] != min_adc_values_[i]) result = 1;
 802209c:	7bbb      	ldrb	r3, [r7, #14]
 802209e:	4a20      	ldr	r2, [pc, #128]	; (8022120 <_ZN10LineSensor16CheckCalibrationEv+0xb8>)
 80220a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80220a4:	7bb9      	ldrb	r1, [r7, #14]
 80220a6:	687b      	ldr	r3, [r7, #4]
 80220a8:	31a8      	adds	r1, #168	; 0xa8
 80220aa:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80220ae:	429a      	cmp	r2, r3
 80220b0:	d001      	beq.n	80220b6 <_ZN10LineSensor16CheckCalibrationEv+0x4e>
 80220b2:	2301      	movs	r3, #1
 80220b4:	73fb      	strb	r3, [r7, #15]
        pre_max[i] = max_adc_values_[i];
 80220b6:	7bbb      	ldrb	r3, [r7, #14]
 80220b8:	7bba      	ldrb	r2, [r7, #14]
 80220ba:	6879      	ldr	r1, [r7, #4]
 80220bc:	3398      	adds	r3, #152	; 0x98
 80220be:	005b      	lsls	r3, r3, #1
 80220c0:	440b      	add	r3, r1
 80220c2:	8899      	ldrh	r1, [r3, #4]
 80220c4:	4b15      	ldr	r3, [pc, #84]	; (802211c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 80220c6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        pre_min[i] = min_adc_values_[i];
 80220ca:	7bb9      	ldrb	r1, [r7, #14]
 80220cc:	7bbb      	ldrb	r3, [r7, #14]
 80220ce:	687a      	ldr	r2, [r7, #4]
 80220d0:	31a8      	adds	r1, #168	; 0xa8
 80220d2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80220d6:	4a12      	ldr	r2, [pc, #72]	; (8022120 <_ZN10LineSensor16CheckCalibrationEv+0xb8>)
 80220d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i = 0; i > NUMBER_OF_ADC; i++)
 80220dc:	7bbb      	ldrb	r3, [r7, #14]
 80220de:	3301      	adds	r3, #1
 80220e0:	73bb      	strb	r3, [r7, #14]
 80220e2:	e7c9      	b.n	8022078 <_ZN10LineSensor16CheckCalibrationEv+0x10>
    }

    if(result == 0)
 80220e4:	7bfb      	ldrb	r3, [r7, #15]
 80220e6:	2b00      	cmp	r3, #0
 80220e8:	d10e      	bne.n	8022108 <_ZN10LineSensor16CheckCalibrationEv+0xa0>
    {
        if(count < CALIBRATION_COUNT) { count++; result = 1; }
 80220ea:	4b0e      	ldr	r3, [pc, #56]	; (8022124 <_ZN10LineSensor16CheckCalibrationEv+0xbc>)
 80220ec:	881b      	ldrh	r3, [r3, #0]
 80220ee:	f240 52db 	movw	r2, #1499	; 0x5db
 80220f2:	4293      	cmp	r3, r2
 80220f4:	d80b      	bhi.n	802210e <_ZN10LineSensor16CheckCalibrationEv+0xa6>
 80220f6:	4b0b      	ldr	r3, [pc, #44]	; (8022124 <_ZN10LineSensor16CheckCalibrationEv+0xbc>)
 80220f8:	881b      	ldrh	r3, [r3, #0]
 80220fa:	3301      	adds	r3, #1
 80220fc:	b29a      	uxth	r2, r3
 80220fe:	4b09      	ldr	r3, [pc, #36]	; (8022124 <_ZN10LineSensor16CheckCalibrationEv+0xbc>)
 8022100:	801a      	strh	r2, [r3, #0]
 8022102:	2301      	movs	r3, #1
 8022104:	73fb      	strb	r3, [r7, #15]
 8022106:	e002      	b.n	802210e <_ZN10LineSensor16CheckCalibrationEv+0xa6>
    }
    else count = 0;
 8022108:	4b06      	ldr	r3, [pc, #24]	; (8022124 <_ZN10LineSensor16CheckCalibrationEv+0xbc>)
 802210a:	2200      	movs	r2, #0
 802210c:	801a      	strh	r2, [r3, #0]
    
    return result;
 802210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8022110:	4618      	mov	r0, r3
 8022112:	3714      	adds	r7, #20
 8022114:	46bd      	mov	sp, r7
 8022116:	f85d 7b04 	ldr.w	r7, [sp], #4
 802211a:	4770      	bx	lr
 802211c:	20000040 	.word	0x20000040
 8022120:	2000005c 	.word	0x2000005c
 8022124:	2000003e 	.word	0x2000003e

08022128 <_ZN10LineSensor13MonitorArraysEv>:

#ifdef DEBUG_MODE
void LineSensor::MonitorArrays()
{
 8022128:	b480      	push	{r7}
 802212a:	b085      	sub	sp, #20
 802212c:	af00      	add	r7, sp, #0
 802212e:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < NUMBER_OF_ADC; i++)
 8022130:	2300      	movs	r3, #0
 8022132:	73fb      	strb	r3, [r7, #15]
 8022134:	7bfb      	ldrb	r3, [r7, #15]
 8022136:	2b0d      	cmp	r3, #13
 8022138:	d828      	bhi.n	802218c <_ZN10LineSensor13MonitorArraysEv+0x64>
    {
        g_adc_buffers[i] = adc_buffers_[i];
 802213a:	7bf9      	ldrb	r1, [r7, #15]
 802213c:	7bfb      	ldrb	r3, [r7, #15]
 802213e:	687a      	ldr	r2, [r7, #4]
 8022140:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8022144:	4a14      	ldr	r2, [pc, #80]	; (8022198 <_ZN10LineSensor13MonitorArraysEv+0x70>)
 8022146:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        g_max_adc_values[i] = max_adc_values_[i];
 802214a:	7bfb      	ldrb	r3, [r7, #15]
 802214c:	7bfa      	ldrb	r2, [r7, #15]
 802214e:	6879      	ldr	r1, [r7, #4]
 8022150:	3398      	adds	r3, #152	; 0x98
 8022152:	005b      	lsls	r3, r3, #1
 8022154:	440b      	add	r3, r1
 8022156:	8899      	ldrh	r1, [r3, #4]
 8022158:	4b10      	ldr	r3, [pc, #64]	; (802219c <_ZN10LineSensor13MonitorArraysEv+0x74>)
 802215a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_min_adc_values[i] = min_adc_values_[i];
 802215e:	7bf9      	ldrb	r1, [r7, #15]
 8022160:	7bfb      	ldrb	r3, [r7, #15]
 8022162:	687a      	ldr	r2, [r7, #4]
 8022164:	31a8      	adds	r1, #168	; 0xa8
 8022166:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 802216a:	4a0d      	ldr	r2, [pc, #52]	; (80221a0 <_ZN10LineSensor13MonitorArraysEv+0x78>)
 802216c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        g_adc_values[i] = adc_values_[i];
 8022170:	7bfb      	ldrb	r3, [r7, #15]
 8022172:	7bfa      	ldrb	r2, [r7, #15]
 8022174:	6879      	ldr	r1, [r7, #4]
 8022176:	33b4      	adds	r3, #180	; 0xb4
 8022178:	005b      	lsls	r3, r3, #1
 802217a:	440b      	add	r3, r1
 802217c:	8899      	ldrh	r1, [r3, #4]
 802217e:	4b09      	ldr	r3, [pc, #36]	; (80221a4 <_ZN10LineSensor13MonitorArraysEv+0x7c>)
 8022180:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(uint8_t i = 0; i < NUMBER_OF_ADC; i++)
 8022184:	7bfb      	ldrb	r3, [r7, #15]
 8022186:	3301      	adds	r3, #1
 8022188:	73fb      	strb	r3, [r7, #15]
 802218a:	e7d3      	b.n	8022134 <_ZN10LineSensor13MonitorArraysEv+0xc>
    }
}
 802218c:	bf00      	nop
 802218e:	3714      	adds	r7, #20
 8022190:	46bd      	mov	sp, r7
 8022192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022196:	4770      	bx	lr
 8022198:	200000b8 	.word	0x200000b8
 802219c:	200001ec 	.word	0x200001ec
 80221a0:	20000208 	.word	0x20000208
 80221a4:	20000224 	.word	0x20000224

080221a8 <_ZN9LineTraceC1Ev>:
#include "line_trace.hpp"

LineTrace::LineTrace() : integral_error_(0) {}
 80221a8:	b580      	push	{r7, lr}
 80221aa:	b082      	sub	sp, #8
 80221ac:	af00      	add	r7, sp, #0
 80221ae:	6078      	str	r0, [r7, #4]
 80221b0:	687b      	ldr	r3, [r7, #4]
 80221b2:	f04f 0200 	mov.w	r2, #0
 80221b6:	601a      	str	r2, [r3, #0]
 80221b8:	687b      	ldr	r3, [r7, #4]
 80221ba:	3304      	adds	r3, #4
 80221bc:	4618      	mov	r0, r3
 80221be:	f7ff fca2 	bl	8021b06 <_ZN10LineSensorC1Ev>
 80221c2:	687b      	ldr	r3, [r7, #4]
 80221c4:	4618      	mov	r0, r3
 80221c6:	3708      	adds	r7, #8
 80221c8:	46bd      	mov	sp, r7
 80221ca:	bd80      	pop	{r7, pc}
 80221cc:	0000      	movs	r0, r0
	...

080221d0 <_ZN9LineTrace10PidControlEfff>:
{
    integral_error_ = 0.0;
}

float LineTrace::PidControl(float p_gain, float i_gain, float d_gain)
{
 80221d0:	b590      	push	{r4, r7, lr}
 80221d2:	b08b      	sub	sp, #44	; 0x2c
 80221d4:	af00      	add	r7, sp, #0
 80221d6:	60f8      	str	r0, [r7, #12]
 80221d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80221dc:	edc7 0a01 	vstr	s1, [r7, #4]
 80221e0:	ed87 1a00 	vstr	s2, [r7]
    static float pre_error = line_sensor.LeftRightDifference();
 80221e4:	4b52      	ldr	r3, [pc, #328]	; (8022330 <_ZN9LineTrace10PidControlEfff+0x160>)
 80221e6:	781b      	ldrb	r3, [r3, #0]
 80221e8:	f3bf 8f5b 	dmb	ish
 80221ec:	b2db      	uxtb	r3, r3
 80221ee:	f003 0301 	and.w	r3, r3, #1
 80221f2:	2b00      	cmp	r3, #0
 80221f4:	bf0c      	ite	eq
 80221f6:	2301      	moveq	r3, #1
 80221f8:	2300      	movne	r3, #0
 80221fa:	b2db      	uxtb	r3, r3
 80221fc:	2b00      	cmp	r3, #0
 80221fe:	d017      	beq.n	8022230 <_ZN9LineTrace10PidControlEfff+0x60>
 8022200:	484b      	ldr	r0, [pc, #300]	; (8022330 <_ZN9LineTrace10PidControlEfff+0x160>)
 8022202:	f007 ff6d 	bl	802a0e0 <__cxa_guard_acquire>
 8022206:	4603      	mov	r3, r0
 8022208:	2b00      	cmp	r3, #0
 802220a:	bf14      	ite	ne
 802220c:	2301      	movne	r3, #1
 802220e:	2300      	moveq	r3, #0
 8022210:	b2db      	uxtb	r3, r3
 8022212:	2b00      	cmp	r3, #0
 8022214:	d00c      	beq.n	8022230 <_ZN9LineTrace10PidControlEfff+0x60>
 8022216:	68fb      	ldr	r3, [r7, #12]
 8022218:	3304      	adds	r3, #4
 802221a:	4618      	mov	r0, r3
 802221c:	f7ff fec4 	bl	8021fa8 <_ZN10LineSensor19LeftRightDifferenceEv>
 8022220:	eef0 7a40 	vmov.f32	s15, s0
 8022224:	4b43      	ldr	r3, [pc, #268]	; (8022334 <_ZN9LineTrace10PidControlEfff+0x164>)
 8022226:	edc3 7a00 	vstr	s15, [r3]
 802222a:	4841      	ldr	r0, [pc, #260]	; (8022330 <_ZN9LineTrace10PidControlEfff+0x160>)
 802222c:	f007 ff64 	bl	802a0f8 <__cxa_guard_release>
    float error, differential_error, integral_error;
    float p, d, i;

    error = line_sensor.LeftRightDifference();
 8022230:	68fb      	ldr	r3, [r7, #12]
 8022232:	3304      	adds	r3, #4
 8022234:	4618      	mov	r0, r3
 8022236:	f7ff feb7 	bl	8021fa8 <_ZN10LineSensor19LeftRightDifferenceEv>
 802223a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    differential_error = (error - pre_error) / TIM6_PERIOD_S;
 802223e:	4b3d      	ldr	r3, [pc, #244]	; (8022334 <_ZN9LineTrace10PidControlEfff+0x164>)
 8022240:	edd3 7a00 	vldr	s15, [r3]
 8022244:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8022248:	ee77 7a67 	vsub.f32	s15, s14, s15
 802224c:	ee17 0a90 	vmov	r0, s15
 8022250:	f7fe f85a 	bl	8020308 <__aeabi_f2d>
 8022254:	a334      	add	r3, pc, #208	; (adr r3, 8022328 <_ZN9LineTrace10PidControlEfff+0x158>)
 8022256:	e9d3 2300 	ldrd	r2, r3, [r3]
 802225a:	f7fe f9d7 	bl	802060c <__aeabi_ddiv>
 802225e:	4603      	mov	r3, r0
 8022260:	460c      	mov	r4, r1
 8022262:	4618      	mov	r0, r3
 8022264:	4621      	mov	r1, r4
 8022266:	f7fe fb41 	bl	80208ec <__aeabi_d2f>
 802226a:	4603      	mov	r3, r0
 802226c:	623b      	str	r3, [r7, #32]
    integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 802226e:	4b31      	ldr	r3, [pc, #196]	; (8022334 <_ZN9LineTrace10PidControlEfff+0x164>)
 8022270:	ed93 7a00 	vldr	s14, [r3]
 8022274:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8022278:	ee77 7a27 	vadd.f32	s15, s14, s15
 802227c:	ee17 0a90 	vmov	r0, s15
 8022280:	f7fe f842 	bl	8020308 <__aeabi_f2d>
 8022284:	f04f 0200 	mov.w	r2, #0
 8022288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802228c:	f7fe f9be 	bl	802060c <__aeabi_ddiv>
 8022290:	4603      	mov	r3, r0
 8022292:	460c      	mov	r4, r1
 8022294:	4618      	mov	r0, r3
 8022296:	4621      	mov	r1, r4
 8022298:	a323      	add	r3, pc, #140	; (adr r3, 8022328 <_ZN9LineTrace10PidControlEfff+0x158>)
 802229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802229e:	f7fe f88b 	bl	80203b8 <__aeabi_dmul>
 80222a2:	4603      	mov	r3, r0
 80222a4:	460c      	mov	r4, r1
 80222a6:	4618      	mov	r0, r3
 80222a8:	4621      	mov	r1, r4
 80222aa:	f7fe fb1f 	bl	80208ec <__aeabi_d2f>
 80222ae:	4603      	mov	r3, r0
 80222b0:	61fb      	str	r3, [r7, #28]
    SetIntegralError(integral_error);
 80222b2:	ed97 0a07 	vldr	s0, [r7, #28]
 80222b6:	68f8      	ldr	r0, [r7, #12]
 80222b8:	f000 f844 	bl	8022344 <_ZN9LineTrace16SetIntegralErrorEf>

    p = p_gain * error;
 80222bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80222c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80222c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80222c8:	edc7 7a06 	vstr	s15, [r7, #24]
    d = d_gain * differential_error;
 80222cc:	ed97 7a00 	vldr	s14, [r7]
 80222d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80222d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80222d8:	edc7 7a05 	vstr	s15, [r7, #20]
    i = i_gain * integral_error_;
 80222dc:	68fb      	ldr	r3, [r7, #12]
 80222de:	edd3 7a00 	vldr	s15, [r3]
 80222e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80222e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80222ea:	edc7 7a04 	vstr	s15, [r7, #16]

#ifdef DEBUG_MODE
    g_trace_p = p;
 80222ee:	4a12      	ldr	r2, [pc, #72]	; (8022338 <_ZN9LineTrace10PidControlEfff+0x168>)
 80222f0:	69bb      	ldr	r3, [r7, #24]
 80222f2:	6013      	str	r3, [r2, #0]
    g_trace_d = d;
 80222f4:	4a11      	ldr	r2, [pc, #68]	; (802233c <_ZN9LineTrace10PidControlEfff+0x16c>)
 80222f6:	697b      	ldr	r3, [r7, #20]
 80222f8:	6013      	str	r3, [r2, #0]
    g_trace_i = i;
 80222fa:	4a11      	ldr	r2, [pc, #68]	; (8022340 <_ZN9LineTrace10PidControlEfff+0x170>)
 80222fc:	693b      	ldr	r3, [r7, #16]
 80222fe:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    pre_error = error;
 8022300:	4a0c      	ldr	r2, [pc, #48]	; (8022334 <_ZN9LineTrace10PidControlEfff+0x164>)
 8022302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022304:	6013      	str	r3, [r2, #0]

    return p + d + i;
 8022306:	ed97 7a06 	vldr	s14, [r7, #24]
 802230a:	edd7 7a05 	vldr	s15, [r7, #20]
 802230e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8022312:	edd7 7a04 	vldr	s15, [r7, #16]
 8022316:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 802231a:	eeb0 0a67 	vmov.f32	s0, s15
 802231e:	372c      	adds	r7, #44	; 0x2c
 8022320:	46bd      	mov	sp, r7
 8022322:	bd90      	pop	{r4, r7, pc}
 8022324:	f3af 8000 	nop.w
 8022328:	47ae147b 	.word	0x47ae147b
 802232c:	3f547ae1 	.word	0x3f547ae1
 8022330:	2000007c 	.word	0x2000007c
 8022334:	20000078 	.word	0x20000078
 8022338:	200002d4 	.word	0x200002d4
 802233c:	200002dc 	.word	0x200002dc
 8022340:	200002d8 	.word	0x200002d8

08022344 <_ZN9LineTrace16SetIntegralErrorEf>:

void LineTrace::SetIntegralError(float integral_error)
{
 8022344:	b480      	push	{r7}
 8022346:	b083      	sub	sp, #12
 8022348:	af00      	add	r7, sp, #0
 802234a:	6078      	str	r0, [r7, #4]
 802234c:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	ed93 7a00 	vldr	s14, [r3]
 8022356:	edd7 7a00 	vldr	s15, [r7]
 802235a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802235e:	687b      	ldr	r3, [r7, #4]
 8022360:	edc3 7a00 	vstr	s15, [r3]
}
 8022364:	bf00      	nop
 8022366:	370c      	adds	r7, #12
 8022368:	46bd      	mov	sp, r7
 802236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802236e:	4770      	bx	lr

08022370 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8022370:	b480      	push	{r7}
 8022372:	b083      	sub	sp, #12
 8022374:	af00      	add	r7, sp, #0
 8022376:	ed87 0a01 	vstr	s0, [r7, #4]
 802237a:	edd7 7a01 	vldr	s15, [r7, #4]
 802237e:	eef0 7ae7 	vabs.f32	s15, s15
 8022382:	eeb0 0a67 	vmov.f32	s0, s15
 8022386:	370c      	adds	r7, #12
 8022388:	46bd      	mov	sp, r7
 802238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802238e:	4770      	bx	lr

08022390 <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() : const_distance_log_(), radian_log_(), various_log_(), const_distance_copy_(), radian_copy_(), various_copy_(), accel_address_(), decel_address_(), periodic_write_enable_(0), accel_position_write_enable_(0), excess_stack_(0), target_velocity_(MIN_VELOCITY) {}
 8022390:	b580      	push	{r7, lr}
 8022392:	b082      	sub	sp, #8
 8022394:	af00      	add	r7, sp, #0
 8022396:	6078      	str	r0, [r7, #4]
 8022398:	687a      	ldr	r2, [r7, #4]
 802239a:	2309      	movs	r3, #9
 802239c:	2b00      	cmp	r3, #0
 802239e:	db05      	blt.n	80223ac <_ZN6LoggerC1Ev+0x1c>
 80223a0:	f04f 0100 	mov.w	r1, #0
 80223a4:	6011      	str	r1, [r2, #0]
 80223a6:	3204      	adds	r2, #4
 80223a8:	3b01      	subs	r3, #1
 80223aa:	e7f7      	b.n	802239c <_ZN6LoggerC1Ev+0xc>
 80223ac:	687b      	ldr	r3, [r7, #4]
 80223ae:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80223b2:	2309      	movs	r3, #9
 80223b4:	2b00      	cmp	r3, #0
 80223b6:	db05      	blt.n	80223c4 <_ZN6LoggerC1Ev+0x34>
 80223b8:	f04f 0100 	mov.w	r1, #0
 80223bc:	6011      	str	r1, [r2, #0]
 80223be:	3204      	adds	r2, #4
 80223c0:	3b01      	subs	r3, #1
 80223c2:	e7f7      	b.n	80223b4 <_ZN6LoggerC1Ev+0x24>
 80223c4:	687b      	ldr	r3, [r7, #4]
 80223c6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80223ca:	2309      	movs	r3, #9
 80223cc:	2b00      	cmp	r3, #0
 80223ce:	db04      	blt.n	80223da <_ZN6LoggerC1Ev+0x4a>
 80223d0:	2100      	movs	r1, #0
 80223d2:	8011      	strh	r1, [r2, #0]
 80223d4:	3202      	adds	r2, #2
 80223d6:	3b01      	subs	r3, #1
 80223d8:	e7f8      	b.n	80223cc <_ZN6LoggerC1Ev+0x3c>
 80223da:	687b      	ldr	r3, [r7, #4]
 80223dc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80223e0:	2309      	movs	r3, #9
 80223e2:	2b00      	cmp	r3, #0
 80223e4:	db05      	blt.n	80223f2 <_ZN6LoggerC1Ev+0x62>
 80223e6:	f04f 0100 	mov.w	r1, #0
 80223ea:	6011      	str	r1, [r2, #0]
 80223ec:	3204      	adds	r2, #4
 80223ee:	3b01      	subs	r3, #1
 80223f0:	e7f7      	b.n	80223e2 <_ZN6LoggerC1Ev+0x52>
 80223f2:	687b      	ldr	r3, [r7, #4]
 80223f4:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 80223f8:	2309      	movs	r3, #9
 80223fa:	2b00      	cmp	r3, #0
 80223fc:	db05      	blt.n	802240a <_ZN6LoggerC1Ev+0x7a>
 80223fe:	f04f 0100 	mov.w	r1, #0
 8022402:	6011      	str	r1, [r2, #0]
 8022404:	3204      	adds	r2, #4
 8022406:	3b01      	subs	r3, #1
 8022408:	e7f7      	b.n	80223fa <_ZN6LoggerC1Ev+0x6a>
 802240a:	687b      	ldr	r3, [r7, #4]
 802240c:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8022410:	2309      	movs	r3, #9
 8022412:	2b00      	cmp	r3, #0
 8022414:	db04      	blt.n	8022420 <_ZN6LoggerC1Ev+0x90>
 8022416:	2100      	movs	r1, #0
 8022418:	8011      	strh	r1, [r2, #0]
 802241a:	3202      	adds	r2, #2
 802241c:	3b01      	subs	r3, #1
 802241e:	e7f8      	b.n	8022412 <_ZN6LoggerC1Ev+0x82>
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8022426:	2304      	movs	r3, #4
 8022428:	2b00      	cmp	r3, #0
 802242a:	db04      	blt.n	8022436 <_ZN6LoggerC1Ev+0xa6>
 802242c:	2100      	movs	r1, #0
 802242e:	8011      	strh	r1, [r2, #0]
 8022430:	3202      	adds	r2, #2
 8022432:	3b01      	subs	r3, #1
 8022434:	e7f8      	b.n	8022428 <_ZN6LoggerC1Ev+0x98>
 8022436:	687b      	ldr	r3, [r7, #4]
 8022438:	f103 02d2 	add.w	r2, r3, #210	; 0xd2
 802243c:	2304      	movs	r3, #4
 802243e:	2b00      	cmp	r3, #0
 8022440:	db04      	blt.n	802244c <_ZN6LoggerC1Ev+0xbc>
 8022442:	2100      	movs	r1, #0
 8022444:	8011      	strh	r1, [r2, #0]
 8022446:	3202      	adds	r2, #2
 8022448:	3b01      	subs	r3, #1
 802244a:	e7f8      	b.n	802243e <_ZN6LoggerC1Ev+0xae>
 802244c:	687b      	ldr	r3, [r7, #4]
 802244e:	2200      	movs	r2, #0
 8022450:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8022454:	687b      	ldr	r3, [r7, #4]
 8022456:	2200      	movs	r2, #0
 8022458:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 802245c:	687b      	ldr	r3, [r7, #4]
 802245e:	f04f 0200 	mov.w	r2, #0
 8022462:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8022466:	687b      	ldr	r3, [r7, #4]
 8022468:	4a0b      	ldr	r2, [pc, #44]	; (8022498 <_ZN6LoggerC1Ev+0x108>)
 802246a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 802246e:	687b      	ldr	r3, [r7, #4]
 8022470:	33e8      	adds	r3, #232	; 0xe8
 8022472:	4618      	mov	r0, r3
 8022474:	f7fe fc4e 	bl	8020d14 <_ZN7EncoderC1Ev>
 8022478:	687b      	ldr	r3, [r7, #4]
 802247a:	33f8      	adds	r3, #248	; 0xf8
 802247c:	4618      	mov	r0, r3
 802247e:	f7fe ff56 	bl	802132e <_ZN8Iim42652C1Ev>
 8022482:	687b      	ldr	r3, [r7, #4]
 8022484:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022488:	4618      	mov	r0, r3
 802248a:	f001 fe2f 	bl	80240ec <_ZN10SideSensorC1Ev>
 802248e:	687b      	ldr	r3, [r7, #4]
 8022490:	4618      	mov	r0, r3
 8022492:	3708      	adds	r7, #8
 8022494:	46bd      	mov	sp, r7
 8022496:	bd80      	pop	{r7, pc}
 8022498:	3fa66666 	.word	0x3fa66666
 802249c:	00000000 	.word	0x00000000

080224a0 <_ZN6Logger7LoggingEh>:

void Logger::Logging(uint8_t process_complete)
{
 80224a0:	b5b0      	push	{r4, r5, r7, lr}
 80224a2:	b08c      	sub	sp, #48	; 0x30
 80224a4:	af00      	add	r7, sp, #0
 80224a6:	6078      	str	r0, [r7, #4]
 80224a8:	460b      	mov	r3, r1
 80224aa:	70fb      	strb	r3, [r7, #3]
    float distance = encoder.GetDistanceStack();
 80224ac:	687b      	ldr	r3, [r7, #4]
 80224ae:	33e8      	adds	r3, #232	; 0xe8
 80224b0:	4618      	mov	r0, r3
 80224b2:	f7fe fcfe 	bl	8020eb2 <_ZN7Encoder16GetDistanceStackEv>
 80224b6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    if(distance < LOGGING_CONST_DISTANCE) return;
 80224ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80224be:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80224c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80224c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224ca:	f100 81f5 	bmi.w	80228b8 <_ZN6Logger7LoggingEh+0x418>
    encoder.ResetDistanceStack();
 80224ce:	687b      	ldr	r3, [r7, #4]
 80224d0:	33e8      	adds	r3, #232	; 0xe8
 80224d2:	4618      	mov	r0, r3
 80224d4:	f7fe fcd0 	bl	8020e78 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0; // flash address count. (0 ~ 6199)
    static uint16_t log_index = 0;   // Count up when interrupt.

    /* Mapping data of distance */
    const_distance_log_[log_index] = distance;
 80224d8:	4bb3      	ldr	r3, [pc, #716]	; (80227a8 <_ZN6Logger7LoggingEh+0x308>)
 80224da:	881b      	ldrh	r3, [r3, #0]
 80224dc:	687a      	ldr	r2, [r7, #4]
 80224de:	009b      	lsls	r3, r3, #2
 80224e0:	4413      	add	r3, r2
 80224e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80224e4:	601a      	str	r2, [r3, #0]

    /* Mapping data of radian */
    double degree = iim_42652.GetDegreeStackZ();
 80224e6:	687b      	ldr	r3, [r7, #4]
 80224e8:	33f8      	adds	r3, #248	; 0xf8
 80224ea:	4618      	mov	r0, r3
 80224ec:	f7ff f8f8 	bl	80216e0 <_ZN8Iim4265215GetDegreeStackZEv>
 80224f0:	ed87 0b06 	vstr	d0, [r7, #24]
    float radian = static_cast<float>(degree * M_PI / 180.0);
 80224f4:	a3aa      	add	r3, pc, #680	; (adr r3, 80227a0 <_ZN6Logger7LoggingEh+0x300>)
 80224f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80224fe:	f7fd ff5b 	bl	80203b8 <__aeabi_dmul>
 8022502:	4603      	mov	r3, r0
 8022504:	460c      	mov	r4, r1
 8022506:	4618      	mov	r0, r3
 8022508:	4621      	mov	r1, r4
 802250a:	f04f 0200 	mov.w	r2, #0
 802250e:	4ba7      	ldr	r3, [pc, #668]	; (80227ac <_ZN6Logger7LoggingEh+0x30c>)
 8022510:	f7fe f87c 	bl	802060c <__aeabi_ddiv>
 8022514:	4603      	mov	r3, r0
 8022516:	460c      	mov	r4, r1
 8022518:	4618      	mov	r0, r3
 802251a:	4621      	mov	r1, r4
 802251c:	f7fe f9e6 	bl	80208ec <__aeabi_d2f>
 8022520:	4603      	mov	r3, r0
 8022522:	617b      	str	r3, [r7, #20]
    radian_log_[log_index] = radian;
 8022524:	4ba0      	ldr	r3, [pc, #640]	; (80227a8 <_ZN6Logger7LoggingEh+0x308>)
 8022526:	881b      	ldrh	r3, [r3, #0]
 8022528:	687a      	ldr	r2, [r7, #4]
 802252a:	330a      	adds	r3, #10
 802252c:	009b      	lsls	r3, r3, #2
 802252e:	4413      	add	r3, r2
 8022530:	697a      	ldr	r2, [r7, #20]
 8022532:	601a      	str	r2, [r3, #0]
    iim_42652.ResetDegreeStackZ();
 8022534:	687b      	ldr	r3, [r7, #4]
 8022536:	33f8      	adds	r3, #248	; 0xf8
 8022538:	4618      	mov	r0, r3
 802253a:	f7ff f8c1 	bl	80216c0 <_ZN8Iim4265217ResetDegreeStackZEv>

    /* Various log */
    static uint8_t pre_corner_cnt = side_sensor.GetCornerMarkerCount();
 802253e:	4b9c      	ldr	r3, [pc, #624]	; (80227b0 <_ZN6Logger7LoggingEh+0x310>)
 8022540:	781b      	ldrb	r3, [r3, #0]
 8022542:	f3bf 8f5b 	dmb	ish
 8022546:	b2db      	uxtb	r3, r3
 8022548:	f003 0301 	and.w	r3, r3, #1
 802254c:	2b00      	cmp	r3, #0
 802254e:	bf0c      	ite	eq
 8022550:	2301      	moveq	r3, #1
 8022552:	2300      	movne	r3, #0
 8022554:	b2db      	uxtb	r3, r3
 8022556:	2b00      	cmp	r3, #0
 8022558:	d017      	beq.n	802258a <_ZN6Logger7LoggingEh+0xea>
 802255a:	4895      	ldr	r0, [pc, #596]	; (80227b0 <_ZN6Logger7LoggingEh+0x310>)
 802255c:	f007 fdc0 	bl	802a0e0 <__cxa_guard_acquire>
 8022560:	4603      	mov	r3, r0
 8022562:	2b00      	cmp	r3, #0
 8022564:	bf14      	ite	ne
 8022566:	2301      	movne	r3, #1
 8022568:	2300      	moveq	r3, #0
 802256a:	b2db      	uxtb	r3, r3
 802256c:	2b00      	cmp	r3, #0
 802256e:	d00c      	beq.n	802258a <_ZN6Logger7LoggingEh+0xea>
 8022570:	687b      	ldr	r3, [r7, #4]
 8022572:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022576:	4618      	mov	r0, r3
 8022578:	f002 f8ae 	bl	80246d8 <_ZN10SideSensor20GetCornerMarkerCountEv>
 802257c:	4603      	mov	r3, r0
 802257e:	461a      	mov	r2, r3
 8022580:	4b8c      	ldr	r3, [pc, #560]	; (80227b4 <_ZN6Logger7LoggingEh+0x314>)
 8022582:	701a      	strb	r2, [r3, #0]
 8022584:	488a      	ldr	r0, [pc, #552]	; (80227b0 <_ZN6Logger7LoggingEh+0x310>)
 8022586:	f007 fdb7 	bl	802a0f8 <__cxa_guard_release>
    static uint8_t pre_cross_cnt  = side_sensor.GetCrossLineCount();
 802258a:	4b8b      	ldr	r3, [pc, #556]	; (80227b8 <_ZN6Logger7LoggingEh+0x318>)
 802258c:	781b      	ldrb	r3, [r3, #0]
 802258e:	f3bf 8f5b 	dmb	ish
 8022592:	b2db      	uxtb	r3, r3
 8022594:	f003 0301 	and.w	r3, r3, #1
 8022598:	2b00      	cmp	r3, #0
 802259a:	bf0c      	ite	eq
 802259c:	2301      	moveq	r3, #1
 802259e:	2300      	movne	r3, #0
 80225a0:	b2db      	uxtb	r3, r3
 80225a2:	2b00      	cmp	r3, #0
 80225a4:	d017      	beq.n	80225d6 <_ZN6Logger7LoggingEh+0x136>
 80225a6:	4884      	ldr	r0, [pc, #528]	; (80227b8 <_ZN6Logger7LoggingEh+0x318>)
 80225a8:	f007 fd9a 	bl	802a0e0 <__cxa_guard_acquire>
 80225ac:	4603      	mov	r3, r0
 80225ae:	2b00      	cmp	r3, #0
 80225b0:	bf14      	ite	ne
 80225b2:	2301      	movne	r3, #1
 80225b4:	2300      	moveq	r3, #0
 80225b6:	b2db      	uxtb	r3, r3
 80225b8:	2b00      	cmp	r3, #0
 80225ba:	d00c      	beq.n	80225d6 <_ZN6Logger7LoggingEh+0x136>
 80225bc:	687b      	ldr	r3, [r7, #4]
 80225be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80225c2:	4618      	mov	r0, r3
 80225c4:	f002 f894 	bl	80246f0 <_ZN10SideSensor17GetCrossLineCountEv>
 80225c8:	4603      	mov	r3, r0
 80225ca:	461a      	mov	r2, r3
 80225cc:	4b7b      	ldr	r3, [pc, #492]	; (80227bc <_ZN6Logger7LoggingEh+0x31c>)
 80225ce:	701a      	strb	r2, [r3, #0]
 80225d0:	4879      	ldr	r0, [pc, #484]	; (80227b8 <_ZN6Logger7LoggingEh+0x318>)
 80225d2:	f007 fd91 	bl	802a0f8 <__cxa_guard_release>
    uint8_t corner_cnt = side_sensor.GetCornerMarkerCount();
 80225d6:	687b      	ldr	r3, [r7, #4]
 80225d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80225dc:	4618      	mov	r0, r3
 80225de:	f002 f87b 	bl	80246d8 <_ZN10SideSensor20GetCornerMarkerCountEv>
 80225e2:	4603      	mov	r3, r0
 80225e4:	74fb      	strb	r3, [r7, #19]
    uint8_t cross_cnt  = side_sensor.GetCrossLineCount();
 80225e6:	687b      	ldr	r3, [r7, #4]
 80225e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80225ec:	4618      	mov	r0, r3
 80225ee:	f002 f87f 	bl	80246f0 <_ZN10SideSensor17GetCrossLineCountEv>
 80225f2:	4603      	mov	r3, r0
 80225f4:	74bb      	strb	r3, [r7, #18]
    uint16_t various_buff = 0;
 80225f6:	2300      	movs	r3, #0
 80225f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(process_complete != 0)        various_buff |= 0x0004;
 80225fa:	78fb      	ldrb	r3, [r7, #3]
 80225fc:	2b00      	cmp	r3, #0
 80225fe:	d003      	beq.n	8022608 <_ZN6Logger7LoggingEh+0x168>
 8022600:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022602:	f043 0304 	orr.w	r3, r3, #4
 8022606:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_corner_cnt != corner_cnt) various_buff |= 0x0002;
 8022608:	4b6a      	ldr	r3, [pc, #424]	; (80227b4 <_ZN6Logger7LoggingEh+0x314>)
 802260a:	781b      	ldrb	r3, [r3, #0]
 802260c:	7cfa      	ldrb	r2, [r7, #19]
 802260e:	429a      	cmp	r2, r3
 8022610:	d003      	beq.n	802261a <_ZN6Logger7LoggingEh+0x17a>
 8022612:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022614:	f043 0302 	orr.w	r3, r3, #2
 8022618:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_cross_cnt != cross_cnt)   various_buff |= 0x0001;
 802261a:	4b68      	ldr	r3, [pc, #416]	; (80227bc <_ZN6Logger7LoggingEh+0x31c>)
 802261c:	781b      	ldrb	r3, [r3, #0]
 802261e:	7cba      	ldrb	r2, [r7, #18]
 8022620:	429a      	cmp	r2, r3
 8022622:	d003      	beq.n	802262c <_ZN6Logger7LoggingEh+0x18c>
 8022624:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022626:	f043 0301 	orr.w	r3, r3, #1
 802262a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    pre_corner_cnt = corner_cnt;
 802262c:	4a61      	ldr	r2, [pc, #388]	; (80227b4 <_ZN6Logger7LoggingEh+0x314>)
 802262e:	7cfb      	ldrb	r3, [r7, #19]
 8022630:	7013      	strb	r3, [r2, #0]
    pre_cross_cnt  = cross_cnt;
 8022632:	4a62      	ldr	r2, [pc, #392]	; (80227bc <_ZN6Logger7LoggingEh+0x31c>)
 8022634:	7cbb      	ldrb	r3, [r7, #18]
 8022636:	7013      	strb	r3, [r2, #0]
    various_log_[log_index] = various_buff;
 8022638:	4b5b      	ldr	r3, [pc, #364]	; (80227a8 <_ZN6Logger7LoggingEh+0x308>)
 802263a:	881b      	ldrh	r3, [r3, #0]
 802263c:	461a      	mov	r2, r3
 802263e:	687b      	ldr	r3, [r7, #4]
 8022640:	3228      	adds	r2, #40	; 0x28
 8022642:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8022644:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /* Copy periodic log */
    if(log_index == LAST_LOG_INDEX)
 8022648:	4b57      	ldr	r3, [pc, #348]	; (80227a8 <_ZN6Logger7LoggingEh+0x308>)
 802264a:	881b      	ldrh	r3, [r3, #0]
 802264c:	2b09      	cmp	r3, #9
 802264e:	d120      	bne.n	8022692 <_ZN6Logger7LoggingEh+0x1f2>
    {
        log_index = 0;
 8022650:	4b55      	ldr	r3, [pc, #340]	; (80227a8 <_ZN6Logger7LoggingEh+0x308>)
 8022652:	2200      	movs	r2, #0
 8022654:	801a      	strh	r2, [r3, #0]
        memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 8022656:	687b      	ldr	r3, [r7, #4]
 8022658:	3364      	adds	r3, #100	; 0x64
 802265a:	6879      	ldr	r1, [r7, #4]
 802265c:	2228      	movs	r2, #40	; 0x28
 802265e:	4618      	mov	r0, r3
 8022660:	f007 fd72 	bl	802a148 <memcpy>
        memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 8022664:	687b      	ldr	r3, [r7, #4]
 8022666:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	3328      	adds	r3, #40	; 0x28
 802266e:	2228      	movs	r2, #40	; 0x28
 8022670:	4619      	mov	r1, r3
 8022672:	f007 fd69 	bl	802a148 <memcpy>
        memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 8022676:	687b      	ldr	r3, [r7, #4]
 8022678:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 802267c:	687b      	ldr	r3, [r7, #4]
 802267e:	3350      	adds	r3, #80	; 0x50
 8022680:	2214      	movs	r2, #20
 8022682:	4619      	mov	r1, r3
 8022684:	f007 fd60 	bl	802a148 <memcpy>
        periodic_write_enable_ = 1;
 8022688:	687b      	ldr	r3, [r7, #4]
 802268a:	2201      	movs	r2, #1
 802268c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8022690:	e005      	b.n	802269e <_ZN6Logger7LoggingEh+0x1fe>
    }
    else log_index++;
 8022692:	4b45      	ldr	r3, [pc, #276]	; (80227a8 <_ZN6Logger7LoggingEh+0x308>)
 8022694:	881b      	ldrh	r3, [r3, #0]
 8022696:	3301      	adds	r3, #1
 8022698:	b29a      	uxth	r2, r3
 802269a:	4b43      	ldr	r3, [pc, #268]	; (80227a8 <_ZN6Logger7LoggingEh+0x308>)
 802269c:	801a      	strh	r2, [r3, #0]

    /* Distance correction */
    uint16_t correction_address = now_address;
 802269e:	4b48      	ldr	r3, [pc, #288]	; (80227c0 <_ZN6Logger7LoggingEh+0x320>)
 80226a0:	881b      	ldrh	r3, [r3, #0]
 80226a2:	823b      	strh	r3, [r7, #16]
    float excess = excess_stack_;
 80226a4:	687b      	ldr	r3, [r7, #4]
 80226a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80226aa:	60fb      	str	r3, [r7, #12]
    excess += distance - LOGGING_CONST_DISTANCE;
 80226ac:	68f8      	ldr	r0, [r7, #12]
 80226ae:	f7fd fe2b 	bl	8020308 <__aeabi_f2d>
 80226b2:	4604      	mov	r4, r0
 80226b4:	460d      	mov	r5, r1
 80226b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80226b8:	f7fd fe26 	bl	8020308 <__aeabi_f2d>
 80226bc:	f04f 0200 	mov.w	r2, #0
 80226c0:	4b40      	ldr	r3, [pc, #256]	; (80227c4 <_ZN6Logger7LoggingEh+0x324>)
 80226c2:	f7fd fcc1 	bl	8020048 <__aeabi_dsub>
 80226c6:	4602      	mov	r2, r0
 80226c8:	460b      	mov	r3, r1
 80226ca:	4620      	mov	r0, r4
 80226cc:	4629      	mov	r1, r5
 80226ce:	f7fd fcbd 	bl	802004c <__adddf3>
 80226d2:	4603      	mov	r3, r0
 80226d4:	460c      	mov	r4, r1
 80226d6:	4618      	mov	r0, r3
 80226d8:	4621      	mov	r1, r4
 80226da:	f7fe f907 	bl	80208ec <__aeabi_d2f>
 80226de:	4603      	mov	r3, r0
 80226e0:	60fb      	str	r3, [r7, #12]
    if(excess > LOGGING_CONST_DISTANCE)
 80226e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80226e6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80226ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80226ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226f2:	dd6b      	ble.n	80227cc <_ZN6Logger7LoggingEh+0x32c>
    {
        const_distance_log_[log_index] = excess;
 80226f4:	4b2c      	ldr	r3, [pc, #176]	; (80227a8 <_ZN6Logger7LoggingEh+0x308>)
 80226f6:	881b      	ldrh	r3, [r3, #0]
 80226f8:	687a      	ldr	r2, [r7, #4]
 80226fa:	009b      	lsls	r3, r3, #2
 80226fc:	4413      	add	r3, r2
 80226fe:	68fa      	ldr	r2, [r7, #12]
 8022700:	601a      	str	r2, [r3, #0]
        radian_log_[log_index] = radian;
 8022702:	4b29      	ldr	r3, [pc, #164]	; (80227a8 <_ZN6Logger7LoggingEh+0x308>)
 8022704:	881b      	ldrh	r3, [r3, #0]
 8022706:	687a      	ldr	r2, [r7, #4]
 8022708:	330a      	adds	r3, #10
 802270a:	009b      	lsls	r3, r3, #2
 802270c:	4413      	add	r3, r2
 802270e:	697a      	ldr	r2, [r7, #20]
 8022710:	601a      	str	r2, [r3, #0]
        various_log_[log_index] = VARIOUS_LOG_DATA_WHEN_COPY;
 8022712:	4b25      	ldr	r3, [pc, #148]	; (80227a8 <_ZN6Logger7LoggingEh+0x308>)
 8022714:	881b      	ldrh	r3, [r3, #0]
 8022716:	461a      	mov	r2, r3
 8022718:	687b      	ldr	r3, [r7, #4]
 802271a:	3228      	adds	r2, #40	; 0x28
 802271c:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 8022720:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        excess_stack_ = excess - LOGGING_CONST_DISTANCE;
 8022724:	edd7 7a03 	vldr	s15, [r7, #12]
 8022728:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 802272c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022730:	687b      	ldr	r3, [r7, #4]
 8022732:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
        now_address++;
 8022736:	4b22      	ldr	r3, [pc, #136]	; (80227c0 <_ZN6Logger7LoggingEh+0x320>)
 8022738:	881b      	ldrh	r3, [r3, #0]
 802273a:	3301      	adds	r3, #1
 802273c:	b29a      	uxth	r2, r3
 802273e:	4b20      	ldr	r3, [pc, #128]	; (80227c0 <_ZN6Logger7LoggingEh+0x320>)
 8022740:	801a      	strh	r2, [r3, #0]

        /* Copy periodic log */
        if(log_index == LAST_LOG_INDEX)
 8022742:	4b19      	ldr	r3, [pc, #100]	; (80227a8 <_ZN6Logger7LoggingEh+0x308>)
 8022744:	881b      	ldrh	r3, [r3, #0]
 8022746:	2b09      	cmp	r3, #9
 8022748:	d120      	bne.n	802278c <_ZN6Logger7LoggingEh+0x2ec>
        {
            log_index = 0;
 802274a:	4b17      	ldr	r3, [pc, #92]	; (80227a8 <_ZN6Logger7LoggingEh+0x308>)
 802274c:	2200      	movs	r2, #0
 802274e:	801a      	strh	r2, [r3, #0]
            memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 8022750:	687b      	ldr	r3, [r7, #4]
 8022752:	3364      	adds	r3, #100	; 0x64
 8022754:	6879      	ldr	r1, [r7, #4]
 8022756:	2228      	movs	r2, #40	; 0x28
 8022758:	4618      	mov	r0, r3
 802275a:	f007 fcf5 	bl	802a148 <memcpy>
            memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 802275e:	687b      	ldr	r3, [r7, #4]
 8022760:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8022764:	687b      	ldr	r3, [r7, #4]
 8022766:	3328      	adds	r3, #40	; 0x28
 8022768:	2228      	movs	r2, #40	; 0x28
 802276a:	4619      	mov	r1, r3
 802276c:	f007 fcec 	bl	802a148 <memcpy>
            memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 8022770:	687b      	ldr	r3, [r7, #4]
 8022772:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8022776:	687b      	ldr	r3, [r7, #4]
 8022778:	3350      	adds	r3, #80	; 0x50
 802277a:	2214      	movs	r2, #20
 802277c:	4619      	mov	r1, r3
 802277e:	f007 fce3 	bl	802a148 <memcpy>
            periodic_write_enable_ = 1;
 8022782:	687b      	ldr	r3, [r7, #4]
 8022784:	2201      	movs	r2, #1
 8022786:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 802278a:	e023      	b.n	80227d4 <_ZN6Logger7LoggingEh+0x334>
        }
        else log_index++;
 802278c:	4b06      	ldr	r3, [pc, #24]	; (80227a8 <_ZN6Logger7LoggingEh+0x308>)
 802278e:	881b      	ldrh	r3, [r3, #0]
 8022790:	3301      	adds	r3, #1
 8022792:	b29a      	uxth	r2, r3
 8022794:	4b04      	ldr	r3, [pc, #16]	; (80227a8 <_ZN6Logger7LoggingEh+0x308>)
 8022796:	801a      	strh	r2, [r3, #0]
 8022798:	e01c      	b.n	80227d4 <_ZN6Logger7LoggingEh+0x334>
 802279a:	bf00      	nop
 802279c:	f3af 8000 	nop.w
 80227a0:	54442d18 	.word	0x54442d18
 80227a4:	400921fb 	.word	0x400921fb
 80227a8:	20000082 	.word	0x20000082
 80227ac:	40668000 	.word	0x40668000
 80227b0:	20000088 	.word	0x20000088
 80227b4:	20000084 	.word	0x20000084
 80227b8:	20000090 	.word	0x20000090
 80227bc:	2000008c 	.word	0x2000008c
 80227c0:	20000080 	.word	0x20000080
 80227c4:	40340000 	.word	0x40340000
 80227c8:	43ca0000 	.word	0x43ca0000
    }
    else excess_stack_ = excess;
 80227cc:	687b      	ldr	r3, [r7, #4]
 80227ce:	68fa      	ldr	r2, [r7, #12]
 80227d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    /* Accel position log */
    static uint16_t accel_straight_cnt = 0;
    static uint8_t accel_step = 0;
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA)
 80227d4:	687b      	ldr	r3, [r7, #4]
 80227d6:	33e8      	adds	r3, #232	; 0xe8
 80227d8:	4618      	mov	r0, r3
 80227da:	f7fe fb79 	bl	8020ed0 <_ZN7Encoder15AngularVelocityEv>
 80227de:	eef0 7a40 	vmov.f32	s15, s0
 80227e2:	eeb0 0a67 	vmov.f32	s0, s15
 80227e6:	f7ff fdc3 	bl	8022370 <_ZSt4fabsf>
 80227ea:	eeb0 7a40 	vmov.f32	s14, s0
 80227ee:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 80227c8 <_ZN6Logger7LoggingEh+0x328>
 80227f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80227f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227fa:	bf4c      	ite	mi
 80227fc:	2301      	movmi	r3, #1
 80227fe:	2300      	movpl	r3, #0
 8022800:	b2db      	uxtb	r3, r3
 8022802:	2b00      	cmp	r3, #0
 8022804:	d021      	beq.n	802284a <_ZN6Logger7LoggingEh+0x3aa>
    {
        accel_straight_cnt++;
 8022806:	4b2e      	ldr	r3, [pc, #184]	; (80228c0 <_ZN6Logger7LoggingEh+0x420>)
 8022808:	881b      	ldrh	r3, [r3, #0]
 802280a:	3301      	adds	r3, #1
 802280c:	b29a      	uxth	r2, r3
 802280e:	4b2c      	ldr	r3, [pc, #176]	; (80228c0 <_ZN6Logger7LoggingEh+0x420>)
 8022810:	801a      	strh	r2, [r3, #0]
        if(accel_straight_cnt >= CNT_OF_ACCEL_STEP_UP && accel_step < NUM_OF_ACCEL_STEP)
 8022812:	4b2b      	ldr	r3, [pc, #172]	; (80228c0 <_ZN6Logger7LoggingEh+0x420>)
 8022814:	881b      	ldrh	r3, [r3, #0]
 8022816:	2b07      	cmp	r3, #7
 8022818:	d947      	bls.n	80228aa <_ZN6Logger7LoggingEh+0x40a>
 802281a:	4b2a      	ldr	r3, [pc, #168]	; (80228c4 <_ZN6Logger7LoggingEh+0x424>)
 802281c:	781b      	ldrb	r3, [r3, #0]
 802281e:	2b04      	cmp	r3, #4
 8022820:	d843      	bhi.n	80228aa <_ZN6Logger7LoggingEh+0x40a>
        {
            accel_step++;
 8022822:	4b28      	ldr	r3, [pc, #160]	; (80228c4 <_ZN6Logger7LoggingEh+0x424>)
 8022824:	781b      	ldrb	r3, [r3, #0]
 8022826:	3301      	adds	r3, #1
 8022828:	b2da      	uxtb	r2, r3
 802282a:	4b26      	ldr	r3, [pc, #152]	; (80228c4 <_ZN6Logger7LoggingEh+0x424>)
 802282c:	701a      	strb	r2, [r3, #0]
            accel_address_[accel_step-1] = correction_address - CNT_OF_ACCEL_STEP_UP;
 802282e:	4b25      	ldr	r3, [pc, #148]	; (80228c4 <_ZN6Logger7LoggingEh+0x424>)
 8022830:	781b      	ldrb	r3, [r3, #0]
 8022832:	1e5a      	subs	r2, r3, #1
 8022834:	8a3b      	ldrh	r3, [r7, #16]
 8022836:	3b08      	subs	r3, #8
 8022838:	b299      	uxth	r1, r3
 802283a:	687b      	ldr	r3, [r7, #4]
 802283c:	3264      	adds	r2, #100	; 0x64
 802283e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            accel_straight_cnt = 0;
 8022842:	4b1f      	ldr	r3, [pc, #124]	; (80228c0 <_ZN6Logger7LoggingEh+0x420>)
 8022844:	2200      	movs	r2, #0
 8022846:	801a      	strh	r2, [r3, #0]
 8022848:	e02f      	b.n	80228aa <_ZN6Logger7LoggingEh+0x40a>
        }
    }
    else if(accel_step != 0)
 802284a:	4b1e      	ldr	r3, [pc, #120]	; (80228c4 <_ZN6Logger7LoggingEh+0x424>)
 802284c:	781b      	ldrb	r3, [r3, #0]
 802284e:	2b00      	cmp	r3, #0
 8022850:	d028      	beq.n	80228a4 <_ZN6Logger7LoggingEh+0x404>
    {
        for(int i = 1; i <= accel_step; i++)
 8022852:	2301      	movs	r3, #1
 8022854:	62bb      	str	r3, [r7, #40]	; 0x28
 8022856:	4b1b      	ldr	r3, [pc, #108]	; (80228c4 <_ZN6Logger7LoggingEh+0x424>)
 8022858:	781b      	ldrb	r3, [r3, #0]
 802285a:	461a      	mov	r2, r3
 802285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802285e:	4293      	cmp	r3, r2
 8022860:	dc14      	bgt.n	802288c <_ZN6Logger7LoggingEh+0x3ec>
        {
            decel_address_[i-1] = (correction_address-1) - (DIFF_NEXT_ACCEL_STEP * i);
 8022862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022864:	b29b      	uxth	r3, r3
 8022866:	009b      	lsls	r3, r3, #2
 8022868:	b29b      	uxth	r3, r3
 802286a:	8a3a      	ldrh	r2, [r7, #16]
 802286c:	1ad3      	subs	r3, r2, r3
 802286e:	b29a      	uxth	r2, r3
 8022870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022872:	3b01      	subs	r3, #1
 8022874:	3a01      	subs	r2, #1
 8022876:	b291      	uxth	r1, r2
 8022878:	687a      	ldr	r2, [r7, #4]
 802287a:	3368      	adds	r3, #104	; 0x68
 802287c:	005b      	lsls	r3, r3, #1
 802287e:	4413      	add	r3, r2
 8022880:	460a      	mov	r2, r1
 8022882:	805a      	strh	r2, [r3, #2]
        for(int i = 1; i <= accel_step; i++)
 8022884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022886:	3301      	adds	r3, #1
 8022888:	62bb      	str	r3, [r7, #40]	; 0x28
 802288a:	e7e4      	b.n	8022856 <_ZN6Logger7LoggingEh+0x3b6>
        }
        accel_position_write_enable_ = accel_step;
 802288c:	4b0d      	ldr	r3, [pc, #52]	; (80228c4 <_ZN6Logger7LoggingEh+0x424>)
 802288e:	781a      	ldrb	r2, [r3, #0]
 8022890:	687b      	ldr	r3, [r7, #4]
 8022892:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        accel_step = 0;
 8022896:	4b0b      	ldr	r3, [pc, #44]	; (80228c4 <_ZN6Logger7LoggingEh+0x424>)
 8022898:	2200      	movs	r2, #0
 802289a:	701a      	strb	r2, [r3, #0]
        accel_straight_cnt = 0;
 802289c:	4b08      	ldr	r3, [pc, #32]	; (80228c0 <_ZN6Logger7LoggingEh+0x420>)
 802289e:	2200      	movs	r2, #0
 80228a0:	801a      	strh	r2, [r3, #0]
 80228a2:	e002      	b.n	80228aa <_ZN6Logger7LoggingEh+0x40a>
    }
    else accel_straight_cnt = 0;
 80228a4:	4b06      	ldr	r3, [pc, #24]	; (80228c0 <_ZN6Logger7LoggingEh+0x420>)
 80228a6:	2200      	movs	r2, #0
 80228a8:	801a      	strh	r2, [r3, #0]

    now_address++;
 80228aa:	4b07      	ldr	r3, [pc, #28]	; (80228c8 <_ZN6Logger7LoggingEh+0x428>)
 80228ac:	881b      	ldrh	r3, [r3, #0]
 80228ae:	3301      	adds	r3, #1
 80228b0:	b29a      	uxth	r2, r3
 80228b2:	4b05      	ldr	r3, [pc, #20]	; (80228c8 <_ZN6Logger7LoggingEh+0x428>)
 80228b4:	801a      	strh	r2, [r3, #0]
 80228b6:	e000      	b.n	80228ba <_ZN6Logger7LoggingEh+0x41a>
    if(distance < LOGGING_CONST_DISTANCE) return;
 80228b8:	bf00      	nop
}
 80228ba:	3730      	adds	r7, #48	; 0x30
 80228bc:	46bd      	mov	sp, r7
 80228be:	bdb0      	pop	{r4, r5, r7, pc}
 80228c0:	20000094 	.word	0x20000094
 80228c4:	20000096 	.word	0x20000096
 80228c8:	20000080 	.word	0x20000080

080228cc <_ZN6Logger16StorePeriodicLogEv>:

uint8_t Logger::StorePeriodicLog()
{
 80228cc:	b580      	push	{r7, lr}
 80228ce:	b084      	sub	sp, #16
 80228d0:	af00      	add	r7, sp, #0
 80228d2:	6078      	str	r0, [r7, #4]
    if(periodic_write_enable_ == 0) return 0;
 80228d4:	687b      	ldr	r3, [r7, #4]
 80228d6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80228da:	2b00      	cmp	r3, #0
 80228dc:	d101      	bne.n	80228e2 <_ZN6Logger16StorePeriodicLogEv+0x16>
 80228de:	2300      	movs	r3, #0
 80228e0:	e087      	b.n	80229f2 <_ZN6Logger16StorePeriodicLogEv+0x126>
    else periodic_write_enable_ = 0;
 80228e2:	687b      	ldr	r3, [r7, #4]
 80228e4:	2200      	movs	r2, #0
 80228e6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    static uint32_t address_a = HEAD_ADDRESS_BLOCK_A;
    static uint32_t address_b = HEAD_ADDRESS_BLOCK_B;
    static uint32_t address_c = HEAD_ADDRESS_BLOCK_C;
    uint8_t result = 0;
 80228ea:	2300      	movs	r3, #0
 80228ec:	73fb      	strb	r3, [r7, #15]

    if(!flash.CheckBlankWord(address_a, NUM_OF_LOG))     return 0x10;
 80228ee:	687b      	ldr	r3, [r7, #4]
 80228f0:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80228f4:	4b41      	ldr	r3, [pc, #260]	; (80229fc <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80228f6:	681b      	ldr	r3, [r3, #0]
 80228f8:	220a      	movs	r2, #10
 80228fa:	4619      	mov	r1, r3
 80228fc:	f7fe fcc4 	bl	8021288 <_ZN5Flash14CheckBlankWordEmm>
 8022900:	4603      	mov	r3, r0
 8022902:	f083 0301 	eor.w	r3, r3, #1
 8022906:	b2db      	uxtb	r3, r3
 8022908:	2b00      	cmp	r3, #0
 802290a:	d001      	beq.n	8022910 <_ZN6Logger16StorePeriodicLogEv+0x44>
 802290c:	2310      	movs	r3, #16
 802290e:	e070      	b.n	80229f2 <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankWord(address_b, NUM_OF_LOG))     return 0x20;
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022916:	4b3a      	ldr	r3, [pc, #232]	; (8022a00 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022918:	681b      	ldr	r3, [r3, #0]
 802291a:	220a      	movs	r2, #10
 802291c:	4619      	mov	r1, r3
 802291e:	f7fe fcb3 	bl	8021288 <_ZN5Flash14CheckBlankWordEmm>
 8022922:	4603      	mov	r3, r0
 8022924:	f083 0301 	eor.w	r3, r3, #1
 8022928:	b2db      	uxtb	r3, r3
 802292a:	2b00      	cmp	r3, #0
 802292c:	d001      	beq.n	8022932 <_ZN6Logger16StorePeriodicLogEv+0x66>
 802292e:	2320      	movs	r3, #32
 8022930:	e05f      	b.n	80229f2 <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankHalfword(address_c, NUM_OF_LOG)) return 0x40;
 8022932:	687b      	ldr	r3, [r7, #4]
 8022934:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022938:	4b32      	ldr	r3, [pc, #200]	; (8022a04 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 802293a:	681b      	ldr	r3, [r3, #0]
 802293c:	220a      	movs	r2, #10
 802293e:	4619      	mov	r1, r3
 8022940:	f7fe fc4e 	bl	80211e0 <_ZN5Flash18CheckBlankHalfwordEmm>
 8022944:	4603      	mov	r3, r0
 8022946:	f083 0301 	eor.w	r3, r3, #1
 802294a:	b2db      	uxtb	r3, r3
 802294c:	2b00      	cmp	r3, #0
 802294e:	d001      	beq.n	8022954 <_ZN6Logger16StorePeriodicLogEv+0x88>
 8022950:	2340      	movs	r3, #64	; 0x40
 8022952:	e04e      	b.n	80229f2 <_ZN6Logger16StorePeriodicLogEv+0x126>

    if(!flash.StoreFloat(address_a, const_distance_copy_, NUM_OF_LOG)) result |= 0x01;
 8022954:	687b      	ldr	r3, [r7, #4]
 8022956:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 802295a:	4b28      	ldr	r3, [pc, #160]	; (80229fc <_ZN6Logger16StorePeriodicLogEv+0x130>)
 802295c:	6819      	ldr	r1, [r3, #0]
 802295e:	687b      	ldr	r3, [r7, #4]
 8022960:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8022964:	230a      	movs	r3, #10
 8022966:	f7fe fba6 	bl	80210b6 <_ZN5Flash10StoreFloatEmPfm>
 802296a:	4603      	mov	r3, r0
 802296c:	f083 0301 	eor.w	r3, r3, #1
 8022970:	b2db      	uxtb	r3, r3
 8022972:	2b00      	cmp	r3, #0
 8022974:	d003      	beq.n	802297e <_ZN6Logger16StorePeriodicLogEv+0xb2>
 8022976:	7bfb      	ldrb	r3, [r7, #15]
 8022978:	f043 0301 	orr.w	r3, r3, #1
 802297c:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreFloat(address_b, radian_copy_, NUM_OF_LOG))         result |= 0x02;
 802297e:	687b      	ldr	r3, [r7, #4]
 8022980:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022984:	4b1e      	ldr	r3, [pc, #120]	; (8022a00 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022986:	6819      	ldr	r1, [r3, #0]
 8022988:	687b      	ldr	r3, [r7, #4]
 802298a:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 802298e:	230a      	movs	r3, #10
 8022990:	f7fe fb91 	bl	80210b6 <_ZN5Flash10StoreFloatEmPfm>
 8022994:	4603      	mov	r3, r0
 8022996:	f083 0301 	eor.w	r3, r3, #1
 802299a:	b2db      	uxtb	r3, r3
 802299c:	2b00      	cmp	r3, #0
 802299e:	d003      	beq.n	80229a8 <_ZN6Logger16StorePeriodicLogEv+0xdc>
 80229a0:	7bfb      	ldrb	r3, [r7, #15]
 80229a2:	f043 0302 	orr.w	r3, r3, #2
 80229a6:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreUint16(address_c, various_copy_, NUM_OF_LOG))       result |= 0x04;
 80229a8:	687b      	ldr	r3, [r7, #4]
 80229aa:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80229ae:	4b15      	ldr	r3, [pc, #84]	; (8022a04 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80229b0:	6819      	ldr	r1, [r3, #0]
 80229b2:	687b      	ldr	r3, [r7, #4]
 80229b4:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 80229b8:	230a      	movs	r3, #10
 80229ba:	f7fe fb11 	bl	8020fe0 <_ZN5Flash11StoreUint16EmPtm>
 80229be:	4603      	mov	r3, r0
 80229c0:	f083 0301 	eor.w	r3, r3, #1
 80229c4:	b2db      	uxtb	r3, r3
 80229c6:	2b00      	cmp	r3, #0
 80229c8:	d003      	beq.n	80229d2 <_ZN6Logger16StorePeriodicLogEv+0x106>
 80229ca:	7bfb      	ldrb	r3, [r7, #15]
 80229cc:	f043 0304 	orr.w	r3, r3, #4
 80229d0:	73fb      	strb	r3, [r7, #15]

    address_a += NUM_OF_LOG * 4;
 80229d2:	4b0a      	ldr	r3, [pc, #40]	; (80229fc <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80229d4:	681b      	ldr	r3, [r3, #0]
 80229d6:	3328      	adds	r3, #40	; 0x28
 80229d8:	4a08      	ldr	r2, [pc, #32]	; (80229fc <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80229da:	6013      	str	r3, [r2, #0]
    address_b += NUM_OF_LOG * 4;
 80229dc:	4b08      	ldr	r3, [pc, #32]	; (8022a00 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80229de:	681b      	ldr	r3, [r3, #0]
 80229e0:	3328      	adds	r3, #40	; 0x28
 80229e2:	4a07      	ldr	r2, [pc, #28]	; (8022a00 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80229e4:	6013      	str	r3, [r2, #0]
    address_c += NUM_OF_LOG * 2;
 80229e6:	4b07      	ldr	r3, [pc, #28]	; (8022a04 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80229e8:	681b      	ldr	r3, [r3, #0]
 80229ea:	3314      	adds	r3, #20
 80229ec:	4a05      	ldr	r2, [pc, #20]	; (8022a04 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80229ee:	6013      	str	r3, [r2, #0]

    return result;
 80229f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80229f2:	4618      	mov	r0, r3
 80229f4:	3710      	adds	r7, #16
 80229f6:	46bd      	mov	sp, r7
 80229f8:	bd80      	pop	{r7, pc}
 80229fa:	bf00      	nop
 80229fc:	20000000 	.word	0x20000000
 8022a00:	20000004 	.word	0x20000004
 8022a04:	20000008 	.word	0x20000008

08022a08 <_ZN6Logger21StoreAccelPositionLogEv>:

uint8_t Logger::StoreAccelPositionLog()
{
 8022a08:	b580      	push	{r7, lr}
 8022a0a:	b086      	sub	sp, #24
 8022a0c:	af00      	add	r7, sp, #0
 8022a0e:	6078      	str	r0, [r7, #4]
    uint8_t accel_step = accel_position_write_enable_;
 8022a10:	687b      	ldr	r3, [r7, #4]
 8022a12:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8022a16:	75bb      	strb	r3, [r7, #22]
    if(accel_step == 0) return 0;
 8022a18:	7dbb      	ldrb	r3, [r7, #22]
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	d101      	bne.n	8022a22 <_ZN6Logger21StoreAccelPositionLogEv+0x1a>
 8022a1e:	2300      	movs	r3, #0
 8022a20:	e079      	b.n	8022b16 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    else accel_position_write_enable_ = 0;
 8022a22:	687b      	ldr	r3, [r7, #4]
 8022a24:	2200      	movs	r2, #0
 8022a26:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    uint32_t address;
    uint8_t accel = 0; // step 0x01, 0x02, 0x03, 0x04, 0x05.
 8022a2a:	2300      	movs	r3, #0
 8022a2c:	73fb      	strb	r3, [r7, #15]
    uint8_t decel = 0; // step 0x10, 0x20, 0x30, 0x40, 0x50.
 8022a2e:	2300      	movs	r3, #0
 8022a30:	73bb      	strb	r3, [r7, #14]
    uint8_t i;

    for(i = 1; i <= accel_step; i++)
 8022a32:	2301      	movs	r3, #1
 8022a34:	75fb      	strb	r3, [r7, #23]
 8022a36:	7dfa      	ldrb	r2, [r7, #23]
 8022a38:	7dbb      	ldrb	r3, [r7, #22]
 8022a3a:	429a      	cmp	r2, r3
 8022a3c:	d830      	bhi.n	8022aa0 <_ZN6Logger21StoreAccelPositionLogEv+0x98>
    {
        accel = i;
 8022a3e:	7dfb      	ldrb	r3, [r7, #23]
 8022a40:	73fb      	strb	r3, [r7, #15]
        address = HEAD_ADDRESS_BLOCK_D + accel_address_[i-1];
 8022a42:	7dfb      	ldrb	r3, [r7, #23]
 8022a44:	1e5a      	subs	r2, r3, #1
 8022a46:	687b      	ldr	r3, [r7, #4]
 8022a48:	3264      	adds	r2, #100	; 0x64
 8022a4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022a4e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022a52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022a56:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x10;
 8022a58:	687b      	ldr	r3, [r7, #4]
 8022a5a:	33f4      	adds	r3, #244	; 0xf4
 8022a5c:	2201      	movs	r2, #1
 8022a5e:	6939      	ldr	r1, [r7, #16]
 8022a60:	4618      	mov	r0, r3
 8022a62:	f7fe fb70 	bl	8021146 <_ZN5Flash14CheckBlankByteEmm>
 8022a66:	4603      	mov	r3, r0
 8022a68:	f083 0301 	eor.w	r3, r3, #1
 8022a6c:	b2db      	uxtb	r3, r3
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	d001      	beq.n	8022a76 <_ZN6Logger21StoreAccelPositionLogEv+0x6e>
 8022a72:	2310      	movs	r3, #16
 8022a74:	e04f      	b.n	8022b16 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &accel, 1)) return 0x20;
 8022a76:	687b      	ldr	r3, [r7, #4]
 8022a78:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022a7c:	f107 020f 	add.w	r2, r7, #15
 8022a80:	2301      	movs	r3, #1
 8022a82:	6939      	ldr	r1, [r7, #16]
 8022a84:	f7fe fa78 	bl	8020f78 <_ZN5Flash10StoreUint8EmPhm>
 8022a88:	4603      	mov	r3, r0
 8022a8a:	f083 0301 	eor.w	r3, r3, #1
 8022a8e:	b2db      	uxtb	r3, r3
 8022a90:	2b00      	cmp	r3, #0
 8022a92:	d001      	beq.n	8022a98 <_ZN6Logger21StoreAccelPositionLogEv+0x90>
 8022a94:	2320      	movs	r3, #32
 8022a96:	e03e      	b.n	8022b16 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 8022a98:	7dfb      	ldrb	r3, [r7, #23]
 8022a9a:	3301      	adds	r3, #1
 8022a9c:	75fb      	strb	r3, [r7, #23]
 8022a9e:	e7ca      	b.n	8022a36 <_ZN6Logger21StoreAccelPositionLogEv+0x2e>
    }
    for(i = 1; i <= accel_step; i++)
 8022aa0:	2301      	movs	r3, #1
 8022aa2:	75fb      	strb	r3, [r7, #23]
 8022aa4:	7dfa      	ldrb	r2, [r7, #23]
 8022aa6:	7dbb      	ldrb	r3, [r7, #22]
 8022aa8:	429a      	cmp	r2, r3
 8022aaa:	d833      	bhi.n	8022b14 <_ZN6Logger21StoreAccelPositionLogEv+0x10c>
    {
        decel = i << 4;
 8022aac:	7dfb      	ldrb	r3, [r7, #23]
 8022aae:	011b      	lsls	r3, r3, #4
 8022ab0:	b2db      	uxtb	r3, r3
 8022ab2:	73bb      	strb	r3, [r7, #14]
        address = HEAD_ADDRESS_BLOCK_D + decel_address_[i-1];
 8022ab4:	7dfb      	ldrb	r3, [r7, #23]
 8022ab6:	3b01      	subs	r3, #1
 8022ab8:	687a      	ldr	r2, [r7, #4]
 8022aba:	3368      	adds	r3, #104	; 0x68
 8022abc:	005b      	lsls	r3, r3, #1
 8022abe:	4413      	add	r3, r2
 8022ac0:	885b      	ldrh	r3, [r3, #2]
 8022ac2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022ac6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022aca:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x30;
 8022acc:	687b      	ldr	r3, [r7, #4]
 8022ace:	33f4      	adds	r3, #244	; 0xf4
 8022ad0:	2201      	movs	r2, #1
 8022ad2:	6939      	ldr	r1, [r7, #16]
 8022ad4:	4618      	mov	r0, r3
 8022ad6:	f7fe fb36 	bl	8021146 <_ZN5Flash14CheckBlankByteEmm>
 8022ada:	4603      	mov	r3, r0
 8022adc:	f083 0301 	eor.w	r3, r3, #1
 8022ae0:	b2db      	uxtb	r3, r3
 8022ae2:	2b00      	cmp	r3, #0
 8022ae4:	d001      	beq.n	8022aea <_ZN6Logger21StoreAccelPositionLogEv+0xe2>
 8022ae6:	2330      	movs	r3, #48	; 0x30
 8022ae8:	e015      	b.n	8022b16 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &decel, 1)) return 0x40;
 8022aea:	687b      	ldr	r3, [r7, #4]
 8022aec:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022af0:	f107 020e 	add.w	r2, r7, #14
 8022af4:	2301      	movs	r3, #1
 8022af6:	6939      	ldr	r1, [r7, #16]
 8022af8:	f7fe fa3e 	bl	8020f78 <_ZN5Flash10StoreUint8EmPhm>
 8022afc:	4603      	mov	r3, r0
 8022afe:	f083 0301 	eor.w	r3, r3, #1
 8022b02:	b2db      	uxtb	r3, r3
 8022b04:	2b00      	cmp	r3, #0
 8022b06:	d001      	beq.n	8022b0c <_ZN6Logger21StoreAccelPositionLogEv+0x104>
 8022b08:	2340      	movs	r3, #64	; 0x40
 8022b0a:	e004      	b.n	8022b16 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 8022b0c:	7dfb      	ldrb	r3, [r7, #23]
 8022b0e:	3301      	adds	r3, #1
 8022b10:	75fb      	strb	r3, [r7, #23]
 8022b12:	e7c7      	b.n	8022aa4 <_ZN6Logger21StoreAccelPositionLogEv+0x9c>
    }
    
    return 0;
 8022b14:	2300      	movs	r3, #0
}
 8022b16:	4618      	mov	r0, r3
 8022b18:	3718      	adds	r7, #24
 8022b1a:	46bd      	mov	sp, r7
 8022b1c:	bd80      	pop	{r7, pc}
	...

08022b20 <_ZN6Logger7LoadingEv>:

void Logger::Loading()
{
 8022b20:	b580      	push	{r7, lr}
 8022b22:	b08c      	sub	sp, #48	; 0x30
 8022b24:	af00      	add	r7, sp, #0
 8022b26:	6078      	str	r0, [r7, #4]
    float distance = encoder.GetDistanceStack();
 8022b28:	687b      	ldr	r3, [r7, #4]
 8022b2a:	33e8      	adds	r3, #232	; 0xe8
 8022b2c:	4618      	mov	r0, r3
 8022b2e:	f7fe f9c0 	bl	8020eb2 <_ZN7Encoder16GetDistanceStackEv>
 8022b32:	ed87 0a08 	vstr	s0, [r7, #32]

    if(distance < LOGGING_CONST_DISTANCE) return;
 8022b36:	edd7 7a08 	vldr	s15, [r7, #32]
 8022b3a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b46:	f100 8299 	bmi.w	802307c <_ZN6Logger7LoadingEv+0x55c>
    encoder.ResetDistanceStack();
 8022b4a:	687b      	ldr	r3, [r7, #4]
 8022b4c:	33e8      	adds	r3, #232	; 0xe8
 8022b4e:	4618      	mov	r0, r3
 8022b50:	f7fe f992 	bl	8020e78 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0;

    /* Load curvature radius */
    float log_distance = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_A));
 8022b54:	4bad      	ldr	r3, [pc, #692]	; (8022e0c <_ZN6Logger7LoadingEv+0x2ec>)
 8022b56:	881b      	ldrh	r3, [r3, #0]
 8022b58:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022b5c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8022b60:	681b      	ldr	r3, [r3, #0]
 8022b62:	61fb      	str	r3, [r7, #28]
    float log_radian = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_B));
 8022b64:	4ba9      	ldr	r3, [pc, #676]	; (8022e0c <_ZN6Logger7LoadingEv+0x2ec>)
 8022b66:	881b      	ldrh	r3, [r3, #0]
 8022b68:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022b6c:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8022b70:	681b      	ldr	r3, [r3, #0]
 8022b72:	61bb      	str	r3, [r7, #24]
    float radius = log_distance / log_radian;
 8022b74:	edd7 6a07 	vldr	s13, [r7, #28]
 8022b78:	ed97 7a06 	vldr	s14, [r7, #24]
 8022b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022b80:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Load correction position */
    uint16_t log_various = *(reinterpret_cast<uint16_t*>(now_address + HEAD_ADDRESS_BLOCK_C));
 8022b84:	4ba1      	ldr	r3, [pc, #644]	; (8022e0c <_ZN6Logger7LoadingEv+0x2ec>)
 8022b86:	881b      	ldrh	r3, [r3, #0]
 8022b88:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022b8c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8022b90:	881b      	ldrh	r3, [r3, #0]
 8022b92:	827b      	strh	r3, [r7, #18]
    bool log_corner = false, log_corner_pass = false;
 8022b94:	2300      	movs	r3, #0
 8022b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8022b9a:	2300      	movs	r3, #0
 8022b9c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    bool log_cross = false, log_cross_pass = false;
 8022ba0:	2300      	movs	r3, #0
 8022ba2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8022ba6:	2300      	movs	r3, #0
 8022ba8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    if((log_various & 0x0002) == 0x0002) log_corner = true;
 8022bac:	8a7b      	ldrh	r3, [r7, #18]
 8022bae:	f003 0302 	and.w	r3, r3, #2
 8022bb2:	2b00      	cmp	r3, #0
 8022bb4:	d002      	beq.n	8022bbc <_ZN6Logger7LoadingEv+0x9c>
 8022bb6:	2301      	movs	r3, #1
 8022bb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if((log_various & 0x0001) == 0x0001) log_cross = true;
 8022bbc:	8a7b      	ldrh	r3, [r7, #18]
 8022bbe:	f003 0301 	and.w	r3, r3, #1
 8022bc2:	2b00      	cmp	r3, #0
 8022bc4:	d002      	beq.n	8022bcc <_ZN6Logger7LoadingEv+0xac>
 8022bc6:	2301      	movs	r3, #1
 8022bc8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    /* Get correction position */
    bool run_corner = false, run_corner_pass = false;
 8022bcc:	2300      	movs	r3, #0
 8022bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022bd2:	2300      	movs	r3, #0
 8022bd4:	747b      	strb	r3, [r7, #17]
    bool run_cross = false, run_cross_pass = false;
 8022bd6:	2300      	movs	r3, #0
 8022bd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8022bdc:	2300      	movs	r3, #0
 8022bde:	743b      	strb	r3, [r7, #16]
    uint8_t corner = side_sensor.GetCornerMarkerCount();
 8022be0:	687b      	ldr	r3, [r7, #4]
 8022be2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022be6:	4618      	mov	r0, r3
 8022be8:	f001 fd76 	bl	80246d8 <_ZN10SideSensor20GetCornerMarkerCountEv>
 8022bec:	4603      	mov	r3, r0
 8022bee:	73fb      	strb	r3, [r7, #15]
    uint8_t cross = side_sensor.GetCrossLineCount();
 8022bf0:	687b      	ldr	r3, [r7, #4]
 8022bf2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022bf6:	4618      	mov	r0, r3
 8022bf8:	f001 fd7a 	bl	80246f0 <_ZN10SideSensor17GetCrossLineCountEv>
 8022bfc:	4603      	mov	r3, r0
 8022bfe:	73bb      	strb	r3, [r7, #14]
    static uint8_t pre_corner = corner;
 8022c00:	4b83      	ldr	r3, [pc, #524]	; (8022e10 <_ZN6Logger7LoadingEv+0x2f0>)
 8022c02:	781b      	ldrb	r3, [r3, #0]
 8022c04:	f3bf 8f5b 	dmb	ish
 8022c08:	b2db      	uxtb	r3, r3
 8022c0a:	f003 0301 	and.w	r3, r3, #1
 8022c0e:	2b00      	cmp	r3, #0
 8022c10:	bf0c      	ite	eq
 8022c12:	2301      	moveq	r3, #1
 8022c14:	2300      	movne	r3, #0
 8022c16:	b2db      	uxtb	r3, r3
 8022c18:	2b00      	cmp	r3, #0
 8022c1a:	d010      	beq.n	8022c3e <_ZN6Logger7LoadingEv+0x11e>
 8022c1c:	487c      	ldr	r0, [pc, #496]	; (8022e10 <_ZN6Logger7LoadingEv+0x2f0>)
 8022c1e:	f007 fa5f 	bl	802a0e0 <__cxa_guard_acquire>
 8022c22:	4603      	mov	r3, r0
 8022c24:	2b00      	cmp	r3, #0
 8022c26:	bf14      	ite	ne
 8022c28:	2301      	movne	r3, #1
 8022c2a:	2300      	moveq	r3, #0
 8022c2c:	b2db      	uxtb	r3, r3
 8022c2e:	2b00      	cmp	r3, #0
 8022c30:	d005      	beq.n	8022c3e <_ZN6Logger7LoadingEv+0x11e>
 8022c32:	4a78      	ldr	r2, [pc, #480]	; (8022e14 <_ZN6Logger7LoadingEv+0x2f4>)
 8022c34:	7bfb      	ldrb	r3, [r7, #15]
 8022c36:	7013      	strb	r3, [r2, #0]
 8022c38:	4875      	ldr	r0, [pc, #468]	; (8022e10 <_ZN6Logger7LoadingEv+0x2f0>)
 8022c3a:	f007 fa5d 	bl	802a0f8 <__cxa_guard_release>
    static uint8_t pre_cross = cross;
 8022c3e:	4b76      	ldr	r3, [pc, #472]	; (8022e18 <_ZN6Logger7LoadingEv+0x2f8>)
 8022c40:	781b      	ldrb	r3, [r3, #0]
 8022c42:	f3bf 8f5b 	dmb	ish
 8022c46:	b2db      	uxtb	r3, r3
 8022c48:	f003 0301 	and.w	r3, r3, #1
 8022c4c:	2b00      	cmp	r3, #0
 8022c4e:	bf0c      	ite	eq
 8022c50:	2301      	moveq	r3, #1
 8022c52:	2300      	movne	r3, #0
 8022c54:	b2db      	uxtb	r3, r3
 8022c56:	2b00      	cmp	r3, #0
 8022c58:	d010      	beq.n	8022c7c <_ZN6Logger7LoadingEv+0x15c>
 8022c5a:	486f      	ldr	r0, [pc, #444]	; (8022e18 <_ZN6Logger7LoadingEv+0x2f8>)
 8022c5c:	f007 fa40 	bl	802a0e0 <__cxa_guard_acquire>
 8022c60:	4603      	mov	r3, r0
 8022c62:	2b00      	cmp	r3, #0
 8022c64:	bf14      	ite	ne
 8022c66:	2301      	movne	r3, #1
 8022c68:	2300      	moveq	r3, #0
 8022c6a:	b2db      	uxtb	r3, r3
 8022c6c:	2b00      	cmp	r3, #0
 8022c6e:	d005      	beq.n	8022c7c <_ZN6Logger7LoadingEv+0x15c>
 8022c70:	4a6a      	ldr	r2, [pc, #424]	; (8022e1c <_ZN6Logger7LoadingEv+0x2fc>)
 8022c72:	7bbb      	ldrb	r3, [r7, #14]
 8022c74:	7013      	strb	r3, [r2, #0]
 8022c76:	4868      	ldr	r0, [pc, #416]	; (8022e18 <_ZN6Logger7LoadingEv+0x2f8>)
 8022c78:	f007 fa3e 	bl	802a0f8 <__cxa_guard_release>
    static uint8_t straight_cnt = 0;
    bool straight = false;
 8022c7c:	2300      	movs	r3, #0
 8022c7e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA){
 8022c82:	687b      	ldr	r3, [r7, #4]
 8022c84:	33e8      	adds	r3, #232	; 0xe8
 8022c86:	4618      	mov	r0, r3
 8022c88:	f7fe f922 	bl	8020ed0 <_ZN7Encoder15AngularVelocityEv>
 8022c8c:	eef0 7a40 	vmov.f32	s15, s0
 8022c90:	eeb0 0a67 	vmov.f32	s0, s15
 8022c94:	f7ff fb6c 	bl	8022370 <_ZSt4fabsf>
 8022c98:	eeb0 7a40 	vmov.f32	s14, s0
 8022c9c:	eddf 7a60 	vldr	s15, [pc, #384]	; 8022e20 <_ZN6Logger7LoadingEv+0x300>
 8022ca0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ca8:	bf4c      	ite	mi
 8022caa:	2301      	movmi	r3, #1
 8022cac:	2300      	movpl	r3, #0
 8022cae:	b2db      	uxtb	r3, r3
 8022cb0:	2b00      	cmp	r3, #0
 8022cb2:	d00e      	beq.n	8022cd2 <_ZN6Logger7LoadingEv+0x1b2>
        if(straight_cnt <= STRAIGHT_JUDGE_COUNT) straight_cnt++;
 8022cb4:	4b5b      	ldr	r3, [pc, #364]	; (8022e24 <_ZN6Logger7LoadingEv+0x304>)
 8022cb6:	781b      	ldrb	r3, [r3, #0]
 8022cb8:	2b05      	cmp	r3, #5
 8022cba:	d806      	bhi.n	8022cca <_ZN6Logger7LoadingEv+0x1aa>
 8022cbc:	4b59      	ldr	r3, [pc, #356]	; (8022e24 <_ZN6Logger7LoadingEv+0x304>)
 8022cbe:	781b      	ldrb	r3, [r3, #0]
 8022cc0:	3301      	adds	r3, #1
 8022cc2:	b2da      	uxtb	r2, r3
 8022cc4:	4b57      	ldr	r3, [pc, #348]	; (8022e24 <_ZN6Logger7LoadingEv+0x304>)
 8022cc6:	701a      	strb	r2, [r3, #0]
 8022cc8:	e006      	b.n	8022cd8 <_ZN6Logger7LoadingEv+0x1b8>
        else straight = true;
 8022cca:	2301      	movs	r3, #1
 8022ccc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8022cd0:	e002      	b.n	8022cd8 <_ZN6Logger7LoadingEv+0x1b8>
    }else straight_cnt = 0;
 8022cd2:	4b54      	ldr	r3, [pc, #336]	; (8022e24 <_ZN6Logger7LoadingEv+0x304>)
 8022cd4:	2200      	movs	r2, #0
 8022cd6:	701a      	strb	r2, [r3, #0]
    if(corner > pre_corner && straight) run_corner = true;
 8022cd8:	4b4e      	ldr	r3, [pc, #312]	; (8022e14 <_ZN6Logger7LoadingEv+0x2f4>)
 8022cda:	781b      	ldrb	r3, [r3, #0]
 8022cdc:	7bfa      	ldrb	r2, [r7, #15]
 8022cde:	429a      	cmp	r2, r3
 8022ce0:	d906      	bls.n	8022cf0 <_ZN6Logger7LoadingEv+0x1d0>
 8022ce2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8022ce6:	2b00      	cmp	r3, #0
 8022ce8:	d002      	beq.n	8022cf0 <_ZN6Logger7LoadingEv+0x1d0>
 8022cea:	2301      	movs	r3, #1
 8022cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if(cross > pre_cross) run_cross = true;
 8022cf0:	4b4a      	ldr	r3, [pc, #296]	; (8022e1c <_ZN6Logger7LoadingEv+0x2fc>)
 8022cf2:	781b      	ldrb	r3, [r3, #0]
 8022cf4:	7bba      	ldrb	r2, [r7, #14]
 8022cf6:	429a      	cmp	r2, r3
 8022cf8:	d902      	bls.n	8022d00 <_ZN6Logger7LoadingEv+0x1e0>
 8022cfa:	2301      	movs	r3, #1
 8022cfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    pre_corner = corner;
 8022d00:	4a44      	ldr	r2, [pc, #272]	; (8022e14 <_ZN6Logger7LoadingEv+0x2f4>)
 8022d02:	7bfb      	ldrb	r3, [r7, #15]
 8022d04:	7013      	strb	r3, [r2, #0]
    pre_cross = cross;
 8022d06:	4a45      	ldr	r2, [pc, #276]	; (8022e1c <_ZN6Logger7LoadingEv+0x2fc>)
 8022d08:	7bbb      	ldrb	r3, [r7, #14]
 8022d0a:	7013      	strb	r3, [r2, #0]

    /* Position correction at corner marker */
    static uint16_t log_corner_address, run_corner_address;
    static uint8_t log_corner_wait = 0, run_corner_wait = 0;
    if(log_corner == true){
 8022d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8022d10:	2b00      	cmp	r3, #0
 8022d12:	d01f      	beq.n	8022d54 <_ZN6Logger7LoadingEv+0x234>
        if(run_corner_pass == true){
 8022d14:	7c7b      	ldrb	r3, [r7, #17]
 8022d16:	2b00      	cmp	r3, #0
 8022d18:	d011      	beq.n	8022d3e <_ZN6Logger7LoadingEv+0x21e>
            now_address += now_address - run_corner_address;
 8022d1a:	4b3c      	ldr	r3, [pc, #240]	; (8022e0c <_ZN6Logger7LoadingEv+0x2ec>)
 8022d1c:	881a      	ldrh	r2, [r3, #0]
 8022d1e:	4b42      	ldr	r3, [pc, #264]	; (8022e28 <_ZN6Logger7LoadingEv+0x308>)
 8022d20:	881b      	ldrh	r3, [r3, #0]
 8022d22:	1ad3      	subs	r3, r2, r3
 8022d24:	b29a      	uxth	r2, r3
 8022d26:	4b39      	ldr	r3, [pc, #228]	; (8022e0c <_ZN6Logger7LoadingEv+0x2ec>)
 8022d28:	881b      	ldrh	r3, [r3, #0]
 8022d2a:	4413      	add	r3, r2
 8022d2c:	b29a      	uxth	r2, r3
 8022d2e:	4b37      	ldr	r3, [pc, #220]	; (8022e0c <_ZN6Logger7LoadingEv+0x2ec>)
 8022d30:	801a      	strh	r2, [r3, #0]
            run_corner_wait = 0;
 8022d32:	4b3e      	ldr	r3, [pc, #248]	; (8022e2c <_ZN6Logger7LoadingEv+0x30c>)
 8022d34:	2200      	movs	r2, #0
 8022d36:	701a      	strb	r2, [r3, #0]
            run_corner_pass = false;
 8022d38:	2300      	movs	r3, #0
 8022d3a:	747b      	strb	r3, [r7, #17]
 8022d3c:	e017      	b.n	8022d6e <_ZN6Logger7LoadingEv+0x24e>
        }else{
            log_corner_address = now_address;
 8022d3e:	4b33      	ldr	r3, [pc, #204]	; (8022e0c <_ZN6Logger7LoadingEv+0x2ec>)
 8022d40:	881a      	ldrh	r2, [r3, #0]
 8022d42:	4b3b      	ldr	r3, [pc, #236]	; (8022e30 <_ZN6Logger7LoadingEv+0x310>)
 8022d44:	801a      	strh	r2, [r3, #0]
            log_corner_pass = true;
 8022d46:	2301      	movs	r3, #1
 8022d48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            log_corner_wait = CORRECTION_WAIT_COUNT;
 8022d4c:	4b39      	ldr	r3, [pc, #228]	; (8022e34 <_ZN6Logger7LoadingEv+0x314>)
 8022d4e:	2203      	movs	r2, #3
 8022d50:	701a      	strb	r2, [r3, #0]
 8022d52:	e00c      	b.n	8022d6e <_ZN6Logger7LoadingEv+0x24e>
        }
    }else{
        if(run_corner_wait > 0) run_corner_wait--;
 8022d54:	4b35      	ldr	r3, [pc, #212]	; (8022e2c <_ZN6Logger7LoadingEv+0x30c>)
 8022d56:	781b      	ldrb	r3, [r3, #0]
 8022d58:	2b00      	cmp	r3, #0
 8022d5a:	d006      	beq.n	8022d6a <_ZN6Logger7LoadingEv+0x24a>
 8022d5c:	4b33      	ldr	r3, [pc, #204]	; (8022e2c <_ZN6Logger7LoadingEv+0x30c>)
 8022d5e:	781b      	ldrb	r3, [r3, #0]
 8022d60:	3b01      	subs	r3, #1
 8022d62:	b2da      	uxtb	r2, r3
 8022d64:	4b31      	ldr	r3, [pc, #196]	; (8022e2c <_ZN6Logger7LoadingEv+0x30c>)
 8022d66:	701a      	strb	r2, [r3, #0]
 8022d68:	e001      	b.n	8022d6e <_ZN6Logger7LoadingEv+0x24e>
        else run_corner_pass = false;
 8022d6a:	2300      	movs	r3, #0
 8022d6c:	747b      	strb	r3, [r7, #17]
    }
    if(run_corner == true){
 8022d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8022d72:	2b00      	cmp	r3, #0
 8022d74:	d018      	beq.n	8022da8 <_ZN6Logger7LoadingEv+0x288>
        if(log_corner_pass == true){
 8022d76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8022d7a:	2b00      	cmp	r3, #0
 8022d7c:	d00a      	beq.n	8022d94 <_ZN6Logger7LoadingEv+0x274>
            now_address = log_corner_address;
 8022d7e:	4b2c      	ldr	r3, [pc, #176]	; (8022e30 <_ZN6Logger7LoadingEv+0x310>)
 8022d80:	881a      	ldrh	r2, [r3, #0]
 8022d82:	4b22      	ldr	r3, [pc, #136]	; (8022e0c <_ZN6Logger7LoadingEv+0x2ec>)
 8022d84:	801a      	strh	r2, [r3, #0]
            log_corner_wait = 0;
 8022d86:	4b2b      	ldr	r3, [pc, #172]	; (8022e34 <_ZN6Logger7LoadingEv+0x314>)
 8022d88:	2200      	movs	r2, #0
 8022d8a:	701a      	strb	r2, [r3, #0]
            log_corner_pass = false;
 8022d8c:	2300      	movs	r3, #0
 8022d8e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8022d92:	e017      	b.n	8022dc4 <_ZN6Logger7LoadingEv+0x2a4>
        }else{
            run_corner_address = now_address;
 8022d94:	4b1d      	ldr	r3, [pc, #116]	; (8022e0c <_ZN6Logger7LoadingEv+0x2ec>)
 8022d96:	881a      	ldrh	r2, [r3, #0]
 8022d98:	4b23      	ldr	r3, [pc, #140]	; (8022e28 <_ZN6Logger7LoadingEv+0x308>)
 8022d9a:	801a      	strh	r2, [r3, #0]
            run_corner_pass = true;
 8022d9c:	2301      	movs	r3, #1
 8022d9e:	747b      	strb	r3, [r7, #17]
            run_corner_wait = CORRECTION_WAIT_COUNT;
 8022da0:	4b22      	ldr	r3, [pc, #136]	; (8022e2c <_ZN6Logger7LoadingEv+0x30c>)
 8022da2:	2203      	movs	r2, #3
 8022da4:	701a      	strb	r2, [r3, #0]
 8022da6:	e00d      	b.n	8022dc4 <_ZN6Logger7LoadingEv+0x2a4>
        }
    }else{
        if(log_corner_wait > 0) log_corner_wait--;
 8022da8:	4b22      	ldr	r3, [pc, #136]	; (8022e34 <_ZN6Logger7LoadingEv+0x314>)
 8022daa:	781b      	ldrb	r3, [r3, #0]
 8022dac:	2b00      	cmp	r3, #0
 8022dae:	d006      	beq.n	8022dbe <_ZN6Logger7LoadingEv+0x29e>
 8022db0:	4b20      	ldr	r3, [pc, #128]	; (8022e34 <_ZN6Logger7LoadingEv+0x314>)
 8022db2:	781b      	ldrb	r3, [r3, #0]
 8022db4:	3b01      	subs	r3, #1
 8022db6:	b2da      	uxtb	r2, r3
 8022db8:	4b1e      	ldr	r3, [pc, #120]	; (8022e34 <_ZN6Logger7LoadingEv+0x314>)
 8022dba:	701a      	strb	r2, [r3, #0]
 8022dbc:	e002      	b.n	8022dc4 <_ZN6Logger7LoadingEv+0x2a4>
        else log_corner_pass = false;
 8022dbe:	2300      	movs	r3, #0
 8022dc0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    /* Position correction at cross line */
    static uint16_t log_cross_address, run_cross_address;
    static uint8_t log_cross_wait = 0, run_cross_wait = 0;
    if(log_cross == true){
 8022dc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	d03d      	beq.n	8022e48 <_ZN6Logger7LoadingEv+0x328>
        if(run_cross_pass == true){
 8022dcc:	7c3b      	ldrb	r3, [r7, #16]
 8022dce:	2b00      	cmp	r3, #0
 8022dd0:	d011      	beq.n	8022df6 <_ZN6Logger7LoadingEv+0x2d6>
            now_address += now_address - run_cross_address;
 8022dd2:	4b0e      	ldr	r3, [pc, #56]	; (8022e0c <_ZN6Logger7LoadingEv+0x2ec>)
 8022dd4:	881a      	ldrh	r2, [r3, #0]
 8022dd6:	4b18      	ldr	r3, [pc, #96]	; (8022e38 <_ZN6Logger7LoadingEv+0x318>)
 8022dd8:	881b      	ldrh	r3, [r3, #0]
 8022dda:	1ad3      	subs	r3, r2, r3
 8022ddc:	b29a      	uxth	r2, r3
 8022dde:	4b0b      	ldr	r3, [pc, #44]	; (8022e0c <_ZN6Logger7LoadingEv+0x2ec>)
 8022de0:	881b      	ldrh	r3, [r3, #0]
 8022de2:	4413      	add	r3, r2
 8022de4:	b29a      	uxth	r2, r3
 8022de6:	4b09      	ldr	r3, [pc, #36]	; (8022e0c <_ZN6Logger7LoadingEv+0x2ec>)
 8022de8:	801a      	strh	r2, [r3, #0]
            run_cross_wait = 0;
 8022dea:	4b14      	ldr	r3, [pc, #80]	; (8022e3c <_ZN6Logger7LoadingEv+0x31c>)
 8022dec:	2200      	movs	r2, #0
 8022dee:	701a      	strb	r2, [r3, #0]
            run_cross_pass = false;
 8022df0:	2300      	movs	r3, #0
 8022df2:	743b      	strb	r3, [r7, #16]
 8022df4:	e035      	b.n	8022e62 <_ZN6Logger7LoadingEv+0x342>
        }else{
            log_cross_address = now_address;
 8022df6:	4b05      	ldr	r3, [pc, #20]	; (8022e0c <_ZN6Logger7LoadingEv+0x2ec>)
 8022df8:	881a      	ldrh	r2, [r3, #0]
 8022dfa:	4b11      	ldr	r3, [pc, #68]	; (8022e40 <_ZN6Logger7LoadingEv+0x320>)
 8022dfc:	801a      	strh	r2, [r3, #0]
            log_cross_pass = true;
 8022dfe:	2301      	movs	r3, #1
 8022e00:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            log_cross_wait = CORRECTION_WAIT_COUNT;
 8022e04:	4b0f      	ldr	r3, [pc, #60]	; (8022e44 <_ZN6Logger7LoadingEv+0x324>)
 8022e06:	2203      	movs	r2, #3
 8022e08:	701a      	strb	r2, [r3, #0]
 8022e0a:	e02a      	b.n	8022e62 <_ZN6Logger7LoadingEv+0x342>
 8022e0c:	20000098 	.word	0x20000098
 8022e10:	2000009c 	.word	0x2000009c
 8022e14:	2000009a 	.word	0x2000009a
 8022e18:	200000a4 	.word	0x200000a4
 8022e1c:	200000a0 	.word	0x200000a0
 8022e20:	43ca0000 	.word	0x43ca0000
 8022e24:	200000a8 	.word	0x200000a8
 8022e28:	200000ac 	.word	0x200000ac
 8022e2c:	200000af 	.word	0x200000af
 8022e30:	200000aa 	.word	0x200000aa
 8022e34:	200000ae 	.word	0x200000ae
 8022e38:	200000b2 	.word	0x200000b2
 8022e3c:	200000b5 	.word	0x200000b5
 8022e40:	200000b0 	.word	0x200000b0
 8022e44:	200000b4 	.word	0x200000b4
        }
    }else{
        if(run_cross_wait > 0) run_cross_wait--;
 8022e48:	4b8e      	ldr	r3, [pc, #568]	; (8023084 <_ZN6Logger7LoadingEv+0x564>)
 8022e4a:	781b      	ldrb	r3, [r3, #0]
 8022e4c:	2b00      	cmp	r3, #0
 8022e4e:	d006      	beq.n	8022e5e <_ZN6Logger7LoadingEv+0x33e>
 8022e50:	4b8c      	ldr	r3, [pc, #560]	; (8023084 <_ZN6Logger7LoadingEv+0x564>)
 8022e52:	781b      	ldrb	r3, [r3, #0]
 8022e54:	3b01      	subs	r3, #1
 8022e56:	b2da      	uxtb	r2, r3
 8022e58:	4b8a      	ldr	r3, [pc, #552]	; (8023084 <_ZN6Logger7LoadingEv+0x564>)
 8022e5a:	701a      	strb	r2, [r3, #0]
 8022e5c:	e001      	b.n	8022e62 <_ZN6Logger7LoadingEv+0x342>
        else run_cross_pass = false;
 8022e5e:	2300      	movs	r3, #0
 8022e60:	743b      	strb	r3, [r7, #16]
    }
    if(run_cross == true){
 8022e62:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8022e66:	2b00      	cmp	r3, #0
 8022e68:	d018      	beq.n	8022e9c <_ZN6Logger7LoadingEv+0x37c>
        if(log_cross_pass == true){
 8022e6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8022e6e:	2b00      	cmp	r3, #0
 8022e70:	d00a      	beq.n	8022e88 <_ZN6Logger7LoadingEv+0x368>
            now_address = log_cross_address;
 8022e72:	4b85      	ldr	r3, [pc, #532]	; (8023088 <_ZN6Logger7LoadingEv+0x568>)
 8022e74:	881a      	ldrh	r2, [r3, #0]
 8022e76:	4b85      	ldr	r3, [pc, #532]	; (802308c <_ZN6Logger7LoadingEv+0x56c>)
 8022e78:	801a      	strh	r2, [r3, #0]
            log_cross_wait = 0;
 8022e7a:	4b85      	ldr	r3, [pc, #532]	; (8023090 <_ZN6Logger7LoadingEv+0x570>)
 8022e7c:	2200      	movs	r2, #0
 8022e7e:	701a      	strb	r2, [r3, #0]
            log_cross_pass = false;
 8022e80:	2300      	movs	r3, #0
 8022e82:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8022e86:	e017      	b.n	8022eb8 <_ZN6Logger7LoadingEv+0x398>
        }else{
            run_cross_address = now_address;
 8022e88:	4b80      	ldr	r3, [pc, #512]	; (802308c <_ZN6Logger7LoadingEv+0x56c>)
 8022e8a:	881a      	ldrh	r2, [r3, #0]
 8022e8c:	4b81      	ldr	r3, [pc, #516]	; (8023094 <_ZN6Logger7LoadingEv+0x574>)
 8022e8e:	801a      	strh	r2, [r3, #0]
            run_cross_pass = true;
 8022e90:	2301      	movs	r3, #1
 8022e92:	743b      	strb	r3, [r7, #16]
            run_cross_wait = CORRECTION_WAIT_COUNT;
 8022e94:	4b7b      	ldr	r3, [pc, #492]	; (8023084 <_ZN6Logger7LoadingEv+0x564>)
 8022e96:	2203      	movs	r2, #3
 8022e98:	701a      	strb	r2, [r3, #0]
 8022e9a:	e00d      	b.n	8022eb8 <_ZN6Logger7LoadingEv+0x398>
        }
    }else{
        if(log_cross_wait > 0) log_cross_wait--;
 8022e9c:	4b7c      	ldr	r3, [pc, #496]	; (8023090 <_ZN6Logger7LoadingEv+0x570>)
 8022e9e:	781b      	ldrb	r3, [r3, #0]
 8022ea0:	2b00      	cmp	r3, #0
 8022ea2:	d006      	beq.n	8022eb2 <_ZN6Logger7LoadingEv+0x392>
 8022ea4:	4b7a      	ldr	r3, [pc, #488]	; (8023090 <_ZN6Logger7LoadingEv+0x570>)
 8022ea6:	781b      	ldrb	r3, [r3, #0]
 8022ea8:	3b01      	subs	r3, #1
 8022eaa:	b2da      	uxtb	r2, r3
 8022eac:	4b78      	ldr	r3, [pc, #480]	; (8023090 <_ZN6Logger7LoadingEv+0x570>)
 8022eae:	701a      	strb	r2, [r3, #0]
 8022eb0:	e002      	b.n	8022eb8 <_ZN6Logger7LoadingEv+0x398>
        else log_cross_pass = false;
 8022eb2:	2300      	movs	r3, #0
 8022eb4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    /* Accel straight */
    uint8_t accel_step = *(reinterpret_cast<uint8_t*>(now_address + HEAD_ADDRESS_BLOCK_D));
 8022eb8:	4b74      	ldr	r3, [pc, #464]	; (802308c <_ZN6Logger7LoadingEv+0x56c>)
 8022eba:	881b      	ldrh	r3, [r3, #0]
 8022ebc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022ec0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022ec4:	781b      	ldrb	r3, [r3, #0]
 8022ec6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(!straight) accel_step = 0x10;
 8022eca:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8022ece:	f083 0301 	eor.w	r3, r3, #1
 8022ed2:	b2db      	uxtb	r3, r3
 8022ed4:	2b00      	cmp	r3, #0
 8022ed6:	d002      	beq.n	8022ede <_ZN6Logger7LoadingEv+0x3be>
 8022ed8:	2310      	movs	r3, #16
 8022eda:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    float target = MIN_VELOCITY;
 8022ede:	4b6e      	ldr	r3, [pc, #440]	; (8023098 <_ZN6Logger7LoadingEv+0x578>)
 8022ee0:	627b      	str	r3, [r7, #36]	; 0x24
    static float pre_target = MIN_VELOCITY;
    switch(accel_step){
 8022ee2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8022ee6:	3b01      	subs	r3, #1
 8022ee8:	2b4f      	cmp	r3, #79	; 0x4f
 8022eea:	f200 80b5 	bhi.w	8023058 <_ZN6Logger7LoadingEv+0x538>
 8022eee:	a201      	add	r2, pc, #4	; (adr r2, 8022ef4 <_ZN6Logger7LoadingEv+0x3d4>)
 8022ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022ef4:	0802303b 	.word	0x0802303b
 8022ef8:	08023041 	.word	0x08023041
 8022efc:	08023047 	.word	0x08023047
 8022f00:	0802304d 	.word	0x0802304d
 8022f04:	08023053 	.word	0x08023053
 8022f08:	08023059 	.word	0x08023059
 8022f0c:	08023059 	.word	0x08023059
 8022f10:	08023059 	.word	0x08023059
 8022f14:	08023059 	.word	0x08023059
 8022f18:	08023059 	.word	0x08023059
 8022f1c:	08023059 	.word	0x08023059
 8022f20:	08023059 	.word	0x08023059
 8022f24:	08023059 	.word	0x08023059
 8022f28:	08023059 	.word	0x08023059
 8022f2c:	08023059 	.word	0x08023059
 8022f30:	08023035 	.word	0x08023035
 8022f34:	08023059 	.word	0x08023059
 8022f38:	08023059 	.word	0x08023059
 8022f3c:	08023059 	.word	0x08023059
 8022f40:	08023059 	.word	0x08023059
 8022f44:	08023059 	.word	0x08023059
 8022f48:	08023059 	.word	0x08023059
 8022f4c:	08023059 	.word	0x08023059
 8022f50:	08023059 	.word	0x08023059
 8022f54:	08023059 	.word	0x08023059
 8022f58:	08023059 	.word	0x08023059
 8022f5c:	08023059 	.word	0x08023059
 8022f60:	08023059 	.word	0x08023059
 8022f64:	08023059 	.word	0x08023059
 8022f68:	08023059 	.word	0x08023059
 8022f6c:	08023059 	.word	0x08023059
 8022f70:	0802303b 	.word	0x0802303b
 8022f74:	08023059 	.word	0x08023059
 8022f78:	08023059 	.word	0x08023059
 8022f7c:	08023059 	.word	0x08023059
 8022f80:	08023059 	.word	0x08023059
 8022f84:	08023059 	.word	0x08023059
 8022f88:	08023059 	.word	0x08023059
 8022f8c:	08023059 	.word	0x08023059
 8022f90:	08023059 	.word	0x08023059
 8022f94:	08023059 	.word	0x08023059
 8022f98:	08023059 	.word	0x08023059
 8022f9c:	08023059 	.word	0x08023059
 8022fa0:	08023059 	.word	0x08023059
 8022fa4:	08023059 	.word	0x08023059
 8022fa8:	08023059 	.word	0x08023059
 8022fac:	08023059 	.word	0x08023059
 8022fb0:	08023041 	.word	0x08023041
 8022fb4:	08023059 	.word	0x08023059
 8022fb8:	08023059 	.word	0x08023059
 8022fbc:	08023059 	.word	0x08023059
 8022fc0:	08023059 	.word	0x08023059
 8022fc4:	08023059 	.word	0x08023059
 8022fc8:	08023059 	.word	0x08023059
 8022fcc:	08023059 	.word	0x08023059
 8022fd0:	08023059 	.word	0x08023059
 8022fd4:	08023059 	.word	0x08023059
 8022fd8:	08023059 	.word	0x08023059
 8022fdc:	08023059 	.word	0x08023059
 8022fe0:	08023059 	.word	0x08023059
 8022fe4:	08023059 	.word	0x08023059
 8022fe8:	08023059 	.word	0x08023059
 8022fec:	08023059 	.word	0x08023059
 8022ff0:	08023047 	.word	0x08023047
 8022ff4:	08023059 	.word	0x08023059
 8022ff8:	08023059 	.word	0x08023059
 8022ffc:	08023059 	.word	0x08023059
 8023000:	08023059 	.word	0x08023059
 8023004:	08023059 	.word	0x08023059
 8023008:	08023059 	.word	0x08023059
 802300c:	08023059 	.word	0x08023059
 8023010:	08023059 	.word	0x08023059
 8023014:	08023059 	.word	0x08023059
 8023018:	08023059 	.word	0x08023059
 802301c:	08023059 	.word	0x08023059
 8023020:	08023059 	.word	0x08023059
 8023024:	08023059 	.word	0x08023059
 8023028:	08023059 	.word	0x08023059
 802302c:	08023059 	.word	0x08023059
 8023030:	0802304d 	.word	0x0802304d
        case 0x10: target = MIN_VELOCITY; break;
 8023034:	4b18      	ldr	r3, [pc, #96]	; (8023098 <_ZN6Logger7LoadingEv+0x578>)
 8023036:	627b      	str	r3, [r7, #36]	; 0x24
 8023038:	e012      	b.n	8023060 <_ZN6Logger7LoadingEv+0x540>
        case 0x01:
        case 0x20: target = MIN_VELOCITY + (ACCEL_VELOCITY * 1); break;
 802303a:	4b18      	ldr	r3, [pc, #96]	; (802309c <_ZN6Logger7LoadingEv+0x57c>)
 802303c:	627b      	str	r3, [r7, #36]	; 0x24
 802303e:	e00f      	b.n	8023060 <_ZN6Logger7LoadingEv+0x540>
        case 0x02:
        case 0x30: target = MIN_VELOCITY + (ACCEL_VELOCITY * 2); break;
 8023040:	4b17      	ldr	r3, [pc, #92]	; (80230a0 <_ZN6Logger7LoadingEv+0x580>)
 8023042:	627b      	str	r3, [r7, #36]	; 0x24
 8023044:	e00c      	b.n	8023060 <_ZN6Logger7LoadingEv+0x540>
        case 0x03:
        case 0x40: target = MIN_VELOCITY + (ACCEL_VELOCITY * 3); break;
 8023046:	4b17      	ldr	r3, [pc, #92]	; (80230a4 <_ZN6Logger7LoadingEv+0x584>)
 8023048:	627b      	str	r3, [r7, #36]	; 0x24
 802304a:	e009      	b.n	8023060 <_ZN6Logger7LoadingEv+0x540>
        case 0x04:
        case 0x50: target = MIN_VELOCITY + (ACCEL_VELOCITY * 4); break;
 802304c:	4b16      	ldr	r3, [pc, #88]	; (80230a8 <_ZN6Logger7LoadingEv+0x588>)
 802304e:	627b      	str	r3, [r7, #36]	; 0x24
 8023050:	e006      	b.n	8023060 <_ZN6Logger7LoadingEv+0x540>
        case 0x05: target = MIN_VELOCITY + (ACCEL_VELOCITY * 5); break;
 8023052:	4b16      	ldr	r3, [pc, #88]	; (80230ac <_ZN6Logger7LoadingEv+0x58c>)
 8023054:	627b      	str	r3, [r7, #36]	; 0x24
 8023056:	e003      	b.n	8023060 <_ZN6Logger7LoadingEv+0x540>
        default: target = pre_target; break;
 8023058:	4b15      	ldr	r3, [pc, #84]	; (80230b0 <_ZN6Logger7LoadingEv+0x590>)
 802305a:	681b      	ldr	r3, [r3, #0]
 802305c:	627b      	str	r3, [r7, #36]	; 0x24
 802305e:	bf00      	nop
    }
    pre_target = target;
 8023060:	4a13      	ldr	r2, [pc, #76]	; (80230b0 <_ZN6Logger7LoadingEv+0x590>)
 8023062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023064:	6013      	str	r3, [r2, #0]
    target_velocity_ = target;
 8023066:	687b      	ldr	r3, [r7, #4]
 8023068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802306a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

    now_address++;
 802306e:	4b07      	ldr	r3, [pc, #28]	; (802308c <_ZN6Logger7LoadingEv+0x56c>)
 8023070:	881b      	ldrh	r3, [r3, #0]
 8023072:	3301      	adds	r3, #1
 8023074:	b29a      	uxth	r2, r3
 8023076:	4b05      	ldr	r3, [pc, #20]	; (802308c <_ZN6Logger7LoadingEv+0x56c>)
 8023078:	801a      	strh	r2, [r3, #0]
 802307a:	e000      	b.n	802307e <_ZN6Logger7LoadingEv+0x55e>
    if(distance < LOGGING_CONST_DISTANCE) return;
 802307c:	bf00      	nop
}
 802307e:	3730      	adds	r7, #48	; 0x30
 8023080:	46bd      	mov	sp, r7
 8023082:	bd80      	pop	{r7, pc}
 8023084:	200000b5 	.word	0x200000b5
 8023088:	200000b0 	.word	0x200000b0
 802308c:	20000098 	.word	0x20000098
 8023090:	200000b4 	.word	0x200000b4
 8023094:	200000b2 	.word	0x200000b2
 8023098:	3fa66666 	.word	0x3fa66666
 802309c:	3fe66666 	.word	0x3fe66666
 80230a0:	40133333 	.word	0x40133333
 80230a4:	40333333 	.word	0x40333333
 80230a8:	40533333 	.word	0x40533333
 80230ac:	40733333 	.word	0x40733333
 80230b0:	2000000c 	.word	0x2000000c

080230b4 <_ZN6Logger17GetTargetVelocityEv>:

float Logger::GetTargetVelocity()
{
 80230b4:	b480      	push	{r7}
 80230b6:	b083      	sub	sp, #12
 80230b8:	af00      	add	r7, sp, #0
 80230ba:	6078      	str	r0, [r7, #4]
    return target_velocity_;
 80230bc:	687b      	ldr	r3, [r7, #4]
 80230be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80230c2:	ee07 3a90 	vmov	s15, r3
 80230c6:	eeb0 0a67 	vmov.f32	s0, s15
 80230ca:	370c      	adds	r7, #12
 80230cc:	46bd      	mov	sp, r7
 80230ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230d2:	4770      	bx	lr

080230d4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80230d4:	b580      	push	{r7, lr}
 80230d6:	b082      	sub	sp, #8
 80230d8:	af00      	add	r7, sp, #0
 80230da:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 80230dc:	687b      	ldr	r3, [r7, #4]
 80230de:	681b      	ldr	r3, [r3, #0]
 80230e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80230e4:	d101      	bne.n	80230ea <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 80230e6:	f002 fb5f 	bl	80257a8 <InterruptTim2>
  }
  if(htim->Instance == TIM5)
 80230ea:	687b      	ldr	r3, [r7, #4]
 80230ec:	681b      	ldr	r3, [r3, #0]
 80230ee:	4a0b      	ldr	r2, [pc, #44]	; (802311c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80230f0:	4293      	cmp	r3, r2
 80230f2:	d101      	bne.n	80230f8 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim5();
 80230f4:	f002 faea 	bl	80256cc <InterruptTim5>
  }
  if(htim->Instance == TIM6)
 80230f8:	687b      	ldr	r3, [r7, #4]
 80230fa:	681b      	ldr	r3, [r3, #0]
 80230fc:	4a08      	ldr	r2, [pc, #32]	; (8023120 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80230fe:	4293      	cmp	r3, r2
 8023100:	d101      	bne.n	8023106 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim6();
 8023102:	f002 f84d 	bl	80251a0 <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 8023106:	687b      	ldr	r3, [r7, #4]
 8023108:	681b      	ldr	r3, [r3, #0]
 802310a:	4a06      	ldr	r2, [pc, #24]	; (8023124 <HAL_TIM_PeriodElapsedCallback+0x50>)
 802310c:	4293      	cmp	r3, r2
 802310e:	d101      	bne.n	8023114 <HAL_TIM_PeriodElapsedCallback+0x40>
  {
    InterruptTim7();
 8023110:	f002 f836 	bl	8025180 <InterruptTim7>
  }
}
 8023114:	bf00      	nop
 8023116:	3708      	adds	r7, #8
 8023118:	46bd      	mov	sp, r7
 802311a:	bd80      	pop	{r7, pc}
 802311c:	40000c00 	.word	0x40000c00
 8023120:	40001000 	.word	0x40001000
 8023124:	40001400 	.word	0x40001400

08023128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8023128:	b580      	push	{r7, lr}
 802312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  Init();
 802312c:	f001 ffe0 	bl	80250f0 <Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8023130:	f003 fa3e 	bl	80265b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8023134:	f000 f820 	bl	8023178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8023138:	f000 fd46 	bl	8023bc8 <MX_GPIO_Init>
  MX_ADC1_Init();
 802313c:	f000 f886 	bl	802324c <MX_ADC1_Init>
  MX_I2C2_Init();
 8023140:	f000 f98c 	bl	802345c <MX_I2C2_Init>
  MX_SPI3_Init();
 8023144:	f000 f9b8 	bl	80234b8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8023148:	f000 f9ec 	bl	8023524 <MX_TIM1_Init>
  MX_TIM3_Init();
 802314c:	f000 fac8 	bl	80236e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8023150:	f000 fb40 	bl	80237d4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8023154:	f000 fbe0 	bl	8023918 <MX_TIM6_Init>
  MX_TIM7_Init();
 8023158:	f000 fc14 	bl	8023984 <MX_TIM7_Init>
  MX_TIM8_Init();
 802315c:	f000 fc48 	bl	80239f0 <MX_TIM8_Init>
  MX_TIM11_Init();
 8023160:	f000 fc9e 	bl	8023aa0 <MX_TIM11_Init>
  MX_TIM12_Init();
 8023164:	f000 fcea 	bl	8023b3c <MX_TIM12_Init>
  MX_TIM2_Init();
 8023168:	f000 fa6c 	bl	8023644 <MX_TIM2_Init>
  MX_TIM5_Init();
 802316c:	f000 fb86 	bl	802387c <MX_TIM5_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Loop();
 8023170:	f002 fb78 	bl	8025864 <Loop>
 8023174:	e7fc      	b.n	8023170 <main+0x48>
	...

08023178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8023178:	b580      	push	{r7, lr}
 802317a:	b094      	sub	sp, #80	; 0x50
 802317c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802317e:	f107 0320 	add.w	r3, r7, #32
 8023182:	2230      	movs	r2, #48	; 0x30
 8023184:	2100      	movs	r1, #0
 8023186:	4618      	mov	r0, r3
 8023188:	f006 ffe9 	bl	802a15e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802318c:	f107 030c 	add.w	r3, r7, #12
 8023190:	2200      	movs	r2, #0
 8023192:	601a      	str	r2, [r3, #0]
 8023194:	605a      	str	r2, [r3, #4]
 8023196:	609a      	str	r2, [r3, #8]
 8023198:	60da      	str	r2, [r3, #12]
 802319a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 802319c:	2300      	movs	r3, #0
 802319e:	60bb      	str	r3, [r7, #8]
 80231a0:	4b28      	ldr	r3, [pc, #160]	; (8023244 <SystemClock_Config+0xcc>)
 80231a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231a4:	4a27      	ldr	r2, [pc, #156]	; (8023244 <SystemClock_Config+0xcc>)
 80231a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80231aa:	6413      	str	r3, [r2, #64]	; 0x40
 80231ac:	4b25      	ldr	r3, [pc, #148]	; (8023244 <SystemClock_Config+0xcc>)
 80231ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80231b4:	60bb      	str	r3, [r7, #8]
 80231b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80231b8:	2300      	movs	r3, #0
 80231ba:	607b      	str	r3, [r7, #4]
 80231bc:	4b22      	ldr	r3, [pc, #136]	; (8023248 <SystemClock_Config+0xd0>)
 80231be:	681b      	ldr	r3, [r3, #0]
 80231c0:	4a21      	ldr	r2, [pc, #132]	; (8023248 <SystemClock_Config+0xd0>)
 80231c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80231c6:	6013      	str	r3, [r2, #0]
 80231c8:	4b1f      	ldr	r3, [pc, #124]	; (8023248 <SystemClock_Config+0xd0>)
 80231ca:	681b      	ldr	r3, [r3, #0]
 80231cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80231d0:	607b      	str	r3, [r7, #4]
 80231d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80231d4:	2301      	movs	r3, #1
 80231d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80231d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80231dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80231de:	2302      	movs	r3, #2
 80231e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80231e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80231e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80231e8:	2306      	movs	r3, #6
 80231ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80231ec:	23a8      	movs	r3, #168	; 0xa8
 80231ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80231f0:	2302      	movs	r3, #2
 80231f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80231f4:	2304      	movs	r3, #4
 80231f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80231f8:	f107 0320 	add.w	r3, r7, #32
 80231fc:	4618      	mov	r0, r3
 80231fe:	f004 fdd1 	bl	8027da4 <HAL_RCC_OscConfig>
 8023202:	4603      	mov	r3, r0
 8023204:	2b00      	cmp	r3, #0
 8023206:	d001      	beq.n	802320c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8023208:	f000 fdae 	bl	8023d68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802320c:	230f      	movs	r3, #15
 802320e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8023210:	2302      	movs	r3, #2
 8023212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8023214:	2300      	movs	r3, #0
 8023216:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8023218:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802321c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 802321e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023222:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8023224:	f107 030c 	add.w	r3, r7, #12
 8023228:	2105      	movs	r1, #5
 802322a:	4618      	mov	r0, r3
 802322c:	f005 f82a 	bl	8028284 <HAL_RCC_ClockConfig>
 8023230:	4603      	mov	r3, r0
 8023232:	2b00      	cmp	r3, #0
 8023234:	d001      	beq.n	802323a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8023236:	f000 fd97 	bl	8023d68 <Error_Handler>
  }
}
 802323a:	bf00      	nop
 802323c:	3750      	adds	r7, #80	; 0x50
 802323e:	46bd      	mov	sp, r7
 8023240:	bd80      	pop	{r7, pc}
 8023242:	bf00      	nop
 8023244:	40023800 	.word	0x40023800
 8023248:	40007000 	.word	0x40007000

0802324c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 802324c:	b580      	push	{r7, lr}
 802324e:	b084      	sub	sp, #16
 8023250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8023252:	463b      	mov	r3, r7
 8023254:	2200      	movs	r2, #0
 8023256:	601a      	str	r2, [r3, #0]
 8023258:	605a      	str	r2, [r3, #4]
 802325a:	609a      	str	r2, [r3, #8]
 802325c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 802325e:	4b7c      	ldr	r3, [pc, #496]	; (8023450 <MX_ADC1_Init+0x204>)
 8023260:	4a7c      	ldr	r2, [pc, #496]	; (8023454 <MX_ADC1_Init+0x208>)
 8023262:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8023264:	4b7a      	ldr	r3, [pc, #488]	; (8023450 <MX_ADC1_Init+0x204>)
 8023266:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802326a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 802326c:	4b78      	ldr	r3, [pc, #480]	; (8023450 <MX_ADC1_Init+0x204>)
 802326e:	2200      	movs	r2, #0
 8023270:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8023272:	4b77      	ldr	r3, [pc, #476]	; (8023450 <MX_ADC1_Init+0x204>)
 8023274:	2201      	movs	r2, #1
 8023276:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8023278:	4b75      	ldr	r3, [pc, #468]	; (8023450 <MX_ADC1_Init+0x204>)
 802327a:	2201      	movs	r2, #1
 802327c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 802327e:	4b74      	ldr	r3, [pc, #464]	; (8023450 <MX_ADC1_Init+0x204>)
 8023280:	2200      	movs	r2, #0
 8023282:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8023286:	4b72      	ldr	r3, [pc, #456]	; (8023450 <MX_ADC1_Init+0x204>)
 8023288:	2200      	movs	r2, #0
 802328a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 802328c:	4b70      	ldr	r3, [pc, #448]	; (8023450 <MX_ADC1_Init+0x204>)
 802328e:	4a72      	ldr	r2, [pc, #456]	; (8023458 <MX_ADC1_Init+0x20c>)
 8023290:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8023292:	4b6f      	ldr	r3, [pc, #444]	; (8023450 <MX_ADC1_Init+0x204>)
 8023294:	2200      	movs	r2, #0
 8023296:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8023298:	4b6d      	ldr	r3, [pc, #436]	; (8023450 <MX_ADC1_Init+0x204>)
 802329a:	220e      	movs	r2, #14
 802329c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 802329e:	4b6c      	ldr	r3, [pc, #432]	; (8023450 <MX_ADC1_Init+0x204>)
 80232a0:	2200      	movs	r2, #0
 80232a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80232a6:	4b6a      	ldr	r3, [pc, #424]	; (8023450 <MX_ADC1_Init+0x204>)
 80232a8:	2201      	movs	r2, #1
 80232aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80232ac:	4868      	ldr	r0, [pc, #416]	; (8023450 <MX_ADC1_Init+0x204>)
 80232ae:	f003 fa13 	bl	80266d8 <HAL_ADC_Init>
 80232b2:	4603      	mov	r3, r0
 80232b4:	2b00      	cmp	r3, #0
 80232b6:	d001      	beq.n	80232bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80232b8:	f000 fd56 	bl	8023d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80232bc:	2303      	movs	r3, #3
 80232be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80232c0:	2301      	movs	r3, #1
 80232c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80232c4:	2301      	movs	r3, #1
 80232c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80232c8:	463b      	mov	r3, r7
 80232ca:	4619      	mov	r1, r3
 80232cc:	4860      	ldr	r0, [pc, #384]	; (8023450 <MX_ADC1_Init+0x204>)
 80232ce:	f003 fb57 	bl	8026980 <HAL_ADC_ConfigChannel>
 80232d2:	4603      	mov	r3, r0
 80232d4:	2b00      	cmp	r3, #0
 80232d6:	d001      	beq.n	80232dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80232d8:	f000 fd46 	bl	8023d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80232dc:	2304      	movs	r3, #4
 80232de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80232e0:	2302      	movs	r3, #2
 80232e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80232e4:	463b      	mov	r3, r7
 80232e6:	4619      	mov	r1, r3
 80232e8:	4859      	ldr	r0, [pc, #356]	; (8023450 <MX_ADC1_Init+0x204>)
 80232ea:	f003 fb49 	bl	8026980 <HAL_ADC_ConfigChannel>
 80232ee:	4603      	mov	r3, r0
 80232f0:	2b00      	cmp	r3, #0
 80232f2:	d001      	beq.n	80232f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80232f4:	f000 fd38 	bl	8023d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80232f8:	2305      	movs	r3, #5
 80232fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80232fc:	2303      	movs	r3, #3
 80232fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023300:	463b      	mov	r3, r7
 8023302:	4619      	mov	r1, r3
 8023304:	4852      	ldr	r0, [pc, #328]	; (8023450 <MX_ADC1_Init+0x204>)
 8023306:	f003 fb3b 	bl	8026980 <HAL_ADC_ConfigChannel>
 802330a:	4603      	mov	r3, r0
 802330c:	2b00      	cmp	r3, #0
 802330e:	d001      	beq.n	8023314 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8023310:	f000 fd2a 	bl	8023d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8023314:	2306      	movs	r3, #6
 8023316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8023318:	2304      	movs	r3, #4
 802331a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802331c:	463b      	mov	r3, r7
 802331e:	4619      	mov	r1, r3
 8023320:	484b      	ldr	r0, [pc, #300]	; (8023450 <MX_ADC1_Init+0x204>)
 8023322:	f003 fb2d 	bl	8026980 <HAL_ADC_ConfigChannel>
 8023326:	4603      	mov	r3, r0
 8023328:	2b00      	cmp	r3, #0
 802332a:	d001      	beq.n	8023330 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 802332c:	f000 fd1c 	bl	8023d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8023330:	2307      	movs	r3, #7
 8023332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8023334:	2305      	movs	r3, #5
 8023336:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023338:	463b      	mov	r3, r7
 802333a:	4619      	mov	r1, r3
 802333c:	4844      	ldr	r0, [pc, #272]	; (8023450 <MX_ADC1_Init+0x204>)
 802333e:	f003 fb1f 	bl	8026980 <HAL_ADC_ConfigChannel>
 8023342:	4603      	mov	r3, r0
 8023344:	2b00      	cmp	r3, #0
 8023346:	d001      	beq.n	802334c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8023348:	f000 fd0e 	bl	8023d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 802334c:	230e      	movs	r3, #14
 802334e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8023350:	2306      	movs	r3, #6
 8023352:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023354:	463b      	mov	r3, r7
 8023356:	4619      	mov	r1, r3
 8023358:	483d      	ldr	r0, [pc, #244]	; (8023450 <MX_ADC1_Init+0x204>)
 802335a:	f003 fb11 	bl	8026980 <HAL_ADC_ConfigChannel>
 802335e:	4603      	mov	r3, r0
 8023360:	2b00      	cmp	r3, #0
 8023362:	d001      	beq.n	8023368 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8023364:	f000 fd00 	bl	8023d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8023368:	230f      	movs	r3, #15
 802336a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 802336c:	2307      	movs	r3, #7
 802336e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023370:	463b      	mov	r3, r7
 8023372:	4619      	mov	r1, r3
 8023374:	4836      	ldr	r0, [pc, #216]	; (8023450 <MX_ADC1_Init+0x204>)
 8023376:	f003 fb03 	bl	8026980 <HAL_ADC_ConfigChannel>
 802337a:	4603      	mov	r3, r0
 802337c:	2b00      	cmp	r3, #0
 802337e:	d001      	beq.n	8023384 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8023380:	f000 fcf2 	bl	8023d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8023384:	230a      	movs	r3, #10
 8023386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8023388:	2308      	movs	r3, #8
 802338a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802338c:	463b      	mov	r3, r7
 802338e:	4619      	mov	r1, r3
 8023390:	482f      	ldr	r0, [pc, #188]	; (8023450 <MX_ADC1_Init+0x204>)
 8023392:	f003 faf5 	bl	8026980 <HAL_ADC_ConfigChannel>
 8023396:	4603      	mov	r3, r0
 8023398:	2b00      	cmp	r3, #0
 802339a:	d001      	beq.n	80233a0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 802339c:	f000 fce4 	bl	8023d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80233a0:	230b      	movs	r3, #11
 80233a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80233a4:	2309      	movs	r3, #9
 80233a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80233a8:	463b      	mov	r3, r7
 80233aa:	4619      	mov	r1, r3
 80233ac:	4828      	ldr	r0, [pc, #160]	; (8023450 <MX_ADC1_Init+0x204>)
 80233ae:	f003 fae7 	bl	8026980 <HAL_ADC_ConfigChannel>
 80233b2:	4603      	mov	r3, r0
 80233b4:	2b00      	cmp	r3, #0
 80233b6:	d001      	beq.n	80233bc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80233b8:	f000 fcd6 	bl	8023d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80233bc:	230c      	movs	r3, #12
 80233be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80233c0:	230a      	movs	r3, #10
 80233c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80233c4:	463b      	mov	r3, r7
 80233c6:	4619      	mov	r1, r3
 80233c8:	4821      	ldr	r0, [pc, #132]	; (8023450 <MX_ADC1_Init+0x204>)
 80233ca:	f003 fad9 	bl	8026980 <HAL_ADC_ConfigChannel>
 80233ce:	4603      	mov	r3, r0
 80233d0:	2b00      	cmp	r3, #0
 80233d2:	d001      	beq.n	80233d8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80233d4:	f000 fcc8 	bl	8023d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80233d8:	230d      	movs	r3, #13
 80233da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80233dc:	230b      	movs	r3, #11
 80233de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80233e0:	463b      	mov	r3, r7
 80233e2:	4619      	mov	r1, r3
 80233e4:	481a      	ldr	r0, [pc, #104]	; (8023450 <MX_ADC1_Init+0x204>)
 80233e6:	f003 facb 	bl	8026980 <HAL_ADC_ConfigChannel>
 80233ea:	4603      	mov	r3, r0
 80233ec:	2b00      	cmp	r3, #0
 80233ee:	d001      	beq.n	80233f4 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80233f0:	f000 fcba 	bl	8023d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80233f4:	2302      	movs	r3, #2
 80233f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80233f8:	230c      	movs	r3, #12
 80233fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80233fc:	463b      	mov	r3, r7
 80233fe:	4619      	mov	r1, r3
 8023400:	4813      	ldr	r0, [pc, #76]	; (8023450 <MX_ADC1_Init+0x204>)
 8023402:	f003 fabd 	bl	8026980 <HAL_ADC_ConfigChannel>
 8023406:	4603      	mov	r3, r0
 8023408:	2b00      	cmp	r3, #0
 802340a:	d001      	beq.n	8023410 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 802340c:	f000 fcac 	bl	8023d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8023410:	2301      	movs	r3, #1
 8023412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8023414:	230d      	movs	r3, #13
 8023416:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023418:	463b      	mov	r3, r7
 802341a:	4619      	mov	r1, r3
 802341c:	480c      	ldr	r0, [pc, #48]	; (8023450 <MX_ADC1_Init+0x204>)
 802341e:	f003 faaf 	bl	8026980 <HAL_ADC_ConfigChannel>
 8023422:	4603      	mov	r3, r0
 8023424:	2b00      	cmp	r3, #0
 8023426:	d001      	beq.n	802342c <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8023428:	f000 fc9e 	bl	8023d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 802342c:	2300      	movs	r3, #0
 802342e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8023430:	230e      	movs	r3, #14
 8023432:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023434:	463b      	mov	r3, r7
 8023436:	4619      	mov	r1, r3
 8023438:	4805      	ldr	r0, [pc, #20]	; (8023450 <MX_ADC1_Init+0x204>)
 802343a:	f003 faa1 	bl	8026980 <HAL_ADC_ConfigChannel>
 802343e:	4603      	mov	r3, r0
 8023440:	2b00      	cmp	r3, #0
 8023442:	d001      	beq.n	8023448 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8023444:	f000 fc90 	bl	8023d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8023448:	bf00      	nop
 802344a:	3710      	adds	r7, #16
 802344c:	46bd      	mov	sp, r7
 802344e:	bd80      	pop	{r7, pc}
 8023450:	20000964 	.word	0x20000964
 8023454:	40012000 	.word	0x40012000
 8023458:	0f000001 	.word	0x0f000001

0802345c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 802345c:	b580      	push	{r7, lr}
 802345e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8023460:	4b12      	ldr	r3, [pc, #72]	; (80234ac <MX_I2C2_Init+0x50>)
 8023462:	4a13      	ldr	r2, [pc, #76]	; (80234b0 <MX_I2C2_Init+0x54>)
 8023464:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8023466:	4b11      	ldr	r3, [pc, #68]	; (80234ac <MX_I2C2_Init+0x50>)
 8023468:	4a12      	ldr	r2, [pc, #72]	; (80234b4 <MX_I2C2_Init+0x58>)
 802346a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 802346c:	4b0f      	ldr	r3, [pc, #60]	; (80234ac <MX_I2C2_Init+0x50>)
 802346e:	2200      	movs	r2, #0
 8023470:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8023472:	4b0e      	ldr	r3, [pc, #56]	; (80234ac <MX_I2C2_Init+0x50>)
 8023474:	2200      	movs	r2, #0
 8023476:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8023478:	4b0c      	ldr	r3, [pc, #48]	; (80234ac <MX_I2C2_Init+0x50>)
 802347a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802347e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8023480:	4b0a      	ldr	r3, [pc, #40]	; (80234ac <MX_I2C2_Init+0x50>)
 8023482:	2200      	movs	r2, #0
 8023484:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8023486:	4b09      	ldr	r3, [pc, #36]	; (80234ac <MX_I2C2_Init+0x50>)
 8023488:	2200      	movs	r2, #0
 802348a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802348c:	4b07      	ldr	r3, [pc, #28]	; (80234ac <MX_I2C2_Init+0x50>)
 802348e:	2200      	movs	r2, #0
 8023490:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8023492:	4b06      	ldr	r3, [pc, #24]	; (80234ac <MX_I2C2_Init+0x50>)
 8023494:	2200      	movs	r2, #0
 8023496:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8023498:	4804      	ldr	r0, [pc, #16]	; (80234ac <MX_I2C2_Init+0x50>)
 802349a:	f004 fb4b 	bl	8027b34 <HAL_I2C_Init>
 802349e:	4603      	mov	r3, r0
 80234a0:	2b00      	cmp	r3, #0
 80234a2:	d001      	beq.n	80234a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80234a4:	f000 fc60 	bl	8023d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80234a8:	bf00      	nop
 80234aa:	bd80      	pop	{r7, pc}
 80234ac:	20000838 	.word	0x20000838
 80234b0:	40005800 	.word	0x40005800
 80234b4:	000186a0 	.word	0x000186a0

080234b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80234b8:	b580      	push	{r7, lr}
 80234ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80234bc:	4b17      	ldr	r3, [pc, #92]	; (802351c <MX_SPI3_Init+0x64>)
 80234be:	4a18      	ldr	r2, [pc, #96]	; (8023520 <MX_SPI3_Init+0x68>)
 80234c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80234c2:	4b16      	ldr	r3, [pc, #88]	; (802351c <MX_SPI3_Init+0x64>)
 80234c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80234c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80234ca:	4b14      	ldr	r3, [pc, #80]	; (802351c <MX_SPI3_Init+0x64>)
 80234cc:	2200      	movs	r2, #0
 80234ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80234d0:	4b12      	ldr	r3, [pc, #72]	; (802351c <MX_SPI3_Init+0x64>)
 80234d2:	2200      	movs	r2, #0
 80234d4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80234d6:	4b11      	ldr	r3, [pc, #68]	; (802351c <MX_SPI3_Init+0x64>)
 80234d8:	2200      	movs	r2, #0
 80234da:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80234dc:	4b0f      	ldr	r3, [pc, #60]	; (802351c <MX_SPI3_Init+0x64>)
 80234de:	2200      	movs	r2, #0
 80234e0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80234e2:	4b0e      	ldr	r3, [pc, #56]	; (802351c <MX_SPI3_Init+0x64>)
 80234e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80234e8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80234ea:	4b0c      	ldr	r3, [pc, #48]	; (802351c <MX_SPI3_Init+0x64>)
 80234ec:	2230      	movs	r2, #48	; 0x30
 80234ee:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80234f0:	4b0a      	ldr	r3, [pc, #40]	; (802351c <MX_SPI3_Init+0x64>)
 80234f2:	2200      	movs	r2, #0
 80234f4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80234f6:	4b09      	ldr	r3, [pc, #36]	; (802351c <MX_SPI3_Init+0x64>)
 80234f8:	2200      	movs	r2, #0
 80234fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80234fc:	4b07      	ldr	r3, [pc, #28]	; (802351c <MX_SPI3_Init+0x64>)
 80234fe:	2200      	movs	r2, #0
 8023500:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8023502:	4b06      	ldr	r3, [pc, #24]	; (802351c <MX_SPI3_Init+0x64>)
 8023504:	220a      	movs	r2, #10
 8023506:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8023508:	4804      	ldr	r0, [pc, #16]	; (802351c <MX_SPI3_Init+0x64>)
 802350a:	f005 f873 	bl	80285f4 <HAL_SPI_Init>
 802350e:	4603      	mov	r3, r0
 8023510:	2b00      	cmp	r3, #0
 8023512:	d001      	beq.n	8023518 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8023514:	f000 fc28 	bl	8023d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8023518:	bf00      	nop
 802351a:	bd80      	pop	{r7, pc}
 802351c:	2000090c 	.word	0x2000090c
 8023520:	40003c00 	.word	0x40003c00

08023524 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8023524:	b580      	push	{r7, lr}
 8023526:	b092      	sub	sp, #72	; 0x48
 8023528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802352a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802352e:	2200      	movs	r2, #0
 8023530:	601a      	str	r2, [r3, #0]
 8023532:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023538:	2200      	movs	r2, #0
 802353a:	601a      	str	r2, [r3, #0]
 802353c:	605a      	str	r2, [r3, #4]
 802353e:	609a      	str	r2, [r3, #8]
 8023540:	60da      	str	r2, [r3, #12]
 8023542:	611a      	str	r2, [r3, #16]
 8023544:	615a      	str	r2, [r3, #20]
 8023546:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8023548:	1d3b      	adds	r3, r7, #4
 802354a:	2220      	movs	r2, #32
 802354c:	2100      	movs	r1, #0
 802354e:	4618      	mov	r0, r3
 8023550:	f006 fe05 	bl	802a15e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8023554:	4b39      	ldr	r3, [pc, #228]	; (802363c <MX_TIM1_Init+0x118>)
 8023556:	4a3a      	ldr	r2, [pc, #232]	; (8023640 <MX_TIM1_Init+0x11c>)
 8023558:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 802355a:	4b38      	ldr	r3, [pc, #224]	; (802363c <MX_TIM1_Init+0x118>)
 802355c:	2201      	movs	r2, #1
 802355e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023560:	4b36      	ldr	r3, [pc, #216]	; (802363c <MX_TIM1_Init+0x118>)
 8023562:	2200      	movs	r2, #0
 8023564:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 8023566:	4b35      	ldr	r3, [pc, #212]	; (802363c <MX_TIM1_Init+0x118>)
 8023568:	f240 4219 	movw	r2, #1049	; 0x419
 802356c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802356e:	4b33      	ldr	r3, [pc, #204]	; (802363c <MX_TIM1_Init+0x118>)
 8023570:	2200      	movs	r2, #0
 8023572:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8023574:	4b31      	ldr	r3, [pc, #196]	; (802363c <MX_TIM1_Init+0x118>)
 8023576:	2200      	movs	r2, #0
 8023578:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802357a:	4b30      	ldr	r3, [pc, #192]	; (802363c <MX_TIM1_Init+0x118>)
 802357c:	2200      	movs	r2, #0
 802357e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8023580:	482e      	ldr	r0, [pc, #184]	; (802363c <MX_TIM1_Init+0x118>)
 8023582:	f005 fdda 	bl	802913a <HAL_TIM_PWM_Init>
 8023586:	4603      	mov	r3, r0
 8023588:	2b00      	cmp	r3, #0
 802358a:	d001      	beq.n	8023590 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 802358c:	f000 fbec 	bl	8023d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023590:	2300      	movs	r3, #0
 8023592:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023594:	2300      	movs	r3, #0
 8023596:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8023598:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802359c:	4619      	mov	r1, r3
 802359e:	4827      	ldr	r0, [pc, #156]	; (802363c <MX_TIM1_Init+0x118>)
 80235a0:	f006 fcbc 	bl	8029f1c <HAL_TIMEx_MasterConfigSynchronization>
 80235a4:	4603      	mov	r3, r0
 80235a6:	2b00      	cmp	r3, #0
 80235a8:	d001      	beq.n	80235ae <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80235aa:	f000 fbdd 	bl	8023d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80235ae:	2360      	movs	r3, #96	; 0x60
 80235b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80235b2:	2300      	movs	r3, #0
 80235b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80235b6:	2300      	movs	r3, #0
 80235b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80235ba:	2300      	movs	r3, #0
 80235bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80235be:	2300      	movs	r3, #0
 80235c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80235c2:	2300      	movs	r3, #0
 80235c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80235c6:	2300      	movs	r3, #0
 80235c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80235ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80235ce:	2204      	movs	r2, #4
 80235d0:	4619      	mov	r1, r3
 80235d2:	481a      	ldr	r0, [pc, #104]	; (802363c <MX_TIM1_Init+0x118>)
 80235d4:	f005 ffec 	bl	80295b0 <HAL_TIM_PWM_ConfigChannel>
 80235d8:	4603      	mov	r3, r0
 80235da:	2b00      	cmp	r3, #0
 80235dc:	d001      	beq.n	80235e2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80235de:	f000 fbc3 	bl	8023d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80235e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80235e6:	220c      	movs	r2, #12
 80235e8:	4619      	mov	r1, r3
 80235ea:	4814      	ldr	r0, [pc, #80]	; (802363c <MX_TIM1_Init+0x118>)
 80235ec:	f005 ffe0 	bl	80295b0 <HAL_TIM_PWM_ConfigChannel>
 80235f0:	4603      	mov	r3, r0
 80235f2:	2b00      	cmp	r3, #0
 80235f4:	d001      	beq.n	80235fa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80235f6:	f000 fbb7 	bl	8023d68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80235fa:	2300      	movs	r3, #0
 80235fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80235fe:	2300      	movs	r3, #0
 8023600:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8023602:	2300      	movs	r3, #0
 8023604:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8023606:	2300      	movs	r3, #0
 8023608:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 802360a:	2300      	movs	r3, #0
 802360c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 802360e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8023612:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8023614:	2300      	movs	r3, #0
 8023616:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8023618:	1d3b      	adds	r3, r7, #4
 802361a:	4619      	mov	r1, r3
 802361c:	4807      	ldr	r0, [pc, #28]	; (802363c <MX_TIM1_Init+0x118>)
 802361e:	f006 fcf9 	bl	802a014 <HAL_TIMEx_ConfigBreakDeadTime>
 8023622:	4603      	mov	r3, r0
 8023624:	2b00      	cmp	r3, #0
 8023626:	d001      	beq.n	802362c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8023628:	f000 fb9e 	bl	8023d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 802362c:	4803      	ldr	r0, [pc, #12]	; (802363c <MX_TIM1_Init+0x118>)
 802362e:	f001 fae5 	bl	8024bfc <HAL_TIM_MspPostInit>

}
 8023632:	bf00      	nop
 8023634:	3748      	adds	r7, #72	; 0x48
 8023636:	46bd      	mov	sp, r7
 8023638:	bd80      	pop	{r7, pc}
 802363a:	bf00      	nop
 802363c:	20000a2c 	.word	0x20000a2c
 8023640:	40010000 	.word	0x40010000

08023644 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8023644:	b580      	push	{r7, lr}
 8023646:	b086      	sub	sp, #24
 8023648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802364a:	f107 0308 	add.w	r3, r7, #8
 802364e:	2200      	movs	r2, #0
 8023650:	601a      	str	r2, [r3, #0]
 8023652:	605a      	str	r2, [r3, #4]
 8023654:	609a      	str	r2, [r3, #8]
 8023656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023658:	463b      	mov	r3, r7
 802365a:	2200      	movs	r2, #0
 802365c:	601a      	str	r2, [r3, #0]
 802365e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8023660:	4b1d      	ldr	r3, [pc, #116]	; (80236d8 <MX_TIM2_Init+0x94>)
 8023662:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023666:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8023668:	4b1b      	ldr	r3, [pc, #108]	; (80236d8 <MX_TIM2_Init+0x94>)
 802366a:	2204      	movs	r2, #4
 802366c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 802366e:	4b1a      	ldr	r3, [pc, #104]	; (80236d8 <MX_TIM2_Init+0x94>)
 8023670:	2200      	movs	r2, #0
 8023672:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 8023674:	4b18      	ldr	r3, [pc, #96]	; (80236d8 <MX_TIM2_Init+0x94>)
 8023676:	4a19      	ldr	r2, [pc, #100]	; (80236dc <MX_TIM2_Init+0x98>)
 8023678:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802367a:	4b17      	ldr	r3, [pc, #92]	; (80236d8 <MX_TIM2_Init+0x94>)
 802367c:	2200      	movs	r2, #0
 802367e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023680:	4b15      	ldr	r3, [pc, #84]	; (80236d8 <MX_TIM2_Init+0x94>)
 8023682:	2200      	movs	r2, #0
 8023684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8023686:	4814      	ldr	r0, [pc, #80]	; (80236d8 <MX_TIM2_Init+0x94>)
 8023688:	f005 fd08 	bl	802909c <HAL_TIM_Base_Init>
 802368c:	4603      	mov	r3, r0
 802368e:	2b00      	cmp	r3, #0
 8023690:	d001      	beq.n	8023696 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8023692:	f000 fb69 	bl	8023d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8023696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802369a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 802369c:	f107 0308 	add.w	r3, r7, #8
 80236a0:	4619      	mov	r1, r3
 80236a2:	480d      	ldr	r0, [pc, #52]	; (80236d8 <MX_TIM2_Init+0x94>)
 80236a4:	f006 f84a 	bl	802973c <HAL_TIM_ConfigClockSource>
 80236a8:	4603      	mov	r3, r0
 80236aa:	2b00      	cmp	r3, #0
 80236ac:	d001      	beq.n	80236b2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80236ae:	f000 fb5b 	bl	8023d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80236b2:	2300      	movs	r3, #0
 80236b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80236b6:	2300      	movs	r3, #0
 80236b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80236ba:	463b      	mov	r3, r7
 80236bc:	4619      	mov	r1, r3
 80236be:	4806      	ldr	r0, [pc, #24]	; (80236d8 <MX_TIM2_Init+0x94>)
 80236c0:	f006 fc2c 	bl	8029f1c <HAL_TIMEx_MasterConfigSynchronization>
 80236c4:	4603      	mov	r3, r0
 80236c6:	2b00      	cmp	r3, #0
 80236c8:	d001      	beq.n	80236ce <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80236ca:	f000 fb4d 	bl	8023d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80236ce:	bf00      	nop
 80236d0:	3718      	adds	r7, #24
 80236d2:	46bd      	mov	sp, r7
 80236d4:	bd80      	pop	{r7, pc}
 80236d6:	bf00      	nop
 80236d8:	20000a6c 	.word	0x20000a6c
 80236dc:	00019a27 	.word	0x00019a27

080236e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80236e0:	b580      	push	{r7, lr}
 80236e2:	b08a      	sub	sp, #40	; 0x28
 80236e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80236e6:	f107 0320 	add.w	r3, r7, #32
 80236ea:	2200      	movs	r2, #0
 80236ec:	601a      	str	r2, [r3, #0]
 80236ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80236f0:	1d3b      	adds	r3, r7, #4
 80236f2:	2200      	movs	r2, #0
 80236f4:	601a      	str	r2, [r3, #0]
 80236f6:	605a      	str	r2, [r3, #4]
 80236f8:	609a      	str	r2, [r3, #8]
 80236fa:	60da      	str	r2, [r3, #12]
 80236fc:	611a      	str	r2, [r3, #16]
 80236fe:	615a      	str	r2, [r3, #20]
 8023700:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8023702:	4b32      	ldr	r3, [pc, #200]	; (80237cc <MX_TIM3_Init+0xec>)
 8023704:	4a32      	ldr	r2, [pc, #200]	; (80237d0 <MX_TIM3_Init+0xf0>)
 8023706:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8023708:	4b30      	ldr	r3, [pc, #192]	; (80237cc <MX_TIM3_Init+0xec>)
 802370a:	2200      	movs	r2, #0
 802370c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802370e:	4b2f      	ldr	r3, [pc, #188]	; (80237cc <MX_TIM3_Init+0xec>)
 8023710:	2200      	movs	r2, #0
 8023712:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8023714:	4b2d      	ldr	r3, [pc, #180]	; (80237cc <MX_TIM3_Init+0xec>)
 8023716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802371a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802371c:	4b2b      	ldr	r3, [pc, #172]	; (80237cc <MX_TIM3_Init+0xec>)
 802371e:	2200      	movs	r2, #0
 8023720:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023722:	4b2a      	ldr	r3, [pc, #168]	; (80237cc <MX_TIM3_Init+0xec>)
 8023724:	2200      	movs	r2, #0
 8023726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8023728:	4828      	ldr	r0, [pc, #160]	; (80237cc <MX_TIM3_Init+0xec>)
 802372a:	f005 fd06 	bl	802913a <HAL_TIM_PWM_Init>
 802372e:	4603      	mov	r3, r0
 8023730:	2b00      	cmp	r3, #0
 8023732:	d001      	beq.n	8023738 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8023734:	f000 fb18 	bl	8023d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023738:	2300      	movs	r3, #0
 802373a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802373c:	2300      	movs	r3, #0
 802373e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8023740:	f107 0320 	add.w	r3, r7, #32
 8023744:	4619      	mov	r1, r3
 8023746:	4821      	ldr	r0, [pc, #132]	; (80237cc <MX_TIM3_Init+0xec>)
 8023748:	f006 fbe8 	bl	8029f1c <HAL_TIMEx_MasterConfigSynchronization>
 802374c:	4603      	mov	r3, r0
 802374e:	2b00      	cmp	r3, #0
 8023750:	d001      	beq.n	8023756 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8023752:	f000 fb09 	bl	8023d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023756:	2360      	movs	r3, #96	; 0x60
 8023758:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 802375a:	2300      	movs	r3, #0
 802375c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802375e:	2300      	movs	r3, #0
 8023760:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023762:	2300      	movs	r3, #0
 8023764:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023766:	1d3b      	adds	r3, r7, #4
 8023768:	2200      	movs	r2, #0
 802376a:	4619      	mov	r1, r3
 802376c:	4817      	ldr	r0, [pc, #92]	; (80237cc <MX_TIM3_Init+0xec>)
 802376e:	f005 ff1f 	bl	80295b0 <HAL_TIM_PWM_ConfigChannel>
 8023772:	4603      	mov	r3, r0
 8023774:	2b00      	cmp	r3, #0
 8023776:	d001      	beq.n	802377c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8023778:	f000 faf6 	bl	8023d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 802377c:	1d3b      	adds	r3, r7, #4
 802377e:	2204      	movs	r2, #4
 8023780:	4619      	mov	r1, r3
 8023782:	4812      	ldr	r0, [pc, #72]	; (80237cc <MX_TIM3_Init+0xec>)
 8023784:	f005 ff14 	bl	80295b0 <HAL_TIM_PWM_ConfigChannel>
 8023788:	4603      	mov	r3, r0
 802378a:	2b00      	cmp	r3, #0
 802378c:	d001      	beq.n	8023792 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 802378e:	f000 faeb 	bl	8023d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8023792:	1d3b      	adds	r3, r7, #4
 8023794:	2208      	movs	r2, #8
 8023796:	4619      	mov	r1, r3
 8023798:	480c      	ldr	r0, [pc, #48]	; (80237cc <MX_TIM3_Init+0xec>)
 802379a:	f005 ff09 	bl	80295b0 <HAL_TIM_PWM_ConfigChannel>
 802379e:	4603      	mov	r3, r0
 80237a0:	2b00      	cmp	r3, #0
 80237a2:	d001      	beq.n	80237a8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80237a4:	f000 fae0 	bl	8023d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80237a8:	1d3b      	adds	r3, r7, #4
 80237aa:	220c      	movs	r2, #12
 80237ac:	4619      	mov	r1, r3
 80237ae:	4807      	ldr	r0, [pc, #28]	; (80237cc <MX_TIM3_Init+0xec>)
 80237b0:	f005 fefe 	bl	80295b0 <HAL_TIM_PWM_ConfigChannel>
 80237b4:	4603      	mov	r3, r0
 80237b6:	2b00      	cmp	r3, #0
 80237b8:	d001      	beq.n	80237be <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80237ba:	f000 fad5 	bl	8023d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80237be:	4803      	ldr	r0, [pc, #12]	; (80237cc <MX_TIM3_Init+0xec>)
 80237c0:	f001 fa1c 	bl	8024bfc <HAL_TIM_MspPostInit>

}
 80237c4:	bf00      	nop
 80237c6:	3728      	adds	r7, #40	; 0x28
 80237c8:	46bd      	mov	sp, r7
 80237ca:	bd80      	pop	{r7, pc}
 80237cc:	200008cc 	.word	0x200008cc
 80237d0:	40000400 	.word	0x40000400

080237d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80237d4:	b580      	push	{r7, lr}
 80237d6:	b08c      	sub	sp, #48	; 0x30
 80237d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80237da:	f107 030c 	add.w	r3, r7, #12
 80237de:	2224      	movs	r2, #36	; 0x24
 80237e0:	2100      	movs	r1, #0
 80237e2:	4618      	mov	r0, r3
 80237e4:	f006 fcbb 	bl	802a15e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80237e8:	1d3b      	adds	r3, r7, #4
 80237ea:	2200      	movs	r2, #0
 80237ec:	601a      	str	r2, [r3, #0]
 80237ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80237f0:	4b20      	ldr	r3, [pc, #128]	; (8023874 <MX_TIM4_Init+0xa0>)
 80237f2:	4a21      	ldr	r2, [pc, #132]	; (8023878 <MX_TIM4_Init+0xa4>)
 80237f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80237f6:	4b1f      	ldr	r3, [pc, #124]	; (8023874 <MX_TIM4_Init+0xa0>)
 80237f8:	2200      	movs	r2, #0
 80237fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80237fc:	4b1d      	ldr	r3, [pc, #116]	; (8023874 <MX_TIM4_Init+0xa0>)
 80237fe:	2200      	movs	r2, #0
 8023800:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8023802:	4b1c      	ldr	r3, [pc, #112]	; (8023874 <MX_TIM4_Init+0xa0>)
 8023804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023808:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802380a:	4b1a      	ldr	r3, [pc, #104]	; (8023874 <MX_TIM4_Init+0xa0>)
 802380c:	2200      	movs	r2, #0
 802380e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023810:	4b18      	ldr	r3, [pc, #96]	; (8023874 <MX_TIM4_Init+0xa0>)
 8023812:	2200      	movs	r2, #0
 8023814:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8023816:	2303      	movs	r3, #3
 8023818:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 802381a:	2300      	movs	r3, #0
 802381c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 802381e:	2301      	movs	r3, #1
 8023820:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8023822:	2300      	movs	r3, #0
 8023824:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8023826:	2300      	movs	r3, #0
 8023828:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 802382a:	2300      	movs	r3, #0
 802382c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 802382e:	2301      	movs	r3, #1
 8023830:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8023832:	2300      	movs	r3, #0
 8023834:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8023836:	2300      	movs	r3, #0
 8023838:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 802383a:	f107 030c 	add.w	r3, r7, #12
 802383e:	4619      	mov	r1, r3
 8023840:	480c      	ldr	r0, [pc, #48]	; (8023874 <MX_TIM4_Init+0xa0>)
 8023842:	f005 fce3 	bl	802920c <HAL_TIM_Encoder_Init>
 8023846:	4603      	mov	r3, r0
 8023848:	2b00      	cmp	r3, #0
 802384a:	d001      	beq.n	8023850 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 802384c:	f000 fa8c 	bl	8023d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023850:	2300      	movs	r3, #0
 8023852:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023854:	2300      	movs	r3, #0
 8023856:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8023858:	1d3b      	adds	r3, r7, #4
 802385a:	4619      	mov	r1, r3
 802385c:	4805      	ldr	r0, [pc, #20]	; (8023874 <MX_TIM4_Init+0xa0>)
 802385e:	f006 fb5d 	bl	8029f1c <HAL_TIMEx_MasterConfigSynchronization>
 8023862:	4603      	mov	r3, r0
 8023864:	2b00      	cmp	r3, #0
 8023866:	d001      	beq.n	802386c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8023868:	f000 fa7e 	bl	8023d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 802386c:	bf00      	nop
 802386e:	3730      	adds	r7, #48	; 0x30
 8023870:	46bd      	mov	sp, r7
 8023872:	bd80      	pop	{r7, pc}
 8023874:	200007f8 	.word	0x200007f8
 8023878:	40000800 	.word	0x40000800

0802387c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 802387c:	b580      	push	{r7, lr}
 802387e:	b086      	sub	sp, #24
 8023880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8023882:	f107 0308 	add.w	r3, r7, #8
 8023886:	2200      	movs	r2, #0
 8023888:	601a      	str	r2, [r3, #0]
 802388a:	605a      	str	r2, [r3, #4]
 802388c:	609a      	str	r2, [r3, #8]
 802388e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023890:	463b      	mov	r3, r7
 8023892:	2200      	movs	r2, #0
 8023894:	601a      	str	r2, [r3, #0]
 8023896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8023898:	4b1d      	ldr	r3, [pc, #116]	; (8023910 <MX_TIM5_Init+0x94>)
 802389a:	4a1e      	ldr	r2, [pc, #120]	; (8023914 <MX_TIM5_Init+0x98>)
 802389c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 802389e:	4b1c      	ldr	r3, [pc, #112]	; (8023910 <MX_TIM5_Init+0x94>)
 80238a0:	2204      	movs	r2, #4
 80238a2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80238a4:	4b1a      	ldr	r3, [pc, #104]	; (8023910 <MX_TIM5_Init+0x94>)
 80238a6:	2200      	movs	r2, #0
 80238a8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 80238aa:	4b19      	ldr	r3, [pc, #100]	; (8023910 <MX_TIM5_Init+0x94>)
 80238ac:	f245 2207 	movw	r2, #20999	; 0x5207
 80238b0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80238b2:	4b17      	ldr	r3, [pc, #92]	; (8023910 <MX_TIM5_Init+0x94>)
 80238b4:	2200      	movs	r2, #0
 80238b6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80238b8:	4b15      	ldr	r3, [pc, #84]	; (8023910 <MX_TIM5_Init+0x94>)
 80238ba:	2200      	movs	r2, #0
 80238bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80238be:	4814      	ldr	r0, [pc, #80]	; (8023910 <MX_TIM5_Init+0x94>)
 80238c0:	f005 fbec 	bl	802909c <HAL_TIM_Base_Init>
 80238c4:	4603      	mov	r3, r0
 80238c6:	2b00      	cmp	r3, #0
 80238c8:	d001      	beq.n	80238ce <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80238ca:	f000 fa4d 	bl	8023d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80238ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80238d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80238d4:	f107 0308 	add.w	r3, r7, #8
 80238d8:	4619      	mov	r1, r3
 80238da:	480d      	ldr	r0, [pc, #52]	; (8023910 <MX_TIM5_Init+0x94>)
 80238dc:	f005 ff2e 	bl	802973c <HAL_TIM_ConfigClockSource>
 80238e0:	4603      	mov	r3, r0
 80238e2:	2b00      	cmp	r3, #0
 80238e4:	d001      	beq.n	80238ea <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80238e6:	f000 fa3f 	bl	8023d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80238ea:	2300      	movs	r3, #0
 80238ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80238ee:	2300      	movs	r3, #0
 80238f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80238f2:	463b      	mov	r3, r7
 80238f4:	4619      	mov	r1, r3
 80238f6:	4806      	ldr	r0, [pc, #24]	; (8023910 <MX_TIM5_Init+0x94>)
 80238f8:	f006 fb10 	bl	8029f1c <HAL_TIMEx_MasterConfigSynchronization>
 80238fc:	4603      	mov	r3, r0
 80238fe:	2b00      	cmp	r3, #0
 8023900:	d001      	beq.n	8023906 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8023902:	f000 fa31 	bl	8023d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8023906:	bf00      	nop
 8023908:	3718      	adds	r7, #24
 802390a:	46bd      	mov	sp, r7
 802390c:	bd80      	pop	{r7, pc}
 802390e:	bf00      	nop
 8023910:	2000088c 	.word	0x2000088c
 8023914:	40000c00 	.word	0x40000c00

08023918 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8023918:	b580      	push	{r7, lr}
 802391a:	b082      	sub	sp, #8
 802391c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802391e:	463b      	mov	r3, r7
 8023920:	2200      	movs	r2, #0
 8023922:	601a      	str	r2, [r3, #0]
 8023924:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8023926:	4b15      	ldr	r3, [pc, #84]	; (802397c <MX_TIM6_Init+0x64>)
 8023928:	4a15      	ldr	r2, [pc, #84]	; (8023980 <MX_TIM6_Init+0x68>)
 802392a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 802392c:	4b13      	ldr	r3, [pc, #76]	; (802397c <MX_TIM6_Init+0x64>)
 802392e:	2204      	movs	r2, #4
 8023930:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023932:	4b12      	ldr	r3, [pc, #72]	; (802397c <MX_TIM6_Init+0x64>)
 8023934:	2200      	movs	r2, #0
 8023936:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8023938:	4b10      	ldr	r3, [pc, #64]	; (802397c <MX_TIM6_Init+0x64>)
 802393a:	f642 1203 	movw	r2, #10499	; 0x2903
 802393e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023940:	4b0e      	ldr	r3, [pc, #56]	; (802397c <MX_TIM6_Init+0x64>)
 8023942:	2200      	movs	r2, #0
 8023944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8023946:	480d      	ldr	r0, [pc, #52]	; (802397c <MX_TIM6_Init+0x64>)
 8023948:	f005 fba8 	bl	802909c <HAL_TIM_Base_Init>
 802394c:	4603      	mov	r3, r0
 802394e:	2b00      	cmp	r3, #0
 8023950:	d001      	beq.n	8023956 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8023952:	f000 fa09 	bl	8023d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023956:	2300      	movs	r3, #0
 8023958:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802395a:	2300      	movs	r3, #0
 802395c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 802395e:	463b      	mov	r3, r7
 8023960:	4619      	mov	r1, r3
 8023962:	4806      	ldr	r0, [pc, #24]	; (802397c <MX_TIM6_Init+0x64>)
 8023964:	f006 fada 	bl	8029f1c <HAL_TIMEx_MasterConfigSynchronization>
 8023968:	4603      	mov	r3, r0
 802396a:	2b00      	cmp	r3, #0
 802396c:	d001      	beq.n	8023972 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 802396e:	f000 f9fb 	bl	8023d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8023972:	bf00      	nop
 8023974:	3708      	adds	r7, #8
 8023976:	46bd      	mov	sp, r7
 8023978:	bd80      	pop	{r7, pc}
 802397a:	bf00      	nop
 802397c:	200009ec 	.word	0x200009ec
 8023980:	40001000 	.word	0x40001000

08023984 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8023984:	b580      	push	{r7, lr}
 8023986:	b082      	sub	sp, #8
 8023988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802398a:	463b      	mov	r3, r7
 802398c:	2200      	movs	r2, #0
 802398e:	601a      	str	r2, [r3, #0]
 8023990:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8023992:	4b15      	ldr	r3, [pc, #84]	; (80239e8 <MX_TIM7_Init+0x64>)
 8023994:	4a15      	ldr	r2, [pc, #84]	; (80239ec <MX_TIM7_Init+0x68>)
 8023996:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8023998:	4b13      	ldr	r3, [pc, #76]	; (80239e8 <MX_TIM7_Init+0x64>)
 802399a:	2204      	movs	r2, #4
 802399c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 802399e:	4b12      	ldr	r3, [pc, #72]	; (80239e8 <MX_TIM7_Init+0x64>)
 80239a0:	2200      	movs	r2, #0
 80239a2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 80239a4:	4b10      	ldr	r3, [pc, #64]	; (80239e8 <MX_TIM7_Init+0x64>)
 80239a6:	f240 4219 	movw	r2, #1049	; 0x419
 80239aa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80239ac:	4b0e      	ldr	r3, [pc, #56]	; (80239e8 <MX_TIM7_Init+0x64>)
 80239ae:	2200      	movs	r2, #0
 80239b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80239b2:	480d      	ldr	r0, [pc, #52]	; (80239e8 <MX_TIM7_Init+0x64>)
 80239b4:	f005 fb72 	bl	802909c <HAL_TIM_Base_Init>
 80239b8:	4603      	mov	r3, r0
 80239ba:	2b00      	cmp	r3, #0
 80239bc:	d001      	beq.n	80239c2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80239be:	f000 f9d3 	bl	8023d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80239c2:	2300      	movs	r3, #0
 80239c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80239c6:	2300      	movs	r3, #0
 80239c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80239ca:	463b      	mov	r3, r7
 80239cc:	4619      	mov	r1, r3
 80239ce:	4806      	ldr	r0, [pc, #24]	; (80239e8 <MX_TIM7_Init+0x64>)
 80239d0:	f006 faa4 	bl	8029f1c <HAL_TIMEx_MasterConfigSynchronization>
 80239d4:	4603      	mov	r3, r0
 80239d6:	2b00      	cmp	r3, #0
 80239d8:	d001      	beq.n	80239de <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80239da:	f000 f9c5 	bl	8023d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80239de:	bf00      	nop
 80239e0:	3708      	adds	r7, #8
 80239e2:	46bd      	mov	sp, r7
 80239e4:	bd80      	pop	{r7, pc}
 80239e6:	bf00      	nop
 80239e8:	20000aec 	.word	0x20000aec
 80239ec:	40001400 	.word	0x40001400

080239f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80239f0:	b580      	push	{r7, lr}
 80239f2:	b08c      	sub	sp, #48	; 0x30
 80239f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80239f6:	f107 030c 	add.w	r3, r7, #12
 80239fa:	2224      	movs	r2, #36	; 0x24
 80239fc:	2100      	movs	r1, #0
 80239fe:	4618      	mov	r0, r3
 8023a00:	f006 fbad 	bl	802a15e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023a04:	1d3b      	adds	r3, r7, #4
 8023a06:	2200      	movs	r2, #0
 8023a08:	601a      	str	r2, [r3, #0]
 8023a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8023a0c:	4b22      	ldr	r3, [pc, #136]	; (8023a98 <MX_TIM8_Init+0xa8>)
 8023a0e:	4a23      	ldr	r2, [pc, #140]	; (8023a9c <MX_TIM8_Init+0xac>)
 8023a10:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8023a12:	4b21      	ldr	r3, [pc, #132]	; (8023a98 <MX_TIM8_Init+0xa8>)
 8023a14:	2200      	movs	r2, #0
 8023a16:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023a18:	4b1f      	ldr	r3, [pc, #124]	; (8023a98 <MX_TIM8_Init+0xa8>)
 8023a1a:	2200      	movs	r2, #0
 8023a1c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8023a1e:	4b1e      	ldr	r3, [pc, #120]	; (8023a98 <MX_TIM8_Init+0xa8>)
 8023a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023a24:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023a26:	4b1c      	ldr	r3, [pc, #112]	; (8023a98 <MX_TIM8_Init+0xa8>)
 8023a28:	2200      	movs	r2, #0
 8023a2a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8023a2c:	4b1a      	ldr	r3, [pc, #104]	; (8023a98 <MX_TIM8_Init+0xa8>)
 8023a2e:	2200      	movs	r2, #0
 8023a30:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023a32:	4b19      	ldr	r3, [pc, #100]	; (8023a98 <MX_TIM8_Init+0xa8>)
 8023a34:	2200      	movs	r2, #0
 8023a36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8023a38:	2303      	movs	r3, #3
 8023a3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8023a3c:	2300      	movs	r3, #0
 8023a3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8023a40:	2301      	movs	r3, #1
 8023a42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8023a44:	2300      	movs	r3, #0
 8023a46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8023a48:	2300      	movs	r3, #0
 8023a4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8023a4c:	2300      	movs	r3, #0
 8023a4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8023a50:	2301      	movs	r3, #1
 8023a52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8023a54:	2300      	movs	r3, #0
 8023a56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8023a58:	2300      	movs	r3, #0
 8023a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8023a5c:	f107 030c 	add.w	r3, r7, #12
 8023a60:	4619      	mov	r1, r3
 8023a62:	480d      	ldr	r0, [pc, #52]	; (8023a98 <MX_TIM8_Init+0xa8>)
 8023a64:	f005 fbd2 	bl	802920c <HAL_TIM_Encoder_Init>
 8023a68:	4603      	mov	r3, r0
 8023a6a:	2b00      	cmp	r3, #0
 8023a6c:	d001      	beq.n	8023a72 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8023a6e:	f000 f97b 	bl	8023d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023a72:	2300      	movs	r3, #0
 8023a74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023a76:	2300      	movs	r3, #0
 8023a78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8023a7a:	1d3b      	adds	r3, r7, #4
 8023a7c:	4619      	mov	r1, r3
 8023a7e:	4806      	ldr	r0, [pc, #24]	; (8023a98 <MX_TIM8_Init+0xa8>)
 8023a80:	f006 fa4c 	bl	8029f1c <HAL_TIMEx_MasterConfigSynchronization>
 8023a84:	4603      	mov	r3, r0
 8023a86:	2b00      	cmp	r3, #0
 8023a88:	d001      	beq.n	8023a8e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8023a8a:	f000 f96d 	bl	8023d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8023a8e:	bf00      	nop
 8023a90:	3730      	adds	r7, #48	; 0x30
 8023a92:	46bd      	mov	sp, r7
 8023a94:	bd80      	pop	{r7, pc}
 8023a96:	bf00      	nop
 8023a98:	200007b8 	.word	0x200007b8
 8023a9c:	40010400 	.word	0x40010400

08023aa0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8023aa0:	b580      	push	{r7, lr}
 8023aa2:	b088      	sub	sp, #32
 8023aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8023aa6:	1d3b      	adds	r3, r7, #4
 8023aa8:	2200      	movs	r2, #0
 8023aaa:	601a      	str	r2, [r3, #0]
 8023aac:	605a      	str	r2, [r3, #4]
 8023aae:	609a      	str	r2, [r3, #8]
 8023ab0:	60da      	str	r2, [r3, #12]
 8023ab2:	611a      	str	r2, [r3, #16]
 8023ab4:	615a      	str	r2, [r3, #20]
 8023ab6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8023ab8:	4b1e      	ldr	r3, [pc, #120]	; (8023b34 <MX_TIM11_Init+0x94>)
 8023aba:	4a1f      	ldr	r2, [pc, #124]	; (8023b38 <MX_TIM11_Init+0x98>)
 8023abc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8023abe:	4b1d      	ldr	r3, [pc, #116]	; (8023b34 <MX_TIM11_Init+0x94>)
 8023ac0:	2200      	movs	r2, #0
 8023ac2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023ac4:	4b1b      	ldr	r3, [pc, #108]	; (8023b34 <MX_TIM11_Init+0x94>)
 8023ac6:	2200      	movs	r2, #0
 8023ac8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 8023aca:	4b1a      	ldr	r3, [pc, #104]	; (8023b34 <MX_TIM11_Init+0x94>)
 8023acc:	f240 628f 	movw	r2, #1679	; 0x68f
 8023ad0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023ad2:	4b18      	ldr	r3, [pc, #96]	; (8023b34 <MX_TIM11_Init+0x94>)
 8023ad4:	2200      	movs	r2, #0
 8023ad6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023ad8:	4b16      	ldr	r3, [pc, #88]	; (8023b34 <MX_TIM11_Init+0x94>)
 8023ada:	2200      	movs	r2, #0
 8023adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8023ade:	4815      	ldr	r0, [pc, #84]	; (8023b34 <MX_TIM11_Init+0x94>)
 8023ae0:	f005 fadc 	bl	802909c <HAL_TIM_Base_Init>
 8023ae4:	4603      	mov	r3, r0
 8023ae6:	2b00      	cmp	r3, #0
 8023ae8:	d001      	beq.n	8023aee <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8023aea:	f000 f93d 	bl	8023d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8023aee:	4811      	ldr	r0, [pc, #68]	; (8023b34 <MX_TIM11_Init+0x94>)
 8023af0:	f005 fb23 	bl	802913a <HAL_TIM_PWM_Init>
 8023af4:	4603      	mov	r3, r0
 8023af6:	2b00      	cmp	r3, #0
 8023af8:	d001      	beq.n	8023afe <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8023afa:	f000 f935 	bl	8023d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023afe:	2360      	movs	r3, #96	; 0x60
 8023b00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023b02:	2300      	movs	r3, #0
 8023b04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023b06:	2300      	movs	r3, #0
 8023b08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023b0a:	2300      	movs	r3, #0
 8023b0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023b0e:	1d3b      	adds	r3, r7, #4
 8023b10:	2200      	movs	r2, #0
 8023b12:	4619      	mov	r1, r3
 8023b14:	4807      	ldr	r0, [pc, #28]	; (8023b34 <MX_TIM11_Init+0x94>)
 8023b16:	f005 fd4b 	bl	80295b0 <HAL_TIM_PWM_ConfigChannel>
 8023b1a:	4603      	mov	r3, r0
 8023b1c:	2b00      	cmp	r3, #0
 8023b1e:	d001      	beq.n	8023b24 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8023b20:	f000 f922 	bl	8023d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8023b24:	4803      	ldr	r0, [pc, #12]	; (8023b34 <MX_TIM11_Init+0x94>)
 8023b26:	f001 f869 	bl	8024bfc <HAL_TIM_MspPostInit>

}
 8023b2a:	bf00      	nop
 8023b2c:	3720      	adds	r7, #32
 8023b2e:	46bd      	mov	sp, r7
 8023b30:	bd80      	pop	{r7, pc}
 8023b32:	bf00      	nop
 8023b34:	200009ac 	.word	0x200009ac
 8023b38:	40014800 	.word	0x40014800

08023b3c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8023b3c:	b580      	push	{r7, lr}
 8023b3e:	b088      	sub	sp, #32
 8023b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8023b42:	1d3b      	adds	r3, r7, #4
 8023b44:	2200      	movs	r2, #0
 8023b46:	601a      	str	r2, [r3, #0]
 8023b48:	605a      	str	r2, [r3, #4]
 8023b4a:	609a      	str	r2, [r3, #8]
 8023b4c:	60da      	str	r2, [r3, #12]
 8023b4e:	611a      	str	r2, [r3, #16]
 8023b50:	615a      	str	r2, [r3, #20]
 8023b52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8023b54:	4b1a      	ldr	r3, [pc, #104]	; (8023bc0 <MX_TIM12_Init+0x84>)
 8023b56:	4a1b      	ldr	r2, [pc, #108]	; (8023bc4 <MX_TIM12_Init+0x88>)
 8023b58:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 8023b5a:	4b19      	ldr	r3, [pc, #100]	; (8023bc0 <MX_TIM12_Init+0x84>)
 8023b5c:	f44f 725c 	mov.w	r2, #880	; 0x370
 8023b60:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023b62:	4b17      	ldr	r3, [pc, #92]	; (8023bc0 <MX_TIM12_Init+0x84>)
 8023b64:	2200      	movs	r2, #0
 8023b66:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 8023b68:	4b15      	ldr	r3, [pc, #84]	; (8023bc0 <MX_TIM12_Init+0x84>)
 8023b6a:	2235      	movs	r2, #53	; 0x35
 8023b6c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023b6e:	4b14      	ldr	r3, [pc, #80]	; (8023bc0 <MX_TIM12_Init+0x84>)
 8023b70:	2200      	movs	r2, #0
 8023b72:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023b74:	4b12      	ldr	r3, [pc, #72]	; (8023bc0 <MX_TIM12_Init+0x84>)
 8023b76:	2200      	movs	r2, #0
 8023b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8023b7a:	4811      	ldr	r0, [pc, #68]	; (8023bc0 <MX_TIM12_Init+0x84>)
 8023b7c:	f005 fadd 	bl	802913a <HAL_TIM_PWM_Init>
 8023b80:	4603      	mov	r3, r0
 8023b82:	2b00      	cmp	r3, #0
 8023b84:	d001      	beq.n	8023b8a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8023b86:	f000 f8ef 	bl	8023d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023b8a:	2360      	movs	r3, #96	; 0x60
 8023b8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023b8e:	2300      	movs	r3, #0
 8023b90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023b92:	2300      	movs	r3, #0
 8023b94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023b96:	2300      	movs	r3, #0
 8023b98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023b9a:	1d3b      	adds	r3, r7, #4
 8023b9c:	2204      	movs	r2, #4
 8023b9e:	4619      	mov	r1, r3
 8023ba0:	4807      	ldr	r0, [pc, #28]	; (8023bc0 <MX_TIM12_Init+0x84>)
 8023ba2:	f005 fd05 	bl	80295b0 <HAL_TIM_PWM_ConfigChannel>
 8023ba6:	4603      	mov	r3, r0
 8023ba8:	2b00      	cmp	r3, #0
 8023baa:	d001      	beq.n	8023bb0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8023bac:	f000 f8dc 	bl	8023d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8023bb0:	4803      	ldr	r0, [pc, #12]	; (8023bc0 <MX_TIM12_Init+0x84>)
 8023bb2:	f001 f823 	bl	8024bfc <HAL_TIM_MspPostInit>

}
 8023bb6:	bf00      	nop
 8023bb8:	3720      	adds	r7, #32
 8023bba:	46bd      	mov	sp, r7
 8023bbc:	bd80      	pop	{r7, pc}
 8023bbe:	bf00      	nop
 8023bc0:	20000aac 	.word	0x20000aac
 8023bc4:	40001800 	.word	0x40001800

08023bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8023bc8:	b580      	push	{r7, lr}
 8023bca:	b08a      	sub	sp, #40	; 0x28
 8023bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023bce:	f107 0314 	add.w	r3, r7, #20
 8023bd2:	2200      	movs	r2, #0
 8023bd4:	601a      	str	r2, [r3, #0]
 8023bd6:	605a      	str	r2, [r3, #4]
 8023bd8:	609a      	str	r2, [r3, #8]
 8023bda:	60da      	str	r2, [r3, #12]
 8023bdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8023bde:	2300      	movs	r3, #0
 8023be0:	613b      	str	r3, [r7, #16]
 8023be2:	4b5c      	ldr	r3, [pc, #368]	; (8023d54 <MX_GPIO_Init+0x18c>)
 8023be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023be6:	4a5b      	ldr	r2, [pc, #364]	; (8023d54 <MX_GPIO_Init+0x18c>)
 8023be8:	f043 0304 	orr.w	r3, r3, #4
 8023bec:	6313      	str	r3, [r2, #48]	; 0x30
 8023bee:	4b59      	ldr	r3, [pc, #356]	; (8023d54 <MX_GPIO_Init+0x18c>)
 8023bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023bf2:	f003 0304 	and.w	r3, r3, #4
 8023bf6:	613b      	str	r3, [r7, #16]
 8023bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8023bfa:	2300      	movs	r3, #0
 8023bfc:	60fb      	str	r3, [r7, #12]
 8023bfe:	4b55      	ldr	r3, [pc, #340]	; (8023d54 <MX_GPIO_Init+0x18c>)
 8023c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c02:	4a54      	ldr	r2, [pc, #336]	; (8023d54 <MX_GPIO_Init+0x18c>)
 8023c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023c08:	6313      	str	r3, [r2, #48]	; 0x30
 8023c0a:	4b52      	ldr	r3, [pc, #328]	; (8023d54 <MX_GPIO_Init+0x18c>)
 8023c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023c12:	60fb      	str	r3, [r7, #12]
 8023c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c16:	2300      	movs	r3, #0
 8023c18:	60bb      	str	r3, [r7, #8]
 8023c1a:	4b4e      	ldr	r3, [pc, #312]	; (8023d54 <MX_GPIO_Init+0x18c>)
 8023c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c1e:	4a4d      	ldr	r2, [pc, #308]	; (8023d54 <MX_GPIO_Init+0x18c>)
 8023c20:	f043 0301 	orr.w	r3, r3, #1
 8023c24:	6313      	str	r3, [r2, #48]	; 0x30
 8023c26:	4b4b      	ldr	r3, [pc, #300]	; (8023d54 <MX_GPIO_Init+0x18c>)
 8023c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c2a:	f003 0301 	and.w	r3, r3, #1
 8023c2e:	60bb      	str	r3, [r7, #8]
 8023c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8023c32:	2300      	movs	r3, #0
 8023c34:	607b      	str	r3, [r7, #4]
 8023c36:	4b47      	ldr	r3, [pc, #284]	; (8023d54 <MX_GPIO_Init+0x18c>)
 8023c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c3a:	4a46      	ldr	r2, [pc, #280]	; (8023d54 <MX_GPIO_Init+0x18c>)
 8023c3c:	f043 0302 	orr.w	r3, r3, #2
 8023c40:	6313      	str	r3, [r2, #48]	; 0x30
 8023c42:	4b44      	ldr	r3, [pc, #272]	; (8023d54 <MX_GPIO_Init+0x18c>)
 8023c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c46:	f003 0302 	and.w	r3, r3, #2
 8023c4a:	607b      	str	r3, [r7, #4]
 8023c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023c4e:	2300      	movs	r3, #0
 8023c50:	603b      	str	r3, [r7, #0]
 8023c52:	4b40      	ldr	r3, [pc, #256]	; (8023d54 <MX_GPIO_Init+0x18c>)
 8023c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c56:	4a3f      	ldr	r2, [pc, #252]	; (8023d54 <MX_GPIO_Init+0x18c>)
 8023c58:	f043 0308 	orr.w	r3, r3, #8
 8023c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8023c5e:	4b3d      	ldr	r3, [pc, #244]	; (8023d54 <MX_GPIO_Init+0x18c>)
 8023c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c62:	f003 0308 	and.w	r3, r3, #8
 8023c66:	603b      	str	r3, [r7, #0]
 8023c68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8023c6a:	2200      	movs	r2, #0
 8023c6c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8023c70:	4839      	ldr	r0, [pc, #228]	; (8023d58 <MX_GPIO_Init+0x190>)
 8023c72:	f003 ff45 	bl	8027b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8023c76:	2201      	movs	r2, #1
 8023c78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8023c7c:	4837      	ldr	r0, [pc, #220]	; (8023d5c <MX_GPIO_Init+0x194>)
 8023c7e:	f003 ff3f 	bl	8027b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8023c82:	2200      	movs	r2, #0
 8023c84:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 8023c88:	4835      	ldr	r0, [pc, #212]	; (8023d60 <MX_GPIO_Init+0x198>)
 8023c8a:	f003 ff39 	bl	8027b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8023c8e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8023c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023c94:	2301      	movs	r3, #1
 8023c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023c98:	2300      	movs	r3, #0
 8023c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023c9c:	2300      	movs	r3, #0
 8023c9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023ca0:	f107 0314 	add.w	r3, r7, #20
 8023ca4:	4619      	mov	r1, r3
 8023ca6:	482c      	ldr	r0, [pc, #176]	; (8023d58 <MX_GPIO_Init+0x190>)
 8023ca8:	f003 fd78 	bl	802779c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8023cac:	2307      	movs	r3, #7
 8023cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023cb0:	2300      	movs	r3, #0
 8023cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023cb4:	2301      	movs	r3, #1
 8023cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023cb8:	f107 0314 	add.w	r3, r7, #20
 8023cbc:	4619      	mov	r1, r3
 8023cbe:	4827      	ldr	r0, [pc, #156]	; (8023d5c <MX_GPIO_Init+0x194>)
 8023cc0:	f003 fd6c 	bl	802779c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023cca:	2301      	movs	r3, #1
 8023ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023cce:	2300      	movs	r3, #0
 8023cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023cd2:	2300      	movs	r3, #0
 8023cd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023cd6:	f107 0314 	add.w	r3, r7, #20
 8023cda:	4619      	mov	r1, r3
 8023cdc:	481f      	ldr	r0, [pc, #124]	; (8023d5c <MX_GPIO_Init+0x194>)
 8023cde:	f003 fd5d 	bl	802779c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 8023ce2:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8023ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023ce8:	2300      	movs	r3, #0
 8023cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023cec:	2300      	movs	r3, #0
 8023cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023cf0:	f107 0314 	add.w	r3, r7, #20
 8023cf4:	4619      	mov	r1, r3
 8023cf6:	4819      	ldr	r0, [pc, #100]	; (8023d5c <MX_GPIO_Init+0x194>)
 8023cf8:	f003 fd50 	bl	802779c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8023cfc:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8023d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023d02:	2301      	movs	r3, #1
 8023d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023d06:	2300      	movs	r3, #0
 8023d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023d0a:	2300      	movs	r3, #0
 8023d0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023d0e:	f107 0314 	add.w	r3, r7, #20
 8023d12:	4619      	mov	r1, r3
 8023d14:	4812      	ldr	r0, [pc, #72]	; (8023d60 <MX_GPIO_Init+0x198>)
 8023d16:	f003 fd41 	bl	802779c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023d20:	2300      	movs	r3, #0
 8023d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023d24:	2301      	movs	r3, #1
 8023d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023d28:	f107 0314 	add.w	r3, r7, #20
 8023d2c:	4619      	mov	r1, r3
 8023d2e:	480c      	ldr	r0, [pc, #48]	; (8023d60 <MX_GPIO_Init+0x198>)
 8023d30:	f003 fd34 	bl	802779c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8023d34:	2304      	movs	r3, #4
 8023d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023d38:	2300      	movs	r3, #0
 8023d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023d3c:	2300      	movs	r3, #0
 8023d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023d40:	f107 0314 	add.w	r3, r7, #20
 8023d44:	4619      	mov	r1, r3
 8023d46:	4807      	ldr	r0, [pc, #28]	; (8023d64 <MX_GPIO_Init+0x19c>)
 8023d48:	f003 fd28 	bl	802779c <HAL_GPIO_Init>

}
 8023d4c:	bf00      	nop
 8023d4e:	3728      	adds	r7, #40	; 0x28
 8023d50:	46bd      	mov	sp, r7
 8023d52:	bd80      	pop	{r7, pc}
 8023d54:	40023800 	.word	0x40023800
 8023d58:	40020800 	.word	0x40020800
 8023d5c:	40020400 	.word	0x40020400
 8023d60:	40020000 	.word	0x40020000
 8023d64:	40020c00 	.word	0x40020c00

08023d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8023d68:	b480      	push	{r7}
 8023d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8023d6c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8023d6e:	e7fe      	b.n	8023d6e <Error_Handler+0x6>

08023d70 <_ZN5MotorC1Ev>:
#include "motor.hpp"

Motor::Motor() {}
 8023d70:	b480      	push	{r7}
 8023d72:	b083      	sub	sp, #12
 8023d74:	af00      	add	r7, sp, #0
 8023d76:	6078      	str	r0, [r7, #4]
 8023d78:	687b      	ldr	r3, [r7, #4]
 8023d7a:	4618      	mov	r0, r3
 8023d7c:	370c      	adds	r7, #12
 8023d7e:	46bd      	mov	sp, r7
 8023d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d84:	4770      	bx	lr
	...

08023d88 <_ZN5Motor4InitEv>:

void Motor::Init()
{
 8023d88:	b580      	push	{r7, lr}
 8023d8a:	b082      	sub	sp, #8
 8023d8c:	af00      	add	r7, sp, #0
 8023d8e:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8023d90:	2104      	movs	r1, #4
 8023d92:	4810      	ldr	r0, [pc, #64]	; (8023dd4 <_ZN5Motor4InitEv+0x4c>)
 8023d94:	f005 f9fc 	bl	8029190 <HAL_TIM_PWM_Start>
 8023d98:	4603      	mov	r3, r0
 8023d9a:	2b00      	cmp	r3, #0
 8023d9c:	bf14      	ite	ne
 8023d9e:	2301      	movne	r3, #1
 8023da0:	2300      	moveq	r3, #0
 8023da2:	b2db      	uxtb	r3, r3
 8023da4:	2b00      	cmp	r3, #0
 8023da6:	d002      	beq.n	8023dae <_ZN5Motor4InitEv+0x26>
    {
        Error_Handler(); // MOTOR_R
 8023da8:	f7ff ffde 	bl	8023d68 <Error_Handler>
    }
    else if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
    {
        Error_Handler(); // MOTOR_L
    }
}
 8023dac:	e00d      	b.n	8023dca <_ZN5Motor4InitEv+0x42>
    else if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8023dae:	210c      	movs	r1, #12
 8023db0:	4808      	ldr	r0, [pc, #32]	; (8023dd4 <_ZN5Motor4InitEv+0x4c>)
 8023db2:	f005 f9ed 	bl	8029190 <HAL_TIM_PWM_Start>
 8023db6:	4603      	mov	r3, r0
 8023db8:	2b00      	cmp	r3, #0
 8023dba:	bf14      	ite	ne
 8023dbc:	2301      	movne	r3, #1
 8023dbe:	2300      	moveq	r3, #0
 8023dc0:	b2db      	uxtb	r3, r3
 8023dc2:	2b00      	cmp	r3, #0
 8023dc4:	d001      	beq.n	8023dca <_ZN5Motor4InitEv+0x42>
        Error_Handler(); // MOTOR_L
 8023dc6:	f7ff ffcf 	bl	8023d68 <Error_Handler>
}
 8023dca:	bf00      	nop
 8023dcc:	3708      	adds	r7, #8
 8023dce:	46bd      	mov	sp, r7
 8023dd0:	bd80      	pop	{r7, pc}
 8023dd2:	bf00      	nop
 8023dd4:	20000a2c 	.word	0x20000a2c

08023dd8 <_ZN5Motor5DriveEff>:

void Motor::Drive(float translation_ratio, float rotation_ratio)
{
 8023dd8:	b580      	push	{r7, lr}
 8023dda:	b08a      	sub	sp, #40	; 0x28
 8023ddc:	af00      	add	r7, sp, #0
 8023dde:	60f8      	str	r0, [r7, #12]
 8023de0:	ed87 0a02 	vstr	s0, [r7, #8]
 8023de4:	edc7 0a01 	vstr	s1, [r7, #4]
#ifdef DEBUG_MODE
    g_translation_ratio = translation_ratio;  g_rotation_ratio = rotation_ratio;
 8023de8:	4a89      	ldr	r2, [pc, #548]	; (8024010 <_ZN5Motor5DriveEff+0x238>)
 8023dea:	68bb      	ldr	r3, [r7, #8]
 8023dec:	6013      	str	r3, [r2, #0]
 8023dee:	4a89      	ldr	r2, [pc, #548]	; (8024014 <_ZN5Motor5DriveEff+0x23c>)
 8023df0:	687b      	ldr	r3, [r7, #4]
 8023df2:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(translation_ratio > LIMIT_TRANS_DUTY)       translation_ratio =  LIMIT_TRANS_DUTY;
 8023df4:	68b8      	ldr	r0, [r7, #8]
 8023df6:	f7fc fa87 	bl	8020308 <__aeabi_f2d>
 8023dfa:	a381      	add	r3, pc, #516	; (adr r3, 8024000 <_ZN5Motor5DriveEff+0x228>)
 8023dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e00:	f7fc fd6a 	bl	80208d8 <__aeabi_dcmpgt>
 8023e04:	4603      	mov	r3, r0
 8023e06:	2b00      	cmp	r3, #0
 8023e08:	d002      	beq.n	8023e10 <_ZN5Motor5DriveEff+0x38>
 8023e0a:	4b83      	ldr	r3, [pc, #524]	; (8024018 <_ZN5Motor5DriveEff+0x240>)
 8023e0c:	60bb      	str	r3, [r7, #8]
 8023e0e:	e00c      	b.n	8023e2a <_ZN5Motor5DriveEff+0x52>
    else if(translation_ratio < -LIMIT_TRANS_DUTY) translation_ratio = -LIMIT_TRANS_DUTY;
 8023e10:	68b8      	ldr	r0, [r7, #8]
 8023e12:	f7fc fa79 	bl	8020308 <__aeabi_f2d>
 8023e16:	a37c      	add	r3, pc, #496	; (adr r3, 8024008 <_ZN5Motor5DriveEff+0x230>)
 8023e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e1c:	f7fc fd3e 	bl	802089c <__aeabi_dcmplt>
 8023e20:	4603      	mov	r3, r0
 8023e22:	2b00      	cmp	r3, #0
 8023e24:	d001      	beq.n	8023e2a <_ZN5Motor5DriveEff+0x52>
 8023e26:	4b7d      	ldr	r3, [pc, #500]	; (802401c <_ZN5Motor5DriveEff+0x244>)
 8023e28:	60bb      	str	r3, [r7, #8]

    float sum = translation_ratio + rotation_ratio;
 8023e2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8023e2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8023e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023e36:	edc7 7a06 	vstr	s15, [r7, #24]
    float excess = 0;
 8023e3a:	f04f 0300 	mov.w	r3, #0
 8023e3e:	627b      	str	r3, [r7, #36]	; 0x24

    if(sum > 1.0)       excess = sum - 1.0;
 8023e40:	edd7 7a06 	vldr	s15, [r7, #24]
 8023e44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e50:	dd08      	ble.n	8023e64 <_ZN5Motor5DriveEff+0x8c>
 8023e52:	edd7 7a06 	vldr	s15, [r7, #24]
 8023e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023e5e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8023e62:	e010      	b.n	8023e86 <_ZN5Motor5DriveEff+0xae>
    else if(sum < -1.0) excess = sum + 1.0;
 8023e64:	edd7 7a06 	vldr	s15, [r7, #24]
 8023e68:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e74:	d507      	bpl.n	8023e86 <_ZN5Motor5DriveEff+0xae>
 8023e76:	edd7 7a06 	vldr	s15, [r7, #24]
 8023e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023e82:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    translation_ratio -= excess;
 8023e86:	ed97 7a02 	vldr	s14, [r7, #8]
 8023e8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8023e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023e92:	edc7 7a02 	vstr	s15, [r7, #8]

#ifdef DEBUG_MODE
    g_sum_raito = sum;  g_excess_ratio = excess;  g_reduced_translation = translation_ratio;
 8023e96:	4a62      	ldr	r2, [pc, #392]	; (8024020 <_ZN5Motor5DriveEff+0x248>)
 8023e98:	69bb      	ldr	r3, [r7, #24]
 8023e9a:	6013      	str	r3, [r2, #0]
 8023e9c:	4a61      	ldr	r2, [pc, #388]	; (8024024 <_ZN5Motor5DriveEff+0x24c>)
 8023e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023ea0:	6013      	str	r3, [r2, #0]
 8023ea2:	4a61      	ldr	r2, [pc, #388]	; (8024028 <_ZN5Motor5DriveEff+0x250>)
 8023ea4:	68bb      	ldr	r3, [r7, #8]
 8023ea6:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float duty_l = translation_ratio - rotation_ratio;
 8023ea8:	ed97 7a02 	vldr	s14, [r7, #8]
 8023eac:	edd7 7a01 	vldr	s15, [r7, #4]
 8023eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023eb4:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_r = translation_ratio + rotation_ratio;
 8023eb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8023ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8023ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023ec4:	edc7 7a07 	vstr	s15, [r7, #28]

    if(duty_l > 1.0)       duty_l =  1.0;
 8023ec8:	edd7 7a08 	vldr	s15, [r7, #32]
 8023ecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ed8:	dd03      	ble.n	8023ee2 <_ZN5Motor5DriveEff+0x10a>
 8023eda:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023ede:	623b      	str	r3, [r7, #32]
 8023ee0:	e00a      	b.n	8023ef8 <_ZN5Motor5DriveEff+0x120>
    else if(duty_l < -1.0) duty_l = -1.0;
 8023ee2:	edd7 7a08 	vldr	s15, [r7, #32]
 8023ee6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ef2:	d501      	bpl.n	8023ef8 <_ZN5Motor5DriveEff+0x120>
 8023ef4:	4b4d      	ldr	r3, [pc, #308]	; (802402c <_ZN5Motor5DriveEff+0x254>)
 8023ef6:	623b      	str	r3, [r7, #32]

    if(duty_r > 1.0)       duty_r =  1.0;
 8023ef8:	edd7 7a07 	vldr	s15, [r7, #28]
 8023efc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f08:	dd03      	ble.n	8023f12 <_ZN5Motor5DriveEff+0x13a>
 8023f0a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023f0e:	61fb      	str	r3, [r7, #28]
 8023f10:	e00a      	b.n	8023f28 <_ZN5Motor5DriveEff+0x150>
    else if(duty_r < -1.0) duty_r = -1.0;
 8023f12:	edd7 7a07 	vldr	s15, [r7, #28]
 8023f16:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f22:	d501      	bpl.n	8023f28 <_ZN5Motor5DriveEff+0x150>
 8023f24:	4b41      	ldr	r3, [pc, #260]	; (802402c <_ZN5Motor5DriveEff+0x254>)
 8023f26:	61fb      	str	r3, [r7, #28]

#ifdef DEBUG_MODE
    g_duty_l = duty_l;  g_duty_r = duty_r;
 8023f28:	4a41      	ldr	r2, [pc, #260]	; (8024030 <_ZN5Motor5DriveEff+0x258>)
 8023f2a:	6a3b      	ldr	r3, [r7, #32]
 8023f2c:	6013      	str	r3, [r2, #0]
 8023f2e:	4a41      	ldr	r2, [pc, #260]	; (8024034 <_ZN5Motor5DriveEff+0x25c>)
 8023f30:	69fb      	ldr	r3, [r7, #28]
 8023f32:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int16_t count_l = static_cast<int16_t>(COUNTER_PERIOD * duty_l);
 8023f34:	edd7 7a08 	vldr	s15, [r7, #32]
 8023f38:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8024038 <_ZN5Motor5DriveEff+0x260>
 8023f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023f44:	ee17 3a90 	vmov	r3, s15
 8023f48:	b21b      	sxth	r3, r3
 8023f4a:	82fb      	strh	r3, [r7, #22]
    int16_t count_r = static_cast<int16_t>(COUNTER_PERIOD * duty_r);
 8023f4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8023f50:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8024038 <_ZN5Motor5DriveEff+0x260>
 8023f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023f5c:	ee17 3a90 	vmov	r3, s15
 8023f60:	b21b      	sxth	r3, r3
 8023f62:	82bb      	strh	r3, [r7, #20]

    if(count_l < 0) { count_l *= -1; BACKWARD_L; }
 8023f64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023f68:	2b00      	cmp	r3, #0
 8023f6a:	da0d      	bge.n	8023f88 <_ZN5Motor5DriveEff+0x1b0>
 8023f6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023f70:	b29b      	uxth	r3, r3
 8023f72:	425b      	negs	r3, r3
 8023f74:	b29b      	uxth	r3, r3
 8023f76:	b21b      	sxth	r3, r3
 8023f78:	82fb      	strh	r3, [r7, #22]
 8023f7a:	2200      	movs	r2, #0
 8023f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023f80:	482e      	ldr	r0, [pc, #184]	; (802403c <_ZN5Motor5DriveEff+0x264>)
 8023f82:	f003 fdbd 	bl	8027b00 <HAL_GPIO_WritePin>
 8023f86:	e009      	b.n	8023f9c <_ZN5Motor5DriveEff+0x1c4>
    else if(count_l >= 0) FORWARD_L;
 8023f88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023f8c:	2b00      	cmp	r3, #0
 8023f8e:	db05      	blt.n	8023f9c <_ZN5Motor5DriveEff+0x1c4>
 8023f90:	2201      	movs	r2, #1
 8023f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023f96:	4829      	ldr	r0, [pc, #164]	; (802403c <_ZN5Motor5DriveEff+0x264>)
 8023f98:	f003 fdb2 	bl	8027b00 <HAL_GPIO_WritePin>

    if(count_r < 0) { count_r *= -1; BACKWARD_R; }
 8023f9c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023fa0:	2b00      	cmp	r3, #0
 8023fa2:	da0d      	bge.n	8023fc0 <_ZN5Motor5DriveEff+0x1e8>
 8023fa4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023fa8:	b29b      	uxth	r3, r3
 8023faa:	425b      	negs	r3, r3
 8023fac:	b29b      	uxth	r3, r3
 8023fae:	b21b      	sxth	r3, r3
 8023fb0:	82bb      	strh	r3, [r7, #20]
 8023fb2:	2201      	movs	r2, #1
 8023fb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023fb8:	4820      	ldr	r0, [pc, #128]	; (802403c <_ZN5Motor5DriveEff+0x264>)
 8023fba:	f003 fda1 	bl	8027b00 <HAL_GPIO_WritePin>
 8023fbe:	e009      	b.n	8023fd4 <_ZN5Motor5DriveEff+0x1fc>
    else if(count_r >= 0) FORWARD_R;
 8023fc0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023fc4:	2b00      	cmp	r3, #0
 8023fc6:	db05      	blt.n	8023fd4 <_ZN5Motor5DriveEff+0x1fc>
 8023fc8:	2200      	movs	r2, #0
 8023fca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023fce:	481b      	ldr	r0, [pc, #108]	; (802403c <_ZN5Motor5DriveEff+0x264>)
 8023fd0:	f003 fd96 	bl	8027b00 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, count_l);
 8023fd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023fd8:	4b19      	ldr	r3, [pc, #100]	; (8024040 <_ZN5Motor5DriveEff+0x268>)
 8023fda:	681b      	ldr	r3, [r3, #0]
 8023fdc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, count_r);
 8023fde:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8023fe2:	4b17      	ldr	r3, [pc, #92]	; (8024040 <_ZN5Motor5DriveEff+0x268>)
 8023fe4:	681b      	ldr	r3, [r3, #0]
 8023fe6:	641a      	str	r2, [r3, #64]	; 0x40

#ifdef DEBUG_MODE
    g_motor_compare_l = count_l;  g_motor_compare_r = count_r;
 8023fe8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023fec:	4b15      	ldr	r3, [pc, #84]	; (8024044 <_ZN5Motor5DriveEff+0x26c>)
 8023fee:	801a      	strh	r2, [r3, #0]
 8023ff0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8023ff4:	4b14      	ldr	r3, [pc, #80]	; (8024048 <_ZN5Motor5DriveEff+0x270>)
 8023ff6:	801a      	strh	r2, [r3, #0]
#endif // DEBUG_MODE
 8023ff8:	bf00      	nop
 8023ffa:	3728      	adds	r7, #40	; 0x28
 8023ffc:	46bd      	mov	sp, r7
 8023ffe:	bd80      	pop	{r7, pc}
 8024000:	cccccccd 	.word	0xcccccccd
 8024004:	3feccccc 	.word	0x3feccccc
 8024008:	cccccccd 	.word	0xcccccccd
 802400c:	bfeccccc 	.word	0xbfeccccc
 8024010:	200002b0 	.word	0x200002b0
 8024014:	200002b4 	.word	0x200002b4
 8024018:	3f666666 	.word	0x3f666666
 802401c:	bf666666 	.word	0xbf666666
 8024020:	200002b8 	.word	0x200002b8
 8024024:	200002bc 	.word	0x200002bc
 8024028:	200002c0 	.word	0x200002c0
 802402c:	bf800000 	.word	0xbf800000
 8024030:	200002c4 	.word	0x200002c4
 8024034:	200002c8 	.word	0x200002c8
 8024038:	44832000 	.word	0x44832000
 802403c:	40020000 	.word	0x40020000
 8024040:	20000a2c 	.word	0x20000a2c
 8024044:	200002cc 	.word	0x200002cc
 8024048:	200002ce 	.word	0x200002ce

0802404c <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 802404c:	b580      	push	{r7, lr}
 802404e:	b084      	sub	sp, #16
 8024050:	af00      	add	r7, sp, #0
 8024052:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 8024054:	2300      	movs	r3, #0
 8024056:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 8024058:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802405c:	4821      	ldr	r0, [pc, #132]	; (80240e4 <_ZN12RotarySwitch5StateEv+0x98>)
 802405e:	f003 fd37 	bl	8027ad0 <HAL_GPIO_ReadPin>
 8024062:	4603      	mov	r3, r0
 8024064:	2b00      	cmp	r3, #0
 8024066:	bf0c      	ite	eq
 8024068:	2301      	moveq	r3, #1
 802406a:	2300      	movne	r3, #0
 802406c:	b2db      	uxtb	r3, r3
 802406e:	2b00      	cmp	r3, #0
 8024070:	d003      	beq.n	802407a <_ZN12RotarySwitch5StateEv+0x2e>
 8024072:	7bfb      	ldrb	r3, [r7, #15]
 8024074:	f043 0301 	orr.w	r3, r3, #1
 8024078:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 802407a:	2104      	movs	r1, #4
 802407c:	481a      	ldr	r0, [pc, #104]	; (80240e8 <_ZN12RotarySwitch5StateEv+0x9c>)
 802407e:	f003 fd27 	bl	8027ad0 <HAL_GPIO_ReadPin>
 8024082:	4603      	mov	r3, r0
 8024084:	2b00      	cmp	r3, #0
 8024086:	bf0c      	ite	eq
 8024088:	2301      	moveq	r3, #1
 802408a:	2300      	movne	r3, #0
 802408c:	b2db      	uxtb	r3, r3
 802408e:	2b00      	cmp	r3, #0
 8024090:	d003      	beq.n	802409a <_ZN12RotarySwitch5StateEv+0x4e>
 8024092:	7bfb      	ldrb	r3, [r7, #15]
 8024094:	f043 0302 	orr.w	r3, r3, #2
 8024098:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 802409a:	2102      	movs	r1, #2
 802409c:	4812      	ldr	r0, [pc, #72]	; (80240e8 <_ZN12RotarySwitch5StateEv+0x9c>)
 802409e:	f003 fd17 	bl	8027ad0 <HAL_GPIO_ReadPin>
 80240a2:	4603      	mov	r3, r0
 80240a4:	2b00      	cmp	r3, #0
 80240a6:	bf0c      	ite	eq
 80240a8:	2301      	moveq	r3, #1
 80240aa:	2300      	movne	r3, #0
 80240ac:	b2db      	uxtb	r3, r3
 80240ae:	2b00      	cmp	r3, #0
 80240b0:	d003      	beq.n	80240ba <_ZN12RotarySwitch5StateEv+0x6e>
 80240b2:	7bfb      	ldrb	r3, [r7, #15]
 80240b4:	f043 0304 	orr.w	r3, r3, #4
 80240b8:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 80240ba:	2101      	movs	r1, #1
 80240bc:	480a      	ldr	r0, [pc, #40]	; (80240e8 <_ZN12RotarySwitch5StateEv+0x9c>)
 80240be:	f003 fd07 	bl	8027ad0 <HAL_GPIO_ReadPin>
 80240c2:	4603      	mov	r3, r0
 80240c4:	2b00      	cmp	r3, #0
 80240c6:	bf0c      	ite	eq
 80240c8:	2301      	moveq	r3, #1
 80240ca:	2300      	movne	r3, #0
 80240cc:	b2db      	uxtb	r3, r3
 80240ce:	2b00      	cmp	r3, #0
 80240d0:	d003      	beq.n	80240da <_ZN12RotarySwitch5StateEv+0x8e>
 80240d2:	7bfb      	ldrb	r3, [r7, #15]
 80240d4:	f043 0308 	orr.w	r3, r3, #8
 80240d8:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 80240da:	7bfb      	ldrb	r3, [r7, #15]
 80240dc:	4618      	mov	r0, r3
 80240de:	3710      	adds	r7, #16
 80240e0:	46bd      	mov	sp, r7
 80240e2:	bd80      	pop	{r7, pc}
 80240e4:	40020000 	.word	0x40020000
 80240e8:	40020400 	.word	0x40020400

080240ec <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0), write_state_flags_(0), exception_flags_(0), master_count_(0), corner_marker_count_(0), cross_line_count_(0) {}
 80240ec:	b480      	push	{r7}
 80240ee:	b083      	sub	sp, #12
 80240f0:	af00      	add	r7, sp, #0
 80240f2:	6078      	str	r0, [r7, #4]
 80240f4:	687b      	ldr	r3, [r7, #4]
 80240f6:	2200      	movs	r2, #0
 80240f8:	701a      	strb	r2, [r3, #0]
 80240fa:	687b      	ldr	r3, [r7, #4]
 80240fc:	2200      	movs	r2, #0
 80240fe:	705a      	strb	r2, [r3, #1]
 8024100:	687b      	ldr	r3, [r7, #4]
 8024102:	2200      	movs	r2, #0
 8024104:	709a      	strb	r2, [r3, #2]
 8024106:	687b      	ldr	r3, [r7, #4]
 8024108:	2200      	movs	r2, #0
 802410a:	70da      	strb	r2, [r3, #3]
 802410c:	687b      	ldr	r3, [r7, #4]
 802410e:	2200      	movs	r2, #0
 8024110:	711a      	strb	r2, [r3, #4]
 8024112:	687b      	ldr	r3, [r7, #4]
 8024114:	2200      	movs	r2, #0
 8024116:	715a      	strb	r2, [r3, #5]
 8024118:	687b      	ldr	r3, [r7, #4]
 802411a:	4618      	mov	r0, r3
 802411c:	370c      	adds	r7, #12
 802411e:	46bd      	mov	sp, r7
 8024120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024124:	4770      	bx	lr
	...

08024128 <_ZN10SideSensor12SensorUpdateEv>:

void SideSensor::SensorUpdate()
{
 8024128:	b580      	push	{r7, lr}
 802412a:	b084      	sub	sp, #16
 802412c:	af00      	add	r7, sp, #0
 802412e:	6078      	str	r0, [r7, #4]
    uint8_t io_state = 0xFF; // Lower bits represent the positions of sensors.
 8024130:	23ff      	movs	r3, #255	; 0xff
 8024132:	73fb      	strb	r3, [r7, #15]

    if(IO_OUTSIDE_L == 0) io_state &= 0xF7; // 0111
 8024134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8024138:	4849      	ldr	r0, [pc, #292]	; (8024260 <_ZN10SideSensor12SensorUpdateEv+0x138>)
 802413a:	f003 fcc9 	bl	8027ad0 <HAL_GPIO_ReadPin>
 802413e:	4603      	mov	r3, r0
 8024140:	2b00      	cmp	r3, #0
 8024142:	bf0c      	ite	eq
 8024144:	2301      	moveq	r3, #1
 8024146:	2300      	movne	r3, #0
 8024148:	b2db      	uxtb	r3, r3
 802414a:	2b00      	cmp	r3, #0
 802414c:	d003      	beq.n	8024156 <_ZN10SideSensor12SensorUpdateEv+0x2e>
 802414e:	7bfb      	ldrb	r3, [r7, #15]
 8024150:	f023 0308 	bic.w	r3, r3, #8
 8024154:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_L == 0)  io_state &= 0xFB; // 1011
 8024156:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802415a:	4841      	ldr	r0, [pc, #260]	; (8024260 <_ZN10SideSensor12SensorUpdateEv+0x138>)
 802415c:	f003 fcb8 	bl	8027ad0 <HAL_GPIO_ReadPin>
 8024160:	4603      	mov	r3, r0
 8024162:	2b00      	cmp	r3, #0
 8024164:	bf0c      	ite	eq
 8024166:	2301      	moveq	r3, #1
 8024168:	2300      	movne	r3, #0
 802416a:	b2db      	uxtb	r3, r3
 802416c:	2b00      	cmp	r3, #0
 802416e:	d003      	beq.n	8024178 <_ZN10SideSensor12SensorUpdateEv+0x50>
 8024170:	7bfb      	ldrb	r3, [r7, #15]
 8024172:	f023 0304 	bic.w	r3, r3, #4
 8024176:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_R == 0)  io_state &= 0xFD; // 1101
 8024178:	f44f 7180 	mov.w	r1, #256	; 0x100
 802417c:	4838      	ldr	r0, [pc, #224]	; (8024260 <_ZN10SideSensor12SensorUpdateEv+0x138>)
 802417e:	f003 fca7 	bl	8027ad0 <HAL_GPIO_ReadPin>
 8024182:	4603      	mov	r3, r0
 8024184:	2b00      	cmp	r3, #0
 8024186:	bf0c      	ite	eq
 8024188:	2301      	moveq	r3, #1
 802418a:	2300      	movne	r3, #0
 802418c:	b2db      	uxtb	r3, r3
 802418e:	2b00      	cmp	r3, #0
 8024190:	d003      	beq.n	802419a <_ZN10SideSensor12SensorUpdateEv+0x72>
 8024192:	7bfb      	ldrb	r3, [r7, #15]
 8024194:	f023 0302 	bic.w	r3, r3, #2
 8024198:	73fb      	strb	r3, [r7, #15]
    if(IO_OUTSIDE_R == 0) io_state &= 0xFE; // 1110
 802419a:	2104      	movs	r1, #4
 802419c:	4831      	ldr	r0, [pc, #196]	; (8024264 <_ZN10SideSensor12SensorUpdateEv+0x13c>)
 802419e:	f003 fc97 	bl	8027ad0 <HAL_GPIO_ReadPin>
 80241a2:	4603      	mov	r3, r0
 80241a4:	2b00      	cmp	r3, #0
 80241a6:	bf0c      	ite	eq
 80241a8:	2301      	moveq	r3, #1
 80241aa:	2300      	movne	r3, #0
 80241ac:	b2db      	uxtb	r3, r3
 80241ae:	2b00      	cmp	r3, #0
 80241b0:	d003      	beq.n	80241ba <_ZN10SideSensor12SensorUpdateEv+0x92>
 80241b2:	7bfb      	ldrb	r3, [r7, #15]
 80241b4:	f023 0301 	bic.w	r3, r3, #1
 80241b8:	73fb      	strb	r3, [r7, #15]

    read_state_flags_ <<= 4;
 80241ba:	687b      	ldr	r3, [r7, #4]
 80241bc:	781b      	ldrb	r3, [r3, #0]
 80241be:	011b      	lsls	r3, r3, #4
 80241c0:	b2da      	uxtb	r2, r3
 80241c2:	687b      	ldr	r3, [r7, #4]
 80241c4:	701a      	strb	r2, [r3, #0]

    switch(io_state)
 80241c6:	7bfb      	ldrb	r3, [r7, #15]
 80241c8:	3bf0      	subs	r3, #240	; 0xf0
 80241ca:	2b0f      	cmp	r3, #15
 80241cc:	d842      	bhi.n	8024254 <_ZN10SideSensor12SensorUpdateEv+0x12c>
 80241ce:	a201      	add	r2, pc, #4	; (adr r2, 80241d4 <_ZN10SideSensor12SensorUpdateEv+0xac>)
 80241d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80241d4:	08024245 	.word	0x08024245
 80241d8:	08024245 	.word	0x08024245
 80241dc:	08024245 	.word	0x08024245
 80241e0:	08024235 	.word	0x08024235
 80241e4:	08024245 	.word	0x08024245
 80241e8:	08024255 	.word	0x08024255
 80241ec:	08024245 	.word	0x08024245
 80241f0:	08024235 	.word	0x08024235
 80241f4:	08024245 	.word	0x08024245
 80241f8:	08024245 	.word	0x08024245
 80241fc:	08024255 	.word	0x08024255
 8024200:	08024235 	.word	0x08024235
 8024204:	08024225 	.word	0x08024225
 8024208:	08024255 	.word	0x08024255
 802420c:	08024255 	.word	0x08024255
 8024210:	08024215 	.word	0x08024215
    {
        case 0xFF: // 1111
            read_state_flags_ |= 0x08; break;
 8024214:	687b      	ldr	r3, [r7, #4]
 8024216:	781b      	ldrb	r3, [r3, #0]
 8024218:	f043 0308 	orr.w	r3, r3, #8
 802421c:	b2da      	uxtb	r2, r3
 802421e:	687b      	ldr	r3, [r7, #4]
 8024220:	701a      	strb	r2, [r3, #0]
 8024222:	e018      	b.n	8024256 <_ZN10SideSensor12SensorUpdateEv+0x12e>
        case 0xFC: // 1100  If through goal, increase pattern.
            read_state_flags_ |= 0x04; break;
 8024224:	687b      	ldr	r3, [r7, #4]
 8024226:	781b      	ldrb	r3, [r3, #0]
 8024228:	f043 0304 	orr.w	r3, r3, #4
 802422c:	b2da      	uxtb	r2, r3
 802422e:	687b      	ldr	r3, [r7, #4]
 8024230:	701a      	strb	r2, [r3, #0]
 8024232:	e010      	b.n	8024256 <_ZN10SideSensor12SensorUpdateEv+0x12e>
        case 0xFB: // 1011
        case 0xF7: // 0111
        case 0xF3: // 0011
            read_state_flags_ |= 0x02; break;
 8024234:	687b      	ldr	r3, [r7, #4]
 8024236:	781b      	ldrb	r3, [r3, #0]
 8024238:	f043 0302 	orr.w	r3, r3, #2
 802423c:	b2da      	uxtb	r2, r3
 802423e:	687b      	ldr	r3, [r7, #4]
 8024240:	701a      	strb	r2, [r3, #0]
 8024242:	e008      	b.n	8024256 <_ZN10SideSensor12SensorUpdateEv+0x12e>
        case 0xF4: // 0100
        case 0xF0: // 0000
        case 0xF1: // 0001
        case 0xF8: // 1000
        case 0xF9: // 1001
            read_state_flags_ |= 0x01; break;
 8024244:	687b      	ldr	r3, [r7, #4]
 8024246:	781b      	ldrb	r3, [r3, #0]
 8024248:	f043 0301 	orr.w	r3, r3, #1
 802424c:	b2da      	uxtb	r2, r3
 802424e:	687b      	ldr	r3, [r7, #4]
 8024250:	701a      	strb	r2, [r3, #0]
 8024252:	e000      	b.n	8024256 <_ZN10SideSensor12SensorUpdateEv+0x12e>
        default: break;
 8024254:	bf00      	nop
    }
}
 8024256:	bf00      	nop
 8024258:	3710      	adds	r7, #16
 802425a:	46bd      	mov	sp, r7
 802425c:	bd80      	pop	{r7, pc}
 802425e:	bf00      	nop
 8024260:	40020400 	.word	0x40020400
 8024264:	40020c00 	.word	0x40020c00

08024268 <_ZN10SideSensor14IgnoreJudgmentEv>:

void SideSensor::IgnoreJudgment()
{
 8024268:	b580      	push	{r7, lr}
 802426a:	b084      	sub	sp, #16
 802426c:	af00      	add	r7, sp, #0
 802426e:	6078      	str	r0, [r7, #4]
    uint8_t ignore_flag = exception_flags_ & 0x01;
 8024270:	687b      	ldr	r3, [r7, #4]
 8024272:	789b      	ldrb	r3, [r3, #2]
 8024274:	f003 0301 	and.w	r3, r3, #1
 8024278:	73fb      	strb	r3, [r7, #15]

#ifdef DEBUG_MODE
    g_ignore_flag = ignore_flag;
 802427a:	4a22      	ldr	r2, [pc, #136]	; (8024304 <_ZN10SideSensor14IgnoreJudgmentEv+0x9c>)
 802427c:	7bfb      	ldrb	r3, [r7, #15]
 802427e:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(ignore_flag == 0x01)
 8024280:	7bfb      	ldrb	r3, [r7, #15]
 8024282:	2b01      	cmp	r3, #1
 8024284:	d111      	bne.n	80242aa <_ZN10SideSensor14IgnoreJudgmentEv+0x42>
    {
        if(master_count_ < IGNORE_COUNT) master_count_++;
 8024286:	687b      	ldr	r3, [r7, #4]
 8024288:	78db      	ldrb	r3, [r3, #3]
 802428a:	2b04      	cmp	r3, #4
 802428c:	d806      	bhi.n	802429c <_ZN10SideSensor14IgnoreJudgmentEv+0x34>
 802428e:	687b      	ldr	r3, [r7, #4]
 8024290:	78db      	ldrb	r3, [r3, #3]
 8024292:	3301      	adds	r3, #1
 8024294:	b2da      	uxtb	r2, r3
 8024296:	687b      	ldr	r3, [r7, #4]
 8024298:	70da      	strb	r2, [r3, #3]
        {
            exception_flags_ &= 0xF3;
            CountUp();
        }
    }
}
 802429a:	e02e      	b.n	80242fa <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
        else exception_flags_ >>= 1; 
 802429c:	687b      	ldr	r3, [r7, #4]
 802429e:	789b      	ldrb	r3, [r3, #2]
 80242a0:	105b      	asrs	r3, r3, #1
 80242a2:	b2da      	uxtb	r2, r3
 80242a4:	687b      	ldr	r3, [r7, #4]
 80242a6:	709a      	strb	r2, [r3, #2]
}
 80242a8:	e027      	b.n	80242fa <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
    else if(ignore_flag == 0x00)
 80242aa:	7bfb      	ldrb	r3, [r7, #15]
 80242ac:	2b00      	cmp	r3, #0
 80242ae:	d124      	bne.n	80242fa <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
        SensorUpdate();
 80242b0:	6878      	ldr	r0, [r7, #4]
 80242b2:	f7ff ff39 	bl	8024128 <_ZN10SideSensor12SensorUpdateEv>
        uint8_t now_state = read_state_flags_;
 80242b6:	687b      	ldr	r3, [r7, #4]
 80242b8:	781b      	ldrb	r3, [r3, #0]
 80242ba:	73bb      	strb	r3, [r7, #14]
        uint8_t pre_state = (now_state << 4) | (now_state >> 4);
 80242bc:	7bbb      	ldrb	r3, [r7, #14]
 80242be:	011b      	lsls	r3, r3, #4
 80242c0:	b25a      	sxtb	r2, r3
 80242c2:	7bbb      	ldrb	r3, [r7, #14]
 80242c4:	111b      	asrs	r3, r3, #4
 80242c6:	b25b      	sxtb	r3, r3
 80242c8:	4313      	orrs	r3, r2
 80242ca:	b25b      	sxtb	r3, r3
 80242cc:	737b      	strb	r3, [r7, #13]
        if(pre_state != now_state)
 80242ce:	7b7a      	ldrb	r2, [r7, #13]
 80242d0:	7bbb      	ldrb	r3, [r7, #14]
 80242d2:	429a      	cmp	r2, r3
 80242d4:	d003      	beq.n	80242de <_ZN10SideSensor14IgnoreJudgmentEv+0x76>
            NoiseTolerance();
 80242d6:	6878      	ldr	r0, [r7, #4]
 80242d8:	f000 f816 	bl	8024308 <_ZN10SideSensor14NoiseToleranceEv>
}
 80242dc:	e00d      	b.n	80242fa <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
        else if(pre_state == now_state)
 80242de:	7b7a      	ldrb	r2, [r7, #13]
 80242e0:	7bbb      	ldrb	r3, [r7, #14]
 80242e2:	429a      	cmp	r2, r3
 80242e4:	d109      	bne.n	80242fa <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
            exception_flags_ &= 0xF3;
 80242e6:	687b      	ldr	r3, [r7, #4]
 80242e8:	789b      	ldrb	r3, [r3, #2]
 80242ea:	f023 030c 	bic.w	r3, r3, #12
 80242ee:	b2da      	uxtb	r2, r3
 80242f0:	687b      	ldr	r3, [r7, #4]
 80242f2:	709a      	strb	r2, [r3, #2]
            CountUp();
 80242f4:	6878      	ldr	r0, [r7, #4]
 80242f6:	f000 f855 	bl	80243a4 <_ZN10SideSensor7CountUpEv>
}
 80242fa:	bf00      	nop
 80242fc:	3710      	adds	r7, #16
 80242fe:	46bd      	mov	sp, r7
 8024300:	bd80      	pop	{r7, pc}
 8024302:	bf00      	nop
 8024304:	2000024d 	.word	0x2000024d

08024308 <_ZN10SideSensor14NoiseToleranceEv>:

void SideSensor::NoiseTolerance()
{
 8024308:	b580      	push	{r7, lr}
 802430a:	b084      	sub	sp, #16
 802430c:	af00      	add	r7, sp, #0
 802430e:	6078      	str	r0, [r7, #4]
    uint8_t noise_count = (exception_flags_ & 0x0C) >> 2;
 8024310:	687b      	ldr	r3, [r7, #4]
 8024312:	789b      	ldrb	r3, [r3, #2]
 8024314:	109b      	asrs	r3, r3, #2
 8024316:	b2db      	uxtb	r3, r3
 8024318:	f003 0303 	and.w	r3, r3, #3
 802431c:	73fb      	strb	r3, [r7, #15]

    if(noise_count == 0x00)
 802431e:	7bfb      	ldrb	r3, [r7, #15]
 8024320:	2b00      	cmp	r3, #0
 8024322:	d11f      	bne.n	8024364 <_ZN10SideSensor14NoiseToleranceEv+0x5c>
    {
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ & 0xF0);
 8024324:	687b      	ldr	r3, [r7, #4]
 8024326:	789b      	ldrb	r3, [r3, #2]
 8024328:	f003 030f 	and.w	r3, r3, #15
 802432c:	b2da      	uxtb	r2, r3
 802432e:	687b      	ldr	r3, [r7, #4]
 8024330:	781b      	ldrb	r3, [r3, #0]
 8024332:	f023 030f 	bic.w	r3, r3, #15
 8024336:	b2db      	uxtb	r3, r3
 8024338:	4313      	orrs	r3, r2
 802433a:	b2da      	uxtb	r2, r3
 802433c:	687b      	ldr	r3, [r7, #4]
 802433e:	709a      	strb	r2, [r3, #2]
        noise_count++;
 8024340:	7bfb      	ldrb	r3, [r7, #15]
 8024342:	3301      	adds	r3, #1
 8024344:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8024346:	687b      	ldr	r3, [r7, #4]
 8024348:	789b      	ldrb	r3, [r3, #2]
 802434a:	b25b      	sxtb	r3, r3
 802434c:	f023 030c 	bic.w	r3, r3, #12
 8024350:	b25a      	sxtb	r2, r3
 8024352:	7bfb      	ldrb	r3, [r7, #15]
 8024354:	009b      	lsls	r3, r3, #2
 8024356:	b25b      	sxtb	r3, r3
 8024358:	4313      	orrs	r3, r2
 802435a:	b25b      	sxtb	r3, r3
 802435c:	b2da      	uxtb	r2, r3
 802435e:	687b      	ldr	r3, [r7, #4]
 8024360:	709a      	strb	r2, [r3, #2]
        noise_count++;
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
        CountUp();
    }
    else master_count_ = 0;
}
 8024362:	e01a      	b.n	802439a <_ZN10SideSensor14NoiseToleranceEv+0x92>
    else if(noise_count == 0x01)
 8024364:	7bfb      	ldrb	r3, [r7, #15]
 8024366:	2b01      	cmp	r3, #1
 8024368:	d114      	bne.n	8024394 <_ZN10SideSensor14NoiseToleranceEv+0x8c>
        noise_count++;
 802436a:	7bfb      	ldrb	r3, [r7, #15]
 802436c:	3301      	adds	r3, #1
 802436e:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8024370:	687b      	ldr	r3, [r7, #4]
 8024372:	789b      	ldrb	r3, [r3, #2]
 8024374:	b25b      	sxtb	r3, r3
 8024376:	f023 030c 	bic.w	r3, r3, #12
 802437a:	b25a      	sxtb	r2, r3
 802437c:	7bfb      	ldrb	r3, [r7, #15]
 802437e:	009b      	lsls	r3, r3, #2
 8024380:	b25b      	sxtb	r3, r3
 8024382:	4313      	orrs	r3, r2
 8024384:	b25b      	sxtb	r3, r3
 8024386:	b2da      	uxtb	r2, r3
 8024388:	687b      	ldr	r3, [r7, #4]
 802438a:	709a      	strb	r2, [r3, #2]
        CountUp();
 802438c:	6878      	ldr	r0, [r7, #4]
 802438e:	f000 f809 	bl	80243a4 <_ZN10SideSensor7CountUpEv>
}
 8024392:	e002      	b.n	802439a <_ZN10SideSensor14NoiseToleranceEv+0x92>
    else master_count_ = 0;
 8024394:	687b      	ldr	r3, [r7, #4]
 8024396:	2200      	movs	r2, #0
 8024398:	70da      	strb	r2, [r3, #3]
}
 802439a:	bf00      	nop
 802439c:	3710      	adds	r7, #16
 802439e:	46bd      	mov	sp, r7
 80243a0:	bd80      	pop	{r7, pc}
	...

080243a4 <_ZN10SideSensor7CountUpEv>:

void SideSensor::CountUp()
{
 80243a4:	b480      	push	{r7}
 80243a6:	b087      	sub	sp, #28
 80243a8:	af00      	add	r7, sp, #0
 80243aa:	6078      	str	r0, [r7, #4]
    uint8_t pre_noise_state = exception_flags_ >> 4;
 80243ac:	687b      	ldr	r3, [r7, #4]
 80243ae:	789b      	ldrb	r3, [r3, #2]
 80243b0:	111b      	asrs	r3, r3, #4
 80243b2:	75fb      	strb	r3, [r7, #23]
    uint8_t current_state   = read_state_flags_ & 0x0F;
 80243b4:	687b      	ldr	r3, [r7, #4]
 80243b6:	781b      	ldrb	r3, [r3, #0]
 80243b8:	f003 030f 	and.w	r3, r3, #15
 80243bc:	75bb      	strb	r3, [r7, #22]

    if(pre_noise_state != current_state)
 80243be:	7dfa      	ldrb	r2, [r7, #23]
 80243c0:	7dbb      	ldrb	r3, [r7, #22]
 80243c2:	429a      	cmp	r2, r3
 80243c4:	d012      	beq.n	80243ec <_ZN10SideSensor7CountUpEv+0x48>
    {
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ << 4);
 80243c6:	687b      	ldr	r3, [r7, #4]
 80243c8:	789b      	ldrb	r3, [r3, #2]
 80243ca:	b25b      	sxtb	r3, r3
 80243cc:	f003 030f 	and.w	r3, r3, #15
 80243d0:	b25a      	sxtb	r2, r3
 80243d2:	687b      	ldr	r3, [r7, #4]
 80243d4:	781b      	ldrb	r3, [r3, #0]
 80243d6:	011b      	lsls	r3, r3, #4
 80243d8:	b25b      	sxtb	r3, r3
 80243da:	4313      	orrs	r3, r2
 80243dc:	b25b      	sxtb	r3, r3
 80243de:	b2da      	uxtb	r2, r3
 80243e0:	687b      	ldr	r3, [r7, #4]
 80243e2:	709a      	strb	r2, [r3, #2]
        master_count_ = 0;
 80243e4:	687b      	ldr	r3, [r7, #4]
 80243e6:	2200      	movs	r2, #0
 80243e8:	70da      	strb	r2, [r3, #3]
 80243ea:	e009      	b.n	8024400 <_ZN10SideSensor7CountUpEv+0x5c>
    }
    else if(master_count_ < MAX_INTERRUPT_COUNT) master_count_++;
 80243ec:	687b      	ldr	r3, [r7, #4]
 80243ee:	78db      	ldrb	r3, [r3, #3]
 80243f0:	2bf9      	cmp	r3, #249	; 0xf9
 80243f2:	d805      	bhi.n	8024400 <_ZN10SideSensor7CountUpEv+0x5c>
 80243f4:	687b      	ldr	r3, [r7, #4]
 80243f6:	78db      	ldrb	r3, [r3, #3]
 80243f8:	3301      	adds	r3, #1
 80243fa:	b2da      	uxtb	r2, r3
 80243fc:	687b      	ldr	r3, [r7, #4]
 80243fe:	70da      	strb	r2, [r3, #3]

#ifdef DEBUG_MODE
    g_pre_noise_state_cntup = pre_noise_state;
 8024400:	4a9a      	ldr	r2, [pc, #616]	; (802466c <_ZN10SideSensor7CountUpEv+0x2c8>)
 8024402:	7dfb      	ldrb	r3, [r7, #23]
 8024404:	7013      	strb	r3, [r2, #0]
    g_current_state_cntup   = current_state;
 8024406:	4a9a      	ldr	r2, [pc, #616]	; (8024670 <_ZN10SideSensor7CountUpEv+0x2cc>)
 8024408:	7dbb      	ldrb	r3, [r7, #22]
 802440a:	7013      	strb	r3, [r2, #0]
    g_exception_flags_cntup = exception_flags_;
 802440c:	687b      	ldr	r3, [r7, #4]
 802440e:	789a      	ldrb	r2, [r3, #2]
 8024410:	4b98      	ldr	r3, [pc, #608]	; (8024674 <_ZN10SideSensor7CountUpEv+0x2d0>)
 8024412:	701a      	strb	r2, [r3, #0]
    g_master_count_cntup    = master_count_;
 8024414:	687b      	ldr	r3, [r7, #4]
 8024416:	78da      	ldrb	r2, [r3, #3]
 8024418:	4b97      	ldr	r3, [pc, #604]	; (8024678 <_ZN10SideSensor7CountUpEv+0x2d4>)
 802441a:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

    if(current_state == 0x08 && master_count_ >= BLACK_BLACK_COUNT)
 802441c:	7dbb      	ldrb	r3, [r7, #22]
 802441e:	2b08      	cmp	r3, #8
 8024420:	d10e      	bne.n	8024440 <_ZN10SideSensor7CountUpEv+0x9c>
 8024422:	687b      	ldr	r3, [r7, #4]
 8024424:	78db      	ldrb	r3, [r3, #3]
 8024426:	2b01      	cmp	r3, #1
 8024428:	d90a      	bls.n	8024440 <_ZN10SideSensor7CountUpEv+0x9c>
    {
        write_state_flags_ = (write_state_flags_ & 0xF0) | 0x08;
 802442a:	687b      	ldr	r3, [r7, #4]
 802442c:	785b      	ldrb	r3, [r3, #1]
 802442e:	f023 030f 	bic.w	r3, r3, #15
 8024432:	b2db      	uxtb	r3, r3
 8024434:	f043 0308 	orr.w	r3, r3, #8
 8024438:	b2da      	uxtb	r2, r3
 802443a:	687b      	ldr	r3, [r7, #4]
 802443c:	705a      	strb	r2, [r3, #1]
 802443e:	e037      	b.n	80244b0 <_ZN10SideSensor7CountUpEv+0x10c>
    }
    else if(current_state == 0x04 && master_count_ >= BLACK_WHITE_COUNT)
 8024440:	7dbb      	ldrb	r3, [r7, #22]
 8024442:	2b04      	cmp	r3, #4
 8024444:	d10b      	bne.n	802445e <_ZN10SideSensor7CountUpEv+0xba>
 8024446:	687b      	ldr	r3, [r7, #4]
 8024448:	78db      	ldrb	r3, [r3, #3]
 802444a:	2b00      	cmp	r3, #0
 802444c:	d007      	beq.n	802445e <_ZN10SideSensor7CountUpEv+0xba>
    {
        write_state_flags_ |= 0x04;
 802444e:	687b      	ldr	r3, [r7, #4]
 8024450:	785b      	ldrb	r3, [r3, #1]
 8024452:	f043 0304 	orr.w	r3, r3, #4
 8024456:	b2da      	uxtb	r2, r3
 8024458:	687b      	ldr	r3, [r7, #4]
 802445a:	705a      	strb	r2, [r3, #1]
 802445c:	e028      	b.n	80244b0 <_ZN10SideSensor7CountUpEv+0x10c>
    }
    else if(current_state == 0x02 && master_count_ >= WHITE_BLACK_COUNT)
 802445e:	7dbb      	ldrb	r3, [r7, #22]
 8024460:	2b02      	cmp	r3, #2
 8024462:	d10b      	bne.n	802447c <_ZN10SideSensor7CountUpEv+0xd8>
 8024464:	687b      	ldr	r3, [r7, #4]
 8024466:	78db      	ldrb	r3, [r3, #3]
 8024468:	2b00      	cmp	r3, #0
 802446a:	d007      	beq.n	802447c <_ZN10SideSensor7CountUpEv+0xd8>
    {
        write_state_flags_ |= 0x02;
 802446c:	687b      	ldr	r3, [r7, #4]
 802446e:	785b      	ldrb	r3, [r3, #1]
 8024470:	f043 0302 	orr.w	r3, r3, #2
 8024474:	b2da      	uxtb	r2, r3
 8024476:	687b      	ldr	r3, [r7, #4]
 8024478:	705a      	strb	r2, [r3, #1]
 802447a:	e019      	b.n	80244b0 <_ZN10SideSensor7CountUpEv+0x10c>
    }
    else if(current_state == 0x01 && master_count_ >= WHITE_WHITE_COUNT)
 802447c:	7dbb      	ldrb	r3, [r7, #22]
 802447e:	2b01      	cmp	r3, #1
 8024480:	d116      	bne.n	80244b0 <_ZN10SideSensor7CountUpEv+0x10c>
    {
        write_state_flags_ = (write_state_flags_ & 0xC0) | 0x01;
 8024482:	687b      	ldr	r3, [r7, #4]
 8024484:	785b      	ldrb	r3, [r3, #1]
 8024486:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 802448a:	b2db      	uxtb	r3, r3
 802448c:	f043 0301 	orr.w	r3, r3, #1
 8024490:	b2da      	uxtb	r2, r3
 8024492:	687b      	ldr	r3, [r7, #4]
 8024494:	705a      	strb	r2, [r3, #1]
        exception_flags_ = (exception_flags_ << 8) | 0x01;
 8024496:	687b      	ldr	r3, [r7, #4]
 8024498:	789b      	ldrb	r3, [r3, #2]
 802449a:	021b      	lsls	r3, r3, #8
 802449c:	b25b      	sxtb	r3, r3
 802449e:	f043 0301 	orr.w	r3, r3, #1
 80244a2:	b25b      	sxtb	r3, r3
 80244a4:	b2da      	uxtb	r2, r3
 80244a6:	687b      	ldr	r3, [r7, #4]
 80244a8:	709a      	strb	r2, [r3, #2]
        master_count_ = 0;
 80244aa:	687b      	ldr	r3, [r7, #4]
 80244ac:	2200      	movs	r2, #0
 80244ae:	70da      	strb	r2, [r3, #3]
    }

    uint8_t black_flag   = write_state_flags_ & 0x08;
 80244b0:	687b      	ldr	r3, [r7, #4]
 80244b2:	785b      	ldrb	r3, [r3, #1]
 80244b4:	f003 0308 	and.w	r3, r3, #8
 80244b8:	757b      	strb	r3, [r7, #21]
    uint8_t goal_flag    = write_state_flags_ & 0x04;
 80244ba:	687b      	ldr	r3, [r7, #4]
 80244bc:	785b      	ldrb	r3, [r3, #1]
 80244be:	f003 0304 	and.w	r3, r3, #4
 80244c2:	753b      	strb	r3, [r7, #20]
    uint8_t goal_reach   = write_state_flags_ & 0x20;
 80244c4:	687b      	ldr	r3, [r7, #4]
 80244c6:	785b      	ldrb	r3, [r3, #1]
 80244c8:	f003 0320 	and.w	r3, r3, #32
 80244cc:	74fb      	strb	r3, [r7, #19]
    uint8_t goal_count   = (write_state_flags_ & 0xC0) >> 6;
 80244ce:	687b      	ldr	r3, [r7, #4]
 80244d0:	785b      	ldrb	r3, [r3, #1]
 80244d2:	099b      	lsrs	r3, r3, #6
 80244d4:	74bb      	strb	r3, [r7, #18]
    uint8_t corner_flag  = write_state_flags_ & 0x02;
 80244d6:	687b      	ldr	r3, [r7, #4]
 80244d8:	785b      	ldrb	r3, [r3, #1]
 80244da:	f003 0302 	and.w	r3, r3, #2
 80244de:	747b      	strb	r3, [r7, #17]
    uint8_t corner_reach = write_state_flags_ & 0x10;
 80244e0:	687b      	ldr	r3, [r7, #4]
 80244e2:	785b      	ldrb	r3, [r3, #1]
 80244e4:	f003 0310 	and.w	r3, r3, #16
 80244e8:	743b      	strb	r3, [r7, #16]
    uint8_t cross_flag   = write_state_flags_ & 0x01;
 80244ea:	687b      	ldr	r3, [r7, #4]
 80244ec:	785b      	ldrb	r3, [r3, #1]
 80244ee:	f003 0301 	and.w	r3, r3, #1
 80244f2:	73fb      	strb	r3, [r7, #15]

#ifdef DEBUG_MODE
    g_exception_flags_cross = exception_flags_;
 80244f4:	687b      	ldr	r3, [r7, #4]
 80244f6:	789a      	ldrb	r2, [r3, #2]
 80244f8:	4b60      	ldr	r3, [pc, #384]	; (802467c <_ZN10SideSensor7CountUpEv+0x2d8>)
 80244fa:	701a      	strb	r2, [r3, #0]
    g_master_count_cross    = master_count_;
 80244fc:	687b      	ldr	r3, [r7, #4]
 80244fe:	78da      	ldrb	r2, [r3, #3]
 8024500:	4b5f      	ldr	r3, [pc, #380]	; (8024680 <_ZN10SideSensor7CountUpEv+0x2dc>)
 8024502:	701a      	strb	r2, [r3, #0]
    g_write_state_cntup  = write_state_flags_;
 8024504:	687b      	ldr	r3, [r7, #4]
 8024506:	785a      	ldrb	r2, [r3, #1]
 8024508:	4b5e      	ldr	r3, [pc, #376]	; (8024684 <_ZN10SideSensor7CountUpEv+0x2e0>)
 802450a:	701a      	strb	r2, [r3, #0]
    g_goal_reach_cntup   = goal_reach   >> 5;
 802450c:	7cfb      	ldrb	r3, [r7, #19]
 802450e:	115b      	asrs	r3, r3, #5
 8024510:	b2da      	uxtb	r2, r3
 8024512:	4b5d      	ldr	r3, [pc, #372]	; (8024688 <_ZN10SideSensor7CountUpEv+0x2e4>)
 8024514:	701a      	strb	r2, [r3, #0]
    g_corner_reach_cntup = corner_reach >> 4;
 8024516:	7c3b      	ldrb	r3, [r7, #16]
 8024518:	111b      	asrs	r3, r3, #4
 802451a:	b2da      	uxtb	r2, r3
 802451c:	4b5b      	ldr	r3, [pc, #364]	; (802468c <_ZN10SideSensor7CountUpEv+0x2e8>)
 802451e:	701a      	strb	r2, [r3, #0]
    g_black_flag_cntup   = black_flag   >> 3;
 8024520:	7d7b      	ldrb	r3, [r7, #21]
 8024522:	10db      	asrs	r3, r3, #3
 8024524:	b2da      	uxtb	r2, r3
 8024526:	4b5a      	ldr	r3, [pc, #360]	; (8024690 <_ZN10SideSensor7CountUpEv+0x2ec>)
 8024528:	701a      	strb	r2, [r3, #0]
    g_goal_flag_cntup    = goal_flag    >> 2;
 802452a:	7d3b      	ldrb	r3, [r7, #20]
 802452c:	109b      	asrs	r3, r3, #2
 802452e:	b2da      	uxtb	r2, r3
 8024530:	4b58      	ldr	r3, [pc, #352]	; (8024694 <_ZN10SideSensor7CountUpEv+0x2f0>)
 8024532:	701a      	strb	r2, [r3, #0]
    g_corner_flag_cntup  = corner_flag  >> 1;
 8024534:	7c7b      	ldrb	r3, [r7, #17]
 8024536:	105b      	asrs	r3, r3, #1
 8024538:	b2da      	uxtb	r2, r3
 802453a:	4b57      	ldr	r3, [pc, #348]	; (8024698 <_ZN10SideSensor7CountUpEv+0x2f4>)
 802453c:	701a      	strb	r2, [r3, #0]
    g_cross_flag_cntup   = cross_flag;  // LSB
 802453e:	4a57      	ldr	r2, [pc, #348]	; (802469c <_ZN10SideSensor7CountUpEv+0x2f8>)
 8024540:	7bfb      	ldrb	r3, [r7, #15]
 8024542:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
    
    if(goal_flag == 0x04 && black_flag == 0x08)
 8024544:	7d3b      	ldrb	r3, [r7, #20]
 8024546:	2b04      	cmp	r3, #4
 8024548:	d111      	bne.n	802456e <_ZN10SideSensor7CountUpEv+0x1ca>
 802454a:	7d7b      	ldrb	r3, [r7, #21]
 802454c:	2b08      	cmp	r3, #8
 802454e:	d10e      	bne.n	802456e <_ZN10SideSensor7CountUpEv+0x1ca>
    {
        write_state_flags_ &= 0xF7;
 8024550:	687b      	ldr	r3, [r7, #4]
 8024552:	785b      	ldrb	r3, [r3, #1]
 8024554:	f023 0308 	bic.w	r3, r3, #8
 8024558:	b2da      	uxtb	r2, r3
 802455a:	687b      	ldr	r3, [r7, #4]
 802455c:	705a      	strb	r2, [r3, #1]
        write_state_flags_ |= 0x20;
 802455e:	687b      	ldr	r3, [r7, #4]
 8024560:	785b      	ldrb	r3, [r3, #1]
 8024562:	f043 0320 	orr.w	r3, r3, #32
 8024566:	b2da      	uxtb	r2, r3
 8024568:	687b      	ldr	r3, [r7, #4]
 802456a:	705a      	strb	r2, [r3, #1]
 802456c:	e057      	b.n	802461e <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(goal_reach == 0x20 && black_flag == 0x08)
 802456e:	7cfb      	ldrb	r3, [r7, #19]
 8024570:	2b20      	cmp	r3, #32
 8024572:	d11b      	bne.n	80245ac <_ZN10SideSensor7CountUpEv+0x208>
 8024574:	7d7b      	ldrb	r3, [r7, #21]
 8024576:	2b08      	cmp	r3, #8
 8024578:	d118      	bne.n	80245ac <_ZN10SideSensor7CountUpEv+0x208>
    {
        write_state_flags_ &= 0xDF;
 802457a:	687b      	ldr	r3, [r7, #4]
 802457c:	785b      	ldrb	r3, [r3, #1]
 802457e:	f023 0320 	bic.w	r3, r3, #32
 8024582:	b2da      	uxtb	r2, r3
 8024584:	687b      	ldr	r3, [r7, #4]
 8024586:	705a      	strb	r2, [r3, #1]
        goal_count++;
 8024588:	7cbb      	ldrb	r3, [r7, #18]
 802458a:	3301      	adds	r3, #1
 802458c:	74bb      	strb	r3, [r7, #18]
        write_state_flags_ = (write_state_flags_ & 0x3F) | (goal_count << 6);
 802458e:	687b      	ldr	r3, [r7, #4]
 8024590:	785b      	ldrb	r3, [r3, #1]
 8024592:	b25b      	sxtb	r3, r3
 8024594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024598:	b25a      	sxtb	r2, r3
 802459a:	7cbb      	ldrb	r3, [r7, #18]
 802459c:	019b      	lsls	r3, r3, #6
 802459e:	b25b      	sxtb	r3, r3
 80245a0:	4313      	orrs	r3, r2
 80245a2:	b25b      	sxtb	r3, r3
 80245a4:	b2da      	uxtb	r2, r3
 80245a6:	687b      	ldr	r3, [r7, #4]
 80245a8:	705a      	strb	r2, [r3, #1]
 80245aa:	e038      	b.n	802461e <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(corner_flag == 0x02 && black_flag == 0x08)
 80245ac:	7c7b      	ldrb	r3, [r7, #17]
 80245ae:	2b02      	cmp	r3, #2
 80245b0:	d111      	bne.n	80245d6 <_ZN10SideSensor7CountUpEv+0x232>
 80245b2:	7d7b      	ldrb	r3, [r7, #21]
 80245b4:	2b08      	cmp	r3, #8
 80245b6:	d10e      	bne.n	80245d6 <_ZN10SideSensor7CountUpEv+0x232>
    {
        write_state_flags_ &= 0xF7;
 80245b8:	687b      	ldr	r3, [r7, #4]
 80245ba:	785b      	ldrb	r3, [r3, #1]
 80245bc:	f023 0308 	bic.w	r3, r3, #8
 80245c0:	b2da      	uxtb	r2, r3
 80245c2:	687b      	ldr	r3, [r7, #4]
 80245c4:	705a      	strb	r2, [r3, #1]
        write_state_flags_ |= 0x10;
 80245c6:	687b      	ldr	r3, [r7, #4]
 80245c8:	785b      	ldrb	r3, [r3, #1]
 80245ca:	f043 0310 	orr.w	r3, r3, #16
 80245ce:	b2da      	uxtb	r2, r3
 80245d0:	687b      	ldr	r3, [r7, #4]
 80245d2:	705a      	strb	r2, [r3, #1]
 80245d4:	e023      	b.n	802461e <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(corner_reach == 0x10 && black_flag == 0x08)
 80245d6:	7c3b      	ldrb	r3, [r7, #16]
 80245d8:	2b10      	cmp	r3, #16
 80245da:	d110      	bne.n	80245fe <_ZN10SideSensor7CountUpEv+0x25a>
 80245dc:	7d7b      	ldrb	r3, [r7, #21]
 80245de:	2b08      	cmp	r3, #8
 80245e0:	d10d      	bne.n	80245fe <_ZN10SideSensor7CountUpEv+0x25a>
    {
        write_state_flags_ &= 0xEF;
 80245e2:	687b      	ldr	r3, [r7, #4]
 80245e4:	785b      	ldrb	r3, [r3, #1]
 80245e6:	f023 0310 	bic.w	r3, r3, #16
 80245ea:	b2da      	uxtb	r2, r3
 80245ec:	687b      	ldr	r3, [r7, #4]
 80245ee:	705a      	strb	r2, [r3, #1]
        corner_marker_count_++;
 80245f0:	687b      	ldr	r3, [r7, #4]
 80245f2:	791b      	ldrb	r3, [r3, #4]
 80245f4:	3301      	adds	r3, #1
 80245f6:	b2da      	uxtb	r2, r3
 80245f8:	687b      	ldr	r3, [r7, #4]
 80245fa:	711a      	strb	r2, [r3, #4]
 80245fc:	e00f      	b.n	802461e <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(cross_flag == 0x01)
 80245fe:	7bfb      	ldrb	r3, [r7, #15]
 8024600:	2b01      	cmp	r3, #1
 8024602:	d10c      	bne.n	802461e <_ZN10SideSensor7CountUpEv+0x27a>
    {
        write_state_flags_ &= 0xFE;
 8024604:	687b      	ldr	r3, [r7, #4]
 8024606:	785b      	ldrb	r3, [r3, #1]
 8024608:	f023 0301 	bic.w	r3, r3, #1
 802460c:	b2da      	uxtb	r2, r3
 802460e:	687b      	ldr	r3, [r7, #4]
 8024610:	705a      	strb	r2, [r3, #1]
        cross_line_count_++;
 8024612:	687b      	ldr	r3, [r7, #4]
 8024614:	795b      	ldrb	r3, [r3, #5]
 8024616:	3301      	adds	r3, #1
 8024618:	b2da      	uxtb	r2, r3
 802461a:	687b      	ldr	r3, [r7, #4]
 802461c:	715a      	strb	r2, [r3, #5]
    }

#ifdef DEBUG_MODE
    g_write_state_cntup_2  = write_state_flags_;
 802461e:	687b      	ldr	r3, [r7, #4]
 8024620:	785a      	ldrb	r2, [r3, #1]
 8024622:	4b1f      	ldr	r3, [pc, #124]	; (80246a0 <_ZN10SideSensor7CountUpEv+0x2fc>)
 8024624:	701a      	strb	r2, [r3, #0]
    g_goal_reach_cntup_2   = goal_reach   >> 5;
 8024626:	7cfb      	ldrb	r3, [r7, #19]
 8024628:	115b      	asrs	r3, r3, #5
 802462a:	b2da      	uxtb	r2, r3
 802462c:	4b1d      	ldr	r3, [pc, #116]	; (80246a4 <_ZN10SideSensor7CountUpEv+0x300>)
 802462e:	701a      	strb	r2, [r3, #0]
    g_corner_reach_cntup_2 = corner_reach >> 4;
 8024630:	7c3b      	ldrb	r3, [r7, #16]
 8024632:	111b      	asrs	r3, r3, #4
 8024634:	b2da      	uxtb	r2, r3
 8024636:	4b1c      	ldr	r3, [pc, #112]	; (80246a8 <_ZN10SideSensor7CountUpEv+0x304>)
 8024638:	701a      	strb	r2, [r3, #0]
    g_black_flag_cntup_2   = black_flag   >> 3;
 802463a:	7d7b      	ldrb	r3, [r7, #21]
 802463c:	10db      	asrs	r3, r3, #3
 802463e:	b2da      	uxtb	r2, r3
 8024640:	4b1a      	ldr	r3, [pc, #104]	; (80246ac <_ZN10SideSensor7CountUpEv+0x308>)
 8024642:	701a      	strb	r2, [r3, #0]
    g_goal_flag_cntup_2    = goal_flag    >> 2;
 8024644:	7d3b      	ldrb	r3, [r7, #20]
 8024646:	109b      	asrs	r3, r3, #2
 8024648:	b2da      	uxtb	r2, r3
 802464a:	4b19      	ldr	r3, [pc, #100]	; (80246b0 <_ZN10SideSensor7CountUpEv+0x30c>)
 802464c:	701a      	strb	r2, [r3, #0]
    g_corner_flag_cntup_2  = corner_flag  >> 1;
 802464e:	7c7b      	ldrb	r3, [r7, #17]
 8024650:	105b      	asrs	r3, r3, #1
 8024652:	b2da      	uxtb	r2, r3
 8024654:	4b17      	ldr	r3, [pc, #92]	; (80246b4 <_ZN10SideSensor7CountUpEv+0x310>)
 8024656:	701a      	strb	r2, [r3, #0]
    g_cross_flag_cntup_2   = cross_flag;  // LSB
 8024658:	4a17      	ldr	r2, [pc, #92]	; (80246b8 <_ZN10SideSensor7CountUpEv+0x314>)
 802465a:	7bfb      	ldrb	r3, [r7, #15]
 802465c:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
}
 802465e:	bf00      	nop
 8024660:	371c      	adds	r7, #28
 8024662:	46bd      	mov	sp, r7
 8024664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024668:	4770      	bx	lr
 802466a:	bf00      	nop
 802466c:	20000250 	.word	0x20000250
 8024670:	20000251 	.word	0x20000251
 8024674:	20000252 	.word	0x20000252
 8024678:	20000253 	.word	0x20000253
 802467c:	20000254 	.word	0x20000254
 8024680:	20000255 	.word	0x20000255
 8024684:	20000256 	.word	0x20000256
 8024688:	20000257 	.word	0x20000257
 802468c:	20000258 	.word	0x20000258
 8024690:	20000259 	.word	0x20000259
 8024694:	2000025a 	.word	0x2000025a
 8024698:	2000025b 	.word	0x2000025b
 802469c:	2000025c 	.word	0x2000025c
 80246a0:	2000025d 	.word	0x2000025d
 80246a4:	2000025e 	.word	0x2000025e
 80246a8:	2000025f 	.word	0x2000025f
 80246ac:	20000260 	.word	0x20000260
 80246b0:	20000261 	.word	0x20000261
 80246b4:	20000262 	.word	0x20000262
 80246b8:	20000263 	.word	0x20000263

080246bc <_ZN10SideSensor18GetGoalMarkerCountEv>:

uint8_t SideSensor::GetGoalMarkerCount()
{
 80246bc:	b480      	push	{r7}
 80246be:	b083      	sub	sp, #12
 80246c0:	af00      	add	r7, sp, #0
 80246c2:	6078      	str	r0, [r7, #4]
    return (write_state_flags_ & 0xC0) >> 6;
 80246c4:	687b      	ldr	r3, [r7, #4]
 80246c6:	785b      	ldrb	r3, [r3, #1]
 80246c8:	099b      	lsrs	r3, r3, #6
 80246ca:	b2db      	uxtb	r3, r3
}
 80246cc:	4618      	mov	r0, r3
 80246ce:	370c      	adds	r7, #12
 80246d0:	46bd      	mov	sp, r7
 80246d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246d6:	4770      	bx	lr

080246d8 <_ZN10SideSensor20GetCornerMarkerCountEv>:

uint8_t SideSensor::GetCornerMarkerCount()
{
 80246d8:	b480      	push	{r7}
 80246da:	b083      	sub	sp, #12
 80246dc:	af00      	add	r7, sp, #0
 80246de:	6078      	str	r0, [r7, #4]
    return corner_marker_count_;
 80246e0:	687b      	ldr	r3, [r7, #4]
 80246e2:	791b      	ldrb	r3, [r3, #4]
}
 80246e4:	4618      	mov	r0, r3
 80246e6:	370c      	adds	r7, #12
 80246e8:	46bd      	mov	sp, r7
 80246ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246ee:	4770      	bx	lr

080246f0 <_ZN10SideSensor17GetCrossLineCountEv>:

uint8_t SideSensor::GetCrossLineCount()
{
 80246f0:	b480      	push	{r7}
 80246f2:	b083      	sub	sp, #12
 80246f4:	af00      	add	r7, sp, #0
 80246f6:	6078      	str	r0, [r7, #4]
    return cross_line_count_;
 80246f8:	687b      	ldr	r3, [r7, #4]
 80246fa:	795b      	ldrb	r3, [r3, #5]
 80246fc:	4618      	mov	r0, r3
 80246fe:	370c      	adds	r7, #12
 8024700:	46bd      	mov	sp, r7
 8024702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024706:	4770      	bx	lr

08024708 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8024708:	b480      	push	{r7}
 802470a:	b083      	sub	sp, #12
 802470c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802470e:	2300      	movs	r3, #0
 8024710:	607b      	str	r3, [r7, #4]
 8024712:	4b10      	ldr	r3, [pc, #64]	; (8024754 <HAL_MspInit+0x4c>)
 8024714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024716:	4a0f      	ldr	r2, [pc, #60]	; (8024754 <HAL_MspInit+0x4c>)
 8024718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802471c:	6453      	str	r3, [r2, #68]	; 0x44
 802471e:	4b0d      	ldr	r3, [pc, #52]	; (8024754 <HAL_MspInit+0x4c>)
 8024720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024726:	607b      	str	r3, [r7, #4]
 8024728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802472a:	2300      	movs	r3, #0
 802472c:	603b      	str	r3, [r7, #0]
 802472e:	4b09      	ldr	r3, [pc, #36]	; (8024754 <HAL_MspInit+0x4c>)
 8024730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024732:	4a08      	ldr	r2, [pc, #32]	; (8024754 <HAL_MspInit+0x4c>)
 8024734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8024738:	6413      	str	r3, [r2, #64]	; 0x40
 802473a:	4b06      	ldr	r3, [pc, #24]	; (8024754 <HAL_MspInit+0x4c>)
 802473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802473e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8024742:	603b      	str	r3, [r7, #0]
 8024744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8024746:	bf00      	nop
 8024748:	370c      	adds	r7, #12
 802474a:	46bd      	mov	sp, r7
 802474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024750:	4770      	bx	lr
 8024752:	bf00      	nop
 8024754:	40023800 	.word	0x40023800

08024758 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8024758:	b580      	push	{r7, lr}
 802475a:	b08a      	sub	sp, #40	; 0x28
 802475c:	af00      	add	r7, sp, #0
 802475e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024760:	f107 0314 	add.w	r3, r7, #20
 8024764:	2200      	movs	r2, #0
 8024766:	601a      	str	r2, [r3, #0]
 8024768:	605a      	str	r2, [r3, #4]
 802476a:	609a      	str	r2, [r3, #8]
 802476c:	60da      	str	r2, [r3, #12]
 802476e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8024770:	687b      	ldr	r3, [r7, #4]
 8024772:	681b      	ldr	r3, [r3, #0]
 8024774:	4a24      	ldr	r2, [pc, #144]	; (8024808 <HAL_ADC_MspInit+0xb0>)
 8024776:	4293      	cmp	r3, r2
 8024778:	d141      	bne.n	80247fe <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 802477a:	2300      	movs	r3, #0
 802477c:	613b      	str	r3, [r7, #16]
 802477e:	4b23      	ldr	r3, [pc, #140]	; (802480c <HAL_ADC_MspInit+0xb4>)
 8024780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024782:	4a22      	ldr	r2, [pc, #136]	; (802480c <HAL_ADC_MspInit+0xb4>)
 8024784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8024788:	6453      	str	r3, [r2, #68]	; 0x44
 802478a:	4b20      	ldr	r3, [pc, #128]	; (802480c <HAL_ADC_MspInit+0xb4>)
 802478c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024792:	613b      	str	r3, [r7, #16]
 8024794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8024796:	2300      	movs	r3, #0
 8024798:	60fb      	str	r3, [r7, #12]
 802479a:	4b1c      	ldr	r3, [pc, #112]	; (802480c <HAL_ADC_MspInit+0xb4>)
 802479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802479e:	4a1b      	ldr	r2, [pc, #108]	; (802480c <HAL_ADC_MspInit+0xb4>)
 80247a0:	f043 0304 	orr.w	r3, r3, #4
 80247a4:	6313      	str	r3, [r2, #48]	; 0x30
 80247a6:	4b19      	ldr	r3, [pc, #100]	; (802480c <HAL_ADC_MspInit+0xb4>)
 80247a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80247aa:	f003 0304 	and.w	r3, r3, #4
 80247ae:	60fb      	str	r3, [r7, #12]
 80247b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80247b2:	2300      	movs	r3, #0
 80247b4:	60bb      	str	r3, [r7, #8]
 80247b6:	4b15      	ldr	r3, [pc, #84]	; (802480c <HAL_ADC_MspInit+0xb4>)
 80247b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80247ba:	4a14      	ldr	r2, [pc, #80]	; (802480c <HAL_ADC_MspInit+0xb4>)
 80247bc:	f043 0301 	orr.w	r3, r3, #1
 80247c0:	6313      	str	r3, [r2, #48]	; 0x30
 80247c2:	4b12      	ldr	r3, [pc, #72]	; (802480c <HAL_ADC_MspInit+0xb4>)
 80247c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80247c6:	f003 0301 	and.w	r3, r3, #1
 80247ca:	60bb      	str	r3, [r7, #8]
 80247cc:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80247ce:	233f      	movs	r3, #63	; 0x3f
 80247d0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80247d2:	2303      	movs	r3, #3
 80247d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80247d6:	2300      	movs	r3, #0
 80247d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80247da:	f107 0314 	add.w	r3, r7, #20
 80247de:	4619      	mov	r1, r3
 80247e0:	480b      	ldr	r0, [pc, #44]	; (8024810 <HAL_ADC_MspInit+0xb8>)
 80247e2:	f002 ffdb 	bl	802779c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80247e6:	23ff      	movs	r3, #255	; 0xff
 80247e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80247ea:	2303      	movs	r3, #3
 80247ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80247ee:	2300      	movs	r3, #0
 80247f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80247f2:	f107 0314 	add.w	r3, r7, #20
 80247f6:	4619      	mov	r1, r3
 80247f8:	4806      	ldr	r0, [pc, #24]	; (8024814 <HAL_ADC_MspInit+0xbc>)
 80247fa:	f002 ffcf 	bl	802779c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80247fe:	bf00      	nop
 8024800:	3728      	adds	r7, #40	; 0x28
 8024802:	46bd      	mov	sp, r7
 8024804:	bd80      	pop	{r7, pc}
 8024806:	bf00      	nop
 8024808:	40012000 	.word	0x40012000
 802480c:	40023800 	.word	0x40023800
 8024810:	40020800 	.word	0x40020800
 8024814:	40020000 	.word	0x40020000

08024818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8024818:	b580      	push	{r7, lr}
 802481a:	b08a      	sub	sp, #40	; 0x28
 802481c:	af00      	add	r7, sp, #0
 802481e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024820:	f107 0314 	add.w	r3, r7, #20
 8024824:	2200      	movs	r2, #0
 8024826:	601a      	str	r2, [r3, #0]
 8024828:	605a      	str	r2, [r3, #4]
 802482a:	609a      	str	r2, [r3, #8]
 802482c:	60da      	str	r2, [r3, #12]
 802482e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8024830:	687b      	ldr	r3, [r7, #4]
 8024832:	681b      	ldr	r3, [r3, #0]
 8024834:	4a19      	ldr	r2, [pc, #100]	; (802489c <HAL_I2C_MspInit+0x84>)
 8024836:	4293      	cmp	r3, r2
 8024838:	d12c      	bne.n	8024894 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802483a:	2300      	movs	r3, #0
 802483c:	613b      	str	r3, [r7, #16]
 802483e:	4b18      	ldr	r3, [pc, #96]	; (80248a0 <HAL_I2C_MspInit+0x88>)
 8024840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024842:	4a17      	ldr	r2, [pc, #92]	; (80248a0 <HAL_I2C_MspInit+0x88>)
 8024844:	f043 0302 	orr.w	r3, r3, #2
 8024848:	6313      	str	r3, [r2, #48]	; 0x30
 802484a:	4b15      	ldr	r3, [pc, #84]	; (80248a0 <HAL_I2C_MspInit+0x88>)
 802484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802484e:	f003 0302 	and.w	r3, r3, #2
 8024852:	613b      	str	r3, [r7, #16]
 8024854:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8024856:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802485a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802485c:	2312      	movs	r3, #18
 802485e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8024860:	2301      	movs	r3, #1
 8024862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8024864:	2303      	movs	r3, #3
 8024866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8024868:	2304      	movs	r3, #4
 802486a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802486c:	f107 0314 	add.w	r3, r7, #20
 8024870:	4619      	mov	r1, r3
 8024872:	480c      	ldr	r0, [pc, #48]	; (80248a4 <HAL_I2C_MspInit+0x8c>)
 8024874:	f002 ff92 	bl	802779c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8024878:	2300      	movs	r3, #0
 802487a:	60fb      	str	r3, [r7, #12]
 802487c:	4b08      	ldr	r3, [pc, #32]	; (80248a0 <HAL_I2C_MspInit+0x88>)
 802487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024880:	4a07      	ldr	r2, [pc, #28]	; (80248a0 <HAL_I2C_MspInit+0x88>)
 8024882:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8024886:	6413      	str	r3, [r2, #64]	; 0x40
 8024888:	4b05      	ldr	r3, [pc, #20]	; (80248a0 <HAL_I2C_MspInit+0x88>)
 802488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802488c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8024890:	60fb      	str	r3, [r7, #12]
 8024892:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8024894:	bf00      	nop
 8024896:	3728      	adds	r7, #40	; 0x28
 8024898:	46bd      	mov	sp, r7
 802489a:	bd80      	pop	{r7, pc}
 802489c:	40005800 	.word	0x40005800
 80248a0:	40023800 	.word	0x40023800
 80248a4:	40020400 	.word	0x40020400

080248a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80248a8:	b580      	push	{r7, lr}
 80248aa:	b08a      	sub	sp, #40	; 0x28
 80248ac:	af00      	add	r7, sp, #0
 80248ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80248b0:	f107 0314 	add.w	r3, r7, #20
 80248b4:	2200      	movs	r2, #0
 80248b6:	601a      	str	r2, [r3, #0]
 80248b8:	605a      	str	r2, [r3, #4]
 80248ba:	609a      	str	r2, [r3, #8]
 80248bc:	60da      	str	r2, [r3, #12]
 80248be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80248c0:	687b      	ldr	r3, [r7, #4]
 80248c2:	681b      	ldr	r3, [r3, #0]
 80248c4:	4a19      	ldr	r2, [pc, #100]	; (802492c <HAL_SPI_MspInit+0x84>)
 80248c6:	4293      	cmp	r3, r2
 80248c8:	d12c      	bne.n	8024924 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80248ca:	2300      	movs	r3, #0
 80248cc:	613b      	str	r3, [r7, #16]
 80248ce:	4b18      	ldr	r3, [pc, #96]	; (8024930 <HAL_SPI_MspInit+0x88>)
 80248d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80248d2:	4a17      	ldr	r2, [pc, #92]	; (8024930 <HAL_SPI_MspInit+0x88>)
 80248d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80248d8:	6413      	str	r3, [r2, #64]	; 0x40
 80248da:	4b15      	ldr	r3, [pc, #84]	; (8024930 <HAL_SPI_MspInit+0x88>)
 80248dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80248de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80248e2:	613b      	str	r3, [r7, #16]
 80248e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80248e6:	2300      	movs	r3, #0
 80248e8:	60fb      	str	r3, [r7, #12]
 80248ea:	4b11      	ldr	r3, [pc, #68]	; (8024930 <HAL_SPI_MspInit+0x88>)
 80248ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80248ee:	4a10      	ldr	r2, [pc, #64]	; (8024930 <HAL_SPI_MspInit+0x88>)
 80248f0:	f043 0304 	orr.w	r3, r3, #4
 80248f4:	6313      	str	r3, [r2, #48]	; 0x30
 80248f6:	4b0e      	ldr	r3, [pc, #56]	; (8024930 <HAL_SPI_MspInit+0x88>)
 80248f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80248fa:	f003 0304 	and.w	r3, r3, #4
 80248fe:	60fb      	str	r3, [r7, #12]
 8024900:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8024902:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8024906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024908:	2302      	movs	r3, #2
 802490a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802490c:	2300      	movs	r3, #0
 802490e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8024910:	2303      	movs	r3, #3
 8024912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8024914:	2306      	movs	r3, #6
 8024916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8024918:	f107 0314 	add.w	r3, r7, #20
 802491c:	4619      	mov	r1, r3
 802491e:	4805      	ldr	r0, [pc, #20]	; (8024934 <HAL_SPI_MspInit+0x8c>)
 8024920:	f002 ff3c 	bl	802779c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8024924:	bf00      	nop
 8024926:	3728      	adds	r7, #40	; 0x28
 8024928:	46bd      	mov	sp, r7
 802492a:	bd80      	pop	{r7, pc}
 802492c:	40003c00 	.word	0x40003c00
 8024930:	40023800 	.word	0x40023800
 8024934:	40020800 	.word	0x40020800

08024938 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8024938:	b480      	push	{r7}
 802493a:	b087      	sub	sp, #28
 802493c:	af00      	add	r7, sp, #0
 802493e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8024940:	687b      	ldr	r3, [r7, #4]
 8024942:	681b      	ldr	r3, [r3, #0]
 8024944:	4a1f      	ldr	r2, [pc, #124]	; (80249c4 <HAL_TIM_PWM_MspInit+0x8c>)
 8024946:	4293      	cmp	r3, r2
 8024948:	d10e      	bne.n	8024968 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 802494a:	2300      	movs	r3, #0
 802494c:	617b      	str	r3, [r7, #20]
 802494e:	4b1e      	ldr	r3, [pc, #120]	; (80249c8 <HAL_TIM_PWM_MspInit+0x90>)
 8024950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024952:	4a1d      	ldr	r2, [pc, #116]	; (80249c8 <HAL_TIM_PWM_MspInit+0x90>)
 8024954:	f043 0301 	orr.w	r3, r3, #1
 8024958:	6453      	str	r3, [r2, #68]	; 0x44
 802495a:	4b1b      	ldr	r3, [pc, #108]	; (80249c8 <HAL_TIM_PWM_MspInit+0x90>)
 802495c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802495e:	f003 0301 	and.w	r3, r3, #1
 8024962:	617b      	str	r3, [r7, #20]
 8024964:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8024966:	e026      	b.n	80249b6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8024968:	687b      	ldr	r3, [r7, #4]
 802496a:	681b      	ldr	r3, [r3, #0]
 802496c:	4a17      	ldr	r2, [pc, #92]	; (80249cc <HAL_TIM_PWM_MspInit+0x94>)
 802496e:	4293      	cmp	r3, r2
 8024970:	d10e      	bne.n	8024990 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8024972:	2300      	movs	r3, #0
 8024974:	613b      	str	r3, [r7, #16]
 8024976:	4b14      	ldr	r3, [pc, #80]	; (80249c8 <HAL_TIM_PWM_MspInit+0x90>)
 8024978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802497a:	4a13      	ldr	r2, [pc, #76]	; (80249c8 <HAL_TIM_PWM_MspInit+0x90>)
 802497c:	f043 0302 	orr.w	r3, r3, #2
 8024980:	6413      	str	r3, [r2, #64]	; 0x40
 8024982:	4b11      	ldr	r3, [pc, #68]	; (80249c8 <HAL_TIM_PWM_MspInit+0x90>)
 8024984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024986:	f003 0302 	and.w	r3, r3, #2
 802498a:	613b      	str	r3, [r7, #16]
 802498c:	693b      	ldr	r3, [r7, #16]
}
 802498e:	e012      	b.n	80249b6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8024990:	687b      	ldr	r3, [r7, #4]
 8024992:	681b      	ldr	r3, [r3, #0]
 8024994:	4a0e      	ldr	r2, [pc, #56]	; (80249d0 <HAL_TIM_PWM_MspInit+0x98>)
 8024996:	4293      	cmp	r3, r2
 8024998:	d10d      	bne.n	80249b6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 802499a:	2300      	movs	r3, #0
 802499c:	60fb      	str	r3, [r7, #12]
 802499e:	4b0a      	ldr	r3, [pc, #40]	; (80249c8 <HAL_TIM_PWM_MspInit+0x90>)
 80249a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249a2:	4a09      	ldr	r2, [pc, #36]	; (80249c8 <HAL_TIM_PWM_MspInit+0x90>)
 80249a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80249a8:	6413      	str	r3, [r2, #64]	; 0x40
 80249aa:	4b07      	ldr	r3, [pc, #28]	; (80249c8 <HAL_TIM_PWM_MspInit+0x90>)
 80249ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80249b2:	60fb      	str	r3, [r7, #12]
 80249b4:	68fb      	ldr	r3, [r7, #12]
}
 80249b6:	bf00      	nop
 80249b8:	371c      	adds	r7, #28
 80249ba:	46bd      	mov	sp, r7
 80249bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249c0:	4770      	bx	lr
 80249c2:	bf00      	nop
 80249c4:	40010000 	.word	0x40010000
 80249c8:	40023800 	.word	0x40023800
 80249cc:	40000400 	.word	0x40000400
 80249d0:	40001800 	.word	0x40001800

080249d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80249d4:	b580      	push	{r7, lr}
 80249d6:	b088      	sub	sp, #32
 80249d8:	af00      	add	r7, sp, #0
 80249da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80249dc:	687b      	ldr	r3, [r7, #4]
 80249de:	681b      	ldr	r3, [r3, #0]
 80249e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80249e4:	d116      	bne.n	8024a14 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80249e6:	2300      	movs	r3, #0
 80249e8:	61fb      	str	r3, [r7, #28]
 80249ea:	4b40      	ldr	r3, [pc, #256]	; (8024aec <HAL_TIM_Base_MspInit+0x118>)
 80249ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249ee:	4a3f      	ldr	r2, [pc, #252]	; (8024aec <HAL_TIM_Base_MspInit+0x118>)
 80249f0:	f043 0301 	orr.w	r3, r3, #1
 80249f4:	6413      	str	r3, [r2, #64]	; 0x40
 80249f6:	4b3d      	ldr	r3, [pc, #244]	; (8024aec <HAL_TIM_Base_MspInit+0x118>)
 80249f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249fa:	f003 0301 	and.w	r3, r3, #1
 80249fe:	61fb      	str	r3, [r7, #28]
 8024a00:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8024a02:	2200      	movs	r2, #0
 8024a04:	2100      	movs	r1, #0
 8024a06:	201c      	movs	r0, #28
 8024a08:	f002 fb35 	bl	8027076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8024a0c:	201c      	movs	r0, #28
 8024a0e:	f002 fb4e 	bl	80270ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8024a12:	e066      	b.n	8024ae2 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8024a14:	687b      	ldr	r3, [r7, #4]
 8024a16:	681b      	ldr	r3, [r3, #0]
 8024a18:	4a35      	ldr	r2, [pc, #212]	; (8024af0 <HAL_TIM_Base_MspInit+0x11c>)
 8024a1a:	4293      	cmp	r3, r2
 8024a1c:	d116      	bne.n	8024a4c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8024a1e:	2300      	movs	r3, #0
 8024a20:	61bb      	str	r3, [r7, #24]
 8024a22:	4b32      	ldr	r3, [pc, #200]	; (8024aec <HAL_TIM_Base_MspInit+0x118>)
 8024a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a26:	4a31      	ldr	r2, [pc, #196]	; (8024aec <HAL_TIM_Base_MspInit+0x118>)
 8024a28:	f043 0308 	orr.w	r3, r3, #8
 8024a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8024a2e:	4b2f      	ldr	r3, [pc, #188]	; (8024aec <HAL_TIM_Base_MspInit+0x118>)
 8024a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a32:	f003 0308 	and.w	r3, r3, #8
 8024a36:	61bb      	str	r3, [r7, #24]
 8024a38:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8024a3a:	2200      	movs	r2, #0
 8024a3c:	2100      	movs	r1, #0
 8024a3e:	2032      	movs	r0, #50	; 0x32
 8024a40:	f002 fb19 	bl	8027076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8024a44:	2032      	movs	r0, #50	; 0x32
 8024a46:	f002 fb32 	bl	80270ae <HAL_NVIC_EnableIRQ>
}
 8024a4a:	e04a      	b.n	8024ae2 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8024a4c:	687b      	ldr	r3, [r7, #4]
 8024a4e:	681b      	ldr	r3, [r3, #0]
 8024a50:	4a28      	ldr	r2, [pc, #160]	; (8024af4 <HAL_TIM_Base_MspInit+0x120>)
 8024a52:	4293      	cmp	r3, r2
 8024a54:	d116      	bne.n	8024a84 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8024a56:	2300      	movs	r3, #0
 8024a58:	617b      	str	r3, [r7, #20]
 8024a5a:	4b24      	ldr	r3, [pc, #144]	; (8024aec <HAL_TIM_Base_MspInit+0x118>)
 8024a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a5e:	4a23      	ldr	r2, [pc, #140]	; (8024aec <HAL_TIM_Base_MspInit+0x118>)
 8024a60:	f043 0310 	orr.w	r3, r3, #16
 8024a64:	6413      	str	r3, [r2, #64]	; 0x40
 8024a66:	4b21      	ldr	r3, [pc, #132]	; (8024aec <HAL_TIM_Base_MspInit+0x118>)
 8024a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a6a:	f003 0310 	and.w	r3, r3, #16
 8024a6e:	617b      	str	r3, [r7, #20]
 8024a70:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8024a72:	2200      	movs	r2, #0
 8024a74:	2100      	movs	r1, #0
 8024a76:	2036      	movs	r0, #54	; 0x36
 8024a78:	f002 fafd 	bl	8027076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8024a7c:	2036      	movs	r0, #54	; 0x36
 8024a7e:	f002 fb16 	bl	80270ae <HAL_NVIC_EnableIRQ>
}
 8024a82:	e02e      	b.n	8024ae2 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8024a84:	687b      	ldr	r3, [r7, #4]
 8024a86:	681b      	ldr	r3, [r3, #0]
 8024a88:	4a1b      	ldr	r2, [pc, #108]	; (8024af8 <HAL_TIM_Base_MspInit+0x124>)
 8024a8a:	4293      	cmp	r3, r2
 8024a8c:	d116      	bne.n	8024abc <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8024a8e:	2300      	movs	r3, #0
 8024a90:	613b      	str	r3, [r7, #16]
 8024a92:	4b16      	ldr	r3, [pc, #88]	; (8024aec <HAL_TIM_Base_MspInit+0x118>)
 8024a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a96:	4a15      	ldr	r2, [pc, #84]	; (8024aec <HAL_TIM_Base_MspInit+0x118>)
 8024a98:	f043 0320 	orr.w	r3, r3, #32
 8024a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8024a9e:	4b13      	ldr	r3, [pc, #76]	; (8024aec <HAL_TIM_Base_MspInit+0x118>)
 8024aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024aa2:	f003 0320 	and.w	r3, r3, #32
 8024aa6:	613b      	str	r3, [r7, #16]
 8024aa8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8024aaa:	2200      	movs	r2, #0
 8024aac:	2100      	movs	r1, #0
 8024aae:	2037      	movs	r0, #55	; 0x37
 8024ab0:	f002 fae1 	bl	8027076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8024ab4:	2037      	movs	r0, #55	; 0x37
 8024ab6:	f002 fafa 	bl	80270ae <HAL_NVIC_EnableIRQ>
}
 8024aba:	e012      	b.n	8024ae2 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8024abc:	687b      	ldr	r3, [r7, #4]
 8024abe:	681b      	ldr	r3, [r3, #0]
 8024ac0:	4a0e      	ldr	r2, [pc, #56]	; (8024afc <HAL_TIM_Base_MspInit+0x128>)
 8024ac2:	4293      	cmp	r3, r2
 8024ac4:	d10d      	bne.n	8024ae2 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8024ac6:	2300      	movs	r3, #0
 8024ac8:	60fb      	str	r3, [r7, #12]
 8024aca:	4b08      	ldr	r3, [pc, #32]	; (8024aec <HAL_TIM_Base_MspInit+0x118>)
 8024acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024ace:	4a07      	ldr	r2, [pc, #28]	; (8024aec <HAL_TIM_Base_MspInit+0x118>)
 8024ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8024ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8024ad6:	4b05      	ldr	r3, [pc, #20]	; (8024aec <HAL_TIM_Base_MspInit+0x118>)
 8024ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8024ade:	60fb      	str	r3, [r7, #12]
 8024ae0:	68fb      	ldr	r3, [r7, #12]
}
 8024ae2:	bf00      	nop
 8024ae4:	3720      	adds	r7, #32
 8024ae6:	46bd      	mov	sp, r7
 8024ae8:	bd80      	pop	{r7, pc}
 8024aea:	bf00      	nop
 8024aec:	40023800 	.word	0x40023800
 8024af0:	40000c00 	.word	0x40000c00
 8024af4:	40001000 	.word	0x40001000
 8024af8:	40001400 	.word	0x40001400
 8024afc:	40014800 	.word	0x40014800

08024b00 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8024b00:	b580      	push	{r7, lr}
 8024b02:	b08c      	sub	sp, #48	; 0x30
 8024b04:	af00      	add	r7, sp, #0
 8024b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024b08:	f107 031c 	add.w	r3, r7, #28
 8024b0c:	2200      	movs	r2, #0
 8024b0e:	601a      	str	r2, [r3, #0]
 8024b10:	605a      	str	r2, [r3, #4]
 8024b12:	609a      	str	r2, [r3, #8]
 8024b14:	60da      	str	r2, [r3, #12]
 8024b16:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8024b18:	687b      	ldr	r3, [r7, #4]
 8024b1a:	681b      	ldr	r3, [r3, #0]
 8024b1c:	4a32      	ldr	r2, [pc, #200]	; (8024be8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8024b1e:	4293      	cmp	r3, r2
 8024b20:	d12c      	bne.n	8024b7c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8024b22:	2300      	movs	r3, #0
 8024b24:	61bb      	str	r3, [r7, #24]
 8024b26:	4b31      	ldr	r3, [pc, #196]	; (8024bec <HAL_TIM_Encoder_MspInit+0xec>)
 8024b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b2a:	4a30      	ldr	r2, [pc, #192]	; (8024bec <HAL_TIM_Encoder_MspInit+0xec>)
 8024b2c:	f043 0304 	orr.w	r3, r3, #4
 8024b30:	6413      	str	r3, [r2, #64]	; 0x40
 8024b32:	4b2e      	ldr	r3, [pc, #184]	; (8024bec <HAL_TIM_Encoder_MspInit+0xec>)
 8024b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b36:	f003 0304 	and.w	r3, r3, #4
 8024b3a:	61bb      	str	r3, [r7, #24]
 8024b3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8024b3e:	2300      	movs	r3, #0
 8024b40:	617b      	str	r3, [r7, #20]
 8024b42:	4b2a      	ldr	r3, [pc, #168]	; (8024bec <HAL_TIM_Encoder_MspInit+0xec>)
 8024b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024b46:	4a29      	ldr	r2, [pc, #164]	; (8024bec <HAL_TIM_Encoder_MspInit+0xec>)
 8024b48:	f043 0302 	orr.w	r3, r3, #2
 8024b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8024b4e:	4b27      	ldr	r3, [pc, #156]	; (8024bec <HAL_TIM_Encoder_MspInit+0xec>)
 8024b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024b52:	f003 0302 	and.w	r3, r3, #2
 8024b56:	617b      	str	r3, [r7, #20]
 8024b58:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8024b5a:	23c0      	movs	r3, #192	; 0xc0
 8024b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024b5e:	2302      	movs	r3, #2
 8024b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024b62:	2300      	movs	r3, #0
 8024b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024b66:	2300      	movs	r3, #0
 8024b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8024b6a:	2302      	movs	r3, #2
 8024b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024b6e:	f107 031c 	add.w	r3, r7, #28
 8024b72:	4619      	mov	r1, r3
 8024b74:	481e      	ldr	r0, [pc, #120]	; (8024bf0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8024b76:	f002 fe11 	bl	802779c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8024b7a:	e030      	b.n	8024bde <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8024b7c:	687b      	ldr	r3, [r7, #4]
 8024b7e:	681b      	ldr	r3, [r3, #0]
 8024b80:	4a1c      	ldr	r2, [pc, #112]	; (8024bf4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8024b82:	4293      	cmp	r3, r2
 8024b84:	d12b      	bne.n	8024bde <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8024b86:	2300      	movs	r3, #0
 8024b88:	613b      	str	r3, [r7, #16]
 8024b8a:	4b18      	ldr	r3, [pc, #96]	; (8024bec <HAL_TIM_Encoder_MspInit+0xec>)
 8024b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024b8e:	4a17      	ldr	r2, [pc, #92]	; (8024bec <HAL_TIM_Encoder_MspInit+0xec>)
 8024b90:	f043 0302 	orr.w	r3, r3, #2
 8024b94:	6453      	str	r3, [r2, #68]	; 0x44
 8024b96:	4b15      	ldr	r3, [pc, #84]	; (8024bec <HAL_TIM_Encoder_MspInit+0xec>)
 8024b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024b9a:	f003 0302 	and.w	r3, r3, #2
 8024b9e:	613b      	str	r3, [r7, #16]
 8024ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8024ba2:	2300      	movs	r3, #0
 8024ba4:	60fb      	str	r3, [r7, #12]
 8024ba6:	4b11      	ldr	r3, [pc, #68]	; (8024bec <HAL_TIM_Encoder_MspInit+0xec>)
 8024ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024baa:	4a10      	ldr	r2, [pc, #64]	; (8024bec <HAL_TIM_Encoder_MspInit+0xec>)
 8024bac:	f043 0304 	orr.w	r3, r3, #4
 8024bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8024bb2:	4b0e      	ldr	r3, [pc, #56]	; (8024bec <HAL_TIM_Encoder_MspInit+0xec>)
 8024bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024bb6:	f003 0304 	and.w	r3, r3, #4
 8024bba:	60fb      	str	r3, [r7, #12]
 8024bbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8024bbe:	23c0      	movs	r3, #192	; 0xc0
 8024bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024bc2:	2302      	movs	r3, #2
 8024bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024bc6:	2300      	movs	r3, #0
 8024bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024bca:	2300      	movs	r3, #0
 8024bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8024bce:	2303      	movs	r3, #3
 8024bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8024bd2:	f107 031c 	add.w	r3, r7, #28
 8024bd6:	4619      	mov	r1, r3
 8024bd8:	4807      	ldr	r0, [pc, #28]	; (8024bf8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8024bda:	f002 fddf 	bl	802779c <HAL_GPIO_Init>
}
 8024bde:	bf00      	nop
 8024be0:	3730      	adds	r7, #48	; 0x30
 8024be2:	46bd      	mov	sp, r7
 8024be4:	bd80      	pop	{r7, pc}
 8024be6:	bf00      	nop
 8024be8:	40000800 	.word	0x40000800
 8024bec:	40023800 	.word	0x40023800
 8024bf0:	40020400 	.word	0x40020400
 8024bf4:	40010400 	.word	0x40010400
 8024bf8:	40020800 	.word	0x40020800

08024bfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8024bfc:	b580      	push	{r7, lr}
 8024bfe:	b08c      	sub	sp, #48	; 0x30
 8024c00:	af00      	add	r7, sp, #0
 8024c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024c04:	f107 031c 	add.w	r3, r7, #28
 8024c08:	2200      	movs	r2, #0
 8024c0a:	601a      	str	r2, [r3, #0]
 8024c0c:	605a      	str	r2, [r3, #4]
 8024c0e:	609a      	str	r2, [r3, #8]
 8024c10:	60da      	str	r2, [r3, #12]
 8024c12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8024c14:	687b      	ldr	r3, [r7, #4]
 8024c16:	681b      	ldr	r3, [r3, #0]
 8024c18:	4a59      	ldr	r2, [pc, #356]	; (8024d80 <HAL_TIM_MspPostInit+0x184>)
 8024c1a:	4293      	cmp	r3, r2
 8024c1c:	d11f      	bne.n	8024c5e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024c1e:	2300      	movs	r3, #0
 8024c20:	61bb      	str	r3, [r7, #24]
 8024c22:	4b58      	ldr	r3, [pc, #352]	; (8024d84 <HAL_TIM_MspPostInit+0x188>)
 8024c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024c26:	4a57      	ldr	r2, [pc, #348]	; (8024d84 <HAL_TIM_MspPostInit+0x188>)
 8024c28:	f043 0301 	orr.w	r3, r3, #1
 8024c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8024c2e:	4b55      	ldr	r3, [pc, #340]	; (8024d84 <HAL_TIM_MspPostInit+0x188>)
 8024c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024c32:	f003 0301 	and.w	r3, r3, #1
 8024c36:	61bb      	str	r3, [r7, #24]
 8024c38:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8024c3a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8024c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024c40:	2302      	movs	r3, #2
 8024c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024c44:	2300      	movs	r3, #0
 8024c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024c48:	2300      	movs	r3, #0
 8024c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8024c4c:	2301      	movs	r3, #1
 8024c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8024c50:	f107 031c 	add.w	r3, r7, #28
 8024c54:	4619      	mov	r1, r3
 8024c56:	484c      	ldr	r0, [pc, #304]	; (8024d88 <HAL_TIM_MspPostInit+0x18c>)
 8024c58:	f002 fda0 	bl	802779c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8024c5c:	e08b      	b.n	8024d76 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8024c5e:	687b      	ldr	r3, [r7, #4]
 8024c60:	681b      	ldr	r3, [r3, #0]
 8024c62:	4a4a      	ldr	r2, [pc, #296]	; (8024d8c <HAL_TIM_MspPostInit+0x190>)
 8024c64:	4293      	cmp	r3, r2
 8024c66:	d13d      	bne.n	8024ce4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8024c68:	2300      	movs	r3, #0
 8024c6a:	617b      	str	r3, [r7, #20]
 8024c6c:	4b45      	ldr	r3, [pc, #276]	; (8024d84 <HAL_TIM_MspPostInit+0x188>)
 8024c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024c70:	4a44      	ldr	r2, [pc, #272]	; (8024d84 <HAL_TIM_MspPostInit+0x188>)
 8024c72:	f043 0304 	orr.w	r3, r3, #4
 8024c76:	6313      	str	r3, [r2, #48]	; 0x30
 8024c78:	4b42      	ldr	r3, [pc, #264]	; (8024d84 <HAL_TIM_MspPostInit+0x188>)
 8024c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024c7c:	f003 0304 	and.w	r3, r3, #4
 8024c80:	617b      	str	r3, [r7, #20]
 8024c82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8024c84:	2300      	movs	r3, #0
 8024c86:	613b      	str	r3, [r7, #16]
 8024c88:	4b3e      	ldr	r3, [pc, #248]	; (8024d84 <HAL_TIM_MspPostInit+0x188>)
 8024c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024c8c:	4a3d      	ldr	r2, [pc, #244]	; (8024d84 <HAL_TIM_MspPostInit+0x188>)
 8024c8e:	f043 0302 	orr.w	r3, r3, #2
 8024c92:	6313      	str	r3, [r2, #48]	; 0x30
 8024c94:	4b3b      	ldr	r3, [pc, #236]	; (8024d84 <HAL_TIM_MspPostInit+0x188>)
 8024c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024c98:	f003 0302 	and.w	r3, r3, #2
 8024c9c:	613b      	str	r3, [r7, #16]
 8024c9e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8024ca0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8024ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024ca6:	2302      	movs	r3, #2
 8024ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024caa:	2300      	movs	r3, #0
 8024cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024cae:	2300      	movs	r3, #0
 8024cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8024cb2:	2302      	movs	r3, #2
 8024cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8024cb6:	f107 031c 	add.w	r3, r7, #28
 8024cba:	4619      	mov	r1, r3
 8024cbc:	4834      	ldr	r0, [pc, #208]	; (8024d90 <HAL_TIM_MspPostInit+0x194>)
 8024cbe:	f002 fd6d 	bl	802779c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8024cc2:	2330      	movs	r3, #48	; 0x30
 8024cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024cc6:	2302      	movs	r3, #2
 8024cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024cca:	2300      	movs	r3, #0
 8024ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024cce:	2300      	movs	r3, #0
 8024cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8024cd2:	2302      	movs	r3, #2
 8024cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024cd6:	f107 031c 	add.w	r3, r7, #28
 8024cda:	4619      	mov	r1, r3
 8024cdc:	482d      	ldr	r0, [pc, #180]	; (8024d94 <HAL_TIM_MspPostInit+0x198>)
 8024cde:	f002 fd5d 	bl	802779c <HAL_GPIO_Init>
}
 8024ce2:	e048      	b.n	8024d76 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 8024ce4:	687b      	ldr	r3, [r7, #4]
 8024ce6:	681b      	ldr	r3, [r3, #0]
 8024ce8:	4a2b      	ldr	r2, [pc, #172]	; (8024d98 <HAL_TIM_MspPostInit+0x19c>)
 8024cea:	4293      	cmp	r3, r2
 8024cec:	d11f      	bne.n	8024d2e <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8024cee:	2300      	movs	r3, #0
 8024cf0:	60fb      	str	r3, [r7, #12]
 8024cf2:	4b24      	ldr	r3, [pc, #144]	; (8024d84 <HAL_TIM_MspPostInit+0x188>)
 8024cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024cf6:	4a23      	ldr	r2, [pc, #140]	; (8024d84 <HAL_TIM_MspPostInit+0x188>)
 8024cf8:	f043 0302 	orr.w	r3, r3, #2
 8024cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8024cfe:	4b21      	ldr	r3, [pc, #132]	; (8024d84 <HAL_TIM_MspPostInit+0x188>)
 8024d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024d02:	f003 0302 	and.w	r3, r3, #2
 8024d06:	60fb      	str	r3, [r7, #12]
 8024d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8024d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024d10:	2302      	movs	r3, #2
 8024d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024d14:	2300      	movs	r3, #0
 8024d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024d18:	2300      	movs	r3, #0
 8024d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8024d1c:	2303      	movs	r3, #3
 8024d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024d20:	f107 031c 	add.w	r3, r7, #28
 8024d24:	4619      	mov	r1, r3
 8024d26:	481b      	ldr	r0, [pc, #108]	; (8024d94 <HAL_TIM_MspPostInit+0x198>)
 8024d28:	f002 fd38 	bl	802779c <HAL_GPIO_Init>
}
 8024d2c:	e023      	b.n	8024d76 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8024d2e:	687b      	ldr	r3, [r7, #4]
 8024d30:	681b      	ldr	r3, [r3, #0]
 8024d32:	4a1a      	ldr	r2, [pc, #104]	; (8024d9c <HAL_TIM_MspPostInit+0x1a0>)
 8024d34:	4293      	cmp	r3, r2
 8024d36:	d11e      	bne.n	8024d76 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8024d38:	2300      	movs	r3, #0
 8024d3a:	60bb      	str	r3, [r7, #8]
 8024d3c:	4b11      	ldr	r3, [pc, #68]	; (8024d84 <HAL_TIM_MspPostInit+0x188>)
 8024d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024d40:	4a10      	ldr	r2, [pc, #64]	; (8024d84 <HAL_TIM_MspPostInit+0x188>)
 8024d42:	f043 0302 	orr.w	r3, r3, #2
 8024d46:	6313      	str	r3, [r2, #48]	; 0x30
 8024d48:	4b0e      	ldr	r3, [pc, #56]	; (8024d84 <HAL_TIM_MspPostInit+0x188>)
 8024d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024d4c:	f003 0302 	and.w	r3, r3, #2
 8024d50:	60bb      	str	r3, [r7, #8]
 8024d52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8024d54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8024d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024d5a:	2302      	movs	r3, #2
 8024d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024d5e:	2300      	movs	r3, #0
 8024d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024d62:	2300      	movs	r3, #0
 8024d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8024d66:	2309      	movs	r3, #9
 8024d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024d6a:	f107 031c 	add.w	r3, r7, #28
 8024d6e:	4619      	mov	r1, r3
 8024d70:	4808      	ldr	r0, [pc, #32]	; (8024d94 <HAL_TIM_MspPostInit+0x198>)
 8024d72:	f002 fd13 	bl	802779c <HAL_GPIO_Init>
}
 8024d76:	bf00      	nop
 8024d78:	3730      	adds	r7, #48	; 0x30
 8024d7a:	46bd      	mov	sp, r7
 8024d7c:	bd80      	pop	{r7, pc}
 8024d7e:	bf00      	nop
 8024d80:	40010000 	.word	0x40010000
 8024d84:	40023800 	.word	0x40023800
 8024d88:	40020000 	.word	0x40020000
 8024d8c:	40000400 	.word	0x40000400
 8024d90:	40020800 	.word	0x40020800
 8024d94:	40020400 	.word	0x40020400
 8024d98:	40014800 	.word	0x40014800
 8024d9c:	40001800 	.word	0x40001800

08024da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8024da0:	b480      	push	{r7}
 8024da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8024da4:	e7fe      	b.n	8024da4 <NMI_Handler+0x4>

08024da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8024da6:	b480      	push	{r7}
 8024da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8024daa:	e7fe      	b.n	8024daa <HardFault_Handler+0x4>

08024dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8024dac:	b480      	push	{r7}
 8024dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8024db0:	e7fe      	b.n	8024db0 <MemManage_Handler+0x4>

08024db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8024db2:	b480      	push	{r7}
 8024db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8024db6:	e7fe      	b.n	8024db6 <BusFault_Handler+0x4>

08024db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8024db8:	b480      	push	{r7}
 8024dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8024dbc:	e7fe      	b.n	8024dbc <UsageFault_Handler+0x4>

08024dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8024dbe:	b480      	push	{r7}
 8024dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8024dc2:	bf00      	nop
 8024dc4:	46bd      	mov	sp, r7
 8024dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dca:	4770      	bx	lr

08024dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8024dcc:	b480      	push	{r7}
 8024dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8024dd0:	bf00      	nop
 8024dd2:	46bd      	mov	sp, r7
 8024dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dd8:	4770      	bx	lr

08024dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8024dda:	b480      	push	{r7}
 8024ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8024dde:	bf00      	nop
 8024de0:	46bd      	mov	sp, r7
 8024de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024de6:	4770      	bx	lr

08024de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8024de8:	b580      	push	{r7, lr}
 8024dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8024dec:	f001 fc32 	bl	8026654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8024df0:	bf00      	nop
 8024df2:	bd80      	pop	{r7, pc}

08024df4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8024df4:	b580      	push	{r7, lr}
 8024df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8024df8:	4802      	ldr	r0, [pc, #8]	; (8024e04 <TIM2_IRQHandler+0x10>)
 8024dfa:	f004 fad0 	bl	802939e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8024dfe:	bf00      	nop
 8024e00:	bd80      	pop	{r7, pc}
 8024e02:	bf00      	nop
 8024e04:	20000a6c 	.word	0x20000a6c

08024e08 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8024e08:	b580      	push	{r7, lr}
 8024e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8024e0c:	4802      	ldr	r0, [pc, #8]	; (8024e18 <TIM5_IRQHandler+0x10>)
 8024e0e:	f004 fac6 	bl	802939e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8024e12:	bf00      	nop
 8024e14:	bd80      	pop	{r7, pc}
 8024e16:	bf00      	nop
 8024e18:	2000088c 	.word	0x2000088c

08024e1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8024e1c:	b580      	push	{r7, lr}
 8024e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8024e20:	4802      	ldr	r0, [pc, #8]	; (8024e2c <TIM6_DAC_IRQHandler+0x10>)
 8024e22:	f004 fabc 	bl	802939e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8024e26:	bf00      	nop
 8024e28:	bd80      	pop	{r7, pc}
 8024e2a:	bf00      	nop
 8024e2c:	200009ec 	.word	0x200009ec

08024e30 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8024e30:	b580      	push	{r7, lr}
 8024e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8024e34:	4802      	ldr	r0, [pc, #8]	; (8024e40 <TIM7_IRQHandler+0x10>)
 8024e36:	f004 fab2 	bl	802939e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8024e3a:	bf00      	nop
 8024e3c:	bd80      	pop	{r7, pc}
 8024e3e:	bf00      	nop
 8024e40:	20000aec 	.word	0x20000aec

08024e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8024e44:	b480      	push	{r7}
 8024e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8024e48:	4b08      	ldr	r3, [pc, #32]	; (8024e6c <SystemInit+0x28>)
 8024e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024e4e:	4a07      	ldr	r2, [pc, #28]	; (8024e6c <SystemInit+0x28>)
 8024e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8024e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8024e58:	4b04      	ldr	r3, [pc, #16]	; (8024e6c <SystemInit+0x28>)
 8024e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8024e5e:	609a      	str	r2, [r3, #8]
#endif
}
 8024e60:	bf00      	nop
 8024e62:	46bd      	mov	sp, r7
 8024e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e68:	4770      	bx	lr
 8024e6a:	bf00      	nop
 8024e6c:	e000ed00 	.word	0xe000ed00

08024e70 <_ZN15VelocityControlC1Ev>:
#include "velocity_control.hpp"

VelocityControl::VelocityControl() : integral_error_(0) {}
 8024e70:	b580      	push	{r7, lr}
 8024e72:	b082      	sub	sp, #8
 8024e74:	af00      	add	r7, sp, #0
 8024e76:	6078      	str	r0, [r7, #4]
 8024e78:	687b      	ldr	r3, [r7, #4]
 8024e7a:	f04f 0200 	mov.w	r2, #0
 8024e7e:	601a      	str	r2, [r3, #0]
 8024e80:	687b      	ldr	r3, [r7, #4]
 8024e82:	3304      	adds	r3, #4
 8024e84:	4618      	mov	r0, r3
 8024e86:	f7fb ff45 	bl	8020d14 <_ZN7EncoderC1Ev>
 8024e8a:	687b      	ldr	r3, [r7, #4]
 8024e8c:	4618      	mov	r0, r3
 8024e8e:	3708      	adds	r7, #8
 8024e90:	46bd      	mov	sp, r7
 8024e92:	bd80      	pop	{r7, pc}
 8024e94:	0000      	movs	r0, r0
	...

08024e98 <_ZN15VelocityControl10PidControlEffff>:
{
    integral_error_ = 0.0;
}

float VelocityControl::PidControl(float target, float p_gain, float i_gain, float d_gain)
{
 8024e98:	b5b0      	push	{r4, r5, r7, lr}
 8024e9a:	b08e      	sub	sp, #56	; 0x38
 8024e9c:	af00      	add	r7, sp, #0
 8024e9e:	6178      	str	r0, [r7, #20]
 8024ea0:	ed87 0a04 	vstr	s0, [r7, #16]
 8024ea4:	edc7 0a03 	vstr	s1, [r7, #12]
 8024ea8:	ed87 1a02 	vstr	s2, [r7, #8]
 8024eac:	edc7 1a01 	vstr	s3, [r7, #4]
    float current = encoder.GetDistance() / TIM6_PERIOD; // [mm/ms]
 8024eb0:	697b      	ldr	r3, [r7, #20]
 8024eb2:	3304      	adds	r3, #4
 8024eb4:	4618      	mov	r0, r3
 8024eb6:	f7fb ffed 	bl	8020e94 <_ZN7Encoder11GetDistanceEv>
 8024eba:	eef0 6a40 	vmov.f32	s13, s0
 8024ebe:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8024ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8024ec6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    static float pre_filter = 0.0;
    float filter = pre_filter * (1.0 - LPF_VELOCITY) + (current * LPF_VELOCITY);
 8024eca:	4b71      	ldr	r3, [pc, #452]	; (8025090 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8024ecc:	681b      	ldr	r3, [r3, #0]
 8024ece:	4618      	mov	r0, r3
 8024ed0:	f7fb fa1a 	bl	8020308 <__aeabi_f2d>
 8024ed4:	a368      	add	r3, pc, #416	; (adr r3, 8025078 <_ZN15VelocityControl10PidControlEffff+0x1e0>)
 8024ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024eda:	f7fb fa6d 	bl	80203b8 <__aeabi_dmul>
 8024ede:	4603      	mov	r3, r0
 8024ee0:	460c      	mov	r4, r1
 8024ee2:	4625      	mov	r5, r4
 8024ee4:	461c      	mov	r4, r3
 8024ee6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024ee8:	f7fb fa0e 	bl	8020308 <__aeabi_f2d>
 8024eec:	a364      	add	r3, pc, #400	; (adr r3, 8025080 <_ZN15VelocityControl10PidControlEffff+0x1e8>)
 8024eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ef2:	f7fb fa61 	bl	80203b8 <__aeabi_dmul>
 8024ef6:	4602      	mov	r2, r0
 8024ef8:	460b      	mov	r3, r1
 8024efa:	4620      	mov	r0, r4
 8024efc:	4629      	mov	r1, r5
 8024efe:	f7fb f8a5 	bl	802004c <__adddf3>
 8024f02:	4603      	mov	r3, r0
 8024f04:	460c      	mov	r4, r1
 8024f06:	4618      	mov	r0, r3
 8024f08:	4621      	mov	r1, r4
 8024f0a:	f7fb fcef 	bl	80208ec <__aeabi_d2f>
 8024f0e:	4603      	mov	r3, r0
 8024f10:	633b      	str	r3, [r7, #48]	; 0x30
    pre_filter = filter;
 8024f12:	4a5f      	ldr	r2, [pc, #380]	; (8025090 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8024f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024f16:	6013      	str	r3, [r2, #0]

    float error = target - filter;
 8024f18:	ed97 7a04 	vldr	s14, [r7, #16]
 8024f1c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8024f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024f24:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    static float pre_error = error;
 8024f28:	4b5a      	ldr	r3, [pc, #360]	; (8025094 <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8024f2a:	781b      	ldrb	r3, [r3, #0]
 8024f2c:	f3bf 8f5b 	dmb	ish
 8024f30:	b2db      	uxtb	r3, r3
 8024f32:	f003 0301 	and.w	r3, r3, #1
 8024f36:	2b00      	cmp	r3, #0
 8024f38:	bf0c      	ite	eq
 8024f3a:	2301      	moveq	r3, #1
 8024f3c:	2300      	movne	r3, #0
 8024f3e:	b2db      	uxtb	r3, r3
 8024f40:	2b00      	cmp	r3, #0
 8024f42:	d010      	beq.n	8024f66 <_ZN15VelocityControl10PidControlEffff+0xce>
 8024f44:	4853      	ldr	r0, [pc, #332]	; (8025094 <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8024f46:	f005 f8cb 	bl	802a0e0 <__cxa_guard_acquire>
 8024f4a:	4603      	mov	r3, r0
 8024f4c:	2b00      	cmp	r3, #0
 8024f4e:	bf14      	ite	ne
 8024f50:	2301      	movne	r3, #1
 8024f52:	2300      	moveq	r3, #0
 8024f54:	b2db      	uxtb	r3, r3
 8024f56:	2b00      	cmp	r3, #0
 8024f58:	d005      	beq.n	8024f66 <_ZN15VelocityControl10PidControlEffff+0xce>
 8024f5a:	4a4f      	ldr	r2, [pc, #316]	; (8025098 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8024f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f5e:	6013      	str	r3, [r2, #0]
 8024f60:	484c      	ldr	r0, [pc, #304]	; (8025094 <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8024f62:	f005 f8c9 	bl	802a0f8 <__cxa_guard_release>

    float differential_error = (error - pre_error) / TIM6_PERIOD_S;
 8024f66:	4b4c      	ldr	r3, [pc, #304]	; (8025098 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8024f68:	edd3 7a00 	vldr	s15, [r3]
 8024f6c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8024f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024f74:	ee17 0a90 	vmov	r0, s15
 8024f78:	f7fb f9c6 	bl	8020308 <__aeabi_f2d>
 8024f7c:	a342      	add	r3, pc, #264	; (adr r3, 8025088 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8024f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f82:	f7fb fb43 	bl	802060c <__aeabi_ddiv>
 8024f86:	4603      	mov	r3, r0
 8024f88:	460c      	mov	r4, r1
 8024f8a:	4618      	mov	r0, r3
 8024f8c:	4621      	mov	r1, r4
 8024f8e:	f7fb fcad 	bl	80208ec <__aeabi_d2f>
 8024f92:	4603      	mov	r3, r0
 8024f94:	62bb      	str	r3, [r7, #40]	; 0x28
    float integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 8024f96:	4b40      	ldr	r3, [pc, #256]	; (8025098 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8024f98:	ed93 7a00 	vldr	s14, [r3]
 8024f9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8024fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024fa4:	ee17 0a90 	vmov	r0, s15
 8024fa8:	f7fb f9ae 	bl	8020308 <__aeabi_f2d>
 8024fac:	f04f 0200 	mov.w	r2, #0
 8024fb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024fb4:	f7fb fb2a 	bl	802060c <__aeabi_ddiv>
 8024fb8:	4603      	mov	r3, r0
 8024fba:	460c      	mov	r4, r1
 8024fbc:	4618      	mov	r0, r3
 8024fbe:	4621      	mov	r1, r4
 8024fc0:	a331      	add	r3, pc, #196	; (adr r3, 8025088 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8024fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fc6:	f7fb f9f7 	bl	80203b8 <__aeabi_dmul>
 8024fca:	4603      	mov	r3, r0
 8024fcc:	460c      	mov	r4, r1
 8024fce:	4618      	mov	r0, r3
 8024fd0:	4621      	mov	r1, r4
 8024fd2:	f7fb fc8b 	bl	80208ec <__aeabi_d2f>
 8024fd6:	4603      	mov	r3, r0
 8024fd8:	627b      	str	r3, [r7, #36]	; 0x24
    SetIntegralError(integral_error);
 8024fda:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8024fde:	6978      	ldr	r0, [r7, #20]
 8024fe0:	f000 f870 	bl	80250c4 <_ZN15VelocityControl16SetIntegralErrorEf>
    pre_error = error;
 8024fe4:	4a2c      	ldr	r2, [pc, #176]	; (8025098 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8024fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024fe8:	6013      	str	r3, [r2, #0]

    float p = p_gain * error;
 8024fea:	ed97 7a03 	vldr	s14, [r7, #12]
 8024fee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8024ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024ff6:	edc7 7a08 	vstr	s15, [r7, #32]
    float d = d_gain * differential_error;
 8024ffa:	ed97 7a01 	vldr	s14, [r7, #4]
 8024ffe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8025002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025006:	edc7 7a07 	vstr	s15, [r7, #28]
    float i = i_gain * integral_error_;
 802500a:	697b      	ldr	r3, [r7, #20]
 802500c:	edd3 7a00 	vldr	s15, [r3]
 8025010:	ed97 7a02 	vldr	s14, [r7, #8]
 8025014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025018:	edc7 7a06 	vstr	s15, [r7, #24]

#ifdef DEBUG_MODE
    g_target_velocity  = target;
 802501c:	4a1f      	ldr	r2, [pc, #124]	; (802509c <_ZN15VelocityControl10PidControlEffff+0x204>)
 802501e:	693b      	ldr	r3, [r7, #16]
 8025020:	6013      	str	r3, [r2, #0]
    g_current_velocity = current;
 8025022:	4a1f      	ldr	r2, [pc, #124]	; (80250a0 <_ZN15VelocityControl10PidControlEffff+0x208>)
 8025024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025026:	6013      	str	r3, [r2, #0]
    g_filter_velocity  = filter;
 8025028:	4a1e      	ldr	r2, [pc, #120]	; (80250a4 <_ZN15VelocityControl10PidControlEffff+0x20c>)
 802502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802502c:	6013      	str	r3, [r2, #0]
    g_velocity_error   = error;
 802502e:	4a1e      	ldr	r2, [pc, #120]	; (80250a8 <_ZN15VelocityControl10PidControlEffff+0x210>)
 8025030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025032:	6013      	str	r3, [r2, #0]
    g_velocity_p = p;       g_velocity_d = d;       g_velocity_i = i;
 8025034:	4a1d      	ldr	r2, [pc, #116]	; (80250ac <_ZN15VelocityControl10PidControlEffff+0x214>)
 8025036:	6a3b      	ldr	r3, [r7, #32]
 8025038:	6013      	str	r3, [r2, #0]
 802503a:	4a1d      	ldr	r2, [pc, #116]	; (80250b0 <_ZN15VelocityControl10PidControlEffff+0x218>)
 802503c:	69fb      	ldr	r3, [r7, #28]
 802503e:	6013      	str	r3, [r2, #0]
 8025040:	4a1c      	ldr	r2, [pc, #112]	; (80250b4 <_ZN15VelocityControl10PidControlEffff+0x21c>)
 8025042:	69bb      	ldr	r3, [r7, #24]
 8025044:	6013      	str	r3, [r2, #0]
    g_velocity_p_gain = p;  g_velocity_d_gain = p;  g_velocity_i_gain = p;
 8025046:	4a1c      	ldr	r2, [pc, #112]	; (80250b8 <_ZN15VelocityControl10PidControlEffff+0x220>)
 8025048:	6a3b      	ldr	r3, [r7, #32]
 802504a:	6013      	str	r3, [r2, #0]
 802504c:	4a1b      	ldr	r2, [pc, #108]	; (80250bc <_ZN15VelocityControl10PidControlEffff+0x224>)
 802504e:	6a3b      	ldr	r3, [r7, #32]
 8025050:	6013      	str	r3, [r2, #0]
 8025052:	4a1b      	ldr	r2, [pc, #108]	; (80250c0 <_ZN15VelocityControl10PidControlEffff+0x228>)
 8025054:	6a3b      	ldr	r3, [r7, #32]
 8025056:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    return p + d + i;
 8025058:	ed97 7a08 	vldr	s14, [r7, #32]
 802505c:	edd7 7a07 	vldr	s15, [r7, #28]
 8025060:	ee37 7a27 	vadd.f32	s14, s14, s15
 8025064:	edd7 7a06 	vldr	s15, [r7, #24]
 8025068:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 802506c:	eeb0 0a67 	vmov.f32	s0, s15
 8025070:	3738      	adds	r7, #56	; 0x38
 8025072:	46bd      	mov	sp, r7
 8025074:	bdb0      	pop	{r4, r5, r7, pc}
 8025076:	bf00      	nop
 8025078:	33333334 	.word	0x33333334
 802507c:	3fd33333 	.word	0x3fd33333
 8025080:	66666666 	.word	0x66666666
 8025084:	3fe66666 	.word	0x3fe66666
 8025088:	47ae147b 	.word	0x47ae147b
 802508c:	3f547ae1 	.word	0x3f547ae1
 8025090:	20000340 	.word	0x20000340
 8025094:	20000348 	.word	0x20000348
 8025098:	20000344 	.word	0x20000344
 802509c:	200002e0 	.word	0x200002e0
 80250a0:	200002e4 	.word	0x200002e4
 80250a4:	200002e8 	.word	0x200002e8
 80250a8:	200002ec 	.word	0x200002ec
 80250ac:	200002f0 	.word	0x200002f0
 80250b0:	200002f8 	.word	0x200002f8
 80250b4:	200002f4 	.word	0x200002f4
 80250b8:	200002fc 	.word	0x200002fc
 80250bc:	20000304 	.word	0x20000304
 80250c0:	20000300 	.word	0x20000300

080250c4 <_ZN15VelocityControl16SetIntegralErrorEf>:

void VelocityControl::SetIntegralError(float integral_error)
{
 80250c4:	b480      	push	{r7}
 80250c6:	b083      	sub	sp, #12
 80250c8:	af00      	add	r7, sp, #0
 80250ca:	6078      	str	r0, [r7, #4]
 80250cc:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 80250d0:	687b      	ldr	r3, [r7, #4]
 80250d2:	ed93 7a00 	vldr	s14, [r3]
 80250d6:	edd7 7a00 	vldr	s15, [r7]
 80250da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80250de:	687b      	ldr	r3, [r7, #4]
 80250e0:	edc3 7a00 	vstr	s15, [r3]
}
 80250e4:	bf00      	nop
 80250e6:	370c      	adds	r7, #12
 80250e8:	46bd      	mov	sp, r7
 80250ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250ee:	4770      	bx	lr

080250f0 <Init>:
RotarySwitch rotary_switch;
SideSensor side_sensor;
VelocityControl velocity_control;

void Init()
{
 80250f0:	b580      	push	{r7, lr}
 80250f2:	b082      	sub	sp, #8
 80250f4:	af00      	add	r7, sp, #0
    line_sensor.Init();
 80250f6:	4818      	ldr	r0, [pc, #96]	; (8025158 <Init+0x68>)
 80250f8:	f7fc fd50 	bl	8021b9c <_ZN10LineSensor4InitEv>
    encoder.Init();
 80250fc:	4817      	ldr	r0, [pc, #92]	; (802515c <Init+0x6c>)
 80250fe:	f7fb fe21 	bl	8020d44 <_ZN7Encoder4InitEv>
    motor.Init();
 8025102:	4817      	ldr	r0, [pc, #92]	; (8025160 <Init+0x70>)
 8025104:	f7fe fe40 	bl	8023d88 <_ZN5Motor4InitEv>
    uint8_t imu_init = iim_42652.Init();
 8025108:	4816      	ldr	r0, [pc, #88]	; (8025164 <Init+0x74>)
 802510a:	f7fc f91b 	bl	8021344 <_ZN8Iim426524InitEv>
 802510e:	4603      	mov	r3, r0
 8025110:	71fb      	strb	r3, [r7, #7]

    if(imu_init == 0x09)
 8025112:	79fb      	ldrb	r3, [r7, #7]
 8025114:	2b09      	cmp	r3, #9
 8025116:	d10b      	bne.n	8025130 <Init+0x40>
    {
        led.Blink(1,'R','G');
 8025118:	2347      	movs	r3, #71	; 0x47
 802511a:	2252      	movs	r2, #82	; 0x52
 802511c:	2101      	movs	r1, #1
 802511e:	4812      	ldr	r0, [pc, #72]	; (8025168 <Init+0x78>)
 8025120:	f7fc fc80 	bl	8021a24 <_ZN3Led5BlinkEhcc>
        led.Blink(1,'B','X');
 8025124:	2358      	movs	r3, #88	; 0x58
 8025126:	2242      	movs	r2, #66	; 0x42
 8025128:	2101      	movs	r1, #1
 802512a:	480f      	ldr	r0, [pc, #60]	; (8025168 <Init+0x78>)
 802512c:	f7fc fc7a 	bl	8021a24 <_ZN3Led5BlinkEhcc>
    }

#ifdef DEBUG_MODE
    g_imu_init = imu_init;
 8025130:	4a0e      	ldr	r2, [pc, #56]	; (802516c <Init+0x7c>)
 8025132:	79fb      	ldrb	r3, [r7, #7]
 8025134:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    HAL_TIM_Base_Start_IT(&htim2);
 8025136:	480e      	ldr	r0, [pc, #56]	; (8025170 <Init+0x80>)
 8025138:	f003 ffdb 	bl	80290f2 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim5);
 802513c:	480d      	ldr	r0, [pc, #52]	; (8025174 <Init+0x84>)
 802513e:	f003 ffd8 	bl	80290f2 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 8025142:	480d      	ldr	r0, [pc, #52]	; (8025178 <Init+0x88>)
 8025144:	f003 ffd5 	bl	80290f2 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 8025148:	480c      	ldr	r0, [pc, #48]	; (802517c <Init+0x8c>)
 802514a:	f003 ffd2 	bl	80290f2 <HAL_TIM_Base_Start_IT>
}
 802514e:	bf00      	nop
 8025150:	3708      	adds	r7, #8
 8025152:	46bd      	mov	sp, r7
 8025154:	bd80      	pop	{r7, pc}
 8025156:	bf00      	nop
 8025158:	2000036c 	.word	0x2000036c
 802515c:	2000034c 	.word	0x2000034c
 8025160:	20000790 	.word	0x20000790
 8025164:	20000360 	.word	0x20000360
 8025168:	20000368 	.word	0x20000368
 802516c:	2000026a 	.word	0x2000026a
 8025170:	20000a6c 	.word	0x20000a6c
 8025174:	2000088c 	.word	0x2000088c
 8025178:	200009ec 	.word	0x200009ec
 802517c:	20000aec 	.word	0x20000aec

08025180 <InterruptTim7>:
#endif // DEBUG_MODE
}


void InterruptTim7()
{
 8025180:	b580      	push	{r7, lr}
 8025182:	af00      	add	r7, sp, #0
    line_sensor.StoreConsecutiveAdcBuffers();
 8025184:	4804      	ldr	r0, [pc, #16]	; (8025198 <InterruptTim7+0x18>)
 8025186:	f7fc fd39 	bl	8021bfc <_ZN10LineSensor26StoreConsecutiveAdcBuffersEv>

#ifdef DEBUG_MODE
    g_tim7++;
 802518a:	4b04      	ldr	r3, [pc, #16]	; (802519c <InterruptTim7+0x1c>)
 802518c:	681b      	ldr	r3, [r3, #0]
 802518e:	3301      	adds	r3, #1
 8025190:	4a02      	ldr	r2, [pc, #8]	; (802519c <InterruptTim7+0x1c>)
 8025192:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8025194:	bf00      	nop
 8025196:	bd80      	pop	{r7, pc}
 8025198:	2000036c 	.word	0x2000036c
 802519c:	20000308 	.word	0x20000308

080251a0 <InterruptTim6>:


void InterruptTim6()
{
 80251a0:	b580      	push	{r7, lr}
 80251a2:	af00      	add	r7, sp, #0
    if(g_tim6_complete == 0) g_tim6_yet = 0x01;
 80251a4:	4bbf      	ldr	r3, [pc, #764]	; (80254a4 <InterruptTim6+0x304>)
 80251a6:	781b      	ldrb	r3, [r3, #0]
 80251a8:	2b00      	cmp	r3, #0
 80251aa:	d102      	bne.n	80251b2 <InterruptTim6+0x12>
 80251ac:	4bbe      	ldr	r3, [pc, #760]	; (80254a8 <InterruptTim6+0x308>)
 80251ae:	2201      	movs	r2, #1
 80251b0:	701a      	strb	r2, [r3, #0]
    g_tim6_complete = 0;
 80251b2:	4bbc      	ldr	r3, [pc, #752]	; (80254a4 <InterruptTim6+0x304>)
 80251b4:	2200      	movs	r2, #0
 80251b6:	701a      	strb	r2, [r3, #0]

    switch(g_mode)
 80251b8:	4bbc      	ldr	r3, [pc, #752]	; (80254ac <InterruptTim6+0x30c>)
 80251ba:	781b      	ldrb	r3, [r3, #0]
 80251bc:	2b20      	cmp	r3, #32
 80251be:	f200 824b 	bhi.w	8025658 <InterruptTim6+0x4b8>
 80251c2:	a201      	add	r2, pc, #4	; (adr r2, 80251c8 <InterruptTim6+0x28>)
 80251c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80251c8:	0802527d 	.word	0x0802527d
 80251cc:	0802528d 	.word	0x0802528d
 80251d0:	0802534f 	.word	0x0802534f
 80251d4:	08025659 	.word	0x08025659
 80251d8:	080254fd 	.word	0x080254fd
 80251dc:	08025419 	.word	0x08025419
 80251e0:	08025659 	.word	0x08025659
 80251e4:	08025659 	.word	0x08025659
 80251e8:	08025659 	.word	0x08025659
 80251ec:	08025659 	.word	0x08025659
 80251f0:	08025659 	.word	0x08025659
 80251f4:	08025659 	.word	0x08025659
 80251f8:	08025603 	.word	0x08025603
 80251fc:	080255b1 	.word	0x080255b1
 8025200:	080255ab 	.word	0x080255ab
 8025204:	0802524d 	.word	0x0802524d
 8025208:	08025325 	.word	0x08025325
 802520c:	08025659 	.word	0x08025659
 8025210:	08025659 	.word	0x08025659
 8025214:	08025659 	.word	0x08025659
 8025218:	08025659 	.word	0x08025659
 802521c:	08025659 	.word	0x08025659
 8025220:	08025659 	.word	0x08025659
 8025224:	08025659 	.word	0x08025659
 8025228:	08025659 	.word	0x08025659
 802522c:	08025659 	.word	0x08025659
 8025230:	08025659 	.word	0x08025659
 8025234:	08025659 	.word	0x08025659
 8025238:	08025659 	.word	0x08025659
 802523c:	08025659 	.word	0x08025659
 8025240:	08025659 	.word	0x08025659
 8025244:	08025659 	.word	0x08025659
 8025248:	08025401 	.word	0x08025401
    {
        case READY:
            line_sensor.UpdateAdcValues();
 802524c:	4898      	ldr	r0, [pc, #608]	; (80254b0 <InterruptTim6+0x310>)
 802524e:	f7fc fddd 	bl	8021e0c <_ZN10LineSensor15UpdateAdcValuesEv>
            g_line_calib = line_sensor.CheckCalibration();
 8025252:	4897      	ldr	r0, [pc, #604]	; (80254b0 <InterruptTim6+0x310>)
 8025254:	f7fc ff08 	bl	8022068 <_ZN10LineSensor16CheckCalibrationEv>
 8025258:	4603      	mov	r3, r0
 802525a:	461a      	mov	r2, r3
 802525c:	4b95      	ldr	r3, [pc, #596]	; (80254b4 <InterruptTim6+0x314>)
 802525e:	701a      	strb	r2, [r3, #0]
            if(g_line_calib == 0) led.ColorOrder('X');
 8025260:	4b94      	ldr	r3, [pc, #592]	; (80254b4 <InterruptTim6+0x314>)
 8025262:	781b      	ldrb	r3, [r3, #0]
 8025264:	2b00      	cmp	r3, #0
 8025266:	d104      	bne.n	8025272 <InterruptTim6+0xd2>
 8025268:	2158      	movs	r1, #88	; 0x58
 802526a:	4893      	ldr	r0, [pc, #588]	; (80254b8 <InterruptTim6+0x318>)
 802526c:	f7fc fafe 	bl	802186c <_ZN3Led10ColorOrderEc>
            else led.ColorOrder('R');
            break;
 8025270:	e1ff      	b.n	8025672 <InterruptTim6+0x4d2>
            else led.ColorOrder('R');
 8025272:	2152      	movs	r1, #82	; 0x52
 8025274:	4890      	ldr	r0, [pc, #576]	; (80254b8 <InterruptTim6+0x318>)
 8025276:	f7fc faf9 	bl	802186c <_ZN3Led10ColorOrderEc>
            break;
 802527a:	e1fa      	b.n	8025672 <InterruptTim6+0x4d2>

        case STANDBY:
            motor.Drive(0, 0);
 802527c:	eddf 0a8f 	vldr	s1, [pc, #572]	; 80254bc <InterruptTim6+0x31c>
 8025280:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80254bc <InterruptTim6+0x31c>
 8025284:	488e      	ldr	r0, [pc, #568]	; (80254c0 <InterruptTim6+0x320>)
 8025286:	f7fe fda7 	bl	8023dd8 <_ZN5Motor5DriveEff>
            break;
 802528a:	e1f2      	b.n	8025672 <InterruptTim6+0x4d2>

        case FIRST_RUN:
            /* Sensor update */
            line_sensor.UpdateAdcValues();
 802528c:	4888      	ldr	r0, [pc, #544]	; (80254b0 <InterruptTim6+0x310>)
 802528e:	f7fc fdbd 	bl	8021e0c <_ZN10LineSensor15UpdateAdcValuesEv>
            encoder.Update();
 8025292:	488c      	ldr	r0, [pc, #560]	; (80254c4 <InterruptTim6+0x324>)
 8025294:	f7fb fd6c 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 8025298:	488b      	ldr	r0, [pc, #556]	; (80254c8 <InterruptTim6+0x328>)
 802529a:	f7fe ffe5 	bl	8024268 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 802529e:	488a      	ldr	r0, [pc, #552]	; (80254c8 <InterruptTim6+0x328>)
 80252a0:	f7ff fa0c 	bl	80246bc <_ZN10SideSensor18GetGoalMarkerCountEv>
 80252a4:	4603      	mov	r3, r0
 80252a6:	461a      	mov	r2, r3
 80252a8:	4b88      	ldr	r3, [pc, #544]	; (80254cc <InterruptTim6+0x32c>)
 80252aa:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_target = TargetVelocity(MIN_VELOCITY, MIN_VELOCITY);
 80252ac:	eddf 0a88 	vldr	s1, [pc, #544]	; 80254d0 <InterruptTim6+0x330>
 80252b0:	ed9f 0a87 	vldr	s0, [pc, #540]	; 80254d0 <InterruptTim6+0x330>
 80252b4:	f000 fca8 	bl	8025c08 <TargetVelocity>
 80252b8:	eef0 7a40 	vmov.f32	s15, s0
 80252bc:	4b85      	ldr	r3, [pc, #532]	; (80254d4 <InterruptTim6+0x334>)
 80252be:	edc3 7a00 	vstr	s15, [r3]
            g_trans = velocity_control.PidControl(g_target, V_P_1, V_I_1, V_D_1);
 80252c2:	4b84      	ldr	r3, [pc, #528]	; (80254d4 <InterruptTim6+0x334>)
 80252c4:	edd3 7a00 	vldr	s15, [r3]
 80252c8:	eddf 1a7c 	vldr	s3, [pc, #496]	; 80254bc <InterruptTim6+0x31c>
 80252cc:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 80254bc <InterruptTim6+0x31c>
 80252d0:	eddf 0a7a 	vldr	s1, [pc, #488]	; 80254bc <InterruptTim6+0x31c>
 80252d4:	eeb0 0a67 	vmov.f32	s0, s15
 80252d8:	487f      	ldr	r0, [pc, #508]	; (80254d8 <InterruptTim6+0x338>)
 80252da:	f7ff fddd 	bl	8024e98 <_ZN15VelocityControl10PidControlEffff>
 80252de:	eef0 7a40 	vmov.f32	s15, s0
 80252e2:	4b7e      	ldr	r3, [pc, #504]	; (80254dc <InterruptTim6+0x33c>)
 80252e4:	edc3 7a00 	vstr	s15, [r3]
            g_rotat = line_trace.PidControl(LINE_P_1, LINE_I_1, LINE_D_1);
 80252e8:	ed9f 1a74 	vldr	s2, [pc, #464]	; 80254bc <InterruptTim6+0x31c>
 80252ec:	eddf 0a73 	vldr	s1, [pc, #460]	; 80254bc <InterruptTim6+0x31c>
 80252f0:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80254bc <InterruptTim6+0x31c>
 80252f4:	487a      	ldr	r0, [pc, #488]	; (80254e0 <InterruptTim6+0x340>)
 80252f6:	f7fc ff6b 	bl	80221d0 <_ZN9LineTrace10PidControlEfff>
 80252fa:	eef0 7a40 	vmov.f32	s15, s0
 80252fe:	4b79      	ldr	r3, [pc, #484]	; (80254e4 <InterruptTim6+0x344>)
 8025300:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(g_trans, g_rotat);
 8025304:	4b75      	ldr	r3, [pc, #468]	; (80254dc <InterruptTim6+0x33c>)
 8025306:	edd3 7a00 	vldr	s15, [r3]
 802530a:	4b76      	ldr	r3, [pc, #472]	; (80254e4 <InterruptTim6+0x344>)
 802530c:	ed93 7a00 	vldr	s14, [r3]
 8025310:	eef0 0a47 	vmov.f32	s1, s14
 8025314:	eeb0 0a67 	vmov.f32	s0, s15
 8025318:	4869      	ldr	r0, [pc, #420]	; (80254c0 <InterruptTim6+0x320>)
 802531a:	f7fe fd5d 	bl	8023dd8 <_ZN5Motor5DriveEff>
            EmergencyStop();
 802531e:	f000 fc3b 	bl	8025b98 <EmergencyStop>
            break;
 8025322:	e1a6      	b.n	8025672 <InterruptTim6+0x4d2>
        
        case FIRST_GOAL:
            motor.Drive(0, 0);
 8025324:	eddf 0a65 	vldr	s1, [pc, #404]	; 80254bc <InterruptTim6+0x31c>
 8025328:	ed9f 0a64 	vldr	s0, [pc, #400]	; 80254bc <InterruptTim6+0x31c>
 802532c:	4864      	ldr	r0, [pc, #400]	; (80254c0 <InterruptTim6+0x320>)
 802532e:	f7fe fd53 	bl	8023dd8 <_ZN5Motor5DriveEff>
            if(g_first_log_failed == 1) led.ColorOrder('R');
 8025332:	4b6d      	ldr	r3, [pc, #436]	; (80254e8 <InterruptTim6+0x348>)
 8025334:	781b      	ldrb	r3, [r3, #0]
 8025336:	2b01      	cmp	r3, #1
 8025338:	d104      	bne.n	8025344 <InterruptTim6+0x1a4>
 802533a:	2152      	movs	r1, #82	; 0x52
 802533c:	485e      	ldr	r0, [pc, #376]	; (80254b8 <InterruptTim6+0x318>)
 802533e:	f7fc fa95 	bl	802186c <_ZN3Led10ColorOrderEc>
            else led.ColorOrder('B');
            break;
 8025342:	e196      	b.n	8025672 <InterruptTim6+0x4d2>
            else led.ColorOrder('B');
 8025344:	2142      	movs	r1, #66	; 0x42
 8025346:	485c      	ldr	r0, [pc, #368]	; (80254b8 <InterruptTim6+0x318>)
 8025348:	f7fc fa90 	bl	802186c <_ZN3Led10ColorOrderEc>
            break;
 802534c:	e191      	b.n	8025672 <InterruptTim6+0x4d2>

        case SECOND_RUN:
            /* Sensor update */
            line_sensor.UpdateAdcValues();
 802534e:	4858      	ldr	r0, [pc, #352]	; (80254b0 <InterruptTim6+0x310>)
 8025350:	f7fc fd5c 	bl	8021e0c <_ZN10LineSensor15UpdateAdcValuesEv>
            encoder.Update();
 8025354:	485b      	ldr	r0, [pc, #364]	; (80254c4 <InterruptTim6+0x324>)
 8025356:	f7fb fd0b 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 802535a:	485b      	ldr	r0, [pc, #364]	; (80254c8 <InterruptTim6+0x328>)
 802535c:	f7fe ff84 	bl	8024268 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 8025360:	4859      	ldr	r0, [pc, #356]	; (80254c8 <InterruptTim6+0x328>)
 8025362:	f7ff f9ab 	bl	80246bc <_ZN10SideSensor18GetGoalMarkerCountEv>
 8025366:	4603      	mov	r3, r0
 8025368:	461a      	mov	r2, r3
 802536a:	4b58      	ldr	r3, [pc, #352]	; (80254cc <InterruptTim6+0x32c>)
 802536c:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_target = TargetVelocity(logger.GetTargetVelocity(), MIN_VELOCITY);
 802536e:	485f      	ldr	r0, [pc, #380]	; (80254ec <InterruptTim6+0x34c>)
 8025370:	f7fd fea0 	bl	80230b4 <_ZN6Logger17GetTargetVelocityEv>
 8025374:	eef0 7a40 	vmov.f32	s15, s0
 8025378:	eddf 0a55 	vldr	s1, [pc, #340]	; 80254d0 <InterruptTim6+0x330>
 802537c:	eeb0 0a67 	vmov.f32	s0, s15
 8025380:	f000 fc42 	bl	8025c08 <TargetVelocity>
 8025384:	eef0 7a40 	vmov.f32	s15, s0
 8025388:	4b52      	ldr	r3, [pc, #328]	; (80254d4 <InterruptTim6+0x334>)
 802538a:	edc3 7a00 	vstr	s15, [r3]
            g_trans = velocity_control.PidControl(g_target, V_P_1, V_I_1, V_D_1);
 802538e:	4b51      	ldr	r3, [pc, #324]	; (80254d4 <InterruptTim6+0x334>)
 8025390:	edd3 7a00 	vldr	s15, [r3]
 8025394:	eddf 1a49 	vldr	s3, [pc, #292]	; 80254bc <InterruptTim6+0x31c>
 8025398:	ed9f 1a48 	vldr	s2, [pc, #288]	; 80254bc <InterruptTim6+0x31c>
 802539c:	eddf 0a47 	vldr	s1, [pc, #284]	; 80254bc <InterruptTim6+0x31c>
 80253a0:	eeb0 0a67 	vmov.f32	s0, s15
 80253a4:	484c      	ldr	r0, [pc, #304]	; (80254d8 <InterruptTim6+0x338>)
 80253a6:	f7ff fd77 	bl	8024e98 <_ZN15VelocityControl10PidControlEffff>
 80253aa:	eef0 7a40 	vmov.f32	s15, s0
 80253ae:	4b4b      	ldr	r3, [pc, #300]	; (80254dc <InterruptTim6+0x33c>)
 80253b0:	edc3 7a00 	vstr	s15, [r3]
            g_rotat = line_trace.PidControl(LINE_P_1, LINE_I_1, LINE_D_1);
 80253b4:	ed9f 1a41 	vldr	s2, [pc, #260]	; 80254bc <InterruptTim6+0x31c>
 80253b8:	eddf 0a40 	vldr	s1, [pc, #256]	; 80254bc <InterruptTim6+0x31c>
 80253bc:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80254bc <InterruptTim6+0x31c>
 80253c0:	4847      	ldr	r0, [pc, #284]	; (80254e0 <InterruptTim6+0x340>)
 80253c2:	f7fc ff05 	bl	80221d0 <_ZN9LineTrace10PidControlEfff>
 80253c6:	eef0 7a40 	vmov.f32	s15, s0
 80253ca:	4b46      	ldr	r3, [pc, #280]	; (80254e4 <InterruptTim6+0x344>)
 80253cc:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(g_trans, g_rotat);
 80253d0:	4b42      	ldr	r3, [pc, #264]	; (80254dc <InterruptTim6+0x33c>)
 80253d2:	edd3 7a00 	vldr	s15, [r3]
 80253d6:	4b43      	ldr	r3, [pc, #268]	; (80254e4 <InterruptTim6+0x344>)
 80253d8:	ed93 7a00 	vldr	s14, [r3]
 80253dc:	eef0 0a47 	vmov.f32	s1, s14
 80253e0:	eeb0 0a67 	vmov.f32	s0, s15
 80253e4:	4836      	ldr	r0, [pc, #216]	; (80254c0 <InterruptTim6+0x320>)
 80253e6:	f7fe fcf7 	bl	8023dd8 <_ZN5Motor5DriveEff>
            EmergencyStop();
 80253ea:	f000 fbd5 	bl	8025b98 <EmergencyStop>
            if(g_run_end == 1) g_mode = SECOND_GOAL;
 80253ee:	4b40      	ldr	r3, [pc, #256]	; (80254f0 <InterruptTim6+0x350>)
 80253f0:	781b      	ldrb	r3, [r3, #0]
 80253f2:	2b01      	cmp	r3, #1
 80253f4:	f040 8138 	bne.w	8025668 <InterruptTim6+0x4c8>
 80253f8:	4b2c      	ldr	r3, [pc, #176]	; (80254ac <InterruptTim6+0x30c>)
 80253fa:	2220      	movs	r2, #32
 80253fc:	701a      	strb	r2, [r3, #0]
            break;
 80253fe:	e133      	b.n	8025668 <InterruptTim6+0x4c8>

        case SECOND_GOAL:
            motor.Drive(0, 0);
 8025400:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80254bc <InterruptTim6+0x31c>
 8025404:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80254bc <InterruptTim6+0x31c>
 8025408:	482d      	ldr	r0, [pc, #180]	; (80254c0 <InterruptTim6+0x320>)
 802540a:	f7fe fce5 	bl	8023dd8 <_ZN5Motor5DriveEff>
            led.ColorOrder('M');
 802540e:	214d      	movs	r1, #77	; 0x4d
 8025410:	4829      	ldr	r0, [pc, #164]	; (80254b8 <InterruptTim6+0x318>)
 8025412:	f7fc fa2b 	bl	802186c <_ZN3Led10ColorOrderEc>
            break;
 8025416:	e12c      	b.n	8025672 <InterruptTim6+0x4d2>

        case LINE_TRACE:
            /* Sensor update */
            line_sensor.UpdateAdcValues();
 8025418:	4825      	ldr	r0, [pc, #148]	; (80254b0 <InterruptTim6+0x310>)
 802541a:	f7fc fcf7 	bl	8021e0c <_ZN10LineSensor15UpdateAdcValuesEv>
            encoder.Update();
 802541e:	4829      	ldr	r0, [pc, #164]	; (80254c4 <InterruptTim6+0x324>)
 8025420:	f7fb fca6 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 8025424:	4828      	ldr	r0, [pc, #160]	; (80254c8 <InterruptTim6+0x328>)
 8025426:	f7fe ff1f 	bl	8024268 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 802542a:	4827      	ldr	r0, [pc, #156]	; (80254c8 <InterruptTim6+0x328>)
 802542c:	f7ff f946 	bl	80246bc <_ZN10SideSensor18GetGoalMarkerCountEv>
 8025430:	4603      	mov	r3, r0
 8025432:	461a      	mov	r2, r3
 8025434:	4b25      	ldr	r3, [pc, #148]	; (80254cc <InterruptTim6+0x32c>)
 8025436:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_common_speed = TargetDuty(COMMON_DUTY, COMMON_DUTY);
 8025438:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80254f4 <InterruptTim6+0x354>
 802543c:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80254f4 <InterruptTim6+0x354>
 8025440:	f000 fc1a 	bl	8025c78 <TargetDuty>
 8025444:	eef0 7a40 	vmov.f32	s15, s0
 8025448:	4b2b      	ldr	r3, [pc, #172]	; (80254f8 <InterruptTim6+0x358>)
 802544a:	edc3 7a00 	vstr	s15, [r3]
            g_rotat = line_trace.PidControl(LINE_P_1, LINE_I_1, LINE_D_1);
 802544e:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80254bc <InterruptTim6+0x31c>
 8025452:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80254bc <InterruptTim6+0x31c>
 8025456:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80254bc <InterruptTim6+0x31c>
 802545a:	4821      	ldr	r0, [pc, #132]	; (80254e0 <InterruptTim6+0x340>)
 802545c:	f7fc feb8 	bl	80221d0 <_ZN9LineTrace10PidControlEfff>
 8025460:	eef0 7a40 	vmov.f32	s15, s0
 8025464:	4b1f      	ldr	r3, [pc, #124]	; (80254e4 <InterruptTim6+0x344>)
 8025466:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(g_common_speed, g_rotat);
 802546a:	4b23      	ldr	r3, [pc, #140]	; (80254f8 <InterruptTim6+0x358>)
 802546c:	edd3 7a00 	vldr	s15, [r3]
 8025470:	4b1c      	ldr	r3, [pc, #112]	; (80254e4 <InterruptTim6+0x344>)
 8025472:	ed93 7a00 	vldr	s14, [r3]
 8025476:	eef0 0a47 	vmov.f32	s1, s14
 802547a:	eeb0 0a67 	vmov.f32	s0, s15
 802547e:	4810      	ldr	r0, [pc, #64]	; (80254c0 <InterruptTim6+0x320>)
 8025480:	f7fe fcaa 	bl	8023dd8 <_ZN5Motor5DriveEff>
            EmergencyStop();
 8025484:	f000 fb88 	bl	8025b98 <EmergencyStop>
            if(g_run_end == 1)
 8025488:	4b19      	ldr	r3, [pc, #100]	; (80254f0 <InterruptTim6+0x350>)
 802548a:	781b      	ldrb	r3, [r3, #0]
 802548c:	2b01      	cmp	r3, #1
 802548e:	f040 80ed 	bne.w	802566c <InterruptTim6+0x4cc>
            {
                led.ColorOrder('Y');
 8025492:	2159      	movs	r1, #89	; 0x59
 8025494:	4808      	ldr	r0, [pc, #32]	; (80254b8 <InterruptTim6+0x318>)
 8025496:	f7fc f9e9 	bl	802186c <_ZN3Led10ColorOrderEc>
                g_mode = STANDBY;
 802549a:	4b04      	ldr	r3, [pc, #16]	; (80254ac <InterruptTim6+0x30c>)
 802549c:	2200      	movs	r2, #0
 802549e:	701a      	strb	r2, [r3, #0]
            }
            break;
 80254a0:	e0e4      	b.n	802566c <InterruptTim6+0x4cc>
 80254a2:	bf00      	nop
 80254a4:	2000031e 	.word	0x2000031e
 80254a8:	20000321 	.word	0x20000321
 80254ac:	2000031b 	.word	0x2000031b
 80254b0:	2000036c 	.word	0x2000036c
 80254b4:	20000324 	.word	0x20000324
 80254b8:	20000368 	.word	0x20000368
 80254bc:	00000000 	.word	0x00000000
 80254c0:	20000790 	.word	0x20000790
 80254c4:	2000034c 	.word	0x2000034c
 80254c8:	20000798 	.word	0x20000798
 80254cc:	20000325 	.word	0x20000325
 80254d0:	3fa66666 	.word	0x3fa66666
 80254d4:	20000334 	.word	0x20000334
 80254d8:	200007a0 	.word	0x200007a0
 80254dc:	20000328 	.word	0x20000328
 80254e0:	200004f8 	.word	0x200004f8
 80254e4:	2000032c 	.word	0x2000032c
 80254e8:	20000330 	.word	0x20000330
 80254ec:	20000688 	.word	0x20000688
 80254f0:	2000031d 	.word	0x2000031d
 80254f4:	3e4ccccd 	.word	0x3e4ccccd
 80254f8:	20000338 	.word	0x20000338

        case VELOCITY_CONTROL:
            /* Sensor update */
            line_sensor.UpdateAdcValues();
 80254fc:	4862      	ldr	r0, [pc, #392]	; (8025688 <InterruptTim6+0x4e8>)
 80254fe:	f7fc fc85 	bl	8021e0c <_ZN10LineSensor15UpdateAdcValuesEv>
            encoder.Update();
 8025502:	4862      	ldr	r0, [pc, #392]	; (802568c <InterruptTim6+0x4ec>)
 8025504:	f7fb fc34 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 8025508:	4861      	ldr	r0, [pc, #388]	; (8025690 <InterruptTim6+0x4f0>)
 802550a:	f7fe fead 	bl	8024268 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 802550e:	4860      	ldr	r0, [pc, #384]	; (8025690 <InterruptTim6+0x4f0>)
 8025510:	f7ff f8d4 	bl	80246bc <_ZN10SideSensor18GetGoalMarkerCountEv>
 8025514:	4603      	mov	r3, r0
 8025516:	461a      	mov	r2, r3
 8025518:	4b5e      	ldr	r3, [pc, #376]	; (8025694 <InterruptTim6+0x4f4>)
 802551a:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_target = TargetVelocity(MIN_VELOCITY, MIN_VELOCITY);
 802551c:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8025698 <InterruptTim6+0x4f8>
 8025520:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8025698 <InterruptTim6+0x4f8>
 8025524:	f000 fb70 	bl	8025c08 <TargetVelocity>
 8025528:	eef0 7a40 	vmov.f32	s15, s0
 802552c:	4b5b      	ldr	r3, [pc, #364]	; (802569c <InterruptTim6+0x4fc>)
 802552e:	edc3 7a00 	vstr	s15, [r3]
            g_trans = velocity_control.PidControl(g_target, V_P_1, V_I_1, V_D_1);
 8025532:	4b5a      	ldr	r3, [pc, #360]	; (802569c <InterruptTim6+0x4fc>)
 8025534:	edd3 7a00 	vldr	s15, [r3]
 8025538:	eddf 1a59 	vldr	s3, [pc, #356]	; 80256a0 <InterruptTim6+0x500>
 802553c:	ed9f 1a58 	vldr	s2, [pc, #352]	; 80256a0 <InterruptTim6+0x500>
 8025540:	eddf 0a57 	vldr	s1, [pc, #348]	; 80256a0 <InterruptTim6+0x500>
 8025544:	eeb0 0a67 	vmov.f32	s0, s15
 8025548:	4856      	ldr	r0, [pc, #344]	; (80256a4 <InterruptTim6+0x504>)
 802554a:	f7ff fca5 	bl	8024e98 <_ZN15VelocityControl10PidControlEffff>
 802554e:	eef0 7a40 	vmov.f32	s15, s0
 8025552:	4b55      	ldr	r3, [pc, #340]	; (80256a8 <InterruptTim6+0x508>)
 8025554:	edc3 7a00 	vstr	s15, [r3]
            g_rotat = line_trace.PidControl(LINE_P_1, LINE_I_1, LINE_D_1);
 8025558:	ed9f 1a51 	vldr	s2, [pc, #324]	; 80256a0 <InterruptTim6+0x500>
 802555c:	eddf 0a50 	vldr	s1, [pc, #320]	; 80256a0 <InterruptTim6+0x500>
 8025560:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80256a0 <InterruptTim6+0x500>
 8025564:	4851      	ldr	r0, [pc, #324]	; (80256ac <InterruptTim6+0x50c>)
 8025566:	f7fc fe33 	bl	80221d0 <_ZN9LineTrace10PidControlEfff>
 802556a:	eef0 7a40 	vmov.f32	s15, s0
 802556e:	4b50      	ldr	r3, [pc, #320]	; (80256b0 <InterruptTim6+0x510>)
 8025570:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(g_trans, g_rotat);
 8025574:	4b4c      	ldr	r3, [pc, #304]	; (80256a8 <InterruptTim6+0x508>)
 8025576:	edd3 7a00 	vldr	s15, [r3]
 802557a:	4b4d      	ldr	r3, [pc, #308]	; (80256b0 <InterruptTim6+0x510>)
 802557c:	ed93 7a00 	vldr	s14, [r3]
 8025580:	eef0 0a47 	vmov.f32	s1, s14
 8025584:	eeb0 0a67 	vmov.f32	s0, s15
 8025588:	484a      	ldr	r0, [pc, #296]	; (80256b4 <InterruptTim6+0x514>)
 802558a:	f7fe fc25 	bl	8023dd8 <_ZN5Motor5DriveEff>
            EmergencyStop();
 802558e:	f000 fb03 	bl	8025b98 <EmergencyStop>
            if(g_run_end == 1)
 8025592:	4b49      	ldr	r3, [pc, #292]	; (80256b8 <InterruptTim6+0x518>)
 8025594:	781b      	ldrb	r3, [r3, #0]
 8025596:	2b01      	cmp	r3, #1
 8025598:	d16a      	bne.n	8025670 <InterruptTim6+0x4d0>
            {
                led.ColorOrder('C');
 802559a:	2143      	movs	r1, #67	; 0x43
 802559c:	4847      	ldr	r0, [pc, #284]	; (80256bc <InterruptTim6+0x51c>)
 802559e:	f7fc f965 	bl	802186c <_ZN3Led10ColorOrderEc>
                g_mode = STANDBY;
 80255a2:	4b47      	ldr	r3, [pc, #284]	; (80256c0 <InterruptTim6+0x520>)
 80255a4:	2200      	movs	r2, #0
 80255a6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80255a8:	e062      	b.n	8025670 <InterruptTim6+0x4d0>

#ifdef DEBUG_MODE
        case INITIAL_DEBUG:
            InitialTest();
 80255aa:	f000 fea1 	bl	80262f0 <InitialTest>
            break;
 80255ae:	e060      	b.n	8025672 <InterruptTim6+0x4d2>
        
        case LINE_TRACE_DEBUG:
            /* Sensor update */
            line_sensor.UpdateAdcValues();
 80255b0:	4835      	ldr	r0, [pc, #212]	; (8025688 <InterruptTim6+0x4e8>)
 80255b2:	f7fc fc2b 	bl	8021e0c <_ZN10LineSensor15UpdateAdcValuesEv>
            encoder.Update();
 80255b6:	4835      	ldr	r0, [pc, #212]	; (802568c <InterruptTim6+0x4ec>)
 80255b8:	f7fb fbda 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 80255bc:	4834      	ldr	r0, [pc, #208]	; (8025690 <InterruptTim6+0x4f0>)
 80255be:	f7fe fe53 	bl	8024268 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 80255c2:	4833      	ldr	r0, [pc, #204]	; (8025690 <InterruptTim6+0x4f0>)
 80255c4:	f7ff f87a 	bl	80246bc <_ZN10SideSensor18GetGoalMarkerCountEv>
 80255c8:	4603      	mov	r3, r0
 80255ca:	461a      	mov	r2, r3
 80255cc:	4b31      	ldr	r3, [pc, #196]	; (8025694 <InterruptTim6+0x4f4>)
 80255ce:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_rotat = line_trace.PidControl(LINE_P_1, LINE_I_1, LINE_D_1);
 80255d0:	ed9f 1a33 	vldr	s2, [pc, #204]	; 80256a0 <InterruptTim6+0x500>
 80255d4:	eddf 0a32 	vldr	s1, [pc, #200]	; 80256a0 <InterruptTim6+0x500>
 80255d8:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80256a0 <InterruptTim6+0x500>
 80255dc:	4833      	ldr	r0, [pc, #204]	; (80256ac <InterruptTim6+0x50c>)
 80255de:	f7fc fdf7 	bl	80221d0 <_ZN9LineTrace10PidControlEfff>
 80255e2:	eef0 7a40 	vmov.f32	s15, s0
 80255e6:	4b32      	ldr	r3, [pc, #200]	; (80256b0 <InterruptTim6+0x510>)
 80255e8:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(0, g_rotat);
 80255ec:	4b30      	ldr	r3, [pc, #192]	; (80256b0 <InterruptTim6+0x510>)
 80255ee:	edd3 7a00 	vldr	s15, [r3]
 80255f2:	eef0 0a67 	vmov.f32	s1, s15
 80255f6:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80256a0 <InterruptTim6+0x500>
 80255fa:	482e      	ldr	r0, [pc, #184]	; (80256b4 <InterruptTim6+0x514>)
 80255fc:	f7fe fbec 	bl	8023dd8 <_ZN5Motor5DriveEff>
            break;
 8025600:	e037      	b.n	8025672 <InterruptTim6+0x4d2>
        
        case VELOCITY_CONTROL_DEBUG:
            /* Sensor update */
            line_sensor.UpdateAdcValues();
 8025602:	4821      	ldr	r0, [pc, #132]	; (8025688 <InterruptTim6+0x4e8>)
 8025604:	f7fc fc02 	bl	8021e0c <_ZN10LineSensor15UpdateAdcValuesEv>
            encoder.Update();
 8025608:	4820      	ldr	r0, [pc, #128]	; (802568c <InterruptTim6+0x4ec>)
 802560a:	f7fb fbb1 	bl	8020d70 <_ZN7Encoder6UpdateEv>
            side_sensor.IgnoreJudgment();
 802560e:	4820      	ldr	r0, [pc, #128]	; (8025690 <InterruptTim6+0x4f0>)
 8025610:	f7fe fe2a 	bl	8024268 <_ZN10SideSensor14IgnoreJudgmentEv>
            g_goal_cnt = side_sensor.GetGoalMarkerCount();
 8025614:	481e      	ldr	r0, [pc, #120]	; (8025690 <InterruptTim6+0x4f0>)
 8025616:	f7ff f851 	bl	80246bc <_ZN10SideSensor18GetGoalMarkerCountEv>
 802561a:	4603      	mov	r3, r0
 802561c:	461a      	mov	r2, r3
 802561e:	4b1d      	ldr	r3, [pc, #116]	; (8025694 <InterruptTim6+0x4f4>)
 8025620:	701a      	strb	r2, [r3, #0]
            /* Motor control */
            g_trans = velocity_control.PidControl(MIN_VELOCITY, V_P_1, V_I_1, V_D_1);
 8025622:	eddf 1a1f 	vldr	s3, [pc, #124]	; 80256a0 <InterruptTim6+0x500>
 8025626:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80256a0 <InterruptTim6+0x500>
 802562a:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80256a0 <InterruptTim6+0x500>
 802562e:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8025698 <InterruptTim6+0x4f8>
 8025632:	481c      	ldr	r0, [pc, #112]	; (80256a4 <InterruptTim6+0x504>)
 8025634:	f7ff fc30 	bl	8024e98 <_ZN15VelocityControl10PidControlEffff>
 8025638:	eef0 7a40 	vmov.f32	s15, s0
 802563c:	4b1a      	ldr	r3, [pc, #104]	; (80256a8 <InterruptTim6+0x508>)
 802563e:	edc3 7a00 	vstr	s15, [r3]
            motor.Drive(g_trans, 0);
 8025642:	4b19      	ldr	r3, [pc, #100]	; (80256a8 <InterruptTim6+0x508>)
 8025644:	edd3 7a00 	vldr	s15, [r3]
 8025648:	eddf 0a15 	vldr	s1, [pc, #84]	; 80256a0 <InterruptTim6+0x500>
 802564c:	eeb0 0a67 	vmov.f32	s0, s15
 8025650:	4818      	ldr	r0, [pc, #96]	; (80256b4 <InterruptTim6+0x514>)
 8025652:	f7fe fbc1 	bl	8023dd8 <_ZN5Motor5DriveEff>
            break;
 8025656:	e00c      	b.n	8025672 <InterruptTim6+0x4d2>
#endif // DEBUG_MODE

        default:
            motor.Drive(0, 0); break;
 8025658:	eddf 0a11 	vldr	s1, [pc, #68]	; 80256a0 <InterruptTim6+0x500>
 802565c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80256a0 <InterruptTim6+0x500>
 8025660:	4814      	ldr	r0, [pc, #80]	; (80256b4 <InterruptTim6+0x514>)
 8025662:	f7fe fbb9 	bl	8023dd8 <_ZN5Motor5DriveEff>
 8025666:	e004      	b.n	8025672 <InterruptTim6+0x4d2>
            break;
 8025668:	bf00      	nop
 802566a:	e002      	b.n	8025672 <InterruptTim6+0x4d2>
            break;
 802566c:	bf00      	nop
 802566e:	e000      	b.n	8025672 <InterruptTim6+0x4d2>
            break;
 8025670:	bf00      	nop
    }
    g_tim6_complete = 1;
 8025672:	4b14      	ldr	r3, [pc, #80]	; (80256c4 <InterruptTim6+0x524>)
 8025674:	2201      	movs	r2, #1
 8025676:	701a      	strb	r2, [r3, #0]

#ifdef DEBUG_MODE
    g_tim6++;
 8025678:	4b13      	ldr	r3, [pc, #76]	; (80256c8 <InterruptTim6+0x528>)
 802567a:	681b      	ldr	r3, [r3, #0]
 802567c:	3301      	adds	r3, #1
 802567e:	4a12      	ldr	r2, [pc, #72]	; (80256c8 <InterruptTim6+0x528>)
 8025680:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8025682:	bf00      	nop
 8025684:	bd80      	pop	{r7, pc}
 8025686:	bf00      	nop
 8025688:	2000036c 	.word	0x2000036c
 802568c:	2000034c 	.word	0x2000034c
 8025690:	20000798 	.word	0x20000798
 8025694:	20000325 	.word	0x20000325
 8025698:	3fa66666 	.word	0x3fa66666
 802569c:	20000334 	.word	0x20000334
 80256a0:	00000000 	.word	0x00000000
 80256a4:	200007a0 	.word	0x200007a0
 80256a8:	20000328 	.word	0x20000328
 80256ac:	200004f8 	.word	0x200004f8
 80256b0:	2000032c 	.word	0x2000032c
 80256b4:	20000790 	.word	0x20000790
 80256b8:	2000031d 	.word	0x2000031d
 80256bc:	20000368 	.word	0x20000368
 80256c0:	2000031b 	.word	0x2000031b
 80256c4:	2000031e 	.word	0x2000031e
 80256c8:	2000030c 	.word	0x2000030c

080256cc <InterruptTim5>:


void InterruptTim5()
{
 80256cc:	b580      	push	{r7, lr}
 80256ce:	af00      	add	r7, sp, #0
    if(g_tim5_complete == 0) g_tim5_yet = 0x02;
 80256d0:	4b2b      	ldr	r3, [pc, #172]	; (8025780 <InterruptTim5+0xb4>)
 80256d2:	781b      	ldrb	r3, [r3, #0]
 80256d4:	2b00      	cmp	r3, #0
 80256d6:	d102      	bne.n	80256de <InterruptTim5+0x12>
 80256d8:	4b2a      	ldr	r3, [pc, #168]	; (8025784 <InterruptTim5+0xb8>)
 80256da:	2202      	movs	r2, #2
 80256dc:	701a      	strb	r2, [r3, #0]
    g_tim5_complete = 0;
 80256de:	4b28      	ldr	r3, [pc, #160]	; (8025780 <InterruptTim5+0xb4>)
 80256e0:	2200      	movs	r2, #0
 80256e2:	701a      	strb	r2, [r3, #0]

    switch(g_mode)
 80256e4:	4b28      	ldr	r3, [pc, #160]	; (8025788 <InterruptTim5+0xbc>)
 80256e6:	781b      	ldrb	r3, [r3, #0]
 80256e8:	2b01      	cmp	r3, #1
 80256ea:	d002      	beq.n	80256f2 <InterruptTim5+0x26>
 80256ec:	2b02      	cmp	r3, #2
 80256ee:	d032      	beq.n	8025756 <InterruptTim5+0x8a>
        case SECOND_RUN:
            iim_42652.Update();
            if(g_goal_cnt == 1) logger.Loading();
            break;

        default: break;
 80256f0:	e03c      	b.n	802576c <InterruptTim5+0xa0>
            iim_42652.Update();
 80256f2:	4826      	ldr	r0, [pc, #152]	; (802578c <InterruptTim5+0xc0>)
 80256f4:	f7fb ff8c 	bl	8021610 <_ZN8Iim426526UpdateEv>
            g_process_complete = 0;
 80256f8:	4b25      	ldr	r3, [pc, #148]	; (8025790 <InterruptTim5+0xc4>)
 80256fa:	2200      	movs	r2, #0
 80256fc:	701a      	strb	r2, [r3, #0]
            g_process_complete |= g_tim6_yet;
 80256fe:	4b24      	ldr	r3, [pc, #144]	; (8025790 <InterruptTim5+0xc4>)
 8025700:	781a      	ldrb	r2, [r3, #0]
 8025702:	4b24      	ldr	r3, [pc, #144]	; (8025794 <InterruptTim5+0xc8>)
 8025704:	781b      	ldrb	r3, [r3, #0]
 8025706:	4313      	orrs	r3, r2
 8025708:	b2da      	uxtb	r2, r3
 802570a:	4b21      	ldr	r3, [pc, #132]	; (8025790 <InterruptTim5+0xc4>)
 802570c:	701a      	strb	r2, [r3, #0]
            g_process_complete |= g_tim5_yet;
 802570e:	4b20      	ldr	r3, [pc, #128]	; (8025790 <InterruptTim5+0xc4>)
 8025710:	781a      	ldrb	r2, [r3, #0]
 8025712:	4b1c      	ldr	r3, [pc, #112]	; (8025784 <InterruptTim5+0xb8>)
 8025714:	781b      	ldrb	r3, [r3, #0]
 8025716:	4313      	orrs	r3, r2
 8025718:	b2da      	uxtb	r2, r3
 802571a:	4b1d      	ldr	r3, [pc, #116]	; (8025790 <InterruptTim5+0xc4>)
 802571c:	701a      	strb	r2, [r3, #0]
            g_process_complete |= g_tim2_yet;
 802571e:	4b1c      	ldr	r3, [pc, #112]	; (8025790 <InterruptTim5+0xc4>)
 8025720:	781a      	ldrb	r2, [r3, #0]
 8025722:	4b1d      	ldr	r3, [pc, #116]	; (8025798 <InterruptTim5+0xcc>)
 8025724:	781b      	ldrb	r3, [r3, #0]
 8025726:	4313      	orrs	r3, r2
 8025728:	b2da      	uxtb	r2, r3
 802572a:	4b19      	ldr	r3, [pc, #100]	; (8025790 <InterruptTim5+0xc4>)
 802572c:	701a      	strb	r2, [r3, #0]
            if(g_goal_cnt == 1) logger.Logging(g_process_complete);
 802572e:	4b1b      	ldr	r3, [pc, #108]	; (802579c <InterruptTim5+0xd0>)
 8025730:	781b      	ldrb	r3, [r3, #0]
 8025732:	2b01      	cmp	r3, #1
 8025734:	d105      	bne.n	8025742 <InterruptTim5+0x76>
 8025736:	4b16      	ldr	r3, [pc, #88]	; (8025790 <InterruptTim5+0xc4>)
 8025738:	781b      	ldrb	r3, [r3, #0]
 802573a:	4619      	mov	r1, r3
 802573c:	4818      	ldr	r0, [pc, #96]	; (80257a0 <InterruptTim5+0xd4>)
 802573e:	f7fc feaf 	bl	80224a0 <_ZN6Logger7LoggingEh>
            g_tim6_yet = 0;
 8025742:	4b14      	ldr	r3, [pc, #80]	; (8025794 <InterruptTim5+0xc8>)
 8025744:	2200      	movs	r2, #0
 8025746:	701a      	strb	r2, [r3, #0]
            g_tim5_yet = 0;
 8025748:	4b0e      	ldr	r3, [pc, #56]	; (8025784 <InterruptTim5+0xb8>)
 802574a:	2200      	movs	r2, #0
 802574c:	701a      	strb	r2, [r3, #0]
            g_tim2_yet = 0;
 802574e:	4b12      	ldr	r3, [pc, #72]	; (8025798 <InterruptTim5+0xcc>)
 8025750:	2200      	movs	r2, #0
 8025752:	701a      	strb	r2, [r3, #0]
            break;
 8025754:	e00a      	b.n	802576c <InterruptTim5+0xa0>
            iim_42652.Update();
 8025756:	480d      	ldr	r0, [pc, #52]	; (802578c <InterruptTim5+0xc0>)
 8025758:	f7fb ff5a 	bl	8021610 <_ZN8Iim426526UpdateEv>
            if(g_goal_cnt == 1) logger.Loading();
 802575c:	4b0f      	ldr	r3, [pc, #60]	; (802579c <InterruptTim5+0xd0>)
 802575e:	781b      	ldrb	r3, [r3, #0]
 8025760:	2b01      	cmp	r3, #1
 8025762:	d102      	bne.n	802576a <InterruptTim5+0x9e>
 8025764:	480e      	ldr	r0, [pc, #56]	; (80257a0 <InterruptTim5+0xd4>)
 8025766:	f7fd f9db 	bl	8022b20 <_ZN6Logger7LoadingEv>
            break;
 802576a:	bf00      	nop
    }
    g_tim5_complete = 1;
 802576c:	4b04      	ldr	r3, [pc, #16]	; (8025780 <InterruptTim5+0xb4>)
 802576e:	2201      	movs	r2, #1
 8025770:	701a      	strb	r2, [r3, #0]

#ifdef DEBUG_MODE
    g_tim5++;
 8025772:	4b0c      	ldr	r3, [pc, #48]	; (80257a4 <InterruptTim5+0xd8>)
 8025774:	681b      	ldr	r3, [r3, #0]
 8025776:	3301      	adds	r3, #1
 8025778:	4a0a      	ldr	r2, [pc, #40]	; (80257a4 <InterruptTim5+0xd8>)
 802577a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 802577c:	bf00      	nop
 802577e:	bd80      	pop	{r7, pc}
 8025780:	2000031f 	.word	0x2000031f
 8025784:	20000322 	.word	0x20000322
 8025788:	2000031b 	.word	0x2000031b
 802578c:	20000360 	.word	0x20000360
 8025790:	2000033c 	.word	0x2000033c
 8025794:	20000321 	.word	0x20000321
 8025798:	20000323 	.word	0x20000323
 802579c:	20000325 	.word	0x20000325
 80257a0:	20000688 	.word	0x20000688
 80257a4:	20000310 	.word	0x20000310

080257a8 <InterruptTim2>:


void InterruptTim2()
{
 80257a8:	b580      	push	{r7, lr}
 80257aa:	af00      	add	r7, sp, #0
    if(g_tim2_complete == 0) g_tim2_yet = 0x02;
 80257ac:	4b22      	ldr	r3, [pc, #136]	; (8025838 <InterruptTim2+0x90>)
 80257ae:	781b      	ldrb	r3, [r3, #0]
 80257b0:	2b00      	cmp	r3, #0
 80257b2:	d102      	bne.n	80257ba <InterruptTim2+0x12>
 80257b4:	4b21      	ldr	r3, [pc, #132]	; (802583c <InterruptTim2+0x94>)
 80257b6:	2202      	movs	r2, #2
 80257b8:	701a      	strb	r2, [r3, #0]
    g_tim2_complete = 0;
 80257ba:	4b1f      	ldr	r3, [pc, #124]	; (8025838 <InterruptTim2+0x90>)
 80257bc:	2200      	movs	r2, #0
 80257be:	701a      	strb	r2, [r3, #0]

    if(g_emergency_stop == 1) g_mode =STANDBY;
 80257c0:	4b1f      	ldr	r3, [pc, #124]	; (8025840 <InterruptTim2+0x98>)
 80257c2:	781b      	ldrb	r3, [r3, #0]
 80257c4:	2b01      	cmp	r3, #1
 80257c6:	d102      	bne.n	80257ce <InterruptTim2+0x26>
 80257c8:	4b1e      	ldr	r3, [pc, #120]	; (8025844 <InterruptTim2+0x9c>)
 80257ca:	2200      	movs	r2, #0
 80257cc:	701a      	strb	r2, [r3, #0]

    switch(g_mode)
 80257ce:	4b1d      	ldr	r3, [pc, #116]	; (8025844 <InterruptTim2+0x9c>)
 80257d0:	781b      	ldrb	r3, [r3, #0]
 80257d2:	2b01      	cmp	r3, #1
 80257d4:	d000      	beq.n	80257d8 <InterruptTim2+0x30>
                if(g_store_periodic_log + g_store_accel_log != 0) g_first_log_failed = 1;
            }
            else if(g_run_end == 1) g_mode = FIRST_GOAL;
            break;

        default: break;
 80257d6:	e025      	b.n	8025824 <InterruptTim2+0x7c>
            if(g_goal_cnt == 1)
 80257d8:	4b1b      	ldr	r3, [pc, #108]	; (8025848 <InterruptTim2+0xa0>)
 80257da:	781b      	ldrb	r3, [r3, #0]
 80257dc:	2b01      	cmp	r3, #1
 80257de:	d119      	bne.n	8025814 <InterruptTim2+0x6c>
                g_store_periodic_log = logger.StorePeriodicLog();
 80257e0:	481a      	ldr	r0, [pc, #104]	; (802584c <InterruptTim2+0xa4>)
 80257e2:	f7fd f873 	bl	80228cc <_ZN6Logger16StorePeriodicLogEv>
 80257e6:	4603      	mov	r3, r0
 80257e8:	461a      	mov	r2, r3
 80257ea:	4b19      	ldr	r3, [pc, #100]	; (8025850 <InterruptTim2+0xa8>)
 80257ec:	701a      	strb	r2, [r3, #0]
                g_store_accel_log = logger.StoreAccelPositionLog();
 80257ee:	4817      	ldr	r0, [pc, #92]	; (802584c <InterruptTim2+0xa4>)
 80257f0:	f7fd f90a 	bl	8022a08 <_ZN6Logger21StoreAccelPositionLogEv>
 80257f4:	4603      	mov	r3, r0
 80257f6:	461a      	mov	r2, r3
 80257f8:	4b16      	ldr	r3, [pc, #88]	; (8025854 <InterruptTim2+0xac>)
 80257fa:	701a      	strb	r2, [r3, #0]
                if(g_store_periodic_log + g_store_accel_log != 0) g_first_log_failed = 1;
 80257fc:	4b14      	ldr	r3, [pc, #80]	; (8025850 <InterruptTim2+0xa8>)
 80257fe:	781b      	ldrb	r3, [r3, #0]
 8025800:	461a      	mov	r2, r3
 8025802:	4b14      	ldr	r3, [pc, #80]	; (8025854 <InterruptTim2+0xac>)
 8025804:	781b      	ldrb	r3, [r3, #0]
 8025806:	4413      	add	r3, r2
 8025808:	2b00      	cmp	r3, #0
 802580a:	d00a      	beq.n	8025822 <InterruptTim2+0x7a>
 802580c:	4b12      	ldr	r3, [pc, #72]	; (8025858 <InterruptTim2+0xb0>)
 802580e:	2201      	movs	r2, #1
 8025810:	701a      	strb	r2, [r3, #0]
            break;
 8025812:	e006      	b.n	8025822 <InterruptTim2+0x7a>
            else if(g_run_end == 1) g_mode = FIRST_GOAL;
 8025814:	4b11      	ldr	r3, [pc, #68]	; (802585c <InterruptTim2+0xb4>)
 8025816:	781b      	ldrb	r3, [r3, #0]
 8025818:	2b01      	cmp	r3, #1
 802581a:	d102      	bne.n	8025822 <InterruptTim2+0x7a>
 802581c:	4b09      	ldr	r3, [pc, #36]	; (8025844 <InterruptTim2+0x9c>)
 802581e:	2210      	movs	r2, #16
 8025820:	701a      	strb	r2, [r3, #0]
            break;
 8025822:	bf00      	nop
    }
    g_tim2_complete = 1;
 8025824:	4b04      	ldr	r3, [pc, #16]	; (8025838 <InterruptTim2+0x90>)
 8025826:	2201      	movs	r2, #1
 8025828:	701a      	strb	r2, [r3, #0]

#ifdef DEBUG_MODE
    g_tim2++;
 802582a:	4b0d      	ldr	r3, [pc, #52]	; (8025860 <InterruptTim2+0xb8>)
 802582c:	681b      	ldr	r3, [r3, #0]
 802582e:	3301      	adds	r3, #1
 8025830:	4a0b      	ldr	r2, [pc, #44]	; (8025860 <InterruptTim2+0xb8>)
 8025832:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8025834:	bf00      	nop
 8025836:	bd80      	pop	{r7, pc}
 8025838:	20000320 	.word	0x20000320
 802583c:	20000323 	.word	0x20000323
 8025840:	2000031c 	.word	0x2000031c
 8025844:	2000031b 	.word	0x2000031b
 8025848:	20000325 	.word	0x20000325
 802584c:	20000688 	.word	0x20000688
 8025850:	20000331 	.word	0x20000331
 8025854:	20000332 	.word	0x20000332
 8025858:	20000330 	.word	0x20000330
 802585c:	2000031d 	.word	0x2000031d
 8025860:	20000314 	.word	0x20000314

08025864 <Loop>:


void Loop()
{
 8025864:	b580      	push	{r7, lr}
 8025866:	af00      	add	r7, sp, #0
    g_main_while_reset = 0;
 8025868:	4bbf      	ldr	r3, [pc, #764]	; (8025b68 <Loop+0x304>)
 802586a:	2200      	movs	r2, #0
 802586c:	701a      	strb	r2, [r3, #0]
    g_switch_state = rotary_switch.State();
 802586e:	48bf      	ldr	r0, [pc, #764]	; (8025b6c <Loop+0x308>)
 8025870:	f7fe fbec 	bl	802404c <_ZN12RotarySwitch5StateEv>
 8025874:	4603      	mov	r3, r0
 8025876:	461a      	mov	r2, r3
 8025878:	4bbd      	ldr	r3, [pc, #756]	; (8025b70 <Loop+0x30c>)
 802587a:	701a      	strb	r2, [r3, #0]

    switch(g_switch_state)
 802587c:	4bbc      	ldr	r3, [pc, #752]	; (8025b70 <Loop+0x30c>)
 802587e:	781b      	ldrb	r3, [r3, #0]
 8025880:	2b0f      	cmp	r3, #15
 8025882:	f200 8137 	bhi.w	8025af4 <Loop+0x290>
 8025886:	a201      	add	r2, pc, #4	; (adr r2, 802588c <Loop+0x28>)
 8025888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802588c:	08025a07 	.word	0x08025a07
 8025890:	08025a33 	.word	0x08025a33
 8025894:	08025a61 	.word	0x08025a61
 8025898:	08025af5 	.word	0x08025af5
 802589c:	08025a8d 	.word	0x08025a8d
 80258a0:	08025ac1 	.word	0x08025ac1
 80258a4:	08025af5 	.word	0x08025af5
 80258a8:	08025af5 	.word	0x08025af5
 80258ac:	08025af5 	.word	0x08025af5
 80258b0:	08025af5 	.word	0x08025af5
 80258b4:	08025af5 	.word	0x08025af5
 80258b8:	080258cd 	.word	0x080258cd
 80258bc:	08025937 	.word	0x08025937
 80258c0:	0802596f 	.word	0x0802596f
 80258c4:	080259a7 	.word	0x080259a7
 80258c8:	080259d7 	.word	0x080259d7
    {
#ifdef DEBUG_MODE
        case 0x0B: // Flash debug
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 80258cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80258d0:	f000 fee0 	bl	8026694 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 80258d4:	4ba4      	ldr	r3, [pc, #656]	; (8025b68 <Loop+0x304>)
 80258d6:	781b      	ldrb	r3, [r3, #0]
 80258d8:	2b01      	cmp	r3, #1
 80258da:	f000 8121 	beq.w	8025b20 <Loop+0x2bc>
            led.Blink(3, 'R', 'X');
 80258de:	2358      	movs	r3, #88	; 0x58
 80258e0:	2252      	movs	r2, #82	; 0x52
 80258e2:	2103      	movs	r1, #3
 80258e4:	48a3      	ldr	r0, [pc, #652]	; (8025b74 <Loop+0x310>)
 80258e6:	f7fc f89d 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            g_mode = STANDBY;
 80258ea:	4ba3      	ldr	r3, [pc, #652]	; (8025b78 <Loop+0x314>)
 80258ec:	2200      	movs	r2, #0
 80258ee:	701a      	strb	r2, [r3, #0]
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 80258f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80258f4:	f000 fece 	bl	8026694 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 80258f8:	4b9b      	ldr	r3, [pc, #620]	; (8025b68 <Loop+0x304>)
 80258fa:	781b      	ldrb	r3, [r3, #0]
 80258fc:	2b01      	cmp	r3, #1
 80258fe:	f000 8111 	beq.w	8025b24 <Loop+0x2c0>

            led.Blink(3, 'R', 'X');
 8025902:	2358      	movs	r3, #88	; 0x58
 8025904:	2252      	movs	r2, #82	; 0x52
 8025906:	2103      	movs	r1, #3
 8025908:	489a      	ldr	r0, [pc, #616]	; (8025b74 <Loop+0x310>)
 802590a:	f7fc f88b 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            g_flash_test = FlashTest();
 802590e:	f000 f9f9 	bl	8025d04 <FlashTest>
 8025912:	4603      	mov	r3, r0
 8025914:	461a      	mov	r2, r3
 8025916:	4b99      	ldr	r3, [pc, #612]	; (8025b7c <Loop+0x318>)
 8025918:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0)
 802591a:	4b93      	ldr	r3, [pc, #588]	; (8025b68 <Loop+0x304>)
 802591c:	781b      	ldrb	r3, [r3, #0]
 802591e:	2b00      	cmp	r3, #0
 8025920:	f040 8102 	bne.w	8025b28 <Loop+0x2c4>
            {
                if(g_flash_test == 0x0E) led.Rainbow(1);
 8025924:	4b95      	ldr	r3, [pc, #596]	; (8025b7c <Loop+0x318>)
 8025926:	781b      	ldrb	r3, [r3, #0]
 8025928:	2b0e      	cmp	r3, #14
 802592a:	d1f6      	bne.n	802591a <Loop+0xb6>
 802592c:	2101      	movs	r1, #1
 802592e:	4891      	ldr	r0, [pc, #580]	; (8025b74 <Loop+0x310>)
 8025930:	f7fc f8a5 	bl	8021a7e <_ZN3Led7RainbowEh>
            while(g_main_while_reset == 0)
 8025934:	e7f1      	b.n	802591a <Loop+0xb6>
            }
            break;

        case 0x0C: // Velocity control debug
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025936:	f640 30b8 	movw	r0, #3000	; 0xbb8
 802593a:	f000 feab 	bl	8026694 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 802593e:	4b8a      	ldr	r3, [pc, #552]	; (8025b68 <Loop+0x304>)
 8025940:	781b      	ldrb	r3, [r3, #0]
 8025942:	2b01      	cmp	r3, #1
 8025944:	f000 80f2 	beq.w	8025b2c <Loop+0x2c8>

            led.Blink(3, 'G', 'B');
 8025948:	2342      	movs	r3, #66	; 0x42
 802594a:	2247      	movs	r2, #71	; 0x47
 802594c:	2103      	movs	r1, #3
 802594e:	4889      	ldr	r0, [pc, #548]	; (8025b74 <Loop+0x310>)
 8025950:	f7fc f868 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            led.ColorOrder('X');
 8025954:	2158      	movs	r1, #88	; 0x58
 8025956:	4887      	ldr	r0, [pc, #540]	; (8025b74 <Loop+0x310>)
 8025958:	f7fb ff88 	bl	802186c <_ZN3Led10ColorOrderEc>
            g_mode = VELOCITY_CONTROL_DEBUG;
 802595c:	4b86      	ldr	r3, [pc, #536]	; (8025b78 <Loop+0x314>)
 802595e:	220c      	movs	r2, #12
 8025960:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 8025962:	4b81      	ldr	r3, [pc, #516]	; (8025b68 <Loop+0x304>)
 8025964:	781b      	ldrb	r3, [r3, #0]
 8025966:	2b00      	cmp	r3, #0
 8025968:	f040 80e2 	bne.w	8025b30 <Loop+0x2cc>
 802596c:	e7f9      	b.n	8025962 <Loop+0xfe>
            break;

        case 0x0D: // Line trace debug
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 802596e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025972:	f000 fe8f 	bl	8026694 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025976:	4b7c      	ldr	r3, [pc, #496]	; (8025b68 <Loop+0x304>)
 8025978:	781b      	ldrb	r3, [r3, #0]
 802597a:	2b01      	cmp	r3, #1
 802597c:	f000 80da 	beq.w	8025b34 <Loop+0x2d0>

            led.Blink(3, 'G', 'Y');
 8025980:	2359      	movs	r3, #89	; 0x59
 8025982:	2247      	movs	r2, #71	; 0x47
 8025984:	2103      	movs	r1, #3
 8025986:	487b      	ldr	r0, [pc, #492]	; (8025b74 <Loop+0x310>)
 8025988:	f7fc f84c 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            led.ColorOrder('X');
 802598c:	2158      	movs	r1, #88	; 0x58
 802598e:	4879      	ldr	r0, [pc, #484]	; (8025b74 <Loop+0x310>)
 8025990:	f7fb ff6c 	bl	802186c <_ZN3Led10ColorOrderEc>
            g_mode = LINE_TRACE_DEBUG;
 8025994:	4b78      	ldr	r3, [pc, #480]	; (8025b78 <Loop+0x314>)
 8025996:	220d      	movs	r2, #13
 8025998:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 802599a:	4b73      	ldr	r3, [pc, #460]	; (8025b68 <Loop+0x304>)
 802599c:	781b      	ldrb	r3, [r3, #0]
 802599e:	2b00      	cmp	r3, #0
 80259a0:	f040 80ca 	bne.w	8025b38 <Loop+0x2d4>
 80259a4:	e7f9      	b.n	802599a <Loop+0x136>
            break;

        case 0x0E: // Initial debug
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 80259a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80259aa:	f000 fe73 	bl	8026694 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 80259ae:	4b6e      	ldr	r3, [pc, #440]	; (8025b68 <Loop+0x304>)
 80259b0:	781b      	ldrb	r3, [r3, #0]
 80259b2:	2b01      	cmp	r3, #1
 80259b4:	f000 80c2 	beq.w	8025b3c <Loop+0x2d8>

            led.Blink(3, 'G', 'X');
 80259b8:	2358      	movs	r3, #88	; 0x58
 80259ba:	2247      	movs	r2, #71	; 0x47
 80259bc:	2103      	movs	r1, #3
 80259be:	486d      	ldr	r0, [pc, #436]	; (8025b74 <Loop+0x310>)
 80259c0:	f7fc f830 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            g_mode = INITIAL_DEBUG;
 80259c4:	4b6c      	ldr	r3, [pc, #432]	; (8025b78 <Loop+0x314>)
 80259c6:	220e      	movs	r2, #14
 80259c8:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 80259ca:	4b67      	ldr	r3, [pc, #412]	; (8025b68 <Loop+0x304>)
 80259cc:	781b      	ldrb	r3, [r3, #0]
 80259ce:	2b00      	cmp	r3, #0
 80259d0:	f040 80b6 	bne.w	8025b40 <Loop+0x2dc>
 80259d4:	e7f9      	b.n	80259ca <Loop+0x166>
            }
            break;
#endif // DEBUG_MODE

        case 0x0F:
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 80259d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80259da:	f000 fe5b 	bl	8026694 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 80259de:	4b62      	ldr	r3, [pc, #392]	; (8025b68 <Loop+0x304>)
 80259e0:	781b      	ldrb	r3, [r3, #0]
 80259e2:	2b01      	cmp	r3, #1
 80259e4:	f000 80ae 	beq.w	8025b44 <Loop+0x2e0>

            led.Blink(3, 'Y', 'X');
 80259e8:	2358      	movs	r3, #88	; 0x58
 80259ea:	2259      	movs	r2, #89	; 0x59
 80259ec:	2103      	movs	r1, #3
 80259ee:	4861      	ldr	r0, [pc, #388]	; (8025b74 <Loop+0x310>)
 80259f0:	f7fc f818 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            g_mode = READY;
 80259f4:	4b60      	ldr	r3, [pc, #384]	; (8025b78 <Loop+0x314>)
 80259f6:	220f      	movs	r2, #15
 80259f8:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 80259fa:	4b5b      	ldr	r3, [pc, #364]	; (8025b68 <Loop+0x304>)
 80259fc:	781b      	ldrb	r3, [r3, #0]
 80259fe:	2b00      	cmp	r3, #0
 8025a00:	f040 80a2 	bne.w	8025b48 <Loop+0x2e4>
 8025a04:	e7f9      	b.n	80259fa <Loop+0x196>
            break;

        case 0x00:
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025a06:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025a0a:	f000 fe43 	bl	8026694 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025a0e:	4b56      	ldr	r3, [pc, #344]	; (8025b68 <Loop+0x304>)
 8025a10:	781b      	ldrb	r3, [r3, #0]
 8025a12:	2b01      	cmp	r3, #1
 8025a14:	f000 809a 	beq.w	8025b4c <Loop+0x2e8>

            g_mode = STANDBY;
 8025a18:	4b57      	ldr	r3, [pc, #348]	; (8025b78 <Loop+0x314>)
 8025a1a:	2200      	movs	r2, #0
 8025a1c:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) { led.Rainbow(1); }
 8025a1e:	4b52      	ldr	r3, [pc, #328]	; (8025b68 <Loop+0x304>)
 8025a20:	781b      	ldrb	r3, [r3, #0]
 8025a22:	2b00      	cmp	r3, #0
 8025a24:	f040 8094 	bne.w	8025b50 <Loop+0x2ec>
 8025a28:	2101      	movs	r1, #1
 8025a2a:	4852      	ldr	r0, [pc, #328]	; (8025b74 <Loop+0x310>)
 8025a2c:	f7fc f827 	bl	8021a7e <_ZN3Led7RainbowEh>
 8025a30:	e7f5      	b.n	8025a1e <Loop+0x1ba>
            break;

        case 0x01:
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025a32:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025a36:	f000 fe2d 	bl	8026694 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025a3a:	4b4b      	ldr	r3, [pc, #300]	; (8025b68 <Loop+0x304>)
 8025a3c:	781b      	ldrb	r3, [r3, #0]
 8025a3e:	2b01      	cmp	r3, #1
 8025a40:	f000 8088 	beq.w	8025b54 <Loop+0x2f0>

            led.Blink(3, 'B', 'X');
 8025a44:	2358      	movs	r3, #88	; 0x58
 8025a46:	2242      	movs	r2, #66	; 0x42
 8025a48:	2103      	movs	r1, #3
 8025a4a:	484a      	ldr	r0, [pc, #296]	; (8025b74 <Loop+0x310>)
 8025a4c:	f7fb ffea 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            g_mode = FIRST_RUN;
 8025a50:	4b49      	ldr	r3, [pc, #292]	; (8025b78 <Loop+0x314>)
 8025a52:	2201      	movs	r2, #1
 8025a54:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 8025a56:	4b44      	ldr	r3, [pc, #272]	; (8025b68 <Loop+0x304>)
 8025a58:	781b      	ldrb	r3, [r3, #0]
 8025a5a:	2b00      	cmp	r3, #0
 8025a5c:	d17c      	bne.n	8025b58 <Loop+0x2f4>
 8025a5e:	e7fa      	b.n	8025a56 <Loop+0x1f2>
            break;

        case 0x02:
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025a60:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025a64:	f000 fe16 	bl	8026694 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025a68:	4b3f      	ldr	r3, [pc, #252]	; (8025b68 <Loop+0x304>)
 8025a6a:	781b      	ldrb	r3, [r3, #0]
 8025a6c:	2b01      	cmp	r3, #1
 8025a6e:	d075      	beq.n	8025b5c <Loop+0x2f8>

            led.Blink(3, 'M', 'X');
 8025a70:	2358      	movs	r3, #88	; 0x58
 8025a72:	224d      	movs	r2, #77	; 0x4d
 8025a74:	2103      	movs	r1, #3
 8025a76:	483f      	ldr	r0, [pc, #252]	; (8025b74 <Loop+0x310>)
 8025a78:	f7fb ffd4 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            g_mode = SECOND_RUN;
 8025a7c:	4b3e      	ldr	r3, [pc, #248]	; (8025b78 <Loop+0x314>)
 8025a7e:	2202      	movs	r2, #2
 8025a80:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 8025a82:	4b39      	ldr	r3, [pc, #228]	; (8025b68 <Loop+0x304>)
 8025a84:	781b      	ldrb	r3, [r3, #0]
 8025a86:	2b00      	cmp	r3, #0
 8025a88:	d16a      	bne.n	8025b60 <Loop+0x2fc>
 8025a8a:	e7fa      	b.n	8025a82 <Loop+0x21e>
            break;

        case 0x04: // Velocity control
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025a8c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025a90:	f000 fe00 	bl	8026694 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025a94:	4b34      	ldr	r3, [pc, #208]	; (8025b68 <Loop+0x304>)
 8025a96:	781b      	ldrb	r3, [r3, #0]
 8025a98:	2b01      	cmp	r3, #1
 8025a9a:	d063      	beq.n	8025b64 <Loop+0x300>

            led.Blink(3, 'G', 'B');
 8025a9c:	2342      	movs	r3, #66	; 0x42
 8025a9e:	2247      	movs	r2, #71	; 0x47
 8025aa0:	2103      	movs	r1, #3
 8025aa2:	4834      	ldr	r0, [pc, #208]	; (8025b74 <Loop+0x310>)
 8025aa4:	f7fb ffbe 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            led.ColorOrder('X');
 8025aa8:	2158      	movs	r1, #88	; 0x58
 8025aaa:	4832      	ldr	r0, [pc, #200]	; (8025b74 <Loop+0x310>)
 8025aac:	f7fb fede 	bl	802186c <_ZN3Led10ColorOrderEc>
            g_mode = VELOCITY_CONTROL;
 8025ab0:	4b31      	ldr	r3, [pc, #196]	; (8025b78 <Loop+0x314>)
 8025ab2:	2204      	movs	r2, #4
 8025ab4:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 8025ab6:	4b2c      	ldr	r3, [pc, #176]	; (8025b68 <Loop+0x304>)
 8025ab8:	781b      	ldrb	r3, [r3, #0]
 8025aba:	2b00      	cmp	r3, #0
 8025abc:	d160      	bne.n	8025b80 <Loop+0x31c>
 8025abe:	e7fa      	b.n	8025ab6 <Loop+0x252>
            break;

        case 0x05: // Line trace
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025ac0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025ac4:	f000 fde6 	bl	8026694 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025ac8:	4b27      	ldr	r3, [pc, #156]	; (8025b68 <Loop+0x304>)
 8025aca:	781b      	ldrb	r3, [r3, #0]
 8025acc:	2b01      	cmp	r3, #1
 8025ace:	d059      	beq.n	8025b84 <Loop+0x320>

            led.Blink(3, 'G', 'Y');
 8025ad0:	2359      	movs	r3, #89	; 0x59
 8025ad2:	2247      	movs	r2, #71	; 0x47
 8025ad4:	2103      	movs	r1, #3
 8025ad6:	4827      	ldr	r0, [pc, #156]	; (8025b74 <Loop+0x310>)
 8025ad8:	f7fb ffa4 	bl	8021a24 <_ZN3Led5BlinkEhcc>
            led.ColorOrder('X');
 8025adc:	2158      	movs	r1, #88	; 0x58
 8025ade:	4825      	ldr	r0, [pc, #148]	; (8025b74 <Loop+0x310>)
 8025ae0:	f7fb fec4 	bl	802186c <_ZN3Led10ColorOrderEc>
            g_mode = LINE_TRACE;
 8025ae4:	4b24      	ldr	r3, [pc, #144]	; (8025b78 <Loop+0x314>)
 8025ae6:	2205      	movs	r2, #5
 8025ae8:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) {}
 8025aea:	4b1f      	ldr	r3, [pc, #124]	; (8025b68 <Loop+0x304>)
 8025aec:	781b      	ldrb	r3, [r3, #0]
 8025aee:	2b00      	cmp	r3, #0
 8025af0:	d14a      	bne.n	8025b88 <Loop+0x324>
 8025af2:	e7fa      	b.n	8025aea <Loop+0x286>
            break;

        default:
            HAL_Delay(SWITCH_CHANGE_INTERVAL_MS);
 8025af4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8025af8:	f000 fdcc 	bl	8026694 <HAL_Delay>
            if(g_main_while_reset == 1) break;
 8025afc:	4b1a      	ldr	r3, [pc, #104]	; (8025b68 <Loop+0x304>)
 8025afe:	781b      	ldrb	r3, [r3, #0]
 8025b00:	2b01      	cmp	r3, #1
 8025b02:	d043      	beq.n	8025b8c <Loop+0x328>

            g_mode = STANDBY;
 8025b04:	4b1c      	ldr	r3, [pc, #112]	; (8025b78 <Loop+0x314>)
 8025b06:	2200      	movs	r2, #0
 8025b08:	701a      	strb	r2, [r3, #0]

            while(g_main_while_reset == 0) { led.Blink(1, 'W', 'X'); }
 8025b0a:	4b17      	ldr	r3, [pc, #92]	; (8025b68 <Loop+0x304>)
 8025b0c:	781b      	ldrb	r3, [r3, #0]
 8025b0e:	2b00      	cmp	r3, #0
 8025b10:	d13e      	bne.n	8025b90 <Loop+0x32c>
 8025b12:	2358      	movs	r3, #88	; 0x58
 8025b14:	2257      	movs	r2, #87	; 0x57
 8025b16:	2101      	movs	r1, #1
 8025b18:	4816      	ldr	r0, [pc, #88]	; (8025b74 <Loop+0x310>)
 8025b1a:	f7fb ff83 	bl	8021a24 <_ZN3Led5BlinkEhcc>
 8025b1e:	e7f4      	b.n	8025b0a <Loop+0x2a6>
            if(g_main_while_reset == 1) break;
 8025b20:	bf00      	nop
 8025b22:	e036      	b.n	8025b92 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025b24:	bf00      	nop
 8025b26:	e034      	b.n	8025b92 <Loop+0x32e>
            break;
 8025b28:	bf00      	nop
 8025b2a:	e032      	b.n	8025b92 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025b2c:	bf00      	nop
 8025b2e:	e030      	b.n	8025b92 <Loop+0x32e>
            break;
 8025b30:	bf00      	nop
 8025b32:	e02e      	b.n	8025b92 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025b34:	bf00      	nop
 8025b36:	e02c      	b.n	8025b92 <Loop+0x32e>
            break;
 8025b38:	bf00      	nop
 8025b3a:	e02a      	b.n	8025b92 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025b3c:	bf00      	nop
 8025b3e:	e028      	b.n	8025b92 <Loop+0x32e>
            break;
 8025b40:	bf00      	nop
 8025b42:	e026      	b.n	8025b92 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025b44:	bf00      	nop
 8025b46:	e024      	b.n	8025b92 <Loop+0x32e>
            break;
 8025b48:	bf00      	nop
 8025b4a:	e022      	b.n	8025b92 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025b4c:	bf00      	nop
 8025b4e:	e020      	b.n	8025b92 <Loop+0x32e>
            break;
 8025b50:	bf00      	nop
 8025b52:	e01e      	b.n	8025b92 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025b54:	bf00      	nop
 8025b56:	e01c      	b.n	8025b92 <Loop+0x32e>
            break;
 8025b58:	bf00      	nop
 8025b5a:	e01a      	b.n	8025b92 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025b5c:	bf00      	nop
 8025b5e:	e018      	b.n	8025b92 <Loop+0x32e>
            break;
 8025b60:	bf00      	nop
 8025b62:	e016      	b.n	8025b92 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025b64:	bf00      	nop
 8025b66:	e014      	b.n	8025b92 <Loop+0x32e>
 8025b68:	20000319 	.word	0x20000319
 8025b6c:	20000794 	.word	0x20000794
 8025b70:	2000031a 	.word	0x2000031a
 8025b74:	20000368 	.word	0x20000368
 8025b78:	2000031b 	.word	0x2000031b
 8025b7c:	20000318 	.word	0x20000318
            break;
 8025b80:	bf00      	nop
 8025b82:	e006      	b.n	8025b92 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025b84:	bf00      	nop
 8025b86:	e004      	b.n	8025b92 <Loop+0x32e>
            break;
 8025b88:	bf00      	nop
 8025b8a:	e002      	b.n	8025b92 <Loop+0x32e>
            if(g_main_while_reset == 1) break;
 8025b8c:	bf00      	nop
 8025b8e:	e000      	b.n	8025b92 <Loop+0x32e>
            break;
 8025b90:	bf00      	nop
    }
}
 8025b92:	bf00      	nop
 8025b94:	bd80      	pop	{r7, pc}
 8025b96:	bf00      	nop

08025b98 <EmergencyStop>:


void EmergencyStop()
{
 8025b98:	b580      	push	{r7, lr}
 8025b9a:	af00      	add	r7, sp, #0
    static uint8_t emergency_cnt = 0;

    if(emergency_cnt >= EMERGENCY_STOP_COUNT)
 8025b9c:	4b14      	ldr	r3, [pc, #80]	; (8025bf0 <EmergencyStop+0x58>)
 8025b9e:	781b      	ldrb	r3, [r3, #0]
 8025ba0:	2b04      	cmp	r3, #4
 8025ba2:	d90e      	bls.n	8025bc2 <EmergencyStop+0x2a>
    {
        motor.Drive(0, 0);
 8025ba4:	eddf 0a13 	vldr	s1, [pc, #76]	; 8025bf4 <EmergencyStop+0x5c>
 8025ba8:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8025bf4 <EmergencyStop+0x5c>
 8025bac:	4812      	ldr	r0, [pc, #72]	; (8025bf8 <EmergencyStop+0x60>)
 8025bae:	f7fe f913 	bl	8023dd8 <_ZN5Motor5DriveEff>
        led.ColorOrder('W');
 8025bb2:	2157      	movs	r1, #87	; 0x57
 8025bb4:	4811      	ldr	r0, [pc, #68]	; (8025bfc <EmergencyStop+0x64>)
 8025bb6:	f7fb fe59 	bl	802186c <_ZN3Led10ColorOrderEc>
        g_emergency_stop = 1;
 8025bba:	4b11      	ldr	r3, [pc, #68]	; (8025c00 <EmergencyStop+0x68>)
 8025bbc:	2201      	movs	r2, #1
 8025bbe:	701a      	strb	r2, [r3, #0]
    }
    else if(line_sensor.GetEmergencyStopFlag() == 1) emergency_cnt++;
    else emergency_cnt = 0;
}
 8025bc0:	e014      	b.n	8025bec <EmergencyStop+0x54>
    else if(line_sensor.GetEmergencyStopFlag() == 1) emergency_cnt++;
 8025bc2:	4810      	ldr	r0, [pc, #64]	; (8025c04 <EmergencyStop+0x6c>)
 8025bc4:	f7fc f9e2 	bl	8021f8c <_ZN10LineSensor20GetEmergencyStopFlagEv>
 8025bc8:	4603      	mov	r3, r0
 8025bca:	2b01      	cmp	r3, #1
 8025bcc:	bf0c      	ite	eq
 8025bce:	2301      	moveq	r3, #1
 8025bd0:	2300      	movne	r3, #0
 8025bd2:	b2db      	uxtb	r3, r3
 8025bd4:	2b00      	cmp	r3, #0
 8025bd6:	d006      	beq.n	8025be6 <EmergencyStop+0x4e>
 8025bd8:	4b05      	ldr	r3, [pc, #20]	; (8025bf0 <EmergencyStop+0x58>)
 8025bda:	781b      	ldrb	r3, [r3, #0]
 8025bdc:	3301      	adds	r3, #1
 8025bde:	b2da      	uxtb	r2, r3
 8025be0:	4b03      	ldr	r3, [pc, #12]	; (8025bf0 <EmergencyStop+0x58>)
 8025be2:	701a      	strb	r2, [r3, #0]
}
 8025be4:	e002      	b.n	8025bec <EmergencyStop+0x54>
    else emergency_cnt = 0;
 8025be6:	4b02      	ldr	r3, [pc, #8]	; (8025bf0 <EmergencyStop+0x58>)
 8025be8:	2200      	movs	r2, #0
 8025bea:	701a      	strb	r2, [r3, #0]
}
 8025bec:	bf00      	nop
 8025bee:	bd80      	pop	{r7, pc}
 8025bf0:	200007b0 	.word	0x200007b0
 8025bf4:	00000000 	.word	0x00000000
 8025bf8:	20000790 	.word	0x20000790
 8025bfc:	20000368 	.word	0x20000368
 8025c00:	2000031c 	.word	0x2000031c
 8025c04:	2000036c 	.word	0x2000036c

08025c08 <TargetVelocity>:


float TargetVelocity(float target, float min)
{
 8025c08:	b480      	push	{r7}
 8025c0a:	b083      	sub	sp, #12
 8025c0c:	af00      	add	r7, sp, #0
 8025c0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8025c12:	edc7 0a00 	vstr	s1, [r7]
    static uint8_t slow_cnt = 0;
    static uint8_t stop_cnt = 0;

    if(g_goal_cnt == 1) return target;
 8025c16:	4b15      	ldr	r3, [pc, #84]	; (8025c6c <TargetVelocity+0x64>)
 8025c18:	781b      	ldrb	r3, [r3, #0]
 8025c1a:	2b01      	cmp	r3, #1
 8025c1c:	d101      	bne.n	8025c22 <TargetVelocity+0x1a>
 8025c1e:	687b      	ldr	r3, [r7, #4]
 8025c20:	e01a      	b.n	8025c58 <TargetVelocity+0x50>
    else if(g_goal_cnt >= 2)
 8025c22:	4b12      	ldr	r3, [pc, #72]	; (8025c6c <TargetVelocity+0x64>)
 8025c24:	781b      	ldrb	r3, [r3, #0]
 8025c26:	2b01      	cmp	r3, #1
 8025c28:	d915      	bls.n	8025c56 <TargetVelocity+0x4e>
    {
        if(slow_cnt < GOAL_SLOW_COUNT)
 8025c2a:	4b11      	ldr	r3, [pc, #68]	; (8025c70 <TargetVelocity+0x68>)
 8025c2c:	781b      	ldrb	r3, [r3, #0]
 8025c2e:	2b09      	cmp	r3, #9
 8025c30:	d808      	bhi.n	8025c44 <TargetVelocity+0x3c>
        {
            slow_cnt++; return GOAL_SLOW_VELOCITY;
 8025c32:	4b0f      	ldr	r3, [pc, #60]	; (8025c70 <TargetVelocity+0x68>)
 8025c34:	781b      	ldrb	r3, [r3, #0]
 8025c36:	3301      	adds	r3, #1
 8025c38:	b2da      	uxtb	r2, r3
 8025c3a:	4b0d      	ldr	r3, [pc, #52]	; (8025c70 <TargetVelocity+0x68>)
 8025c3c:	701a      	strb	r2, [r3, #0]
 8025c3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8025c42:	e009      	b.n	8025c58 <TargetVelocity+0x50>
        }
        else if(stop_cnt < GOAL_STOP_COUNT)
        {
            stop_cnt++; return 0;
 8025c44:	4b0b      	ldr	r3, [pc, #44]	; (8025c74 <TargetVelocity+0x6c>)
 8025c46:	781b      	ldrb	r3, [r3, #0]
 8025c48:	3301      	adds	r3, #1
 8025c4a:	b2da      	uxtb	r2, r3
 8025c4c:	4b09      	ldr	r3, [pc, #36]	; (8025c74 <TargetVelocity+0x6c>)
 8025c4e:	701a      	strb	r2, [r3, #0]
 8025c50:	f04f 0300 	mov.w	r3, #0
 8025c54:	e000      	b.n	8025c58 <TargetVelocity+0x50>
        else
        {
            g_run_end = 1; return 0;
        }
    }
    else return min;
 8025c56:	683b      	ldr	r3, [r7, #0]
 8025c58:	ee07 3a90 	vmov	s15, r3
}
 8025c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8025c60:	370c      	adds	r7, #12
 8025c62:	46bd      	mov	sp, r7
 8025c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c68:	4770      	bx	lr
 8025c6a:	bf00      	nop
 8025c6c:	20000325 	.word	0x20000325
 8025c70:	200007b1 	.word	0x200007b1
 8025c74:	200007b2 	.word	0x200007b2

08025c78 <TargetDuty>:


float TargetDuty(float target, float min)
{
 8025c78:	b590      	push	{r4, r7, lr}
 8025c7a:	b083      	sub	sp, #12
 8025c7c:	af00      	add	r7, sp, #0
 8025c7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8025c82:	edc7 0a00 	vstr	s1, [r7]
    static uint8_t slow_cnt = 0;
    static uint8_t stop_cnt = 0;

    if(g_goal_cnt == 1) return target;
 8025c86:	4b1c      	ldr	r3, [pc, #112]	; (8025cf8 <TargetDuty+0x80>)
 8025c88:	781b      	ldrb	r3, [r3, #0]
 8025c8a:	2b01      	cmp	r3, #1
 8025c8c:	d101      	bne.n	8025c92 <TargetDuty+0x1a>
 8025c8e:	687b      	ldr	r3, [r7, #4]
 8025c90:	e027      	b.n	8025ce2 <TargetDuty+0x6a>
    else if(g_goal_cnt >= 2)
 8025c92:	4b19      	ldr	r3, [pc, #100]	; (8025cf8 <TargetDuty+0x80>)
 8025c94:	781b      	ldrb	r3, [r3, #0]
 8025c96:	2b01      	cmp	r3, #1
 8025c98:	d922      	bls.n	8025ce0 <TargetDuty+0x68>
    {
        if(slow_cnt < GOAL_SLOW_COUNT)
 8025c9a:	4b18      	ldr	r3, [pc, #96]	; (8025cfc <TargetDuty+0x84>)
 8025c9c:	781b      	ldrb	r3, [r3, #0]
 8025c9e:	2b09      	cmp	r3, #9
 8025ca0:	d815      	bhi.n	8025cce <TargetDuty+0x56>
        {
            slow_cnt++; return min * 0.6;
 8025ca2:	4b16      	ldr	r3, [pc, #88]	; (8025cfc <TargetDuty+0x84>)
 8025ca4:	781b      	ldrb	r3, [r3, #0]
 8025ca6:	3301      	adds	r3, #1
 8025ca8:	b2da      	uxtb	r2, r3
 8025caa:	4b14      	ldr	r3, [pc, #80]	; (8025cfc <TargetDuty+0x84>)
 8025cac:	701a      	strb	r2, [r3, #0]
 8025cae:	6838      	ldr	r0, [r7, #0]
 8025cb0:	f7fa fb2a 	bl	8020308 <__aeabi_f2d>
 8025cb4:	a30e      	add	r3, pc, #56	; (adr r3, 8025cf0 <TargetDuty+0x78>)
 8025cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025cba:	f7fa fb7d 	bl	80203b8 <__aeabi_dmul>
 8025cbe:	4603      	mov	r3, r0
 8025cc0:	460c      	mov	r4, r1
 8025cc2:	4618      	mov	r0, r3
 8025cc4:	4621      	mov	r1, r4
 8025cc6:	f7fa fe11 	bl	80208ec <__aeabi_d2f>
 8025cca:	4603      	mov	r3, r0
 8025ccc:	e009      	b.n	8025ce2 <TargetDuty+0x6a>
        }
        else if(stop_cnt < GOAL_STOP_COUNT)
        {
            stop_cnt++; return 0;
 8025cce:	4b0c      	ldr	r3, [pc, #48]	; (8025d00 <TargetDuty+0x88>)
 8025cd0:	781b      	ldrb	r3, [r3, #0]
 8025cd2:	3301      	adds	r3, #1
 8025cd4:	b2da      	uxtb	r2, r3
 8025cd6:	4b0a      	ldr	r3, [pc, #40]	; (8025d00 <TargetDuty+0x88>)
 8025cd8:	701a      	strb	r2, [r3, #0]
 8025cda:	f04f 0300 	mov.w	r3, #0
 8025cde:	e000      	b.n	8025ce2 <TargetDuty+0x6a>
        else
        {
            g_run_end = 1; return 0;
        }
    }
    else return min;
 8025ce0:	683b      	ldr	r3, [r7, #0]
 8025ce2:	ee07 3a90 	vmov	s15, r3
}
 8025ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8025cea:	370c      	adds	r7, #12
 8025cec:	46bd      	mov	sp, r7
 8025cee:	bd90      	pop	{r4, r7, pc}
 8025cf0:	33333333 	.word	0x33333333
 8025cf4:	3fe33333 	.word	0x3fe33333
 8025cf8:	20000325 	.word	0x20000325
 8025cfc:	200007b3 	.word	0x200007b3
 8025d00:	200007b4 	.word	0x200007b4

08025d04 <FlashTest>:


#ifdef DEBUG_MODE
uint8_t FlashTest()
{
 8025d04:	b5b0      	push	{r4, r5, r7, lr}
 8025d06:	b096      	sub	sp, #88	; 0x58
 8025d08:	af00      	add	r7, sp, #0
    if(!flash.CheckBlankWord(address_4, num_of_data)) return 0x0B;
    if(!flash.StoreFloat(address_4, d, num_of_data)) return 0x0C;
    flash.Load(buff_d, address_4, num_of_data*4);
    for(i = 0; i < num_of_data; i++) if(d[i] != buff_d[i]) return 0x0D;

    return 0x0E;
 8025d0a:	466b      	mov	r3, sp
 8025d0c:	461d      	mov	r5, r3
    uint32_t address_1 = SECTOR_1_ADDRESS_HEAD;
 8025d0e:	4bd7      	ldr	r3, [pc, #860]	; (802606c <FlashTest+0x368>)
 8025d10:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t address_2 = SECTOR_2_ADDRESS_HEAD;
 8025d12:	4bd7      	ldr	r3, [pc, #860]	; (8026070 <FlashTest+0x36c>)
 8025d14:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t address_3 = SECTOR_3_ADDRESS_HEAD;
 8025d16:	4bd7      	ldr	r3, [pc, #860]	; (8026074 <FlashTest+0x370>)
 8025d18:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t address_4 = SECTOR_4_ADDRESS_HEAD;
 8025d1a:	4bd7      	ldr	r3, [pc, #860]	; (8026078 <FlashTest+0x374>)
 8025d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t i, num_of_data = 3;
 8025d1e:	2303      	movs	r3, #3
 8025d20:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t a[num_of_data] = {1,2,3};
 8025d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025d24:	1e58      	subs	r0, r3, #1
 8025d26:	6578      	str	r0, [r7, #84]	; 0x54
 8025d28:	4603      	mov	r3, r0
 8025d2a:	3301      	adds	r3, #1
 8025d2c:	4619      	mov	r1, r3
 8025d2e:	f04f 0200 	mov.w	r2, #0
 8025d32:	f04f 0300 	mov.w	r3, #0
 8025d36:	f04f 0400 	mov.w	r4, #0
 8025d3a:	00d4      	lsls	r4, r2, #3
 8025d3c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025d40:	00cb      	lsls	r3, r1, #3
 8025d42:	4603      	mov	r3, r0
 8025d44:	3301      	adds	r3, #1
 8025d46:	4619      	mov	r1, r3
 8025d48:	f04f 0200 	mov.w	r2, #0
 8025d4c:	f04f 0300 	mov.w	r3, #0
 8025d50:	f04f 0400 	mov.w	r4, #0
 8025d54:	00d4      	lsls	r4, r2, #3
 8025d56:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025d5a:	00cb      	lsls	r3, r1, #3
 8025d5c:	4603      	mov	r3, r0
 8025d5e:	3301      	adds	r3, #1
 8025d60:	3307      	adds	r3, #7
 8025d62:	08db      	lsrs	r3, r3, #3
 8025d64:	00db      	lsls	r3, r3, #3
 8025d66:	ebad 0d03 	sub.w	sp, sp, r3
 8025d6a:	466b      	mov	r3, sp
 8025d6c:	3300      	adds	r3, #0
 8025d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8025d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025d72:	4602      	mov	r2, r0
 8025d74:	2101      	movs	r1, #1
 8025d76:	7019      	strb	r1, [r3, #0]
 8025d78:	3301      	adds	r3, #1
 8025d7a:	3a01      	subs	r2, #1
 8025d7c:	2102      	movs	r1, #2
 8025d7e:	7019      	strb	r1, [r3, #0]
 8025d80:	3301      	adds	r3, #1
 8025d82:	1e51      	subs	r1, r2, #1
 8025d84:	2203      	movs	r2, #3
 8025d86:	701a      	strb	r2, [r3, #0]
 8025d88:	1c5a      	adds	r2, r3, #1
 8025d8a:	1e4b      	subs	r3, r1, #1
 8025d8c:	2b00      	cmp	r3, #0
 8025d8e:	db04      	blt.n	8025d9a <FlashTest+0x96>
 8025d90:	2100      	movs	r1, #0
 8025d92:	7011      	strb	r1, [r2, #0]
 8025d94:	3201      	adds	r2, #1
 8025d96:	3b01      	subs	r3, #1
 8025d98:	e7f8      	b.n	8025d8c <FlashTest+0x88>
    uint16_t b[num_of_data] = {4,5,6};
 8025d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025d9c:	1e58      	subs	r0, r3, #1
 8025d9e:	6378      	str	r0, [r7, #52]	; 0x34
 8025da0:	4603      	mov	r3, r0
 8025da2:	3301      	adds	r3, #1
 8025da4:	4619      	mov	r1, r3
 8025da6:	f04f 0200 	mov.w	r2, #0
 8025daa:	f04f 0300 	mov.w	r3, #0
 8025dae:	f04f 0400 	mov.w	r4, #0
 8025db2:	0114      	lsls	r4, r2, #4
 8025db4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025db8:	010b      	lsls	r3, r1, #4
 8025dba:	4603      	mov	r3, r0
 8025dbc:	3301      	adds	r3, #1
 8025dbe:	4619      	mov	r1, r3
 8025dc0:	f04f 0200 	mov.w	r2, #0
 8025dc4:	f04f 0300 	mov.w	r3, #0
 8025dc8:	f04f 0400 	mov.w	r4, #0
 8025dcc:	0114      	lsls	r4, r2, #4
 8025dce:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025dd2:	010b      	lsls	r3, r1, #4
 8025dd4:	4603      	mov	r3, r0
 8025dd6:	3301      	adds	r3, #1
 8025dd8:	005b      	lsls	r3, r3, #1
 8025dda:	3301      	adds	r3, #1
 8025ddc:	3307      	adds	r3, #7
 8025dde:	08db      	lsrs	r3, r3, #3
 8025de0:	00db      	lsls	r3, r3, #3
 8025de2:	ebad 0d03 	sub.w	sp, sp, r3
 8025de6:	466b      	mov	r3, sp
 8025de8:	3301      	adds	r3, #1
 8025dea:	085b      	lsrs	r3, r3, #1
 8025dec:	005b      	lsls	r3, r3, #1
 8025dee:	633b      	str	r3, [r7, #48]	; 0x30
 8025df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025df2:	4602      	mov	r2, r0
 8025df4:	2104      	movs	r1, #4
 8025df6:	8019      	strh	r1, [r3, #0]
 8025df8:	3302      	adds	r3, #2
 8025dfa:	3a01      	subs	r2, #1
 8025dfc:	2105      	movs	r1, #5
 8025dfe:	8019      	strh	r1, [r3, #0]
 8025e00:	3302      	adds	r3, #2
 8025e02:	1e51      	subs	r1, r2, #1
 8025e04:	2206      	movs	r2, #6
 8025e06:	801a      	strh	r2, [r3, #0]
 8025e08:	1c9a      	adds	r2, r3, #2
 8025e0a:	1e4b      	subs	r3, r1, #1
 8025e0c:	2b00      	cmp	r3, #0
 8025e0e:	db04      	blt.n	8025e1a <FlashTest+0x116>
 8025e10:	2100      	movs	r1, #0
 8025e12:	8011      	strh	r1, [r2, #0]
 8025e14:	3202      	adds	r2, #2
 8025e16:	3b01      	subs	r3, #1
 8025e18:	e7f8      	b.n	8025e0c <FlashTest+0x108>
    int16_t c[num_of_data] = {-7,-8,-9};
 8025e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025e1c:	1e58      	subs	r0, r3, #1
 8025e1e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8025e20:	4603      	mov	r3, r0
 8025e22:	3301      	adds	r3, #1
 8025e24:	4619      	mov	r1, r3
 8025e26:	f04f 0200 	mov.w	r2, #0
 8025e2a:	f04f 0300 	mov.w	r3, #0
 8025e2e:	f04f 0400 	mov.w	r4, #0
 8025e32:	0114      	lsls	r4, r2, #4
 8025e34:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025e38:	010b      	lsls	r3, r1, #4
 8025e3a:	4603      	mov	r3, r0
 8025e3c:	3301      	adds	r3, #1
 8025e3e:	4619      	mov	r1, r3
 8025e40:	f04f 0200 	mov.w	r2, #0
 8025e44:	f04f 0300 	mov.w	r3, #0
 8025e48:	f04f 0400 	mov.w	r4, #0
 8025e4c:	0114      	lsls	r4, r2, #4
 8025e4e:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025e52:	010b      	lsls	r3, r1, #4
 8025e54:	4603      	mov	r3, r0
 8025e56:	3301      	adds	r3, #1
 8025e58:	005b      	lsls	r3, r3, #1
 8025e5a:	3301      	adds	r3, #1
 8025e5c:	3307      	adds	r3, #7
 8025e5e:	08db      	lsrs	r3, r3, #3
 8025e60:	00db      	lsls	r3, r3, #3
 8025e62:	ebad 0d03 	sub.w	sp, sp, r3
 8025e66:	466b      	mov	r3, sp
 8025e68:	3301      	adds	r3, #1
 8025e6a:	085b      	lsrs	r3, r3, #1
 8025e6c:	005b      	lsls	r3, r3, #1
 8025e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8025e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e72:	4602      	mov	r2, r0
 8025e74:	f64f 71f9 	movw	r1, #65529	; 0xfff9
 8025e78:	8019      	strh	r1, [r3, #0]
 8025e7a:	3302      	adds	r3, #2
 8025e7c:	3a01      	subs	r2, #1
 8025e7e:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8025e82:	8019      	strh	r1, [r3, #0]
 8025e84:	3302      	adds	r3, #2
 8025e86:	1e51      	subs	r1, r2, #1
 8025e88:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8025e8c:	801a      	strh	r2, [r3, #0]
 8025e8e:	1c9a      	adds	r2, r3, #2
 8025e90:	1e4b      	subs	r3, r1, #1
 8025e92:	2b00      	cmp	r3, #0
 8025e94:	db04      	blt.n	8025ea0 <FlashTest+0x19c>
 8025e96:	2100      	movs	r1, #0
 8025e98:	8011      	strh	r1, [r2, #0]
 8025e9a:	3202      	adds	r2, #2
 8025e9c:	3b01      	subs	r3, #1
 8025e9e:	e7f8      	b.n	8025e92 <FlashTest+0x18e>
    float d[num_of_data] = {0.1,0.2,0.3};
 8025ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025ea2:	1e58      	subs	r0, r3, #1
 8025ea4:	6278      	str	r0, [r7, #36]	; 0x24
 8025ea6:	4603      	mov	r3, r0
 8025ea8:	3301      	adds	r3, #1
 8025eaa:	4619      	mov	r1, r3
 8025eac:	f04f 0200 	mov.w	r2, #0
 8025eb0:	f04f 0300 	mov.w	r3, #0
 8025eb4:	f04f 0400 	mov.w	r4, #0
 8025eb8:	0154      	lsls	r4, r2, #5
 8025eba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8025ebe:	014b      	lsls	r3, r1, #5
 8025ec0:	4603      	mov	r3, r0
 8025ec2:	3301      	adds	r3, #1
 8025ec4:	4619      	mov	r1, r3
 8025ec6:	f04f 0200 	mov.w	r2, #0
 8025eca:	f04f 0300 	mov.w	r3, #0
 8025ece:	f04f 0400 	mov.w	r4, #0
 8025ed2:	0154      	lsls	r4, r2, #5
 8025ed4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8025ed8:	014b      	lsls	r3, r1, #5
 8025eda:	4603      	mov	r3, r0
 8025edc:	3301      	adds	r3, #1
 8025ede:	009b      	lsls	r3, r3, #2
 8025ee0:	3303      	adds	r3, #3
 8025ee2:	3307      	adds	r3, #7
 8025ee4:	08db      	lsrs	r3, r3, #3
 8025ee6:	00db      	lsls	r3, r3, #3
 8025ee8:	ebad 0d03 	sub.w	sp, sp, r3
 8025eec:	466b      	mov	r3, sp
 8025eee:	3303      	adds	r3, #3
 8025ef0:	089b      	lsrs	r3, r3, #2
 8025ef2:	009b      	lsls	r3, r3, #2
 8025ef4:	623b      	str	r3, [r7, #32]
 8025ef6:	6a3b      	ldr	r3, [r7, #32]
 8025ef8:	4601      	mov	r1, r0
 8025efa:	4a60      	ldr	r2, [pc, #384]	; (802607c <FlashTest+0x378>)
 8025efc:	601a      	str	r2, [r3, #0]
 8025efe:	3304      	adds	r3, #4
 8025f00:	1e4a      	subs	r2, r1, #1
 8025f02:	495f      	ldr	r1, [pc, #380]	; (8026080 <FlashTest+0x37c>)
 8025f04:	6019      	str	r1, [r3, #0]
 8025f06:	3304      	adds	r3, #4
 8025f08:	1e51      	subs	r1, r2, #1
 8025f0a:	4a5e      	ldr	r2, [pc, #376]	; (8026084 <FlashTest+0x380>)
 8025f0c:	601a      	str	r2, [r3, #0]
 8025f0e:	1d1a      	adds	r2, r3, #4
 8025f10:	1e4b      	subs	r3, r1, #1
 8025f12:	2b00      	cmp	r3, #0
 8025f14:	db05      	blt.n	8025f22 <FlashTest+0x21e>
 8025f16:	f04f 0100 	mov.w	r1, #0
 8025f1a:	6011      	str	r1, [r2, #0]
 8025f1c:	3204      	adds	r2, #4
 8025f1e:	3b01      	subs	r3, #1
 8025f20:	e7f7      	b.n	8025f12 <FlashTest+0x20e>
    uint8_t buff_a[num_of_data] = {0};
 8025f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025f24:	1e58      	subs	r0, r3, #1
 8025f26:	61f8      	str	r0, [r7, #28]
 8025f28:	4603      	mov	r3, r0
 8025f2a:	3301      	adds	r3, #1
 8025f2c:	4619      	mov	r1, r3
 8025f2e:	f04f 0200 	mov.w	r2, #0
 8025f32:	f04f 0300 	mov.w	r3, #0
 8025f36:	f04f 0400 	mov.w	r4, #0
 8025f3a:	00d4      	lsls	r4, r2, #3
 8025f3c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025f40:	00cb      	lsls	r3, r1, #3
 8025f42:	4603      	mov	r3, r0
 8025f44:	3301      	adds	r3, #1
 8025f46:	4619      	mov	r1, r3
 8025f48:	f04f 0200 	mov.w	r2, #0
 8025f4c:	f04f 0300 	mov.w	r3, #0
 8025f50:	f04f 0400 	mov.w	r4, #0
 8025f54:	00d4      	lsls	r4, r2, #3
 8025f56:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8025f5a:	00cb      	lsls	r3, r1, #3
 8025f5c:	4603      	mov	r3, r0
 8025f5e:	3301      	adds	r3, #1
 8025f60:	3307      	adds	r3, #7
 8025f62:	08db      	lsrs	r3, r3, #3
 8025f64:	00db      	lsls	r3, r3, #3
 8025f66:	ebad 0d03 	sub.w	sp, sp, r3
 8025f6a:	466b      	mov	r3, sp
 8025f6c:	3300      	adds	r3, #0
 8025f6e:	61bb      	str	r3, [r7, #24]
 8025f70:	69bb      	ldr	r3, [r7, #24]
 8025f72:	4601      	mov	r1, r0
 8025f74:	2200      	movs	r2, #0
 8025f76:	701a      	strb	r2, [r3, #0]
 8025f78:	1c5a      	adds	r2, r3, #1
 8025f7a:	1e4b      	subs	r3, r1, #1
 8025f7c:	2b00      	cmp	r3, #0
 8025f7e:	db04      	blt.n	8025f8a <FlashTest+0x286>
 8025f80:	2100      	movs	r1, #0
 8025f82:	7011      	strb	r1, [r2, #0]
 8025f84:	3201      	adds	r2, #1
 8025f86:	3b01      	subs	r3, #1
 8025f88:	e7f8      	b.n	8025f7c <FlashTest+0x278>
    uint16_t buff_b[num_of_data] = {0};
 8025f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025f8c:	1e58      	subs	r0, r3, #1
 8025f8e:	6178      	str	r0, [r7, #20]
 8025f90:	4603      	mov	r3, r0
 8025f92:	3301      	adds	r3, #1
 8025f94:	4619      	mov	r1, r3
 8025f96:	f04f 0200 	mov.w	r2, #0
 8025f9a:	f04f 0300 	mov.w	r3, #0
 8025f9e:	f04f 0400 	mov.w	r4, #0
 8025fa2:	0114      	lsls	r4, r2, #4
 8025fa4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025fa8:	010b      	lsls	r3, r1, #4
 8025faa:	4603      	mov	r3, r0
 8025fac:	3301      	adds	r3, #1
 8025fae:	4619      	mov	r1, r3
 8025fb0:	f04f 0200 	mov.w	r2, #0
 8025fb4:	f04f 0300 	mov.w	r3, #0
 8025fb8:	f04f 0400 	mov.w	r4, #0
 8025fbc:	0114      	lsls	r4, r2, #4
 8025fbe:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8025fc2:	010b      	lsls	r3, r1, #4
 8025fc4:	4603      	mov	r3, r0
 8025fc6:	3301      	adds	r3, #1
 8025fc8:	005b      	lsls	r3, r3, #1
 8025fca:	3301      	adds	r3, #1
 8025fcc:	3307      	adds	r3, #7
 8025fce:	08db      	lsrs	r3, r3, #3
 8025fd0:	00db      	lsls	r3, r3, #3
 8025fd2:	ebad 0d03 	sub.w	sp, sp, r3
 8025fd6:	466b      	mov	r3, sp
 8025fd8:	3301      	adds	r3, #1
 8025fda:	085b      	lsrs	r3, r3, #1
 8025fdc:	005b      	lsls	r3, r3, #1
 8025fde:	613b      	str	r3, [r7, #16]
 8025fe0:	693b      	ldr	r3, [r7, #16]
 8025fe2:	4601      	mov	r1, r0
 8025fe4:	2200      	movs	r2, #0
 8025fe6:	801a      	strh	r2, [r3, #0]
 8025fe8:	1c9a      	adds	r2, r3, #2
 8025fea:	1e4b      	subs	r3, r1, #1
 8025fec:	2b00      	cmp	r3, #0
 8025fee:	db04      	blt.n	8025ffa <FlashTest+0x2f6>
 8025ff0:	2100      	movs	r1, #0
 8025ff2:	8011      	strh	r1, [r2, #0]
 8025ff4:	3202      	adds	r2, #2
 8025ff6:	3b01      	subs	r3, #1
 8025ff8:	e7f8      	b.n	8025fec <FlashTest+0x2e8>
    int16_t buff_c[num_of_data] = {0};
 8025ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025ffc:	1e58      	subs	r0, r3, #1
 8025ffe:	60f8      	str	r0, [r7, #12]
 8026000:	4603      	mov	r3, r0
 8026002:	3301      	adds	r3, #1
 8026004:	4619      	mov	r1, r3
 8026006:	f04f 0200 	mov.w	r2, #0
 802600a:	f04f 0300 	mov.w	r3, #0
 802600e:	f04f 0400 	mov.w	r4, #0
 8026012:	0114      	lsls	r4, r2, #4
 8026014:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8026018:	010b      	lsls	r3, r1, #4
 802601a:	4603      	mov	r3, r0
 802601c:	3301      	adds	r3, #1
 802601e:	4619      	mov	r1, r3
 8026020:	f04f 0200 	mov.w	r2, #0
 8026024:	f04f 0300 	mov.w	r3, #0
 8026028:	f04f 0400 	mov.w	r4, #0
 802602c:	0114      	lsls	r4, r2, #4
 802602e:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8026032:	010b      	lsls	r3, r1, #4
 8026034:	4603      	mov	r3, r0
 8026036:	3301      	adds	r3, #1
 8026038:	005b      	lsls	r3, r3, #1
 802603a:	3301      	adds	r3, #1
 802603c:	3307      	adds	r3, #7
 802603e:	08db      	lsrs	r3, r3, #3
 8026040:	00db      	lsls	r3, r3, #3
 8026042:	ebad 0d03 	sub.w	sp, sp, r3
 8026046:	466b      	mov	r3, sp
 8026048:	3301      	adds	r3, #1
 802604a:	085b      	lsrs	r3, r3, #1
 802604c:	005b      	lsls	r3, r3, #1
 802604e:	60bb      	str	r3, [r7, #8]
 8026050:	68bb      	ldr	r3, [r7, #8]
 8026052:	4601      	mov	r1, r0
 8026054:	2200      	movs	r2, #0
 8026056:	801a      	strh	r2, [r3, #0]
 8026058:	1c9a      	adds	r2, r3, #2
 802605a:	1e4b      	subs	r3, r1, #1
 802605c:	2b00      	cmp	r3, #0
 802605e:	db13      	blt.n	8026088 <FlashTest+0x384>
 8026060:	2100      	movs	r1, #0
 8026062:	8011      	strh	r1, [r2, #0]
 8026064:	3202      	adds	r2, #2
 8026066:	3b01      	subs	r3, #1
 8026068:	e7f8      	b.n	802605c <FlashTest+0x358>
 802606a:	bf00      	nop
 802606c:	08004000 	.word	0x08004000
 8026070:	08008000 	.word	0x08008000
 8026074:	0800c000 	.word	0x0800c000
 8026078:	08010000 	.word	0x08010000
 802607c:	3dcccccd 	.word	0x3dcccccd
 8026080:	3e4ccccd 	.word	0x3e4ccccd
 8026084:	3e99999a 	.word	0x3e99999a
    float buff_d[num_of_data] = {0};
 8026088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802608a:	1e58      	subs	r0, r3, #1
 802608c:	6078      	str	r0, [r7, #4]
 802608e:	4603      	mov	r3, r0
 8026090:	3301      	adds	r3, #1
 8026092:	4619      	mov	r1, r3
 8026094:	f04f 0200 	mov.w	r2, #0
 8026098:	f04f 0300 	mov.w	r3, #0
 802609c:	f04f 0400 	mov.w	r4, #0
 80260a0:	0154      	lsls	r4, r2, #5
 80260a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80260a6:	014b      	lsls	r3, r1, #5
 80260a8:	4603      	mov	r3, r0
 80260aa:	3301      	adds	r3, #1
 80260ac:	4619      	mov	r1, r3
 80260ae:	f04f 0200 	mov.w	r2, #0
 80260b2:	f04f 0300 	mov.w	r3, #0
 80260b6:	f04f 0400 	mov.w	r4, #0
 80260ba:	0154      	lsls	r4, r2, #5
 80260bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80260c0:	014b      	lsls	r3, r1, #5
 80260c2:	4603      	mov	r3, r0
 80260c4:	3301      	adds	r3, #1
 80260c6:	009b      	lsls	r3, r3, #2
 80260c8:	3303      	adds	r3, #3
 80260ca:	3307      	adds	r3, #7
 80260cc:	08db      	lsrs	r3, r3, #3
 80260ce:	00db      	lsls	r3, r3, #3
 80260d0:	ebad 0d03 	sub.w	sp, sp, r3
 80260d4:	466b      	mov	r3, sp
 80260d6:	3303      	adds	r3, #3
 80260d8:	089b      	lsrs	r3, r3, #2
 80260da:	009b      	lsls	r3, r3, #2
 80260dc:	603b      	str	r3, [r7, #0]
 80260de:	683b      	ldr	r3, [r7, #0]
 80260e0:	4601      	mov	r1, r0
 80260e2:	f04f 0200 	mov.w	r2, #0
 80260e6:	601a      	str	r2, [r3, #0]
 80260e8:	1d1a      	adds	r2, r3, #4
 80260ea:	1e4b      	subs	r3, r1, #1
 80260ec:	2b00      	cmp	r3, #0
 80260ee:	db05      	blt.n	80260fc <FlashTest+0x3f8>
 80260f0:	f04f 0100 	mov.w	r1, #0
 80260f4:	6011      	str	r1, [r2, #0]
 80260f6:	3204      	adds	r2, #4
 80260f8:	3b01      	subs	r3, #1
 80260fa:	e7f7      	b.n	80260ec <FlashTest+0x3e8>
    if(!flash.Clear()) return 0x01;
 80260fc:	487b      	ldr	r0, [pc, #492]	; (80262ec <FlashTest+0x5e8>)
 80260fe:	f7fa ff07 	bl	8020f10 <_ZN5Flash5ClearEv>
 8026102:	4603      	mov	r3, r0
 8026104:	f083 0301 	eor.w	r3, r3, #1
 8026108:	b2db      	uxtb	r3, r3
 802610a:	2b00      	cmp	r3, #0
 802610c:	d001      	beq.n	8026112 <FlashTest+0x40e>
 802610e:	2301      	movs	r3, #1
 8026110:	e0e6      	b.n	80262e0 <FlashTest+0x5dc>
    if(!flash.CheckBlankByte(address_1, num_of_data)) return 0x02;
 8026112:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8026114:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8026116:	4875      	ldr	r0, [pc, #468]	; (80262ec <FlashTest+0x5e8>)
 8026118:	f7fb f815 	bl	8021146 <_ZN5Flash14CheckBlankByteEmm>
 802611c:	4603      	mov	r3, r0
 802611e:	f083 0301 	eor.w	r3, r3, #1
 8026122:	b2db      	uxtb	r3, r3
 8026124:	2b00      	cmp	r3, #0
 8026126:	d001      	beq.n	802612c <FlashTest+0x428>
 8026128:	2302      	movs	r3, #2
 802612a:	e0d9      	b.n	80262e0 <FlashTest+0x5dc>
    if(!flash.StoreUint8(address_1, a, num_of_data)) return 0x03;
 802612c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802612e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8026130:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8026132:	486e      	ldr	r0, [pc, #440]	; (80262ec <FlashTest+0x5e8>)
 8026134:	f7fa ff20 	bl	8020f78 <_ZN5Flash10StoreUint8EmPhm>
 8026138:	4603      	mov	r3, r0
 802613a:	f083 0301 	eor.w	r3, r3, #1
 802613e:	b2db      	uxtb	r3, r3
 8026140:	2b00      	cmp	r3, #0
 8026142:	d001      	beq.n	8026148 <FlashTest+0x444>
 8026144:	2303      	movs	r3, #3
 8026146:	e0cb      	b.n	80262e0 <FlashTest+0x5dc>
    flash.Load(buff_a, address_1, num_of_data);
 8026148:	69b9      	ldr	r1, [r7, #24]
 802614a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802614c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802614e:	4867      	ldr	r0, [pc, #412]	; (80262ec <FlashTest+0x5e8>)
 8026150:	f7fa ffe8 	bl	8021124 <_ZN5Flash4LoadEPvmm>
    for(i = 0; i < num_of_data; i++) if(a[i] != buff_a[i]) return 0x04;
 8026154:	2300      	movs	r3, #0
 8026156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802615a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802615c:	429a      	cmp	r2, r3
 802615e:	d20f      	bcs.n	8026180 <FlashTest+0x47c>
 8026160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026164:	4413      	add	r3, r2
 8026166:	781a      	ldrb	r2, [r3, #0]
 8026168:	69b9      	ldr	r1, [r7, #24]
 802616a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802616c:	440b      	add	r3, r1
 802616e:	781b      	ldrb	r3, [r3, #0]
 8026170:	429a      	cmp	r2, r3
 8026172:	d001      	beq.n	8026178 <FlashTest+0x474>
 8026174:	2304      	movs	r3, #4
 8026176:	e0b3      	b.n	80262e0 <FlashTest+0x5dc>
 8026178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802617a:	3301      	adds	r3, #1
 802617c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802617e:	e7eb      	b.n	8026158 <FlashTest+0x454>
    if(!flash.CheckBlankHalfword(address_2, num_of_data)) return 0x05;
 8026180:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8026182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8026184:	4859      	ldr	r0, [pc, #356]	; (80262ec <FlashTest+0x5e8>)
 8026186:	f7fb f82b 	bl	80211e0 <_ZN5Flash18CheckBlankHalfwordEmm>
 802618a:	4603      	mov	r3, r0
 802618c:	f083 0301 	eor.w	r3, r3, #1
 8026190:	b2db      	uxtb	r3, r3
 8026192:	2b00      	cmp	r3, #0
 8026194:	d001      	beq.n	802619a <FlashTest+0x496>
 8026196:	2305      	movs	r3, #5
 8026198:	e0a2      	b.n	80262e0 <FlashTest+0x5dc>
    if(!flash.StoreUint16(address_2, b, num_of_data)) return 0x06;
 802619a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802619c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802619e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80261a0:	4852      	ldr	r0, [pc, #328]	; (80262ec <FlashTest+0x5e8>)
 80261a2:	f7fa ff1d 	bl	8020fe0 <_ZN5Flash11StoreUint16EmPtm>
 80261a6:	4603      	mov	r3, r0
 80261a8:	f083 0301 	eor.w	r3, r3, #1
 80261ac:	b2db      	uxtb	r3, r3
 80261ae:	2b00      	cmp	r3, #0
 80261b0:	d001      	beq.n	80261b6 <FlashTest+0x4b2>
 80261b2:	2306      	movs	r3, #6
 80261b4:	e094      	b.n	80262e0 <FlashTest+0x5dc>
    flash.Load(buff_b, address_2, num_of_data*2);
 80261b6:	6939      	ldr	r1, [r7, #16]
 80261b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80261ba:	005b      	lsls	r3, r3, #1
 80261bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80261be:	484b      	ldr	r0, [pc, #300]	; (80262ec <FlashTest+0x5e8>)
 80261c0:	f7fa ffb0 	bl	8021124 <_ZN5Flash4LoadEPvmm>
    for(i = 0; i < num_of_data; i++) if(b[i] != buff_b[i]) return 0x07;
 80261c4:	2300      	movs	r3, #0
 80261c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80261c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80261ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80261cc:	429a      	cmp	r2, r3
 80261ce:	d20f      	bcs.n	80261f0 <FlashTest+0x4ec>
 80261d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80261d4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80261d8:	693b      	ldr	r3, [r7, #16]
 80261da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80261dc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80261e0:	429a      	cmp	r2, r3
 80261e2:	d001      	beq.n	80261e8 <FlashTest+0x4e4>
 80261e4:	2307      	movs	r3, #7
 80261e6:	e07b      	b.n	80262e0 <FlashTest+0x5dc>
 80261e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80261ea:	3301      	adds	r3, #1
 80261ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80261ee:	e7eb      	b.n	80261c8 <FlashTest+0x4c4>
    if(!flash.CheckBlankHalfword(address_3, num_of_data)) return 0x08;
 80261f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80261f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80261f4:	483d      	ldr	r0, [pc, #244]	; (80262ec <FlashTest+0x5e8>)
 80261f6:	f7fa fff3 	bl	80211e0 <_ZN5Flash18CheckBlankHalfwordEmm>
 80261fa:	4603      	mov	r3, r0
 80261fc:	f083 0301 	eor.w	r3, r3, #1
 8026200:	b2db      	uxtb	r3, r3
 8026202:	2b00      	cmp	r3, #0
 8026204:	d001      	beq.n	802620a <FlashTest+0x506>
 8026206:	2308      	movs	r3, #8
 8026208:	e06a      	b.n	80262e0 <FlashTest+0x5dc>
    if(!flash.StoreInt16(address_3, c, num_of_data)) return 0x09;
 802620a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802620c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802620e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8026210:	4836      	ldr	r0, [pc, #216]	; (80262ec <FlashTest+0x5e8>)
 8026212:	f7fa ff1a 	bl	802104a <_ZN5Flash10StoreInt16EmPsm>
 8026216:	4603      	mov	r3, r0
 8026218:	f083 0301 	eor.w	r3, r3, #1
 802621c:	b2db      	uxtb	r3, r3
 802621e:	2b00      	cmp	r3, #0
 8026220:	d001      	beq.n	8026226 <FlashTest+0x522>
 8026222:	2309      	movs	r3, #9
 8026224:	e05c      	b.n	80262e0 <FlashTest+0x5dc>
    flash.Load(buff_c, address_3, num_of_data*2);
 8026226:	68b9      	ldr	r1, [r7, #8]
 8026228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802622a:	005b      	lsls	r3, r3, #1
 802622c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802622e:	482f      	ldr	r0, [pc, #188]	; (80262ec <FlashTest+0x5e8>)
 8026230:	f7fa ff78 	bl	8021124 <_ZN5Flash4LoadEPvmm>
    for(i = 0; i < num_of_data; i++) if(c[i] != buff_c[i]) return 0x0A;
 8026234:	2300      	movs	r3, #0
 8026236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802623a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802623c:	429a      	cmp	r2, r3
 802623e:	d20f      	bcs.n	8026260 <FlashTest+0x55c>
 8026240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026242:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8026244:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8026248:	68bb      	ldr	r3, [r7, #8]
 802624a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802624c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8026250:	429a      	cmp	r2, r3
 8026252:	d001      	beq.n	8026258 <FlashTest+0x554>
 8026254:	230a      	movs	r3, #10
 8026256:	e043      	b.n	80262e0 <FlashTest+0x5dc>
 8026258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802625a:	3301      	adds	r3, #1
 802625c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802625e:	e7eb      	b.n	8026238 <FlashTest+0x534>
    if(!flash.CheckBlankWord(address_4, num_of_data)) return 0x0B;
 8026260:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8026262:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8026264:	4821      	ldr	r0, [pc, #132]	; (80262ec <FlashTest+0x5e8>)
 8026266:	f7fb f80f 	bl	8021288 <_ZN5Flash14CheckBlankWordEmm>
 802626a:	4603      	mov	r3, r0
 802626c:	f083 0301 	eor.w	r3, r3, #1
 8026270:	b2db      	uxtb	r3, r3
 8026272:	2b00      	cmp	r3, #0
 8026274:	d001      	beq.n	802627a <FlashTest+0x576>
 8026276:	230b      	movs	r3, #11
 8026278:	e032      	b.n	80262e0 <FlashTest+0x5dc>
    if(!flash.StoreFloat(address_4, d, num_of_data)) return 0x0C;
 802627a:	6a3a      	ldr	r2, [r7, #32]
 802627c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802627e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8026280:	481a      	ldr	r0, [pc, #104]	; (80262ec <FlashTest+0x5e8>)
 8026282:	f7fa ff18 	bl	80210b6 <_ZN5Flash10StoreFloatEmPfm>
 8026286:	4603      	mov	r3, r0
 8026288:	f083 0301 	eor.w	r3, r3, #1
 802628c:	b2db      	uxtb	r3, r3
 802628e:	2b00      	cmp	r3, #0
 8026290:	d001      	beq.n	8026296 <FlashTest+0x592>
 8026292:	230c      	movs	r3, #12
 8026294:	e024      	b.n	80262e0 <FlashTest+0x5dc>
    flash.Load(buff_d, address_4, num_of_data*4);
 8026296:	6839      	ldr	r1, [r7, #0]
 8026298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802629a:	009b      	lsls	r3, r3, #2
 802629c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802629e:	4813      	ldr	r0, [pc, #76]	; (80262ec <FlashTest+0x5e8>)
 80262a0:	f7fa ff40 	bl	8021124 <_ZN5Flash4LoadEPvmm>
    for(i = 0; i < num_of_data; i++) if(d[i] != buff_d[i]) return 0x0D;
 80262a4:	2300      	movs	r3, #0
 80262a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80262a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80262aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80262ac:	429a      	cmp	r2, r3
 80262ae:	d216      	bcs.n	80262de <FlashTest+0x5da>
 80262b0:	6a3a      	ldr	r2, [r7, #32]
 80262b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80262b4:	009b      	lsls	r3, r3, #2
 80262b6:	4413      	add	r3, r2
 80262b8:	ed93 7a00 	vldr	s14, [r3]
 80262bc:	683a      	ldr	r2, [r7, #0]
 80262be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80262c0:	009b      	lsls	r3, r3, #2
 80262c2:	4413      	add	r3, r2
 80262c4:	edd3 7a00 	vldr	s15, [r3]
 80262c8:	eeb4 7a67 	vcmp.f32	s14, s15
 80262cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80262d0:	d001      	beq.n	80262d6 <FlashTest+0x5d2>
 80262d2:	230d      	movs	r3, #13
 80262d4:	e004      	b.n	80262e0 <FlashTest+0x5dc>
 80262d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80262d8:	3301      	adds	r3, #1
 80262da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80262dc:	e7e4      	b.n	80262a8 <FlashTest+0x5a4>
    return 0x0E;
 80262de:	230e      	movs	r3, #14
 80262e0:	46ad      	mov	sp, r5
}
 80262e2:	4618      	mov	r0, r3
 80262e4:	3758      	adds	r7, #88	; 0x58
 80262e6:	46bd      	mov	sp, r7
 80262e8:	bdb0      	pop	{r4, r5, r7, pc}
 80262ea:	bf00      	nop
 80262ec:	20000358 	.word	0x20000358

080262f0 <InitialTest>:

void InitialTest()
{
 80262f0:	b580      	push	{r7, lr}
 80262f2:	af00      	add	r7, sp, #0
    /* Line sensor */
    line_sensor.UpdateAdcValues();
 80262f4:	485c      	ldr	r0, [pc, #368]	; (8026468 <InitialTest+0x178>)
 80262f6:	f7fb fd89 	bl	8021e0c <_ZN10LineSensor15UpdateAdcValuesEv>
    line_sensor.MonitorArrays();
 80262fa:	485b      	ldr	r0, [pc, #364]	; (8026468 <InitialTest+0x178>)
 80262fc:	f7fb ff14 	bl	8022128 <_ZN10LineSensor13MonitorArraysEv>
    g_line_diff = line_sensor.LeftRightDifference();
 8026300:	4859      	ldr	r0, [pc, #356]	; (8026468 <InitialTest+0x178>)
 8026302:	f7fb fe51 	bl	8021fa8 <_ZN10LineSensor19LeftRightDifferenceEv>
 8026306:	eef0 7a40 	vmov.f32	s15, s0
 802630a:	4b58      	ldr	r3, [pc, #352]	; (802646c <InitialTest+0x17c>)
 802630c:	edc3 7a00 	vstr	s15, [r3]
    g_line_emer = line_sensor.GetEmergencyStopFlag();
 8026310:	4855      	ldr	r0, [pc, #340]	; (8026468 <InitialTest+0x178>)
 8026312:	f7fb fe3b 	bl	8021f8c <_ZN10LineSensor20GetEmergencyStopFlagEv>
 8026316:	4603      	mov	r3, r0
 8026318:	461a      	mov	r2, r3
 802631a:	4b55      	ldr	r3, [pc, #340]	; (8026470 <InitialTest+0x180>)
 802631c:	701a      	strb	r2, [r3, #0]
    g_line_calib = line_sensor.CheckCalibration();
 802631e:	4852      	ldr	r0, [pc, #328]	; (8026468 <InitialTest+0x178>)
 8026320:	f7fb fea2 	bl	8022068 <_ZN10LineSensor16CheckCalibrationEv>
 8026324:	4603      	mov	r3, r0
 8026326:	461a      	mov	r2, r3
 8026328:	4b52      	ldr	r3, [pc, #328]	; (8026474 <InitialTest+0x184>)
 802632a:	701a      	strb	r2, [r3, #0]

    /* Side seneor */
    side_sensor.IgnoreJudgment();
 802632c:	4852      	ldr	r0, [pc, #328]	; (8026478 <InitialTest+0x188>)
 802632e:	f7fd ff9b 	bl	8024268 <_ZN10SideSensor14IgnoreJudgmentEv>
    g_goal_cnt = side_sensor.GetGoalMarkerCount();
 8026332:	4851      	ldr	r0, [pc, #324]	; (8026478 <InitialTest+0x188>)
 8026334:	f7fe f9c2 	bl	80246bc <_ZN10SideSensor18GetGoalMarkerCountEv>
 8026338:	4603      	mov	r3, r0
 802633a:	461a      	mov	r2, r3
 802633c:	4b4f      	ldr	r3, [pc, #316]	; (802647c <InitialTest+0x18c>)
 802633e:	701a      	strb	r2, [r3, #0]
    g_corner_cnt = side_sensor.GetCornerMarkerCount();
 8026340:	484d      	ldr	r0, [pc, #308]	; (8026478 <InitialTest+0x188>)
 8026342:	f7fe f9c9 	bl	80246d8 <_ZN10SideSensor20GetCornerMarkerCountEv>
 8026346:	4603      	mov	r3, r0
 8026348:	461a      	mov	r2, r3
 802634a:	4b4d      	ldr	r3, [pc, #308]	; (8026480 <InitialTest+0x190>)
 802634c:	701a      	strb	r2, [r3, #0]
    g_cross_cnt = side_sensor.GetCrossLineCount();
 802634e:	484a      	ldr	r0, [pc, #296]	; (8026478 <InitialTest+0x188>)
 8026350:	f7fe f9ce 	bl	80246f0 <_ZN10SideSensor17GetCrossLineCountEv>
 8026354:	4603      	mov	r3, r0
 8026356:	461a      	mov	r2, r3
 8026358:	4b4a      	ldr	r3, [pc, #296]	; (8026484 <InitialTest+0x194>)
 802635a:	701a      	strb	r2, [r3, #0]

    /* IMU */
    iim_42652.Update();
 802635c:	484a      	ldr	r0, [pc, #296]	; (8026488 <InitialTest+0x198>)
 802635e:	f7fb f957 	bl	8021610 <_ZN8Iim426526UpdateEv>
    g_deg_stack_z = iim_42652.GetDegreeStackZ();
 8026362:	4849      	ldr	r0, [pc, #292]	; (8026488 <InitialTest+0x198>)
 8026364:	f7fb f9bc 	bl	80216e0 <_ZN8Iim4265215GetDegreeStackZEv>
 8026368:	eeb0 7a40 	vmov.f32	s14, s0
 802636c:	eef0 7a60 	vmov.f32	s15, s1
 8026370:	4b46      	ldr	r3, [pc, #280]	; (802648c <InitialTest+0x19c>)
 8026372:	ed83 7b00 	vstr	d7, [r3]
    g_gyro_x_l = iim_42652.GyroXLeft();
 8026376:	4844      	ldr	r0, [pc, #272]	; (8026488 <InitialTest+0x198>)
 8026378:	f7fb f9c3 	bl	8021702 <_ZN8Iim426529GyroXLeftEv>
 802637c:	4603      	mov	r3, r0
 802637e:	461a      	mov	r2, r3
 8026380:	4b43      	ldr	r3, [pc, #268]	; (8026490 <InitialTest+0x1a0>)
 8026382:	801a      	strh	r2, [r3, #0]
    g_gyro_x_r = iim_42652.GyroXRight();
 8026384:	4840      	ldr	r0, [pc, #256]	; (8026488 <InitialTest+0x198>)
 8026386:	f7fb f9cb 	bl	8021720 <_ZN8Iim4265210GyroXRightEv>
 802638a:	4603      	mov	r3, r0
 802638c:	461a      	mov	r2, r3
 802638e:	4b41      	ldr	r3, [pc, #260]	; (8026494 <InitialTest+0x1a4>)
 8026390:	801a      	strh	r2, [r3, #0]
    g_gyro_y_l = iim_42652.GyroYLeft();
 8026392:	483d      	ldr	r0, [pc, #244]	; (8026488 <InitialTest+0x198>)
 8026394:	f7fb f9d3 	bl	802173e <_ZN8Iim426529GyroYLeftEv>
 8026398:	4603      	mov	r3, r0
 802639a:	461a      	mov	r2, r3
 802639c:	4b3e      	ldr	r3, [pc, #248]	; (8026498 <InitialTest+0x1a8>)
 802639e:	801a      	strh	r2, [r3, #0]
    g_gyro_y_r = iim_42652.GyroYRight();
 80263a0:	4839      	ldr	r0, [pc, #228]	; (8026488 <InitialTest+0x198>)
 80263a2:	f7fb f9db 	bl	802175c <_ZN8Iim4265210GyroYRightEv>
 80263a6:	4603      	mov	r3, r0
 80263a8:	461a      	mov	r2, r3
 80263aa:	4b3c      	ldr	r3, [pc, #240]	; (802649c <InitialTest+0x1ac>)
 80263ac:	801a      	strh	r2, [r3, #0]
    g_gyro_z_l = iim_42652.GyroZLeft();
 80263ae:	4836      	ldr	r0, [pc, #216]	; (8026488 <InitialTest+0x198>)
 80263b0:	f7fb f9e3 	bl	802177a <_ZN8Iim426529GyroZLeftEv>
 80263b4:	4603      	mov	r3, r0
 80263b6:	461a      	mov	r2, r3
 80263b8:	4b39      	ldr	r3, [pc, #228]	; (80264a0 <InitialTest+0x1b0>)
 80263ba:	801a      	strh	r2, [r3, #0]
    g_gyro_z_r = iim_42652.GyroZRight();
 80263bc:	4832      	ldr	r0, [pc, #200]	; (8026488 <InitialTest+0x198>)
 80263be:	f7fb f9eb 	bl	8021798 <_ZN8Iim4265210GyroZRightEv>
 80263c2:	4603      	mov	r3, r0
 80263c4:	461a      	mov	r2, r3
 80263c6:	4b37      	ldr	r3, [pc, #220]	; (80264a4 <InitialTest+0x1b4>)
 80263c8:	801a      	strh	r2, [r3, #0]
    g_accel_x_l = iim_42652.AccelXLeft();
 80263ca:	482f      	ldr	r0, [pc, #188]	; (8026488 <InitialTest+0x198>)
 80263cc:	f7fb f9f3 	bl	80217b6 <_ZN8Iim4265210AccelXLeftEv>
 80263d0:	4603      	mov	r3, r0
 80263d2:	461a      	mov	r2, r3
 80263d4:	4b34      	ldr	r3, [pc, #208]	; (80264a8 <InitialTest+0x1b8>)
 80263d6:	801a      	strh	r2, [r3, #0]
    g_accel_x_r = iim_42652.AccelXRight();
 80263d8:	482b      	ldr	r0, [pc, #172]	; (8026488 <InitialTest+0x198>)
 80263da:	f7fb f9fb 	bl	80217d4 <_ZN8Iim4265211AccelXRightEv>
 80263de:	4603      	mov	r3, r0
 80263e0:	461a      	mov	r2, r3
 80263e2:	4b32      	ldr	r3, [pc, #200]	; (80264ac <InitialTest+0x1bc>)
 80263e4:	801a      	strh	r2, [r3, #0]
    g_accel_y_l = iim_42652.AccelYLeft();
 80263e6:	4828      	ldr	r0, [pc, #160]	; (8026488 <InitialTest+0x198>)
 80263e8:	f7fb fa03 	bl	80217f2 <_ZN8Iim4265210AccelYLeftEv>
 80263ec:	4603      	mov	r3, r0
 80263ee:	461a      	mov	r2, r3
 80263f0:	4b2f      	ldr	r3, [pc, #188]	; (80264b0 <InitialTest+0x1c0>)
 80263f2:	801a      	strh	r2, [r3, #0]
    g_accel_y_r = iim_42652.AccelYRight();
 80263f4:	4824      	ldr	r0, [pc, #144]	; (8026488 <InitialTest+0x198>)
 80263f6:	f7fb fa0b 	bl	8021810 <_ZN8Iim4265211AccelYRightEv>
 80263fa:	4603      	mov	r3, r0
 80263fc:	461a      	mov	r2, r3
 80263fe:	4b2d      	ldr	r3, [pc, #180]	; (80264b4 <InitialTest+0x1c4>)
 8026400:	801a      	strh	r2, [r3, #0]
    g_accel_z_l = iim_42652.AccelZLeft();
 8026402:	4821      	ldr	r0, [pc, #132]	; (8026488 <InitialTest+0x198>)
 8026404:	f7fb fa13 	bl	802182e <_ZN8Iim4265210AccelZLeftEv>
 8026408:	4603      	mov	r3, r0
 802640a:	461a      	mov	r2, r3
 802640c:	4b2a      	ldr	r3, [pc, #168]	; (80264b8 <InitialTest+0x1c8>)
 802640e:	801a      	strh	r2, [r3, #0]
    g_accel_z_r = iim_42652.AccelZRight();
 8026410:	481d      	ldr	r0, [pc, #116]	; (8026488 <InitialTest+0x198>)
 8026412:	f7fb fa1b 	bl	802184c <_ZN8Iim4265211AccelZRightEv>
 8026416:	4603      	mov	r3, r0
 8026418:	461a      	mov	r2, r3
 802641a:	4b28      	ldr	r3, [pc, #160]	; (80264bc <InitialTest+0x1cc>)
 802641c:	801a      	strh	r2, [r3, #0]

    /* Encoder */
    encoder.Update();
 802641e:	4828      	ldr	r0, [pc, #160]	; (80264c0 <InitialTest+0x1d0>)
 8026420:	f7fa fca6 	bl	8020d70 <_ZN7Encoder6UpdateEv>
    g_distance = encoder.GetDistance();
 8026424:	4826      	ldr	r0, [pc, #152]	; (80264c0 <InitialTest+0x1d0>)
 8026426:	f7fa fd35 	bl	8020e94 <_ZN7Encoder11GetDistanceEv>
 802642a:	eef0 7a40 	vmov.f32	s15, s0
 802642e:	4b25      	ldr	r3, [pc, #148]	; (80264c4 <InitialTest+0x1d4>)
 8026430:	edc3 7a00 	vstr	s15, [r3]
    g_distance_stack = encoder.GetDistanceStack();
 8026434:	4822      	ldr	r0, [pc, #136]	; (80264c0 <InitialTest+0x1d0>)
 8026436:	f7fa fd3c 	bl	8020eb2 <_ZN7Encoder16GetDistanceStackEv>
 802643a:	eef0 7a40 	vmov.f32	s15, s0
 802643e:	4b22      	ldr	r3, [pc, #136]	; (80264c8 <InitialTest+0x1d8>)
 8026440:	edc3 7a00 	vstr	s15, [r3]
    g_distance_diff = encoder.AngularVelocity();
 8026444:	481e      	ldr	r0, [pc, #120]	; (80264c0 <InitialTest+0x1d0>)
 8026446:	f7fa fd43 	bl	8020ed0 <_ZN7Encoder15AngularVelocityEv>
 802644a:	eef0 7a40 	vmov.f32	s15, s0
 802644e:	4b1f      	ldr	r3, [pc, #124]	; (80264cc <InitialTest+0x1dc>)
 8026450:	edc3 7a00 	vstr	s15, [r3]

    /* Motor */
    motor.Drive(INIT_DEBUG_MOTOR_DUTY, 0);
 8026454:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80264d0 <InitialTest+0x1e0>
 8026458:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80264d0 <InitialTest+0x1e0>
 802645c:	481d      	ldr	r0, [pc, #116]	; (80264d4 <InitialTest+0x1e4>)
 802645e:	f7fd fcbb 	bl	8023dd8 <_ZN5Motor5DriveEff>
}
 8026462:	bf00      	nop
 8026464:	bd80      	pop	{r7, pc}
 8026466:	bf00      	nop
 8026468:	2000036c 	.word	0x2000036c
 802646c:	20000248 	.word	0x20000248
 8026470:	2000024c 	.word	0x2000024c
 8026474:	20000324 	.word	0x20000324
 8026478:	20000798 	.word	0x20000798
 802647c:	20000325 	.word	0x20000325
 8026480:	2000024e 	.word	0x2000024e
 8026484:	2000024f 	.word	0x2000024f
 8026488:	20000360 	.word	0x20000360
 802648c:	20000270 	.word	0x20000270
 8026490:	20000280 	.word	0x20000280
 8026494:	20000282 	.word	0x20000282
 8026498:	20000284 	.word	0x20000284
 802649c:	20000286 	.word	0x20000286
 80264a0:	20000288 	.word	0x20000288
 80264a4:	2000028a 	.word	0x2000028a
 80264a8:	2000028c 	.word	0x2000028c
 80264ac:	2000028e 	.word	0x2000028e
 80264b0:	20000290 	.word	0x20000290
 80264b4:	20000292 	.word	0x20000292
 80264b8:	20000294 	.word	0x20000294
 80264bc:	20000296 	.word	0x20000296
 80264c0:	2000034c 	.word	0x2000034c
 80264c4:	200002a4 	.word	0x200002a4
 80264c8:	200002a8 	.word	0x200002a8
 80264cc:	200002ac 	.word	0x200002ac
 80264d0:	00000000 	.word	0x00000000
 80264d4:	20000790 	.word	0x20000790

080264d8 <_Z41__static_initialization_and_destruction_0ii>:
}

void ImuWriteByte(uint8_t send_address, uint8_t send_data, char imu_ic_lr)
{
    iim_42652.Write(send_address, send_data, imu_ic_lr);
}
 80264d8:	b580      	push	{r7, lr}
 80264da:	b082      	sub	sp, #8
 80264dc:	af00      	add	r7, sp, #0
 80264de:	6078      	str	r0, [r7, #4]
 80264e0:	6039      	str	r1, [r7, #0]
 80264e2:	687b      	ldr	r3, [r7, #4]
 80264e4:	2b01      	cmp	r3, #1
 80264e6:	d11c      	bne.n	8026522 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 80264e8:	683b      	ldr	r3, [r7, #0]
 80264ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80264ee:	4293      	cmp	r3, r2
 80264f0:	d117      	bne.n	8026522 <_Z41__static_initialization_and_destruction_0ii+0x4a>
Encoder encoder;
 80264f2:	480e      	ldr	r0, [pc, #56]	; (802652c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80264f4:	f7fa fc0e 	bl	8020d14 <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 80264f8:	480d      	ldr	r0, [pc, #52]	; (8026530 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80264fa:	f7fa ff18 	bl	802132e <_ZN8Iim42652C1Ev>
LineSensor line_sensor;
 80264fe:	480d      	ldr	r0, [pc, #52]	; (8026534 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8026500:	f7fb fb01 	bl	8021b06 <_ZN10LineSensorC1Ev>
LineTrace line_trace;
 8026504:	480c      	ldr	r0, [pc, #48]	; (8026538 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8026506:	f7fb fe4f 	bl	80221a8 <_ZN9LineTraceC1Ev>
Logger logger;
 802650a:	480c      	ldr	r0, [pc, #48]	; (802653c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 802650c:	f7fb ff40 	bl	8022390 <_ZN6LoggerC1Ev>
Motor motor;
 8026510:	480b      	ldr	r0, [pc, #44]	; (8026540 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8026512:	f7fd fc2d 	bl	8023d70 <_ZN5MotorC1Ev>
SideSensor side_sensor;
 8026516:	480b      	ldr	r0, [pc, #44]	; (8026544 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8026518:	f7fd fde8 	bl	80240ec <_ZN10SideSensorC1Ev>
VelocityControl velocity_control;
 802651c:	480a      	ldr	r0, [pc, #40]	; (8026548 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 802651e:	f7fe fca7 	bl	8024e70 <_ZN15VelocityControlC1Ev>
}
 8026522:	bf00      	nop
 8026524:	3708      	adds	r7, #8
 8026526:	46bd      	mov	sp, r7
 8026528:	bd80      	pop	{r7, pc}
 802652a:	bf00      	nop
 802652c:	2000034c 	.word	0x2000034c
 8026530:	20000360 	.word	0x20000360
 8026534:	2000036c 	.word	0x2000036c
 8026538:	200004f8 	.word	0x200004f8
 802653c:	20000688 	.word	0x20000688
 8026540:	20000790 	.word	0x20000790
 8026544:	20000798 	.word	0x20000798
 8026548:	200007a0 	.word	0x200007a0

0802654c <_GLOBAL__sub_I_encoder>:
 802654c:	b580      	push	{r7, lr}
 802654e:	af00      	add	r7, sp, #0
 8026550:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8026554:	2001      	movs	r0, #1
 8026556:	f7ff ffbf 	bl	80264d8 <_Z41__static_initialization_and_destruction_0ii>
 802655a:	bd80      	pop	{r7, pc}

0802655c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 802655c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8026594 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8026560:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8026562:	e003      	b.n	802656c <LoopCopyDataInit>

08026564 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8026564:	4b0c      	ldr	r3, [pc, #48]	; (8026598 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8026566:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8026568:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 802656a:	3104      	adds	r1, #4

0802656c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 802656c:	480b      	ldr	r0, [pc, #44]	; (802659c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 802656e:	4b0c      	ldr	r3, [pc, #48]	; (80265a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8026570:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8026572:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8026574:	d3f6      	bcc.n	8026564 <CopyDataInit>
  ldr  r2, =_sbss
 8026576:	4a0b      	ldr	r2, [pc, #44]	; (80265a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8026578:	e002      	b.n	8026580 <LoopFillZerobss>

0802657a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 802657a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 802657c:	f842 3b04 	str.w	r3, [r2], #4

08026580 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8026580:	4b09      	ldr	r3, [pc, #36]	; (80265a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8026582:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8026584:	d3f9      	bcc.n	802657a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8026586:	f7fe fc5d 	bl	8024e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802658a:	f003 fdb9 	bl	802a100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802658e:	f7fc fdcb 	bl	8023128 <main>
  bx  lr    
 8026592:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8026594:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8026598:	0802a1b4 	.word	0x0802a1b4
  ldr  r0, =_sdata
 802659c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80265a0:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 80265a4:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 80265a8:	20000b50 	.word	0x20000b50

080265ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80265ac:	e7fe      	b.n	80265ac <ADC_IRQHandler>
	...

080265b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80265b0:	b580      	push	{r7, lr}
 80265b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80265b4:	4b0e      	ldr	r3, [pc, #56]	; (80265f0 <HAL_Init+0x40>)
 80265b6:	681b      	ldr	r3, [r3, #0]
 80265b8:	4a0d      	ldr	r2, [pc, #52]	; (80265f0 <HAL_Init+0x40>)
 80265ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80265be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80265c0:	4b0b      	ldr	r3, [pc, #44]	; (80265f0 <HAL_Init+0x40>)
 80265c2:	681b      	ldr	r3, [r3, #0]
 80265c4:	4a0a      	ldr	r2, [pc, #40]	; (80265f0 <HAL_Init+0x40>)
 80265c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80265ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80265cc:	4b08      	ldr	r3, [pc, #32]	; (80265f0 <HAL_Init+0x40>)
 80265ce:	681b      	ldr	r3, [r3, #0]
 80265d0:	4a07      	ldr	r2, [pc, #28]	; (80265f0 <HAL_Init+0x40>)
 80265d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80265d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80265d8:	2003      	movs	r0, #3
 80265da:	f000 fd41 	bl	8027060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80265de:	2000      	movs	r0, #0
 80265e0:	f000 f808 	bl	80265f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80265e4:	f7fe f890 	bl	8024708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80265e8:	2300      	movs	r3, #0
}
 80265ea:	4618      	mov	r0, r3
 80265ec:	bd80      	pop	{r7, pc}
 80265ee:	bf00      	nop
 80265f0:	40023c00 	.word	0x40023c00

080265f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80265f4:	b580      	push	{r7, lr}
 80265f6:	b082      	sub	sp, #8
 80265f8:	af00      	add	r7, sp, #0
 80265fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80265fc:	4b12      	ldr	r3, [pc, #72]	; (8026648 <HAL_InitTick+0x54>)
 80265fe:	681a      	ldr	r2, [r3, #0]
 8026600:	4b12      	ldr	r3, [pc, #72]	; (802664c <HAL_InitTick+0x58>)
 8026602:	781b      	ldrb	r3, [r3, #0]
 8026604:	4619      	mov	r1, r3
 8026606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802660a:	fbb3 f3f1 	udiv	r3, r3, r1
 802660e:	fbb2 f3f3 	udiv	r3, r2, r3
 8026612:	4618      	mov	r0, r3
 8026614:	f000 fd59 	bl	80270ca <HAL_SYSTICK_Config>
 8026618:	4603      	mov	r3, r0
 802661a:	2b00      	cmp	r3, #0
 802661c:	d001      	beq.n	8026622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 802661e:	2301      	movs	r3, #1
 8026620:	e00e      	b.n	8026640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8026622:	687b      	ldr	r3, [r7, #4]
 8026624:	2b0f      	cmp	r3, #15
 8026626:	d80a      	bhi.n	802663e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8026628:	2200      	movs	r2, #0
 802662a:	6879      	ldr	r1, [r7, #4]
 802662c:	f04f 30ff 	mov.w	r0, #4294967295
 8026630:	f000 fd21 	bl	8027076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8026634:	4a06      	ldr	r2, [pc, #24]	; (8026650 <HAL_InitTick+0x5c>)
 8026636:	687b      	ldr	r3, [r7, #4]
 8026638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802663a:	2300      	movs	r3, #0
 802663c:	e000      	b.n	8026640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 802663e:	2301      	movs	r3, #1
}
 8026640:	4618      	mov	r0, r3
 8026642:	3708      	adds	r7, #8
 8026644:	46bd      	mov	sp, r7
 8026646:	bd80      	pop	{r7, pc}
 8026648:	20000010 	.word	0x20000010
 802664c:	20000018 	.word	0x20000018
 8026650:	20000014 	.word	0x20000014

08026654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8026654:	b480      	push	{r7}
 8026656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8026658:	4b06      	ldr	r3, [pc, #24]	; (8026674 <HAL_IncTick+0x20>)
 802665a:	781b      	ldrb	r3, [r3, #0]
 802665c:	461a      	mov	r2, r3
 802665e:	4b06      	ldr	r3, [pc, #24]	; (8026678 <HAL_IncTick+0x24>)
 8026660:	681b      	ldr	r3, [r3, #0]
 8026662:	4413      	add	r3, r2
 8026664:	4a04      	ldr	r2, [pc, #16]	; (8026678 <HAL_IncTick+0x24>)
 8026666:	6013      	str	r3, [r2, #0]
}
 8026668:	bf00      	nop
 802666a:	46bd      	mov	sp, r7
 802666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026670:	4770      	bx	lr
 8026672:	bf00      	nop
 8026674:	20000018 	.word	0x20000018
 8026678:	20000b2c 	.word	0x20000b2c

0802667c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802667c:	b480      	push	{r7}
 802667e:	af00      	add	r7, sp, #0
  return uwTick;
 8026680:	4b03      	ldr	r3, [pc, #12]	; (8026690 <HAL_GetTick+0x14>)
 8026682:	681b      	ldr	r3, [r3, #0]
}
 8026684:	4618      	mov	r0, r3
 8026686:	46bd      	mov	sp, r7
 8026688:	f85d 7b04 	ldr.w	r7, [sp], #4
 802668c:	4770      	bx	lr
 802668e:	bf00      	nop
 8026690:	20000b2c 	.word	0x20000b2c

08026694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8026694:	b580      	push	{r7, lr}
 8026696:	b084      	sub	sp, #16
 8026698:	af00      	add	r7, sp, #0
 802669a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802669c:	f7ff ffee 	bl	802667c <HAL_GetTick>
 80266a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80266a2:	687b      	ldr	r3, [r7, #4]
 80266a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80266a6:	68fb      	ldr	r3, [r7, #12]
 80266a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80266ac:	d005      	beq.n	80266ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80266ae:	4b09      	ldr	r3, [pc, #36]	; (80266d4 <HAL_Delay+0x40>)
 80266b0:	781b      	ldrb	r3, [r3, #0]
 80266b2:	461a      	mov	r2, r3
 80266b4:	68fb      	ldr	r3, [r7, #12]
 80266b6:	4413      	add	r3, r2
 80266b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80266ba:	bf00      	nop
 80266bc:	f7ff ffde 	bl	802667c <HAL_GetTick>
 80266c0:	4602      	mov	r2, r0
 80266c2:	68bb      	ldr	r3, [r7, #8]
 80266c4:	1ad3      	subs	r3, r2, r3
 80266c6:	68fa      	ldr	r2, [r7, #12]
 80266c8:	429a      	cmp	r2, r3
 80266ca:	d8f7      	bhi.n	80266bc <HAL_Delay+0x28>
  {
  }
}
 80266cc:	bf00      	nop
 80266ce:	3710      	adds	r7, #16
 80266d0:	46bd      	mov	sp, r7
 80266d2:	bd80      	pop	{r7, pc}
 80266d4:	20000018 	.word	0x20000018

080266d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80266d8:	b580      	push	{r7, lr}
 80266da:	b084      	sub	sp, #16
 80266dc:	af00      	add	r7, sp, #0
 80266de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80266e0:	2300      	movs	r3, #0
 80266e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80266e4:	687b      	ldr	r3, [r7, #4]
 80266e6:	2b00      	cmp	r3, #0
 80266e8:	d101      	bne.n	80266ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80266ea:	2301      	movs	r3, #1
 80266ec:	e033      	b.n	8026756 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80266ee:	687b      	ldr	r3, [r7, #4]
 80266f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80266f2:	2b00      	cmp	r3, #0
 80266f4:	d109      	bne.n	802670a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80266f6:	6878      	ldr	r0, [r7, #4]
 80266f8:	f7fe f82e 	bl	8024758 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80266fc:	687b      	ldr	r3, [r7, #4]
 80266fe:	2200      	movs	r2, #0
 8026700:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8026702:	687b      	ldr	r3, [r7, #4]
 8026704:	2200      	movs	r2, #0
 8026706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 802670a:	687b      	ldr	r3, [r7, #4]
 802670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802670e:	f003 0310 	and.w	r3, r3, #16
 8026712:	2b00      	cmp	r3, #0
 8026714:	d118      	bne.n	8026748 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8026716:	687b      	ldr	r3, [r7, #4]
 8026718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802671a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 802671e:	f023 0302 	bic.w	r3, r3, #2
 8026722:	f043 0202 	orr.w	r2, r3, #2
 8026726:	687b      	ldr	r3, [r7, #4]
 8026728:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 802672a:	6878      	ldr	r0, [r7, #4]
 802672c:	f000 fa4a 	bl	8026bc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8026730:	687b      	ldr	r3, [r7, #4]
 8026732:	2200      	movs	r2, #0
 8026734:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8026736:	687b      	ldr	r3, [r7, #4]
 8026738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802673a:	f023 0303 	bic.w	r3, r3, #3
 802673e:	f043 0201 	orr.w	r2, r3, #1
 8026742:	687b      	ldr	r3, [r7, #4]
 8026744:	641a      	str	r2, [r3, #64]	; 0x40
 8026746:	e001      	b.n	802674c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8026748:	2301      	movs	r3, #1
 802674a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 802674c:	687b      	ldr	r3, [r7, #4]
 802674e:	2200      	movs	r2, #0
 8026750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8026754:	7bfb      	ldrb	r3, [r7, #15]
}
 8026756:	4618      	mov	r0, r3
 8026758:	3710      	adds	r7, #16
 802675a:	46bd      	mov	sp, r7
 802675c:	bd80      	pop	{r7, pc}
	...

08026760 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8026760:	b580      	push	{r7, lr}
 8026762:	b086      	sub	sp, #24
 8026764:	af00      	add	r7, sp, #0
 8026766:	60f8      	str	r0, [r7, #12]
 8026768:	60b9      	str	r1, [r7, #8]
 802676a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 802676c:	2300      	movs	r3, #0
 802676e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8026770:	68fb      	ldr	r3, [r7, #12]
 8026772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026776:	2b01      	cmp	r3, #1
 8026778:	d101      	bne.n	802677e <HAL_ADC_Start_DMA+0x1e>
 802677a:	2302      	movs	r3, #2
 802677c:	e0cc      	b.n	8026918 <HAL_ADC_Start_DMA+0x1b8>
 802677e:	68fb      	ldr	r3, [r7, #12]
 8026780:	2201      	movs	r2, #1
 8026782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8026786:	68fb      	ldr	r3, [r7, #12]
 8026788:	681b      	ldr	r3, [r3, #0]
 802678a:	689b      	ldr	r3, [r3, #8]
 802678c:	f003 0301 	and.w	r3, r3, #1
 8026790:	2b01      	cmp	r3, #1
 8026792:	d018      	beq.n	80267c6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8026794:	68fb      	ldr	r3, [r7, #12]
 8026796:	681b      	ldr	r3, [r3, #0]
 8026798:	689a      	ldr	r2, [r3, #8]
 802679a:	68fb      	ldr	r3, [r7, #12]
 802679c:	681b      	ldr	r3, [r3, #0]
 802679e:	f042 0201 	orr.w	r2, r2, #1
 80267a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80267a4:	4b5e      	ldr	r3, [pc, #376]	; (8026920 <HAL_ADC_Start_DMA+0x1c0>)
 80267a6:	681b      	ldr	r3, [r3, #0]
 80267a8:	4a5e      	ldr	r2, [pc, #376]	; (8026924 <HAL_ADC_Start_DMA+0x1c4>)
 80267aa:	fba2 2303 	umull	r2, r3, r2, r3
 80267ae:	0c9a      	lsrs	r2, r3, #18
 80267b0:	4613      	mov	r3, r2
 80267b2:	005b      	lsls	r3, r3, #1
 80267b4:	4413      	add	r3, r2
 80267b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80267b8:	e002      	b.n	80267c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80267ba:	693b      	ldr	r3, [r7, #16]
 80267bc:	3b01      	subs	r3, #1
 80267be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80267c0:	693b      	ldr	r3, [r7, #16]
 80267c2:	2b00      	cmp	r3, #0
 80267c4:	d1f9      	bne.n	80267ba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80267c6:	68fb      	ldr	r3, [r7, #12]
 80267c8:	681b      	ldr	r3, [r3, #0]
 80267ca:	689b      	ldr	r3, [r3, #8]
 80267cc:	f003 0301 	and.w	r3, r3, #1
 80267d0:	2b01      	cmp	r3, #1
 80267d2:	f040 80a0 	bne.w	8026916 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80267d6:	68fb      	ldr	r3, [r7, #12]
 80267d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80267da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80267de:	f023 0301 	bic.w	r3, r3, #1
 80267e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80267e6:	68fb      	ldr	r3, [r7, #12]
 80267e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80267ea:	68fb      	ldr	r3, [r7, #12]
 80267ec:	681b      	ldr	r3, [r3, #0]
 80267ee:	685b      	ldr	r3, [r3, #4]
 80267f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80267f4:	2b00      	cmp	r3, #0
 80267f6:	d007      	beq.n	8026808 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80267f8:	68fb      	ldr	r3, [r7, #12]
 80267fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80267fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8026800:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8026804:	68fb      	ldr	r3, [r7, #12]
 8026806:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8026808:	68fb      	ldr	r3, [r7, #12]
 802680a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802680c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026814:	d106      	bne.n	8026824 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8026816:	68fb      	ldr	r3, [r7, #12]
 8026818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802681a:	f023 0206 	bic.w	r2, r3, #6
 802681e:	68fb      	ldr	r3, [r7, #12]
 8026820:	645a      	str	r2, [r3, #68]	; 0x44
 8026822:	e002      	b.n	802682a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8026824:	68fb      	ldr	r3, [r7, #12]
 8026826:	2200      	movs	r2, #0
 8026828:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 802682a:	68fb      	ldr	r3, [r7, #12]
 802682c:	2200      	movs	r2, #0
 802682e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026832:	4b3d      	ldr	r3, [pc, #244]	; (8026928 <HAL_ADC_Start_DMA+0x1c8>)
 8026834:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8026836:	68fb      	ldr	r3, [r7, #12]
 8026838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802683a:	4a3c      	ldr	r2, [pc, #240]	; (802692c <HAL_ADC_Start_DMA+0x1cc>)
 802683c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 802683e:	68fb      	ldr	r3, [r7, #12]
 8026840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026842:	4a3b      	ldr	r2, [pc, #236]	; (8026930 <HAL_ADC_Start_DMA+0x1d0>)
 8026844:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8026846:	68fb      	ldr	r3, [r7, #12]
 8026848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802684a:	4a3a      	ldr	r2, [pc, #232]	; (8026934 <HAL_ADC_Start_DMA+0x1d4>)
 802684c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 802684e:	68fb      	ldr	r3, [r7, #12]
 8026850:	681b      	ldr	r3, [r3, #0]
 8026852:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8026856:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8026858:	68fb      	ldr	r3, [r7, #12]
 802685a:	681b      	ldr	r3, [r3, #0]
 802685c:	685a      	ldr	r2, [r3, #4]
 802685e:	68fb      	ldr	r3, [r7, #12]
 8026860:	681b      	ldr	r3, [r3, #0]
 8026862:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8026866:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8026868:	68fb      	ldr	r3, [r7, #12]
 802686a:	681b      	ldr	r3, [r3, #0]
 802686c:	689a      	ldr	r2, [r3, #8]
 802686e:	68fb      	ldr	r3, [r7, #12]
 8026870:	681b      	ldr	r3, [r3, #0]
 8026872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8026876:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8026878:	68fb      	ldr	r3, [r7, #12]
 802687a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 802687c:	68fb      	ldr	r3, [r7, #12]
 802687e:	681b      	ldr	r3, [r3, #0]
 8026880:	334c      	adds	r3, #76	; 0x4c
 8026882:	4619      	mov	r1, r3
 8026884:	68ba      	ldr	r2, [r7, #8]
 8026886:	687b      	ldr	r3, [r7, #4]
 8026888:	f000 fc2b 	bl	80270e2 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 802688c:	697b      	ldr	r3, [r7, #20]
 802688e:	685b      	ldr	r3, [r3, #4]
 8026890:	f003 031f 	and.w	r3, r3, #31
 8026894:	2b00      	cmp	r3, #0
 8026896:	d12a      	bne.n	80268ee <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8026898:	68fb      	ldr	r3, [r7, #12]
 802689a:	681b      	ldr	r3, [r3, #0]
 802689c:	4a26      	ldr	r2, [pc, #152]	; (8026938 <HAL_ADC_Start_DMA+0x1d8>)
 802689e:	4293      	cmp	r3, r2
 80268a0:	d015      	beq.n	80268ce <HAL_ADC_Start_DMA+0x16e>
 80268a2:	68fb      	ldr	r3, [r7, #12]
 80268a4:	681b      	ldr	r3, [r3, #0]
 80268a6:	4a25      	ldr	r2, [pc, #148]	; (802693c <HAL_ADC_Start_DMA+0x1dc>)
 80268a8:	4293      	cmp	r3, r2
 80268aa:	d105      	bne.n	80268b8 <HAL_ADC_Start_DMA+0x158>
 80268ac:	4b1e      	ldr	r3, [pc, #120]	; (8026928 <HAL_ADC_Start_DMA+0x1c8>)
 80268ae:	685b      	ldr	r3, [r3, #4]
 80268b0:	f003 031f 	and.w	r3, r3, #31
 80268b4:	2b00      	cmp	r3, #0
 80268b6:	d00a      	beq.n	80268ce <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80268b8:	68fb      	ldr	r3, [r7, #12]
 80268ba:	681b      	ldr	r3, [r3, #0]
 80268bc:	4a20      	ldr	r2, [pc, #128]	; (8026940 <HAL_ADC_Start_DMA+0x1e0>)
 80268be:	4293      	cmp	r3, r2
 80268c0:	d129      	bne.n	8026916 <HAL_ADC_Start_DMA+0x1b6>
 80268c2:	4b19      	ldr	r3, [pc, #100]	; (8026928 <HAL_ADC_Start_DMA+0x1c8>)
 80268c4:	685b      	ldr	r3, [r3, #4]
 80268c6:	f003 031f 	and.w	r3, r3, #31
 80268ca:	2b0f      	cmp	r3, #15
 80268cc:	d823      	bhi.n	8026916 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80268ce:	68fb      	ldr	r3, [r7, #12]
 80268d0:	681b      	ldr	r3, [r3, #0]
 80268d2:	689b      	ldr	r3, [r3, #8]
 80268d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80268d8:	2b00      	cmp	r3, #0
 80268da:	d11c      	bne.n	8026916 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80268dc:	68fb      	ldr	r3, [r7, #12]
 80268de:	681b      	ldr	r3, [r3, #0]
 80268e0:	689a      	ldr	r2, [r3, #8]
 80268e2:	68fb      	ldr	r3, [r7, #12]
 80268e4:	681b      	ldr	r3, [r3, #0]
 80268e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80268ea:	609a      	str	r2, [r3, #8]
 80268ec:	e013      	b.n	8026916 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80268ee:	68fb      	ldr	r3, [r7, #12]
 80268f0:	681b      	ldr	r3, [r3, #0]
 80268f2:	4a11      	ldr	r2, [pc, #68]	; (8026938 <HAL_ADC_Start_DMA+0x1d8>)
 80268f4:	4293      	cmp	r3, r2
 80268f6:	d10e      	bne.n	8026916 <HAL_ADC_Start_DMA+0x1b6>
 80268f8:	68fb      	ldr	r3, [r7, #12]
 80268fa:	681b      	ldr	r3, [r3, #0]
 80268fc:	689b      	ldr	r3, [r3, #8]
 80268fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8026902:	2b00      	cmp	r3, #0
 8026904:	d107      	bne.n	8026916 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8026906:	68fb      	ldr	r3, [r7, #12]
 8026908:	681b      	ldr	r3, [r3, #0]
 802690a:	689a      	ldr	r2, [r3, #8]
 802690c:	68fb      	ldr	r3, [r7, #12]
 802690e:	681b      	ldr	r3, [r3, #0]
 8026910:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8026914:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8026916:	2300      	movs	r3, #0
}
 8026918:	4618      	mov	r0, r3
 802691a:	3718      	adds	r7, #24
 802691c:	46bd      	mov	sp, r7
 802691e:	bd80      	pop	{r7, pc}
 8026920:	20000010 	.word	0x20000010
 8026924:	431bde83 	.word	0x431bde83
 8026928:	40012300 	.word	0x40012300
 802692c:	08026dbd 	.word	0x08026dbd
 8026930:	08026e77 	.word	0x08026e77
 8026934:	08026e93 	.word	0x08026e93
 8026938:	40012000 	.word	0x40012000
 802693c:	40012100 	.word	0x40012100
 8026940:	40012200 	.word	0x40012200

08026944 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8026944:	b480      	push	{r7}
 8026946:	b083      	sub	sp, #12
 8026948:	af00      	add	r7, sp, #0
 802694a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 802694c:	bf00      	nop
 802694e:	370c      	adds	r7, #12
 8026950:	46bd      	mov	sp, r7
 8026952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026956:	4770      	bx	lr

08026958 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8026958:	b480      	push	{r7}
 802695a:	b083      	sub	sp, #12
 802695c:	af00      	add	r7, sp, #0
 802695e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8026960:	bf00      	nop
 8026962:	370c      	adds	r7, #12
 8026964:	46bd      	mov	sp, r7
 8026966:	f85d 7b04 	ldr.w	r7, [sp], #4
 802696a:	4770      	bx	lr

0802696c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 802696c:	b480      	push	{r7}
 802696e:	b083      	sub	sp, #12
 8026970:	af00      	add	r7, sp, #0
 8026972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8026974:	bf00      	nop
 8026976:	370c      	adds	r7, #12
 8026978:	46bd      	mov	sp, r7
 802697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802697e:	4770      	bx	lr

08026980 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8026980:	b480      	push	{r7}
 8026982:	b085      	sub	sp, #20
 8026984:	af00      	add	r7, sp, #0
 8026986:	6078      	str	r0, [r7, #4]
 8026988:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 802698a:	2300      	movs	r3, #0
 802698c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802698e:	687b      	ldr	r3, [r7, #4]
 8026990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026994:	2b01      	cmp	r3, #1
 8026996:	d101      	bne.n	802699c <HAL_ADC_ConfigChannel+0x1c>
 8026998:	2302      	movs	r3, #2
 802699a:	e105      	b.n	8026ba8 <HAL_ADC_ConfigChannel+0x228>
 802699c:	687b      	ldr	r3, [r7, #4]
 802699e:	2201      	movs	r2, #1
 80269a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80269a4:	683b      	ldr	r3, [r7, #0]
 80269a6:	681b      	ldr	r3, [r3, #0]
 80269a8:	2b09      	cmp	r3, #9
 80269aa:	d925      	bls.n	80269f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80269ac:	687b      	ldr	r3, [r7, #4]
 80269ae:	681b      	ldr	r3, [r3, #0]
 80269b0:	68d9      	ldr	r1, [r3, #12]
 80269b2:	683b      	ldr	r3, [r7, #0]
 80269b4:	681b      	ldr	r3, [r3, #0]
 80269b6:	b29b      	uxth	r3, r3
 80269b8:	461a      	mov	r2, r3
 80269ba:	4613      	mov	r3, r2
 80269bc:	005b      	lsls	r3, r3, #1
 80269be:	4413      	add	r3, r2
 80269c0:	3b1e      	subs	r3, #30
 80269c2:	2207      	movs	r2, #7
 80269c4:	fa02 f303 	lsl.w	r3, r2, r3
 80269c8:	43da      	mvns	r2, r3
 80269ca:	687b      	ldr	r3, [r7, #4]
 80269cc:	681b      	ldr	r3, [r3, #0]
 80269ce:	400a      	ands	r2, r1
 80269d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80269d2:	687b      	ldr	r3, [r7, #4]
 80269d4:	681b      	ldr	r3, [r3, #0]
 80269d6:	68d9      	ldr	r1, [r3, #12]
 80269d8:	683b      	ldr	r3, [r7, #0]
 80269da:	689a      	ldr	r2, [r3, #8]
 80269dc:	683b      	ldr	r3, [r7, #0]
 80269de:	681b      	ldr	r3, [r3, #0]
 80269e0:	b29b      	uxth	r3, r3
 80269e2:	4618      	mov	r0, r3
 80269e4:	4603      	mov	r3, r0
 80269e6:	005b      	lsls	r3, r3, #1
 80269e8:	4403      	add	r3, r0
 80269ea:	3b1e      	subs	r3, #30
 80269ec:	409a      	lsls	r2, r3
 80269ee:	687b      	ldr	r3, [r7, #4]
 80269f0:	681b      	ldr	r3, [r3, #0]
 80269f2:	430a      	orrs	r2, r1
 80269f4:	60da      	str	r2, [r3, #12]
 80269f6:	e022      	b.n	8026a3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80269f8:	687b      	ldr	r3, [r7, #4]
 80269fa:	681b      	ldr	r3, [r3, #0]
 80269fc:	6919      	ldr	r1, [r3, #16]
 80269fe:	683b      	ldr	r3, [r7, #0]
 8026a00:	681b      	ldr	r3, [r3, #0]
 8026a02:	b29b      	uxth	r3, r3
 8026a04:	461a      	mov	r2, r3
 8026a06:	4613      	mov	r3, r2
 8026a08:	005b      	lsls	r3, r3, #1
 8026a0a:	4413      	add	r3, r2
 8026a0c:	2207      	movs	r2, #7
 8026a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8026a12:	43da      	mvns	r2, r3
 8026a14:	687b      	ldr	r3, [r7, #4]
 8026a16:	681b      	ldr	r3, [r3, #0]
 8026a18:	400a      	ands	r2, r1
 8026a1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8026a1c:	687b      	ldr	r3, [r7, #4]
 8026a1e:	681b      	ldr	r3, [r3, #0]
 8026a20:	6919      	ldr	r1, [r3, #16]
 8026a22:	683b      	ldr	r3, [r7, #0]
 8026a24:	689a      	ldr	r2, [r3, #8]
 8026a26:	683b      	ldr	r3, [r7, #0]
 8026a28:	681b      	ldr	r3, [r3, #0]
 8026a2a:	b29b      	uxth	r3, r3
 8026a2c:	4618      	mov	r0, r3
 8026a2e:	4603      	mov	r3, r0
 8026a30:	005b      	lsls	r3, r3, #1
 8026a32:	4403      	add	r3, r0
 8026a34:	409a      	lsls	r2, r3
 8026a36:	687b      	ldr	r3, [r7, #4]
 8026a38:	681b      	ldr	r3, [r3, #0]
 8026a3a:	430a      	orrs	r2, r1
 8026a3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8026a3e:	683b      	ldr	r3, [r7, #0]
 8026a40:	685b      	ldr	r3, [r3, #4]
 8026a42:	2b06      	cmp	r3, #6
 8026a44:	d824      	bhi.n	8026a90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8026a46:	687b      	ldr	r3, [r7, #4]
 8026a48:	681b      	ldr	r3, [r3, #0]
 8026a4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8026a4c:	683b      	ldr	r3, [r7, #0]
 8026a4e:	685a      	ldr	r2, [r3, #4]
 8026a50:	4613      	mov	r3, r2
 8026a52:	009b      	lsls	r3, r3, #2
 8026a54:	4413      	add	r3, r2
 8026a56:	3b05      	subs	r3, #5
 8026a58:	221f      	movs	r2, #31
 8026a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8026a5e:	43da      	mvns	r2, r3
 8026a60:	687b      	ldr	r3, [r7, #4]
 8026a62:	681b      	ldr	r3, [r3, #0]
 8026a64:	400a      	ands	r2, r1
 8026a66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8026a68:	687b      	ldr	r3, [r7, #4]
 8026a6a:	681b      	ldr	r3, [r3, #0]
 8026a6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8026a6e:	683b      	ldr	r3, [r7, #0]
 8026a70:	681b      	ldr	r3, [r3, #0]
 8026a72:	b29b      	uxth	r3, r3
 8026a74:	4618      	mov	r0, r3
 8026a76:	683b      	ldr	r3, [r7, #0]
 8026a78:	685a      	ldr	r2, [r3, #4]
 8026a7a:	4613      	mov	r3, r2
 8026a7c:	009b      	lsls	r3, r3, #2
 8026a7e:	4413      	add	r3, r2
 8026a80:	3b05      	subs	r3, #5
 8026a82:	fa00 f203 	lsl.w	r2, r0, r3
 8026a86:	687b      	ldr	r3, [r7, #4]
 8026a88:	681b      	ldr	r3, [r3, #0]
 8026a8a:	430a      	orrs	r2, r1
 8026a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8026a8e:	e04c      	b.n	8026b2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8026a90:	683b      	ldr	r3, [r7, #0]
 8026a92:	685b      	ldr	r3, [r3, #4]
 8026a94:	2b0c      	cmp	r3, #12
 8026a96:	d824      	bhi.n	8026ae2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8026a98:	687b      	ldr	r3, [r7, #4]
 8026a9a:	681b      	ldr	r3, [r3, #0]
 8026a9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8026a9e:	683b      	ldr	r3, [r7, #0]
 8026aa0:	685a      	ldr	r2, [r3, #4]
 8026aa2:	4613      	mov	r3, r2
 8026aa4:	009b      	lsls	r3, r3, #2
 8026aa6:	4413      	add	r3, r2
 8026aa8:	3b23      	subs	r3, #35	; 0x23
 8026aaa:	221f      	movs	r2, #31
 8026aac:	fa02 f303 	lsl.w	r3, r2, r3
 8026ab0:	43da      	mvns	r2, r3
 8026ab2:	687b      	ldr	r3, [r7, #4]
 8026ab4:	681b      	ldr	r3, [r3, #0]
 8026ab6:	400a      	ands	r2, r1
 8026ab8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8026aba:	687b      	ldr	r3, [r7, #4]
 8026abc:	681b      	ldr	r3, [r3, #0]
 8026abe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8026ac0:	683b      	ldr	r3, [r7, #0]
 8026ac2:	681b      	ldr	r3, [r3, #0]
 8026ac4:	b29b      	uxth	r3, r3
 8026ac6:	4618      	mov	r0, r3
 8026ac8:	683b      	ldr	r3, [r7, #0]
 8026aca:	685a      	ldr	r2, [r3, #4]
 8026acc:	4613      	mov	r3, r2
 8026ace:	009b      	lsls	r3, r3, #2
 8026ad0:	4413      	add	r3, r2
 8026ad2:	3b23      	subs	r3, #35	; 0x23
 8026ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8026ad8:	687b      	ldr	r3, [r7, #4]
 8026ada:	681b      	ldr	r3, [r3, #0]
 8026adc:	430a      	orrs	r2, r1
 8026ade:	631a      	str	r2, [r3, #48]	; 0x30
 8026ae0:	e023      	b.n	8026b2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8026ae2:	687b      	ldr	r3, [r7, #4]
 8026ae4:	681b      	ldr	r3, [r3, #0]
 8026ae6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026ae8:	683b      	ldr	r3, [r7, #0]
 8026aea:	685a      	ldr	r2, [r3, #4]
 8026aec:	4613      	mov	r3, r2
 8026aee:	009b      	lsls	r3, r3, #2
 8026af0:	4413      	add	r3, r2
 8026af2:	3b41      	subs	r3, #65	; 0x41
 8026af4:	221f      	movs	r2, #31
 8026af6:	fa02 f303 	lsl.w	r3, r2, r3
 8026afa:	43da      	mvns	r2, r3
 8026afc:	687b      	ldr	r3, [r7, #4]
 8026afe:	681b      	ldr	r3, [r3, #0]
 8026b00:	400a      	ands	r2, r1
 8026b02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8026b04:	687b      	ldr	r3, [r7, #4]
 8026b06:	681b      	ldr	r3, [r3, #0]
 8026b08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026b0a:	683b      	ldr	r3, [r7, #0]
 8026b0c:	681b      	ldr	r3, [r3, #0]
 8026b0e:	b29b      	uxth	r3, r3
 8026b10:	4618      	mov	r0, r3
 8026b12:	683b      	ldr	r3, [r7, #0]
 8026b14:	685a      	ldr	r2, [r3, #4]
 8026b16:	4613      	mov	r3, r2
 8026b18:	009b      	lsls	r3, r3, #2
 8026b1a:	4413      	add	r3, r2
 8026b1c:	3b41      	subs	r3, #65	; 0x41
 8026b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8026b22:	687b      	ldr	r3, [r7, #4]
 8026b24:	681b      	ldr	r3, [r3, #0]
 8026b26:	430a      	orrs	r2, r1
 8026b28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026b2a:	4b22      	ldr	r3, [pc, #136]	; (8026bb4 <HAL_ADC_ConfigChannel+0x234>)
 8026b2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8026b2e:	687b      	ldr	r3, [r7, #4]
 8026b30:	681b      	ldr	r3, [r3, #0]
 8026b32:	4a21      	ldr	r2, [pc, #132]	; (8026bb8 <HAL_ADC_ConfigChannel+0x238>)
 8026b34:	4293      	cmp	r3, r2
 8026b36:	d109      	bne.n	8026b4c <HAL_ADC_ConfigChannel+0x1cc>
 8026b38:	683b      	ldr	r3, [r7, #0]
 8026b3a:	681b      	ldr	r3, [r3, #0]
 8026b3c:	2b12      	cmp	r3, #18
 8026b3e:	d105      	bne.n	8026b4c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8026b40:	68fb      	ldr	r3, [r7, #12]
 8026b42:	685b      	ldr	r3, [r3, #4]
 8026b44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8026b48:	68fb      	ldr	r3, [r7, #12]
 8026b4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8026b4c:	687b      	ldr	r3, [r7, #4]
 8026b4e:	681b      	ldr	r3, [r3, #0]
 8026b50:	4a19      	ldr	r2, [pc, #100]	; (8026bb8 <HAL_ADC_ConfigChannel+0x238>)
 8026b52:	4293      	cmp	r3, r2
 8026b54:	d123      	bne.n	8026b9e <HAL_ADC_ConfigChannel+0x21e>
 8026b56:	683b      	ldr	r3, [r7, #0]
 8026b58:	681b      	ldr	r3, [r3, #0]
 8026b5a:	2b10      	cmp	r3, #16
 8026b5c:	d003      	beq.n	8026b66 <HAL_ADC_ConfigChannel+0x1e6>
 8026b5e:	683b      	ldr	r3, [r7, #0]
 8026b60:	681b      	ldr	r3, [r3, #0]
 8026b62:	2b11      	cmp	r3, #17
 8026b64:	d11b      	bne.n	8026b9e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8026b66:	68fb      	ldr	r3, [r7, #12]
 8026b68:	685b      	ldr	r3, [r3, #4]
 8026b6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8026b6e:	68fb      	ldr	r3, [r7, #12]
 8026b70:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8026b72:	683b      	ldr	r3, [r7, #0]
 8026b74:	681b      	ldr	r3, [r3, #0]
 8026b76:	2b10      	cmp	r3, #16
 8026b78:	d111      	bne.n	8026b9e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8026b7a:	4b10      	ldr	r3, [pc, #64]	; (8026bbc <HAL_ADC_ConfigChannel+0x23c>)
 8026b7c:	681b      	ldr	r3, [r3, #0]
 8026b7e:	4a10      	ldr	r2, [pc, #64]	; (8026bc0 <HAL_ADC_ConfigChannel+0x240>)
 8026b80:	fba2 2303 	umull	r2, r3, r2, r3
 8026b84:	0c9a      	lsrs	r2, r3, #18
 8026b86:	4613      	mov	r3, r2
 8026b88:	009b      	lsls	r3, r3, #2
 8026b8a:	4413      	add	r3, r2
 8026b8c:	005b      	lsls	r3, r3, #1
 8026b8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8026b90:	e002      	b.n	8026b98 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8026b92:	68bb      	ldr	r3, [r7, #8]
 8026b94:	3b01      	subs	r3, #1
 8026b96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8026b98:	68bb      	ldr	r3, [r7, #8]
 8026b9a:	2b00      	cmp	r3, #0
 8026b9c:	d1f9      	bne.n	8026b92 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8026b9e:	687b      	ldr	r3, [r7, #4]
 8026ba0:	2200      	movs	r2, #0
 8026ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8026ba6:	2300      	movs	r3, #0
}
 8026ba8:	4618      	mov	r0, r3
 8026baa:	3714      	adds	r7, #20
 8026bac:	46bd      	mov	sp, r7
 8026bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bb2:	4770      	bx	lr
 8026bb4:	40012300 	.word	0x40012300
 8026bb8:	40012000 	.word	0x40012000
 8026bbc:	20000010 	.word	0x20000010
 8026bc0:	431bde83 	.word	0x431bde83

08026bc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8026bc4:	b480      	push	{r7}
 8026bc6:	b085      	sub	sp, #20
 8026bc8:	af00      	add	r7, sp, #0
 8026bca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026bcc:	4b79      	ldr	r3, [pc, #484]	; (8026db4 <ADC_Init+0x1f0>)
 8026bce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8026bd0:	68fb      	ldr	r3, [r7, #12]
 8026bd2:	685b      	ldr	r3, [r3, #4]
 8026bd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8026bd8:	68fb      	ldr	r3, [r7, #12]
 8026bda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8026bdc:	68fb      	ldr	r3, [r7, #12]
 8026bde:	685a      	ldr	r2, [r3, #4]
 8026be0:	687b      	ldr	r3, [r7, #4]
 8026be2:	685b      	ldr	r3, [r3, #4]
 8026be4:	431a      	orrs	r2, r3
 8026be6:	68fb      	ldr	r3, [r7, #12]
 8026be8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8026bea:	687b      	ldr	r3, [r7, #4]
 8026bec:	681b      	ldr	r3, [r3, #0]
 8026bee:	685a      	ldr	r2, [r3, #4]
 8026bf0:	687b      	ldr	r3, [r7, #4]
 8026bf2:	681b      	ldr	r3, [r3, #0]
 8026bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8026bf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8026bfa:	687b      	ldr	r3, [r7, #4]
 8026bfc:	681b      	ldr	r3, [r3, #0]
 8026bfe:	6859      	ldr	r1, [r3, #4]
 8026c00:	687b      	ldr	r3, [r7, #4]
 8026c02:	691b      	ldr	r3, [r3, #16]
 8026c04:	021a      	lsls	r2, r3, #8
 8026c06:	687b      	ldr	r3, [r7, #4]
 8026c08:	681b      	ldr	r3, [r3, #0]
 8026c0a:	430a      	orrs	r2, r1
 8026c0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8026c0e:	687b      	ldr	r3, [r7, #4]
 8026c10:	681b      	ldr	r3, [r3, #0]
 8026c12:	685a      	ldr	r2, [r3, #4]
 8026c14:	687b      	ldr	r3, [r7, #4]
 8026c16:	681b      	ldr	r3, [r3, #0]
 8026c18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8026c1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8026c1e:	687b      	ldr	r3, [r7, #4]
 8026c20:	681b      	ldr	r3, [r3, #0]
 8026c22:	6859      	ldr	r1, [r3, #4]
 8026c24:	687b      	ldr	r3, [r7, #4]
 8026c26:	689a      	ldr	r2, [r3, #8]
 8026c28:	687b      	ldr	r3, [r7, #4]
 8026c2a:	681b      	ldr	r3, [r3, #0]
 8026c2c:	430a      	orrs	r2, r1
 8026c2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8026c30:	687b      	ldr	r3, [r7, #4]
 8026c32:	681b      	ldr	r3, [r3, #0]
 8026c34:	689a      	ldr	r2, [r3, #8]
 8026c36:	687b      	ldr	r3, [r7, #4]
 8026c38:	681b      	ldr	r3, [r3, #0]
 8026c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8026c3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8026c40:	687b      	ldr	r3, [r7, #4]
 8026c42:	681b      	ldr	r3, [r3, #0]
 8026c44:	6899      	ldr	r1, [r3, #8]
 8026c46:	687b      	ldr	r3, [r7, #4]
 8026c48:	68da      	ldr	r2, [r3, #12]
 8026c4a:	687b      	ldr	r3, [r7, #4]
 8026c4c:	681b      	ldr	r3, [r3, #0]
 8026c4e:	430a      	orrs	r2, r1
 8026c50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8026c52:	687b      	ldr	r3, [r7, #4]
 8026c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026c56:	4a58      	ldr	r2, [pc, #352]	; (8026db8 <ADC_Init+0x1f4>)
 8026c58:	4293      	cmp	r3, r2
 8026c5a:	d022      	beq.n	8026ca2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8026c5c:	687b      	ldr	r3, [r7, #4]
 8026c5e:	681b      	ldr	r3, [r3, #0]
 8026c60:	689a      	ldr	r2, [r3, #8]
 8026c62:	687b      	ldr	r3, [r7, #4]
 8026c64:	681b      	ldr	r3, [r3, #0]
 8026c66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8026c6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8026c6c:	687b      	ldr	r3, [r7, #4]
 8026c6e:	681b      	ldr	r3, [r3, #0]
 8026c70:	6899      	ldr	r1, [r3, #8]
 8026c72:	687b      	ldr	r3, [r7, #4]
 8026c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026c76:	687b      	ldr	r3, [r7, #4]
 8026c78:	681b      	ldr	r3, [r3, #0]
 8026c7a:	430a      	orrs	r2, r1
 8026c7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8026c7e:	687b      	ldr	r3, [r7, #4]
 8026c80:	681b      	ldr	r3, [r3, #0]
 8026c82:	689a      	ldr	r2, [r3, #8]
 8026c84:	687b      	ldr	r3, [r7, #4]
 8026c86:	681b      	ldr	r3, [r3, #0]
 8026c88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8026c8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8026c8e:	687b      	ldr	r3, [r7, #4]
 8026c90:	681b      	ldr	r3, [r3, #0]
 8026c92:	6899      	ldr	r1, [r3, #8]
 8026c94:	687b      	ldr	r3, [r7, #4]
 8026c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026c98:	687b      	ldr	r3, [r7, #4]
 8026c9a:	681b      	ldr	r3, [r3, #0]
 8026c9c:	430a      	orrs	r2, r1
 8026c9e:	609a      	str	r2, [r3, #8]
 8026ca0:	e00f      	b.n	8026cc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8026ca2:	687b      	ldr	r3, [r7, #4]
 8026ca4:	681b      	ldr	r3, [r3, #0]
 8026ca6:	689a      	ldr	r2, [r3, #8]
 8026ca8:	687b      	ldr	r3, [r7, #4]
 8026caa:	681b      	ldr	r3, [r3, #0]
 8026cac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8026cb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8026cb2:	687b      	ldr	r3, [r7, #4]
 8026cb4:	681b      	ldr	r3, [r3, #0]
 8026cb6:	689a      	ldr	r2, [r3, #8]
 8026cb8:	687b      	ldr	r3, [r7, #4]
 8026cba:	681b      	ldr	r3, [r3, #0]
 8026cbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8026cc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8026cc2:	687b      	ldr	r3, [r7, #4]
 8026cc4:	681b      	ldr	r3, [r3, #0]
 8026cc6:	689a      	ldr	r2, [r3, #8]
 8026cc8:	687b      	ldr	r3, [r7, #4]
 8026cca:	681b      	ldr	r3, [r3, #0]
 8026ccc:	f022 0202 	bic.w	r2, r2, #2
 8026cd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8026cd2:	687b      	ldr	r3, [r7, #4]
 8026cd4:	681b      	ldr	r3, [r3, #0]
 8026cd6:	6899      	ldr	r1, [r3, #8]
 8026cd8:	687b      	ldr	r3, [r7, #4]
 8026cda:	7e1b      	ldrb	r3, [r3, #24]
 8026cdc:	005a      	lsls	r2, r3, #1
 8026cde:	687b      	ldr	r3, [r7, #4]
 8026ce0:	681b      	ldr	r3, [r3, #0]
 8026ce2:	430a      	orrs	r2, r1
 8026ce4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8026ce6:	687b      	ldr	r3, [r7, #4]
 8026ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8026cec:	2b00      	cmp	r3, #0
 8026cee:	d01b      	beq.n	8026d28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8026cf0:	687b      	ldr	r3, [r7, #4]
 8026cf2:	681b      	ldr	r3, [r3, #0]
 8026cf4:	685a      	ldr	r2, [r3, #4]
 8026cf6:	687b      	ldr	r3, [r7, #4]
 8026cf8:	681b      	ldr	r3, [r3, #0]
 8026cfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8026cfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8026d00:	687b      	ldr	r3, [r7, #4]
 8026d02:	681b      	ldr	r3, [r3, #0]
 8026d04:	685a      	ldr	r2, [r3, #4]
 8026d06:	687b      	ldr	r3, [r7, #4]
 8026d08:	681b      	ldr	r3, [r3, #0]
 8026d0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8026d0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8026d10:	687b      	ldr	r3, [r7, #4]
 8026d12:	681b      	ldr	r3, [r3, #0]
 8026d14:	6859      	ldr	r1, [r3, #4]
 8026d16:	687b      	ldr	r3, [r7, #4]
 8026d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026d1a:	3b01      	subs	r3, #1
 8026d1c:	035a      	lsls	r2, r3, #13
 8026d1e:	687b      	ldr	r3, [r7, #4]
 8026d20:	681b      	ldr	r3, [r3, #0]
 8026d22:	430a      	orrs	r2, r1
 8026d24:	605a      	str	r2, [r3, #4]
 8026d26:	e007      	b.n	8026d38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8026d28:	687b      	ldr	r3, [r7, #4]
 8026d2a:	681b      	ldr	r3, [r3, #0]
 8026d2c:	685a      	ldr	r2, [r3, #4]
 8026d2e:	687b      	ldr	r3, [r7, #4]
 8026d30:	681b      	ldr	r3, [r3, #0]
 8026d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8026d36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8026d38:	687b      	ldr	r3, [r7, #4]
 8026d3a:	681b      	ldr	r3, [r3, #0]
 8026d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026d3e:	687b      	ldr	r3, [r7, #4]
 8026d40:	681b      	ldr	r3, [r3, #0]
 8026d42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8026d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8026d48:	687b      	ldr	r3, [r7, #4]
 8026d4a:	681b      	ldr	r3, [r3, #0]
 8026d4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026d4e:	687b      	ldr	r3, [r7, #4]
 8026d50:	69db      	ldr	r3, [r3, #28]
 8026d52:	3b01      	subs	r3, #1
 8026d54:	051a      	lsls	r2, r3, #20
 8026d56:	687b      	ldr	r3, [r7, #4]
 8026d58:	681b      	ldr	r3, [r3, #0]
 8026d5a:	430a      	orrs	r2, r1
 8026d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8026d5e:	687b      	ldr	r3, [r7, #4]
 8026d60:	681b      	ldr	r3, [r3, #0]
 8026d62:	689a      	ldr	r2, [r3, #8]
 8026d64:	687b      	ldr	r3, [r7, #4]
 8026d66:	681b      	ldr	r3, [r3, #0]
 8026d68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8026d6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8026d6e:	687b      	ldr	r3, [r7, #4]
 8026d70:	681b      	ldr	r3, [r3, #0]
 8026d72:	6899      	ldr	r1, [r3, #8]
 8026d74:	687b      	ldr	r3, [r7, #4]
 8026d76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8026d7a:	025a      	lsls	r2, r3, #9
 8026d7c:	687b      	ldr	r3, [r7, #4]
 8026d7e:	681b      	ldr	r3, [r3, #0]
 8026d80:	430a      	orrs	r2, r1
 8026d82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8026d84:	687b      	ldr	r3, [r7, #4]
 8026d86:	681b      	ldr	r3, [r3, #0]
 8026d88:	689a      	ldr	r2, [r3, #8]
 8026d8a:	687b      	ldr	r3, [r7, #4]
 8026d8c:	681b      	ldr	r3, [r3, #0]
 8026d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8026d92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8026d94:	687b      	ldr	r3, [r7, #4]
 8026d96:	681b      	ldr	r3, [r3, #0]
 8026d98:	6899      	ldr	r1, [r3, #8]
 8026d9a:	687b      	ldr	r3, [r7, #4]
 8026d9c:	695b      	ldr	r3, [r3, #20]
 8026d9e:	029a      	lsls	r2, r3, #10
 8026da0:	687b      	ldr	r3, [r7, #4]
 8026da2:	681b      	ldr	r3, [r3, #0]
 8026da4:	430a      	orrs	r2, r1
 8026da6:	609a      	str	r2, [r3, #8]
}
 8026da8:	bf00      	nop
 8026daa:	3714      	adds	r7, #20
 8026dac:	46bd      	mov	sp, r7
 8026dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026db2:	4770      	bx	lr
 8026db4:	40012300 	.word	0x40012300
 8026db8:	0f000001 	.word	0x0f000001

08026dbc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026dbc:	b580      	push	{r7, lr}
 8026dbe:	b084      	sub	sp, #16
 8026dc0:	af00      	add	r7, sp, #0
 8026dc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026dc4:	687b      	ldr	r3, [r7, #4]
 8026dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026dc8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8026dca:	68fb      	ldr	r3, [r7, #12]
 8026dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026dce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8026dd2:	2b00      	cmp	r3, #0
 8026dd4:	d13c      	bne.n	8026e50 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8026dd6:	68fb      	ldr	r3, [r7, #12]
 8026dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026dda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8026dde:	68fb      	ldr	r3, [r7, #12]
 8026de0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8026de2:	68fb      	ldr	r3, [r7, #12]
 8026de4:	681b      	ldr	r3, [r3, #0]
 8026de6:	689b      	ldr	r3, [r3, #8]
 8026de8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8026dec:	2b00      	cmp	r3, #0
 8026dee:	d12b      	bne.n	8026e48 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8026df0:	68fb      	ldr	r3, [r7, #12]
 8026df2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8026df4:	2b00      	cmp	r3, #0
 8026df6:	d127      	bne.n	8026e48 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8026df8:	68fb      	ldr	r3, [r7, #12]
 8026dfa:	681b      	ldr	r3, [r3, #0]
 8026dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026dfe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8026e02:	2b00      	cmp	r3, #0
 8026e04:	d006      	beq.n	8026e14 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8026e06:	68fb      	ldr	r3, [r7, #12]
 8026e08:	681b      	ldr	r3, [r3, #0]
 8026e0a:	689b      	ldr	r3, [r3, #8]
 8026e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8026e10:	2b00      	cmp	r3, #0
 8026e12:	d119      	bne.n	8026e48 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8026e14:	68fb      	ldr	r3, [r7, #12]
 8026e16:	681b      	ldr	r3, [r3, #0]
 8026e18:	685a      	ldr	r2, [r3, #4]
 8026e1a:	68fb      	ldr	r3, [r7, #12]
 8026e1c:	681b      	ldr	r3, [r3, #0]
 8026e1e:	f022 0220 	bic.w	r2, r2, #32
 8026e22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8026e24:	68fb      	ldr	r3, [r7, #12]
 8026e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8026e2c:	68fb      	ldr	r3, [r7, #12]
 8026e2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8026e30:	68fb      	ldr	r3, [r7, #12]
 8026e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026e38:	2b00      	cmp	r3, #0
 8026e3a:	d105      	bne.n	8026e48 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8026e3c:	68fb      	ldr	r3, [r7, #12]
 8026e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e40:	f043 0201 	orr.w	r2, r3, #1
 8026e44:	68fb      	ldr	r3, [r7, #12]
 8026e46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8026e48:	68f8      	ldr	r0, [r7, #12]
 8026e4a:	f7ff fd7b 	bl	8026944 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8026e4e:	e00e      	b.n	8026e6e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8026e50:	68fb      	ldr	r3, [r7, #12]
 8026e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e54:	f003 0310 	and.w	r3, r3, #16
 8026e58:	2b00      	cmp	r3, #0
 8026e5a:	d003      	beq.n	8026e64 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8026e5c:	68f8      	ldr	r0, [r7, #12]
 8026e5e:	f7ff fd85 	bl	802696c <HAL_ADC_ErrorCallback>
}
 8026e62:	e004      	b.n	8026e6e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8026e64:	68fb      	ldr	r3, [r7, #12]
 8026e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8026e6a:	6878      	ldr	r0, [r7, #4]
 8026e6c:	4798      	blx	r3
}
 8026e6e:	bf00      	nop
 8026e70:	3710      	adds	r7, #16
 8026e72:	46bd      	mov	sp, r7
 8026e74:	bd80      	pop	{r7, pc}

08026e76 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026e76:	b580      	push	{r7, lr}
 8026e78:	b084      	sub	sp, #16
 8026e7a:	af00      	add	r7, sp, #0
 8026e7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026e7e:	687b      	ldr	r3, [r7, #4]
 8026e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026e82:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8026e84:	68f8      	ldr	r0, [r7, #12]
 8026e86:	f7ff fd67 	bl	8026958 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026e8a:	bf00      	nop
 8026e8c:	3710      	adds	r7, #16
 8026e8e:	46bd      	mov	sp, r7
 8026e90:	bd80      	pop	{r7, pc}

08026e92 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8026e92:	b580      	push	{r7, lr}
 8026e94:	b084      	sub	sp, #16
 8026e96:	af00      	add	r7, sp, #0
 8026e98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026e9a:	687b      	ldr	r3, [r7, #4]
 8026e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026e9e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8026ea0:	68fb      	ldr	r3, [r7, #12]
 8026ea2:	2240      	movs	r2, #64	; 0x40
 8026ea4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8026ea6:	68fb      	ldr	r3, [r7, #12]
 8026ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026eaa:	f043 0204 	orr.w	r2, r3, #4
 8026eae:	68fb      	ldr	r3, [r7, #12]
 8026eb0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8026eb2:	68f8      	ldr	r0, [r7, #12]
 8026eb4:	f7ff fd5a 	bl	802696c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026eb8:	bf00      	nop
 8026eba:	3710      	adds	r7, #16
 8026ebc:	46bd      	mov	sp, r7
 8026ebe:	bd80      	pop	{r7, pc}

08026ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026ec0:	b480      	push	{r7}
 8026ec2:	b085      	sub	sp, #20
 8026ec4:	af00      	add	r7, sp, #0
 8026ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8026ec8:	687b      	ldr	r3, [r7, #4]
 8026eca:	f003 0307 	and.w	r3, r3, #7
 8026ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8026ed0:	4b0c      	ldr	r3, [pc, #48]	; (8026f04 <__NVIC_SetPriorityGrouping+0x44>)
 8026ed2:	68db      	ldr	r3, [r3, #12]
 8026ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8026ed6:	68ba      	ldr	r2, [r7, #8]
 8026ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8026edc:	4013      	ands	r3, r2
 8026ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8026ee0:	68fb      	ldr	r3, [r7, #12]
 8026ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8026ee4:	68bb      	ldr	r3, [r7, #8]
 8026ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8026ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8026eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8026ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8026ef2:	4a04      	ldr	r2, [pc, #16]	; (8026f04 <__NVIC_SetPriorityGrouping+0x44>)
 8026ef4:	68bb      	ldr	r3, [r7, #8]
 8026ef6:	60d3      	str	r3, [r2, #12]
}
 8026ef8:	bf00      	nop
 8026efa:	3714      	adds	r7, #20
 8026efc:	46bd      	mov	sp, r7
 8026efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f02:	4770      	bx	lr
 8026f04:	e000ed00 	.word	0xe000ed00

08026f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8026f08:	b480      	push	{r7}
 8026f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8026f0c:	4b04      	ldr	r3, [pc, #16]	; (8026f20 <__NVIC_GetPriorityGrouping+0x18>)
 8026f0e:	68db      	ldr	r3, [r3, #12]
 8026f10:	0a1b      	lsrs	r3, r3, #8
 8026f12:	f003 0307 	and.w	r3, r3, #7
}
 8026f16:	4618      	mov	r0, r3
 8026f18:	46bd      	mov	sp, r7
 8026f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f1e:	4770      	bx	lr
 8026f20:	e000ed00 	.word	0xe000ed00

08026f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026f24:	b480      	push	{r7}
 8026f26:	b083      	sub	sp, #12
 8026f28:	af00      	add	r7, sp, #0
 8026f2a:	4603      	mov	r3, r0
 8026f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026f32:	2b00      	cmp	r3, #0
 8026f34:	db0b      	blt.n	8026f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8026f36:	79fb      	ldrb	r3, [r7, #7]
 8026f38:	f003 021f 	and.w	r2, r3, #31
 8026f3c:	4907      	ldr	r1, [pc, #28]	; (8026f5c <__NVIC_EnableIRQ+0x38>)
 8026f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026f42:	095b      	lsrs	r3, r3, #5
 8026f44:	2001      	movs	r0, #1
 8026f46:	fa00 f202 	lsl.w	r2, r0, r2
 8026f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8026f4e:	bf00      	nop
 8026f50:	370c      	adds	r7, #12
 8026f52:	46bd      	mov	sp, r7
 8026f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f58:	4770      	bx	lr
 8026f5a:	bf00      	nop
 8026f5c:	e000e100 	.word	0xe000e100

08026f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8026f60:	b480      	push	{r7}
 8026f62:	b083      	sub	sp, #12
 8026f64:	af00      	add	r7, sp, #0
 8026f66:	4603      	mov	r3, r0
 8026f68:	6039      	str	r1, [r7, #0]
 8026f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026f70:	2b00      	cmp	r3, #0
 8026f72:	db0a      	blt.n	8026f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026f74:	683b      	ldr	r3, [r7, #0]
 8026f76:	b2da      	uxtb	r2, r3
 8026f78:	490c      	ldr	r1, [pc, #48]	; (8026fac <__NVIC_SetPriority+0x4c>)
 8026f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026f7e:	0112      	lsls	r2, r2, #4
 8026f80:	b2d2      	uxtb	r2, r2
 8026f82:	440b      	add	r3, r1
 8026f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8026f88:	e00a      	b.n	8026fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026f8a:	683b      	ldr	r3, [r7, #0]
 8026f8c:	b2da      	uxtb	r2, r3
 8026f8e:	4908      	ldr	r1, [pc, #32]	; (8026fb0 <__NVIC_SetPriority+0x50>)
 8026f90:	79fb      	ldrb	r3, [r7, #7]
 8026f92:	f003 030f 	and.w	r3, r3, #15
 8026f96:	3b04      	subs	r3, #4
 8026f98:	0112      	lsls	r2, r2, #4
 8026f9a:	b2d2      	uxtb	r2, r2
 8026f9c:	440b      	add	r3, r1
 8026f9e:	761a      	strb	r2, [r3, #24]
}
 8026fa0:	bf00      	nop
 8026fa2:	370c      	adds	r7, #12
 8026fa4:	46bd      	mov	sp, r7
 8026fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026faa:	4770      	bx	lr
 8026fac:	e000e100 	.word	0xe000e100
 8026fb0:	e000ed00 	.word	0xe000ed00

08026fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8026fb4:	b480      	push	{r7}
 8026fb6:	b089      	sub	sp, #36	; 0x24
 8026fb8:	af00      	add	r7, sp, #0
 8026fba:	60f8      	str	r0, [r7, #12]
 8026fbc:	60b9      	str	r1, [r7, #8]
 8026fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8026fc0:	68fb      	ldr	r3, [r7, #12]
 8026fc2:	f003 0307 	and.w	r3, r3, #7
 8026fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8026fc8:	69fb      	ldr	r3, [r7, #28]
 8026fca:	f1c3 0307 	rsb	r3, r3, #7
 8026fce:	2b04      	cmp	r3, #4
 8026fd0:	bf28      	it	cs
 8026fd2:	2304      	movcs	r3, #4
 8026fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8026fd6:	69fb      	ldr	r3, [r7, #28]
 8026fd8:	3304      	adds	r3, #4
 8026fda:	2b06      	cmp	r3, #6
 8026fdc:	d902      	bls.n	8026fe4 <NVIC_EncodePriority+0x30>
 8026fde:	69fb      	ldr	r3, [r7, #28]
 8026fe0:	3b03      	subs	r3, #3
 8026fe2:	e000      	b.n	8026fe6 <NVIC_EncodePriority+0x32>
 8026fe4:	2300      	movs	r3, #0
 8026fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8026fec:	69bb      	ldr	r3, [r7, #24]
 8026fee:	fa02 f303 	lsl.w	r3, r2, r3
 8026ff2:	43da      	mvns	r2, r3
 8026ff4:	68bb      	ldr	r3, [r7, #8]
 8026ff6:	401a      	ands	r2, r3
 8026ff8:	697b      	ldr	r3, [r7, #20]
 8026ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8026ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8027000:	697b      	ldr	r3, [r7, #20]
 8027002:	fa01 f303 	lsl.w	r3, r1, r3
 8027006:	43d9      	mvns	r1, r3
 8027008:	687b      	ldr	r3, [r7, #4]
 802700a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802700c:	4313      	orrs	r3, r2
         );
}
 802700e:	4618      	mov	r0, r3
 8027010:	3724      	adds	r7, #36	; 0x24
 8027012:	46bd      	mov	sp, r7
 8027014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027018:	4770      	bx	lr
	...

0802701c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802701c:	b580      	push	{r7, lr}
 802701e:	b082      	sub	sp, #8
 8027020:	af00      	add	r7, sp, #0
 8027022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8027024:	687b      	ldr	r3, [r7, #4]
 8027026:	3b01      	subs	r3, #1
 8027028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802702c:	d301      	bcc.n	8027032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802702e:	2301      	movs	r3, #1
 8027030:	e00f      	b.n	8027052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8027032:	4a0a      	ldr	r2, [pc, #40]	; (802705c <SysTick_Config+0x40>)
 8027034:	687b      	ldr	r3, [r7, #4]
 8027036:	3b01      	subs	r3, #1
 8027038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802703a:	210f      	movs	r1, #15
 802703c:	f04f 30ff 	mov.w	r0, #4294967295
 8027040:	f7ff ff8e 	bl	8026f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8027044:	4b05      	ldr	r3, [pc, #20]	; (802705c <SysTick_Config+0x40>)
 8027046:	2200      	movs	r2, #0
 8027048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802704a:	4b04      	ldr	r3, [pc, #16]	; (802705c <SysTick_Config+0x40>)
 802704c:	2207      	movs	r2, #7
 802704e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8027050:	2300      	movs	r3, #0
}
 8027052:	4618      	mov	r0, r3
 8027054:	3708      	adds	r7, #8
 8027056:	46bd      	mov	sp, r7
 8027058:	bd80      	pop	{r7, pc}
 802705a:	bf00      	nop
 802705c:	e000e010 	.word	0xe000e010

08027060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8027060:	b580      	push	{r7, lr}
 8027062:	b082      	sub	sp, #8
 8027064:	af00      	add	r7, sp, #0
 8027066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8027068:	6878      	ldr	r0, [r7, #4]
 802706a:	f7ff ff29 	bl	8026ec0 <__NVIC_SetPriorityGrouping>
}
 802706e:	bf00      	nop
 8027070:	3708      	adds	r7, #8
 8027072:	46bd      	mov	sp, r7
 8027074:	bd80      	pop	{r7, pc}

08027076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8027076:	b580      	push	{r7, lr}
 8027078:	b086      	sub	sp, #24
 802707a:	af00      	add	r7, sp, #0
 802707c:	4603      	mov	r3, r0
 802707e:	60b9      	str	r1, [r7, #8]
 8027080:	607a      	str	r2, [r7, #4]
 8027082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8027084:	2300      	movs	r3, #0
 8027086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8027088:	f7ff ff3e 	bl	8026f08 <__NVIC_GetPriorityGrouping>
 802708c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802708e:	687a      	ldr	r2, [r7, #4]
 8027090:	68b9      	ldr	r1, [r7, #8]
 8027092:	6978      	ldr	r0, [r7, #20]
 8027094:	f7ff ff8e 	bl	8026fb4 <NVIC_EncodePriority>
 8027098:	4602      	mov	r2, r0
 802709a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802709e:	4611      	mov	r1, r2
 80270a0:	4618      	mov	r0, r3
 80270a2:	f7ff ff5d 	bl	8026f60 <__NVIC_SetPriority>
}
 80270a6:	bf00      	nop
 80270a8:	3718      	adds	r7, #24
 80270aa:	46bd      	mov	sp, r7
 80270ac:	bd80      	pop	{r7, pc}

080270ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80270ae:	b580      	push	{r7, lr}
 80270b0:	b082      	sub	sp, #8
 80270b2:	af00      	add	r7, sp, #0
 80270b4:	4603      	mov	r3, r0
 80270b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80270b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80270bc:	4618      	mov	r0, r3
 80270be:	f7ff ff31 	bl	8026f24 <__NVIC_EnableIRQ>
}
 80270c2:	bf00      	nop
 80270c4:	3708      	adds	r7, #8
 80270c6:	46bd      	mov	sp, r7
 80270c8:	bd80      	pop	{r7, pc}

080270ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80270ca:	b580      	push	{r7, lr}
 80270cc:	b082      	sub	sp, #8
 80270ce:	af00      	add	r7, sp, #0
 80270d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80270d2:	6878      	ldr	r0, [r7, #4]
 80270d4:	f7ff ffa2 	bl	802701c <SysTick_Config>
 80270d8:	4603      	mov	r3, r0
}
 80270da:	4618      	mov	r0, r3
 80270dc:	3708      	adds	r7, #8
 80270de:	46bd      	mov	sp, r7
 80270e0:	bd80      	pop	{r7, pc}

080270e2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80270e2:	b580      	push	{r7, lr}
 80270e4:	b086      	sub	sp, #24
 80270e6:	af00      	add	r7, sp, #0
 80270e8:	60f8      	str	r0, [r7, #12]
 80270ea:	60b9      	str	r1, [r7, #8]
 80270ec:	607a      	str	r2, [r7, #4]
 80270ee:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80270f0:	2300      	movs	r3, #0
 80270f2:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80270f4:	68fb      	ldr	r3, [r7, #12]
 80270f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80270f8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80270fa:	68fb      	ldr	r3, [r7, #12]
 80270fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8027100:	2b01      	cmp	r3, #1
 8027102:	d101      	bne.n	8027108 <HAL_DMA_Start_IT+0x26>
 8027104:	2302      	movs	r3, #2
 8027106:	e040      	b.n	802718a <HAL_DMA_Start_IT+0xa8>
 8027108:	68fb      	ldr	r3, [r7, #12]
 802710a:	2201      	movs	r2, #1
 802710c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8027110:	68fb      	ldr	r3, [r7, #12]
 8027112:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8027116:	b2db      	uxtb	r3, r3
 8027118:	2b01      	cmp	r3, #1
 802711a:	d12f      	bne.n	802717c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802711c:	68fb      	ldr	r3, [r7, #12]
 802711e:	2202      	movs	r2, #2
 8027120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8027124:	68fb      	ldr	r3, [r7, #12]
 8027126:	2200      	movs	r2, #0
 8027128:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802712a:	683b      	ldr	r3, [r7, #0]
 802712c:	687a      	ldr	r2, [r7, #4]
 802712e:	68b9      	ldr	r1, [r7, #8]
 8027130:	68f8      	ldr	r0, [r7, #12]
 8027132:	f000 f82e 	bl	8027192 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8027136:	68fb      	ldr	r3, [r7, #12]
 8027138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802713a:	223f      	movs	r2, #63	; 0x3f
 802713c:	409a      	lsls	r2, r3
 802713e:	693b      	ldr	r3, [r7, #16]
 8027140:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8027142:	68fb      	ldr	r3, [r7, #12]
 8027144:	681b      	ldr	r3, [r3, #0]
 8027146:	681a      	ldr	r2, [r3, #0]
 8027148:	68fb      	ldr	r3, [r7, #12]
 802714a:	681b      	ldr	r3, [r3, #0]
 802714c:	f042 0216 	orr.w	r2, r2, #22
 8027150:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8027152:	68fb      	ldr	r3, [r7, #12]
 8027154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027156:	2b00      	cmp	r3, #0
 8027158:	d007      	beq.n	802716a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 802715a:	68fb      	ldr	r3, [r7, #12]
 802715c:	681b      	ldr	r3, [r3, #0]
 802715e:	681a      	ldr	r2, [r3, #0]
 8027160:	68fb      	ldr	r3, [r7, #12]
 8027162:	681b      	ldr	r3, [r3, #0]
 8027164:	f042 0208 	orr.w	r2, r2, #8
 8027168:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802716a:	68fb      	ldr	r3, [r7, #12]
 802716c:	681b      	ldr	r3, [r3, #0]
 802716e:	681a      	ldr	r2, [r3, #0]
 8027170:	68fb      	ldr	r3, [r7, #12]
 8027172:	681b      	ldr	r3, [r3, #0]
 8027174:	f042 0201 	orr.w	r2, r2, #1
 8027178:	601a      	str	r2, [r3, #0]
 802717a:	e005      	b.n	8027188 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 802717c:	68fb      	ldr	r3, [r7, #12]
 802717e:	2200      	movs	r2, #0
 8027180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8027184:	2302      	movs	r3, #2
 8027186:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8027188:	7dfb      	ldrb	r3, [r7, #23]
}
 802718a:	4618      	mov	r0, r3
 802718c:	3718      	adds	r7, #24
 802718e:	46bd      	mov	sp, r7
 8027190:	bd80      	pop	{r7, pc}

08027192 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8027192:	b480      	push	{r7}
 8027194:	b085      	sub	sp, #20
 8027196:	af00      	add	r7, sp, #0
 8027198:	60f8      	str	r0, [r7, #12]
 802719a:	60b9      	str	r1, [r7, #8]
 802719c:	607a      	str	r2, [r7, #4]
 802719e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80271a0:	68fb      	ldr	r3, [r7, #12]
 80271a2:	681b      	ldr	r3, [r3, #0]
 80271a4:	681a      	ldr	r2, [r3, #0]
 80271a6:	68fb      	ldr	r3, [r7, #12]
 80271a8:	681b      	ldr	r3, [r3, #0]
 80271aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80271ae:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80271b0:	68fb      	ldr	r3, [r7, #12]
 80271b2:	681b      	ldr	r3, [r3, #0]
 80271b4:	683a      	ldr	r2, [r7, #0]
 80271b6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80271b8:	68fb      	ldr	r3, [r7, #12]
 80271ba:	689b      	ldr	r3, [r3, #8]
 80271bc:	2b40      	cmp	r3, #64	; 0x40
 80271be:	d108      	bne.n	80271d2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80271c0:	68fb      	ldr	r3, [r7, #12]
 80271c2:	681b      	ldr	r3, [r3, #0]
 80271c4:	687a      	ldr	r2, [r7, #4]
 80271c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80271c8:	68fb      	ldr	r3, [r7, #12]
 80271ca:	681b      	ldr	r3, [r3, #0]
 80271cc:	68ba      	ldr	r2, [r7, #8]
 80271ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80271d0:	e007      	b.n	80271e2 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80271d2:	68fb      	ldr	r3, [r7, #12]
 80271d4:	681b      	ldr	r3, [r3, #0]
 80271d6:	68ba      	ldr	r2, [r7, #8]
 80271d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80271da:	68fb      	ldr	r3, [r7, #12]
 80271dc:	681b      	ldr	r3, [r3, #0]
 80271de:	687a      	ldr	r2, [r7, #4]
 80271e0:	60da      	str	r2, [r3, #12]
}
 80271e2:	bf00      	nop
 80271e4:	3714      	adds	r7, #20
 80271e6:	46bd      	mov	sp, r7
 80271e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271ec:	4770      	bx	lr
	...

080271f0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80271f0:	b580      	push	{r7, lr}
 80271f2:	b086      	sub	sp, #24
 80271f4:	af00      	add	r7, sp, #0
 80271f6:	60f8      	str	r0, [r7, #12]
 80271f8:	60b9      	str	r1, [r7, #8]
 80271fa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80271fe:	2301      	movs	r3, #1
 8027200:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8027202:	4b23      	ldr	r3, [pc, #140]	; (8027290 <HAL_FLASH_Program+0xa0>)
 8027204:	7e1b      	ldrb	r3, [r3, #24]
 8027206:	2b01      	cmp	r3, #1
 8027208:	d101      	bne.n	802720e <HAL_FLASH_Program+0x1e>
 802720a:	2302      	movs	r3, #2
 802720c:	e03b      	b.n	8027286 <HAL_FLASH_Program+0x96>
 802720e:	4b20      	ldr	r3, [pc, #128]	; (8027290 <HAL_FLASH_Program+0xa0>)
 8027210:	2201      	movs	r2, #1
 8027212:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027214:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027218:	f000 f870 	bl	80272fc <FLASH_WaitForLastOperation>
 802721c:	4603      	mov	r3, r0
 802721e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8027220:	7dfb      	ldrb	r3, [r7, #23]
 8027222:	2b00      	cmp	r3, #0
 8027224:	d12b      	bne.n	802727e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8027226:	68fb      	ldr	r3, [r7, #12]
 8027228:	2b00      	cmp	r3, #0
 802722a:	d105      	bne.n	8027238 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 802722c:	783b      	ldrb	r3, [r7, #0]
 802722e:	4619      	mov	r1, r3
 8027230:	68b8      	ldr	r0, [r7, #8]
 8027232:	f000 f919 	bl	8027468 <FLASH_Program_Byte>
 8027236:	e016      	b.n	8027266 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8027238:	68fb      	ldr	r3, [r7, #12]
 802723a:	2b01      	cmp	r3, #1
 802723c:	d105      	bne.n	802724a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 802723e:	883b      	ldrh	r3, [r7, #0]
 8027240:	4619      	mov	r1, r3
 8027242:	68b8      	ldr	r0, [r7, #8]
 8027244:	f000 f8ec 	bl	8027420 <FLASH_Program_HalfWord>
 8027248:	e00d      	b.n	8027266 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 802724a:	68fb      	ldr	r3, [r7, #12]
 802724c:	2b02      	cmp	r3, #2
 802724e:	d105      	bne.n	802725c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8027250:	683b      	ldr	r3, [r7, #0]
 8027252:	4619      	mov	r1, r3
 8027254:	68b8      	ldr	r0, [r7, #8]
 8027256:	f000 f8c1 	bl	80273dc <FLASH_Program_Word>
 802725a:	e004      	b.n	8027266 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 802725c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8027260:	68b8      	ldr	r0, [r7, #8]
 8027262:	f000 f88b 	bl	802737c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027266:	f24c 3050 	movw	r0, #50000	; 0xc350
 802726a:	f000 f847 	bl	80272fc <FLASH_WaitForLastOperation>
 802726e:	4603      	mov	r3, r0
 8027270:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8027272:	4b08      	ldr	r3, [pc, #32]	; (8027294 <HAL_FLASH_Program+0xa4>)
 8027274:	691b      	ldr	r3, [r3, #16]
 8027276:	4a07      	ldr	r2, [pc, #28]	; (8027294 <HAL_FLASH_Program+0xa4>)
 8027278:	f023 0301 	bic.w	r3, r3, #1
 802727c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802727e:	4b04      	ldr	r3, [pc, #16]	; (8027290 <HAL_FLASH_Program+0xa0>)
 8027280:	2200      	movs	r2, #0
 8027282:	761a      	strb	r2, [r3, #24]
  
  return status;
 8027284:	7dfb      	ldrb	r3, [r7, #23]
}
 8027286:	4618      	mov	r0, r3
 8027288:	3718      	adds	r7, #24
 802728a:	46bd      	mov	sp, r7
 802728c:	bd80      	pop	{r7, pc}
 802728e:	bf00      	nop
 8027290:	20000b30 	.word	0x20000b30
 8027294:	40023c00 	.word	0x40023c00

08027298 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8027298:	b480      	push	{r7}
 802729a:	b083      	sub	sp, #12
 802729c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 802729e:	2300      	movs	r3, #0
 80272a0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80272a2:	4b0b      	ldr	r3, [pc, #44]	; (80272d0 <HAL_FLASH_Unlock+0x38>)
 80272a4:	691b      	ldr	r3, [r3, #16]
 80272a6:	2b00      	cmp	r3, #0
 80272a8:	da0b      	bge.n	80272c2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80272aa:	4b09      	ldr	r3, [pc, #36]	; (80272d0 <HAL_FLASH_Unlock+0x38>)
 80272ac:	4a09      	ldr	r2, [pc, #36]	; (80272d4 <HAL_FLASH_Unlock+0x3c>)
 80272ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80272b0:	4b07      	ldr	r3, [pc, #28]	; (80272d0 <HAL_FLASH_Unlock+0x38>)
 80272b2:	4a09      	ldr	r2, [pc, #36]	; (80272d8 <HAL_FLASH_Unlock+0x40>)
 80272b4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80272b6:	4b06      	ldr	r3, [pc, #24]	; (80272d0 <HAL_FLASH_Unlock+0x38>)
 80272b8:	691b      	ldr	r3, [r3, #16]
 80272ba:	2b00      	cmp	r3, #0
 80272bc:	da01      	bge.n	80272c2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80272be:	2301      	movs	r3, #1
 80272c0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80272c2:	79fb      	ldrb	r3, [r7, #7]
}
 80272c4:	4618      	mov	r0, r3
 80272c6:	370c      	adds	r7, #12
 80272c8:	46bd      	mov	sp, r7
 80272ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272ce:	4770      	bx	lr
 80272d0:	40023c00 	.word	0x40023c00
 80272d4:	45670123 	.word	0x45670123
 80272d8:	cdef89ab 	.word	0xcdef89ab

080272dc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80272dc:	b480      	push	{r7}
 80272de:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80272e0:	4b05      	ldr	r3, [pc, #20]	; (80272f8 <HAL_FLASH_Lock+0x1c>)
 80272e2:	691b      	ldr	r3, [r3, #16]
 80272e4:	4a04      	ldr	r2, [pc, #16]	; (80272f8 <HAL_FLASH_Lock+0x1c>)
 80272e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80272ea:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80272ec:	2300      	movs	r3, #0
}
 80272ee:	4618      	mov	r0, r3
 80272f0:	46bd      	mov	sp, r7
 80272f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272f6:	4770      	bx	lr
 80272f8:	40023c00 	.word	0x40023c00

080272fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80272fc:	b580      	push	{r7, lr}
 80272fe:	b084      	sub	sp, #16
 8027300:	af00      	add	r7, sp, #0
 8027302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027304:	2300      	movs	r3, #0
 8027306:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8027308:	4b1a      	ldr	r3, [pc, #104]	; (8027374 <FLASH_WaitForLastOperation+0x78>)
 802730a:	2200      	movs	r2, #0
 802730c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 802730e:	f7ff f9b5 	bl	802667c <HAL_GetTick>
 8027312:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027314:	e010      	b.n	8027338 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8027316:	687b      	ldr	r3, [r7, #4]
 8027318:	f1b3 3fff 	cmp.w	r3, #4294967295
 802731c:	d00c      	beq.n	8027338 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 802731e:	687b      	ldr	r3, [r7, #4]
 8027320:	2b00      	cmp	r3, #0
 8027322:	d007      	beq.n	8027334 <FLASH_WaitForLastOperation+0x38>
 8027324:	f7ff f9aa 	bl	802667c <HAL_GetTick>
 8027328:	4602      	mov	r2, r0
 802732a:	68fb      	ldr	r3, [r7, #12]
 802732c:	1ad3      	subs	r3, r2, r3
 802732e:	687a      	ldr	r2, [r7, #4]
 8027330:	429a      	cmp	r2, r3
 8027332:	d201      	bcs.n	8027338 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8027334:	2303      	movs	r3, #3
 8027336:	e019      	b.n	802736c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027338:	4b0f      	ldr	r3, [pc, #60]	; (8027378 <FLASH_WaitForLastOperation+0x7c>)
 802733a:	68db      	ldr	r3, [r3, #12]
 802733c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027340:	2b00      	cmp	r3, #0
 8027342:	d1e8      	bne.n	8027316 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8027344:	4b0c      	ldr	r3, [pc, #48]	; (8027378 <FLASH_WaitForLastOperation+0x7c>)
 8027346:	68db      	ldr	r3, [r3, #12]
 8027348:	f003 0301 	and.w	r3, r3, #1
 802734c:	2b00      	cmp	r3, #0
 802734e:	d002      	beq.n	8027356 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8027350:	4b09      	ldr	r3, [pc, #36]	; (8027378 <FLASH_WaitForLastOperation+0x7c>)
 8027352:	2201      	movs	r2, #1
 8027354:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8027356:	4b08      	ldr	r3, [pc, #32]	; (8027378 <FLASH_WaitForLastOperation+0x7c>)
 8027358:	68db      	ldr	r3, [r3, #12]
 802735a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 802735e:	2b00      	cmp	r3, #0
 8027360:	d003      	beq.n	802736a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8027362:	f000 f8a3 	bl	80274ac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8027366:	2301      	movs	r3, #1
 8027368:	e000      	b.n	802736c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 802736a:	2300      	movs	r3, #0
  
}  
 802736c:	4618      	mov	r0, r3
 802736e:	3710      	adds	r7, #16
 8027370:	46bd      	mov	sp, r7
 8027372:	bd80      	pop	{r7, pc}
 8027374:	20000b30 	.word	0x20000b30
 8027378:	40023c00 	.word	0x40023c00

0802737c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 802737c:	b490      	push	{r4, r7}
 802737e:	b084      	sub	sp, #16
 8027380:	af00      	add	r7, sp, #0
 8027382:	60f8      	str	r0, [r7, #12]
 8027384:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027388:	4b13      	ldr	r3, [pc, #76]	; (80273d8 <FLASH_Program_DoubleWord+0x5c>)
 802738a:	691b      	ldr	r3, [r3, #16]
 802738c:	4a12      	ldr	r2, [pc, #72]	; (80273d8 <FLASH_Program_DoubleWord+0x5c>)
 802738e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027392:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8027394:	4b10      	ldr	r3, [pc, #64]	; (80273d8 <FLASH_Program_DoubleWord+0x5c>)
 8027396:	691b      	ldr	r3, [r3, #16]
 8027398:	4a0f      	ldr	r2, [pc, #60]	; (80273d8 <FLASH_Program_DoubleWord+0x5c>)
 802739a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802739e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80273a0:	4b0d      	ldr	r3, [pc, #52]	; (80273d8 <FLASH_Program_DoubleWord+0x5c>)
 80273a2:	691b      	ldr	r3, [r3, #16]
 80273a4:	4a0c      	ldr	r2, [pc, #48]	; (80273d8 <FLASH_Program_DoubleWord+0x5c>)
 80273a6:	f043 0301 	orr.w	r3, r3, #1
 80273aa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80273ac:	68fb      	ldr	r3, [r7, #12]
 80273ae:	683a      	ldr	r2, [r7, #0]
 80273b0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80273b2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80273b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80273ba:	f04f 0300 	mov.w	r3, #0
 80273be:	f04f 0400 	mov.w	r4, #0
 80273c2:	0013      	movs	r3, r2
 80273c4:	2400      	movs	r4, #0
 80273c6:	68fa      	ldr	r2, [r7, #12]
 80273c8:	3204      	adds	r2, #4
 80273ca:	6013      	str	r3, [r2, #0]
}
 80273cc:	bf00      	nop
 80273ce:	3710      	adds	r7, #16
 80273d0:	46bd      	mov	sp, r7
 80273d2:	bc90      	pop	{r4, r7}
 80273d4:	4770      	bx	lr
 80273d6:	bf00      	nop
 80273d8:	40023c00 	.word	0x40023c00

080273dc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80273dc:	b480      	push	{r7}
 80273de:	b083      	sub	sp, #12
 80273e0:	af00      	add	r7, sp, #0
 80273e2:	6078      	str	r0, [r7, #4]
 80273e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80273e6:	4b0d      	ldr	r3, [pc, #52]	; (802741c <FLASH_Program_Word+0x40>)
 80273e8:	691b      	ldr	r3, [r3, #16]
 80273ea:	4a0c      	ldr	r2, [pc, #48]	; (802741c <FLASH_Program_Word+0x40>)
 80273ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80273f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80273f2:	4b0a      	ldr	r3, [pc, #40]	; (802741c <FLASH_Program_Word+0x40>)
 80273f4:	691b      	ldr	r3, [r3, #16]
 80273f6:	4a09      	ldr	r2, [pc, #36]	; (802741c <FLASH_Program_Word+0x40>)
 80273f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80273fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80273fe:	4b07      	ldr	r3, [pc, #28]	; (802741c <FLASH_Program_Word+0x40>)
 8027400:	691b      	ldr	r3, [r3, #16]
 8027402:	4a06      	ldr	r2, [pc, #24]	; (802741c <FLASH_Program_Word+0x40>)
 8027404:	f043 0301 	orr.w	r3, r3, #1
 8027408:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 802740a:	687b      	ldr	r3, [r7, #4]
 802740c:	683a      	ldr	r2, [r7, #0]
 802740e:	601a      	str	r2, [r3, #0]
}
 8027410:	bf00      	nop
 8027412:	370c      	adds	r7, #12
 8027414:	46bd      	mov	sp, r7
 8027416:	f85d 7b04 	ldr.w	r7, [sp], #4
 802741a:	4770      	bx	lr
 802741c:	40023c00 	.word	0x40023c00

08027420 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8027420:	b480      	push	{r7}
 8027422:	b083      	sub	sp, #12
 8027424:	af00      	add	r7, sp, #0
 8027426:	6078      	str	r0, [r7, #4]
 8027428:	460b      	mov	r3, r1
 802742a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802742c:	4b0d      	ldr	r3, [pc, #52]	; (8027464 <FLASH_Program_HalfWord+0x44>)
 802742e:	691b      	ldr	r3, [r3, #16]
 8027430:	4a0c      	ldr	r2, [pc, #48]	; (8027464 <FLASH_Program_HalfWord+0x44>)
 8027432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027436:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8027438:	4b0a      	ldr	r3, [pc, #40]	; (8027464 <FLASH_Program_HalfWord+0x44>)
 802743a:	691b      	ldr	r3, [r3, #16]
 802743c:	4a09      	ldr	r2, [pc, #36]	; (8027464 <FLASH_Program_HalfWord+0x44>)
 802743e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027442:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027444:	4b07      	ldr	r3, [pc, #28]	; (8027464 <FLASH_Program_HalfWord+0x44>)
 8027446:	691b      	ldr	r3, [r3, #16]
 8027448:	4a06      	ldr	r2, [pc, #24]	; (8027464 <FLASH_Program_HalfWord+0x44>)
 802744a:	f043 0301 	orr.w	r3, r3, #1
 802744e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8027450:	687b      	ldr	r3, [r7, #4]
 8027452:	887a      	ldrh	r2, [r7, #2]
 8027454:	801a      	strh	r2, [r3, #0]
}
 8027456:	bf00      	nop
 8027458:	370c      	adds	r7, #12
 802745a:	46bd      	mov	sp, r7
 802745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027460:	4770      	bx	lr
 8027462:	bf00      	nop
 8027464:	40023c00 	.word	0x40023c00

08027468 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8027468:	b480      	push	{r7}
 802746a:	b083      	sub	sp, #12
 802746c:	af00      	add	r7, sp, #0
 802746e:	6078      	str	r0, [r7, #4]
 8027470:	460b      	mov	r3, r1
 8027472:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027474:	4b0c      	ldr	r3, [pc, #48]	; (80274a8 <FLASH_Program_Byte+0x40>)
 8027476:	691b      	ldr	r3, [r3, #16]
 8027478:	4a0b      	ldr	r2, [pc, #44]	; (80274a8 <FLASH_Program_Byte+0x40>)
 802747a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802747e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8027480:	4b09      	ldr	r3, [pc, #36]	; (80274a8 <FLASH_Program_Byte+0x40>)
 8027482:	4a09      	ldr	r2, [pc, #36]	; (80274a8 <FLASH_Program_Byte+0x40>)
 8027484:	691b      	ldr	r3, [r3, #16]
 8027486:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027488:	4b07      	ldr	r3, [pc, #28]	; (80274a8 <FLASH_Program_Byte+0x40>)
 802748a:	691b      	ldr	r3, [r3, #16]
 802748c:	4a06      	ldr	r2, [pc, #24]	; (80274a8 <FLASH_Program_Byte+0x40>)
 802748e:	f043 0301 	orr.w	r3, r3, #1
 8027492:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8027494:	687b      	ldr	r3, [r7, #4]
 8027496:	78fa      	ldrb	r2, [r7, #3]
 8027498:	701a      	strb	r2, [r3, #0]
}
 802749a:	bf00      	nop
 802749c:	370c      	adds	r7, #12
 802749e:	46bd      	mov	sp, r7
 80274a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274a4:	4770      	bx	lr
 80274a6:	bf00      	nop
 80274a8:	40023c00 	.word	0x40023c00

080274ac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80274ac:	b480      	push	{r7}
 80274ae:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80274b0:	4b27      	ldr	r3, [pc, #156]	; (8027550 <FLASH_SetErrorCode+0xa4>)
 80274b2:	68db      	ldr	r3, [r3, #12]
 80274b4:	f003 0310 	and.w	r3, r3, #16
 80274b8:	2b00      	cmp	r3, #0
 80274ba:	d008      	beq.n	80274ce <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80274bc:	4b25      	ldr	r3, [pc, #148]	; (8027554 <FLASH_SetErrorCode+0xa8>)
 80274be:	69db      	ldr	r3, [r3, #28]
 80274c0:	f043 0310 	orr.w	r3, r3, #16
 80274c4:	4a23      	ldr	r2, [pc, #140]	; (8027554 <FLASH_SetErrorCode+0xa8>)
 80274c6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80274c8:	4b21      	ldr	r3, [pc, #132]	; (8027550 <FLASH_SetErrorCode+0xa4>)
 80274ca:	2210      	movs	r2, #16
 80274cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80274ce:	4b20      	ldr	r3, [pc, #128]	; (8027550 <FLASH_SetErrorCode+0xa4>)
 80274d0:	68db      	ldr	r3, [r3, #12]
 80274d2:	f003 0320 	and.w	r3, r3, #32
 80274d6:	2b00      	cmp	r3, #0
 80274d8:	d008      	beq.n	80274ec <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80274da:	4b1e      	ldr	r3, [pc, #120]	; (8027554 <FLASH_SetErrorCode+0xa8>)
 80274dc:	69db      	ldr	r3, [r3, #28]
 80274de:	f043 0308 	orr.w	r3, r3, #8
 80274e2:	4a1c      	ldr	r2, [pc, #112]	; (8027554 <FLASH_SetErrorCode+0xa8>)
 80274e4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80274e6:	4b1a      	ldr	r3, [pc, #104]	; (8027550 <FLASH_SetErrorCode+0xa4>)
 80274e8:	2220      	movs	r2, #32
 80274ea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80274ec:	4b18      	ldr	r3, [pc, #96]	; (8027550 <FLASH_SetErrorCode+0xa4>)
 80274ee:	68db      	ldr	r3, [r3, #12]
 80274f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80274f4:	2b00      	cmp	r3, #0
 80274f6:	d008      	beq.n	802750a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80274f8:	4b16      	ldr	r3, [pc, #88]	; (8027554 <FLASH_SetErrorCode+0xa8>)
 80274fa:	69db      	ldr	r3, [r3, #28]
 80274fc:	f043 0304 	orr.w	r3, r3, #4
 8027500:	4a14      	ldr	r2, [pc, #80]	; (8027554 <FLASH_SetErrorCode+0xa8>)
 8027502:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8027504:	4b12      	ldr	r3, [pc, #72]	; (8027550 <FLASH_SetErrorCode+0xa4>)
 8027506:	2240      	movs	r2, #64	; 0x40
 8027508:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 802750a:	4b11      	ldr	r3, [pc, #68]	; (8027550 <FLASH_SetErrorCode+0xa4>)
 802750c:	68db      	ldr	r3, [r3, #12]
 802750e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027512:	2b00      	cmp	r3, #0
 8027514:	d008      	beq.n	8027528 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8027516:	4b0f      	ldr	r3, [pc, #60]	; (8027554 <FLASH_SetErrorCode+0xa8>)
 8027518:	69db      	ldr	r3, [r3, #28]
 802751a:	f043 0302 	orr.w	r3, r3, #2
 802751e:	4a0d      	ldr	r2, [pc, #52]	; (8027554 <FLASH_SetErrorCode+0xa8>)
 8027520:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8027522:	4b0b      	ldr	r3, [pc, #44]	; (8027550 <FLASH_SetErrorCode+0xa4>)
 8027524:	2280      	movs	r2, #128	; 0x80
 8027526:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8027528:	4b09      	ldr	r3, [pc, #36]	; (8027550 <FLASH_SetErrorCode+0xa4>)
 802752a:	68db      	ldr	r3, [r3, #12]
 802752c:	f003 0302 	and.w	r3, r3, #2
 8027530:	2b00      	cmp	r3, #0
 8027532:	d008      	beq.n	8027546 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8027534:	4b07      	ldr	r3, [pc, #28]	; (8027554 <FLASH_SetErrorCode+0xa8>)
 8027536:	69db      	ldr	r3, [r3, #28]
 8027538:	f043 0320 	orr.w	r3, r3, #32
 802753c:	4a05      	ldr	r2, [pc, #20]	; (8027554 <FLASH_SetErrorCode+0xa8>)
 802753e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8027540:	4b03      	ldr	r3, [pc, #12]	; (8027550 <FLASH_SetErrorCode+0xa4>)
 8027542:	2202      	movs	r2, #2
 8027544:	60da      	str	r2, [r3, #12]
  }
}
 8027546:	bf00      	nop
 8027548:	46bd      	mov	sp, r7
 802754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802754e:	4770      	bx	lr
 8027550:	40023c00 	.word	0x40023c00
 8027554:	20000b30 	.word	0x20000b30

08027558 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8027558:	b580      	push	{r7, lr}
 802755a:	b084      	sub	sp, #16
 802755c:	af00      	add	r7, sp, #0
 802755e:	6078      	str	r0, [r7, #4]
 8027560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8027562:	2301      	movs	r3, #1
 8027564:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8027566:	2300      	movs	r3, #0
 8027568:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802756a:	4b31      	ldr	r3, [pc, #196]	; (8027630 <HAL_FLASHEx_Erase+0xd8>)
 802756c:	7e1b      	ldrb	r3, [r3, #24]
 802756e:	2b01      	cmp	r3, #1
 8027570:	d101      	bne.n	8027576 <HAL_FLASHEx_Erase+0x1e>
 8027572:	2302      	movs	r3, #2
 8027574:	e058      	b.n	8027628 <HAL_FLASHEx_Erase+0xd0>
 8027576:	4b2e      	ldr	r3, [pc, #184]	; (8027630 <HAL_FLASHEx_Erase+0xd8>)
 8027578:	2201      	movs	r2, #1
 802757a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802757c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027580:	f7ff febc 	bl	80272fc <FLASH_WaitForLastOperation>
 8027584:	4603      	mov	r3, r0
 8027586:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8027588:	7bfb      	ldrb	r3, [r7, #15]
 802758a:	2b00      	cmp	r3, #0
 802758c:	d148      	bne.n	8027620 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 802758e:	683b      	ldr	r3, [r7, #0]
 8027590:	f04f 32ff 	mov.w	r2, #4294967295
 8027594:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8027596:	687b      	ldr	r3, [r7, #4]
 8027598:	681b      	ldr	r3, [r3, #0]
 802759a:	2b01      	cmp	r3, #1
 802759c:	d115      	bne.n	80275ca <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 802759e:	687b      	ldr	r3, [r7, #4]
 80275a0:	691b      	ldr	r3, [r3, #16]
 80275a2:	b2da      	uxtb	r2, r3
 80275a4:	687b      	ldr	r3, [r7, #4]
 80275a6:	685b      	ldr	r3, [r3, #4]
 80275a8:	4619      	mov	r1, r3
 80275aa:	4610      	mov	r0, r2
 80275ac:	f000 f844 	bl	8027638 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80275b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80275b4:	f7ff fea2 	bl	80272fc <FLASH_WaitForLastOperation>
 80275b8:	4603      	mov	r3, r0
 80275ba:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80275bc:	4b1d      	ldr	r3, [pc, #116]	; (8027634 <HAL_FLASHEx_Erase+0xdc>)
 80275be:	691b      	ldr	r3, [r3, #16]
 80275c0:	4a1c      	ldr	r2, [pc, #112]	; (8027634 <HAL_FLASHEx_Erase+0xdc>)
 80275c2:	f023 0304 	bic.w	r3, r3, #4
 80275c6:	6113      	str	r3, [r2, #16]
 80275c8:	e028      	b.n	802761c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80275ca:	687b      	ldr	r3, [r7, #4]
 80275cc:	689b      	ldr	r3, [r3, #8]
 80275ce:	60bb      	str	r3, [r7, #8]
 80275d0:	e01c      	b.n	802760c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80275d2:	687b      	ldr	r3, [r7, #4]
 80275d4:	691b      	ldr	r3, [r3, #16]
 80275d6:	b2db      	uxtb	r3, r3
 80275d8:	4619      	mov	r1, r3
 80275da:	68b8      	ldr	r0, [r7, #8]
 80275dc:	f000 f850 	bl	8027680 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80275e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80275e4:	f7ff fe8a 	bl	80272fc <FLASH_WaitForLastOperation>
 80275e8:	4603      	mov	r3, r0
 80275ea:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80275ec:	4b11      	ldr	r3, [pc, #68]	; (8027634 <HAL_FLASHEx_Erase+0xdc>)
 80275ee:	691b      	ldr	r3, [r3, #16]
 80275f0:	4a10      	ldr	r2, [pc, #64]	; (8027634 <HAL_FLASHEx_Erase+0xdc>)
 80275f2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80275f6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80275f8:	7bfb      	ldrb	r3, [r7, #15]
 80275fa:	2b00      	cmp	r3, #0
 80275fc:	d003      	beq.n	8027606 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80275fe:	683b      	ldr	r3, [r7, #0]
 8027600:	68ba      	ldr	r2, [r7, #8]
 8027602:	601a      	str	r2, [r3, #0]
          break;
 8027604:	e00a      	b.n	802761c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8027606:	68bb      	ldr	r3, [r7, #8]
 8027608:	3301      	adds	r3, #1
 802760a:	60bb      	str	r3, [r7, #8]
 802760c:	687b      	ldr	r3, [r7, #4]
 802760e:	68da      	ldr	r2, [r3, #12]
 8027610:	687b      	ldr	r3, [r7, #4]
 8027612:	689b      	ldr	r3, [r3, #8]
 8027614:	4413      	add	r3, r2
 8027616:	68ba      	ldr	r2, [r7, #8]
 8027618:	429a      	cmp	r2, r3
 802761a:	d3da      	bcc.n	80275d2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 802761c:	f000 f878 	bl	8027710 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8027620:	4b03      	ldr	r3, [pc, #12]	; (8027630 <HAL_FLASHEx_Erase+0xd8>)
 8027622:	2200      	movs	r2, #0
 8027624:	761a      	strb	r2, [r3, #24]

  return status;
 8027626:	7bfb      	ldrb	r3, [r7, #15]
}
 8027628:	4618      	mov	r0, r3
 802762a:	3710      	adds	r7, #16
 802762c:	46bd      	mov	sp, r7
 802762e:	bd80      	pop	{r7, pc}
 8027630:	20000b30 	.word	0x20000b30
 8027634:	40023c00 	.word	0x40023c00

08027638 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8027638:	b480      	push	{r7}
 802763a:	b083      	sub	sp, #12
 802763c:	af00      	add	r7, sp, #0
 802763e:	4603      	mov	r3, r0
 8027640:	6039      	str	r1, [r7, #0]
 8027642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027644:	4b0d      	ldr	r3, [pc, #52]	; (802767c <FLASH_MassErase+0x44>)
 8027646:	691b      	ldr	r3, [r3, #16]
 8027648:	4a0c      	ldr	r2, [pc, #48]	; (802767c <FLASH_MassErase+0x44>)
 802764a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802764e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8027650:	4b0a      	ldr	r3, [pc, #40]	; (802767c <FLASH_MassErase+0x44>)
 8027652:	691b      	ldr	r3, [r3, #16]
 8027654:	4a09      	ldr	r2, [pc, #36]	; (802767c <FLASH_MassErase+0x44>)
 8027656:	f043 0304 	orr.w	r3, r3, #4
 802765a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 802765c:	4b07      	ldr	r3, [pc, #28]	; (802767c <FLASH_MassErase+0x44>)
 802765e:	691a      	ldr	r2, [r3, #16]
 8027660:	79fb      	ldrb	r3, [r7, #7]
 8027662:	021b      	lsls	r3, r3, #8
 8027664:	4313      	orrs	r3, r2
 8027666:	4a05      	ldr	r2, [pc, #20]	; (802767c <FLASH_MassErase+0x44>)
 8027668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802766c:	6113      	str	r3, [r2, #16]
}
 802766e:	bf00      	nop
 8027670:	370c      	adds	r7, #12
 8027672:	46bd      	mov	sp, r7
 8027674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027678:	4770      	bx	lr
 802767a:	bf00      	nop
 802767c:	40023c00 	.word	0x40023c00

08027680 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8027680:	b480      	push	{r7}
 8027682:	b085      	sub	sp, #20
 8027684:	af00      	add	r7, sp, #0
 8027686:	6078      	str	r0, [r7, #4]
 8027688:	460b      	mov	r3, r1
 802768a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 802768c:	2300      	movs	r3, #0
 802768e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8027690:	78fb      	ldrb	r3, [r7, #3]
 8027692:	2b00      	cmp	r3, #0
 8027694:	d102      	bne.n	802769c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8027696:	2300      	movs	r3, #0
 8027698:	60fb      	str	r3, [r7, #12]
 802769a:	e010      	b.n	80276be <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 802769c:	78fb      	ldrb	r3, [r7, #3]
 802769e:	2b01      	cmp	r3, #1
 80276a0:	d103      	bne.n	80276aa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80276a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80276a6:	60fb      	str	r3, [r7, #12]
 80276a8:	e009      	b.n	80276be <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80276aa:	78fb      	ldrb	r3, [r7, #3]
 80276ac:	2b02      	cmp	r3, #2
 80276ae:	d103      	bne.n	80276b8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80276b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80276b4:	60fb      	str	r3, [r7, #12]
 80276b6:	e002      	b.n	80276be <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80276b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80276bc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80276be:	4b13      	ldr	r3, [pc, #76]	; (802770c <FLASH_Erase_Sector+0x8c>)
 80276c0:	691b      	ldr	r3, [r3, #16]
 80276c2:	4a12      	ldr	r2, [pc, #72]	; (802770c <FLASH_Erase_Sector+0x8c>)
 80276c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80276c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80276ca:	4b10      	ldr	r3, [pc, #64]	; (802770c <FLASH_Erase_Sector+0x8c>)
 80276cc:	691a      	ldr	r2, [r3, #16]
 80276ce:	490f      	ldr	r1, [pc, #60]	; (802770c <FLASH_Erase_Sector+0x8c>)
 80276d0:	68fb      	ldr	r3, [r7, #12]
 80276d2:	4313      	orrs	r3, r2
 80276d4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80276d6:	4b0d      	ldr	r3, [pc, #52]	; (802770c <FLASH_Erase_Sector+0x8c>)
 80276d8:	691b      	ldr	r3, [r3, #16]
 80276da:	4a0c      	ldr	r2, [pc, #48]	; (802770c <FLASH_Erase_Sector+0x8c>)
 80276dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80276e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80276e2:	4b0a      	ldr	r3, [pc, #40]	; (802770c <FLASH_Erase_Sector+0x8c>)
 80276e4:	691a      	ldr	r2, [r3, #16]
 80276e6:	687b      	ldr	r3, [r7, #4]
 80276e8:	00db      	lsls	r3, r3, #3
 80276ea:	4313      	orrs	r3, r2
 80276ec:	4a07      	ldr	r2, [pc, #28]	; (802770c <FLASH_Erase_Sector+0x8c>)
 80276ee:	f043 0302 	orr.w	r3, r3, #2
 80276f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80276f4:	4b05      	ldr	r3, [pc, #20]	; (802770c <FLASH_Erase_Sector+0x8c>)
 80276f6:	691b      	ldr	r3, [r3, #16]
 80276f8:	4a04      	ldr	r2, [pc, #16]	; (802770c <FLASH_Erase_Sector+0x8c>)
 80276fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80276fe:	6113      	str	r3, [r2, #16]
}
 8027700:	bf00      	nop
 8027702:	3714      	adds	r7, #20
 8027704:	46bd      	mov	sp, r7
 8027706:	f85d 7b04 	ldr.w	r7, [sp], #4
 802770a:	4770      	bx	lr
 802770c:	40023c00 	.word	0x40023c00

08027710 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8027710:	b480      	push	{r7}
 8027712:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8027714:	4b20      	ldr	r3, [pc, #128]	; (8027798 <FLASH_FlushCaches+0x88>)
 8027716:	681b      	ldr	r3, [r3, #0]
 8027718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802771c:	2b00      	cmp	r3, #0
 802771e:	d017      	beq.n	8027750 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8027720:	4b1d      	ldr	r3, [pc, #116]	; (8027798 <FLASH_FlushCaches+0x88>)
 8027722:	681b      	ldr	r3, [r3, #0]
 8027724:	4a1c      	ldr	r2, [pc, #112]	; (8027798 <FLASH_FlushCaches+0x88>)
 8027726:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802772a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 802772c:	4b1a      	ldr	r3, [pc, #104]	; (8027798 <FLASH_FlushCaches+0x88>)
 802772e:	681b      	ldr	r3, [r3, #0]
 8027730:	4a19      	ldr	r2, [pc, #100]	; (8027798 <FLASH_FlushCaches+0x88>)
 8027732:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8027736:	6013      	str	r3, [r2, #0]
 8027738:	4b17      	ldr	r3, [pc, #92]	; (8027798 <FLASH_FlushCaches+0x88>)
 802773a:	681b      	ldr	r3, [r3, #0]
 802773c:	4a16      	ldr	r2, [pc, #88]	; (8027798 <FLASH_FlushCaches+0x88>)
 802773e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8027742:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8027744:	4b14      	ldr	r3, [pc, #80]	; (8027798 <FLASH_FlushCaches+0x88>)
 8027746:	681b      	ldr	r3, [r3, #0]
 8027748:	4a13      	ldr	r2, [pc, #76]	; (8027798 <FLASH_FlushCaches+0x88>)
 802774a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802774e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8027750:	4b11      	ldr	r3, [pc, #68]	; (8027798 <FLASH_FlushCaches+0x88>)
 8027752:	681b      	ldr	r3, [r3, #0]
 8027754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027758:	2b00      	cmp	r3, #0
 802775a:	d017      	beq.n	802778c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 802775c:	4b0e      	ldr	r3, [pc, #56]	; (8027798 <FLASH_FlushCaches+0x88>)
 802775e:	681b      	ldr	r3, [r3, #0]
 8027760:	4a0d      	ldr	r2, [pc, #52]	; (8027798 <FLASH_FlushCaches+0x88>)
 8027762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8027766:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8027768:	4b0b      	ldr	r3, [pc, #44]	; (8027798 <FLASH_FlushCaches+0x88>)
 802776a:	681b      	ldr	r3, [r3, #0]
 802776c:	4a0a      	ldr	r2, [pc, #40]	; (8027798 <FLASH_FlushCaches+0x88>)
 802776e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8027772:	6013      	str	r3, [r2, #0]
 8027774:	4b08      	ldr	r3, [pc, #32]	; (8027798 <FLASH_FlushCaches+0x88>)
 8027776:	681b      	ldr	r3, [r3, #0]
 8027778:	4a07      	ldr	r2, [pc, #28]	; (8027798 <FLASH_FlushCaches+0x88>)
 802777a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802777e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8027780:	4b05      	ldr	r3, [pc, #20]	; (8027798 <FLASH_FlushCaches+0x88>)
 8027782:	681b      	ldr	r3, [r3, #0]
 8027784:	4a04      	ldr	r2, [pc, #16]	; (8027798 <FLASH_FlushCaches+0x88>)
 8027786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802778a:	6013      	str	r3, [r2, #0]
  }
}
 802778c:	bf00      	nop
 802778e:	46bd      	mov	sp, r7
 8027790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027794:	4770      	bx	lr
 8027796:	bf00      	nop
 8027798:	40023c00 	.word	0x40023c00

0802779c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802779c:	b480      	push	{r7}
 802779e:	b089      	sub	sp, #36	; 0x24
 80277a0:	af00      	add	r7, sp, #0
 80277a2:	6078      	str	r0, [r7, #4]
 80277a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80277a6:	2300      	movs	r3, #0
 80277a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80277aa:	2300      	movs	r3, #0
 80277ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80277ae:	2300      	movs	r3, #0
 80277b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80277b2:	2300      	movs	r3, #0
 80277b4:	61fb      	str	r3, [r7, #28]
 80277b6:	e16b      	b.n	8027a90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80277b8:	2201      	movs	r2, #1
 80277ba:	69fb      	ldr	r3, [r7, #28]
 80277bc:	fa02 f303 	lsl.w	r3, r2, r3
 80277c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80277c2:	683b      	ldr	r3, [r7, #0]
 80277c4:	681b      	ldr	r3, [r3, #0]
 80277c6:	697a      	ldr	r2, [r7, #20]
 80277c8:	4013      	ands	r3, r2
 80277ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80277cc:	693a      	ldr	r2, [r7, #16]
 80277ce:	697b      	ldr	r3, [r7, #20]
 80277d0:	429a      	cmp	r2, r3
 80277d2:	f040 815a 	bne.w	8027a8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80277d6:	683b      	ldr	r3, [r7, #0]
 80277d8:	685b      	ldr	r3, [r3, #4]
 80277da:	2b01      	cmp	r3, #1
 80277dc:	d00b      	beq.n	80277f6 <HAL_GPIO_Init+0x5a>
 80277de:	683b      	ldr	r3, [r7, #0]
 80277e0:	685b      	ldr	r3, [r3, #4]
 80277e2:	2b02      	cmp	r3, #2
 80277e4:	d007      	beq.n	80277f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80277e6:	683b      	ldr	r3, [r7, #0]
 80277e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80277ea:	2b11      	cmp	r3, #17
 80277ec:	d003      	beq.n	80277f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80277ee:	683b      	ldr	r3, [r7, #0]
 80277f0:	685b      	ldr	r3, [r3, #4]
 80277f2:	2b12      	cmp	r3, #18
 80277f4:	d130      	bne.n	8027858 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80277f6:	687b      	ldr	r3, [r7, #4]
 80277f8:	689b      	ldr	r3, [r3, #8]
 80277fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80277fc:	69fb      	ldr	r3, [r7, #28]
 80277fe:	005b      	lsls	r3, r3, #1
 8027800:	2203      	movs	r2, #3
 8027802:	fa02 f303 	lsl.w	r3, r2, r3
 8027806:	43db      	mvns	r3, r3
 8027808:	69ba      	ldr	r2, [r7, #24]
 802780a:	4013      	ands	r3, r2
 802780c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802780e:	683b      	ldr	r3, [r7, #0]
 8027810:	68da      	ldr	r2, [r3, #12]
 8027812:	69fb      	ldr	r3, [r7, #28]
 8027814:	005b      	lsls	r3, r3, #1
 8027816:	fa02 f303 	lsl.w	r3, r2, r3
 802781a:	69ba      	ldr	r2, [r7, #24]
 802781c:	4313      	orrs	r3, r2
 802781e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8027820:	687b      	ldr	r3, [r7, #4]
 8027822:	69ba      	ldr	r2, [r7, #24]
 8027824:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8027826:	687b      	ldr	r3, [r7, #4]
 8027828:	685b      	ldr	r3, [r3, #4]
 802782a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802782c:	2201      	movs	r2, #1
 802782e:	69fb      	ldr	r3, [r7, #28]
 8027830:	fa02 f303 	lsl.w	r3, r2, r3
 8027834:	43db      	mvns	r3, r3
 8027836:	69ba      	ldr	r2, [r7, #24]
 8027838:	4013      	ands	r3, r2
 802783a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 802783c:	683b      	ldr	r3, [r7, #0]
 802783e:	685b      	ldr	r3, [r3, #4]
 8027840:	091b      	lsrs	r3, r3, #4
 8027842:	f003 0201 	and.w	r2, r3, #1
 8027846:	69fb      	ldr	r3, [r7, #28]
 8027848:	fa02 f303 	lsl.w	r3, r2, r3
 802784c:	69ba      	ldr	r2, [r7, #24]
 802784e:	4313      	orrs	r3, r2
 8027850:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8027852:	687b      	ldr	r3, [r7, #4]
 8027854:	69ba      	ldr	r2, [r7, #24]
 8027856:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8027858:	687b      	ldr	r3, [r7, #4]
 802785a:	68db      	ldr	r3, [r3, #12]
 802785c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802785e:	69fb      	ldr	r3, [r7, #28]
 8027860:	005b      	lsls	r3, r3, #1
 8027862:	2203      	movs	r2, #3
 8027864:	fa02 f303 	lsl.w	r3, r2, r3
 8027868:	43db      	mvns	r3, r3
 802786a:	69ba      	ldr	r2, [r7, #24]
 802786c:	4013      	ands	r3, r2
 802786e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8027870:	683b      	ldr	r3, [r7, #0]
 8027872:	689a      	ldr	r2, [r3, #8]
 8027874:	69fb      	ldr	r3, [r7, #28]
 8027876:	005b      	lsls	r3, r3, #1
 8027878:	fa02 f303 	lsl.w	r3, r2, r3
 802787c:	69ba      	ldr	r2, [r7, #24]
 802787e:	4313      	orrs	r3, r2
 8027880:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8027882:	687b      	ldr	r3, [r7, #4]
 8027884:	69ba      	ldr	r2, [r7, #24]
 8027886:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027888:	683b      	ldr	r3, [r7, #0]
 802788a:	685b      	ldr	r3, [r3, #4]
 802788c:	2b02      	cmp	r3, #2
 802788e:	d003      	beq.n	8027898 <HAL_GPIO_Init+0xfc>
 8027890:	683b      	ldr	r3, [r7, #0]
 8027892:	685b      	ldr	r3, [r3, #4]
 8027894:	2b12      	cmp	r3, #18
 8027896:	d123      	bne.n	80278e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8027898:	69fb      	ldr	r3, [r7, #28]
 802789a:	08da      	lsrs	r2, r3, #3
 802789c:	687b      	ldr	r3, [r7, #4]
 802789e:	3208      	adds	r2, #8
 80278a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80278a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80278a6:	69fb      	ldr	r3, [r7, #28]
 80278a8:	f003 0307 	and.w	r3, r3, #7
 80278ac:	009b      	lsls	r3, r3, #2
 80278ae:	220f      	movs	r2, #15
 80278b0:	fa02 f303 	lsl.w	r3, r2, r3
 80278b4:	43db      	mvns	r3, r3
 80278b6:	69ba      	ldr	r2, [r7, #24]
 80278b8:	4013      	ands	r3, r2
 80278ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80278bc:	683b      	ldr	r3, [r7, #0]
 80278be:	691a      	ldr	r2, [r3, #16]
 80278c0:	69fb      	ldr	r3, [r7, #28]
 80278c2:	f003 0307 	and.w	r3, r3, #7
 80278c6:	009b      	lsls	r3, r3, #2
 80278c8:	fa02 f303 	lsl.w	r3, r2, r3
 80278cc:	69ba      	ldr	r2, [r7, #24]
 80278ce:	4313      	orrs	r3, r2
 80278d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80278d2:	69fb      	ldr	r3, [r7, #28]
 80278d4:	08da      	lsrs	r2, r3, #3
 80278d6:	687b      	ldr	r3, [r7, #4]
 80278d8:	3208      	adds	r2, #8
 80278da:	69b9      	ldr	r1, [r7, #24]
 80278dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80278e0:	687b      	ldr	r3, [r7, #4]
 80278e2:	681b      	ldr	r3, [r3, #0]
 80278e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80278e6:	69fb      	ldr	r3, [r7, #28]
 80278e8:	005b      	lsls	r3, r3, #1
 80278ea:	2203      	movs	r2, #3
 80278ec:	fa02 f303 	lsl.w	r3, r2, r3
 80278f0:	43db      	mvns	r3, r3
 80278f2:	69ba      	ldr	r2, [r7, #24]
 80278f4:	4013      	ands	r3, r2
 80278f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80278f8:	683b      	ldr	r3, [r7, #0]
 80278fa:	685b      	ldr	r3, [r3, #4]
 80278fc:	f003 0203 	and.w	r2, r3, #3
 8027900:	69fb      	ldr	r3, [r7, #28]
 8027902:	005b      	lsls	r3, r3, #1
 8027904:	fa02 f303 	lsl.w	r3, r2, r3
 8027908:	69ba      	ldr	r2, [r7, #24]
 802790a:	4313      	orrs	r3, r2
 802790c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802790e:	687b      	ldr	r3, [r7, #4]
 8027910:	69ba      	ldr	r2, [r7, #24]
 8027912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8027914:	683b      	ldr	r3, [r7, #0]
 8027916:	685b      	ldr	r3, [r3, #4]
 8027918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802791c:	2b00      	cmp	r3, #0
 802791e:	f000 80b4 	beq.w	8027a8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8027922:	2300      	movs	r3, #0
 8027924:	60fb      	str	r3, [r7, #12]
 8027926:	4b5f      	ldr	r3, [pc, #380]	; (8027aa4 <HAL_GPIO_Init+0x308>)
 8027928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802792a:	4a5e      	ldr	r2, [pc, #376]	; (8027aa4 <HAL_GPIO_Init+0x308>)
 802792c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8027930:	6453      	str	r3, [r2, #68]	; 0x44
 8027932:	4b5c      	ldr	r3, [pc, #368]	; (8027aa4 <HAL_GPIO_Init+0x308>)
 8027934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802793a:	60fb      	str	r3, [r7, #12]
 802793c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802793e:	4a5a      	ldr	r2, [pc, #360]	; (8027aa8 <HAL_GPIO_Init+0x30c>)
 8027940:	69fb      	ldr	r3, [r7, #28]
 8027942:	089b      	lsrs	r3, r3, #2
 8027944:	3302      	adds	r3, #2
 8027946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802794a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802794c:	69fb      	ldr	r3, [r7, #28]
 802794e:	f003 0303 	and.w	r3, r3, #3
 8027952:	009b      	lsls	r3, r3, #2
 8027954:	220f      	movs	r2, #15
 8027956:	fa02 f303 	lsl.w	r3, r2, r3
 802795a:	43db      	mvns	r3, r3
 802795c:	69ba      	ldr	r2, [r7, #24]
 802795e:	4013      	ands	r3, r2
 8027960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8027962:	687b      	ldr	r3, [r7, #4]
 8027964:	4a51      	ldr	r2, [pc, #324]	; (8027aac <HAL_GPIO_Init+0x310>)
 8027966:	4293      	cmp	r3, r2
 8027968:	d02b      	beq.n	80279c2 <HAL_GPIO_Init+0x226>
 802796a:	687b      	ldr	r3, [r7, #4]
 802796c:	4a50      	ldr	r2, [pc, #320]	; (8027ab0 <HAL_GPIO_Init+0x314>)
 802796e:	4293      	cmp	r3, r2
 8027970:	d025      	beq.n	80279be <HAL_GPIO_Init+0x222>
 8027972:	687b      	ldr	r3, [r7, #4]
 8027974:	4a4f      	ldr	r2, [pc, #316]	; (8027ab4 <HAL_GPIO_Init+0x318>)
 8027976:	4293      	cmp	r3, r2
 8027978:	d01f      	beq.n	80279ba <HAL_GPIO_Init+0x21e>
 802797a:	687b      	ldr	r3, [r7, #4]
 802797c:	4a4e      	ldr	r2, [pc, #312]	; (8027ab8 <HAL_GPIO_Init+0x31c>)
 802797e:	4293      	cmp	r3, r2
 8027980:	d019      	beq.n	80279b6 <HAL_GPIO_Init+0x21a>
 8027982:	687b      	ldr	r3, [r7, #4]
 8027984:	4a4d      	ldr	r2, [pc, #308]	; (8027abc <HAL_GPIO_Init+0x320>)
 8027986:	4293      	cmp	r3, r2
 8027988:	d013      	beq.n	80279b2 <HAL_GPIO_Init+0x216>
 802798a:	687b      	ldr	r3, [r7, #4]
 802798c:	4a4c      	ldr	r2, [pc, #304]	; (8027ac0 <HAL_GPIO_Init+0x324>)
 802798e:	4293      	cmp	r3, r2
 8027990:	d00d      	beq.n	80279ae <HAL_GPIO_Init+0x212>
 8027992:	687b      	ldr	r3, [r7, #4]
 8027994:	4a4b      	ldr	r2, [pc, #300]	; (8027ac4 <HAL_GPIO_Init+0x328>)
 8027996:	4293      	cmp	r3, r2
 8027998:	d007      	beq.n	80279aa <HAL_GPIO_Init+0x20e>
 802799a:	687b      	ldr	r3, [r7, #4]
 802799c:	4a4a      	ldr	r2, [pc, #296]	; (8027ac8 <HAL_GPIO_Init+0x32c>)
 802799e:	4293      	cmp	r3, r2
 80279a0:	d101      	bne.n	80279a6 <HAL_GPIO_Init+0x20a>
 80279a2:	2307      	movs	r3, #7
 80279a4:	e00e      	b.n	80279c4 <HAL_GPIO_Init+0x228>
 80279a6:	2308      	movs	r3, #8
 80279a8:	e00c      	b.n	80279c4 <HAL_GPIO_Init+0x228>
 80279aa:	2306      	movs	r3, #6
 80279ac:	e00a      	b.n	80279c4 <HAL_GPIO_Init+0x228>
 80279ae:	2305      	movs	r3, #5
 80279b0:	e008      	b.n	80279c4 <HAL_GPIO_Init+0x228>
 80279b2:	2304      	movs	r3, #4
 80279b4:	e006      	b.n	80279c4 <HAL_GPIO_Init+0x228>
 80279b6:	2303      	movs	r3, #3
 80279b8:	e004      	b.n	80279c4 <HAL_GPIO_Init+0x228>
 80279ba:	2302      	movs	r3, #2
 80279bc:	e002      	b.n	80279c4 <HAL_GPIO_Init+0x228>
 80279be:	2301      	movs	r3, #1
 80279c0:	e000      	b.n	80279c4 <HAL_GPIO_Init+0x228>
 80279c2:	2300      	movs	r3, #0
 80279c4:	69fa      	ldr	r2, [r7, #28]
 80279c6:	f002 0203 	and.w	r2, r2, #3
 80279ca:	0092      	lsls	r2, r2, #2
 80279cc:	4093      	lsls	r3, r2
 80279ce:	69ba      	ldr	r2, [r7, #24]
 80279d0:	4313      	orrs	r3, r2
 80279d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80279d4:	4934      	ldr	r1, [pc, #208]	; (8027aa8 <HAL_GPIO_Init+0x30c>)
 80279d6:	69fb      	ldr	r3, [r7, #28]
 80279d8:	089b      	lsrs	r3, r3, #2
 80279da:	3302      	adds	r3, #2
 80279dc:	69ba      	ldr	r2, [r7, #24]
 80279de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80279e2:	4b3a      	ldr	r3, [pc, #232]	; (8027acc <HAL_GPIO_Init+0x330>)
 80279e4:	681b      	ldr	r3, [r3, #0]
 80279e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80279e8:	693b      	ldr	r3, [r7, #16]
 80279ea:	43db      	mvns	r3, r3
 80279ec:	69ba      	ldr	r2, [r7, #24]
 80279ee:	4013      	ands	r3, r2
 80279f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80279f2:	683b      	ldr	r3, [r7, #0]
 80279f4:	685b      	ldr	r3, [r3, #4]
 80279f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80279fa:	2b00      	cmp	r3, #0
 80279fc:	d003      	beq.n	8027a06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80279fe:	69ba      	ldr	r2, [r7, #24]
 8027a00:	693b      	ldr	r3, [r7, #16]
 8027a02:	4313      	orrs	r3, r2
 8027a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8027a06:	4a31      	ldr	r2, [pc, #196]	; (8027acc <HAL_GPIO_Init+0x330>)
 8027a08:	69bb      	ldr	r3, [r7, #24]
 8027a0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8027a0c:	4b2f      	ldr	r3, [pc, #188]	; (8027acc <HAL_GPIO_Init+0x330>)
 8027a0e:	685b      	ldr	r3, [r3, #4]
 8027a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027a12:	693b      	ldr	r3, [r7, #16]
 8027a14:	43db      	mvns	r3, r3
 8027a16:	69ba      	ldr	r2, [r7, #24]
 8027a18:	4013      	ands	r3, r2
 8027a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8027a1c:	683b      	ldr	r3, [r7, #0]
 8027a1e:	685b      	ldr	r3, [r3, #4]
 8027a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027a24:	2b00      	cmp	r3, #0
 8027a26:	d003      	beq.n	8027a30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8027a28:	69ba      	ldr	r2, [r7, #24]
 8027a2a:	693b      	ldr	r3, [r7, #16]
 8027a2c:	4313      	orrs	r3, r2
 8027a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8027a30:	4a26      	ldr	r2, [pc, #152]	; (8027acc <HAL_GPIO_Init+0x330>)
 8027a32:	69bb      	ldr	r3, [r7, #24]
 8027a34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8027a36:	4b25      	ldr	r3, [pc, #148]	; (8027acc <HAL_GPIO_Init+0x330>)
 8027a38:	689b      	ldr	r3, [r3, #8]
 8027a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027a3c:	693b      	ldr	r3, [r7, #16]
 8027a3e:	43db      	mvns	r3, r3
 8027a40:	69ba      	ldr	r2, [r7, #24]
 8027a42:	4013      	ands	r3, r2
 8027a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8027a46:	683b      	ldr	r3, [r7, #0]
 8027a48:	685b      	ldr	r3, [r3, #4]
 8027a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8027a4e:	2b00      	cmp	r3, #0
 8027a50:	d003      	beq.n	8027a5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8027a52:	69ba      	ldr	r2, [r7, #24]
 8027a54:	693b      	ldr	r3, [r7, #16]
 8027a56:	4313      	orrs	r3, r2
 8027a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8027a5a:	4a1c      	ldr	r2, [pc, #112]	; (8027acc <HAL_GPIO_Init+0x330>)
 8027a5c:	69bb      	ldr	r3, [r7, #24]
 8027a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8027a60:	4b1a      	ldr	r3, [pc, #104]	; (8027acc <HAL_GPIO_Init+0x330>)
 8027a62:	68db      	ldr	r3, [r3, #12]
 8027a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027a66:	693b      	ldr	r3, [r7, #16]
 8027a68:	43db      	mvns	r3, r3
 8027a6a:	69ba      	ldr	r2, [r7, #24]
 8027a6c:	4013      	ands	r3, r2
 8027a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8027a70:	683b      	ldr	r3, [r7, #0]
 8027a72:	685b      	ldr	r3, [r3, #4]
 8027a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8027a78:	2b00      	cmp	r3, #0
 8027a7a:	d003      	beq.n	8027a84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8027a7c:	69ba      	ldr	r2, [r7, #24]
 8027a7e:	693b      	ldr	r3, [r7, #16]
 8027a80:	4313      	orrs	r3, r2
 8027a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8027a84:	4a11      	ldr	r2, [pc, #68]	; (8027acc <HAL_GPIO_Init+0x330>)
 8027a86:	69bb      	ldr	r3, [r7, #24]
 8027a88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8027a8a:	69fb      	ldr	r3, [r7, #28]
 8027a8c:	3301      	adds	r3, #1
 8027a8e:	61fb      	str	r3, [r7, #28]
 8027a90:	69fb      	ldr	r3, [r7, #28]
 8027a92:	2b0f      	cmp	r3, #15
 8027a94:	f67f ae90 	bls.w	80277b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8027a98:	bf00      	nop
 8027a9a:	3724      	adds	r7, #36	; 0x24
 8027a9c:	46bd      	mov	sp, r7
 8027a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027aa2:	4770      	bx	lr
 8027aa4:	40023800 	.word	0x40023800
 8027aa8:	40013800 	.word	0x40013800
 8027aac:	40020000 	.word	0x40020000
 8027ab0:	40020400 	.word	0x40020400
 8027ab4:	40020800 	.word	0x40020800
 8027ab8:	40020c00 	.word	0x40020c00
 8027abc:	40021000 	.word	0x40021000
 8027ac0:	40021400 	.word	0x40021400
 8027ac4:	40021800 	.word	0x40021800
 8027ac8:	40021c00 	.word	0x40021c00
 8027acc:	40013c00 	.word	0x40013c00

08027ad0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8027ad0:	b480      	push	{r7}
 8027ad2:	b085      	sub	sp, #20
 8027ad4:	af00      	add	r7, sp, #0
 8027ad6:	6078      	str	r0, [r7, #4]
 8027ad8:	460b      	mov	r3, r1
 8027ada:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8027adc:	687b      	ldr	r3, [r7, #4]
 8027ade:	691a      	ldr	r2, [r3, #16]
 8027ae0:	887b      	ldrh	r3, [r7, #2]
 8027ae2:	4013      	ands	r3, r2
 8027ae4:	2b00      	cmp	r3, #0
 8027ae6:	d002      	beq.n	8027aee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8027ae8:	2301      	movs	r3, #1
 8027aea:	73fb      	strb	r3, [r7, #15]
 8027aec:	e001      	b.n	8027af2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8027aee:	2300      	movs	r3, #0
 8027af0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8027af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8027af4:	4618      	mov	r0, r3
 8027af6:	3714      	adds	r7, #20
 8027af8:	46bd      	mov	sp, r7
 8027afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027afe:	4770      	bx	lr

08027b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8027b00:	b480      	push	{r7}
 8027b02:	b083      	sub	sp, #12
 8027b04:	af00      	add	r7, sp, #0
 8027b06:	6078      	str	r0, [r7, #4]
 8027b08:	460b      	mov	r3, r1
 8027b0a:	807b      	strh	r3, [r7, #2]
 8027b0c:	4613      	mov	r3, r2
 8027b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8027b10:	787b      	ldrb	r3, [r7, #1]
 8027b12:	2b00      	cmp	r3, #0
 8027b14:	d003      	beq.n	8027b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8027b16:	887a      	ldrh	r2, [r7, #2]
 8027b18:	687b      	ldr	r3, [r7, #4]
 8027b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8027b1c:	e003      	b.n	8027b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8027b1e:	887b      	ldrh	r3, [r7, #2]
 8027b20:	041a      	lsls	r2, r3, #16
 8027b22:	687b      	ldr	r3, [r7, #4]
 8027b24:	619a      	str	r2, [r3, #24]
}
 8027b26:	bf00      	nop
 8027b28:	370c      	adds	r7, #12
 8027b2a:	46bd      	mov	sp, r7
 8027b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b30:	4770      	bx	lr
	...

08027b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8027b34:	b580      	push	{r7, lr}
 8027b36:	b084      	sub	sp, #16
 8027b38:	af00      	add	r7, sp, #0
 8027b3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8027b3c:	687b      	ldr	r3, [r7, #4]
 8027b3e:	2b00      	cmp	r3, #0
 8027b40:	d101      	bne.n	8027b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8027b42:	2301      	movs	r3, #1
 8027b44:	e11f      	b.n	8027d86 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8027b46:	687b      	ldr	r3, [r7, #4]
 8027b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027b4c:	b2db      	uxtb	r3, r3
 8027b4e:	2b00      	cmp	r3, #0
 8027b50:	d106      	bne.n	8027b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8027b52:	687b      	ldr	r3, [r7, #4]
 8027b54:	2200      	movs	r2, #0
 8027b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8027b5a:	6878      	ldr	r0, [r7, #4]
 8027b5c:	f7fc fe5c 	bl	8024818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8027b60:	687b      	ldr	r3, [r7, #4]
 8027b62:	2224      	movs	r2, #36	; 0x24
 8027b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8027b68:	687b      	ldr	r3, [r7, #4]
 8027b6a:	681b      	ldr	r3, [r3, #0]
 8027b6c:	681a      	ldr	r2, [r3, #0]
 8027b6e:	687b      	ldr	r3, [r7, #4]
 8027b70:	681b      	ldr	r3, [r3, #0]
 8027b72:	f022 0201 	bic.w	r2, r2, #1
 8027b76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8027b78:	687b      	ldr	r3, [r7, #4]
 8027b7a:	681b      	ldr	r3, [r3, #0]
 8027b7c:	681a      	ldr	r2, [r3, #0]
 8027b7e:	687b      	ldr	r3, [r7, #4]
 8027b80:	681b      	ldr	r3, [r3, #0]
 8027b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8027b86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8027b88:	687b      	ldr	r3, [r7, #4]
 8027b8a:	681b      	ldr	r3, [r3, #0]
 8027b8c:	681a      	ldr	r2, [r3, #0]
 8027b8e:	687b      	ldr	r3, [r7, #4]
 8027b90:	681b      	ldr	r3, [r3, #0]
 8027b92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8027b96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8027b98:	f000 fd18 	bl	80285cc <HAL_RCC_GetPCLK1Freq>
 8027b9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8027b9e:	687b      	ldr	r3, [r7, #4]
 8027ba0:	685b      	ldr	r3, [r3, #4]
 8027ba2:	4a7b      	ldr	r2, [pc, #492]	; (8027d90 <HAL_I2C_Init+0x25c>)
 8027ba4:	4293      	cmp	r3, r2
 8027ba6:	d807      	bhi.n	8027bb8 <HAL_I2C_Init+0x84>
 8027ba8:	68fb      	ldr	r3, [r7, #12]
 8027baa:	4a7a      	ldr	r2, [pc, #488]	; (8027d94 <HAL_I2C_Init+0x260>)
 8027bac:	4293      	cmp	r3, r2
 8027bae:	bf94      	ite	ls
 8027bb0:	2301      	movls	r3, #1
 8027bb2:	2300      	movhi	r3, #0
 8027bb4:	b2db      	uxtb	r3, r3
 8027bb6:	e006      	b.n	8027bc6 <HAL_I2C_Init+0x92>
 8027bb8:	68fb      	ldr	r3, [r7, #12]
 8027bba:	4a77      	ldr	r2, [pc, #476]	; (8027d98 <HAL_I2C_Init+0x264>)
 8027bbc:	4293      	cmp	r3, r2
 8027bbe:	bf94      	ite	ls
 8027bc0:	2301      	movls	r3, #1
 8027bc2:	2300      	movhi	r3, #0
 8027bc4:	b2db      	uxtb	r3, r3
 8027bc6:	2b00      	cmp	r3, #0
 8027bc8:	d001      	beq.n	8027bce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8027bca:	2301      	movs	r3, #1
 8027bcc:	e0db      	b.n	8027d86 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8027bce:	68fb      	ldr	r3, [r7, #12]
 8027bd0:	4a72      	ldr	r2, [pc, #456]	; (8027d9c <HAL_I2C_Init+0x268>)
 8027bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8027bd6:	0c9b      	lsrs	r3, r3, #18
 8027bd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8027bda:	687b      	ldr	r3, [r7, #4]
 8027bdc:	681b      	ldr	r3, [r3, #0]
 8027bde:	685b      	ldr	r3, [r3, #4]
 8027be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027be4:	687b      	ldr	r3, [r7, #4]
 8027be6:	681b      	ldr	r3, [r3, #0]
 8027be8:	68ba      	ldr	r2, [r7, #8]
 8027bea:	430a      	orrs	r2, r1
 8027bec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8027bee:	687b      	ldr	r3, [r7, #4]
 8027bf0:	681b      	ldr	r3, [r3, #0]
 8027bf2:	6a1b      	ldr	r3, [r3, #32]
 8027bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027bf8:	687b      	ldr	r3, [r7, #4]
 8027bfa:	685b      	ldr	r3, [r3, #4]
 8027bfc:	4a64      	ldr	r2, [pc, #400]	; (8027d90 <HAL_I2C_Init+0x25c>)
 8027bfe:	4293      	cmp	r3, r2
 8027c00:	d802      	bhi.n	8027c08 <HAL_I2C_Init+0xd4>
 8027c02:	68bb      	ldr	r3, [r7, #8]
 8027c04:	3301      	adds	r3, #1
 8027c06:	e009      	b.n	8027c1c <HAL_I2C_Init+0xe8>
 8027c08:	68bb      	ldr	r3, [r7, #8]
 8027c0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8027c0e:	fb02 f303 	mul.w	r3, r2, r3
 8027c12:	4a63      	ldr	r2, [pc, #396]	; (8027da0 <HAL_I2C_Init+0x26c>)
 8027c14:	fba2 2303 	umull	r2, r3, r2, r3
 8027c18:	099b      	lsrs	r3, r3, #6
 8027c1a:	3301      	adds	r3, #1
 8027c1c:	687a      	ldr	r2, [r7, #4]
 8027c1e:	6812      	ldr	r2, [r2, #0]
 8027c20:	430b      	orrs	r3, r1
 8027c22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8027c24:	687b      	ldr	r3, [r7, #4]
 8027c26:	681b      	ldr	r3, [r3, #0]
 8027c28:	69db      	ldr	r3, [r3, #28]
 8027c2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8027c2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8027c32:	687b      	ldr	r3, [r7, #4]
 8027c34:	685b      	ldr	r3, [r3, #4]
 8027c36:	4956      	ldr	r1, [pc, #344]	; (8027d90 <HAL_I2C_Init+0x25c>)
 8027c38:	428b      	cmp	r3, r1
 8027c3a:	d80d      	bhi.n	8027c58 <HAL_I2C_Init+0x124>
 8027c3c:	68fb      	ldr	r3, [r7, #12]
 8027c3e:	1e59      	subs	r1, r3, #1
 8027c40:	687b      	ldr	r3, [r7, #4]
 8027c42:	685b      	ldr	r3, [r3, #4]
 8027c44:	005b      	lsls	r3, r3, #1
 8027c46:	fbb1 f3f3 	udiv	r3, r1, r3
 8027c4a:	3301      	adds	r3, #1
 8027c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027c50:	2b04      	cmp	r3, #4
 8027c52:	bf38      	it	cc
 8027c54:	2304      	movcc	r3, #4
 8027c56:	e04f      	b.n	8027cf8 <HAL_I2C_Init+0x1c4>
 8027c58:	687b      	ldr	r3, [r7, #4]
 8027c5a:	689b      	ldr	r3, [r3, #8]
 8027c5c:	2b00      	cmp	r3, #0
 8027c5e:	d111      	bne.n	8027c84 <HAL_I2C_Init+0x150>
 8027c60:	68fb      	ldr	r3, [r7, #12]
 8027c62:	1e58      	subs	r0, r3, #1
 8027c64:	687b      	ldr	r3, [r7, #4]
 8027c66:	6859      	ldr	r1, [r3, #4]
 8027c68:	460b      	mov	r3, r1
 8027c6a:	005b      	lsls	r3, r3, #1
 8027c6c:	440b      	add	r3, r1
 8027c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8027c72:	3301      	adds	r3, #1
 8027c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027c78:	2b00      	cmp	r3, #0
 8027c7a:	bf0c      	ite	eq
 8027c7c:	2301      	moveq	r3, #1
 8027c7e:	2300      	movne	r3, #0
 8027c80:	b2db      	uxtb	r3, r3
 8027c82:	e012      	b.n	8027caa <HAL_I2C_Init+0x176>
 8027c84:	68fb      	ldr	r3, [r7, #12]
 8027c86:	1e58      	subs	r0, r3, #1
 8027c88:	687b      	ldr	r3, [r7, #4]
 8027c8a:	6859      	ldr	r1, [r3, #4]
 8027c8c:	460b      	mov	r3, r1
 8027c8e:	009b      	lsls	r3, r3, #2
 8027c90:	440b      	add	r3, r1
 8027c92:	0099      	lsls	r1, r3, #2
 8027c94:	440b      	add	r3, r1
 8027c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8027c9a:	3301      	adds	r3, #1
 8027c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027ca0:	2b00      	cmp	r3, #0
 8027ca2:	bf0c      	ite	eq
 8027ca4:	2301      	moveq	r3, #1
 8027ca6:	2300      	movne	r3, #0
 8027ca8:	b2db      	uxtb	r3, r3
 8027caa:	2b00      	cmp	r3, #0
 8027cac:	d001      	beq.n	8027cb2 <HAL_I2C_Init+0x17e>
 8027cae:	2301      	movs	r3, #1
 8027cb0:	e022      	b.n	8027cf8 <HAL_I2C_Init+0x1c4>
 8027cb2:	687b      	ldr	r3, [r7, #4]
 8027cb4:	689b      	ldr	r3, [r3, #8]
 8027cb6:	2b00      	cmp	r3, #0
 8027cb8:	d10e      	bne.n	8027cd8 <HAL_I2C_Init+0x1a4>
 8027cba:	68fb      	ldr	r3, [r7, #12]
 8027cbc:	1e58      	subs	r0, r3, #1
 8027cbe:	687b      	ldr	r3, [r7, #4]
 8027cc0:	6859      	ldr	r1, [r3, #4]
 8027cc2:	460b      	mov	r3, r1
 8027cc4:	005b      	lsls	r3, r3, #1
 8027cc6:	440b      	add	r3, r1
 8027cc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8027ccc:	3301      	adds	r3, #1
 8027cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8027cd6:	e00f      	b.n	8027cf8 <HAL_I2C_Init+0x1c4>
 8027cd8:	68fb      	ldr	r3, [r7, #12]
 8027cda:	1e58      	subs	r0, r3, #1
 8027cdc:	687b      	ldr	r3, [r7, #4]
 8027cde:	6859      	ldr	r1, [r3, #4]
 8027ce0:	460b      	mov	r3, r1
 8027ce2:	009b      	lsls	r3, r3, #2
 8027ce4:	440b      	add	r3, r1
 8027ce6:	0099      	lsls	r1, r3, #2
 8027ce8:	440b      	add	r3, r1
 8027cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8027cee:	3301      	adds	r3, #1
 8027cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8027cf8:	6879      	ldr	r1, [r7, #4]
 8027cfa:	6809      	ldr	r1, [r1, #0]
 8027cfc:	4313      	orrs	r3, r2
 8027cfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8027d00:	687b      	ldr	r3, [r7, #4]
 8027d02:	681b      	ldr	r3, [r3, #0]
 8027d04:	681b      	ldr	r3, [r3, #0]
 8027d06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8027d0a:	687b      	ldr	r3, [r7, #4]
 8027d0c:	69da      	ldr	r2, [r3, #28]
 8027d0e:	687b      	ldr	r3, [r7, #4]
 8027d10:	6a1b      	ldr	r3, [r3, #32]
 8027d12:	431a      	orrs	r2, r3
 8027d14:	687b      	ldr	r3, [r7, #4]
 8027d16:	681b      	ldr	r3, [r3, #0]
 8027d18:	430a      	orrs	r2, r1
 8027d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8027d1c:	687b      	ldr	r3, [r7, #4]
 8027d1e:	681b      	ldr	r3, [r3, #0]
 8027d20:	689b      	ldr	r3, [r3, #8]
 8027d22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8027d26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8027d2a:	687a      	ldr	r2, [r7, #4]
 8027d2c:	6911      	ldr	r1, [r2, #16]
 8027d2e:	687a      	ldr	r2, [r7, #4]
 8027d30:	68d2      	ldr	r2, [r2, #12]
 8027d32:	4311      	orrs	r1, r2
 8027d34:	687a      	ldr	r2, [r7, #4]
 8027d36:	6812      	ldr	r2, [r2, #0]
 8027d38:	430b      	orrs	r3, r1
 8027d3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8027d3c:	687b      	ldr	r3, [r7, #4]
 8027d3e:	681b      	ldr	r3, [r3, #0]
 8027d40:	68db      	ldr	r3, [r3, #12]
 8027d42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8027d46:	687b      	ldr	r3, [r7, #4]
 8027d48:	695a      	ldr	r2, [r3, #20]
 8027d4a:	687b      	ldr	r3, [r7, #4]
 8027d4c:	699b      	ldr	r3, [r3, #24]
 8027d4e:	431a      	orrs	r2, r3
 8027d50:	687b      	ldr	r3, [r7, #4]
 8027d52:	681b      	ldr	r3, [r3, #0]
 8027d54:	430a      	orrs	r2, r1
 8027d56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8027d58:	687b      	ldr	r3, [r7, #4]
 8027d5a:	681b      	ldr	r3, [r3, #0]
 8027d5c:	681a      	ldr	r2, [r3, #0]
 8027d5e:	687b      	ldr	r3, [r7, #4]
 8027d60:	681b      	ldr	r3, [r3, #0]
 8027d62:	f042 0201 	orr.w	r2, r2, #1
 8027d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8027d68:	687b      	ldr	r3, [r7, #4]
 8027d6a:	2200      	movs	r2, #0
 8027d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8027d6e:	687b      	ldr	r3, [r7, #4]
 8027d70:	2220      	movs	r2, #32
 8027d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8027d76:	687b      	ldr	r3, [r7, #4]
 8027d78:	2200      	movs	r2, #0
 8027d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8027d7c:	687b      	ldr	r3, [r7, #4]
 8027d7e:	2200      	movs	r2, #0
 8027d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8027d84:	2300      	movs	r3, #0
}
 8027d86:	4618      	mov	r0, r3
 8027d88:	3710      	adds	r7, #16
 8027d8a:	46bd      	mov	sp, r7
 8027d8c:	bd80      	pop	{r7, pc}
 8027d8e:	bf00      	nop
 8027d90:	000186a0 	.word	0x000186a0
 8027d94:	001e847f 	.word	0x001e847f
 8027d98:	003d08ff 	.word	0x003d08ff
 8027d9c:	431bde83 	.word	0x431bde83
 8027da0:	10624dd3 	.word	0x10624dd3

08027da4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8027da4:	b580      	push	{r7, lr}
 8027da6:	b086      	sub	sp, #24
 8027da8:	af00      	add	r7, sp, #0
 8027daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8027dac:	687b      	ldr	r3, [r7, #4]
 8027dae:	2b00      	cmp	r3, #0
 8027db0:	d101      	bne.n	8027db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8027db2:	2301      	movs	r3, #1
 8027db4:	e25b      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8027db6:	687b      	ldr	r3, [r7, #4]
 8027db8:	681b      	ldr	r3, [r3, #0]
 8027dba:	f003 0301 	and.w	r3, r3, #1
 8027dbe:	2b00      	cmp	r3, #0
 8027dc0:	d075      	beq.n	8027eae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8027dc2:	4ba3      	ldr	r3, [pc, #652]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027dc4:	689b      	ldr	r3, [r3, #8]
 8027dc6:	f003 030c 	and.w	r3, r3, #12
 8027dca:	2b04      	cmp	r3, #4
 8027dcc:	d00c      	beq.n	8027de8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8027dce:	4ba0      	ldr	r3, [pc, #640]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027dd0:	689b      	ldr	r3, [r3, #8]
 8027dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8027dd6:	2b08      	cmp	r3, #8
 8027dd8:	d112      	bne.n	8027e00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8027dda:	4b9d      	ldr	r3, [pc, #628]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027ddc:	685b      	ldr	r3, [r3, #4]
 8027dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8027de6:	d10b      	bne.n	8027e00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027de8:	4b99      	ldr	r3, [pc, #612]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027dea:	681b      	ldr	r3, [r3, #0]
 8027dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027df0:	2b00      	cmp	r3, #0
 8027df2:	d05b      	beq.n	8027eac <HAL_RCC_OscConfig+0x108>
 8027df4:	687b      	ldr	r3, [r7, #4]
 8027df6:	685b      	ldr	r3, [r3, #4]
 8027df8:	2b00      	cmp	r3, #0
 8027dfa:	d157      	bne.n	8027eac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8027dfc:	2301      	movs	r3, #1
 8027dfe:	e236      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8027e00:	687b      	ldr	r3, [r7, #4]
 8027e02:	685b      	ldr	r3, [r3, #4]
 8027e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8027e08:	d106      	bne.n	8027e18 <HAL_RCC_OscConfig+0x74>
 8027e0a:	4b91      	ldr	r3, [pc, #580]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027e0c:	681b      	ldr	r3, [r3, #0]
 8027e0e:	4a90      	ldr	r2, [pc, #576]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027e14:	6013      	str	r3, [r2, #0]
 8027e16:	e01d      	b.n	8027e54 <HAL_RCC_OscConfig+0xb0>
 8027e18:	687b      	ldr	r3, [r7, #4]
 8027e1a:	685b      	ldr	r3, [r3, #4]
 8027e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8027e20:	d10c      	bne.n	8027e3c <HAL_RCC_OscConfig+0x98>
 8027e22:	4b8b      	ldr	r3, [pc, #556]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027e24:	681b      	ldr	r3, [r3, #0]
 8027e26:	4a8a      	ldr	r2, [pc, #552]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8027e2c:	6013      	str	r3, [r2, #0]
 8027e2e:	4b88      	ldr	r3, [pc, #544]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027e30:	681b      	ldr	r3, [r3, #0]
 8027e32:	4a87      	ldr	r2, [pc, #540]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027e38:	6013      	str	r3, [r2, #0]
 8027e3a:	e00b      	b.n	8027e54 <HAL_RCC_OscConfig+0xb0>
 8027e3c:	4b84      	ldr	r3, [pc, #528]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027e3e:	681b      	ldr	r3, [r3, #0]
 8027e40:	4a83      	ldr	r2, [pc, #524]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8027e46:	6013      	str	r3, [r2, #0]
 8027e48:	4b81      	ldr	r3, [pc, #516]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027e4a:	681b      	ldr	r3, [r3, #0]
 8027e4c:	4a80      	ldr	r2, [pc, #512]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8027e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8027e54:	687b      	ldr	r3, [r7, #4]
 8027e56:	685b      	ldr	r3, [r3, #4]
 8027e58:	2b00      	cmp	r3, #0
 8027e5a:	d013      	beq.n	8027e84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027e5c:	f7fe fc0e 	bl	802667c <HAL_GetTick>
 8027e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027e62:	e008      	b.n	8027e76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8027e64:	f7fe fc0a 	bl	802667c <HAL_GetTick>
 8027e68:	4602      	mov	r2, r0
 8027e6a:	693b      	ldr	r3, [r7, #16]
 8027e6c:	1ad3      	subs	r3, r2, r3
 8027e6e:	2b64      	cmp	r3, #100	; 0x64
 8027e70:	d901      	bls.n	8027e76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8027e72:	2303      	movs	r3, #3
 8027e74:	e1fb      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027e76:	4b76      	ldr	r3, [pc, #472]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027e78:	681b      	ldr	r3, [r3, #0]
 8027e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027e7e:	2b00      	cmp	r3, #0
 8027e80:	d0f0      	beq.n	8027e64 <HAL_RCC_OscConfig+0xc0>
 8027e82:	e014      	b.n	8027eae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027e84:	f7fe fbfa 	bl	802667c <HAL_GetTick>
 8027e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8027e8a:	e008      	b.n	8027e9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8027e8c:	f7fe fbf6 	bl	802667c <HAL_GetTick>
 8027e90:	4602      	mov	r2, r0
 8027e92:	693b      	ldr	r3, [r7, #16]
 8027e94:	1ad3      	subs	r3, r2, r3
 8027e96:	2b64      	cmp	r3, #100	; 0x64
 8027e98:	d901      	bls.n	8027e9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8027e9a:	2303      	movs	r3, #3
 8027e9c:	e1e7      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8027e9e:	4b6c      	ldr	r3, [pc, #432]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027ea0:	681b      	ldr	r3, [r3, #0]
 8027ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027ea6:	2b00      	cmp	r3, #0
 8027ea8:	d1f0      	bne.n	8027e8c <HAL_RCC_OscConfig+0xe8>
 8027eaa:	e000      	b.n	8027eae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8027eae:	687b      	ldr	r3, [r7, #4]
 8027eb0:	681b      	ldr	r3, [r3, #0]
 8027eb2:	f003 0302 	and.w	r3, r3, #2
 8027eb6:	2b00      	cmp	r3, #0
 8027eb8:	d063      	beq.n	8027f82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8027eba:	4b65      	ldr	r3, [pc, #404]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027ebc:	689b      	ldr	r3, [r3, #8]
 8027ebe:	f003 030c 	and.w	r3, r3, #12
 8027ec2:	2b00      	cmp	r3, #0
 8027ec4:	d00b      	beq.n	8027ede <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8027ec6:	4b62      	ldr	r3, [pc, #392]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027ec8:	689b      	ldr	r3, [r3, #8]
 8027eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8027ece:	2b08      	cmp	r3, #8
 8027ed0:	d11c      	bne.n	8027f0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8027ed2:	4b5f      	ldr	r3, [pc, #380]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027ed4:	685b      	ldr	r3, [r3, #4]
 8027ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027eda:	2b00      	cmp	r3, #0
 8027edc:	d116      	bne.n	8027f0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8027ede:	4b5c      	ldr	r3, [pc, #368]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027ee0:	681b      	ldr	r3, [r3, #0]
 8027ee2:	f003 0302 	and.w	r3, r3, #2
 8027ee6:	2b00      	cmp	r3, #0
 8027ee8:	d005      	beq.n	8027ef6 <HAL_RCC_OscConfig+0x152>
 8027eea:	687b      	ldr	r3, [r7, #4]
 8027eec:	68db      	ldr	r3, [r3, #12]
 8027eee:	2b01      	cmp	r3, #1
 8027ef0:	d001      	beq.n	8027ef6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8027ef2:	2301      	movs	r3, #1
 8027ef4:	e1bb      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027ef6:	4b56      	ldr	r3, [pc, #344]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027ef8:	681b      	ldr	r3, [r3, #0]
 8027efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8027efe:	687b      	ldr	r3, [r7, #4]
 8027f00:	691b      	ldr	r3, [r3, #16]
 8027f02:	00db      	lsls	r3, r3, #3
 8027f04:	4952      	ldr	r1, [pc, #328]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027f06:	4313      	orrs	r3, r2
 8027f08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8027f0a:	e03a      	b.n	8027f82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8027f0c:	687b      	ldr	r3, [r7, #4]
 8027f0e:	68db      	ldr	r3, [r3, #12]
 8027f10:	2b00      	cmp	r3, #0
 8027f12:	d020      	beq.n	8027f56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8027f14:	4b4f      	ldr	r3, [pc, #316]	; (8028054 <HAL_RCC_OscConfig+0x2b0>)
 8027f16:	2201      	movs	r2, #1
 8027f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027f1a:	f7fe fbaf 	bl	802667c <HAL_GetTick>
 8027f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027f20:	e008      	b.n	8027f34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8027f22:	f7fe fbab 	bl	802667c <HAL_GetTick>
 8027f26:	4602      	mov	r2, r0
 8027f28:	693b      	ldr	r3, [r7, #16]
 8027f2a:	1ad3      	subs	r3, r2, r3
 8027f2c:	2b02      	cmp	r3, #2
 8027f2e:	d901      	bls.n	8027f34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8027f30:	2303      	movs	r3, #3
 8027f32:	e19c      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027f34:	4b46      	ldr	r3, [pc, #280]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027f36:	681b      	ldr	r3, [r3, #0]
 8027f38:	f003 0302 	and.w	r3, r3, #2
 8027f3c:	2b00      	cmp	r3, #0
 8027f3e:	d0f0      	beq.n	8027f22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027f40:	4b43      	ldr	r3, [pc, #268]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027f42:	681b      	ldr	r3, [r3, #0]
 8027f44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8027f48:	687b      	ldr	r3, [r7, #4]
 8027f4a:	691b      	ldr	r3, [r3, #16]
 8027f4c:	00db      	lsls	r3, r3, #3
 8027f4e:	4940      	ldr	r1, [pc, #256]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027f50:	4313      	orrs	r3, r2
 8027f52:	600b      	str	r3, [r1, #0]
 8027f54:	e015      	b.n	8027f82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8027f56:	4b3f      	ldr	r3, [pc, #252]	; (8028054 <HAL_RCC_OscConfig+0x2b0>)
 8027f58:	2200      	movs	r2, #0
 8027f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027f5c:	f7fe fb8e 	bl	802667c <HAL_GetTick>
 8027f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8027f62:	e008      	b.n	8027f76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8027f64:	f7fe fb8a 	bl	802667c <HAL_GetTick>
 8027f68:	4602      	mov	r2, r0
 8027f6a:	693b      	ldr	r3, [r7, #16]
 8027f6c:	1ad3      	subs	r3, r2, r3
 8027f6e:	2b02      	cmp	r3, #2
 8027f70:	d901      	bls.n	8027f76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8027f72:	2303      	movs	r3, #3
 8027f74:	e17b      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8027f76:	4b36      	ldr	r3, [pc, #216]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027f78:	681b      	ldr	r3, [r3, #0]
 8027f7a:	f003 0302 	and.w	r3, r3, #2
 8027f7e:	2b00      	cmp	r3, #0
 8027f80:	d1f0      	bne.n	8027f64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8027f82:	687b      	ldr	r3, [r7, #4]
 8027f84:	681b      	ldr	r3, [r3, #0]
 8027f86:	f003 0308 	and.w	r3, r3, #8
 8027f8a:	2b00      	cmp	r3, #0
 8027f8c:	d030      	beq.n	8027ff0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8027f8e:	687b      	ldr	r3, [r7, #4]
 8027f90:	695b      	ldr	r3, [r3, #20]
 8027f92:	2b00      	cmp	r3, #0
 8027f94:	d016      	beq.n	8027fc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8027f96:	4b30      	ldr	r3, [pc, #192]	; (8028058 <HAL_RCC_OscConfig+0x2b4>)
 8027f98:	2201      	movs	r2, #1
 8027f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027f9c:	f7fe fb6e 	bl	802667c <HAL_GetTick>
 8027fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8027fa2:	e008      	b.n	8027fb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8027fa4:	f7fe fb6a 	bl	802667c <HAL_GetTick>
 8027fa8:	4602      	mov	r2, r0
 8027faa:	693b      	ldr	r3, [r7, #16]
 8027fac:	1ad3      	subs	r3, r2, r3
 8027fae:	2b02      	cmp	r3, #2
 8027fb0:	d901      	bls.n	8027fb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8027fb2:	2303      	movs	r3, #3
 8027fb4:	e15b      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8027fb6:	4b26      	ldr	r3, [pc, #152]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027fba:	f003 0302 	and.w	r3, r3, #2
 8027fbe:	2b00      	cmp	r3, #0
 8027fc0:	d0f0      	beq.n	8027fa4 <HAL_RCC_OscConfig+0x200>
 8027fc2:	e015      	b.n	8027ff0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8027fc4:	4b24      	ldr	r3, [pc, #144]	; (8028058 <HAL_RCC_OscConfig+0x2b4>)
 8027fc6:	2200      	movs	r2, #0
 8027fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8027fca:	f7fe fb57 	bl	802667c <HAL_GetTick>
 8027fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8027fd0:	e008      	b.n	8027fe4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8027fd2:	f7fe fb53 	bl	802667c <HAL_GetTick>
 8027fd6:	4602      	mov	r2, r0
 8027fd8:	693b      	ldr	r3, [r7, #16]
 8027fda:	1ad3      	subs	r3, r2, r3
 8027fdc:	2b02      	cmp	r3, #2
 8027fde:	d901      	bls.n	8027fe4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8027fe0:	2303      	movs	r3, #3
 8027fe2:	e144      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8027fe4:	4b1a      	ldr	r3, [pc, #104]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8027fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027fe8:	f003 0302 	and.w	r3, r3, #2
 8027fec:	2b00      	cmp	r3, #0
 8027fee:	d1f0      	bne.n	8027fd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8027ff0:	687b      	ldr	r3, [r7, #4]
 8027ff2:	681b      	ldr	r3, [r3, #0]
 8027ff4:	f003 0304 	and.w	r3, r3, #4
 8027ff8:	2b00      	cmp	r3, #0
 8027ffa:	f000 80a0 	beq.w	802813e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8027ffe:	2300      	movs	r3, #0
 8028000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8028002:	4b13      	ldr	r3, [pc, #76]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8028004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802800a:	2b00      	cmp	r3, #0
 802800c:	d10f      	bne.n	802802e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802800e:	2300      	movs	r3, #0
 8028010:	60bb      	str	r3, [r7, #8]
 8028012:	4b0f      	ldr	r3, [pc, #60]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8028014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028016:	4a0e      	ldr	r2, [pc, #56]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8028018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802801c:	6413      	str	r3, [r2, #64]	; 0x40
 802801e:	4b0c      	ldr	r3, [pc, #48]	; (8028050 <HAL_RCC_OscConfig+0x2ac>)
 8028020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028026:	60bb      	str	r3, [r7, #8]
 8028028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802802a:	2301      	movs	r3, #1
 802802c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802802e:	4b0b      	ldr	r3, [pc, #44]	; (802805c <HAL_RCC_OscConfig+0x2b8>)
 8028030:	681b      	ldr	r3, [r3, #0]
 8028032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028036:	2b00      	cmp	r3, #0
 8028038:	d121      	bne.n	802807e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802803a:	4b08      	ldr	r3, [pc, #32]	; (802805c <HAL_RCC_OscConfig+0x2b8>)
 802803c:	681b      	ldr	r3, [r3, #0]
 802803e:	4a07      	ldr	r2, [pc, #28]	; (802805c <HAL_RCC_OscConfig+0x2b8>)
 8028040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8028046:	f7fe fb19 	bl	802667c <HAL_GetTick>
 802804a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802804c:	e011      	b.n	8028072 <HAL_RCC_OscConfig+0x2ce>
 802804e:	bf00      	nop
 8028050:	40023800 	.word	0x40023800
 8028054:	42470000 	.word	0x42470000
 8028058:	42470e80 	.word	0x42470e80
 802805c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8028060:	f7fe fb0c 	bl	802667c <HAL_GetTick>
 8028064:	4602      	mov	r2, r0
 8028066:	693b      	ldr	r3, [r7, #16]
 8028068:	1ad3      	subs	r3, r2, r3
 802806a:	2b02      	cmp	r3, #2
 802806c:	d901      	bls.n	8028072 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 802806e:	2303      	movs	r3, #3
 8028070:	e0fd      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028072:	4b81      	ldr	r3, [pc, #516]	; (8028278 <HAL_RCC_OscConfig+0x4d4>)
 8028074:	681b      	ldr	r3, [r3, #0]
 8028076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802807a:	2b00      	cmp	r3, #0
 802807c:	d0f0      	beq.n	8028060 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802807e:	687b      	ldr	r3, [r7, #4]
 8028080:	689b      	ldr	r3, [r3, #8]
 8028082:	2b01      	cmp	r3, #1
 8028084:	d106      	bne.n	8028094 <HAL_RCC_OscConfig+0x2f0>
 8028086:	4b7d      	ldr	r3, [pc, #500]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 8028088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802808a:	4a7c      	ldr	r2, [pc, #496]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 802808c:	f043 0301 	orr.w	r3, r3, #1
 8028090:	6713      	str	r3, [r2, #112]	; 0x70
 8028092:	e01c      	b.n	80280ce <HAL_RCC_OscConfig+0x32a>
 8028094:	687b      	ldr	r3, [r7, #4]
 8028096:	689b      	ldr	r3, [r3, #8]
 8028098:	2b05      	cmp	r3, #5
 802809a:	d10c      	bne.n	80280b6 <HAL_RCC_OscConfig+0x312>
 802809c:	4b77      	ldr	r3, [pc, #476]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 802809e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280a0:	4a76      	ldr	r2, [pc, #472]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 80280a2:	f043 0304 	orr.w	r3, r3, #4
 80280a6:	6713      	str	r3, [r2, #112]	; 0x70
 80280a8:	4b74      	ldr	r3, [pc, #464]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 80280aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280ac:	4a73      	ldr	r2, [pc, #460]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 80280ae:	f043 0301 	orr.w	r3, r3, #1
 80280b2:	6713      	str	r3, [r2, #112]	; 0x70
 80280b4:	e00b      	b.n	80280ce <HAL_RCC_OscConfig+0x32a>
 80280b6:	4b71      	ldr	r3, [pc, #452]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 80280b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280ba:	4a70      	ldr	r2, [pc, #448]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 80280bc:	f023 0301 	bic.w	r3, r3, #1
 80280c0:	6713      	str	r3, [r2, #112]	; 0x70
 80280c2:	4b6e      	ldr	r3, [pc, #440]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 80280c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280c6:	4a6d      	ldr	r2, [pc, #436]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 80280c8:	f023 0304 	bic.w	r3, r3, #4
 80280cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80280ce:	687b      	ldr	r3, [r7, #4]
 80280d0:	689b      	ldr	r3, [r3, #8]
 80280d2:	2b00      	cmp	r3, #0
 80280d4:	d015      	beq.n	8028102 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80280d6:	f7fe fad1 	bl	802667c <HAL_GetTick>
 80280da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80280dc:	e00a      	b.n	80280f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80280de:	f7fe facd 	bl	802667c <HAL_GetTick>
 80280e2:	4602      	mov	r2, r0
 80280e4:	693b      	ldr	r3, [r7, #16]
 80280e6:	1ad3      	subs	r3, r2, r3
 80280e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80280ec:	4293      	cmp	r3, r2
 80280ee:	d901      	bls.n	80280f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80280f0:	2303      	movs	r3, #3
 80280f2:	e0bc      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80280f4:	4b61      	ldr	r3, [pc, #388]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 80280f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280f8:	f003 0302 	and.w	r3, r3, #2
 80280fc:	2b00      	cmp	r3, #0
 80280fe:	d0ee      	beq.n	80280de <HAL_RCC_OscConfig+0x33a>
 8028100:	e014      	b.n	802812c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8028102:	f7fe fabb 	bl	802667c <HAL_GetTick>
 8028106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8028108:	e00a      	b.n	8028120 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802810a:	f7fe fab7 	bl	802667c <HAL_GetTick>
 802810e:	4602      	mov	r2, r0
 8028110:	693b      	ldr	r3, [r7, #16]
 8028112:	1ad3      	subs	r3, r2, r3
 8028114:	f241 3288 	movw	r2, #5000	; 0x1388
 8028118:	4293      	cmp	r3, r2
 802811a:	d901      	bls.n	8028120 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 802811c:	2303      	movs	r3, #3
 802811e:	e0a6      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8028120:	4b56      	ldr	r3, [pc, #344]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 8028122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028124:	f003 0302 	and.w	r3, r3, #2
 8028128:	2b00      	cmp	r3, #0
 802812a:	d1ee      	bne.n	802810a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802812c:	7dfb      	ldrb	r3, [r7, #23]
 802812e:	2b01      	cmp	r3, #1
 8028130:	d105      	bne.n	802813e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8028132:	4b52      	ldr	r3, [pc, #328]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 8028134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028136:	4a51      	ldr	r2, [pc, #324]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 8028138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802813c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802813e:	687b      	ldr	r3, [r7, #4]
 8028140:	699b      	ldr	r3, [r3, #24]
 8028142:	2b00      	cmp	r3, #0
 8028144:	f000 8092 	beq.w	802826c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8028148:	4b4c      	ldr	r3, [pc, #304]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 802814a:	689b      	ldr	r3, [r3, #8]
 802814c:	f003 030c 	and.w	r3, r3, #12
 8028150:	2b08      	cmp	r3, #8
 8028152:	d05c      	beq.n	802820e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8028154:	687b      	ldr	r3, [r7, #4]
 8028156:	699b      	ldr	r3, [r3, #24]
 8028158:	2b02      	cmp	r3, #2
 802815a:	d141      	bne.n	80281e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802815c:	4b48      	ldr	r3, [pc, #288]	; (8028280 <HAL_RCC_OscConfig+0x4dc>)
 802815e:	2200      	movs	r2, #0
 8028160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028162:	f7fe fa8b 	bl	802667c <HAL_GetTick>
 8028166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028168:	e008      	b.n	802817c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802816a:	f7fe fa87 	bl	802667c <HAL_GetTick>
 802816e:	4602      	mov	r2, r0
 8028170:	693b      	ldr	r3, [r7, #16]
 8028172:	1ad3      	subs	r3, r2, r3
 8028174:	2b02      	cmp	r3, #2
 8028176:	d901      	bls.n	802817c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8028178:	2303      	movs	r3, #3
 802817a:	e078      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802817c:	4b3f      	ldr	r3, [pc, #252]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 802817e:	681b      	ldr	r3, [r3, #0]
 8028180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028184:	2b00      	cmp	r3, #0
 8028186:	d1f0      	bne.n	802816a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8028188:	687b      	ldr	r3, [r7, #4]
 802818a:	69da      	ldr	r2, [r3, #28]
 802818c:	687b      	ldr	r3, [r7, #4]
 802818e:	6a1b      	ldr	r3, [r3, #32]
 8028190:	431a      	orrs	r2, r3
 8028192:	687b      	ldr	r3, [r7, #4]
 8028194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028196:	019b      	lsls	r3, r3, #6
 8028198:	431a      	orrs	r2, r3
 802819a:	687b      	ldr	r3, [r7, #4]
 802819c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802819e:	085b      	lsrs	r3, r3, #1
 80281a0:	3b01      	subs	r3, #1
 80281a2:	041b      	lsls	r3, r3, #16
 80281a4:	431a      	orrs	r2, r3
 80281a6:	687b      	ldr	r3, [r7, #4]
 80281a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80281aa:	061b      	lsls	r3, r3, #24
 80281ac:	4933      	ldr	r1, [pc, #204]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 80281ae:	4313      	orrs	r3, r2
 80281b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80281b2:	4b33      	ldr	r3, [pc, #204]	; (8028280 <HAL_RCC_OscConfig+0x4dc>)
 80281b4:	2201      	movs	r2, #1
 80281b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80281b8:	f7fe fa60 	bl	802667c <HAL_GetTick>
 80281bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80281be:	e008      	b.n	80281d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80281c0:	f7fe fa5c 	bl	802667c <HAL_GetTick>
 80281c4:	4602      	mov	r2, r0
 80281c6:	693b      	ldr	r3, [r7, #16]
 80281c8:	1ad3      	subs	r3, r2, r3
 80281ca:	2b02      	cmp	r3, #2
 80281cc:	d901      	bls.n	80281d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80281ce:	2303      	movs	r3, #3
 80281d0:	e04d      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80281d2:	4b2a      	ldr	r3, [pc, #168]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 80281d4:	681b      	ldr	r3, [r3, #0]
 80281d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80281da:	2b00      	cmp	r3, #0
 80281dc:	d0f0      	beq.n	80281c0 <HAL_RCC_OscConfig+0x41c>
 80281de:	e045      	b.n	802826c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80281e0:	4b27      	ldr	r3, [pc, #156]	; (8028280 <HAL_RCC_OscConfig+0x4dc>)
 80281e2:	2200      	movs	r2, #0
 80281e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80281e6:	f7fe fa49 	bl	802667c <HAL_GetTick>
 80281ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80281ec:	e008      	b.n	8028200 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80281ee:	f7fe fa45 	bl	802667c <HAL_GetTick>
 80281f2:	4602      	mov	r2, r0
 80281f4:	693b      	ldr	r3, [r7, #16]
 80281f6:	1ad3      	subs	r3, r2, r3
 80281f8:	2b02      	cmp	r3, #2
 80281fa:	d901      	bls.n	8028200 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80281fc:	2303      	movs	r3, #3
 80281fe:	e036      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028200:	4b1e      	ldr	r3, [pc, #120]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 8028202:	681b      	ldr	r3, [r3, #0]
 8028204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028208:	2b00      	cmp	r3, #0
 802820a:	d1f0      	bne.n	80281ee <HAL_RCC_OscConfig+0x44a>
 802820c:	e02e      	b.n	802826c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802820e:	687b      	ldr	r3, [r7, #4]
 8028210:	699b      	ldr	r3, [r3, #24]
 8028212:	2b01      	cmp	r3, #1
 8028214:	d101      	bne.n	802821a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8028216:	2301      	movs	r3, #1
 8028218:	e029      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802821a:	4b18      	ldr	r3, [pc, #96]	; (802827c <HAL_RCC_OscConfig+0x4d8>)
 802821c:	685b      	ldr	r3, [r3, #4]
 802821e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8028220:	68fb      	ldr	r3, [r7, #12]
 8028222:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8028226:	687b      	ldr	r3, [r7, #4]
 8028228:	69db      	ldr	r3, [r3, #28]
 802822a:	429a      	cmp	r2, r3
 802822c:	d11c      	bne.n	8028268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 802822e:	68fb      	ldr	r3, [r7, #12]
 8028230:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8028234:	687b      	ldr	r3, [r7, #4]
 8028236:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8028238:	429a      	cmp	r2, r3
 802823a:	d115      	bne.n	8028268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 802823c:	68fa      	ldr	r2, [r7, #12]
 802823e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8028242:	4013      	ands	r3, r2
 8028244:	687a      	ldr	r2, [r7, #4]
 8028246:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8028248:	4293      	cmp	r3, r2
 802824a:	d10d      	bne.n	8028268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 802824c:	68fb      	ldr	r3, [r7, #12]
 802824e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8028252:	687b      	ldr	r3, [r7, #4]
 8028254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8028256:	429a      	cmp	r2, r3
 8028258:	d106      	bne.n	8028268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 802825a:	68fb      	ldr	r3, [r7, #12]
 802825c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8028260:	687b      	ldr	r3, [r7, #4]
 8028262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8028264:	429a      	cmp	r2, r3
 8028266:	d001      	beq.n	802826c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8028268:	2301      	movs	r3, #1
 802826a:	e000      	b.n	802826e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 802826c:	2300      	movs	r3, #0
}
 802826e:	4618      	mov	r0, r3
 8028270:	3718      	adds	r7, #24
 8028272:	46bd      	mov	sp, r7
 8028274:	bd80      	pop	{r7, pc}
 8028276:	bf00      	nop
 8028278:	40007000 	.word	0x40007000
 802827c:	40023800 	.word	0x40023800
 8028280:	42470060 	.word	0x42470060

08028284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8028284:	b580      	push	{r7, lr}
 8028286:	b084      	sub	sp, #16
 8028288:	af00      	add	r7, sp, #0
 802828a:	6078      	str	r0, [r7, #4]
 802828c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802828e:	687b      	ldr	r3, [r7, #4]
 8028290:	2b00      	cmp	r3, #0
 8028292:	d101      	bne.n	8028298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8028294:	2301      	movs	r3, #1
 8028296:	e0cc      	b.n	8028432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8028298:	4b68      	ldr	r3, [pc, #416]	; (802843c <HAL_RCC_ClockConfig+0x1b8>)
 802829a:	681b      	ldr	r3, [r3, #0]
 802829c:	f003 030f 	and.w	r3, r3, #15
 80282a0:	683a      	ldr	r2, [r7, #0]
 80282a2:	429a      	cmp	r2, r3
 80282a4:	d90c      	bls.n	80282c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80282a6:	4b65      	ldr	r3, [pc, #404]	; (802843c <HAL_RCC_ClockConfig+0x1b8>)
 80282a8:	683a      	ldr	r2, [r7, #0]
 80282aa:	b2d2      	uxtb	r2, r2
 80282ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80282ae:	4b63      	ldr	r3, [pc, #396]	; (802843c <HAL_RCC_ClockConfig+0x1b8>)
 80282b0:	681b      	ldr	r3, [r3, #0]
 80282b2:	f003 030f 	and.w	r3, r3, #15
 80282b6:	683a      	ldr	r2, [r7, #0]
 80282b8:	429a      	cmp	r2, r3
 80282ba:	d001      	beq.n	80282c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80282bc:	2301      	movs	r3, #1
 80282be:	e0b8      	b.n	8028432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80282c0:	687b      	ldr	r3, [r7, #4]
 80282c2:	681b      	ldr	r3, [r3, #0]
 80282c4:	f003 0302 	and.w	r3, r3, #2
 80282c8:	2b00      	cmp	r3, #0
 80282ca:	d020      	beq.n	802830e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80282cc:	687b      	ldr	r3, [r7, #4]
 80282ce:	681b      	ldr	r3, [r3, #0]
 80282d0:	f003 0304 	and.w	r3, r3, #4
 80282d4:	2b00      	cmp	r3, #0
 80282d6:	d005      	beq.n	80282e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80282d8:	4b59      	ldr	r3, [pc, #356]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 80282da:	689b      	ldr	r3, [r3, #8]
 80282dc:	4a58      	ldr	r2, [pc, #352]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 80282de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80282e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80282e4:	687b      	ldr	r3, [r7, #4]
 80282e6:	681b      	ldr	r3, [r3, #0]
 80282e8:	f003 0308 	and.w	r3, r3, #8
 80282ec:	2b00      	cmp	r3, #0
 80282ee:	d005      	beq.n	80282fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80282f0:	4b53      	ldr	r3, [pc, #332]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 80282f2:	689b      	ldr	r3, [r3, #8]
 80282f4:	4a52      	ldr	r2, [pc, #328]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 80282f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80282fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80282fc:	4b50      	ldr	r3, [pc, #320]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 80282fe:	689b      	ldr	r3, [r3, #8]
 8028300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8028304:	687b      	ldr	r3, [r7, #4]
 8028306:	689b      	ldr	r3, [r3, #8]
 8028308:	494d      	ldr	r1, [pc, #308]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 802830a:	4313      	orrs	r3, r2
 802830c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802830e:	687b      	ldr	r3, [r7, #4]
 8028310:	681b      	ldr	r3, [r3, #0]
 8028312:	f003 0301 	and.w	r3, r3, #1
 8028316:	2b00      	cmp	r3, #0
 8028318:	d044      	beq.n	80283a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802831a:	687b      	ldr	r3, [r7, #4]
 802831c:	685b      	ldr	r3, [r3, #4]
 802831e:	2b01      	cmp	r3, #1
 8028320:	d107      	bne.n	8028332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8028322:	4b47      	ldr	r3, [pc, #284]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 8028324:	681b      	ldr	r3, [r3, #0]
 8028326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802832a:	2b00      	cmp	r3, #0
 802832c:	d119      	bne.n	8028362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802832e:	2301      	movs	r3, #1
 8028330:	e07f      	b.n	8028432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8028332:	687b      	ldr	r3, [r7, #4]
 8028334:	685b      	ldr	r3, [r3, #4]
 8028336:	2b02      	cmp	r3, #2
 8028338:	d003      	beq.n	8028342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802833a:	687b      	ldr	r3, [r7, #4]
 802833c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802833e:	2b03      	cmp	r3, #3
 8028340:	d107      	bne.n	8028352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028342:	4b3f      	ldr	r3, [pc, #252]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 8028344:	681b      	ldr	r3, [r3, #0]
 8028346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802834a:	2b00      	cmp	r3, #0
 802834c:	d109      	bne.n	8028362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802834e:	2301      	movs	r3, #1
 8028350:	e06f      	b.n	8028432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8028352:	4b3b      	ldr	r3, [pc, #236]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 8028354:	681b      	ldr	r3, [r3, #0]
 8028356:	f003 0302 	and.w	r3, r3, #2
 802835a:	2b00      	cmp	r3, #0
 802835c:	d101      	bne.n	8028362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802835e:	2301      	movs	r3, #1
 8028360:	e067      	b.n	8028432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8028362:	4b37      	ldr	r3, [pc, #220]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 8028364:	689b      	ldr	r3, [r3, #8]
 8028366:	f023 0203 	bic.w	r2, r3, #3
 802836a:	687b      	ldr	r3, [r7, #4]
 802836c:	685b      	ldr	r3, [r3, #4]
 802836e:	4934      	ldr	r1, [pc, #208]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 8028370:	4313      	orrs	r3, r2
 8028372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8028374:	f7fe f982 	bl	802667c <HAL_GetTick>
 8028378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802837a:	e00a      	b.n	8028392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802837c:	f7fe f97e 	bl	802667c <HAL_GetTick>
 8028380:	4602      	mov	r2, r0
 8028382:	68fb      	ldr	r3, [r7, #12]
 8028384:	1ad3      	subs	r3, r2, r3
 8028386:	f241 3288 	movw	r2, #5000	; 0x1388
 802838a:	4293      	cmp	r3, r2
 802838c:	d901      	bls.n	8028392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802838e:	2303      	movs	r3, #3
 8028390:	e04f      	b.n	8028432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028392:	4b2b      	ldr	r3, [pc, #172]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 8028394:	689b      	ldr	r3, [r3, #8]
 8028396:	f003 020c 	and.w	r2, r3, #12
 802839a:	687b      	ldr	r3, [r7, #4]
 802839c:	685b      	ldr	r3, [r3, #4]
 802839e:	009b      	lsls	r3, r3, #2
 80283a0:	429a      	cmp	r2, r3
 80283a2:	d1eb      	bne.n	802837c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80283a4:	4b25      	ldr	r3, [pc, #148]	; (802843c <HAL_RCC_ClockConfig+0x1b8>)
 80283a6:	681b      	ldr	r3, [r3, #0]
 80283a8:	f003 030f 	and.w	r3, r3, #15
 80283ac:	683a      	ldr	r2, [r7, #0]
 80283ae:	429a      	cmp	r2, r3
 80283b0:	d20c      	bcs.n	80283cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80283b2:	4b22      	ldr	r3, [pc, #136]	; (802843c <HAL_RCC_ClockConfig+0x1b8>)
 80283b4:	683a      	ldr	r2, [r7, #0]
 80283b6:	b2d2      	uxtb	r2, r2
 80283b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80283ba:	4b20      	ldr	r3, [pc, #128]	; (802843c <HAL_RCC_ClockConfig+0x1b8>)
 80283bc:	681b      	ldr	r3, [r3, #0]
 80283be:	f003 030f 	and.w	r3, r3, #15
 80283c2:	683a      	ldr	r2, [r7, #0]
 80283c4:	429a      	cmp	r2, r3
 80283c6:	d001      	beq.n	80283cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80283c8:	2301      	movs	r3, #1
 80283ca:	e032      	b.n	8028432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80283cc:	687b      	ldr	r3, [r7, #4]
 80283ce:	681b      	ldr	r3, [r3, #0]
 80283d0:	f003 0304 	and.w	r3, r3, #4
 80283d4:	2b00      	cmp	r3, #0
 80283d6:	d008      	beq.n	80283ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80283d8:	4b19      	ldr	r3, [pc, #100]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 80283da:	689b      	ldr	r3, [r3, #8]
 80283dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80283e0:	687b      	ldr	r3, [r7, #4]
 80283e2:	68db      	ldr	r3, [r3, #12]
 80283e4:	4916      	ldr	r1, [pc, #88]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 80283e6:	4313      	orrs	r3, r2
 80283e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80283ea:	687b      	ldr	r3, [r7, #4]
 80283ec:	681b      	ldr	r3, [r3, #0]
 80283ee:	f003 0308 	and.w	r3, r3, #8
 80283f2:	2b00      	cmp	r3, #0
 80283f4:	d009      	beq.n	802840a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80283f6:	4b12      	ldr	r3, [pc, #72]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 80283f8:	689b      	ldr	r3, [r3, #8]
 80283fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80283fe:	687b      	ldr	r3, [r7, #4]
 8028400:	691b      	ldr	r3, [r3, #16]
 8028402:	00db      	lsls	r3, r3, #3
 8028404:	490e      	ldr	r1, [pc, #56]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 8028406:	4313      	orrs	r3, r2
 8028408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802840a:	f000 f821 	bl	8028450 <HAL_RCC_GetSysClockFreq>
 802840e:	4601      	mov	r1, r0
 8028410:	4b0b      	ldr	r3, [pc, #44]	; (8028440 <HAL_RCC_ClockConfig+0x1bc>)
 8028412:	689b      	ldr	r3, [r3, #8]
 8028414:	091b      	lsrs	r3, r3, #4
 8028416:	f003 030f 	and.w	r3, r3, #15
 802841a:	4a0a      	ldr	r2, [pc, #40]	; (8028444 <HAL_RCC_ClockConfig+0x1c0>)
 802841c:	5cd3      	ldrb	r3, [r2, r3]
 802841e:	fa21 f303 	lsr.w	r3, r1, r3
 8028422:	4a09      	ldr	r2, [pc, #36]	; (8028448 <HAL_RCC_ClockConfig+0x1c4>)
 8028424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8028426:	4b09      	ldr	r3, [pc, #36]	; (802844c <HAL_RCC_ClockConfig+0x1c8>)
 8028428:	681b      	ldr	r3, [r3, #0]
 802842a:	4618      	mov	r0, r3
 802842c:	f7fe f8e2 	bl	80265f4 <HAL_InitTick>

  return HAL_OK;
 8028430:	2300      	movs	r3, #0
}
 8028432:	4618      	mov	r0, r3
 8028434:	3710      	adds	r7, #16
 8028436:	46bd      	mov	sp, r7
 8028438:	bd80      	pop	{r7, pc}
 802843a:	bf00      	nop
 802843c:	40023c00 	.word	0x40023c00
 8028440:	40023800 	.word	0x40023800
 8028444:	0802a188 	.word	0x0802a188
 8028448:	20000010 	.word	0x20000010
 802844c:	20000014 	.word	0x20000014

08028450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8028450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028452:	b085      	sub	sp, #20
 8028454:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8028456:	2300      	movs	r3, #0
 8028458:	607b      	str	r3, [r7, #4]
 802845a:	2300      	movs	r3, #0
 802845c:	60fb      	str	r3, [r7, #12]
 802845e:	2300      	movs	r3, #0
 8028460:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8028462:	2300      	movs	r3, #0
 8028464:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8028466:	4b50      	ldr	r3, [pc, #320]	; (80285a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8028468:	689b      	ldr	r3, [r3, #8]
 802846a:	f003 030c 	and.w	r3, r3, #12
 802846e:	2b04      	cmp	r3, #4
 8028470:	d007      	beq.n	8028482 <HAL_RCC_GetSysClockFreq+0x32>
 8028472:	2b08      	cmp	r3, #8
 8028474:	d008      	beq.n	8028488 <HAL_RCC_GetSysClockFreq+0x38>
 8028476:	2b00      	cmp	r3, #0
 8028478:	f040 808d 	bne.w	8028596 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802847c:	4b4b      	ldr	r3, [pc, #300]	; (80285ac <HAL_RCC_GetSysClockFreq+0x15c>)
 802847e:	60bb      	str	r3, [r7, #8]
       break;
 8028480:	e08c      	b.n	802859c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8028482:	4b4b      	ldr	r3, [pc, #300]	; (80285b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8028484:	60bb      	str	r3, [r7, #8]
      break;
 8028486:	e089      	b.n	802859c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8028488:	4b47      	ldr	r3, [pc, #284]	; (80285a8 <HAL_RCC_GetSysClockFreq+0x158>)
 802848a:	685b      	ldr	r3, [r3, #4]
 802848c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8028490:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8028492:	4b45      	ldr	r3, [pc, #276]	; (80285a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8028494:	685b      	ldr	r3, [r3, #4]
 8028496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802849a:	2b00      	cmp	r3, #0
 802849c:	d023      	beq.n	80284e6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802849e:	4b42      	ldr	r3, [pc, #264]	; (80285a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80284a0:	685b      	ldr	r3, [r3, #4]
 80284a2:	099b      	lsrs	r3, r3, #6
 80284a4:	f04f 0400 	mov.w	r4, #0
 80284a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80284ac:	f04f 0200 	mov.w	r2, #0
 80284b0:	ea03 0501 	and.w	r5, r3, r1
 80284b4:	ea04 0602 	and.w	r6, r4, r2
 80284b8:	4a3d      	ldr	r2, [pc, #244]	; (80285b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80284ba:	fb02 f106 	mul.w	r1, r2, r6
 80284be:	2200      	movs	r2, #0
 80284c0:	fb02 f205 	mul.w	r2, r2, r5
 80284c4:	440a      	add	r2, r1
 80284c6:	493a      	ldr	r1, [pc, #232]	; (80285b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80284c8:	fba5 0101 	umull	r0, r1, r5, r1
 80284cc:	1853      	adds	r3, r2, r1
 80284ce:	4619      	mov	r1, r3
 80284d0:	687b      	ldr	r3, [r7, #4]
 80284d2:	f04f 0400 	mov.w	r4, #0
 80284d6:	461a      	mov	r2, r3
 80284d8:	4623      	mov	r3, r4
 80284da:	f7f8 fa57 	bl	802098c <__aeabi_uldivmod>
 80284de:	4603      	mov	r3, r0
 80284e0:	460c      	mov	r4, r1
 80284e2:	60fb      	str	r3, [r7, #12]
 80284e4:	e049      	b.n	802857a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80284e6:	4b30      	ldr	r3, [pc, #192]	; (80285a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80284e8:	685b      	ldr	r3, [r3, #4]
 80284ea:	099b      	lsrs	r3, r3, #6
 80284ec:	f04f 0400 	mov.w	r4, #0
 80284f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80284f4:	f04f 0200 	mov.w	r2, #0
 80284f8:	ea03 0501 	and.w	r5, r3, r1
 80284fc:	ea04 0602 	and.w	r6, r4, r2
 8028500:	4629      	mov	r1, r5
 8028502:	4632      	mov	r2, r6
 8028504:	f04f 0300 	mov.w	r3, #0
 8028508:	f04f 0400 	mov.w	r4, #0
 802850c:	0154      	lsls	r4, r2, #5
 802850e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8028512:	014b      	lsls	r3, r1, #5
 8028514:	4619      	mov	r1, r3
 8028516:	4622      	mov	r2, r4
 8028518:	1b49      	subs	r1, r1, r5
 802851a:	eb62 0206 	sbc.w	r2, r2, r6
 802851e:	f04f 0300 	mov.w	r3, #0
 8028522:	f04f 0400 	mov.w	r4, #0
 8028526:	0194      	lsls	r4, r2, #6
 8028528:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 802852c:	018b      	lsls	r3, r1, #6
 802852e:	1a5b      	subs	r3, r3, r1
 8028530:	eb64 0402 	sbc.w	r4, r4, r2
 8028534:	f04f 0100 	mov.w	r1, #0
 8028538:	f04f 0200 	mov.w	r2, #0
 802853c:	00e2      	lsls	r2, r4, #3
 802853e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8028542:	00d9      	lsls	r1, r3, #3
 8028544:	460b      	mov	r3, r1
 8028546:	4614      	mov	r4, r2
 8028548:	195b      	adds	r3, r3, r5
 802854a:	eb44 0406 	adc.w	r4, r4, r6
 802854e:	f04f 0100 	mov.w	r1, #0
 8028552:	f04f 0200 	mov.w	r2, #0
 8028556:	02a2      	lsls	r2, r4, #10
 8028558:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 802855c:	0299      	lsls	r1, r3, #10
 802855e:	460b      	mov	r3, r1
 8028560:	4614      	mov	r4, r2
 8028562:	4618      	mov	r0, r3
 8028564:	4621      	mov	r1, r4
 8028566:	687b      	ldr	r3, [r7, #4]
 8028568:	f04f 0400 	mov.w	r4, #0
 802856c:	461a      	mov	r2, r3
 802856e:	4623      	mov	r3, r4
 8028570:	f7f8 fa0c 	bl	802098c <__aeabi_uldivmod>
 8028574:	4603      	mov	r3, r0
 8028576:	460c      	mov	r4, r1
 8028578:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 802857a:	4b0b      	ldr	r3, [pc, #44]	; (80285a8 <HAL_RCC_GetSysClockFreq+0x158>)
 802857c:	685b      	ldr	r3, [r3, #4]
 802857e:	0c1b      	lsrs	r3, r3, #16
 8028580:	f003 0303 	and.w	r3, r3, #3
 8028584:	3301      	adds	r3, #1
 8028586:	005b      	lsls	r3, r3, #1
 8028588:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 802858a:	68fa      	ldr	r2, [r7, #12]
 802858c:	683b      	ldr	r3, [r7, #0]
 802858e:	fbb2 f3f3 	udiv	r3, r2, r3
 8028592:	60bb      	str	r3, [r7, #8]
      break;
 8028594:	e002      	b.n	802859c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8028596:	4b05      	ldr	r3, [pc, #20]	; (80285ac <HAL_RCC_GetSysClockFreq+0x15c>)
 8028598:	60bb      	str	r3, [r7, #8]
      break;
 802859a:	bf00      	nop
    }
  }
  return sysclockfreq;
 802859c:	68bb      	ldr	r3, [r7, #8]
}
 802859e:	4618      	mov	r0, r3
 80285a0:	3714      	adds	r7, #20
 80285a2:	46bd      	mov	sp, r7
 80285a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80285a6:	bf00      	nop
 80285a8:	40023800 	.word	0x40023800
 80285ac:	00f42400 	.word	0x00f42400
 80285b0:	00b71b00 	.word	0x00b71b00

080285b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80285b4:	b480      	push	{r7}
 80285b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80285b8:	4b03      	ldr	r3, [pc, #12]	; (80285c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80285ba:	681b      	ldr	r3, [r3, #0]
}
 80285bc:	4618      	mov	r0, r3
 80285be:	46bd      	mov	sp, r7
 80285c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285c4:	4770      	bx	lr
 80285c6:	bf00      	nop
 80285c8:	20000010 	.word	0x20000010

080285cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80285cc:	b580      	push	{r7, lr}
 80285ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80285d0:	f7ff fff0 	bl	80285b4 <HAL_RCC_GetHCLKFreq>
 80285d4:	4601      	mov	r1, r0
 80285d6:	4b05      	ldr	r3, [pc, #20]	; (80285ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80285d8:	689b      	ldr	r3, [r3, #8]
 80285da:	0a9b      	lsrs	r3, r3, #10
 80285dc:	f003 0307 	and.w	r3, r3, #7
 80285e0:	4a03      	ldr	r2, [pc, #12]	; (80285f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80285e2:	5cd3      	ldrb	r3, [r2, r3]
 80285e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80285e8:	4618      	mov	r0, r3
 80285ea:	bd80      	pop	{r7, pc}
 80285ec:	40023800 	.word	0x40023800
 80285f0:	0802a198 	.word	0x0802a198

080285f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80285f4:	b580      	push	{r7, lr}
 80285f6:	b082      	sub	sp, #8
 80285f8:	af00      	add	r7, sp, #0
 80285fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80285fc:	687b      	ldr	r3, [r7, #4]
 80285fe:	2b00      	cmp	r3, #0
 8028600:	d101      	bne.n	8028606 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8028602:	2301      	movs	r3, #1
 8028604:	e056      	b.n	80286b4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8028606:	687b      	ldr	r3, [r7, #4]
 8028608:	2200      	movs	r2, #0
 802860a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802860c:	687b      	ldr	r3, [r7, #4]
 802860e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028612:	b2db      	uxtb	r3, r3
 8028614:	2b00      	cmp	r3, #0
 8028616:	d106      	bne.n	8028626 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8028618:	687b      	ldr	r3, [r7, #4]
 802861a:	2200      	movs	r2, #0
 802861c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8028620:	6878      	ldr	r0, [r7, #4]
 8028622:	f7fc f941 	bl	80248a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8028626:	687b      	ldr	r3, [r7, #4]
 8028628:	2202      	movs	r2, #2
 802862a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802862e:	687b      	ldr	r3, [r7, #4]
 8028630:	681b      	ldr	r3, [r3, #0]
 8028632:	681a      	ldr	r2, [r3, #0]
 8028634:	687b      	ldr	r3, [r7, #4]
 8028636:	681b      	ldr	r3, [r3, #0]
 8028638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802863c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 802863e:	687b      	ldr	r3, [r7, #4]
 8028640:	685a      	ldr	r2, [r3, #4]
 8028642:	687b      	ldr	r3, [r7, #4]
 8028644:	689b      	ldr	r3, [r3, #8]
 8028646:	431a      	orrs	r2, r3
 8028648:	687b      	ldr	r3, [r7, #4]
 802864a:	68db      	ldr	r3, [r3, #12]
 802864c:	431a      	orrs	r2, r3
 802864e:	687b      	ldr	r3, [r7, #4]
 8028650:	691b      	ldr	r3, [r3, #16]
 8028652:	431a      	orrs	r2, r3
 8028654:	687b      	ldr	r3, [r7, #4]
 8028656:	695b      	ldr	r3, [r3, #20]
 8028658:	431a      	orrs	r2, r3
 802865a:	687b      	ldr	r3, [r7, #4]
 802865c:	699b      	ldr	r3, [r3, #24]
 802865e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8028662:	431a      	orrs	r2, r3
 8028664:	687b      	ldr	r3, [r7, #4]
 8028666:	69db      	ldr	r3, [r3, #28]
 8028668:	431a      	orrs	r2, r3
 802866a:	687b      	ldr	r3, [r7, #4]
 802866c:	6a1b      	ldr	r3, [r3, #32]
 802866e:	ea42 0103 	orr.w	r1, r2, r3
 8028672:	687b      	ldr	r3, [r7, #4]
 8028674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8028676:	687b      	ldr	r3, [r7, #4]
 8028678:	681b      	ldr	r3, [r3, #0]
 802867a:	430a      	orrs	r2, r1
 802867c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 802867e:	687b      	ldr	r3, [r7, #4]
 8028680:	699b      	ldr	r3, [r3, #24]
 8028682:	0c1b      	lsrs	r3, r3, #16
 8028684:	f003 0104 	and.w	r1, r3, #4
 8028688:	687b      	ldr	r3, [r7, #4]
 802868a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802868c:	687b      	ldr	r3, [r7, #4]
 802868e:	681b      	ldr	r3, [r3, #0]
 8028690:	430a      	orrs	r2, r1
 8028692:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8028694:	687b      	ldr	r3, [r7, #4]
 8028696:	681b      	ldr	r3, [r3, #0]
 8028698:	69da      	ldr	r2, [r3, #28]
 802869a:	687b      	ldr	r3, [r7, #4]
 802869c:	681b      	ldr	r3, [r3, #0]
 802869e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80286a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80286a4:	687b      	ldr	r3, [r7, #4]
 80286a6:	2200      	movs	r2, #0
 80286a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80286aa:	687b      	ldr	r3, [r7, #4]
 80286ac:	2201      	movs	r2, #1
 80286ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80286b2:	2300      	movs	r3, #0
}
 80286b4:	4618      	mov	r0, r3
 80286b6:	3708      	adds	r7, #8
 80286b8:	46bd      	mov	sp, r7
 80286ba:	bd80      	pop	{r7, pc}

080286bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80286bc:	b580      	push	{r7, lr}
 80286be:	b088      	sub	sp, #32
 80286c0:	af00      	add	r7, sp, #0
 80286c2:	60f8      	str	r0, [r7, #12]
 80286c4:	60b9      	str	r1, [r7, #8]
 80286c6:	603b      	str	r3, [r7, #0]
 80286c8:	4613      	mov	r3, r2
 80286ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80286cc:	2300      	movs	r3, #0
 80286ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80286d0:	68fb      	ldr	r3, [r7, #12]
 80286d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80286d6:	2b01      	cmp	r3, #1
 80286d8:	d101      	bne.n	80286de <HAL_SPI_Transmit+0x22>
 80286da:	2302      	movs	r3, #2
 80286dc:	e11e      	b.n	802891c <HAL_SPI_Transmit+0x260>
 80286de:	68fb      	ldr	r3, [r7, #12]
 80286e0:	2201      	movs	r2, #1
 80286e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80286e6:	f7fd ffc9 	bl	802667c <HAL_GetTick>
 80286ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80286ec:	88fb      	ldrh	r3, [r7, #6]
 80286ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80286f0:	68fb      	ldr	r3, [r7, #12]
 80286f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80286f6:	b2db      	uxtb	r3, r3
 80286f8:	2b01      	cmp	r3, #1
 80286fa:	d002      	beq.n	8028702 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80286fc:	2302      	movs	r3, #2
 80286fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028700:	e103      	b.n	802890a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8028702:	68bb      	ldr	r3, [r7, #8]
 8028704:	2b00      	cmp	r3, #0
 8028706:	d002      	beq.n	802870e <HAL_SPI_Transmit+0x52>
 8028708:	88fb      	ldrh	r3, [r7, #6]
 802870a:	2b00      	cmp	r3, #0
 802870c:	d102      	bne.n	8028714 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 802870e:	2301      	movs	r3, #1
 8028710:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028712:	e0fa      	b.n	802890a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8028714:	68fb      	ldr	r3, [r7, #12]
 8028716:	2203      	movs	r2, #3
 8028718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802871c:	68fb      	ldr	r3, [r7, #12]
 802871e:	2200      	movs	r2, #0
 8028720:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8028722:	68fb      	ldr	r3, [r7, #12]
 8028724:	68ba      	ldr	r2, [r7, #8]
 8028726:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8028728:	68fb      	ldr	r3, [r7, #12]
 802872a:	88fa      	ldrh	r2, [r7, #6]
 802872c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802872e:	68fb      	ldr	r3, [r7, #12]
 8028730:	88fa      	ldrh	r2, [r7, #6]
 8028732:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8028734:	68fb      	ldr	r3, [r7, #12]
 8028736:	2200      	movs	r2, #0
 8028738:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 802873a:	68fb      	ldr	r3, [r7, #12]
 802873c:	2200      	movs	r2, #0
 802873e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8028740:	68fb      	ldr	r3, [r7, #12]
 8028742:	2200      	movs	r2, #0
 8028744:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8028746:	68fb      	ldr	r3, [r7, #12]
 8028748:	2200      	movs	r2, #0
 802874a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 802874c:	68fb      	ldr	r3, [r7, #12]
 802874e:	2200      	movs	r2, #0
 8028750:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028752:	68fb      	ldr	r3, [r7, #12]
 8028754:	689b      	ldr	r3, [r3, #8]
 8028756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802875a:	d107      	bne.n	802876c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 802875c:	68fb      	ldr	r3, [r7, #12]
 802875e:	681b      	ldr	r3, [r3, #0]
 8028760:	681a      	ldr	r2, [r3, #0]
 8028762:	68fb      	ldr	r3, [r7, #12]
 8028764:	681b      	ldr	r3, [r3, #0]
 8028766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802876a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802876c:	68fb      	ldr	r3, [r7, #12]
 802876e:	681b      	ldr	r3, [r3, #0]
 8028770:	681b      	ldr	r3, [r3, #0]
 8028772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028776:	2b40      	cmp	r3, #64	; 0x40
 8028778:	d007      	beq.n	802878a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802877a:	68fb      	ldr	r3, [r7, #12]
 802877c:	681b      	ldr	r3, [r3, #0]
 802877e:	681a      	ldr	r2, [r3, #0]
 8028780:	68fb      	ldr	r3, [r7, #12]
 8028782:	681b      	ldr	r3, [r3, #0]
 8028784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028788:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802878a:	68fb      	ldr	r3, [r7, #12]
 802878c:	68db      	ldr	r3, [r3, #12]
 802878e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028792:	d14b      	bne.n	802882c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028794:	68fb      	ldr	r3, [r7, #12]
 8028796:	685b      	ldr	r3, [r3, #4]
 8028798:	2b00      	cmp	r3, #0
 802879a:	d002      	beq.n	80287a2 <HAL_SPI_Transmit+0xe6>
 802879c:	8afb      	ldrh	r3, [r7, #22]
 802879e:	2b01      	cmp	r3, #1
 80287a0:	d13e      	bne.n	8028820 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80287a2:	68fb      	ldr	r3, [r7, #12]
 80287a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80287a6:	881a      	ldrh	r2, [r3, #0]
 80287a8:	68fb      	ldr	r3, [r7, #12]
 80287aa:	681b      	ldr	r3, [r3, #0]
 80287ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80287ae:	68fb      	ldr	r3, [r7, #12]
 80287b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80287b2:	1c9a      	adds	r2, r3, #2
 80287b4:	68fb      	ldr	r3, [r7, #12]
 80287b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80287b8:	68fb      	ldr	r3, [r7, #12]
 80287ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80287bc:	b29b      	uxth	r3, r3
 80287be:	3b01      	subs	r3, #1
 80287c0:	b29a      	uxth	r2, r3
 80287c2:	68fb      	ldr	r3, [r7, #12]
 80287c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80287c6:	e02b      	b.n	8028820 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80287c8:	68fb      	ldr	r3, [r7, #12]
 80287ca:	681b      	ldr	r3, [r3, #0]
 80287cc:	689b      	ldr	r3, [r3, #8]
 80287ce:	f003 0302 	and.w	r3, r3, #2
 80287d2:	2b02      	cmp	r3, #2
 80287d4:	d112      	bne.n	80287fc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80287d6:	68fb      	ldr	r3, [r7, #12]
 80287d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80287da:	881a      	ldrh	r2, [r3, #0]
 80287dc:	68fb      	ldr	r3, [r7, #12]
 80287de:	681b      	ldr	r3, [r3, #0]
 80287e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80287e2:	68fb      	ldr	r3, [r7, #12]
 80287e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80287e6:	1c9a      	adds	r2, r3, #2
 80287e8:	68fb      	ldr	r3, [r7, #12]
 80287ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80287ec:	68fb      	ldr	r3, [r7, #12]
 80287ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80287f0:	b29b      	uxth	r3, r3
 80287f2:	3b01      	subs	r3, #1
 80287f4:	b29a      	uxth	r2, r3
 80287f6:	68fb      	ldr	r3, [r7, #12]
 80287f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80287fa:	e011      	b.n	8028820 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80287fc:	f7fd ff3e 	bl	802667c <HAL_GetTick>
 8028800:	4602      	mov	r2, r0
 8028802:	69bb      	ldr	r3, [r7, #24]
 8028804:	1ad3      	subs	r3, r2, r3
 8028806:	683a      	ldr	r2, [r7, #0]
 8028808:	429a      	cmp	r2, r3
 802880a:	d803      	bhi.n	8028814 <HAL_SPI_Transmit+0x158>
 802880c:	683b      	ldr	r3, [r7, #0]
 802880e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028812:	d102      	bne.n	802881a <HAL_SPI_Transmit+0x15e>
 8028814:	683b      	ldr	r3, [r7, #0]
 8028816:	2b00      	cmp	r3, #0
 8028818:	d102      	bne.n	8028820 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 802881a:	2303      	movs	r3, #3
 802881c:	77fb      	strb	r3, [r7, #31]
          goto error;
 802881e:	e074      	b.n	802890a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8028820:	68fb      	ldr	r3, [r7, #12]
 8028822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028824:	b29b      	uxth	r3, r3
 8028826:	2b00      	cmp	r3, #0
 8028828:	d1ce      	bne.n	80287c8 <HAL_SPI_Transmit+0x10c>
 802882a:	e04c      	b.n	80288c6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802882c:	68fb      	ldr	r3, [r7, #12]
 802882e:	685b      	ldr	r3, [r3, #4]
 8028830:	2b00      	cmp	r3, #0
 8028832:	d002      	beq.n	802883a <HAL_SPI_Transmit+0x17e>
 8028834:	8afb      	ldrh	r3, [r7, #22]
 8028836:	2b01      	cmp	r3, #1
 8028838:	d140      	bne.n	80288bc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802883a:	68fb      	ldr	r3, [r7, #12]
 802883c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802883e:	68fb      	ldr	r3, [r7, #12]
 8028840:	681b      	ldr	r3, [r3, #0]
 8028842:	330c      	adds	r3, #12
 8028844:	7812      	ldrb	r2, [r2, #0]
 8028846:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028848:	68fb      	ldr	r3, [r7, #12]
 802884a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802884c:	1c5a      	adds	r2, r3, #1
 802884e:	68fb      	ldr	r3, [r7, #12]
 8028850:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028852:	68fb      	ldr	r3, [r7, #12]
 8028854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028856:	b29b      	uxth	r3, r3
 8028858:	3b01      	subs	r3, #1
 802885a:	b29a      	uxth	r2, r3
 802885c:	68fb      	ldr	r3, [r7, #12]
 802885e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8028860:	e02c      	b.n	80288bc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028862:	68fb      	ldr	r3, [r7, #12]
 8028864:	681b      	ldr	r3, [r3, #0]
 8028866:	689b      	ldr	r3, [r3, #8]
 8028868:	f003 0302 	and.w	r3, r3, #2
 802886c:	2b02      	cmp	r3, #2
 802886e:	d113      	bne.n	8028898 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028870:	68fb      	ldr	r3, [r7, #12]
 8028872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028874:	68fb      	ldr	r3, [r7, #12]
 8028876:	681b      	ldr	r3, [r3, #0]
 8028878:	330c      	adds	r3, #12
 802887a:	7812      	ldrb	r2, [r2, #0]
 802887c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 802887e:	68fb      	ldr	r3, [r7, #12]
 8028880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028882:	1c5a      	adds	r2, r3, #1
 8028884:	68fb      	ldr	r3, [r7, #12]
 8028886:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028888:	68fb      	ldr	r3, [r7, #12]
 802888a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802888c:	b29b      	uxth	r3, r3
 802888e:	3b01      	subs	r3, #1
 8028890:	b29a      	uxth	r2, r3
 8028892:	68fb      	ldr	r3, [r7, #12]
 8028894:	86da      	strh	r2, [r3, #54]	; 0x36
 8028896:	e011      	b.n	80288bc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028898:	f7fd fef0 	bl	802667c <HAL_GetTick>
 802889c:	4602      	mov	r2, r0
 802889e:	69bb      	ldr	r3, [r7, #24]
 80288a0:	1ad3      	subs	r3, r2, r3
 80288a2:	683a      	ldr	r2, [r7, #0]
 80288a4:	429a      	cmp	r2, r3
 80288a6:	d803      	bhi.n	80288b0 <HAL_SPI_Transmit+0x1f4>
 80288a8:	683b      	ldr	r3, [r7, #0]
 80288aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80288ae:	d102      	bne.n	80288b6 <HAL_SPI_Transmit+0x1fa>
 80288b0:	683b      	ldr	r3, [r7, #0]
 80288b2:	2b00      	cmp	r3, #0
 80288b4:	d102      	bne.n	80288bc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80288b6:	2303      	movs	r3, #3
 80288b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80288ba:	e026      	b.n	802890a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80288bc:	68fb      	ldr	r3, [r7, #12]
 80288be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80288c0:	b29b      	uxth	r3, r3
 80288c2:	2b00      	cmp	r3, #0
 80288c4:	d1cd      	bne.n	8028862 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80288c6:	69ba      	ldr	r2, [r7, #24]
 80288c8:	6839      	ldr	r1, [r7, #0]
 80288ca:	68f8      	ldr	r0, [r7, #12]
 80288cc:	f000 fba4 	bl	8029018 <SPI_EndRxTxTransaction>
 80288d0:	4603      	mov	r3, r0
 80288d2:	2b00      	cmp	r3, #0
 80288d4:	d002      	beq.n	80288dc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80288d6:	68fb      	ldr	r3, [r7, #12]
 80288d8:	2220      	movs	r2, #32
 80288da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80288dc:	68fb      	ldr	r3, [r7, #12]
 80288de:	689b      	ldr	r3, [r3, #8]
 80288e0:	2b00      	cmp	r3, #0
 80288e2:	d10a      	bne.n	80288fa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80288e4:	2300      	movs	r3, #0
 80288e6:	613b      	str	r3, [r7, #16]
 80288e8:	68fb      	ldr	r3, [r7, #12]
 80288ea:	681b      	ldr	r3, [r3, #0]
 80288ec:	68db      	ldr	r3, [r3, #12]
 80288ee:	613b      	str	r3, [r7, #16]
 80288f0:	68fb      	ldr	r3, [r7, #12]
 80288f2:	681b      	ldr	r3, [r3, #0]
 80288f4:	689b      	ldr	r3, [r3, #8]
 80288f6:	613b      	str	r3, [r7, #16]
 80288f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80288fa:	68fb      	ldr	r3, [r7, #12]
 80288fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80288fe:	2b00      	cmp	r3, #0
 8028900:	d002      	beq.n	8028908 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8028902:	2301      	movs	r3, #1
 8028904:	77fb      	strb	r3, [r7, #31]
 8028906:	e000      	b.n	802890a <HAL_SPI_Transmit+0x24e>
  }

error:
 8028908:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802890a:	68fb      	ldr	r3, [r7, #12]
 802890c:	2201      	movs	r2, #1
 802890e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8028912:	68fb      	ldr	r3, [r7, #12]
 8028914:	2200      	movs	r2, #0
 8028916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802891a:	7ffb      	ldrb	r3, [r7, #31]
}
 802891c:	4618      	mov	r0, r3
 802891e:	3720      	adds	r7, #32
 8028920:	46bd      	mov	sp, r7
 8028922:	bd80      	pop	{r7, pc}

08028924 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028924:	b580      	push	{r7, lr}
 8028926:	b088      	sub	sp, #32
 8028928:	af02      	add	r7, sp, #8
 802892a:	60f8      	str	r0, [r7, #12]
 802892c:	60b9      	str	r1, [r7, #8]
 802892e:	603b      	str	r3, [r7, #0]
 8028930:	4613      	mov	r3, r2
 8028932:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028934:	2300      	movs	r3, #0
 8028936:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8028938:	68fb      	ldr	r3, [r7, #12]
 802893a:	685b      	ldr	r3, [r3, #4]
 802893c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028940:	d112      	bne.n	8028968 <HAL_SPI_Receive+0x44>
 8028942:	68fb      	ldr	r3, [r7, #12]
 8028944:	689b      	ldr	r3, [r3, #8]
 8028946:	2b00      	cmp	r3, #0
 8028948:	d10e      	bne.n	8028968 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 802894a:	68fb      	ldr	r3, [r7, #12]
 802894c:	2204      	movs	r2, #4
 802894e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8028952:	88fa      	ldrh	r2, [r7, #6]
 8028954:	683b      	ldr	r3, [r7, #0]
 8028956:	9300      	str	r3, [sp, #0]
 8028958:	4613      	mov	r3, r2
 802895a:	68ba      	ldr	r2, [r7, #8]
 802895c:	68b9      	ldr	r1, [r7, #8]
 802895e:	68f8      	ldr	r0, [r7, #12]
 8028960:	f000 f8e9 	bl	8028b36 <HAL_SPI_TransmitReceive>
 8028964:	4603      	mov	r3, r0
 8028966:	e0e2      	b.n	8028b2e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028968:	68fb      	ldr	r3, [r7, #12]
 802896a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802896e:	2b01      	cmp	r3, #1
 8028970:	d101      	bne.n	8028976 <HAL_SPI_Receive+0x52>
 8028972:	2302      	movs	r3, #2
 8028974:	e0db      	b.n	8028b2e <HAL_SPI_Receive+0x20a>
 8028976:	68fb      	ldr	r3, [r7, #12]
 8028978:	2201      	movs	r2, #1
 802897a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802897e:	f7fd fe7d 	bl	802667c <HAL_GetTick>
 8028982:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028984:	68fb      	ldr	r3, [r7, #12]
 8028986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802898a:	b2db      	uxtb	r3, r3
 802898c:	2b01      	cmp	r3, #1
 802898e:	d002      	beq.n	8028996 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8028990:	2302      	movs	r3, #2
 8028992:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028994:	e0c2      	b.n	8028b1c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8028996:	68bb      	ldr	r3, [r7, #8]
 8028998:	2b00      	cmp	r3, #0
 802899a:	d002      	beq.n	80289a2 <HAL_SPI_Receive+0x7e>
 802899c:	88fb      	ldrh	r3, [r7, #6]
 802899e:	2b00      	cmp	r3, #0
 80289a0:	d102      	bne.n	80289a8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80289a2:	2301      	movs	r3, #1
 80289a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80289a6:	e0b9      	b.n	8028b1c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80289a8:	68fb      	ldr	r3, [r7, #12]
 80289aa:	2204      	movs	r2, #4
 80289ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80289b0:	68fb      	ldr	r3, [r7, #12]
 80289b2:	2200      	movs	r2, #0
 80289b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80289b6:	68fb      	ldr	r3, [r7, #12]
 80289b8:	68ba      	ldr	r2, [r7, #8]
 80289ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80289bc:	68fb      	ldr	r3, [r7, #12]
 80289be:	88fa      	ldrh	r2, [r7, #6]
 80289c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80289c2:	68fb      	ldr	r3, [r7, #12]
 80289c4:	88fa      	ldrh	r2, [r7, #6]
 80289c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80289c8:	68fb      	ldr	r3, [r7, #12]
 80289ca:	2200      	movs	r2, #0
 80289cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80289ce:	68fb      	ldr	r3, [r7, #12]
 80289d0:	2200      	movs	r2, #0
 80289d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80289d4:	68fb      	ldr	r3, [r7, #12]
 80289d6:	2200      	movs	r2, #0
 80289d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80289da:	68fb      	ldr	r3, [r7, #12]
 80289dc:	2200      	movs	r2, #0
 80289de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80289e0:	68fb      	ldr	r3, [r7, #12]
 80289e2:	2200      	movs	r2, #0
 80289e4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80289e6:	68fb      	ldr	r3, [r7, #12]
 80289e8:	689b      	ldr	r3, [r3, #8]
 80289ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80289ee:	d107      	bne.n	8028a00 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80289f0:	68fb      	ldr	r3, [r7, #12]
 80289f2:	681b      	ldr	r3, [r3, #0]
 80289f4:	681a      	ldr	r2, [r3, #0]
 80289f6:	68fb      	ldr	r3, [r7, #12]
 80289f8:	681b      	ldr	r3, [r3, #0]
 80289fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80289fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028a00:	68fb      	ldr	r3, [r7, #12]
 8028a02:	681b      	ldr	r3, [r3, #0]
 8028a04:	681b      	ldr	r3, [r3, #0]
 8028a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028a0a:	2b40      	cmp	r3, #64	; 0x40
 8028a0c:	d007      	beq.n	8028a1e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028a0e:	68fb      	ldr	r3, [r7, #12]
 8028a10:	681b      	ldr	r3, [r3, #0]
 8028a12:	681a      	ldr	r2, [r3, #0]
 8028a14:	68fb      	ldr	r3, [r7, #12]
 8028a16:	681b      	ldr	r3, [r3, #0]
 8028a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028a1c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8028a1e:	68fb      	ldr	r3, [r7, #12]
 8028a20:	68db      	ldr	r3, [r3, #12]
 8028a22:	2b00      	cmp	r3, #0
 8028a24:	d162      	bne.n	8028aec <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8028a26:	e02e      	b.n	8028a86 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028a28:	68fb      	ldr	r3, [r7, #12]
 8028a2a:	681b      	ldr	r3, [r3, #0]
 8028a2c:	689b      	ldr	r3, [r3, #8]
 8028a2e:	f003 0301 	and.w	r3, r3, #1
 8028a32:	2b01      	cmp	r3, #1
 8028a34:	d115      	bne.n	8028a62 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8028a36:	68fb      	ldr	r3, [r7, #12]
 8028a38:	681b      	ldr	r3, [r3, #0]
 8028a3a:	f103 020c 	add.w	r2, r3, #12
 8028a3e:	68fb      	ldr	r3, [r7, #12]
 8028a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a42:	7812      	ldrb	r2, [r2, #0]
 8028a44:	b2d2      	uxtb	r2, r2
 8028a46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8028a48:	68fb      	ldr	r3, [r7, #12]
 8028a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a4c:	1c5a      	adds	r2, r3, #1
 8028a4e:	68fb      	ldr	r3, [r7, #12]
 8028a50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028a52:	68fb      	ldr	r3, [r7, #12]
 8028a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028a56:	b29b      	uxth	r3, r3
 8028a58:	3b01      	subs	r3, #1
 8028a5a:	b29a      	uxth	r2, r3
 8028a5c:	68fb      	ldr	r3, [r7, #12]
 8028a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028a60:	e011      	b.n	8028a86 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028a62:	f7fd fe0b 	bl	802667c <HAL_GetTick>
 8028a66:	4602      	mov	r2, r0
 8028a68:	693b      	ldr	r3, [r7, #16]
 8028a6a:	1ad3      	subs	r3, r2, r3
 8028a6c:	683a      	ldr	r2, [r7, #0]
 8028a6e:	429a      	cmp	r2, r3
 8028a70:	d803      	bhi.n	8028a7a <HAL_SPI_Receive+0x156>
 8028a72:	683b      	ldr	r3, [r7, #0]
 8028a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028a78:	d102      	bne.n	8028a80 <HAL_SPI_Receive+0x15c>
 8028a7a:	683b      	ldr	r3, [r7, #0]
 8028a7c:	2b00      	cmp	r3, #0
 8028a7e:	d102      	bne.n	8028a86 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8028a80:	2303      	movs	r3, #3
 8028a82:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028a84:	e04a      	b.n	8028b1c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028a86:	68fb      	ldr	r3, [r7, #12]
 8028a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028a8a:	b29b      	uxth	r3, r3
 8028a8c:	2b00      	cmp	r3, #0
 8028a8e:	d1cb      	bne.n	8028a28 <HAL_SPI_Receive+0x104>
 8028a90:	e031      	b.n	8028af6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028a92:	68fb      	ldr	r3, [r7, #12]
 8028a94:	681b      	ldr	r3, [r3, #0]
 8028a96:	689b      	ldr	r3, [r3, #8]
 8028a98:	f003 0301 	and.w	r3, r3, #1
 8028a9c:	2b01      	cmp	r3, #1
 8028a9e:	d113      	bne.n	8028ac8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028aa0:	68fb      	ldr	r3, [r7, #12]
 8028aa2:	681b      	ldr	r3, [r3, #0]
 8028aa4:	68da      	ldr	r2, [r3, #12]
 8028aa6:	68fb      	ldr	r3, [r7, #12]
 8028aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028aaa:	b292      	uxth	r2, r2
 8028aac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028aae:	68fb      	ldr	r3, [r7, #12]
 8028ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028ab2:	1c9a      	adds	r2, r3, #2
 8028ab4:	68fb      	ldr	r3, [r7, #12]
 8028ab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028ab8:	68fb      	ldr	r3, [r7, #12]
 8028aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028abc:	b29b      	uxth	r3, r3
 8028abe:	3b01      	subs	r3, #1
 8028ac0:	b29a      	uxth	r2, r3
 8028ac2:	68fb      	ldr	r3, [r7, #12]
 8028ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028ac6:	e011      	b.n	8028aec <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028ac8:	f7fd fdd8 	bl	802667c <HAL_GetTick>
 8028acc:	4602      	mov	r2, r0
 8028ace:	693b      	ldr	r3, [r7, #16]
 8028ad0:	1ad3      	subs	r3, r2, r3
 8028ad2:	683a      	ldr	r2, [r7, #0]
 8028ad4:	429a      	cmp	r2, r3
 8028ad6:	d803      	bhi.n	8028ae0 <HAL_SPI_Receive+0x1bc>
 8028ad8:	683b      	ldr	r3, [r7, #0]
 8028ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028ade:	d102      	bne.n	8028ae6 <HAL_SPI_Receive+0x1c2>
 8028ae0:	683b      	ldr	r3, [r7, #0]
 8028ae2:	2b00      	cmp	r3, #0
 8028ae4:	d102      	bne.n	8028aec <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8028ae6:	2303      	movs	r3, #3
 8028ae8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028aea:	e017      	b.n	8028b1c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028aec:	68fb      	ldr	r3, [r7, #12]
 8028aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028af0:	b29b      	uxth	r3, r3
 8028af2:	2b00      	cmp	r3, #0
 8028af4:	d1cd      	bne.n	8028a92 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028af6:	693a      	ldr	r2, [r7, #16]
 8028af8:	6839      	ldr	r1, [r7, #0]
 8028afa:	68f8      	ldr	r0, [r7, #12]
 8028afc:	f000 fa27 	bl	8028f4e <SPI_EndRxTransaction>
 8028b00:	4603      	mov	r3, r0
 8028b02:	2b00      	cmp	r3, #0
 8028b04:	d002      	beq.n	8028b0c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028b06:	68fb      	ldr	r3, [r7, #12]
 8028b08:	2220      	movs	r2, #32
 8028b0a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028b0c:	68fb      	ldr	r3, [r7, #12]
 8028b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028b10:	2b00      	cmp	r3, #0
 8028b12:	d002      	beq.n	8028b1a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8028b14:	2301      	movs	r3, #1
 8028b16:	75fb      	strb	r3, [r7, #23]
 8028b18:	e000      	b.n	8028b1c <HAL_SPI_Receive+0x1f8>
  }

error :
 8028b1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028b1c:	68fb      	ldr	r3, [r7, #12]
 8028b1e:	2201      	movs	r2, #1
 8028b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028b24:	68fb      	ldr	r3, [r7, #12]
 8028b26:	2200      	movs	r2, #0
 8028b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8028b2e:	4618      	mov	r0, r3
 8028b30:	3718      	adds	r7, #24
 8028b32:	46bd      	mov	sp, r7
 8028b34:	bd80      	pop	{r7, pc}

08028b36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8028b36:	b580      	push	{r7, lr}
 8028b38:	b08c      	sub	sp, #48	; 0x30
 8028b3a:	af00      	add	r7, sp, #0
 8028b3c:	60f8      	str	r0, [r7, #12]
 8028b3e:	60b9      	str	r1, [r7, #8]
 8028b40:	607a      	str	r2, [r7, #4]
 8028b42:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8028b44:	2301      	movs	r3, #1
 8028b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8028b48:	2300      	movs	r3, #0
 8028b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028b4e:	68fb      	ldr	r3, [r7, #12]
 8028b50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028b54:	2b01      	cmp	r3, #1
 8028b56:	d101      	bne.n	8028b5c <HAL_SPI_TransmitReceive+0x26>
 8028b58:	2302      	movs	r3, #2
 8028b5a:	e18a      	b.n	8028e72 <HAL_SPI_TransmitReceive+0x33c>
 8028b5c:	68fb      	ldr	r3, [r7, #12]
 8028b5e:	2201      	movs	r2, #1
 8028b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028b64:	f7fd fd8a 	bl	802667c <HAL_GetTick>
 8028b68:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8028b6a:	68fb      	ldr	r3, [r7, #12]
 8028b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028b70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8028b74:	68fb      	ldr	r3, [r7, #12]
 8028b76:	685b      	ldr	r3, [r3, #4]
 8028b78:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8028b7a:	887b      	ldrh	r3, [r7, #2]
 8028b7c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8028b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028b82:	2b01      	cmp	r3, #1
 8028b84:	d00f      	beq.n	8028ba6 <HAL_SPI_TransmitReceive+0x70>
 8028b86:	69fb      	ldr	r3, [r7, #28]
 8028b88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028b8c:	d107      	bne.n	8028b9e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8028b8e:	68fb      	ldr	r3, [r7, #12]
 8028b90:	689b      	ldr	r3, [r3, #8]
 8028b92:	2b00      	cmp	r3, #0
 8028b94:	d103      	bne.n	8028b9e <HAL_SPI_TransmitReceive+0x68>
 8028b96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028b9a:	2b04      	cmp	r3, #4
 8028b9c:	d003      	beq.n	8028ba6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8028b9e:	2302      	movs	r3, #2
 8028ba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028ba4:	e15b      	b.n	8028e5e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8028ba6:	68bb      	ldr	r3, [r7, #8]
 8028ba8:	2b00      	cmp	r3, #0
 8028baa:	d005      	beq.n	8028bb8 <HAL_SPI_TransmitReceive+0x82>
 8028bac:	687b      	ldr	r3, [r7, #4]
 8028bae:	2b00      	cmp	r3, #0
 8028bb0:	d002      	beq.n	8028bb8 <HAL_SPI_TransmitReceive+0x82>
 8028bb2:	887b      	ldrh	r3, [r7, #2]
 8028bb4:	2b00      	cmp	r3, #0
 8028bb6:	d103      	bne.n	8028bc0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8028bb8:	2301      	movs	r3, #1
 8028bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028bbe:	e14e      	b.n	8028e5e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8028bc0:	68fb      	ldr	r3, [r7, #12]
 8028bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028bc6:	b2db      	uxtb	r3, r3
 8028bc8:	2b04      	cmp	r3, #4
 8028bca:	d003      	beq.n	8028bd4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8028bcc:	68fb      	ldr	r3, [r7, #12]
 8028bce:	2205      	movs	r2, #5
 8028bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028bd4:	68fb      	ldr	r3, [r7, #12]
 8028bd6:	2200      	movs	r2, #0
 8028bd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8028bda:	68fb      	ldr	r3, [r7, #12]
 8028bdc:	687a      	ldr	r2, [r7, #4]
 8028bde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8028be0:	68fb      	ldr	r3, [r7, #12]
 8028be2:	887a      	ldrh	r2, [r7, #2]
 8028be4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8028be6:	68fb      	ldr	r3, [r7, #12]
 8028be8:	887a      	ldrh	r2, [r7, #2]
 8028bea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8028bec:	68fb      	ldr	r3, [r7, #12]
 8028bee:	68ba      	ldr	r2, [r7, #8]
 8028bf0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8028bf2:	68fb      	ldr	r3, [r7, #12]
 8028bf4:	887a      	ldrh	r2, [r7, #2]
 8028bf6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8028bf8:	68fb      	ldr	r3, [r7, #12]
 8028bfa:	887a      	ldrh	r2, [r7, #2]
 8028bfc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8028bfe:	68fb      	ldr	r3, [r7, #12]
 8028c00:	2200      	movs	r2, #0
 8028c02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028c04:	68fb      	ldr	r3, [r7, #12]
 8028c06:	2200      	movs	r2, #0
 8028c08:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028c0a:	68fb      	ldr	r3, [r7, #12]
 8028c0c:	681b      	ldr	r3, [r3, #0]
 8028c0e:	681b      	ldr	r3, [r3, #0]
 8028c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028c14:	2b40      	cmp	r3, #64	; 0x40
 8028c16:	d007      	beq.n	8028c28 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028c18:	68fb      	ldr	r3, [r7, #12]
 8028c1a:	681b      	ldr	r3, [r3, #0]
 8028c1c:	681a      	ldr	r2, [r3, #0]
 8028c1e:	68fb      	ldr	r3, [r7, #12]
 8028c20:	681b      	ldr	r3, [r3, #0]
 8028c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028c26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028c28:	68fb      	ldr	r3, [r7, #12]
 8028c2a:	68db      	ldr	r3, [r3, #12]
 8028c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028c30:	d178      	bne.n	8028d24 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028c32:	68fb      	ldr	r3, [r7, #12]
 8028c34:	685b      	ldr	r3, [r3, #4]
 8028c36:	2b00      	cmp	r3, #0
 8028c38:	d002      	beq.n	8028c40 <HAL_SPI_TransmitReceive+0x10a>
 8028c3a:	8b7b      	ldrh	r3, [r7, #26]
 8028c3c:	2b01      	cmp	r3, #1
 8028c3e:	d166      	bne.n	8028d0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028c40:	68fb      	ldr	r3, [r7, #12]
 8028c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c44:	881a      	ldrh	r2, [r3, #0]
 8028c46:	68fb      	ldr	r3, [r7, #12]
 8028c48:	681b      	ldr	r3, [r3, #0]
 8028c4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8028c4c:	68fb      	ldr	r3, [r7, #12]
 8028c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c50:	1c9a      	adds	r2, r3, #2
 8028c52:	68fb      	ldr	r3, [r7, #12]
 8028c54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028c56:	68fb      	ldr	r3, [r7, #12]
 8028c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028c5a:	b29b      	uxth	r3, r3
 8028c5c:	3b01      	subs	r3, #1
 8028c5e:	b29a      	uxth	r2, r3
 8028c60:	68fb      	ldr	r3, [r7, #12]
 8028c62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028c64:	e053      	b.n	8028d0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028c66:	68fb      	ldr	r3, [r7, #12]
 8028c68:	681b      	ldr	r3, [r3, #0]
 8028c6a:	689b      	ldr	r3, [r3, #8]
 8028c6c:	f003 0302 	and.w	r3, r3, #2
 8028c70:	2b02      	cmp	r3, #2
 8028c72:	d11b      	bne.n	8028cac <HAL_SPI_TransmitReceive+0x176>
 8028c74:	68fb      	ldr	r3, [r7, #12]
 8028c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028c78:	b29b      	uxth	r3, r3
 8028c7a:	2b00      	cmp	r3, #0
 8028c7c:	d016      	beq.n	8028cac <HAL_SPI_TransmitReceive+0x176>
 8028c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028c80:	2b01      	cmp	r3, #1
 8028c82:	d113      	bne.n	8028cac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028c84:	68fb      	ldr	r3, [r7, #12]
 8028c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c88:	881a      	ldrh	r2, [r3, #0]
 8028c8a:	68fb      	ldr	r3, [r7, #12]
 8028c8c:	681b      	ldr	r3, [r3, #0]
 8028c8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028c90:	68fb      	ldr	r3, [r7, #12]
 8028c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c94:	1c9a      	adds	r2, r3, #2
 8028c96:	68fb      	ldr	r3, [r7, #12]
 8028c98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028c9a:	68fb      	ldr	r3, [r7, #12]
 8028c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028c9e:	b29b      	uxth	r3, r3
 8028ca0:	3b01      	subs	r3, #1
 8028ca2:	b29a      	uxth	r2, r3
 8028ca4:	68fb      	ldr	r3, [r7, #12]
 8028ca6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028ca8:	2300      	movs	r3, #0
 8028caa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028cac:	68fb      	ldr	r3, [r7, #12]
 8028cae:	681b      	ldr	r3, [r3, #0]
 8028cb0:	689b      	ldr	r3, [r3, #8]
 8028cb2:	f003 0301 	and.w	r3, r3, #1
 8028cb6:	2b01      	cmp	r3, #1
 8028cb8:	d119      	bne.n	8028cee <HAL_SPI_TransmitReceive+0x1b8>
 8028cba:	68fb      	ldr	r3, [r7, #12]
 8028cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028cbe:	b29b      	uxth	r3, r3
 8028cc0:	2b00      	cmp	r3, #0
 8028cc2:	d014      	beq.n	8028cee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028cc4:	68fb      	ldr	r3, [r7, #12]
 8028cc6:	681b      	ldr	r3, [r3, #0]
 8028cc8:	68da      	ldr	r2, [r3, #12]
 8028cca:	68fb      	ldr	r3, [r7, #12]
 8028ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028cce:	b292      	uxth	r2, r2
 8028cd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028cd2:	68fb      	ldr	r3, [r7, #12]
 8028cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028cd6:	1c9a      	adds	r2, r3, #2
 8028cd8:	68fb      	ldr	r3, [r7, #12]
 8028cda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028cdc:	68fb      	ldr	r3, [r7, #12]
 8028cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028ce0:	b29b      	uxth	r3, r3
 8028ce2:	3b01      	subs	r3, #1
 8028ce4:	b29a      	uxth	r2, r3
 8028ce6:	68fb      	ldr	r3, [r7, #12]
 8028ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028cea:	2301      	movs	r3, #1
 8028cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8028cee:	f7fd fcc5 	bl	802667c <HAL_GetTick>
 8028cf2:	4602      	mov	r2, r0
 8028cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028cf6:	1ad3      	subs	r3, r2, r3
 8028cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028cfa:	429a      	cmp	r2, r3
 8028cfc:	d807      	bhi.n	8028d0e <HAL_SPI_TransmitReceive+0x1d8>
 8028cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028d04:	d003      	beq.n	8028d0e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8028d06:	2303      	movs	r3, #3
 8028d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028d0c:	e0a7      	b.n	8028e5e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028d0e:	68fb      	ldr	r3, [r7, #12]
 8028d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028d12:	b29b      	uxth	r3, r3
 8028d14:	2b00      	cmp	r3, #0
 8028d16:	d1a6      	bne.n	8028c66 <HAL_SPI_TransmitReceive+0x130>
 8028d18:	68fb      	ldr	r3, [r7, #12]
 8028d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028d1c:	b29b      	uxth	r3, r3
 8028d1e:	2b00      	cmp	r3, #0
 8028d20:	d1a1      	bne.n	8028c66 <HAL_SPI_TransmitReceive+0x130>
 8028d22:	e07c      	b.n	8028e1e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028d24:	68fb      	ldr	r3, [r7, #12]
 8028d26:	685b      	ldr	r3, [r3, #4]
 8028d28:	2b00      	cmp	r3, #0
 8028d2a:	d002      	beq.n	8028d32 <HAL_SPI_TransmitReceive+0x1fc>
 8028d2c:	8b7b      	ldrh	r3, [r7, #26]
 8028d2e:	2b01      	cmp	r3, #1
 8028d30:	d16b      	bne.n	8028e0a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028d32:	68fb      	ldr	r3, [r7, #12]
 8028d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028d36:	68fb      	ldr	r3, [r7, #12]
 8028d38:	681b      	ldr	r3, [r3, #0]
 8028d3a:	330c      	adds	r3, #12
 8028d3c:	7812      	ldrb	r2, [r2, #0]
 8028d3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028d40:	68fb      	ldr	r3, [r7, #12]
 8028d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028d44:	1c5a      	adds	r2, r3, #1
 8028d46:	68fb      	ldr	r3, [r7, #12]
 8028d48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028d4a:	68fb      	ldr	r3, [r7, #12]
 8028d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028d4e:	b29b      	uxth	r3, r3
 8028d50:	3b01      	subs	r3, #1
 8028d52:	b29a      	uxth	r2, r3
 8028d54:	68fb      	ldr	r3, [r7, #12]
 8028d56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028d58:	e057      	b.n	8028e0a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028d5a:	68fb      	ldr	r3, [r7, #12]
 8028d5c:	681b      	ldr	r3, [r3, #0]
 8028d5e:	689b      	ldr	r3, [r3, #8]
 8028d60:	f003 0302 	and.w	r3, r3, #2
 8028d64:	2b02      	cmp	r3, #2
 8028d66:	d11c      	bne.n	8028da2 <HAL_SPI_TransmitReceive+0x26c>
 8028d68:	68fb      	ldr	r3, [r7, #12]
 8028d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028d6c:	b29b      	uxth	r3, r3
 8028d6e:	2b00      	cmp	r3, #0
 8028d70:	d017      	beq.n	8028da2 <HAL_SPI_TransmitReceive+0x26c>
 8028d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028d74:	2b01      	cmp	r3, #1
 8028d76:	d114      	bne.n	8028da2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8028d78:	68fb      	ldr	r3, [r7, #12]
 8028d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028d7c:	68fb      	ldr	r3, [r7, #12]
 8028d7e:	681b      	ldr	r3, [r3, #0]
 8028d80:	330c      	adds	r3, #12
 8028d82:	7812      	ldrb	r2, [r2, #0]
 8028d84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8028d86:	68fb      	ldr	r3, [r7, #12]
 8028d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028d8a:	1c5a      	adds	r2, r3, #1
 8028d8c:	68fb      	ldr	r3, [r7, #12]
 8028d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028d90:	68fb      	ldr	r3, [r7, #12]
 8028d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028d94:	b29b      	uxth	r3, r3
 8028d96:	3b01      	subs	r3, #1
 8028d98:	b29a      	uxth	r2, r3
 8028d9a:	68fb      	ldr	r3, [r7, #12]
 8028d9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028d9e:	2300      	movs	r3, #0
 8028da0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028da2:	68fb      	ldr	r3, [r7, #12]
 8028da4:	681b      	ldr	r3, [r3, #0]
 8028da6:	689b      	ldr	r3, [r3, #8]
 8028da8:	f003 0301 	and.w	r3, r3, #1
 8028dac:	2b01      	cmp	r3, #1
 8028dae:	d119      	bne.n	8028de4 <HAL_SPI_TransmitReceive+0x2ae>
 8028db0:	68fb      	ldr	r3, [r7, #12]
 8028db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028db4:	b29b      	uxth	r3, r3
 8028db6:	2b00      	cmp	r3, #0
 8028db8:	d014      	beq.n	8028de4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8028dba:	68fb      	ldr	r3, [r7, #12]
 8028dbc:	681b      	ldr	r3, [r3, #0]
 8028dbe:	68da      	ldr	r2, [r3, #12]
 8028dc0:	68fb      	ldr	r3, [r7, #12]
 8028dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028dc4:	b2d2      	uxtb	r2, r2
 8028dc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8028dc8:	68fb      	ldr	r3, [r7, #12]
 8028dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028dcc:	1c5a      	adds	r2, r3, #1
 8028dce:	68fb      	ldr	r3, [r7, #12]
 8028dd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028dd2:	68fb      	ldr	r3, [r7, #12]
 8028dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028dd6:	b29b      	uxth	r3, r3
 8028dd8:	3b01      	subs	r3, #1
 8028dda:	b29a      	uxth	r2, r3
 8028ddc:	68fb      	ldr	r3, [r7, #12]
 8028dde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028de0:	2301      	movs	r3, #1
 8028de2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8028de4:	f7fd fc4a 	bl	802667c <HAL_GetTick>
 8028de8:	4602      	mov	r2, r0
 8028dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028dec:	1ad3      	subs	r3, r2, r3
 8028dee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028df0:	429a      	cmp	r2, r3
 8028df2:	d803      	bhi.n	8028dfc <HAL_SPI_TransmitReceive+0x2c6>
 8028df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028dfa:	d102      	bne.n	8028e02 <HAL_SPI_TransmitReceive+0x2cc>
 8028dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028dfe:	2b00      	cmp	r3, #0
 8028e00:	d103      	bne.n	8028e0a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8028e02:	2303      	movs	r3, #3
 8028e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028e08:	e029      	b.n	8028e5e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028e0a:	68fb      	ldr	r3, [r7, #12]
 8028e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028e0e:	b29b      	uxth	r3, r3
 8028e10:	2b00      	cmp	r3, #0
 8028e12:	d1a2      	bne.n	8028d5a <HAL_SPI_TransmitReceive+0x224>
 8028e14:	68fb      	ldr	r3, [r7, #12]
 8028e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028e18:	b29b      	uxth	r3, r3
 8028e1a:	2b00      	cmp	r3, #0
 8028e1c:	d19d      	bne.n	8028d5a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028e20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8028e22:	68f8      	ldr	r0, [r7, #12]
 8028e24:	f000 f8f8 	bl	8029018 <SPI_EndRxTxTransaction>
 8028e28:	4603      	mov	r3, r0
 8028e2a:	2b00      	cmp	r3, #0
 8028e2c:	d006      	beq.n	8028e3c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8028e2e:	2301      	movs	r3, #1
 8028e30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028e34:	68fb      	ldr	r3, [r7, #12]
 8028e36:	2220      	movs	r2, #32
 8028e38:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8028e3a:	e010      	b.n	8028e5e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028e3c:	68fb      	ldr	r3, [r7, #12]
 8028e3e:	689b      	ldr	r3, [r3, #8]
 8028e40:	2b00      	cmp	r3, #0
 8028e42:	d10b      	bne.n	8028e5c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028e44:	2300      	movs	r3, #0
 8028e46:	617b      	str	r3, [r7, #20]
 8028e48:	68fb      	ldr	r3, [r7, #12]
 8028e4a:	681b      	ldr	r3, [r3, #0]
 8028e4c:	68db      	ldr	r3, [r3, #12]
 8028e4e:	617b      	str	r3, [r7, #20]
 8028e50:	68fb      	ldr	r3, [r7, #12]
 8028e52:	681b      	ldr	r3, [r3, #0]
 8028e54:	689b      	ldr	r3, [r3, #8]
 8028e56:	617b      	str	r3, [r7, #20]
 8028e58:	697b      	ldr	r3, [r7, #20]
 8028e5a:	e000      	b.n	8028e5e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8028e5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028e5e:	68fb      	ldr	r3, [r7, #12]
 8028e60:	2201      	movs	r2, #1
 8028e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028e66:	68fb      	ldr	r3, [r7, #12]
 8028e68:	2200      	movs	r2, #0
 8028e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028e6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8028e72:	4618      	mov	r0, r3
 8028e74:	3730      	adds	r7, #48	; 0x30
 8028e76:	46bd      	mov	sp, r7
 8028e78:	bd80      	pop	{r7, pc}

08028e7a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8028e7a:	b580      	push	{r7, lr}
 8028e7c:	b084      	sub	sp, #16
 8028e7e:	af00      	add	r7, sp, #0
 8028e80:	60f8      	str	r0, [r7, #12]
 8028e82:	60b9      	str	r1, [r7, #8]
 8028e84:	603b      	str	r3, [r7, #0]
 8028e86:	4613      	mov	r3, r2
 8028e88:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028e8a:	e04c      	b.n	8028f26 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8028e8c:	683b      	ldr	r3, [r7, #0]
 8028e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028e92:	d048      	beq.n	8028f26 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8028e94:	f7fd fbf2 	bl	802667c <HAL_GetTick>
 8028e98:	4602      	mov	r2, r0
 8028e9a:	69bb      	ldr	r3, [r7, #24]
 8028e9c:	1ad3      	subs	r3, r2, r3
 8028e9e:	683a      	ldr	r2, [r7, #0]
 8028ea0:	429a      	cmp	r2, r3
 8028ea2:	d902      	bls.n	8028eaa <SPI_WaitFlagStateUntilTimeout+0x30>
 8028ea4:	683b      	ldr	r3, [r7, #0]
 8028ea6:	2b00      	cmp	r3, #0
 8028ea8:	d13d      	bne.n	8028f26 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8028eaa:	68fb      	ldr	r3, [r7, #12]
 8028eac:	681b      	ldr	r3, [r3, #0]
 8028eae:	685a      	ldr	r2, [r3, #4]
 8028eb0:	68fb      	ldr	r3, [r7, #12]
 8028eb2:	681b      	ldr	r3, [r3, #0]
 8028eb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8028eb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028eba:	68fb      	ldr	r3, [r7, #12]
 8028ebc:	685b      	ldr	r3, [r3, #4]
 8028ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028ec2:	d111      	bne.n	8028ee8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8028ec4:	68fb      	ldr	r3, [r7, #12]
 8028ec6:	689b      	ldr	r3, [r3, #8]
 8028ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028ecc:	d004      	beq.n	8028ed8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028ece:	68fb      	ldr	r3, [r7, #12]
 8028ed0:	689b      	ldr	r3, [r3, #8]
 8028ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028ed6:	d107      	bne.n	8028ee8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8028ed8:	68fb      	ldr	r3, [r7, #12]
 8028eda:	681b      	ldr	r3, [r3, #0]
 8028edc:	681a      	ldr	r2, [r3, #0]
 8028ede:	68fb      	ldr	r3, [r7, #12]
 8028ee0:	681b      	ldr	r3, [r3, #0]
 8028ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8028ee8:	68fb      	ldr	r3, [r7, #12]
 8028eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028ef0:	d10f      	bne.n	8028f12 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8028ef2:	68fb      	ldr	r3, [r7, #12]
 8028ef4:	681b      	ldr	r3, [r3, #0]
 8028ef6:	681a      	ldr	r2, [r3, #0]
 8028ef8:	68fb      	ldr	r3, [r7, #12]
 8028efa:	681b      	ldr	r3, [r3, #0]
 8028efc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8028f00:	601a      	str	r2, [r3, #0]
 8028f02:	68fb      	ldr	r3, [r7, #12]
 8028f04:	681b      	ldr	r3, [r3, #0]
 8028f06:	681a      	ldr	r2, [r3, #0]
 8028f08:	68fb      	ldr	r3, [r7, #12]
 8028f0a:	681b      	ldr	r3, [r3, #0]
 8028f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8028f12:	68fb      	ldr	r3, [r7, #12]
 8028f14:	2201      	movs	r2, #1
 8028f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8028f1a:	68fb      	ldr	r3, [r7, #12]
 8028f1c:	2200      	movs	r2, #0
 8028f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8028f22:	2303      	movs	r3, #3
 8028f24:	e00f      	b.n	8028f46 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028f26:	68fb      	ldr	r3, [r7, #12]
 8028f28:	681b      	ldr	r3, [r3, #0]
 8028f2a:	689a      	ldr	r2, [r3, #8]
 8028f2c:	68bb      	ldr	r3, [r7, #8]
 8028f2e:	4013      	ands	r3, r2
 8028f30:	68ba      	ldr	r2, [r7, #8]
 8028f32:	429a      	cmp	r2, r3
 8028f34:	bf0c      	ite	eq
 8028f36:	2301      	moveq	r3, #1
 8028f38:	2300      	movne	r3, #0
 8028f3a:	b2db      	uxtb	r3, r3
 8028f3c:	461a      	mov	r2, r3
 8028f3e:	79fb      	ldrb	r3, [r7, #7]
 8028f40:	429a      	cmp	r2, r3
 8028f42:	d1a3      	bne.n	8028e8c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8028f44:	2300      	movs	r3, #0
}
 8028f46:	4618      	mov	r0, r3
 8028f48:	3710      	adds	r7, #16
 8028f4a:	46bd      	mov	sp, r7
 8028f4c:	bd80      	pop	{r7, pc}

08028f4e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8028f4e:	b580      	push	{r7, lr}
 8028f50:	b086      	sub	sp, #24
 8028f52:	af02      	add	r7, sp, #8
 8028f54:	60f8      	str	r0, [r7, #12]
 8028f56:	60b9      	str	r1, [r7, #8]
 8028f58:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028f5a:	68fb      	ldr	r3, [r7, #12]
 8028f5c:	685b      	ldr	r3, [r3, #4]
 8028f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028f62:	d111      	bne.n	8028f88 <SPI_EndRxTransaction+0x3a>
 8028f64:	68fb      	ldr	r3, [r7, #12]
 8028f66:	689b      	ldr	r3, [r3, #8]
 8028f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028f6c:	d004      	beq.n	8028f78 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028f6e:	68fb      	ldr	r3, [r7, #12]
 8028f70:	689b      	ldr	r3, [r3, #8]
 8028f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028f76:	d107      	bne.n	8028f88 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8028f78:	68fb      	ldr	r3, [r7, #12]
 8028f7a:	681b      	ldr	r3, [r3, #0]
 8028f7c:	681a      	ldr	r2, [r3, #0]
 8028f7e:	68fb      	ldr	r3, [r7, #12]
 8028f80:	681b      	ldr	r3, [r3, #0]
 8028f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028f86:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028f88:	68fb      	ldr	r3, [r7, #12]
 8028f8a:	685b      	ldr	r3, [r3, #4]
 8028f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028f90:	d12a      	bne.n	8028fe8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8028f92:	68fb      	ldr	r3, [r7, #12]
 8028f94:	689b      	ldr	r3, [r3, #8]
 8028f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028f9a:	d012      	beq.n	8028fc2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028f9c:	687b      	ldr	r3, [r7, #4]
 8028f9e:	9300      	str	r3, [sp, #0]
 8028fa0:	68bb      	ldr	r3, [r7, #8]
 8028fa2:	2200      	movs	r2, #0
 8028fa4:	2180      	movs	r1, #128	; 0x80
 8028fa6:	68f8      	ldr	r0, [r7, #12]
 8028fa8:	f7ff ff67 	bl	8028e7a <SPI_WaitFlagStateUntilTimeout>
 8028fac:	4603      	mov	r3, r0
 8028fae:	2b00      	cmp	r3, #0
 8028fb0:	d02d      	beq.n	802900e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028fb2:	68fb      	ldr	r3, [r7, #12]
 8028fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028fb6:	f043 0220 	orr.w	r2, r3, #32
 8028fba:	68fb      	ldr	r3, [r7, #12]
 8028fbc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8028fbe:	2303      	movs	r3, #3
 8028fc0:	e026      	b.n	8029010 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028fc2:	687b      	ldr	r3, [r7, #4]
 8028fc4:	9300      	str	r3, [sp, #0]
 8028fc6:	68bb      	ldr	r3, [r7, #8]
 8028fc8:	2200      	movs	r2, #0
 8028fca:	2101      	movs	r1, #1
 8028fcc:	68f8      	ldr	r0, [r7, #12]
 8028fce:	f7ff ff54 	bl	8028e7a <SPI_WaitFlagStateUntilTimeout>
 8028fd2:	4603      	mov	r3, r0
 8028fd4:	2b00      	cmp	r3, #0
 8028fd6:	d01a      	beq.n	802900e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028fd8:	68fb      	ldr	r3, [r7, #12]
 8028fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028fdc:	f043 0220 	orr.w	r2, r3, #32
 8028fe0:	68fb      	ldr	r3, [r7, #12]
 8028fe2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8028fe4:	2303      	movs	r3, #3
 8028fe6:	e013      	b.n	8029010 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028fe8:	687b      	ldr	r3, [r7, #4]
 8028fea:	9300      	str	r3, [sp, #0]
 8028fec:	68bb      	ldr	r3, [r7, #8]
 8028fee:	2200      	movs	r2, #0
 8028ff0:	2101      	movs	r1, #1
 8028ff2:	68f8      	ldr	r0, [r7, #12]
 8028ff4:	f7ff ff41 	bl	8028e7a <SPI_WaitFlagStateUntilTimeout>
 8028ff8:	4603      	mov	r3, r0
 8028ffa:	2b00      	cmp	r3, #0
 8028ffc:	d007      	beq.n	802900e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028ffe:	68fb      	ldr	r3, [r7, #12]
 8029000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029002:	f043 0220 	orr.w	r2, r3, #32
 8029006:	68fb      	ldr	r3, [r7, #12]
 8029008:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802900a:	2303      	movs	r3, #3
 802900c:	e000      	b.n	8029010 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 802900e:	2300      	movs	r3, #0
}
 8029010:	4618      	mov	r0, r3
 8029012:	3710      	adds	r7, #16
 8029014:	46bd      	mov	sp, r7
 8029016:	bd80      	pop	{r7, pc}

08029018 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8029018:	b580      	push	{r7, lr}
 802901a:	b088      	sub	sp, #32
 802901c:	af02      	add	r7, sp, #8
 802901e:	60f8      	str	r0, [r7, #12]
 8029020:	60b9      	str	r1, [r7, #8]
 8029022:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8029024:	4b1b      	ldr	r3, [pc, #108]	; (8029094 <SPI_EndRxTxTransaction+0x7c>)
 8029026:	681b      	ldr	r3, [r3, #0]
 8029028:	4a1b      	ldr	r2, [pc, #108]	; (8029098 <SPI_EndRxTxTransaction+0x80>)
 802902a:	fba2 2303 	umull	r2, r3, r2, r3
 802902e:	0d5b      	lsrs	r3, r3, #21
 8029030:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8029034:	fb02 f303 	mul.w	r3, r2, r3
 8029038:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802903a:	68fb      	ldr	r3, [r7, #12]
 802903c:	685b      	ldr	r3, [r3, #4]
 802903e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029042:	d112      	bne.n	802906a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8029044:	687b      	ldr	r3, [r7, #4]
 8029046:	9300      	str	r3, [sp, #0]
 8029048:	68bb      	ldr	r3, [r7, #8]
 802904a:	2200      	movs	r2, #0
 802904c:	2180      	movs	r1, #128	; 0x80
 802904e:	68f8      	ldr	r0, [r7, #12]
 8029050:	f7ff ff13 	bl	8028e7a <SPI_WaitFlagStateUntilTimeout>
 8029054:	4603      	mov	r3, r0
 8029056:	2b00      	cmp	r3, #0
 8029058:	d016      	beq.n	8029088 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802905a:	68fb      	ldr	r3, [r7, #12]
 802905c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802905e:	f043 0220 	orr.w	r2, r3, #32
 8029062:	68fb      	ldr	r3, [r7, #12]
 8029064:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8029066:	2303      	movs	r3, #3
 8029068:	e00f      	b.n	802908a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 802906a:	697b      	ldr	r3, [r7, #20]
 802906c:	2b00      	cmp	r3, #0
 802906e:	d00a      	beq.n	8029086 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8029070:	697b      	ldr	r3, [r7, #20]
 8029072:	3b01      	subs	r3, #1
 8029074:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8029076:	68fb      	ldr	r3, [r7, #12]
 8029078:	681b      	ldr	r3, [r3, #0]
 802907a:	689b      	ldr	r3, [r3, #8]
 802907c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029080:	2b80      	cmp	r3, #128	; 0x80
 8029082:	d0f2      	beq.n	802906a <SPI_EndRxTxTransaction+0x52>
 8029084:	e000      	b.n	8029088 <SPI_EndRxTxTransaction+0x70>
        break;
 8029086:	bf00      	nop
  }

  return HAL_OK;
 8029088:	2300      	movs	r3, #0
}
 802908a:	4618      	mov	r0, r3
 802908c:	3718      	adds	r7, #24
 802908e:	46bd      	mov	sp, r7
 8029090:	bd80      	pop	{r7, pc}
 8029092:	bf00      	nop
 8029094:	20000010 	.word	0x20000010
 8029098:	165e9f81 	.word	0x165e9f81

0802909c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 802909c:	b580      	push	{r7, lr}
 802909e:	b082      	sub	sp, #8
 80290a0:	af00      	add	r7, sp, #0
 80290a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80290a4:	687b      	ldr	r3, [r7, #4]
 80290a6:	2b00      	cmp	r3, #0
 80290a8:	d101      	bne.n	80290ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80290aa:	2301      	movs	r3, #1
 80290ac:	e01d      	b.n	80290ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80290ae:	687b      	ldr	r3, [r7, #4]
 80290b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80290b4:	b2db      	uxtb	r3, r3
 80290b6:	2b00      	cmp	r3, #0
 80290b8:	d106      	bne.n	80290c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80290ba:	687b      	ldr	r3, [r7, #4]
 80290bc:	2200      	movs	r2, #0
 80290be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80290c2:	6878      	ldr	r0, [r7, #4]
 80290c4:	f7fb fc86 	bl	80249d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80290c8:	687b      	ldr	r3, [r7, #4]
 80290ca:	2202      	movs	r2, #2
 80290cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80290d0:	687b      	ldr	r3, [r7, #4]
 80290d2:	681a      	ldr	r2, [r3, #0]
 80290d4:	687b      	ldr	r3, [r7, #4]
 80290d6:	3304      	adds	r3, #4
 80290d8:	4619      	mov	r1, r3
 80290da:	4610      	mov	r0, r2
 80290dc:	f000 fc0e 	bl	80298fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80290e0:	687b      	ldr	r3, [r7, #4]
 80290e2:	2201      	movs	r2, #1
 80290e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80290e8:	2300      	movs	r3, #0
}
 80290ea:	4618      	mov	r0, r3
 80290ec:	3708      	adds	r7, #8
 80290ee:	46bd      	mov	sp, r7
 80290f0:	bd80      	pop	{r7, pc}

080290f2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80290f2:	b480      	push	{r7}
 80290f4:	b085      	sub	sp, #20
 80290f6:	af00      	add	r7, sp, #0
 80290f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80290fa:	687b      	ldr	r3, [r7, #4]
 80290fc:	681b      	ldr	r3, [r3, #0]
 80290fe:	68da      	ldr	r2, [r3, #12]
 8029100:	687b      	ldr	r3, [r7, #4]
 8029102:	681b      	ldr	r3, [r3, #0]
 8029104:	f042 0201 	orr.w	r2, r2, #1
 8029108:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802910a:	687b      	ldr	r3, [r7, #4]
 802910c:	681b      	ldr	r3, [r3, #0]
 802910e:	689b      	ldr	r3, [r3, #8]
 8029110:	f003 0307 	and.w	r3, r3, #7
 8029114:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029116:	68fb      	ldr	r3, [r7, #12]
 8029118:	2b06      	cmp	r3, #6
 802911a:	d007      	beq.n	802912c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 802911c:	687b      	ldr	r3, [r7, #4]
 802911e:	681b      	ldr	r3, [r3, #0]
 8029120:	681a      	ldr	r2, [r3, #0]
 8029122:	687b      	ldr	r3, [r7, #4]
 8029124:	681b      	ldr	r3, [r3, #0]
 8029126:	f042 0201 	orr.w	r2, r2, #1
 802912a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802912c:	2300      	movs	r3, #0
}
 802912e:	4618      	mov	r0, r3
 8029130:	3714      	adds	r7, #20
 8029132:	46bd      	mov	sp, r7
 8029134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029138:	4770      	bx	lr

0802913a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 802913a:	b580      	push	{r7, lr}
 802913c:	b082      	sub	sp, #8
 802913e:	af00      	add	r7, sp, #0
 8029140:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029142:	687b      	ldr	r3, [r7, #4]
 8029144:	2b00      	cmp	r3, #0
 8029146:	d101      	bne.n	802914c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8029148:	2301      	movs	r3, #1
 802914a:	e01d      	b.n	8029188 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802914c:	687b      	ldr	r3, [r7, #4]
 802914e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029152:	b2db      	uxtb	r3, r3
 8029154:	2b00      	cmp	r3, #0
 8029156:	d106      	bne.n	8029166 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029158:	687b      	ldr	r3, [r7, #4]
 802915a:	2200      	movs	r2, #0
 802915c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8029160:	6878      	ldr	r0, [r7, #4]
 8029162:	f7fb fbe9 	bl	8024938 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029166:	687b      	ldr	r3, [r7, #4]
 8029168:	2202      	movs	r2, #2
 802916a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802916e:	687b      	ldr	r3, [r7, #4]
 8029170:	681a      	ldr	r2, [r3, #0]
 8029172:	687b      	ldr	r3, [r7, #4]
 8029174:	3304      	adds	r3, #4
 8029176:	4619      	mov	r1, r3
 8029178:	4610      	mov	r0, r2
 802917a:	f000 fbbf 	bl	80298fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802917e:	687b      	ldr	r3, [r7, #4]
 8029180:	2201      	movs	r2, #1
 8029182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029186:	2300      	movs	r3, #0
}
 8029188:	4618      	mov	r0, r3
 802918a:	3708      	adds	r7, #8
 802918c:	46bd      	mov	sp, r7
 802918e:	bd80      	pop	{r7, pc}

08029190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8029190:	b580      	push	{r7, lr}
 8029192:	b084      	sub	sp, #16
 8029194:	af00      	add	r7, sp, #0
 8029196:	6078      	str	r0, [r7, #4]
 8029198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 802919a:	687b      	ldr	r3, [r7, #4]
 802919c:	681b      	ldr	r3, [r3, #0]
 802919e:	2201      	movs	r2, #1
 80291a0:	6839      	ldr	r1, [r7, #0]
 80291a2:	4618      	mov	r0, r3
 80291a4:	f000 fe94 	bl	8029ed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80291a8:	687b      	ldr	r3, [r7, #4]
 80291aa:	681b      	ldr	r3, [r3, #0]
 80291ac:	4a15      	ldr	r2, [pc, #84]	; (8029204 <HAL_TIM_PWM_Start+0x74>)
 80291ae:	4293      	cmp	r3, r2
 80291b0:	d004      	beq.n	80291bc <HAL_TIM_PWM_Start+0x2c>
 80291b2:	687b      	ldr	r3, [r7, #4]
 80291b4:	681b      	ldr	r3, [r3, #0]
 80291b6:	4a14      	ldr	r2, [pc, #80]	; (8029208 <HAL_TIM_PWM_Start+0x78>)
 80291b8:	4293      	cmp	r3, r2
 80291ba:	d101      	bne.n	80291c0 <HAL_TIM_PWM_Start+0x30>
 80291bc:	2301      	movs	r3, #1
 80291be:	e000      	b.n	80291c2 <HAL_TIM_PWM_Start+0x32>
 80291c0:	2300      	movs	r3, #0
 80291c2:	2b00      	cmp	r3, #0
 80291c4:	d007      	beq.n	80291d6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80291c6:	687b      	ldr	r3, [r7, #4]
 80291c8:	681b      	ldr	r3, [r3, #0]
 80291ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80291cc:	687b      	ldr	r3, [r7, #4]
 80291ce:	681b      	ldr	r3, [r3, #0]
 80291d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80291d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80291d6:	687b      	ldr	r3, [r7, #4]
 80291d8:	681b      	ldr	r3, [r3, #0]
 80291da:	689b      	ldr	r3, [r3, #8]
 80291dc:	f003 0307 	and.w	r3, r3, #7
 80291e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80291e2:	68fb      	ldr	r3, [r7, #12]
 80291e4:	2b06      	cmp	r3, #6
 80291e6:	d007      	beq.n	80291f8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80291e8:	687b      	ldr	r3, [r7, #4]
 80291ea:	681b      	ldr	r3, [r3, #0]
 80291ec:	681a      	ldr	r2, [r3, #0]
 80291ee:	687b      	ldr	r3, [r7, #4]
 80291f0:	681b      	ldr	r3, [r3, #0]
 80291f2:	f042 0201 	orr.w	r2, r2, #1
 80291f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80291f8:	2300      	movs	r3, #0
}
 80291fa:	4618      	mov	r0, r3
 80291fc:	3710      	adds	r7, #16
 80291fe:	46bd      	mov	sp, r7
 8029200:	bd80      	pop	{r7, pc}
 8029202:	bf00      	nop
 8029204:	40010000 	.word	0x40010000
 8029208:	40010400 	.word	0x40010400

0802920c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 802920c:	b580      	push	{r7, lr}
 802920e:	b086      	sub	sp, #24
 8029210:	af00      	add	r7, sp, #0
 8029212:	6078      	str	r0, [r7, #4]
 8029214:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029216:	687b      	ldr	r3, [r7, #4]
 8029218:	2b00      	cmp	r3, #0
 802921a:	d101      	bne.n	8029220 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 802921c:	2301      	movs	r3, #1
 802921e:	e083      	b.n	8029328 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029220:	687b      	ldr	r3, [r7, #4]
 8029222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029226:	b2db      	uxtb	r3, r3
 8029228:	2b00      	cmp	r3, #0
 802922a:	d106      	bne.n	802923a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802922c:	687b      	ldr	r3, [r7, #4]
 802922e:	2200      	movs	r2, #0
 8029230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8029234:	6878      	ldr	r0, [r7, #4]
 8029236:	f7fb fc63 	bl	8024b00 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802923a:	687b      	ldr	r3, [r7, #4]
 802923c:	2202      	movs	r2, #2
 802923e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8029242:	687b      	ldr	r3, [r7, #4]
 8029244:	681b      	ldr	r3, [r3, #0]
 8029246:	689b      	ldr	r3, [r3, #8]
 8029248:	687a      	ldr	r2, [r7, #4]
 802924a:	6812      	ldr	r2, [r2, #0]
 802924c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029250:	f023 0307 	bic.w	r3, r3, #7
 8029254:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029256:	687b      	ldr	r3, [r7, #4]
 8029258:	681a      	ldr	r2, [r3, #0]
 802925a:	687b      	ldr	r3, [r7, #4]
 802925c:	3304      	adds	r3, #4
 802925e:	4619      	mov	r1, r3
 8029260:	4610      	mov	r0, r2
 8029262:	f000 fb4b 	bl	80298fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8029266:	687b      	ldr	r3, [r7, #4]
 8029268:	681b      	ldr	r3, [r3, #0]
 802926a:	689b      	ldr	r3, [r3, #8]
 802926c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 802926e:	687b      	ldr	r3, [r7, #4]
 8029270:	681b      	ldr	r3, [r3, #0]
 8029272:	699b      	ldr	r3, [r3, #24]
 8029274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8029276:	687b      	ldr	r3, [r7, #4]
 8029278:	681b      	ldr	r3, [r3, #0]
 802927a:	6a1b      	ldr	r3, [r3, #32]
 802927c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 802927e:	683b      	ldr	r3, [r7, #0]
 8029280:	681b      	ldr	r3, [r3, #0]
 8029282:	697a      	ldr	r2, [r7, #20]
 8029284:	4313      	orrs	r3, r2
 8029286:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8029288:	693b      	ldr	r3, [r7, #16]
 802928a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802928e:	f023 0303 	bic.w	r3, r3, #3
 8029292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8029294:	683b      	ldr	r3, [r7, #0]
 8029296:	689a      	ldr	r2, [r3, #8]
 8029298:	683b      	ldr	r3, [r7, #0]
 802929a:	699b      	ldr	r3, [r3, #24]
 802929c:	021b      	lsls	r3, r3, #8
 802929e:	4313      	orrs	r3, r2
 80292a0:	693a      	ldr	r2, [r7, #16]
 80292a2:	4313      	orrs	r3, r2
 80292a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80292a6:	693b      	ldr	r3, [r7, #16]
 80292a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80292ac:	f023 030c 	bic.w	r3, r3, #12
 80292b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80292b2:	693b      	ldr	r3, [r7, #16]
 80292b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80292b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80292bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80292be:	683b      	ldr	r3, [r7, #0]
 80292c0:	68da      	ldr	r2, [r3, #12]
 80292c2:	683b      	ldr	r3, [r7, #0]
 80292c4:	69db      	ldr	r3, [r3, #28]
 80292c6:	021b      	lsls	r3, r3, #8
 80292c8:	4313      	orrs	r3, r2
 80292ca:	693a      	ldr	r2, [r7, #16]
 80292cc:	4313      	orrs	r3, r2
 80292ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80292d0:	683b      	ldr	r3, [r7, #0]
 80292d2:	691b      	ldr	r3, [r3, #16]
 80292d4:	011a      	lsls	r2, r3, #4
 80292d6:	683b      	ldr	r3, [r7, #0]
 80292d8:	6a1b      	ldr	r3, [r3, #32]
 80292da:	031b      	lsls	r3, r3, #12
 80292dc:	4313      	orrs	r3, r2
 80292de:	693a      	ldr	r2, [r7, #16]
 80292e0:	4313      	orrs	r3, r2
 80292e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80292e4:	68fb      	ldr	r3, [r7, #12]
 80292e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80292ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80292ec:	68fb      	ldr	r3, [r7, #12]
 80292ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80292f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80292f4:	683b      	ldr	r3, [r7, #0]
 80292f6:	685a      	ldr	r2, [r3, #4]
 80292f8:	683b      	ldr	r3, [r7, #0]
 80292fa:	695b      	ldr	r3, [r3, #20]
 80292fc:	011b      	lsls	r3, r3, #4
 80292fe:	4313      	orrs	r3, r2
 8029300:	68fa      	ldr	r2, [r7, #12]
 8029302:	4313      	orrs	r3, r2
 8029304:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8029306:	687b      	ldr	r3, [r7, #4]
 8029308:	681b      	ldr	r3, [r3, #0]
 802930a:	697a      	ldr	r2, [r7, #20]
 802930c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 802930e:	687b      	ldr	r3, [r7, #4]
 8029310:	681b      	ldr	r3, [r3, #0]
 8029312:	693a      	ldr	r2, [r7, #16]
 8029314:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8029316:	687b      	ldr	r3, [r7, #4]
 8029318:	681b      	ldr	r3, [r3, #0]
 802931a:	68fa      	ldr	r2, [r7, #12]
 802931c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802931e:	687b      	ldr	r3, [r7, #4]
 8029320:	2201      	movs	r2, #1
 8029322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029326:	2300      	movs	r3, #0
}
 8029328:	4618      	mov	r0, r3
 802932a:	3718      	adds	r7, #24
 802932c:	46bd      	mov	sp, r7
 802932e:	bd80      	pop	{r7, pc}

08029330 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8029330:	b580      	push	{r7, lr}
 8029332:	b082      	sub	sp, #8
 8029334:	af00      	add	r7, sp, #0
 8029336:	6078      	str	r0, [r7, #4]
 8029338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 802933a:	683b      	ldr	r3, [r7, #0]
 802933c:	2b00      	cmp	r3, #0
 802933e:	d002      	beq.n	8029346 <HAL_TIM_Encoder_Start+0x16>
 8029340:	2b04      	cmp	r3, #4
 8029342:	d008      	beq.n	8029356 <HAL_TIM_Encoder_Start+0x26>
 8029344:	e00f      	b.n	8029366 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8029346:	687b      	ldr	r3, [r7, #4]
 8029348:	681b      	ldr	r3, [r3, #0]
 802934a:	2201      	movs	r2, #1
 802934c:	2100      	movs	r1, #0
 802934e:	4618      	mov	r0, r3
 8029350:	f000 fdbe 	bl	8029ed0 <TIM_CCxChannelCmd>
      break;
 8029354:	e016      	b.n	8029384 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8029356:	687b      	ldr	r3, [r7, #4]
 8029358:	681b      	ldr	r3, [r3, #0]
 802935a:	2201      	movs	r2, #1
 802935c:	2104      	movs	r1, #4
 802935e:	4618      	mov	r0, r3
 8029360:	f000 fdb6 	bl	8029ed0 <TIM_CCxChannelCmd>
      break;
 8029364:	e00e      	b.n	8029384 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8029366:	687b      	ldr	r3, [r7, #4]
 8029368:	681b      	ldr	r3, [r3, #0]
 802936a:	2201      	movs	r2, #1
 802936c:	2100      	movs	r1, #0
 802936e:	4618      	mov	r0, r3
 8029370:	f000 fdae 	bl	8029ed0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8029374:	687b      	ldr	r3, [r7, #4]
 8029376:	681b      	ldr	r3, [r3, #0]
 8029378:	2201      	movs	r2, #1
 802937a:	2104      	movs	r1, #4
 802937c:	4618      	mov	r0, r3
 802937e:	f000 fda7 	bl	8029ed0 <TIM_CCxChannelCmd>
      break;
 8029382:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8029384:	687b      	ldr	r3, [r7, #4]
 8029386:	681b      	ldr	r3, [r3, #0]
 8029388:	681a      	ldr	r2, [r3, #0]
 802938a:	687b      	ldr	r3, [r7, #4]
 802938c:	681b      	ldr	r3, [r3, #0]
 802938e:	f042 0201 	orr.w	r2, r2, #1
 8029392:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8029394:	2300      	movs	r3, #0
}
 8029396:	4618      	mov	r0, r3
 8029398:	3708      	adds	r7, #8
 802939a:	46bd      	mov	sp, r7
 802939c:	bd80      	pop	{r7, pc}

0802939e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802939e:	b580      	push	{r7, lr}
 80293a0:	b082      	sub	sp, #8
 80293a2:	af00      	add	r7, sp, #0
 80293a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80293a6:	687b      	ldr	r3, [r7, #4]
 80293a8:	681b      	ldr	r3, [r3, #0]
 80293aa:	691b      	ldr	r3, [r3, #16]
 80293ac:	f003 0302 	and.w	r3, r3, #2
 80293b0:	2b02      	cmp	r3, #2
 80293b2:	d122      	bne.n	80293fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80293b4:	687b      	ldr	r3, [r7, #4]
 80293b6:	681b      	ldr	r3, [r3, #0]
 80293b8:	68db      	ldr	r3, [r3, #12]
 80293ba:	f003 0302 	and.w	r3, r3, #2
 80293be:	2b02      	cmp	r3, #2
 80293c0:	d11b      	bne.n	80293fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80293c2:	687b      	ldr	r3, [r7, #4]
 80293c4:	681b      	ldr	r3, [r3, #0]
 80293c6:	f06f 0202 	mvn.w	r2, #2
 80293ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80293cc:	687b      	ldr	r3, [r7, #4]
 80293ce:	2201      	movs	r2, #1
 80293d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80293d2:	687b      	ldr	r3, [r7, #4]
 80293d4:	681b      	ldr	r3, [r3, #0]
 80293d6:	699b      	ldr	r3, [r3, #24]
 80293d8:	f003 0303 	and.w	r3, r3, #3
 80293dc:	2b00      	cmp	r3, #0
 80293de:	d003      	beq.n	80293e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80293e0:	6878      	ldr	r0, [r7, #4]
 80293e2:	f000 fa6c 	bl	80298be <HAL_TIM_IC_CaptureCallback>
 80293e6:	e005      	b.n	80293f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80293e8:	6878      	ldr	r0, [r7, #4]
 80293ea:	f000 fa5e 	bl	80298aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80293ee:	6878      	ldr	r0, [r7, #4]
 80293f0:	f000 fa6f 	bl	80298d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80293f4:	687b      	ldr	r3, [r7, #4]
 80293f6:	2200      	movs	r2, #0
 80293f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80293fa:	687b      	ldr	r3, [r7, #4]
 80293fc:	681b      	ldr	r3, [r3, #0]
 80293fe:	691b      	ldr	r3, [r3, #16]
 8029400:	f003 0304 	and.w	r3, r3, #4
 8029404:	2b04      	cmp	r3, #4
 8029406:	d122      	bne.n	802944e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8029408:	687b      	ldr	r3, [r7, #4]
 802940a:	681b      	ldr	r3, [r3, #0]
 802940c:	68db      	ldr	r3, [r3, #12]
 802940e:	f003 0304 	and.w	r3, r3, #4
 8029412:	2b04      	cmp	r3, #4
 8029414:	d11b      	bne.n	802944e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8029416:	687b      	ldr	r3, [r7, #4]
 8029418:	681b      	ldr	r3, [r3, #0]
 802941a:	f06f 0204 	mvn.w	r2, #4
 802941e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8029420:	687b      	ldr	r3, [r7, #4]
 8029422:	2202      	movs	r2, #2
 8029424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8029426:	687b      	ldr	r3, [r7, #4]
 8029428:	681b      	ldr	r3, [r3, #0]
 802942a:	699b      	ldr	r3, [r3, #24]
 802942c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029430:	2b00      	cmp	r3, #0
 8029432:	d003      	beq.n	802943c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029434:	6878      	ldr	r0, [r7, #4]
 8029436:	f000 fa42 	bl	80298be <HAL_TIM_IC_CaptureCallback>
 802943a:	e005      	b.n	8029448 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802943c:	6878      	ldr	r0, [r7, #4]
 802943e:	f000 fa34 	bl	80298aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029442:	6878      	ldr	r0, [r7, #4]
 8029444:	f000 fa45 	bl	80298d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029448:	687b      	ldr	r3, [r7, #4]
 802944a:	2200      	movs	r2, #0
 802944c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802944e:	687b      	ldr	r3, [r7, #4]
 8029450:	681b      	ldr	r3, [r3, #0]
 8029452:	691b      	ldr	r3, [r3, #16]
 8029454:	f003 0308 	and.w	r3, r3, #8
 8029458:	2b08      	cmp	r3, #8
 802945a:	d122      	bne.n	80294a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802945c:	687b      	ldr	r3, [r7, #4]
 802945e:	681b      	ldr	r3, [r3, #0]
 8029460:	68db      	ldr	r3, [r3, #12]
 8029462:	f003 0308 	and.w	r3, r3, #8
 8029466:	2b08      	cmp	r3, #8
 8029468:	d11b      	bne.n	80294a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802946a:	687b      	ldr	r3, [r7, #4]
 802946c:	681b      	ldr	r3, [r3, #0]
 802946e:	f06f 0208 	mvn.w	r2, #8
 8029472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8029474:	687b      	ldr	r3, [r7, #4]
 8029476:	2204      	movs	r2, #4
 8029478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802947a:	687b      	ldr	r3, [r7, #4]
 802947c:	681b      	ldr	r3, [r3, #0]
 802947e:	69db      	ldr	r3, [r3, #28]
 8029480:	f003 0303 	and.w	r3, r3, #3
 8029484:	2b00      	cmp	r3, #0
 8029486:	d003      	beq.n	8029490 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029488:	6878      	ldr	r0, [r7, #4]
 802948a:	f000 fa18 	bl	80298be <HAL_TIM_IC_CaptureCallback>
 802948e:	e005      	b.n	802949c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029490:	6878      	ldr	r0, [r7, #4]
 8029492:	f000 fa0a 	bl	80298aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029496:	6878      	ldr	r0, [r7, #4]
 8029498:	f000 fa1b 	bl	80298d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802949c:	687b      	ldr	r3, [r7, #4]
 802949e:	2200      	movs	r2, #0
 80294a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80294a2:	687b      	ldr	r3, [r7, #4]
 80294a4:	681b      	ldr	r3, [r3, #0]
 80294a6:	691b      	ldr	r3, [r3, #16]
 80294a8:	f003 0310 	and.w	r3, r3, #16
 80294ac:	2b10      	cmp	r3, #16
 80294ae:	d122      	bne.n	80294f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80294b0:	687b      	ldr	r3, [r7, #4]
 80294b2:	681b      	ldr	r3, [r3, #0]
 80294b4:	68db      	ldr	r3, [r3, #12]
 80294b6:	f003 0310 	and.w	r3, r3, #16
 80294ba:	2b10      	cmp	r3, #16
 80294bc:	d11b      	bne.n	80294f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80294be:	687b      	ldr	r3, [r7, #4]
 80294c0:	681b      	ldr	r3, [r3, #0]
 80294c2:	f06f 0210 	mvn.w	r2, #16
 80294c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80294c8:	687b      	ldr	r3, [r7, #4]
 80294ca:	2208      	movs	r2, #8
 80294cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80294ce:	687b      	ldr	r3, [r7, #4]
 80294d0:	681b      	ldr	r3, [r3, #0]
 80294d2:	69db      	ldr	r3, [r3, #28]
 80294d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80294d8:	2b00      	cmp	r3, #0
 80294da:	d003      	beq.n	80294e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80294dc:	6878      	ldr	r0, [r7, #4]
 80294de:	f000 f9ee 	bl	80298be <HAL_TIM_IC_CaptureCallback>
 80294e2:	e005      	b.n	80294f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80294e4:	6878      	ldr	r0, [r7, #4]
 80294e6:	f000 f9e0 	bl	80298aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80294ea:	6878      	ldr	r0, [r7, #4]
 80294ec:	f000 f9f1 	bl	80298d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80294f0:	687b      	ldr	r3, [r7, #4]
 80294f2:	2200      	movs	r2, #0
 80294f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80294f6:	687b      	ldr	r3, [r7, #4]
 80294f8:	681b      	ldr	r3, [r3, #0]
 80294fa:	691b      	ldr	r3, [r3, #16]
 80294fc:	f003 0301 	and.w	r3, r3, #1
 8029500:	2b01      	cmp	r3, #1
 8029502:	d10e      	bne.n	8029522 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8029504:	687b      	ldr	r3, [r7, #4]
 8029506:	681b      	ldr	r3, [r3, #0]
 8029508:	68db      	ldr	r3, [r3, #12]
 802950a:	f003 0301 	and.w	r3, r3, #1
 802950e:	2b01      	cmp	r3, #1
 8029510:	d107      	bne.n	8029522 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8029512:	687b      	ldr	r3, [r7, #4]
 8029514:	681b      	ldr	r3, [r3, #0]
 8029516:	f06f 0201 	mvn.w	r2, #1
 802951a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802951c:	6878      	ldr	r0, [r7, #4]
 802951e:	f7f9 fdd9 	bl	80230d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8029522:	687b      	ldr	r3, [r7, #4]
 8029524:	681b      	ldr	r3, [r3, #0]
 8029526:	691b      	ldr	r3, [r3, #16]
 8029528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802952c:	2b80      	cmp	r3, #128	; 0x80
 802952e:	d10e      	bne.n	802954e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029530:	687b      	ldr	r3, [r7, #4]
 8029532:	681b      	ldr	r3, [r3, #0]
 8029534:	68db      	ldr	r3, [r3, #12]
 8029536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802953a:	2b80      	cmp	r3, #128	; 0x80
 802953c:	d107      	bne.n	802954e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802953e:	687b      	ldr	r3, [r7, #4]
 8029540:	681b      	ldr	r3, [r3, #0]
 8029542:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8029546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8029548:	6878      	ldr	r0, [r7, #4]
 802954a:	f000 fdbf 	bl	802a0cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802954e:	687b      	ldr	r3, [r7, #4]
 8029550:	681b      	ldr	r3, [r3, #0]
 8029552:	691b      	ldr	r3, [r3, #16]
 8029554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029558:	2b40      	cmp	r3, #64	; 0x40
 802955a:	d10e      	bne.n	802957a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802955c:	687b      	ldr	r3, [r7, #4]
 802955e:	681b      	ldr	r3, [r3, #0]
 8029560:	68db      	ldr	r3, [r3, #12]
 8029562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029566:	2b40      	cmp	r3, #64	; 0x40
 8029568:	d107      	bne.n	802957a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802956a:	687b      	ldr	r3, [r7, #4]
 802956c:	681b      	ldr	r3, [r3, #0]
 802956e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8029572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8029574:	6878      	ldr	r0, [r7, #4]
 8029576:	f000 f9b6 	bl	80298e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802957a:	687b      	ldr	r3, [r7, #4]
 802957c:	681b      	ldr	r3, [r3, #0]
 802957e:	691b      	ldr	r3, [r3, #16]
 8029580:	f003 0320 	and.w	r3, r3, #32
 8029584:	2b20      	cmp	r3, #32
 8029586:	d10e      	bne.n	80295a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8029588:	687b      	ldr	r3, [r7, #4]
 802958a:	681b      	ldr	r3, [r3, #0]
 802958c:	68db      	ldr	r3, [r3, #12]
 802958e:	f003 0320 	and.w	r3, r3, #32
 8029592:	2b20      	cmp	r3, #32
 8029594:	d107      	bne.n	80295a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8029596:	687b      	ldr	r3, [r7, #4]
 8029598:	681b      	ldr	r3, [r3, #0]
 802959a:	f06f 0220 	mvn.w	r2, #32
 802959e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80295a0:	6878      	ldr	r0, [r7, #4]
 80295a2:	f000 fd89 	bl	802a0b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80295a6:	bf00      	nop
 80295a8:	3708      	adds	r7, #8
 80295aa:	46bd      	mov	sp, r7
 80295ac:	bd80      	pop	{r7, pc}
	...

080295b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80295b0:	b580      	push	{r7, lr}
 80295b2:	b084      	sub	sp, #16
 80295b4:	af00      	add	r7, sp, #0
 80295b6:	60f8      	str	r0, [r7, #12]
 80295b8:	60b9      	str	r1, [r7, #8]
 80295ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80295bc:	68fb      	ldr	r3, [r7, #12]
 80295be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80295c2:	2b01      	cmp	r3, #1
 80295c4:	d101      	bne.n	80295ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80295c6:	2302      	movs	r3, #2
 80295c8:	e0b4      	b.n	8029734 <HAL_TIM_PWM_ConfigChannel+0x184>
 80295ca:	68fb      	ldr	r3, [r7, #12]
 80295cc:	2201      	movs	r2, #1
 80295ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80295d2:	68fb      	ldr	r3, [r7, #12]
 80295d4:	2202      	movs	r2, #2
 80295d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80295da:	687b      	ldr	r3, [r7, #4]
 80295dc:	2b0c      	cmp	r3, #12
 80295de:	f200 809f 	bhi.w	8029720 <HAL_TIM_PWM_ConfigChannel+0x170>
 80295e2:	a201      	add	r2, pc, #4	; (adr r2, 80295e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80295e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80295e8:	0802961d 	.word	0x0802961d
 80295ec:	08029721 	.word	0x08029721
 80295f0:	08029721 	.word	0x08029721
 80295f4:	08029721 	.word	0x08029721
 80295f8:	0802965d 	.word	0x0802965d
 80295fc:	08029721 	.word	0x08029721
 8029600:	08029721 	.word	0x08029721
 8029604:	08029721 	.word	0x08029721
 8029608:	0802969f 	.word	0x0802969f
 802960c:	08029721 	.word	0x08029721
 8029610:	08029721 	.word	0x08029721
 8029614:	08029721 	.word	0x08029721
 8029618:	080296df 	.word	0x080296df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 802961c:	68fb      	ldr	r3, [r7, #12]
 802961e:	681b      	ldr	r3, [r3, #0]
 8029620:	68b9      	ldr	r1, [r7, #8]
 8029622:	4618      	mov	r0, r3
 8029624:	f000 fa0a 	bl	8029a3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8029628:	68fb      	ldr	r3, [r7, #12]
 802962a:	681b      	ldr	r3, [r3, #0]
 802962c:	699a      	ldr	r2, [r3, #24]
 802962e:	68fb      	ldr	r3, [r7, #12]
 8029630:	681b      	ldr	r3, [r3, #0]
 8029632:	f042 0208 	orr.w	r2, r2, #8
 8029636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8029638:	68fb      	ldr	r3, [r7, #12]
 802963a:	681b      	ldr	r3, [r3, #0]
 802963c:	699a      	ldr	r2, [r3, #24]
 802963e:	68fb      	ldr	r3, [r7, #12]
 8029640:	681b      	ldr	r3, [r3, #0]
 8029642:	f022 0204 	bic.w	r2, r2, #4
 8029646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8029648:	68fb      	ldr	r3, [r7, #12]
 802964a:	681b      	ldr	r3, [r3, #0]
 802964c:	6999      	ldr	r1, [r3, #24]
 802964e:	68bb      	ldr	r3, [r7, #8]
 8029650:	691a      	ldr	r2, [r3, #16]
 8029652:	68fb      	ldr	r3, [r7, #12]
 8029654:	681b      	ldr	r3, [r3, #0]
 8029656:	430a      	orrs	r2, r1
 8029658:	619a      	str	r2, [r3, #24]
      break;
 802965a:	e062      	b.n	8029722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 802965c:	68fb      	ldr	r3, [r7, #12]
 802965e:	681b      	ldr	r3, [r3, #0]
 8029660:	68b9      	ldr	r1, [r7, #8]
 8029662:	4618      	mov	r0, r3
 8029664:	f000 fa5a 	bl	8029b1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8029668:	68fb      	ldr	r3, [r7, #12]
 802966a:	681b      	ldr	r3, [r3, #0]
 802966c:	699a      	ldr	r2, [r3, #24]
 802966e:	68fb      	ldr	r3, [r7, #12]
 8029670:	681b      	ldr	r3, [r3, #0]
 8029672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8029676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8029678:	68fb      	ldr	r3, [r7, #12]
 802967a:	681b      	ldr	r3, [r3, #0]
 802967c:	699a      	ldr	r2, [r3, #24]
 802967e:	68fb      	ldr	r3, [r7, #12]
 8029680:	681b      	ldr	r3, [r3, #0]
 8029682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8029686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8029688:	68fb      	ldr	r3, [r7, #12]
 802968a:	681b      	ldr	r3, [r3, #0]
 802968c:	6999      	ldr	r1, [r3, #24]
 802968e:	68bb      	ldr	r3, [r7, #8]
 8029690:	691b      	ldr	r3, [r3, #16]
 8029692:	021a      	lsls	r2, r3, #8
 8029694:	68fb      	ldr	r3, [r7, #12]
 8029696:	681b      	ldr	r3, [r3, #0]
 8029698:	430a      	orrs	r2, r1
 802969a:	619a      	str	r2, [r3, #24]
      break;
 802969c:	e041      	b.n	8029722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 802969e:	68fb      	ldr	r3, [r7, #12]
 80296a0:	681b      	ldr	r3, [r3, #0]
 80296a2:	68b9      	ldr	r1, [r7, #8]
 80296a4:	4618      	mov	r0, r3
 80296a6:	f000 faaf 	bl	8029c08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80296aa:	68fb      	ldr	r3, [r7, #12]
 80296ac:	681b      	ldr	r3, [r3, #0]
 80296ae:	69da      	ldr	r2, [r3, #28]
 80296b0:	68fb      	ldr	r3, [r7, #12]
 80296b2:	681b      	ldr	r3, [r3, #0]
 80296b4:	f042 0208 	orr.w	r2, r2, #8
 80296b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80296ba:	68fb      	ldr	r3, [r7, #12]
 80296bc:	681b      	ldr	r3, [r3, #0]
 80296be:	69da      	ldr	r2, [r3, #28]
 80296c0:	68fb      	ldr	r3, [r7, #12]
 80296c2:	681b      	ldr	r3, [r3, #0]
 80296c4:	f022 0204 	bic.w	r2, r2, #4
 80296c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80296ca:	68fb      	ldr	r3, [r7, #12]
 80296cc:	681b      	ldr	r3, [r3, #0]
 80296ce:	69d9      	ldr	r1, [r3, #28]
 80296d0:	68bb      	ldr	r3, [r7, #8]
 80296d2:	691a      	ldr	r2, [r3, #16]
 80296d4:	68fb      	ldr	r3, [r7, #12]
 80296d6:	681b      	ldr	r3, [r3, #0]
 80296d8:	430a      	orrs	r2, r1
 80296da:	61da      	str	r2, [r3, #28]
      break;
 80296dc:	e021      	b.n	8029722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80296de:	68fb      	ldr	r3, [r7, #12]
 80296e0:	681b      	ldr	r3, [r3, #0]
 80296e2:	68b9      	ldr	r1, [r7, #8]
 80296e4:	4618      	mov	r0, r3
 80296e6:	f000 fb03 	bl	8029cf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80296ea:	68fb      	ldr	r3, [r7, #12]
 80296ec:	681b      	ldr	r3, [r3, #0]
 80296ee:	69da      	ldr	r2, [r3, #28]
 80296f0:	68fb      	ldr	r3, [r7, #12]
 80296f2:	681b      	ldr	r3, [r3, #0]
 80296f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80296f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80296fa:	68fb      	ldr	r3, [r7, #12]
 80296fc:	681b      	ldr	r3, [r3, #0]
 80296fe:	69da      	ldr	r2, [r3, #28]
 8029700:	68fb      	ldr	r3, [r7, #12]
 8029702:	681b      	ldr	r3, [r3, #0]
 8029704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8029708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 802970a:	68fb      	ldr	r3, [r7, #12]
 802970c:	681b      	ldr	r3, [r3, #0]
 802970e:	69d9      	ldr	r1, [r3, #28]
 8029710:	68bb      	ldr	r3, [r7, #8]
 8029712:	691b      	ldr	r3, [r3, #16]
 8029714:	021a      	lsls	r2, r3, #8
 8029716:	68fb      	ldr	r3, [r7, #12]
 8029718:	681b      	ldr	r3, [r3, #0]
 802971a:	430a      	orrs	r2, r1
 802971c:	61da      	str	r2, [r3, #28]
      break;
 802971e:	e000      	b.n	8029722 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8029720:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8029722:	68fb      	ldr	r3, [r7, #12]
 8029724:	2201      	movs	r2, #1
 8029726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802972a:	68fb      	ldr	r3, [r7, #12]
 802972c:	2200      	movs	r2, #0
 802972e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029732:	2300      	movs	r3, #0
}
 8029734:	4618      	mov	r0, r3
 8029736:	3710      	adds	r7, #16
 8029738:	46bd      	mov	sp, r7
 802973a:	bd80      	pop	{r7, pc}

0802973c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 802973c:	b580      	push	{r7, lr}
 802973e:	b084      	sub	sp, #16
 8029740:	af00      	add	r7, sp, #0
 8029742:	6078      	str	r0, [r7, #4]
 8029744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8029746:	687b      	ldr	r3, [r7, #4]
 8029748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802974c:	2b01      	cmp	r3, #1
 802974e:	d101      	bne.n	8029754 <HAL_TIM_ConfigClockSource+0x18>
 8029750:	2302      	movs	r3, #2
 8029752:	e0a6      	b.n	80298a2 <HAL_TIM_ConfigClockSource+0x166>
 8029754:	687b      	ldr	r3, [r7, #4]
 8029756:	2201      	movs	r2, #1
 8029758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802975c:	687b      	ldr	r3, [r7, #4]
 802975e:	2202      	movs	r2, #2
 8029760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8029764:	687b      	ldr	r3, [r7, #4]
 8029766:	681b      	ldr	r3, [r3, #0]
 8029768:	689b      	ldr	r3, [r3, #8]
 802976a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802976c:	68fb      	ldr	r3, [r7, #12]
 802976e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8029772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029774:	68fb      	ldr	r3, [r7, #12]
 8029776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802977a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 802977c:	687b      	ldr	r3, [r7, #4]
 802977e:	681b      	ldr	r3, [r3, #0]
 8029780:	68fa      	ldr	r2, [r7, #12]
 8029782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8029784:	683b      	ldr	r3, [r7, #0]
 8029786:	681b      	ldr	r3, [r3, #0]
 8029788:	2b40      	cmp	r3, #64	; 0x40
 802978a:	d067      	beq.n	802985c <HAL_TIM_ConfigClockSource+0x120>
 802978c:	2b40      	cmp	r3, #64	; 0x40
 802978e:	d80b      	bhi.n	80297a8 <HAL_TIM_ConfigClockSource+0x6c>
 8029790:	2b10      	cmp	r3, #16
 8029792:	d073      	beq.n	802987c <HAL_TIM_ConfigClockSource+0x140>
 8029794:	2b10      	cmp	r3, #16
 8029796:	d802      	bhi.n	802979e <HAL_TIM_ConfigClockSource+0x62>
 8029798:	2b00      	cmp	r3, #0
 802979a:	d06f      	beq.n	802987c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 802979c:	e078      	b.n	8029890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802979e:	2b20      	cmp	r3, #32
 80297a0:	d06c      	beq.n	802987c <HAL_TIM_ConfigClockSource+0x140>
 80297a2:	2b30      	cmp	r3, #48	; 0x30
 80297a4:	d06a      	beq.n	802987c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80297a6:	e073      	b.n	8029890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80297a8:	2b70      	cmp	r3, #112	; 0x70
 80297aa:	d00d      	beq.n	80297c8 <HAL_TIM_ConfigClockSource+0x8c>
 80297ac:	2b70      	cmp	r3, #112	; 0x70
 80297ae:	d804      	bhi.n	80297ba <HAL_TIM_ConfigClockSource+0x7e>
 80297b0:	2b50      	cmp	r3, #80	; 0x50
 80297b2:	d033      	beq.n	802981c <HAL_TIM_ConfigClockSource+0xe0>
 80297b4:	2b60      	cmp	r3, #96	; 0x60
 80297b6:	d041      	beq.n	802983c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80297b8:	e06a      	b.n	8029890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80297ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80297be:	d066      	beq.n	802988e <HAL_TIM_ConfigClockSource+0x152>
 80297c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80297c4:	d017      	beq.n	80297f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80297c6:	e063      	b.n	8029890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80297c8:	687b      	ldr	r3, [r7, #4]
 80297ca:	6818      	ldr	r0, [r3, #0]
 80297cc:	683b      	ldr	r3, [r7, #0]
 80297ce:	6899      	ldr	r1, [r3, #8]
 80297d0:	683b      	ldr	r3, [r7, #0]
 80297d2:	685a      	ldr	r2, [r3, #4]
 80297d4:	683b      	ldr	r3, [r7, #0]
 80297d6:	68db      	ldr	r3, [r3, #12]
 80297d8:	f000 fb5a 	bl	8029e90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80297dc:	687b      	ldr	r3, [r7, #4]
 80297de:	681b      	ldr	r3, [r3, #0]
 80297e0:	689b      	ldr	r3, [r3, #8]
 80297e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80297e4:	68fb      	ldr	r3, [r7, #12]
 80297e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80297ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80297ec:	687b      	ldr	r3, [r7, #4]
 80297ee:	681b      	ldr	r3, [r3, #0]
 80297f0:	68fa      	ldr	r2, [r7, #12]
 80297f2:	609a      	str	r2, [r3, #8]
      break;
 80297f4:	e04c      	b.n	8029890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80297f6:	687b      	ldr	r3, [r7, #4]
 80297f8:	6818      	ldr	r0, [r3, #0]
 80297fa:	683b      	ldr	r3, [r7, #0]
 80297fc:	6899      	ldr	r1, [r3, #8]
 80297fe:	683b      	ldr	r3, [r7, #0]
 8029800:	685a      	ldr	r2, [r3, #4]
 8029802:	683b      	ldr	r3, [r7, #0]
 8029804:	68db      	ldr	r3, [r3, #12]
 8029806:	f000 fb43 	bl	8029e90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802980a:	687b      	ldr	r3, [r7, #4]
 802980c:	681b      	ldr	r3, [r3, #0]
 802980e:	689a      	ldr	r2, [r3, #8]
 8029810:	687b      	ldr	r3, [r7, #4]
 8029812:	681b      	ldr	r3, [r3, #0]
 8029814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8029818:	609a      	str	r2, [r3, #8]
      break;
 802981a:	e039      	b.n	8029890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802981c:	687b      	ldr	r3, [r7, #4]
 802981e:	6818      	ldr	r0, [r3, #0]
 8029820:	683b      	ldr	r3, [r7, #0]
 8029822:	6859      	ldr	r1, [r3, #4]
 8029824:	683b      	ldr	r3, [r7, #0]
 8029826:	68db      	ldr	r3, [r3, #12]
 8029828:	461a      	mov	r2, r3
 802982a:	f000 fab7 	bl	8029d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 802982e:	687b      	ldr	r3, [r7, #4]
 8029830:	681b      	ldr	r3, [r3, #0]
 8029832:	2150      	movs	r1, #80	; 0x50
 8029834:	4618      	mov	r0, r3
 8029836:	f000 fb10 	bl	8029e5a <TIM_ITRx_SetConfig>
      break;
 802983a:	e029      	b.n	8029890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 802983c:	687b      	ldr	r3, [r7, #4]
 802983e:	6818      	ldr	r0, [r3, #0]
 8029840:	683b      	ldr	r3, [r7, #0]
 8029842:	6859      	ldr	r1, [r3, #4]
 8029844:	683b      	ldr	r3, [r7, #0]
 8029846:	68db      	ldr	r3, [r3, #12]
 8029848:	461a      	mov	r2, r3
 802984a:	f000 fad6 	bl	8029dfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802984e:	687b      	ldr	r3, [r7, #4]
 8029850:	681b      	ldr	r3, [r3, #0]
 8029852:	2160      	movs	r1, #96	; 0x60
 8029854:	4618      	mov	r0, r3
 8029856:	f000 fb00 	bl	8029e5a <TIM_ITRx_SetConfig>
      break;
 802985a:	e019      	b.n	8029890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802985c:	687b      	ldr	r3, [r7, #4]
 802985e:	6818      	ldr	r0, [r3, #0]
 8029860:	683b      	ldr	r3, [r7, #0]
 8029862:	6859      	ldr	r1, [r3, #4]
 8029864:	683b      	ldr	r3, [r7, #0]
 8029866:	68db      	ldr	r3, [r3, #12]
 8029868:	461a      	mov	r2, r3
 802986a:	f000 fa97 	bl	8029d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802986e:	687b      	ldr	r3, [r7, #4]
 8029870:	681b      	ldr	r3, [r3, #0]
 8029872:	2140      	movs	r1, #64	; 0x40
 8029874:	4618      	mov	r0, r3
 8029876:	f000 faf0 	bl	8029e5a <TIM_ITRx_SetConfig>
      break;
 802987a:	e009      	b.n	8029890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802987c:	687b      	ldr	r3, [r7, #4]
 802987e:	681a      	ldr	r2, [r3, #0]
 8029880:	683b      	ldr	r3, [r7, #0]
 8029882:	681b      	ldr	r3, [r3, #0]
 8029884:	4619      	mov	r1, r3
 8029886:	4610      	mov	r0, r2
 8029888:	f000 fae7 	bl	8029e5a <TIM_ITRx_SetConfig>
      break;
 802988c:	e000      	b.n	8029890 <HAL_TIM_ConfigClockSource+0x154>
      break;
 802988e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8029890:	687b      	ldr	r3, [r7, #4]
 8029892:	2201      	movs	r2, #1
 8029894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029898:	687b      	ldr	r3, [r7, #4]
 802989a:	2200      	movs	r2, #0
 802989c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80298a0:	2300      	movs	r3, #0
}
 80298a2:	4618      	mov	r0, r3
 80298a4:	3710      	adds	r7, #16
 80298a6:	46bd      	mov	sp, r7
 80298a8:	bd80      	pop	{r7, pc}

080298aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80298aa:	b480      	push	{r7}
 80298ac:	b083      	sub	sp, #12
 80298ae:	af00      	add	r7, sp, #0
 80298b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80298b2:	bf00      	nop
 80298b4:	370c      	adds	r7, #12
 80298b6:	46bd      	mov	sp, r7
 80298b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298bc:	4770      	bx	lr

080298be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80298be:	b480      	push	{r7}
 80298c0:	b083      	sub	sp, #12
 80298c2:	af00      	add	r7, sp, #0
 80298c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80298c6:	bf00      	nop
 80298c8:	370c      	adds	r7, #12
 80298ca:	46bd      	mov	sp, r7
 80298cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298d0:	4770      	bx	lr

080298d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80298d2:	b480      	push	{r7}
 80298d4:	b083      	sub	sp, #12
 80298d6:	af00      	add	r7, sp, #0
 80298d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80298da:	bf00      	nop
 80298dc:	370c      	adds	r7, #12
 80298de:	46bd      	mov	sp, r7
 80298e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298e4:	4770      	bx	lr

080298e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80298e6:	b480      	push	{r7}
 80298e8:	b083      	sub	sp, #12
 80298ea:	af00      	add	r7, sp, #0
 80298ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80298ee:	bf00      	nop
 80298f0:	370c      	adds	r7, #12
 80298f2:	46bd      	mov	sp, r7
 80298f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298f8:	4770      	bx	lr
	...

080298fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80298fc:	b480      	push	{r7}
 80298fe:	b085      	sub	sp, #20
 8029900:	af00      	add	r7, sp, #0
 8029902:	6078      	str	r0, [r7, #4]
 8029904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8029906:	687b      	ldr	r3, [r7, #4]
 8029908:	681b      	ldr	r3, [r3, #0]
 802990a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802990c:	687b      	ldr	r3, [r7, #4]
 802990e:	4a40      	ldr	r2, [pc, #256]	; (8029a10 <TIM_Base_SetConfig+0x114>)
 8029910:	4293      	cmp	r3, r2
 8029912:	d013      	beq.n	802993c <TIM_Base_SetConfig+0x40>
 8029914:	687b      	ldr	r3, [r7, #4]
 8029916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802991a:	d00f      	beq.n	802993c <TIM_Base_SetConfig+0x40>
 802991c:	687b      	ldr	r3, [r7, #4]
 802991e:	4a3d      	ldr	r2, [pc, #244]	; (8029a14 <TIM_Base_SetConfig+0x118>)
 8029920:	4293      	cmp	r3, r2
 8029922:	d00b      	beq.n	802993c <TIM_Base_SetConfig+0x40>
 8029924:	687b      	ldr	r3, [r7, #4]
 8029926:	4a3c      	ldr	r2, [pc, #240]	; (8029a18 <TIM_Base_SetConfig+0x11c>)
 8029928:	4293      	cmp	r3, r2
 802992a:	d007      	beq.n	802993c <TIM_Base_SetConfig+0x40>
 802992c:	687b      	ldr	r3, [r7, #4]
 802992e:	4a3b      	ldr	r2, [pc, #236]	; (8029a1c <TIM_Base_SetConfig+0x120>)
 8029930:	4293      	cmp	r3, r2
 8029932:	d003      	beq.n	802993c <TIM_Base_SetConfig+0x40>
 8029934:	687b      	ldr	r3, [r7, #4]
 8029936:	4a3a      	ldr	r2, [pc, #232]	; (8029a20 <TIM_Base_SetConfig+0x124>)
 8029938:	4293      	cmp	r3, r2
 802993a:	d108      	bne.n	802994e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802993c:	68fb      	ldr	r3, [r7, #12]
 802993e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8029944:	683b      	ldr	r3, [r7, #0]
 8029946:	685b      	ldr	r3, [r3, #4]
 8029948:	68fa      	ldr	r2, [r7, #12]
 802994a:	4313      	orrs	r3, r2
 802994c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802994e:	687b      	ldr	r3, [r7, #4]
 8029950:	4a2f      	ldr	r2, [pc, #188]	; (8029a10 <TIM_Base_SetConfig+0x114>)
 8029952:	4293      	cmp	r3, r2
 8029954:	d02b      	beq.n	80299ae <TIM_Base_SetConfig+0xb2>
 8029956:	687b      	ldr	r3, [r7, #4]
 8029958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802995c:	d027      	beq.n	80299ae <TIM_Base_SetConfig+0xb2>
 802995e:	687b      	ldr	r3, [r7, #4]
 8029960:	4a2c      	ldr	r2, [pc, #176]	; (8029a14 <TIM_Base_SetConfig+0x118>)
 8029962:	4293      	cmp	r3, r2
 8029964:	d023      	beq.n	80299ae <TIM_Base_SetConfig+0xb2>
 8029966:	687b      	ldr	r3, [r7, #4]
 8029968:	4a2b      	ldr	r2, [pc, #172]	; (8029a18 <TIM_Base_SetConfig+0x11c>)
 802996a:	4293      	cmp	r3, r2
 802996c:	d01f      	beq.n	80299ae <TIM_Base_SetConfig+0xb2>
 802996e:	687b      	ldr	r3, [r7, #4]
 8029970:	4a2a      	ldr	r2, [pc, #168]	; (8029a1c <TIM_Base_SetConfig+0x120>)
 8029972:	4293      	cmp	r3, r2
 8029974:	d01b      	beq.n	80299ae <TIM_Base_SetConfig+0xb2>
 8029976:	687b      	ldr	r3, [r7, #4]
 8029978:	4a29      	ldr	r2, [pc, #164]	; (8029a20 <TIM_Base_SetConfig+0x124>)
 802997a:	4293      	cmp	r3, r2
 802997c:	d017      	beq.n	80299ae <TIM_Base_SetConfig+0xb2>
 802997e:	687b      	ldr	r3, [r7, #4]
 8029980:	4a28      	ldr	r2, [pc, #160]	; (8029a24 <TIM_Base_SetConfig+0x128>)
 8029982:	4293      	cmp	r3, r2
 8029984:	d013      	beq.n	80299ae <TIM_Base_SetConfig+0xb2>
 8029986:	687b      	ldr	r3, [r7, #4]
 8029988:	4a27      	ldr	r2, [pc, #156]	; (8029a28 <TIM_Base_SetConfig+0x12c>)
 802998a:	4293      	cmp	r3, r2
 802998c:	d00f      	beq.n	80299ae <TIM_Base_SetConfig+0xb2>
 802998e:	687b      	ldr	r3, [r7, #4]
 8029990:	4a26      	ldr	r2, [pc, #152]	; (8029a2c <TIM_Base_SetConfig+0x130>)
 8029992:	4293      	cmp	r3, r2
 8029994:	d00b      	beq.n	80299ae <TIM_Base_SetConfig+0xb2>
 8029996:	687b      	ldr	r3, [r7, #4]
 8029998:	4a25      	ldr	r2, [pc, #148]	; (8029a30 <TIM_Base_SetConfig+0x134>)
 802999a:	4293      	cmp	r3, r2
 802999c:	d007      	beq.n	80299ae <TIM_Base_SetConfig+0xb2>
 802999e:	687b      	ldr	r3, [r7, #4]
 80299a0:	4a24      	ldr	r2, [pc, #144]	; (8029a34 <TIM_Base_SetConfig+0x138>)
 80299a2:	4293      	cmp	r3, r2
 80299a4:	d003      	beq.n	80299ae <TIM_Base_SetConfig+0xb2>
 80299a6:	687b      	ldr	r3, [r7, #4]
 80299a8:	4a23      	ldr	r2, [pc, #140]	; (8029a38 <TIM_Base_SetConfig+0x13c>)
 80299aa:	4293      	cmp	r3, r2
 80299ac:	d108      	bne.n	80299c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80299ae:	68fb      	ldr	r3, [r7, #12]
 80299b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80299b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80299b6:	683b      	ldr	r3, [r7, #0]
 80299b8:	68db      	ldr	r3, [r3, #12]
 80299ba:	68fa      	ldr	r2, [r7, #12]
 80299bc:	4313      	orrs	r3, r2
 80299be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80299c0:	68fb      	ldr	r3, [r7, #12]
 80299c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80299c6:	683b      	ldr	r3, [r7, #0]
 80299c8:	695b      	ldr	r3, [r3, #20]
 80299ca:	4313      	orrs	r3, r2
 80299cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80299ce:	687b      	ldr	r3, [r7, #4]
 80299d0:	68fa      	ldr	r2, [r7, #12]
 80299d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80299d4:	683b      	ldr	r3, [r7, #0]
 80299d6:	689a      	ldr	r2, [r3, #8]
 80299d8:	687b      	ldr	r3, [r7, #4]
 80299da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80299dc:	683b      	ldr	r3, [r7, #0]
 80299de:	681a      	ldr	r2, [r3, #0]
 80299e0:	687b      	ldr	r3, [r7, #4]
 80299e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80299e4:	687b      	ldr	r3, [r7, #4]
 80299e6:	4a0a      	ldr	r2, [pc, #40]	; (8029a10 <TIM_Base_SetConfig+0x114>)
 80299e8:	4293      	cmp	r3, r2
 80299ea:	d003      	beq.n	80299f4 <TIM_Base_SetConfig+0xf8>
 80299ec:	687b      	ldr	r3, [r7, #4]
 80299ee:	4a0c      	ldr	r2, [pc, #48]	; (8029a20 <TIM_Base_SetConfig+0x124>)
 80299f0:	4293      	cmp	r3, r2
 80299f2:	d103      	bne.n	80299fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80299f4:	683b      	ldr	r3, [r7, #0]
 80299f6:	691a      	ldr	r2, [r3, #16]
 80299f8:	687b      	ldr	r3, [r7, #4]
 80299fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80299fc:	687b      	ldr	r3, [r7, #4]
 80299fe:	2201      	movs	r2, #1
 8029a00:	615a      	str	r2, [r3, #20]
}
 8029a02:	bf00      	nop
 8029a04:	3714      	adds	r7, #20
 8029a06:	46bd      	mov	sp, r7
 8029a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a0c:	4770      	bx	lr
 8029a0e:	bf00      	nop
 8029a10:	40010000 	.word	0x40010000
 8029a14:	40000400 	.word	0x40000400
 8029a18:	40000800 	.word	0x40000800
 8029a1c:	40000c00 	.word	0x40000c00
 8029a20:	40010400 	.word	0x40010400
 8029a24:	40014000 	.word	0x40014000
 8029a28:	40014400 	.word	0x40014400
 8029a2c:	40014800 	.word	0x40014800
 8029a30:	40001800 	.word	0x40001800
 8029a34:	40001c00 	.word	0x40001c00
 8029a38:	40002000 	.word	0x40002000

08029a3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029a3c:	b480      	push	{r7}
 8029a3e:	b087      	sub	sp, #28
 8029a40:	af00      	add	r7, sp, #0
 8029a42:	6078      	str	r0, [r7, #4]
 8029a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029a46:	687b      	ldr	r3, [r7, #4]
 8029a48:	6a1b      	ldr	r3, [r3, #32]
 8029a4a:	f023 0201 	bic.w	r2, r3, #1
 8029a4e:	687b      	ldr	r3, [r7, #4]
 8029a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029a52:	687b      	ldr	r3, [r7, #4]
 8029a54:	6a1b      	ldr	r3, [r3, #32]
 8029a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029a58:	687b      	ldr	r3, [r7, #4]
 8029a5a:	685b      	ldr	r3, [r3, #4]
 8029a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029a5e:	687b      	ldr	r3, [r7, #4]
 8029a60:	699b      	ldr	r3, [r3, #24]
 8029a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8029a64:	68fb      	ldr	r3, [r7, #12]
 8029a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8029a6c:	68fb      	ldr	r3, [r7, #12]
 8029a6e:	f023 0303 	bic.w	r3, r3, #3
 8029a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029a74:	683b      	ldr	r3, [r7, #0]
 8029a76:	681b      	ldr	r3, [r3, #0]
 8029a78:	68fa      	ldr	r2, [r7, #12]
 8029a7a:	4313      	orrs	r3, r2
 8029a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8029a7e:	697b      	ldr	r3, [r7, #20]
 8029a80:	f023 0302 	bic.w	r3, r3, #2
 8029a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8029a86:	683b      	ldr	r3, [r7, #0]
 8029a88:	689b      	ldr	r3, [r3, #8]
 8029a8a:	697a      	ldr	r2, [r7, #20]
 8029a8c:	4313      	orrs	r3, r2
 8029a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8029a90:	687b      	ldr	r3, [r7, #4]
 8029a92:	4a20      	ldr	r2, [pc, #128]	; (8029b14 <TIM_OC1_SetConfig+0xd8>)
 8029a94:	4293      	cmp	r3, r2
 8029a96:	d003      	beq.n	8029aa0 <TIM_OC1_SetConfig+0x64>
 8029a98:	687b      	ldr	r3, [r7, #4]
 8029a9a:	4a1f      	ldr	r2, [pc, #124]	; (8029b18 <TIM_OC1_SetConfig+0xdc>)
 8029a9c:	4293      	cmp	r3, r2
 8029a9e:	d10c      	bne.n	8029aba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8029aa0:	697b      	ldr	r3, [r7, #20]
 8029aa2:	f023 0308 	bic.w	r3, r3, #8
 8029aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8029aa8:	683b      	ldr	r3, [r7, #0]
 8029aaa:	68db      	ldr	r3, [r3, #12]
 8029aac:	697a      	ldr	r2, [r7, #20]
 8029aae:	4313      	orrs	r3, r2
 8029ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8029ab2:	697b      	ldr	r3, [r7, #20]
 8029ab4:	f023 0304 	bic.w	r3, r3, #4
 8029ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029aba:	687b      	ldr	r3, [r7, #4]
 8029abc:	4a15      	ldr	r2, [pc, #84]	; (8029b14 <TIM_OC1_SetConfig+0xd8>)
 8029abe:	4293      	cmp	r3, r2
 8029ac0:	d003      	beq.n	8029aca <TIM_OC1_SetConfig+0x8e>
 8029ac2:	687b      	ldr	r3, [r7, #4]
 8029ac4:	4a14      	ldr	r2, [pc, #80]	; (8029b18 <TIM_OC1_SetConfig+0xdc>)
 8029ac6:	4293      	cmp	r3, r2
 8029ac8:	d111      	bne.n	8029aee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8029aca:	693b      	ldr	r3, [r7, #16]
 8029acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8029ad2:	693b      	ldr	r3, [r7, #16]
 8029ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8029ada:	683b      	ldr	r3, [r7, #0]
 8029adc:	695b      	ldr	r3, [r3, #20]
 8029ade:	693a      	ldr	r2, [r7, #16]
 8029ae0:	4313      	orrs	r3, r2
 8029ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8029ae4:	683b      	ldr	r3, [r7, #0]
 8029ae6:	699b      	ldr	r3, [r3, #24]
 8029ae8:	693a      	ldr	r2, [r7, #16]
 8029aea:	4313      	orrs	r3, r2
 8029aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029aee:	687b      	ldr	r3, [r7, #4]
 8029af0:	693a      	ldr	r2, [r7, #16]
 8029af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029af4:	687b      	ldr	r3, [r7, #4]
 8029af6:	68fa      	ldr	r2, [r7, #12]
 8029af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8029afa:	683b      	ldr	r3, [r7, #0]
 8029afc:	685a      	ldr	r2, [r3, #4]
 8029afe:	687b      	ldr	r3, [r7, #4]
 8029b00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029b02:	687b      	ldr	r3, [r7, #4]
 8029b04:	697a      	ldr	r2, [r7, #20]
 8029b06:	621a      	str	r2, [r3, #32]
}
 8029b08:	bf00      	nop
 8029b0a:	371c      	adds	r7, #28
 8029b0c:	46bd      	mov	sp, r7
 8029b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b12:	4770      	bx	lr
 8029b14:	40010000 	.word	0x40010000
 8029b18:	40010400 	.word	0x40010400

08029b1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029b1c:	b480      	push	{r7}
 8029b1e:	b087      	sub	sp, #28
 8029b20:	af00      	add	r7, sp, #0
 8029b22:	6078      	str	r0, [r7, #4]
 8029b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029b26:	687b      	ldr	r3, [r7, #4]
 8029b28:	6a1b      	ldr	r3, [r3, #32]
 8029b2a:	f023 0210 	bic.w	r2, r3, #16
 8029b2e:	687b      	ldr	r3, [r7, #4]
 8029b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029b32:	687b      	ldr	r3, [r7, #4]
 8029b34:	6a1b      	ldr	r3, [r3, #32]
 8029b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029b38:	687b      	ldr	r3, [r7, #4]
 8029b3a:	685b      	ldr	r3, [r3, #4]
 8029b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029b3e:	687b      	ldr	r3, [r7, #4]
 8029b40:	699b      	ldr	r3, [r3, #24]
 8029b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8029b44:	68fb      	ldr	r3, [r7, #12]
 8029b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8029b4c:	68fb      	ldr	r3, [r7, #12]
 8029b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029b54:	683b      	ldr	r3, [r7, #0]
 8029b56:	681b      	ldr	r3, [r3, #0]
 8029b58:	021b      	lsls	r3, r3, #8
 8029b5a:	68fa      	ldr	r2, [r7, #12]
 8029b5c:	4313      	orrs	r3, r2
 8029b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8029b60:	697b      	ldr	r3, [r7, #20]
 8029b62:	f023 0320 	bic.w	r3, r3, #32
 8029b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8029b68:	683b      	ldr	r3, [r7, #0]
 8029b6a:	689b      	ldr	r3, [r3, #8]
 8029b6c:	011b      	lsls	r3, r3, #4
 8029b6e:	697a      	ldr	r2, [r7, #20]
 8029b70:	4313      	orrs	r3, r2
 8029b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8029b74:	687b      	ldr	r3, [r7, #4]
 8029b76:	4a22      	ldr	r2, [pc, #136]	; (8029c00 <TIM_OC2_SetConfig+0xe4>)
 8029b78:	4293      	cmp	r3, r2
 8029b7a:	d003      	beq.n	8029b84 <TIM_OC2_SetConfig+0x68>
 8029b7c:	687b      	ldr	r3, [r7, #4]
 8029b7e:	4a21      	ldr	r2, [pc, #132]	; (8029c04 <TIM_OC2_SetConfig+0xe8>)
 8029b80:	4293      	cmp	r3, r2
 8029b82:	d10d      	bne.n	8029ba0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8029b84:	697b      	ldr	r3, [r7, #20]
 8029b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8029b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8029b8c:	683b      	ldr	r3, [r7, #0]
 8029b8e:	68db      	ldr	r3, [r3, #12]
 8029b90:	011b      	lsls	r3, r3, #4
 8029b92:	697a      	ldr	r2, [r7, #20]
 8029b94:	4313      	orrs	r3, r2
 8029b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8029b98:	697b      	ldr	r3, [r7, #20]
 8029b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029b9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029ba0:	687b      	ldr	r3, [r7, #4]
 8029ba2:	4a17      	ldr	r2, [pc, #92]	; (8029c00 <TIM_OC2_SetConfig+0xe4>)
 8029ba4:	4293      	cmp	r3, r2
 8029ba6:	d003      	beq.n	8029bb0 <TIM_OC2_SetConfig+0x94>
 8029ba8:	687b      	ldr	r3, [r7, #4]
 8029baa:	4a16      	ldr	r2, [pc, #88]	; (8029c04 <TIM_OC2_SetConfig+0xe8>)
 8029bac:	4293      	cmp	r3, r2
 8029bae:	d113      	bne.n	8029bd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8029bb0:	693b      	ldr	r3, [r7, #16]
 8029bb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8029bb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8029bb8:	693b      	ldr	r3, [r7, #16]
 8029bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8029bc0:	683b      	ldr	r3, [r7, #0]
 8029bc2:	695b      	ldr	r3, [r3, #20]
 8029bc4:	009b      	lsls	r3, r3, #2
 8029bc6:	693a      	ldr	r2, [r7, #16]
 8029bc8:	4313      	orrs	r3, r2
 8029bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8029bcc:	683b      	ldr	r3, [r7, #0]
 8029bce:	699b      	ldr	r3, [r3, #24]
 8029bd0:	009b      	lsls	r3, r3, #2
 8029bd2:	693a      	ldr	r2, [r7, #16]
 8029bd4:	4313      	orrs	r3, r2
 8029bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029bd8:	687b      	ldr	r3, [r7, #4]
 8029bda:	693a      	ldr	r2, [r7, #16]
 8029bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029bde:	687b      	ldr	r3, [r7, #4]
 8029be0:	68fa      	ldr	r2, [r7, #12]
 8029be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8029be4:	683b      	ldr	r3, [r7, #0]
 8029be6:	685a      	ldr	r2, [r3, #4]
 8029be8:	687b      	ldr	r3, [r7, #4]
 8029bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029bec:	687b      	ldr	r3, [r7, #4]
 8029bee:	697a      	ldr	r2, [r7, #20]
 8029bf0:	621a      	str	r2, [r3, #32]
}
 8029bf2:	bf00      	nop
 8029bf4:	371c      	adds	r7, #28
 8029bf6:	46bd      	mov	sp, r7
 8029bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bfc:	4770      	bx	lr
 8029bfe:	bf00      	nop
 8029c00:	40010000 	.word	0x40010000
 8029c04:	40010400 	.word	0x40010400

08029c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029c08:	b480      	push	{r7}
 8029c0a:	b087      	sub	sp, #28
 8029c0c:	af00      	add	r7, sp, #0
 8029c0e:	6078      	str	r0, [r7, #4]
 8029c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8029c12:	687b      	ldr	r3, [r7, #4]
 8029c14:	6a1b      	ldr	r3, [r3, #32]
 8029c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8029c1a:	687b      	ldr	r3, [r7, #4]
 8029c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029c1e:	687b      	ldr	r3, [r7, #4]
 8029c20:	6a1b      	ldr	r3, [r3, #32]
 8029c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029c24:	687b      	ldr	r3, [r7, #4]
 8029c26:	685b      	ldr	r3, [r3, #4]
 8029c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8029c2a:	687b      	ldr	r3, [r7, #4]
 8029c2c:	69db      	ldr	r3, [r3, #28]
 8029c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8029c30:	68fb      	ldr	r3, [r7, #12]
 8029c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8029c38:	68fb      	ldr	r3, [r7, #12]
 8029c3a:	f023 0303 	bic.w	r3, r3, #3
 8029c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029c40:	683b      	ldr	r3, [r7, #0]
 8029c42:	681b      	ldr	r3, [r3, #0]
 8029c44:	68fa      	ldr	r2, [r7, #12]
 8029c46:	4313      	orrs	r3, r2
 8029c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8029c4a:	697b      	ldr	r3, [r7, #20]
 8029c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8029c52:	683b      	ldr	r3, [r7, #0]
 8029c54:	689b      	ldr	r3, [r3, #8]
 8029c56:	021b      	lsls	r3, r3, #8
 8029c58:	697a      	ldr	r2, [r7, #20]
 8029c5a:	4313      	orrs	r3, r2
 8029c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8029c5e:	687b      	ldr	r3, [r7, #4]
 8029c60:	4a21      	ldr	r2, [pc, #132]	; (8029ce8 <TIM_OC3_SetConfig+0xe0>)
 8029c62:	4293      	cmp	r3, r2
 8029c64:	d003      	beq.n	8029c6e <TIM_OC3_SetConfig+0x66>
 8029c66:	687b      	ldr	r3, [r7, #4]
 8029c68:	4a20      	ldr	r2, [pc, #128]	; (8029cec <TIM_OC3_SetConfig+0xe4>)
 8029c6a:	4293      	cmp	r3, r2
 8029c6c:	d10d      	bne.n	8029c8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8029c6e:	697b      	ldr	r3, [r7, #20]
 8029c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8029c76:	683b      	ldr	r3, [r7, #0]
 8029c78:	68db      	ldr	r3, [r3, #12]
 8029c7a:	021b      	lsls	r3, r3, #8
 8029c7c:	697a      	ldr	r2, [r7, #20]
 8029c7e:	4313      	orrs	r3, r2
 8029c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8029c82:	697b      	ldr	r3, [r7, #20]
 8029c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8029c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029c8a:	687b      	ldr	r3, [r7, #4]
 8029c8c:	4a16      	ldr	r2, [pc, #88]	; (8029ce8 <TIM_OC3_SetConfig+0xe0>)
 8029c8e:	4293      	cmp	r3, r2
 8029c90:	d003      	beq.n	8029c9a <TIM_OC3_SetConfig+0x92>
 8029c92:	687b      	ldr	r3, [r7, #4]
 8029c94:	4a15      	ldr	r2, [pc, #84]	; (8029cec <TIM_OC3_SetConfig+0xe4>)
 8029c96:	4293      	cmp	r3, r2
 8029c98:	d113      	bne.n	8029cc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8029c9a:	693b      	ldr	r3, [r7, #16]
 8029c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8029ca2:	693b      	ldr	r3, [r7, #16]
 8029ca4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8029ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8029caa:	683b      	ldr	r3, [r7, #0]
 8029cac:	695b      	ldr	r3, [r3, #20]
 8029cae:	011b      	lsls	r3, r3, #4
 8029cb0:	693a      	ldr	r2, [r7, #16]
 8029cb2:	4313      	orrs	r3, r2
 8029cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8029cb6:	683b      	ldr	r3, [r7, #0]
 8029cb8:	699b      	ldr	r3, [r3, #24]
 8029cba:	011b      	lsls	r3, r3, #4
 8029cbc:	693a      	ldr	r2, [r7, #16]
 8029cbe:	4313      	orrs	r3, r2
 8029cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029cc2:	687b      	ldr	r3, [r7, #4]
 8029cc4:	693a      	ldr	r2, [r7, #16]
 8029cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8029cc8:	687b      	ldr	r3, [r7, #4]
 8029cca:	68fa      	ldr	r2, [r7, #12]
 8029ccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8029cce:	683b      	ldr	r3, [r7, #0]
 8029cd0:	685a      	ldr	r2, [r3, #4]
 8029cd2:	687b      	ldr	r3, [r7, #4]
 8029cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029cd6:	687b      	ldr	r3, [r7, #4]
 8029cd8:	697a      	ldr	r2, [r7, #20]
 8029cda:	621a      	str	r2, [r3, #32]
}
 8029cdc:	bf00      	nop
 8029cde:	371c      	adds	r7, #28
 8029ce0:	46bd      	mov	sp, r7
 8029ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ce6:	4770      	bx	lr
 8029ce8:	40010000 	.word	0x40010000
 8029cec:	40010400 	.word	0x40010400

08029cf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029cf0:	b480      	push	{r7}
 8029cf2:	b087      	sub	sp, #28
 8029cf4:	af00      	add	r7, sp, #0
 8029cf6:	6078      	str	r0, [r7, #4]
 8029cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8029cfa:	687b      	ldr	r3, [r7, #4]
 8029cfc:	6a1b      	ldr	r3, [r3, #32]
 8029cfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8029d02:	687b      	ldr	r3, [r7, #4]
 8029d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029d06:	687b      	ldr	r3, [r7, #4]
 8029d08:	6a1b      	ldr	r3, [r3, #32]
 8029d0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029d0c:	687b      	ldr	r3, [r7, #4]
 8029d0e:	685b      	ldr	r3, [r3, #4]
 8029d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8029d12:	687b      	ldr	r3, [r7, #4]
 8029d14:	69db      	ldr	r3, [r3, #28]
 8029d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8029d18:	68fb      	ldr	r3, [r7, #12]
 8029d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8029d20:	68fb      	ldr	r3, [r7, #12]
 8029d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029d28:	683b      	ldr	r3, [r7, #0]
 8029d2a:	681b      	ldr	r3, [r3, #0]
 8029d2c:	021b      	lsls	r3, r3, #8
 8029d2e:	68fa      	ldr	r2, [r7, #12]
 8029d30:	4313      	orrs	r3, r2
 8029d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8029d34:	693b      	ldr	r3, [r7, #16]
 8029d36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8029d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8029d3c:	683b      	ldr	r3, [r7, #0]
 8029d3e:	689b      	ldr	r3, [r3, #8]
 8029d40:	031b      	lsls	r3, r3, #12
 8029d42:	693a      	ldr	r2, [r7, #16]
 8029d44:	4313      	orrs	r3, r2
 8029d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029d48:	687b      	ldr	r3, [r7, #4]
 8029d4a:	4a12      	ldr	r2, [pc, #72]	; (8029d94 <TIM_OC4_SetConfig+0xa4>)
 8029d4c:	4293      	cmp	r3, r2
 8029d4e:	d003      	beq.n	8029d58 <TIM_OC4_SetConfig+0x68>
 8029d50:	687b      	ldr	r3, [r7, #4]
 8029d52:	4a11      	ldr	r2, [pc, #68]	; (8029d98 <TIM_OC4_SetConfig+0xa8>)
 8029d54:	4293      	cmp	r3, r2
 8029d56:	d109      	bne.n	8029d6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8029d58:	697b      	ldr	r3, [r7, #20]
 8029d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8029d60:	683b      	ldr	r3, [r7, #0]
 8029d62:	695b      	ldr	r3, [r3, #20]
 8029d64:	019b      	lsls	r3, r3, #6
 8029d66:	697a      	ldr	r2, [r7, #20]
 8029d68:	4313      	orrs	r3, r2
 8029d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029d6c:	687b      	ldr	r3, [r7, #4]
 8029d6e:	697a      	ldr	r2, [r7, #20]
 8029d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8029d72:	687b      	ldr	r3, [r7, #4]
 8029d74:	68fa      	ldr	r2, [r7, #12]
 8029d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8029d78:	683b      	ldr	r3, [r7, #0]
 8029d7a:	685a      	ldr	r2, [r3, #4]
 8029d7c:	687b      	ldr	r3, [r7, #4]
 8029d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029d80:	687b      	ldr	r3, [r7, #4]
 8029d82:	693a      	ldr	r2, [r7, #16]
 8029d84:	621a      	str	r2, [r3, #32]
}
 8029d86:	bf00      	nop
 8029d88:	371c      	adds	r7, #28
 8029d8a:	46bd      	mov	sp, r7
 8029d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d90:	4770      	bx	lr
 8029d92:	bf00      	nop
 8029d94:	40010000 	.word	0x40010000
 8029d98:	40010400 	.word	0x40010400

08029d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029d9c:	b480      	push	{r7}
 8029d9e:	b087      	sub	sp, #28
 8029da0:	af00      	add	r7, sp, #0
 8029da2:	60f8      	str	r0, [r7, #12]
 8029da4:	60b9      	str	r1, [r7, #8]
 8029da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8029da8:	68fb      	ldr	r3, [r7, #12]
 8029daa:	6a1b      	ldr	r3, [r3, #32]
 8029dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029dae:	68fb      	ldr	r3, [r7, #12]
 8029db0:	6a1b      	ldr	r3, [r3, #32]
 8029db2:	f023 0201 	bic.w	r2, r3, #1
 8029db6:	68fb      	ldr	r3, [r7, #12]
 8029db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029dba:	68fb      	ldr	r3, [r7, #12]
 8029dbc:	699b      	ldr	r3, [r3, #24]
 8029dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8029dc0:	693b      	ldr	r3, [r7, #16]
 8029dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8029dc8:	687b      	ldr	r3, [r7, #4]
 8029dca:	011b      	lsls	r3, r3, #4
 8029dcc:	693a      	ldr	r2, [r7, #16]
 8029dce:	4313      	orrs	r3, r2
 8029dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8029dd2:	697b      	ldr	r3, [r7, #20]
 8029dd4:	f023 030a 	bic.w	r3, r3, #10
 8029dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8029dda:	697a      	ldr	r2, [r7, #20]
 8029ddc:	68bb      	ldr	r3, [r7, #8]
 8029dde:	4313      	orrs	r3, r2
 8029de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8029de2:	68fb      	ldr	r3, [r7, #12]
 8029de4:	693a      	ldr	r2, [r7, #16]
 8029de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029de8:	68fb      	ldr	r3, [r7, #12]
 8029dea:	697a      	ldr	r2, [r7, #20]
 8029dec:	621a      	str	r2, [r3, #32]
}
 8029dee:	bf00      	nop
 8029df0:	371c      	adds	r7, #28
 8029df2:	46bd      	mov	sp, r7
 8029df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029df8:	4770      	bx	lr

08029dfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029dfa:	b480      	push	{r7}
 8029dfc:	b087      	sub	sp, #28
 8029dfe:	af00      	add	r7, sp, #0
 8029e00:	60f8      	str	r0, [r7, #12]
 8029e02:	60b9      	str	r1, [r7, #8]
 8029e04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029e06:	68fb      	ldr	r3, [r7, #12]
 8029e08:	6a1b      	ldr	r3, [r3, #32]
 8029e0a:	f023 0210 	bic.w	r2, r3, #16
 8029e0e:	68fb      	ldr	r3, [r7, #12]
 8029e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029e12:	68fb      	ldr	r3, [r7, #12]
 8029e14:	699b      	ldr	r3, [r3, #24]
 8029e16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029e18:	68fb      	ldr	r3, [r7, #12]
 8029e1a:	6a1b      	ldr	r3, [r3, #32]
 8029e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8029e1e:	697b      	ldr	r3, [r7, #20]
 8029e20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029e24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8029e26:	687b      	ldr	r3, [r7, #4]
 8029e28:	031b      	lsls	r3, r3, #12
 8029e2a:	697a      	ldr	r2, [r7, #20]
 8029e2c:	4313      	orrs	r3, r2
 8029e2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8029e30:	693b      	ldr	r3, [r7, #16]
 8029e32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8029e36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8029e38:	68bb      	ldr	r3, [r7, #8]
 8029e3a:	011b      	lsls	r3, r3, #4
 8029e3c:	693a      	ldr	r2, [r7, #16]
 8029e3e:	4313      	orrs	r3, r2
 8029e40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8029e42:	68fb      	ldr	r3, [r7, #12]
 8029e44:	697a      	ldr	r2, [r7, #20]
 8029e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029e48:	68fb      	ldr	r3, [r7, #12]
 8029e4a:	693a      	ldr	r2, [r7, #16]
 8029e4c:	621a      	str	r2, [r3, #32]
}
 8029e4e:	bf00      	nop
 8029e50:	371c      	adds	r7, #28
 8029e52:	46bd      	mov	sp, r7
 8029e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e58:	4770      	bx	lr

08029e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8029e5a:	b480      	push	{r7}
 8029e5c:	b085      	sub	sp, #20
 8029e5e:	af00      	add	r7, sp, #0
 8029e60:	6078      	str	r0, [r7, #4]
 8029e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8029e64:	687b      	ldr	r3, [r7, #4]
 8029e66:	689b      	ldr	r3, [r3, #8]
 8029e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8029e6a:	68fb      	ldr	r3, [r7, #12]
 8029e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8029e72:	683a      	ldr	r2, [r7, #0]
 8029e74:	68fb      	ldr	r3, [r7, #12]
 8029e76:	4313      	orrs	r3, r2
 8029e78:	f043 0307 	orr.w	r3, r3, #7
 8029e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8029e7e:	687b      	ldr	r3, [r7, #4]
 8029e80:	68fa      	ldr	r2, [r7, #12]
 8029e82:	609a      	str	r2, [r3, #8]
}
 8029e84:	bf00      	nop
 8029e86:	3714      	adds	r7, #20
 8029e88:	46bd      	mov	sp, r7
 8029e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e8e:	4770      	bx	lr

08029e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8029e90:	b480      	push	{r7}
 8029e92:	b087      	sub	sp, #28
 8029e94:	af00      	add	r7, sp, #0
 8029e96:	60f8      	str	r0, [r7, #12]
 8029e98:	60b9      	str	r1, [r7, #8]
 8029e9a:	607a      	str	r2, [r7, #4]
 8029e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8029e9e:	68fb      	ldr	r3, [r7, #12]
 8029ea0:	689b      	ldr	r3, [r3, #8]
 8029ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029ea4:	697b      	ldr	r3, [r7, #20]
 8029ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8029eac:	683b      	ldr	r3, [r7, #0]
 8029eae:	021a      	lsls	r2, r3, #8
 8029eb0:	687b      	ldr	r3, [r7, #4]
 8029eb2:	431a      	orrs	r2, r3
 8029eb4:	68bb      	ldr	r3, [r7, #8]
 8029eb6:	4313      	orrs	r3, r2
 8029eb8:	697a      	ldr	r2, [r7, #20]
 8029eba:	4313      	orrs	r3, r2
 8029ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8029ebe:	68fb      	ldr	r3, [r7, #12]
 8029ec0:	697a      	ldr	r2, [r7, #20]
 8029ec2:	609a      	str	r2, [r3, #8]
}
 8029ec4:	bf00      	nop
 8029ec6:	371c      	adds	r7, #28
 8029ec8:	46bd      	mov	sp, r7
 8029eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ece:	4770      	bx	lr

08029ed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8029ed0:	b480      	push	{r7}
 8029ed2:	b087      	sub	sp, #28
 8029ed4:	af00      	add	r7, sp, #0
 8029ed6:	60f8      	str	r0, [r7, #12]
 8029ed8:	60b9      	str	r1, [r7, #8]
 8029eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8029edc:	68bb      	ldr	r3, [r7, #8]
 8029ede:	f003 031f 	and.w	r3, r3, #31
 8029ee2:	2201      	movs	r2, #1
 8029ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8029ee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8029eea:	68fb      	ldr	r3, [r7, #12]
 8029eec:	6a1a      	ldr	r2, [r3, #32]
 8029eee:	697b      	ldr	r3, [r7, #20]
 8029ef0:	43db      	mvns	r3, r3
 8029ef2:	401a      	ands	r2, r3
 8029ef4:	68fb      	ldr	r3, [r7, #12]
 8029ef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8029ef8:	68fb      	ldr	r3, [r7, #12]
 8029efa:	6a1a      	ldr	r2, [r3, #32]
 8029efc:	68bb      	ldr	r3, [r7, #8]
 8029efe:	f003 031f 	and.w	r3, r3, #31
 8029f02:	6879      	ldr	r1, [r7, #4]
 8029f04:	fa01 f303 	lsl.w	r3, r1, r3
 8029f08:	431a      	orrs	r2, r3
 8029f0a:	68fb      	ldr	r3, [r7, #12]
 8029f0c:	621a      	str	r2, [r3, #32]
}
 8029f0e:	bf00      	nop
 8029f10:	371c      	adds	r7, #28
 8029f12:	46bd      	mov	sp, r7
 8029f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f18:	4770      	bx	lr
	...

08029f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8029f1c:	b480      	push	{r7}
 8029f1e:	b085      	sub	sp, #20
 8029f20:	af00      	add	r7, sp, #0
 8029f22:	6078      	str	r0, [r7, #4]
 8029f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8029f26:	687b      	ldr	r3, [r7, #4]
 8029f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029f2c:	2b01      	cmp	r3, #1
 8029f2e:	d101      	bne.n	8029f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8029f30:	2302      	movs	r3, #2
 8029f32:	e05a      	b.n	8029fea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8029f34:	687b      	ldr	r3, [r7, #4]
 8029f36:	2201      	movs	r2, #1
 8029f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029f3c:	687b      	ldr	r3, [r7, #4]
 8029f3e:	2202      	movs	r2, #2
 8029f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8029f44:	687b      	ldr	r3, [r7, #4]
 8029f46:	681b      	ldr	r3, [r3, #0]
 8029f48:	685b      	ldr	r3, [r3, #4]
 8029f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8029f4c:	687b      	ldr	r3, [r7, #4]
 8029f4e:	681b      	ldr	r3, [r3, #0]
 8029f50:	689b      	ldr	r3, [r3, #8]
 8029f52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8029f54:	68fb      	ldr	r3, [r7, #12]
 8029f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029f5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8029f5c:	683b      	ldr	r3, [r7, #0]
 8029f5e:	681b      	ldr	r3, [r3, #0]
 8029f60:	68fa      	ldr	r2, [r7, #12]
 8029f62:	4313      	orrs	r3, r2
 8029f64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8029f66:	687b      	ldr	r3, [r7, #4]
 8029f68:	681b      	ldr	r3, [r3, #0]
 8029f6a:	68fa      	ldr	r2, [r7, #12]
 8029f6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8029f6e:	687b      	ldr	r3, [r7, #4]
 8029f70:	681b      	ldr	r3, [r3, #0]
 8029f72:	4a21      	ldr	r2, [pc, #132]	; (8029ff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8029f74:	4293      	cmp	r3, r2
 8029f76:	d022      	beq.n	8029fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029f78:	687b      	ldr	r3, [r7, #4]
 8029f7a:	681b      	ldr	r3, [r3, #0]
 8029f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029f80:	d01d      	beq.n	8029fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029f82:	687b      	ldr	r3, [r7, #4]
 8029f84:	681b      	ldr	r3, [r3, #0]
 8029f86:	4a1d      	ldr	r2, [pc, #116]	; (8029ffc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8029f88:	4293      	cmp	r3, r2
 8029f8a:	d018      	beq.n	8029fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029f8c:	687b      	ldr	r3, [r7, #4]
 8029f8e:	681b      	ldr	r3, [r3, #0]
 8029f90:	4a1b      	ldr	r2, [pc, #108]	; (802a000 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8029f92:	4293      	cmp	r3, r2
 8029f94:	d013      	beq.n	8029fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029f96:	687b      	ldr	r3, [r7, #4]
 8029f98:	681b      	ldr	r3, [r3, #0]
 8029f9a:	4a1a      	ldr	r2, [pc, #104]	; (802a004 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8029f9c:	4293      	cmp	r3, r2
 8029f9e:	d00e      	beq.n	8029fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029fa0:	687b      	ldr	r3, [r7, #4]
 8029fa2:	681b      	ldr	r3, [r3, #0]
 8029fa4:	4a18      	ldr	r2, [pc, #96]	; (802a008 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8029fa6:	4293      	cmp	r3, r2
 8029fa8:	d009      	beq.n	8029fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029faa:	687b      	ldr	r3, [r7, #4]
 8029fac:	681b      	ldr	r3, [r3, #0]
 8029fae:	4a17      	ldr	r2, [pc, #92]	; (802a00c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8029fb0:	4293      	cmp	r3, r2
 8029fb2:	d004      	beq.n	8029fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029fb4:	687b      	ldr	r3, [r7, #4]
 8029fb6:	681b      	ldr	r3, [r3, #0]
 8029fb8:	4a15      	ldr	r2, [pc, #84]	; (802a010 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8029fba:	4293      	cmp	r3, r2
 8029fbc:	d10c      	bne.n	8029fd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8029fbe:	68bb      	ldr	r3, [r7, #8]
 8029fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8029fc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8029fc6:	683b      	ldr	r3, [r7, #0]
 8029fc8:	685b      	ldr	r3, [r3, #4]
 8029fca:	68ba      	ldr	r2, [r7, #8]
 8029fcc:	4313      	orrs	r3, r2
 8029fce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8029fd0:	687b      	ldr	r3, [r7, #4]
 8029fd2:	681b      	ldr	r3, [r3, #0]
 8029fd4:	68ba      	ldr	r2, [r7, #8]
 8029fd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8029fd8:	687b      	ldr	r3, [r7, #4]
 8029fda:	2201      	movs	r2, #1
 8029fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029fe0:	687b      	ldr	r3, [r7, #4]
 8029fe2:	2200      	movs	r2, #0
 8029fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029fe8:	2300      	movs	r3, #0
}
 8029fea:	4618      	mov	r0, r3
 8029fec:	3714      	adds	r7, #20
 8029fee:	46bd      	mov	sp, r7
 8029ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ff4:	4770      	bx	lr
 8029ff6:	bf00      	nop
 8029ff8:	40010000 	.word	0x40010000
 8029ffc:	40000400 	.word	0x40000400
 802a000:	40000800 	.word	0x40000800
 802a004:	40000c00 	.word	0x40000c00
 802a008:	40010400 	.word	0x40010400
 802a00c:	40014000 	.word	0x40014000
 802a010:	40001800 	.word	0x40001800

0802a014 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 802a014:	b480      	push	{r7}
 802a016:	b085      	sub	sp, #20
 802a018:	af00      	add	r7, sp, #0
 802a01a:	6078      	str	r0, [r7, #4]
 802a01c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802a01e:	2300      	movs	r3, #0
 802a020:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 802a022:	687b      	ldr	r3, [r7, #4]
 802a024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a028:	2b01      	cmp	r3, #1
 802a02a:	d101      	bne.n	802a030 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 802a02c:	2302      	movs	r3, #2
 802a02e:	e03d      	b.n	802a0ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 802a030:	687b      	ldr	r3, [r7, #4]
 802a032:	2201      	movs	r2, #1
 802a034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 802a038:	68fb      	ldr	r3, [r7, #12]
 802a03a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802a03e:	683b      	ldr	r3, [r7, #0]
 802a040:	68db      	ldr	r3, [r3, #12]
 802a042:	4313      	orrs	r3, r2
 802a044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 802a046:	68fb      	ldr	r3, [r7, #12]
 802a048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 802a04c:	683b      	ldr	r3, [r7, #0]
 802a04e:	689b      	ldr	r3, [r3, #8]
 802a050:	4313      	orrs	r3, r2
 802a052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 802a054:	68fb      	ldr	r3, [r7, #12]
 802a056:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 802a05a:	683b      	ldr	r3, [r7, #0]
 802a05c:	685b      	ldr	r3, [r3, #4]
 802a05e:	4313      	orrs	r3, r2
 802a060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 802a062:	68fb      	ldr	r3, [r7, #12]
 802a064:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 802a068:	683b      	ldr	r3, [r7, #0]
 802a06a:	681b      	ldr	r3, [r3, #0]
 802a06c:	4313      	orrs	r3, r2
 802a06e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 802a070:	68fb      	ldr	r3, [r7, #12]
 802a072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a076:	683b      	ldr	r3, [r7, #0]
 802a078:	691b      	ldr	r3, [r3, #16]
 802a07a:	4313      	orrs	r3, r2
 802a07c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 802a07e:	68fb      	ldr	r3, [r7, #12]
 802a080:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 802a084:	683b      	ldr	r3, [r7, #0]
 802a086:	695b      	ldr	r3, [r3, #20]
 802a088:	4313      	orrs	r3, r2
 802a08a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 802a08c:	68fb      	ldr	r3, [r7, #12]
 802a08e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 802a092:	683b      	ldr	r3, [r7, #0]
 802a094:	69db      	ldr	r3, [r3, #28]
 802a096:	4313      	orrs	r3, r2
 802a098:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 802a09a:	687b      	ldr	r3, [r7, #4]
 802a09c:	681b      	ldr	r3, [r3, #0]
 802a09e:	68fa      	ldr	r2, [r7, #12]
 802a0a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 802a0a2:	687b      	ldr	r3, [r7, #4]
 802a0a4:	2200      	movs	r2, #0
 802a0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a0aa:	2300      	movs	r3, #0
}
 802a0ac:	4618      	mov	r0, r3
 802a0ae:	3714      	adds	r7, #20
 802a0b0:	46bd      	mov	sp, r7
 802a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0b6:	4770      	bx	lr

0802a0b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802a0b8:	b480      	push	{r7}
 802a0ba:	b083      	sub	sp, #12
 802a0bc:	af00      	add	r7, sp, #0
 802a0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802a0c0:	bf00      	nop
 802a0c2:	370c      	adds	r7, #12
 802a0c4:	46bd      	mov	sp, r7
 802a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0ca:	4770      	bx	lr

0802a0cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802a0cc:	b480      	push	{r7}
 802a0ce:	b083      	sub	sp, #12
 802a0d0:	af00      	add	r7, sp, #0
 802a0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802a0d4:	bf00      	nop
 802a0d6:	370c      	adds	r7, #12
 802a0d8:	46bd      	mov	sp, r7
 802a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0de:	4770      	bx	lr

0802a0e0 <__cxa_guard_acquire>:
 802a0e0:	6803      	ldr	r3, [r0, #0]
 802a0e2:	07db      	lsls	r3, r3, #31
 802a0e4:	d406      	bmi.n	802a0f4 <__cxa_guard_acquire+0x14>
 802a0e6:	7843      	ldrb	r3, [r0, #1]
 802a0e8:	b103      	cbz	r3, 802a0ec <__cxa_guard_acquire+0xc>
 802a0ea:	deff      	udf	#255	; 0xff
 802a0ec:	2301      	movs	r3, #1
 802a0ee:	7043      	strb	r3, [r0, #1]
 802a0f0:	4618      	mov	r0, r3
 802a0f2:	4770      	bx	lr
 802a0f4:	2000      	movs	r0, #0
 802a0f6:	4770      	bx	lr

0802a0f8 <__cxa_guard_release>:
 802a0f8:	2301      	movs	r3, #1
 802a0fa:	6003      	str	r3, [r0, #0]
 802a0fc:	4770      	bx	lr
	...

0802a100 <__libc_init_array>:
 802a100:	b570      	push	{r4, r5, r6, lr}
 802a102:	4e0d      	ldr	r6, [pc, #52]	; (802a138 <__libc_init_array+0x38>)
 802a104:	4c0d      	ldr	r4, [pc, #52]	; (802a13c <__libc_init_array+0x3c>)
 802a106:	1ba4      	subs	r4, r4, r6
 802a108:	10a4      	asrs	r4, r4, #2
 802a10a:	2500      	movs	r5, #0
 802a10c:	42a5      	cmp	r5, r4
 802a10e:	d109      	bne.n	802a124 <__libc_init_array+0x24>
 802a110:	4e0b      	ldr	r6, [pc, #44]	; (802a140 <__libc_init_array+0x40>)
 802a112:	4c0c      	ldr	r4, [pc, #48]	; (802a144 <__libc_init_array+0x44>)
 802a114:	f000 f82c 	bl	802a170 <_init>
 802a118:	1ba4      	subs	r4, r4, r6
 802a11a:	10a4      	asrs	r4, r4, #2
 802a11c:	2500      	movs	r5, #0
 802a11e:	42a5      	cmp	r5, r4
 802a120:	d105      	bne.n	802a12e <__libc_init_array+0x2e>
 802a122:	bd70      	pop	{r4, r5, r6, pc}
 802a124:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a128:	4798      	blx	r3
 802a12a:	3501      	adds	r5, #1
 802a12c:	e7ee      	b.n	802a10c <__libc_init_array+0xc>
 802a12e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a132:	4798      	blx	r3
 802a134:	3501      	adds	r5, #1
 802a136:	e7f2      	b.n	802a11e <__libc_init_array+0x1e>
 802a138:	0802a1a8 	.word	0x0802a1a8
 802a13c:	0802a1a8 	.word	0x0802a1a8
 802a140:	0802a1a8 	.word	0x0802a1a8
 802a144:	0802a1b0 	.word	0x0802a1b0

0802a148 <memcpy>:
 802a148:	b510      	push	{r4, lr}
 802a14a:	1e43      	subs	r3, r0, #1
 802a14c:	440a      	add	r2, r1
 802a14e:	4291      	cmp	r1, r2
 802a150:	d100      	bne.n	802a154 <memcpy+0xc>
 802a152:	bd10      	pop	{r4, pc}
 802a154:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a158:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a15c:	e7f7      	b.n	802a14e <memcpy+0x6>

0802a15e <memset>:
 802a15e:	4402      	add	r2, r0
 802a160:	4603      	mov	r3, r0
 802a162:	4293      	cmp	r3, r2
 802a164:	d100      	bne.n	802a168 <memset+0xa>
 802a166:	4770      	bx	lr
 802a168:	f803 1b01 	strb.w	r1, [r3], #1
 802a16c:	e7f9      	b.n	802a162 <memset+0x4>
	...

0802a170 <_init>:
 802a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a172:	bf00      	nop
 802a174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a176:	bc08      	pop	{r3}
 802a178:	469e      	mov	lr, r3
 802a17a:	4770      	bx	lr

0802a17c <_fini>:
 802a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a17e:	bf00      	nop
 802a180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a182:	bc08      	pop	{r3}
 802a184:	469e      	mov	lr, r3
 802a186:	4770      	bx	lr
