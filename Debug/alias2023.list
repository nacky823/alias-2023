
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a30c  08020000  08020000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0802a30c  0802a30c  0002a30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a32c  0802a32c  00030020  2**0
                  CONTENTS
  4 .ARM          00000008  0802a32c  0802a32c  0002a32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a334  0802a334  00030020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a334  0802a334  0002a334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a33c  0802a33c  0002a33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0802a340  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c4  20000020  0802a360  00030020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200009e4  0802a360  000309e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026c67  00000000  00000000  00030050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004195  00000000  00000000  00056cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001630  00000000  00000000  0005ae50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001480  00000000  00000000  0005c480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000250be  00000000  00000000  0005d900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014158  00000000  00000000  000829be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb4fe  00000000  00000000  00096b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00162014  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e80  00000000  00000000  00162090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	20000020 	.word	0x20000020
 802001c:	00000000 	.word	0x00000000
 8020020:	0802a2f4 	.word	0x0802a2f4

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	20000024 	.word	0x20000024
 802003c:	0802a2f4 	.word	0x0802a2f4

08020040 <__aeabi_drsub>:
 8020040:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020044:	e002      	b.n	802004c <__adddf3>
 8020046:	bf00      	nop

08020048 <__aeabi_dsub>:
 8020048:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802004c <__adddf3>:
 802004c:	b530      	push	{r4, r5, lr}
 802004e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020052:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020056:	ea94 0f05 	teq	r4, r5
 802005a:	bf08      	it	eq
 802005c:	ea90 0f02 	teqeq	r0, r2
 8020060:	bf1f      	itttt	ne
 8020062:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020066:	ea55 0c02 	orrsne.w	ip, r5, r2
 802006a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802006e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020072:	f000 80e2 	beq.w	802023a <__adddf3+0x1ee>
 8020076:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802007a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802007e:	bfb8      	it	lt
 8020080:	426d      	neglt	r5, r5
 8020082:	dd0c      	ble.n	802009e <__adddf3+0x52>
 8020084:	442c      	add	r4, r5
 8020086:	ea80 0202 	eor.w	r2, r0, r2
 802008a:	ea81 0303 	eor.w	r3, r1, r3
 802008e:	ea82 0000 	eor.w	r0, r2, r0
 8020092:	ea83 0101 	eor.w	r1, r3, r1
 8020096:	ea80 0202 	eor.w	r2, r0, r2
 802009a:	ea81 0303 	eor.w	r3, r1, r3
 802009e:	2d36      	cmp	r5, #54	; 0x36
 80200a0:	bf88      	it	hi
 80200a2:	bd30      	pophi	{r4, r5, pc}
 80200a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80200a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80200ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80200b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80200b4:	d002      	beq.n	80200bc <__adddf3+0x70>
 80200b6:	4240      	negs	r0, r0
 80200b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80200bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80200c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80200c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80200c8:	d002      	beq.n	80200d0 <__adddf3+0x84>
 80200ca:	4252      	negs	r2, r2
 80200cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80200d0:	ea94 0f05 	teq	r4, r5
 80200d4:	f000 80a7 	beq.w	8020226 <__adddf3+0x1da>
 80200d8:	f1a4 0401 	sub.w	r4, r4, #1
 80200dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80200e0:	db0d      	blt.n	80200fe <__adddf3+0xb2>
 80200e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80200e6:	fa22 f205 	lsr.w	r2, r2, r5
 80200ea:	1880      	adds	r0, r0, r2
 80200ec:	f141 0100 	adc.w	r1, r1, #0
 80200f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80200f4:	1880      	adds	r0, r0, r2
 80200f6:	fa43 f305 	asr.w	r3, r3, r5
 80200fa:	4159      	adcs	r1, r3
 80200fc:	e00e      	b.n	802011c <__adddf3+0xd0>
 80200fe:	f1a5 0520 	sub.w	r5, r5, #32
 8020102:	f10e 0e20 	add.w	lr, lr, #32
 8020106:	2a01      	cmp	r2, #1
 8020108:	fa03 fc0e 	lsl.w	ip, r3, lr
 802010c:	bf28      	it	cs
 802010e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020112:	fa43 f305 	asr.w	r3, r3, r5
 8020116:	18c0      	adds	r0, r0, r3
 8020118:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802011c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020120:	d507      	bpl.n	8020132 <__adddf3+0xe6>
 8020122:	f04f 0e00 	mov.w	lr, #0
 8020126:	f1dc 0c00 	rsbs	ip, ip, #0
 802012a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802012e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020132:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020136:	d31b      	bcc.n	8020170 <__adddf3+0x124>
 8020138:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802013c:	d30c      	bcc.n	8020158 <__adddf3+0x10c>
 802013e:	0849      	lsrs	r1, r1, #1
 8020140:	ea5f 0030 	movs.w	r0, r0, rrx
 8020144:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020148:	f104 0401 	add.w	r4, r4, #1
 802014c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020150:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020154:	f080 809a 	bcs.w	802028c <__adddf3+0x240>
 8020158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802015c:	bf08      	it	eq
 802015e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020162:	f150 0000 	adcs.w	r0, r0, #0
 8020166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802016a:	ea41 0105 	orr.w	r1, r1, r5
 802016e:	bd30      	pop	{r4, r5, pc}
 8020170:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020174:	4140      	adcs	r0, r0
 8020176:	eb41 0101 	adc.w	r1, r1, r1
 802017a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802017e:	f1a4 0401 	sub.w	r4, r4, #1
 8020182:	d1e9      	bne.n	8020158 <__adddf3+0x10c>
 8020184:	f091 0f00 	teq	r1, #0
 8020188:	bf04      	itt	eq
 802018a:	4601      	moveq	r1, r0
 802018c:	2000      	moveq	r0, #0
 802018e:	fab1 f381 	clz	r3, r1
 8020192:	bf08      	it	eq
 8020194:	3320      	addeq	r3, #32
 8020196:	f1a3 030b 	sub.w	r3, r3, #11
 802019a:	f1b3 0220 	subs.w	r2, r3, #32
 802019e:	da0c      	bge.n	80201ba <__adddf3+0x16e>
 80201a0:	320c      	adds	r2, #12
 80201a2:	dd08      	ble.n	80201b6 <__adddf3+0x16a>
 80201a4:	f102 0c14 	add.w	ip, r2, #20
 80201a8:	f1c2 020c 	rsb	r2, r2, #12
 80201ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80201b0:	fa21 f102 	lsr.w	r1, r1, r2
 80201b4:	e00c      	b.n	80201d0 <__adddf3+0x184>
 80201b6:	f102 0214 	add.w	r2, r2, #20
 80201ba:	bfd8      	it	le
 80201bc:	f1c2 0c20 	rsble	ip, r2, #32
 80201c0:	fa01 f102 	lsl.w	r1, r1, r2
 80201c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80201c8:	bfdc      	itt	le
 80201ca:	ea41 010c 	orrle.w	r1, r1, ip
 80201ce:	4090      	lslle	r0, r2
 80201d0:	1ae4      	subs	r4, r4, r3
 80201d2:	bfa2      	ittt	ge
 80201d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80201d8:	4329      	orrge	r1, r5
 80201da:	bd30      	popge	{r4, r5, pc}
 80201dc:	ea6f 0404 	mvn.w	r4, r4
 80201e0:	3c1f      	subs	r4, #31
 80201e2:	da1c      	bge.n	802021e <__adddf3+0x1d2>
 80201e4:	340c      	adds	r4, #12
 80201e6:	dc0e      	bgt.n	8020206 <__adddf3+0x1ba>
 80201e8:	f104 0414 	add.w	r4, r4, #20
 80201ec:	f1c4 0220 	rsb	r2, r4, #32
 80201f0:	fa20 f004 	lsr.w	r0, r0, r4
 80201f4:	fa01 f302 	lsl.w	r3, r1, r2
 80201f8:	ea40 0003 	orr.w	r0, r0, r3
 80201fc:	fa21 f304 	lsr.w	r3, r1, r4
 8020200:	ea45 0103 	orr.w	r1, r5, r3
 8020204:	bd30      	pop	{r4, r5, pc}
 8020206:	f1c4 040c 	rsb	r4, r4, #12
 802020a:	f1c4 0220 	rsb	r2, r4, #32
 802020e:	fa20 f002 	lsr.w	r0, r0, r2
 8020212:	fa01 f304 	lsl.w	r3, r1, r4
 8020216:	ea40 0003 	orr.w	r0, r0, r3
 802021a:	4629      	mov	r1, r5
 802021c:	bd30      	pop	{r4, r5, pc}
 802021e:	fa21 f004 	lsr.w	r0, r1, r4
 8020222:	4629      	mov	r1, r5
 8020224:	bd30      	pop	{r4, r5, pc}
 8020226:	f094 0f00 	teq	r4, #0
 802022a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802022e:	bf06      	itte	eq
 8020230:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020234:	3401      	addeq	r4, #1
 8020236:	3d01      	subne	r5, #1
 8020238:	e74e      	b.n	80200d8 <__adddf3+0x8c>
 802023a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802023e:	bf18      	it	ne
 8020240:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020244:	d029      	beq.n	802029a <__adddf3+0x24e>
 8020246:	ea94 0f05 	teq	r4, r5
 802024a:	bf08      	it	eq
 802024c:	ea90 0f02 	teqeq	r0, r2
 8020250:	d005      	beq.n	802025e <__adddf3+0x212>
 8020252:	ea54 0c00 	orrs.w	ip, r4, r0
 8020256:	bf04      	itt	eq
 8020258:	4619      	moveq	r1, r3
 802025a:	4610      	moveq	r0, r2
 802025c:	bd30      	pop	{r4, r5, pc}
 802025e:	ea91 0f03 	teq	r1, r3
 8020262:	bf1e      	ittt	ne
 8020264:	2100      	movne	r1, #0
 8020266:	2000      	movne	r0, #0
 8020268:	bd30      	popne	{r4, r5, pc}
 802026a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802026e:	d105      	bne.n	802027c <__adddf3+0x230>
 8020270:	0040      	lsls	r0, r0, #1
 8020272:	4149      	adcs	r1, r1
 8020274:	bf28      	it	cs
 8020276:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802027a:	bd30      	pop	{r4, r5, pc}
 802027c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020280:	bf3c      	itt	cc
 8020282:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020286:	bd30      	popcc	{r4, r5, pc}
 8020288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802028c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020290:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020294:	f04f 0000 	mov.w	r0, #0
 8020298:	bd30      	pop	{r4, r5, pc}
 802029a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802029e:	bf1a      	itte	ne
 80202a0:	4619      	movne	r1, r3
 80202a2:	4610      	movne	r0, r2
 80202a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80202a8:	bf1c      	itt	ne
 80202aa:	460b      	movne	r3, r1
 80202ac:	4602      	movne	r2, r0
 80202ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80202b2:	bf06      	itte	eq
 80202b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80202b8:	ea91 0f03 	teqeq	r1, r3
 80202bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80202c0:	bd30      	pop	{r4, r5, pc}
 80202c2:	bf00      	nop

080202c4 <__aeabi_ui2d>:
 80202c4:	f090 0f00 	teq	r0, #0
 80202c8:	bf04      	itt	eq
 80202ca:	2100      	moveq	r1, #0
 80202cc:	4770      	bxeq	lr
 80202ce:	b530      	push	{r4, r5, lr}
 80202d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202d8:	f04f 0500 	mov.w	r5, #0
 80202dc:	f04f 0100 	mov.w	r1, #0
 80202e0:	e750      	b.n	8020184 <__adddf3+0x138>
 80202e2:	bf00      	nop

080202e4 <__aeabi_i2d>:
 80202e4:	f090 0f00 	teq	r0, #0
 80202e8:	bf04      	itt	eq
 80202ea:	2100      	moveq	r1, #0
 80202ec:	4770      	bxeq	lr
 80202ee:	b530      	push	{r4, r5, lr}
 80202f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80202fc:	bf48      	it	mi
 80202fe:	4240      	negmi	r0, r0
 8020300:	f04f 0100 	mov.w	r1, #0
 8020304:	e73e      	b.n	8020184 <__adddf3+0x138>
 8020306:	bf00      	nop

08020308 <__aeabi_f2d>:
 8020308:	0042      	lsls	r2, r0, #1
 802030a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802030e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020312:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020316:	bf1f      	itttt	ne
 8020318:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802031c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020320:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020324:	4770      	bxne	lr
 8020326:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802032a:	bf08      	it	eq
 802032c:	4770      	bxeq	lr
 802032e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020332:	bf04      	itt	eq
 8020334:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020338:	4770      	bxeq	lr
 802033a:	b530      	push	{r4, r5, lr}
 802033c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020344:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020348:	e71c      	b.n	8020184 <__adddf3+0x138>
 802034a:	bf00      	nop

0802034c <__aeabi_ul2d>:
 802034c:	ea50 0201 	orrs.w	r2, r0, r1
 8020350:	bf08      	it	eq
 8020352:	4770      	bxeq	lr
 8020354:	b530      	push	{r4, r5, lr}
 8020356:	f04f 0500 	mov.w	r5, #0
 802035a:	e00a      	b.n	8020372 <__aeabi_l2d+0x16>

0802035c <__aeabi_l2d>:
 802035c:	ea50 0201 	orrs.w	r2, r0, r1
 8020360:	bf08      	it	eq
 8020362:	4770      	bxeq	lr
 8020364:	b530      	push	{r4, r5, lr}
 8020366:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802036a:	d502      	bpl.n	8020372 <__aeabi_l2d+0x16>
 802036c:	4240      	negs	r0, r0
 802036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020372:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020376:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802037a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802037e:	f43f aed8 	beq.w	8020132 <__adddf3+0xe6>
 8020382:	f04f 0203 	mov.w	r2, #3
 8020386:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802038a:	bf18      	it	ne
 802038c:	3203      	addne	r2, #3
 802038e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020392:	bf18      	it	ne
 8020394:	3203      	addne	r2, #3
 8020396:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802039a:	f1c2 0320 	rsb	r3, r2, #32
 802039e:	fa00 fc03 	lsl.w	ip, r0, r3
 80203a2:	fa20 f002 	lsr.w	r0, r0, r2
 80203a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80203aa:	ea40 000e 	orr.w	r0, r0, lr
 80203ae:	fa21 f102 	lsr.w	r1, r1, r2
 80203b2:	4414      	add	r4, r2
 80203b4:	e6bd      	b.n	8020132 <__adddf3+0xe6>
 80203b6:	bf00      	nop

080203b8 <__aeabi_dmul>:
 80203b8:	b570      	push	{r4, r5, r6, lr}
 80203ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80203be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80203c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80203c6:	bf1d      	ittte	ne
 80203c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80203cc:	ea94 0f0c 	teqne	r4, ip
 80203d0:	ea95 0f0c 	teqne	r5, ip
 80203d4:	f000 f8de 	bleq	8020594 <__aeabi_dmul+0x1dc>
 80203d8:	442c      	add	r4, r5
 80203da:	ea81 0603 	eor.w	r6, r1, r3
 80203de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80203e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80203e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80203ea:	bf18      	it	ne
 80203ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80203f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80203f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80203f8:	d038      	beq.n	802046c <__aeabi_dmul+0xb4>
 80203fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80203fe:	f04f 0500 	mov.w	r5, #0
 8020402:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020406:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802040a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802040e:	f04f 0600 	mov.w	r6, #0
 8020412:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020416:	f09c 0f00 	teq	ip, #0
 802041a:	bf18      	it	ne
 802041c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020420:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020424:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020428:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802042c:	d204      	bcs.n	8020438 <__aeabi_dmul+0x80>
 802042e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020432:	416d      	adcs	r5, r5
 8020434:	eb46 0606 	adc.w	r6, r6, r6
 8020438:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802043c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020440:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020444:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020448:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802044c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020450:	bf88      	it	hi
 8020452:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020456:	d81e      	bhi.n	8020496 <__aeabi_dmul+0xde>
 8020458:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802045c:	bf08      	it	eq
 802045e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020462:	f150 0000 	adcs.w	r0, r0, #0
 8020466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802046a:	bd70      	pop	{r4, r5, r6, pc}
 802046c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020470:	ea46 0101 	orr.w	r1, r6, r1
 8020474:	ea40 0002 	orr.w	r0, r0, r2
 8020478:	ea81 0103 	eor.w	r1, r1, r3
 802047c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020480:	bfc2      	ittt	gt
 8020482:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020486:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802048a:	bd70      	popgt	{r4, r5, r6, pc}
 802048c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020490:	f04f 0e00 	mov.w	lr, #0
 8020494:	3c01      	subs	r4, #1
 8020496:	f300 80ab 	bgt.w	80205f0 <__aeabi_dmul+0x238>
 802049a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802049e:	bfde      	ittt	le
 80204a0:	2000      	movle	r0, #0
 80204a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80204a6:	bd70      	pople	{r4, r5, r6, pc}
 80204a8:	f1c4 0400 	rsb	r4, r4, #0
 80204ac:	3c20      	subs	r4, #32
 80204ae:	da35      	bge.n	802051c <__aeabi_dmul+0x164>
 80204b0:	340c      	adds	r4, #12
 80204b2:	dc1b      	bgt.n	80204ec <__aeabi_dmul+0x134>
 80204b4:	f104 0414 	add.w	r4, r4, #20
 80204b8:	f1c4 0520 	rsb	r5, r4, #32
 80204bc:	fa00 f305 	lsl.w	r3, r0, r5
 80204c0:	fa20 f004 	lsr.w	r0, r0, r4
 80204c4:	fa01 f205 	lsl.w	r2, r1, r5
 80204c8:	ea40 0002 	orr.w	r0, r0, r2
 80204cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80204d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80204d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80204d8:	fa21 f604 	lsr.w	r6, r1, r4
 80204dc:	eb42 0106 	adc.w	r1, r2, r6
 80204e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80204e4:	bf08      	it	eq
 80204e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80204ea:	bd70      	pop	{r4, r5, r6, pc}
 80204ec:	f1c4 040c 	rsb	r4, r4, #12
 80204f0:	f1c4 0520 	rsb	r5, r4, #32
 80204f4:	fa00 f304 	lsl.w	r3, r0, r4
 80204f8:	fa20 f005 	lsr.w	r0, r0, r5
 80204fc:	fa01 f204 	lsl.w	r2, r1, r4
 8020500:	ea40 0002 	orr.w	r0, r0, r2
 8020504:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020508:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802050c:	f141 0100 	adc.w	r1, r1, #0
 8020510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020514:	bf08      	it	eq
 8020516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802051a:	bd70      	pop	{r4, r5, r6, pc}
 802051c:	f1c4 0520 	rsb	r5, r4, #32
 8020520:	fa00 f205 	lsl.w	r2, r0, r5
 8020524:	ea4e 0e02 	orr.w	lr, lr, r2
 8020528:	fa20 f304 	lsr.w	r3, r0, r4
 802052c:	fa01 f205 	lsl.w	r2, r1, r5
 8020530:	ea43 0302 	orr.w	r3, r3, r2
 8020534:	fa21 f004 	lsr.w	r0, r1, r4
 8020538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802053c:	fa21 f204 	lsr.w	r2, r1, r4
 8020540:	ea20 0002 	bic.w	r0, r0, r2
 8020544:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802054c:	bf08      	it	eq
 802054e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020552:	bd70      	pop	{r4, r5, r6, pc}
 8020554:	f094 0f00 	teq	r4, #0
 8020558:	d10f      	bne.n	802057a <__aeabi_dmul+0x1c2>
 802055a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802055e:	0040      	lsls	r0, r0, #1
 8020560:	eb41 0101 	adc.w	r1, r1, r1
 8020564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020568:	bf08      	it	eq
 802056a:	3c01      	subeq	r4, #1
 802056c:	d0f7      	beq.n	802055e <__aeabi_dmul+0x1a6>
 802056e:	ea41 0106 	orr.w	r1, r1, r6
 8020572:	f095 0f00 	teq	r5, #0
 8020576:	bf18      	it	ne
 8020578:	4770      	bxne	lr
 802057a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802057e:	0052      	lsls	r2, r2, #1
 8020580:	eb43 0303 	adc.w	r3, r3, r3
 8020584:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020588:	bf08      	it	eq
 802058a:	3d01      	subeq	r5, #1
 802058c:	d0f7      	beq.n	802057e <__aeabi_dmul+0x1c6>
 802058e:	ea43 0306 	orr.w	r3, r3, r6
 8020592:	4770      	bx	lr
 8020594:	ea94 0f0c 	teq	r4, ip
 8020598:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802059c:	bf18      	it	ne
 802059e:	ea95 0f0c 	teqne	r5, ip
 80205a2:	d00c      	beq.n	80205be <__aeabi_dmul+0x206>
 80205a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205a8:	bf18      	it	ne
 80205aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205ae:	d1d1      	bne.n	8020554 <__aeabi_dmul+0x19c>
 80205b0:	ea81 0103 	eor.w	r1, r1, r3
 80205b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205b8:	f04f 0000 	mov.w	r0, #0
 80205bc:	bd70      	pop	{r4, r5, r6, pc}
 80205be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205c2:	bf06      	itte	eq
 80205c4:	4610      	moveq	r0, r2
 80205c6:	4619      	moveq	r1, r3
 80205c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205cc:	d019      	beq.n	8020602 <__aeabi_dmul+0x24a>
 80205ce:	ea94 0f0c 	teq	r4, ip
 80205d2:	d102      	bne.n	80205da <__aeabi_dmul+0x222>
 80205d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80205d8:	d113      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205da:	ea95 0f0c 	teq	r5, ip
 80205de:	d105      	bne.n	80205ec <__aeabi_dmul+0x234>
 80205e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80205e4:	bf1c      	itt	ne
 80205e6:	4610      	movne	r0, r2
 80205e8:	4619      	movne	r1, r3
 80205ea:	d10a      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205ec:	ea81 0103 	eor.w	r1, r1, r3
 80205f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80205f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80205fc:	f04f 0000 	mov.w	r0, #0
 8020600:	bd70      	pop	{r4, r5, r6, pc}
 8020602:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020606:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802060a:	bd70      	pop	{r4, r5, r6, pc}

0802060c <__aeabi_ddiv>:
 802060c:	b570      	push	{r4, r5, r6, lr}
 802060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802061a:	bf1d      	ittte	ne
 802061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020620:	ea94 0f0c 	teqne	r4, ip
 8020624:	ea95 0f0c 	teqne	r5, ip
 8020628:	f000 f8a7 	bleq	802077a <__aeabi_ddiv+0x16e>
 802062c:	eba4 0405 	sub.w	r4, r4, r5
 8020630:	ea81 0e03 	eor.w	lr, r1, r3
 8020634:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802063c:	f000 8088 	beq.w	8020750 <__aeabi_ddiv+0x144>
 8020640:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020644:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020648:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802064c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020650:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020654:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020658:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802065c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020660:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020664:	429d      	cmp	r5, r3
 8020666:	bf08      	it	eq
 8020668:	4296      	cmpeq	r6, r2
 802066a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802066e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020672:	d202      	bcs.n	802067a <__aeabi_ddiv+0x6e>
 8020674:	085b      	lsrs	r3, r3, #1
 8020676:	ea4f 0232 	mov.w	r2, r2, rrx
 802067a:	1ab6      	subs	r6, r6, r2
 802067c:	eb65 0503 	sbc.w	r5, r5, r3
 8020680:	085b      	lsrs	r3, r3, #1
 8020682:	ea4f 0232 	mov.w	r2, r2, rrx
 8020686:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802068a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802068e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020692:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020696:	bf22      	ittt	cs
 8020698:	1ab6      	subcs	r6, r6, r2
 802069a:	4675      	movcs	r5, lr
 802069c:	ea40 000c 	orrcs.w	r0, r0, ip
 80206a0:	085b      	lsrs	r3, r3, #1
 80206a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206ae:	bf22      	ittt	cs
 80206b0:	1ab6      	subcs	r6, r6, r2
 80206b2:	4675      	movcs	r5, lr
 80206b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80206b8:	085b      	lsrs	r3, r3, #1
 80206ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80206be:	ebb6 0e02 	subs.w	lr, r6, r2
 80206c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206c6:	bf22      	ittt	cs
 80206c8:	1ab6      	subcs	r6, r6, r2
 80206ca:	4675      	movcs	r5, lr
 80206cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80206d0:	085b      	lsrs	r3, r3, #1
 80206d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206de:	bf22      	ittt	cs
 80206e0:	1ab6      	subcs	r6, r6, r2
 80206e2:	4675      	movcs	r5, lr
 80206e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80206e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80206ec:	d018      	beq.n	8020720 <__aeabi_ddiv+0x114>
 80206ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80206f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80206f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80206fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80206fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020702:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020706:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802070a:	d1c0      	bne.n	802068e <__aeabi_ddiv+0x82>
 802070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020710:	d10b      	bne.n	802072a <__aeabi_ddiv+0x11e>
 8020712:	ea41 0100 	orr.w	r1, r1, r0
 8020716:	f04f 0000 	mov.w	r0, #0
 802071a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802071e:	e7b6      	b.n	802068e <__aeabi_ddiv+0x82>
 8020720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020724:	bf04      	itt	eq
 8020726:	4301      	orreq	r1, r0
 8020728:	2000      	moveq	r0, #0
 802072a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802072e:	bf88      	it	hi
 8020730:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020734:	f63f aeaf 	bhi.w	8020496 <__aeabi_dmul+0xde>
 8020738:	ebb5 0c03 	subs.w	ip, r5, r3
 802073c:	bf04      	itt	eq
 802073e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020742:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020746:	f150 0000 	adcs.w	r0, r0, #0
 802074a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802074e:	bd70      	pop	{r4, r5, r6, pc}
 8020750:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020754:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020758:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802075c:	bfc2      	ittt	gt
 802075e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020762:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020766:	bd70      	popgt	{r4, r5, r6, pc}
 8020768:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802076c:	f04f 0e00 	mov.w	lr, #0
 8020770:	3c01      	subs	r4, #1
 8020772:	e690      	b.n	8020496 <__aeabi_dmul+0xde>
 8020774:	ea45 0e06 	orr.w	lr, r5, r6
 8020778:	e68d      	b.n	8020496 <__aeabi_dmul+0xde>
 802077a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802077e:	ea94 0f0c 	teq	r4, ip
 8020782:	bf08      	it	eq
 8020784:	ea95 0f0c 	teqeq	r5, ip
 8020788:	f43f af3b 	beq.w	8020602 <__aeabi_dmul+0x24a>
 802078c:	ea94 0f0c 	teq	r4, ip
 8020790:	d10a      	bne.n	80207a8 <__aeabi_ddiv+0x19c>
 8020792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020796:	f47f af34 	bne.w	8020602 <__aeabi_dmul+0x24a>
 802079a:	ea95 0f0c 	teq	r5, ip
 802079e:	f47f af25 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207a2:	4610      	mov	r0, r2
 80207a4:	4619      	mov	r1, r3
 80207a6:	e72c      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207a8:	ea95 0f0c 	teq	r5, ip
 80207ac:	d106      	bne.n	80207bc <__aeabi_ddiv+0x1b0>
 80207ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80207b2:	f43f aefd 	beq.w	80205b0 <__aeabi_dmul+0x1f8>
 80207b6:	4610      	mov	r0, r2
 80207b8:	4619      	mov	r1, r3
 80207ba:	e722      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207c0:	bf18      	it	ne
 80207c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207c6:	f47f aec5 	bne.w	8020554 <__aeabi_dmul+0x19c>
 80207ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80207ce:	f47f af0d 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80207d6:	f47f aeeb 	bne.w	80205b0 <__aeabi_dmul+0x1f8>
 80207da:	e712      	b.n	8020602 <__aeabi_dmul+0x24a>

080207dc <__gedf2>:
 80207dc:	f04f 3cff 	mov.w	ip, #4294967295
 80207e0:	e006      	b.n	80207f0 <__cmpdf2+0x4>
 80207e2:	bf00      	nop

080207e4 <__ledf2>:
 80207e4:	f04f 0c01 	mov.w	ip, #1
 80207e8:	e002      	b.n	80207f0 <__cmpdf2+0x4>
 80207ea:	bf00      	nop

080207ec <__cmpdf2>:
 80207ec:	f04f 0c01 	mov.w	ip, #1
 80207f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80207f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80207f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80207fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020800:	bf18      	it	ne
 8020802:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020806:	d01b      	beq.n	8020840 <__cmpdf2+0x54>
 8020808:	b001      	add	sp, #4
 802080a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802080e:	bf0c      	ite	eq
 8020810:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020814:	ea91 0f03 	teqne	r1, r3
 8020818:	bf02      	ittt	eq
 802081a:	ea90 0f02 	teqeq	r0, r2
 802081e:	2000      	moveq	r0, #0
 8020820:	4770      	bxeq	lr
 8020822:	f110 0f00 	cmn.w	r0, #0
 8020826:	ea91 0f03 	teq	r1, r3
 802082a:	bf58      	it	pl
 802082c:	4299      	cmppl	r1, r3
 802082e:	bf08      	it	eq
 8020830:	4290      	cmpeq	r0, r2
 8020832:	bf2c      	ite	cs
 8020834:	17d8      	asrcs	r0, r3, #31
 8020836:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802083a:	f040 0001 	orr.w	r0, r0, #1
 802083e:	4770      	bx	lr
 8020840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020848:	d102      	bne.n	8020850 <__cmpdf2+0x64>
 802084a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802084e:	d107      	bne.n	8020860 <__cmpdf2+0x74>
 8020850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020858:	d1d6      	bne.n	8020808 <__cmpdf2+0x1c>
 802085a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802085e:	d0d3      	beq.n	8020808 <__cmpdf2+0x1c>
 8020860:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020864:	4770      	bx	lr
 8020866:	bf00      	nop

08020868 <__aeabi_cdrcmple>:
 8020868:	4684      	mov	ip, r0
 802086a:	4610      	mov	r0, r2
 802086c:	4662      	mov	r2, ip
 802086e:	468c      	mov	ip, r1
 8020870:	4619      	mov	r1, r3
 8020872:	4663      	mov	r3, ip
 8020874:	e000      	b.n	8020878 <__aeabi_cdcmpeq>
 8020876:	bf00      	nop

08020878 <__aeabi_cdcmpeq>:
 8020878:	b501      	push	{r0, lr}
 802087a:	f7ff ffb7 	bl	80207ec <__cmpdf2>
 802087e:	2800      	cmp	r0, #0
 8020880:	bf48      	it	mi
 8020882:	f110 0f00 	cmnmi.w	r0, #0
 8020886:	bd01      	pop	{r0, pc}

08020888 <__aeabi_dcmpeq>:
 8020888:	f84d ed08 	str.w	lr, [sp, #-8]!
 802088c:	f7ff fff4 	bl	8020878 <__aeabi_cdcmpeq>
 8020890:	bf0c      	ite	eq
 8020892:	2001      	moveq	r0, #1
 8020894:	2000      	movne	r0, #0
 8020896:	f85d fb08 	ldr.w	pc, [sp], #8
 802089a:	bf00      	nop

0802089c <__aeabi_dcmplt>:
 802089c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208a0:	f7ff ffea 	bl	8020878 <__aeabi_cdcmpeq>
 80208a4:	bf34      	ite	cc
 80208a6:	2001      	movcc	r0, #1
 80208a8:	2000      	movcs	r0, #0
 80208aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ae:	bf00      	nop

080208b0 <__aeabi_dcmple>:
 80208b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208b4:	f7ff ffe0 	bl	8020878 <__aeabi_cdcmpeq>
 80208b8:	bf94      	ite	ls
 80208ba:	2001      	movls	r0, #1
 80208bc:	2000      	movhi	r0, #0
 80208be:	f85d fb08 	ldr.w	pc, [sp], #8
 80208c2:	bf00      	nop

080208c4 <__aeabi_dcmpge>:
 80208c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208c8:	f7ff ffce 	bl	8020868 <__aeabi_cdrcmple>
 80208cc:	bf94      	ite	ls
 80208ce:	2001      	movls	r0, #1
 80208d0:	2000      	movhi	r0, #0
 80208d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80208d6:	bf00      	nop

080208d8 <__aeabi_dcmpgt>:
 80208d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208dc:	f7ff ffc4 	bl	8020868 <__aeabi_cdrcmple>
 80208e0:	bf34      	ite	cc
 80208e2:	2001      	movcc	r0, #1
 80208e4:	2000      	movcs	r0, #0
 80208e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ea:	bf00      	nop

080208ec <__aeabi_d2f>:
 80208ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80208f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80208f4:	bf24      	itt	cs
 80208f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80208fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80208fe:	d90d      	bls.n	802091c <__aeabi_d2f+0x30>
 8020900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 802090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020914:	bf08      	it	eq
 8020916:	f020 0001 	biceq.w	r0, r0, #1
 802091a:	4770      	bx	lr
 802091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020920:	d121      	bne.n	8020966 <__aeabi_d2f+0x7a>
 8020922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020926:	bfbc      	itt	lt
 8020928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 802092c:	4770      	bxlt	lr
 802092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020936:	f1c2 0218 	rsb	r2, r2, #24
 802093a:	f1c2 0c20 	rsb	ip, r2, #32
 802093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8020942:	fa20 f002 	lsr.w	r0, r0, r2
 8020946:	bf18      	it	ne
 8020948:	f040 0001 	orrne.w	r0, r0, #1
 802094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020958:	ea40 000c 	orr.w	r0, r0, ip
 802095c:	fa23 f302 	lsr.w	r3, r3, r2
 8020960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020964:	e7cc      	b.n	8020900 <__aeabi_d2f+0x14>
 8020966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 802096a:	d107      	bne.n	802097c <__aeabi_d2f+0x90>
 802096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020970:	bf1e      	ittt	ne
 8020972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 802097a:	4770      	bxne	lr
 802097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020988:	4770      	bx	lr
 802098a:	bf00      	nop

0802098c <__aeabi_uldivmod>:
 802098c:	b953      	cbnz	r3, 80209a4 <__aeabi_uldivmod+0x18>
 802098e:	b94a      	cbnz	r2, 80209a4 <__aeabi_uldivmod+0x18>
 8020990:	2900      	cmp	r1, #0
 8020992:	bf08      	it	eq
 8020994:	2800      	cmpeq	r0, #0
 8020996:	bf1c      	itt	ne
 8020998:	f04f 31ff 	movne.w	r1, #4294967295
 802099c:	f04f 30ff 	movne.w	r0, #4294967295
 80209a0:	f000 b996 	b.w	8020cd0 <__aeabi_idiv0>
 80209a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80209a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80209ac:	f000 f82a 	bl	8020a04 <__udivmoddi4>
 80209b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80209b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80209b8:	b004      	add	sp, #16
 80209ba:	4770      	bx	lr

080209bc <__aeabi_f2ulz>:
 80209bc:	b5d0      	push	{r4, r6, r7, lr}
 80209be:	f7ff fca3 	bl	8020308 <__aeabi_f2d>
 80209c2:	2200      	movs	r2, #0
 80209c4:	4b0d      	ldr	r3, [pc, #52]	; (80209fc <__aeabi_f2ulz+0x40>)
 80209c6:	4606      	mov	r6, r0
 80209c8:	460f      	mov	r7, r1
 80209ca:	f7ff fcf5 	bl	80203b8 <__aeabi_dmul>
 80209ce:	f000 f981 	bl	8020cd4 <__aeabi_d2uiz>
 80209d2:	4604      	mov	r4, r0
 80209d4:	f7ff fc76 	bl	80202c4 <__aeabi_ui2d>
 80209d8:	2200      	movs	r2, #0
 80209da:	4b09      	ldr	r3, [pc, #36]	; (8020a00 <__aeabi_f2ulz+0x44>)
 80209dc:	f7ff fcec 	bl	80203b8 <__aeabi_dmul>
 80209e0:	4602      	mov	r2, r0
 80209e2:	460b      	mov	r3, r1
 80209e4:	4630      	mov	r0, r6
 80209e6:	4639      	mov	r1, r7
 80209e8:	f7ff fb2e 	bl	8020048 <__aeabi_dsub>
 80209ec:	f000 f972 	bl	8020cd4 <__aeabi_d2uiz>
 80209f0:	2200      	movs	r2, #0
 80209f2:	4623      	mov	r3, r4
 80209f4:	4310      	orrs	r0, r2
 80209f6:	4619      	mov	r1, r3
 80209f8:	bdd0      	pop	{r4, r6, r7, pc}
 80209fa:	bf00      	nop
 80209fc:	3df00000 	.word	0x3df00000
 8020a00:	41f00000 	.word	0x41f00000

08020a04 <__udivmoddi4>:
 8020a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a08:	9e08      	ldr	r6, [sp, #32]
 8020a0a:	4604      	mov	r4, r0
 8020a0c:	4688      	mov	r8, r1
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d14b      	bne.n	8020aaa <__udivmoddi4+0xa6>
 8020a12:	428a      	cmp	r2, r1
 8020a14:	4615      	mov	r5, r2
 8020a16:	d967      	bls.n	8020ae8 <__udivmoddi4+0xe4>
 8020a18:	fab2 f282 	clz	r2, r2
 8020a1c:	b14a      	cbz	r2, 8020a32 <__udivmoddi4+0x2e>
 8020a1e:	f1c2 0720 	rsb	r7, r2, #32
 8020a22:	fa01 f302 	lsl.w	r3, r1, r2
 8020a26:	fa20 f707 	lsr.w	r7, r0, r7
 8020a2a:	4095      	lsls	r5, r2
 8020a2c:	ea47 0803 	orr.w	r8, r7, r3
 8020a30:	4094      	lsls	r4, r2
 8020a32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020a36:	0c23      	lsrs	r3, r4, #16
 8020a38:	fbb8 f7fe 	udiv	r7, r8, lr
 8020a3c:	fa1f fc85 	uxth.w	ip, r5
 8020a40:	fb0e 8817 	mls	r8, lr, r7, r8
 8020a44:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020a48:	fb07 f10c 	mul.w	r1, r7, ip
 8020a4c:	4299      	cmp	r1, r3
 8020a4e:	d909      	bls.n	8020a64 <__udivmoddi4+0x60>
 8020a50:	18eb      	adds	r3, r5, r3
 8020a52:	f107 30ff 	add.w	r0, r7, #4294967295
 8020a56:	f080 811b 	bcs.w	8020c90 <__udivmoddi4+0x28c>
 8020a5a:	4299      	cmp	r1, r3
 8020a5c:	f240 8118 	bls.w	8020c90 <__udivmoddi4+0x28c>
 8020a60:	3f02      	subs	r7, #2
 8020a62:	442b      	add	r3, r5
 8020a64:	1a5b      	subs	r3, r3, r1
 8020a66:	b2a4      	uxth	r4, r4
 8020a68:	fbb3 f0fe 	udiv	r0, r3, lr
 8020a6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8020a70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020a74:	fb00 fc0c 	mul.w	ip, r0, ip
 8020a78:	45a4      	cmp	ip, r4
 8020a7a:	d909      	bls.n	8020a90 <__udivmoddi4+0x8c>
 8020a7c:	192c      	adds	r4, r5, r4
 8020a7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8020a82:	f080 8107 	bcs.w	8020c94 <__udivmoddi4+0x290>
 8020a86:	45a4      	cmp	ip, r4
 8020a88:	f240 8104 	bls.w	8020c94 <__udivmoddi4+0x290>
 8020a8c:	3802      	subs	r0, #2
 8020a8e:	442c      	add	r4, r5
 8020a90:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020a94:	eba4 040c 	sub.w	r4, r4, ip
 8020a98:	2700      	movs	r7, #0
 8020a9a:	b11e      	cbz	r6, 8020aa4 <__udivmoddi4+0xa0>
 8020a9c:	40d4      	lsrs	r4, r2
 8020a9e:	2300      	movs	r3, #0
 8020aa0:	e9c6 4300 	strd	r4, r3, [r6]
 8020aa4:	4639      	mov	r1, r7
 8020aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020aaa:	428b      	cmp	r3, r1
 8020aac:	d909      	bls.n	8020ac2 <__udivmoddi4+0xbe>
 8020aae:	2e00      	cmp	r6, #0
 8020ab0:	f000 80eb 	beq.w	8020c8a <__udivmoddi4+0x286>
 8020ab4:	2700      	movs	r7, #0
 8020ab6:	e9c6 0100 	strd	r0, r1, [r6]
 8020aba:	4638      	mov	r0, r7
 8020abc:	4639      	mov	r1, r7
 8020abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ac2:	fab3 f783 	clz	r7, r3
 8020ac6:	2f00      	cmp	r7, #0
 8020ac8:	d147      	bne.n	8020b5a <__udivmoddi4+0x156>
 8020aca:	428b      	cmp	r3, r1
 8020acc:	d302      	bcc.n	8020ad4 <__udivmoddi4+0xd0>
 8020ace:	4282      	cmp	r2, r0
 8020ad0:	f200 80fa 	bhi.w	8020cc8 <__udivmoddi4+0x2c4>
 8020ad4:	1a84      	subs	r4, r0, r2
 8020ad6:	eb61 0303 	sbc.w	r3, r1, r3
 8020ada:	2001      	movs	r0, #1
 8020adc:	4698      	mov	r8, r3
 8020ade:	2e00      	cmp	r6, #0
 8020ae0:	d0e0      	beq.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae2:	e9c6 4800 	strd	r4, r8, [r6]
 8020ae6:	e7dd      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae8:	b902      	cbnz	r2, 8020aec <__udivmoddi4+0xe8>
 8020aea:	deff      	udf	#255	; 0xff
 8020aec:	fab2 f282 	clz	r2, r2
 8020af0:	2a00      	cmp	r2, #0
 8020af2:	f040 808f 	bne.w	8020c14 <__udivmoddi4+0x210>
 8020af6:	1b49      	subs	r1, r1, r5
 8020af8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020afc:	fa1f f885 	uxth.w	r8, r5
 8020b00:	2701      	movs	r7, #1
 8020b02:	fbb1 fcfe 	udiv	ip, r1, lr
 8020b06:	0c23      	lsrs	r3, r4, #16
 8020b08:	fb0e 111c 	mls	r1, lr, ip, r1
 8020b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020b10:	fb08 f10c 	mul.w	r1, r8, ip
 8020b14:	4299      	cmp	r1, r3
 8020b16:	d907      	bls.n	8020b28 <__udivmoddi4+0x124>
 8020b18:	18eb      	adds	r3, r5, r3
 8020b1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020b1e:	d202      	bcs.n	8020b26 <__udivmoddi4+0x122>
 8020b20:	4299      	cmp	r1, r3
 8020b22:	f200 80cd 	bhi.w	8020cc0 <__udivmoddi4+0x2bc>
 8020b26:	4684      	mov	ip, r0
 8020b28:	1a59      	subs	r1, r3, r1
 8020b2a:	b2a3      	uxth	r3, r4
 8020b2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8020b30:	fb0e 1410 	mls	r4, lr, r0, r1
 8020b34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020b38:	fb08 f800 	mul.w	r8, r8, r0
 8020b3c:	45a0      	cmp	r8, r4
 8020b3e:	d907      	bls.n	8020b50 <__udivmoddi4+0x14c>
 8020b40:	192c      	adds	r4, r5, r4
 8020b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b46:	d202      	bcs.n	8020b4e <__udivmoddi4+0x14a>
 8020b48:	45a0      	cmp	r8, r4
 8020b4a:	f200 80b6 	bhi.w	8020cba <__udivmoddi4+0x2b6>
 8020b4e:	4618      	mov	r0, r3
 8020b50:	eba4 0408 	sub.w	r4, r4, r8
 8020b54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020b58:	e79f      	b.n	8020a9a <__udivmoddi4+0x96>
 8020b5a:	f1c7 0c20 	rsb	ip, r7, #32
 8020b5e:	40bb      	lsls	r3, r7
 8020b60:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020b64:	ea4e 0e03 	orr.w	lr, lr, r3
 8020b68:	fa01 f407 	lsl.w	r4, r1, r7
 8020b6c:	fa20 f50c 	lsr.w	r5, r0, ip
 8020b70:	fa21 f30c 	lsr.w	r3, r1, ip
 8020b74:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020b78:	4325      	orrs	r5, r4
 8020b7a:	fbb3 f9f8 	udiv	r9, r3, r8
 8020b7e:	0c2c      	lsrs	r4, r5, #16
 8020b80:	fb08 3319 	mls	r3, r8, r9, r3
 8020b84:	fa1f fa8e 	uxth.w	sl, lr
 8020b88:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020b8c:	fb09 f40a 	mul.w	r4, r9, sl
 8020b90:	429c      	cmp	r4, r3
 8020b92:	fa02 f207 	lsl.w	r2, r2, r7
 8020b96:	fa00 f107 	lsl.w	r1, r0, r7
 8020b9a:	d90b      	bls.n	8020bb4 <__udivmoddi4+0x1b0>
 8020b9c:	eb1e 0303 	adds.w	r3, lr, r3
 8020ba0:	f109 30ff 	add.w	r0, r9, #4294967295
 8020ba4:	f080 8087 	bcs.w	8020cb6 <__udivmoddi4+0x2b2>
 8020ba8:	429c      	cmp	r4, r3
 8020baa:	f240 8084 	bls.w	8020cb6 <__udivmoddi4+0x2b2>
 8020bae:	f1a9 0902 	sub.w	r9, r9, #2
 8020bb2:	4473      	add	r3, lr
 8020bb4:	1b1b      	subs	r3, r3, r4
 8020bb6:	b2ad      	uxth	r5, r5
 8020bb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8020bbc:	fb08 3310 	mls	r3, r8, r0, r3
 8020bc0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020bc4:	fb00 fa0a 	mul.w	sl, r0, sl
 8020bc8:	45a2      	cmp	sl, r4
 8020bca:	d908      	bls.n	8020bde <__udivmoddi4+0x1da>
 8020bcc:	eb1e 0404 	adds.w	r4, lr, r4
 8020bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8020bd4:	d26b      	bcs.n	8020cae <__udivmoddi4+0x2aa>
 8020bd6:	45a2      	cmp	sl, r4
 8020bd8:	d969      	bls.n	8020cae <__udivmoddi4+0x2aa>
 8020bda:	3802      	subs	r0, #2
 8020bdc:	4474      	add	r4, lr
 8020bde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020be2:	fba0 8902 	umull	r8, r9, r0, r2
 8020be6:	eba4 040a 	sub.w	r4, r4, sl
 8020bea:	454c      	cmp	r4, r9
 8020bec:	46c2      	mov	sl, r8
 8020bee:	464b      	mov	r3, r9
 8020bf0:	d354      	bcc.n	8020c9c <__udivmoddi4+0x298>
 8020bf2:	d051      	beq.n	8020c98 <__udivmoddi4+0x294>
 8020bf4:	2e00      	cmp	r6, #0
 8020bf6:	d069      	beq.n	8020ccc <__udivmoddi4+0x2c8>
 8020bf8:	ebb1 050a 	subs.w	r5, r1, sl
 8020bfc:	eb64 0403 	sbc.w	r4, r4, r3
 8020c00:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020c04:	40fd      	lsrs	r5, r7
 8020c06:	40fc      	lsrs	r4, r7
 8020c08:	ea4c 0505 	orr.w	r5, ip, r5
 8020c0c:	e9c6 5400 	strd	r5, r4, [r6]
 8020c10:	2700      	movs	r7, #0
 8020c12:	e747      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c14:	f1c2 0320 	rsb	r3, r2, #32
 8020c18:	fa20 f703 	lsr.w	r7, r0, r3
 8020c1c:	4095      	lsls	r5, r2
 8020c1e:	fa01 f002 	lsl.w	r0, r1, r2
 8020c22:	fa21 f303 	lsr.w	r3, r1, r3
 8020c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020c2a:	4338      	orrs	r0, r7
 8020c2c:	0c01      	lsrs	r1, r0, #16
 8020c2e:	fbb3 f7fe 	udiv	r7, r3, lr
 8020c32:	fa1f f885 	uxth.w	r8, r5
 8020c36:	fb0e 3317 	mls	r3, lr, r7, r3
 8020c3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c3e:	fb07 f308 	mul.w	r3, r7, r8
 8020c42:	428b      	cmp	r3, r1
 8020c44:	fa04 f402 	lsl.w	r4, r4, r2
 8020c48:	d907      	bls.n	8020c5a <__udivmoddi4+0x256>
 8020c4a:	1869      	adds	r1, r5, r1
 8020c4c:	f107 3cff 	add.w	ip, r7, #4294967295
 8020c50:	d22f      	bcs.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c52:	428b      	cmp	r3, r1
 8020c54:	d92d      	bls.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c56:	3f02      	subs	r7, #2
 8020c58:	4429      	add	r1, r5
 8020c5a:	1acb      	subs	r3, r1, r3
 8020c5c:	b281      	uxth	r1, r0
 8020c5e:	fbb3 f0fe 	udiv	r0, r3, lr
 8020c62:	fb0e 3310 	mls	r3, lr, r0, r3
 8020c66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c6a:	fb00 f308 	mul.w	r3, r0, r8
 8020c6e:	428b      	cmp	r3, r1
 8020c70:	d907      	bls.n	8020c82 <__udivmoddi4+0x27e>
 8020c72:	1869      	adds	r1, r5, r1
 8020c74:	f100 3cff 	add.w	ip, r0, #4294967295
 8020c78:	d217      	bcs.n	8020caa <__udivmoddi4+0x2a6>
 8020c7a:	428b      	cmp	r3, r1
 8020c7c:	d915      	bls.n	8020caa <__udivmoddi4+0x2a6>
 8020c7e:	3802      	subs	r0, #2
 8020c80:	4429      	add	r1, r5
 8020c82:	1ac9      	subs	r1, r1, r3
 8020c84:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020c88:	e73b      	b.n	8020b02 <__udivmoddi4+0xfe>
 8020c8a:	4637      	mov	r7, r6
 8020c8c:	4630      	mov	r0, r6
 8020c8e:	e709      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c90:	4607      	mov	r7, r0
 8020c92:	e6e7      	b.n	8020a64 <__udivmoddi4+0x60>
 8020c94:	4618      	mov	r0, r3
 8020c96:	e6fb      	b.n	8020a90 <__udivmoddi4+0x8c>
 8020c98:	4541      	cmp	r1, r8
 8020c9a:	d2ab      	bcs.n	8020bf4 <__udivmoddi4+0x1f0>
 8020c9c:	ebb8 0a02 	subs.w	sl, r8, r2
 8020ca0:	eb69 020e 	sbc.w	r2, r9, lr
 8020ca4:	3801      	subs	r0, #1
 8020ca6:	4613      	mov	r3, r2
 8020ca8:	e7a4      	b.n	8020bf4 <__udivmoddi4+0x1f0>
 8020caa:	4660      	mov	r0, ip
 8020cac:	e7e9      	b.n	8020c82 <__udivmoddi4+0x27e>
 8020cae:	4618      	mov	r0, r3
 8020cb0:	e795      	b.n	8020bde <__udivmoddi4+0x1da>
 8020cb2:	4667      	mov	r7, ip
 8020cb4:	e7d1      	b.n	8020c5a <__udivmoddi4+0x256>
 8020cb6:	4681      	mov	r9, r0
 8020cb8:	e77c      	b.n	8020bb4 <__udivmoddi4+0x1b0>
 8020cba:	3802      	subs	r0, #2
 8020cbc:	442c      	add	r4, r5
 8020cbe:	e747      	b.n	8020b50 <__udivmoddi4+0x14c>
 8020cc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8020cc4:	442b      	add	r3, r5
 8020cc6:	e72f      	b.n	8020b28 <__udivmoddi4+0x124>
 8020cc8:	4638      	mov	r0, r7
 8020cca:	e708      	b.n	8020ade <__udivmoddi4+0xda>
 8020ccc:	4637      	mov	r7, r6
 8020cce:	e6e9      	b.n	8020aa4 <__udivmoddi4+0xa0>

08020cd0 <__aeabi_idiv0>:
 8020cd0:	4770      	bx	lr
 8020cd2:	bf00      	nop

08020cd4 <__aeabi_d2uiz>:
 8020cd4:	004a      	lsls	r2, r1, #1
 8020cd6:	d211      	bcs.n	8020cfc <__aeabi_d2uiz+0x28>
 8020cd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020cdc:	d211      	bcs.n	8020d02 <__aeabi_d2uiz+0x2e>
 8020cde:	d50d      	bpl.n	8020cfc <__aeabi_d2uiz+0x28>
 8020ce0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020ce4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020ce8:	d40e      	bmi.n	8020d08 <__aeabi_d2uiz+0x34>
 8020cea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020cf2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020cf6:	fa23 f002 	lsr.w	r0, r3, r2
 8020cfa:	4770      	bx	lr
 8020cfc:	f04f 0000 	mov.w	r0, #0
 8020d00:	4770      	bx	lr
 8020d02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020d06:	d102      	bne.n	8020d0e <__aeabi_d2uiz+0x3a>
 8020d08:	f04f 30ff 	mov.w	r0, #4294967295
 8020d0c:	4770      	bx	lr
 8020d0e:	f04f 0000 	mov.w	r0, #0
 8020d12:	4770      	bx	lr

08020d14 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"
#include "declare_extern.h"

Encoder::Encoder() : distance_(0)
 8020d14:	b480      	push	{r7}
 8020d16:	b083      	sub	sp, #12
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	6078      	str	r0, [r7, #4]
                   , distance_stack_(0)
                   , distance_difference_(0) {}
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	f04f 0200 	mov.w	r2, #0
 8020d22:	601a      	str	r2, [r3, #0]
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	f04f 0200 	mov.w	r2, #0
 8020d2a:	605a      	str	r2, [r3, #4]
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	f04f 0200 	mov.w	r2, #0
 8020d32:	609a      	str	r2, [r3, #8]
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	4618      	mov	r0, r3
 8020d38:	370c      	adds	r7, #12
 8020d3a:	46bd      	mov	sp, r7
 8020d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d40:	4770      	bx	lr
	...

08020d44 <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020d44:	b580      	push	{r7, lr}
 8020d46:	b082      	sub	sp, #8
 8020d48:	af00      	add	r7, sp, #0
 8020d4a:	6078      	str	r0, [r7, #4]
	if(HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL) != HAL_OK)
 8020d4c:	213c      	movs	r1, #60	; 0x3c
 8020d4e:	4812      	ldr	r0, [pc, #72]	; (8020d98 <_ZN7Encoder4InitEv+0x54>)
 8020d50:	f008 fbb0 	bl	80294b4 <HAL_TIM_Encoder_Start>
 8020d54:	4603      	mov	r3, r0
 8020d56:	2b00      	cmp	r3, #0
 8020d58:	bf14      	ite	ne
 8020d5a:	2301      	movne	r3, #1
 8020d5c:	2300      	moveq	r3, #0
 8020d5e:	b2db      	uxtb	r3, r3
 8020d60:	2b00      	cmp	r3, #0
 8020d62:	d004      	beq.n	8020d6e <_ZN7Encoder4InitEv+0x2a>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim8 = true;
 8020d64:	4b0d      	ldr	r3, [pc, #52]	; (8020d9c <_ZN7Encoder4InitEv+0x58>)
 8020d66:	2201      	movs	r2, #1
 8020d68:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d6a:	f003 f809 	bl	8023d80 <Error_Handler>
	}

	if(HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL) != HAL_OK)
 8020d6e:	213c      	movs	r1, #60	; 0x3c
 8020d70:	480b      	ldr	r0, [pc, #44]	; (8020da0 <_ZN7Encoder4InitEv+0x5c>)
 8020d72:	f008 fb9f 	bl	80294b4 <HAL_TIM_Encoder_Start>
 8020d76:	4603      	mov	r3, r0
 8020d78:	2b00      	cmp	r3, #0
 8020d7a:	bf14      	ite	ne
 8020d7c:	2301      	movne	r3, #1
 8020d7e:	2300      	moveq	r3, #0
 8020d80:	b2db      	uxtb	r3, r3
 8020d82:	2b00      	cmp	r3, #0
 8020d84:	d004      	beq.n	8020d90 <_ZN7Encoder4InitEv+0x4c>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim4 = true;
 8020d86:	4b07      	ldr	r3, [pc, #28]	; (8020da4 <_ZN7Encoder4InitEv+0x60>)
 8020d88:	2201      	movs	r2, #1
 8020d8a:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d8c:	f002 fff8 	bl	8023d80 <Error_Handler>
	}
}
 8020d90:	bf00      	nop
 8020d92:	3708      	adds	r7, #8
 8020d94:	46bd      	mov	sp, r7
 8020d96:	bd80      	pop	{r7, pc}
 8020d98:	200005ec 	.word	0x200005ec
 8020d9c:	200000bc 	.word	0x200000bc
 8020da0:	2000062c 	.word	0x2000062c
 8020da4:	200000bb 	.word	0x200000bb

08020da8 <_ZN7Encoder6UpdateEv>:

void Encoder::Update()
{
 8020da8:	b590      	push	{r4, r7, lr}
 8020daa:	b087      	sub	sp, #28
 8020dac:	af00      	add	r7, sp, #0
 8020dae:	6078      	str	r0, [r7, #4]
	int16_t count_l = static_cast<int16_t>((TIM8 -> CNT) - START_COUNT);
 8020db0:	4b39      	ldr	r3, [pc, #228]	; (8020e98 <_ZN7Encoder6UpdateEv+0xf0>)
 8020db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020db4:	b29b      	uxth	r3, r3
 8020db6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8020dba:	3b7f      	subs	r3, #127	; 0x7f
 8020dbc:	b29b      	uxth	r3, r3
 8020dbe:	82fb      	strh	r3, [r7, #22]
	int16_t count_r = static_cast<int16_t>(START_COUNT - (TIM4 -> CNT));
 8020dc0:	4b36      	ldr	r3, [pc, #216]	; (8020e9c <_ZN7Encoder6UpdateEv+0xf4>)
 8020dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020dc4:	b29b      	uxth	r3, r3
 8020dc6:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8020dca:	337f      	adds	r3, #127	; 0x7f
 8020dcc:	b29b      	uxth	r3, r3
 8020dce:	82bb      	strh	r3, [r7, #20]
	TIM8 -> CNT = START_COUNT;
 8020dd0:	4b31      	ldr	r3, [pc, #196]	; (8020e98 <_ZN7Encoder6UpdateEv+0xf0>)
 8020dd2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020dd6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = START_COUNT;
 8020dd8:	4b30      	ldr	r3, [pc, #192]	; (8020e9c <_ZN7Encoder6UpdateEv+0xf4>)
 8020dda:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020dde:	625a      	str	r2, [r3, #36]	; 0x24
	float distance_l = static_cast<float>(count_l * DISTANCE_PER_COUNT);
 8020de0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020de4:	4618      	mov	r0, r3
 8020de6:	f7ff fa7d 	bl	80202e4 <__aeabi_i2d>
 8020dea:	a329      	add	r3, pc, #164	; (adr r3, 8020e90 <_ZN7Encoder6UpdateEv+0xe8>)
 8020dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020df0:	f7ff fae2 	bl	80203b8 <__aeabi_dmul>
 8020df4:	4603      	mov	r3, r0
 8020df6:	460c      	mov	r4, r1
 8020df8:	4618      	mov	r0, r3
 8020dfa:	4621      	mov	r1, r4
 8020dfc:	f7ff fd76 	bl	80208ec <__aeabi_d2f>
 8020e00:	4603      	mov	r3, r0
 8020e02:	613b      	str	r3, [r7, #16]
	float distance_r = static_cast<float>(count_r * DISTANCE_PER_COUNT);
 8020e04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020e08:	4618      	mov	r0, r3
 8020e0a:	f7ff fa6b 	bl	80202e4 <__aeabi_i2d>
 8020e0e:	a320      	add	r3, pc, #128	; (adr r3, 8020e90 <_ZN7Encoder6UpdateEv+0xe8>)
 8020e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e14:	f7ff fad0 	bl	80203b8 <__aeabi_dmul>
 8020e18:	4603      	mov	r3, r0
 8020e1a:	460c      	mov	r4, r1
 8020e1c:	4618      	mov	r0, r3
 8020e1e:	4621      	mov	r1, r4
 8020e20:	f7ff fd64 	bl	80208ec <__aeabi_d2f>
 8020e24:	4603      	mov	r3, r0
 8020e26:	60fb      	str	r3, [r7, #12]
	float distance = (distance_l + distance_r) / 2.0;
 8020e28:	ed97 7a04 	vldr	s14, [r7, #16]
 8020e2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8020e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020e34:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8020e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020e3c:	edc7 7a02 	vstr	s15, [r7, #8]

	distance_ = distance;
 8020e40:	687b      	ldr	r3, [r7, #4]
 8020e42:	68ba      	ldr	r2, [r7, #8]
 8020e44:	601a      	str	r2, [r3, #0]
	distance_stack_ += distance;
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	ed93 7a01 	vldr	s14, [r3, #4]
 8020e4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8020e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_difference_ = distance_r - distance_l;
 8020e5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8020e5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8020e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	edc3 7a02 	vstr	s15, [r3, #8]

#ifdef DEBUG_MODE
	g_enc_cnt_l = count_l;
 8020e6c:	4a0c      	ldr	r2, [pc, #48]	; (8020ea0 <_ZN7Encoder6UpdateEv+0xf8>)
 8020e6e:	8afb      	ldrh	r3, [r7, #22]
 8020e70:	8013      	strh	r3, [r2, #0]
	g_enc_cnt_r = count_r;
 8020e72:	4a0c      	ldr	r2, [pc, #48]	; (8020ea4 <_ZN7Encoder6UpdateEv+0xfc>)
 8020e74:	8abb      	ldrh	r3, [r7, #20]
 8020e76:	8013      	strh	r3, [r2, #0]
	g_distance_l = distance_l;
 8020e78:	4a0b      	ldr	r2, [pc, #44]	; (8020ea8 <_ZN7Encoder6UpdateEv+0x100>)
 8020e7a:	693b      	ldr	r3, [r7, #16]
 8020e7c:	6013      	str	r3, [r2, #0]
	g_distance_r = distance_r;
 8020e7e:	4a0b      	ldr	r2, [pc, #44]	; (8020eac <_ZN7Encoder6UpdateEv+0x104>)
 8020e80:	68fb      	ldr	r3, [r7, #12]
 8020e82:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8020e84:	bf00      	nop
 8020e86:	371c      	adds	r7, #28
 8020e88:	46bd      	mov	sp, r7
 8020e8a:	bd90      	pop	{r4, r7, pc}
 8020e8c:	f3af 8000 	nop.w
 8020e90:	5d35653d 	.word	0x5d35653d
 8020e94:	3f7d744f 	.word	0x3f7d744f
 8020e98:	40010400 	.word	0x40010400
 8020e9c:	40000800 	.word	0x40000800
 8020ea0:	20000258 	.word	0x20000258
 8020ea4:	2000025a 	.word	0x2000025a
 8020ea8:	2000025c 	.word	0x2000025c
 8020eac:	20000260 	.word	0x20000260

08020eb0 <_ZN7Encoder18ResetDistanceStackEv>:
	TIM8 -> CNT = START_COUNT;
	TIM4 -> CNT = START_COUNT;
}

void Encoder::ResetDistanceStack()
{
 8020eb0:	b480      	push	{r7}
 8020eb2:	b083      	sub	sp, #12
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]
	distance_stack_ = 0.0;
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	f04f 0200 	mov.w	r2, #0
 8020ebe:	605a      	str	r2, [r3, #4]
}
 8020ec0:	bf00      	nop
 8020ec2:	370c      	adds	r7, #12
 8020ec4:	46bd      	mov	sp, r7
 8020ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eca:	4770      	bx	lr

08020ecc <_ZN7Encoder11GetDistanceEv>:

float Encoder::GetDistance()
{
 8020ecc:	b480      	push	{r7}
 8020ece:	b083      	sub	sp, #12
 8020ed0:	af00      	add	r7, sp, #0
 8020ed2:	6078      	str	r0, [r7, #4]
	return distance_;
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	681b      	ldr	r3, [r3, #0]
 8020ed8:	ee07 3a90 	vmov	s15, r3
}
 8020edc:	eeb0 0a67 	vmov.f32	s0, s15
 8020ee0:	370c      	adds	r7, #12
 8020ee2:	46bd      	mov	sp, r7
 8020ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ee8:	4770      	bx	lr

08020eea <_ZN7Encoder16GetDistanceStackEv>:

float Encoder::GetDistanceStack()
{
 8020eea:	b480      	push	{r7}
 8020eec:	b083      	sub	sp, #12
 8020eee:	af00      	add	r7, sp, #0
 8020ef0:	6078      	str	r0, [r7, #4]
	return distance_stack_;
 8020ef2:	687b      	ldr	r3, [r7, #4]
 8020ef4:	685b      	ldr	r3, [r3, #4]
 8020ef6:	ee07 3a90 	vmov	s15, r3
}
 8020efa:	eeb0 0a67 	vmov.f32	s0, s15
 8020efe:	370c      	adds	r7, #12
 8020f00:	46bd      	mov	sp, r7
 8020f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f06:	4770      	bx	lr

08020f08 <_ZN7Encoder15AngularVelocityEv>:

float Encoder::AngularVelocity()
{
 8020f08:	b590      	push	{r4, r7, lr}
 8020f0a:	b083      	sub	sp, #12
 8020f0c:	af00      	add	r7, sp, #0
 8020f0e:	6078      	str	r0, [r7, #4]
	return distance_difference_ / (TIM6_PERIOD * MACHINE_TREAD);
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	689b      	ldr	r3, [r3, #8]
 8020f14:	4618      	mov	r0, r3
 8020f16:	f7ff f9f7 	bl	8020308 <__aeabi_f2d>
 8020f1a:	a309      	add	r3, pc, #36	; (adr r3, 8020f40 <_ZN7Encoder15AngularVelocityEv+0x38>)
 8020f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f20:	f7ff fb74 	bl	802060c <__aeabi_ddiv>
 8020f24:	4603      	mov	r3, r0
 8020f26:	460c      	mov	r4, r1
 8020f28:	4618      	mov	r0, r3
 8020f2a:	4621      	mov	r1, r4
 8020f2c:	f7ff fcde 	bl	80208ec <__aeabi_d2f>
 8020f30:	4603      	mov	r3, r0
 8020f32:	ee07 3a90 	vmov	s15, r3
 8020f36:	eeb0 0a67 	vmov.f32	s0, s15
 8020f3a:	370c      	adds	r7, #12
 8020f3c:	46bd      	mov	sp, r7
 8020f3e:	bd90      	pop	{r4, r7, pc}
 8020f40:	00000000 	.word	0x00000000
 8020f44:	4063d800 	.word	0x4063d800

08020f48 <_ZN5Flash5ClearEv>:
#include "flash.hpp"
#include "declare_extern.h"
#include <string.h>

bool Flash::Clear()
{
 8020f48:	b580      	push	{r7, lr}
 8020f4a:	b088      	sub	sp, #32
 8020f4c:	af00      	add	r7, sp, #0
 8020f4e:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8020f50:	f006 fa64 	bl	802741c <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase;

    erase.TypeErase    = FLASH_TYPEERASE_SECTORS; // Erasure range : Sectors
 8020f54:	2300      	movs	r3, #0
 8020f56:	60fb      	str	r3, [r7, #12]
    erase.Sector       = FLASH_SECTOR_1;          // Which sector : 1
 8020f58:	2301      	movs	r3, #1
 8020f5a:	617b      	str	r3, [r7, #20]
    erase.NbSectors    = 4;                       // How many sector : 4 (1,2,3,4)
 8020f5c:	2304      	movs	r3, #4
 8020f5e:	61bb      	str	r3, [r7, #24]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;   // Voltage range : 2.7 ~ 3.6 [V]
 8020f60:	2302      	movs	r3, #2
 8020f62:	61fb      	str	r3, [r7, #28]

    // Success => 0xFFFFFFFF is stored.
    // Fail => Sector number is stored.
    uint32_t failed_sector = 0;
 8020f64:	2300      	movs	r3, #0
 8020f66:	60bb      	str	r3, [r7, #8]

    if(HAL_FLASHEx_Erase(&erase, &failed_sector) != HAL_OK)
 8020f68:	f107 0208 	add.w	r2, r7, #8
 8020f6c:	f107 030c 	add.w	r3, r7, #12
 8020f70:	4611      	mov	r1, r2
 8020f72:	4618      	mov	r0, r3
 8020f74:	f006 fbb2 	bl	80276dc <HAL_FLASHEx_Erase>
 8020f78:	4603      	mov	r3, r0
 8020f7a:	2b00      	cmp	r3, #0
 8020f7c:	bf14      	ite	ne
 8020f7e:	2301      	movne	r3, #1
 8020f80:	2300      	moveq	r3, #0
 8020f82:	b2db      	uxtb	r3, r3
 8020f84:	2b00      	cmp	r3, #0
 8020f86:	d004      	beq.n	8020f92 <_ZN5Flash5ClearEv+0x4a>
    {
#ifdef DEBUG_MODE
        g_erase_failed_sector = failed_sector;
 8020f88:	68bb      	ldr	r3, [r7, #8]
 8020f8a:	4a08      	ldr	r2, [pc, #32]	; (8020fac <_ZN5Flash5ClearEv+0x64>)
 8020f8c:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

        return false;
 8020f8e:	2300      	movs	r3, #0
 8020f90:	e008      	b.n	8020fa4 <_ZN5Flash5ClearEv+0x5c>
    }

    HAL_FLASH_Lock();
 8020f92:	f006 fa65 	bl	8027460 <HAL_FLASH_Lock>

    return failed_sector == 0xFFFFFFFF;
 8020f96:	68bb      	ldr	r3, [r7, #8]
 8020f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f9c:	bf0c      	ite	eq
 8020f9e:	2301      	moveq	r3, #1
 8020fa0:	2300      	movne	r3, #0
 8020fa2:	b2db      	uxtb	r3, r3
}
 8020fa4:	4618      	mov	r0, r3
 8020fa6:	3720      	adds	r7, #32
 8020fa8:	46bd      	mov	sp, r7
 8020faa:	bd80      	pop	{r7, pc}
 8020fac:	20000284 	.word	0x20000284

08020fb0 <_ZN5Flash10StoreUint8EmPhm>:

bool Flash::StoreUint8(uint32_t address, uint8_t *data, uint32_t number)
{
 8020fb0:	b590      	push	{r4, r7, lr}
 8020fb2:	b087      	sub	sp, #28
 8020fb4:	af00      	add	r7, sp, #0
 8020fb6:	60f8      	str	r0, [r7, #12]
 8020fb8:	60b9      	str	r1, [r7, #8]
 8020fba:	607a      	str	r2, [r7, #4]
 8020fbc:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8020fbe:	f006 fa2d 	bl	802741c <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8020fc2:	2300      	movs	r3, #0
 8020fc4:	613b      	str	r3, [r7, #16]
 8020fc6:	693a      	ldr	r2, [r7, #16]
 8020fc8:	683b      	ldr	r3, [r7, #0]
 8020fca:	429a      	cmp	r2, r3
 8020fcc:	d218      	bcs.n	8021000 <_ZN5Flash10StoreUint8EmPhm+0x50>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address++, *data++);
 8020fce:	68b9      	ldr	r1, [r7, #8]
 8020fd0:	1c4b      	adds	r3, r1, #1
 8020fd2:	60bb      	str	r3, [r7, #8]
 8020fd4:	687b      	ldr	r3, [r7, #4]
 8020fd6:	1c5a      	adds	r2, r3, #1
 8020fd8:	607a      	str	r2, [r7, #4]
 8020fda:	781b      	ldrb	r3, [r3, #0]
 8020fdc:	b2db      	uxtb	r3, r3
 8020fde:	f04f 0400 	mov.w	r4, #0
 8020fe2:	461a      	mov	r2, r3
 8020fe4:	4623      	mov	r3, r4
 8020fe6:	2000      	movs	r0, #0
 8020fe8:	f006 f9c4 	bl	8027374 <HAL_FLASH_Program>
 8020fec:	4603      	mov	r3, r0
 8020fee:	75fb      	strb	r3, [r7, #23]
        if(result != HAL_OK) break;
 8020ff0:	7dfb      	ldrb	r3, [r7, #23]
 8020ff2:	2b00      	cmp	r3, #0
 8020ff4:	d103      	bne.n	8020ffe <_ZN5Flash10StoreUint8EmPhm+0x4e>
    for(uint32_t i = 0; i < number; i++)
 8020ff6:	693b      	ldr	r3, [r7, #16]
 8020ff8:	3301      	adds	r3, #1
 8020ffa:	613b      	str	r3, [r7, #16]
 8020ffc:	e7e3      	b.n	8020fc6 <_ZN5Flash10StoreUint8EmPhm+0x16>
        if(result != HAL_OK) break;
 8020ffe:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8021000:	f006 fa2e 	bl	8027460 <HAL_FLASH_Lock>

    return result == HAL_OK;
 8021004:	7dfb      	ldrb	r3, [r7, #23]
 8021006:	2b00      	cmp	r3, #0
 8021008:	bf0c      	ite	eq
 802100a:	2301      	moveq	r3, #1
 802100c:	2300      	movne	r3, #0
 802100e:	b2db      	uxtb	r3, r3
}
 8021010:	4618      	mov	r0, r3
 8021012:	371c      	adds	r7, #28
 8021014:	46bd      	mov	sp, r7
 8021016:	bd90      	pop	{r4, r7, pc}

08021018 <_ZN5Flash11StoreUint16EmPtm>:

bool Flash::StoreUint16(uint32_t address, uint16_t *data, uint32_t number)
{
 8021018:	b590      	push	{r4, r7, lr}
 802101a:	b087      	sub	sp, #28
 802101c:	af00      	add	r7, sp, #0
 802101e:	60f8      	str	r0, [r7, #12]
 8021020:	60b9      	str	r1, [r7, #8]
 8021022:	607a      	str	r2, [r7, #4]
 8021024:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021026:	f006 f9f9 	bl	802741c <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 802102a:	2300      	movs	r3, #0
 802102c:	613b      	str	r3, [r7, #16]
 802102e:	693a      	ldr	r2, [r7, #16]
 8021030:	683b      	ldr	r3, [r7, #0]
 8021032:	429a      	cmp	r2, r3
 8021034:	d219      	bcs.n	802106a <_ZN5Flash11StoreUint16EmPtm+0x52>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++);
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	1c9a      	adds	r2, r3, #2
 802103a:	607a      	str	r2, [r7, #4]
 802103c:	881b      	ldrh	r3, [r3, #0]
 802103e:	b29b      	uxth	r3, r3
 8021040:	f04f 0400 	mov.w	r4, #0
 8021044:	461a      	mov	r2, r3
 8021046:	4623      	mov	r3, r4
 8021048:	68b9      	ldr	r1, [r7, #8]
 802104a:	2001      	movs	r0, #1
 802104c:	f006 f992 	bl	8027374 <HAL_FLASH_Program>
 8021050:	4603      	mov	r3, r0
 8021052:	75fb      	strb	r3, [r7, #23]
        address += 2;
 8021054:	68bb      	ldr	r3, [r7, #8]
 8021056:	3302      	adds	r3, #2
 8021058:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 802105a:	7dfb      	ldrb	r3, [r7, #23]
 802105c:	2b00      	cmp	r3, #0
 802105e:	d103      	bne.n	8021068 <_ZN5Flash11StoreUint16EmPtm+0x50>
    for(uint32_t i = 0; i < number; i++)
 8021060:	693b      	ldr	r3, [r7, #16]
 8021062:	3301      	adds	r3, #1
 8021064:	613b      	str	r3, [r7, #16]
 8021066:	e7e2      	b.n	802102e <_ZN5Flash11StoreUint16EmPtm+0x16>
        if(result != HAL_OK) break;
 8021068:	bf00      	nop
    }

    HAL_FLASH_Lock();
 802106a:	f006 f9f9 	bl	8027460 <HAL_FLASH_Lock>

    return result == HAL_OK;
 802106e:	7dfb      	ldrb	r3, [r7, #23]
 8021070:	2b00      	cmp	r3, #0
 8021072:	bf0c      	ite	eq
 8021074:	2301      	moveq	r3, #1
 8021076:	2300      	movne	r3, #0
 8021078:	b2db      	uxtb	r3, r3
}
 802107a:	4618      	mov	r0, r3
 802107c:	371c      	adds	r7, #28
 802107e:	46bd      	mov	sp, r7
 8021080:	bd90      	pop	{r4, r7, pc}

08021082 <_ZN5Flash10StoreFloatEmPfm>:

    return result == HAL_OK;
}

bool Flash::StoreFloat(uint32_t address, float *data, uint32_t number)
{
 8021082:	b590      	push	{r4, r7, lr}
 8021084:	b087      	sub	sp, #28
 8021086:	af00      	add	r7, sp, #0
 8021088:	60f8      	str	r0, [r7, #12]
 802108a:	60b9      	str	r1, [r7, #8]
 802108c:	607a      	str	r2, [r7, #4]
 802108e:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021090:	f006 f9c4 	bl	802741c <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8021094:	2300      	movs	r3, #0
 8021096:	613b      	str	r3, [r7, #16]
 8021098:	693a      	ldr	r2, [r7, #16]
 802109a:	683b      	ldr	r3, [r7, #0]
 802109c:	429a      	cmp	r2, r3
 802109e:	d21b      	bcs.n	80210d8 <_ZN5Flash10StoreFloatEmPfm+0x56>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *data++);
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	1d1a      	adds	r2, r3, #4
 80210a4:	607a      	str	r2, [r7, #4]
 80210a6:	681b      	ldr	r3, [r3, #0]
 80210a8:	4618      	mov	r0, r3
 80210aa:	f7ff fc87 	bl	80209bc <__aeabi_f2ulz>
 80210ae:	4603      	mov	r3, r0
 80210b0:	460c      	mov	r4, r1
 80210b2:	461a      	mov	r2, r3
 80210b4:	4623      	mov	r3, r4
 80210b6:	68b9      	ldr	r1, [r7, #8]
 80210b8:	2002      	movs	r0, #2
 80210ba:	f006 f95b 	bl	8027374 <HAL_FLASH_Program>
 80210be:	4603      	mov	r3, r0
 80210c0:	75fb      	strb	r3, [r7, #23]
        address += 4;
 80210c2:	68bb      	ldr	r3, [r7, #8]
 80210c4:	3304      	adds	r3, #4
 80210c6:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 80210c8:	7dfb      	ldrb	r3, [r7, #23]
 80210ca:	2b00      	cmp	r3, #0
 80210cc:	d103      	bne.n	80210d6 <_ZN5Flash10StoreFloatEmPfm+0x54>
    for(uint32_t i = 0; i < number; i++)
 80210ce:	693b      	ldr	r3, [r7, #16]
 80210d0:	3301      	adds	r3, #1
 80210d2:	613b      	str	r3, [r7, #16]
 80210d4:	e7e0      	b.n	8021098 <_ZN5Flash10StoreFloatEmPfm+0x16>
        if(result != HAL_OK) break;
 80210d6:	bf00      	nop
    }

    HAL_FLASH_Lock();
 80210d8:	f006 f9c2 	bl	8027460 <HAL_FLASH_Lock>

    return result == HAL_OK;
 80210dc:	7dfb      	ldrb	r3, [r7, #23]
 80210de:	2b00      	cmp	r3, #0
 80210e0:	bf0c      	ite	eq
 80210e2:	2301      	moveq	r3, #1
 80210e4:	2300      	movne	r3, #0
 80210e6:	b2db      	uxtb	r3, r3
}
 80210e8:	4618      	mov	r0, r3
 80210ea:	371c      	adds	r7, #28
 80210ec:	46bd      	mov	sp, r7
 80210ee:	bd90      	pop	{r4, r7, pc}

080210f0 <_ZN5Flash14CheckBlankByteEmm>:
{
    memcpy(data, reinterpret_cast<uint32_t*>(address), size);
}

bool Flash::CheckBlankByte(uint32_t address, uint32_t number)
{
 80210f0:	b5b0      	push	{r4, r5, r7, lr}
 80210f2:	b088      	sub	sp, #32
 80210f4:	af00      	add	r7, sp, #0
 80210f6:	60f8      	str	r0, [r7, #12]
 80210f8:	60b9      	str	r1, [r7, #8]
 80210fa:	607a      	str	r2, [r7, #4]

    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);

    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;

    return true;
 80210fc:	466b      	mov	r3, sp
 80210fe:	461d      	mov	r5, r3
    uint8_t byte[number];
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	1e58      	subs	r0, r3, #1
 8021104:	61b8      	str	r0, [r7, #24]
 8021106:	4603      	mov	r3, r0
 8021108:	3301      	adds	r3, #1
 802110a:	4619      	mov	r1, r3
 802110c:	f04f 0200 	mov.w	r2, #0
 8021110:	f04f 0300 	mov.w	r3, #0
 8021114:	f04f 0400 	mov.w	r4, #0
 8021118:	00d4      	lsls	r4, r2, #3
 802111a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 802111e:	00cb      	lsls	r3, r1, #3
 8021120:	4603      	mov	r3, r0
 8021122:	3301      	adds	r3, #1
 8021124:	4619      	mov	r1, r3
 8021126:	f04f 0200 	mov.w	r2, #0
 802112a:	f04f 0300 	mov.w	r3, #0
 802112e:	f04f 0400 	mov.w	r4, #0
 8021132:	00d4      	lsls	r4, r2, #3
 8021134:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8021138:	00cb      	lsls	r3, r1, #3
 802113a:	4603      	mov	r3, r0
 802113c:	3301      	adds	r3, #1
 802113e:	3307      	adds	r3, #7
 8021140:	08db      	lsrs	r3, r3, #3
 8021142:	00db      	lsls	r3, r3, #3
 8021144:	ebad 0d03 	sub.w	sp, sp, r3
 8021148:	466b      	mov	r3, sp
 802114a:	3300      	adds	r3, #0
 802114c:	617b      	str	r3, [r7, #20]
    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);
 802114e:	697b      	ldr	r3, [r7, #20]
 8021150:	68b9      	ldr	r1, [r7, #8]
 8021152:	687a      	ldr	r2, [r7, #4]
 8021154:	4618      	mov	r0, r3
 8021156:	f009 f8b9 	bl	802a2cc <memcpy>
    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;
 802115a:	2300      	movs	r3, #0
 802115c:	61fb      	str	r3, [r7, #28]
 802115e:	69fa      	ldr	r2, [r7, #28]
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	429a      	cmp	r2, r3
 8021164:	d20b      	bcs.n	802117e <_ZN5Flash14CheckBlankByteEmm+0x8e>
 8021166:	697a      	ldr	r2, [r7, #20]
 8021168:	69fb      	ldr	r3, [r7, #28]
 802116a:	4413      	add	r3, r2
 802116c:	781b      	ldrb	r3, [r3, #0]
 802116e:	2bff      	cmp	r3, #255	; 0xff
 8021170:	d001      	beq.n	8021176 <_ZN5Flash14CheckBlankByteEmm+0x86>
 8021172:	2300      	movs	r3, #0
 8021174:	e004      	b.n	8021180 <_ZN5Flash14CheckBlankByteEmm+0x90>
 8021176:	69fb      	ldr	r3, [r7, #28]
 8021178:	3301      	adds	r3, #1
 802117a:	61fb      	str	r3, [r7, #28]
 802117c:	e7ef      	b.n	802115e <_ZN5Flash14CheckBlankByteEmm+0x6e>
    return true;
 802117e:	2301      	movs	r3, #1
 8021180:	46ad      	mov	sp, r5
}
 8021182:	4618      	mov	r0, r3
 8021184:	3720      	adds	r7, #32
 8021186:	46bd      	mov	sp, r7
 8021188:	bdb0      	pop	{r4, r5, r7, pc}

0802118a <_ZN5Flash18CheckBlankHalfwordEmm>:

bool Flash::CheckBlankHalfword(uint32_t address, uint32_t number)
{
 802118a:	b5b0      	push	{r4, r5, r7, lr}
 802118c:	b088      	sub	sp, #32
 802118e:	af00      	add	r7, sp, #0
 8021190:	60f8      	str	r0, [r7, #12]
 8021192:	60b9      	str	r1, [r7, #8]
 8021194:	607a      	str	r2, [r7, #4]

    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);

    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;

    return true;
 8021196:	466b      	mov	r3, sp
 8021198:	461d      	mov	r5, r3
    uint16_t half[number];
 802119a:	687b      	ldr	r3, [r7, #4]
 802119c:	1e58      	subs	r0, r3, #1
 802119e:	61b8      	str	r0, [r7, #24]
 80211a0:	4603      	mov	r3, r0
 80211a2:	3301      	adds	r3, #1
 80211a4:	4619      	mov	r1, r3
 80211a6:	f04f 0200 	mov.w	r2, #0
 80211aa:	f04f 0300 	mov.w	r3, #0
 80211ae:	f04f 0400 	mov.w	r4, #0
 80211b2:	0114      	lsls	r4, r2, #4
 80211b4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80211b8:	010b      	lsls	r3, r1, #4
 80211ba:	4603      	mov	r3, r0
 80211bc:	3301      	adds	r3, #1
 80211be:	4619      	mov	r1, r3
 80211c0:	f04f 0200 	mov.w	r2, #0
 80211c4:	f04f 0300 	mov.w	r3, #0
 80211c8:	f04f 0400 	mov.w	r4, #0
 80211cc:	0114      	lsls	r4, r2, #4
 80211ce:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80211d2:	010b      	lsls	r3, r1, #4
 80211d4:	4603      	mov	r3, r0
 80211d6:	3301      	adds	r3, #1
 80211d8:	005b      	lsls	r3, r3, #1
 80211da:	3301      	adds	r3, #1
 80211dc:	3307      	adds	r3, #7
 80211de:	08db      	lsrs	r3, r3, #3
 80211e0:	00db      	lsls	r3, r3, #3
 80211e2:	ebad 0d03 	sub.w	sp, sp, r3
 80211e6:	466b      	mov	r3, sp
 80211e8:	3301      	adds	r3, #1
 80211ea:	085b      	lsrs	r3, r3, #1
 80211ec:	005b      	lsls	r3, r3, #1
 80211ee:	617b      	str	r3, [r7, #20]
    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);
 80211f0:	6978      	ldr	r0, [r7, #20]
 80211f2:	68b9      	ldr	r1, [r7, #8]
 80211f4:	687b      	ldr	r3, [r7, #4]
 80211f6:	005b      	lsls	r3, r3, #1
 80211f8:	461a      	mov	r2, r3
 80211fa:	f009 f867 	bl	802a2cc <memcpy>
    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;
 80211fe:	2300      	movs	r3, #0
 8021200:	61fb      	str	r3, [r7, #28]
 8021202:	69fa      	ldr	r2, [r7, #28]
 8021204:	687b      	ldr	r3, [r7, #4]
 8021206:	429a      	cmp	r2, r3
 8021208:	d20d      	bcs.n	8021226 <_ZN5Flash18CheckBlankHalfwordEmm+0x9c>
 802120a:	697b      	ldr	r3, [r7, #20]
 802120c:	69fa      	ldr	r2, [r7, #28]
 802120e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021216:	4293      	cmp	r3, r2
 8021218:	d001      	beq.n	802121e <_ZN5Flash18CheckBlankHalfwordEmm+0x94>
 802121a:	2300      	movs	r3, #0
 802121c:	e004      	b.n	8021228 <_ZN5Flash18CheckBlankHalfwordEmm+0x9e>
 802121e:	69fb      	ldr	r3, [r7, #28]
 8021220:	3301      	adds	r3, #1
 8021222:	61fb      	str	r3, [r7, #28]
 8021224:	e7ed      	b.n	8021202 <_ZN5Flash18CheckBlankHalfwordEmm+0x78>
    return true;
 8021226:	2301      	movs	r3, #1
 8021228:	46ad      	mov	sp, r5
}
 802122a:	4618      	mov	r0, r3
 802122c:	3720      	adds	r7, #32
 802122e:	46bd      	mov	sp, r7
 8021230:	bdb0      	pop	{r4, r5, r7, pc}

08021232 <_ZN5Flash14CheckBlankWordEmm>:

bool Flash::CheckBlankWord(uint32_t address, uint32_t number)
{
 8021232:	b5b0      	push	{r4, r5, r7, lr}
 8021234:	b088      	sub	sp, #32
 8021236:	af00      	add	r7, sp, #0
 8021238:	60f8      	str	r0, [r7, #12]
 802123a:	60b9      	str	r1, [r7, #8]
 802123c:	607a      	str	r2, [r7, #4]

    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);

    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;

    return true;
 802123e:	466b      	mov	r3, sp
 8021240:	461d      	mov	r5, r3
    uint32_t word[number];
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	1e58      	subs	r0, r3, #1
 8021246:	61b8      	str	r0, [r7, #24]
 8021248:	4603      	mov	r3, r0
 802124a:	3301      	adds	r3, #1
 802124c:	4619      	mov	r1, r3
 802124e:	f04f 0200 	mov.w	r2, #0
 8021252:	f04f 0300 	mov.w	r3, #0
 8021256:	f04f 0400 	mov.w	r4, #0
 802125a:	0154      	lsls	r4, r2, #5
 802125c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8021260:	014b      	lsls	r3, r1, #5
 8021262:	4603      	mov	r3, r0
 8021264:	3301      	adds	r3, #1
 8021266:	4619      	mov	r1, r3
 8021268:	f04f 0200 	mov.w	r2, #0
 802126c:	f04f 0300 	mov.w	r3, #0
 8021270:	f04f 0400 	mov.w	r4, #0
 8021274:	0154      	lsls	r4, r2, #5
 8021276:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 802127a:	014b      	lsls	r3, r1, #5
 802127c:	4603      	mov	r3, r0
 802127e:	3301      	adds	r3, #1
 8021280:	009b      	lsls	r3, r3, #2
 8021282:	3303      	adds	r3, #3
 8021284:	3307      	adds	r3, #7
 8021286:	08db      	lsrs	r3, r3, #3
 8021288:	00db      	lsls	r3, r3, #3
 802128a:	ebad 0d03 	sub.w	sp, sp, r3
 802128e:	466b      	mov	r3, sp
 8021290:	3303      	adds	r3, #3
 8021292:	089b      	lsrs	r3, r3, #2
 8021294:	009b      	lsls	r3, r3, #2
 8021296:	617b      	str	r3, [r7, #20]
    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);
 8021298:	6978      	ldr	r0, [r7, #20]
 802129a:	68b9      	ldr	r1, [r7, #8]
 802129c:	687b      	ldr	r3, [r7, #4]
 802129e:	009b      	lsls	r3, r3, #2
 80212a0:	461a      	mov	r2, r3
 80212a2:	f009 f813 	bl	802a2cc <memcpy>
    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;
 80212a6:	2300      	movs	r3, #0
 80212a8:	61fb      	str	r3, [r7, #28]
 80212aa:	69fa      	ldr	r2, [r7, #28]
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	429a      	cmp	r2, r3
 80212b0:	d20c      	bcs.n	80212cc <_ZN5Flash14CheckBlankWordEmm+0x9a>
 80212b2:	697b      	ldr	r3, [r7, #20]
 80212b4:	69fa      	ldr	r2, [r7, #28]
 80212b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80212ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80212be:	d001      	beq.n	80212c4 <_ZN5Flash14CheckBlankWordEmm+0x92>
 80212c0:	2300      	movs	r3, #0
 80212c2:	e004      	b.n	80212ce <_ZN5Flash14CheckBlankWordEmm+0x9c>
 80212c4:	69fb      	ldr	r3, [r7, #28]
 80212c6:	3301      	adds	r3, #1
 80212c8:	61fb      	str	r3, [r7, #28]
 80212ca:	e7ee      	b.n	80212aa <_ZN5Flash14CheckBlankWordEmm+0x78>
    return true;
 80212cc:	2301      	movs	r3, #1
 80212ce:	46ad      	mov	sp, r5
 80212d0:	4618      	mov	r0, r3
 80212d2:	3720      	adds	r7, #32
 80212d4:	46bd      	mov	sp, r7
 80212d6:	bdb0      	pop	{r4, r5, r7, pc}

080212d8 <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"
#include "declare_extern.h"

Iim42652::Iim42652() : degree_stack_z_(0) {}
 80212d8:	b490      	push	{r4, r7}
 80212da:	b082      	sub	sp, #8
 80212dc:	af00      	add	r7, sp, #0
 80212de:	6078      	str	r0, [r7, #4]
 80212e0:	687a      	ldr	r2, [r7, #4]
 80212e2:	f04f 0300 	mov.w	r3, #0
 80212e6:	f04f 0400 	mov.w	r4, #0
 80212ea:	e9c2 3400 	strd	r3, r4, [r2]
 80212ee:	687b      	ldr	r3, [r7, #4]
 80212f0:	4618      	mov	r0, r3
 80212f2:	3708      	adds	r7, #8
 80212f4:	46bd      	mov	sp, r7
 80212f6:	bc90      	pop	{r4, r7}
 80212f8:	4770      	bx	lr
	...

080212fc <_ZN8Iim426524InitEv>:

uint8_t Iim42652::Init()
{
 80212fc:	b580      	push	{r7, lr}
 80212fe:	b084      	sub	sp, #16
 8021300:	af00      	add	r7, sp, #0
 8021302:	6078      	str	r0, [r7, #4]
    /* bank_select */
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'L');
 8021304:	234c      	movs	r3, #76	; 0x4c
 8021306:	2200      	movs	r2, #0
 8021308:	2176      	movs	r1, #118	; 0x76
 802130a:	6878      	ldr	r0, [r7, #4]
 802130c:	f000 f908 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021310:	2064      	movs	r0, #100	; 0x64
 8021312:	f004 ff99 	bl	8026248 <HAL_Delay>
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'R');
 8021316:	2352      	movs	r3, #82	; 0x52
 8021318:	2200      	movs	r2, #0
 802131a:	2176      	movs	r1, #118	; 0x76
 802131c:	6878      	ldr	r0, [r7, #4]
 802131e:	f000 f8ff 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021322:	2064      	movs	r0, #100	; 0x64
 8021324:	f004 ff90 	bl	8026248 <HAL_Delay>
    /* power_off */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'L');
 8021328:	234c      	movs	r3, #76	; 0x4c
 802132a:	2200      	movs	r2, #0
 802132c:	214e      	movs	r1, #78	; 0x4e
 802132e:	6878      	ldr	r0, [r7, #4]
 8021330:	f000 f8f6 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021334:	2064      	movs	r0, #100	; 0x64
 8021336:	f004 ff87 	bl	8026248 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'R');
 802133a:	2352      	movs	r3, #82	; 0x52
 802133c:	2200      	movs	r2, #0
 802133e:	214e      	movs	r1, #78	; 0x4e
 8021340:	6878      	ldr	r0, [r7, #4]
 8021342:	f000 f8ed 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021346:	2064      	movs	r0, #100	; 0x64
 8021348:	f004 ff7e 	bl	8026248 <HAL_Delay>

    uint8_t who_l  = Read(WHO_AM_I_ADD, 'L');
 802134c:	224c      	movs	r2, #76	; 0x4c
 802134e:	2175      	movs	r1, #117	; 0x75
 8021350:	6878      	ldr	r0, [r7, #4]
 8021352:	f000 f897 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021356:	4603      	mov	r3, r0
 8021358:	73fb      	strb	r3, [r7, #15]
    uint8_t who_r  = Read(WHO_AM_I_ADD, 'R');
 802135a:	2252      	movs	r2, #82	; 0x52
 802135c:	2175      	movs	r1, #117	; 0x75
 802135e:	6878      	ldr	r0, [r7, #4]
 8021360:	f000 f890 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021364:	4603      	mov	r3, r0
 8021366:	73bb      	strb	r3, [r7, #14]
    uint8_t bank_l = Read(REG_BANK_SEL_ADD, 'L');
 8021368:	224c      	movs	r2, #76	; 0x4c
 802136a:	2176      	movs	r1, #118	; 0x76
 802136c:	6878      	ldr	r0, [r7, #4]
 802136e:	f000 f889 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021372:	4603      	mov	r3, r0
 8021374:	737b      	strb	r3, [r7, #13]
    uint8_t bank_r = Read(REG_BANK_SEL_ADD, 'R');
 8021376:	2252      	movs	r2, #82	; 0x52
 8021378:	2176      	movs	r1, #118	; 0x76
 802137a:	6878      	ldr	r0, [r7, #4]
 802137c:	f000 f882 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021380:	4603      	mov	r3, r0
 8021382:	733b      	strb	r3, [r7, #12]
    uint8_t pwr_l  = Read(PWR_MGMT0_ADD, 'L');
 8021384:	224c      	movs	r2, #76	; 0x4c
 8021386:	214e      	movs	r1, #78	; 0x4e
 8021388:	6878      	ldr	r0, [r7, #4]
 802138a:	f000 f87b 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802138e:	4603      	mov	r3, r0
 8021390:	72fb      	strb	r3, [r7, #11]
    uint8_t pwr_r  = Read(PWR_MGMT0_ADD, 'R');
 8021392:	2252      	movs	r2, #82	; 0x52
 8021394:	214e      	movs	r1, #78	; 0x4e
 8021396:	6878      	ldr	r0, [r7, #4]
 8021398:	f000 f874 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802139c:	4603      	mov	r3, r0
 802139e:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_who_l  = who_l;  g_imu_who_r  = who_r;
 80213a0:	4a32      	ldr	r2, [pc, #200]	; (802146c <_ZN8Iim426524InitEv+0x170>)
 80213a2:	7bfb      	ldrb	r3, [r7, #15]
 80213a4:	7013      	strb	r3, [r2, #0]
 80213a6:	4a32      	ldr	r2, [pc, #200]	; (8021470 <_ZN8Iim426524InitEv+0x174>)
 80213a8:	7bbb      	ldrb	r3, [r7, #14]
 80213aa:	7013      	strb	r3, [r2, #0]
    g_imu_bank_l = bank_l; g_imu_bank_r = bank_r;
 80213ac:	4a31      	ldr	r2, [pc, #196]	; (8021474 <_ZN8Iim426524InitEv+0x178>)
 80213ae:	7b7b      	ldrb	r3, [r7, #13]
 80213b0:	7013      	strb	r3, [r2, #0]
 80213b2:	4a31      	ldr	r2, [pc, #196]	; (8021478 <_ZN8Iim426524InitEv+0x17c>)
 80213b4:	7b3b      	ldrb	r3, [r7, #12]
 80213b6:	7013      	strb	r3, [r2, #0]
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 80213b8:	4a30      	ldr	r2, [pc, #192]	; (802147c <_ZN8Iim426524InitEv+0x180>)
 80213ba:	7afb      	ldrb	r3, [r7, #11]
 80213bc:	7013      	strb	r3, [r2, #0]
 80213be:	4a30      	ldr	r2, [pc, #192]	; (8021480 <_ZN8Iim426524InitEv+0x184>)
 80213c0:	7abb      	ldrb	r3, [r7, #10]
 80213c2:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(who_l != WHO_AM_I_RES)      return 0x01;
 80213c4:	7bfb      	ldrb	r3, [r7, #15]
 80213c6:	2b6f      	cmp	r3, #111	; 0x6f
 80213c8:	d001      	beq.n	80213ce <_ZN8Iim426524InitEv+0xd2>
 80213ca:	2301      	movs	r3, #1
 80213cc:	e049      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(who_r != WHO_AM_I_RES)      return 0x02;
 80213ce:	7bbb      	ldrb	r3, [r7, #14]
 80213d0:	2b6f      	cmp	r3, #111	; 0x6f
 80213d2:	d001      	beq.n	80213d8 <_ZN8Iim426524InitEv+0xdc>
 80213d4:	2302      	movs	r3, #2
 80213d6:	e044      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(bank_l != REG_BANK_SEL_RES) return 0x03;
 80213d8:	7b7b      	ldrb	r3, [r7, #13]
 80213da:	2b00      	cmp	r3, #0
 80213dc:	d001      	beq.n	80213e2 <_ZN8Iim426524InitEv+0xe6>
 80213de:	2303      	movs	r3, #3
 80213e0:	e03f      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(bank_r != REG_BANK_SEL_RES) return 0x04;
 80213e2:	7b3b      	ldrb	r3, [r7, #12]
 80213e4:	2b00      	cmp	r3, #0
 80213e6:	d001      	beq.n	80213ec <_ZN8Iim426524InitEv+0xf0>
 80213e8:	2304      	movs	r3, #4
 80213ea:	e03a      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(pwr_l != PWR_MGMT0_RES)     return 0x05;
 80213ec:	7afb      	ldrb	r3, [r7, #11]
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	d001      	beq.n	80213f6 <_ZN8Iim426524InitEv+0xfa>
 80213f2:	2305      	movs	r3, #5
 80213f4:	e035      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_RES)     return 0x06;
 80213f6:	7abb      	ldrb	r3, [r7, #10]
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d001      	beq.n	8021400 <_ZN8Iim426524InitEv+0x104>
 80213fc:	2306      	movs	r3, #6
 80213fe:	e030      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>

    /* power_on */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'L');
 8021400:	234c      	movs	r3, #76	; 0x4c
 8021402:	220f      	movs	r2, #15
 8021404:	214e      	movs	r1, #78	; 0x4e
 8021406:	6878      	ldr	r0, [r7, #4]
 8021408:	f000 f88a 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 802140c:	2064      	movs	r0, #100	; 0x64
 802140e:	f004 ff1b 	bl	8026248 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'R');
 8021412:	2352      	movs	r3, #82	; 0x52
 8021414:	220f      	movs	r2, #15
 8021416:	214e      	movs	r1, #78	; 0x4e
 8021418:	6878      	ldr	r0, [r7, #4]
 802141a:	f000 f881 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 802141e:	2064      	movs	r0, #100	; 0x64
 8021420:	f004 ff12 	bl	8026248 <HAL_Delay>
    pwr_l = Read(PWR_MGMT0_ADD, 'L');
 8021424:	224c      	movs	r2, #76	; 0x4c
 8021426:	214e      	movs	r1, #78	; 0x4e
 8021428:	6878      	ldr	r0, [r7, #4]
 802142a:	f000 f82b 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802142e:	4603      	mov	r3, r0
 8021430:	72fb      	strb	r3, [r7, #11]
    pwr_r = Read(PWR_MGMT0_ADD, 'R');
 8021432:	2252      	movs	r2, #82	; 0x52
 8021434:	214e      	movs	r1, #78	; 0x4e
 8021436:	6878      	ldr	r0, [r7, #4]
 8021438:	f000 f824 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802143c:	4603      	mov	r3, r0
 802143e:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 8021440:	4a0e      	ldr	r2, [pc, #56]	; (802147c <_ZN8Iim426524InitEv+0x180>)
 8021442:	7afb      	ldrb	r3, [r7, #11]
 8021444:	7013      	strb	r3, [r2, #0]
 8021446:	4a0e      	ldr	r2, [pc, #56]	; (8021480 <_ZN8Iim426524InitEv+0x184>)
 8021448:	7abb      	ldrb	r3, [r7, #10]
 802144a:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(pwr_l != PWR_MGMT0_ON) return 0x07;
 802144c:	7afb      	ldrb	r3, [r7, #11]
 802144e:	2b0f      	cmp	r3, #15
 8021450:	d001      	beq.n	8021456 <_ZN8Iim426524InitEv+0x15a>
 8021452:	2307      	movs	r3, #7
 8021454:	e005      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_ON) return 0x08;
 8021456:	7abb      	ldrb	r3, [r7, #10]
 8021458:	2b0f      	cmp	r3, #15
 802145a:	d001      	beq.n	8021460 <_ZN8Iim426524InitEv+0x164>
 802145c:	2308      	movs	r3, #8
 802145e:	e000      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>

    return 0x09;
 8021460:	2309      	movs	r3, #9
}
 8021462:	4618      	mov	r0, r3
 8021464:	3710      	adds	r7, #16
 8021466:	46bd      	mov	sp, r7
 8021468:	bd80      	pop	{r7, pc}
 802146a:	bf00      	nop
 802146c:	20000249 	.word	0x20000249
 8021470:	2000024a 	.word	0x2000024a
 8021474:	2000024b 	.word	0x2000024b
 8021478:	2000024c 	.word	0x2000024c
 802147c:	2000024d 	.word	0x2000024d
 8021480:	2000024e 	.word	0x2000024e

08021484 <_ZN8Iim426524ReadEhc>:

uint8_t Iim42652::Read(uint8_t send_address, char imu_ic_lr)
{
 8021484:	b580      	push	{r7, lr}
 8021486:	b084      	sub	sp, #16
 8021488:	af00      	add	r7, sp, #0
 802148a:	6078      	str	r0, [r7, #4]
 802148c:	460b      	mov	r3, r1
 802148e:	70fb      	strb	r3, [r7, #3]
 8021490:	4613      	mov	r3, r2
 8021492:	70bb      	strb	r3, [r7, #2]
    uint8_t receive_reset_value = 0x00;
 8021494:	2300      	movs	r3, #0
 8021496:	73fb      	strb	r3, [r7, #15]

    send_address = send_address | 0x80; // Read 1--- ----
 8021498:	78fb      	ldrb	r3, [r7, #3]
 802149a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802149e:	b2db      	uxtb	r3, r3
 80214a0:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 80214a2:	78bb      	ldrb	r3, [r7, #2]
 80214a4:	2b4c      	cmp	r3, #76	; 0x4c
 80214a6:	d106      	bne.n	80214b6 <_ZN8Iim426524ReadEhc+0x32>
 80214a8:	2200      	movs	r2, #0
 80214aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80214ae:	4819      	ldr	r0, [pc, #100]	; (8021514 <_ZN8Iim426524ReadEhc+0x90>)
 80214b0:	f006 fbe8 	bl	8027c84 <HAL_GPIO_WritePin>
 80214b4:	e008      	b.n	80214c8 <_ZN8Iim426524ReadEhc+0x44>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 80214b6:	78bb      	ldrb	r3, [r7, #2]
 80214b8:	2b52      	cmp	r3, #82	; 0x52
 80214ba:	d105      	bne.n	80214c8 <_ZN8Iim426524ReadEhc+0x44>
 80214bc:	2200      	movs	r2, #0
 80214be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80214c2:	4815      	ldr	r0, [pc, #84]	; (8021518 <_ZN8Iim426524ReadEhc+0x94>)
 80214c4:	f006 fbde 	bl	8027c84 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 80214c8:	1cf9      	adds	r1, r7, #3
 80214ca:	2364      	movs	r3, #100	; 0x64
 80214cc:	2201      	movs	r2, #1
 80214ce:	4813      	ldr	r0, [pc, #76]	; (802151c <_ZN8Iim426524ReadEhc+0x98>)
 80214d0:	f007 f9b6 	bl	8028840 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &receive_reset_value, 1, 100);
 80214d4:	f107 010f 	add.w	r1, r7, #15
 80214d8:	2364      	movs	r3, #100	; 0x64
 80214da:	2201      	movs	r2, #1
 80214dc:	480f      	ldr	r0, [pc, #60]	; (802151c <_ZN8Iim426524ReadEhc+0x98>)
 80214de:	f007 fae3 	bl	8028aa8 <HAL_SPI_Receive>

    if(imu_ic_lr == 'L') CS_SET_L;
 80214e2:	78bb      	ldrb	r3, [r7, #2]
 80214e4:	2b4c      	cmp	r3, #76	; 0x4c
 80214e6:	d106      	bne.n	80214f6 <_ZN8Iim426524ReadEhc+0x72>
 80214e8:	2201      	movs	r2, #1
 80214ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80214ee:	4809      	ldr	r0, [pc, #36]	; (8021514 <_ZN8Iim426524ReadEhc+0x90>)
 80214f0:	f006 fbc8 	bl	8027c84 <HAL_GPIO_WritePin>
 80214f4:	e008      	b.n	8021508 <_ZN8Iim426524ReadEhc+0x84>
    else if(imu_ic_lr == 'R') CS_SET_R;
 80214f6:	78bb      	ldrb	r3, [r7, #2]
 80214f8:	2b52      	cmp	r3, #82	; 0x52
 80214fa:	d105      	bne.n	8021508 <_ZN8Iim426524ReadEhc+0x84>
 80214fc:	2201      	movs	r2, #1
 80214fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021502:	4805      	ldr	r0, [pc, #20]	; (8021518 <_ZN8Iim426524ReadEhc+0x94>)
 8021504:	f006 fbbe 	bl	8027c84 <HAL_GPIO_WritePin>
    
    return receive_reset_value;
 8021508:	7bfb      	ldrb	r3, [r7, #15]
}
 802150a:	4618      	mov	r0, r3
 802150c:	3710      	adds	r7, #16
 802150e:	46bd      	mov	sp, r7
 8021510:	bd80      	pop	{r7, pc}
 8021512:	bf00      	nop
 8021514:	40020400 	.word	0x40020400
 8021518:	40020000 	.word	0x40020000
 802151c:	20000740 	.word	0x20000740

08021520 <_ZN8Iim426525WriteEhhc>:

void Iim42652::Write(uint8_t send_address, uint8_t send_data, char imu_ic_lr)
{
 8021520:	b580      	push	{r7, lr}
 8021522:	b082      	sub	sp, #8
 8021524:	af00      	add	r7, sp, #0
 8021526:	6078      	str	r0, [r7, #4]
 8021528:	4608      	mov	r0, r1
 802152a:	4611      	mov	r1, r2
 802152c:	461a      	mov	r2, r3
 802152e:	4603      	mov	r3, r0
 8021530:	70fb      	strb	r3, [r7, #3]
 8021532:	460b      	mov	r3, r1
 8021534:	70bb      	strb	r3, [r7, #2]
 8021536:	4613      	mov	r3, r2
 8021538:	707b      	strb	r3, [r7, #1]
    send_address = send_address & 0x7F; // Write 0--- ----
 802153a:	78fb      	ldrb	r3, [r7, #3]
 802153c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021540:	b2db      	uxtb	r3, r3
 8021542:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 8021544:	787b      	ldrb	r3, [r7, #1]
 8021546:	2b4c      	cmp	r3, #76	; 0x4c
 8021548:	d106      	bne.n	8021558 <_ZN8Iim426525WriteEhhc+0x38>
 802154a:	2200      	movs	r2, #0
 802154c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8021550:	4817      	ldr	r0, [pc, #92]	; (80215b0 <_ZN8Iim426525WriteEhhc+0x90>)
 8021552:	f006 fb97 	bl	8027c84 <HAL_GPIO_WritePin>
 8021556:	e008      	b.n	802156a <_ZN8Iim426525WriteEhhc+0x4a>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 8021558:	787b      	ldrb	r3, [r7, #1]
 802155a:	2b52      	cmp	r3, #82	; 0x52
 802155c:	d105      	bne.n	802156a <_ZN8Iim426525WriteEhhc+0x4a>
 802155e:	2200      	movs	r2, #0
 8021560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021564:	4813      	ldr	r0, [pc, #76]	; (80215b4 <_ZN8Iim426525WriteEhhc+0x94>)
 8021566:	f006 fb8d 	bl	8027c84 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 802156a:	1cf9      	adds	r1, r7, #3
 802156c:	2364      	movs	r3, #100	; 0x64
 802156e:	2201      	movs	r2, #1
 8021570:	4811      	ldr	r0, [pc, #68]	; (80215b8 <_ZN8Iim426525WriteEhhc+0x98>)
 8021572:	f007 f965 	bl	8028840 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &send_data, 1, 100);
 8021576:	1cb9      	adds	r1, r7, #2
 8021578:	2364      	movs	r3, #100	; 0x64
 802157a:	2201      	movs	r2, #1
 802157c:	480e      	ldr	r0, [pc, #56]	; (80215b8 <_ZN8Iim426525WriteEhhc+0x98>)
 802157e:	f007 f95f 	bl	8028840 <HAL_SPI_Transmit>

    if(imu_ic_lr == 'L') CS_SET_L;
 8021582:	787b      	ldrb	r3, [r7, #1]
 8021584:	2b4c      	cmp	r3, #76	; 0x4c
 8021586:	d106      	bne.n	8021596 <_ZN8Iim426525WriteEhhc+0x76>
 8021588:	2201      	movs	r2, #1
 802158a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802158e:	4808      	ldr	r0, [pc, #32]	; (80215b0 <_ZN8Iim426525WriteEhhc+0x90>)
 8021590:	f006 fb78 	bl	8027c84 <HAL_GPIO_WritePin>
    else if(imu_ic_lr == 'R') CS_SET_R;
}
 8021594:	e008      	b.n	80215a8 <_ZN8Iim426525WriteEhhc+0x88>
    else if(imu_ic_lr == 'R') CS_SET_R;
 8021596:	787b      	ldrb	r3, [r7, #1]
 8021598:	2b52      	cmp	r3, #82	; 0x52
 802159a:	d105      	bne.n	80215a8 <_ZN8Iim426525WriteEhhc+0x88>
 802159c:	2201      	movs	r2, #1
 802159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80215a2:	4804      	ldr	r0, [pc, #16]	; (80215b4 <_ZN8Iim426525WriteEhhc+0x94>)
 80215a4:	f006 fb6e 	bl	8027c84 <HAL_GPIO_WritePin>
}
 80215a8:	bf00      	nop
 80215aa:	3708      	adds	r7, #8
 80215ac:	46bd      	mov	sp, r7
 80215ae:	bd80      	pop	{r7, pc}
 80215b0:	40020400 	.word	0x40020400
 80215b4:	40020000 	.word	0x40020000
 80215b8:	20000740 	.word	0x20000740

080215bc <_ZN8Iim426529Read2ByteEhhc>:

    return CheckRead(send_address, send_data, imu_ic_lr);
}

int16_t Iim42652::Read2Byte(uint8_t upper_address, uint8_t lower_address, char imu_ic_lr)
{
 80215bc:	b580      	push	{r7, lr}
 80215be:	b084      	sub	sp, #16
 80215c0:	af00      	add	r7, sp, #0
 80215c2:	6078      	str	r0, [r7, #4]
 80215c4:	4608      	mov	r0, r1
 80215c6:	4611      	mov	r1, r2
 80215c8:	461a      	mov	r2, r3
 80215ca:	4603      	mov	r3, r0
 80215cc:	70fb      	strb	r3, [r7, #3]
 80215ce:	460b      	mov	r3, r1
 80215d0:	70bb      	strb	r3, [r7, #2]
 80215d2:	4613      	mov	r3, r2
 80215d4:	707b      	strb	r3, [r7, #1]
    int16_t upper_receive, lower_receive;

    upper_receive = static_cast<int16_t>(Read(upper_address, imu_ic_lr));
 80215d6:	787a      	ldrb	r2, [r7, #1]
 80215d8:	78fb      	ldrb	r3, [r7, #3]
 80215da:	4619      	mov	r1, r3
 80215dc:	6878      	ldr	r0, [r7, #4]
 80215de:	f7ff ff51 	bl	8021484 <_ZN8Iim426524ReadEhc>
 80215e2:	4603      	mov	r3, r0
 80215e4:	81fb      	strh	r3, [r7, #14]
    lower_receive = static_cast<int16_t>(Read(lower_address, imu_ic_lr));
 80215e6:	787a      	ldrb	r2, [r7, #1]
 80215e8:	78bb      	ldrb	r3, [r7, #2]
 80215ea:	4619      	mov	r1, r3
 80215ec:	6878      	ldr	r0, [r7, #4]
 80215ee:	f7ff ff49 	bl	8021484 <_ZN8Iim426524ReadEhc>
 80215f2:	4603      	mov	r3, r0
 80215f4:	81bb      	strh	r3, [r7, #12]

    return (upper_receive << 8) | lower_receive;
 80215f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80215fa:	021b      	lsls	r3, r3, #8
 80215fc:	b21a      	sxth	r2, r3
 80215fe:	89bb      	ldrh	r3, [r7, #12]
 8021600:	4313      	orrs	r3, r2
 8021602:	b21b      	sxth	r3, r3
}
 8021604:	4618      	mov	r0, r3
 8021606:	3710      	adds	r7, #16
 8021608:	46bd      	mov	sp, r7
 802160a:	bd80      	pop	{r7, pc}
 802160c:	0000      	movs	r0, r0
	...

08021610 <_ZN8Iim426526UpdateEv>:

void Iim42652::Update()
{
 8021610:	b590      	push	{r4, r7, lr}
 8021612:	b089      	sub	sp, #36	; 0x24
 8021614:	af00      	add	r7, sp, #0
 8021616:	6078      	str	r0, [r7, #4]
    int16_t raw_z_l = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
 8021618:	234c      	movs	r3, #76	; 0x4c
 802161a:	222a      	movs	r2, #42	; 0x2a
 802161c:	2129      	movs	r1, #41	; 0x29
 802161e:	6878      	ldr	r0, [r7, #4]
 8021620:	f7ff ffcc 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021624:	4603      	mov	r3, r0
 8021626:	83fb      	strh	r3, [r7, #30]
    int16_t raw_z_r = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 8021628:	2352      	movs	r3, #82	; 0x52
 802162a:	222a      	movs	r2, #42	; 0x2a
 802162c:	2129      	movs	r1, #41	; 0x29
 802162e:	6878      	ldr	r0, [r7, #4]
 8021630:	f7ff ffc4 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021634:	4603      	mov	r3, r0
 8021636:	83bb      	strh	r3, [r7, #28]
    double avg_raw_z = static_cast<double>(raw_z_l + raw_z_r) / 2.0;
 8021638:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 802163c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8021640:	4413      	add	r3, r2
 8021642:	4618      	mov	r0, r3
 8021644:	f7fe fe4e 	bl	80202e4 <__aeabi_i2d>
 8021648:	f04f 0200 	mov.w	r2, #0
 802164c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021650:	f7fe ffdc 	bl	802060c <__aeabi_ddiv>
 8021654:	4603      	mov	r3, r0
 8021656:	460c      	mov	r4, r1
 8021658:	e9c7 3404 	strd	r3, r4, [r7, #16]
    double degree_z = avg_raw_z * NORMAL_FUCOR_DPS * TIM6_PERIOD;
 802165c:	a316      	add	r3, pc, #88	; (adr r3, 80216b8 <_ZN8Iim426526UpdateEv+0xa8>)
 802165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021662:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8021666:	f7fe fea7 	bl	80203b8 <__aeabi_dmul>
 802166a:	4603      	mov	r3, r0
 802166c:	460c      	mov	r4, r1
 802166e:	4618      	mov	r0, r3
 8021670:	4621      	mov	r1, r4
 8021672:	f04f 0200 	mov.w	r2, #0
 8021676:	4b0e      	ldr	r3, [pc, #56]	; (80216b0 <_ZN8Iim426526UpdateEv+0xa0>)
 8021678:	f7fe fe9e 	bl	80203b8 <__aeabi_dmul>
 802167c:	4603      	mov	r3, r0
 802167e:	460c      	mov	r4, r1
 8021680:	e9c7 3402 	strd	r3, r4, [r7, #8]

    degree_stack_z_ += degree_z;
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	e9d3 0100 	ldrd	r0, r1, [r3]
 802168a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802168e:	f7fe fcdd 	bl	802004c <__adddf3>
 8021692:	4603      	mov	r3, r0
 8021694:	460c      	mov	r4, r1
 8021696:	687a      	ldr	r2, [r7, #4]
 8021698:	e9c2 3400 	strd	r3, r4, [r2]

#ifdef DEBUG_MODE
    g_deg_z = degree_z;
 802169c:	4a05      	ldr	r2, [pc, #20]	; (80216b4 <_ZN8Iim426526UpdateEv+0xa4>)
 802169e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80216a2:	e9c2 3400 	strd	r3, r4, [r2]
#endif // DEBUG_MODE
}
 80216a6:	bf00      	nop
 80216a8:	3724      	adds	r7, #36	; 0x24
 80216aa:	46bd      	mov	sp, r7
 80216ac:	bd90      	pop	{r4, r7, pc}
 80216ae:	bf00      	nop
 80216b0:	3ff40000 	.word	0x3ff40000
 80216b4:	20000250 	.word	0x20000250
 80216b8:	ddb1209f 	.word	0xddb1209f
 80216bc:	3faf403d 	.word	0x3faf403d

080216c0 <_ZN8Iim4265217ResetDegreeStackZEv>:

void Iim42652::ResetDegreeStackZ()
{
 80216c0:	b490      	push	{r4, r7}
 80216c2:	b082      	sub	sp, #8
 80216c4:	af00      	add	r7, sp, #0
 80216c6:	6078      	str	r0, [r7, #4]
    degree_stack_z_ = 0.0;
 80216c8:	687a      	ldr	r2, [r7, #4]
 80216ca:	f04f 0300 	mov.w	r3, #0
 80216ce:	f04f 0400 	mov.w	r4, #0
 80216d2:	e9c2 3400 	strd	r3, r4, [r2]
}
 80216d6:	bf00      	nop
 80216d8:	3708      	adds	r7, #8
 80216da:	46bd      	mov	sp, r7
 80216dc:	bc90      	pop	{r4, r7}
 80216de:	4770      	bx	lr

080216e0 <_ZN8Iim4265215GetDegreeStackZEv>:

double Iim42652::GetDegreeStackZ()
{
 80216e0:	b490      	push	{r4, r7}
 80216e2:	b082      	sub	sp, #8
 80216e4:	af00      	add	r7, sp, #0
 80216e6:	6078      	str	r0, [r7, #4]
    return degree_stack_z_;
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80216ee:	ec44 3b17 	vmov	d7, r3, r4
}
 80216f2:	eeb0 0a47 	vmov.f32	s0, s14
 80216f6:	eef0 0a67 	vmov.f32	s1, s15
 80216fa:	3708      	adds	r7, #8
 80216fc:	46bd      	mov	sp, r7
 80216fe:	bc90      	pop	{r4, r7}
 8021700:	4770      	bx	lr

08021702 <_ZN3LedC1Ev>:
#include "led.hpp"

Led::Led() : interrupt_count_(0)
 8021702:	b480      	push	{r7}
 8021704:	b083      	sub	sp, #12
 8021706:	af00      	add	r7, sp, #0
 8021708:	6078      	str	r0, [r7, #4]
           , interrupt_timer_(0) {}
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	2200      	movs	r2, #0
 802170e:	701a      	strb	r2, [r3, #0]
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	2200      	movs	r2, #0
 8021714:	705a      	strb	r2, [r3, #1]
 8021716:	687b      	ldr	r3, [r7, #4]
 8021718:	4618      	mov	r0, r3
 802171a:	370c      	adds	r7, #12
 802171c:	46bd      	mov	sp, r7
 802171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021722:	4770      	bx	lr

08021724 <_ZN3Led10ColorOrderEc>:

void Led::ColorOrder(char color)
{
 8021724:	b580      	push	{r7, lr}
 8021726:	b082      	sub	sp, #8
 8021728:	af00      	add	r7, sp, #0
 802172a:	6078      	str	r0, [r7, #4]
 802172c:	460b      	mov	r3, r1
 802172e:	70fb      	strb	r3, [r7, #3]
    switch(color)
 8021730:	78fb      	ldrb	r3, [r7, #3]
 8021732:	3b42      	subs	r3, #66	; 0x42
 8021734:	2b17      	cmp	r3, #23
 8021736:	f200 80b8 	bhi.w	80218aa <_ZN3Led10ColorOrderEc+0x186>
 802173a:	a201      	add	r2, pc, #4	; (adr r2, 8021740 <_ZN3Led10ColorOrderEc+0x1c>)
 802173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021740:	080217ed 	.word	0x080217ed
 8021744:	08021839 	.word	0x08021839
 8021748:	080218ab 	.word	0x080218ab
 802174c:	080218ab 	.word	0x080218ab
 8021750:	080218ab 	.word	0x080218ab
 8021754:	080217c7 	.word	0x080217c7
 8021758:	080218ab 	.word	0x080218ab
 802175c:	080218ab 	.word	0x080218ab
 8021760:	080218ab 	.word	0x080218ab
 8021764:	080218ab 	.word	0x080218ab
 8021768:	080218ab 	.word	0x080218ab
 802176c:	0802185f 	.word	0x0802185f
 8021770:	080218ab 	.word	0x080218ab
 8021774:	080218ab 	.word	0x080218ab
 8021778:	080218ab 	.word	0x080218ab
 802177c:	080218ab 	.word	0x080218ab
 8021780:	080217a1 	.word	0x080217a1
 8021784:	080218ab 	.word	0x080218ab
 8021788:	080218ab 	.word	0x080218ab
 802178c:	080218ab 	.word	0x080218ab
 8021790:	080218ab 	.word	0x080218ab
 8021794:	08021885 	.word	0x08021885
 8021798:	080218ab 	.word	0x080218ab
 802179c:	08021813 	.word	0x08021813
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 80217a0:	2200      	movs	r2, #0
 80217a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80217a6:	484c      	ldr	r0, [pc, #304]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217a8:	f006 fa6c 	bl	8027c84 <HAL_GPIO_WritePin>
 80217ac:	2201      	movs	r2, #1
 80217ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80217b2:	4849      	ldr	r0, [pc, #292]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217b4:	f006 fa66 	bl	8027c84 <HAL_GPIO_WritePin>
 80217b8:	2201      	movs	r2, #1
 80217ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80217be:	4846      	ldr	r0, [pc, #280]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217c0:	f006 fa60 	bl	8027c84 <HAL_GPIO_WritePin>
 80217c4:	e084      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 80217c6:	2201      	movs	r2, #1
 80217c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80217cc:	4842      	ldr	r0, [pc, #264]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217ce:	f006 fa59 	bl	8027c84 <HAL_GPIO_WritePin>
 80217d2:	2200      	movs	r2, #0
 80217d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80217d8:	483f      	ldr	r0, [pc, #252]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217da:	f006 fa53 	bl	8027c84 <HAL_GPIO_WritePin>
 80217de:	2201      	movs	r2, #1
 80217e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80217e4:	483c      	ldr	r0, [pc, #240]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217e6:	f006 fa4d 	bl	8027c84 <HAL_GPIO_WritePin>
 80217ea:	e071      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 80217ec:	2201      	movs	r2, #1
 80217ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80217f2:	4839      	ldr	r0, [pc, #228]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217f4:	f006 fa46 	bl	8027c84 <HAL_GPIO_WritePin>
 80217f8:	2201      	movs	r2, #1
 80217fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80217fe:	4836      	ldr	r0, [pc, #216]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021800:	f006 fa40 	bl	8027c84 <HAL_GPIO_WritePin>
 8021804:	2200      	movs	r2, #0
 8021806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802180a:	4833      	ldr	r0, [pc, #204]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802180c:	f006 fa3a 	bl	8027c84 <HAL_GPIO_WritePin>
 8021810:	e05e      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 8021812:	2200      	movs	r2, #0
 8021814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021818:	482f      	ldr	r0, [pc, #188]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802181a:	f006 fa33 	bl	8027c84 <HAL_GPIO_WritePin>
 802181e:	2200      	movs	r2, #0
 8021820:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021824:	482c      	ldr	r0, [pc, #176]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021826:	f006 fa2d 	bl	8027c84 <HAL_GPIO_WritePin>
 802182a:	2201      	movs	r2, #1
 802182c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021830:	4829      	ldr	r0, [pc, #164]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021832:	f006 fa27 	bl	8027c84 <HAL_GPIO_WritePin>
 8021836:	e04b      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 8021838:	2201      	movs	r2, #1
 802183a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802183e:	4826      	ldr	r0, [pc, #152]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021840:	f006 fa20 	bl	8027c84 <HAL_GPIO_WritePin>
 8021844:	2200      	movs	r2, #0
 8021846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802184a:	4823      	ldr	r0, [pc, #140]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802184c:	f006 fa1a 	bl	8027c84 <HAL_GPIO_WritePin>
 8021850:	2200      	movs	r2, #0
 8021852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021856:	4820      	ldr	r0, [pc, #128]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021858:	f006 fa14 	bl	8027c84 <HAL_GPIO_WritePin>
 802185c:	e038      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 802185e:	2200      	movs	r2, #0
 8021860:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021864:	481c      	ldr	r0, [pc, #112]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021866:	f006 fa0d 	bl	8027c84 <HAL_GPIO_WritePin>
 802186a:	2201      	movs	r2, #1
 802186c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021870:	4819      	ldr	r0, [pc, #100]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021872:	f006 fa07 	bl	8027c84 <HAL_GPIO_WritePin>
 8021876:	2200      	movs	r2, #0
 8021878:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802187c:	4816      	ldr	r0, [pc, #88]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802187e:	f006 fa01 	bl	8027c84 <HAL_GPIO_WritePin>
 8021882:	e025      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 8021884:	2200      	movs	r2, #0
 8021886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802188a:	4813      	ldr	r0, [pc, #76]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802188c:	f006 f9fa 	bl	8027c84 <HAL_GPIO_WritePin>
 8021890:	2200      	movs	r2, #0
 8021892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021896:	4810      	ldr	r0, [pc, #64]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021898:	f006 f9f4 	bl	8027c84 <HAL_GPIO_WritePin>
 802189c:	2200      	movs	r2, #0
 802189e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80218a2:	480d      	ldr	r0, [pc, #52]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218a4:	f006 f9ee 	bl	8027c84 <HAL_GPIO_WritePin>
 80218a8:	e012      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 80218aa:	2201      	movs	r2, #1
 80218ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80218b0:	4809      	ldr	r0, [pc, #36]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218b2:	f006 f9e7 	bl	8027c84 <HAL_GPIO_WritePin>
 80218b6:	2201      	movs	r2, #1
 80218b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80218bc:	4806      	ldr	r0, [pc, #24]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218be:	f006 f9e1 	bl	8027c84 <HAL_GPIO_WritePin>
 80218c2:	2201      	movs	r2, #1
 80218c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80218c8:	4803      	ldr	r0, [pc, #12]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218ca:	f006 f9db 	bl	8027c84 <HAL_GPIO_WritePin>
 80218ce:	bf00      	nop
    }
}
 80218d0:	bf00      	nop
 80218d2:	3708      	adds	r7, #8
 80218d4:	46bd      	mov	sp, r7
 80218d6:	bd80      	pop	{r7, pc}
 80218d8:	40020800 	.word	0x40020800

080218dc <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 80218dc:	b580      	push	{r7, lr}
 80218de:	b084      	sub	sp, #16
 80218e0:	af00      	add	r7, sp, #0
 80218e2:	6078      	str	r0, [r7, #4]
 80218e4:	4608      	mov	r0, r1
 80218e6:	4611      	mov	r1, r2
 80218e8:	461a      	mov	r2, r3
 80218ea:	4603      	mov	r3, r0
 80218ec:	70fb      	strb	r3, [r7, #3]
 80218ee:	460b      	mov	r3, r1
 80218f0:	70bb      	strb	r3, [r7, #2]
 80218f2:	4613      	mov	r3, r2
 80218f4:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 80218f6:	2300      	movs	r3, #0
 80218f8:	73fb      	strb	r3, [r7, #15]
 80218fa:	7bfa      	ldrb	r2, [r7, #15]
 80218fc:	78fb      	ldrb	r3, [r7, #3]
 80218fe:	429a      	cmp	r2, r3
 8021900:	d215      	bcs.n	802192e <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 8021902:	78bb      	ldrb	r3, [r7, #2]
 8021904:	4619      	mov	r1, r3
 8021906:	6878      	ldr	r0, [r7, #4]
 8021908:	f7ff ff0c 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 802190c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021910:	f004 fc9a 	bl	8026248 <HAL_Delay>
        ColorOrder(color_2);
 8021914:	787b      	ldrb	r3, [r7, #1]
 8021916:	4619      	mov	r1, r3
 8021918:	6878      	ldr	r0, [r7, #4]
 802191a:	f7ff ff03 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 802191e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021922:	f004 fc91 	bl	8026248 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021926:	7bfb      	ldrb	r3, [r7, #15]
 8021928:	3301      	adds	r3, #1
 802192a:	73fb      	strb	r3, [r7, #15]
 802192c:	e7e5      	b.n	80218fa <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 802192e:	bf00      	nop
 8021930:	3710      	adds	r7, #16
 8021932:	46bd      	mov	sp, r7
 8021934:	bd80      	pop	{r7, pc}

08021936 <_ZN3Led7RainbowEh>:

void Led::Rainbow(uint8_t times)
{
 8021936:	b580      	push	{r7, lr}
 8021938:	b084      	sub	sp, #16
 802193a:	af00      	add	r7, sp, #0
 802193c:	6078      	str	r0, [r7, #4]
 802193e:	460b      	mov	r3, r1
 8021940:	70fb      	strb	r3, [r7, #3]
    for(uint8_t i = 0; i < times; i++)
 8021942:	2300      	movs	r3, #0
 8021944:	73fb      	strb	r3, [r7, #15]
 8021946:	7bfa      	ldrb	r2, [r7, #15]
 8021948:	78fb      	ldrb	r3, [r7, #3]
 802194a:	429a      	cmp	r2, r3
 802194c:	d233      	bcs.n	80219b6 <_ZN3Led7RainbowEh+0x80>
    {
        ColorOrder('R');
 802194e:	2152      	movs	r1, #82	; 0x52
 8021950:	6878      	ldr	r0, [r7, #4]
 8021952:	f7ff fee7 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021956:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802195a:	f004 fc75 	bl	8026248 <HAL_Delay>
        ColorOrder('Y');
 802195e:	2159      	movs	r1, #89	; 0x59
 8021960:	6878      	ldr	r0, [r7, #4]
 8021962:	f7ff fedf 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021966:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802196a:	f004 fc6d 	bl	8026248 <HAL_Delay>
        ColorOrder('G');
 802196e:	2147      	movs	r1, #71	; 0x47
 8021970:	6878      	ldr	r0, [r7, #4]
 8021972:	f7ff fed7 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021976:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802197a:	f004 fc65 	bl	8026248 <HAL_Delay>
        ColorOrder('C');
 802197e:	2143      	movs	r1, #67	; 0x43
 8021980:	6878      	ldr	r0, [r7, #4]
 8021982:	f7ff fecf 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021986:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802198a:	f004 fc5d 	bl	8026248 <HAL_Delay>
        ColorOrder('B');
 802198e:	2142      	movs	r1, #66	; 0x42
 8021990:	6878      	ldr	r0, [r7, #4]
 8021992:	f7ff fec7 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021996:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802199a:	f004 fc55 	bl	8026248 <HAL_Delay>
        ColorOrder('M');
 802199e:	214d      	movs	r1, #77	; 0x4d
 80219a0:	6878      	ldr	r0, [r7, #4]
 80219a2:	f7ff febf 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 80219a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80219aa:	f004 fc4d 	bl	8026248 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 80219ae:	7bfb      	ldrb	r3, [r7, #15]
 80219b0:	3301      	adds	r3, #1
 80219b2:	73fb      	strb	r3, [r7, #15]
 80219b4:	e7c7      	b.n	8021946 <_ZN3Led7RainbowEh+0x10>
    }
}
 80219b6:	bf00      	nop
 80219b8:	3710      	adds	r7, #16
 80219ba:	46bd      	mov	sp, r7
 80219bc:	bd80      	pop	{r7, pc}

080219be <_ZN3Led14BlinkInterruptEhcc>:

bool Led::BlinkInterrupt(uint8_t times, char color_1, char color_2)
{
 80219be:	b580      	push	{r7, lr}
 80219c0:	b084      	sub	sp, #16
 80219c2:	af00      	add	r7, sp, #0
 80219c4:	6078      	str	r0, [r7, #4]
 80219c6:	4608      	mov	r0, r1
 80219c8:	4611      	mov	r1, r2
 80219ca:	461a      	mov	r2, r3
 80219cc:	4603      	mov	r3, r0
 80219ce:	70fb      	strb	r3, [r7, #3]
 80219d0:	460b      	mov	r3, r1
 80219d2:	70bb      	strb	r3, [r7, #2]
 80219d4:	4613      	mov	r3, r2
 80219d6:	707b      	strb	r3, [r7, #1]
    uint8_t count = interrupt_count_;
 80219d8:	687b      	ldr	r3, [r7, #4]
 80219da:	781b      	ldrb	r3, [r3, #0]
 80219dc:	73fb      	strb	r3, [r7, #15]
    uint8_t timer = interrupt_timer_;
 80219de:	687b      	ldr	r3, [r7, #4]
 80219e0:	785b      	ldrb	r3, [r3, #1]
 80219e2:	73bb      	strb	r3, [r7, #14]
    bool blink_continue = true;
 80219e4:	2301      	movs	r3, #1
 80219e6:	737b      	strb	r3, [r7, #13]

    if(count < times){
 80219e8:	7bfa      	ldrb	r2, [r7, #15]
 80219ea:	78fb      	ldrb	r3, [r7, #3]
 80219ec:	429a      	cmp	r2, r3
 80219ee:	d21d      	bcs.n	8021a2c <_ZN3Led14BlinkInterruptEhcc+0x6e>
        if(timer < BLINK_INTERVAL_TIMX){
 80219f0:	7bbb      	ldrb	r3, [r7, #14]
 80219f2:	2b27      	cmp	r3, #39	; 0x27
 80219f4:	d808      	bhi.n	8021a08 <_ZN3Led14BlinkInterruptEhcc+0x4a>
            ColorOrder(color_1);
 80219f6:	78bb      	ldrb	r3, [r7, #2]
 80219f8:	4619      	mov	r1, r3
 80219fa:	6878      	ldr	r0, [r7, #4]
 80219fc:	f7ff fe92 	bl	8021724 <_ZN3Led10ColorOrderEc>
            timer++;
 8021a00:	7bbb      	ldrb	r3, [r7, #14]
 8021a02:	3301      	adds	r3, #1
 8021a04:	73bb      	strb	r3, [r7, #14]
 8021a06:	e019      	b.n	8021a3c <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else if(timer < (BLINK_INTERVAL_TIMX + BLINK_INTERVAL_TIMX)){
 8021a08:	7bbb      	ldrb	r3, [r7, #14]
 8021a0a:	2b4f      	cmp	r3, #79	; 0x4f
 8021a0c:	d808      	bhi.n	8021a20 <_ZN3Led14BlinkInterruptEhcc+0x62>
            ColorOrder(color_2);
 8021a0e:	787b      	ldrb	r3, [r7, #1]
 8021a10:	4619      	mov	r1, r3
 8021a12:	6878      	ldr	r0, [r7, #4]
 8021a14:	f7ff fe86 	bl	8021724 <_ZN3Led10ColorOrderEc>
            timer++;
 8021a18:	7bbb      	ldrb	r3, [r7, #14]
 8021a1a:	3301      	adds	r3, #1
 8021a1c:	73bb      	strb	r3, [r7, #14]
 8021a1e:	e00d      	b.n	8021a3c <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else{
            count++;
 8021a20:	7bfb      	ldrb	r3, [r7, #15]
 8021a22:	3301      	adds	r3, #1
 8021a24:	73fb      	strb	r3, [r7, #15]
            timer = 0;
 8021a26:	2300      	movs	r3, #0
 8021a28:	73bb      	strb	r3, [r7, #14]
 8021a2a:	e007      	b.n	8021a3c <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }
    }else{
        ColorOrder('X');
 8021a2c:	2158      	movs	r1, #88	; 0x58
 8021a2e:	6878      	ldr	r0, [r7, #4]
 8021a30:	f7ff fe78 	bl	8021724 <_ZN3Led10ColorOrderEc>
        count = 0;
 8021a34:	2300      	movs	r3, #0
 8021a36:	73fb      	strb	r3, [r7, #15]
        blink_continue = false;
 8021a38:	2300      	movs	r3, #0
 8021a3a:	737b      	strb	r3, [r7, #13]
    }

    interrupt_count_ = count;
 8021a3c:	687b      	ldr	r3, [r7, #4]
 8021a3e:	7bfa      	ldrb	r2, [r7, #15]
 8021a40:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = timer;
 8021a42:	687b      	ldr	r3, [r7, #4]
 8021a44:	7bba      	ldrb	r2, [r7, #14]
 8021a46:	705a      	strb	r2, [r3, #1]

    return blink_continue;
 8021a48:	7b7b      	ldrb	r3, [r7, #13]
}
 8021a4a:	4618      	mov	r0, r3
 8021a4c:	3710      	adds	r7, #16
 8021a4e:	46bd      	mov	sp, r7
 8021a50:	bd80      	pop	{r7, pc}

08021a52 <_ZN3Led14ResetInterruptEv>:

void Led::ResetInterrupt()
{
 8021a52:	b480      	push	{r7}
 8021a54:	b083      	sub	sp, #12
 8021a56:	af00      	add	r7, sp, #0
 8021a58:	6078      	str	r0, [r7, #4]
    interrupt_count_ = 0;
 8021a5a:	687b      	ldr	r3, [r7, #4]
 8021a5c:	2200      	movs	r2, #0
 8021a5e:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = 0;
 8021a60:	687b      	ldr	r3, [r7, #4]
 8021a62:	2200      	movs	r2, #0
 8021a64:	705a      	strb	r2, [r3, #1]
 8021a66:	bf00      	nop
 8021a68:	370c      	adds	r7, #12
 8021a6a:	46bd      	mov	sp, r7
 8021a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a70:	4770      	bx	lr

08021a72 <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_{0}
 8021a72:	b580      	push	{r7, lr}
 8021a74:	b082      	sub	sp, #8
 8021a76:	af00      	add	r7, sp, #0
 8021a78:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_{{0}}
                         , max_line_sensors_valu_{0}
                         , min_line_sensors_valu_{0}
                         , line_sensors_valu_{0}
                         , emergency_stop_flag_(false) {}
 8021a7a:	687b      	ldr	r3, [r7, #4]
 8021a7c:	461a      	mov	r2, r3
 8021a7e:	2300      	movs	r3, #0
 8021a80:	6013      	str	r3, [r2, #0]
 8021a82:	6053      	str	r3, [r2, #4]
 8021a84:	6093      	str	r3, [r2, #8]
 8021a86:	60d3      	str	r3, [r2, #12]
 8021a88:	6113      	str	r3, [r2, #16]
 8021a8a:	6153      	str	r3, [r2, #20]
 8021a8c:	6193      	str	r3, [r2, #24]
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	331c      	adds	r3, #28
 8021a92:	f44f 728c 	mov.w	r2, #280	; 0x118
 8021a96:	2100      	movs	r1, #0
 8021a98:	4618      	mov	r0, r3
 8021a9a:	f008 fc22 	bl	802a2e2 <memset>
 8021a9e:	687b      	ldr	r3, [r7, #4]
 8021aa0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8021aa4:	2200      	movs	r2, #0
 8021aa6:	601a      	str	r2, [r3, #0]
 8021aa8:	605a      	str	r2, [r3, #4]
 8021aaa:	609a      	str	r2, [r3, #8]
 8021aac:	60da      	str	r2, [r3, #12]
 8021aae:	611a      	str	r2, [r3, #16]
 8021ab0:	615a      	str	r2, [r3, #20]
 8021ab2:	619a      	str	r2, [r3, #24]
 8021ab4:	687b      	ldr	r3, [r7, #4]
 8021ab6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021aba:	2200      	movs	r2, #0
 8021abc:	601a      	str	r2, [r3, #0]
 8021abe:	605a      	str	r2, [r3, #4]
 8021ac0:	609a      	str	r2, [r3, #8]
 8021ac2:	60da      	str	r2, [r3, #12]
 8021ac4:	611a      	str	r2, [r3, #16]
 8021ac6:	615a      	str	r2, [r3, #20]
 8021ac8:	619a      	str	r2, [r3, #24]
 8021aca:	687b      	ldr	r3, [r7, #4]
 8021acc:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8021ad0:	2200      	movs	r2, #0
 8021ad2:	601a      	str	r2, [r3, #0]
 8021ad4:	605a      	str	r2, [r3, #4]
 8021ad6:	609a      	str	r2, [r3, #8]
 8021ad8:	60da      	str	r2, [r3, #12]
 8021ada:	611a      	str	r2, [r3, #16]
 8021adc:	615a      	str	r2, [r3, #20]
 8021ade:	619a      	str	r2, [r3, #24]
 8021ae0:	687b      	ldr	r3, [r7, #4]
 8021ae2:	2200      	movs	r2, #0
 8021ae4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8021ae8:	687b      	ldr	r3, [r7, #4]
 8021aea:	4618      	mov	r0, r3
 8021aec:	3708      	adds	r7, #8
 8021aee:	46bd      	mov	sp, r7
 8021af0:	bd80      	pop	{r7, pc}
	...

08021af4 <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 8021af4:	b580      	push	{r7, lr}
 8021af6:	b082      	sub	sp, #8
 8021af8:	af00      	add	r7, sp, #0
 8021afa:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 8021afc:	687b      	ldr	r3, [r7, #4]
 8021afe:	220e      	movs	r2, #14
 8021b00:	4619      	mov	r1, r3
 8021b02:	4815      	ldr	r0, [pc, #84]	; (8021b58 <_ZN10LineSensor4InitEv+0x64>)
 8021b04:	f004 fc06 	bl	8026314 <HAL_ADC_Start_DMA>
 8021b08:	4603      	mov	r3, r0
 8021b0a:	2b00      	cmp	r3, #0
 8021b0c:	bf14      	ite	ne
 8021b0e:	2301      	movne	r3, #1
 8021b10:	2300      	moveq	r3, #0
 8021b12:	b2db      	uxtb	r3, r3
 8021b14:	2b00      	cmp	r3, #0
 8021b16:	d004      	beq.n	8021b22 <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 8021b18:	4b10      	ldr	r3, [pc, #64]	; (8021b5c <_ZN10LineSensor4InitEv+0x68>)
 8021b1a:	2201      	movs	r2, #1
 8021b1c:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021b1e:	f002 f92f 	bl	8023d80 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 8021b22:	2100      	movs	r1, #0
 8021b24:	480e      	ldr	r0, [pc, #56]	; (8021b60 <_ZN10LineSensor4InitEv+0x6c>)
 8021b26:	f007 fbf5 	bl	8029314 <HAL_TIM_PWM_Start>
 8021b2a:	4603      	mov	r3, r0
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	bf14      	ite	ne
 8021b30:	2301      	movne	r3, #1
 8021b32:	2300      	moveq	r3, #0
 8021b34:	b2db      	uxtb	r3, r3
 8021b36:	2b00      	cmp	r3, #0
 8021b38:	d004      	beq.n	8021b44 <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 8021b3a:	4b0a      	ldr	r3, [pc, #40]	; (8021b64 <_ZN10LineSensor4InitEv+0x70>)
 8021b3c:	2201      	movs	r2, #1
 8021b3e:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021b40:	f002 f91e 	bl	8023d80 <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 8021b44:	4b06      	ldr	r3, [pc, #24]	; (8021b60 <_ZN10LineSensor4InitEv+0x6c>)
 8021b46:	681b      	ldr	r3, [r3, #0]
 8021b48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8021b4c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8021b4e:	bf00      	nop
 8021b50:	3708      	adds	r7, #8
 8021b52:	46bd      	mov	sp, r7
 8021b54:	bd80      	pop	{r7, pc}
 8021b56:	bf00      	nop
 8021b58:	20000798 	.word	0x20000798
 8021b5c:	200000b7 	.word	0x200000b7
 8021b60:	200007e0 	.word	0x200007e0
 8021b64:	200000b8 	.word	0x200000b8

08021b68 <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 8021b68:	b480      	push	{r7}
 8021b6a:	b085      	sub	sp, #20
 8021b6c:	af00      	add	r7, sp, #0
 8021b6e:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021b70:	2300      	movs	r3, #0
 8021b72:	60fb      	str	r3, [r7, #12]
 8021b74:	68fb      	ldr	r3, [r7, #12]
 8021b76:	2b0d      	cmp	r3, #13
 8021b78:	dc16      	bgt.n	8021ba8 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 8021b7a:	4b15      	ldr	r3, [pc, #84]	; (8021bd0 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021b7c:	781b      	ldrb	r3, [r3, #0]
 8021b7e:	4619      	mov	r1, r3
 8021b80:	687b      	ldr	r3, [r7, #4]
 8021b82:	68fa      	ldr	r2, [r7, #12]
 8021b84:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8021b88:	687a      	ldr	r2, [r7, #4]
 8021b8a:	460b      	mov	r3, r1
 8021b8c:	00db      	lsls	r3, r3, #3
 8021b8e:	1a5b      	subs	r3, r3, r1
 8021b90:	005b      	lsls	r3, r3, #1
 8021b92:	68f9      	ldr	r1, [r7, #12]
 8021b94:	440b      	add	r3, r1
 8021b96:	330c      	adds	r3, #12
 8021b98:	005b      	lsls	r3, r3, #1
 8021b9a:	4413      	add	r3, r2
 8021b9c:	4602      	mov	r2, r0
 8021b9e:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021ba0:	68fb      	ldr	r3, [r7, #12]
 8021ba2:	3301      	adds	r3, #1
 8021ba4:	60fb      	str	r3, [r7, #12]
 8021ba6:	e7e5      	b.n	8021b74 <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    times++;
 8021ba8:	4b09      	ldr	r3, [pc, #36]	; (8021bd0 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021baa:	781b      	ldrb	r3, [r3, #0]
 8021bac:	3301      	adds	r3, #1
 8021bae:	b2da      	uxtb	r2, r3
 8021bb0:	4b07      	ldr	r3, [pc, #28]	; (8021bd0 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021bb2:	701a      	strb	r2, [r3, #0]
    if(times >= CONSECUTIVE_TIMES) times = 0;
 8021bb4:	4b06      	ldr	r3, [pc, #24]	; (8021bd0 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021bb6:	781b      	ldrb	r3, [r3, #0]
 8021bb8:	2b09      	cmp	r3, #9
 8021bba:	d902      	bls.n	8021bc2 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5a>
 8021bbc:	4b04      	ldr	r3, [pc, #16]	; (8021bd0 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021bbe:	2200      	movs	r2, #0
 8021bc0:	701a      	strb	r2, [r3, #0]
}
 8021bc2:	bf00      	nop
 8021bc4:	3714      	adds	r7, #20
 8021bc6:	46bd      	mov	sp, r7
 8021bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bcc:	4770      	bx	lr
 8021bce:	bf00      	nop
 8021bd0:	2000003c 	.word	0x2000003c

08021bd4 <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 8021bd4:	b5b0      	push	{r4, r5, r7, lr}
 8021bd6:	b088      	sub	sp, #32
 8021bd8:	af00      	add	r7, sp, #0
 8021bda:	60f8      	str	r0, [r7, #12]
 8021bdc:	60b9      	str	r1, [r7, #8]
 8021bde:	4611      	mov	r1, r2
 8021be0:	461a      	mov	r2, r3
 8021be2:	460b      	mov	r3, r1
 8021be4:	71fb      	strb	r3, [r7, #7]
 8021be6:	4613      	mov	r3, r2
 8021be8:	71bb      	strb	r3, [r7, #6]

    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else                                     array[i] = temp_array[right--];
    }
 8021bea:	466b      	mov	r3, sp
 8021bec:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 8021bee:	79fa      	ldrb	r2, [r7, #7]
 8021bf0:	79bb      	ldrb	r3, [r7, #6]
 8021bf2:	429a      	cmp	r2, r3
 8021bf4:	f080 80ba 	bcs.w	8021d6c <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 8021bf8:	79b8      	ldrb	r0, [r7, #6]
 8021bfa:	61b8      	str	r0, [r7, #24]
 8021bfc:	4603      	mov	r3, r0
 8021bfe:	3301      	adds	r3, #1
 8021c00:	4619      	mov	r1, r3
 8021c02:	f04f 0200 	mov.w	r2, #0
 8021c06:	f04f 0300 	mov.w	r3, #0
 8021c0a:	f04f 0400 	mov.w	r4, #0
 8021c0e:	0114      	lsls	r4, r2, #4
 8021c10:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021c14:	010b      	lsls	r3, r1, #4
 8021c16:	4603      	mov	r3, r0
 8021c18:	3301      	adds	r3, #1
 8021c1a:	4619      	mov	r1, r3
 8021c1c:	f04f 0200 	mov.w	r2, #0
 8021c20:	f04f 0300 	mov.w	r3, #0
 8021c24:	f04f 0400 	mov.w	r4, #0
 8021c28:	0114      	lsls	r4, r2, #4
 8021c2a:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021c2e:	010b      	lsls	r3, r1, #4
 8021c30:	4603      	mov	r3, r0
 8021c32:	3301      	adds	r3, #1
 8021c34:	005b      	lsls	r3, r3, #1
 8021c36:	3301      	adds	r3, #1
 8021c38:	3307      	adds	r3, #7
 8021c3a:	08db      	lsrs	r3, r3, #3
 8021c3c:	00db      	lsls	r3, r3, #3
 8021c3e:	ebad 0d03 	sub.w	sp, sp, r3
 8021c42:	466b      	mov	r3, sp
 8021c44:	3301      	adds	r3, #1
 8021c46:	085b      	lsrs	r3, r3, #1
 8021c48:	005b      	lsls	r3, r3, #1
 8021c4a:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 8021c4c:	79fa      	ldrb	r2, [r7, #7]
 8021c4e:	79bb      	ldrb	r3, [r7, #6]
 8021c50:	4413      	add	r3, r2
 8021c52:	0fda      	lsrs	r2, r3, #31
 8021c54:	4413      	add	r3, r2
 8021c56:	105b      	asrs	r3, r3, #1
 8021c58:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 8021c5a:	7cfb      	ldrb	r3, [r7, #19]
 8021c5c:	79fa      	ldrb	r2, [r7, #7]
 8021c5e:	68b9      	ldr	r1, [r7, #8]
 8021c60:	68f8      	ldr	r0, [r7, #12]
 8021c62:	f7ff ffb7 	bl	8021bd4 <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 8021c66:	7cfb      	ldrb	r3, [r7, #19]
 8021c68:	3301      	adds	r3, #1
 8021c6a:	b2da      	uxtb	r2, r3
 8021c6c:	79bb      	ldrb	r3, [r7, #6]
 8021c6e:	68b9      	ldr	r1, [r7, #8]
 8021c70:	68f8      	ldr	r0, [r7, #12]
 8021c72:	f7ff ffaf 	bl	8021bd4 <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--)
 8021c76:	7cfb      	ldrb	r3, [r7, #19]
 8021c78:	77bb      	strb	r3, [r7, #30]
 8021c7a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021c7e:	79fb      	ldrb	r3, [r7, #7]
 8021c80:	429a      	cmp	r2, r3
 8021c82:	db11      	blt.n	8021ca8 <_ZN10LineSensor9MergeSortEPthh+0xd4>
        temp_array[i] = array[i];
 8021c84:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021c88:	005b      	lsls	r3, r3, #1
 8021c8a:	68ba      	ldr	r2, [r7, #8]
 8021c8c:	4413      	add	r3, r2
 8021c8e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021c92:	8819      	ldrh	r1, [r3, #0]
 8021c94:	697b      	ldr	r3, [r7, #20]
 8021c96:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle; i >= first_index; i--)
 8021c9a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021c9e:	b2db      	uxtb	r3, r3
 8021ca0:	3b01      	subs	r3, #1
 8021ca2:	b2db      	uxtb	r3, r3
 8021ca4:	77bb      	strb	r3, [r7, #30]
 8021ca6:	e7e8      	b.n	8021c7a <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 8021ca8:	7cfb      	ldrb	r3, [r7, #19]
 8021caa:	3301      	adds	r3, #1
 8021cac:	b2db      	uxtb	r3, r3
 8021cae:	77bb      	strb	r3, [r7, #30]
 8021cb0:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021cb4:	79bb      	ldrb	r3, [r7, #6]
 8021cb6:	429a      	cmp	r2, r3
 8021cb8:	dc17      	bgt.n	8021cea <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 8021cba:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021cbe:	005b      	lsls	r3, r3, #1
 8021cc0:	68ba      	ldr	r2, [r7, #8]
 8021cc2:	4413      	add	r3, r2
 8021cc4:	79b9      	ldrb	r1, [r7, #6]
 8021cc6:	f997 001e 	ldrsb.w	r0, [r7, #30]
 8021cca:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8021cce:	3201      	adds	r2, #1
 8021cd0:	1a82      	subs	r2, r0, r2
 8021cd2:	1a8a      	subs	r2, r1, r2
 8021cd4:	8819      	ldrh	r1, [r3, #0]
 8021cd6:	697b      	ldr	r3, [r7, #20]
 8021cd8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 8021cdc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021ce0:	b2db      	uxtb	r3, r3
 8021ce2:	3301      	adds	r3, #1
 8021ce4:	b2db      	uxtb	r3, r3
 8021ce6:	77bb      	strb	r3, [r7, #30]
 8021ce8:	e7e2      	b.n	8021cb0 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 8021cea:	79fb      	ldrb	r3, [r7, #7]
 8021cec:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 8021cee:	79bb      	ldrb	r3, [r7, #6]
 8021cf0:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 8021cf2:	79fb      	ldrb	r3, [r7, #7]
 8021cf4:	77bb      	strb	r3, [r7, #30]
 8021cf6:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021cfa:	79bb      	ldrb	r3, [r7, #6]
 8021cfc:	429a      	cmp	r2, r3
 8021cfe:	dc33      	bgt.n	8021d68 <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 8021d00:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021d04:	697b      	ldr	r3, [r7, #20]
 8021d06:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021d0a:	f997 101d 	ldrsb.w	r1, [r7, #29]
 8021d0e:	697b      	ldr	r3, [r7, #20]
 8021d10:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8021d14:	429a      	cmp	r2, r3
 8021d16:	d210      	bcs.n	8021d3a <_ZN10LineSensor9MergeSortEPthh+0x166>
 8021d18:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021d1c:	b2d3      	uxtb	r3, r2
 8021d1e:	3301      	adds	r3, #1
 8021d20:	b2db      	uxtb	r3, r3
 8021d22:	77fb      	strb	r3, [r7, #31]
 8021d24:	4611      	mov	r1, r2
 8021d26:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d2a:	005b      	lsls	r3, r3, #1
 8021d2c:	68ba      	ldr	r2, [r7, #8]
 8021d2e:	4413      	add	r3, r2
 8021d30:	697a      	ldr	r2, [r7, #20]
 8021d32:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021d36:	801a      	strh	r2, [r3, #0]
 8021d38:	e00f      	b.n	8021d5a <_ZN10LineSensor9MergeSortEPthh+0x186>
        else                                     array[i] = temp_array[right--];
 8021d3a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8021d3e:	b2d3      	uxtb	r3, r2
 8021d40:	3b01      	subs	r3, #1
 8021d42:	b2db      	uxtb	r3, r3
 8021d44:	777b      	strb	r3, [r7, #29]
 8021d46:	4611      	mov	r1, r2
 8021d48:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d4c:	005b      	lsls	r3, r3, #1
 8021d4e:	68ba      	ldr	r2, [r7, #8]
 8021d50:	4413      	add	r3, r2
 8021d52:	697a      	ldr	r2, [r7, #20]
 8021d54:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021d58:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 8021d5a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d5e:	b2db      	uxtb	r3, r3
 8021d60:	3301      	adds	r3, #1
 8021d62:	b2db      	uxtb	r3, r3
 8021d64:	77bb      	strb	r3, [r7, #30]
 8021d66:	e7c6      	b.n	8021cf6 <_ZN10LineSensor9MergeSortEPthh+0x122>
 8021d68:	46ad      	mov	sp, r5
 8021d6a:	e001      	b.n	8021d70 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 8021d6c:	bf00      	nop
 8021d6e:	46ad      	mov	sp, r5
}
 8021d70:	3720      	adds	r7, #32
 8021d72:	46bd      	mov	sp, r7
 8021d74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021d78 <_ZN10LineSensor6UpdateEv>:

void LineSensor::Update()
{
 8021d78:	b590      	push	{r4, r7, lr}
 8021d7a:	b08b      	sub	sp, #44	; 0x2c
 8021d7c:	af00      	add	r7, sp, #0
 8021d7e:	6078      	str	r0, [r7, #4]
    uint8_t i, j;
    uint16_t temp_array[CONSECUTIVE_TIMES];
    uint16_t median, max, min, normalized;
    bool emergency = true;
 8021d80:	2301      	movs	r3, #1
 8021d82:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021d86:	2300      	movs	r3, #0
 8021d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021d90:	2b0d      	cmp	r3, #13
 8021d92:	f200 80c8 	bhi.w	8021f26 <_ZN10LineSensor6UpdateEv+0x1ae>
    {
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021d96:	2300      	movs	r3, #0
 8021d98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021d9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021da0:	2b09      	cmp	r3, #9
 8021da2:	d81b      	bhi.n	8021ddc <_ZN10LineSensor6UpdateEv+0x64>
        {
            temp_array[j] = consecutive_line_sensors_buff_[j][i];
 8021da4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8021da8:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8021dac:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021db0:	6878      	ldr	r0, [r7, #4]
 8021db2:	4613      	mov	r3, r2
 8021db4:	00db      	lsls	r3, r3, #3
 8021db6:	1a9b      	subs	r3, r3, r2
 8021db8:	005b      	lsls	r3, r3, #1
 8021dba:	4423      	add	r3, r4
 8021dbc:	330c      	adds	r3, #12
 8021dbe:	005b      	lsls	r3, r3, #1
 8021dc0:	4403      	add	r3, r0
 8021dc2:	889a      	ldrh	r2, [r3, #4]
 8021dc4:	004b      	lsls	r3, r1, #1
 8021dc6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8021dca:	440b      	add	r3, r1
 8021dcc:	f823 2c20 	strh.w	r2, [r3, #-32]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021dd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021dd4:	3301      	adds	r3, #1
 8021dd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021dda:	e7df      	b.n	8021d9c <_ZN10LineSensor6UpdateEv+0x24>
        }

        MergeSort(temp_array, 0, CONSECUTIVE_TIMES-1);
 8021ddc:	f107 0108 	add.w	r1, r7, #8
 8021de0:	2309      	movs	r3, #9
 8021de2:	2200      	movs	r2, #0
 8021de4:	6878      	ldr	r0, [r7, #4]
 8021de6:	f7ff fef5 	bl	8021bd4 <_ZN10LineSensor9MergeSortEPthh>
        median = temp_array[HALF_CONSECUTIVE_TIMES];
 8021dea:	8a7b      	ldrh	r3, [r7, #18]
 8021dec:	83fb      	strh	r3, [r7, #30]

#ifdef DEBUG_MODE
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021dee:	2300      	movs	r3, #0
 8021df0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021df4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021df8:	2b09      	cmp	r3, #9
 8021dfa:	d81a      	bhi.n	8021e32 <_ZN10LineSensor6UpdateEv+0xba>
        {
            g_consecutive_line_buff[i][j] = temp_array[j];
 8021dfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021e00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021e04:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021e08:	005b      	lsls	r3, r3, #1
 8021e0a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8021e0e:	4403      	add	r3, r0
 8021e10:	f833 4c20 	ldrh.w	r4, [r3, #-32]
 8021e14:	4848      	ldr	r0, [pc, #288]	; (8021f38 <_ZN10LineSensor6UpdateEv+0x1c0>)
 8021e16:	4613      	mov	r3, r2
 8021e18:	009b      	lsls	r3, r3, #2
 8021e1a:	4413      	add	r3, r2
 8021e1c:	005b      	lsls	r3, r3, #1
 8021e1e:	440b      	add	r3, r1
 8021e20:	4622      	mov	r2, r4
 8021e22:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021e26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021e2a:	3301      	adds	r3, #1
 8021e2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021e30:	e7e0      	b.n	8021df4 <_ZN10LineSensor6UpdateEv+0x7c>
        }
#endif // DEBUG_MODE

        max = max_line_sensors_valu_[i];
 8021e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021e36:	687a      	ldr	r2, [r7, #4]
 8021e38:	3398      	adds	r3, #152	; 0x98
 8021e3a:	005b      	lsls	r3, r3, #1
 8021e3c:	4413      	add	r3, r2
 8021e3e:	889b      	ldrh	r3, [r3, #4]
 8021e40:	84bb      	strh	r3, [r7, #36]	; 0x24
        min = min_line_sensors_valu_[i];
 8021e42:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021e46:	687b      	ldr	r3, [r7, #4]
 8021e48:	32a8      	adds	r2, #168	; 0xa8
 8021e4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021e4e:	847b      	strh	r3, [r7, #34]	; 0x22
        if(max < median || max == 0) max = median;
 8021e50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021e52:	8bfb      	ldrh	r3, [r7, #30]
 8021e54:	429a      	cmp	r2, r3
 8021e56:	d302      	bcc.n	8021e5e <_ZN10LineSensor6UpdateEv+0xe6>
 8021e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021e5a:	2b00      	cmp	r3, #0
 8021e5c:	d101      	bne.n	8021e62 <_ZN10LineSensor6UpdateEv+0xea>
 8021e5e:	8bfb      	ldrh	r3, [r7, #30]
 8021e60:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(min > median || min == 0) min = median;
 8021e62:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021e64:	8bfb      	ldrh	r3, [r7, #30]
 8021e66:	429a      	cmp	r2, r3
 8021e68:	d802      	bhi.n	8021e70 <_ZN10LineSensor6UpdateEv+0xf8>
 8021e6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021e6c:	2b00      	cmp	r3, #0
 8021e6e:	d101      	bne.n	8021e74 <_ZN10LineSensor6UpdateEv+0xfc>
 8021e70:	8bfb      	ldrh	r3, [r7, #30]
 8021e72:	847b      	strh	r3, [r7, #34]	; 0x22
        max_line_sensors_valu_[i] = max;
 8021e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021e78:	687a      	ldr	r2, [r7, #4]
 8021e7a:	3398      	adds	r3, #152	; 0x98
 8021e7c:	005b      	lsls	r3, r3, #1
 8021e7e:	4413      	add	r3, r2
 8021e80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021e82:	809a      	strh	r2, [r3, #4]
        min_line_sensors_valu_[i] = min;
 8021e84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	32a8      	adds	r2, #168	; 0xa8
 8021e8c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8021e8e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

#ifdef DEBUG_MODE
        g_max_line_valu[i] = max_line_sensors_valu_[i];
 8021e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021e96:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021e9a:	6879      	ldr	r1, [r7, #4]
 8021e9c:	3398      	adds	r3, #152	; 0x98
 8021e9e:	005b      	lsls	r3, r3, #1
 8021ea0:	440b      	add	r3, r1
 8021ea2:	8899      	ldrh	r1, [r3, #4]
 8021ea4:	4b25      	ldr	r3, [pc, #148]	; (8021f3c <_ZN10LineSensor6UpdateEv+0x1c4>)
 8021ea6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_min_line_valu[i] = min_line_sensors_valu_[i];
 8021eaa:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8021eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021eb2:	687a      	ldr	r2, [r7, #4]
 8021eb4:	31a8      	adds	r1, #168	; 0xa8
 8021eb6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8021eba:	4a21      	ldr	r2, [pc, #132]	; (8021f40 <_ZN10LineSensor6UpdateEv+0x1c8>)
 8021ebc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#endif // DEBUG_MODE

        if(max > min)
 8021ec0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021ec2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021ec4:	429a      	cmp	r2, r3
 8021ec6:	d928      	bls.n	8021f1a <_ZN10LineSensor6UpdateEv+0x1a2>
        {
            normalized = MAX_NORMALIZED_VALU * (median - min) / (max - min);
 8021ec8:	8bfa      	ldrh	r2, [r7, #30]
 8021eca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021ecc:	1ad3      	subs	r3, r2, r3
 8021ece:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8021ed2:	fb02 f203 	mul.w	r2, r2, r3
 8021ed6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8021ed8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021eda:	1acb      	subs	r3, r1, r3
 8021edc:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ee0:	83bb      	strh	r3, [r7, #28]
            line_sensors_valu_[i] = normalized;
 8021ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ee6:	687a      	ldr	r2, [r7, #4]
 8021ee8:	33b4      	adds	r3, #180	; 0xb4
 8021eea:	005b      	lsls	r3, r3, #1
 8021eec:	4413      	add	r3, r2
 8021eee:	8bba      	ldrh	r2, [r7, #28]
 8021ef0:	809a      	strh	r2, [r3, #4]

#ifdef DEBUG_MODE
            g_line_valu[i] = line_sensors_valu_[i];
 8021ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ef6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021efa:	6879      	ldr	r1, [r7, #4]
 8021efc:	33b4      	adds	r3, #180	; 0xb4
 8021efe:	005b      	lsls	r3, r3, #1
 8021f00:	440b      	add	r3, r1
 8021f02:	8899      	ldrh	r1, [r3, #4]
 8021f04:	4b0f      	ldr	r3, [pc, #60]	; (8021f44 <_ZN10LineSensor6UpdateEv+0x1cc>)
 8021f06:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
#endif // DEBUG_MODE

            if(normalized < EMERGENCY_STOP_BORDER) emergency = false;
 8021f0a:	8bbb      	ldrh	r3, [r7, #28]
 8021f0c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8021f10:	4293      	cmp	r3, r2
 8021f12:	d802      	bhi.n	8021f1a <_ZN10LineSensor6UpdateEv+0x1a2>
 8021f14:	2300      	movs	r3, #0
 8021f16:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021f1e:	3301      	adds	r3, #1
 8021f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021f24:	e732      	b.n	8021d8c <_ZN10LineSensor6UpdateEv+0x14>
        }
    }
    emergency_stop_flag_ = emergency;
 8021f26:	687b      	ldr	r3, [r7, #4]
 8021f28:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8021f2c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
}
 8021f30:	bf00      	nop
 8021f32:	372c      	adds	r7, #44	; 0x2c
 8021f34:	46bd      	mov	sp, r7
 8021f36:	bd90      	pop	{r4, r7, pc}
 8021f38:	200000c0 	.word	0x200000c0
 8021f3c:	200001d8 	.word	0x200001d8
 8021f40:	200001f4 	.word	0x200001f4
 8021f44:	20000210 	.word	0x20000210

08021f48 <_ZN10LineSensor19LeftRightDifferenceEv>:

float LineSensor::LeftRightDifference()
{
 8021f48:	b5b0      	push	{r4, r5, r7, lr}
 8021f4a:	b086      	sub	sp, #24
 8021f4c:	af00      	add	r7, sp, #0
 8021f4e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t left = 0, right = 0;
 8021f50:	2300      	movs	r3, #0
 8021f52:	613b      	str	r3, [r7, #16]
 8021f54:	2300      	movs	r3, #0
 8021f56:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 8021f58:	2300      	movs	r3, #0
 8021f5a:	75fb      	strb	r3, [r7, #23]
 8021f5c:	7dfb      	ldrb	r3, [r7, #23]
 8021f5e:	2b06      	cmp	r3, #6
 8021f60:	d80d      	bhi.n	8021f7e <_ZN10LineSensor19LeftRightDifferenceEv+0x36>
    {
        left += line_sensors_valu_[i];
 8021f62:	7dfb      	ldrb	r3, [r7, #23]
 8021f64:	687a      	ldr	r2, [r7, #4]
 8021f66:	33b4      	adds	r3, #180	; 0xb4
 8021f68:	005b      	lsls	r3, r3, #1
 8021f6a:	4413      	add	r3, r2
 8021f6c:	889b      	ldrh	r3, [r3, #4]
 8021f6e:	461a      	mov	r2, r3
 8021f70:	693b      	ldr	r3, [r7, #16]
 8021f72:	4413      	add	r3, r2
 8021f74:	613b      	str	r3, [r7, #16]
    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 8021f76:	7dfb      	ldrb	r3, [r7, #23]
 8021f78:	3301      	adds	r3, #1
 8021f7a:	75fb      	strb	r3, [r7, #23]
 8021f7c:	e7ee      	b.n	8021f5c <_ZN10LineSensor19LeftRightDifferenceEv+0x14>
    }
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8021f7e:	2307      	movs	r3, #7
 8021f80:	75fb      	strb	r3, [r7, #23]
 8021f82:	7dfb      	ldrb	r3, [r7, #23]
 8021f84:	2b0d      	cmp	r3, #13
 8021f86:	d80d      	bhi.n	8021fa4 <_ZN10LineSensor19LeftRightDifferenceEv+0x5c>
    {
        right += line_sensors_valu_[i];
 8021f88:	7dfb      	ldrb	r3, [r7, #23]
 8021f8a:	687a      	ldr	r2, [r7, #4]
 8021f8c:	33b4      	adds	r3, #180	; 0xb4
 8021f8e:	005b      	lsls	r3, r3, #1
 8021f90:	4413      	add	r3, r2
 8021f92:	889b      	ldrh	r3, [r3, #4]
 8021f94:	461a      	mov	r2, r3
 8021f96:	68fb      	ldr	r3, [r7, #12]
 8021f98:	4413      	add	r3, r2
 8021f9a:	60fb      	str	r3, [r7, #12]
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8021f9c:	7dfb      	ldrb	r3, [r7, #23]
 8021f9e:	3301      	adds	r3, #1
 8021fa0:	75fb      	strb	r3, [r7, #23]
 8021fa2:	e7ee      	b.n	8021f82 <_ZN10LineSensor19LeftRightDifferenceEv+0x3a>
    }

#ifdef DEBUG_MODE
    g_line_left = left;
 8021fa4:	4a11      	ldr	r2, [pc, #68]	; (8021fec <_ZN10LineSensor19LeftRightDifferenceEv+0xa4>)
 8021fa6:	693b      	ldr	r3, [r7, #16]
 8021fa8:	6013      	str	r3, [r2, #0]
    g_line_right = right;
 8021faa:	4a11      	ldr	r2, [pc, #68]	; (8021ff0 <_ZN10LineSensor19LeftRightDifferenceEv+0xa8>)
 8021fac:	68fb      	ldr	r3, [r7, #12]
 8021fae:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float difference = right * LINE_SENSOR_CORRECTION - left;
 8021fb0:	68f8      	ldr	r0, [r7, #12]
 8021fb2:	f7fe f987 	bl	80202c4 <__aeabi_ui2d>
 8021fb6:	4604      	mov	r4, r0
 8021fb8:	460d      	mov	r5, r1
 8021fba:	6938      	ldr	r0, [r7, #16]
 8021fbc:	f7fe f982 	bl	80202c4 <__aeabi_ui2d>
 8021fc0:	4602      	mov	r2, r0
 8021fc2:	460b      	mov	r3, r1
 8021fc4:	4620      	mov	r0, r4
 8021fc6:	4629      	mov	r1, r5
 8021fc8:	f7fe f83e 	bl	8020048 <__aeabi_dsub>
 8021fcc:	4603      	mov	r3, r0
 8021fce:	460c      	mov	r4, r1
 8021fd0:	4618      	mov	r0, r3
 8021fd2:	4621      	mov	r1, r4
 8021fd4:	f7fe fc8a 	bl	80208ec <__aeabi_d2f>
 8021fd8:	4603      	mov	r3, r0
 8021fda:	60bb      	str	r3, [r7, #8]

    return difference;
 8021fdc:	68bb      	ldr	r3, [r7, #8]
 8021fde:	ee07 3a90 	vmov	s15, r3
}
 8021fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8021fe6:	3718      	adds	r7, #24
 8021fe8:	46bd      	mov	sp, r7
 8021fea:	bdb0      	pop	{r4, r5, r7, pc}
 8021fec:	2000022c 	.word	0x2000022c
 8021ff0:	20000230 	.word	0x20000230

08021ff4 <_ZN10LineSensor20GetEmergencyStopFlagEv>:

bool LineSensor::GetEmergencyStopFlag()
{
 8021ff4:	b480      	push	{r7}
 8021ff6:	b083      	sub	sp, #12
 8021ff8:	af00      	add	r7, sp, #0
 8021ffa:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
}
 8022002:	4618      	mov	r0, r3
 8022004:	370c      	adds	r7, #12
 8022006:	46bd      	mov	sp, r7
 8022008:	f85d 7b04 	ldr.w	r7, [sp], #4
 802200c:	4770      	bx	lr
	...

08022010 <_ZN10LineSensor16CheckCalibrationEv>:

bool LineSensor::CheckCalibration()
{
 8022010:	b480      	push	{r7}
 8022012:	b085      	sub	sp, #20
 8022014:	af00      	add	r7, sp, #0
 8022016:	6078      	str	r0, [r7, #4]
    static uint16_t timer = 0;
    static uint16_t pre_max[NUM_OF_LINE_SENSORS] = {0};
    static uint16_t pre_min[NUM_OF_LINE_SENSORS] = {0};
    uint16_t max, min;
    bool result = true;
 8022018:	2301      	movs	r3, #1
 802201a:	73fb      	strb	r3, [r7, #15]

    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802201c:	2300      	movs	r3, #0
 802201e:	73bb      	strb	r3, [r7, #14]
 8022020:	7bbb      	ldrb	r3, [r7, #14]
 8022022:	2b0d      	cmp	r3, #13
 8022024:	d82d      	bhi.n	8022082 <_ZN10LineSensor16CheckCalibrationEv+0x72>
    {
        max = max_line_sensors_valu_[i];
 8022026:	7bbb      	ldrb	r3, [r7, #14]
 8022028:	687a      	ldr	r2, [r7, #4]
 802202a:	3398      	adds	r3, #152	; 0x98
 802202c:	005b      	lsls	r3, r3, #1
 802202e:	4413      	add	r3, r2
 8022030:	889b      	ldrh	r3, [r3, #4]
 8022032:	81bb      	strh	r3, [r7, #12]
        min = min_line_sensors_valu_[i];
 8022034:	7bba      	ldrb	r2, [r7, #14]
 8022036:	687b      	ldr	r3, [r7, #4]
 8022038:	32a8      	adds	r2, #168	; 0xa8
 802203a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802203e:	817b      	strh	r3, [r7, #10]

        if(pre_max[i] != max)      result = false;
 8022040:	7bbb      	ldrb	r3, [r7, #14]
 8022042:	4a1e      	ldr	r2, [pc, #120]	; (80220bc <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 8022044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8022048:	89ba      	ldrh	r2, [r7, #12]
 802204a:	429a      	cmp	r2, r3
 802204c:	d002      	beq.n	8022054 <_ZN10LineSensor16CheckCalibrationEv+0x44>
 802204e:	2300      	movs	r3, #0
 8022050:	73fb      	strb	r3, [r7, #15]
 8022052:	e008      	b.n	8022066 <_ZN10LineSensor16CheckCalibrationEv+0x56>
        else if(pre_min[i] != min) result = false;
 8022054:	7bbb      	ldrb	r3, [r7, #14]
 8022056:	4a1a      	ldr	r2, [pc, #104]	; (80220c0 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 8022058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802205c:	897a      	ldrh	r2, [r7, #10]
 802205e:	429a      	cmp	r2, r3
 8022060:	d001      	beq.n	8022066 <_ZN10LineSensor16CheckCalibrationEv+0x56>
 8022062:	2300      	movs	r3, #0
 8022064:	73fb      	strb	r3, [r7, #15]

        pre_max[i] = max;
 8022066:	7bbb      	ldrb	r3, [r7, #14]
 8022068:	4914      	ldr	r1, [pc, #80]	; (80220bc <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 802206a:	89ba      	ldrh	r2, [r7, #12]
 802206c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        pre_min[i] = min;
 8022070:	7bbb      	ldrb	r3, [r7, #14]
 8022072:	4913      	ldr	r1, [pc, #76]	; (80220c0 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 8022074:	897a      	ldrh	r2, [r7, #10]
 8022076:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802207a:	7bbb      	ldrb	r3, [r7, #14]
 802207c:	3301      	adds	r3, #1
 802207e:	73bb      	strb	r3, [r7, #14]
 8022080:	e7ce      	b.n	8022020 <_ZN10LineSensor16CheckCalibrationEv+0x10>
    }

    if(result)
 8022082:	7bfb      	ldrb	r3, [r7, #15]
 8022084:	2b00      	cmp	r3, #0
 8022086:	d00e      	beq.n	80220a6 <_ZN10LineSensor16CheckCalibrationEv+0x96>
    {
        if(timer < CALIBRATION_SUCCESS_TIME)
 8022088:	4b0e      	ldr	r3, [pc, #56]	; (80220c4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802208a:	881b      	ldrh	r3, [r3, #0]
 802208c:	f240 52db 	movw	r2, #1499	; 0x5db
 8022090:	4293      	cmp	r3, r2
 8022092:	d80b      	bhi.n	80220ac <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        {
            timer++;
 8022094:	4b0b      	ldr	r3, [pc, #44]	; (80220c4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8022096:	881b      	ldrh	r3, [r3, #0]
 8022098:	3301      	adds	r3, #1
 802209a:	b29a      	uxth	r2, r3
 802209c:	4b09      	ldr	r3, [pc, #36]	; (80220c4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802209e:	801a      	strh	r2, [r3, #0]
            result = false;
 80220a0:	2300      	movs	r3, #0
 80220a2:	73fb      	strb	r3, [r7, #15]
 80220a4:	e002      	b.n	80220ac <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        }
    }
    else timer = 0;
 80220a6:	4b07      	ldr	r3, [pc, #28]	; (80220c4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 80220a8:	2200      	movs	r2, #0
 80220aa:	801a      	strh	r2, [r3, #0]
    
    return result;
 80220ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80220ae:	4618      	mov	r0, r3
 80220b0:	3714      	adds	r7, #20
 80220b2:	46bd      	mov	sp, r7
 80220b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220b8:	4770      	bx	lr
 80220ba:	bf00      	nop
 80220bc:	20000040 	.word	0x20000040
 80220c0:	2000005c 	.word	0x2000005c
 80220c4:	2000003e 	.word	0x2000003e

080220c8 <_ZN9LineTraceC1EP10LineSensor>:
#include "line_trace.hpp"

LineTrace::LineTrace(LineSensor *line_sensor) : integral_error_(0)
 80220c8:	b480      	push	{r7}
 80220ca:	b083      	sub	sp, #12
 80220cc:	af00      	add	r7, sp, #0
 80220ce:	6078      	str	r0, [r7, #4]
 80220d0:	6039      	str	r1, [r7, #0]
 80220d2:	687b      	ldr	r3, [r7, #4]
 80220d4:	f04f 0200 	mov.w	r2, #0
 80220d8:	601a      	str	r2, [r3, #0]
{
    line_sensor_ = line_sensor;
 80220da:	687b      	ldr	r3, [r7, #4]
 80220dc:	683a      	ldr	r2, [r7, #0]
 80220de:	605a      	str	r2, [r3, #4]
}
 80220e0:	687b      	ldr	r3, [r7, #4]
 80220e2:	4618      	mov	r0, r3
 80220e4:	370c      	adds	r7, #12
 80220e6:	46bd      	mov	sp, r7
 80220e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220ec:	4770      	bx	lr
	...

080220f0 <_ZN9LineTrace13LineTraceOnlyEv>:

float LineTrace::LineTraceOnly()
{
 80220f0:	b580      	push	{r7, lr}
 80220f2:	b086      	sub	sp, #24
 80220f4:	af00      	add	r7, sp, #0
 80220f6:	6078      	str	r0, [r7, #4]
    float p_gain = LINE_ONLY_P_GAIN;
 80220f8:	4b0b      	ldr	r3, [pc, #44]	; (8022128 <_ZN9LineTrace13LineTraceOnlyEv+0x38>)
 80220fa:	617b      	str	r3, [r7, #20]
    float i_gain = LINE_ONLY_I_GAIN;
 80220fc:	f04f 0300 	mov.w	r3, #0
 8022100:	613b      	str	r3, [r7, #16]
    float d_gain = LINE_ONLY_D_GAIN;
 8022102:	f04f 0300 	mov.w	r3, #0
 8022106:	60fb      	str	r3, [r7, #12]

    return PidControl(p_gain, i_gain, d_gain);
 8022108:	ed97 1a03 	vldr	s2, [r7, #12]
 802210c:	edd7 0a04 	vldr	s1, [r7, #16]
 8022110:	ed97 0a05 	vldr	s0, [r7, #20]
 8022114:	6878      	ldr	r0, [r7, #4]
 8022116:	f000 f84f 	bl	80221b8 <_ZN9LineTrace10PidControlEfff>
 802211a:	eef0 7a40 	vmov.f32	s15, s0
}
 802211e:	eeb0 0a67 	vmov.f32	s0, s15
 8022122:	3718      	adds	r7, #24
 8022124:	46bd      	mov	sp, r7
 8022126:	bd80      	pop	{r7, pc}
 8022128:	38d1b717 	.word	0x38d1b717

0802212c <_ZN9LineTrace16DeterminePidGainEf>:

float LineTrace::DeterminePidGain(float target_velocity)
{
 802212c:	b580      	push	{r7, lr}
 802212e:	b086      	sub	sp, #24
 8022130:	af00      	add	r7, sp, #0
 8022132:	6078      	str	r0, [r7, #4]
 8022134:	ed87 0a00 	vstr	s0, [r7]
    float p_gain, i_gain, d_gain;

    if(target_velocity < TARGET_VELOCITY_0)
 8022138:	edd7 7a00 	vldr	s15, [r7]
 802213c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8022140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022148:	d508      	bpl.n	802215c <_ZN9LineTrace16DeterminePidGainEf+0x30>
    {
        p_gain = LINE_P_GAIN_0;
 802214a:	4b1a      	ldr	r3, [pc, #104]	; (80221b4 <_ZN9LineTrace16DeterminePidGainEf+0x88>)
 802214c:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_0;
 802214e:	f04f 0300 	mov.w	r3, #0
 8022152:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_0;
 8022154:	f04f 0300 	mov.w	r3, #0
 8022158:	60fb      	str	r3, [r7, #12]
 802215a:	e01b      	b.n	8022194 <_ZN9LineTrace16DeterminePidGainEf+0x68>
    }
    else if(target_velocity < TARGET_VELOCITY_1)
 802215c:	edd7 7a00 	vldr	s15, [r7]
 8022160:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8022164:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802216c:	d509      	bpl.n	8022182 <_ZN9LineTrace16DeterminePidGainEf+0x56>
    {
        p_gain = LINE_P_GAIN_1;
 802216e:	f04f 0300 	mov.w	r3, #0
 8022172:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_1;
 8022174:	f04f 0300 	mov.w	r3, #0
 8022178:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_1;
 802217a:	f04f 0300 	mov.w	r3, #0
 802217e:	60fb      	str	r3, [r7, #12]
 8022180:	e008      	b.n	8022194 <_ZN9LineTrace16DeterminePidGainEf+0x68>
    }
    else // Error handler
    {
        p_gain = 0;
 8022182:	f04f 0300 	mov.w	r3, #0
 8022186:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 8022188:	f04f 0300 	mov.w	r3, #0
 802218c:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 802218e:	f04f 0300 	mov.w	r3, #0
 8022192:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(p_gain, i_gain, d_gain);
 8022194:	ed97 1a03 	vldr	s2, [r7, #12]
 8022198:	edd7 0a04 	vldr	s1, [r7, #16]
 802219c:	ed97 0a05 	vldr	s0, [r7, #20]
 80221a0:	6878      	ldr	r0, [r7, #4]
 80221a2:	f000 f809 	bl	80221b8 <_ZN9LineTrace10PidControlEfff>
 80221a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80221aa:	eeb0 0a67 	vmov.f32	s0, s15
 80221ae:	3718      	adds	r7, #24
 80221b0:	46bd      	mov	sp, r7
 80221b2:	bd80      	pop	{r7, pc}
 80221b4:	3a03126f 	.word	0x3a03126f

080221b8 <_ZN9LineTrace10PidControlEfff>:

float LineTrace::PidControl(float p_gain, float i_gain, float d_gain)
{
 80221b8:	b590      	push	{r4, r7, lr}
 80221ba:	b08b      	sub	sp, #44	; 0x2c
 80221bc:	af00      	add	r7, sp, #0
 80221be:	60f8      	str	r0, [r7, #12]
 80221c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80221c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80221c8:	ed87 1a00 	vstr	s2, [r7]
    static float pre_error = line_sensor_->LeftRightDifference();
 80221cc:	4b52      	ldr	r3, [pc, #328]	; (8022318 <_ZN9LineTrace10PidControlEfff+0x160>)
 80221ce:	781b      	ldrb	r3, [r3, #0]
 80221d0:	f3bf 8f5b 	dmb	ish
 80221d4:	b2db      	uxtb	r3, r3
 80221d6:	f003 0301 	and.w	r3, r3, #1
 80221da:	2b00      	cmp	r3, #0
 80221dc:	bf0c      	ite	eq
 80221de:	2301      	moveq	r3, #1
 80221e0:	2300      	movne	r3, #0
 80221e2:	b2db      	uxtb	r3, r3
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	d017      	beq.n	8022218 <_ZN9LineTrace10PidControlEfff+0x60>
 80221e8:	484b      	ldr	r0, [pc, #300]	; (8022318 <_ZN9LineTrace10PidControlEfff+0x160>)
 80221ea:	f008 f83b 	bl	802a264 <__cxa_guard_acquire>
 80221ee:	4603      	mov	r3, r0
 80221f0:	2b00      	cmp	r3, #0
 80221f2:	bf14      	ite	ne
 80221f4:	2301      	movne	r3, #1
 80221f6:	2300      	moveq	r3, #0
 80221f8:	b2db      	uxtb	r3, r3
 80221fa:	2b00      	cmp	r3, #0
 80221fc:	d00c      	beq.n	8022218 <_ZN9LineTrace10PidControlEfff+0x60>
 80221fe:	68fb      	ldr	r3, [r7, #12]
 8022200:	685b      	ldr	r3, [r3, #4]
 8022202:	4618      	mov	r0, r3
 8022204:	f7ff fea0 	bl	8021f48 <_ZN10LineSensor19LeftRightDifferenceEv>
 8022208:	eef0 7a40 	vmov.f32	s15, s0
 802220c:	4b43      	ldr	r3, [pc, #268]	; (802231c <_ZN9LineTrace10PidControlEfff+0x164>)
 802220e:	edc3 7a00 	vstr	s15, [r3]
 8022212:	4841      	ldr	r0, [pc, #260]	; (8022318 <_ZN9LineTrace10PidControlEfff+0x160>)
 8022214:	f008 f832 	bl	802a27c <__cxa_guard_release>
    float error, differential_error, integral_error;
    float p, d, i;

    error = line_sensor_->LeftRightDifference();
 8022218:	68fb      	ldr	r3, [r7, #12]
 802221a:	685b      	ldr	r3, [r3, #4]
 802221c:	4618      	mov	r0, r3
 802221e:	f7ff fe93 	bl	8021f48 <_ZN10LineSensor19LeftRightDifferenceEv>
 8022222:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    differential_error = (error - pre_error) / TIM6_PERIOD_S;
 8022226:	4b3d      	ldr	r3, [pc, #244]	; (802231c <_ZN9LineTrace10PidControlEfff+0x164>)
 8022228:	edd3 7a00 	vldr	s15, [r3]
 802222c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8022230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022234:	ee17 0a90 	vmov	r0, s15
 8022238:	f7fe f866 	bl	8020308 <__aeabi_f2d>
 802223c:	a334      	add	r3, pc, #208	; (adr r3, 8022310 <_ZN9LineTrace10PidControlEfff+0x158>)
 802223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022242:	f7fe f9e3 	bl	802060c <__aeabi_ddiv>
 8022246:	4603      	mov	r3, r0
 8022248:	460c      	mov	r4, r1
 802224a:	4618      	mov	r0, r3
 802224c:	4621      	mov	r1, r4
 802224e:	f7fe fb4d 	bl	80208ec <__aeabi_d2f>
 8022252:	4603      	mov	r3, r0
 8022254:	623b      	str	r3, [r7, #32]
    integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 8022256:	4b31      	ldr	r3, [pc, #196]	; (802231c <_ZN9LineTrace10PidControlEfff+0x164>)
 8022258:	ed93 7a00 	vldr	s14, [r3]
 802225c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8022260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022264:	ee17 0a90 	vmov	r0, s15
 8022268:	f7fe f84e 	bl	8020308 <__aeabi_f2d>
 802226c:	f04f 0200 	mov.w	r2, #0
 8022270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8022274:	f7fe f9ca 	bl	802060c <__aeabi_ddiv>
 8022278:	4603      	mov	r3, r0
 802227a:	460c      	mov	r4, r1
 802227c:	4618      	mov	r0, r3
 802227e:	4621      	mov	r1, r4
 8022280:	a323      	add	r3, pc, #140	; (adr r3, 8022310 <_ZN9LineTrace10PidControlEfff+0x158>)
 8022282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022286:	f7fe f897 	bl	80203b8 <__aeabi_dmul>
 802228a:	4603      	mov	r3, r0
 802228c:	460c      	mov	r4, r1
 802228e:	4618      	mov	r0, r3
 8022290:	4621      	mov	r1, r4
 8022292:	f7fe fb2b 	bl	80208ec <__aeabi_d2f>
 8022296:	4603      	mov	r3, r0
 8022298:	61fb      	str	r3, [r7, #28]
    SetIntegralError(integral_error);
 802229a:	ed97 0a07 	vldr	s0, [r7, #28]
 802229e:	68f8      	ldr	r0, [r7, #12]
 80222a0:	f000 f844 	bl	802232c <_ZN9LineTrace16SetIntegralErrorEf>

    p = p_gain * error;
 80222a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80222a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80222ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80222b0:	edc7 7a06 	vstr	s15, [r7, #24]
    d = d_gain * differential_error;
 80222b4:	ed97 7a00 	vldr	s14, [r7]
 80222b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80222bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80222c0:	edc7 7a05 	vstr	s15, [r7, #20]
    i = i_gain * integral_error_;
 80222c4:	68fb      	ldr	r3, [r7, #12]
 80222c6:	edd3 7a00 	vldr	s15, [r3]
 80222ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80222ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80222d2:	edc7 7a04 	vstr	s15, [r7, #16]

#ifdef DEBUG_MODE
    g_trace_p = p;
 80222d6:	4a12      	ldr	r2, [pc, #72]	; (8022320 <_ZN9LineTrace10PidControlEfff+0x168>)
 80222d8:	69bb      	ldr	r3, [r7, #24]
 80222da:	6013      	str	r3, [r2, #0]
    g_trace_d = d;
 80222dc:	4a11      	ldr	r2, [pc, #68]	; (8022324 <_ZN9LineTrace10PidControlEfff+0x16c>)
 80222de:	697b      	ldr	r3, [r7, #20]
 80222e0:	6013      	str	r3, [r2, #0]
    g_trace_i = i;
 80222e2:	4a11      	ldr	r2, [pc, #68]	; (8022328 <_ZN9LineTrace10PidControlEfff+0x170>)
 80222e4:	693b      	ldr	r3, [r7, #16]
 80222e6:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    pre_error = error;
 80222e8:	4a0c      	ldr	r2, [pc, #48]	; (802231c <_ZN9LineTrace10PidControlEfff+0x164>)
 80222ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222ec:	6013      	str	r3, [r2, #0]

    return p + d + i;
 80222ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80222f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80222f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80222fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80222fe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8022302:	eeb0 0a67 	vmov.f32	s0, s15
 8022306:	372c      	adds	r7, #44	; 0x2c
 8022308:	46bd      	mov	sp, r7
 802230a:	bd90      	pop	{r4, r7, pc}
 802230c:	f3af 8000 	nop.w
 8022310:	47ae147b 	.word	0x47ae147b
 8022314:	3f547ae1 	.word	0x3f547ae1
 8022318:	2000007c 	.word	0x2000007c
 802231c:	20000078 	.word	0x20000078
 8022320:	20000288 	.word	0x20000288
 8022324:	20000290 	.word	0x20000290
 8022328:	2000028c 	.word	0x2000028c

0802232c <_ZN9LineTrace16SetIntegralErrorEf>:

void LineTrace::SetIntegralError(float integral_error)
{
 802232c:	b480      	push	{r7}
 802232e:	b083      	sub	sp, #12
 8022330:	af00      	add	r7, sp, #0
 8022332:	6078      	str	r0, [r7, #4]
 8022334:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8022338:	687b      	ldr	r3, [r7, #4]
 802233a:	ed93 7a00 	vldr	s14, [r3]
 802233e:	edd7 7a00 	vldr	s15, [r7]
 8022342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022346:	687b      	ldr	r3, [r7, #4]
 8022348:	edc3 7a00 	vstr	s15, [r3]
}
 802234c:	bf00      	nop
 802234e:	370c      	adds	r7, #12
 8022350:	46bd      	mov	sp, r7
 8022352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022356:	4770      	bx	lr

08022358 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8022358:	b480      	push	{r7}
 802235a:	b083      	sub	sp, #12
 802235c:	af00      	add	r7, sp, #0
 802235e:	ed87 0a01 	vstr	s0, [r7, #4]
 8022362:	edd7 7a01 	vldr	s15, [r7, #4]
 8022366:	eef0 7ae7 	vabs.f32	s15, s15
 802236a:	eeb0 0a67 	vmov.f32	s0, s15
 802236e:	370c      	adds	r7, #12
 8022370:	46bd      	mov	sp, r7
 8022372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022376:	4770      	bx	lr

08022378 <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() : const_distance_log_(), radian_log_(), various_log_(), const_distance_copy_(), radian_copy_(), various_copy_(), accel_address_(), decel_address_(), periodic_write_enable_(0), accel_position_write_enable_(0), excess_stack_(0), target_velocity_(MIN_VELOCITY) {}
 8022378:	b580      	push	{r7, lr}
 802237a:	b082      	sub	sp, #8
 802237c:	af00      	add	r7, sp, #0
 802237e:	6078      	str	r0, [r7, #4]
 8022380:	687a      	ldr	r2, [r7, #4]
 8022382:	2309      	movs	r3, #9
 8022384:	2b00      	cmp	r3, #0
 8022386:	db05      	blt.n	8022394 <_ZN6LoggerC1Ev+0x1c>
 8022388:	f04f 0100 	mov.w	r1, #0
 802238c:	6011      	str	r1, [r2, #0]
 802238e:	3204      	adds	r2, #4
 8022390:	3b01      	subs	r3, #1
 8022392:	e7f7      	b.n	8022384 <_ZN6LoggerC1Ev+0xc>
 8022394:	687b      	ldr	r3, [r7, #4]
 8022396:	f103 0228 	add.w	r2, r3, #40	; 0x28
 802239a:	2309      	movs	r3, #9
 802239c:	2b00      	cmp	r3, #0
 802239e:	db05      	blt.n	80223ac <_ZN6LoggerC1Ev+0x34>
 80223a0:	f04f 0100 	mov.w	r1, #0
 80223a4:	6011      	str	r1, [r2, #0]
 80223a6:	3204      	adds	r2, #4
 80223a8:	3b01      	subs	r3, #1
 80223aa:	e7f7      	b.n	802239c <_ZN6LoggerC1Ev+0x24>
 80223ac:	687b      	ldr	r3, [r7, #4]
 80223ae:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80223b2:	2309      	movs	r3, #9
 80223b4:	2b00      	cmp	r3, #0
 80223b6:	db04      	blt.n	80223c2 <_ZN6LoggerC1Ev+0x4a>
 80223b8:	2100      	movs	r1, #0
 80223ba:	8011      	strh	r1, [r2, #0]
 80223bc:	3202      	adds	r2, #2
 80223be:	3b01      	subs	r3, #1
 80223c0:	e7f8      	b.n	80223b4 <_ZN6LoggerC1Ev+0x3c>
 80223c2:	687b      	ldr	r3, [r7, #4]
 80223c4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80223c8:	2309      	movs	r3, #9
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	db05      	blt.n	80223da <_ZN6LoggerC1Ev+0x62>
 80223ce:	f04f 0100 	mov.w	r1, #0
 80223d2:	6011      	str	r1, [r2, #0]
 80223d4:	3204      	adds	r2, #4
 80223d6:	3b01      	subs	r3, #1
 80223d8:	e7f7      	b.n	80223ca <_ZN6LoggerC1Ev+0x52>
 80223da:	687b      	ldr	r3, [r7, #4]
 80223dc:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 80223e0:	2309      	movs	r3, #9
 80223e2:	2b00      	cmp	r3, #0
 80223e4:	db05      	blt.n	80223f2 <_ZN6LoggerC1Ev+0x7a>
 80223e6:	f04f 0100 	mov.w	r1, #0
 80223ea:	6011      	str	r1, [r2, #0]
 80223ec:	3204      	adds	r2, #4
 80223ee:	3b01      	subs	r3, #1
 80223f0:	e7f7      	b.n	80223e2 <_ZN6LoggerC1Ev+0x6a>
 80223f2:	687b      	ldr	r3, [r7, #4]
 80223f4:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 80223f8:	2309      	movs	r3, #9
 80223fa:	2b00      	cmp	r3, #0
 80223fc:	db04      	blt.n	8022408 <_ZN6LoggerC1Ev+0x90>
 80223fe:	2100      	movs	r1, #0
 8022400:	8011      	strh	r1, [r2, #0]
 8022402:	3202      	adds	r2, #2
 8022404:	3b01      	subs	r3, #1
 8022406:	e7f8      	b.n	80223fa <_ZN6LoggerC1Ev+0x82>
 8022408:	687b      	ldr	r3, [r7, #4]
 802240a:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 802240e:	2304      	movs	r3, #4
 8022410:	2b00      	cmp	r3, #0
 8022412:	db04      	blt.n	802241e <_ZN6LoggerC1Ev+0xa6>
 8022414:	2100      	movs	r1, #0
 8022416:	8011      	strh	r1, [r2, #0]
 8022418:	3202      	adds	r2, #2
 802241a:	3b01      	subs	r3, #1
 802241c:	e7f8      	b.n	8022410 <_ZN6LoggerC1Ev+0x98>
 802241e:	687b      	ldr	r3, [r7, #4]
 8022420:	f103 02d2 	add.w	r2, r3, #210	; 0xd2
 8022424:	2304      	movs	r3, #4
 8022426:	2b00      	cmp	r3, #0
 8022428:	db04      	blt.n	8022434 <_ZN6LoggerC1Ev+0xbc>
 802242a:	2100      	movs	r1, #0
 802242c:	8011      	strh	r1, [r2, #0]
 802242e:	3202      	adds	r2, #2
 8022430:	3b01      	subs	r3, #1
 8022432:	e7f8      	b.n	8022426 <_ZN6LoggerC1Ev+0xae>
 8022434:	687b      	ldr	r3, [r7, #4]
 8022436:	2200      	movs	r2, #0
 8022438:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 802243c:	687b      	ldr	r3, [r7, #4]
 802243e:	2200      	movs	r2, #0
 8022440:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8022444:	687b      	ldr	r3, [r7, #4]
 8022446:	f04f 0200 	mov.w	r2, #0
 802244a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 802244e:	687b      	ldr	r3, [r7, #4]
 8022450:	4a0b      	ldr	r2, [pc, #44]	; (8022480 <_ZN6LoggerC1Ev+0x108>)
 8022452:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8022456:	687b      	ldr	r3, [r7, #4]
 8022458:	33e8      	adds	r3, #232	; 0xe8
 802245a:	4618      	mov	r0, r3
 802245c:	f7fe fc5a 	bl	8020d14 <_ZN7EncoderC1Ev>
 8022460:	687b      	ldr	r3, [r7, #4]
 8022462:	33f8      	adds	r3, #248	; 0xf8
 8022464:	4618      	mov	r0, r3
 8022466:	f7fe ff37 	bl	80212d8 <_ZN8Iim42652C1Ev>
 802246a:	687b      	ldr	r3, [r7, #4]
 802246c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022470:	4618      	mov	r0, r3
 8022472:	f002 fcef 	bl	8024e54 <_ZN10SideSensorC1Ev>
 8022476:	687b      	ldr	r3, [r7, #4]
 8022478:	4618      	mov	r0, r3
 802247a:	3708      	adds	r7, #8
 802247c:	46bd      	mov	sp, r7
 802247e:	bd80      	pop	{r7, pc}
 8022480:	3fa66666 	.word	0x3fa66666
 8022484:	00000000 	.word	0x00000000

08022488 <_ZN6Logger7LoggingEh>:

void Logger::Logging(uint8_t process_complete)
{
 8022488:	b5b0      	push	{r4, r5, r7, lr}
 802248a:	b08c      	sub	sp, #48	; 0x30
 802248c:	af00      	add	r7, sp, #0
 802248e:	6078      	str	r0, [r7, #4]
 8022490:	460b      	mov	r3, r1
 8022492:	70fb      	strb	r3, [r7, #3]
    float distance = encoder.GetDistanceStack();
 8022494:	687b      	ldr	r3, [r7, #4]
 8022496:	33e8      	adds	r3, #232	; 0xe8
 8022498:	4618      	mov	r0, r3
 802249a:	f7fe fd26 	bl	8020eea <_ZN7Encoder16GetDistanceStackEv>
 802249e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    if(distance < LOGGING_CONST_DISTANCE) return;
 80224a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80224a6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80224aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80224ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224b2:	f100 81f5 	bmi.w	80228a0 <_ZN6Logger7LoggingEh+0x418>
    encoder.ResetDistanceStack();
 80224b6:	687b      	ldr	r3, [r7, #4]
 80224b8:	33e8      	adds	r3, #232	; 0xe8
 80224ba:	4618      	mov	r0, r3
 80224bc:	f7fe fcf8 	bl	8020eb0 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0; // flash address count. (0 ~ 6199)
    static uint16_t log_index = 0;   // Count up when interrupt.

    /* Mapping data of distance */
    const_distance_log_[log_index] = distance;
 80224c0:	4bb3      	ldr	r3, [pc, #716]	; (8022790 <_ZN6Logger7LoggingEh+0x308>)
 80224c2:	881b      	ldrh	r3, [r3, #0]
 80224c4:	687a      	ldr	r2, [r7, #4]
 80224c6:	009b      	lsls	r3, r3, #2
 80224c8:	4413      	add	r3, r2
 80224ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80224cc:	601a      	str	r2, [r3, #0]

    /* Mapping data of radian */
    double degree = iim_42652.GetDegreeStackZ();
 80224ce:	687b      	ldr	r3, [r7, #4]
 80224d0:	33f8      	adds	r3, #248	; 0xf8
 80224d2:	4618      	mov	r0, r3
 80224d4:	f7ff f904 	bl	80216e0 <_ZN8Iim4265215GetDegreeStackZEv>
 80224d8:	ed87 0b06 	vstr	d0, [r7, #24]
    float radian = static_cast<float>(degree * M_PI / 180.0);
 80224dc:	a3aa      	add	r3, pc, #680	; (adr r3, 8022788 <_ZN6Logger7LoggingEh+0x300>)
 80224de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80224e6:	f7fd ff67 	bl	80203b8 <__aeabi_dmul>
 80224ea:	4603      	mov	r3, r0
 80224ec:	460c      	mov	r4, r1
 80224ee:	4618      	mov	r0, r3
 80224f0:	4621      	mov	r1, r4
 80224f2:	f04f 0200 	mov.w	r2, #0
 80224f6:	4ba7      	ldr	r3, [pc, #668]	; (8022794 <_ZN6Logger7LoggingEh+0x30c>)
 80224f8:	f7fe f888 	bl	802060c <__aeabi_ddiv>
 80224fc:	4603      	mov	r3, r0
 80224fe:	460c      	mov	r4, r1
 8022500:	4618      	mov	r0, r3
 8022502:	4621      	mov	r1, r4
 8022504:	f7fe f9f2 	bl	80208ec <__aeabi_d2f>
 8022508:	4603      	mov	r3, r0
 802250a:	617b      	str	r3, [r7, #20]
    radian_log_[log_index] = radian;
 802250c:	4ba0      	ldr	r3, [pc, #640]	; (8022790 <_ZN6Logger7LoggingEh+0x308>)
 802250e:	881b      	ldrh	r3, [r3, #0]
 8022510:	687a      	ldr	r2, [r7, #4]
 8022512:	330a      	adds	r3, #10
 8022514:	009b      	lsls	r3, r3, #2
 8022516:	4413      	add	r3, r2
 8022518:	697a      	ldr	r2, [r7, #20]
 802251a:	601a      	str	r2, [r3, #0]
    iim_42652.ResetDegreeStackZ();
 802251c:	687b      	ldr	r3, [r7, #4]
 802251e:	33f8      	adds	r3, #248	; 0xf8
 8022520:	4618      	mov	r0, r3
 8022522:	f7ff f8cd 	bl	80216c0 <_ZN8Iim4265217ResetDegreeStackZEv>

    /* Various log */
    static uint8_t pre_corner_cnt = side_sensor.GetCornerMarkerCount();
 8022526:	4b9c      	ldr	r3, [pc, #624]	; (8022798 <_ZN6Logger7LoggingEh+0x310>)
 8022528:	781b      	ldrb	r3, [r3, #0]
 802252a:	f3bf 8f5b 	dmb	ish
 802252e:	b2db      	uxtb	r3, r3
 8022530:	f003 0301 	and.w	r3, r3, #1
 8022534:	2b00      	cmp	r3, #0
 8022536:	bf0c      	ite	eq
 8022538:	2301      	moveq	r3, #1
 802253a:	2300      	movne	r3, #0
 802253c:	b2db      	uxtb	r3, r3
 802253e:	2b00      	cmp	r3, #0
 8022540:	d017      	beq.n	8022572 <_ZN6Logger7LoggingEh+0xea>
 8022542:	4895      	ldr	r0, [pc, #596]	; (8022798 <_ZN6Logger7LoggingEh+0x310>)
 8022544:	f007 fe8e 	bl	802a264 <__cxa_guard_acquire>
 8022548:	4603      	mov	r3, r0
 802254a:	2b00      	cmp	r3, #0
 802254c:	bf14      	ite	ne
 802254e:	2301      	movne	r3, #1
 8022550:	2300      	moveq	r3, #0
 8022552:	b2db      	uxtb	r3, r3
 8022554:	2b00      	cmp	r3, #0
 8022556:	d00c      	beq.n	8022572 <_ZN6Logger7LoggingEh+0xea>
 8022558:	687b      	ldr	r3, [r7, #4]
 802255a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802255e:	4618      	mov	r0, r3
 8022560:	f002 ff13 	bl	802538a <_ZN10SideSensor20GetCornerMarkerCountEv>
 8022564:	4603      	mov	r3, r0
 8022566:	461a      	mov	r2, r3
 8022568:	4b8c      	ldr	r3, [pc, #560]	; (802279c <_ZN6Logger7LoggingEh+0x314>)
 802256a:	701a      	strb	r2, [r3, #0]
 802256c:	488a      	ldr	r0, [pc, #552]	; (8022798 <_ZN6Logger7LoggingEh+0x310>)
 802256e:	f007 fe85 	bl	802a27c <__cxa_guard_release>
    static uint8_t pre_cross_cnt  = side_sensor.GetCrossLineCount();
 8022572:	4b8b      	ldr	r3, [pc, #556]	; (80227a0 <_ZN6Logger7LoggingEh+0x318>)
 8022574:	781b      	ldrb	r3, [r3, #0]
 8022576:	f3bf 8f5b 	dmb	ish
 802257a:	b2db      	uxtb	r3, r3
 802257c:	f003 0301 	and.w	r3, r3, #1
 8022580:	2b00      	cmp	r3, #0
 8022582:	bf0c      	ite	eq
 8022584:	2301      	moveq	r3, #1
 8022586:	2300      	movne	r3, #0
 8022588:	b2db      	uxtb	r3, r3
 802258a:	2b00      	cmp	r3, #0
 802258c:	d017      	beq.n	80225be <_ZN6Logger7LoggingEh+0x136>
 802258e:	4884      	ldr	r0, [pc, #528]	; (80227a0 <_ZN6Logger7LoggingEh+0x318>)
 8022590:	f007 fe68 	bl	802a264 <__cxa_guard_acquire>
 8022594:	4603      	mov	r3, r0
 8022596:	2b00      	cmp	r3, #0
 8022598:	bf14      	ite	ne
 802259a:	2301      	movne	r3, #1
 802259c:	2300      	moveq	r3, #0
 802259e:	b2db      	uxtb	r3, r3
 80225a0:	2b00      	cmp	r3, #0
 80225a2:	d00c      	beq.n	80225be <_ZN6Logger7LoggingEh+0x136>
 80225a4:	687b      	ldr	r3, [r7, #4]
 80225a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80225aa:	4618      	mov	r0, r3
 80225ac:	f002 fef9 	bl	80253a2 <_ZN10SideSensor17GetCrossLineCountEv>
 80225b0:	4603      	mov	r3, r0
 80225b2:	461a      	mov	r2, r3
 80225b4:	4b7b      	ldr	r3, [pc, #492]	; (80227a4 <_ZN6Logger7LoggingEh+0x31c>)
 80225b6:	701a      	strb	r2, [r3, #0]
 80225b8:	4879      	ldr	r0, [pc, #484]	; (80227a0 <_ZN6Logger7LoggingEh+0x318>)
 80225ba:	f007 fe5f 	bl	802a27c <__cxa_guard_release>
    uint8_t corner_cnt = side_sensor.GetCornerMarkerCount();
 80225be:	687b      	ldr	r3, [r7, #4]
 80225c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80225c4:	4618      	mov	r0, r3
 80225c6:	f002 fee0 	bl	802538a <_ZN10SideSensor20GetCornerMarkerCountEv>
 80225ca:	4603      	mov	r3, r0
 80225cc:	74fb      	strb	r3, [r7, #19]
    uint8_t cross_cnt  = side_sensor.GetCrossLineCount();
 80225ce:	687b      	ldr	r3, [r7, #4]
 80225d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80225d4:	4618      	mov	r0, r3
 80225d6:	f002 fee4 	bl	80253a2 <_ZN10SideSensor17GetCrossLineCountEv>
 80225da:	4603      	mov	r3, r0
 80225dc:	74bb      	strb	r3, [r7, #18]
    uint16_t various_buff = 0;
 80225de:	2300      	movs	r3, #0
 80225e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(process_complete != 0)        various_buff |= 0x0004;
 80225e2:	78fb      	ldrb	r3, [r7, #3]
 80225e4:	2b00      	cmp	r3, #0
 80225e6:	d003      	beq.n	80225f0 <_ZN6Logger7LoggingEh+0x168>
 80225e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80225ea:	f043 0304 	orr.w	r3, r3, #4
 80225ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_corner_cnt != corner_cnt) various_buff |= 0x0002;
 80225f0:	4b6a      	ldr	r3, [pc, #424]	; (802279c <_ZN6Logger7LoggingEh+0x314>)
 80225f2:	781b      	ldrb	r3, [r3, #0]
 80225f4:	7cfa      	ldrb	r2, [r7, #19]
 80225f6:	429a      	cmp	r2, r3
 80225f8:	d003      	beq.n	8022602 <_ZN6Logger7LoggingEh+0x17a>
 80225fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80225fc:	f043 0302 	orr.w	r3, r3, #2
 8022600:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_cross_cnt != cross_cnt)   various_buff |= 0x0001;
 8022602:	4b68      	ldr	r3, [pc, #416]	; (80227a4 <_ZN6Logger7LoggingEh+0x31c>)
 8022604:	781b      	ldrb	r3, [r3, #0]
 8022606:	7cba      	ldrb	r2, [r7, #18]
 8022608:	429a      	cmp	r2, r3
 802260a:	d003      	beq.n	8022614 <_ZN6Logger7LoggingEh+0x18c>
 802260c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802260e:	f043 0301 	orr.w	r3, r3, #1
 8022612:	85fb      	strh	r3, [r7, #46]	; 0x2e
    pre_corner_cnt = corner_cnt;
 8022614:	4a61      	ldr	r2, [pc, #388]	; (802279c <_ZN6Logger7LoggingEh+0x314>)
 8022616:	7cfb      	ldrb	r3, [r7, #19]
 8022618:	7013      	strb	r3, [r2, #0]
    pre_cross_cnt  = cross_cnt;
 802261a:	4a62      	ldr	r2, [pc, #392]	; (80227a4 <_ZN6Logger7LoggingEh+0x31c>)
 802261c:	7cbb      	ldrb	r3, [r7, #18]
 802261e:	7013      	strb	r3, [r2, #0]
    various_log_[log_index] = various_buff;
 8022620:	4b5b      	ldr	r3, [pc, #364]	; (8022790 <_ZN6Logger7LoggingEh+0x308>)
 8022622:	881b      	ldrh	r3, [r3, #0]
 8022624:	461a      	mov	r2, r3
 8022626:	687b      	ldr	r3, [r7, #4]
 8022628:	3228      	adds	r2, #40	; 0x28
 802262a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 802262c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /* Copy periodic log */
    if(log_index == LAST_LOG_INDEX)
 8022630:	4b57      	ldr	r3, [pc, #348]	; (8022790 <_ZN6Logger7LoggingEh+0x308>)
 8022632:	881b      	ldrh	r3, [r3, #0]
 8022634:	2b09      	cmp	r3, #9
 8022636:	d120      	bne.n	802267a <_ZN6Logger7LoggingEh+0x1f2>
    {
        log_index = 0;
 8022638:	4b55      	ldr	r3, [pc, #340]	; (8022790 <_ZN6Logger7LoggingEh+0x308>)
 802263a:	2200      	movs	r2, #0
 802263c:	801a      	strh	r2, [r3, #0]
        memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 802263e:	687b      	ldr	r3, [r7, #4]
 8022640:	3364      	adds	r3, #100	; 0x64
 8022642:	6879      	ldr	r1, [r7, #4]
 8022644:	2228      	movs	r2, #40	; 0x28
 8022646:	4618      	mov	r0, r3
 8022648:	f007 fe40 	bl	802a2cc <memcpy>
        memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8022652:	687b      	ldr	r3, [r7, #4]
 8022654:	3328      	adds	r3, #40	; 0x28
 8022656:	2228      	movs	r2, #40	; 0x28
 8022658:	4619      	mov	r1, r3
 802265a:	f007 fe37 	bl	802a2cc <memcpy>
        memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 802265e:	687b      	ldr	r3, [r7, #4]
 8022660:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8022664:	687b      	ldr	r3, [r7, #4]
 8022666:	3350      	adds	r3, #80	; 0x50
 8022668:	2214      	movs	r2, #20
 802266a:	4619      	mov	r1, r3
 802266c:	f007 fe2e 	bl	802a2cc <memcpy>
        periodic_write_enable_ = 1;
 8022670:	687b      	ldr	r3, [r7, #4]
 8022672:	2201      	movs	r2, #1
 8022674:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8022678:	e005      	b.n	8022686 <_ZN6Logger7LoggingEh+0x1fe>
    }
    else log_index++;
 802267a:	4b45      	ldr	r3, [pc, #276]	; (8022790 <_ZN6Logger7LoggingEh+0x308>)
 802267c:	881b      	ldrh	r3, [r3, #0]
 802267e:	3301      	adds	r3, #1
 8022680:	b29a      	uxth	r2, r3
 8022682:	4b43      	ldr	r3, [pc, #268]	; (8022790 <_ZN6Logger7LoggingEh+0x308>)
 8022684:	801a      	strh	r2, [r3, #0]

    /* Distance correction */
    uint16_t correction_address = now_address;
 8022686:	4b48      	ldr	r3, [pc, #288]	; (80227a8 <_ZN6Logger7LoggingEh+0x320>)
 8022688:	881b      	ldrh	r3, [r3, #0]
 802268a:	823b      	strh	r3, [r7, #16]
    float excess = excess_stack_;
 802268c:	687b      	ldr	r3, [r7, #4]
 802268e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8022692:	60fb      	str	r3, [r7, #12]
    excess += distance - LOGGING_CONST_DISTANCE;
 8022694:	68f8      	ldr	r0, [r7, #12]
 8022696:	f7fd fe37 	bl	8020308 <__aeabi_f2d>
 802269a:	4604      	mov	r4, r0
 802269c:	460d      	mov	r5, r1
 802269e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80226a0:	f7fd fe32 	bl	8020308 <__aeabi_f2d>
 80226a4:	f04f 0200 	mov.w	r2, #0
 80226a8:	4b40      	ldr	r3, [pc, #256]	; (80227ac <_ZN6Logger7LoggingEh+0x324>)
 80226aa:	f7fd fccd 	bl	8020048 <__aeabi_dsub>
 80226ae:	4602      	mov	r2, r0
 80226b0:	460b      	mov	r3, r1
 80226b2:	4620      	mov	r0, r4
 80226b4:	4629      	mov	r1, r5
 80226b6:	f7fd fcc9 	bl	802004c <__adddf3>
 80226ba:	4603      	mov	r3, r0
 80226bc:	460c      	mov	r4, r1
 80226be:	4618      	mov	r0, r3
 80226c0:	4621      	mov	r1, r4
 80226c2:	f7fe f913 	bl	80208ec <__aeabi_d2f>
 80226c6:	4603      	mov	r3, r0
 80226c8:	60fb      	str	r3, [r7, #12]
    if(excess > LOGGING_CONST_DISTANCE)
 80226ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80226ce:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80226d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80226d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226da:	dd6b      	ble.n	80227b4 <_ZN6Logger7LoggingEh+0x32c>
    {
        const_distance_log_[log_index] = excess;
 80226dc:	4b2c      	ldr	r3, [pc, #176]	; (8022790 <_ZN6Logger7LoggingEh+0x308>)
 80226de:	881b      	ldrh	r3, [r3, #0]
 80226e0:	687a      	ldr	r2, [r7, #4]
 80226e2:	009b      	lsls	r3, r3, #2
 80226e4:	4413      	add	r3, r2
 80226e6:	68fa      	ldr	r2, [r7, #12]
 80226e8:	601a      	str	r2, [r3, #0]
        radian_log_[log_index] = radian;
 80226ea:	4b29      	ldr	r3, [pc, #164]	; (8022790 <_ZN6Logger7LoggingEh+0x308>)
 80226ec:	881b      	ldrh	r3, [r3, #0]
 80226ee:	687a      	ldr	r2, [r7, #4]
 80226f0:	330a      	adds	r3, #10
 80226f2:	009b      	lsls	r3, r3, #2
 80226f4:	4413      	add	r3, r2
 80226f6:	697a      	ldr	r2, [r7, #20]
 80226f8:	601a      	str	r2, [r3, #0]
        various_log_[log_index] = VARIOUS_LOG_DATA_WHEN_COPY;
 80226fa:	4b25      	ldr	r3, [pc, #148]	; (8022790 <_ZN6Logger7LoggingEh+0x308>)
 80226fc:	881b      	ldrh	r3, [r3, #0]
 80226fe:	461a      	mov	r2, r3
 8022700:	687b      	ldr	r3, [r7, #4]
 8022702:	3228      	adds	r2, #40	; 0x28
 8022704:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 8022708:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        excess_stack_ = excess - LOGGING_CONST_DISTANCE;
 802270c:	edd7 7a03 	vldr	s15, [r7, #12]
 8022710:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022714:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022718:	687b      	ldr	r3, [r7, #4]
 802271a:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
        now_address++;
 802271e:	4b22      	ldr	r3, [pc, #136]	; (80227a8 <_ZN6Logger7LoggingEh+0x320>)
 8022720:	881b      	ldrh	r3, [r3, #0]
 8022722:	3301      	adds	r3, #1
 8022724:	b29a      	uxth	r2, r3
 8022726:	4b20      	ldr	r3, [pc, #128]	; (80227a8 <_ZN6Logger7LoggingEh+0x320>)
 8022728:	801a      	strh	r2, [r3, #0]

        /* Copy periodic log */
        if(log_index == LAST_LOG_INDEX)
 802272a:	4b19      	ldr	r3, [pc, #100]	; (8022790 <_ZN6Logger7LoggingEh+0x308>)
 802272c:	881b      	ldrh	r3, [r3, #0]
 802272e:	2b09      	cmp	r3, #9
 8022730:	d120      	bne.n	8022774 <_ZN6Logger7LoggingEh+0x2ec>
        {
            log_index = 0;
 8022732:	4b17      	ldr	r3, [pc, #92]	; (8022790 <_ZN6Logger7LoggingEh+0x308>)
 8022734:	2200      	movs	r2, #0
 8022736:	801a      	strh	r2, [r3, #0]
            memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 8022738:	687b      	ldr	r3, [r7, #4]
 802273a:	3364      	adds	r3, #100	; 0x64
 802273c:	6879      	ldr	r1, [r7, #4]
 802273e:	2228      	movs	r2, #40	; 0x28
 8022740:	4618      	mov	r0, r3
 8022742:	f007 fdc3 	bl	802a2cc <memcpy>
            memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 8022746:	687b      	ldr	r3, [r7, #4]
 8022748:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	3328      	adds	r3, #40	; 0x28
 8022750:	2228      	movs	r2, #40	; 0x28
 8022752:	4619      	mov	r1, r3
 8022754:	f007 fdba 	bl	802a2cc <memcpy>
            memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 8022758:	687b      	ldr	r3, [r7, #4]
 802275a:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 802275e:	687b      	ldr	r3, [r7, #4]
 8022760:	3350      	adds	r3, #80	; 0x50
 8022762:	2214      	movs	r2, #20
 8022764:	4619      	mov	r1, r3
 8022766:	f007 fdb1 	bl	802a2cc <memcpy>
            periodic_write_enable_ = 1;
 802276a:	687b      	ldr	r3, [r7, #4]
 802276c:	2201      	movs	r2, #1
 802276e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8022772:	e023      	b.n	80227bc <_ZN6Logger7LoggingEh+0x334>
        }
        else log_index++;
 8022774:	4b06      	ldr	r3, [pc, #24]	; (8022790 <_ZN6Logger7LoggingEh+0x308>)
 8022776:	881b      	ldrh	r3, [r3, #0]
 8022778:	3301      	adds	r3, #1
 802277a:	b29a      	uxth	r2, r3
 802277c:	4b04      	ldr	r3, [pc, #16]	; (8022790 <_ZN6Logger7LoggingEh+0x308>)
 802277e:	801a      	strh	r2, [r3, #0]
 8022780:	e01c      	b.n	80227bc <_ZN6Logger7LoggingEh+0x334>
 8022782:	bf00      	nop
 8022784:	f3af 8000 	nop.w
 8022788:	54442d18 	.word	0x54442d18
 802278c:	400921fb 	.word	0x400921fb
 8022790:	20000082 	.word	0x20000082
 8022794:	40668000 	.word	0x40668000
 8022798:	20000088 	.word	0x20000088
 802279c:	20000084 	.word	0x20000084
 80227a0:	20000090 	.word	0x20000090
 80227a4:	2000008c 	.word	0x2000008c
 80227a8:	20000080 	.word	0x20000080
 80227ac:	40340000 	.word	0x40340000
 80227b0:	43ca0000 	.word	0x43ca0000
    }
    else excess_stack_ = excess;
 80227b4:	687b      	ldr	r3, [r7, #4]
 80227b6:	68fa      	ldr	r2, [r7, #12]
 80227b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    /* Accel position log */
    static uint16_t accel_straight_cnt = 0;
    static uint8_t accel_step = 0;
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA)
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	33e8      	adds	r3, #232	; 0xe8
 80227c0:	4618      	mov	r0, r3
 80227c2:	f7fe fba1 	bl	8020f08 <_ZN7Encoder15AngularVelocityEv>
 80227c6:	eef0 7a40 	vmov.f32	s15, s0
 80227ca:	eeb0 0a67 	vmov.f32	s0, s15
 80227ce:	f7ff fdc3 	bl	8022358 <_ZSt4fabsf>
 80227d2:	eeb0 7a40 	vmov.f32	s14, s0
 80227d6:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 80227b0 <_ZN6Logger7LoggingEh+0x328>
 80227da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80227de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227e2:	bf4c      	ite	mi
 80227e4:	2301      	movmi	r3, #1
 80227e6:	2300      	movpl	r3, #0
 80227e8:	b2db      	uxtb	r3, r3
 80227ea:	2b00      	cmp	r3, #0
 80227ec:	d021      	beq.n	8022832 <_ZN6Logger7LoggingEh+0x3aa>
    {
        accel_straight_cnt++;
 80227ee:	4b2e      	ldr	r3, [pc, #184]	; (80228a8 <_ZN6Logger7LoggingEh+0x420>)
 80227f0:	881b      	ldrh	r3, [r3, #0]
 80227f2:	3301      	adds	r3, #1
 80227f4:	b29a      	uxth	r2, r3
 80227f6:	4b2c      	ldr	r3, [pc, #176]	; (80228a8 <_ZN6Logger7LoggingEh+0x420>)
 80227f8:	801a      	strh	r2, [r3, #0]
        if(accel_straight_cnt >= CNT_OF_ACCEL_STEP_UP && accel_step < NUM_OF_ACCEL_STEP)
 80227fa:	4b2b      	ldr	r3, [pc, #172]	; (80228a8 <_ZN6Logger7LoggingEh+0x420>)
 80227fc:	881b      	ldrh	r3, [r3, #0]
 80227fe:	2b07      	cmp	r3, #7
 8022800:	d947      	bls.n	8022892 <_ZN6Logger7LoggingEh+0x40a>
 8022802:	4b2a      	ldr	r3, [pc, #168]	; (80228ac <_ZN6Logger7LoggingEh+0x424>)
 8022804:	781b      	ldrb	r3, [r3, #0]
 8022806:	2b04      	cmp	r3, #4
 8022808:	d843      	bhi.n	8022892 <_ZN6Logger7LoggingEh+0x40a>
        {
            accel_step++;
 802280a:	4b28      	ldr	r3, [pc, #160]	; (80228ac <_ZN6Logger7LoggingEh+0x424>)
 802280c:	781b      	ldrb	r3, [r3, #0]
 802280e:	3301      	adds	r3, #1
 8022810:	b2da      	uxtb	r2, r3
 8022812:	4b26      	ldr	r3, [pc, #152]	; (80228ac <_ZN6Logger7LoggingEh+0x424>)
 8022814:	701a      	strb	r2, [r3, #0]
            accel_address_[accel_step-1] = correction_address - CNT_OF_ACCEL_STEP_UP;
 8022816:	4b25      	ldr	r3, [pc, #148]	; (80228ac <_ZN6Logger7LoggingEh+0x424>)
 8022818:	781b      	ldrb	r3, [r3, #0]
 802281a:	1e5a      	subs	r2, r3, #1
 802281c:	8a3b      	ldrh	r3, [r7, #16]
 802281e:	3b08      	subs	r3, #8
 8022820:	b299      	uxth	r1, r3
 8022822:	687b      	ldr	r3, [r7, #4]
 8022824:	3264      	adds	r2, #100	; 0x64
 8022826:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            accel_straight_cnt = 0;
 802282a:	4b1f      	ldr	r3, [pc, #124]	; (80228a8 <_ZN6Logger7LoggingEh+0x420>)
 802282c:	2200      	movs	r2, #0
 802282e:	801a      	strh	r2, [r3, #0]
 8022830:	e02f      	b.n	8022892 <_ZN6Logger7LoggingEh+0x40a>
        }
    }
    else if(accel_step != 0)
 8022832:	4b1e      	ldr	r3, [pc, #120]	; (80228ac <_ZN6Logger7LoggingEh+0x424>)
 8022834:	781b      	ldrb	r3, [r3, #0]
 8022836:	2b00      	cmp	r3, #0
 8022838:	d028      	beq.n	802288c <_ZN6Logger7LoggingEh+0x404>
    {
        for(int i = 1; i <= accel_step; i++)
 802283a:	2301      	movs	r3, #1
 802283c:	62bb      	str	r3, [r7, #40]	; 0x28
 802283e:	4b1b      	ldr	r3, [pc, #108]	; (80228ac <_ZN6Logger7LoggingEh+0x424>)
 8022840:	781b      	ldrb	r3, [r3, #0]
 8022842:	461a      	mov	r2, r3
 8022844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022846:	4293      	cmp	r3, r2
 8022848:	dc14      	bgt.n	8022874 <_ZN6Logger7LoggingEh+0x3ec>
        {
            decel_address_[i-1] = (correction_address-1) - (DIFF_NEXT_ACCEL_STEP * i);
 802284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802284c:	b29b      	uxth	r3, r3
 802284e:	009b      	lsls	r3, r3, #2
 8022850:	b29b      	uxth	r3, r3
 8022852:	8a3a      	ldrh	r2, [r7, #16]
 8022854:	1ad3      	subs	r3, r2, r3
 8022856:	b29a      	uxth	r2, r3
 8022858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802285a:	3b01      	subs	r3, #1
 802285c:	3a01      	subs	r2, #1
 802285e:	b291      	uxth	r1, r2
 8022860:	687a      	ldr	r2, [r7, #4]
 8022862:	3368      	adds	r3, #104	; 0x68
 8022864:	005b      	lsls	r3, r3, #1
 8022866:	4413      	add	r3, r2
 8022868:	460a      	mov	r2, r1
 802286a:	805a      	strh	r2, [r3, #2]
        for(int i = 1; i <= accel_step; i++)
 802286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802286e:	3301      	adds	r3, #1
 8022870:	62bb      	str	r3, [r7, #40]	; 0x28
 8022872:	e7e4      	b.n	802283e <_ZN6Logger7LoggingEh+0x3b6>
        }
        accel_position_write_enable_ = accel_step;
 8022874:	4b0d      	ldr	r3, [pc, #52]	; (80228ac <_ZN6Logger7LoggingEh+0x424>)
 8022876:	781a      	ldrb	r2, [r3, #0]
 8022878:	687b      	ldr	r3, [r7, #4]
 802287a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        accel_step = 0;
 802287e:	4b0b      	ldr	r3, [pc, #44]	; (80228ac <_ZN6Logger7LoggingEh+0x424>)
 8022880:	2200      	movs	r2, #0
 8022882:	701a      	strb	r2, [r3, #0]
        accel_straight_cnt = 0;
 8022884:	4b08      	ldr	r3, [pc, #32]	; (80228a8 <_ZN6Logger7LoggingEh+0x420>)
 8022886:	2200      	movs	r2, #0
 8022888:	801a      	strh	r2, [r3, #0]
 802288a:	e002      	b.n	8022892 <_ZN6Logger7LoggingEh+0x40a>
    }
    else accel_straight_cnt = 0;
 802288c:	4b06      	ldr	r3, [pc, #24]	; (80228a8 <_ZN6Logger7LoggingEh+0x420>)
 802288e:	2200      	movs	r2, #0
 8022890:	801a      	strh	r2, [r3, #0]

    now_address++;
 8022892:	4b07      	ldr	r3, [pc, #28]	; (80228b0 <_ZN6Logger7LoggingEh+0x428>)
 8022894:	881b      	ldrh	r3, [r3, #0]
 8022896:	3301      	adds	r3, #1
 8022898:	b29a      	uxth	r2, r3
 802289a:	4b05      	ldr	r3, [pc, #20]	; (80228b0 <_ZN6Logger7LoggingEh+0x428>)
 802289c:	801a      	strh	r2, [r3, #0]
 802289e:	e000      	b.n	80228a2 <_ZN6Logger7LoggingEh+0x41a>
    if(distance < LOGGING_CONST_DISTANCE) return;
 80228a0:	bf00      	nop
}
 80228a2:	3730      	adds	r7, #48	; 0x30
 80228a4:	46bd      	mov	sp, r7
 80228a6:	bdb0      	pop	{r4, r5, r7, pc}
 80228a8:	20000094 	.word	0x20000094
 80228ac:	20000096 	.word	0x20000096
 80228b0:	20000080 	.word	0x20000080

080228b4 <_ZN6Logger16StorePeriodicLogEv>:

uint8_t Logger::StorePeriodicLog()
{
 80228b4:	b580      	push	{r7, lr}
 80228b6:	b084      	sub	sp, #16
 80228b8:	af00      	add	r7, sp, #0
 80228ba:	6078      	str	r0, [r7, #4]
    if(periodic_write_enable_ == 0) return 0;
 80228bc:	687b      	ldr	r3, [r7, #4]
 80228be:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80228c2:	2b00      	cmp	r3, #0
 80228c4:	d101      	bne.n	80228ca <_ZN6Logger16StorePeriodicLogEv+0x16>
 80228c6:	2300      	movs	r3, #0
 80228c8:	e087      	b.n	80229da <_ZN6Logger16StorePeriodicLogEv+0x126>
    else periodic_write_enable_ = 0;
 80228ca:	687b      	ldr	r3, [r7, #4]
 80228cc:	2200      	movs	r2, #0
 80228ce:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    static uint32_t address_a = HEAD_ADDRESS_BLOCK_A;
    static uint32_t address_b = HEAD_ADDRESS_BLOCK_B;
    static uint32_t address_c = HEAD_ADDRESS_BLOCK_C;
    uint8_t result = 0;
 80228d2:	2300      	movs	r3, #0
 80228d4:	73fb      	strb	r3, [r7, #15]

    if(!flash.CheckBlankWord(address_a, NUM_OF_LOG))     return 0x10;
 80228d6:	687b      	ldr	r3, [r7, #4]
 80228d8:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80228dc:	4b41      	ldr	r3, [pc, #260]	; (80229e4 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80228de:	681b      	ldr	r3, [r3, #0]
 80228e0:	220a      	movs	r2, #10
 80228e2:	4619      	mov	r1, r3
 80228e4:	f7fe fca5 	bl	8021232 <_ZN5Flash14CheckBlankWordEmm>
 80228e8:	4603      	mov	r3, r0
 80228ea:	f083 0301 	eor.w	r3, r3, #1
 80228ee:	b2db      	uxtb	r3, r3
 80228f0:	2b00      	cmp	r3, #0
 80228f2:	d001      	beq.n	80228f8 <_ZN6Logger16StorePeriodicLogEv+0x44>
 80228f4:	2310      	movs	r3, #16
 80228f6:	e070      	b.n	80229da <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankWord(address_b, NUM_OF_LOG))     return 0x20;
 80228f8:	687b      	ldr	r3, [r7, #4]
 80228fa:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80228fe:	4b3a      	ldr	r3, [pc, #232]	; (80229e8 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022900:	681b      	ldr	r3, [r3, #0]
 8022902:	220a      	movs	r2, #10
 8022904:	4619      	mov	r1, r3
 8022906:	f7fe fc94 	bl	8021232 <_ZN5Flash14CheckBlankWordEmm>
 802290a:	4603      	mov	r3, r0
 802290c:	f083 0301 	eor.w	r3, r3, #1
 8022910:	b2db      	uxtb	r3, r3
 8022912:	2b00      	cmp	r3, #0
 8022914:	d001      	beq.n	802291a <_ZN6Logger16StorePeriodicLogEv+0x66>
 8022916:	2320      	movs	r3, #32
 8022918:	e05f      	b.n	80229da <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankHalfword(address_c, NUM_OF_LOG)) return 0x40;
 802291a:	687b      	ldr	r3, [r7, #4]
 802291c:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022920:	4b32      	ldr	r3, [pc, #200]	; (80229ec <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022922:	681b      	ldr	r3, [r3, #0]
 8022924:	220a      	movs	r2, #10
 8022926:	4619      	mov	r1, r3
 8022928:	f7fe fc2f 	bl	802118a <_ZN5Flash18CheckBlankHalfwordEmm>
 802292c:	4603      	mov	r3, r0
 802292e:	f083 0301 	eor.w	r3, r3, #1
 8022932:	b2db      	uxtb	r3, r3
 8022934:	2b00      	cmp	r3, #0
 8022936:	d001      	beq.n	802293c <_ZN6Logger16StorePeriodicLogEv+0x88>
 8022938:	2340      	movs	r3, #64	; 0x40
 802293a:	e04e      	b.n	80229da <_ZN6Logger16StorePeriodicLogEv+0x126>

    if(!flash.StoreFloat(address_a, const_distance_copy_, NUM_OF_LOG)) result |= 0x01;
 802293c:	687b      	ldr	r3, [r7, #4]
 802293e:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022942:	4b28      	ldr	r3, [pc, #160]	; (80229e4 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 8022944:	6819      	ldr	r1, [r3, #0]
 8022946:	687b      	ldr	r3, [r7, #4]
 8022948:	f103 0264 	add.w	r2, r3, #100	; 0x64
 802294c:	230a      	movs	r3, #10
 802294e:	f7fe fb98 	bl	8021082 <_ZN5Flash10StoreFloatEmPfm>
 8022952:	4603      	mov	r3, r0
 8022954:	f083 0301 	eor.w	r3, r3, #1
 8022958:	b2db      	uxtb	r3, r3
 802295a:	2b00      	cmp	r3, #0
 802295c:	d003      	beq.n	8022966 <_ZN6Logger16StorePeriodicLogEv+0xb2>
 802295e:	7bfb      	ldrb	r3, [r7, #15]
 8022960:	f043 0301 	orr.w	r3, r3, #1
 8022964:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreFloat(address_b, radian_copy_, NUM_OF_LOG))         result |= 0x02;
 8022966:	687b      	ldr	r3, [r7, #4]
 8022968:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 802296c:	4b1e      	ldr	r3, [pc, #120]	; (80229e8 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 802296e:	6819      	ldr	r1, [r3, #0]
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8022976:	230a      	movs	r3, #10
 8022978:	f7fe fb83 	bl	8021082 <_ZN5Flash10StoreFloatEmPfm>
 802297c:	4603      	mov	r3, r0
 802297e:	f083 0301 	eor.w	r3, r3, #1
 8022982:	b2db      	uxtb	r3, r3
 8022984:	2b00      	cmp	r3, #0
 8022986:	d003      	beq.n	8022990 <_ZN6Logger16StorePeriodicLogEv+0xdc>
 8022988:	7bfb      	ldrb	r3, [r7, #15]
 802298a:	f043 0302 	orr.w	r3, r3, #2
 802298e:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreUint16(address_c, various_copy_, NUM_OF_LOG))       result |= 0x04;
 8022990:	687b      	ldr	r3, [r7, #4]
 8022992:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022996:	4b15      	ldr	r3, [pc, #84]	; (80229ec <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022998:	6819      	ldr	r1, [r3, #0]
 802299a:	687b      	ldr	r3, [r7, #4]
 802299c:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 80229a0:	230a      	movs	r3, #10
 80229a2:	f7fe fb39 	bl	8021018 <_ZN5Flash11StoreUint16EmPtm>
 80229a6:	4603      	mov	r3, r0
 80229a8:	f083 0301 	eor.w	r3, r3, #1
 80229ac:	b2db      	uxtb	r3, r3
 80229ae:	2b00      	cmp	r3, #0
 80229b0:	d003      	beq.n	80229ba <_ZN6Logger16StorePeriodicLogEv+0x106>
 80229b2:	7bfb      	ldrb	r3, [r7, #15]
 80229b4:	f043 0304 	orr.w	r3, r3, #4
 80229b8:	73fb      	strb	r3, [r7, #15]

    address_a += NUM_OF_LOG * 4;
 80229ba:	4b0a      	ldr	r3, [pc, #40]	; (80229e4 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80229bc:	681b      	ldr	r3, [r3, #0]
 80229be:	3328      	adds	r3, #40	; 0x28
 80229c0:	4a08      	ldr	r2, [pc, #32]	; (80229e4 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80229c2:	6013      	str	r3, [r2, #0]
    address_b += NUM_OF_LOG * 4;
 80229c4:	4b08      	ldr	r3, [pc, #32]	; (80229e8 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80229c6:	681b      	ldr	r3, [r3, #0]
 80229c8:	3328      	adds	r3, #40	; 0x28
 80229ca:	4a07      	ldr	r2, [pc, #28]	; (80229e8 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80229cc:	6013      	str	r3, [r2, #0]
    address_c += NUM_OF_LOG * 2;
 80229ce:	4b07      	ldr	r3, [pc, #28]	; (80229ec <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80229d0:	681b      	ldr	r3, [r3, #0]
 80229d2:	3314      	adds	r3, #20
 80229d4:	4a05      	ldr	r2, [pc, #20]	; (80229ec <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80229d6:	6013      	str	r3, [r2, #0]

    return result;
 80229d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80229da:	4618      	mov	r0, r3
 80229dc:	3710      	adds	r7, #16
 80229de:	46bd      	mov	sp, r7
 80229e0:	bd80      	pop	{r7, pc}
 80229e2:	bf00      	nop
 80229e4:	20000000 	.word	0x20000000
 80229e8:	20000004 	.word	0x20000004
 80229ec:	20000008 	.word	0x20000008

080229f0 <_ZN6Logger21StoreAccelPositionLogEv>:

uint8_t Logger::StoreAccelPositionLog()
{
 80229f0:	b580      	push	{r7, lr}
 80229f2:	b086      	sub	sp, #24
 80229f4:	af00      	add	r7, sp, #0
 80229f6:	6078      	str	r0, [r7, #4]
    uint8_t accel_step = accel_position_write_enable_;
 80229f8:	687b      	ldr	r3, [r7, #4]
 80229fa:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80229fe:	75bb      	strb	r3, [r7, #22]
    if(accel_step == 0) return 0;
 8022a00:	7dbb      	ldrb	r3, [r7, #22]
 8022a02:	2b00      	cmp	r3, #0
 8022a04:	d101      	bne.n	8022a0a <_ZN6Logger21StoreAccelPositionLogEv+0x1a>
 8022a06:	2300      	movs	r3, #0
 8022a08:	e079      	b.n	8022afe <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    else accel_position_write_enable_ = 0;
 8022a0a:	687b      	ldr	r3, [r7, #4]
 8022a0c:	2200      	movs	r2, #0
 8022a0e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    uint32_t address;
    uint8_t accel = 0; // step 0x01, 0x02, 0x03, 0x04, 0x05.
 8022a12:	2300      	movs	r3, #0
 8022a14:	73fb      	strb	r3, [r7, #15]
    uint8_t decel = 0; // step 0x10, 0x20, 0x30, 0x40, 0x50.
 8022a16:	2300      	movs	r3, #0
 8022a18:	73bb      	strb	r3, [r7, #14]
    uint8_t i;

    for(i = 1; i <= accel_step; i++)
 8022a1a:	2301      	movs	r3, #1
 8022a1c:	75fb      	strb	r3, [r7, #23]
 8022a1e:	7dfa      	ldrb	r2, [r7, #23]
 8022a20:	7dbb      	ldrb	r3, [r7, #22]
 8022a22:	429a      	cmp	r2, r3
 8022a24:	d830      	bhi.n	8022a88 <_ZN6Logger21StoreAccelPositionLogEv+0x98>
    {
        accel = i;
 8022a26:	7dfb      	ldrb	r3, [r7, #23]
 8022a28:	73fb      	strb	r3, [r7, #15]
        address = HEAD_ADDRESS_BLOCK_D + accel_address_[i-1];
 8022a2a:	7dfb      	ldrb	r3, [r7, #23]
 8022a2c:	1e5a      	subs	r2, r3, #1
 8022a2e:	687b      	ldr	r3, [r7, #4]
 8022a30:	3264      	adds	r2, #100	; 0x64
 8022a32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022a36:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022a3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022a3e:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x10;
 8022a40:	687b      	ldr	r3, [r7, #4]
 8022a42:	33f4      	adds	r3, #244	; 0xf4
 8022a44:	2201      	movs	r2, #1
 8022a46:	6939      	ldr	r1, [r7, #16]
 8022a48:	4618      	mov	r0, r3
 8022a4a:	f7fe fb51 	bl	80210f0 <_ZN5Flash14CheckBlankByteEmm>
 8022a4e:	4603      	mov	r3, r0
 8022a50:	f083 0301 	eor.w	r3, r3, #1
 8022a54:	b2db      	uxtb	r3, r3
 8022a56:	2b00      	cmp	r3, #0
 8022a58:	d001      	beq.n	8022a5e <_ZN6Logger21StoreAccelPositionLogEv+0x6e>
 8022a5a:	2310      	movs	r3, #16
 8022a5c:	e04f      	b.n	8022afe <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &accel, 1)) return 0x20;
 8022a5e:	687b      	ldr	r3, [r7, #4]
 8022a60:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022a64:	f107 020f 	add.w	r2, r7, #15
 8022a68:	2301      	movs	r3, #1
 8022a6a:	6939      	ldr	r1, [r7, #16]
 8022a6c:	f7fe faa0 	bl	8020fb0 <_ZN5Flash10StoreUint8EmPhm>
 8022a70:	4603      	mov	r3, r0
 8022a72:	f083 0301 	eor.w	r3, r3, #1
 8022a76:	b2db      	uxtb	r3, r3
 8022a78:	2b00      	cmp	r3, #0
 8022a7a:	d001      	beq.n	8022a80 <_ZN6Logger21StoreAccelPositionLogEv+0x90>
 8022a7c:	2320      	movs	r3, #32
 8022a7e:	e03e      	b.n	8022afe <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 8022a80:	7dfb      	ldrb	r3, [r7, #23]
 8022a82:	3301      	adds	r3, #1
 8022a84:	75fb      	strb	r3, [r7, #23]
 8022a86:	e7ca      	b.n	8022a1e <_ZN6Logger21StoreAccelPositionLogEv+0x2e>
    }
    for(i = 1; i <= accel_step; i++)
 8022a88:	2301      	movs	r3, #1
 8022a8a:	75fb      	strb	r3, [r7, #23]
 8022a8c:	7dfa      	ldrb	r2, [r7, #23]
 8022a8e:	7dbb      	ldrb	r3, [r7, #22]
 8022a90:	429a      	cmp	r2, r3
 8022a92:	d833      	bhi.n	8022afc <_ZN6Logger21StoreAccelPositionLogEv+0x10c>
    {
        decel = i << 4;
 8022a94:	7dfb      	ldrb	r3, [r7, #23]
 8022a96:	011b      	lsls	r3, r3, #4
 8022a98:	b2db      	uxtb	r3, r3
 8022a9a:	73bb      	strb	r3, [r7, #14]
        address = HEAD_ADDRESS_BLOCK_D + decel_address_[i-1];
 8022a9c:	7dfb      	ldrb	r3, [r7, #23]
 8022a9e:	3b01      	subs	r3, #1
 8022aa0:	687a      	ldr	r2, [r7, #4]
 8022aa2:	3368      	adds	r3, #104	; 0x68
 8022aa4:	005b      	lsls	r3, r3, #1
 8022aa6:	4413      	add	r3, r2
 8022aa8:	885b      	ldrh	r3, [r3, #2]
 8022aaa:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022aae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022ab2:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x30;
 8022ab4:	687b      	ldr	r3, [r7, #4]
 8022ab6:	33f4      	adds	r3, #244	; 0xf4
 8022ab8:	2201      	movs	r2, #1
 8022aba:	6939      	ldr	r1, [r7, #16]
 8022abc:	4618      	mov	r0, r3
 8022abe:	f7fe fb17 	bl	80210f0 <_ZN5Flash14CheckBlankByteEmm>
 8022ac2:	4603      	mov	r3, r0
 8022ac4:	f083 0301 	eor.w	r3, r3, #1
 8022ac8:	b2db      	uxtb	r3, r3
 8022aca:	2b00      	cmp	r3, #0
 8022acc:	d001      	beq.n	8022ad2 <_ZN6Logger21StoreAccelPositionLogEv+0xe2>
 8022ace:	2330      	movs	r3, #48	; 0x30
 8022ad0:	e015      	b.n	8022afe <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &decel, 1)) return 0x40;
 8022ad2:	687b      	ldr	r3, [r7, #4]
 8022ad4:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022ad8:	f107 020e 	add.w	r2, r7, #14
 8022adc:	2301      	movs	r3, #1
 8022ade:	6939      	ldr	r1, [r7, #16]
 8022ae0:	f7fe fa66 	bl	8020fb0 <_ZN5Flash10StoreUint8EmPhm>
 8022ae4:	4603      	mov	r3, r0
 8022ae6:	f083 0301 	eor.w	r3, r3, #1
 8022aea:	b2db      	uxtb	r3, r3
 8022aec:	2b00      	cmp	r3, #0
 8022aee:	d001      	beq.n	8022af4 <_ZN6Logger21StoreAccelPositionLogEv+0x104>
 8022af0:	2340      	movs	r3, #64	; 0x40
 8022af2:	e004      	b.n	8022afe <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 8022af4:	7dfb      	ldrb	r3, [r7, #23]
 8022af6:	3301      	adds	r3, #1
 8022af8:	75fb      	strb	r3, [r7, #23]
 8022afa:	e7c7      	b.n	8022a8c <_ZN6Logger21StoreAccelPositionLogEv+0x9c>
    }
    
    return 0;
 8022afc:	2300      	movs	r3, #0
}
 8022afe:	4618      	mov	r0, r3
 8022b00:	3718      	adds	r7, #24
 8022b02:	46bd      	mov	sp, r7
 8022b04:	bd80      	pop	{r7, pc}
	...

08022b08 <_ZN6Logger7LoadingEv>:

void Logger::Loading()
{
 8022b08:	b580      	push	{r7, lr}
 8022b0a:	b08c      	sub	sp, #48	; 0x30
 8022b0c:	af00      	add	r7, sp, #0
 8022b0e:	6078      	str	r0, [r7, #4]
    float distance = encoder.GetDistanceStack();
 8022b10:	687b      	ldr	r3, [r7, #4]
 8022b12:	33e8      	adds	r3, #232	; 0xe8
 8022b14:	4618      	mov	r0, r3
 8022b16:	f7fe f9e8 	bl	8020eea <_ZN7Encoder16GetDistanceStackEv>
 8022b1a:	ed87 0a08 	vstr	s0, [r7, #32]

    if(distance < LOGGING_CONST_DISTANCE) return;
 8022b1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8022b22:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b2e:	f100 8299 	bmi.w	8023064 <_ZN6Logger7LoadingEv+0x55c>
    encoder.ResetDistanceStack();
 8022b32:	687b      	ldr	r3, [r7, #4]
 8022b34:	33e8      	adds	r3, #232	; 0xe8
 8022b36:	4618      	mov	r0, r3
 8022b38:	f7fe f9ba 	bl	8020eb0 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0;

    /* Load curvature radius */
    float log_distance = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_A));
 8022b3c:	4bad      	ldr	r3, [pc, #692]	; (8022df4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022b3e:	881b      	ldrh	r3, [r3, #0]
 8022b40:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022b44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8022b48:	681b      	ldr	r3, [r3, #0]
 8022b4a:	61fb      	str	r3, [r7, #28]
    float log_radian = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_B));
 8022b4c:	4ba9      	ldr	r3, [pc, #676]	; (8022df4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022b4e:	881b      	ldrh	r3, [r3, #0]
 8022b50:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022b54:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8022b58:	681b      	ldr	r3, [r3, #0]
 8022b5a:	61bb      	str	r3, [r7, #24]
    float radius = log_distance / log_radian;
 8022b5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8022b60:	ed97 7a06 	vldr	s14, [r7, #24]
 8022b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022b68:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Load correction position */
    uint16_t log_various = *(reinterpret_cast<uint16_t*>(now_address + HEAD_ADDRESS_BLOCK_C));
 8022b6c:	4ba1      	ldr	r3, [pc, #644]	; (8022df4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022b6e:	881b      	ldrh	r3, [r3, #0]
 8022b70:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022b74:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8022b78:	881b      	ldrh	r3, [r3, #0]
 8022b7a:	827b      	strh	r3, [r7, #18]
    bool log_corner = false, log_corner_pass = false;
 8022b7c:	2300      	movs	r3, #0
 8022b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8022b82:	2300      	movs	r3, #0
 8022b84:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    bool log_cross = false, log_cross_pass = false;
 8022b88:	2300      	movs	r3, #0
 8022b8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8022b8e:	2300      	movs	r3, #0
 8022b90:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    if((log_various & 0x0002) == 0x0002) log_corner = true;
 8022b94:	8a7b      	ldrh	r3, [r7, #18]
 8022b96:	f003 0302 	and.w	r3, r3, #2
 8022b9a:	2b00      	cmp	r3, #0
 8022b9c:	d002      	beq.n	8022ba4 <_ZN6Logger7LoadingEv+0x9c>
 8022b9e:	2301      	movs	r3, #1
 8022ba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if((log_various & 0x0001) == 0x0001) log_cross = true;
 8022ba4:	8a7b      	ldrh	r3, [r7, #18]
 8022ba6:	f003 0301 	and.w	r3, r3, #1
 8022baa:	2b00      	cmp	r3, #0
 8022bac:	d002      	beq.n	8022bb4 <_ZN6Logger7LoadingEv+0xac>
 8022bae:	2301      	movs	r3, #1
 8022bb0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    /* Get correction position */
    bool run_corner = false, run_corner_pass = false;
 8022bb4:	2300      	movs	r3, #0
 8022bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022bba:	2300      	movs	r3, #0
 8022bbc:	747b      	strb	r3, [r7, #17]
    bool run_cross = false, run_cross_pass = false;
 8022bbe:	2300      	movs	r3, #0
 8022bc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8022bc4:	2300      	movs	r3, #0
 8022bc6:	743b      	strb	r3, [r7, #16]
    uint8_t corner = side_sensor.GetCornerMarkerCount();
 8022bc8:	687b      	ldr	r3, [r7, #4]
 8022bca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022bce:	4618      	mov	r0, r3
 8022bd0:	f002 fbdb 	bl	802538a <_ZN10SideSensor20GetCornerMarkerCountEv>
 8022bd4:	4603      	mov	r3, r0
 8022bd6:	73fb      	strb	r3, [r7, #15]
    uint8_t cross = side_sensor.GetCrossLineCount();
 8022bd8:	687b      	ldr	r3, [r7, #4]
 8022bda:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022bde:	4618      	mov	r0, r3
 8022be0:	f002 fbdf 	bl	80253a2 <_ZN10SideSensor17GetCrossLineCountEv>
 8022be4:	4603      	mov	r3, r0
 8022be6:	73bb      	strb	r3, [r7, #14]
    static uint8_t pre_corner = corner;
 8022be8:	4b83      	ldr	r3, [pc, #524]	; (8022df8 <_ZN6Logger7LoadingEv+0x2f0>)
 8022bea:	781b      	ldrb	r3, [r3, #0]
 8022bec:	f3bf 8f5b 	dmb	ish
 8022bf0:	b2db      	uxtb	r3, r3
 8022bf2:	f003 0301 	and.w	r3, r3, #1
 8022bf6:	2b00      	cmp	r3, #0
 8022bf8:	bf0c      	ite	eq
 8022bfa:	2301      	moveq	r3, #1
 8022bfc:	2300      	movne	r3, #0
 8022bfe:	b2db      	uxtb	r3, r3
 8022c00:	2b00      	cmp	r3, #0
 8022c02:	d010      	beq.n	8022c26 <_ZN6Logger7LoadingEv+0x11e>
 8022c04:	487c      	ldr	r0, [pc, #496]	; (8022df8 <_ZN6Logger7LoadingEv+0x2f0>)
 8022c06:	f007 fb2d 	bl	802a264 <__cxa_guard_acquire>
 8022c0a:	4603      	mov	r3, r0
 8022c0c:	2b00      	cmp	r3, #0
 8022c0e:	bf14      	ite	ne
 8022c10:	2301      	movne	r3, #1
 8022c12:	2300      	moveq	r3, #0
 8022c14:	b2db      	uxtb	r3, r3
 8022c16:	2b00      	cmp	r3, #0
 8022c18:	d005      	beq.n	8022c26 <_ZN6Logger7LoadingEv+0x11e>
 8022c1a:	4a78      	ldr	r2, [pc, #480]	; (8022dfc <_ZN6Logger7LoadingEv+0x2f4>)
 8022c1c:	7bfb      	ldrb	r3, [r7, #15]
 8022c1e:	7013      	strb	r3, [r2, #0]
 8022c20:	4875      	ldr	r0, [pc, #468]	; (8022df8 <_ZN6Logger7LoadingEv+0x2f0>)
 8022c22:	f007 fb2b 	bl	802a27c <__cxa_guard_release>
    static uint8_t pre_cross = cross;
 8022c26:	4b76      	ldr	r3, [pc, #472]	; (8022e00 <_ZN6Logger7LoadingEv+0x2f8>)
 8022c28:	781b      	ldrb	r3, [r3, #0]
 8022c2a:	f3bf 8f5b 	dmb	ish
 8022c2e:	b2db      	uxtb	r3, r3
 8022c30:	f003 0301 	and.w	r3, r3, #1
 8022c34:	2b00      	cmp	r3, #0
 8022c36:	bf0c      	ite	eq
 8022c38:	2301      	moveq	r3, #1
 8022c3a:	2300      	movne	r3, #0
 8022c3c:	b2db      	uxtb	r3, r3
 8022c3e:	2b00      	cmp	r3, #0
 8022c40:	d010      	beq.n	8022c64 <_ZN6Logger7LoadingEv+0x15c>
 8022c42:	486f      	ldr	r0, [pc, #444]	; (8022e00 <_ZN6Logger7LoadingEv+0x2f8>)
 8022c44:	f007 fb0e 	bl	802a264 <__cxa_guard_acquire>
 8022c48:	4603      	mov	r3, r0
 8022c4a:	2b00      	cmp	r3, #0
 8022c4c:	bf14      	ite	ne
 8022c4e:	2301      	movne	r3, #1
 8022c50:	2300      	moveq	r3, #0
 8022c52:	b2db      	uxtb	r3, r3
 8022c54:	2b00      	cmp	r3, #0
 8022c56:	d005      	beq.n	8022c64 <_ZN6Logger7LoadingEv+0x15c>
 8022c58:	4a6a      	ldr	r2, [pc, #424]	; (8022e04 <_ZN6Logger7LoadingEv+0x2fc>)
 8022c5a:	7bbb      	ldrb	r3, [r7, #14]
 8022c5c:	7013      	strb	r3, [r2, #0]
 8022c5e:	4868      	ldr	r0, [pc, #416]	; (8022e00 <_ZN6Logger7LoadingEv+0x2f8>)
 8022c60:	f007 fb0c 	bl	802a27c <__cxa_guard_release>
    static uint8_t straight_cnt = 0;
    bool straight = false;
 8022c64:	2300      	movs	r3, #0
 8022c66:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA){
 8022c6a:	687b      	ldr	r3, [r7, #4]
 8022c6c:	33e8      	adds	r3, #232	; 0xe8
 8022c6e:	4618      	mov	r0, r3
 8022c70:	f7fe f94a 	bl	8020f08 <_ZN7Encoder15AngularVelocityEv>
 8022c74:	eef0 7a40 	vmov.f32	s15, s0
 8022c78:	eeb0 0a67 	vmov.f32	s0, s15
 8022c7c:	f7ff fb6c 	bl	8022358 <_ZSt4fabsf>
 8022c80:	eeb0 7a40 	vmov.f32	s14, s0
 8022c84:	eddf 7a60 	vldr	s15, [pc, #384]	; 8022e08 <_ZN6Logger7LoadingEv+0x300>
 8022c88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c90:	bf4c      	ite	mi
 8022c92:	2301      	movmi	r3, #1
 8022c94:	2300      	movpl	r3, #0
 8022c96:	b2db      	uxtb	r3, r3
 8022c98:	2b00      	cmp	r3, #0
 8022c9a:	d00e      	beq.n	8022cba <_ZN6Logger7LoadingEv+0x1b2>
        if(straight_cnt <= STRAIGHT_JUDGE_COUNT) straight_cnt++;
 8022c9c:	4b5b      	ldr	r3, [pc, #364]	; (8022e0c <_ZN6Logger7LoadingEv+0x304>)
 8022c9e:	781b      	ldrb	r3, [r3, #0]
 8022ca0:	2b05      	cmp	r3, #5
 8022ca2:	d806      	bhi.n	8022cb2 <_ZN6Logger7LoadingEv+0x1aa>
 8022ca4:	4b59      	ldr	r3, [pc, #356]	; (8022e0c <_ZN6Logger7LoadingEv+0x304>)
 8022ca6:	781b      	ldrb	r3, [r3, #0]
 8022ca8:	3301      	adds	r3, #1
 8022caa:	b2da      	uxtb	r2, r3
 8022cac:	4b57      	ldr	r3, [pc, #348]	; (8022e0c <_ZN6Logger7LoadingEv+0x304>)
 8022cae:	701a      	strb	r2, [r3, #0]
 8022cb0:	e006      	b.n	8022cc0 <_ZN6Logger7LoadingEv+0x1b8>
        else straight = true;
 8022cb2:	2301      	movs	r3, #1
 8022cb4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8022cb8:	e002      	b.n	8022cc0 <_ZN6Logger7LoadingEv+0x1b8>
    }else straight_cnt = 0;
 8022cba:	4b54      	ldr	r3, [pc, #336]	; (8022e0c <_ZN6Logger7LoadingEv+0x304>)
 8022cbc:	2200      	movs	r2, #0
 8022cbe:	701a      	strb	r2, [r3, #0]
    if(corner > pre_corner && straight) run_corner = true;
 8022cc0:	4b4e      	ldr	r3, [pc, #312]	; (8022dfc <_ZN6Logger7LoadingEv+0x2f4>)
 8022cc2:	781b      	ldrb	r3, [r3, #0]
 8022cc4:	7bfa      	ldrb	r2, [r7, #15]
 8022cc6:	429a      	cmp	r2, r3
 8022cc8:	d906      	bls.n	8022cd8 <_ZN6Logger7LoadingEv+0x1d0>
 8022cca:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8022cce:	2b00      	cmp	r3, #0
 8022cd0:	d002      	beq.n	8022cd8 <_ZN6Logger7LoadingEv+0x1d0>
 8022cd2:	2301      	movs	r3, #1
 8022cd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if(cross > pre_cross) run_cross = true;
 8022cd8:	4b4a      	ldr	r3, [pc, #296]	; (8022e04 <_ZN6Logger7LoadingEv+0x2fc>)
 8022cda:	781b      	ldrb	r3, [r3, #0]
 8022cdc:	7bba      	ldrb	r2, [r7, #14]
 8022cde:	429a      	cmp	r2, r3
 8022ce0:	d902      	bls.n	8022ce8 <_ZN6Logger7LoadingEv+0x1e0>
 8022ce2:	2301      	movs	r3, #1
 8022ce4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    pre_corner = corner;
 8022ce8:	4a44      	ldr	r2, [pc, #272]	; (8022dfc <_ZN6Logger7LoadingEv+0x2f4>)
 8022cea:	7bfb      	ldrb	r3, [r7, #15]
 8022cec:	7013      	strb	r3, [r2, #0]
    pre_cross = cross;
 8022cee:	4a45      	ldr	r2, [pc, #276]	; (8022e04 <_ZN6Logger7LoadingEv+0x2fc>)
 8022cf0:	7bbb      	ldrb	r3, [r7, #14]
 8022cf2:	7013      	strb	r3, [r2, #0]

    /* Position correction at corner marker */
    static uint16_t log_corner_address, run_corner_address;
    static uint8_t log_corner_wait = 0, run_corner_wait = 0;
    if(log_corner == true){
 8022cf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8022cf8:	2b00      	cmp	r3, #0
 8022cfa:	d01f      	beq.n	8022d3c <_ZN6Logger7LoadingEv+0x234>
        if(run_corner_pass == true){
 8022cfc:	7c7b      	ldrb	r3, [r7, #17]
 8022cfe:	2b00      	cmp	r3, #0
 8022d00:	d011      	beq.n	8022d26 <_ZN6Logger7LoadingEv+0x21e>
            now_address += now_address - run_corner_address;
 8022d02:	4b3c      	ldr	r3, [pc, #240]	; (8022df4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d04:	881a      	ldrh	r2, [r3, #0]
 8022d06:	4b42      	ldr	r3, [pc, #264]	; (8022e10 <_ZN6Logger7LoadingEv+0x308>)
 8022d08:	881b      	ldrh	r3, [r3, #0]
 8022d0a:	1ad3      	subs	r3, r2, r3
 8022d0c:	b29a      	uxth	r2, r3
 8022d0e:	4b39      	ldr	r3, [pc, #228]	; (8022df4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d10:	881b      	ldrh	r3, [r3, #0]
 8022d12:	4413      	add	r3, r2
 8022d14:	b29a      	uxth	r2, r3
 8022d16:	4b37      	ldr	r3, [pc, #220]	; (8022df4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d18:	801a      	strh	r2, [r3, #0]
            run_corner_wait = 0;
 8022d1a:	4b3e      	ldr	r3, [pc, #248]	; (8022e14 <_ZN6Logger7LoadingEv+0x30c>)
 8022d1c:	2200      	movs	r2, #0
 8022d1e:	701a      	strb	r2, [r3, #0]
            run_corner_pass = false;
 8022d20:	2300      	movs	r3, #0
 8022d22:	747b      	strb	r3, [r7, #17]
 8022d24:	e017      	b.n	8022d56 <_ZN6Logger7LoadingEv+0x24e>
        }else{
            log_corner_address = now_address;
 8022d26:	4b33      	ldr	r3, [pc, #204]	; (8022df4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d28:	881a      	ldrh	r2, [r3, #0]
 8022d2a:	4b3b      	ldr	r3, [pc, #236]	; (8022e18 <_ZN6Logger7LoadingEv+0x310>)
 8022d2c:	801a      	strh	r2, [r3, #0]
            log_corner_pass = true;
 8022d2e:	2301      	movs	r3, #1
 8022d30:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            log_corner_wait = CORRECTION_WAIT_COUNT;
 8022d34:	4b39      	ldr	r3, [pc, #228]	; (8022e1c <_ZN6Logger7LoadingEv+0x314>)
 8022d36:	2203      	movs	r2, #3
 8022d38:	701a      	strb	r2, [r3, #0]
 8022d3a:	e00c      	b.n	8022d56 <_ZN6Logger7LoadingEv+0x24e>
        }
    }else{
        if(run_corner_wait > 0) run_corner_wait--;
 8022d3c:	4b35      	ldr	r3, [pc, #212]	; (8022e14 <_ZN6Logger7LoadingEv+0x30c>)
 8022d3e:	781b      	ldrb	r3, [r3, #0]
 8022d40:	2b00      	cmp	r3, #0
 8022d42:	d006      	beq.n	8022d52 <_ZN6Logger7LoadingEv+0x24a>
 8022d44:	4b33      	ldr	r3, [pc, #204]	; (8022e14 <_ZN6Logger7LoadingEv+0x30c>)
 8022d46:	781b      	ldrb	r3, [r3, #0]
 8022d48:	3b01      	subs	r3, #1
 8022d4a:	b2da      	uxtb	r2, r3
 8022d4c:	4b31      	ldr	r3, [pc, #196]	; (8022e14 <_ZN6Logger7LoadingEv+0x30c>)
 8022d4e:	701a      	strb	r2, [r3, #0]
 8022d50:	e001      	b.n	8022d56 <_ZN6Logger7LoadingEv+0x24e>
        else run_corner_pass = false;
 8022d52:	2300      	movs	r3, #0
 8022d54:	747b      	strb	r3, [r7, #17]
    }
    if(run_corner == true){
 8022d56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8022d5a:	2b00      	cmp	r3, #0
 8022d5c:	d018      	beq.n	8022d90 <_ZN6Logger7LoadingEv+0x288>
        if(log_corner_pass == true){
 8022d5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8022d62:	2b00      	cmp	r3, #0
 8022d64:	d00a      	beq.n	8022d7c <_ZN6Logger7LoadingEv+0x274>
            now_address = log_corner_address;
 8022d66:	4b2c      	ldr	r3, [pc, #176]	; (8022e18 <_ZN6Logger7LoadingEv+0x310>)
 8022d68:	881a      	ldrh	r2, [r3, #0]
 8022d6a:	4b22      	ldr	r3, [pc, #136]	; (8022df4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d6c:	801a      	strh	r2, [r3, #0]
            log_corner_wait = 0;
 8022d6e:	4b2b      	ldr	r3, [pc, #172]	; (8022e1c <_ZN6Logger7LoadingEv+0x314>)
 8022d70:	2200      	movs	r2, #0
 8022d72:	701a      	strb	r2, [r3, #0]
            log_corner_pass = false;
 8022d74:	2300      	movs	r3, #0
 8022d76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8022d7a:	e017      	b.n	8022dac <_ZN6Logger7LoadingEv+0x2a4>
        }else{
            run_corner_address = now_address;
 8022d7c:	4b1d      	ldr	r3, [pc, #116]	; (8022df4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d7e:	881a      	ldrh	r2, [r3, #0]
 8022d80:	4b23      	ldr	r3, [pc, #140]	; (8022e10 <_ZN6Logger7LoadingEv+0x308>)
 8022d82:	801a      	strh	r2, [r3, #0]
            run_corner_pass = true;
 8022d84:	2301      	movs	r3, #1
 8022d86:	747b      	strb	r3, [r7, #17]
            run_corner_wait = CORRECTION_WAIT_COUNT;
 8022d88:	4b22      	ldr	r3, [pc, #136]	; (8022e14 <_ZN6Logger7LoadingEv+0x30c>)
 8022d8a:	2203      	movs	r2, #3
 8022d8c:	701a      	strb	r2, [r3, #0]
 8022d8e:	e00d      	b.n	8022dac <_ZN6Logger7LoadingEv+0x2a4>
        }
    }else{
        if(log_corner_wait > 0) log_corner_wait--;
 8022d90:	4b22      	ldr	r3, [pc, #136]	; (8022e1c <_ZN6Logger7LoadingEv+0x314>)
 8022d92:	781b      	ldrb	r3, [r3, #0]
 8022d94:	2b00      	cmp	r3, #0
 8022d96:	d006      	beq.n	8022da6 <_ZN6Logger7LoadingEv+0x29e>
 8022d98:	4b20      	ldr	r3, [pc, #128]	; (8022e1c <_ZN6Logger7LoadingEv+0x314>)
 8022d9a:	781b      	ldrb	r3, [r3, #0]
 8022d9c:	3b01      	subs	r3, #1
 8022d9e:	b2da      	uxtb	r2, r3
 8022da0:	4b1e      	ldr	r3, [pc, #120]	; (8022e1c <_ZN6Logger7LoadingEv+0x314>)
 8022da2:	701a      	strb	r2, [r3, #0]
 8022da4:	e002      	b.n	8022dac <_ZN6Logger7LoadingEv+0x2a4>
        else log_corner_pass = false;
 8022da6:	2300      	movs	r3, #0
 8022da8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    /* Position correction at cross line */
    static uint16_t log_cross_address, run_cross_address;
    static uint8_t log_cross_wait = 0, run_cross_wait = 0;
    if(log_cross == true){
 8022dac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8022db0:	2b00      	cmp	r3, #0
 8022db2:	d03d      	beq.n	8022e30 <_ZN6Logger7LoadingEv+0x328>
        if(run_cross_pass == true){
 8022db4:	7c3b      	ldrb	r3, [r7, #16]
 8022db6:	2b00      	cmp	r3, #0
 8022db8:	d011      	beq.n	8022dde <_ZN6Logger7LoadingEv+0x2d6>
            now_address += now_address - run_cross_address;
 8022dba:	4b0e      	ldr	r3, [pc, #56]	; (8022df4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022dbc:	881a      	ldrh	r2, [r3, #0]
 8022dbe:	4b18      	ldr	r3, [pc, #96]	; (8022e20 <_ZN6Logger7LoadingEv+0x318>)
 8022dc0:	881b      	ldrh	r3, [r3, #0]
 8022dc2:	1ad3      	subs	r3, r2, r3
 8022dc4:	b29a      	uxth	r2, r3
 8022dc6:	4b0b      	ldr	r3, [pc, #44]	; (8022df4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022dc8:	881b      	ldrh	r3, [r3, #0]
 8022dca:	4413      	add	r3, r2
 8022dcc:	b29a      	uxth	r2, r3
 8022dce:	4b09      	ldr	r3, [pc, #36]	; (8022df4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022dd0:	801a      	strh	r2, [r3, #0]
            run_cross_wait = 0;
 8022dd2:	4b14      	ldr	r3, [pc, #80]	; (8022e24 <_ZN6Logger7LoadingEv+0x31c>)
 8022dd4:	2200      	movs	r2, #0
 8022dd6:	701a      	strb	r2, [r3, #0]
            run_cross_pass = false;
 8022dd8:	2300      	movs	r3, #0
 8022dda:	743b      	strb	r3, [r7, #16]
 8022ddc:	e035      	b.n	8022e4a <_ZN6Logger7LoadingEv+0x342>
        }else{
            log_cross_address = now_address;
 8022dde:	4b05      	ldr	r3, [pc, #20]	; (8022df4 <_ZN6Logger7LoadingEv+0x2ec>)
 8022de0:	881a      	ldrh	r2, [r3, #0]
 8022de2:	4b11      	ldr	r3, [pc, #68]	; (8022e28 <_ZN6Logger7LoadingEv+0x320>)
 8022de4:	801a      	strh	r2, [r3, #0]
            log_cross_pass = true;
 8022de6:	2301      	movs	r3, #1
 8022de8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            log_cross_wait = CORRECTION_WAIT_COUNT;
 8022dec:	4b0f      	ldr	r3, [pc, #60]	; (8022e2c <_ZN6Logger7LoadingEv+0x324>)
 8022dee:	2203      	movs	r2, #3
 8022df0:	701a      	strb	r2, [r3, #0]
 8022df2:	e02a      	b.n	8022e4a <_ZN6Logger7LoadingEv+0x342>
 8022df4:	20000098 	.word	0x20000098
 8022df8:	2000009c 	.word	0x2000009c
 8022dfc:	2000009a 	.word	0x2000009a
 8022e00:	200000a4 	.word	0x200000a4
 8022e04:	200000a0 	.word	0x200000a0
 8022e08:	43ca0000 	.word	0x43ca0000
 8022e0c:	200000a8 	.word	0x200000a8
 8022e10:	200000ac 	.word	0x200000ac
 8022e14:	200000af 	.word	0x200000af
 8022e18:	200000aa 	.word	0x200000aa
 8022e1c:	200000ae 	.word	0x200000ae
 8022e20:	200000b2 	.word	0x200000b2
 8022e24:	200000b5 	.word	0x200000b5
 8022e28:	200000b0 	.word	0x200000b0
 8022e2c:	200000b4 	.word	0x200000b4
        }
    }else{
        if(run_cross_wait > 0) run_cross_wait--;
 8022e30:	4b8e      	ldr	r3, [pc, #568]	; (802306c <_ZN6Logger7LoadingEv+0x564>)
 8022e32:	781b      	ldrb	r3, [r3, #0]
 8022e34:	2b00      	cmp	r3, #0
 8022e36:	d006      	beq.n	8022e46 <_ZN6Logger7LoadingEv+0x33e>
 8022e38:	4b8c      	ldr	r3, [pc, #560]	; (802306c <_ZN6Logger7LoadingEv+0x564>)
 8022e3a:	781b      	ldrb	r3, [r3, #0]
 8022e3c:	3b01      	subs	r3, #1
 8022e3e:	b2da      	uxtb	r2, r3
 8022e40:	4b8a      	ldr	r3, [pc, #552]	; (802306c <_ZN6Logger7LoadingEv+0x564>)
 8022e42:	701a      	strb	r2, [r3, #0]
 8022e44:	e001      	b.n	8022e4a <_ZN6Logger7LoadingEv+0x342>
        else run_cross_pass = false;
 8022e46:	2300      	movs	r3, #0
 8022e48:	743b      	strb	r3, [r7, #16]
    }
    if(run_cross == true){
 8022e4a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8022e4e:	2b00      	cmp	r3, #0
 8022e50:	d018      	beq.n	8022e84 <_ZN6Logger7LoadingEv+0x37c>
        if(log_cross_pass == true){
 8022e52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8022e56:	2b00      	cmp	r3, #0
 8022e58:	d00a      	beq.n	8022e70 <_ZN6Logger7LoadingEv+0x368>
            now_address = log_cross_address;
 8022e5a:	4b85      	ldr	r3, [pc, #532]	; (8023070 <_ZN6Logger7LoadingEv+0x568>)
 8022e5c:	881a      	ldrh	r2, [r3, #0]
 8022e5e:	4b85      	ldr	r3, [pc, #532]	; (8023074 <_ZN6Logger7LoadingEv+0x56c>)
 8022e60:	801a      	strh	r2, [r3, #0]
            log_cross_wait = 0;
 8022e62:	4b85      	ldr	r3, [pc, #532]	; (8023078 <_ZN6Logger7LoadingEv+0x570>)
 8022e64:	2200      	movs	r2, #0
 8022e66:	701a      	strb	r2, [r3, #0]
            log_cross_pass = false;
 8022e68:	2300      	movs	r3, #0
 8022e6a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8022e6e:	e017      	b.n	8022ea0 <_ZN6Logger7LoadingEv+0x398>
        }else{
            run_cross_address = now_address;
 8022e70:	4b80      	ldr	r3, [pc, #512]	; (8023074 <_ZN6Logger7LoadingEv+0x56c>)
 8022e72:	881a      	ldrh	r2, [r3, #0]
 8022e74:	4b81      	ldr	r3, [pc, #516]	; (802307c <_ZN6Logger7LoadingEv+0x574>)
 8022e76:	801a      	strh	r2, [r3, #0]
            run_cross_pass = true;
 8022e78:	2301      	movs	r3, #1
 8022e7a:	743b      	strb	r3, [r7, #16]
            run_cross_wait = CORRECTION_WAIT_COUNT;
 8022e7c:	4b7b      	ldr	r3, [pc, #492]	; (802306c <_ZN6Logger7LoadingEv+0x564>)
 8022e7e:	2203      	movs	r2, #3
 8022e80:	701a      	strb	r2, [r3, #0]
 8022e82:	e00d      	b.n	8022ea0 <_ZN6Logger7LoadingEv+0x398>
        }
    }else{
        if(log_cross_wait > 0) log_cross_wait--;
 8022e84:	4b7c      	ldr	r3, [pc, #496]	; (8023078 <_ZN6Logger7LoadingEv+0x570>)
 8022e86:	781b      	ldrb	r3, [r3, #0]
 8022e88:	2b00      	cmp	r3, #0
 8022e8a:	d006      	beq.n	8022e9a <_ZN6Logger7LoadingEv+0x392>
 8022e8c:	4b7a      	ldr	r3, [pc, #488]	; (8023078 <_ZN6Logger7LoadingEv+0x570>)
 8022e8e:	781b      	ldrb	r3, [r3, #0]
 8022e90:	3b01      	subs	r3, #1
 8022e92:	b2da      	uxtb	r2, r3
 8022e94:	4b78      	ldr	r3, [pc, #480]	; (8023078 <_ZN6Logger7LoadingEv+0x570>)
 8022e96:	701a      	strb	r2, [r3, #0]
 8022e98:	e002      	b.n	8022ea0 <_ZN6Logger7LoadingEv+0x398>
        else log_cross_pass = false;
 8022e9a:	2300      	movs	r3, #0
 8022e9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    /* Accel straight */
    uint8_t accel_step = *(reinterpret_cast<uint8_t*>(now_address + HEAD_ADDRESS_BLOCK_D));
 8022ea0:	4b74      	ldr	r3, [pc, #464]	; (8023074 <_ZN6Logger7LoadingEv+0x56c>)
 8022ea2:	881b      	ldrh	r3, [r3, #0]
 8022ea4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022ea8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022eac:	781b      	ldrb	r3, [r3, #0]
 8022eae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(!straight) accel_step = 0x10;
 8022eb2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8022eb6:	f083 0301 	eor.w	r3, r3, #1
 8022eba:	b2db      	uxtb	r3, r3
 8022ebc:	2b00      	cmp	r3, #0
 8022ebe:	d002      	beq.n	8022ec6 <_ZN6Logger7LoadingEv+0x3be>
 8022ec0:	2310      	movs	r3, #16
 8022ec2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    float target = MIN_VELOCITY;
 8022ec6:	4b6e      	ldr	r3, [pc, #440]	; (8023080 <_ZN6Logger7LoadingEv+0x578>)
 8022ec8:	627b      	str	r3, [r7, #36]	; 0x24
    static float pre_target = MIN_VELOCITY;
    switch(accel_step){
 8022eca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8022ece:	3b01      	subs	r3, #1
 8022ed0:	2b4f      	cmp	r3, #79	; 0x4f
 8022ed2:	f200 80b5 	bhi.w	8023040 <_ZN6Logger7LoadingEv+0x538>
 8022ed6:	a201      	add	r2, pc, #4	; (adr r2, 8022edc <_ZN6Logger7LoadingEv+0x3d4>)
 8022ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022edc:	08023023 	.word	0x08023023
 8022ee0:	08023029 	.word	0x08023029
 8022ee4:	0802302f 	.word	0x0802302f
 8022ee8:	08023035 	.word	0x08023035
 8022eec:	0802303b 	.word	0x0802303b
 8022ef0:	08023041 	.word	0x08023041
 8022ef4:	08023041 	.word	0x08023041
 8022ef8:	08023041 	.word	0x08023041
 8022efc:	08023041 	.word	0x08023041
 8022f00:	08023041 	.word	0x08023041
 8022f04:	08023041 	.word	0x08023041
 8022f08:	08023041 	.word	0x08023041
 8022f0c:	08023041 	.word	0x08023041
 8022f10:	08023041 	.word	0x08023041
 8022f14:	08023041 	.word	0x08023041
 8022f18:	0802301d 	.word	0x0802301d
 8022f1c:	08023041 	.word	0x08023041
 8022f20:	08023041 	.word	0x08023041
 8022f24:	08023041 	.word	0x08023041
 8022f28:	08023041 	.word	0x08023041
 8022f2c:	08023041 	.word	0x08023041
 8022f30:	08023041 	.word	0x08023041
 8022f34:	08023041 	.word	0x08023041
 8022f38:	08023041 	.word	0x08023041
 8022f3c:	08023041 	.word	0x08023041
 8022f40:	08023041 	.word	0x08023041
 8022f44:	08023041 	.word	0x08023041
 8022f48:	08023041 	.word	0x08023041
 8022f4c:	08023041 	.word	0x08023041
 8022f50:	08023041 	.word	0x08023041
 8022f54:	08023041 	.word	0x08023041
 8022f58:	08023023 	.word	0x08023023
 8022f5c:	08023041 	.word	0x08023041
 8022f60:	08023041 	.word	0x08023041
 8022f64:	08023041 	.word	0x08023041
 8022f68:	08023041 	.word	0x08023041
 8022f6c:	08023041 	.word	0x08023041
 8022f70:	08023041 	.word	0x08023041
 8022f74:	08023041 	.word	0x08023041
 8022f78:	08023041 	.word	0x08023041
 8022f7c:	08023041 	.word	0x08023041
 8022f80:	08023041 	.word	0x08023041
 8022f84:	08023041 	.word	0x08023041
 8022f88:	08023041 	.word	0x08023041
 8022f8c:	08023041 	.word	0x08023041
 8022f90:	08023041 	.word	0x08023041
 8022f94:	08023041 	.word	0x08023041
 8022f98:	08023029 	.word	0x08023029
 8022f9c:	08023041 	.word	0x08023041
 8022fa0:	08023041 	.word	0x08023041
 8022fa4:	08023041 	.word	0x08023041
 8022fa8:	08023041 	.word	0x08023041
 8022fac:	08023041 	.word	0x08023041
 8022fb0:	08023041 	.word	0x08023041
 8022fb4:	08023041 	.word	0x08023041
 8022fb8:	08023041 	.word	0x08023041
 8022fbc:	08023041 	.word	0x08023041
 8022fc0:	08023041 	.word	0x08023041
 8022fc4:	08023041 	.word	0x08023041
 8022fc8:	08023041 	.word	0x08023041
 8022fcc:	08023041 	.word	0x08023041
 8022fd0:	08023041 	.word	0x08023041
 8022fd4:	08023041 	.word	0x08023041
 8022fd8:	0802302f 	.word	0x0802302f
 8022fdc:	08023041 	.word	0x08023041
 8022fe0:	08023041 	.word	0x08023041
 8022fe4:	08023041 	.word	0x08023041
 8022fe8:	08023041 	.word	0x08023041
 8022fec:	08023041 	.word	0x08023041
 8022ff0:	08023041 	.word	0x08023041
 8022ff4:	08023041 	.word	0x08023041
 8022ff8:	08023041 	.word	0x08023041
 8022ffc:	08023041 	.word	0x08023041
 8023000:	08023041 	.word	0x08023041
 8023004:	08023041 	.word	0x08023041
 8023008:	08023041 	.word	0x08023041
 802300c:	08023041 	.word	0x08023041
 8023010:	08023041 	.word	0x08023041
 8023014:	08023041 	.word	0x08023041
 8023018:	08023035 	.word	0x08023035
        case 0x10: target = MIN_VELOCITY; break;
 802301c:	4b18      	ldr	r3, [pc, #96]	; (8023080 <_ZN6Logger7LoadingEv+0x578>)
 802301e:	627b      	str	r3, [r7, #36]	; 0x24
 8023020:	e012      	b.n	8023048 <_ZN6Logger7LoadingEv+0x540>
        case 0x01:
        case 0x20: target = MIN_VELOCITY + (ACCEL_VELOCITY * 1); break;
 8023022:	4b18      	ldr	r3, [pc, #96]	; (8023084 <_ZN6Logger7LoadingEv+0x57c>)
 8023024:	627b      	str	r3, [r7, #36]	; 0x24
 8023026:	e00f      	b.n	8023048 <_ZN6Logger7LoadingEv+0x540>
        case 0x02:
        case 0x30: target = MIN_VELOCITY + (ACCEL_VELOCITY * 2); break;
 8023028:	4b17      	ldr	r3, [pc, #92]	; (8023088 <_ZN6Logger7LoadingEv+0x580>)
 802302a:	627b      	str	r3, [r7, #36]	; 0x24
 802302c:	e00c      	b.n	8023048 <_ZN6Logger7LoadingEv+0x540>
        case 0x03:
        case 0x40: target = MIN_VELOCITY + (ACCEL_VELOCITY * 3); break;
 802302e:	4b17      	ldr	r3, [pc, #92]	; (802308c <_ZN6Logger7LoadingEv+0x584>)
 8023030:	627b      	str	r3, [r7, #36]	; 0x24
 8023032:	e009      	b.n	8023048 <_ZN6Logger7LoadingEv+0x540>
        case 0x04:
        case 0x50: target = MIN_VELOCITY + (ACCEL_VELOCITY * 4); break;
 8023034:	4b16      	ldr	r3, [pc, #88]	; (8023090 <_ZN6Logger7LoadingEv+0x588>)
 8023036:	627b      	str	r3, [r7, #36]	; 0x24
 8023038:	e006      	b.n	8023048 <_ZN6Logger7LoadingEv+0x540>
        case 0x05: target = MIN_VELOCITY + (ACCEL_VELOCITY * 5); break;
 802303a:	4b16      	ldr	r3, [pc, #88]	; (8023094 <_ZN6Logger7LoadingEv+0x58c>)
 802303c:	627b      	str	r3, [r7, #36]	; 0x24
 802303e:	e003      	b.n	8023048 <_ZN6Logger7LoadingEv+0x540>
        default: target = pre_target; break;
 8023040:	4b15      	ldr	r3, [pc, #84]	; (8023098 <_ZN6Logger7LoadingEv+0x590>)
 8023042:	681b      	ldr	r3, [r3, #0]
 8023044:	627b      	str	r3, [r7, #36]	; 0x24
 8023046:	bf00      	nop
    }
    pre_target = target;
 8023048:	4a13      	ldr	r2, [pc, #76]	; (8023098 <_ZN6Logger7LoadingEv+0x590>)
 802304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802304c:	6013      	str	r3, [r2, #0]
    target_velocity_ = target;
 802304e:	687b      	ldr	r3, [r7, #4]
 8023050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023052:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

    now_address++;
 8023056:	4b07      	ldr	r3, [pc, #28]	; (8023074 <_ZN6Logger7LoadingEv+0x56c>)
 8023058:	881b      	ldrh	r3, [r3, #0]
 802305a:	3301      	adds	r3, #1
 802305c:	b29a      	uxth	r2, r3
 802305e:	4b05      	ldr	r3, [pc, #20]	; (8023074 <_ZN6Logger7LoadingEv+0x56c>)
 8023060:	801a      	strh	r2, [r3, #0]
 8023062:	e000      	b.n	8023066 <_ZN6Logger7LoadingEv+0x55e>
    if(distance < LOGGING_CONST_DISTANCE) return;
 8023064:	bf00      	nop
}
 8023066:	3730      	adds	r7, #48	; 0x30
 8023068:	46bd      	mov	sp, r7
 802306a:	bd80      	pop	{r7, pc}
 802306c:	200000b5 	.word	0x200000b5
 8023070:	200000b0 	.word	0x200000b0
 8023074:	20000098 	.word	0x20000098
 8023078:	200000b4 	.word	0x200000b4
 802307c:	200000b2 	.word	0x200000b2
 8023080:	3fa66666 	.word	0x3fa66666
 8023084:	3fe66666 	.word	0x3fe66666
 8023088:	40133333 	.word	0x40133333
 802308c:	40333333 	.word	0x40333333
 8023090:	40533333 	.word	0x40533333
 8023094:	40733333 	.word	0x40733333
 8023098:	2000000c 	.word	0x2000000c

0802309c <_ZN6Logger17GetTargetVelocityEv>:

float Logger::GetTargetVelocity()
{
 802309c:	b480      	push	{r7}
 802309e:	b083      	sub	sp, #12
 80230a0:	af00      	add	r7, sp, #0
 80230a2:	6078      	str	r0, [r7, #4]
    return target_velocity_;
 80230a4:	687b      	ldr	r3, [r7, #4]
 80230a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80230aa:	ee07 3a90 	vmov	s15, r3
 80230ae:	eeb0 0a67 	vmov.f32	s0, s15
 80230b2:	370c      	adds	r7, #12
 80230b4:	46bd      	mov	sp, r7
 80230b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230ba:	4770      	bx	lr

080230bc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80230bc:	b580      	push	{r7, lr}
 80230be:	b082      	sub	sp, #8
 80230c0:	af00      	add	r7, sp, #0
 80230c2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 80230c4:	687b      	ldr	r3, [r7, #4]
 80230c6:	681b      	ldr	r3, [r3, #0]
 80230c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80230cc:	d101      	bne.n	80230d2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 80230ce:	f002 ffad 	bl	802602c <InterruptTim2>
  }
  if(htim->Instance == TIM6)
 80230d2:	687b      	ldr	r3, [r7, #4]
 80230d4:	681b      	ldr	r3, [r3, #0]
 80230d6:	4a08      	ldr	r2, [pc, #32]	; (80230f8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80230d8:	4293      	cmp	r3, r2
 80230da:	d101      	bne.n	80230e0 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim6();
 80230dc:	f002 ff96 	bl	802600c <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 80230e0:	687b      	ldr	r3, [r7, #4]
 80230e2:	681b      	ldr	r3, [r3, #0]
 80230e4:	4a05      	ldr	r2, [pc, #20]	; (80230fc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80230e6:	4293      	cmp	r3, r2
 80230e8:	d101      	bne.n	80230ee <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim7();
 80230ea:	f002 ff7f 	bl	8025fec <InterruptTim7>
  }
}
 80230ee:	bf00      	nop
 80230f0:	3708      	adds	r7, #8
 80230f2:	46bd      	mov	sp, r7
 80230f4:	bd80      	pop	{r7, pc}
 80230f6:	bf00      	nop
 80230f8:	40001000 	.word	0x40001000
 80230fc:	40001400 	.word	0x40001400

08023100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8023100:	b580      	push	{r7, lr}
 8023102:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8023104:	f003 f82e 	bl	8026164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8023108:	f000 f822 	bl	8023150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 802310c:	f000 fd68 	bl	8023be0 <MX_GPIO_Init>
  MX_DMA_Init();
 8023110:	f000 fd46 	bl	8023ba0 <MX_DMA_Init>
  MX_ADC1_Init();
 8023114:	f000 f886 	bl	8023224 <MX_ADC1_Init>
  MX_I2C2_Init();
 8023118:	f000 f98c 	bl	8023434 <MX_I2C2_Init>
  MX_SPI3_Init();
 802311c:	f000 f9b8 	bl	8023490 <MX_SPI3_Init>
  MX_TIM1_Init();
 8023120:	f000 f9ec 	bl	80234fc <MX_TIM1_Init>
  MX_TIM3_Init();
 8023124:	f000 fac8 	bl	80236b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8023128:	f000 fb40 	bl	80237ac <MX_TIM4_Init>
  MX_TIM6_Init();
 802312c:	f000 fbe0 	bl	80238f0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8023130:	f000 fc14 	bl	802395c <MX_TIM7_Init>
  MX_TIM8_Init();
 8023134:	f000 fc48 	bl	80239c8 <MX_TIM8_Init>
  MX_TIM11_Init();
 8023138:	f000 fc9e 	bl	8023a78 <MX_TIM11_Init>
  MX_TIM12_Init();
 802313c:	f000 fcea 	bl	8023b14 <MX_TIM12_Init>
  MX_TIM2_Init();
 8023140:	f000 fa6c 	bl	802361c <MX_TIM2_Init>
  MX_TIM5_Init();
 8023144:	f000 fb86 	bl	8023854 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8023148:	f002 ff46 	bl	8025fd8 <Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 802314c:	e7fe      	b.n	802314c <main+0x4c>
	...

08023150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8023150:	b580      	push	{r7, lr}
 8023152:	b094      	sub	sp, #80	; 0x50
 8023154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8023156:	f107 0320 	add.w	r3, r7, #32
 802315a:	2230      	movs	r2, #48	; 0x30
 802315c:	2100      	movs	r1, #0
 802315e:	4618      	mov	r0, r3
 8023160:	f007 f8bf 	bl	802a2e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8023164:	f107 030c 	add.w	r3, r7, #12
 8023168:	2200      	movs	r2, #0
 802316a:	601a      	str	r2, [r3, #0]
 802316c:	605a      	str	r2, [r3, #4]
 802316e:	609a      	str	r2, [r3, #8]
 8023170:	60da      	str	r2, [r3, #12]
 8023172:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8023174:	2300      	movs	r3, #0
 8023176:	60bb      	str	r3, [r7, #8]
 8023178:	4b28      	ldr	r3, [pc, #160]	; (802321c <SystemClock_Config+0xcc>)
 802317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802317c:	4a27      	ldr	r2, [pc, #156]	; (802321c <SystemClock_Config+0xcc>)
 802317e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023182:	6413      	str	r3, [r2, #64]	; 0x40
 8023184:	4b25      	ldr	r3, [pc, #148]	; (802321c <SystemClock_Config+0xcc>)
 8023186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802318c:	60bb      	str	r3, [r7, #8]
 802318e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8023190:	2300      	movs	r3, #0
 8023192:	607b      	str	r3, [r7, #4]
 8023194:	4b22      	ldr	r3, [pc, #136]	; (8023220 <SystemClock_Config+0xd0>)
 8023196:	681b      	ldr	r3, [r3, #0]
 8023198:	4a21      	ldr	r2, [pc, #132]	; (8023220 <SystemClock_Config+0xd0>)
 802319a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802319e:	6013      	str	r3, [r2, #0]
 80231a0:	4b1f      	ldr	r3, [pc, #124]	; (8023220 <SystemClock_Config+0xd0>)
 80231a2:	681b      	ldr	r3, [r3, #0]
 80231a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80231a8:	607b      	str	r3, [r7, #4]
 80231aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80231ac:	2301      	movs	r3, #1
 80231ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80231b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80231b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80231b6:	2302      	movs	r3, #2
 80231b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80231ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80231be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80231c0:	2306      	movs	r3, #6
 80231c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80231c4:	23a8      	movs	r3, #168	; 0xa8
 80231c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80231c8:	2302      	movs	r3, #2
 80231ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80231cc:	2304      	movs	r3, #4
 80231ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80231d0:	f107 0320 	add.w	r3, r7, #32
 80231d4:	4618      	mov	r0, r3
 80231d6:	f004 fea7 	bl	8027f28 <HAL_RCC_OscConfig>
 80231da:	4603      	mov	r3, r0
 80231dc:	2b00      	cmp	r3, #0
 80231de:	d001      	beq.n	80231e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80231e0:	f000 fdce 	bl	8023d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80231e4:	230f      	movs	r3, #15
 80231e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80231e8:	2302      	movs	r3, #2
 80231ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80231ec:	2300      	movs	r3, #0
 80231ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80231f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80231f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80231f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80231fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80231fc:	f107 030c 	add.w	r3, r7, #12
 8023200:	2105      	movs	r1, #5
 8023202:	4618      	mov	r0, r3
 8023204:	f005 f900 	bl	8028408 <HAL_RCC_ClockConfig>
 8023208:	4603      	mov	r3, r0
 802320a:	2b00      	cmp	r3, #0
 802320c:	d001      	beq.n	8023212 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 802320e:	f000 fdb7 	bl	8023d80 <Error_Handler>
  }
}
 8023212:	bf00      	nop
 8023214:	3750      	adds	r7, #80	; 0x50
 8023216:	46bd      	mov	sp, r7
 8023218:	bd80      	pop	{r7, pc}
 802321a:	bf00      	nop
 802321c:	40023800 	.word	0x40023800
 8023220:	40007000 	.word	0x40007000

08023224 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8023224:	b580      	push	{r7, lr}
 8023226:	b084      	sub	sp, #16
 8023228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 802322a:	463b      	mov	r3, r7
 802322c:	2200      	movs	r2, #0
 802322e:	601a      	str	r2, [r3, #0]
 8023230:	605a      	str	r2, [r3, #4]
 8023232:	609a      	str	r2, [r3, #8]
 8023234:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8023236:	4b7c      	ldr	r3, [pc, #496]	; (8023428 <MX_ADC1_Init+0x204>)
 8023238:	4a7c      	ldr	r2, [pc, #496]	; (802342c <MX_ADC1_Init+0x208>)
 802323a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 802323c:	4b7a      	ldr	r3, [pc, #488]	; (8023428 <MX_ADC1_Init+0x204>)
 802323e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8023242:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8023244:	4b78      	ldr	r3, [pc, #480]	; (8023428 <MX_ADC1_Init+0x204>)
 8023246:	2200      	movs	r2, #0
 8023248:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 802324a:	4b77      	ldr	r3, [pc, #476]	; (8023428 <MX_ADC1_Init+0x204>)
 802324c:	2201      	movs	r2, #1
 802324e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8023250:	4b75      	ldr	r3, [pc, #468]	; (8023428 <MX_ADC1_Init+0x204>)
 8023252:	2201      	movs	r2, #1
 8023254:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8023256:	4b74      	ldr	r3, [pc, #464]	; (8023428 <MX_ADC1_Init+0x204>)
 8023258:	2200      	movs	r2, #0
 802325a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 802325e:	4b72      	ldr	r3, [pc, #456]	; (8023428 <MX_ADC1_Init+0x204>)
 8023260:	2200      	movs	r2, #0
 8023262:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8023264:	4b70      	ldr	r3, [pc, #448]	; (8023428 <MX_ADC1_Init+0x204>)
 8023266:	4a72      	ldr	r2, [pc, #456]	; (8023430 <MX_ADC1_Init+0x20c>)
 8023268:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 802326a:	4b6f      	ldr	r3, [pc, #444]	; (8023428 <MX_ADC1_Init+0x204>)
 802326c:	2200      	movs	r2, #0
 802326e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8023270:	4b6d      	ldr	r3, [pc, #436]	; (8023428 <MX_ADC1_Init+0x204>)
 8023272:	220e      	movs	r2, #14
 8023274:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8023276:	4b6c      	ldr	r3, [pc, #432]	; (8023428 <MX_ADC1_Init+0x204>)
 8023278:	2201      	movs	r2, #1
 802327a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 802327e:	4b6a      	ldr	r3, [pc, #424]	; (8023428 <MX_ADC1_Init+0x204>)
 8023280:	2201      	movs	r2, #1
 8023282:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8023284:	4868      	ldr	r0, [pc, #416]	; (8023428 <MX_ADC1_Init+0x204>)
 8023286:	f003 f801 	bl	802628c <HAL_ADC_Init>
 802328a:	4603      	mov	r3, r0
 802328c:	2b00      	cmp	r3, #0
 802328e:	d001      	beq.n	8023294 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8023290:	f000 fd76 	bl	8023d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8023294:	2303      	movs	r3, #3
 8023296:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8023298:	2301      	movs	r3, #1
 802329a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 802329c:	2301      	movs	r3, #1
 802329e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80232a0:	463b      	mov	r3, r7
 80232a2:	4619      	mov	r1, r3
 80232a4:	4860      	ldr	r0, [pc, #384]	; (8023428 <MX_ADC1_Init+0x204>)
 80232a6:	f003 f945 	bl	8026534 <HAL_ADC_ConfigChannel>
 80232aa:	4603      	mov	r3, r0
 80232ac:	2b00      	cmp	r3, #0
 80232ae:	d001      	beq.n	80232b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80232b0:	f000 fd66 	bl	8023d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80232b4:	2304      	movs	r3, #4
 80232b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80232b8:	2302      	movs	r3, #2
 80232ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80232bc:	463b      	mov	r3, r7
 80232be:	4619      	mov	r1, r3
 80232c0:	4859      	ldr	r0, [pc, #356]	; (8023428 <MX_ADC1_Init+0x204>)
 80232c2:	f003 f937 	bl	8026534 <HAL_ADC_ConfigChannel>
 80232c6:	4603      	mov	r3, r0
 80232c8:	2b00      	cmp	r3, #0
 80232ca:	d001      	beq.n	80232d0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80232cc:	f000 fd58 	bl	8023d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80232d0:	2305      	movs	r3, #5
 80232d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80232d4:	2303      	movs	r3, #3
 80232d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80232d8:	463b      	mov	r3, r7
 80232da:	4619      	mov	r1, r3
 80232dc:	4852      	ldr	r0, [pc, #328]	; (8023428 <MX_ADC1_Init+0x204>)
 80232de:	f003 f929 	bl	8026534 <HAL_ADC_ConfigChannel>
 80232e2:	4603      	mov	r3, r0
 80232e4:	2b00      	cmp	r3, #0
 80232e6:	d001      	beq.n	80232ec <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80232e8:	f000 fd4a 	bl	8023d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80232ec:	2306      	movs	r3, #6
 80232ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80232f0:	2304      	movs	r3, #4
 80232f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80232f4:	463b      	mov	r3, r7
 80232f6:	4619      	mov	r1, r3
 80232f8:	484b      	ldr	r0, [pc, #300]	; (8023428 <MX_ADC1_Init+0x204>)
 80232fa:	f003 f91b 	bl	8026534 <HAL_ADC_ConfigChannel>
 80232fe:	4603      	mov	r3, r0
 8023300:	2b00      	cmp	r3, #0
 8023302:	d001      	beq.n	8023308 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8023304:	f000 fd3c 	bl	8023d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8023308:	2307      	movs	r3, #7
 802330a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 802330c:	2305      	movs	r3, #5
 802330e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023310:	463b      	mov	r3, r7
 8023312:	4619      	mov	r1, r3
 8023314:	4844      	ldr	r0, [pc, #272]	; (8023428 <MX_ADC1_Init+0x204>)
 8023316:	f003 f90d 	bl	8026534 <HAL_ADC_ConfigChannel>
 802331a:	4603      	mov	r3, r0
 802331c:	2b00      	cmp	r3, #0
 802331e:	d001      	beq.n	8023324 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8023320:	f000 fd2e 	bl	8023d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8023324:	230e      	movs	r3, #14
 8023326:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8023328:	2306      	movs	r3, #6
 802332a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802332c:	463b      	mov	r3, r7
 802332e:	4619      	mov	r1, r3
 8023330:	483d      	ldr	r0, [pc, #244]	; (8023428 <MX_ADC1_Init+0x204>)
 8023332:	f003 f8ff 	bl	8026534 <HAL_ADC_ConfigChannel>
 8023336:	4603      	mov	r3, r0
 8023338:	2b00      	cmp	r3, #0
 802333a:	d001      	beq.n	8023340 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 802333c:	f000 fd20 	bl	8023d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8023340:	230f      	movs	r3, #15
 8023342:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8023344:	2307      	movs	r3, #7
 8023346:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023348:	463b      	mov	r3, r7
 802334a:	4619      	mov	r1, r3
 802334c:	4836      	ldr	r0, [pc, #216]	; (8023428 <MX_ADC1_Init+0x204>)
 802334e:	f003 f8f1 	bl	8026534 <HAL_ADC_ConfigChannel>
 8023352:	4603      	mov	r3, r0
 8023354:	2b00      	cmp	r3, #0
 8023356:	d001      	beq.n	802335c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8023358:	f000 fd12 	bl	8023d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 802335c:	230a      	movs	r3, #10
 802335e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8023360:	2308      	movs	r3, #8
 8023362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023364:	463b      	mov	r3, r7
 8023366:	4619      	mov	r1, r3
 8023368:	482f      	ldr	r0, [pc, #188]	; (8023428 <MX_ADC1_Init+0x204>)
 802336a:	f003 f8e3 	bl	8026534 <HAL_ADC_ConfigChannel>
 802336e:	4603      	mov	r3, r0
 8023370:	2b00      	cmp	r3, #0
 8023372:	d001      	beq.n	8023378 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8023374:	f000 fd04 	bl	8023d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8023378:	230b      	movs	r3, #11
 802337a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 802337c:	2309      	movs	r3, #9
 802337e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023380:	463b      	mov	r3, r7
 8023382:	4619      	mov	r1, r3
 8023384:	4828      	ldr	r0, [pc, #160]	; (8023428 <MX_ADC1_Init+0x204>)
 8023386:	f003 f8d5 	bl	8026534 <HAL_ADC_ConfigChannel>
 802338a:	4603      	mov	r3, r0
 802338c:	2b00      	cmp	r3, #0
 802338e:	d001      	beq.n	8023394 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8023390:	f000 fcf6 	bl	8023d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8023394:	230c      	movs	r3, #12
 8023396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8023398:	230a      	movs	r3, #10
 802339a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802339c:	463b      	mov	r3, r7
 802339e:	4619      	mov	r1, r3
 80233a0:	4821      	ldr	r0, [pc, #132]	; (8023428 <MX_ADC1_Init+0x204>)
 80233a2:	f003 f8c7 	bl	8026534 <HAL_ADC_ConfigChannel>
 80233a6:	4603      	mov	r3, r0
 80233a8:	2b00      	cmp	r3, #0
 80233aa:	d001      	beq.n	80233b0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80233ac:	f000 fce8 	bl	8023d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80233b0:	230d      	movs	r3, #13
 80233b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80233b4:	230b      	movs	r3, #11
 80233b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80233b8:	463b      	mov	r3, r7
 80233ba:	4619      	mov	r1, r3
 80233bc:	481a      	ldr	r0, [pc, #104]	; (8023428 <MX_ADC1_Init+0x204>)
 80233be:	f003 f8b9 	bl	8026534 <HAL_ADC_ConfigChannel>
 80233c2:	4603      	mov	r3, r0
 80233c4:	2b00      	cmp	r3, #0
 80233c6:	d001      	beq.n	80233cc <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80233c8:	f000 fcda 	bl	8023d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80233cc:	2302      	movs	r3, #2
 80233ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80233d0:	230c      	movs	r3, #12
 80233d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80233d4:	463b      	mov	r3, r7
 80233d6:	4619      	mov	r1, r3
 80233d8:	4813      	ldr	r0, [pc, #76]	; (8023428 <MX_ADC1_Init+0x204>)
 80233da:	f003 f8ab 	bl	8026534 <HAL_ADC_ConfigChannel>
 80233de:	4603      	mov	r3, r0
 80233e0:	2b00      	cmp	r3, #0
 80233e2:	d001      	beq.n	80233e8 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80233e4:	f000 fccc 	bl	8023d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80233e8:	2301      	movs	r3, #1
 80233ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80233ec:	230d      	movs	r3, #13
 80233ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80233f0:	463b      	mov	r3, r7
 80233f2:	4619      	mov	r1, r3
 80233f4:	480c      	ldr	r0, [pc, #48]	; (8023428 <MX_ADC1_Init+0x204>)
 80233f6:	f003 f89d 	bl	8026534 <HAL_ADC_ConfigChannel>
 80233fa:	4603      	mov	r3, r0
 80233fc:	2b00      	cmp	r3, #0
 80233fe:	d001      	beq.n	8023404 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8023400:	f000 fcbe 	bl	8023d80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8023404:	2300      	movs	r3, #0
 8023406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8023408:	230e      	movs	r3, #14
 802340a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802340c:	463b      	mov	r3, r7
 802340e:	4619      	mov	r1, r3
 8023410:	4805      	ldr	r0, [pc, #20]	; (8023428 <MX_ADC1_Init+0x204>)
 8023412:	f003 f88f 	bl	8026534 <HAL_ADC_ConfigChannel>
 8023416:	4603      	mov	r3, r0
 8023418:	2b00      	cmp	r3, #0
 802341a:	d001      	beq.n	8023420 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 802341c:	f000 fcb0 	bl	8023d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8023420:	bf00      	nop
 8023422:	3710      	adds	r7, #16
 8023424:	46bd      	mov	sp, r7
 8023426:	bd80      	pop	{r7, pc}
 8023428:	20000798 	.word	0x20000798
 802342c:	40012000 	.word	0x40012000
 8023430:	0f000001 	.word	0x0f000001

08023434 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8023434:	b580      	push	{r7, lr}
 8023436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8023438:	4b12      	ldr	r3, [pc, #72]	; (8023484 <MX_I2C2_Init+0x50>)
 802343a:	4a13      	ldr	r2, [pc, #76]	; (8023488 <MX_I2C2_Init+0x54>)
 802343c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 802343e:	4b11      	ldr	r3, [pc, #68]	; (8023484 <MX_I2C2_Init+0x50>)
 8023440:	4a12      	ldr	r2, [pc, #72]	; (802348c <MX_I2C2_Init+0x58>)
 8023442:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8023444:	4b0f      	ldr	r3, [pc, #60]	; (8023484 <MX_I2C2_Init+0x50>)
 8023446:	2200      	movs	r2, #0
 8023448:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 802344a:	4b0e      	ldr	r3, [pc, #56]	; (8023484 <MX_I2C2_Init+0x50>)
 802344c:	2200      	movs	r2, #0
 802344e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8023450:	4b0c      	ldr	r3, [pc, #48]	; (8023484 <MX_I2C2_Init+0x50>)
 8023452:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8023456:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8023458:	4b0a      	ldr	r3, [pc, #40]	; (8023484 <MX_I2C2_Init+0x50>)
 802345a:	2200      	movs	r2, #0
 802345c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 802345e:	4b09      	ldr	r3, [pc, #36]	; (8023484 <MX_I2C2_Init+0x50>)
 8023460:	2200      	movs	r2, #0
 8023462:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8023464:	4b07      	ldr	r3, [pc, #28]	; (8023484 <MX_I2C2_Init+0x50>)
 8023466:	2200      	movs	r2, #0
 8023468:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 802346a:	4b06      	ldr	r3, [pc, #24]	; (8023484 <MX_I2C2_Init+0x50>)
 802346c:	2200      	movs	r2, #0
 802346e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8023470:	4804      	ldr	r0, [pc, #16]	; (8023484 <MX_I2C2_Init+0x50>)
 8023472:	f004 fc21 	bl	8027cb8 <HAL_I2C_Init>
 8023476:	4603      	mov	r3, r0
 8023478:	2b00      	cmp	r3, #0
 802347a:	d001      	beq.n	8023480 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 802347c:	f000 fc80 	bl	8023d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8023480:	bf00      	nop
 8023482:	bd80      	pop	{r7, pc}
 8023484:	2000066c 	.word	0x2000066c
 8023488:	40005800 	.word	0x40005800
 802348c:	000186a0 	.word	0x000186a0

08023490 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8023490:	b580      	push	{r7, lr}
 8023492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8023494:	4b17      	ldr	r3, [pc, #92]	; (80234f4 <MX_SPI3_Init+0x64>)
 8023496:	4a18      	ldr	r2, [pc, #96]	; (80234f8 <MX_SPI3_Init+0x68>)
 8023498:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 802349a:	4b16      	ldr	r3, [pc, #88]	; (80234f4 <MX_SPI3_Init+0x64>)
 802349c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80234a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80234a2:	4b14      	ldr	r3, [pc, #80]	; (80234f4 <MX_SPI3_Init+0x64>)
 80234a4:	2200      	movs	r2, #0
 80234a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80234a8:	4b12      	ldr	r3, [pc, #72]	; (80234f4 <MX_SPI3_Init+0x64>)
 80234aa:	2200      	movs	r2, #0
 80234ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80234ae:	4b11      	ldr	r3, [pc, #68]	; (80234f4 <MX_SPI3_Init+0x64>)
 80234b0:	2200      	movs	r2, #0
 80234b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80234b4:	4b0f      	ldr	r3, [pc, #60]	; (80234f4 <MX_SPI3_Init+0x64>)
 80234b6:	2200      	movs	r2, #0
 80234b8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80234ba:	4b0e      	ldr	r3, [pc, #56]	; (80234f4 <MX_SPI3_Init+0x64>)
 80234bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80234c0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80234c2:	4b0c      	ldr	r3, [pc, #48]	; (80234f4 <MX_SPI3_Init+0x64>)
 80234c4:	2238      	movs	r2, #56	; 0x38
 80234c6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80234c8:	4b0a      	ldr	r3, [pc, #40]	; (80234f4 <MX_SPI3_Init+0x64>)
 80234ca:	2200      	movs	r2, #0
 80234cc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80234ce:	4b09      	ldr	r3, [pc, #36]	; (80234f4 <MX_SPI3_Init+0x64>)
 80234d0:	2200      	movs	r2, #0
 80234d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80234d4:	4b07      	ldr	r3, [pc, #28]	; (80234f4 <MX_SPI3_Init+0x64>)
 80234d6:	2200      	movs	r2, #0
 80234d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80234da:	4b06      	ldr	r3, [pc, #24]	; (80234f4 <MX_SPI3_Init+0x64>)
 80234dc:	220a      	movs	r2, #10
 80234de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80234e0:	4804      	ldr	r0, [pc, #16]	; (80234f4 <MX_SPI3_Init+0x64>)
 80234e2:	f005 f949 	bl	8028778 <HAL_SPI_Init>
 80234e6:	4603      	mov	r3, r0
 80234e8:	2b00      	cmp	r3, #0
 80234ea:	d001      	beq.n	80234f0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80234ec:	f000 fc48 	bl	8023d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80234f0:	bf00      	nop
 80234f2:	bd80      	pop	{r7, pc}
 80234f4:	20000740 	.word	0x20000740
 80234f8:	40003c00 	.word	0x40003c00

080234fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80234fc:	b580      	push	{r7, lr}
 80234fe:	b092      	sub	sp, #72	; 0x48
 8023500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023502:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8023506:	2200      	movs	r2, #0
 8023508:	601a      	str	r2, [r3, #0]
 802350a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 802350c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023510:	2200      	movs	r2, #0
 8023512:	601a      	str	r2, [r3, #0]
 8023514:	605a      	str	r2, [r3, #4]
 8023516:	609a      	str	r2, [r3, #8]
 8023518:	60da      	str	r2, [r3, #12]
 802351a:	611a      	str	r2, [r3, #16]
 802351c:	615a      	str	r2, [r3, #20]
 802351e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8023520:	1d3b      	adds	r3, r7, #4
 8023522:	2220      	movs	r2, #32
 8023524:	2100      	movs	r1, #0
 8023526:	4618      	mov	r0, r3
 8023528:	f006 fedb 	bl	802a2e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 802352c:	4b39      	ldr	r3, [pc, #228]	; (8023614 <MX_TIM1_Init+0x118>)
 802352e:	4a3a      	ldr	r2, [pc, #232]	; (8023618 <MX_TIM1_Init+0x11c>)
 8023530:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8023532:	4b38      	ldr	r3, [pc, #224]	; (8023614 <MX_TIM1_Init+0x118>)
 8023534:	2201      	movs	r2, #1
 8023536:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023538:	4b36      	ldr	r3, [pc, #216]	; (8023614 <MX_TIM1_Init+0x118>)
 802353a:	2200      	movs	r2, #0
 802353c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 802353e:	4b35      	ldr	r3, [pc, #212]	; (8023614 <MX_TIM1_Init+0x118>)
 8023540:	f240 4219 	movw	r2, #1049	; 0x419
 8023544:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023546:	4b33      	ldr	r3, [pc, #204]	; (8023614 <MX_TIM1_Init+0x118>)
 8023548:	2200      	movs	r2, #0
 802354a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 802354c:	4b31      	ldr	r3, [pc, #196]	; (8023614 <MX_TIM1_Init+0x118>)
 802354e:	2200      	movs	r2, #0
 8023550:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023552:	4b30      	ldr	r3, [pc, #192]	; (8023614 <MX_TIM1_Init+0x118>)
 8023554:	2200      	movs	r2, #0
 8023556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8023558:	482e      	ldr	r0, [pc, #184]	; (8023614 <MX_TIM1_Init+0x118>)
 802355a:	f005 feb0 	bl	80292be <HAL_TIM_PWM_Init>
 802355e:	4603      	mov	r3, r0
 8023560:	2b00      	cmp	r3, #0
 8023562:	d001      	beq.n	8023568 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8023564:	f000 fc0c 	bl	8023d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023568:	2300      	movs	r3, #0
 802356a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802356c:	2300      	movs	r3, #0
 802356e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8023570:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8023574:	4619      	mov	r1, r3
 8023576:	4827      	ldr	r0, [pc, #156]	; (8023614 <MX_TIM1_Init+0x118>)
 8023578:	f006 fd92 	bl	802a0a0 <HAL_TIMEx_MasterConfigSynchronization>
 802357c:	4603      	mov	r3, r0
 802357e:	2b00      	cmp	r3, #0
 8023580:	d001      	beq.n	8023586 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8023582:	f000 fbfd 	bl	8023d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023586:	2360      	movs	r3, #96	; 0x60
 8023588:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 802358a:	2300      	movs	r3, #0
 802358c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802358e:	2300      	movs	r3, #0
 8023590:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8023592:	2300      	movs	r3, #0
 8023594:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023596:	2300      	movs	r3, #0
 8023598:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 802359a:	2300      	movs	r3, #0
 802359c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 802359e:	2300      	movs	r3, #0
 80235a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80235a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80235a6:	2204      	movs	r2, #4
 80235a8:	4619      	mov	r1, r3
 80235aa:	481a      	ldr	r0, [pc, #104]	; (8023614 <MX_TIM1_Init+0x118>)
 80235ac:	f006 f8c2 	bl	8029734 <HAL_TIM_PWM_ConfigChannel>
 80235b0:	4603      	mov	r3, r0
 80235b2:	2b00      	cmp	r3, #0
 80235b4:	d001      	beq.n	80235ba <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80235b6:	f000 fbe3 	bl	8023d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80235ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80235be:	220c      	movs	r2, #12
 80235c0:	4619      	mov	r1, r3
 80235c2:	4814      	ldr	r0, [pc, #80]	; (8023614 <MX_TIM1_Init+0x118>)
 80235c4:	f006 f8b6 	bl	8029734 <HAL_TIM_PWM_ConfigChannel>
 80235c8:	4603      	mov	r3, r0
 80235ca:	2b00      	cmp	r3, #0
 80235cc:	d001      	beq.n	80235d2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80235ce:	f000 fbd7 	bl	8023d80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80235d2:	2300      	movs	r3, #0
 80235d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80235d6:	2300      	movs	r3, #0
 80235d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80235da:	2300      	movs	r3, #0
 80235dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80235de:	2300      	movs	r3, #0
 80235e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80235e2:	2300      	movs	r3, #0
 80235e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80235e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80235ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80235ec:	2300      	movs	r3, #0
 80235ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80235f0:	1d3b      	adds	r3, r7, #4
 80235f2:	4619      	mov	r1, r3
 80235f4:	4807      	ldr	r0, [pc, #28]	; (8023614 <MX_TIM1_Init+0x118>)
 80235f6:	f006 fdcf 	bl	802a198 <HAL_TIMEx_ConfigBreakDeadTime>
 80235fa:	4603      	mov	r3, r0
 80235fc:	2b00      	cmp	r3, #0
 80235fe:	d001      	beq.n	8023604 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8023600:	f000 fbbe 	bl	8023d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8023604:	4803      	ldr	r0, [pc, #12]	; (8023614 <MX_TIM1_Init+0x118>)
 8023606:	f002 fa25 	bl	8025a54 <HAL_TIM_MspPostInit>

}
 802360a:	bf00      	nop
 802360c:	3748      	adds	r7, #72	; 0x48
 802360e:	46bd      	mov	sp, r7
 8023610:	bd80      	pop	{r7, pc}
 8023612:	bf00      	nop
 8023614:	200008c0 	.word	0x200008c0
 8023618:	40010000 	.word	0x40010000

0802361c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 802361c:	b580      	push	{r7, lr}
 802361e:	b086      	sub	sp, #24
 8023620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8023622:	f107 0308 	add.w	r3, r7, #8
 8023626:	2200      	movs	r2, #0
 8023628:	601a      	str	r2, [r3, #0]
 802362a:	605a      	str	r2, [r3, #4]
 802362c:	609a      	str	r2, [r3, #8]
 802362e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023630:	463b      	mov	r3, r7
 8023632:	2200      	movs	r2, #0
 8023634:	601a      	str	r2, [r3, #0]
 8023636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8023638:	4b1d      	ldr	r3, [pc, #116]	; (80236b0 <MX_TIM2_Init+0x94>)
 802363a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802363e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8023640:	4b1b      	ldr	r3, [pc, #108]	; (80236b0 <MX_TIM2_Init+0x94>)
 8023642:	2204      	movs	r2, #4
 8023644:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023646:	4b1a      	ldr	r3, [pc, #104]	; (80236b0 <MX_TIM2_Init+0x94>)
 8023648:	2200      	movs	r2, #0
 802364a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 802364c:	4b18      	ldr	r3, [pc, #96]	; (80236b0 <MX_TIM2_Init+0x94>)
 802364e:	4a19      	ldr	r2, [pc, #100]	; (80236b4 <MX_TIM2_Init+0x98>)
 8023650:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023652:	4b17      	ldr	r3, [pc, #92]	; (80236b0 <MX_TIM2_Init+0x94>)
 8023654:	2200      	movs	r2, #0
 8023656:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023658:	4b15      	ldr	r3, [pc, #84]	; (80236b0 <MX_TIM2_Init+0x94>)
 802365a:	2200      	movs	r2, #0
 802365c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802365e:	4814      	ldr	r0, [pc, #80]	; (80236b0 <MX_TIM2_Init+0x94>)
 8023660:	f005 fdde 	bl	8029220 <HAL_TIM_Base_Init>
 8023664:	4603      	mov	r3, r0
 8023666:	2b00      	cmp	r3, #0
 8023668:	d001      	beq.n	802366e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 802366a:	f000 fb89 	bl	8023d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802366e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023672:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8023674:	f107 0308 	add.w	r3, r7, #8
 8023678:	4619      	mov	r1, r3
 802367a:	480d      	ldr	r0, [pc, #52]	; (80236b0 <MX_TIM2_Init+0x94>)
 802367c:	f006 f920 	bl	80298c0 <HAL_TIM_ConfigClockSource>
 8023680:	4603      	mov	r3, r0
 8023682:	2b00      	cmp	r3, #0
 8023684:	d001      	beq.n	802368a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8023686:	f000 fb7b 	bl	8023d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802368a:	2300      	movs	r3, #0
 802368c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802368e:	2300      	movs	r3, #0
 8023690:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8023692:	463b      	mov	r3, r7
 8023694:	4619      	mov	r1, r3
 8023696:	4806      	ldr	r0, [pc, #24]	; (80236b0 <MX_TIM2_Init+0x94>)
 8023698:	f006 fd02 	bl	802a0a0 <HAL_TIMEx_MasterConfigSynchronization>
 802369c:	4603      	mov	r3, r0
 802369e:	2b00      	cmp	r3, #0
 80236a0:	d001      	beq.n	80236a6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80236a2:	f000 fb6d 	bl	8023d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80236a6:	bf00      	nop
 80236a8:	3718      	adds	r7, #24
 80236aa:	46bd      	mov	sp, r7
 80236ac:	bd80      	pop	{r7, pc}
 80236ae:	bf00      	nop
 80236b0:	20000900 	.word	0x20000900
 80236b4:	00019a27 	.word	0x00019a27

080236b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80236b8:	b580      	push	{r7, lr}
 80236ba:	b08a      	sub	sp, #40	; 0x28
 80236bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80236be:	f107 0320 	add.w	r3, r7, #32
 80236c2:	2200      	movs	r2, #0
 80236c4:	601a      	str	r2, [r3, #0]
 80236c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80236c8:	1d3b      	adds	r3, r7, #4
 80236ca:	2200      	movs	r2, #0
 80236cc:	601a      	str	r2, [r3, #0]
 80236ce:	605a      	str	r2, [r3, #4]
 80236d0:	609a      	str	r2, [r3, #8]
 80236d2:	60da      	str	r2, [r3, #12]
 80236d4:	611a      	str	r2, [r3, #16]
 80236d6:	615a      	str	r2, [r3, #20]
 80236d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80236da:	4b32      	ldr	r3, [pc, #200]	; (80237a4 <MX_TIM3_Init+0xec>)
 80236dc:	4a32      	ldr	r2, [pc, #200]	; (80237a8 <MX_TIM3_Init+0xf0>)
 80236de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80236e0:	4b30      	ldr	r3, [pc, #192]	; (80237a4 <MX_TIM3_Init+0xec>)
 80236e2:	2200      	movs	r2, #0
 80236e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80236e6:	4b2f      	ldr	r3, [pc, #188]	; (80237a4 <MX_TIM3_Init+0xec>)
 80236e8:	2200      	movs	r2, #0
 80236ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80236ec:	4b2d      	ldr	r3, [pc, #180]	; (80237a4 <MX_TIM3_Init+0xec>)
 80236ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80236f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80236f4:	4b2b      	ldr	r3, [pc, #172]	; (80237a4 <MX_TIM3_Init+0xec>)
 80236f6:	2200      	movs	r2, #0
 80236f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80236fa:	4b2a      	ldr	r3, [pc, #168]	; (80237a4 <MX_TIM3_Init+0xec>)
 80236fc:	2200      	movs	r2, #0
 80236fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8023700:	4828      	ldr	r0, [pc, #160]	; (80237a4 <MX_TIM3_Init+0xec>)
 8023702:	f005 fddc 	bl	80292be <HAL_TIM_PWM_Init>
 8023706:	4603      	mov	r3, r0
 8023708:	2b00      	cmp	r3, #0
 802370a:	d001      	beq.n	8023710 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 802370c:	f000 fb38 	bl	8023d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023710:	2300      	movs	r3, #0
 8023712:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023714:	2300      	movs	r3, #0
 8023716:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8023718:	f107 0320 	add.w	r3, r7, #32
 802371c:	4619      	mov	r1, r3
 802371e:	4821      	ldr	r0, [pc, #132]	; (80237a4 <MX_TIM3_Init+0xec>)
 8023720:	f006 fcbe 	bl	802a0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8023724:	4603      	mov	r3, r0
 8023726:	2b00      	cmp	r3, #0
 8023728:	d001      	beq.n	802372e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 802372a:	f000 fb29 	bl	8023d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802372e:	2360      	movs	r3, #96	; 0x60
 8023730:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023732:	2300      	movs	r3, #0
 8023734:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023736:	2300      	movs	r3, #0
 8023738:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802373a:	2300      	movs	r3, #0
 802373c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 802373e:	1d3b      	adds	r3, r7, #4
 8023740:	2200      	movs	r2, #0
 8023742:	4619      	mov	r1, r3
 8023744:	4817      	ldr	r0, [pc, #92]	; (80237a4 <MX_TIM3_Init+0xec>)
 8023746:	f005 fff5 	bl	8029734 <HAL_TIM_PWM_ConfigChannel>
 802374a:	4603      	mov	r3, r0
 802374c:	2b00      	cmp	r3, #0
 802374e:	d001      	beq.n	8023754 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8023750:	f000 fb16 	bl	8023d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023754:	1d3b      	adds	r3, r7, #4
 8023756:	2204      	movs	r2, #4
 8023758:	4619      	mov	r1, r3
 802375a:	4812      	ldr	r0, [pc, #72]	; (80237a4 <MX_TIM3_Init+0xec>)
 802375c:	f005 ffea 	bl	8029734 <HAL_TIM_PWM_ConfigChannel>
 8023760:	4603      	mov	r3, r0
 8023762:	2b00      	cmp	r3, #0
 8023764:	d001      	beq.n	802376a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8023766:	f000 fb0b 	bl	8023d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 802376a:	1d3b      	adds	r3, r7, #4
 802376c:	2208      	movs	r2, #8
 802376e:	4619      	mov	r1, r3
 8023770:	480c      	ldr	r0, [pc, #48]	; (80237a4 <MX_TIM3_Init+0xec>)
 8023772:	f005 ffdf 	bl	8029734 <HAL_TIM_PWM_ConfigChannel>
 8023776:	4603      	mov	r3, r0
 8023778:	2b00      	cmp	r3, #0
 802377a:	d001      	beq.n	8023780 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 802377c:	f000 fb00 	bl	8023d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8023780:	1d3b      	adds	r3, r7, #4
 8023782:	220c      	movs	r2, #12
 8023784:	4619      	mov	r1, r3
 8023786:	4807      	ldr	r0, [pc, #28]	; (80237a4 <MX_TIM3_Init+0xec>)
 8023788:	f005 ffd4 	bl	8029734 <HAL_TIM_PWM_ConfigChannel>
 802378c:	4603      	mov	r3, r0
 802378e:	2b00      	cmp	r3, #0
 8023790:	d001      	beq.n	8023796 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8023792:	f000 faf5 	bl	8023d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8023796:	4803      	ldr	r0, [pc, #12]	; (80237a4 <MX_TIM3_Init+0xec>)
 8023798:	f002 f95c 	bl	8025a54 <HAL_TIM_MspPostInit>

}
 802379c:	bf00      	nop
 802379e:	3728      	adds	r7, #40	; 0x28
 80237a0:	46bd      	mov	sp, r7
 80237a2:	bd80      	pop	{r7, pc}
 80237a4:	20000700 	.word	0x20000700
 80237a8:	40000400 	.word	0x40000400

080237ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80237ac:	b580      	push	{r7, lr}
 80237ae:	b08c      	sub	sp, #48	; 0x30
 80237b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80237b2:	f107 030c 	add.w	r3, r7, #12
 80237b6:	2224      	movs	r2, #36	; 0x24
 80237b8:	2100      	movs	r1, #0
 80237ba:	4618      	mov	r0, r3
 80237bc:	f006 fd91 	bl	802a2e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80237c0:	1d3b      	adds	r3, r7, #4
 80237c2:	2200      	movs	r2, #0
 80237c4:	601a      	str	r2, [r3, #0]
 80237c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80237c8:	4b20      	ldr	r3, [pc, #128]	; (802384c <MX_TIM4_Init+0xa0>)
 80237ca:	4a21      	ldr	r2, [pc, #132]	; (8023850 <MX_TIM4_Init+0xa4>)
 80237cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80237ce:	4b1f      	ldr	r3, [pc, #124]	; (802384c <MX_TIM4_Init+0xa0>)
 80237d0:	2200      	movs	r2, #0
 80237d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80237d4:	4b1d      	ldr	r3, [pc, #116]	; (802384c <MX_TIM4_Init+0xa0>)
 80237d6:	2200      	movs	r2, #0
 80237d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80237da:	4b1c      	ldr	r3, [pc, #112]	; (802384c <MX_TIM4_Init+0xa0>)
 80237dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80237e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80237e2:	4b1a      	ldr	r3, [pc, #104]	; (802384c <MX_TIM4_Init+0xa0>)
 80237e4:	2200      	movs	r2, #0
 80237e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80237e8:	4b18      	ldr	r3, [pc, #96]	; (802384c <MX_TIM4_Init+0xa0>)
 80237ea:	2200      	movs	r2, #0
 80237ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80237ee:	2303      	movs	r3, #3
 80237f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80237f2:	2300      	movs	r3, #0
 80237f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80237f6:	2301      	movs	r3, #1
 80237f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80237fa:	2300      	movs	r3, #0
 80237fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80237fe:	2300      	movs	r3, #0
 8023800:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8023802:	2300      	movs	r3, #0
 8023804:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8023806:	2301      	movs	r3, #1
 8023808:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 802380a:	2300      	movs	r3, #0
 802380c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 802380e:	2300      	movs	r3, #0
 8023810:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8023812:	f107 030c 	add.w	r3, r7, #12
 8023816:	4619      	mov	r1, r3
 8023818:	480c      	ldr	r0, [pc, #48]	; (802384c <MX_TIM4_Init+0xa0>)
 802381a:	f005 fdb9 	bl	8029390 <HAL_TIM_Encoder_Init>
 802381e:	4603      	mov	r3, r0
 8023820:	2b00      	cmp	r3, #0
 8023822:	d001      	beq.n	8023828 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8023824:	f000 faac 	bl	8023d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023828:	2300      	movs	r3, #0
 802382a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802382c:	2300      	movs	r3, #0
 802382e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8023830:	1d3b      	adds	r3, r7, #4
 8023832:	4619      	mov	r1, r3
 8023834:	4805      	ldr	r0, [pc, #20]	; (802384c <MX_TIM4_Init+0xa0>)
 8023836:	f006 fc33 	bl	802a0a0 <HAL_TIMEx_MasterConfigSynchronization>
 802383a:	4603      	mov	r3, r0
 802383c:	2b00      	cmp	r3, #0
 802383e:	d001      	beq.n	8023844 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8023840:	f000 fa9e 	bl	8023d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8023844:	bf00      	nop
 8023846:	3730      	adds	r7, #48	; 0x30
 8023848:	46bd      	mov	sp, r7
 802384a:	bd80      	pop	{r7, pc}
 802384c:	2000062c 	.word	0x2000062c
 8023850:	40000800 	.word	0x40000800

08023854 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8023854:	b580      	push	{r7, lr}
 8023856:	b086      	sub	sp, #24
 8023858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802385a:	f107 0308 	add.w	r3, r7, #8
 802385e:	2200      	movs	r2, #0
 8023860:	601a      	str	r2, [r3, #0]
 8023862:	605a      	str	r2, [r3, #4]
 8023864:	609a      	str	r2, [r3, #8]
 8023866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023868:	463b      	mov	r3, r7
 802386a:	2200      	movs	r2, #0
 802386c:	601a      	str	r2, [r3, #0]
 802386e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8023870:	4b1d      	ldr	r3, [pc, #116]	; (80238e8 <MX_TIM5_Init+0x94>)
 8023872:	4a1e      	ldr	r2, [pc, #120]	; (80238ec <MX_TIM5_Init+0x98>)
 8023874:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 8023876:	4b1c      	ldr	r3, [pc, #112]	; (80238e8 <MX_TIM5_Init+0x94>)
 8023878:	2204      	movs	r2, #4
 802387a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 802387c:	4b1a      	ldr	r3, [pc, #104]	; (80238e8 <MX_TIM5_Init+0x94>)
 802387e:	2200      	movs	r2, #0
 8023880:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 8023882:	4b19      	ldr	r3, [pc, #100]	; (80238e8 <MX_TIM5_Init+0x94>)
 8023884:	f245 2207 	movw	r2, #20999	; 0x5207
 8023888:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802388a:	4b17      	ldr	r3, [pc, #92]	; (80238e8 <MX_TIM5_Init+0x94>)
 802388c:	2200      	movs	r2, #0
 802388e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023890:	4b15      	ldr	r3, [pc, #84]	; (80238e8 <MX_TIM5_Init+0x94>)
 8023892:	2200      	movs	r2, #0
 8023894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8023896:	4814      	ldr	r0, [pc, #80]	; (80238e8 <MX_TIM5_Init+0x94>)
 8023898:	f005 fcc2 	bl	8029220 <HAL_TIM_Base_Init>
 802389c:	4603      	mov	r3, r0
 802389e:	2b00      	cmp	r3, #0
 80238a0:	d001      	beq.n	80238a6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80238a2:	f000 fa6d 	bl	8023d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80238a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80238aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80238ac:	f107 0308 	add.w	r3, r7, #8
 80238b0:	4619      	mov	r1, r3
 80238b2:	480d      	ldr	r0, [pc, #52]	; (80238e8 <MX_TIM5_Init+0x94>)
 80238b4:	f006 f804 	bl	80298c0 <HAL_TIM_ConfigClockSource>
 80238b8:	4603      	mov	r3, r0
 80238ba:	2b00      	cmp	r3, #0
 80238bc:	d001      	beq.n	80238c2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80238be:	f000 fa5f 	bl	8023d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80238c2:	2300      	movs	r3, #0
 80238c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80238c6:	2300      	movs	r3, #0
 80238c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80238ca:	463b      	mov	r3, r7
 80238cc:	4619      	mov	r1, r3
 80238ce:	4806      	ldr	r0, [pc, #24]	; (80238e8 <MX_TIM5_Init+0x94>)
 80238d0:	f006 fbe6 	bl	802a0a0 <HAL_TIMEx_MasterConfigSynchronization>
 80238d4:	4603      	mov	r3, r0
 80238d6:	2b00      	cmp	r3, #0
 80238d8:	d001      	beq.n	80238de <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80238da:	f000 fa51 	bl	8023d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80238de:	bf00      	nop
 80238e0:	3718      	adds	r7, #24
 80238e2:	46bd      	mov	sp, r7
 80238e4:	bd80      	pop	{r7, pc}
 80238e6:	bf00      	nop
 80238e8:	200006c0 	.word	0x200006c0
 80238ec:	40000c00 	.word	0x40000c00

080238f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80238f0:	b580      	push	{r7, lr}
 80238f2:	b082      	sub	sp, #8
 80238f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80238f6:	463b      	mov	r3, r7
 80238f8:	2200      	movs	r2, #0
 80238fa:	601a      	str	r2, [r3, #0]
 80238fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80238fe:	4b15      	ldr	r3, [pc, #84]	; (8023954 <MX_TIM6_Init+0x64>)
 8023900:	4a15      	ldr	r2, [pc, #84]	; (8023958 <MX_TIM6_Init+0x68>)
 8023902:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8023904:	4b13      	ldr	r3, [pc, #76]	; (8023954 <MX_TIM6_Init+0x64>)
 8023906:	2204      	movs	r2, #4
 8023908:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 802390a:	4b12      	ldr	r3, [pc, #72]	; (8023954 <MX_TIM6_Init+0x64>)
 802390c:	2200      	movs	r2, #0
 802390e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8023910:	4b10      	ldr	r3, [pc, #64]	; (8023954 <MX_TIM6_Init+0x64>)
 8023912:	f642 1203 	movw	r2, #10499	; 0x2903
 8023916:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023918:	4b0e      	ldr	r3, [pc, #56]	; (8023954 <MX_TIM6_Init+0x64>)
 802391a:	2200      	movs	r2, #0
 802391c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 802391e:	480d      	ldr	r0, [pc, #52]	; (8023954 <MX_TIM6_Init+0x64>)
 8023920:	f005 fc7e 	bl	8029220 <HAL_TIM_Base_Init>
 8023924:	4603      	mov	r3, r0
 8023926:	2b00      	cmp	r3, #0
 8023928:	d001      	beq.n	802392e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 802392a:	f000 fa29 	bl	8023d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802392e:	2300      	movs	r3, #0
 8023930:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023932:	2300      	movs	r3, #0
 8023934:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8023936:	463b      	mov	r3, r7
 8023938:	4619      	mov	r1, r3
 802393a:	4806      	ldr	r0, [pc, #24]	; (8023954 <MX_TIM6_Init+0x64>)
 802393c:	f006 fbb0 	bl	802a0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8023940:	4603      	mov	r3, r0
 8023942:	2b00      	cmp	r3, #0
 8023944:	d001      	beq.n	802394a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8023946:	f000 fa1b 	bl	8023d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 802394a:	bf00      	nop
 802394c:	3708      	adds	r7, #8
 802394e:	46bd      	mov	sp, r7
 8023950:	bd80      	pop	{r7, pc}
 8023952:	bf00      	nop
 8023954:	20000880 	.word	0x20000880
 8023958:	40001000 	.word	0x40001000

0802395c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 802395c:	b580      	push	{r7, lr}
 802395e:	b082      	sub	sp, #8
 8023960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023962:	463b      	mov	r3, r7
 8023964:	2200      	movs	r2, #0
 8023966:	601a      	str	r2, [r3, #0]
 8023968:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 802396a:	4b15      	ldr	r3, [pc, #84]	; (80239c0 <MX_TIM7_Init+0x64>)
 802396c:	4a15      	ldr	r2, [pc, #84]	; (80239c4 <MX_TIM7_Init+0x68>)
 802396e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8023970:	4b13      	ldr	r3, [pc, #76]	; (80239c0 <MX_TIM7_Init+0x64>)
 8023972:	2204      	movs	r2, #4
 8023974:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023976:	4b12      	ldr	r3, [pc, #72]	; (80239c0 <MX_TIM7_Init+0x64>)
 8023978:	2200      	movs	r2, #0
 802397a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 802397c:	4b10      	ldr	r3, [pc, #64]	; (80239c0 <MX_TIM7_Init+0x64>)
 802397e:	f240 4219 	movw	r2, #1049	; 0x419
 8023982:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023984:	4b0e      	ldr	r3, [pc, #56]	; (80239c0 <MX_TIM7_Init+0x64>)
 8023986:	2200      	movs	r2, #0
 8023988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 802398a:	480d      	ldr	r0, [pc, #52]	; (80239c0 <MX_TIM7_Init+0x64>)
 802398c:	f005 fc48 	bl	8029220 <HAL_TIM_Base_Init>
 8023990:	4603      	mov	r3, r0
 8023992:	2b00      	cmp	r3, #0
 8023994:	d001      	beq.n	802399a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8023996:	f000 f9f3 	bl	8023d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802399a:	2300      	movs	r3, #0
 802399c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802399e:	2300      	movs	r3, #0
 80239a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80239a2:	463b      	mov	r3, r7
 80239a4:	4619      	mov	r1, r3
 80239a6:	4806      	ldr	r0, [pc, #24]	; (80239c0 <MX_TIM7_Init+0x64>)
 80239a8:	f006 fb7a 	bl	802a0a0 <HAL_TIMEx_MasterConfigSynchronization>
 80239ac:	4603      	mov	r3, r0
 80239ae:	2b00      	cmp	r3, #0
 80239b0:	d001      	beq.n	80239b6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80239b2:	f000 f9e5 	bl	8023d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80239b6:	bf00      	nop
 80239b8:	3708      	adds	r7, #8
 80239ba:	46bd      	mov	sp, r7
 80239bc:	bd80      	pop	{r7, pc}
 80239be:	bf00      	nop
 80239c0:	20000980 	.word	0x20000980
 80239c4:	40001400 	.word	0x40001400

080239c8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80239c8:	b580      	push	{r7, lr}
 80239ca:	b08c      	sub	sp, #48	; 0x30
 80239cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80239ce:	f107 030c 	add.w	r3, r7, #12
 80239d2:	2224      	movs	r2, #36	; 0x24
 80239d4:	2100      	movs	r1, #0
 80239d6:	4618      	mov	r0, r3
 80239d8:	f006 fc83 	bl	802a2e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80239dc:	1d3b      	adds	r3, r7, #4
 80239de:	2200      	movs	r2, #0
 80239e0:	601a      	str	r2, [r3, #0]
 80239e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80239e4:	4b22      	ldr	r3, [pc, #136]	; (8023a70 <MX_TIM8_Init+0xa8>)
 80239e6:	4a23      	ldr	r2, [pc, #140]	; (8023a74 <MX_TIM8_Init+0xac>)
 80239e8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80239ea:	4b21      	ldr	r3, [pc, #132]	; (8023a70 <MX_TIM8_Init+0xa8>)
 80239ec:	2200      	movs	r2, #0
 80239ee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80239f0:	4b1f      	ldr	r3, [pc, #124]	; (8023a70 <MX_TIM8_Init+0xa8>)
 80239f2:	2200      	movs	r2, #0
 80239f4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80239f6:	4b1e      	ldr	r3, [pc, #120]	; (8023a70 <MX_TIM8_Init+0xa8>)
 80239f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80239fc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80239fe:	4b1c      	ldr	r3, [pc, #112]	; (8023a70 <MX_TIM8_Init+0xa8>)
 8023a00:	2200      	movs	r2, #0
 8023a02:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8023a04:	4b1a      	ldr	r3, [pc, #104]	; (8023a70 <MX_TIM8_Init+0xa8>)
 8023a06:	2200      	movs	r2, #0
 8023a08:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023a0a:	4b19      	ldr	r3, [pc, #100]	; (8023a70 <MX_TIM8_Init+0xa8>)
 8023a0c:	2200      	movs	r2, #0
 8023a0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8023a10:	2303      	movs	r3, #3
 8023a12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8023a14:	2300      	movs	r3, #0
 8023a16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8023a18:	2301      	movs	r3, #1
 8023a1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8023a1c:	2300      	movs	r3, #0
 8023a1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8023a20:	2300      	movs	r3, #0
 8023a22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8023a24:	2300      	movs	r3, #0
 8023a26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8023a28:	2301      	movs	r3, #1
 8023a2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8023a2c:	2300      	movs	r3, #0
 8023a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8023a30:	2300      	movs	r3, #0
 8023a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8023a34:	f107 030c 	add.w	r3, r7, #12
 8023a38:	4619      	mov	r1, r3
 8023a3a:	480d      	ldr	r0, [pc, #52]	; (8023a70 <MX_TIM8_Init+0xa8>)
 8023a3c:	f005 fca8 	bl	8029390 <HAL_TIM_Encoder_Init>
 8023a40:	4603      	mov	r3, r0
 8023a42:	2b00      	cmp	r3, #0
 8023a44:	d001      	beq.n	8023a4a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8023a46:	f000 f99b 	bl	8023d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023a4a:	2300      	movs	r3, #0
 8023a4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023a4e:	2300      	movs	r3, #0
 8023a50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8023a52:	1d3b      	adds	r3, r7, #4
 8023a54:	4619      	mov	r1, r3
 8023a56:	4806      	ldr	r0, [pc, #24]	; (8023a70 <MX_TIM8_Init+0xa8>)
 8023a58:	f006 fb22 	bl	802a0a0 <HAL_TIMEx_MasterConfigSynchronization>
 8023a5c:	4603      	mov	r3, r0
 8023a5e:	2b00      	cmp	r3, #0
 8023a60:	d001      	beq.n	8023a66 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8023a62:	f000 f98d 	bl	8023d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8023a66:	bf00      	nop
 8023a68:	3730      	adds	r7, #48	; 0x30
 8023a6a:	46bd      	mov	sp, r7
 8023a6c:	bd80      	pop	{r7, pc}
 8023a6e:	bf00      	nop
 8023a70:	200005ec 	.word	0x200005ec
 8023a74:	40010400 	.word	0x40010400

08023a78 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8023a78:	b580      	push	{r7, lr}
 8023a7a:	b088      	sub	sp, #32
 8023a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8023a7e:	1d3b      	adds	r3, r7, #4
 8023a80:	2200      	movs	r2, #0
 8023a82:	601a      	str	r2, [r3, #0]
 8023a84:	605a      	str	r2, [r3, #4]
 8023a86:	609a      	str	r2, [r3, #8]
 8023a88:	60da      	str	r2, [r3, #12]
 8023a8a:	611a      	str	r2, [r3, #16]
 8023a8c:	615a      	str	r2, [r3, #20]
 8023a8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8023a90:	4b1e      	ldr	r3, [pc, #120]	; (8023b0c <MX_TIM11_Init+0x94>)
 8023a92:	4a1f      	ldr	r2, [pc, #124]	; (8023b10 <MX_TIM11_Init+0x98>)
 8023a94:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8023a96:	4b1d      	ldr	r3, [pc, #116]	; (8023b0c <MX_TIM11_Init+0x94>)
 8023a98:	2200      	movs	r2, #0
 8023a9a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023a9c:	4b1b      	ldr	r3, [pc, #108]	; (8023b0c <MX_TIM11_Init+0x94>)
 8023a9e:	2200      	movs	r2, #0
 8023aa0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 8023aa2:	4b1a      	ldr	r3, [pc, #104]	; (8023b0c <MX_TIM11_Init+0x94>)
 8023aa4:	f240 628f 	movw	r2, #1679	; 0x68f
 8023aa8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023aaa:	4b18      	ldr	r3, [pc, #96]	; (8023b0c <MX_TIM11_Init+0x94>)
 8023aac:	2200      	movs	r2, #0
 8023aae:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023ab0:	4b16      	ldr	r3, [pc, #88]	; (8023b0c <MX_TIM11_Init+0x94>)
 8023ab2:	2200      	movs	r2, #0
 8023ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8023ab6:	4815      	ldr	r0, [pc, #84]	; (8023b0c <MX_TIM11_Init+0x94>)
 8023ab8:	f005 fbb2 	bl	8029220 <HAL_TIM_Base_Init>
 8023abc:	4603      	mov	r3, r0
 8023abe:	2b00      	cmp	r3, #0
 8023ac0:	d001      	beq.n	8023ac6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8023ac2:	f000 f95d 	bl	8023d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8023ac6:	4811      	ldr	r0, [pc, #68]	; (8023b0c <MX_TIM11_Init+0x94>)
 8023ac8:	f005 fbf9 	bl	80292be <HAL_TIM_PWM_Init>
 8023acc:	4603      	mov	r3, r0
 8023ace:	2b00      	cmp	r3, #0
 8023ad0:	d001      	beq.n	8023ad6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8023ad2:	f000 f955 	bl	8023d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023ad6:	2360      	movs	r3, #96	; 0x60
 8023ad8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023ada:	2300      	movs	r3, #0
 8023adc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023ade:	2300      	movs	r3, #0
 8023ae0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023ae2:	2300      	movs	r3, #0
 8023ae4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023ae6:	1d3b      	adds	r3, r7, #4
 8023ae8:	2200      	movs	r2, #0
 8023aea:	4619      	mov	r1, r3
 8023aec:	4807      	ldr	r0, [pc, #28]	; (8023b0c <MX_TIM11_Init+0x94>)
 8023aee:	f005 fe21 	bl	8029734 <HAL_TIM_PWM_ConfigChannel>
 8023af2:	4603      	mov	r3, r0
 8023af4:	2b00      	cmp	r3, #0
 8023af6:	d001      	beq.n	8023afc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8023af8:	f000 f942 	bl	8023d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8023afc:	4803      	ldr	r0, [pc, #12]	; (8023b0c <MX_TIM11_Init+0x94>)
 8023afe:	f001 ffa9 	bl	8025a54 <HAL_TIM_MspPostInit>

}
 8023b02:	bf00      	nop
 8023b04:	3720      	adds	r7, #32
 8023b06:	46bd      	mov	sp, r7
 8023b08:	bd80      	pop	{r7, pc}
 8023b0a:	bf00      	nop
 8023b0c:	200007e0 	.word	0x200007e0
 8023b10:	40014800 	.word	0x40014800

08023b14 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8023b14:	b580      	push	{r7, lr}
 8023b16:	b088      	sub	sp, #32
 8023b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8023b1a:	1d3b      	adds	r3, r7, #4
 8023b1c:	2200      	movs	r2, #0
 8023b1e:	601a      	str	r2, [r3, #0]
 8023b20:	605a      	str	r2, [r3, #4]
 8023b22:	609a      	str	r2, [r3, #8]
 8023b24:	60da      	str	r2, [r3, #12]
 8023b26:	611a      	str	r2, [r3, #16]
 8023b28:	615a      	str	r2, [r3, #20]
 8023b2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8023b2c:	4b1a      	ldr	r3, [pc, #104]	; (8023b98 <MX_TIM12_Init+0x84>)
 8023b2e:	4a1b      	ldr	r2, [pc, #108]	; (8023b9c <MX_TIM12_Init+0x88>)
 8023b30:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 8023b32:	4b19      	ldr	r3, [pc, #100]	; (8023b98 <MX_TIM12_Init+0x84>)
 8023b34:	f44f 725c 	mov.w	r2, #880	; 0x370
 8023b38:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023b3a:	4b17      	ldr	r3, [pc, #92]	; (8023b98 <MX_TIM12_Init+0x84>)
 8023b3c:	2200      	movs	r2, #0
 8023b3e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 8023b40:	4b15      	ldr	r3, [pc, #84]	; (8023b98 <MX_TIM12_Init+0x84>)
 8023b42:	2235      	movs	r2, #53	; 0x35
 8023b44:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023b46:	4b14      	ldr	r3, [pc, #80]	; (8023b98 <MX_TIM12_Init+0x84>)
 8023b48:	2200      	movs	r2, #0
 8023b4a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023b4c:	4b12      	ldr	r3, [pc, #72]	; (8023b98 <MX_TIM12_Init+0x84>)
 8023b4e:	2200      	movs	r2, #0
 8023b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8023b52:	4811      	ldr	r0, [pc, #68]	; (8023b98 <MX_TIM12_Init+0x84>)
 8023b54:	f005 fbb3 	bl	80292be <HAL_TIM_PWM_Init>
 8023b58:	4603      	mov	r3, r0
 8023b5a:	2b00      	cmp	r3, #0
 8023b5c:	d001      	beq.n	8023b62 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8023b5e:	f000 f90f 	bl	8023d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023b62:	2360      	movs	r3, #96	; 0x60
 8023b64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023b66:	2300      	movs	r3, #0
 8023b68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023b6a:	2300      	movs	r3, #0
 8023b6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023b6e:	2300      	movs	r3, #0
 8023b70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023b72:	1d3b      	adds	r3, r7, #4
 8023b74:	2204      	movs	r2, #4
 8023b76:	4619      	mov	r1, r3
 8023b78:	4807      	ldr	r0, [pc, #28]	; (8023b98 <MX_TIM12_Init+0x84>)
 8023b7a:	f005 fddb 	bl	8029734 <HAL_TIM_PWM_ConfigChannel>
 8023b7e:	4603      	mov	r3, r0
 8023b80:	2b00      	cmp	r3, #0
 8023b82:	d001      	beq.n	8023b88 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8023b84:	f000 f8fc 	bl	8023d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8023b88:	4803      	ldr	r0, [pc, #12]	; (8023b98 <MX_TIM12_Init+0x84>)
 8023b8a:	f001 ff63 	bl	8025a54 <HAL_TIM_MspPostInit>

}
 8023b8e:	bf00      	nop
 8023b90:	3720      	adds	r7, #32
 8023b92:	46bd      	mov	sp, r7
 8023b94:	bd80      	pop	{r7, pc}
 8023b96:	bf00      	nop
 8023b98:	20000940 	.word	0x20000940
 8023b9c:	40001800 	.word	0x40001800

08023ba0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8023ba0:	b580      	push	{r7, lr}
 8023ba2:	b082      	sub	sp, #8
 8023ba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8023ba6:	2300      	movs	r3, #0
 8023ba8:	607b      	str	r3, [r7, #4]
 8023baa:	4b0c      	ldr	r3, [pc, #48]	; (8023bdc <MX_DMA_Init+0x3c>)
 8023bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023bae:	4a0b      	ldr	r2, [pc, #44]	; (8023bdc <MX_DMA_Init+0x3c>)
 8023bb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8023bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8023bb6:	4b09      	ldr	r3, [pc, #36]	; (8023bdc <MX_DMA_Init+0x3c>)
 8023bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023bbe:	607b      	str	r3, [r7, #4]
 8023bc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8023bc2:	2200      	movs	r2, #0
 8023bc4:	2100      	movs	r1, #0
 8023bc6:	2038      	movs	r0, #56	; 0x38
 8023bc8:	f003 f82f 	bl	8026c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8023bcc:	2038      	movs	r0, #56	; 0x38
 8023bce:	f003 f848 	bl	8026c62 <HAL_NVIC_EnableIRQ>

}
 8023bd2:	bf00      	nop
 8023bd4:	3708      	adds	r7, #8
 8023bd6:	46bd      	mov	sp, r7
 8023bd8:	bd80      	pop	{r7, pc}
 8023bda:	bf00      	nop
 8023bdc:	40023800 	.word	0x40023800

08023be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8023be0:	b580      	push	{r7, lr}
 8023be2:	b08a      	sub	sp, #40	; 0x28
 8023be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023be6:	f107 0314 	add.w	r3, r7, #20
 8023bea:	2200      	movs	r2, #0
 8023bec:	601a      	str	r2, [r3, #0]
 8023bee:	605a      	str	r2, [r3, #4]
 8023bf0:	609a      	str	r2, [r3, #8]
 8023bf2:	60da      	str	r2, [r3, #12]
 8023bf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8023bf6:	2300      	movs	r3, #0
 8023bf8:	613b      	str	r3, [r7, #16]
 8023bfa:	4b5c      	ldr	r3, [pc, #368]	; (8023d6c <MX_GPIO_Init+0x18c>)
 8023bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023bfe:	4a5b      	ldr	r2, [pc, #364]	; (8023d6c <MX_GPIO_Init+0x18c>)
 8023c00:	f043 0304 	orr.w	r3, r3, #4
 8023c04:	6313      	str	r3, [r2, #48]	; 0x30
 8023c06:	4b59      	ldr	r3, [pc, #356]	; (8023d6c <MX_GPIO_Init+0x18c>)
 8023c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c0a:	f003 0304 	and.w	r3, r3, #4
 8023c0e:	613b      	str	r3, [r7, #16]
 8023c10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8023c12:	2300      	movs	r3, #0
 8023c14:	60fb      	str	r3, [r7, #12]
 8023c16:	4b55      	ldr	r3, [pc, #340]	; (8023d6c <MX_GPIO_Init+0x18c>)
 8023c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c1a:	4a54      	ldr	r2, [pc, #336]	; (8023d6c <MX_GPIO_Init+0x18c>)
 8023c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023c20:	6313      	str	r3, [r2, #48]	; 0x30
 8023c22:	4b52      	ldr	r3, [pc, #328]	; (8023d6c <MX_GPIO_Init+0x18c>)
 8023c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023c2a:	60fb      	str	r3, [r7, #12]
 8023c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c2e:	2300      	movs	r3, #0
 8023c30:	60bb      	str	r3, [r7, #8]
 8023c32:	4b4e      	ldr	r3, [pc, #312]	; (8023d6c <MX_GPIO_Init+0x18c>)
 8023c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c36:	4a4d      	ldr	r2, [pc, #308]	; (8023d6c <MX_GPIO_Init+0x18c>)
 8023c38:	f043 0301 	orr.w	r3, r3, #1
 8023c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8023c3e:	4b4b      	ldr	r3, [pc, #300]	; (8023d6c <MX_GPIO_Init+0x18c>)
 8023c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c42:	f003 0301 	and.w	r3, r3, #1
 8023c46:	60bb      	str	r3, [r7, #8]
 8023c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8023c4a:	2300      	movs	r3, #0
 8023c4c:	607b      	str	r3, [r7, #4]
 8023c4e:	4b47      	ldr	r3, [pc, #284]	; (8023d6c <MX_GPIO_Init+0x18c>)
 8023c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c52:	4a46      	ldr	r2, [pc, #280]	; (8023d6c <MX_GPIO_Init+0x18c>)
 8023c54:	f043 0302 	orr.w	r3, r3, #2
 8023c58:	6313      	str	r3, [r2, #48]	; 0x30
 8023c5a:	4b44      	ldr	r3, [pc, #272]	; (8023d6c <MX_GPIO_Init+0x18c>)
 8023c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c5e:	f003 0302 	and.w	r3, r3, #2
 8023c62:	607b      	str	r3, [r7, #4]
 8023c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023c66:	2300      	movs	r3, #0
 8023c68:	603b      	str	r3, [r7, #0]
 8023c6a:	4b40      	ldr	r3, [pc, #256]	; (8023d6c <MX_GPIO_Init+0x18c>)
 8023c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c6e:	4a3f      	ldr	r2, [pc, #252]	; (8023d6c <MX_GPIO_Init+0x18c>)
 8023c70:	f043 0308 	orr.w	r3, r3, #8
 8023c74:	6313      	str	r3, [r2, #48]	; 0x30
 8023c76:	4b3d      	ldr	r3, [pc, #244]	; (8023d6c <MX_GPIO_Init+0x18c>)
 8023c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c7a:	f003 0308 	and.w	r3, r3, #8
 8023c7e:	603b      	str	r3, [r7, #0]
 8023c80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8023c82:	2200      	movs	r2, #0
 8023c84:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8023c88:	4839      	ldr	r0, [pc, #228]	; (8023d70 <MX_GPIO_Init+0x190>)
 8023c8a:	f003 fffb 	bl	8027c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8023c8e:	2201      	movs	r2, #1
 8023c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8023c94:	4837      	ldr	r0, [pc, #220]	; (8023d74 <MX_GPIO_Init+0x194>)
 8023c96:	f003 fff5 	bl	8027c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8023c9a:	2200      	movs	r2, #0
 8023c9c:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 8023ca0:	4835      	ldr	r0, [pc, #212]	; (8023d78 <MX_GPIO_Init+0x198>)
 8023ca2:	f003 ffef 	bl	8027c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8023ca6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8023caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023cac:	2301      	movs	r3, #1
 8023cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023cb0:	2300      	movs	r3, #0
 8023cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023cb4:	2300      	movs	r3, #0
 8023cb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023cb8:	f107 0314 	add.w	r3, r7, #20
 8023cbc:	4619      	mov	r1, r3
 8023cbe:	482c      	ldr	r0, [pc, #176]	; (8023d70 <MX_GPIO_Init+0x190>)
 8023cc0:	f003 fe2e 	bl	8027920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8023cc4:	2307      	movs	r3, #7
 8023cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023cc8:	2300      	movs	r3, #0
 8023cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023ccc:	2301      	movs	r3, #1
 8023cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023cd0:	f107 0314 	add.w	r3, r7, #20
 8023cd4:	4619      	mov	r1, r3
 8023cd6:	4827      	ldr	r0, [pc, #156]	; (8023d74 <MX_GPIO_Init+0x194>)
 8023cd8:	f003 fe22 	bl	8027920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023ce2:	2301      	movs	r3, #1
 8023ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023ce6:	2300      	movs	r3, #0
 8023ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023cea:	2300      	movs	r3, #0
 8023cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023cee:	f107 0314 	add.w	r3, r7, #20
 8023cf2:	4619      	mov	r1, r3
 8023cf4:	481f      	ldr	r0, [pc, #124]	; (8023d74 <MX_GPIO_Init+0x194>)
 8023cf6:	f003 fe13 	bl	8027920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 8023cfa:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8023cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023d00:	2300      	movs	r3, #0
 8023d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023d04:	2300      	movs	r3, #0
 8023d06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023d08:	f107 0314 	add.w	r3, r7, #20
 8023d0c:	4619      	mov	r1, r3
 8023d0e:	4819      	ldr	r0, [pc, #100]	; (8023d74 <MX_GPIO_Init+0x194>)
 8023d10:	f003 fe06 	bl	8027920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8023d14:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8023d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023d1a:	2301      	movs	r3, #1
 8023d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023d1e:	2300      	movs	r3, #0
 8023d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023d22:	2300      	movs	r3, #0
 8023d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023d26:	f107 0314 	add.w	r3, r7, #20
 8023d2a:	4619      	mov	r1, r3
 8023d2c:	4812      	ldr	r0, [pc, #72]	; (8023d78 <MX_GPIO_Init+0x198>)
 8023d2e:	f003 fdf7 	bl	8027920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023d38:	2300      	movs	r3, #0
 8023d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023d3c:	2301      	movs	r3, #1
 8023d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023d40:	f107 0314 	add.w	r3, r7, #20
 8023d44:	4619      	mov	r1, r3
 8023d46:	480c      	ldr	r0, [pc, #48]	; (8023d78 <MX_GPIO_Init+0x198>)
 8023d48:	f003 fdea 	bl	8027920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8023d4c:	2304      	movs	r3, #4
 8023d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023d50:	2300      	movs	r3, #0
 8023d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023d54:	2300      	movs	r3, #0
 8023d56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023d58:	f107 0314 	add.w	r3, r7, #20
 8023d5c:	4619      	mov	r1, r3
 8023d5e:	4807      	ldr	r0, [pc, #28]	; (8023d7c <MX_GPIO_Init+0x19c>)
 8023d60:	f003 fdde 	bl	8027920 <HAL_GPIO_Init>

}
 8023d64:	bf00      	nop
 8023d66:	3728      	adds	r7, #40	; 0x28
 8023d68:	46bd      	mov	sp, r7
 8023d6a:	bd80      	pop	{r7, pc}
 8023d6c:	40023800 	.word	0x40023800
 8023d70:	40020800 	.word	0x40020800
 8023d74:	40020400 	.word	0x40020400
 8023d78:	40020000 	.word	0x40020000
 8023d7c:	40020c00 	.word	0x40020c00

08023d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8023d80:	b480      	push	{r7}
 8023d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8023d84:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8023d86:	e7fe      	b.n	8023d86 <Error_Handler+0x6>

08023d88 <_ZN5Motor4InitEv>:
#include "motor.hpp"
#include "declare_extern.h"

void Motor::Init()
{
 8023d88:	b580      	push	{r7, lr}
 8023d8a:	b082      	sub	sp, #8
 8023d8c:	af00      	add	r7, sp, #0
 8023d8e:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8023d90:	2104      	movs	r1, #4
 8023d92:	4812      	ldr	r0, [pc, #72]	; (8023ddc <_ZN5Motor4InitEv+0x54>)
 8023d94:	f005 fabe 	bl	8029314 <HAL_TIM_PWM_Start>
 8023d98:	4603      	mov	r3, r0
 8023d9a:	2b00      	cmp	r3, #0
 8023d9c:	bf14      	ite	ne
 8023d9e:	2301      	movne	r3, #1
 8023da0:	2300      	moveq	r3, #0
 8023da2:	b2db      	uxtb	r3, r3
 8023da4:	2b00      	cmp	r3, #0
 8023da6:	d004      	beq.n	8023db2 <_ZN5Motor4InitEv+0x2a>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch2 = true; // MOTOR_R
 8023da8:	4b0d      	ldr	r3, [pc, #52]	; (8023de0 <_ZN5Motor4InitEv+0x58>)
 8023daa:	2201      	movs	r2, #1
 8023dac:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8023dae:	f7ff ffe7 	bl	8023d80 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8023db2:	210c      	movs	r1, #12
 8023db4:	4809      	ldr	r0, [pc, #36]	; (8023ddc <_ZN5Motor4InitEv+0x54>)
 8023db6:	f005 faad 	bl	8029314 <HAL_TIM_PWM_Start>
 8023dba:	4603      	mov	r3, r0
 8023dbc:	2b00      	cmp	r3, #0
 8023dbe:	bf14      	ite	ne
 8023dc0:	2301      	movne	r3, #1
 8023dc2:	2300      	moveq	r3, #0
 8023dc4:	b2db      	uxtb	r3, r3
 8023dc6:	2b00      	cmp	r3, #0
 8023dc8:	d004      	beq.n	8023dd4 <_ZN5Motor4InitEv+0x4c>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch4 = true; // MOTOR_L
 8023dca:	4b06      	ldr	r3, [pc, #24]	; (8023de4 <_ZN5Motor4InitEv+0x5c>)
 8023dcc:	2201      	movs	r2, #1
 8023dce:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8023dd0:	f7ff ffd6 	bl	8023d80 <Error_Handler>
    }
}
 8023dd4:	bf00      	nop
 8023dd6:	3708      	adds	r7, #8
 8023dd8:	46bd      	mov	sp, r7
 8023dda:	bd80      	pop	{r7, pc}
 8023ddc:	200008c0 	.word	0x200008c0
 8023de0:	200000b9 	.word	0x200000b9
 8023de4:	200000ba 	.word	0x200000ba

08023de8 <_ZN5Motor5DriveEff>:

void Motor::Drive(float translation_ratio, float rotation_ratio)
{
 8023de8:	b580      	push	{r7, lr}
 8023dea:	b08a      	sub	sp, #40	; 0x28
 8023dec:	af00      	add	r7, sp, #0
 8023dee:	60f8      	str	r0, [r7, #12]
 8023df0:	ed87 0a02 	vstr	s0, [r7, #8]
 8023df4:	edc7 0a01 	vstr	s1, [r7, #4]
#ifdef DEBUG_MODE
    g_translation_ratio = translation_ratio;
 8023df8:	4a89      	ldr	r2, [pc, #548]	; (8024020 <_ZN5Motor5DriveEff+0x238>)
 8023dfa:	68bb      	ldr	r3, [r7, #8]
 8023dfc:	6013      	str	r3, [r2, #0]
    g_rotation_ratio    = rotation_ratio;
 8023dfe:	4a89      	ldr	r2, [pc, #548]	; (8024024 <_ZN5Motor5DriveEff+0x23c>)
 8023e00:	687b      	ldr	r3, [r7, #4]
 8023e02:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(translation_ratio > LIMIT_TRANS_DUTY)       translation_ratio =  LIMIT_TRANS_DUTY;
 8023e04:	68b8      	ldr	r0, [r7, #8]
 8023e06:	f7fc fa7f 	bl	8020308 <__aeabi_f2d>
 8023e0a:	a381      	add	r3, pc, #516	; (adr r3, 8024010 <_ZN5Motor5DriveEff+0x228>)
 8023e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e10:	f7fc fd62 	bl	80208d8 <__aeabi_dcmpgt>
 8023e14:	4603      	mov	r3, r0
 8023e16:	2b00      	cmp	r3, #0
 8023e18:	d002      	beq.n	8023e20 <_ZN5Motor5DriveEff+0x38>
 8023e1a:	4b83      	ldr	r3, [pc, #524]	; (8024028 <_ZN5Motor5DriveEff+0x240>)
 8023e1c:	60bb      	str	r3, [r7, #8]
 8023e1e:	e00c      	b.n	8023e3a <_ZN5Motor5DriveEff+0x52>
    else if(translation_ratio < -LIMIT_TRANS_DUTY) translation_ratio = -LIMIT_TRANS_DUTY;
 8023e20:	68b8      	ldr	r0, [r7, #8]
 8023e22:	f7fc fa71 	bl	8020308 <__aeabi_f2d>
 8023e26:	a37c      	add	r3, pc, #496	; (adr r3, 8024018 <_ZN5Motor5DriveEff+0x230>)
 8023e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e2c:	f7fc fd36 	bl	802089c <__aeabi_dcmplt>
 8023e30:	4603      	mov	r3, r0
 8023e32:	2b00      	cmp	r3, #0
 8023e34:	d001      	beq.n	8023e3a <_ZN5Motor5DriveEff+0x52>
 8023e36:	4b7d      	ldr	r3, [pc, #500]	; (802402c <_ZN5Motor5DriveEff+0x244>)
 8023e38:	60bb      	str	r3, [r7, #8]

    float sum = translation_ratio + rotation_ratio;
 8023e3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8023e3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8023e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023e46:	edc7 7a06 	vstr	s15, [r7, #24]
    float excess = 0;
 8023e4a:	f04f 0300 	mov.w	r3, #0
 8023e4e:	627b      	str	r3, [r7, #36]	; 0x24

    if(sum > 1.0)       excess = sum - 1.0;
 8023e50:	edd7 7a06 	vldr	s15, [r7, #24]
 8023e54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e60:	dd08      	ble.n	8023e74 <_ZN5Motor5DriveEff+0x8c>
 8023e62:	edd7 7a06 	vldr	s15, [r7, #24]
 8023e66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023e6e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8023e72:	e010      	b.n	8023e96 <_ZN5Motor5DriveEff+0xae>
    else if(sum < -1.0) excess = sum + 1.0;
 8023e74:	edd7 7a06 	vldr	s15, [r7, #24]
 8023e78:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e84:	d507      	bpl.n	8023e96 <_ZN5Motor5DriveEff+0xae>
 8023e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8023e8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023e92:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    translation_ratio -= excess;
 8023e96:	ed97 7a02 	vldr	s14, [r7, #8]
 8023e9a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8023e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023ea2:	edc7 7a02 	vstr	s15, [r7, #8]

#ifdef DEBUG_MODE
    g_sum_raito = sum;
 8023ea6:	4a62      	ldr	r2, [pc, #392]	; (8024030 <_ZN5Motor5DriveEff+0x248>)
 8023ea8:	69bb      	ldr	r3, [r7, #24]
 8023eaa:	6013      	str	r3, [r2, #0]
    g_excess_ratio = excess;
 8023eac:	4a61      	ldr	r2, [pc, #388]	; (8024034 <_ZN5Motor5DriveEff+0x24c>)
 8023eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023eb0:	6013      	str	r3, [r2, #0]
    g_reduced_translation = translation_ratio;
 8023eb2:	4a61      	ldr	r2, [pc, #388]	; (8024038 <_ZN5Motor5DriveEff+0x250>)
 8023eb4:	68bb      	ldr	r3, [r7, #8]
 8023eb6:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float duty_l = translation_ratio - rotation_ratio;
 8023eb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8023ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8023ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023ec4:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_r = translation_ratio + rotation_ratio;
 8023ec8:	ed97 7a02 	vldr	s14, [r7, #8]
 8023ecc:	edd7 7a01 	vldr	s15, [r7, #4]
 8023ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023ed4:	edc7 7a07 	vstr	s15, [r7, #28]

    if(duty_l > 1.0)       duty_l =  1.0;
 8023ed8:	edd7 7a08 	vldr	s15, [r7, #32]
 8023edc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ee8:	dd03      	ble.n	8023ef2 <_ZN5Motor5DriveEff+0x10a>
 8023eea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023eee:	623b      	str	r3, [r7, #32]
 8023ef0:	e00a      	b.n	8023f08 <_ZN5Motor5DriveEff+0x120>
    else if(duty_l < -1.0) duty_l = -1.0;
 8023ef2:	edd7 7a08 	vldr	s15, [r7, #32]
 8023ef6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f02:	d501      	bpl.n	8023f08 <_ZN5Motor5DriveEff+0x120>
 8023f04:	4b4d      	ldr	r3, [pc, #308]	; (802403c <_ZN5Motor5DriveEff+0x254>)
 8023f06:	623b      	str	r3, [r7, #32]

    if(duty_r > 1.0)       duty_r =  1.0;
 8023f08:	edd7 7a07 	vldr	s15, [r7, #28]
 8023f0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f18:	dd03      	ble.n	8023f22 <_ZN5Motor5DriveEff+0x13a>
 8023f1a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023f1e:	61fb      	str	r3, [r7, #28]
 8023f20:	e00a      	b.n	8023f38 <_ZN5Motor5DriveEff+0x150>
    else if(duty_r < -1.0) duty_r = -1.0;
 8023f22:	edd7 7a07 	vldr	s15, [r7, #28]
 8023f26:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f32:	d501      	bpl.n	8023f38 <_ZN5Motor5DriveEff+0x150>
 8023f34:	4b41      	ldr	r3, [pc, #260]	; (802403c <_ZN5Motor5DriveEff+0x254>)
 8023f36:	61fb      	str	r3, [r7, #28]

#ifdef DEBUG_MODE
    g_duty_l = duty_l;
 8023f38:	4a41      	ldr	r2, [pc, #260]	; (8024040 <_ZN5Motor5DriveEff+0x258>)
 8023f3a:	6a3b      	ldr	r3, [r7, #32]
 8023f3c:	6013      	str	r3, [r2, #0]
    g_duty_r = duty_r;
 8023f3e:	4a41      	ldr	r2, [pc, #260]	; (8024044 <_ZN5Motor5DriveEff+0x25c>)
 8023f40:	69fb      	ldr	r3, [r7, #28]
 8023f42:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int16_t count_l = static_cast<int16_t>(COUNTER_PERIOD * duty_l);
 8023f44:	edd7 7a08 	vldr	s15, [r7, #32]
 8023f48:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8024048 <_ZN5Motor5DriveEff+0x260>
 8023f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023f54:	ee17 3a90 	vmov	r3, s15
 8023f58:	b21b      	sxth	r3, r3
 8023f5a:	82fb      	strh	r3, [r7, #22]
    int16_t count_r = static_cast<int16_t>(COUNTER_PERIOD * duty_r);
 8023f5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8023f60:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8024048 <_ZN5Motor5DriveEff+0x260>
 8023f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023f6c:	ee17 3a90 	vmov	r3, s15
 8023f70:	b21b      	sxth	r3, r3
 8023f72:	82bb      	strh	r3, [r7, #20]

    if(count_l < 0) { count_l *= -1; BACKWARD_L; }
 8023f74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023f78:	2b00      	cmp	r3, #0
 8023f7a:	da0d      	bge.n	8023f98 <_ZN5Motor5DriveEff+0x1b0>
 8023f7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023f80:	b29b      	uxth	r3, r3
 8023f82:	425b      	negs	r3, r3
 8023f84:	b29b      	uxth	r3, r3
 8023f86:	b21b      	sxth	r3, r3
 8023f88:	82fb      	strh	r3, [r7, #22]
 8023f8a:	2200      	movs	r2, #0
 8023f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023f90:	482e      	ldr	r0, [pc, #184]	; (802404c <_ZN5Motor5DriveEff+0x264>)
 8023f92:	f003 fe77 	bl	8027c84 <HAL_GPIO_WritePin>
 8023f96:	e009      	b.n	8023fac <_ZN5Motor5DriveEff+0x1c4>
    else if(count_l >= 0) FORWARD_L;
 8023f98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023f9c:	2b00      	cmp	r3, #0
 8023f9e:	db05      	blt.n	8023fac <_ZN5Motor5DriveEff+0x1c4>
 8023fa0:	2201      	movs	r2, #1
 8023fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023fa6:	4829      	ldr	r0, [pc, #164]	; (802404c <_ZN5Motor5DriveEff+0x264>)
 8023fa8:	f003 fe6c 	bl	8027c84 <HAL_GPIO_WritePin>

    if(count_r < 0) { count_r *= -1; BACKWARD_R; }
 8023fac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023fb0:	2b00      	cmp	r3, #0
 8023fb2:	da0d      	bge.n	8023fd0 <_ZN5Motor5DriveEff+0x1e8>
 8023fb4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023fb8:	b29b      	uxth	r3, r3
 8023fba:	425b      	negs	r3, r3
 8023fbc:	b29b      	uxth	r3, r3
 8023fbe:	b21b      	sxth	r3, r3
 8023fc0:	82bb      	strh	r3, [r7, #20]
 8023fc2:	2201      	movs	r2, #1
 8023fc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023fc8:	4820      	ldr	r0, [pc, #128]	; (802404c <_ZN5Motor5DriveEff+0x264>)
 8023fca:	f003 fe5b 	bl	8027c84 <HAL_GPIO_WritePin>
 8023fce:	e009      	b.n	8023fe4 <_ZN5Motor5DriveEff+0x1fc>
    else if(count_r >= 0) FORWARD_R;
 8023fd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023fd4:	2b00      	cmp	r3, #0
 8023fd6:	db05      	blt.n	8023fe4 <_ZN5Motor5DriveEff+0x1fc>
 8023fd8:	2200      	movs	r2, #0
 8023fda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023fde:	481b      	ldr	r0, [pc, #108]	; (802404c <_ZN5Motor5DriveEff+0x264>)
 8023fe0:	f003 fe50 	bl	8027c84 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, count_l);
 8023fe4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023fe8:	4b19      	ldr	r3, [pc, #100]	; (8024050 <_ZN5Motor5DriveEff+0x268>)
 8023fea:	681b      	ldr	r3, [r3, #0]
 8023fec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, count_r);
 8023fee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8023ff2:	4b17      	ldr	r3, [pc, #92]	; (8024050 <_ZN5Motor5DriveEff+0x268>)
 8023ff4:	681b      	ldr	r3, [r3, #0]
 8023ff6:	641a      	str	r2, [r3, #64]	; 0x40

#ifdef DEBUG_MODE
    g_motor_compare_l = count_l;
 8023ff8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023ffc:	4b15      	ldr	r3, [pc, #84]	; (8024054 <_ZN5Motor5DriveEff+0x26c>)
 8023ffe:	801a      	strh	r2, [r3, #0]
    g_motor_compare_r = count_r;
 8024000:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8024004:	4b14      	ldr	r3, [pc, #80]	; (8024058 <_ZN5Motor5DriveEff+0x270>)
 8024006:	801a      	strh	r2, [r3, #0]
#endif // DEBUG_MODE
 8024008:	bf00      	nop
 802400a:	3728      	adds	r7, #40	; 0x28
 802400c:	46bd      	mov	sp, r7
 802400e:	bd80      	pop	{r7, pc}
 8024010:	cccccccd 	.word	0xcccccccd
 8024014:	3feccccc 	.word	0x3feccccc
 8024018:	cccccccd 	.word	0xcccccccd
 802401c:	bfeccccc 	.word	0xbfeccccc
 8024020:	20000264 	.word	0x20000264
 8024024:	20000268 	.word	0x20000268
 8024028:	3f666666 	.word	0x3f666666
 802402c:	bf666666 	.word	0xbf666666
 8024030:	2000026c 	.word	0x2000026c
 8024034:	20000270 	.word	0x20000270
 8024038:	20000274 	.word	0x20000274
 802403c:	bf800000 	.word	0xbf800000
 8024040:	20000278 	.word	0x20000278
 8024044:	2000027c 	.word	0x2000027c
 8024048:	44832000 	.word	0x44832000
 802404c:	40020000 	.word	0x40020000
 8024050:	200008c0 	.word	0x200008c0
 8024054:	20000280 	.word	0x20000280
 8024058:	20000282 	.word	0x20000282

0802405c <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 802405c:	b580      	push	{r7, lr}
 802405e:	b084      	sub	sp, #16
 8024060:	af00      	add	r7, sp, #0
 8024062:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 8024064:	2300      	movs	r3, #0
 8024066:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 8024068:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802406c:	4821      	ldr	r0, [pc, #132]	; (80240f4 <_ZN12RotarySwitch5StateEv+0x98>)
 802406e:	f003 fdf1 	bl	8027c54 <HAL_GPIO_ReadPin>
 8024072:	4603      	mov	r3, r0
 8024074:	2b00      	cmp	r3, #0
 8024076:	bf0c      	ite	eq
 8024078:	2301      	moveq	r3, #1
 802407a:	2300      	movne	r3, #0
 802407c:	b2db      	uxtb	r3, r3
 802407e:	2b00      	cmp	r3, #0
 8024080:	d003      	beq.n	802408a <_ZN12RotarySwitch5StateEv+0x2e>
 8024082:	7bfb      	ldrb	r3, [r7, #15]
 8024084:	f043 0301 	orr.w	r3, r3, #1
 8024088:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 802408a:	2104      	movs	r1, #4
 802408c:	481a      	ldr	r0, [pc, #104]	; (80240f8 <_ZN12RotarySwitch5StateEv+0x9c>)
 802408e:	f003 fde1 	bl	8027c54 <HAL_GPIO_ReadPin>
 8024092:	4603      	mov	r3, r0
 8024094:	2b00      	cmp	r3, #0
 8024096:	bf0c      	ite	eq
 8024098:	2301      	moveq	r3, #1
 802409a:	2300      	movne	r3, #0
 802409c:	b2db      	uxtb	r3, r3
 802409e:	2b00      	cmp	r3, #0
 80240a0:	d003      	beq.n	80240aa <_ZN12RotarySwitch5StateEv+0x4e>
 80240a2:	7bfb      	ldrb	r3, [r7, #15]
 80240a4:	f043 0302 	orr.w	r3, r3, #2
 80240a8:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 80240aa:	2102      	movs	r1, #2
 80240ac:	4812      	ldr	r0, [pc, #72]	; (80240f8 <_ZN12RotarySwitch5StateEv+0x9c>)
 80240ae:	f003 fdd1 	bl	8027c54 <HAL_GPIO_ReadPin>
 80240b2:	4603      	mov	r3, r0
 80240b4:	2b00      	cmp	r3, #0
 80240b6:	bf0c      	ite	eq
 80240b8:	2301      	moveq	r3, #1
 80240ba:	2300      	movne	r3, #0
 80240bc:	b2db      	uxtb	r3, r3
 80240be:	2b00      	cmp	r3, #0
 80240c0:	d003      	beq.n	80240ca <_ZN12RotarySwitch5StateEv+0x6e>
 80240c2:	7bfb      	ldrb	r3, [r7, #15]
 80240c4:	f043 0304 	orr.w	r3, r3, #4
 80240c8:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 80240ca:	2101      	movs	r1, #1
 80240cc:	480a      	ldr	r0, [pc, #40]	; (80240f8 <_ZN12RotarySwitch5StateEv+0x9c>)
 80240ce:	f003 fdc1 	bl	8027c54 <HAL_GPIO_ReadPin>
 80240d2:	4603      	mov	r3, r0
 80240d4:	2b00      	cmp	r3, #0
 80240d6:	bf0c      	ite	eq
 80240d8:	2301      	moveq	r3, #1
 80240da:	2300      	movne	r3, #0
 80240dc:	b2db      	uxtb	r3, r3
 80240de:	2b00      	cmp	r3, #0
 80240e0:	d003      	beq.n	80240ea <_ZN12RotarySwitch5StateEv+0x8e>
 80240e2:	7bfb      	ldrb	r3, [r7, #15]
 80240e4:	f043 0308 	orr.w	r3, r3, #8
 80240e8:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 80240ea:	7bfb      	ldrb	r3, [r7, #15]
 80240ec:	4618      	mov	r0, r3
 80240ee:	3710      	adds	r7, #16
 80240f0:	46bd      	mov	sp, r7
 80240f2:	bd80      	pop	{r7, pc}
 80240f4:	40020000 	.word	0x40020000
 80240f8:	40020400 	.word	0x40020400

080240fc <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3LedP10LineSensorP9LineTraceP6LoggerP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>:
#include "run.hpp"
#include "declare_extern.h"

Run::Run(Encoder *encoder,
 80240fc:	b480      	push	{r7}
 80240fe:	b085      	sub	sp, #20
 8024100:	af00      	add	r7, sp, #0
 8024102:	60f8      	str	r0, [r7, #12]
 8024104:	60b9      	str	r1, [r7, #8]
 8024106:	607a      	str	r2, [r7, #4]
 8024108:	603b      	str	r3, [r7, #0]
           , run_mode_changed_internal_(false)
           , switch_interval_wait_timer_(0)
           , switch_interval_wait_enable_(true)
           , switch_interval_led_enable_(true)
           , mode_complete_(true)
           , store_log_failed_(true)
 802410a:	68fb      	ldr	r3, [r7, #12]
 802410c:	2200      	movs	r2, #0
 802410e:	701a      	strb	r2, [r3, #0]
 8024110:	68fb      	ldr	r3, [r7, #12]
 8024112:	2200      	movs	r2, #0
 8024114:	705a      	strb	r2, [r3, #1]
 8024116:	68fb      	ldr	r3, [r7, #12]
 8024118:	2200      	movs	r2, #0
 802411a:	709a      	strb	r2, [r3, #2]
 802411c:	68fb      	ldr	r3, [r7, #12]
 802411e:	2201      	movs	r2, #1
 8024120:	70da      	strb	r2, [r3, #3]
 8024122:	68fb      	ldr	r3, [r7, #12]
 8024124:	2201      	movs	r2, #1
 8024126:	711a      	strb	r2, [r3, #4]
 8024128:	68fb      	ldr	r3, [r7, #12]
 802412a:	2201      	movs	r2, #1
 802412c:	715a      	strb	r2, [r3, #5]
 802412e:	68fb      	ldr	r3, [r7, #12]
 8024130:	2201      	movs	r2, #1
 8024132:	719a      	strb	r2, [r3, #6]
{
    encoder_          = encoder;
 8024134:	68fb      	ldr	r3, [r7, #12]
 8024136:	68ba      	ldr	r2, [r7, #8]
 8024138:	609a      	str	r2, [r3, #8]
    flash_            = flash;
 802413a:	68fb      	ldr	r3, [r7, #12]
 802413c:	687a      	ldr	r2, [r7, #4]
 802413e:	60da      	str	r2, [r3, #12]
    iim_42652_        = iim_42652;
 8024140:	68fb      	ldr	r3, [r7, #12]
 8024142:	683a      	ldr	r2, [r7, #0]
 8024144:	611a      	str	r2, [r3, #16]
    led_              = led;
 8024146:	68fb      	ldr	r3, [r7, #12]
 8024148:	69ba      	ldr	r2, [r7, #24]
 802414a:	615a      	str	r2, [r3, #20]
    line_sensor_      = line_sensor;
 802414c:	68fb      	ldr	r3, [r7, #12]
 802414e:	69fa      	ldr	r2, [r7, #28]
 8024150:	619a      	str	r2, [r3, #24]
    line_trace_       = line_trace;
 8024152:	68fb      	ldr	r3, [r7, #12]
 8024154:	6a3a      	ldr	r2, [r7, #32]
 8024156:	61da      	str	r2, [r3, #28]
    logger_           = logger;
 8024158:	68fb      	ldr	r3, [r7, #12]
 802415a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802415c:	621a      	str	r2, [r3, #32]
    motor_            = motor;
 802415e:	68fb      	ldr	r3, [r7, #12]
 8024160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024162:	625a      	str	r2, [r3, #36]	; 0x24
    rotary_switch_    = rotary_switch;
 8024164:	68fb      	ldr	r3, [r7, #12]
 8024166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024168:	629a      	str	r2, [r3, #40]	; 0x28
    side_sensor_      = side_sensor;
 802416a:	68fb      	ldr	r3, [r7, #12]
 802416c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802416e:	62da      	str	r2, [r3, #44]	; 0x2c
    velocity_control_ = velocity_control;
 8024170:	68fb      	ldr	r3, [r7, #12]
 8024172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024174:	631a      	str	r2, [r3, #48]	; 0x30
}
 8024176:	68fb      	ldr	r3, [r7, #12]
 8024178:	4618      	mov	r0, r3
 802417a:	3714      	adds	r7, #20
 802417c:	46bd      	mov	sp, r7
 802417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024182:	4770      	bx	lr

08024184 <_ZN3Run4InitEv>:

void Run::Init()
{
 8024184:	b580      	push	{r7, lr}
 8024186:	b084      	sub	sp, #16
 8024188:	af00      	add	r7, sp, #0
 802418a:	6078      	str	r0, [r7, #4]
    line_sensor_->Init();
 802418c:	687b      	ldr	r3, [r7, #4]
 802418e:	699b      	ldr	r3, [r3, #24]
 8024190:	4618      	mov	r0, r3
 8024192:	f7fd fcaf 	bl	8021af4 <_ZN10LineSensor4InitEv>
    encoder_->Init();
 8024196:	687b      	ldr	r3, [r7, #4]
 8024198:	689b      	ldr	r3, [r3, #8]
 802419a:	4618      	mov	r0, r3
 802419c:	f7fc fdd2 	bl	8020d44 <_ZN7Encoder4InitEv>
    motor_->Init();
 80241a0:	687b      	ldr	r3, [r7, #4]
 80241a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80241a4:	4618      	mov	r0, r3
 80241a6:	f7ff fdef 	bl	8023d88 <_ZN5Motor4InitEv>
    uint8_t imu_init = iim_42652_->Init();
 80241aa:	687b      	ldr	r3, [r7, #4]
 80241ac:	691b      	ldr	r3, [r3, #16]
 80241ae:	4618      	mov	r0, r3
 80241b0:	f7fd f8a4 	bl	80212fc <_ZN8Iim426524InitEv>
 80241b4:	4603      	mov	r3, r0
 80241b6:	73bb      	strb	r3, [r7, #14]

    bool flash_erase = true;
 80241b8:	2301      	movs	r3, #1
 80241ba:	73fb      	strb	r3, [r7, #15]
    uint8_t switch_state = rotary_switch_->State();
 80241bc:	687b      	ldr	r3, [r7, #4]
 80241be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80241c0:	4618      	mov	r0, r3
 80241c2:	f7ff ff4b 	bl	802405c <_ZN12RotarySwitch5StateEv>
 80241c6:	4603      	mov	r3, r0
 80241c8:	737b      	strb	r3, [r7, #13]
    if(switch_state == 0x0E)
 80241ca:	7b7b      	ldrb	r3, [r7, #13]
 80241cc:	2b0e      	cmp	r3, #14
 80241ce:	d113      	bne.n	80241f8 <_ZN3Run4InitEv+0x74>
    {
        led_->Blink(3, 'R', 'X');
 80241d0:	687b      	ldr	r3, [r7, #4]
 80241d2:	6958      	ldr	r0, [r3, #20]
 80241d4:	2358      	movs	r3, #88	; 0x58
 80241d6:	2252      	movs	r2, #82	; 0x52
 80241d8:	2103      	movs	r1, #3
 80241da:	f7fd fb7f 	bl	80218dc <_ZN3Led5BlinkEhcc>
        if(!flash_->Clear()) flash_erase = false;
 80241de:	687b      	ldr	r3, [r7, #4]
 80241e0:	68db      	ldr	r3, [r3, #12]
 80241e2:	4618      	mov	r0, r3
 80241e4:	f7fc feb0 	bl	8020f48 <_ZN5Flash5ClearEv>
 80241e8:	4603      	mov	r3, r0
 80241ea:	f083 0301 	eor.w	r3, r3, #1
 80241ee:	b2db      	uxtb	r3, r3
 80241f0:	2b00      	cmp	r3, #0
 80241f2:	d001      	beq.n	80241f8 <_ZN3Run4InitEv+0x74>
 80241f4:	2300      	movs	r3, #0
 80241f6:	73fb      	strb	r3, [r7, #15]
    }

#ifdef DEBUG_MODE
    g_imu_init = imu_init;
 80241f8:	4a19      	ldr	r2, [pc, #100]	; (8024260 <_ZN3Run4InitEv+0xdc>)
 80241fa:	7bbb      	ldrb	r3, [r7, #14]
 80241fc:	7013      	strb	r3, [r2, #0]
    g_flash_erase = flash_erase;
 80241fe:	7bfa      	ldrb	r2, [r7, #15]
 8024200:	4b18      	ldr	r3, [pc, #96]	; (8024264 <_ZN3Run4InitEv+0xe0>)
 8024202:	701a      	strb	r2, [r3, #0]
    g_switch_state = switch_state;
 8024204:	4a18      	ldr	r2, [pc, #96]	; (8024268 <_ZN3Run4InitEv+0xe4>)
 8024206:	7b7b      	ldrb	r3, [r7, #13]
 8024208:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(flash_erase && imu_init == 0x09)
 802420a:	7bfb      	ldrb	r3, [r7, #15]
 802420c:	2b00      	cmp	r3, #0
 802420e:	d012      	beq.n	8024236 <_ZN3Run4InitEv+0xb2>
 8024210:	7bbb      	ldrb	r3, [r7, #14]
 8024212:	2b09      	cmp	r3, #9
 8024214:	d10f      	bne.n	8024236 <_ZN3Run4InitEv+0xb2>
    {
        led_->Rainbow(1);
 8024216:	687b      	ldr	r3, [r7, #4]
 8024218:	695b      	ldr	r3, [r3, #20]
 802421a:	2101      	movs	r1, #1
 802421c:	4618      	mov	r0, r3
 802421e:	f7fd fb8a 	bl	8021936 <_ZN3Led7RainbowEh>
        HAL_TIM_Base_Start_IT(&htim2);
 8024222:	4812      	ldr	r0, [pc, #72]	; (802426c <_ZN3Run4InitEv+0xe8>)
 8024224:	f005 f827 	bl	8029276 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 8024228:	4811      	ldr	r0, [pc, #68]	; (8024270 <_ZN3Run4InitEv+0xec>)
 802422a:	f005 f824 	bl	8029276 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim7);
 802422e:	4811      	ldr	r0, [pc, #68]	; (8024274 <_ZN3Run4InitEv+0xf0>)
 8024230:	f005 f821 	bl	8029276 <HAL_TIM_Base_Start_IT>
    }
    else if(flash_erase) led_->ColorOrder('Y');
    else led_->ColorOrder('R');
}
 8024234:	e00f      	b.n	8024256 <_ZN3Run4InitEv+0xd2>
    else if(flash_erase) led_->ColorOrder('Y');
 8024236:	7bfb      	ldrb	r3, [r7, #15]
 8024238:	2b00      	cmp	r3, #0
 802423a:	d006      	beq.n	802424a <_ZN3Run4InitEv+0xc6>
 802423c:	687b      	ldr	r3, [r7, #4]
 802423e:	695b      	ldr	r3, [r3, #20]
 8024240:	2159      	movs	r1, #89	; 0x59
 8024242:	4618      	mov	r0, r3
 8024244:	f7fd fa6e 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 8024248:	e005      	b.n	8024256 <_ZN3Run4InitEv+0xd2>
    else led_->ColorOrder('R');
 802424a:	687b      	ldr	r3, [r7, #4]
 802424c:	695b      	ldr	r3, [r3, #20]
 802424e:	2152      	movs	r1, #82	; 0x52
 8024250:	4618      	mov	r0, r3
 8024252:	f7fd fa67 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 8024256:	bf00      	nop
 8024258:	3710      	adds	r7, #16
 802425a:	46bd      	mov	sp, r7
 802425c:	bd80      	pop	{r7, pc}
 802425e:	bf00      	nop
 8024260:	2000024f 	.word	0x2000024f
 8024264:	200002c9 	.word	0x200002c9
 8024268:	200002c8 	.word	0x200002c8
 802426c:	20000900 	.word	0x20000900
 8024270:	20000880 	.word	0x20000880
 8024274:	20000980 	.word	0x20000980

08024278 <_ZN3Run6Timer7Ev>:

void Run::Timer7()
{
 8024278:	b580      	push	{r7, lr}
 802427a:	b082      	sub	sp, #8
 802427c:	af00      	add	r7, sp, #0
 802427e:	6078      	str	r0, [r7, #4]
    line_sensor_->StoreConsecutiveBuff();
 8024280:	687b      	ldr	r3, [r7, #4]
 8024282:	699b      	ldr	r3, [r3, #24]
 8024284:	4618      	mov	r0, r3
 8024286:	f7fd fc6f 	bl	8021b68 <_ZN10LineSensor20StoreConsecutiveBuffEv>
}
 802428a:	bf00      	nop
 802428c:	3708      	adds	r7, #8
 802428e:	46bd      	mov	sp, r7
 8024290:	bd80      	pop	{r7, pc}
	...

08024294 <_ZN3Run6Timer2Ev>:

void Run::Timer2()
{
 8024294:	b580      	push	{r7, lr}
 8024296:	b084      	sub	sp, #16
 8024298:	af00      	add	r7, sp, #0
 802429a:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = rotary_switch_->State();
 802429c:	687b      	ldr	r3, [r7, #4]
 802429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80242a0:	4618      	mov	r0, r3
 80242a2:	f7ff fedb 	bl	802405c <_ZN12RotarySwitch5StateEv>
 80242a6:	4603      	mov	r3, r0
 80242a8:	73fb      	strb	r3, [r7, #15]
    static uint8_t pre_switch_state = switch_state;
 80242aa:	4b2c      	ldr	r3, [pc, #176]	; (802435c <_ZN3Run6Timer2Ev+0xc8>)
 80242ac:	781b      	ldrb	r3, [r3, #0]
 80242ae:	f3bf 8f5b 	dmb	ish
 80242b2:	b2db      	uxtb	r3, r3
 80242b4:	f003 0301 	and.w	r3, r3, #1
 80242b8:	2b00      	cmp	r3, #0
 80242ba:	bf0c      	ite	eq
 80242bc:	2301      	moveq	r3, #1
 80242be:	2300      	movne	r3, #0
 80242c0:	b2db      	uxtb	r3, r3
 80242c2:	2b00      	cmp	r3, #0
 80242c4:	d010      	beq.n	80242e8 <_ZN3Run6Timer2Ev+0x54>
 80242c6:	4825      	ldr	r0, [pc, #148]	; (802435c <_ZN3Run6Timer2Ev+0xc8>)
 80242c8:	f005 ffcc 	bl	802a264 <__cxa_guard_acquire>
 80242cc:	4603      	mov	r3, r0
 80242ce:	2b00      	cmp	r3, #0
 80242d0:	bf14      	ite	ne
 80242d2:	2301      	movne	r3, #1
 80242d4:	2300      	moveq	r3, #0
 80242d6:	b2db      	uxtb	r3, r3
 80242d8:	2b00      	cmp	r3, #0
 80242da:	d005      	beq.n	80242e8 <_ZN3Run6Timer2Ev+0x54>
 80242dc:	4a20      	ldr	r2, [pc, #128]	; (8024360 <_ZN3Run6Timer2Ev+0xcc>)
 80242de:	7bfb      	ldrb	r3, [r7, #15]
 80242e0:	7013      	strb	r3, [r2, #0]
 80242e2:	481e      	ldr	r0, [pc, #120]	; (802435c <_ZN3Run6Timer2Ev+0xc8>)
 80242e4:	f005 ffca 	bl	802a27c <__cxa_guard_release>
    static bool interval_enable = true;

#ifdef DEBUG_MODE
    g_switch_state = switch_state;
 80242e8:	4a1e      	ldr	r2, [pc, #120]	; (8024364 <_ZN3Run6Timer2Ev+0xd0>)
 80242ea:	7bfb      	ldrb	r3, [r7, #15]
 80242ec:	7013      	strb	r3, [r2, #0]
    g_interval_enable = interval_enable;
 80242ee:	4b1e      	ldr	r3, [pc, #120]	; (8024368 <_ZN3Run6Timer2Ev+0xd4>)
 80242f0:	781a      	ldrb	r2, [r3, #0]
 80242f2:	4b1e      	ldr	r3, [pc, #120]	; (802436c <_ZN3Run6Timer2Ev+0xd8>)
 80242f4:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

    if(switch_state != pre_switch_state)
 80242f6:	4b1a      	ldr	r3, [pc, #104]	; (8024360 <_ZN3Run6Timer2Ev+0xcc>)
 80242f8:	781b      	ldrb	r3, [r3, #0]
 80242fa:	7bfa      	ldrb	r2, [r7, #15]
 80242fc:	429a      	cmp	r2, r3
 80242fe:	d00f      	beq.n	8024320 <_ZN3Run6Timer2Ev+0x8c>
    {
        SetRunMode(STANDBY);
 8024300:	2100      	movs	r1, #0
 8024302:	6878      	ldr	r0, [r7, #4]
 8024304:	f000 f896 	bl	8024434 <_ZN3Run10SetRunModeEh>
        WhenSwitchChange();
 8024308:	6878      	ldr	r0, [r7, #4]
 802430a:	f000 f8bb 	bl	8024484 <_ZN3Run16WhenSwitchChangeEv>
        led_->ResetInterrupt();
 802430e:	687b      	ldr	r3, [r7, #4]
 8024310:	695b      	ldr	r3, [r3, #20]
 8024312:	4618      	mov	r0, r3
 8024314:	f7fd fb9d 	bl	8021a52 <_ZN3Led14ResetInterruptEv>
        interval_enable = true;
 8024318:	4b13      	ldr	r3, [pc, #76]	; (8024368 <_ZN3Run6Timer2Ev+0xd4>)
 802431a:	2201      	movs	r2, #1
 802431c:	701a      	strb	r2, [r3, #0]
 802431e:	e016      	b.n	802434e <_ZN3Run6Timer2Ev+0xba>
    }
    else if(interval_enable)
 8024320:	4b11      	ldr	r3, [pc, #68]	; (8024368 <_ZN3Run6Timer2Ev+0xd4>)
 8024322:	781b      	ldrb	r3, [r3, #0]
 8024324:	2b00      	cmp	r3, #0
 8024326:	d00d      	beq.n	8024344 <_ZN3Run6Timer2Ev+0xb0>
    {
        SetRunMode(STANDBY);
 8024328:	2100      	movs	r1, #0
 802432a:	6878      	ldr	r0, [r7, #4]
 802432c:	f000 f882 	bl	8024434 <_ZN3Run10SetRunModeEh>
        interval_enable = SwitchChangeInterval(switch_state);
 8024330:	7bfb      	ldrb	r3, [r7, #15]
 8024332:	4619      	mov	r1, r3
 8024334:	6878      	ldr	r0, [r7, #4]
 8024336:	f000 f8bb 	bl	80244b0 <_ZN3Run20SwitchChangeIntervalEh>
 802433a:	4603      	mov	r3, r0
 802433c:	461a      	mov	r2, r3
 802433e:	4b0a      	ldr	r3, [pc, #40]	; (8024368 <_ZN3Run6Timer2Ev+0xd4>)
 8024340:	701a      	strb	r2, [r3, #0]
 8024342:	e004      	b.n	802434e <_ZN3Run6Timer2Ev+0xba>
    }
    else UpdateRunMode(switch_state);
 8024344:	7bfb      	ldrb	r3, [r7, #15]
 8024346:	4619      	mov	r1, r3
 8024348:	6878      	ldr	r0, [r7, #4]
 802434a:	f000 f811 	bl	8024370 <_ZN3Run13UpdateRunModeEh>

    pre_switch_state = switch_state;
 802434e:	4a04      	ldr	r2, [pc, #16]	; (8024360 <_ZN3Run6Timer2Ev+0xcc>)
 8024350:	7bfb      	ldrb	r3, [r7, #15]
 8024352:	7013      	strb	r3, [r2, #0]
}
 8024354:	bf00      	nop
 8024356:	3710      	adds	r7, #16
 8024358:	46bd      	mov	sp, r7
 802435a:	bd80      	pop	{r7, pc}
 802435c:	200002cc 	.word	0x200002cc
 8024360:	200002ca 	.word	0x200002ca
 8024364:	200002c8 	.word	0x200002c8
 8024368:	20000011 	.word	0x20000011
 802436c:	20000010 	.word	0x20000010

08024370 <_ZN3Run13UpdateRunModeEh>:

void Run::UpdateRunMode(uint8_t switch_state)
{
 8024370:	b580      	push	{r7, lr}
 8024372:	b082      	sub	sp, #8
 8024374:	af00      	add	r7, sp, #0
 8024376:	6078      	str	r0, [r7, #4]
 8024378:	460b      	mov	r3, r1
 802437a:	70fb      	strb	r3, [r7, #3]
    if(run_mode_changed_internal_) return;
 802437c:	687b      	ldr	r3, [r7, #4]
 802437e:	785b      	ldrb	r3, [r3, #1]
 8024380:	2b00      	cmp	r3, #0
 8024382:	d153      	bne.n	802442c <_ZN3Run13UpdateRunModeEh+0xbc>

    switch(switch_state)
 8024384:	78fb      	ldrb	r3, [r7, #3]
 8024386:	3b01      	subs	r3, #1
 8024388:	2b0e      	cmp	r3, #14
 802438a:	d849      	bhi.n	8024420 <_ZN3Run13UpdateRunModeEh+0xb0>
 802438c:	a201      	add	r2, pc, #4	; (adr r2, 8024394 <_ZN3Run13UpdateRunModeEh+0x24>)
 802438e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024392:	bf00      	nop
 8024394:	080243f9 	.word	0x080243f9
 8024398:	08024403 	.word	0x08024403
 802439c:	08024421 	.word	0x08024421
 80243a0:	08024421 	.word	0x08024421
 80243a4:	08024421 	.word	0x08024421
 80243a8:	08024421 	.word	0x08024421
 80243ac:	0802440d 	.word	0x0802440d
 80243b0:	08024417 	.word	0x08024417
 80243b4:	08024421 	.word	0x08024421
 80243b8:	08024421 	.word	0x08024421
 80243bc:	080243d1 	.word	0x080243d1
 80243c0:	080243db 	.word	0x080243db
 80243c4:	080243e5 	.word	0x080243e5
 80243c8:	08024421 	.word	0x08024421
 80243cc:	080243ef 	.word	0x080243ef
    {
#ifdef DEBUG_MODE
        case 0x0B: SetRunMode(VELOCITY_CONTROL_DEBUG); break;
 80243d0:	210b      	movs	r1, #11
 80243d2:	6878      	ldr	r0, [r7, #4]
 80243d4:	f000 f82e 	bl	8024434 <_ZN3Run10SetRunModeEh>
 80243d8:	e029      	b.n	802442e <_ZN3Run13UpdateRunModeEh+0xbe>
        case 0x0C: SetRunMode(LINE_TRACE_DEBUG); break;
 80243da:	210c      	movs	r1, #12
 80243dc:	6878      	ldr	r0, [r7, #4]
 80243de:	f000 f829 	bl	8024434 <_ZN3Run10SetRunModeEh>
 80243e2:	e024      	b.n	802442e <_ZN3Run13UpdateRunModeEh+0xbe>
#endif // DEBUG_MODE

        case 0x0D: SetRunMode(DEV); break;
 80243e4:	210d      	movs	r1, #13
 80243e6:	6878      	ldr	r0, [r7, #4]
 80243e8:	f000 f824 	bl	8024434 <_ZN3Run10SetRunModeEh>
 80243ec:	e01f      	b.n	802442e <_ZN3Run13UpdateRunModeEh+0xbe>
        case 0x0F: SetRunMode(READY); break;
 80243ee:	210f      	movs	r1, #15
 80243f0:	6878      	ldr	r0, [r7, #4]
 80243f2:	f000 f81f 	bl	8024434 <_ZN3Run10SetRunModeEh>
 80243f6:	e01a      	b.n	802442e <_ZN3Run13UpdateRunModeEh+0xbe>
        case 0x01: SetRunMode(FIRST_RUN); break;
 80243f8:	2101      	movs	r1, #1
 80243fa:	6878      	ldr	r0, [r7, #4]
 80243fc:	f000 f81a 	bl	8024434 <_ZN3Run10SetRunModeEh>
 8024400:	e015      	b.n	802442e <_ZN3Run13UpdateRunModeEh+0xbe>
        case 0x02: SetRunMode(SECOND_RUN); break;
 8024402:	2102      	movs	r1, #2
 8024404:	6878      	ldr	r0, [r7, #4]
 8024406:	f000 f815 	bl	8024434 <_ZN3Run10SetRunModeEh>
 802440a:	e010      	b.n	802442e <_ZN3Run13UpdateRunModeEh+0xbe>
        case 0x07: SetRunMode(VELOCITY_CONTROL); break;
 802440c:	2107      	movs	r1, #7
 802440e:	6878      	ldr	r0, [r7, #4]
 8024410:	f000 f810 	bl	8024434 <_ZN3Run10SetRunModeEh>
 8024414:	e00b      	b.n	802442e <_ZN3Run13UpdateRunModeEh+0xbe>
        case 0x08: SetRunMode(LINE_TRACE); break;
 8024416:	2108      	movs	r1, #8
 8024418:	6878      	ldr	r0, [r7, #4]
 802441a:	f000 f80b 	bl	8024434 <_ZN3Run10SetRunModeEh>
 802441e:	e006      	b.n	802442e <_ZN3Run13UpdateRunModeEh+0xbe>
        default:   SetRunMode(STANDBY); break;
 8024420:	2100      	movs	r1, #0
 8024422:	6878      	ldr	r0, [r7, #4]
 8024424:	f000 f806 	bl	8024434 <_ZN3Run10SetRunModeEh>
 8024428:	bf00      	nop
 802442a:	e000      	b.n	802442e <_ZN3Run13UpdateRunModeEh+0xbe>
    if(run_mode_changed_internal_) return;
 802442c:	bf00      	nop
    }
}
 802442e:	3708      	adds	r7, #8
 8024430:	46bd      	mov	sp, r7
 8024432:	bd80      	pop	{r7, pc}

08024434 <_ZN3Run10SetRunModeEh>:

void Run::SetRunMode(uint8_t mode)
{
 8024434:	b480      	push	{r7}
 8024436:	b083      	sub	sp, #12
 8024438:	af00      	add	r7, sp, #0
 802443a:	6078      	str	r0, [r7, #4]
 802443c:	460b      	mov	r3, r1
 802443e:	70fb      	strb	r3, [r7, #3]
    run_mode_ = mode;
 8024440:	687b      	ldr	r3, [r7, #4]
 8024442:	78fa      	ldrb	r2, [r7, #3]
 8024444:	701a      	strb	r2, [r3, #0]
}
 8024446:	bf00      	nop
 8024448:	370c      	adds	r7, #12
 802444a:	46bd      	mov	sp, r7
 802444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024450:	4770      	bx	lr
	...

08024454 <_ZN3Run25SetRunModeChangedInternalEb>:

void Run::SetRunModeChangedInternal(bool boolean)
{
 8024454:	b480      	push	{r7}
 8024456:	b083      	sub	sp, #12
 8024458:	af00      	add	r7, sp, #0
 802445a:	6078      	str	r0, [r7, #4]
 802445c:	460b      	mov	r3, r1
 802445e:	70fb      	strb	r3, [r7, #3]
    run_mode_changed_internal_ = boolean;
 8024460:	687b      	ldr	r3, [r7, #4]
 8024462:	78fa      	ldrb	r2, [r7, #3]
 8024464:	705a      	strb	r2, [r3, #1]

#ifdef DEBUG_MODE
    g_run_mode_changed_internal_cnt++;
 8024466:	4b06      	ldr	r3, [pc, #24]	; (8024480 <_ZN3Run25SetRunModeChangedInternalEb+0x2c>)
 8024468:	781b      	ldrb	r3, [r3, #0]
 802446a:	3301      	adds	r3, #1
 802446c:	b2da      	uxtb	r2, r3
 802446e:	4b04      	ldr	r3, [pc, #16]	; (8024480 <_ZN3Run25SetRunModeChangedInternalEb+0x2c>)
 8024470:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE
}
 8024472:	bf00      	nop
 8024474:	370c      	adds	r7, #12
 8024476:	46bd      	mov	sp, r7
 8024478:	f85d 7b04 	ldr.w	r7, [sp], #4
 802447c:	4770      	bx	lr
 802447e:	bf00      	nop
 8024480:	200000b6 	.word	0x200000b6

08024484 <_ZN3Run16WhenSwitchChangeEv>:

void Run::WhenSwitchChange()
{
 8024484:	b580      	push	{r7, lr}
 8024486:	b082      	sub	sp, #8
 8024488:	af00      	add	r7, sp, #0
 802448a:	6078      	str	r0, [r7, #4]
    SetRunModeChangedInternal(false);
 802448c:	2100      	movs	r1, #0
 802448e:	6878      	ldr	r0, [r7, #4]
 8024490:	f7ff ffe0 	bl	8024454 <_ZN3Run25SetRunModeChangedInternalEb>
    switch_interval_led_enable_ = true;
 8024494:	687b      	ldr	r3, [r7, #4]
 8024496:	2201      	movs	r2, #1
 8024498:	711a      	strb	r2, [r3, #4]
    switch_interval_wait_enable_ = true;
 802449a:	687b      	ldr	r3, [r7, #4]
 802449c:	2201      	movs	r2, #1
 802449e:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_timer_ = 0;
 80244a0:	687b      	ldr	r3, [r7, #4]
 80244a2:	2200      	movs	r2, #0
 80244a4:	709a      	strb	r2, [r3, #2]
}
 80244a6:	bf00      	nop
 80244a8:	3708      	adds	r7, #8
 80244aa:	46bd      	mov	sp, r7
 80244ac:	bd80      	pop	{r7, pc}
	...

080244b0 <_ZN3Run20SwitchChangeIntervalEh>:

bool Run::SwitchChangeInterval(uint8_t switch_state)
{
 80244b0:	b580      	push	{r7, lr}
 80244b2:	b084      	sub	sp, #16
 80244b4:	af00      	add	r7, sp, #0
 80244b6:	6078      	str	r0, [r7, #4]
 80244b8:	460b      	mov	r3, r1
 80244ba:	70fb      	strb	r3, [r7, #3]
    uint8_t wait_timer = switch_interval_wait_timer_;
 80244bc:	687b      	ldr	r3, [r7, #4]
 80244be:	789b      	ldrb	r3, [r3, #2]
 80244c0:	73fb      	strb	r3, [r7, #15]
    bool wait_enable = switch_interval_wait_enable_;
 80244c2:	687b      	ldr	r3, [r7, #4]
 80244c4:	78db      	ldrb	r3, [r3, #3]
 80244c6:	73bb      	strb	r3, [r7, #14]
    bool led_enable = switch_interval_led_enable_;
 80244c8:	687b      	ldr	r3, [r7, #4]
 80244ca:	791b      	ldrb	r3, [r3, #4]
 80244cc:	737b      	strb	r3, [r7, #13]
    bool interval_continue = true;
 80244ce:	2301      	movs	r3, #1
 80244d0:	733b      	strb	r3, [r7, #12]

    if(led_enable)
 80244d2:	7b7b      	ldrb	r3, [r7, #13]
 80244d4:	2b00      	cmp	r3, #0
 80244d6:	f000 8080 	beq.w	80245da <_ZN3Run20SwitchChangeIntervalEh+0x12a>
    {
        switch(switch_state)
 80244da:	78fb      	ldrb	r3, [r7, #3]
 80244dc:	3b01      	subs	r3, #1
 80244de:	2b0e      	cmp	r3, #14
 80244e0:	d870      	bhi.n	80245c4 <_ZN3Run20SwitchChangeIntervalEh+0x114>
 80244e2:	a201      	add	r2, pc, #4	; (adr r2, 80244e8 <_ZN3Run20SwitchChangeIntervalEh+0x38>)
 80244e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80244e8:	08024575 	.word	0x08024575
 80244ec:	08024589 	.word	0x08024589
 80244f0:	080245c5 	.word	0x080245c5
 80244f4:	080245c5 	.word	0x080245c5
 80244f8:	080245c5 	.word	0x080245c5
 80244fc:	080245c5 	.word	0x080245c5
 8024500:	0802459d 	.word	0x0802459d
 8024504:	080245b1 	.word	0x080245b1
 8024508:	080245c5 	.word	0x080245c5
 802450c:	080245c5 	.word	0x080245c5
 8024510:	08024525 	.word	0x08024525
 8024514:	08024539 	.word	0x08024539
 8024518:	0802454d 	.word	0x0802454d
 802451c:	080245c5 	.word	0x080245c5
 8024520:	08024561 	.word	0x08024561
        {
#ifdef DEBUG_MODE
            case 0x0B: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 8024524:	687b      	ldr	r3, [r7, #4]
 8024526:	6958      	ldr	r0, [r3, #20]
 8024528:	2342      	movs	r3, #66	; 0x42
 802452a:	2247      	movs	r2, #71	; 0x47
 802452c:	2103      	movs	r1, #3
 802452e:	f7fd fa46 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024532:	4603      	mov	r3, r0
 8024534:	737b      	strb	r3, [r7, #13]
 8024536:	e061      	b.n	80245fc <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x0C: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 8024538:	687b      	ldr	r3, [r7, #4]
 802453a:	6958      	ldr	r0, [r3, #20]
 802453c:	2359      	movs	r3, #89	; 0x59
 802453e:	2247      	movs	r2, #71	; 0x47
 8024540:	2103      	movs	r1, #3
 8024542:	f7fd fa3c 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024546:	4603      	mov	r3, r0
 8024548:	737b      	strb	r3, [r7, #13]
 802454a:	e057      	b.n	80245fc <_ZN3Run20SwitchChangeIntervalEh+0x14c>
#endif // DEBUG_MODE

            case 0x0D: led_enable = led_->BlinkInterrupt(3, 'G', 'X'); break;
 802454c:	687b      	ldr	r3, [r7, #4]
 802454e:	6958      	ldr	r0, [r3, #20]
 8024550:	2358      	movs	r3, #88	; 0x58
 8024552:	2247      	movs	r2, #71	; 0x47
 8024554:	2103      	movs	r1, #3
 8024556:	f7fd fa32 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 802455a:	4603      	mov	r3, r0
 802455c:	737b      	strb	r3, [r7, #13]
 802455e:	e04d      	b.n	80245fc <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x0F: led_enable = led_->BlinkInterrupt(3, 'Y', 'X'); break;
 8024560:	687b      	ldr	r3, [r7, #4]
 8024562:	6958      	ldr	r0, [r3, #20]
 8024564:	2358      	movs	r3, #88	; 0x58
 8024566:	2259      	movs	r2, #89	; 0x59
 8024568:	2103      	movs	r1, #3
 802456a:	f7fd fa28 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 802456e:	4603      	mov	r3, r0
 8024570:	737b      	strb	r3, [r7, #13]
 8024572:	e043      	b.n	80245fc <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x01: led_enable = led_->BlinkInterrupt(3, 'B', 'X'); break;
 8024574:	687b      	ldr	r3, [r7, #4]
 8024576:	6958      	ldr	r0, [r3, #20]
 8024578:	2358      	movs	r3, #88	; 0x58
 802457a:	2242      	movs	r2, #66	; 0x42
 802457c:	2103      	movs	r1, #3
 802457e:	f7fd fa1e 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024582:	4603      	mov	r3, r0
 8024584:	737b      	strb	r3, [r7, #13]
 8024586:	e039      	b.n	80245fc <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x02: led_enable = led_->BlinkInterrupt(3, 'M', 'X'); break;
 8024588:	687b      	ldr	r3, [r7, #4]
 802458a:	6958      	ldr	r0, [r3, #20]
 802458c:	2358      	movs	r3, #88	; 0x58
 802458e:	224d      	movs	r2, #77	; 0x4d
 8024590:	2103      	movs	r1, #3
 8024592:	f7fd fa14 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024596:	4603      	mov	r3, r0
 8024598:	737b      	strb	r3, [r7, #13]
 802459a:	e02f      	b.n	80245fc <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x07: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 802459c:	687b      	ldr	r3, [r7, #4]
 802459e:	6958      	ldr	r0, [r3, #20]
 80245a0:	2342      	movs	r3, #66	; 0x42
 80245a2:	2247      	movs	r2, #71	; 0x47
 80245a4:	2103      	movs	r1, #3
 80245a6:	f7fd fa0a 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 80245aa:	4603      	mov	r3, r0
 80245ac:	737b      	strb	r3, [r7, #13]
 80245ae:	e025      	b.n	80245fc <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x08: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 80245b0:	687b      	ldr	r3, [r7, #4]
 80245b2:	6958      	ldr	r0, [r3, #20]
 80245b4:	2359      	movs	r3, #89	; 0x59
 80245b6:	2247      	movs	r2, #71	; 0x47
 80245b8:	2103      	movs	r1, #3
 80245ba:	f7fd fa00 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 80245be:	4603      	mov	r3, r0
 80245c0:	737b      	strb	r3, [r7, #13]
 80245c2:	e01b      	b.n	80245fc <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            default:   led_enable = led_->BlinkInterrupt(3, 'X', 'W'); break;
 80245c4:	687b      	ldr	r3, [r7, #4]
 80245c6:	6958      	ldr	r0, [r3, #20]
 80245c8:	2357      	movs	r3, #87	; 0x57
 80245ca:	2258      	movs	r2, #88	; 0x58
 80245cc:	2103      	movs	r1, #3
 80245ce:	f7fd f9f6 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 80245d2:	4603      	mov	r3, r0
 80245d4:	737b      	strb	r3, [r7, #13]
 80245d6:	bf00      	nop
 80245d8:	e010      	b.n	80245fc <_ZN3Run20SwitchChangeIntervalEh+0x14c>
        }
    }
    else if(wait_enable)
 80245da:	7bbb      	ldrb	r3, [r7, #14]
 80245dc:	2b00      	cmp	r3, #0
 80245de:	d00b      	beq.n	80245f8 <_ZN3Run20SwitchChangeIntervalEh+0x148>
    {
        if(wait_timer < SWITCH_INTERVAL_WAIT_TIME)
 80245e0:	7bfb      	ldrb	r3, [r7, #15]
 80245e2:	2bc7      	cmp	r3, #199	; 0xc7
 80245e4:	d805      	bhi.n	80245f2 <_ZN3Run20SwitchChangeIntervalEh+0x142>
        {
            wait_timer++;
 80245e6:	7bfb      	ldrb	r3, [r7, #15]
 80245e8:	3301      	adds	r3, #1
 80245ea:	73fb      	strb	r3, [r7, #15]
            wait_enable = true;
 80245ec:	2301      	movs	r3, #1
 80245ee:	73bb      	strb	r3, [r7, #14]
 80245f0:	e004      	b.n	80245fc <_ZN3Run20SwitchChangeIntervalEh+0x14c>
        }
        else wait_enable = false;
 80245f2:	2300      	movs	r3, #0
 80245f4:	73bb      	strb	r3, [r7, #14]
 80245f6:	e001      	b.n	80245fc <_ZN3Run20SwitchChangeIntervalEh+0x14c>
    }
    else interval_continue = false;
 80245f8:	2300      	movs	r3, #0
 80245fa:	733b      	strb	r3, [r7, #12]
    
    switch_interval_led_enable_ = led_enable;
 80245fc:	687b      	ldr	r3, [r7, #4]
 80245fe:	7b7a      	ldrb	r2, [r7, #13]
 8024600:	711a      	strb	r2, [r3, #4]
    switch_interval_wait_enable_ = wait_enable;
 8024602:	687b      	ldr	r3, [r7, #4]
 8024604:	7bba      	ldrb	r2, [r7, #14]
 8024606:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_timer_ = wait_timer;
 8024608:	687b      	ldr	r3, [r7, #4]
 802460a:	7bfa      	ldrb	r2, [r7, #15]
 802460c:	709a      	strb	r2, [r3, #2]

    return interval_continue;
 802460e:	7b3b      	ldrb	r3, [r7, #12]
}
 8024610:	4618      	mov	r0, r3
 8024612:	3710      	adds	r7, #16
 8024614:	46bd      	mov	sp, r7
 8024616:	bd80      	pop	{r7, pc}

08024618 <_ZN3Run13EmergencyStopEv>:

bool Run::EmergencyStop()
{
 8024618:	b580      	push	{r7, lr}
 802461a:	b084      	sub	sp, #16
 802461c:	af00      	add	r7, sp, #0
 802461e:	6078      	str	r0, [r7, #4]
    static uint8_t emergency_timer = 0;
    bool line_emergency = line_sensor_->GetEmergencyStopFlag();
 8024620:	687b      	ldr	r3, [r7, #4]
 8024622:	699b      	ldr	r3, [r3, #24]
 8024624:	4618      	mov	r0, r3
 8024626:	f7fd fce5 	bl	8021ff4 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 802462a:	4603      	mov	r3, r0
 802462c:	73fb      	strb	r3, [r7, #15]

    if(emergency_timer >= EMERGENCY_STOP_TIME)
 802462e:	4b0e      	ldr	r3, [pc, #56]	; (8024668 <_ZN3Run13EmergencyStopEv+0x50>)
 8024630:	781b      	ldrb	r3, [r3, #0]
 8024632:	2b04      	cmp	r3, #4
 8024634:	d905      	bls.n	8024642 <_ZN3Run13EmergencyStopEv+0x2a>
    {
        SetRunMode(EMERGENCY);
 8024636:	210e      	movs	r1, #14
 8024638:	6878      	ldr	r0, [r7, #4]
 802463a:	f7ff fefb 	bl	8024434 <_ZN3Run10SetRunModeEh>
        return true;
 802463e:	2301      	movs	r3, #1
 8024640:	e00d      	b.n	802465e <_ZN3Run13EmergencyStopEv+0x46>
    }
    else if(line_emergency) emergency_timer++;
 8024642:	7bfb      	ldrb	r3, [r7, #15]
 8024644:	2b00      	cmp	r3, #0
 8024646:	d006      	beq.n	8024656 <_ZN3Run13EmergencyStopEv+0x3e>
 8024648:	4b07      	ldr	r3, [pc, #28]	; (8024668 <_ZN3Run13EmergencyStopEv+0x50>)
 802464a:	781b      	ldrb	r3, [r3, #0]
 802464c:	3301      	adds	r3, #1
 802464e:	b2da      	uxtb	r2, r3
 8024650:	4b05      	ldr	r3, [pc, #20]	; (8024668 <_ZN3Run13EmergencyStopEv+0x50>)
 8024652:	701a      	strb	r2, [r3, #0]
 8024654:	e002      	b.n	802465c <_ZN3Run13EmergencyStopEv+0x44>
    else emergency_timer = 0;
 8024656:	4b04      	ldr	r3, [pc, #16]	; (8024668 <_ZN3Run13EmergencyStopEv+0x50>)
 8024658:	2200      	movs	r2, #0
 802465a:	701a      	strb	r2, [r3, #0]

    return false;
 802465c:	2300      	movs	r3, #0
}
 802465e:	4618      	mov	r0, r3
 8024660:	3710      	adds	r7, #16
 8024662:	46bd      	mov	sp, r7
 8024664:	bd80      	pop	{r7, pc}
 8024666:	bf00      	nop
 8024668:	200002d0 	.word	0x200002d0

0802466c <_ZN3Run7RunModeEv>:

void Run::RunMode()
{
 802466c:	b580      	push	{r7, lr}
 802466e:	b082      	sub	sp, #8
 8024670:	af00      	add	r7, sp, #0
 8024672:	6078      	str	r0, [r7, #4]
    switch(run_mode_)
 8024674:	687b      	ldr	r3, [r7, #4]
 8024676:	781b      	ldrb	r3, [r3, #0]
 8024678:	2b0c      	cmp	r3, #12
 802467a:	d025      	beq.n	80246c8 <_ZN3Run7RunModeEv+0x5c>
 802467c:	2b0c      	cmp	r3, #12
 802467e:	dc0f      	bgt.n	80246a0 <_ZN3Run7RunModeEv+0x34>
 8024680:	2b02      	cmp	r3, #2
 8024682:	d041      	beq.n	8024708 <_ZN3Run7RunModeEv+0x9c>
 8024684:	2b02      	cmp	r3, #2
 8024686:	dc04      	bgt.n	8024692 <_ZN3Run7RunModeEv+0x26>
 8024688:	2b00      	cmp	r3, #0
 802468a:	d029      	beq.n	80246e0 <_ZN3Run7RunModeEv+0x74>
 802468c:	2b01      	cmp	r3, #1
 802468e:	d033      	beq.n	80246f8 <_ZN3Run7RunModeEv+0x8c>
 8024690:	e04a      	b.n	8024728 <_ZN3Run7RunModeEv+0xbc>
 8024692:	2b08      	cmp	r3, #8
 8024694:	d044      	beq.n	8024720 <_ZN3Run7RunModeEv+0xb4>
 8024696:	2b0b      	cmp	r3, #11
 8024698:	d012      	beq.n	80246c0 <_ZN3Run7RunModeEv+0x54>
 802469a:	2b07      	cmp	r3, #7
 802469c:	d03c      	beq.n	8024718 <_ZN3Run7RunModeEv+0xac>
 802469e:	e043      	b.n	8024728 <_ZN3Run7RunModeEv+0xbc>
 80246a0:	2b0f      	cmp	r3, #15
 80246a2:	d019      	beq.n	80246d8 <_ZN3Run7RunModeEv+0x6c>
 80246a4:	2b0f      	cmp	r3, #15
 80246a6:	dc04      	bgt.n	80246b2 <_ZN3Run7RunModeEv+0x46>
 80246a8:	2b0d      	cmp	r3, #13
 80246aa:	d01d      	beq.n	80246e8 <_ZN3Run7RunModeEv+0x7c>
 80246ac:	2b0e      	cmp	r3, #14
 80246ae:	d00f      	beq.n	80246d0 <_ZN3Run7RunModeEv+0x64>
 80246b0:	e03a      	b.n	8024728 <_ZN3Run7RunModeEv+0xbc>
 80246b2:	2b20      	cmp	r3, #32
 80246b4:	d02c      	beq.n	8024710 <_ZN3Run7RunModeEv+0xa4>
 80246b6:	2bd0      	cmp	r3, #208	; 0xd0
 80246b8:	d01a      	beq.n	80246f0 <_ZN3Run7RunModeEv+0x84>
 80246ba:	2b10      	cmp	r3, #16
 80246bc:	d020      	beq.n	8024700 <_ZN3Run7RunModeEv+0x94>
 80246be:	e033      	b.n	8024728 <_ZN3Run7RunModeEv+0xbc>
    {
#ifdef DEBUG_MODE
        case VELOCITY_CONTROL_DEBUG: ModeVelocityControlDebug(); break;
 80246c0:	6878      	ldr	r0, [r7, #4]
 80246c2:	f000 fae5 	bl	8024c90 <_ZN3Run24ModeVelocityControlDebugEv>
 80246c6:	e033      	b.n	8024730 <_ZN3Run7RunModeEv+0xc4>
        case LINE_TRACE_DEBUG: ModeLineTraceDebug(); break;
 80246c8:	6878      	ldr	r0, [r7, #4]
 80246ca:	f000 fb0b 	bl	8024ce4 <_ZN3Run18ModeLineTraceDebugEv>
 80246ce:	e02f      	b.n	8024730 <_ZN3Run7RunModeEv+0xc4>
#endif // DEBUG_MODE

        case EMERGENCY: ModeEmergency(); break;
 80246d0:	6878      	ldr	r0, [r7, #4]
 80246d2:	f000 f835 	bl	8024740 <_ZN3Run13ModeEmergencyEv>
 80246d6:	e02b      	b.n	8024730 <_ZN3Run7RunModeEv+0xc4>
        case READY: ModeReady(); break;
 80246d8:	6878      	ldr	r0, [r7, #4]
 80246da:	f000 f84b 	bl	8024774 <_ZN3Run9ModeReadyEv>
 80246de:	e027      	b.n	8024730 <_ZN3Run7RunModeEv+0xc4>
        case STANDBY: ModeStandby(); break;
 80246e0:	6878      	ldr	r0, [r7, #4]
 80246e2:	f000 f869 	bl	80247b8 <_ZN3Run11ModeStandbyEv>
 80246e6:	e023      	b.n	8024730 <_ZN3Run7RunModeEv+0xc4>
        case DEV: ModeDevelopment(); break;
 80246e8:	6878      	ldr	r0, [r7, #4]
 80246ea:	f000 f879 	bl	80247e0 <_ZN3Run15ModeDevelopmentEv>
 80246ee:	e01f      	b.n	8024730 <_ZN3Run7RunModeEv+0xc4>
        case DEV_GOAL: ModeDevGoal(); break;
 80246f0:	6878      	ldr	r0, [r7, #4]
 80246f2:	f000 f931 	bl	8024958 <_ZN3Run11ModeDevGoalEv>
 80246f6:	e01b      	b.n	8024730 <_ZN3Run7RunModeEv+0xc4>
        case FIRST_RUN: ModeFirstRun(); break;
 80246f8:	6878      	ldr	r0, [r7, #4]
 80246fa:	f000 f947 	bl	802498c <_ZN3Run12ModeFirstRunEv>
 80246fe:	e017      	b.n	8024730 <_ZN3Run7RunModeEv+0xc4>
        case FIRST_GOAL: ModeFirstGoal(); break;
 8024700:	6878      	ldr	r0, [r7, #4]
 8024702:	f000 f9b5 	bl	8024a70 <_ZN3Run13ModeFirstGoalEv>
 8024706:	e013      	b.n	8024730 <_ZN3Run7RunModeEv+0xc4>
        case SECOND_RUN: ModeSecondRun(); break;
 8024708:	6878      	ldr	r0, [r7, #4]
 802470a:	f000 f9d5 	bl	8024ab8 <_ZN3Run13ModeSecondRunEv>
 802470e:	e00f      	b.n	8024730 <_ZN3Run7RunModeEv+0xc4>
        case SECOND_GOAL: ModeSecondGoal(); break;
 8024710:	6878      	ldr	r0, [r7, #4]
 8024712:	f000 fa25 	bl	8024b60 <_ZN3Run14ModeSecondGoalEv>
 8024716:	e00b      	b.n	8024730 <_ZN3Run7RunModeEv+0xc4>
        case VELOCITY_CONTROL: ModeVelocityControl(); break;
 8024718:	6878      	ldr	r0, [r7, #4]
 802471a:	f000 fa3b 	bl	8024b94 <_ZN3Run19ModeVelocityControlEv>
 802471e:	e007      	b.n	8024730 <_ZN3Run7RunModeEv+0xc4>
        case LINE_TRACE: ModeLineTrace(); break;
 8024720:	6878      	ldr	r0, [r7, #4]
 8024722:	f000 fa7e 	bl	8024c22 <_ZN3Run13ModeLineTraceEv>
 8024726:	e003      	b.n	8024730 <_ZN3Run7RunModeEv+0xc4>
        default: ModeStandby(); break;
 8024728:	6878      	ldr	r0, [r7, #4]
 802472a:	f000 f845 	bl	80247b8 <_ZN3Run11ModeStandbyEv>
 802472e:	bf00      	nop
    }

    mode_complete_ = true;
 8024730:	687b      	ldr	r3, [r7, #4]
 8024732:	2201      	movs	r2, #1
 8024734:	715a      	strb	r2, [r3, #5]
}
 8024736:	bf00      	nop
 8024738:	3708      	adds	r7, #8
 802473a:	46bd      	mov	sp, r7
 802473c:	bd80      	pop	{r7, pc}
	...

08024740 <_ZN3Run13ModeEmergencyEv>:

void Run::ModeEmergency()
{
 8024740:	b580      	push	{r7, lr}
 8024742:	b082      	sub	sp, #8
 8024744:	af00      	add	r7, sp, #0
 8024746:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024748:	687b      	ldr	r3, [r7, #4]
 802474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802474c:	eddf 0a08 	vldr	s1, [pc, #32]	; 8024770 <_ZN3Run13ModeEmergencyEv+0x30>
 8024750:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8024770 <_ZN3Run13ModeEmergencyEv+0x30>
 8024754:	4618      	mov	r0, r3
 8024756:	f7ff fb47 	bl	8023de8 <_ZN5Motor5DriveEff>
    led_->ColorOrder('G');
 802475a:	687b      	ldr	r3, [r7, #4]
 802475c:	695b      	ldr	r3, [r3, #20]
 802475e:	2147      	movs	r1, #71	; 0x47
 8024760:	4618      	mov	r0, r3
 8024762:	f7fc ffdf 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 8024766:	bf00      	nop
 8024768:	3708      	adds	r7, #8
 802476a:	46bd      	mov	sp, r7
 802476c:	bd80      	pop	{r7, pc}
 802476e:	bf00      	nop
 8024770:	00000000 	.word	0x00000000

08024774 <_ZN3Run9ModeReadyEv>:

void Run::ModeReady()
{
 8024774:	b580      	push	{r7, lr}
 8024776:	b082      	sub	sp, #8
 8024778:	af00      	add	r7, sp, #0
 802477a:	6078      	str	r0, [r7, #4]
    line_sensor_->Update();
 802477c:	687b      	ldr	r3, [r7, #4]
 802477e:	699b      	ldr	r3, [r3, #24]
 8024780:	4618      	mov	r0, r3
 8024782:	f7fd faf9 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    if(line_sensor_->CheckCalibration()) led_->ColorOrder('X');
 8024786:	687b      	ldr	r3, [r7, #4]
 8024788:	699b      	ldr	r3, [r3, #24]
 802478a:	4618      	mov	r0, r3
 802478c:	f7fd fc40 	bl	8022010 <_ZN10LineSensor16CheckCalibrationEv>
 8024790:	4603      	mov	r3, r0
 8024792:	2b00      	cmp	r3, #0
 8024794:	d006      	beq.n	80247a4 <_ZN3Run9ModeReadyEv+0x30>
 8024796:	687b      	ldr	r3, [r7, #4]
 8024798:	695b      	ldr	r3, [r3, #20]
 802479a:	2158      	movs	r1, #88	; 0x58
 802479c:	4618      	mov	r0, r3
 802479e:	f7fc ffc1 	bl	8021724 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('R');
}
 80247a2:	e005      	b.n	80247b0 <_ZN3Run9ModeReadyEv+0x3c>
    else led_->ColorOrder('R');
 80247a4:	687b      	ldr	r3, [r7, #4]
 80247a6:	695b      	ldr	r3, [r3, #20]
 80247a8:	2152      	movs	r1, #82	; 0x52
 80247aa:	4618      	mov	r0, r3
 80247ac:	f7fc ffba 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 80247b0:	bf00      	nop
 80247b2:	3708      	adds	r7, #8
 80247b4:	46bd      	mov	sp, r7
 80247b6:	bd80      	pop	{r7, pc}

080247b8 <_ZN3Run11ModeStandbyEv>:

void Run::ModeStandby()
{
 80247b8:	b580      	push	{r7, lr}
 80247ba:	b082      	sub	sp, #8
 80247bc:	af00      	add	r7, sp, #0
 80247be:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 80247c0:	687b      	ldr	r3, [r7, #4]
 80247c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80247c4:	eddf 0a05 	vldr	s1, [pc, #20]	; 80247dc <_ZN3Run11ModeStandbyEv+0x24>
 80247c8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80247dc <_ZN3Run11ModeStandbyEv+0x24>
 80247cc:	4618      	mov	r0, r3
 80247ce:	f7ff fb0b 	bl	8023de8 <_ZN5Motor5DriveEff>
}
 80247d2:	bf00      	nop
 80247d4:	3708      	adds	r7, #8
 80247d6:	46bd      	mov	sp, r7
 80247d8:	bd80      	pop	{r7, pc}
 80247da:	bf00      	nop
 80247dc:	00000000 	.word	0x00000000

080247e0 <_ZN3Run15ModeDevelopmentEv>:

void Run::ModeDevelopment()
{
 80247e0:	b580      	push	{r7, lr}
 80247e2:	b086      	sub	sp, #24
 80247e4:	af00      	add	r7, sp, #0
 80247e6:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 80247e8:	687b      	ldr	r3, [r7, #4]
 80247ea:	689b      	ldr	r3, [r3, #8]
 80247ec:	4618      	mov	r0, r3
 80247ee:	f7fc fadb 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 80247f2:	687b      	ldr	r3, [r7, #4]
 80247f4:	699b      	ldr	r3, [r3, #24]
 80247f6:	4618      	mov	r0, r3
 80247f8:	f7fd fabe 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 80247fc:	687b      	ldr	r3, [r7, #4]
 80247fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024800:	4618      	mov	r0, r3
 8024802:	f000 fbe7 	bl	8024fd4 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(DevEmergencyStop()) return;
 8024806:	6878      	ldr	r0, [r7, #4]
 8024808:	f000 f832 	bl	8024870 <_ZN3Run16DevEmergencyStopEv>
 802480c:	4603      	mov	r3, r0
 802480e:	2b00      	cmp	r3, #0
 8024810:	d129      	bne.n	8024866 <_ZN3Run15ModeDevelopmentEv+0x86>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024812:	687b      	ldr	r3, [r7, #4]
 8024814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024816:	4618      	mov	r0, r3
 8024818:	f000 fdab 	bl	8025372 <_ZN10SideSensor18GetGoalMarkerCountEv>
 802481c:	4603      	mov	r3, r0
 802481e:	75fb      	strb	r3, [r7, #23]
    float target_velocity = DevTargetVelocity(goal_count);
 8024820:	7dfb      	ldrb	r3, [r7, #23]
 8024822:	4619      	mov	r1, r3
 8024824:	6878      	ldr	r0, [r7, #4]
 8024826:	f000 f851 	bl	80248cc <_ZN3Run17DevTargetVelocityEh>
 802482a:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 802482e:	687b      	ldr	r3, [r7, #4]
 8024830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024832:	ed97 0a04 	vldr	s0, [r7, #16]
 8024836:	4618      	mov	r0, r3
 8024838:	f001 fa63 	bl	8025d02 <_ZN15VelocityControl16DeterminePidGainEf>
 802483c:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024840:	687b      	ldr	r3, [r7, #4]
 8024842:	69db      	ldr	r3, [r3, #28]
 8024844:	ed97 0a04 	vldr	s0, [r7, #16]
 8024848:	4618      	mov	r0, r3
 802484a:	f7fd fc6f 	bl	802212c <_ZN9LineTrace16DeterminePidGainEf>
 802484e:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024852:	687b      	ldr	r3, [r7, #4]
 8024854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024856:	edd7 0a02 	vldr	s1, [r7, #8]
 802485a:	ed97 0a03 	vldr	s0, [r7, #12]
 802485e:	4618      	mov	r0, r3
 8024860:	f7ff fac2 	bl	8023de8 <_ZN5Motor5DriveEff>
 8024864:	e000      	b.n	8024868 <_ZN3Run15ModeDevelopmentEv+0x88>
    if(DevEmergencyStop()) return;
 8024866:	bf00      	nop
}
 8024868:	3718      	adds	r7, #24
 802486a:	46bd      	mov	sp, r7
 802486c:	bd80      	pop	{r7, pc}
	...

08024870 <_ZN3Run16DevEmergencyStopEv>:

bool Run::DevEmergencyStop()
{
 8024870:	b580      	push	{r7, lr}
 8024872:	b084      	sub	sp, #16
 8024874:	af00      	add	r7, sp, #0
 8024876:	6078      	str	r0, [r7, #4]
    static uint8_t emergency_timer = 0;
    bool line_emergency = line_sensor_->GetEmergencyStopFlag();
 8024878:	687b      	ldr	r3, [r7, #4]
 802487a:	699b      	ldr	r3, [r3, #24]
 802487c:	4618      	mov	r0, r3
 802487e:	f7fd fbb9 	bl	8021ff4 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 8024882:	4603      	mov	r3, r0
 8024884:	73fb      	strb	r3, [r7, #15]

    if(line_emergency)
 8024886:	7bfb      	ldrb	r3, [r7, #15]
 8024888:	2b00      	cmp	r3, #0
 802488a:	d014      	beq.n	80248b6 <_ZN3Run16DevEmergencyStopEv+0x46>
    {
        if(emergency_timer >= EMERGENCY_STOP_TIME)
 802488c:	4b0e      	ldr	r3, [pc, #56]	; (80248c8 <_ZN3Run16DevEmergencyStopEv+0x58>)
 802488e:	781b      	ldrb	r3, [r3, #0]
 8024890:	2b04      	cmp	r3, #4
 8024892:	d909      	bls.n	80248a8 <_ZN3Run16DevEmergencyStopEv+0x38>
        {
            SetRunMode(EMERGENCY);
 8024894:	210e      	movs	r1, #14
 8024896:	6878      	ldr	r0, [r7, #4]
 8024898:	f7ff fdcc 	bl	8024434 <_ZN3Run10SetRunModeEh>
            SetRunModeChangedInternal(true);
 802489c:	2101      	movs	r1, #1
 802489e:	6878      	ldr	r0, [r7, #4]
 80248a0:	f7ff fdd8 	bl	8024454 <_ZN3Run25SetRunModeChangedInternalEb>
            return true;
 80248a4:	2301      	movs	r3, #1
 80248a6:	e00a      	b.n	80248be <_ZN3Run16DevEmergencyStopEv+0x4e>
        }
        else emergency_timer++;
 80248a8:	4b07      	ldr	r3, [pc, #28]	; (80248c8 <_ZN3Run16DevEmergencyStopEv+0x58>)
 80248aa:	781b      	ldrb	r3, [r3, #0]
 80248ac:	3301      	adds	r3, #1
 80248ae:	b2da      	uxtb	r2, r3
 80248b0:	4b05      	ldr	r3, [pc, #20]	; (80248c8 <_ZN3Run16DevEmergencyStopEv+0x58>)
 80248b2:	701a      	strb	r2, [r3, #0]
 80248b4:	e002      	b.n	80248bc <_ZN3Run16DevEmergencyStopEv+0x4c>
    }
    else emergency_timer = 0;
 80248b6:	4b04      	ldr	r3, [pc, #16]	; (80248c8 <_ZN3Run16DevEmergencyStopEv+0x58>)
 80248b8:	2200      	movs	r2, #0
 80248ba:	701a      	strb	r2, [r3, #0]

    return false;
 80248bc:	2300      	movs	r3, #0
}
 80248be:	4618      	mov	r0, r3
 80248c0:	3710      	adds	r7, #16
 80248c2:	46bd      	mov	sp, r7
 80248c4:	bd80      	pop	{r7, pc}
 80248c6:	bf00      	nop
 80248c8:	200002d1 	.word	0x200002d1

080248cc <_ZN3Run17DevTargetVelocityEh>:

float Run::DevTargetVelocity(uint8_t goal_count)
{
 80248cc:	b580      	push	{r7, lr}
 80248ce:	b084      	sub	sp, #16
 80248d0:	af00      	add	r7, sp, #0
 80248d2:	6078      	str	r0, [r7, #4]
 80248d4:	460b      	mov	r3, r1
 80248d6:	70fb      	strb	r3, [r7, #3]
    static uint16_t slow_timer = 0;
    static uint16_t stop_timer = 0;
    float target_velocity;

    switch(goal_count)
 80248d8:	78fb      	ldrb	r3, [r7, #3]
 80248da:	3300      	adds	r3, #0
 80248dc:	2b01      	cmp	r3, #1
 80248de:	d802      	bhi.n	80248e6 <_ZN3Run17DevTargetVelocityEh+0x1a>
    {
        case 0:
        case 1: target_velocity = EXPLORE_VELOCITY; break;
 80248e0:	4b1a      	ldr	r3, [pc, #104]	; (802494c <_ZN3Run17DevTargetVelocityEh+0x80>)
 80248e2:	60fb      	str	r3, [r7, #12]
 80248e4:	e029      	b.n	802493a <_ZN3Run17DevTargetVelocityEh+0x6e>
        default:

            if(slow_timer < SLOW_DRIVE_TIME)
 80248e6:	4b1a      	ldr	r3, [pc, #104]	; (8024950 <_ZN3Run17DevTargetVelocityEh+0x84>)
 80248e8:	881b      	ldrh	r3, [r3, #0]
 80248ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80248ee:	d209      	bcs.n	8024904 <_ZN3Run17DevTargetVelocityEh+0x38>
            {
                slow_timer++;
 80248f0:	4b17      	ldr	r3, [pc, #92]	; (8024950 <_ZN3Run17DevTargetVelocityEh+0x84>)
 80248f2:	881b      	ldrh	r3, [r3, #0]
 80248f4:	3301      	adds	r3, #1
 80248f6:	b29a      	uxth	r2, r3
 80248f8:	4b15      	ldr	r3, [pc, #84]	; (8024950 <_ZN3Run17DevTargetVelocityEh+0x84>)
 80248fa:	801a      	strh	r2, [r3, #0]
                target_velocity = SLOW_DRIVE_VELOCITY;
 80248fc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024900:	60fb      	str	r3, [r7, #12]
                    SetRunMode(DEV_GOAL);
                    SetRunModeChangedInternal(true);
                    target_velocity = 0;
                }
            }
            break;
 8024902:	e019      	b.n	8024938 <_ZN3Run17DevTargetVelocityEh+0x6c>
                if(stop_timer < STOP_TIME)
 8024904:	4b13      	ldr	r3, [pc, #76]	; (8024954 <_ZN3Run17DevTargetVelocityEh+0x88>)
 8024906:	881b      	ldrh	r3, [r3, #0]
 8024908:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 802490c:	d209      	bcs.n	8024922 <_ZN3Run17DevTargetVelocityEh+0x56>
                    stop_timer++;
 802490e:	4b11      	ldr	r3, [pc, #68]	; (8024954 <_ZN3Run17DevTargetVelocityEh+0x88>)
 8024910:	881b      	ldrh	r3, [r3, #0]
 8024912:	3301      	adds	r3, #1
 8024914:	b29a      	uxth	r2, r3
 8024916:	4b0f      	ldr	r3, [pc, #60]	; (8024954 <_ZN3Run17DevTargetVelocityEh+0x88>)
 8024918:	801a      	strh	r2, [r3, #0]
                    target_velocity = 0;
 802491a:	f04f 0300 	mov.w	r3, #0
 802491e:	60fb      	str	r3, [r7, #12]
            break;
 8024920:	e00a      	b.n	8024938 <_ZN3Run17DevTargetVelocityEh+0x6c>
                    SetRunMode(DEV_GOAL);
 8024922:	21d0      	movs	r1, #208	; 0xd0
 8024924:	6878      	ldr	r0, [r7, #4]
 8024926:	f7ff fd85 	bl	8024434 <_ZN3Run10SetRunModeEh>
                    SetRunModeChangedInternal(true);
 802492a:	2101      	movs	r1, #1
 802492c:	6878      	ldr	r0, [r7, #4]
 802492e:	f7ff fd91 	bl	8024454 <_ZN3Run25SetRunModeChangedInternalEb>
                    target_velocity = 0;
 8024932:	f04f 0300 	mov.w	r3, #0
 8024936:	60fb      	str	r3, [r7, #12]
            break;
 8024938:	bf00      	nop
    }

    return target_velocity;
 802493a:	68fb      	ldr	r3, [r7, #12]
 802493c:	ee07 3a90 	vmov	s15, r3
}
 8024940:	eeb0 0a67 	vmov.f32	s0, s15
 8024944:	3710      	adds	r7, #16
 8024946:	46bd      	mov	sp, r7
 8024948:	bd80      	pop	{r7, pc}
 802494a:	bf00      	nop
 802494c:	3f99999a 	.word	0x3f99999a
 8024950:	200002d2 	.word	0x200002d2
 8024954:	200002d4 	.word	0x200002d4

08024958 <_ZN3Run11ModeDevGoalEv>:

void Run::ModeDevGoal()
{
 8024958:	b580      	push	{r7, lr}
 802495a:	b082      	sub	sp, #8
 802495c:	af00      	add	r7, sp, #0
 802495e:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024960:	687b      	ldr	r3, [r7, #4]
 8024962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024964:	eddf 0a08 	vldr	s1, [pc, #32]	; 8024988 <_ZN3Run11ModeDevGoalEv+0x30>
 8024968:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8024988 <_ZN3Run11ModeDevGoalEv+0x30>
 802496c:	4618      	mov	r0, r3
 802496e:	f7ff fa3b 	bl	8023de8 <_ZN5Motor5DriveEff>
    led_->ColorOrder('M');
 8024972:	687b      	ldr	r3, [r7, #4]
 8024974:	695b      	ldr	r3, [r3, #20]
 8024976:	214d      	movs	r1, #77	; 0x4d
 8024978:	4618      	mov	r0, r3
 802497a:	f7fc fed3 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 802497e:	bf00      	nop
 8024980:	3708      	adds	r7, #8
 8024982:	46bd      	mov	sp, r7
 8024984:	bd80      	pop	{r7, pc}
 8024986:	bf00      	nop
 8024988:	00000000 	.word	0x00000000

0802498c <_ZN3Run12ModeFirstRunEv>:

void Run::ModeFirstRun()
{
 802498c:	b580      	push	{r7, lr}
 802498e:	b086      	sub	sp, #24
 8024990:	af00      	add	r7, sp, #0
 8024992:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024994:	687b      	ldr	r3, [r7, #4]
 8024996:	699b      	ldr	r3, [r3, #24]
 8024998:	4618      	mov	r0, r3
 802499a:	f7fd f9ed 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 802499e:	687b      	ldr	r3, [r7, #4]
 80249a0:	689b      	ldr	r3, [r3, #8]
 80249a2:	4618      	mov	r0, r3
 80249a4:	f7fc fa00 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    iim_42652_->Update();
 80249a8:	687b      	ldr	r3, [r7, #4]
 80249aa:	691b      	ldr	r3, [r3, #16]
 80249ac:	4618      	mov	r0, r3
 80249ae:	f7fc fe2f 	bl	8021610 <_ZN8Iim426526UpdateEv>
    side_sensor_->Update();
 80249b2:	687b      	ldr	r3, [r7, #4]
 80249b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80249b6:	4618      	mov	r0, r3
 80249b8:	f000 fb0c 	bl	8024fd4 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 80249bc:	6878      	ldr	r0, [r7, #4]
 80249be:	f7ff fe2b 	bl	8024618 <_ZN3Run13EmergencyStopEv>
 80249c2:	4603      	mov	r3, r0
 80249c4:	2b00      	cmp	r3, #0
 80249c6:	d14e      	bne.n	8024a66 <_ZN3Run12ModeFirstRunEv+0xda>
    /* Logging */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 80249c8:	687b      	ldr	r3, [r7, #4]
 80249ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80249cc:	4618      	mov	r0, r3
 80249ce:	f000 fcd0 	bl	8025372 <_ZN10SideSensor18GetGoalMarkerCountEv>
 80249d2:	4603      	mov	r3, r0
 80249d4:	75fb      	strb	r3, [r7, #23]
    if(goal_count == 1) logger_->Logging(mode_complete_);
 80249d6:	7dfb      	ldrb	r3, [r7, #23]
 80249d8:	2b01      	cmp	r3, #1
 80249da:	d107      	bne.n	80249ec <_ZN3Run12ModeFirstRunEv+0x60>
 80249dc:	687b      	ldr	r3, [r7, #4]
 80249de:	6a1a      	ldr	r2, [r3, #32]
 80249e0:	687b      	ldr	r3, [r7, #4]
 80249e2:	795b      	ldrb	r3, [r3, #5]
 80249e4:	4619      	mov	r1, r3
 80249e6:	4610      	mov	r0, r2
 80249e8:	f7fd fd4e 	bl	8022488 <_ZN6Logger7LoggingEh>
    mode_complete_ = false;
 80249ec:	687b      	ldr	r3, [r7, #4]
 80249ee:	2200      	movs	r2, #0
 80249f0:	715a      	strb	r2, [r3, #5]
    uint8_t period_success = logger_->StorePeriodicLog();
 80249f2:	687b      	ldr	r3, [r7, #4]
 80249f4:	6a1b      	ldr	r3, [r3, #32]
 80249f6:	4618      	mov	r0, r3
 80249f8:	f7fd ff5c 	bl	80228b4 <_ZN6Logger16StorePeriodicLogEv>
 80249fc:	4603      	mov	r3, r0
 80249fe:	75bb      	strb	r3, [r7, #22]
    uint8_t accel_success = logger_->StoreAccelPositionLog();
 8024a00:	687b      	ldr	r3, [r7, #4]
 8024a02:	6a1b      	ldr	r3, [r3, #32]
 8024a04:	4618      	mov	r0, r3
 8024a06:	f7fd fff3 	bl	80229f0 <_ZN6Logger21StoreAccelPositionLogEv>
 8024a0a:	4603      	mov	r3, r0
 8024a0c:	757b      	strb	r3, [r7, #21]
    if(period_success != 0 || !accel_success != 0) store_log_failed_ = true;
 8024a0e:	7dbb      	ldrb	r3, [r7, #22]
 8024a10:	2b00      	cmp	r3, #0
 8024a12:	d102      	bne.n	8024a1a <_ZN3Run12ModeFirstRunEv+0x8e>
 8024a14:	7d7b      	ldrb	r3, [r7, #21]
 8024a16:	2b00      	cmp	r3, #0
 8024a18:	d102      	bne.n	8024a20 <_ZN3Run12ModeFirstRunEv+0x94>
 8024a1a:	687b      	ldr	r3, [r7, #4]
 8024a1c:	2201      	movs	r2, #1
 8024a1e:	719a      	strb	r2, [r3, #6]
    /* Motor control */
    float target_velocity = FirstTargetVelocity(goal_count);
 8024a20:	7dfb      	ldrb	r3, [r7, #23]
 8024a22:	4619      	mov	r1, r3
 8024a24:	6878      	ldr	r0, [r7, #4]
 8024a26:	f000 f97d 	bl	8024d24 <_ZN3Run19FirstTargetVelocityEh>
 8024a2a:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024a2e:	687b      	ldr	r3, [r7, #4]
 8024a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024a32:	ed97 0a04 	vldr	s0, [r7, #16]
 8024a36:	4618      	mov	r0, r3
 8024a38:	f001 f963 	bl	8025d02 <_ZN15VelocityControl16DeterminePidGainEf>
 8024a3c:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024a40:	687b      	ldr	r3, [r7, #4]
 8024a42:	69db      	ldr	r3, [r3, #28]
 8024a44:	ed97 0a04 	vldr	s0, [r7, #16]
 8024a48:	4618      	mov	r0, r3
 8024a4a:	f7fd fb6f 	bl	802212c <_ZN9LineTrace16DeterminePidGainEf>
 8024a4e:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024a52:	687b      	ldr	r3, [r7, #4]
 8024a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a56:	edd7 0a02 	vldr	s1, [r7, #8]
 8024a5a:	ed97 0a03 	vldr	s0, [r7, #12]
 8024a5e:	4618      	mov	r0, r3
 8024a60:	f7ff f9c2 	bl	8023de8 <_ZN5Motor5DriveEff>
 8024a64:	e000      	b.n	8024a68 <_ZN3Run12ModeFirstRunEv+0xdc>
    if(EmergencyStop()) return;
 8024a66:	bf00      	nop
}
 8024a68:	3718      	adds	r7, #24
 8024a6a:	46bd      	mov	sp, r7
 8024a6c:	bd80      	pop	{r7, pc}
	...

08024a70 <_ZN3Run13ModeFirstGoalEv>:

void Run::ModeFirstGoal()
{
 8024a70:	b580      	push	{r7, lr}
 8024a72:	b082      	sub	sp, #8
 8024a74:	af00      	add	r7, sp, #0
 8024a76:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024a78:	687b      	ldr	r3, [r7, #4]
 8024a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a7c:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8024ab4 <_ZN3Run13ModeFirstGoalEv+0x44>
 8024a80:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8024ab4 <_ZN3Run13ModeFirstGoalEv+0x44>
 8024a84:	4618      	mov	r0, r3
 8024a86:	f7ff f9af 	bl	8023de8 <_ZN5Motor5DriveEff>
    if(store_log_failed_) led_->ColorOrder('R');
 8024a8a:	687b      	ldr	r3, [r7, #4]
 8024a8c:	799b      	ldrb	r3, [r3, #6]
 8024a8e:	2b00      	cmp	r3, #0
 8024a90:	d006      	beq.n	8024aa0 <_ZN3Run13ModeFirstGoalEv+0x30>
 8024a92:	687b      	ldr	r3, [r7, #4]
 8024a94:	695b      	ldr	r3, [r3, #20]
 8024a96:	2152      	movs	r1, #82	; 0x52
 8024a98:	4618      	mov	r0, r3
 8024a9a:	f7fc fe43 	bl	8021724 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('B');
}
 8024a9e:	e005      	b.n	8024aac <_ZN3Run13ModeFirstGoalEv+0x3c>
    else led_->ColorOrder('B');
 8024aa0:	687b      	ldr	r3, [r7, #4]
 8024aa2:	695b      	ldr	r3, [r3, #20]
 8024aa4:	2142      	movs	r1, #66	; 0x42
 8024aa6:	4618      	mov	r0, r3
 8024aa8:	f7fc fe3c 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 8024aac:	bf00      	nop
 8024aae:	3708      	adds	r7, #8
 8024ab0:	46bd      	mov	sp, r7
 8024ab2:	bd80      	pop	{r7, pc}
 8024ab4:	00000000 	.word	0x00000000

08024ab8 <_ZN3Run13ModeSecondRunEv>:

void Run::ModeSecondRun()
{
 8024ab8:	b580      	push	{r7, lr}
 8024aba:	b086      	sub	sp, #24
 8024abc:	af00      	add	r7, sp, #0
 8024abe:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024ac0:	687b      	ldr	r3, [r7, #4]
 8024ac2:	699b      	ldr	r3, [r3, #24]
 8024ac4:	4618      	mov	r0, r3
 8024ac6:	f7fd f957 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024aca:	687b      	ldr	r3, [r7, #4]
 8024acc:	689b      	ldr	r3, [r3, #8]
 8024ace:	4618      	mov	r0, r3
 8024ad0:	f7fc f96a 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    iim_42652_->Update();
 8024ad4:	687b      	ldr	r3, [r7, #4]
 8024ad6:	691b      	ldr	r3, [r3, #16]
 8024ad8:	4618      	mov	r0, r3
 8024ada:	f7fc fd99 	bl	8021610 <_ZN8Iim426526UpdateEv>
    side_sensor_->Update();
 8024ade:	687b      	ldr	r3, [r7, #4]
 8024ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024ae2:	4618      	mov	r0, r3
 8024ae4:	f000 fa76 	bl	8024fd4 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024ae8:	6878      	ldr	r0, [r7, #4]
 8024aea:	f7ff fd95 	bl	8024618 <_ZN3Run13EmergencyStopEv>
 8024aee:	4603      	mov	r3, r0
 8024af0:	2b00      	cmp	r3, #0
 8024af2:	d131      	bne.n	8024b58 <_ZN3Run13ModeSecondRunEv+0xa0>
    /* Loading */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024af4:	687b      	ldr	r3, [r7, #4]
 8024af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024af8:	4618      	mov	r0, r3
 8024afa:	f000 fc3a 	bl	8025372 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024afe:	4603      	mov	r3, r0
 8024b00:	75fb      	strb	r3, [r7, #23]
    if(goal_count == 1) logger_->Loading();
 8024b02:	7dfb      	ldrb	r3, [r7, #23]
 8024b04:	2b01      	cmp	r3, #1
 8024b06:	d104      	bne.n	8024b12 <_ZN3Run13ModeSecondRunEv+0x5a>
 8024b08:	687b      	ldr	r3, [r7, #4]
 8024b0a:	6a1b      	ldr	r3, [r3, #32]
 8024b0c:	4618      	mov	r0, r3
 8024b0e:	f7fd fffb 	bl	8022b08 <_ZN6Logger7LoadingEv>
    /* Motor control */
    float target_velocity = SecondTargetVelocity(goal_count);
 8024b12:	7dfb      	ldrb	r3, [r7, #23]
 8024b14:	4619      	mov	r1, r3
 8024b16:	6878      	ldr	r0, [r7, #4]
 8024b18:	f000 f92a 	bl	8024d70 <_ZN3Run20SecondTargetVelocityEh>
 8024b1c:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024b20:	687b      	ldr	r3, [r7, #4]
 8024b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024b24:	ed97 0a04 	vldr	s0, [r7, #16]
 8024b28:	4618      	mov	r0, r3
 8024b2a:	f001 f8ea 	bl	8025d02 <_ZN15VelocityControl16DeterminePidGainEf>
 8024b2e:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024b32:	687b      	ldr	r3, [r7, #4]
 8024b34:	69db      	ldr	r3, [r3, #28]
 8024b36:	ed97 0a04 	vldr	s0, [r7, #16]
 8024b3a:	4618      	mov	r0, r3
 8024b3c:	f7fd faf6 	bl	802212c <_ZN9LineTrace16DeterminePidGainEf>
 8024b40:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024b44:	687b      	ldr	r3, [r7, #4]
 8024b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024b48:	edd7 0a02 	vldr	s1, [r7, #8]
 8024b4c:	ed97 0a03 	vldr	s0, [r7, #12]
 8024b50:	4618      	mov	r0, r3
 8024b52:	f7ff f949 	bl	8023de8 <_ZN5Motor5DriveEff>
 8024b56:	e000      	b.n	8024b5a <_ZN3Run13ModeSecondRunEv+0xa2>
    if(EmergencyStop()) return;
 8024b58:	bf00      	nop
}
 8024b5a:	3718      	adds	r7, #24
 8024b5c:	46bd      	mov	sp, r7
 8024b5e:	bd80      	pop	{r7, pc}

08024b60 <_ZN3Run14ModeSecondGoalEv>:

void Run::ModeSecondGoal()
{
 8024b60:	b580      	push	{r7, lr}
 8024b62:	b082      	sub	sp, #8
 8024b64:	af00      	add	r7, sp, #0
 8024b66:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024b68:	687b      	ldr	r3, [r7, #4]
 8024b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024b6c:	eddf 0a08 	vldr	s1, [pc, #32]	; 8024b90 <_ZN3Run14ModeSecondGoalEv+0x30>
 8024b70:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8024b90 <_ZN3Run14ModeSecondGoalEv+0x30>
 8024b74:	4618      	mov	r0, r3
 8024b76:	f7ff f937 	bl	8023de8 <_ZN5Motor5DriveEff>
    led_->ColorOrder('M');
 8024b7a:	687b      	ldr	r3, [r7, #4]
 8024b7c:	695b      	ldr	r3, [r3, #20]
 8024b7e:	214d      	movs	r1, #77	; 0x4d
 8024b80:	4618      	mov	r0, r3
 8024b82:	f7fc fdcf 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 8024b86:	bf00      	nop
 8024b88:	3708      	adds	r7, #8
 8024b8a:	46bd      	mov	sp, r7
 8024b8c:	bd80      	pop	{r7, pc}
 8024b8e:	bf00      	nop
 8024b90:	00000000 	.word	0x00000000

08024b94 <_ZN3Run19ModeVelocityControlEv>:

void Run::ModeVelocityControl()
{
 8024b94:	b580      	push	{r7, lr}
 8024b96:	b086      	sub	sp, #24
 8024b98:	af00      	add	r7, sp, #0
 8024b9a:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 8024b9c:	687b      	ldr	r3, [r7, #4]
 8024b9e:	689b      	ldr	r3, [r3, #8]
 8024ba0:	4618      	mov	r0, r3
 8024ba2:	f7fc f901 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 8024ba6:	687b      	ldr	r3, [r7, #4]
 8024ba8:	699b      	ldr	r3, [r3, #24]
 8024baa:	4618      	mov	r0, r3
 8024bac:	f7fd f8e4 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 8024bb0:	687b      	ldr	r3, [r7, #4]
 8024bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024bb4:	4618      	mov	r0, r3
 8024bb6:	f000 fa0d 	bl	8024fd4 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024bba:	6878      	ldr	r0, [r7, #4]
 8024bbc:	f7ff fd2c 	bl	8024618 <_ZN3Run13EmergencyStopEv>
 8024bc0:	4603      	mov	r3, r0
 8024bc2:	2b00      	cmp	r3, #0
 8024bc4:	d129      	bne.n	8024c1a <_ZN3Run19ModeVelocityControlEv+0x86>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024bc6:	687b      	ldr	r3, [r7, #4]
 8024bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024bca:	4618      	mov	r0, r3
 8024bcc:	f000 fbd1 	bl	8025372 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024bd0:	4603      	mov	r3, r0
 8024bd2:	75fb      	strb	r3, [r7, #23]
    float target_velocity = VelocityControlTarget(goal_count);
 8024bd4:	7dfb      	ldrb	r3, [r7, #23]
 8024bd6:	4619      	mov	r1, r3
 8024bd8:	6878      	ldr	r0, [r7, #4]
 8024bda:	f000 f8f1 	bl	8024dc0 <_ZN3Run21VelocityControlTargetEh>
 8024bde:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024be2:	687b      	ldr	r3, [r7, #4]
 8024be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024be6:	ed97 0a04 	vldr	s0, [r7, #16]
 8024bea:	4618      	mov	r0, r3
 8024bec:	f001 f889 	bl	8025d02 <_ZN15VelocityControl16DeterminePidGainEf>
 8024bf0:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024bf4:	687b      	ldr	r3, [r7, #4]
 8024bf6:	69db      	ldr	r3, [r3, #28]
 8024bf8:	ed97 0a04 	vldr	s0, [r7, #16]
 8024bfc:	4618      	mov	r0, r3
 8024bfe:	f7fd fa95 	bl	802212c <_ZN9LineTrace16DeterminePidGainEf>
 8024c02:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024c06:	687b      	ldr	r3, [r7, #4]
 8024c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024c0a:	edd7 0a02 	vldr	s1, [r7, #8]
 8024c0e:	ed97 0a03 	vldr	s0, [r7, #12]
 8024c12:	4618      	mov	r0, r3
 8024c14:	f7ff f8e8 	bl	8023de8 <_ZN5Motor5DriveEff>
 8024c18:	e000      	b.n	8024c1c <_ZN3Run19ModeVelocityControlEv+0x88>
    if(EmergencyStop()) return;
 8024c1a:	bf00      	nop
}
 8024c1c:	3718      	adds	r7, #24
 8024c1e:	46bd      	mov	sp, r7
 8024c20:	bd80      	pop	{r7, pc}

08024c22 <_ZN3Run13ModeLineTraceEv>:

void Run::ModeLineTrace()
{
 8024c22:	b580      	push	{r7, lr}
 8024c24:	b086      	sub	sp, #24
 8024c26:	af00      	add	r7, sp, #0
 8024c28:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024c2a:	687b      	ldr	r3, [r7, #4]
 8024c2c:	699b      	ldr	r3, [r3, #24]
 8024c2e:	4618      	mov	r0, r3
 8024c30:	f7fd f8a2 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 8024c34:	687b      	ldr	r3, [r7, #4]
 8024c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024c38:	4618      	mov	r0, r3
 8024c3a:	f000 f9cb 	bl	8024fd4 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024c3e:	6878      	ldr	r0, [r7, #4]
 8024c40:	f7ff fcea 	bl	8024618 <_ZN3Run13EmergencyStopEv>
 8024c44:	4603      	mov	r3, r0
 8024c46:	2b00      	cmp	r3, #0
 8024c48:	d11e      	bne.n	8024c88 <_ZN3Run13ModeLineTraceEv+0x66>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024c4a:	687b      	ldr	r3, [r7, #4]
 8024c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024c4e:	4618      	mov	r0, r3
 8024c50:	f000 fb8f 	bl	8025372 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024c54:	4603      	mov	r3, r0
 8024c56:	75fb      	strb	r3, [r7, #23]
    float trans_ratio = CommonDuty(goal_count);
 8024c58:	7dfb      	ldrb	r3, [r7, #23]
 8024c5a:	4619      	mov	r1, r3
 8024c5c:	6878      	ldr	r0, [r7, #4]
 8024c5e:	f000 f8d5 	bl	8024e0c <_ZN3Run10CommonDutyEh>
 8024c62:	ed87 0a04 	vstr	s0, [r7, #16]
    float rotat_ratio = line_trace_->LineTraceOnly();
 8024c66:	687b      	ldr	r3, [r7, #4]
 8024c68:	69db      	ldr	r3, [r3, #28]
 8024c6a:	4618      	mov	r0, r3
 8024c6c:	f7fd fa40 	bl	80220f0 <_ZN9LineTrace13LineTraceOnlyEv>
 8024c70:	ed87 0a03 	vstr	s0, [r7, #12]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024c74:	687b      	ldr	r3, [r7, #4]
 8024c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024c78:	edd7 0a03 	vldr	s1, [r7, #12]
 8024c7c:	ed97 0a04 	vldr	s0, [r7, #16]
 8024c80:	4618      	mov	r0, r3
 8024c82:	f7ff f8b1 	bl	8023de8 <_ZN5Motor5DriveEff>
 8024c86:	e000      	b.n	8024c8a <_ZN3Run13ModeLineTraceEv+0x68>
    if(EmergencyStop()) return;
 8024c88:	bf00      	nop
}
 8024c8a:	3718      	adds	r7, #24
 8024c8c:	46bd      	mov	sp, r7
 8024c8e:	bd80      	pop	{r7, pc}

08024c90 <_ZN3Run24ModeVelocityControlDebugEv>:

#ifdef DEBUG_MODE
void Run::ModeVelocityControlDebug()
{
 8024c90:	b580      	push	{r7, lr}
 8024c92:	b084      	sub	sp, #16
 8024c94:	af00      	add	r7, sp, #0
 8024c96:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024c98:	687b      	ldr	r3, [r7, #4]
 8024c9a:	699b      	ldr	r3, [r3, #24]
 8024c9c:	4618      	mov	r0, r3
 8024c9e:	f7fd f86b 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024ca2:	687b      	ldr	r3, [r7, #4]
 8024ca4:	689b      	ldr	r3, [r3, #8]
 8024ca6:	4618      	mov	r0, r3
 8024ca8:	f7fc f87e 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    /* Motor control */
    float target_velocity = VELOCITY_CONTROL_TARGET;
 8024cac:	4b0b      	ldr	r3, [pc, #44]	; (8024cdc <_ZN3Run24ModeVelocityControlDebugEv+0x4c>)
 8024cae:	60fb      	str	r3, [r7, #12]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024cb0:	687b      	ldr	r3, [r7, #4]
 8024cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024cb4:	ed97 0a03 	vldr	s0, [r7, #12]
 8024cb8:	4618      	mov	r0, r3
 8024cba:	f001 f822 	bl	8025d02 <_ZN15VelocityControl16DeterminePidGainEf>
 8024cbe:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, 0);
 8024cc2:	687b      	ldr	r3, [r7, #4]
 8024cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024cc6:	eddf 0a06 	vldr	s1, [pc, #24]	; 8024ce0 <_ZN3Run24ModeVelocityControlDebugEv+0x50>
 8024cca:	ed97 0a02 	vldr	s0, [r7, #8]
 8024cce:	4618      	mov	r0, r3
 8024cd0:	f7ff f88a 	bl	8023de8 <_ZN5Motor5DriveEff>
}
 8024cd4:	bf00      	nop
 8024cd6:	3710      	adds	r7, #16
 8024cd8:	46bd      	mov	sp, r7
 8024cda:	bd80      	pop	{r7, pc}
 8024cdc:	3f99999a 	.word	0x3f99999a
 8024ce0:	00000000 	.word	0x00000000

08024ce4 <_ZN3Run18ModeLineTraceDebugEv>:

void Run::ModeLineTraceDebug()
{
 8024ce4:	b580      	push	{r7, lr}
 8024ce6:	b084      	sub	sp, #16
 8024ce8:	af00      	add	r7, sp, #0
 8024cea:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024cec:	687b      	ldr	r3, [r7, #4]
 8024cee:	699b      	ldr	r3, [r3, #24]
 8024cf0:	4618      	mov	r0, r3
 8024cf2:	f7fd f841 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    /* Motor control */
    float rotat_ratio = line_trace_->LineTraceOnly();
 8024cf6:	687b      	ldr	r3, [r7, #4]
 8024cf8:	69db      	ldr	r3, [r3, #28]
 8024cfa:	4618      	mov	r0, r3
 8024cfc:	f7fd f9f8 	bl	80220f0 <_ZN9LineTrace13LineTraceOnlyEv>
 8024d00:	ed87 0a03 	vstr	s0, [r7, #12]
    motor_->Drive(0, rotat_ratio);
 8024d04:	687b      	ldr	r3, [r7, #4]
 8024d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024d08:	edd7 0a03 	vldr	s1, [r7, #12]
 8024d0c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8024d20 <_ZN3Run18ModeLineTraceDebugEv+0x3c>
 8024d10:	4618      	mov	r0, r3
 8024d12:	f7ff f869 	bl	8023de8 <_ZN5Motor5DriveEff>
}
 8024d16:	bf00      	nop
 8024d18:	3710      	adds	r7, #16
 8024d1a:	46bd      	mov	sp, r7
 8024d1c:	bd80      	pop	{r7, pc}
 8024d1e:	bf00      	nop
 8024d20:	00000000 	.word	0x00000000

08024d24 <_ZN3Run19FirstTargetVelocityEh>:
    InitialTest();
}
#endif // DEBUG_MODE

float Run::FirstTargetVelocity(uint8_t goal_count)
{
 8024d24:	b480      	push	{r7}
 8024d26:	b083      	sub	sp, #12
 8024d28:	af00      	add	r7, sp, #0
 8024d2a:	6078      	str	r0, [r7, #4]
 8024d2c:	460b      	mov	r3, r1
 8024d2e:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024d30:	78fb      	ldrb	r3, [r7, #3]
 8024d32:	2b01      	cmp	r3, #1
 8024d34:	d101      	bne.n	8024d3a <_ZN3Run19FirstTargetVelocityEh+0x16>
    {
        return EXPLORE_VELOCITY;
 8024d36:	4b0c      	ldr	r3, [pc, #48]	; (8024d68 <_ZN3Run19FirstTargetVelocityEh+0x44>)
 8024d38:	e00c      	b.n	8024d54 <_ZN3Run19FirstTargetVelocityEh+0x30>
    }
    else if(goal_count >= 2)
 8024d3a:	78fb      	ldrb	r3, [r7, #3]
 8024d3c:	2b01      	cmp	r3, #1
 8024d3e:	d908      	bls.n	8024d52 <_ZN3Run19FirstTargetVelocityEh+0x2e>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024d40:	4b0a      	ldr	r3, [pc, #40]	; (8024d6c <_ZN3Run19FirstTargetVelocityEh+0x48>)
 8024d42:	781b      	ldrb	r3, [r3, #0]
 8024d44:	3301      	adds	r3, #1
 8024d46:	b2da      	uxtb	r2, r3
 8024d48:	4b08      	ldr	r3, [pc, #32]	; (8024d6c <_ZN3Run19FirstTargetVelocityEh+0x48>)
 8024d4a:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024d4c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024d50:	e000      	b.n	8024d54 <_ZN3Run19FirstTargetVelocityEh+0x30>
        {
            SetRunMode(FIRST_GOAL);
            return 0;
        }
    }
    else return EXPLORE_VELOCITY;
 8024d52:	4b05      	ldr	r3, [pc, #20]	; (8024d68 <_ZN3Run19FirstTargetVelocityEh+0x44>)
 8024d54:	ee07 3a90 	vmov	s15, r3
}
 8024d58:	eeb0 0a67 	vmov.f32	s0, s15
 8024d5c:	370c      	adds	r7, #12
 8024d5e:	46bd      	mov	sp, r7
 8024d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d64:	4770      	bx	lr
 8024d66:	bf00      	nop
 8024d68:	3f99999a 	.word	0x3f99999a
 8024d6c:	200002d6 	.word	0x200002d6

08024d70 <_ZN3Run20SecondTargetVelocityEh>:

float Run::SecondTargetVelocity(uint8_t goal_count)
{
 8024d70:	b580      	push	{r7, lr}
 8024d72:	b082      	sub	sp, #8
 8024d74:	af00      	add	r7, sp, #0
 8024d76:	6078      	str	r0, [r7, #4]
 8024d78:	460b      	mov	r3, r1
 8024d7a:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024d7c:	78fb      	ldrb	r3, [r7, #3]
 8024d7e:	2b01      	cmp	r3, #1
 8024d80:	d107      	bne.n	8024d92 <_ZN3Run20SecondTargetVelocityEh+0x22>
    {
        return logger_->GetTargetVelocity();
 8024d82:	687b      	ldr	r3, [r7, #4]
 8024d84:	6a1b      	ldr	r3, [r3, #32]
 8024d86:	4618      	mov	r0, r3
 8024d88:	f7fe f988 	bl	802309c <_ZN6Logger17GetTargetVelocityEv>
 8024d8c:	eef0 7a40 	vmov.f32	s15, s0
 8024d90:	e00d      	b.n	8024dae <_ZN3Run20SecondTargetVelocityEh+0x3e>
    }
    else if(goal_count >= 2)
 8024d92:	78fb      	ldrb	r3, [r7, #3]
 8024d94:	2b01      	cmp	r3, #1
 8024d96:	d908      	bls.n	8024daa <_ZN3Run20SecondTargetVelocityEh+0x3a>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024d98:	4b07      	ldr	r3, [pc, #28]	; (8024db8 <_ZN3Run20SecondTargetVelocityEh+0x48>)
 8024d9a:	781b      	ldrb	r3, [r3, #0]
 8024d9c:	3301      	adds	r3, #1
 8024d9e:	b2da      	uxtb	r2, r3
 8024da0:	4b05      	ldr	r3, [pc, #20]	; (8024db8 <_ZN3Run20SecondTargetVelocityEh+0x48>)
 8024da2:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024da4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024da8:	e001      	b.n	8024dae <_ZN3Run20SecondTargetVelocityEh+0x3e>
        {
            SetRunMode(SECOND_GOAL);
            return 0;
        }
    }
    else return MIN_VELOCITY;
 8024daa:	eddf 7a04 	vldr	s15, [pc, #16]	; 8024dbc <_ZN3Run20SecondTargetVelocityEh+0x4c>
}
 8024dae:	eeb0 0a67 	vmov.f32	s0, s15
 8024db2:	3708      	adds	r7, #8
 8024db4:	46bd      	mov	sp, r7
 8024db6:	bd80      	pop	{r7, pc}
 8024db8:	200002d7 	.word	0x200002d7
 8024dbc:	3fa66666 	.word	0x3fa66666

08024dc0 <_ZN3Run21VelocityControlTargetEh>:

float Run::VelocityControlTarget(uint8_t goal_count)
{
 8024dc0:	b480      	push	{r7}
 8024dc2:	b083      	sub	sp, #12
 8024dc4:	af00      	add	r7, sp, #0
 8024dc6:	6078      	str	r0, [r7, #4]
 8024dc8:	460b      	mov	r3, r1
 8024dca:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024dcc:	78fb      	ldrb	r3, [r7, #3]
 8024dce:	2b01      	cmp	r3, #1
 8024dd0:	d101      	bne.n	8024dd6 <_ZN3Run21VelocityControlTargetEh+0x16>
    {
        return VELOCITY_CONTROL_TARGET;
 8024dd2:	4b0c      	ldr	r3, [pc, #48]	; (8024e04 <_ZN3Run21VelocityControlTargetEh+0x44>)
 8024dd4:	e00c      	b.n	8024df0 <_ZN3Run21VelocityControlTargetEh+0x30>
    }
    else if(goal_count >= 2)
 8024dd6:	78fb      	ldrb	r3, [r7, #3]
 8024dd8:	2b01      	cmp	r3, #1
 8024dda:	d908      	bls.n	8024dee <_ZN3Run21VelocityControlTargetEh+0x2e>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024ddc:	4b0a      	ldr	r3, [pc, #40]	; (8024e08 <_ZN3Run21VelocityControlTargetEh+0x48>)
 8024dde:	781b      	ldrb	r3, [r3, #0]
 8024de0:	3301      	adds	r3, #1
 8024de2:	b2da      	uxtb	r2, r3
 8024de4:	4b08      	ldr	r3, [pc, #32]	; (8024e08 <_ZN3Run21VelocityControlTargetEh+0x48>)
 8024de6:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024de8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024dec:	e000      	b.n	8024df0 <_ZN3Run21VelocityControlTargetEh+0x30>
        {
            SetRunMode(STANDBY);
            return 0;
        }
    }
    else return VELOCITY_CONTROL_TARGET;
 8024dee:	4b05      	ldr	r3, [pc, #20]	; (8024e04 <_ZN3Run21VelocityControlTargetEh+0x44>)
 8024df0:	ee07 3a90 	vmov	s15, r3
}
 8024df4:	eeb0 0a67 	vmov.f32	s0, s15
 8024df8:	370c      	adds	r7, #12
 8024dfa:	46bd      	mov	sp, r7
 8024dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e00:	4770      	bx	lr
 8024e02:	bf00      	nop
 8024e04:	3f99999a 	.word	0x3f99999a
 8024e08:	200002d8 	.word	0x200002d8

08024e0c <_ZN3Run10CommonDutyEh>:

float Run::CommonDuty(uint8_t goal_count)
{
 8024e0c:	b480      	push	{r7}
 8024e0e:	b083      	sub	sp, #12
 8024e10:	af00      	add	r7, sp, #0
 8024e12:	6078      	str	r0, [r7, #4]
 8024e14:	460b      	mov	r3, r1
 8024e16:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024e18:	78fb      	ldrb	r3, [r7, #3]
 8024e1a:	2b01      	cmp	r3, #1
 8024e1c:	d101      	bne.n	8024e22 <_ZN3Run10CommonDutyEh+0x16>
    {
        return COMMON_DUTY;
 8024e1e:	4b0b      	ldr	r3, [pc, #44]	; (8024e4c <_ZN3Run10CommonDutyEh+0x40>)
 8024e20:	e00b      	b.n	8024e3a <_ZN3Run10CommonDutyEh+0x2e>
    }
    else if(goal_count >= 2)
 8024e22:	78fb      	ldrb	r3, [r7, #3]
 8024e24:	2b01      	cmp	r3, #1
 8024e26:	d907      	bls.n	8024e38 <_ZN3Run10CommonDutyEh+0x2c>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024e28:	4b09      	ldr	r3, [pc, #36]	; (8024e50 <_ZN3Run10CommonDutyEh+0x44>)
 8024e2a:	781b      	ldrb	r3, [r3, #0]
 8024e2c:	3301      	adds	r3, #1
 8024e2e:	b2da      	uxtb	r2, r3
 8024e30:	4b07      	ldr	r3, [pc, #28]	; (8024e50 <_ZN3Run10CommonDutyEh+0x44>)
 8024e32:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_DUTY;
 8024e34:	4b05      	ldr	r3, [pc, #20]	; (8024e4c <_ZN3Run10CommonDutyEh+0x40>)
 8024e36:	e000      	b.n	8024e3a <_ZN3Run10CommonDutyEh+0x2e>
        {
            SetRunMode(STANDBY);
            return 0;
        }
    }
    else return COMMON_DUTY;
 8024e38:	4b04      	ldr	r3, [pc, #16]	; (8024e4c <_ZN3Run10CommonDutyEh+0x40>)
 8024e3a:	ee07 3a90 	vmov	s15, r3
}
 8024e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8024e42:	370c      	adds	r7, #12
 8024e44:	46bd      	mov	sp, r7
 8024e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e4a:	4770      	bx	lr
 8024e4c:	3e4ccccd 	.word	0x3e4ccccd
 8024e50:	200002d9 	.word	0x200002d9

08024e54 <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0)
 8024e54:	b480      	push	{r7}
 8024e56:	b083      	sub	sp, #12
 8024e58:	af00      	add	r7, sp, #0
 8024e5a:	6078      	str	r0, [r7, #4]
                         , write_state_flags_(0)
                         , exception_flags_(0)
                         , master_count_(0)
                         , goal_marker_count_(0)
                         , corner_marker_count_(0)
                         , cross_line_count_(0) {}
 8024e5c:	687b      	ldr	r3, [r7, #4]
 8024e5e:	2200      	movs	r2, #0
 8024e60:	701a      	strb	r2, [r3, #0]
 8024e62:	687b      	ldr	r3, [r7, #4]
 8024e64:	2200      	movs	r2, #0
 8024e66:	705a      	strb	r2, [r3, #1]
 8024e68:	687b      	ldr	r3, [r7, #4]
 8024e6a:	2200      	movs	r2, #0
 8024e6c:	709a      	strb	r2, [r3, #2]
 8024e6e:	687b      	ldr	r3, [r7, #4]
 8024e70:	2200      	movs	r2, #0
 8024e72:	70da      	strb	r2, [r3, #3]
 8024e74:	687b      	ldr	r3, [r7, #4]
 8024e76:	2200      	movs	r2, #0
 8024e78:	711a      	strb	r2, [r3, #4]
 8024e7a:	687b      	ldr	r3, [r7, #4]
 8024e7c:	2200      	movs	r2, #0
 8024e7e:	715a      	strb	r2, [r3, #5]
 8024e80:	687b      	ldr	r3, [r7, #4]
 8024e82:	2200      	movs	r2, #0
 8024e84:	719a      	strb	r2, [r3, #6]
 8024e86:	687b      	ldr	r3, [r7, #4]
 8024e88:	4618      	mov	r0, r3
 8024e8a:	370c      	adds	r7, #12
 8024e8c:	46bd      	mov	sp, r7
 8024e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e92:	4770      	bx	lr

08024e94 <_ZN10SideSensor11UpdateStateEv>:

void SideSensor::UpdateState()
{
 8024e94:	b580      	push	{r7, lr}
 8024e96:	b084      	sub	sp, #16
 8024e98:	af00      	add	r7, sp, #0
 8024e9a:	6078      	str	r0, [r7, #4]
    uint8_t io_state = 0xFF; // Lower bits represent the positions of sensors.
 8024e9c:	23ff      	movs	r3, #255	; 0xff
 8024e9e:	73fb      	strb	r3, [r7, #15]

    if(IO_OUTSIDE_L == 0) io_state &= 0xF7; // 0111
 8024ea0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8024ea4:	4849      	ldr	r0, [pc, #292]	; (8024fcc <_ZN10SideSensor11UpdateStateEv+0x138>)
 8024ea6:	f002 fed5 	bl	8027c54 <HAL_GPIO_ReadPin>
 8024eaa:	4603      	mov	r3, r0
 8024eac:	2b00      	cmp	r3, #0
 8024eae:	bf0c      	ite	eq
 8024eb0:	2301      	moveq	r3, #1
 8024eb2:	2300      	movne	r3, #0
 8024eb4:	b2db      	uxtb	r3, r3
 8024eb6:	2b00      	cmp	r3, #0
 8024eb8:	d003      	beq.n	8024ec2 <_ZN10SideSensor11UpdateStateEv+0x2e>
 8024eba:	7bfb      	ldrb	r3, [r7, #15]
 8024ebc:	f023 0308 	bic.w	r3, r3, #8
 8024ec0:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_L == 0)  io_state &= 0xFB; // 1011
 8024ec2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8024ec6:	4841      	ldr	r0, [pc, #260]	; (8024fcc <_ZN10SideSensor11UpdateStateEv+0x138>)
 8024ec8:	f002 fec4 	bl	8027c54 <HAL_GPIO_ReadPin>
 8024ecc:	4603      	mov	r3, r0
 8024ece:	2b00      	cmp	r3, #0
 8024ed0:	bf0c      	ite	eq
 8024ed2:	2301      	moveq	r3, #1
 8024ed4:	2300      	movne	r3, #0
 8024ed6:	b2db      	uxtb	r3, r3
 8024ed8:	2b00      	cmp	r3, #0
 8024eda:	d003      	beq.n	8024ee4 <_ZN10SideSensor11UpdateStateEv+0x50>
 8024edc:	7bfb      	ldrb	r3, [r7, #15]
 8024ede:	f023 0304 	bic.w	r3, r3, #4
 8024ee2:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_R == 0)  io_state &= 0xFD; // 1101
 8024ee4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8024ee8:	4838      	ldr	r0, [pc, #224]	; (8024fcc <_ZN10SideSensor11UpdateStateEv+0x138>)
 8024eea:	f002 feb3 	bl	8027c54 <HAL_GPIO_ReadPin>
 8024eee:	4603      	mov	r3, r0
 8024ef0:	2b00      	cmp	r3, #0
 8024ef2:	bf0c      	ite	eq
 8024ef4:	2301      	moveq	r3, #1
 8024ef6:	2300      	movne	r3, #0
 8024ef8:	b2db      	uxtb	r3, r3
 8024efa:	2b00      	cmp	r3, #0
 8024efc:	d003      	beq.n	8024f06 <_ZN10SideSensor11UpdateStateEv+0x72>
 8024efe:	7bfb      	ldrb	r3, [r7, #15]
 8024f00:	f023 0302 	bic.w	r3, r3, #2
 8024f04:	73fb      	strb	r3, [r7, #15]
    if(IO_OUTSIDE_R == 0) io_state &= 0xFE; // 1110
 8024f06:	2104      	movs	r1, #4
 8024f08:	4831      	ldr	r0, [pc, #196]	; (8024fd0 <_ZN10SideSensor11UpdateStateEv+0x13c>)
 8024f0a:	f002 fea3 	bl	8027c54 <HAL_GPIO_ReadPin>
 8024f0e:	4603      	mov	r3, r0
 8024f10:	2b00      	cmp	r3, #0
 8024f12:	bf0c      	ite	eq
 8024f14:	2301      	moveq	r3, #1
 8024f16:	2300      	movne	r3, #0
 8024f18:	b2db      	uxtb	r3, r3
 8024f1a:	2b00      	cmp	r3, #0
 8024f1c:	d003      	beq.n	8024f26 <_ZN10SideSensor11UpdateStateEv+0x92>
 8024f1e:	7bfb      	ldrb	r3, [r7, #15]
 8024f20:	f023 0301 	bic.w	r3, r3, #1
 8024f24:	73fb      	strb	r3, [r7, #15]

    read_state_flags_ <<= 4;
 8024f26:	687b      	ldr	r3, [r7, #4]
 8024f28:	781b      	ldrb	r3, [r3, #0]
 8024f2a:	011b      	lsls	r3, r3, #4
 8024f2c:	b2da      	uxtb	r2, r3
 8024f2e:	687b      	ldr	r3, [r7, #4]
 8024f30:	701a      	strb	r2, [r3, #0]

    switch(io_state)
 8024f32:	7bfb      	ldrb	r3, [r7, #15]
 8024f34:	3bf0      	subs	r3, #240	; 0xf0
 8024f36:	2b0f      	cmp	r3, #15
 8024f38:	d842      	bhi.n	8024fc0 <_ZN10SideSensor11UpdateStateEv+0x12c>
 8024f3a:	a201      	add	r2, pc, #4	; (adr r2, 8024f40 <_ZN10SideSensor11UpdateStateEv+0xac>)
 8024f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024f40:	08024fb1 	.word	0x08024fb1
 8024f44:	08024fb1 	.word	0x08024fb1
 8024f48:	08024fb1 	.word	0x08024fb1
 8024f4c:	08024fa1 	.word	0x08024fa1
 8024f50:	08024fb1 	.word	0x08024fb1
 8024f54:	08024fc1 	.word	0x08024fc1
 8024f58:	08024fb1 	.word	0x08024fb1
 8024f5c:	08024fa1 	.word	0x08024fa1
 8024f60:	08024fb1 	.word	0x08024fb1
 8024f64:	08024fb1 	.word	0x08024fb1
 8024f68:	08024fc1 	.word	0x08024fc1
 8024f6c:	08024fa1 	.word	0x08024fa1
 8024f70:	08024f91 	.word	0x08024f91
 8024f74:	08024fc1 	.word	0x08024fc1
 8024f78:	08024fc1 	.word	0x08024fc1
 8024f7c:	08024f81 	.word	0x08024f81
    {
        case 0xFF: // 1111
            read_state_flags_ |= 0x08; break;
 8024f80:	687b      	ldr	r3, [r7, #4]
 8024f82:	781b      	ldrb	r3, [r3, #0]
 8024f84:	f043 0308 	orr.w	r3, r3, #8
 8024f88:	b2da      	uxtb	r2, r3
 8024f8a:	687b      	ldr	r3, [r7, #4]
 8024f8c:	701a      	strb	r2, [r3, #0]
 8024f8e:	e018      	b.n	8024fc2 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFC: // 1100  If through goal, increase pattern.
            read_state_flags_ |= 0x04; break;
 8024f90:	687b      	ldr	r3, [r7, #4]
 8024f92:	781b      	ldrb	r3, [r3, #0]
 8024f94:	f043 0304 	orr.w	r3, r3, #4
 8024f98:	b2da      	uxtb	r2, r3
 8024f9a:	687b      	ldr	r3, [r7, #4]
 8024f9c:	701a      	strb	r2, [r3, #0]
 8024f9e:	e010      	b.n	8024fc2 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFB: // 1011
        case 0xF7: // 0111
        case 0xF3: // 0011
            read_state_flags_ |= 0x02; break;
 8024fa0:	687b      	ldr	r3, [r7, #4]
 8024fa2:	781b      	ldrb	r3, [r3, #0]
 8024fa4:	f043 0302 	orr.w	r3, r3, #2
 8024fa8:	b2da      	uxtb	r2, r3
 8024faa:	687b      	ldr	r3, [r7, #4]
 8024fac:	701a      	strb	r2, [r3, #0]
 8024fae:	e008      	b.n	8024fc2 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xF4: // 0100
        case 0xF0: // 0000
        case 0xF1: // 0001
        case 0xF8: // 1000
        case 0xF9: // 1001
            read_state_flags_ |= 0x01; break;
 8024fb0:	687b      	ldr	r3, [r7, #4]
 8024fb2:	781b      	ldrb	r3, [r3, #0]
 8024fb4:	f043 0301 	orr.w	r3, r3, #1
 8024fb8:	b2da      	uxtb	r2, r3
 8024fba:	687b      	ldr	r3, [r7, #4]
 8024fbc:	701a      	strb	r2, [r3, #0]
 8024fbe:	e000      	b.n	8024fc2 <_ZN10SideSensor11UpdateStateEv+0x12e>
        default: break;
 8024fc0:	bf00      	nop
    }
}
 8024fc2:	bf00      	nop
 8024fc4:	3710      	adds	r7, #16
 8024fc6:	46bd      	mov	sp, r7
 8024fc8:	bd80      	pop	{r7, pc}
 8024fca:	bf00      	nop
 8024fcc:	40020400 	.word	0x40020400
 8024fd0:	40020c00 	.word	0x40020c00

08024fd4 <_ZN10SideSensor6UpdateEv>:

void SideSensor::Update()
{
 8024fd4:	b580      	push	{r7, lr}
 8024fd6:	b084      	sub	sp, #16
 8024fd8:	af00      	add	r7, sp, #0
 8024fda:	6078      	str	r0, [r7, #4]
    uint8_t ignore_flag = exception_flags_ & 0x01;
 8024fdc:	687b      	ldr	r3, [r7, #4]
 8024fde:	789b      	ldrb	r3, [r3, #2]
 8024fe0:	f003 0301 	and.w	r3, r3, #1
 8024fe4:	73fb      	strb	r3, [r7, #15]

    /* Ignore judgment */
    if(ignore_flag == 0x01)
 8024fe6:	7bfb      	ldrb	r3, [r7, #15]
 8024fe8:	2b01      	cmp	r3, #1
 8024fea:	d111      	bne.n	8025010 <_ZN10SideSensor6UpdateEv+0x3c>
    {
        if(master_count_ < IGNORE_COUNT) master_count_++;
 8024fec:	687b      	ldr	r3, [r7, #4]
 8024fee:	78db      	ldrb	r3, [r3, #3]
 8024ff0:	2b04      	cmp	r3, #4
 8024ff2:	d806      	bhi.n	8025002 <_ZN10SideSensor6UpdateEv+0x2e>
 8024ff4:	687b      	ldr	r3, [r7, #4]
 8024ff6:	78db      	ldrb	r3, [r3, #3]
 8024ff8:	3301      	adds	r3, #1
 8024ffa:	b2da      	uxtb	r2, r3
 8024ffc:	687b      	ldr	r3, [r7, #4]
 8024ffe:	70da      	strb	r2, [r3, #3]
 8025000:	e031      	b.n	8025066 <_ZN10SideSensor6UpdateEv+0x92>
        else exception_flags_ >>= 1; 
 8025002:	687b      	ldr	r3, [r7, #4]
 8025004:	789b      	ldrb	r3, [r3, #2]
 8025006:	105b      	asrs	r3, r3, #1
 8025008:	b2da      	uxtb	r2, r3
 802500a:	687b      	ldr	r3, [r7, #4]
 802500c:	709a      	strb	r2, [r3, #2]
 802500e:	e02a      	b.n	8025066 <_ZN10SideSensor6UpdateEv+0x92>
    }
    else if(ignore_flag == 0x00)
 8025010:	7bfb      	ldrb	r3, [r7, #15]
 8025012:	2b00      	cmp	r3, #0
 8025014:	d127      	bne.n	8025066 <_ZN10SideSensor6UpdateEv+0x92>
    {
        UpdateState();
 8025016:	6878      	ldr	r0, [r7, #4]
 8025018:	f7ff ff3c 	bl	8024e94 <_ZN10SideSensor11UpdateStateEv>

        uint8_t now_state = read_state_flags_;
 802501c:	687b      	ldr	r3, [r7, #4]
 802501e:	781b      	ldrb	r3, [r3, #0]
 8025020:	73bb      	strb	r3, [r7, #14]
        uint8_t pre_state = (now_state << 4) | (now_state >> 4);
 8025022:	7bbb      	ldrb	r3, [r7, #14]
 8025024:	011b      	lsls	r3, r3, #4
 8025026:	b25a      	sxtb	r2, r3
 8025028:	7bbb      	ldrb	r3, [r7, #14]
 802502a:	111b      	asrs	r3, r3, #4
 802502c:	b25b      	sxtb	r3, r3
 802502e:	4313      	orrs	r3, r2
 8025030:	b25b      	sxtb	r3, r3
 8025032:	737b      	strb	r3, [r7, #13]

        if(pre_state != now_state)
 8025034:	7b7a      	ldrb	r2, [r7, #13]
 8025036:	7bbb      	ldrb	r3, [r7, #14]
 8025038:	429a      	cmp	r2, r3
 802503a:	d003      	beq.n	8025044 <_ZN10SideSensor6UpdateEv+0x70>
        {
            NoiseTolerance();
 802503c:	6878      	ldr	r0, [r7, #4]
 802503e:	f000 f819 	bl	8025074 <_ZN10SideSensor14NoiseToleranceEv>
 8025042:	e010      	b.n	8025066 <_ZN10SideSensor6UpdateEv+0x92>
        }
        else if(pre_state == now_state)
 8025044:	7b7a      	ldrb	r2, [r7, #13]
 8025046:	7bbb      	ldrb	r3, [r7, #14]
 8025048:	429a      	cmp	r2, r3
 802504a:	d10c      	bne.n	8025066 <_ZN10SideSensor6UpdateEv+0x92>
        {
            exception_flags_ &= 0xF3; // noise_count = 0
 802504c:	687b      	ldr	r3, [r7, #4]
 802504e:	789b      	ldrb	r3, [r3, #2]
 8025050:	f023 030c 	bic.w	r3, r3, #12
 8025054:	b2da      	uxtb	r2, r3
 8025056:	687b      	ldr	r3, [r7, #4]
 8025058:	709a      	strb	r2, [r3, #2]
            ConfirmState();
 802505a:	6878      	ldr	r0, [r7, #4]
 802505c:	f000 f85a 	bl	8025114 <_ZN10SideSensor12ConfirmStateEv>
            CountUp();
 8025060:	6878      	ldr	r0, [r7, #4]
 8025062:	f000 f8c6 	bl	80251f2 <_ZN10SideSensor7CountUpEv>
        }
    }

#ifdef DEBUG_MODE
    Monitor();
 8025066:	6878      	ldr	r0, [r7, #4]
 8025068:	f000 f9a8 	bl	80253bc <_ZN10SideSensor7MonitorEv>
#endif // DEBUG_MODE
}
 802506c:	bf00      	nop
 802506e:	3710      	adds	r7, #16
 8025070:	46bd      	mov	sp, r7
 8025072:	bd80      	pop	{r7, pc}

08025074 <_ZN10SideSensor14NoiseToleranceEv>:

void SideSensor::NoiseTolerance()
{
 8025074:	b580      	push	{r7, lr}
 8025076:	b084      	sub	sp, #16
 8025078:	af00      	add	r7, sp, #0
 802507a:	6078      	str	r0, [r7, #4]
    uint8_t noise_count = (exception_flags_ & 0x0C) >> 2;
 802507c:	687b      	ldr	r3, [r7, #4]
 802507e:	789b      	ldrb	r3, [r3, #2]
 8025080:	109b      	asrs	r3, r3, #2
 8025082:	b2db      	uxtb	r3, r3
 8025084:	f003 0303 	and.w	r3, r3, #3
 8025088:	73fb      	strb	r3, [r7, #15]

    if(noise_count == 0x00)
 802508a:	7bfb      	ldrb	r3, [r7, #15]
 802508c:	2b00      	cmp	r3, #0
 802508e:	d11f      	bne.n	80250d0 <_ZN10SideSensor14NoiseToleranceEv+0x5c>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ & 0xF0);
 8025090:	687b      	ldr	r3, [r7, #4]
 8025092:	789b      	ldrb	r3, [r3, #2]
 8025094:	f003 030f 	and.w	r3, r3, #15
 8025098:	b2da      	uxtb	r2, r3
 802509a:	687b      	ldr	r3, [r7, #4]
 802509c:	781b      	ldrb	r3, [r3, #0]
 802509e:	f023 030f 	bic.w	r3, r3, #15
 80250a2:	b2db      	uxtb	r3, r3
 80250a4:	4313      	orrs	r3, r2
 80250a6:	b2da      	uxtb	r2, r3
 80250a8:	687b      	ldr	r3, [r7, #4]
 80250aa:	709a      	strb	r2, [r3, #2]
        /* Count up noise_count */
        noise_count++;
 80250ac:	7bfb      	ldrb	r3, [r7, #15]
 80250ae:	3301      	adds	r3, #1
 80250b0:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 80250b2:	687b      	ldr	r3, [r7, #4]
 80250b4:	789b      	ldrb	r3, [r3, #2]
 80250b6:	b25b      	sxtb	r3, r3
 80250b8:	f023 030c 	bic.w	r3, r3, #12
 80250bc:	b25a      	sxtb	r2, r3
 80250be:	7bfb      	ldrb	r3, [r7, #15]
 80250c0:	009b      	lsls	r3, r3, #2
 80250c2:	b25b      	sxtb	r3, r3
 80250c4:	4313      	orrs	r3, r2
 80250c6:	b25b      	sxtb	r3, r3
 80250c8:	b2da      	uxtb	r2, r3
 80250ca:	687b      	ldr	r3, [r7, #4]
 80250cc:	709a      	strb	r2, [r3, #2]

        ConfirmState();
        CountUp();
    }
    else master_count_ = 0;
}
 80250ce:	e01d      	b.n	802510c <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else if(noise_count == 0x01)
 80250d0:	7bfb      	ldrb	r3, [r7, #15]
 80250d2:	2b01      	cmp	r3, #1
 80250d4:	d117      	bne.n	8025106 <_ZN10SideSensor14NoiseToleranceEv+0x92>
        noise_count++;
 80250d6:	7bfb      	ldrb	r3, [r7, #15]
 80250d8:	3301      	adds	r3, #1
 80250da:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 80250dc:	687b      	ldr	r3, [r7, #4]
 80250de:	789b      	ldrb	r3, [r3, #2]
 80250e0:	b25b      	sxtb	r3, r3
 80250e2:	f023 030c 	bic.w	r3, r3, #12
 80250e6:	b25a      	sxtb	r2, r3
 80250e8:	7bfb      	ldrb	r3, [r7, #15]
 80250ea:	009b      	lsls	r3, r3, #2
 80250ec:	b25b      	sxtb	r3, r3
 80250ee:	4313      	orrs	r3, r2
 80250f0:	b25b      	sxtb	r3, r3
 80250f2:	b2da      	uxtb	r2, r3
 80250f4:	687b      	ldr	r3, [r7, #4]
 80250f6:	709a      	strb	r2, [r3, #2]
        ConfirmState();
 80250f8:	6878      	ldr	r0, [r7, #4]
 80250fa:	f000 f80b 	bl	8025114 <_ZN10SideSensor12ConfirmStateEv>
        CountUp();
 80250fe:	6878      	ldr	r0, [r7, #4]
 8025100:	f000 f877 	bl	80251f2 <_ZN10SideSensor7CountUpEv>
}
 8025104:	e002      	b.n	802510c <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else master_count_ = 0;
 8025106:	687b      	ldr	r3, [r7, #4]
 8025108:	2200      	movs	r2, #0
 802510a:	70da      	strb	r2, [r3, #3]
}
 802510c:	bf00      	nop
 802510e:	3710      	adds	r7, #16
 8025110:	46bd      	mov	sp, r7
 8025112:	bd80      	pop	{r7, pc}

08025114 <_ZN10SideSensor12ConfirmStateEv>:

void SideSensor::ConfirmState()
{
 8025114:	b480      	push	{r7}
 8025116:	b085      	sub	sp, #20
 8025118:	af00      	add	r7, sp, #0
 802511a:	6078      	str	r0, [r7, #4]
    uint8_t before_noise_state = exception_flags_ >> 4;
 802511c:	687b      	ldr	r3, [r7, #4]
 802511e:	789b      	ldrb	r3, [r3, #2]
 8025120:	111b      	asrs	r3, r3, #4
 8025122:	73bb      	strb	r3, [r7, #14]
    uint8_t now_state = read_state_flags_ & 0x0F;
 8025124:	687b      	ldr	r3, [r7, #4]
 8025126:	781b      	ldrb	r3, [r3, #0]
 8025128:	f003 030f 	and.w	r3, r3, #15
 802512c:	737b      	strb	r3, [r7, #13]
    uint8_t count = master_count_;
 802512e:	687b      	ldr	r3, [r7, #4]
 8025130:	78db      	ldrb	r3, [r3, #3]
 8025132:	73fb      	strb	r3, [r7, #15]

    if(before_noise_state != now_state)
 8025134:	7bba      	ldrb	r2, [r7, #14]
 8025136:	7b7b      	ldrb	r3, [r7, #13]
 8025138:	429a      	cmp	r2, r3
 802513a:	d010      	beq.n	802515e <_ZN10SideSensor12ConfirmStateEv+0x4a>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (now_state << 4);
 802513c:	687b      	ldr	r3, [r7, #4]
 802513e:	789b      	ldrb	r3, [r3, #2]
 8025140:	b25b      	sxtb	r3, r3
 8025142:	f003 030f 	and.w	r3, r3, #15
 8025146:	b25a      	sxtb	r2, r3
 8025148:	7b7b      	ldrb	r3, [r7, #13]
 802514a:	011b      	lsls	r3, r3, #4
 802514c:	b25b      	sxtb	r3, r3
 802514e:	4313      	orrs	r3, r2
 8025150:	b25b      	sxtb	r3, r3
 8025152:	b2da      	uxtb	r2, r3
 8025154:	687b      	ldr	r3, [r7, #4]
 8025156:	709a      	strb	r2, [r3, #2]
        count = 0;
 8025158:	2300      	movs	r3, #0
 802515a:	73fb      	strb	r3, [r7, #15]
 802515c:	e005      	b.n	802516a <_ZN10SideSensor12ConfirmStateEv+0x56>
    }
    else if(count < MAX_INTERRUPT_COUNT) count++;
 802515e:	7bfb      	ldrb	r3, [r7, #15]
 8025160:	2bf9      	cmp	r3, #249	; 0xf9
 8025162:	d802      	bhi.n	802516a <_ZN10SideSensor12ConfirmStateEv+0x56>
 8025164:	7bfb      	ldrb	r3, [r7, #15]
 8025166:	3301      	adds	r3, #1
 8025168:	73fb      	strb	r3, [r7, #15]

    master_count_ = count;
 802516a:	687b      	ldr	r3, [r7, #4]
 802516c:	7bfa      	ldrb	r2, [r7, #15]
 802516e:	70da      	strb	r2, [r3, #3]

    if(now_state == 0x08 && count >= BLACK_BLACK_COUNT)
 8025170:	7b7b      	ldrb	r3, [r7, #13]
 8025172:	2b08      	cmp	r3, #8
 8025174:	d10d      	bne.n	8025192 <_ZN10SideSensor12ConfirmStateEv+0x7e>
 8025176:	7bfb      	ldrb	r3, [r7, #15]
 8025178:	2b01      	cmp	r3, #1
 802517a:	d90a      	bls.n	8025192 <_ZN10SideSensor12ConfirmStateEv+0x7e>
    {
        write_state_flags_ = (write_state_flags_ & 0xF0) | 0x08;
 802517c:	687b      	ldr	r3, [r7, #4]
 802517e:	785b      	ldrb	r3, [r3, #1]
 8025180:	f023 030f 	bic.w	r3, r3, #15
 8025184:	b2db      	uxtb	r3, r3
 8025186:	f043 0308 	orr.w	r3, r3, #8
 802518a:	b2da      	uxtb	r2, r3
 802518c:	687b      	ldr	r3, [r7, #4]
 802518e:	705a      	strb	r2, [r3, #1]
 8025190:	e029      	b.n	80251e6 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x04 && count >= BLACK_WHITE_COUNT)
 8025192:	7b7b      	ldrb	r3, [r7, #13]
 8025194:	2b04      	cmp	r3, #4
 8025196:	d10a      	bne.n	80251ae <_ZN10SideSensor12ConfirmStateEv+0x9a>
 8025198:	7bfb      	ldrb	r3, [r7, #15]
 802519a:	2b00      	cmp	r3, #0
 802519c:	d007      	beq.n	80251ae <_ZN10SideSensor12ConfirmStateEv+0x9a>
    {
        write_state_flags_ |= 0x04;
 802519e:	687b      	ldr	r3, [r7, #4]
 80251a0:	785b      	ldrb	r3, [r3, #1]
 80251a2:	f043 0304 	orr.w	r3, r3, #4
 80251a6:	b2da      	uxtb	r2, r3
 80251a8:	687b      	ldr	r3, [r7, #4]
 80251aa:	705a      	strb	r2, [r3, #1]
 80251ac:	e01b      	b.n	80251e6 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x02 && count >= WHITE_BLACK_COUNT)
 80251ae:	7b7b      	ldrb	r3, [r7, #13]
 80251b0:	2b02      	cmp	r3, #2
 80251b2:	d10a      	bne.n	80251ca <_ZN10SideSensor12ConfirmStateEv+0xb6>
 80251b4:	7bfb      	ldrb	r3, [r7, #15]
 80251b6:	2b00      	cmp	r3, #0
 80251b8:	d007      	beq.n	80251ca <_ZN10SideSensor12ConfirmStateEv+0xb6>
    {
        write_state_flags_ |= 0x02;
 80251ba:	687b      	ldr	r3, [r7, #4]
 80251bc:	785b      	ldrb	r3, [r3, #1]
 80251be:	f043 0302 	orr.w	r3, r3, #2
 80251c2:	b2da      	uxtb	r2, r3
 80251c4:	687b      	ldr	r3, [r7, #4]
 80251c6:	705a      	strb	r2, [r3, #1]
 80251c8:	e00d      	b.n	80251e6 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x01 && count >= WHITE_WHITE_COUNT)
 80251ca:	7b7b      	ldrb	r3, [r7, #13]
 80251cc:	2b01      	cmp	r3, #1
 80251ce:	d10a      	bne.n	80251e6 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    {
        write_state_flags_ = (write_state_flags_ & 0xF8) | 0x01;
 80251d0:	687b      	ldr	r3, [r7, #4]
 80251d2:	785b      	ldrb	r3, [r3, #1]
 80251d4:	f023 0307 	bic.w	r3, r3, #7
 80251d8:	b2db      	uxtb	r3, r3
 80251da:	f043 0301 	orr.w	r3, r3, #1
 80251de:	b2da      	uxtb	r2, r3
 80251e0:	687b      	ldr	r3, [r7, #4]
 80251e2:	705a      	strb	r2, [r3, #1]
    }
}
 80251e4:	e7ff      	b.n	80251e6 <_ZN10SideSensor12ConfirmStateEv+0xd2>
 80251e6:	bf00      	nop
 80251e8:	3714      	adds	r7, #20
 80251ea:	46bd      	mov	sp, r7
 80251ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251f0:	4770      	bx	lr

080251f2 <_ZN10SideSensor7CountUpEv>:

void SideSensor::CountUp()
{
 80251f2:	b480      	push	{r7}
 80251f4:	b085      	sub	sp, #20
 80251f6:	af00      	add	r7, sp, #0
 80251f8:	6078      	str	r0, [r7, #4]
    uint8_t state = write_state_flags_;
 80251fa:	687b      	ldr	r3, [r7, #4]
 80251fc:	785b      	ldrb	r3, [r3, #1]
 80251fe:	73fb      	strb	r3, [r7, #15]
    uint8_t black_flag   = (state & 0x08) >> 3;
 8025200:	7bfb      	ldrb	r3, [r7, #15]
 8025202:	10db      	asrs	r3, r3, #3
 8025204:	b2db      	uxtb	r3, r3
 8025206:	f003 0301 	and.w	r3, r3, #1
 802520a:	73bb      	strb	r3, [r7, #14]
    uint8_t goal_flag    = (state & 0x04) >> 2;
 802520c:	7bfb      	ldrb	r3, [r7, #15]
 802520e:	109b      	asrs	r3, r3, #2
 8025210:	b2db      	uxtb	r3, r3
 8025212:	f003 0301 	and.w	r3, r3, #1
 8025216:	737b      	strb	r3, [r7, #13]
    uint8_t corner_flag  = (state & 0x02) >> 1;
 8025218:	7bfb      	ldrb	r3, [r7, #15]
 802521a:	105b      	asrs	r3, r3, #1
 802521c:	b2db      	uxtb	r3, r3
 802521e:	f003 0301 	and.w	r3, r3, #1
 8025222:	733b      	strb	r3, [r7, #12]
    uint8_t cross_flag   =  state & 0x01;
 8025224:	7bfb      	ldrb	r3, [r7, #15]
 8025226:	f003 0301 	and.w	r3, r3, #1
 802522a:	72fb      	strb	r3, [r7, #11]
    uint8_t goal_reach   = (state & 0x80) >> 7;
 802522c:	7bfb      	ldrb	r3, [r7, #15]
 802522e:	09db      	lsrs	r3, r3, #7
 8025230:	72bb      	strb	r3, [r7, #10]
    uint8_t corner_reach = (state & 0x40) >> 6;
 8025232:	7bfb      	ldrb	r3, [r7, #15]
 8025234:	119b      	asrs	r3, r3, #6
 8025236:	b2db      	uxtb	r3, r3
 8025238:	f003 0301 	and.w	r3, r3, #1
 802523c:	727b      	strb	r3, [r7, #9]
    uint8_t cross_reach  = (state & 0x20) >> 5;
 802523e:	7bfb      	ldrb	r3, [r7, #15]
 8025240:	115b      	asrs	r3, r3, #5
 8025242:	b2db      	uxtb	r3, r3
 8025244:	f003 0301 	and.w	r3, r3, #1
 8025248:	723b      	strb	r3, [r7, #8]

    if(cross_flag == 0x01 && black_flag == 0x01)
 802524a:	7afb      	ldrb	r3, [r7, #11]
 802524c:	2b01      	cmp	r3, #1
 802524e:	d10b      	bne.n	8025268 <_ZN10SideSensor7CountUpEv+0x76>
 8025250:	7bbb      	ldrb	r3, [r7, #14]
 8025252:	2b01      	cmp	r3, #1
 8025254:	d108      	bne.n	8025268 <_ZN10SideSensor7CountUpEv+0x76>
    {
        state &= 0xF7; // black_flag = false
 8025256:	7bfb      	ldrb	r3, [r7, #15]
 8025258:	f023 0308 	bic.w	r3, r3, #8
 802525c:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 802525e:	7bfb      	ldrb	r3, [r7, #15]
 8025260:	f043 0320 	orr.w	r3, r3, #32
 8025264:	73fb      	strb	r3, [r7, #15]
 8025266:	e02d      	b.n	80252c4 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && goal_reach == 0x01)
 8025268:	7afb      	ldrb	r3, [r7, #11]
 802526a:	2b01      	cmp	r3, #1
 802526c:	d10b      	bne.n	8025286 <_ZN10SideSensor7CountUpEv+0x94>
 802526e:	7abb      	ldrb	r3, [r7, #10]
 8025270:	2b01      	cmp	r3, #1
 8025272:	d108      	bne.n	8025286 <_ZN10SideSensor7CountUpEv+0x94>
    {
        state &= 0x7F; // goal_reach = false
 8025274:	7bfb      	ldrb	r3, [r7, #15]
 8025276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802527a:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 802527c:	7bfb      	ldrb	r3, [r7, #15]
 802527e:	f043 0320 	orr.w	r3, r3, #32
 8025282:	73fb      	strb	r3, [r7, #15]
 8025284:	e01e      	b.n	80252c4 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && corner_reach == 0x01)
 8025286:	7afb      	ldrb	r3, [r7, #11]
 8025288:	2b01      	cmp	r3, #1
 802528a:	d10b      	bne.n	80252a4 <_ZN10SideSensor7CountUpEv+0xb2>
 802528c:	7a7b      	ldrb	r3, [r7, #9]
 802528e:	2b01      	cmp	r3, #1
 8025290:	d108      	bne.n	80252a4 <_ZN10SideSensor7CountUpEv+0xb2>
    {
        state &= 0xBF; // corner_reach = false
 8025292:	7bfb      	ldrb	r3, [r7, #15]
 8025294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8025298:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 802529a:	7bfb      	ldrb	r3, [r7, #15]
 802529c:	f043 0320 	orr.w	r3, r3, #32
 80252a0:	73fb      	strb	r3, [r7, #15]
 80252a2:	e00f      	b.n	80252c4 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_reach == 0x01 && black_flag == 0x01)
 80252a4:	7a3b      	ldrb	r3, [r7, #8]
 80252a6:	2b01      	cmp	r3, #1
 80252a8:	d10c      	bne.n	80252c4 <_ZN10SideSensor7CountUpEv+0xd2>
 80252aa:	7bbb      	ldrb	r3, [r7, #14]
 80252ac:	2b01      	cmp	r3, #1
 80252ae:	d109      	bne.n	80252c4 <_ZN10SideSensor7CountUpEv+0xd2>
    {
        state &= 0xDF; // cross_reach = false
 80252b0:	7bfb      	ldrb	r3, [r7, #15]
 80252b2:	f023 0320 	bic.w	r3, r3, #32
 80252b6:	73fb      	strb	r3, [r7, #15]
        cross_line_count_++;
 80252b8:	687b      	ldr	r3, [r7, #4]
 80252ba:	799b      	ldrb	r3, [r3, #6]
 80252bc:	3301      	adds	r3, #1
 80252be:	b2da      	uxtb	r2, r3
 80252c0:	687b      	ldr	r3, [r7, #4]
 80252c2:	719a      	strb	r2, [r3, #6]
    }

    black_flag   = (state & 0x08) >> 3;
 80252c4:	7bfb      	ldrb	r3, [r7, #15]
 80252c6:	10db      	asrs	r3, r3, #3
 80252c8:	b2db      	uxtb	r3, r3
 80252ca:	f003 0301 	and.w	r3, r3, #1
 80252ce:	73bb      	strb	r3, [r7, #14]
    goal_reach   = (state & 0x80) >> 7;
 80252d0:	7bfb      	ldrb	r3, [r7, #15]
 80252d2:	09db      	lsrs	r3, r3, #7
 80252d4:	72bb      	strb	r3, [r7, #10]
    corner_reach = (state & 0x40) >> 6;
 80252d6:	7bfb      	ldrb	r3, [r7, #15]
 80252d8:	119b      	asrs	r3, r3, #6
 80252da:	b2db      	uxtb	r3, r3
 80252dc:	f003 0301 	and.w	r3, r3, #1
 80252e0:	727b      	strb	r3, [r7, #9]
    
    if(goal_flag == 0x01 && black_flag == 0x01)
 80252e2:	7b7b      	ldrb	r3, [r7, #13]
 80252e4:	2b01      	cmp	r3, #1
 80252e6:	d10b      	bne.n	8025300 <_ZN10SideSensor7CountUpEv+0x10e>
 80252e8:	7bbb      	ldrb	r3, [r7, #14]
 80252ea:	2b01      	cmp	r3, #1
 80252ec:	d108      	bne.n	8025300 <_ZN10SideSensor7CountUpEv+0x10e>
    {
        state &= 0xF7; // black_flag = false
 80252ee:	7bfb      	ldrb	r3, [r7, #15]
 80252f0:	f023 0308 	bic.w	r3, r3, #8
 80252f4:	73fb      	strb	r3, [r7, #15]
        state |= 0x80; // goal_reach = true
 80252f6:	7bfb      	ldrb	r3, [r7, #15]
 80252f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80252fc:	73fb      	strb	r3, [r7, #15]
 80252fe:	e02f      	b.n	8025360 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(goal_reach == 0x01 && black_flag == 0x01)
 8025300:	7abb      	ldrb	r3, [r7, #10]
 8025302:	2b01      	cmp	r3, #1
 8025304:	d10d      	bne.n	8025322 <_ZN10SideSensor7CountUpEv+0x130>
 8025306:	7bbb      	ldrb	r3, [r7, #14]
 8025308:	2b01      	cmp	r3, #1
 802530a:	d10a      	bne.n	8025322 <_ZN10SideSensor7CountUpEv+0x130>
    {
        state &= 0x7F; // goal_reach = false
 802530c:	7bfb      	ldrb	r3, [r7, #15]
 802530e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025312:	73fb      	strb	r3, [r7, #15]
        goal_marker_count_++;
 8025314:	687b      	ldr	r3, [r7, #4]
 8025316:	791b      	ldrb	r3, [r3, #4]
 8025318:	3301      	adds	r3, #1
 802531a:	b2da      	uxtb	r2, r3
 802531c:	687b      	ldr	r3, [r7, #4]
 802531e:	711a      	strb	r2, [r3, #4]
 8025320:	e01e      	b.n	8025360 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_flag == 0x01 && black_flag == 0x01)
 8025322:	7b3b      	ldrb	r3, [r7, #12]
 8025324:	2b01      	cmp	r3, #1
 8025326:	d10b      	bne.n	8025340 <_ZN10SideSensor7CountUpEv+0x14e>
 8025328:	7bbb      	ldrb	r3, [r7, #14]
 802532a:	2b01      	cmp	r3, #1
 802532c:	d108      	bne.n	8025340 <_ZN10SideSensor7CountUpEv+0x14e>
    {
        state &= 0xF7; // black_flag = false
 802532e:	7bfb      	ldrb	r3, [r7, #15]
 8025330:	f023 0308 	bic.w	r3, r3, #8
 8025334:	73fb      	strb	r3, [r7, #15]
        state |= 0x40; // corner_reach = true
 8025336:	7bfb      	ldrb	r3, [r7, #15]
 8025338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802533c:	73fb      	strb	r3, [r7, #15]
 802533e:	e00f      	b.n	8025360 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_reach == 0x01 && black_flag == 0x01)
 8025340:	7a7b      	ldrb	r3, [r7, #9]
 8025342:	2b01      	cmp	r3, #1
 8025344:	d10c      	bne.n	8025360 <_ZN10SideSensor7CountUpEv+0x16e>
 8025346:	7bbb      	ldrb	r3, [r7, #14]
 8025348:	2b01      	cmp	r3, #1
 802534a:	d109      	bne.n	8025360 <_ZN10SideSensor7CountUpEv+0x16e>
    {
        state &= 0xBF; // corner_reach = false
 802534c:	7bfb      	ldrb	r3, [r7, #15]
 802534e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8025352:	73fb      	strb	r3, [r7, #15]
        corner_marker_count_++;
 8025354:	687b      	ldr	r3, [r7, #4]
 8025356:	795b      	ldrb	r3, [r3, #5]
 8025358:	3301      	adds	r3, #1
 802535a:	b2da      	uxtb	r2, r3
 802535c:	687b      	ldr	r3, [r7, #4]
 802535e:	715a      	strb	r2, [r3, #5]
    }

    write_state_flags_ = state;
 8025360:	687b      	ldr	r3, [r7, #4]
 8025362:	7bfa      	ldrb	r2, [r7, #15]
 8025364:	705a      	strb	r2, [r3, #1]
}
 8025366:	bf00      	nop
 8025368:	3714      	adds	r7, #20
 802536a:	46bd      	mov	sp, r7
 802536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025370:	4770      	bx	lr

08025372 <_ZN10SideSensor18GetGoalMarkerCountEv>:

uint8_t SideSensor::GetGoalMarkerCount()
{
 8025372:	b480      	push	{r7}
 8025374:	b083      	sub	sp, #12
 8025376:	af00      	add	r7, sp, #0
 8025378:	6078      	str	r0, [r7, #4]
    return goal_marker_count_;
 802537a:	687b      	ldr	r3, [r7, #4]
 802537c:	791b      	ldrb	r3, [r3, #4]
}
 802537e:	4618      	mov	r0, r3
 8025380:	370c      	adds	r7, #12
 8025382:	46bd      	mov	sp, r7
 8025384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025388:	4770      	bx	lr

0802538a <_ZN10SideSensor20GetCornerMarkerCountEv>:

uint8_t SideSensor::GetCornerMarkerCount()
{
 802538a:	b480      	push	{r7}
 802538c:	b083      	sub	sp, #12
 802538e:	af00      	add	r7, sp, #0
 8025390:	6078      	str	r0, [r7, #4]
    return corner_marker_count_;
 8025392:	687b      	ldr	r3, [r7, #4]
 8025394:	795b      	ldrb	r3, [r3, #5]
}
 8025396:	4618      	mov	r0, r3
 8025398:	370c      	adds	r7, #12
 802539a:	46bd      	mov	sp, r7
 802539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253a0:	4770      	bx	lr

080253a2 <_ZN10SideSensor17GetCrossLineCountEv>:

uint8_t SideSensor::GetCrossLineCount()
{
 80253a2:	b480      	push	{r7}
 80253a4:	b083      	sub	sp, #12
 80253a6:	af00      	add	r7, sp, #0
 80253a8:	6078      	str	r0, [r7, #4]
    return cross_line_count_;
 80253aa:	687b      	ldr	r3, [r7, #4]
 80253ac:	799b      	ldrb	r3, [r3, #6]
}
 80253ae:	4618      	mov	r0, r3
 80253b0:	370c      	adds	r7, #12
 80253b2:	46bd      	mov	sp, r7
 80253b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253b8:	4770      	bx	lr
	...

080253bc <_ZN10SideSensor7MonitorEv>:

#ifdef DEBUG_MODE
void SideSensor::Monitor()
{
 80253bc:	b480      	push	{r7}
 80253be:	b083      	sub	sp, #12
 80253c0:	af00      	add	r7, sp, #0
 80253c2:	6078      	str	r0, [r7, #4]
    /* read_state_flags_ */
    g_side_pre_state = (read_state_flags_ & 0xF0) >> 4;
 80253c4:	687b      	ldr	r3, [r7, #4]
 80253c6:	781b      	ldrb	r3, [r3, #0]
 80253c8:	091b      	lsrs	r3, r3, #4
 80253ca:	b2da      	uxtb	r2, r3
 80253cc:	4b3a      	ldr	r3, [pc, #232]	; (80254b8 <_ZN10SideSensor7MonitorEv+0xfc>)
 80253ce:	701a      	strb	r2, [r3, #0]
    g_side_now_state =  read_state_flags_ & 0x0F;
 80253d0:	687b      	ldr	r3, [r7, #4]
 80253d2:	781b      	ldrb	r3, [r3, #0]
 80253d4:	f003 030f 	and.w	r3, r3, #15
 80253d8:	b2da      	uxtb	r2, r3
 80253da:	4b38      	ldr	r3, [pc, #224]	; (80254bc <_ZN10SideSensor7MonitorEv+0x100>)
 80253dc:	701a      	strb	r2, [r3, #0]

    if(g_side_pre_state != g_side_now_state) g_side_change_state_count++;
 80253de:	4b36      	ldr	r3, [pc, #216]	; (80254b8 <_ZN10SideSensor7MonitorEv+0xfc>)
 80253e0:	781a      	ldrb	r2, [r3, #0]
 80253e2:	4b36      	ldr	r3, [pc, #216]	; (80254bc <_ZN10SideSensor7MonitorEv+0x100>)
 80253e4:	781b      	ldrb	r3, [r3, #0]
 80253e6:	429a      	cmp	r2, r3
 80253e8:	d004      	beq.n	80253f4 <_ZN10SideSensor7MonitorEv+0x38>
 80253ea:	4b35      	ldr	r3, [pc, #212]	; (80254c0 <_ZN10SideSensor7MonitorEv+0x104>)
 80253ec:	681b      	ldr	r3, [r3, #0]
 80253ee:	3301      	adds	r3, #1
 80253f0:	4a33      	ldr	r2, [pc, #204]	; (80254c0 <_ZN10SideSensor7MonitorEv+0x104>)
 80253f2:	6013      	str	r3, [r2, #0]

    /* write_state_flags_ upper bit */
    g_side_goal_reach   = (write_state_flags_ & 0x80) >> 7;
 80253f4:	687b      	ldr	r3, [r7, #4]
 80253f6:	785b      	ldrb	r3, [r3, #1]
 80253f8:	09db      	lsrs	r3, r3, #7
 80253fa:	b2da      	uxtb	r2, r3
 80253fc:	4b31      	ldr	r3, [pc, #196]	; (80254c4 <_ZN10SideSensor7MonitorEv+0x108>)
 80253fe:	701a      	strb	r2, [r3, #0]
    g_side_corner_reach = (write_state_flags_ & 0x40) >> 6;
 8025400:	687b      	ldr	r3, [r7, #4]
 8025402:	785b      	ldrb	r3, [r3, #1]
 8025404:	119b      	asrs	r3, r3, #6
 8025406:	b2db      	uxtb	r3, r3
 8025408:	f003 0301 	and.w	r3, r3, #1
 802540c:	b2da      	uxtb	r2, r3
 802540e:	4b2e      	ldr	r3, [pc, #184]	; (80254c8 <_ZN10SideSensor7MonitorEv+0x10c>)
 8025410:	701a      	strb	r2, [r3, #0]
    g_side_cross_reach  = (write_state_flags_ & 0x20) >> 5;
 8025412:	687b      	ldr	r3, [r7, #4]
 8025414:	785b      	ldrb	r3, [r3, #1]
 8025416:	115b      	asrs	r3, r3, #5
 8025418:	b2db      	uxtb	r3, r3
 802541a:	f003 0301 	and.w	r3, r3, #1
 802541e:	b2da      	uxtb	r2, r3
 8025420:	4b2a      	ldr	r3, [pc, #168]	; (80254cc <_ZN10SideSensor7MonitorEv+0x110>)
 8025422:	701a      	strb	r2, [r3, #0]

    /* write_state_flags_ lower bit */
    g_side_black_flag  = (write_state_flags_ & 0x08) >> 3;
 8025424:	687b      	ldr	r3, [r7, #4]
 8025426:	785b      	ldrb	r3, [r3, #1]
 8025428:	10db      	asrs	r3, r3, #3
 802542a:	b2db      	uxtb	r3, r3
 802542c:	f003 0301 	and.w	r3, r3, #1
 8025430:	b2da      	uxtb	r2, r3
 8025432:	4b27      	ldr	r3, [pc, #156]	; (80254d0 <_ZN10SideSensor7MonitorEv+0x114>)
 8025434:	701a      	strb	r2, [r3, #0]
    g_side_goal_flag   = (write_state_flags_ & 0x04) >> 2;
 8025436:	687b      	ldr	r3, [r7, #4]
 8025438:	785b      	ldrb	r3, [r3, #1]
 802543a:	109b      	asrs	r3, r3, #2
 802543c:	b2db      	uxtb	r3, r3
 802543e:	f003 0301 	and.w	r3, r3, #1
 8025442:	b2da      	uxtb	r2, r3
 8025444:	4b23      	ldr	r3, [pc, #140]	; (80254d4 <_ZN10SideSensor7MonitorEv+0x118>)
 8025446:	701a      	strb	r2, [r3, #0]
    g_side_corner_flag = (write_state_flags_ & 0x02) >> 1;
 8025448:	687b      	ldr	r3, [r7, #4]
 802544a:	785b      	ldrb	r3, [r3, #1]
 802544c:	105b      	asrs	r3, r3, #1
 802544e:	b2db      	uxtb	r3, r3
 8025450:	f003 0301 	and.w	r3, r3, #1
 8025454:	b2da      	uxtb	r2, r3
 8025456:	4b20      	ldr	r3, [pc, #128]	; (80254d8 <_ZN10SideSensor7MonitorEv+0x11c>)
 8025458:	701a      	strb	r2, [r3, #0]
    g_side_cross_flag  =  write_state_flags_ & 0x01;
 802545a:	687b      	ldr	r3, [r7, #4]
 802545c:	785b      	ldrb	r3, [r3, #1]
 802545e:	f003 0301 	and.w	r3, r3, #1
 8025462:	b2da      	uxtb	r2, r3
 8025464:	4b1d      	ldr	r3, [pc, #116]	; (80254dc <_ZN10SideSensor7MonitorEv+0x120>)
 8025466:	701a      	strb	r2, [r3, #0]

    /* exception_flags_ */
    g_side_before_noise_state = (exception_flags_ & 0xF0) >> 4;
 8025468:	687b      	ldr	r3, [r7, #4]
 802546a:	789b      	ldrb	r3, [r3, #2]
 802546c:	091b      	lsrs	r3, r3, #4
 802546e:	b2da      	uxtb	r2, r3
 8025470:	4b1b      	ldr	r3, [pc, #108]	; (80254e0 <_ZN10SideSensor7MonitorEv+0x124>)
 8025472:	701a      	strb	r2, [r3, #0]
    g_side_noise_count        = (exception_flags_ & 0x0C) >> 2;
 8025474:	687b      	ldr	r3, [r7, #4]
 8025476:	789b      	ldrb	r3, [r3, #2]
 8025478:	109b      	asrs	r3, r3, #2
 802547a:	b2db      	uxtb	r3, r3
 802547c:	f003 0303 	and.w	r3, r3, #3
 8025480:	b2da      	uxtb	r2, r3
 8025482:	4b18      	ldr	r3, [pc, #96]	; (80254e4 <_ZN10SideSensor7MonitorEv+0x128>)
 8025484:	701a      	strb	r2, [r3, #0]
    g_side_ignore_flag        =  exception_flags_ & 0x01;
 8025486:	687b      	ldr	r3, [r7, #4]
 8025488:	789b      	ldrb	r3, [r3, #2]
 802548a:	f003 0301 	and.w	r3, r3, #1
 802548e:	b2da      	uxtb	r2, r3
 8025490:	4b15      	ldr	r3, [pc, #84]	; (80254e8 <_ZN10SideSensor7MonitorEv+0x12c>)
 8025492:	701a      	strb	r2, [r3, #0]

    g_goal_count   = goal_marker_count_;
 8025494:	687b      	ldr	r3, [r7, #4]
 8025496:	791a      	ldrb	r2, [r3, #4]
 8025498:	4b14      	ldr	r3, [pc, #80]	; (80254ec <_ZN10SideSensor7MonitorEv+0x130>)
 802549a:	701a      	strb	r2, [r3, #0]
    g_corner_count = corner_marker_count_;
 802549c:	687b      	ldr	r3, [r7, #4]
 802549e:	795a      	ldrb	r2, [r3, #5]
 80254a0:	4b13      	ldr	r3, [pc, #76]	; (80254f0 <_ZN10SideSensor7MonitorEv+0x134>)
 80254a2:	701a      	strb	r2, [r3, #0]
    g_cross_count  = cross_line_count_;
 80254a4:	687b      	ldr	r3, [r7, #4]
 80254a6:	799a      	ldrb	r2, [r3, #6]
 80254a8:	4b12      	ldr	r3, [pc, #72]	; (80254f4 <_ZN10SideSensor7MonitorEv+0x138>)
 80254aa:	701a      	strb	r2, [r3, #0]
}
 80254ac:	bf00      	nop
 80254ae:	370c      	adds	r7, #12
 80254b0:	46bd      	mov	sp, r7
 80254b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254b6:	4770      	bx	lr
 80254b8:	20000234 	.word	0x20000234
 80254bc:	20000235 	.word	0x20000235
 80254c0:	20000238 	.word	0x20000238
 80254c4:	2000023c 	.word	0x2000023c
 80254c8:	2000023d 	.word	0x2000023d
 80254cc:	2000023e 	.word	0x2000023e
 80254d0:	2000023f 	.word	0x2000023f
 80254d4:	20000240 	.word	0x20000240
 80254d8:	20000241 	.word	0x20000241
 80254dc:	20000242 	.word	0x20000242
 80254e0:	20000243 	.word	0x20000243
 80254e4:	20000244 	.word	0x20000244
 80254e8:	20000245 	.word	0x20000245
 80254ec:	20000246 	.word	0x20000246
 80254f0:	20000247 	.word	0x20000247
 80254f4:	20000248 	.word	0x20000248

080254f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80254f8:	b480      	push	{r7}
 80254fa:	b083      	sub	sp, #12
 80254fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80254fe:	2300      	movs	r3, #0
 8025500:	607b      	str	r3, [r7, #4]
 8025502:	4b10      	ldr	r3, [pc, #64]	; (8025544 <HAL_MspInit+0x4c>)
 8025504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025506:	4a0f      	ldr	r2, [pc, #60]	; (8025544 <HAL_MspInit+0x4c>)
 8025508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802550c:	6453      	str	r3, [r2, #68]	; 0x44
 802550e:	4b0d      	ldr	r3, [pc, #52]	; (8025544 <HAL_MspInit+0x4c>)
 8025510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8025516:	607b      	str	r3, [r7, #4]
 8025518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802551a:	2300      	movs	r3, #0
 802551c:	603b      	str	r3, [r7, #0]
 802551e:	4b09      	ldr	r3, [pc, #36]	; (8025544 <HAL_MspInit+0x4c>)
 8025520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025522:	4a08      	ldr	r2, [pc, #32]	; (8025544 <HAL_MspInit+0x4c>)
 8025524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8025528:	6413      	str	r3, [r2, #64]	; 0x40
 802552a:	4b06      	ldr	r3, [pc, #24]	; (8025544 <HAL_MspInit+0x4c>)
 802552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802552e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025532:	603b      	str	r3, [r7, #0]
 8025534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8025536:	bf00      	nop
 8025538:	370c      	adds	r7, #12
 802553a:	46bd      	mov	sp, r7
 802553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025540:	4770      	bx	lr
 8025542:	bf00      	nop
 8025544:	40023800 	.word	0x40023800

08025548 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8025548:	b580      	push	{r7, lr}
 802554a:	b08a      	sub	sp, #40	; 0x28
 802554c:	af00      	add	r7, sp, #0
 802554e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025550:	f107 0314 	add.w	r3, r7, #20
 8025554:	2200      	movs	r2, #0
 8025556:	601a      	str	r2, [r3, #0]
 8025558:	605a      	str	r2, [r3, #4]
 802555a:	609a      	str	r2, [r3, #8]
 802555c:	60da      	str	r2, [r3, #12]
 802555e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8025560:	687b      	ldr	r3, [r7, #4]
 8025562:	681b      	ldr	r3, [r3, #0]
 8025564:	4a3c      	ldr	r2, [pc, #240]	; (8025658 <HAL_ADC_MspInit+0x110>)
 8025566:	4293      	cmp	r3, r2
 8025568:	d171      	bne.n	802564e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 802556a:	2300      	movs	r3, #0
 802556c:	613b      	str	r3, [r7, #16]
 802556e:	4b3b      	ldr	r3, [pc, #236]	; (802565c <HAL_ADC_MspInit+0x114>)
 8025570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025572:	4a3a      	ldr	r2, [pc, #232]	; (802565c <HAL_ADC_MspInit+0x114>)
 8025574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8025578:	6453      	str	r3, [r2, #68]	; 0x44
 802557a:	4b38      	ldr	r3, [pc, #224]	; (802565c <HAL_ADC_MspInit+0x114>)
 802557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802557e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025582:	613b      	str	r3, [r7, #16]
 8025584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025586:	2300      	movs	r3, #0
 8025588:	60fb      	str	r3, [r7, #12]
 802558a:	4b34      	ldr	r3, [pc, #208]	; (802565c <HAL_ADC_MspInit+0x114>)
 802558c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802558e:	4a33      	ldr	r2, [pc, #204]	; (802565c <HAL_ADC_MspInit+0x114>)
 8025590:	f043 0304 	orr.w	r3, r3, #4
 8025594:	6313      	str	r3, [r2, #48]	; 0x30
 8025596:	4b31      	ldr	r3, [pc, #196]	; (802565c <HAL_ADC_MspInit+0x114>)
 8025598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802559a:	f003 0304 	and.w	r3, r3, #4
 802559e:	60fb      	str	r3, [r7, #12]
 80255a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80255a2:	2300      	movs	r3, #0
 80255a4:	60bb      	str	r3, [r7, #8]
 80255a6:	4b2d      	ldr	r3, [pc, #180]	; (802565c <HAL_ADC_MspInit+0x114>)
 80255a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80255aa:	4a2c      	ldr	r2, [pc, #176]	; (802565c <HAL_ADC_MspInit+0x114>)
 80255ac:	f043 0301 	orr.w	r3, r3, #1
 80255b0:	6313      	str	r3, [r2, #48]	; 0x30
 80255b2:	4b2a      	ldr	r3, [pc, #168]	; (802565c <HAL_ADC_MspInit+0x114>)
 80255b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80255b6:	f003 0301 	and.w	r3, r3, #1
 80255ba:	60bb      	str	r3, [r7, #8]
 80255bc:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80255be:	233f      	movs	r3, #63	; 0x3f
 80255c0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80255c2:	2303      	movs	r3, #3
 80255c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80255c6:	2300      	movs	r3, #0
 80255c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80255ca:	f107 0314 	add.w	r3, r7, #20
 80255ce:	4619      	mov	r1, r3
 80255d0:	4823      	ldr	r0, [pc, #140]	; (8025660 <HAL_ADC_MspInit+0x118>)
 80255d2:	f002 f9a5 	bl	8027920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80255d6:	23ff      	movs	r3, #255	; 0xff
 80255d8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80255da:	2303      	movs	r3, #3
 80255dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80255de:	2300      	movs	r3, #0
 80255e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80255e2:	f107 0314 	add.w	r3, r7, #20
 80255e6:	4619      	mov	r1, r3
 80255e8:	481e      	ldr	r0, [pc, #120]	; (8025664 <HAL_ADC_MspInit+0x11c>)
 80255ea:	f002 f999 	bl	8027920 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80255ee:	4b1e      	ldr	r3, [pc, #120]	; (8025668 <HAL_ADC_MspInit+0x120>)
 80255f0:	4a1e      	ldr	r2, [pc, #120]	; (802566c <HAL_ADC_MspInit+0x124>)
 80255f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80255f4:	4b1c      	ldr	r3, [pc, #112]	; (8025668 <HAL_ADC_MspInit+0x120>)
 80255f6:	2200      	movs	r2, #0
 80255f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80255fa:	4b1b      	ldr	r3, [pc, #108]	; (8025668 <HAL_ADC_MspInit+0x120>)
 80255fc:	2200      	movs	r2, #0
 80255fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8025600:	4b19      	ldr	r3, [pc, #100]	; (8025668 <HAL_ADC_MspInit+0x120>)
 8025602:	2200      	movs	r2, #0
 8025604:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8025606:	4b18      	ldr	r3, [pc, #96]	; (8025668 <HAL_ADC_MspInit+0x120>)
 8025608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802560c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 802560e:	4b16      	ldr	r3, [pc, #88]	; (8025668 <HAL_ADC_MspInit+0x120>)
 8025610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8025614:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8025616:	4b14      	ldr	r3, [pc, #80]	; (8025668 <HAL_ADC_MspInit+0x120>)
 8025618:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802561c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 802561e:	4b12      	ldr	r3, [pc, #72]	; (8025668 <HAL_ADC_MspInit+0x120>)
 8025620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8025624:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8025626:	4b10      	ldr	r3, [pc, #64]	; (8025668 <HAL_ADC_MspInit+0x120>)
 8025628:	2200      	movs	r2, #0
 802562a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802562c:	4b0e      	ldr	r3, [pc, #56]	; (8025668 <HAL_ADC_MspInit+0x120>)
 802562e:	2200      	movs	r2, #0
 8025630:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8025632:	480d      	ldr	r0, [pc, #52]	; (8025668 <HAL_ADC_MspInit+0x120>)
 8025634:	f001 fb30 	bl	8026c98 <HAL_DMA_Init>
 8025638:	4603      	mov	r3, r0
 802563a:	2b00      	cmp	r3, #0
 802563c:	d001      	beq.n	8025642 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 802563e:	f7fe fb9f 	bl	8023d80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8025642:	687b      	ldr	r3, [r7, #4]
 8025644:	4a08      	ldr	r2, [pc, #32]	; (8025668 <HAL_ADC_MspInit+0x120>)
 8025646:	639a      	str	r2, [r3, #56]	; 0x38
 8025648:	4a07      	ldr	r2, [pc, #28]	; (8025668 <HAL_ADC_MspInit+0x120>)
 802564a:	687b      	ldr	r3, [r7, #4]
 802564c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 802564e:	bf00      	nop
 8025650:	3728      	adds	r7, #40	; 0x28
 8025652:	46bd      	mov	sp, r7
 8025654:	bd80      	pop	{r7, pc}
 8025656:	bf00      	nop
 8025658:	40012000 	.word	0x40012000
 802565c:	40023800 	.word	0x40023800
 8025660:	40020800 	.word	0x40020800
 8025664:	40020000 	.word	0x40020000
 8025668:	20000820 	.word	0x20000820
 802566c:	40026410 	.word	0x40026410

08025670 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8025670:	b580      	push	{r7, lr}
 8025672:	b08a      	sub	sp, #40	; 0x28
 8025674:	af00      	add	r7, sp, #0
 8025676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025678:	f107 0314 	add.w	r3, r7, #20
 802567c:	2200      	movs	r2, #0
 802567e:	601a      	str	r2, [r3, #0]
 8025680:	605a      	str	r2, [r3, #4]
 8025682:	609a      	str	r2, [r3, #8]
 8025684:	60da      	str	r2, [r3, #12]
 8025686:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8025688:	687b      	ldr	r3, [r7, #4]
 802568a:	681b      	ldr	r3, [r3, #0]
 802568c:	4a19      	ldr	r2, [pc, #100]	; (80256f4 <HAL_I2C_MspInit+0x84>)
 802568e:	4293      	cmp	r3, r2
 8025690:	d12c      	bne.n	80256ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025692:	2300      	movs	r3, #0
 8025694:	613b      	str	r3, [r7, #16]
 8025696:	4b18      	ldr	r3, [pc, #96]	; (80256f8 <HAL_I2C_MspInit+0x88>)
 8025698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802569a:	4a17      	ldr	r2, [pc, #92]	; (80256f8 <HAL_I2C_MspInit+0x88>)
 802569c:	f043 0302 	orr.w	r3, r3, #2
 80256a0:	6313      	str	r3, [r2, #48]	; 0x30
 80256a2:	4b15      	ldr	r3, [pc, #84]	; (80256f8 <HAL_I2C_MspInit+0x88>)
 80256a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80256a6:	f003 0302 	and.w	r3, r3, #2
 80256aa:	613b      	str	r3, [r7, #16]
 80256ac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80256ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80256b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80256b4:	2312      	movs	r3, #18
 80256b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80256b8:	2301      	movs	r3, #1
 80256ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80256bc:	2303      	movs	r3, #3
 80256be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80256c0:	2304      	movs	r3, #4
 80256c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80256c4:	f107 0314 	add.w	r3, r7, #20
 80256c8:	4619      	mov	r1, r3
 80256ca:	480c      	ldr	r0, [pc, #48]	; (80256fc <HAL_I2C_MspInit+0x8c>)
 80256cc:	f002 f928 	bl	8027920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80256d0:	2300      	movs	r3, #0
 80256d2:	60fb      	str	r3, [r7, #12]
 80256d4:	4b08      	ldr	r3, [pc, #32]	; (80256f8 <HAL_I2C_MspInit+0x88>)
 80256d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80256d8:	4a07      	ldr	r2, [pc, #28]	; (80256f8 <HAL_I2C_MspInit+0x88>)
 80256da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80256de:	6413      	str	r3, [r2, #64]	; 0x40
 80256e0:	4b05      	ldr	r3, [pc, #20]	; (80256f8 <HAL_I2C_MspInit+0x88>)
 80256e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80256e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80256e8:	60fb      	str	r3, [r7, #12]
 80256ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80256ec:	bf00      	nop
 80256ee:	3728      	adds	r7, #40	; 0x28
 80256f0:	46bd      	mov	sp, r7
 80256f2:	bd80      	pop	{r7, pc}
 80256f4:	40005800 	.word	0x40005800
 80256f8:	40023800 	.word	0x40023800
 80256fc:	40020400 	.word	0x40020400

08025700 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8025700:	b580      	push	{r7, lr}
 8025702:	b08a      	sub	sp, #40	; 0x28
 8025704:	af00      	add	r7, sp, #0
 8025706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025708:	f107 0314 	add.w	r3, r7, #20
 802570c:	2200      	movs	r2, #0
 802570e:	601a      	str	r2, [r3, #0]
 8025710:	605a      	str	r2, [r3, #4]
 8025712:	609a      	str	r2, [r3, #8]
 8025714:	60da      	str	r2, [r3, #12]
 8025716:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8025718:	687b      	ldr	r3, [r7, #4]
 802571a:	681b      	ldr	r3, [r3, #0]
 802571c:	4a19      	ldr	r2, [pc, #100]	; (8025784 <HAL_SPI_MspInit+0x84>)
 802571e:	4293      	cmp	r3, r2
 8025720:	d12c      	bne.n	802577c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8025722:	2300      	movs	r3, #0
 8025724:	613b      	str	r3, [r7, #16]
 8025726:	4b18      	ldr	r3, [pc, #96]	; (8025788 <HAL_SPI_MspInit+0x88>)
 8025728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802572a:	4a17      	ldr	r2, [pc, #92]	; (8025788 <HAL_SPI_MspInit+0x88>)
 802572c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8025730:	6413      	str	r3, [r2, #64]	; 0x40
 8025732:	4b15      	ldr	r3, [pc, #84]	; (8025788 <HAL_SPI_MspInit+0x88>)
 8025734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802573a:	613b      	str	r3, [r7, #16]
 802573c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802573e:	2300      	movs	r3, #0
 8025740:	60fb      	str	r3, [r7, #12]
 8025742:	4b11      	ldr	r3, [pc, #68]	; (8025788 <HAL_SPI_MspInit+0x88>)
 8025744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025746:	4a10      	ldr	r2, [pc, #64]	; (8025788 <HAL_SPI_MspInit+0x88>)
 8025748:	f043 0304 	orr.w	r3, r3, #4
 802574c:	6313      	str	r3, [r2, #48]	; 0x30
 802574e:	4b0e      	ldr	r3, [pc, #56]	; (8025788 <HAL_SPI_MspInit+0x88>)
 8025750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025752:	f003 0304 	and.w	r3, r3, #4
 8025756:	60fb      	str	r3, [r7, #12]
 8025758:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 802575a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 802575e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025760:	2302      	movs	r3, #2
 8025762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025764:	2300      	movs	r3, #0
 8025766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025768:	2303      	movs	r3, #3
 802576a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 802576c:	2306      	movs	r3, #6
 802576e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025770:	f107 0314 	add.w	r3, r7, #20
 8025774:	4619      	mov	r1, r3
 8025776:	4805      	ldr	r0, [pc, #20]	; (802578c <HAL_SPI_MspInit+0x8c>)
 8025778:	f002 f8d2 	bl	8027920 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 802577c:	bf00      	nop
 802577e:	3728      	adds	r7, #40	; 0x28
 8025780:	46bd      	mov	sp, r7
 8025782:	bd80      	pop	{r7, pc}
 8025784:	40003c00 	.word	0x40003c00
 8025788:	40023800 	.word	0x40023800
 802578c:	40020800 	.word	0x40020800

08025790 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8025790:	b480      	push	{r7}
 8025792:	b087      	sub	sp, #28
 8025794:	af00      	add	r7, sp, #0
 8025796:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8025798:	687b      	ldr	r3, [r7, #4]
 802579a:	681b      	ldr	r3, [r3, #0]
 802579c:	4a1f      	ldr	r2, [pc, #124]	; (802581c <HAL_TIM_PWM_MspInit+0x8c>)
 802579e:	4293      	cmp	r3, r2
 80257a0:	d10e      	bne.n	80257c0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80257a2:	2300      	movs	r3, #0
 80257a4:	617b      	str	r3, [r7, #20]
 80257a6:	4b1e      	ldr	r3, [pc, #120]	; (8025820 <HAL_TIM_PWM_MspInit+0x90>)
 80257a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80257aa:	4a1d      	ldr	r2, [pc, #116]	; (8025820 <HAL_TIM_PWM_MspInit+0x90>)
 80257ac:	f043 0301 	orr.w	r3, r3, #1
 80257b0:	6453      	str	r3, [r2, #68]	; 0x44
 80257b2:	4b1b      	ldr	r3, [pc, #108]	; (8025820 <HAL_TIM_PWM_MspInit+0x90>)
 80257b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80257b6:	f003 0301 	and.w	r3, r3, #1
 80257ba:	617b      	str	r3, [r7, #20]
 80257bc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80257be:	e026      	b.n	802580e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80257c0:	687b      	ldr	r3, [r7, #4]
 80257c2:	681b      	ldr	r3, [r3, #0]
 80257c4:	4a17      	ldr	r2, [pc, #92]	; (8025824 <HAL_TIM_PWM_MspInit+0x94>)
 80257c6:	4293      	cmp	r3, r2
 80257c8:	d10e      	bne.n	80257e8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80257ca:	2300      	movs	r3, #0
 80257cc:	613b      	str	r3, [r7, #16]
 80257ce:	4b14      	ldr	r3, [pc, #80]	; (8025820 <HAL_TIM_PWM_MspInit+0x90>)
 80257d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80257d2:	4a13      	ldr	r2, [pc, #76]	; (8025820 <HAL_TIM_PWM_MspInit+0x90>)
 80257d4:	f043 0302 	orr.w	r3, r3, #2
 80257d8:	6413      	str	r3, [r2, #64]	; 0x40
 80257da:	4b11      	ldr	r3, [pc, #68]	; (8025820 <HAL_TIM_PWM_MspInit+0x90>)
 80257dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80257de:	f003 0302 	and.w	r3, r3, #2
 80257e2:	613b      	str	r3, [r7, #16]
 80257e4:	693b      	ldr	r3, [r7, #16]
}
 80257e6:	e012      	b.n	802580e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 80257e8:	687b      	ldr	r3, [r7, #4]
 80257ea:	681b      	ldr	r3, [r3, #0]
 80257ec:	4a0e      	ldr	r2, [pc, #56]	; (8025828 <HAL_TIM_PWM_MspInit+0x98>)
 80257ee:	4293      	cmp	r3, r2
 80257f0:	d10d      	bne.n	802580e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80257f2:	2300      	movs	r3, #0
 80257f4:	60fb      	str	r3, [r7, #12]
 80257f6:	4b0a      	ldr	r3, [pc, #40]	; (8025820 <HAL_TIM_PWM_MspInit+0x90>)
 80257f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80257fa:	4a09      	ldr	r2, [pc, #36]	; (8025820 <HAL_TIM_PWM_MspInit+0x90>)
 80257fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025800:	6413      	str	r3, [r2, #64]	; 0x40
 8025802:	4b07      	ldr	r3, [pc, #28]	; (8025820 <HAL_TIM_PWM_MspInit+0x90>)
 8025804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802580a:	60fb      	str	r3, [r7, #12]
 802580c:	68fb      	ldr	r3, [r7, #12]
}
 802580e:	bf00      	nop
 8025810:	371c      	adds	r7, #28
 8025812:	46bd      	mov	sp, r7
 8025814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025818:	4770      	bx	lr
 802581a:	bf00      	nop
 802581c:	40010000 	.word	0x40010000
 8025820:	40023800 	.word	0x40023800
 8025824:	40000400 	.word	0x40000400
 8025828:	40001800 	.word	0x40001800

0802582c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 802582c:	b580      	push	{r7, lr}
 802582e:	b088      	sub	sp, #32
 8025830:	af00      	add	r7, sp, #0
 8025832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8025834:	687b      	ldr	r3, [r7, #4]
 8025836:	681b      	ldr	r3, [r3, #0]
 8025838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802583c:	d116      	bne.n	802586c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802583e:	2300      	movs	r3, #0
 8025840:	61fb      	str	r3, [r7, #28]
 8025842:	4b40      	ldr	r3, [pc, #256]	; (8025944 <HAL_TIM_Base_MspInit+0x118>)
 8025844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025846:	4a3f      	ldr	r2, [pc, #252]	; (8025944 <HAL_TIM_Base_MspInit+0x118>)
 8025848:	f043 0301 	orr.w	r3, r3, #1
 802584c:	6413      	str	r3, [r2, #64]	; 0x40
 802584e:	4b3d      	ldr	r3, [pc, #244]	; (8025944 <HAL_TIM_Base_MspInit+0x118>)
 8025850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025852:	f003 0301 	and.w	r3, r3, #1
 8025856:	61fb      	str	r3, [r7, #28]
 8025858:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 802585a:	2200      	movs	r2, #0
 802585c:	2100      	movs	r1, #0
 802585e:	201c      	movs	r0, #28
 8025860:	f001 f9e3 	bl	8026c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8025864:	201c      	movs	r0, #28
 8025866:	f001 f9fc 	bl	8026c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 802586a:	e066      	b.n	802593a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 802586c:	687b      	ldr	r3, [r7, #4]
 802586e:	681b      	ldr	r3, [r3, #0]
 8025870:	4a35      	ldr	r2, [pc, #212]	; (8025948 <HAL_TIM_Base_MspInit+0x11c>)
 8025872:	4293      	cmp	r3, r2
 8025874:	d116      	bne.n	80258a4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8025876:	2300      	movs	r3, #0
 8025878:	61bb      	str	r3, [r7, #24]
 802587a:	4b32      	ldr	r3, [pc, #200]	; (8025944 <HAL_TIM_Base_MspInit+0x118>)
 802587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802587e:	4a31      	ldr	r2, [pc, #196]	; (8025944 <HAL_TIM_Base_MspInit+0x118>)
 8025880:	f043 0308 	orr.w	r3, r3, #8
 8025884:	6413      	str	r3, [r2, #64]	; 0x40
 8025886:	4b2f      	ldr	r3, [pc, #188]	; (8025944 <HAL_TIM_Base_MspInit+0x118>)
 8025888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802588a:	f003 0308 	and.w	r3, r3, #8
 802588e:	61bb      	str	r3, [r7, #24]
 8025890:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8025892:	2200      	movs	r2, #0
 8025894:	2100      	movs	r1, #0
 8025896:	2032      	movs	r0, #50	; 0x32
 8025898:	f001 f9c7 	bl	8026c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 802589c:	2032      	movs	r0, #50	; 0x32
 802589e:	f001 f9e0 	bl	8026c62 <HAL_NVIC_EnableIRQ>
}
 80258a2:	e04a      	b.n	802593a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 80258a4:	687b      	ldr	r3, [r7, #4]
 80258a6:	681b      	ldr	r3, [r3, #0]
 80258a8:	4a28      	ldr	r2, [pc, #160]	; (802594c <HAL_TIM_Base_MspInit+0x120>)
 80258aa:	4293      	cmp	r3, r2
 80258ac:	d116      	bne.n	80258dc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80258ae:	2300      	movs	r3, #0
 80258b0:	617b      	str	r3, [r7, #20]
 80258b2:	4b24      	ldr	r3, [pc, #144]	; (8025944 <HAL_TIM_Base_MspInit+0x118>)
 80258b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80258b6:	4a23      	ldr	r2, [pc, #140]	; (8025944 <HAL_TIM_Base_MspInit+0x118>)
 80258b8:	f043 0310 	orr.w	r3, r3, #16
 80258bc:	6413      	str	r3, [r2, #64]	; 0x40
 80258be:	4b21      	ldr	r3, [pc, #132]	; (8025944 <HAL_TIM_Base_MspInit+0x118>)
 80258c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80258c2:	f003 0310 	and.w	r3, r3, #16
 80258c6:	617b      	str	r3, [r7, #20]
 80258c8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80258ca:	2200      	movs	r2, #0
 80258cc:	2100      	movs	r1, #0
 80258ce:	2036      	movs	r0, #54	; 0x36
 80258d0:	f001 f9ab 	bl	8026c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80258d4:	2036      	movs	r0, #54	; 0x36
 80258d6:	f001 f9c4 	bl	8026c62 <HAL_NVIC_EnableIRQ>
}
 80258da:	e02e      	b.n	802593a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 80258dc:	687b      	ldr	r3, [r7, #4]
 80258de:	681b      	ldr	r3, [r3, #0]
 80258e0:	4a1b      	ldr	r2, [pc, #108]	; (8025950 <HAL_TIM_Base_MspInit+0x124>)
 80258e2:	4293      	cmp	r3, r2
 80258e4:	d116      	bne.n	8025914 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80258e6:	2300      	movs	r3, #0
 80258e8:	613b      	str	r3, [r7, #16]
 80258ea:	4b16      	ldr	r3, [pc, #88]	; (8025944 <HAL_TIM_Base_MspInit+0x118>)
 80258ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80258ee:	4a15      	ldr	r2, [pc, #84]	; (8025944 <HAL_TIM_Base_MspInit+0x118>)
 80258f0:	f043 0320 	orr.w	r3, r3, #32
 80258f4:	6413      	str	r3, [r2, #64]	; 0x40
 80258f6:	4b13      	ldr	r3, [pc, #76]	; (8025944 <HAL_TIM_Base_MspInit+0x118>)
 80258f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80258fa:	f003 0320 	and.w	r3, r3, #32
 80258fe:	613b      	str	r3, [r7, #16]
 8025900:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8025902:	2200      	movs	r2, #0
 8025904:	2100      	movs	r1, #0
 8025906:	2037      	movs	r0, #55	; 0x37
 8025908:	f001 f98f 	bl	8026c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 802590c:	2037      	movs	r0, #55	; 0x37
 802590e:	f001 f9a8 	bl	8026c62 <HAL_NVIC_EnableIRQ>
}
 8025912:	e012      	b.n	802593a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8025914:	687b      	ldr	r3, [r7, #4]
 8025916:	681b      	ldr	r3, [r3, #0]
 8025918:	4a0e      	ldr	r2, [pc, #56]	; (8025954 <HAL_TIM_Base_MspInit+0x128>)
 802591a:	4293      	cmp	r3, r2
 802591c:	d10d      	bne.n	802593a <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 802591e:	2300      	movs	r3, #0
 8025920:	60fb      	str	r3, [r7, #12]
 8025922:	4b08      	ldr	r3, [pc, #32]	; (8025944 <HAL_TIM_Base_MspInit+0x118>)
 8025924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025926:	4a07      	ldr	r2, [pc, #28]	; (8025944 <HAL_TIM_Base_MspInit+0x118>)
 8025928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802592c:	6453      	str	r3, [r2, #68]	; 0x44
 802592e:	4b05      	ldr	r3, [pc, #20]	; (8025944 <HAL_TIM_Base_MspInit+0x118>)
 8025930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8025936:	60fb      	str	r3, [r7, #12]
 8025938:	68fb      	ldr	r3, [r7, #12]
}
 802593a:	bf00      	nop
 802593c:	3720      	adds	r7, #32
 802593e:	46bd      	mov	sp, r7
 8025940:	bd80      	pop	{r7, pc}
 8025942:	bf00      	nop
 8025944:	40023800 	.word	0x40023800
 8025948:	40000c00 	.word	0x40000c00
 802594c:	40001000 	.word	0x40001000
 8025950:	40001400 	.word	0x40001400
 8025954:	40014800 	.word	0x40014800

08025958 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8025958:	b580      	push	{r7, lr}
 802595a:	b08c      	sub	sp, #48	; 0x30
 802595c:	af00      	add	r7, sp, #0
 802595e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025960:	f107 031c 	add.w	r3, r7, #28
 8025964:	2200      	movs	r2, #0
 8025966:	601a      	str	r2, [r3, #0]
 8025968:	605a      	str	r2, [r3, #4]
 802596a:	609a      	str	r2, [r3, #8]
 802596c:	60da      	str	r2, [r3, #12]
 802596e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8025970:	687b      	ldr	r3, [r7, #4]
 8025972:	681b      	ldr	r3, [r3, #0]
 8025974:	4a32      	ldr	r2, [pc, #200]	; (8025a40 <HAL_TIM_Encoder_MspInit+0xe8>)
 8025976:	4293      	cmp	r3, r2
 8025978:	d12c      	bne.n	80259d4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 802597a:	2300      	movs	r3, #0
 802597c:	61bb      	str	r3, [r7, #24]
 802597e:	4b31      	ldr	r3, [pc, #196]	; (8025a44 <HAL_TIM_Encoder_MspInit+0xec>)
 8025980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025982:	4a30      	ldr	r2, [pc, #192]	; (8025a44 <HAL_TIM_Encoder_MspInit+0xec>)
 8025984:	f043 0304 	orr.w	r3, r3, #4
 8025988:	6413      	str	r3, [r2, #64]	; 0x40
 802598a:	4b2e      	ldr	r3, [pc, #184]	; (8025a44 <HAL_TIM_Encoder_MspInit+0xec>)
 802598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802598e:	f003 0304 	and.w	r3, r3, #4
 8025992:	61bb      	str	r3, [r7, #24]
 8025994:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025996:	2300      	movs	r3, #0
 8025998:	617b      	str	r3, [r7, #20]
 802599a:	4b2a      	ldr	r3, [pc, #168]	; (8025a44 <HAL_TIM_Encoder_MspInit+0xec>)
 802599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802599e:	4a29      	ldr	r2, [pc, #164]	; (8025a44 <HAL_TIM_Encoder_MspInit+0xec>)
 80259a0:	f043 0302 	orr.w	r3, r3, #2
 80259a4:	6313      	str	r3, [r2, #48]	; 0x30
 80259a6:	4b27      	ldr	r3, [pc, #156]	; (8025a44 <HAL_TIM_Encoder_MspInit+0xec>)
 80259a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80259aa:	f003 0302 	and.w	r3, r3, #2
 80259ae:	617b      	str	r3, [r7, #20]
 80259b0:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80259b2:	23c0      	movs	r3, #192	; 0xc0
 80259b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80259b6:	2302      	movs	r3, #2
 80259b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80259ba:	2300      	movs	r3, #0
 80259bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80259be:	2300      	movs	r3, #0
 80259c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80259c2:	2302      	movs	r3, #2
 80259c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80259c6:	f107 031c 	add.w	r3, r7, #28
 80259ca:	4619      	mov	r1, r3
 80259cc:	481e      	ldr	r0, [pc, #120]	; (8025a48 <HAL_TIM_Encoder_MspInit+0xf0>)
 80259ce:	f001 ffa7 	bl	8027920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80259d2:	e030      	b.n	8025a36 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 80259d4:	687b      	ldr	r3, [r7, #4]
 80259d6:	681b      	ldr	r3, [r3, #0]
 80259d8:	4a1c      	ldr	r2, [pc, #112]	; (8025a4c <HAL_TIM_Encoder_MspInit+0xf4>)
 80259da:	4293      	cmp	r3, r2
 80259dc:	d12b      	bne.n	8025a36 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80259de:	2300      	movs	r3, #0
 80259e0:	613b      	str	r3, [r7, #16]
 80259e2:	4b18      	ldr	r3, [pc, #96]	; (8025a44 <HAL_TIM_Encoder_MspInit+0xec>)
 80259e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80259e6:	4a17      	ldr	r2, [pc, #92]	; (8025a44 <HAL_TIM_Encoder_MspInit+0xec>)
 80259e8:	f043 0302 	orr.w	r3, r3, #2
 80259ec:	6453      	str	r3, [r2, #68]	; 0x44
 80259ee:	4b15      	ldr	r3, [pc, #84]	; (8025a44 <HAL_TIM_Encoder_MspInit+0xec>)
 80259f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80259f2:	f003 0302 	and.w	r3, r3, #2
 80259f6:	613b      	str	r3, [r7, #16]
 80259f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80259fa:	2300      	movs	r3, #0
 80259fc:	60fb      	str	r3, [r7, #12]
 80259fe:	4b11      	ldr	r3, [pc, #68]	; (8025a44 <HAL_TIM_Encoder_MspInit+0xec>)
 8025a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a02:	4a10      	ldr	r2, [pc, #64]	; (8025a44 <HAL_TIM_Encoder_MspInit+0xec>)
 8025a04:	f043 0304 	orr.w	r3, r3, #4
 8025a08:	6313      	str	r3, [r2, #48]	; 0x30
 8025a0a:	4b0e      	ldr	r3, [pc, #56]	; (8025a44 <HAL_TIM_Encoder_MspInit+0xec>)
 8025a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a0e:	f003 0304 	and.w	r3, r3, #4
 8025a12:	60fb      	str	r3, [r7, #12]
 8025a14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8025a16:	23c0      	movs	r3, #192	; 0xc0
 8025a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025a1a:	2302      	movs	r3, #2
 8025a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025a1e:	2300      	movs	r3, #0
 8025a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025a22:	2300      	movs	r3, #0
 8025a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8025a26:	2303      	movs	r3, #3
 8025a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025a2a:	f107 031c 	add.w	r3, r7, #28
 8025a2e:	4619      	mov	r1, r3
 8025a30:	4807      	ldr	r0, [pc, #28]	; (8025a50 <HAL_TIM_Encoder_MspInit+0xf8>)
 8025a32:	f001 ff75 	bl	8027920 <HAL_GPIO_Init>
}
 8025a36:	bf00      	nop
 8025a38:	3730      	adds	r7, #48	; 0x30
 8025a3a:	46bd      	mov	sp, r7
 8025a3c:	bd80      	pop	{r7, pc}
 8025a3e:	bf00      	nop
 8025a40:	40000800 	.word	0x40000800
 8025a44:	40023800 	.word	0x40023800
 8025a48:	40020400 	.word	0x40020400
 8025a4c:	40010400 	.word	0x40010400
 8025a50:	40020800 	.word	0x40020800

08025a54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8025a54:	b580      	push	{r7, lr}
 8025a56:	b08c      	sub	sp, #48	; 0x30
 8025a58:	af00      	add	r7, sp, #0
 8025a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025a5c:	f107 031c 	add.w	r3, r7, #28
 8025a60:	2200      	movs	r2, #0
 8025a62:	601a      	str	r2, [r3, #0]
 8025a64:	605a      	str	r2, [r3, #4]
 8025a66:	609a      	str	r2, [r3, #8]
 8025a68:	60da      	str	r2, [r3, #12]
 8025a6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8025a6c:	687b      	ldr	r3, [r7, #4]
 8025a6e:	681b      	ldr	r3, [r3, #0]
 8025a70:	4a59      	ldr	r2, [pc, #356]	; (8025bd8 <HAL_TIM_MspPostInit+0x184>)
 8025a72:	4293      	cmp	r3, r2
 8025a74:	d11f      	bne.n	8025ab6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8025a76:	2300      	movs	r3, #0
 8025a78:	61bb      	str	r3, [r7, #24]
 8025a7a:	4b58      	ldr	r3, [pc, #352]	; (8025bdc <HAL_TIM_MspPostInit+0x188>)
 8025a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a7e:	4a57      	ldr	r2, [pc, #348]	; (8025bdc <HAL_TIM_MspPostInit+0x188>)
 8025a80:	f043 0301 	orr.w	r3, r3, #1
 8025a84:	6313      	str	r3, [r2, #48]	; 0x30
 8025a86:	4b55      	ldr	r3, [pc, #340]	; (8025bdc <HAL_TIM_MspPostInit+0x188>)
 8025a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a8a:	f003 0301 	and.w	r3, r3, #1
 8025a8e:	61bb      	str	r3, [r7, #24]
 8025a90:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8025a92:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8025a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025a98:	2302      	movs	r3, #2
 8025a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025a9c:	2300      	movs	r3, #0
 8025a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025aa0:	2300      	movs	r3, #0
 8025aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8025aa4:	2301      	movs	r3, #1
 8025aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025aa8:	f107 031c 	add.w	r3, r7, #28
 8025aac:	4619      	mov	r1, r3
 8025aae:	484c      	ldr	r0, [pc, #304]	; (8025be0 <HAL_TIM_MspPostInit+0x18c>)
 8025ab0:	f001 ff36 	bl	8027920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8025ab4:	e08b      	b.n	8025bce <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8025ab6:	687b      	ldr	r3, [r7, #4]
 8025ab8:	681b      	ldr	r3, [r3, #0]
 8025aba:	4a4a      	ldr	r2, [pc, #296]	; (8025be4 <HAL_TIM_MspPostInit+0x190>)
 8025abc:	4293      	cmp	r3, r2
 8025abe:	d13d      	bne.n	8025b3c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025ac0:	2300      	movs	r3, #0
 8025ac2:	617b      	str	r3, [r7, #20]
 8025ac4:	4b45      	ldr	r3, [pc, #276]	; (8025bdc <HAL_TIM_MspPostInit+0x188>)
 8025ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025ac8:	4a44      	ldr	r2, [pc, #272]	; (8025bdc <HAL_TIM_MspPostInit+0x188>)
 8025aca:	f043 0304 	orr.w	r3, r3, #4
 8025ace:	6313      	str	r3, [r2, #48]	; 0x30
 8025ad0:	4b42      	ldr	r3, [pc, #264]	; (8025bdc <HAL_TIM_MspPostInit+0x188>)
 8025ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025ad4:	f003 0304 	and.w	r3, r3, #4
 8025ad8:	617b      	str	r3, [r7, #20]
 8025ada:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025adc:	2300      	movs	r3, #0
 8025ade:	613b      	str	r3, [r7, #16]
 8025ae0:	4b3e      	ldr	r3, [pc, #248]	; (8025bdc <HAL_TIM_MspPostInit+0x188>)
 8025ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025ae4:	4a3d      	ldr	r2, [pc, #244]	; (8025bdc <HAL_TIM_MspPostInit+0x188>)
 8025ae6:	f043 0302 	orr.w	r3, r3, #2
 8025aea:	6313      	str	r3, [r2, #48]	; 0x30
 8025aec:	4b3b      	ldr	r3, [pc, #236]	; (8025bdc <HAL_TIM_MspPostInit+0x188>)
 8025aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025af0:	f003 0302 	and.w	r3, r3, #2
 8025af4:	613b      	str	r3, [r7, #16]
 8025af6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8025af8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8025afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025afe:	2302      	movs	r3, #2
 8025b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025b02:	2300      	movs	r3, #0
 8025b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025b06:	2300      	movs	r3, #0
 8025b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8025b0a:	2302      	movs	r3, #2
 8025b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025b0e:	f107 031c 	add.w	r3, r7, #28
 8025b12:	4619      	mov	r1, r3
 8025b14:	4834      	ldr	r0, [pc, #208]	; (8025be8 <HAL_TIM_MspPostInit+0x194>)
 8025b16:	f001 ff03 	bl	8027920 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8025b1a:	2330      	movs	r3, #48	; 0x30
 8025b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025b1e:	2302      	movs	r3, #2
 8025b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025b22:	2300      	movs	r3, #0
 8025b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025b26:	2300      	movs	r3, #0
 8025b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8025b2a:	2302      	movs	r3, #2
 8025b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025b2e:	f107 031c 	add.w	r3, r7, #28
 8025b32:	4619      	mov	r1, r3
 8025b34:	482d      	ldr	r0, [pc, #180]	; (8025bec <HAL_TIM_MspPostInit+0x198>)
 8025b36:	f001 fef3 	bl	8027920 <HAL_GPIO_Init>
}
 8025b3a:	e048      	b.n	8025bce <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 8025b3c:	687b      	ldr	r3, [r7, #4]
 8025b3e:	681b      	ldr	r3, [r3, #0]
 8025b40:	4a2b      	ldr	r2, [pc, #172]	; (8025bf0 <HAL_TIM_MspPostInit+0x19c>)
 8025b42:	4293      	cmp	r3, r2
 8025b44:	d11f      	bne.n	8025b86 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025b46:	2300      	movs	r3, #0
 8025b48:	60fb      	str	r3, [r7, #12]
 8025b4a:	4b24      	ldr	r3, [pc, #144]	; (8025bdc <HAL_TIM_MspPostInit+0x188>)
 8025b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025b4e:	4a23      	ldr	r2, [pc, #140]	; (8025bdc <HAL_TIM_MspPostInit+0x188>)
 8025b50:	f043 0302 	orr.w	r3, r3, #2
 8025b54:	6313      	str	r3, [r2, #48]	; 0x30
 8025b56:	4b21      	ldr	r3, [pc, #132]	; (8025bdc <HAL_TIM_MspPostInit+0x188>)
 8025b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025b5a:	f003 0302 	and.w	r3, r3, #2
 8025b5e:	60fb      	str	r3, [r7, #12]
 8025b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8025b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025b68:	2302      	movs	r3, #2
 8025b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025b6c:	2300      	movs	r3, #0
 8025b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025b70:	2300      	movs	r3, #0
 8025b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8025b74:	2303      	movs	r3, #3
 8025b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025b78:	f107 031c 	add.w	r3, r7, #28
 8025b7c:	4619      	mov	r1, r3
 8025b7e:	481b      	ldr	r0, [pc, #108]	; (8025bec <HAL_TIM_MspPostInit+0x198>)
 8025b80:	f001 fece 	bl	8027920 <HAL_GPIO_Init>
}
 8025b84:	e023      	b.n	8025bce <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8025b86:	687b      	ldr	r3, [r7, #4]
 8025b88:	681b      	ldr	r3, [r3, #0]
 8025b8a:	4a1a      	ldr	r2, [pc, #104]	; (8025bf4 <HAL_TIM_MspPostInit+0x1a0>)
 8025b8c:	4293      	cmp	r3, r2
 8025b8e:	d11e      	bne.n	8025bce <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025b90:	2300      	movs	r3, #0
 8025b92:	60bb      	str	r3, [r7, #8]
 8025b94:	4b11      	ldr	r3, [pc, #68]	; (8025bdc <HAL_TIM_MspPostInit+0x188>)
 8025b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025b98:	4a10      	ldr	r2, [pc, #64]	; (8025bdc <HAL_TIM_MspPostInit+0x188>)
 8025b9a:	f043 0302 	orr.w	r3, r3, #2
 8025b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8025ba0:	4b0e      	ldr	r3, [pc, #56]	; (8025bdc <HAL_TIM_MspPostInit+0x188>)
 8025ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025ba4:	f003 0302 	and.w	r3, r3, #2
 8025ba8:	60bb      	str	r3, [r7, #8]
 8025baa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8025bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8025bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025bb2:	2302      	movs	r3, #2
 8025bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025bb6:	2300      	movs	r3, #0
 8025bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025bba:	2300      	movs	r3, #0
 8025bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8025bbe:	2309      	movs	r3, #9
 8025bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025bc2:	f107 031c 	add.w	r3, r7, #28
 8025bc6:	4619      	mov	r1, r3
 8025bc8:	4808      	ldr	r0, [pc, #32]	; (8025bec <HAL_TIM_MspPostInit+0x198>)
 8025bca:	f001 fea9 	bl	8027920 <HAL_GPIO_Init>
}
 8025bce:	bf00      	nop
 8025bd0:	3730      	adds	r7, #48	; 0x30
 8025bd2:	46bd      	mov	sp, r7
 8025bd4:	bd80      	pop	{r7, pc}
 8025bd6:	bf00      	nop
 8025bd8:	40010000 	.word	0x40010000
 8025bdc:	40023800 	.word	0x40023800
 8025be0:	40020000 	.word	0x40020000
 8025be4:	40000400 	.word	0x40000400
 8025be8:	40020800 	.word	0x40020800
 8025bec:	40020400 	.word	0x40020400
 8025bf0:	40014800 	.word	0x40014800
 8025bf4:	40001800 	.word	0x40001800

08025bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8025bf8:	b480      	push	{r7}
 8025bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8025bfc:	e7fe      	b.n	8025bfc <NMI_Handler+0x4>

08025bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8025bfe:	b480      	push	{r7}
 8025c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8025c02:	e7fe      	b.n	8025c02 <HardFault_Handler+0x4>

08025c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8025c04:	b480      	push	{r7}
 8025c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8025c08:	e7fe      	b.n	8025c08 <MemManage_Handler+0x4>

08025c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8025c0a:	b480      	push	{r7}
 8025c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8025c0e:	e7fe      	b.n	8025c0e <BusFault_Handler+0x4>

08025c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8025c10:	b480      	push	{r7}
 8025c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8025c14:	e7fe      	b.n	8025c14 <UsageFault_Handler+0x4>

08025c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8025c16:	b480      	push	{r7}
 8025c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8025c1a:	bf00      	nop
 8025c1c:	46bd      	mov	sp, r7
 8025c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c22:	4770      	bx	lr

08025c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8025c24:	b480      	push	{r7}
 8025c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8025c28:	bf00      	nop
 8025c2a:	46bd      	mov	sp, r7
 8025c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c30:	4770      	bx	lr

08025c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8025c32:	b480      	push	{r7}
 8025c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8025c36:	bf00      	nop
 8025c38:	46bd      	mov	sp, r7
 8025c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c3e:	4770      	bx	lr

08025c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8025c40:	b580      	push	{r7, lr}
 8025c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8025c44:	f000 fae0 	bl	8026208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8025c48:	bf00      	nop
 8025c4a:	bd80      	pop	{r7, pc}

08025c4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8025c4c:	b580      	push	{r7, lr}
 8025c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8025c50:	4802      	ldr	r0, [pc, #8]	; (8025c5c <TIM2_IRQHandler+0x10>)
 8025c52:	f003 fc66 	bl	8029522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8025c56:	bf00      	nop
 8025c58:	bd80      	pop	{r7, pc}
 8025c5a:	bf00      	nop
 8025c5c:	20000900 	.word	0x20000900

08025c60 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8025c60:	b580      	push	{r7, lr}
 8025c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8025c64:	4802      	ldr	r0, [pc, #8]	; (8025c70 <TIM5_IRQHandler+0x10>)
 8025c66:	f003 fc5c 	bl	8029522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8025c6a:	bf00      	nop
 8025c6c:	bd80      	pop	{r7, pc}
 8025c6e:	bf00      	nop
 8025c70:	200006c0 	.word	0x200006c0

08025c74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8025c74:	b580      	push	{r7, lr}
 8025c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8025c78:	4802      	ldr	r0, [pc, #8]	; (8025c84 <TIM6_DAC_IRQHandler+0x10>)
 8025c7a:	f003 fc52 	bl	8029522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8025c7e:	bf00      	nop
 8025c80:	bd80      	pop	{r7, pc}
 8025c82:	bf00      	nop
 8025c84:	20000880 	.word	0x20000880

08025c88 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8025c88:	b580      	push	{r7, lr}
 8025c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8025c8c:	4802      	ldr	r0, [pc, #8]	; (8025c98 <TIM7_IRQHandler+0x10>)
 8025c8e:	f003 fc48 	bl	8029522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8025c92:	bf00      	nop
 8025c94:	bd80      	pop	{r7, pc}
 8025c96:	bf00      	nop
 8025c98:	20000980 	.word	0x20000980

08025c9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8025c9c:	b580      	push	{r7, lr}
 8025c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8025ca0:	4802      	ldr	r0, [pc, #8]	; (8025cac <DMA2_Stream0_IRQHandler+0x10>)
 8025ca2:	f001 f8ff 	bl	8026ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8025ca6:	bf00      	nop
 8025ca8:	bd80      	pop	{r7, pc}
 8025caa:	bf00      	nop
 8025cac:	20000820 	.word	0x20000820

08025cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8025cb0:	b480      	push	{r7}
 8025cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8025cb4:	4b08      	ldr	r3, [pc, #32]	; (8025cd8 <SystemInit+0x28>)
 8025cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8025cba:	4a07      	ldr	r2, [pc, #28]	; (8025cd8 <SystemInit+0x28>)
 8025cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8025cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8025cc4:	4b04      	ldr	r3, [pc, #16]	; (8025cd8 <SystemInit+0x28>)
 8025cc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8025cca:	609a      	str	r2, [r3, #8]
#endif
}
 8025ccc:	bf00      	nop
 8025cce:	46bd      	mov	sp, r7
 8025cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025cd4:	4770      	bx	lr
 8025cd6:	bf00      	nop
 8025cd8:	e000ed00 	.word	0xe000ed00

08025cdc <_ZN15VelocityControlC1EP7Encoder>:
#include "velocity_control.hpp"
#include "declare_extern.h"

VelocityControl::VelocityControl(Encoder *encoder) : integral_error_(0)
 8025cdc:	b480      	push	{r7}
 8025cde:	b083      	sub	sp, #12
 8025ce0:	af00      	add	r7, sp, #0
 8025ce2:	6078      	str	r0, [r7, #4]
 8025ce4:	6039      	str	r1, [r7, #0]
 8025ce6:	687b      	ldr	r3, [r7, #4]
 8025ce8:	f04f 0200 	mov.w	r2, #0
 8025cec:	601a      	str	r2, [r3, #0]
{
    encoder_ = encoder;
 8025cee:	687b      	ldr	r3, [r7, #4]
 8025cf0:	683a      	ldr	r2, [r7, #0]
 8025cf2:	605a      	str	r2, [r3, #4]
}
 8025cf4:	687b      	ldr	r3, [r7, #4]
 8025cf6:	4618      	mov	r0, r3
 8025cf8:	370c      	adds	r7, #12
 8025cfa:	46bd      	mov	sp, r7
 8025cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d00:	4770      	bx	lr

08025d02 <_ZN15VelocityControl16DeterminePidGainEf>:

float VelocityControl::DeterminePidGain(float target_velocity)
{
 8025d02:	b580      	push	{r7, lr}
 8025d04:	b086      	sub	sp, #24
 8025d06:	af00      	add	r7, sp, #0
 8025d08:	6078      	str	r0, [r7, #4]
 8025d0a:	ed87 0a00 	vstr	s0, [r7]
    float p_gain = 0, i_gain = 0, d_gain = 0;
 8025d0e:	f04f 0300 	mov.w	r3, #0
 8025d12:	617b      	str	r3, [r7, #20]
 8025d14:	f04f 0300 	mov.w	r3, #0
 8025d18:	613b      	str	r3, [r7, #16]
 8025d1a:	f04f 0300 	mov.w	r3, #0
 8025d1e:	60fb      	str	r3, [r7, #12]

    if(target_velocity < MAX_VELOCITY)
 8025d20:	edd7 7a00 	vldr	s15, [r7]
 8025d24:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8025d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8025d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d30:	d509      	bpl.n	8025d46 <_ZN15VelocityControl16DeterminePidGainEf+0x44>
    {
        p_gain = VELOCITY_P_GAIN;
 8025d32:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8025d36:	617b      	str	r3, [r7, #20]
        i_gain = VELOCITY_I_GAIN;
 8025d38:	f04f 0300 	mov.w	r3, #0
 8025d3c:	613b      	str	r3, [r7, #16]
        d_gain = VELOCITY_D_GAIN;
 8025d3e:	f04f 0300 	mov.w	r3, #0
 8025d42:	60fb      	str	r3, [r7, #12]
 8025d44:	e008      	b.n	8025d58 <_ZN15VelocityControl16DeterminePidGainEf+0x56>
    }
    else // Error handler
    {
        p_gain = 0;
 8025d46:	f04f 0300 	mov.w	r3, #0
 8025d4a:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 8025d4c:	f04f 0300 	mov.w	r3, #0
 8025d50:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 8025d52:	f04f 0300 	mov.w	r3, #0
 8025d56:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(target_velocity, p_gain, i_gain, d_gain);
 8025d58:	edd7 1a03 	vldr	s3, [r7, #12]
 8025d5c:	ed97 1a04 	vldr	s2, [r7, #16]
 8025d60:	edd7 0a05 	vldr	s1, [r7, #20]
 8025d64:	ed97 0a00 	vldr	s0, [r7]
 8025d68:	6878      	ldr	r0, [r7, #4]
 8025d6a:	f000 f809 	bl	8025d80 <_ZN15VelocityControl10PidControlEffff>
 8025d6e:	eef0 7a40 	vmov.f32	s15, s0
}
 8025d72:	eeb0 0a67 	vmov.f32	s0, s15
 8025d76:	3718      	adds	r7, #24
 8025d78:	46bd      	mov	sp, r7
 8025d7a:	bd80      	pop	{r7, pc}
 8025d7c:	0000      	movs	r0, r0
	...

08025d80 <_ZN15VelocityControl10PidControlEffff>:

float VelocityControl::PidControl(float target, float p_gain, float i_gain, float d_gain)
{
 8025d80:	b5b0      	push	{r4, r5, r7, lr}
 8025d82:	b08e      	sub	sp, #56	; 0x38
 8025d84:	af00      	add	r7, sp, #0
 8025d86:	6178      	str	r0, [r7, #20]
 8025d88:	ed87 0a04 	vstr	s0, [r7, #16]
 8025d8c:	edc7 0a03 	vstr	s1, [r7, #12]
 8025d90:	ed87 1a02 	vstr	s2, [r7, #8]
 8025d94:	edc7 1a01 	vstr	s3, [r7, #4]
    float current = encoder_->GetDistance() / TIM6_PERIOD; // [mm/ms]
 8025d98:	697b      	ldr	r3, [r7, #20]
 8025d9a:	685b      	ldr	r3, [r3, #4]
 8025d9c:	4618      	mov	r0, r3
 8025d9e:	f7fb f895 	bl	8020ecc <_ZN7Encoder11GetDistanceEv>
 8025da2:	eef0 6a40 	vmov.f32	s13, s0
 8025da6:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8025daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025dae:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    static float pre_filter = 0.0;
    float filter = pre_filter * (1.0 - VELOCITY_LPF_RATIO) + (current * VELOCITY_LPF_RATIO);
 8025db2:	4b71      	ldr	r3, [pc, #452]	; (8025f78 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8025db4:	681b      	ldr	r3, [r3, #0]
 8025db6:	4618      	mov	r0, r3
 8025db8:	f7fa faa6 	bl	8020308 <__aeabi_f2d>
 8025dbc:	a368      	add	r3, pc, #416	; (adr r3, 8025f60 <_ZN15VelocityControl10PidControlEffff+0x1e0>)
 8025dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025dc2:	f7fa faf9 	bl	80203b8 <__aeabi_dmul>
 8025dc6:	4603      	mov	r3, r0
 8025dc8:	460c      	mov	r4, r1
 8025dca:	4625      	mov	r5, r4
 8025dcc:	461c      	mov	r4, r3
 8025dce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025dd0:	f7fa fa9a 	bl	8020308 <__aeabi_f2d>
 8025dd4:	a364      	add	r3, pc, #400	; (adr r3, 8025f68 <_ZN15VelocityControl10PidControlEffff+0x1e8>)
 8025dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025dda:	f7fa faed 	bl	80203b8 <__aeabi_dmul>
 8025dde:	4602      	mov	r2, r0
 8025de0:	460b      	mov	r3, r1
 8025de2:	4620      	mov	r0, r4
 8025de4:	4629      	mov	r1, r5
 8025de6:	f7fa f931 	bl	802004c <__adddf3>
 8025dea:	4603      	mov	r3, r0
 8025dec:	460c      	mov	r4, r1
 8025dee:	4618      	mov	r0, r3
 8025df0:	4621      	mov	r1, r4
 8025df2:	f7fa fd7b 	bl	80208ec <__aeabi_d2f>
 8025df6:	4603      	mov	r3, r0
 8025df8:	633b      	str	r3, [r7, #48]	; 0x30
    pre_filter = filter;
 8025dfa:	4a5f      	ldr	r2, [pc, #380]	; (8025f78 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8025dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025dfe:	6013      	str	r3, [r2, #0]

    float error = target - filter;
 8025e00:	ed97 7a04 	vldr	s14, [r7, #16]
 8025e04:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8025e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025e0c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    static float pre_error = error;
 8025e10:	4b5a      	ldr	r3, [pc, #360]	; (8025f7c <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8025e12:	781b      	ldrb	r3, [r3, #0]
 8025e14:	f3bf 8f5b 	dmb	ish
 8025e18:	b2db      	uxtb	r3, r3
 8025e1a:	f003 0301 	and.w	r3, r3, #1
 8025e1e:	2b00      	cmp	r3, #0
 8025e20:	bf0c      	ite	eq
 8025e22:	2301      	moveq	r3, #1
 8025e24:	2300      	movne	r3, #0
 8025e26:	b2db      	uxtb	r3, r3
 8025e28:	2b00      	cmp	r3, #0
 8025e2a:	d010      	beq.n	8025e4e <_ZN15VelocityControl10PidControlEffff+0xce>
 8025e2c:	4853      	ldr	r0, [pc, #332]	; (8025f7c <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8025e2e:	f004 fa19 	bl	802a264 <__cxa_guard_acquire>
 8025e32:	4603      	mov	r3, r0
 8025e34:	2b00      	cmp	r3, #0
 8025e36:	bf14      	ite	ne
 8025e38:	2301      	movne	r3, #1
 8025e3a:	2300      	moveq	r3, #0
 8025e3c:	b2db      	uxtb	r3, r3
 8025e3e:	2b00      	cmp	r3, #0
 8025e40:	d005      	beq.n	8025e4e <_ZN15VelocityControl10PidControlEffff+0xce>
 8025e42:	4a4f      	ldr	r2, [pc, #316]	; (8025f80 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025e46:	6013      	str	r3, [r2, #0]
 8025e48:	484c      	ldr	r0, [pc, #304]	; (8025f7c <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8025e4a:	f004 fa17 	bl	802a27c <__cxa_guard_release>

    float differential_error = (error - pre_error) / TIM6_PERIOD_S;
 8025e4e:	4b4c      	ldr	r3, [pc, #304]	; (8025f80 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025e50:	edd3 7a00 	vldr	s15, [r3]
 8025e54:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8025e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025e5c:	ee17 0a90 	vmov	r0, s15
 8025e60:	f7fa fa52 	bl	8020308 <__aeabi_f2d>
 8025e64:	a342      	add	r3, pc, #264	; (adr r3, 8025f70 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8025e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e6a:	f7fa fbcf 	bl	802060c <__aeabi_ddiv>
 8025e6e:	4603      	mov	r3, r0
 8025e70:	460c      	mov	r4, r1
 8025e72:	4618      	mov	r0, r3
 8025e74:	4621      	mov	r1, r4
 8025e76:	f7fa fd39 	bl	80208ec <__aeabi_d2f>
 8025e7a:	4603      	mov	r3, r0
 8025e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    float integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 8025e7e:	4b40      	ldr	r3, [pc, #256]	; (8025f80 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025e80:	ed93 7a00 	vldr	s14, [r3]
 8025e84:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8025e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025e8c:	ee17 0a90 	vmov	r0, s15
 8025e90:	f7fa fa3a 	bl	8020308 <__aeabi_f2d>
 8025e94:	f04f 0200 	mov.w	r2, #0
 8025e98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8025e9c:	f7fa fbb6 	bl	802060c <__aeabi_ddiv>
 8025ea0:	4603      	mov	r3, r0
 8025ea2:	460c      	mov	r4, r1
 8025ea4:	4618      	mov	r0, r3
 8025ea6:	4621      	mov	r1, r4
 8025ea8:	a331      	add	r3, pc, #196	; (adr r3, 8025f70 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8025eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025eae:	f7fa fa83 	bl	80203b8 <__aeabi_dmul>
 8025eb2:	4603      	mov	r3, r0
 8025eb4:	460c      	mov	r4, r1
 8025eb6:	4618      	mov	r0, r3
 8025eb8:	4621      	mov	r1, r4
 8025eba:	f7fa fd17 	bl	80208ec <__aeabi_d2f>
 8025ebe:	4603      	mov	r3, r0
 8025ec0:	627b      	str	r3, [r7, #36]	; 0x24
    SetIntegralError(integral_error);
 8025ec2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8025ec6:	6978      	ldr	r0, [r7, #20]
 8025ec8:	f000 f870 	bl	8025fac <_ZN15VelocityControl16SetIntegralErrorEf>
    pre_error = error;
 8025ecc:	4a2c      	ldr	r2, [pc, #176]	; (8025f80 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ed0:	6013      	str	r3, [r2, #0]

    float p = p_gain * error;
 8025ed2:	ed97 7a03 	vldr	s14, [r7, #12]
 8025ed6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8025eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025ede:	edc7 7a08 	vstr	s15, [r7, #32]
    float d = d_gain * differential_error;
 8025ee2:	ed97 7a01 	vldr	s14, [r7, #4]
 8025ee6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8025eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025eee:	edc7 7a07 	vstr	s15, [r7, #28]
    float i = i_gain * integral_error_;
 8025ef2:	697b      	ldr	r3, [r7, #20]
 8025ef4:	edd3 7a00 	vldr	s15, [r3]
 8025ef8:	ed97 7a02 	vldr	s14, [r7, #8]
 8025efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8025f00:	edc7 7a06 	vstr	s15, [r7, #24]

#ifdef DEBUG_MODE
    g_target_velocity  = target;
 8025f04:	4a1f      	ldr	r2, [pc, #124]	; (8025f84 <_ZN15VelocityControl10PidControlEffff+0x204>)
 8025f06:	693b      	ldr	r3, [r7, #16]
 8025f08:	6013      	str	r3, [r2, #0]
    g_current_velocity = current;
 8025f0a:	4a1f      	ldr	r2, [pc, #124]	; (8025f88 <_ZN15VelocityControl10PidControlEffff+0x208>)
 8025f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025f0e:	6013      	str	r3, [r2, #0]
    g_filter_velocity  = filter;
 8025f10:	4a1e      	ldr	r2, [pc, #120]	; (8025f8c <_ZN15VelocityControl10PidControlEffff+0x20c>)
 8025f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f14:	6013      	str	r3, [r2, #0]
    g_velocity_error   = error;
 8025f16:	4a1e      	ldr	r2, [pc, #120]	; (8025f90 <_ZN15VelocityControl10PidControlEffff+0x210>)
 8025f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f1a:	6013      	str	r3, [r2, #0]
    g_velocity_p = p;       g_velocity_d = d;       g_velocity_i = i;
 8025f1c:	4a1d      	ldr	r2, [pc, #116]	; (8025f94 <_ZN15VelocityControl10PidControlEffff+0x214>)
 8025f1e:	6a3b      	ldr	r3, [r7, #32]
 8025f20:	6013      	str	r3, [r2, #0]
 8025f22:	4a1d      	ldr	r2, [pc, #116]	; (8025f98 <_ZN15VelocityControl10PidControlEffff+0x218>)
 8025f24:	69fb      	ldr	r3, [r7, #28]
 8025f26:	6013      	str	r3, [r2, #0]
 8025f28:	4a1c      	ldr	r2, [pc, #112]	; (8025f9c <_ZN15VelocityControl10PidControlEffff+0x21c>)
 8025f2a:	69bb      	ldr	r3, [r7, #24]
 8025f2c:	6013      	str	r3, [r2, #0]
    g_velocity_p_gain = p;  g_velocity_d_gain = p;  g_velocity_i_gain = p;
 8025f2e:	4a1c      	ldr	r2, [pc, #112]	; (8025fa0 <_ZN15VelocityControl10PidControlEffff+0x220>)
 8025f30:	6a3b      	ldr	r3, [r7, #32]
 8025f32:	6013      	str	r3, [r2, #0]
 8025f34:	4a1b      	ldr	r2, [pc, #108]	; (8025fa4 <_ZN15VelocityControl10PidControlEffff+0x224>)
 8025f36:	6a3b      	ldr	r3, [r7, #32]
 8025f38:	6013      	str	r3, [r2, #0]
 8025f3a:	4a1b      	ldr	r2, [pc, #108]	; (8025fa8 <_ZN15VelocityControl10PidControlEffff+0x228>)
 8025f3c:	6a3b      	ldr	r3, [r7, #32]
 8025f3e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    return p + d + i;
 8025f40:	ed97 7a08 	vldr	s14, [r7, #32]
 8025f44:	edd7 7a07 	vldr	s15, [r7, #28]
 8025f48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8025f4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8025f50:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8025f54:	eeb0 0a67 	vmov.f32	s0, s15
 8025f58:	3738      	adds	r7, #56	; 0x38
 8025f5a:	46bd      	mov	sp, r7
 8025f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8025f5e:	bf00      	nop
 8025f60:	33333334 	.word	0x33333334
 8025f64:	3fd33333 	.word	0x3fd33333
 8025f68:	66666666 	.word	0x66666666
 8025f6c:	3fe66666 	.word	0x3fe66666
 8025f70:	47ae147b 	.word	0x47ae147b
 8025f74:	3f547ae1 	.word	0x3f547ae1
 8025f78:	200002dc 	.word	0x200002dc
 8025f7c:	200002e4 	.word	0x200002e4
 8025f80:	200002e0 	.word	0x200002e0
 8025f84:	20000294 	.word	0x20000294
 8025f88:	20000298 	.word	0x20000298
 8025f8c:	2000029c 	.word	0x2000029c
 8025f90:	200002a0 	.word	0x200002a0
 8025f94:	200002a4 	.word	0x200002a4
 8025f98:	200002ac 	.word	0x200002ac
 8025f9c:	200002a8 	.word	0x200002a8
 8025fa0:	200002b0 	.word	0x200002b0
 8025fa4:	200002b8 	.word	0x200002b8
 8025fa8:	200002b4 	.word	0x200002b4

08025fac <_ZN15VelocityControl16SetIntegralErrorEf>:

void VelocityControl::SetIntegralError(float integral_error)
{
 8025fac:	b480      	push	{r7}
 8025fae:	b083      	sub	sp, #12
 8025fb0:	af00      	add	r7, sp, #0
 8025fb2:	6078      	str	r0, [r7, #4]
 8025fb4:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8025fb8:	687b      	ldr	r3, [r7, #4]
 8025fba:	ed93 7a00 	vldr	s14, [r3]
 8025fbe:	edd7 7a00 	vldr	s15, [r7]
 8025fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025fc6:	687b      	ldr	r3, [r7, #4]
 8025fc8:	edc3 7a00 	vstr	s15, [r3]
}
 8025fcc:	bf00      	nop
 8025fce:	370c      	adds	r7, #12
 8025fd0:	46bd      	mov	sp, r7
 8025fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fd6:	4770      	bx	lr

08025fd8 <Init>:
    &velocity_control
);
#endif // TEST_MODE

void Init()
{
 8025fd8:	b580      	push	{r7, lr}
 8025fda:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Init();
 8025fdc:	4802      	ldr	r0, [pc, #8]	; (8025fe8 <Init+0x10>)
 8025fde:	f7fe f8d1 	bl	8024184 <_ZN3Run4InitEv>
#else // TEST_MODE
    test.Init();
#endif // TEST_MODE
}
 8025fe2:	bf00      	nop
 8025fe4:	bd80      	pop	{r7, pc}
 8025fe6:	bf00      	nop
 8025fe8:	200005b8 	.word	0x200005b8

08025fec <InterruptTim7>:

void InterruptTim7()
{
 8025fec:	b580      	push	{r7, lr}
 8025fee:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer7();
 8025ff0:	4804      	ldr	r0, [pc, #16]	; (8026004 <InterruptTim7+0x18>)
 8025ff2:	f7fe f941 	bl	8024278 <_ZN3Run6Timer7Ev>
#else // TEST_MODE
    test.Timer7();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim7++;
 8025ff6:	4b04      	ldr	r3, [pc, #16]	; (8026008 <InterruptTim7+0x1c>)
 8025ff8:	681b      	ldr	r3, [r3, #0]
 8025ffa:	3301      	adds	r3, #1
 8025ffc:	4a02      	ldr	r2, [pc, #8]	; (8026008 <InterruptTim7+0x1c>)
 8025ffe:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8026000:	bf00      	nop
 8026002:	bd80      	pop	{r7, pc}
 8026004:	200005b8 	.word	0x200005b8
 8026008:	200002bc 	.word	0x200002bc

0802600c <InterruptTim6>:

void InterruptTim6()
{
 802600c:	b580      	push	{r7, lr}
 802600e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.RunMode();
 8026010:	4804      	ldr	r0, [pc, #16]	; (8026024 <InterruptTim6+0x18>)
 8026012:	f7fe fb2b 	bl	802466c <_ZN3Run7RunModeEv>
#else // TEST_MODE
    test.Timer6();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim6++;
 8026016:	4b04      	ldr	r3, [pc, #16]	; (8026028 <InterruptTim6+0x1c>)
 8026018:	681b      	ldr	r3, [r3, #0]
 802601a:	3301      	adds	r3, #1
 802601c:	4a02      	ldr	r2, [pc, #8]	; (8026028 <InterruptTim6+0x1c>)
 802601e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8026020:	bf00      	nop
 8026022:	bd80      	pop	{r7, pc}
 8026024:	200005b8 	.word	0x200005b8
 8026028:	200002c0 	.word	0x200002c0

0802602c <InterruptTim2>:

void InterruptTim2()
{
 802602c:	b580      	push	{r7, lr}
 802602e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer2();
 8026030:	4804      	ldr	r0, [pc, #16]	; (8026044 <InterruptTim2+0x18>)
 8026032:	f7fe f92f 	bl	8024294 <_ZN3Run6Timer2Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim2++;
 8026036:	4b04      	ldr	r3, [pc, #16]	; (8026048 <InterruptTim2+0x1c>)
 8026038:	681b      	ldr	r3, [r3, #0]
 802603a:	3301      	adds	r3, #1
 802603c:	4a02      	ldr	r2, [pc, #8]	; (8026048 <InterruptTim2+0x1c>)
 802603e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
 8026040:	bf00      	nop
 8026042:	bd80      	pop	{r7, pc}
 8026044:	200005b8 	.word	0x200005b8
 8026048:	200002c4 	.word	0x200002c4

0802604c <_Z41__static_initialization_and_destruction_0ii>:
 802604c:	b580      	push	{r7, lr}
 802604e:	b08a      	sub	sp, #40	; 0x28
 8026050:	af08      	add	r7, sp, #32
 8026052:	6078      	str	r0, [r7, #4]
 8026054:	6039      	str	r1, [r7, #0]
 8026056:	687b      	ldr	r3, [r7, #4]
 8026058:	2b01      	cmp	r3, #1
 802605a:	d134      	bne.n	80260c6 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 802605c:	683b      	ldr	r3, [r7, #0]
 802605e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8026062:	4293      	cmp	r3, r2
 8026064:	d12f      	bne.n	80260c6 <_Z41__static_initialization_and_destruction_0ii+0x7a>
Encoder encoder;
 8026066:	481a      	ldr	r0, [pc, #104]	; (80260d0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8026068:	f7fa fe54 	bl	8020d14 <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 802606c:	4819      	ldr	r0, [pc, #100]	; (80260d4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 802606e:	f7fb f933 	bl	80212d8 <_ZN8Iim42652C1Ev>
Led led;
 8026072:	4819      	ldr	r0, [pc, #100]	; (80260d8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8026074:	f7fb fb45 	bl	8021702 <_ZN3LedC1Ev>
LineSensor line_sensor;
 8026078:	4818      	ldr	r0, [pc, #96]	; (80260dc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 802607a:	f7fb fcfa 	bl	8021a72 <_ZN10LineSensorC1Ev>
LineTrace line_trace(&line_sensor);
 802607e:	4917      	ldr	r1, [pc, #92]	; (80260dc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8026080:	4817      	ldr	r0, [pc, #92]	; (80260e0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8026082:	f7fc f821 	bl	80220c8 <_ZN9LineTraceC1EP10LineSensor>
Logger logger;
 8026086:	4817      	ldr	r0, [pc, #92]	; (80260e4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8026088:	f7fc f976 	bl	8022378 <_ZN6LoggerC1Ev>
SideSensor side_sensor;
 802608c:	4816      	ldr	r0, [pc, #88]	; (80260e8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 802608e:	f7fe fee1 	bl	8024e54 <_ZN10SideSensorC1Ev>
VelocityControl velocity_control(&encoder);
 8026092:	490f      	ldr	r1, [pc, #60]	; (80260d0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8026094:	4815      	ldr	r0, [pc, #84]	; (80260ec <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8026096:	f7ff fe21 	bl	8025cdc <_ZN15VelocityControlC1EP7Encoder>
);
 802609a:	4b14      	ldr	r3, [pc, #80]	; (80260ec <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 802609c:	9307      	str	r3, [sp, #28]
 802609e:	4b12      	ldr	r3, [pc, #72]	; (80260e8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80260a0:	9306      	str	r3, [sp, #24]
 80260a2:	4b13      	ldr	r3, [pc, #76]	; (80260f0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80260a4:	9305      	str	r3, [sp, #20]
 80260a6:	4b13      	ldr	r3, [pc, #76]	; (80260f4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80260a8:	9304      	str	r3, [sp, #16]
 80260aa:	4b0e      	ldr	r3, [pc, #56]	; (80260e4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80260ac:	9303      	str	r3, [sp, #12]
 80260ae:	4b0c      	ldr	r3, [pc, #48]	; (80260e0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80260b0:	9302      	str	r3, [sp, #8]
 80260b2:	4b0a      	ldr	r3, [pc, #40]	; (80260dc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80260b4:	9301      	str	r3, [sp, #4]
 80260b6:	4b08      	ldr	r3, [pc, #32]	; (80260d8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80260b8:	9300      	str	r3, [sp, #0]
 80260ba:	4b06      	ldr	r3, [pc, #24]	; (80260d4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80260bc:	4a0e      	ldr	r2, [pc, #56]	; (80260f8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80260be:	4904      	ldr	r1, [pc, #16]	; (80260d0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80260c0:	480e      	ldr	r0, [pc, #56]	; (80260fc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80260c2:	f7fe f81b 	bl	80240fc <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3LedP10LineSensorP9LineTraceP6LoggerP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>
 80260c6:	bf00      	nop
 80260c8:	3708      	adds	r7, #8
 80260ca:	46bd      	mov	sp, r7
 80260cc:	bd80      	pop	{r7, pc}
 80260ce:	bf00      	nop
 80260d0:	200002e8 	.word	0x200002e8
 80260d4:	200002f8 	.word	0x200002f8
 80260d8:	20000300 	.word	0x20000300
 80260dc:	20000304 	.word	0x20000304
 80260e0:	20000490 	.word	0x20000490
 80260e4:	20000498 	.word	0x20000498
 80260e8:	200005a8 	.word	0x200005a8
 80260ec:	200005b0 	.word	0x200005b0
 80260f0:	200005a4 	.word	0x200005a4
 80260f4:	200005a0 	.word	0x200005a0
 80260f8:	200002f4 	.word	0x200002f4
 80260fc:	200005b8 	.word	0x200005b8

08026100 <_GLOBAL__sub_I_encoder>:
 8026100:	b580      	push	{r7, lr}
 8026102:	af00      	add	r7, sp, #0
 8026104:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8026108:	2001      	movs	r0, #1
 802610a:	f7ff ff9f 	bl	802604c <_Z41__static_initialization_and_destruction_0ii>
 802610e:	bd80      	pop	{r7, pc}

08026110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8026110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8026148 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8026114:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8026116:	e003      	b.n	8026120 <LoopCopyDataInit>

08026118 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8026118:	4b0c      	ldr	r3, [pc, #48]	; (802614c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 802611a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 802611c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 802611e:	3104      	adds	r1, #4

08026120 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8026120:	480b      	ldr	r0, [pc, #44]	; (8026150 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8026122:	4b0c      	ldr	r3, [pc, #48]	; (8026154 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8026124:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8026126:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8026128:	d3f6      	bcc.n	8026118 <CopyDataInit>
  ldr  r2, =_sbss
 802612a:	4a0b      	ldr	r2, [pc, #44]	; (8026158 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 802612c:	e002      	b.n	8026134 <LoopFillZerobss>

0802612e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 802612e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8026130:	f842 3b04 	str.w	r3, [r2], #4

08026134 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8026134:	4b09      	ldr	r3, [pc, #36]	; (802615c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8026136:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8026138:	d3f9      	bcc.n	802612e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 802613a:	f7ff fdb9 	bl	8025cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802613e:	f004 f8a1 	bl	802a284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8026142:	f7fc ffdd 	bl	8023100 <main>
  bx  lr    
 8026146:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8026148:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 802614c:	0802a340 	.word	0x0802a340
  ldr  r0, =_sdata
 8026150:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8026154:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8026158:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 802615c:	200009e4 	.word	0x200009e4

08026160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8026160:	e7fe      	b.n	8026160 <ADC_IRQHandler>
	...

08026164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8026164:	b580      	push	{r7, lr}
 8026166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8026168:	4b0e      	ldr	r3, [pc, #56]	; (80261a4 <HAL_Init+0x40>)
 802616a:	681b      	ldr	r3, [r3, #0]
 802616c:	4a0d      	ldr	r2, [pc, #52]	; (80261a4 <HAL_Init+0x40>)
 802616e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8026172:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8026174:	4b0b      	ldr	r3, [pc, #44]	; (80261a4 <HAL_Init+0x40>)
 8026176:	681b      	ldr	r3, [r3, #0]
 8026178:	4a0a      	ldr	r2, [pc, #40]	; (80261a4 <HAL_Init+0x40>)
 802617a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802617e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8026180:	4b08      	ldr	r3, [pc, #32]	; (80261a4 <HAL_Init+0x40>)
 8026182:	681b      	ldr	r3, [r3, #0]
 8026184:	4a07      	ldr	r2, [pc, #28]	; (80261a4 <HAL_Init+0x40>)
 8026186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802618a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802618c:	2003      	movs	r0, #3
 802618e:	f000 fd41 	bl	8026c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8026192:	2001      	movs	r0, #1
 8026194:	f000 f808 	bl	80261a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8026198:	f7ff f9ae 	bl	80254f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802619c:	2300      	movs	r3, #0
}
 802619e:	4618      	mov	r0, r3
 80261a0:	bd80      	pop	{r7, pc}
 80261a2:	bf00      	nop
 80261a4:	40023c00 	.word	0x40023c00

080261a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80261a8:	b580      	push	{r7, lr}
 80261aa:	b082      	sub	sp, #8
 80261ac:	af00      	add	r7, sp, #0
 80261ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80261b0:	4b12      	ldr	r3, [pc, #72]	; (80261fc <HAL_InitTick+0x54>)
 80261b2:	681a      	ldr	r2, [r3, #0]
 80261b4:	4b12      	ldr	r3, [pc, #72]	; (8026200 <HAL_InitTick+0x58>)
 80261b6:	781b      	ldrb	r3, [r3, #0]
 80261b8:	4619      	mov	r1, r3
 80261ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80261be:	fbb3 f3f1 	udiv	r3, r3, r1
 80261c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80261c6:	4618      	mov	r0, r3
 80261c8:	f000 fd59 	bl	8026c7e <HAL_SYSTICK_Config>
 80261cc:	4603      	mov	r3, r0
 80261ce:	2b00      	cmp	r3, #0
 80261d0:	d001      	beq.n	80261d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80261d2:	2301      	movs	r3, #1
 80261d4:	e00e      	b.n	80261f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80261d6:	687b      	ldr	r3, [r7, #4]
 80261d8:	2b0f      	cmp	r3, #15
 80261da:	d80a      	bhi.n	80261f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80261dc:	2200      	movs	r2, #0
 80261de:	6879      	ldr	r1, [r7, #4]
 80261e0:	f04f 30ff 	mov.w	r0, #4294967295
 80261e4:	f000 fd21 	bl	8026c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80261e8:	4a06      	ldr	r2, [pc, #24]	; (8026204 <HAL_InitTick+0x5c>)
 80261ea:	687b      	ldr	r3, [r7, #4]
 80261ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80261ee:	2300      	movs	r3, #0
 80261f0:	e000      	b.n	80261f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80261f2:	2301      	movs	r3, #1
}
 80261f4:	4618      	mov	r0, r3
 80261f6:	3708      	adds	r7, #8
 80261f8:	46bd      	mov	sp, r7
 80261fa:	bd80      	pop	{r7, pc}
 80261fc:	20000014 	.word	0x20000014
 8026200:	2000001c 	.word	0x2000001c
 8026204:	20000018 	.word	0x20000018

08026208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8026208:	b480      	push	{r7}
 802620a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 802620c:	4b06      	ldr	r3, [pc, #24]	; (8026228 <HAL_IncTick+0x20>)
 802620e:	781b      	ldrb	r3, [r3, #0]
 8026210:	461a      	mov	r2, r3
 8026212:	4b06      	ldr	r3, [pc, #24]	; (802622c <HAL_IncTick+0x24>)
 8026214:	681b      	ldr	r3, [r3, #0]
 8026216:	4413      	add	r3, r2
 8026218:	4a04      	ldr	r2, [pc, #16]	; (802622c <HAL_IncTick+0x24>)
 802621a:	6013      	str	r3, [r2, #0]
}
 802621c:	bf00      	nop
 802621e:	46bd      	mov	sp, r7
 8026220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026224:	4770      	bx	lr
 8026226:	bf00      	nop
 8026228:	2000001c 	.word	0x2000001c
 802622c:	200009c0 	.word	0x200009c0

08026230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8026230:	b480      	push	{r7}
 8026232:	af00      	add	r7, sp, #0
  return uwTick;
 8026234:	4b03      	ldr	r3, [pc, #12]	; (8026244 <HAL_GetTick+0x14>)
 8026236:	681b      	ldr	r3, [r3, #0]
}
 8026238:	4618      	mov	r0, r3
 802623a:	46bd      	mov	sp, r7
 802623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026240:	4770      	bx	lr
 8026242:	bf00      	nop
 8026244:	200009c0 	.word	0x200009c0

08026248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8026248:	b580      	push	{r7, lr}
 802624a:	b084      	sub	sp, #16
 802624c:	af00      	add	r7, sp, #0
 802624e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8026250:	f7ff ffee 	bl	8026230 <HAL_GetTick>
 8026254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8026256:	687b      	ldr	r3, [r7, #4]
 8026258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802625a:	68fb      	ldr	r3, [r7, #12]
 802625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026260:	d005      	beq.n	802626e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8026262:	4b09      	ldr	r3, [pc, #36]	; (8026288 <HAL_Delay+0x40>)
 8026264:	781b      	ldrb	r3, [r3, #0]
 8026266:	461a      	mov	r2, r3
 8026268:	68fb      	ldr	r3, [r7, #12]
 802626a:	4413      	add	r3, r2
 802626c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 802626e:	bf00      	nop
 8026270:	f7ff ffde 	bl	8026230 <HAL_GetTick>
 8026274:	4602      	mov	r2, r0
 8026276:	68bb      	ldr	r3, [r7, #8]
 8026278:	1ad3      	subs	r3, r2, r3
 802627a:	68fa      	ldr	r2, [r7, #12]
 802627c:	429a      	cmp	r2, r3
 802627e:	d8f7      	bhi.n	8026270 <HAL_Delay+0x28>
  {
  }
}
 8026280:	bf00      	nop
 8026282:	3710      	adds	r7, #16
 8026284:	46bd      	mov	sp, r7
 8026286:	bd80      	pop	{r7, pc}
 8026288:	2000001c 	.word	0x2000001c

0802628c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 802628c:	b580      	push	{r7, lr}
 802628e:	b084      	sub	sp, #16
 8026290:	af00      	add	r7, sp, #0
 8026292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8026294:	2300      	movs	r3, #0
 8026296:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8026298:	687b      	ldr	r3, [r7, #4]
 802629a:	2b00      	cmp	r3, #0
 802629c:	d101      	bne.n	80262a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 802629e:	2301      	movs	r3, #1
 80262a0:	e033      	b.n	802630a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80262a2:	687b      	ldr	r3, [r7, #4]
 80262a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80262a6:	2b00      	cmp	r3, #0
 80262a8:	d109      	bne.n	80262be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80262aa:	6878      	ldr	r0, [r7, #4]
 80262ac:	f7ff f94c 	bl	8025548 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80262b0:	687b      	ldr	r3, [r7, #4]
 80262b2:	2200      	movs	r2, #0
 80262b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80262b6:	687b      	ldr	r3, [r7, #4]
 80262b8:	2200      	movs	r2, #0
 80262ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80262be:	687b      	ldr	r3, [r7, #4]
 80262c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80262c2:	f003 0310 	and.w	r3, r3, #16
 80262c6:	2b00      	cmp	r3, #0
 80262c8:	d118      	bne.n	80262fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80262ca:	687b      	ldr	r3, [r7, #4]
 80262cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80262ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80262d2:	f023 0302 	bic.w	r3, r3, #2
 80262d6:	f043 0202 	orr.w	r2, r3, #2
 80262da:	687b      	ldr	r3, [r7, #4]
 80262dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80262de:	6878      	ldr	r0, [r7, #4]
 80262e0:	f000 fa4a 	bl	8026778 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80262e4:	687b      	ldr	r3, [r7, #4]
 80262e6:	2200      	movs	r2, #0
 80262e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80262ea:	687b      	ldr	r3, [r7, #4]
 80262ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80262ee:	f023 0303 	bic.w	r3, r3, #3
 80262f2:	f043 0201 	orr.w	r2, r3, #1
 80262f6:	687b      	ldr	r3, [r7, #4]
 80262f8:	641a      	str	r2, [r3, #64]	; 0x40
 80262fa:	e001      	b.n	8026300 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80262fc:	2301      	movs	r3, #1
 80262fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8026300:	687b      	ldr	r3, [r7, #4]
 8026302:	2200      	movs	r2, #0
 8026304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8026308:	7bfb      	ldrb	r3, [r7, #15]
}
 802630a:	4618      	mov	r0, r3
 802630c:	3710      	adds	r7, #16
 802630e:	46bd      	mov	sp, r7
 8026310:	bd80      	pop	{r7, pc}
	...

08026314 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8026314:	b580      	push	{r7, lr}
 8026316:	b086      	sub	sp, #24
 8026318:	af00      	add	r7, sp, #0
 802631a:	60f8      	str	r0, [r7, #12]
 802631c:	60b9      	str	r1, [r7, #8]
 802631e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8026320:	2300      	movs	r3, #0
 8026322:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8026324:	68fb      	ldr	r3, [r7, #12]
 8026326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802632a:	2b01      	cmp	r3, #1
 802632c:	d101      	bne.n	8026332 <HAL_ADC_Start_DMA+0x1e>
 802632e:	2302      	movs	r3, #2
 8026330:	e0cc      	b.n	80264cc <HAL_ADC_Start_DMA+0x1b8>
 8026332:	68fb      	ldr	r3, [r7, #12]
 8026334:	2201      	movs	r2, #1
 8026336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 802633a:	68fb      	ldr	r3, [r7, #12]
 802633c:	681b      	ldr	r3, [r3, #0]
 802633e:	689b      	ldr	r3, [r3, #8]
 8026340:	f003 0301 	and.w	r3, r3, #1
 8026344:	2b01      	cmp	r3, #1
 8026346:	d018      	beq.n	802637a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8026348:	68fb      	ldr	r3, [r7, #12]
 802634a:	681b      	ldr	r3, [r3, #0]
 802634c:	689a      	ldr	r2, [r3, #8]
 802634e:	68fb      	ldr	r3, [r7, #12]
 8026350:	681b      	ldr	r3, [r3, #0]
 8026352:	f042 0201 	orr.w	r2, r2, #1
 8026356:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8026358:	4b5e      	ldr	r3, [pc, #376]	; (80264d4 <HAL_ADC_Start_DMA+0x1c0>)
 802635a:	681b      	ldr	r3, [r3, #0]
 802635c:	4a5e      	ldr	r2, [pc, #376]	; (80264d8 <HAL_ADC_Start_DMA+0x1c4>)
 802635e:	fba2 2303 	umull	r2, r3, r2, r3
 8026362:	0c9a      	lsrs	r2, r3, #18
 8026364:	4613      	mov	r3, r2
 8026366:	005b      	lsls	r3, r3, #1
 8026368:	4413      	add	r3, r2
 802636a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 802636c:	e002      	b.n	8026374 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 802636e:	693b      	ldr	r3, [r7, #16]
 8026370:	3b01      	subs	r3, #1
 8026372:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8026374:	693b      	ldr	r3, [r7, #16]
 8026376:	2b00      	cmp	r3, #0
 8026378:	d1f9      	bne.n	802636e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 802637a:	68fb      	ldr	r3, [r7, #12]
 802637c:	681b      	ldr	r3, [r3, #0]
 802637e:	689b      	ldr	r3, [r3, #8]
 8026380:	f003 0301 	and.w	r3, r3, #1
 8026384:	2b01      	cmp	r3, #1
 8026386:	f040 80a0 	bne.w	80264ca <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 802638a:	68fb      	ldr	r3, [r7, #12]
 802638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802638e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8026392:	f023 0301 	bic.w	r3, r3, #1
 8026396:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802639a:	68fb      	ldr	r3, [r7, #12]
 802639c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 802639e:	68fb      	ldr	r3, [r7, #12]
 80263a0:	681b      	ldr	r3, [r3, #0]
 80263a2:	685b      	ldr	r3, [r3, #4]
 80263a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80263a8:	2b00      	cmp	r3, #0
 80263aa:	d007      	beq.n	80263bc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80263ac:	68fb      	ldr	r3, [r7, #12]
 80263ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80263b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80263b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80263b8:	68fb      	ldr	r3, [r7, #12]
 80263ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80263bc:	68fb      	ldr	r3, [r7, #12]
 80263be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80263c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80263c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80263c8:	d106      	bne.n	80263d8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80263ca:	68fb      	ldr	r3, [r7, #12]
 80263cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80263ce:	f023 0206 	bic.w	r2, r3, #6
 80263d2:	68fb      	ldr	r3, [r7, #12]
 80263d4:	645a      	str	r2, [r3, #68]	; 0x44
 80263d6:	e002      	b.n	80263de <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80263d8:	68fb      	ldr	r3, [r7, #12]
 80263da:	2200      	movs	r2, #0
 80263dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80263de:	68fb      	ldr	r3, [r7, #12]
 80263e0:	2200      	movs	r2, #0
 80263e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80263e6:	4b3d      	ldr	r3, [pc, #244]	; (80264dc <HAL_ADC_Start_DMA+0x1c8>)
 80263e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80263ea:	68fb      	ldr	r3, [r7, #12]
 80263ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80263ee:	4a3c      	ldr	r2, [pc, #240]	; (80264e0 <HAL_ADC_Start_DMA+0x1cc>)
 80263f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80263f2:	68fb      	ldr	r3, [r7, #12]
 80263f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80263f6:	4a3b      	ldr	r2, [pc, #236]	; (80264e4 <HAL_ADC_Start_DMA+0x1d0>)
 80263f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80263fa:	68fb      	ldr	r3, [r7, #12]
 80263fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80263fe:	4a3a      	ldr	r2, [pc, #232]	; (80264e8 <HAL_ADC_Start_DMA+0x1d4>)
 8026400:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8026402:	68fb      	ldr	r3, [r7, #12]
 8026404:	681b      	ldr	r3, [r3, #0]
 8026406:	f06f 0222 	mvn.w	r2, #34	; 0x22
 802640a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 802640c:	68fb      	ldr	r3, [r7, #12]
 802640e:	681b      	ldr	r3, [r3, #0]
 8026410:	685a      	ldr	r2, [r3, #4]
 8026412:	68fb      	ldr	r3, [r7, #12]
 8026414:	681b      	ldr	r3, [r3, #0]
 8026416:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 802641a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 802641c:	68fb      	ldr	r3, [r7, #12]
 802641e:	681b      	ldr	r3, [r3, #0]
 8026420:	689a      	ldr	r2, [r3, #8]
 8026422:	68fb      	ldr	r3, [r7, #12]
 8026424:	681b      	ldr	r3, [r3, #0]
 8026426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802642a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 802642c:	68fb      	ldr	r3, [r7, #12]
 802642e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8026430:	68fb      	ldr	r3, [r7, #12]
 8026432:	681b      	ldr	r3, [r3, #0]
 8026434:	334c      	adds	r3, #76	; 0x4c
 8026436:	4619      	mov	r1, r3
 8026438:	68ba      	ldr	r2, [r7, #8]
 802643a:	687b      	ldr	r3, [r7, #4]
 802643c:	f000 fcda 	bl	8026df4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8026440:	697b      	ldr	r3, [r7, #20]
 8026442:	685b      	ldr	r3, [r3, #4]
 8026444:	f003 031f 	and.w	r3, r3, #31
 8026448:	2b00      	cmp	r3, #0
 802644a:	d12a      	bne.n	80264a2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 802644c:	68fb      	ldr	r3, [r7, #12]
 802644e:	681b      	ldr	r3, [r3, #0]
 8026450:	4a26      	ldr	r2, [pc, #152]	; (80264ec <HAL_ADC_Start_DMA+0x1d8>)
 8026452:	4293      	cmp	r3, r2
 8026454:	d015      	beq.n	8026482 <HAL_ADC_Start_DMA+0x16e>
 8026456:	68fb      	ldr	r3, [r7, #12]
 8026458:	681b      	ldr	r3, [r3, #0]
 802645a:	4a25      	ldr	r2, [pc, #148]	; (80264f0 <HAL_ADC_Start_DMA+0x1dc>)
 802645c:	4293      	cmp	r3, r2
 802645e:	d105      	bne.n	802646c <HAL_ADC_Start_DMA+0x158>
 8026460:	4b1e      	ldr	r3, [pc, #120]	; (80264dc <HAL_ADC_Start_DMA+0x1c8>)
 8026462:	685b      	ldr	r3, [r3, #4]
 8026464:	f003 031f 	and.w	r3, r3, #31
 8026468:	2b00      	cmp	r3, #0
 802646a:	d00a      	beq.n	8026482 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 802646c:	68fb      	ldr	r3, [r7, #12]
 802646e:	681b      	ldr	r3, [r3, #0]
 8026470:	4a20      	ldr	r2, [pc, #128]	; (80264f4 <HAL_ADC_Start_DMA+0x1e0>)
 8026472:	4293      	cmp	r3, r2
 8026474:	d129      	bne.n	80264ca <HAL_ADC_Start_DMA+0x1b6>
 8026476:	4b19      	ldr	r3, [pc, #100]	; (80264dc <HAL_ADC_Start_DMA+0x1c8>)
 8026478:	685b      	ldr	r3, [r3, #4]
 802647a:	f003 031f 	and.w	r3, r3, #31
 802647e:	2b0f      	cmp	r3, #15
 8026480:	d823      	bhi.n	80264ca <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8026482:	68fb      	ldr	r3, [r7, #12]
 8026484:	681b      	ldr	r3, [r3, #0]
 8026486:	689b      	ldr	r3, [r3, #8]
 8026488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802648c:	2b00      	cmp	r3, #0
 802648e:	d11c      	bne.n	80264ca <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8026490:	68fb      	ldr	r3, [r7, #12]
 8026492:	681b      	ldr	r3, [r3, #0]
 8026494:	689a      	ldr	r2, [r3, #8]
 8026496:	68fb      	ldr	r3, [r7, #12]
 8026498:	681b      	ldr	r3, [r3, #0]
 802649a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 802649e:	609a      	str	r2, [r3, #8]
 80264a0:	e013      	b.n	80264ca <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80264a2:	68fb      	ldr	r3, [r7, #12]
 80264a4:	681b      	ldr	r3, [r3, #0]
 80264a6:	4a11      	ldr	r2, [pc, #68]	; (80264ec <HAL_ADC_Start_DMA+0x1d8>)
 80264a8:	4293      	cmp	r3, r2
 80264aa:	d10e      	bne.n	80264ca <HAL_ADC_Start_DMA+0x1b6>
 80264ac:	68fb      	ldr	r3, [r7, #12]
 80264ae:	681b      	ldr	r3, [r3, #0]
 80264b0:	689b      	ldr	r3, [r3, #8]
 80264b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80264b6:	2b00      	cmp	r3, #0
 80264b8:	d107      	bne.n	80264ca <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80264ba:	68fb      	ldr	r3, [r7, #12]
 80264bc:	681b      	ldr	r3, [r3, #0]
 80264be:	689a      	ldr	r2, [r3, #8]
 80264c0:	68fb      	ldr	r3, [r7, #12]
 80264c2:	681b      	ldr	r3, [r3, #0]
 80264c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80264c8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80264ca:	2300      	movs	r3, #0
}
 80264cc:	4618      	mov	r0, r3
 80264ce:	3718      	adds	r7, #24
 80264d0:	46bd      	mov	sp, r7
 80264d2:	bd80      	pop	{r7, pc}
 80264d4:	20000014 	.word	0x20000014
 80264d8:	431bde83 	.word	0x431bde83
 80264dc:	40012300 	.word	0x40012300
 80264e0:	08026971 	.word	0x08026971
 80264e4:	08026a2b 	.word	0x08026a2b
 80264e8:	08026a47 	.word	0x08026a47
 80264ec:	40012000 	.word	0x40012000
 80264f0:	40012100 	.word	0x40012100
 80264f4:	40012200 	.word	0x40012200

080264f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80264f8:	b480      	push	{r7}
 80264fa:	b083      	sub	sp, #12
 80264fc:	af00      	add	r7, sp, #0
 80264fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8026500:	bf00      	nop
 8026502:	370c      	adds	r7, #12
 8026504:	46bd      	mov	sp, r7
 8026506:	f85d 7b04 	ldr.w	r7, [sp], #4
 802650a:	4770      	bx	lr

0802650c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 802650c:	b480      	push	{r7}
 802650e:	b083      	sub	sp, #12
 8026510:	af00      	add	r7, sp, #0
 8026512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8026514:	bf00      	nop
 8026516:	370c      	adds	r7, #12
 8026518:	46bd      	mov	sp, r7
 802651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802651e:	4770      	bx	lr

08026520 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8026520:	b480      	push	{r7}
 8026522:	b083      	sub	sp, #12
 8026524:	af00      	add	r7, sp, #0
 8026526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8026528:	bf00      	nop
 802652a:	370c      	adds	r7, #12
 802652c:	46bd      	mov	sp, r7
 802652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026532:	4770      	bx	lr

08026534 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8026534:	b480      	push	{r7}
 8026536:	b085      	sub	sp, #20
 8026538:	af00      	add	r7, sp, #0
 802653a:	6078      	str	r0, [r7, #4]
 802653c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 802653e:	2300      	movs	r3, #0
 8026540:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8026542:	687b      	ldr	r3, [r7, #4]
 8026544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026548:	2b01      	cmp	r3, #1
 802654a:	d101      	bne.n	8026550 <HAL_ADC_ConfigChannel+0x1c>
 802654c:	2302      	movs	r3, #2
 802654e:	e105      	b.n	802675c <HAL_ADC_ConfigChannel+0x228>
 8026550:	687b      	ldr	r3, [r7, #4]
 8026552:	2201      	movs	r2, #1
 8026554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8026558:	683b      	ldr	r3, [r7, #0]
 802655a:	681b      	ldr	r3, [r3, #0]
 802655c:	2b09      	cmp	r3, #9
 802655e:	d925      	bls.n	80265ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8026560:	687b      	ldr	r3, [r7, #4]
 8026562:	681b      	ldr	r3, [r3, #0]
 8026564:	68d9      	ldr	r1, [r3, #12]
 8026566:	683b      	ldr	r3, [r7, #0]
 8026568:	681b      	ldr	r3, [r3, #0]
 802656a:	b29b      	uxth	r3, r3
 802656c:	461a      	mov	r2, r3
 802656e:	4613      	mov	r3, r2
 8026570:	005b      	lsls	r3, r3, #1
 8026572:	4413      	add	r3, r2
 8026574:	3b1e      	subs	r3, #30
 8026576:	2207      	movs	r2, #7
 8026578:	fa02 f303 	lsl.w	r3, r2, r3
 802657c:	43da      	mvns	r2, r3
 802657e:	687b      	ldr	r3, [r7, #4]
 8026580:	681b      	ldr	r3, [r3, #0]
 8026582:	400a      	ands	r2, r1
 8026584:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8026586:	687b      	ldr	r3, [r7, #4]
 8026588:	681b      	ldr	r3, [r3, #0]
 802658a:	68d9      	ldr	r1, [r3, #12]
 802658c:	683b      	ldr	r3, [r7, #0]
 802658e:	689a      	ldr	r2, [r3, #8]
 8026590:	683b      	ldr	r3, [r7, #0]
 8026592:	681b      	ldr	r3, [r3, #0]
 8026594:	b29b      	uxth	r3, r3
 8026596:	4618      	mov	r0, r3
 8026598:	4603      	mov	r3, r0
 802659a:	005b      	lsls	r3, r3, #1
 802659c:	4403      	add	r3, r0
 802659e:	3b1e      	subs	r3, #30
 80265a0:	409a      	lsls	r2, r3
 80265a2:	687b      	ldr	r3, [r7, #4]
 80265a4:	681b      	ldr	r3, [r3, #0]
 80265a6:	430a      	orrs	r2, r1
 80265a8:	60da      	str	r2, [r3, #12]
 80265aa:	e022      	b.n	80265f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80265ac:	687b      	ldr	r3, [r7, #4]
 80265ae:	681b      	ldr	r3, [r3, #0]
 80265b0:	6919      	ldr	r1, [r3, #16]
 80265b2:	683b      	ldr	r3, [r7, #0]
 80265b4:	681b      	ldr	r3, [r3, #0]
 80265b6:	b29b      	uxth	r3, r3
 80265b8:	461a      	mov	r2, r3
 80265ba:	4613      	mov	r3, r2
 80265bc:	005b      	lsls	r3, r3, #1
 80265be:	4413      	add	r3, r2
 80265c0:	2207      	movs	r2, #7
 80265c2:	fa02 f303 	lsl.w	r3, r2, r3
 80265c6:	43da      	mvns	r2, r3
 80265c8:	687b      	ldr	r3, [r7, #4]
 80265ca:	681b      	ldr	r3, [r3, #0]
 80265cc:	400a      	ands	r2, r1
 80265ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80265d0:	687b      	ldr	r3, [r7, #4]
 80265d2:	681b      	ldr	r3, [r3, #0]
 80265d4:	6919      	ldr	r1, [r3, #16]
 80265d6:	683b      	ldr	r3, [r7, #0]
 80265d8:	689a      	ldr	r2, [r3, #8]
 80265da:	683b      	ldr	r3, [r7, #0]
 80265dc:	681b      	ldr	r3, [r3, #0]
 80265de:	b29b      	uxth	r3, r3
 80265e0:	4618      	mov	r0, r3
 80265e2:	4603      	mov	r3, r0
 80265e4:	005b      	lsls	r3, r3, #1
 80265e6:	4403      	add	r3, r0
 80265e8:	409a      	lsls	r2, r3
 80265ea:	687b      	ldr	r3, [r7, #4]
 80265ec:	681b      	ldr	r3, [r3, #0]
 80265ee:	430a      	orrs	r2, r1
 80265f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80265f2:	683b      	ldr	r3, [r7, #0]
 80265f4:	685b      	ldr	r3, [r3, #4]
 80265f6:	2b06      	cmp	r3, #6
 80265f8:	d824      	bhi.n	8026644 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80265fa:	687b      	ldr	r3, [r7, #4]
 80265fc:	681b      	ldr	r3, [r3, #0]
 80265fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8026600:	683b      	ldr	r3, [r7, #0]
 8026602:	685a      	ldr	r2, [r3, #4]
 8026604:	4613      	mov	r3, r2
 8026606:	009b      	lsls	r3, r3, #2
 8026608:	4413      	add	r3, r2
 802660a:	3b05      	subs	r3, #5
 802660c:	221f      	movs	r2, #31
 802660e:	fa02 f303 	lsl.w	r3, r2, r3
 8026612:	43da      	mvns	r2, r3
 8026614:	687b      	ldr	r3, [r7, #4]
 8026616:	681b      	ldr	r3, [r3, #0]
 8026618:	400a      	ands	r2, r1
 802661a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 802661c:	687b      	ldr	r3, [r7, #4]
 802661e:	681b      	ldr	r3, [r3, #0]
 8026620:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8026622:	683b      	ldr	r3, [r7, #0]
 8026624:	681b      	ldr	r3, [r3, #0]
 8026626:	b29b      	uxth	r3, r3
 8026628:	4618      	mov	r0, r3
 802662a:	683b      	ldr	r3, [r7, #0]
 802662c:	685a      	ldr	r2, [r3, #4]
 802662e:	4613      	mov	r3, r2
 8026630:	009b      	lsls	r3, r3, #2
 8026632:	4413      	add	r3, r2
 8026634:	3b05      	subs	r3, #5
 8026636:	fa00 f203 	lsl.w	r2, r0, r3
 802663a:	687b      	ldr	r3, [r7, #4]
 802663c:	681b      	ldr	r3, [r3, #0]
 802663e:	430a      	orrs	r2, r1
 8026640:	635a      	str	r2, [r3, #52]	; 0x34
 8026642:	e04c      	b.n	80266de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8026644:	683b      	ldr	r3, [r7, #0]
 8026646:	685b      	ldr	r3, [r3, #4]
 8026648:	2b0c      	cmp	r3, #12
 802664a:	d824      	bhi.n	8026696 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 802664c:	687b      	ldr	r3, [r7, #4]
 802664e:	681b      	ldr	r3, [r3, #0]
 8026650:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8026652:	683b      	ldr	r3, [r7, #0]
 8026654:	685a      	ldr	r2, [r3, #4]
 8026656:	4613      	mov	r3, r2
 8026658:	009b      	lsls	r3, r3, #2
 802665a:	4413      	add	r3, r2
 802665c:	3b23      	subs	r3, #35	; 0x23
 802665e:	221f      	movs	r2, #31
 8026660:	fa02 f303 	lsl.w	r3, r2, r3
 8026664:	43da      	mvns	r2, r3
 8026666:	687b      	ldr	r3, [r7, #4]
 8026668:	681b      	ldr	r3, [r3, #0]
 802666a:	400a      	ands	r2, r1
 802666c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 802666e:	687b      	ldr	r3, [r7, #4]
 8026670:	681b      	ldr	r3, [r3, #0]
 8026672:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8026674:	683b      	ldr	r3, [r7, #0]
 8026676:	681b      	ldr	r3, [r3, #0]
 8026678:	b29b      	uxth	r3, r3
 802667a:	4618      	mov	r0, r3
 802667c:	683b      	ldr	r3, [r7, #0]
 802667e:	685a      	ldr	r2, [r3, #4]
 8026680:	4613      	mov	r3, r2
 8026682:	009b      	lsls	r3, r3, #2
 8026684:	4413      	add	r3, r2
 8026686:	3b23      	subs	r3, #35	; 0x23
 8026688:	fa00 f203 	lsl.w	r2, r0, r3
 802668c:	687b      	ldr	r3, [r7, #4]
 802668e:	681b      	ldr	r3, [r3, #0]
 8026690:	430a      	orrs	r2, r1
 8026692:	631a      	str	r2, [r3, #48]	; 0x30
 8026694:	e023      	b.n	80266de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8026696:	687b      	ldr	r3, [r7, #4]
 8026698:	681b      	ldr	r3, [r3, #0]
 802669a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802669c:	683b      	ldr	r3, [r7, #0]
 802669e:	685a      	ldr	r2, [r3, #4]
 80266a0:	4613      	mov	r3, r2
 80266a2:	009b      	lsls	r3, r3, #2
 80266a4:	4413      	add	r3, r2
 80266a6:	3b41      	subs	r3, #65	; 0x41
 80266a8:	221f      	movs	r2, #31
 80266aa:	fa02 f303 	lsl.w	r3, r2, r3
 80266ae:	43da      	mvns	r2, r3
 80266b0:	687b      	ldr	r3, [r7, #4]
 80266b2:	681b      	ldr	r3, [r3, #0]
 80266b4:	400a      	ands	r2, r1
 80266b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80266b8:	687b      	ldr	r3, [r7, #4]
 80266ba:	681b      	ldr	r3, [r3, #0]
 80266bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80266be:	683b      	ldr	r3, [r7, #0]
 80266c0:	681b      	ldr	r3, [r3, #0]
 80266c2:	b29b      	uxth	r3, r3
 80266c4:	4618      	mov	r0, r3
 80266c6:	683b      	ldr	r3, [r7, #0]
 80266c8:	685a      	ldr	r2, [r3, #4]
 80266ca:	4613      	mov	r3, r2
 80266cc:	009b      	lsls	r3, r3, #2
 80266ce:	4413      	add	r3, r2
 80266d0:	3b41      	subs	r3, #65	; 0x41
 80266d2:	fa00 f203 	lsl.w	r2, r0, r3
 80266d6:	687b      	ldr	r3, [r7, #4]
 80266d8:	681b      	ldr	r3, [r3, #0]
 80266da:	430a      	orrs	r2, r1
 80266dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80266de:	4b22      	ldr	r3, [pc, #136]	; (8026768 <HAL_ADC_ConfigChannel+0x234>)
 80266e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80266e2:	687b      	ldr	r3, [r7, #4]
 80266e4:	681b      	ldr	r3, [r3, #0]
 80266e6:	4a21      	ldr	r2, [pc, #132]	; (802676c <HAL_ADC_ConfigChannel+0x238>)
 80266e8:	4293      	cmp	r3, r2
 80266ea:	d109      	bne.n	8026700 <HAL_ADC_ConfigChannel+0x1cc>
 80266ec:	683b      	ldr	r3, [r7, #0]
 80266ee:	681b      	ldr	r3, [r3, #0]
 80266f0:	2b12      	cmp	r3, #18
 80266f2:	d105      	bne.n	8026700 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80266f4:	68fb      	ldr	r3, [r7, #12]
 80266f6:	685b      	ldr	r3, [r3, #4]
 80266f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80266fc:	68fb      	ldr	r3, [r7, #12]
 80266fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8026700:	687b      	ldr	r3, [r7, #4]
 8026702:	681b      	ldr	r3, [r3, #0]
 8026704:	4a19      	ldr	r2, [pc, #100]	; (802676c <HAL_ADC_ConfigChannel+0x238>)
 8026706:	4293      	cmp	r3, r2
 8026708:	d123      	bne.n	8026752 <HAL_ADC_ConfigChannel+0x21e>
 802670a:	683b      	ldr	r3, [r7, #0]
 802670c:	681b      	ldr	r3, [r3, #0]
 802670e:	2b10      	cmp	r3, #16
 8026710:	d003      	beq.n	802671a <HAL_ADC_ConfigChannel+0x1e6>
 8026712:	683b      	ldr	r3, [r7, #0]
 8026714:	681b      	ldr	r3, [r3, #0]
 8026716:	2b11      	cmp	r3, #17
 8026718:	d11b      	bne.n	8026752 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 802671a:	68fb      	ldr	r3, [r7, #12]
 802671c:	685b      	ldr	r3, [r3, #4]
 802671e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8026722:	68fb      	ldr	r3, [r7, #12]
 8026724:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8026726:	683b      	ldr	r3, [r7, #0]
 8026728:	681b      	ldr	r3, [r3, #0]
 802672a:	2b10      	cmp	r3, #16
 802672c:	d111      	bne.n	8026752 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 802672e:	4b10      	ldr	r3, [pc, #64]	; (8026770 <HAL_ADC_ConfigChannel+0x23c>)
 8026730:	681b      	ldr	r3, [r3, #0]
 8026732:	4a10      	ldr	r2, [pc, #64]	; (8026774 <HAL_ADC_ConfigChannel+0x240>)
 8026734:	fba2 2303 	umull	r2, r3, r2, r3
 8026738:	0c9a      	lsrs	r2, r3, #18
 802673a:	4613      	mov	r3, r2
 802673c:	009b      	lsls	r3, r3, #2
 802673e:	4413      	add	r3, r2
 8026740:	005b      	lsls	r3, r3, #1
 8026742:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8026744:	e002      	b.n	802674c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8026746:	68bb      	ldr	r3, [r7, #8]
 8026748:	3b01      	subs	r3, #1
 802674a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 802674c:	68bb      	ldr	r3, [r7, #8]
 802674e:	2b00      	cmp	r3, #0
 8026750:	d1f9      	bne.n	8026746 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8026752:	687b      	ldr	r3, [r7, #4]
 8026754:	2200      	movs	r2, #0
 8026756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 802675a:	2300      	movs	r3, #0
}
 802675c:	4618      	mov	r0, r3
 802675e:	3714      	adds	r7, #20
 8026760:	46bd      	mov	sp, r7
 8026762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026766:	4770      	bx	lr
 8026768:	40012300 	.word	0x40012300
 802676c:	40012000 	.word	0x40012000
 8026770:	20000014 	.word	0x20000014
 8026774:	431bde83 	.word	0x431bde83

08026778 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8026778:	b480      	push	{r7}
 802677a:	b085      	sub	sp, #20
 802677c:	af00      	add	r7, sp, #0
 802677e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026780:	4b79      	ldr	r3, [pc, #484]	; (8026968 <ADC_Init+0x1f0>)
 8026782:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8026784:	68fb      	ldr	r3, [r7, #12]
 8026786:	685b      	ldr	r3, [r3, #4]
 8026788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802678c:	68fb      	ldr	r3, [r7, #12]
 802678e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8026790:	68fb      	ldr	r3, [r7, #12]
 8026792:	685a      	ldr	r2, [r3, #4]
 8026794:	687b      	ldr	r3, [r7, #4]
 8026796:	685b      	ldr	r3, [r3, #4]
 8026798:	431a      	orrs	r2, r3
 802679a:	68fb      	ldr	r3, [r7, #12]
 802679c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 802679e:	687b      	ldr	r3, [r7, #4]
 80267a0:	681b      	ldr	r3, [r3, #0]
 80267a2:	685a      	ldr	r2, [r3, #4]
 80267a4:	687b      	ldr	r3, [r7, #4]
 80267a6:	681b      	ldr	r3, [r3, #0]
 80267a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80267ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80267ae:	687b      	ldr	r3, [r7, #4]
 80267b0:	681b      	ldr	r3, [r3, #0]
 80267b2:	6859      	ldr	r1, [r3, #4]
 80267b4:	687b      	ldr	r3, [r7, #4]
 80267b6:	691b      	ldr	r3, [r3, #16]
 80267b8:	021a      	lsls	r2, r3, #8
 80267ba:	687b      	ldr	r3, [r7, #4]
 80267bc:	681b      	ldr	r3, [r3, #0]
 80267be:	430a      	orrs	r2, r1
 80267c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80267c2:	687b      	ldr	r3, [r7, #4]
 80267c4:	681b      	ldr	r3, [r3, #0]
 80267c6:	685a      	ldr	r2, [r3, #4]
 80267c8:	687b      	ldr	r3, [r7, #4]
 80267ca:	681b      	ldr	r3, [r3, #0]
 80267cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80267d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80267d2:	687b      	ldr	r3, [r7, #4]
 80267d4:	681b      	ldr	r3, [r3, #0]
 80267d6:	6859      	ldr	r1, [r3, #4]
 80267d8:	687b      	ldr	r3, [r7, #4]
 80267da:	689a      	ldr	r2, [r3, #8]
 80267dc:	687b      	ldr	r3, [r7, #4]
 80267de:	681b      	ldr	r3, [r3, #0]
 80267e0:	430a      	orrs	r2, r1
 80267e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80267e4:	687b      	ldr	r3, [r7, #4]
 80267e6:	681b      	ldr	r3, [r3, #0]
 80267e8:	689a      	ldr	r2, [r3, #8]
 80267ea:	687b      	ldr	r3, [r7, #4]
 80267ec:	681b      	ldr	r3, [r3, #0]
 80267ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80267f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80267f4:	687b      	ldr	r3, [r7, #4]
 80267f6:	681b      	ldr	r3, [r3, #0]
 80267f8:	6899      	ldr	r1, [r3, #8]
 80267fa:	687b      	ldr	r3, [r7, #4]
 80267fc:	68da      	ldr	r2, [r3, #12]
 80267fe:	687b      	ldr	r3, [r7, #4]
 8026800:	681b      	ldr	r3, [r3, #0]
 8026802:	430a      	orrs	r2, r1
 8026804:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8026806:	687b      	ldr	r3, [r7, #4]
 8026808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802680a:	4a58      	ldr	r2, [pc, #352]	; (802696c <ADC_Init+0x1f4>)
 802680c:	4293      	cmp	r3, r2
 802680e:	d022      	beq.n	8026856 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8026810:	687b      	ldr	r3, [r7, #4]
 8026812:	681b      	ldr	r3, [r3, #0]
 8026814:	689a      	ldr	r2, [r3, #8]
 8026816:	687b      	ldr	r3, [r7, #4]
 8026818:	681b      	ldr	r3, [r3, #0]
 802681a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802681e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8026820:	687b      	ldr	r3, [r7, #4]
 8026822:	681b      	ldr	r3, [r3, #0]
 8026824:	6899      	ldr	r1, [r3, #8]
 8026826:	687b      	ldr	r3, [r7, #4]
 8026828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802682a:	687b      	ldr	r3, [r7, #4]
 802682c:	681b      	ldr	r3, [r3, #0]
 802682e:	430a      	orrs	r2, r1
 8026830:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8026832:	687b      	ldr	r3, [r7, #4]
 8026834:	681b      	ldr	r3, [r3, #0]
 8026836:	689a      	ldr	r2, [r3, #8]
 8026838:	687b      	ldr	r3, [r7, #4]
 802683a:	681b      	ldr	r3, [r3, #0]
 802683c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8026840:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8026842:	687b      	ldr	r3, [r7, #4]
 8026844:	681b      	ldr	r3, [r3, #0]
 8026846:	6899      	ldr	r1, [r3, #8]
 8026848:	687b      	ldr	r3, [r7, #4]
 802684a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802684c:	687b      	ldr	r3, [r7, #4]
 802684e:	681b      	ldr	r3, [r3, #0]
 8026850:	430a      	orrs	r2, r1
 8026852:	609a      	str	r2, [r3, #8]
 8026854:	e00f      	b.n	8026876 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8026856:	687b      	ldr	r3, [r7, #4]
 8026858:	681b      	ldr	r3, [r3, #0]
 802685a:	689a      	ldr	r2, [r3, #8]
 802685c:	687b      	ldr	r3, [r7, #4]
 802685e:	681b      	ldr	r3, [r3, #0]
 8026860:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8026864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8026866:	687b      	ldr	r3, [r7, #4]
 8026868:	681b      	ldr	r3, [r3, #0]
 802686a:	689a      	ldr	r2, [r3, #8]
 802686c:	687b      	ldr	r3, [r7, #4]
 802686e:	681b      	ldr	r3, [r3, #0]
 8026870:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8026874:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8026876:	687b      	ldr	r3, [r7, #4]
 8026878:	681b      	ldr	r3, [r3, #0]
 802687a:	689a      	ldr	r2, [r3, #8]
 802687c:	687b      	ldr	r3, [r7, #4]
 802687e:	681b      	ldr	r3, [r3, #0]
 8026880:	f022 0202 	bic.w	r2, r2, #2
 8026884:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8026886:	687b      	ldr	r3, [r7, #4]
 8026888:	681b      	ldr	r3, [r3, #0]
 802688a:	6899      	ldr	r1, [r3, #8]
 802688c:	687b      	ldr	r3, [r7, #4]
 802688e:	7e1b      	ldrb	r3, [r3, #24]
 8026890:	005a      	lsls	r2, r3, #1
 8026892:	687b      	ldr	r3, [r7, #4]
 8026894:	681b      	ldr	r3, [r3, #0]
 8026896:	430a      	orrs	r2, r1
 8026898:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 802689a:	687b      	ldr	r3, [r7, #4]
 802689c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80268a0:	2b00      	cmp	r3, #0
 80268a2:	d01b      	beq.n	80268dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80268a4:	687b      	ldr	r3, [r7, #4]
 80268a6:	681b      	ldr	r3, [r3, #0]
 80268a8:	685a      	ldr	r2, [r3, #4]
 80268aa:	687b      	ldr	r3, [r7, #4]
 80268ac:	681b      	ldr	r3, [r3, #0]
 80268ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80268b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80268b4:	687b      	ldr	r3, [r7, #4]
 80268b6:	681b      	ldr	r3, [r3, #0]
 80268b8:	685a      	ldr	r2, [r3, #4]
 80268ba:	687b      	ldr	r3, [r7, #4]
 80268bc:	681b      	ldr	r3, [r3, #0]
 80268be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80268c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80268c4:	687b      	ldr	r3, [r7, #4]
 80268c6:	681b      	ldr	r3, [r3, #0]
 80268c8:	6859      	ldr	r1, [r3, #4]
 80268ca:	687b      	ldr	r3, [r7, #4]
 80268cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80268ce:	3b01      	subs	r3, #1
 80268d0:	035a      	lsls	r2, r3, #13
 80268d2:	687b      	ldr	r3, [r7, #4]
 80268d4:	681b      	ldr	r3, [r3, #0]
 80268d6:	430a      	orrs	r2, r1
 80268d8:	605a      	str	r2, [r3, #4]
 80268da:	e007      	b.n	80268ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80268dc:	687b      	ldr	r3, [r7, #4]
 80268de:	681b      	ldr	r3, [r3, #0]
 80268e0:	685a      	ldr	r2, [r3, #4]
 80268e2:	687b      	ldr	r3, [r7, #4]
 80268e4:	681b      	ldr	r3, [r3, #0]
 80268e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80268ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80268ec:	687b      	ldr	r3, [r7, #4]
 80268ee:	681b      	ldr	r3, [r3, #0]
 80268f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80268f2:	687b      	ldr	r3, [r7, #4]
 80268f4:	681b      	ldr	r3, [r3, #0]
 80268f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80268fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80268fc:	687b      	ldr	r3, [r7, #4]
 80268fe:	681b      	ldr	r3, [r3, #0]
 8026900:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026902:	687b      	ldr	r3, [r7, #4]
 8026904:	69db      	ldr	r3, [r3, #28]
 8026906:	3b01      	subs	r3, #1
 8026908:	051a      	lsls	r2, r3, #20
 802690a:	687b      	ldr	r3, [r7, #4]
 802690c:	681b      	ldr	r3, [r3, #0]
 802690e:	430a      	orrs	r2, r1
 8026910:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8026912:	687b      	ldr	r3, [r7, #4]
 8026914:	681b      	ldr	r3, [r3, #0]
 8026916:	689a      	ldr	r2, [r3, #8]
 8026918:	687b      	ldr	r3, [r7, #4]
 802691a:	681b      	ldr	r3, [r3, #0]
 802691c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8026920:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8026922:	687b      	ldr	r3, [r7, #4]
 8026924:	681b      	ldr	r3, [r3, #0]
 8026926:	6899      	ldr	r1, [r3, #8]
 8026928:	687b      	ldr	r3, [r7, #4]
 802692a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802692e:	025a      	lsls	r2, r3, #9
 8026930:	687b      	ldr	r3, [r7, #4]
 8026932:	681b      	ldr	r3, [r3, #0]
 8026934:	430a      	orrs	r2, r1
 8026936:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8026938:	687b      	ldr	r3, [r7, #4]
 802693a:	681b      	ldr	r3, [r3, #0]
 802693c:	689a      	ldr	r2, [r3, #8]
 802693e:	687b      	ldr	r3, [r7, #4]
 8026940:	681b      	ldr	r3, [r3, #0]
 8026942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8026946:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8026948:	687b      	ldr	r3, [r7, #4]
 802694a:	681b      	ldr	r3, [r3, #0]
 802694c:	6899      	ldr	r1, [r3, #8]
 802694e:	687b      	ldr	r3, [r7, #4]
 8026950:	695b      	ldr	r3, [r3, #20]
 8026952:	029a      	lsls	r2, r3, #10
 8026954:	687b      	ldr	r3, [r7, #4]
 8026956:	681b      	ldr	r3, [r3, #0]
 8026958:	430a      	orrs	r2, r1
 802695a:	609a      	str	r2, [r3, #8]
}
 802695c:	bf00      	nop
 802695e:	3714      	adds	r7, #20
 8026960:	46bd      	mov	sp, r7
 8026962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026966:	4770      	bx	lr
 8026968:	40012300 	.word	0x40012300
 802696c:	0f000001 	.word	0x0f000001

08026970 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026970:	b580      	push	{r7, lr}
 8026972:	b084      	sub	sp, #16
 8026974:	af00      	add	r7, sp, #0
 8026976:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026978:	687b      	ldr	r3, [r7, #4]
 802697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802697c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 802697e:	68fb      	ldr	r3, [r7, #12]
 8026980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026982:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8026986:	2b00      	cmp	r3, #0
 8026988:	d13c      	bne.n	8026a04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 802698a:	68fb      	ldr	r3, [r7, #12]
 802698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802698e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8026992:	68fb      	ldr	r3, [r7, #12]
 8026994:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8026996:	68fb      	ldr	r3, [r7, #12]
 8026998:	681b      	ldr	r3, [r3, #0]
 802699a:	689b      	ldr	r3, [r3, #8]
 802699c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80269a0:	2b00      	cmp	r3, #0
 80269a2:	d12b      	bne.n	80269fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80269a4:	68fb      	ldr	r3, [r7, #12]
 80269a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80269a8:	2b00      	cmp	r3, #0
 80269aa:	d127      	bne.n	80269fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80269ac:	68fb      	ldr	r3, [r7, #12]
 80269ae:	681b      	ldr	r3, [r3, #0]
 80269b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80269b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80269b6:	2b00      	cmp	r3, #0
 80269b8:	d006      	beq.n	80269c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80269ba:	68fb      	ldr	r3, [r7, #12]
 80269bc:	681b      	ldr	r3, [r3, #0]
 80269be:	689b      	ldr	r3, [r3, #8]
 80269c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80269c4:	2b00      	cmp	r3, #0
 80269c6:	d119      	bne.n	80269fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80269c8:	68fb      	ldr	r3, [r7, #12]
 80269ca:	681b      	ldr	r3, [r3, #0]
 80269cc:	685a      	ldr	r2, [r3, #4]
 80269ce:	68fb      	ldr	r3, [r7, #12]
 80269d0:	681b      	ldr	r3, [r3, #0]
 80269d2:	f022 0220 	bic.w	r2, r2, #32
 80269d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80269d8:	68fb      	ldr	r3, [r7, #12]
 80269da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80269dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80269e0:	68fb      	ldr	r3, [r7, #12]
 80269e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80269e4:	68fb      	ldr	r3, [r7, #12]
 80269e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80269e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80269ec:	2b00      	cmp	r3, #0
 80269ee:	d105      	bne.n	80269fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80269f0:	68fb      	ldr	r3, [r7, #12]
 80269f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80269f4:	f043 0201 	orr.w	r2, r3, #1
 80269f8:	68fb      	ldr	r3, [r7, #12]
 80269fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80269fc:	68f8      	ldr	r0, [r7, #12]
 80269fe:	f7ff fd7b 	bl	80264f8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8026a02:	e00e      	b.n	8026a22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8026a04:	68fb      	ldr	r3, [r7, #12]
 8026a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026a08:	f003 0310 	and.w	r3, r3, #16
 8026a0c:	2b00      	cmp	r3, #0
 8026a0e:	d003      	beq.n	8026a18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8026a10:	68f8      	ldr	r0, [r7, #12]
 8026a12:	f7ff fd85 	bl	8026520 <HAL_ADC_ErrorCallback>
}
 8026a16:	e004      	b.n	8026a22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8026a18:	68fb      	ldr	r3, [r7, #12]
 8026a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8026a1e:	6878      	ldr	r0, [r7, #4]
 8026a20:	4798      	blx	r3
}
 8026a22:	bf00      	nop
 8026a24:	3710      	adds	r7, #16
 8026a26:	46bd      	mov	sp, r7
 8026a28:	bd80      	pop	{r7, pc}

08026a2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026a2a:	b580      	push	{r7, lr}
 8026a2c:	b084      	sub	sp, #16
 8026a2e:	af00      	add	r7, sp, #0
 8026a30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026a32:	687b      	ldr	r3, [r7, #4]
 8026a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026a36:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8026a38:	68f8      	ldr	r0, [r7, #12]
 8026a3a:	f7ff fd67 	bl	802650c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026a3e:	bf00      	nop
 8026a40:	3710      	adds	r7, #16
 8026a42:	46bd      	mov	sp, r7
 8026a44:	bd80      	pop	{r7, pc}

08026a46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8026a46:	b580      	push	{r7, lr}
 8026a48:	b084      	sub	sp, #16
 8026a4a:	af00      	add	r7, sp, #0
 8026a4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026a4e:	687b      	ldr	r3, [r7, #4]
 8026a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026a52:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8026a54:	68fb      	ldr	r3, [r7, #12]
 8026a56:	2240      	movs	r2, #64	; 0x40
 8026a58:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8026a5a:	68fb      	ldr	r3, [r7, #12]
 8026a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026a5e:	f043 0204 	orr.w	r2, r3, #4
 8026a62:	68fb      	ldr	r3, [r7, #12]
 8026a64:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8026a66:	68f8      	ldr	r0, [r7, #12]
 8026a68:	f7ff fd5a 	bl	8026520 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026a6c:	bf00      	nop
 8026a6e:	3710      	adds	r7, #16
 8026a70:	46bd      	mov	sp, r7
 8026a72:	bd80      	pop	{r7, pc}

08026a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026a74:	b480      	push	{r7}
 8026a76:	b085      	sub	sp, #20
 8026a78:	af00      	add	r7, sp, #0
 8026a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8026a7c:	687b      	ldr	r3, [r7, #4]
 8026a7e:	f003 0307 	and.w	r3, r3, #7
 8026a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8026a84:	4b0c      	ldr	r3, [pc, #48]	; (8026ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8026a86:	68db      	ldr	r3, [r3, #12]
 8026a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8026a8a:	68ba      	ldr	r2, [r7, #8]
 8026a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8026a90:	4013      	ands	r3, r2
 8026a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8026a94:	68fb      	ldr	r3, [r7, #12]
 8026a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8026a98:	68bb      	ldr	r3, [r7, #8]
 8026a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8026a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8026aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8026aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8026aa6:	4a04      	ldr	r2, [pc, #16]	; (8026ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8026aa8:	68bb      	ldr	r3, [r7, #8]
 8026aaa:	60d3      	str	r3, [r2, #12]
}
 8026aac:	bf00      	nop
 8026aae:	3714      	adds	r7, #20
 8026ab0:	46bd      	mov	sp, r7
 8026ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ab6:	4770      	bx	lr
 8026ab8:	e000ed00 	.word	0xe000ed00

08026abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8026abc:	b480      	push	{r7}
 8026abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8026ac0:	4b04      	ldr	r3, [pc, #16]	; (8026ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8026ac2:	68db      	ldr	r3, [r3, #12]
 8026ac4:	0a1b      	lsrs	r3, r3, #8
 8026ac6:	f003 0307 	and.w	r3, r3, #7
}
 8026aca:	4618      	mov	r0, r3
 8026acc:	46bd      	mov	sp, r7
 8026ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ad2:	4770      	bx	lr
 8026ad4:	e000ed00 	.word	0xe000ed00

08026ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026ad8:	b480      	push	{r7}
 8026ada:	b083      	sub	sp, #12
 8026adc:	af00      	add	r7, sp, #0
 8026ade:	4603      	mov	r3, r0
 8026ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026ae6:	2b00      	cmp	r3, #0
 8026ae8:	db0b      	blt.n	8026b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8026aea:	79fb      	ldrb	r3, [r7, #7]
 8026aec:	f003 021f 	and.w	r2, r3, #31
 8026af0:	4907      	ldr	r1, [pc, #28]	; (8026b10 <__NVIC_EnableIRQ+0x38>)
 8026af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026af6:	095b      	lsrs	r3, r3, #5
 8026af8:	2001      	movs	r0, #1
 8026afa:	fa00 f202 	lsl.w	r2, r0, r2
 8026afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8026b02:	bf00      	nop
 8026b04:	370c      	adds	r7, #12
 8026b06:	46bd      	mov	sp, r7
 8026b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b0c:	4770      	bx	lr
 8026b0e:	bf00      	nop
 8026b10:	e000e100 	.word	0xe000e100

08026b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8026b14:	b480      	push	{r7}
 8026b16:	b083      	sub	sp, #12
 8026b18:	af00      	add	r7, sp, #0
 8026b1a:	4603      	mov	r3, r0
 8026b1c:	6039      	str	r1, [r7, #0]
 8026b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026b24:	2b00      	cmp	r3, #0
 8026b26:	db0a      	blt.n	8026b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026b28:	683b      	ldr	r3, [r7, #0]
 8026b2a:	b2da      	uxtb	r2, r3
 8026b2c:	490c      	ldr	r1, [pc, #48]	; (8026b60 <__NVIC_SetPriority+0x4c>)
 8026b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026b32:	0112      	lsls	r2, r2, #4
 8026b34:	b2d2      	uxtb	r2, r2
 8026b36:	440b      	add	r3, r1
 8026b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8026b3c:	e00a      	b.n	8026b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026b3e:	683b      	ldr	r3, [r7, #0]
 8026b40:	b2da      	uxtb	r2, r3
 8026b42:	4908      	ldr	r1, [pc, #32]	; (8026b64 <__NVIC_SetPriority+0x50>)
 8026b44:	79fb      	ldrb	r3, [r7, #7]
 8026b46:	f003 030f 	and.w	r3, r3, #15
 8026b4a:	3b04      	subs	r3, #4
 8026b4c:	0112      	lsls	r2, r2, #4
 8026b4e:	b2d2      	uxtb	r2, r2
 8026b50:	440b      	add	r3, r1
 8026b52:	761a      	strb	r2, [r3, #24]
}
 8026b54:	bf00      	nop
 8026b56:	370c      	adds	r7, #12
 8026b58:	46bd      	mov	sp, r7
 8026b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b5e:	4770      	bx	lr
 8026b60:	e000e100 	.word	0xe000e100
 8026b64:	e000ed00 	.word	0xe000ed00

08026b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8026b68:	b480      	push	{r7}
 8026b6a:	b089      	sub	sp, #36	; 0x24
 8026b6c:	af00      	add	r7, sp, #0
 8026b6e:	60f8      	str	r0, [r7, #12]
 8026b70:	60b9      	str	r1, [r7, #8]
 8026b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8026b74:	68fb      	ldr	r3, [r7, #12]
 8026b76:	f003 0307 	and.w	r3, r3, #7
 8026b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8026b7c:	69fb      	ldr	r3, [r7, #28]
 8026b7e:	f1c3 0307 	rsb	r3, r3, #7
 8026b82:	2b04      	cmp	r3, #4
 8026b84:	bf28      	it	cs
 8026b86:	2304      	movcs	r3, #4
 8026b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8026b8a:	69fb      	ldr	r3, [r7, #28]
 8026b8c:	3304      	adds	r3, #4
 8026b8e:	2b06      	cmp	r3, #6
 8026b90:	d902      	bls.n	8026b98 <NVIC_EncodePriority+0x30>
 8026b92:	69fb      	ldr	r3, [r7, #28]
 8026b94:	3b03      	subs	r3, #3
 8026b96:	e000      	b.n	8026b9a <NVIC_EncodePriority+0x32>
 8026b98:	2300      	movs	r3, #0
 8026b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8026ba0:	69bb      	ldr	r3, [r7, #24]
 8026ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8026ba6:	43da      	mvns	r2, r3
 8026ba8:	68bb      	ldr	r3, [r7, #8]
 8026baa:	401a      	ands	r2, r3
 8026bac:	697b      	ldr	r3, [r7, #20]
 8026bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8026bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8026bb4:	697b      	ldr	r3, [r7, #20]
 8026bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8026bba:	43d9      	mvns	r1, r3
 8026bbc:	687b      	ldr	r3, [r7, #4]
 8026bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026bc0:	4313      	orrs	r3, r2
         );
}
 8026bc2:	4618      	mov	r0, r3
 8026bc4:	3724      	adds	r7, #36	; 0x24
 8026bc6:	46bd      	mov	sp, r7
 8026bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bcc:	4770      	bx	lr
	...

08026bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8026bd0:	b580      	push	{r7, lr}
 8026bd2:	b082      	sub	sp, #8
 8026bd4:	af00      	add	r7, sp, #0
 8026bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8026bd8:	687b      	ldr	r3, [r7, #4]
 8026bda:	3b01      	subs	r3, #1
 8026bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8026be0:	d301      	bcc.n	8026be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8026be2:	2301      	movs	r3, #1
 8026be4:	e00f      	b.n	8026c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8026be6:	4a0a      	ldr	r2, [pc, #40]	; (8026c10 <SysTick_Config+0x40>)
 8026be8:	687b      	ldr	r3, [r7, #4]
 8026bea:	3b01      	subs	r3, #1
 8026bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8026bee:	210f      	movs	r1, #15
 8026bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8026bf4:	f7ff ff8e 	bl	8026b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8026bf8:	4b05      	ldr	r3, [pc, #20]	; (8026c10 <SysTick_Config+0x40>)
 8026bfa:	2200      	movs	r2, #0
 8026bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8026bfe:	4b04      	ldr	r3, [pc, #16]	; (8026c10 <SysTick_Config+0x40>)
 8026c00:	2207      	movs	r2, #7
 8026c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8026c04:	2300      	movs	r3, #0
}
 8026c06:	4618      	mov	r0, r3
 8026c08:	3708      	adds	r7, #8
 8026c0a:	46bd      	mov	sp, r7
 8026c0c:	bd80      	pop	{r7, pc}
 8026c0e:	bf00      	nop
 8026c10:	e000e010 	.word	0xe000e010

08026c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026c14:	b580      	push	{r7, lr}
 8026c16:	b082      	sub	sp, #8
 8026c18:	af00      	add	r7, sp, #0
 8026c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8026c1c:	6878      	ldr	r0, [r7, #4]
 8026c1e:	f7ff ff29 	bl	8026a74 <__NVIC_SetPriorityGrouping>
}
 8026c22:	bf00      	nop
 8026c24:	3708      	adds	r7, #8
 8026c26:	46bd      	mov	sp, r7
 8026c28:	bd80      	pop	{r7, pc}

08026c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8026c2a:	b580      	push	{r7, lr}
 8026c2c:	b086      	sub	sp, #24
 8026c2e:	af00      	add	r7, sp, #0
 8026c30:	4603      	mov	r3, r0
 8026c32:	60b9      	str	r1, [r7, #8]
 8026c34:	607a      	str	r2, [r7, #4]
 8026c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8026c38:	2300      	movs	r3, #0
 8026c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8026c3c:	f7ff ff3e 	bl	8026abc <__NVIC_GetPriorityGrouping>
 8026c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8026c42:	687a      	ldr	r2, [r7, #4]
 8026c44:	68b9      	ldr	r1, [r7, #8]
 8026c46:	6978      	ldr	r0, [r7, #20]
 8026c48:	f7ff ff8e 	bl	8026b68 <NVIC_EncodePriority>
 8026c4c:	4602      	mov	r2, r0
 8026c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8026c52:	4611      	mov	r1, r2
 8026c54:	4618      	mov	r0, r3
 8026c56:	f7ff ff5d 	bl	8026b14 <__NVIC_SetPriority>
}
 8026c5a:	bf00      	nop
 8026c5c:	3718      	adds	r7, #24
 8026c5e:	46bd      	mov	sp, r7
 8026c60:	bd80      	pop	{r7, pc}

08026c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026c62:	b580      	push	{r7, lr}
 8026c64:	b082      	sub	sp, #8
 8026c66:	af00      	add	r7, sp, #0
 8026c68:	4603      	mov	r3, r0
 8026c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8026c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026c70:	4618      	mov	r0, r3
 8026c72:	f7ff ff31 	bl	8026ad8 <__NVIC_EnableIRQ>
}
 8026c76:	bf00      	nop
 8026c78:	3708      	adds	r7, #8
 8026c7a:	46bd      	mov	sp, r7
 8026c7c:	bd80      	pop	{r7, pc}

08026c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8026c7e:	b580      	push	{r7, lr}
 8026c80:	b082      	sub	sp, #8
 8026c82:	af00      	add	r7, sp, #0
 8026c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8026c86:	6878      	ldr	r0, [r7, #4]
 8026c88:	f7ff ffa2 	bl	8026bd0 <SysTick_Config>
 8026c8c:	4603      	mov	r3, r0
}
 8026c8e:	4618      	mov	r0, r3
 8026c90:	3708      	adds	r7, #8
 8026c92:	46bd      	mov	sp, r7
 8026c94:	bd80      	pop	{r7, pc}
	...

08026c98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8026c98:	b580      	push	{r7, lr}
 8026c9a:	b086      	sub	sp, #24
 8026c9c:	af00      	add	r7, sp, #0
 8026c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8026ca0:	2300      	movs	r3, #0
 8026ca2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8026ca4:	f7ff fac4 	bl	8026230 <HAL_GetTick>
 8026ca8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8026caa:	687b      	ldr	r3, [r7, #4]
 8026cac:	2b00      	cmp	r3, #0
 8026cae:	d101      	bne.n	8026cb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8026cb0:	2301      	movs	r3, #1
 8026cb2:	e099      	b.n	8026de8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8026cb4:	687b      	ldr	r3, [r7, #4]
 8026cb6:	2200      	movs	r2, #0
 8026cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8026cbc:	687b      	ldr	r3, [r7, #4]
 8026cbe:	2202      	movs	r2, #2
 8026cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8026cc4:	687b      	ldr	r3, [r7, #4]
 8026cc6:	681b      	ldr	r3, [r3, #0]
 8026cc8:	681a      	ldr	r2, [r3, #0]
 8026cca:	687b      	ldr	r3, [r7, #4]
 8026ccc:	681b      	ldr	r3, [r3, #0]
 8026cce:	f022 0201 	bic.w	r2, r2, #1
 8026cd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026cd4:	e00f      	b.n	8026cf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8026cd6:	f7ff faab 	bl	8026230 <HAL_GetTick>
 8026cda:	4602      	mov	r2, r0
 8026cdc:	693b      	ldr	r3, [r7, #16]
 8026cde:	1ad3      	subs	r3, r2, r3
 8026ce0:	2b05      	cmp	r3, #5
 8026ce2:	d908      	bls.n	8026cf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8026ce4:	687b      	ldr	r3, [r7, #4]
 8026ce6:	2220      	movs	r2, #32
 8026ce8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8026cea:	687b      	ldr	r3, [r7, #4]
 8026cec:	2203      	movs	r2, #3
 8026cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8026cf2:	2303      	movs	r3, #3
 8026cf4:	e078      	b.n	8026de8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026cf6:	687b      	ldr	r3, [r7, #4]
 8026cf8:	681b      	ldr	r3, [r3, #0]
 8026cfa:	681b      	ldr	r3, [r3, #0]
 8026cfc:	f003 0301 	and.w	r3, r3, #1
 8026d00:	2b00      	cmp	r3, #0
 8026d02:	d1e8      	bne.n	8026cd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8026d04:	687b      	ldr	r3, [r7, #4]
 8026d06:	681b      	ldr	r3, [r3, #0]
 8026d08:	681b      	ldr	r3, [r3, #0]
 8026d0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8026d0c:	697a      	ldr	r2, [r7, #20]
 8026d0e:	4b38      	ldr	r3, [pc, #224]	; (8026df0 <HAL_DMA_Init+0x158>)
 8026d10:	4013      	ands	r3, r2
 8026d12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026d14:	687b      	ldr	r3, [r7, #4]
 8026d16:	685a      	ldr	r2, [r3, #4]
 8026d18:	687b      	ldr	r3, [r7, #4]
 8026d1a:	689b      	ldr	r3, [r3, #8]
 8026d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026d1e:	687b      	ldr	r3, [r7, #4]
 8026d20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026d24:	687b      	ldr	r3, [r7, #4]
 8026d26:	691b      	ldr	r3, [r3, #16]
 8026d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026d2a:	687b      	ldr	r3, [r7, #4]
 8026d2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026d30:	687b      	ldr	r3, [r7, #4]
 8026d32:	699b      	ldr	r3, [r3, #24]
 8026d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026d36:	687b      	ldr	r3, [r7, #4]
 8026d38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026d3c:	687b      	ldr	r3, [r7, #4]
 8026d3e:	6a1b      	ldr	r3, [r3, #32]
 8026d40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026d42:	697a      	ldr	r2, [r7, #20]
 8026d44:	4313      	orrs	r3, r2
 8026d46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026d48:	687b      	ldr	r3, [r7, #4]
 8026d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026d4c:	2b04      	cmp	r3, #4
 8026d4e:	d107      	bne.n	8026d60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8026d50:	687b      	ldr	r3, [r7, #4]
 8026d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026d54:	687b      	ldr	r3, [r7, #4]
 8026d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026d58:	4313      	orrs	r3, r2
 8026d5a:	697a      	ldr	r2, [r7, #20]
 8026d5c:	4313      	orrs	r3, r2
 8026d5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8026d60:	687b      	ldr	r3, [r7, #4]
 8026d62:	681b      	ldr	r3, [r3, #0]
 8026d64:	697a      	ldr	r2, [r7, #20]
 8026d66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8026d68:	687b      	ldr	r3, [r7, #4]
 8026d6a:	681b      	ldr	r3, [r3, #0]
 8026d6c:	695b      	ldr	r3, [r3, #20]
 8026d6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8026d70:	697b      	ldr	r3, [r7, #20]
 8026d72:	f023 0307 	bic.w	r3, r3, #7
 8026d76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8026d78:	687b      	ldr	r3, [r7, #4]
 8026d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026d7c:	697a      	ldr	r2, [r7, #20]
 8026d7e:	4313      	orrs	r3, r2
 8026d80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026d82:	687b      	ldr	r3, [r7, #4]
 8026d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026d86:	2b04      	cmp	r3, #4
 8026d88:	d117      	bne.n	8026dba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8026d8a:	687b      	ldr	r3, [r7, #4]
 8026d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026d8e:	697a      	ldr	r2, [r7, #20]
 8026d90:	4313      	orrs	r3, r2
 8026d92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8026d94:	687b      	ldr	r3, [r7, #4]
 8026d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026d98:	2b00      	cmp	r3, #0
 8026d9a:	d00e      	beq.n	8026dba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8026d9c:	6878      	ldr	r0, [r7, #4]
 8026d9e:	f000 fa6f 	bl	8027280 <DMA_CheckFifoParam>
 8026da2:	4603      	mov	r3, r0
 8026da4:	2b00      	cmp	r3, #0
 8026da6:	d008      	beq.n	8026dba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8026da8:	687b      	ldr	r3, [r7, #4]
 8026daa:	2240      	movs	r2, #64	; 0x40
 8026dac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8026dae:	687b      	ldr	r3, [r7, #4]
 8026db0:	2201      	movs	r2, #1
 8026db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8026db6:	2301      	movs	r3, #1
 8026db8:	e016      	b.n	8026de8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8026dba:	687b      	ldr	r3, [r7, #4]
 8026dbc:	681b      	ldr	r3, [r3, #0]
 8026dbe:	697a      	ldr	r2, [r7, #20]
 8026dc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8026dc2:	6878      	ldr	r0, [r7, #4]
 8026dc4:	f000 fa26 	bl	8027214 <DMA_CalcBaseAndBitshift>
 8026dc8:	4603      	mov	r3, r0
 8026dca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026dcc:	687b      	ldr	r3, [r7, #4]
 8026dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026dd0:	223f      	movs	r2, #63	; 0x3f
 8026dd2:	409a      	lsls	r2, r3
 8026dd4:	68fb      	ldr	r3, [r7, #12]
 8026dd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8026dd8:	687b      	ldr	r3, [r7, #4]
 8026dda:	2200      	movs	r2, #0
 8026ddc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8026dde:	687b      	ldr	r3, [r7, #4]
 8026de0:	2201      	movs	r2, #1
 8026de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8026de6:	2300      	movs	r3, #0
}
 8026de8:	4618      	mov	r0, r3
 8026dea:	3718      	adds	r7, #24
 8026dec:	46bd      	mov	sp, r7
 8026dee:	bd80      	pop	{r7, pc}
 8026df0:	f010803f 	.word	0xf010803f

08026df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8026df4:	b580      	push	{r7, lr}
 8026df6:	b086      	sub	sp, #24
 8026df8:	af00      	add	r7, sp, #0
 8026dfa:	60f8      	str	r0, [r7, #12]
 8026dfc:	60b9      	str	r1, [r7, #8]
 8026dfe:	607a      	str	r2, [r7, #4]
 8026e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8026e02:	2300      	movs	r3, #0
 8026e04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8026e06:	68fb      	ldr	r3, [r7, #12]
 8026e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8026e0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8026e0c:	68fb      	ldr	r3, [r7, #12]
 8026e0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8026e12:	2b01      	cmp	r3, #1
 8026e14:	d101      	bne.n	8026e1a <HAL_DMA_Start_IT+0x26>
 8026e16:	2302      	movs	r3, #2
 8026e18:	e040      	b.n	8026e9c <HAL_DMA_Start_IT+0xa8>
 8026e1a:	68fb      	ldr	r3, [r7, #12]
 8026e1c:	2201      	movs	r2, #1
 8026e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8026e22:	68fb      	ldr	r3, [r7, #12]
 8026e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8026e28:	b2db      	uxtb	r3, r3
 8026e2a:	2b01      	cmp	r3, #1
 8026e2c:	d12f      	bne.n	8026e8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8026e2e:	68fb      	ldr	r3, [r7, #12]
 8026e30:	2202      	movs	r2, #2
 8026e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8026e36:	68fb      	ldr	r3, [r7, #12]
 8026e38:	2200      	movs	r2, #0
 8026e3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8026e3c:	683b      	ldr	r3, [r7, #0]
 8026e3e:	687a      	ldr	r2, [r7, #4]
 8026e40:	68b9      	ldr	r1, [r7, #8]
 8026e42:	68f8      	ldr	r0, [r7, #12]
 8026e44:	f000 f9b8 	bl	80271b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026e48:	68fb      	ldr	r3, [r7, #12]
 8026e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026e4c:	223f      	movs	r2, #63	; 0x3f
 8026e4e:	409a      	lsls	r2, r3
 8026e50:	693b      	ldr	r3, [r7, #16]
 8026e52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8026e54:	68fb      	ldr	r3, [r7, #12]
 8026e56:	681b      	ldr	r3, [r3, #0]
 8026e58:	681a      	ldr	r2, [r3, #0]
 8026e5a:	68fb      	ldr	r3, [r7, #12]
 8026e5c:	681b      	ldr	r3, [r3, #0]
 8026e5e:	f042 0216 	orr.w	r2, r2, #22
 8026e62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8026e64:	68fb      	ldr	r3, [r7, #12]
 8026e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e68:	2b00      	cmp	r3, #0
 8026e6a:	d007      	beq.n	8026e7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8026e6c:	68fb      	ldr	r3, [r7, #12]
 8026e6e:	681b      	ldr	r3, [r3, #0]
 8026e70:	681a      	ldr	r2, [r3, #0]
 8026e72:	68fb      	ldr	r3, [r7, #12]
 8026e74:	681b      	ldr	r3, [r3, #0]
 8026e76:	f042 0208 	orr.w	r2, r2, #8
 8026e7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8026e7c:	68fb      	ldr	r3, [r7, #12]
 8026e7e:	681b      	ldr	r3, [r3, #0]
 8026e80:	681a      	ldr	r2, [r3, #0]
 8026e82:	68fb      	ldr	r3, [r7, #12]
 8026e84:	681b      	ldr	r3, [r3, #0]
 8026e86:	f042 0201 	orr.w	r2, r2, #1
 8026e8a:	601a      	str	r2, [r3, #0]
 8026e8c:	e005      	b.n	8026e9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8026e8e:	68fb      	ldr	r3, [r7, #12]
 8026e90:	2200      	movs	r2, #0
 8026e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8026e96:	2302      	movs	r3, #2
 8026e98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8026e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8026e9c:	4618      	mov	r0, r3
 8026e9e:	3718      	adds	r7, #24
 8026ea0:	46bd      	mov	sp, r7
 8026ea2:	bd80      	pop	{r7, pc}

08026ea4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8026ea4:	b580      	push	{r7, lr}
 8026ea6:	b086      	sub	sp, #24
 8026ea8:	af00      	add	r7, sp, #0
 8026eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8026eac:	2300      	movs	r3, #0
 8026eae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8026eb0:	4b92      	ldr	r3, [pc, #584]	; (80270fc <HAL_DMA_IRQHandler+0x258>)
 8026eb2:	681b      	ldr	r3, [r3, #0]
 8026eb4:	4a92      	ldr	r2, [pc, #584]	; (8027100 <HAL_DMA_IRQHandler+0x25c>)
 8026eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8026eba:	0a9b      	lsrs	r3, r3, #10
 8026ebc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8026ebe:	687b      	ldr	r3, [r7, #4]
 8026ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8026ec2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8026ec4:	693b      	ldr	r3, [r7, #16]
 8026ec6:	681b      	ldr	r3, [r3, #0]
 8026ec8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8026eca:	687b      	ldr	r3, [r7, #4]
 8026ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026ece:	2208      	movs	r2, #8
 8026ed0:	409a      	lsls	r2, r3
 8026ed2:	68fb      	ldr	r3, [r7, #12]
 8026ed4:	4013      	ands	r3, r2
 8026ed6:	2b00      	cmp	r3, #0
 8026ed8:	d01a      	beq.n	8026f10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8026eda:	687b      	ldr	r3, [r7, #4]
 8026edc:	681b      	ldr	r3, [r3, #0]
 8026ede:	681b      	ldr	r3, [r3, #0]
 8026ee0:	f003 0304 	and.w	r3, r3, #4
 8026ee4:	2b00      	cmp	r3, #0
 8026ee6:	d013      	beq.n	8026f10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8026ee8:	687b      	ldr	r3, [r7, #4]
 8026eea:	681b      	ldr	r3, [r3, #0]
 8026eec:	681a      	ldr	r2, [r3, #0]
 8026eee:	687b      	ldr	r3, [r7, #4]
 8026ef0:	681b      	ldr	r3, [r3, #0]
 8026ef2:	f022 0204 	bic.w	r2, r2, #4
 8026ef6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8026ef8:	687b      	ldr	r3, [r7, #4]
 8026efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026efc:	2208      	movs	r2, #8
 8026efe:	409a      	lsls	r2, r3
 8026f00:	693b      	ldr	r3, [r7, #16]
 8026f02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8026f04:	687b      	ldr	r3, [r7, #4]
 8026f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026f08:	f043 0201 	orr.w	r2, r3, #1
 8026f0c:	687b      	ldr	r3, [r7, #4]
 8026f0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8026f10:	687b      	ldr	r3, [r7, #4]
 8026f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026f14:	2201      	movs	r2, #1
 8026f16:	409a      	lsls	r2, r3
 8026f18:	68fb      	ldr	r3, [r7, #12]
 8026f1a:	4013      	ands	r3, r2
 8026f1c:	2b00      	cmp	r3, #0
 8026f1e:	d012      	beq.n	8026f46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8026f20:	687b      	ldr	r3, [r7, #4]
 8026f22:	681b      	ldr	r3, [r3, #0]
 8026f24:	695b      	ldr	r3, [r3, #20]
 8026f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026f2a:	2b00      	cmp	r3, #0
 8026f2c:	d00b      	beq.n	8026f46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8026f2e:	687b      	ldr	r3, [r7, #4]
 8026f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026f32:	2201      	movs	r2, #1
 8026f34:	409a      	lsls	r2, r3
 8026f36:	693b      	ldr	r3, [r7, #16]
 8026f38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8026f3a:	687b      	ldr	r3, [r7, #4]
 8026f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026f3e:	f043 0202 	orr.w	r2, r3, #2
 8026f42:	687b      	ldr	r3, [r7, #4]
 8026f44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8026f46:	687b      	ldr	r3, [r7, #4]
 8026f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026f4a:	2204      	movs	r2, #4
 8026f4c:	409a      	lsls	r2, r3
 8026f4e:	68fb      	ldr	r3, [r7, #12]
 8026f50:	4013      	ands	r3, r2
 8026f52:	2b00      	cmp	r3, #0
 8026f54:	d012      	beq.n	8026f7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8026f56:	687b      	ldr	r3, [r7, #4]
 8026f58:	681b      	ldr	r3, [r3, #0]
 8026f5a:	681b      	ldr	r3, [r3, #0]
 8026f5c:	f003 0302 	and.w	r3, r3, #2
 8026f60:	2b00      	cmp	r3, #0
 8026f62:	d00b      	beq.n	8026f7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8026f64:	687b      	ldr	r3, [r7, #4]
 8026f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026f68:	2204      	movs	r2, #4
 8026f6a:	409a      	lsls	r2, r3
 8026f6c:	693b      	ldr	r3, [r7, #16]
 8026f6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8026f70:	687b      	ldr	r3, [r7, #4]
 8026f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026f74:	f043 0204 	orr.w	r2, r3, #4
 8026f78:	687b      	ldr	r3, [r7, #4]
 8026f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8026f7c:	687b      	ldr	r3, [r7, #4]
 8026f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026f80:	2210      	movs	r2, #16
 8026f82:	409a      	lsls	r2, r3
 8026f84:	68fb      	ldr	r3, [r7, #12]
 8026f86:	4013      	ands	r3, r2
 8026f88:	2b00      	cmp	r3, #0
 8026f8a:	d043      	beq.n	8027014 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8026f8c:	687b      	ldr	r3, [r7, #4]
 8026f8e:	681b      	ldr	r3, [r3, #0]
 8026f90:	681b      	ldr	r3, [r3, #0]
 8026f92:	f003 0308 	and.w	r3, r3, #8
 8026f96:	2b00      	cmp	r3, #0
 8026f98:	d03c      	beq.n	8027014 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8026f9a:	687b      	ldr	r3, [r7, #4]
 8026f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026f9e:	2210      	movs	r2, #16
 8026fa0:	409a      	lsls	r2, r3
 8026fa2:	693b      	ldr	r3, [r7, #16]
 8026fa4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8026fa6:	687b      	ldr	r3, [r7, #4]
 8026fa8:	681b      	ldr	r3, [r3, #0]
 8026faa:	681b      	ldr	r3, [r3, #0]
 8026fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8026fb0:	2b00      	cmp	r3, #0
 8026fb2:	d018      	beq.n	8026fe6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8026fb4:	687b      	ldr	r3, [r7, #4]
 8026fb6:	681b      	ldr	r3, [r3, #0]
 8026fb8:	681b      	ldr	r3, [r3, #0]
 8026fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8026fbe:	2b00      	cmp	r3, #0
 8026fc0:	d108      	bne.n	8026fd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8026fc2:	687b      	ldr	r3, [r7, #4]
 8026fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026fc6:	2b00      	cmp	r3, #0
 8026fc8:	d024      	beq.n	8027014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8026fca:	687b      	ldr	r3, [r7, #4]
 8026fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026fce:	6878      	ldr	r0, [r7, #4]
 8026fd0:	4798      	blx	r3
 8026fd2:	e01f      	b.n	8027014 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8026fd4:	687b      	ldr	r3, [r7, #4]
 8026fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026fd8:	2b00      	cmp	r3, #0
 8026fda:	d01b      	beq.n	8027014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8026fdc:	687b      	ldr	r3, [r7, #4]
 8026fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026fe0:	6878      	ldr	r0, [r7, #4]
 8026fe2:	4798      	blx	r3
 8026fe4:	e016      	b.n	8027014 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8026fe6:	687b      	ldr	r3, [r7, #4]
 8026fe8:	681b      	ldr	r3, [r3, #0]
 8026fea:	681b      	ldr	r3, [r3, #0]
 8026fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026ff0:	2b00      	cmp	r3, #0
 8026ff2:	d107      	bne.n	8027004 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8026ff4:	687b      	ldr	r3, [r7, #4]
 8026ff6:	681b      	ldr	r3, [r3, #0]
 8026ff8:	681a      	ldr	r2, [r3, #0]
 8026ffa:	687b      	ldr	r3, [r7, #4]
 8026ffc:	681b      	ldr	r3, [r3, #0]
 8026ffe:	f022 0208 	bic.w	r2, r2, #8
 8027002:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8027004:	687b      	ldr	r3, [r7, #4]
 8027006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027008:	2b00      	cmp	r3, #0
 802700a:	d003      	beq.n	8027014 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802700c:	687b      	ldr	r3, [r7, #4]
 802700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027010:	6878      	ldr	r0, [r7, #4]
 8027012:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8027014:	687b      	ldr	r3, [r7, #4]
 8027016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027018:	2220      	movs	r2, #32
 802701a:	409a      	lsls	r2, r3
 802701c:	68fb      	ldr	r3, [r7, #12]
 802701e:	4013      	ands	r3, r2
 8027020:	2b00      	cmp	r3, #0
 8027022:	f000 808e 	beq.w	8027142 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8027026:	687b      	ldr	r3, [r7, #4]
 8027028:	681b      	ldr	r3, [r3, #0]
 802702a:	681b      	ldr	r3, [r3, #0]
 802702c:	f003 0310 	and.w	r3, r3, #16
 8027030:	2b00      	cmp	r3, #0
 8027032:	f000 8086 	beq.w	8027142 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8027036:	687b      	ldr	r3, [r7, #4]
 8027038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802703a:	2220      	movs	r2, #32
 802703c:	409a      	lsls	r2, r3
 802703e:	693b      	ldr	r3, [r7, #16]
 8027040:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8027042:	687b      	ldr	r3, [r7, #4]
 8027044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8027048:	b2db      	uxtb	r3, r3
 802704a:	2b05      	cmp	r3, #5
 802704c:	d136      	bne.n	80270bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802704e:	687b      	ldr	r3, [r7, #4]
 8027050:	681b      	ldr	r3, [r3, #0]
 8027052:	681a      	ldr	r2, [r3, #0]
 8027054:	687b      	ldr	r3, [r7, #4]
 8027056:	681b      	ldr	r3, [r3, #0]
 8027058:	f022 0216 	bic.w	r2, r2, #22
 802705c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 802705e:	687b      	ldr	r3, [r7, #4]
 8027060:	681b      	ldr	r3, [r3, #0]
 8027062:	695a      	ldr	r2, [r3, #20]
 8027064:	687b      	ldr	r3, [r7, #4]
 8027066:	681b      	ldr	r3, [r3, #0]
 8027068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802706c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802706e:	687b      	ldr	r3, [r7, #4]
 8027070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027072:	2b00      	cmp	r3, #0
 8027074:	d103      	bne.n	802707e <HAL_DMA_IRQHandler+0x1da>
 8027076:	687b      	ldr	r3, [r7, #4]
 8027078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802707a:	2b00      	cmp	r3, #0
 802707c:	d007      	beq.n	802708e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802707e:	687b      	ldr	r3, [r7, #4]
 8027080:	681b      	ldr	r3, [r3, #0]
 8027082:	681a      	ldr	r2, [r3, #0]
 8027084:	687b      	ldr	r3, [r7, #4]
 8027086:	681b      	ldr	r3, [r3, #0]
 8027088:	f022 0208 	bic.w	r2, r2, #8
 802708c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 802708e:	687b      	ldr	r3, [r7, #4]
 8027090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027092:	223f      	movs	r2, #63	; 0x3f
 8027094:	409a      	lsls	r2, r3
 8027096:	693b      	ldr	r3, [r7, #16]
 8027098:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802709a:	687b      	ldr	r3, [r7, #4]
 802709c:	2200      	movs	r2, #0
 802709e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80270a2:	687b      	ldr	r3, [r7, #4]
 80270a4:	2201      	movs	r2, #1
 80270a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80270aa:	687b      	ldr	r3, [r7, #4]
 80270ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80270ae:	2b00      	cmp	r3, #0
 80270b0:	d07d      	beq.n	80271ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80270b2:	687b      	ldr	r3, [r7, #4]
 80270b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80270b6:	6878      	ldr	r0, [r7, #4]
 80270b8:	4798      	blx	r3
        }
        return;
 80270ba:	e078      	b.n	80271ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80270bc:	687b      	ldr	r3, [r7, #4]
 80270be:	681b      	ldr	r3, [r3, #0]
 80270c0:	681b      	ldr	r3, [r3, #0]
 80270c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80270c6:	2b00      	cmp	r3, #0
 80270c8:	d01c      	beq.n	8027104 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80270ca:	687b      	ldr	r3, [r7, #4]
 80270cc:	681b      	ldr	r3, [r3, #0]
 80270ce:	681b      	ldr	r3, [r3, #0]
 80270d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80270d4:	2b00      	cmp	r3, #0
 80270d6:	d108      	bne.n	80270ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80270d8:	687b      	ldr	r3, [r7, #4]
 80270da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80270dc:	2b00      	cmp	r3, #0
 80270de:	d030      	beq.n	8027142 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80270e0:	687b      	ldr	r3, [r7, #4]
 80270e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80270e4:	6878      	ldr	r0, [r7, #4]
 80270e6:	4798      	blx	r3
 80270e8:	e02b      	b.n	8027142 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80270ea:	687b      	ldr	r3, [r7, #4]
 80270ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80270ee:	2b00      	cmp	r3, #0
 80270f0:	d027      	beq.n	8027142 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80270f2:	687b      	ldr	r3, [r7, #4]
 80270f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80270f6:	6878      	ldr	r0, [r7, #4]
 80270f8:	4798      	blx	r3
 80270fa:	e022      	b.n	8027142 <HAL_DMA_IRQHandler+0x29e>
 80270fc:	20000014 	.word	0x20000014
 8027100:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8027104:	687b      	ldr	r3, [r7, #4]
 8027106:	681b      	ldr	r3, [r3, #0]
 8027108:	681b      	ldr	r3, [r3, #0]
 802710a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802710e:	2b00      	cmp	r3, #0
 8027110:	d10f      	bne.n	8027132 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8027112:	687b      	ldr	r3, [r7, #4]
 8027114:	681b      	ldr	r3, [r3, #0]
 8027116:	681a      	ldr	r2, [r3, #0]
 8027118:	687b      	ldr	r3, [r7, #4]
 802711a:	681b      	ldr	r3, [r3, #0]
 802711c:	f022 0210 	bic.w	r2, r2, #16
 8027120:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8027122:	687b      	ldr	r3, [r7, #4]
 8027124:	2200      	movs	r2, #0
 8027126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802712a:	687b      	ldr	r3, [r7, #4]
 802712c:	2201      	movs	r2, #1
 802712e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8027132:	687b      	ldr	r3, [r7, #4]
 8027134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027136:	2b00      	cmp	r3, #0
 8027138:	d003      	beq.n	8027142 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802713a:	687b      	ldr	r3, [r7, #4]
 802713c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802713e:	6878      	ldr	r0, [r7, #4]
 8027140:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8027142:	687b      	ldr	r3, [r7, #4]
 8027144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027146:	2b00      	cmp	r3, #0
 8027148:	d032      	beq.n	80271b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 802714a:	687b      	ldr	r3, [r7, #4]
 802714c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802714e:	f003 0301 	and.w	r3, r3, #1
 8027152:	2b00      	cmp	r3, #0
 8027154:	d022      	beq.n	802719c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8027156:	687b      	ldr	r3, [r7, #4]
 8027158:	2205      	movs	r2, #5
 802715a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802715e:	687b      	ldr	r3, [r7, #4]
 8027160:	681b      	ldr	r3, [r3, #0]
 8027162:	681a      	ldr	r2, [r3, #0]
 8027164:	687b      	ldr	r3, [r7, #4]
 8027166:	681b      	ldr	r3, [r3, #0]
 8027168:	f022 0201 	bic.w	r2, r2, #1
 802716c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 802716e:	68bb      	ldr	r3, [r7, #8]
 8027170:	3301      	adds	r3, #1
 8027172:	60bb      	str	r3, [r7, #8]
 8027174:	697a      	ldr	r2, [r7, #20]
 8027176:	429a      	cmp	r2, r3
 8027178:	d307      	bcc.n	802718a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 802717a:	687b      	ldr	r3, [r7, #4]
 802717c:	681b      	ldr	r3, [r3, #0]
 802717e:	681b      	ldr	r3, [r3, #0]
 8027180:	f003 0301 	and.w	r3, r3, #1
 8027184:	2b00      	cmp	r3, #0
 8027186:	d1f2      	bne.n	802716e <HAL_DMA_IRQHandler+0x2ca>
 8027188:	e000      	b.n	802718c <HAL_DMA_IRQHandler+0x2e8>
          break;
 802718a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802718c:	687b      	ldr	r3, [r7, #4]
 802718e:	2200      	movs	r2, #0
 8027190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8027194:	687b      	ldr	r3, [r7, #4]
 8027196:	2201      	movs	r2, #1
 8027198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 802719c:	687b      	ldr	r3, [r7, #4]
 802719e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80271a0:	2b00      	cmp	r3, #0
 80271a2:	d005      	beq.n	80271b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80271a4:	687b      	ldr	r3, [r7, #4]
 80271a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80271a8:	6878      	ldr	r0, [r7, #4]
 80271aa:	4798      	blx	r3
 80271ac:	e000      	b.n	80271b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80271ae:	bf00      	nop
    }
  }
}
 80271b0:	3718      	adds	r7, #24
 80271b2:	46bd      	mov	sp, r7
 80271b4:	bd80      	pop	{r7, pc}
 80271b6:	bf00      	nop

080271b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80271b8:	b480      	push	{r7}
 80271ba:	b085      	sub	sp, #20
 80271bc:	af00      	add	r7, sp, #0
 80271be:	60f8      	str	r0, [r7, #12]
 80271c0:	60b9      	str	r1, [r7, #8]
 80271c2:	607a      	str	r2, [r7, #4]
 80271c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80271c6:	68fb      	ldr	r3, [r7, #12]
 80271c8:	681b      	ldr	r3, [r3, #0]
 80271ca:	681a      	ldr	r2, [r3, #0]
 80271cc:	68fb      	ldr	r3, [r7, #12]
 80271ce:	681b      	ldr	r3, [r3, #0]
 80271d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80271d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80271d6:	68fb      	ldr	r3, [r7, #12]
 80271d8:	681b      	ldr	r3, [r3, #0]
 80271da:	683a      	ldr	r2, [r7, #0]
 80271dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80271de:	68fb      	ldr	r3, [r7, #12]
 80271e0:	689b      	ldr	r3, [r3, #8]
 80271e2:	2b40      	cmp	r3, #64	; 0x40
 80271e4:	d108      	bne.n	80271f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80271e6:	68fb      	ldr	r3, [r7, #12]
 80271e8:	681b      	ldr	r3, [r3, #0]
 80271ea:	687a      	ldr	r2, [r7, #4]
 80271ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80271ee:	68fb      	ldr	r3, [r7, #12]
 80271f0:	681b      	ldr	r3, [r3, #0]
 80271f2:	68ba      	ldr	r2, [r7, #8]
 80271f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80271f6:	e007      	b.n	8027208 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80271f8:	68fb      	ldr	r3, [r7, #12]
 80271fa:	681b      	ldr	r3, [r3, #0]
 80271fc:	68ba      	ldr	r2, [r7, #8]
 80271fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8027200:	68fb      	ldr	r3, [r7, #12]
 8027202:	681b      	ldr	r3, [r3, #0]
 8027204:	687a      	ldr	r2, [r7, #4]
 8027206:	60da      	str	r2, [r3, #12]
}
 8027208:	bf00      	nop
 802720a:	3714      	adds	r7, #20
 802720c:	46bd      	mov	sp, r7
 802720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027212:	4770      	bx	lr

08027214 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8027214:	b480      	push	{r7}
 8027216:	b085      	sub	sp, #20
 8027218:	af00      	add	r7, sp, #0
 802721a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 802721c:	687b      	ldr	r3, [r7, #4]
 802721e:	681b      	ldr	r3, [r3, #0]
 8027220:	b2db      	uxtb	r3, r3
 8027222:	3b10      	subs	r3, #16
 8027224:	4a14      	ldr	r2, [pc, #80]	; (8027278 <DMA_CalcBaseAndBitshift+0x64>)
 8027226:	fba2 2303 	umull	r2, r3, r2, r3
 802722a:	091b      	lsrs	r3, r3, #4
 802722c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802722e:	4a13      	ldr	r2, [pc, #76]	; (802727c <DMA_CalcBaseAndBitshift+0x68>)
 8027230:	68fb      	ldr	r3, [r7, #12]
 8027232:	4413      	add	r3, r2
 8027234:	781b      	ldrb	r3, [r3, #0]
 8027236:	461a      	mov	r2, r3
 8027238:	687b      	ldr	r3, [r7, #4]
 802723a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 802723c:	68fb      	ldr	r3, [r7, #12]
 802723e:	2b03      	cmp	r3, #3
 8027240:	d909      	bls.n	8027256 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8027242:	687b      	ldr	r3, [r7, #4]
 8027244:	681b      	ldr	r3, [r3, #0]
 8027246:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802724a:	f023 0303 	bic.w	r3, r3, #3
 802724e:	1d1a      	adds	r2, r3, #4
 8027250:	687b      	ldr	r3, [r7, #4]
 8027252:	659a      	str	r2, [r3, #88]	; 0x58
 8027254:	e007      	b.n	8027266 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8027256:	687b      	ldr	r3, [r7, #4]
 8027258:	681b      	ldr	r3, [r3, #0]
 802725a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802725e:	f023 0303 	bic.w	r3, r3, #3
 8027262:	687a      	ldr	r2, [r7, #4]
 8027264:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8027266:	687b      	ldr	r3, [r7, #4]
 8027268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 802726a:	4618      	mov	r0, r3
 802726c:	3714      	adds	r7, #20
 802726e:	46bd      	mov	sp, r7
 8027270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027274:	4770      	bx	lr
 8027276:	bf00      	nop
 8027278:	aaaaaaab 	.word	0xaaaaaaab
 802727c:	0802a324 	.word	0x0802a324

08027280 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8027280:	b480      	push	{r7}
 8027282:	b085      	sub	sp, #20
 8027284:	af00      	add	r7, sp, #0
 8027286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8027288:	2300      	movs	r3, #0
 802728a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 802728c:	687b      	ldr	r3, [r7, #4]
 802728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027290:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8027292:	687b      	ldr	r3, [r7, #4]
 8027294:	699b      	ldr	r3, [r3, #24]
 8027296:	2b00      	cmp	r3, #0
 8027298:	d11f      	bne.n	80272da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 802729a:	68bb      	ldr	r3, [r7, #8]
 802729c:	2b03      	cmp	r3, #3
 802729e:	d855      	bhi.n	802734c <DMA_CheckFifoParam+0xcc>
 80272a0:	a201      	add	r2, pc, #4	; (adr r2, 80272a8 <DMA_CheckFifoParam+0x28>)
 80272a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80272a6:	bf00      	nop
 80272a8:	080272b9 	.word	0x080272b9
 80272ac:	080272cb 	.word	0x080272cb
 80272b0:	080272b9 	.word	0x080272b9
 80272b4:	0802734d 	.word	0x0802734d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80272b8:	687b      	ldr	r3, [r7, #4]
 80272ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80272bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80272c0:	2b00      	cmp	r3, #0
 80272c2:	d045      	beq.n	8027350 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80272c4:	2301      	movs	r3, #1
 80272c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80272c8:	e042      	b.n	8027350 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80272ca:	687b      	ldr	r3, [r7, #4]
 80272cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80272ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80272d2:	d13f      	bne.n	8027354 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80272d4:	2301      	movs	r3, #1
 80272d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80272d8:	e03c      	b.n	8027354 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80272da:	687b      	ldr	r3, [r7, #4]
 80272dc:	699b      	ldr	r3, [r3, #24]
 80272de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80272e2:	d121      	bne.n	8027328 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80272e4:	68bb      	ldr	r3, [r7, #8]
 80272e6:	2b03      	cmp	r3, #3
 80272e8:	d836      	bhi.n	8027358 <DMA_CheckFifoParam+0xd8>
 80272ea:	a201      	add	r2, pc, #4	; (adr r2, 80272f0 <DMA_CheckFifoParam+0x70>)
 80272ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80272f0:	08027301 	.word	0x08027301
 80272f4:	08027307 	.word	0x08027307
 80272f8:	08027301 	.word	0x08027301
 80272fc:	08027319 	.word	0x08027319
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8027300:	2301      	movs	r3, #1
 8027302:	73fb      	strb	r3, [r7, #15]
      break;
 8027304:	e02f      	b.n	8027366 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8027306:	687b      	ldr	r3, [r7, #4]
 8027308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802730a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802730e:	2b00      	cmp	r3, #0
 8027310:	d024      	beq.n	802735c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8027312:	2301      	movs	r3, #1
 8027314:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027316:	e021      	b.n	802735c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8027318:	687b      	ldr	r3, [r7, #4]
 802731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802731c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8027320:	d11e      	bne.n	8027360 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8027322:	2301      	movs	r3, #1
 8027324:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8027326:	e01b      	b.n	8027360 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8027328:	68bb      	ldr	r3, [r7, #8]
 802732a:	2b02      	cmp	r3, #2
 802732c:	d902      	bls.n	8027334 <DMA_CheckFifoParam+0xb4>
 802732e:	2b03      	cmp	r3, #3
 8027330:	d003      	beq.n	802733a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8027332:	e018      	b.n	8027366 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8027334:	2301      	movs	r3, #1
 8027336:	73fb      	strb	r3, [r7, #15]
      break;
 8027338:	e015      	b.n	8027366 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802733a:	687b      	ldr	r3, [r7, #4]
 802733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802733e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027342:	2b00      	cmp	r3, #0
 8027344:	d00e      	beq.n	8027364 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8027346:	2301      	movs	r3, #1
 8027348:	73fb      	strb	r3, [r7, #15]
      break;
 802734a:	e00b      	b.n	8027364 <DMA_CheckFifoParam+0xe4>
      break;
 802734c:	bf00      	nop
 802734e:	e00a      	b.n	8027366 <DMA_CheckFifoParam+0xe6>
      break;
 8027350:	bf00      	nop
 8027352:	e008      	b.n	8027366 <DMA_CheckFifoParam+0xe6>
      break;
 8027354:	bf00      	nop
 8027356:	e006      	b.n	8027366 <DMA_CheckFifoParam+0xe6>
      break;
 8027358:	bf00      	nop
 802735a:	e004      	b.n	8027366 <DMA_CheckFifoParam+0xe6>
      break;
 802735c:	bf00      	nop
 802735e:	e002      	b.n	8027366 <DMA_CheckFifoParam+0xe6>
      break;   
 8027360:	bf00      	nop
 8027362:	e000      	b.n	8027366 <DMA_CheckFifoParam+0xe6>
      break;
 8027364:	bf00      	nop
    }
  } 
  
  return status; 
 8027366:	7bfb      	ldrb	r3, [r7, #15]
}
 8027368:	4618      	mov	r0, r3
 802736a:	3714      	adds	r7, #20
 802736c:	46bd      	mov	sp, r7
 802736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027372:	4770      	bx	lr

08027374 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8027374:	b580      	push	{r7, lr}
 8027376:	b086      	sub	sp, #24
 8027378:	af00      	add	r7, sp, #0
 802737a:	60f8      	str	r0, [r7, #12]
 802737c:	60b9      	str	r1, [r7, #8]
 802737e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8027382:	2301      	movs	r3, #1
 8027384:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8027386:	4b23      	ldr	r3, [pc, #140]	; (8027414 <HAL_FLASH_Program+0xa0>)
 8027388:	7e1b      	ldrb	r3, [r3, #24]
 802738a:	2b01      	cmp	r3, #1
 802738c:	d101      	bne.n	8027392 <HAL_FLASH_Program+0x1e>
 802738e:	2302      	movs	r3, #2
 8027390:	e03b      	b.n	802740a <HAL_FLASH_Program+0x96>
 8027392:	4b20      	ldr	r3, [pc, #128]	; (8027414 <HAL_FLASH_Program+0xa0>)
 8027394:	2201      	movs	r2, #1
 8027396:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027398:	f24c 3050 	movw	r0, #50000	; 0xc350
 802739c:	f000 f870 	bl	8027480 <FLASH_WaitForLastOperation>
 80273a0:	4603      	mov	r3, r0
 80273a2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80273a4:	7dfb      	ldrb	r3, [r7, #23]
 80273a6:	2b00      	cmp	r3, #0
 80273a8:	d12b      	bne.n	8027402 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80273aa:	68fb      	ldr	r3, [r7, #12]
 80273ac:	2b00      	cmp	r3, #0
 80273ae:	d105      	bne.n	80273bc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80273b0:	783b      	ldrb	r3, [r7, #0]
 80273b2:	4619      	mov	r1, r3
 80273b4:	68b8      	ldr	r0, [r7, #8]
 80273b6:	f000 f919 	bl	80275ec <FLASH_Program_Byte>
 80273ba:	e016      	b.n	80273ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80273bc:	68fb      	ldr	r3, [r7, #12]
 80273be:	2b01      	cmp	r3, #1
 80273c0:	d105      	bne.n	80273ce <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80273c2:	883b      	ldrh	r3, [r7, #0]
 80273c4:	4619      	mov	r1, r3
 80273c6:	68b8      	ldr	r0, [r7, #8]
 80273c8:	f000 f8ec 	bl	80275a4 <FLASH_Program_HalfWord>
 80273cc:	e00d      	b.n	80273ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80273ce:	68fb      	ldr	r3, [r7, #12]
 80273d0:	2b02      	cmp	r3, #2
 80273d2:	d105      	bne.n	80273e0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80273d4:	683b      	ldr	r3, [r7, #0]
 80273d6:	4619      	mov	r1, r3
 80273d8:	68b8      	ldr	r0, [r7, #8]
 80273da:	f000 f8c1 	bl	8027560 <FLASH_Program_Word>
 80273de:	e004      	b.n	80273ea <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80273e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80273e4:	68b8      	ldr	r0, [r7, #8]
 80273e6:	f000 f88b 	bl	8027500 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80273ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80273ee:	f000 f847 	bl	8027480 <FLASH_WaitForLastOperation>
 80273f2:	4603      	mov	r3, r0
 80273f4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80273f6:	4b08      	ldr	r3, [pc, #32]	; (8027418 <HAL_FLASH_Program+0xa4>)
 80273f8:	691b      	ldr	r3, [r3, #16]
 80273fa:	4a07      	ldr	r2, [pc, #28]	; (8027418 <HAL_FLASH_Program+0xa4>)
 80273fc:	f023 0301 	bic.w	r3, r3, #1
 8027400:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8027402:	4b04      	ldr	r3, [pc, #16]	; (8027414 <HAL_FLASH_Program+0xa0>)
 8027404:	2200      	movs	r2, #0
 8027406:	761a      	strb	r2, [r3, #24]
  
  return status;
 8027408:	7dfb      	ldrb	r3, [r7, #23]
}
 802740a:	4618      	mov	r0, r3
 802740c:	3718      	adds	r7, #24
 802740e:	46bd      	mov	sp, r7
 8027410:	bd80      	pop	{r7, pc}
 8027412:	bf00      	nop
 8027414:	200009c4 	.word	0x200009c4
 8027418:	40023c00 	.word	0x40023c00

0802741c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 802741c:	b480      	push	{r7}
 802741e:	b083      	sub	sp, #12
 8027420:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8027422:	2300      	movs	r3, #0
 8027424:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8027426:	4b0b      	ldr	r3, [pc, #44]	; (8027454 <HAL_FLASH_Unlock+0x38>)
 8027428:	691b      	ldr	r3, [r3, #16]
 802742a:	2b00      	cmp	r3, #0
 802742c:	da0b      	bge.n	8027446 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 802742e:	4b09      	ldr	r3, [pc, #36]	; (8027454 <HAL_FLASH_Unlock+0x38>)
 8027430:	4a09      	ldr	r2, [pc, #36]	; (8027458 <HAL_FLASH_Unlock+0x3c>)
 8027432:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8027434:	4b07      	ldr	r3, [pc, #28]	; (8027454 <HAL_FLASH_Unlock+0x38>)
 8027436:	4a09      	ldr	r2, [pc, #36]	; (802745c <HAL_FLASH_Unlock+0x40>)
 8027438:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802743a:	4b06      	ldr	r3, [pc, #24]	; (8027454 <HAL_FLASH_Unlock+0x38>)
 802743c:	691b      	ldr	r3, [r3, #16]
 802743e:	2b00      	cmp	r3, #0
 8027440:	da01      	bge.n	8027446 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8027442:	2301      	movs	r3, #1
 8027444:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8027446:	79fb      	ldrb	r3, [r7, #7]
}
 8027448:	4618      	mov	r0, r3
 802744a:	370c      	adds	r7, #12
 802744c:	46bd      	mov	sp, r7
 802744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027452:	4770      	bx	lr
 8027454:	40023c00 	.word	0x40023c00
 8027458:	45670123 	.word	0x45670123
 802745c:	cdef89ab 	.word	0xcdef89ab

08027460 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8027460:	b480      	push	{r7}
 8027462:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8027464:	4b05      	ldr	r3, [pc, #20]	; (802747c <HAL_FLASH_Lock+0x1c>)
 8027466:	691b      	ldr	r3, [r3, #16]
 8027468:	4a04      	ldr	r2, [pc, #16]	; (802747c <HAL_FLASH_Lock+0x1c>)
 802746a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802746e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8027470:	2300      	movs	r3, #0
}
 8027472:	4618      	mov	r0, r3
 8027474:	46bd      	mov	sp, r7
 8027476:	f85d 7b04 	ldr.w	r7, [sp], #4
 802747a:	4770      	bx	lr
 802747c:	40023c00 	.word	0x40023c00

08027480 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8027480:	b580      	push	{r7, lr}
 8027482:	b084      	sub	sp, #16
 8027484:	af00      	add	r7, sp, #0
 8027486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027488:	2300      	movs	r3, #0
 802748a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 802748c:	4b1a      	ldr	r3, [pc, #104]	; (80274f8 <FLASH_WaitForLastOperation+0x78>)
 802748e:	2200      	movs	r2, #0
 8027490:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8027492:	f7fe fecd 	bl	8026230 <HAL_GetTick>
 8027496:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027498:	e010      	b.n	80274bc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 802749a:	687b      	ldr	r3, [r7, #4]
 802749c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80274a0:	d00c      	beq.n	80274bc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80274a2:	687b      	ldr	r3, [r7, #4]
 80274a4:	2b00      	cmp	r3, #0
 80274a6:	d007      	beq.n	80274b8 <FLASH_WaitForLastOperation+0x38>
 80274a8:	f7fe fec2 	bl	8026230 <HAL_GetTick>
 80274ac:	4602      	mov	r2, r0
 80274ae:	68fb      	ldr	r3, [r7, #12]
 80274b0:	1ad3      	subs	r3, r2, r3
 80274b2:	687a      	ldr	r2, [r7, #4]
 80274b4:	429a      	cmp	r2, r3
 80274b6:	d201      	bcs.n	80274bc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80274b8:	2303      	movs	r3, #3
 80274ba:	e019      	b.n	80274f0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80274bc:	4b0f      	ldr	r3, [pc, #60]	; (80274fc <FLASH_WaitForLastOperation+0x7c>)
 80274be:	68db      	ldr	r3, [r3, #12]
 80274c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80274c4:	2b00      	cmp	r3, #0
 80274c6:	d1e8      	bne.n	802749a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80274c8:	4b0c      	ldr	r3, [pc, #48]	; (80274fc <FLASH_WaitForLastOperation+0x7c>)
 80274ca:	68db      	ldr	r3, [r3, #12]
 80274cc:	f003 0301 	and.w	r3, r3, #1
 80274d0:	2b00      	cmp	r3, #0
 80274d2:	d002      	beq.n	80274da <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80274d4:	4b09      	ldr	r3, [pc, #36]	; (80274fc <FLASH_WaitForLastOperation+0x7c>)
 80274d6:	2201      	movs	r2, #1
 80274d8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80274da:	4b08      	ldr	r3, [pc, #32]	; (80274fc <FLASH_WaitForLastOperation+0x7c>)
 80274dc:	68db      	ldr	r3, [r3, #12]
 80274de:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80274e2:	2b00      	cmp	r3, #0
 80274e4:	d003      	beq.n	80274ee <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80274e6:	f000 f8a3 	bl	8027630 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80274ea:	2301      	movs	r3, #1
 80274ec:	e000      	b.n	80274f0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80274ee:	2300      	movs	r3, #0
  
}  
 80274f0:	4618      	mov	r0, r3
 80274f2:	3710      	adds	r7, #16
 80274f4:	46bd      	mov	sp, r7
 80274f6:	bd80      	pop	{r7, pc}
 80274f8:	200009c4 	.word	0x200009c4
 80274fc:	40023c00 	.word	0x40023c00

08027500 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8027500:	b490      	push	{r4, r7}
 8027502:	b084      	sub	sp, #16
 8027504:	af00      	add	r7, sp, #0
 8027506:	60f8      	str	r0, [r7, #12]
 8027508:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802750c:	4b13      	ldr	r3, [pc, #76]	; (802755c <FLASH_Program_DoubleWord+0x5c>)
 802750e:	691b      	ldr	r3, [r3, #16]
 8027510:	4a12      	ldr	r2, [pc, #72]	; (802755c <FLASH_Program_DoubleWord+0x5c>)
 8027512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027516:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8027518:	4b10      	ldr	r3, [pc, #64]	; (802755c <FLASH_Program_DoubleWord+0x5c>)
 802751a:	691b      	ldr	r3, [r3, #16]
 802751c:	4a0f      	ldr	r2, [pc, #60]	; (802755c <FLASH_Program_DoubleWord+0x5c>)
 802751e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8027522:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027524:	4b0d      	ldr	r3, [pc, #52]	; (802755c <FLASH_Program_DoubleWord+0x5c>)
 8027526:	691b      	ldr	r3, [r3, #16]
 8027528:	4a0c      	ldr	r2, [pc, #48]	; (802755c <FLASH_Program_DoubleWord+0x5c>)
 802752a:	f043 0301 	orr.w	r3, r3, #1
 802752e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8027530:	68fb      	ldr	r3, [r7, #12]
 8027532:	683a      	ldr	r2, [r7, #0]
 8027534:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8027536:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 802753a:	e9d7 1200 	ldrd	r1, r2, [r7]
 802753e:	f04f 0300 	mov.w	r3, #0
 8027542:	f04f 0400 	mov.w	r4, #0
 8027546:	0013      	movs	r3, r2
 8027548:	2400      	movs	r4, #0
 802754a:	68fa      	ldr	r2, [r7, #12]
 802754c:	3204      	adds	r2, #4
 802754e:	6013      	str	r3, [r2, #0]
}
 8027550:	bf00      	nop
 8027552:	3710      	adds	r7, #16
 8027554:	46bd      	mov	sp, r7
 8027556:	bc90      	pop	{r4, r7}
 8027558:	4770      	bx	lr
 802755a:	bf00      	nop
 802755c:	40023c00 	.word	0x40023c00

08027560 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8027560:	b480      	push	{r7}
 8027562:	b083      	sub	sp, #12
 8027564:	af00      	add	r7, sp, #0
 8027566:	6078      	str	r0, [r7, #4]
 8027568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802756a:	4b0d      	ldr	r3, [pc, #52]	; (80275a0 <FLASH_Program_Word+0x40>)
 802756c:	691b      	ldr	r3, [r3, #16]
 802756e:	4a0c      	ldr	r2, [pc, #48]	; (80275a0 <FLASH_Program_Word+0x40>)
 8027570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027574:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8027576:	4b0a      	ldr	r3, [pc, #40]	; (80275a0 <FLASH_Program_Word+0x40>)
 8027578:	691b      	ldr	r3, [r3, #16]
 802757a:	4a09      	ldr	r2, [pc, #36]	; (80275a0 <FLASH_Program_Word+0x40>)
 802757c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027580:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027582:	4b07      	ldr	r3, [pc, #28]	; (80275a0 <FLASH_Program_Word+0x40>)
 8027584:	691b      	ldr	r3, [r3, #16]
 8027586:	4a06      	ldr	r2, [pc, #24]	; (80275a0 <FLASH_Program_Word+0x40>)
 8027588:	f043 0301 	orr.w	r3, r3, #1
 802758c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 802758e:	687b      	ldr	r3, [r7, #4]
 8027590:	683a      	ldr	r2, [r7, #0]
 8027592:	601a      	str	r2, [r3, #0]
}
 8027594:	bf00      	nop
 8027596:	370c      	adds	r7, #12
 8027598:	46bd      	mov	sp, r7
 802759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802759e:	4770      	bx	lr
 80275a0:	40023c00 	.word	0x40023c00

080275a4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80275a4:	b480      	push	{r7}
 80275a6:	b083      	sub	sp, #12
 80275a8:	af00      	add	r7, sp, #0
 80275aa:	6078      	str	r0, [r7, #4]
 80275ac:	460b      	mov	r3, r1
 80275ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80275b0:	4b0d      	ldr	r3, [pc, #52]	; (80275e8 <FLASH_Program_HalfWord+0x44>)
 80275b2:	691b      	ldr	r3, [r3, #16]
 80275b4:	4a0c      	ldr	r2, [pc, #48]	; (80275e8 <FLASH_Program_HalfWord+0x44>)
 80275b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80275ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80275bc:	4b0a      	ldr	r3, [pc, #40]	; (80275e8 <FLASH_Program_HalfWord+0x44>)
 80275be:	691b      	ldr	r3, [r3, #16]
 80275c0:	4a09      	ldr	r2, [pc, #36]	; (80275e8 <FLASH_Program_HalfWord+0x44>)
 80275c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80275c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80275c8:	4b07      	ldr	r3, [pc, #28]	; (80275e8 <FLASH_Program_HalfWord+0x44>)
 80275ca:	691b      	ldr	r3, [r3, #16]
 80275cc:	4a06      	ldr	r2, [pc, #24]	; (80275e8 <FLASH_Program_HalfWord+0x44>)
 80275ce:	f043 0301 	orr.w	r3, r3, #1
 80275d2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80275d4:	687b      	ldr	r3, [r7, #4]
 80275d6:	887a      	ldrh	r2, [r7, #2]
 80275d8:	801a      	strh	r2, [r3, #0]
}
 80275da:	bf00      	nop
 80275dc:	370c      	adds	r7, #12
 80275de:	46bd      	mov	sp, r7
 80275e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275e4:	4770      	bx	lr
 80275e6:	bf00      	nop
 80275e8:	40023c00 	.word	0x40023c00

080275ec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80275ec:	b480      	push	{r7}
 80275ee:	b083      	sub	sp, #12
 80275f0:	af00      	add	r7, sp, #0
 80275f2:	6078      	str	r0, [r7, #4]
 80275f4:	460b      	mov	r3, r1
 80275f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80275f8:	4b0c      	ldr	r3, [pc, #48]	; (802762c <FLASH_Program_Byte+0x40>)
 80275fa:	691b      	ldr	r3, [r3, #16]
 80275fc:	4a0b      	ldr	r2, [pc, #44]	; (802762c <FLASH_Program_Byte+0x40>)
 80275fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027602:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8027604:	4b09      	ldr	r3, [pc, #36]	; (802762c <FLASH_Program_Byte+0x40>)
 8027606:	4a09      	ldr	r2, [pc, #36]	; (802762c <FLASH_Program_Byte+0x40>)
 8027608:	691b      	ldr	r3, [r3, #16]
 802760a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802760c:	4b07      	ldr	r3, [pc, #28]	; (802762c <FLASH_Program_Byte+0x40>)
 802760e:	691b      	ldr	r3, [r3, #16]
 8027610:	4a06      	ldr	r2, [pc, #24]	; (802762c <FLASH_Program_Byte+0x40>)
 8027612:	f043 0301 	orr.w	r3, r3, #1
 8027616:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8027618:	687b      	ldr	r3, [r7, #4]
 802761a:	78fa      	ldrb	r2, [r7, #3]
 802761c:	701a      	strb	r2, [r3, #0]
}
 802761e:	bf00      	nop
 8027620:	370c      	adds	r7, #12
 8027622:	46bd      	mov	sp, r7
 8027624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027628:	4770      	bx	lr
 802762a:	bf00      	nop
 802762c:	40023c00 	.word	0x40023c00

08027630 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8027630:	b480      	push	{r7}
 8027632:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8027634:	4b27      	ldr	r3, [pc, #156]	; (80276d4 <FLASH_SetErrorCode+0xa4>)
 8027636:	68db      	ldr	r3, [r3, #12]
 8027638:	f003 0310 	and.w	r3, r3, #16
 802763c:	2b00      	cmp	r3, #0
 802763e:	d008      	beq.n	8027652 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8027640:	4b25      	ldr	r3, [pc, #148]	; (80276d8 <FLASH_SetErrorCode+0xa8>)
 8027642:	69db      	ldr	r3, [r3, #28]
 8027644:	f043 0310 	orr.w	r3, r3, #16
 8027648:	4a23      	ldr	r2, [pc, #140]	; (80276d8 <FLASH_SetErrorCode+0xa8>)
 802764a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 802764c:	4b21      	ldr	r3, [pc, #132]	; (80276d4 <FLASH_SetErrorCode+0xa4>)
 802764e:	2210      	movs	r2, #16
 8027650:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8027652:	4b20      	ldr	r3, [pc, #128]	; (80276d4 <FLASH_SetErrorCode+0xa4>)
 8027654:	68db      	ldr	r3, [r3, #12]
 8027656:	f003 0320 	and.w	r3, r3, #32
 802765a:	2b00      	cmp	r3, #0
 802765c:	d008      	beq.n	8027670 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 802765e:	4b1e      	ldr	r3, [pc, #120]	; (80276d8 <FLASH_SetErrorCode+0xa8>)
 8027660:	69db      	ldr	r3, [r3, #28]
 8027662:	f043 0308 	orr.w	r3, r3, #8
 8027666:	4a1c      	ldr	r2, [pc, #112]	; (80276d8 <FLASH_SetErrorCode+0xa8>)
 8027668:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 802766a:	4b1a      	ldr	r3, [pc, #104]	; (80276d4 <FLASH_SetErrorCode+0xa4>)
 802766c:	2220      	movs	r2, #32
 802766e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8027670:	4b18      	ldr	r3, [pc, #96]	; (80276d4 <FLASH_SetErrorCode+0xa4>)
 8027672:	68db      	ldr	r3, [r3, #12]
 8027674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027678:	2b00      	cmp	r3, #0
 802767a:	d008      	beq.n	802768e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 802767c:	4b16      	ldr	r3, [pc, #88]	; (80276d8 <FLASH_SetErrorCode+0xa8>)
 802767e:	69db      	ldr	r3, [r3, #28]
 8027680:	f043 0304 	orr.w	r3, r3, #4
 8027684:	4a14      	ldr	r2, [pc, #80]	; (80276d8 <FLASH_SetErrorCode+0xa8>)
 8027686:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8027688:	4b12      	ldr	r3, [pc, #72]	; (80276d4 <FLASH_SetErrorCode+0xa4>)
 802768a:	2240      	movs	r2, #64	; 0x40
 802768c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 802768e:	4b11      	ldr	r3, [pc, #68]	; (80276d4 <FLASH_SetErrorCode+0xa4>)
 8027690:	68db      	ldr	r3, [r3, #12]
 8027692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027696:	2b00      	cmp	r3, #0
 8027698:	d008      	beq.n	80276ac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 802769a:	4b0f      	ldr	r3, [pc, #60]	; (80276d8 <FLASH_SetErrorCode+0xa8>)
 802769c:	69db      	ldr	r3, [r3, #28]
 802769e:	f043 0302 	orr.w	r3, r3, #2
 80276a2:	4a0d      	ldr	r2, [pc, #52]	; (80276d8 <FLASH_SetErrorCode+0xa8>)
 80276a4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80276a6:	4b0b      	ldr	r3, [pc, #44]	; (80276d4 <FLASH_SetErrorCode+0xa4>)
 80276a8:	2280      	movs	r2, #128	; 0x80
 80276aa:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80276ac:	4b09      	ldr	r3, [pc, #36]	; (80276d4 <FLASH_SetErrorCode+0xa4>)
 80276ae:	68db      	ldr	r3, [r3, #12]
 80276b0:	f003 0302 	and.w	r3, r3, #2
 80276b4:	2b00      	cmp	r3, #0
 80276b6:	d008      	beq.n	80276ca <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80276b8:	4b07      	ldr	r3, [pc, #28]	; (80276d8 <FLASH_SetErrorCode+0xa8>)
 80276ba:	69db      	ldr	r3, [r3, #28]
 80276bc:	f043 0320 	orr.w	r3, r3, #32
 80276c0:	4a05      	ldr	r2, [pc, #20]	; (80276d8 <FLASH_SetErrorCode+0xa8>)
 80276c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80276c4:	4b03      	ldr	r3, [pc, #12]	; (80276d4 <FLASH_SetErrorCode+0xa4>)
 80276c6:	2202      	movs	r2, #2
 80276c8:	60da      	str	r2, [r3, #12]
  }
}
 80276ca:	bf00      	nop
 80276cc:	46bd      	mov	sp, r7
 80276ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276d2:	4770      	bx	lr
 80276d4:	40023c00 	.word	0x40023c00
 80276d8:	200009c4 	.word	0x200009c4

080276dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80276dc:	b580      	push	{r7, lr}
 80276de:	b084      	sub	sp, #16
 80276e0:	af00      	add	r7, sp, #0
 80276e2:	6078      	str	r0, [r7, #4]
 80276e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80276e6:	2301      	movs	r3, #1
 80276e8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80276ea:	2300      	movs	r3, #0
 80276ec:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80276ee:	4b31      	ldr	r3, [pc, #196]	; (80277b4 <HAL_FLASHEx_Erase+0xd8>)
 80276f0:	7e1b      	ldrb	r3, [r3, #24]
 80276f2:	2b01      	cmp	r3, #1
 80276f4:	d101      	bne.n	80276fa <HAL_FLASHEx_Erase+0x1e>
 80276f6:	2302      	movs	r3, #2
 80276f8:	e058      	b.n	80277ac <HAL_FLASHEx_Erase+0xd0>
 80276fa:	4b2e      	ldr	r3, [pc, #184]	; (80277b4 <HAL_FLASHEx_Erase+0xd8>)
 80276fc:	2201      	movs	r2, #1
 80276fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027700:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027704:	f7ff febc 	bl	8027480 <FLASH_WaitForLastOperation>
 8027708:	4603      	mov	r3, r0
 802770a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 802770c:	7bfb      	ldrb	r3, [r7, #15]
 802770e:	2b00      	cmp	r3, #0
 8027710:	d148      	bne.n	80277a4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8027712:	683b      	ldr	r3, [r7, #0]
 8027714:	f04f 32ff 	mov.w	r2, #4294967295
 8027718:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 802771a:	687b      	ldr	r3, [r7, #4]
 802771c:	681b      	ldr	r3, [r3, #0]
 802771e:	2b01      	cmp	r3, #1
 8027720:	d115      	bne.n	802774e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8027722:	687b      	ldr	r3, [r7, #4]
 8027724:	691b      	ldr	r3, [r3, #16]
 8027726:	b2da      	uxtb	r2, r3
 8027728:	687b      	ldr	r3, [r7, #4]
 802772a:	685b      	ldr	r3, [r3, #4]
 802772c:	4619      	mov	r1, r3
 802772e:	4610      	mov	r0, r2
 8027730:	f000 f844 	bl	80277bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027734:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027738:	f7ff fea2 	bl	8027480 <FLASH_WaitForLastOperation>
 802773c:	4603      	mov	r3, r0
 802773e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8027740:	4b1d      	ldr	r3, [pc, #116]	; (80277b8 <HAL_FLASHEx_Erase+0xdc>)
 8027742:	691b      	ldr	r3, [r3, #16]
 8027744:	4a1c      	ldr	r2, [pc, #112]	; (80277b8 <HAL_FLASHEx_Erase+0xdc>)
 8027746:	f023 0304 	bic.w	r3, r3, #4
 802774a:	6113      	str	r3, [r2, #16]
 802774c:	e028      	b.n	80277a0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802774e:	687b      	ldr	r3, [r7, #4]
 8027750:	689b      	ldr	r3, [r3, #8]
 8027752:	60bb      	str	r3, [r7, #8]
 8027754:	e01c      	b.n	8027790 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8027756:	687b      	ldr	r3, [r7, #4]
 8027758:	691b      	ldr	r3, [r3, #16]
 802775a:	b2db      	uxtb	r3, r3
 802775c:	4619      	mov	r1, r3
 802775e:	68b8      	ldr	r0, [r7, #8]
 8027760:	f000 f850 	bl	8027804 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027764:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027768:	f7ff fe8a 	bl	8027480 <FLASH_WaitForLastOperation>
 802776c:	4603      	mov	r3, r0
 802776e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8027770:	4b11      	ldr	r3, [pc, #68]	; (80277b8 <HAL_FLASHEx_Erase+0xdc>)
 8027772:	691b      	ldr	r3, [r3, #16]
 8027774:	4a10      	ldr	r2, [pc, #64]	; (80277b8 <HAL_FLASHEx_Erase+0xdc>)
 8027776:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 802777a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 802777c:	7bfb      	ldrb	r3, [r7, #15]
 802777e:	2b00      	cmp	r3, #0
 8027780:	d003      	beq.n	802778a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8027782:	683b      	ldr	r3, [r7, #0]
 8027784:	68ba      	ldr	r2, [r7, #8]
 8027786:	601a      	str	r2, [r3, #0]
          break;
 8027788:	e00a      	b.n	80277a0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802778a:	68bb      	ldr	r3, [r7, #8]
 802778c:	3301      	adds	r3, #1
 802778e:	60bb      	str	r3, [r7, #8]
 8027790:	687b      	ldr	r3, [r7, #4]
 8027792:	68da      	ldr	r2, [r3, #12]
 8027794:	687b      	ldr	r3, [r7, #4]
 8027796:	689b      	ldr	r3, [r3, #8]
 8027798:	4413      	add	r3, r2
 802779a:	68ba      	ldr	r2, [r7, #8]
 802779c:	429a      	cmp	r2, r3
 802779e:	d3da      	bcc.n	8027756 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80277a0:	f000 f878 	bl	8027894 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80277a4:	4b03      	ldr	r3, [pc, #12]	; (80277b4 <HAL_FLASHEx_Erase+0xd8>)
 80277a6:	2200      	movs	r2, #0
 80277a8:	761a      	strb	r2, [r3, #24]

  return status;
 80277aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80277ac:	4618      	mov	r0, r3
 80277ae:	3710      	adds	r7, #16
 80277b0:	46bd      	mov	sp, r7
 80277b2:	bd80      	pop	{r7, pc}
 80277b4:	200009c4 	.word	0x200009c4
 80277b8:	40023c00 	.word	0x40023c00

080277bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80277bc:	b480      	push	{r7}
 80277be:	b083      	sub	sp, #12
 80277c0:	af00      	add	r7, sp, #0
 80277c2:	4603      	mov	r3, r0
 80277c4:	6039      	str	r1, [r7, #0]
 80277c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80277c8:	4b0d      	ldr	r3, [pc, #52]	; (8027800 <FLASH_MassErase+0x44>)
 80277ca:	691b      	ldr	r3, [r3, #16]
 80277cc:	4a0c      	ldr	r2, [pc, #48]	; (8027800 <FLASH_MassErase+0x44>)
 80277ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80277d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80277d4:	4b0a      	ldr	r3, [pc, #40]	; (8027800 <FLASH_MassErase+0x44>)
 80277d6:	691b      	ldr	r3, [r3, #16]
 80277d8:	4a09      	ldr	r2, [pc, #36]	; (8027800 <FLASH_MassErase+0x44>)
 80277da:	f043 0304 	orr.w	r3, r3, #4
 80277de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80277e0:	4b07      	ldr	r3, [pc, #28]	; (8027800 <FLASH_MassErase+0x44>)
 80277e2:	691a      	ldr	r2, [r3, #16]
 80277e4:	79fb      	ldrb	r3, [r7, #7]
 80277e6:	021b      	lsls	r3, r3, #8
 80277e8:	4313      	orrs	r3, r2
 80277ea:	4a05      	ldr	r2, [pc, #20]	; (8027800 <FLASH_MassErase+0x44>)
 80277ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80277f0:	6113      	str	r3, [r2, #16]
}
 80277f2:	bf00      	nop
 80277f4:	370c      	adds	r7, #12
 80277f6:	46bd      	mov	sp, r7
 80277f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277fc:	4770      	bx	lr
 80277fe:	bf00      	nop
 8027800:	40023c00 	.word	0x40023c00

08027804 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8027804:	b480      	push	{r7}
 8027806:	b085      	sub	sp, #20
 8027808:	af00      	add	r7, sp, #0
 802780a:	6078      	str	r0, [r7, #4]
 802780c:	460b      	mov	r3, r1
 802780e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8027810:	2300      	movs	r3, #0
 8027812:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8027814:	78fb      	ldrb	r3, [r7, #3]
 8027816:	2b00      	cmp	r3, #0
 8027818:	d102      	bne.n	8027820 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 802781a:	2300      	movs	r3, #0
 802781c:	60fb      	str	r3, [r7, #12]
 802781e:	e010      	b.n	8027842 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8027820:	78fb      	ldrb	r3, [r7, #3]
 8027822:	2b01      	cmp	r3, #1
 8027824:	d103      	bne.n	802782e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8027826:	f44f 7380 	mov.w	r3, #256	; 0x100
 802782a:	60fb      	str	r3, [r7, #12]
 802782c:	e009      	b.n	8027842 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 802782e:	78fb      	ldrb	r3, [r7, #3]
 8027830:	2b02      	cmp	r3, #2
 8027832:	d103      	bne.n	802783c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8027834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8027838:	60fb      	str	r3, [r7, #12]
 802783a:	e002      	b.n	8027842 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 802783c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8027840:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027842:	4b13      	ldr	r3, [pc, #76]	; (8027890 <FLASH_Erase_Sector+0x8c>)
 8027844:	691b      	ldr	r3, [r3, #16]
 8027846:	4a12      	ldr	r2, [pc, #72]	; (8027890 <FLASH_Erase_Sector+0x8c>)
 8027848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802784c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 802784e:	4b10      	ldr	r3, [pc, #64]	; (8027890 <FLASH_Erase_Sector+0x8c>)
 8027850:	691a      	ldr	r2, [r3, #16]
 8027852:	490f      	ldr	r1, [pc, #60]	; (8027890 <FLASH_Erase_Sector+0x8c>)
 8027854:	68fb      	ldr	r3, [r7, #12]
 8027856:	4313      	orrs	r3, r2
 8027858:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 802785a:	4b0d      	ldr	r3, [pc, #52]	; (8027890 <FLASH_Erase_Sector+0x8c>)
 802785c:	691b      	ldr	r3, [r3, #16]
 802785e:	4a0c      	ldr	r2, [pc, #48]	; (8027890 <FLASH_Erase_Sector+0x8c>)
 8027860:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8027864:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8027866:	4b0a      	ldr	r3, [pc, #40]	; (8027890 <FLASH_Erase_Sector+0x8c>)
 8027868:	691a      	ldr	r2, [r3, #16]
 802786a:	687b      	ldr	r3, [r7, #4]
 802786c:	00db      	lsls	r3, r3, #3
 802786e:	4313      	orrs	r3, r2
 8027870:	4a07      	ldr	r2, [pc, #28]	; (8027890 <FLASH_Erase_Sector+0x8c>)
 8027872:	f043 0302 	orr.w	r3, r3, #2
 8027876:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8027878:	4b05      	ldr	r3, [pc, #20]	; (8027890 <FLASH_Erase_Sector+0x8c>)
 802787a:	691b      	ldr	r3, [r3, #16]
 802787c:	4a04      	ldr	r2, [pc, #16]	; (8027890 <FLASH_Erase_Sector+0x8c>)
 802787e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027882:	6113      	str	r3, [r2, #16]
}
 8027884:	bf00      	nop
 8027886:	3714      	adds	r7, #20
 8027888:	46bd      	mov	sp, r7
 802788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802788e:	4770      	bx	lr
 8027890:	40023c00 	.word	0x40023c00

08027894 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8027894:	b480      	push	{r7}
 8027896:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8027898:	4b20      	ldr	r3, [pc, #128]	; (802791c <FLASH_FlushCaches+0x88>)
 802789a:	681b      	ldr	r3, [r3, #0]
 802789c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80278a0:	2b00      	cmp	r3, #0
 80278a2:	d017      	beq.n	80278d4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80278a4:	4b1d      	ldr	r3, [pc, #116]	; (802791c <FLASH_FlushCaches+0x88>)
 80278a6:	681b      	ldr	r3, [r3, #0]
 80278a8:	4a1c      	ldr	r2, [pc, #112]	; (802791c <FLASH_FlushCaches+0x88>)
 80278aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80278ae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80278b0:	4b1a      	ldr	r3, [pc, #104]	; (802791c <FLASH_FlushCaches+0x88>)
 80278b2:	681b      	ldr	r3, [r3, #0]
 80278b4:	4a19      	ldr	r2, [pc, #100]	; (802791c <FLASH_FlushCaches+0x88>)
 80278b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80278ba:	6013      	str	r3, [r2, #0]
 80278bc:	4b17      	ldr	r3, [pc, #92]	; (802791c <FLASH_FlushCaches+0x88>)
 80278be:	681b      	ldr	r3, [r3, #0]
 80278c0:	4a16      	ldr	r2, [pc, #88]	; (802791c <FLASH_FlushCaches+0x88>)
 80278c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80278c6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80278c8:	4b14      	ldr	r3, [pc, #80]	; (802791c <FLASH_FlushCaches+0x88>)
 80278ca:	681b      	ldr	r3, [r3, #0]
 80278cc:	4a13      	ldr	r2, [pc, #76]	; (802791c <FLASH_FlushCaches+0x88>)
 80278ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80278d2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80278d4:	4b11      	ldr	r3, [pc, #68]	; (802791c <FLASH_FlushCaches+0x88>)
 80278d6:	681b      	ldr	r3, [r3, #0]
 80278d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80278dc:	2b00      	cmp	r3, #0
 80278de:	d017      	beq.n	8027910 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80278e0:	4b0e      	ldr	r3, [pc, #56]	; (802791c <FLASH_FlushCaches+0x88>)
 80278e2:	681b      	ldr	r3, [r3, #0]
 80278e4:	4a0d      	ldr	r2, [pc, #52]	; (802791c <FLASH_FlushCaches+0x88>)
 80278e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80278ea:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80278ec:	4b0b      	ldr	r3, [pc, #44]	; (802791c <FLASH_FlushCaches+0x88>)
 80278ee:	681b      	ldr	r3, [r3, #0]
 80278f0:	4a0a      	ldr	r2, [pc, #40]	; (802791c <FLASH_FlushCaches+0x88>)
 80278f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80278f6:	6013      	str	r3, [r2, #0]
 80278f8:	4b08      	ldr	r3, [pc, #32]	; (802791c <FLASH_FlushCaches+0x88>)
 80278fa:	681b      	ldr	r3, [r3, #0]
 80278fc:	4a07      	ldr	r2, [pc, #28]	; (802791c <FLASH_FlushCaches+0x88>)
 80278fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027902:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8027904:	4b05      	ldr	r3, [pc, #20]	; (802791c <FLASH_FlushCaches+0x88>)
 8027906:	681b      	ldr	r3, [r3, #0]
 8027908:	4a04      	ldr	r2, [pc, #16]	; (802791c <FLASH_FlushCaches+0x88>)
 802790a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802790e:	6013      	str	r3, [r2, #0]
  }
}
 8027910:	bf00      	nop
 8027912:	46bd      	mov	sp, r7
 8027914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027918:	4770      	bx	lr
 802791a:	bf00      	nop
 802791c:	40023c00 	.word	0x40023c00

08027920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8027920:	b480      	push	{r7}
 8027922:	b089      	sub	sp, #36	; 0x24
 8027924:	af00      	add	r7, sp, #0
 8027926:	6078      	str	r0, [r7, #4]
 8027928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802792a:	2300      	movs	r3, #0
 802792c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802792e:	2300      	movs	r3, #0
 8027930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8027932:	2300      	movs	r3, #0
 8027934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8027936:	2300      	movs	r3, #0
 8027938:	61fb      	str	r3, [r7, #28]
 802793a:	e16b      	b.n	8027c14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 802793c:	2201      	movs	r2, #1
 802793e:	69fb      	ldr	r3, [r7, #28]
 8027940:	fa02 f303 	lsl.w	r3, r2, r3
 8027944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8027946:	683b      	ldr	r3, [r7, #0]
 8027948:	681b      	ldr	r3, [r3, #0]
 802794a:	697a      	ldr	r2, [r7, #20]
 802794c:	4013      	ands	r3, r2
 802794e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8027950:	693a      	ldr	r2, [r7, #16]
 8027952:	697b      	ldr	r3, [r7, #20]
 8027954:	429a      	cmp	r2, r3
 8027956:	f040 815a 	bne.w	8027c0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802795a:	683b      	ldr	r3, [r7, #0]
 802795c:	685b      	ldr	r3, [r3, #4]
 802795e:	2b01      	cmp	r3, #1
 8027960:	d00b      	beq.n	802797a <HAL_GPIO_Init+0x5a>
 8027962:	683b      	ldr	r3, [r7, #0]
 8027964:	685b      	ldr	r3, [r3, #4]
 8027966:	2b02      	cmp	r3, #2
 8027968:	d007      	beq.n	802797a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802796a:	683b      	ldr	r3, [r7, #0]
 802796c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802796e:	2b11      	cmp	r3, #17
 8027970:	d003      	beq.n	802797a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027972:	683b      	ldr	r3, [r7, #0]
 8027974:	685b      	ldr	r3, [r3, #4]
 8027976:	2b12      	cmp	r3, #18
 8027978:	d130      	bne.n	80279dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802797a:	687b      	ldr	r3, [r7, #4]
 802797c:	689b      	ldr	r3, [r3, #8]
 802797e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8027980:	69fb      	ldr	r3, [r7, #28]
 8027982:	005b      	lsls	r3, r3, #1
 8027984:	2203      	movs	r2, #3
 8027986:	fa02 f303 	lsl.w	r3, r2, r3
 802798a:	43db      	mvns	r3, r3
 802798c:	69ba      	ldr	r2, [r7, #24]
 802798e:	4013      	ands	r3, r2
 8027990:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8027992:	683b      	ldr	r3, [r7, #0]
 8027994:	68da      	ldr	r2, [r3, #12]
 8027996:	69fb      	ldr	r3, [r7, #28]
 8027998:	005b      	lsls	r3, r3, #1
 802799a:	fa02 f303 	lsl.w	r3, r2, r3
 802799e:	69ba      	ldr	r2, [r7, #24]
 80279a0:	4313      	orrs	r3, r2
 80279a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80279a4:	687b      	ldr	r3, [r7, #4]
 80279a6:	69ba      	ldr	r2, [r7, #24]
 80279a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80279aa:	687b      	ldr	r3, [r7, #4]
 80279ac:	685b      	ldr	r3, [r3, #4]
 80279ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80279b0:	2201      	movs	r2, #1
 80279b2:	69fb      	ldr	r3, [r7, #28]
 80279b4:	fa02 f303 	lsl.w	r3, r2, r3
 80279b8:	43db      	mvns	r3, r3
 80279ba:	69ba      	ldr	r2, [r7, #24]
 80279bc:	4013      	ands	r3, r2
 80279be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80279c0:	683b      	ldr	r3, [r7, #0]
 80279c2:	685b      	ldr	r3, [r3, #4]
 80279c4:	091b      	lsrs	r3, r3, #4
 80279c6:	f003 0201 	and.w	r2, r3, #1
 80279ca:	69fb      	ldr	r3, [r7, #28]
 80279cc:	fa02 f303 	lsl.w	r3, r2, r3
 80279d0:	69ba      	ldr	r2, [r7, #24]
 80279d2:	4313      	orrs	r3, r2
 80279d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80279d6:	687b      	ldr	r3, [r7, #4]
 80279d8:	69ba      	ldr	r2, [r7, #24]
 80279da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80279dc:	687b      	ldr	r3, [r7, #4]
 80279de:	68db      	ldr	r3, [r3, #12]
 80279e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80279e2:	69fb      	ldr	r3, [r7, #28]
 80279e4:	005b      	lsls	r3, r3, #1
 80279e6:	2203      	movs	r2, #3
 80279e8:	fa02 f303 	lsl.w	r3, r2, r3
 80279ec:	43db      	mvns	r3, r3
 80279ee:	69ba      	ldr	r2, [r7, #24]
 80279f0:	4013      	ands	r3, r2
 80279f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80279f4:	683b      	ldr	r3, [r7, #0]
 80279f6:	689a      	ldr	r2, [r3, #8]
 80279f8:	69fb      	ldr	r3, [r7, #28]
 80279fa:	005b      	lsls	r3, r3, #1
 80279fc:	fa02 f303 	lsl.w	r3, r2, r3
 8027a00:	69ba      	ldr	r2, [r7, #24]
 8027a02:	4313      	orrs	r3, r2
 8027a04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8027a06:	687b      	ldr	r3, [r7, #4]
 8027a08:	69ba      	ldr	r2, [r7, #24]
 8027a0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027a0c:	683b      	ldr	r3, [r7, #0]
 8027a0e:	685b      	ldr	r3, [r3, #4]
 8027a10:	2b02      	cmp	r3, #2
 8027a12:	d003      	beq.n	8027a1c <HAL_GPIO_Init+0xfc>
 8027a14:	683b      	ldr	r3, [r7, #0]
 8027a16:	685b      	ldr	r3, [r3, #4]
 8027a18:	2b12      	cmp	r3, #18
 8027a1a:	d123      	bne.n	8027a64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8027a1c:	69fb      	ldr	r3, [r7, #28]
 8027a1e:	08da      	lsrs	r2, r3, #3
 8027a20:	687b      	ldr	r3, [r7, #4]
 8027a22:	3208      	adds	r2, #8
 8027a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8027a2a:	69fb      	ldr	r3, [r7, #28]
 8027a2c:	f003 0307 	and.w	r3, r3, #7
 8027a30:	009b      	lsls	r3, r3, #2
 8027a32:	220f      	movs	r2, #15
 8027a34:	fa02 f303 	lsl.w	r3, r2, r3
 8027a38:	43db      	mvns	r3, r3
 8027a3a:	69ba      	ldr	r2, [r7, #24]
 8027a3c:	4013      	ands	r3, r2
 8027a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8027a40:	683b      	ldr	r3, [r7, #0]
 8027a42:	691a      	ldr	r2, [r3, #16]
 8027a44:	69fb      	ldr	r3, [r7, #28]
 8027a46:	f003 0307 	and.w	r3, r3, #7
 8027a4a:	009b      	lsls	r3, r3, #2
 8027a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8027a50:	69ba      	ldr	r2, [r7, #24]
 8027a52:	4313      	orrs	r3, r2
 8027a54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8027a56:	69fb      	ldr	r3, [r7, #28]
 8027a58:	08da      	lsrs	r2, r3, #3
 8027a5a:	687b      	ldr	r3, [r7, #4]
 8027a5c:	3208      	adds	r2, #8
 8027a5e:	69b9      	ldr	r1, [r7, #24]
 8027a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8027a64:	687b      	ldr	r3, [r7, #4]
 8027a66:	681b      	ldr	r3, [r3, #0]
 8027a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8027a6a:	69fb      	ldr	r3, [r7, #28]
 8027a6c:	005b      	lsls	r3, r3, #1
 8027a6e:	2203      	movs	r2, #3
 8027a70:	fa02 f303 	lsl.w	r3, r2, r3
 8027a74:	43db      	mvns	r3, r3
 8027a76:	69ba      	ldr	r2, [r7, #24]
 8027a78:	4013      	ands	r3, r2
 8027a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8027a7c:	683b      	ldr	r3, [r7, #0]
 8027a7e:	685b      	ldr	r3, [r3, #4]
 8027a80:	f003 0203 	and.w	r2, r3, #3
 8027a84:	69fb      	ldr	r3, [r7, #28]
 8027a86:	005b      	lsls	r3, r3, #1
 8027a88:	fa02 f303 	lsl.w	r3, r2, r3
 8027a8c:	69ba      	ldr	r2, [r7, #24]
 8027a8e:	4313      	orrs	r3, r2
 8027a90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8027a92:	687b      	ldr	r3, [r7, #4]
 8027a94:	69ba      	ldr	r2, [r7, #24]
 8027a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8027a98:	683b      	ldr	r3, [r7, #0]
 8027a9a:	685b      	ldr	r3, [r3, #4]
 8027a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027aa0:	2b00      	cmp	r3, #0
 8027aa2:	f000 80b4 	beq.w	8027c0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8027aa6:	2300      	movs	r3, #0
 8027aa8:	60fb      	str	r3, [r7, #12]
 8027aaa:	4b5f      	ldr	r3, [pc, #380]	; (8027c28 <HAL_GPIO_Init+0x308>)
 8027aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027aae:	4a5e      	ldr	r2, [pc, #376]	; (8027c28 <HAL_GPIO_Init+0x308>)
 8027ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8027ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8027ab6:	4b5c      	ldr	r3, [pc, #368]	; (8027c28 <HAL_GPIO_Init+0x308>)
 8027ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8027abe:	60fb      	str	r3, [r7, #12]
 8027ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8027ac2:	4a5a      	ldr	r2, [pc, #360]	; (8027c2c <HAL_GPIO_Init+0x30c>)
 8027ac4:	69fb      	ldr	r3, [r7, #28]
 8027ac6:	089b      	lsrs	r3, r3, #2
 8027ac8:	3302      	adds	r3, #2
 8027aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8027ad0:	69fb      	ldr	r3, [r7, #28]
 8027ad2:	f003 0303 	and.w	r3, r3, #3
 8027ad6:	009b      	lsls	r3, r3, #2
 8027ad8:	220f      	movs	r2, #15
 8027ada:	fa02 f303 	lsl.w	r3, r2, r3
 8027ade:	43db      	mvns	r3, r3
 8027ae0:	69ba      	ldr	r2, [r7, #24]
 8027ae2:	4013      	ands	r3, r2
 8027ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8027ae6:	687b      	ldr	r3, [r7, #4]
 8027ae8:	4a51      	ldr	r2, [pc, #324]	; (8027c30 <HAL_GPIO_Init+0x310>)
 8027aea:	4293      	cmp	r3, r2
 8027aec:	d02b      	beq.n	8027b46 <HAL_GPIO_Init+0x226>
 8027aee:	687b      	ldr	r3, [r7, #4]
 8027af0:	4a50      	ldr	r2, [pc, #320]	; (8027c34 <HAL_GPIO_Init+0x314>)
 8027af2:	4293      	cmp	r3, r2
 8027af4:	d025      	beq.n	8027b42 <HAL_GPIO_Init+0x222>
 8027af6:	687b      	ldr	r3, [r7, #4]
 8027af8:	4a4f      	ldr	r2, [pc, #316]	; (8027c38 <HAL_GPIO_Init+0x318>)
 8027afa:	4293      	cmp	r3, r2
 8027afc:	d01f      	beq.n	8027b3e <HAL_GPIO_Init+0x21e>
 8027afe:	687b      	ldr	r3, [r7, #4]
 8027b00:	4a4e      	ldr	r2, [pc, #312]	; (8027c3c <HAL_GPIO_Init+0x31c>)
 8027b02:	4293      	cmp	r3, r2
 8027b04:	d019      	beq.n	8027b3a <HAL_GPIO_Init+0x21a>
 8027b06:	687b      	ldr	r3, [r7, #4]
 8027b08:	4a4d      	ldr	r2, [pc, #308]	; (8027c40 <HAL_GPIO_Init+0x320>)
 8027b0a:	4293      	cmp	r3, r2
 8027b0c:	d013      	beq.n	8027b36 <HAL_GPIO_Init+0x216>
 8027b0e:	687b      	ldr	r3, [r7, #4]
 8027b10:	4a4c      	ldr	r2, [pc, #304]	; (8027c44 <HAL_GPIO_Init+0x324>)
 8027b12:	4293      	cmp	r3, r2
 8027b14:	d00d      	beq.n	8027b32 <HAL_GPIO_Init+0x212>
 8027b16:	687b      	ldr	r3, [r7, #4]
 8027b18:	4a4b      	ldr	r2, [pc, #300]	; (8027c48 <HAL_GPIO_Init+0x328>)
 8027b1a:	4293      	cmp	r3, r2
 8027b1c:	d007      	beq.n	8027b2e <HAL_GPIO_Init+0x20e>
 8027b1e:	687b      	ldr	r3, [r7, #4]
 8027b20:	4a4a      	ldr	r2, [pc, #296]	; (8027c4c <HAL_GPIO_Init+0x32c>)
 8027b22:	4293      	cmp	r3, r2
 8027b24:	d101      	bne.n	8027b2a <HAL_GPIO_Init+0x20a>
 8027b26:	2307      	movs	r3, #7
 8027b28:	e00e      	b.n	8027b48 <HAL_GPIO_Init+0x228>
 8027b2a:	2308      	movs	r3, #8
 8027b2c:	e00c      	b.n	8027b48 <HAL_GPIO_Init+0x228>
 8027b2e:	2306      	movs	r3, #6
 8027b30:	e00a      	b.n	8027b48 <HAL_GPIO_Init+0x228>
 8027b32:	2305      	movs	r3, #5
 8027b34:	e008      	b.n	8027b48 <HAL_GPIO_Init+0x228>
 8027b36:	2304      	movs	r3, #4
 8027b38:	e006      	b.n	8027b48 <HAL_GPIO_Init+0x228>
 8027b3a:	2303      	movs	r3, #3
 8027b3c:	e004      	b.n	8027b48 <HAL_GPIO_Init+0x228>
 8027b3e:	2302      	movs	r3, #2
 8027b40:	e002      	b.n	8027b48 <HAL_GPIO_Init+0x228>
 8027b42:	2301      	movs	r3, #1
 8027b44:	e000      	b.n	8027b48 <HAL_GPIO_Init+0x228>
 8027b46:	2300      	movs	r3, #0
 8027b48:	69fa      	ldr	r2, [r7, #28]
 8027b4a:	f002 0203 	and.w	r2, r2, #3
 8027b4e:	0092      	lsls	r2, r2, #2
 8027b50:	4093      	lsls	r3, r2
 8027b52:	69ba      	ldr	r2, [r7, #24]
 8027b54:	4313      	orrs	r3, r2
 8027b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8027b58:	4934      	ldr	r1, [pc, #208]	; (8027c2c <HAL_GPIO_Init+0x30c>)
 8027b5a:	69fb      	ldr	r3, [r7, #28]
 8027b5c:	089b      	lsrs	r3, r3, #2
 8027b5e:	3302      	adds	r3, #2
 8027b60:	69ba      	ldr	r2, [r7, #24]
 8027b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8027b66:	4b3a      	ldr	r3, [pc, #232]	; (8027c50 <HAL_GPIO_Init+0x330>)
 8027b68:	681b      	ldr	r3, [r3, #0]
 8027b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027b6c:	693b      	ldr	r3, [r7, #16]
 8027b6e:	43db      	mvns	r3, r3
 8027b70:	69ba      	ldr	r2, [r7, #24]
 8027b72:	4013      	ands	r3, r2
 8027b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8027b76:	683b      	ldr	r3, [r7, #0]
 8027b78:	685b      	ldr	r3, [r3, #4]
 8027b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027b7e:	2b00      	cmp	r3, #0
 8027b80:	d003      	beq.n	8027b8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8027b82:	69ba      	ldr	r2, [r7, #24]
 8027b84:	693b      	ldr	r3, [r7, #16]
 8027b86:	4313      	orrs	r3, r2
 8027b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8027b8a:	4a31      	ldr	r2, [pc, #196]	; (8027c50 <HAL_GPIO_Init+0x330>)
 8027b8c:	69bb      	ldr	r3, [r7, #24]
 8027b8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8027b90:	4b2f      	ldr	r3, [pc, #188]	; (8027c50 <HAL_GPIO_Init+0x330>)
 8027b92:	685b      	ldr	r3, [r3, #4]
 8027b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027b96:	693b      	ldr	r3, [r7, #16]
 8027b98:	43db      	mvns	r3, r3
 8027b9a:	69ba      	ldr	r2, [r7, #24]
 8027b9c:	4013      	ands	r3, r2
 8027b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8027ba0:	683b      	ldr	r3, [r7, #0]
 8027ba2:	685b      	ldr	r3, [r3, #4]
 8027ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027ba8:	2b00      	cmp	r3, #0
 8027baa:	d003      	beq.n	8027bb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8027bac:	69ba      	ldr	r2, [r7, #24]
 8027bae:	693b      	ldr	r3, [r7, #16]
 8027bb0:	4313      	orrs	r3, r2
 8027bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8027bb4:	4a26      	ldr	r2, [pc, #152]	; (8027c50 <HAL_GPIO_Init+0x330>)
 8027bb6:	69bb      	ldr	r3, [r7, #24]
 8027bb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8027bba:	4b25      	ldr	r3, [pc, #148]	; (8027c50 <HAL_GPIO_Init+0x330>)
 8027bbc:	689b      	ldr	r3, [r3, #8]
 8027bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027bc0:	693b      	ldr	r3, [r7, #16]
 8027bc2:	43db      	mvns	r3, r3
 8027bc4:	69ba      	ldr	r2, [r7, #24]
 8027bc6:	4013      	ands	r3, r2
 8027bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8027bca:	683b      	ldr	r3, [r7, #0]
 8027bcc:	685b      	ldr	r3, [r3, #4]
 8027bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8027bd2:	2b00      	cmp	r3, #0
 8027bd4:	d003      	beq.n	8027bde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8027bd6:	69ba      	ldr	r2, [r7, #24]
 8027bd8:	693b      	ldr	r3, [r7, #16]
 8027bda:	4313      	orrs	r3, r2
 8027bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8027bde:	4a1c      	ldr	r2, [pc, #112]	; (8027c50 <HAL_GPIO_Init+0x330>)
 8027be0:	69bb      	ldr	r3, [r7, #24]
 8027be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8027be4:	4b1a      	ldr	r3, [pc, #104]	; (8027c50 <HAL_GPIO_Init+0x330>)
 8027be6:	68db      	ldr	r3, [r3, #12]
 8027be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027bea:	693b      	ldr	r3, [r7, #16]
 8027bec:	43db      	mvns	r3, r3
 8027bee:	69ba      	ldr	r2, [r7, #24]
 8027bf0:	4013      	ands	r3, r2
 8027bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8027bf4:	683b      	ldr	r3, [r7, #0]
 8027bf6:	685b      	ldr	r3, [r3, #4]
 8027bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8027bfc:	2b00      	cmp	r3, #0
 8027bfe:	d003      	beq.n	8027c08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8027c00:	69ba      	ldr	r2, [r7, #24]
 8027c02:	693b      	ldr	r3, [r7, #16]
 8027c04:	4313      	orrs	r3, r2
 8027c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8027c08:	4a11      	ldr	r2, [pc, #68]	; (8027c50 <HAL_GPIO_Init+0x330>)
 8027c0a:	69bb      	ldr	r3, [r7, #24]
 8027c0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8027c0e:	69fb      	ldr	r3, [r7, #28]
 8027c10:	3301      	adds	r3, #1
 8027c12:	61fb      	str	r3, [r7, #28]
 8027c14:	69fb      	ldr	r3, [r7, #28]
 8027c16:	2b0f      	cmp	r3, #15
 8027c18:	f67f ae90 	bls.w	802793c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8027c1c:	bf00      	nop
 8027c1e:	3724      	adds	r7, #36	; 0x24
 8027c20:	46bd      	mov	sp, r7
 8027c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c26:	4770      	bx	lr
 8027c28:	40023800 	.word	0x40023800
 8027c2c:	40013800 	.word	0x40013800
 8027c30:	40020000 	.word	0x40020000
 8027c34:	40020400 	.word	0x40020400
 8027c38:	40020800 	.word	0x40020800
 8027c3c:	40020c00 	.word	0x40020c00
 8027c40:	40021000 	.word	0x40021000
 8027c44:	40021400 	.word	0x40021400
 8027c48:	40021800 	.word	0x40021800
 8027c4c:	40021c00 	.word	0x40021c00
 8027c50:	40013c00 	.word	0x40013c00

08027c54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8027c54:	b480      	push	{r7}
 8027c56:	b085      	sub	sp, #20
 8027c58:	af00      	add	r7, sp, #0
 8027c5a:	6078      	str	r0, [r7, #4]
 8027c5c:	460b      	mov	r3, r1
 8027c5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8027c60:	687b      	ldr	r3, [r7, #4]
 8027c62:	691a      	ldr	r2, [r3, #16]
 8027c64:	887b      	ldrh	r3, [r7, #2]
 8027c66:	4013      	ands	r3, r2
 8027c68:	2b00      	cmp	r3, #0
 8027c6a:	d002      	beq.n	8027c72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8027c6c:	2301      	movs	r3, #1
 8027c6e:	73fb      	strb	r3, [r7, #15]
 8027c70:	e001      	b.n	8027c76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8027c72:	2300      	movs	r3, #0
 8027c74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8027c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8027c78:	4618      	mov	r0, r3
 8027c7a:	3714      	adds	r7, #20
 8027c7c:	46bd      	mov	sp, r7
 8027c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c82:	4770      	bx	lr

08027c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8027c84:	b480      	push	{r7}
 8027c86:	b083      	sub	sp, #12
 8027c88:	af00      	add	r7, sp, #0
 8027c8a:	6078      	str	r0, [r7, #4]
 8027c8c:	460b      	mov	r3, r1
 8027c8e:	807b      	strh	r3, [r7, #2]
 8027c90:	4613      	mov	r3, r2
 8027c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8027c94:	787b      	ldrb	r3, [r7, #1]
 8027c96:	2b00      	cmp	r3, #0
 8027c98:	d003      	beq.n	8027ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8027c9a:	887a      	ldrh	r2, [r7, #2]
 8027c9c:	687b      	ldr	r3, [r7, #4]
 8027c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8027ca0:	e003      	b.n	8027caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8027ca2:	887b      	ldrh	r3, [r7, #2]
 8027ca4:	041a      	lsls	r2, r3, #16
 8027ca6:	687b      	ldr	r3, [r7, #4]
 8027ca8:	619a      	str	r2, [r3, #24]
}
 8027caa:	bf00      	nop
 8027cac:	370c      	adds	r7, #12
 8027cae:	46bd      	mov	sp, r7
 8027cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cb4:	4770      	bx	lr
	...

08027cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8027cb8:	b580      	push	{r7, lr}
 8027cba:	b084      	sub	sp, #16
 8027cbc:	af00      	add	r7, sp, #0
 8027cbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8027cc0:	687b      	ldr	r3, [r7, #4]
 8027cc2:	2b00      	cmp	r3, #0
 8027cc4:	d101      	bne.n	8027cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8027cc6:	2301      	movs	r3, #1
 8027cc8:	e11f      	b.n	8027f0a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8027cca:	687b      	ldr	r3, [r7, #4]
 8027ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027cd0:	b2db      	uxtb	r3, r3
 8027cd2:	2b00      	cmp	r3, #0
 8027cd4:	d106      	bne.n	8027ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8027cd6:	687b      	ldr	r3, [r7, #4]
 8027cd8:	2200      	movs	r2, #0
 8027cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8027cde:	6878      	ldr	r0, [r7, #4]
 8027ce0:	f7fd fcc6 	bl	8025670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8027ce4:	687b      	ldr	r3, [r7, #4]
 8027ce6:	2224      	movs	r2, #36	; 0x24
 8027ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8027cec:	687b      	ldr	r3, [r7, #4]
 8027cee:	681b      	ldr	r3, [r3, #0]
 8027cf0:	681a      	ldr	r2, [r3, #0]
 8027cf2:	687b      	ldr	r3, [r7, #4]
 8027cf4:	681b      	ldr	r3, [r3, #0]
 8027cf6:	f022 0201 	bic.w	r2, r2, #1
 8027cfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8027cfc:	687b      	ldr	r3, [r7, #4]
 8027cfe:	681b      	ldr	r3, [r3, #0]
 8027d00:	681a      	ldr	r2, [r3, #0]
 8027d02:	687b      	ldr	r3, [r7, #4]
 8027d04:	681b      	ldr	r3, [r3, #0]
 8027d06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8027d0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8027d0c:	687b      	ldr	r3, [r7, #4]
 8027d0e:	681b      	ldr	r3, [r3, #0]
 8027d10:	681a      	ldr	r2, [r3, #0]
 8027d12:	687b      	ldr	r3, [r7, #4]
 8027d14:	681b      	ldr	r3, [r3, #0]
 8027d16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8027d1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8027d1c:	f000 fd18 	bl	8028750 <HAL_RCC_GetPCLK1Freq>
 8027d20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8027d22:	687b      	ldr	r3, [r7, #4]
 8027d24:	685b      	ldr	r3, [r3, #4]
 8027d26:	4a7b      	ldr	r2, [pc, #492]	; (8027f14 <HAL_I2C_Init+0x25c>)
 8027d28:	4293      	cmp	r3, r2
 8027d2a:	d807      	bhi.n	8027d3c <HAL_I2C_Init+0x84>
 8027d2c:	68fb      	ldr	r3, [r7, #12]
 8027d2e:	4a7a      	ldr	r2, [pc, #488]	; (8027f18 <HAL_I2C_Init+0x260>)
 8027d30:	4293      	cmp	r3, r2
 8027d32:	bf94      	ite	ls
 8027d34:	2301      	movls	r3, #1
 8027d36:	2300      	movhi	r3, #0
 8027d38:	b2db      	uxtb	r3, r3
 8027d3a:	e006      	b.n	8027d4a <HAL_I2C_Init+0x92>
 8027d3c:	68fb      	ldr	r3, [r7, #12]
 8027d3e:	4a77      	ldr	r2, [pc, #476]	; (8027f1c <HAL_I2C_Init+0x264>)
 8027d40:	4293      	cmp	r3, r2
 8027d42:	bf94      	ite	ls
 8027d44:	2301      	movls	r3, #1
 8027d46:	2300      	movhi	r3, #0
 8027d48:	b2db      	uxtb	r3, r3
 8027d4a:	2b00      	cmp	r3, #0
 8027d4c:	d001      	beq.n	8027d52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8027d4e:	2301      	movs	r3, #1
 8027d50:	e0db      	b.n	8027f0a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8027d52:	68fb      	ldr	r3, [r7, #12]
 8027d54:	4a72      	ldr	r2, [pc, #456]	; (8027f20 <HAL_I2C_Init+0x268>)
 8027d56:	fba2 2303 	umull	r2, r3, r2, r3
 8027d5a:	0c9b      	lsrs	r3, r3, #18
 8027d5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8027d5e:	687b      	ldr	r3, [r7, #4]
 8027d60:	681b      	ldr	r3, [r3, #0]
 8027d62:	685b      	ldr	r3, [r3, #4]
 8027d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027d68:	687b      	ldr	r3, [r7, #4]
 8027d6a:	681b      	ldr	r3, [r3, #0]
 8027d6c:	68ba      	ldr	r2, [r7, #8]
 8027d6e:	430a      	orrs	r2, r1
 8027d70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8027d72:	687b      	ldr	r3, [r7, #4]
 8027d74:	681b      	ldr	r3, [r3, #0]
 8027d76:	6a1b      	ldr	r3, [r3, #32]
 8027d78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027d7c:	687b      	ldr	r3, [r7, #4]
 8027d7e:	685b      	ldr	r3, [r3, #4]
 8027d80:	4a64      	ldr	r2, [pc, #400]	; (8027f14 <HAL_I2C_Init+0x25c>)
 8027d82:	4293      	cmp	r3, r2
 8027d84:	d802      	bhi.n	8027d8c <HAL_I2C_Init+0xd4>
 8027d86:	68bb      	ldr	r3, [r7, #8]
 8027d88:	3301      	adds	r3, #1
 8027d8a:	e009      	b.n	8027da0 <HAL_I2C_Init+0xe8>
 8027d8c:	68bb      	ldr	r3, [r7, #8]
 8027d8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8027d92:	fb02 f303 	mul.w	r3, r2, r3
 8027d96:	4a63      	ldr	r2, [pc, #396]	; (8027f24 <HAL_I2C_Init+0x26c>)
 8027d98:	fba2 2303 	umull	r2, r3, r2, r3
 8027d9c:	099b      	lsrs	r3, r3, #6
 8027d9e:	3301      	adds	r3, #1
 8027da0:	687a      	ldr	r2, [r7, #4]
 8027da2:	6812      	ldr	r2, [r2, #0]
 8027da4:	430b      	orrs	r3, r1
 8027da6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8027da8:	687b      	ldr	r3, [r7, #4]
 8027daa:	681b      	ldr	r3, [r3, #0]
 8027dac:	69db      	ldr	r3, [r3, #28]
 8027dae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8027db2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8027db6:	687b      	ldr	r3, [r7, #4]
 8027db8:	685b      	ldr	r3, [r3, #4]
 8027dba:	4956      	ldr	r1, [pc, #344]	; (8027f14 <HAL_I2C_Init+0x25c>)
 8027dbc:	428b      	cmp	r3, r1
 8027dbe:	d80d      	bhi.n	8027ddc <HAL_I2C_Init+0x124>
 8027dc0:	68fb      	ldr	r3, [r7, #12]
 8027dc2:	1e59      	subs	r1, r3, #1
 8027dc4:	687b      	ldr	r3, [r7, #4]
 8027dc6:	685b      	ldr	r3, [r3, #4]
 8027dc8:	005b      	lsls	r3, r3, #1
 8027dca:	fbb1 f3f3 	udiv	r3, r1, r3
 8027dce:	3301      	adds	r3, #1
 8027dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027dd4:	2b04      	cmp	r3, #4
 8027dd6:	bf38      	it	cc
 8027dd8:	2304      	movcc	r3, #4
 8027dda:	e04f      	b.n	8027e7c <HAL_I2C_Init+0x1c4>
 8027ddc:	687b      	ldr	r3, [r7, #4]
 8027dde:	689b      	ldr	r3, [r3, #8]
 8027de0:	2b00      	cmp	r3, #0
 8027de2:	d111      	bne.n	8027e08 <HAL_I2C_Init+0x150>
 8027de4:	68fb      	ldr	r3, [r7, #12]
 8027de6:	1e58      	subs	r0, r3, #1
 8027de8:	687b      	ldr	r3, [r7, #4]
 8027dea:	6859      	ldr	r1, [r3, #4]
 8027dec:	460b      	mov	r3, r1
 8027dee:	005b      	lsls	r3, r3, #1
 8027df0:	440b      	add	r3, r1
 8027df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8027df6:	3301      	adds	r3, #1
 8027df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027dfc:	2b00      	cmp	r3, #0
 8027dfe:	bf0c      	ite	eq
 8027e00:	2301      	moveq	r3, #1
 8027e02:	2300      	movne	r3, #0
 8027e04:	b2db      	uxtb	r3, r3
 8027e06:	e012      	b.n	8027e2e <HAL_I2C_Init+0x176>
 8027e08:	68fb      	ldr	r3, [r7, #12]
 8027e0a:	1e58      	subs	r0, r3, #1
 8027e0c:	687b      	ldr	r3, [r7, #4]
 8027e0e:	6859      	ldr	r1, [r3, #4]
 8027e10:	460b      	mov	r3, r1
 8027e12:	009b      	lsls	r3, r3, #2
 8027e14:	440b      	add	r3, r1
 8027e16:	0099      	lsls	r1, r3, #2
 8027e18:	440b      	add	r3, r1
 8027e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8027e1e:	3301      	adds	r3, #1
 8027e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027e24:	2b00      	cmp	r3, #0
 8027e26:	bf0c      	ite	eq
 8027e28:	2301      	moveq	r3, #1
 8027e2a:	2300      	movne	r3, #0
 8027e2c:	b2db      	uxtb	r3, r3
 8027e2e:	2b00      	cmp	r3, #0
 8027e30:	d001      	beq.n	8027e36 <HAL_I2C_Init+0x17e>
 8027e32:	2301      	movs	r3, #1
 8027e34:	e022      	b.n	8027e7c <HAL_I2C_Init+0x1c4>
 8027e36:	687b      	ldr	r3, [r7, #4]
 8027e38:	689b      	ldr	r3, [r3, #8]
 8027e3a:	2b00      	cmp	r3, #0
 8027e3c:	d10e      	bne.n	8027e5c <HAL_I2C_Init+0x1a4>
 8027e3e:	68fb      	ldr	r3, [r7, #12]
 8027e40:	1e58      	subs	r0, r3, #1
 8027e42:	687b      	ldr	r3, [r7, #4]
 8027e44:	6859      	ldr	r1, [r3, #4]
 8027e46:	460b      	mov	r3, r1
 8027e48:	005b      	lsls	r3, r3, #1
 8027e4a:	440b      	add	r3, r1
 8027e4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8027e50:	3301      	adds	r3, #1
 8027e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8027e5a:	e00f      	b.n	8027e7c <HAL_I2C_Init+0x1c4>
 8027e5c:	68fb      	ldr	r3, [r7, #12]
 8027e5e:	1e58      	subs	r0, r3, #1
 8027e60:	687b      	ldr	r3, [r7, #4]
 8027e62:	6859      	ldr	r1, [r3, #4]
 8027e64:	460b      	mov	r3, r1
 8027e66:	009b      	lsls	r3, r3, #2
 8027e68:	440b      	add	r3, r1
 8027e6a:	0099      	lsls	r1, r3, #2
 8027e6c:	440b      	add	r3, r1
 8027e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8027e72:	3301      	adds	r3, #1
 8027e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8027e7c:	6879      	ldr	r1, [r7, #4]
 8027e7e:	6809      	ldr	r1, [r1, #0]
 8027e80:	4313      	orrs	r3, r2
 8027e82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8027e84:	687b      	ldr	r3, [r7, #4]
 8027e86:	681b      	ldr	r3, [r3, #0]
 8027e88:	681b      	ldr	r3, [r3, #0]
 8027e8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8027e8e:	687b      	ldr	r3, [r7, #4]
 8027e90:	69da      	ldr	r2, [r3, #28]
 8027e92:	687b      	ldr	r3, [r7, #4]
 8027e94:	6a1b      	ldr	r3, [r3, #32]
 8027e96:	431a      	orrs	r2, r3
 8027e98:	687b      	ldr	r3, [r7, #4]
 8027e9a:	681b      	ldr	r3, [r3, #0]
 8027e9c:	430a      	orrs	r2, r1
 8027e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8027ea0:	687b      	ldr	r3, [r7, #4]
 8027ea2:	681b      	ldr	r3, [r3, #0]
 8027ea4:	689b      	ldr	r3, [r3, #8]
 8027ea6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8027eaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8027eae:	687a      	ldr	r2, [r7, #4]
 8027eb0:	6911      	ldr	r1, [r2, #16]
 8027eb2:	687a      	ldr	r2, [r7, #4]
 8027eb4:	68d2      	ldr	r2, [r2, #12]
 8027eb6:	4311      	orrs	r1, r2
 8027eb8:	687a      	ldr	r2, [r7, #4]
 8027eba:	6812      	ldr	r2, [r2, #0]
 8027ebc:	430b      	orrs	r3, r1
 8027ebe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8027ec0:	687b      	ldr	r3, [r7, #4]
 8027ec2:	681b      	ldr	r3, [r3, #0]
 8027ec4:	68db      	ldr	r3, [r3, #12]
 8027ec6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8027eca:	687b      	ldr	r3, [r7, #4]
 8027ecc:	695a      	ldr	r2, [r3, #20]
 8027ece:	687b      	ldr	r3, [r7, #4]
 8027ed0:	699b      	ldr	r3, [r3, #24]
 8027ed2:	431a      	orrs	r2, r3
 8027ed4:	687b      	ldr	r3, [r7, #4]
 8027ed6:	681b      	ldr	r3, [r3, #0]
 8027ed8:	430a      	orrs	r2, r1
 8027eda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8027edc:	687b      	ldr	r3, [r7, #4]
 8027ede:	681b      	ldr	r3, [r3, #0]
 8027ee0:	681a      	ldr	r2, [r3, #0]
 8027ee2:	687b      	ldr	r3, [r7, #4]
 8027ee4:	681b      	ldr	r3, [r3, #0]
 8027ee6:	f042 0201 	orr.w	r2, r2, #1
 8027eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8027eec:	687b      	ldr	r3, [r7, #4]
 8027eee:	2200      	movs	r2, #0
 8027ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8027ef2:	687b      	ldr	r3, [r7, #4]
 8027ef4:	2220      	movs	r2, #32
 8027ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8027efa:	687b      	ldr	r3, [r7, #4]
 8027efc:	2200      	movs	r2, #0
 8027efe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8027f00:	687b      	ldr	r3, [r7, #4]
 8027f02:	2200      	movs	r2, #0
 8027f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8027f08:	2300      	movs	r3, #0
}
 8027f0a:	4618      	mov	r0, r3
 8027f0c:	3710      	adds	r7, #16
 8027f0e:	46bd      	mov	sp, r7
 8027f10:	bd80      	pop	{r7, pc}
 8027f12:	bf00      	nop
 8027f14:	000186a0 	.word	0x000186a0
 8027f18:	001e847f 	.word	0x001e847f
 8027f1c:	003d08ff 	.word	0x003d08ff
 8027f20:	431bde83 	.word	0x431bde83
 8027f24:	10624dd3 	.word	0x10624dd3

08027f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8027f28:	b580      	push	{r7, lr}
 8027f2a:	b086      	sub	sp, #24
 8027f2c:	af00      	add	r7, sp, #0
 8027f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8027f30:	687b      	ldr	r3, [r7, #4]
 8027f32:	2b00      	cmp	r3, #0
 8027f34:	d101      	bne.n	8027f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8027f36:	2301      	movs	r3, #1
 8027f38:	e25b      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8027f3a:	687b      	ldr	r3, [r7, #4]
 8027f3c:	681b      	ldr	r3, [r3, #0]
 8027f3e:	f003 0301 	and.w	r3, r3, #1
 8027f42:	2b00      	cmp	r3, #0
 8027f44:	d075      	beq.n	8028032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8027f46:	4ba3      	ldr	r3, [pc, #652]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8027f48:	689b      	ldr	r3, [r3, #8]
 8027f4a:	f003 030c 	and.w	r3, r3, #12
 8027f4e:	2b04      	cmp	r3, #4
 8027f50:	d00c      	beq.n	8027f6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8027f52:	4ba0      	ldr	r3, [pc, #640]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8027f54:	689b      	ldr	r3, [r3, #8]
 8027f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8027f5a:	2b08      	cmp	r3, #8
 8027f5c:	d112      	bne.n	8027f84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8027f5e:	4b9d      	ldr	r3, [pc, #628]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8027f60:	685b      	ldr	r3, [r3, #4]
 8027f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027f66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8027f6a:	d10b      	bne.n	8027f84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027f6c:	4b99      	ldr	r3, [pc, #612]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8027f6e:	681b      	ldr	r3, [r3, #0]
 8027f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027f74:	2b00      	cmp	r3, #0
 8027f76:	d05b      	beq.n	8028030 <HAL_RCC_OscConfig+0x108>
 8027f78:	687b      	ldr	r3, [r7, #4]
 8027f7a:	685b      	ldr	r3, [r3, #4]
 8027f7c:	2b00      	cmp	r3, #0
 8027f7e:	d157      	bne.n	8028030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8027f80:	2301      	movs	r3, #1
 8027f82:	e236      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8027f84:	687b      	ldr	r3, [r7, #4]
 8027f86:	685b      	ldr	r3, [r3, #4]
 8027f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8027f8c:	d106      	bne.n	8027f9c <HAL_RCC_OscConfig+0x74>
 8027f8e:	4b91      	ldr	r3, [pc, #580]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8027f90:	681b      	ldr	r3, [r3, #0]
 8027f92:	4a90      	ldr	r2, [pc, #576]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8027f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027f98:	6013      	str	r3, [r2, #0]
 8027f9a:	e01d      	b.n	8027fd8 <HAL_RCC_OscConfig+0xb0>
 8027f9c:	687b      	ldr	r3, [r7, #4]
 8027f9e:	685b      	ldr	r3, [r3, #4]
 8027fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8027fa4:	d10c      	bne.n	8027fc0 <HAL_RCC_OscConfig+0x98>
 8027fa6:	4b8b      	ldr	r3, [pc, #556]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8027fa8:	681b      	ldr	r3, [r3, #0]
 8027faa:	4a8a      	ldr	r2, [pc, #552]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8027fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8027fb0:	6013      	str	r3, [r2, #0]
 8027fb2:	4b88      	ldr	r3, [pc, #544]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8027fb4:	681b      	ldr	r3, [r3, #0]
 8027fb6:	4a87      	ldr	r2, [pc, #540]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8027fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027fbc:	6013      	str	r3, [r2, #0]
 8027fbe:	e00b      	b.n	8027fd8 <HAL_RCC_OscConfig+0xb0>
 8027fc0:	4b84      	ldr	r3, [pc, #528]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8027fc2:	681b      	ldr	r3, [r3, #0]
 8027fc4:	4a83      	ldr	r2, [pc, #524]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8027fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8027fca:	6013      	str	r3, [r2, #0]
 8027fcc:	4b81      	ldr	r3, [pc, #516]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8027fce:	681b      	ldr	r3, [r3, #0]
 8027fd0:	4a80      	ldr	r2, [pc, #512]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8027fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8027fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8027fd8:	687b      	ldr	r3, [r7, #4]
 8027fda:	685b      	ldr	r3, [r3, #4]
 8027fdc:	2b00      	cmp	r3, #0
 8027fde:	d013      	beq.n	8028008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027fe0:	f7fe f926 	bl	8026230 <HAL_GetTick>
 8027fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027fe6:	e008      	b.n	8027ffa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8027fe8:	f7fe f922 	bl	8026230 <HAL_GetTick>
 8027fec:	4602      	mov	r2, r0
 8027fee:	693b      	ldr	r3, [r7, #16]
 8027ff0:	1ad3      	subs	r3, r2, r3
 8027ff2:	2b64      	cmp	r3, #100	; 0x64
 8027ff4:	d901      	bls.n	8027ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8027ff6:	2303      	movs	r3, #3
 8027ff8:	e1fb      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027ffa:	4b76      	ldr	r3, [pc, #472]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8027ffc:	681b      	ldr	r3, [r3, #0]
 8027ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028002:	2b00      	cmp	r3, #0
 8028004:	d0f0      	beq.n	8027fe8 <HAL_RCC_OscConfig+0xc0>
 8028006:	e014      	b.n	8028032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028008:	f7fe f912 	bl	8026230 <HAL_GetTick>
 802800c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802800e:	e008      	b.n	8028022 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8028010:	f7fe f90e 	bl	8026230 <HAL_GetTick>
 8028014:	4602      	mov	r2, r0
 8028016:	693b      	ldr	r3, [r7, #16]
 8028018:	1ad3      	subs	r3, r2, r3
 802801a:	2b64      	cmp	r3, #100	; 0x64
 802801c:	d901      	bls.n	8028022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802801e:	2303      	movs	r3, #3
 8028020:	e1e7      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8028022:	4b6c      	ldr	r3, [pc, #432]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8028024:	681b      	ldr	r3, [r3, #0]
 8028026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802802a:	2b00      	cmp	r3, #0
 802802c:	d1f0      	bne.n	8028010 <HAL_RCC_OscConfig+0xe8>
 802802e:	e000      	b.n	8028032 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8028030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8028032:	687b      	ldr	r3, [r7, #4]
 8028034:	681b      	ldr	r3, [r3, #0]
 8028036:	f003 0302 	and.w	r3, r3, #2
 802803a:	2b00      	cmp	r3, #0
 802803c:	d063      	beq.n	8028106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802803e:	4b65      	ldr	r3, [pc, #404]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8028040:	689b      	ldr	r3, [r3, #8]
 8028042:	f003 030c 	and.w	r3, r3, #12
 8028046:	2b00      	cmp	r3, #0
 8028048:	d00b      	beq.n	8028062 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802804a:	4b62      	ldr	r3, [pc, #392]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 802804c:	689b      	ldr	r3, [r3, #8]
 802804e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8028052:	2b08      	cmp	r3, #8
 8028054:	d11c      	bne.n	8028090 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8028056:	4b5f      	ldr	r3, [pc, #380]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8028058:	685b      	ldr	r3, [r3, #4]
 802805a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802805e:	2b00      	cmp	r3, #0
 8028060:	d116      	bne.n	8028090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8028062:	4b5c      	ldr	r3, [pc, #368]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8028064:	681b      	ldr	r3, [r3, #0]
 8028066:	f003 0302 	and.w	r3, r3, #2
 802806a:	2b00      	cmp	r3, #0
 802806c:	d005      	beq.n	802807a <HAL_RCC_OscConfig+0x152>
 802806e:	687b      	ldr	r3, [r7, #4]
 8028070:	68db      	ldr	r3, [r3, #12]
 8028072:	2b01      	cmp	r3, #1
 8028074:	d001      	beq.n	802807a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8028076:	2301      	movs	r3, #1
 8028078:	e1bb      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802807a:	4b56      	ldr	r3, [pc, #344]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 802807c:	681b      	ldr	r3, [r3, #0]
 802807e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8028082:	687b      	ldr	r3, [r7, #4]
 8028084:	691b      	ldr	r3, [r3, #16]
 8028086:	00db      	lsls	r3, r3, #3
 8028088:	4952      	ldr	r1, [pc, #328]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 802808a:	4313      	orrs	r3, r2
 802808c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802808e:	e03a      	b.n	8028106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8028090:	687b      	ldr	r3, [r7, #4]
 8028092:	68db      	ldr	r3, [r3, #12]
 8028094:	2b00      	cmp	r3, #0
 8028096:	d020      	beq.n	80280da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8028098:	4b4f      	ldr	r3, [pc, #316]	; (80281d8 <HAL_RCC_OscConfig+0x2b0>)
 802809a:	2201      	movs	r2, #1
 802809c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802809e:	f7fe f8c7 	bl	8026230 <HAL_GetTick>
 80280a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80280a4:	e008      	b.n	80280b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80280a6:	f7fe f8c3 	bl	8026230 <HAL_GetTick>
 80280aa:	4602      	mov	r2, r0
 80280ac:	693b      	ldr	r3, [r7, #16]
 80280ae:	1ad3      	subs	r3, r2, r3
 80280b0:	2b02      	cmp	r3, #2
 80280b2:	d901      	bls.n	80280b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80280b4:	2303      	movs	r3, #3
 80280b6:	e19c      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80280b8:	4b46      	ldr	r3, [pc, #280]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 80280ba:	681b      	ldr	r3, [r3, #0]
 80280bc:	f003 0302 	and.w	r3, r3, #2
 80280c0:	2b00      	cmp	r3, #0
 80280c2:	d0f0      	beq.n	80280a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80280c4:	4b43      	ldr	r3, [pc, #268]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 80280c6:	681b      	ldr	r3, [r3, #0]
 80280c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80280cc:	687b      	ldr	r3, [r7, #4]
 80280ce:	691b      	ldr	r3, [r3, #16]
 80280d0:	00db      	lsls	r3, r3, #3
 80280d2:	4940      	ldr	r1, [pc, #256]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 80280d4:	4313      	orrs	r3, r2
 80280d6:	600b      	str	r3, [r1, #0]
 80280d8:	e015      	b.n	8028106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80280da:	4b3f      	ldr	r3, [pc, #252]	; (80281d8 <HAL_RCC_OscConfig+0x2b0>)
 80280dc:	2200      	movs	r2, #0
 80280de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80280e0:	f7fe f8a6 	bl	8026230 <HAL_GetTick>
 80280e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80280e6:	e008      	b.n	80280fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80280e8:	f7fe f8a2 	bl	8026230 <HAL_GetTick>
 80280ec:	4602      	mov	r2, r0
 80280ee:	693b      	ldr	r3, [r7, #16]
 80280f0:	1ad3      	subs	r3, r2, r3
 80280f2:	2b02      	cmp	r3, #2
 80280f4:	d901      	bls.n	80280fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80280f6:	2303      	movs	r3, #3
 80280f8:	e17b      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80280fa:	4b36      	ldr	r3, [pc, #216]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 80280fc:	681b      	ldr	r3, [r3, #0]
 80280fe:	f003 0302 	and.w	r3, r3, #2
 8028102:	2b00      	cmp	r3, #0
 8028104:	d1f0      	bne.n	80280e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8028106:	687b      	ldr	r3, [r7, #4]
 8028108:	681b      	ldr	r3, [r3, #0]
 802810a:	f003 0308 	and.w	r3, r3, #8
 802810e:	2b00      	cmp	r3, #0
 8028110:	d030      	beq.n	8028174 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8028112:	687b      	ldr	r3, [r7, #4]
 8028114:	695b      	ldr	r3, [r3, #20]
 8028116:	2b00      	cmp	r3, #0
 8028118:	d016      	beq.n	8028148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802811a:	4b30      	ldr	r3, [pc, #192]	; (80281dc <HAL_RCC_OscConfig+0x2b4>)
 802811c:	2201      	movs	r2, #1
 802811e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028120:	f7fe f886 	bl	8026230 <HAL_GetTick>
 8028124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8028126:	e008      	b.n	802813a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8028128:	f7fe f882 	bl	8026230 <HAL_GetTick>
 802812c:	4602      	mov	r2, r0
 802812e:	693b      	ldr	r3, [r7, #16]
 8028130:	1ad3      	subs	r3, r2, r3
 8028132:	2b02      	cmp	r3, #2
 8028134:	d901      	bls.n	802813a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8028136:	2303      	movs	r3, #3
 8028138:	e15b      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802813a:	4b26      	ldr	r3, [pc, #152]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 802813c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802813e:	f003 0302 	and.w	r3, r3, #2
 8028142:	2b00      	cmp	r3, #0
 8028144:	d0f0      	beq.n	8028128 <HAL_RCC_OscConfig+0x200>
 8028146:	e015      	b.n	8028174 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8028148:	4b24      	ldr	r3, [pc, #144]	; (80281dc <HAL_RCC_OscConfig+0x2b4>)
 802814a:	2200      	movs	r2, #0
 802814c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802814e:	f7fe f86f 	bl	8026230 <HAL_GetTick>
 8028152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8028154:	e008      	b.n	8028168 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8028156:	f7fe f86b 	bl	8026230 <HAL_GetTick>
 802815a:	4602      	mov	r2, r0
 802815c:	693b      	ldr	r3, [r7, #16]
 802815e:	1ad3      	subs	r3, r2, r3
 8028160:	2b02      	cmp	r3, #2
 8028162:	d901      	bls.n	8028168 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8028164:	2303      	movs	r3, #3
 8028166:	e144      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8028168:	4b1a      	ldr	r3, [pc, #104]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 802816a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802816c:	f003 0302 	and.w	r3, r3, #2
 8028170:	2b00      	cmp	r3, #0
 8028172:	d1f0      	bne.n	8028156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8028174:	687b      	ldr	r3, [r7, #4]
 8028176:	681b      	ldr	r3, [r3, #0]
 8028178:	f003 0304 	and.w	r3, r3, #4
 802817c:	2b00      	cmp	r3, #0
 802817e:	f000 80a0 	beq.w	80282c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8028182:	2300      	movs	r3, #0
 8028184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8028186:	4b13      	ldr	r3, [pc, #76]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8028188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802818a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802818e:	2b00      	cmp	r3, #0
 8028190:	d10f      	bne.n	80281b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8028192:	2300      	movs	r3, #0
 8028194:	60bb      	str	r3, [r7, #8]
 8028196:	4b0f      	ldr	r3, [pc, #60]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 8028198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802819a:	4a0e      	ldr	r2, [pc, #56]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 802819c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80281a0:	6413      	str	r3, [r2, #64]	; 0x40
 80281a2:	4b0c      	ldr	r3, [pc, #48]	; (80281d4 <HAL_RCC_OscConfig+0x2ac>)
 80281a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80281a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80281aa:	60bb      	str	r3, [r7, #8]
 80281ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80281ae:	2301      	movs	r3, #1
 80281b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80281b2:	4b0b      	ldr	r3, [pc, #44]	; (80281e0 <HAL_RCC_OscConfig+0x2b8>)
 80281b4:	681b      	ldr	r3, [r3, #0]
 80281b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80281ba:	2b00      	cmp	r3, #0
 80281bc:	d121      	bne.n	8028202 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80281be:	4b08      	ldr	r3, [pc, #32]	; (80281e0 <HAL_RCC_OscConfig+0x2b8>)
 80281c0:	681b      	ldr	r3, [r3, #0]
 80281c2:	4a07      	ldr	r2, [pc, #28]	; (80281e0 <HAL_RCC_OscConfig+0x2b8>)
 80281c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80281c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80281ca:	f7fe f831 	bl	8026230 <HAL_GetTick>
 80281ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80281d0:	e011      	b.n	80281f6 <HAL_RCC_OscConfig+0x2ce>
 80281d2:	bf00      	nop
 80281d4:	40023800 	.word	0x40023800
 80281d8:	42470000 	.word	0x42470000
 80281dc:	42470e80 	.word	0x42470e80
 80281e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80281e4:	f7fe f824 	bl	8026230 <HAL_GetTick>
 80281e8:	4602      	mov	r2, r0
 80281ea:	693b      	ldr	r3, [r7, #16]
 80281ec:	1ad3      	subs	r3, r2, r3
 80281ee:	2b02      	cmp	r3, #2
 80281f0:	d901      	bls.n	80281f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80281f2:	2303      	movs	r3, #3
 80281f4:	e0fd      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80281f6:	4b81      	ldr	r3, [pc, #516]	; (80283fc <HAL_RCC_OscConfig+0x4d4>)
 80281f8:	681b      	ldr	r3, [r3, #0]
 80281fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80281fe:	2b00      	cmp	r3, #0
 8028200:	d0f0      	beq.n	80281e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8028202:	687b      	ldr	r3, [r7, #4]
 8028204:	689b      	ldr	r3, [r3, #8]
 8028206:	2b01      	cmp	r3, #1
 8028208:	d106      	bne.n	8028218 <HAL_RCC_OscConfig+0x2f0>
 802820a:	4b7d      	ldr	r3, [pc, #500]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 802820c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802820e:	4a7c      	ldr	r2, [pc, #496]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 8028210:	f043 0301 	orr.w	r3, r3, #1
 8028214:	6713      	str	r3, [r2, #112]	; 0x70
 8028216:	e01c      	b.n	8028252 <HAL_RCC_OscConfig+0x32a>
 8028218:	687b      	ldr	r3, [r7, #4]
 802821a:	689b      	ldr	r3, [r3, #8]
 802821c:	2b05      	cmp	r3, #5
 802821e:	d10c      	bne.n	802823a <HAL_RCC_OscConfig+0x312>
 8028220:	4b77      	ldr	r3, [pc, #476]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 8028222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028224:	4a76      	ldr	r2, [pc, #472]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 8028226:	f043 0304 	orr.w	r3, r3, #4
 802822a:	6713      	str	r3, [r2, #112]	; 0x70
 802822c:	4b74      	ldr	r3, [pc, #464]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 802822e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028230:	4a73      	ldr	r2, [pc, #460]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 8028232:	f043 0301 	orr.w	r3, r3, #1
 8028236:	6713      	str	r3, [r2, #112]	; 0x70
 8028238:	e00b      	b.n	8028252 <HAL_RCC_OscConfig+0x32a>
 802823a:	4b71      	ldr	r3, [pc, #452]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 802823c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802823e:	4a70      	ldr	r2, [pc, #448]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 8028240:	f023 0301 	bic.w	r3, r3, #1
 8028244:	6713      	str	r3, [r2, #112]	; 0x70
 8028246:	4b6e      	ldr	r3, [pc, #440]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 8028248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802824a:	4a6d      	ldr	r2, [pc, #436]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 802824c:	f023 0304 	bic.w	r3, r3, #4
 8028250:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8028252:	687b      	ldr	r3, [r7, #4]
 8028254:	689b      	ldr	r3, [r3, #8]
 8028256:	2b00      	cmp	r3, #0
 8028258:	d015      	beq.n	8028286 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802825a:	f7fd ffe9 	bl	8026230 <HAL_GetTick>
 802825e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028260:	e00a      	b.n	8028278 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8028262:	f7fd ffe5 	bl	8026230 <HAL_GetTick>
 8028266:	4602      	mov	r2, r0
 8028268:	693b      	ldr	r3, [r7, #16]
 802826a:	1ad3      	subs	r3, r2, r3
 802826c:	f241 3288 	movw	r2, #5000	; 0x1388
 8028270:	4293      	cmp	r3, r2
 8028272:	d901      	bls.n	8028278 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8028274:	2303      	movs	r3, #3
 8028276:	e0bc      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028278:	4b61      	ldr	r3, [pc, #388]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 802827a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802827c:	f003 0302 	and.w	r3, r3, #2
 8028280:	2b00      	cmp	r3, #0
 8028282:	d0ee      	beq.n	8028262 <HAL_RCC_OscConfig+0x33a>
 8028284:	e014      	b.n	80282b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8028286:	f7fd ffd3 	bl	8026230 <HAL_GetTick>
 802828a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802828c:	e00a      	b.n	80282a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802828e:	f7fd ffcf 	bl	8026230 <HAL_GetTick>
 8028292:	4602      	mov	r2, r0
 8028294:	693b      	ldr	r3, [r7, #16]
 8028296:	1ad3      	subs	r3, r2, r3
 8028298:	f241 3288 	movw	r2, #5000	; 0x1388
 802829c:	4293      	cmp	r3, r2
 802829e:	d901      	bls.n	80282a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80282a0:	2303      	movs	r3, #3
 80282a2:	e0a6      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80282a4:	4b56      	ldr	r3, [pc, #344]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 80282a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80282a8:	f003 0302 	and.w	r3, r3, #2
 80282ac:	2b00      	cmp	r3, #0
 80282ae:	d1ee      	bne.n	802828e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80282b0:	7dfb      	ldrb	r3, [r7, #23]
 80282b2:	2b01      	cmp	r3, #1
 80282b4:	d105      	bne.n	80282c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80282b6:	4b52      	ldr	r3, [pc, #328]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 80282b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80282ba:	4a51      	ldr	r2, [pc, #324]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 80282bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80282c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80282c2:	687b      	ldr	r3, [r7, #4]
 80282c4:	699b      	ldr	r3, [r3, #24]
 80282c6:	2b00      	cmp	r3, #0
 80282c8:	f000 8092 	beq.w	80283f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80282cc:	4b4c      	ldr	r3, [pc, #304]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 80282ce:	689b      	ldr	r3, [r3, #8]
 80282d0:	f003 030c 	and.w	r3, r3, #12
 80282d4:	2b08      	cmp	r3, #8
 80282d6:	d05c      	beq.n	8028392 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80282d8:	687b      	ldr	r3, [r7, #4]
 80282da:	699b      	ldr	r3, [r3, #24]
 80282dc:	2b02      	cmp	r3, #2
 80282de:	d141      	bne.n	8028364 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80282e0:	4b48      	ldr	r3, [pc, #288]	; (8028404 <HAL_RCC_OscConfig+0x4dc>)
 80282e2:	2200      	movs	r2, #0
 80282e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80282e6:	f7fd ffa3 	bl	8026230 <HAL_GetTick>
 80282ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80282ec:	e008      	b.n	8028300 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80282ee:	f7fd ff9f 	bl	8026230 <HAL_GetTick>
 80282f2:	4602      	mov	r2, r0
 80282f4:	693b      	ldr	r3, [r7, #16]
 80282f6:	1ad3      	subs	r3, r2, r3
 80282f8:	2b02      	cmp	r3, #2
 80282fa:	d901      	bls.n	8028300 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80282fc:	2303      	movs	r3, #3
 80282fe:	e078      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028300:	4b3f      	ldr	r3, [pc, #252]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 8028302:	681b      	ldr	r3, [r3, #0]
 8028304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028308:	2b00      	cmp	r3, #0
 802830a:	d1f0      	bne.n	80282ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802830c:	687b      	ldr	r3, [r7, #4]
 802830e:	69da      	ldr	r2, [r3, #28]
 8028310:	687b      	ldr	r3, [r7, #4]
 8028312:	6a1b      	ldr	r3, [r3, #32]
 8028314:	431a      	orrs	r2, r3
 8028316:	687b      	ldr	r3, [r7, #4]
 8028318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802831a:	019b      	lsls	r3, r3, #6
 802831c:	431a      	orrs	r2, r3
 802831e:	687b      	ldr	r3, [r7, #4]
 8028320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028322:	085b      	lsrs	r3, r3, #1
 8028324:	3b01      	subs	r3, #1
 8028326:	041b      	lsls	r3, r3, #16
 8028328:	431a      	orrs	r2, r3
 802832a:	687b      	ldr	r3, [r7, #4]
 802832c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802832e:	061b      	lsls	r3, r3, #24
 8028330:	4933      	ldr	r1, [pc, #204]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 8028332:	4313      	orrs	r3, r2
 8028334:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8028336:	4b33      	ldr	r3, [pc, #204]	; (8028404 <HAL_RCC_OscConfig+0x4dc>)
 8028338:	2201      	movs	r2, #1
 802833a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802833c:	f7fd ff78 	bl	8026230 <HAL_GetTick>
 8028340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028342:	e008      	b.n	8028356 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028344:	f7fd ff74 	bl	8026230 <HAL_GetTick>
 8028348:	4602      	mov	r2, r0
 802834a:	693b      	ldr	r3, [r7, #16]
 802834c:	1ad3      	subs	r3, r2, r3
 802834e:	2b02      	cmp	r3, #2
 8028350:	d901      	bls.n	8028356 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8028352:	2303      	movs	r3, #3
 8028354:	e04d      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028356:	4b2a      	ldr	r3, [pc, #168]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 8028358:	681b      	ldr	r3, [r3, #0]
 802835a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802835e:	2b00      	cmp	r3, #0
 8028360:	d0f0      	beq.n	8028344 <HAL_RCC_OscConfig+0x41c>
 8028362:	e045      	b.n	80283f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8028364:	4b27      	ldr	r3, [pc, #156]	; (8028404 <HAL_RCC_OscConfig+0x4dc>)
 8028366:	2200      	movs	r2, #0
 8028368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802836a:	f7fd ff61 	bl	8026230 <HAL_GetTick>
 802836e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028370:	e008      	b.n	8028384 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028372:	f7fd ff5d 	bl	8026230 <HAL_GetTick>
 8028376:	4602      	mov	r2, r0
 8028378:	693b      	ldr	r3, [r7, #16]
 802837a:	1ad3      	subs	r3, r2, r3
 802837c:	2b02      	cmp	r3, #2
 802837e:	d901      	bls.n	8028384 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8028380:	2303      	movs	r3, #3
 8028382:	e036      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028384:	4b1e      	ldr	r3, [pc, #120]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 8028386:	681b      	ldr	r3, [r3, #0]
 8028388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802838c:	2b00      	cmp	r3, #0
 802838e:	d1f0      	bne.n	8028372 <HAL_RCC_OscConfig+0x44a>
 8028390:	e02e      	b.n	80283f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8028392:	687b      	ldr	r3, [r7, #4]
 8028394:	699b      	ldr	r3, [r3, #24]
 8028396:	2b01      	cmp	r3, #1
 8028398:	d101      	bne.n	802839e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 802839a:	2301      	movs	r3, #1
 802839c:	e029      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802839e:	4b18      	ldr	r3, [pc, #96]	; (8028400 <HAL_RCC_OscConfig+0x4d8>)
 80283a0:	685b      	ldr	r3, [r3, #4]
 80283a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80283a4:	68fb      	ldr	r3, [r7, #12]
 80283a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80283aa:	687b      	ldr	r3, [r7, #4]
 80283ac:	69db      	ldr	r3, [r3, #28]
 80283ae:	429a      	cmp	r2, r3
 80283b0:	d11c      	bne.n	80283ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80283b2:	68fb      	ldr	r3, [r7, #12]
 80283b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80283b8:	687b      	ldr	r3, [r7, #4]
 80283ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80283bc:	429a      	cmp	r2, r3
 80283be:	d115      	bne.n	80283ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80283c0:	68fa      	ldr	r2, [r7, #12]
 80283c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80283c6:	4013      	ands	r3, r2
 80283c8:	687a      	ldr	r2, [r7, #4]
 80283ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80283cc:	4293      	cmp	r3, r2
 80283ce:	d10d      	bne.n	80283ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80283d0:	68fb      	ldr	r3, [r7, #12]
 80283d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80283d6:	687b      	ldr	r3, [r7, #4]
 80283d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80283da:	429a      	cmp	r2, r3
 80283dc:	d106      	bne.n	80283ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80283de:	68fb      	ldr	r3, [r7, #12]
 80283e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80283e4:	687b      	ldr	r3, [r7, #4]
 80283e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80283e8:	429a      	cmp	r2, r3
 80283ea:	d001      	beq.n	80283f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80283ec:	2301      	movs	r3, #1
 80283ee:	e000      	b.n	80283f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80283f0:	2300      	movs	r3, #0
}
 80283f2:	4618      	mov	r0, r3
 80283f4:	3718      	adds	r7, #24
 80283f6:	46bd      	mov	sp, r7
 80283f8:	bd80      	pop	{r7, pc}
 80283fa:	bf00      	nop
 80283fc:	40007000 	.word	0x40007000
 8028400:	40023800 	.word	0x40023800
 8028404:	42470060 	.word	0x42470060

08028408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8028408:	b580      	push	{r7, lr}
 802840a:	b084      	sub	sp, #16
 802840c:	af00      	add	r7, sp, #0
 802840e:	6078      	str	r0, [r7, #4]
 8028410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8028412:	687b      	ldr	r3, [r7, #4]
 8028414:	2b00      	cmp	r3, #0
 8028416:	d101      	bne.n	802841c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8028418:	2301      	movs	r3, #1
 802841a:	e0cc      	b.n	80285b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 802841c:	4b68      	ldr	r3, [pc, #416]	; (80285c0 <HAL_RCC_ClockConfig+0x1b8>)
 802841e:	681b      	ldr	r3, [r3, #0]
 8028420:	f003 030f 	and.w	r3, r3, #15
 8028424:	683a      	ldr	r2, [r7, #0]
 8028426:	429a      	cmp	r2, r3
 8028428:	d90c      	bls.n	8028444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802842a:	4b65      	ldr	r3, [pc, #404]	; (80285c0 <HAL_RCC_ClockConfig+0x1b8>)
 802842c:	683a      	ldr	r2, [r7, #0]
 802842e:	b2d2      	uxtb	r2, r2
 8028430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8028432:	4b63      	ldr	r3, [pc, #396]	; (80285c0 <HAL_RCC_ClockConfig+0x1b8>)
 8028434:	681b      	ldr	r3, [r3, #0]
 8028436:	f003 030f 	and.w	r3, r3, #15
 802843a:	683a      	ldr	r2, [r7, #0]
 802843c:	429a      	cmp	r2, r3
 802843e:	d001      	beq.n	8028444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8028440:	2301      	movs	r3, #1
 8028442:	e0b8      	b.n	80285b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8028444:	687b      	ldr	r3, [r7, #4]
 8028446:	681b      	ldr	r3, [r3, #0]
 8028448:	f003 0302 	and.w	r3, r3, #2
 802844c:	2b00      	cmp	r3, #0
 802844e:	d020      	beq.n	8028492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028450:	687b      	ldr	r3, [r7, #4]
 8028452:	681b      	ldr	r3, [r3, #0]
 8028454:	f003 0304 	and.w	r3, r3, #4
 8028458:	2b00      	cmp	r3, #0
 802845a:	d005      	beq.n	8028468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802845c:	4b59      	ldr	r3, [pc, #356]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 802845e:	689b      	ldr	r3, [r3, #8]
 8028460:	4a58      	ldr	r2, [pc, #352]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 8028462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8028466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028468:	687b      	ldr	r3, [r7, #4]
 802846a:	681b      	ldr	r3, [r3, #0]
 802846c:	f003 0308 	and.w	r3, r3, #8
 8028470:	2b00      	cmp	r3, #0
 8028472:	d005      	beq.n	8028480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8028474:	4b53      	ldr	r3, [pc, #332]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 8028476:	689b      	ldr	r3, [r3, #8]
 8028478:	4a52      	ldr	r2, [pc, #328]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 802847a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802847e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8028480:	4b50      	ldr	r3, [pc, #320]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 8028482:	689b      	ldr	r3, [r3, #8]
 8028484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8028488:	687b      	ldr	r3, [r7, #4]
 802848a:	689b      	ldr	r3, [r3, #8]
 802848c:	494d      	ldr	r1, [pc, #308]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 802848e:	4313      	orrs	r3, r2
 8028490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8028492:	687b      	ldr	r3, [r7, #4]
 8028494:	681b      	ldr	r3, [r3, #0]
 8028496:	f003 0301 	and.w	r3, r3, #1
 802849a:	2b00      	cmp	r3, #0
 802849c:	d044      	beq.n	8028528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802849e:	687b      	ldr	r3, [r7, #4]
 80284a0:	685b      	ldr	r3, [r3, #4]
 80284a2:	2b01      	cmp	r3, #1
 80284a4:	d107      	bne.n	80284b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80284a6:	4b47      	ldr	r3, [pc, #284]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 80284a8:	681b      	ldr	r3, [r3, #0]
 80284aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80284ae:	2b00      	cmp	r3, #0
 80284b0:	d119      	bne.n	80284e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80284b2:	2301      	movs	r3, #1
 80284b4:	e07f      	b.n	80285b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80284b6:	687b      	ldr	r3, [r7, #4]
 80284b8:	685b      	ldr	r3, [r3, #4]
 80284ba:	2b02      	cmp	r3, #2
 80284bc:	d003      	beq.n	80284c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80284be:	687b      	ldr	r3, [r7, #4]
 80284c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80284c2:	2b03      	cmp	r3, #3
 80284c4:	d107      	bne.n	80284d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80284c6:	4b3f      	ldr	r3, [pc, #252]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 80284c8:	681b      	ldr	r3, [r3, #0]
 80284ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80284ce:	2b00      	cmp	r3, #0
 80284d0:	d109      	bne.n	80284e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80284d2:	2301      	movs	r3, #1
 80284d4:	e06f      	b.n	80285b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80284d6:	4b3b      	ldr	r3, [pc, #236]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 80284d8:	681b      	ldr	r3, [r3, #0]
 80284da:	f003 0302 	and.w	r3, r3, #2
 80284de:	2b00      	cmp	r3, #0
 80284e0:	d101      	bne.n	80284e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80284e2:	2301      	movs	r3, #1
 80284e4:	e067      	b.n	80285b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80284e6:	4b37      	ldr	r3, [pc, #220]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 80284e8:	689b      	ldr	r3, [r3, #8]
 80284ea:	f023 0203 	bic.w	r2, r3, #3
 80284ee:	687b      	ldr	r3, [r7, #4]
 80284f0:	685b      	ldr	r3, [r3, #4]
 80284f2:	4934      	ldr	r1, [pc, #208]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 80284f4:	4313      	orrs	r3, r2
 80284f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80284f8:	f7fd fe9a 	bl	8026230 <HAL_GetTick>
 80284fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80284fe:	e00a      	b.n	8028516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8028500:	f7fd fe96 	bl	8026230 <HAL_GetTick>
 8028504:	4602      	mov	r2, r0
 8028506:	68fb      	ldr	r3, [r7, #12]
 8028508:	1ad3      	subs	r3, r2, r3
 802850a:	f241 3288 	movw	r2, #5000	; 0x1388
 802850e:	4293      	cmp	r3, r2
 8028510:	d901      	bls.n	8028516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8028512:	2303      	movs	r3, #3
 8028514:	e04f      	b.n	80285b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028516:	4b2b      	ldr	r3, [pc, #172]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 8028518:	689b      	ldr	r3, [r3, #8]
 802851a:	f003 020c 	and.w	r2, r3, #12
 802851e:	687b      	ldr	r3, [r7, #4]
 8028520:	685b      	ldr	r3, [r3, #4]
 8028522:	009b      	lsls	r3, r3, #2
 8028524:	429a      	cmp	r2, r3
 8028526:	d1eb      	bne.n	8028500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8028528:	4b25      	ldr	r3, [pc, #148]	; (80285c0 <HAL_RCC_ClockConfig+0x1b8>)
 802852a:	681b      	ldr	r3, [r3, #0]
 802852c:	f003 030f 	and.w	r3, r3, #15
 8028530:	683a      	ldr	r2, [r7, #0]
 8028532:	429a      	cmp	r2, r3
 8028534:	d20c      	bcs.n	8028550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8028536:	4b22      	ldr	r3, [pc, #136]	; (80285c0 <HAL_RCC_ClockConfig+0x1b8>)
 8028538:	683a      	ldr	r2, [r7, #0]
 802853a:	b2d2      	uxtb	r2, r2
 802853c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802853e:	4b20      	ldr	r3, [pc, #128]	; (80285c0 <HAL_RCC_ClockConfig+0x1b8>)
 8028540:	681b      	ldr	r3, [r3, #0]
 8028542:	f003 030f 	and.w	r3, r3, #15
 8028546:	683a      	ldr	r2, [r7, #0]
 8028548:	429a      	cmp	r2, r3
 802854a:	d001      	beq.n	8028550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802854c:	2301      	movs	r3, #1
 802854e:	e032      	b.n	80285b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028550:	687b      	ldr	r3, [r7, #4]
 8028552:	681b      	ldr	r3, [r3, #0]
 8028554:	f003 0304 	and.w	r3, r3, #4
 8028558:	2b00      	cmp	r3, #0
 802855a:	d008      	beq.n	802856e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802855c:	4b19      	ldr	r3, [pc, #100]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 802855e:	689b      	ldr	r3, [r3, #8]
 8028560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8028564:	687b      	ldr	r3, [r7, #4]
 8028566:	68db      	ldr	r3, [r3, #12]
 8028568:	4916      	ldr	r1, [pc, #88]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 802856a:	4313      	orrs	r3, r2
 802856c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802856e:	687b      	ldr	r3, [r7, #4]
 8028570:	681b      	ldr	r3, [r3, #0]
 8028572:	f003 0308 	and.w	r3, r3, #8
 8028576:	2b00      	cmp	r3, #0
 8028578:	d009      	beq.n	802858e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802857a:	4b12      	ldr	r3, [pc, #72]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 802857c:	689b      	ldr	r3, [r3, #8]
 802857e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8028582:	687b      	ldr	r3, [r7, #4]
 8028584:	691b      	ldr	r3, [r3, #16]
 8028586:	00db      	lsls	r3, r3, #3
 8028588:	490e      	ldr	r1, [pc, #56]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 802858a:	4313      	orrs	r3, r2
 802858c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802858e:	f000 f821 	bl	80285d4 <HAL_RCC_GetSysClockFreq>
 8028592:	4601      	mov	r1, r0
 8028594:	4b0b      	ldr	r3, [pc, #44]	; (80285c4 <HAL_RCC_ClockConfig+0x1bc>)
 8028596:	689b      	ldr	r3, [r3, #8]
 8028598:	091b      	lsrs	r3, r3, #4
 802859a:	f003 030f 	and.w	r3, r3, #15
 802859e:	4a0a      	ldr	r2, [pc, #40]	; (80285c8 <HAL_RCC_ClockConfig+0x1c0>)
 80285a0:	5cd3      	ldrb	r3, [r2, r3]
 80285a2:	fa21 f303 	lsr.w	r3, r1, r3
 80285a6:	4a09      	ldr	r2, [pc, #36]	; (80285cc <HAL_RCC_ClockConfig+0x1c4>)
 80285a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80285aa:	4b09      	ldr	r3, [pc, #36]	; (80285d0 <HAL_RCC_ClockConfig+0x1c8>)
 80285ac:	681b      	ldr	r3, [r3, #0]
 80285ae:	4618      	mov	r0, r3
 80285b0:	f7fd fdfa 	bl	80261a8 <HAL_InitTick>

  return HAL_OK;
 80285b4:	2300      	movs	r3, #0
}
 80285b6:	4618      	mov	r0, r3
 80285b8:	3710      	adds	r7, #16
 80285ba:	46bd      	mov	sp, r7
 80285bc:	bd80      	pop	{r7, pc}
 80285be:	bf00      	nop
 80285c0:	40023c00 	.word	0x40023c00
 80285c4:	40023800 	.word	0x40023800
 80285c8:	0802a30c 	.word	0x0802a30c
 80285cc:	20000014 	.word	0x20000014
 80285d0:	20000018 	.word	0x20000018

080285d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80285d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80285d6:	b085      	sub	sp, #20
 80285d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80285da:	2300      	movs	r3, #0
 80285dc:	607b      	str	r3, [r7, #4]
 80285de:	2300      	movs	r3, #0
 80285e0:	60fb      	str	r3, [r7, #12]
 80285e2:	2300      	movs	r3, #0
 80285e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80285e6:	2300      	movs	r3, #0
 80285e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80285ea:	4b50      	ldr	r3, [pc, #320]	; (802872c <HAL_RCC_GetSysClockFreq+0x158>)
 80285ec:	689b      	ldr	r3, [r3, #8]
 80285ee:	f003 030c 	and.w	r3, r3, #12
 80285f2:	2b04      	cmp	r3, #4
 80285f4:	d007      	beq.n	8028606 <HAL_RCC_GetSysClockFreq+0x32>
 80285f6:	2b08      	cmp	r3, #8
 80285f8:	d008      	beq.n	802860c <HAL_RCC_GetSysClockFreq+0x38>
 80285fa:	2b00      	cmp	r3, #0
 80285fc:	f040 808d 	bne.w	802871a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8028600:	4b4b      	ldr	r3, [pc, #300]	; (8028730 <HAL_RCC_GetSysClockFreq+0x15c>)
 8028602:	60bb      	str	r3, [r7, #8]
       break;
 8028604:	e08c      	b.n	8028720 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8028606:	4b4b      	ldr	r3, [pc, #300]	; (8028734 <HAL_RCC_GetSysClockFreq+0x160>)
 8028608:	60bb      	str	r3, [r7, #8]
      break;
 802860a:	e089      	b.n	8028720 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802860c:	4b47      	ldr	r3, [pc, #284]	; (802872c <HAL_RCC_GetSysClockFreq+0x158>)
 802860e:	685b      	ldr	r3, [r3, #4]
 8028610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8028614:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8028616:	4b45      	ldr	r3, [pc, #276]	; (802872c <HAL_RCC_GetSysClockFreq+0x158>)
 8028618:	685b      	ldr	r3, [r3, #4]
 802861a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802861e:	2b00      	cmp	r3, #0
 8028620:	d023      	beq.n	802866a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8028622:	4b42      	ldr	r3, [pc, #264]	; (802872c <HAL_RCC_GetSysClockFreq+0x158>)
 8028624:	685b      	ldr	r3, [r3, #4]
 8028626:	099b      	lsrs	r3, r3, #6
 8028628:	f04f 0400 	mov.w	r4, #0
 802862c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8028630:	f04f 0200 	mov.w	r2, #0
 8028634:	ea03 0501 	and.w	r5, r3, r1
 8028638:	ea04 0602 	and.w	r6, r4, r2
 802863c:	4a3d      	ldr	r2, [pc, #244]	; (8028734 <HAL_RCC_GetSysClockFreq+0x160>)
 802863e:	fb02 f106 	mul.w	r1, r2, r6
 8028642:	2200      	movs	r2, #0
 8028644:	fb02 f205 	mul.w	r2, r2, r5
 8028648:	440a      	add	r2, r1
 802864a:	493a      	ldr	r1, [pc, #232]	; (8028734 <HAL_RCC_GetSysClockFreq+0x160>)
 802864c:	fba5 0101 	umull	r0, r1, r5, r1
 8028650:	1853      	adds	r3, r2, r1
 8028652:	4619      	mov	r1, r3
 8028654:	687b      	ldr	r3, [r7, #4]
 8028656:	f04f 0400 	mov.w	r4, #0
 802865a:	461a      	mov	r2, r3
 802865c:	4623      	mov	r3, r4
 802865e:	f7f8 f995 	bl	802098c <__aeabi_uldivmod>
 8028662:	4603      	mov	r3, r0
 8028664:	460c      	mov	r4, r1
 8028666:	60fb      	str	r3, [r7, #12]
 8028668:	e049      	b.n	80286fe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802866a:	4b30      	ldr	r3, [pc, #192]	; (802872c <HAL_RCC_GetSysClockFreq+0x158>)
 802866c:	685b      	ldr	r3, [r3, #4]
 802866e:	099b      	lsrs	r3, r3, #6
 8028670:	f04f 0400 	mov.w	r4, #0
 8028674:	f240 11ff 	movw	r1, #511	; 0x1ff
 8028678:	f04f 0200 	mov.w	r2, #0
 802867c:	ea03 0501 	and.w	r5, r3, r1
 8028680:	ea04 0602 	and.w	r6, r4, r2
 8028684:	4629      	mov	r1, r5
 8028686:	4632      	mov	r2, r6
 8028688:	f04f 0300 	mov.w	r3, #0
 802868c:	f04f 0400 	mov.w	r4, #0
 8028690:	0154      	lsls	r4, r2, #5
 8028692:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8028696:	014b      	lsls	r3, r1, #5
 8028698:	4619      	mov	r1, r3
 802869a:	4622      	mov	r2, r4
 802869c:	1b49      	subs	r1, r1, r5
 802869e:	eb62 0206 	sbc.w	r2, r2, r6
 80286a2:	f04f 0300 	mov.w	r3, #0
 80286a6:	f04f 0400 	mov.w	r4, #0
 80286aa:	0194      	lsls	r4, r2, #6
 80286ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80286b0:	018b      	lsls	r3, r1, #6
 80286b2:	1a5b      	subs	r3, r3, r1
 80286b4:	eb64 0402 	sbc.w	r4, r4, r2
 80286b8:	f04f 0100 	mov.w	r1, #0
 80286bc:	f04f 0200 	mov.w	r2, #0
 80286c0:	00e2      	lsls	r2, r4, #3
 80286c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80286c6:	00d9      	lsls	r1, r3, #3
 80286c8:	460b      	mov	r3, r1
 80286ca:	4614      	mov	r4, r2
 80286cc:	195b      	adds	r3, r3, r5
 80286ce:	eb44 0406 	adc.w	r4, r4, r6
 80286d2:	f04f 0100 	mov.w	r1, #0
 80286d6:	f04f 0200 	mov.w	r2, #0
 80286da:	02a2      	lsls	r2, r4, #10
 80286dc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80286e0:	0299      	lsls	r1, r3, #10
 80286e2:	460b      	mov	r3, r1
 80286e4:	4614      	mov	r4, r2
 80286e6:	4618      	mov	r0, r3
 80286e8:	4621      	mov	r1, r4
 80286ea:	687b      	ldr	r3, [r7, #4]
 80286ec:	f04f 0400 	mov.w	r4, #0
 80286f0:	461a      	mov	r2, r3
 80286f2:	4623      	mov	r3, r4
 80286f4:	f7f8 f94a 	bl	802098c <__aeabi_uldivmod>
 80286f8:	4603      	mov	r3, r0
 80286fa:	460c      	mov	r4, r1
 80286fc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80286fe:	4b0b      	ldr	r3, [pc, #44]	; (802872c <HAL_RCC_GetSysClockFreq+0x158>)
 8028700:	685b      	ldr	r3, [r3, #4]
 8028702:	0c1b      	lsrs	r3, r3, #16
 8028704:	f003 0303 	and.w	r3, r3, #3
 8028708:	3301      	adds	r3, #1
 802870a:	005b      	lsls	r3, r3, #1
 802870c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 802870e:	68fa      	ldr	r2, [r7, #12]
 8028710:	683b      	ldr	r3, [r7, #0]
 8028712:	fbb2 f3f3 	udiv	r3, r2, r3
 8028716:	60bb      	str	r3, [r7, #8]
      break;
 8028718:	e002      	b.n	8028720 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802871a:	4b05      	ldr	r3, [pc, #20]	; (8028730 <HAL_RCC_GetSysClockFreq+0x15c>)
 802871c:	60bb      	str	r3, [r7, #8]
      break;
 802871e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8028720:	68bb      	ldr	r3, [r7, #8]
}
 8028722:	4618      	mov	r0, r3
 8028724:	3714      	adds	r7, #20
 8028726:	46bd      	mov	sp, r7
 8028728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802872a:	bf00      	nop
 802872c:	40023800 	.word	0x40023800
 8028730:	00f42400 	.word	0x00f42400
 8028734:	00b71b00 	.word	0x00b71b00

08028738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8028738:	b480      	push	{r7}
 802873a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 802873c:	4b03      	ldr	r3, [pc, #12]	; (802874c <HAL_RCC_GetHCLKFreq+0x14>)
 802873e:	681b      	ldr	r3, [r3, #0]
}
 8028740:	4618      	mov	r0, r3
 8028742:	46bd      	mov	sp, r7
 8028744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028748:	4770      	bx	lr
 802874a:	bf00      	nop
 802874c:	20000014 	.word	0x20000014

08028750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8028750:	b580      	push	{r7, lr}
 8028752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8028754:	f7ff fff0 	bl	8028738 <HAL_RCC_GetHCLKFreq>
 8028758:	4601      	mov	r1, r0
 802875a:	4b05      	ldr	r3, [pc, #20]	; (8028770 <HAL_RCC_GetPCLK1Freq+0x20>)
 802875c:	689b      	ldr	r3, [r3, #8]
 802875e:	0a9b      	lsrs	r3, r3, #10
 8028760:	f003 0307 	and.w	r3, r3, #7
 8028764:	4a03      	ldr	r2, [pc, #12]	; (8028774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8028766:	5cd3      	ldrb	r3, [r2, r3]
 8028768:	fa21 f303 	lsr.w	r3, r1, r3
}
 802876c:	4618      	mov	r0, r3
 802876e:	bd80      	pop	{r7, pc}
 8028770:	40023800 	.word	0x40023800
 8028774:	0802a31c 	.word	0x0802a31c

08028778 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8028778:	b580      	push	{r7, lr}
 802877a:	b082      	sub	sp, #8
 802877c:	af00      	add	r7, sp, #0
 802877e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8028780:	687b      	ldr	r3, [r7, #4]
 8028782:	2b00      	cmp	r3, #0
 8028784:	d101      	bne.n	802878a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8028786:	2301      	movs	r3, #1
 8028788:	e056      	b.n	8028838 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802878a:	687b      	ldr	r3, [r7, #4]
 802878c:	2200      	movs	r2, #0
 802878e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8028790:	687b      	ldr	r3, [r7, #4]
 8028792:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028796:	b2db      	uxtb	r3, r3
 8028798:	2b00      	cmp	r3, #0
 802879a:	d106      	bne.n	80287aa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802879c:	687b      	ldr	r3, [r7, #4]
 802879e:	2200      	movs	r2, #0
 80287a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80287a4:	6878      	ldr	r0, [r7, #4]
 80287a6:	f7fc ffab 	bl	8025700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80287aa:	687b      	ldr	r3, [r7, #4]
 80287ac:	2202      	movs	r2, #2
 80287ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80287b2:	687b      	ldr	r3, [r7, #4]
 80287b4:	681b      	ldr	r3, [r3, #0]
 80287b6:	681a      	ldr	r2, [r3, #0]
 80287b8:	687b      	ldr	r3, [r7, #4]
 80287ba:	681b      	ldr	r3, [r3, #0]
 80287bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80287c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80287c2:	687b      	ldr	r3, [r7, #4]
 80287c4:	685a      	ldr	r2, [r3, #4]
 80287c6:	687b      	ldr	r3, [r7, #4]
 80287c8:	689b      	ldr	r3, [r3, #8]
 80287ca:	431a      	orrs	r2, r3
 80287cc:	687b      	ldr	r3, [r7, #4]
 80287ce:	68db      	ldr	r3, [r3, #12]
 80287d0:	431a      	orrs	r2, r3
 80287d2:	687b      	ldr	r3, [r7, #4]
 80287d4:	691b      	ldr	r3, [r3, #16]
 80287d6:	431a      	orrs	r2, r3
 80287d8:	687b      	ldr	r3, [r7, #4]
 80287da:	695b      	ldr	r3, [r3, #20]
 80287dc:	431a      	orrs	r2, r3
 80287de:	687b      	ldr	r3, [r7, #4]
 80287e0:	699b      	ldr	r3, [r3, #24]
 80287e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80287e6:	431a      	orrs	r2, r3
 80287e8:	687b      	ldr	r3, [r7, #4]
 80287ea:	69db      	ldr	r3, [r3, #28]
 80287ec:	431a      	orrs	r2, r3
 80287ee:	687b      	ldr	r3, [r7, #4]
 80287f0:	6a1b      	ldr	r3, [r3, #32]
 80287f2:	ea42 0103 	orr.w	r1, r2, r3
 80287f6:	687b      	ldr	r3, [r7, #4]
 80287f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80287fa:	687b      	ldr	r3, [r7, #4]
 80287fc:	681b      	ldr	r3, [r3, #0]
 80287fe:	430a      	orrs	r2, r1
 8028800:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8028802:	687b      	ldr	r3, [r7, #4]
 8028804:	699b      	ldr	r3, [r3, #24]
 8028806:	0c1b      	lsrs	r3, r3, #16
 8028808:	f003 0104 	and.w	r1, r3, #4
 802880c:	687b      	ldr	r3, [r7, #4]
 802880e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028810:	687b      	ldr	r3, [r7, #4]
 8028812:	681b      	ldr	r3, [r3, #0]
 8028814:	430a      	orrs	r2, r1
 8028816:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8028818:	687b      	ldr	r3, [r7, #4]
 802881a:	681b      	ldr	r3, [r3, #0]
 802881c:	69da      	ldr	r2, [r3, #28]
 802881e:	687b      	ldr	r3, [r7, #4]
 8028820:	681b      	ldr	r3, [r3, #0]
 8028822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8028826:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8028828:	687b      	ldr	r3, [r7, #4]
 802882a:	2200      	movs	r2, #0
 802882c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802882e:	687b      	ldr	r3, [r7, #4]
 8028830:	2201      	movs	r2, #1
 8028832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8028836:	2300      	movs	r3, #0
}
 8028838:	4618      	mov	r0, r3
 802883a:	3708      	adds	r7, #8
 802883c:	46bd      	mov	sp, r7
 802883e:	bd80      	pop	{r7, pc}

08028840 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028840:	b580      	push	{r7, lr}
 8028842:	b088      	sub	sp, #32
 8028844:	af00      	add	r7, sp, #0
 8028846:	60f8      	str	r0, [r7, #12]
 8028848:	60b9      	str	r1, [r7, #8]
 802884a:	603b      	str	r3, [r7, #0]
 802884c:	4613      	mov	r3, r2
 802884e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028850:	2300      	movs	r3, #0
 8028852:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028854:	68fb      	ldr	r3, [r7, #12]
 8028856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802885a:	2b01      	cmp	r3, #1
 802885c:	d101      	bne.n	8028862 <HAL_SPI_Transmit+0x22>
 802885e:	2302      	movs	r3, #2
 8028860:	e11e      	b.n	8028aa0 <HAL_SPI_Transmit+0x260>
 8028862:	68fb      	ldr	r3, [r7, #12]
 8028864:	2201      	movs	r2, #1
 8028866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802886a:	f7fd fce1 	bl	8026230 <HAL_GetTick>
 802886e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8028870:	88fb      	ldrh	r3, [r7, #6]
 8028872:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028874:	68fb      	ldr	r3, [r7, #12]
 8028876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802887a:	b2db      	uxtb	r3, r3
 802887c:	2b01      	cmp	r3, #1
 802887e:	d002      	beq.n	8028886 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8028880:	2302      	movs	r3, #2
 8028882:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028884:	e103      	b.n	8028a8e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8028886:	68bb      	ldr	r3, [r7, #8]
 8028888:	2b00      	cmp	r3, #0
 802888a:	d002      	beq.n	8028892 <HAL_SPI_Transmit+0x52>
 802888c:	88fb      	ldrh	r3, [r7, #6]
 802888e:	2b00      	cmp	r3, #0
 8028890:	d102      	bne.n	8028898 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8028892:	2301      	movs	r3, #1
 8028894:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028896:	e0fa      	b.n	8028a8e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8028898:	68fb      	ldr	r3, [r7, #12]
 802889a:	2203      	movs	r2, #3
 802889c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80288a0:	68fb      	ldr	r3, [r7, #12]
 80288a2:	2200      	movs	r2, #0
 80288a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80288a6:	68fb      	ldr	r3, [r7, #12]
 80288a8:	68ba      	ldr	r2, [r7, #8]
 80288aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80288ac:	68fb      	ldr	r3, [r7, #12]
 80288ae:	88fa      	ldrh	r2, [r7, #6]
 80288b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80288b2:	68fb      	ldr	r3, [r7, #12]
 80288b4:	88fa      	ldrh	r2, [r7, #6]
 80288b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80288b8:	68fb      	ldr	r3, [r7, #12]
 80288ba:	2200      	movs	r2, #0
 80288bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80288be:	68fb      	ldr	r3, [r7, #12]
 80288c0:	2200      	movs	r2, #0
 80288c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80288c4:	68fb      	ldr	r3, [r7, #12]
 80288c6:	2200      	movs	r2, #0
 80288c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80288ca:	68fb      	ldr	r3, [r7, #12]
 80288cc:	2200      	movs	r2, #0
 80288ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80288d0:	68fb      	ldr	r3, [r7, #12]
 80288d2:	2200      	movs	r2, #0
 80288d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80288d6:	68fb      	ldr	r3, [r7, #12]
 80288d8:	689b      	ldr	r3, [r3, #8]
 80288da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80288de:	d107      	bne.n	80288f0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80288e0:	68fb      	ldr	r3, [r7, #12]
 80288e2:	681b      	ldr	r3, [r3, #0]
 80288e4:	681a      	ldr	r2, [r3, #0]
 80288e6:	68fb      	ldr	r3, [r7, #12]
 80288e8:	681b      	ldr	r3, [r3, #0]
 80288ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80288ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80288f0:	68fb      	ldr	r3, [r7, #12]
 80288f2:	681b      	ldr	r3, [r3, #0]
 80288f4:	681b      	ldr	r3, [r3, #0]
 80288f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80288fa:	2b40      	cmp	r3, #64	; 0x40
 80288fc:	d007      	beq.n	802890e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80288fe:	68fb      	ldr	r3, [r7, #12]
 8028900:	681b      	ldr	r3, [r3, #0]
 8028902:	681a      	ldr	r2, [r3, #0]
 8028904:	68fb      	ldr	r3, [r7, #12]
 8028906:	681b      	ldr	r3, [r3, #0]
 8028908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802890c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802890e:	68fb      	ldr	r3, [r7, #12]
 8028910:	68db      	ldr	r3, [r3, #12]
 8028912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028916:	d14b      	bne.n	80289b0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028918:	68fb      	ldr	r3, [r7, #12]
 802891a:	685b      	ldr	r3, [r3, #4]
 802891c:	2b00      	cmp	r3, #0
 802891e:	d002      	beq.n	8028926 <HAL_SPI_Transmit+0xe6>
 8028920:	8afb      	ldrh	r3, [r7, #22]
 8028922:	2b01      	cmp	r3, #1
 8028924:	d13e      	bne.n	80289a4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028926:	68fb      	ldr	r3, [r7, #12]
 8028928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802892a:	881a      	ldrh	r2, [r3, #0]
 802892c:	68fb      	ldr	r3, [r7, #12]
 802892e:	681b      	ldr	r3, [r3, #0]
 8028930:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8028932:	68fb      	ldr	r3, [r7, #12]
 8028934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028936:	1c9a      	adds	r2, r3, #2
 8028938:	68fb      	ldr	r3, [r7, #12]
 802893a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802893c:	68fb      	ldr	r3, [r7, #12]
 802893e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028940:	b29b      	uxth	r3, r3
 8028942:	3b01      	subs	r3, #1
 8028944:	b29a      	uxth	r2, r3
 8028946:	68fb      	ldr	r3, [r7, #12]
 8028948:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 802894a:	e02b      	b.n	80289a4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 802894c:	68fb      	ldr	r3, [r7, #12]
 802894e:	681b      	ldr	r3, [r3, #0]
 8028950:	689b      	ldr	r3, [r3, #8]
 8028952:	f003 0302 	and.w	r3, r3, #2
 8028956:	2b02      	cmp	r3, #2
 8028958:	d112      	bne.n	8028980 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802895a:	68fb      	ldr	r3, [r7, #12]
 802895c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802895e:	881a      	ldrh	r2, [r3, #0]
 8028960:	68fb      	ldr	r3, [r7, #12]
 8028962:	681b      	ldr	r3, [r3, #0]
 8028964:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028966:	68fb      	ldr	r3, [r7, #12]
 8028968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802896a:	1c9a      	adds	r2, r3, #2
 802896c:	68fb      	ldr	r3, [r7, #12]
 802896e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028970:	68fb      	ldr	r3, [r7, #12]
 8028972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028974:	b29b      	uxth	r3, r3
 8028976:	3b01      	subs	r3, #1
 8028978:	b29a      	uxth	r2, r3
 802897a:	68fb      	ldr	r3, [r7, #12]
 802897c:	86da      	strh	r2, [r3, #54]	; 0x36
 802897e:	e011      	b.n	80289a4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028980:	f7fd fc56 	bl	8026230 <HAL_GetTick>
 8028984:	4602      	mov	r2, r0
 8028986:	69bb      	ldr	r3, [r7, #24]
 8028988:	1ad3      	subs	r3, r2, r3
 802898a:	683a      	ldr	r2, [r7, #0]
 802898c:	429a      	cmp	r2, r3
 802898e:	d803      	bhi.n	8028998 <HAL_SPI_Transmit+0x158>
 8028990:	683b      	ldr	r3, [r7, #0]
 8028992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028996:	d102      	bne.n	802899e <HAL_SPI_Transmit+0x15e>
 8028998:	683b      	ldr	r3, [r7, #0]
 802899a:	2b00      	cmp	r3, #0
 802899c:	d102      	bne.n	80289a4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 802899e:	2303      	movs	r3, #3
 80289a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80289a2:	e074      	b.n	8028a8e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80289a4:	68fb      	ldr	r3, [r7, #12]
 80289a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80289a8:	b29b      	uxth	r3, r3
 80289aa:	2b00      	cmp	r3, #0
 80289ac:	d1ce      	bne.n	802894c <HAL_SPI_Transmit+0x10c>
 80289ae:	e04c      	b.n	8028a4a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80289b0:	68fb      	ldr	r3, [r7, #12]
 80289b2:	685b      	ldr	r3, [r3, #4]
 80289b4:	2b00      	cmp	r3, #0
 80289b6:	d002      	beq.n	80289be <HAL_SPI_Transmit+0x17e>
 80289b8:	8afb      	ldrh	r3, [r7, #22]
 80289ba:	2b01      	cmp	r3, #1
 80289bc:	d140      	bne.n	8028a40 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80289be:	68fb      	ldr	r3, [r7, #12]
 80289c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80289c2:	68fb      	ldr	r3, [r7, #12]
 80289c4:	681b      	ldr	r3, [r3, #0]
 80289c6:	330c      	adds	r3, #12
 80289c8:	7812      	ldrb	r2, [r2, #0]
 80289ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80289cc:	68fb      	ldr	r3, [r7, #12]
 80289ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289d0:	1c5a      	adds	r2, r3, #1
 80289d2:	68fb      	ldr	r3, [r7, #12]
 80289d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80289d6:	68fb      	ldr	r3, [r7, #12]
 80289d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80289da:	b29b      	uxth	r3, r3
 80289dc:	3b01      	subs	r3, #1
 80289de:	b29a      	uxth	r2, r3
 80289e0:	68fb      	ldr	r3, [r7, #12]
 80289e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80289e4:	e02c      	b.n	8028a40 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80289e6:	68fb      	ldr	r3, [r7, #12]
 80289e8:	681b      	ldr	r3, [r3, #0]
 80289ea:	689b      	ldr	r3, [r3, #8]
 80289ec:	f003 0302 	and.w	r3, r3, #2
 80289f0:	2b02      	cmp	r3, #2
 80289f2:	d113      	bne.n	8028a1c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80289f4:	68fb      	ldr	r3, [r7, #12]
 80289f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80289f8:	68fb      	ldr	r3, [r7, #12]
 80289fa:	681b      	ldr	r3, [r3, #0]
 80289fc:	330c      	adds	r3, #12
 80289fe:	7812      	ldrb	r2, [r2, #0]
 8028a00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8028a02:	68fb      	ldr	r3, [r7, #12]
 8028a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a06:	1c5a      	adds	r2, r3, #1
 8028a08:	68fb      	ldr	r3, [r7, #12]
 8028a0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028a0c:	68fb      	ldr	r3, [r7, #12]
 8028a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028a10:	b29b      	uxth	r3, r3
 8028a12:	3b01      	subs	r3, #1
 8028a14:	b29a      	uxth	r2, r3
 8028a16:	68fb      	ldr	r3, [r7, #12]
 8028a18:	86da      	strh	r2, [r3, #54]	; 0x36
 8028a1a:	e011      	b.n	8028a40 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028a1c:	f7fd fc08 	bl	8026230 <HAL_GetTick>
 8028a20:	4602      	mov	r2, r0
 8028a22:	69bb      	ldr	r3, [r7, #24]
 8028a24:	1ad3      	subs	r3, r2, r3
 8028a26:	683a      	ldr	r2, [r7, #0]
 8028a28:	429a      	cmp	r2, r3
 8028a2a:	d803      	bhi.n	8028a34 <HAL_SPI_Transmit+0x1f4>
 8028a2c:	683b      	ldr	r3, [r7, #0]
 8028a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028a32:	d102      	bne.n	8028a3a <HAL_SPI_Transmit+0x1fa>
 8028a34:	683b      	ldr	r3, [r7, #0]
 8028a36:	2b00      	cmp	r3, #0
 8028a38:	d102      	bne.n	8028a40 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8028a3a:	2303      	movs	r3, #3
 8028a3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028a3e:	e026      	b.n	8028a8e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8028a40:	68fb      	ldr	r3, [r7, #12]
 8028a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028a44:	b29b      	uxth	r3, r3
 8028a46:	2b00      	cmp	r3, #0
 8028a48:	d1cd      	bne.n	80289e6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028a4a:	69ba      	ldr	r2, [r7, #24]
 8028a4c:	6839      	ldr	r1, [r7, #0]
 8028a4e:	68f8      	ldr	r0, [r7, #12]
 8028a50:	f000 fba4 	bl	802919c <SPI_EndRxTxTransaction>
 8028a54:	4603      	mov	r3, r0
 8028a56:	2b00      	cmp	r3, #0
 8028a58:	d002      	beq.n	8028a60 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028a5a:	68fb      	ldr	r3, [r7, #12]
 8028a5c:	2220      	movs	r2, #32
 8028a5e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028a60:	68fb      	ldr	r3, [r7, #12]
 8028a62:	689b      	ldr	r3, [r3, #8]
 8028a64:	2b00      	cmp	r3, #0
 8028a66:	d10a      	bne.n	8028a7e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028a68:	2300      	movs	r3, #0
 8028a6a:	613b      	str	r3, [r7, #16]
 8028a6c:	68fb      	ldr	r3, [r7, #12]
 8028a6e:	681b      	ldr	r3, [r3, #0]
 8028a70:	68db      	ldr	r3, [r3, #12]
 8028a72:	613b      	str	r3, [r7, #16]
 8028a74:	68fb      	ldr	r3, [r7, #12]
 8028a76:	681b      	ldr	r3, [r3, #0]
 8028a78:	689b      	ldr	r3, [r3, #8]
 8028a7a:	613b      	str	r3, [r7, #16]
 8028a7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028a7e:	68fb      	ldr	r3, [r7, #12]
 8028a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028a82:	2b00      	cmp	r3, #0
 8028a84:	d002      	beq.n	8028a8c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8028a86:	2301      	movs	r3, #1
 8028a88:	77fb      	strb	r3, [r7, #31]
 8028a8a:	e000      	b.n	8028a8e <HAL_SPI_Transmit+0x24e>
  }

error:
 8028a8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028a8e:	68fb      	ldr	r3, [r7, #12]
 8028a90:	2201      	movs	r2, #1
 8028a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8028a96:	68fb      	ldr	r3, [r7, #12]
 8028a98:	2200      	movs	r2, #0
 8028a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028a9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8028aa0:	4618      	mov	r0, r3
 8028aa2:	3720      	adds	r7, #32
 8028aa4:	46bd      	mov	sp, r7
 8028aa6:	bd80      	pop	{r7, pc}

08028aa8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028aa8:	b580      	push	{r7, lr}
 8028aaa:	b088      	sub	sp, #32
 8028aac:	af02      	add	r7, sp, #8
 8028aae:	60f8      	str	r0, [r7, #12]
 8028ab0:	60b9      	str	r1, [r7, #8]
 8028ab2:	603b      	str	r3, [r7, #0]
 8028ab4:	4613      	mov	r3, r2
 8028ab6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028ab8:	2300      	movs	r3, #0
 8028aba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8028abc:	68fb      	ldr	r3, [r7, #12]
 8028abe:	685b      	ldr	r3, [r3, #4]
 8028ac0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028ac4:	d112      	bne.n	8028aec <HAL_SPI_Receive+0x44>
 8028ac6:	68fb      	ldr	r3, [r7, #12]
 8028ac8:	689b      	ldr	r3, [r3, #8]
 8028aca:	2b00      	cmp	r3, #0
 8028acc:	d10e      	bne.n	8028aec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8028ace:	68fb      	ldr	r3, [r7, #12]
 8028ad0:	2204      	movs	r2, #4
 8028ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8028ad6:	88fa      	ldrh	r2, [r7, #6]
 8028ad8:	683b      	ldr	r3, [r7, #0]
 8028ada:	9300      	str	r3, [sp, #0]
 8028adc:	4613      	mov	r3, r2
 8028ade:	68ba      	ldr	r2, [r7, #8]
 8028ae0:	68b9      	ldr	r1, [r7, #8]
 8028ae2:	68f8      	ldr	r0, [r7, #12]
 8028ae4:	f000 f8e9 	bl	8028cba <HAL_SPI_TransmitReceive>
 8028ae8:	4603      	mov	r3, r0
 8028aea:	e0e2      	b.n	8028cb2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028aec:	68fb      	ldr	r3, [r7, #12]
 8028aee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028af2:	2b01      	cmp	r3, #1
 8028af4:	d101      	bne.n	8028afa <HAL_SPI_Receive+0x52>
 8028af6:	2302      	movs	r3, #2
 8028af8:	e0db      	b.n	8028cb2 <HAL_SPI_Receive+0x20a>
 8028afa:	68fb      	ldr	r3, [r7, #12]
 8028afc:	2201      	movs	r2, #1
 8028afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028b02:	f7fd fb95 	bl	8026230 <HAL_GetTick>
 8028b06:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028b08:	68fb      	ldr	r3, [r7, #12]
 8028b0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028b0e:	b2db      	uxtb	r3, r3
 8028b10:	2b01      	cmp	r3, #1
 8028b12:	d002      	beq.n	8028b1a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8028b14:	2302      	movs	r3, #2
 8028b16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028b18:	e0c2      	b.n	8028ca0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8028b1a:	68bb      	ldr	r3, [r7, #8]
 8028b1c:	2b00      	cmp	r3, #0
 8028b1e:	d002      	beq.n	8028b26 <HAL_SPI_Receive+0x7e>
 8028b20:	88fb      	ldrh	r3, [r7, #6]
 8028b22:	2b00      	cmp	r3, #0
 8028b24:	d102      	bne.n	8028b2c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8028b26:	2301      	movs	r3, #1
 8028b28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028b2a:	e0b9      	b.n	8028ca0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8028b2c:	68fb      	ldr	r3, [r7, #12]
 8028b2e:	2204      	movs	r2, #4
 8028b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028b34:	68fb      	ldr	r3, [r7, #12]
 8028b36:	2200      	movs	r2, #0
 8028b38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8028b3a:	68fb      	ldr	r3, [r7, #12]
 8028b3c:	68ba      	ldr	r2, [r7, #8]
 8028b3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8028b40:	68fb      	ldr	r3, [r7, #12]
 8028b42:	88fa      	ldrh	r2, [r7, #6]
 8028b44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8028b46:	68fb      	ldr	r3, [r7, #12]
 8028b48:	88fa      	ldrh	r2, [r7, #6]
 8028b4a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8028b4c:	68fb      	ldr	r3, [r7, #12]
 8028b4e:	2200      	movs	r2, #0
 8028b50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8028b52:	68fb      	ldr	r3, [r7, #12]
 8028b54:	2200      	movs	r2, #0
 8028b56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8028b58:	68fb      	ldr	r3, [r7, #12]
 8028b5a:	2200      	movs	r2, #0
 8028b5c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8028b5e:	68fb      	ldr	r3, [r7, #12]
 8028b60:	2200      	movs	r2, #0
 8028b62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028b64:	68fb      	ldr	r3, [r7, #12]
 8028b66:	2200      	movs	r2, #0
 8028b68:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028b6a:	68fb      	ldr	r3, [r7, #12]
 8028b6c:	689b      	ldr	r3, [r3, #8]
 8028b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028b72:	d107      	bne.n	8028b84 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8028b74:	68fb      	ldr	r3, [r7, #12]
 8028b76:	681b      	ldr	r3, [r3, #0]
 8028b78:	681a      	ldr	r2, [r3, #0]
 8028b7a:	68fb      	ldr	r3, [r7, #12]
 8028b7c:	681b      	ldr	r3, [r3, #0]
 8028b7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8028b82:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028b84:	68fb      	ldr	r3, [r7, #12]
 8028b86:	681b      	ldr	r3, [r3, #0]
 8028b88:	681b      	ldr	r3, [r3, #0]
 8028b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028b8e:	2b40      	cmp	r3, #64	; 0x40
 8028b90:	d007      	beq.n	8028ba2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028b92:	68fb      	ldr	r3, [r7, #12]
 8028b94:	681b      	ldr	r3, [r3, #0]
 8028b96:	681a      	ldr	r2, [r3, #0]
 8028b98:	68fb      	ldr	r3, [r7, #12]
 8028b9a:	681b      	ldr	r3, [r3, #0]
 8028b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028ba0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8028ba2:	68fb      	ldr	r3, [r7, #12]
 8028ba4:	68db      	ldr	r3, [r3, #12]
 8028ba6:	2b00      	cmp	r3, #0
 8028ba8:	d162      	bne.n	8028c70 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8028baa:	e02e      	b.n	8028c0a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028bac:	68fb      	ldr	r3, [r7, #12]
 8028bae:	681b      	ldr	r3, [r3, #0]
 8028bb0:	689b      	ldr	r3, [r3, #8]
 8028bb2:	f003 0301 	and.w	r3, r3, #1
 8028bb6:	2b01      	cmp	r3, #1
 8028bb8:	d115      	bne.n	8028be6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8028bba:	68fb      	ldr	r3, [r7, #12]
 8028bbc:	681b      	ldr	r3, [r3, #0]
 8028bbe:	f103 020c 	add.w	r2, r3, #12
 8028bc2:	68fb      	ldr	r3, [r7, #12]
 8028bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028bc6:	7812      	ldrb	r2, [r2, #0]
 8028bc8:	b2d2      	uxtb	r2, r2
 8028bca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8028bcc:	68fb      	ldr	r3, [r7, #12]
 8028bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028bd0:	1c5a      	adds	r2, r3, #1
 8028bd2:	68fb      	ldr	r3, [r7, #12]
 8028bd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028bd6:	68fb      	ldr	r3, [r7, #12]
 8028bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028bda:	b29b      	uxth	r3, r3
 8028bdc:	3b01      	subs	r3, #1
 8028bde:	b29a      	uxth	r2, r3
 8028be0:	68fb      	ldr	r3, [r7, #12]
 8028be2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028be4:	e011      	b.n	8028c0a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028be6:	f7fd fb23 	bl	8026230 <HAL_GetTick>
 8028bea:	4602      	mov	r2, r0
 8028bec:	693b      	ldr	r3, [r7, #16]
 8028bee:	1ad3      	subs	r3, r2, r3
 8028bf0:	683a      	ldr	r2, [r7, #0]
 8028bf2:	429a      	cmp	r2, r3
 8028bf4:	d803      	bhi.n	8028bfe <HAL_SPI_Receive+0x156>
 8028bf6:	683b      	ldr	r3, [r7, #0]
 8028bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028bfc:	d102      	bne.n	8028c04 <HAL_SPI_Receive+0x15c>
 8028bfe:	683b      	ldr	r3, [r7, #0]
 8028c00:	2b00      	cmp	r3, #0
 8028c02:	d102      	bne.n	8028c0a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8028c04:	2303      	movs	r3, #3
 8028c06:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028c08:	e04a      	b.n	8028ca0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028c0a:	68fb      	ldr	r3, [r7, #12]
 8028c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028c0e:	b29b      	uxth	r3, r3
 8028c10:	2b00      	cmp	r3, #0
 8028c12:	d1cb      	bne.n	8028bac <HAL_SPI_Receive+0x104>
 8028c14:	e031      	b.n	8028c7a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028c16:	68fb      	ldr	r3, [r7, #12]
 8028c18:	681b      	ldr	r3, [r3, #0]
 8028c1a:	689b      	ldr	r3, [r3, #8]
 8028c1c:	f003 0301 	and.w	r3, r3, #1
 8028c20:	2b01      	cmp	r3, #1
 8028c22:	d113      	bne.n	8028c4c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028c24:	68fb      	ldr	r3, [r7, #12]
 8028c26:	681b      	ldr	r3, [r3, #0]
 8028c28:	68da      	ldr	r2, [r3, #12]
 8028c2a:	68fb      	ldr	r3, [r7, #12]
 8028c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028c2e:	b292      	uxth	r2, r2
 8028c30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028c32:	68fb      	ldr	r3, [r7, #12]
 8028c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028c36:	1c9a      	adds	r2, r3, #2
 8028c38:	68fb      	ldr	r3, [r7, #12]
 8028c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028c3c:	68fb      	ldr	r3, [r7, #12]
 8028c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028c40:	b29b      	uxth	r3, r3
 8028c42:	3b01      	subs	r3, #1
 8028c44:	b29a      	uxth	r2, r3
 8028c46:	68fb      	ldr	r3, [r7, #12]
 8028c48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028c4a:	e011      	b.n	8028c70 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028c4c:	f7fd faf0 	bl	8026230 <HAL_GetTick>
 8028c50:	4602      	mov	r2, r0
 8028c52:	693b      	ldr	r3, [r7, #16]
 8028c54:	1ad3      	subs	r3, r2, r3
 8028c56:	683a      	ldr	r2, [r7, #0]
 8028c58:	429a      	cmp	r2, r3
 8028c5a:	d803      	bhi.n	8028c64 <HAL_SPI_Receive+0x1bc>
 8028c5c:	683b      	ldr	r3, [r7, #0]
 8028c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028c62:	d102      	bne.n	8028c6a <HAL_SPI_Receive+0x1c2>
 8028c64:	683b      	ldr	r3, [r7, #0]
 8028c66:	2b00      	cmp	r3, #0
 8028c68:	d102      	bne.n	8028c70 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8028c6a:	2303      	movs	r3, #3
 8028c6c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028c6e:	e017      	b.n	8028ca0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028c70:	68fb      	ldr	r3, [r7, #12]
 8028c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028c74:	b29b      	uxth	r3, r3
 8028c76:	2b00      	cmp	r3, #0
 8028c78:	d1cd      	bne.n	8028c16 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028c7a:	693a      	ldr	r2, [r7, #16]
 8028c7c:	6839      	ldr	r1, [r7, #0]
 8028c7e:	68f8      	ldr	r0, [r7, #12]
 8028c80:	f000 fa27 	bl	80290d2 <SPI_EndRxTransaction>
 8028c84:	4603      	mov	r3, r0
 8028c86:	2b00      	cmp	r3, #0
 8028c88:	d002      	beq.n	8028c90 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028c8a:	68fb      	ldr	r3, [r7, #12]
 8028c8c:	2220      	movs	r2, #32
 8028c8e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028c90:	68fb      	ldr	r3, [r7, #12]
 8028c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028c94:	2b00      	cmp	r3, #0
 8028c96:	d002      	beq.n	8028c9e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8028c98:	2301      	movs	r3, #1
 8028c9a:	75fb      	strb	r3, [r7, #23]
 8028c9c:	e000      	b.n	8028ca0 <HAL_SPI_Receive+0x1f8>
  }

error :
 8028c9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028ca0:	68fb      	ldr	r3, [r7, #12]
 8028ca2:	2201      	movs	r2, #1
 8028ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028ca8:	68fb      	ldr	r3, [r7, #12]
 8028caa:	2200      	movs	r2, #0
 8028cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8028cb2:	4618      	mov	r0, r3
 8028cb4:	3718      	adds	r7, #24
 8028cb6:	46bd      	mov	sp, r7
 8028cb8:	bd80      	pop	{r7, pc}

08028cba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8028cba:	b580      	push	{r7, lr}
 8028cbc:	b08c      	sub	sp, #48	; 0x30
 8028cbe:	af00      	add	r7, sp, #0
 8028cc0:	60f8      	str	r0, [r7, #12]
 8028cc2:	60b9      	str	r1, [r7, #8]
 8028cc4:	607a      	str	r2, [r7, #4]
 8028cc6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8028cc8:	2301      	movs	r3, #1
 8028cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8028ccc:	2300      	movs	r3, #0
 8028cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028cd2:	68fb      	ldr	r3, [r7, #12]
 8028cd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028cd8:	2b01      	cmp	r3, #1
 8028cda:	d101      	bne.n	8028ce0 <HAL_SPI_TransmitReceive+0x26>
 8028cdc:	2302      	movs	r3, #2
 8028cde:	e18a      	b.n	8028ff6 <HAL_SPI_TransmitReceive+0x33c>
 8028ce0:	68fb      	ldr	r3, [r7, #12]
 8028ce2:	2201      	movs	r2, #1
 8028ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028ce8:	f7fd faa2 	bl	8026230 <HAL_GetTick>
 8028cec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8028cee:	68fb      	ldr	r3, [r7, #12]
 8028cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8028cf8:	68fb      	ldr	r3, [r7, #12]
 8028cfa:	685b      	ldr	r3, [r3, #4]
 8028cfc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8028cfe:	887b      	ldrh	r3, [r7, #2]
 8028d00:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8028d02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028d06:	2b01      	cmp	r3, #1
 8028d08:	d00f      	beq.n	8028d2a <HAL_SPI_TransmitReceive+0x70>
 8028d0a:	69fb      	ldr	r3, [r7, #28]
 8028d0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028d10:	d107      	bne.n	8028d22 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8028d12:	68fb      	ldr	r3, [r7, #12]
 8028d14:	689b      	ldr	r3, [r3, #8]
 8028d16:	2b00      	cmp	r3, #0
 8028d18:	d103      	bne.n	8028d22 <HAL_SPI_TransmitReceive+0x68>
 8028d1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028d1e:	2b04      	cmp	r3, #4
 8028d20:	d003      	beq.n	8028d2a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8028d22:	2302      	movs	r3, #2
 8028d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028d28:	e15b      	b.n	8028fe2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8028d2a:	68bb      	ldr	r3, [r7, #8]
 8028d2c:	2b00      	cmp	r3, #0
 8028d2e:	d005      	beq.n	8028d3c <HAL_SPI_TransmitReceive+0x82>
 8028d30:	687b      	ldr	r3, [r7, #4]
 8028d32:	2b00      	cmp	r3, #0
 8028d34:	d002      	beq.n	8028d3c <HAL_SPI_TransmitReceive+0x82>
 8028d36:	887b      	ldrh	r3, [r7, #2]
 8028d38:	2b00      	cmp	r3, #0
 8028d3a:	d103      	bne.n	8028d44 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8028d3c:	2301      	movs	r3, #1
 8028d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028d42:	e14e      	b.n	8028fe2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8028d44:	68fb      	ldr	r3, [r7, #12]
 8028d46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028d4a:	b2db      	uxtb	r3, r3
 8028d4c:	2b04      	cmp	r3, #4
 8028d4e:	d003      	beq.n	8028d58 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8028d50:	68fb      	ldr	r3, [r7, #12]
 8028d52:	2205      	movs	r2, #5
 8028d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028d58:	68fb      	ldr	r3, [r7, #12]
 8028d5a:	2200      	movs	r2, #0
 8028d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8028d5e:	68fb      	ldr	r3, [r7, #12]
 8028d60:	687a      	ldr	r2, [r7, #4]
 8028d62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8028d64:	68fb      	ldr	r3, [r7, #12]
 8028d66:	887a      	ldrh	r2, [r7, #2]
 8028d68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8028d6a:	68fb      	ldr	r3, [r7, #12]
 8028d6c:	887a      	ldrh	r2, [r7, #2]
 8028d6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8028d70:	68fb      	ldr	r3, [r7, #12]
 8028d72:	68ba      	ldr	r2, [r7, #8]
 8028d74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8028d76:	68fb      	ldr	r3, [r7, #12]
 8028d78:	887a      	ldrh	r2, [r7, #2]
 8028d7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8028d7c:	68fb      	ldr	r3, [r7, #12]
 8028d7e:	887a      	ldrh	r2, [r7, #2]
 8028d80:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8028d82:	68fb      	ldr	r3, [r7, #12]
 8028d84:	2200      	movs	r2, #0
 8028d86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028d88:	68fb      	ldr	r3, [r7, #12]
 8028d8a:	2200      	movs	r2, #0
 8028d8c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028d8e:	68fb      	ldr	r3, [r7, #12]
 8028d90:	681b      	ldr	r3, [r3, #0]
 8028d92:	681b      	ldr	r3, [r3, #0]
 8028d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028d98:	2b40      	cmp	r3, #64	; 0x40
 8028d9a:	d007      	beq.n	8028dac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028d9c:	68fb      	ldr	r3, [r7, #12]
 8028d9e:	681b      	ldr	r3, [r3, #0]
 8028da0:	681a      	ldr	r2, [r3, #0]
 8028da2:	68fb      	ldr	r3, [r7, #12]
 8028da4:	681b      	ldr	r3, [r3, #0]
 8028da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028daa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028dac:	68fb      	ldr	r3, [r7, #12]
 8028dae:	68db      	ldr	r3, [r3, #12]
 8028db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028db4:	d178      	bne.n	8028ea8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028db6:	68fb      	ldr	r3, [r7, #12]
 8028db8:	685b      	ldr	r3, [r3, #4]
 8028dba:	2b00      	cmp	r3, #0
 8028dbc:	d002      	beq.n	8028dc4 <HAL_SPI_TransmitReceive+0x10a>
 8028dbe:	8b7b      	ldrh	r3, [r7, #26]
 8028dc0:	2b01      	cmp	r3, #1
 8028dc2:	d166      	bne.n	8028e92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028dc4:	68fb      	ldr	r3, [r7, #12]
 8028dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028dc8:	881a      	ldrh	r2, [r3, #0]
 8028dca:	68fb      	ldr	r3, [r7, #12]
 8028dcc:	681b      	ldr	r3, [r3, #0]
 8028dce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8028dd0:	68fb      	ldr	r3, [r7, #12]
 8028dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028dd4:	1c9a      	adds	r2, r3, #2
 8028dd6:	68fb      	ldr	r3, [r7, #12]
 8028dd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028dda:	68fb      	ldr	r3, [r7, #12]
 8028ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028dde:	b29b      	uxth	r3, r3
 8028de0:	3b01      	subs	r3, #1
 8028de2:	b29a      	uxth	r2, r3
 8028de4:	68fb      	ldr	r3, [r7, #12]
 8028de6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028de8:	e053      	b.n	8028e92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028dea:	68fb      	ldr	r3, [r7, #12]
 8028dec:	681b      	ldr	r3, [r3, #0]
 8028dee:	689b      	ldr	r3, [r3, #8]
 8028df0:	f003 0302 	and.w	r3, r3, #2
 8028df4:	2b02      	cmp	r3, #2
 8028df6:	d11b      	bne.n	8028e30 <HAL_SPI_TransmitReceive+0x176>
 8028df8:	68fb      	ldr	r3, [r7, #12]
 8028dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028dfc:	b29b      	uxth	r3, r3
 8028dfe:	2b00      	cmp	r3, #0
 8028e00:	d016      	beq.n	8028e30 <HAL_SPI_TransmitReceive+0x176>
 8028e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028e04:	2b01      	cmp	r3, #1
 8028e06:	d113      	bne.n	8028e30 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028e08:	68fb      	ldr	r3, [r7, #12]
 8028e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e0c:	881a      	ldrh	r2, [r3, #0]
 8028e0e:	68fb      	ldr	r3, [r7, #12]
 8028e10:	681b      	ldr	r3, [r3, #0]
 8028e12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028e14:	68fb      	ldr	r3, [r7, #12]
 8028e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e18:	1c9a      	adds	r2, r3, #2
 8028e1a:	68fb      	ldr	r3, [r7, #12]
 8028e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028e1e:	68fb      	ldr	r3, [r7, #12]
 8028e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028e22:	b29b      	uxth	r3, r3
 8028e24:	3b01      	subs	r3, #1
 8028e26:	b29a      	uxth	r2, r3
 8028e28:	68fb      	ldr	r3, [r7, #12]
 8028e2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028e2c:	2300      	movs	r3, #0
 8028e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028e30:	68fb      	ldr	r3, [r7, #12]
 8028e32:	681b      	ldr	r3, [r3, #0]
 8028e34:	689b      	ldr	r3, [r3, #8]
 8028e36:	f003 0301 	and.w	r3, r3, #1
 8028e3a:	2b01      	cmp	r3, #1
 8028e3c:	d119      	bne.n	8028e72 <HAL_SPI_TransmitReceive+0x1b8>
 8028e3e:	68fb      	ldr	r3, [r7, #12]
 8028e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028e42:	b29b      	uxth	r3, r3
 8028e44:	2b00      	cmp	r3, #0
 8028e46:	d014      	beq.n	8028e72 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028e48:	68fb      	ldr	r3, [r7, #12]
 8028e4a:	681b      	ldr	r3, [r3, #0]
 8028e4c:	68da      	ldr	r2, [r3, #12]
 8028e4e:	68fb      	ldr	r3, [r7, #12]
 8028e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028e52:	b292      	uxth	r2, r2
 8028e54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028e56:	68fb      	ldr	r3, [r7, #12]
 8028e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028e5a:	1c9a      	adds	r2, r3, #2
 8028e5c:	68fb      	ldr	r3, [r7, #12]
 8028e5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028e60:	68fb      	ldr	r3, [r7, #12]
 8028e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028e64:	b29b      	uxth	r3, r3
 8028e66:	3b01      	subs	r3, #1
 8028e68:	b29a      	uxth	r2, r3
 8028e6a:	68fb      	ldr	r3, [r7, #12]
 8028e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028e6e:	2301      	movs	r3, #1
 8028e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8028e72:	f7fd f9dd 	bl	8026230 <HAL_GetTick>
 8028e76:	4602      	mov	r2, r0
 8028e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028e7a:	1ad3      	subs	r3, r2, r3
 8028e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028e7e:	429a      	cmp	r2, r3
 8028e80:	d807      	bhi.n	8028e92 <HAL_SPI_TransmitReceive+0x1d8>
 8028e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028e88:	d003      	beq.n	8028e92 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8028e8a:	2303      	movs	r3, #3
 8028e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028e90:	e0a7      	b.n	8028fe2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028e92:	68fb      	ldr	r3, [r7, #12]
 8028e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028e96:	b29b      	uxth	r3, r3
 8028e98:	2b00      	cmp	r3, #0
 8028e9a:	d1a6      	bne.n	8028dea <HAL_SPI_TransmitReceive+0x130>
 8028e9c:	68fb      	ldr	r3, [r7, #12]
 8028e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028ea0:	b29b      	uxth	r3, r3
 8028ea2:	2b00      	cmp	r3, #0
 8028ea4:	d1a1      	bne.n	8028dea <HAL_SPI_TransmitReceive+0x130>
 8028ea6:	e07c      	b.n	8028fa2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028ea8:	68fb      	ldr	r3, [r7, #12]
 8028eaa:	685b      	ldr	r3, [r3, #4]
 8028eac:	2b00      	cmp	r3, #0
 8028eae:	d002      	beq.n	8028eb6 <HAL_SPI_TransmitReceive+0x1fc>
 8028eb0:	8b7b      	ldrh	r3, [r7, #26]
 8028eb2:	2b01      	cmp	r3, #1
 8028eb4:	d16b      	bne.n	8028f8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028eb6:	68fb      	ldr	r3, [r7, #12]
 8028eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028eba:	68fb      	ldr	r3, [r7, #12]
 8028ebc:	681b      	ldr	r3, [r3, #0]
 8028ebe:	330c      	adds	r3, #12
 8028ec0:	7812      	ldrb	r2, [r2, #0]
 8028ec2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028ec4:	68fb      	ldr	r3, [r7, #12]
 8028ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ec8:	1c5a      	adds	r2, r3, #1
 8028eca:	68fb      	ldr	r3, [r7, #12]
 8028ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028ece:	68fb      	ldr	r3, [r7, #12]
 8028ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028ed2:	b29b      	uxth	r3, r3
 8028ed4:	3b01      	subs	r3, #1
 8028ed6:	b29a      	uxth	r2, r3
 8028ed8:	68fb      	ldr	r3, [r7, #12]
 8028eda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028edc:	e057      	b.n	8028f8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028ede:	68fb      	ldr	r3, [r7, #12]
 8028ee0:	681b      	ldr	r3, [r3, #0]
 8028ee2:	689b      	ldr	r3, [r3, #8]
 8028ee4:	f003 0302 	and.w	r3, r3, #2
 8028ee8:	2b02      	cmp	r3, #2
 8028eea:	d11c      	bne.n	8028f26 <HAL_SPI_TransmitReceive+0x26c>
 8028eec:	68fb      	ldr	r3, [r7, #12]
 8028eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028ef0:	b29b      	uxth	r3, r3
 8028ef2:	2b00      	cmp	r3, #0
 8028ef4:	d017      	beq.n	8028f26 <HAL_SPI_TransmitReceive+0x26c>
 8028ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028ef8:	2b01      	cmp	r3, #1
 8028efa:	d114      	bne.n	8028f26 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8028efc:	68fb      	ldr	r3, [r7, #12]
 8028efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028f00:	68fb      	ldr	r3, [r7, #12]
 8028f02:	681b      	ldr	r3, [r3, #0]
 8028f04:	330c      	adds	r3, #12
 8028f06:	7812      	ldrb	r2, [r2, #0]
 8028f08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8028f0a:	68fb      	ldr	r3, [r7, #12]
 8028f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028f0e:	1c5a      	adds	r2, r3, #1
 8028f10:	68fb      	ldr	r3, [r7, #12]
 8028f12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028f14:	68fb      	ldr	r3, [r7, #12]
 8028f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028f18:	b29b      	uxth	r3, r3
 8028f1a:	3b01      	subs	r3, #1
 8028f1c:	b29a      	uxth	r2, r3
 8028f1e:	68fb      	ldr	r3, [r7, #12]
 8028f20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028f22:	2300      	movs	r3, #0
 8028f24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028f26:	68fb      	ldr	r3, [r7, #12]
 8028f28:	681b      	ldr	r3, [r3, #0]
 8028f2a:	689b      	ldr	r3, [r3, #8]
 8028f2c:	f003 0301 	and.w	r3, r3, #1
 8028f30:	2b01      	cmp	r3, #1
 8028f32:	d119      	bne.n	8028f68 <HAL_SPI_TransmitReceive+0x2ae>
 8028f34:	68fb      	ldr	r3, [r7, #12]
 8028f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028f38:	b29b      	uxth	r3, r3
 8028f3a:	2b00      	cmp	r3, #0
 8028f3c:	d014      	beq.n	8028f68 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8028f3e:	68fb      	ldr	r3, [r7, #12]
 8028f40:	681b      	ldr	r3, [r3, #0]
 8028f42:	68da      	ldr	r2, [r3, #12]
 8028f44:	68fb      	ldr	r3, [r7, #12]
 8028f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028f48:	b2d2      	uxtb	r2, r2
 8028f4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8028f4c:	68fb      	ldr	r3, [r7, #12]
 8028f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028f50:	1c5a      	adds	r2, r3, #1
 8028f52:	68fb      	ldr	r3, [r7, #12]
 8028f54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028f56:	68fb      	ldr	r3, [r7, #12]
 8028f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028f5a:	b29b      	uxth	r3, r3
 8028f5c:	3b01      	subs	r3, #1
 8028f5e:	b29a      	uxth	r2, r3
 8028f60:	68fb      	ldr	r3, [r7, #12]
 8028f62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028f64:	2301      	movs	r3, #1
 8028f66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8028f68:	f7fd f962 	bl	8026230 <HAL_GetTick>
 8028f6c:	4602      	mov	r2, r0
 8028f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f70:	1ad3      	subs	r3, r2, r3
 8028f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028f74:	429a      	cmp	r2, r3
 8028f76:	d803      	bhi.n	8028f80 <HAL_SPI_TransmitReceive+0x2c6>
 8028f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028f7e:	d102      	bne.n	8028f86 <HAL_SPI_TransmitReceive+0x2cc>
 8028f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028f82:	2b00      	cmp	r3, #0
 8028f84:	d103      	bne.n	8028f8e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8028f86:	2303      	movs	r3, #3
 8028f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028f8c:	e029      	b.n	8028fe2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028f8e:	68fb      	ldr	r3, [r7, #12]
 8028f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028f92:	b29b      	uxth	r3, r3
 8028f94:	2b00      	cmp	r3, #0
 8028f96:	d1a2      	bne.n	8028ede <HAL_SPI_TransmitReceive+0x224>
 8028f98:	68fb      	ldr	r3, [r7, #12]
 8028f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028f9c:	b29b      	uxth	r3, r3
 8028f9e:	2b00      	cmp	r3, #0
 8028fa0:	d19d      	bne.n	8028ede <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028fa4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8028fa6:	68f8      	ldr	r0, [r7, #12]
 8028fa8:	f000 f8f8 	bl	802919c <SPI_EndRxTxTransaction>
 8028fac:	4603      	mov	r3, r0
 8028fae:	2b00      	cmp	r3, #0
 8028fb0:	d006      	beq.n	8028fc0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8028fb2:	2301      	movs	r3, #1
 8028fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028fb8:	68fb      	ldr	r3, [r7, #12]
 8028fba:	2220      	movs	r2, #32
 8028fbc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8028fbe:	e010      	b.n	8028fe2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028fc0:	68fb      	ldr	r3, [r7, #12]
 8028fc2:	689b      	ldr	r3, [r3, #8]
 8028fc4:	2b00      	cmp	r3, #0
 8028fc6:	d10b      	bne.n	8028fe0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028fc8:	2300      	movs	r3, #0
 8028fca:	617b      	str	r3, [r7, #20]
 8028fcc:	68fb      	ldr	r3, [r7, #12]
 8028fce:	681b      	ldr	r3, [r3, #0]
 8028fd0:	68db      	ldr	r3, [r3, #12]
 8028fd2:	617b      	str	r3, [r7, #20]
 8028fd4:	68fb      	ldr	r3, [r7, #12]
 8028fd6:	681b      	ldr	r3, [r3, #0]
 8028fd8:	689b      	ldr	r3, [r3, #8]
 8028fda:	617b      	str	r3, [r7, #20]
 8028fdc:	697b      	ldr	r3, [r7, #20]
 8028fde:	e000      	b.n	8028fe2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8028fe0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028fe2:	68fb      	ldr	r3, [r7, #12]
 8028fe4:	2201      	movs	r2, #1
 8028fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028fea:	68fb      	ldr	r3, [r7, #12]
 8028fec:	2200      	movs	r2, #0
 8028fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8028ff6:	4618      	mov	r0, r3
 8028ff8:	3730      	adds	r7, #48	; 0x30
 8028ffa:	46bd      	mov	sp, r7
 8028ffc:	bd80      	pop	{r7, pc}

08028ffe <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8028ffe:	b580      	push	{r7, lr}
 8029000:	b084      	sub	sp, #16
 8029002:	af00      	add	r7, sp, #0
 8029004:	60f8      	str	r0, [r7, #12]
 8029006:	60b9      	str	r1, [r7, #8]
 8029008:	603b      	str	r3, [r7, #0]
 802900a:	4613      	mov	r3, r2
 802900c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802900e:	e04c      	b.n	80290aa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8029010:	683b      	ldr	r3, [r7, #0]
 8029012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029016:	d048      	beq.n	80290aa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8029018:	f7fd f90a 	bl	8026230 <HAL_GetTick>
 802901c:	4602      	mov	r2, r0
 802901e:	69bb      	ldr	r3, [r7, #24]
 8029020:	1ad3      	subs	r3, r2, r3
 8029022:	683a      	ldr	r2, [r7, #0]
 8029024:	429a      	cmp	r2, r3
 8029026:	d902      	bls.n	802902e <SPI_WaitFlagStateUntilTimeout+0x30>
 8029028:	683b      	ldr	r3, [r7, #0]
 802902a:	2b00      	cmp	r3, #0
 802902c:	d13d      	bne.n	80290aa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802902e:	68fb      	ldr	r3, [r7, #12]
 8029030:	681b      	ldr	r3, [r3, #0]
 8029032:	685a      	ldr	r2, [r3, #4]
 8029034:	68fb      	ldr	r3, [r7, #12]
 8029036:	681b      	ldr	r3, [r3, #0]
 8029038:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802903c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802903e:	68fb      	ldr	r3, [r7, #12]
 8029040:	685b      	ldr	r3, [r3, #4]
 8029042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029046:	d111      	bne.n	802906c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8029048:	68fb      	ldr	r3, [r7, #12]
 802904a:	689b      	ldr	r3, [r3, #8]
 802904c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029050:	d004      	beq.n	802905c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8029052:	68fb      	ldr	r3, [r7, #12]
 8029054:	689b      	ldr	r3, [r3, #8]
 8029056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802905a:	d107      	bne.n	802906c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 802905c:	68fb      	ldr	r3, [r7, #12]
 802905e:	681b      	ldr	r3, [r3, #0]
 8029060:	681a      	ldr	r2, [r3, #0]
 8029062:	68fb      	ldr	r3, [r7, #12]
 8029064:	681b      	ldr	r3, [r3, #0]
 8029066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802906a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802906c:	68fb      	ldr	r3, [r7, #12]
 802906e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029074:	d10f      	bne.n	8029096 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8029076:	68fb      	ldr	r3, [r7, #12]
 8029078:	681b      	ldr	r3, [r3, #0]
 802907a:	681a      	ldr	r2, [r3, #0]
 802907c:	68fb      	ldr	r3, [r7, #12]
 802907e:	681b      	ldr	r3, [r3, #0]
 8029080:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8029084:	601a      	str	r2, [r3, #0]
 8029086:	68fb      	ldr	r3, [r7, #12]
 8029088:	681b      	ldr	r3, [r3, #0]
 802908a:	681a      	ldr	r2, [r3, #0]
 802908c:	68fb      	ldr	r3, [r7, #12]
 802908e:	681b      	ldr	r3, [r3, #0]
 8029090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8029094:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8029096:	68fb      	ldr	r3, [r7, #12]
 8029098:	2201      	movs	r2, #1
 802909a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 802909e:	68fb      	ldr	r3, [r7, #12]
 80290a0:	2200      	movs	r2, #0
 80290a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80290a6:	2303      	movs	r3, #3
 80290a8:	e00f      	b.n	80290ca <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80290aa:	68fb      	ldr	r3, [r7, #12]
 80290ac:	681b      	ldr	r3, [r3, #0]
 80290ae:	689a      	ldr	r2, [r3, #8]
 80290b0:	68bb      	ldr	r3, [r7, #8]
 80290b2:	4013      	ands	r3, r2
 80290b4:	68ba      	ldr	r2, [r7, #8]
 80290b6:	429a      	cmp	r2, r3
 80290b8:	bf0c      	ite	eq
 80290ba:	2301      	moveq	r3, #1
 80290bc:	2300      	movne	r3, #0
 80290be:	b2db      	uxtb	r3, r3
 80290c0:	461a      	mov	r2, r3
 80290c2:	79fb      	ldrb	r3, [r7, #7]
 80290c4:	429a      	cmp	r2, r3
 80290c6:	d1a3      	bne.n	8029010 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80290c8:	2300      	movs	r3, #0
}
 80290ca:	4618      	mov	r0, r3
 80290cc:	3710      	adds	r7, #16
 80290ce:	46bd      	mov	sp, r7
 80290d0:	bd80      	pop	{r7, pc}

080290d2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80290d2:	b580      	push	{r7, lr}
 80290d4:	b086      	sub	sp, #24
 80290d6:	af02      	add	r7, sp, #8
 80290d8:	60f8      	str	r0, [r7, #12]
 80290da:	60b9      	str	r1, [r7, #8]
 80290dc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80290de:	68fb      	ldr	r3, [r7, #12]
 80290e0:	685b      	ldr	r3, [r3, #4]
 80290e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80290e6:	d111      	bne.n	802910c <SPI_EndRxTransaction+0x3a>
 80290e8:	68fb      	ldr	r3, [r7, #12]
 80290ea:	689b      	ldr	r3, [r3, #8]
 80290ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80290f0:	d004      	beq.n	80290fc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80290f2:	68fb      	ldr	r3, [r7, #12]
 80290f4:	689b      	ldr	r3, [r3, #8]
 80290f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80290fa:	d107      	bne.n	802910c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80290fc:	68fb      	ldr	r3, [r7, #12]
 80290fe:	681b      	ldr	r3, [r3, #0]
 8029100:	681a      	ldr	r2, [r3, #0]
 8029102:	68fb      	ldr	r3, [r7, #12]
 8029104:	681b      	ldr	r3, [r3, #0]
 8029106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802910a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802910c:	68fb      	ldr	r3, [r7, #12]
 802910e:	685b      	ldr	r3, [r3, #4]
 8029110:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029114:	d12a      	bne.n	802916c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8029116:	68fb      	ldr	r3, [r7, #12]
 8029118:	689b      	ldr	r3, [r3, #8]
 802911a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802911e:	d012      	beq.n	8029146 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8029120:	687b      	ldr	r3, [r7, #4]
 8029122:	9300      	str	r3, [sp, #0]
 8029124:	68bb      	ldr	r3, [r7, #8]
 8029126:	2200      	movs	r2, #0
 8029128:	2180      	movs	r1, #128	; 0x80
 802912a:	68f8      	ldr	r0, [r7, #12]
 802912c:	f7ff ff67 	bl	8028ffe <SPI_WaitFlagStateUntilTimeout>
 8029130:	4603      	mov	r3, r0
 8029132:	2b00      	cmp	r3, #0
 8029134:	d02d      	beq.n	8029192 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029136:	68fb      	ldr	r3, [r7, #12]
 8029138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802913a:	f043 0220 	orr.w	r2, r3, #32
 802913e:	68fb      	ldr	r3, [r7, #12]
 8029140:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8029142:	2303      	movs	r3, #3
 8029144:	e026      	b.n	8029194 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8029146:	687b      	ldr	r3, [r7, #4]
 8029148:	9300      	str	r3, [sp, #0]
 802914a:	68bb      	ldr	r3, [r7, #8]
 802914c:	2200      	movs	r2, #0
 802914e:	2101      	movs	r1, #1
 8029150:	68f8      	ldr	r0, [r7, #12]
 8029152:	f7ff ff54 	bl	8028ffe <SPI_WaitFlagStateUntilTimeout>
 8029156:	4603      	mov	r3, r0
 8029158:	2b00      	cmp	r3, #0
 802915a:	d01a      	beq.n	8029192 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802915c:	68fb      	ldr	r3, [r7, #12]
 802915e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029160:	f043 0220 	orr.w	r2, r3, #32
 8029164:	68fb      	ldr	r3, [r7, #12]
 8029166:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8029168:	2303      	movs	r3, #3
 802916a:	e013      	b.n	8029194 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802916c:	687b      	ldr	r3, [r7, #4]
 802916e:	9300      	str	r3, [sp, #0]
 8029170:	68bb      	ldr	r3, [r7, #8]
 8029172:	2200      	movs	r2, #0
 8029174:	2101      	movs	r1, #1
 8029176:	68f8      	ldr	r0, [r7, #12]
 8029178:	f7ff ff41 	bl	8028ffe <SPI_WaitFlagStateUntilTimeout>
 802917c:	4603      	mov	r3, r0
 802917e:	2b00      	cmp	r3, #0
 8029180:	d007      	beq.n	8029192 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029182:	68fb      	ldr	r3, [r7, #12]
 8029184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029186:	f043 0220 	orr.w	r2, r3, #32
 802918a:	68fb      	ldr	r3, [r7, #12]
 802918c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802918e:	2303      	movs	r3, #3
 8029190:	e000      	b.n	8029194 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8029192:	2300      	movs	r3, #0
}
 8029194:	4618      	mov	r0, r3
 8029196:	3710      	adds	r7, #16
 8029198:	46bd      	mov	sp, r7
 802919a:	bd80      	pop	{r7, pc}

0802919c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 802919c:	b580      	push	{r7, lr}
 802919e:	b088      	sub	sp, #32
 80291a0:	af02      	add	r7, sp, #8
 80291a2:	60f8      	str	r0, [r7, #12]
 80291a4:	60b9      	str	r1, [r7, #8]
 80291a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80291a8:	4b1b      	ldr	r3, [pc, #108]	; (8029218 <SPI_EndRxTxTransaction+0x7c>)
 80291aa:	681b      	ldr	r3, [r3, #0]
 80291ac:	4a1b      	ldr	r2, [pc, #108]	; (802921c <SPI_EndRxTxTransaction+0x80>)
 80291ae:	fba2 2303 	umull	r2, r3, r2, r3
 80291b2:	0d5b      	lsrs	r3, r3, #21
 80291b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80291b8:	fb02 f303 	mul.w	r3, r2, r3
 80291bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80291be:	68fb      	ldr	r3, [r7, #12]
 80291c0:	685b      	ldr	r3, [r3, #4]
 80291c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80291c6:	d112      	bne.n	80291ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80291c8:	687b      	ldr	r3, [r7, #4]
 80291ca:	9300      	str	r3, [sp, #0]
 80291cc:	68bb      	ldr	r3, [r7, #8]
 80291ce:	2200      	movs	r2, #0
 80291d0:	2180      	movs	r1, #128	; 0x80
 80291d2:	68f8      	ldr	r0, [r7, #12]
 80291d4:	f7ff ff13 	bl	8028ffe <SPI_WaitFlagStateUntilTimeout>
 80291d8:	4603      	mov	r3, r0
 80291da:	2b00      	cmp	r3, #0
 80291dc:	d016      	beq.n	802920c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80291de:	68fb      	ldr	r3, [r7, #12]
 80291e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80291e2:	f043 0220 	orr.w	r2, r3, #32
 80291e6:	68fb      	ldr	r3, [r7, #12]
 80291e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80291ea:	2303      	movs	r3, #3
 80291ec:	e00f      	b.n	802920e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80291ee:	697b      	ldr	r3, [r7, #20]
 80291f0:	2b00      	cmp	r3, #0
 80291f2:	d00a      	beq.n	802920a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80291f4:	697b      	ldr	r3, [r7, #20]
 80291f6:	3b01      	subs	r3, #1
 80291f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80291fa:	68fb      	ldr	r3, [r7, #12]
 80291fc:	681b      	ldr	r3, [r3, #0]
 80291fe:	689b      	ldr	r3, [r3, #8]
 8029200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029204:	2b80      	cmp	r3, #128	; 0x80
 8029206:	d0f2      	beq.n	80291ee <SPI_EndRxTxTransaction+0x52>
 8029208:	e000      	b.n	802920c <SPI_EndRxTxTransaction+0x70>
        break;
 802920a:	bf00      	nop
  }

  return HAL_OK;
 802920c:	2300      	movs	r3, #0
}
 802920e:	4618      	mov	r0, r3
 8029210:	3718      	adds	r7, #24
 8029212:	46bd      	mov	sp, r7
 8029214:	bd80      	pop	{r7, pc}
 8029216:	bf00      	nop
 8029218:	20000014 	.word	0x20000014
 802921c:	165e9f81 	.word	0x165e9f81

08029220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8029220:	b580      	push	{r7, lr}
 8029222:	b082      	sub	sp, #8
 8029224:	af00      	add	r7, sp, #0
 8029226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029228:	687b      	ldr	r3, [r7, #4]
 802922a:	2b00      	cmp	r3, #0
 802922c:	d101      	bne.n	8029232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802922e:	2301      	movs	r3, #1
 8029230:	e01d      	b.n	802926e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029232:	687b      	ldr	r3, [r7, #4]
 8029234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029238:	b2db      	uxtb	r3, r3
 802923a:	2b00      	cmp	r3, #0
 802923c:	d106      	bne.n	802924c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802923e:	687b      	ldr	r3, [r7, #4]
 8029240:	2200      	movs	r2, #0
 8029242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8029246:	6878      	ldr	r0, [r7, #4]
 8029248:	f7fc faf0 	bl	802582c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802924c:	687b      	ldr	r3, [r7, #4]
 802924e:	2202      	movs	r2, #2
 8029250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029254:	687b      	ldr	r3, [r7, #4]
 8029256:	681a      	ldr	r2, [r3, #0]
 8029258:	687b      	ldr	r3, [r7, #4]
 802925a:	3304      	adds	r3, #4
 802925c:	4619      	mov	r1, r3
 802925e:	4610      	mov	r0, r2
 8029260:	f000 fc0e 	bl	8029a80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029264:	687b      	ldr	r3, [r7, #4]
 8029266:	2201      	movs	r2, #1
 8029268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802926c:	2300      	movs	r3, #0
}
 802926e:	4618      	mov	r0, r3
 8029270:	3708      	adds	r7, #8
 8029272:	46bd      	mov	sp, r7
 8029274:	bd80      	pop	{r7, pc}

08029276 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8029276:	b480      	push	{r7}
 8029278:	b085      	sub	sp, #20
 802927a:	af00      	add	r7, sp, #0
 802927c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 802927e:	687b      	ldr	r3, [r7, #4]
 8029280:	681b      	ldr	r3, [r3, #0]
 8029282:	68da      	ldr	r2, [r3, #12]
 8029284:	687b      	ldr	r3, [r7, #4]
 8029286:	681b      	ldr	r3, [r3, #0]
 8029288:	f042 0201 	orr.w	r2, r2, #1
 802928c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802928e:	687b      	ldr	r3, [r7, #4]
 8029290:	681b      	ldr	r3, [r3, #0]
 8029292:	689b      	ldr	r3, [r3, #8]
 8029294:	f003 0307 	and.w	r3, r3, #7
 8029298:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802929a:	68fb      	ldr	r3, [r7, #12]
 802929c:	2b06      	cmp	r3, #6
 802929e:	d007      	beq.n	80292b0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80292a0:	687b      	ldr	r3, [r7, #4]
 80292a2:	681b      	ldr	r3, [r3, #0]
 80292a4:	681a      	ldr	r2, [r3, #0]
 80292a6:	687b      	ldr	r3, [r7, #4]
 80292a8:	681b      	ldr	r3, [r3, #0]
 80292aa:	f042 0201 	orr.w	r2, r2, #1
 80292ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80292b0:	2300      	movs	r3, #0
}
 80292b2:	4618      	mov	r0, r3
 80292b4:	3714      	adds	r7, #20
 80292b6:	46bd      	mov	sp, r7
 80292b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292bc:	4770      	bx	lr

080292be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80292be:	b580      	push	{r7, lr}
 80292c0:	b082      	sub	sp, #8
 80292c2:	af00      	add	r7, sp, #0
 80292c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80292c6:	687b      	ldr	r3, [r7, #4]
 80292c8:	2b00      	cmp	r3, #0
 80292ca:	d101      	bne.n	80292d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80292cc:	2301      	movs	r3, #1
 80292ce:	e01d      	b.n	802930c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80292d0:	687b      	ldr	r3, [r7, #4]
 80292d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80292d6:	b2db      	uxtb	r3, r3
 80292d8:	2b00      	cmp	r3, #0
 80292da:	d106      	bne.n	80292ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80292dc:	687b      	ldr	r3, [r7, #4]
 80292de:	2200      	movs	r2, #0
 80292e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80292e4:	6878      	ldr	r0, [r7, #4]
 80292e6:	f7fc fa53 	bl	8025790 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80292ea:	687b      	ldr	r3, [r7, #4]
 80292ec:	2202      	movs	r2, #2
 80292ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80292f2:	687b      	ldr	r3, [r7, #4]
 80292f4:	681a      	ldr	r2, [r3, #0]
 80292f6:	687b      	ldr	r3, [r7, #4]
 80292f8:	3304      	adds	r3, #4
 80292fa:	4619      	mov	r1, r3
 80292fc:	4610      	mov	r0, r2
 80292fe:	f000 fbbf 	bl	8029a80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029302:	687b      	ldr	r3, [r7, #4]
 8029304:	2201      	movs	r2, #1
 8029306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802930a:	2300      	movs	r3, #0
}
 802930c:	4618      	mov	r0, r3
 802930e:	3708      	adds	r7, #8
 8029310:	46bd      	mov	sp, r7
 8029312:	bd80      	pop	{r7, pc}

08029314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8029314:	b580      	push	{r7, lr}
 8029316:	b084      	sub	sp, #16
 8029318:	af00      	add	r7, sp, #0
 802931a:	6078      	str	r0, [r7, #4]
 802931c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 802931e:	687b      	ldr	r3, [r7, #4]
 8029320:	681b      	ldr	r3, [r3, #0]
 8029322:	2201      	movs	r2, #1
 8029324:	6839      	ldr	r1, [r7, #0]
 8029326:	4618      	mov	r0, r3
 8029328:	f000 fe94 	bl	802a054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 802932c:	687b      	ldr	r3, [r7, #4]
 802932e:	681b      	ldr	r3, [r3, #0]
 8029330:	4a15      	ldr	r2, [pc, #84]	; (8029388 <HAL_TIM_PWM_Start+0x74>)
 8029332:	4293      	cmp	r3, r2
 8029334:	d004      	beq.n	8029340 <HAL_TIM_PWM_Start+0x2c>
 8029336:	687b      	ldr	r3, [r7, #4]
 8029338:	681b      	ldr	r3, [r3, #0]
 802933a:	4a14      	ldr	r2, [pc, #80]	; (802938c <HAL_TIM_PWM_Start+0x78>)
 802933c:	4293      	cmp	r3, r2
 802933e:	d101      	bne.n	8029344 <HAL_TIM_PWM_Start+0x30>
 8029340:	2301      	movs	r3, #1
 8029342:	e000      	b.n	8029346 <HAL_TIM_PWM_Start+0x32>
 8029344:	2300      	movs	r3, #0
 8029346:	2b00      	cmp	r3, #0
 8029348:	d007      	beq.n	802935a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 802934a:	687b      	ldr	r3, [r7, #4]
 802934c:	681b      	ldr	r3, [r3, #0]
 802934e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8029350:	687b      	ldr	r3, [r7, #4]
 8029352:	681b      	ldr	r3, [r3, #0]
 8029354:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029358:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802935a:	687b      	ldr	r3, [r7, #4]
 802935c:	681b      	ldr	r3, [r3, #0]
 802935e:	689b      	ldr	r3, [r3, #8]
 8029360:	f003 0307 	and.w	r3, r3, #7
 8029364:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029366:	68fb      	ldr	r3, [r7, #12]
 8029368:	2b06      	cmp	r3, #6
 802936a:	d007      	beq.n	802937c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 802936c:	687b      	ldr	r3, [r7, #4]
 802936e:	681b      	ldr	r3, [r3, #0]
 8029370:	681a      	ldr	r2, [r3, #0]
 8029372:	687b      	ldr	r3, [r7, #4]
 8029374:	681b      	ldr	r3, [r3, #0]
 8029376:	f042 0201 	orr.w	r2, r2, #1
 802937a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802937c:	2300      	movs	r3, #0
}
 802937e:	4618      	mov	r0, r3
 8029380:	3710      	adds	r7, #16
 8029382:	46bd      	mov	sp, r7
 8029384:	bd80      	pop	{r7, pc}
 8029386:	bf00      	nop
 8029388:	40010000 	.word	0x40010000
 802938c:	40010400 	.word	0x40010400

08029390 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8029390:	b580      	push	{r7, lr}
 8029392:	b086      	sub	sp, #24
 8029394:	af00      	add	r7, sp, #0
 8029396:	6078      	str	r0, [r7, #4]
 8029398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 802939a:	687b      	ldr	r3, [r7, #4]
 802939c:	2b00      	cmp	r3, #0
 802939e:	d101      	bne.n	80293a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80293a0:	2301      	movs	r3, #1
 80293a2:	e083      	b.n	80294ac <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80293a4:	687b      	ldr	r3, [r7, #4]
 80293a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80293aa:	b2db      	uxtb	r3, r3
 80293ac:	2b00      	cmp	r3, #0
 80293ae:	d106      	bne.n	80293be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80293b0:	687b      	ldr	r3, [r7, #4]
 80293b2:	2200      	movs	r2, #0
 80293b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80293b8:	6878      	ldr	r0, [r7, #4]
 80293ba:	f7fc facd 	bl	8025958 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80293be:	687b      	ldr	r3, [r7, #4]
 80293c0:	2202      	movs	r2, #2
 80293c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80293c6:	687b      	ldr	r3, [r7, #4]
 80293c8:	681b      	ldr	r3, [r3, #0]
 80293ca:	689b      	ldr	r3, [r3, #8]
 80293cc:	687a      	ldr	r2, [r7, #4]
 80293ce:	6812      	ldr	r2, [r2, #0]
 80293d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80293d4:	f023 0307 	bic.w	r3, r3, #7
 80293d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80293da:	687b      	ldr	r3, [r7, #4]
 80293dc:	681a      	ldr	r2, [r3, #0]
 80293de:	687b      	ldr	r3, [r7, #4]
 80293e0:	3304      	adds	r3, #4
 80293e2:	4619      	mov	r1, r3
 80293e4:	4610      	mov	r0, r2
 80293e6:	f000 fb4b 	bl	8029a80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80293ea:	687b      	ldr	r3, [r7, #4]
 80293ec:	681b      	ldr	r3, [r3, #0]
 80293ee:	689b      	ldr	r3, [r3, #8]
 80293f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80293f2:	687b      	ldr	r3, [r7, #4]
 80293f4:	681b      	ldr	r3, [r3, #0]
 80293f6:	699b      	ldr	r3, [r3, #24]
 80293f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80293fa:	687b      	ldr	r3, [r7, #4]
 80293fc:	681b      	ldr	r3, [r3, #0]
 80293fe:	6a1b      	ldr	r3, [r3, #32]
 8029400:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8029402:	683b      	ldr	r3, [r7, #0]
 8029404:	681b      	ldr	r3, [r3, #0]
 8029406:	697a      	ldr	r2, [r7, #20]
 8029408:	4313      	orrs	r3, r2
 802940a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 802940c:	693b      	ldr	r3, [r7, #16]
 802940e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029412:	f023 0303 	bic.w	r3, r3, #3
 8029416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8029418:	683b      	ldr	r3, [r7, #0]
 802941a:	689a      	ldr	r2, [r3, #8]
 802941c:	683b      	ldr	r3, [r7, #0]
 802941e:	699b      	ldr	r3, [r3, #24]
 8029420:	021b      	lsls	r3, r3, #8
 8029422:	4313      	orrs	r3, r2
 8029424:	693a      	ldr	r2, [r7, #16]
 8029426:	4313      	orrs	r3, r2
 8029428:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 802942a:	693b      	ldr	r3, [r7, #16]
 802942c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8029430:	f023 030c 	bic.w	r3, r3, #12
 8029434:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8029436:	693b      	ldr	r3, [r7, #16]
 8029438:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802943c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8029442:	683b      	ldr	r3, [r7, #0]
 8029444:	68da      	ldr	r2, [r3, #12]
 8029446:	683b      	ldr	r3, [r7, #0]
 8029448:	69db      	ldr	r3, [r3, #28]
 802944a:	021b      	lsls	r3, r3, #8
 802944c:	4313      	orrs	r3, r2
 802944e:	693a      	ldr	r2, [r7, #16]
 8029450:	4313      	orrs	r3, r2
 8029452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8029454:	683b      	ldr	r3, [r7, #0]
 8029456:	691b      	ldr	r3, [r3, #16]
 8029458:	011a      	lsls	r2, r3, #4
 802945a:	683b      	ldr	r3, [r7, #0]
 802945c:	6a1b      	ldr	r3, [r3, #32]
 802945e:	031b      	lsls	r3, r3, #12
 8029460:	4313      	orrs	r3, r2
 8029462:	693a      	ldr	r2, [r7, #16]
 8029464:	4313      	orrs	r3, r2
 8029466:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8029468:	68fb      	ldr	r3, [r7, #12]
 802946a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 802946e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8029470:	68fb      	ldr	r3, [r7, #12]
 8029472:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8029476:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8029478:	683b      	ldr	r3, [r7, #0]
 802947a:	685a      	ldr	r2, [r3, #4]
 802947c:	683b      	ldr	r3, [r7, #0]
 802947e:	695b      	ldr	r3, [r3, #20]
 8029480:	011b      	lsls	r3, r3, #4
 8029482:	4313      	orrs	r3, r2
 8029484:	68fa      	ldr	r2, [r7, #12]
 8029486:	4313      	orrs	r3, r2
 8029488:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 802948a:	687b      	ldr	r3, [r7, #4]
 802948c:	681b      	ldr	r3, [r3, #0]
 802948e:	697a      	ldr	r2, [r7, #20]
 8029490:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8029492:	687b      	ldr	r3, [r7, #4]
 8029494:	681b      	ldr	r3, [r3, #0]
 8029496:	693a      	ldr	r2, [r7, #16]
 8029498:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 802949a:	687b      	ldr	r3, [r7, #4]
 802949c:	681b      	ldr	r3, [r3, #0]
 802949e:	68fa      	ldr	r2, [r7, #12]
 80294a0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80294a2:	687b      	ldr	r3, [r7, #4]
 80294a4:	2201      	movs	r2, #1
 80294a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80294aa:	2300      	movs	r3, #0
}
 80294ac:	4618      	mov	r0, r3
 80294ae:	3718      	adds	r7, #24
 80294b0:	46bd      	mov	sp, r7
 80294b2:	bd80      	pop	{r7, pc}

080294b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80294b4:	b580      	push	{r7, lr}
 80294b6:	b082      	sub	sp, #8
 80294b8:	af00      	add	r7, sp, #0
 80294ba:	6078      	str	r0, [r7, #4]
 80294bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80294be:	683b      	ldr	r3, [r7, #0]
 80294c0:	2b00      	cmp	r3, #0
 80294c2:	d002      	beq.n	80294ca <HAL_TIM_Encoder_Start+0x16>
 80294c4:	2b04      	cmp	r3, #4
 80294c6:	d008      	beq.n	80294da <HAL_TIM_Encoder_Start+0x26>
 80294c8:	e00f      	b.n	80294ea <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80294ca:	687b      	ldr	r3, [r7, #4]
 80294cc:	681b      	ldr	r3, [r3, #0]
 80294ce:	2201      	movs	r2, #1
 80294d0:	2100      	movs	r1, #0
 80294d2:	4618      	mov	r0, r3
 80294d4:	f000 fdbe 	bl	802a054 <TIM_CCxChannelCmd>
      break;
 80294d8:	e016      	b.n	8029508 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80294da:	687b      	ldr	r3, [r7, #4]
 80294dc:	681b      	ldr	r3, [r3, #0]
 80294de:	2201      	movs	r2, #1
 80294e0:	2104      	movs	r1, #4
 80294e2:	4618      	mov	r0, r3
 80294e4:	f000 fdb6 	bl	802a054 <TIM_CCxChannelCmd>
      break;
 80294e8:	e00e      	b.n	8029508 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80294ea:	687b      	ldr	r3, [r7, #4]
 80294ec:	681b      	ldr	r3, [r3, #0]
 80294ee:	2201      	movs	r2, #1
 80294f0:	2100      	movs	r1, #0
 80294f2:	4618      	mov	r0, r3
 80294f4:	f000 fdae 	bl	802a054 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80294f8:	687b      	ldr	r3, [r7, #4]
 80294fa:	681b      	ldr	r3, [r3, #0]
 80294fc:	2201      	movs	r2, #1
 80294fe:	2104      	movs	r1, #4
 8029500:	4618      	mov	r0, r3
 8029502:	f000 fda7 	bl	802a054 <TIM_CCxChannelCmd>
      break;
 8029506:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8029508:	687b      	ldr	r3, [r7, #4]
 802950a:	681b      	ldr	r3, [r3, #0]
 802950c:	681a      	ldr	r2, [r3, #0]
 802950e:	687b      	ldr	r3, [r7, #4]
 8029510:	681b      	ldr	r3, [r3, #0]
 8029512:	f042 0201 	orr.w	r2, r2, #1
 8029516:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8029518:	2300      	movs	r3, #0
}
 802951a:	4618      	mov	r0, r3
 802951c:	3708      	adds	r7, #8
 802951e:	46bd      	mov	sp, r7
 8029520:	bd80      	pop	{r7, pc}

08029522 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8029522:	b580      	push	{r7, lr}
 8029524:	b082      	sub	sp, #8
 8029526:	af00      	add	r7, sp, #0
 8029528:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 802952a:	687b      	ldr	r3, [r7, #4]
 802952c:	681b      	ldr	r3, [r3, #0]
 802952e:	691b      	ldr	r3, [r3, #16]
 8029530:	f003 0302 	and.w	r3, r3, #2
 8029534:	2b02      	cmp	r3, #2
 8029536:	d122      	bne.n	802957e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8029538:	687b      	ldr	r3, [r7, #4]
 802953a:	681b      	ldr	r3, [r3, #0]
 802953c:	68db      	ldr	r3, [r3, #12]
 802953e:	f003 0302 	and.w	r3, r3, #2
 8029542:	2b02      	cmp	r3, #2
 8029544:	d11b      	bne.n	802957e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8029546:	687b      	ldr	r3, [r7, #4]
 8029548:	681b      	ldr	r3, [r3, #0]
 802954a:	f06f 0202 	mvn.w	r2, #2
 802954e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8029550:	687b      	ldr	r3, [r7, #4]
 8029552:	2201      	movs	r2, #1
 8029554:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8029556:	687b      	ldr	r3, [r7, #4]
 8029558:	681b      	ldr	r3, [r3, #0]
 802955a:	699b      	ldr	r3, [r3, #24]
 802955c:	f003 0303 	and.w	r3, r3, #3
 8029560:	2b00      	cmp	r3, #0
 8029562:	d003      	beq.n	802956c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8029564:	6878      	ldr	r0, [r7, #4]
 8029566:	f000 fa6c 	bl	8029a42 <HAL_TIM_IC_CaptureCallback>
 802956a:	e005      	b.n	8029578 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802956c:	6878      	ldr	r0, [r7, #4]
 802956e:	f000 fa5e 	bl	8029a2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029572:	6878      	ldr	r0, [r7, #4]
 8029574:	f000 fa6f 	bl	8029a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029578:	687b      	ldr	r3, [r7, #4]
 802957a:	2200      	movs	r2, #0
 802957c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802957e:	687b      	ldr	r3, [r7, #4]
 8029580:	681b      	ldr	r3, [r3, #0]
 8029582:	691b      	ldr	r3, [r3, #16]
 8029584:	f003 0304 	and.w	r3, r3, #4
 8029588:	2b04      	cmp	r3, #4
 802958a:	d122      	bne.n	80295d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802958c:	687b      	ldr	r3, [r7, #4]
 802958e:	681b      	ldr	r3, [r3, #0]
 8029590:	68db      	ldr	r3, [r3, #12]
 8029592:	f003 0304 	and.w	r3, r3, #4
 8029596:	2b04      	cmp	r3, #4
 8029598:	d11b      	bne.n	80295d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802959a:	687b      	ldr	r3, [r7, #4]
 802959c:	681b      	ldr	r3, [r3, #0]
 802959e:	f06f 0204 	mvn.w	r2, #4
 80295a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80295a4:	687b      	ldr	r3, [r7, #4]
 80295a6:	2202      	movs	r2, #2
 80295a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80295aa:	687b      	ldr	r3, [r7, #4]
 80295ac:	681b      	ldr	r3, [r3, #0]
 80295ae:	699b      	ldr	r3, [r3, #24]
 80295b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80295b4:	2b00      	cmp	r3, #0
 80295b6:	d003      	beq.n	80295c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80295b8:	6878      	ldr	r0, [r7, #4]
 80295ba:	f000 fa42 	bl	8029a42 <HAL_TIM_IC_CaptureCallback>
 80295be:	e005      	b.n	80295cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80295c0:	6878      	ldr	r0, [r7, #4]
 80295c2:	f000 fa34 	bl	8029a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80295c6:	6878      	ldr	r0, [r7, #4]
 80295c8:	f000 fa45 	bl	8029a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80295cc:	687b      	ldr	r3, [r7, #4]
 80295ce:	2200      	movs	r2, #0
 80295d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80295d2:	687b      	ldr	r3, [r7, #4]
 80295d4:	681b      	ldr	r3, [r3, #0]
 80295d6:	691b      	ldr	r3, [r3, #16]
 80295d8:	f003 0308 	and.w	r3, r3, #8
 80295dc:	2b08      	cmp	r3, #8
 80295de:	d122      	bne.n	8029626 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80295e0:	687b      	ldr	r3, [r7, #4]
 80295e2:	681b      	ldr	r3, [r3, #0]
 80295e4:	68db      	ldr	r3, [r3, #12]
 80295e6:	f003 0308 	and.w	r3, r3, #8
 80295ea:	2b08      	cmp	r3, #8
 80295ec:	d11b      	bne.n	8029626 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80295ee:	687b      	ldr	r3, [r7, #4]
 80295f0:	681b      	ldr	r3, [r3, #0]
 80295f2:	f06f 0208 	mvn.w	r2, #8
 80295f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80295f8:	687b      	ldr	r3, [r7, #4]
 80295fa:	2204      	movs	r2, #4
 80295fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80295fe:	687b      	ldr	r3, [r7, #4]
 8029600:	681b      	ldr	r3, [r3, #0]
 8029602:	69db      	ldr	r3, [r3, #28]
 8029604:	f003 0303 	and.w	r3, r3, #3
 8029608:	2b00      	cmp	r3, #0
 802960a:	d003      	beq.n	8029614 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802960c:	6878      	ldr	r0, [r7, #4]
 802960e:	f000 fa18 	bl	8029a42 <HAL_TIM_IC_CaptureCallback>
 8029612:	e005      	b.n	8029620 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029614:	6878      	ldr	r0, [r7, #4]
 8029616:	f000 fa0a 	bl	8029a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802961a:	6878      	ldr	r0, [r7, #4]
 802961c:	f000 fa1b 	bl	8029a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029620:	687b      	ldr	r3, [r7, #4]
 8029622:	2200      	movs	r2, #0
 8029624:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8029626:	687b      	ldr	r3, [r7, #4]
 8029628:	681b      	ldr	r3, [r3, #0]
 802962a:	691b      	ldr	r3, [r3, #16]
 802962c:	f003 0310 	and.w	r3, r3, #16
 8029630:	2b10      	cmp	r3, #16
 8029632:	d122      	bne.n	802967a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8029634:	687b      	ldr	r3, [r7, #4]
 8029636:	681b      	ldr	r3, [r3, #0]
 8029638:	68db      	ldr	r3, [r3, #12]
 802963a:	f003 0310 	and.w	r3, r3, #16
 802963e:	2b10      	cmp	r3, #16
 8029640:	d11b      	bne.n	802967a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8029642:	687b      	ldr	r3, [r7, #4]
 8029644:	681b      	ldr	r3, [r3, #0]
 8029646:	f06f 0210 	mvn.w	r2, #16
 802964a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802964c:	687b      	ldr	r3, [r7, #4]
 802964e:	2208      	movs	r2, #8
 8029650:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8029652:	687b      	ldr	r3, [r7, #4]
 8029654:	681b      	ldr	r3, [r3, #0]
 8029656:	69db      	ldr	r3, [r3, #28]
 8029658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802965c:	2b00      	cmp	r3, #0
 802965e:	d003      	beq.n	8029668 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029660:	6878      	ldr	r0, [r7, #4]
 8029662:	f000 f9ee 	bl	8029a42 <HAL_TIM_IC_CaptureCallback>
 8029666:	e005      	b.n	8029674 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029668:	6878      	ldr	r0, [r7, #4]
 802966a:	f000 f9e0 	bl	8029a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802966e:	6878      	ldr	r0, [r7, #4]
 8029670:	f000 f9f1 	bl	8029a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029674:	687b      	ldr	r3, [r7, #4]
 8029676:	2200      	movs	r2, #0
 8029678:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 802967a:	687b      	ldr	r3, [r7, #4]
 802967c:	681b      	ldr	r3, [r3, #0]
 802967e:	691b      	ldr	r3, [r3, #16]
 8029680:	f003 0301 	and.w	r3, r3, #1
 8029684:	2b01      	cmp	r3, #1
 8029686:	d10e      	bne.n	80296a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8029688:	687b      	ldr	r3, [r7, #4]
 802968a:	681b      	ldr	r3, [r3, #0]
 802968c:	68db      	ldr	r3, [r3, #12]
 802968e:	f003 0301 	and.w	r3, r3, #1
 8029692:	2b01      	cmp	r3, #1
 8029694:	d107      	bne.n	80296a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8029696:	687b      	ldr	r3, [r7, #4]
 8029698:	681b      	ldr	r3, [r3, #0]
 802969a:	f06f 0201 	mvn.w	r2, #1
 802969e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80296a0:	6878      	ldr	r0, [r7, #4]
 80296a2:	f7f9 fd0b 	bl	80230bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80296a6:	687b      	ldr	r3, [r7, #4]
 80296a8:	681b      	ldr	r3, [r3, #0]
 80296aa:	691b      	ldr	r3, [r3, #16]
 80296ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80296b0:	2b80      	cmp	r3, #128	; 0x80
 80296b2:	d10e      	bne.n	80296d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80296b4:	687b      	ldr	r3, [r7, #4]
 80296b6:	681b      	ldr	r3, [r3, #0]
 80296b8:	68db      	ldr	r3, [r3, #12]
 80296ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80296be:	2b80      	cmp	r3, #128	; 0x80
 80296c0:	d107      	bne.n	80296d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80296c2:	687b      	ldr	r3, [r7, #4]
 80296c4:	681b      	ldr	r3, [r3, #0]
 80296c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80296ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80296cc:	6878      	ldr	r0, [r7, #4]
 80296ce:	f000 fdbf 	bl	802a250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80296d2:	687b      	ldr	r3, [r7, #4]
 80296d4:	681b      	ldr	r3, [r3, #0]
 80296d6:	691b      	ldr	r3, [r3, #16]
 80296d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80296dc:	2b40      	cmp	r3, #64	; 0x40
 80296de:	d10e      	bne.n	80296fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80296e0:	687b      	ldr	r3, [r7, #4]
 80296e2:	681b      	ldr	r3, [r3, #0]
 80296e4:	68db      	ldr	r3, [r3, #12]
 80296e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80296ea:	2b40      	cmp	r3, #64	; 0x40
 80296ec:	d107      	bne.n	80296fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80296ee:	687b      	ldr	r3, [r7, #4]
 80296f0:	681b      	ldr	r3, [r3, #0]
 80296f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80296f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80296f8:	6878      	ldr	r0, [r7, #4]
 80296fa:	f000 f9b6 	bl	8029a6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80296fe:	687b      	ldr	r3, [r7, #4]
 8029700:	681b      	ldr	r3, [r3, #0]
 8029702:	691b      	ldr	r3, [r3, #16]
 8029704:	f003 0320 	and.w	r3, r3, #32
 8029708:	2b20      	cmp	r3, #32
 802970a:	d10e      	bne.n	802972a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802970c:	687b      	ldr	r3, [r7, #4]
 802970e:	681b      	ldr	r3, [r3, #0]
 8029710:	68db      	ldr	r3, [r3, #12]
 8029712:	f003 0320 	and.w	r3, r3, #32
 8029716:	2b20      	cmp	r3, #32
 8029718:	d107      	bne.n	802972a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802971a:	687b      	ldr	r3, [r7, #4]
 802971c:	681b      	ldr	r3, [r3, #0]
 802971e:	f06f 0220 	mvn.w	r2, #32
 8029722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8029724:	6878      	ldr	r0, [r7, #4]
 8029726:	f000 fd89 	bl	802a23c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802972a:	bf00      	nop
 802972c:	3708      	adds	r7, #8
 802972e:	46bd      	mov	sp, r7
 8029730:	bd80      	pop	{r7, pc}
	...

08029734 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8029734:	b580      	push	{r7, lr}
 8029736:	b084      	sub	sp, #16
 8029738:	af00      	add	r7, sp, #0
 802973a:	60f8      	str	r0, [r7, #12]
 802973c:	60b9      	str	r1, [r7, #8]
 802973e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8029740:	68fb      	ldr	r3, [r7, #12]
 8029742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029746:	2b01      	cmp	r3, #1
 8029748:	d101      	bne.n	802974e <HAL_TIM_PWM_ConfigChannel+0x1a>
 802974a:	2302      	movs	r3, #2
 802974c:	e0b4      	b.n	80298b8 <HAL_TIM_PWM_ConfigChannel+0x184>
 802974e:	68fb      	ldr	r3, [r7, #12]
 8029750:	2201      	movs	r2, #1
 8029752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029756:	68fb      	ldr	r3, [r7, #12]
 8029758:	2202      	movs	r2, #2
 802975a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 802975e:	687b      	ldr	r3, [r7, #4]
 8029760:	2b0c      	cmp	r3, #12
 8029762:	f200 809f 	bhi.w	80298a4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8029766:	a201      	add	r2, pc, #4	; (adr r2, 802976c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8029768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802976c:	080297a1 	.word	0x080297a1
 8029770:	080298a5 	.word	0x080298a5
 8029774:	080298a5 	.word	0x080298a5
 8029778:	080298a5 	.word	0x080298a5
 802977c:	080297e1 	.word	0x080297e1
 8029780:	080298a5 	.word	0x080298a5
 8029784:	080298a5 	.word	0x080298a5
 8029788:	080298a5 	.word	0x080298a5
 802978c:	08029823 	.word	0x08029823
 8029790:	080298a5 	.word	0x080298a5
 8029794:	080298a5 	.word	0x080298a5
 8029798:	080298a5 	.word	0x080298a5
 802979c:	08029863 	.word	0x08029863
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80297a0:	68fb      	ldr	r3, [r7, #12]
 80297a2:	681b      	ldr	r3, [r3, #0]
 80297a4:	68b9      	ldr	r1, [r7, #8]
 80297a6:	4618      	mov	r0, r3
 80297a8:	f000 fa0a 	bl	8029bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80297ac:	68fb      	ldr	r3, [r7, #12]
 80297ae:	681b      	ldr	r3, [r3, #0]
 80297b0:	699a      	ldr	r2, [r3, #24]
 80297b2:	68fb      	ldr	r3, [r7, #12]
 80297b4:	681b      	ldr	r3, [r3, #0]
 80297b6:	f042 0208 	orr.w	r2, r2, #8
 80297ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80297bc:	68fb      	ldr	r3, [r7, #12]
 80297be:	681b      	ldr	r3, [r3, #0]
 80297c0:	699a      	ldr	r2, [r3, #24]
 80297c2:	68fb      	ldr	r3, [r7, #12]
 80297c4:	681b      	ldr	r3, [r3, #0]
 80297c6:	f022 0204 	bic.w	r2, r2, #4
 80297ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80297cc:	68fb      	ldr	r3, [r7, #12]
 80297ce:	681b      	ldr	r3, [r3, #0]
 80297d0:	6999      	ldr	r1, [r3, #24]
 80297d2:	68bb      	ldr	r3, [r7, #8]
 80297d4:	691a      	ldr	r2, [r3, #16]
 80297d6:	68fb      	ldr	r3, [r7, #12]
 80297d8:	681b      	ldr	r3, [r3, #0]
 80297da:	430a      	orrs	r2, r1
 80297dc:	619a      	str	r2, [r3, #24]
      break;
 80297de:	e062      	b.n	80298a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80297e0:	68fb      	ldr	r3, [r7, #12]
 80297e2:	681b      	ldr	r3, [r3, #0]
 80297e4:	68b9      	ldr	r1, [r7, #8]
 80297e6:	4618      	mov	r0, r3
 80297e8:	f000 fa5a 	bl	8029ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80297ec:	68fb      	ldr	r3, [r7, #12]
 80297ee:	681b      	ldr	r3, [r3, #0]
 80297f0:	699a      	ldr	r2, [r3, #24]
 80297f2:	68fb      	ldr	r3, [r7, #12]
 80297f4:	681b      	ldr	r3, [r3, #0]
 80297f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80297fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80297fc:	68fb      	ldr	r3, [r7, #12]
 80297fe:	681b      	ldr	r3, [r3, #0]
 8029800:	699a      	ldr	r2, [r3, #24]
 8029802:	68fb      	ldr	r3, [r7, #12]
 8029804:	681b      	ldr	r3, [r3, #0]
 8029806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802980a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 802980c:	68fb      	ldr	r3, [r7, #12]
 802980e:	681b      	ldr	r3, [r3, #0]
 8029810:	6999      	ldr	r1, [r3, #24]
 8029812:	68bb      	ldr	r3, [r7, #8]
 8029814:	691b      	ldr	r3, [r3, #16]
 8029816:	021a      	lsls	r2, r3, #8
 8029818:	68fb      	ldr	r3, [r7, #12]
 802981a:	681b      	ldr	r3, [r3, #0]
 802981c:	430a      	orrs	r2, r1
 802981e:	619a      	str	r2, [r3, #24]
      break;
 8029820:	e041      	b.n	80298a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8029822:	68fb      	ldr	r3, [r7, #12]
 8029824:	681b      	ldr	r3, [r3, #0]
 8029826:	68b9      	ldr	r1, [r7, #8]
 8029828:	4618      	mov	r0, r3
 802982a:	f000 faaf 	bl	8029d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 802982e:	68fb      	ldr	r3, [r7, #12]
 8029830:	681b      	ldr	r3, [r3, #0]
 8029832:	69da      	ldr	r2, [r3, #28]
 8029834:	68fb      	ldr	r3, [r7, #12]
 8029836:	681b      	ldr	r3, [r3, #0]
 8029838:	f042 0208 	orr.w	r2, r2, #8
 802983c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 802983e:	68fb      	ldr	r3, [r7, #12]
 8029840:	681b      	ldr	r3, [r3, #0]
 8029842:	69da      	ldr	r2, [r3, #28]
 8029844:	68fb      	ldr	r3, [r7, #12]
 8029846:	681b      	ldr	r3, [r3, #0]
 8029848:	f022 0204 	bic.w	r2, r2, #4
 802984c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 802984e:	68fb      	ldr	r3, [r7, #12]
 8029850:	681b      	ldr	r3, [r3, #0]
 8029852:	69d9      	ldr	r1, [r3, #28]
 8029854:	68bb      	ldr	r3, [r7, #8]
 8029856:	691a      	ldr	r2, [r3, #16]
 8029858:	68fb      	ldr	r3, [r7, #12]
 802985a:	681b      	ldr	r3, [r3, #0]
 802985c:	430a      	orrs	r2, r1
 802985e:	61da      	str	r2, [r3, #28]
      break;
 8029860:	e021      	b.n	80298a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8029862:	68fb      	ldr	r3, [r7, #12]
 8029864:	681b      	ldr	r3, [r3, #0]
 8029866:	68b9      	ldr	r1, [r7, #8]
 8029868:	4618      	mov	r0, r3
 802986a:	f000 fb03 	bl	8029e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 802986e:	68fb      	ldr	r3, [r7, #12]
 8029870:	681b      	ldr	r3, [r3, #0]
 8029872:	69da      	ldr	r2, [r3, #28]
 8029874:	68fb      	ldr	r3, [r7, #12]
 8029876:	681b      	ldr	r3, [r3, #0]
 8029878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802987c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 802987e:	68fb      	ldr	r3, [r7, #12]
 8029880:	681b      	ldr	r3, [r3, #0]
 8029882:	69da      	ldr	r2, [r3, #28]
 8029884:	68fb      	ldr	r3, [r7, #12]
 8029886:	681b      	ldr	r3, [r3, #0]
 8029888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802988c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 802988e:	68fb      	ldr	r3, [r7, #12]
 8029890:	681b      	ldr	r3, [r3, #0]
 8029892:	69d9      	ldr	r1, [r3, #28]
 8029894:	68bb      	ldr	r3, [r7, #8]
 8029896:	691b      	ldr	r3, [r3, #16]
 8029898:	021a      	lsls	r2, r3, #8
 802989a:	68fb      	ldr	r3, [r7, #12]
 802989c:	681b      	ldr	r3, [r3, #0]
 802989e:	430a      	orrs	r2, r1
 80298a0:	61da      	str	r2, [r3, #28]
      break;
 80298a2:	e000      	b.n	80298a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80298a4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80298a6:	68fb      	ldr	r3, [r7, #12]
 80298a8:	2201      	movs	r2, #1
 80298aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80298ae:	68fb      	ldr	r3, [r7, #12]
 80298b0:	2200      	movs	r2, #0
 80298b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80298b6:	2300      	movs	r3, #0
}
 80298b8:	4618      	mov	r0, r3
 80298ba:	3710      	adds	r7, #16
 80298bc:	46bd      	mov	sp, r7
 80298be:	bd80      	pop	{r7, pc}

080298c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80298c0:	b580      	push	{r7, lr}
 80298c2:	b084      	sub	sp, #16
 80298c4:	af00      	add	r7, sp, #0
 80298c6:	6078      	str	r0, [r7, #4]
 80298c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80298ca:	687b      	ldr	r3, [r7, #4]
 80298cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80298d0:	2b01      	cmp	r3, #1
 80298d2:	d101      	bne.n	80298d8 <HAL_TIM_ConfigClockSource+0x18>
 80298d4:	2302      	movs	r3, #2
 80298d6:	e0a6      	b.n	8029a26 <HAL_TIM_ConfigClockSource+0x166>
 80298d8:	687b      	ldr	r3, [r7, #4]
 80298da:	2201      	movs	r2, #1
 80298dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80298e0:	687b      	ldr	r3, [r7, #4]
 80298e2:	2202      	movs	r2, #2
 80298e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80298e8:	687b      	ldr	r3, [r7, #4]
 80298ea:	681b      	ldr	r3, [r3, #0]
 80298ec:	689b      	ldr	r3, [r3, #8]
 80298ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80298f0:	68fb      	ldr	r3, [r7, #12]
 80298f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80298f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80298f8:	68fb      	ldr	r3, [r7, #12]
 80298fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80298fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8029900:	687b      	ldr	r3, [r7, #4]
 8029902:	681b      	ldr	r3, [r3, #0]
 8029904:	68fa      	ldr	r2, [r7, #12]
 8029906:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8029908:	683b      	ldr	r3, [r7, #0]
 802990a:	681b      	ldr	r3, [r3, #0]
 802990c:	2b40      	cmp	r3, #64	; 0x40
 802990e:	d067      	beq.n	80299e0 <HAL_TIM_ConfigClockSource+0x120>
 8029910:	2b40      	cmp	r3, #64	; 0x40
 8029912:	d80b      	bhi.n	802992c <HAL_TIM_ConfigClockSource+0x6c>
 8029914:	2b10      	cmp	r3, #16
 8029916:	d073      	beq.n	8029a00 <HAL_TIM_ConfigClockSource+0x140>
 8029918:	2b10      	cmp	r3, #16
 802991a:	d802      	bhi.n	8029922 <HAL_TIM_ConfigClockSource+0x62>
 802991c:	2b00      	cmp	r3, #0
 802991e:	d06f      	beq.n	8029a00 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8029920:	e078      	b.n	8029a14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029922:	2b20      	cmp	r3, #32
 8029924:	d06c      	beq.n	8029a00 <HAL_TIM_ConfigClockSource+0x140>
 8029926:	2b30      	cmp	r3, #48	; 0x30
 8029928:	d06a      	beq.n	8029a00 <HAL_TIM_ConfigClockSource+0x140>
      break;
 802992a:	e073      	b.n	8029a14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802992c:	2b70      	cmp	r3, #112	; 0x70
 802992e:	d00d      	beq.n	802994c <HAL_TIM_ConfigClockSource+0x8c>
 8029930:	2b70      	cmp	r3, #112	; 0x70
 8029932:	d804      	bhi.n	802993e <HAL_TIM_ConfigClockSource+0x7e>
 8029934:	2b50      	cmp	r3, #80	; 0x50
 8029936:	d033      	beq.n	80299a0 <HAL_TIM_ConfigClockSource+0xe0>
 8029938:	2b60      	cmp	r3, #96	; 0x60
 802993a:	d041      	beq.n	80299c0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 802993c:	e06a      	b.n	8029a14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802993e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029942:	d066      	beq.n	8029a12 <HAL_TIM_ConfigClockSource+0x152>
 8029944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029948:	d017      	beq.n	802997a <HAL_TIM_ConfigClockSource+0xba>
      break;
 802994a:	e063      	b.n	8029a14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 802994c:	687b      	ldr	r3, [r7, #4]
 802994e:	6818      	ldr	r0, [r3, #0]
 8029950:	683b      	ldr	r3, [r7, #0]
 8029952:	6899      	ldr	r1, [r3, #8]
 8029954:	683b      	ldr	r3, [r7, #0]
 8029956:	685a      	ldr	r2, [r3, #4]
 8029958:	683b      	ldr	r3, [r7, #0]
 802995a:	68db      	ldr	r3, [r3, #12]
 802995c:	f000 fb5a 	bl	802a014 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8029960:	687b      	ldr	r3, [r7, #4]
 8029962:	681b      	ldr	r3, [r3, #0]
 8029964:	689b      	ldr	r3, [r3, #8]
 8029966:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8029968:	68fb      	ldr	r3, [r7, #12]
 802996a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 802996e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8029970:	687b      	ldr	r3, [r7, #4]
 8029972:	681b      	ldr	r3, [r3, #0]
 8029974:	68fa      	ldr	r2, [r7, #12]
 8029976:	609a      	str	r2, [r3, #8]
      break;
 8029978:	e04c      	b.n	8029a14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 802997a:	687b      	ldr	r3, [r7, #4]
 802997c:	6818      	ldr	r0, [r3, #0]
 802997e:	683b      	ldr	r3, [r7, #0]
 8029980:	6899      	ldr	r1, [r3, #8]
 8029982:	683b      	ldr	r3, [r7, #0]
 8029984:	685a      	ldr	r2, [r3, #4]
 8029986:	683b      	ldr	r3, [r7, #0]
 8029988:	68db      	ldr	r3, [r3, #12]
 802998a:	f000 fb43 	bl	802a014 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802998e:	687b      	ldr	r3, [r7, #4]
 8029990:	681b      	ldr	r3, [r3, #0]
 8029992:	689a      	ldr	r2, [r3, #8]
 8029994:	687b      	ldr	r3, [r7, #4]
 8029996:	681b      	ldr	r3, [r3, #0]
 8029998:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802999c:	609a      	str	r2, [r3, #8]
      break;
 802999e:	e039      	b.n	8029a14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80299a0:	687b      	ldr	r3, [r7, #4]
 80299a2:	6818      	ldr	r0, [r3, #0]
 80299a4:	683b      	ldr	r3, [r7, #0]
 80299a6:	6859      	ldr	r1, [r3, #4]
 80299a8:	683b      	ldr	r3, [r7, #0]
 80299aa:	68db      	ldr	r3, [r3, #12]
 80299ac:	461a      	mov	r2, r3
 80299ae:	f000 fab7 	bl	8029f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80299b2:	687b      	ldr	r3, [r7, #4]
 80299b4:	681b      	ldr	r3, [r3, #0]
 80299b6:	2150      	movs	r1, #80	; 0x50
 80299b8:	4618      	mov	r0, r3
 80299ba:	f000 fb10 	bl	8029fde <TIM_ITRx_SetConfig>
      break;
 80299be:	e029      	b.n	8029a14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80299c0:	687b      	ldr	r3, [r7, #4]
 80299c2:	6818      	ldr	r0, [r3, #0]
 80299c4:	683b      	ldr	r3, [r7, #0]
 80299c6:	6859      	ldr	r1, [r3, #4]
 80299c8:	683b      	ldr	r3, [r7, #0]
 80299ca:	68db      	ldr	r3, [r3, #12]
 80299cc:	461a      	mov	r2, r3
 80299ce:	f000 fad6 	bl	8029f7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80299d2:	687b      	ldr	r3, [r7, #4]
 80299d4:	681b      	ldr	r3, [r3, #0]
 80299d6:	2160      	movs	r1, #96	; 0x60
 80299d8:	4618      	mov	r0, r3
 80299da:	f000 fb00 	bl	8029fde <TIM_ITRx_SetConfig>
      break;
 80299de:	e019      	b.n	8029a14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80299e0:	687b      	ldr	r3, [r7, #4]
 80299e2:	6818      	ldr	r0, [r3, #0]
 80299e4:	683b      	ldr	r3, [r7, #0]
 80299e6:	6859      	ldr	r1, [r3, #4]
 80299e8:	683b      	ldr	r3, [r7, #0]
 80299ea:	68db      	ldr	r3, [r3, #12]
 80299ec:	461a      	mov	r2, r3
 80299ee:	f000 fa97 	bl	8029f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80299f2:	687b      	ldr	r3, [r7, #4]
 80299f4:	681b      	ldr	r3, [r3, #0]
 80299f6:	2140      	movs	r1, #64	; 0x40
 80299f8:	4618      	mov	r0, r3
 80299fa:	f000 faf0 	bl	8029fde <TIM_ITRx_SetConfig>
      break;
 80299fe:	e009      	b.n	8029a14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8029a00:	687b      	ldr	r3, [r7, #4]
 8029a02:	681a      	ldr	r2, [r3, #0]
 8029a04:	683b      	ldr	r3, [r7, #0]
 8029a06:	681b      	ldr	r3, [r3, #0]
 8029a08:	4619      	mov	r1, r3
 8029a0a:	4610      	mov	r0, r2
 8029a0c:	f000 fae7 	bl	8029fde <TIM_ITRx_SetConfig>
      break;
 8029a10:	e000      	b.n	8029a14 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8029a12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8029a14:	687b      	ldr	r3, [r7, #4]
 8029a16:	2201      	movs	r2, #1
 8029a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029a1c:	687b      	ldr	r3, [r7, #4]
 8029a1e:	2200      	movs	r2, #0
 8029a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029a24:	2300      	movs	r3, #0
}
 8029a26:	4618      	mov	r0, r3
 8029a28:	3710      	adds	r7, #16
 8029a2a:	46bd      	mov	sp, r7
 8029a2c:	bd80      	pop	{r7, pc}

08029a2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8029a2e:	b480      	push	{r7}
 8029a30:	b083      	sub	sp, #12
 8029a32:	af00      	add	r7, sp, #0
 8029a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8029a36:	bf00      	nop
 8029a38:	370c      	adds	r7, #12
 8029a3a:	46bd      	mov	sp, r7
 8029a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a40:	4770      	bx	lr

08029a42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8029a42:	b480      	push	{r7}
 8029a44:	b083      	sub	sp, #12
 8029a46:	af00      	add	r7, sp, #0
 8029a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8029a4a:	bf00      	nop
 8029a4c:	370c      	adds	r7, #12
 8029a4e:	46bd      	mov	sp, r7
 8029a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a54:	4770      	bx	lr

08029a56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8029a56:	b480      	push	{r7}
 8029a58:	b083      	sub	sp, #12
 8029a5a:	af00      	add	r7, sp, #0
 8029a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8029a5e:	bf00      	nop
 8029a60:	370c      	adds	r7, #12
 8029a62:	46bd      	mov	sp, r7
 8029a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a68:	4770      	bx	lr

08029a6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8029a6a:	b480      	push	{r7}
 8029a6c:	b083      	sub	sp, #12
 8029a6e:	af00      	add	r7, sp, #0
 8029a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8029a72:	bf00      	nop
 8029a74:	370c      	adds	r7, #12
 8029a76:	46bd      	mov	sp, r7
 8029a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a7c:	4770      	bx	lr
	...

08029a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8029a80:	b480      	push	{r7}
 8029a82:	b085      	sub	sp, #20
 8029a84:	af00      	add	r7, sp, #0
 8029a86:	6078      	str	r0, [r7, #4]
 8029a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8029a8a:	687b      	ldr	r3, [r7, #4]
 8029a8c:	681b      	ldr	r3, [r3, #0]
 8029a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8029a90:	687b      	ldr	r3, [r7, #4]
 8029a92:	4a40      	ldr	r2, [pc, #256]	; (8029b94 <TIM_Base_SetConfig+0x114>)
 8029a94:	4293      	cmp	r3, r2
 8029a96:	d013      	beq.n	8029ac0 <TIM_Base_SetConfig+0x40>
 8029a98:	687b      	ldr	r3, [r7, #4]
 8029a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029a9e:	d00f      	beq.n	8029ac0 <TIM_Base_SetConfig+0x40>
 8029aa0:	687b      	ldr	r3, [r7, #4]
 8029aa2:	4a3d      	ldr	r2, [pc, #244]	; (8029b98 <TIM_Base_SetConfig+0x118>)
 8029aa4:	4293      	cmp	r3, r2
 8029aa6:	d00b      	beq.n	8029ac0 <TIM_Base_SetConfig+0x40>
 8029aa8:	687b      	ldr	r3, [r7, #4]
 8029aaa:	4a3c      	ldr	r2, [pc, #240]	; (8029b9c <TIM_Base_SetConfig+0x11c>)
 8029aac:	4293      	cmp	r3, r2
 8029aae:	d007      	beq.n	8029ac0 <TIM_Base_SetConfig+0x40>
 8029ab0:	687b      	ldr	r3, [r7, #4]
 8029ab2:	4a3b      	ldr	r2, [pc, #236]	; (8029ba0 <TIM_Base_SetConfig+0x120>)
 8029ab4:	4293      	cmp	r3, r2
 8029ab6:	d003      	beq.n	8029ac0 <TIM_Base_SetConfig+0x40>
 8029ab8:	687b      	ldr	r3, [r7, #4]
 8029aba:	4a3a      	ldr	r2, [pc, #232]	; (8029ba4 <TIM_Base_SetConfig+0x124>)
 8029abc:	4293      	cmp	r3, r2
 8029abe:	d108      	bne.n	8029ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8029ac0:	68fb      	ldr	r3, [r7, #12]
 8029ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8029ac8:	683b      	ldr	r3, [r7, #0]
 8029aca:	685b      	ldr	r3, [r3, #4]
 8029acc:	68fa      	ldr	r2, [r7, #12]
 8029ace:	4313      	orrs	r3, r2
 8029ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8029ad2:	687b      	ldr	r3, [r7, #4]
 8029ad4:	4a2f      	ldr	r2, [pc, #188]	; (8029b94 <TIM_Base_SetConfig+0x114>)
 8029ad6:	4293      	cmp	r3, r2
 8029ad8:	d02b      	beq.n	8029b32 <TIM_Base_SetConfig+0xb2>
 8029ada:	687b      	ldr	r3, [r7, #4]
 8029adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029ae0:	d027      	beq.n	8029b32 <TIM_Base_SetConfig+0xb2>
 8029ae2:	687b      	ldr	r3, [r7, #4]
 8029ae4:	4a2c      	ldr	r2, [pc, #176]	; (8029b98 <TIM_Base_SetConfig+0x118>)
 8029ae6:	4293      	cmp	r3, r2
 8029ae8:	d023      	beq.n	8029b32 <TIM_Base_SetConfig+0xb2>
 8029aea:	687b      	ldr	r3, [r7, #4]
 8029aec:	4a2b      	ldr	r2, [pc, #172]	; (8029b9c <TIM_Base_SetConfig+0x11c>)
 8029aee:	4293      	cmp	r3, r2
 8029af0:	d01f      	beq.n	8029b32 <TIM_Base_SetConfig+0xb2>
 8029af2:	687b      	ldr	r3, [r7, #4]
 8029af4:	4a2a      	ldr	r2, [pc, #168]	; (8029ba0 <TIM_Base_SetConfig+0x120>)
 8029af6:	4293      	cmp	r3, r2
 8029af8:	d01b      	beq.n	8029b32 <TIM_Base_SetConfig+0xb2>
 8029afa:	687b      	ldr	r3, [r7, #4]
 8029afc:	4a29      	ldr	r2, [pc, #164]	; (8029ba4 <TIM_Base_SetConfig+0x124>)
 8029afe:	4293      	cmp	r3, r2
 8029b00:	d017      	beq.n	8029b32 <TIM_Base_SetConfig+0xb2>
 8029b02:	687b      	ldr	r3, [r7, #4]
 8029b04:	4a28      	ldr	r2, [pc, #160]	; (8029ba8 <TIM_Base_SetConfig+0x128>)
 8029b06:	4293      	cmp	r3, r2
 8029b08:	d013      	beq.n	8029b32 <TIM_Base_SetConfig+0xb2>
 8029b0a:	687b      	ldr	r3, [r7, #4]
 8029b0c:	4a27      	ldr	r2, [pc, #156]	; (8029bac <TIM_Base_SetConfig+0x12c>)
 8029b0e:	4293      	cmp	r3, r2
 8029b10:	d00f      	beq.n	8029b32 <TIM_Base_SetConfig+0xb2>
 8029b12:	687b      	ldr	r3, [r7, #4]
 8029b14:	4a26      	ldr	r2, [pc, #152]	; (8029bb0 <TIM_Base_SetConfig+0x130>)
 8029b16:	4293      	cmp	r3, r2
 8029b18:	d00b      	beq.n	8029b32 <TIM_Base_SetConfig+0xb2>
 8029b1a:	687b      	ldr	r3, [r7, #4]
 8029b1c:	4a25      	ldr	r2, [pc, #148]	; (8029bb4 <TIM_Base_SetConfig+0x134>)
 8029b1e:	4293      	cmp	r3, r2
 8029b20:	d007      	beq.n	8029b32 <TIM_Base_SetConfig+0xb2>
 8029b22:	687b      	ldr	r3, [r7, #4]
 8029b24:	4a24      	ldr	r2, [pc, #144]	; (8029bb8 <TIM_Base_SetConfig+0x138>)
 8029b26:	4293      	cmp	r3, r2
 8029b28:	d003      	beq.n	8029b32 <TIM_Base_SetConfig+0xb2>
 8029b2a:	687b      	ldr	r3, [r7, #4]
 8029b2c:	4a23      	ldr	r2, [pc, #140]	; (8029bbc <TIM_Base_SetConfig+0x13c>)
 8029b2e:	4293      	cmp	r3, r2
 8029b30:	d108      	bne.n	8029b44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8029b32:	68fb      	ldr	r3, [r7, #12]
 8029b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8029b3a:	683b      	ldr	r3, [r7, #0]
 8029b3c:	68db      	ldr	r3, [r3, #12]
 8029b3e:	68fa      	ldr	r2, [r7, #12]
 8029b40:	4313      	orrs	r3, r2
 8029b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8029b44:	68fb      	ldr	r3, [r7, #12]
 8029b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8029b4a:	683b      	ldr	r3, [r7, #0]
 8029b4c:	695b      	ldr	r3, [r3, #20]
 8029b4e:	4313      	orrs	r3, r2
 8029b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8029b52:	687b      	ldr	r3, [r7, #4]
 8029b54:	68fa      	ldr	r2, [r7, #12]
 8029b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8029b58:	683b      	ldr	r3, [r7, #0]
 8029b5a:	689a      	ldr	r2, [r3, #8]
 8029b5c:	687b      	ldr	r3, [r7, #4]
 8029b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8029b60:	683b      	ldr	r3, [r7, #0]
 8029b62:	681a      	ldr	r2, [r3, #0]
 8029b64:	687b      	ldr	r3, [r7, #4]
 8029b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8029b68:	687b      	ldr	r3, [r7, #4]
 8029b6a:	4a0a      	ldr	r2, [pc, #40]	; (8029b94 <TIM_Base_SetConfig+0x114>)
 8029b6c:	4293      	cmp	r3, r2
 8029b6e:	d003      	beq.n	8029b78 <TIM_Base_SetConfig+0xf8>
 8029b70:	687b      	ldr	r3, [r7, #4]
 8029b72:	4a0c      	ldr	r2, [pc, #48]	; (8029ba4 <TIM_Base_SetConfig+0x124>)
 8029b74:	4293      	cmp	r3, r2
 8029b76:	d103      	bne.n	8029b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8029b78:	683b      	ldr	r3, [r7, #0]
 8029b7a:	691a      	ldr	r2, [r3, #16]
 8029b7c:	687b      	ldr	r3, [r7, #4]
 8029b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8029b80:	687b      	ldr	r3, [r7, #4]
 8029b82:	2201      	movs	r2, #1
 8029b84:	615a      	str	r2, [r3, #20]
}
 8029b86:	bf00      	nop
 8029b88:	3714      	adds	r7, #20
 8029b8a:	46bd      	mov	sp, r7
 8029b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b90:	4770      	bx	lr
 8029b92:	bf00      	nop
 8029b94:	40010000 	.word	0x40010000
 8029b98:	40000400 	.word	0x40000400
 8029b9c:	40000800 	.word	0x40000800
 8029ba0:	40000c00 	.word	0x40000c00
 8029ba4:	40010400 	.word	0x40010400
 8029ba8:	40014000 	.word	0x40014000
 8029bac:	40014400 	.word	0x40014400
 8029bb0:	40014800 	.word	0x40014800
 8029bb4:	40001800 	.word	0x40001800
 8029bb8:	40001c00 	.word	0x40001c00
 8029bbc:	40002000 	.word	0x40002000

08029bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029bc0:	b480      	push	{r7}
 8029bc2:	b087      	sub	sp, #28
 8029bc4:	af00      	add	r7, sp, #0
 8029bc6:	6078      	str	r0, [r7, #4]
 8029bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029bca:	687b      	ldr	r3, [r7, #4]
 8029bcc:	6a1b      	ldr	r3, [r3, #32]
 8029bce:	f023 0201 	bic.w	r2, r3, #1
 8029bd2:	687b      	ldr	r3, [r7, #4]
 8029bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029bd6:	687b      	ldr	r3, [r7, #4]
 8029bd8:	6a1b      	ldr	r3, [r3, #32]
 8029bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029bdc:	687b      	ldr	r3, [r7, #4]
 8029bde:	685b      	ldr	r3, [r3, #4]
 8029be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029be2:	687b      	ldr	r3, [r7, #4]
 8029be4:	699b      	ldr	r3, [r3, #24]
 8029be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8029be8:	68fb      	ldr	r3, [r7, #12]
 8029bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8029bf0:	68fb      	ldr	r3, [r7, #12]
 8029bf2:	f023 0303 	bic.w	r3, r3, #3
 8029bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029bf8:	683b      	ldr	r3, [r7, #0]
 8029bfa:	681b      	ldr	r3, [r3, #0]
 8029bfc:	68fa      	ldr	r2, [r7, #12]
 8029bfe:	4313      	orrs	r3, r2
 8029c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8029c02:	697b      	ldr	r3, [r7, #20]
 8029c04:	f023 0302 	bic.w	r3, r3, #2
 8029c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8029c0a:	683b      	ldr	r3, [r7, #0]
 8029c0c:	689b      	ldr	r3, [r3, #8]
 8029c0e:	697a      	ldr	r2, [r7, #20]
 8029c10:	4313      	orrs	r3, r2
 8029c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8029c14:	687b      	ldr	r3, [r7, #4]
 8029c16:	4a20      	ldr	r2, [pc, #128]	; (8029c98 <TIM_OC1_SetConfig+0xd8>)
 8029c18:	4293      	cmp	r3, r2
 8029c1a:	d003      	beq.n	8029c24 <TIM_OC1_SetConfig+0x64>
 8029c1c:	687b      	ldr	r3, [r7, #4]
 8029c1e:	4a1f      	ldr	r2, [pc, #124]	; (8029c9c <TIM_OC1_SetConfig+0xdc>)
 8029c20:	4293      	cmp	r3, r2
 8029c22:	d10c      	bne.n	8029c3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8029c24:	697b      	ldr	r3, [r7, #20]
 8029c26:	f023 0308 	bic.w	r3, r3, #8
 8029c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8029c2c:	683b      	ldr	r3, [r7, #0]
 8029c2e:	68db      	ldr	r3, [r3, #12]
 8029c30:	697a      	ldr	r2, [r7, #20]
 8029c32:	4313      	orrs	r3, r2
 8029c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8029c36:	697b      	ldr	r3, [r7, #20]
 8029c38:	f023 0304 	bic.w	r3, r3, #4
 8029c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029c3e:	687b      	ldr	r3, [r7, #4]
 8029c40:	4a15      	ldr	r2, [pc, #84]	; (8029c98 <TIM_OC1_SetConfig+0xd8>)
 8029c42:	4293      	cmp	r3, r2
 8029c44:	d003      	beq.n	8029c4e <TIM_OC1_SetConfig+0x8e>
 8029c46:	687b      	ldr	r3, [r7, #4]
 8029c48:	4a14      	ldr	r2, [pc, #80]	; (8029c9c <TIM_OC1_SetConfig+0xdc>)
 8029c4a:	4293      	cmp	r3, r2
 8029c4c:	d111      	bne.n	8029c72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8029c4e:	693b      	ldr	r3, [r7, #16]
 8029c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8029c56:	693b      	ldr	r3, [r7, #16]
 8029c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8029c5e:	683b      	ldr	r3, [r7, #0]
 8029c60:	695b      	ldr	r3, [r3, #20]
 8029c62:	693a      	ldr	r2, [r7, #16]
 8029c64:	4313      	orrs	r3, r2
 8029c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8029c68:	683b      	ldr	r3, [r7, #0]
 8029c6a:	699b      	ldr	r3, [r3, #24]
 8029c6c:	693a      	ldr	r2, [r7, #16]
 8029c6e:	4313      	orrs	r3, r2
 8029c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029c72:	687b      	ldr	r3, [r7, #4]
 8029c74:	693a      	ldr	r2, [r7, #16]
 8029c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029c78:	687b      	ldr	r3, [r7, #4]
 8029c7a:	68fa      	ldr	r2, [r7, #12]
 8029c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8029c7e:	683b      	ldr	r3, [r7, #0]
 8029c80:	685a      	ldr	r2, [r3, #4]
 8029c82:	687b      	ldr	r3, [r7, #4]
 8029c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029c86:	687b      	ldr	r3, [r7, #4]
 8029c88:	697a      	ldr	r2, [r7, #20]
 8029c8a:	621a      	str	r2, [r3, #32]
}
 8029c8c:	bf00      	nop
 8029c8e:	371c      	adds	r7, #28
 8029c90:	46bd      	mov	sp, r7
 8029c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c96:	4770      	bx	lr
 8029c98:	40010000 	.word	0x40010000
 8029c9c:	40010400 	.word	0x40010400

08029ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029ca0:	b480      	push	{r7}
 8029ca2:	b087      	sub	sp, #28
 8029ca4:	af00      	add	r7, sp, #0
 8029ca6:	6078      	str	r0, [r7, #4]
 8029ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029caa:	687b      	ldr	r3, [r7, #4]
 8029cac:	6a1b      	ldr	r3, [r3, #32]
 8029cae:	f023 0210 	bic.w	r2, r3, #16
 8029cb2:	687b      	ldr	r3, [r7, #4]
 8029cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029cb6:	687b      	ldr	r3, [r7, #4]
 8029cb8:	6a1b      	ldr	r3, [r3, #32]
 8029cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029cbc:	687b      	ldr	r3, [r7, #4]
 8029cbe:	685b      	ldr	r3, [r3, #4]
 8029cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029cc2:	687b      	ldr	r3, [r7, #4]
 8029cc4:	699b      	ldr	r3, [r3, #24]
 8029cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8029cc8:	68fb      	ldr	r3, [r7, #12]
 8029cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8029cd0:	68fb      	ldr	r3, [r7, #12]
 8029cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029cd8:	683b      	ldr	r3, [r7, #0]
 8029cda:	681b      	ldr	r3, [r3, #0]
 8029cdc:	021b      	lsls	r3, r3, #8
 8029cde:	68fa      	ldr	r2, [r7, #12]
 8029ce0:	4313      	orrs	r3, r2
 8029ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8029ce4:	697b      	ldr	r3, [r7, #20]
 8029ce6:	f023 0320 	bic.w	r3, r3, #32
 8029cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8029cec:	683b      	ldr	r3, [r7, #0]
 8029cee:	689b      	ldr	r3, [r3, #8]
 8029cf0:	011b      	lsls	r3, r3, #4
 8029cf2:	697a      	ldr	r2, [r7, #20]
 8029cf4:	4313      	orrs	r3, r2
 8029cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8029cf8:	687b      	ldr	r3, [r7, #4]
 8029cfa:	4a22      	ldr	r2, [pc, #136]	; (8029d84 <TIM_OC2_SetConfig+0xe4>)
 8029cfc:	4293      	cmp	r3, r2
 8029cfe:	d003      	beq.n	8029d08 <TIM_OC2_SetConfig+0x68>
 8029d00:	687b      	ldr	r3, [r7, #4]
 8029d02:	4a21      	ldr	r2, [pc, #132]	; (8029d88 <TIM_OC2_SetConfig+0xe8>)
 8029d04:	4293      	cmp	r3, r2
 8029d06:	d10d      	bne.n	8029d24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8029d08:	697b      	ldr	r3, [r7, #20]
 8029d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8029d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8029d10:	683b      	ldr	r3, [r7, #0]
 8029d12:	68db      	ldr	r3, [r3, #12]
 8029d14:	011b      	lsls	r3, r3, #4
 8029d16:	697a      	ldr	r2, [r7, #20]
 8029d18:	4313      	orrs	r3, r2
 8029d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8029d1c:	697b      	ldr	r3, [r7, #20]
 8029d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029d22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029d24:	687b      	ldr	r3, [r7, #4]
 8029d26:	4a17      	ldr	r2, [pc, #92]	; (8029d84 <TIM_OC2_SetConfig+0xe4>)
 8029d28:	4293      	cmp	r3, r2
 8029d2a:	d003      	beq.n	8029d34 <TIM_OC2_SetConfig+0x94>
 8029d2c:	687b      	ldr	r3, [r7, #4]
 8029d2e:	4a16      	ldr	r2, [pc, #88]	; (8029d88 <TIM_OC2_SetConfig+0xe8>)
 8029d30:	4293      	cmp	r3, r2
 8029d32:	d113      	bne.n	8029d5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8029d34:	693b      	ldr	r3, [r7, #16]
 8029d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8029d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8029d3c:	693b      	ldr	r3, [r7, #16]
 8029d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8029d44:	683b      	ldr	r3, [r7, #0]
 8029d46:	695b      	ldr	r3, [r3, #20]
 8029d48:	009b      	lsls	r3, r3, #2
 8029d4a:	693a      	ldr	r2, [r7, #16]
 8029d4c:	4313      	orrs	r3, r2
 8029d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8029d50:	683b      	ldr	r3, [r7, #0]
 8029d52:	699b      	ldr	r3, [r3, #24]
 8029d54:	009b      	lsls	r3, r3, #2
 8029d56:	693a      	ldr	r2, [r7, #16]
 8029d58:	4313      	orrs	r3, r2
 8029d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029d5c:	687b      	ldr	r3, [r7, #4]
 8029d5e:	693a      	ldr	r2, [r7, #16]
 8029d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029d62:	687b      	ldr	r3, [r7, #4]
 8029d64:	68fa      	ldr	r2, [r7, #12]
 8029d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8029d68:	683b      	ldr	r3, [r7, #0]
 8029d6a:	685a      	ldr	r2, [r3, #4]
 8029d6c:	687b      	ldr	r3, [r7, #4]
 8029d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029d70:	687b      	ldr	r3, [r7, #4]
 8029d72:	697a      	ldr	r2, [r7, #20]
 8029d74:	621a      	str	r2, [r3, #32]
}
 8029d76:	bf00      	nop
 8029d78:	371c      	adds	r7, #28
 8029d7a:	46bd      	mov	sp, r7
 8029d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d80:	4770      	bx	lr
 8029d82:	bf00      	nop
 8029d84:	40010000 	.word	0x40010000
 8029d88:	40010400 	.word	0x40010400

08029d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029d8c:	b480      	push	{r7}
 8029d8e:	b087      	sub	sp, #28
 8029d90:	af00      	add	r7, sp, #0
 8029d92:	6078      	str	r0, [r7, #4]
 8029d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8029d96:	687b      	ldr	r3, [r7, #4]
 8029d98:	6a1b      	ldr	r3, [r3, #32]
 8029d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8029d9e:	687b      	ldr	r3, [r7, #4]
 8029da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029da2:	687b      	ldr	r3, [r7, #4]
 8029da4:	6a1b      	ldr	r3, [r3, #32]
 8029da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029da8:	687b      	ldr	r3, [r7, #4]
 8029daa:	685b      	ldr	r3, [r3, #4]
 8029dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8029dae:	687b      	ldr	r3, [r7, #4]
 8029db0:	69db      	ldr	r3, [r3, #28]
 8029db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8029db4:	68fb      	ldr	r3, [r7, #12]
 8029db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8029dbc:	68fb      	ldr	r3, [r7, #12]
 8029dbe:	f023 0303 	bic.w	r3, r3, #3
 8029dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029dc4:	683b      	ldr	r3, [r7, #0]
 8029dc6:	681b      	ldr	r3, [r3, #0]
 8029dc8:	68fa      	ldr	r2, [r7, #12]
 8029dca:	4313      	orrs	r3, r2
 8029dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8029dce:	697b      	ldr	r3, [r7, #20]
 8029dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8029dd6:	683b      	ldr	r3, [r7, #0]
 8029dd8:	689b      	ldr	r3, [r3, #8]
 8029dda:	021b      	lsls	r3, r3, #8
 8029ddc:	697a      	ldr	r2, [r7, #20]
 8029dde:	4313      	orrs	r3, r2
 8029de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8029de2:	687b      	ldr	r3, [r7, #4]
 8029de4:	4a21      	ldr	r2, [pc, #132]	; (8029e6c <TIM_OC3_SetConfig+0xe0>)
 8029de6:	4293      	cmp	r3, r2
 8029de8:	d003      	beq.n	8029df2 <TIM_OC3_SetConfig+0x66>
 8029dea:	687b      	ldr	r3, [r7, #4]
 8029dec:	4a20      	ldr	r2, [pc, #128]	; (8029e70 <TIM_OC3_SetConfig+0xe4>)
 8029dee:	4293      	cmp	r3, r2
 8029df0:	d10d      	bne.n	8029e0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8029df2:	697b      	ldr	r3, [r7, #20]
 8029df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8029dfa:	683b      	ldr	r3, [r7, #0]
 8029dfc:	68db      	ldr	r3, [r3, #12]
 8029dfe:	021b      	lsls	r3, r3, #8
 8029e00:	697a      	ldr	r2, [r7, #20]
 8029e02:	4313      	orrs	r3, r2
 8029e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8029e06:	697b      	ldr	r3, [r7, #20]
 8029e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8029e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029e0e:	687b      	ldr	r3, [r7, #4]
 8029e10:	4a16      	ldr	r2, [pc, #88]	; (8029e6c <TIM_OC3_SetConfig+0xe0>)
 8029e12:	4293      	cmp	r3, r2
 8029e14:	d003      	beq.n	8029e1e <TIM_OC3_SetConfig+0x92>
 8029e16:	687b      	ldr	r3, [r7, #4]
 8029e18:	4a15      	ldr	r2, [pc, #84]	; (8029e70 <TIM_OC3_SetConfig+0xe4>)
 8029e1a:	4293      	cmp	r3, r2
 8029e1c:	d113      	bne.n	8029e46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8029e1e:	693b      	ldr	r3, [r7, #16]
 8029e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8029e26:	693b      	ldr	r3, [r7, #16]
 8029e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8029e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8029e2e:	683b      	ldr	r3, [r7, #0]
 8029e30:	695b      	ldr	r3, [r3, #20]
 8029e32:	011b      	lsls	r3, r3, #4
 8029e34:	693a      	ldr	r2, [r7, #16]
 8029e36:	4313      	orrs	r3, r2
 8029e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8029e3a:	683b      	ldr	r3, [r7, #0]
 8029e3c:	699b      	ldr	r3, [r3, #24]
 8029e3e:	011b      	lsls	r3, r3, #4
 8029e40:	693a      	ldr	r2, [r7, #16]
 8029e42:	4313      	orrs	r3, r2
 8029e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029e46:	687b      	ldr	r3, [r7, #4]
 8029e48:	693a      	ldr	r2, [r7, #16]
 8029e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8029e4c:	687b      	ldr	r3, [r7, #4]
 8029e4e:	68fa      	ldr	r2, [r7, #12]
 8029e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8029e52:	683b      	ldr	r3, [r7, #0]
 8029e54:	685a      	ldr	r2, [r3, #4]
 8029e56:	687b      	ldr	r3, [r7, #4]
 8029e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029e5a:	687b      	ldr	r3, [r7, #4]
 8029e5c:	697a      	ldr	r2, [r7, #20]
 8029e5e:	621a      	str	r2, [r3, #32]
}
 8029e60:	bf00      	nop
 8029e62:	371c      	adds	r7, #28
 8029e64:	46bd      	mov	sp, r7
 8029e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e6a:	4770      	bx	lr
 8029e6c:	40010000 	.word	0x40010000
 8029e70:	40010400 	.word	0x40010400

08029e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029e74:	b480      	push	{r7}
 8029e76:	b087      	sub	sp, #28
 8029e78:	af00      	add	r7, sp, #0
 8029e7a:	6078      	str	r0, [r7, #4]
 8029e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8029e7e:	687b      	ldr	r3, [r7, #4]
 8029e80:	6a1b      	ldr	r3, [r3, #32]
 8029e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8029e86:	687b      	ldr	r3, [r7, #4]
 8029e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029e8a:	687b      	ldr	r3, [r7, #4]
 8029e8c:	6a1b      	ldr	r3, [r3, #32]
 8029e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029e90:	687b      	ldr	r3, [r7, #4]
 8029e92:	685b      	ldr	r3, [r3, #4]
 8029e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8029e96:	687b      	ldr	r3, [r7, #4]
 8029e98:	69db      	ldr	r3, [r3, #28]
 8029e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8029e9c:	68fb      	ldr	r3, [r7, #12]
 8029e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8029ea4:	68fb      	ldr	r3, [r7, #12]
 8029ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029eac:	683b      	ldr	r3, [r7, #0]
 8029eae:	681b      	ldr	r3, [r3, #0]
 8029eb0:	021b      	lsls	r3, r3, #8
 8029eb2:	68fa      	ldr	r2, [r7, #12]
 8029eb4:	4313      	orrs	r3, r2
 8029eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8029eb8:	693b      	ldr	r3, [r7, #16]
 8029eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8029ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8029ec0:	683b      	ldr	r3, [r7, #0]
 8029ec2:	689b      	ldr	r3, [r3, #8]
 8029ec4:	031b      	lsls	r3, r3, #12
 8029ec6:	693a      	ldr	r2, [r7, #16]
 8029ec8:	4313      	orrs	r3, r2
 8029eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029ecc:	687b      	ldr	r3, [r7, #4]
 8029ece:	4a12      	ldr	r2, [pc, #72]	; (8029f18 <TIM_OC4_SetConfig+0xa4>)
 8029ed0:	4293      	cmp	r3, r2
 8029ed2:	d003      	beq.n	8029edc <TIM_OC4_SetConfig+0x68>
 8029ed4:	687b      	ldr	r3, [r7, #4]
 8029ed6:	4a11      	ldr	r2, [pc, #68]	; (8029f1c <TIM_OC4_SetConfig+0xa8>)
 8029ed8:	4293      	cmp	r3, r2
 8029eda:	d109      	bne.n	8029ef0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8029edc:	697b      	ldr	r3, [r7, #20]
 8029ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8029ee4:	683b      	ldr	r3, [r7, #0]
 8029ee6:	695b      	ldr	r3, [r3, #20]
 8029ee8:	019b      	lsls	r3, r3, #6
 8029eea:	697a      	ldr	r2, [r7, #20]
 8029eec:	4313      	orrs	r3, r2
 8029eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029ef0:	687b      	ldr	r3, [r7, #4]
 8029ef2:	697a      	ldr	r2, [r7, #20]
 8029ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8029ef6:	687b      	ldr	r3, [r7, #4]
 8029ef8:	68fa      	ldr	r2, [r7, #12]
 8029efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8029efc:	683b      	ldr	r3, [r7, #0]
 8029efe:	685a      	ldr	r2, [r3, #4]
 8029f00:	687b      	ldr	r3, [r7, #4]
 8029f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029f04:	687b      	ldr	r3, [r7, #4]
 8029f06:	693a      	ldr	r2, [r7, #16]
 8029f08:	621a      	str	r2, [r3, #32]
}
 8029f0a:	bf00      	nop
 8029f0c:	371c      	adds	r7, #28
 8029f0e:	46bd      	mov	sp, r7
 8029f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f14:	4770      	bx	lr
 8029f16:	bf00      	nop
 8029f18:	40010000 	.word	0x40010000
 8029f1c:	40010400 	.word	0x40010400

08029f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029f20:	b480      	push	{r7}
 8029f22:	b087      	sub	sp, #28
 8029f24:	af00      	add	r7, sp, #0
 8029f26:	60f8      	str	r0, [r7, #12]
 8029f28:	60b9      	str	r1, [r7, #8]
 8029f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8029f2c:	68fb      	ldr	r3, [r7, #12]
 8029f2e:	6a1b      	ldr	r3, [r3, #32]
 8029f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029f32:	68fb      	ldr	r3, [r7, #12]
 8029f34:	6a1b      	ldr	r3, [r3, #32]
 8029f36:	f023 0201 	bic.w	r2, r3, #1
 8029f3a:	68fb      	ldr	r3, [r7, #12]
 8029f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029f3e:	68fb      	ldr	r3, [r7, #12]
 8029f40:	699b      	ldr	r3, [r3, #24]
 8029f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8029f44:	693b      	ldr	r3, [r7, #16]
 8029f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8029f4c:	687b      	ldr	r3, [r7, #4]
 8029f4e:	011b      	lsls	r3, r3, #4
 8029f50:	693a      	ldr	r2, [r7, #16]
 8029f52:	4313      	orrs	r3, r2
 8029f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8029f56:	697b      	ldr	r3, [r7, #20]
 8029f58:	f023 030a 	bic.w	r3, r3, #10
 8029f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8029f5e:	697a      	ldr	r2, [r7, #20]
 8029f60:	68bb      	ldr	r3, [r7, #8]
 8029f62:	4313      	orrs	r3, r2
 8029f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8029f66:	68fb      	ldr	r3, [r7, #12]
 8029f68:	693a      	ldr	r2, [r7, #16]
 8029f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029f6c:	68fb      	ldr	r3, [r7, #12]
 8029f6e:	697a      	ldr	r2, [r7, #20]
 8029f70:	621a      	str	r2, [r3, #32]
}
 8029f72:	bf00      	nop
 8029f74:	371c      	adds	r7, #28
 8029f76:	46bd      	mov	sp, r7
 8029f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f7c:	4770      	bx	lr

08029f7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029f7e:	b480      	push	{r7}
 8029f80:	b087      	sub	sp, #28
 8029f82:	af00      	add	r7, sp, #0
 8029f84:	60f8      	str	r0, [r7, #12]
 8029f86:	60b9      	str	r1, [r7, #8]
 8029f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029f8a:	68fb      	ldr	r3, [r7, #12]
 8029f8c:	6a1b      	ldr	r3, [r3, #32]
 8029f8e:	f023 0210 	bic.w	r2, r3, #16
 8029f92:	68fb      	ldr	r3, [r7, #12]
 8029f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029f96:	68fb      	ldr	r3, [r7, #12]
 8029f98:	699b      	ldr	r3, [r3, #24]
 8029f9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029f9c:	68fb      	ldr	r3, [r7, #12]
 8029f9e:	6a1b      	ldr	r3, [r3, #32]
 8029fa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8029fa2:	697b      	ldr	r3, [r7, #20]
 8029fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029fa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8029faa:	687b      	ldr	r3, [r7, #4]
 8029fac:	031b      	lsls	r3, r3, #12
 8029fae:	697a      	ldr	r2, [r7, #20]
 8029fb0:	4313      	orrs	r3, r2
 8029fb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8029fb4:	693b      	ldr	r3, [r7, #16]
 8029fb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8029fba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8029fbc:	68bb      	ldr	r3, [r7, #8]
 8029fbe:	011b      	lsls	r3, r3, #4
 8029fc0:	693a      	ldr	r2, [r7, #16]
 8029fc2:	4313      	orrs	r3, r2
 8029fc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8029fc6:	68fb      	ldr	r3, [r7, #12]
 8029fc8:	697a      	ldr	r2, [r7, #20]
 8029fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029fcc:	68fb      	ldr	r3, [r7, #12]
 8029fce:	693a      	ldr	r2, [r7, #16]
 8029fd0:	621a      	str	r2, [r3, #32]
}
 8029fd2:	bf00      	nop
 8029fd4:	371c      	adds	r7, #28
 8029fd6:	46bd      	mov	sp, r7
 8029fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fdc:	4770      	bx	lr

08029fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8029fde:	b480      	push	{r7}
 8029fe0:	b085      	sub	sp, #20
 8029fe2:	af00      	add	r7, sp, #0
 8029fe4:	6078      	str	r0, [r7, #4]
 8029fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8029fe8:	687b      	ldr	r3, [r7, #4]
 8029fea:	689b      	ldr	r3, [r3, #8]
 8029fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8029fee:	68fb      	ldr	r3, [r7, #12]
 8029ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8029ff6:	683a      	ldr	r2, [r7, #0]
 8029ff8:	68fb      	ldr	r3, [r7, #12]
 8029ffa:	4313      	orrs	r3, r2
 8029ffc:	f043 0307 	orr.w	r3, r3, #7
 802a000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a002:	687b      	ldr	r3, [r7, #4]
 802a004:	68fa      	ldr	r2, [r7, #12]
 802a006:	609a      	str	r2, [r3, #8]
}
 802a008:	bf00      	nop
 802a00a:	3714      	adds	r7, #20
 802a00c:	46bd      	mov	sp, r7
 802a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a012:	4770      	bx	lr

0802a014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802a014:	b480      	push	{r7}
 802a016:	b087      	sub	sp, #28
 802a018:	af00      	add	r7, sp, #0
 802a01a:	60f8      	str	r0, [r7, #12]
 802a01c:	60b9      	str	r1, [r7, #8]
 802a01e:	607a      	str	r2, [r7, #4]
 802a020:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802a022:	68fb      	ldr	r3, [r7, #12]
 802a024:	689b      	ldr	r3, [r3, #8]
 802a026:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802a028:	697b      	ldr	r3, [r7, #20]
 802a02a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802a02e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802a030:	683b      	ldr	r3, [r7, #0]
 802a032:	021a      	lsls	r2, r3, #8
 802a034:	687b      	ldr	r3, [r7, #4]
 802a036:	431a      	orrs	r2, r3
 802a038:	68bb      	ldr	r3, [r7, #8]
 802a03a:	4313      	orrs	r3, r2
 802a03c:	697a      	ldr	r2, [r7, #20]
 802a03e:	4313      	orrs	r3, r2
 802a040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a042:	68fb      	ldr	r3, [r7, #12]
 802a044:	697a      	ldr	r2, [r7, #20]
 802a046:	609a      	str	r2, [r3, #8]
}
 802a048:	bf00      	nop
 802a04a:	371c      	adds	r7, #28
 802a04c:	46bd      	mov	sp, r7
 802a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a052:	4770      	bx	lr

0802a054 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 802a054:	b480      	push	{r7}
 802a056:	b087      	sub	sp, #28
 802a058:	af00      	add	r7, sp, #0
 802a05a:	60f8      	str	r0, [r7, #12]
 802a05c:	60b9      	str	r1, [r7, #8]
 802a05e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 802a060:	68bb      	ldr	r3, [r7, #8]
 802a062:	f003 031f 	and.w	r3, r3, #31
 802a066:	2201      	movs	r2, #1
 802a068:	fa02 f303 	lsl.w	r3, r2, r3
 802a06c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802a06e:	68fb      	ldr	r3, [r7, #12]
 802a070:	6a1a      	ldr	r2, [r3, #32]
 802a072:	697b      	ldr	r3, [r7, #20]
 802a074:	43db      	mvns	r3, r3
 802a076:	401a      	ands	r2, r3
 802a078:	68fb      	ldr	r3, [r7, #12]
 802a07a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802a07c:	68fb      	ldr	r3, [r7, #12]
 802a07e:	6a1a      	ldr	r2, [r3, #32]
 802a080:	68bb      	ldr	r3, [r7, #8]
 802a082:	f003 031f 	and.w	r3, r3, #31
 802a086:	6879      	ldr	r1, [r7, #4]
 802a088:	fa01 f303 	lsl.w	r3, r1, r3
 802a08c:	431a      	orrs	r2, r3
 802a08e:	68fb      	ldr	r3, [r7, #12]
 802a090:	621a      	str	r2, [r3, #32]
}
 802a092:	bf00      	nop
 802a094:	371c      	adds	r7, #28
 802a096:	46bd      	mov	sp, r7
 802a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a09c:	4770      	bx	lr
	...

0802a0a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802a0a0:	b480      	push	{r7}
 802a0a2:	b085      	sub	sp, #20
 802a0a4:	af00      	add	r7, sp, #0
 802a0a6:	6078      	str	r0, [r7, #4]
 802a0a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802a0aa:	687b      	ldr	r3, [r7, #4]
 802a0ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a0b0:	2b01      	cmp	r3, #1
 802a0b2:	d101      	bne.n	802a0b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802a0b4:	2302      	movs	r3, #2
 802a0b6:	e05a      	b.n	802a16e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802a0b8:	687b      	ldr	r3, [r7, #4]
 802a0ba:	2201      	movs	r2, #1
 802a0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802a0c0:	687b      	ldr	r3, [r7, #4]
 802a0c2:	2202      	movs	r2, #2
 802a0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802a0c8:	687b      	ldr	r3, [r7, #4]
 802a0ca:	681b      	ldr	r3, [r3, #0]
 802a0cc:	685b      	ldr	r3, [r3, #4]
 802a0ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802a0d0:	687b      	ldr	r3, [r7, #4]
 802a0d2:	681b      	ldr	r3, [r3, #0]
 802a0d4:	689b      	ldr	r3, [r3, #8]
 802a0d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802a0d8:	68fb      	ldr	r3, [r7, #12]
 802a0da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a0de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802a0e0:	683b      	ldr	r3, [r7, #0]
 802a0e2:	681b      	ldr	r3, [r3, #0]
 802a0e4:	68fa      	ldr	r2, [r7, #12]
 802a0e6:	4313      	orrs	r3, r2
 802a0e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802a0ea:	687b      	ldr	r3, [r7, #4]
 802a0ec:	681b      	ldr	r3, [r3, #0]
 802a0ee:	68fa      	ldr	r2, [r7, #12]
 802a0f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802a0f2:	687b      	ldr	r3, [r7, #4]
 802a0f4:	681b      	ldr	r3, [r3, #0]
 802a0f6:	4a21      	ldr	r2, [pc, #132]	; (802a17c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 802a0f8:	4293      	cmp	r3, r2
 802a0fa:	d022      	beq.n	802a142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a0fc:	687b      	ldr	r3, [r7, #4]
 802a0fe:	681b      	ldr	r3, [r3, #0]
 802a100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a104:	d01d      	beq.n	802a142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a106:	687b      	ldr	r3, [r7, #4]
 802a108:	681b      	ldr	r3, [r3, #0]
 802a10a:	4a1d      	ldr	r2, [pc, #116]	; (802a180 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802a10c:	4293      	cmp	r3, r2
 802a10e:	d018      	beq.n	802a142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a110:	687b      	ldr	r3, [r7, #4]
 802a112:	681b      	ldr	r3, [r3, #0]
 802a114:	4a1b      	ldr	r2, [pc, #108]	; (802a184 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802a116:	4293      	cmp	r3, r2
 802a118:	d013      	beq.n	802a142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a11a:	687b      	ldr	r3, [r7, #4]
 802a11c:	681b      	ldr	r3, [r3, #0]
 802a11e:	4a1a      	ldr	r2, [pc, #104]	; (802a188 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 802a120:	4293      	cmp	r3, r2
 802a122:	d00e      	beq.n	802a142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a124:	687b      	ldr	r3, [r7, #4]
 802a126:	681b      	ldr	r3, [r3, #0]
 802a128:	4a18      	ldr	r2, [pc, #96]	; (802a18c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802a12a:	4293      	cmp	r3, r2
 802a12c:	d009      	beq.n	802a142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a12e:	687b      	ldr	r3, [r7, #4]
 802a130:	681b      	ldr	r3, [r3, #0]
 802a132:	4a17      	ldr	r2, [pc, #92]	; (802a190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802a134:	4293      	cmp	r3, r2
 802a136:	d004      	beq.n	802a142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a138:	687b      	ldr	r3, [r7, #4]
 802a13a:	681b      	ldr	r3, [r3, #0]
 802a13c:	4a15      	ldr	r2, [pc, #84]	; (802a194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802a13e:	4293      	cmp	r3, r2
 802a140:	d10c      	bne.n	802a15c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802a142:	68bb      	ldr	r3, [r7, #8]
 802a144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802a148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802a14a:	683b      	ldr	r3, [r7, #0]
 802a14c:	685b      	ldr	r3, [r3, #4]
 802a14e:	68ba      	ldr	r2, [r7, #8]
 802a150:	4313      	orrs	r3, r2
 802a152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802a154:	687b      	ldr	r3, [r7, #4]
 802a156:	681b      	ldr	r3, [r3, #0]
 802a158:	68ba      	ldr	r2, [r7, #8]
 802a15a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802a15c:	687b      	ldr	r3, [r7, #4]
 802a15e:	2201      	movs	r2, #1
 802a160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a164:	687b      	ldr	r3, [r7, #4]
 802a166:	2200      	movs	r2, #0
 802a168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a16c:	2300      	movs	r3, #0
}
 802a16e:	4618      	mov	r0, r3
 802a170:	3714      	adds	r7, #20
 802a172:	46bd      	mov	sp, r7
 802a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a178:	4770      	bx	lr
 802a17a:	bf00      	nop
 802a17c:	40010000 	.word	0x40010000
 802a180:	40000400 	.word	0x40000400
 802a184:	40000800 	.word	0x40000800
 802a188:	40000c00 	.word	0x40000c00
 802a18c:	40010400 	.word	0x40010400
 802a190:	40014000 	.word	0x40014000
 802a194:	40001800 	.word	0x40001800

0802a198 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 802a198:	b480      	push	{r7}
 802a19a:	b085      	sub	sp, #20
 802a19c:	af00      	add	r7, sp, #0
 802a19e:	6078      	str	r0, [r7, #4]
 802a1a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802a1a2:	2300      	movs	r3, #0
 802a1a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 802a1a6:	687b      	ldr	r3, [r7, #4]
 802a1a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a1ac:	2b01      	cmp	r3, #1
 802a1ae:	d101      	bne.n	802a1b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 802a1b0:	2302      	movs	r3, #2
 802a1b2:	e03d      	b.n	802a230 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 802a1b4:	687b      	ldr	r3, [r7, #4]
 802a1b6:	2201      	movs	r2, #1
 802a1b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 802a1bc:	68fb      	ldr	r3, [r7, #12]
 802a1be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802a1c2:	683b      	ldr	r3, [r7, #0]
 802a1c4:	68db      	ldr	r3, [r3, #12]
 802a1c6:	4313      	orrs	r3, r2
 802a1c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 802a1ca:	68fb      	ldr	r3, [r7, #12]
 802a1cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 802a1d0:	683b      	ldr	r3, [r7, #0]
 802a1d2:	689b      	ldr	r3, [r3, #8]
 802a1d4:	4313      	orrs	r3, r2
 802a1d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 802a1d8:	68fb      	ldr	r3, [r7, #12]
 802a1da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 802a1de:	683b      	ldr	r3, [r7, #0]
 802a1e0:	685b      	ldr	r3, [r3, #4]
 802a1e2:	4313      	orrs	r3, r2
 802a1e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 802a1e6:	68fb      	ldr	r3, [r7, #12]
 802a1e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 802a1ec:	683b      	ldr	r3, [r7, #0]
 802a1ee:	681b      	ldr	r3, [r3, #0]
 802a1f0:	4313      	orrs	r3, r2
 802a1f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 802a1f4:	68fb      	ldr	r3, [r7, #12]
 802a1f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a1fa:	683b      	ldr	r3, [r7, #0]
 802a1fc:	691b      	ldr	r3, [r3, #16]
 802a1fe:	4313      	orrs	r3, r2
 802a200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 802a202:	68fb      	ldr	r3, [r7, #12]
 802a204:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 802a208:	683b      	ldr	r3, [r7, #0]
 802a20a:	695b      	ldr	r3, [r3, #20]
 802a20c:	4313      	orrs	r3, r2
 802a20e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 802a210:	68fb      	ldr	r3, [r7, #12]
 802a212:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 802a216:	683b      	ldr	r3, [r7, #0]
 802a218:	69db      	ldr	r3, [r3, #28]
 802a21a:	4313      	orrs	r3, r2
 802a21c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 802a21e:	687b      	ldr	r3, [r7, #4]
 802a220:	681b      	ldr	r3, [r3, #0]
 802a222:	68fa      	ldr	r2, [r7, #12]
 802a224:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 802a226:	687b      	ldr	r3, [r7, #4]
 802a228:	2200      	movs	r2, #0
 802a22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a22e:	2300      	movs	r3, #0
}
 802a230:	4618      	mov	r0, r3
 802a232:	3714      	adds	r7, #20
 802a234:	46bd      	mov	sp, r7
 802a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a23a:	4770      	bx	lr

0802a23c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802a23c:	b480      	push	{r7}
 802a23e:	b083      	sub	sp, #12
 802a240:	af00      	add	r7, sp, #0
 802a242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802a244:	bf00      	nop
 802a246:	370c      	adds	r7, #12
 802a248:	46bd      	mov	sp, r7
 802a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a24e:	4770      	bx	lr

0802a250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802a250:	b480      	push	{r7}
 802a252:	b083      	sub	sp, #12
 802a254:	af00      	add	r7, sp, #0
 802a256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802a258:	bf00      	nop
 802a25a:	370c      	adds	r7, #12
 802a25c:	46bd      	mov	sp, r7
 802a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a262:	4770      	bx	lr

0802a264 <__cxa_guard_acquire>:
 802a264:	6803      	ldr	r3, [r0, #0]
 802a266:	07db      	lsls	r3, r3, #31
 802a268:	d406      	bmi.n	802a278 <__cxa_guard_acquire+0x14>
 802a26a:	7843      	ldrb	r3, [r0, #1]
 802a26c:	b103      	cbz	r3, 802a270 <__cxa_guard_acquire+0xc>
 802a26e:	deff      	udf	#255	; 0xff
 802a270:	2301      	movs	r3, #1
 802a272:	7043      	strb	r3, [r0, #1]
 802a274:	4618      	mov	r0, r3
 802a276:	4770      	bx	lr
 802a278:	2000      	movs	r0, #0
 802a27a:	4770      	bx	lr

0802a27c <__cxa_guard_release>:
 802a27c:	2301      	movs	r3, #1
 802a27e:	6003      	str	r3, [r0, #0]
 802a280:	4770      	bx	lr
	...

0802a284 <__libc_init_array>:
 802a284:	b570      	push	{r4, r5, r6, lr}
 802a286:	4e0d      	ldr	r6, [pc, #52]	; (802a2bc <__libc_init_array+0x38>)
 802a288:	4c0d      	ldr	r4, [pc, #52]	; (802a2c0 <__libc_init_array+0x3c>)
 802a28a:	1ba4      	subs	r4, r4, r6
 802a28c:	10a4      	asrs	r4, r4, #2
 802a28e:	2500      	movs	r5, #0
 802a290:	42a5      	cmp	r5, r4
 802a292:	d109      	bne.n	802a2a8 <__libc_init_array+0x24>
 802a294:	4e0b      	ldr	r6, [pc, #44]	; (802a2c4 <__libc_init_array+0x40>)
 802a296:	4c0c      	ldr	r4, [pc, #48]	; (802a2c8 <__libc_init_array+0x44>)
 802a298:	f000 f82c 	bl	802a2f4 <_init>
 802a29c:	1ba4      	subs	r4, r4, r6
 802a29e:	10a4      	asrs	r4, r4, #2
 802a2a0:	2500      	movs	r5, #0
 802a2a2:	42a5      	cmp	r5, r4
 802a2a4:	d105      	bne.n	802a2b2 <__libc_init_array+0x2e>
 802a2a6:	bd70      	pop	{r4, r5, r6, pc}
 802a2a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a2ac:	4798      	blx	r3
 802a2ae:	3501      	adds	r5, #1
 802a2b0:	e7ee      	b.n	802a290 <__libc_init_array+0xc>
 802a2b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a2b6:	4798      	blx	r3
 802a2b8:	3501      	adds	r5, #1
 802a2ba:	e7f2      	b.n	802a2a2 <__libc_init_array+0x1e>
 802a2bc:	0802a334 	.word	0x0802a334
 802a2c0:	0802a334 	.word	0x0802a334
 802a2c4:	0802a334 	.word	0x0802a334
 802a2c8:	0802a33c 	.word	0x0802a33c

0802a2cc <memcpy>:
 802a2cc:	b510      	push	{r4, lr}
 802a2ce:	1e43      	subs	r3, r0, #1
 802a2d0:	440a      	add	r2, r1
 802a2d2:	4291      	cmp	r1, r2
 802a2d4:	d100      	bne.n	802a2d8 <memcpy+0xc>
 802a2d6:	bd10      	pop	{r4, pc}
 802a2d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a2dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a2e0:	e7f7      	b.n	802a2d2 <memcpy+0x6>

0802a2e2 <memset>:
 802a2e2:	4402      	add	r2, r0
 802a2e4:	4603      	mov	r3, r0
 802a2e6:	4293      	cmp	r3, r2
 802a2e8:	d100      	bne.n	802a2ec <memset+0xa>
 802a2ea:	4770      	bx	lr
 802a2ec:	f803 1b01 	strb.w	r1, [r3], #1
 802a2f0:	e7f9      	b.n	802a2e6 <memset+0x4>
	...

0802a2f4 <_init>:
 802a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a2f6:	bf00      	nop
 802a2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a2fa:	bc08      	pop	{r3}
 802a2fc:	469e      	mov	lr, r3
 802a2fe:	4770      	bx	lr

0802a300 <_fini>:
 802a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a302:	bf00      	nop
 802a304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a306:	bc08      	pop	{r3}
 802a308:	469e      	mov	lr, r3
 802a30a:	4770      	bx	lr
