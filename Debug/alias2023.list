
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc68  08020000  08020000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0802cc68  0802cc68  0002cc68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d058  0802d058  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0802d058  0802d058  0002d058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802d060  0802d060  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802d060  0802d060  0002d060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802d068  0802d068  0002d068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0802d06c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017450  200001e0  0802d24c  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20017630  0802d24c  00037630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e0c7  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e27  00000000  00000000  0005e2d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001878  00000000  00000000  00063100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001678  00000000  00000000  00064978  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026f8e  00000000  00000000  00065ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016923  00000000  00000000  0008cf7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce139  00000000  00000000  000a38a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001719da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007330  00000000  00000000  00171a58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	200001e0 	.word	0x200001e0
 802001c:	00000000 	.word	0x00000000
 8020020:	0802cc50 	.word	0x0802cc50

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	200001e4 	.word	0x200001e4
 802003c:	0802cc50 	.word	0x0802cc50

08020040 <strlen>:
 8020040:	4603      	mov	r3, r0
 8020042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020046:	2a00      	cmp	r2, #0
 8020048:	d1fb      	bne.n	8020042 <strlen+0x2>
 802004a:	1a18      	subs	r0, r3, r0
 802004c:	3801      	subs	r0, #1
 802004e:	4770      	bx	lr

08020050 <memchr>:
 8020050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020054:	2a10      	cmp	r2, #16
 8020056:	db2b      	blt.n	80200b0 <memchr+0x60>
 8020058:	f010 0f07 	tst.w	r0, #7
 802005c:	d008      	beq.n	8020070 <memchr+0x20>
 802005e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020062:	3a01      	subs	r2, #1
 8020064:	428b      	cmp	r3, r1
 8020066:	d02d      	beq.n	80200c4 <memchr+0x74>
 8020068:	f010 0f07 	tst.w	r0, #7
 802006c:	b342      	cbz	r2, 80200c0 <memchr+0x70>
 802006e:	d1f6      	bne.n	802005e <memchr+0xe>
 8020070:	b4f0      	push	{r4, r5, r6, r7}
 8020072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802007a:	f022 0407 	bic.w	r4, r2, #7
 802007e:	f07f 0700 	mvns.w	r7, #0
 8020082:	2300      	movs	r3, #0
 8020084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020088:	3c08      	subs	r4, #8
 802008a:	ea85 0501 	eor.w	r5, r5, r1
 802008e:	ea86 0601 	eor.w	r6, r6, r1
 8020092:	fa85 f547 	uadd8	r5, r5, r7
 8020096:	faa3 f587 	sel	r5, r3, r7
 802009a:	fa86 f647 	uadd8	r6, r6, r7
 802009e:	faa5 f687 	sel	r6, r5, r7
 80200a2:	b98e      	cbnz	r6, 80200c8 <memchr+0x78>
 80200a4:	d1ee      	bne.n	8020084 <memchr+0x34>
 80200a6:	bcf0      	pop	{r4, r5, r6, r7}
 80200a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80200ac:	f002 0207 	and.w	r2, r2, #7
 80200b0:	b132      	cbz	r2, 80200c0 <memchr+0x70>
 80200b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80200b6:	3a01      	subs	r2, #1
 80200b8:	ea83 0301 	eor.w	r3, r3, r1
 80200bc:	b113      	cbz	r3, 80200c4 <memchr+0x74>
 80200be:	d1f8      	bne.n	80200b2 <memchr+0x62>
 80200c0:	2000      	movs	r0, #0
 80200c2:	4770      	bx	lr
 80200c4:	3801      	subs	r0, #1
 80200c6:	4770      	bx	lr
 80200c8:	2d00      	cmp	r5, #0
 80200ca:	bf06      	itte	eq
 80200cc:	4635      	moveq	r5, r6
 80200ce:	3803      	subeq	r0, #3
 80200d0:	3807      	subne	r0, #7
 80200d2:	f015 0f01 	tst.w	r5, #1
 80200d6:	d107      	bne.n	80200e8 <memchr+0x98>
 80200d8:	3001      	adds	r0, #1
 80200da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80200de:	bf02      	ittt	eq
 80200e0:	3001      	addeq	r0, #1
 80200e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80200e6:	3001      	addeq	r0, #1
 80200e8:	bcf0      	pop	{r4, r5, r6, r7}
 80200ea:	3801      	subs	r0, #1
 80200ec:	4770      	bx	lr
 80200ee:	bf00      	nop

080200f0 <__aeabi_drsub>:
 80200f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80200f4:	e002      	b.n	80200fc <__adddf3>
 80200f6:	bf00      	nop

080200f8 <__aeabi_dsub>:
 80200f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080200fc <__adddf3>:
 80200fc:	b530      	push	{r4, r5, lr}
 80200fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020106:	ea94 0f05 	teq	r4, r5
 802010a:	bf08      	it	eq
 802010c:	ea90 0f02 	teqeq	r0, r2
 8020110:	bf1f      	itttt	ne
 8020112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020116:	ea55 0c02 	orrsne.w	ip, r5, r2
 802011a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802011e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020122:	f000 80e2 	beq.w	80202ea <__adddf3+0x1ee>
 8020126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802012a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802012e:	bfb8      	it	lt
 8020130:	426d      	neglt	r5, r5
 8020132:	dd0c      	ble.n	802014e <__adddf3+0x52>
 8020134:	442c      	add	r4, r5
 8020136:	ea80 0202 	eor.w	r2, r0, r2
 802013a:	ea81 0303 	eor.w	r3, r1, r3
 802013e:	ea82 0000 	eor.w	r0, r2, r0
 8020142:	ea83 0101 	eor.w	r1, r3, r1
 8020146:	ea80 0202 	eor.w	r2, r0, r2
 802014a:	ea81 0303 	eor.w	r3, r1, r3
 802014e:	2d36      	cmp	r5, #54	; 0x36
 8020150:	bf88      	it	hi
 8020152:	bd30      	pophi	{r4, r5, pc}
 8020154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802015c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8020160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020164:	d002      	beq.n	802016c <__adddf3+0x70>
 8020166:	4240      	negs	r0, r0
 8020168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802016c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020178:	d002      	beq.n	8020180 <__adddf3+0x84>
 802017a:	4252      	negs	r2, r2
 802017c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020180:	ea94 0f05 	teq	r4, r5
 8020184:	f000 80a7 	beq.w	80202d6 <__adddf3+0x1da>
 8020188:	f1a4 0401 	sub.w	r4, r4, #1
 802018c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020190:	db0d      	blt.n	80201ae <__adddf3+0xb2>
 8020192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020196:	fa22 f205 	lsr.w	r2, r2, r5
 802019a:	1880      	adds	r0, r0, r2
 802019c:	f141 0100 	adc.w	r1, r1, #0
 80201a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80201a4:	1880      	adds	r0, r0, r2
 80201a6:	fa43 f305 	asr.w	r3, r3, r5
 80201aa:	4159      	adcs	r1, r3
 80201ac:	e00e      	b.n	80201cc <__adddf3+0xd0>
 80201ae:	f1a5 0520 	sub.w	r5, r5, #32
 80201b2:	f10e 0e20 	add.w	lr, lr, #32
 80201b6:	2a01      	cmp	r2, #1
 80201b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80201bc:	bf28      	it	cs
 80201be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80201c2:	fa43 f305 	asr.w	r3, r3, r5
 80201c6:	18c0      	adds	r0, r0, r3
 80201c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80201cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80201d0:	d507      	bpl.n	80201e2 <__adddf3+0xe6>
 80201d2:	f04f 0e00 	mov.w	lr, #0
 80201d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80201da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80201de:	eb6e 0101 	sbc.w	r1, lr, r1
 80201e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80201e6:	d31b      	bcc.n	8020220 <__adddf3+0x124>
 80201e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80201ec:	d30c      	bcc.n	8020208 <__adddf3+0x10c>
 80201ee:	0849      	lsrs	r1, r1, #1
 80201f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80201f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80201f8:	f104 0401 	add.w	r4, r4, #1
 80201fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020204:	f080 809a 	bcs.w	802033c <__adddf3+0x240>
 8020208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802020c:	bf08      	it	eq
 802020e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020212:	f150 0000 	adcs.w	r0, r0, #0
 8020216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802021a:	ea41 0105 	orr.w	r1, r1, r5
 802021e:	bd30      	pop	{r4, r5, pc}
 8020220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020224:	4140      	adcs	r0, r0
 8020226:	eb41 0101 	adc.w	r1, r1, r1
 802022a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802022e:	f1a4 0401 	sub.w	r4, r4, #1
 8020232:	d1e9      	bne.n	8020208 <__adddf3+0x10c>
 8020234:	f091 0f00 	teq	r1, #0
 8020238:	bf04      	itt	eq
 802023a:	4601      	moveq	r1, r0
 802023c:	2000      	moveq	r0, #0
 802023e:	fab1 f381 	clz	r3, r1
 8020242:	bf08      	it	eq
 8020244:	3320      	addeq	r3, #32
 8020246:	f1a3 030b 	sub.w	r3, r3, #11
 802024a:	f1b3 0220 	subs.w	r2, r3, #32
 802024e:	da0c      	bge.n	802026a <__adddf3+0x16e>
 8020250:	320c      	adds	r2, #12
 8020252:	dd08      	ble.n	8020266 <__adddf3+0x16a>
 8020254:	f102 0c14 	add.w	ip, r2, #20
 8020258:	f1c2 020c 	rsb	r2, r2, #12
 802025c:	fa01 f00c 	lsl.w	r0, r1, ip
 8020260:	fa21 f102 	lsr.w	r1, r1, r2
 8020264:	e00c      	b.n	8020280 <__adddf3+0x184>
 8020266:	f102 0214 	add.w	r2, r2, #20
 802026a:	bfd8      	it	le
 802026c:	f1c2 0c20 	rsble	ip, r2, #32
 8020270:	fa01 f102 	lsl.w	r1, r1, r2
 8020274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020278:	bfdc      	itt	le
 802027a:	ea41 010c 	orrle.w	r1, r1, ip
 802027e:	4090      	lslle	r0, r2
 8020280:	1ae4      	subs	r4, r4, r3
 8020282:	bfa2      	ittt	ge
 8020284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020288:	4329      	orrge	r1, r5
 802028a:	bd30      	popge	{r4, r5, pc}
 802028c:	ea6f 0404 	mvn.w	r4, r4
 8020290:	3c1f      	subs	r4, #31
 8020292:	da1c      	bge.n	80202ce <__adddf3+0x1d2>
 8020294:	340c      	adds	r4, #12
 8020296:	dc0e      	bgt.n	80202b6 <__adddf3+0x1ba>
 8020298:	f104 0414 	add.w	r4, r4, #20
 802029c:	f1c4 0220 	rsb	r2, r4, #32
 80202a0:	fa20 f004 	lsr.w	r0, r0, r4
 80202a4:	fa01 f302 	lsl.w	r3, r1, r2
 80202a8:	ea40 0003 	orr.w	r0, r0, r3
 80202ac:	fa21 f304 	lsr.w	r3, r1, r4
 80202b0:	ea45 0103 	orr.w	r1, r5, r3
 80202b4:	bd30      	pop	{r4, r5, pc}
 80202b6:	f1c4 040c 	rsb	r4, r4, #12
 80202ba:	f1c4 0220 	rsb	r2, r4, #32
 80202be:	fa20 f002 	lsr.w	r0, r0, r2
 80202c2:	fa01 f304 	lsl.w	r3, r1, r4
 80202c6:	ea40 0003 	orr.w	r0, r0, r3
 80202ca:	4629      	mov	r1, r5
 80202cc:	bd30      	pop	{r4, r5, pc}
 80202ce:	fa21 f004 	lsr.w	r0, r1, r4
 80202d2:	4629      	mov	r1, r5
 80202d4:	bd30      	pop	{r4, r5, pc}
 80202d6:	f094 0f00 	teq	r4, #0
 80202da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80202de:	bf06      	itte	eq
 80202e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80202e4:	3401      	addeq	r4, #1
 80202e6:	3d01      	subne	r5, #1
 80202e8:	e74e      	b.n	8020188 <__adddf3+0x8c>
 80202ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80202ee:	bf18      	it	ne
 80202f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80202f4:	d029      	beq.n	802034a <__adddf3+0x24e>
 80202f6:	ea94 0f05 	teq	r4, r5
 80202fa:	bf08      	it	eq
 80202fc:	ea90 0f02 	teqeq	r0, r2
 8020300:	d005      	beq.n	802030e <__adddf3+0x212>
 8020302:	ea54 0c00 	orrs.w	ip, r4, r0
 8020306:	bf04      	itt	eq
 8020308:	4619      	moveq	r1, r3
 802030a:	4610      	moveq	r0, r2
 802030c:	bd30      	pop	{r4, r5, pc}
 802030e:	ea91 0f03 	teq	r1, r3
 8020312:	bf1e      	ittt	ne
 8020314:	2100      	movne	r1, #0
 8020316:	2000      	movne	r0, #0
 8020318:	bd30      	popne	{r4, r5, pc}
 802031a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802031e:	d105      	bne.n	802032c <__adddf3+0x230>
 8020320:	0040      	lsls	r0, r0, #1
 8020322:	4149      	adcs	r1, r1
 8020324:	bf28      	it	cs
 8020326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802032a:	bd30      	pop	{r4, r5, pc}
 802032c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020330:	bf3c      	itt	cc
 8020332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020336:	bd30      	popcc	{r4, r5, pc}
 8020338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802033c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020344:	f04f 0000 	mov.w	r0, #0
 8020348:	bd30      	pop	{r4, r5, pc}
 802034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802034e:	bf1a      	itte	ne
 8020350:	4619      	movne	r1, r3
 8020352:	4610      	movne	r0, r2
 8020354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8020358:	bf1c      	itt	ne
 802035a:	460b      	movne	r3, r1
 802035c:	4602      	movne	r2, r0
 802035e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020362:	bf06      	itte	eq
 8020364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8020368:	ea91 0f03 	teqeq	r1, r3
 802036c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020370:	bd30      	pop	{r4, r5, pc}
 8020372:	bf00      	nop

08020374 <__aeabi_ui2d>:
 8020374:	f090 0f00 	teq	r0, #0
 8020378:	bf04      	itt	eq
 802037a:	2100      	moveq	r1, #0
 802037c:	4770      	bxeq	lr
 802037e:	b530      	push	{r4, r5, lr}
 8020380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020388:	f04f 0500 	mov.w	r5, #0
 802038c:	f04f 0100 	mov.w	r1, #0
 8020390:	e750      	b.n	8020234 <__adddf3+0x138>
 8020392:	bf00      	nop

08020394 <__aeabi_i2d>:
 8020394:	f090 0f00 	teq	r0, #0
 8020398:	bf04      	itt	eq
 802039a:	2100      	moveq	r1, #0
 802039c:	4770      	bxeq	lr
 802039e:	b530      	push	{r4, r5, lr}
 80203a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80203a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80203a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80203ac:	bf48      	it	mi
 80203ae:	4240      	negmi	r0, r0
 80203b0:	f04f 0100 	mov.w	r1, #0
 80203b4:	e73e      	b.n	8020234 <__adddf3+0x138>
 80203b6:	bf00      	nop

080203b8 <__aeabi_f2d>:
 80203b8:	0042      	lsls	r2, r0, #1
 80203ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80203be:	ea4f 0131 	mov.w	r1, r1, rrx
 80203c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80203c6:	bf1f      	itttt	ne
 80203c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80203cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80203d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80203d4:	4770      	bxne	lr
 80203d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80203da:	bf08      	it	eq
 80203dc:	4770      	bxeq	lr
 80203de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80203e2:	bf04      	itt	eq
 80203e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80203e8:	4770      	bxeq	lr
 80203ea:	b530      	push	{r4, r5, lr}
 80203ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80203f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80203f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80203f8:	e71c      	b.n	8020234 <__adddf3+0x138>
 80203fa:	bf00      	nop

080203fc <__aeabi_ul2d>:
 80203fc:	ea50 0201 	orrs.w	r2, r0, r1
 8020400:	bf08      	it	eq
 8020402:	4770      	bxeq	lr
 8020404:	b530      	push	{r4, r5, lr}
 8020406:	f04f 0500 	mov.w	r5, #0
 802040a:	e00a      	b.n	8020422 <__aeabi_l2d+0x16>

0802040c <__aeabi_l2d>:
 802040c:	ea50 0201 	orrs.w	r2, r0, r1
 8020410:	bf08      	it	eq
 8020412:	4770      	bxeq	lr
 8020414:	b530      	push	{r4, r5, lr}
 8020416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802041a:	d502      	bpl.n	8020422 <__aeabi_l2d+0x16>
 802041c:	4240      	negs	r0, r0
 802041e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802042a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802042e:	f43f aed8 	beq.w	80201e2 <__adddf3+0xe6>
 8020432:	f04f 0203 	mov.w	r2, #3
 8020436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802043a:	bf18      	it	ne
 802043c:	3203      	addne	r2, #3
 802043e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020442:	bf18      	it	ne
 8020444:	3203      	addne	r2, #3
 8020446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802044a:	f1c2 0320 	rsb	r3, r2, #32
 802044e:	fa00 fc03 	lsl.w	ip, r0, r3
 8020452:	fa20 f002 	lsr.w	r0, r0, r2
 8020456:	fa01 fe03 	lsl.w	lr, r1, r3
 802045a:	ea40 000e 	orr.w	r0, r0, lr
 802045e:	fa21 f102 	lsr.w	r1, r1, r2
 8020462:	4414      	add	r4, r2
 8020464:	e6bd      	b.n	80201e2 <__adddf3+0xe6>
 8020466:	bf00      	nop

08020468 <__aeabi_dmul>:
 8020468:	b570      	push	{r4, r5, r6, lr}
 802046a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 802046e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020476:	bf1d      	ittte	ne
 8020478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802047c:	ea94 0f0c 	teqne	r4, ip
 8020480:	ea95 0f0c 	teqne	r5, ip
 8020484:	f000 f8de 	bleq	8020644 <__aeabi_dmul+0x1dc>
 8020488:	442c      	add	r4, r5
 802048a:	ea81 0603 	eor.w	r6, r1, r3
 802048e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802049a:	bf18      	it	ne
 802049c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80204a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80204a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80204a8:	d038      	beq.n	802051c <__aeabi_dmul+0xb4>
 80204aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80204ae:	f04f 0500 	mov.w	r5, #0
 80204b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80204b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80204ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80204be:	f04f 0600 	mov.w	r6, #0
 80204c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80204c6:	f09c 0f00 	teq	ip, #0
 80204ca:	bf18      	it	ne
 80204cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80204d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80204d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80204d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80204dc:	d204      	bcs.n	80204e8 <__aeabi_dmul+0x80>
 80204de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80204e2:	416d      	adcs	r5, r5
 80204e4:	eb46 0606 	adc.w	r6, r6, r6
 80204e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80204ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80204f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80204f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80204f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80204fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020500:	bf88      	it	hi
 8020502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020506:	d81e      	bhi.n	8020546 <__aeabi_dmul+0xde>
 8020508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802050c:	bf08      	it	eq
 802050e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020512:	f150 0000 	adcs.w	r0, r0, #0
 8020516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802051a:	bd70      	pop	{r4, r5, r6, pc}
 802051c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020520:	ea46 0101 	orr.w	r1, r6, r1
 8020524:	ea40 0002 	orr.w	r0, r0, r2
 8020528:	ea81 0103 	eor.w	r1, r1, r3
 802052c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020530:	bfc2      	ittt	gt
 8020532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802053a:	bd70      	popgt	{r4, r5, r6, pc}
 802053c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020540:	f04f 0e00 	mov.w	lr, #0
 8020544:	3c01      	subs	r4, #1
 8020546:	f300 80ab 	bgt.w	80206a0 <__aeabi_dmul+0x238>
 802054a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802054e:	bfde      	ittt	le
 8020550:	2000      	movle	r0, #0
 8020552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8020556:	bd70      	pople	{r4, r5, r6, pc}
 8020558:	f1c4 0400 	rsb	r4, r4, #0
 802055c:	3c20      	subs	r4, #32
 802055e:	da35      	bge.n	80205cc <__aeabi_dmul+0x164>
 8020560:	340c      	adds	r4, #12
 8020562:	dc1b      	bgt.n	802059c <__aeabi_dmul+0x134>
 8020564:	f104 0414 	add.w	r4, r4, #20
 8020568:	f1c4 0520 	rsb	r5, r4, #32
 802056c:	fa00 f305 	lsl.w	r3, r0, r5
 8020570:	fa20 f004 	lsr.w	r0, r0, r4
 8020574:	fa01 f205 	lsl.w	r2, r1, r5
 8020578:	ea40 0002 	orr.w	r0, r0, r2
 802057c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020588:	fa21 f604 	lsr.w	r6, r1, r4
 802058c:	eb42 0106 	adc.w	r1, r2, r6
 8020590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020594:	bf08      	it	eq
 8020596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802059a:	bd70      	pop	{r4, r5, r6, pc}
 802059c:	f1c4 040c 	rsb	r4, r4, #12
 80205a0:	f1c4 0520 	rsb	r5, r4, #32
 80205a4:	fa00 f304 	lsl.w	r3, r0, r4
 80205a8:	fa20 f005 	lsr.w	r0, r0, r5
 80205ac:	fa01 f204 	lsl.w	r2, r1, r4
 80205b0:	ea40 0002 	orr.w	r0, r0, r2
 80205b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80205bc:	f141 0100 	adc.w	r1, r1, #0
 80205c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80205c4:	bf08      	it	eq
 80205c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80205ca:	bd70      	pop	{r4, r5, r6, pc}
 80205cc:	f1c4 0520 	rsb	r5, r4, #32
 80205d0:	fa00 f205 	lsl.w	r2, r0, r5
 80205d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80205d8:	fa20 f304 	lsr.w	r3, r0, r4
 80205dc:	fa01 f205 	lsl.w	r2, r1, r5
 80205e0:	ea43 0302 	orr.w	r3, r3, r2
 80205e4:	fa21 f004 	lsr.w	r0, r1, r4
 80205e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205ec:	fa21 f204 	lsr.w	r2, r1, r4
 80205f0:	ea20 0002 	bic.w	r0, r0, r2
 80205f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80205f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80205fc:	bf08      	it	eq
 80205fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020602:	bd70      	pop	{r4, r5, r6, pc}
 8020604:	f094 0f00 	teq	r4, #0
 8020608:	d10f      	bne.n	802062a <__aeabi_dmul+0x1c2>
 802060a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802060e:	0040      	lsls	r0, r0, #1
 8020610:	eb41 0101 	adc.w	r1, r1, r1
 8020614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020618:	bf08      	it	eq
 802061a:	3c01      	subeq	r4, #1
 802061c:	d0f7      	beq.n	802060e <__aeabi_dmul+0x1a6>
 802061e:	ea41 0106 	orr.w	r1, r1, r6
 8020622:	f095 0f00 	teq	r5, #0
 8020626:	bf18      	it	ne
 8020628:	4770      	bxne	lr
 802062a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802062e:	0052      	lsls	r2, r2, #1
 8020630:	eb43 0303 	adc.w	r3, r3, r3
 8020634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020638:	bf08      	it	eq
 802063a:	3d01      	subeq	r5, #1
 802063c:	d0f7      	beq.n	802062e <__aeabi_dmul+0x1c6>
 802063e:	ea43 0306 	orr.w	r3, r3, r6
 8020642:	4770      	bx	lr
 8020644:	ea94 0f0c 	teq	r4, ip
 8020648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802064c:	bf18      	it	ne
 802064e:	ea95 0f0c 	teqne	r5, ip
 8020652:	d00c      	beq.n	802066e <__aeabi_dmul+0x206>
 8020654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020658:	bf18      	it	ne
 802065a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802065e:	d1d1      	bne.n	8020604 <__aeabi_dmul+0x19c>
 8020660:	ea81 0103 	eor.w	r1, r1, r3
 8020664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020668:	f04f 0000 	mov.w	r0, #0
 802066c:	bd70      	pop	{r4, r5, r6, pc}
 802066e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020672:	bf06      	itte	eq
 8020674:	4610      	moveq	r0, r2
 8020676:	4619      	moveq	r1, r3
 8020678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802067c:	d019      	beq.n	80206b2 <__aeabi_dmul+0x24a>
 802067e:	ea94 0f0c 	teq	r4, ip
 8020682:	d102      	bne.n	802068a <__aeabi_dmul+0x222>
 8020684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020688:	d113      	bne.n	80206b2 <__aeabi_dmul+0x24a>
 802068a:	ea95 0f0c 	teq	r5, ip
 802068e:	d105      	bne.n	802069c <__aeabi_dmul+0x234>
 8020690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020694:	bf1c      	itt	ne
 8020696:	4610      	movne	r0, r2
 8020698:	4619      	movne	r1, r3
 802069a:	d10a      	bne.n	80206b2 <__aeabi_dmul+0x24a>
 802069c:	ea81 0103 	eor.w	r1, r1, r3
 80206a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80206a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80206a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80206ac:	f04f 0000 	mov.w	r0, #0
 80206b0:	bd70      	pop	{r4, r5, r6, pc}
 80206b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80206b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80206ba:	bd70      	pop	{r4, r5, r6, pc}

080206bc <__aeabi_ddiv>:
 80206bc:	b570      	push	{r4, r5, r6, lr}
 80206be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80206c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80206c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80206ca:	bf1d      	ittte	ne
 80206cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80206d0:	ea94 0f0c 	teqne	r4, ip
 80206d4:	ea95 0f0c 	teqne	r5, ip
 80206d8:	f000 f8a7 	bleq	802082a <__aeabi_ddiv+0x16e>
 80206dc:	eba4 0405 	sub.w	r4, r4, r5
 80206e0:	ea81 0e03 	eor.w	lr, r1, r3
 80206e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80206e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80206ec:	f000 8088 	beq.w	8020800 <__aeabi_ddiv+0x144>
 80206f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80206f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80206f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80206fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802070c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020714:	429d      	cmp	r5, r3
 8020716:	bf08      	it	eq
 8020718:	4296      	cmpeq	r6, r2
 802071a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802071e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020722:	d202      	bcs.n	802072a <__aeabi_ddiv+0x6e>
 8020724:	085b      	lsrs	r3, r3, #1
 8020726:	ea4f 0232 	mov.w	r2, r2, rrx
 802072a:	1ab6      	subs	r6, r6, r2
 802072c:	eb65 0503 	sbc.w	r5, r5, r3
 8020730:	085b      	lsrs	r3, r3, #1
 8020732:	ea4f 0232 	mov.w	r2, r2, rrx
 8020736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802073a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802073e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020746:	bf22      	ittt	cs
 8020748:	1ab6      	subcs	r6, r6, r2
 802074a:	4675      	movcs	r5, lr
 802074c:	ea40 000c 	orrcs.w	r0, r0, ip
 8020750:	085b      	lsrs	r3, r3, #1
 8020752:	ea4f 0232 	mov.w	r2, r2, rrx
 8020756:	ebb6 0e02 	subs.w	lr, r6, r2
 802075a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802075e:	bf22      	ittt	cs
 8020760:	1ab6      	subcs	r6, r6, r2
 8020762:	4675      	movcs	r5, lr
 8020764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8020768:	085b      	lsrs	r3, r3, #1
 802076a:	ea4f 0232 	mov.w	r2, r2, rrx
 802076e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020776:	bf22      	ittt	cs
 8020778:	1ab6      	subcs	r6, r6, r2
 802077a:	4675      	movcs	r5, lr
 802077c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020780:	085b      	lsrs	r3, r3, #1
 8020782:	ea4f 0232 	mov.w	r2, r2, rrx
 8020786:	ebb6 0e02 	subs.w	lr, r6, r2
 802078a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802078e:	bf22      	ittt	cs
 8020790:	1ab6      	subcs	r6, r6, r2
 8020792:	4675      	movcs	r5, lr
 8020794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020798:	ea55 0e06 	orrs.w	lr, r5, r6
 802079c:	d018      	beq.n	80207d0 <__aeabi_ddiv+0x114>
 802079e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80207a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80207a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80207aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80207ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80207b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80207b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80207ba:	d1c0      	bne.n	802073e <__aeabi_ddiv+0x82>
 80207bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80207c0:	d10b      	bne.n	80207da <__aeabi_ddiv+0x11e>
 80207c2:	ea41 0100 	orr.w	r1, r1, r0
 80207c6:	f04f 0000 	mov.w	r0, #0
 80207ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80207ce:	e7b6      	b.n	802073e <__aeabi_ddiv+0x82>
 80207d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80207d4:	bf04      	itt	eq
 80207d6:	4301      	orreq	r1, r0
 80207d8:	2000      	moveq	r0, #0
 80207da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80207de:	bf88      	it	hi
 80207e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80207e4:	f63f aeaf 	bhi.w	8020546 <__aeabi_dmul+0xde>
 80207e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80207ec:	bf04      	itt	eq
 80207ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80207f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80207f6:	f150 0000 	adcs.w	r0, r0, #0
 80207fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80207fe:	bd70      	pop	{r4, r5, r6, pc}
 8020800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802080c:	bfc2      	ittt	gt
 802080e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020816:	bd70      	popgt	{r4, r5, r6, pc}
 8020818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802081c:	f04f 0e00 	mov.w	lr, #0
 8020820:	3c01      	subs	r4, #1
 8020822:	e690      	b.n	8020546 <__aeabi_dmul+0xde>
 8020824:	ea45 0e06 	orr.w	lr, r5, r6
 8020828:	e68d      	b.n	8020546 <__aeabi_dmul+0xde>
 802082a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802082e:	ea94 0f0c 	teq	r4, ip
 8020832:	bf08      	it	eq
 8020834:	ea95 0f0c 	teqeq	r5, ip
 8020838:	f43f af3b 	beq.w	80206b2 <__aeabi_dmul+0x24a>
 802083c:	ea94 0f0c 	teq	r4, ip
 8020840:	d10a      	bne.n	8020858 <__aeabi_ddiv+0x19c>
 8020842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020846:	f47f af34 	bne.w	80206b2 <__aeabi_dmul+0x24a>
 802084a:	ea95 0f0c 	teq	r5, ip
 802084e:	f47f af25 	bne.w	802069c <__aeabi_dmul+0x234>
 8020852:	4610      	mov	r0, r2
 8020854:	4619      	mov	r1, r3
 8020856:	e72c      	b.n	80206b2 <__aeabi_dmul+0x24a>
 8020858:	ea95 0f0c 	teq	r5, ip
 802085c:	d106      	bne.n	802086c <__aeabi_ddiv+0x1b0>
 802085e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020862:	f43f aefd 	beq.w	8020660 <__aeabi_dmul+0x1f8>
 8020866:	4610      	mov	r0, r2
 8020868:	4619      	mov	r1, r3
 802086a:	e722      	b.n	80206b2 <__aeabi_dmul+0x24a>
 802086c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020870:	bf18      	it	ne
 8020872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020876:	f47f aec5 	bne.w	8020604 <__aeabi_dmul+0x19c>
 802087a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 802087e:	f47f af0d 	bne.w	802069c <__aeabi_dmul+0x234>
 8020882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020886:	f47f aeeb 	bne.w	8020660 <__aeabi_dmul+0x1f8>
 802088a:	e712      	b.n	80206b2 <__aeabi_dmul+0x24a>

0802088c <__gedf2>:
 802088c:	f04f 3cff 	mov.w	ip, #4294967295
 8020890:	e006      	b.n	80208a0 <__cmpdf2+0x4>
 8020892:	bf00      	nop

08020894 <__ledf2>:
 8020894:	f04f 0c01 	mov.w	ip, #1
 8020898:	e002      	b.n	80208a0 <__cmpdf2+0x4>
 802089a:	bf00      	nop

0802089c <__cmpdf2>:
 802089c:	f04f 0c01 	mov.w	ip, #1
 80208a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80208a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80208a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80208ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80208b0:	bf18      	it	ne
 80208b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80208b6:	d01b      	beq.n	80208f0 <__cmpdf2+0x54>
 80208b8:	b001      	add	sp, #4
 80208ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80208be:	bf0c      	ite	eq
 80208c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80208c4:	ea91 0f03 	teqne	r1, r3
 80208c8:	bf02      	ittt	eq
 80208ca:	ea90 0f02 	teqeq	r0, r2
 80208ce:	2000      	moveq	r0, #0
 80208d0:	4770      	bxeq	lr
 80208d2:	f110 0f00 	cmn.w	r0, #0
 80208d6:	ea91 0f03 	teq	r1, r3
 80208da:	bf58      	it	pl
 80208dc:	4299      	cmppl	r1, r3
 80208de:	bf08      	it	eq
 80208e0:	4290      	cmpeq	r0, r2
 80208e2:	bf2c      	ite	cs
 80208e4:	17d8      	asrcs	r0, r3, #31
 80208e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80208ea:	f040 0001 	orr.w	r0, r0, #1
 80208ee:	4770      	bx	lr
 80208f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80208f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80208f8:	d102      	bne.n	8020900 <__cmpdf2+0x64>
 80208fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80208fe:	d107      	bne.n	8020910 <__cmpdf2+0x74>
 8020900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020908:	d1d6      	bne.n	80208b8 <__cmpdf2+0x1c>
 802090a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802090e:	d0d3      	beq.n	80208b8 <__cmpdf2+0x1c>
 8020910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020914:	4770      	bx	lr
 8020916:	bf00      	nop

08020918 <__aeabi_cdrcmple>:
 8020918:	4684      	mov	ip, r0
 802091a:	4610      	mov	r0, r2
 802091c:	4662      	mov	r2, ip
 802091e:	468c      	mov	ip, r1
 8020920:	4619      	mov	r1, r3
 8020922:	4663      	mov	r3, ip
 8020924:	e000      	b.n	8020928 <__aeabi_cdcmpeq>
 8020926:	bf00      	nop

08020928 <__aeabi_cdcmpeq>:
 8020928:	b501      	push	{r0, lr}
 802092a:	f7ff ffb7 	bl	802089c <__cmpdf2>
 802092e:	2800      	cmp	r0, #0
 8020930:	bf48      	it	mi
 8020932:	f110 0f00 	cmnmi.w	r0, #0
 8020936:	bd01      	pop	{r0, pc}

08020938 <__aeabi_dcmpeq>:
 8020938:	f84d ed08 	str.w	lr, [sp, #-8]!
 802093c:	f7ff fff4 	bl	8020928 <__aeabi_cdcmpeq>
 8020940:	bf0c      	ite	eq
 8020942:	2001      	moveq	r0, #1
 8020944:	2000      	movne	r0, #0
 8020946:	f85d fb08 	ldr.w	pc, [sp], #8
 802094a:	bf00      	nop

0802094c <__aeabi_dcmplt>:
 802094c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020950:	f7ff ffea 	bl	8020928 <__aeabi_cdcmpeq>
 8020954:	bf34      	ite	cc
 8020956:	2001      	movcc	r0, #1
 8020958:	2000      	movcs	r0, #0
 802095a:	f85d fb08 	ldr.w	pc, [sp], #8
 802095e:	bf00      	nop

08020960 <__aeabi_dcmple>:
 8020960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020964:	f7ff ffe0 	bl	8020928 <__aeabi_cdcmpeq>
 8020968:	bf94      	ite	ls
 802096a:	2001      	movls	r0, #1
 802096c:	2000      	movhi	r0, #0
 802096e:	f85d fb08 	ldr.w	pc, [sp], #8
 8020972:	bf00      	nop

08020974 <__aeabi_dcmpge>:
 8020974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020978:	f7ff ffce 	bl	8020918 <__aeabi_cdrcmple>
 802097c:	bf94      	ite	ls
 802097e:	2001      	movls	r0, #1
 8020980:	2000      	movhi	r0, #0
 8020982:	f85d fb08 	ldr.w	pc, [sp], #8
 8020986:	bf00      	nop

08020988 <__aeabi_dcmpgt>:
 8020988:	f84d ed08 	str.w	lr, [sp, #-8]!
 802098c:	f7ff ffc4 	bl	8020918 <__aeabi_cdrcmple>
 8020990:	bf34      	ite	cc
 8020992:	2001      	movcc	r0, #1
 8020994:	2000      	movcs	r0, #0
 8020996:	f85d fb08 	ldr.w	pc, [sp], #8
 802099a:	bf00      	nop

0802099c <__aeabi_dcmpun>:
 802099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80209a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80209a4:	d102      	bne.n	80209ac <__aeabi_dcmpun+0x10>
 80209a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80209aa:	d10a      	bne.n	80209c2 <__aeabi_dcmpun+0x26>
 80209ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80209b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80209b4:	d102      	bne.n	80209bc <__aeabi_dcmpun+0x20>
 80209b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80209ba:	d102      	bne.n	80209c2 <__aeabi_dcmpun+0x26>
 80209bc:	f04f 0000 	mov.w	r0, #0
 80209c0:	4770      	bx	lr
 80209c2:	f04f 0001 	mov.w	r0, #1
 80209c6:	4770      	bx	lr

080209c8 <__aeabi_d2iz>:
 80209c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80209cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80209d0:	d215      	bcs.n	80209fe <__aeabi_d2iz+0x36>
 80209d2:	d511      	bpl.n	80209f8 <__aeabi_d2iz+0x30>
 80209d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80209d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80209dc:	d912      	bls.n	8020a04 <__aeabi_d2iz+0x3c>
 80209de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80209e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80209e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80209ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80209ee:	fa23 f002 	lsr.w	r0, r3, r2
 80209f2:	bf18      	it	ne
 80209f4:	4240      	negne	r0, r0
 80209f6:	4770      	bx	lr
 80209f8:	f04f 0000 	mov.w	r0, #0
 80209fc:	4770      	bx	lr
 80209fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020a02:	d105      	bne.n	8020a10 <__aeabi_d2iz+0x48>
 8020a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020a08:	bf08      	it	eq
 8020a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020a0e:	4770      	bx	lr
 8020a10:	f04f 0000 	mov.w	r0, #0
 8020a14:	4770      	bx	lr
 8020a16:	bf00      	nop

08020a18 <__aeabi_d2f>:
 8020a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020a20:	bf24      	itt	cs
 8020a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8020a2a:	d90d      	bls.n	8020a48 <__aeabi_d2f+0x30>
 8020a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020a40:	bf08      	it	eq
 8020a42:	f020 0001 	biceq.w	r0, r0, #1
 8020a46:	4770      	bx	lr
 8020a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020a4c:	d121      	bne.n	8020a92 <__aeabi_d2f+0x7a>
 8020a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020a52:	bfbc      	itt	lt
 8020a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8020a58:	4770      	bxlt	lr
 8020a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020a62:	f1c2 0218 	rsb	r2, r2, #24
 8020a66:	f1c2 0c20 	rsb	ip, r2, #32
 8020a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8020a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8020a72:	bf18      	it	ne
 8020a74:	f040 0001 	orrne.w	r0, r0, #1
 8020a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020a84:	ea40 000c 	orr.w	r0, r0, ip
 8020a88:	fa23 f302 	lsr.w	r3, r3, r2
 8020a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020a90:	e7cc      	b.n	8020a2c <__aeabi_d2f+0x14>
 8020a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020a96:	d107      	bne.n	8020aa8 <__aeabi_d2f+0x90>
 8020a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020a9c:	bf1e      	ittt	ne
 8020a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020aa6:	4770      	bxne	lr
 8020aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020ab4:	4770      	bx	lr
 8020ab6:	bf00      	nop

08020ab8 <__aeabi_uldivmod>:
 8020ab8:	b953      	cbnz	r3, 8020ad0 <__aeabi_uldivmod+0x18>
 8020aba:	b94a      	cbnz	r2, 8020ad0 <__aeabi_uldivmod+0x18>
 8020abc:	2900      	cmp	r1, #0
 8020abe:	bf08      	it	eq
 8020ac0:	2800      	cmpeq	r0, #0
 8020ac2:	bf1c      	itt	ne
 8020ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8020ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8020acc:	f000 b972 	b.w	8020db4 <__aeabi_idiv0>
 8020ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8020ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020ad8:	f000 f806 	bl	8020ae8 <__udivmoddi4>
 8020adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020ae4:	b004      	add	sp, #16
 8020ae6:	4770      	bx	lr

08020ae8 <__udivmoddi4>:
 8020ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020aec:	9e08      	ldr	r6, [sp, #32]
 8020aee:	4604      	mov	r4, r0
 8020af0:	4688      	mov	r8, r1
 8020af2:	2b00      	cmp	r3, #0
 8020af4:	d14b      	bne.n	8020b8e <__udivmoddi4+0xa6>
 8020af6:	428a      	cmp	r2, r1
 8020af8:	4615      	mov	r5, r2
 8020afa:	d967      	bls.n	8020bcc <__udivmoddi4+0xe4>
 8020afc:	fab2 f282 	clz	r2, r2
 8020b00:	b14a      	cbz	r2, 8020b16 <__udivmoddi4+0x2e>
 8020b02:	f1c2 0720 	rsb	r7, r2, #32
 8020b06:	fa01 f302 	lsl.w	r3, r1, r2
 8020b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8020b0e:	4095      	lsls	r5, r2
 8020b10:	ea47 0803 	orr.w	r8, r7, r3
 8020b14:	4094      	lsls	r4, r2
 8020b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020b1a:	0c23      	lsrs	r3, r4, #16
 8020b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8020b20:	fa1f fc85 	uxth.w	ip, r5
 8020b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8020b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8020b30:	4299      	cmp	r1, r3
 8020b32:	d909      	bls.n	8020b48 <__udivmoddi4+0x60>
 8020b34:	18eb      	adds	r3, r5, r3
 8020b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8020b3a:	f080 811b 	bcs.w	8020d74 <__udivmoddi4+0x28c>
 8020b3e:	4299      	cmp	r1, r3
 8020b40:	f240 8118 	bls.w	8020d74 <__udivmoddi4+0x28c>
 8020b44:	3f02      	subs	r7, #2
 8020b46:	442b      	add	r3, r5
 8020b48:	1a5b      	subs	r3, r3, r1
 8020b4a:	b2a4      	uxth	r4, r4
 8020b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8020b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8020b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8020b5c:	45a4      	cmp	ip, r4
 8020b5e:	d909      	bls.n	8020b74 <__udivmoddi4+0x8c>
 8020b60:	192c      	adds	r4, r5, r4
 8020b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b66:	f080 8107 	bcs.w	8020d78 <__udivmoddi4+0x290>
 8020b6a:	45a4      	cmp	ip, r4
 8020b6c:	f240 8104 	bls.w	8020d78 <__udivmoddi4+0x290>
 8020b70:	3802      	subs	r0, #2
 8020b72:	442c      	add	r4, r5
 8020b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020b78:	eba4 040c 	sub.w	r4, r4, ip
 8020b7c:	2700      	movs	r7, #0
 8020b7e:	b11e      	cbz	r6, 8020b88 <__udivmoddi4+0xa0>
 8020b80:	40d4      	lsrs	r4, r2
 8020b82:	2300      	movs	r3, #0
 8020b84:	e9c6 4300 	strd	r4, r3, [r6]
 8020b88:	4639      	mov	r1, r7
 8020b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b8e:	428b      	cmp	r3, r1
 8020b90:	d909      	bls.n	8020ba6 <__udivmoddi4+0xbe>
 8020b92:	2e00      	cmp	r6, #0
 8020b94:	f000 80eb 	beq.w	8020d6e <__udivmoddi4+0x286>
 8020b98:	2700      	movs	r7, #0
 8020b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8020b9e:	4638      	mov	r0, r7
 8020ba0:	4639      	mov	r1, r7
 8020ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ba6:	fab3 f783 	clz	r7, r3
 8020baa:	2f00      	cmp	r7, #0
 8020bac:	d147      	bne.n	8020c3e <__udivmoddi4+0x156>
 8020bae:	428b      	cmp	r3, r1
 8020bb0:	d302      	bcc.n	8020bb8 <__udivmoddi4+0xd0>
 8020bb2:	4282      	cmp	r2, r0
 8020bb4:	f200 80fa 	bhi.w	8020dac <__udivmoddi4+0x2c4>
 8020bb8:	1a84      	subs	r4, r0, r2
 8020bba:	eb61 0303 	sbc.w	r3, r1, r3
 8020bbe:	2001      	movs	r0, #1
 8020bc0:	4698      	mov	r8, r3
 8020bc2:	2e00      	cmp	r6, #0
 8020bc4:	d0e0      	beq.n	8020b88 <__udivmoddi4+0xa0>
 8020bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8020bca:	e7dd      	b.n	8020b88 <__udivmoddi4+0xa0>
 8020bcc:	b902      	cbnz	r2, 8020bd0 <__udivmoddi4+0xe8>
 8020bce:	deff      	udf	#255	; 0xff
 8020bd0:	fab2 f282 	clz	r2, r2
 8020bd4:	2a00      	cmp	r2, #0
 8020bd6:	f040 808f 	bne.w	8020cf8 <__udivmoddi4+0x210>
 8020bda:	1b49      	subs	r1, r1, r5
 8020bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020be0:	fa1f f885 	uxth.w	r8, r5
 8020be4:	2701      	movs	r7, #1
 8020be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8020bea:	0c23      	lsrs	r3, r4, #16
 8020bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8020bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8020bf8:	4299      	cmp	r1, r3
 8020bfa:	d907      	bls.n	8020c0c <__udivmoddi4+0x124>
 8020bfc:	18eb      	adds	r3, r5, r3
 8020bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020c02:	d202      	bcs.n	8020c0a <__udivmoddi4+0x122>
 8020c04:	4299      	cmp	r1, r3
 8020c06:	f200 80cd 	bhi.w	8020da4 <__udivmoddi4+0x2bc>
 8020c0a:	4684      	mov	ip, r0
 8020c0c:	1a59      	subs	r1, r3, r1
 8020c0e:	b2a3      	uxth	r3, r4
 8020c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8020c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8020c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020c1c:	fb08 f800 	mul.w	r8, r8, r0
 8020c20:	45a0      	cmp	r8, r4
 8020c22:	d907      	bls.n	8020c34 <__udivmoddi4+0x14c>
 8020c24:	192c      	adds	r4, r5, r4
 8020c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8020c2a:	d202      	bcs.n	8020c32 <__udivmoddi4+0x14a>
 8020c2c:	45a0      	cmp	r8, r4
 8020c2e:	f200 80b6 	bhi.w	8020d9e <__udivmoddi4+0x2b6>
 8020c32:	4618      	mov	r0, r3
 8020c34:	eba4 0408 	sub.w	r4, r4, r8
 8020c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020c3c:	e79f      	b.n	8020b7e <__udivmoddi4+0x96>
 8020c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8020c42:	40bb      	lsls	r3, r7
 8020c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8020c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8020c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8020c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8020c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020c5c:	4325      	orrs	r5, r4
 8020c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8020c62:	0c2c      	lsrs	r4, r5, #16
 8020c64:	fb08 3319 	mls	r3, r8, r9, r3
 8020c68:	fa1f fa8e 	uxth.w	sl, lr
 8020c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020c70:	fb09 f40a 	mul.w	r4, r9, sl
 8020c74:	429c      	cmp	r4, r3
 8020c76:	fa02 f207 	lsl.w	r2, r2, r7
 8020c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8020c7e:	d90b      	bls.n	8020c98 <__udivmoddi4+0x1b0>
 8020c80:	eb1e 0303 	adds.w	r3, lr, r3
 8020c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8020c88:	f080 8087 	bcs.w	8020d9a <__udivmoddi4+0x2b2>
 8020c8c:	429c      	cmp	r4, r3
 8020c8e:	f240 8084 	bls.w	8020d9a <__udivmoddi4+0x2b2>
 8020c92:	f1a9 0902 	sub.w	r9, r9, #2
 8020c96:	4473      	add	r3, lr
 8020c98:	1b1b      	subs	r3, r3, r4
 8020c9a:	b2ad      	uxth	r5, r5
 8020c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8020ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8020ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8020cac:	45a2      	cmp	sl, r4
 8020cae:	d908      	bls.n	8020cc2 <__udivmoddi4+0x1da>
 8020cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8020cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8020cb8:	d26b      	bcs.n	8020d92 <__udivmoddi4+0x2aa>
 8020cba:	45a2      	cmp	sl, r4
 8020cbc:	d969      	bls.n	8020d92 <__udivmoddi4+0x2aa>
 8020cbe:	3802      	subs	r0, #2
 8020cc0:	4474      	add	r4, lr
 8020cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8020cca:	eba4 040a 	sub.w	r4, r4, sl
 8020cce:	454c      	cmp	r4, r9
 8020cd0:	46c2      	mov	sl, r8
 8020cd2:	464b      	mov	r3, r9
 8020cd4:	d354      	bcc.n	8020d80 <__udivmoddi4+0x298>
 8020cd6:	d051      	beq.n	8020d7c <__udivmoddi4+0x294>
 8020cd8:	2e00      	cmp	r6, #0
 8020cda:	d069      	beq.n	8020db0 <__udivmoddi4+0x2c8>
 8020cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8020ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8020ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020ce8:	40fd      	lsrs	r5, r7
 8020cea:	40fc      	lsrs	r4, r7
 8020cec:	ea4c 0505 	orr.w	r5, ip, r5
 8020cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8020cf4:	2700      	movs	r7, #0
 8020cf6:	e747      	b.n	8020b88 <__udivmoddi4+0xa0>
 8020cf8:	f1c2 0320 	rsb	r3, r2, #32
 8020cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8020d00:	4095      	lsls	r5, r2
 8020d02:	fa01 f002 	lsl.w	r0, r1, r2
 8020d06:	fa21 f303 	lsr.w	r3, r1, r3
 8020d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020d0e:	4338      	orrs	r0, r7
 8020d10:	0c01      	lsrs	r1, r0, #16
 8020d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8020d16:	fa1f f885 	uxth.w	r8, r5
 8020d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8020d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020d22:	fb07 f308 	mul.w	r3, r7, r8
 8020d26:	428b      	cmp	r3, r1
 8020d28:	fa04 f402 	lsl.w	r4, r4, r2
 8020d2c:	d907      	bls.n	8020d3e <__udivmoddi4+0x256>
 8020d2e:	1869      	adds	r1, r5, r1
 8020d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8020d34:	d22f      	bcs.n	8020d96 <__udivmoddi4+0x2ae>
 8020d36:	428b      	cmp	r3, r1
 8020d38:	d92d      	bls.n	8020d96 <__udivmoddi4+0x2ae>
 8020d3a:	3f02      	subs	r7, #2
 8020d3c:	4429      	add	r1, r5
 8020d3e:	1acb      	subs	r3, r1, r3
 8020d40:	b281      	uxth	r1, r0
 8020d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8020d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8020d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020d4e:	fb00 f308 	mul.w	r3, r0, r8
 8020d52:	428b      	cmp	r3, r1
 8020d54:	d907      	bls.n	8020d66 <__udivmoddi4+0x27e>
 8020d56:	1869      	adds	r1, r5, r1
 8020d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8020d5c:	d217      	bcs.n	8020d8e <__udivmoddi4+0x2a6>
 8020d5e:	428b      	cmp	r3, r1
 8020d60:	d915      	bls.n	8020d8e <__udivmoddi4+0x2a6>
 8020d62:	3802      	subs	r0, #2
 8020d64:	4429      	add	r1, r5
 8020d66:	1ac9      	subs	r1, r1, r3
 8020d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020d6c:	e73b      	b.n	8020be6 <__udivmoddi4+0xfe>
 8020d6e:	4637      	mov	r7, r6
 8020d70:	4630      	mov	r0, r6
 8020d72:	e709      	b.n	8020b88 <__udivmoddi4+0xa0>
 8020d74:	4607      	mov	r7, r0
 8020d76:	e6e7      	b.n	8020b48 <__udivmoddi4+0x60>
 8020d78:	4618      	mov	r0, r3
 8020d7a:	e6fb      	b.n	8020b74 <__udivmoddi4+0x8c>
 8020d7c:	4541      	cmp	r1, r8
 8020d7e:	d2ab      	bcs.n	8020cd8 <__udivmoddi4+0x1f0>
 8020d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8020d84:	eb69 020e 	sbc.w	r2, r9, lr
 8020d88:	3801      	subs	r0, #1
 8020d8a:	4613      	mov	r3, r2
 8020d8c:	e7a4      	b.n	8020cd8 <__udivmoddi4+0x1f0>
 8020d8e:	4660      	mov	r0, ip
 8020d90:	e7e9      	b.n	8020d66 <__udivmoddi4+0x27e>
 8020d92:	4618      	mov	r0, r3
 8020d94:	e795      	b.n	8020cc2 <__udivmoddi4+0x1da>
 8020d96:	4667      	mov	r7, ip
 8020d98:	e7d1      	b.n	8020d3e <__udivmoddi4+0x256>
 8020d9a:	4681      	mov	r9, r0
 8020d9c:	e77c      	b.n	8020c98 <__udivmoddi4+0x1b0>
 8020d9e:	3802      	subs	r0, #2
 8020da0:	442c      	add	r4, r5
 8020da2:	e747      	b.n	8020c34 <__udivmoddi4+0x14c>
 8020da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8020da8:	442b      	add	r3, r5
 8020daa:	e72f      	b.n	8020c0c <__udivmoddi4+0x124>
 8020dac:	4638      	mov	r0, r7
 8020dae:	e708      	b.n	8020bc2 <__udivmoddi4+0xda>
 8020db0:	4637      	mov	r7, r6
 8020db2:	e6e9      	b.n	8020b88 <__udivmoddi4+0xa0>

08020db4 <__aeabi_idiv0>:
 8020db4:	4770      	bx	lr
 8020db6:	bf00      	nop

08020db8 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"
#include "declare_extern.h"

Encoder::Encoder() : distance_(0)
 8020db8:	b480      	push	{r7}
 8020dba:	b083      	sub	sp, #12
 8020dbc:	af00      	add	r7, sp, #0
 8020dbe:	6078      	str	r0, [r7, #4]
                   , distance_stack_(0)
                   , distance_difference_(0) {}
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	f04f 0200 	mov.w	r2, #0
 8020dc6:	601a      	str	r2, [r3, #0]
 8020dc8:	687b      	ldr	r3, [r7, #4]
 8020dca:	f04f 0200 	mov.w	r2, #0
 8020dce:	605a      	str	r2, [r3, #4]
 8020dd0:	687b      	ldr	r3, [r7, #4]
 8020dd2:	f04f 0200 	mov.w	r2, #0
 8020dd6:	609a      	str	r2, [r3, #8]
 8020dd8:	687b      	ldr	r3, [r7, #4]
 8020dda:	4618      	mov	r0, r3
 8020ddc:	370c      	adds	r7, #12
 8020dde:	46bd      	mov	sp, r7
 8020de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020de4:	4770      	bx	lr
	...

08020de8 <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020de8:	b580      	push	{r7, lr}
 8020dea:	b082      	sub	sp, #8
 8020dec:	af00      	add	r7, sp, #0
 8020dee:	6078      	str	r0, [r7, #4]
	if(HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL) != HAL_OK)
 8020df0:	213c      	movs	r1, #60	; 0x3c
 8020df2:	4812      	ldr	r0, [pc, #72]	; (8020e3c <_ZN7Encoder4InitEv+0x54>)
 8020df4:	f008 fc86 	bl	8029704 <HAL_TIM_Encoder_Start>
 8020df8:	4603      	mov	r3, r0
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	bf14      	ite	ne
 8020dfe:	2301      	movne	r3, #1
 8020e00:	2300      	moveq	r3, #0
 8020e02:	b2db      	uxtb	r3, r3
 8020e04:	2b00      	cmp	r3, #0
 8020e06:	d004      	beq.n	8020e12 <_ZN7Encoder4InitEv+0x2a>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim8 = true;
 8020e08:	4b0d      	ldr	r3, [pc, #52]	; (8020e40 <_ZN7Encoder4InitEv+0x58>)
 8020e0a:	2201      	movs	r2, #1
 8020e0c:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020e0e:	f002 fecb 	bl	8023ba8 <Error_Handler>
	}

	if(HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL) != HAL_OK)
 8020e12:	213c      	movs	r1, #60	; 0x3c
 8020e14:	480b      	ldr	r0, [pc, #44]	; (8020e44 <_ZN7Encoder4InitEv+0x5c>)
 8020e16:	f008 fc75 	bl	8029704 <HAL_TIM_Encoder_Start>
 8020e1a:	4603      	mov	r3, r0
 8020e1c:	2b00      	cmp	r3, #0
 8020e1e:	bf14      	ite	ne
 8020e20:	2301      	movne	r3, #1
 8020e22:	2300      	moveq	r3, #0
 8020e24:	b2db      	uxtb	r3, r3
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	d004      	beq.n	8020e34 <_ZN7Encoder4InitEv+0x4c>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim4 = true;
 8020e2a:	4b07      	ldr	r3, [pc, #28]	; (8020e48 <_ZN7Encoder4InitEv+0x60>)
 8020e2c:	2201      	movs	r2, #1
 8020e2e:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020e30:	f002 feba 	bl	8023ba8 <Error_Handler>
	}
}
 8020e34:	bf00      	nop
 8020e36:	3708      	adds	r7, #8
 8020e38:	46bd      	mov	sp, r7
 8020e3a:	bd80      	pop	{r7, pc}
 8020e3c:	20011154 	.word	0x20011154
 8020e40:	20000274 	.word	0x20000274
 8020e44:	20011194 	.word	0x20011194
 8020e48:	20000273 	.word	0x20000273
 8020e4c:	00000000 	.word	0x00000000

08020e50 <_ZN7Encoder6UpdateEv>:

void Encoder::Update()
{
 8020e50:	b590      	push	{r4, r7, lr}
 8020e52:	b087      	sub	sp, #28
 8020e54:	af00      	add	r7, sp, #0
 8020e56:	6078      	str	r0, [r7, #4]
	int16_t count_l = static_cast<int16_t>((TIM8 -> CNT) - START_COUNT);
 8020e58:	4b39      	ldr	r3, [pc, #228]	; (8020f40 <_ZN7Encoder6UpdateEv+0xf0>)
 8020e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020e5c:	b29b      	uxth	r3, r3
 8020e5e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8020e62:	3b7f      	subs	r3, #127	; 0x7f
 8020e64:	b29b      	uxth	r3, r3
 8020e66:	82fb      	strh	r3, [r7, #22]
	int16_t count_r = static_cast<int16_t>(START_COUNT - (TIM4 -> CNT));
 8020e68:	4b36      	ldr	r3, [pc, #216]	; (8020f44 <_ZN7Encoder6UpdateEv+0xf4>)
 8020e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020e6c:	b29b      	uxth	r3, r3
 8020e6e:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8020e72:	337f      	adds	r3, #127	; 0x7f
 8020e74:	b29b      	uxth	r3, r3
 8020e76:	82bb      	strh	r3, [r7, #20]
	TIM8 -> CNT = START_COUNT;
 8020e78:	4b31      	ldr	r3, [pc, #196]	; (8020f40 <_ZN7Encoder6UpdateEv+0xf0>)
 8020e7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020e7e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = START_COUNT;
 8020e80:	4b30      	ldr	r3, [pc, #192]	; (8020f44 <_ZN7Encoder6UpdateEv+0xf4>)
 8020e82:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020e86:	625a      	str	r2, [r3, #36]	; 0x24
	float distance_l = static_cast<float>(count_l * DISTANCE_PER_COUNT);
 8020e88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020e8c:	4618      	mov	r0, r3
 8020e8e:	f7ff fa81 	bl	8020394 <__aeabi_i2d>
 8020e92:	a329      	add	r3, pc, #164	; (adr r3, 8020f38 <_ZN7Encoder6UpdateEv+0xe8>)
 8020e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e98:	f7ff fae6 	bl	8020468 <__aeabi_dmul>
 8020e9c:	4603      	mov	r3, r0
 8020e9e:	460c      	mov	r4, r1
 8020ea0:	4618      	mov	r0, r3
 8020ea2:	4621      	mov	r1, r4
 8020ea4:	f7ff fdb8 	bl	8020a18 <__aeabi_d2f>
 8020ea8:	4603      	mov	r3, r0
 8020eaa:	613b      	str	r3, [r7, #16]
	float distance_r = static_cast<float>(count_r * DISTANCE_PER_COUNT);
 8020eac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020eb0:	4618      	mov	r0, r3
 8020eb2:	f7ff fa6f 	bl	8020394 <__aeabi_i2d>
 8020eb6:	a320      	add	r3, pc, #128	; (adr r3, 8020f38 <_ZN7Encoder6UpdateEv+0xe8>)
 8020eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ebc:	f7ff fad4 	bl	8020468 <__aeabi_dmul>
 8020ec0:	4603      	mov	r3, r0
 8020ec2:	460c      	mov	r4, r1
 8020ec4:	4618      	mov	r0, r3
 8020ec6:	4621      	mov	r1, r4
 8020ec8:	f7ff fda6 	bl	8020a18 <__aeabi_d2f>
 8020ecc:	4603      	mov	r3, r0
 8020ece:	60fb      	str	r3, [r7, #12]
	float distance = (distance_l + distance_r) / 2.0;
 8020ed0:	ed97 7a04 	vldr	s14, [r7, #16]
 8020ed4:	edd7 7a03 	vldr	s15, [r7, #12]
 8020ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020edc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8020ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020ee4:	edc7 7a02 	vstr	s15, [r7, #8]

	distance_ = distance;
 8020ee8:	687b      	ldr	r3, [r7, #4]
 8020eea:	68ba      	ldr	r2, [r7, #8]
 8020eec:	601a      	str	r2, [r3, #0]
	distance_stack_ += distance;
 8020eee:	687b      	ldr	r3, [r7, #4]
 8020ef0:	ed93 7a01 	vldr	s14, [r3, #4]
 8020ef4:	edd7 7a02 	vldr	s15, [r7, #8]
 8020ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020efc:	687b      	ldr	r3, [r7, #4]
 8020efe:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_difference_ = distance_r - distance_l;
 8020f02:	ed97 7a03 	vldr	s14, [r7, #12]
 8020f06:	edd7 7a04 	vldr	s15, [r7, #16]
 8020f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020f0e:	687b      	ldr	r3, [r7, #4]
 8020f10:	edc3 7a02 	vstr	s15, [r3, #8]

#ifdef DEBUG_MODE
	g_enc_cnt_l = count_l;
 8020f14:	4a0c      	ldr	r2, [pc, #48]	; (8020f48 <_ZN7Encoder6UpdateEv+0xf8>)
 8020f16:	8afb      	ldrh	r3, [r7, #22]
 8020f18:	8013      	strh	r3, [r2, #0]
	g_enc_cnt_r = count_r;
 8020f1a:	4a0c      	ldr	r2, [pc, #48]	; (8020f4c <_ZN7Encoder6UpdateEv+0xfc>)
 8020f1c:	8abb      	ldrh	r3, [r7, #20]
 8020f1e:	8013      	strh	r3, [r2, #0]
	g_distance_l = distance_l;
 8020f20:	4a0b      	ldr	r2, [pc, #44]	; (8020f50 <_ZN7Encoder6UpdateEv+0x100>)
 8020f22:	693b      	ldr	r3, [r7, #16]
 8020f24:	6013      	str	r3, [r2, #0]
	g_distance_r = distance_r;
 8020f26:	4a0b      	ldr	r2, [pc, #44]	; (8020f54 <_ZN7Encoder6UpdateEv+0x104>)
 8020f28:	68fb      	ldr	r3, [r7, #12]
 8020f2a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8020f2c:	bf00      	nop
 8020f2e:	371c      	adds	r7, #28
 8020f30:	46bd      	mov	sp, r7
 8020f32:	bd90      	pop	{r4, r7, pc}
 8020f34:	f3af 8000 	nop.w
 8020f38:	5d35653d 	.word	0x5d35653d
 8020f3c:	3f7d744f 	.word	0x3f7d744f
 8020f40:	40010400 	.word	0x40010400
 8020f44:	40000800 	.word	0x40000800
 8020f48:	20000410 	.word	0x20000410
 8020f4c:	20000412 	.word	0x20000412
 8020f50:	20000414 	.word	0x20000414
 8020f54:	20000418 	.word	0x20000418

08020f58 <_ZN7Encoder18ResetDistanceStackEv>:
	TIM8 -> CNT = START_COUNT;
	TIM4 -> CNT = START_COUNT;
}

void Encoder::ResetDistanceStack()
{
 8020f58:	b480      	push	{r7}
 8020f5a:	b083      	sub	sp, #12
 8020f5c:	af00      	add	r7, sp, #0
 8020f5e:	6078      	str	r0, [r7, #4]
	distance_stack_ = 0.0;
 8020f60:	687b      	ldr	r3, [r7, #4]
 8020f62:	f04f 0200 	mov.w	r2, #0
 8020f66:	605a      	str	r2, [r3, #4]
}
 8020f68:	bf00      	nop
 8020f6a:	370c      	adds	r7, #12
 8020f6c:	46bd      	mov	sp, r7
 8020f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f72:	4770      	bx	lr

08020f74 <_ZN7Encoder11GetDistanceEv>:

float Encoder::GetDistance()
{
 8020f74:	b480      	push	{r7}
 8020f76:	b083      	sub	sp, #12
 8020f78:	af00      	add	r7, sp, #0
 8020f7a:	6078      	str	r0, [r7, #4]
	return distance_;
 8020f7c:	687b      	ldr	r3, [r7, #4]
 8020f7e:	681b      	ldr	r3, [r3, #0]
 8020f80:	ee07 3a90 	vmov	s15, r3
}
 8020f84:	eeb0 0a67 	vmov.f32	s0, s15
 8020f88:	370c      	adds	r7, #12
 8020f8a:	46bd      	mov	sp, r7
 8020f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f90:	4770      	bx	lr

08020f92 <_ZN7Encoder16GetDistanceStackEv>:

float Encoder::GetDistanceStack()
{
 8020f92:	b480      	push	{r7}
 8020f94:	b083      	sub	sp, #12
 8020f96:	af00      	add	r7, sp, #0
 8020f98:	6078      	str	r0, [r7, #4]
	return distance_stack_;
 8020f9a:	687b      	ldr	r3, [r7, #4]
 8020f9c:	685b      	ldr	r3, [r3, #4]
 8020f9e:	ee07 3a90 	vmov	s15, r3
}
 8020fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8020fa6:	370c      	adds	r7, #12
 8020fa8:	46bd      	mov	sp, r7
 8020faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fae:	4770      	bx	lr

08020fb0 <_ZN7Encoder15AngularVelocityEv>:

float Encoder::AngularVelocity()
{
 8020fb0:	b590      	push	{r4, r7, lr}
 8020fb2:	b083      	sub	sp, #12
 8020fb4:	af00      	add	r7, sp, #0
 8020fb6:	6078      	str	r0, [r7, #4]
	return distance_difference_ / (TIM6_PERIOD * MACHINE_TREAD);
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	689b      	ldr	r3, [r3, #8]
 8020fbc:	4618      	mov	r0, r3
 8020fbe:	f7ff f9fb 	bl	80203b8 <__aeabi_f2d>
 8020fc2:	a309      	add	r3, pc, #36	; (adr r3, 8020fe8 <_ZN7Encoder15AngularVelocityEv+0x38>)
 8020fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fc8:	f7ff fb78 	bl	80206bc <__aeabi_ddiv>
 8020fcc:	4603      	mov	r3, r0
 8020fce:	460c      	mov	r4, r1
 8020fd0:	4618      	mov	r0, r3
 8020fd2:	4621      	mov	r1, r4
 8020fd4:	f7ff fd20 	bl	8020a18 <__aeabi_d2f>
 8020fd8:	4603      	mov	r3, r0
 8020fda:	ee07 3a90 	vmov	s15, r3
 8020fde:	eeb0 0a67 	vmov.f32	s0, s15
 8020fe2:	370c      	adds	r7, #12
 8020fe4:	46bd      	mov	sp, r7
 8020fe6:	bd90      	pop	{r4, r7, pc}
 8020fe8:	00000000 	.word	0x00000000
 8020fec:	4063d800 	.word	0x4063d800

08020ff0 <_ZN5Flash5ClearEv>:
#include "flash.hpp"
#include "declare_extern.h"
#include <string.h>

bool Flash::Clear()
{
 8020ff0:	b580      	push	{r7, lr}
 8020ff2:	b088      	sub	sp, #32
 8020ff4:	af00      	add	r7, sp, #0
 8020ff6:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8020ff8:	f006 fb0c 	bl	8027614 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase;

    erase.TypeErase    = FLASH_TYPEERASE_SECTORS; // Erasure range : Sectors
 8020ffc:	2300      	movs	r3, #0
 8020ffe:	60fb      	str	r3, [r7, #12]
    erase.Sector       = FLASH_SECTOR_1;          // Which sector : 1
 8021000:	2301      	movs	r3, #1
 8021002:	617b      	str	r3, [r7, #20]
    erase.NbSectors    = 4;                       // How many sector : 4 (1,2,3,4)
 8021004:	2304      	movs	r3, #4
 8021006:	61bb      	str	r3, [r7, #24]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;   // Voltage range : 2.7 ~ 3.6 [V]
 8021008:	2302      	movs	r3, #2
 802100a:	61fb      	str	r3, [r7, #28]

    // Success => 0xFFFFFFFF is stored.
    // Fail => Sector number is stored.
    uint32_t failed_sector = 0;
 802100c:	2300      	movs	r3, #0
 802100e:	60bb      	str	r3, [r7, #8]

    if(HAL_FLASHEx_Erase(&erase, &failed_sector) != HAL_OK)
 8021010:	f107 0208 	add.w	r2, r7, #8
 8021014:	f107 030c 	add.w	r3, r7, #12
 8021018:	4611      	mov	r1, r2
 802101a:	4618      	mov	r0, r3
 802101c:	f006 fc5a 	bl	80278d4 <HAL_FLASHEx_Erase>
 8021020:	4603      	mov	r3, r0
 8021022:	2b00      	cmp	r3, #0
 8021024:	bf14      	ite	ne
 8021026:	2301      	movne	r3, #1
 8021028:	2300      	moveq	r3, #0
 802102a:	b2db      	uxtb	r3, r3
 802102c:	2b00      	cmp	r3, #0
 802102e:	d004      	beq.n	802103a <_ZN5Flash5ClearEv+0x4a>
    {
#ifdef DEBUG_MODE
        g_erase_failed_sector = failed_sector;
 8021030:	68bb      	ldr	r3, [r7, #8]
 8021032:	4a08      	ldr	r2, [pc, #32]	; (8021054 <_ZN5Flash5ClearEv+0x64>)
 8021034:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

        return false;
 8021036:	2300      	movs	r3, #0
 8021038:	e008      	b.n	802104c <_ZN5Flash5ClearEv+0x5c>
    }

    HAL_FLASH_Lock();
 802103a:	f006 fb0d 	bl	8027658 <HAL_FLASH_Lock>

    return failed_sector == 0xFFFFFFFF;
 802103e:	68bb      	ldr	r3, [r7, #8]
 8021040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021044:	bf0c      	ite	eq
 8021046:	2301      	moveq	r3, #1
 8021048:	2300      	movne	r3, #0
 802104a:	b2db      	uxtb	r3, r3
}
 802104c:	4618      	mov	r0, r3
 802104e:	3720      	adds	r7, #32
 8021050:	46bd      	mov	sp, r7
 8021052:	bd80      	pop	{r7, pc}
 8021054:	2000043c 	.word	0x2000043c

08021058 <_ZN5Flash10StoreUint8EmPhm>:

bool Flash::StoreUint8(uint32_t address, uint8_t *data, uint32_t number)
{
 8021058:	b590      	push	{r4, r7, lr}
 802105a:	b087      	sub	sp, #28
 802105c:	af00      	add	r7, sp, #0
 802105e:	60f8      	str	r0, [r7, #12]
 8021060:	60b9      	str	r1, [r7, #8]
 8021062:	607a      	str	r2, [r7, #4]
 8021064:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021066:	f006 fad5 	bl	8027614 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 802106a:	2300      	movs	r3, #0
 802106c:	613b      	str	r3, [r7, #16]
 802106e:	693a      	ldr	r2, [r7, #16]
 8021070:	683b      	ldr	r3, [r7, #0]
 8021072:	429a      	cmp	r2, r3
 8021074:	d218      	bcs.n	80210a8 <_ZN5Flash10StoreUint8EmPhm+0x50>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address++, *data++);
 8021076:	68b9      	ldr	r1, [r7, #8]
 8021078:	1c4b      	adds	r3, r1, #1
 802107a:	60bb      	str	r3, [r7, #8]
 802107c:	687b      	ldr	r3, [r7, #4]
 802107e:	1c5a      	adds	r2, r3, #1
 8021080:	607a      	str	r2, [r7, #4]
 8021082:	781b      	ldrb	r3, [r3, #0]
 8021084:	b2db      	uxtb	r3, r3
 8021086:	f04f 0400 	mov.w	r4, #0
 802108a:	461a      	mov	r2, r3
 802108c:	4623      	mov	r3, r4
 802108e:	2000      	movs	r0, #0
 8021090:	f006 fa6c 	bl	802756c <HAL_FLASH_Program>
 8021094:	4603      	mov	r3, r0
 8021096:	75fb      	strb	r3, [r7, #23]
        if(result != HAL_OK) break;
 8021098:	7dfb      	ldrb	r3, [r7, #23]
 802109a:	2b00      	cmp	r3, #0
 802109c:	d103      	bne.n	80210a6 <_ZN5Flash10StoreUint8EmPhm+0x4e>
    for(uint32_t i = 0; i < number; i++)
 802109e:	693b      	ldr	r3, [r7, #16]
 80210a0:	3301      	adds	r3, #1
 80210a2:	613b      	str	r3, [r7, #16]
 80210a4:	e7e3      	b.n	802106e <_ZN5Flash10StoreUint8EmPhm+0x16>
        if(result != HAL_OK) break;
 80210a6:	bf00      	nop
    }

    HAL_FLASH_Lock();
 80210a8:	f006 fad6 	bl	8027658 <HAL_FLASH_Lock>

    return result == HAL_OK;
 80210ac:	7dfb      	ldrb	r3, [r7, #23]
 80210ae:	2b00      	cmp	r3, #0
 80210b0:	bf0c      	ite	eq
 80210b2:	2301      	moveq	r3, #1
 80210b4:	2300      	movne	r3, #0
 80210b6:	b2db      	uxtb	r3, r3
}
 80210b8:	4618      	mov	r0, r3
 80210ba:	371c      	adds	r7, #28
 80210bc:	46bd      	mov	sp, r7
 80210be:	bd90      	pop	{r4, r7, pc}

080210c0 <_ZN5Flash11StoreUint16EmPtm>:

bool Flash::StoreUint16(uint32_t address, uint16_t *data, uint32_t number)
{
 80210c0:	b590      	push	{r4, r7, lr}
 80210c2:	b087      	sub	sp, #28
 80210c4:	af00      	add	r7, sp, #0
 80210c6:	60f8      	str	r0, [r7, #12]
 80210c8:	60b9      	str	r1, [r7, #8]
 80210ca:	607a      	str	r2, [r7, #4]
 80210cc:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 80210ce:	f006 faa1 	bl	8027614 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 80210d2:	2300      	movs	r3, #0
 80210d4:	613b      	str	r3, [r7, #16]
 80210d6:	693a      	ldr	r2, [r7, #16]
 80210d8:	683b      	ldr	r3, [r7, #0]
 80210da:	429a      	cmp	r2, r3
 80210dc:	d219      	bcs.n	8021112 <_ZN5Flash11StoreUint16EmPtm+0x52>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++);
 80210de:	687b      	ldr	r3, [r7, #4]
 80210e0:	1c9a      	adds	r2, r3, #2
 80210e2:	607a      	str	r2, [r7, #4]
 80210e4:	881b      	ldrh	r3, [r3, #0]
 80210e6:	b29b      	uxth	r3, r3
 80210e8:	f04f 0400 	mov.w	r4, #0
 80210ec:	461a      	mov	r2, r3
 80210ee:	4623      	mov	r3, r4
 80210f0:	68b9      	ldr	r1, [r7, #8]
 80210f2:	2001      	movs	r0, #1
 80210f4:	f006 fa3a 	bl	802756c <HAL_FLASH_Program>
 80210f8:	4603      	mov	r3, r0
 80210fa:	75fb      	strb	r3, [r7, #23]
        address += 2;
 80210fc:	68bb      	ldr	r3, [r7, #8]
 80210fe:	3302      	adds	r3, #2
 8021100:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 8021102:	7dfb      	ldrb	r3, [r7, #23]
 8021104:	2b00      	cmp	r3, #0
 8021106:	d103      	bne.n	8021110 <_ZN5Flash11StoreUint16EmPtm+0x50>
    for(uint32_t i = 0; i < number; i++)
 8021108:	693b      	ldr	r3, [r7, #16]
 802110a:	3301      	adds	r3, #1
 802110c:	613b      	str	r3, [r7, #16]
 802110e:	e7e2      	b.n	80210d6 <_ZN5Flash11StoreUint16EmPtm+0x16>
        if(result != HAL_OK) break;
 8021110:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8021112:	f006 faa1 	bl	8027658 <HAL_FLASH_Lock>

    return result == HAL_OK;
 8021116:	7dfb      	ldrb	r3, [r7, #23]
 8021118:	2b00      	cmp	r3, #0
 802111a:	bf0c      	ite	eq
 802111c:	2301      	moveq	r3, #1
 802111e:	2300      	movne	r3, #0
 8021120:	b2db      	uxtb	r3, r3
}
 8021122:	4618      	mov	r0, r3
 8021124:	371c      	adds	r7, #28
 8021126:	46bd      	mov	sp, r7
 8021128:	bd90      	pop	{r4, r7, pc}

0802112a <_ZN5Flash10StoreInt32EmPlm>:

    return result == HAL_OK;
}

bool Flash::StoreInt32(uint32_t address, int32_t *data, uint32_t number)
{
 802112a:	b590      	push	{r4, r7, lr}
 802112c:	b087      	sub	sp, #28
 802112e:	af00      	add	r7, sp, #0
 8021130:	60f8      	str	r0, [r7, #12]
 8021132:	60b9      	str	r1, [r7, #8]
 8021134:	607a      	str	r2, [r7, #4]
 8021136:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021138:	f006 fa6c 	bl	8027614 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 802113c:	2300      	movs	r3, #0
 802113e:	613b      	str	r3, [r7, #16]
 8021140:	693a      	ldr	r2, [r7, #16]
 8021142:	683b      	ldr	r3, [r7, #0]
 8021144:	429a      	cmp	r2, r3
 8021146:	d218      	bcs.n	802117a <_ZN5Flash10StoreInt32EmPlm+0x50>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *data++);
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	1d1a      	adds	r2, r3, #4
 802114c:	607a      	str	r2, [r7, #4]
 802114e:	681b      	ldr	r3, [r3, #0]
 8021150:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8021154:	461a      	mov	r2, r3
 8021156:	4623      	mov	r3, r4
 8021158:	68b9      	ldr	r1, [r7, #8]
 802115a:	2002      	movs	r0, #2
 802115c:	f006 fa06 	bl	802756c <HAL_FLASH_Program>
 8021160:	4603      	mov	r3, r0
 8021162:	75fb      	strb	r3, [r7, #23]
        address += 4;
 8021164:	68bb      	ldr	r3, [r7, #8]
 8021166:	3304      	adds	r3, #4
 8021168:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 802116a:	7dfb      	ldrb	r3, [r7, #23]
 802116c:	2b00      	cmp	r3, #0
 802116e:	d103      	bne.n	8021178 <_ZN5Flash10StoreInt32EmPlm+0x4e>
    for(uint32_t i = 0; i < number; i++)
 8021170:	693b      	ldr	r3, [r7, #16]
 8021172:	3301      	adds	r3, #1
 8021174:	613b      	str	r3, [r7, #16]
 8021176:	e7e3      	b.n	8021140 <_ZN5Flash10StoreInt32EmPlm+0x16>
        if(result != HAL_OK) break;
 8021178:	bf00      	nop
    }

    HAL_FLASH_Lock();
 802117a:	f006 fa6d 	bl	8027658 <HAL_FLASH_Lock>

    return result == HAL_OK;
 802117e:	7dfb      	ldrb	r3, [r7, #23]
 8021180:	2b00      	cmp	r3, #0
 8021182:	bf0c      	ite	eq
 8021184:	2301      	moveq	r3, #1
 8021186:	2300      	movne	r3, #0
 8021188:	b2db      	uxtb	r3, r3
}
 802118a:	4618      	mov	r0, r3
 802118c:	371c      	adds	r7, #28
 802118e:	46bd      	mov	sp, r7
 8021190:	bd90      	pop	{r4, r7, pc}

08021192 <_ZN5Flash4LoadEPvmm>:

    return result == HAL_OK;
}

void Flash::Load(void *data, uint32_t address, uint32_t size)
{
 8021192:	b580      	push	{r7, lr}
 8021194:	b084      	sub	sp, #16
 8021196:	af00      	add	r7, sp, #0
 8021198:	60f8      	str	r0, [r7, #12]
 802119a:	60b9      	str	r1, [r7, #8]
 802119c:	607a      	str	r2, [r7, #4]
 802119e:	603b      	str	r3, [r7, #0]
    memcpy(data, reinterpret_cast<uint32_t*>(address), size);
 80211a0:	687b      	ldr	r3, [r7, #4]
 80211a2:	683a      	ldr	r2, [r7, #0]
 80211a4:	4619      	mov	r1, r3
 80211a6:	68b8      	ldr	r0, [r7, #8]
 80211a8:	f009 f9be 	bl	802a528 <memcpy>
}
 80211ac:	bf00      	nop
 80211ae:	3710      	adds	r7, #16
 80211b0:	46bd      	mov	sp, r7
 80211b2:	bd80      	pop	{r7, pc}

080211b4 <_ZN5Flash14CheckBlankByteEmm>:

bool Flash::CheckBlankByte(uint32_t address, uint32_t number)
{
 80211b4:	b5b0      	push	{r4, r5, r7, lr}
 80211b6:	b088      	sub	sp, #32
 80211b8:	af00      	add	r7, sp, #0
 80211ba:	60f8      	str	r0, [r7, #12]
 80211bc:	60b9      	str	r1, [r7, #8]
 80211be:	607a      	str	r2, [r7, #4]

    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);

    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;

    return true;
 80211c0:	466b      	mov	r3, sp
 80211c2:	461d      	mov	r5, r3
    uint8_t byte[number];
 80211c4:	687b      	ldr	r3, [r7, #4]
 80211c6:	1e58      	subs	r0, r3, #1
 80211c8:	61b8      	str	r0, [r7, #24]
 80211ca:	4603      	mov	r3, r0
 80211cc:	3301      	adds	r3, #1
 80211ce:	4619      	mov	r1, r3
 80211d0:	f04f 0200 	mov.w	r2, #0
 80211d4:	f04f 0300 	mov.w	r3, #0
 80211d8:	f04f 0400 	mov.w	r4, #0
 80211dc:	00d4      	lsls	r4, r2, #3
 80211de:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80211e2:	00cb      	lsls	r3, r1, #3
 80211e4:	4603      	mov	r3, r0
 80211e6:	3301      	adds	r3, #1
 80211e8:	4619      	mov	r1, r3
 80211ea:	f04f 0200 	mov.w	r2, #0
 80211ee:	f04f 0300 	mov.w	r3, #0
 80211f2:	f04f 0400 	mov.w	r4, #0
 80211f6:	00d4      	lsls	r4, r2, #3
 80211f8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80211fc:	00cb      	lsls	r3, r1, #3
 80211fe:	4603      	mov	r3, r0
 8021200:	3301      	adds	r3, #1
 8021202:	3307      	adds	r3, #7
 8021204:	08db      	lsrs	r3, r3, #3
 8021206:	00db      	lsls	r3, r3, #3
 8021208:	ebad 0d03 	sub.w	sp, sp, r3
 802120c:	466b      	mov	r3, sp
 802120e:	3300      	adds	r3, #0
 8021210:	617b      	str	r3, [r7, #20]
    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);
 8021212:	697b      	ldr	r3, [r7, #20]
 8021214:	68b9      	ldr	r1, [r7, #8]
 8021216:	687a      	ldr	r2, [r7, #4]
 8021218:	4618      	mov	r0, r3
 802121a:	f009 f985 	bl	802a528 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;
 802121e:	2300      	movs	r3, #0
 8021220:	61fb      	str	r3, [r7, #28]
 8021222:	69fa      	ldr	r2, [r7, #28]
 8021224:	687b      	ldr	r3, [r7, #4]
 8021226:	429a      	cmp	r2, r3
 8021228:	d20b      	bcs.n	8021242 <_ZN5Flash14CheckBlankByteEmm+0x8e>
 802122a:	697a      	ldr	r2, [r7, #20]
 802122c:	69fb      	ldr	r3, [r7, #28]
 802122e:	4413      	add	r3, r2
 8021230:	781b      	ldrb	r3, [r3, #0]
 8021232:	2bff      	cmp	r3, #255	; 0xff
 8021234:	d001      	beq.n	802123a <_ZN5Flash14CheckBlankByteEmm+0x86>
 8021236:	2300      	movs	r3, #0
 8021238:	e004      	b.n	8021244 <_ZN5Flash14CheckBlankByteEmm+0x90>
 802123a:	69fb      	ldr	r3, [r7, #28]
 802123c:	3301      	adds	r3, #1
 802123e:	61fb      	str	r3, [r7, #28]
 8021240:	e7ef      	b.n	8021222 <_ZN5Flash14CheckBlankByteEmm+0x6e>
    return true;
 8021242:	2301      	movs	r3, #1
 8021244:	46ad      	mov	sp, r5
}
 8021246:	4618      	mov	r0, r3
 8021248:	3720      	adds	r7, #32
 802124a:	46bd      	mov	sp, r7
 802124c:	bdb0      	pop	{r4, r5, r7, pc}

0802124e <_ZN5Flash18CheckBlankHalfwordEmm>:

bool Flash::CheckBlankHalfword(uint32_t address, uint32_t number)
{
 802124e:	b5b0      	push	{r4, r5, r7, lr}
 8021250:	b088      	sub	sp, #32
 8021252:	af00      	add	r7, sp, #0
 8021254:	60f8      	str	r0, [r7, #12]
 8021256:	60b9      	str	r1, [r7, #8]
 8021258:	607a      	str	r2, [r7, #4]

    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);

    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;

    return true;
 802125a:	466b      	mov	r3, sp
 802125c:	461d      	mov	r5, r3
    uint16_t half[number];
 802125e:	687b      	ldr	r3, [r7, #4]
 8021260:	1e58      	subs	r0, r3, #1
 8021262:	61b8      	str	r0, [r7, #24]
 8021264:	4603      	mov	r3, r0
 8021266:	3301      	adds	r3, #1
 8021268:	4619      	mov	r1, r3
 802126a:	f04f 0200 	mov.w	r2, #0
 802126e:	f04f 0300 	mov.w	r3, #0
 8021272:	f04f 0400 	mov.w	r4, #0
 8021276:	0114      	lsls	r4, r2, #4
 8021278:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 802127c:	010b      	lsls	r3, r1, #4
 802127e:	4603      	mov	r3, r0
 8021280:	3301      	adds	r3, #1
 8021282:	4619      	mov	r1, r3
 8021284:	f04f 0200 	mov.w	r2, #0
 8021288:	f04f 0300 	mov.w	r3, #0
 802128c:	f04f 0400 	mov.w	r4, #0
 8021290:	0114      	lsls	r4, r2, #4
 8021292:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021296:	010b      	lsls	r3, r1, #4
 8021298:	4603      	mov	r3, r0
 802129a:	3301      	adds	r3, #1
 802129c:	005b      	lsls	r3, r3, #1
 802129e:	3301      	adds	r3, #1
 80212a0:	3307      	adds	r3, #7
 80212a2:	08db      	lsrs	r3, r3, #3
 80212a4:	00db      	lsls	r3, r3, #3
 80212a6:	ebad 0d03 	sub.w	sp, sp, r3
 80212aa:	466b      	mov	r3, sp
 80212ac:	3301      	adds	r3, #1
 80212ae:	085b      	lsrs	r3, r3, #1
 80212b0:	005b      	lsls	r3, r3, #1
 80212b2:	617b      	str	r3, [r7, #20]
    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);
 80212b4:	6978      	ldr	r0, [r7, #20]
 80212b6:	68b9      	ldr	r1, [r7, #8]
 80212b8:	687b      	ldr	r3, [r7, #4]
 80212ba:	005b      	lsls	r3, r3, #1
 80212bc:	461a      	mov	r2, r3
 80212be:	f009 f933 	bl	802a528 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;
 80212c2:	2300      	movs	r3, #0
 80212c4:	61fb      	str	r3, [r7, #28]
 80212c6:	69fa      	ldr	r2, [r7, #28]
 80212c8:	687b      	ldr	r3, [r7, #4]
 80212ca:	429a      	cmp	r2, r3
 80212cc:	d20d      	bcs.n	80212ea <_ZN5Flash18CheckBlankHalfwordEmm+0x9c>
 80212ce:	697b      	ldr	r3, [r7, #20]
 80212d0:	69fa      	ldr	r2, [r7, #28]
 80212d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80212d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80212da:	4293      	cmp	r3, r2
 80212dc:	d001      	beq.n	80212e2 <_ZN5Flash18CheckBlankHalfwordEmm+0x94>
 80212de:	2300      	movs	r3, #0
 80212e0:	e004      	b.n	80212ec <_ZN5Flash18CheckBlankHalfwordEmm+0x9e>
 80212e2:	69fb      	ldr	r3, [r7, #28]
 80212e4:	3301      	adds	r3, #1
 80212e6:	61fb      	str	r3, [r7, #28]
 80212e8:	e7ed      	b.n	80212c6 <_ZN5Flash18CheckBlankHalfwordEmm+0x78>
    return true;
 80212ea:	2301      	movs	r3, #1
 80212ec:	46ad      	mov	sp, r5
}
 80212ee:	4618      	mov	r0, r3
 80212f0:	3720      	adds	r7, #32
 80212f2:	46bd      	mov	sp, r7
 80212f4:	bdb0      	pop	{r4, r5, r7, pc}

080212f6 <_ZN5Flash14CheckBlankWordEmm>:

bool Flash::CheckBlankWord(uint32_t address, uint32_t number)
{
 80212f6:	b5b0      	push	{r4, r5, r7, lr}
 80212f8:	b088      	sub	sp, #32
 80212fa:	af00      	add	r7, sp, #0
 80212fc:	60f8      	str	r0, [r7, #12]
 80212fe:	60b9      	str	r1, [r7, #8]
 8021300:	607a      	str	r2, [r7, #4]

    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);

    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;

    return true;
 8021302:	466b      	mov	r3, sp
 8021304:	461d      	mov	r5, r3
    uint32_t word[number];
 8021306:	687b      	ldr	r3, [r7, #4]
 8021308:	1e58      	subs	r0, r3, #1
 802130a:	61b8      	str	r0, [r7, #24]
 802130c:	4603      	mov	r3, r0
 802130e:	3301      	adds	r3, #1
 8021310:	4619      	mov	r1, r3
 8021312:	f04f 0200 	mov.w	r2, #0
 8021316:	f04f 0300 	mov.w	r3, #0
 802131a:	f04f 0400 	mov.w	r4, #0
 802131e:	0154      	lsls	r4, r2, #5
 8021320:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8021324:	014b      	lsls	r3, r1, #5
 8021326:	4603      	mov	r3, r0
 8021328:	3301      	adds	r3, #1
 802132a:	4619      	mov	r1, r3
 802132c:	f04f 0200 	mov.w	r2, #0
 8021330:	f04f 0300 	mov.w	r3, #0
 8021334:	f04f 0400 	mov.w	r4, #0
 8021338:	0154      	lsls	r4, r2, #5
 802133a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 802133e:	014b      	lsls	r3, r1, #5
 8021340:	4603      	mov	r3, r0
 8021342:	3301      	adds	r3, #1
 8021344:	009b      	lsls	r3, r3, #2
 8021346:	3303      	adds	r3, #3
 8021348:	3307      	adds	r3, #7
 802134a:	08db      	lsrs	r3, r3, #3
 802134c:	00db      	lsls	r3, r3, #3
 802134e:	ebad 0d03 	sub.w	sp, sp, r3
 8021352:	466b      	mov	r3, sp
 8021354:	3303      	adds	r3, #3
 8021356:	089b      	lsrs	r3, r3, #2
 8021358:	009b      	lsls	r3, r3, #2
 802135a:	617b      	str	r3, [r7, #20]
    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);
 802135c:	6978      	ldr	r0, [r7, #20]
 802135e:	68b9      	ldr	r1, [r7, #8]
 8021360:	687b      	ldr	r3, [r7, #4]
 8021362:	009b      	lsls	r3, r3, #2
 8021364:	461a      	mov	r2, r3
 8021366:	f009 f8df 	bl	802a528 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;
 802136a:	2300      	movs	r3, #0
 802136c:	61fb      	str	r3, [r7, #28]
 802136e:	69fa      	ldr	r2, [r7, #28]
 8021370:	687b      	ldr	r3, [r7, #4]
 8021372:	429a      	cmp	r2, r3
 8021374:	d20c      	bcs.n	8021390 <_ZN5Flash14CheckBlankWordEmm+0x9a>
 8021376:	697b      	ldr	r3, [r7, #20]
 8021378:	69fa      	ldr	r2, [r7, #28]
 802137a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802137e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021382:	d001      	beq.n	8021388 <_ZN5Flash14CheckBlankWordEmm+0x92>
 8021384:	2300      	movs	r3, #0
 8021386:	e004      	b.n	8021392 <_ZN5Flash14CheckBlankWordEmm+0x9c>
 8021388:	69fb      	ldr	r3, [r7, #28]
 802138a:	3301      	adds	r3, #1
 802138c:	61fb      	str	r3, [r7, #28]
 802138e:	e7ee      	b.n	802136e <_ZN5Flash14CheckBlankWordEmm+0x78>
    return true;
 8021390:	2301      	movs	r3, #1
 8021392:	46ad      	mov	sp, r5
 8021394:	4618      	mov	r0, r3
 8021396:	3720      	adds	r7, #32
 8021398:	46bd      	mov	sp, r7
 802139a:	bdb0      	pop	{r4, r5, r7, pc}

0802139c <_ZN8Iim426524InitEv>:
#include "iim_42652.hpp"
#include "declare_extern.h"

uint8_t Iim42652::Init()
{
 802139c:	b580      	push	{r7, lr}
 802139e:	b084      	sub	sp, #16
 80213a0:	af00      	add	r7, sp, #0
 80213a2:	6078      	str	r0, [r7, #4]
    /* bank_select */
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'L');
 80213a4:	234c      	movs	r3, #76	; 0x4c
 80213a6:	2200      	movs	r2, #0
 80213a8:	2176      	movs	r1, #118	; 0x76
 80213aa:	6878      	ldr	r0, [r7, #4]
 80213ac:	f000 f908 	bl	80215c0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80213b0:	2064      	movs	r0, #100	; 0x64
 80213b2:	f005 f845 	bl	8026440 <HAL_Delay>
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'R');
 80213b6:	2352      	movs	r3, #82	; 0x52
 80213b8:	2200      	movs	r2, #0
 80213ba:	2176      	movs	r1, #118	; 0x76
 80213bc:	6878      	ldr	r0, [r7, #4]
 80213be:	f000 f8ff 	bl	80215c0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80213c2:	2064      	movs	r0, #100	; 0x64
 80213c4:	f005 f83c 	bl	8026440 <HAL_Delay>
    /* power_off */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'L');
 80213c8:	234c      	movs	r3, #76	; 0x4c
 80213ca:	2200      	movs	r2, #0
 80213cc:	214e      	movs	r1, #78	; 0x4e
 80213ce:	6878      	ldr	r0, [r7, #4]
 80213d0:	f000 f8f6 	bl	80215c0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80213d4:	2064      	movs	r0, #100	; 0x64
 80213d6:	f005 f833 	bl	8026440 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'R');
 80213da:	2352      	movs	r3, #82	; 0x52
 80213dc:	2200      	movs	r2, #0
 80213de:	214e      	movs	r1, #78	; 0x4e
 80213e0:	6878      	ldr	r0, [r7, #4]
 80213e2:	f000 f8ed 	bl	80215c0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80213e6:	2064      	movs	r0, #100	; 0x64
 80213e8:	f005 f82a 	bl	8026440 <HAL_Delay>

    uint8_t who_l  = Read(WHO_AM_I_ADD, 'L');
 80213ec:	224c      	movs	r2, #76	; 0x4c
 80213ee:	2175      	movs	r1, #117	; 0x75
 80213f0:	6878      	ldr	r0, [r7, #4]
 80213f2:	f000 f897 	bl	8021524 <_ZN8Iim426524ReadEhc>
 80213f6:	4603      	mov	r3, r0
 80213f8:	73fb      	strb	r3, [r7, #15]
    uint8_t who_r  = Read(WHO_AM_I_ADD, 'R');
 80213fa:	2252      	movs	r2, #82	; 0x52
 80213fc:	2175      	movs	r1, #117	; 0x75
 80213fe:	6878      	ldr	r0, [r7, #4]
 8021400:	f000 f890 	bl	8021524 <_ZN8Iim426524ReadEhc>
 8021404:	4603      	mov	r3, r0
 8021406:	73bb      	strb	r3, [r7, #14]
    uint8_t bank_l = Read(REG_BANK_SEL_ADD, 'L');
 8021408:	224c      	movs	r2, #76	; 0x4c
 802140a:	2176      	movs	r1, #118	; 0x76
 802140c:	6878      	ldr	r0, [r7, #4]
 802140e:	f000 f889 	bl	8021524 <_ZN8Iim426524ReadEhc>
 8021412:	4603      	mov	r3, r0
 8021414:	737b      	strb	r3, [r7, #13]
    uint8_t bank_r = Read(REG_BANK_SEL_ADD, 'R');
 8021416:	2252      	movs	r2, #82	; 0x52
 8021418:	2176      	movs	r1, #118	; 0x76
 802141a:	6878      	ldr	r0, [r7, #4]
 802141c:	f000 f882 	bl	8021524 <_ZN8Iim426524ReadEhc>
 8021420:	4603      	mov	r3, r0
 8021422:	733b      	strb	r3, [r7, #12]
    uint8_t pwr_l  = Read(PWR_MGMT0_ADD, 'L');
 8021424:	224c      	movs	r2, #76	; 0x4c
 8021426:	214e      	movs	r1, #78	; 0x4e
 8021428:	6878      	ldr	r0, [r7, #4]
 802142a:	f000 f87b 	bl	8021524 <_ZN8Iim426524ReadEhc>
 802142e:	4603      	mov	r3, r0
 8021430:	72fb      	strb	r3, [r7, #11]
    uint8_t pwr_r  = Read(PWR_MGMT0_ADD, 'R');
 8021432:	2252      	movs	r2, #82	; 0x52
 8021434:	214e      	movs	r1, #78	; 0x4e
 8021436:	6878      	ldr	r0, [r7, #4]
 8021438:	f000 f874 	bl	8021524 <_ZN8Iim426524ReadEhc>
 802143c:	4603      	mov	r3, r0
 802143e:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_who_l  = who_l;  g_imu_who_r  = who_r;
 8021440:	4a32      	ldr	r2, [pc, #200]	; (802150c <_ZN8Iim426524InitEv+0x170>)
 8021442:	7bfb      	ldrb	r3, [r7, #15]
 8021444:	7013      	strb	r3, [r2, #0]
 8021446:	4a32      	ldr	r2, [pc, #200]	; (8021510 <_ZN8Iim426524InitEv+0x174>)
 8021448:	7bbb      	ldrb	r3, [r7, #14]
 802144a:	7013      	strb	r3, [r2, #0]
    g_imu_bank_l = bank_l; g_imu_bank_r = bank_r;
 802144c:	4a31      	ldr	r2, [pc, #196]	; (8021514 <_ZN8Iim426524InitEv+0x178>)
 802144e:	7b7b      	ldrb	r3, [r7, #13]
 8021450:	7013      	strb	r3, [r2, #0]
 8021452:	4a31      	ldr	r2, [pc, #196]	; (8021518 <_ZN8Iim426524InitEv+0x17c>)
 8021454:	7b3b      	ldrb	r3, [r7, #12]
 8021456:	7013      	strb	r3, [r2, #0]
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 8021458:	4a30      	ldr	r2, [pc, #192]	; (802151c <_ZN8Iim426524InitEv+0x180>)
 802145a:	7afb      	ldrb	r3, [r7, #11]
 802145c:	7013      	strb	r3, [r2, #0]
 802145e:	4a30      	ldr	r2, [pc, #192]	; (8021520 <_ZN8Iim426524InitEv+0x184>)
 8021460:	7abb      	ldrb	r3, [r7, #10]
 8021462:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(who_l != WHO_AM_I_RES)      return 0x01;
 8021464:	7bfb      	ldrb	r3, [r7, #15]
 8021466:	2b6f      	cmp	r3, #111	; 0x6f
 8021468:	d001      	beq.n	802146e <_ZN8Iim426524InitEv+0xd2>
 802146a:	2301      	movs	r3, #1
 802146c:	e049      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>
    if(who_r != WHO_AM_I_RES)      return 0x02;
 802146e:	7bbb      	ldrb	r3, [r7, #14]
 8021470:	2b6f      	cmp	r3, #111	; 0x6f
 8021472:	d001      	beq.n	8021478 <_ZN8Iim426524InitEv+0xdc>
 8021474:	2302      	movs	r3, #2
 8021476:	e044      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>
    if(bank_l != REG_BANK_SEL_RES) return 0x03;
 8021478:	7b7b      	ldrb	r3, [r7, #13]
 802147a:	2b00      	cmp	r3, #0
 802147c:	d001      	beq.n	8021482 <_ZN8Iim426524InitEv+0xe6>
 802147e:	2303      	movs	r3, #3
 8021480:	e03f      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>
    if(bank_r != REG_BANK_SEL_RES) return 0x04;
 8021482:	7b3b      	ldrb	r3, [r7, #12]
 8021484:	2b00      	cmp	r3, #0
 8021486:	d001      	beq.n	802148c <_ZN8Iim426524InitEv+0xf0>
 8021488:	2304      	movs	r3, #4
 802148a:	e03a      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>
    if(pwr_l != PWR_MGMT0_RES)     return 0x05;
 802148c:	7afb      	ldrb	r3, [r7, #11]
 802148e:	2b00      	cmp	r3, #0
 8021490:	d001      	beq.n	8021496 <_ZN8Iim426524InitEv+0xfa>
 8021492:	2305      	movs	r3, #5
 8021494:	e035      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_RES)     return 0x06;
 8021496:	7abb      	ldrb	r3, [r7, #10]
 8021498:	2b00      	cmp	r3, #0
 802149a:	d001      	beq.n	80214a0 <_ZN8Iim426524InitEv+0x104>
 802149c:	2306      	movs	r3, #6
 802149e:	e030      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>

    /* power_on */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'L');
 80214a0:	234c      	movs	r3, #76	; 0x4c
 80214a2:	220f      	movs	r2, #15
 80214a4:	214e      	movs	r1, #78	; 0x4e
 80214a6:	6878      	ldr	r0, [r7, #4]
 80214a8:	f000 f88a 	bl	80215c0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80214ac:	2064      	movs	r0, #100	; 0x64
 80214ae:	f004 ffc7 	bl	8026440 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'R');
 80214b2:	2352      	movs	r3, #82	; 0x52
 80214b4:	220f      	movs	r2, #15
 80214b6:	214e      	movs	r1, #78	; 0x4e
 80214b8:	6878      	ldr	r0, [r7, #4]
 80214ba:	f000 f881 	bl	80215c0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80214be:	2064      	movs	r0, #100	; 0x64
 80214c0:	f004 ffbe 	bl	8026440 <HAL_Delay>
    pwr_l = Read(PWR_MGMT0_ADD, 'L');
 80214c4:	224c      	movs	r2, #76	; 0x4c
 80214c6:	214e      	movs	r1, #78	; 0x4e
 80214c8:	6878      	ldr	r0, [r7, #4]
 80214ca:	f000 f82b 	bl	8021524 <_ZN8Iim426524ReadEhc>
 80214ce:	4603      	mov	r3, r0
 80214d0:	72fb      	strb	r3, [r7, #11]
    pwr_r = Read(PWR_MGMT0_ADD, 'R');
 80214d2:	2252      	movs	r2, #82	; 0x52
 80214d4:	214e      	movs	r1, #78	; 0x4e
 80214d6:	6878      	ldr	r0, [r7, #4]
 80214d8:	f000 f824 	bl	8021524 <_ZN8Iim426524ReadEhc>
 80214dc:	4603      	mov	r3, r0
 80214de:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 80214e0:	4a0e      	ldr	r2, [pc, #56]	; (802151c <_ZN8Iim426524InitEv+0x180>)
 80214e2:	7afb      	ldrb	r3, [r7, #11]
 80214e4:	7013      	strb	r3, [r2, #0]
 80214e6:	4a0e      	ldr	r2, [pc, #56]	; (8021520 <_ZN8Iim426524InitEv+0x184>)
 80214e8:	7abb      	ldrb	r3, [r7, #10]
 80214ea:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(pwr_l != PWR_MGMT0_ON) return 0x07;
 80214ec:	7afb      	ldrb	r3, [r7, #11]
 80214ee:	2b0f      	cmp	r3, #15
 80214f0:	d001      	beq.n	80214f6 <_ZN8Iim426524InitEv+0x15a>
 80214f2:	2307      	movs	r3, #7
 80214f4:	e005      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_ON) return 0x08;
 80214f6:	7abb      	ldrb	r3, [r7, #10]
 80214f8:	2b0f      	cmp	r3, #15
 80214fa:	d001      	beq.n	8021500 <_ZN8Iim426524InitEv+0x164>
 80214fc:	2308      	movs	r3, #8
 80214fe:	e000      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>

    return 0x09;
 8021500:	2309      	movs	r3, #9
}
 8021502:	4618      	mov	r0, r3
 8021504:	3710      	adds	r7, #16
 8021506:	46bd      	mov	sp, r7
 8021508:	bd80      	pop	{r7, pc}
 802150a:	bf00      	nop
 802150c:	20000408 	.word	0x20000408
 8021510:	20000409 	.word	0x20000409
 8021514:	2000040a 	.word	0x2000040a
 8021518:	2000040b 	.word	0x2000040b
 802151c:	2000040c 	.word	0x2000040c
 8021520:	2000040d 	.word	0x2000040d

08021524 <_ZN8Iim426524ReadEhc>:

uint8_t Iim42652::Read(uint8_t send_address, char imu_ic_lr)
{
 8021524:	b580      	push	{r7, lr}
 8021526:	b084      	sub	sp, #16
 8021528:	af00      	add	r7, sp, #0
 802152a:	6078      	str	r0, [r7, #4]
 802152c:	460b      	mov	r3, r1
 802152e:	70fb      	strb	r3, [r7, #3]
 8021530:	4613      	mov	r3, r2
 8021532:	70bb      	strb	r3, [r7, #2]
    uint8_t receive_reset_value = 0x00;
 8021534:	2300      	movs	r3, #0
 8021536:	73fb      	strb	r3, [r7, #15]

    send_address = send_address | 0x80; // Read 1--- ----
 8021538:	78fb      	ldrb	r3, [r7, #3]
 802153a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802153e:	b2db      	uxtb	r3, r3
 8021540:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 8021542:	78bb      	ldrb	r3, [r7, #2]
 8021544:	2b4c      	cmp	r3, #76	; 0x4c
 8021546:	d106      	bne.n	8021556 <_ZN8Iim426524ReadEhc+0x32>
 8021548:	2200      	movs	r2, #0
 802154a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802154e:	4819      	ldr	r0, [pc, #100]	; (80215b4 <_ZN8Iim426524ReadEhc+0x90>)
 8021550:	f006 fc94 	bl	8027e7c <HAL_GPIO_WritePin>
 8021554:	e008      	b.n	8021568 <_ZN8Iim426524ReadEhc+0x44>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 8021556:	78bb      	ldrb	r3, [r7, #2]
 8021558:	2b52      	cmp	r3, #82	; 0x52
 802155a:	d105      	bne.n	8021568 <_ZN8Iim426524ReadEhc+0x44>
 802155c:	2200      	movs	r2, #0
 802155e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021562:	4815      	ldr	r0, [pc, #84]	; (80215b8 <_ZN8Iim426524ReadEhc+0x94>)
 8021564:	f006 fc8a 	bl	8027e7c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 8021568:	1cf9      	adds	r1, r7, #3
 802156a:	2364      	movs	r3, #100	; 0x64
 802156c:	2201      	movs	r2, #1
 802156e:	4813      	ldr	r0, [pc, #76]	; (80215bc <_ZN8Iim426524ReadEhc+0x98>)
 8021570:	f007 fa62 	bl	8028a38 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &receive_reset_value, 1, 100);
 8021574:	f107 010f 	add.w	r1, r7, #15
 8021578:	2364      	movs	r3, #100	; 0x64
 802157a:	2201      	movs	r2, #1
 802157c:	480f      	ldr	r0, [pc, #60]	; (80215bc <_ZN8Iim426524ReadEhc+0x98>)
 802157e:	f007 fb8f 	bl	8028ca0 <HAL_SPI_Receive>

    if(imu_ic_lr == 'L') CS_SET_L;
 8021582:	78bb      	ldrb	r3, [r7, #2]
 8021584:	2b4c      	cmp	r3, #76	; 0x4c
 8021586:	d106      	bne.n	8021596 <_ZN8Iim426524ReadEhc+0x72>
 8021588:	2201      	movs	r2, #1
 802158a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802158e:	4809      	ldr	r0, [pc, #36]	; (80215b4 <_ZN8Iim426524ReadEhc+0x90>)
 8021590:	f006 fc74 	bl	8027e7c <HAL_GPIO_WritePin>
 8021594:	e008      	b.n	80215a8 <_ZN8Iim426524ReadEhc+0x84>
    else if(imu_ic_lr == 'R') CS_SET_R;
 8021596:	78bb      	ldrb	r3, [r7, #2]
 8021598:	2b52      	cmp	r3, #82	; 0x52
 802159a:	d105      	bne.n	80215a8 <_ZN8Iim426524ReadEhc+0x84>
 802159c:	2201      	movs	r2, #1
 802159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80215a2:	4805      	ldr	r0, [pc, #20]	; (80215b8 <_ZN8Iim426524ReadEhc+0x94>)
 80215a4:	f006 fc6a 	bl	8027e7c <HAL_GPIO_WritePin>
    
    return receive_reset_value;
 80215a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80215aa:	4618      	mov	r0, r3
 80215ac:	3710      	adds	r7, #16
 80215ae:	46bd      	mov	sp, r7
 80215b0:	bd80      	pop	{r7, pc}
 80215b2:	bf00      	nop
 80215b4:	40020400 	.word	0x40020400
 80215b8:	40020000 	.word	0x40020000
 80215bc:	20014318 	.word	0x20014318

080215c0 <_ZN8Iim426525WriteEhhc>:

void Iim42652::Write(uint8_t send_address, uint8_t send_data, char imu_ic_lr)
{
 80215c0:	b580      	push	{r7, lr}
 80215c2:	b082      	sub	sp, #8
 80215c4:	af00      	add	r7, sp, #0
 80215c6:	6078      	str	r0, [r7, #4]
 80215c8:	4608      	mov	r0, r1
 80215ca:	4611      	mov	r1, r2
 80215cc:	461a      	mov	r2, r3
 80215ce:	4603      	mov	r3, r0
 80215d0:	70fb      	strb	r3, [r7, #3]
 80215d2:	460b      	mov	r3, r1
 80215d4:	70bb      	strb	r3, [r7, #2]
 80215d6:	4613      	mov	r3, r2
 80215d8:	707b      	strb	r3, [r7, #1]
    send_address = send_address & 0x7F; // Write 0--- ----
 80215da:	78fb      	ldrb	r3, [r7, #3]
 80215dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80215e0:	b2db      	uxtb	r3, r3
 80215e2:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 80215e4:	787b      	ldrb	r3, [r7, #1]
 80215e6:	2b4c      	cmp	r3, #76	; 0x4c
 80215e8:	d106      	bne.n	80215f8 <_ZN8Iim426525WriteEhhc+0x38>
 80215ea:	2200      	movs	r2, #0
 80215ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80215f0:	4817      	ldr	r0, [pc, #92]	; (8021650 <_ZN8Iim426525WriteEhhc+0x90>)
 80215f2:	f006 fc43 	bl	8027e7c <HAL_GPIO_WritePin>
 80215f6:	e008      	b.n	802160a <_ZN8Iim426525WriteEhhc+0x4a>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 80215f8:	787b      	ldrb	r3, [r7, #1]
 80215fa:	2b52      	cmp	r3, #82	; 0x52
 80215fc:	d105      	bne.n	802160a <_ZN8Iim426525WriteEhhc+0x4a>
 80215fe:	2200      	movs	r2, #0
 8021600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021604:	4813      	ldr	r0, [pc, #76]	; (8021654 <_ZN8Iim426525WriteEhhc+0x94>)
 8021606:	f006 fc39 	bl	8027e7c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 802160a:	1cf9      	adds	r1, r7, #3
 802160c:	2364      	movs	r3, #100	; 0x64
 802160e:	2201      	movs	r2, #1
 8021610:	4811      	ldr	r0, [pc, #68]	; (8021658 <_ZN8Iim426525WriteEhhc+0x98>)
 8021612:	f007 fa11 	bl	8028a38 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &send_data, 1, 100);
 8021616:	1cb9      	adds	r1, r7, #2
 8021618:	2364      	movs	r3, #100	; 0x64
 802161a:	2201      	movs	r2, #1
 802161c:	480e      	ldr	r0, [pc, #56]	; (8021658 <_ZN8Iim426525WriteEhhc+0x98>)
 802161e:	f007 fa0b 	bl	8028a38 <HAL_SPI_Transmit>

    if(imu_ic_lr == 'L') CS_SET_L;
 8021622:	787b      	ldrb	r3, [r7, #1]
 8021624:	2b4c      	cmp	r3, #76	; 0x4c
 8021626:	d106      	bne.n	8021636 <_ZN8Iim426525WriteEhhc+0x76>
 8021628:	2201      	movs	r2, #1
 802162a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802162e:	4808      	ldr	r0, [pc, #32]	; (8021650 <_ZN8Iim426525WriteEhhc+0x90>)
 8021630:	f006 fc24 	bl	8027e7c <HAL_GPIO_WritePin>
    else if(imu_ic_lr == 'R') CS_SET_R;
}
 8021634:	e008      	b.n	8021648 <_ZN8Iim426525WriteEhhc+0x88>
    else if(imu_ic_lr == 'R') CS_SET_R;
 8021636:	787b      	ldrb	r3, [r7, #1]
 8021638:	2b52      	cmp	r3, #82	; 0x52
 802163a:	d105      	bne.n	8021648 <_ZN8Iim426525WriteEhhc+0x88>
 802163c:	2201      	movs	r2, #1
 802163e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021642:	4804      	ldr	r0, [pc, #16]	; (8021654 <_ZN8Iim426525WriteEhhc+0x94>)
 8021644:	f006 fc1a 	bl	8027e7c <HAL_GPIO_WritePin>
}
 8021648:	bf00      	nop
 802164a:	3708      	adds	r7, #8
 802164c:	46bd      	mov	sp, r7
 802164e:	bd80      	pop	{r7, pc}
 8021650:	40020400 	.word	0x40020400
 8021654:	40020000 	.word	0x40020000
 8021658:	20014318 	.word	0x20014318

0802165c <_ZN8Iim426529Read2ByteEhhc>:

    return CheckRead(send_address, send_data, imu_ic_lr);
}

int16_t Iim42652::Read2Byte(uint8_t upper_address, uint8_t lower_address, char imu_ic_lr)
{
 802165c:	b580      	push	{r7, lr}
 802165e:	b084      	sub	sp, #16
 8021660:	af00      	add	r7, sp, #0
 8021662:	6078      	str	r0, [r7, #4]
 8021664:	4608      	mov	r0, r1
 8021666:	4611      	mov	r1, r2
 8021668:	461a      	mov	r2, r3
 802166a:	4603      	mov	r3, r0
 802166c:	70fb      	strb	r3, [r7, #3]
 802166e:	460b      	mov	r3, r1
 8021670:	70bb      	strb	r3, [r7, #2]
 8021672:	4613      	mov	r3, r2
 8021674:	707b      	strb	r3, [r7, #1]
    int16_t upper_receive, lower_receive;

    upper_receive = static_cast<int16_t>(Read(upper_address, imu_ic_lr));
 8021676:	787a      	ldrb	r2, [r7, #1]
 8021678:	78fb      	ldrb	r3, [r7, #3]
 802167a:	4619      	mov	r1, r3
 802167c:	6878      	ldr	r0, [r7, #4]
 802167e:	f7ff ff51 	bl	8021524 <_ZN8Iim426524ReadEhc>
 8021682:	4603      	mov	r3, r0
 8021684:	81fb      	strh	r3, [r7, #14]
    lower_receive = static_cast<int16_t>(Read(lower_address, imu_ic_lr));
 8021686:	787a      	ldrb	r2, [r7, #1]
 8021688:	78bb      	ldrb	r3, [r7, #2]
 802168a:	4619      	mov	r1, r3
 802168c:	6878      	ldr	r0, [r7, #4]
 802168e:	f7ff ff49 	bl	8021524 <_ZN8Iim426524ReadEhc>
 8021692:	4603      	mov	r3, r0
 8021694:	81bb      	strh	r3, [r7, #12]

    return (upper_receive << 8) | lower_receive;
 8021696:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802169a:	021b      	lsls	r3, r3, #8
 802169c:	b21a      	sxth	r2, r3
 802169e:	89bb      	ldrh	r3, [r7, #12]
 80216a0:	4313      	orrs	r3, r2
 80216a2:	b21b      	sxth	r3, r3
}
 80216a4:	4618      	mov	r0, r3
 80216a6:	3710      	adds	r7, #16
 80216a8:	46bd      	mov	sp, r7
 80216aa:	bd80      	pop	{r7, pc}

080216ac <_ZN8Iim426529GyroZLeftEv>:
{
    return Read2Byte(GYRO_DATA_Y1_ADD, GYRO_DATA_Y0_ADD, 'R');
}

int16_t Iim42652::GyroZLeft()
{
 80216ac:	b580      	push	{r7, lr}
 80216ae:	b082      	sub	sp, #8
 80216b0:	af00      	add	r7, sp, #0
 80216b2:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
 80216b4:	234c      	movs	r3, #76	; 0x4c
 80216b6:	222a      	movs	r2, #42	; 0x2a
 80216b8:	2129      	movs	r1, #41	; 0x29
 80216ba:	6878      	ldr	r0, [r7, #4]
 80216bc:	f7ff ffce 	bl	802165c <_ZN8Iim426529Read2ByteEhhc>
 80216c0:	4603      	mov	r3, r0
}
 80216c2:	4618      	mov	r0, r3
 80216c4:	3708      	adds	r7, #8
 80216c6:	46bd      	mov	sp, r7
 80216c8:	bd80      	pop	{r7, pc}

080216ca <_ZN8Iim4265210GyroZRightEv>:

int16_t Iim42652::GyroZRight()
{
 80216ca:	b580      	push	{r7, lr}
 80216cc:	b082      	sub	sp, #8
 80216ce:	af00      	add	r7, sp, #0
 80216d0:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 80216d2:	2352      	movs	r3, #82	; 0x52
 80216d4:	222a      	movs	r2, #42	; 0x2a
 80216d6:	2129      	movs	r1, #41	; 0x29
 80216d8:	6878      	ldr	r0, [r7, #4]
 80216da:	f7ff ffbf 	bl	802165c <_ZN8Iim426529Read2ByteEhhc>
 80216de:	4603      	mov	r3, r0
}
 80216e0:	4618      	mov	r0, r3
 80216e2:	3708      	adds	r7, #8
 80216e4:	46bd      	mov	sp, r7
 80216e6:	bd80      	pop	{r7, pc}

080216e8 <_ZN3ImuC1EP8Iim42652>:
#include "imu.hpp"
#include "declare_extern.h"

Imu::Imu(Iim42652 *iim_42652) : rad_z_(0)
 80216e8:	b480      	push	{r7}
 80216ea:	b083      	sub	sp, #12
 80216ec:	af00      	add	r7, sp, #0
 80216ee:	6078      	str	r0, [r7, #4]
 80216f0:	6039      	str	r1, [r7, #0]
                              , rad_stack_z_(0)
                              , clear_integral_error_(0)
 80216f2:	687b      	ldr	r3, [r7, #4]
 80216f4:	f04f 0200 	mov.w	r2, #0
 80216f8:	605a      	str	r2, [r3, #4]
 80216fa:	687b      	ldr	r3, [r7, #4]
 80216fc:	f04f 0200 	mov.w	r2, #0
 8021700:	609a      	str	r2, [r3, #8]
 8021702:	687b      	ldr	r3, [r7, #4]
 8021704:	2200      	movs	r2, #0
 8021706:	731a      	strb	r2, [r3, #12]
{
    iim_42652_ = iim_42652;
 8021708:	687b      	ldr	r3, [r7, #4]
 802170a:	683a      	ldr	r2, [r7, #0]
 802170c:	601a      	str	r2, [r3, #0]
}
 802170e:	687b      	ldr	r3, [r7, #4]
 8021710:	4618      	mov	r0, r3
 8021712:	370c      	adds	r7, #12
 8021714:	46bd      	mov	sp, r7
 8021716:	f85d 7b04 	ldr.w	r7, [sp], #4
 802171a:	4770      	bx	lr
 802171c:	0000      	movs	r0, r0
	...

08021720 <_ZN3Imu6UpdateEv>:

void Imu::Update()
{
 8021720:	b5b0      	push	{r4, r5, r7, lr}
 8021722:	b086      	sub	sp, #24
 8021724:	af00      	add	r7, sp, #0
 8021726:	6078      	str	r0, [r7, #4]
    int16_t raw_gyro_z_l = iim_42652_->GyroZLeft();
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	681b      	ldr	r3, [r3, #0]
 802172c:	4618      	mov	r0, r3
 802172e:	f7ff ffbd 	bl	80216ac <_ZN8Iim426529GyroZLeftEv>
 8021732:	4603      	mov	r3, r0
 8021734:	82fb      	strh	r3, [r7, #22]
    int16_t raw_gyro_z_r = iim_42652_->GyroZRight();
 8021736:	687b      	ldr	r3, [r7, #4]
 8021738:	681b      	ldr	r3, [r3, #0]
 802173a:	4618      	mov	r0, r3
 802173c:	f7ff ffc5 	bl	80216ca <_ZN8Iim4265210GyroZRightEv>
 8021740:	4603      	mov	r3, r0
 8021742:	82bb      	strh	r3, [r7, #20]
    float avg_raw_gyro_z = (raw_gyro_z_l + raw_gyro_z_r) / 2.0;
 8021744:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021748:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802174c:	4413      	add	r3, r2
 802174e:	4618      	mov	r0, r3
 8021750:	f7fe fe20 	bl	8020394 <__aeabi_i2d>
 8021754:	f04f 0200 	mov.w	r2, #0
 8021758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802175c:	f7fe ffae 	bl	80206bc <__aeabi_ddiv>
 8021760:	4603      	mov	r3, r0
 8021762:	460c      	mov	r4, r1
 8021764:	4618      	mov	r0, r3
 8021766:	4621      	mov	r1, r4
 8021768:	f7ff f956 	bl	8020a18 <__aeabi_d2f>
 802176c:	4603      	mov	r3, r0
 802176e:	613b      	str	r3, [r7, #16]
    float rad_z = avg_raw_gyro_z * CONST_RAD_CALC * TIM6_PERIOD_S;
 8021770:	6938      	ldr	r0, [r7, #16]
 8021772:	f7fe fe21 	bl	80203b8 <__aeabi_f2d>
 8021776:	a331      	add	r3, pc, #196	; (adr r3, 802183c <_ZN3Imu6UpdateEv+0x11c>)
 8021778:	e9d3 2300 	ldrd	r2, r3, [r3]
 802177c:	f7fe fe74 	bl	8020468 <__aeabi_dmul>
 8021780:	4603      	mov	r3, r0
 8021782:	460c      	mov	r4, r1
 8021784:	4618      	mov	r0, r3
 8021786:	4621      	mov	r1, r4
 8021788:	a32e      	add	r3, pc, #184	; (adr r3, 8021844 <_ZN3Imu6UpdateEv+0x124>)
 802178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802178e:	f7fe fe6b 	bl	8020468 <__aeabi_dmul>
 8021792:	4603      	mov	r3, r0
 8021794:	460c      	mov	r4, r1
 8021796:	4618      	mov	r0, r3
 8021798:	4621      	mov	r1, r4
 802179a:	f7ff f93d 	bl	8020a18 <__aeabi_d2f>
 802179e:	4603      	mov	r3, r0
 80217a0:	60fb      	str	r3, [r7, #12]

    /* low pass filter */
    static float pre_filter = 0;
    float filter = pre_filter * (1.0 - RAD_LPF_RATIO) + (rad_z * RAD_LPF_RATIO);
 80217a2:	4b23      	ldr	r3, [pc, #140]	; (8021830 <_ZN3Imu6UpdateEv+0x110>)
 80217a4:	681b      	ldr	r3, [r3, #0]
 80217a6:	4618      	mov	r0, r3
 80217a8:	f7fe fe06 	bl	80203b8 <__aeabi_f2d>
 80217ac:	a31c      	add	r3, pc, #112	; (adr r3, 8021820 <_ZN3Imu6UpdateEv+0x100>)
 80217ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217b2:	f7fe fe59 	bl	8020468 <__aeabi_dmul>
 80217b6:	4603      	mov	r3, r0
 80217b8:	460c      	mov	r4, r1
 80217ba:	4625      	mov	r5, r4
 80217bc:	461c      	mov	r4, r3
 80217be:	68f8      	ldr	r0, [r7, #12]
 80217c0:	f7fe fdfa 	bl	80203b8 <__aeabi_f2d>
 80217c4:	a318      	add	r3, pc, #96	; (adr r3, 8021828 <_ZN3Imu6UpdateEv+0x108>)
 80217c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217ca:	f7fe fe4d 	bl	8020468 <__aeabi_dmul>
 80217ce:	4602      	mov	r2, r0
 80217d0:	460b      	mov	r3, r1
 80217d2:	4620      	mov	r0, r4
 80217d4:	4629      	mov	r1, r5
 80217d6:	f7fe fc91 	bl	80200fc <__adddf3>
 80217da:	4603      	mov	r3, r0
 80217dc:	460c      	mov	r4, r1
 80217de:	4618      	mov	r0, r3
 80217e0:	4621      	mov	r1, r4
 80217e2:	f7ff f919 	bl	8020a18 <__aeabi_d2f>
 80217e6:	4603      	mov	r3, r0
 80217e8:	60bb      	str	r3, [r7, #8]
    pre_filter = filter;
 80217ea:	4a11      	ldr	r2, [pc, #68]	; (8021830 <_ZN3Imu6UpdateEv+0x110>)
 80217ec:	68bb      	ldr	r3, [r7, #8]
 80217ee:	6013      	str	r3, [r2, #0]

    rad_z_ = filter;
 80217f0:	687b      	ldr	r3, [r7, #4]
 80217f2:	68ba      	ldr	r2, [r7, #8]
 80217f4:	605a      	str	r2, [r3, #4]
    rad_stack_z_ += filter;
 80217f6:	687b      	ldr	r3, [r7, #4]
 80217f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80217fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8021800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021804:	687b      	ldr	r3, [r7, #4]
 8021806:	edc3 7a02 	vstr	s15, [r3, #8]

#ifdef DEBUG_MODE
    g_rad_z = rad_z;
 802180a:	4a0a      	ldr	r2, [pc, #40]	; (8021834 <_ZN3Imu6UpdateEv+0x114>)
 802180c:	68fb      	ldr	r3, [r7, #12]
 802180e:	6013      	str	r3, [r2, #0]
    g_rad_stack_z = rad_stack_z_;
 8021810:	687b      	ldr	r3, [r7, #4]
 8021812:	689b      	ldr	r3, [r3, #8]
 8021814:	4a08      	ldr	r2, [pc, #32]	; (8021838 <_ZN3Imu6UpdateEv+0x118>)
 8021816:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8021818:	bf00      	nop
 802181a:	3718      	adds	r7, #24
 802181c:	46bd      	mov	sp, r7
 802181e:	bdb0      	pop	{r4, r5, r7, pc}
 8021820:	33333334 	.word	0x33333334
 8021824:	3fd33333 	.word	0x3fd33333
 8021828:	66666666 	.word	0x66666666
 802182c:	3fe66666 	.word	0x3fe66666
 8021830:	200001fc 	.word	0x200001fc
 8021834:	20000264 	.word	0x20000264
 8021838:	20000260 	.word	0x20000260
 802183c:	0ae53650 	.word	0x0ae53650
 8021840:	3f5172ef 	.word	0x3f5172ef
 8021844:	47ae147b 	.word	0x47ae147b
 8021848:	3f547ae1 	.word	0x3f547ae1

0802184c <_ZN3Imu14ClearRadStackZEv>:

void Imu::ClearRadStackZ()
{
 802184c:	b480      	push	{r7}
 802184e:	b083      	sub	sp, #12
 8021850:	af00      	add	r7, sp, #0
 8021852:	6078      	str	r0, [r7, #4]
    rad_stack_z_ = 0;
 8021854:	687b      	ldr	r3, [r7, #4]
 8021856:	f04f 0200 	mov.w	r2, #0
 802185a:	609a      	str	r2, [r3, #8]
}
 802185c:	bf00      	nop
 802185e:	370c      	adds	r7, #12
 8021860:	46bd      	mov	sp, r7
 8021862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021866:	4770      	bx	lr

08021868 <_ZN3Imu12GetRadStackZEv>:

float Imu::GetRadStackZ()
{
 8021868:	b480      	push	{r7}
 802186a:	b083      	sub	sp, #12
 802186c:	af00      	add	r7, sp, #0
 802186e:	6078      	str	r0, [r7, #4]
    return rad_stack_z_;
 8021870:	687b      	ldr	r3, [r7, #4]
 8021872:	689b      	ldr	r3, [r3, #8]
 8021874:	ee07 3a90 	vmov	s15, r3
}
 8021878:	eeb0 0a67 	vmov.f32	s0, s15
 802187c:	370c      	adds	r7, #12
 802187e:	46bd      	mov	sp, r7
 8021880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021884:	4770      	bx	lr
	...

08021888 <_ZN3Imu22CalibrationStackRadianEv>:
    return p + i + d;
}

#ifdef DEBUG_MODE
void Imu::CalibrationStackRadian()
{
 8021888:	b590      	push	{r4, r7, lr}
 802188a:	b087      	sub	sp, #28
 802188c:	af00      	add	r7, sp, #0
 802188e:	6078      	str	r0, [r7, #4]
    int16_t yaw_l = iim_42652_->GyroZLeft();
 8021890:	687b      	ldr	r3, [r7, #4]
 8021892:	681b      	ldr	r3, [r3, #0]
 8021894:	4618      	mov	r0, r3
 8021896:	f7ff ff09 	bl	80216ac <_ZN8Iim426529GyroZLeftEv>
 802189a:	4603      	mov	r3, r0
 802189c:	82fb      	strh	r3, [r7, #22]
    int16_t yaw_r = iim_42652_->GyroZRight();
 802189e:	687b      	ldr	r3, [r7, #4]
 80218a0:	681b      	ldr	r3, [r3, #0]
 80218a2:	4618      	mov	r0, r3
 80218a4:	f7ff ff11 	bl	80216ca <_ZN8Iim4265210GyroZRightEv>
 80218a8:	4603      	mov	r3, r0
 80218aa:	82bb      	strh	r3, [r7, #20]
    float yaw_avg = (yaw_l + yaw_r) / 2.0;
 80218ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80218b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80218b4:	4413      	add	r3, r2
 80218b6:	4618      	mov	r0, r3
 80218b8:	f7fe fd6c 	bl	8020394 <__aeabi_i2d>
 80218bc:	f04f 0200 	mov.w	r2, #0
 80218c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80218c4:	f7fe fefa 	bl	80206bc <__aeabi_ddiv>
 80218c8:	4603      	mov	r3, r0
 80218ca:	460c      	mov	r4, r1
 80218cc:	4618      	mov	r0, r3
 80218ce:	4621      	mov	r1, r4
 80218d0:	f7ff f8a2 	bl	8020a18 <__aeabi_d2f>
 80218d4:	4603      	mov	r3, r0
 80218d6:	613b      	str	r3, [r7, #16]
    float radian = yaw_avg * CONST_RAD_CALC * TIM6_PERIOD_S;
 80218d8:	6938      	ldr	r0, [r7, #16]
 80218da:	f7fe fd6d 	bl	80203b8 <__aeabi_f2d>
 80218de:	a315      	add	r3, pc, #84	; (adr r3, 8021934 <_ZN3Imu22CalibrationStackRadianEv+0xac>)
 80218e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218e4:	f7fe fdc0 	bl	8020468 <__aeabi_dmul>
 80218e8:	4603      	mov	r3, r0
 80218ea:	460c      	mov	r4, r1
 80218ec:	4618      	mov	r0, r3
 80218ee:	4621      	mov	r1, r4
 80218f0:	a312      	add	r3, pc, #72	; (adr r3, 802193c <_ZN3Imu22CalibrationStackRadianEv+0xb4>)
 80218f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218f6:	f7fe fdb7 	bl	8020468 <__aeabi_dmul>
 80218fa:	4603      	mov	r3, r0
 80218fc:	460c      	mov	r4, r1
 80218fe:	4618      	mov	r0, r3
 8021900:	4621      	mov	r1, r4
 8021902:	f7ff f889 	bl	8020a18 <__aeabi_d2f>
 8021906:	4603      	mov	r3, r0
 8021908:	60fb      	str	r3, [r7, #12]

    rad_stack_z_ += radian;
 802190a:	687b      	ldr	r3, [r7, #4]
 802190c:	ed93 7a02 	vldr	s14, [r3, #8]
 8021910:	edd7 7a03 	vldr	s15, [r7, #12]
 8021914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021918:	687b      	ldr	r3, [r7, #4]
 802191a:	edc3 7a02 	vstr	s15, [r3, #8]
    g_calib_rad_stack = rad_stack_z_;
 802191e:	687b      	ldr	r3, [r7, #4]
 8021920:	689b      	ldr	r3, [r3, #8]
 8021922:	4a03      	ldr	r2, [pc, #12]	; (8021930 <_ZN3Imu22CalibrationStackRadianEv+0xa8>)
 8021924:	6013      	str	r3, [r2, #0]
}
 8021926:	bf00      	nop
 8021928:	371c      	adds	r7, #28
 802192a:	46bd      	mov	sp, r7
 802192c:	bd90      	pop	{r4, r7, pc}
 802192e:	bf00      	nop
 8021930:	20000404 	.word	0x20000404
 8021934:	0ae53650 	.word	0x0ae53650
 8021938:	3f5172ef 	.word	0x3f5172ef
 802193c:	47ae147b 	.word	0x47ae147b
 8021940:	3f547ae1 	.word	0x3f547ae1

08021944 <_ZN3Imu11CalibrationEv>:

void Imu::Calibration()
{
 8021944:	b580      	push	{r7, lr}
 8021946:	b084      	sub	sp, #16
 8021948:	af00      	add	r7, sp, #0
 802194a:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0; i < NUM_OF_SAMPLE_CALIB; i++)
 802194c:	2300      	movs	r3, #0
 802194e:	60fb      	str	r3, [r7, #12]
 8021950:	68fb      	ldr	r3, [r7, #12]
 8021952:	4a08      	ldr	r2, [pc, #32]	; (8021974 <_ZN3Imu11CalibrationEv+0x30>)
 8021954:	4293      	cmp	r3, r2
 8021956:	d809      	bhi.n	802196c <_ZN3Imu11CalibrationEv+0x28>
    {
        CalibrationStackRadian();
 8021958:	6878      	ldr	r0, [r7, #4]
 802195a:	f7ff ff95 	bl	8021888 <_ZN3Imu22CalibrationStackRadianEv>
        HAL_Delay(1);
 802195e:	2001      	movs	r0, #1
 8021960:	f004 fd6e 	bl	8026440 <HAL_Delay>
    for(uint32_t i = 0; i < NUM_OF_SAMPLE_CALIB; i++)
 8021964:	68fb      	ldr	r3, [r7, #12]
 8021966:	3301      	adds	r3, #1
 8021968:	60fb      	str	r3, [r7, #12]
 802196a:	e7f1      	b.n	8021950 <_ZN3Imu11CalibrationEv+0xc>
    }
}
 802196c:	bf00      	nop
 802196e:	3710      	adds	r7, #16
 8021970:	46bd      	mov	sp, r7
 8021972:	bd80      	pop	{r7, pc}
 8021974:	0002bf1f 	.word	0x0002bf1f

08021978 <_ZN3LedC1Ev>:
#include "led.hpp"

Led::Led() : interrupt_count_(0)
 8021978:	b480      	push	{r7}
 802197a:	b083      	sub	sp, #12
 802197c:	af00      	add	r7, sp, #0
 802197e:	6078      	str	r0, [r7, #4]
           , interrupt_timer_(0) {}
 8021980:	687b      	ldr	r3, [r7, #4]
 8021982:	2200      	movs	r2, #0
 8021984:	701a      	strb	r2, [r3, #0]
 8021986:	687b      	ldr	r3, [r7, #4]
 8021988:	2200      	movs	r2, #0
 802198a:	705a      	strb	r2, [r3, #1]
 802198c:	687b      	ldr	r3, [r7, #4]
 802198e:	4618      	mov	r0, r3
 8021990:	370c      	adds	r7, #12
 8021992:	46bd      	mov	sp, r7
 8021994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021998:	4770      	bx	lr
	...

0802199c <_ZN3Led10ColorOrderEc>:

void Led::ColorOrder(char color)
{
 802199c:	b580      	push	{r7, lr}
 802199e:	b082      	sub	sp, #8
 80219a0:	af00      	add	r7, sp, #0
 80219a2:	6078      	str	r0, [r7, #4]
 80219a4:	460b      	mov	r3, r1
 80219a6:	70fb      	strb	r3, [r7, #3]
    switch(color)
 80219a8:	78fb      	ldrb	r3, [r7, #3]
 80219aa:	3b42      	subs	r3, #66	; 0x42
 80219ac:	2b17      	cmp	r3, #23
 80219ae:	f200 80b8 	bhi.w	8021b22 <_ZN3Led10ColorOrderEc+0x186>
 80219b2:	a201      	add	r2, pc, #4	; (adr r2, 80219b8 <_ZN3Led10ColorOrderEc+0x1c>)
 80219b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80219b8:	08021a65 	.word	0x08021a65
 80219bc:	08021ab1 	.word	0x08021ab1
 80219c0:	08021b23 	.word	0x08021b23
 80219c4:	08021b23 	.word	0x08021b23
 80219c8:	08021b23 	.word	0x08021b23
 80219cc:	08021a3f 	.word	0x08021a3f
 80219d0:	08021b23 	.word	0x08021b23
 80219d4:	08021b23 	.word	0x08021b23
 80219d8:	08021b23 	.word	0x08021b23
 80219dc:	08021b23 	.word	0x08021b23
 80219e0:	08021b23 	.word	0x08021b23
 80219e4:	08021ad7 	.word	0x08021ad7
 80219e8:	08021b23 	.word	0x08021b23
 80219ec:	08021b23 	.word	0x08021b23
 80219f0:	08021b23 	.word	0x08021b23
 80219f4:	08021b23 	.word	0x08021b23
 80219f8:	08021a19 	.word	0x08021a19
 80219fc:	08021b23 	.word	0x08021b23
 8021a00:	08021b23 	.word	0x08021b23
 8021a04:	08021b23 	.word	0x08021b23
 8021a08:	08021b23 	.word	0x08021b23
 8021a0c:	08021afd 	.word	0x08021afd
 8021a10:	08021b23 	.word	0x08021b23
 8021a14:	08021a8b 	.word	0x08021a8b
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 8021a18:	2200      	movs	r2, #0
 8021a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021a1e:	484c      	ldr	r0, [pc, #304]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a20:	f006 fa2c 	bl	8027e7c <HAL_GPIO_WritePin>
 8021a24:	2201      	movs	r2, #1
 8021a26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021a2a:	4849      	ldr	r0, [pc, #292]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a2c:	f006 fa26 	bl	8027e7c <HAL_GPIO_WritePin>
 8021a30:	2201      	movs	r2, #1
 8021a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021a36:	4846      	ldr	r0, [pc, #280]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a38:	f006 fa20 	bl	8027e7c <HAL_GPIO_WritePin>
 8021a3c:	e084      	b.n	8021b48 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 8021a3e:	2201      	movs	r2, #1
 8021a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021a44:	4842      	ldr	r0, [pc, #264]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a46:	f006 fa19 	bl	8027e7c <HAL_GPIO_WritePin>
 8021a4a:	2200      	movs	r2, #0
 8021a4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021a50:	483f      	ldr	r0, [pc, #252]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a52:	f006 fa13 	bl	8027e7c <HAL_GPIO_WritePin>
 8021a56:	2201      	movs	r2, #1
 8021a58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021a5c:	483c      	ldr	r0, [pc, #240]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a5e:	f006 fa0d 	bl	8027e7c <HAL_GPIO_WritePin>
 8021a62:	e071      	b.n	8021b48 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 8021a64:	2201      	movs	r2, #1
 8021a66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021a6a:	4839      	ldr	r0, [pc, #228]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a6c:	f006 fa06 	bl	8027e7c <HAL_GPIO_WritePin>
 8021a70:	2201      	movs	r2, #1
 8021a72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021a76:	4836      	ldr	r0, [pc, #216]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a78:	f006 fa00 	bl	8027e7c <HAL_GPIO_WritePin>
 8021a7c:	2200      	movs	r2, #0
 8021a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021a82:	4833      	ldr	r0, [pc, #204]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a84:	f006 f9fa 	bl	8027e7c <HAL_GPIO_WritePin>
 8021a88:	e05e      	b.n	8021b48 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 8021a8a:	2200      	movs	r2, #0
 8021a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021a90:	482f      	ldr	r0, [pc, #188]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a92:	f006 f9f3 	bl	8027e7c <HAL_GPIO_WritePin>
 8021a96:	2200      	movs	r2, #0
 8021a98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021a9c:	482c      	ldr	r0, [pc, #176]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a9e:	f006 f9ed 	bl	8027e7c <HAL_GPIO_WritePin>
 8021aa2:	2201      	movs	r2, #1
 8021aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021aa8:	4829      	ldr	r0, [pc, #164]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021aaa:	f006 f9e7 	bl	8027e7c <HAL_GPIO_WritePin>
 8021aae:	e04b      	b.n	8021b48 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 8021ab0:	2201      	movs	r2, #1
 8021ab2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021ab6:	4826      	ldr	r0, [pc, #152]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021ab8:	f006 f9e0 	bl	8027e7c <HAL_GPIO_WritePin>
 8021abc:	2200      	movs	r2, #0
 8021abe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021ac2:	4823      	ldr	r0, [pc, #140]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021ac4:	f006 f9da 	bl	8027e7c <HAL_GPIO_WritePin>
 8021ac8:	2200      	movs	r2, #0
 8021aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021ace:	4820      	ldr	r0, [pc, #128]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021ad0:	f006 f9d4 	bl	8027e7c <HAL_GPIO_WritePin>
 8021ad4:	e038      	b.n	8021b48 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 8021ad6:	2200      	movs	r2, #0
 8021ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021adc:	481c      	ldr	r0, [pc, #112]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021ade:	f006 f9cd 	bl	8027e7c <HAL_GPIO_WritePin>
 8021ae2:	2201      	movs	r2, #1
 8021ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021ae8:	4819      	ldr	r0, [pc, #100]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021aea:	f006 f9c7 	bl	8027e7c <HAL_GPIO_WritePin>
 8021aee:	2200      	movs	r2, #0
 8021af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021af4:	4816      	ldr	r0, [pc, #88]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021af6:	f006 f9c1 	bl	8027e7c <HAL_GPIO_WritePin>
 8021afa:	e025      	b.n	8021b48 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 8021afc:	2200      	movs	r2, #0
 8021afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021b02:	4813      	ldr	r0, [pc, #76]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021b04:	f006 f9ba 	bl	8027e7c <HAL_GPIO_WritePin>
 8021b08:	2200      	movs	r2, #0
 8021b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021b0e:	4810      	ldr	r0, [pc, #64]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021b10:	f006 f9b4 	bl	8027e7c <HAL_GPIO_WritePin>
 8021b14:	2200      	movs	r2, #0
 8021b16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021b1a:	480d      	ldr	r0, [pc, #52]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021b1c:	f006 f9ae 	bl	8027e7c <HAL_GPIO_WritePin>
 8021b20:	e012      	b.n	8021b48 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 8021b22:	2201      	movs	r2, #1
 8021b24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021b28:	4809      	ldr	r0, [pc, #36]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021b2a:	f006 f9a7 	bl	8027e7c <HAL_GPIO_WritePin>
 8021b2e:	2201      	movs	r2, #1
 8021b30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021b34:	4806      	ldr	r0, [pc, #24]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021b36:	f006 f9a1 	bl	8027e7c <HAL_GPIO_WritePin>
 8021b3a:	2201      	movs	r2, #1
 8021b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021b40:	4803      	ldr	r0, [pc, #12]	; (8021b50 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021b42:	f006 f99b 	bl	8027e7c <HAL_GPIO_WritePin>
 8021b46:	bf00      	nop
    }
}
 8021b48:	bf00      	nop
 8021b4a:	3708      	adds	r7, #8
 8021b4c:	46bd      	mov	sp, r7
 8021b4e:	bd80      	pop	{r7, pc}
 8021b50:	40020800 	.word	0x40020800

08021b54 <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 8021b54:	b580      	push	{r7, lr}
 8021b56:	b084      	sub	sp, #16
 8021b58:	af00      	add	r7, sp, #0
 8021b5a:	6078      	str	r0, [r7, #4]
 8021b5c:	4608      	mov	r0, r1
 8021b5e:	4611      	mov	r1, r2
 8021b60:	461a      	mov	r2, r3
 8021b62:	4603      	mov	r3, r0
 8021b64:	70fb      	strb	r3, [r7, #3]
 8021b66:	460b      	mov	r3, r1
 8021b68:	70bb      	strb	r3, [r7, #2]
 8021b6a:	4613      	mov	r3, r2
 8021b6c:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 8021b6e:	2300      	movs	r3, #0
 8021b70:	73fb      	strb	r3, [r7, #15]
 8021b72:	7bfa      	ldrb	r2, [r7, #15]
 8021b74:	78fb      	ldrb	r3, [r7, #3]
 8021b76:	429a      	cmp	r2, r3
 8021b78:	d215      	bcs.n	8021ba6 <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 8021b7a:	78bb      	ldrb	r3, [r7, #2]
 8021b7c:	4619      	mov	r1, r3
 8021b7e:	6878      	ldr	r0, [r7, #4]
 8021b80:	f7ff ff0c 	bl	802199c <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 8021b84:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021b88:	f004 fc5a 	bl	8026440 <HAL_Delay>
        ColorOrder(color_2);
 8021b8c:	787b      	ldrb	r3, [r7, #1]
 8021b8e:	4619      	mov	r1, r3
 8021b90:	6878      	ldr	r0, [r7, #4]
 8021b92:	f7ff ff03 	bl	802199c <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 8021b96:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021b9a:	f004 fc51 	bl	8026440 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021b9e:	7bfb      	ldrb	r3, [r7, #15]
 8021ba0:	3301      	adds	r3, #1
 8021ba2:	73fb      	strb	r3, [r7, #15]
 8021ba4:	e7e5      	b.n	8021b72 <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 8021ba6:	bf00      	nop
 8021ba8:	3710      	adds	r7, #16
 8021baa:	46bd      	mov	sp, r7
 8021bac:	bd80      	pop	{r7, pc}

08021bae <_ZN3Led7RainbowEh>:

void Led::Rainbow(uint8_t times)
{
 8021bae:	b580      	push	{r7, lr}
 8021bb0:	b084      	sub	sp, #16
 8021bb2:	af00      	add	r7, sp, #0
 8021bb4:	6078      	str	r0, [r7, #4]
 8021bb6:	460b      	mov	r3, r1
 8021bb8:	70fb      	strb	r3, [r7, #3]
    for(uint8_t i = 0; i < times; i++)
 8021bba:	2300      	movs	r3, #0
 8021bbc:	73fb      	strb	r3, [r7, #15]
 8021bbe:	7bfa      	ldrb	r2, [r7, #15]
 8021bc0:	78fb      	ldrb	r3, [r7, #3]
 8021bc2:	429a      	cmp	r2, r3
 8021bc4:	d233      	bcs.n	8021c2e <_ZN3Led7RainbowEh+0x80>
    {
        ColorOrder('R');
 8021bc6:	2152      	movs	r1, #82	; 0x52
 8021bc8:	6878      	ldr	r0, [r7, #4]
 8021bca:	f7ff fee7 	bl	802199c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021bce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021bd2:	f004 fc35 	bl	8026440 <HAL_Delay>
        ColorOrder('Y');
 8021bd6:	2159      	movs	r1, #89	; 0x59
 8021bd8:	6878      	ldr	r0, [r7, #4]
 8021bda:	f7ff fedf 	bl	802199c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021bde:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021be2:	f004 fc2d 	bl	8026440 <HAL_Delay>
        ColorOrder('G');
 8021be6:	2147      	movs	r1, #71	; 0x47
 8021be8:	6878      	ldr	r0, [r7, #4]
 8021bea:	f7ff fed7 	bl	802199c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021bee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021bf2:	f004 fc25 	bl	8026440 <HAL_Delay>
        ColorOrder('C');
 8021bf6:	2143      	movs	r1, #67	; 0x43
 8021bf8:	6878      	ldr	r0, [r7, #4]
 8021bfa:	f7ff fecf 	bl	802199c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021bfe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021c02:	f004 fc1d 	bl	8026440 <HAL_Delay>
        ColorOrder('B');
 8021c06:	2142      	movs	r1, #66	; 0x42
 8021c08:	6878      	ldr	r0, [r7, #4]
 8021c0a:	f7ff fec7 	bl	802199c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021c0e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021c12:	f004 fc15 	bl	8026440 <HAL_Delay>
        ColorOrder('M');
 8021c16:	214d      	movs	r1, #77	; 0x4d
 8021c18:	6878      	ldr	r0, [r7, #4]
 8021c1a:	f7ff febf 	bl	802199c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021c1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021c22:	f004 fc0d 	bl	8026440 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021c26:	7bfb      	ldrb	r3, [r7, #15]
 8021c28:	3301      	adds	r3, #1
 8021c2a:	73fb      	strb	r3, [r7, #15]
 8021c2c:	e7c7      	b.n	8021bbe <_ZN3Led7RainbowEh+0x10>
    }
}
 8021c2e:	bf00      	nop
 8021c30:	3710      	adds	r7, #16
 8021c32:	46bd      	mov	sp, r7
 8021c34:	bd80      	pop	{r7, pc}

08021c36 <_ZN3Led14BlinkInterruptEhcc>:

bool Led::BlinkInterrupt(uint8_t times, char color_1, char color_2)
{
 8021c36:	b580      	push	{r7, lr}
 8021c38:	b084      	sub	sp, #16
 8021c3a:	af00      	add	r7, sp, #0
 8021c3c:	6078      	str	r0, [r7, #4]
 8021c3e:	4608      	mov	r0, r1
 8021c40:	4611      	mov	r1, r2
 8021c42:	461a      	mov	r2, r3
 8021c44:	4603      	mov	r3, r0
 8021c46:	70fb      	strb	r3, [r7, #3]
 8021c48:	460b      	mov	r3, r1
 8021c4a:	70bb      	strb	r3, [r7, #2]
 8021c4c:	4613      	mov	r3, r2
 8021c4e:	707b      	strb	r3, [r7, #1]
    uint8_t count = interrupt_count_;
 8021c50:	687b      	ldr	r3, [r7, #4]
 8021c52:	781b      	ldrb	r3, [r3, #0]
 8021c54:	73fb      	strb	r3, [r7, #15]
    uint8_t timer = interrupt_timer_;
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	785b      	ldrb	r3, [r3, #1]
 8021c5a:	73bb      	strb	r3, [r7, #14]
    bool blink_continue = true;
 8021c5c:	2301      	movs	r3, #1
 8021c5e:	737b      	strb	r3, [r7, #13]

    if(count < times){
 8021c60:	7bfa      	ldrb	r2, [r7, #15]
 8021c62:	78fb      	ldrb	r3, [r7, #3]
 8021c64:	429a      	cmp	r2, r3
 8021c66:	d21d      	bcs.n	8021ca4 <_ZN3Led14BlinkInterruptEhcc+0x6e>
        if(timer < BLINK_INTERVAL_TIMX){
 8021c68:	7bbb      	ldrb	r3, [r7, #14]
 8021c6a:	2b27      	cmp	r3, #39	; 0x27
 8021c6c:	d808      	bhi.n	8021c80 <_ZN3Led14BlinkInterruptEhcc+0x4a>
            ColorOrder(color_1);
 8021c6e:	78bb      	ldrb	r3, [r7, #2]
 8021c70:	4619      	mov	r1, r3
 8021c72:	6878      	ldr	r0, [r7, #4]
 8021c74:	f7ff fe92 	bl	802199c <_ZN3Led10ColorOrderEc>
            timer++;
 8021c78:	7bbb      	ldrb	r3, [r7, #14]
 8021c7a:	3301      	adds	r3, #1
 8021c7c:	73bb      	strb	r3, [r7, #14]
 8021c7e:	e019      	b.n	8021cb4 <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else if(timer < (BLINK_INTERVAL_TIMX + BLINK_INTERVAL_TIMX)){
 8021c80:	7bbb      	ldrb	r3, [r7, #14]
 8021c82:	2b4f      	cmp	r3, #79	; 0x4f
 8021c84:	d808      	bhi.n	8021c98 <_ZN3Led14BlinkInterruptEhcc+0x62>
            ColorOrder(color_2);
 8021c86:	787b      	ldrb	r3, [r7, #1]
 8021c88:	4619      	mov	r1, r3
 8021c8a:	6878      	ldr	r0, [r7, #4]
 8021c8c:	f7ff fe86 	bl	802199c <_ZN3Led10ColorOrderEc>
            timer++;
 8021c90:	7bbb      	ldrb	r3, [r7, #14]
 8021c92:	3301      	adds	r3, #1
 8021c94:	73bb      	strb	r3, [r7, #14]
 8021c96:	e00d      	b.n	8021cb4 <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else{
            count++;
 8021c98:	7bfb      	ldrb	r3, [r7, #15]
 8021c9a:	3301      	adds	r3, #1
 8021c9c:	73fb      	strb	r3, [r7, #15]
            timer = 0;
 8021c9e:	2300      	movs	r3, #0
 8021ca0:	73bb      	strb	r3, [r7, #14]
 8021ca2:	e007      	b.n	8021cb4 <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }
    }else{
        ColorOrder('X');
 8021ca4:	2158      	movs	r1, #88	; 0x58
 8021ca6:	6878      	ldr	r0, [r7, #4]
 8021ca8:	f7ff fe78 	bl	802199c <_ZN3Led10ColorOrderEc>
        count = 0;
 8021cac:	2300      	movs	r3, #0
 8021cae:	73fb      	strb	r3, [r7, #15]
        blink_continue = false;
 8021cb0:	2300      	movs	r3, #0
 8021cb2:	737b      	strb	r3, [r7, #13]
    }

    interrupt_count_ = count;
 8021cb4:	687b      	ldr	r3, [r7, #4]
 8021cb6:	7bfa      	ldrb	r2, [r7, #15]
 8021cb8:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = timer;
 8021cba:	687b      	ldr	r3, [r7, #4]
 8021cbc:	7bba      	ldrb	r2, [r7, #14]
 8021cbe:	705a      	strb	r2, [r3, #1]

    return blink_continue;
 8021cc0:	7b7b      	ldrb	r3, [r7, #13]
}
 8021cc2:	4618      	mov	r0, r3
 8021cc4:	3710      	adds	r7, #16
 8021cc6:	46bd      	mov	sp, r7
 8021cc8:	bd80      	pop	{r7, pc}

08021cca <_ZN3Led14ResetInterruptEv>:

void Led::ResetInterrupt()
{
 8021cca:	b480      	push	{r7}
 8021ccc:	b083      	sub	sp, #12
 8021cce:	af00      	add	r7, sp, #0
 8021cd0:	6078      	str	r0, [r7, #4]
    interrupt_count_ = 0;
 8021cd2:	687b      	ldr	r3, [r7, #4]
 8021cd4:	2200      	movs	r2, #0
 8021cd6:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = 0;
 8021cd8:	687b      	ldr	r3, [r7, #4]
 8021cda:	2200      	movs	r2, #0
 8021cdc:	705a      	strb	r2, [r3, #1]
 8021cde:	bf00      	nop
 8021ce0:	370c      	adds	r7, #12
 8021ce2:	46bd      	mov	sp, r7
 8021ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ce8:	4770      	bx	lr

08021cea <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_{0}
 8021cea:	b580      	push	{r7, lr}
 8021cec:	b082      	sub	sp, #8
 8021cee:	af00      	add	r7, sp, #0
 8021cf0:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_{{0}}
                         , max_line_sensors_valu_{0}
                         , min_line_sensors_valu_{0}
                         , line_sensors_valu_{0}
                         , emergency_stop_flag_(false) {}
 8021cf2:	687b      	ldr	r3, [r7, #4]
 8021cf4:	461a      	mov	r2, r3
 8021cf6:	2300      	movs	r3, #0
 8021cf8:	6013      	str	r3, [r2, #0]
 8021cfa:	6053      	str	r3, [r2, #4]
 8021cfc:	6093      	str	r3, [r2, #8]
 8021cfe:	60d3      	str	r3, [r2, #12]
 8021d00:	6113      	str	r3, [r2, #16]
 8021d02:	6153      	str	r3, [r2, #20]
 8021d04:	6193      	str	r3, [r2, #24]
 8021d06:	687b      	ldr	r3, [r7, #4]
 8021d08:	331c      	adds	r3, #28
 8021d0a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8021d0e:	2100      	movs	r1, #0
 8021d10:	4618      	mov	r0, r3
 8021d12:	f008 fc14 	bl	802a53e <memset>
 8021d16:	687b      	ldr	r3, [r7, #4]
 8021d18:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8021d1c:	2200      	movs	r2, #0
 8021d1e:	601a      	str	r2, [r3, #0]
 8021d20:	605a      	str	r2, [r3, #4]
 8021d22:	609a      	str	r2, [r3, #8]
 8021d24:	60da      	str	r2, [r3, #12]
 8021d26:	611a      	str	r2, [r3, #16]
 8021d28:	615a      	str	r2, [r3, #20]
 8021d2a:	619a      	str	r2, [r3, #24]
 8021d2c:	687b      	ldr	r3, [r7, #4]
 8021d2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021d32:	2200      	movs	r2, #0
 8021d34:	601a      	str	r2, [r3, #0]
 8021d36:	605a      	str	r2, [r3, #4]
 8021d38:	609a      	str	r2, [r3, #8]
 8021d3a:	60da      	str	r2, [r3, #12]
 8021d3c:	611a      	str	r2, [r3, #16]
 8021d3e:	615a      	str	r2, [r3, #20]
 8021d40:	619a      	str	r2, [r3, #24]
 8021d42:	687b      	ldr	r3, [r7, #4]
 8021d44:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8021d48:	2200      	movs	r2, #0
 8021d4a:	601a      	str	r2, [r3, #0]
 8021d4c:	605a      	str	r2, [r3, #4]
 8021d4e:	609a      	str	r2, [r3, #8]
 8021d50:	60da      	str	r2, [r3, #12]
 8021d52:	611a      	str	r2, [r3, #16]
 8021d54:	615a      	str	r2, [r3, #20]
 8021d56:	619a      	str	r2, [r3, #24]
 8021d58:	687b      	ldr	r3, [r7, #4]
 8021d5a:	2200      	movs	r2, #0
 8021d5c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8021d60:	687b      	ldr	r3, [r7, #4]
 8021d62:	4618      	mov	r0, r3
 8021d64:	3708      	adds	r7, #8
 8021d66:	46bd      	mov	sp, r7
 8021d68:	bd80      	pop	{r7, pc}
	...

08021d6c <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 8021d6c:	b580      	push	{r7, lr}
 8021d6e:	b082      	sub	sp, #8
 8021d70:	af00      	add	r7, sp, #0
 8021d72:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 8021d74:	687b      	ldr	r3, [r7, #4]
 8021d76:	220e      	movs	r2, #14
 8021d78:	4619      	mov	r1, r3
 8021d7a:	4815      	ldr	r0, [pc, #84]	; (8021dd0 <_ZN10LineSensor4InitEv+0x64>)
 8021d7c:	f004 fbc6 	bl	802650c <HAL_ADC_Start_DMA>
 8021d80:	4603      	mov	r3, r0
 8021d82:	2b00      	cmp	r3, #0
 8021d84:	bf14      	ite	ne
 8021d86:	2301      	movne	r3, #1
 8021d88:	2300      	moveq	r3, #0
 8021d8a:	b2db      	uxtb	r3, r3
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	d004      	beq.n	8021d9a <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 8021d90:	4b10      	ldr	r3, [pc, #64]	; (8021dd4 <_ZN10LineSensor4InitEv+0x68>)
 8021d92:	2201      	movs	r2, #1
 8021d94:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021d96:	f001 ff07 	bl	8023ba8 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 8021d9a:	2100      	movs	r1, #0
 8021d9c:	480e      	ldr	r0, [pc, #56]	; (8021dd8 <_ZN10LineSensor4InitEv+0x6c>)
 8021d9e:	f007 fbe1 	bl	8029564 <HAL_TIM_PWM_Start>
 8021da2:	4603      	mov	r3, r0
 8021da4:	2b00      	cmp	r3, #0
 8021da6:	bf14      	ite	ne
 8021da8:	2301      	movne	r3, #1
 8021daa:	2300      	moveq	r3, #0
 8021dac:	b2db      	uxtb	r3, r3
 8021dae:	2b00      	cmp	r3, #0
 8021db0:	d004      	beq.n	8021dbc <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 8021db2:	4b0a      	ldr	r3, [pc, #40]	; (8021ddc <_ZN10LineSensor4InitEv+0x70>)
 8021db4:	2201      	movs	r2, #1
 8021db6:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021db8:	f001 fef6 	bl	8023ba8 <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 8021dbc:	4b06      	ldr	r3, [pc, #24]	; (8021dd8 <_ZN10LineSensor4InitEv+0x6c>)
 8021dbe:	681b      	ldr	r3, [r3, #0]
 8021dc0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8021dc4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8021dc6:	bf00      	nop
 8021dc8:	3708      	adds	r7, #8
 8021dca:	46bd      	mov	sp, r7
 8021dcc:	bd80      	pop	{r7, pc}
 8021dce:	bf00      	nop
 8021dd0:	20014370 	.word	0x20014370
 8021dd4:	2000026f 	.word	0x2000026f
 8021dd8:	200143b8 	.word	0x200143b8
 8021ddc:	20000270 	.word	0x20000270

08021de0 <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 8021de0:	b480      	push	{r7}
 8021de2:	b085      	sub	sp, #20
 8021de4:	af00      	add	r7, sp, #0
 8021de6:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021de8:	2300      	movs	r3, #0
 8021dea:	60fb      	str	r3, [r7, #12]
 8021dec:	68fb      	ldr	r3, [r7, #12]
 8021dee:	2b0d      	cmp	r3, #13
 8021df0:	dc16      	bgt.n	8021e20 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 8021df2:	4b15      	ldr	r3, [pc, #84]	; (8021e48 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021df4:	781b      	ldrb	r3, [r3, #0]
 8021df6:	4619      	mov	r1, r3
 8021df8:	687b      	ldr	r3, [r7, #4]
 8021dfa:	68fa      	ldr	r2, [r7, #12]
 8021dfc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8021e00:	687a      	ldr	r2, [r7, #4]
 8021e02:	460b      	mov	r3, r1
 8021e04:	00db      	lsls	r3, r3, #3
 8021e06:	1a5b      	subs	r3, r3, r1
 8021e08:	005b      	lsls	r3, r3, #1
 8021e0a:	68f9      	ldr	r1, [r7, #12]
 8021e0c:	440b      	add	r3, r1
 8021e0e:	330c      	adds	r3, #12
 8021e10:	005b      	lsls	r3, r3, #1
 8021e12:	4413      	add	r3, r2
 8021e14:	4602      	mov	r2, r0
 8021e16:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021e18:	68fb      	ldr	r3, [r7, #12]
 8021e1a:	3301      	adds	r3, #1
 8021e1c:	60fb      	str	r3, [r7, #12]
 8021e1e:	e7e5      	b.n	8021dec <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    times++;
 8021e20:	4b09      	ldr	r3, [pc, #36]	; (8021e48 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021e22:	781b      	ldrb	r3, [r3, #0]
 8021e24:	3301      	adds	r3, #1
 8021e26:	b2da      	uxtb	r2, r3
 8021e28:	4b07      	ldr	r3, [pc, #28]	; (8021e48 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021e2a:	701a      	strb	r2, [r3, #0]
    if(times >= CONSECUTIVE_TIMES) times = 0;
 8021e2c:	4b06      	ldr	r3, [pc, #24]	; (8021e48 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021e2e:	781b      	ldrb	r3, [r3, #0]
 8021e30:	2b09      	cmp	r3, #9
 8021e32:	d902      	bls.n	8021e3a <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5a>
 8021e34:	4b04      	ldr	r3, [pc, #16]	; (8021e48 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021e36:	2200      	movs	r2, #0
 8021e38:	701a      	strb	r2, [r3, #0]
}
 8021e3a:	bf00      	nop
 8021e3c:	3714      	adds	r7, #20
 8021e3e:	46bd      	mov	sp, r7
 8021e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e44:	4770      	bx	lr
 8021e46:	bf00      	nop
 8021e48:	20000200 	.word	0x20000200

08021e4c <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 8021e4c:	b5b0      	push	{r4, r5, r7, lr}
 8021e4e:	b088      	sub	sp, #32
 8021e50:	af00      	add	r7, sp, #0
 8021e52:	60f8      	str	r0, [r7, #12]
 8021e54:	60b9      	str	r1, [r7, #8]
 8021e56:	4611      	mov	r1, r2
 8021e58:	461a      	mov	r2, r3
 8021e5a:	460b      	mov	r3, r1
 8021e5c:	71fb      	strb	r3, [r7, #7]
 8021e5e:	4613      	mov	r3, r2
 8021e60:	71bb      	strb	r3, [r7, #6]

    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else                                     array[i] = temp_array[right--];
    }
 8021e62:	466b      	mov	r3, sp
 8021e64:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 8021e66:	79fa      	ldrb	r2, [r7, #7]
 8021e68:	79bb      	ldrb	r3, [r7, #6]
 8021e6a:	429a      	cmp	r2, r3
 8021e6c:	f080 80ba 	bcs.w	8021fe4 <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 8021e70:	79b8      	ldrb	r0, [r7, #6]
 8021e72:	61b8      	str	r0, [r7, #24]
 8021e74:	4603      	mov	r3, r0
 8021e76:	3301      	adds	r3, #1
 8021e78:	4619      	mov	r1, r3
 8021e7a:	f04f 0200 	mov.w	r2, #0
 8021e7e:	f04f 0300 	mov.w	r3, #0
 8021e82:	f04f 0400 	mov.w	r4, #0
 8021e86:	0114      	lsls	r4, r2, #4
 8021e88:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021e8c:	010b      	lsls	r3, r1, #4
 8021e8e:	4603      	mov	r3, r0
 8021e90:	3301      	adds	r3, #1
 8021e92:	4619      	mov	r1, r3
 8021e94:	f04f 0200 	mov.w	r2, #0
 8021e98:	f04f 0300 	mov.w	r3, #0
 8021e9c:	f04f 0400 	mov.w	r4, #0
 8021ea0:	0114      	lsls	r4, r2, #4
 8021ea2:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021ea6:	010b      	lsls	r3, r1, #4
 8021ea8:	4603      	mov	r3, r0
 8021eaa:	3301      	adds	r3, #1
 8021eac:	005b      	lsls	r3, r3, #1
 8021eae:	3301      	adds	r3, #1
 8021eb0:	3307      	adds	r3, #7
 8021eb2:	08db      	lsrs	r3, r3, #3
 8021eb4:	00db      	lsls	r3, r3, #3
 8021eb6:	ebad 0d03 	sub.w	sp, sp, r3
 8021eba:	466b      	mov	r3, sp
 8021ebc:	3301      	adds	r3, #1
 8021ebe:	085b      	lsrs	r3, r3, #1
 8021ec0:	005b      	lsls	r3, r3, #1
 8021ec2:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 8021ec4:	79fa      	ldrb	r2, [r7, #7]
 8021ec6:	79bb      	ldrb	r3, [r7, #6]
 8021ec8:	4413      	add	r3, r2
 8021eca:	0fda      	lsrs	r2, r3, #31
 8021ecc:	4413      	add	r3, r2
 8021ece:	105b      	asrs	r3, r3, #1
 8021ed0:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 8021ed2:	7cfb      	ldrb	r3, [r7, #19]
 8021ed4:	79fa      	ldrb	r2, [r7, #7]
 8021ed6:	68b9      	ldr	r1, [r7, #8]
 8021ed8:	68f8      	ldr	r0, [r7, #12]
 8021eda:	f7ff ffb7 	bl	8021e4c <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 8021ede:	7cfb      	ldrb	r3, [r7, #19]
 8021ee0:	3301      	adds	r3, #1
 8021ee2:	b2da      	uxtb	r2, r3
 8021ee4:	79bb      	ldrb	r3, [r7, #6]
 8021ee6:	68b9      	ldr	r1, [r7, #8]
 8021ee8:	68f8      	ldr	r0, [r7, #12]
 8021eea:	f7ff ffaf 	bl	8021e4c <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--)
 8021eee:	7cfb      	ldrb	r3, [r7, #19]
 8021ef0:	77bb      	strb	r3, [r7, #30]
 8021ef2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021ef6:	79fb      	ldrb	r3, [r7, #7]
 8021ef8:	429a      	cmp	r2, r3
 8021efa:	db11      	blt.n	8021f20 <_ZN10LineSensor9MergeSortEPthh+0xd4>
        temp_array[i] = array[i];
 8021efc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021f00:	005b      	lsls	r3, r3, #1
 8021f02:	68ba      	ldr	r2, [r7, #8]
 8021f04:	4413      	add	r3, r2
 8021f06:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021f0a:	8819      	ldrh	r1, [r3, #0]
 8021f0c:	697b      	ldr	r3, [r7, #20]
 8021f0e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle; i >= first_index; i--)
 8021f12:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021f16:	b2db      	uxtb	r3, r3
 8021f18:	3b01      	subs	r3, #1
 8021f1a:	b2db      	uxtb	r3, r3
 8021f1c:	77bb      	strb	r3, [r7, #30]
 8021f1e:	e7e8      	b.n	8021ef2 <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 8021f20:	7cfb      	ldrb	r3, [r7, #19]
 8021f22:	3301      	adds	r3, #1
 8021f24:	b2db      	uxtb	r3, r3
 8021f26:	77bb      	strb	r3, [r7, #30]
 8021f28:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021f2c:	79bb      	ldrb	r3, [r7, #6]
 8021f2e:	429a      	cmp	r2, r3
 8021f30:	dc17      	bgt.n	8021f62 <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 8021f32:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021f36:	005b      	lsls	r3, r3, #1
 8021f38:	68ba      	ldr	r2, [r7, #8]
 8021f3a:	4413      	add	r3, r2
 8021f3c:	79b9      	ldrb	r1, [r7, #6]
 8021f3e:	f997 001e 	ldrsb.w	r0, [r7, #30]
 8021f42:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8021f46:	3201      	adds	r2, #1
 8021f48:	1a82      	subs	r2, r0, r2
 8021f4a:	1a8a      	subs	r2, r1, r2
 8021f4c:	8819      	ldrh	r1, [r3, #0]
 8021f4e:	697b      	ldr	r3, [r7, #20]
 8021f50:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 8021f54:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021f58:	b2db      	uxtb	r3, r3
 8021f5a:	3301      	adds	r3, #1
 8021f5c:	b2db      	uxtb	r3, r3
 8021f5e:	77bb      	strb	r3, [r7, #30]
 8021f60:	e7e2      	b.n	8021f28 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 8021f62:	79fb      	ldrb	r3, [r7, #7]
 8021f64:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 8021f66:	79bb      	ldrb	r3, [r7, #6]
 8021f68:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 8021f6a:	79fb      	ldrb	r3, [r7, #7]
 8021f6c:	77bb      	strb	r3, [r7, #30]
 8021f6e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021f72:	79bb      	ldrb	r3, [r7, #6]
 8021f74:	429a      	cmp	r2, r3
 8021f76:	dc33      	bgt.n	8021fe0 <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 8021f78:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021f7c:	697b      	ldr	r3, [r7, #20]
 8021f7e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021f82:	f997 101d 	ldrsb.w	r1, [r7, #29]
 8021f86:	697b      	ldr	r3, [r7, #20]
 8021f88:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8021f8c:	429a      	cmp	r2, r3
 8021f8e:	d210      	bcs.n	8021fb2 <_ZN10LineSensor9MergeSortEPthh+0x166>
 8021f90:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021f94:	b2d3      	uxtb	r3, r2
 8021f96:	3301      	adds	r3, #1
 8021f98:	b2db      	uxtb	r3, r3
 8021f9a:	77fb      	strb	r3, [r7, #31]
 8021f9c:	4611      	mov	r1, r2
 8021f9e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021fa2:	005b      	lsls	r3, r3, #1
 8021fa4:	68ba      	ldr	r2, [r7, #8]
 8021fa6:	4413      	add	r3, r2
 8021fa8:	697a      	ldr	r2, [r7, #20]
 8021faa:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021fae:	801a      	strh	r2, [r3, #0]
 8021fb0:	e00f      	b.n	8021fd2 <_ZN10LineSensor9MergeSortEPthh+0x186>
        else                                     array[i] = temp_array[right--];
 8021fb2:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8021fb6:	b2d3      	uxtb	r3, r2
 8021fb8:	3b01      	subs	r3, #1
 8021fba:	b2db      	uxtb	r3, r3
 8021fbc:	777b      	strb	r3, [r7, #29]
 8021fbe:	4611      	mov	r1, r2
 8021fc0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021fc4:	005b      	lsls	r3, r3, #1
 8021fc6:	68ba      	ldr	r2, [r7, #8]
 8021fc8:	4413      	add	r3, r2
 8021fca:	697a      	ldr	r2, [r7, #20]
 8021fcc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021fd0:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 8021fd2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021fd6:	b2db      	uxtb	r3, r3
 8021fd8:	3301      	adds	r3, #1
 8021fda:	b2db      	uxtb	r3, r3
 8021fdc:	77bb      	strb	r3, [r7, #30]
 8021fde:	e7c6      	b.n	8021f6e <_ZN10LineSensor9MergeSortEPthh+0x122>
 8021fe0:	46ad      	mov	sp, r5
 8021fe2:	e001      	b.n	8021fe8 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 8021fe4:	bf00      	nop
 8021fe6:	46ad      	mov	sp, r5
}
 8021fe8:	3720      	adds	r7, #32
 8021fea:	46bd      	mov	sp, r7
 8021fec:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021ff0 <_ZN10LineSensor6UpdateEv>:

void LineSensor::Update()
{
 8021ff0:	b590      	push	{r4, r7, lr}
 8021ff2:	b08b      	sub	sp, #44	; 0x2c
 8021ff4:	af00      	add	r7, sp, #0
 8021ff6:	6078      	str	r0, [r7, #4]
    uint8_t i, j;
    uint16_t temp_array[CONSECUTIVE_TIMES];
    uint16_t median, max, min, normalized;
    bool emergency = true;
 8021ff8:	2301      	movs	r3, #1
 8021ffa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021ffe:	2300      	movs	r3, #0
 8022000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022008:	2b0d      	cmp	r3, #13
 802200a:	f200 80c8 	bhi.w	802219e <_ZN10LineSensor6UpdateEv+0x1ae>
    {
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 802200e:	2300      	movs	r3, #0
 8022010:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8022014:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022018:	2b09      	cmp	r3, #9
 802201a:	d81b      	bhi.n	8022054 <_ZN10LineSensor6UpdateEv+0x64>
        {
            temp_array[j] = consecutive_line_sensors_buff_[j][i];
 802201c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8022020:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8022024:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8022028:	6878      	ldr	r0, [r7, #4]
 802202a:	4613      	mov	r3, r2
 802202c:	00db      	lsls	r3, r3, #3
 802202e:	1a9b      	subs	r3, r3, r2
 8022030:	005b      	lsls	r3, r3, #1
 8022032:	4423      	add	r3, r4
 8022034:	330c      	adds	r3, #12
 8022036:	005b      	lsls	r3, r3, #1
 8022038:	4403      	add	r3, r0
 802203a:	889a      	ldrh	r2, [r3, #4]
 802203c:	004b      	lsls	r3, r1, #1
 802203e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8022042:	440b      	add	r3, r1
 8022044:	f823 2c20 	strh.w	r2, [r3, #-32]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8022048:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802204c:	3301      	adds	r3, #1
 802204e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8022052:	e7df      	b.n	8022014 <_ZN10LineSensor6UpdateEv+0x24>
        }

        MergeSort(temp_array, 0, CONSECUTIVE_TIMES-1);
 8022054:	f107 0108 	add.w	r1, r7, #8
 8022058:	2309      	movs	r3, #9
 802205a:	2200      	movs	r2, #0
 802205c:	6878      	ldr	r0, [r7, #4]
 802205e:	f7ff fef5 	bl	8021e4c <_ZN10LineSensor9MergeSortEPthh>
        median = temp_array[HALF_CONSECUTIVE_TIMES];
 8022062:	8a7b      	ldrh	r3, [r7, #18]
 8022064:	83fb      	strh	r3, [r7, #30]

#ifdef DEBUG_MODE
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8022066:	2300      	movs	r3, #0
 8022068:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 802206c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022070:	2b09      	cmp	r3, #9
 8022072:	d81a      	bhi.n	80220aa <_ZN10LineSensor6UpdateEv+0xba>
        {
            g_consecutive_line_buff[i][j] = temp_array[j];
 8022074:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8022078:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802207c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8022080:	005b      	lsls	r3, r3, #1
 8022082:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8022086:	4403      	add	r3, r0
 8022088:	f833 4c20 	ldrh.w	r4, [r3, #-32]
 802208c:	4848      	ldr	r0, [pc, #288]	; (80221b0 <_ZN10LineSensor6UpdateEv+0x1c0>)
 802208e:	4613      	mov	r3, r2
 8022090:	009b      	lsls	r3, r3, #2
 8022092:	4413      	add	r3, r2
 8022094:	005b      	lsls	r3, r3, #1
 8022096:	440b      	add	r3, r1
 8022098:	4622      	mov	r2, r4
 802209a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 802209e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80220a2:	3301      	adds	r3, #1
 80220a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80220a8:	e7e0      	b.n	802206c <_ZN10LineSensor6UpdateEv+0x7c>
        }
#endif // DEBUG_MODE

        max = max_line_sensors_valu_[i];
 80220aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80220ae:	687a      	ldr	r2, [r7, #4]
 80220b0:	3398      	adds	r3, #152	; 0x98
 80220b2:	005b      	lsls	r3, r3, #1
 80220b4:	4413      	add	r3, r2
 80220b6:	889b      	ldrh	r3, [r3, #4]
 80220b8:	84bb      	strh	r3, [r7, #36]	; 0x24
        min = min_line_sensors_valu_[i];
 80220ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80220be:	687b      	ldr	r3, [r7, #4]
 80220c0:	32a8      	adds	r2, #168	; 0xa8
 80220c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80220c6:	847b      	strh	r3, [r7, #34]	; 0x22
        if(max < median || max == 0) max = median;
 80220c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80220ca:	8bfb      	ldrh	r3, [r7, #30]
 80220cc:	429a      	cmp	r2, r3
 80220ce:	d302      	bcc.n	80220d6 <_ZN10LineSensor6UpdateEv+0xe6>
 80220d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80220d2:	2b00      	cmp	r3, #0
 80220d4:	d101      	bne.n	80220da <_ZN10LineSensor6UpdateEv+0xea>
 80220d6:	8bfb      	ldrh	r3, [r7, #30]
 80220d8:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(min > median || min == 0) min = median;
 80220da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80220dc:	8bfb      	ldrh	r3, [r7, #30]
 80220de:	429a      	cmp	r2, r3
 80220e0:	d802      	bhi.n	80220e8 <_ZN10LineSensor6UpdateEv+0xf8>
 80220e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80220e4:	2b00      	cmp	r3, #0
 80220e6:	d101      	bne.n	80220ec <_ZN10LineSensor6UpdateEv+0xfc>
 80220e8:	8bfb      	ldrh	r3, [r7, #30]
 80220ea:	847b      	strh	r3, [r7, #34]	; 0x22
        max_line_sensors_valu_[i] = max;
 80220ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80220f0:	687a      	ldr	r2, [r7, #4]
 80220f2:	3398      	adds	r3, #152	; 0x98
 80220f4:	005b      	lsls	r3, r3, #1
 80220f6:	4413      	add	r3, r2
 80220f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80220fa:	809a      	strh	r2, [r3, #4]
        min_line_sensors_valu_[i] = min;
 80220fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8022100:	687b      	ldr	r3, [r7, #4]
 8022102:	32a8      	adds	r2, #168	; 0xa8
 8022104:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8022106:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

#ifdef DEBUG_MODE
        g_max_line_valu[i] = max_line_sensors_valu_[i];
 802210a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802210e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8022112:	6879      	ldr	r1, [r7, #4]
 8022114:	3398      	adds	r3, #152	; 0x98
 8022116:	005b      	lsls	r3, r3, #1
 8022118:	440b      	add	r3, r1
 802211a:	8899      	ldrh	r1, [r3, #4]
 802211c:	4b25      	ldr	r3, [pc, #148]	; (80221b4 <_ZN10LineSensor6UpdateEv+0x1c4>)
 802211e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_min_line_valu[i] = min_line_sensors_valu_[i];
 8022122:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8022126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802212a:	687a      	ldr	r2, [r7, #4]
 802212c:	31a8      	adds	r1, #168	; 0xa8
 802212e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8022132:	4a21      	ldr	r2, [pc, #132]	; (80221b8 <_ZN10LineSensor6UpdateEv+0x1c8>)
 8022134:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#endif // DEBUG_MODE

        if(max > min)
 8022138:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802213a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802213c:	429a      	cmp	r2, r3
 802213e:	d928      	bls.n	8022192 <_ZN10LineSensor6UpdateEv+0x1a2>
        {
            normalized = MAX_NORMALIZED_VALU * (median - min) / (max - min);
 8022140:	8bfa      	ldrh	r2, [r7, #30]
 8022142:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022144:	1ad3      	subs	r3, r2, r3
 8022146:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 802214a:	fb02 f203 	mul.w	r2, r2, r3
 802214e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8022150:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022152:	1acb      	subs	r3, r1, r3
 8022154:	fb92 f3f3 	sdiv	r3, r2, r3
 8022158:	83bb      	strh	r3, [r7, #28]
            line_sensors_valu_[i] = normalized;
 802215a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802215e:	687a      	ldr	r2, [r7, #4]
 8022160:	33b4      	adds	r3, #180	; 0xb4
 8022162:	005b      	lsls	r3, r3, #1
 8022164:	4413      	add	r3, r2
 8022166:	8bba      	ldrh	r2, [r7, #28]
 8022168:	809a      	strh	r2, [r3, #4]

#ifdef DEBUG_MODE
            g_line_valu[i] = line_sensors_valu_[i];
 802216a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802216e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8022172:	6879      	ldr	r1, [r7, #4]
 8022174:	33b4      	adds	r3, #180	; 0xb4
 8022176:	005b      	lsls	r3, r3, #1
 8022178:	440b      	add	r3, r1
 802217a:	8899      	ldrh	r1, [r3, #4]
 802217c:	4b0f      	ldr	r3, [pc, #60]	; (80221bc <_ZN10LineSensor6UpdateEv+0x1cc>)
 802217e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
#endif // DEBUG_MODE

            if(normalized < EMERGENCY_STOP_BORDER) emergency = false;
 8022182:	8bbb      	ldrh	r3, [r7, #28]
 8022184:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8022188:	4293      	cmp	r3, r2
 802218a:	d802      	bhi.n	8022192 <_ZN10LineSensor6UpdateEv+0x1a2>
 802218c:	2300      	movs	r3, #0
 802218e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8022192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022196:	3301      	adds	r3, #1
 8022198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802219c:	e732      	b.n	8022004 <_ZN10LineSensor6UpdateEv+0x14>
        }
    }
    emergency_stop_flag_ = emergency;
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80221a4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
}
 80221a8:	bf00      	nop
 80221aa:	372c      	adds	r7, #44	; 0x2c
 80221ac:	46bd      	mov	sp, r7
 80221ae:	bd90      	pop	{r4, r7, pc}
 80221b0:	20000278 	.word	0x20000278
 80221b4:	20000390 	.word	0x20000390
 80221b8:	200003ac 	.word	0x200003ac
 80221bc:	200003c8 	.word	0x200003c8

080221c0 <_ZN10LineSensor19LeftRightDifferenceEv>:

float LineSensor::LeftRightDifference()
{
 80221c0:	b5b0      	push	{r4, r5, r7, lr}
 80221c2:	b086      	sub	sp, #24
 80221c4:	af00      	add	r7, sp, #0
 80221c6:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t left = 0, right = 0;
 80221c8:	2300      	movs	r3, #0
 80221ca:	613b      	str	r3, [r7, #16]
 80221cc:	2300      	movs	r3, #0
 80221ce:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 80221d0:	2300      	movs	r3, #0
 80221d2:	75fb      	strb	r3, [r7, #23]
 80221d4:	7dfb      	ldrb	r3, [r7, #23]
 80221d6:	2b06      	cmp	r3, #6
 80221d8:	d80d      	bhi.n	80221f6 <_ZN10LineSensor19LeftRightDifferenceEv+0x36>
    {
        left += line_sensors_valu_[i];
 80221da:	7dfb      	ldrb	r3, [r7, #23]
 80221dc:	687a      	ldr	r2, [r7, #4]
 80221de:	33b4      	adds	r3, #180	; 0xb4
 80221e0:	005b      	lsls	r3, r3, #1
 80221e2:	4413      	add	r3, r2
 80221e4:	889b      	ldrh	r3, [r3, #4]
 80221e6:	461a      	mov	r2, r3
 80221e8:	693b      	ldr	r3, [r7, #16]
 80221ea:	4413      	add	r3, r2
 80221ec:	613b      	str	r3, [r7, #16]
    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 80221ee:	7dfb      	ldrb	r3, [r7, #23]
 80221f0:	3301      	adds	r3, #1
 80221f2:	75fb      	strb	r3, [r7, #23]
 80221f4:	e7ee      	b.n	80221d4 <_ZN10LineSensor19LeftRightDifferenceEv+0x14>
    }
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 80221f6:	2307      	movs	r3, #7
 80221f8:	75fb      	strb	r3, [r7, #23]
 80221fa:	7dfb      	ldrb	r3, [r7, #23]
 80221fc:	2b0d      	cmp	r3, #13
 80221fe:	d80d      	bhi.n	802221c <_ZN10LineSensor19LeftRightDifferenceEv+0x5c>
    {
        right += line_sensors_valu_[i];
 8022200:	7dfb      	ldrb	r3, [r7, #23]
 8022202:	687a      	ldr	r2, [r7, #4]
 8022204:	33b4      	adds	r3, #180	; 0xb4
 8022206:	005b      	lsls	r3, r3, #1
 8022208:	4413      	add	r3, r2
 802220a:	889b      	ldrh	r3, [r3, #4]
 802220c:	461a      	mov	r2, r3
 802220e:	68fb      	ldr	r3, [r7, #12]
 8022210:	4413      	add	r3, r2
 8022212:	60fb      	str	r3, [r7, #12]
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8022214:	7dfb      	ldrb	r3, [r7, #23]
 8022216:	3301      	adds	r3, #1
 8022218:	75fb      	strb	r3, [r7, #23]
 802221a:	e7ee      	b.n	80221fa <_ZN10LineSensor19LeftRightDifferenceEv+0x3a>
    }

#ifdef DEBUG_MODE
    g_line_left = left;
 802221c:	4a11      	ldr	r2, [pc, #68]	; (8022264 <_ZN10LineSensor19LeftRightDifferenceEv+0xa4>)
 802221e:	693b      	ldr	r3, [r7, #16]
 8022220:	6013      	str	r3, [r2, #0]
    g_line_right = right;
 8022222:	4a11      	ldr	r2, [pc, #68]	; (8022268 <_ZN10LineSensor19LeftRightDifferenceEv+0xa8>)
 8022224:	68fb      	ldr	r3, [r7, #12]
 8022226:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float difference = right * LINE_SENSOR_CORRECTION - left;
 8022228:	68f8      	ldr	r0, [r7, #12]
 802222a:	f7fe f8a3 	bl	8020374 <__aeabi_ui2d>
 802222e:	4604      	mov	r4, r0
 8022230:	460d      	mov	r5, r1
 8022232:	6938      	ldr	r0, [r7, #16]
 8022234:	f7fe f89e 	bl	8020374 <__aeabi_ui2d>
 8022238:	4602      	mov	r2, r0
 802223a:	460b      	mov	r3, r1
 802223c:	4620      	mov	r0, r4
 802223e:	4629      	mov	r1, r5
 8022240:	f7fd ff5a 	bl	80200f8 <__aeabi_dsub>
 8022244:	4603      	mov	r3, r0
 8022246:	460c      	mov	r4, r1
 8022248:	4618      	mov	r0, r3
 802224a:	4621      	mov	r1, r4
 802224c:	f7fe fbe4 	bl	8020a18 <__aeabi_d2f>
 8022250:	4603      	mov	r3, r0
 8022252:	60bb      	str	r3, [r7, #8]

    return difference;
 8022254:	68bb      	ldr	r3, [r7, #8]
 8022256:	ee07 3a90 	vmov	s15, r3
}
 802225a:	eeb0 0a67 	vmov.f32	s0, s15
 802225e:	3718      	adds	r7, #24
 8022260:	46bd      	mov	sp, r7
 8022262:	bdb0      	pop	{r4, r5, r7, pc}
 8022264:	200003e4 	.word	0x200003e4
 8022268:	200003e8 	.word	0x200003e8

0802226c <_ZN10LineSensor20GetEmergencyStopFlagEv>:

bool LineSensor::GetEmergencyStopFlag()
{
 802226c:	b480      	push	{r7}
 802226e:	b083      	sub	sp, #12
 8022270:	af00      	add	r7, sp, #0
 8022272:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8022274:	687b      	ldr	r3, [r7, #4]
 8022276:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
}
 802227a:	4618      	mov	r0, r3
 802227c:	370c      	adds	r7, #12
 802227e:	46bd      	mov	sp, r7
 8022280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022284:	4770      	bx	lr
	...

08022288 <_ZN10LineSensor16CheckCalibrationEv>:

bool LineSensor::CheckCalibration()
{
 8022288:	b480      	push	{r7}
 802228a:	b085      	sub	sp, #20
 802228c:	af00      	add	r7, sp, #0
 802228e:	6078      	str	r0, [r7, #4]
    static uint16_t timer = 0;
    static uint16_t pre_max[NUM_OF_LINE_SENSORS] = {0};
    static uint16_t pre_min[NUM_OF_LINE_SENSORS] = {0};
    uint16_t max, min;
    bool result = true;
 8022290:	2301      	movs	r3, #1
 8022292:	73fb      	strb	r3, [r7, #15]

    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8022294:	2300      	movs	r3, #0
 8022296:	73bb      	strb	r3, [r7, #14]
 8022298:	7bbb      	ldrb	r3, [r7, #14]
 802229a:	2b0d      	cmp	r3, #13
 802229c:	d82d      	bhi.n	80222fa <_ZN10LineSensor16CheckCalibrationEv+0x72>
    {
        max = max_line_sensors_valu_[i];
 802229e:	7bbb      	ldrb	r3, [r7, #14]
 80222a0:	687a      	ldr	r2, [r7, #4]
 80222a2:	3398      	adds	r3, #152	; 0x98
 80222a4:	005b      	lsls	r3, r3, #1
 80222a6:	4413      	add	r3, r2
 80222a8:	889b      	ldrh	r3, [r3, #4]
 80222aa:	81bb      	strh	r3, [r7, #12]
        min = min_line_sensors_valu_[i];
 80222ac:	7bba      	ldrb	r2, [r7, #14]
 80222ae:	687b      	ldr	r3, [r7, #4]
 80222b0:	32a8      	adds	r2, #168	; 0xa8
 80222b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80222b6:	817b      	strh	r3, [r7, #10]

        if(pre_max[i] != max)      result = false;
 80222b8:	7bbb      	ldrb	r3, [r7, #14]
 80222ba:	4a1e      	ldr	r2, [pc, #120]	; (8022334 <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 80222bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80222c0:	89ba      	ldrh	r2, [r7, #12]
 80222c2:	429a      	cmp	r2, r3
 80222c4:	d002      	beq.n	80222cc <_ZN10LineSensor16CheckCalibrationEv+0x44>
 80222c6:	2300      	movs	r3, #0
 80222c8:	73fb      	strb	r3, [r7, #15]
 80222ca:	e008      	b.n	80222de <_ZN10LineSensor16CheckCalibrationEv+0x56>
        else if(pre_min[i] != min) result = false;
 80222cc:	7bbb      	ldrb	r3, [r7, #14]
 80222ce:	4a1a      	ldr	r2, [pc, #104]	; (8022338 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 80222d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80222d4:	897a      	ldrh	r2, [r7, #10]
 80222d6:	429a      	cmp	r2, r3
 80222d8:	d001      	beq.n	80222de <_ZN10LineSensor16CheckCalibrationEv+0x56>
 80222da:	2300      	movs	r3, #0
 80222dc:	73fb      	strb	r3, [r7, #15]

        pre_max[i] = max;
 80222de:	7bbb      	ldrb	r3, [r7, #14]
 80222e0:	4914      	ldr	r1, [pc, #80]	; (8022334 <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 80222e2:	89ba      	ldrh	r2, [r7, #12]
 80222e4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        pre_min[i] = min;
 80222e8:	7bbb      	ldrb	r3, [r7, #14]
 80222ea:	4913      	ldr	r1, [pc, #76]	; (8022338 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 80222ec:	897a      	ldrh	r2, [r7, #10]
 80222ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80222f2:	7bbb      	ldrb	r3, [r7, #14]
 80222f4:	3301      	adds	r3, #1
 80222f6:	73bb      	strb	r3, [r7, #14]
 80222f8:	e7ce      	b.n	8022298 <_ZN10LineSensor16CheckCalibrationEv+0x10>
    }

    if(result)
 80222fa:	7bfb      	ldrb	r3, [r7, #15]
 80222fc:	2b00      	cmp	r3, #0
 80222fe:	d00e      	beq.n	802231e <_ZN10LineSensor16CheckCalibrationEv+0x96>
    {
        if(timer < CALIBRATION_SUCCESS_TIME)
 8022300:	4b0e      	ldr	r3, [pc, #56]	; (802233c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8022302:	881b      	ldrh	r3, [r3, #0]
 8022304:	f240 52db 	movw	r2, #1499	; 0x5db
 8022308:	4293      	cmp	r3, r2
 802230a:	d80b      	bhi.n	8022324 <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        {
            timer++;
 802230c:	4b0b      	ldr	r3, [pc, #44]	; (802233c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802230e:	881b      	ldrh	r3, [r3, #0]
 8022310:	3301      	adds	r3, #1
 8022312:	b29a      	uxth	r2, r3
 8022314:	4b09      	ldr	r3, [pc, #36]	; (802233c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8022316:	801a      	strh	r2, [r3, #0]
            result = false;
 8022318:	2300      	movs	r3, #0
 802231a:	73fb      	strb	r3, [r7, #15]
 802231c:	e002      	b.n	8022324 <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        }
    }
    else timer = 0;
 802231e:	4b07      	ldr	r3, [pc, #28]	; (802233c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8022320:	2200      	movs	r2, #0
 8022322:	801a      	strh	r2, [r3, #0]
    
    return result;
 8022324:	7bfb      	ldrb	r3, [r7, #15]
}
 8022326:	4618      	mov	r0, r3
 8022328:	3714      	adds	r7, #20
 802232a:	46bd      	mov	sp, r7
 802232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022330:	4770      	bx	lr
 8022332:	bf00      	nop
 8022334:	20000204 	.word	0x20000204
 8022338:	20000220 	.word	0x20000220
 802233c:	20000202 	.word	0x20000202

08022340 <_ZN9LineTraceC1EP10LineSensor>:
#include "line_trace.hpp"

LineTrace::LineTrace(LineSensor *line_sensor) : integral_error_(0)
 8022340:	b480      	push	{r7}
 8022342:	b083      	sub	sp, #12
 8022344:	af00      	add	r7, sp, #0
 8022346:	6078      	str	r0, [r7, #4]
 8022348:	6039      	str	r1, [r7, #0]
 802234a:	687b      	ldr	r3, [r7, #4]
 802234c:	f04f 0200 	mov.w	r2, #0
 8022350:	601a      	str	r2, [r3, #0]
{
    line_sensor_ = line_sensor;
 8022352:	687b      	ldr	r3, [r7, #4]
 8022354:	683a      	ldr	r2, [r7, #0]
 8022356:	605a      	str	r2, [r3, #4]
}
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	4618      	mov	r0, r3
 802235c:	370c      	adds	r7, #12
 802235e:	46bd      	mov	sp, r7
 8022360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022364:	4770      	bx	lr
	...

08022368 <_ZN9LineTrace13LineTraceOnlyEv>:

float LineTrace::LineTraceOnly()
{
 8022368:	b580      	push	{r7, lr}
 802236a:	b086      	sub	sp, #24
 802236c:	af00      	add	r7, sp, #0
 802236e:	6078      	str	r0, [r7, #4]
    float p_gain = LINE_ONLY_P_GAIN;
 8022370:	4b0b      	ldr	r3, [pc, #44]	; (80223a0 <_ZN9LineTrace13LineTraceOnlyEv+0x38>)
 8022372:	617b      	str	r3, [r7, #20]
    float i_gain = LINE_ONLY_I_GAIN;
 8022374:	f04f 0300 	mov.w	r3, #0
 8022378:	613b      	str	r3, [r7, #16]
    float d_gain = LINE_ONLY_D_GAIN;
 802237a:	f04f 0300 	mov.w	r3, #0
 802237e:	60fb      	str	r3, [r7, #12]

    return PidControl(p_gain, i_gain, d_gain);
 8022380:	ed97 1a03 	vldr	s2, [r7, #12]
 8022384:	edd7 0a04 	vldr	s1, [r7, #16]
 8022388:	ed97 0a05 	vldr	s0, [r7, #20]
 802238c:	6878      	ldr	r0, [r7, #4]
 802238e:	f000 f853 	bl	8022438 <_ZN9LineTrace10PidControlEfff>
 8022392:	eef0 7a40 	vmov.f32	s15, s0
}
 8022396:	eeb0 0a67 	vmov.f32	s0, s15
 802239a:	3718      	adds	r7, #24
 802239c:	46bd      	mov	sp, r7
 802239e:	bd80      	pop	{r7, pc}
 80223a0:	38d1b717 	.word	0x38d1b717

080223a4 <_ZN9LineTrace16DeterminePidGainEf>:

float LineTrace::DeterminePidGain(float target_velocity)
{
 80223a4:	b580      	push	{r7, lr}
 80223a6:	b086      	sub	sp, #24
 80223a8:	af00      	add	r7, sp, #0
 80223aa:	6078      	str	r0, [r7, #4]
 80223ac:	ed87 0a00 	vstr	s0, [r7]
    float p_gain, i_gain, d_gain;

    if(target_velocity < TARGET_VELOCITY_0)
 80223b0:	edd7 7a00 	vldr	s15, [r7]
 80223b4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80223b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80223bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223c0:	d507      	bpl.n	80223d2 <_ZN9LineTrace16DeterminePidGainEf+0x2e>
    {
        p_gain = LINE_P_GAIN_0;
 80223c2:	4b1a      	ldr	r3, [pc, #104]	; (802242c <_ZN9LineTrace16DeterminePidGainEf+0x88>)
 80223c4:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_0;
 80223c6:	f04f 0300 	mov.w	r3, #0
 80223ca:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_0;
 80223cc:	4b18      	ldr	r3, [pc, #96]	; (8022430 <_ZN9LineTrace16DeterminePidGainEf+0x8c>)
 80223ce:	60fb      	str	r3, [r7, #12]
 80223d0:	e01b      	b.n	802240a <_ZN9LineTrace16DeterminePidGainEf+0x66>
    }
    else if(target_velocity < TARGET_VELOCITY_1)
 80223d2:	edd7 7a00 	vldr	s15, [r7]
 80223d6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80223da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80223de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223e2:	d509      	bpl.n	80223f8 <_ZN9LineTrace16DeterminePidGainEf+0x54>
    {
        p_gain = LINE_P_GAIN_1;
 80223e4:	f04f 0300 	mov.w	r3, #0
 80223e8:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_1;
 80223ea:	f04f 0300 	mov.w	r3, #0
 80223ee:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_1;
 80223f0:	f04f 0300 	mov.w	r3, #0
 80223f4:	60fb      	str	r3, [r7, #12]
 80223f6:	e008      	b.n	802240a <_ZN9LineTrace16DeterminePidGainEf+0x66>
    }
    else // Error handler
    {
        p_gain = 0;
 80223f8:	f04f 0300 	mov.w	r3, #0
 80223fc:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 80223fe:	f04f 0300 	mov.w	r3, #0
 8022402:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 8022404:	f04f 0300 	mov.w	r3, #0
 8022408:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(p_gain, i_gain, d_gain);
 802240a:	ed97 1a03 	vldr	s2, [r7, #12]
 802240e:	edd7 0a04 	vldr	s1, [r7, #16]
 8022412:	ed97 0a05 	vldr	s0, [r7, #20]
 8022416:	6878      	ldr	r0, [r7, #4]
 8022418:	f000 f80e 	bl	8022438 <_ZN9LineTrace10PidControlEfff>
 802241c:	eef0 7a40 	vmov.f32	s15, s0
}
 8022420:	eeb0 0a67 	vmov.f32	s0, s15
 8022424:	3718      	adds	r7, #24
 8022426:	46bd      	mov	sp, r7
 8022428:	bd80      	pop	{r7, pc}
 802242a:	bf00      	nop
 802242c:	3916feb5 	.word	0x3916feb5
 8022430:	3693a3b6 	.word	0x3693a3b6
 8022434:	00000000 	.word	0x00000000

08022438 <_ZN9LineTrace10PidControlEfff>:

float LineTrace::PidControl(float p_gain, float i_gain, float d_gain)
{
 8022438:	b590      	push	{r4, r7, lr}
 802243a:	b08b      	sub	sp, #44	; 0x2c
 802243c:	af00      	add	r7, sp, #0
 802243e:	60f8      	str	r0, [r7, #12]
 8022440:	ed87 0a02 	vstr	s0, [r7, #8]
 8022444:	edc7 0a01 	vstr	s1, [r7, #4]
 8022448:	ed87 1a00 	vstr	s2, [r7]
    static float pre_error = line_sensor_->LeftRightDifference();
 802244c:	4b52      	ldr	r3, [pc, #328]	; (8022598 <_ZN9LineTrace10PidControlEfff+0x160>)
 802244e:	781b      	ldrb	r3, [r3, #0]
 8022450:	f3bf 8f5b 	dmb	ish
 8022454:	b2db      	uxtb	r3, r3
 8022456:	f003 0301 	and.w	r3, r3, #1
 802245a:	2b00      	cmp	r3, #0
 802245c:	bf0c      	ite	eq
 802245e:	2301      	moveq	r3, #1
 8022460:	2300      	movne	r3, #0
 8022462:	b2db      	uxtb	r3, r3
 8022464:	2b00      	cmp	r3, #0
 8022466:	d017      	beq.n	8022498 <_ZN9LineTrace10PidControlEfff+0x60>
 8022468:	484b      	ldr	r0, [pc, #300]	; (8022598 <_ZN9LineTrace10PidControlEfff+0x160>)
 802246a:	f008 f823 	bl	802a4b4 <__cxa_guard_acquire>
 802246e:	4603      	mov	r3, r0
 8022470:	2b00      	cmp	r3, #0
 8022472:	bf14      	ite	ne
 8022474:	2301      	movne	r3, #1
 8022476:	2300      	moveq	r3, #0
 8022478:	b2db      	uxtb	r3, r3
 802247a:	2b00      	cmp	r3, #0
 802247c:	d00c      	beq.n	8022498 <_ZN9LineTrace10PidControlEfff+0x60>
 802247e:	68fb      	ldr	r3, [r7, #12]
 8022480:	685b      	ldr	r3, [r3, #4]
 8022482:	4618      	mov	r0, r3
 8022484:	f7ff fe9c 	bl	80221c0 <_ZN10LineSensor19LeftRightDifferenceEv>
 8022488:	eef0 7a40 	vmov.f32	s15, s0
 802248c:	4b43      	ldr	r3, [pc, #268]	; (802259c <_ZN9LineTrace10PidControlEfff+0x164>)
 802248e:	edc3 7a00 	vstr	s15, [r3]
 8022492:	4841      	ldr	r0, [pc, #260]	; (8022598 <_ZN9LineTrace10PidControlEfff+0x160>)
 8022494:	f008 f81a 	bl	802a4cc <__cxa_guard_release>
    float error, differential_error, integral_error;
    float p, d, i;

    error = line_sensor_->LeftRightDifference();
 8022498:	68fb      	ldr	r3, [r7, #12]
 802249a:	685b      	ldr	r3, [r3, #4]
 802249c:	4618      	mov	r0, r3
 802249e:	f7ff fe8f 	bl	80221c0 <_ZN10LineSensor19LeftRightDifferenceEv>
 80224a2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    differential_error = (error - pre_error) / TIM6_PERIOD_S;
 80224a6:	4b3d      	ldr	r3, [pc, #244]	; (802259c <_ZN9LineTrace10PidControlEfff+0x164>)
 80224a8:	edd3 7a00 	vldr	s15, [r3]
 80224ac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80224b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80224b4:	ee17 0a90 	vmov	r0, s15
 80224b8:	f7fd ff7e 	bl	80203b8 <__aeabi_f2d>
 80224bc:	a334      	add	r3, pc, #208	; (adr r3, 8022590 <_ZN9LineTrace10PidControlEfff+0x158>)
 80224be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224c2:	f7fe f8fb 	bl	80206bc <__aeabi_ddiv>
 80224c6:	4603      	mov	r3, r0
 80224c8:	460c      	mov	r4, r1
 80224ca:	4618      	mov	r0, r3
 80224cc:	4621      	mov	r1, r4
 80224ce:	f7fe faa3 	bl	8020a18 <__aeabi_d2f>
 80224d2:	4603      	mov	r3, r0
 80224d4:	623b      	str	r3, [r7, #32]
    integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 80224d6:	4b31      	ldr	r3, [pc, #196]	; (802259c <_ZN9LineTrace10PidControlEfff+0x164>)
 80224d8:	ed93 7a00 	vldr	s14, [r3]
 80224dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80224e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80224e4:	ee17 0a90 	vmov	r0, s15
 80224e8:	f7fd ff66 	bl	80203b8 <__aeabi_f2d>
 80224ec:	f04f 0200 	mov.w	r2, #0
 80224f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80224f4:	f7fe f8e2 	bl	80206bc <__aeabi_ddiv>
 80224f8:	4603      	mov	r3, r0
 80224fa:	460c      	mov	r4, r1
 80224fc:	4618      	mov	r0, r3
 80224fe:	4621      	mov	r1, r4
 8022500:	a323      	add	r3, pc, #140	; (adr r3, 8022590 <_ZN9LineTrace10PidControlEfff+0x158>)
 8022502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022506:	f7fd ffaf 	bl	8020468 <__aeabi_dmul>
 802250a:	4603      	mov	r3, r0
 802250c:	460c      	mov	r4, r1
 802250e:	4618      	mov	r0, r3
 8022510:	4621      	mov	r1, r4
 8022512:	f7fe fa81 	bl	8020a18 <__aeabi_d2f>
 8022516:	4603      	mov	r3, r0
 8022518:	61fb      	str	r3, [r7, #28]
    SetIntegralError(integral_error);
 802251a:	ed97 0a07 	vldr	s0, [r7, #28]
 802251e:	68f8      	ldr	r0, [r7, #12]
 8022520:	f000 f844 	bl	80225ac <_ZN9LineTrace16SetIntegralErrorEf>

    p = p_gain * error;
 8022524:	ed97 7a02 	vldr	s14, [r7, #8]
 8022528:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 802252c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022530:	edc7 7a06 	vstr	s15, [r7, #24]
    d = d_gain * differential_error;
 8022534:	ed97 7a00 	vldr	s14, [r7]
 8022538:	edd7 7a08 	vldr	s15, [r7, #32]
 802253c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022540:	edc7 7a05 	vstr	s15, [r7, #20]
    i = i_gain * integral_error_;
 8022544:	68fb      	ldr	r3, [r7, #12]
 8022546:	edd3 7a00 	vldr	s15, [r3]
 802254a:	ed97 7a01 	vldr	s14, [r7, #4]
 802254e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022552:	edc7 7a04 	vstr	s15, [r7, #16]

#ifdef DEBUG_MODE
    g_trace_p = p;
 8022556:	4a12      	ldr	r2, [pc, #72]	; (80225a0 <_ZN9LineTrace10PidControlEfff+0x168>)
 8022558:	69bb      	ldr	r3, [r7, #24]
 802255a:	6013      	str	r3, [r2, #0]
    g_trace_d = d;
 802255c:	4a11      	ldr	r2, [pc, #68]	; (80225a4 <_ZN9LineTrace10PidControlEfff+0x16c>)
 802255e:	697b      	ldr	r3, [r7, #20]
 8022560:	6013      	str	r3, [r2, #0]
    g_trace_i = i;
 8022562:	4a11      	ldr	r2, [pc, #68]	; (80225a8 <_ZN9LineTrace10PidControlEfff+0x170>)
 8022564:	693b      	ldr	r3, [r7, #16]
 8022566:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    pre_error = error;
 8022568:	4a0c      	ldr	r2, [pc, #48]	; (802259c <_ZN9LineTrace10PidControlEfff+0x164>)
 802256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802256c:	6013      	str	r3, [r2, #0]

    return p + d + i;
 802256e:	ed97 7a06 	vldr	s14, [r7, #24]
 8022572:	edd7 7a05 	vldr	s15, [r7, #20]
 8022576:	ee37 7a27 	vadd.f32	s14, s14, s15
 802257a:	edd7 7a04 	vldr	s15, [r7, #16]
 802257e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8022582:	eeb0 0a67 	vmov.f32	s0, s15
 8022586:	372c      	adds	r7, #44	; 0x2c
 8022588:	46bd      	mov	sp, r7
 802258a:	bd90      	pop	{r4, r7, pc}
 802258c:	f3af 8000 	nop.w
 8022590:	47ae147b 	.word	0x47ae147b
 8022594:	3f547ae1 	.word	0x3f547ae1
 8022598:	20000240 	.word	0x20000240
 802259c:	2000023c 	.word	0x2000023c
 80225a0:	20000440 	.word	0x20000440
 80225a4:	20000448 	.word	0x20000448
 80225a8:	20000444 	.word	0x20000444

080225ac <_ZN9LineTrace16SetIntegralErrorEf>:

void LineTrace::SetIntegralError(float integral_error)
{
 80225ac:	b480      	push	{r7}
 80225ae:	b083      	sub	sp, #12
 80225b0:	af00      	add	r7, sp, #0
 80225b2:	6078      	str	r0, [r7, #4]
 80225b4:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	ed93 7a00 	vldr	s14, [r3]
 80225be:	edd7 7a00 	vldr	s15, [r7]
 80225c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80225c6:	687b      	ldr	r3, [r7, #4]
 80225c8:	edc3 7a00 	vstr	s15, [r3]
}
 80225cc:	bf00      	nop
 80225ce:	370c      	adds	r7, #12
 80225d0:	46bd      	mov	sp, r7
 80225d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225d6:	4770      	bx	lr

080225d8 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 80225d8:	b480      	push	{r7}
 80225da:	b083      	sub	sp, #12
 80225dc:	af00      	add	r7, sp, #0
 80225de:	ed87 0a01 	vstr	s0, [r7, #4]
 80225e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80225e6:	eef0 7ae7 	vabs.f32	s15, s15
 80225ea:	eeb0 0a67 	vmov.f32	s0, s15
 80225ee:	370c      	adds	r7, #12
 80225f0:	46bd      	mov	sp, r7
 80225f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225f6:	4770      	bx	lr

080225f8 <_ZN6LoggerC1EP7EncoderP5FlashP3LedP3ImuP10SideSensor>:
#include "logger.hpp"
#include "declare_extern.h"
#include <math.h>

Logger::Logger(Encoder *encoder,
 80225f8:	b480      	push	{r7}
 80225fa:	b085      	sub	sp, #20
 80225fc:	af00      	add	r7, sp, #0
 80225fe:	60f8      	str	r0, [r7, #12]
 8022600:	60b9      	str	r1, [r7, #8]
 8022602:	607a      	str	r2, [r7, #4]
 8022604:	603b      	str	r3, [r7, #0]
                   , success_emergency_code_store_(false)
                   , logging_radian_buff_(0)
                   , loading_now_address_(0)
                   , uncorrected_address_buff_(0)
                   , logging_now_address_(0)
                   , target_velocity_(MIN_VELOCITY)
 8022606:	68fb      	ldr	r3, [r7, #12]
 8022608:	2200      	movs	r2, #0
 802260a:	701a      	strb	r2, [r3, #0]
 802260c:	68fb      	ldr	r3, [r7, #12]
 802260e:	2200      	movs	r2, #0
 8022610:	705a      	strb	r2, [r3, #1]
 8022612:	68fb      	ldr	r3, [r7, #12]
 8022614:	f04f 0200 	mov.w	r2, #0
 8022618:	605a      	str	r2, [r3, #4]
 802261a:	68fb      	ldr	r3, [r7, #12]
 802261c:	2200      	movs	r2, #0
 802261e:	811a      	strh	r2, [r3, #8]
 8022620:	68fb      	ldr	r3, [r7, #12]
 8022622:	2200      	movs	r2, #0
 8022624:	815a      	strh	r2, [r3, #10]
 8022626:	68fb      	ldr	r3, [r7, #12]
 8022628:	2200      	movs	r2, #0
 802262a:	819a      	strh	r2, [r3, #12]
 802262c:	68fb      	ldr	r3, [r7, #12]
 802262e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8022632:	611a      	str	r2, [r3, #16]
{
    encoder_ = encoder;
 8022634:	68fb      	ldr	r3, [r7, #12]
 8022636:	68ba      	ldr	r2, [r7, #8]
 8022638:	615a      	str	r2, [r3, #20]
    flash_ = flash;
 802263a:	68fb      	ldr	r3, [r7, #12]
 802263c:	687a      	ldr	r2, [r7, #4]
 802263e:	619a      	str	r2, [r3, #24]
    led_ = led;
 8022640:	68fb      	ldr	r3, [r7, #12]
 8022642:	683a      	ldr	r2, [r7, #0]
 8022644:	61da      	str	r2, [r3, #28]
    imu_ = imu;
 8022646:	68fb      	ldr	r3, [r7, #12]
 8022648:	69ba      	ldr	r2, [r7, #24]
 802264a:	621a      	str	r2, [r3, #32]
    side_sensor_ = side_sensor;
 802264c:	68fb      	ldr	r3, [r7, #12]
 802264e:	69fa      	ldr	r2, [r7, #28]
 8022650:	625a      	str	r2, [r3, #36]	; 0x24
}
 8022652:	68fb      	ldr	r3, [r7, #12]
 8022654:	4618      	mov	r0, r3
 8022656:	3714      	adds	r7, #20
 8022658:	46bd      	mov	sp, r7
 802265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802265e:	4770      	bx	lr

08022660 <_ZN6Logger7LoggingEv>:

void Logger::Logging()
{
 8022660:	b580      	push	{r7, lr}
 8022662:	b084      	sub	sp, #16
 8022664:	af00      	add	r7, sp, #0
 8022666:	6078      	str	r0, [r7, #4]
    float distance = encoder_->GetDistanceStack();
 8022668:	687b      	ldr	r3, [r7, #4]
 802266a:	695b      	ldr	r3, [r3, #20]
 802266c:	4618      	mov	r0, r3
 802266e:	f7fe fc90 	bl	8020f92 <_ZN7Encoder16GetDistanceStackEv>
 8022672:	ed87 0a03 	vstr	s0, [r7, #12]
    if(distance < LOGGING_CONST_DISTANCE) return;
 8022676:	edd7 7a03 	vldr	s15, [r7, #12]
 802267a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 802267e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022686:	d43f      	bmi.n	8022708 <_ZN6Logger7LoggingEv+0xa8>
    encoder_->ResetDistanceStack();
 8022688:	687b      	ldr	r3, [r7, #4]
 802268a:	695b      	ldr	r3, [r3, #20]
 802268c:	4618      	mov	r0, r3
 802268e:	f7fe fc63 	bl	8020f58 <_ZN7Encoder18ResetDistanceStackEv>

    uint8_t result = StoreDistanceLog(distance);
 8022692:	ed97 0a03 	vldr	s0, [r7, #12]
 8022696:	6878      	ldr	r0, [r7, #4]
 8022698:	f000 f890 	bl	80227bc <_ZN6Logger16StoreDistanceLogEf>
 802269c:	4603      	mov	r3, r0
 802269e:	72fb      	strb	r3, [r7, #11]
#ifdef DEBUG_MODE
    g_store_distance = result;
 80226a0:	4a1b      	ldr	r2, [pc, #108]	; (8022710 <_ZN6Logger7LoggingEv+0xb0>)
 80226a2:	7afb      	ldrb	r3, [r7, #11]
 80226a4:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
    CheckLoggingSuccess(ERROR_CODE_STORE_DISTANCE, result);
 80226a6:	7afb      	ldrb	r3, [r7, #11]
 80226a8:	461a      	mov	r2, r3
 80226aa:	491a      	ldr	r1, [pc, #104]	; (8022714 <_ZN6Logger7LoggingEv+0xb4>)
 80226ac:	6878      	ldr	r0, [r7, #4]
 80226ae:	f000 fa9d 	bl	8022bec <_ZN6Logger19CheckLoggingSuccessEmh>

    result = StoreRadianLog();
 80226b2:	6878      	ldr	r0, [r7, #4]
 80226b4:	f000 f8c4 	bl	8022840 <_ZN6Logger14StoreRadianLogEv>
 80226b8:	4603      	mov	r3, r0
 80226ba:	72fb      	strb	r3, [r7, #11]
#ifdef DEBUG_MODE
    g_store_radian = result;
 80226bc:	4a16      	ldr	r2, [pc, #88]	; (8022718 <_ZN6Logger7LoggingEv+0xb8>)
 80226be:	7afb      	ldrb	r3, [r7, #11]
 80226c0:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
    CheckLoggingSuccess(ERROR_CODE_STORE_RADIAN, result);
 80226c2:	7afb      	ldrb	r3, [r7, #11]
 80226c4:	461a      	mov	r2, r3
 80226c6:	4915      	ldr	r1, [pc, #84]	; (802271c <_ZN6Logger7LoggingEv+0xbc>)
 80226c8:	6878      	ldr	r0, [r7, #4]
 80226ca:	f000 fa8f 	bl	8022bec <_ZN6Logger19CheckLoggingSuccessEmh>

    result = StoreVariousLog();
 80226ce:	6878      	ldr	r0, [r7, #4]
 80226d0:	f000 f954 	bl	802297c <_ZN6Logger15StoreVariousLogEv>
 80226d4:	4603      	mov	r3, r0
 80226d6:	72fb      	strb	r3, [r7, #11]
#ifdef DEBUG_MODE
    g_store_various = result;
 80226d8:	4a11      	ldr	r2, [pc, #68]	; (8022720 <_ZN6Logger7LoggingEv+0xc0>)
 80226da:	7afb      	ldrb	r3, [r7, #11]
 80226dc:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
    CheckLoggingSuccess(ERROR_CODE_STORE_VARIOUS, result);
 80226de:	7afb      	ldrb	r3, [r7, #11]
 80226e0:	461a      	mov	r2, r3
 80226e2:	4910      	ldr	r1, [pc, #64]	; (8022724 <_ZN6Logger7LoggingEv+0xc4>)
 80226e4:	6878      	ldr	r0, [r7, #4]
 80226e6:	f000 fa81 	bl	8022bec <_ZN6Logger19CheckLoggingSuccessEmh>

    DistanceCorrection(distance);
 80226ea:	ed97 0a03 	vldr	s0, [r7, #12]
 80226ee:	6878      	ldr	r0, [r7, #4]
 80226f0:	f000 fa02 	bl	8022af8 <_ZN6Logger18DistanceCorrectionEf>

    LoggingAccelPosition();
 80226f4:	6878      	ldr	r0, [r7, #4]
 80226f6:	f000 facf 	bl	8022c98 <_ZN6Logger20LoggingAccelPositionEv>

    logging_now_address_++;
 80226fa:	687b      	ldr	r3, [r7, #4]
 80226fc:	899b      	ldrh	r3, [r3, #12]
 80226fe:	3301      	adds	r3, #1
 8022700:	b29a      	uxth	r2, r3
 8022702:	687b      	ldr	r3, [r7, #4]
 8022704:	819a      	strh	r2, [r3, #12]
 8022706:	e000      	b.n	802270a <_ZN6Logger7LoggingEv+0xaa>
    if(distance < LOGGING_CONST_DISTANCE) return;
 8022708:	bf00      	nop
}
 802270a:	3710      	adds	r7, #16
 802270c:	46bd      	mov	sp, r7
 802270e:	bd80      	pop	{r7, pc}
 8022710:	20000269 	.word	0x20000269
 8022714:	08018000 	.word	0x08018000
 8022718:	2000026a 	.word	0x2000026a
 802271c:	08018100 	.word	0x08018100
 8022720:	2000026b 	.word	0x2000026b
 8022724:	08018200 	.word	0x08018200

08022728 <_ZN6Logger7RammingEv>:

#ifdef DEBUG_MODE
void Logger::Ramming()
{
 8022728:	b580      	push	{r7, lr}
 802272a:	b084      	sub	sp, #16
 802272c:	af00      	add	r7, sp, #0
 802272e:	6078      	str	r0, [r7, #4]
    float distance = encoder_->GetDistanceStack();
 8022730:	687b      	ldr	r3, [r7, #4]
 8022732:	695b      	ldr	r3, [r3, #20]
 8022734:	4618      	mov	r0, r3
 8022736:	f7fe fc2c 	bl	8020f92 <_ZN7Encoder16GetDistanceStackEv>
 802273a:	ed87 0a03 	vstr	s0, [r7, #12]
    if(distance < LOGGING_CONST_DISTANCE) return;
 802273e:	edd7 7a03 	vldr	s15, [r7, #12]
 8022742:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022746:	eef4 7ac7 	vcmpe.f32	s15, s14
 802274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802274e:	d42b      	bmi.n	80227a8 <_ZN6Logger7RammingEv+0x80>
    encoder_->ResetDistanceStack();
 8022750:	687b      	ldr	r3, [r7, #4]
 8022752:	695b      	ldr	r3, [r3, #20]
 8022754:	4618      	mov	r0, r3
 8022756:	f7fe fbff 	bl	8020f58 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t index = 0;
    
    g_ram_distance[index] = distance;
 802275a:	4b15      	ldr	r3, [pc, #84]	; (80227b0 <_ZN6Logger7RammingEv+0x88>)
 802275c:	881b      	ldrh	r3, [r3, #0]
 802275e:	4a15      	ldr	r2, [pc, #84]	; (80227b4 <_ZN6Logger7RammingEv+0x8c>)
 8022760:	009b      	lsls	r3, r3, #2
 8022762:	4413      	add	r3, r2
 8022764:	68fa      	ldr	r2, [r7, #12]
 8022766:	601a      	str	r2, [r3, #0]

    float radian = imu_->GetRadStackZ();
 8022768:	687b      	ldr	r3, [r7, #4]
 802276a:	6a1b      	ldr	r3, [r3, #32]
 802276c:	4618      	mov	r0, r3
 802276e:	f7ff f87b 	bl	8021868 <_ZN3Imu12GetRadStackZEv>
 8022772:	ed87 0a02 	vstr	s0, [r7, #8]
    imu_->ClearRadStackZ();
 8022776:	687b      	ldr	r3, [r7, #4]
 8022778:	6a1b      	ldr	r3, [r3, #32]
 802277a:	4618      	mov	r0, r3
 802277c:	f7ff f866 	bl	802184c <_ZN3Imu14ClearRadStackZEv>
    g_ram_radian[index] = radian;
 8022780:	4b0b      	ldr	r3, [pc, #44]	; (80227b0 <_ZN6Logger7RammingEv+0x88>)
 8022782:	881b      	ldrh	r3, [r3, #0]
 8022784:	4a0c      	ldr	r2, [pc, #48]	; (80227b8 <_ZN6Logger7RammingEv+0x90>)
 8022786:	009b      	lsls	r3, r3, #2
 8022788:	4413      	add	r3, r2
 802278a:	68ba      	ldr	r2, [r7, #8]
 802278c:	601a      	str	r2, [r3, #0]

    if(index < 3100) index++;
 802278e:	4b08      	ldr	r3, [pc, #32]	; (80227b0 <_ZN6Logger7RammingEv+0x88>)
 8022790:	881b      	ldrh	r3, [r3, #0]
 8022792:	f640 421b 	movw	r2, #3099	; 0xc1b
 8022796:	4293      	cmp	r3, r2
 8022798:	d807      	bhi.n	80227aa <_ZN6Logger7RammingEv+0x82>
 802279a:	4b05      	ldr	r3, [pc, #20]	; (80227b0 <_ZN6Logger7RammingEv+0x88>)
 802279c:	881b      	ldrh	r3, [r3, #0]
 802279e:	3301      	adds	r3, #1
 80227a0:	b29a      	uxth	r2, r3
 80227a2:	4b03      	ldr	r3, [pc, #12]	; (80227b0 <_ZN6Logger7RammingEv+0x88>)
 80227a4:	801a      	strh	r2, [r3, #0]
 80227a6:	e000      	b.n	80227aa <_ZN6Logger7RammingEv+0x82>
    if(distance < LOGGING_CONST_DISTANCE) return;
 80227a8:	bf00      	nop
}
 80227aa:	3710      	adds	r7, #16
 80227ac:	46bd      	mov	sp, r7
 80227ae:	bd80      	pop	{r7, pc}
 80227b0:	20000244 	.word	0x20000244
 80227b4:	20014498 	.word	0x20014498
 80227b8:	20011228 	.word	0x20011228

080227bc <_ZN6Logger16StoreDistanceLogEf>:
    if(now_address == logging_now_address_) return true;
    else return false;
}

uint8_t Logger::StoreDistanceLog(float distance)
{
 80227bc:	b580      	push	{r7, lr}
 80227be:	b086      	sub	sp, #24
 80227c0:	af00      	add	r7, sp, #0
 80227c2:	6078      	str	r0, [r7, #4]
 80227c4:	ed87 0a00 	vstr	s0, [r7]
    uint32_t address = logging_now_address_ * 4 + HEAD_ADDRESS_BLOCK_A;
 80227c8:	687b      	ldr	r3, [r7, #4]
 80227ca:	899b      	ldrh	r3, [r3, #12]
 80227cc:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80227d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80227d4:	009b      	lsls	r3, r3, #2
 80227d6:	613b      	str	r3, [r7, #16]
    uint8_t result = 0;
 80227d8:	2300      	movs	r3, #0
 80227da:	75fb      	strb	r3, [r7, #23]

    int32_t int_distance = distance * 100000;
 80227dc:	edd7 7a00 	vldr	s15, [r7]
 80227e0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 802283c <_ZN6Logger16StoreDistanceLogEf+0x80>
 80227e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80227e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80227ec:	ee17 3a90 	vmov	r3, s15
 80227f0:	60fb      	str	r3, [r7, #12]

    if(!flash_->CheckBlankWord(address, 1)) result = 0x02;
 80227f2:	687b      	ldr	r3, [r7, #4]
 80227f4:	699b      	ldr	r3, [r3, #24]
 80227f6:	2201      	movs	r2, #1
 80227f8:	6939      	ldr	r1, [r7, #16]
 80227fa:	4618      	mov	r0, r3
 80227fc:	f7fe fd7b 	bl	80212f6 <_ZN5Flash14CheckBlankWordEmm>
 8022800:	4603      	mov	r3, r0
 8022802:	f083 0301 	eor.w	r3, r3, #1
 8022806:	b2db      	uxtb	r3, r3
 8022808:	2b00      	cmp	r3, #0
 802280a:	d002      	beq.n	8022812 <_ZN6Logger16StoreDistanceLogEf+0x56>
 802280c:	2302      	movs	r3, #2
 802280e:	75fb      	strb	r3, [r7, #23]
 8022810:	e00f      	b.n	8022832 <_ZN6Logger16StoreDistanceLogEf+0x76>
    else if(!flash_->StoreInt32(address, &int_distance, 1)) result = 0x03;
 8022812:	687b      	ldr	r3, [r7, #4]
 8022814:	6998      	ldr	r0, [r3, #24]
 8022816:	f107 020c 	add.w	r2, r7, #12
 802281a:	2301      	movs	r3, #1
 802281c:	6939      	ldr	r1, [r7, #16]
 802281e:	f7fe fc84 	bl	802112a <_ZN5Flash10StoreInt32EmPlm>
 8022822:	4603      	mov	r3, r0
 8022824:	f083 0301 	eor.w	r3, r3, #1
 8022828:	b2db      	uxtb	r3, r3
 802282a:	2b00      	cmp	r3, #0
 802282c:	d001      	beq.n	8022832 <_ZN6Logger16StoreDistanceLogEf+0x76>
 802282e:	2303      	movs	r3, #3
 8022830:	75fb      	strb	r3, [r7, #23]

    return result;
 8022832:	7dfb      	ldrb	r3, [r7, #23]
}
 8022834:	4618      	mov	r0, r3
 8022836:	3718      	adds	r7, #24
 8022838:	46bd      	mov	sp, r7
 802283a:	bd80      	pop	{r7, pc}
 802283c:	47c35000 	.word	0x47c35000

08022840 <_ZN6Logger14StoreRadianLogEv>:

uint8_t Logger::StoreRadianLog()
{
 8022840:	b580      	push	{r7, lr}
 8022842:	b086      	sub	sp, #24
 8022844:	af00      	add	r7, sp, #0
 8022846:	6078      	str	r0, [r7, #4]
    uint32_t address = logging_now_address_ * 4 + HEAD_ADDRESS_BLOCK_B;
 8022848:	687b      	ldr	r3, [r7, #4]
 802284a:	899b      	ldrh	r3, [r3, #12]
 802284c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8022850:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8022854:	009b      	lsls	r3, r3, #2
 8022856:	613b      	str	r3, [r7, #16]
    uint8_t result = 0;
 8022858:	2300      	movs	r3, #0
 802285a:	75fb      	strb	r3, [r7, #23]

    float radian = imu_->GetRadStackZ();
 802285c:	687b      	ldr	r3, [r7, #4]
 802285e:	6a1b      	ldr	r3, [r3, #32]
 8022860:	4618      	mov	r0, r3
 8022862:	f7ff f801 	bl	8021868 <_ZN3Imu12GetRadStackZEv>
 8022866:	ed87 0a03 	vstr	s0, [r7, #12]
    imu_->ClearRadStackZ();
 802286a:	687b      	ldr	r3, [r7, #4]
 802286c:	6a1b      	ldr	r3, [r3, #32]
 802286e:	4618      	mov	r0, r3
 8022870:	f7fe ffec 	bl	802184c <_ZN3Imu14ClearRadStackZEv>
    logging_radian_buff_ = radian;
 8022874:	687b      	ldr	r3, [r7, #4]
 8022876:	68fa      	ldr	r2, [r7, #12]
 8022878:	605a      	str	r2, [r3, #4]

#ifdef DEBUG_MODE
    g_radian = radian;
 802287a:	4a1a      	ldr	r2, [pc, #104]	; (80228e4 <_ZN6Logger14StoreRadianLogEv+0xa4>)
 802287c:	68fb      	ldr	r3, [r7, #12]
 802287e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int32_t int_radian = logging_radian_buff_ * 100000;
 8022880:	687b      	ldr	r3, [r7, #4]
 8022882:	edd3 7a01 	vldr	s15, [r3, #4]
 8022886:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80228e8 <_ZN6Logger14StoreRadianLogEv+0xa8>
 802288a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802288e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022892:	ee17 3a90 	vmov	r3, s15
 8022896:	60bb      	str	r3, [r7, #8]

    if(!flash_->CheckBlankWord(address, 1)) result = 0x02;
 8022898:	687b      	ldr	r3, [r7, #4]
 802289a:	699b      	ldr	r3, [r3, #24]
 802289c:	2201      	movs	r2, #1
 802289e:	6939      	ldr	r1, [r7, #16]
 80228a0:	4618      	mov	r0, r3
 80228a2:	f7fe fd28 	bl	80212f6 <_ZN5Flash14CheckBlankWordEmm>
 80228a6:	4603      	mov	r3, r0
 80228a8:	f083 0301 	eor.w	r3, r3, #1
 80228ac:	b2db      	uxtb	r3, r3
 80228ae:	2b00      	cmp	r3, #0
 80228b0:	d002      	beq.n	80228b8 <_ZN6Logger14StoreRadianLogEv+0x78>
 80228b2:	2302      	movs	r3, #2
 80228b4:	75fb      	strb	r3, [r7, #23]
 80228b6:	e00f      	b.n	80228d8 <_ZN6Logger14StoreRadianLogEv+0x98>
    else if(!flash_->StoreInt32(address, &int_radian, 1)) result = 0x03;
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	6998      	ldr	r0, [r3, #24]
 80228bc:	f107 0208 	add.w	r2, r7, #8
 80228c0:	2301      	movs	r3, #1
 80228c2:	6939      	ldr	r1, [r7, #16]
 80228c4:	f7fe fc31 	bl	802112a <_ZN5Flash10StoreInt32EmPlm>
 80228c8:	4603      	mov	r3, r0
 80228ca:	f083 0301 	eor.w	r3, r3, #1
 80228ce:	b2db      	uxtb	r3, r3
 80228d0:	2b00      	cmp	r3, #0
 80228d2:	d001      	beq.n	80228d8 <_ZN6Logger14StoreRadianLogEv+0x98>
 80228d4:	2303      	movs	r3, #3
 80228d6:	75fb      	strb	r3, [r7, #23]

    return result;
 80228d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80228da:	4618      	mov	r0, r3
 80228dc:	3718      	adds	r7, #24
 80228de:	46bd      	mov	sp, r7
 80228e0:	bd80      	pop	{r7, pc}
 80228e2:	bf00      	nop
 80228e4:	2000025c 	.word	0x2000025c
 80228e8:	47c35000 	.word	0x47c35000

080228ec <_ZN6Logger18StoreRadianCorrectEv>:

uint8_t Logger::StoreRadianCorrect()
{
 80228ec:	b580      	push	{r7, lr}
 80228ee:	b086      	sub	sp, #24
 80228f0:	af00      	add	r7, sp, #0
 80228f2:	6078      	str	r0, [r7, #4]
    uint32_t address = logging_now_address_ * 4 + HEAD_ADDRESS_BLOCK_B;
 80228f4:	687b      	ldr	r3, [r7, #4]
 80228f6:	899b      	ldrh	r3, [r3, #12]
 80228f8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80228fc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8022900:	009b      	lsls	r3, r3, #2
 8022902:	613b      	str	r3, [r7, #16]
    uint8_t result = 0;
 8022904:	2300      	movs	r3, #0
 8022906:	75fb      	strb	r3, [r7, #23]

    int32_t int_radian = logging_radian_buff_ * 100000;
 8022908:	687b      	ldr	r3, [r7, #4]
 802290a:	edd3 7a01 	vldr	s15, [r3, #4]
 802290e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8022974 <_ZN6Logger18StoreRadianCorrectEv+0x88>
 8022912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802291a:	ee17 3a90 	vmov	r3, s15
 802291e:	60fb      	str	r3, [r7, #12]

#ifdef DEBUG_MODE
    g_radian = logging_radian_buff_;
 8022920:	687b      	ldr	r3, [r7, #4]
 8022922:	685b      	ldr	r3, [r3, #4]
 8022924:	4a14      	ldr	r2, [pc, #80]	; (8022978 <_ZN6Logger18StoreRadianCorrectEv+0x8c>)
 8022926:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(!flash_->CheckBlankWord(address, 1)) result = 0x02;
 8022928:	687b      	ldr	r3, [r7, #4]
 802292a:	699b      	ldr	r3, [r3, #24]
 802292c:	2201      	movs	r2, #1
 802292e:	6939      	ldr	r1, [r7, #16]
 8022930:	4618      	mov	r0, r3
 8022932:	f7fe fce0 	bl	80212f6 <_ZN5Flash14CheckBlankWordEmm>
 8022936:	4603      	mov	r3, r0
 8022938:	f083 0301 	eor.w	r3, r3, #1
 802293c:	b2db      	uxtb	r3, r3
 802293e:	2b00      	cmp	r3, #0
 8022940:	d002      	beq.n	8022948 <_ZN6Logger18StoreRadianCorrectEv+0x5c>
 8022942:	2302      	movs	r3, #2
 8022944:	75fb      	strb	r3, [r7, #23]
 8022946:	e00f      	b.n	8022968 <_ZN6Logger18StoreRadianCorrectEv+0x7c>
    else if(!flash_->StoreInt32(address, &int_radian, 1)) result = 0x03;
 8022948:	687b      	ldr	r3, [r7, #4]
 802294a:	6998      	ldr	r0, [r3, #24]
 802294c:	f107 020c 	add.w	r2, r7, #12
 8022950:	2301      	movs	r3, #1
 8022952:	6939      	ldr	r1, [r7, #16]
 8022954:	f7fe fbe9 	bl	802112a <_ZN5Flash10StoreInt32EmPlm>
 8022958:	4603      	mov	r3, r0
 802295a:	f083 0301 	eor.w	r3, r3, #1
 802295e:	b2db      	uxtb	r3, r3
 8022960:	2b00      	cmp	r3, #0
 8022962:	d001      	beq.n	8022968 <_ZN6Logger18StoreRadianCorrectEv+0x7c>
 8022964:	2303      	movs	r3, #3
 8022966:	75fb      	strb	r3, [r7, #23]

    return result;
 8022968:	7dfb      	ldrb	r3, [r7, #23]
}
 802296a:	4618      	mov	r0, r3
 802296c:	3718      	adds	r7, #24
 802296e:	46bd      	mov	sp, r7
 8022970:	bd80      	pop	{r7, pc}
 8022972:	bf00      	nop
 8022974:	47c35000 	.word	0x47c35000
 8022978:	2000025c 	.word	0x2000025c

0802297c <_ZN6Logger15StoreVariousLogEv>:

uint8_t Logger::StoreVariousLog()
{
 802297c:	b580      	push	{r7, lr}
 802297e:	b086      	sub	sp, #24
 8022980:	af00      	add	r7, sp, #0
 8022982:	6078      	str	r0, [r7, #4]
    uint32_t address = logging_now_address_ * 2 + HEAD_ADDRESS_BLOCK_C;
 8022984:	687b      	ldr	r3, [r7, #4]
 8022986:	899b      	ldrh	r3, [r3, #12]
 8022988:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 802298c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8022990:	005b      	lsls	r3, r3, #1
 8022992:	613b      	str	r3, [r7, #16]
    uint8_t result = 0;
 8022994:	2300      	movs	r3, #0
 8022996:	75fb      	strb	r3, [r7, #23]

    uint8_t corner_count = side_sensor_->GetCornerMarkerCount();
 8022998:	687b      	ldr	r3, [r7, #4]
 802299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802299c:	4618      	mov	r0, r3
 802299e:	f002 fd14 	bl	80253ca <_ZN10SideSensor20GetCornerMarkerCountEv>
 80229a2:	4603      	mov	r3, r0
 80229a4:	73fb      	strb	r3, [r7, #15]
    uint8_t cross_count  = side_sensor_->GetCrossLineCount();
 80229a6:	687b      	ldr	r3, [r7, #4]
 80229a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80229aa:	4618      	mov	r0, r3
 80229ac:	f002 fd19 	bl	80253e2 <_ZN10SideSensor17GetCrossLineCountEv>
 80229b0:	4603      	mov	r3, r0
 80229b2:	73bb      	strb	r3, [r7, #14]
    static uint8_t pre_corner_count = corner_count;
 80229b4:	4b4c      	ldr	r3, [pc, #304]	; (8022ae8 <_ZN6Logger15StoreVariousLogEv+0x16c>)
 80229b6:	781b      	ldrb	r3, [r3, #0]
 80229b8:	f3bf 8f5b 	dmb	ish
 80229bc:	b2db      	uxtb	r3, r3
 80229be:	f003 0301 	and.w	r3, r3, #1
 80229c2:	2b00      	cmp	r3, #0
 80229c4:	bf0c      	ite	eq
 80229c6:	2301      	moveq	r3, #1
 80229c8:	2300      	movne	r3, #0
 80229ca:	b2db      	uxtb	r3, r3
 80229cc:	2b00      	cmp	r3, #0
 80229ce:	d010      	beq.n	80229f2 <_ZN6Logger15StoreVariousLogEv+0x76>
 80229d0:	4845      	ldr	r0, [pc, #276]	; (8022ae8 <_ZN6Logger15StoreVariousLogEv+0x16c>)
 80229d2:	f007 fd6f 	bl	802a4b4 <__cxa_guard_acquire>
 80229d6:	4603      	mov	r3, r0
 80229d8:	2b00      	cmp	r3, #0
 80229da:	bf14      	ite	ne
 80229dc:	2301      	movne	r3, #1
 80229de:	2300      	moveq	r3, #0
 80229e0:	b2db      	uxtb	r3, r3
 80229e2:	2b00      	cmp	r3, #0
 80229e4:	d005      	beq.n	80229f2 <_ZN6Logger15StoreVariousLogEv+0x76>
 80229e6:	4a41      	ldr	r2, [pc, #260]	; (8022aec <_ZN6Logger15StoreVariousLogEv+0x170>)
 80229e8:	7bfb      	ldrb	r3, [r7, #15]
 80229ea:	7013      	strb	r3, [r2, #0]
 80229ec:	483e      	ldr	r0, [pc, #248]	; (8022ae8 <_ZN6Logger15StoreVariousLogEv+0x16c>)
 80229ee:	f007 fd6d 	bl	802a4cc <__cxa_guard_release>
    static uint8_t pre_cross_count  = cross_count;
 80229f2:	4b3f      	ldr	r3, [pc, #252]	; (8022af0 <_ZN6Logger15StoreVariousLogEv+0x174>)
 80229f4:	781b      	ldrb	r3, [r3, #0]
 80229f6:	f3bf 8f5b 	dmb	ish
 80229fa:	b2db      	uxtb	r3, r3
 80229fc:	f003 0301 	and.w	r3, r3, #1
 8022a00:	2b00      	cmp	r3, #0
 8022a02:	bf0c      	ite	eq
 8022a04:	2301      	moveq	r3, #1
 8022a06:	2300      	movne	r3, #0
 8022a08:	b2db      	uxtb	r3, r3
 8022a0a:	2b00      	cmp	r3, #0
 8022a0c:	d010      	beq.n	8022a30 <_ZN6Logger15StoreVariousLogEv+0xb4>
 8022a0e:	4838      	ldr	r0, [pc, #224]	; (8022af0 <_ZN6Logger15StoreVariousLogEv+0x174>)
 8022a10:	f007 fd50 	bl	802a4b4 <__cxa_guard_acquire>
 8022a14:	4603      	mov	r3, r0
 8022a16:	2b00      	cmp	r3, #0
 8022a18:	bf14      	ite	ne
 8022a1a:	2301      	movne	r3, #1
 8022a1c:	2300      	moveq	r3, #0
 8022a1e:	b2db      	uxtb	r3, r3
 8022a20:	2b00      	cmp	r3, #0
 8022a22:	d005      	beq.n	8022a30 <_ZN6Logger15StoreVariousLogEv+0xb4>
 8022a24:	4a33      	ldr	r2, [pc, #204]	; (8022af4 <_ZN6Logger15StoreVariousLogEv+0x178>)
 8022a26:	7bbb      	ldrb	r3, [r7, #14]
 8022a28:	7013      	strb	r3, [r2, #0]
 8022a2a:	4831      	ldr	r0, [pc, #196]	; (8022af0 <_ZN6Logger15StoreVariousLogEv+0x174>)
 8022a2c:	f007 fd4e 	bl	802a4cc <__cxa_guard_release>
    uint16_t various = 0;
 8022a30:	2300      	movs	r3, #0
 8022a32:	81bb      	strh	r3, [r7, #12]

    if(pre_corner_count != corner_count) various |= 0x0002;
 8022a34:	4b2d      	ldr	r3, [pc, #180]	; (8022aec <_ZN6Logger15StoreVariousLogEv+0x170>)
 8022a36:	781b      	ldrb	r3, [r3, #0]
 8022a38:	7bfa      	ldrb	r2, [r7, #15]
 8022a3a:	429a      	cmp	r2, r3
 8022a3c:	d004      	beq.n	8022a48 <_ZN6Logger15StoreVariousLogEv+0xcc>
 8022a3e:	89bb      	ldrh	r3, [r7, #12]
 8022a40:	f043 0302 	orr.w	r3, r3, #2
 8022a44:	b29b      	uxth	r3, r3
 8022a46:	81bb      	strh	r3, [r7, #12]
    if(pre_cross_count != cross_count)   various |= 0x0001;
 8022a48:	4b2a      	ldr	r3, [pc, #168]	; (8022af4 <_ZN6Logger15StoreVariousLogEv+0x178>)
 8022a4a:	781b      	ldrb	r3, [r3, #0]
 8022a4c:	7bba      	ldrb	r2, [r7, #14]
 8022a4e:	429a      	cmp	r2, r3
 8022a50:	d004      	beq.n	8022a5c <_ZN6Logger15StoreVariousLogEv+0xe0>
 8022a52:	89bb      	ldrh	r3, [r7, #12]
 8022a54:	f043 0301 	orr.w	r3, r3, #1
 8022a58:	b29b      	uxth	r3, r3
 8022a5a:	81bb      	strh	r3, [r7, #12]

    pre_corner_count = corner_count;
 8022a5c:	4a23      	ldr	r2, [pc, #140]	; (8022aec <_ZN6Logger15StoreVariousLogEv+0x170>)
 8022a5e:	7bfb      	ldrb	r3, [r7, #15]
 8022a60:	7013      	strb	r3, [r2, #0]
    pre_cross_count  = cross_count;
 8022a62:	4a24      	ldr	r2, [pc, #144]	; (8022af4 <_ZN6Logger15StoreVariousLogEv+0x178>)
 8022a64:	7bbb      	ldrb	r3, [r7, #14]
 8022a66:	7013      	strb	r3, [r2, #0]

    if(fabs(logging_radian_buff_) < 2)
 8022a68:	687b      	ldr	r3, [r7, #4]
 8022a6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8022a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8022a72:	f7ff fdb1 	bl	80225d8 <_ZSt4fabsf>
 8022a76:	eeb0 7a40 	vmov.f32	s14, s0
 8022a7a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8022a7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a86:	bf4c      	ite	mi
 8022a88:	2301      	movmi	r3, #1
 8022a8a:	2300      	movpl	r3, #0
 8022a8c:	b2db      	uxtb	r3, r3
 8022a8e:	2b00      	cmp	r3, #0
 8022a90:	d002      	beq.n	8022a98 <_ZN6Logger15StoreVariousLogEv+0x11c>
    {
        various = 1;
 8022a92:	2301      	movs	r3, #1
 8022a94:	81bb      	strh	r3, [r7, #12]
 8022a96:	e001      	b.n	8022a9c <_ZN6Logger15StoreVariousLogEv+0x120>
    }
    else various = 0;
 8022a98:	2300      	movs	r3, #0
 8022a9a:	81bb      	strh	r3, [r7, #12]

    if(!flash_->CheckBlankHalfword(address, 1)) result = 0x02;
 8022a9c:	687b      	ldr	r3, [r7, #4]
 8022a9e:	699b      	ldr	r3, [r3, #24]
 8022aa0:	2201      	movs	r2, #1
 8022aa2:	6939      	ldr	r1, [r7, #16]
 8022aa4:	4618      	mov	r0, r3
 8022aa6:	f7fe fbd2 	bl	802124e <_ZN5Flash18CheckBlankHalfwordEmm>
 8022aaa:	4603      	mov	r3, r0
 8022aac:	f083 0301 	eor.w	r3, r3, #1
 8022ab0:	b2db      	uxtb	r3, r3
 8022ab2:	2b00      	cmp	r3, #0
 8022ab4:	d002      	beq.n	8022abc <_ZN6Logger15StoreVariousLogEv+0x140>
 8022ab6:	2302      	movs	r3, #2
 8022ab8:	75fb      	strb	r3, [r7, #23]
 8022aba:	e00f      	b.n	8022adc <_ZN6Logger15StoreVariousLogEv+0x160>
    else if(!flash_->StoreUint16(address, &various, 1)) result = 0x03;
 8022abc:	687b      	ldr	r3, [r7, #4]
 8022abe:	6998      	ldr	r0, [r3, #24]
 8022ac0:	f107 020c 	add.w	r2, r7, #12
 8022ac4:	2301      	movs	r3, #1
 8022ac6:	6939      	ldr	r1, [r7, #16]
 8022ac8:	f7fe fafa 	bl	80210c0 <_ZN5Flash11StoreUint16EmPtm>
 8022acc:	4603      	mov	r3, r0
 8022ace:	f083 0301 	eor.w	r3, r3, #1
 8022ad2:	b2db      	uxtb	r3, r3
 8022ad4:	2b00      	cmp	r3, #0
 8022ad6:	d001      	beq.n	8022adc <_ZN6Logger15StoreVariousLogEv+0x160>
 8022ad8:	2303      	movs	r3, #3
 8022ada:	75fb      	strb	r3, [r7, #23]

    return result;
 8022adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8022ade:	4618      	mov	r0, r3
 8022ae0:	3718      	adds	r7, #24
 8022ae2:	46bd      	mov	sp, r7
 8022ae4:	bd80      	pop	{r7, pc}
 8022ae6:	bf00      	nop
 8022ae8:	20000248 	.word	0x20000248
 8022aec:	20000246 	.word	0x20000246
 8022af0:	20000250 	.word	0x20000250
 8022af4:	2000024c 	.word	0x2000024c

08022af8 <_ZN6Logger18DistanceCorrectionEf>:

void Logger::DistanceCorrection(float distance)
{
 8022af8:	b5b0      	push	{r4, r5, r7, lr}
 8022afa:	b084      	sub	sp, #16
 8022afc:	af00      	add	r7, sp, #0
 8022afe:	6078      	str	r0, [r7, #4]
 8022b00:	ed87 0a00 	vstr	s0, [r7]
    uncorrected_address_buff_ = logging_now_address_;
 8022b04:	687b      	ldr	r3, [r7, #4]
 8022b06:	899a      	ldrh	r2, [r3, #12]
 8022b08:	687b      	ldr	r3, [r7, #4]
 8022b0a:	815a      	strh	r2, [r3, #10]

    static float excess_stack = 0;
    excess_stack += distance - LOGGING_CONST_DISTANCE;
 8022b0c:	4b31      	ldr	r3, [pc, #196]	; (8022bd4 <_ZN6Logger18DistanceCorrectionEf+0xdc>)
 8022b0e:	681b      	ldr	r3, [r3, #0]
 8022b10:	4618      	mov	r0, r3
 8022b12:	f7fd fc51 	bl	80203b8 <__aeabi_f2d>
 8022b16:	4604      	mov	r4, r0
 8022b18:	460d      	mov	r5, r1
 8022b1a:	6838      	ldr	r0, [r7, #0]
 8022b1c:	f7fd fc4c 	bl	80203b8 <__aeabi_f2d>
 8022b20:	f04f 0200 	mov.w	r2, #0
 8022b24:	4b2c      	ldr	r3, [pc, #176]	; (8022bd8 <_ZN6Logger18DistanceCorrectionEf+0xe0>)
 8022b26:	f7fd fae7 	bl	80200f8 <__aeabi_dsub>
 8022b2a:	4602      	mov	r2, r0
 8022b2c:	460b      	mov	r3, r1
 8022b2e:	4620      	mov	r0, r4
 8022b30:	4629      	mov	r1, r5
 8022b32:	f7fd fae3 	bl	80200fc <__adddf3>
 8022b36:	4603      	mov	r3, r0
 8022b38:	460c      	mov	r4, r1
 8022b3a:	4618      	mov	r0, r3
 8022b3c:	4621      	mov	r1, r4
 8022b3e:	f7fd ff6b 	bl	8020a18 <__aeabi_d2f>
 8022b42:	4602      	mov	r2, r0
 8022b44:	4b23      	ldr	r3, [pc, #140]	; (8022bd4 <_ZN6Logger18DistanceCorrectionEf+0xdc>)
 8022b46:	601a      	str	r2, [r3, #0]

    if(excess_stack > LOGGING_CONST_DISTANCE)
 8022b48:	4b22      	ldr	r3, [pc, #136]	; (8022bd4 <_ZN6Logger18DistanceCorrectionEf+0xdc>)
 8022b4a:	edd3 7a00 	vldr	s15, [r3]
 8022b4e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b5a:	dc00      	bgt.n	8022b5e <_ZN6Logger18DistanceCorrectionEf+0x66>
        result = StoreVariousLog();
        CheckLoggingSuccess(ERROR_CODE_STORE_VARIOUS, result);

        excess_stack -= LOGGING_CONST_DISTANCE;
    }
}
 8022b5c:	e035      	b.n	8022bca <_ZN6Logger18DistanceCorrectionEf+0xd2>
        logging_now_address_++;
 8022b5e:	687b      	ldr	r3, [r7, #4]
 8022b60:	899b      	ldrh	r3, [r3, #12]
 8022b62:	3301      	adds	r3, #1
 8022b64:	b29a      	uxth	r2, r3
 8022b66:	687b      	ldr	r3, [r7, #4]
 8022b68:	819a      	strh	r2, [r3, #12]
        uint8_t result = StoreDistanceLog(distance);
 8022b6a:	ed97 0a00 	vldr	s0, [r7]
 8022b6e:	6878      	ldr	r0, [r7, #4]
 8022b70:	f7ff fe24 	bl	80227bc <_ZN6Logger16StoreDistanceLogEf>
 8022b74:	4603      	mov	r3, r0
 8022b76:	73fb      	strb	r3, [r7, #15]
        g_store_correct = result;
 8022b78:	4a18      	ldr	r2, [pc, #96]	; (8022bdc <_ZN6Logger18DistanceCorrectionEf+0xe4>)
 8022b7a:	7bfb      	ldrb	r3, [r7, #15]
 8022b7c:	7013      	strb	r3, [r2, #0]
        CheckLoggingSuccess(ERROR_CODE_STORE_DISTANCE, result);
 8022b7e:	7bfb      	ldrb	r3, [r7, #15]
 8022b80:	461a      	mov	r2, r3
 8022b82:	4917      	ldr	r1, [pc, #92]	; (8022be0 <_ZN6Logger18DistanceCorrectionEf+0xe8>)
 8022b84:	6878      	ldr	r0, [r7, #4]
 8022b86:	f000 f831 	bl	8022bec <_ZN6Logger19CheckLoggingSuccessEmh>
        result = StoreRadianCorrect();
 8022b8a:	6878      	ldr	r0, [r7, #4]
 8022b8c:	f7ff feae 	bl	80228ec <_ZN6Logger18StoreRadianCorrectEv>
 8022b90:	4603      	mov	r3, r0
 8022b92:	73fb      	strb	r3, [r7, #15]
        CheckLoggingSuccess(ERROR_CODE_STORE_RADIAN, result);
 8022b94:	7bfb      	ldrb	r3, [r7, #15]
 8022b96:	461a      	mov	r2, r3
 8022b98:	4912      	ldr	r1, [pc, #72]	; (8022be4 <_ZN6Logger18DistanceCorrectionEf+0xec>)
 8022b9a:	6878      	ldr	r0, [r7, #4]
 8022b9c:	f000 f826 	bl	8022bec <_ZN6Logger19CheckLoggingSuccessEmh>
        result = StoreVariousLog();
 8022ba0:	6878      	ldr	r0, [r7, #4]
 8022ba2:	f7ff feeb 	bl	802297c <_ZN6Logger15StoreVariousLogEv>
 8022ba6:	4603      	mov	r3, r0
 8022ba8:	73fb      	strb	r3, [r7, #15]
        CheckLoggingSuccess(ERROR_CODE_STORE_VARIOUS, result);
 8022baa:	7bfb      	ldrb	r3, [r7, #15]
 8022bac:	461a      	mov	r2, r3
 8022bae:	490e      	ldr	r1, [pc, #56]	; (8022be8 <_ZN6Logger18DistanceCorrectionEf+0xf0>)
 8022bb0:	6878      	ldr	r0, [r7, #4]
 8022bb2:	f000 f81b 	bl	8022bec <_ZN6Logger19CheckLoggingSuccessEmh>
        excess_stack -= LOGGING_CONST_DISTANCE;
 8022bb6:	4b07      	ldr	r3, [pc, #28]	; (8022bd4 <_ZN6Logger18DistanceCorrectionEf+0xdc>)
 8022bb8:	edd3 7a00 	vldr	s15, [r3]
 8022bbc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022bc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022bc4:	4b03      	ldr	r3, [pc, #12]	; (8022bd4 <_ZN6Logger18DistanceCorrectionEf+0xdc>)
 8022bc6:	edc3 7a00 	vstr	s15, [r3]
}
 8022bca:	bf00      	nop
 8022bcc:	3710      	adds	r7, #16
 8022bce:	46bd      	mov	sp, r7
 8022bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8022bd2:	bf00      	nop
 8022bd4:	20000254 	.word	0x20000254
 8022bd8:	40340000 	.word	0x40340000
 8022bdc:	2000026c 	.word	0x2000026c
 8022be0:	08018000 	.word	0x08018000
 8022be4:	08018100 	.word	0x08018100
 8022be8:	08018200 	.word	0x08018200

08022bec <_ZN6Logger19CheckLoggingSuccessEmh>:

void Logger::CheckLoggingSuccess(uint32_t address, uint8_t data)
{
 8022bec:	b580      	push	{r7, lr}
 8022bee:	b084      	sub	sp, #16
 8022bf0:	af00      	add	r7, sp, #0
 8022bf2:	60f8      	str	r0, [r7, #12]
 8022bf4:	60b9      	str	r1, [r7, #8]
 8022bf6:	4613      	mov	r3, r2
 8022bf8:	71fb      	strb	r3, [r7, #7]
    if(data != 0)
 8022bfa:	79fb      	ldrb	r3, [r7, #7]
 8022bfc:	2b00      	cmp	r3, #0
 8022bfe:	d011      	beq.n	8022c24 <_ZN6Logger19CheckLoggingSuccessEmh+0x38>
    {
        SetEmergencyStopFlag(true);
 8022c00:	2101      	movs	r1, #1
 8022c02:	68f8      	ldr	r0, [r7, #12]
 8022c04:	f000 f812 	bl	8022c2c <_ZN6Logger20SetEmergencyStopFlagEb>

        if(flash_->StoreUint8(address, &data, 1))
 8022c08:	68fb      	ldr	r3, [r7, #12]
 8022c0a:	6998      	ldr	r0, [r3, #24]
 8022c0c:	1dfa      	adds	r2, r7, #7
 8022c0e:	2301      	movs	r3, #1
 8022c10:	68b9      	ldr	r1, [r7, #8]
 8022c12:	f7fe fa21 	bl	8021058 <_ZN5Flash10StoreUint8EmPhm>
 8022c16:	4603      	mov	r3, r0
 8022c18:	2b00      	cmp	r3, #0
 8022c1a:	d003      	beq.n	8022c24 <_ZN6Logger19CheckLoggingSuccessEmh+0x38>
        {
            SetSuccessEmergencyCodeStore(true);
 8022c1c:	2101      	movs	r1, #1
 8022c1e:	68f8      	ldr	r0, [r7, #12]
 8022c20:	f000 f81f 	bl	8022c62 <_ZN6Logger28SetSuccessEmergencyCodeStoreEb>
        }
    }
}
 8022c24:	bf00      	nop
 8022c26:	3710      	adds	r7, #16
 8022c28:	46bd      	mov	sp, r7
 8022c2a:	bd80      	pop	{r7, pc}

08022c2c <_ZN6Logger20SetEmergencyStopFlagEb>:

void Logger::SetEmergencyStopFlag(bool boolean)
{
 8022c2c:	b480      	push	{r7}
 8022c2e:	b083      	sub	sp, #12
 8022c30:	af00      	add	r7, sp, #0
 8022c32:	6078      	str	r0, [r7, #4]
 8022c34:	460b      	mov	r3, r1
 8022c36:	70fb      	strb	r3, [r7, #3]
    emergency_stop_flag_ = boolean;
 8022c38:	687b      	ldr	r3, [r7, #4]
 8022c3a:	78fa      	ldrb	r2, [r7, #3]
 8022c3c:	701a      	strb	r2, [r3, #0]
}
 8022c3e:	bf00      	nop
 8022c40:	370c      	adds	r7, #12
 8022c42:	46bd      	mov	sp, r7
 8022c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c48:	4770      	bx	lr

08022c4a <_ZN6Logger20GetEmergencyStopFlagEv>:

bool Logger::GetEmergencyStopFlag()
{
 8022c4a:	b480      	push	{r7}
 8022c4c:	b083      	sub	sp, #12
 8022c4e:	af00      	add	r7, sp, #0
 8022c50:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8022c52:	687b      	ldr	r3, [r7, #4]
 8022c54:	781b      	ldrb	r3, [r3, #0]
}
 8022c56:	4618      	mov	r0, r3
 8022c58:	370c      	adds	r7, #12
 8022c5a:	46bd      	mov	sp, r7
 8022c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c60:	4770      	bx	lr

08022c62 <_ZN6Logger28SetSuccessEmergencyCodeStoreEb>:

void Logger::SetSuccessEmergencyCodeStore(bool boolean)
{
 8022c62:	b480      	push	{r7}
 8022c64:	b083      	sub	sp, #12
 8022c66:	af00      	add	r7, sp, #0
 8022c68:	6078      	str	r0, [r7, #4]
 8022c6a:	460b      	mov	r3, r1
 8022c6c:	70fb      	strb	r3, [r7, #3]
    success_emergency_code_store_ = boolean;
 8022c6e:	687b      	ldr	r3, [r7, #4]
 8022c70:	78fa      	ldrb	r2, [r7, #3]
 8022c72:	705a      	strb	r2, [r3, #1]
}
 8022c74:	bf00      	nop
 8022c76:	370c      	adds	r7, #12
 8022c78:	46bd      	mov	sp, r7
 8022c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c7e:	4770      	bx	lr

08022c80 <_ZN6Logger28GetSuccessEmergencyCodeStoreEv>:

bool Logger::GetSuccessEmergencyCodeStore()
{
 8022c80:	b480      	push	{r7}
 8022c82:	b083      	sub	sp, #12
 8022c84:	af00      	add	r7, sp, #0
 8022c86:	6078      	str	r0, [r7, #4]
    return success_emergency_code_store_;
 8022c88:	687b      	ldr	r3, [r7, #4]
 8022c8a:	785b      	ldrb	r3, [r3, #1]
}
 8022c8c:	4618      	mov	r0, r3
 8022c8e:	370c      	adds	r7, #12
 8022c90:	46bd      	mov	sp, r7
 8022c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c96:	4770      	bx	lr

08022c98 <_ZN6Logger20LoggingAccelPositionEv>:

void Logger::LoggingAccelPosition()
{
 8022c98:	b580      	push	{r7, lr}
 8022c9a:	b088      	sub	sp, #32
 8022c9c:	af00      	add	r7, sp, #0
 8022c9e:	6078      	str	r0, [r7, #4]
    static uint16_t accel_straight_count = 0;
    static uint8_t accel_step = 0;
    bool straight = false;
 8022ca0:	2300      	movs	r3, #0
 8022ca2:	77fb      	strb	r3, [r7, #31]

    if(fabs(encoder_->AngularVelocity()) < STRAIGHT_BORDER_ENCODER)
 8022ca4:	687b      	ldr	r3, [r7, #4]
 8022ca6:	695b      	ldr	r3, [r3, #20]
 8022ca8:	4618      	mov	r0, r3
 8022caa:	f7fe f981 	bl	8020fb0 <_ZN7Encoder15AngularVelocityEv>
 8022cae:	eef0 7a40 	vmov.f32	s15, s0
 8022cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8022cb6:	f7ff fc8f 	bl	80225d8 <_ZSt4fabsf>
 8022cba:	eeb0 7a40 	vmov.f32	s14, s0
 8022cbe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8022cc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022cca:	bf4c      	ite	mi
 8022ccc:	2301      	movmi	r3, #1
 8022cce:	2300      	movpl	r3, #0
 8022cd0:	b2db      	uxtb	r3, r3
 8022cd2:	2b00      	cmp	r3, #0
 8022cd4:	d008      	beq.n	8022ce8 <_ZN6Logger20LoggingAccelPositionEv+0x50>
    {
        led_->ColorOrder('X');
 8022cd6:	687b      	ldr	r3, [r7, #4]
 8022cd8:	69db      	ldr	r3, [r3, #28]
 8022cda:	2158      	movs	r1, #88	; 0x58
 8022cdc:	4618      	mov	r0, r3
 8022cde:	f7fe fe5d 	bl	802199c <_ZN3Led10ColorOrderEc>
        straight = true;
 8022ce2:	2301      	movs	r3, #1
 8022ce4:	77fb      	strb	r3, [r7, #31]
 8022ce6:	e005      	b.n	8022cf4 <_ZN6Logger20LoggingAccelPositionEv+0x5c>
    }
    else led_->ColorOrder('M');
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	69db      	ldr	r3, [r3, #28]
 8022cec:	214d      	movs	r1, #77	; 0x4d
 8022cee:	4618      	mov	r0, r3
 8022cf0:	f7fe fe54 	bl	802199c <_ZN3Led10ColorOrderEc>

    if(straight)
 8022cf4:	7ffb      	ldrb	r3, [r7, #31]
 8022cf6:	2b00      	cmp	r3, #0
 8022cf8:	d02d      	beq.n	8022d56 <_ZN6Logger20LoggingAccelPositionEv+0xbe>
    {
        accel_straight_count++;
 8022cfa:	4b33      	ldr	r3, [pc, #204]	; (8022dc8 <_ZN6Logger20LoggingAccelPositionEv+0x130>)
 8022cfc:	881b      	ldrh	r3, [r3, #0]
 8022cfe:	3301      	adds	r3, #1
 8022d00:	b29a      	uxth	r2, r3
 8022d02:	4b31      	ldr	r3, [pc, #196]	; (8022dc8 <_ZN6Logger20LoggingAccelPositionEv+0x130>)
 8022d04:	801a      	strh	r2, [r3, #0]
        if(accel_straight_count >= CNT_OF_ACCEL_STEP_UP && accel_step < NUM_OF_ACCEL_STEP)
 8022d06:	4b30      	ldr	r3, [pc, #192]	; (8022dc8 <_ZN6Logger20LoggingAccelPositionEv+0x130>)
 8022d08:	881b      	ldrh	r3, [r3, #0]
 8022d0a:	2b03      	cmp	r3, #3
 8022d0c:	d957      	bls.n	8022dbe <_ZN6Logger20LoggingAccelPositionEv+0x126>
 8022d0e:	4b2f      	ldr	r3, [pc, #188]	; (8022dcc <_ZN6Logger20LoggingAccelPositionEv+0x134>)
 8022d10:	781b      	ldrb	r3, [r3, #0]
 8022d12:	2b04      	cmp	r3, #4
 8022d14:	d853      	bhi.n	8022dbe <_ZN6Logger20LoggingAccelPositionEv+0x126>
        {
            accel_step++;
 8022d16:	4b2d      	ldr	r3, [pc, #180]	; (8022dcc <_ZN6Logger20LoggingAccelPositionEv+0x134>)
 8022d18:	781b      	ldrb	r3, [r3, #0]
 8022d1a:	3301      	adds	r3, #1
 8022d1c:	b2da      	uxtb	r2, r3
 8022d1e:	4b2b      	ldr	r3, [pc, #172]	; (8022dcc <_ZN6Logger20LoggingAccelPositionEv+0x134>)
 8022d20:	701a      	strb	r2, [r3, #0]

            uint32_t accel_address = uncorrected_address_buff_ - CNT_OF_ACCEL_STEP_UP;
 8022d22:	687b      	ldr	r3, [r7, #4]
 8022d24:	895b      	ldrh	r3, [r3, #10]
 8022d26:	3b04      	subs	r3, #4
 8022d28:	613b      	str	r3, [r7, #16]

            uint8_t result = StoreAccelPosition(accel_address, accel_step);
 8022d2a:	4b28      	ldr	r3, [pc, #160]	; (8022dcc <_ZN6Logger20LoggingAccelPositionEv+0x134>)
 8022d2c:	781b      	ldrb	r3, [r3, #0]
 8022d2e:	461a      	mov	r2, r3
 8022d30:	6939      	ldr	r1, [r7, #16]
 8022d32:	6878      	ldr	r0, [r7, #4]
 8022d34:	f000 f854 	bl	8022de0 <_ZN6Logger18StoreAccelPositionEmh>
 8022d38:	4603      	mov	r3, r0
 8022d3a:	73fb      	strb	r3, [r7, #15]
#ifdef DEBUG_MODE
    g_store_accel = result;
 8022d3c:	4a24      	ldr	r2, [pc, #144]	; (8022dd0 <_ZN6Logger20LoggingAccelPositionEv+0x138>)
 8022d3e:	7bfb      	ldrb	r3, [r7, #15]
 8022d40:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
            CheckLoggingSuccess(ERROR_CODE_STORE_ACCEL, result);
 8022d42:	7bfb      	ldrb	r3, [r7, #15]
 8022d44:	461a      	mov	r2, r3
 8022d46:	4923      	ldr	r1, [pc, #140]	; (8022dd4 <_ZN6Logger20LoggingAccelPositionEv+0x13c>)
 8022d48:	6878      	ldr	r0, [r7, #4]
 8022d4a:	f7ff ff4f 	bl	8022bec <_ZN6Logger19CheckLoggingSuccessEmh>

            accel_straight_count = 0;
 8022d4e:	4b1e      	ldr	r3, [pc, #120]	; (8022dc8 <_ZN6Logger20LoggingAccelPositionEv+0x130>)
 8022d50:	2200      	movs	r2, #0
 8022d52:	801a      	strh	r2, [r3, #0]
        }
        accel_step = 0;
        accel_straight_count = 0;
    }
    else accel_straight_count = 0;
}
 8022d54:	e033      	b.n	8022dbe <_ZN6Logger20LoggingAccelPositionEv+0x126>
    else if(accel_step != 0)
 8022d56:	4b1d      	ldr	r3, [pc, #116]	; (8022dcc <_ZN6Logger20LoggingAccelPositionEv+0x134>)
 8022d58:	781b      	ldrb	r3, [r3, #0]
 8022d5a:	2b00      	cmp	r3, #0
 8022d5c:	d02c      	beq.n	8022db8 <_ZN6Logger20LoggingAccelPositionEv+0x120>
        for(uint8_t i = 1; i <= accel_step; i++)
 8022d5e:	2301      	movs	r3, #1
 8022d60:	77bb      	strb	r3, [r7, #30]
 8022d62:	4b1a      	ldr	r3, [pc, #104]	; (8022dcc <_ZN6Logger20LoggingAccelPositionEv+0x134>)
 8022d64:	781b      	ldrb	r3, [r3, #0]
 8022d66:	7fba      	ldrb	r2, [r7, #30]
 8022d68:	429a      	cmp	r2, r3
 8022d6a:	d81e      	bhi.n	8022daa <_ZN6Logger20LoggingAccelPositionEv+0x112>
            uint32_t decel_address = (uncorrected_address_buff_-1) - (DIFF_NEXT_ACCEL_STEP * i);
 8022d6c:	687b      	ldr	r3, [r7, #4]
 8022d6e:	895b      	ldrh	r3, [r3, #10]
 8022d70:	1e5a      	subs	r2, r3, #1
 8022d72:	7fbb      	ldrb	r3, [r7, #30]
 8022d74:	005b      	lsls	r3, r3, #1
 8022d76:	1ad3      	subs	r3, r2, r3
 8022d78:	61bb      	str	r3, [r7, #24]
            uint8_t decel_step = i << 4;
 8022d7a:	7fbb      	ldrb	r3, [r7, #30]
 8022d7c:	011b      	lsls	r3, r3, #4
 8022d7e:	75fb      	strb	r3, [r7, #23]
            uint8_t result = StoreAccelPosition(decel_address, decel_step);
 8022d80:	7dfb      	ldrb	r3, [r7, #23]
 8022d82:	461a      	mov	r2, r3
 8022d84:	69b9      	ldr	r1, [r7, #24]
 8022d86:	6878      	ldr	r0, [r7, #4]
 8022d88:	f000 f82a 	bl	8022de0 <_ZN6Logger18StoreAccelPositionEmh>
 8022d8c:	4603      	mov	r3, r0
 8022d8e:	75bb      	strb	r3, [r7, #22]
    g_store_decel = result;
 8022d90:	4a11      	ldr	r2, [pc, #68]	; (8022dd8 <_ZN6Logger20LoggingAccelPositionEv+0x140>)
 8022d92:	7dbb      	ldrb	r3, [r7, #22]
 8022d94:	7013      	strb	r3, [r2, #0]
            CheckLoggingSuccess(ERROR_CODE_STORE_DECEL, result);
 8022d96:	7dbb      	ldrb	r3, [r7, #22]
 8022d98:	461a      	mov	r2, r3
 8022d9a:	4910      	ldr	r1, [pc, #64]	; (8022ddc <_ZN6Logger20LoggingAccelPositionEv+0x144>)
 8022d9c:	6878      	ldr	r0, [r7, #4]
 8022d9e:	f7ff ff25 	bl	8022bec <_ZN6Logger19CheckLoggingSuccessEmh>
        for(uint8_t i = 1; i <= accel_step; i++)
 8022da2:	7fbb      	ldrb	r3, [r7, #30]
 8022da4:	3301      	adds	r3, #1
 8022da6:	77bb      	strb	r3, [r7, #30]
 8022da8:	e7db      	b.n	8022d62 <_ZN6Logger20LoggingAccelPositionEv+0xca>
        accel_step = 0;
 8022daa:	4b08      	ldr	r3, [pc, #32]	; (8022dcc <_ZN6Logger20LoggingAccelPositionEv+0x134>)
 8022dac:	2200      	movs	r2, #0
 8022dae:	701a      	strb	r2, [r3, #0]
        accel_straight_count = 0;
 8022db0:	4b05      	ldr	r3, [pc, #20]	; (8022dc8 <_ZN6Logger20LoggingAccelPositionEv+0x130>)
 8022db2:	2200      	movs	r2, #0
 8022db4:	801a      	strh	r2, [r3, #0]
}
 8022db6:	e002      	b.n	8022dbe <_ZN6Logger20LoggingAccelPositionEv+0x126>
    else accel_straight_count = 0;
 8022db8:	4b03      	ldr	r3, [pc, #12]	; (8022dc8 <_ZN6Logger20LoggingAccelPositionEv+0x130>)
 8022dba:	2200      	movs	r2, #0
 8022dbc:	801a      	strh	r2, [r3, #0]
}
 8022dbe:	bf00      	nop
 8022dc0:	3720      	adds	r7, #32
 8022dc2:	46bd      	mov	sp, r7
 8022dc4:	bd80      	pop	{r7, pc}
 8022dc6:	bf00      	nop
 8022dc8:	20000258 	.word	0x20000258
 8022dcc:	2000025a 	.word	0x2000025a
 8022dd0:	2000026d 	.word	0x2000026d
 8022dd4:	08018300 	.word	0x08018300
 8022dd8:	2000026e 	.word	0x2000026e
 8022ddc:	08018400 	.word	0x08018400

08022de0 <_ZN6Logger18StoreAccelPositionEmh>:

uint8_t Logger::StoreAccelPosition(uint32_t address, uint8_t data)
{
 8022de0:	b580      	push	{r7, lr}
 8022de2:	b084      	sub	sp, #16
 8022de4:	af00      	add	r7, sp, #0
 8022de6:	60f8      	str	r0, [r7, #12]
 8022de8:	60b9      	str	r1, [r7, #8]
 8022dea:	4613      	mov	r3, r2
 8022dec:	71fb      	strb	r3, [r7, #7]
    address += HEAD_ADDRESS_BLOCK_D;
 8022dee:	68bb      	ldr	r3, [r7, #8]
 8022df0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022df4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022df8:	60bb      	str	r3, [r7, #8]

    if(!flash_->CheckBlankByte(address, 1)) return 0x01;
 8022dfa:	68fb      	ldr	r3, [r7, #12]
 8022dfc:	699b      	ldr	r3, [r3, #24]
 8022dfe:	2201      	movs	r2, #1
 8022e00:	68b9      	ldr	r1, [r7, #8]
 8022e02:	4618      	mov	r0, r3
 8022e04:	f7fe f9d6 	bl	80211b4 <_ZN5Flash14CheckBlankByteEmm>
 8022e08:	4603      	mov	r3, r0
 8022e0a:	f083 0301 	eor.w	r3, r3, #1
 8022e0e:	b2db      	uxtb	r3, r3
 8022e10:	2b00      	cmp	r3, #0
 8022e12:	d001      	beq.n	8022e18 <_ZN6Logger18StoreAccelPositionEmh+0x38>
 8022e14:	2301      	movs	r3, #1
 8022e16:	e00f      	b.n	8022e38 <_ZN6Logger18StoreAccelPositionEmh+0x58>
    else if(!flash_->StoreUint8(address, &data, 1)) return 0x02;
 8022e18:	68fb      	ldr	r3, [r7, #12]
 8022e1a:	6998      	ldr	r0, [r3, #24]
 8022e1c:	1dfa      	adds	r2, r7, #7
 8022e1e:	2301      	movs	r3, #1
 8022e20:	68b9      	ldr	r1, [r7, #8]
 8022e22:	f7fe f919 	bl	8021058 <_ZN5Flash10StoreUint8EmPhm>
 8022e26:	4603      	mov	r3, r0
 8022e28:	f083 0301 	eor.w	r3, r3, #1
 8022e2c:	b2db      	uxtb	r3, r3
 8022e2e:	2b00      	cmp	r3, #0
 8022e30:	d001      	beq.n	8022e36 <_ZN6Logger18StoreAccelPositionEmh+0x56>
 8022e32:	2302      	movs	r3, #2
 8022e34:	e000      	b.n	8022e38 <_ZN6Logger18StoreAccelPositionEmh+0x58>

    return 0;
 8022e36:	2300      	movs	r3, #0
}
 8022e38:	4618      	mov	r0, r3
 8022e3a:	3710      	adds	r7, #16
 8022e3c:	46bd      	mov	sp, r7
 8022e3e:	bd80      	pop	{r7, pc}

08022e40 <_ZN6Logger7LoadingEv>:

void Logger::Loading()
{
 8022e40:	b580      	push	{r7, lr}
 8022e42:	b084      	sub	sp, #16
 8022e44:	af00      	add	r7, sp, #0
 8022e46:	6078      	str	r0, [r7, #4]
    {
        target_velocity_ = 0.80;
        led_->ColorOrder('Y');
    }
    */
    uint8_t count = side_sensor_->GetCornerMarkerCount();
 8022e48:	687b      	ldr	r3, [r7, #4]
 8022e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022e4c:	4618      	mov	r0, r3
 8022e4e:	f002 fabc 	bl	80253ca <_ZN10SideSensor20GetCornerMarkerCountEv>
 8022e52:	4603      	mov	r3, r0
 8022e54:	73fb      	strb	r3, [r7, #15]

    switch(count)
 8022e56:	7bfb      	ldrb	r3, [r7, #15]
 8022e58:	2b06      	cmp	r3, #6
 8022e5a:	d822      	bhi.n	8022ea2 <_ZN6Logger7LoadingEv+0x62>
 8022e5c:	a201      	add	r2, pc, #4	; (adr r2, 8022e64 <_ZN6Logger7LoadingEv+0x24>)
 8022e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022e62:	bf00      	nop
 8022e64:	08022e81 	.word	0x08022e81
 8022e68:	08022ea3 	.word	0x08022ea3
 8022e6c:	08022e89 	.word	0x08022e89
 8022e70:	08022e91 	.word	0x08022e91
 8022e74:	08022ea3 	.word	0x08022ea3
 8022e78:	08022ea3 	.word	0x08022ea3
 8022e7c:	08022e9b 	.word	0x08022e9b
    {
        case 0: target_velocity_ = 0.9; break;
 8022e80:	687b      	ldr	r3, [r7, #4]
 8022e82:	4a0f      	ldr	r2, [pc, #60]	; (8022ec0 <_ZN6Logger7LoadingEv+0x80>)
 8022e84:	611a      	str	r2, [r3, #16]
 8022e86:	e011      	b.n	8022eac <_ZN6Logger7LoadingEv+0x6c>
        case 2: target_velocity_ = 0.9; break;
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	4a0d      	ldr	r2, [pc, #52]	; (8022ec0 <_ZN6Logger7LoadingEv+0x80>)
 8022e8c:	611a      	str	r2, [r3, #16]
 8022e8e:	e00d      	b.n	8022eac <_ZN6Logger7LoadingEv+0x6c>
        case 3: target_velocity_ = MIN_VELOCITY; break;
 8022e90:	687b      	ldr	r3, [r7, #4]
 8022e92:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8022e96:	611a      	str	r2, [r3, #16]
 8022e98:	e008      	b.n	8022eac <_ZN6Logger7LoadingEv+0x6c>
        case 6: target_velocity_ = 0.9; break;
 8022e9a:	687b      	ldr	r3, [r7, #4]
 8022e9c:	4a08      	ldr	r2, [pc, #32]	; (8022ec0 <_ZN6Logger7LoadingEv+0x80>)
 8022e9e:	611a      	str	r2, [r3, #16]
 8022ea0:	e004      	b.n	8022eac <_ZN6Logger7LoadingEv+0x6c>
        default:  target_velocity_ = MIN_VELOCITY; break;
 8022ea2:	687b      	ldr	r3, [r7, #4]
 8022ea4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8022ea8:	611a      	str	r2, [r3, #16]
 8022eaa:	bf00      	nop





    loading_now_address_++;
 8022eac:	687b      	ldr	r3, [r7, #4]
 8022eae:	891b      	ldrh	r3, [r3, #8]
 8022eb0:	3301      	adds	r3, #1
 8022eb2:	b29a      	uxth	r2, r3
 8022eb4:	687b      	ldr	r3, [r7, #4]
 8022eb6:	811a      	strh	r2, [r3, #8]
}
 8022eb8:	bf00      	nop
 8022eba:	3710      	adds	r7, #16
 8022ebc:	46bd      	mov	sp, r7
 8022ebe:	bd80      	pop	{r7, pc}
 8022ec0:	3f666666 	.word	0x3f666666

08022ec4 <_ZN6Logger17GetTargetVelocityEv>:
    target_velocity_ = target;
    pre_target = target;
}

float Logger::GetTargetVelocity()
{
 8022ec4:	b480      	push	{r7}
 8022ec6:	b083      	sub	sp, #12
 8022ec8:	af00      	add	r7, sp, #0
 8022eca:	6078      	str	r0, [r7, #4]
    return target_velocity_;
 8022ecc:	687b      	ldr	r3, [r7, #4]
 8022ece:	691b      	ldr	r3, [r3, #16]
 8022ed0:	ee07 3a90 	vmov	s15, r3
}
 8022ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8022ed8:	370c      	adds	r7, #12
 8022eda:	46bd      	mov	sp, r7
 8022edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ee0:	4770      	bx	lr
	...

08022ee4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8022ee4:	b580      	push	{r7, lr}
 8022ee6:	b082      	sub	sp, #8
 8022ee8:	af00      	add	r7, sp, #0
 8022eea:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8022eec:	687b      	ldr	r3, [r7, #4]
 8022eee:	681b      	ldr	r3, [r3, #0]
 8022ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022ef4:	d101      	bne.n	8022efa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 8022ef6:	f003 f981 	bl	80261fc <InterruptTim2>
  }
  if(htim->Instance == TIM6)
 8022efa:	687b      	ldr	r3, [r7, #4]
 8022efc:	681b      	ldr	r3, [r3, #0]
 8022efe:	4a08      	ldr	r2, [pc, #32]	; (8022f20 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8022f00:	4293      	cmp	r3, r2
 8022f02:	d101      	bne.n	8022f08 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim6();
 8022f04:	f003 f96a 	bl	80261dc <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 8022f08:	687b      	ldr	r3, [r7, #4]
 8022f0a:	681b      	ldr	r3, [r3, #0]
 8022f0c:	4a05      	ldr	r2, [pc, #20]	; (8022f24 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8022f0e:	4293      	cmp	r3, r2
 8022f10:	d101      	bne.n	8022f16 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim7();
 8022f12:	f003 f953 	bl	80261bc <InterruptTim7>
  }
}
 8022f16:	bf00      	nop
 8022f18:	3708      	adds	r7, #8
 8022f1a:	46bd      	mov	sp, r7
 8022f1c:	bd80      	pop	{r7, pc}
 8022f1e:	bf00      	nop
 8022f20:	40001000 	.word	0x40001000
 8022f24:	40001400 	.word	0x40001400

08022f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8022f28:	b580      	push	{r7, lr}
 8022f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8022f2c:	f003 fa16 	bl	802635c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8022f30:	f000 f822 	bl	8022f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8022f34:	f000 fd68 	bl	8023a08 <MX_GPIO_Init>
  MX_DMA_Init();
 8022f38:	f000 fd46 	bl	80239c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8022f3c:	f000 f886 	bl	802304c <MX_ADC1_Init>
  MX_I2C2_Init();
 8022f40:	f000 f98c 	bl	802325c <MX_I2C2_Init>
  MX_SPI3_Init();
 8022f44:	f000 f9b8 	bl	80232b8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8022f48:	f000 f9ec 	bl	8023324 <MX_TIM1_Init>
  MX_TIM3_Init();
 8022f4c:	f000 fac8 	bl	80234e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8022f50:	f000 fb40 	bl	80235d4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8022f54:	f000 fbe0 	bl	8023718 <MX_TIM6_Init>
  MX_TIM7_Init();
 8022f58:	f000 fc14 	bl	8023784 <MX_TIM7_Init>
  MX_TIM8_Init();
 8022f5c:	f000 fc48 	bl	80237f0 <MX_TIM8_Init>
  MX_TIM11_Init();
 8022f60:	f000 fc9e 	bl	80238a0 <MX_TIM11_Init>
  MX_TIM12_Init();
 8022f64:	f000 fcea 	bl	802393c <MX_TIM12_Init>
  MX_TIM2_Init();
 8022f68:	f000 fa6c 	bl	8023444 <MX_TIM2_Init>
  MX_TIM5_Init();
 8022f6c:	f000 fb86 	bl	802367c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8022f70:	f003 f91a 	bl	80261a8 <Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8022f74:	e7fe      	b.n	8022f74 <main+0x4c>
	...

08022f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8022f78:	b580      	push	{r7, lr}
 8022f7a:	b094      	sub	sp, #80	; 0x50
 8022f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8022f7e:	f107 0320 	add.w	r3, r7, #32
 8022f82:	2230      	movs	r2, #48	; 0x30
 8022f84:	2100      	movs	r1, #0
 8022f86:	4618      	mov	r0, r3
 8022f88:	f007 fad9 	bl	802a53e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8022f8c:	f107 030c 	add.w	r3, r7, #12
 8022f90:	2200      	movs	r2, #0
 8022f92:	601a      	str	r2, [r3, #0]
 8022f94:	605a      	str	r2, [r3, #4]
 8022f96:	609a      	str	r2, [r3, #8]
 8022f98:	60da      	str	r2, [r3, #12]
 8022f9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8022f9c:	2300      	movs	r3, #0
 8022f9e:	60bb      	str	r3, [r7, #8]
 8022fa0:	4b28      	ldr	r3, [pc, #160]	; (8023044 <SystemClock_Config+0xcc>)
 8022fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022fa4:	4a27      	ldr	r2, [pc, #156]	; (8023044 <SystemClock_Config+0xcc>)
 8022fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022faa:	6413      	str	r3, [r2, #64]	; 0x40
 8022fac:	4b25      	ldr	r3, [pc, #148]	; (8023044 <SystemClock_Config+0xcc>)
 8022fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022fb4:	60bb      	str	r3, [r7, #8]
 8022fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8022fb8:	2300      	movs	r3, #0
 8022fba:	607b      	str	r3, [r7, #4]
 8022fbc:	4b22      	ldr	r3, [pc, #136]	; (8023048 <SystemClock_Config+0xd0>)
 8022fbe:	681b      	ldr	r3, [r3, #0]
 8022fc0:	4a21      	ldr	r2, [pc, #132]	; (8023048 <SystemClock_Config+0xd0>)
 8022fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022fc6:	6013      	str	r3, [r2, #0]
 8022fc8:	4b1f      	ldr	r3, [pc, #124]	; (8023048 <SystemClock_Config+0xd0>)
 8022fca:	681b      	ldr	r3, [r3, #0]
 8022fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022fd0:	607b      	str	r3, [r7, #4]
 8022fd2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8022fd4:	2301      	movs	r3, #1
 8022fd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8022fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8022fdc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8022fde:	2302      	movs	r3, #2
 8022fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8022fe2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8022fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8022fe8:	2306      	movs	r3, #6
 8022fea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8022fec:	23a8      	movs	r3, #168	; 0xa8
 8022fee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8022ff0:	2302      	movs	r3, #2
 8022ff2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8022ff4:	2304      	movs	r3, #4
 8022ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8022ff8:	f107 0320 	add.w	r3, r7, #32
 8022ffc:	4618      	mov	r0, r3
 8022ffe:	f005 f88f 	bl	8028120 <HAL_RCC_OscConfig>
 8023002:	4603      	mov	r3, r0
 8023004:	2b00      	cmp	r3, #0
 8023006:	d001      	beq.n	802300c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8023008:	f000 fdce 	bl	8023ba8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802300c:	230f      	movs	r3, #15
 802300e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8023010:	2302      	movs	r3, #2
 8023012:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8023014:	2300      	movs	r3, #0
 8023016:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8023018:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802301c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 802301e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023022:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8023024:	f107 030c 	add.w	r3, r7, #12
 8023028:	2105      	movs	r1, #5
 802302a:	4618      	mov	r0, r3
 802302c:	f005 fae8 	bl	8028600 <HAL_RCC_ClockConfig>
 8023030:	4603      	mov	r3, r0
 8023032:	2b00      	cmp	r3, #0
 8023034:	d001      	beq.n	802303a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8023036:	f000 fdb7 	bl	8023ba8 <Error_Handler>
  }
}
 802303a:	bf00      	nop
 802303c:	3750      	adds	r7, #80	; 0x50
 802303e:	46bd      	mov	sp, r7
 8023040:	bd80      	pop	{r7, pc}
 8023042:	bf00      	nop
 8023044:	40023800 	.word	0x40023800
 8023048:	40007000 	.word	0x40007000

0802304c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 802304c:	b580      	push	{r7, lr}
 802304e:	b084      	sub	sp, #16
 8023050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8023052:	463b      	mov	r3, r7
 8023054:	2200      	movs	r2, #0
 8023056:	601a      	str	r2, [r3, #0]
 8023058:	605a      	str	r2, [r3, #4]
 802305a:	609a      	str	r2, [r3, #8]
 802305c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 802305e:	4b7c      	ldr	r3, [pc, #496]	; (8023250 <MX_ADC1_Init+0x204>)
 8023060:	4a7c      	ldr	r2, [pc, #496]	; (8023254 <MX_ADC1_Init+0x208>)
 8023062:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8023064:	4b7a      	ldr	r3, [pc, #488]	; (8023250 <MX_ADC1_Init+0x204>)
 8023066:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802306a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 802306c:	4b78      	ldr	r3, [pc, #480]	; (8023250 <MX_ADC1_Init+0x204>)
 802306e:	2200      	movs	r2, #0
 8023070:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8023072:	4b77      	ldr	r3, [pc, #476]	; (8023250 <MX_ADC1_Init+0x204>)
 8023074:	2201      	movs	r2, #1
 8023076:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8023078:	4b75      	ldr	r3, [pc, #468]	; (8023250 <MX_ADC1_Init+0x204>)
 802307a:	2201      	movs	r2, #1
 802307c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 802307e:	4b74      	ldr	r3, [pc, #464]	; (8023250 <MX_ADC1_Init+0x204>)
 8023080:	2200      	movs	r2, #0
 8023082:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8023086:	4b72      	ldr	r3, [pc, #456]	; (8023250 <MX_ADC1_Init+0x204>)
 8023088:	2200      	movs	r2, #0
 802308a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 802308c:	4b70      	ldr	r3, [pc, #448]	; (8023250 <MX_ADC1_Init+0x204>)
 802308e:	4a72      	ldr	r2, [pc, #456]	; (8023258 <MX_ADC1_Init+0x20c>)
 8023090:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8023092:	4b6f      	ldr	r3, [pc, #444]	; (8023250 <MX_ADC1_Init+0x204>)
 8023094:	2200      	movs	r2, #0
 8023096:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8023098:	4b6d      	ldr	r3, [pc, #436]	; (8023250 <MX_ADC1_Init+0x204>)
 802309a:	220e      	movs	r2, #14
 802309c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 802309e:	4b6c      	ldr	r3, [pc, #432]	; (8023250 <MX_ADC1_Init+0x204>)
 80230a0:	2201      	movs	r2, #1
 80230a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80230a6:	4b6a      	ldr	r3, [pc, #424]	; (8023250 <MX_ADC1_Init+0x204>)
 80230a8:	2201      	movs	r2, #1
 80230aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80230ac:	4868      	ldr	r0, [pc, #416]	; (8023250 <MX_ADC1_Init+0x204>)
 80230ae:	f003 f9e9 	bl	8026484 <HAL_ADC_Init>
 80230b2:	4603      	mov	r3, r0
 80230b4:	2b00      	cmp	r3, #0
 80230b6:	d001      	beq.n	80230bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80230b8:	f000 fd76 	bl	8023ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80230bc:	2303      	movs	r3, #3
 80230be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80230c0:	2301      	movs	r3, #1
 80230c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80230c4:	2301      	movs	r3, #1
 80230c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80230c8:	463b      	mov	r3, r7
 80230ca:	4619      	mov	r1, r3
 80230cc:	4860      	ldr	r0, [pc, #384]	; (8023250 <MX_ADC1_Init+0x204>)
 80230ce:	f003 fb2d 	bl	802672c <HAL_ADC_ConfigChannel>
 80230d2:	4603      	mov	r3, r0
 80230d4:	2b00      	cmp	r3, #0
 80230d6:	d001      	beq.n	80230dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80230d8:	f000 fd66 	bl	8023ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80230dc:	2304      	movs	r3, #4
 80230de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80230e0:	2302      	movs	r3, #2
 80230e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80230e4:	463b      	mov	r3, r7
 80230e6:	4619      	mov	r1, r3
 80230e8:	4859      	ldr	r0, [pc, #356]	; (8023250 <MX_ADC1_Init+0x204>)
 80230ea:	f003 fb1f 	bl	802672c <HAL_ADC_ConfigChannel>
 80230ee:	4603      	mov	r3, r0
 80230f0:	2b00      	cmp	r3, #0
 80230f2:	d001      	beq.n	80230f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80230f4:	f000 fd58 	bl	8023ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80230f8:	2305      	movs	r3, #5
 80230fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80230fc:	2303      	movs	r3, #3
 80230fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023100:	463b      	mov	r3, r7
 8023102:	4619      	mov	r1, r3
 8023104:	4852      	ldr	r0, [pc, #328]	; (8023250 <MX_ADC1_Init+0x204>)
 8023106:	f003 fb11 	bl	802672c <HAL_ADC_ConfigChannel>
 802310a:	4603      	mov	r3, r0
 802310c:	2b00      	cmp	r3, #0
 802310e:	d001      	beq.n	8023114 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8023110:	f000 fd4a 	bl	8023ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8023114:	2306      	movs	r3, #6
 8023116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8023118:	2304      	movs	r3, #4
 802311a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802311c:	463b      	mov	r3, r7
 802311e:	4619      	mov	r1, r3
 8023120:	484b      	ldr	r0, [pc, #300]	; (8023250 <MX_ADC1_Init+0x204>)
 8023122:	f003 fb03 	bl	802672c <HAL_ADC_ConfigChannel>
 8023126:	4603      	mov	r3, r0
 8023128:	2b00      	cmp	r3, #0
 802312a:	d001      	beq.n	8023130 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 802312c:	f000 fd3c 	bl	8023ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8023130:	2307      	movs	r3, #7
 8023132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8023134:	2305      	movs	r3, #5
 8023136:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023138:	463b      	mov	r3, r7
 802313a:	4619      	mov	r1, r3
 802313c:	4844      	ldr	r0, [pc, #272]	; (8023250 <MX_ADC1_Init+0x204>)
 802313e:	f003 faf5 	bl	802672c <HAL_ADC_ConfigChannel>
 8023142:	4603      	mov	r3, r0
 8023144:	2b00      	cmp	r3, #0
 8023146:	d001      	beq.n	802314c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8023148:	f000 fd2e 	bl	8023ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 802314c:	230e      	movs	r3, #14
 802314e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8023150:	2306      	movs	r3, #6
 8023152:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023154:	463b      	mov	r3, r7
 8023156:	4619      	mov	r1, r3
 8023158:	483d      	ldr	r0, [pc, #244]	; (8023250 <MX_ADC1_Init+0x204>)
 802315a:	f003 fae7 	bl	802672c <HAL_ADC_ConfigChannel>
 802315e:	4603      	mov	r3, r0
 8023160:	2b00      	cmp	r3, #0
 8023162:	d001      	beq.n	8023168 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8023164:	f000 fd20 	bl	8023ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8023168:	230f      	movs	r3, #15
 802316a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 802316c:	2307      	movs	r3, #7
 802316e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023170:	463b      	mov	r3, r7
 8023172:	4619      	mov	r1, r3
 8023174:	4836      	ldr	r0, [pc, #216]	; (8023250 <MX_ADC1_Init+0x204>)
 8023176:	f003 fad9 	bl	802672c <HAL_ADC_ConfigChannel>
 802317a:	4603      	mov	r3, r0
 802317c:	2b00      	cmp	r3, #0
 802317e:	d001      	beq.n	8023184 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8023180:	f000 fd12 	bl	8023ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8023184:	230a      	movs	r3, #10
 8023186:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8023188:	2308      	movs	r3, #8
 802318a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802318c:	463b      	mov	r3, r7
 802318e:	4619      	mov	r1, r3
 8023190:	482f      	ldr	r0, [pc, #188]	; (8023250 <MX_ADC1_Init+0x204>)
 8023192:	f003 facb 	bl	802672c <HAL_ADC_ConfigChannel>
 8023196:	4603      	mov	r3, r0
 8023198:	2b00      	cmp	r3, #0
 802319a:	d001      	beq.n	80231a0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 802319c:	f000 fd04 	bl	8023ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80231a0:	230b      	movs	r3, #11
 80231a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80231a4:	2309      	movs	r3, #9
 80231a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80231a8:	463b      	mov	r3, r7
 80231aa:	4619      	mov	r1, r3
 80231ac:	4828      	ldr	r0, [pc, #160]	; (8023250 <MX_ADC1_Init+0x204>)
 80231ae:	f003 fabd 	bl	802672c <HAL_ADC_ConfigChannel>
 80231b2:	4603      	mov	r3, r0
 80231b4:	2b00      	cmp	r3, #0
 80231b6:	d001      	beq.n	80231bc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80231b8:	f000 fcf6 	bl	8023ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80231bc:	230c      	movs	r3, #12
 80231be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80231c0:	230a      	movs	r3, #10
 80231c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80231c4:	463b      	mov	r3, r7
 80231c6:	4619      	mov	r1, r3
 80231c8:	4821      	ldr	r0, [pc, #132]	; (8023250 <MX_ADC1_Init+0x204>)
 80231ca:	f003 faaf 	bl	802672c <HAL_ADC_ConfigChannel>
 80231ce:	4603      	mov	r3, r0
 80231d0:	2b00      	cmp	r3, #0
 80231d2:	d001      	beq.n	80231d8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80231d4:	f000 fce8 	bl	8023ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80231d8:	230d      	movs	r3, #13
 80231da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80231dc:	230b      	movs	r3, #11
 80231de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80231e0:	463b      	mov	r3, r7
 80231e2:	4619      	mov	r1, r3
 80231e4:	481a      	ldr	r0, [pc, #104]	; (8023250 <MX_ADC1_Init+0x204>)
 80231e6:	f003 faa1 	bl	802672c <HAL_ADC_ConfigChannel>
 80231ea:	4603      	mov	r3, r0
 80231ec:	2b00      	cmp	r3, #0
 80231ee:	d001      	beq.n	80231f4 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80231f0:	f000 fcda 	bl	8023ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80231f4:	2302      	movs	r3, #2
 80231f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80231f8:	230c      	movs	r3, #12
 80231fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80231fc:	463b      	mov	r3, r7
 80231fe:	4619      	mov	r1, r3
 8023200:	4813      	ldr	r0, [pc, #76]	; (8023250 <MX_ADC1_Init+0x204>)
 8023202:	f003 fa93 	bl	802672c <HAL_ADC_ConfigChannel>
 8023206:	4603      	mov	r3, r0
 8023208:	2b00      	cmp	r3, #0
 802320a:	d001      	beq.n	8023210 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 802320c:	f000 fccc 	bl	8023ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8023210:	2301      	movs	r3, #1
 8023212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8023214:	230d      	movs	r3, #13
 8023216:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023218:	463b      	mov	r3, r7
 802321a:	4619      	mov	r1, r3
 802321c:	480c      	ldr	r0, [pc, #48]	; (8023250 <MX_ADC1_Init+0x204>)
 802321e:	f003 fa85 	bl	802672c <HAL_ADC_ConfigChannel>
 8023222:	4603      	mov	r3, r0
 8023224:	2b00      	cmp	r3, #0
 8023226:	d001      	beq.n	802322c <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8023228:	f000 fcbe 	bl	8023ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 802322c:	2300      	movs	r3, #0
 802322e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8023230:	230e      	movs	r3, #14
 8023232:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023234:	463b      	mov	r3, r7
 8023236:	4619      	mov	r1, r3
 8023238:	4805      	ldr	r0, [pc, #20]	; (8023250 <MX_ADC1_Init+0x204>)
 802323a:	f003 fa77 	bl	802672c <HAL_ADC_ConfigChannel>
 802323e:	4603      	mov	r3, r0
 8023240:	2b00      	cmp	r3, #0
 8023242:	d001      	beq.n	8023248 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8023244:	f000 fcb0 	bl	8023ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8023248:	bf00      	nop
 802324a:	3710      	adds	r7, #16
 802324c:	46bd      	mov	sp, r7
 802324e:	bd80      	pop	{r7, pc}
 8023250:	20014370 	.word	0x20014370
 8023254:	40012000 	.word	0x40012000
 8023258:	0f000001 	.word	0x0f000001

0802325c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 802325c:	b580      	push	{r7, lr}
 802325e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8023260:	4b12      	ldr	r3, [pc, #72]	; (80232ac <MX_I2C2_Init+0x50>)
 8023262:	4a13      	ldr	r2, [pc, #76]	; (80232b0 <MX_I2C2_Init+0x54>)
 8023264:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8023266:	4b11      	ldr	r3, [pc, #68]	; (80232ac <MX_I2C2_Init+0x50>)
 8023268:	4a12      	ldr	r2, [pc, #72]	; (80232b4 <MX_I2C2_Init+0x58>)
 802326a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 802326c:	4b0f      	ldr	r3, [pc, #60]	; (80232ac <MX_I2C2_Init+0x50>)
 802326e:	2200      	movs	r2, #0
 8023270:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8023272:	4b0e      	ldr	r3, [pc, #56]	; (80232ac <MX_I2C2_Init+0x50>)
 8023274:	2200      	movs	r2, #0
 8023276:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8023278:	4b0c      	ldr	r3, [pc, #48]	; (80232ac <MX_I2C2_Init+0x50>)
 802327a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802327e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8023280:	4b0a      	ldr	r3, [pc, #40]	; (80232ac <MX_I2C2_Init+0x50>)
 8023282:	2200      	movs	r2, #0
 8023284:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8023286:	4b09      	ldr	r3, [pc, #36]	; (80232ac <MX_I2C2_Init+0x50>)
 8023288:	2200      	movs	r2, #0
 802328a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802328c:	4b07      	ldr	r3, [pc, #28]	; (80232ac <MX_I2C2_Init+0x50>)
 802328e:	2200      	movs	r2, #0
 8023290:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8023292:	4b06      	ldr	r3, [pc, #24]	; (80232ac <MX_I2C2_Init+0x50>)
 8023294:	2200      	movs	r2, #0
 8023296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8023298:	4804      	ldr	r0, [pc, #16]	; (80232ac <MX_I2C2_Init+0x50>)
 802329a:	f004 fe09 	bl	8027eb0 <HAL_I2C_Init>
 802329e:	4603      	mov	r3, r0
 80232a0:	2b00      	cmp	r3, #0
 80232a2:	d001      	beq.n	80232a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80232a4:	f000 fc80 	bl	8023ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80232a8:	bf00      	nop
 80232aa:	bd80      	pop	{r7, pc}
 80232ac:	200111d4 	.word	0x200111d4
 80232b0:	40005800 	.word	0x40005800
 80232b4:	000186a0 	.word	0x000186a0

080232b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80232b8:	b580      	push	{r7, lr}
 80232ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80232bc:	4b17      	ldr	r3, [pc, #92]	; (802331c <MX_SPI3_Init+0x64>)
 80232be:	4a18      	ldr	r2, [pc, #96]	; (8023320 <MX_SPI3_Init+0x68>)
 80232c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80232c2:	4b16      	ldr	r3, [pc, #88]	; (802331c <MX_SPI3_Init+0x64>)
 80232c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80232c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80232ca:	4b14      	ldr	r3, [pc, #80]	; (802331c <MX_SPI3_Init+0x64>)
 80232cc:	2200      	movs	r2, #0
 80232ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80232d0:	4b12      	ldr	r3, [pc, #72]	; (802331c <MX_SPI3_Init+0x64>)
 80232d2:	2200      	movs	r2, #0
 80232d4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80232d6:	4b11      	ldr	r3, [pc, #68]	; (802331c <MX_SPI3_Init+0x64>)
 80232d8:	2200      	movs	r2, #0
 80232da:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80232dc:	4b0f      	ldr	r3, [pc, #60]	; (802331c <MX_SPI3_Init+0x64>)
 80232de:	2200      	movs	r2, #0
 80232e0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80232e2:	4b0e      	ldr	r3, [pc, #56]	; (802331c <MX_SPI3_Init+0x64>)
 80232e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80232e8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80232ea:	4b0c      	ldr	r3, [pc, #48]	; (802331c <MX_SPI3_Init+0x64>)
 80232ec:	2238      	movs	r2, #56	; 0x38
 80232ee:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80232f0:	4b0a      	ldr	r3, [pc, #40]	; (802331c <MX_SPI3_Init+0x64>)
 80232f2:	2200      	movs	r2, #0
 80232f4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80232f6:	4b09      	ldr	r3, [pc, #36]	; (802331c <MX_SPI3_Init+0x64>)
 80232f8:	2200      	movs	r2, #0
 80232fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80232fc:	4b07      	ldr	r3, [pc, #28]	; (802331c <MX_SPI3_Init+0x64>)
 80232fe:	2200      	movs	r2, #0
 8023300:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8023302:	4b06      	ldr	r3, [pc, #24]	; (802331c <MX_SPI3_Init+0x64>)
 8023304:	220a      	movs	r2, #10
 8023306:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8023308:	4804      	ldr	r0, [pc, #16]	; (802331c <MX_SPI3_Init+0x64>)
 802330a:	f005 fb31 	bl	8028970 <HAL_SPI_Init>
 802330e:	4603      	mov	r3, r0
 8023310:	2b00      	cmp	r3, #0
 8023312:	d001      	beq.n	8023318 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8023314:	f000 fc48 	bl	8023ba8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8023318:	bf00      	nop
 802331a:	bd80      	pop	{r7, pc}
 802331c:	20014318 	.word	0x20014318
 8023320:	40003c00 	.word	0x40003c00

08023324 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8023324:	b580      	push	{r7, lr}
 8023326:	b092      	sub	sp, #72	; 0x48
 8023328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802332a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802332e:	2200      	movs	r2, #0
 8023330:	601a      	str	r2, [r3, #0]
 8023332:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023338:	2200      	movs	r2, #0
 802333a:	601a      	str	r2, [r3, #0]
 802333c:	605a      	str	r2, [r3, #4]
 802333e:	609a      	str	r2, [r3, #8]
 8023340:	60da      	str	r2, [r3, #12]
 8023342:	611a      	str	r2, [r3, #16]
 8023344:	615a      	str	r2, [r3, #20]
 8023346:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8023348:	1d3b      	adds	r3, r7, #4
 802334a:	2220      	movs	r2, #32
 802334c:	2100      	movs	r1, #0
 802334e:	4618      	mov	r0, r3
 8023350:	f007 f8f5 	bl	802a53e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8023354:	4b39      	ldr	r3, [pc, #228]	; (802343c <MX_TIM1_Init+0x118>)
 8023356:	4a3a      	ldr	r2, [pc, #232]	; (8023440 <MX_TIM1_Init+0x11c>)
 8023358:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 802335a:	4b38      	ldr	r3, [pc, #224]	; (802343c <MX_TIM1_Init+0x118>)
 802335c:	2201      	movs	r2, #1
 802335e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023360:	4b36      	ldr	r3, [pc, #216]	; (802343c <MX_TIM1_Init+0x118>)
 8023362:	2200      	movs	r2, #0
 8023364:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 8023366:	4b35      	ldr	r3, [pc, #212]	; (802343c <MX_TIM1_Init+0x118>)
 8023368:	f240 4219 	movw	r2, #1049	; 0x419
 802336c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802336e:	4b33      	ldr	r3, [pc, #204]	; (802343c <MX_TIM1_Init+0x118>)
 8023370:	2200      	movs	r2, #0
 8023372:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8023374:	4b31      	ldr	r3, [pc, #196]	; (802343c <MX_TIM1_Init+0x118>)
 8023376:	2200      	movs	r2, #0
 8023378:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802337a:	4b30      	ldr	r3, [pc, #192]	; (802343c <MX_TIM1_Init+0x118>)
 802337c:	2200      	movs	r2, #0
 802337e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8023380:	482e      	ldr	r0, [pc, #184]	; (802343c <MX_TIM1_Init+0x118>)
 8023382:	f006 f8c3 	bl	802950c <HAL_TIM_PWM_Init>
 8023386:	4603      	mov	r3, r0
 8023388:	2b00      	cmp	r3, #0
 802338a:	d001      	beq.n	8023390 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 802338c:	f000 fc0c 	bl	8023ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023390:	2300      	movs	r3, #0
 8023392:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023394:	2300      	movs	r3, #0
 8023396:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8023398:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802339c:	4619      	mov	r1, r3
 802339e:	4827      	ldr	r0, [pc, #156]	; (802343c <MX_TIM1_Init+0x118>)
 80233a0:	f006 ffa6 	bl	802a2f0 <HAL_TIMEx_MasterConfigSynchronization>
 80233a4:	4603      	mov	r3, r0
 80233a6:	2b00      	cmp	r3, #0
 80233a8:	d001      	beq.n	80233ae <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80233aa:	f000 fbfd 	bl	8023ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80233ae:	2360      	movs	r3, #96	; 0x60
 80233b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80233b2:	2300      	movs	r3, #0
 80233b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80233b6:	2300      	movs	r3, #0
 80233b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80233ba:	2300      	movs	r3, #0
 80233bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80233be:	2300      	movs	r3, #0
 80233c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80233c2:	2300      	movs	r3, #0
 80233c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80233c6:	2300      	movs	r3, #0
 80233c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80233ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80233ce:	2204      	movs	r2, #4
 80233d0:	4619      	mov	r1, r3
 80233d2:	481a      	ldr	r0, [pc, #104]	; (802343c <MX_TIM1_Init+0x118>)
 80233d4:	f006 fad6 	bl	8029984 <HAL_TIM_PWM_ConfigChannel>
 80233d8:	4603      	mov	r3, r0
 80233da:	2b00      	cmp	r3, #0
 80233dc:	d001      	beq.n	80233e2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80233de:	f000 fbe3 	bl	8023ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80233e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80233e6:	220c      	movs	r2, #12
 80233e8:	4619      	mov	r1, r3
 80233ea:	4814      	ldr	r0, [pc, #80]	; (802343c <MX_TIM1_Init+0x118>)
 80233ec:	f006 faca 	bl	8029984 <HAL_TIM_PWM_ConfigChannel>
 80233f0:	4603      	mov	r3, r0
 80233f2:	2b00      	cmp	r3, #0
 80233f4:	d001      	beq.n	80233fa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80233f6:	f000 fbd7 	bl	8023ba8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80233fa:	2300      	movs	r3, #0
 80233fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80233fe:	2300      	movs	r3, #0
 8023400:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8023402:	2300      	movs	r3, #0
 8023404:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8023406:	2300      	movs	r3, #0
 8023408:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 802340a:	2300      	movs	r3, #0
 802340c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 802340e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8023412:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8023414:	2300      	movs	r3, #0
 8023416:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8023418:	1d3b      	adds	r3, r7, #4
 802341a:	4619      	mov	r1, r3
 802341c:	4807      	ldr	r0, [pc, #28]	; (802343c <MX_TIM1_Init+0x118>)
 802341e:	f006 ffe3 	bl	802a3e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8023422:	4603      	mov	r3, r0
 8023424:	2b00      	cmp	r3, #0
 8023426:	d001      	beq.n	802342c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8023428:	f000 fbbe 	bl	8023ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 802342c:	4803      	ldr	r0, [pc, #12]	; (802343c <MX_TIM1_Init+0x118>)
 802342e:	f002 fb31 	bl	8025a94 <HAL_TIM_MspPostInit>

}
 8023432:	bf00      	nop
 8023434:	3748      	adds	r7, #72	; 0x48
 8023436:	46bd      	mov	sp, r7
 8023438:	bd80      	pop	{r7, pc}
 802343a:	bf00      	nop
 802343c:	20017508 	.word	0x20017508
 8023440:	40010000 	.word	0x40010000

08023444 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8023444:	b580      	push	{r7, lr}
 8023446:	b086      	sub	sp, #24
 8023448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802344a:	f107 0308 	add.w	r3, r7, #8
 802344e:	2200      	movs	r2, #0
 8023450:	601a      	str	r2, [r3, #0]
 8023452:	605a      	str	r2, [r3, #4]
 8023454:	609a      	str	r2, [r3, #8]
 8023456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023458:	463b      	mov	r3, r7
 802345a:	2200      	movs	r2, #0
 802345c:	601a      	str	r2, [r3, #0]
 802345e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8023460:	4b1d      	ldr	r3, [pc, #116]	; (80234d8 <MX_TIM2_Init+0x94>)
 8023462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023466:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8023468:	4b1b      	ldr	r3, [pc, #108]	; (80234d8 <MX_TIM2_Init+0x94>)
 802346a:	2204      	movs	r2, #4
 802346c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 802346e:	4b1a      	ldr	r3, [pc, #104]	; (80234d8 <MX_TIM2_Init+0x94>)
 8023470:	2200      	movs	r2, #0
 8023472:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 8023474:	4b18      	ldr	r3, [pc, #96]	; (80234d8 <MX_TIM2_Init+0x94>)
 8023476:	4a19      	ldr	r2, [pc, #100]	; (80234dc <MX_TIM2_Init+0x98>)
 8023478:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802347a:	4b17      	ldr	r3, [pc, #92]	; (80234d8 <MX_TIM2_Init+0x94>)
 802347c:	2200      	movs	r2, #0
 802347e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023480:	4b15      	ldr	r3, [pc, #84]	; (80234d8 <MX_TIM2_Init+0x94>)
 8023482:	2200      	movs	r2, #0
 8023484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8023486:	4814      	ldr	r0, [pc, #80]	; (80234d8 <MX_TIM2_Init+0x94>)
 8023488:	f005 ffc6 	bl	8029418 <HAL_TIM_Base_Init>
 802348c:	4603      	mov	r3, r0
 802348e:	2b00      	cmp	r3, #0
 8023490:	d001      	beq.n	8023496 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8023492:	f000 fb89 	bl	8023ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8023496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802349a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 802349c:	f107 0308 	add.w	r3, r7, #8
 80234a0:	4619      	mov	r1, r3
 80234a2:	480d      	ldr	r0, [pc, #52]	; (80234d8 <MX_TIM2_Init+0x94>)
 80234a4:	f006 fb34 	bl	8029b10 <HAL_TIM_ConfigClockSource>
 80234a8:	4603      	mov	r3, r0
 80234aa:	2b00      	cmp	r3, #0
 80234ac:	d001      	beq.n	80234b2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80234ae:	f000 fb7b 	bl	8023ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80234b2:	2300      	movs	r3, #0
 80234b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80234b6:	2300      	movs	r3, #0
 80234b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80234ba:	463b      	mov	r3, r7
 80234bc:	4619      	mov	r1, r3
 80234be:	4806      	ldr	r0, [pc, #24]	; (80234d8 <MX_TIM2_Init+0x94>)
 80234c0:	f006 ff16 	bl	802a2f0 <HAL_TIMEx_MasterConfigSynchronization>
 80234c4:	4603      	mov	r3, r0
 80234c6:	2b00      	cmp	r3, #0
 80234c8:	d001      	beq.n	80234ce <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80234ca:	f000 fb6d 	bl	8023ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80234ce:	bf00      	nop
 80234d0:	3718      	adds	r7, #24
 80234d2:	46bd      	mov	sp, r7
 80234d4:	bd80      	pop	{r7, pc}
 80234d6:	bf00      	nop
 80234d8:	20017548 	.word	0x20017548
 80234dc:	00019a27 	.word	0x00019a27

080234e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80234e0:	b580      	push	{r7, lr}
 80234e2:	b08a      	sub	sp, #40	; 0x28
 80234e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80234e6:	f107 0320 	add.w	r3, r7, #32
 80234ea:	2200      	movs	r2, #0
 80234ec:	601a      	str	r2, [r3, #0]
 80234ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80234f0:	1d3b      	adds	r3, r7, #4
 80234f2:	2200      	movs	r2, #0
 80234f4:	601a      	str	r2, [r3, #0]
 80234f6:	605a      	str	r2, [r3, #4]
 80234f8:	609a      	str	r2, [r3, #8]
 80234fa:	60da      	str	r2, [r3, #12]
 80234fc:	611a      	str	r2, [r3, #16]
 80234fe:	615a      	str	r2, [r3, #20]
 8023500:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8023502:	4b32      	ldr	r3, [pc, #200]	; (80235cc <MX_TIM3_Init+0xec>)
 8023504:	4a32      	ldr	r2, [pc, #200]	; (80235d0 <MX_TIM3_Init+0xf0>)
 8023506:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8023508:	4b30      	ldr	r3, [pc, #192]	; (80235cc <MX_TIM3_Init+0xec>)
 802350a:	2200      	movs	r2, #0
 802350c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802350e:	4b2f      	ldr	r3, [pc, #188]	; (80235cc <MX_TIM3_Init+0xec>)
 8023510:	2200      	movs	r2, #0
 8023512:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8023514:	4b2d      	ldr	r3, [pc, #180]	; (80235cc <MX_TIM3_Init+0xec>)
 8023516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802351a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802351c:	4b2b      	ldr	r3, [pc, #172]	; (80235cc <MX_TIM3_Init+0xec>)
 802351e:	2200      	movs	r2, #0
 8023520:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023522:	4b2a      	ldr	r3, [pc, #168]	; (80235cc <MX_TIM3_Init+0xec>)
 8023524:	2200      	movs	r2, #0
 8023526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8023528:	4828      	ldr	r0, [pc, #160]	; (80235cc <MX_TIM3_Init+0xec>)
 802352a:	f005 ffef 	bl	802950c <HAL_TIM_PWM_Init>
 802352e:	4603      	mov	r3, r0
 8023530:	2b00      	cmp	r3, #0
 8023532:	d001      	beq.n	8023538 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8023534:	f000 fb38 	bl	8023ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023538:	2300      	movs	r3, #0
 802353a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802353c:	2300      	movs	r3, #0
 802353e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8023540:	f107 0320 	add.w	r3, r7, #32
 8023544:	4619      	mov	r1, r3
 8023546:	4821      	ldr	r0, [pc, #132]	; (80235cc <MX_TIM3_Init+0xec>)
 8023548:	f006 fed2 	bl	802a2f0 <HAL_TIMEx_MasterConfigSynchronization>
 802354c:	4603      	mov	r3, r0
 802354e:	2b00      	cmp	r3, #0
 8023550:	d001      	beq.n	8023556 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8023552:	f000 fb29 	bl	8023ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023556:	2360      	movs	r3, #96	; 0x60
 8023558:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 802355a:	2300      	movs	r3, #0
 802355c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802355e:	2300      	movs	r3, #0
 8023560:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023562:	2300      	movs	r3, #0
 8023564:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023566:	1d3b      	adds	r3, r7, #4
 8023568:	2200      	movs	r2, #0
 802356a:	4619      	mov	r1, r3
 802356c:	4817      	ldr	r0, [pc, #92]	; (80235cc <MX_TIM3_Init+0xec>)
 802356e:	f006 fa09 	bl	8029984 <HAL_TIM_PWM_ConfigChannel>
 8023572:	4603      	mov	r3, r0
 8023574:	2b00      	cmp	r3, #0
 8023576:	d001      	beq.n	802357c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8023578:	f000 fb16 	bl	8023ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 802357c:	1d3b      	adds	r3, r7, #4
 802357e:	2204      	movs	r2, #4
 8023580:	4619      	mov	r1, r3
 8023582:	4812      	ldr	r0, [pc, #72]	; (80235cc <MX_TIM3_Init+0xec>)
 8023584:	f006 f9fe 	bl	8029984 <HAL_TIM_PWM_ConfigChannel>
 8023588:	4603      	mov	r3, r0
 802358a:	2b00      	cmp	r3, #0
 802358c:	d001      	beq.n	8023592 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 802358e:	f000 fb0b 	bl	8023ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8023592:	1d3b      	adds	r3, r7, #4
 8023594:	2208      	movs	r2, #8
 8023596:	4619      	mov	r1, r3
 8023598:	480c      	ldr	r0, [pc, #48]	; (80235cc <MX_TIM3_Init+0xec>)
 802359a:	f006 f9f3 	bl	8029984 <HAL_TIM_PWM_ConfigChannel>
 802359e:	4603      	mov	r3, r0
 80235a0:	2b00      	cmp	r3, #0
 80235a2:	d001      	beq.n	80235a8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80235a4:	f000 fb00 	bl	8023ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80235a8:	1d3b      	adds	r3, r7, #4
 80235aa:	220c      	movs	r2, #12
 80235ac:	4619      	mov	r1, r3
 80235ae:	4807      	ldr	r0, [pc, #28]	; (80235cc <MX_TIM3_Init+0xec>)
 80235b0:	f006 f9e8 	bl	8029984 <HAL_TIM_PWM_ConfigChannel>
 80235b4:	4603      	mov	r3, r0
 80235b6:	2b00      	cmp	r3, #0
 80235b8:	d001      	beq.n	80235be <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80235ba:	f000 faf5 	bl	8023ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80235be:	4803      	ldr	r0, [pc, #12]	; (80235cc <MX_TIM3_Init+0xec>)
 80235c0:	f002 fa68 	bl	8025a94 <HAL_TIM_MspPostInit>

}
 80235c4:	bf00      	nop
 80235c6:	3728      	adds	r7, #40	; 0x28
 80235c8:	46bd      	mov	sp, r7
 80235ca:	bd80      	pop	{r7, pc}
 80235cc:	200142d8 	.word	0x200142d8
 80235d0:	40000400 	.word	0x40000400

080235d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80235d4:	b580      	push	{r7, lr}
 80235d6:	b08c      	sub	sp, #48	; 0x30
 80235d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80235da:	f107 030c 	add.w	r3, r7, #12
 80235de:	2224      	movs	r2, #36	; 0x24
 80235e0:	2100      	movs	r1, #0
 80235e2:	4618      	mov	r0, r3
 80235e4:	f006 ffab 	bl	802a53e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80235e8:	1d3b      	adds	r3, r7, #4
 80235ea:	2200      	movs	r2, #0
 80235ec:	601a      	str	r2, [r3, #0]
 80235ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80235f0:	4b20      	ldr	r3, [pc, #128]	; (8023674 <MX_TIM4_Init+0xa0>)
 80235f2:	4a21      	ldr	r2, [pc, #132]	; (8023678 <MX_TIM4_Init+0xa4>)
 80235f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80235f6:	4b1f      	ldr	r3, [pc, #124]	; (8023674 <MX_TIM4_Init+0xa0>)
 80235f8:	2200      	movs	r2, #0
 80235fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80235fc:	4b1d      	ldr	r3, [pc, #116]	; (8023674 <MX_TIM4_Init+0xa0>)
 80235fe:	2200      	movs	r2, #0
 8023600:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8023602:	4b1c      	ldr	r3, [pc, #112]	; (8023674 <MX_TIM4_Init+0xa0>)
 8023604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023608:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802360a:	4b1a      	ldr	r3, [pc, #104]	; (8023674 <MX_TIM4_Init+0xa0>)
 802360c:	2200      	movs	r2, #0
 802360e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023610:	4b18      	ldr	r3, [pc, #96]	; (8023674 <MX_TIM4_Init+0xa0>)
 8023612:	2200      	movs	r2, #0
 8023614:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8023616:	2303      	movs	r3, #3
 8023618:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 802361a:	2300      	movs	r3, #0
 802361c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 802361e:	2301      	movs	r3, #1
 8023620:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8023622:	2300      	movs	r3, #0
 8023624:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8023626:	2300      	movs	r3, #0
 8023628:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 802362a:	2300      	movs	r3, #0
 802362c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 802362e:	2301      	movs	r3, #1
 8023630:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8023632:	2300      	movs	r3, #0
 8023634:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8023636:	2300      	movs	r3, #0
 8023638:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 802363a:	f107 030c 	add.w	r3, r7, #12
 802363e:	4619      	mov	r1, r3
 8023640:	480c      	ldr	r0, [pc, #48]	; (8023674 <MX_TIM4_Init+0xa0>)
 8023642:	f005 ffcd 	bl	80295e0 <HAL_TIM_Encoder_Init>
 8023646:	4603      	mov	r3, r0
 8023648:	2b00      	cmp	r3, #0
 802364a:	d001      	beq.n	8023650 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 802364c:	f000 faac 	bl	8023ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023650:	2300      	movs	r3, #0
 8023652:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023654:	2300      	movs	r3, #0
 8023656:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8023658:	1d3b      	adds	r3, r7, #4
 802365a:	4619      	mov	r1, r3
 802365c:	4805      	ldr	r0, [pc, #20]	; (8023674 <MX_TIM4_Init+0xa0>)
 802365e:	f006 fe47 	bl	802a2f0 <HAL_TIMEx_MasterConfigSynchronization>
 8023662:	4603      	mov	r3, r0
 8023664:	2b00      	cmp	r3, #0
 8023666:	d001      	beq.n	802366c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8023668:	f000 fa9e 	bl	8023ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 802366c:	bf00      	nop
 802366e:	3730      	adds	r7, #48	; 0x30
 8023670:	46bd      	mov	sp, r7
 8023672:	bd80      	pop	{r7, pc}
 8023674:	20011194 	.word	0x20011194
 8023678:	40000800 	.word	0x40000800

0802367c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 802367c:	b580      	push	{r7, lr}
 802367e:	b086      	sub	sp, #24
 8023680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8023682:	f107 0308 	add.w	r3, r7, #8
 8023686:	2200      	movs	r2, #0
 8023688:	601a      	str	r2, [r3, #0]
 802368a:	605a      	str	r2, [r3, #4]
 802368c:	609a      	str	r2, [r3, #8]
 802368e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023690:	463b      	mov	r3, r7
 8023692:	2200      	movs	r2, #0
 8023694:	601a      	str	r2, [r3, #0]
 8023696:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8023698:	4b1d      	ldr	r3, [pc, #116]	; (8023710 <MX_TIM5_Init+0x94>)
 802369a:	4a1e      	ldr	r2, [pc, #120]	; (8023714 <MX_TIM5_Init+0x98>)
 802369c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 802369e:	4b1c      	ldr	r3, [pc, #112]	; (8023710 <MX_TIM5_Init+0x94>)
 80236a0:	2204      	movs	r2, #4
 80236a2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80236a4:	4b1a      	ldr	r3, [pc, #104]	; (8023710 <MX_TIM5_Init+0x94>)
 80236a6:	2200      	movs	r2, #0
 80236a8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 80236aa:	4b19      	ldr	r3, [pc, #100]	; (8023710 <MX_TIM5_Init+0x94>)
 80236ac:	f245 2207 	movw	r2, #20999	; 0x5207
 80236b0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80236b2:	4b17      	ldr	r3, [pc, #92]	; (8023710 <MX_TIM5_Init+0x94>)
 80236b4:	2200      	movs	r2, #0
 80236b6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80236b8:	4b15      	ldr	r3, [pc, #84]	; (8023710 <MX_TIM5_Init+0x94>)
 80236ba:	2200      	movs	r2, #0
 80236bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80236be:	4814      	ldr	r0, [pc, #80]	; (8023710 <MX_TIM5_Init+0x94>)
 80236c0:	f005 feaa 	bl	8029418 <HAL_TIM_Base_Init>
 80236c4:	4603      	mov	r3, r0
 80236c6:	2b00      	cmp	r3, #0
 80236c8:	d001      	beq.n	80236ce <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80236ca:	f000 fa6d 	bl	8023ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80236ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80236d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80236d4:	f107 0308 	add.w	r3, r7, #8
 80236d8:	4619      	mov	r1, r3
 80236da:	480d      	ldr	r0, [pc, #52]	; (8023710 <MX_TIM5_Init+0x94>)
 80236dc:	f006 fa18 	bl	8029b10 <HAL_TIM_ConfigClockSource>
 80236e0:	4603      	mov	r3, r0
 80236e2:	2b00      	cmp	r3, #0
 80236e4:	d001      	beq.n	80236ea <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80236e6:	f000 fa5f 	bl	8023ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80236ea:	2300      	movs	r3, #0
 80236ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80236ee:	2300      	movs	r3, #0
 80236f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80236f2:	463b      	mov	r3, r7
 80236f4:	4619      	mov	r1, r3
 80236f6:	4806      	ldr	r0, [pc, #24]	; (8023710 <MX_TIM5_Init+0x94>)
 80236f8:	f006 fdfa 	bl	802a2f0 <HAL_TIMEx_MasterConfigSynchronization>
 80236fc:	4603      	mov	r3, r0
 80236fe:	2b00      	cmp	r3, #0
 8023700:	d001      	beq.n	8023706 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8023702:	f000 fa51 	bl	8023ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8023706:	bf00      	nop
 8023708:	3718      	adds	r7, #24
 802370a:	46bd      	mov	sp, r7
 802370c:	bd80      	pop	{r7, pc}
 802370e:	bf00      	nop
 8023710:	20014298 	.word	0x20014298
 8023714:	40000c00 	.word	0x40000c00

08023718 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8023718:	b580      	push	{r7, lr}
 802371a:	b082      	sub	sp, #8
 802371c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802371e:	463b      	mov	r3, r7
 8023720:	2200      	movs	r2, #0
 8023722:	601a      	str	r2, [r3, #0]
 8023724:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8023726:	4b15      	ldr	r3, [pc, #84]	; (802377c <MX_TIM6_Init+0x64>)
 8023728:	4a15      	ldr	r2, [pc, #84]	; (8023780 <MX_TIM6_Init+0x68>)
 802372a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 802372c:	4b13      	ldr	r3, [pc, #76]	; (802377c <MX_TIM6_Init+0x64>)
 802372e:	2204      	movs	r2, #4
 8023730:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023732:	4b12      	ldr	r3, [pc, #72]	; (802377c <MX_TIM6_Init+0x64>)
 8023734:	2200      	movs	r2, #0
 8023736:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8023738:	4b10      	ldr	r3, [pc, #64]	; (802377c <MX_TIM6_Init+0x64>)
 802373a:	f642 1203 	movw	r2, #10499	; 0x2903
 802373e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023740:	4b0e      	ldr	r3, [pc, #56]	; (802377c <MX_TIM6_Init+0x64>)
 8023742:	2200      	movs	r2, #0
 8023744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8023746:	480d      	ldr	r0, [pc, #52]	; (802377c <MX_TIM6_Init+0x64>)
 8023748:	f005 fe66 	bl	8029418 <HAL_TIM_Base_Init>
 802374c:	4603      	mov	r3, r0
 802374e:	2b00      	cmp	r3, #0
 8023750:	d001      	beq.n	8023756 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8023752:	f000 fa29 	bl	8023ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023756:	2300      	movs	r3, #0
 8023758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802375a:	2300      	movs	r3, #0
 802375c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 802375e:	463b      	mov	r3, r7
 8023760:	4619      	mov	r1, r3
 8023762:	4806      	ldr	r0, [pc, #24]	; (802377c <MX_TIM6_Init+0x64>)
 8023764:	f006 fdc4 	bl	802a2f0 <HAL_TIMEx_MasterConfigSynchronization>
 8023768:	4603      	mov	r3, r0
 802376a:	2b00      	cmp	r3, #0
 802376c:	d001      	beq.n	8023772 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 802376e:	f000 fa1b 	bl	8023ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8023772:	bf00      	nop
 8023774:	3708      	adds	r7, #8
 8023776:	46bd      	mov	sp, r7
 8023778:	bd80      	pop	{r7, pc}
 802377a:	bf00      	nop
 802377c:	20014458 	.word	0x20014458
 8023780:	40001000 	.word	0x40001000

08023784 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8023784:	b580      	push	{r7, lr}
 8023786:	b082      	sub	sp, #8
 8023788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802378a:	463b      	mov	r3, r7
 802378c:	2200      	movs	r2, #0
 802378e:	601a      	str	r2, [r3, #0]
 8023790:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8023792:	4b15      	ldr	r3, [pc, #84]	; (80237e8 <MX_TIM7_Init+0x64>)
 8023794:	4a15      	ldr	r2, [pc, #84]	; (80237ec <MX_TIM7_Init+0x68>)
 8023796:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8023798:	4b13      	ldr	r3, [pc, #76]	; (80237e8 <MX_TIM7_Init+0x64>)
 802379a:	2204      	movs	r2, #4
 802379c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 802379e:	4b12      	ldr	r3, [pc, #72]	; (80237e8 <MX_TIM7_Init+0x64>)
 80237a0:	2200      	movs	r2, #0
 80237a2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 80237a4:	4b10      	ldr	r3, [pc, #64]	; (80237e8 <MX_TIM7_Init+0x64>)
 80237a6:	f240 4219 	movw	r2, #1049	; 0x419
 80237aa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80237ac:	4b0e      	ldr	r3, [pc, #56]	; (80237e8 <MX_TIM7_Init+0x64>)
 80237ae:	2200      	movs	r2, #0
 80237b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80237b2:	480d      	ldr	r0, [pc, #52]	; (80237e8 <MX_TIM7_Init+0x64>)
 80237b4:	f005 fe30 	bl	8029418 <HAL_TIM_Base_Init>
 80237b8:	4603      	mov	r3, r0
 80237ba:	2b00      	cmp	r3, #0
 80237bc:	d001      	beq.n	80237c2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80237be:	f000 f9f3 	bl	8023ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80237c2:	2300      	movs	r3, #0
 80237c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80237c6:	2300      	movs	r3, #0
 80237c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80237ca:	463b      	mov	r3, r7
 80237cc:	4619      	mov	r1, r3
 80237ce:	4806      	ldr	r0, [pc, #24]	; (80237e8 <MX_TIM7_Init+0x64>)
 80237d0:	f006 fd8e 	bl	802a2f0 <HAL_TIMEx_MasterConfigSynchronization>
 80237d4:	4603      	mov	r3, r0
 80237d6:	2b00      	cmp	r3, #0
 80237d8:	d001      	beq.n	80237de <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80237da:	f000 f9e5 	bl	8023ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80237de:	bf00      	nop
 80237e0:	3708      	adds	r7, #8
 80237e2:	46bd      	mov	sp, r7
 80237e4:	bd80      	pop	{r7, pc}
 80237e6:	bf00      	nop
 80237e8:	200175c8 	.word	0x200175c8
 80237ec:	40001400 	.word	0x40001400

080237f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80237f0:	b580      	push	{r7, lr}
 80237f2:	b08c      	sub	sp, #48	; 0x30
 80237f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80237f6:	f107 030c 	add.w	r3, r7, #12
 80237fa:	2224      	movs	r2, #36	; 0x24
 80237fc:	2100      	movs	r1, #0
 80237fe:	4618      	mov	r0, r3
 8023800:	f006 fe9d 	bl	802a53e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023804:	1d3b      	adds	r3, r7, #4
 8023806:	2200      	movs	r2, #0
 8023808:	601a      	str	r2, [r3, #0]
 802380a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 802380c:	4b22      	ldr	r3, [pc, #136]	; (8023898 <MX_TIM8_Init+0xa8>)
 802380e:	4a23      	ldr	r2, [pc, #140]	; (802389c <MX_TIM8_Init+0xac>)
 8023810:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8023812:	4b21      	ldr	r3, [pc, #132]	; (8023898 <MX_TIM8_Init+0xa8>)
 8023814:	2200      	movs	r2, #0
 8023816:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023818:	4b1f      	ldr	r3, [pc, #124]	; (8023898 <MX_TIM8_Init+0xa8>)
 802381a:	2200      	movs	r2, #0
 802381c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 802381e:	4b1e      	ldr	r3, [pc, #120]	; (8023898 <MX_TIM8_Init+0xa8>)
 8023820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023824:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023826:	4b1c      	ldr	r3, [pc, #112]	; (8023898 <MX_TIM8_Init+0xa8>)
 8023828:	2200      	movs	r2, #0
 802382a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 802382c:	4b1a      	ldr	r3, [pc, #104]	; (8023898 <MX_TIM8_Init+0xa8>)
 802382e:	2200      	movs	r2, #0
 8023830:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023832:	4b19      	ldr	r3, [pc, #100]	; (8023898 <MX_TIM8_Init+0xa8>)
 8023834:	2200      	movs	r2, #0
 8023836:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8023838:	2303      	movs	r3, #3
 802383a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 802383c:	2300      	movs	r3, #0
 802383e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8023840:	2301      	movs	r3, #1
 8023842:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8023844:	2300      	movs	r3, #0
 8023846:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8023848:	2300      	movs	r3, #0
 802384a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 802384c:	2300      	movs	r3, #0
 802384e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8023850:	2301      	movs	r3, #1
 8023852:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8023854:	2300      	movs	r3, #0
 8023856:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8023858:	2300      	movs	r3, #0
 802385a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 802385c:	f107 030c 	add.w	r3, r7, #12
 8023860:	4619      	mov	r1, r3
 8023862:	480d      	ldr	r0, [pc, #52]	; (8023898 <MX_TIM8_Init+0xa8>)
 8023864:	f005 febc 	bl	80295e0 <HAL_TIM_Encoder_Init>
 8023868:	4603      	mov	r3, r0
 802386a:	2b00      	cmp	r3, #0
 802386c:	d001      	beq.n	8023872 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 802386e:	f000 f99b 	bl	8023ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023872:	2300      	movs	r3, #0
 8023874:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023876:	2300      	movs	r3, #0
 8023878:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 802387a:	1d3b      	adds	r3, r7, #4
 802387c:	4619      	mov	r1, r3
 802387e:	4806      	ldr	r0, [pc, #24]	; (8023898 <MX_TIM8_Init+0xa8>)
 8023880:	f006 fd36 	bl	802a2f0 <HAL_TIMEx_MasterConfigSynchronization>
 8023884:	4603      	mov	r3, r0
 8023886:	2b00      	cmp	r3, #0
 8023888:	d001      	beq.n	802388e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 802388a:	f000 f98d 	bl	8023ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 802388e:	bf00      	nop
 8023890:	3730      	adds	r7, #48	; 0x30
 8023892:	46bd      	mov	sp, r7
 8023894:	bd80      	pop	{r7, pc}
 8023896:	bf00      	nop
 8023898:	20011154 	.word	0x20011154
 802389c:	40010400 	.word	0x40010400

080238a0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80238a0:	b580      	push	{r7, lr}
 80238a2:	b088      	sub	sp, #32
 80238a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80238a6:	1d3b      	adds	r3, r7, #4
 80238a8:	2200      	movs	r2, #0
 80238aa:	601a      	str	r2, [r3, #0]
 80238ac:	605a      	str	r2, [r3, #4]
 80238ae:	609a      	str	r2, [r3, #8]
 80238b0:	60da      	str	r2, [r3, #12]
 80238b2:	611a      	str	r2, [r3, #16]
 80238b4:	615a      	str	r2, [r3, #20]
 80238b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80238b8:	4b1e      	ldr	r3, [pc, #120]	; (8023934 <MX_TIM11_Init+0x94>)
 80238ba:	4a1f      	ldr	r2, [pc, #124]	; (8023938 <MX_TIM11_Init+0x98>)
 80238bc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80238be:	4b1d      	ldr	r3, [pc, #116]	; (8023934 <MX_TIM11_Init+0x94>)
 80238c0:	2200      	movs	r2, #0
 80238c2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80238c4:	4b1b      	ldr	r3, [pc, #108]	; (8023934 <MX_TIM11_Init+0x94>)
 80238c6:	2200      	movs	r2, #0
 80238c8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 80238ca:	4b1a      	ldr	r3, [pc, #104]	; (8023934 <MX_TIM11_Init+0x94>)
 80238cc:	f240 628f 	movw	r2, #1679	; 0x68f
 80238d0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80238d2:	4b18      	ldr	r3, [pc, #96]	; (8023934 <MX_TIM11_Init+0x94>)
 80238d4:	2200      	movs	r2, #0
 80238d6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80238d8:	4b16      	ldr	r3, [pc, #88]	; (8023934 <MX_TIM11_Init+0x94>)
 80238da:	2200      	movs	r2, #0
 80238dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80238de:	4815      	ldr	r0, [pc, #84]	; (8023934 <MX_TIM11_Init+0x94>)
 80238e0:	f005 fd9a 	bl	8029418 <HAL_TIM_Base_Init>
 80238e4:	4603      	mov	r3, r0
 80238e6:	2b00      	cmp	r3, #0
 80238e8:	d001      	beq.n	80238ee <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80238ea:	f000 f95d 	bl	8023ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80238ee:	4811      	ldr	r0, [pc, #68]	; (8023934 <MX_TIM11_Init+0x94>)
 80238f0:	f005 fe0c 	bl	802950c <HAL_TIM_PWM_Init>
 80238f4:	4603      	mov	r3, r0
 80238f6:	2b00      	cmp	r3, #0
 80238f8:	d001      	beq.n	80238fe <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80238fa:	f000 f955 	bl	8023ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80238fe:	2360      	movs	r3, #96	; 0x60
 8023900:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023902:	2300      	movs	r3, #0
 8023904:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023906:	2300      	movs	r3, #0
 8023908:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802390a:	2300      	movs	r3, #0
 802390c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 802390e:	1d3b      	adds	r3, r7, #4
 8023910:	2200      	movs	r2, #0
 8023912:	4619      	mov	r1, r3
 8023914:	4807      	ldr	r0, [pc, #28]	; (8023934 <MX_TIM11_Init+0x94>)
 8023916:	f006 f835 	bl	8029984 <HAL_TIM_PWM_ConfigChannel>
 802391a:	4603      	mov	r3, r0
 802391c:	2b00      	cmp	r3, #0
 802391e:	d001      	beq.n	8023924 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8023920:	f000 f942 	bl	8023ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8023924:	4803      	ldr	r0, [pc, #12]	; (8023934 <MX_TIM11_Init+0x94>)
 8023926:	f002 f8b5 	bl	8025a94 <HAL_TIM_MspPostInit>

}
 802392a:	bf00      	nop
 802392c:	3720      	adds	r7, #32
 802392e:	46bd      	mov	sp, r7
 8023930:	bd80      	pop	{r7, pc}
 8023932:	bf00      	nop
 8023934:	200143b8 	.word	0x200143b8
 8023938:	40014800 	.word	0x40014800

0802393c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 802393c:	b580      	push	{r7, lr}
 802393e:	b088      	sub	sp, #32
 8023940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8023942:	1d3b      	adds	r3, r7, #4
 8023944:	2200      	movs	r2, #0
 8023946:	601a      	str	r2, [r3, #0]
 8023948:	605a      	str	r2, [r3, #4]
 802394a:	609a      	str	r2, [r3, #8]
 802394c:	60da      	str	r2, [r3, #12]
 802394e:	611a      	str	r2, [r3, #16]
 8023950:	615a      	str	r2, [r3, #20]
 8023952:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8023954:	4b1a      	ldr	r3, [pc, #104]	; (80239c0 <MX_TIM12_Init+0x84>)
 8023956:	4a1b      	ldr	r2, [pc, #108]	; (80239c4 <MX_TIM12_Init+0x88>)
 8023958:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 802395a:	4b19      	ldr	r3, [pc, #100]	; (80239c0 <MX_TIM12_Init+0x84>)
 802395c:	f44f 725c 	mov.w	r2, #880	; 0x370
 8023960:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023962:	4b17      	ldr	r3, [pc, #92]	; (80239c0 <MX_TIM12_Init+0x84>)
 8023964:	2200      	movs	r2, #0
 8023966:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 8023968:	4b15      	ldr	r3, [pc, #84]	; (80239c0 <MX_TIM12_Init+0x84>)
 802396a:	2235      	movs	r2, #53	; 0x35
 802396c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802396e:	4b14      	ldr	r3, [pc, #80]	; (80239c0 <MX_TIM12_Init+0x84>)
 8023970:	2200      	movs	r2, #0
 8023972:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023974:	4b12      	ldr	r3, [pc, #72]	; (80239c0 <MX_TIM12_Init+0x84>)
 8023976:	2200      	movs	r2, #0
 8023978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 802397a:	4811      	ldr	r0, [pc, #68]	; (80239c0 <MX_TIM12_Init+0x84>)
 802397c:	f005 fdc6 	bl	802950c <HAL_TIM_PWM_Init>
 8023980:	4603      	mov	r3, r0
 8023982:	2b00      	cmp	r3, #0
 8023984:	d001      	beq.n	802398a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8023986:	f000 f90f 	bl	8023ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802398a:	2360      	movs	r3, #96	; 0x60
 802398c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 802398e:	2300      	movs	r3, #0
 8023990:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023992:	2300      	movs	r3, #0
 8023994:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023996:	2300      	movs	r3, #0
 8023998:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 802399a:	1d3b      	adds	r3, r7, #4
 802399c:	2204      	movs	r2, #4
 802399e:	4619      	mov	r1, r3
 80239a0:	4807      	ldr	r0, [pc, #28]	; (80239c0 <MX_TIM12_Init+0x84>)
 80239a2:	f005 ffef 	bl	8029984 <HAL_TIM_PWM_ConfigChannel>
 80239a6:	4603      	mov	r3, r0
 80239a8:	2b00      	cmp	r3, #0
 80239aa:	d001      	beq.n	80239b0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80239ac:	f000 f8fc 	bl	8023ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80239b0:	4803      	ldr	r0, [pc, #12]	; (80239c0 <MX_TIM12_Init+0x84>)
 80239b2:	f002 f86f 	bl	8025a94 <HAL_TIM_MspPostInit>

}
 80239b6:	bf00      	nop
 80239b8:	3720      	adds	r7, #32
 80239ba:	46bd      	mov	sp, r7
 80239bc:	bd80      	pop	{r7, pc}
 80239be:	bf00      	nop
 80239c0:	20017588 	.word	0x20017588
 80239c4:	40001800 	.word	0x40001800

080239c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80239c8:	b580      	push	{r7, lr}
 80239ca:	b082      	sub	sp, #8
 80239cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80239ce:	2300      	movs	r3, #0
 80239d0:	607b      	str	r3, [r7, #4]
 80239d2:	4b0c      	ldr	r3, [pc, #48]	; (8023a04 <MX_DMA_Init+0x3c>)
 80239d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80239d6:	4a0b      	ldr	r2, [pc, #44]	; (8023a04 <MX_DMA_Init+0x3c>)
 80239d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80239dc:	6313      	str	r3, [r2, #48]	; 0x30
 80239de:	4b09      	ldr	r3, [pc, #36]	; (8023a04 <MX_DMA_Init+0x3c>)
 80239e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80239e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80239e6:	607b      	str	r3, [r7, #4]
 80239e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80239ea:	2200      	movs	r2, #0
 80239ec:	2100      	movs	r1, #0
 80239ee:	2038      	movs	r0, #56	; 0x38
 80239f0:	f003 fa17 	bl	8026e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80239f4:	2038      	movs	r0, #56	; 0x38
 80239f6:	f003 fa30 	bl	8026e5a <HAL_NVIC_EnableIRQ>

}
 80239fa:	bf00      	nop
 80239fc:	3708      	adds	r7, #8
 80239fe:	46bd      	mov	sp, r7
 8023a00:	bd80      	pop	{r7, pc}
 8023a02:	bf00      	nop
 8023a04:	40023800 	.word	0x40023800

08023a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8023a08:	b580      	push	{r7, lr}
 8023a0a:	b08a      	sub	sp, #40	; 0x28
 8023a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023a0e:	f107 0314 	add.w	r3, r7, #20
 8023a12:	2200      	movs	r2, #0
 8023a14:	601a      	str	r2, [r3, #0]
 8023a16:	605a      	str	r2, [r3, #4]
 8023a18:	609a      	str	r2, [r3, #8]
 8023a1a:	60da      	str	r2, [r3, #12]
 8023a1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8023a1e:	2300      	movs	r3, #0
 8023a20:	613b      	str	r3, [r7, #16]
 8023a22:	4b5c      	ldr	r3, [pc, #368]	; (8023b94 <MX_GPIO_Init+0x18c>)
 8023a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a26:	4a5b      	ldr	r2, [pc, #364]	; (8023b94 <MX_GPIO_Init+0x18c>)
 8023a28:	f043 0304 	orr.w	r3, r3, #4
 8023a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8023a2e:	4b59      	ldr	r3, [pc, #356]	; (8023b94 <MX_GPIO_Init+0x18c>)
 8023a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a32:	f003 0304 	and.w	r3, r3, #4
 8023a36:	613b      	str	r3, [r7, #16]
 8023a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8023a3a:	2300      	movs	r3, #0
 8023a3c:	60fb      	str	r3, [r7, #12]
 8023a3e:	4b55      	ldr	r3, [pc, #340]	; (8023b94 <MX_GPIO_Init+0x18c>)
 8023a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a42:	4a54      	ldr	r2, [pc, #336]	; (8023b94 <MX_GPIO_Init+0x18c>)
 8023a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023a48:	6313      	str	r3, [r2, #48]	; 0x30
 8023a4a:	4b52      	ldr	r3, [pc, #328]	; (8023b94 <MX_GPIO_Init+0x18c>)
 8023a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023a52:	60fb      	str	r3, [r7, #12]
 8023a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8023a56:	2300      	movs	r3, #0
 8023a58:	60bb      	str	r3, [r7, #8]
 8023a5a:	4b4e      	ldr	r3, [pc, #312]	; (8023b94 <MX_GPIO_Init+0x18c>)
 8023a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a5e:	4a4d      	ldr	r2, [pc, #308]	; (8023b94 <MX_GPIO_Init+0x18c>)
 8023a60:	f043 0301 	orr.w	r3, r3, #1
 8023a64:	6313      	str	r3, [r2, #48]	; 0x30
 8023a66:	4b4b      	ldr	r3, [pc, #300]	; (8023b94 <MX_GPIO_Init+0x18c>)
 8023a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a6a:	f003 0301 	and.w	r3, r3, #1
 8023a6e:	60bb      	str	r3, [r7, #8]
 8023a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8023a72:	2300      	movs	r3, #0
 8023a74:	607b      	str	r3, [r7, #4]
 8023a76:	4b47      	ldr	r3, [pc, #284]	; (8023b94 <MX_GPIO_Init+0x18c>)
 8023a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a7a:	4a46      	ldr	r2, [pc, #280]	; (8023b94 <MX_GPIO_Init+0x18c>)
 8023a7c:	f043 0302 	orr.w	r3, r3, #2
 8023a80:	6313      	str	r3, [r2, #48]	; 0x30
 8023a82:	4b44      	ldr	r3, [pc, #272]	; (8023b94 <MX_GPIO_Init+0x18c>)
 8023a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a86:	f003 0302 	and.w	r3, r3, #2
 8023a8a:	607b      	str	r3, [r7, #4]
 8023a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023a8e:	2300      	movs	r3, #0
 8023a90:	603b      	str	r3, [r7, #0]
 8023a92:	4b40      	ldr	r3, [pc, #256]	; (8023b94 <MX_GPIO_Init+0x18c>)
 8023a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a96:	4a3f      	ldr	r2, [pc, #252]	; (8023b94 <MX_GPIO_Init+0x18c>)
 8023a98:	f043 0308 	orr.w	r3, r3, #8
 8023a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8023a9e:	4b3d      	ldr	r3, [pc, #244]	; (8023b94 <MX_GPIO_Init+0x18c>)
 8023aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023aa2:	f003 0308 	and.w	r3, r3, #8
 8023aa6:	603b      	str	r3, [r7, #0]
 8023aa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8023aaa:	2200      	movs	r2, #0
 8023aac:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8023ab0:	4839      	ldr	r0, [pc, #228]	; (8023b98 <MX_GPIO_Init+0x190>)
 8023ab2:	f004 f9e3 	bl	8027e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8023ab6:	2201      	movs	r2, #1
 8023ab8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8023abc:	4837      	ldr	r0, [pc, #220]	; (8023b9c <MX_GPIO_Init+0x194>)
 8023abe:	f004 f9dd 	bl	8027e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8023ac2:	2200      	movs	r2, #0
 8023ac4:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 8023ac8:	4835      	ldr	r0, [pc, #212]	; (8023ba0 <MX_GPIO_Init+0x198>)
 8023aca:	f004 f9d7 	bl	8027e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8023ace:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8023ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023ad4:	2301      	movs	r3, #1
 8023ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023ad8:	2300      	movs	r3, #0
 8023ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023adc:	2300      	movs	r3, #0
 8023ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023ae0:	f107 0314 	add.w	r3, r7, #20
 8023ae4:	4619      	mov	r1, r3
 8023ae6:	482c      	ldr	r0, [pc, #176]	; (8023b98 <MX_GPIO_Init+0x190>)
 8023ae8:	f004 f816 	bl	8027b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8023aec:	2307      	movs	r3, #7
 8023aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023af0:	2300      	movs	r3, #0
 8023af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023af4:	2301      	movs	r3, #1
 8023af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023af8:	f107 0314 	add.w	r3, r7, #20
 8023afc:	4619      	mov	r1, r3
 8023afe:	4827      	ldr	r0, [pc, #156]	; (8023b9c <MX_GPIO_Init+0x194>)
 8023b00:	f004 f80a 	bl	8027b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023b0a:	2301      	movs	r3, #1
 8023b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023b0e:	2300      	movs	r3, #0
 8023b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023b12:	2300      	movs	r3, #0
 8023b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023b16:	f107 0314 	add.w	r3, r7, #20
 8023b1a:	4619      	mov	r1, r3
 8023b1c:	481f      	ldr	r0, [pc, #124]	; (8023b9c <MX_GPIO_Init+0x194>)
 8023b1e:	f003 fffb 	bl	8027b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 8023b22:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8023b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023b28:	2300      	movs	r3, #0
 8023b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023b2c:	2300      	movs	r3, #0
 8023b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023b30:	f107 0314 	add.w	r3, r7, #20
 8023b34:	4619      	mov	r1, r3
 8023b36:	4819      	ldr	r0, [pc, #100]	; (8023b9c <MX_GPIO_Init+0x194>)
 8023b38:	f003 ffee 	bl	8027b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8023b3c:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8023b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023b42:	2301      	movs	r3, #1
 8023b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023b46:	2300      	movs	r3, #0
 8023b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023b4a:	2300      	movs	r3, #0
 8023b4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023b4e:	f107 0314 	add.w	r3, r7, #20
 8023b52:	4619      	mov	r1, r3
 8023b54:	4812      	ldr	r0, [pc, #72]	; (8023ba0 <MX_GPIO_Init+0x198>)
 8023b56:	f003 ffdf 	bl	8027b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023b60:	2300      	movs	r3, #0
 8023b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023b64:	2301      	movs	r3, #1
 8023b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023b68:	f107 0314 	add.w	r3, r7, #20
 8023b6c:	4619      	mov	r1, r3
 8023b6e:	480c      	ldr	r0, [pc, #48]	; (8023ba0 <MX_GPIO_Init+0x198>)
 8023b70:	f003 ffd2 	bl	8027b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8023b74:	2304      	movs	r3, #4
 8023b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023b78:	2300      	movs	r3, #0
 8023b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023b7c:	2300      	movs	r3, #0
 8023b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023b80:	f107 0314 	add.w	r3, r7, #20
 8023b84:	4619      	mov	r1, r3
 8023b86:	4807      	ldr	r0, [pc, #28]	; (8023ba4 <MX_GPIO_Init+0x19c>)
 8023b88:	f003 ffc6 	bl	8027b18 <HAL_GPIO_Init>

}
 8023b8c:	bf00      	nop
 8023b8e:	3728      	adds	r7, #40	; 0x28
 8023b90:	46bd      	mov	sp, r7
 8023b92:	bd80      	pop	{r7, pc}
 8023b94:	40023800 	.word	0x40023800
 8023b98:	40020800 	.word	0x40020800
 8023b9c:	40020400 	.word	0x40020400
 8023ba0:	40020000 	.word	0x40020000
 8023ba4:	40020c00 	.word	0x40020c00

08023ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8023ba8:	b480      	push	{r7}
 8023baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8023bac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8023bae:	e7fe      	b.n	8023bae <Error_Handler+0x6>

08023bb0 <_ZN5Motor4InitEv>:
#include "motor.hpp"
#include "declare_extern.h"

void Motor::Init()
{
 8023bb0:	b580      	push	{r7, lr}
 8023bb2:	b082      	sub	sp, #8
 8023bb4:	af00      	add	r7, sp, #0
 8023bb6:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8023bb8:	2104      	movs	r1, #4
 8023bba:	4812      	ldr	r0, [pc, #72]	; (8023c04 <_ZN5Motor4InitEv+0x54>)
 8023bbc:	f005 fcd2 	bl	8029564 <HAL_TIM_PWM_Start>
 8023bc0:	4603      	mov	r3, r0
 8023bc2:	2b00      	cmp	r3, #0
 8023bc4:	bf14      	ite	ne
 8023bc6:	2301      	movne	r3, #1
 8023bc8:	2300      	moveq	r3, #0
 8023bca:	b2db      	uxtb	r3, r3
 8023bcc:	2b00      	cmp	r3, #0
 8023bce:	d004      	beq.n	8023bda <_ZN5Motor4InitEv+0x2a>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch2 = true; // MOTOR_R
 8023bd0:	4b0d      	ldr	r3, [pc, #52]	; (8023c08 <_ZN5Motor4InitEv+0x58>)
 8023bd2:	2201      	movs	r2, #1
 8023bd4:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8023bd6:	f7ff ffe7 	bl	8023ba8 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8023bda:	210c      	movs	r1, #12
 8023bdc:	4809      	ldr	r0, [pc, #36]	; (8023c04 <_ZN5Motor4InitEv+0x54>)
 8023bde:	f005 fcc1 	bl	8029564 <HAL_TIM_PWM_Start>
 8023be2:	4603      	mov	r3, r0
 8023be4:	2b00      	cmp	r3, #0
 8023be6:	bf14      	ite	ne
 8023be8:	2301      	movne	r3, #1
 8023bea:	2300      	moveq	r3, #0
 8023bec:	b2db      	uxtb	r3, r3
 8023bee:	2b00      	cmp	r3, #0
 8023bf0:	d004      	beq.n	8023bfc <_ZN5Motor4InitEv+0x4c>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch4 = true; // MOTOR_L
 8023bf2:	4b06      	ldr	r3, [pc, #24]	; (8023c0c <_ZN5Motor4InitEv+0x5c>)
 8023bf4:	2201      	movs	r2, #1
 8023bf6:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8023bf8:	f7ff ffd6 	bl	8023ba8 <Error_Handler>
    }
}
 8023bfc:	bf00      	nop
 8023bfe:	3708      	adds	r7, #8
 8023c00:	46bd      	mov	sp, r7
 8023c02:	bd80      	pop	{r7, pc}
 8023c04:	20017508 	.word	0x20017508
 8023c08:	20000271 	.word	0x20000271
 8023c0c:	20000272 	.word	0x20000272

08023c10 <_ZN5Motor5DriveEff>:

void Motor::Drive(float translation_ratio, float rotation_ratio)
{
 8023c10:	b580      	push	{r7, lr}
 8023c12:	b08a      	sub	sp, #40	; 0x28
 8023c14:	af00      	add	r7, sp, #0
 8023c16:	60f8      	str	r0, [r7, #12]
 8023c18:	ed87 0a02 	vstr	s0, [r7, #8]
 8023c1c:	edc7 0a01 	vstr	s1, [r7, #4]
#ifdef DEBUG_MODE
    g_translation_ratio = translation_ratio;
 8023c20:	4a89      	ldr	r2, [pc, #548]	; (8023e48 <_ZN5Motor5DriveEff+0x238>)
 8023c22:	68bb      	ldr	r3, [r7, #8]
 8023c24:	6013      	str	r3, [r2, #0]
    g_rotation_ratio    = rotation_ratio;
 8023c26:	4a89      	ldr	r2, [pc, #548]	; (8023e4c <_ZN5Motor5DriveEff+0x23c>)
 8023c28:	687b      	ldr	r3, [r7, #4]
 8023c2a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(translation_ratio > LIMIT_TRANS_DUTY)       translation_ratio =  LIMIT_TRANS_DUTY;
 8023c2c:	68b8      	ldr	r0, [r7, #8]
 8023c2e:	f7fc fbc3 	bl	80203b8 <__aeabi_f2d>
 8023c32:	a381      	add	r3, pc, #516	; (adr r3, 8023e38 <_ZN5Motor5DriveEff+0x228>)
 8023c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c38:	f7fc fea6 	bl	8020988 <__aeabi_dcmpgt>
 8023c3c:	4603      	mov	r3, r0
 8023c3e:	2b00      	cmp	r3, #0
 8023c40:	d002      	beq.n	8023c48 <_ZN5Motor5DriveEff+0x38>
 8023c42:	4b83      	ldr	r3, [pc, #524]	; (8023e50 <_ZN5Motor5DriveEff+0x240>)
 8023c44:	60bb      	str	r3, [r7, #8]
 8023c46:	e00c      	b.n	8023c62 <_ZN5Motor5DriveEff+0x52>
    else if(translation_ratio < -LIMIT_TRANS_DUTY) translation_ratio = -LIMIT_TRANS_DUTY;
 8023c48:	68b8      	ldr	r0, [r7, #8]
 8023c4a:	f7fc fbb5 	bl	80203b8 <__aeabi_f2d>
 8023c4e:	a37c      	add	r3, pc, #496	; (adr r3, 8023e40 <_ZN5Motor5DriveEff+0x230>)
 8023c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c54:	f7fc fe7a 	bl	802094c <__aeabi_dcmplt>
 8023c58:	4603      	mov	r3, r0
 8023c5a:	2b00      	cmp	r3, #0
 8023c5c:	d001      	beq.n	8023c62 <_ZN5Motor5DriveEff+0x52>
 8023c5e:	4b7d      	ldr	r3, [pc, #500]	; (8023e54 <_ZN5Motor5DriveEff+0x244>)
 8023c60:	60bb      	str	r3, [r7, #8]

    float sum = translation_ratio + rotation_ratio;
 8023c62:	ed97 7a02 	vldr	s14, [r7, #8]
 8023c66:	edd7 7a01 	vldr	s15, [r7, #4]
 8023c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023c6e:	edc7 7a06 	vstr	s15, [r7, #24]
    float excess = 0;
 8023c72:	f04f 0300 	mov.w	r3, #0
 8023c76:	627b      	str	r3, [r7, #36]	; 0x24

    if(sum > 1.0)       excess = sum - 1.0;
 8023c78:	edd7 7a06 	vldr	s15, [r7, #24]
 8023c7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c88:	dd08      	ble.n	8023c9c <_ZN5Motor5DriveEff+0x8c>
 8023c8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8023c8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023c92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023c96:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8023c9a:	e010      	b.n	8023cbe <_ZN5Motor5DriveEff+0xae>
    else if(sum < -1.0) excess = sum + 1.0;
 8023c9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8023ca0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023cac:	d507      	bpl.n	8023cbe <_ZN5Motor5DriveEff+0xae>
 8023cae:	edd7 7a06 	vldr	s15, [r7, #24]
 8023cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023cb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023cba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    translation_ratio -= excess;
 8023cbe:	ed97 7a02 	vldr	s14, [r7, #8]
 8023cc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8023cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023cca:	edc7 7a02 	vstr	s15, [r7, #8]

#ifdef DEBUG_MODE
    g_sum_raito = sum;
 8023cce:	4a62      	ldr	r2, [pc, #392]	; (8023e58 <_ZN5Motor5DriveEff+0x248>)
 8023cd0:	69bb      	ldr	r3, [r7, #24]
 8023cd2:	6013      	str	r3, [r2, #0]
    g_excess_ratio = excess;
 8023cd4:	4a61      	ldr	r2, [pc, #388]	; (8023e5c <_ZN5Motor5DriveEff+0x24c>)
 8023cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023cd8:	6013      	str	r3, [r2, #0]
    g_reduced_translation = translation_ratio;
 8023cda:	4a61      	ldr	r2, [pc, #388]	; (8023e60 <_ZN5Motor5DriveEff+0x250>)
 8023cdc:	68bb      	ldr	r3, [r7, #8]
 8023cde:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float duty_l = translation_ratio - rotation_ratio;
 8023ce0:	ed97 7a02 	vldr	s14, [r7, #8]
 8023ce4:	edd7 7a01 	vldr	s15, [r7, #4]
 8023ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023cec:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_r = translation_ratio + rotation_ratio;
 8023cf0:	ed97 7a02 	vldr	s14, [r7, #8]
 8023cf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8023cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023cfc:	edc7 7a07 	vstr	s15, [r7, #28]

    if(duty_l > 1.0)       duty_l =  1.0;
 8023d00:	edd7 7a08 	vldr	s15, [r7, #32]
 8023d04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d10:	dd03      	ble.n	8023d1a <_ZN5Motor5DriveEff+0x10a>
 8023d12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023d16:	623b      	str	r3, [r7, #32]
 8023d18:	e00a      	b.n	8023d30 <_ZN5Motor5DriveEff+0x120>
    else if(duty_l < -1.0) duty_l = -1.0;
 8023d1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8023d1e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d2a:	d501      	bpl.n	8023d30 <_ZN5Motor5DriveEff+0x120>
 8023d2c:	4b4d      	ldr	r3, [pc, #308]	; (8023e64 <_ZN5Motor5DriveEff+0x254>)
 8023d2e:	623b      	str	r3, [r7, #32]

    if(duty_r > 1.0)       duty_r =  1.0;
 8023d30:	edd7 7a07 	vldr	s15, [r7, #28]
 8023d34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d40:	dd03      	ble.n	8023d4a <_ZN5Motor5DriveEff+0x13a>
 8023d42:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023d46:	61fb      	str	r3, [r7, #28]
 8023d48:	e00a      	b.n	8023d60 <_ZN5Motor5DriveEff+0x150>
    else if(duty_r < -1.0) duty_r = -1.0;
 8023d4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8023d4e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d5a:	d501      	bpl.n	8023d60 <_ZN5Motor5DriveEff+0x150>
 8023d5c:	4b41      	ldr	r3, [pc, #260]	; (8023e64 <_ZN5Motor5DriveEff+0x254>)
 8023d5e:	61fb      	str	r3, [r7, #28]

#ifdef DEBUG_MODE
    g_duty_l = duty_l;
 8023d60:	4a41      	ldr	r2, [pc, #260]	; (8023e68 <_ZN5Motor5DriveEff+0x258>)
 8023d62:	6a3b      	ldr	r3, [r7, #32]
 8023d64:	6013      	str	r3, [r2, #0]
    g_duty_r = duty_r;
 8023d66:	4a41      	ldr	r2, [pc, #260]	; (8023e6c <_ZN5Motor5DriveEff+0x25c>)
 8023d68:	69fb      	ldr	r3, [r7, #28]
 8023d6a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int16_t count_l = static_cast<int16_t>(COUNTER_PERIOD * duty_l);
 8023d6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8023d70:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8023e70 <_ZN5Motor5DriveEff+0x260>
 8023d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023d78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023d7c:	ee17 3a90 	vmov	r3, s15
 8023d80:	b21b      	sxth	r3, r3
 8023d82:	82fb      	strh	r3, [r7, #22]
    int16_t count_r = static_cast<int16_t>(COUNTER_PERIOD * duty_r);
 8023d84:	edd7 7a07 	vldr	s15, [r7, #28]
 8023d88:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8023e70 <_ZN5Motor5DriveEff+0x260>
 8023d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023d94:	ee17 3a90 	vmov	r3, s15
 8023d98:	b21b      	sxth	r3, r3
 8023d9a:	82bb      	strh	r3, [r7, #20]

    if(count_l < 0) { count_l *= -1; BACKWARD_L; }
 8023d9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023da0:	2b00      	cmp	r3, #0
 8023da2:	da0d      	bge.n	8023dc0 <_ZN5Motor5DriveEff+0x1b0>
 8023da4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023da8:	b29b      	uxth	r3, r3
 8023daa:	425b      	negs	r3, r3
 8023dac:	b29b      	uxth	r3, r3
 8023dae:	b21b      	sxth	r3, r3
 8023db0:	82fb      	strh	r3, [r7, #22]
 8023db2:	2200      	movs	r2, #0
 8023db4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023db8:	482e      	ldr	r0, [pc, #184]	; (8023e74 <_ZN5Motor5DriveEff+0x264>)
 8023dba:	f004 f85f 	bl	8027e7c <HAL_GPIO_WritePin>
 8023dbe:	e009      	b.n	8023dd4 <_ZN5Motor5DriveEff+0x1c4>
    else if(count_l >= 0) FORWARD_L;
 8023dc0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023dc4:	2b00      	cmp	r3, #0
 8023dc6:	db05      	blt.n	8023dd4 <_ZN5Motor5DriveEff+0x1c4>
 8023dc8:	2201      	movs	r2, #1
 8023dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023dce:	4829      	ldr	r0, [pc, #164]	; (8023e74 <_ZN5Motor5DriveEff+0x264>)
 8023dd0:	f004 f854 	bl	8027e7c <HAL_GPIO_WritePin>

    if(count_r < 0) { count_r *= -1; BACKWARD_R; }
 8023dd4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023dd8:	2b00      	cmp	r3, #0
 8023dda:	da0d      	bge.n	8023df8 <_ZN5Motor5DriveEff+0x1e8>
 8023ddc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023de0:	b29b      	uxth	r3, r3
 8023de2:	425b      	negs	r3, r3
 8023de4:	b29b      	uxth	r3, r3
 8023de6:	b21b      	sxth	r3, r3
 8023de8:	82bb      	strh	r3, [r7, #20]
 8023dea:	2201      	movs	r2, #1
 8023dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023df0:	4820      	ldr	r0, [pc, #128]	; (8023e74 <_ZN5Motor5DriveEff+0x264>)
 8023df2:	f004 f843 	bl	8027e7c <HAL_GPIO_WritePin>
 8023df6:	e009      	b.n	8023e0c <_ZN5Motor5DriveEff+0x1fc>
    else if(count_r >= 0) FORWARD_R;
 8023df8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023dfc:	2b00      	cmp	r3, #0
 8023dfe:	db05      	blt.n	8023e0c <_ZN5Motor5DriveEff+0x1fc>
 8023e00:	2200      	movs	r2, #0
 8023e02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023e06:	481b      	ldr	r0, [pc, #108]	; (8023e74 <_ZN5Motor5DriveEff+0x264>)
 8023e08:	f004 f838 	bl	8027e7c <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, count_l);
 8023e0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023e10:	4b19      	ldr	r3, [pc, #100]	; (8023e78 <_ZN5Motor5DriveEff+0x268>)
 8023e12:	681b      	ldr	r3, [r3, #0]
 8023e14:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, count_r);
 8023e16:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8023e1a:	4b17      	ldr	r3, [pc, #92]	; (8023e78 <_ZN5Motor5DriveEff+0x268>)
 8023e1c:	681b      	ldr	r3, [r3, #0]
 8023e1e:	641a      	str	r2, [r3, #64]	; 0x40

#ifdef DEBUG_MODE
    g_motor_compare_l = count_l;
 8023e20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023e24:	4b15      	ldr	r3, [pc, #84]	; (8023e7c <_ZN5Motor5DriveEff+0x26c>)
 8023e26:	801a      	strh	r2, [r3, #0]
    g_motor_compare_r = count_r;
 8023e28:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8023e2c:	4b14      	ldr	r3, [pc, #80]	; (8023e80 <_ZN5Motor5DriveEff+0x270>)
 8023e2e:	801a      	strh	r2, [r3, #0]
#endif // DEBUG_MODE
 8023e30:	bf00      	nop
 8023e32:	3728      	adds	r7, #40	; 0x28
 8023e34:	46bd      	mov	sp, r7
 8023e36:	bd80      	pop	{r7, pc}
 8023e38:	cccccccd 	.word	0xcccccccd
 8023e3c:	3feccccc 	.word	0x3feccccc
 8023e40:	cccccccd 	.word	0xcccccccd
 8023e44:	bfeccccc 	.word	0xbfeccccc
 8023e48:	2000041c 	.word	0x2000041c
 8023e4c:	20000420 	.word	0x20000420
 8023e50:	3f666666 	.word	0x3f666666
 8023e54:	bf666666 	.word	0xbf666666
 8023e58:	20000424 	.word	0x20000424
 8023e5c:	20000428 	.word	0x20000428
 8023e60:	2000042c 	.word	0x2000042c
 8023e64:	bf800000 	.word	0xbf800000
 8023e68:	20000430 	.word	0x20000430
 8023e6c:	20000434 	.word	0x20000434
 8023e70:	44832000 	.word	0x44832000
 8023e74:	40020000 	.word	0x40020000
 8023e78:	20017508 	.word	0x20017508
 8023e7c:	20000438 	.word	0x20000438
 8023e80:	2000043a 	.word	0x2000043a

08023e84 <_ZN5PrintC1EP5Flash>:
#include <stdio.h>
#include <string.h>

extern float g_swo_test;

Print::Print(Flash *flash)
 8023e84:	b480      	push	{r7}
 8023e86:	b083      	sub	sp, #12
 8023e88:	af00      	add	r7, sp, #0
 8023e8a:	6078      	str	r0, [r7, #4]
 8023e8c:	6039      	str	r1, [r7, #0]
{
    flash_ = flash;
 8023e8e:	687b      	ldr	r3, [r7, #4]
 8023e90:	f503 3385 	add.w	r3, r3, #68096	; 0x10a00
 8023e94:	3368      	adds	r3, #104	; 0x68
 8023e96:	683a      	ldr	r2, [r7, #0]
 8023e98:	601a      	str	r2, [r3, #0]
}
 8023e9a:	687b      	ldr	r3, [r7, #4]
 8023e9c:	4618      	mov	r0, r3
 8023e9e:	370c      	adds	r7, #12
 8023ea0:	46bd      	mov	sp, r7
 8023ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ea6:	4770      	bx	lr

08023ea8 <_ZN5Print3LogEv>:
{
    printf("Hello, world!\r\n");
}

void Print::Log()
{
 8023ea8:	b580      	push	{r7, lr}
 8023eaa:	b082      	sub	sp, #8
 8023eac:	af00      	add	r7, sp, #0
 8023eae:	6078      	str	r0, [r7, #4]
    printf("<<< Distance Log >>>\n");
 8023eb0:	4804      	ldr	r0, [pc, #16]	; (8023ec4 <_ZN5Print3LogEv+0x1c>)
 8023eb2:	f007 f81d 	bl	802aef0 <puts>
    //printf("<<< Radian Log >>>\n");
    DistanceLog();
 8023eb6:	6878      	ldr	r0, [r7, #4]
 8023eb8:	f000 f806 	bl	8023ec8 <_ZN5Print11DistanceLogEv>
    //RadianLog();
}
 8023ebc:	bf00      	nop
 8023ebe:	3708      	adds	r7, #8
 8023ec0:	46bd      	mov	sp, r7
 8023ec2:	bd80      	pop	{r7, pc}
 8023ec4:	0802cc78 	.word	0x0802cc78

08023ec8 <_ZN5Print11DistanceLogEv>:

    return result;
}

void Print::DistanceLog()
{
 8023ec8:	b590      	push	{r4, r7, lr}
 8023eca:	b087      	sub	sp, #28
 8023ecc:	af00      	add	r7, sp, #0
 8023ece:	6078      	str	r0, [r7, #4]
    uint32_t address = SECTOR_2_ADDRESS_HEAD;
 8023ed0:	4b21      	ldr	r3, [pc, #132]	; (8023f58 <_ZN5Print11DistanceLogEv+0x90>)
 8023ed2:	617b      	str	r3, [r7, #20]
    int32_t int_data = 666666;
 8023ed4:	4b21      	ldr	r3, [pc, #132]	; (8023f5c <_ZN5Print11DistanceLogEv+0x94>)
 8023ed6:	60bb      	str	r3, [r7, #8]
    float data = 66.6666;
 8023ed8:	4b21      	ldr	r3, [pc, #132]	; (8023f60 <_ZN5Print11DistanceLogEv+0x98>)
 8023eda:	60fb      	str	r3, [r7, #12]

    for(uint16_t index = 0; index < LOG_LENGTH; index++)
 8023edc:	2300      	movs	r3, #0
 8023ede:	827b      	strh	r3, [r7, #18]
 8023ee0:	8a7b      	ldrh	r3, [r7, #18]
 8023ee2:	f641 0237 	movw	r2, #6199	; 0x1837
 8023ee6:	4293      	cmp	r3, r2
 8023ee8:	d82c      	bhi.n	8023f44 <_ZN5Print11DistanceLogEv+0x7c>
    {
        flash_->Load(&int_data, address, 4); // suspicious
 8023eea:	687b      	ldr	r3, [r7, #4]
 8023eec:	f503 3385 	add.w	r3, r3, #68096	; 0x10a00
 8023ef0:	3368      	adds	r3, #104	; 0x68
 8023ef2:	6818      	ldr	r0, [r3, #0]
 8023ef4:	f107 0108 	add.w	r1, r7, #8
 8023ef8:	2304      	movs	r3, #4
 8023efa:	697a      	ldr	r2, [r7, #20]
 8023efc:	f7fd f949 	bl	8021192 <_ZN5Flash4LoadEPvmm>

        data = int_data * 0.00001;
 8023f00:	68bb      	ldr	r3, [r7, #8]
 8023f02:	4618      	mov	r0, r3
 8023f04:	f7fc fa46 	bl	8020394 <__aeabi_i2d>
 8023f08:	a311      	add	r3, pc, #68	; (adr r3, 8023f50 <_ZN5Print11DistanceLogEv+0x88>)
 8023f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f0e:	f7fc faab 	bl	8020468 <__aeabi_dmul>
 8023f12:	4603      	mov	r3, r0
 8023f14:	460c      	mov	r4, r1
 8023f16:	4618      	mov	r0, r3
 8023f18:	4621      	mov	r1, r4
 8023f1a:	f7fc fd7d 	bl	8020a18 <__aeabi_d2f>
 8023f1e:	4603      	mov	r3, r0
 8023f20:	60fb      	str	r3, [r7, #12]

        printf("%f\r\n", data);
 8023f22:	68f8      	ldr	r0, [r7, #12]
 8023f24:	f7fc fa48 	bl	80203b8 <__aeabi_f2d>
 8023f28:	4603      	mov	r3, r0
 8023f2a:	460c      	mov	r4, r1
 8023f2c:	461a      	mov	r2, r3
 8023f2e:	4623      	mov	r3, r4
 8023f30:	480c      	ldr	r0, [pc, #48]	; (8023f64 <_ZN5Print11DistanceLogEv+0x9c>)
 8023f32:	f006 ff69 	bl	802ae08 <iprintf>

        address += 4;
 8023f36:	697b      	ldr	r3, [r7, #20]
 8023f38:	3304      	adds	r3, #4
 8023f3a:	617b      	str	r3, [r7, #20]
    for(uint16_t index = 0; index < LOG_LENGTH; index++)
 8023f3c:	8a7b      	ldrh	r3, [r7, #18]
 8023f3e:	3301      	adds	r3, #1
 8023f40:	827b      	strh	r3, [r7, #18]
 8023f42:	e7cd      	b.n	8023ee0 <_ZN5Print11DistanceLogEv+0x18>
    }
}
 8023f44:	bf00      	nop
 8023f46:	371c      	adds	r7, #28
 8023f48:	46bd      	mov	sp, r7
 8023f4a:	bd90      	pop	{r4, r7, pc}
 8023f4c:	f3af 8000 	nop.w
 8023f50:	88e368f1 	.word	0x88e368f1
 8023f54:	3ee4f8b5 	.word	0x3ee4f8b5
 8023f58:	08008000 	.word	0x08008000
 8023f5c:	000a2c2a 	.word	0x000a2c2a
 8023f60:	4285554d 	.word	0x4285554d
 8023f64:	0802cd20 	.word	0x0802cd20

08023f68 <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 8023f68:	b580      	push	{r7, lr}
 8023f6a:	b084      	sub	sp, #16
 8023f6c:	af00      	add	r7, sp, #0
 8023f6e:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 8023f70:	2300      	movs	r3, #0
 8023f72:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 8023f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8023f78:	4821      	ldr	r0, [pc, #132]	; (8024000 <_ZN12RotarySwitch5StateEv+0x98>)
 8023f7a:	f003 ff67 	bl	8027e4c <HAL_GPIO_ReadPin>
 8023f7e:	4603      	mov	r3, r0
 8023f80:	2b00      	cmp	r3, #0
 8023f82:	bf0c      	ite	eq
 8023f84:	2301      	moveq	r3, #1
 8023f86:	2300      	movne	r3, #0
 8023f88:	b2db      	uxtb	r3, r3
 8023f8a:	2b00      	cmp	r3, #0
 8023f8c:	d003      	beq.n	8023f96 <_ZN12RotarySwitch5StateEv+0x2e>
 8023f8e:	7bfb      	ldrb	r3, [r7, #15]
 8023f90:	f043 0301 	orr.w	r3, r3, #1
 8023f94:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 8023f96:	2104      	movs	r1, #4
 8023f98:	481a      	ldr	r0, [pc, #104]	; (8024004 <_ZN12RotarySwitch5StateEv+0x9c>)
 8023f9a:	f003 ff57 	bl	8027e4c <HAL_GPIO_ReadPin>
 8023f9e:	4603      	mov	r3, r0
 8023fa0:	2b00      	cmp	r3, #0
 8023fa2:	bf0c      	ite	eq
 8023fa4:	2301      	moveq	r3, #1
 8023fa6:	2300      	movne	r3, #0
 8023fa8:	b2db      	uxtb	r3, r3
 8023faa:	2b00      	cmp	r3, #0
 8023fac:	d003      	beq.n	8023fb6 <_ZN12RotarySwitch5StateEv+0x4e>
 8023fae:	7bfb      	ldrb	r3, [r7, #15]
 8023fb0:	f043 0302 	orr.w	r3, r3, #2
 8023fb4:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 8023fb6:	2102      	movs	r1, #2
 8023fb8:	4812      	ldr	r0, [pc, #72]	; (8024004 <_ZN12RotarySwitch5StateEv+0x9c>)
 8023fba:	f003 ff47 	bl	8027e4c <HAL_GPIO_ReadPin>
 8023fbe:	4603      	mov	r3, r0
 8023fc0:	2b00      	cmp	r3, #0
 8023fc2:	bf0c      	ite	eq
 8023fc4:	2301      	moveq	r3, #1
 8023fc6:	2300      	movne	r3, #0
 8023fc8:	b2db      	uxtb	r3, r3
 8023fca:	2b00      	cmp	r3, #0
 8023fcc:	d003      	beq.n	8023fd6 <_ZN12RotarySwitch5StateEv+0x6e>
 8023fce:	7bfb      	ldrb	r3, [r7, #15]
 8023fd0:	f043 0304 	orr.w	r3, r3, #4
 8023fd4:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 8023fd6:	2101      	movs	r1, #1
 8023fd8:	480a      	ldr	r0, [pc, #40]	; (8024004 <_ZN12RotarySwitch5StateEv+0x9c>)
 8023fda:	f003 ff37 	bl	8027e4c <HAL_GPIO_ReadPin>
 8023fde:	4603      	mov	r3, r0
 8023fe0:	2b00      	cmp	r3, #0
 8023fe2:	bf0c      	ite	eq
 8023fe4:	2301      	moveq	r3, #1
 8023fe6:	2300      	movne	r3, #0
 8023fe8:	b2db      	uxtb	r3, r3
 8023fea:	2b00      	cmp	r3, #0
 8023fec:	d003      	beq.n	8023ff6 <_ZN12RotarySwitch5StateEv+0x8e>
 8023fee:	7bfb      	ldrb	r3, [r7, #15]
 8023ff0:	f043 0308 	orr.w	r3, r3, #8
 8023ff4:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 8023ff6:	7bfb      	ldrb	r3, [r7, #15]
 8023ff8:	4618      	mov	r0, r3
 8023ffa:	3710      	adds	r7, #16
 8023ffc:	46bd      	mov	sp, r7
 8023ffe:	bd80      	pop	{r7, pc}
 8024000:	40020000 	.word	0x40020000
 8024004:	40020400 	.word	0x40020400

08024008 <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3ImuP3LedP10LineSensorP9LineTraceP6LoggerP5MotorP5PrintP12RotarySwitchP10SideSensorP15VelocityControl>:
#include "run.hpp"
#include "declare_extern.h"

Run::Run(Encoder *encoder,
 8024008:	b480      	push	{r7}
 802400a:	b085      	sub	sp, #20
 802400c:	af00      	add	r7, sp, #0
 802400e:	60f8      	str	r0, [r7, #12]
 8024010:	60b9      	str	r1, [r7, #8]
 8024012:	607a      	str	r2, [r7, #4]
 8024014:	603b      	str	r3, [r7, #0]
           , run_mode_changed_internal_(false)
           , switch_interval_wait_timer_(0)
           , switch_interval_wait_enable_(true)
           , switch_interval_led_enable_(true)
           , mode_complete_(true)
           , store_log_failed_(true)
 8024016:	68fb      	ldr	r3, [r7, #12]
 8024018:	2200      	movs	r2, #0
 802401a:	701a      	strb	r2, [r3, #0]
 802401c:	68fb      	ldr	r3, [r7, #12]
 802401e:	2200      	movs	r2, #0
 8024020:	705a      	strb	r2, [r3, #1]
 8024022:	68fb      	ldr	r3, [r7, #12]
 8024024:	2200      	movs	r2, #0
 8024026:	709a      	strb	r2, [r3, #2]
 8024028:	68fb      	ldr	r3, [r7, #12]
 802402a:	2201      	movs	r2, #1
 802402c:	70da      	strb	r2, [r3, #3]
 802402e:	68fb      	ldr	r3, [r7, #12]
 8024030:	2201      	movs	r2, #1
 8024032:	711a      	strb	r2, [r3, #4]
 8024034:	68fb      	ldr	r3, [r7, #12]
 8024036:	2201      	movs	r2, #1
 8024038:	715a      	strb	r2, [r3, #5]
 802403a:	68fb      	ldr	r3, [r7, #12]
 802403c:	2201      	movs	r2, #1
 802403e:	719a      	strb	r2, [r3, #6]
{
    encoder_          = encoder;
 8024040:	68fb      	ldr	r3, [r7, #12]
 8024042:	68ba      	ldr	r2, [r7, #8]
 8024044:	609a      	str	r2, [r3, #8]
    flash_            = flash;
 8024046:	68fb      	ldr	r3, [r7, #12]
 8024048:	687a      	ldr	r2, [r7, #4]
 802404a:	60da      	str	r2, [r3, #12]
    iim_42652_        = iim_42652;
 802404c:	68fb      	ldr	r3, [r7, #12]
 802404e:	683a      	ldr	r2, [r7, #0]
 8024050:	611a      	str	r2, [r3, #16]
    imu_              = imu;
 8024052:	68fb      	ldr	r3, [r7, #12]
 8024054:	69ba      	ldr	r2, [r7, #24]
 8024056:	615a      	str	r2, [r3, #20]
    led_              = led;
 8024058:	68fb      	ldr	r3, [r7, #12]
 802405a:	69fa      	ldr	r2, [r7, #28]
 802405c:	619a      	str	r2, [r3, #24]
    line_sensor_      = line_sensor;
 802405e:	68fb      	ldr	r3, [r7, #12]
 8024060:	6a3a      	ldr	r2, [r7, #32]
 8024062:	61da      	str	r2, [r3, #28]
    line_trace_       = line_trace;
 8024064:	68fb      	ldr	r3, [r7, #12]
 8024066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024068:	621a      	str	r2, [r3, #32]
    logger_           = logger;
 802406a:	68fb      	ldr	r3, [r7, #12]
 802406c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802406e:	625a      	str	r2, [r3, #36]	; 0x24
    motor_            = motor;
 8024070:	68fb      	ldr	r3, [r7, #12]
 8024072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024074:	629a      	str	r2, [r3, #40]	; 0x28
    print_            = print;
 8024076:	68fb      	ldr	r3, [r7, #12]
 8024078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802407a:	62da      	str	r2, [r3, #44]	; 0x2c
    rotary_switch_    = rotary_switch;
 802407c:	68fb      	ldr	r3, [r7, #12]
 802407e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024080:	631a      	str	r2, [r3, #48]	; 0x30
    side_sensor_      = side_sensor;
 8024082:	68fb      	ldr	r3, [r7, #12]
 8024084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8024086:	635a      	str	r2, [r3, #52]	; 0x34
    velocity_control_ = velocity_control;
 8024088:	68fb      	ldr	r3, [r7, #12]
 802408a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802408c:	639a      	str	r2, [r3, #56]	; 0x38
}
 802408e:	68fb      	ldr	r3, [r7, #12]
 8024090:	4618      	mov	r0, r3
 8024092:	3714      	adds	r7, #20
 8024094:	46bd      	mov	sp, r7
 8024096:	f85d 7b04 	ldr.w	r7, [sp], #4
 802409a:	4770      	bx	lr

0802409c <_ZN3Run4InitEv>:

void Run::Init()
{
 802409c:	b580      	push	{r7, lr}
 802409e:	b084      	sub	sp, #16
 80240a0:	af00      	add	r7, sp, #0
 80240a2:	6078      	str	r0, [r7, #4]
    line_sensor_->Init();
 80240a4:	687b      	ldr	r3, [r7, #4]
 80240a6:	69db      	ldr	r3, [r3, #28]
 80240a8:	4618      	mov	r0, r3
 80240aa:	f7fd fe5f 	bl	8021d6c <_ZN10LineSensor4InitEv>
    encoder_->Init();
 80240ae:	687b      	ldr	r3, [r7, #4]
 80240b0:	689b      	ldr	r3, [r3, #8]
 80240b2:	4618      	mov	r0, r3
 80240b4:	f7fc fe98 	bl	8020de8 <_ZN7Encoder4InitEv>
    motor_->Init();
 80240b8:	687b      	ldr	r3, [r7, #4]
 80240ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80240bc:	4618      	mov	r0, r3
 80240be:	f7ff fd77 	bl	8023bb0 <_ZN5Motor4InitEv>
    uint8_t imu_init = iim_42652_->Init();
 80240c2:	687b      	ldr	r3, [r7, #4]
 80240c4:	691b      	ldr	r3, [r3, #16]
 80240c6:	4618      	mov	r0, r3
 80240c8:	f7fd f968 	bl	802139c <_ZN8Iim426524InitEv>
 80240cc:	4603      	mov	r3, r0
 80240ce:	73bb      	strb	r3, [r7, #14]

    bool flash_erase = true;
 80240d0:	2301      	movs	r3, #1
 80240d2:	73fb      	strb	r3, [r7, #15]
    uint8_t switch_state = rotary_switch_->State();
 80240d4:	687b      	ldr	r3, [r7, #4]
 80240d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80240d8:	4618      	mov	r0, r3
 80240da:	f7ff ff45 	bl	8023f68 <_ZN12RotarySwitch5StateEv>
 80240de:	4603      	mov	r3, r0
 80240e0:	737b      	strb	r3, [r7, #13]

    if(switch_state == 0x0F)
 80240e2:	7b7b      	ldrb	r3, [r7, #13]
 80240e4:	2b0f      	cmp	r3, #15
 80240e6:	d114      	bne.n	8024112 <_ZN3Run4InitEv+0x76>
    {
        led_->Blink(3, 'R', 'X');
 80240e8:	687b      	ldr	r3, [r7, #4]
 80240ea:	6998      	ldr	r0, [r3, #24]
 80240ec:	2358      	movs	r3, #88	; 0x58
 80240ee:	2252      	movs	r2, #82	; 0x52
 80240f0:	2103      	movs	r1, #3
 80240f2:	f7fd fd2f 	bl	8021b54 <_ZN3Led5BlinkEhcc>
        if(!flash_->Clear()) flash_erase = false;
 80240f6:	687b      	ldr	r3, [r7, #4]
 80240f8:	68db      	ldr	r3, [r3, #12]
 80240fa:	4618      	mov	r0, r3
 80240fc:	f7fc ff78 	bl	8020ff0 <_ZN5Flash5ClearEv>
 8024100:	4603      	mov	r3, r0
 8024102:	f083 0301 	eor.w	r3, r3, #1
 8024106:	b2db      	uxtb	r3, r3
 8024108:	2b00      	cmp	r3, #0
 802410a:	d012      	beq.n	8024132 <_ZN3Run4InitEv+0x96>
 802410c:	2300      	movs	r3, #0
 802410e:	73fb      	strb	r3, [r7, #15]
 8024110:	e00f      	b.n	8024132 <_ZN3Run4InitEv+0x96>
    }
    else if(switch_state == 0x0B)
 8024112:	7b7b      	ldrb	r3, [r7, #13]
 8024114:	2b0b      	cmp	r3, #11
 8024116:	d10c      	bne.n	8024132 <_ZN3Run4InitEv+0x96>
    {
        led_->Blink(3, 'M', 'X');
 8024118:	687b      	ldr	r3, [r7, #4]
 802411a:	6998      	ldr	r0, [r3, #24]
 802411c:	2358      	movs	r3, #88	; 0x58
 802411e:	224d      	movs	r2, #77	; 0x4d
 8024120:	2103      	movs	r1, #3
 8024122:	f7fd fd17 	bl	8021b54 <_ZN3Led5BlinkEhcc>
        print_->Log();
 8024126:	687b      	ldr	r3, [r7, #4]
 8024128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802412a:	4618      	mov	r0, r3
 802412c:	f7ff febc 	bl	8023ea8 <_ZN5Print3LogEv>
        return;
 8024130:	e047      	b.n	80241c2 <_ZN3Run4InitEv+0x126>
    }

#ifdef DEBUG_MODE
    if(switch_state == 0x09 && imu_init == 0x09)
 8024132:	7b7b      	ldrb	r3, [r7, #13]
 8024134:	2b09      	cmp	r3, #9
 8024136:	d115      	bne.n	8024164 <_ZN3Run4InitEv+0xc8>
 8024138:	7bbb      	ldrb	r3, [r7, #14]
 802413a:	2b09      	cmp	r3, #9
 802413c:	d112      	bne.n	8024164 <_ZN3Run4InitEv+0xc8>
    {
        led_->Blink(3, 'B', 'X');
 802413e:	687b      	ldr	r3, [r7, #4]
 8024140:	6998      	ldr	r0, [r3, #24]
 8024142:	2358      	movs	r3, #88	; 0x58
 8024144:	2242      	movs	r2, #66	; 0x42
 8024146:	2103      	movs	r1, #3
 8024148:	f7fd fd04 	bl	8021b54 <_ZN3Led5BlinkEhcc>
        imu_->Calibration();
 802414c:	687b      	ldr	r3, [r7, #4]
 802414e:	695b      	ldr	r3, [r3, #20]
 8024150:	4618      	mov	r0, r3
 8024152:	f7fd fbf7 	bl	8021944 <_ZN3Imu11CalibrationEv>
        led_->ColorOrder('G');
 8024156:	687b      	ldr	r3, [r7, #4]
 8024158:	699b      	ldr	r3, [r3, #24]
 802415a:	2147      	movs	r1, #71	; 0x47
 802415c:	4618      	mov	r0, r3
 802415e:	f7fd fc1d 	bl	802199c <_ZN3Led10ColorOrderEc>
        return;
 8024162:	e02e      	b.n	80241c2 <_ZN3Run4InitEv+0x126>
    }

    g_imu_init = imu_init;
 8024164:	4a18      	ldr	r2, [pc, #96]	; (80241c8 <_ZN3Run4InitEv+0x12c>)
 8024166:	7bbb      	ldrb	r3, [r7, #14]
 8024168:	7013      	strb	r3, [r2, #0]
    g_flash_erase = flash_erase;
 802416a:	7bfa      	ldrb	r2, [r7, #15]
 802416c:	4b17      	ldr	r3, [pc, #92]	; (80241cc <_ZN3Run4InitEv+0x130>)
 802416e:	701a      	strb	r2, [r3, #0]
    g_switch_state = switch_state;
 8024170:	4a17      	ldr	r2, [pc, #92]	; (80241d0 <_ZN3Run4InitEv+0x134>)
 8024172:	7b7b      	ldrb	r3, [r7, #13]
 8024174:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(flash_erase && imu_init == 0x09)
 8024176:	7bfb      	ldrb	r3, [r7, #15]
 8024178:	2b00      	cmp	r3, #0
 802417a:	d012      	beq.n	80241a2 <_ZN3Run4InitEv+0x106>
 802417c:	7bbb      	ldrb	r3, [r7, #14]
 802417e:	2b09      	cmp	r3, #9
 8024180:	d10f      	bne.n	80241a2 <_ZN3Run4InitEv+0x106>
    {
        led_->Rainbow(1);
 8024182:	687b      	ldr	r3, [r7, #4]
 8024184:	699b      	ldr	r3, [r3, #24]
 8024186:	2101      	movs	r1, #1
 8024188:	4618      	mov	r0, r3
 802418a:	f7fd fd10 	bl	8021bae <_ZN3Led7RainbowEh>
        HAL_TIM_Base_Start_IT(&htim2);
 802418e:	4811      	ldr	r0, [pc, #68]	; (80241d4 <_ZN3Run4InitEv+0x138>)
 8024190:	f005 f96d 	bl	802946e <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 8024194:	4810      	ldr	r0, [pc, #64]	; (80241d8 <_ZN3Run4InitEv+0x13c>)
 8024196:	f005 f96a 	bl	802946e <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim7);
 802419a:	4810      	ldr	r0, [pc, #64]	; (80241dc <_ZN3Run4InitEv+0x140>)
 802419c:	f005 f967 	bl	802946e <HAL_TIM_Base_Start_IT>
 80241a0:	e00f      	b.n	80241c2 <_ZN3Run4InitEv+0x126>
    }
    else if(flash_erase) led_->ColorOrder('Y');
 80241a2:	7bfb      	ldrb	r3, [r7, #15]
 80241a4:	2b00      	cmp	r3, #0
 80241a6:	d006      	beq.n	80241b6 <_ZN3Run4InitEv+0x11a>
 80241a8:	687b      	ldr	r3, [r7, #4]
 80241aa:	699b      	ldr	r3, [r3, #24]
 80241ac:	2159      	movs	r1, #89	; 0x59
 80241ae:	4618      	mov	r0, r3
 80241b0:	f7fd fbf4 	bl	802199c <_ZN3Led10ColorOrderEc>
 80241b4:	e005      	b.n	80241c2 <_ZN3Run4InitEv+0x126>
    else led_->ColorOrder('R');
 80241b6:	687b      	ldr	r3, [r7, #4]
 80241b8:	699b      	ldr	r3, [r3, #24]
 80241ba:	2152      	movs	r1, #82	; 0x52
 80241bc:	4618      	mov	r0, r3
 80241be:	f7fd fbed 	bl	802199c <_ZN3Led10ColorOrderEc>
}
 80241c2:	3710      	adds	r7, #16
 80241c4:	46bd      	mov	sp, r7
 80241c6:	bd80      	pop	{r7, pc}
 80241c8:	2000040e 	.word	0x2000040e
 80241cc:	20000481 	.word	0x20000481
 80241d0:	20000480 	.word	0x20000480
 80241d4:	20017548 	.word	0x20017548
 80241d8:	20014458 	.word	0x20014458
 80241dc:	200175c8 	.word	0x200175c8

080241e0 <_ZN3Run6Timer7Ev>:

void Run::Timer7()
{
 80241e0:	b580      	push	{r7, lr}
 80241e2:	b082      	sub	sp, #8
 80241e4:	af00      	add	r7, sp, #0
 80241e6:	6078      	str	r0, [r7, #4]
    line_sensor_->StoreConsecutiveBuff();
 80241e8:	687b      	ldr	r3, [r7, #4]
 80241ea:	69db      	ldr	r3, [r3, #28]
 80241ec:	4618      	mov	r0, r3
 80241ee:	f7fd fdf7 	bl	8021de0 <_ZN10LineSensor20StoreConsecutiveBuffEv>
}
 80241f2:	bf00      	nop
 80241f4:	3708      	adds	r7, #8
 80241f6:	46bd      	mov	sp, r7
 80241f8:	bd80      	pop	{r7, pc}
	...

080241fc <_ZN3Run6Timer2Ev>:

void Run::Timer2()
{
 80241fc:	b580      	push	{r7, lr}
 80241fe:	b084      	sub	sp, #16
 8024200:	af00      	add	r7, sp, #0
 8024202:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = rotary_switch_->State();
 8024204:	687b      	ldr	r3, [r7, #4]
 8024206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024208:	4618      	mov	r0, r3
 802420a:	f7ff fead 	bl	8023f68 <_ZN12RotarySwitch5StateEv>
 802420e:	4603      	mov	r3, r0
 8024210:	73fb      	strb	r3, [r7, #15]
    static uint8_t pre_switch_state = switch_state;
 8024212:	4b2c      	ldr	r3, [pc, #176]	; (80242c4 <_ZN3Run6Timer2Ev+0xc8>)
 8024214:	781b      	ldrb	r3, [r3, #0]
 8024216:	f3bf 8f5b 	dmb	ish
 802421a:	b2db      	uxtb	r3, r3
 802421c:	f003 0301 	and.w	r3, r3, #1
 8024220:	2b00      	cmp	r3, #0
 8024222:	bf0c      	ite	eq
 8024224:	2301      	moveq	r3, #1
 8024226:	2300      	movne	r3, #0
 8024228:	b2db      	uxtb	r3, r3
 802422a:	2b00      	cmp	r3, #0
 802422c:	d010      	beq.n	8024250 <_ZN3Run6Timer2Ev+0x54>
 802422e:	4825      	ldr	r0, [pc, #148]	; (80242c4 <_ZN3Run6Timer2Ev+0xc8>)
 8024230:	f006 f940 	bl	802a4b4 <__cxa_guard_acquire>
 8024234:	4603      	mov	r3, r0
 8024236:	2b00      	cmp	r3, #0
 8024238:	bf14      	ite	ne
 802423a:	2301      	movne	r3, #1
 802423c:	2300      	moveq	r3, #0
 802423e:	b2db      	uxtb	r3, r3
 8024240:	2b00      	cmp	r3, #0
 8024242:	d005      	beq.n	8024250 <_ZN3Run6Timer2Ev+0x54>
 8024244:	4a20      	ldr	r2, [pc, #128]	; (80242c8 <_ZN3Run6Timer2Ev+0xcc>)
 8024246:	7bfb      	ldrb	r3, [r7, #15]
 8024248:	7013      	strb	r3, [r2, #0]
 802424a:	481e      	ldr	r0, [pc, #120]	; (80242c4 <_ZN3Run6Timer2Ev+0xc8>)
 802424c:	f006 f93e 	bl	802a4cc <__cxa_guard_release>
    static bool interval_enable = true;

#ifdef DEBUG_MODE
    g_switch_state = switch_state;
 8024250:	4a1e      	ldr	r2, [pc, #120]	; (80242cc <_ZN3Run6Timer2Ev+0xd0>)
 8024252:	7bfb      	ldrb	r3, [r7, #15]
 8024254:	7013      	strb	r3, [r2, #0]
    g_interval_enable = interval_enable;
 8024256:	4b1e      	ldr	r3, [pc, #120]	; (80242d0 <_ZN3Run6Timer2Ev+0xd4>)
 8024258:	781a      	ldrb	r2, [r3, #0]
 802425a:	4b1e      	ldr	r3, [pc, #120]	; (80242d4 <_ZN3Run6Timer2Ev+0xd8>)
 802425c:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

    if(switch_state != pre_switch_state)
 802425e:	4b1a      	ldr	r3, [pc, #104]	; (80242c8 <_ZN3Run6Timer2Ev+0xcc>)
 8024260:	781b      	ldrb	r3, [r3, #0]
 8024262:	7bfa      	ldrb	r2, [r7, #15]
 8024264:	429a      	cmp	r2, r3
 8024266:	d00f      	beq.n	8024288 <_ZN3Run6Timer2Ev+0x8c>
    {
        SetRunMode(STANDBY);
 8024268:	2100      	movs	r1, #0
 802426a:	6878      	ldr	r0, [r7, #4]
 802426c:	f000 f89a 	bl	80243a4 <_ZN3Run10SetRunModeEh>
        WhenSwitchChange();
 8024270:	6878      	ldr	r0, [r7, #4]
 8024272:	f000 f8bf 	bl	80243f4 <_ZN3Run16WhenSwitchChangeEv>
        led_->ResetInterrupt();
 8024276:	687b      	ldr	r3, [r7, #4]
 8024278:	699b      	ldr	r3, [r3, #24]
 802427a:	4618      	mov	r0, r3
 802427c:	f7fd fd25 	bl	8021cca <_ZN3Led14ResetInterruptEv>
        interval_enable = true;
 8024280:	4b13      	ldr	r3, [pc, #76]	; (80242d0 <_ZN3Run6Timer2Ev+0xd4>)
 8024282:	2201      	movs	r2, #1
 8024284:	701a      	strb	r2, [r3, #0]
 8024286:	e016      	b.n	80242b6 <_ZN3Run6Timer2Ev+0xba>
    }
    else if(interval_enable)
 8024288:	4b11      	ldr	r3, [pc, #68]	; (80242d0 <_ZN3Run6Timer2Ev+0xd4>)
 802428a:	781b      	ldrb	r3, [r3, #0]
 802428c:	2b00      	cmp	r3, #0
 802428e:	d00d      	beq.n	80242ac <_ZN3Run6Timer2Ev+0xb0>
    {
        SetRunMode(STANDBY);
 8024290:	2100      	movs	r1, #0
 8024292:	6878      	ldr	r0, [r7, #4]
 8024294:	f000 f886 	bl	80243a4 <_ZN3Run10SetRunModeEh>
        interval_enable = SwitchChangeInterval(switch_state);
 8024298:	7bfb      	ldrb	r3, [r7, #15]
 802429a:	4619      	mov	r1, r3
 802429c:	6878      	ldr	r0, [r7, #4]
 802429e:	f000 f8bf 	bl	8024420 <_ZN3Run20SwitchChangeIntervalEh>
 80242a2:	4603      	mov	r3, r0
 80242a4:	461a      	mov	r2, r3
 80242a6:	4b0a      	ldr	r3, [pc, #40]	; (80242d0 <_ZN3Run6Timer2Ev+0xd4>)
 80242a8:	701a      	strb	r2, [r3, #0]
 80242aa:	e004      	b.n	80242b6 <_ZN3Run6Timer2Ev+0xba>
    }
    else UpdateRunMode(switch_state);
 80242ac:	7bfb      	ldrb	r3, [r7, #15]
 80242ae:	4619      	mov	r1, r3
 80242b0:	6878      	ldr	r0, [r7, #4]
 80242b2:	f000 f811 	bl	80242d8 <_ZN3Run13UpdateRunModeEh>

    pre_switch_state = switch_state;
 80242b6:	4a04      	ldr	r2, [pc, #16]	; (80242c8 <_ZN3Run6Timer2Ev+0xcc>)
 80242b8:	7bfb      	ldrb	r3, [r7, #15]
 80242ba:	7013      	strb	r3, [r2, #0]
}
 80242bc:	bf00      	nop
 80242be:	3710      	adds	r7, #16
 80242c0:	46bd      	mov	sp, r7
 80242c2:	bd80      	pop	{r7, pc}
 80242c4:	20000484 	.word	0x20000484
 80242c8:	20000482 	.word	0x20000482
 80242cc:	20000480 	.word	0x20000480
 80242d0:	20000001 	.word	0x20000001
 80242d4:	20000000 	.word	0x20000000

080242d8 <_ZN3Run13UpdateRunModeEh>:

void Run::UpdateRunMode(uint8_t switch_state)
{
 80242d8:	b580      	push	{r7, lr}
 80242da:	b082      	sub	sp, #8
 80242dc:	af00      	add	r7, sp, #0
 80242de:	6078      	str	r0, [r7, #4]
 80242e0:	460b      	mov	r3, r1
 80242e2:	70fb      	strb	r3, [r7, #3]
    if(run_mode_changed_internal_) return;
 80242e4:	687b      	ldr	r3, [r7, #4]
 80242e6:	785b      	ldrb	r3, [r3, #1]
 80242e8:	2b00      	cmp	r3, #0
 80242ea:	d156      	bne.n	802439a <_ZN3Run13UpdateRunModeEh+0xc2>

    switch(switch_state)
 80242ec:	78fb      	ldrb	r3, [r7, #3]
 80242ee:	3b01      	subs	r3, #1
 80242f0:	2b0d      	cmp	r3, #13
 80242f2:	d84c      	bhi.n	802438e <_ZN3Run13UpdateRunModeEh+0xb6>
 80242f4:	a201      	add	r2, pc, #4	; (adr r2, 80242fc <_ZN3Run13UpdateRunModeEh+0x24>)
 80242f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80242fa:	bf00      	nop
 80242fc:	08024353 	.word	0x08024353
 8024300:	08024349 	.word	0x08024349
 8024304:	08024335 	.word	0x08024335
 8024308:	0802433f 	.word	0x0802433f
 802430c:	0802438f 	.word	0x0802438f
 8024310:	08024385 	.word	0x08024385
 8024314:	0802438f 	.word	0x0802438f
 8024318:	0802437b 	.word	0x0802437b
 802431c:	0802438f 	.word	0x0802438f
 8024320:	08024371 	.word	0x08024371
 8024324:	0802438f 	.word	0x0802438f
 8024328:	08024367 	.word	0x08024367
 802432c:	0802438f 	.word	0x0802438f
 8024330:	0802435d 	.word	0x0802435d
    {
#ifdef DEBUG_MODE
        case 0x03: SetRunMode(RAM_LOG); break;
 8024334:	2103      	movs	r1, #3
 8024336:	6878      	ldr	r0, [r7, #4]
 8024338:	f000 f834 	bl	80243a4 <_ZN3Run10SetRunModeEh>
 802433c:	e02e      	b.n	802439c <_ZN3Run13UpdateRunModeEh+0xc4>
        case 0x04: SetRunMode(RAM_DEV); break;
 802433e:	2104      	movs	r1, #4
 8024340:	6878      	ldr	r0, [r7, #4]
 8024342:	f000 f82f 	bl	80243a4 <_ZN3Run10SetRunModeEh>
 8024346:	e029      	b.n	802439c <_ZN3Run13UpdateRunModeEh+0xc4>
        //case 0x03: SetRunMode(GYRO_TEST); break;
        case 0x02: SetRunMode(LINE_TRACE_DEBUG); break;
 8024348:	2102      	movs	r1, #2
 802434a:	6878      	ldr	r0, [r7, #4]
 802434c:	f000 f82a 	bl	80243a4 <_ZN3Run10SetRunModeEh>
 8024350:	e024      	b.n	802439c <_ZN3Run13UpdateRunModeEh+0xc4>
        case 0x01: SetRunMode(VELOCITY_CONTROL_DEBUG); break;
 8024352:	2101      	movs	r1, #1
 8024354:	6878      	ldr	r0, [r7, #4]
 8024356:	f000 f825 	bl	80243a4 <_ZN3Run10SetRunModeEh>
 802435a:	e01f      	b.n	802439c <_ZN3Run13UpdateRunModeEh+0xc4>
#else // DEBUG_MODE
        case 0x02: SetRunMode(LINE_TRACE); break;
        case 0x01: SetRunMode(VELOCITY_CONTROL); break;
#endif // DEBUG_MODE

        case 0x0E: SetRunMode(READY); break;
 802435c:	210e      	movs	r1, #14
 802435e:	6878      	ldr	r0, [r7, #4]
 8024360:	f000 f820 	bl	80243a4 <_ZN3Run10SetRunModeEh>
 8024364:	e01a      	b.n	802439c <_ZN3Run13UpdateRunModeEh+0xc4>
        case 0x0C: SetRunMode(DEV); break;
 8024366:	210c      	movs	r1, #12
 8024368:	6878      	ldr	r0, [r7, #4]
 802436a:	f000 f81b 	bl	80243a4 <_ZN3Run10SetRunModeEh>
 802436e:	e015      	b.n	802439c <_ZN3Run13UpdateRunModeEh+0xc4>
        case 0x0A: SetRunMode(DEV_ACCEL); break;
 8024370:	210a      	movs	r1, #10
 8024372:	6878      	ldr	r0, [r7, #4]
 8024374:	f000 f816 	bl	80243a4 <_ZN3Run10SetRunModeEh>
 8024378:	e010      	b.n	802439c <_ZN3Run13UpdateRunModeEh+0xc4>
        case 0x08: SetRunMode(THIRD_RUN); break;
 802437a:	2108      	movs	r1, #8
 802437c:	6878      	ldr	r0, [r7, #4]
 802437e:	f000 f811 	bl	80243a4 <_ZN3Run10SetRunModeEh>
 8024382:	e00b      	b.n	802439c <_ZN3Run13UpdateRunModeEh+0xc4>
        case 0x06: SetRunMode(FORTH_RUN); break;
 8024384:	2106      	movs	r1, #6
 8024386:	6878      	ldr	r0, [r7, #4]
 8024388:	f000 f80c 	bl	80243a4 <_ZN3Run10SetRunModeEh>
 802438c:	e006      	b.n	802439c <_ZN3Run13UpdateRunModeEh+0xc4>
        //case 0x04: SetRunMode(FIFTH_RUN); break;
        default:   SetRunMode(STANDBY); break;
 802438e:	2100      	movs	r1, #0
 8024390:	6878      	ldr	r0, [r7, #4]
 8024392:	f000 f807 	bl	80243a4 <_ZN3Run10SetRunModeEh>
 8024396:	bf00      	nop
 8024398:	e000      	b.n	802439c <_ZN3Run13UpdateRunModeEh+0xc4>
    if(run_mode_changed_internal_) return;
 802439a:	bf00      	nop
    }
}
 802439c:	3708      	adds	r7, #8
 802439e:	46bd      	mov	sp, r7
 80243a0:	bd80      	pop	{r7, pc}
 80243a2:	bf00      	nop

080243a4 <_ZN3Run10SetRunModeEh>:

void Run::SetRunMode(uint8_t mode)
{
 80243a4:	b480      	push	{r7}
 80243a6:	b083      	sub	sp, #12
 80243a8:	af00      	add	r7, sp, #0
 80243aa:	6078      	str	r0, [r7, #4]
 80243ac:	460b      	mov	r3, r1
 80243ae:	70fb      	strb	r3, [r7, #3]
    run_mode_ = mode;
 80243b0:	687b      	ldr	r3, [r7, #4]
 80243b2:	78fa      	ldrb	r2, [r7, #3]
 80243b4:	701a      	strb	r2, [r3, #0]
}
 80243b6:	bf00      	nop
 80243b8:	370c      	adds	r7, #12
 80243ba:	46bd      	mov	sp, r7
 80243bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243c0:	4770      	bx	lr
	...

080243c4 <_ZN3Run25SetRunModeChangedInternalEb>:

void Run::SetRunModeChangedInternal(bool boolean)
{
 80243c4:	b480      	push	{r7}
 80243c6:	b083      	sub	sp, #12
 80243c8:	af00      	add	r7, sp, #0
 80243ca:	6078      	str	r0, [r7, #4]
 80243cc:	460b      	mov	r3, r1
 80243ce:	70fb      	strb	r3, [r7, #3]
    run_mode_changed_internal_ = boolean;
 80243d0:	687b      	ldr	r3, [r7, #4]
 80243d2:	78fa      	ldrb	r2, [r7, #3]
 80243d4:	705a      	strb	r2, [r3, #1]

#ifdef DEBUG_MODE
    g_run_mode_changed_internal_cnt++;
 80243d6:	4b06      	ldr	r3, [pc, #24]	; (80243f0 <_ZN3Run25SetRunModeChangedInternalEb+0x2c>)
 80243d8:	781b      	ldrb	r3, [r3, #0]
 80243da:	3301      	adds	r3, #1
 80243dc:	b2da      	uxtb	r2, r3
 80243de:	4b04      	ldr	r3, [pc, #16]	; (80243f0 <_ZN3Run25SetRunModeChangedInternalEb+0x2c>)
 80243e0:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE
}
 80243e2:	bf00      	nop
 80243e4:	370c      	adds	r7, #12
 80243e6:	46bd      	mov	sp, r7
 80243e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243ec:	4770      	bx	lr
 80243ee:	bf00      	nop
 80243f0:	20000268 	.word	0x20000268

080243f4 <_ZN3Run16WhenSwitchChangeEv>:

void Run::WhenSwitchChange()
{
 80243f4:	b580      	push	{r7, lr}
 80243f6:	b082      	sub	sp, #8
 80243f8:	af00      	add	r7, sp, #0
 80243fa:	6078      	str	r0, [r7, #4]
    SetRunModeChangedInternal(false);
 80243fc:	2100      	movs	r1, #0
 80243fe:	6878      	ldr	r0, [r7, #4]
 8024400:	f7ff ffe0 	bl	80243c4 <_ZN3Run25SetRunModeChangedInternalEb>
    switch_interval_led_enable_ = true;
 8024404:	687b      	ldr	r3, [r7, #4]
 8024406:	2201      	movs	r2, #1
 8024408:	711a      	strb	r2, [r3, #4]
    switch_interval_wait_enable_ = true;
 802440a:	687b      	ldr	r3, [r7, #4]
 802440c:	2201      	movs	r2, #1
 802440e:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_timer_ = 0;
 8024410:	687b      	ldr	r3, [r7, #4]
 8024412:	2200      	movs	r2, #0
 8024414:	709a      	strb	r2, [r3, #2]
}
 8024416:	bf00      	nop
 8024418:	3708      	adds	r7, #8
 802441a:	46bd      	mov	sp, r7
 802441c:	bd80      	pop	{r7, pc}
	...

08024420 <_ZN3Run20SwitchChangeIntervalEh>:

bool Run::SwitchChangeInterval(uint8_t switch_state)
{
 8024420:	b580      	push	{r7, lr}
 8024422:	b084      	sub	sp, #16
 8024424:	af00      	add	r7, sp, #0
 8024426:	6078      	str	r0, [r7, #4]
 8024428:	460b      	mov	r3, r1
 802442a:	70fb      	strb	r3, [r7, #3]
    uint8_t wait_timer = switch_interval_wait_timer_;
 802442c:	687b      	ldr	r3, [r7, #4]
 802442e:	789b      	ldrb	r3, [r3, #2]
 8024430:	73fb      	strb	r3, [r7, #15]
    bool wait_enable = switch_interval_wait_enable_;
 8024432:	687b      	ldr	r3, [r7, #4]
 8024434:	78db      	ldrb	r3, [r3, #3]
 8024436:	73bb      	strb	r3, [r7, #14]
    bool led_enable = switch_interval_led_enable_;
 8024438:	687b      	ldr	r3, [r7, #4]
 802443a:	791b      	ldrb	r3, [r3, #4]
 802443c:	737b      	strb	r3, [r7, #13]
    bool interval_continue = true;
 802443e:	2301      	movs	r3, #1
 8024440:	733b      	strb	r3, [r7, #12]

    if(led_enable)
 8024442:	7b7b      	ldrb	r3, [r7, #13]
 8024444:	2b00      	cmp	r3, #0
 8024446:	f000 8096 	beq.w	8024576 <_ZN3Run20SwitchChangeIntervalEh+0x156>
    {
        switch(switch_state)
 802444a:	78fb      	ldrb	r3, [r7, #3]
 802444c:	3b01      	subs	r3, #1
 802444e:	2b0e      	cmp	r3, #14
 8024450:	f200 8086 	bhi.w	8024560 <_ZN3Run20SwitchChangeIntervalEh+0x140>
 8024454:	a201      	add	r2, pc, #4	; (adr r2, 802445c <_ZN3Run20SwitchChangeIntervalEh+0x3c>)
 8024456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802445a:	bf00      	nop
 802445c:	080244fd 	.word	0x080244fd
 8024460:	08024511 	.word	0x08024511
 8024464:	0802454d 	.word	0x0802454d
 8024468:	08024561 	.word	0x08024561
 802446c:	08024561 	.word	0x08024561
 8024470:	08024561 	.word	0x08024561
 8024474:	08024525 	.word	0x08024525
 8024478:	08024539 	.word	0x08024539
 802447c:	08024561 	.word	0x08024561
 8024480:	08024499 	.word	0x08024499
 8024484:	080244ad 	.word	0x080244ad
 8024488:	080244c1 	.word	0x080244c1
 802448c:	080244d5 	.word	0x080244d5
 8024490:	08024561 	.word	0x08024561
 8024494:	080244e9 	.word	0x080244e9
        {
#ifdef DEBUG_MODE
            case 0x0A: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 8024498:	687b      	ldr	r3, [r7, #4]
 802449a:	6998      	ldr	r0, [r3, #24]
 802449c:	2342      	movs	r3, #66	; 0x42
 802449e:	2247      	movs	r2, #71	; 0x47
 80244a0:	2103      	movs	r1, #3
 80244a2:	f7fd fbc8 	bl	8021c36 <_ZN3Led14BlinkInterruptEhcc>
 80244a6:	4603      	mov	r3, r0
 80244a8:	737b      	strb	r3, [r7, #13]
 80244aa:	e075      	b.n	8024598 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x0B: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 80244ac:	687b      	ldr	r3, [r7, #4]
 80244ae:	6998      	ldr	r0, [r3, #24]
 80244b0:	2359      	movs	r3, #89	; 0x59
 80244b2:	2247      	movs	r2, #71	; 0x47
 80244b4:	2103      	movs	r1, #3
 80244b6:	f7fd fbbe 	bl	8021c36 <_ZN3Led14BlinkInterruptEhcc>
 80244ba:	4603      	mov	r3, r0
 80244bc:	737b      	strb	r3, [r7, #13]
 80244be:	e06b      	b.n	8024598 <_ZN3Run20SwitchChangeIntervalEh+0x178>
#endif // DEBUG_MODE

            case 0x0C: led_enable = led_->BlinkInterrupt(3, 'B', 'M'); break;
 80244c0:	687b      	ldr	r3, [r7, #4]
 80244c2:	6998      	ldr	r0, [r3, #24]
 80244c4:	234d      	movs	r3, #77	; 0x4d
 80244c6:	2242      	movs	r2, #66	; 0x42
 80244c8:	2103      	movs	r1, #3
 80244ca:	f7fd fbb4 	bl	8021c36 <_ZN3Led14BlinkInterruptEhcc>
 80244ce:	4603      	mov	r3, r0
 80244d0:	737b      	strb	r3, [r7, #13]
 80244d2:	e061      	b.n	8024598 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x0D: led_enable = led_->BlinkInterrupt(3, 'G', 'X'); break;
 80244d4:	687b      	ldr	r3, [r7, #4]
 80244d6:	6998      	ldr	r0, [r3, #24]
 80244d8:	2358      	movs	r3, #88	; 0x58
 80244da:	2247      	movs	r2, #71	; 0x47
 80244dc:	2103      	movs	r1, #3
 80244de:	f7fd fbaa 	bl	8021c36 <_ZN3Led14BlinkInterruptEhcc>
 80244e2:	4603      	mov	r3, r0
 80244e4:	737b      	strb	r3, [r7, #13]
 80244e6:	e057      	b.n	8024598 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x0F: led_enable = led_->BlinkInterrupt(3, 'Y', 'X'); break;
 80244e8:	687b      	ldr	r3, [r7, #4]
 80244ea:	6998      	ldr	r0, [r3, #24]
 80244ec:	2358      	movs	r3, #88	; 0x58
 80244ee:	2259      	movs	r2, #89	; 0x59
 80244f0:	2103      	movs	r1, #3
 80244f2:	f7fd fba0 	bl	8021c36 <_ZN3Led14BlinkInterruptEhcc>
 80244f6:	4603      	mov	r3, r0
 80244f8:	737b      	strb	r3, [r7, #13]
 80244fa:	e04d      	b.n	8024598 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x01: led_enable = led_->BlinkInterrupt(3, 'B', 'X'); break;
 80244fc:	687b      	ldr	r3, [r7, #4]
 80244fe:	6998      	ldr	r0, [r3, #24]
 8024500:	2358      	movs	r3, #88	; 0x58
 8024502:	2242      	movs	r2, #66	; 0x42
 8024504:	2103      	movs	r1, #3
 8024506:	f7fd fb96 	bl	8021c36 <_ZN3Led14BlinkInterruptEhcc>
 802450a:	4603      	mov	r3, r0
 802450c:	737b      	strb	r3, [r7, #13]
 802450e:	e043      	b.n	8024598 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x02: led_enable = led_->BlinkInterrupt(3, 'M', 'X'); break;
 8024510:	687b      	ldr	r3, [r7, #4]
 8024512:	6998      	ldr	r0, [r3, #24]
 8024514:	2358      	movs	r3, #88	; 0x58
 8024516:	224d      	movs	r2, #77	; 0x4d
 8024518:	2103      	movs	r1, #3
 802451a:	f7fd fb8c 	bl	8021c36 <_ZN3Led14BlinkInterruptEhcc>
 802451e:	4603      	mov	r3, r0
 8024520:	737b      	strb	r3, [r7, #13]
 8024522:	e039      	b.n	8024598 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x07: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 8024524:	687b      	ldr	r3, [r7, #4]
 8024526:	6998      	ldr	r0, [r3, #24]
 8024528:	2342      	movs	r3, #66	; 0x42
 802452a:	2247      	movs	r2, #71	; 0x47
 802452c:	2103      	movs	r1, #3
 802452e:	f7fd fb82 	bl	8021c36 <_ZN3Led14BlinkInterruptEhcc>
 8024532:	4603      	mov	r3, r0
 8024534:	737b      	strb	r3, [r7, #13]
 8024536:	e02f      	b.n	8024598 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x08: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 8024538:	687b      	ldr	r3, [r7, #4]
 802453a:	6998      	ldr	r0, [r3, #24]
 802453c:	2359      	movs	r3, #89	; 0x59
 802453e:	2247      	movs	r2, #71	; 0x47
 8024540:	2103      	movs	r1, #3
 8024542:	f7fd fb78 	bl	8021c36 <_ZN3Led14BlinkInterruptEhcc>
 8024546:	4603      	mov	r3, r0
 8024548:	737b      	strb	r3, [r7, #13]
 802454a:	e025      	b.n	8024598 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x03: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 802454c:	687b      	ldr	r3, [r7, #4]
 802454e:	6998      	ldr	r0, [r3, #24]
 8024550:	2342      	movs	r3, #66	; 0x42
 8024552:	2247      	movs	r2, #71	; 0x47
 8024554:	2103      	movs	r1, #3
 8024556:	f7fd fb6e 	bl	8021c36 <_ZN3Led14BlinkInterruptEhcc>
 802455a:	4603      	mov	r3, r0
 802455c:	737b      	strb	r3, [r7, #13]
 802455e:	e01b      	b.n	8024598 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            default:   led_enable = led_->BlinkInterrupt(3, 'X', 'W'); break;
 8024560:	687b      	ldr	r3, [r7, #4]
 8024562:	6998      	ldr	r0, [r3, #24]
 8024564:	2357      	movs	r3, #87	; 0x57
 8024566:	2258      	movs	r2, #88	; 0x58
 8024568:	2103      	movs	r1, #3
 802456a:	f7fd fb64 	bl	8021c36 <_ZN3Led14BlinkInterruptEhcc>
 802456e:	4603      	mov	r3, r0
 8024570:	737b      	strb	r3, [r7, #13]
 8024572:	bf00      	nop
 8024574:	e010      	b.n	8024598 <_ZN3Run20SwitchChangeIntervalEh+0x178>
        }
    }
    else if(wait_enable)
 8024576:	7bbb      	ldrb	r3, [r7, #14]
 8024578:	2b00      	cmp	r3, #0
 802457a:	d00b      	beq.n	8024594 <_ZN3Run20SwitchChangeIntervalEh+0x174>
    {
        if(wait_timer < SWITCH_INTERVAL_WAIT_TIME)
 802457c:	7bfb      	ldrb	r3, [r7, #15]
 802457e:	2bc7      	cmp	r3, #199	; 0xc7
 8024580:	d805      	bhi.n	802458e <_ZN3Run20SwitchChangeIntervalEh+0x16e>
        {
            wait_timer++;
 8024582:	7bfb      	ldrb	r3, [r7, #15]
 8024584:	3301      	adds	r3, #1
 8024586:	73fb      	strb	r3, [r7, #15]
            wait_enable = true;
 8024588:	2301      	movs	r3, #1
 802458a:	73bb      	strb	r3, [r7, #14]
 802458c:	e004      	b.n	8024598 <_ZN3Run20SwitchChangeIntervalEh+0x178>
        }
        else wait_enable = false;
 802458e:	2300      	movs	r3, #0
 8024590:	73bb      	strb	r3, [r7, #14]
 8024592:	e001      	b.n	8024598 <_ZN3Run20SwitchChangeIntervalEh+0x178>
    }
    else interval_continue = false;
 8024594:	2300      	movs	r3, #0
 8024596:	733b      	strb	r3, [r7, #12]
    
    switch_interval_led_enable_ = led_enable;
 8024598:	687b      	ldr	r3, [r7, #4]
 802459a:	7b7a      	ldrb	r2, [r7, #13]
 802459c:	711a      	strb	r2, [r3, #4]
    switch_interval_wait_enable_ = wait_enable;
 802459e:	687b      	ldr	r3, [r7, #4]
 80245a0:	7bba      	ldrb	r2, [r7, #14]
 80245a2:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_timer_ = wait_timer;
 80245a4:	687b      	ldr	r3, [r7, #4]
 80245a6:	7bfa      	ldrb	r2, [r7, #15]
 80245a8:	709a      	strb	r2, [r3, #2]

    return interval_continue;
 80245aa:	7b3b      	ldrb	r3, [r7, #12]
}
 80245ac:	4618      	mov	r0, r3
 80245ae:	3710      	adds	r7, #16
 80245b0:	46bd      	mov	sp, r7
 80245b2:	bd80      	pop	{r7, pc}

080245b4 <_ZN3Run13EmergencyStopEv>:

bool Run::EmergencyStop()
{
 80245b4:	b580      	push	{r7, lr}
 80245b6:	b084      	sub	sp, #16
 80245b8:	af00      	add	r7, sp, #0
 80245ba:	6078      	str	r0, [r7, #4]
    static uint8_t emergency_timer = 0;
    bool line_emergency = line_sensor_->GetEmergencyStopFlag();
 80245bc:	687b      	ldr	r3, [r7, #4]
 80245be:	69db      	ldr	r3, [r3, #28]
 80245c0:	4618      	mov	r0, r3
 80245c2:	f7fd fe53 	bl	802226c <_ZN10LineSensor20GetEmergencyStopFlagEv>
 80245c6:	4603      	mov	r3, r0
 80245c8:	73fb      	strb	r3, [r7, #15]

    if(emergency_timer >= EMERGENCY_STOP_TIME)
 80245ca:	4b0e      	ldr	r3, [pc, #56]	; (8024604 <_ZN3Run13EmergencyStopEv+0x50>)
 80245cc:	781b      	ldrb	r3, [r3, #0]
 80245ce:	2b04      	cmp	r3, #4
 80245d0:	d905      	bls.n	80245de <_ZN3Run13EmergencyStopEv+0x2a>
    {
        SetRunMode(EMERGENCY);
 80245d2:	21ee      	movs	r1, #238	; 0xee
 80245d4:	6878      	ldr	r0, [r7, #4]
 80245d6:	f7ff fee5 	bl	80243a4 <_ZN3Run10SetRunModeEh>
        return true;
 80245da:	2301      	movs	r3, #1
 80245dc:	e00d      	b.n	80245fa <_ZN3Run13EmergencyStopEv+0x46>
    }
    else if(line_emergency) emergency_timer++;
 80245de:	7bfb      	ldrb	r3, [r7, #15]
 80245e0:	2b00      	cmp	r3, #0
 80245e2:	d006      	beq.n	80245f2 <_ZN3Run13EmergencyStopEv+0x3e>
 80245e4:	4b07      	ldr	r3, [pc, #28]	; (8024604 <_ZN3Run13EmergencyStopEv+0x50>)
 80245e6:	781b      	ldrb	r3, [r3, #0]
 80245e8:	3301      	adds	r3, #1
 80245ea:	b2da      	uxtb	r2, r3
 80245ec:	4b05      	ldr	r3, [pc, #20]	; (8024604 <_ZN3Run13EmergencyStopEv+0x50>)
 80245ee:	701a      	strb	r2, [r3, #0]
 80245f0:	e002      	b.n	80245f8 <_ZN3Run13EmergencyStopEv+0x44>
    else emergency_timer = 0;
 80245f2:	4b04      	ldr	r3, [pc, #16]	; (8024604 <_ZN3Run13EmergencyStopEv+0x50>)
 80245f4:	2200      	movs	r2, #0
 80245f6:	701a      	strb	r2, [r3, #0]

    return false;
 80245f8:	2300      	movs	r3, #0
}
 80245fa:	4618      	mov	r0, r3
 80245fc:	3710      	adds	r7, #16
 80245fe:	46bd      	mov	sp, r7
 8024600:	bd80      	pop	{r7, pc}
 8024602:	bf00      	nop
 8024604:	20000488 	.word	0x20000488

08024608 <_ZN3Run7RunModeEv>:

void Run::RunMode()
{
 8024608:	b580      	push	{r7, lr}
 802460a:	b082      	sub	sp, #8
 802460c:	af00      	add	r7, sp, #0
 802460e:	6078      	str	r0, [r7, #4]
    switch(run_mode_)
 8024610:	687b      	ldr	r3, [r7, #4]
 8024612:	781b      	ldrb	r3, [r3, #0]
 8024614:	2b0c      	cmp	r3, #12
 8024616:	d037      	beq.n	8024688 <_ZN3Run7RunModeEv+0x80>
 8024618:	2b0c      	cmp	r3, #12
 802461a:	dc0f      	bgt.n	802463c <_ZN3Run7RunModeEv+0x34>
 802461c:	2b02      	cmp	r3, #2
 802461e:	d01f      	beq.n	8024660 <_ZN3Run7RunModeEv+0x58>
 8024620:	2b02      	cmp	r3, #2
 8024622:	dc04      	bgt.n	802462e <_ZN3Run7RunModeEv+0x26>
 8024624:	2b00      	cmp	r3, #0
 8024626:	d027      	beq.n	8024678 <_ZN3Run7RunModeEv+0x70>
 8024628:	2b01      	cmp	r3, #1
 802462a:	d01d      	beq.n	8024668 <_ZN3Run7RunModeEv+0x60>
 802462c:	e050      	b.n	80246d0 <_ZN3Run7RunModeEv+0xc8>
 802462e:	2b04      	cmp	r3, #4
 8024630:	d04a      	beq.n	80246c8 <_ZN3Run7RunModeEv+0xc0>
 8024632:	2b04      	cmp	r3, #4
 8024634:	db44      	blt.n	80246c0 <_ZN3Run7RunModeEv+0xb8>
 8024636:	2b0a      	cmp	r3, #10
 8024638:	d02a      	beq.n	8024690 <_ZN3Run7RunModeEv+0x88>
 802463a:	e049      	b.n	80246d0 <_ZN3Run7RunModeEv+0xc8>
 802463c:	2bca      	cmp	r3, #202	; 0xca
 802463e:	d02b      	beq.n	8024698 <_ZN3Run7RunModeEv+0x90>
 8024640:	2bca      	cmp	r3, #202	; 0xca
 8024642:	dc06      	bgt.n	8024652 <_ZN3Run7RunModeEv+0x4a>
 8024644:	2b1f      	cmp	r3, #31
 8024646:	d02b      	beq.n	80246a0 <_ZN3Run7RunModeEv+0x98>
 8024648:	2b2f      	cmp	r3, #47	; 0x2f
 802464a:	d031      	beq.n	80246b0 <_ZN3Run7RunModeEv+0xa8>
 802464c:	2b0e      	cmp	r3, #14
 802464e:	d017      	beq.n	8024680 <_ZN3Run7RunModeEv+0x78>
 8024650:	e03e      	b.n	80246d0 <_ZN3Run7RunModeEv+0xc8>
 8024652:	2bf1      	cmp	r3, #241	; 0xf1
 8024654:	d028      	beq.n	80246a8 <_ZN3Run7RunModeEv+0xa0>
 8024656:	2bf2      	cmp	r3, #242	; 0xf2
 8024658:	d02e      	beq.n	80246b8 <_ZN3Run7RunModeEv+0xb0>
 802465a:	2bee      	cmp	r3, #238	; 0xee
 802465c:	d008      	beq.n	8024670 <_ZN3Run7RunModeEv+0x68>
 802465e:	e037      	b.n	80246d0 <_ZN3Run7RunModeEv+0xc8>
    {
#ifdef DEBUG_MODE
        case LINE_TRACE_DEBUG: ModeLineTraceDebug(); break;
 8024660:	6878      	ldr	r0, [r7, #4]
 8024662:	f000 fba9 	bl	8024db8 <_ZN3Run18ModeLineTraceDebugEv>
 8024666:	e037      	b.n	80246d8 <_ZN3Run7RunModeEv+0xd0>
        case VELOCITY_CONTROL_DEBUG: ModeVelocityControlDebug(); break;
 8024668:	6878      	ldr	r0, [r7, #4]
 802466a:	f000 fb7b 	bl	8024d64 <_ZN3Run24ModeVelocityControlDebugEv>
 802466e:	e033      	b.n	80246d8 <_ZN3Run7RunModeEv+0xd0>
#else // DEBUG_MODE
        case LINE_TRACE: ModeLineTrace(); break;
        case VELOCITY_CONTROL: ModeVelocityControl(); break;
#endif // DEBUG_MODE

        case EMERGENCY: ModeEmergency(); break;
 8024670:	6878      	ldr	r0, [r7, #4]
 8024672:	f000 f839 	bl	80246e8 <_ZN3Run13ModeEmergencyEv>
 8024676:	e02f      	b.n	80246d8 <_ZN3Run7RunModeEv+0xd0>
        case STANDBY: ModeStandby(); break;
 8024678:	6878      	ldr	r0, [r7, #4]
 802467a:	f000 f881 	bl	8024780 <_ZN3Run11ModeStandbyEv>
 802467e:	e02b      	b.n	80246d8 <_ZN3Run7RunModeEv+0xd0>
        case READY: ModeReady(); break;
 8024680:	6878      	ldr	r0, [r7, #4]
 8024682:	f000 f85b 	bl	802473c <_ZN3Run9ModeReadyEv>
 8024686:	e027      	b.n	80246d8 <_ZN3Run7RunModeEv+0xd0>
        case DEV: ModeDevelopment(); break;
 8024688:	6878      	ldr	r0, [r7, #4]
 802468a:	f000 f8f7 	bl	802487c <_ZN3Run15ModeDevelopmentEv>
 802468e:	e023      	b.n	80246d8 <_ZN3Run7RunModeEv+0xd0>
        case DEV_ACCEL: ModeDevAccel(); break;
 8024690:	6878      	ldr	r0, [r7, #4]
 8024692:	f000 f94d 	bl	8024930 <_ZN3Run12ModeDevAccelEv>
 8024696:	e01f      	b.n	80246d8 <_ZN3Run7RunModeEv+0xd0>
        case DEV_GOAL: ModeDevGoal(); break;
 8024698:	6878      	ldr	r0, [r7, #4]
 802469a:	f000 fa6b 	bl	8024b74 <_ZN3Run11ModeDevGoalEv>
 802469e:	e01b      	b.n	80246d8 <_ZN3Run7RunModeEv+0xd0>
        case FIRST_RUN: ModeFirstRun(); break;
 80246a0:	6878      	ldr	r0, [r7, #4]
 80246a2:	f000 fa81 	bl	8024ba8 <_ZN3Run12ModeFirstRunEv>
 80246a6:	e017      	b.n	80246d8 <_ZN3Run7RunModeEv+0xd0>
        case FIRST_GOAL: ModeFirstGoal(); break;
 80246a8:	6878      	ldr	r0, [r7, #4]
 80246aa:	f000 fac9 	bl	8024c40 <_ZN3Run13ModeFirstGoalEv>
 80246ae:	e013      	b.n	80246d8 <_ZN3Run7RunModeEv+0xd0>
        case SECOND_RUN: ModeSecondRun(); break;
 80246b0:	6878      	ldr	r0, [r7, #4]
 80246b2:	f000 fae9 	bl	8024c88 <_ZN3Run13ModeSecondRunEv>
 80246b6:	e00f      	b.n	80246d8 <_ZN3Run7RunModeEv+0xd0>
        case SECOND_GOAL: ModeSecondGoal(); break;
 80246b8:	6878      	ldr	r0, [r7, #4]
 80246ba:	f000 fb39 	bl	8024d30 <_ZN3Run14ModeSecondGoalEv>
 80246be:	e00b      	b.n	80246d8 <_ZN3Run7RunModeEv+0xd0>
        //case GYRO_TEST: ModeGyroTest(); break;
        case RAM_LOG: ModeStopIntrrupt(); break;
 80246c0:	6878      	ldr	r0, [r7, #4]
 80246c2:	f000 f8c3 	bl	802484c <_ZN3Run16ModeStopIntrruptEv>
 80246c6:	e007      	b.n	80246d8 <_ZN3Run7RunModeEv+0xd0>
        case RAM_DEV: ModeRamDev(); break;
 80246c8:	6878      	ldr	r0, [r7, #4]
 80246ca:	f000 f86d 	bl	80247a8 <_ZN3Run10ModeRamDevEv>
 80246ce:	e003      	b.n	80246d8 <_ZN3Run7RunModeEv+0xd0>
        default: ModeStandby(); break;
 80246d0:	6878      	ldr	r0, [r7, #4]
 80246d2:	f000 f855 	bl	8024780 <_ZN3Run11ModeStandbyEv>
 80246d6:	bf00      	nop
    }

    mode_complete_ = true;
 80246d8:	687b      	ldr	r3, [r7, #4]
 80246da:	2201      	movs	r2, #1
 80246dc:	715a      	strb	r2, [r3, #5]
}
 80246de:	bf00      	nop
 80246e0:	3708      	adds	r7, #8
 80246e2:	46bd      	mov	sp, r7
 80246e4:	bd80      	pop	{r7, pc}
	...

080246e8 <_ZN3Run13ModeEmergencyEv>:

void Run::ModeEmergency()
{
 80246e8:	b580      	push	{r7, lr}
 80246ea:	b084      	sub	sp, #16
 80246ec:	af00      	add	r7, sp, #0
 80246ee:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 80246f0:	687b      	ldr	r3, [r7, #4]
 80246f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80246f4:	eddf 0a10 	vldr	s1, [pc, #64]	; 8024738 <_ZN3Run13ModeEmergencyEv+0x50>
 80246f8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8024738 <_ZN3Run13ModeEmergencyEv+0x50>
 80246fc:	4618      	mov	r0, r3
 80246fe:	f7ff fa87 	bl	8023c10 <_ZN5Motor5DriveEff>

    bool result = logger_->GetSuccessEmergencyCodeStore();
 8024702:	687b      	ldr	r3, [r7, #4]
 8024704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024706:	4618      	mov	r0, r3
 8024708:	f7fe faba 	bl	8022c80 <_ZN6Logger28GetSuccessEmergencyCodeStoreEv>
 802470c:	4603      	mov	r3, r0
 802470e:	73fb      	strb	r3, [r7, #15]
    if(result) led_->ColorOrder('R');
 8024710:	7bfb      	ldrb	r3, [r7, #15]
 8024712:	2b00      	cmp	r3, #0
 8024714:	d006      	beq.n	8024724 <_ZN3Run13ModeEmergencyEv+0x3c>
 8024716:	687b      	ldr	r3, [r7, #4]
 8024718:	699b      	ldr	r3, [r3, #24]
 802471a:	2152      	movs	r1, #82	; 0x52
 802471c:	4618      	mov	r0, r3
 802471e:	f7fd f93d 	bl	802199c <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('G');
}
 8024722:	e005      	b.n	8024730 <_ZN3Run13ModeEmergencyEv+0x48>
    else led_->ColorOrder('G');
 8024724:	687b      	ldr	r3, [r7, #4]
 8024726:	699b      	ldr	r3, [r3, #24]
 8024728:	2147      	movs	r1, #71	; 0x47
 802472a:	4618      	mov	r0, r3
 802472c:	f7fd f936 	bl	802199c <_ZN3Led10ColorOrderEc>
}
 8024730:	bf00      	nop
 8024732:	3710      	adds	r7, #16
 8024734:	46bd      	mov	sp, r7
 8024736:	bd80      	pop	{r7, pc}
 8024738:	00000000 	.word	0x00000000

0802473c <_ZN3Run9ModeReadyEv>:

void Run::ModeReady()
{
 802473c:	b580      	push	{r7, lr}
 802473e:	b082      	sub	sp, #8
 8024740:	af00      	add	r7, sp, #0
 8024742:	6078      	str	r0, [r7, #4]
    line_sensor_->Update();
 8024744:	687b      	ldr	r3, [r7, #4]
 8024746:	69db      	ldr	r3, [r3, #28]
 8024748:	4618      	mov	r0, r3
 802474a:	f7fd fc51 	bl	8021ff0 <_ZN10LineSensor6UpdateEv>
    if(line_sensor_->CheckCalibration()) led_->ColorOrder('X');
 802474e:	687b      	ldr	r3, [r7, #4]
 8024750:	69db      	ldr	r3, [r3, #28]
 8024752:	4618      	mov	r0, r3
 8024754:	f7fd fd98 	bl	8022288 <_ZN10LineSensor16CheckCalibrationEv>
 8024758:	4603      	mov	r3, r0
 802475a:	2b00      	cmp	r3, #0
 802475c:	d006      	beq.n	802476c <_ZN3Run9ModeReadyEv+0x30>
 802475e:	687b      	ldr	r3, [r7, #4]
 8024760:	699b      	ldr	r3, [r3, #24]
 8024762:	2158      	movs	r1, #88	; 0x58
 8024764:	4618      	mov	r0, r3
 8024766:	f7fd f919 	bl	802199c <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('R');
}
 802476a:	e005      	b.n	8024778 <_ZN3Run9ModeReadyEv+0x3c>
    else led_->ColorOrder('R');
 802476c:	687b      	ldr	r3, [r7, #4]
 802476e:	699b      	ldr	r3, [r3, #24]
 8024770:	2152      	movs	r1, #82	; 0x52
 8024772:	4618      	mov	r0, r3
 8024774:	f7fd f912 	bl	802199c <_ZN3Led10ColorOrderEc>
}
 8024778:	bf00      	nop
 802477a:	3708      	adds	r7, #8
 802477c:	46bd      	mov	sp, r7
 802477e:	bd80      	pop	{r7, pc}

08024780 <_ZN3Run11ModeStandbyEv>:

void Run::ModeStandby()
{
 8024780:	b580      	push	{r7, lr}
 8024782:	b082      	sub	sp, #8
 8024784:	af00      	add	r7, sp, #0
 8024786:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024788:	687b      	ldr	r3, [r7, #4]
 802478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802478c:	eddf 0a05 	vldr	s1, [pc, #20]	; 80247a4 <_ZN3Run11ModeStandbyEv+0x24>
 8024790:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80247a4 <_ZN3Run11ModeStandbyEv+0x24>
 8024794:	4618      	mov	r0, r3
 8024796:	f7ff fa3b 	bl	8023c10 <_ZN5Motor5DriveEff>
}
 802479a:	bf00      	nop
 802479c:	3708      	adds	r7, #8
 802479e:	46bd      	mov	sp, r7
 80247a0:	bd80      	pop	{r7, pc}
 80247a2:	bf00      	nop
 80247a4:	00000000 	.word	0x00000000

080247a8 <_ZN3Run10ModeRamDevEv>:
}

/* ram test */

void Run::ModeRamDev()
{
 80247a8:	b580      	push	{r7, lr}
 80247aa:	b086      	sub	sp, #24
 80247ac:	af00      	add	r7, sp, #0
 80247ae:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 80247b0:	687b      	ldr	r3, [r7, #4]
 80247b2:	689b      	ldr	r3, [r3, #8]
 80247b4:	4618      	mov	r0, r3
 80247b6:	f7fc fb4b 	bl	8020e50 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 80247ba:	687b      	ldr	r3, [r7, #4]
 80247bc:	69db      	ldr	r3, [r3, #28]
 80247be:	4618      	mov	r0, r3
 80247c0:	f7fd fc16 	bl	8021ff0 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 80247c4:	687b      	ldr	r3, [r7, #4]
 80247c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80247c8:	4618      	mov	r0, r3
 80247ca:	f000 fc23 	bl	8025014 <_ZN10SideSensor6UpdateEv>
    imu_->Update();
 80247ce:	687b      	ldr	r3, [r7, #4]
 80247d0:	695b      	ldr	r3, [r3, #20]
 80247d2:	4618      	mov	r0, r3
 80247d4:	f7fc ffa4 	bl	8021720 <_ZN3Imu6UpdateEv>
    logger_->Ramming();
 80247d8:	687b      	ldr	r3, [r7, #4]
 80247da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80247dc:	4618      	mov	r0, r3
 80247de:	f7fd ffa3 	bl	8022728 <_ZN6Logger7RammingEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 80247e2:	6878      	ldr	r0, [r7, #4]
 80247e4:	f7ff fee6 	bl	80245b4 <_ZN3Run13EmergencyStopEv>
 80247e8:	4603      	mov	r3, r0
 80247ea:	2b00      	cmp	r3, #0
 80247ec:	d129      	bne.n	8024842 <_ZN3Run10ModeRamDevEv+0x9a>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 80247ee:	687b      	ldr	r3, [r7, #4]
 80247f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80247f2:	4618      	mov	r0, r3
 80247f4:	f000 fddd 	bl	80253b2 <_ZN10SideSensor18GetGoalMarkerCountEv>
 80247f8:	4603      	mov	r3, r0
 80247fa:	75fb      	strb	r3, [r7, #23]
    float target_velocity = DevTargetVelocity(goal_count);
 80247fc:	7dfb      	ldrb	r3, [r7, #23]
 80247fe:	4619      	mov	r1, r3
 8024800:	6878      	ldr	r0, [r7, #4]
 8024802:	f000 f923 	bl	8024a4c <_ZN3Run17DevTargetVelocityEh>
 8024806:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 802480a:	687b      	ldr	r3, [r7, #4]
 802480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802480e:	ed97 0a04 	vldr	s0, [r7, #16]
 8024812:	4618      	mov	r0, r3
 8024814:	f001 fb5f 	bl	8025ed6 <_ZN15VelocityControl16DeterminePidGainEf>
 8024818:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 802481c:	687b      	ldr	r3, [r7, #4]
 802481e:	6a1b      	ldr	r3, [r3, #32]
 8024820:	ed97 0a04 	vldr	s0, [r7, #16]
 8024824:	4618      	mov	r0, r3
 8024826:	f7fd fdbd 	bl	80223a4 <_ZN9LineTrace16DeterminePidGainEf>
 802482a:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 802482e:	687b      	ldr	r3, [r7, #4]
 8024830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024832:	edd7 0a02 	vldr	s1, [r7, #8]
 8024836:	ed97 0a03 	vldr	s0, [r7, #12]
 802483a:	4618      	mov	r0, r3
 802483c:	f7ff f9e8 	bl	8023c10 <_ZN5Motor5DriveEff>
 8024840:	e000      	b.n	8024844 <_ZN3Run10ModeRamDevEv+0x9c>
    if(EmergencyStop()) return;
 8024842:	bf00      	nop
}
 8024844:	3718      	adds	r7, #24
 8024846:	46bd      	mov	sp, r7
 8024848:	bd80      	pop	{r7, pc}
	...

0802484c <_ZN3Run16ModeStopIntrruptEv>:

void Run::ModeStopIntrrupt()
{
 802484c:	b580      	push	{r7, lr}
 802484e:	b082      	sub	sp, #8
 8024850:	af00      	add	r7, sp, #0
 8024852:	6078      	str	r0, [r7, #4]
    HAL_TIM_Base_Stop_IT(&htim2);
 8024854:	4806      	ldr	r0, [pc, #24]	; (8024870 <_ZN3Run16ModeStopIntrruptEv+0x24>)
 8024856:	f004 fe2e 	bl	80294b6 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim6);
 802485a:	4806      	ldr	r0, [pc, #24]	; (8024874 <_ZN3Run16ModeStopIntrruptEv+0x28>)
 802485c:	f004 fe2b 	bl	80294b6 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim7);
 8024860:	4805      	ldr	r0, [pc, #20]	; (8024878 <_ZN3Run16ModeStopIntrruptEv+0x2c>)
 8024862:	f004 fe28 	bl	80294b6 <HAL_TIM_Base_Stop_IT>
    
    // print_->RamLog();
}
 8024866:	bf00      	nop
 8024868:	3708      	adds	r7, #8
 802486a:	46bd      	mov	sp, r7
 802486c:	bd80      	pop	{r7, pc}
 802486e:	bf00      	nop
 8024870:	20017548 	.word	0x20017548
 8024874:	20014458 	.word	0x20014458
 8024878:	200175c8 	.word	0x200175c8

0802487c <_ZN3Run15ModeDevelopmentEv>:

/* ram test end */

void Run::ModeDevelopment()
{
 802487c:	b580      	push	{r7, lr}
 802487e:	b086      	sub	sp, #24
 8024880:	af00      	add	r7, sp, #0
 8024882:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 8024884:	687b      	ldr	r3, [r7, #4]
 8024886:	689b      	ldr	r3, [r3, #8]
 8024888:	4618      	mov	r0, r3
 802488a:	f7fc fae1 	bl	8020e50 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 802488e:	687b      	ldr	r3, [r7, #4]
 8024890:	69db      	ldr	r3, [r3, #28]
 8024892:	4618      	mov	r0, r3
 8024894:	f7fd fbac 	bl	8021ff0 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 8024898:	687b      	ldr	r3, [r7, #4]
 802489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802489c:	4618      	mov	r0, r3
 802489e:	f000 fbb9 	bl	8025014 <_ZN10SideSensor6UpdateEv>
    imu_->Update();
 80248a2:	687b      	ldr	r3, [r7, #4]
 80248a4:	695b      	ldr	r3, [r3, #20]
 80248a6:	4618      	mov	r0, r3
 80248a8:	f7fc ff3a 	bl	8021720 <_ZN3Imu6UpdateEv>
    logger_->Logging();
 80248ac:	687b      	ldr	r3, [r7, #4]
 80248ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80248b0:	4618      	mov	r0, r3
 80248b2:	f7fd fed5 	bl	8022660 <_ZN6Logger7LoggingEv>
    /* Emergency stop */
    if(DevEmergencyStop()) return;
 80248b6:	6878      	ldr	r0, [r7, #4]
 80248b8:	f000 f886 	bl	80249c8 <_ZN3Run16DevEmergencyStopEv>
 80248bc:	4603      	mov	r3, r0
 80248be:	2b00      	cmp	r3, #0
 80248c0:	d12f      	bne.n	8024922 <_ZN3Run15ModeDevelopmentEv+0xa6>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 80248c2:	687b      	ldr	r3, [r7, #4]
 80248c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80248c6:	4618      	mov	r0, r3
 80248c8:	f000 fd73 	bl	80253b2 <_ZN10SideSensor18GetGoalMarkerCountEv>
 80248cc:	4603      	mov	r3, r0
 80248ce:	75fb      	strb	r3, [r7, #23]
    float target_velocity = DevTargetVelocity(goal_count);
 80248d0:	7dfb      	ldrb	r3, [r7, #23]
 80248d2:	4619      	mov	r1, r3
 80248d4:	6878      	ldr	r0, [r7, #4]
 80248d6:	f000 f8b9 	bl	8024a4c <_ZN3Run17DevTargetVelocityEh>
 80248da:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 80248de:	687b      	ldr	r3, [r7, #4]
 80248e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80248e2:	ed97 0a04 	vldr	s0, [r7, #16]
 80248e6:	4618      	mov	r0, r3
 80248e8:	f001 faf5 	bl	8025ed6 <_ZN15VelocityControl16DeterminePidGainEf>
 80248ec:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 80248f0:	687b      	ldr	r3, [r7, #4]
 80248f2:	6a1b      	ldr	r3, [r3, #32]
 80248f4:	ed97 0a04 	vldr	s0, [r7, #16]
 80248f8:	4618      	mov	r0, r3
 80248fa:	f7fd fd53 	bl	80223a4 <_ZN9LineTrace16DeterminePidGainEf>
 80248fe:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024902:	687b      	ldr	r3, [r7, #4]
 8024904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024906:	edd7 0a02 	vldr	s1, [r7, #8]
 802490a:	ed97 0a03 	vldr	s0, [r7, #12]
 802490e:	4618      	mov	r0, r3
 8024910:	f7ff f97e 	bl	8023c10 <_ZN5Motor5DriveEff>
    monitor_count++;
 8024914:	4b05      	ldr	r3, [pc, #20]	; (802492c <_ZN3Run15ModeDevelopmentEv+0xb0>)
 8024916:	881b      	ldrh	r3, [r3, #0]
 8024918:	3301      	adds	r3, #1
 802491a:	b29a      	uxth	r2, r3
 802491c:	4b03      	ldr	r3, [pc, #12]	; (802492c <_ZN3Run15ModeDevelopmentEv+0xb0>)
 802491e:	801a      	strh	r2, [r3, #0]
 8024920:	e000      	b.n	8024924 <_ZN3Run15ModeDevelopmentEv+0xa8>
    if(DevEmergencyStop()) return;
 8024922:	bf00      	nop
}
 8024924:	3718      	adds	r7, #24
 8024926:	46bd      	mov	sp, r7
 8024928:	bd80      	pop	{r7, pc}
 802492a:	bf00      	nop
 802492c:	20011150 	.word	0x20011150

08024930 <_ZN3Run12ModeDevAccelEv>:

void Run::ModeDevAccel()
{
 8024930:	b580      	push	{r7, lr}
 8024932:	b086      	sub	sp, #24
 8024934:	af00      	add	r7, sp, #0
 8024936:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 8024938:	687b      	ldr	r3, [r7, #4]
 802493a:	689b      	ldr	r3, [r3, #8]
 802493c:	4618      	mov	r0, r3
 802493e:	f7fc fa87 	bl	8020e50 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 8024942:	687b      	ldr	r3, [r7, #4]
 8024944:	69db      	ldr	r3, [r3, #28]
 8024946:	4618      	mov	r0, r3
 8024948:	f7fd fb52 	bl	8021ff0 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 802494c:	687b      	ldr	r3, [r7, #4]
 802494e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024950:	4618      	mov	r0, r3
 8024952:	f000 fb5f 	bl	8025014 <_ZN10SideSensor6UpdateEv>
    logger_->Loading();
 8024956:	687b      	ldr	r3, [r7, #4]
 8024958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802495a:	4618      	mov	r0, r3
 802495c:	f7fe fa70 	bl	8022e40 <_ZN6Logger7LoadingEv>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024960:	687b      	ldr	r3, [r7, #4]
 8024962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024964:	4618      	mov	r0, r3
 8024966:	f000 fd24 	bl	80253b2 <_ZN10SideSensor18GetGoalMarkerCountEv>
 802496a:	4603      	mov	r3, r0
 802496c:	75fb      	strb	r3, [r7, #23]
    float target_velocity = DevAccelTarget(goal_count);
 802496e:	7dfb      	ldrb	r3, [r7, #23]
 8024970:	4619      	mov	r1, r3
 8024972:	6878      	ldr	r0, [r7, #4]
 8024974:	f000 f8b0 	bl	8024ad8 <_ZN3Run14DevAccelTargetEh>
 8024978:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 802497c:	687b      	ldr	r3, [r7, #4]
 802497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024980:	ed97 0a04 	vldr	s0, [r7, #16]
 8024984:	4618      	mov	r0, r3
 8024986:	f001 faa6 	bl	8025ed6 <_ZN15VelocityControl16DeterminePidGainEf>
 802498a:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 802498e:	687b      	ldr	r3, [r7, #4]
 8024990:	6a1b      	ldr	r3, [r3, #32]
 8024992:	ed97 0a04 	vldr	s0, [r7, #16]
 8024996:	4618      	mov	r0, r3
 8024998:	f7fd fd04 	bl	80223a4 <_ZN9LineTrace16DeterminePidGainEf>
 802499c:	ed87 0a02 	vstr	s0, [r7, #8]
    /* Emergency stop */
    if(DevEmergencyStop()) return;
 80249a0:	6878      	ldr	r0, [r7, #4]
 80249a2:	f000 f811 	bl	80249c8 <_ZN3Run16DevEmergencyStopEv>
 80249a6:	4603      	mov	r3, r0
 80249a8:	2b00      	cmp	r3, #0
 80249aa:	d109      	bne.n	80249c0 <_ZN3Run12ModeDevAccelEv+0x90>
    motor_->Drive(trans_ratio, rotat_ratio);
 80249ac:	687b      	ldr	r3, [r7, #4]
 80249ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80249b0:	edd7 0a02 	vldr	s1, [r7, #8]
 80249b4:	ed97 0a03 	vldr	s0, [r7, #12]
 80249b8:	4618      	mov	r0, r3
 80249ba:	f7ff f929 	bl	8023c10 <_ZN5Motor5DriveEff>
 80249be:	e000      	b.n	80249c2 <_ZN3Run12ModeDevAccelEv+0x92>
    if(DevEmergencyStop()) return;
 80249c0:	bf00      	nop
}
 80249c2:	3718      	adds	r7, #24
 80249c4:	46bd      	mov	sp, r7
 80249c6:	bd80      	pop	{r7, pc}

080249c8 <_ZN3Run16DevEmergencyStopEv>:

bool Run::DevEmergencyStop()
{
 80249c8:	b580      	push	{r7, lr}
 80249ca:	b084      	sub	sp, #16
 80249cc:	af00      	add	r7, sp, #0
 80249ce:	6078      	str	r0, [r7, #4]
    static uint8_t emergency_timer = 0;
    bool line_emergency = line_sensor_->GetEmergencyStopFlag();
 80249d0:	687b      	ldr	r3, [r7, #4]
 80249d2:	69db      	ldr	r3, [r3, #28]
 80249d4:	4618      	mov	r0, r3
 80249d6:	f7fd fc49 	bl	802226c <_ZN10LineSensor20GetEmergencyStopFlagEv>
 80249da:	4603      	mov	r3, r0
 80249dc:	73fb      	strb	r3, [r7, #15]
    bool logging_emergency = logger_->GetEmergencyStopFlag();
 80249de:	687b      	ldr	r3, [r7, #4]
 80249e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80249e2:	4618      	mov	r0, r3
 80249e4:	f7fe f931 	bl	8022c4a <_ZN6Logger20GetEmergencyStopFlagEv>
 80249e8:	4603      	mov	r3, r0
 80249ea:	73bb      	strb	r3, [r7, #14]

    if(logging_emergency)
 80249ec:	7bbb      	ldrb	r3, [r7, #14]
 80249ee:	2b00      	cmp	r3, #0
 80249f0:	d009      	beq.n	8024a06 <_ZN3Run16DevEmergencyStopEv+0x3e>
    {
        SetRunMode(EMERGENCY);
 80249f2:	21ee      	movs	r1, #238	; 0xee
 80249f4:	6878      	ldr	r0, [r7, #4]
 80249f6:	f7ff fcd5 	bl	80243a4 <_ZN3Run10SetRunModeEh>
        SetRunModeChangedInternal(true);
 80249fa:	2101      	movs	r1, #1
 80249fc:	6878      	ldr	r0, [r7, #4]
 80249fe:	f7ff fce1 	bl	80243c4 <_ZN3Run25SetRunModeChangedInternalEb>
        return true;
 8024a02:	2301      	movs	r3, #1
 8024a04:	e01b      	b.n	8024a3e <_ZN3Run16DevEmergencyStopEv+0x76>
    }

    if(line_emergency)
 8024a06:	7bfb      	ldrb	r3, [r7, #15]
 8024a08:	2b00      	cmp	r3, #0
 8024a0a:	d014      	beq.n	8024a36 <_ZN3Run16DevEmergencyStopEv+0x6e>
    {
        if(emergency_timer >= EMERGENCY_STOP_TIME)
 8024a0c:	4b0e      	ldr	r3, [pc, #56]	; (8024a48 <_ZN3Run16DevEmergencyStopEv+0x80>)
 8024a0e:	781b      	ldrb	r3, [r3, #0]
 8024a10:	2b04      	cmp	r3, #4
 8024a12:	d909      	bls.n	8024a28 <_ZN3Run16DevEmergencyStopEv+0x60>
        {
            SetRunMode(EMERGENCY);
 8024a14:	21ee      	movs	r1, #238	; 0xee
 8024a16:	6878      	ldr	r0, [r7, #4]
 8024a18:	f7ff fcc4 	bl	80243a4 <_ZN3Run10SetRunModeEh>
            SetRunModeChangedInternal(true);
 8024a1c:	2101      	movs	r1, #1
 8024a1e:	6878      	ldr	r0, [r7, #4]
 8024a20:	f7ff fcd0 	bl	80243c4 <_ZN3Run25SetRunModeChangedInternalEb>
            return true;
 8024a24:	2301      	movs	r3, #1
 8024a26:	e00a      	b.n	8024a3e <_ZN3Run16DevEmergencyStopEv+0x76>
        }
        else emergency_timer++;
 8024a28:	4b07      	ldr	r3, [pc, #28]	; (8024a48 <_ZN3Run16DevEmergencyStopEv+0x80>)
 8024a2a:	781b      	ldrb	r3, [r3, #0]
 8024a2c:	3301      	adds	r3, #1
 8024a2e:	b2da      	uxtb	r2, r3
 8024a30:	4b05      	ldr	r3, [pc, #20]	; (8024a48 <_ZN3Run16DevEmergencyStopEv+0x80>)
 8024a32:	701a      	strb	r2, [r3, #0]
 8024a34:	e002      	b.n	8024a3c <_ZN3Run16DevEmergencyStopEv+0x74>
    }
    else emergency_timer = 0;
 8024a36:	4b04      	ldr	r3, [pc, #16]	; (8024a48 <_ZN3Run16DevEmergencyStopEv+0x80>)
 8024a38:	2200      	movs	r2, #0
 8024a3a:	701a      	strb	r2, [r3, #0]

    return false;
 8024a3c:	2300      	movs	r3, #0
}
 8024a3e:	4618      	mov	r0, r3
 8024a40:	3710      	adds	r7, #16
 8024a42:	46bd      	mov	sp, r7
 8024a44:	bd80      	pop	{r7, pc}
 8024a46:	bf00      	nop
 8024a48:	20000489 	.word	0x20000489

08024a4c <_ZN3Run17DevTargetVelocityEh>:

float Run::DevTargetVelocity(uint8_t goal_count)
{
 8024a4c:	b580      	push	{r7, lr}
 8024a4e:	b084      	sub	sp, #16
 8024a50:	af00      	add	r7, sp, #0
 8024a52:	6078      	str	r0, [r7, #4]
 8024a54:	460b      	mov	r3, r1
 8024a56:	70fb      	strb	r3, [r7, #3]
    static uint16_t slow_timer = 0;
    static uint16_t stop_timer = 0;
    float target_velocity;

    switch(goal_count)
 8024a58:	78fb      	ldrb	r3, [r7, #3]
 8024a5a:	3300      	adds	r3, #0
 8024a5c:	2b01      	cmp	r3, #1
 8024a5e:	d802      	bhi.n	8024a66 <_ZN3Run17DevTargetVelocityEh+0x1a>
    {
        case 0:
        case 1: target_velocity = EXPLORE_VELOCITY; break;
 8024a60:	4b19      	ldr	r3, [pc, #100]	; (8024ac8 <_ZN3Run17DevTargetVelocityEh+0x7c>)
 8024a62:	60fb      	str	r3, [r7, #12]
 8024a64:	e027      	b.n	8024ab6 <_ZN3Run17DevTargetVelocityEh+0x6a>
        default:

            if(slow_timer < SLOW_DRIVE_TIME)
 8024a66:	4b19      	ldr	r3, [pc, #100]	; (8024acc <_ZN3Run17DevTargetVelocityEh+0x80>)
 8024a68:	881b      	ldrh	r3, [r3, #0]
 8024a6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8024a6e:	d208      	bcs.n	8024a82 <_ZN3Run17DevTargetVelocityEh+0x36>
            {
                slow_timer++;
 8024a70:	4b16      	ldr	r3, [pc, #88]	; (8024acc <_ZN3Run17DevTargetVelocityEh+0x80>)
 8024a72:	881b      	ldrh	r3, [r3, #0]
 8024a74:	3301      	adds	r3, #1
 8024a76:	b29a      	uxth	r2, r3
 8024a78:	4b14      	ldr	r3, [pc, #80]	; (8024acc <_ZN3Run17DevTargetVelocityEh+0x80>)
 8024a7a:	801a      	strh	r2, [r3, #0]
                target_velocity = SLOW_DRIVE_VELOCITY;
 8024a7c:	4b14      	ldr	r3, [pc, #80]	; (8024ad0 <_ZN3Run17DevTargetVelocityEh+0x84>)
 8024a7e:	60fb      	str	r3, [r7, #12]
                    SetRunMode(DEV_GOAL);
                    SetRunModeChangedInternal(true);
                    target_velocity = 0;
                }
            }
            break;
 8024a80:	e018      	b.n	8024ab4 <_ZN3Run17DevTargetVelocityEh+0x68>
                if(stop_timer < STOP_TIME)
 8024a82:	4b14      	ldr	r3, [pc, #80]	; (8024ad4 <_ZN3Run17DevTargetVelocityEh+0x88>)
 8024a84:	881b      	ldrh	r3, [r3, #0]
 8024a86:	2bc7      	cmp	r3, #199	; 0xc7
 8024a88:	d809      	bhi.n	8024a9e <_ZN3Run17DevTargetVelocityEh+0x52>
                    stop_timer++;
 8024a8a:	4b12      	ldr	r3, [pc, #72]	; (8024ad4 <_ZN3Run17DevTargetVelocityEh+0x88>)
 8024a8c:	881b      	ldrh	r3, [r3, #0]
 8024a8e:	3301      	adds	r3, #1
 8024a90:	b29a      	uxth	r2, r3
 8024a92:	4b10      	ldr	r3, [pc, #64]	; (8024ad4 <_ZN3Run17DevTargetVelocityEh+0x88>)
 8024a94:	801a      	strh	r2, [r3, #0]
                    target_velocity = 0;
 8024a96:	f04f 0300 	mov.w	r3, #0
 8024a9a:	60fb      	str	r3, [r7, #12]
            break;
 8024a9c:	e00a      	b.n	8024ab4 <_ZN3Run17DevTargetVelocityEh+0x68>
                    SetRunMode(DEV_GOAL);
 8024a9e:	21ca      	movs	r1, #202	; 0xca
 8024aa0:	6878      	ldr	r0, [r7, #4]
 8024aa2:	f7ff fc7f 	bl	80243a4 <_ZN3Run10SetRunModeEh>
                    SetRunModeChangedInternal(true);
 8024aa6:	2101      	movs	r1, #1
 8024aa8:	6878      	ldr	r0, [r7, #4]
 8024aaa:	f7ff fc8b 	bl	80243c4 <_ZN3Run25SetRunModeChangedInternalEb>
                    target_velocity = 0;
 8024aae:	f04f 0300 	mov.w	r3, #0
 8024ab2:	60fb      	str	r3, [r7, #12]
            break;
 8024ab4:	bf00      	nop
    }

    return target_velocity;
 8024ab6:	68fb      	ldr	r3, [r7, #12]
 8024ab8:	ee07 3a90 	vmov	s15, r3
}
 8024abc:	eeb0 0a67 	vmov.f32	s0, s15
 8024ac0:	3710      	adds	r7, #16
 8024ac2:	46bd      	mov	sp, r7
 8024ac4:	bd80      	pop	{r7, pc}
 8024ac6:	bf00      	nop
 8024ac8:	3f19999a 	.word	0x3f19999a
 8024acc:	2000048a 	.word	0x2000048a
 8024ad0:	3dcccccd 	.word	0x3dcccccd
 8024ad4:	2000048c 	.word	0x2000048c

08024ad8 <_ZN3Run14DevAccelTargetEh>:

float Run::DevAccelTarget(uint8_t goal_count)
{
 8024ad8:	b580      	push	{r7, lr}
 8024ada:	b084      	sub	sp, #16
 8024adc:	af00      	add	r7, sp, #0
 8024ade:	6078      	str	r0, [r7, #4]
 8024ae0:	460b      	mov	r3, r1
 8024ae2:	70fb      	strb	r3, [r7, #3]
    static uint16_t slow_timer = 0;
    static uint16_t stop_timer = 0;
    float target_velocity;

    switch(goal_count)
 8024ae4:	78fb      	ldrb	r3, [r7, #3]
 8024ae6:	2b00      	cmp	r3, #0
 8024ae8:	d002      	beq.n	8024af0 <_ZN3Run14DevAccelTargetEh+0x18>
 8024aea:	2b01      	cmp	r3, #1
 8024aec:	d004      	beq.n	8024af8 <_ZN3Run14DevAccelTargetEh+0x20>
 8024aee:	e00b      	b.n	8024b08 <_ZN3Run14DevAccelTargetEh+0x30>
    {
        case 0: target_velocity = MIN_VELOCITY; break;
 8024af0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8024af4:	60fb      	str	r3, [r7, #12]
 8024af6:	e02f      	b.n	8024b58 <_ZN3Run14DevAccelTargetEh+0x80>
        case 1:
            target_velocity = logger_->GetTargetVelocity();
 8024af8:	687b      	ldr	r3, [r7, #4]
 8024afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024afc:	4618      	mov	r0, r3
 8024afe:	f7fe f9e1 	bl	8022ec4 <_ZN6Logger17GetTargetVelocityEv>
 8024b02:	ed87 0a03 	vstr	s0, [r7, #12]
            break;
 8024b06:	e027      	b.n	8024b58 <_ZN3Run14DevAccelTargetEh+0x80>
        default:

            if(slow_timer < SLOW_DRIVE_TIME)
 8024b08:	4b17      	ldr	r3, [pc, #92]	; (8024b68 <_ZN3Run14DevAccelTargetEh+0x90>)
 8024b0a:	881b      	ldrh	r3, [r3, #0]
 8024b0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8024b10:	d208      	bcs.n	8024b24 <_ZN3Run14DevAccelTargetEh+0x4c>
            {
                slow_timer++;
 8024b12:	4b15      	ldr	r3, [pc, #84]	; (8024b68 <_ZN3Run14DevAccelTargetEh+0x90>)
 8024b14:	881b      	ldrh	r3, [r3, #0]
 8024b16:	3301      	adds	r3, #1
 8024b18:	b29a      	uxth	r2, r3
 8024b1a:	4b13      	ldr	r3, [pc, #76]	; (8024b68 <_ZN3Run14DevAccelTargetEh+0x90>)
 8024b1c:	801a      	strh	r2, [r3, #0]
                target_velocity = SLOW_DRIVE_VELOCITY;
 8024b1e:	4b13      	ldr	r3, [pc, #76]	; (8024b6c <_ZN3Run14DevAccelTargetEh+0x94>)
 8024b20:	60fb      	str	r3, [r7, #12]
                    SetRunMode(DEV_GOAL);
                    SetRunModeChangedInternal(true);
                    target_velocity = 0;
                }
            }
            break;
 8024b22:	e018      	b.n	8024b56 <_ZN3Run14DevAccelTargetEh+0x7e>
                if(stop_timer < STOP_TIME)
 8024b24:	4b12      	ldr	r3, [pc, #72]	; (8024b70 <_ZN3Run14DevAccelTargetEh+0x98>)
 8024b26:	881b      	ldrh	r3, [r3, #0]
 8024b28:	2bc7      	cmp	r3, #199	; 0xc7
 8024b2a:	d809      	bhi.n	8024b40 <_ZN3Run14DevAccelTargetEh+0x68>
                    stop_timer++;
 8024b2c:	4b10      	ldr	r3, [pc, #64]	; (8024b70 <_ZN3Run14DevAccelTargetEh+0x98>)
 8024b2e:	881b      	ldrh	r3, [r3, #0]
 8024b30:	3301      	adds	r3, #1
 8024b32:	b29a      	uxth	r2, r3
 8024b34:	4b0e      	ldr	r3, [pc, #56]	; (8024b70 <_ZN3Run14DevAccelTargetEh+0x98>)
 8024b36:	801a      	strh	r2, [r3, #0]
                    target_velocity = 0;
 8024b38:	f04f 0300 	mov.w	r3, #0
 8024b3c:	60fb      	str	r3, [r7, #12]
            break;
 8024b3e:	e00a      	b.n	8024b56 <_ZN3Run14DevAccelTargetEh+0x7e>
                    SetRunMode(DEV_GOAL);
 8024b40:	21ca      	movs	r1, #202	; 0xca
 8024b42:	6878      	ldr	r0, [r7, #4]
 8024b44:	f7ff fc2e 	bl	80243a4 <_ZN3Run10SetRunModeEh>
                    SetRunModeChangedInternal(true);
 8024b48:	2101      	movs	r1, #1
 8024b4a:	6878      	ldr	r0, [r7, #4]
 8024b4c:	f7ff fc3a 	bl	80243c4 <_ZN3Run25SetRunModeChangedInternalEb>
                    target_velocity = 0;
 8024b50:	f04f 0300 	mov.w	r3, #0
 8024b54:	60fb      	str	r3, [r7, #12]
            break;
 8024b56:	bf00      	nop
    }

    return target_velocity;
 8024b58:	68fb      	ldr	r3, [r7, #12]
 8024b5a:	ee07 3a90 	vmov	s15, r3
}
 8024b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8024b62:	3710      	adds	r7, #16
 8024b64:	46bd      	mov	sp, r7
 8024b66:	bd80      	pop	{r7, pc}
 8024b68:	2000048e 	.word	0x2000048e
 8024b6c:	3dcccccd 	.word	0x3dcccccd
 8024b70:	20000490 	.word	0x20000490

08024b74 <_ZN3Run11ModeDevGoalEv>:

void Run::ModeDevGoal()
{
 8024b74:	b580      	push	{r7, lr}
 8024b76:	b082      	sub	sp, #8
 8024b78:	af00      	add	r7, sp, #0
 8024b7a:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024b7c:	687b      	ldr	r3, [r7, #4]
 8024b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024b80:	eddf 0a08 	vldr	s1, [pc, #32]	; 8024ba4 <_ZN3Run11ModeDevGoalEv+0x30>
 8024b84:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8024ba4 <_ZN3Run11ModeDevGoalEv+0x30>
 8024b88:	4618      	mov	r0, r3
 8024b8a:	f7ff f841 	bl	8023c10 <_ZN5Motor5DriveEff>
    led_->ColorOrder('M');
 8024b8e:	687b      	ldr	r3, [r7, #4]
 8024b90:	699b      	ldr	r3, [r3, #24]
 8024b92:	214d      	movs	r1, #77	; 0x4d
 8024b94:	4618      	mov	r0, r3
 8024b96:	f7fc ff01 	bl	802199c <_ZN3Led10ColorOrderEc>
}
 8024b9a:	bf00      	nop
 8024b9c:	3708      	adds	r7, #8
 8024b9e:	46bd      	mov	sp, r7
 8024ba0:	bd80      	pop	{r7, pc}
 8024ba2:	bf00      	nop
 8024ba4:	00000000 	.word	0x00000000

08024ba8 <_ZN3Run12ModeFirstRunEv>:

void Run::ModeFirstRun()
{
 8024ba8:	b580      	push	{r7, lr}
 8024baa:	b086      	sub	sp, #24
 8024bac:	af00      	add	r7, sp, #0
 8024bae:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024bb0:	687b      	ldr	r3, [r7, #4]
 8024bb2:	69db      	ldr	r3, [r3, #28]
 8024bb4:	4618      	mov	r0, r3
 8024bb6:	f7fd fa1b 	bl	8021ff0 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024bba:	687b      	ldr	r3, [r7, #4]
 8024bbc:	689b      	ldr	r3, [r3, #8]
 8024bbe:	4618      	mov	r0, r3
 8024bc0:	f7fc f946 	bl	8020e50 <_ZN7Encoder6UpdateEv>
    imu_->Update();
 8024bc4:	687b      	ldr	r3, [r7, #4]
 8024bc6:	695b      	ldr	r3, [r3, #20]
 8024bc8:	4618      	mov	r0, r3
 8024bca:	f7fc fda9 	bl	8021720 <_ZN3Imu6UpdateEv>
    side_sensor_->Update();
 8024bce:	687b      	ldr	r3, [r7, #4]
 8024bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024bd2:	4618      	mov	r0, r3
 8024bd4:	f000 fa1e 	bl	8025014 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024bd8:	6878      	ldr	r0, [r7, #4]
 8024bda:	f7ff fceb 	bl	80245b4 <_ZN3Run13EmergencyStopEv>
 8024bde:	4603      	mov	r3, r0
 8024be0:	2b00      	cmp	r3, #0
 8024be2:	d129      	bne.n	8024c38 <_ZN3Run12ModeFirstRunEv+0x90>
    /* Logging */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024be4:	687b      	ldr	r3, [r7, #4]
 8024be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024be8:	4618      	mov	r0, r3
 8024bea:	f000 fbe2 	bl	80253b2 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024bee:	4603      	mov	r3, r0
 8024bf0:	75fb      	strb	r3, [r7, #23]
    //mode_complete_ = false;
    //uint8_t period_success = logger_->StorePeriodicLog();
    //uint8_t accel_success = logger_->StoreAccelPositionLog();
    //if(period_success != 0 || !accel_success != 0) store_log_failed_ = true;
    /* Motor control */
    float target_velocity = FirstTargetVelocity(goal_count);
 8024bf2:	7dfb      	ldrb	r3, [r7, #23]
 8024bf4:	4619      	mov	r1, r3
 8024bf6:	6878      	ldr	r0, [r7, #4]
 8024bf8:	f000 f8fe 	bl	8024df8 <_ZN3Run19FirstTargetVelocityEh>
 8024bfc:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024c00:	687b      	ldr	r3, [r7, #4]
 8024c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024c04:	ed97 0a04 	vldr	s0, [r7, #16]
 8024c08:	4618      	mov	r0, r3
 8024c0a:	f001 f964 	bl	8025ed6 <_ZN15VelocityControl16DeterminePidGainEf>
 8024c0e:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024c12:	687b      	ldr	r3, [r7, #4]
 8024c14:	6a1b      	ldr	r3, [r3, #32]
 8024c16:	ed97 0a04 	vldr	s0, [r7, #16]
 8024c1a:	4618      	mov	r0, r3
 8024c1c:	f7fd fbc2 	bl	80223a4 <_ZN9LineTrace16DeterminePidGainEf>
 8024c20:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024c24:	687b      	ldr	r3, [r7, #4]
 8024c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c28:	edd7 0a02 	vldr	s1, [r7, #8]
 8024c2c:	ed97 0a03 	vldr	s0, [r7, #12]
 8024c30:	4618      	mov	r0, r3
 8024c32:	f7fe ffed 	bl	8023c10 <_ZN5Motor5DriveEff>
 8024c36:	e000      	b.n	8024c3a <_ZN3Run12ModeFirstRunEv+0x92>
    if(EmergencyStop()) return;
 8024c38:	bf00      	nop
}
 8024c3a:	3718      	adds	r7, #24
 8024c3c:	46bd      	mov	sp, r7
 8024c3e:	bd80      	pop	{r7, pc}

08024c40 <_ZN3Run13ModeFirstGoalEv>:

void Run::ModeFirstGoal()
{
 8024c40:	b580      	push	{r7, lr}
 8024c42:	b082      	sub	sp, #8
 8024c44:	af00      	add	r7, sp, #0
 8024c46:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024c48:	687b      	ldr	r3, [r7, #4]
 8024c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c4c:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8024c84 <_ZN3Run13ModeFirstGoalEv+0x44>
 8024c50:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8024c84 <_ZN3Run13ModeFirstGoalEv+0x44>
 8024c54:	4618      	mov	r0, r3
 8024c56:	f7fe ffdb 	bl	8023c10 <_ZN5Motor5DriveEff>
    if(store_log_failed_) led_->ColorOrder('R');
 8024c5a:	687b      	ldr	r3, [r7, #4]
 8024c5c:	799b      	ldrb	r3, [r3, #6]
 8024c5e:	2b00      	cmp	r3, #0
 8024c60:	d006      	beq.n	8024c70 <_ZN3Run13ModeFirstGoalEv+0x30>
 8024c62:	687b      	ldr	r3, [r7, #4]
 8024c64:	699b      	ldr	r3, [r3, #24]
 8024c66:	2152      	movs	r1, #82	; 0x52
 8024c68:	4618      	mov	r0, r3
 8024c6a:	f7fc fe97 	bl	802199c <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('B');
}
 8024c6e:	e005      	b.n	8024c7c <_ZN3Run13ModeFirstGoalEv+0x3c>
    else led_->ColorOrder('B');
 8024c70:	687b      	ldr	r3, [r7, #4]
 8024c72:	699b      	ldr	r3, [r3, #24]
 8024c74:	2142      	movs	r1, #66	; 0x42
 8024c76:	4618      	mov	r0, r3
 8024c78:	f7fc fe90 	bl	802199c <_ZN3Led10ColorOrderEc>
}
 8024c7c:	bf00      	nop
 8024c7e:	3708      	adds	r7, #8
 8024c80:	46bd      	mov	sp, r7
 8024c82:	bd80      	pop	{r7, pc}
 8024c84:	00000000 	.word	0x00000000

08024c88 <_ZN3Run13ModeSecondRunEv>:

void Run::ModeSecondRun()
{
 8024c88:	b580      	push	{r7, lr}
 8024c8a:	b086      	sub	sp, #24
 8024c8c:	af00      	add	r7, sp, #0
 8024c8e:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024c90:	687b      	ldr	r3, [r7, #4]
 8024c92:	69db      	ldr	r3, [r3, #28]
 8024c94:	4618      	mov	r0, r3
 8024c96:	f7fd f9ab 	bl	8021ff0 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024c9a:	687b      	ldr	r3, [r7, #4]
 8024c9c:	689b      	ldr	r3, [r3, #8]
 8024c9e:	4618      	mov	r0, r3
 8024ca0:	f7fc f8d6 	bl	8020e50 <_ZN7Encoder6UpdateEv>
    imu_->Update();
 8024ca4:	687b      	ldr	r3, [r7, #4]
 8024ca6:	695b      	ldr	r3, [r3, #20]
 8024ca8:	4618      	mov	r0, r3
 8024caa:	f7fc fd39 	bl	8021720 <_ZN3Imu6UpdateEv>
    side_sensor_->Update();
 8024cae:	687b      	ldr	r3, [r7, #4]
 8024cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024cb2:	4618      	mov	r0, r3
 8024cb4:	f000 f9ae 	bl	8025014 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024cb8:	6878      	ldr	r0, [r7, #4]
 8024cba:	f7ff fc7b 	bl	80245b4 <_ZN3Run13EmergencyStopEv>
 8024cbe:	4603      	mov	r3, r0
 8024cc0:	2b00      	cmp	r3, #0
 8024cc2:	d131      	bne.n	8024d28 <_ZN3Run13ModeSecondRunEv+0xa0>
    /* Loading */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024cc4:	687b      	ldr	r3, [r7, #4]
 8024cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024cc8:	4618      	mov	r0, r3
 8024cca:	f000 fb72 	bl	80253b2 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024cce:	4603      	mov	r3, r0
 8024cd0:	75fb      	strb	r3, [r7, #23]
    if(goal_count == 1) logger_->Loading();
 8024cd2:	7dfb      	ldrb	r3, [r7, #23]
 8024cd4:	2b01      	cmp	r3, #1
 8024cd6:	d104      	bne.n	8024ce2 <_ZN3Run13ModeSecondRunEv+0x5a>
 8024cd8:	687b      	ldr	r3, [r7, #4]
 8024cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024cdc:	4618      	mov	r0, r3
 8024cde:	f7fe f8af 	bl	8022e40 <_ZN6Logger7LoadingEv>
    /* Motor control */
    float target_velocity = SecondTargetVelocity(goal_count);
 8024ce2:	7dfb      	ldrb	r3, [r7, #23]
 8024ce4:	4619      	mov	r1, r3
 8024ce6:	6878      	ldr	r0, [r7, #4]
 8024ce8:	f000 f8ac 	bl	8024e44 <_ZN3Run20SecondTargetVelocityEh>
 8024cec:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024cf0:	687b      	ldr	r3, [r7, #4]
 8024cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024cf4:	ed97 0a04 	vldr	s0, [r7, #16]
 8024cf8:	4618      	mov	r0, r3
 8024cfa:	f001 f8ec 	bl	8025ed6 <_ZN15VelocityControl16DeterminePidGainEf>
 8024cfe:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024d02:	687b      	ldr	r3, [r7, #4]
 8024d04:	6a1b      	ldr	r3, [r3, #32]
 8024d06:	ed97 0a04 	vldr	s0, [r7, #16]
 8024d0a:	4618      	mov	r0, r3
 8024d0c:	f7fd fb4a 	bl	80223a4 <_ZN9LineTrace16DeterminePidGainEf>
 8024d10:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024d14:	687b      	ldr	r3, [r7, #4]
 8024d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024d18:	edd7 0a02 	vldr	s1, [r7, #8]
 8024d1c:	ed97 0a03 	vldr	s0, [r7, #12]
 8024d20:	4618      	mov	r0, r3
 8024d22:	f7fe ff75 	bl	8023c10 <_ZN5Motor5DriveEff>
 8024d26:	e000      	b.n	8024d2a <_ZN3Run13ModeSecondRunEv+0xa2>
    if(EmergencyStop()) return;
 8024d28:	bf00      	nop
}
 8024d2a:	3718      	adds	r7, #24
 8024d2c:	46bd      	mov	sp, r7
 8024d2e:	bd80      	pop	{r7, pc}

08024d30 <_ZN3Run14ModeSecondGoalEv>:

void Run::ModeSecondGoal()
{
 8024d30:	b580      	push	{r7, lr}
 8024d32:	b082      	sub	sp, #8
 8024d34:	af00      	add	r7, sp, #0
 8024d36:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024d38:	687b      	ldr	r3, [r7, #4]
 8024d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024d3c:	eddf 0a08 	vldr	s1, [pc, #32]	; 8024d60 <_ZN3Run14ModeSecondGoalEv+0x30>
 8024d40:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8024d60 <_ZN3Run14ModeSecondGoalEv+0x30>
 8024d44:	4618      	mov	r0, r3
 8024d46:	f7fe ff63 	bl	8023c10 <_ZN5Motor5DriveEff>
    led_->ColorOrder('M');
 8024d4a:	687b      	ldr	r3, [r7, #4]
 8024d4c:	699b      	ldr	r3, [r3, #24]
 8024d4e:	214d      	movs	r1, #77	; 0x4d
 8024d50:	4618      	mov	r0, r3
 8024d52:	f7fc fe23 	bl	802199c <_ZN3Led10ColorOrderEc>
}
 8024d56:	bf00      	nop
 8024d58:	3708      	adds	r7, #8
 8024d5a:	46bd      	mov	sp, r7
 8024d5c:	bd80      	pop	{r7, pc}
 8024d5e:	bf00      	nop
 8024d60:	00000000 	.word	0x00000000

08024d64 <_ZN3Run24ModeVelocityControlDebugEv>:
    motor_->Drive(trans_ratio, rotat_ratio);
}

#ifdef DEBUG_MODE
void Run::ModeVelocityControlDebug()
{
 8024d64:	b580      	push	{r7, lr}
 8024d66:	b084      	sub	sp, #16
 8024d68:	af00      	add	r7, sp, #0
 8024d6a:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024d6c:	687b      	ldr	r3, [r7, #4]
 8024d6e:	69db      	ldr	r3, [r3, #28]
 8024d70:	4618      	mov	r0, r3
 8024d72:	f7fd f93d 	bl	8021ff0 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024d76:	687b      	ldr	r3, [r7, #4]
 8024d78:	689b      	ldr	r3, [r3, #8]
 8024d7a:	4618      	mov	r0, r3
 8024d7c:	f7fc f868 	bl	8020e50 <_ZN7Encoder6UpdateEv>
    /* Motor control */
    float target_velocity = VELOCITY_CONTROL_TARGET;
 8024d80:	4b0b      	ldr	r3, [pc, #44]	; (8024db0 <_ZN3Run24ModeVelocityControlDebugEv+0x4c>)
 8024d82:	60fb      	str	r3, [r7, #12]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024d84:	687b      	ldr	r3, [r7, #4]
 8024d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024d88:	ed97 0a03 	vldr	s0, [r7, #12]
 8024d8c:	4618      	mov	r0, r3
 8024d8e:	f001 f8a2 	bl	8025ed6 <_ZN15VelocityControl16DeterminePidGainEf>
 8024d92:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, 0);
 8024d96:	687b      	ldr	r3, [r7, #4]
 8024d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024d9a:	eddf 0a06 	vldr	s1, [pc, #24]	; 8024db4 <_ZN3Run24ModeVelocityControlDebugEv+0x50>
 8024d9e:	ed97 0a02 	vldr	s0, [r7, #8]
 8024da2:	4618      	mov	r0, r3
 8024da4:	f7fe ff34 	bl	8023c10 <_ZN5Motor5DriveEff>
}
 8024da8:	bf00      	nop
 8024daa:	3710      	adds	r7, #16
 8024dac:	46bd      	mov	sp, r7
 8024dae:	bd80      	pop	{r7, pc}
 8024db0:	3f99999a 	.word	0x3f99999a
 8024db4:	00000000 	.word	0x00000000

08024db8 <_ZN3Run18ModeLineTraceDebugEv>:

void Run::ModeLineTraceDebug()
{
 8024db8:	b580      	push	{r7, lr}
 8024dba:	b084      	sub	sp, #16
 8024dbc:	af00      	add	r7, sp, #0
 8024dbe:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024dc0:	687b      	ldr	r3, [r7, #4]
 8024dc2:	69db      	ldr	r3, [r3, #28]
 8024dc4:	4618      	mov	r0, r3
 8024dc6:	f7fd f913 	bl	8021ff0 <_ZN10LineSensor6UpdateEv>
    /* Motor control */
    float rotat_ratio = line_trace_->LineTraceOnly();
 8024dca:	687b      	ldr	r3, [r7, #4]
 8024dcc:	6a1b      	ldr	r3, [r3, #32]
 8024dce:	4618      	mov	r0, r3
 8024dd0:	f7fd faca 	bl	8022368 <_ZN9LineTrace13LineTraceOnlyEv>
 8024dd4:	ed87 0a03 	vstr	s0, [r7, #12]
    motor_->Drive(0, rotat_ratio);
 8024dd8:	687b      	ldr	r3, [r7, #4]
 8024dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024ddc:	edd7 0a03 	vldr	s1, [r7, #12]
 8024de0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8024df4 <_ZN3Run18ModeLineTraceDebugEv+0x3c>
 8024de4:	4618      	mov	r0, r3
 8024de6:	f7fe ff13 	bl	8023c10 <_ZN5Motor5DriveEff>
}
 8024dea:	bf00      	nop
 8024dec:	3710      	adds	r7, #16
 8024dee:	46bd      	mov	sp, r7
 8024df0:	bd80      	pop	{r7, pc}
 8024df2:	bf00      	nop
 8024df4:	00000000 	.word	0x00000000

08024df8 <_ZN3Run19FirstTargetVelocityEh>:
    InitialTest();
}
#endif // DEBUG_MODE

float Run::FirstTargetVelocity(uint8_t goal_count)
{
 8024df8:	b480      	push	{r7}
 8024dfa:	b083      	sub	sp, #12
 8024dfc:	af00      	add	r7, sp, #0
 8024dfe:	6078      	str	r0, [r7, #4]
 8024e00:	460b      	mov	r3, r1
 8024e02:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024e04:	78fb      	ldrb	r3, [r7, #3]
 8024e06:	2b01      	cmp	r3, #1
 8024e08:	d101      	bne.n	8024e0e <_ZN3Run19FirstTargetVelocityEh+0x16>
    {
        return EXPLORE_VELOCITY;
 8024e0a:	4b0b      	ldr	r3, [pc, #44]	; (8024e38 <_ZN3Run19FirstTargetVelocityEh+0x40>)
 8024e0c:	e00b      	b.n	8024e26 <_ZN3Run19FirstTargetVelocityEh+0x2e>
    }
    else if(goal_count >= 2)
 8024e0e:	78fb      	ldrb	r3, [r7, #3]
 8024e10:	2b01      	cmp	r3, #1
 8024e12:	d907      	bls.n	8024e24 <_ZN3Run19FirstTargetVelocityEh+0x2c>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024e14:	4b09      	ldr	r3, [pc, #36]	; (8024e3c <_ZN3Run19FirstTargetVelocityEh+0x44>)
 8024e16:	781b      	ldrb	r3, [r3, #0]
 8024e18:	3301      	adds	r3, #1
 8024e1a:	b2da      	uxtb	r2, r3
 8024e1c:	4b07      	ldr	r3, [pc, #28]	; (8024e3c <_ZN3Run19FirstTargetVelocityEh+0x44>)
 8024e1e:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024e20:	4b07      	ldr	r3, [pc, #28]	; (8024e40 <_ZN3Run19FirstTargetVelocityEh+0x48>)
 8024e22:	e000      	b.n	8024e26 <_ZN3Run19FirstTargetVelocityEh+0x2e>
        {
            SetRunMode(FIRST_GOAL);
            return 0;
        }
    }
    else return EXPLORE_VELOCITY;
 8024e24:	4b04      	ldr	r3, [pc, #16]	; (8024e38 <_ZN3Run19FirstTargetVelocityEh+0x40>)
 8024e26:	ee07 3a90 	vmov	s15, r3
}
 8024e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8024e2e:	370c      	adds	r7, #12
 8024e30:	46bd      	mov	sp, r7
 8024e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e36:	4770      	bx	lr
 8024e38:	3f19999a 	.word	0x3f19999a
 8024e3c:	20000492 	.word	0x20000492
 8024e40:	3dcccccd 	.word	0x3dcccccd

08024e44 <_ZN3Run20SecondTargetVelocityEh>:

float Run::SecondTargetVelocity(uint8_t goal_count)
{
 8024e44:	b580      	push	{r7, lr}
 8024e46:	b082      	sub	sp, #8
 8024e48:	af00      	add	r7, sp, #0
 8024e4a:	6078      	str	r0, [r7, #4]
 8024e4c:	460b      	mov	r3, r1
 8024e4e:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024e50:	78fb      	ldrb	r3, [r7, #3]
 8024e52:	2b01      	cmp	r3, #1
 8024e54:	d107      	bne.n	8024e66 <_ZN3Run20SecondTargetVelocityEh+0x22>
    {
        return logger_->GetTargetVelocity();
 8024e56:	687b      	ldr	r3, [r7, #4]
 8024e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024e5a:	4618      	mov	r0, r3
 8024e5c:	f7fe f832 	bl	8022ec4 <_ZN6Logger17GetTargetVelocityEv>
 8024e60:	eef0 7a40 	vmov.f32	s15, s0
 8024e64:	e00d      	b.n	8024e82 <_ZN3Run20SecondTargetVelocityEh+0x3e>
    }
    else if(goal_count >= 2)
 8024e66:	78fb      	ldrb	r3, [r7, #3]
 8024e68:	2b01      	cmp	r3, #1
 8024e6a:	d908      	bls.n	8024e7e <_ZN3Run20SecondTargetVelocityEh+0x3a>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024e6c:	4b07      	ldr	r3, [pc, #28]	; (8024e8c <_ZN3Run20SecondTargetVelocityEh+0x48>)
 8024e6e:	781b      	ldrb	r3, [r3, #0]
 8024e70:	3301      	adds	r3, #1
 8024e72:	b2da      	uxtb	r2, r3
 8024e74:	4b05      	ldr	r3, [pc, #20]	; (8024e8c <_ZN3Run20SecondTargetVelocityEh+0x48>)
 8024e76:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024e78:	eddf 7a05 	vldr	s15, [pc, #20]	; 8024e90 <_ZN3Run20SecondTargetVelocityEh+0x4c>
 8024e7c:	e001      	b.n	8024e82 <_ZN3Run20SecondTargetVelocityEh+0x3e>
        {
            SetRunMode(SECOND_GOAL);
            return 0;
        }
    }
    else return MIN_VELOCITY;
 8024e7e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
}
 8024e82:	eeb0 0a67 	vmov.f32	s0, s15
 8024e86:	3708      	adds	r7, #8
 8024e88:	46bd      	mov	sp, r7
 8024e8a:	bd80      	pop	{r7, pc}
 8024e8c:	20000493 	.word	0x20000493
 8024e90:	3dcccccd 	.word	0x3dcccccd

08024e94 <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0)
 8024e94:	b480      	push	{r7}
 8024e96:	b083      	sub	sp, #12
 8024e98:	af00      	add	r7, sp, #0
 8024e9a:	6078      	str	r0, [r7, #4]
                         , write_state_flags_(0)
                         , exception_flags_(0)
                         , master_count_(0)
                         , goal_marker_count_(0)
                         , corner_marker_count_(0)
                         , cross_line_count_(0) {}
 8024e9c:	687b      	ldr	r3, [r7, #4]
 8024e9e:	2200      	movs	r2, #0
 8024ea0:	701a      	strb	r2, [r3, #0]
 8024ea2:	687b      	ldr	r3, [r7, #4]
 8024ea4:	2200      	movs	r2, #0
 8024ea6:	705a      	strb	r2, [r3, #1]
 8024ea8:	687b      	ldr	r3, [r7, #4]
 8024eaa:	2200      	movs	r2, #0
 8024eac:	709a      	strb	r2, [r3, #2]
 8024eae:	687b      	ldr	r3, [r7, #4]
 8024eb0:	2200      	movs	r2, #0
 8024eb2:	70da      	strb	r2, [r3, #3]
 8024eb4:	687b      	ldr	r3, [r7, #4]
 8024eb6:	2200      	movs	r2, #0
 8024eb8:	711a      	strb	r2, [r3, #4]
 8024eba:	687b      	ldr	r3, [r7, #4]
 8024ebc:	2200      	movs	r2, #0
 8024ebe:	715a      	strb	r2, [r3, #5]
 8024ec0:	687b      	ldr	r3, [r7, #4]
 8024ec2:	2200      	movs	r2, #0
 8024ec4:	719a      	strb	r2, [r3, #6]
 8024ec6:	687b      	ldr	r3, [r7, #4]
 8024ec8:	4618      	mov	r0, r3
 8024eca:	370c      	adds	r7, #12
 8024ecc:	46bd      	mov	sp, r7
 8024ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ed2:	4770      	bx	lr

08024ed4 <_ZN10SideSensor11UpdateStateEv>:

void SideSensor::UpdateState()
{
 8024ed4:	b580      	push	{r7, lr}
 8024ed6:	b084      	sub	sp, #16
 8024ed8:	af00      	add	r7, sp, #0
 8024eda:	6078      	str	r0, [r7, #4]
    uint8_t io_state = 0xFF; // Lower bits represent the positions of sensors.
 8024edc:	23ff      	movs	r3, #255	; 0xff
 8024ede:	73fb      	strb	r3, [r7, #15]

    if(IO_OUTSIDE_L == 0) io_state &= 0xF7; // 0111
 8024ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8024ee4:	4849      	ldr	r0, [pc, #292]	; (802500c <_ZN10SideSensor11UpdateStateEv+0x138>)
 8024ee6:	f002 ffb1 	bl	8027e4c <HAL_GPIO_ReadPin>
 8024eea:	4603      	mov	r3, r0
 8024eec:	2b00      	cmp	r3, #0
 8024eee:	bf0c      	ite	eq
 8024ef0:	2301      	moveq	r3, #1
 8024ef2:	2300      	movne	r3, #0
 8024ef4:	b2db      	uxtb	r3, r3
 8024ef6:	2b00      	cmp	r3, #0
 8024ef8:	d003      	beq.n	8024f02 <_ZN10SideSensor11UpdateStateEv+0x2e>
 8024efa:	7bfb      	ldrb	r3, [r7, #15]
 8024efc:	f023 0308 	bic.w	r3, r3, #8
 8024f00:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_L == 0)  io_state &= 0xFB; // 1011
 8024f02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8024f06:	4841      	ldr	r0, [pc, #260]	; (802500c <_ZN10SideSensor11UpdateStateEv+0x138>)
 8024f08:	f002 ffa0 	bl	8027e4c <HAL_GPIO_ReadPin>
 8024f0c:	4603      	mov	r3, r0
 8024f0e:	2b00      	cmp	r3, #0
 8024f10:	bf0c      	ite	eq
 8024f12:	2301      	moveq	r3, #1
 8024f14:	2300      	movne	r3, #0
 8024f16:	b2db      	uxtb	r3, r3
 8024f18:	2b00      	cmp	r3, #0
 8024f1a:	d003      	beq.n	8024f24 <_ZN10SideSensor11UpdateStateEv+0x50>
 8024f1c:	7bfb      	ldrb	r3, [r7, #15]
 8024f1e:	f023 0304 	bic.w	r3, r3, #4
 8024f22:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_R == 0)  io_state &= 0xFD; // 1101
 8024f24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8024f28:	4838      	ldr	r0, [pc, #224]	; (802500c <_ZN10SideSensor11UpdateStateEv+0x138>)
 8024f2a:	f002 ff8f 	bl	8027e4c <HAL_GPIO_ReadPin>
 8024f2e:	4603      	mov	r3, r0
 8024f30:	2b00      	cmp	r3, #0
 8024f32:	bf0c      	ite	eq
 8024f34:	2301      	moveq	r3, #1
 8024f36:	2300      	movne	r3, #0
 8024f38:	b2db      	uxtb	r3, r3
 8024f3a:	2b00      	cmp	r3, #0
 8024f3c:	d003      	beq.n	8024f46 <_ZN10SideSensor11UpdateStateEv+0x72>
 8024f3e:	7bfb      	ldrb	r3, [r7, #15]
 8024f40:	f023 0302 	bic.w	r3, r3, #2
 8024f44:	73fb      	strb	r3, [r7, #15]
    if(IO_OUTSIDE_R == 0) io_state &= 0xFE; // 1110
 8024f46:	2104      	movs	r1, #4
 8024f48:	4831      	ldr	r0, [pc, #196]	; (8025010 <_ZN10SideSensor11UpdateStateEv+0x13c>)
 8024f4a:	f002 ff7f 	bl	8027e4c <HAL_GPIO_ReadPin>
 8024f4e:	4603      	mov	r3, r0
 8024f50:	2b00      	cmp	r3, #0
 8024f52:	bf0c      	ite	eq
 8024f54:	2301      	moveq	r3, #1
 8024f56:	2300      	movne	r3, #0
 8024f58:	b2db      	uxtb	r3, r3
 8024f5a:	2b00      	cmp	r3, #0
 8024f5c:	d003      	beq.n	8024f66 <_ZN10SideSensor11UpdateStateEv+0x92>
 8024f5e:	7bfb      	ldrb	r3, [r7, #15]
 8024f60:	f023 0301 	bic.w	r3, r3, #1
 8024f64:	73fb      	strb	r3, [r7, #15]

    read_state_flags_ <<= 4;
 8024f66:	687b      	ldr	r3, [r7, #4]
 8024f68:	781b      	ldrb	r3, [r3, #0]
 8024f6a:	011b      	lsls	r3, r3, #4
 8024f6c:	b2da      	uxtb	r2, r3
 8024f6e:	687b      	ldr	r3, [r7, #4]
 8024f70:	701a      	strb	r2, [r3, #0]

    switch(io_state)
 8024f72:	7bfb      	ldrb	r3, [r7, #15]
 8024f74:	3bf0      	subs	r3, #240	; 0xf0
 8024f76:	2b0f      	cmp	r3, #15
 8024f78:	d842      	bhi.n	8025000 <_ZN10SideSensor11UpdateStateEv+0x12c>
 8024f7a:	a201      	add	r2, pc, #4	; (adr r2, 8024f80 <_ZN10SideSensor11UpdateStateEv+0xac>)
 8024f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024f80:	08024ff1 	.word	0x08024ff1
 8024f84:	08024ff1 	.word	0x08024ff1
 8024f88:	08024ff1 	.word	0x08024ff1
 8024f8c:	08024fe1 	.word	0x08024fe1
 8024f90:	08024ff1 	.word	0x08024ff1
 8024f94:	08025001 	.word	0x08025001
 8024f98:	08024ff1 	.word	0x08024ff1
 8024f9c:	08024fe1 	.word	0x08024fe1
 8024fa0:	08024ff1 	.word	0x08024ff1
 8024fa4:	08024ff1 	.word	0x08024ff1
 8024fa8:	08025001 	.word	0x08025001
 8024fac:	08024fe1 	.word	0x08024fe1
 8024fb0:	08024fd1 	.word	0x08024fd1
 8024fb4:	08025001 	.word	0x08025001
 8024fb8:	08025001 	.word	0x08025001
 8024fbc:	08024fc1 	.word	0x08024fc1
    {
        case 0xFF: // 1111
            read_state_flags_ |= 0x08; break;
 8024fc0:	687b      	ldr	r3, [r7, #4]
 8024fc2:	781b      	ldrb	r3, [r3, #0]
 8024fc4:	f043 0308 	orr.w	r3, r3, #8
 8024fc8:	b2da      	uxtb	r2, r3
 8024fca:	687b      	ldr	r3, [r7, #4]
 8024fcc:	701a      	strb	r2, [r3, #0]
 8024fce:	e018      	b.n	8025002 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFC: // 1100  If through goal, increase pattern.
            read_state_flags_ |= 0x04; break;
 8024fd0:	687b      	ldr	r3, [r7, #4]
 8024fd2:	781b      	ldrb	r3, [r3, #0]
 8024fd4:	f043 0304 	orr.w	r3, r3, #4
 8024fd8:	b2da      	uxtb	r2, r3
 8024fda:	687b      	ldr	r3, [r7, #4]
 8024fdc:	701a      	strb	r2, [r3, #0]
 8024fde:	e010      	b.n	8025002 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFB: // 1011
        case 0xF7: // 0111
        case 0xF3: // 0011
            read_state_flags_ |= 0x02; break;
 8024fe0:	687b      	ldr	r3, [r7, #4]
 8024fe2:	781b      	ldrb	r3, [r3, #0]
 8024fe4:	f043 0302 	orr.w	r3, r3, #2
 8024fe8:	b2da      	uxtb	r2, r3
 8024fea:	687b      	ldr	r3, [r7, #4]
 8024fec:	701a      	strb	r2, [r3, #0]
 8024fee:	e008      	b.n	8025002 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xF4: // 0100
        case 0xF0: // 0000
        case 0xF1: // 0001
        case 0xF8: // 1000
        case 0xF9: // 1001
            read_state_flags_ |= 0x01; break;
 8024ff0:	687b      	ldr	r3, [r7, #4]
 8024ff2:	781b      	ldrb	r3, [r3, #0]
 8024ff4:	f043 0301 	orr.w	r3, r3, #1
 8024ff8:	b2da      	uxtb	r2, r3
 8024ffa:	687b      	ldr	r3, [r7, #4]
 8024ffc:	701a      	strb	r2, [r3, #0]
 8024ffe:	e000      	b.n	8025002 <_ZN10SideSensor11UpdateStateEv+0x12e>
        default: break;
 8025000:	bf00      	nop
    }
}
 8025002:	bf00      	nop
 8025004:	3710      	adds	r7, #16
 8025006:	46bd      	mov	sp, r7
 8025008:	bd80      	pop	{r7, pc}
 802500a:	bf00      	nop
 802500c:	40020400 	.word	0x40020400
 8025010:	40020c00 	.word	0x40020c00

08025014 <_ZN10SideSensor6UpdateEv>:

void SideSensor::Update()
{
 8025014:	b580      	push	{r7, lr}
 8025016:	b084      	sub	sp, #16
 8025018:	af00      	add	r7, sp, #0
 802501a:	6078      	str	r0, [r7, #4]
    uint8_t ignore_flag = exception_flags_ & 0x01;
 802501c:	687b      	ldr	r3, [r7, #4]
 802501e:	789b      	ldrb	r3, [r3, #2]
 8025020:	f003 0301 	and.w	r3, r3, #1
 8025024:	73fb      	strb	r3, [r7, #15]

    /* Ignore judgment */
    if(ignore_flag == 0x01)
 8025026:	7bfb      	ldrb	r3, [r7, #15]
 8025028:	2b01      	cmp	r3, #1
 802502a:	d111      	bne.n	8025050 <_ZN10SideSensor6UpdateEv+0x3c>
    {
        if(master_count_ < IGNORE_COUNT) master_count_++;
 802502c:	687b      	ldr	r3, [r7, #4]
 802502e:	78db      	ldrb	r3, [r3, #3]
 8025030:	2b04      	cmp	r3, #4
 8025032:	d806      	bhi.n	8025042 <_ZN10SideSensor6UpdateEv+0x2e>
 8025034:	687b      	ldr	r3, [r7, #4]
 8025036:	78db      	ldrb	r3, [r3, #3]
 8025038:	3301      	adds	r3, #1
 802503a:	b2da      	uxtb	r2, r3
 802503c:	687b      	ldr	r3, [r7, #4]
 802503e:	70da      	strb	r2, [r3, #3]
 8025040:	e031      	b.n	80250a6 <_ZN10SideSensor6UpdateEv+0x92>
        else exception_flags_ >>= 1; 
 8025042:	687b      	ldr	r3, [r7, #4]
 8025044:	789b      	ldrb	r3, [r3, #2]
 8025046:	105b      	asrs	r3, r3, #1
 8025048:	b2da      	uxtb	r2, r3
 802504a:	687b      	ldr	r3, [r7, #4]
 802504c:	709a      	strb	r2, [r3, #2]
 802504e:	e02a      	b.n	80250a6 <_ZN10SideSensor6UpdateEv+0x92>
    }
    else if(ignore_flag == 0x00)
 8025050:	7bfb      	ldrb	r3, [r7, #15]
 8025052:	2b00      	cmp	r3, #0
 8025054:	d127      	bne.n	80250a6 <_ZN10SideSensor6UpdateEv+0x92>
    {
        UpdateState();
 8025056:	6878      	ldr	r0, [r7, #4]
 8025058:	f7ff ff3c 	bl	8024ed4 <_ZN10SideSensor11UpdateStateEv>

        uint8_t now_state = read_state_flags_;
 802505c:	687b      	ldr	r3, [r7, #4]
 802505e:	781b      	ldrb	r3, [r3, #0]
 8025060:	73bb      	strb	r3, [r7, #14]
        uint8_t pre_state = (now_state << 4) | (now_state >> 4);
 8025062:	7bbb      	ldrb	r3, [r7, #14]
 8025064:	011b      	lsls	r3, r3, #4
 8025066:	b25a      	sxtb	r2, r3
 8025068:	7bbb      	ldrb	r3, [r7, #14]
 802506a:	111b      	asrs	r3, r3, #4
 802506c:	b25b      	sxtb	r3, r3
 802506e:	4313      	orrs	r3, r2
 8025070:	b25b      	sxtb	r3, r3
 8025072:	737b      	strb	r3, [r7, #13]

        if(pre_state != now_state)
 8025074:	7b7a      	ldrb	r2, [r7, #13]
 8025076:	7bbb      	ldrb	r3, [r7, #14]
 8025078:	429a      	cmp	r2, r3
 802507a:	d003      	beq.n	8025084 <_ZN10SideSensor6UpdateEv+0x70>
        {
            NoiseTolerance();
 802507c:	6878      	ldr	r0, [r7, #4]
 802507e:	f000 f819 	bl	80250b4 <_ZN10SideSensor14NoiseToleranceEv>
 8025082:	e010      	b.n	80250a6 <_ZN10SideSensor6UpdateEv+0x92>
        }
        else if(pre_state == now_state)
 8025084:	7b7a      	ldrb	r2, [r7, #13]
 8025086:	7bbb      	ldrb	r3, [r7, #14]
 8025088:	429a      	cmp	r2, r3
 802508a:	d10c      	bne.n	80250a6 <_ZN10SideSensor6UpdateEv+0x92>
        {
            exception_flags_ &= 0xF3; // noise_count = 0
 802508c:	687b      	ldr	r3, [r7, #4]
 802508e:	789b      	ldrb	r3, [r3, #2]
 8025090:	f023 030c 	bic.w	r3, r3, #12
 8025094:	b2da      	uxtb	r2, r3
 8025096:	687b      	ldr	r3, [r7, #4]
 8025098:	709a      	strb	r2, [r3, #2]
            ConfirmState();
 802509a:	6878      	ldr	r0, [r7, #4]
 802509c:	f000 f85a 	bl	8025154 <_ZN10SideSensor12ConfirmStateEv>
            CountUp();
 80250a0:	6878      	ldr	r0, [r7, #4]
 80250a2:	f000 f8c6 	bl	8025232 <_ZN10SideSensor7CountUpEv>
        }
    }

#ifdef DEBUG_MODE
    Monitor();
 80250a6:	6878      	ldr	r0, [r7, #4]
 80250a8:	f000 f9a8 	bl	80253fc <_ZN10SideSensor7MonitorEv>
#endif // DEBUG_MODE
}
 80250ac:	bf00      	nop
 80250ae:	3710      	adds	r7, #16
 80250b0:	46bd      	mov	sp, r7
 80250b2:	bd80      	pop	{r7, pc}

080250b4 <_ZN10SideSensor14NoiseToleranceEv>:

void SideSensor::NoiseTolerance()
{
 80250b4:	b580      	push	{r7, lr}
 80250b6:	b084      	sub	sp, #16
 80250b8:	af00      	add	r7, sp, #0
 80250ba:	6078      	str	r0, [r7, #4]
    uint8_t noise_count = (exception_flags_ & 0x0C) >> 2;
 80250bc:	687b      	ldr	r3, [r7, #4]
 80250be:	789b      	ldrb	r3, [r3, #2]
 80250c0:	109b      	asrs	r3, r3, #2
 80250c2:	b2db      	uxtb	r3, r3
 80250c4:	f003 0303 	and.w	r3, r3, #3
 80250c8:	73fb      	strb	r3, [r7, #15]

    if(noise_count == 0x00)
 80250ca:	7bfb      	ldrb	r3, [r7, #15]
 80250cc:	2b00      	cmp	r3, #0
 80250ce:	d11f      	bne.n	8025110 <_ZN10SideSensor14NoiseToleranceEv+0x5c>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ & 0xF0);
 80250d0:	687b      	ldr	r3, [r7, #4]
 80250d2:	789b      	ldrb	r3, [r3, #2]
 80250d4:	f003 030f 	and.w	r3, r3, #15
 80250d8:	b2da      	uxtb	r2, r3
 80250da:	687b      	ldr	r3, [r7, #4]
 80250dc:	781b      	ldrb	r3, [r3, #0]
 80250de:	f023 030f 	bic.w	r3, r3, #15
 80250e2:	b2db      	uxtb	r3, r3
 80250e4:	4313      	orrs	r3, r2
 80250e6:	b2da      	uxtb	r2, r3
 80250e8:	687b      	ldr	r3, [r7, #4]
 80250ea:	709a      	strb	r2, [r3, #2]
        /* Count up noise_count */
        noise_count++;
 80250ec:	7bfb      	ldrb	r3, [r7, #15]
 80250ee:	3301      	adds	r3, #1
 80250f0:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 80250f2:	687b      	ldr	r3, [r7, #4]
 80250f4:	789b      	ldrb	r3, [r3, #2]
 80250f6:	b25b      	sxtb	r3, r3
 80250f8:	f023 030c 	bic.w	r3, r3, #12
 80250fc:	b25a      	sxtb	r2, r3
 80250fe:	7bfb      	ldrb	r3, [r7, #15]
 8025100:	009b      	lsls	r3, r3, #2
 8025102:	b25b      	sxtb	r3, r3
 8025104:	4313      	orrs	r3, r2
 8025106:	b25b      	sxtb	r3, r3
 8025108:	b2da      	uxtb	r2, r3
 802510a:	687b      	ldr	r3, [r7, #4]
 802510c:	709a      	strb	r2, [r3, #2]

        ConfirmState();
        CountUp();
    }
    else master_count_ = 0;
}
 802510e:	e01d      	b.n	802514c <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else if(noise_count == 0x01)
 8025110:	7bfb      	ldrb	r3, [r7, #15]
 8025112:	2b01      	cmp	r3, #1
 8025114:	d117      	bne.n	8025146 <_ZN10SideSensor14NoiseToleranceEv+0x92>
        noise_count++;
 8025116:	7bfb      	ldrb	r3, [r7, #15]
 8025118:	3301      	adds	r3, #1
 802511a:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 802511c:	687b      	ldr	r3, [r7, #4]
 802511e:	789b      	ldrb	r3, [r3, #2]
 8025120:	b25b      	sxtb	r3, r3
 8025122:	f023 030c 	bic.w	r3, r3, #12
 8025126:	b25a      	sxtb	r2, r3
 8025128:	7bfb      	ldrb	r3, [r7, #15]
 802512a:	009b      	lsls	r3, r3, #2
 802512c:	b25b      	sxtb	r3, r3
 802512e:	4313      	orrs	r3, r2
 8025130:	b25b      	sxtb	r3, r3
 8025132:	b2da      	uxtb	r2, r3
 8025134:	687b      	ldr	r3, [r7, #4]
 8025136:	709a      	strb	r2, [r3, #2]
        ConfirmState();
 8025138:	6878      	ldr	r0, [r7, #4]
 802513a:	f000 f80b 	bl	8025154 <_ZN10SideSensor12ConfirmStateEv>
        CountUp();
 802513e:	6878      	ldr	r0, [r7, #4]
 8025140:	f000 f877 	bl	8025232 <_ZN10SideSensor7CountUpEv>
}
 8025144:	e002      	b.n	802514c <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else master_count_ = 0;
 8025146:	687b      	ldr	r3, [r7, #4]
 8025148:	2200      	movs	r2, #0
 802514a:	70da      	strb	r2, [r3, #3]
}
 802514c:	bf00      	nop
 802514e:	3710      	adds	r7, #16
 8025150:	46bd      	mov	sp, r7
 8025152:	bd80      	pop	{r7, pc}

08025154 <_ZN10SideSensor12ConfirmStateEv>:

void SideSensor::ConfirmState()
{
 8025154:	b480      	push	{r7}
 8025156:	b085      	sub	sp, #20
 8025158:	af00      	add	r7, sp, #0
 802515a:	6078      	str	r0, [r7, #4]
    uint8_t before_noise_state = exception_flags_ >> 4;
 802515c:	687b      	ldr	r3, [r7, #4]
 802515e:	789b      	ldrb	r3, [r3, #2]
 8025160:	111b      	asrs	r3, r3, #4
 8025162:	73bb      	strb	r3, [r7, #14]
    uint8_t now_state = read_state_flags_ & 0x0F;
 8025164:	687b      	ldr	r3, [r7, #4]
 8025166:	781b      	ldrb	r3, [r3, #0]
 8025168:	f003 030f 	and.w	r3, r3, #15
 802516c:	737b      	strb	r3, [r7, #13]
    uint8_t count = master_count_;
 802516e:	687b      	ldr	r3, [r7, #4]
 8025170:	78db      	ldrb	r3, [r3, #3]
 8025172:	73fb      	strb	r3, [r7, #15]

    if(before_noise_state != now_state)
 8025174:	7bba      	ldrb	r2, [r7, #14]
 8025176:	7b7b      	ldrb	r3, [r7, #13]
 8025178:	429a      	cmp	r2, r3
 802517a:	d010      	beq.n	802519e <_ZN10SideSensor12ConfirmStateEv+0x4a>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (now_state << 4);
 802517c:	687b      	ldr	r3, [r7, #4]
 802517e:	789b      	ldrb	r3, [r3, #2]
 8025180:	b25b      	sxtb	r3, r3
 8025182:	f003 030f 	and.w	r3, r3, #15
 8025186:	b25a      	sxtb	r2, r3
 8025188:	7b7b      	ldrb	r3, [r7, #13]
 802518a:	011b      	lsls	r3, r3, #4
 802518c:	b25b      	sxtb	r3, r3
 802518e:	4313      	orrs	r3, r2
 8025190:	b25b      	sxtb	r3, r3
 8025192:	b2da      	uxtb	r2, r3
 8025194:	687b      	ldr	r3, [r7, #4]
 8025196:	709a      	strb	r2, [r3, #2]
        count = 0;
 8025198:	2300      	movs	r3, #0
 802519a:	73fb      	strb	r3, [r7, #15]
 802519c:	e005      	b.n	80251aa <_ZN10SideSensor12ConfirmStateEv+0x56>
    }
    else if(count < MAX_INTERRUPT_COUNT) count++;
 802519e:	7bfb      	ldrb	r3, [r7, #15]
 80251a0:	2bf9      	cmp	r3, #249	; 0xf9
 80251a2:	d802      	bhi.n	80251aa <_ZN10SideSensor12ConfirmStateEv+0x56>
 80251a4:	7bfb      	ldrb	r3, [r7, #15]
 80251a6:	3301      	adds	r3, #1
 80251a8:	73fb      	strb	r3, [r7, #15]

    master_count_ = count;
 80251aa:	687b      	ldr	r3, [r7, #4]
 80251ac:	7bfa      	ldrb	r2, [r7, #15]
 80251ae:	70da      	strb	r2, [r3, #3]

    if(now_state == 0x08 && count >= BLACK_BLACK_COUNT)
 80251b0:	7b7b      	ldrb	r3, [r7, #13]
 80251b2:	2b08      	cmp	r3, #8
 80251b4:	d10d      	bne.n	80251d2 <_ZN10SideSensor12ConfirmStateEv+0x7e>
 80251b6:	7bfb      	ldrb	r3, [r7, #15]
 80251b8:	2b13      	cmp	r3, #19
 80251ba:	d90a      	bls.n	80251d2 <_ZN10SideSensor12ConfirmStateEv+0x7e>
    {
        write_state_flags_ = (write_state_flags_ & 0xF0) | 0x08;
 80251bc:	687b      	ldr	r3, [r7, #4]
 80251be:	785b      	ldrb	r3, [r3, #1]
 80251c0:	f023 030f 	bic.w	r3, r3, #15
 80251c4:	b2db      	uxtb	r3, r3
 80251c6:	f043 0308 	orr.w	r3, r3, #8
 80251ca:	b2da      	uxtb	r2, r3
 80251cc:	687b      	ldr	r3, [r7, #4]
 80251ce:	705a      	strb	r2, [r3, #1]
 80251d0:	e029      	b.n	8025226 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x04 && count >= BLACK_WHITE_COUNT)
 80251d2:	7b7b      	ldrb	r3, [r7, #13]
 80251d4:	2b04      	cmp	r3, #4
 80251d6:	d10a      	bne.n	80251ee <_ZN10SideSensor12ConfirmStateEv+0x9a>
 80251d8:	7bfb      	ldrb	r3, [r7, #15]
 80251da:	2b00      	cmp	r3, #0
 80251dc:	d007      	beq.n	80251ee <_ZN10SideSensor12ConfirmStateEv+0x9a>
    {
        write_state_flags_ |= 0x04;
 80251de:	687b      	ldr	r3, [r7, #4]
 80251e0:	785b      	ldrb	r3, [r3, #1]
 80251e2:	f043 0304 	orr.w	r3, r3, #4
 80251e6:	b2da      	uxtb	r2, r3
 80251e8:	687b      	ldr	r3, [r7, #4]
 80251ea:	705a      	strb	r2, [r3, #1]
 80251ec:	e01b      	b.n	8025226 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x02 && count >= WHITE_BLACK_COUNT)
 80251ee:	7b7b      	ldrb	r3, [r7, #13]
 80251f0:	2b02      	cmp	r3, #2
 80251f2:	d10a      	bne.n	802520a <_ZN10SideSensor12ConfirmStateEv+0xb6>
 80251f4:	7bfb      	ldrb	r3, [r7, #15]
 80251f6:	2b00      	cmp	r3, #0
 80251f8:	d007      	beq.n	802520a <_ZN10SideSensor12ConfirmStateEv+0xb6>
    {
        write_state_flags_ |= 0x02;
 80251fa:	687b      	ldr	r3, [r7, #4]
 80251fc:	785b      	ldrb	r3, [r3, #1]
 80251fe:	f043 0302 	orr.w	r3, r3, #2
 8025202:	b2da      	uxtb	r2, r3
 8025204:	687b      	ldr	r3, [r7, #4]
 8025206:	705a      	strb	r2, [r3, #1]
 8025208:	e00d      	b.n	8025226 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x01 && count >= WHITE_WHITE_COUNT)
 802520a:	7b7b      	ldrb	r3, [r7, #13]
 802520c:	2b01      	cmp	r3, #1
 802520e:	d10a      	bne.n	8025226 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    {
        write_state_flags_ = (write_state_flags_ & 0xF8) | 0x01;
 8025210:	687b      	ldr	r3, [r7, #4]
 8025212:	785b      	ldrb	r3, [r3, #1]
 8025214:	f023 0307 	bic.w	r3, r3, #7
 8025218:	b2db      	uxtb	r3, r3
 802521a:	f043 0301 	orr.w	r3, r3, #1
 802521e:	b2da      	uxtb	r2, r3
 8025220:	687b      	ldr	r3, [r7, #4]
 8025222:	705a      	strb	r2, [r3, #1]
    }
}
 8025224:	e7ff      	b.n	8025226 <_ZN10SideSensor12ConfirmStateEv+0xd2>
 8025226:	bf00      	nop
 8025228:	3714      	adds	r7, #20
 802522a:	46bd      	mov	sp, r7
 802522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025230:	4770      	bx	lr

08025232 <_ZN10SideSensor7CountUpEv>:

void SideSensor::CountUp()
{
 8025232:	b480      	push	{r7}
 8025234:	b085      	sub	sp, #20
 8025236:	af00      	add	r7, sp, #0
 8025238:	6078      	str	r0, [r7, #4]
    uint8_t state = write_state_flags_;
 802523a:	687b      	ldr	r3, [r7, #4]
 802523c:	785b      	ldrb	r3, [r3, #1]
 802523e:	73fb      	strb	r3, [r7, #15]
    uint8_t black_flag   = (state & 0x08) >> 3;
 8025240:	7bfb      	ldrb	r3, [r7, #15]
 8025242:	10db      	asrs	r3, r3, #3
 8025244:	b2db      	uxtb	r3, r3
 8025246:	f003 0301 	and.w	r3, r3, #1
 802524a:	73bb      	strb	r3, [r7, #14]
    uint8_t goal_flag    = (state & 0x04) >> 2;
 802524c:	7bfb      	ldrb	r3, [r7, #15]
 802524e:	109b      	asrs	r3, r3, #2
 8025250:	b2db      	uxtb	r3, r3
 8025252:	f003 0301 	and.w	r3, r3, #1
 8025256:	737b      	strb	r3, [r7, #13]
    uint8_t corner_flag  = (state & 0x02) >> 1;
 8025258:	7bfb      	ldrb	r3, [r7, #15]
 802525a:	105b      	asrs	r3, r3, #1
 802525c:	b2db      	uxtb	r3, r3
 802525e:	f003 0301 	and.w	r3, r3, #1
 8025262:	733b      	strb	r3, [r7, #12]
    uint8_t cross_flag   =  state & 0x01;
 8025264:	7bfb      	ldrb	r3, [r7, #15]
 8025266:	f003 0301 	and.w	r3, r3, #1
 802526a:	72fb      	strb	r3, [r7, #11]
    uint8_t goal_reach   = (state & 0x80) >> 7;
 802526c:	7bfb      	ldrb	r3, [r7, #15]
 802526e:	09db      	lsrs	r3, r3, #7
 8025270:	72bb      	strb	r3, [r7, #10]
    uint8_t corner_reach = (state & 0x40) >> 6;
 8025272:	7bfb      	ldrb	r3, [r7, #15]
 8025274:	119b      	asrs	r3, r3, #6
 8025276:	b2db      	uxtb	r3, r3
 8025278:	f003 0301 	and.w	r3, r3, #1
 802527c:	727b      	strb	r3, [r7, #9]
    uint8_t cross_reach  = (state & 0x20) >> 5;
 802527e:	7bfb      	ldrb	r3, [r7, #15]
 8025280:	115b      	asrs	r3, r3, #5
 8025282:	b2db      	uxtb	r3, r3
 8025284:	f003 0301 	and.w	r3, r3, #1
 8025288:	723b      	strb	r3, [r7, #8]

    if(cross_flag == 0x01 && black_flag == 0x01)
 802528a:	7afb      	ldrb	r3, [r7, #11]
 802528c:	2b01      	cmp	r3, #1
 802528e:	d10b      	bne.n	80252a8 <_ZN10SideSensor7CountUpEv+0x76>
 8025290:	7bbb      	ldrb	r3, [r7, #14]
 8025292:	2b01      	cmp	r3, #1
 8025294:	d108      	bne.n	80252a8 <_ZN10SideSensor7CountUpEv+0x76>
    {
        state &= 0xF7; // black_flag = false
 8025296:	7bfb      	ldrb	r3, [r7, #15]
 8025298:	f023 0308 	bic.w	r3, r3, #8
 802529c:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 802529e:	7bfb      	ldrb	r3, [r7, #15]
 80252a0:	f043 0320 	orr.w	r3, r3, #32
 80252a4:	73fb      	strb	r3, [r7, #15]
 80252a6:	e02d      	b.n	8025304 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && goal_reach == 0x01)
 80252a8:	7afb      	ldrb	r3, [r7, #11]
 80252aa:	2b01      	cmp	r3, #1
 80252ac:	d10b      	bne.n	80252c6 <_ZN10SideSensor7CountUpEv+0x94>
 80252ae:	7abb      	ldrb	r3, [r7, #10]
 80252b0:	2b01      	cmp	r3, #1
 80252b2:	d108      	bne.n	80252c6 <_ZN10SideSensor7CountUpEv+0x94>
    {
        state &= 0x7F; // goal_reach = false
 80252b4:	7bfb      	ldrb	r3, [r7, #15]
 80252b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80252ba:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 80252bc:	7bfb      	ldrb	r3, [r7, #15]
 80252be:	f043 0320 	orr.w	r3, r3, #32
 80252c2:	73fb      	strb	r3, [r7, #15]
 80252c4:	e01e      	b.n	8025304 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && corner_reach == 0x01)
 80252c6:	7afb      	ldrb	r3, [r7, #11]
 80252c8:	2b01      	cmp	r3, #1
 80252ca:	d10b      	bne.n	80252e4 <_ZN10SideSensor7CountUpEv+0xb2>
 80252cc:	7a7b      	ldrb	r3, [r7, #9]
 80252ce:	2b01      	cmp	r3, #1
 80252d0:	d108      	bne.n	80252e4 <_ZN10SideSensor7CountUpEv+0xb2>
    {
        state &= 0xBF; // corner_reach = false
 80252d2:	7bfb      	ldrb	r3, [r7, #15]
 80252d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80252d8:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 80252da:	7bfb      	ldrb	r3, [r7, #15]
 80252dc:	f043 0320 	orr.w	r3, r3, #32
 80252e0:	73fb      	strb	r3, [r7, #15]
 80252e2:	e00f      	b.n	8025304 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_reach == 0x01 && black_flag == 0x01)
 80252e4:	7a3b      	ldrb	r3, [r7, #8]
 80252e6:	2b01      	cmp	r3, #1
 80252e8:	d10c      	bne.n	8025304 <_ZN10SideSensor7CountUpEv+0xd2>
 80252ea:	7bbb      	ldrb	r3, [r7, #14]
 80252ec:	2b01      	cmp	r3, #1
 80252ee:	d109      	bne.n	8025304 <_ZN10SideSensor7CountUpEv+0xd2>
    {
        state &= 0xDF; // cross_reach = false
 80252f0:	7bfb      	ldrb	r3, [r7, #15]
 80252f2:	f023 0320 	bic.w	r3, r3, #32
 80252f6:	73fb      	strb	r3, [r7, #15]
        cross_line_count_++;
 80252f8:	687b      	ldr	r3, [r7, #4]
 80252fa:	799b      	ldrb	r3, [r3, #6]
 80252fc:	3301      	adds	r3, #1
 80252fe:	b2da      	uxtb	r2, r3
 8025300:	687b      	ldr	r3, [r7, #4]
 8025302:	719a      	strb	r2, [r3, #6]
    }

    black_flag   = (state & 0x08) >> 3;
 8025304:	7bfb      	ldrb	r3, [r7, #15]
 8025306:	10db      	asrs	r3, r3, #3
 8025308:	b2db      	uxtb	r3, r3
 802530a:	f003 0301 	and.w	r3, r3, #1
 802530e:	73bb      	strb	r3, [r7, #14]
    goal_reach   = (state & 0x80) >> 7;
 8025310:	7bfb      	ldrb	r3, [r7, #15]
 8025312:	09db      	lsrs	r3, r3, #7
 8025314:	72bb      	strb	r3, [r7, #10]
    corner_reach = (state & 0x40) >> 6;
 8025316:	7bfb      	ldrb	r3, [r7, #15]
 8025318:	119b      	asrs	r3, r3, #6
 802531a:	b2db      	uxtb	r3, r3
 802531c:	f003 0301 	and.w	r3, r3, #1
 8025320:	727b      	strb	r3, [r7, #9]
    
    if(goal_flag == 0x01 && black_flag == 0x01)
 8025322:	7b7b      	ldrb	r3, [r7, #13]
 8025324:	2b01      	cmp	r3, #1
 8025326:	d10b      	bne.n	8025340 <_ZN10SideSensor7CountUpEv+0x10e>
 8025328:	7bbb      	ldrb	r3, [r7, #14]
 802532a:	2b01      	cmp	r3, #1
 802532c:	d108      	bne.n	8025340 <_ZN10SideSensor7CountUpEv+0x10e>
    {
        state &= 0xF7; // black_flag = false
 802532e:	7bfb      	ldrb	r3, [r7, #15]
 8025330:	f023 0308 	bic.w	r3, r3, #8
 8025334:	73fb      	strb	r3, [r7, #15]
        state |= 0x80; // goal_reach = true
 8025336:	7bfb      	ldrb	r3, [r7, #15]
 8025338:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802533c:	73fb      	strb	r3, [r7, #15]
 802533e:	e02f      	b.n	80253a0 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(goal_reach == 0x01 && black_flag == 0x01)
 8025340:	7abb      	ldrb	r3, [r7, #10]
 8025342:	2b01      	cmp	r3, #1
 8025344:	d10d      	bne.n	8025362 <_ZN10SideSensor7CountUpEv+0x130>
 8025346:	7bbb      	ldrb	r3, [r7, #14]
 8025348:	2b01      	cmp	r3, #1
 802534a:	d10a      	bne.n	8025362 <_ZN10SideSensor7CountUpEv+0x130>
    {
        state &= 0x7F; // goal_reach = false
 802534c:	7bfb      	ldrb	r3, [r7, #15]
 802534e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025352:	73fb      	strb	r3, [r7, #15]
        goal_marker_count_++;
 8025354:	687b      	ldr	r3, [r7, #4]
 8025356:	791b      	ldrb	r3, [r3, #4]
 8025358:	3301      	adds	r3, #1
 802535a:	b2da      	uxtb	r2, r3
 802535c:	687b      	ldr	r3, [r7, #4]
 802535e:	711a      	strb	r2, [r3, #4]
 8025360:	e01e      	b.n	80253a0 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_flag == 0x01 && black_flag == 0x01)
 8025362:	7b3b      	ldrb	r3, [r7, #12]
 8025364:	2b01      	cmp	r3, #1
 8025366:	d10b      	bne.n	8025380 <_ZN10SideSensor7CountUpEv+0x14e>
 8025368:	7bbb      	ldrb	r3, [r7, #14]
 802536a:	2b01      	cmp	r3, #1
 802536c:	d108      	bne.n	8025380 <_ZN10SideSensor7CountUpEv+0x14e>
    {
        state &= 0xF7; // black_flag = false
 802536e:	7bfb      	ldrb	r3, [r7, #15]
 8025370:	f023 0308 	bic.w	r3, r3, #8
 8025374:	73fb      	strb	r3, [r7, #15]
        state |= 0x40; // corner_reach = true
 8025376:	7bfb      	ldrb	r3, [r7, #15]
 8025378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802537c:	73fb      	strb	r3, [r7, #15]
 802537e:	e00f      	b.n	80253a0 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_reach == 0x01 && black_flag == 0x01)
 8025380:	7a7b      	ldrb	r3, [r7, #9]
 8025382:	2b01      	cmp	r3, #1
 8025384:	d10c      	bne.n	80253a0 <_ZN10SideSensor7CountUpEv+0x16e>
 8025386:	7bbb      	ldrb	r3, [r7, #14]
 8025388:	2b01      	cmp	r3, #1
 802538a:	d109      	bne.n	80253a0 <_ZN10SideSensor7CountUpEv+0x16e>
    {
        state &= 0xBF; // corner_reach = false
 802538c:	7bfb      	ldrb	r3, [r7, #15]
 802538e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8025392:	73fb      	strb	r3, [r7, #15]
        corner_marker_count_++;
 8025394:	687b      	ldr	r3, [r7, #4]
 8025396:	795b      	ldrb	r3, [r3, #5]
 8025398:	3301      	adds	r3, #1
 802539a:	b2da      	uxtb	r2, r3
 802539c:	687b      	ldr	r3, [r7, #4]
 802539e:	715a      	strb	r2, [r3, #5]
    }

    write_state_flags_ = state;
 80253a0:	687b      	ldr	r3, [r7, #4]
 80253a2:	7bfa      	ldrb	r2, [r7, #15]
 80253a4:	705a      	strb	r2, [r3, #1]
}
 80253a6:	bf00      	nop
 80253a8:	3714      	adds	r7, #20
 80253aa:	46bd      	mov	sp, r7
 80253ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253b0:	4770      	bx	lr

080253b2 <_ZN10SideSensor18GetGoalMarkerCountEv>:

uint8_t SideSensor::GetGoalMarkerCount()
{
 80253b2:	b480      	push	{r7}
 80253b4:	b083      	sub	sp, #12
 80253b6:	af00      	add	r7, sp, #0
 80253b8:	6078      	str	r0, [r7, #4]
    return goal_marker_count_;
 80253ba:	687b      	ldr	r3, [r7, #4]
 80253bc:	791b      	ldrb	r3, [r3, #4]
}
 80253be:	4618      	mov	r0, r3
 80253c0:	370c      	adds	r7, #12
 80253c2:	46bd      	mov	sp, r7
 80253c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253c8:	4770      	bx	lr

080253ca <_ZN10SideSensor20GetCornerMarkerCountEv>:

uint8_t SideSensor::GetCornerMarkerCount()
{
 80253ca:	b480      	push	{r7}
 80253cc:	b083      	sub	sp, #12
 80253ce:	af00      	add	r7, sp, #0
 80253d0:	6078      	str	r0, [r7, #4]
    return corner_marker_count_;
 80253d2:	687b      	ldr	r3, [r7, #4]
 80253d4:	795b      	ldrb	r3, [r3, #5]
}
 80253d6:	4618      	mov	r0, r3
 80253d8:	370c      	adds	r7, #12
 80253da:	46bd      	mov	sp, r7
 80253dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253e0:	4770      	bx	lr

080253e2 <_ZN10SideSensor17GetCrossLineCountEv>:

uint8_t SideSensor::GetCrossLineCount()
{
 80253e2:	b480      	push	{r7}
 80253e4:	b083      	sub	sp, #12
 80253e6:	af00      	add	r7, sp, #0
 80253e8:	6078      	str	r0, [r7, #4]
    return cross_line_count_;
 80253ea:	687b      	ldr	r3, [r7, #4]
 80253ec:	799b      	ldrb	r3, [r3, #6]
}
 80253ee:	4618      	mov	r0, r3
 80253f0:	370c      	adds	r7, #12
 80253f2:	46bd      	mov	sp, r7
 80253f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253f8:	4770      	bx	lr
	...

080253fc <_ZN10SideSensor7MonitorEv>:

#ifdef DEBUG_MODE
void SideSensor::Monitor()
{
 80253fc:	b480      	push	{r7}
 80253fe:	b083      	sub	sp, #12
 8025400:	af00      	add	r7, sp, #0
 8025402:	6078      	str	r0, [r7, #4]
    /* read_state_flags_ */
    g_side_pre_state = (read_state_flags_ & 0xF0) >> 4;
 8025404:	687b      	ldr	r3, [r7, #4]
 8025406:	781b      	ldrb	r3, [r3, #0]
 8025408:	091b      	lsrs	r3, r3, #4
 802540a:	b2da      	uxtb	r2, r3
 802540c:	4b3a      	ldr	r3, [pc, #232]	; (80254f8 <_ZN10SideSensor7MonitorEv+0xfc>)
 802540e:	701a      	strb	r2, [r3, #0]
    g_side_now_state =  read_state_flags_ & 0x0F;
 8025410:	687b      	ldr	r3, [r7, #4]
 8025412:	781b      	ldrb	r3, [r3, #0]
 8025414:	f003 030f 	and.w	r3, r3, #15
 8025418:	b2da      	uxtb	r2, r3
 802541a:	4b38      	ldr	r3, [pc, #224]	; (80254fc <_ZN10SideSensor7MonitorEv+0x100>)
 802541c:	701a      	strb	r2, [r3, #0]

    if(g_side_pre_state != g_side_now_state) g_side_change_state_count++;
 802541e:	4b36      	ldr	r3, [pc, #216]	; (80254f8 <_ZN10SideSensor7MonitorEv+0xfc>)
 8025420:	781a      	ldrb	r2, [r3, #0]
 8025422:	4b36      	ldr	r3, [pc, #216]	; (80254fc <_ZN10SideSensor7MonitorEv+0x100>)
 8025424:	781b      	ldrb	r3, [r3, #0]
 8025426:	429a      	cmp	r2, r3
 8025428:	d004      	beq.n	8025434 <_ZN10SideSensor7MonitorEv+0x38>
 802542a:	4b35      	ldr	r3, [pc, #212]	; (8025500 <_ZN10SideSensor7MonitorEv+0x104>)
 802542c:	681b      	ldr	r3, [r3, #0]
 802542e:	3301      	adds	r3, #1
 8025430:	4a33      	ldr	r2, [pc, #204]	; (8025500 <_ZN10SideSensor7MonitorEv+0x104>)
 8025432:	6013      	str	r3, [r2, #0]

    /* write_state_flags_ upper bit */
    g_side_goal_reach   = (write_state_flags_ & 0x80) >> 7;
 8025434:	687b      	ldr	r3, [r7, #4]
 8025436:	785b      	ldrb	r3, [r3, #1]
 8025438:	09db      	lsrs	r3, r3, #7
 802543a:	b2da      	uxtb	r2, r3
 802543c:	4b31      	ldr	r3, [pc, #196]	; (8025504 <_ZN10SideSensor7MonitorEv+0x108>)
 802543e:	701a      	strb	r2, [r3, #0]
    g_side_corner_reach = (write_state_flags_ & 0x40) >> 6;
 8025440:	687b      	ldr	r3, [r7, #4]
 8025442:	785b      	ldrb	r3, [r3, #1]
 8025444:	119b      	asrs	r3, r3, #6
 8025446:	b2db      	uxtb	r3, r3
 8025448:	f003 0301 	and.w	r3, r3, #1
 802544c:	b2da      	uxtb	r2, r3
 802544e:	4b2e      	ldr	r3, [pc, #184]	; (8025508 <_ZN10SideSensor7MonitorEv+0x10c>)
 8025450:	701a      	strb	r2, [r3, #0]
    g_side_cross_reach  = (write_state_flags_ & 0x20) >> 5;
 8025452:	687b      	ldr	r3, [r7, #4]
 8025454:	785b      	ldrb	r3, [r3, #1]
 8025456:	115b      	asrs	r3, r3, #5
 8025458:	b2db      	uxtb	r3, r3
 802545a:	f003 0301 	and.w	r3, r3, #1
 802545e:	b2da      	uxtb	r2, r3
 8025460:	4b2a      	ldr	r3, [pc, #168]	; (802550c <_ZN10SideSensor7MonitorEv+0x110>)
 8025462:	701a      	strb	r2, [r3, #0]

    /* write_state_flags_ lower bit */
    g_side_black_flag  = (write_state_flags_ & 0x08) >> 3;
 8025464:	687b      	ldr	r3, [r7, #4]
 8025466:	785b      	ldrb	r3, [r3, #1]
 8025468:	10db      	asrs	r3, r3, #3
 802546a:	b2db      	uxtb	r3, r3
 802546c:	f003 0301 	and.w	r3, r3, #1
 8025470:	b2da      	uxtb	r2, r3
 8025472:	4b27      	ldr	r3, [pc, #156]	; (8025510 <_ZN10SideSensor7MonitorEv+0x114>)
 8025474:	701a      	strb	r2, [r3, #0]
    g_side_goal_flag   = (write_state_flags_ & 0x04) >> 2;
 8025476:	687b      	ldr	r3, [r7, #4]
 8025478:	785b      	ldrb	r3, [r3, #1]
 802547a:	109b      	asrs	r3, r3, #2
 802547c:	b2db      	uxtb	r3, r3
 802547e:	f003 0301 	and.w	r3, r3, #1
 8025482:	b2da      	uxtb	r2, r3
 8025484:	4b23      	ldr	r3, [pc, #140]	; (8025514 <_ZN10SideSensor7MonitorEv+0x118>)
 8025486:	701a      	strb	r2, [r3, #0]
    g_side_corner_flag = (write_state_flags_ & 0x02) >> 1;
 8025488:	687b      	ldr	r3, [r7, #4]
 802548a:	785b      	ldrb	r3, [r3, #1]
 802548c:	105b      	asrs	r3, r3, #1
 802548e:	b2db      	uxtb	r3, r3
 8025490:	f003 0301 	and.w	r3, r3, #1
 8025494:	b2da      	uxtb	r2, r3
 8025496:	4b20      	ldr	r3, [pc, #128]	; (8025518 <_ZN10SideSensor7MonitorEv+0x11c>)
 8025498:	701a      	strb	r2, [r3, #0]
    g_side_cross_flag  =  write_state_flags_ & 0x01;
 802549a:	687b      	ldr	r3, [r7, #4]
 802549c:	785b      	ldrb	r3, [r3, #1]
 802549e:	f003 0301 	and.w	r3, r3, #1
 80254a2:	b2da      	uxtb	r2, r3
 80254a4:	4b1d      	ldr	r3, [pc, #116]	; (802551c <_ZN10SideSensor7MonitorEv+0x120>)
 80254a6:	701a      	strb	r2, [r3, #0]

    /* exception_flags_ */
    g_side_before_noise_state = (exception_flags_ & 0xF0) >> 4;
 80254a8:	687b      	ldr	r3, [r7, #4]
 80254aa:	789b      	ldrb	r3, [r3, #2]
 80254ac:	091b      	lsrs	r3, r3, #4
 80254ae:	b2da      	uxtb	r2, r3
 80254b0:	4b1b      	ldr	r3, [pc, #108]	; (8025520 <_ZN10SideSensor7MonitorEv+0x124>)
 80254b2:	701a      	strb	r2, [r3, #0]
    g_side_noise_count        = (exception_flags_ & 0x0C) >> 2;
 80254b4:	687b      	ldr	r3, [r7, #4]
 80254b6:	789b      	ldrb	r3, [r3, #2]
 80254b8:	109b      	asrs	r3, r3, #2
 80254ba:	b2db      	uxtb	r3, r3
 80254bc:	f003 0303 	and.w	r3, r3, #3
 80254c0:	b2da      	uxtb	r2, r3
 80254c2:	4b18      	ldr	r3, [pc, #96]	; (8025524 <_ZN10SideSensor7MonitorEv+0x128>)
 80254c4:	701a      	strb	r2, [r3, #0]
    g_side_ignore_flag        =  exception_flags_ & 0x01;
 80254c6:	687b      	ldr	r3, [r7, #4]
 80254c8:	789b      	ldrb	r3, [r3, #2]
 80254ca:	f003 0301 	and.w	r3, r3, #1
 80254ce:	b2da      	uxtb	r2, r3
 80254d0:	4b15      	ldr	r3, [pc, #84]	; (8025528 <_ZN10SideSensor7MonitorEv+0x12c>)
 80254d2:	701a      	strb	r2, [r3, #0]

    g_goal_count   = goal_marker_count_;
 80254d4:	687b      	ldr	r3, [r7, #4]
 80254d6:	791a      	ldrb	r2, [r3, #4]
 80254d8:	4b14      	ldr	r3, [pc, #80]	; (802552c <_ZN10SideSensor7MonitorEv+0x130>)
 80254da:	701a      	strb	r2, [r3, #0]
    g_corner_count = corner_marker_count_;
 80254dc:	687b      	ldr	r3, [r7, #4]
 80254de:	795a      	ldrb	r2, [r3, #5]
 80254e0:	4b13      	ldr	r3, [pc, #76]	; (8025530 <_ZN10SideSensor7MonitorEv+0x134>)
 80254e2:	701a      	strb	r2, [r3, #0]
    g_cross_count  = cross_line_count_;
 80254e4:	687b      	ldr	r3, [r7, #4]
 80254e6:	799a      	ldrb	r2, [r3, #6]
 80254e8:	4b12      	ldr	r3, [pc, #72]	; (8025534 <_ZN10SideSensor7MonitorEv+0x138>)
 80254ea:	701a      	strb	r2, [r3, #0]
}
 80254ec:	bf00      	nop
 80254ee:	370c      	adds	r7, #12
 80254f0:	46bd      	mov	sp, r7
 80254f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254f6:	4770      	bx	lr
 80254f8:	200003ec 	.word	0x200003ec
 80254fc:	200003ed 	.word	0x200003ed
 8025500:	200003f0 	.word	0x200003f0
 8025504:	200003f4 	.word	0x200003f4
 8025508:	200003f5 	.word	0x200003f5
 802550c:	200003f6 	.word	0x200003f6
 8025510:	200003f7 	.word	0x200003f7
 8025514:	200003f8 	.word	0x200003f8
 8025518:	200003f9 	.word	0x200003f9
 802551c:	200003fa 	.word	0x200003fa
 8025520:	200003fb 	.word	0x200003fb
 8025524:	200003fc 	.word	0x200003fc
 8025528:	200003fd 	.word	0x200003fd
 802552c:	200003fe 	.word	0x200003fe
 8025530:	200003ff 	.word	0x200003ff
 8025534:	20000400 	.word	0x20000400

08025538 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8025538:	b480      	push	{r7}
 802553a:	b083      	sub	sp, #12
 802553c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802553e:	2300      	movs	r3, #0
 8025540:	607b      	str	r3, [r7, #4]
 8025542:	4b10      	ldr	r3, [pc, #64]	; (8025584 <HAL_MspInit+0x4c>)
 8025544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025546:	4a0f      	ldr	r2, [pc, #60]	; (8025584 <HAL_MspInit+0x4c>)
 8025548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802554c:	6453      	str	r3, [r2, #68]	; 0x44
 802554e:	4b0d      	ldr	r3, [pc, #52]	; (8025584 <HAL_MspInit+0x4c>)
 8025550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8025556:	607b      	str	r3, [r7, #4]
 8025558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802555a:	2300      	movs	r3, #0
 802555c:	603b      	str	r3, [r7, #0]
 802555e:	4b09      	ldr	r3, [pc, #36]	; (8025584 <HAL_MspInit+0x4c>)
 8025560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025562:	4a08      	ldr	r2, [pc, #32]	; (8025584 <HAL_MspInit+0x4c>)
 8025564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8025568:	6413      	str	r3, [r2, #64]	; 0x40
 802556a:	4b06      	ldr	r3, [pc, #24]	; (8025584 <HAL_MspInit+0x4c>)
 802556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802556e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025572:	603b      	str	r3, [r7, #0]
 8025574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8025576:	bf00      	nop
 8025578:	370c      	adds	r7, #12
 802557a:	46bd      	mov	sp, r7
 802557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025580:	4770      	bx	lr
 8025582:	bf00      	nop
 8025584:	40023800 	.word	0x40023800

08025588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8025588:	b580      	push	{r7, lr}
 802558a:	b08a      	sub	sp, #40	; 0x28
 802558c:	af00      	add	r7, sp, #0
 802558e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025590:	f107 0314 	add.w	r3, r7, #20
 8025594:	2200      	movs	r2, #0
 8025596:	601a      	str	r2, [r3, #0]
 8025598:	605a      	str	r2, [r3, #4]
 802559a:	609a      	str	r2, [r3, #8]
 802559c:	60da      	str	r2, [r3, #12]
 802559e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80255a0:	687b      	ldr	r3, [r7, #4]
 80255a2:	681b      	ldr	r3, [r3, #0]
 80255a4:	4a3c      	ldr	r2, [pc, #240]	; (8025698 <HAL_ADC_MspInit+0x110>)
 80255a6:	4293      	cmp	r3, r2
 80255a8:	d171      	bne.n	802568e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80255aa:	2300      	movs	r3, #0
 80255ac:	613b      	str	r3, [r7, #16]
 80255ae:	4b3b      	ldr	r3, [pc, #236]	; (802569c <HAL_ADC_MspInit+0x114>)
 80255b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80255b2:	4a3a      	ldr	r2, [pc, #232]	; (802569c <HAL_ADC_MspInit+0x114>)
 80255b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80255b8:	6453      	str	r3, [r2, #68]	; 0x44
 80255ba:	4b38      	ldr	r3, [pc, #224]	; (802569c <HAL_ADC_MspInit+0x114>)
 80255bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80255be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80255c2:	613b      	str	r3, [r7, #16]
 80255c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80255c6:	2300      	movs	r3, #0
 80255c8:	60fb      	str	r3, [r7, #12]
 80255ca:	4b34      	ldr	r3, [pc, #208]	; (802569c <HAL_ADC_MspInit+0x114>)
 80255cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80255ce:	4a33      	ldr	r2, [pc, #204]	; (802569c <HAL_ADC_MspInit+0x114>)
 80255d0:	f043 0304 	orr.w	r3, r3, #4
 80255d4:	6313      	str	r3, [r2, #48]	; 0x30
 80255d6:	4b31      	ldr	r3, [pc, #196]	; (802569c <HAL_ADC_MspInit+0x114>)
 80255d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80255da:	f003 0304 	and.w	r3, r3, #4
 80255de:	60fb      	str	r3, [r7, #12]
 80255e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80255e2:	2300      	movs	r3, #0
 80255e4:	60bb      	str	r3, [r7, #8]
 80255e6:	4b2d      	ldr	r3, [pc, #180]	; (802569c <HAL_ADC_MspInit+0x114>)
 80255e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80255ea:	4a2c      	ldr	r2, [pc, #176]	; (802569c <HAL_ADC_MspInit+0x114>)
 80255ec:	f043 0301 	orr.w	r3, r3, #1
 80255f0:	6313      	str	r3, [r2, #48]	; 0x30
 80255f2:	4b2a      	ldr	r3, [pc, #168]	; (802569c <HAL_ADC_MspInit+0x114>)
 80255f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80255f6:	f003 0301 	and.w	r3, r3, #1
 80255fa:	60bb      	str	r3, [r7, #8]
 80255fc:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80255fe:	233f      	movs	r3, #63	; 0x3f
 8025600:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8025602:	2303      	movs	r3, #3
 8025604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025606:	2300      	movs	r3, #0
 8025608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802560a:	f107 0314 	add.w	r3, r7, #20
 802560e:	4619      	mov	r1, r3
 8025610:	4823      	ldr	r0, [pc, #140]	; (80256a0 <HAL_ADC_MspInit+0x118>)
 8025612:	f002 fa81 	bl	8027b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8025616:	23ff      	movs	r3, #255	; 0xff
 8025618:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802561a:	2303      	movs	r3, #3
 802561c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802561e:	2300      	movs	r3, #0
 8025620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025622:	f107 0314 	add.w	r3, r7, #20
 8025626:	4619      	mov	r1, r3
 8025628:	481e      	ldr	r0, [pc, #120]	; (80256a4 <HAL_ADC_MspInit+0x11c>)
 802562a:	f002 fa75 	bl	8027b18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 802562e:	4b1e      	ldr	r3, [pc, #120]	; (80256a8 <HAL_ADC_MspInit+0x120>)
 8025630:	4a1e      	ldr	r2, [pc, #120]	; (80256ac <HAL_ADC_MspInit+0x124>)
 8025632:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8025634:	4b1c      	ldr	r3, [pc, #112]	; (80256a8 <HAL_ADC_MspInit+0x120>)
 8025636:	2200      	movs	r2, #0
 8025638:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802563a:	4b1b      	ldr	r3, [pc, #108]	; (80256a8 <HAL_ADC_MspInit+0x120>)
 802563c:	2200      	movs	r2, #0
 802563e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8025640:	4b19      	ldr	r3, [pc, #100]	; (80256a8 <HAL_ADC_MspInit+0x120>)
 8025642:	2200      	movs	r2, #0
 8025644:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8025646:	4b18      	ldr	r3, [pc, #96]	; (80256a8 <HAL_ADC_MspInit+0x120>)
 8025648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802564c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 802564e:	4b16      	ldr	r3, [pc, #88]	; (80256a8 <HAL_ADC_MspInit+0x120>)
 8025650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8025654:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8025656:	4b14      	ldr	r3, [pc, #80]	; (80256a8 <HAL_ADC_MspInit+0x120>)
 8025658:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802565c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 802565e:	4b12      	ldr	r3, [pc, #72]	; (80256a8 <HAL_ADC_MspInit+0x120>)
 8025660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8025664:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8025666:	4b10      	ldr	r3, [pc, #64]	; (80256a8 <HAL_ADC_MspInit+0x120>)
 8025668:	2200      	movs	r2, #0
 802566a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802566c:	4b0e      	ldr	r3, [pc, #56]	; (80256a8 <HAL_ADC_MspInit+0x120>)
 802566e:	2200      	movs	r2, #0
 8025670:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8025672:	480d      	ldr	r0, [pc, #52]	; (80256a8 <HAL_ADC_MspInit+0x120>)
 8025674:	f001 fc0c 	bl	8026e90 <HAL_DMA_Init>
 8025678:	4603      	mov	r3, r0
 802567a:	2b00      	cmp	r3, #0
 802567c:	d001      	beq.n	8025682 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 802567e:	f7fe fa93 	bl	8023ba8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8025682:	687b      	ldr	r3, [r7, #4]
 8025684:	4a08      	ldr	r2, [pc, #32]	; (80256a8 <HAL_ADC_MspInit+0x120>)
 8025686:	639a      	str	r2, [r3, #56]	; 0x38
 8025688:	4a07      	ldr	r2, [pc, #28]	; (80256a8 <HAL_ADC_MspInit+0x120>)
 802568a:	687b      	ldr	r3, [r7, #4]
 802568c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 802568e:	bf00      	nop
 8025690:	3728      	adds	r7, #40	; 0x28
 8025692:	46bd      	mov	sp, r7
 8025694:	bd80      	pop	{r7, pc}
 8025696:	bf00      	nop
 8025698:	40012000 	.word	0x40012000
 802569c:	40023800 	.word	0x40023800
 80256a0:	40020800 	.word	0x40020800
 80256a4:	40020000 	.word	0x40020000
 80256a8:	200143f8 	.word	0x200143f8
 80256ac:	40026410 	.word	0x40026410

080256b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80256b0:	b580      	push	{r7, lr}
 80256b2:	b08a      	sub	sp, #40	; 0x28
 80256b4:	af00      	add	r7, sp, #0
 80256b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80256b8:	f107 0314 	add.w	r3, r7, #20
 80256bc:	2200      	movs	r2, #0
 80256be:	601a      	str	r2, [r3, #0]
 80256c0:	605a      	str	r2, [r3, #4]
 80256c2:	609a      	str	r2, [r3, #8]
 80256c4:	60da      	str	r2, [r3, #12]
 80256c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80256c8:	687b      	ldr	r3, [r7, #4]
 80256ca:	681b      	ldr	r3, [r3, #0]
 80256cc:	4a19      	ldr	r2, [pc, #100]	; (8025734 <HAL_I2C_MspInit+0x84>)
 80256ce:	4293      	cmp	r3, r2
 80256d0:	d12c      	bne.n	802572c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80256d2:	2300      	movs	r3, #0
 80256d4:	613b      	str	r3, [r7, #16]
 80256d6:	4b18      	ldr	r3, [pc, #96]	; (8025738 <HAL_I2C_MspInit+0x88>)
 80256d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80256da:	4a17      	ldr	r2, [pc, #92]	; (8025738 <HAL_I2C_MspInit+0x88>)
 80256dc:	f043 0302 	orr.w	r3, r3, #2
 80256e0:	6313      	str	r3, [r2, #48]	; 0x30
 80256e2:	4b15      	ldr	r3, [pc, #84]	; (8025738 <HAL_I2C_MspInit+0x88>)
 80256e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80256e6:	f003 0302 	and.w	r3, r3, #2
 80256ea:	613b      	str	r3, [r7, #16]
 80256ec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80256ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80256f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80256f4:	2312      	movs	r3, #18
 80256f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80256f8:	2301      	movs	r3, #1
 80256fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80256fc:	2303      	movs	r3, #3
 80256fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8025700:	2304      	movs	r3, #4
 8025702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025704:	f107 0314 	add.w	r3, r7, #20
 8025708:	4619      	mov	r1, r3
 802570a:	480c      	ldr	r0, [pc, #48]	; (802573c <HAL_I2C_MspInit+0x8c>)
 802570c:	f002 fa04 	bl	8027b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8025710:	2300      	movs	r3, #0
 8025712:	60fb      	str	r3, [r7, #12]
 8025714:	4b08      	ldr	r3, [pc, #32]	; (8025738 <HAL_I2C_MspInit+0x88>)
 8025716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025718:	4a07      	ldr	r2, [pc, #28]	; (8025738 <HAL_I2C_MspInit+0x88>)
 802571a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802571e:	6413      	str	r3, [r2, #64]	; 0x40
 8025720:	4b05      	ldr	r3, [pc, #20]	; (8025738 <HAL_I2C_MspInit+0x88>)
 8025722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8025728:	60fb      	str	r3, [r7, #12]
 802572a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 802572c:	bf00      	nop
 802572e:	3728      	adds	r7, #40	; 0x28
 8025730:	46bd      	mov	sp, r7
 8025732:	bd80      	pop	{r7, pc}
 8025734:	40005800 	.word	0x40005800
 8025738:	40023800 	.word	0x40023800
 802573c:	40020400 	.word	0x40020400

08025740 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8025740:	b580      	push	{r7, lr}
 8025742:	b08a      	sub	sp, #40	; 0x28
 8025744:	af00      	add	r7, sp, #0
 8025746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025748:	f107 0314 	add.w	r3, r7, #20
 802574c:	2200      	movs	r2, #0
 802574e:	601a      	str	r2, [r3, #0]
 8025750:	605a      	str	r2, [r3, #4]
 8025752:	609a      	str	r2, [r3, #8]
 8025754:	60da      	str	r2, [r3, #12]
 8025756:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8025758:	687b      	ldr	r3, [r7, #4]
 802575a:	681b      	ldr	r3, [r3, #0]
 802575c:	4a19      	ldr	r2, [pc, #100]	; (80257c4 <HAL_SPI_MspInit+0x84>)
 802575e:	4293      	cmp	r3, r2
 8025760:	d12c      	bne.n	80257bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8025762:	2300      	movs	r3, #0
 8025764:	613b      	str	r3, [r7, #16]
 8025766:	4b18      	ldr	r3, [pc, #96]	; (80257c8 <HAL_SPI_MspInit+0x88>)
 8025768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802576a:	4a17      	ldr	r2, [pc, #92]	; (80257c8 <HAL_SPI_MspInit+0x88>)
 802576c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8025770:	6413      	str	r3, [r2, #64]	; 0x40
 8025772:	4b15      	ldr	r3, [pc, #84]	; (80257c8 <HAL_SPI_MspInit+0x88>)
 8025774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802577a:	613b      	str	r3, [r7, #16]
 802577c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802577e:	2300      	movs	r3, #0
 8025780:	60fb      	str	r3, [r7, #12]
 8025782:	4b11      	ldr	r3, [pc, #68]	; (80257c8 <HAL_SPI_MspInit+0x88>)
 8025784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025786:	4a10      	ldr	r2, [pc, #64]	; (80257c8 <HAL_SPI_MspInit+0x88>)
 8025788:	f043 0304 	orr.w	r3, r3, #4
 802578c:	6313      	str	r3, [r2, #48]	; 0x30
 802578e:	4b0e      	ldr	r3, [pc, #56]	; (80257c8 <HAL_SPI_MspInit+0x88>)
 8025790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025792:	f003 0304 	and.w	r3, r3, #4
 8025796:	60fb      	str	r3, [r7, #12]
 8025798:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 802579a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 802579e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80257a0:	2302      	movs	r3, #2
 80257a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80257a4:	2300      	movs	r3, #0
 80257a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80257a8:	2303      	movs	r3, #3
 80257aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80257ac:	2306      	movs	r3, #6
 80257ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80257b0:	f107 0314 	add.w	r3, r7, #20
 80257b4:	4619      	mov	r1, r3
 80257b6:	4805      	ldr	r0, [pc, #20]	; (80257cc <HAL_SPI_MspInit+0x8c>)
 80257b8:	f002 f9ae 	bl	8027b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80257bc:	bf00      	nop
 80257be:	3728      	adds	r7, #40	; 0x28
 80257c0:	46bd      	mov	sp, r7
 80257c2:	bd80      	pop	{r7, pc}
 80257c4:	40003c00 	.word	0x40003c00
 80257c8:	40023800 	.word	0x40023800
 80257cc:	40020800 	.word	0x40020800

080257d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80257d0:	b480      	push	{r7}
 80257d2:	b087      	sub	sp, #28
 80257d4:	af00      	add	r7, sp, #0
 80257d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80257d8:	687b      	ldr	r3, [r7, #4]
 80257da:	681b      	ldr	r3, [r3, #0]
 80257dc:	4a1f      	ldr	r2, [pc, #124]	; (802585c <HAL_TIM_PWM_MspInit+0x8c>)
 80257de:	4293      	cmp	r3, r2
 80257e0:	d10e      	bne.n	8025800 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80257e2:	2300      	movs	r3, #0
 80257e4:	617b      	str	r3, [r7, #20]
 80257e6:	4b1e      	ldr	r3, [pc, #120]	; (8025860 <HAL_TIM_PWM_MspInit+0x90>)
 80257e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80257ea:	4a1d      	ldr	r2, [pc, #116]	; (8025860 <HAL_TIM_PWM_MspInit+0x90>)
 80257ec:	f043 0301 	orr.w	r3, r3, #1
 80257f0:	6453      	str	r3, [r2, #68]	; 0x44
 80257f2:	4b1b      	ldr	r3, [pc, #108]	; (8025860 <HAL_TIM_PWM_MspInit+0x90>)
 80257f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80257f6:	f003 0301 	and.w	r3, r3, #1
 80257fa:	617b      	str	r3, [r7, #20]
 80257fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80257fe:	e026      	b.n	802584e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8025800:	687b      	ldr	r3, [r7, #4]
 8025802:	681b      	ldr	r3, [r3, #0]
 8025804:	4a17      	ldr	r2, [pc, #92]	; (8025864 <HAL_TIM_PWM_MspInit+0x94>)
 8025806:	4293      	cmp	r3, r2
 8025808:	d10e      	bne.n	8025828 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802580a:	2300      	movs	r3, #0
 802580c:	613b      	str	r3, [r7, #16]
 802580e:	4b14      	ldr	r3, [pc, #80]	; (8025860 <HAL_TIM_PWM_MspInit+0x90>)
 8025810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025812:	4a13      	ldr	r2, [pc, #76]	; (8025860 <HAL_TIM_PWM_MspInit+0x90>)
 8025814:	f043 0302 	orr.w	r3, r3, #2
 8025818:	6413      	str	r3, [r2, #64]	; 0x40
 802581a:	4b11      	ldr	r3, [pc, #68]	; (8025860 <HAL_TIM_PWM_MspInit+0x90>)
 802581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802581e:	f003 0302 	and.w	r3, r3, #2
 8025822:	613b      	str	r3, [r7, #16]
 8025824:	693b      	ldr	r3, [r7, #16]
}
 8025826:	e012      	b.n	802584e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8025828:	687b      	ldr	r3, [r7, #4]
 802582a:	681b      	ldr	r3, [r3, #0]
 802582c:	4a0e      	ldr	r2, [pc, #56]	; (8025868 <HAL_TIM_PWM_MspInit+0x98>)
 802582e:	4293      	cmp	r3, r2
 8025830:	d10d      	bne.n	802584e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8025832:	2300      	movs	r3, #0
 8025834:	60fb      	str	r3, [r7, #12]
 8025836:	4b0a      	ldr	r3, [pc, #40]	; (8025860 <HAL_TIM_PWM_MspInit+0x90>)
 8025838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802583a:	4a09      	ldr	r2, [pc, #36]	; (8025860 <HAL_TIM_PWM_MspInit+0x90>)
 802583c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025840:	6413      	str	r3, [r2, #64]	; 0x40
 8025842:	4b07      	ldr	r3, [pc, #28]	; (8025860 <HAL_TIM_PWM_MspInit+0x90>)
 8025844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802584a:	60fb      	str	r3, [r7, #12]
 802584c:	68fb      	ldr	r3, [r7, #12]
}
 802584e:	bf00      	nop
 8025850:	371c      	adds	r7, #28
 8025852:	46bd      	mov	sp, r7
 8025854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025858:	4770      	bx	lr
 802585a:	bf00      	nop
 802585c:	40010000 	.word	0x40010000
 8025860:	40023800 	.word	0x40023800
 8025864:	40000400 	.word	0x40000400
 8025868:	40001800 	.word	0x40001800

0802586c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 802586c:	b580      	push	{r7, lr}
 802586e:	b088      	sub	sp, #32
 8025870:	af00      	add	r7, sp, #0
 8025872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8025874:	687b      	ldr	r3, [r7, #4]
 8025876:	681b      	ldr	r3, [r3, #0]
 8025878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802587c:	d116      	bne.n	80258ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802587e:	2300      	movs	r3, #0
 8025880:	61fb      	str	r3, [r7, #28]
 8025882:	4b40      	ldr	r3, [pc, #256]	; (8025984 <HAL_TIM_Base_MspInit+0x118>)
 8025884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025886:	4a3f      	ldr	r2, [pc, #252]	; (8025984 <HAL_TIM_Base_MspInit+0x118>)
 8025888:	f043 0301 	orr.w	r3, r3, #1
 802588c:	6413      	str	r3, [r2, #64]	; 0x40
 802588e:	4b3d      	ldr	r3, [pc, #244]	; (8025984 <HAL_TIM_Base_MspInit+0x118>)
 8025890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025892:	f003 0301 	and.w	r3, r3, #1
 8025896:	61fb      	str	r3, [r7, #28]
 8025898:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 802589a:	2200      	movs	r2, #0
 802589c:	2100      	movs	r1, #0
 802589e:	201c      	movs	r0, #28
 80258a0:	f001 fabf 	bl	8026e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80258a4:	201c      	movs	r0, #28
 80258a6:	f001 fad8 	bl	8026e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80258aa:	e066      	b.n	802597a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 80258ac:	687b      	ldr	r3, [r7, #4]
 80258ae:	681b      	ldr	r3, [r3, #0]
 80258b0:	4a35      	ldr	r2, [pc, #212]	; (8025988 <HAL_TIM_Base_MspInit+0x11c>)
 80258b2:	4293      	cmp	r3, r2
 80258b4:	d116      	bne.n	80258e4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80258b6:	2300      	movs	r3, #0
 80258b8:	61bb      	str	r3, [r7, #24]
 80258ba:	4b32      	ldr	r3, [pc, #200]	; (8025984 <HAL_TIM_Base_MspInit+0x118>)
 80258bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80258be:	4a31      	ldr	r2, [pc, #196]	; (8025984 <HAL_TIM_Base_MspInit+0x118>)
 80258c0:	f043 0308 	orr.w	r3, r3, #8
 80258c4:	6413      	str	r3, [r2, #64]	; 0x40
 80258c6:	4b2f      	ldr	r3, [pc, #188]	; (8025984 <HAL_TIM_Base_MspInit+0x118>)
 80258c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80258ca:	f003 0308 	and.w	r3, r3, #8
 80258ce:	61bb      	str	r3, [r7, #24]
 80258d0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80258d2:	2200      	movs	r2, #0
 80258d4:	2100      	movs	r1, #0
 80258d6:	2032      	movs	r0, #50	; 0x32
 80258d8:	f001 faa3 	bl	8026e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80258dc:	2032      	movs	r0, #50	; 0x32
 80258de:	f001 fabc 	bl	8026e5a <HAL_NVIC_EnableIRQ>
}
 80258e2:	e04a      	b.n	802597a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 80258e4:	687b      	ldr	r3, [r7, #4]
 80258e6:	681b      	ldr	r3, [r3, #0]
 80258e8:	4a28      	ldr	r2, [pc, #160]	; (802598c <HAL_TIM_Base_MspInit+0x120>)
 80258ea:	4293      	cmp	r3, r2
 80258ec:	d116      	bne.n	802591c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80258ee:	2300      	movs	r3, #0
 80258f0:	617b      	str	r3, [r7, #20]
 80258f2:	4b24      	ldr	r3, [pc, #144]	; (8025984 <HAL_TIM_Base_MspInit+0x118>)
 80258f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80258f6:	4a23      	ldr	r2, [pc, #140]	; (8025984 <HAL_TIM_Base_MspInit+0x118>)
 80258f8:	f043 0310 	orr.w	r3, r3, #16
 80258fc:	6413      	str	r3, [r2, #64]	; 0x40
 80258fe:	4b21      	ldr	r3, [pc, #132]	; (8025984 <HAL_TIM_Base_MspInit+0x118>)
 8025900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025902:	f003 0310 	and.w	r3, r3, #16
 8025906:	617b      	str	r3, [r7, #20]
 8025908:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 802590a:	2200      	movs	r2, #0
 802590c:	2101      	movs	r1, #1
 802590e:	2036      	movs	r0, #54	; 0x36
 8025910:	f001 fa87 	bl	8026e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8025914:	2036      	movs	r0, #54	; 0x36
 8025916:	f001 faa0 	bl	8026e5a <HAL_NVIC_EnableIRQ>
}
 802591a:	e02e      	b.n	802597a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 802591c:	687b      	ldr	r3, [r7, #4]
 802591e:	681b      	ldr	r3, [r3, #0]
 8025920:	4a1b      	ldr	r2, [pc, #108]	; (8025990 <HAL_TIM_Base_MspInit+0x124>)
 8025922:	4293      	cmp	r3, r2
 8025924:	d116      	bne.n	8025954 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8025926:	2300      	movs	r3, #0
 8025928:	613b      	str	r3, [r7, #16]
 802592a:	4b16      	ldr	r3, [pc, #88]	; (8025984 <HAL_TIM_Base_MspInit+0x118>)
 802592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802592e:	4a15      	ldr	r2, [pc, #84]	; (8025984 <HAL_TIM_Base_MspInit+0x118>)
 8025930:	f043 0320 	orr.w	r3, r3, #32
 8025934:	6413      	str	r3, [r2, #64]	; 0x40
 8025936:	4b13      	ldr	r3, [pc, #76]	; (8025984 <HAL_TIM_Base_MspInit+0x118>)
 8025938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802593a:	f003 0320 	and.w	r3, r3, #32
 802593e:	613b      	str	r3, [r7, #16]
 8025940:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8025942:	2200      	movs	r2, #0
 8025944:	2100      	movs	r1, #0
 8025946:	2037      	movs	r0, #55	; 0x37
 8025948:	f001 fa6b 	bl	8026e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 802594c:	2037      	movs	r0, #55	; 0x37
 802594e:	f001 fa84 	bl	8026e5a <HAL_NVIC_EnableIRQ>
}
 8025952:	e012      	b.n	802597a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8025954:	687b      	ldr	r3, [r7, #4]
 8025956:	681b      	ldr	r3, [r3, #0]
 8025958:	4a0e      	ldr	r2, [pc, #56]	; (8025994 <HAL_TIM_Base_MspInit+0x128>)
 802595a:	4293      	cmp	r3, r2
 802595c:	d10d      	bne.n	802597a <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 802595e:	2300      	movs	r3, #0
 8025960:	60fb      	str	r3, [r7, #12]
 8025962:	4b08      	ldr	r3, [pc, #32]	; (8025984 <HAL_TIM_Base_MspInit+0x118>)
 8025964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025966:	4a07      	ldr	r2, [pc, #28]	; (8025984 <HAL_TIM_Base_MspInit+0x118>)
 8025968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802596c:	6453      	str	r3, [r2, #68]	; 0x44
 802596e:	4b05      	ldr	r3, [pc, #20]	; (8025984 <HAL_TIM_Base_MspInit+0x118>)
 8025970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8025976:	60fb      	str	r3, [r7, #12]
 8025978:	68fb      	ldr	r3, [r7, #12]
}
 802597a:	bf00      	nop
 802597c:	3720      	adds	r7, #32
 802597e:	46bd      	mov	sp, r7
 8025980:	bd80      	pop	{r7, pc}
 8025982:	bf00      	nop
 8025984:	40023800 	.word	0x40023800
 8025988:	40000c00 	.word	0x40000c00
 802598c:	40001000 	.word	0x40001000
 8025990:	40001400 	.word	0x40001400
 8025994:	40014800 	.word	0x40014800

08025998 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8025998:	b580      	push	{r7, lr}
 802599a:	b08c      	sub	sp, #48	; 0x30
 802599c:	af00      	add	r7, sp, #0
 802599e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80259a0:	f107 031c 	add.w	r3, r7, #28
 80259a4:	2200      	movs	r2, #0
 80259a6:	601a      	str	r2, [r3, #0]
 80259a8:	605a      	str	r2, [r3, #4]
 80259aa:	609a      	str	r2, [r3, #8]
 80259ac:	60da      	str	r2, [r3, #12]
 80259ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80259b0:	687b      	ldr	r3, [r7, #4]
 80259b2:	681b      	ldr	r3, [r3, #0]
 80259b4:	4a32      	ldr	r2, [pc, #200]	; (8025a80 <HAL_TIM_Encoder_MspInit+0xe8>)
 80259b6:	4293      	cmp	r3, r2
 80259b8:	d12c      	bne.n	8025a14 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80259ba:	2300      	movs	r3, #0
 80259bc:	61bb      	str	r3, [r7, #24]
 80259be:	4b31      	ldr	r3, [pc, #196]	; (8025a84 <HAL_TIM_Encoder_MspInit+0xec>)
 80259c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80259c2:	4a30      	ldr	r2, [pc, #192]	; (8025a84 <HAL_TIM_Encoder_MspInit+0xec>)
 80259c4:	f043 0304 	orr.w	r3, r3, #4
 80259c8:	6413      	str	r3, [r2, #64]	; 0x40
 80259ca:	4b2e      	ldr	r3, [pc, #184]	; (8025a84 <HAL_TIM_Encoder_MspInit+0xec>)
 80259cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80259ce:	f003 0304 	and.w	r3, r3, #4
 80259d2:	61bb      	str	r3, [r7, #24]
 80259d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80259d6:	2300      	movs	r3, #0
 80259d8:	617b      	str	r3, [r7, #20]
 80259da:	4b2a      	ldr	r3, [pc, #168]	; (8025a84 <HAL_TIM_Encoder_MspInit+0xec>)
 80259dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80259de:	4a29      	ldr	r2, [pc, #164]	; (8025a84 <HAL_TIM_Encoder_MspInit+0xec>)
 80259e0:	f043 0302 	orr.w	r3, r3, #2
 80259e4:	6313      	str	r3, [r2, #48]	; 0x30
 80259e6:	4b27      	ldr	r3, [pc, #156]	; (8025a84 <HAL_TIM_Encoder_MspInit+0xec>)
 80259e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80259ea:	f003 0302 	and.w	r3, r3, #2
 80259ee:	617b      	str	r3, [r7, #20]
 80259f0:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80259f2:	23c0      	movs	r3, #192	; 0xc0
 80259f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80259f6:	2302      	movs	r3, #2
 80259f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80259fa:	2300      	movs	r3, #0
 80259fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80259fe:	2300      	movs	r3, #0
 8025a00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8025a02:	2302      	movs	r3, #2
 8025a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025a06:	f107 031c 	add.w	r3, r7, #28
 8025a0a:	4619      	mov	r1, r3
 8025a0c:	481e      	ldr	r0, [pc, #120]	; (8025a88 <HAL_TIM_Encoder_MspInit+0xf0>)
 8025a0e:	f002 f883 	bl	8027b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8025a12:	e030      	b.n	8025a76 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8025a14:	687b      	ldr	r3, [r7, #4]
 8025a16:	681b      	ldr	r3, [r3, #0]
 8025a18:	4a1c      	ldr	r2, [pc, #112]	; (8025a8c <HAL_TIM_Encoder_MspInit+0xf4>)
 8025a1a:	4293      	cmp	r3, r2
 8025a1c:	d12b      	bne.n	8025a76 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8025a1e:	2300      	movs	r3, #0
 8025a20:	613b      	str	r3, [r7, #16]
 8025a22:	4b18      	ldr	r3, [pc, #96]	; (8025a84 <HAL_TIM_Encoder_MspInit+0xec>)
 8025a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025a26:	4a17      	ldr	r2, [pc, #92]	; (8025a84 <HAL_TIM_Encoder_MspInit+0xec>)
 8025a28:	f043 0302 	orr.w	r3, r3, #2
 8025a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8025a2e:	4b15      	ldr	r3, [pc, #84]	; (8025a84 <HAL_TIM_Encoder_MspInit+0xec>)
 8025a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025a32:	f003 0302 	and.w	r3, r3, #2
 8025a36:	613b      	str	r3, [r7, #16]
 8025a38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025a3a:	2300      	movs	r3, #0
 8025a3c:	60fb      	str	r3, [r7, #12]
 8025a3e:	4b11      	ldr	r3, [pc, #68]	; (8025a84 <HAL_TIM_Encoder_MspInit+0xec>)
 8025a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a42:	4a10      	ldr	r2, [pc, #64]	; (8025a84 <HAL_TIM_Encoder_MspInit+0xec>)
 8025a44:	f043 0304 	orr.w	r3, r3, #4
 8025a48:	6313      	str	r3, [r2, #48]	; 0x30
 8025a4a:	4b0e      	ldr	r3, [pc, #56]	; (8025a84 <HAL_TIM_Encoder_MspInit+0xec>)
 8025a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a4e:	f003 0304 	and.w	r3, r3, #4
 8025a52:	60fb      	str	r3, [r7, #12]
 8025a54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8025a56:	23c0      	movs	r3, #192	; 0xc0
 8025a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025a5a:	2302      	movs	r3, #2
 8025a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025a5e:	2300      	movs	r3, #0
 8025a60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025a62:	2300      	movs	r3, #0
 8025a64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8025a66:	2303      	movs	r3, #3
 8025a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025a6a:	f107 031c 	add.w	r3, r7, #28
 8025a6e:	4619      	mov	r1, r3
 8025a70:	4807      	ldr	r0, [pc, #28]	; (8025a90 <HAL_TIM_Encoder_MspInit+0xf8>)
 8025a72:	f002 f851 	bl	8027b18 <HAL_GPIO_Init>
}
 8025a76:	bf00      	nop
 8025a78:	3730      	adds	r7, #48	; 0x30
 8025a7a:	46bd      	mov	sp, r7
 8025a7c:	bd80      	pop	{r7, pc}
 8025a7e:	bf00      	nop
 8025a80:	40000800 	.word	0x40000800
 8025a84:	40023800 	.word	0x40023800
 8025a88:	40020400 	.word	0x40020400
 8025a8c:	40010400 	.word	0x40010400
 8025a90:	40020800 	.word	0x40020800

08025a94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8025a94:	b580      	push	{r7, lr}
 8025a96:	b08c      	sub	sp, #48	; 0x30
 8025a98:	af00      	add	r7, sp, #0
 8025a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025a9c:	f107 031c 	add.w	r3, r7, #28
 8025aa0:	2200      	movs	r2, #0
 8025aa2:	601a      	str	r2, [r3, #0]
 8025aa4:	605a      	str	r2, [r3, #4]
 8025aa6:	609a      	str	r2, [r3, #8]
 8025aa8:	60da      	str	r2, [r3, #12]
 8025aaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8025aac:	687b      	ldr	r3, [r7, #4]
 8025aae:	681b      	ldr	r3, [r3, #0]
 8025ab0:	4a59      	ldr	r2, [pc, #356]	; (8025c18 <HAL_TIM_MspPostInit+0x184>)
 8025ab2:	4293      	cmp	r3, r2
 8025ab4:	d11f      	bne.n	8025af6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8025ab6:	2300      	movs	r3, #0
 8025ab8:	61bb      	str	r3, [r7, #24]
 8025aba:	4b58      	ldr	r3, [pc, #352]	; (8025c1c <HAL_TIM_MspPostInit+0x188>)
 8025abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025abe:	4a57      	ldr	r2, [pc, #348]	; (8025c1c <HAL_TIM_MspPostInit+0x188>)
 8025ac0:	f043 0301 	orr.w	r3, r3, #1
 8025ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8025ac6:	4b55      	ldr	r3, [pc, #340]	; (8025c1c <HAL_TIM_MspPostInit+0x188>)
 8025ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025aca:	f003 0301 	and.w	r3, r3, #1
 8025ace:	61bb      	str	r3, [r7, #24]
 8025ad0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8025ad2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8025ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025ad8:	2302      	movs	r3, #2
 8025ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025adc:	2300      	movs	r3, #0
 8025ade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025ae0:	2300      	movs	r3, #0
 8025ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8025ae4:	2301      	movs	r3, #1
 8025ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025ae8:	f107 031c 	add.w	r3, r7, #28
 8025aec:	4619      	mov	r1, r3
 8025aee:	484c      	ldr	r0, [pc, #304]	; (8025c20 <HAL_TIM_MspPostInit+0x18c>)
 8025af0:	f002 f812 	bl	8027b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8025af4:	e08b      	b.n	8025c0e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8025af6:	687b      	ldr	r3, [r7, #4]
 8025af8:	681b      	ldr	r3, [r3, #0]
 8025afa:	4a4a      	ldr	r2, [pc, #296]	; (8025c24 <HAL_TIM_MspPostInit+0x190>)
 8025afc:	4293      	cmp	r3, r2
 8025afe:	d13d      	bne.n	8025b7c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025b00:	2300      	movs	r3, #0
 8025b02:	617b      	str	r3, [r7, #20]
 8025b04:	4b45      	ldr	r3, [pc, #276]	; (8025c1c <HAL_TIM_MspPostInit+0x188>)
 8025b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025b08:	4a44      	ldr	r2, [pc, #272]	; (8025c1c <HAL_TIM_MspPostInit+0x188>)
 8025b0a:	f043 0304 	orr.w	r3, r3, #4
 8025b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8025b10:	4b42      	ldr	r3, [pc, #264]	; (8025c1c <HAL_TIM_MspPostInit+0x188>)
 8025b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025b14:	f003 0304 	and.w	r3, r3, #4
 8025b18:	617b      	str	r3, [r7, #20]
 8025b1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025b1c:	2300      	movs	r3, #0
 8025b1e:	613b      	str	r3, [r7, #16]
 8025b20:	4b3e      	ldr	r3, [pc, #248]	; (8025c1c <HAL_TIM_MspPostInit+0x188>)
 8025b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025b24:	4a3d      	ldr	r2, [pc, #244]	; (8025c1c <HAL_TIM_MspPostInit+0x188>)
 8025b26:	f043 0302 	orr.w	r3, r3, #2
 8025b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8025b2c:	4b3b      	ldr	r3, [pc, #236]	; (8025c1c <HAL_TIM_MspPostInit+0x188>)
 8025b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025b30:	f003 0302 	and.w	r3, r3, #2
 8025b34:	613b      	str	r3, [r7, #16]
 8025b36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8025b38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8025b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025b3e:	2302      	movs	r3, #2
 8025b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025b42:	2300      	movs	r3, #0
 8025b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025b46:	2300      	movs	r3, #0
 8025b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8025b4a:	2302      	movs	r3, #2
 8025b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025b4e:	f107 031c 	add.w	r3, r7, #28
 8025b52:	4619      	mov	r1, r3
 8025b54:	4834      	ldr	r0, [pc, #208]	; (8025c28 <HAL_TIM_MspPostInit+0x194>)
 8025b56:	f001 ffdf 	bl	8027b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8025b5a:	2330      	movs	r3, #48	; 0x30
 8025b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025b5e:	2302      	movs	r3, #2
 8025b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025b62:	2300      	movs	r3, #0
 8025b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025b66:	2300      	movs	r3, #0
 8025b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8025b6a:	2302      	movs	r3, #2
 8025b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025b6e:	f107 031c 	add.w	r3, r7, #28
 8025b72:	4619      	mov	r1, r3
 8025b74:	482d      	ldr	r0, [pc, #180]	; (8025c2c <HAL_TIM_MspPostInit+0x198>)
 8025b76:	f001 ffcf 	bl	8027b18 <HAL_GPIO_Init>
}
 8025b7a:	e048      	b.n	8025c0e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 8025b7c:	687b      	ldr	r3, [r7, #4]
 8025b7e:	681b      	ldr	r3, [r3, #0]
 8025b80:	4a2b      	ldr	r2, [pc, #172]	; (8025c30 <HAL_TIM_MspPostInit+0x19c>)
 8025b82:	4293      	cmp	r3, r2
 8025b84:	d11f      	bne.n	8025bc6 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025b86:	2300      	movs	r3, #0
 8025b88:	60fb      	str	r3, [r7, #12]
 8025b8a:	4b24      	ldr	r3, [pc, #144]	; (8025c1c <HAL_TIM_MspPostInit+0x188>)
 8025b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025b8e:	4a23      	ldr	r2, [pc, #140]	; (8025c1c <HAL_TIM_MspPostInit+0x188>)
 8025b90:	f043 0302 	orr.w	r3, r3, #2
 8025b94:	6313      	str	r3, [r2, #48]	; 0x30
 8025b96:	4b21      	ldr	r3, [pc, #132]	; (8025c1c <HAL_TIM_MspPostInit+0x188>)
 8025b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025b9a:	f003 0302 	and.w	r3, r3, #2
 8025b9e:	60fb      	str	r3, [r7, #12]
 8025ba0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8025ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025ba8:	2302      	movs	r3, #2
 8025baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025bac:	2300      	movs	r3, #0
 8025bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025bb0:	2300      	movs	r3, #0
 8025bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8025bb4:	2303      	movs	r3, #3
 8025bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025bb8:	f107 031c 	add.w	r3, r7, #28
 8025bbc:	4619      	mov	r1, r3
 8025bbe:	481b      	ldr	r0, [pc, #108]	; (8025c2c <HAL_TIM_MspPostInit+0x198>)
 8025bc0:	f001 ffaa 	bl	8027b18 <HAL_GPIO_Init>
}
 8025bc4:	e023      	b.n	8025c0e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8025bc6:	687b      	ldr	r3, [r7, #4]
 8025bc8:	681b      	ldr	r3, [r3, #0]
 8025bca:	4a1a      	ldr	r2, [pc, #104]	; (8025c34 <HAL_TIM_MspPostInit+0x1a0>)
 8025bcc:	4293      	cmp	r3, r2
 8025bce:	d11e      	bne.n	8025c0e <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025bd0:	2300      	movs	r3, #0
 8025bd2:	60bb      	str	r3, [r7, #8]
 8025bd4:	4b11      	ldr	r3, [pc, #68]	; (8025c1c <HAL_TIM_MspPostInit+0x188>)
 8025bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025bd8:	4a10      	ldr	r2, [pc, #64]	; (8025c1c <HAL_TIM_MspPostInit+0x188>)
 8025bda:	f043 0302 	orr.w	r3, r3, #2
 8025bde:	6313      	str	r3, [r2, #48]	; 0x30
 8025be0:	4b0e      	ldr	r3, [pc, #56]	; (8025c1c <HAL_TIM_MspPostInit+0x188>)
 8025be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025be4:	f003 0302 	and.w	r3, r3, #2
 8025be8:	60bb      	str	r3, [r7, #8]
 8025bea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8025bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8025bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025bf2:	2302      	movs	r3, #2
 8025bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025bf6:	2300      	movs	r3, #0
 8025bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025bfa:	2300      	movs	r3, #0
 8025bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8025bfe:	2309      	movs	r3, #9
 8025c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025c02:	f107 031c 	add.w	r3, r7, #28
 8025c06:	4619      	mov	r1, r3
 8025c08:	4808      	ldr	r0, [pc, #32]	; (8025c2c <HAL_TIM_MspPostInit+0x198>)
 8025c0a:	f001 ff85 	bl	8027b18 <HAL_GPIO_Init>
}
 8025c0e:	bf00      	nop
 8025c10:	3730      	adds	r7, #48	; 0x30
 8025c12:	46bd      	mov	sp, r7
 8025c14:	bd80      	pop	{r7, pc}
 8025c16:	bf00      	nop
 8025c18:	40010000 	.word	0x40010000
 8025c1c:	40023800 	.word	0x40023800
 8025c20:	40020000 	.word	0x40020000
 8025c24:	40000400 	.word	0x40000400
 8025c28:	40020800 	.word	0x40020800
 8025c2c:	40020400 	.word	0x40020400
 8025c30:	40014800 	.word	0x40014800
 8025c34:	40001800 	.word	0x40001800

08025c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8025c38:	b480      	push	{r7}
 8025c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8025c3c:	e7fe      	b.n	8025c3c <NMI_Handler+0x4>

08025c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8025c3e:	b480      	push	{r7}
 8025c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8025c42:	e7fe      	b.n	8025c42 <HardFault_Handler+0x4>

08025c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8025c44:	b480      	push	{r7}
 8025c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8025c48:	e7fe      	b.n	8025c48 <MemManage_Handler+0x4>

08025c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8025c4a:	b480      	push	{r7}
 8025c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8025c4e:	e7fe      	b.n	8025c4e <BusFault_Handler+0x4>

08025c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8025c50:	b480      	push	{r7}
 8025c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8025c54:	e7fe      	b.n	8025c54 <UsageFault_Handler+0x4>

08025c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8025c56:	b480      	push	{r7}
 8025c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8025c5a:	bf00      	nop
 8025c5c:	46bd      	mov	sp, r7
 8025c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c62:	4770      	bx	lr

08025c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8025c64:	b480      	push	{r7}
 8025c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8025c68:	bf00      	nop
 8025c6a:	46bd      	mov	sp, r7
 8025c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c70:	4770      	bx	lr

08025c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8025c72:	b480      	push	{r7}
 8025c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8025c76:	bf00      	nop
 8025c78:	46bd      	mov	sp, r7
 8025c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c7e:	4770      	bx	lr

08025c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8025c80:	b580      	push	{r7, lr}
 8025c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8025c84:	f000 fbbc 	bl	8026400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8025c88:	bf00      	nop
 8025c8a:	bd80      	pop	{r7, pc}

08025c8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8025c8c:	b580      	push	{r7, lr}
 8025c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8025c90:	4802      	ldr	r0, [pc, #8]	; (8025c9c <TIM2_IRQHandler+0x10>)
 8025c92:	f003 fd6e 	bl	8029772 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8025c96:	bf00      	nop
 8025c98:	bd80      	pop	{r7, pc}
 8025c9a:	bf00      	nop
 8025c9c:	20017548 	.word	0x20017548

08025ca0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8025ca0:	b580      	push	{r7, lr}
 8025ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8025ca4:	4802      	ldr	r0, [pc, #8]	; (8025cb0 <TIM5_IRQHandler+0x10>)
 8025ca6:	f003 fd64 	bl	8029772 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8025caa:	bf00      	nop
 8025cac:	bd80      	pop	{r7, pc}
 8025cae:	bf00      	nop
 8025cb0:	20014298 	.word	0x20014298

08025cb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8025cb4:	b580      	push	{r7, lr}
 8025cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8025cb8:	4802      	ldr	r0, [pc, #8]	; (8025cc4 <TIM6_DAC_IRQHandler+0x10>)
 8025cba:	f003 fd5a 	bl	8029772 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8025cbe:	bf00      	nop
 8025cc0:	bd80      	pop	{r7, pc}
 8025cc2:	bf00      	nop
 8025cc4:	20014458 	.word	0x20014458

08025cc8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8025cc8:	b580      	push	{r7, lr}
 8025cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8025ccc:	4802      	ldr	r0, [pc, #8]	; (8025cd8 <TIM7_IRQHandler+0x10>)
 8025cce:	f003 fd50 	bl	8029772 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8025cd2:	bf00      	nop
 8025cd4:	bd80      	pop	{r7, pc}
 8025cd6:	bf00      	nop
 8025cd8:	200175c8 	.word	0x200175c8

08025cdc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8025cdc:	b580      	push	{r7, lr}
 8025cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8025ce0:	4802      	ldr	r0, [pc, #8]	; (8025cec <DMA2_Stream0_IRQHandler+0x10>)
 8025ce2:	f001 f9db 	bl	802709c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8025ce6:	bf00      	nop
 8025ce8:	bd80      	pop	{r7, pc}
 8025cea:	bf00      	nop
 8025cec:	200143f8 	.word	0x200143f8

08025cf0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8025cf0:	b480      	push	{r7}
 8025cf2:	b083      	sub	sp, #12
 8025cf4:	af00      	add	r7, sp, #0
 8025cf6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8025cf8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8025cfc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8025d00:	f003 0301 	and.w	r3, r3, #1
 8025d04:	2b00      	cmp	r3, #0
 8025d06:	d013      	beq.n	8025d30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8025d08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8025d0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8025d10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8025d14:	2b00      	cmp	r3, #0
 8025d16:	d00b      	beq.n	8025d30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8025d18:	e000      	b.n	8025d1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8025d1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8025d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8025d20:	681b      	ldr	r3, [r3, #0]
 8025d22:	2b00      	cmp	r3, #0
 8025d24:	d0f9      	beq.n	8025d1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8025d26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8025d2a:	687a      	ldr	r2, [r7, #4]
 8025d2c:	b2d2      	uxtb	r2, r2
 8025d2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8025d30:	687b      	ldr	r3, [r7, #4]
}
 8025d32:	4618      	mov	r0, r3
 8025d34:	370c      	adds	r7, #12
 8025d36:	46bd      	mov	sp, r7
 8025d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d3c:	4770      	bx	lr

08025d3e <_write>:
#include "swo_setting.h"

int _write(int file, char *ptr, int len)
{
 8025d3e:	b580      	push	{r7, lr}
 8025d40:	b086      	sub	sp, #24
 8025d42:	af00      	add	r7, sp, #0
 8025d44:	60f8      	str	r0, [r7, #12]
 8025d46:	60b9      	str	r1, [r7, #8]
 8025d48:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for(DataIdx = 0; DataIdx < len; DataIdx++)
 8025d4a:	2300      	movs	r3, #0
 8025d4c:	617b      	str	r3, [r7, #20]
 8025d4e:	e009      	b.n	8025d64 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 8025d50:	68bb      	ldr	r3, [r7, #8]
 8025d52:	1c5a      	adds	r2, r3, #1
 8025d54:	60ba      	str	r2, [r7, #8]
 8025d56:	781b      	ldrb	r3, [r3, #0]
 8025d58:	4618      	mov	r0, r3
 8025d5a:	f7ff ffc9 	bl	8025cf0 <ITM_SendChar>
    for(DataIdx = 0; DataIdx < len; DataIdx++)
 8025d5e:	697b      	ldr	r3, [r7, #20]
 8025d60:	3301      	adds	r3, #1
 8025d62:	617b      	str	r3, [r7, #20]
 8025d64:	697a      	ldr	r2, [r7, #20]
 8025d66:	687b      	ldr	r3, [r7, #4]
 8025d68:	429a      	cmp	r2, r3
 8025d6a:	dbf1      	blt.n	8025d50 <_write+0x12>
    }

    return len;
 8025d6c:	687b      	ldr	r3, [r7, #4]
 8025d6e:	4618      	mov	r0, r3
 8025d70:	3718      	adds	r7, #24
 8025d72:	46bd      	mov	sp, r7
 8025d74:	bd80      	pop	{r7, pc}

08025d76 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8025d76:	b580      	push	{r7, lr}
 8025d78:	b086      	sub	sp, #24
 8025d7a:	af00      	add	r7, sp, #0
 8025d7c:	60f8      	str	r0, [r7, #12]
 8025d7e:	60b9      	str	r1, [r7, #8]
 8025d80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8025d82:	2300      	movs	r3, #0
 8025d84:	617b      	str	r3, [r7, #20]
 8025d86:	e00a      	b.n	8025d9e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8025d88:	f3af 8000 	nop.w
 8025d8c:	4601      	mov	r1, r0
 8025d8e:	68bb      	ldr	r3, [r7, #8]
 8025d90:	1c5a      	adds	r2, r3, #1
 8025d92:	60ba      	str	r2, [r7, #8]
 8025d94:	b2ca      	uxtb	r2, r1
 8025d96:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8025d98:	697b      	ldr	r3, [r7, #20]
 8025d9a:	3301      	adds	r3, #1
 8025d9c:	617b      	str	r3, [r7, #20]
 8025d9e:	697a      	ldr	r2, [r7, #20]
 8025da0:	687b      	ldr	r3, [r7, #4]
 8025da2:	429a      	cmp	r2, r3
 8025da4:	dbf0      	blt.n	8025d88 <_read+0x12>
	}

return len;
 8025da6:	687b      	ldr	r3, [r7, #4]
}
 8025da8:	4618      	mov	r0, r3
 8025daa:	3718      	adds	r7, #24
 8025dac:	46bd      	mov	sp, r7
 8025dae:	bd80      	pop	{r7, pc}

08025db0 <_close>:
	}
	return len;
}

int _close(int file)
{
 8025db0:	b480      	push	{r7}
 8025db2:	b083      	sub	sp, #12
 8025db4:	af00      	add	r7, sp, #0
 8025db6:	6078      	str	r0, [r7, #4]
	return -1;
 8025db8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8025dbc:	4618      	mov	r0, r3
 8025dbe:	370c      	adds	r7, #12
 8025dc0:	46bd      	mov	sp, r7
 8025dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dc6:	4770      	bx	lr

08025dc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8025dc8:	b480      	push	{r7}
 8025dca:	b083      	sub	sp, #12
 8025dcc:	af00      	add	r7, sp, #0
 8025dce:	6078      	str	r0, [r7, #4]
 8025dd0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8025dd2:	683b      	ldr	r3, [r7, #0]
 8025dd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8025dd8:	605a      	str	r2, [r3, #4]
	return 0;
 8025dda:	2300      	movs	r3, #0
}
 8025ddc:	4618      	mov	r0, r3
 8025dde:	370c      	adds	r7, #12
 8025de0:	46bd      	mov	sp, r7
 8025de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025de6:	4770      	bx	lr

08025de8 <_isatty>:

int _isatty(int file)
{
 8025de8:	b480      	push	{r7}
 8025dea:	b083      	sub	sp, #12
 8025dec:	af00      	add	r7, sp, #0
 8025dee:	6078      	str	r0, [r7, #4]
	return 1;
 8025df0:	2301      	movs	r3, #1
}
 8025df2:	4618      	mov	r0, r3
 8025df4:	370c      	adds	r7, #12
 8025df6:	46bd      	mov	sp, r7
 8025df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dfc:	4770      	bx	lr

08025dfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8025dfe:	b480      	push	{r7}
 8025e00:	b085      	sub	sp, #20
 8025e02:	af00      	add	r7, sp, #0
 8025e04:	60f8      	str	r0, [r7, #12]
 8025e06:	60b9      	str	r1, [r7, #8]
 8025e08:	607a      	str	r2, [r7, #4]
	return 0;
 8025e0a:	2300      	movs	r3, #0
}
 8025e0c:	4618      	mov	r0, r3
 8025e0e:	3714      	adds	r7, #20
 8025e10:	46bd      	mov	sp, r7
 8025e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e16:	4770      	bx	lr

08025e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8025e18:	b580      	push	{r7, lr}
 8025e1a:	b086      	sub	sp, #24
 8025e1c:	af00      	add	r7, sp, #0
 8025e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8025e20:	4a14      	ldr	r2, [pc, #80]	; (8025e74 <_sbrk+0x5c>)
 8025e22:	4b15      	ldr	r3, [pc, #84]	; (8025e78 <_sbrk+0x60>)
 8025e24:	1ad3      	subs	r3, r2, r3
 8025e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8025e28:	697b      	ldr	r3, [r7, #20]
 8025e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8025e2c:	4b13      	ldr	r3, [pc, #76]	; (8025e7c <_sbrk+0x64>)
 8025e2e:	681b      	ldr	r3, [r3, #0]
 8025e30:	2b00      	cmp	r3, #0
 8025e32:	d102      	bne.n	8025e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8025e34:	4b11      	ldr	r3, [pc, #68]	; (8025e7c <_sbrk+0x64>)
 8025e36:	4a12      	ldr	r2, [pc, #72]	; (8025e80 <_sbrk+0x68>)
 8025e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8025e3a:	4b10      	ldr	r3, [pc, #64]	; (8025e7c <_sbrk+0x64>)
 8025e3c:	681a      	ldr	r2, [r3, #0]
 8025e3e:	687b      	ldr	r3, [r7, #4]
 8025e40:	4413      	add	r3, r2
 8025e42:	693a      	ldr	r2, [r7, #16]
 8025e44:	429a      	cmp	r2, r3
 8025e46:	d207      	bcs.n	8025e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8025e48:	f004 fb44 	bl	802a4d4 <__errno>
 8025e4c:	4602      	mov	r2, r0
 8025e4e:	230c      	movs	r3, #12
 8025e50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8025e52:	f04f 33ff 	mov.w	r3, #4294967295
 8025e56:	e009      	b.n	8025e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8025e58:	4b08      	ldr	r3, [pc, #32]	; (8025e7c <_sbrk+0x64>)
 8025e5a:	681b      	ldr	r3, [r3, #0]
 8025e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8025e5e:	4b07      	ldr	r3, [pc, #28]	; (8025e7c <_sbrk+0x64>)
 8025e60:	681a      	ldr	r2, [r3, #0]
 8025e62:	687b      	ldr	r3, [r7, #4]
 8025e64:	4413      	add	r3, r2
 8025e66:	4a05      	ldr	r2, [pc, #20]	; (8025e7c <_sbrk+0x64>)
 8025e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8025e6a:	68fb      	ldr	r3, [r7, #12]
}
 8025e6c:	4618      	mov	r0, r3
 8025e6e:	3718      	adds	r7, #24
 8025e70:	46bd      	mov	sp, r7
 8025e72:	bd80      	pop	{r7, pc}
 8025e74:	20020000 	.word	0x20020000
 8025e78:	00000400 	.word	0x00000400
 8025e7c:	20000494 	.word	0x20000494
 8025e80:	20017630 	.word	0x20017630

08025e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8025e84:	b480      	push	{r7}
 8025e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8025e88:	4b08      	ldr	r3, [pc, #32]	; (8025eac <SystemInit+0x28>)
 8025e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8025e8e:	4a07      	ldr	r2, [pc, #28]	; (8025eac <SystemInit+0x28>)
 8025e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8025e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8025e98:	4b04      	ldr	r3, [pc, #16]	; (8025eac <SystemInit+0x28>)
 8025e9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8025e9e:	609a      	str	r2, [r3, #8]
#endif
}
 8025ea0:	bf00      	nop
 8025ea2:	46bd      	mov	sp, r7
 8025ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ea8:	4770      	bx	lr
 8025eaa:	bf00      	nop
 8025eac:	e000ed00 	.word	0xe000ed00

08025eb0 <_ZN15VelocityControlC1EP7Encoder>:
#include "velocity_control.hpp"
#include "declare_extern.h"

VelocityControl::VelocityControl(Encoder *encoder) : integral_error_(0)
 8025eb0:	b480      	push	{r7}
 8025eb2:	b083      	sub	sp, #12
 8025eb4:	af00      	add	r7, sp, #0
 8025eb6:	6078      	str	r0, [r7, #4]
 8025eb8:	6039      	str	r1, [r7, #0]
 8025eba:	687b      	ldr	r3, [r7, #4]
 8025ebc:	f04f 0200 	mov.w	r2, #0
 8025ec0:	601a      	str	r2, [r3, #0]
{
    encoder_ = encoder;
 8025ec2:	687b      	ldr	r3, [r7, #4]
 8025ec4:	683a      	ldr	r2, [r7, #0]
 8025ec6:	605a      	str	r2, [r3, #4]
}
 8025ec8:	687b      	ldr	r3, [r7, #4]
 8025eca:	4618      	mov	r0, r3
 8025ecc:	370c      	adds	r7, #12
 8025ece:	46bd      	mov	sp, r7
 8025ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ed4:	4770      	bx	lr

08025ed6 <_ZN15VelocityControl16DeterminePidGainEf>:

float VelocityControl::DeterminePidGain(float target_velocity)
{
 8025ed6:	b580      	push	{r7, lr}
 8025ed8:	b086      	sub	sp, #24
 8025eda:	af00      	add	r7, sp, #0
 8025edc:	6078      	str	r0, [r7, #4]
 8025ede:	ed87 0a00 	vstr	s0, [r7]
    float p_gain = 0, i_gain = 0, d_gain = 0;
 8025ee2:	f04f 0300 	mov.w	r3, #0
 8025ee6:	617b      	str	r3, [r7, #20]
 8025ee8:	f04f 0300 	mov.w	r3, #0
 8025eec:	613b      	str	r3, [r7, #16]
 8025eee:	f04f 0300 	mov.w	r3, #0
 8025ef2:	60fb      	str	r3, [r7, #12]

    if(target_velocity < MAX_VELOCITY)
 8025ef4:	edd7 7a00 	vldr	s15, [r7]
 8025ef8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8025efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8025f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f04:	d509      	bpl.n	8025f1a <_ZN15VelocityControl16DeterminePidGainEf+0x44>
    {
        p_gain = VELOCITY_P_GAIN;
 8025f06:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8025f0a:	617b      	str	r3, [r7, #20]
        i_gain = VELOCITY_I_GAIN;
 8025f0c:	f04f 0300 	mov.w	r3, #0
 8025f10:	613b      	str	r3, [r7, #16]
        d_gain = VELOCITY_D_GAIN;
 8025f12:	f04f 0300 	mov.w	r3, #0
 8025f16:	60fb      	str	r3, [r7, #12]
 8025f18:	e008      	b.n	8025f2c <_ZN15VelocityControl16DeterminePidGainEf+0x56>
    }
    else // Error handler
    {
        p_gain = 0;
 8025f1a:	f04f 0300 	mov.w	r3, #0
 8025f1e:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 8025f20:	f04f 0300 	mov.w	r3, #0
 8025f24:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 8025f26:	f04f 0300 	mov.w	r3, #0
 8025f2a:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(target_velocity, p_gain, i_gain, d_gain);
 8025f2c:	edd7 1a03 	vldr	s3, [r7, #12]
 8025f30:	ed97 1a04 	vldr	s2, [r7, #16]
 8025f34:	edd7 0a05 	vldr	s1, [r7, #20]
 8025f38:	ed97 0a00 	vldr	s0, [r7]
 8025f3c:	6878      	ldr	r0, [r7, #4]
 8025f3e:	f000 f807 	bl	8025f50 <_ZN15VelocityControl10PidControlEffff>
 8025f42:	eef0 7a40 	vmov.f32	s15, s0
}
 8025f46:	eeb0 0a67 	vmov.f32	s0, s15
 8025f4a:	3718      	adds	r7, #24
 8025f4c:	46bd      	mov	sp, r7
 8025f4e:	bd80      	pop	{r7, pc}

08025f50 <_ZN15VelocityControl10PidControlEffff>:

float VelocityControl::PidControl(float target, float p_gain, float i_gain, float d_gain)
{
 8025f50:	b5b0      	push	{r4, r5, r7, lr}
 8025f52:	b08e      	sub	sp, #56	; 0x38
 8025f54:	af00      	add	r7, sp, #0
 8025f56:	6178      	str	r0, [r7, #20]
 8025f58:	ed87 0a04 	vstr	s0, [r7, #16]
 8025f5c:	edc7 0a03 	vstr	s1, [r7, #12]
 8025f60:	ed87 1a02 	vstr	s2, [r7, #8]
 8025f64:	edc7 1a01 	vstr	s3, [r7, #4]
    float current = encoder_->GetDistance() / TIM6_PERIOD; // [mm/ms]
 8025f68:	697b      	ldr	r3, [r7, #20]
 8025f6a:	685b      	ldr	r3, [r3, #4]
 8025f6c:	4618      	mov	r0, r3
 8025f6e:	f7fb f801 	bl	8020f74 <_ZN7Encoder11GetDistanceEv>
 8025f72:	eef0 6a40 	vmov.f32	s13, s0
 8025f76:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8025f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025f7e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    static float pre_filter = 0.0;
    float filter = pre_filter * (1.0 - VELOCITY_LPF_RATIO) + (current * VELOCITY_LPF_RATIO);
 8025f82:	4b71      	ldr	r3, [pc, #452]	; (8026148 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8025f84:	681b      	ldr	r3, [r3, #0]
 8025f86:	4618      	mov	r0, r3
 8025f88:	f7fa fa16 	bl	80203b8 <__aeabi_f2d>
 8025f8c:	a368      	add	r3, pc, #416	; (adr r3, 8026130 <_ZN15VelocityControl10PidControlEffff+0x1e0>)
 8025f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f92:	f7fa fa69 	bl	8020468 <__aeabi_dmul>
 8025f96:	4603      	mov	r3, r0
 8025f98:	460c      	mov	r4, r1
 8025f9a:	4625      	mov	r5, r4
 8025f9c:	461c      	mov	r4, r3
 8025f9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025fa0:	f7fa fa0a 	bl	80203b8 <__aeabi_f2d>
 8025fa4:	a364      	add	r3, pc, #400	; (adr r3, 8026138 <_ZN15VelocityControl10PidControlEffff+0x1e8>)
 8025fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025faa:	f7fa fa5d 	bl	8020468 <__aeabi_dmul>
 8025fae:	4602      	mov	r2, r0
 8025fb0:	460b      	mov	r3, r1
 8025fb2:	4620      	mov	r0, r4
 8025fb4:	4629      	mov	r1, r5
 8025fb6:	f7fa f8a1 	bl	80200fc <__adddf3>
 8025fba:	4603      	mov	r3, r0
 8025fbc:	460c      	mov	r4, r1
 8025fbe:	4618      	mov	r0, r3
 8025fc0:	4621      	mov	r1, r4
 8025fc2:	f7fa fd29 	bl	8020a18 <__aeabi_d2f>
 8025fc6:	4603      	mov	r3, r0
 8025fc8:	633b      	str	r3, [r7, #48]	; 0x30
    pre_filter = filter;
 8025fca:	4a5f      	ldr	r2, [pc, #380]	; (8026148 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8025fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025fce:	6013      	str	r3, [r2, #0]

    float error = target - filter;
 8025fd0:	ed97 7a04 	vldr	s14, [r7, #16]
 8025fd4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8025fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025fdc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    static float pre_error = error;
 8025fe0:	4b5a      	ldr	r3, [pc, #360]	; (802614c <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8025fe2:	781b      	ldrb	r3, [r3, #0]
 8025fe4:	f3bf 8f5b 	dmb	ish
 8025fe8:	b2db      	uxtb	r3, r3
 8025fea:	f003 0301 	and.w	r3, r3, #1
 8025fee:	2b00      	cmp	r3, #0
 8025ff0:	bf0c      	ite	eq
 8025ff2:	2301      	moveq	r3, #1
 8025ff4:	2300      	movne	r3, #0
 8025ff6:	b2db      	uxtb	r3, r3
 8025ff8:	2b00      	cmp	r3, #0
 8025ffa:	d010      	beq.n	802601e <_ZN15VelocityControl10PidControlEffff+0xce>
 8025ffc:	4853      	ldr	r0, [pc, #332]	; (802614c <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8025ffe:	f004 fa59 	bl	802a4b4 <__cxa_guard_acquire>
 8026002:	4603      	mov	r3, r0
 8026004:	2b00      	cmp	r3, #0
 8026006:	bf14      	ite	ne
 8026008:	2301      	movne	r3, #1
 802600a:	2300      	moveq	r3, #0
 802600c:	b2db      	uxtb	r3, r3
 802600e:	2b00      	cmp	r3, #0
 8026010:	d005      	beq.n	802601e <_ZN15VelocityControl10PidControlEffff+0xce>
 8026012:	4a4f      	ldr	r2, [pc, #316]	; (8026150 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8026014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026016:	6013      	str	r3, [r2, #0]
 8026018:	484c      	ldr	r0, [pc, #304]	; (802614c <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 802601a:	f004 fa57 	bl	802a4cc <__cxa_guard_release>

    float differential_error = (error - pre_error) / TIM6_PERIOD_S;
 802601e:	4b4c      	ldr	r3, [pc, #304]	; (8026150 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8026020:	edd3 7a00 	vldr	s15, [r3]
 8026024:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8026028:	ee77 7a67 	vsub.f32	s15, s14, s15
 802602c:	ee17 0a90 	vmov	r0, s15
 8026030:	f7fa f9c2 	bl	80203b8 <__aeabi_f2d>
 8026034:	a342      	add	r3, pc, #264	; (adr r3, 8026140 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8026036:	e9d3 2300 	ldrd	r2, r3, [r3]
 802603a:	f7fa fb3f 	bl	80206bc <__aeabi_ddiv>
 802603e:	4603      	mov	r3, r0
 8026040:	460c      	mov	r4, r1
 8026042:	4618      	mov	r0, r3
 8026044:	4621      	mov	r1, r4
 8026046:	f7fa fce7 	bl	8020a18 <__aeabi_d2f>
 802604a:	4603      	mov	r3, r0
 802604c:	62bb      	str	r3, [r7, #40]	; 0x28
    float integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 802604e:	4b40      	ldr	r3, [pc, #256]	; (8026150 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8026050:	ed93 7a00 	vldr	s14, [r3]
 8026054:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8026058:	ee77 7a27 	vadd.f32	s15, s14, s15
 802605c:	ee17 0a90 	vmov	r0, s15
 8026060:	f7fa f9aa 	bl	80203b8 <__aeabi_f2d>
 8026064:	f04f 0200 	mov.w	r2, #0
 8026068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802606c:	f7fa fb26 	bl	80206bc <__aeabi_ddiv>
 8026070:	4603      	mov	r3, r0
 8026072:	460c      	mov	r4, r1
 8026074:	4618      	mov	r0, r3
 8026076:	4621      	mov	r1, r4
 8026078:	a331      	add	r3, pc, #196	; (adr r3, 8026140 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 802607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802607e:	f7fa f9f3 	bl	8020468 <__aeabi_dmul>
 8026082:	4603      	mov	r3, r0
 8026084:	460c      	mov	r4, r1
 8026086:	4618      	mov	r0, r3
 8026088:	4621      	mov	r1, r4
 802608a:	f7fa fcc5 	bl	8020a18 <__aeabi_d2f>
 802608e:	4603      	mov	r3, r0
 8026090:	627b      	str	r3, [r7, #36]	; 0x24
    SetIntegralError(integral_error);
 8026092:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8026096:	6978      	ldr	r0, [r7, #20]
 8026098:	f000 f870 	bl	802617c <_ZN15VelocityControl16SetIntegralErrorEf>
    pre_error = error;
 802609c:	4a2c      	ldr	r2, [pc, #176]	; (8026150 <_ZN15VelocityControl10PidControlEffff+0x200>)
 802609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80260a0:	6013      	str	r3, [r2, #0]

    float p = p_gain * error;
 80260a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80260a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80260aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80260ae:	edc7 7a08 	vstr	s15, [r7, #32]
    float d = d_gain * differential_error;
 80260b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80260b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80260ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80260be:	edc7 7a07 	vstr	s15, [r7, #28]
    float i = i_gain * integral_error_;
 80260c2:	697b      	ldr	r3, [r7, #20]
 80260c4:	edd3 7a00 	vldr	s15, [r3]
 80260c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80260cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80260d0:	edc7 7a06 	vstr	s15, [r7, #24]

#ifdef DEBUG_MODE
    g_target_velocity  = target;
 80260d4:	4a1f      	ldr	r2, [pc, #124]	; (8026154 <_ZN15VelocityControl10PidControlEffff+0x204>)
 80260d6:	693b      	ldr	r3, [r7, #16]
 80260d8:	6013      	str	r3, [r2, #0]
    g_current_velocity = current;
 80260da:	4a1f      	ldr	r2, [pc, #124]	; (8026158 <_ZN15VelocityControl10PidControlEffff+0x208>)
 80260dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80260de:	6013      	str	r3, [r2, #0]
    g_filter_velocity  = filter;
 80260e0:	4a1e      	ldr	r2, [pc, #120]	; (802615c <_ZN15VelocityControl10PidControlEffff+0x20c>)
 80260e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80260e4:	6013      	str	r3, [r2, #0]
    g_velocity_error   = error;
 80260e6:	4a1e      	ldr	r2, [pc, #120]	; (8026160 <_ZN15VelocityControl10PidControlEffff+0x210>)
 80260e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80260ea:	6013      	str	r3, [r2, #0]
    g_velocity_p = p;       g_velocity_d = d;       g_velocity_i = i;
 80260ec:	4a1d      	ldr	r2, [pc, #116]	; (8026164 <_ZN15VelocityControl10PidControlEffff+0x214>)
 80260ee:	6a3b      	ldr	r3, [r7, #32]
 80260f0:	6013      	str	r3, [r2, #0]
 80260f2:	4a1d      	ldr	r2, [pc, #116]	; (8026168 <_ZN15VelocityControl10PidControlEffff+0x218>)
 80260f4:	69fb      	ldr	r3, [r7, #28]
 80260f6:	6013      	str	r3, [r2, #0]
 80260f8:	4a1c      	ldr	r2, [pc, #112]	; (802616c <_ZN15VelocityControl10PidControlEffff+0x21c>)
 80260fa:	69bb      	ldr	r3, [r7, #24]
 80260fc:	6013      	str	r3, [r2, #0]
    g_velocity_p_gain = p;  g_velocity_d_gain = p;  g_velocity_i_gain = p;
 80260fe:	4a1c      	ldr	r2, [pc, #112]	; (8026170 <_ZN15VelocityControl10PidControlEffff+0x220>)
 8026100:	6a3b      	ldr	r3, [r7, #32]
 8026102:	6013      	str	r3, [r2, #0]
 8026104:	4a1b      	ldr	r2, [pc, #108]	; (8026174 <_ZN15VelocityControl10PidControlEffff+0x224>)
 8026106:	6a3b      	ldr	r3, [r7, #32]
 8026108:	6013      	str	r3, [r2, #0]
 802610a:	4a1b      	ldr	r2, [pc, #108]	; (8026178 <_ZN15VelocityControl10PidControlEffff+0x228>)
 802610c:	6a3b      	ldr	r3, [r7, #32]
 802610e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    return p + d + i;
 8026110:	ed97 7a08 	vldr	s14, [r7, #32]
 8026114:	edd7 7a07 	vldr	s15, [r7, #28]
 8026118:	ee37 7a27 	vadd.f32	s14, s14, s15
 802611c:	edd7 7a06 	vldr	s15, [r7, #24]
 8026120:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8026124:	eeb0 0a67 	vmov.f32	s0, s15
 8026128:	3738      	adds	r7, #56	; 0x38
 802612a:	46bd      	mov	sp, r7
 802612c:	bdb0      	pop	{r4, r5, r7, pc}
 802612e:	bf00      	nop
 8026130:	33333334 	.word	0x33333334
 8026134:	3fd33333 	.word	0x3fd33333
 8026138:	66666666 	.word	0x66666666
 802613c:	3fe66666 	.word	0x3fe66666
 8026140:	47ae147b 	.word	0x47ae147b
 8026144:	3f547ae1 	.word	0x3f547ae1
 8026148:	20000498 	.word	0x20000498
 802614c:	200004a0 	.word	0x200004a0
 8026150:	2000049c 	.word	0x2000049c
 8026154:	2000044c 	.word	0x2000044c
 8026158:	20000450 	.word	0x20000450
 802615c:	20000454 	.word	0x20000454
 8026160:	20000458 	.word	0x20000458
 8026164:	2000045c 	.word	0x2000045c
 8026168:	20000464 	.word	0x20000464
 802616c:	20000460 	.word	0x20000460
 8026170:	20000468 	.word	0x20000468
 8026174:	20000470 	.word	0x20000470
 8026178:	2000046c 	.word	0x2000046c

0802617c <_ZN15VelocityControl16SetIntegralErrorEf>:

void VelocityControl::SetIntegralError(float integral_error)
{
 802617c:	b480      	push	{r7}
 802617e:	b083      	sub	sp, #12
 8026180:	af00      	add	r7, sp, #0
 8026182:	6078      	str	r0, [r7, #4]
 8026184:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8026188:	687b      	ldr	r3, [r7, #4]
 802618a:	ed93 7a00 	vldr	s14, [r3]
 802618e:	edd7 7a00 	vldr	s15, [r7]
 8026192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026196:	687b      	ldr	r3, [r7, #4]
 8026198:	edc3 7a00 	vstr	s15, [r3]
}
 802619c:	bf00      	nop
 802619e:	370c      	adds	r7, #12
 80261a0:	46bd      	mov	sp, r7
 80261a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261a6:	4770      	bx	lr

080261a8 <Init>:
    &velocity_control
);
#endif // TEST_MODE

void Init()
{
 80261a8:	b580      	push	{r7, lr}
 80261aa:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Init();
 80261ac:	4802      	ldr	r0, [pc, #8]	; (80261b8 <Init+0x10>)
 80261ae:	f7fd ff75 	bl	802409c <_ZN3Run4InitEv>
#else // TEST_MODE
    test.Init();
#endif // TEST_MODE
}
 80261b2:	bf00      	nop
 80261b4:	bd80      	pop	{r7, pc}
 80261b6:	bf00      	nop
 80261b8:	2001110c 	.word	0x2001110c

080261bc <InterruptTim7>:

void InterruptTim7()
{
 80261bc:	b580      	push	{r7, lr}
 80261be:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer7();
 80261c0:	4804      	ldr	r0, [pc, #16]	; (80261d4 <InterruptTim7+0x18>)
 80261c2:	f7fe f80d 	bl	80241e0 <_ZN3Run6Timer7Ev>
#else // TEST_MODE
    test.Timer7();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim7++;
 80261c6:	4b04      	ldr	r3, [pc, #16]	; (80261d8 <InterruptTim7+0x1c>)
 80261c8:	681b      	ldr	r3, [r3, #0]
 80261ca:	3301      	adds	r3, #1
 80261cc:	4a02      	ldr	r2, [pc, #8]	; (80261d8 <InterruptTim7+0x1c>)
 80261ce:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 80261d0:	bf00      	nop
 80261d2:	bd80      	pop	{r7, pc}
 80261d4:	2001110c 	.word	0x2001110c
 80261d8:	20000474 	.word	0x20000474

080261dc <InterruptTim6>:

void InterruptTim6()
{
 80261dc:	b580      	push	{r7, lr}
 80261de:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.RunMode();
 80261e0:	4804      	ldr	r0, [pc, #16]	; (80261f4 <InterruptTim6+0x18>)
 80261e2:	f7fe fa11 	bl	8024608 <_ZN3Run7RunModeEv>
#else // TEST_MODE
    test.Timer6();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim6++;
 80261e6:	4b04      	ldr	r3, [pc, #16]	; (80261f8 <InterruptTim6+0x1c>)
 80261e8:	681b      	ldr	r3, [r3, #0]
 80261ea:	3301      	adds	r3, #1
 80261ec:	4a02      	ldr	r2, [pc, #8]	; (80261f8 <InterruptTim6+0x1c>)
 80261ee:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 80261f0:	bf00      	nop
 80261f2:	bd80      	pop	{r7, pc}
 80261f4:	2001110c 	.word	0x2001110c
 80261f8:	20000478 	.word	0x20000478

080261fc <InterruptTim2>:

void InterruptTim2()
{
 80261fc:	b580      	push	{r7, lr}
 80261fe:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer2();
 8026200:	4804      	ldr	r0, [pc, #16]	; (8026214 <InterruptTim2+0x18>)
 8026202:	f7fd fffb 	bl	80241fc <_ZN3Run6Timer2Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim2++;
 8026206:	4b04      	ldr	r3, [pc, #16]	; (8026218 <InterruptTim2+0x1c>)
 8026208:	681b      	ldr	r3, [r3, #0]
 802620a:	3301      	adds	r3, #1
 802620c:	4a02      	ldr	r2, [pc, #8]	; (8026218 <InterruptTim2+0x1c>)
 802620e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8026210:	bf00      	nop
 8026212:	bd80      	pop	{r7, pc}
 8026214:	2001110c 	.word	0x2001110c
 8026218:	2000047c 	.word	0x2000047c

0802621c <_Z41__static_initialization_and_destruction_0ii>:

#ifdef DEBUG_MODE
void RamLog()
{
    print.RamLog();
}
 802621c:	b580      	push	{r7, lr}
 802621e:	b08c      	sub	sp, #48	; 0x30
 8026220:	af0a      	add	r7, sp, #40	; 0x28
 8026222:	6078      	str	r0, [r7, #4]
 8026224:	6039      	str	r1, [r7, #0]
 8026226:	687b      	ldr	r3, [r7, #4]
 8026228:	2b01      	cmp	r3, #1
 802622a:	d144      	bne.n	80262b6 <_Z41__static_initialization_and_destruction_0ii+0x9a>
 802622c:	683b      	ldr	r3, [r7, #0]
 802622e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8026232:	4293      	cmp	r3, r2
 8026234:	d13f      	bne.n	80262b6 <_Z41__static_initialization_and_destruction_0ii+0x9a>
Encoder encoder;
 8026236:	4822      	ldr	r0, [pc, #136]	; (80262c0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8026238:	f7fa fdbe 	bl	8020db8 <_ZN7EncoderC1Ev>
Imu imu(&iim_42652);
 802623c:	4921      	ldr	r1, [pc, #132]	; (80262c4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 802623e:	4822      	ldr	r0, [pc, #136]	; (80262c8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8026240:	f7fb fa52 	bl	80216e8 <_ZN3ImuC1EP8Iim42652>
Led led;
 8026244:	4821      	ldr	r0, [pc, #132]	; (80262cc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8026246:	f7fb fb97 	bl	8021978 <_ZN3LedC1Ev>
LineSensor line_sensor;
 802624a:	4821      	ldr	r0, [pc, #132]	; (80262d0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 802624c:	f7fb fd4d 	bl	8021cea <_ZN10LineSensorC1Ev>
LineTrace line_trace(&line_sensor);
 8026250:	491f      	ldr	r1, [pc, #124]	; (80262d0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8026252:	4820      	ldr	r0, [pc, #128]	; (80262d4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8026254:	f7fc f874 	bl	8022340 <_ZN9LineTraceC1EP10LineSensor>
Print print(&flash);
 8026258:	491f      	ldr	r1, [pc, #124]	; (80262d8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 802625a:	4820      	ldr	r0, [pc, #128]	; (80262dc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 802625c:	f7fd fe12 	bl	8023e84 <_ZN5PrintC1EP5Flash>
SideSensor side_sensor;
 8026260:	481f      	ldr	r0, [pc, #124]	; (80262e0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8026262:	f7fe fe17 	bl	8024e94 <_ZN10SideSensorC1Ev>
VelocityControl velocity_control(&encoder);
 8026266:	4916      	ldr	r1, [pc, #88]	; (80262c0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8026268:	481e      	ldr	r0, [pc, #120]	; (80262e4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 802626a:	f7ff fe21 	bl	8025eb0 <_ZN15VelocityControlC1EP7Encoder>
Logger logger(&encoder, &flash, &led, &imu, &side_sensor);
 802626e:	4b1c      	ldr	r3, [pc, #112]	; (80262e0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8026270:	9301      	str	r3, [sp, #4]
 8026272:	4b15      	ldr	r3, [pc, #84]	; (80262c8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8026274:	9300      	str	r3, [sp, #0]
 8026276:	4b15      	ldr	r3, [pc, #84]	; (80262cc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8026278:	4a17      	ldr	r2, [pc, #92]	; (80262d8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 802627a:	4911      	ldr	r1, [pc, #68]	; (80262c0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 802627c:	481a      	ldr	r0, [pc, #104]	; (80262e8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 802627e:	f7fc f9bb 	bl	80225f8 <_ZN6LoggerC1EP7EncoderP5FlashP3LedP3ImuP10SideSensor>
);
 8026282:	4b18      	ldr	r3, [pc, #96]	; (80262e4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8026284:	9309      	str	r3, [sp, #36]	; 0x24
 8026286:	4b16      	ldr	r3, [pc, #88]	; (80262e0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8026288:	9308      	str	r3, [sp, #32]
 802628a:	4b18      	ldr	r3, [pc, #96]	; (80262ec <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 802628c:	9307      	str	r3, [sp, #28]
 802628e:	4b13      	ldr	r3, [pc, #76]	; (80262dc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8026290:	9306      	str	r3, [sp, #24]
 8026292:	4b17      	ldr	r3, [pc, #92]	; (80262f0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8026294:	9305      	str	r3, [sp, #20]
 8026296:	4b14      	ldr	r3, [pc, #80]	; (80262e8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8026298:	9304      	str	r3, [sp, #16]
 802629a:	4b0e      	ldr	r3, [pc, #56]	; (80262d4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802629c:	9303      	str	r3, [sp, #12]
 802629e:	4b0c      	ldr	r3, [pc, #48]	; (80262d0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80262a0:	9302      	str	r3, [sp, #8]
 80262a2:	4b0a      	ldr	r3, [pc, #40]	; (80262cc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80262a4:	9301      	str	r3, [sp, #4]
 80262a6:	4b08      	ldr	r3, [pc, #32]	; (80262c8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80262a8:	9300      	str	r3, [sp, #0]
 80262aa:	4b06      	ldr	r3, [pc, #24]	; (80262c4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80262ac:	4a0a      	ldr	r2, [pc, #40]	; (80262d8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80262ae:	4904      	ldr	r1, [pc, #16]	; (80262c0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80262b0:	4810      	ldr	r0, [pc, #64]	; (80262f4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80262b2:	f7fd fea9 	bl	8024008 <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3ImuP3LedP10LineSensorP9LineTraceP6LoggerP5MotorP5PrintP12RotarySwitchP10SideSensorP15VelocityControl>
}
 80262b6:	bf00      	nop
 80262b8:	3708      	adds	r7, #8
 80262ba:	46bd      	mov	sp, r7
 80262bc:	bd80      	pop	{r7, pc}
 80262be:	bf00      	nop
 80262c0:	200004a4 	.word	0x200004a4
 80262c4:	200004b4 	.word	0x200004b4
 80262c8:	200004b8 	.word	0x200004b8
 80262cc:	200004c8 	.word	0x200004c8
 80262d0:	200004cc 	.word	0x200004cc
 80262d4:	20000658 	.word	0x20000658
 80262d8:	200004b0 	.word	0x200004b0
 80262dc:	20000664 	.word	0x20000664
 80262e0:	200110d4 	.word	0x200110d4
 80262e4:	200110dc 	.word	0x200110dc
 80262e8:	200110e4 	.word	0x200110e4
 80262ec:	200110d0 	.word	0x200110d0
 80262f0:	20000660 	.word	0x20000660
 80262f4:	2001110c 	.word	0x2001110c

080262f8 <_GLOBAL__sub_I_encoder>:
 80262f8:	b580      	push	{r7, lr}
 80262fa:	af00      	add	r7, sp, #0
 80262fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8026300:	2001      	movs	r0, #1
 8026302:	f7ff ff8b 	bl	802621c <_Z41__static_initialization_and_destruction_0ii>
 8026306:	bd80      	pop	{r7, pc}

08026308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8026308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8026340 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 802630c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 802630e:	e003      	b.n	8026318 <LoopCopyDataInit>

08026310 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8026310:	4b0c      	ldr	r3, [pc, #48]	; (8026344 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8026312:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8026314:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8026316:	3104      	adds	r1, #4

08026318 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8026318:	480b      	ldr	r0, [pc, #44]	; (8026348 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 802631a:	4b0c      	ldr	r3, [pc, #48]	; (802634c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 802631c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 802631e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8026320:	d3f6      	bcc.n	8026310 <CopyDataInit>
  ldr  r2, =_sbss
 8026322:	4a0b      	ldr	r2, [pc, #44]	; (8026350 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8026324:	e002      	b.n	802632c <LoopFillZerobss>

08026326 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8026326:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8026328:	f842 3b04 	str.w	r3, [r2], #4

0802632c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 802632c:	4b09      	ldr	r3, [pc, #36]	; (8026354 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 802632e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8026330:	d3f9      	bcc.n	8026326 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8026332:	f7ff fda7 	bl	8025e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8026336:	f004 f8d3 	bl	802a4e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802633a:	f7fc fdf5 	bl	8022f28 <main>
  bx  lr    
 802633e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8026340:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8026344:	0802d06c 	.word	0x0802d06c
  ldr  r0, =_sdata
 8026348:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 802634c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8026350:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8026354:	20017630 	.word	0x20017630

08026358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8026358:	e7fe      	b.n	8026358 <ADC_IRQHandler>
	...

0802635c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802635c:	b580      	push	{r7, lr}
 802635e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8026360:	4b0e      	ldr	r3, [pc, #56]	; (802639c <HAL_Init+0x40>)
 8026362:	681b      	ldr	r3, [r3, #0]
 8026364:	4a0d      	ldr	r2, [pc, #52]	; (802639c <HAL_Init+0x40>)
 8026366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802636a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 802636c:	4b0b      	ldr	r3, [pc, #44]	; (802639c <HAL_Init+0x40>)
 802636e:	681b      	ldr	r3, [r3, #0]
 8026370:	4a0a      	ldr	r2, [pc, #40]	; (802639c <HAL_Init+0x40>)
 8026372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8026376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8026378:	4b08      	ldr	r3, [pc, #32]	; (802639c <HAL_Init+0x40>)
 802637a:	681b      	ldr	r3, [r3, #0]
 802637c:	4a07      	ldr	r2, [pc, #28]	; (802639c <HAL_Init+0x40>)
 802637e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8026384:	2003      	movs	r0, #3
 8026386:	f000 fd41 	bl	8026e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802638a:	2001      	movs	r0, #1
 802638c:	f000 f808 	bl	80263a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8026390:	f7ff f8d2 	bl	8025538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8026394:	2300      	movs	r3, #0
}
 8026396:	4618      	mov	r0, r3
 8026398:	bd80      	pop	{r7, pc}
 802639a:	bf00      	nop
 802639c:	40023c00 	.word	0x40023c00

080263a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80263a0:	b580      	push	{r7, lr}
 80263a2:	b082      	sub	sp, #8
 80263a4:	af00      	add	r7, sp, #0
 80263a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80263a8:	4b12      	ldr	r3, [pc, #72]	; (80263f4 <HAL_InitTick+0x54>)
 80263aa:	681a      	ldr	r2, [r3, #0]
 80263ac:	4b12      	ldr	r3, [pc, #72]	; (80263f8 <HAL_InitTick+0x58>)
 80263ae:	781b      	ldrb	r3, [r3, #0]
 80263b0:	4619      	mov	r1, r3
 80263b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80263b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80263ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80263be:	4618      	mov	r0, r3
 80263c0:	f000 fd59 	bl	8026e76 <HAL_SYSTICK_Config>
 80263c4:	4603      	mov	r3, r0
 80263c6:	2b00      	cmp	r3, #0
 80263c8:	d001      	beq.n	80263ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80263ca:	2301      	movs	r3, #1
 80263cc:	e00e      	b.n	80263ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80263ce:	687b      	ldr	r3, [r7, #4]
 80263d0:	2b0f      	cmp	r3, #15
 80263d2:	d80a      	bhi.n	80263ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80263d4:	2200      	movs	r2, #0
 80263d6:	6879      	ldr	r1, [r7, #4]
 80263d8:	f04f 30ff 	mov.w	r0, #4294967295
 80263dc:	f000 fd21 	bl	8026e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80263e0:	4a06      	ldr	r2, [pc, #24]	; (80263fc <HAL_InitTick+0x5c>)
 80263e2:	687b      	ldr	r3, [r7, #4]
 80263e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80263e6:	2300      	movs	r3, #0
 80263e8:	e000      	b.n	80263ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80263ea:	2301      	movs	r3, #1
}
 80263ec:	4618      	mov	r0, r3
 80263ee:	3708      	adds	r7, #8
 80263f0:	46bd      	mov	sp, r7
 80263f2:	bd80      	pop	{r7, pc}
 80263f4:	20000004 	.word	0x20000004
 80263f8:	2000000c 	.word	0x2000000c
 80263fc:	20000008 	.word	0x20000008

08026400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8026400:	b480      	push	{r7}
 8026402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8026404:	4b06      	ldr	r3, [pc, #24]	; (8026420 <HAL_IncTick+0x20>)
 8026406:	781b      	ldrb	r3, [r3, #0]
 8026408:	461a      	mov	r2, r3
 802640a:	4b06      	ldr	r3, [pc, #24]	; (8026424 <HAL_IncTick+0x24>)
 802640c:	681b      	ldr	r3, [r3, #0]
 802640e:	4413      	add	r3, r2
 8026410:	4a04      	ldr	r2, [pc, #16]	; (8026424 <HAL_IncTick+0x24>)
 8026412:	6013      	str	r3, [r2, #0]
}
 8026414:	bf00      	nop
 8026416:	46bd      	mov	sp, r7
 8026418:	f85d 7b04 	ldr.w	r7, [sp], #4
 802641c:	4770      	bx	lr
 802641e:	bf00      	nop
 8026420:	2000000c 	.word	0x2000000c
 8026424:	20017608 	.word	0x20017608

08026428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8026428:	b480      	push	{r7}
 802642a:	af00      	add	r7, sp, #0
  return uwTick;
 802642c:	4b03      	ldr	r3, [pc, #12]	; (802643c <HAL_GetTick+0x14>)
 802642e:	681b      	ldr	r3, [r3, #0]
}
 8026430:	4618      	mov	r0, r3
 8026432:	46bd      	mov	sp, r7
 8026434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026438:	4770      	bx	lr
 802643a:	bf00      	nop
 802643c:	20017608 	.word	0x20017608

08026440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8026440:	b580      	push	{r7, lr}
 8026442:	b084      	sub	sp, #16
 8026444:	af00      	add	r7, sp, #0
 8026446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8026448:	f7ff ffee 	bl	8026428 <HAL_GetTick>
 802644c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802644e:	687b      	ldr	r3, [r7, #4]
 8026450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8026452:	68fb      	ldr	r3, [r7, #12]
 8026454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026458:	d005      	beq.n	8026466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802645a:	4b09      	ldr	r3, [pc, #36]	; (8026480 <HAL_Delay+0x40>)
 802645c:	781b      	ldrb	r3, [r3, #0]
 802645e:	461a      	mov	r2, r3
 8026460:	68fb      	ldr	r3, [r7, #12]
 8026462:	4413      	add	r3, r2
 8026464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8026466:	bf00      	nop
 8026468:	f7ff ffde 	bl	8026428 <HAL_GetTick>
 802646c:	4602      	mov	r2, r0
 802646e:	68bb      	ldr	r3, [r7, #8]
 8026470:	1ad3      	subs	r3, r2, r3
 8026472:	68fa      	ldr	r2, [r7, #12]
 8026474:	429a      	cmp	r2, r3
 8026476:	d8f7      	bhi.n	8026468 <HAL_Delay+0x28>
  {
  }
}
 8026478:	bf00      	nop
 802647a:	3710      	adds	r7, #16
 802647c:	46bd      	mov	sp, r7
 802647e:	bd80      	pop	{r7, pc}
 8026480:	2000000c 	.word	0x2000000c

08026484 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8026484:	b580      	push	{r7, lr}
 8026486:	b084      	sub	sp, #16
 8026488:	af00      	add	r7, sp, #0
 802648a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 802648c:	2300      	movs	r3, #0
 802648e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8026490:	687b      	ldr	r3, [r7, #4]
 8026492:	2b00      	cmp	r3, #0
 8026494:	d101      	bne.n	802649a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8026496:	2301      	movs	r3, #1
 8026498:	e033      	b.n	8026502 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 802649a:	687b      	ldr	r3, [r7, #4]
 802649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802649e:	2b00      	cmp	r3, #0
 80264a0:	d109      	bne.n	80264b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80264a2:	6878      	ldr	r0, [r7, #4]
 80264a4:	f7ff f870 	bl	8025588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80264a8:	687b      	ldr	r3, [r7, #4]
 80264aa:	2200      	movs	r2, #0
 80264ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80264ae:	687b      	ldr	r3, [r7, #4]
 80264b0:	2200      	movs	r2, #0
 80264b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80264b6:	687b      	ldr	r3, [r7, #4]
 80264b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80264ba:	f003 0310 	and.w	r3, r3, #16
 80264be:	2b00      	cmp	r3, #0
 80264c0:	d118      	bne.n	80264f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80264c2:	687b      	ldr	r3, [r7, #4]
 80264c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80264c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80264ca:	f023 0302 	bic.w	r3, r3, #2
 80264ce:	f043 0202 	orr.w	r2, r3, #2
 80264d2:	687b      	ldr	r3, [r7, #4]
 80264d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80264d6:	6878      	ldr	r0, [r7, #4]
 80264d8:	f000 fa4a 	bl	8026970 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80264dc:	687b      	ldr	r3, [r7, #4]
 80264de:	2200      	movs	r2, #0
 80264e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80264e2:	687b      	ldr	r3, [r7, #4]
 80264e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80264e6:	f023 0303 	bic.w	r3, r3, #3
 80264ea:	f043 0201 	orr.w	r2, r3, #1
 80264ee:	687b      	ldr	r3, [r7, #4]
 80264f0:	641a      	str	r2, [r3, #64]	; 0x40
 80264f2:	e001      	b.n	80264f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80264f4:	2301      	movs	r3, #1
 80264f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80264f8:	687b      	ldr	r3, [r7, #4]
 80264fa:	2200      	movs	r2, #0
 80264fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8026500:	7bfb      	ldrb	r3, [r7, #15]
}
 8026502:	4618      	mov	r0, r3
 8026504:	3710      	adds	r7, #16
 8026506:	46bd      	mov	sp, r7
 8026508:	bd80      	pop	{r7, pc}
	...

0802650c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 802650c:	b580      	push	{r7, lr}
 802650e:	b086      	sub	sp, #24
 8026510:	af00      	add	r7, sp, #0
 8026512:	60f8      	str	r0, [r7, #12]
 8026514:	60b9      	str	r1, [r7, #8]
 8026516:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8026518:	2300      	movs	r3, #0
 802651a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802651c:	68fb      	ldr	r3, [r7, #12]
 802651e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026522:	2b01      	cmp	r3, #1
 8026524:	d101      	bne.n	802652a <HAL_ADC_Start_DMA+0x1e>
 8026526:	2302      	movs	r3, #2
 8026528:	e0cc      	b.n	80266c4 <HAL_ADC_Start_DMA+0x1b8>
 802652a:	68fb      	ldr	r3, [r7, #12]
 802652c:	2201      	movs	r2, #1
 802652e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8026532:	68fb      	ldr	r3, [r7, #12]
 8026534:	681b      	ldr	r3, [r3, #0]
 8026536:	689b      	ldr	r3, [r3, #8]
 8026538:	f003 0301 	and.w	r3, r3, #1
 802653c:	2b01      	cmp	r3, #1
 802653e:	d018      	beq.n	8026572 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8026540:	68fb      	ldr	r3, [r7, #12]
 8026542:	681b      	ldr	r3, [r3, #0]
 8026544:	689a      	ldr	r2, [r3, #8]
 8026546:	68fb      	ldr	r3, [r7, #12]
 8026548:	681b      	ldr	r3, [r3, #0]
 802654a:	f042 0201 	orr.w	r2, r2, #1
 802654e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8026550:	4b5e      	ldr	r3, [pc, #376]	; (80266cc <HAL_ADC_Start_DMA+0x1c0>)
 8026552:	681b      	ldr	r3, [r3, #0]
 8026554:	4a5e      	ldr	r2, [pc, #376]	; (80266d0 <HAL_ADC_Start_DMA+0x1c4>)
 8026556:	fba2 2303 	umull	r2, r3, r2, r3
 802655a:	0c9a      	lsrs	r2, r3, #18
 802655c:	4613      	mov	r3, r2
 802655e:	005b      	lsls	r3, r3, #1
 8026560:	4413      	add	r3, r2
 8026562:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8026564:	e002      	b.n	802656c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8026566:	693b      	ldr	r3, [r7, #16]
 8026568:	3b01      	subs	r3, #1
 802656a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 802656c:	693b      	ldr	r3, [r7, #16]
 802656e:	2b00      	cmp	r3, #0
 8026570:	d1f9      	bne.n	8026566 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8026572:	68fb      	ldr	r3, [r7, #12]
 8026574:	681b      	ldr	r3, [r3, #0]
 8026576:	689b      	ldr	r3, [r3, #8]
 8026578:	f003 0301 	and.w	r3, r3, #1
 802657c:	2b01      	cmp	r3, #1
 802657e:	f040 80a0 	bne.w	80266c2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8026582:	68fb      	ldr	r3, [r7, #12]
 8026584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026586:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 802658a:	f023 0301 	bic.w	r3, r3, #1
 802658e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8026592:	68fb      	ldr	r3, [r7, #12]
 8026594:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8026596:	68fb      	ldr	r3, [r7, #12]
 8026598:	681b      	ldr	r3, [r3, #0]
 802659a:	685b      	ldr	r3, [r3, #4]
 802659c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80265a0:	2b00      	cmp	r3, #0
 80265a2:	d007      	beq.n	80265b4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80265a4:	68fb      	ldr	r3, [r7, #12]
 80265a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80265a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80265ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80265b0:	68fb      	ldr	r3, [r7, #12]
 80265b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80265b4:	68fb      	ldr	r3, [r7, #12]
 80265b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80265b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80265bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80265c0:	d106      	bne.n	80265d0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80265c2:	68fb      	ldr	r3, [r7, #12]
 80265c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80265c6:	f023 0206 	bic.w	r2, r3, #6
 80265ca:	68fb      	ldr	r3, [r7, #12]
 80265cc:	645a      	str	r2, [r3, #68]	; 0x44
 80265ce:	e002      	b.n	80265d6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80265d0:	68fb      	ldr	r3, [r7, #12]
 80265d2:	2200      	movs	r2, #0
 80265d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80265d6:	68fb      	ldr	r3, [r7, #12]
 80265d8:	2200      	movs	r2, #0
 80265da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80265de:	4b3d      	ldr	r3, [pc, #244]	; (80266d4 <HAL_ADC_Start_DMA+0x1c8>)
 80265e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80265e2:	68fb      	ldr	r3, [r7, #12]
 80265e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80265e6:	4a3c      	ldr	r2, [pc, #240]	; (80266d8 <HAL_ADC_Start_DMA+0x1cc>)
 80265e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80265ea:	68fb      	ldr	r3, [r7, #12]
 80265ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80265ee:	4a3b      	ldr	r2, [pc, #236]	; (80266dc <HAL_ADC_Start_DMA+0x1d0>)
 80265f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80265f2:	68fb      	ldr	r3, [r7, #12]
 80265f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80265f6:	4a3a      	ldr	r2, [pc, #232]	; (80266e0 <HAL_ADC_Start_DMA+0x1d4>)
 80265f8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80265fa:	68fb      	ldr	r3, [r7, #12]
 80265fc:	681b      	ldr	r3, [r3, #0]
 80265fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8026602:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8026604:	68fb      	ldr	r3, [r7, #12]
 8026606:	681b      	ldr	r3, [r3, #0]
 8026608:	685a      	ldr	r2, [r3, #4]
 802660a:	68fb      	ldr	r3, [r7, #12]
 802660c:	681b      	ldr	r3, [r3, #0]
 802660e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8026612:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8026614:	68fb      	ldr	r3, [r7, #12]
 8026616:	681b      	ldr	r3, [r3, #0]
 8026618:	689a      	ldr	r2, [r3, #8]
 802661a:	68fb      	ldr	r3, [r7, #12]
 802661c:	681b      	ldr	r3, [r3, #0]
 802661e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8026622:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8026624:	68fb      	ldr	r3, [r7, #12]
 8026626:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8026628:	68fb      	ldr	r3, [r7, #12]
 802662a:	681b      	ldr	r3, [r3, #0]
 802662c:	334c      	adds	r3, #76	; 0x4c
 802662e:	4619      	mov	r1, r3
 8026630:	68ba      	ldr	r2, [r7, #8]
 8026632:	687b      	ldr	r3, [r7, #4]
 8026634:	f000 fcda 	bl	8026fec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8026638:	697b      	ldr	r3, [r7, #20]
 802663a:	685b      	ldr	r3, [r3, #4]
 802663c:	f003 031f 	and.w	r3, r3, #31
 8026640:	2b00      	cmp	r3, #0
 8026642:	d12a      	bne.n	802669a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8026644:	68fb      	ldr	r3, [r7, #12]
 8026646:	681b      	ldr	r3, [r3, #0]
 8026648:	4a26      	ldr	r2, [pc, #152]	; (80266e4 <HAL_ADC_Start_DMA+0x1d8>)
 802664a:	4293      	cmp	r3, r2
 802664c:	d015      	beq.n	802667a <HAL_ADC_Start_DMA+0x16e>
 802664e:	68fb      	ldr	r3, [r7, #12]
 8026650:	681b      	ldr	r3, [r3, #0]
 8026652:	4a25      	ldr	r2, [pc, #148]	; (80266e8 <HAL_ADC_Start_DMA+0x1dc>)
 8026654:	4293      	cmp	r3, r2
 8026656:	d105      	bne.n	8026664 <HAL_ADC_Start_DMA+0x158>
 8026658:	4b1e      	ldr	r3, [pc, #120]	; (80266d4 <HAL_ADC_Start_DMA+0x1c8>)
 802665a:	685b      	ldr	r3, [r3, #4]
 802665c:	f003 031f 	and.w	r3, r3, #31
 8026660:	2b00      	cmp	r3, #0
 8026662:	d00a      	beq.n	802667a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8026664:	68fb      	ldr	r3, [r7, #12]
 8026666:	681b      	ldr	r3, [r3, #0]
 8026668:	4a20      	ldr	r2, [pc, #128]	; (80266ec <HAL_ADC_Start_DMA+0x1e0>)
 802666a:	4293      	cmp	r3, r2
 802666c:	d129      	bne.n	80266c2 <HAL_ADC_Start_DMA+0x1b6>
 802666e:	4b19      	ldr	r3, [pc, #100]	; (80266d4 <HAL_ADC_Start_DMA+0x1c8>)
 8026670:	685b      	ldr	r3, [r3, #4]
 8026672:	f003 031f 	and.w	r3, r3, #31
 8026676:	2b0f      	cmp	r3, #15
 8026678:	d823      	bhi.n	80266c2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 802667a:	68fb      	ldr	r3, [r7, #12]
 802667c:	681b      	ldr	r3, [r3, #0]
 802667e:	689b      	ldr	r3, [r3, #8]
 8026680:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8026684:	2b00      	cmp	r3, #0
 8026686:	d11c      	bne.n	80266c2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8026688:	68fb      	ldr	r3, [r7, #12]
 802668a:	681b      	ldr	r3, [r3, #0]
 802668c:	689a      	ldr	r2, [r3, #8]
 802668e:	68fb      	ldr	r3, [r7, #12]
 8026690:	681b      	ldr	r3, [r3, #0]
 8026692:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8026696:	609a      	str	r2, [r3, #8]
 8026698:	e013      	b.n	80266c2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 802669a:	68fb      	ldr	r3, [r7, #12]
 802669c:	681b      	ldr	r3, [r3, #0]
 802669e:	4a11      	ldr	r2, [pc, #68]	; (80266e4 <HAL_ADC_Start_DMA+0x1d8>)
 80266a0:	4293      	cmp	r3, r2
 80266a2:	d10e      	bne.n	80266c2 <HAL_ADC_Start_DMA+0x1b6>
 80266a4:	68fb      	ldr	r3, [r7, #12]
 80266a6:	681b      	ldr	r3, [r3, #0]
 80266a8:	689b      	ldr	r3, [r3, #8]
 80266aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80266ae:	2b00      	cmp	r3, #0
 80266b0:	d107      	bne.n	80266c2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80266b2:	68fb      	ldr	r3, [r7, #12]
 80266b4:	681b      	ldr	r3, [r3, #0]
 80266b6:	689a      	ldr	r2, [r3, #8]
 80266b8:	68fb      	ldr	r3, [r7, #12]
 80266ba:	681b      	ldr	r3, [r3, #0]
 80266bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80266c0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80266c2:	2300      	movs	r3, #0
}
 80266c4:	4618      	mov	r0, r3
 80266c6:	3718      	adds	r7, #24
 80266c8:	46bd      	mov	sp, r7
 80266ca:	bd80      	pop	{r7, pc}
 80266cc:	20000004 	.word	0x20000004
 80266d0:	431bde83 	.word	0x431bde83
 80266d4:	40012300 	.word	0x40012300
 80266d8:	08026b69 	.word	0x08026b69
 80266dc:	08026c23 	.word	0x08026c23
 80266e0:	08026c3f 	.word	0x08026c3f
 80266e4:	40012000 	.word	0x40012000
 80266e8:	40012100 	.word	0x40012100
 80266ec:	40012200 	.word	0x40012200

080266f0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80266f0:	b480      	push	{r7}
 80266f2:	b083      	sub	sp, #12
 80266f4:	af00      	add	r7, sp, #0
 80266f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80266f8:	bf00      	nop
 80266fa:	370c      	adds	r7, #12
 80266fc:	46bd      	mov	sp, r7
 80266fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026702:	4770      	bx	lr

08026704 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8026704:	b480      	push	{r7}
 8026706:	b083      	sub	sp, #12
 8026708:	af00      	add	r7, sp, #0
 802670a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 802670c:	bf00      	nop
 802670e:	370c      	adds	r7, #12
 8026710:	46bd      	mov	sp, r7
 8026712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026716:	4770      	bx	lr

08026718 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8026718:	b480      	push	{r7}
 802671a:	b083      	sub	sp, #12
 802671c:	af00      	add	r7, sp, #0
 802671e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8026720:	bf00      	nop
 8026722:	370c      	adds	r7, #12
 8026724:	46bd      	mov	sp, r7
 8026726:	f85d 7b04 	ldr.w	r7, [sp], #4
 802672a:	4770      	bx	lr

0802672c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 802672c:	b480      	push	{r7}
 802672e:	b085      	sub	sp, #20
 8026730:	af00      	add	r7, sp, #0
 8026732:	6078      	str	r0, [r7, #4]
 8026734:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8026736:	2300      	movs	r3, #0
 8026738:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802673a:	687b      	ldr	r3, [r7, #4]
 802673c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026740:	2b01      	cmp	r3, #1
 8026742:	d101      	bne.n	8026748 <HAL_ADC_ConfigChannel+0x1c>
 8026744:	2302      	movs	r3, #2
 8026746:	e105      	b.n	8026954 <HAL_ADC_ConfigChannel+0x228>
 8026748:	687b      	ldr	r3, [r7, #4]
 802674a:	2201      	movs	r2, #1
 802674c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8026750:	683b      	ldr	r3, [r7, #0]
 8026752:	681b      	ldr	r3, [r3, #0]
 8026754:	2b09      	cmp	r3, #9
 8026756:	d925      	bls.n	80267a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8026758:	687b      	ldr	r3, [r7, #4]
 802675a:	681b      	ldr	r3, [r3, #0]
 802675c:	68d9      	ldr	r1, [r3, #12]
 802675e:	683b      	ldr	r3, [r7, #0]
 8026760:	681b      	ldr	r3, [r3, #0]
 8026762:	b29b      	uxth	r3, r3
 8026764:	461a      	mov	r2, r3
 8026766:	4613      	mov	r3, r2
 8026768:	005b      	lsls	r3, r3, #1
 802676a:	4413      	add	r3, r2
 802676c:	3b1e      	subs	r3, #30
 802676e:	2207      	movs	r2, #7
 8026770:	fa02 f303 	lsl.w	r3, r2, r3
 8026774:	43da      	mvns	r2, r3
 8026776:	687b      	ldr	r3, [r7, #4]
 8026778:	681b      	ldr	r3, [r3, #0]
 802677a:	400a      	ands	r2, r1
 802677c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 802677e:	687b      	ldr	r3, [r7, #4]
 8026780:	681b      	ldr	r3, [r3, #0]
 8026782:	68d9      	ldr	r1, [r3, #12]
 8026784:	683b      	ldr	r3, [r7, #0]
 8026786:	689a      	ldr	r2, [r3, #8]
 8026788:	683b      	ldr	r3, [r7, #0]
 802678a:	681b      	ldr	r3, [r3, #0]
 802678c:	b29b      	uxth	r3, r3
 802678e:	4618      	mov	r0, r3
 8026790:	4603      	mov	r3, r0
 8026792:	005b      	lsls	r3, r3, #1
 8026794:	4403      	add	r3, r0
 8026796:	3b1e      	subs	r3, #30
 8026798:	409a      	lsls	r2, r3
 802679a:	687b      	ldr	r3, [r7, #4]
 802679c:	681b      	ldr	r3, [r3, #0]
 802679e:	430a      	orrs	r2, r1
 80267a0:	60da      	str	r2, [r3, #12]
 80267a2:	e022      	b.n	80267ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80267a4:	687b      	ldr	r3, [r7, #4]
 80267a6:	681b      	ldr	r3, [r3, #0]
 80267a8:	6919      	ldr	r1, [r3, #16]
 80267aa:	683b      	ldr	r3, [r7, #0]
 80267ac:	681b      	ldr	r3, [r3, #0]
 80267ae:	b29b      	uxth	r3, r3
 80267b0:	461a      	mov	r2, r3
 80267b2:	4613      	mov	r3, r2
 80267b4:	005b      	lsls	r3, r3, #1
 80267b6:	4413      	add	r3, r2
 80267b8:	2207      	movs	r2, #7
 80267ba:	fa02 f303 	lsl.w	r3, r2, r3
 80267be:	43da      	mvns	r2, r3
 80267c0:	687b      	ldr	r3, [r7, #4]
 80267c2:	681b      	ldr	r3, [r3, #0]
 80267c4:	400a      	ands	r2, r1
 80267c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80267c8:	687b      	ldr	r3, [r7, #4]
 80267ca:	681b      	ldr	r3, [r3, #0]
 80267cc:	6919      	ldr	r1, [r3, #16]
 80267ce:	683b      	ldr	r3, [r7, #0]
 80267d0:	689a      	ldr	r2, [r3, #8]
 80267d2:	683b      	ldr	r3, [r7, #0]
 80267d4:	681b      	ldr	r3, [r3, #0]
 80267d6:	b29b      	uxth	r3, r3
 80267d8:	4618      	mov	r0, r3
 80267da:	4603      	mov	r3, r0
 80267dc:	005b      	lsls	r3, r3, #1
 80267de:	4403      	add	r3, r0
 80267e0:	409a      	lsls	r2, r3
 80267e2:	687b      	ldr	r3, [r7, #4]
 80267e4:	681b      	ldr	r3, [r3, #0]
 80267e6:	430a      	orrs	r2, r1
 80267e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80267ea:	683b      	ldr	r3, [r7, #0]
 80267ec:	685b      	ldr	r3, [r3, #4]
 80267ee:	2b06      	cmp	r3, #6
 80267f0:	d824      	bhi.n	802683c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80267f2:	687b      	ldr	r3, [r7, #4]
 80267f4:	681b      	ldr	r3, [r3, #0]
 80267f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80267f8:	683b      	ldr	r3, [r7, #0]
 80267fa:	685a      	ldr	r2, [r3, #4]
 80267fc:	4613      	mov	r3, r2
 80267fe:	009b      	lsls	r3, r3, #2
 8026800:	4413      	add	r3, r2
 8026802:	3b05      	subs	r3, #5
 8026804:	221f      	movs	r2, #31
 8026806:	fa02 f303 	lsl.w	r3, r2, r3
 802680a:	43da      	mvns	r2, r3
 802680c:	687b      	ldr	r3, [r7, #4]
 802680e:	681b      	ldr	r3, [r3, #0]
 8026810:	400a      	ands	r2, r1
 8026812:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8026814:	687b      	ldr	r3, [r7, #4]
 8026816:	681b      	ldr	r3, [r3, #0]
 8026818:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802681a:	683b      	ldr	r3, [r7, #0]
 802681c:	681b      	ldr	r3, [r3, #0]
 802681e:	b29b      	uxth	r3, r3
 8026820:	4618      	mov	r0, r3
 8026822:	683b      	ldr	r3, [r7, #0]
 8026824:	685a      	ldr	r2, [r3, #4]
 8026826:	4613      	mov	r3, r2
 8026828:	009b      	lsls	r3, r3, #2
 802682a:	4413      	add	r3, r2
 802682c:	3b05      	subs	r3, #5
 802682e:	fa00 f203 	lsl.w	r2, r0, r3
 8026832:	687b      	ldr	r3, [r7, #4]
 8026834:	681b      	ldr	r3, [r3, #0]
 8026836:	430a      	orrs	r2, r1
 8026838:	635a      	str	r2, [r3, #52]	; 0x34
 802683a:	e04c      	b.n	80268d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 802683c:	683b      	ldr	r3, [r7, #0]
 802683e:	685b      	ldr	r3, [r3, #4]
 8026840:	2b0c      	cmp	r3, #12
 8026842:	d824      	bhi.n	802688e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8026844:	687b      	ldr	r3, [r7, #4]
 8026846:	681b      	ldr	r3, [r3, #0]
 8026848:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802684a:	683b      	ldr	r3, [r7, #0]
 802684c:	685a      	ldr	r2, [r3, #4]
 802684e:	4613      	mov	r3, r2
 8026850:	009b      	lsls	r3, r3, #2
 8026852:	4413      	add	r3, r2
 8026854:	3b23      	subs	r3, #35	; 0x23
 8026856:	221f      	movs	r2, #31
 8026858:	fa02 f303 	lsl.w	r3, r2, r3
 802685c:	43da      	mvns	r2, r3
 802685e:	687b      	ldr	r3, [r7, #4]
 8026860:	681b      	ldr	r3, [r3, #0]
 8026862:	400a      	ands	r2, r1
 8026864:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8026866:	687b      	ldr	r3, [r7, #4]
 8026868:	681b      	ldr	r3, [r3, #0]
 802686a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802686c:	683b      	ldr	r3, [r7, #0]
 802686e:	681b      	ldr	r3, [r3, #0]
 8026870:	b29b      	uxth	r3, r3
 8026872:	4618      	mov	r0, r3
 8026874:	683b      	ldr	r3, [r7, #0]
 8026876:	685a      	ldr	r2, [r3, #4]
 8026878:	4613      	mov	r3, r2
 802687a:	009b      	lsls	r3, r3, #2
 802687c:	4413      	add	r3, r2
 802687e:	3b23      	subs	r3, #35	; 0x23
 8026880:	fa00 f203 	lsl.w	r2, r0, r3
 8026884:	687b      	ldr	r3, [r7, #4]
 8026886:	681b      	ldr	r3, [r3, #0]
 8026888:	430a      	orrs	r2, r1
 802688a:	631a      	str	r2, [r3, #48]	; 0x30
 802688c:	e023      	b.n	80268d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 802688e:	687b      	ldr	r3, [r7, #4]
 8026890:	681b      	ldr	r3, [r3, #0]
 8026892:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026894:	683b      	ldr	r3, [r7, #0]
 8026896:	685a      	ldr	r2, [r3, #4]
 8026898:	4613      	mov	r3, r2
 802689a:	009b      	lsls	r3, r3, #2
 802689c:	4413      	add	r3, r2
 802689e:	3b41      	subs	r3, #65	; 0x41
 80268a0:	221f      	movs	r2, #31
 80268a2:	fa02 f303 	lsl.w	r3, r2, r3
 80268a6:	43da      	mvns	r2, r3
 80268a8:	687b      	ldr	r3, [r7, #4]
 80268aa:	681b      	ldr	r3, [r3, #0]
 80268ac:	400a      	ands	r2, r1
 80268ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80268b0:	687b      	ldr	r3, [r7, #4]
 80268b2:	681b      	ldr	r3, [r3, #0]
 80268b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80268b6:	683b      	ldr	r3, [r7, #0]
 80268b8:	681b      	ldr	r3, [r3, #0]
 80268ba:	b29b      	uxth	r3, r3
 80268bc:	4618      	mov	r0, r3
 80268be:	683b      	ldr	r3, [r7, #0]
 80268c0:	685a      	ldr	r2, [r3, #4]
 80268c2:	4613      	mov	r3, r2
 80268c4:	009b      	lsls	r3, r3, #2
 80268c6:	4413      	add	r3, r2
 80268c8:	3b41      	subs	r3, #65	; 0x41
 80268ca:	fa00 f203 	lsl.w	r2, r0, r3
 80268ce:	687b      	ldr	r3, [r7, #4]
 80268d0:	681b      	ldr	r3, [r3, #0]
 80268d2:	430a      	orrs	r2, r1
 80268d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80268d6:	4b22      	ldr	r3, [pc, #136]	; (8026960 <HAL_ADC_ConfigChannel+0x234>)
 80268d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80268da:	687b      	ldr	r3, [r7, #4]
 80268dc:	681b      	ldr	r3, [r3, #0]
 80268de:	4a21      	ldr	r2, [pc, #132]	; (8026964 <HAL_ADC_ConfigChannel+0x238>)
 80268e0:	4293      	cmp	r3, r2
 80268e2:	d109      	bne.n	80268f8 <HAL_ADC_ConfigChannel+0x1cc>
 80268e4:	683b      	ldr	r3, [r7, #0]
 80268e6:	681b      	ldr	r3, [r3, #0]
 80268e8:	2b12      	cmp	r3, #18
 80268ea:	d105      	bne.n	80268f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80268ec:	68fb      	ldr	r3, [r7, #12]
 80268ee:	685b      	ldr	r3, [r3, #4]
 80268f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80268f4:	68fb      	ldr	r3, [r7, #12]
 80268f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80268f8:	687b      	ldr	r3, [r7, #4]
 80268fa:	681b      	ldr	r3, [r3, #0]
 80268fc:	4a19      	ldr	r2, [pc, #100]	; (8026964 <HAL_ADC_ConfigChannel+0x238>)
 80268fe:	4293      	cmp	r3, r2
 8026900:	d123      	bne.n	802694a <HAL_ADC_ConfigChannel+0x21e>
 8026902:	683b      	ldr	r3, [r7, #0]
 8026904:	681b      	ldr	r3, [r3, #0]
 8026906:	2b10      	cmp	r3, #16
 8026908:	d003      	beq.n	8026912 <HAL_ADC_ConfigChannel+0x1e6>
 802690a:	683b      	ldr	r3, [r7, #0]
 802690c:	681b      	ldr	r3, [r3, #0]
 802690e:	2b11      	cmp	r3, #17
 8026910:	d11b      	bne.n	802694a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8026912:	68fb      	ldr	r3, [r7, #12]
 8026914:	685b      	ldr	r3, [r3, #4]
 8026916:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 802691a:	68fb      	ldr	r3, [r7, #12]
 802691c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 802691e:	683b      	ldr	r3, [r7, #0]
 8026920:	681b      	ldr	r3, [r3, #0]
 8026922:	2b10      	cmp	r3, #16
 8026924:	d111      	bne.n	802694a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8026926:	4b10      	ldr	r3, [pc, #64]	; (8026968 <HAL_ADC_ConfigChannel+0x23c>)
 8026928:	681b      	ldr	r3, [r3, #0]
 802692a:	4a10      	ldr	r2, [pc, #64]	; (802696c <HAL_ADC_ConfigChannel+0x240>)
 802692c:	fba2 2303 	umull	r2, r3, r2, r3
 8026930:	0c9a      	lsrs	r2, r3, #18
 8026932:	4613      	mov	r3, r2
 8026934:	009b      	lsls	r3, r3, #2
 8026936:	4413      	add	r3, r2
 8026938:	005b      	lsls	r3, r3, #1
 802693a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 802693c:	e002      	b.n	8026944 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 802693e:	68bb      	ldr	r3, [r7, #8]
 8026940:	3b01      	subs	r3, #1
 8026942:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8026944:	68bb      	ldr	r3, [r7, #8]
 8026946:	2b00      	cmp	r3, #0
 8026948:	d1f9      	bne.n	802693e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 802694a:	687b      	ldr	r3, [r7, #4]
 802694c:	2200      	movs	r2, #0
 802694e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8026952:	2300      	movs	r3, #0
}
 8026954:	4618      	mov	r0, r3
 8026956:	3714      	adds	r7, #20
 8026958:	46bd      	mov	sp, r7
 802695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802695e:	4770      	bx	lr
 8026960:	40012300 	.word	0x40012300
 8026964:	40012000 	.word	0x40012000
 8026968:	20000004 	.word	0x20000004
 802696c:	431bde83 	.word	0x431bde83

08026970 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8026970:	b480      	push	{r7}
 8026972:	b085      	sub	sp, #20
 8026974:	af00      	add	r7, sp, #0
 8026976:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026978:	4b79      	ldr	r3, [pc, #484]	; (8026b60 <ADC_Init+0x1f0>)
 802697a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 802697c:	68fb      	ldr	r3, [r7, #12]
 802697e:	685b      	ldr	r3, [r3, #4]
 8026980:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8026984:	68fb      	ldr	r3, [r7, #12]
 8026986:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8026988:	68fb      	ldr	r3, [r7, #12]
 802698a:	685a      	ldr	r2, [r3, #4]
 802698c:	687b      	ldr	r3, [r7, #4]
 802698e:	685b      	ldr	r3, [r3, #4]
 8026990:	431a      	orrs	r2, r3
 8026992:	68fb      	ldr	r3, [r7, #12]
 8026994:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8026996:	687b      	ldr	r3, [r7, #4]
 8026998:	681b      	ldr	r3, [r3, #0]
 802699a:	685a      	ldr	r2, [r3, #4]
 802699c:	687b      	ldr	r3, [r7, #4]
 802699e:	681b      	ldr	r3, [r3, #0]
 80269a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80269a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80269a6:	687b      	ldr	r3, [r7, #4]
 80269a8:	681b      	ldr	r3, [r3, #0]
 80269aa:	6859      	ldr	r1, [r3, #4]
 80269ac:	687b      	ldr	r3, [r7, #4]
 80269ae:	691b      	ldr	r3, [r3, #16]
 80269b0:	021a      	lsls	r2, r3, #8
 80269b2:	687b      	ldr	r3, [r7, #4]
 80269b4:	681b      	ldr	r3, [r3, #0]
 80269b6:	430a      	orrs	r2, r1
 80269b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80269ba:	687b      	ldr	r3, [r7, #4]
 80269bc:	681b      	ldr	r3, [r3, #0]
 80269be:	685a      	ldr	r2, [r3, #4]
 80269c0:	687b      	ldr	r3, [r7, #4]
 80269c2:	681b      	ldr	r3, [r3, #0]
 80269c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80269c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80269ca:	687b      	ldr	r3, [r7, #4]
 80269cc:	681b      	ldr	r3, [r3, #0]
 80269ce:	6859      	ldr	r1, [r3, #4]
 80269d0:	687b      	ldr	r3, [r7, #4]
 80269d2:	689a      	ldr	r2, [r3, #8]
 80269d4:	687b      	ldr	r3, [r7, #4]
 80269d6:	681b      	ldr	r3, [r3, #0]
 80269d8:	430a      	orrs	r2, r1
 80269da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80269dc:	687b      	ldr	r3, [r7, #4]
 80269de:	681b      	ldr	r3, [r3, #0]
 80269e0:	689a      	ldr	r2, [r3, #8]
 80269e2:	687b      	ldr	r3, [r7, #4]
 80269e4:	681b      	ldr	r3, [r3, #0]
 80269e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80269ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80269ec:	687b      	ldr	r3, [r7, #4]
 80269ee:	681b      	ldr	r3, [r3, #0]
 80269f0:	6899      	ldr	r1, [r3, #8]
 80269f2:	687b      	ldr	r3, [r7, #4]
 80269f4:	68da      	ldr	r2, [r3, #12]
 80269f6:	687b      	ldr	r3, [r7, #4]
 80269f8:	681b      	ldr	r3, [r3, #0]
 80269fa:	430a      	orrs	r2, r1
 80269fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80269fe:	687b      	ldr	r3, [r7, #4]
 8026a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026a02:	4a58      	ldr	r2, [pc, #352]	; (8026b64 <ADC_Init+0x1f4>)
 8026a04:	4293      	cmp	r3, r2
 8026a06:	d022      	beq.n	8026a4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8026a08:	687b      	ldr	r3, [r7, #4]
 8026a0a:	681b      	ldr	r3, [r3, #0]
 8026a0c:	689a      	ldr	r2, [r3, #8]
 8026a0e:	687b      	ldr	r3, [r7, #4]
 8026a10:	681b      	ldr	r3, [r3, #0]
 8026a12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8026a16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8026a18:	687b      	ldr	r3, [r7, #4]
 8026a1a:	681b      	ldr	r3, [r3, #0]
 8026a1c:	6899      	ldr	r1, [r3, #8]
 8026a1e:	687b      	ldr	r3, [r7, #4]
 8026a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026a22:	687b      	ldr	r3, [r7, #4]
 8026a24:	681b      	ldr	r3, [r3, #0]
 8026a26:	430a      	orrs	r2, r1
 8026a28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8026a2a:	687b      	ldr	r3, [r7, #4]
 8026a2c:	681b      	ldr	r3, [r3, #0]
 8026a2e:	689a      	ldr	r2, [r3, #8]
 8026a30:	687b      	ldr	r3, [r7, #4]
 8026a32:	681b      	ldr	r3, [r3, #0]
 8026a34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8026a38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8026a3a:	687b      	ldr	r3, [r7, #4]
 8026a3c:	681b      	ldr	r3, [r3, #0]
 8026a3e:	6899      	ldr	r1, [r3, #8]
 8026a40:	687b      	ldr	r3, [r7, #4]
 8026a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026a44:	687b      	ldr	r3, [r7, #4]
 8026a46:	681b      	ldr	r3, [r3, #0]
 8026a48:	430a      	orrs	r2, r1
 8026a4a:	609a      	str	r2, [r3, #8]
 8026a4c:	e00f      	b.n	8026a6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8026a4e:	687b      	ldr	r3, [r7, #4]
 8026a50:	681b      	ldr	r3, [r3, #0]
 8026a52:	689a      	ldr	r2, [r3, #8]
 8026a54:	687b      	ldr	r3, [r7, #4]
 8026a56:	681b      	ldr	r3, [r3, #0]
 8026a58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8026a5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8026a5e:	687b      	ldr	r3, [r7, #4]
 8026a60:	681b      	ldr	r3, [r3, #0]
 8026a62:	689a      	ldr	r2, [r3, #8]
 8026a64:	687b      	ldr	r3, [r7, #4]
 8026a66:	681b      	ldr	r3, [r3, #0]
 8026a68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8026a6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8026a6e:	687b      	ldr	r3, [r7, #4]
 8026a70:	681b      	ldr	r3, [r3, #0]
 8026a72:	689a      	ldr	r2, [r3, #8]
 8026a74:	687b      	ldr	r3, [r7, #4]
 8026a76:	681b      	ldr	r3, [r3, #0]
 8026a78:	f022 0202 	bic.w	r2, r2, #2
 8026a7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8026a7e:	687b      	ldr	r3, [r7, #4]
 8026a80:	681b      	ldr	r3, [r3, #0]
 8026a82:	6899      	ldr	r1, [r3, #8]
 8026a84:	687b      	ldr	r3, [r7, #4]
 8026a86:	7e1b      	ldrb	r3, [r3, #24]
 8026a88:	005a      	lsls	r2, r3, #1
 8026a8a:	687b      	ldr	r3, [r7, #4]
 8026a8c:	681b      	ldr	r3, [r3, #0]
 8026a8e:	430a      	orrs	r2, r1
 8026a90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8026a92:	687b      	ldr	r3, [r7, #4]
 8026a94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8026a98:	2b00      	cmp	r3, #0
 8026a9a:	d01b      	beq.n	8026ad4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8026a9c:	687b      	ldr	r3, [r7, #4]
 8026a9e:	681b      	ldr	r3, [r3, #0]
 8026aa0:	685a      	ldr	r2, [r3, #4]
 8026aa2:	687b      	ldr	r3, [r7, #4]
 8026aa4:	681b      	ldr	r3, [r3, #0]
 8026aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8026aaa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8026aac:	687b      	ldr	r3, [r7, #4]
 8026aae:	681b      	ldr	r3, [r3, #0]
 8026ab0:	685a      	ldr	r2, [r3, #4]
 8026ab2:	687b      	ldr	r3, [r7, #4]
 8026ab4:	681b      	ldr	r3, [r3, #0]
 8026ab6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8026aba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8026abc:	687b      	ldr	r3, [r7, #4]
 8026abe:	681b      	ldr	r3, [r3, #0]
 8026ac0:	6859      	ldr	r1, [r3, #4]
 8026ac2:	687b      	ldr	r3, [r7, #4]
 8026ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026ac6:	3b01      	subs	r3, #1
 8026ac8:	035a      	lsls	r2, r3, #13
 8026aca:	687b      	ldr	r3, [r7, #4]
 8026acc:	681b      	ldr	r3, [r3, #0]
 8026ace:	430a      	orrs	r2, r1
 8026ad0:	605a      	str	r2, [r3, #4]
 8026ad2:	e007      	b.n	8026ae4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8026ad4:	687b      	ldr	r3, [r7, #4]
 8026ad6:	681b      	ldr	r3, [r3, #0]
 8026ad8:	685a      	ldr	r2, [r3, #4]
 8026ada:	687b      	ldr	r3, [r7, #4]
 8026adc:	681b      	ldr	r3, [r3, #0]
 8026ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8026ae2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8026ae4:	687b      	ldr	r3, [r7, #4]
 8026ae6:	681b      	ldr	r3, [r3, #0]
 8026ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026aea:	687b      	ldr	r3, [r7, #4]
 8026aec:	681b      	ldr	r3, [r3, #0]
 8026aee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8026af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8026af4:	687b      	ldr	r3, [r7, #4]
 8026af6:	681b      	ldr	r3, [r3, #0]
 8026af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026afa:	687b      	ldr	r3, [r7, #4]
 8026afc:	69db      	ldr	r3, [r3, #28]
 8026afe:	3b01      	subs	r3, #1
 8026b00:	051a      	lsls	r2, r3, #20
 8026b02:	687b      	ldr	r3, [r7, #4]
 8026b04:	681b      	ldr	r3, [r3, #0]
 8026b06:	430a      	orrs	r2, r1
 8026b08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8026b0a:	687b      	ldr	r3, [r7, #4]
 8026b0c:	681b      	ldr	r3, [r3, #0]
 8026b0e:	689a      	ldr	r2, [r3, #8]
 8026b10:	687b      	ldr	r3, [r7, #4]
 8026b12:	681b      	ldr	r3, [r3, #0]
 8026b14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8026b18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8026b1a:	687b      	ldr	r3, [r7, #4]
 8026b1c:	681b      	ldr	r3, [r3, #0]
 8026b1e:	6899      	ldr	r1, [r3, #8]
 8026b20:	687b      	ldr	r3, [r7, #4]
 8026b22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8026b26:	025a      	lsls	r2, r3, #9
 8026b28:	687b      	ldr	r3, [r7, #4]
 8026b2a:	681b      	ldr	r3, [r3, #0]
 8026b2c:	430a      	orrs	r2, r1
 8026b2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8026b30:	687b      	ldr	r3, [r7, #4]
 8026b32:	681b      	ldr	r3, [r3, #0]
 8026b34:	689a      	ldr	r2, [r3, #8]
 8026b36:	687b      	ldr	r3, [r7, #4]
 8026b38:	681b      	ldr	r3, [r3, #0]
 8026b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8026b3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8026b40:	687b      	ldr	r3, [r7, #4]
 8026b42:	681b      	ldr	r3, [r3, #0]
 8026b44:	6899      	ldr	r1, [r3, #8]
 8026b46:	687b      	ldr	r3, [r7, #4]
 8026b48:	695b      	ldr	r3, [r3, #20]
 8026b4a:	029a      	lsls	r2, r3, #10
 8026b4c:	687b      	ldr	r3, [r7, #4]
 8026b4e:	681b      	ldr	r3, [r3, #0]
 8026b50:	430a      	orrs	r2, r1
 8026b52:	609a      	str	r2, [r3, #8]
}
 8026b54:	bf00      	nop
 8026b56:	3714      	adds	r7, #20
 8026b58:	46bd      	mov	sp, r7
 8026b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b5e:	4770      	bx	lr
 8026b60:	40012300 	.word	0x40012300
 8026b64:	0f000001 	.word	0x0f000001

08026b68 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026b68:	b580      	push	{r7, lr}
 8026b6a:	b084      	sub	sp, #16
 8026b6c:	af00      	add	r7, sp, #0
 8026b6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026b70:	687b      	ldr	r3, [r7, #4]
 8026b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026b74:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8026b76:	68fb      	ldr	r3, [r7, #12]
 8026b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8026b7e:	2b00      	cmp	r3, #0
 8026b80:	d13c      	bne.n	8026bfc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8026b82:	68fb      	ldr	r3, [r7, #12]
 8026b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8026b8a:	68fb      	ldr	r3, [r7, #12]
 8026b8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8026b8e:	68fb      	ldr	r3, [r7, #12]
 8026b90:	681b      	ldr	r3, [r3, #0]
 8026b92:	689b      	ldr	r3, [r3, #8]
 8026b94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8026b98:	2b00      	cmp	r3, #0
 8026b9a:	d12b      	bne.n	8026bf4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8026b9c:	68fb      	ldr	r3, [r7, #12]
 8026b9e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8026ba0:	2b00      	cmp	r3, #0
 8026ba2:	d127      	bne.n	8026bf4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8026ba4:	68fb      	ldr	r3, [r7, #12]
 8026ba6:	681b      	ldr	r3, [r3, #0]
 8026ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026baa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8026bae:	2b00      	cmp	r3, #0
 8026bb0:	d006      	beq.n	8026bc0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8026bb2:	68fb      	ldr	r3, [r7, #12]
 8026bb4:	681b      	ldr	r3, [r3, #0]
 8026bb6:	689b      	ldr	r3, [r3, #8]
 8026bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8026bbc:	2b00      	cmp	r3, #0
 8026bbe:	d119      	bne.n	8026bf4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8026bc0:	68fb      	ldr	r3, [r7, #12]
 8026bc2:	681b      	ldr	r3, [r3, #0]
 8026bc4:	685a      	ldr	r2, [r3, #4]
 8026bc6:	68fb      	ldr	r3, [r7, #12]
 8026bc8:	681b      	ldr	r3, [r3, #0]
 8026bca:	f022 0220 	bic.w	r2, r2, #32
 8026bce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8026bd0:	68fb      	ldr	r3, [r7, #12]
 8026bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026bd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8026bd8:	68fb      	ldr	r3, [r7, #12]
 8026bda:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8026bdc:	68fb      	ldr	r3, [r7, #12]
 8026bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026be4:	2b00      	cmp	r3, #0
 8026be6:	d105      	bne.n	8026bf4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8026be8:	68fb      	ldr	r3, [r7, #12]
 8026bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026bec:	f043 0201 	orr.w	r2, r3, #1
 8026bf0:	68fb      	ldr	r3, [r7, #12]
 8026bf2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8026bf4:	68f8      	ldr	r0, [r7, #12]
 8026bf6:	f7ff fd7b 	bl	80266f0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8026bfa:	e00e      	b.n	8026c1a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8026bfc:	68fb      	ldr	r3, [r7, #12]
 8026bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026c00:	f003 0310 	and.w	r3, r3, #16
 8026c04:	2b00      	cmp	r3, #0
 8026c06:	d003      	beq.n	8026c10 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8026c08:	68f8      	ldr	r0, [r7, #12]
 8026c0a:	f7ff fd85 	bl	8026718 <HAL_ADC_ErrorCallback>
}
 8026c0e:	e004      	b.n	8026c1a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8026c10:	68fb      	ldr	r3, [r7, #12]
 8026c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8026c16:	6878      	ldr	r0, [r7, #4]
 8026c18:	4798      	blx	r3
}
 8026c1a:	bf00      	nop
 8026c1c:	3710      	adds	r7, #16
 8026c1e:	46bd      	mov	sp, r7
 8026c20:	bd80      	pop	{r7, pc}

08026c22 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026c22:	b580      	push	{r7, lr}
 8026c24:	b084      	sub	sp, #16
 8026c26:	af00      	add	r7, sp, #0
 8026c28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026c2a:	687b      	ldr	r3, [r7, #4]
 8026c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026c2e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8026c30:	68f8      	ldr	r0, [r7, #12]
 8026c32:	f7ff fd67 	bl	8026704 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026c36:	bf00      	nop
 8026c38:	3710      	adds	r7, #16
 8026c3a:	46bd      	mov	sp, r7
 8026c3c:	bd80      	pop	{r7, pc}

08026c3e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8026c3e:	b580      	push	{r7, lr}
 8026c40:	b084      	sub	sp, #16
 8026c42:	af00      	add	r7, sp, #0
 8026c44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026c46:	687b      	ldr	r3, [r7, #4]
 8026c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026c4a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8026c4c:	68fb      	ldr	r3, [r7, #12]
 8026c4e:	2240      	movs	r2, #64	; 0x40
 8026c50:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8026c52:	68fb      	ldr	r3, [r7, #12]
 8026c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026c56:	f043 0204 	orr.w	r2, r3, #4
 8026c5a:	68fb      	ldr	r3, [r7, #12]
 8026c5c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8026c5e:	68f8      	ldr	r0, [r7, #12]
 8026c60:	f7ff fd5a 	bl	8026718 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026c64:	bf00      	nop
 8026c66:	3710      	adds	r7, #16
 8026c68:	46bd      	mov	sp, r7
 8026c6a:	bd80      	pop	{r7, pc}

08026c6c <__NVIC_SetPriorityGrouping>:
{
 8026c6c:	b480      	push	{r7}
 8026c6e:	b085      	sub	sp, #20
 8026c70:	af00      	add	r7, sp, #0
 8026c72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8026c74:	687b      	ldr	r3, [r7, #4]
 8026c76:	f003 0307 	and.w	r3, r3, #7
 8026c7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8026c7c:	4b0c      	ldr	r3, [pc, #48]	; (8026cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8026c7e:	68db      	ldr	r3, [r3, #12]
 8026c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8026c82:	68ba      	ldr	r2, [r7, #8]
 8026c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8026c88:	4013      	ands	r3, r2
 8026c8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8026c8c:	68fb      	ldr	r3, [r7, #12]
 8026c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8026c90:	68bb      	ldr	r3, [r7, #8]
 8026c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8026c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8026c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8026c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8026c9e:	4a04      	ldr	r2, [pc, #16]	; (8026cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8026ca0:	68bb      	ldr	r3, [r7, #8]
 8026ca2:	60d3      	str	r3, [r2, #12]
}
 8026ca4:	bf00      	nop
 8026ca6:	3714      	adds	r7, #20
 8026ca8:	46bd      	mov	sp, r7
 8026caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cae:	4770      	bx	lr
 8026cb0:	e000ed00 	.word	0xe000ed00

08026cb4 <__NVIC_GetPriorityGrouping>:
{
 8026cb4:	b480      	push	{r7}
 8026cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8026cb8:	4b04      	ldr	r3, [pc, #16]	; (8026ccc <__NVIC_GetPriorityGrouping+0x18>)
 8026cba:	68db      	ldr	r3, [r3, #12]
 8026cbc:	0a1b      	lsrs	r3, r3, #8
 8026cbe:	f003 0307 	and.w	r3, r3, #7
}
 8026cc2:	4618      	mov	r0, r3
 8026cc4:	46bd      	mov	sp, r7
 8026cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cca:	4770      	bx	lr
 8026ccc:	e000ed00 	.word	0xe000ed00

08026cd0 <__NVIC_EnableIRQ>:
{
 8026cd0:	b480      	push	{r7}
 8026cd2:	b083      	sub	sp, #12
 8026cd4:	af00      	add	r7, sp, #0
 8026cd6:	4603      	mov	r3, r0
 8026cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026cde:	2b00      	cmp	r3, #0
 8026ce0:	db0b      	blt.n	8026cfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8026ce2:	79fb      	ldrb	r3, [r7, #7]
 8026ce4:	f003 021f 	and.w	r2, r3, #31
 8026ce8:	4907      	ldr	r1, [pc, #28]	; (8026d08 <__NVIC_EnableIRQ+0x38>)
 8026cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026cee:	095b      	lsrs	r3, r3, #5
 8026cf0:	2001      	movs	r0, #1
 8026cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8026cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8026cfa:	bf00      	nop
 8026cfc:	370c      	adds	r7, #12
 8026cfe:	46bd      	mov	sp, r7
 8026d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d04:	4770      	bx	lr
 8026d06:	bf00      	nop
 8026d08:	e000e100 	.word	0xe000e100

08026d0c <__NVIC_SetPriority>:
{
 8026d0c:	b480      	push	{r7}
 8026d0e:	b083      	sub	sp, #12
 8026d10:	af00      	add	r7, sp, #0
 8026d12:	4603      	mov	r3, r0
 8026d14:	6039      	str	r1, [r7, #0]
 8026d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026d1c:	2b00      	cmp	r3, #0
 8026d1e:	db0a      	blt.n	8026d36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026d20:	683b      	ldr	r3, [r7, #0]
 8026d22:	b2da      	uxtb	r2, r3
 8026d24:	490c      	ldr	r1, [pc, #48]	; (8026d58 <__NVIC_SetPriority+0x4c>)
 8026d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026d2a:	0112      	lsls	r2, r2, #4
 8026d2c:	b2d2      	uxtb	r2, r2
 8026d2e:	440b      	add	r3, r1
 8026d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8026d34:	e00a      	b.n	8026d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026d36:	683b      	ldr	r3, [r7, #0]
 8026d38:	b2da      	uxtb	r2, r3
 8026d3a:	4908      	ldr	r1, [pc, #32]	; (8026d5c <__NVIC_SetPriority+0x50>)
 8026d3c:	79fb      	ldrb	r3, [r7, #7]
 8026d3e:	f003 030f 	and.w	r3, r3, #15
 8026d42:	3b04      	subs	r3, #4
 8026d44:	0112      	lsls	r2, r2, #4
 8026d46:	b2d2      	uxtb	r2, r2
 8026d48:	440b      	add	r3, r1
 8026d4a:	761a      	strb	r2, [r3, #24]
}
 8026d4c:	bf00      	nop
 8026d4e:	370c      	adds	r7, #12
 8026d50:	46bd      	mov	sp, r7
 8026d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d56:	4770      	bx	lr
 8026d58:	e000e100 	.word	0xe000e100
 8026d5c:	e000ed00 	.word	0xe000ed00

08026d60 <NVIC_EncodePriority>:
{
 8026d60:	b480      	push	{r7}
 8026d62:	b089      	sub	sp, #36	; 0x24
 8026d64:	af00      	add	r7, sp, #0
 8026d66:	60f8      	str	r0, [r7, #12]
 8026d68:	60b9      	str	r1, [r7, #8]
 8026d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8026d6c:	68fb      	ldr	r3, [r7, #12]
 8026d6e:	f003 0307 	and.w	r3, r3, #7
 8026d72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8026d74:	69fb      	ldr	r3, [r7, #28]
 8026d76:	f1c3 0307 	rsb	r3, r3, #7
 8026d7a:	2b04      	cmp	r3, #4
 8026d7c:	bf28      	it	cs
 8026d7e:	2304      	movcs	r3, #4
 8026d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8026d82:	69fb      	ldr	r3, [r7, #28]
 8026d84:	3304      	adds	r3, #4
 8026d86:	2b06      	cmp	r3, #6
 8026d88:	d902      	bls.n	8026d90 <NVIC_EncodePriority+0x30>
 8026d8a:	69fb      	ldr	r3, [r7, #28]
 8026d8c:	3b03      	subs	r3, #3
 8026d8e:	e000      	b.n	8026d92 <NVIC_EncodePriority+0x32>
 8026d90:	2300      	movs	r3, #0
 8026d92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026d94:	f04f 32ff 	mov.w	r2, #4294967295
 8026d98:	69bb      	ldr	r3, [r7, #24]
 8026d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8026d9e:	43da      	mvns	r2, r3
 8026da0:	68bb      	ldr	r3, [r7, #8]
 8026da2:	401a      	ands	r2, r3
 8026da4:	697b      	ldr	r3, [r7, #20]
 8026da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8026da8:	f04f 31ff 	mov.w	r1, #4294967295
 8026dac:	697b      	ldr	r3, [r7, #20]
 8026dae:	fa01 f303 	lsl.w	r3, r1, r3
 8026db2:	43d9      	mvns	r1, r3
 8026db4:	687b      	ldr	r3, [r7, #4]
 8026db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026db8:	4313      	orrs	r3, r2
}
 8026dba:	4618      	mov	r0, r3
 8026dbc:	3724      	adds	r7, #36	; 0x24
 8026dbe:	46bd      	mov	sp, r7
 8026dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026dc4:	4770      	bx	lr
	...

08026dc8 <SysTick_Config>:
{
 8026dc8:	b580      	push	{r7, lr}
 8026dca:	b082      	sub	sp, #8
 8026dcc:	af00      	add	r7, sp, #0
 8026dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8026dd0:	687b      	ldr	r3, [r7, #4]
 8026dd2:	3b01      	subs	r3, #1
 8026dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8026dd8:	d301      	bcc.n	8026dde <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8026dda:	2301      	movs	r3, #1
 8026ddc:	e00f      	b.n	8026dfe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8026dde:	4a0a      	ldr	r2, [pc, #40]	; (8026e08 <SysTick_Config+0x40>)
 8026de0:	687b      	ldr	r3, [r7, #4]
 8026de2:	3b01      	subs	r3, #1
 8026de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8026de6:	210f      	movs	r1, #15
 8026de8:	f04f 30ff 	mov.w	r0, #4294967295
 8026dec:	f7ff ff8e 	bl	8026d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8026df0:	4b05      	ldr	r3, [pc, #20]	; (8026e08 <SysTick_Config+0x40>)
 8026df2:	2200      	movs	r2, #0
 8026df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8026df6:	4b04      	ldr	r3, [pc, #16]	; (8026e08 <SysTick_Config+0x40>)
 8026df8:	2207      	movs	r2, #7
 8026dfa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8026dfc:	2300      	movs	r3, #0
}
 8026dfe:	4618      	mov	r0, r3
 8026e00:	3708      	adds	r7, #8
 8026e02:	46bd      	mov	sp, r7
 8026e04:	bd80      	pop	{r7, pc}
 8026e06:	bf00      	nop
 8026e08:	e000e010 	.word	0xe000e010

08026e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026e0c:	b580      	push	{r7, lr}
 8026e0e:	b082      	sub	sp, #8
 8026e10:	af00      	add	r7, sp, #0
 8026e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8026e14:	6878      	ldr	r0, [r7, #4]
 8026e16:	f7ff ff29 	bl	8026c6c <__NVIC_SetPriorityGrouping>
}
 8026e1a:	bf00      	nop
 8026e1c:	3708      	adds	r7, #8
 8026e1e:	46bd      	mov	sp, r7
 8026e20:	bd80      	pop	{r7, pc}

08026e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8026e22:	b580      	push	{r7, lr}
 8026e24:	b086      	sub	sp, #24
 8026e26:	af00      	add	r7, sp, #0
 8026e28:	4603      	mov	r3, r0
 8026e2a:	60b9      	str	r1, [r7, #8]
 8026e2c:	607a      	str	r2, [r7, #4]
 8026e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8026e30:	2300      	movs	r3, #0
 8026e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8026e34:	f7ff ff3e 	bl	8026cb4 <__NVIC_GetPriorityGrouping>
 8026e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8026e3a:	687a      	ldr	r2, [r7, #4]
 8026e3c:	68b9      	ldr	r1, [r7, #8]
 8026e3e:	6978      	ldr	r0, [r7, #20]
 8026e40:	f7ff ff8e 	bl	8026d60 <NVIC_EncodePriority>
 8026e44:	4602      	mov	r2, r0
 8026e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8026e4a:	4611      	mov	r1, r2
 8026e4c:	4618      	mov	r0, r3
 8026e4e:	f7ff ff5d 	bl	8026d0c <__NVIC_SetPriority>
}
 8026e52:	bf00      	nop
 8026e54:	3718      	adds	r7, #24
 8026e56:	46bd      	mov	sp, r7
 8026e58:	bd80      	pop	{r7, pc}

08026e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026e5a:	b580      	push	{r7, lr}
 8026e5c:	b082      	sub	sp, #8
 8026e5e:	af00      	add	r7, sp, #0
 8026e60:	4603      	mov	r3, r0
 8026e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8026e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026e68:	4618      	mov	r0, r3
 8026e6a:	f7ff ff31 	bl	8026cd0 <__NVIC_EnableIRQ>
}
 8026e6e:	bf00      	nop
 8026e70:	3708      	adds	r7, #8
 8026e72:	46bd      	mov	sp, r7
 8026e74:	bd80      	pop	{r7, pc}

08026e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8026e76:	b580      	push	{r7, lr}
 8026e78:	b082      	sub	sp, #8
 8026e7a:	af00      	add	r7, sp, #0
 8026e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8026e7e:	6878      	ldr	r0, [r7, #4]
 8026e80:	f7ff ffa2 	bl	8026dc8 <SysTick_Config>
 8026e84:	4603      	mov	r3, r0
}
 8026e86:	4618      	mov	r0, r3
 8026e88:	3708      	adds	r7, #8
 8026e8a:	46bd      	mov	sp, r7
 8026e8c:	bd80      	pop	{r7, pc}
	...

08026e90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8026e90:	b580      	push	{r7, lr}
 8026e92:	b086      	sub	sp, #24
 8026e94:	af00      	add	r7, sp, #0
 8026e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8026e98:	2300      	movs	r3, #0
 8026e9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8026e9c:	f7ff fac4 	bl	8026428 <HAL_GetTick>
 8026ea0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8026ea2:	687b      	ldr	r3, [r7, #4]
 8026ea4:	2b00      	cmp	r3, #0
 8026ea6:	d101      	bne.n	8026eac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8026ea8:	2301      	movs	r3, #1
 8026eaa:	e099      	b.n	8026fe0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8026eac:	687b      	ldr	r3, [r7, #4]
 8026eae:	2200      	movs	r2, #0
 8026eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8026eb4:	687b      	ldr	r3, [r7, #4]
 8026eb6:	2202      	movs	r2, #2
 8026eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8026ebc:	687b      	ldr	r3, [r7, #4]
 8026ebe:	681b      	ldr	r3, [r3, #0]
 8026ec0:	681a      	ldr	r2, [r3, #0]
 8026ec2:	687b      	ldr	r3, [r7, #4]
 8026ec4:	681b      	ldr	r3, [r3, #0]
 8026ec6:	f022 0201 	bic.w	r2, r2, #1
 8026eca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026ecc:	e00f      	b.n	8026eee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8026ece:	f7ff faab 	bl	8026428 <HAL_GetTick>
 8026ed2:	4602      	mov	r2, r0
 8026ed4:	693b      	ldr	r3, [r7, #16]
 8026ed6:	1ad3      	subs	r3, r2, r3
 8026ed8:	2b05      	cmp	r3, #5
 8026eda:	d908      	bls.n	8026eee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8026edc:	687b      	ldr	r3, [r7, #4]
 8026ede:	2220      	movs	r2, #32
 8026ee0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8026ee2:	687b      	ldr	r3, [r7, #4]
 8026ee4:	2203      	movs	r2, #3
 8026ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8026eea:	2303      	movs	r3, #3
 8026eec:	e078      	b.n	8026fe0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026eee:	687b      	ldr	r3, [r7, #4]
 8026ef0:	681b      	ldr	r3, [r3, #0]
 8026ef2:	681b      	ldr	r3, [r3, #0]
 8026ef4:	f003 0301 	and.w	r3, r3, #1
 8026ef8:	2b00      	cmp	r3, #0
 8026efa:	d1e8      	bne.n	8026ece <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8026efc:	687b      	ldr	r3, [r7, #4]
 8026efe:	681b      	ldr	r3, [r3, #0]
 8026f00:	681b      	ldr	r3, [r3, #0]
 8026f02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8026f04:	697a      	ldr	r2, [r7, #20]
 8026f06:	4b38      	ldr	r3, [pc, #224]	; (8026fe8 <HAL_DMA_Init+0x158>)
 8026f08:	4013      	ands	r3, r2
 8026f0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026f0c:	687b      	ldr	r3, [r7, #4]
 8026f0e:	685a      	ldr	r2, [r3, #4]
 8026f10:	687b      	ldr	r3, [r7, #4]
 8026f12:	689b      	ldr	r3, [r3, #8]
 8026f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026f16:	687b      	ldr	r3, [r7, #4]
 8026f18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026f1c:	687b      	ldr	r3, [r7, #4]
 8026f1e:	691b      	ldr	r3, [r3, #16]
 8026f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026f22:	687b      	ldr	r3, [r7, #4]
 8026f24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026f28:	687b      	ldr	r3, [r7, #4]
 8026f2a:	699b      	ldr	r3, [r3, #24]
 8026f2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026f2e:	687b      	ldr	r3, [r7, #4]
 8026f30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026f32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026f34:	687b      	ldr	r3, [r7, #4]
 8026f36:	6a1b      	ldr	r3, [r3, #32]
 8026f38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026f3a:	697a      	ldr	r2, [r7, #20]
 8026f3c:	4313      	orrs	r3, r2
 8026f3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026f40:	687b      	ldr	r3, [r7, #4]
 8026f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026f44:	2b04      	cmp	r3, #4
 8026f46:	d107      	bne.n	8026f58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8026f48:	687b      	ldr	r3, [r7, #4]
 8026f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026f4c:	687b      	ldr	r3, [r7, #4]
 8026f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026f50:	4313      	orrs	r3, r2
 8026f52:	697a      	ldr	r2, [r7, #20]
 8026f54:	4313      	orrs	r3, r2
 8026f56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8026f58:	687b      	ldr	r3, [r7, #4]
 8026f5a:	681b      	ldr	r3, [r3, #0]
 8026f5c:	697a      	ldr	r2, [r7, #20]
 8026f5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8026f60:	687b      	ldr	r3, [r7, #4]
 8026f62:	681b      	ldr	r3, [r3, #0]
 8026f64:	695b      	ldr	r3, [r3, #20]
 8026f66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8026f68:	697b      	ldr	r3, [r7, #20]
 8026f6a:	f023 0307 	bic.w	r3, r3, #7
 8026f6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8026f70:	687b      	ldr	r3, [r7, #4]
 8026f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026f74:	697a      	ldr	r2, [r7, #20]
 8026f76:	4313      	orrs	r3, r2
 8026f78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026f7a:	687b      	ldr	r3, [r7, #4]
 8026f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026f7e:	2b04      	cmp	r3, #4
 8026f80:	d117      	bne.n	8026fb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8026f82:	687b      	ldr	r3, [r7, #4]
 8026f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026f86:	697a      	ldr	r2, [r7, #20]
 8026f88:	4313      	orrs	r3, r2
 8026f8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8026f8c:	687b      	ldr	r3, [r7, #4]
 8026f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026f90:	2b00      	cmp	r3, #0
 8026f92:	d00e      	beq.n	8026fb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8026f94:	6878      	ldr	r0, [r7, #4]
 8026f96:	f000 fa6f 	bl	8027478 <DMA_CheckFifoParam>
 8026f9a:	4603      	mov	r3, r0
 8026f9c:	2b00      	cmp	r3, #0
 8026f9e:	d008      	beq.n	8026fb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8026fa0:	687b      	ldr	r3, [r7, #4]
 8026fa2:	2240      	movs	r2, #64	; 0x40
 8026fa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8026fa6:	687b      	ldr	r3, [r7, #4]
 8026fa8:	2201      	movs	r2, #1
 8026faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8026fae:	2301      	movs	r3, #1
 8026fb0:	e016      	b.n	8026fe0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8026fb2:	687b      	ldr	r3, [r7, #4]
 8026fb4:	681b      	ldr	r3, [r3, #0]
 8026fb6:	697a      	ldr	r2, [r7, #20]
 8026fb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8026fba:	6878      	ldr	r0, [r7, #4]
 8026fbc:	f000 fa26 	bl	802740c <DMA_CalcBaseAndBitshift>
 8026fc0:	4603      	mov	r3, r0
 8026fc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026fc4:	687b      	ldr	r3, [r7, #4]
 8026fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026fc8:	223f      	movs	r2, #63	; 0x3f
 8026fca:	409a      	lsls	r2, r3
 8026fcc:	68fb      	ldr	r3, [r7, #12]
 8026fce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8026fd0:	687b      	ldr	r3, [r7, #4]
 8026fd2:	2200      	movs	r2, #0
 8026fd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8026fd6:	687b      	ldr	r3, [r7, #4]
 8026fd8:	2201      	movs	r2, #1
 8026fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8026fde:	2300      	movs	r3, #0
}
 8026fe0:	4618      	mov	r0, r3
 8026fe2:	3718      	adds	r7, #24
 8026fe4:	46bd      	mov	sp, r7
 8026fe6:	bd80      	pop	{r7, pc}
 8026fe8:	f010803f 	.word	0xf010803f

08026fec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8026fec:	b580      	push	{r7, lr}
 8026fee:	b086      	sub	sp, #24
 8026ff0:	af00      	add	r7, sp, #0
 8026ff2:	60f8      	str	r0, [r7, #12]
 8026ff4:	60b9      	str	r1, [r7, #8]
 8026ff6:	607a      	str	r2, [r7, #4]
 8026ff8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8026ffa:	2300      	movs	r3, #0
 8026ffc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8026ffe:	68fb      	ldr	r3, [r7, #12]
 8027000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027002:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8027004:	68fb      	ldr	r3, [r7, #12]
 8027006:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802700a:	2b01      	cmp	r3, #1
 802700c:	d101      	bne.n	8027012 <HAL_DMA_Start_IT+0x26>
 802700e:	2302      	movs	r3, #2
 8027010:	e040      	b.n	8027094 <HAL_DMA_Start_IT+0xa8>
 8027012:	68fb      	ldr	r3, [r7, #12]
 8027014:	2201      	movs	r2, #1
 8027016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 802701a:	68fb      	ldr	r3, [r7, #12]
 802701c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8027020:	b2db      	uxtb	r3, r3
 8027022:	2b01      	cmp	r3, #1
 8027024:	d12f      	bne.n	8027086 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8027026:	68fb      	ldr	r3, [r7, #12]
 8027028:	2202      	movs	r2, #2
 802702a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802702e:	68fb      	ldr	r3, [r7, #12]
 8027030:	2200      	movs	r2, #0
 8027032:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8027034:	683b      	ldr	r3, [r7, #0]
 8027036:	687a      	ldr	r2, [r7, #4]
 8027038:	68b9      	ldr	r1, [r7, #8]
 802703a:	68f8      	ldr	r0, [r7, #12]
 802703c:	f000 f9b8 	bl	80273b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8027040:	68fb      	ldr	r3, [r7, #12]
 8027042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027044:	223f      	movs	r2, #63	; 0x3f
 8027046:	409a      	lsls	r2, r3
 8027048:	693b      	ldr	r3, [r7, #16]
 802704a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 802704c:	68fb      	ldr	r3, [r7, #12]
 802704e:	681b      	ldr	r3, [r3, #0]
 8027050:	681a      	ldr	r2, [r3, #0]
 8027052:	68fb      	ldr	r3, [r7, #12]
 8027054:	681b      	ldr	r3, [r3, #0]
 8027056:	f042 0216 	orr.w	r2, r2, #22
 802705a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 802705c:	68fb      	ldr	r3, [r7, #12]
 802705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027060:	2b00      	cmp	r3, #0
 8027062:	d007      	beq.n	8027074 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8027064:	68fb      	ldr	r3, [r7, #12]
 8027066:	681b      	ldr	r3, [r3, #0]
 8027068:	681a      	ldr	r2, [r3, #0]
 802706a:	68fb      	ldr	r3, [r7, #12]
 802706c:	681b      	ldr	r3, [r3, #0]
 802706e:	f042 0208 	orr.w	r2, r2, #8
 8027072:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8027074:	68fb      	ldr	r3, [r7, #12]
 8027076:	681b      	ldr	r3, [r3, #0]
 8027078:	681a      	ldr	r2, [r3, #0]
 802707a:	68fb      	ldr	r3, [r7, #12]
 802707c:	681b      	ldr	r3, [r3, #0]
 802707e:	f042 0201 	orr.w	r2, r2, #1
 8027082:	601a      	str	r2, [r3, #0]
 8027084:	e005      	b.n	8027092 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8027086:	68fb      	ldr	r3, [r7, #12]
 8027088:	2200      	movs	r2, #0
 802708a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 802708e:	2302      	movs	r3, #2
 8027090:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8027092:	7dfb      	ldrb	r3, [r7, #23]
}
 8027094:	4618      	mov	r0, r3
 8027096:	3718      	adds	r7, #24
 8027098:	46bd      	mov	sp, r7
 802709a:	bd80      	pop	{r7, pc}

0802709c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802709c:	b580      	push	{r7, lr}
 802709e:	b086      	sub	sp, #24
 80270a0:	af00      	add	r7, sp, #0
 80270a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80270a4:	2300      	movs	r3, #0
 80270a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80270a8:	4b92      	ldr	r3, [pc, #584]	; (80272f4 <HAL_DMA_IRQHandler+0x258>)
 80270aa:	681b      	ldr	r3, [r3, #0]
 80270ac:	4a92      	ldr	r2, [pc, #584]	; (80272f8 <HAL_DMA_IRQHandler+0x25c>)
 80270ae:	fba2 2303 	umull	r2, r3, r2, r3
 80270b2:	0a9b      	lsrs	r3, r3, #10
 80270b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80270b6:	687b      	ldr	r3, [r7, #4]
 80270b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80270ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80270bc:	693b      	ldr	r3, [r7, #16]
 80270be:	681b      	ldr	r3, [r3, #0]
 80270c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80270c2:	687b      	ldr	r3, [r7, #4]
 80270c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80270c6:	2208      	movs	r2, #8
 80270c8:	409a      	lsls	r2, r3
 80270ca:	68fb      	ldr	r3, [r7, #12]
 80270cc:	4013      	ands	r3, r2
 80270ce:	2b00      	cmp	r3, #0
 80270d0:	d01a      	beq.n	8027108 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80270d2:	687b      	ldr	r3, [r7, #4]
 80270d4:	681b      	ldr	r3, [r3, #0]
 80270d6:	681b      	ldr	r3, [r3, #0]
 80270d8:	f003 0304 	and.w	r3, r3, #4
 80270dc:	2b00      	cmp	r3, #0
 80270de:	d013      	beq.n	8027108 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80270e0:	687b      	ldr	r3, [r7, #4]
 80270e2:	681b      	ldr	r3, [r3, #0]
 80270e4:	681a      	ldr	r2, [r3, #0]
 80270e6:	687b      	ldr	r3, [r7, #4]
 80270e8:	681b      	ldr	r3, [r3, #0]
 80270ea:	f022 0204 	bic.w	r2, r2, #4
 80270ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80270f0:	687b      	ldr	r3, [r7, #4]
 80270f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80270f4:	2208      	movs	r2, #8
 80270f6:	409a      	lsls	r2, r3
 80270f8:	693b      	ldr	r3, [r7, #16]
 80270fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80270fc:	687b      	ldr	r3, [r7, #4]
 80270fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027100:	f043 0201 	orr.w	r2, r3, #1
 8027104:	687b      	ldr	r3, [r7, #4]
 8027106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8027108:	687b      	ldr	r3, [r7, #4]
 802710a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802710c:	2201      	movs	r2, #1
 802710e:	409a      	lsls	r2, r3
 8027110:	68fb      	ldr	r3, [r7, #12]
 8027112:	4013      	ands	r3, r2
 8027114:	2b00      	cmp	r3, #0
 8027116:	d012      	beq.n	802713e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8027118:	687b      	ldr	r3, [r7, #4]
 802711a:	681b      	ldr	r3, [r3, #0]
 802711c:	695b      	ldr	r3, [r3, #20]
 802711e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027122:	2b00      	cmp	r3, #0
 8027124:	d00b      	beq.n	802713e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8027126:	687b      	ldr	r3, [r7, #4]
 8027128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802712a:	2201      	movs	r2, #1
 802712c:	409a      	lsls	r2, r3
 802712e:	693b      	ldr	r3, [r7, #16]
 8027130:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8027132:	687b      	ldr	r3, [r7, #4]
 8027134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027136:	f043 0202 	orr.w	r2, r3, #2
 802713a:	687b      	ldr	r3, [r7, #4]
 802713c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 802713e:	687b      	ldr	r3, [r7, #4]
 8027140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027142:	2204      	movs	r2, #4
 8027144:	409a      	lsls	r2, r3
 8027146:	68fb      	ldr	r3, [r7, #12]
 8027148:	4013      	ands	r3, r2
 802714a:	2b00      	cmp	r3, #0
 802714c:	d012      	beq.n	8027174 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 802714e:	687b      	ldr	r3, [r7, #4]
 8027150:	681b      	ldr	r3, [r3, #0]
 8027152:	681b      	ldr	r3, [r3, #0]
 8027154:	f003 0302 	and.w	r3, r3, #2
 8027158:	2b00      	cmp	r3, #0
 802715a:	d00b      	beq.n	8027174 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 802715c:	687b      	ldr	r3, [r7, #4]
 802715e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027160:	2204      	movs	r2, #4
 8027162:	409a      	lsls	r2, r3
 8027164:	693b      	ldr	r3, [r7, #16]
 8027166:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8027168:	687b      	ldr	r3, [r7, #4]
 802716a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802716c:	f043 0204 	orr.w	r2, r3, #4
 8027170:	687b      	ldr	r3, [r7, #4]
 8027172:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8027174:	687b      	ldr	r3, [r7, #4]
 8027176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027178:	2210      	movs	r2, #16
 802717a:	409a      	lsls	r2, r3
 802717c:	68fb      	ldr	r3, [r7, #12]
 802717e:	4013      	ands	r3, r2
 8027180:	2b00      	cmp	r3, #0
 8027182:	d043      	beq.n	802720c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8027184:	687b      	ldr	r3, [r7, #4]
 8027186:	681b      	ldr	r3, [r3, #0]
 8027188:	681b      	ldr	r3, [r3, #0]
 802718a:	f003 0308 	and.w	r3, r3, #8
 802718e:	2b00      	cmp	r3, #0
 8027190:	d03c      	beq.n	802720c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8027192:	687b      	ldr	r3, [r7, #4]
 8027194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027196:	2210      	movs	r2, #16
 8027198:	409a      	lsls	r2, r3
 802719a:	693b      	ldr	r3, [r7, #16]
 802719c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802719e:	687b      	ldr	r3, [r7, #4]
 80271a0:	681b      	ldr	r3, [r3, #0]
 80271a2:	681b      	ldr	r3, [r3, #0]
 80271a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80271a8:	2b00      	cmp	r3, #0
 80271aa:	d018      	beq.n	80271de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80271ac:	687b      	ldr	r3, [r7, #4]
 80271ae:	681b      	ldr	r3, [r3, #0]
 80271b0:	681b      	ldr	r3, [r3, #0]
 80271b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80271b6:	2b00      	cmp	r3, #0
 80271b8:	d108      	bne.n	80271cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80271ba:	687b      	ldr	r3, [r7, #4]
 80271bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80271be:	2b00      	cmp	r3, #0
 80271c0:	d024      	beq.n	802720c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80271c2:	687b      	ldr	r3, [r7, #4]
 80271c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80271c6:	6878      	ldr	r0, [r7, #4]
 80271c8:	4798      	blx	r3
 80271ca:	e01f      	b.n	802720c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80271cc:	687b      	ldr	r3, [r7, #4]
 80271ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80271d0:	2b00      	cmp	r3, #0
 80271d2:	d01b      	beq.n	802720c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80271d4:	687b      	ldr	r3, [r7, #4]
 80271d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80271d8:	6878      	ldr	r0, [r7, #4]
 80271da:	4798      	blx	r3
 80271dc:	e016      	b.n	802720c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80271de:	687b      	ldr	r3, [r7, #4]
 80271e0:	681b      	ldr	r3, [r3, #0]
 80271e2:	681b      	ldr	r3, [r3, #0]
 80271e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80271e8:	2b00      	cmp	r3, #0
 80271ea:	d107      	bne.n	80271fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80271ec:	687b      	ldr	r3, [r7, #4]
 80271ee:	681b      	ldr	r3, [r3, #0]
 80271f0:	681a      	ldr	r2, [r3, #0]
 80271f2:	687b      	ldr	r3, [r7, #4]
 80271f4:	681b      	ldr	r3, [r3, #0]
 80271f6:	f022 0208 	bic.w	r2, r2, #8
 80271fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80271fc:	687b      	ldr	r3, [r7, #4]
 80271fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027200:	2b00      	cmp	r3, #0
 8027202:	d003      	beq.n	802720c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8027204:	687b      	ldr	r3, [r7, #4]
 8027206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027208:	6878      	ldr	r0, [r7, #4]
 802720a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 802720c:	687b      	ldr	r3, [r7, #4]
 802720e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027210:	2220      	movs	r2, #32
 8027212:	409a      	lsls	r2, r3
 8027214:	68fb      	ldr	r3, [r7, #12]
 8027216:	4013      	ands	r3, r2
 8027218:	2b00      	cmp	r3, #0
 802721a:	f000 808e 	beq.w	802733a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 802721e:	687b      	ldr	r3, [r7, #4]
 8027220:	681b      	ldr	r3, [r3, #0]
 8027222:	681b      	ldr	r3, [r3, #0]
 8027224:	f003 0310 	and.w	r3, r3, #16
 8027228:	2b00      	cmp	r3, #0
 802722a:	f000 8086 	beq.w	802733a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 802722e:	687b      	ldr	r3, [r7, #4]
 8027230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027232:	2220      	movs	r2, #32
 8027234:	409a      	lsls	r2, r3
 8027236:	693b      	ldr	r3, [r7, #16]
 8027238:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 802723a:	687b      	ldr	r3, [r7, #4]
 802723c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8027240:	b2db      	uxtb	r3, r3
 8027242:	2b05      	cmp	r3, #5
 8027244:	d136      	bne.n	80272b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8027246:	687b      	ldr	r3, [r7, #4]
 8027248:	681b      	ldr	r3, [r3, #0]
 802724a:	681a      	ldr	r2, [r3, #0]
 802724c:	687b      	ldr	r3, [r7, #4]
 802724e:	681b      	ldr	r3, [r3, #0]
 8027250:	f022 0216 	bic.w	r2, r2, #22
 8027254:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8027256:	687b      	ldr	r3, [r7, #4]
 8027258:	681b      	ldr	r3, [r3, #0]
 802725a:	695a      	ldr	r2, [r3, #20]
 802725c:	687b      	ldr	r3, [r7, #4]
 802725e:	681b      	ldr	r3, [r3, #0]
 8027260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8027264:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8027266:	687b      	ldr	r3, [r7, #4]
 8027268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802726a:	2b00      	cmp	r3, #0
 802726c:	d103      	bne.n	8027276 <HAL_DMA_IRQHandler+0x1da>
 802726e:	687b      	ldr	r3, [r7, #4]
 8027270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027272:	2b00      	cmp	r3, #0
 8027274:	d007      	beq.n	8027286 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8027276:	687b      	ldr	r3, [r7, #4]
 8027278:	681b      	ldr	r3, [r3, #0]
 802727a:	681a      	ldr	r2, [r3, #0]
 802727c:	687b      	ldr	r3, [r7, #4]
 802727e:	681b      	ldr	r3, [r3, #0]
 8027280:	f022 0208 	bic.w	r2, r2, #8
 8027284:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8027286:	687b      	ldr	r3, [r7, #4]
 8027288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802728a:	223f      	movs	r2, #63	; 0x3f
 802728c:	409a      	lsls	r2, r3
 802728e:	693b      	ldr	r3, [r7, #16]
 8027290:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8027292:	687b      	ldr	r3, [r7, #4]
 8027294:	2200      	movs	r2, #0
 8027296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802729a:	687b      	ldr	r3, [r7, #4]
 802729c:	2201      	movs	r2, #1
 802729e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80272a2:	687b      	ldr	r3, [r7, #4]
 80272a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80272a6:	2b00      	cmp	r3, #0
 80272a8:	d07d      	beq.n	80273a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80272aa:	687b      	ldr	r3, [r7, #4]
 80272ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80272ae:	6878      	ldr	r0, [r7, #4]
 80272b0:	4798      	blx	r3
        }
        return;
 80272b2:	e078      	b.n	80273a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80272b4:	687b      	ldr	r3, [r7, #4]
 80272b6:	681b      	ldr	r3, [r3, #0]
 80272b8:	681b      	ldr	r3, [r3, #0]
 80272ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80272be:	2b00      	cmp	r3, #0
 80272c0:	d01c      	beq.n	80272fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80272c2:	687b      	ldr	r3, [r7, #4]
 80272c4:	681b      	ldr	r3, [r3, #0]
 80272c6:	681b      	ldr	r3, [r3, #0]
 80272c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80272cc:	2b00      	cmp	r3, #0
 80272ce:	d108      	bne.n	80272e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80272d0:	687b      	ldr	r3, [r7, #4]
 80272d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80272d4:	2b00      	cmp	r3, #0
 80272d6:	d030      	beq.n	802733a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80272d8:	687b      	ldr	r3, [r7, #4]
 80272da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80272dc:	6878      	ldr	r0, [r7, #4]
 80272de:	4798      	blx	r3
 80272e0:	e02b      	b.n	802733a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80272e2:	687b      	ldr	r3, [r7, #4]
 80272e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80272e6:	2b00      	cmp	r3, #0
 80272e8:	d027      	beq.n	802733a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80272ea:	687b      	ldr	r3, [r7, #4]
 80272ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80272ee:	6878      	ldr	r0, [r7, #4]
 80272f0:	4798      	blx	r3
 80272f2:	e022      	b.n	802733a <HAL_DMA_IRQHandler+0x29e>
 80272f4:	20000004 	.word	0x20000004
 80272f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80272fc:	687b      	ldr	r3, [r7, #4]
 80272fe:	681b      	ldr	r3, [r3, #0]
 8027300:	681b      	ldr	r3, [r3, #0]
 8027302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027306:	2b00      	cmp	r3, #0
 8027308:	d10f      	bne.n	802732a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 802730a:	687b      	ldr	r3, [r7, #4]
 802730c:	681b      	ldr	r3, [r3, #0]
 802730e:	681a      	ldr	r2, [r3, #0]
 8027310:	687b      	ldr	r3, [r7, #4]
 8027312:	681b      	ldr	r3, [r3, #0]
 8027314:	f022 0210 	bic.w	r2, r2, #16
 8027318:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802731a:	687b      	ldr	r3, [r7, #4]
 802731c:	2200      	movs	r2, #0
 802731e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8027322:	687b      	ldr	r3, [r7, #4]
 8027324:	2201      	movs	r2, #1
 8027326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 802732a:	687b      	ldr	r3, [r7, #4]
 802732c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802732e:	2b00      	cmp	r3, #0
 8027330:	d003      	beq.n	802733a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8027332:	687b      	ldr	r3, [r7, #4]
 8027334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027336:	6878      	ldr	r0, [r7, #4]
 8027338:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802733a:	687b      	ldr	r3, [r7, #4]
 802733c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802733e:	2b00      	cmp	r3, #0
 8027340:	d032      	beq.n	80273a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8027342:	687b      	ldr	r3, [r7, #4]
 8027344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027346:	f003 0301 	and.w	r3, r3, #1
 802734a:	2b00      	cmp	r3, #0
 802734c:	d022      	beq.n	8027394 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 802734e:	687b      	ldr	r3, [r7, #4]
 8027350:	2205      	movs	r2, #5
 8027352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8027356:	687b      	ldr	r3, [r7, #4]
 8027358:	681b      	ldr	r3, [r3, #0]
 802735a:	681a      	ldr	r2, [r3, #0]
 802735c:	687b      	ldr	r3, [r7, #4]
 802735e:	681b      	ldr	r3, [r3, #0]
 8027360:	f022 0201 	bic.w	r2, r2, #1
 8027364:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8027366:	68bb      	ldr	r3, [r7, #8]
 8027368:	3301      	adds	r3, #1
 802736a:	60bb      	str	r3, [r7, #8]
 802736c:	697a      	ldr	r2, [r7, #20]
 802736e:	429a      	cmp	r2, r3
 8027370:	d307      	bcc.n	8027382 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8027372:	687b      	ldr	r3, [r7, #4]
 8027374:	681b      	ldr	r3, [r3, #0]
 8027376:	681b      	ldr	r3, [r3, #0]
 8027378:	f003 0301 	and.w	r3, r3, #1
 802737c:	2b00      	cmp	r3, #0
 802737e:	d1f2      	bne.n	8027366 <HAL_DMA_IRQHandler+0x2ca>
 8027380:	e000      	b.n	8027384 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8027382:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8027384:	687b      	ldr	r3, [r7, #4]
 8027386:	2200      	movs	r2, #0
 8027388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802738c:	687b      	ldr	r3, [r7, #4]
 802738e:	2201      	movs	r2, #1
 8027390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8027394:	687b      	ldr	r3, [r7, #4]
 8027396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027398:	2b00      	cmp	r3, #0
 802739a:	d005      	beq.n	80273a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 802739c:	687b      	ldr	r3, [r7, #4]
 802739e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80273a0:	6878      	ldr	r0, [r7, #4]
 80273a2:	4798      	blx	r3
 80273a4:	e000      	b.n	80273a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80273a6:	bf00      	nop
    }
  }
}
 80273a8:	3718      	adds	r7, #24
 80273aa:	46bd      	mov	sp, r7
 80273ac:	bd80      	pop	{r7, pc}
 80273ae:	bf00      	nop

080273b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80273b0:	b480      	push	{r7}
 80273b2:	b085      	sub	sp, #20
 80273b4:	af00      	add	r7, sp, #0
 80273b6:	60f8      	str	r0, [r7, #12]
 80273b8:	60b9      	str	r1, [r7, #8]
 80273ba:	607a      	str	r2, [r7, #4]
 80273bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80273be:	68fb      	ldr	r3, [r7, #12]
 80273c0:	681b      	ldr	r3, [r3, #0]
 80273c2:	681a      	ldr	r2, [r3, #0]
 80273c4:	68fb      	ldr	r3, [r7, #12]
 80273c6:	681b      	ldr	r3, [r3, #0]
 80273c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80273cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80273ce:	68fb      	ldr	r3, [r7, #12]
 80273d0:	681b      	ldr	r3, [r3, #0]
 80273d2:	683a      	ldr	r2, [r7, #0]
 80273d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80273d6:	68fb      	ldr	r3, [r7, #12]
 80273d8:	689b      	ldr	r3, [r3, #8]
 80273da:	2b40      	cmp	r3, #64	; 0x40
 80273dc:	d108      	bne.n	80273f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80273de:	68fb      	ldr	r3, [r7, #12]
 80273e0:	681b      	ldr	r3, [r3, #0]
 80273e2:	687a      	ldr	r2, [r7, #4]
 80273e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80273e6:	68fb      	ldr	r3, [r7, #12]
 80273e8:	681b      	ldr	r3, [r3, #0]
 80273ea:	68ba      	ldr	r2, [r7, #8]
 80273ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80273ee:	e007      	b.n	8027400 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80273f0:	68fb      	ldr	r3, [r7, #12]
 80273f2:	681b      	ldr	r3, [r3, #0]
 80273f4:	68ba      	ldr	r2, [r7, #8]
 80273f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80273f8:	68fb      	ldr	r3, [r7, #12]
 80273fa:	681b      	ldr	r3, [r3, #0]
 80273fc:	687a      	ldr	r2, [r7, #4]
 80273fe:	60da      	str	r2, [r3, #12]
}
 8027400:	bf00      	nop
 8027402:	3714      	adds	r7, #20
 8027404:	46bd      	mov	sp, r7
 8027406:	f85d 7b04 	ldr.w	r7, [sp], #4
 802740a:	4770      	bx	lr

0802740c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802740c:	b480      	push	{r7}
 802740e:	b085      	sub	sp, #20
 8027410:	af00      	add	r7, sp, #0
 8027412:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8027414:	687b      	ldr	r3, [r7, #4]
 8027416:	681b      	ldr	r3, [r3, #0]
 8027418:	b2db      	uxtb	r3, r3
 802741a:	3b10      	subs	r3, #16
 802741c:	4a14      	ldr	r2, [pc, #80]	; (8027470 <DMA_CalcBaseAndBitshift+0x64>)
 802741e:	fba2 2303 	umull	r2, r3, r2, r3
 8027422:	091b      	lsrs	r3, r3, #4
 8027424:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8027426:	4a13      	ldr	r2, [pc, #76]	; (8027474 <DMA_CalcBaseAndBitshift+0x68>)
 8027428:	68fb      	ldr	r3, [r7, #12]
 802742a:	4413      	add	r3, r2
 802742c:	781b      	ldrb	r3, [r3, #0]
 802742e:	461a      	mov	r2, r3
 8027430:	687b      	ldr	r3, [r7, #4]
 8027432:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8027434:	68fb      	ldr	r3, [r7, #12]
 8027436:	2b03      	cmp	r3, #3
 8027438:	d909      	bls.n	802744e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802743a:	687b      	ldr	r3, [r7, #4]
 802743c:	681b      	ldr	r3, [r3, #0]
 802743e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8027442:	f023 0303 	bic.w	r3, r3, #3
 8027446:	1d1a      	adds	r2, r3, #4
 8027448:	687b      	ldr	r3, [r7, #4]
 802744a:	659a      	str	r2, [r3, #88]	; 0x58
 802744c:	e007      	b.n	802745e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 802744e:	687b      	ldr	r3, [r7, #4]
 8027450:	681b      	ldr	r3, [r3, #0]
 8027452:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8027456:	f023 0303 	bic.w	r3, r3, #3
 802745a:	687a      	ldr	r2, [r7, #4]
 802745c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 802745e:	687b      	ldr	r3, [r7, #4]
 8027460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8027462:	4618      	mov	r0, r3
 8027464:	3714      	adds	r7, #20
 8027466:	46bd      	mov	sp, r7
 8027468:	f85d 7b04 	ldr.w	r7, [sp], #4
 802746c:	4770      	bx	lr
 802746e:	bf00      	nop
 8027470:	aaaaaaab 	.word	0xaaaaaaab
 8027474:	0802cd8c 	.word	0x0802cd8c

08027478 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8027478:	b480      	push	{r7}
 802747a:	b085      	sub	sp, #20
 802747c:	af00      	add	r7, sp, #0
 802747e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8027480:	2300      	movs	r3, #0
 8027482:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8027484:	687b      	ldr	r3, [r7, #4]
 8027486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027488:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802748a:	687b      	ldr	r3, [r7, #4]
 802748c:	699b      	ldr	r3, [r3, #24]
 802748e:	2b00      	cmp	r3, #0
 8027490:	d11f      	bne.n	80274d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8027492:	68bb      	ldr	r3, [r7, #8]
 8027494:	2b03      	cmp	r3, #3
 8027496:	d855      	bhi.n	8027544 <DMA_CheckFifoParam+0xcc>
 8027498:	a201      	add	r2, pc, #4	; (adr r2, 80274a0 <DMA_CheckFifoParam+0x28>)
 802749a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802749e:	bf00      	nop
 80274a0:	080274b1 	.word	0x080274b1
 80274a4:	080274c3 	.word	0x080274c3
 80274a8:	080274b1 	.word	0x080274b1
 80274ac:	08027545 	.word	0x08027545
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80274b0:	687b      	ldr	r3, [r7, #4]
 80274b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80274b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80274b8:	2b00      	cmp	r3, #0
 80274ba:	d045      	beq.n	8027548 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80274bc:	2301      	movs	r3, #1
 80274be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80274c0:	e042      	b.n	8027548 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80274c2:	687b      	ldr	r3, [r7, #4]
 80274c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80274c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80274ca:	d13f      	bne.n	802754c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80274cc:	2301      	movs	r3, #1
 80274ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80274d0:	e03c      	b.n	802754c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80274d2:	687b      	ldr	r3, [r7, #4]
 80274d4:	699b      	ldr	r3, [r3, #24]
 80274d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80274da:	d121      	bne.n	8027520 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80274dc:	68bb      	ldr	r3, [r7, #8]
 80274de:	2b03      	cmp	r3, #3
 80274e0:	d836      	bhi.n	8027550 <DMA_CheckFifoParam+0xd8>
 80274e2:	a201      	add	r2, pc, #4	; (adr r2, 80274e8 <DMA_CheckFifoParam+0x70>)
 80274e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80274e8:	080274f9 	.word	0x080274f9
 80274ec:	080274ff 	.word	0x080274ff
 80274f0:	080274f9 	.word	0x080274f9
 80274f4:	08027511 	.word	0x08027511
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80274f8:	2301      	movs	r3, #1
 80274fa:	73fb      	strb	r3, [r7, #15]
      break;
 80274fc:	e02f      	b.n	802755e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80274fe:	687b      	ldr	r3, [r7, #4]
 8027500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027506:	2b00      	cmp	r3, #0
 8027508:	d024      	beq.n	8027554 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 802750a:	2301      	movs	r3, #1
 802750c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802750e:	e021      	b.n	8027554 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8027510:	687b      	ldr	r3, [r7, #4]
 8027512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027514:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8027518:	d11e      	bne.n	8027558 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 802751a:	2301      	movs	r3, #1
 802751c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 802751e:	e01b      	b.n	8027558 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8027520:	68bb      	ldr	r3, [r7, #8]
 8027522:	2b02      	cmp	r3, #2
 8027524:	d902      	bls.n	802752c <DMA_CheckFifoParam+0xb4>
 8027526:	2b03      	cmp	r3, #3
 8027528:	d003      	beq.n	8027532 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 802752a:	e018      	b.n	802755e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 802752c:	2301      	movs	r3, #1
 802752e:	73fb      	strb	r3, [r7, #15]
      break;
 8027530:	e015      	b.n	802755e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8027532:	687b      	ldr	r3, [r7, #4]
 8027534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802753a:	2b00      	cmp	r3, #0
 802753c:	d00e      	beq.n	802755c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 802753e:	2301      	movs	r3, #1
 8027540:	73fb      	strb	r3, [r7, #15]
      break;
 8027542:	e00b      	b.n	802755c <DMA_CheckFifoParam+0xe4>
      break;
 8027544:	bf00      	nop
 8027546:	e00a      	b.n	802755e <DMA_CheckFifoParam+0xe6>
      break;
 8027548:	bf00      	nop
 802754a:	e008      	b.n	802755e <DMA_CheckFifoParam+0xe6>
      break;
 802754c:	bf00      	nop
 802754e:	e006      	b.n	802755e <DMA_CheckFifoParam+0xe6>
      break;
 8027550:	bf00      	nop
 8027552:	e004      	b.n	802755e <DMA_CheckFifoParam+0xe6>
      break;
 8027554:	bf00      	nop
 8027556:	e002      	b.n	802755e <DMA_CheckFifoParam+0xe6>
      break;   
 8027558:	bf00      	nop
 802755a:	e000      	b.n	802755e <DMA_CheckFifoParam+0xe6>
      break;
 802755c:	bf00      	nop
    }
  } 
  
  return status; 
 802755e:	7bfb      	ldrb	r3, [r7, #15]
}
 8027560:	4618      	mov	r0, r3
 8027562:	3714      	adds	r7, #20
 8027564:	46bd      	mov	sp, r7
 8027566:	f85d 7b04 	ldr.w	r7, [sp], #4
 802756a:	4770      	bx	lr

0802756c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 802756c:	b580      	push	{r7, lr}
 802756e:	b086      	sub	sp, #24
 8027570:	af00      	add	r7, sp, #0
 8027572:	60f8      	str	r0, [r7, #12]
 8027574:	60b9      	str	r1, [r7, #8]
 8027576:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 802757a:	2301      	movs	r3, #1
 802757c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802757e:	4b23      	ldr	r3, [pc, #140]	; (802760c <HAL_FLASH_Program+0xa0>)
 8027580:	7e1b      	ldrb	r3, [r3, #24]
 8027582:	2b01      	cmp	r3, #1
 8027584:	d101      	bne.n	802758a <HAL_FLASH_Program+0x1e>
 8027586:	2302      	movs	r3, #2
 8027588:	e03b      	b.n	8027602 <HAL_FLASH_Program+0x96>
 802758a:	4b20      	ldr	r3, [pc, #128]	; (802760c <HAL_FLASH_Program+0xa0>)
 802758c:	2201      	movs	r2, #1
 802758e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027590:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027594:	f000 f870 	bl	8027678 <FLASH_WaitForLastOperation>
 8027598:	4603      	mov	r3, r0
 802759a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 802759c:	7dfb      	ldrb	r3, [r7, #23]
 802759e:	2b00      	cmp	r3, #0
 80275a0:	d12b      	bne.n	80275fa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80275a2:	68fb      	ldr	r3, [r7, #12]
 80275a4:	2b00      	cmp	r3, #0
 80275a6:	d105      	bne.n	80275b4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80275a8:	783b      	ldrb	r3, [r7, #0]
 80275aa:	4619      	mov	r1, r3
 80275ac:	68b8      	ldr	r0, [r7, #8]
 80275ae:	f000 f919 	bl	80277e4 <FLASH_Program_Byte>
 80275b2:	e016      	b.n	80275e2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80275b4:	68fb      	ldr	r3, [r7, #12]
 80275b6:	2b01      	cmp	r3, #1
 80275b8:	d105      	bne.n	80275c6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80275ba:	883b      	ldrh	r3, [r7, #0]
 80275bc:	4619      	mov	r1, r3
 80275be:	68b8      	ldr	r0, [r7, #8]
 80275c0:	f000 f8ec 	bl	802779c <FLASH_Program_HalfWord>
 80275c4:	e00d      	b.n	80275e2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80275c6:	68fb      	ldr	r3, [r7, #12]
 80275c8:	2b02      	cmp	r3, #2
 80275ca:	d105      	bne.n	80275d8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80275cc:	683b      	ldr	r3, [r7, #0]
 80275ce:	4619      	mov	r1, r3
 80275d0:	68b8      	ldr	r0, [r7, #8]
 80275d2:	f000 f8c1 	bl	8027758 <FLASH_Program_Word>
 80275d6:	e004      	b.n	80275e2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80275d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80275dc:	68b8      	ldr	r0, [r7, #8]
 80275de:	f000 f88b 	bl	80276f8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80275e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80275e6:	f000 f847 	bl	8027678 <FLASH_WaitForLastOperation>
 80275ea:	4603      	mov	r3, r0
 80275ec:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80275ee:	4b08      	ldr	r3, [pc, #32]	; (8027610 <HAL_FLASH_Program+0xa4>)
 80275f0:	691b      	ldr	r3, [r3, #16]
 80275f2:	4a07      	ldr	r2, [pc, #28]	; (8027610 <HAL_FLASH_Program+0xa4>)
 80275f4:	f023 0301 	bic.w	r3, r3, #1
 80275f8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80275fa:	4b04      	ldr	r3, [pc, #16]	; (802760c <HAL_FLASH_Program+0xa0>)
 80275fc:	2200      	movs	r2, #0
 80275fe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8027600:	7dfb      	ldrb	r3, [r7, #23]
}
 8027602:	4618      	mov	r0, r3
 8027604:	3718      	adds	r7, #24
 8027606:	46bd      	mov	sp, r7
 8027608:	bd80      	pop	{r7, pc}
 802760a:	bf00      	nop
 802760c:	2001760c 	.word	0x2001760c
 8027610:	40023c00 	.word	0x40023c00

08027614 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8027614:	b480      	push	{r7}
 8027616:	b083      	sub	sp, #12
 8027618:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 802761a:	2300      	movs	r3, #0
 802761c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802761e:	4b0b      	ldr	r3, [pc, #44]	; (802764c <HAL_FLASH_Unlock+0x38>)
 8027620:	691b      	ldr	r3, [r3, #16]
 8027622:	2b00      	cmp	r3, #0
 8027624:	da0b      	bge.n	802763e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8027626:	4b09      	ldr	r3, [pc, #36]	; (802764c <HAL_FLASH_Unlock+0x38>)
 8027628:	4a09      	ldr	r2, [pc, #36]	; (8027650 <HAL_FLASH_Unlock+0x3c>)
 802762a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 802762c:	4b07      	ldr	r3, [pc, #28]	; (802764c <HAL_FLASH_Unlock+0x38>)
 802762e:	4a09      	ldr	r2, [pc, #36]	; (8027654 <HAL_FLASH_Unlock+0x40>)
 8027630:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8027632:	4b06      	ldr	r3, [pc, #24]	; (802764c <HAL_FLASH_Unlock+0x38>)
 8027634:	691b      	ldr	r3, [r3, #16]
 8027636:	2b00      	cmp	r3, #0
 8027638:	da01      	bge.n	802763e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 802763a:	2301      	movs	r3, #1
 802763c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 802763e:	79fb      	ldrb	r3, [r7, #7]
}
 8027640:	4618      	mov	r0, r3
 8027642:	370c      	adds	r7, #12
 8027644:	46bd      	mov	sp, r7
 8027646:	f85d 7b04 	ldr.w	r7, [sp], #4
 802764a:	4770      	bx	lr
 802764c:	40023c00 	.word	0x40023c00
 8027650:	45670123 	.word	0x45670123
 8027654:	cdef89ab 	.word	0xcdef89ab

08027658 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8027658:	b480      	push	{r7}
 802765a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 802765c:	4b05      	ldr	r3, [pc, #20]	; (8027674 <HAL_FLASH_Lock+0x1c>)
 802765e:	691b      	ldr	r3, [r3, #16]
 8027660:	4a04      	ldr	r2, [pc, #16]	; (8027674 <HAL_FLASH_Lock+0x1c>)
 8027662:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8027666:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8027668:	2300      	movs	r3, #0
}
 802766a:	4618      	mov	r0, r3
 802766c:	46bd      	mov	sp, r7
 802766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027672:	4770      	bx	lr
 8027674:	40023c00 	.word	0x40023c00

08027678 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8027678:	b580      	push	{r7, lr}
 802767a:	b084      	sub	sp, #16
 802767c:	af00      	add	r7, sp, #0
 802767e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027680:	2300      	movs	r3, #0
 8027682:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8027684:	4b1a      	ldr	r3, [pc, #104]	; (80276f0 <FLASH_WaitForLastOperation+0x78>)
 8027686:	2200      	movs	r2, #0
 8027688:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 802768a:	f7fe fecd 	bl	8026428 <HAL_GetTick>
 802768e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027690:	e010      	b.n	80276b4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8027692:	687b      	ldr	r3, [r7, #4]
 8027694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027698:	d00c      	beq.n	80276b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 802769a:	687b      	ldr	r3, [r7, #4]
 802769c:	2b00      	cmp	r3, #0
 802769e:	d007      	beq.n	80276b0 <FLASH_WaitForLastOperation+0x38>
 80276a0:	f7fe fec2 	bl	8026428 <HAL_GetTick>
 80276a4:	4602      	mov	r2, r0
 80276a6:	68fb      	ldr	r3, [r7, #12]
 80276a8:	1ad3      	subs	r3, r2, r3
 80276aa:	687a      	ldr	r2, [r7, #4]
 80276ac:	429a      	cmp	r2, r3
 80276ae:	d201      	bcs.n	80276b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80276b0:	2303      	movs	r3, #3
 80276b2:	e019      	b.n	80276e8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80276b4:	4b0f      	ldr	r3, [pc, #60]	; (80276f4 <FLASH_WaitForLastOperation+0x7c>)
 80276b6:	68db      	ldr	r3, [r3, #12]
 80276b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80276bc:	2b00      	cmp	r3, #0
 80276be:	d1e8      	bne.n	8027692 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80276c0:	4b0c      	ldr	r3, [pc, #48]	; (80276f4 <FLASH_WaitForLastOperation+0x7c>)
 80276c2:	68db      	ldr	r3, [r3, #12]
 80276c4:	f003 0301 	and.w	r3, r3, #1
 80276c8:	2b00      	cmp	r3, #0
 80276ca:	d002      	beq.n	80276d2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80276cc:	4b09      	ldr	r3, [pc, #36]	; (80276f4 <FLASH_WaitForLastOperation+0x7c>)
 80276ce:	2201      	movs	r2, #1
 80276d0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80276d2:	4b08      	ldr	r3, [pc, #32]	; (80276f4 <FLASH_WaitForLastOperation+0x7c>)
 80276d4:	68db      	ldr	r3, [r3, #12]
 80276d6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80276da:	2b00      	cmp	r3, #0
 80276dc:	d003      	beq.n	80276e6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80276de:	f000 f8a3 	bl	8027828 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80276e2:	2301      	movs	r3, #1
 80276e4:	e000      	b.n	80276e8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80276e6:	2300      	movs	r3, #0
  
}  
 80276e8:	4618      	mov	r0, r3
 80276ea:	3710      	adds	r7, #16
 80276ec:	46bd      	mov	sp, r7
 80276ee:	bd80      	pop	{r7, pc}
 80276f0:	2001760c 	.word	0x2001760c
 80276f4:	40023c00 	.word	0x40023c00

080276f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80276f8:	b490      	push	{r4, r7}
 80276fa:	b084      	sub	sp, #16
 80276fc:	af00      	add	r7, sp, #0
 80276fe:	60f8      	str	r0, [r7, #12]
 8027700:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027704:	4b13      	ldr	r3, [pc, #76]	; (8027754 <FLASH_Program_DoubleWord+0x5c>)
 8027706:	691b      	ldr	r3, [r3, #16]
 8027708:	4a12      	ldr	r2, [pc, #72]	; (8027754 <FLASH_Program_DoubleWord+0x5c>)
 802770a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802770e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8027710:	4b10      	ldr	r3, [pc, #64]	; (8027754 <FLASH_Program_DoubleWord+0x5c>)
 8027712:	691b      	ldr	r3, [r3, #16]
 8027714:	4a0f      	ldr	r2, [pc, #60]	; (8027754 <FLASH_Program_DoubleWord+0x5c>)
 8027716:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802771a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802771c:	4b0d      	ldr	r3, [pc, #52]	; (8027754 <FLASH_Program_DoubleWord+0x5c>)
 802771e:	691b      	ldr	r3, [r3, #16]
 8027720:	4a0c      	ldr	r2, [pc, #48]	; (8027754 <FLASH_Program_DoubleWord+0x5c>)
 8027722:	f043 0301 	orr.w	r3, r3, #1
 8027726:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8027728:	68fb      	ldr	r3, [r7, #12]
 802772a:	683a      	ldr	r2, [r7, #0]
 802772c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 802772e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8027732:	e9d7 1200 	ldrd	r1, r2, [r7]
 8027736:	f04f 0300 	mov.w	r3, #0
 802773a:	f04f 0400 	mov.w	r4, #0
 802773e:	0013      	movs	r3, r2
 8027740:	2400      	movs	r4, #0
 8027742:	68fa      	ldr	r2, [r7, #12]
 8027744:	3204      	adds	r2, #4
 8027746:	6013      	str	r3, [r2, #0]
}
 8027748:	bf00      	nop
 802774a:	3710      	adds	r7, #16
 802774c:	46bd      	mov	sp, r7
 802774e:	bc90      	pop	{r4, r7}
 8027750:	4770      	bx	lr
 8027752:	bf00      	nop
 8027754:	40023c00 	.word	0x40023c00

08027758 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8027758:	b480      	push	{r7}
 802775a:	b083      	sub	sp, #12
 802775c:	af00      	add	r7, sp, #0
 802775e:	6078      	str	r0, [r7, #4]
 8027760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027762:	4b0d      	ldr	r3, [pc, #52]	; (8027798 <FLASH_Program_Word+0x40>)
 8027764:	691b      	ldr	r3, [r3, #16]
 8027766:	4a0c      	ldr	r2, [pc, #48]	; (8027798 <FLASH_Program_Word+0x40>)
 8027768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802776c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 802776e:	4b0a      	ldr	r3, [pc, #40]	; (8027798 <FLASH_Program_Word+0x40>)
 8027770:	691b      	ldr	r3, [r3, #16]
 8027772:	4a09      	ldr	r2, [pc, #36]	; (8027798 <FLASH_Program_Word+0x40>)
 8027774:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027778:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802777a:	4b07      	ldr	r3, [pc, #28]	; (8027798 <FLASH_Program_Word+0x40>)
 802777c:	691b      	ldr	r3, [r3, #16]
 802777e:	4a06      	ldr	r2, [pc, #24]	; (8027798 <FLASH_Program_Word+0x40>)
 8027780:	f043 0301 	orr.w	r3, r3, #1
 8027784:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8027786:	687b      	ldr	r3, [r7, #4]
 8027788:	683a      	ldr	r2, [r7, #0]
 802778a:	601a      	str	r2, [r3, #0]
}
 802778c:	bf00      	nop
 802778e:	370c      	adds	r7, #12
 8027790:	46bd      	mov	sp, r7
 8027792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027796:	4770      	bx	lr
 8027798:	40023c00 	.word	0x40023c00

0802779c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 802779c:	b480      	push	{r7}
 802779e:	b083      	sub	sp, #12
 80277a0:	af00      	add	r7, sp, #0
 80277a2:	6078      	str	r0, [r7, #4]
 80277a4:	460b      	mov	r3, r1
 80277a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80277a8:	4b0d      	ldr	r3, [pc, #52]	; (80277e0 <FLASH_Program_HalfWord+0x44>)
 80277aa:	691b      	ldr	r3, [r3, #16]
 80277ac:	4a0c      	ldr	r2, [pc, #48]	; (80277e0 <FLASH_Program_HalfWord+0x44>)
 80277ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80277b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80277b4:	4b0a      	ldr	r3, [pc, #40]	; (80277e0 <FLASH_Program_HalfWord+0x44>)
 80277b6:	691b      	ldr	r3, [r3, #16]
 80277b8:	4a09      	ldr	r2, [pc, #36]	; (80277e0 <FLASH_Program_HalfWord+0x44>)
 80277ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80277be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80277c0:	4b07      	ldr	r3, [pc, #28]	; (80277e0 <FLASH_Program_HalfWord+0x44>)
 80277c2:	691b      	ldr	r3, [r3, #16]
 80277c4:	4a06      	ldr	r2, [pc, #24]	; (80277e0 <FLASH_Program_HalfWord+0x44>)
 80277c6:	f043 0301 	orr.w	r3, r3, #1
 80277ca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80277cc:	687b      	ldr	r3, [r7, #4]
 80277ce:	887a      	ldrh	r2, [r7, #2]
 80277d0:	801a      	strh	r2, [r3, #0]
}
 80277d2:	bf00      	nop
 80277d4:	370c      	adds	r7, #12
 80277d6:	46bd      	mov	sp, r7
 80277d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277dc:	4770      	bx	lr
 80277de:	bf00      	nop
 80277e0:	40023c00 	.word	0x40023c00

080277e4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80277e4:	b480      	push	{r7}
 80277e6:	b083      	sub	sp, #12
 80277e8:	af00      	add	r7, sp, #0
 80277ea:	6078      	str	r0, [r7, #4]
 80277ec:	460b      	mov	r3, r1
 80277ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80277f0:	4b0c      	ldr	r3, [pc, #48]	; (8027824 <FLASH_Program_Byte+0x40>)
 80277f2:	691b      	ldr	r3, [r3, #16]
 80277f4:	4a0b      	ldr	r2, [pc, #44]	; (8027824 <FLASH_Program_Byte+0x40>)
 80277f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80277fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80277fc:	4b09      	ldr	r3, [pc, #36]	; (8027824 <FLASH_Program_Byte+0x40>)
 80277fe:	4a09      	ldr	r2, [pc, #36]	; (8027824 <FLASH_Program_Byte+0x40>)
 8027800:	691b      	ldr	r3, [r3, #16]
 8027802:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027804:	4b07      	ldr	r3, [pc, #28]	; (8027824 <FLASH_Program_Byte+0x40>)
 8027806:	691b      	ldr	r3, [r3, #16]
 8027808:	4a06      	ldr	r2, [pc, #24]	; (8027824 <FLASH_Program_Byte+0x40>)
 802780a:	f043 0301 	orr.w	r3, r3, #1
 802780e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8027810:	687b      	ldr	r3, [r7, #4]
 8027812:	78fa      	ldrb	r2, [r7, #3]
 8027814:	701a      	strb	r2, [r3, #0]
}
 8027816:	bf00      	nop
 8027818:	370c      	adds	r7, #12
 802781a:	46bd      	mov	sp, r7
 802781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027820:	4770      	bx	lr
 8027822:	bf00      	nop
 8027824:	40023c00 	.word	0x40023c00

08027828 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8027828:	b480      	push	{r7}
 802782a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 802782c:	4b27      	ldr	r3, [pc, #156]	; (80278cc <FLASH_SetErrorCode+0xa4>)
 802782e:	68db      	ldr	r3, [r3, #12]
 8027830:	f003 0310 	and.w	r3, r3, #16
 8027834:	2b00      	cmp	r3, #0
 8027836:	d008      	beq.n	802784a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8027838:	4b25      	ldr	r3, [pc, #148]	; (80278d0 <FLASH_SetErrorCode+0xa8>)
 802783a:	69db      	ldr	r3, [r3, #28]
 802783c:	f043 0310 	orr.w	r3, r3, #16
 8027840:	4a23      	ldr	r2, [pc, #140]	; (80278d0 <FLASH_SetErrorCode+0xa8>)
 8027842:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8027844:	4b21      	ldr	r3, [pc, #132]	; (80278cc <FLASH_SetErrorCode+0xa4>)
 8027846:	2210      	movs	r2, #16
 8027848:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 802784a:	4b20      	ldr	r3, [pc, #128]	; (80278cc <FLASH_SetErrorCode+0xa4>)
 802784c:	68db      	ldr	r3, [r3, #12]
 802784e:	f003 0320 	and.w	r3, r3, #32
 8027852:	2b00      	cmp	r3, #0
 8027854:	d008      	beq.n	8027868 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8027856:	4b1e      	ldr	r3, [pc, #120]	; (80278d0 <FLASH_SetErrorCode+0xa8>)
 8027858:	69db      	ldr	r3, [r3, #28]
 802785a:	f043 0308 	orr.w	r3, r3, #8
 802785e:	4a1c      	ldr	r2, [pc, #112]	; (80278d0 <FLASH_SetErrorCode+0xa8>)
 8027860:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8027862:	4b1a      	ldr	r3, [pc, #104]	; (80278cc <FLASH_SetErrorCode+0xa4>)
 8027864:	2220      	movs	r2, #32
 8027866:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8027868:	4b18      	ldr	r3, [pc, #96]	; (80278cc <FLASH_SetErrorCode+0xa4>)
 802786a:	68db      	ldr	r3, [r3, #12]
 802786c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027870:	2b00      	cmp	r3, #0
 8027872:	d008      	beq.n	8027886 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8027874:	4b16      	ldr	r3, [pc, #88]	; (80278d0 <FLASH_SetErrorCode+0xa8>)
 8027876:	69db      	ldr	r3, [r3, #28]
 8027878:	f043 0304 	orr.w	r3, r3, #4
 802787c:	4a14      	ldr	r2, [pc, #80]	; (80278d0 <FLASH_SetErrorCode+0xa8>)
 802787e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8027880:	4b12      	ldr	r3, [pc, #72]	; (80278cc <FLASH_SetErrorCode+0xa4>)
 8027882:	2240      	movs	r2, #64	; 0x40
 8027884:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8027886:	4b11      	ldr	r3, [pc, #68]	; (80278cc <FLASH_SetErrorCode+0xa4>)
 8027888:	68db      	ldr	r3, [r3, #12]
 802788a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802788e:	2b00      	cmp	r3, #0
 8027890:	d008      	beq.n	80278a4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8027892:	4b0f      	ldr	r3, [pc, #60]	; (80278d0 <FLASH_SetErrorCode+0xa8>)
 8027894:	69db      	ldr	r3, [r3, #28]
 8027896:	f043 0302 	orr.w	r3, r3, #2
 802789a:	4a0d      	ldr	r2, [pc, #52]	; (80278d0 <FLASH_SetErrorCode+0xa8>)
 802789c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 802789e:	4b0b      	ldr	r3, [pc, #44]	; (80278cc <FLASH_SetErrorCode+0xa4>)
 80278a0:	2280      	movs	r2, #128	; 0x80
 80278a2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80278a4:	4b09      	ldr	r3, [pc, #36]	; (80278cc <FLASH_SetErrorCode+0xa4>)
 80278a6:	68db      	ldr	r3, [r3, #12]
 80278a8:	f003 0302 	and.w	r3, r3, #2
 80278ac:	2b00      	cmp	r3, #0
 80278ae:	d008      	beq.n	80278c2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80278b0:	4b07      	ldr	r3, [pc, #28]	; (80278d0 <FLASH_SetErrorCode+0xa8>)
 80278b2:	69db      	ldr	r3, [r3, #28]
 80278b4:	f043 0320 	orr.w	r3, r3, #32
 80278b8:	4a05      	ldr	r2, [pc, #20]	; (80278d0 <FLASH_SetErrorCode+0xa8>)
 80278ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80278bc:	4b03      	ldr	r3, [pc, #12]	; (80278cc <FLASH_SetErrorCode+0xa4>)
 80278be:	2202      	movs	r2, #2
 80278c0:	60da      	str	r2, [r3, #12]
  }
}
 80278c2:	bf00      	nop
 80278c4:	46bd      	mov	sp, r7
 80278c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278ca:	4770      	bx	lr
 80278cc:	40023c00 	.word	0x40023c00
 80278d0:	2001760c 	.word	0x2001760c

080278d4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80278d4:	b580      	push	{r7, lr}
 80278d6:	b084      	sub	sp, #16
 80278d8:	af00      	add	r7, sp, #0
 80278da:	6078      	str	r0, [r7, #4]
 80278dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80278de:	2301      	movs	r3, #1
 80278e0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80278e2:	2300      	movs	r3, #0
 80278e4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80278e6:	4b31      	ldr	r3, [pc, #196]	; (80279ac <HAL_FLASHEx_Erase+0xd8>)
 80278e8:	7e1b      	ldrb	r3, [r3, #24]
 80278ea:	2b01      	cmp	r3, #1
 80278ec:	d101      	bne.n	80278f2 <HAL_FLASHEx_Erase+0x1e>
 80278ee:	2302      	movs	r3, #2
 80278f0:	e058      	b.n	80279a4 <HAL_FLASHEx_Erase+0xd0>
 80278f2:	4b2e      	ldr	r3, [pc, #184]	; (80279ac <HAL_FLASHEx_Erase+0xd8>)
 80278f4:	2201      	movs	r2, #1
 80278f6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80278f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80278fc:	f7ff febc 	bl	8027678 <FLASH_WaitForLastOperation>
 8027900:	4603      	mov	r3, r0
 8027902:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8027904:	7bfb      	ldrb	r3, [r7, #15]
 8027906:	2b00      	cmp	r3, #0
 8027908:	d148      	bne.n	802799c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 802790a:	683b      	ldr	r3, [r7, #0]
 802790c:	f04f 32ff 	mov.w	r2, #4294967295
 8027910:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8027912:	687b      	ldr	r3, [r7, #4]
 8027914:	681b      	ldr	r3, [r3, #0]
 8027916:	2b01      	cmp	r3, #1
 8027918:	d115      	bne.n	8027946 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 802791a:	687b      	ldr	r3, [r7, #4]
 802791c:	691b      	ldr	r3, [r3, #16]
 802791e:	b2da      	uxtb	r2, r3
 8027920:	687b      	ldr	r3, [r7, #4]
 8027922:	685b      	ldr	r3, [r3, #4]
 8027924:	4619      	mov	r1, r3
 8027926:	4610      	mov	r0, r2
 8027928:	f000 f844 	bl	80279b4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802792c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027930:	f7ff fea2 	bl	8027678 <FLASH_WaitForLastOperation>
 8027934:	4603      	mov	r3, r0
 8027936:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8027938:	4b1d      	ldr	r3, [pc, #116]	; (80279b0 <HAL_FLASHEx_Erase+0xdc>)
 802793a:	691b      	ldr	r3, [r3, #16]
 802793c:	4a1c      	ldr	r2, [pc, #112]	; (80279b0 <HAL_FLASHEx_Erase+0xdc>)
 802793e:	f023 0304 	bic.w	r3, r3, #4
 8027942:	6113      	str	r3, [r2, #16]
 8027944:	e028      	b.n	8027998 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8027946:	687b      	ldr	r3, [r7, #4]
 8027948:	689b      	ldr	r3, [r3, #8]
 802794a:	60bb      	str	r3, [r7, #8]
 802794c:	e01c      	b.n	8027988 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 802794e:	687b      	ldr	r3, [r7, #4]
 8027950:	691b      	ldr	r3, [r3, #16]
 8027952:	b2db      	uxtb	r3, r3
 8027954:	4619      	mov	r1, r3
 8027956:	68b8      	ldr	r0, [r7, #8]
 8027958:	f000 f850 	bl	80279fc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802795c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027960:	f7ff fe8a 	bl	8027678 <FLASH_WaitForLastOperation>
 8027964:	4603      	mov	r3, r0
 8027966:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8027968:	4b11      	ldr	r3, [pc, #68]	; (80279b0 <HAL_FLASHEx_Erase+0xdc>)
 802796a:	691b      	ldr	r3, [r3, #16]
 802796c:	4a10      	ldr	r2, [pc, #64]	; (80279b0 <HAL_FLASHEx_Erase+0xdc>)
 802796e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8027972:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8027974:	7bfb      	ldrb	r3, [r7, #15]
 8027976:	2b00      	cmp	r3, #0
 8027978:	d003      	beq.n	8027982 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 802797a:	683b      	ldr	r3, [r7, #0]
 802797c:	68ba      	ldr	r2, [r7, #8]
 802797e:	601a      	str	r2, [r3, #0]
          break;
 8027980:	e00a      	b.n	8027998 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8027982:	68bb      	ldr	r3, [r7, #8]
 8027984:	3301      	adds	r3, #1
 8027986:	60bb      	str	r3, [r7, #8]
 8027988:	687b      	ldr	r3, [r7, #4]
 802798a:	68da      	ldr	r2, [r3, #12]
 802798c:	687b      	ldr	r3, [r7, #4]
 802798e:	689b      	ldr	r3, [r3, #8]
 8027990:	4413      	add	r3, r2
 8027992:	68ba      	ldr	r2, [r7, #8]
 8027994:	429a      	cmp	r2, r3
 8027996:	d3da      	bcc.n	802794e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8027998:	f000 f878 	bl	8027a8c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802799c:	4b03      	ldr	r3, [pc, #12]	; (80279ac <HAL_FLASHEx_Erase+0xd8>)
 802799e:	2200      	movs	r2, #0
 80279a0:	761a      	strb	r2, [r3, #24]

  return status;
 80279a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80279a4:	4618      	mov	r0, r3
 80279a6:	3710      	adds	r7, #16
 80279a8:	46bd      	mov	sp, r7
 80279aa:	bd80      	pop	{r7, pc}
 80279ac:	2001760c 	.word	0x2001760c
 80279b0:	40023c00 	.word	0x40023c00

080279b4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80279b4:	b480      	push	{r7}
 80279b6:	b083      	sub	sp, #12
 80279b8:	af00      	add	r7, sp, #0
 80279ba:	4603      	mov	r3, r0
 80279bc:	6039      	str	r1, [r7, #0]
 80279be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80279c0:	4b0d      	ldr	r3, [pc, #52]	; (80279f8 <FLASH_MassErase+0x44>)
 80279c2:	691b      	ldr	r3, [r3, #16]
 80279c4:	4a0c      	ldr	r2, [pc, #48]	; (80279f8 <FLASH_MassErase+0x44>)
 80279c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80279ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80279cc:	4b0a      	ldr	r3, [pc, #40]	; (80279f8 <FLASH_MassErase+0x44>)
 80279ce:	691b      	ldr	r3, [r3, #16]
 80279d0:	4a09      	ldr	r2, [pc, #36]	; (80279f8 <FLASH_MassErase+0x44>)
 80279d2:	f043 0304 	orr.w	r3, r3, #4
 80279d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80279d8:	4b07      	ldr	r3, [pc, #28]	; (80279f8 <FLASH_MassErase+0x44>)
 80279da:	691a      	ldr	r2, [r3, #16]
 80279dc:	79fb      	ldrb	r3, [r7, #7]
 80279de:	021b      	lsls	r3, r3, #8
 80279e0:	4313      	orrs	r3, r2
 80279e2:	4a05      	ldr	r2, [pc, #20]	; (80279f8 <FLASH_MassErase+0x44>)
 80279e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80279e8:	6113      	str	r3, [r2, #16]
}
 80279ea:	bf00      	nop
 80279ec:	370c      	adds	r7, #12
 80279ee:	46bd      	mov	sp, r7
 80279f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279f4:	4770      	bx	lr
 80279f6:	bf00      	nop
 80279f8:	40023c00 	.word	0x40023c00

080279fc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80279fc:	b480      	push	{r7}
 80279fe:	b085      	sub	sp, #20
 8027a00:	af00      	add	r7, sp, #0
 8027a02:	6078      	str	r0, [r7, #4]
 8027a04:	460b      	mov	r3, r1
 8027a06:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8027a08:	2300      	movs	r3, #0
 8027a0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8027a0c:	78fb      	ldrb	r3, [r7, #3]
 8027a0e:	2b00      	cmp	r3, #0
 8027a10:	d102      	bne.n	8027a18 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8027a12:	2300      	movs	r3, #0
 8027a14:	60fb      	str	r3, [r7, #12]
 8027a16:	e010      	b.n	8027a3a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8027a18:	78fb      	ldrb	r3, [r7, #3]
 8027a1a:	2b01      	cmp	r3, #1
 8027a1c:	d103      	bne.n	8027a26 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8027a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8027a22:	60fb      	str	r3, [r7, #12]
 8027a24:	e009      	b.n	8027a3a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8027a26:	78fb      	ldrb	r3, [r7, #3]
 8027a28:	2b02      	cmp	r3, #2
 8027a2a:	d103      	bne.n	8027a34 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8027a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8027a30:	60fb      	str	r3, [r7, #12]
 8027a32:	e002      	b.n	8027a3a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8027a34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8027a38:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027a3a:	4b13      	ldr	r3, [pc, #76]	; (8027a88 <FLASH_Erase_Sector+0x8c>)
 8027a3c:	691b      	ldr	r3, [r3, #16]
 8027a3e:	4a12      	ldr	r2, [pc, #72]	; (8027a88 <FLASH_Erase_Sector+0x8c>)
 8027a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027a44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8027a46:	4b10      	ldr	r3, [pc, #64]	; (8027a88 <FLASH_Erase_Sector+0x8c>)
 8027a48:	691a      	ldr	r2, [r3, #16]
 8027a4a:	490f      	ldr	r1, [pc, #60]	; (8027a88 <FLASH_Erase_Sector+0x8c>)
 8027a4c:	68fb      	ldr	r3, [r7, #12]
 8027a4e:	4313      	orrs	r3, r2
 8027a50:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8027a52:	4b0d      	ldr	r3, [pc, #52]	; (8027a88 <FLASH_Erase_Sector+0x8c>)
 8027a54:	691b      	ldr	r3, [r3, #16]
 8027a56:	4a0c      	ldr	r2, [pc, #48]	; (8027a88 <FLASH_Erase_Sector+0x8c>)
 8027a58:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8027a5c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8027a5e:	4b0a      	ldr	r3, [pc, #40]	; (8027a88 <FLASH_Erase_Sector+0x8c>)
 8027a60:	691a      	ldr	r2, [r3, #16]
 8027a62:	687b      	ldr	r3, [r7, #4]
 8027a64:	00db      	lsls	r3, r3, #3
 8027a66:	4313      	orrs	r3, r2
 8027a68:	4a07      	ldr	r2, [pc, #28]	; (8027a88 <FLASH_Erase_Sector+0x8c>)
 8027a6a:	f043 0302 	orr.w	r3, r3, #2
 8027a6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8027a70:	4b05      	ldr	r3, [pc, #20]	; (8027a88 <FLASH_Erase_Sector+0x8c>)
 8027a72:	691b      	ldr	r3, [r3, #16]
 8027a74:	4a04      	ldr	r2, [pc, #16]	; (8027a88 <FLASH_Erase_Sector+0x8c>)
 8027a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027a7a:	6113      	str	r3, [r2, #16]
}
 8027a7c:	bf00      	nop
 8027a7e:	3714      	adds	r7, #20
 8027a80:	46bd      	mov	sp, r7
 8027a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a86:	4770      	bx	lr
 8027a88:	40023c00 	.word	0x40023c00

08027a8c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8027a8c:	b480      	push	{r7}
 8027a8e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8027a90:	4b20      	ldr	r3, [pc, #128]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027a92:	681b      	ldr	r3, [r3, #0]
 8027a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027a98:	2b00      	cmp	r3, #0
 8027a9a:	d017      	beq.n	8027acc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8027a9c:	4b1d      	ldr	r3, [pc, #116]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027a9e:	681b      	ldr	r3, [r3, #0]
 8027aa0:	4a1c      	ldr	r2, [pc, #112]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027aa2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8027aa6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8027aa8:	4b1a      	ldr	r3, [pc, #104]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027aaa:	681b      	ldr	r3, [r3, #0]
 8027aac:	4a19      	ldr	r2, [pc, #100]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027aae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8027ab2:	6013      	str	r3, [r2, #0]
 8027ab4:	4b17      	ldr	r3, [pc, #92]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027ab6:	681b      	ldr	r3, [r3, #0]
 8027ab8:	4a16      	ldr	r2, [pc, #88]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8027abe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8027ac0:	4b14      	ldr	r3, [pc, #80]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027ac2:	681b      	ldr	r3, [r3, #0]
 8027ac4:	4a13      	ldr	r2, [pc, #76]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027aca:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8027acc:	4b11      	ldr	r3, [pc, #68]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027ace:	681b      	ldr	r3, [r3, #0]
 8027ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027ad4:	2b00      	cmp	r3, #0
 8027ad6:	d017      	beq.n	8027b08 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8027ad8:	4b0e      	ldr	r3, [pc, #56]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027ada:	681b      	ldr	r3, [r3, #0]
 8027adc:	4a0d      	ldr	r2, [pc, #52]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027ade:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8027ae2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8027ae4:	4b0b      	ldr	r3, [pc, #44]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027ae6:	681b      	ldr	r3, [r3, #0]
 8027ae8:	4a0a      	ldr	r2, [pc, #40]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027aea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8027aee:	6013      	str	r3, [r2, #0]
 8027af0:	4b08      	ldr	r3, [pc, #32]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027af2:	681b      	ldr	r3, [r3, #0]
 8027af4:	4a07      	ldr	r2, [pc, #28]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027af6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027afa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8027afc:	4b05      	ldr	r3, [pc, #20]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027afe:	681b      	ldr	r3, [r3, #0]
 8027b00:	4a04      	ldr	r2, [pc, #16]	; (8027b14 <FLASH_FlushCaches+0x88>)
 8027b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8027b06:	6013      	str	r3, [r2, #0]
  }
}
 8027b08:	bf00      	nop
 8027b0a:	46bd      	mov	sp, r7
 8027b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b10:	4770      	bx	lr
 8027b12:	bf00      	nop
 8027b14:	40023c00 	.word	0x40023c00

08027b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8027b18:	b480      	push	{r7}
 8027b1a:	b089      	sub	sp, #36	; 0x24
 8027b1c:	af00      	add	r7, sp, #0
 8027b1e:	6078      	str	r0, [r7, #4]
 8027b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8027b22:	2300      	movs	r3, #0
 8027b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8027b26:	2300      	movs	r3, #0
 8027b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8027b2a:	2300      	movs	r3, #0
 8027b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8027b2e:	2300      	movs	r3, #0
 8027b30:	61fb      	str	r3, [r7, #28]
 8027b32:	e16b      	b.n	8027e0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8027b34:	2201      	movs	r2, #1
 8027b36:	69fb      	ldr	r3, [r7, #28]
 8027b38:	fa02 f303 	lsl.w	r3, r2, r3
 8027b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8027b3e:	683b      	ldr	r3, [r7, #0]
 8027b40:	681b      	ldr	r3, [r3, #0]
 8027b42:	697a      	ldr	r2, [r7, #20]
 8027b44:	4013      	ands	r3, r2
 8027b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8027b48:	693a      	ldr	r2, [r7, #16]
 8027b4a:	697b      	ldr	r3, [r7, #20]
 8027b4c:	429a      	cmp	r2, r3
 8027b4e:	f040 815a 	bne.w	8027e06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8027b52:	683b      	ldr	r3, [r7, #0]
 8027b54:	685b      	ldr	r3, [r3, #4]
 8027b56:	2b01      	cmp	r3, #1
 8027b58:	d00b      	beq.n	8027b72 <HAL_GPIO_Init+0x5a>
 8027b5a:	683b      	ldr	r3, [r7, #0]
 8027b5c:	685b      	ldr	r3, [r3, #4]
 8027b5e:	2b02      	cmp	r3, #2
 8027b60:	d007      	beq.n	8027b72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027b62:	683b      	ldr	r3, [r7, #0]
 8027b64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8027b66:	2b11      	cmp	r3, #17
 8027b68:	d003      	beq.n	8027b72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027b6a:	683b      	ldr	r3, [r7, #0]
 8027b6c:	685b      	ldr	r3, [r3, #4]
 8027b6e:	2b12      	cmp	r3, #18
 8027b70:	d130      	bne.n	8027bd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8027b72:	687b      	ldr	r3, [r7, #4]
 8027b74:	689b      	ldr	r3, [r3, #8]
 8027b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8027b78:	69fb      	ldr	r3, [r7, #28]
 8027b7a:	005b      	lsls	r3, r3, #1
 8027b7c:	2203      	movs	r2, #3
 8027b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8027b82:	43db      	mvns	r3, r3
 8027b84:	69ba      	ldr	r2, [r7, #24]
 8027b86:	4013      	ands	r3, r2
 8027b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8027b8a:	683b      	ldr	r3, [r7, #0]
 8027b8c:	68da      	ldr	r2, [r3, #12]
 8027b8e:	69fb      	ldr	r3, [r7, #28]
 8027b90:	005b      	lsls	r3, r3, #1
 8027b92:	fa02 f303 	lsl.w	r3, r2, r3
 8027b96:	69ba      	ldr	r2, [r7, #24]
 8027b98:	4313      	orrs	r3, r2
 8027b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8027b9c:	687b      	ldr	r3, [r7, #4]
 8027b9e:	69ba      	ldr	r2, [r7, #24]
 8027ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8027ba2:	687b      	ldr	r3, [r7, #4]
 8027ba4:	685b      	ldr	r3, [r3, #4]
 8027ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8027ba8:	2201      	movs	r2, #1
 8027baa:	69fb      	ldr	r3, [r7, #28]
 8027bac:	fa02 f303 	lsl.w	r3, r2, r3
 8027bb0:	43db      	mvns	r3, r3
 8027bb2:	69ba      	ldr	r2, [r7, #24]
 8027bb4:	4013      	ands	r3, r2
 8027bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8027bb8:	683b      	ldr	r3, [r7, #0]
 8027bba:	685b      	ldr	r3, [r3, #4]
 8027bbc:	091b      	lsrs	r3, r3, #4
 8027bbe:	f003 0201 	and.w	r2, r3, #1
 8027bc2:	69fb      	ldr	r3, [r7, #28]
 8027bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8027bc8:	69ba      	ldr	r2, [r7, #24]
 8027bca:	4313      	orrs	r3, r2
 8027bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8027bce:	687b      	ldr	r3, [r7, #4]
 8027bd0:	69ba      	ldr	r2, [r7, #24]
 8027bd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8027bd4:	687b      	ldr	r3, [r7, #4]
 8027bd6:	68db      	ldr	r3, [r3, #12]
 8027bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8027bda:	69fb      	ldr	r3, [r7, #28]
 8027bdc:	005b      	lsls	r3, r3, #1
 8027bde:	2203      	movs	r2, #3
 8027be0:	fa02 f303 	lsl.w	r3, r2, r3
 8027be4:	43db      	mvns	r3, r3
 8027be6:	69ba      	ldr	r2, [r7, #24]
 8027be8:	4013      	ands	r3, r2
 8027bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8027bec:	683b      	ldr	r3, [r7, #0]
 8027bee:	689a      	ldr	r2, [r3, #8]
 8027bf0:	69fb      	ldr	r3, [r7, #28]
 8027bf2:	005b      	lsls	r3, r3, #1
 8027bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8027bf8:	69ba      	ldr	r2, [r7, #24]
 8027bfa:	4313      	orrs	r3, r2
 8027bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8027bfe:	687b      	ldr	r3, [r7, #4]
 8027c00:	69ba      	ldr	r2, [r7, #24]
 8027c02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027c04:	683b      	ldr	r3, [r7, #0]
 8027c06:	685b      	ldr	r3, [r3, #4]
 8027c08:	2b02      	cmp	r3, #2
 8027c0a:	d003      	beq.n	8027c14 <HAL_GPIO_Init+0xfc>
 8027c0c:	683b      	ldr	r3, [r7, #0]
 8027c0e:	685b      	ldr	r3, [r3, #4]
 8027c10:	2b12      	cmp	r3, #18
 8027c12:	d123      	bne.n	8027c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8027c14:	69fb      	ldr	r3, [r7, #28]
 8027c16:	08da      	lsrs	r2, r3, #3
 8027c18:	687b      	ldr	r3, [r7, #4]
 8027c1a:	3208      	adds	r2, #8
 8027c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8027c22:	69fb      	ldr	r3, [r7, #28]
 8027c24:	f003 0307 	and.w	r3, r3, #7
 8027c28:	009b      	lsls	r3, r3, #2
 8027c2a:	220f      	movs	r2, #15
 8027c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8027c30:	43db      	mvns	r3, r3
 8027c32:	69ba      	ldr	r2, [r7, #24]
 8027c34:	4013      	ands	r3, r2
 8027c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8027c38:	683b      	ldr	r3, [r7, #0]
 8027c3a:	691a      	ldr	r2, [r3, #16]
 8027c3c:	69fb      	ldr	r3, [r7, #28]
 8027c3e:	f003 0307 	and.w	r3, r3, #7
 8027c42:	009b      	lsls	r3, r3, #2
 8027c44:	fa02 f303 	lsl.w	r3, r2, r3
 8027c48:	69ba      	ldr	r2, [r7, #24]
 8027c4a:	4313      	orrs	r3, r2
 8027c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8027c4e:	69fb      	ldr	r3, [r7, #28]
 8027c50:	08da      	lsrs	r2, r3, #3
 8027c52:	687b      	ldr	r3, [r7, #4]
 8027c54:	3208      	adds	r2, #8
 8027c56:	69b9      	ldr	r1, [r7, #24]
 8027c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8027c5c:	687b      	ldr	r3, [r7, #4]
 8027c5e:	681b      	ldr	r3, [r3, #0]
 8027c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8027c62:	69fb      	ldr	r3, [r7, #28]
 8027c64:	005b      	lsls	r3, r3, #1
 8027c66:	2203      	movs	r2, #3
 8027c68:	fa02 f303 	lsl.w	r3, r2, r3
 8027c6c:	43db      	mvns	r3, r3
 8027c6e:	69ba      	ldr	r2, [r7, #24]
 8027c70:	4013      	ands	r3, r2
 8027c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8027c74:	683b      	ldr	r3, [r7, #0]
 8027c76:	685b      	ldr	r3, [r3, #4]
 8027c78:	f003 0203 	and.w	r2, r3, #3
 8027c7c:	69fb      	ldr	r3, [r7, #28]
 8027c7e:	005b      	lsls	r3, r3, #1
 8027c80:	fa02 f303 	lsl.w	r3, r2, r3
 8027c84:	69ba      	ldr	r2, [r7, #24]
 8027c86:	4313      	orrs	r3, r2
 8027c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8027c8a:	687b      	ldr	r3, [r7, #4]
 8027c8c:	69ba      	ldr	r2, [r7, #24]
 8027c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8027c90:	683b      	ldr	r3, [r7, #0]
 8027c92:	685b      	ldr	r3, [r3, #4]
 8027c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027c98:	2b00      	cmp	r3, #0
 8027c9a:	f000 80b4 	beq.w	8027e06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8027c9e:	2300      	movs	r3, #0
 8027ca0:	60fb      	str	r3, [r7, #12]
 8027ca2:	4b5f      	ldr	r3, [pc, #380]	; (8027e20 <HAL_GPIO_Init+0x308>)
 8027ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027ca6:	4a5e      	ldr	r2, [pc, #376]	; (8027e20 <HAL_GPIO_Init+0x308>)
 8027ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8027cac:	6453      	str	r3, [r2, #68]	; 0x44
 8027cae:	4b5c      	ldr	r3, [pc, #368]	; (8027e20 <HAL_GPIO_Init+0x308>)
 8027cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8027cb6:	60fb      	str	r3, [r7, #12]
 8027cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8027cba:	4a5a      	ldr	r2, [pc, #360]	; (8027e24 <HAL_GPIO_Init+0x30c>)
 8027cbc:	69fb      	ldr	r3, [r7, #28]
 8027cbe:	089b      	lsrs	r3, r3, #2
 8027cc0:	3302      	adds	r3, #2
 8027cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8027cc8:	69fb      	ldr	r3, [r7, #28]
 8027cca:	f003 0303 	and.w	r3, r3, #3
 8027cce:	009b      	lsls	r3, r3, #2
 8027cd0:	220f      	movs	r2, #15
 8027cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8027cd6:	43db      	mvns	r3, r3
 8027cd8:	69ba      	ldr	r2, [r7, #24]
 8027cda:	4013      	ands	r3, r2
 8027cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8027cde:	687b      	ldr	r3, [r7, #4]
 8027ce0:	4a51      	ldr	r2, [pc, #324]	; (8027e28 <HAL_GPIO_Init+0x310>)
 8027ce2:	4293      	cmp	r3, r2
 8027ce4:	d02b      	beq.n	8027d3e <HAL_GPIO_Init+0x226>
 8027ce6:	687b      	ldr	r3, [r7, #4]
 8027ce8:	4a50      	ldr	r2, [pc, #320]	; (8027e2c <HAL_GPIO_Init+0x314>)
 8027cea:	4293      	cmp	r3, r2
 8027cec:	d025      	beq.n	8027d3a <HAL_GPIO_Init+0x222>
 8027cee:	687b      	ldr	r3, [r7, #4]
 8027cf0:	4a4f      	ldr	r2, [pc, #316]	; (8027e30 <HAL_GPIO_Init+0x318>)
 8027cf2:	4293      	cmp	r3, r2
 8027cf4:	d01f      	beq.n	8027d36 <HAL_GPIO_Init+0x21e>
 8027cf6:	687b      	ldr	r3, [r7, #4]
 8027cf8:	4a4e      	ldr	r2, [pc, #312]	; (8027e34 <HAL_GPIO_Init+0x31c>)
 8027cfa:	4293      	cmp	r3, r2
 8027cfc:	d019      	beq.n	8027d32 <HAL_GPIO_Init+0x21a>
 8027cfe:	687b      	ldr	r3, [r7, #4]
 8027d00:	4a4d      	ldr	r2, [pc, #308]	; (8027e38 <HAL_GPIO_Init+0x320>)
 8027d02:	4293      	cmp	r3, r2
 8027d04:	d013      	beq.n	8027d2e <HAL_GPIO_Init+0x216>
 8027d06:	687b      	ldr	r3, [r7, #4]
 8027d08:	4a4c      	ldr	r2, [pc, #304]	; (8027e3c <HAL_GPIO_Init+0x324>)
 8027d0a:	4293      	cmp	r3, r2
 8027d0c:	d00d      	beq.n	8027d2a <HAL_GPIO_Init+0x212>
 8027d0e:	687b      	ldr	r3, [r7, #4]
 8027d10:	4a4b      	ldr	r2, [pc, #300]	; (8027e40 <HAL_GPIO_Init+0x328>)
 8027d12:	4293      	cmp	r3, r2
 8027d14:	d007      	beq.n	8027d26 <HAL_GPIO_Init+0x20e>
 8027d16:	687b      	ldr	r3, [r7, #4]
 8027d18:	4a4a      	ldr	r2, [pc, #296]	; (8027e44 <HAL_GPIO_Init+0x32c>)
 8027d1a:	4293      	cmp	r3, r2
 8027d1c:	d101      	bne.n	8027d22 <HAL_GPIO_Init+0x20a>
 8027d1e:	2307      	movs	r3, #7
 8027d20:	e00e      	b.n	8027d40 <HAL_GPIO_Init+0x228>
 8027d22:	2308      	movs	r3, #8
 8027d24:	e00c      	b.n	8027d40 <HAL_GPIO_Init+0x228>
 8027d26:	2306      	movs	r3, #6
 8027d28:	e00a      	b.n	8027d40 <HAL_GPIO_Init+0x228>
 8027d2a:	2305      	movs	r3, #5
 8027d2c:	e008      	b.n	8027d40 <HAL_GPIO_Init+0x228>
 8027d2e:	2304      	movs	r3, #4
 8027d30:	e006      	b.n	8027d40 <HAL_GPIO_Init+0x228>
 8027d32:	2303      	movs	r3, #3
 8027d34:	e004      	b.n	8027d40 <HAL_GPIO_Init+0x228>
 8027d36:	2302      	movs	r3, #2
 8027d38:	e002      	b.n	8027d40 <HAL_GPIO_Init+0x228>
 8027d3a:	2301      	movs	r3, #1
 8027d3c:	e000      	b.n	8027d40 <HAL_GPIO_Init+0x228>
 8027d3e:	2300      	movs	r3, #0
 8027d40:	69fa      	ldr	r2, [r7, #28]
 8027d42:	f002 0203 	and.w	r2, r2, #3
 8027d46:	0092      	lsls	r2, r2, #2
 8027d48:	4093      	lsls	r3, r2
 8027d4a:	69ba      	ldr	r2, [r7, #24]
 8027d4c:	4313      	orrs	r3, r2
 8027d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8027d50:	4934      	ldr	r1, [pc, #208]	; (8027e24 <HAL_GPIO_Init+0x30c>)
 8027d52:	69fb      	ldr	r3, [r7, #28]
 8027d54:	089b      	lsrs	r3, r3, #2
 8027d56:	3302      	adds	r3, #2
 8027d58:	69ba      	ldr	r2, [r7, #24]
 8027d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8027d5e:	4b3a      	ldr	r3, [pc, #232]	; (8027e48 <HAL_GPIO_Init+0x330>)
 8027d60:	681b      	ldr	r3, [r3, #0]
 8027d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027d64:	693b      	ldr	r3, [r7, #16]
 8027d66:	43db      	mvns	r3, r3
 8027d68:	69ba      	ldr	r2, [r7, #24]
 8027d6a:	4013      	ands	r3, r2
 8027d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8027d6e:	683b      	ldr	r3, [r7, #0]
 8027d70:	685b      	ldr	r3, [r3, #4]
 8027d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027d76:	2b00      	cmp	r3, #0
 8027d78:	d003      	beq.n	8027d82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8027d7a:	69ba      	ldr	r2, [r7, #24]
 8027d7c:	693b      	ldr	r3, [r7, #16]
 8027d7e:	4313      	orrs	r3, r2
 8027d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8027d82:	4a31      	ldr	r2, [pc, #196]	; (8027e48 <HAL_GPIO_Init+0x330>)
 8027d84:	69bb      	ldr	r3, [r7, #24]
 8027d86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8027d88:	4b2f      	ldr	r3, [pc, #188]	; (8027e48 <HAL_GPIO_Init+0x330>)
 8027d8a:	685b      	ldr	r3, [r3, #4]
 8027d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027d8e:	693b      	ldr	r3, [r7, #16]
 8027d90:	43db      	mvns	r3, r3
 8027d92:	69ba      	ldr	r2, [r7, #24]
 8027d94:	4013      	ands	r3, r2
 8027d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8027d98:	683b      	ldr	r3, [r7, #0]
 8027d9a:	685b      	ldr	r3, [r3, #4]
 8027d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027da0:	2b00      	cmp	r3, #0
 8027da2:	d003      	beq.n	8027dac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8027da4:	69ba      	ldr	r2, [r7, #24]
 8027da6:	693b      	ldr	r3, [r7, #16]
 8027da8:	4313      	orrs	r3, r2
 8027daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8027dac:	4a26      	ldr	r2, [pc, #152]	; (8027e48 <HAL_GPIO_Init+0x330>)
 8027dae:	69bb      	ldr	r3, [r7, #24]
 8027db0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8027db2:	4b25      	ldr	r3, [pc, #148]	; (8027e48 <HAL_GPIO_Init+0x330>)
 8027db4:	689b      	ldr	r3, [r3, #8]
 8027db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027db8:	693b      	ldr	r3, [r7, #16]
 8027dba:	43db      	mvns	r3, r3
 8027dbc:	69ba      	ldr	r2, [r7, #24]
 8027dbe:	4013      	ands	r3, r2
 8027dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8027dc2:	683b      	ldr	r3, [r7, #0]
 8027dc4:	685b      	ldr	r3, [r3, #4]
 8027dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8027dca:	2b00      	cmp	r3, #0
 8027dcc:	d003      	beq.n	8027dd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8027dce:	69ba      	ldr	r2, [r7, #24]
 8027dd0:	693b      	ldr	r3, [r7, #16]
 8027dd2:	4313      	orrs	r3, r2
 8027dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8027dd6:	4a1c      	ldr	r2, [pc, #112]	; (8027e48 <HAL_GPIO_Init+0x330>)
 8027dd8:	69bb      	ldr	r3, [r7, #24]
 8027dda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8027ddc:	4b1a      	ldr	r3, [pc, #104]	; (8027e48 <HAL_GPIO_Init+0x330>)
 8027dde:	68db      	ldr	r3, [r3, #12]
 8027de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027de2:	693b      	ldr	r3, [r7, #16]
 8027de4:	43db      	mvns	r3, r3
 8027de6:	69ba      	ldr	r2, [r7, #24]
 8027de8:	4013      	ands	r3, r2
 8027dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8027dec:	683b      	ldr	r3, [r7, #0]
 8027dee:	685b      	ldr	r3, [r3, #4]
 8027df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8027df4:	2b00      	cmp	r3, #0
 8027df6:	d003      	beq.n	8027e00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8027df8:	69ba      	ldr	r2, [r7, #24]
 8027dfa:	693b      	ldr	r3, [r7, #16]
 8027dfc:	4313      	orrs	r3, r2
 8027dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8027e00:	4a11      	ldr	r2, [pc, #68]	; (8027e48 <HAL_GPIO_Init+0x330>)
 8027e02:	69bb      	ldr	r3, [r7, #24]
 8027e04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8027e06:	69fb      	ldr	r3, [r7, #28]
 8027e08:	3301      	adds	r3, #1
 8027e0a:	61fb      	str	r3, [r7, #28]
 8027e0c:	69fb      	ldr	r3, [r7, #28]
 8027e0e:	2b0f      	cmp	r3, #15
 8027e10:	f67f ae90 	bls.w	8027b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8027e14:	bf00      	nop
 8027e16:	3724      	adds	r7, #36	; 0x24
 8027e18:	46bd      	mov	sp, r7
 8027e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e1e:	4770      	bx	lr
 8027e20:	40023800 	.word	0x40023800
 8027e24:	40013800 	.word	0x40013800
 8027e28:	40020000 	.word	0x40020000
 8027e2c:	40020400 	.word	0x40020400
 8027e30:	40020800 	.word	0x40020800
 8027e34:	40020c00 	.word	0x40020c00
 8027e38:	40021000 	.word	0x40021000
 8027e3c:	40021400 	.word	0x40021400
 8027e40:	40021800 	.word	0x40021800
 8027e44:	40021c00 	.word	0x40021c00
 8027e48:	40013c00 	.word	0x40013c00

08027e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8027e4c:	b480      	push	{r7}
 8027e4e:	b085      	sub	sp, #20
 8027e50:	af00      	add	r7, sp, #0
 8027e52:	6078      	str	r0, [r7, #4]
 8027e54:	460b      	mov	r3, r1
 8027e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8027e58:	687b      	ldr	r3, [r7, #4]
 8027e5a:	691a      	ldr	r2, [r3, #16]
 8027e5c:	887b      	ldrh	r3, [r7, #2]
 8027e5e:	4013      	ands	r3, r2
 8027e60:	2b00      	cmp	r3, #0
 8027e62:	d002      	beq.n	8027e6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8027e64:	2301      	movs	r3, #1
 8027e66:	73fb      	strb	r3, [r7, #15]
 8027e68:	e001      	b.n	8027e6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8027e6a:	2300      	movs	r3, #0
 8027e6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8027e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8027e70:	4618      	mov	r0, r3
 8027e72:	3714      	adds	r7, #20
 8027e74:	46bd      	mov	sp, r7
 8027e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e7a:	4770      	bx	lr

08027e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8027e7c:	b480      	push	{r7}
 8027e7e:	b083      	sub	sp, #12
 8027e80:	af00      	add	r7, sp, #0
 8027e82:	6078      	str	r0, [r7, #4]
 8027e84:	460b      	mov	r3, r1
 8027e86:	807b      	strh	r3, [r7, #2]
 8027e88:	4613      	mov	r3, r2
 8027e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8027e8c:	787b      	ldrb	r3, [r7, #1]
 8027e8e:	2b00      	cmp	r3, #0
 8027e90:	d003      	beq.n	8027e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8027e92:	887a      	ldrh	r2, [r7, #2]
 8027e94:	687b      	ldr	r3, [r7, #4]
 8027e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8027e98:	e003      	b.n	8027ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8027e9a:	887b      	ldrh	r3, [r7, #2]
 8027e9c:	041a      	lsls	r2, r3, #16
 8027e9e:	687b      	ldr	r3, [r7, #4]
 8027ea0:	619a      	str	r2, [r3, #24]
}
 8027ea2:	bf00      	nop
 8027ea4:	370c      	adds	r7, #12
 8027ea6:	46bd      	mov	sp, r7
 8027ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027eac:	4770      	bx	lr
	...

08027eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8027eb0:	b580      	push	{r7, lr}
 8027eb2:	b084      	sub	sp, #16
 8027eb4:	af00      	add	r7, sp, #0
 8027eb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8027eb8:	687b      	ldr	r3, [r7, #4]
 8027eba:	2b00      	cmp	r3, #0
 8027ebc:	d101      	bne.n	8027ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8027ebe:	2301      	movs	r3, #1
 8027ec0:	e11f      	b.n	8028102 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8027ec2:	687b      	ldr	r3, [r7, #4]
 8027ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027ec8:	b2db      	uxtb	r3, r3
 8027eca:	2b00      	cmp	r3, #0
 8027ecc:	d106      	bne.n	8027edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8027ece:	687b      	ldr	r3, [r7, #4]
 8027ed0:	2200      	movs	r2, #0
 8027ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8027ed6:	6878      	ldr	r0, [r7, #4]
 8027ed8:	f7fd fbea 	bl	80256b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8027edc:	687b      	ldr	r3, [r7, #4]
 8027ede:	2224      	movs	r2, #36	; 0x24
 8027ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8027ee4:	687b      	ldr	r3, [r7, #4]
 8027ee6:	681b      	ldr	r3, [r3, #0]
 8027ee8:	681a      	ldr	r2, [r3, #0]
 8027eea:	687b      	ldr	r3, [r7, #4]
 8027eec:	681b      	ldr	r3, [r3, #0]
 8027eee:	f022 0201 	bic.w	r2, r2, #1
 8027ef2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8027ef4:	687b      	ldr	r3, [r7, #4]
 8027ef6:	681b      	ldr	r3, [r3, #0]
 8027ef8:	681a      	ldr	r2, [r3, #0]
 8027efa:	687b      	ldr	r3, [r7, #4]
 8027efc:	681b      	ldr	r3, [r3, #0]
 8027efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8027f02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8027f04:	687b      	ldr	r3, [r7, #4]
 8027f06:	681b      	ldr	r3, [r3, #0]
 8027f08:	681a      	ldr	r2, [r3, #0]
 8027f0a:	687b      	ldr	r3, [r7, #4]
 8027f0c:	681b      	ldr	r3, [r3, #0]
 8027f0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8027f12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8027f14:	f000 fd18 	bl	8028948 <HAL_RCC_GetPCLK1Freq>
 8027f18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8027f1a:	687b      	ldr	r3, [r7, #4]
 8027f1c:	685b      	ldr	r3, [r3, #4]
 8027f1e:	4a7b      	ldr	r2, [pc, #492]	; (802810c <HAL_I2C_Init+0x25c>)
 8027f20:	4293      	cmp	r3, r2
 8027f22:	d807      	bhi.n	8027f34 <HAL_I2C_Init+0x84>
 8027f24:	68fb      	ldr	r3, [r7, #12]
 8027f26:	4a7a      	ldr	r2, [pc, #488]	; (8028110 <HAL_I2C_Init+0x260>)
 8027f28:	4293      	cmp	r3, r2
 8027f2a:	bf94      	ite	ls
 8027f2c:	2301      	movls	r3, #1
 8027f2e:	2300      	movhi	r3, #0
 8027f30:	b2db      	uxtb	r3, r3
 8027f32:	e006      	b.n	8027f42 <HAL_I2C_Init+0x92>
 8027f34:	68fb      	ldr	r3, [r7, #12]
 8027f36:	4a77      	ldr	r2, [pc, #476]	; (8028114 <HAL_I2C_Init+0x264>)
 8027f38:	4293      	cmp	r3, r2
 8027f3a:	bf94      	ite	ls
 8027f3c:	2301      	movls	r3, #1
 8027f3e:	2300      	movhi	r3, #0
 8027f40:	b2db      	uxtb	r3, r3
 8027f42:	2b00      	cmp	r3, #0
 8027f44:	d001      	beq.n	8027f4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8027f46:	2301      	movs	r3, #1
 8027f48:	e0db      	b.n	8028102 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8027f4a:	68fb      	ldr	r3, [r7, #12]
 8027f4c:	4a72      	ldr	r2, [pc, #456]	; (8028118 <HAL_I2C_Init+0x268>)
 8027f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8027f52:	0c9b      	lsrs	r3, r3, #18
 8027f54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8027f56:	687b      	ldr	r3, [r7, #4]
 8027f58:	681b      	ldr	r3, [r3, #0]
 8027f5a:	685b      	ldr	r3, [r3, #4]
 8027f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027f60:	687b      	ldr	r3, [r7, #4]
 8027f62:	681b      	ldr	r3, [r3, #0]
 8027f64:	68ba      	ldr	r2, [r7, #8]
 8027f66:	430a      	orrs	r2, r1
 8027f68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8027f6a:	687b      	ldr	r3, [r7, #4]
 8027f6c:	681b      	ldr	r3, [r3, #0]
 8027f6e:	6a1b      	ldr	r3, [r3, #32]
 8027f70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027f74:	687b      	ldr	r3, [r7, #4]
 8027f76:	685b      	ldr	r3, [r3, #4]
 8027f78:	4a64      	ldr	r2, [pc, #400]	; (802810c <HAL_I2C_Init+0x25c>)
 8027f7a:	4293      	cmp	r3, r2
 8027f7c:	d802      	bhi.n	8027f84 <HAL_I2C_Init+0xd4>
 8027f7e:	68bb      	ldr	r3, [r7, #8]
 8027f80:	3301      	adds	r3, #1
 8027f82:	e009      	b.n	8027f98 <HAL_I2C_Init+0xe8>
 8027f84:	68bb      	ldr	r3, [r7, #8]
 8027f86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8027f8a:	fb02 f303 	mul.w	r3, r2, r3
 8027f8e:	4a63      	ldr	r2, [pc, #396]	; (802811c <HAL_I2C_Init+0x26c>)
 8027f90:	fba2 2303 	umull	r2, r3, r2, r3
 8027f94:	099b      	lsrs	r3, r3, #6
 8027f96:	3301      	adds	r3, #1
 8027f98:	687a      	ldr	r2, [r7, #4]
 8027f9a:	6812      	ldr	r2, [r2, #0]
 8027f9c:	430b      	orrs	r3, r1
 8027f9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8027fa0:	687b      	ldr	r3, [r7, #4]
 8027fa2:	681b      	ldr	r3, [r3, #0]
 8027fa4:	69db      	ldr	r3, [r3, #28]
 8027fa6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8027faa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8027fae:	687b      	ldr	r3, [r7, #4]
 8027fb0:	685b      	ldr	r3, [r3, #4]
 8027fb2:	4956      	ldr	r1, [pc, #344]	; (802810c <HAL_I2C_Init+0x25c>)
 8027fb4:	428b      	cmp	r3, r1
 8027fb6:	d80d      	bhi.n	8027fd4 <HAL_I2C_Init+0x124>
 8027fb8:	68fb      	ldr	r3, [r7, #12]
 8027fba:	1e59      	subs	r1, r3, #1
 8027fbc:	687b      	ldr	r3, [r7, #4]
 8027fbe:	685b      	ldr	r3, [r3, #4]
 8027fc0:	005b      	lsls	r3, r3, #1
 8027fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8027fc6:	3301      	adds	r3, #1
 8027fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027fcc:	2b04      	cmp	r3, #4
 8027fce:	bf38      	it	cc
 8027fd0:	2304      	movcc	r3, #4
 8027fd2:	e04f      	b.n	8028074 <HAL_I2C_Init+0x1c4>
 8027fd4:	687b      	ldr	r3, [r7, #4]
 8027fd6:	689b      	ldr	r3, [r3, #8]
 8027fd8:	2b00      	cmp	r3, #0
 8027fda:	d111      	bne.n	8028000 <HAL_I2C_Init+0x150>
 8027fdc:	68fb      	ldr	r3, [r7, #12]
 8027fde:	1e58      	subs	r0, r3, #1
 8027fe0:	687b      	ldr	r3, [r7, #4]
 8027fe2:	6859      	ldr	r1, [r3, #4]
 8027fe4:	460b      	mov	r3, r1
 8027fe6:	005b      	lsls	r3, r3, #1
 8027fe8:	440b      	add	r3, r1
 8027fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8027fee:	3301      	adds	r3, #1
 8027ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027ff4:	2b00      	cmp	r3, #0
 8027ff6:	bf0c      	ite	eq
 8027ff8:	2301      	moveq	r3, #1
 8027ffa:	2300      	movne	r3, #0
 8027ffc:	b2db      	uxtb	r3, r3
 8027ffe:	e012      	b.n	8028026 <HAL_I2C_Init+0x176>
 8028000:	68fb      	ldr	r3, [r7, #12]
 8028002:	1e58      	subs	r0, r3, #1
 8028004:	687b      	ldr	r3, [r7, #4]
 8028006:	6859      	ldr	r1, [r3, #4]
 8028008:	460b      	mov	r3, r1
 802800a:	009b      	lsls	r3, r3, #2
 802800c:	440b      	add	r3, r1
 802800e:	0099      	lsls	r1, r3, #2
 8028010:	440b      	add	r3, r1
 8028012:	fbb0 f3f3 	udiv	r3, r0, r3
 8028016:	3301      	adds	r3, #1
 8028018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802801c:	2b00      	cmp	r3, #0
 802801e:	bf0c      	ite	eq
 8028020:	2301      	moveq	r3, #1
 8028022:	2300      	movne	r3, #0
 8028024:	b2db      	uxtb	r3, r3
 8028026:	2b00      	cmp	r3, #0
 8028028:	d001      	beq.n	802802e <HAL_I2C_Init+0x17e>
 802802a:	2301      	movs	r3, #1
 802802c:	e022      	b.n	8028074 <HAL_I2C_Init+0x1c4>
 802802e:	687b      	ldr	r3, [r7, #4]
 8028030:	689b      	ldr	r3, [r3, #8]
 8028032:	2b00      	cmp	r3, #0
 8028034:	d10e      	bne.n	8028054 <HAL_I2C_Init+0x1a4>
 8028036:	68fb      	ldr	r3, [r7, #12]
 8028038:	1e58      	subs	r0, r3, #1
 802803a:	687b      	ldr	r3, [r7, #4]
 802803c:	6859      	ldr	r1, [r3, #4]
 802803e:	460b      	mov	r3, r1
 8028040:	005b      	lsls	r3, r3, #1
 8028042:	440b      	add	r3, r1
 8028044:	fbb0 f3f3 	udiv	r3, r0, r3
 8028048:	3301      	adds	r3, #1
 802804a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802804e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8028052:	e00f      	b.n	8028074 <HAL_I2C_Init+0x1c4>
 8028054:	68fb      	ldr	r3, [r7, #12]
 8028056:	1e58      	subs	r0, r3, #1
 8028058:	687b      	ldr	r3, [r7, #4]
 802805a:	6859      	ldr	r1, [r3, #4]
 802805c:	460b      	mov	r3, r1
 802805e:	009b      	lsls	r3, r3, #2
 8028060:	440b      	add	r3, r1
 8028062:	0099      	lsls	r1, r3, #2
 8028064:	440b      	add	r3, r1
 8028066:	fbb0 f3f3 	udiv	r3, r0, r3
 802806a:	3301      	adds	r3, #1
 802806c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8028074:	6879      	ldr	r1, [r7, #4]
 8028076:	6809      	ldr	r1, [r1, #0]
 8028078:	4313      	orrs	r3, r2
 802807a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 802807c:	687b      	ldr	r3, [r7, #4]
 802807e:	681b      	ldr	r3, [r3, #0]
 8028080:	681b      	ldr	r3, [r3, #0]
 8028082:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8028086:	687b      	ldr	r3, [r7, #4]
 8028088:	69da      	ldr	r2, [r3, #28]
 802808a:	687b      	ldr	r3, [r7, #4]
 802808c:	6a1b      	ldr	r3, [r3, #32]
 802808e:	431a      	orrs	r2, r3
 8028090:	687b      	ldr	r3, [r7, #4]
 8028092:	681b      	ldr	r3, [r3, #0]
 8028094:	430a      	orrs	r2, r1
 8028096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8028098:	687b      	ldr	r3, [r7, #4]
 802809a:	681b      	ldr	r3, [r3, #0]
 802809c:	689b      	ldr	r3, [r3, #8]
 802809e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80280a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80280a6:	687a      	ldr	r2, [r7, #4]
 80280a8:	6911      	ldr	r1, [r2, #16]
 80280aa:	687a      	ldr	r2, [r7, #4]
 80280ac:	68d2      	ldr	r2, [r2, #12]
 80280ae:	4311      	orrs	r1, r2
 80280b0:	687a      	ldr	r2, [r7, #4]
 80280b2:	6812      	ldr	r2, [r2, #0]
 80280b4:	430b      	orrs	r3, r1
 80280b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80280b8:	687b      	ldr	r3, [r7, #4]
 80280ba:	681b      	ldr	r3, [r3, #0]
 80280bc:	68db      	ldr	r3, [r3, #12]
 80280be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80280c2:	687b      	ldr	r3, [r7, #4]
 80280c4:	695a      	ldr	r2, [r3, #20]
 80280c6:	687b      	ldr	r3, [r7, #4]
 80280c8:	699b      	ldr	r3, [r3, #24]
 80280ca:	431a      	orrs	r2, r3
 80280cc:	687b      	ldr	r3, [r7, #4]
 80280ce:	681b      	ldr	r3, [r3, #0]
 80280d0:	430a      	orrs	r2, r1
 80280d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80280d4:	687b      	ldr	r3, [r7, #4]
 80280d6:	681b      	ldr	r3, [r3, #0]
 80280d8:	681a      	ldr	r2, [r3, #0]
 80280da:	687b      	ldr	r3, [r7, #4]
 80280dc:	681b      	ldr	r3, [r3, #0]
 80280de:	f042 0201 	orr.w	r2, r2, #1
 80280e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80280e4:	687b      	ldr	r3, [r7, #4]
 80280e6:	2200      	movs	r2, #0
 80280e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80280ea:	687b      	ldr	r3, [r7, #4]
 80280ec:	2220      	movs	r2, #32
 80280ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80280f2:	687b      	ldr	r3, [r7, #4]
 80280f4:	2200      	movs	r2, #0
 80280f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80280f8:	687b      	ldr	r3, [r7, #4]
 80280fa:	2200      	movs	r2, #0
 80280fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8028100:	2300      	movs	r3, #0
}
 8028102:	4618      	mov	r0, r3
 8028104:	3710      	adds	r7, #16
 8028106:	46bd      	mov	sp, r7
 8028108:	bd80      	pop	{r7, pc}
 802810a:	bf00      	nop
 802810c:	000186a0 	.word	0x000186a0
 8028110:	001e847f 	.word	0x001e847f
 8028114:	003d08ff 	.word	0x003d08ff
 8028118:	431bde83 	.word	0x431bde83
 802811c:	10624dd3 	.word	0x10624dd3

08028120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8028120:	b580      	push	{r7, lr}
 8028122:	b086      	sub	sp, #24
 8028124:	af00      	add	r7, sp, #0
 8028126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8028128:	687b      	ldr	r3, [r7, #4]
 802812a:	2b00      	cmp	r3, #0
 802812c:	d101      	bne.n	8028132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802812e:	2301      	movs	r3, #1
 8028130:	e25b      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8028132:	687b      	ldr	r3, [r7, #4]
 8028134:	681b      	ldr	r3, [r3, #0]
 8028136:	f003 0301 	and.w	r3, r3, #1
 802813a:	2b00      	cmp	r3, #0
 802813c:	d075      	beq.n	802822a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802813e:	4ba3      	ldr	r3, [pc, #652]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 8028140:	689b      	ldr	r3, [r3, #8]
 8028142:	f003 030c 	and.w	r3, r3, #12
 8028146:	2b04      	cmp	r3, #4
 8028148:	d00c      	beq.n	8028164 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802814a:	4ba0      	ldr	r3, [pc, #640]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 802814c:	689b      	ldr	r3, [r3, #8]
 802814e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8028152:	2b08      	cmp	r3, #8
 8028154:	d112      	bne.n	802817c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8028156:	4b9d      	ldr	r3, [pc, #628]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 8028158:	685b      	ldr	r3, [r3, #4]
 802815a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802815e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8028162:	d10b      	bne.n	802817c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8028164:	4b99      	ldr	r3, [pc, #612]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 8028166:	681b      	ldr	r3, [r3, #0]
 8028168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802816c:	2b00      	cmp	r3, #0
 802816e:	d05b      	beq.n	8028228 <HAL_RCC_OscConfig+0x108>
 8028170:	687b      	ldr	r3, [r7, #4]
 8028172:	685b      	ldr	r3, [r3, #4]
 8028174:	2b00      	cmp	r3, #0
 8028176:	d157      	bne.n	8028228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8028178:	2301      	movs	r3, #1
 802817a:	e236      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802817c:	687b      	ldr	r3, [r7, #4]
 802817e:	685b      	ldr	r3, [r3, #4]
 8028180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8028184:	d106      	bne.n	8028194 <HAL_RCC_OscConfig+0x74>
 8028186:	4b91      	ldr	r3, [pc, #580]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 8028188:	681b      	ldr	r3, [r3, #0]
 802818a:	4a90      	ldr	r2, [pc, #576]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 802818c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028190:	6013      	str	r3, [r2, #0]
 8028192:	e01d      	b.n	80281d0 <HAL_RCC_OscConfig+0xb0>
 8028194:	687b      	ldr	r3, [r7, #4]
 8028196:	685b      	ldr	r3, [r3, #4]
 8028198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802819c:	d10c      	bne.n	80281b8 <HAL_RCC_OscConfig+0x98>
 802819e:	4b8b      	ldr	r3, [pc, #556]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 80281a0:	681b      	ldr	r3, [r3, #0]
 80281a2:	4a8a      	ldr	r2, [pc, #552]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 80281a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80281a8:	6013      	str	r3, [r2, #0]
 80281aa:	4b88      	ldr	r3, [pc, #544]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 80281ac:	681b      	ldr	r3, [r3, #0]
 80281ae:	4a87      	ldr	r2, [pc, #540]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 80281b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80281b4:	6013      	str	r3, [r2, #0]
 80281b6:	e00b      	b.n	80281d0 <HAL_RCC_OscConfig+0xb0>
 80281b8:	4b84      	ldr	r3, [pc, #528]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 80281ba:	681b      	ldr	r3, [r3, #0]
 80281bc:	4a83      	ldr	r2, [pc, #524]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 80281be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80281c2:	6013      	str	r3, [r2, #0]
 80281c4:	4b81      	ldr	r3, [pc, #516]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 80281c6:	681b      	ldr	r3, [r3, #0]
 80281c8:	4a80      	ldr	r2, [pc, #512]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 80281ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80281ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80281d0:	687b      	ldr	r3, [r7, #4]
 80281d2:	685b      	ldr	r3, [r3, #4]
 80281d4:	2b00      	cmp	r3, #0
 80281d6:	d013      	beq.n	8028200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80281d8:	f7fe f926 	bl	8026428 <HAL_GetTick>
 80281dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80281de:	e008      	b.n	80281f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80281e0:	f7fe f922 	bl	8026428 <HAL_GetTick>
 80281e4:	4602      	mov	r2, r0
 80281e6:	693b      	ldr	r3, [r7, #16]
 80281e8:	1ad3      	subs	r3, r2, r3
 80281ea:	2b64      	cmp	r3, #100	; 0x64
 80281ec:	d901      	bls.n	80281f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80281ee:	2303      	movs	r3, #3
 80281f0:	e1fb      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80281f2:	4b76      	ldr	r3, [pc, #472]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 80281f4:	681b      	ldr	r3, [r3, #0]
 80281f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80281fa:	2b00      	cmp	r3, #0
 80281fc:	d0f0      	beq.n	80281e0 <HAL_RCC_OscConfig+0xc0>
 80281fe:	e014      	b.n	802822a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028200:	f7fe f912 	bl	8026428 <HAL_GetTick>
 8028204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8028206:	e008      	b.n	802821a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8028208:	f7fe f90e 	bl	8026428 <HAL_GetTick>
 802820c:	4602      	mov	r2, r0
 802820e:	693b      	ldr	r3, [r7, #16]
 8028210:	1ad3      	subs	r3, r2, r3
 8028212:	2b64      	cmp	r3, #100	; 0x64
 8028214:	d901      	bls.n	802821a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8028216:	2303      	movs	r3, #3
 8028218:	e1e7      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802821a:	4b6c      	ldr	r3, [pc, #432]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 802821c:	681b      	ldr	r3, [r3, #0]
 802821e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028222:	2b00      	cmp	r3, #0
 8028224:	d1f0      	bne.n	8028208 <HAL_RCC_OscConfig+0xe8>
 8028226:	e000      	b.n	802822a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8028228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802822a:	687b      	ldr	r3, [r7, #4]
 802822c:	681b      	ldr	r3, [r3, #0]
 802822e:	f003 0302 	and.w	r3, r3, #2
 8028232:	2b00      	cmp	r3, #0
 8028234:	d063      	beq.n	80282fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8028236:	4b65      	ldr	r3, [pc, #404]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 8028238:	689b      	ldr	r3, [r3, #8]
 802823a:	f003 030c 	and.w	r3, r3, #12
 802823e:	2b00      	cmp	r3, #0
 8028240:	d00b      	beq.n	802825a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8028242:	4b62      	ldr	r3, [pc, #392]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 8028244:	689b      	ldr	r3, [r3, #8]
 8028246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802824a:	2b08      	cmp	r3, #8
 802824c:	d11c      	bne.n	8028288 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802824e:	4b5f      	ldr	r3, [pc, #380]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 8028250:	685b      	ldr	r3, [r3, #4]
 8028252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8028256:	2b00      	cmp	r3, #0
 8028258:	d116      	bne.n	8028288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802825a:	4b5c      	ldr	r3, [pc, #368]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 802825c:	681b      	ldr	r3, [r3, #0]
 802825e:	f003 0302 	and.w	r3, r3, #2
 8028262:	2b00      	cmp	r3, #0
 8028264:	d005      	beq.n	8028272 <HAL_RCC_OscConfig+0x152>
 8028266:	687b      	ldr	r3, [r7, #4]
 8028268:	68db      	ldr	r3, [r3, #12]
 802826a:	2b01      	cmp	r3, #1
 802826c:	d001      	beq.n	8028272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 802826e:	2301      	movs	r3, #1
 8028270:	e1bb      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8028272:	4b56      	ldr	r3, [pc, #344]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 8028274:	681b      	ldr	r3, [r3, #0]
 8028276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802827a:	687b      	ldr	r3, [r7, #4]
 802827c:	691b      	ldr	r3, [r3, #16]
 802827e:	00db      	lsls	r3, r3, #3
 8028280:	4952      	ldr	r1, [pc, #328]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 8028282:	4313      	orrs	r3, r2
 8028284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8028286:	e03a      	b.n	80282fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8028288:	687b      	ldr	r3, [r7, #4]
 802828a:	68db      	ldr	r3, [r3, #12]
 802828c:	2b00      	cmp	r3, #0
 802828e:	d020      	beq.n	80282d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8028290:	4b4f      	ldr	r3, [pc, #316]	; (80283d0 <HAL_RCC_OscConfig+0x2b0>)
 8028292:	2201      	movs	r2, #1
 8028294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028296:	f7fe f8c7 	bl	8026428 <HAL_GetTick>
 802829a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802829c:	e008      	b.n	80282b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802829e:	f7fe f8c3 	bl	8026428 <HAL_GetTick>
 80282a2:	4602      	mov	r2, r0
 80282a4:	693b      	ldr	r3, [r7, #16]
 80282a6:	1ad3      	subs	r3, r2, r3
 80282a8:	2b02      	cmp	r3, #2
 80282aa:	d901      	bls.n	80282b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80282ac:	2303      	movs	r3, #3
 80282ae:	e19c      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80282b0:	4b46      	ldr	r3, [pc, #280]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 80282b2:	681b      	ldr	r3, [r3, #0]
 80282b4:	f003 0302 	and.w	r3, r3, #2
 80282b8:	2b00      	cmp	r3, #0
 80282ba:	d0f0      	beq.n	802829e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80282bc:	4b43      	ldr	r3, [pc, #268]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 80282be:	681b      	ldr	r3, [r3, #0]
 80282c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80282c4:	687b      	ldr	r3, [r7, #4]
 80282c6:	691b      	ldr	r3, [r3, #16]
 80282c8:	00db      	lsls	r3, r3, #3
 80282ca:	4940      	ldr	r1, [pc, #256]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 80282cc:	4313      	orrs	r3, r2
 80282ce:	600b      	str	r3, [r1, #0]
 80282d0:	e015      	b.n	80282fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80282d2:	4b3f      	ldr	r3, [pc, #252]	; (80283d0 <HAL_RCC_OscConfig+0x2b0>)
 80282d4:	2200      	movs	r2, #0
 80282d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80282d8:	f7fe f8a6 	bl	8026428 <HAL_GetTick>
 80282dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80282de:	e008      	b.n	80282f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80282e0:	f7fe f8a2 	bl	8026428 <HAL_GetTick>
 80282e4:	4602      	mov	r2, r0
 80282e6:	693b      	ldr	r3, [r7, #16]
 80282e8:	1ad3      	subs	r3, r2, r3
 80282ea:	2b02      	cmp	r3, #2
 80282ec:	d901      	bls.n	80282f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80282ee:	2303      	movs	r3, #3
 80282f0:	e17b      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80282f2:	4b36      	ldr	r3, [pc, #216]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 80282f4:	681b      	ldr	r3, [r3, #0]
 80282f6:	f003 0302 	and.w	r3, r3, #2
 80282fa:	2b00      	cmp	r3, #0
 80282fc:	d1f0      	bne.n	80282e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80282fe:	687b      	ldr	r3, [r7, #4]
 8028300:	681b      	ldr	r3, [r3, #0]
 8028302:	f003 0308 	and.w	r3, r3, #8
 8028306:	2b00      	cmp	r3, #0
 8028308:	d030      	beq.n	802836c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802830a:	687b      	ldr	r3, [r7, #4]
 802830c:	695b      	ldr	r3, [r3, #20]
 802830e:	2b00      	cmp	r3, #0
 8028310:	d016      	beq.n	8028340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8028312:	4b30      	ldr	r3, [pc, #192]	; (80283d4 <HAL_RCC_OscConfig+0x2b4>)
 8028314:	2201      	movs	r2, #1
 8028316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028318:	f7fe f886 	bl	8026428 <HAL_GetTick>
 802831c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802831e:	e008      	b.n	8028332 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8028320:	f7fe f882 	bl	8026428 <HAL_GetTick>
 8028324:	4602      	mov	r2, r0
 8028326:	693b      	ldr	r3, [r7, #16]
 8028328:	1ad3      	subs	r3, r2, r3
 802832a:	2b02      	cmp	r3, #2
 802832c:	d901      	bls.n	8028332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802832e:	2303      	movs	r3, #3
 8028330:	e15b      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8028332:	4b26      	ldr	r3, [pc, #152]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 8028334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028336:	f003 0302 	and.w	r3, r3, #2
 802833a:	2b00      	cmp	r3, #0
 802833c:	d0f0      	beq.n	8028320 <HAL_RCC_OscConfig+0x200>
 802833e:	e015      	b.n	802836c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8028340:	4b24      	ldr	r3, [pc, #144]	; (80283d4 <HAL_RCC_OscConfig+0x2b4>)
 8028342:	2200      	movs	r2, #0
 8028344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8028346:	f7fe f86f 	bl	8026428 <HAL_GetTick>
 802834a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802834c:	e008      	b.n	8028360 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802834e:	f7fe f86b 	bl	8026428 <HAL_GetTick>
 8028352:	4602      	mov	r2, r0
 8028354:	693b      	ldr	r3, [r7, #16]
 8028356:	1ad3      	subs	r3, r2, r3
 8028358:	2b02      	cmp	r3, #2
 802835a:	d901      	bls.n	8028360 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 802835c:	2303      	movs	r3, #3
 802835e:	e144      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8028360:	4b1a      	ldr	r3, [pc, #104]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 8028362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028364:	f003 0302 	and.w	r3, r3, #2
 8028368:	2b00      	cmp	r3, #0
 802836a:	d1f0      	bne.n	802834e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802836c:	687b      	ldr	r3, [r7, #4]
 802836e:	681b      	ldr	r3, [r3, #0]
 8028370:	f003 0304 	and.w	r3, r3, #4
 8028374:	2b00      	cmp	r3, #0
 8028376:	f000 80a0 	beq.w	80284ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 802837a:	2300      	movs	r3, #0
 802837c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802837e:	4b13      	ldr	r3, [pc, #76]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 8028380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028386:	2b00      	cmp	r3, #0
 8028388:	d10f      	bne.n	80283aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802838a:	2300      	movs	r3, #0
 802838c:	60bb      	str	r3, [r7, #8]
 802838e:	4b0f      	ldr	r3, [pc, #60]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 8028390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028392:	4a0e      	ldr	r2, [pc, #56]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 8028394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028398:	6413      	str	r3, [r2, #64]	; 0x40
 802839a:	4b0c      	ldr	r3, [pc, #48]	; (80283cc <HAL_RCC_OscConfig+0x2ac>)
 802839c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802839e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80283a2:	60bb      	str	r3, [r7, #8]
 80283a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80283a6:	2301      	movs	r3, #1
 80283a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80283aa:	4b0b      	ldr	r3, [pc, #44]	; (80283d8 <HAL_RCC_OscConfig+0x2b8>)
 80283ac:	681b      	ldr	r3, [r3, #0]
 80283ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80283b2:	2b00      	cmp	r3, #0
 80283b4:	d121      	bne.n	80283fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80283b6:	4b08      	ldr	r3, [pc, #32]	; (80283d8 <HAL_RCC_OscConfig+0x2b8>)
 80283b8:	681b      	ldr	r3, [r3, #0]
 80283ba:	4a07      	ldr	r2, [pc, #28]	; (80283d8 <HAL_RCC_OscConfig+0x2b8>)
 80283bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80283c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80283c2:	f7fe f831 	bl	8026428 <HAL_GetTick>
 80283c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80283c8:	e011      	b.n	80283ee <HAL_RCC_OscConfig+0x2ce>
 80283ca:	bf00      	nop
 80283cc:	40023800 	.word	0x40023800
 80283d0:	42470000 	.word	0x42470000
 80283d4:	42470e80 	.word	0x42470e80
 80283d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80283dc:	f7fe f824 	bl	8026428 <HAL_GetTick>
 80283e0:	4602      	mov	r2, r0
 80283e2:	693b      	ldr	r3, [r7, #16]
 80283e4:	1ad3      	subs	r3, r2, r3
 80283e6:	2b02      	cmp	r3, #2
 80283e8:	d901      	bls.n	80283ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80283ea:	2303      	movs	r3, #3
 80283ec:	e0fd      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80283ee:	4b81      	ldr	r3, [pc, #516]	; (80285f4 <HAL_RCC_OscConfig+0x4d4>)
 80283f0:	681b      	ldr	r3, [r3, #0]
 80283f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80283f6:	2b00      	cmp	r3, #0
 80283f8:	d0f0      	beq.n	80283dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80283fa:	687b      	ldr	r3, [r7, #4]
 80283fc:	689b      	ldr	r3, [r3, #8]
 80283fe:	2b01      	cmp	r3, #1
 8028400:	d106      	bne.n	8028410 <HAL_RCC_OscConfig+0x2f0>
 8028402:	4b7d      	ldr	r3, [pc, #500]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 8028404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028406:	4a7c      	ldr	r2, [pc, #496]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 8028408:	f043 0301 	orr.w	r3, r3, #1
 802840c:	6713      	str	r3, [r2, #112]	; 0x70
 802840e:	e01c      	b.n	802844a <HAL_RCC_OscConfig+0x32a>
 8028410:	687b      	ldr	r3, [r7, #4]
 8028412:	689b      	ldr	r3, [r3, #8]
 8028414:	2b05      	cmp	r3, #5
 8028416:	d10c      	bne.n	8028432 <HAL_RCC_OscConfig+0x312>
 8028418:	4b77      	ldr	r3, [pc, #476]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 802841a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802841c:	4a76      	ldr	r2, [pc, #472]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 802841e:	f043 0304 	orr.w	r3, r3, #4
 8028422:	6713      	str	r3, [r2, #112]	; 0x70
 8028424:	4b74      	ldr	r3, [pc, #464]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 8028426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028428:	4a73      	ldr	r2, [pc, #460]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 802842a:	f043 0301 	orr.w	r3, r3, #1
 802842e:	6713      	str	r3, [r2, #112]	; 0x70
 8028430:	e00b      	b.n	802844a <HAL_RCC_OscConfig+0x32a>
 8028432:	4b71      	ldr	r3, [pc, #452]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 8028434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028436:	4a70      	ldr	r2, [pc, #448]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 8028438:	f023 0301 	bic.w	r3, r3, #1
 802843c:	6713      	str	r3, [r2, #112]	; 0x70
 802843e:	4b6e      	ldr	r3, [pc, #440]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 8028440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028442:	4a6d      	ldr	r2, [pc, #436]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 8028444:	f023 0304 	bic.w	r3, r3, #4
 8028448:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802844a:	687b      	ldr	r3, [r7, #4]
 802844c:	689b      	ldr	r3, [r3, #8]
 802844e:	2b00      	cmp	r3, #0
 8028450:	d015      	beq.n	802847e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028452:	f7fd ffe9 	bl	8026428 <HAL_GetTick>
 8028456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028458:	e00a      	b.n	8028470 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802845a:	f7fd ffe5 	bl	8026428 <HAL_GetTick>
 802845e:	4602      	mov	r2, r0
 8028460:	693b      	ldr	r3, [r7, #16]
 8028462:	1ad3      	subs	r3, r2, r3
 8028464:	f241 3288 	movw	r2, #5000	; 0x1388
 8028468:	4293      	cmp	r3, r2
 802846a:	d901      	bls.n	8028470 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 802846c:	2303      	movs	r3, #3
 802846e:	e0bc      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028470:	4b61      	ldr	r3, [pc, #388]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 8028472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028474:	f003 0302 	and.w	r3, r3, #2
 8028478:	2b00      	cmp	r3, #0
 802847a:	d0ee      	beq.n	802845a <HAL_RCC_OscConfig+0x33a>
 802847c:	e014      	b.n	80284a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802847e:	f7fd ffd3 	bl	8026428 <HAL_GetTick>
 8028482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8028484:	e00a      	b.n	802849c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8028486:	f7fd ffcf 	bl	8026428 <HAL_GetTick>
 802848a:	4602      	mov	r2, r0
 802848c:	693b      	ldr	r3, [r7, #16]
 802848e:	1ad3      	subs	r3, r2, r3
 8028490:	f241 3288 	movw	r2, #5000	; 0x1388
 8028494:	4293      	cmp	r3, r2
 8028496:	d901      	bls.n	802849c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8028498:	2303      	movs	r3, #3
 802849a:	e0a6      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802849c:	4b56      	ldr	r3, [pc, #344]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 802849e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80284a0:	f003 0302 	and.w	r3, r3, #2
 80284a4:	2b00      	cmp	r3, #0
 80284a6:	d1ee      	bne.n	8028486 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80284a8:	7dfb      	ldrb	r3, [r7, #23]
 80284aa:	2b01      	cmp	r3, #1
 80284ac:	d105      	bne.n	80284ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80284ae:	4b52      	ldr	r3, [pc, #328]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 80284b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80284b2:	4a51      	ldr	r2, [pc, #324]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 80284b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80284b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80284ba:	687b      	ldr	r3, [r7, #4]
 80284bc:	699b      	ldr	r3, [r3, #24]
 80284be:	2b00      	cmp	r3, #0
 80284c0:	f000 8092 	beq.w	80285e8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80284c4:	4b4c      	ldr	r3, [pc, #304]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 80284c6:	689b      	ldr	r3, [r3, #8]
 80284c8:	f003 030c 	and.w	r3, r3, #12
 80284cc:	2b08      	cmp	r3, #8
 80284ce:	d05c      	beq.n	802858a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80284d0:	687b      	ldr	r3, [r7, #4]
 80284d2:	699b      	ldr	r3, [r3, #24]
 80284d4:	2b02      	cmp	r3, #2
 80284d6:	d141      	bne.n	802855c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80284d8:	4b48      	ldr	r3, [pc, #288]	; (80285fc <HAL_RCC_OscConfig+0x4dc>)
 80284da:	2200      	movs	r2, #0
 80284dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80284de:	f7fd ffa3 	bl	8026428 <HAL_GetTick>
 80284e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80284e4:	e008      	b.n	80284f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80284e6:	f7fd ff9f 	bl	8026428 <HAL_GetTick>
 80284ea:	4602      	mov	r2, r0
 80284ec:	693b      	ldr	r3, [r7, #16]
 80284ee:	1ad3      	subs	r3, r2, r3
 80284f0:	2b02      	cmp	r3, #2
 80284f2:	d901      	bls.n	80284f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80284f4:	2303      	movs	r3, #3
 80284f6:	e078      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80284f8:	4b3f      	ldr	r3, [pc, #252]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 80284fa:	681b      	ldr	r3, [r3, #0]
 80284fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028500:	2b00      	cmp	r3, #0
 8028502:	d1f0      	bne.n	80284e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8028504:	687b      	ldr	r3, [r7, #4]
 8028506:	69da      	ldr	r2, [r3, #28]
 8028508:	687b      	ldr	r3, [r7, #4]
 802850a:	6a1b      	ldr	r3, [r3, #32]
 802850c:	431a      	orrs	r2, r3
 802850e:	687b      	ldr	r3, [r7, #4]
 8028510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028512:	019b      	lsls	r3, r3, #6
 8028514:	431a      	orrs	r2, r3
 8028516:	687b      	ldr	r3, [r7, #4]
 8028518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802851a:	085b      	lsrs	r3, r3, #1
 802851c:	3b01      	subs	r3, #1
 802851e:	041b      	lsls	r3, r3, #16
 8028520:	431a      	orrs	r2, r3
 8028522:	687b      	ldr	r3, [r7, #4]
 8028524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028526:	061b      	lsls	r3, r3, #24
 8028528:	4933      	ldr	r1, [pc, #204]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 802852a:	4313      	orrs	r3, r2
 802852c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802852e:	4b33      	ldr	r3, [pc, #204]	; (80285fc <HAL_RCC_OscConfig+0x4dc>)
 8028530:	2201      	movs	r2, #1
 8028532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028534:	f7fd ff78 	bl	8026428 <HAL_GetTick>
 8028538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802853a:	e008      	b.n	802854e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802853c:	f7fd ff74 	bl	8026428 <HAL_GetTick>
 8028540:	4602      	mov	r2, r0
 8028542:	693b      	ldr	r3, [r7, #16]
 8028544:	1ad3      	subs	r3, r2, r3
 8028546:	2b02      	cmp	r3, #2
 8028548:	d901      	bls.n	802854e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 802854a:	2303      	movs	r3, #3
 802854c:	e04d      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802854e:	4b2a      	ldr	r3, [pc, #168]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 8028550:	681b      	ldr	r3, [r3, #0]
 8028552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028556:	2b00      	cmp	r3, #0
 8028558:	d0f0      	beq.n	802853c <HAL_RCC_OscConfig+0x41c>
 802855a:	e045      	b.n	80285e8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802855c:	4b27      	ldr	r3, [pc, #156]	; (80285fc <HAL_RCC_OscConfig+0x4dc>)
 802855e:	2200      	movs	r2, #0
 8028560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028562:	f7fd ff61 	bl	8026428 <HAL_GetTick>
 8028566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028568:	e008      	b.n	802857c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802856a:	f7fd ff5d 	bl	8026428 <HAL_GetTick>
 802856e:	4602      	mov	r2, r0
 8028570:	693b      	ldr	r3, [r7, #16]
 8028572:	1ad3      	subs	r3, r2, r3
 8028574:	2b02      	cmp	r3, #2
 8028576:	d901      	bls.n	802857c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8028578:	2303      	movs	r3, #3
 802857a:	e036      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802857c:	4b1e      	ldr	r3, [pc, #120]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 802857e:	681b      	ldr	r3, [r3, #0]
 8028580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028584:	2b00      	cmp	r3, #0
 8028586:	d1f0      	bne.n	802856a <HAL_RCC_OscConfig+0x44a>
 8028588:	e02e      	b.n	80285e8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802858a:	687b      	ldr	r3, [r7, #4]
 802858c:	699b      	ldr	r3, [r3, #24]
 802858e:	2b01      	cmp	r3, #1
 8028590:	d101      	bne.n	8028596 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8028592:	2301      	movs	r3, #1
 8028594:	e029      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8028596:	4b18      	ldr	r3, [pc, #96]	; (80285f8 <HAL_RCC_OscConfig+0x4d8>)
 8028598:	685b      	ldr	r3, [r3, #4]
 802859a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802859c:	68fb      	ldr	r3, [r7, #12]
 802859e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80285a2:	687b      	ldr	r3, [r7, #4]
 80285a4:	69db      	ldr	r3, [r3, #28]
 80285a6:	429a      	cmp	r2, r3
 80285a8:	d11c      	bne.n	80285e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80285aa:	68fb      	ldr	r3, [r7, #12]
 80285ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80285b0:	687b      	ldr	r3, [r7, #4]
 80285b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80285b4:	429a      	cmp	r2, r3
 80285b6:	d115      	bne.n	80285e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80285b8:	68fa      	ldr	r2, [r7, #12]
 80285ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80285be:	4013      	ands	r3, r2
 80285c0:	687a      	ldr	r2, [r7, #4]
 80285c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80285c4:	4293      	cmp	r3, r2
 80285c6:	d10d      	bne.n	80285e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80285c8:	68fb      	ldr	r3, [r7, #12]
 80285ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80285ce:	687b      	ldr	r3, [r7, #4]
 80285d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80285d2:	429a      	cmp	r2, r3
 80285d4:	d106      	bne.n	80285e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80285d6:	68fb      	ldr	r3, [r7, #12]
 80285d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80285dc:	687b      	ldr	r3, [r7, #4]
 80285de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80285e0:	429a      	cmp	r2, r3
 80285e2:	d001      	beq.n	80285e8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80285e4:	2301      	movs	r3, #1
 80285e6:	e000      	b.n	80285ea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80285e8:	2300      	movs	r3, #0
}
 80285ea:	4618      	mov	r0, r3
 80285ec:	3718      	adds	r7, #24
 80285ee:	46bd      	mov	sp, r7
 80285f0:	bd80      	pop	{r7, pc}
 80285f2:	bf00      	nop
 80285f4:	40007000 	.word	0x40007000
 80285f8:	40023800 	.word	0x40023800
 80285fc:	42470060 	.word	0x42470060

08028600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8028600:	b580      	push	{r7, lr}
 8028602:	b084      	sub	sp, #16
 8028604:	af00      	add	r7, sp, #0
 8028606:	6078      	str	r0, [r7, #4]
 8028608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802860a:	687b      	ldr	r3, [r7, #4]
 802860c:	2b00      	cmp	r3, #0
 802860e:	d101      	bne.n	8028614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8028610:	2301      	movs	r3, #1
 8028612:	e0cc      	b.n	80287ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8028614:	4b68      	ldr	r3, [pc, #416]	; (80287b8 <HAL_RCC_ClockConfig+0x1b8>)
 8028616:	681b      	ldr	r3, [r3, #0]
 8028618:	f003 030f 	and.w	r3, r3, #15
 802861c:	683a      	ldr	r2, [r7, #0]
 802861e:	429a      	cmp	r2, r3
 8028620:	d90c      	bls.n	802863c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8028622:	4b65      	ldr	r3, [pc, #404]	; (80287b8 <HAL_RCC_ClockConfig+0x1b8>)
 8028624:	683a      	ldr	r2, [r7, #0]
 8028626:	b2d2      	uxtb	r2, r2
 8028628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802862a:	4b63      	ldr	r3, [pc, #396]	; (80287b8 <HAL_RCC_ClockConfig+0x1b8>)
 802862c:	681b      	ldr	r3, [r3, #0]
 802862e:	f003 030f 	and.w	r3, r3, #15
 8028632:	683a      	ldr	r2, [r7, #0]
 8028634:	429a      	cmp	r2, r3
 8028636:	d001      	beq.n	802863c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8028638:	2301      	movs	r3, #1
 802863a:	e0b8      	b.n	80287ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802863c:	687b      	ldr	r3, [r7, #4]
 802863e:	681b      	ldr	r3, [r3, #0]
 8028640:	f003 0302 	and.w	r3, r3, #2
 8028644:	2b00      	cmp	r3, #0
 8028646:	d020      	beq.n	802868a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028648:	687b      	ldr	r3, [r7, #4]
 802864a:	681b      	ldr	r3, [r3, #0]
 802864c:	f003 0304 	and.w	r3, r3, #4
 8028650:	2b00      	cmp	r3, #0
 8028652:	d005      	beq.n	8028660 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8028654:	4b59      	ldr	r3, [pc, #356]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 8028656:	689b      	ldr	r3, [r3, #8]
 8028658:	4a58      	ldr	r2, [pc, #352]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 802865a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802865e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028660:	687b      	ldr	r3, [r7, #4]
 8028662:	681b      	ldr	r3, [r3, #0]
 8028664:	f003 0308 	and.w	r3, r3, #8
 8028668:	2b00      	cmp	r3, #0
 802866a:	d005      	beq.n	8028678 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802866c:	4b53      	ldr	r3, [pc, #332]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 802866e:	689b      	ldr	r3, [r3, #8]
 8028670:	4a52      	ldr	r2, [pc, #328]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 8028672:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8028676:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8028678:	4b50      	ldr	r3, [pc, #320]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 802867a:	689b      	ldr	r3, [r3, #8]
 802867c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8028680:	687b      	ldr	r3, [r7, #4]
 8028682:	689b      	ldr	r3, [r3, #8]
 8028684:	494d      	ldr	r1, [pc, #308]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 8028686:	4313      	orrs	r3, r2
 8028688:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802868a:	687b      	ldr	r3, [r7, #4]
 802868c:	681b      	ldr	r3, [r3, #0]
 802868e:	f003 0301 	and.w	r3, r3, #1
 8028692:	2b00      	cmp	r3, #0
 8028694:	d044      	beq.n	8028720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8028696:	687b      	ldr	r3, [r7, #4]
 8028698:	685b      	ldr	r3, [r3, #4]
 802869a:	2b01      	cmp	r3, #1
 802869c:	d107      	bne.n	80286ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802869e:	4b47      	ldr	r3, [pc, #284]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 80286a0:	681b      	ldr	r3, [r3, #0]
 80286a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80286a6:	2b00      	cmp	r3, #0
 80286a8:	d119      	bne.n	80286de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80286aa:	2301      	movs	r3, #1
 80286ac:	e07f      	b.n	80287ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80286ae:	687b      	ldr	r3, [r7, #4]
 80286b0:	685b      	ldr	r3, [r3, #4]
 80286b2:	2b02      	cmp	r3, #2
 80286b4:	d003      	beq.n	80286be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80286b6:	687b      	ldr	r3, [r7, #4]
 80286b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80286ba:	2b03      	cmp	r3, #3
 80286bc:	d107      	bne.n	80286ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80286be:	4b3f      	ldr	r3, [pc, #252]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 80286c0:	681b      	ldr	r3, [r3, #0]
 80286c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80286c6:	2b00      	cmp	r3, #0
 80286c8:	d109      	bne.n	80286de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80286ca:	2301      	movs	r3, #1
 80286cc:	e06f      	b.n	80287ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80286ce:	4b3b      	ldr	r3, [pc, #236]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 80286d0:	681b      	ldr	r3, [r3, #0]
 80286d2:	f003 0302 	and.w	r3, r3, #2
 80286d6:	2b00      	cmp	r3, #0
 80286d8:	d101      	bne.n	80286de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80286da:	2301      	movs	r3, #1
 80286dc:	e067      	b.n	80287ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80286de:	4b37      	ldr	r3, [pc, #220]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 80286e0:	689b      	ldr	r3, [r3, #8]
 80286e2:	f023 0203 	bic.w	r2, r3, #3
 80286e6:	687b      	ldr	r3, [r7, #4]
 80286e8:	685b      	ldr	r3, [r3, #4]
 80286ea:	4934      	ldr	r1, [pc, #208]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 80286ec:	4313      	orrs	r3, r2
 80286ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80286f0:	f7fd fe9a 	bl	8026428 <HAL_GetTick>
 80286f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80286f6:	e00a      	b.n	802870e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80286f8:	f7fd fe96 	bl	8026428 <HAL_GetTick>
 80286fc:	4602      	mov	r2, r0
 80286fe:	68fb      	ldr	r3, [r7, #12]
 8028700:	1ad3      	subs	r3, r2, r3
 8028702:	f241 3288 	movw	r2, #5000	; 0x1388
 8028706:	4293      	cmp	r3, r2
 8028708:	d901      	bls.n	802870e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802870a:	2303      	movs	r3, #3
 802870c:	e04f      	b.n	80287ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802870e:	4b2b      	ldr	r3, [pc, #172]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 8028710:	689b      	ldr	r3, [r3, #8]
 8028712:	f003 020c 	and.w	r2, r3, #12
 8028716:	687b      	ldr	r3, [r7, #4]
 8028718:	685b      	ldr	r3, [r3, #4]
 802871a:	009b      	lsls	r3, r3, #2
 802871c:	429a      	cmp	r2, r3
 802871e:	d1eb      	bne.n	80286f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8028720:	4b25      	ldr	r3, [pc, #148]	; (80287b8 <HAL_RCC_ClockConfig+0x1b8>)
 8028722:	681b      	ldr	r3, [r3, #0]
 8028724:	f003 030f 	and.w	r3, r3, #15
 8028728:	683a      	ldr	r2, [r7, #0]
 802872a:	429a      	cmp	r2, r3
 802872c:	d20c      	bcs.n	8028748 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802872e:	4b22      	ldr	r3, [pc, #136]	; (80287b8 <HAL_RCC_ClockConfig+0x1b8>)
 8028730:	683a      	ldr	r2, [r7, #0]
 8028732:	b2d2      	uxtb	r2, r2
 8028734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8028736:	4b20      	ldr	r3, [pc, #128]	; (80287b8 <HAL_RCC_ClockConfig+0x1b8>)
 8028738:	681b      	ldr	r3, [r3, #0]
 802873a:	f003 030f 	and.w	r3, r3, #15
 802873e:	683a      	ldr	r2, [r7, #0]
 8028740:	429a      	cmp	r2, r3
 8028742:	d001      	beq.n	8028748 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8028744:	2301      	movs	r3, #1
 8028746:	e032      	b.n	80287ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028748:	687b      	ldr	r3, [r7, #4]
 802874a:	681b      	ldr	r3, [r3, #0]
 802874c:	f003 0304 	and.w	r3, r3, #4
 8028750:	2b00      	cmp	r3, #0
 8028752:	d008      	beq.n	8028766 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8028754:	4b19      	ldr	r3, [pc, #100]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 8028756:	689b      	ldr	r3, [r3, #8]
 8028758:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 802875c:	687b      	ldr	r3, [r7, #4]
 802875e:	68db      	ldr	r3, [r3, #12]
 8028760:	4916      	ldr	r1, [pc, #88]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 8028762:	4313      	orrs	r3, r2
 8028764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028766:	687b      	ldr	r3, [r7, #4]
 8028768:	681b      	ldr	r3, [r3, #0]
 802876a:	f003 0308 	and.w	r3, r3, #8
 802876e:	2b00      	cmp	r3, #0
 8028770:	d009      	beq.n	8028786 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8028772:	4b12      	ldr	r3, [pc, #72]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 8028774:	689b      	ldr	r3, [r3, #8]
 8028776:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802877a:	687b      	ldr	r3, [r7, #4]
 802877c:	691b      	ldr	r3, [r3, #16]
 802877e:	00db      	lsls	r3, r3, #3
 8028780:	490e      	ldr	r1, [pc, #56]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 8028782:	4313      	orrs	r3, r2
 8028784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8028786:	f000 f821 	bl	80287cc <HAL_RCC_GetSysClockFreq>
 802878a:	4601      	mov	r1, r0
 802878c:	4b0b      	ldr	r3, [pc, #44]	; (80287bc <HAL_RCC_ClockConfig+0x1bc>)
 802878e:	689b      	ldr	r3, [r3, #8]
 8028790:	091b      	lsrs	r3, r3, #4
 8028792:	f003 030f 	and.w	r3, r3, #15
 8028796:	4a0a      	ldr	r2, [pc, #40]	; (80287c0 <HAL_RCC_ClockConfig+0x1c0>)
 8028798:	5cd3      	ldrb	r3, [r2, r3]
 802879a:	fa21 f303 	lsr.w	r3, r1, r3
 802879e:	4a09      	ldr	r2, [pc, #36]	; (80287c4 <HAL_RCC_ClockConfig+0x1c4>)
 80287a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80287a2:	4b09      	ldr	r3, [pc, #36]	; (80287c8 <HAL_RCC_ClockConfig+0x1c8>)
 80287a4:	681b      	ldr	r3, [r3, #0]
 80287a6:	4618      	mov	r0, r3
 80287a8:	f7fd fdfa 	bl	80263a0 <HAL_InitTick>

  return HAL_OK;
 80287ac:	2300      	movs	r3, #0
}
 80287ae:	4618      	mov	r0, r3
 80287b0:	3710      	adds	r7, #16
 80287b2:	46bd      	mov	sp, r7
 80287b4:	bd80      	pop	{r7, pc}
 80287b6:	bf00      	nop
 80287b8:	40023c00 	.word	0x40023c00
 80287bc:	40023800 	.word	0x40023800
 80287c0:	0802cd74 	.word	0x0802cd74
 80287c4:	20000004 	.word	0x20000004
 80287c8:	20000008 	.word	0x20000008

080287cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80287cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80287ce:	b085      	sub	sp, #20
 80287d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80287d2:	2300      	movs	r3, #0
 80287d4:	607b      	str	r3, [r7, #4]
 80287d6:	2300      	movs	r3, #0
 80287d8:	60fb      	str	r3, [r7, #12]
 80287da:	2300      	movs	r3, #0
 80287dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80287de:	2300      	movs	r3, #0
 80287e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80287e2:	4b50      	ldr	r3, [pc, #320]	; (8028924 <HAL_RCC_GetSysClockFreq+0x158>)
 80287e4:	689b      	ldr	r3, [r3, #8]
 80287e6:	f003 030c 	and.w	r3, r3, #12
 80287ea:	2b04      	cmp	r3, #4
 80287ec:	d007      	beq.n	80287fe <HAL_RCC_GetSysClockFreq+0x32>
 80287ee:	2b08      	cmp	r3, #8
 80287f0:	d008      	beq.n	8028804 <HAL_RCC_GetSysClockFreq+0x38>
 80287f2:	2b00      	cmp	r3, #0
 80287f4:	f040 808d 	bne.w	8028912 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80287f8:	4b4b      	ldr	r3, [pc, #300]	; (8028928 <HAL_RCC_GetSysClockFreq+0x15c>)
 80287fa:	60bb      	str	r3, [r7, #8]
       break;
 80287fc:	e08c      	b.n	8028918 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80287fe:	4b4b      	ldr	r3, [pc, #300]	; (802892c <HAL_RCC_GetSysClockFreq+0x160>)
 8028800:	60bb      	str	r3, [r7, #8]
      break;
 8028802:	e089      	b.n	8028918 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8028804:	4b47      	ldr	r3, [pc, #284]	; (8028924 <HAL_RCC_GetSysClockFreq+0x158>)
 8028806:	685b      	ldr	r3, [r3, #4]
 8028808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802880c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802880e:	4b45      	ldr	r3, [pc, #276]	; (8028924 <HAL_RCC_GetSysClockFreq+0x158>)
 8028810:	685b      	ldr	r3, [r3, #4]
 8028812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8028816:	2b00      	cmp	r3, #0
 8028818:	d023      	beq.n	8028862 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802881a:	4b42      	ldr	r3, [pc, #264]	; (8028924 <HAL_RCC_GetSysClockFreq+0x158>)
 802881c:	685b      	ldr	r3, [r3, #4]
 802881e:	099b      	lsrs	r3, r3, #6
 8028820:	f04f 0400 	mov.w	r4, #0
 8028824:	f240 11ff 	movw	r1, #511	; 0x1ff
 8028828:	f04f 0200 	mov.w	r2, #0
 802882c:	ea03 0501 	and.w	r5, r3, r1
 8028830:	ea04 0602 	and.w	r6, r4, r2
 8028834:	4a3d      	ldr	r2, [pc, #244]	; (802892c <HAL_RCC_GetSysClockFreq+0x160>)
 8028836:	fb02 f106 	mul.w	r1, r2, r6
 802883a:	2200      	movs	r2, #0
 802883c:	fb02 f205 	mul.w	r2, r2, r5
 8028840:	440a      	add	r2, r1
 8028842:	493a      	ldr	r1, [pc, #232]	; (802892c <HAL_RCC_GetSysClockFreq+0x160>)
 8028844:	fba5 0101 	umull	r0, r1, r5, r1
 8028848:	1853      	adds	r3, r2, r1
 802884a:	4619      	mov	r1, r3
 802884c:	687b      	ldr	r3, [r7, #4]
 802884e:	f04f 0400 	mov.w	r4, #0
 8028852:	461a      	mov	r2, r3
 8028854:	4623      	mov	r3, r4
 8028856:	f7f8 f92f 	bl	8020ab8 <__aeabi_uldivmod>
 802885a:	4603      	mov	r3, r0
 802885c:	460c      	mov	r4, r1
 802885e:	60fb      	str	r3, [r7, #12]
 8028860:	e049      	b.n	80288f6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8028862:	4b30      	ldr	r3, [pc, #192]	; (8028924 <HAL_RCC_GetSysClockFreq+0x158>)
 8028864:	685b      	ldr	r3, [r3, #4]
 8028866:	099b      	lsrs	r3, r3, #6
 8028868:	f04f 0400 	mov.w	r4, #0
 802886c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8028870:	f04f 0200 	mov.w	r2, #0
 8028874:	ea03 0501 	and.w	r5, r3, r1
 8028878:	ea04 0602 	and.w	r6, r4, r2
 802887c:	4629      	mov	r1, r5
 802887e:	4632      	mov	r2, r6
 8028880:	f04f 0300 	mov.w	r3, #0
 8028884:	f04f 0400 	mov.w	r4, #0
 8028888:	0154      	lsls	r4, r2, #5
 802888a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 802888e:	014b      	lsls	r3, r1, #5
 8028890:	4619      	mov	r1, r3
 8028892:	4622      	mov	r2, r4
 8028894:	1b49      	subs	r1, r1, r5
 8028896:	eb62 0206 	sbc.w	r2, r2, r6
 802889a:	f04f 0300 	mov.w	r3, #0
 802889e:	f04f 0400 	mov.w	r4, #0
 80288a2:	0194      	lsls	r4, r2, #6
 80288a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80288a8:	018b      	lsls	r3, r1, #6
 80288aa:	1a5b      	subs	r3, r3, r1
 80288ac:	eb64 0402 	sbc.w	r4, r4, r2
 80288b0:	f04f 0100 	mov.w	r1, #0
 80288b4:	f04f 0200 	mov.w	r2, #0
 80288b8:	00e2      	lsls	r2, r4, #3
 80288ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80288be:	00d9      	lsls	r1, r3, #3
 80288c0:	460b      	mov	r3, r1
 80288c2:	4614      	mov	r4, r2
 80288c4:	195b      	adds	r3, r3, r5
 80288c6:	eb44 0406 	adc.w	r4, r4, r6
 80288ca:	f04f 0100 	mov.w	r1, #0
 80288ce:	f04f 0200 	mov.w	r2, #0
 80288d2:	02a2      	lsls	r2, r4, #10
 80288d4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80288d8:	0299      	lsls	r1, r3, #10
 80288da:	460b      	mov	r3, r1
 80288dc:	4614      	mov	r4, r2
 80288de:	4618      	mov	r0, r3
 80288e0:	4621      	mov	r1, r4
 80288e2:	687b      	ldr	r3, [r7, #4]
 80288e4:	f04f 0400 	mov.w	r4, #0
 80288e8:	461a      	mov	r2, r3
 80288ea:	4623      	mov	r3, r4
 80288ec:	f7f8 f8e4 	bl	8020ab8 <__aeabi_uldivmod>
 80288f0:	4603      	mov	r3, r0
 80288f2:	460c      	mov	r4, r1
 80288f4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80288f6:	4b0b      	ldr	r3, [pc, #44]	; (8028924 <HAL_RCC_GetSysClockFreq+0x158>)
 80288f8:	685b      	ldr	r3, [r3, #4]
 80288fa:	0c1b      	lsrs	r3, r3, #16
 80288fc:	f003 0303 	and.w	r3, r3, #3
 8028900:	3301      	adds	r3, #1
 8028902:	005b      	lsls	r3, r3, #1
 8028904:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8028906:	68fa      	ldr	r2, [r7, #12]
 8028908:	683b      	ldr	r3, [r7, #0]
 802890a:	fbb2 f3f3 	udiv	r3, r2, r3
 802890e:	60bb      	str	r3, [r7, #8]
      break;
 8028910:	e002      	b.n	8028918 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8028912:	4b05      	ldr	r3, [pc, #20]	; (8028928 <HAL_RCC_GetSysClockFreq+0x15c>)
 8028914:	60bb      	str	r3, [r7, #8]
      break;
 8028916:	bf00      	nop
    }
  }
  return sysclockfreq;
 8028918:	68bb      	ldr	r3, [r7, #8]
}
 802891a:	4618      	mov	r0, r3
 802891c:	3714      	adds	r7, #20
 802891e:	46bd      	mov	sp, r7
 8028920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028922:	bf00      	nop
 8028924:	40023800 	.word	0x40023800
 8028928:	00f42400 	.word	0x00f42400
 802892c:	00b71b00 	.word	0x00b71b00

08028930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8028930:	b480      	push	{r7}
 8028932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8028934:	4b03      	ldr	r3, [pc, #12]	; (8028944 <HAL_RCC_GetHCLKFreq+0x14>)
 8028936:	681b      	ldr	r3, [r3, #0]
}
 8028938:	4618      	mov	r0, r3
 802893a:	46bd      	mov	sp, r7
 802893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028940:	4770      	bx	lr
 8028942:	bf00      	nop
 8028944:	20000004 	.word	0x20000004

08028948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8028948:	b580      	push	{r7, lr}
 802894a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 802894c:	f7ff fff0 	bl	8028930 <HAL_RCC_GetHCLKFreq>
 8028950:	4601      	mov	r1, r0
 8028952:	4b05      	ldr	r3, [pc, #20]	; (8028968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8028954:	689b      	ldr	r3, [r3, #8]
 8028956:	0a9b      	lsrs	r3, r3, #10
 8028958:	f003 0307 	and.w	r3, r3, #7
 802895c:	4a03      	ldr	r2, [pc, #12]	; (802896c <HAL_RCC_GetPCLK1Freq+0x24>)
 802895e:	5cd3      	ldrb	r3, [r2, r3]
 8028960:	fa21 f303 	lsr.w	r3, r1, r3
}
 8028964:	4618      	mov	r0, r3
 8028966:	bd80      	pop	{r7, pc}
 8028968:	40023800 	.word	0x40023800
 802896c:	0802cd84 	.word	0x0802cd84

08028970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8028970:	b580      	push	{r7, lr}
 8028972:	b082      	sub	sp, #8
 8028974:	af00      	add	r7, sp, #0
 8028976:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8028978:	687b      	ldr	r3, [r7, #4]
 802897a:	2b00      	cmp	r3, #0
 802897c:	d101      	bne.n	8028982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802897e:	2301      	movs	r3, #1
 8028980:	e056      	b.n	8028a30 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8028982:	687b      	ldr	r3, [r7, #4]
 8028984:	2200      	movs	r2, #0
 8028986:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8028988:	687b      	ldr	r3, [r7, #4]
 802898a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802898e:	b2db      	uxtb	r3, r3
 8028990:	2b00      	cmp	r3, #0
 8028992:	d106      	bne.n	80289a2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8028994:	687b      	ldr	r3, [r7, #4]
 8028996:	2200      	movs	r2, #0
 8028998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802899c:	6878      	ldr	r0, [r7, #4]
 802899e:	f7fc fecf 	bl	8025740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80289a2:	687b      	ldr	r3, [r7, #4]
 80289a4:	2202      	movs	r2, #2
 80289a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80289aa:	687b      	ldr	r3, [r7, #4]
 80289ac:	681b      	ldr	r3, [r3, #0]
 80289ae:	681a      	ldr	r2, [r3, #0]
 80289b0:	687b      	ldr	r3, [r7, #4]
 80289b2:	681b      	ldr	r3, [r3, #0]
 80289b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80289b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80289ba:	687b      	ldr	r3, [r7, #4]
 80289bc:	685a      	ldr	r2, [r3, #4]
 80289be:	687b      	ldr	r3, [r7, #4]
 80289c0:	689b      	ldr	r3, [r3, #8]
 80289c2:	431a      	orrs	r2, r3
 80289c4:	687b      	ldr	r3, [r7, #4]
 80289c6:	68db      	ldr	r3, [r3, #12]
 80289c8:	431a      	orrs	r2, r3
 80289ca:	687b      	ldr	r3, [r7, #4]
 80289cc:	691b      	ldr	r3, [r3, #16]
 80289ce:	431a      	orrs	r2, r3
 80289d0:	687b      	ldr	r3, [r7, #4]
 80289d2:	695b      	ldr	r3, [r3, #20]
 80289d4:	431a      	orrs	r2, r3
 80289d6:	687b      	ldr	r3, [r7, #4]
 80289d8:	699b      	ldr	r3, [r3, #24]
 80289da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80289de:	431a      	orrs	r2, r3
 80289e0:	687b      	ldr	r3, [r7, #4]
 80289e2:	69db      	ldr	r3, [r3, #28]
 80289e4:	431a      	orrs	r2, r3
 80289e6:	687b      	ldr	r3, [r7, #4]
 80289e8:	6a1b      	ldr	r3, [r3, #32]
 80289ea:	ea42 0103 	orr.w	r1, r2, r3
 80289ee:	687b      	ldr	r3, [r7, #4]
 80289f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80289f2:	687b      	ldr	r3, [r7, #4]
 80289f4:	681b      	ldr	r3, [r3, #0]
 80289f6:	430a      	orrs	r2, r1
 80289f8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80289fa:	687b      	ldr	r3, [r7, #4]
 80289fc:	699b      	ldr	r3, [r3, #24]
 80289fe:	0c1b      	lsrs	r3, r3, #16
 8028a00:	f003 0104 	and.w	r1, r3, #4
 8028a04:	687b      	ldr	r3, [r7, #4]
 8028a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028a08:	687b      	ldr	r3, [r7, #4]
 8028a0a:	681b      	ldr	r3, [r3, #0]
 8028a0c:	430a      	orrs	r2, r1
 8028a0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8028a10:	687b      	ldr	r3, [r7, #4]
 8028a12:	681b      	ldr	r3, [r3, #0]
 8028a14:	69da      	ldr	r2, [r3, #28]
 8028a16:	687b      	ldr	r3, [r7, #4]
 8028a18:	681b      	ldr	r3, [r3, #0]
 8028a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8028a1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8028a20:	687b      	ldr	r3, [r7, #4]
 8028a22:	2200      	movs	r2, #0
 8028a24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8028a26:	687b      	ldr	r3, [r7, #4]
 8028a28:	2201      	movs	r2, #1
 8028a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8028a2e:	2300      	movs	r3, #0
}
 8028a30:	4618      	mov	r0, r3
 8028a32:	3708      	adds	r7, #8
 8028a34:	46bd      	mov	sp, r7
 8028a36:	bd80      	pop	{r7, pc}

08028a38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028a38:	b580      	push	{r7, lr}
 8028a3a:	b088      	sub	sp, #32
 8028a3c:	af00      	add	r7, sp, #0
 8028a3e:	60f8      	str	r0, [r7, #12]
 8028a40:	60b9      	str	r1, [r7, #8]
 8028a42:	603b      	str	r3, [r7, #0]
 8028a44:	4613      	mov	r3, r2
 8028a46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028a48:	2300      	movs	r3, #0
 8028a4a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028a4c:	68fb      	ldr	r3, [r7, #12]
 8028a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028a52:	2b01      	cmp	r3, #1
 8028a54:	d101      	bne.n	8028a5a <HAL_SPI_Transmit+0x22>
 8028a56:	2302      	movs	r3, #2
 8028a58:	e11e      	b.n	8028c98 <HAL_SPI_Transmit+0x260>
 8028a5a:	68fb      	ldr	r3, [r7, #12]
 8028a5c:	2201      	movs	r2, #1
 8028a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028a62:	f7fd fce1 	bl	8026428 <HAL_GetTick>
 8028a66:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8028a68:	88fb      	ldrh	r3, [r7, #6]
 8028a6a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028a6c:	68fb      	ldr	r3, [r7, #12]
 8028a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028a72:	b2db      	uxtb	r3, r3
 8028a74:	2b01      	cmp	r3, #1
 8028a76:	d002      	beq.n	8028a7e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8028a78:	2302      	movs	r3, #2
 8028a7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028a7c:	e103      	b.n	8028c86 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8028a7e:	68bb      	ldr	r3, [r7, #8]
 8028a80:	2b00      	cmp	r3, #0
 8028a82:	d002      	beq.n	8028a8a <HAL_SPI_Transmit+0x52>
 8028a84:	88fb      	ldrh	r3, [r7, #6]
 8028a86:	2b00      	cmp	r3, #0
 8028a88:	d102      	bne.n	8028a90 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8028a8a:	2301      	movs	r3, #1
 8028a8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028a8e:	e0fa      	b.n	8028c86 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8028a90:	68fb      	ldr	r3, [r7, #12]
 8028a92:	2203      	movs	r2, #3
 8028a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028a98:	68fb      	ldr	r3, [r7, #12]
 8028a9a:	2200      	movs	r2, #0
 8028a9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8028a9e:	68fb      	ldr	r3, [r7, #12]
 8028aa0:	68ba      	ldr	r2, [r7, #8]
 8028aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8028aa4:	68fb      	ldr	r3, [r7, #12]
 8028aa6:	88fa      	ldrh	r2, [r7, #6]
 8028aa8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8028aaa:	68fb      	ldr	r3, [r7, #12]
 8028aac:	88fa      	ldrh	r2, [r7, #6]
 8028aae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8028ab0:	68fb      	ldr	r3, [r7, #12]
 8028ab2:	2200      	movs	r2, #0
 8028ab4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8028ab6:	68fb      	ldr	r3, [r7, #12]
 8028ab8:	2200      	movs	r2, #0
 8028aba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8028abc:	68fb      	ldr	r3, [r7, #12]
 8028abe:	2200      	movs	r2, #0
 8028ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8028ac2:	68fb      	ldr	r3, [r7, #12]
 8028ac4:	2200      	movs	r2, #0
 8028ac6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8028ac8:	68fb      	ldr	r3, [r7, #12]
 8028aca:	2200      	movs	r2, #0
 8028acc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028ace:	68fb      	ldr	r3, [r7, #12]
 8028ad0:	689b      	ldr	r3, [r3, #8]
 8028ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028ad6:	d107      	bne.n	8028ae8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8028ad8:	68fb      	ldr	r3, [r7, #12]
 8028ada:	681b      	ldr	r3, [r3, #0]
 8028adc:	681a      	ldr	r2, [r3, #0]
 8028ade:	68fb      	ldr	r3, [r7, #12]
 8028ae0:	681b      	ldr	r3, [r3, #0]
 8028ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8028ae6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028ae8:	68fb      	ldr	r3, [r7, #12]
 8028aea:	681b      	ldr	r3, [r3, #0]
 8028aec:	681b      	ldr	r3, [r3, #0]
 8028aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028af2:	2b40      	cmp	r3, #64	; 0x40
 8028af4:	d007      	beq.n	8028b06 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028af6:	68fb      	ldr	r3, [r7, #12]
 8028af8:	681b      	ldr	r3, [r3, #0]
 8028afa:	681a      	ldr	r2, [r3, #0]
 8028afc:	68fb      	ldr	r3, [r7, #12]
 8028afe:	681b      	ldr	r3, [r3, #0]
 8028b00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028b04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028b06:	68fb      	ldr	r3, [r7, #12]
 8028b08:	68db      	ldr	r3, [r3, #12]
 8028b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028b0e:	d14b      	bne.n	8028ba8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028b10:	68fb      	ldr	r3, [r7, #12]
 8028b12:	685b      	ldr	r3, [r3, #4]
 8028b14:	2b00      	cmp	r3, #0
 8028b16:	d002      	beq.n	8028b1e <HAL_SPI_Transmit+0xe6>
 8028b18:	8afb      	ldrh	r3, [r7, #22]
 8028b1a:	2b01      	cmp	r3, #1
 8028b1c:	d13e      	bne.n	8028b9c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028b1e:	68fb      	ldr	r3, [r7, #12]
 8028b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b22:	881a      	ldrh	r2, [r3, #0]
 8028b24:	68fb      	ldr	r3, [r7, #12]
 8028b26:	681b      	ldr	r3, [r3, #0]
 8028b28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8028b2a:	68fb      	ldr	r3, [r7, #12]
 8028b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b2e:	1c9a      	adds	r2, r3, #2
 8028b30:	68fb      	ldr	r3, [r7, #12]
 8028b32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028b34:	68fb      	ldr	r3, [r7, #12]
 8028b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028b38:	b29b      	uxth	r3, r3
 8028b3a:	3b01      	subs	r3, #1
 8028b3c:	b29a      	uxth	r2, r3
 8028b3e:	68fb      	ldr	r3, [r7, #12]
 8028b40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8028b42:	e02b      	b.n	8028b9c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028b44:	68fb      	ldr	r3, [r7, #12]
 8028b46:	681b      	ldr	r3, [r3, #0]
 8028b48:	689b      	ldr	r3, [r3, #8]
 8028b4a:	f003 0302 	and.w	r3, r3, #2
 8028b4e:	2b02      	cmp	r3, #2
 8028b50:	d112      	bne.n	8028b78 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028b52:	68fb      	ldr	r3, [r7, #12]
 8028b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b56:	881a      	ldrh	r2, [r3, #0]
 8028b58:	68fb      	ldr	r3, [r7, #12]
 8028b5a:	681b      	ldr	r3, [r3, #0]
 8028b5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028b5e:	68fb      	ldr	r3, [r7, #12]
 8028b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b62:	1c9a      	adds	r2, r3, #2
 8028b64:	68fb      	ldr	r3, [r7, #12]
 8028b66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028b68:	68fb      	ldr	r3, [r7, #12]
 8028b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028b6c:	b29b      	uxth	r3, r3
 8028b6e:	3b01      	subs	r3, #1
 8028b70:	b29a      	uxth	r2, r3
 8028b72:	68fb      	ldr	r3, [r7, #12]
 8028b74:	86da      	strh	r2, [r3, #54]	; 0x36
 8028b76:	e011      	b.n	8028b9c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028b78:	f7fd fc56 	bl	8026428 <HAL_GetTick>
 8028b7c:	4602      	mov	r2, r0
 8028b7e:	69bb      	ldr	r3, [r7, #24]
 8028b80:	1ad3      	subs	r3, r2, r3
 8028b82:	683a      	ldr	r2, [r7, #0]
 8028b84:	429a      	cmp	r2, r3
 8028b86:	d803      	bhi.n	8028b90 <HAL_SPI_Transmit+0x158>
 8028b88:	683b      	ldr	r3, [r7, #0]
 8028b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028b8e:	d102      	bne.n	8028b96 <HAL_SPI_Transmit+0x15e>
 8028b90:	683b      	ldr	r3, [r7, #0]
 8028b92:	2b00      	cmp	r3, #0
 8028b94:	d102      	bne.n	8028b9c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8028b96:	2303      	movs	r3, #3
 8028b98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028b9a:	e074      	b.n	8028c86 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8028b9c:	68fb      	ldr	r3, [r7, #12]
 8028b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028ba0:	b29b      	uxth	r3, r3
 8028ba2:	2b00      	cmp	r3, #0
 8028ba4:	d1ce      	bne.n	8028b44 <HAL_SPI_Transmit+0x10c>
 8028ba6:	e04c      	b.n	8028c42 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028ba8:	68fb      	ldr	r3, [r7, #12]
 8028baa:	685b      	ldr	r3, [r3, #4]
 8028bac:	2b00      	cmp	r3, #0
 8028bae:	d002      	beq.n	8028bb6 <HAL_SPI_Transmit+0x17e>
 8028bb0:	8afb      	ldrh	r3, [r7, #22]
 8028bb2:	2b01      	cmp	r3, #1
 8028bb4:	d140      	bne.n	8028c38 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028bb6:	68fb      	ldr	r3, [r7, #12]
 8028bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028bba:	68fb      	ldr	r3, [r7, #12]
 8028bbc:	681b      	ldr	r3, [r3, #0]
 8028bbe:	330c      	adds	r3, #12
 8028bc0:	7812      	ldrb	r2, [r2, #0]
 8028bc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028bc4:	68fb      	ldr	r3, [r7, #12]
 8028bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028bc8:	1c5a      	adds	r2, r3, #1
 8028bca:	68fb      	ldr	r3, [r7, #12]
 8028bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028bce:	68fb      	ldr	r3, [r7, #12]
 8028bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028bd2:	b29b      	uxth	r3, r3
 8028bd4:	3b01      	subs	r3, #1
 8028bd6:	b29a      	uxth	r2, r3
 8028bd8:	68fb      	ldr	r3, [r7, #12]
 8028bda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8028bdc:	e02c      	b.n	8028c38 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028bde:	68fb      	ldr	r3, [r7, #12]
 8028be0:	681b      	ldr	r3, [r3, #0]
 8028be2:	689b      	ldr	r3, [r3, #8]
 8028be4:	f003 0302 	and.w	r3, r3, #2
 8028be8:	2b02      	cmp	r3, #2
 8028bea:	d113      	bne.n	8028c14 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028bec:	68fb      	ldr	r3, [r7, #12]
 8028bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028bf0:	68fb      	ldr	r3, [r7, #12]
 8028bf2:	681b      	ldr	r3, [r3, #0]
 8028bf4:	330c      	adds	r3, #12
 8028bf6:	7812      	ldrb	r2, [r2, #0]
 8028bf8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8028bfa:	68fb      	ldr	r3, [r7, #12]
 8028bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028bfe:	1c5a      	adds	r2, r3, #1
 8028c00:	68fb      	ldr	r3, [r7, #12]
 8028c02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028c04:	68fb      	ldr	r3, [r7, #12]
 8028c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028c08:	b29b      	uxth	r3, r3
 8028c0a:	3b01      	subs	r3, #1
 8028c0c:	b29a      	uxth	r2, r3
 8028c0e:	68fb      	ldr	r3, [r7, #12]
 8028c10:	86da      	strh	r2, [r3, #54]	; 0x36
 8028c12:	e011      	b.n	8028c38 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028c14:	f7fd fc08 	bl	8026428 <HAL_GetTick>
 8028c18:	4602      	mov	r2, r0
 8028c1a:	69bb      	ldr	r3, [r7, #24]
 8028c1c:	1ad3      	subs	r3, r2, r3
 8028c1e:	683a      	ldr	r2, [r7, #0]
 8028c20:	429a      	cmp	r2, r3
 8028c22:	d803      	bhi.n	8028c2c <HAL_SPI_Transmit+0x1f4>
 8028c24:	683b      	ldr	r3, [r7, #0]
 8028c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028c2a:	d102      	bne.n	8028c32 <HAL_SPI_Transmit+0x1fa>
 8028c2c:	683b      	ldr	r3, [r7, #0]
 8028c2e:	2b00      	cmp	r3, #0
 8028c30:	d102      	bne.n	8028c38 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8028c32:	2303      	movs	r3, #3
 8028c34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028c36:	e026      	b.n	8028c86 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8028c38:	68fb      	ldr	r3, [r7, #12]
 8028c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028c3c:	b29b      	uxth	r3, r3
 8028c3e:	2b00      	cmp	r3, #0
 8028c40:	d1cd      	bne.n	8028bde <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028c42:	69ba      	ldr	r2, [r7, #24]
 8028c44:	6839      	ldr	r1, [r7, #0]
 8028c46:	68f8      	ldr	r0, [r7, #12]
 8028c48:	f000 fba4 	bl	8029394 <SPI_EndRxTxTransaction>
 8028c4c:	4603      	mov	r3, r0
 8028c4e:	2b00      	cmp	r3, #0
 8028c50:	d002      	beq.n	8028c58 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028c52:	68fb      	ldr	r3, [r7, #12]
 8028c54:	2220      	movs	r2, #32
 8028c56:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028c58:	68fb      	ldr	r3, [r7, #12]
 8028c5a:	689b      	ldr	r3, [r3, #8]
 8028c5c:	2b00      	cmp	r3, #0
 8028c5e:	d10a      	bne.n	8028c76 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028c60:	2300      	movs	r3, #0
 8028c62:	613b      	str	r3, [r7, #16]
 8028c64:	68fb      	ldr	r3, [r7, #12]
 8028c66:	681b      	ldr	r3, [r3, #0]
 8028c68:	68db      	ldr	r3, [r3, #12]
 8028c6a:	613b      	str	r3, [r7, #16]
 8028c6c:	68fb      	ldr	r3, [r7, #12]
 8028c6e:	681b      	ldr	r3, [r3, #0]
 8028c70:	689b      	ldr	r3, [r3, #8]
 8028c72:	613b      	str	r3, [r7, #16]
 8028c74:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028c76:	68fb      	ldr	r3, [r7, #12]
 8028c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028c7a:	2b00      	cmp	r3, #0
 8028c7c:	d002      	beq.n	8028c84 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8028c7e:	2301      	movs	r3, #1
 8028c80:	77fb      	strb	r3, [r7, #31]
 8028c82:	e000      	b.n	8028c86 <HAL_SPI_Transmit+0x24e>
  }

error:
 8028c84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028c86:	68fb      	ldr	r3, [r7, #12]
 8028c88:	2201      	movs	r2, #1
 8028c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8028c8e:	68fb      	ldr	r3, [r7, #12]
 8028c90:	2200      	movs	r2, #0
 8028c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028c96:	7ffb      	ldrb	r3, [r7, #31]
}
 8028c98:	4618      	mov	r0, r3
 8028c9a:	3720      	adds	r7, #32
 8028c9c:	46bd      	mov	sp, r7
 8028c9e:	bd80      	pop	{r7, pc}

08028ca0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028ca0:	b580      	push	{r7, lr}
 8028ca2:	b088      	sub	sp, #32
 8028ca4:	af02      	add	r7, sp, #8
 8028ca6:	60f8      	str	r0, [r7, #12]
 8028ca8:	60b9      	str	r1, [r7, #8]
 8028caa:	603b      	str	r3, [r7, #0]
 8028cac:	4613      	mov	r3, r2
 8028cae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028cb0:	2300      	movs	r3, #0
 8028cb2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8028cb4:	68fb      	ldr	r3, [r7, #12]
 8028cb6:	685b      	ldr	r3, [r3, #4]
 8028cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028cbc:	d112      	bne.n	8028ce4 <HAL_SPI_Receive+0x44>
 8028cbe:	68fb      	ldr	r3, [r7, #12]
 8028cc0:	689b      	ldr	r3, [r3, #8]
 8028cc2:	2b00      	cmp	r3, #0
 8028cc4:	d10e      	bne.n	8028ce4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8028cc6:	68fb      	ldr	r3, [r7, #12]
 8028cc8:	2204      	movs	r2, #4
 8028cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8028cce:	88fa      	ldrh	r2, [r7, #6]
 8028cd0:	683b      	ldr	r3, [r7, #0]
 8028cd2:	9300      	str	r3, [sp, #0]
 8028cd4:	4613      	mov	r3, r2
 8028cd6:	68ba      	ldr	r2, [r7, #8]
 8028cd8:	68b9      	ldr	r1, [r7, #8]
 8028cda:	68f8      	ldr	r0, [r7, #12]
 8028cdc:	f000 f8e9 	bl	8028eb2 <HAL_SPI_TransmitReceive>
 8028ce0:	4603      	mov	r3, r0
 8028ce2:	e0e2      	b.n	8028eaa <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028ce4:	68fb      	ldr	r3, [r7, #12]
 8028ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028cea:	2b01      	cmp	r3, #1
 8028cec:	d101      	bne.n	8028cf2 <HAL_SPI_Receive+0x52>
 8028cee:	2302      	movs	r3, #2
 8028cf0:	e0db      	b.n	8028eaa <HAL_SPI_Receive+0x20a>
 8028cf2:	68fb      	ldr	r3, [r7, #12]
 8028cf4:	2201      	movs	r2, #1
 8028cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028cfa:	f7fd fb95 	bl	8026428 <HAL_GetTick>
 8028cfe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028d00:	68fb      	ldr	r3, [r7, #12]
 8028d02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028d06:	b2db      	uxtb	r3, r3
 8028d08:	2b01      	cmp	r3, #1
 8028d0a:	d002      	beq.n	8028d12 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8028d0c:	2302      	movs	r3, #2
 8028d0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028d10:	e0c2      	b.n	8028e98 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8028d12:	68bb      	ldr	r3, [r7, #8]
 8028d14:	2b00      	cmp	r3, #0
 8028d16:	d002      	beq.n	8028d1e <HAL_SPI_Receive+0x7e>
 8028d18:	88fb      	ldrh	r3, [r7, #6]
 8028d1a:	2b00      	cmp	r3, #0
 8028d1c:	d102      	bne.n	8028d24 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8028d1e:	2301      	movs	r3, #1
 8028d20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028d22:	e0b9      	b.n	8028e98 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8028d24:	68fb      	ldr	r3, [r7, #12]
 8028d26:	2204      	movs	r2, #4
 8028d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028d2c:	68fb      	ldr	r3, [r7, #12]
 8028d2e:	2200      	movs	r2, #0
 8028d30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8028d32:	68fb      	ldr	r3, [r7, #12]
 8028d34:	68ba      	ldr	r2, [r7, #8]
 8028d36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8028d38:	68fb      	ldr	r3, [r7, #12]
 8028d3a:	88fa      	ldrh	r2, [r7, #6]
 8028d3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8028d3e:	68fb      	ldr	r3, [r7, #12]
 8028d40:	88fa      	ldrh	r2, [r7, #6]
 8028d42:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8028d44:	68fb      	ldr	r3, [r7, #12]
 8028d46:	2200      	movs	r2, #0
 8028d48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8028d4a:	68fb      	ldr	r3, [r7, #12]
 8028d4c:	2200      	movs	r2, #0
 8028d4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8028d50:	68fb      	ldr	r3, [r7, #12]
 8028d52:	2200      	movs	r2, #0
 8028d54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8028d56:	68fb      	ldr	r3, [r7, #12]
 8028d58:	2200      	movs	r2, #0
 8028d5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028d5c:	68fb      	ldr	r3, [r7, #12]
 8028d5e:	2200      	movs	r2, #0
 8028d60:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028d62:	68fb      	ldr	r3, [r7, #12]
 8028d64:	689b      	ldr	r3, [r3, #8]
 8028d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028d6a:	d107      	bne.n	8028d7c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8028d6c:	68fb      	ldr	r3, [r7, #12]
 8028d6e:	681b      	ldr	r3, [r3, #0]
 8028d70:	681a      	ldr	r2, [r3, #0]
 8028d72:	68fb      	ldr	r3, [r7, #12]
 8028d74:	681b      	ldr	r3, [r3, #0]
 8028d76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8028d7a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028d7c:	68fb      	ldr	r3, [r7, #12]
 8028d7e:	681b      	ldr	r3, [r3, #0]
 8028d80:	681b      	ldr	r3, [r3, #0]
 8028d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028d86:	2b40      	cmp	r3, #64	; 0x40
 8028d88:	d007      	beq.n	8028d9a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028d8a:	68fb      	ldr	r3, [r7, #12]
 8028d8c:	681b      	ldr	r3, [r3, #0]
 8028d8e:	681a      	ldr	r2, [r3, #0]
 8028d90:	68fb      	ldr	r3, [r7, #12]
 8028d92:	681b      	ldr	r3, [r3, #0]
 8028d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028d98:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8028d9a:	68fb      	ldr	r3, [r7, #12]
 8028d9c:	68db      	ldr	r3, [r3, #12]
 8028d9e:	2b00      	cmp	r3, #0
 8028da0:	d162      	bne.n	8028e68 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8028da2:	e02e      	b.n	8028e02 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028da4:	68fb      	ldr	r3, [r7, #12]
 8028da6:	681b      	ldr	r3, [r3, #0]
 8028da8:	689b      	ldr	r3, [r3, #8]
 8028daa:	f003 0301 	and.w	r3, r3, #1
 8028dae:	2b01      	cmp	r3, #1
 8028db0:	d115      	bne.n	8028dde <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8028db2:	68fb      	ldr	r3, [r7, #12]
 8028db4:	681b      	ldr	r3, [r3, #0]
 8028db6:	f103 020c 	add.w	r2, r3, #12
 8028dba:	68fb      	ldr	r3, [r7, #12]
 8028dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028dbe:	7812      	ldrb	r2, [r2, #0]
 8028dc0:	b2d2      	uxtb	r2, r2
 8028dc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8028dc4:	68fb      	ldr	r3, [r7, #12]
 8028dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028dc8:	1c5a      	adds	r2, r3, #1
 8028dca:	68fb      	ldr	r3, [r7, #12]
 8028dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028dce:	68fb      	ldr	r3, [r7, #12]
 8028dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028dd2:	b29b      	uxth	r3, r3
 8028dd4:	3b01      	subs	r3, #1
 8028dd6:	b29a      	uxth	r2, r3
 8028dd8:	68fb      	ldr	r3, [r7, #12]
 8028dda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028ddc:	e011      	b.n	8028e02 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028dde:	f7fd fb23 	bl	8026428 <HAL_GetTick>
 8028de2:	4602      	mov	r2, r0
 8028de4:	693b      	ldr	r3, [r7, #16]
 8028de6:	1ad3      	subs	r3, r2, r3
 8028de8:	683a      	ldr	r2, [r7, #0]
 8028dea:	429a      	cmp	r2, r3
 8028dec:	d803      	bhi.n	8028df6 <HAL_SPI_Receive+0x156>
 8028dee:	683b      	ldr	r3, [r7, #0]
 8028df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028df4:	d102      	bne.n	8028dfc <HAL_SPI_Receive+0x15c>
 8028df6:	683b      	ldr	r3, [r7, #0]
 8028df8:	2b00      	cmp	r3, #0
 8028dfa:	d102      	bne.n	8028e02 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8028dfc:	2303      	movs	r3, #3
 8028dfe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028e00:	e04a      	b.n	8028e98 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028e02:	68fb      	ldr	r3, [r7, #12]
 8028e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028e06:	b29b      	uxth	r3, r3
 8028e08:	2b00      	cmp	r3, #0
 8028e0a:	d1cb      	bne.n	8028da4 <HAL_SPI_Receive+0x104>
 8028e0c:	e031      	b.n	8028e72 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028e0e:	68fb      	ldr	r3, [r7, #12]
 8028e10:	681b      	ldr	r3, [r3, #0]
 8028e12:	689b      	ldr	r3, [r3, #8]
 8028e14:	f003 0301 	and.w	r3, r3, #1
 8028e18:	2b01      	cmp	r3, #1
 8028e1a:	d113      	bne.n	8028e44 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028e1c:	68fb      	ldr	r3, [r7, #12]
 8028e1e:	681b      	ldr	r3, [r3, #0]
 8028e20:	68da      	ldr	r2, [r3, #12]
 8028e22:	68fb      	ldr	r3, [r7, #12]
 8028e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028e26:	b292      	uxth	r2, r2
 8028e28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028e2a:	68fb      	ldr	r3, [r7, #12]
 8028e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028e2e:	1c9a      	adds	r2, r3, #2
 8028e30:	68fb      	ldr	r3, [r7, #12]
 8028e32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028e34:	68fb      	ldr	r3, [r7, #12]
 8028e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028e38:	b29b      	uxth	r3, r3
 8028e3a:	3b01      	subs	r3, #1
 8028e3c:	b29a      	uxth	r2, r3
 8028e3e:	68fb      	ldr	r3, [r7, #12]
 8028e40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028e42:	e011      	b.n	8028e68 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028e44:	f7fd faf0 	bl	8026428 <HAL_GetTick>
 8028e48:	4602      	mov	r2, r0
 8028e4a:	693b      	ldr	r3, [r7, #16]
 8028e4c:	1ad3      	subs	r3, r2, r3
 8028e4e:	683a      	ldr	r2, [r7, #0]
 8028e50:	429a      	cmp	r2, r3
 8028e52:	d803      	bhi.n	8028e5c <HAL_SPI_Receive+0x1bc>
 8028e54:	683b      	ldr	r3, [r7, #0]
 8028e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028e5a:	d102      	bne.n	8028e62 <HAL_SPI_Receive+0x1c2>
 8028e5c:	683b      	ldr	r3, [r7, #0]
 8028e5e:	2b00      	cmp	r3, #0
 8028e60:	d102      	bne.n	8028e68 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8028e62:	2303      	movs	r3, #3
 8028e64:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028e66:	e017      	b.n	8028e98 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028e68:	68fb      	ldr	r3, [r7, #12]
 8028e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028e6c:	b29b      	uxth	r3, r3
 8028e6e:	2b00      	cmp	r3, #0
 8028e70:	d1cd      	bne.n	8028e0e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028e72:	693a      	ldr	r2, [r7, #16]
 8028e74:	6839      	ldr	r1, [r7, #0]
 8028e76:	68f8      	ldr	r0, [r7, #12]
 8028e78:	f000 fa27 	bl	80292ca <SPI_EndRxTransaction>
 8028e7c:	4603      	mov	r3, r0
 8028e7e:	2b00      	cmp	r3, #0
 8028e80:	d002      	beq.n	8028e88 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028e82:	68fb      	ldr	r3, [r7, #12]
 8028e84:	2220      	movs	r2, #32
 8028e86:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028e88:	68fb      	ldr	r3, [r7, #12]
 8028e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028e8c:	2b00      	cmp	r3, #0
 8028e8e:	d002      	beq.n	8028e96 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8028e90:	2301      	movs	r3, #1
 8028e92:	75fb      	strb	r3, [r7, #23]
 8028e94:	e000      	b.n	8028e98 <HAL_SPI_Receive+0x1f8>
  }

error :
 8028e96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028e98:	68fb      	ldr	r3, [r7, #12]
 8028e9a:	2201      	movs	r2, #1
 8028e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028ea0:	68fb      	ldr	r3, [r7, #12]
 8028ea2:	2200      	movs	r2, #0
 8028ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8028eaa:	4618      	mov	r0, r3
 8028eac:	3718      	adds	r7, #24
 8028eae:	46bd      	mov	sp, r7
 8028eb0:	bd80      	pop	{r7, pc}

08028eb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8028eb2:	b580      	push	{r7, lr}
 8028eb4:	b08c      	sub	sp, #48	; 0x30
 8028eb6:	af00      	add	r7, sp, #0
 8028eb8:	60f8      	str	r0, [r7, #12]
 8028eba:	60b9      	str	r1, [r7, #8]
 8028ebc:	607a      	str	r2, [r7, #4]
 8028ebe:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8028ec0:	2301      	movs	r3, #1
 8028ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8028ec4:	2300      	movs	r3, #0
 8028ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028eca:	68fb      	ldr	r3, [r7, #12]
 8028ecc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028ed0:	2b01      	cmp	r3, #1
 8028ed2:	d101      	bne.n	8028ed8 <HAL_SPI_TransmitReceive+0x26>
 8028ed4:	2302      	movs	r3, #2
 8028ed6:	e18a      	b.n	80291ee <HAL_SPI_TransmitReceive+0x33c>
 8028ed8:	68fb      	ldr	r3, [r7, #12]
 8028eda:	2201      	movs	r2, #1
 8028edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028ee0:	f7fd faa2 	bl	8026428 <HAL_GetTick>
 8028ee4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8028ee6:	68fb      	ldr	r3, [r7, #12]
 8028ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028eec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8028ef0:	68fb      	ldr	r3, [r7, #12]
 8028ef2:	685b      	ldr	r3, [r3, #4]
 8028ef4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8028ef6:	887b      	ldrh	r3, [r7, #2]
 8028ef8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8028efa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028efe:	2b01      	cmp	r3, #1
 8028f00:	d00f      	beq.n	8028f22 <HAL_SPI_TransmitReceive+0x70>
 8028f02:	69fb      	ldr	r3, [r7, #28]
 8028f04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028f08:	d107      	bne.n	8028f1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8028f0a:	68fb      	ldr	r3, [r7, #12]
 8028f0c:	689b      	ldr	r3, [r3, #8]
 8028f0e:	2b00      	cmp	r3, #0
 8028f10:	d103      	bne.n	8028f1a <HAL_SPI_TransmitReceive+0x68>
 8028f12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028f16:	2b04      	cmp	r3, #4
 8028f18:	d003      	beq.n	8028f22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8028f1a:	2302      	movs	r3, #2
 8028f1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028f20:	e15b      	b.n	80291da <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8028f22:	68bb      	ldr	r3, [r7, #8]
 8028f24:	2b00      	cmp	r3, #0
 8028f26:	d005      	beq.n	8028f34 <HAL_SPI_TransmitReceive+0x82>
 8028f28:	687b      	ldr	r3, [r7, #4]
 8028f2a:	2b00      	cmp	r3, #0
 8028f2c:	d002      	beq.n	8028f34 <HAL_SPI_TransmitReceive+0x82>
 8028f2e:	887b      	ldrh	r3, [r7, #2]
 8028f30:	2b00      	cmp	r3, #0
 8028f32:	d103      	bne.n	8028f3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8028f34:	2301      	movs	r3, #1
 8028f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028f3a:	e14e      	b.n	80291da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8028f3c:	68fb      	ldr	r3, [r7, #12]
 8028f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028f42:	b2db      	uxtb	r3, r3
 8028f44:	2b04      	cmp	r3, #4
 8028f46:	d003      	beq.n	8028f50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8028f48:	68fb      	ldr	r3, [r7, #12]
 8028f4a:	2205      	movs	r2, #5
 8028f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028f50:	68fb      	ldr	r3, [r7, #12]
 8028f52:	2200      	movs	r2, #0
 8028f54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8028f56:	68fb      	ldr	r3, [r7, #12]
 8028f58:	687a      	ldr	r2, [r7, #4]
 8028f5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8028f5c:	68fb      	ldr	r3, [r7, #12]
 8028f5e:	887a      	ldrh	r2, [r7, #2]
 8028f60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8028f62:	68fb      	ldr	r3, [r7, #12]
 8028f64:	887a      	ldrh	r2, [r7, #2]
 8028f66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8028f68:	68fb      	ldr	r3, [r7, #12]
 8028f6a:	68ba      	ldr	r2, [r7, #8]
 8028f6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8028f6e:	68fb      	ldr	r3, [r7, #12]
 8028f70:	887a      	ldrh	r2, [r7, #2]
 8028f72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8028f74:	68fb      	ldr	r3, [r7, #12]
 8028f76:	887a      	ldrh	r2, [r7, #2]
 8028f78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8028f7a:	68fb      	ldr	r3, [r7, #12]
 8028f7c:	2200      	movs	r2, #0
 8028f7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028f80:	68fb      	ldr	r3, [r7, #12]
 8028f82:	2200      	movs	r2, #0
 8028f84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028f86:	68fb      	ldr	r3, [r7, #12]
 8028f88:	681b      	ldr	r3, [r3, #0]
 8028f8a:	681b      	ldr	r3, [r3, #0]
 8028f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028f90:	2b40      	cmp	r3, #64	; 0x40
 8028f92:	d007      	beq.n	8028fa4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028f94:	68fb      	ldr	r3, [r7, #12]
 8028f96:	681b      	ldr	r3, [r3, #0]
 8028f98:	681a      	ldr	r2, [r3, #0]
 8028f9a:	68fb      	ldr	r3, [r7, #12]
 8028f9c:	681b      	ldr	r3, [r3, #0]
 8028f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028fa4:	68fb      	ldr	r3, [r7, #12]
 8028fa6:	68db      	ldr	r3, [r3, #12]
 8028fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028fac:	d178      	bne.n	80290a0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028fae:	68fb      	ldr	r3, [r7, #12]
 8028fb0:	685b      	ldr	r3, [r3, #4]
 8028fb2:	2b00      	cmp	r3, #0
 8028fb4:	d002      	beq.n	8028fbc <HAL_SPI_TransmitReceive+0x10a>
 8028fb6:	8b7b      	ldrh	r3, [r7, #26]
 8028fb8:	2b01      	cmp	r3, #1
 8028fba:	d166      	bne.n	802908a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028fbc:	68fb      	ldr	r3, [r7, #12]
 8028fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028fc0:	881a      	ldrh	r2, [r3, #0]
 8028fc2:	68fb      	ldr	r3, [r7, #12]
 8028fc4:	681b      	ldr	r3, [r3, #0]
 8028fc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8028fc8:	68fb      	ldr	r3, [r7, #12]
 8028fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028fcc:	1c9a      	adds	r2, r3, #2
 8028fce:	68fb      	ldr	r3, [r7, #12]
 8028fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028fd2:	68fb      	ldr	r3, [r7, #12]
 8028fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028fd6:	b29b      	uxth	r3, r3
 8028fd8:	3b01      	subs	r3, #1
 8028fda:	b29a      	uxth	r2, r3
 8028fdc:	68fb      	ldr	r3, [r7, #12]
 8028fde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028fe0:	e053      	b.n	802908a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028fe2:	68fb      	ldr	r3, [r7, #12]
 8028fe4:	681b      	ldr	r3, [r3, #0]
 8028fe6:	689b      	ldr	r3, [r3, #8]
 8028fe8:	f003 0302 	and.w	r3, r3, #2
 8028fec:	2b02      	cmp	r3, #2
 8028fee:	d11b      	bne.n	8029028 <HAL_SPI_TransmitReceive+0x176>
 8028ff0:	68fb      	ldr	r3, [r7, #12]
 8028ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028ff4:	b29b      	uxth	r3, r3
 8028ff6:	2b00      	cmp	r3, #0
 8028ff8:	d016      	beq.n	8029028 <HAL_SPI_TransmitReceive+0x176>
 8028ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028ffc:	2b01      	cmp	r3, #1
 8028ffe:	d113      	bne.n	8029028 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8029000:	68fb      	ldr	r3, [r7, #12]
 8029002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029004:	881a      	ldrh	r2, [r3, #0]
 8029006:	68fb      	ldr	r3, [r7, #12]
 8029008:	681b      	ldr	r3, [r3, #0]
 802900a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802900c:	68fb      	ldr	r3, [r7, #12]
 802900e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029010:	1c9a      	adds	r2, r3, #2
 8029012:	68fb      	ldr	r3, [r7, #12]
 8029014:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8029016:	68fb      	ldr	r3, [r7, #12]
 8029018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802901a:	b29b      	uxth	r3, r3
 802901c:	3b01      	subs	r3, #1
 802901e:	b29a      	uxth	r2, r3
 8029020:	68fb      	ldr	r3, [r7, #12]
 8029022:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8029024:	2300      	movs	r3, #0
 8029026:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8029028:	68fb      	ldr	r3, [r7, #12]
 802902a:	681b      	ldr	r3, [r3, #0]
 802902c:	689b      	ldr	r3, [r3, #8]
 802902e:	f003 0301 	and.w	r3, r3, #1
 8029032:	2b01      	cmp	r3, #1
 8029034:	d119      	bne.n	802906a <HAL_SPI_TransmitReceive+0x1b8>
 8029036:	68fb      	ldr	r3, [r7, #12]
 8029038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802903a:	b29b      	uxth	r3, r3
 802903c:	2b00      	cmp	r3, #0
 802903e:	d014      	beq.n	802906a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8029040:	68fb      	ldr	r3, [r7, #12]
 8029042:	681b      	ldr	r3, [r3, #0]
 8029044:	68da      	ldr	r2, [r3, #12]
 8029046:	68fb      	ldr	r3, [r7, #12]
 8029048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802904a:	b292      	uxth	r2, r2
 802904c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802904e:	68fb      	ldr	r3, [r7, #12]
 8029050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029052:	1c9a      	adds	r2, r3, #2
 8029054:	68fb      	ldr	r3, [r7, #12]
 8029056:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8029058:	68fb      	ldr	r3, [r7, #12]
 802905a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802905c:	b29b      	uxth	r3, r3
 802905e:	3b01      	subs	r3, #1
 8029060:	b29a      	uxth	r2, r3
 8029062:	68fb      	ldr	r3, [r7, #12]
 8029064:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8029066:	2301      	movs	r3, #1
 8029068:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 802906a:	f7fd f9dd 	bl	8026428 <HAL_GetTick>
 802906e:	4602      	mov	r2, r0
 8029070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029072:	1ad3      	subs	r3, r2, r3
 8029074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029076:	429a      	cmp	r2, r3
 8029078:	d807      	bhi.n	802908a <HAL_SPI_TransmitReceive+0x1d8>
 802907a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802907c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029080:	d003      	beq.n	802908a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8029082:	2303      	movs	r3, #3
 8029084:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8029088:	e0a7      	b.n	80291da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802908a:	68fb      	ldr	r3, [r7, #12]
 802908c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802908e:	b29b      	uxth	r3, r3
 8029090:	2b00      	cmp	r3, #0
 8029092:	d1a6      	bne.n	8028fe2 <HAL_SPI_TransmitReceive+0x130>
 8029094:	68fb      	ldr	r3, [r7, #12]
 8029096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029098:	b29b      	uxth	r3, r3
 802909a:	2b00      	cmp	r3, #0
 802909c:	d1a1      	bne.n	8028fe2 <HAL_SPI_TransmitReceive+0x130>
 802909e:	e07c      	b.n	802919a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80290a0:	68fb      	ldr	r3, [r7, #12]
 80290a2:	685b      	ldr	r3, [r3, #4]
 80290a4:	2b00      	cmp	r3, #0
 80290a6:	d002      	beq.n	80290ae <HAL_SPI_TransmitReceive+0x1fc>
 80290a8:	8b7b      	ldrh	r3, [r7, #26]
 80290aa:	2b01      	cmp	r3, #1
 80290ac:	d16b      	bne.n	8029186 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80290ae:	68fb      	ldr	r3, [r7, #12]
 80290b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80290b2:	68fb      	ldr	r3, [r7, #12]
 80290b4:	681b      	ldr	r3, [r3, #0]
 80290b6:	330c      	adds	r3, #12
 80290b8:	7812      	ldrb	r2, [r2, #0]
 80290ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80290bc:	68fb      	ldr	r3, [r7, #12]
 80290be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80290c0:	1c5a      	adds	r2, r3, #1
 80290c2:	68fb      	ldr	r3, [r7, #12]
 80290c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80290c6:	68fb      	ldr	r3, [r7, #12]
 80290c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80290ca:	b29b      	uxth	r3, r3
 80290cc:	3b01      	subs	r3, #1
 80290ce:	b29a      	uxth	r2, r3
 80290d0:	68fb      	ldr	r3, [r7, #12]
 80290d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80290d4:	e057      	b.n	8029186 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80290d6:	68fb      	ldr	r3, [r7, #12]
 80290d8:	681b      	ldr	r3, [r3, #0]
 80290da:	689b      	ldr	r3, [r3, #8]
 80290dc:	f003 0302 	and.w	r3, r3, #2
 80290e0:	2b02      	cmp	r3, #2
 80290e2:	d11c      	bne.n	802911e <HAL_SPI_TransmitReceive+0x26c>
 80290e4:	68fb      	ldr	r3, [r7, #12]
 80290e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80290e8:	b29b      	uxth	r3, r3
 80290ea:	2b00      	cmp	r3, #0
 80290ec:	d017      	beq.n	802911e <HAL_SPI_TransmitReceive+0x26c>
 80290ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80290f0:	2b01      	cmp	r3, #1
 80290f2:	d114      	bne.n	802911e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80290f4:	68fb      	ldr	r3, [r7, #12]
 80290f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80290f8:	68fb      	ldr	r3, [r7, #12]
 80290fa:	681b      	ldr	r3, [r3, #0]
 80290fc:	330c      	adds	r3, #12
 80290fe:	7812      	ldrb	r2, [r2, #0]
 8029100:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8029102:	68fb      	ldr	r3, [r7, #12]
 8029104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029106:	1c5a      	adds	r2, r3, #1
 8029108:	68fb      	ldr	r3, [r7, #12]
 802910a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802910c:	68fb      	ldr	r3, [r7, #12]
 802910e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029110:	b29b      	uxth	r3, r3
 8029112:	3b01      	subs	r3, #1
 8029114:	b29a      	uxth	r2, r3
 8029116:	68fb      	ldr	r3, [r7, #12]
 8029118:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 802911a:	2300      	movs	r3, #0
 802911c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802911e:	68fb      	ldr	r3, [r7, #12]
 8029120:	681b      	ldr	r3, [r3, #0]
 8029122:	689b      	ldr	r3, [r3, #8]
 8029124:	f003 0301 	and.w	r3, r3, #1
 8029128:	2b01      	cmp	r3, #1
 802912a:	d119      	bne.n	8029160 <HAL_SPI_TransmitReceive+0x2ae>
 802912c:	68fb      	ldr	r3, [r7, #12]
 802912e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029130:	b29b      	uxth	r3, r3
 8029132:	2b00      	cmp	r3, #0
 8029134:	d014      	beq.n	8029160 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8029136:	68fb      	ldr	r3, [r7, #12]
 8029138:	681b      	ldr	r3, [r3, #0]
 802913a:	68da      	ldr	r2, [r3, #12]
 802913c:	68fb      	ldr	r3, [r7, #12]
 802913e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029140:	b2d2      	uxtb	r2, r2
 8029142:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8029144:	68fb      	ldr	r3, [r7, #12]
 8029146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029148:	1c5a      	adds	r2, r3, #1
 802914a:	68fb      	ldr	r3, [r7, #12]
 802914c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802914e:	68fb      	ldr	r3, [r7, #12]
 8029150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029152:	b29b      	uxth	r3, r3
 8029154:	3b01      	subs	r3, #1
 8029156:	b29a      	uxth	r2, r3
 8029158:	68fb      	ldr	r3, [r7, #12]
 802915a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802915c:	2301      	movs	r3, #1
 802915e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8029160:	f7fd f962 	bl	8026428 <HAL_GetTick>
 8029164:	4602      	mov	r2, r0
 8029166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029168:	1ad3      	subs	r3, r2, r3
 802916a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802916c:	429a      	cmp	r2, r3
 802916e:	d803      	bhi.n	8029178 <HAL_SPI_TransmitReceive+0x2c6>
 8029170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029176:	d102      	bne.n	802917e <HAL_SPI_TransmitReceive+0x2cc>
 8029178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802917a:	2b00      	cmp	r3, #0
 802917c:	d103      	bne.n	8029186 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 802917e:	2303      	movs	r3, #3
 8029180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8029184:	e029      	b.n	80291da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8029186:	68fb      	ldr	r3, [r7, #12]
 8029188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802918a:	b29b      	uxth	r3, r3
 802918c:	2b00      	cmp	r3, #0
 802918e:	d1a2      	bne.n	80290d6 <HAL_SPI_TransmitReceive+0x224>
 8029190:	68fb      	ldr	r3, [r7, #12]
 8029192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029194:	b29b      	uxth	r3, r3
 8029196:	2b00      	cmp	r3, #0
 8029198:	d19d      	bne.n	80290d6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802919a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802919c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802919e:	68f8      	ldr	r0, [r7, #12]
 80291a0:	f000 f8f8 	bl	8029394 <SPI_EndRxTxTransaction>
 80291a4:	4603      	mov	r3, r0
 80291a6:	2b00      	cmp	r3, #0
 80291a8:	d006      	beq.n	80291b8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80291aa:	2301      	movs	r3, #1
 80291ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80291b0:	68fb      	ldr	r3, [r7, #12]
 80291b2:	2220      	movs	r2, #32
 80291b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80291b6:	e010      	b.n	80291da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80291b8:	68fb      	ldr	r3, [r7, #12]
 80291ba:	689b      	ldr	r3, [r3, #8]
 80291bc:	2b00      	cmp	r3, #0
 80291be:	d10b      	bne.n	80291d8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80291c0:	2300      	movs	r3, #0
 80291c2:	617b      	str	r3, [r7, #20]
 80291c4:	68fb      	ldr	r3, [r7, #12]
 80291c6:	681b      	ldr	r3, [r3, #0]
 80291c8:	68db      	ldr	r3, [r3, #12]
 80291ca:	617b      	str	r3, [r7, #20]
 80291cc:	68fb      	ldr	r3, [r7, #12]
 80291ce:	681b      	ldr	r3, [r3, #0]
 80291d0:	689b      	ldr	r3, [r3, #8]
 80291d2:	617b      	str	r3, [r7, #20]
 80291d4:	697b      	ldr	r3, [r7, #20]
 80291d6:	e000      	b.n	80291da <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80291d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80291da:	68fb      	ldr	r3, [r7, #12]
 80291dc:	2201      	movs	r2, #1
 80291de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80291e2:	68fb      	ldr	r3, [r7, #12]
 80291e4:	2200      	movs	r2, #0
 80291e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80291ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80291ee:	4618      	mov	r0, r3
 80291f0:	3730      	adds	r7, #48	; 0x30
 80291f2:	46bd      	mov	sp, r7
 80291f4:	bd80      	pop	{r7, pc}

080291f6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80291f6:	b580      	push	{r7, lr}
 80291f8:	b084      	sub	sp, #16
 80291fa:	af00      	add	r7, sp, #0
 80291fc:	60f8      	str	r0, [r7, #12]
 80291fe:	60b9      	str	r1, [r7, #8]
 8029200:	603b      	str	r3, [r7, #0]
 8029202:	4613      	mov	r3, r2
 8029204:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8029206:	e04c      	b.n	80292a2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8029208:	683b      	ldr	r3, [r7, #0]
 802920a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802920e:	d048      	beq.n	80292a2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8029210:	f7fd f90a 	bl	8026428 <HAL_GetTick>
 8029214:	4602      	mov	r2, r0
 8029216:	69bb      	ldr	r3, [r7, #24]
 8029218:	1ad3      	subs	r3, r2, r3
 802921a:	683a      	ldr	r2, [r7, #0]
 802921c:	429a      	cmp	r2, r3
 802921e:	d902      	bls.n	8029226 <SPI_WaitFlagStateUntilTimeout+0x30>
 8029220:	683b      	ldr	r3, [r7, #0]
 8029222:	2b00      	cmp	r3, #0
 8029224:	d13d      	bne.n	80292a2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8029226:	68fb      	ldr	r3, [r7, #12]
 8029228:	681b      	ldr	r3, [r3, #0]
 802922a:	685a      	ldr	r2, [r3, #4]
 802922c:	68fb      	ldr	r3, [r7, #12]
 802922e:	681b      	ldr	r3, [r3, #0]
 8029230:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8029234:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8029236:	68fb      	ldr	r3, [r7, #12]
 8029238:	685b      	ldr	r3, [r3, #4]
 802923a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802923e:	d111      	bne.n	8029264 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8029240:	68fb      	ldr	r3, [r7, #12]
 8029242:	689b      	ldr	r3, [r3, #8]
 8029244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029248:	d004      	beq.n	8029254 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802924a:	68fb      	ldr	r3, [r7, #12]
 802924c:	689b      	ldr	r3, [r3, #8]
 802924e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029252:	d107      	bne.n	8029264 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8029254:	68fb      	ldr	r3, [r7, #12]
 8029256:	681b      	ldr	r3, [r3, #0]
 8029258:	681a      	ldr	r2, [r3, #0]
 802925a:	68fb      	ldr	r3, [r7, #12]
 802925c:	681b      	ldr	r3, [r3, #0]
 802925e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8029262:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8029264:	68fb      	ldr	r3, [r7, #12]
 8029266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802926c:	d10f      	bne.n	802928e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 802926e:	68fb      	ldr	r3, [r7, #12]
 8029270:	681b      	ldr	r3, [r3, #0]
 8029272:	681a      	ldr	r2, [r3, #0]
 8029274:	68fb      	ldr	r3, [r7, #12]
 8029276:	681b      	ldr	r3, [r3, #0]
 8029278:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802927c:	601a      	str	r2, [r3, #0]
 802927e:	68fb      	ldr	r3, [r7, #12]
 8029280:	681b      	ldr	r3, [r3, #0]
 8029282:	681a      	ldr	r2, [r3, #0]
 8029284:	68fb      	ldr	r3, [r7, #12]
 8029286:	681b      	ldr	r3, [r3, #0]
 8029288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802928c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 802928e:	68fb      	ldr	r3, [r7, #12]
 8029290:	2201      	movs	r2, #1
 8029292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8029296:	68fb      	ldr	r3, [r7, #12]
 8029298:	2200      	movs	r2, #0
 802929a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 802929e:	2303      	movs	r3, #3
 80292a0:	e00f      	b.n	80292c2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80292a2:	68fb      	ldr	r3, [r7, #12]
 80292a4:	681b      	ldr	r3, [r3, #0]
 80292a6:	689a      	ldr	r2, [r3, #8]
 80292a8:	68bb      	ldr	r3, [r7, #8]
 80292aa:	4013      	ands	r3, r2
 80292ac:	68ba      	ldr	r2, [r7, #8]
 80292ae:	429a      	cmp	r2, r3
 80292b0:	bf0c      	ite	eq
 80292b2:	2301      	moveq	r3, #1
 80292b4:	2300      	movne	r3, #0
 80292b6:	b2db      	uxtb	r3, r3
 80292b8:	461a      	mov	r2, r3
 80292ba:	79fb      	ldrb	r3, [r7, #7]
 80292bc:	429a      	cmp	r2, r3
 80292be:	d1a3      	bne.n	8029208 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80292c0:	2300      	movs	r3, #0
}
 80292c2:	4618      	mov	r0, r3
 80292c4:	3710      	adds	r7, #16
 80292c6:	46bd      	mov	sp, r7
 80292c8:	bd80      	pop	{r7, pc}

080292ca <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80292ca:	b580      	push	{r7, lr}
 80292cc:	b086      	sub	sp, #24
 80292ce:	af02      	add	r7, sp, #8
 80292d0:	60f8      	str	r0, [r7, #12]
 80292d2:	60b9      	str	r1, [r7, #8]
 80292d4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80292d6:	68fb      	ldr	r3, [r7, #12]
 80292d8:	685b      	ldr	r3, [r3, #4]
 80292da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80292de:	d111      	bne.n	8029304 <SPI_EndRxTransaction+0x3a>
 80292e0:	68fb      	ldr	r3, [r7, #12]
 80292e2:	689b      	ldr	r3, [r3, #8]
 80292e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80292e8:	d004      	beq.n	80292f4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80292ea:	68fb      	ldr	r3, [r7, #12]
 80292ec:	689b      	ldr	r3, [r3, #8]
 80292ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80292f2:	d107      	bne.n	8029304 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80292f4:	68fb      	ldr	r3, [r7, #12]
 80292f6:	681b      	ldr	r3, [r3, #0]
 80292f8:	681a      	ldr	r2, [r3, #0]
 80292fa:	68fb      	ldr	r3, [r7, #12]
 80292fc:	681b      	ldr	r3, [r3, #0]
 80292fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8029302:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8029304:	68fb      	ldr	r3, [r7, #12]
 8029306:	685b      	ldr	r3, [r3, #4]
 8029308:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802930c:	d12a      	bne.n	8029364 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 802930e:	68fb      	ldr	r3, [r7, #12]
 8029310:	689b      	ldr	r3, [r3, #8]
 8029312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029316:	d012      	beq.n	802933e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8029318:	687b      	ldr	r3, [r7, #4]
 802931a:	9300      	str	r3, [sp, #0]
 802931c:	68bb      	ldr	r3, [r7, #8]
 802931e:	2200      	movs	r2, #0
 8029320:	2180      	movs	r1, #128	; 0x80
 8029322:	68f8      	ldr	r0, [r7, #12]
 8029324:	f7ff ff67 	bl	80291f6 <SPI_WaitFlagStateUntilTimeout>
 8029328:	4603      	mov	r3, r0
 802932a:	2b00      	cmp	r3, #0
 802932c:	d02d      	beq.n	802938a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802932e:	68fb      	ldr	r3, [r7, #12]
 8029330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029332:	f043 0220 	orr.w	r2, r3, #32
 8029336:	68fb      	ldr	r3, [r7, #12]
 8029338:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 802933a:	2303      	movs	r3, #3
 802933c:	e026      	b.n	802938c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802933e:	687b      	ldr	r3, [r7, #4]
 8029340:	9300      	str	r3, [sp, #0]
 8029342:	68bb      	ldr	r3, [r7, #8]
 8029344:	2200      	movs	r2, #0
 8029346:	2101      	movs	r1, #1
 8029348:	68f8      	ldr	r0, [r7, #12]
 802934a:	f7ff ff54 	bl	80291f6 <SPI_WaitFlagStateUntilTimeout>
 802934e:	4603      	mov	r3, r0
 8029350:	2b00      	cmp	r3, #0
 8029352:	d01a      	beq.n	802938a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029354:	68fb      	ldr	r3, [r7, #12]
 8029356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029358:	f043 0220 	orr.w	r2, r3, #32
 802935c:	68fb      	ldr	r3, [r7, #12]
 802935e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8029360:	2303      	movs	r3, #3
 8029362:	e013      	b.n	802938c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8029364:	687b      	ldr	r3, [r7, #4]
 8029366:	9300      	str	r3, [sp, #0]
 8029368:	68bb      	ldr	r3, [r7, #8]
 802936a:	2200      	movs	r2, #0
 802936c:	2101      	movs	r1, #1
 802936e:	68f8      	ldr	r0, [r7, #12]
 8029370:	f7ff ff41 	bl	80291f6 <SPI_WaitFlagStateUntilTimeout>
 8029374:	4603      	mov	r3, r0
 8029376:	2b00      	cmp	r3, #0
 8029378:	d007      	beq.n	802938a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802937a:	68fb      	ldr	r3, [r7, #12]
 802937c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802937e:	f043 0220 	orr.w	r2, r3, #32
 8029382:	68fb      	ldr	r3, [r7, #12]
 8029384:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8029386:	2303      	movs	r3, #3
 8029388:	e000      	b.n	802938c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 802938a:	2300      	movs	r3, #0
}
 802938c:	4618      	mov	r0, r3
 802938e:	3710      	adds	r7, #16
 8029390:	46bd      	mov	sp, r7
 8029392:	bd80      	pop	{r7, pc}

08029394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8029394:	b580      	push	{r7, lr}
 8029396:	b088      	sub	sp, #32
 8029398:	af02      	add	r7, sp, #8
 802939a:	60f8      	str	r0, [r7, #12]
 802939c:	60b9      	str	r1, [r7, #8]
 802939e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80293a0:	4b1b      	ldr	r3, [pc, #108]	; (8029410 <SPI_EndRxTxTransaction+0x7c>)
 80293a2:	681b      	ldr	r3, [r3, #0]
 80293a4:	4a1b      	ldr	r2, [pc, #108]	; (8029414 <SPI_EndRxTxTransaction+0x80>)
 80293a6:	fba2 2303 	umull	r2, r3, r2, r3
 80293aa:	0d5b      	lsrs	r3, r3, #21
 80293ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80293b0:	fb02 f303 	mul.w	r3, r2, r3
 80293b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80293b6:	68fb      	ldr	r3, [r7, #12]
 80293b8:	685b      	ldr	r3, [r3, #4]
 80293ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80293be:	d112      	bne.n	80293e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80293c0:	687b      	ldr	r3, [r7, #4]
 80293c2:	9300      	str	r3, [sp, #0]
 80293c4:	68bb      	ldr	r3, [r7, #8]
 80293c6:	2200      	movs	r2, #0
 80293c8:	2180      	movs	r1, #128	; 0x80
 80293ca:	68f8      	ldr	r0, [r7, #12]
 80293cc:	f7ff ff13 	bl	80291f6 <SPI_WaitFlagStateUntilTimeout>
 80293d0:	4603      	mov	r3, r0
 80293d2:	2b00      	cmp	r3, #0
 80293d4:	d016      	beq.n	8029404 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80293d6:	68fb      	ldr	r3, [r7, #12]
 80293d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80293da:	f043 0220 	orr.w	r2, r3, #32
 80293de:	68fb      	ldr	r3, [r7, #12]
 80293e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80293e2:	2303      	movs	r3, #3
 80293e4:	e00f      	b.n	8029406 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80293e6:	697b      	ldr	r3, [r7, #20]
 80293e8:	2b00      	cmp	r3, #0
 80293ea:	d00a      	beq.n	8029402 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80293ec:	697b      	ldr	r3, [r7, #20]
 80293ee:	3b01      	subs	r3, #1
 80293f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80293f2:	68fb      	ldr	r3, [r7, #12]
 80293f4:	681b      	ldr	r3, [r3, #0]
 80293f6:	689b      	ldr	r3, [r3, #8]
 80293f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80293fc:	2b80      	cmp	r3, #128	; 0x80
 80293fe:	d0f2      	beq.n	80293e6 <SPI_EndRxTxTransaction+0x52>
 8029400:	e000      	b.n	8029404 <SPI_EndRxTxTransaction+0x70>
        break;
 8029402:	bf00      	nop
  }

  return HAL_OK;
 8029404:	2300      	movs	r3, #0
}
 8029406:	4618      	mov	r0, r3
 8029408:	3718      	adds	r7, #24
 802940a:	46bd      	mov	sp, r7
 802940c:	bd80      	pop	{r7, pc}
 802940e:	bf00      	nop
 8029410:	20000004 	.word	0x20000004
 8029414:	165e9f81 	.word	0x165e9f81

08029418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8029418:	b580      	push	{r7, lr}
 802941a:	b082      	sub	sp, #8
 802941c:	af00      	add	r7, sp, #0
 802941e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029420:	687b      	ldr	r3, [r7, #4]
 8029422:	2b00      	cmp	r3, #0
 8029424:	d101      	bne.n	802942a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8029426:	2301      	movs	r3, #1
 8029428:	e01d      	b.n	8029466 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802942a:	687b      	ldr	r3, [r7, #4]
 802942c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029430:	b2db      	uxtb	r3, r3
 8029432:	2b00      	cmp	r3, #0
 8029434:	d106      	bne.n	8029444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029436:	687b      	ldr	r3, [r7, #4]
 8029438:	2200      	movs	r2, #0
 802943a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802943e:	6878      	ldr	r0, [r7, #4]
 8029440:	f7fc fa14 	bl	802586c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029444:	687b      	ldr	r3, [r7, #4]
 8029446:	2202      	movs	r2, #2
 8029448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802944c:	687b      	ldr	r3, [r7, #4]
 802944e:	681a      	ldr	r2, [r3, #0]
 8029450:	687b      	ldr	r3, [r7, #4]
 8029452:	3304      	adds	r3, #4
 8029454:	4619      	mov	r1, r3
 8029456:	4610      	mov	r0, r2
 8029458:	f000 fc3a 	bl	8029cd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802945c:	687b      	ldr	r3, [r7, #4]
 802945e:	2201      	movs	r2, #1
 8029460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029464:	2300      	movs	r3, #0
}
 8029466:	4618      	mov	r0, r3
 8029468:	3708      	adds	r7, #8
 802946a:	46bd      	mov	sp, r7
 802946c:	bd80      	pop	{r7, pc}

0802946e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 802946e:	b480      	push	{r7}
 8029470:	b085      	sub	sp, #20
 8029472:	af00      	add	r7, sp, #0
 8029474:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8029476:	687b      	ldr	r3, [r7, #4]
 8029478:	681b      	ldr	r3, [r3, #0]
 802947a:	68da      	ldr	r2, [r3, #12]
 802947c:	687b      	ldr	r3, [r7, #4]
 802947e:	681b      	ldr	r3, [r3, #0]
 8029480:	f042 0201 	orr.w	r2, r2, #1
 8029484:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8029486:	687b      	ldr	r3, [r7, #4]
 8029488:	681b      	ldr	r3, [r3, #0]
 802948a:	689b      	ldr	r3, [r3, #8]
 802948c:	f003 0307 	and.w	r3, r3, #7
 8029490:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029492:	68fb      	ldr	r3, [r7, #12]
 8029494:	2b06      	cmp	r3, #6
 8029496:	d007      	beq.n	80294a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8029498:	687b      	ldr	r3, [r7, #4]
 802949a:	681b      	ldr	r3, [r3, #0]
 802949c:	681a      	ldr	r2, [r3, #0]
 802949e:	687b      	ldr	r3, [r7, #4]
 80294a0:	681b      	ldr	r3, [r3, #0]
 80294a2:	f042 0201 	orr.w	r2, r2, #1
 80294a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80294a8:	2300      	movs	r3, #0
}
 80294aa:	4618      	mov	r0, r3
 80294ac:	3714      	adds	r7, #20
 80294ae:	46bd      	mov	sp, r7
 80294b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294b4:	4770      	bx	lr

080294b6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80294b6:	b480      	push	{r7}
 80294b8:	b083      	sub	sp, #12
 80294ba:	af00      	add	r7, sp, #0
 80294bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80294be:	687b      	ldr	r3, [r7, #4]
 80294c0:	681b      	ldr	r3, [r3, #0]
 80294c2:	68da      	ldr	r2, [r3, #12]
 80294c4:	687b      	ldr	r3, [r7, #4]
 80294c6:	681b      	ldr	r3, [r3, #0]
 80294c8:	f022 0201 	bic.w	r2, r2, #1
 80294cc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80294ce:	687b      	ldr	r3, [r7, #4]
 80294d0:	681b      	ldr	r3, [r3, #0]
 80294d2:	6a1a      	ldr	r2, [r3, #32]
 80294d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80294d8:	4013      	ands	r3, r2
 80294da:	2b00      	cmp	r3, #0
 80294dc:	d10f      	bne.n	80294fe <HAL_TIM_Base_Stop_IT+0x48>
 80294de:	687b      	ldr	r3, [r7, #4]
 80294e0:	681b      	ldr	r3, [r3, #0]
 80294e2:	6a1a      	ldr	r2, [r3, #32]
 80294e4:	f240 4344 	movw	r3, #1092	; 0x444
 80294e8:	4013      	ands	r3, r2
 80294ea:	2b00      	cmp	r3, #0
 80294ec:	d107      	bne.n	80294fe <HAL_TIM_Base_Stop_IT+0x48>
 80294ee:	687b      	ldr	r3, [r7, #4]
 80294f0:	681b      	ldr	r3, [r3, #0]
 80294f2:	681a      	ldr	r2, [r3, #0]
 80294f4:	687b      	ldr	r3, [r7, #4]
 80294f6:	681b      	ldr	r3, [r3, #0]
 80294f8:	f022 0201 	bic.w	r2, r2, #1
 80294fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80294fe:	2300      	movs	r3, #0
}
 8029500:	4618      	mov	r0, r3
 8029502:	370c      	adds	r7, #12
 8029504:	46bd      	mov	sp, r7
 8029506:	f85d 7b04 	ldr.w	r7, [sp], #4
 802950a:	4770      	bx	lr

0802950c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 802950c:	b580      	push	{r7, lr}
 802950e:	b082      	sub	sp, #8
 8029510:	af00      	add	r7, sp, #0
 8029512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029514:	687b      	ldr	r3, [r7, #4]
 8029516:	2b00      	cmp	r3, #0
 8029518:	d101      	bne.n	802951e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 802951a:	2301      	movs	r3, #1
 802951c:	e01d      	b.n	802955a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802951e:	687b      	ldr	r3, [r7, #4]
 8029520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029524:	b2db      	uxtb	r3, r3
 8029526:	2b00      	cmp	r3, #0
 8029528:	d106      	bne.n	8029538 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802952a:	687b      	ldr	r3, [r7, #4]
 802952c:	2200      	movs	r2, #0
 802952e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8029532:	6878      	ldr	r0, [r7, #4]
 8029534:	f7fc f94c 	bl	80257d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029538:	687b      	ldr	r3, [r7, #4]
 802953a:	2202      	movs	r2, #2
 802953c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029540:	687b      	ldr	r3, [r7, #4]
 8029542:	681a      	ldr	r2, [r3, #0]
 8029544:	687b      	ldr	r3, [r7, #4]
 8029546:	3304      	adds	r3, #4
 8029548:	4619      	mov	r1, r3
 802954a:	4610      	mov	r0, r2
 802954c:	f000 fbc0 	bl	8029cd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029550:	687b      	ldr	r3, [r7, #4]
 8029552:	2201      	movs	r2, #1
 8029554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029558:	2300      	movs	r3, #0
}
 802955a:	4618      	mov	r0, r3
 802955c:	3708      	adds	r7, #8
 802955e:	46bd      	mov	sp, r7
 8029560:	bd80      	pop	{r7, pc}
	...

08029564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8029564:	b580      	push	{r7, lr}
 8029566:	b084      	sub	sp, #16
 8029568:	af00      	add	r7, sp, #0
 802956a:	6078      	str	r0, [r7, #4]
 802956c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 802956e:	687b      	ldr	r3, [r7, #4]
 8029570:	681b      	ldr	r3, [r3, #0]
 8029572:	2201      	movs	r2, #1
 8029574:	6839      	ldr	r1, [r7, #0]
 8029576:	4618      	mov	r0, r3
 8029578:	f000 fe94 	bl	802a2a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 802957c:	687b      	ldr	r3, [r7, #4]
 802957e:	681b      	ldr	r3, [r3, #0]
 8029580:	4a15      	ldr	r2, [pc, #84]	; (80295d8 <HAL_TIM_PWM_Start+0x74>)
 8029582:	4293      	cmp	r3, r2
 8029584:	d004      	beq.n	8029590 <HAL_TIM_PWM_Start+0x2c>
 8029586:	687b      	ldr	r3, [r7, #4]
 8029588:	681b      	ldr	r3, [r3, #0]
 802958a:	4a14      	ldr	r2, [pc, #80]	; (80295dc <HAL_TIM_PWM_Start+0x78>)
 802958c:	4293      	cmp	r3, r2
 802958e:	d101      	bne.n	8029594 <HAL_TIM_PWM_Start+0x30>
 8029590:	2301      	movs	r3, #1
 8029592:	e000      	b.n	8029596 <HAL_TIM_PWM_Start+0x32>
 8029594:	2300      	movs	r3, #0
 8029596:	2b00      	cmp	r3, #0
 8029598:	d007      	beq.n	80295aa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 802959a:	687b      	ldr	r3, [r7, #4]
 802959c:	681b      	ldr	r3, [r3, #0]
 802959e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80295a0:	687b      	ldr	r3, [r7, #4]
 80295a2:	681b      	ldr	r3, [r3, #0]
 80295a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80295a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80295aa:	687b      	ldr	r3, [r7, #4]
 80295ac:	681b      	ldr	r3, [r3, #0]
 80295ae:	689b      	ldr	r3, [r3, #8]
 80295b0:	f003 0307 	and.w	r3, r3, #7
 80295b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80295b6:	68fb      	ldr	r3, [r7, #12]
 80295b8:	2b06      	cmp	r3, #6
 80295ba:	d007      	beq.n	80295cc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80295bc:	687b      	ldr	r3, [r7, #4]
 80295be:	681b      	ldr	r3, [r3, #0]
 80295c0:	681a      	ldr	r2, [r3, #0]
 80295c2:	687b      	ldr	r3, [r7, #4]
 80295c4:	681b      	ldr	r3, [r3, #0]
 80295c6:	f042 0201 	orr.w	r2, r2, #1
 80295ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80295cc:	2300      	movs	r3, #0
}
 80295ce:	4618      	mov	r0, r3
 80295d0:	3710      	adds	r7, #16
 80295d2:	46bd      	mov	sp, r7
 80295d4:	bd80      	pop	{r7, pc}
 80295d6:	bf00      	nop
 80295d8:	40010000 	.word	0x40010000
 80295dc:	40010400 	.word	0x40010400

080295e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80295e0:	b580      	push	{r7, lr}
 80295e2:	b086      	sub	sp, #24
 80295e4:	af00      	add	r7, sp, #0
 80295e6:	6078      	str	r0, [r7, #4]
 80295e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80295ea:	687b      	ldr	r3, [r7, #4]
 80295ec:	2b00      	cmp	r3, #0
 80295ee:	d101      	bne.n	80295f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80295f0:	2301      	movs	r3, #1
 80295f2:	e083      	b.n	80296fc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80295f4:	687b      	ldr	r3, [r7, #4]
 80295f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80295fa:	b2db      	uxtb	r3, r3
 80295fc:	2b00      	cmp	r3, #0
 80295fe:	d106      	bne.n	802960e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029600:	687b      	ldr	r3, [r7, #4]
 8029602:	2200      	movs	r2, #0
 8029604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8029608:	6878      	ldr	r0, [r7, #4]
 802960a:	f7fc f9c5 	bl	8025998 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802960e:	687b      	ldr	r3, [r7, #4]
 8029610:	2202      	movs	r2, #2
 8029612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8029616:	687b      	ldr	r3, [r7, #4]
 8029618:	681b      	ldr	r3, [r3, #0]
 802961a:	689b      	ldr	r3, [r3, #8]
 802961c:	687a      	ldr	r2, [r7, #4]
 802961e:	6812      	ldr	r2, [r2, #0]
 8029620:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029624:	f023 0307 	bic.w	r3, r3, #7
 8029628:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802962a:	687b      	ldr	r3, [r7, #4]
 802962c:	681a      	ldr	r2, [r3, #0]
 802962e:	687b      	ldr	r3, [r7, #4]
 8029630:	3304      	adds	r3, #4
 8029632:	4619      	mov	r1, r3
 8029634:	4610      	mov	r0, r2
 8029636:	f000 fb4b 	bl	8029cd0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802963a:	687b      	ldr	r3, [r7, #4]
 802963c:	681b      	ldr	r3, [r3, #0]
 802963e:	689b      	ldr	r3, [r3, #8]
 8029640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8029642:	687b      	ldr	r3, [r7, #4]
 8029644:	681b      	ldr	r3, [r3, #0]
 8029646:	699b      	ldr	r3, [r3, #24]
 8029648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 802964a:	687b      	ldr	r3, [r7, #4]
 802964c:	681b      	ldr	r3, [r3, #0]
 802964e:	6a1b      	ldr	r3, [r3, #32]
 8029650:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8029652:	683b      	ldr	r3, [r7, #0]
 8029654:	681b      	ldr	r3, [r3, #0]
 8029656:	697a      	ldr	r2, [r7, #20]
 8029658:	4313      	orrs	r3, r2
 802965a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 802965c:	693b      	ldr	r3, [r7, #16]
 802965e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029662:	f023 0303 	bic.w	r3, r3, #3
 8029666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8029668:	683b      	ldr	r3, [r7, #0]
 802966a:	689a      	ldr	r2, [r3, #8]
 802966c:	683b      	ldr	r3, [r7, #0]
 802966e:	699b      	ldr	r3, [r3, #24]
 8029670:	021b      	lsls	r3, r3, #8
 8029672:	4313      	orrs	r3, r2
 8029674:	693a      	ldr	r2, [r7, #16]
 8029676:	4313      	orrs	r3, r2
 8029678:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 802967a:	693b      	ldr	r3, [r7, #16]
 802967c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8029680:	f023 030c 	bic.w	r3, r3, #12
 8029684:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8029686:	693b      	ldr	r3, [r7, #16]
 8029688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802968c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029690:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8029692:	683b      	ldr	r3, [r7, #0]
 8029694:	68da      	ldr	r2, [r3, #12]
 8029696:	683b      	ldr	r3, [r7, #0]
 8029698:	69db      	ldr	r3, [r3, #28]
 802969a:	021b      	lsls	r3, r3, #8
 802969c:	4313      	orrs	r3, r2
 802969e:	693a      	ldr	r2, [r7, #16]
 80296a0:	4313      	orrs	r3, r2
 80296a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80296a4:	683b      	ldr	r3, [r7, #0]
 80296a6:	691b      	ldr	r3, [r3, #16]
 80296a8:	011a      	lsls	r2, r3, #4
 80296aa:	683b      	ldr	r3, [r7, #0]
 80296ac:	6a1b      	ldr	r3, [r3, #32]
 80296ae:	031b      	lsls	r3, r3, #12
 80296b0:	4313      	orrs	r3, r2
 80296b2:	693a      	ldr	r2, [r7, #16]
 80296b4:	4313      	orrs	r3, r2
 80296b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80296b8:	68fb      	ldr	r3, [r7, #12]
 80296ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80296be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80296c0:	68fb      	ldr	r3, [r7, #12]
 80296c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80296c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80296c8:	683b      	ldr	r3, [r7, #0]
 80296ca:	685a      	ldr	r2, [r3, #4]
 80296cc:	683b      	ldr	r3, [r7, #0]
 80296ce:	695b      	ldr	r3, [r3, #20]
 80296d0:	011b      	lsls	r3, r3, #4
 80296d2:	4313      	orrs	r3, r2
 80296d4:	68fa      	ldr	r2, [r7, #12]
 80296d6:	4313      	orrs	r3, r2
 80296d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80296da:	687b      	ldr	r3, [r7, #4]
 80296dc:	681b      	ldr	r3, [r3, #0]
 80296de:	697a      	ldr	r2, [r7, #20]
 80296e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80296e2:	687b      	ldr	r3, [r7, #4]
 80296e4:	681b      	ldr	r3, [r3, #0]
 80296e6:	693a      	ldr	r2, [r7, #16]
 80296e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80296ea:	687b      	ldr	r3, [r7, #4]
 80296ec:	681b      	ldr	r3, [r3, #0]
 80296ee:	68fa      	ldr	r2, [r7, #12]
 80296f0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80296f2:	687b      	ldr	r3, [r7, #4]
 80296f4:	2201      	movs	r2, #1
 80296f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80296fa:	2300      	movs	r3, #0
}
 80296fc:	4618      	mov	r0, r3
 80296fe:	3718      	adds	r7, #24
 8029700:	46bd      	mov	sp, r7
 8029702:	bd80      	pop	{r7, pc}

08029704 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8029704:	b580      	push	{r7, lr}
 8029706:	b082      	sub	sp, #8
 8029708:	af00      	add	r7, sp, #0
 802970a:	6078      	str	r0, [r7, #4]
 802970c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 802970e:	683b      	ldr	r3, [r7, #0]
 8029710:	2b00      	cmp	r3, #0
 8029712:	d002      	beq.n	802971a <HAL_TIM_Encoder_Start+0x16>
 8029714:	2b04      	cmp	r3, #4
 8029716:	d008      	beq.n	802972a <HAL_TIM_Encoder_Start+0x26>
 8029718:	e00f      	b.n	802973a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 802971a:	687b      	ldr	r3, [r7, #4]
 802971c:	681b      	ldr	r3, [r3, #0]
 802971e:	2201      	movs	r2, #1
 8029720:	2100      	movs	r1, #0
 8029722:	4618      	mov	r0, r3
 8029724:	f000 fdbe 	bl	802a2a4 <TIM_CCxChannelCmd>
      break;
 8029728:	e016      	b.n	8029758 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 802972a:	687b      	ldr	r3, [r7, #4]
 802972c:	681b      	ldr	r3, [r3, #0]
 802972e:	2201      	movs	r2, #1
 8029730:	2104      	movs	r1, #4
 8029732:	4618      	mov	r0, r3
 8029734:	f000 fdb6 	bl	802a2a4 <TIM_CCxChannelCmd>
      break;
 8029738:	e00e      	b.n	8029758 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 802973a:	687b      	ldr	r3, [r7, #4]
 802973c:	681b      	ldr	r3, [r3, #0]
 802973e:	2201      	movs	r2, #1
 8029740:	2100      	movs	r1, #0
 8029742:	4618      	mov	r0, r3
 8029744:	f000 fdae 	bl	802a2a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8029748:	687b      	ldr	r3, [r7, #4]
 802974a:	681b      	ldr	r3, [r3, #0]
 802974c:	2201      	movs	r2, #1
 802974e:	2104      	movs	r1, #4
 8029750:	4618      	mov	r0, r3
 8029752:	f000 fda7 	bl	802a2a4 <TIM_CCxChannelCmd>
      break;
 8029756:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8029758:	687b      	ldr	r3, [r7, #4]
 802975a:	681b      	ldr	r3, [r3, #0]
 802975c:	681a      	ldr	r2, [r3, #0]
 802975e:	687b      	ldr	r3, [r7, #4]
 8029760:	681b      	ldr	r3, [r3, #0]
 8029762:	f042 0201 	orr.w	r2, r2, #1
 8029766:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8029768:	2300      	movs	r3, #0
}
 802976a:	4618      	mov	r0, r3
 802976c:	3708      	adds	r7, #8
 802976e:	46bd      	mov	sp, r7
 8029770:	bd80      	pop	{r7, pc}

08029772 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8029772:	b580      	push	{r7, lr}
 8029774:	b082      	sub	sp, #8
 8029776:	af00      	add	r7, sp, #0
 8029778:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 802977a:	687b      	ldr	r3, [r7, #4]
 802977c:	681b      	ldr	r3, [r3, #0]
 802977e:	691b      	ldr	r3, [r3, #16]
 8029780:	f003 0302 	and.w	r3, r3, #2
 8029784:	2b02      	cmp	r3, #2
 8029786:	d122      	bne.n	80297ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8029788:	687b      	ldr	r3, [r7, #4]
 802978a:	681b      	ldr	r3, [r3, #0]
 802978c:	68db      	ldr	r3, [r3, #12]
 802978e:	f003 0302 	and.w	r3, r3, #2
 8029792:	2b02      	cmp	r3, #2
 8029794:	d11b      	bne.n	80297ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8029796:	687b      	ldr	r3, [r7, #4]
 8029798:	681b      	ldr	r3, [r3, #0]
 802979a:	f06f 0202 	mvn.w	r2, #2
 802979e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80297a0:	687b      	ldr	r3, [r7, #4]
 80297a2:	2201      	movs	r2, #1
 80297a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80297a6:	687b      	ldr	r3, [r7, #4]
 80297a8:	681b      	ldr	r3, [r3, #0]
 80297aa:	699b      	ldr	r3, [r3, #24]
 80297ac:	f003 0303 	and.w	r3, r3, #3
 80297b0:	2b00      	cmp	r3, #0
 80297b2:	d003      	beq.n	80297bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80297b4:	6878      	ldr	r0, [r7, #4]
 80297b6:	f000 fa6c 	bl	8029c92 <HAL_TIM_IC_CaptureCallback>
 80297ba:	e005      	b.n	80297c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80297bc:	6878      	ldr	r0, [r7, #4]
 80297be:	f000 fa5e 	bl	8029c7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80297c2:	6878      	ldr	r0, [r7, #4]
 80297c4:	f000 fa6f 	bl	8029ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80297c8:	687b      	ldr	r3, [r7, #4]
 80297ca:	2200      	movs	r2, #0
 80297cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80297ce:	687b      	ldr	r3, [r7, #4]
 80297d0:	681b      	ldr	r3, [r3, #0]
 80297d2:	691b      	ldr	r3, [r3, #16]
 80297d4:	f003 0304 	and.w	r3, r3, #4
 80297d8:	2b04      	cmp	r3, #4
 80297da:	d122      	bne.n	8029822 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80297dc:	687b      	ldr	r3, [r7, #4]
 80297de:	681b      	ldr	r3, [r3, #0]
 80297e0:	68db      	ldr	r3, [r3, #12]
 80297e2:	f003 0304 	and.w	r3, r3, #4
 80297e6:	2b04      	cmp	r3, #4
 80297e8:	d11b      	bne.n	8029822 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80297ea:	687b      	ldr	r3, [r7, #4]
 80297ec:	681b      	ldr	r3, [r3, #0]
 80297ee:	f06f 0204 	mvn.w	r2, #4
 80297f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80297f4:	687b      	ldr	r3, [r7, #4]
 80297f6:	2202      	movs	r2, #2
 80297f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80297fa:	687b      	ldr	r3, [r7, #4]
 80297fc:	681b      	ldr	r3, [r3, #0]
 80297fe:	699b      	ldr	r3, [r3, #24]
 8029800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029804:	2b00      	cmp	r3, #0
 8029806:	d003      	beq.n	8029810 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029808:	6878      	ldr	r0, [r7, #4]
 802980a:	f000 fa42 	bl	8029c92 <HAL_TIM_IC_CaptureCallback>
 802980e:	e005      	b.n	802981c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029810:	6878      	ldr	r0, [r7, #4]
 8029812:	f000 fa34 	bl	8029c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029816:	6878      	ldr	r0, [r7, #4]
 8029818:	f000 fa45 	bl	8029ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802981c:	687b      	ldr	r3, [r7, #4]
 802981e:	2200      	movs	r2, #0
 8029820:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8029822:	687b      	ldr	r3, [r7, #4]
 8029824:	681b      	ldr	r3, [r3, #0]
 8029826:	691b      	ldr	r3, [r3, #16]
 8029828:	f003 0308 	and.w	r3, r3, #8
 802982c:	2b08      	cmp	r3, #8
 802982e:	d122      	bne.n	8029876 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8029830:	687b      	ldr	r3, [r7, #4]
 8029832:	681b      	ldr	r3, [r3, #0]
 8029834:	68db      	ldr	r3, [r3, #12]
 8029836:	f003 0308 	and.w	r3, r3, #8
 802983a:	2b08      	cmp	r3, #8
 802983c:	d11b      	bne.n	8029876 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802983e:	687b      	ldr	r3, [r7, #4]
 8029840:	681b      	ldr	r3, [r3, #0]
 8029842:	f06f 0208 	mvn.w	r2, #8
 8029846:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8029848:	687b      	ldr	r3, [r7, #4]
 802984a:	2204      	movs	r2, #4
 802984c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802984e:	687b      	ldr	r3, [r7, #4]
 8029850:	681b      	ldr	r3, [r3, #0]
 8029852:	69db      	ldr	r3, [r3, #28]
 8029854:	f003 0303 	and.w	r3, r3, #3
 8029858:	2b00      	cmp	r3, #0
 802985a:	d003      	beq.n	8029864 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802985c:	6878      	ldr	r0, [r7, #4]
 802985e:	f000 fa18 	bl	8029c92 <HAL_TIM_IC_CaptureCallback>
 8029862:	e005      	b.n	8029870 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029864:	6878      	ldr	r0, [r7, #4]
 8029866:	f000 fa0a 	bl	8029c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802986a:	6878      	ldr	r0, [r7, #4]
 802986c:	f000 fa1b 	bl	8029ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029870:	687b      	ldr	r3, [r7, #4]
 8029872:	2200      	movs	r2, #0
 8029874:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8029876:	687b      	ldr	r3, [r7, #4]
 8029878:	681b      	ldr	r3, [r3, #0]
 802987a:	691b      	ldr	r3, [r3, #16]
 802987c:	f003 0310 	and.w	r3, r3, #16
 8029880:	2b10      	cmp	r3, #16
 8029882:	d122      	bne.n	80298ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8029884:	687b      	ldr	r3, [r7, #4]
 8029886:	681b      	ldr	r3, [r3, #0]
 8029888:	68db      	ldr	r3, [r3, #12]
 802988a:	f003 0310 	and.w	r3, r3, #16
 802988e:	2b10      	cmp	r3, #16
 8029890:	d11b      	bne.n	80298ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8029892:	687b      	ldr	r3, [r7, #4]
 8029894:	681b      	ldr	r3, [r3, #0]
 8029896:	f06f 0210 	mvn.w	r2, #16
 802989a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802989c:	687b      	ldr	r3, [r7, #4]
 802989e:	2208      	movs	r2, #8
 80298a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80298a2:	687b      	ldr	r3, [r7, #4]
 80298a4:	681b      	ldr	r3, [r3, #0]
 80298a6:	69db      	ldr	r3, [r3, #28]
 80298a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80298ac:	2b00      	cmp	r3, #0
 80298ae:	d003      	beq.n	80298b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80298b0:	6878      	ldr	r0, [r7, #4]
 80298b2:	f000 f9ee 	bl	8029c92 <HAL_TIM_IC_CaptureCallback>
 80298b6:	e005      	b.n	80298c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80298b8:	6878      	ldr	r0, [r7, #4]
 80298ba:	f000 f9e0 	bl	8029c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80298be:	6878      	ldr	r0, [r7, #4]
 80298c0:	f000 f9f1 	bl	8029ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80298c4:	687b      	ldr	r3, [r7, #4]
 80298c6:	2200      	movs	r2, #0
 80298c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80298ca:	687b      	ldr	r3, [r7, #4]
 80298cc:	681b      	ldr	r3, [r3, #0]
 80298ce:	691b      	ldr	r3, [r3, #16]
 80298d0:	f003 0301 	and.w	r3, r3, #1
 80298d4:	2b01      	cmp	r3, #1
 80298d6:	d10e      	bne.n	80298f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80298d8:	687b      	ldr	r3, [r7, #4]
 80298da:	681b      	ldr	r3, [r3, #0]
 80298dc:	68db      	ldr	r3, [r3, #12]
 80298de:	f003 0301 	and.w	r3, r3, #1
 80298e2:	2b01      	cmp	r3, #1
 80298e4:	d107      	bne.n	80298f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80298e6:	687b      	ldr	r3, [r7, #4]
 80298e8:	681b      	ldr	r3, [r3, #0]
 80298ea:	f06f 0201 	mvn.w	r2, #1
 80298ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80298f0:	6878      	ldr	r0, [r7, #4]
 80298f2:	f7f9 faf7 	bl	8022ee4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80298f6:	687b      	ldr	r3, [r7, #4]
 80298f8:	681b      	ldr	r3, [r3, #0]
 80298fa:	691b      	ldr	r3, [r3, #16]
 80298fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029900:	2b80      	cmp	r3, #128	; 0x80
 8029902:	d10e      	bne.n	8029922 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029904:	687b      	ldr	r3, [r7, #4]
 8029906:	681b      	ldr	r3, [r3, #0]
 8029908:	68db      	ldr	r3, [r3, #12]
 802990a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802990e:	2b80      	cmp	r3, #128	; 0x80
 8029910:	d107      	bne.n	8029922 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8029912:	687b      	ldr	r3, [r7, #4]
 8029914:	681b      	ldr	r3, [r3, #0]
 8029916:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802991a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802991c:	6878      	ldr	r0, [r7, #4]
 802991e:	f000 fdbf 	bl	802a4a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8029922:	687b      	ldr	r3, [r7, #4]
 8029924:	681b      	ldr	r3, [r3, #0]
 8029926:	691b      	ldr	r3, [r3, #16]
 8029928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802992c:	2b40      	cmp	r3, #64	; 0x40
 802992e:	d10e      	bne.n	802994e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8029930:	687b      	ldr	r3, [r7, #4]
 8029932:	681b      	ldr	r3, [r3, #0]
 8029934:	68db      	ldr	r3, [r3, #12]
 8029936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802993a:	2b40      	cmp	r3, #64	; 0x40
 802993c:	d107      	bne.n	802994e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802993e:	687b      	ldr	r3, [r7, #4]
 8029940:	681b      	ldr	r3, [r3, #0]
 8029942:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8029946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8029948:	6878      	ldr	r0, [r7, #4]
 802994a:	f000 f9b6 	bl	8029cba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802994e:	687b      	ldr	r3, [r7, #4]
 8029950:	681b      	ldr	r3, [r3, #0]
 8029952:	691b      	ldr	r3, [r3, #16]
 8029954:	f003 0320 	and.w	r3, r3, #32
 8029958:	2b20      	cmp	r3, #32
 802995a:	d10e      	bne.n	802997a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802995c:	687b      	ldr	r3, [r7, #4]
 802995e:	681b      	ldr	r3, [r3, #0]
 8029960:	68db      	ldr	r3, [r3, #12]
 8029962:	f003 0320 	and.w	r3, r3, #32
 8029966:	2b20      	cmp	r3, #32
 8029968:	d107      	bne.n	802997a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802996a:	687b      	ldr	r3, [r7, #4]
 802996c:	681b      	ldr	r3, [r3, #0]
 802996e:	f06f 0220 	mvn.w	r2, #32
 8029972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8029974:	6878      	ldr	r0, [r7, #4]
 8029976:	f000 fd89 	bl	802a48c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802997a:	bf00      	nop
 802997c:	3708      	adds	r7, #8
 802997e:	46bd      	mov	sp, r7
 8029980:	bd80      	pop	{r7, pc}
	...

08029984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8029984:	b580      	push	{r7, lr}
 8029986:	b084      	sub	sp, #16
 8029988:	af00      	add	r7, sp, #0
 802998a:	60f8      	str	r0, [r7, #12]
 802998c:	60b9      	str	r1, [r7, #8]
 802998e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8029990:	68fb      	ldr	r3, [r7, #12]
 8029992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029996:	2b01      	cmp	r3, #1
 8029998:	d101      	bne.n	802999e <HAL_TIM_PWM_ConfigChannel+0x1a>
 802999a:	2302      	movs	r3, #2
 802999c:	e0b4      	b.n	8029b08 <HAL_TIM_PWM_ConfigChannel+0x184>
 802999e:	68fb      	ldr	r3, [r7, #12]
 80299a0:	2201      	movs	r2, #1
 80299a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80299a6:	68fb      	ldr	r3, [r7, #12]
 80299a8:	2202      	movs	r2, #2
 80299aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80299ae:	687b      	ldr	r3, [r7, #4]
 80299b0:	2b0c      	cmp	r3, #12
 80299b2:	f200 809f 	bhi.w	8029af4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80299b6:	a201      	add	r2, pc, #4	; (adr r2, 80299bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80299b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80299bc:	080299f1 	.word	0x080299f1
 80299c0:	08029af5 	.word	0x08029af5
 80299c4:	08029af5 	.word	0x08029af5
 80299c8:	08029af5 	.word	0x08029af5
 80299cc:	08029a31 	.word	0x08029a31
 80299d0:	08029af5 	.word	0x08029af5
 80299d4:	08029af5 	.word	0x08029af5
 80299d8:	08029af5 	.word	0x08029af5
 80299dc:	08029a73 	.word	0x08029a73
 80299e0:	08029af5 	.word	0x08029af5
 80299e4:	08029af5 	.word	0x08029af5
 80299e8:	08029af5 	.word	0x08029af5
 80299ec:	08029ab3 	.word	0x08029ab3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80299f0:	68fb      	ldr	r3, [r7, #12]
 80299f2:	681b      	ldr	r3, [r3, #0]
 80299f4:	68b9      	ldr	r1, [r7, #8]
 80299f6:	4618      	mov	r0, r3
 80299f8:	f000 fa0a 	bl	8029e10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80299fc:	68fb      	ldr	r3, [r7, #12]
 80299fe:	681b      	ldr	r3, [r3, #0]
 8029a00:	699a      	ldr	r2, [r3, #24]
 8029a02:	68fb      	ldr	r3, [r7, #12]
 8029a04:	681b      	ldr	r3, [r3, #0]
 8029a06:	f042 0208 	orr.w	r2, r2, #8
 8029a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8029a0c:	68fb      	ldr	r3, [r7, #12]
 8029a0e:	681b      	ldr	r3, [r3, #0]
 8029a10:	699a      	ldr	r2, [r3, #24]
 8029a12:	68fb      	ldr	r3, [r7, #12]
 8029a14:	681b      	ldr	r3, [r3, #0]
 8029a16:	f022 0204 	bic.w	r2, r2, #4
 8029a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8029a1c:	68fb      	ldr	r3, [r7, #12]
 8029a1e:	681b      	ldr	r3, [r3, #0]
 8029a20:	6999      	ldr	r1, [r3, #24]
 8029a22:	68bb      	ldr	r3, [r7, #8]
 8029a24:	691a      	ldr	r2, [r3, #16]
 8029a26:	68fb      	ldr	r3, [r7, #12]
 8029a28:	681b      	ldr	r3, [r3, #0]
 8029a2a:	430a      	orrs	r2, r1
 8029a2c:	619a      	str	r2, [r3, #24]
      break;
 8029a2e:	e062      	b.n	8029af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8029a30:	68fb      	ldr	r3, [r7, #12]
 8029a32:	681b      	ldr	r3, [r3, #0]
 8029a34:	68b9      	ldr	r1, [r7, #8]
 8029a36:	4618      	mov	r0, r3
 8029a38:	f000 fa5a 	bl	8029ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8029a3c:	68fb      	ldr	r3, [r7, #12]
 8029a3e:	681b      	ldr	r3, [r3, #0]
 8029a40:	699a      	ldr	r2, [r3, #24]
 8029a42:	68fb      	ldr	r3, [r7, #12]
 8029a44:	681b      	ldr	r3, [r3, #0]
 8029a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8029a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8029a4c:	68fb      	ldr	r3, [r7, #12]
 8029a4e:	681b      	ldr	r3, [r3, #0]
 8029a50:	699a      	ldr	r2, [r3, #24]
 8029a52:	68fb      	ldr	r3, [r7, #12]
 8029a54:	681b      	ldr	r3, [r3, #0]
 8029a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8029a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8029a5c:	68fb      	ldr	r3, [r7, #12]
 8029a5e:	681b      	ldr	r3, [r3, #0]
 8029a60:	6999      	ldr	r1, [r3, #24]
 8029a62:	68bb      	ldr	r3, [r7, #8]
 8029a64:	691b      	ldr	r3, [r3, #16]
 8029a66:	021a      	lsls	r2, r3, #8
 8029a68:	68fb      	ldr	r3, [r7, #12]
 8029a6a:	681b      	ldr	r3, [r3, #0]
 8029a6c:	430a      	orrs	r2, r1
 8029a6e:	619a      	str	r2, [r3, #24]
      break;
 8029a70:	e041      	b.n	8029af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8029a72:	68fb      	ldr	r3, [r7, #12]
 8029a74:	681b      	ldr	r3, [r3, #0]
 8029a76:	68b9      	ldr	r1, [r7, #8]
 8029a78:	4618      	mov	r0, r3
 8029a7a:	f000 faaf 	bl	8029fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8029a7e:	68fb      	ldr	r3, [r7, #12]
 8029a80:	681b      	ldr	r3, [r3, #0]
 8029a82:	69da      	ldr	r2, [r3, #28]
 8029a84:	68fb      	ldr	r3, [r7, #12]
 8029a86:	681b      	ldr	r3, [r3, #0]
 8029a88:	f042 0208 	orr.w	r2, r2, #8
 8029a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8029a8e:	68fb      	ldr	r3, [r7, #12]
 8029a90:	681b      	ldr	r3, [r3, #0]
 8029a92:	69da      	ldr	r2, [r3, #28]
 8029a94:	68fb      	ldr	r3, [r7, #12]
 8029a96:	681b      	ldr	r3, [r3, #0]
 8029a98:	f022 0204 	bic.w	r2, r2, #4
 8029a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8029a9e:	68fb      	ldr	r3, [r7, #12]
 8029aa0:	681b      	ldr	r3, [r3, #0]
 8029aa2:	69d9      	ldr	r1, [r3, #28]
 8029aa4:	68bb      	ldr	r3, [r7, #8]
 8029aa6:	691a      	ldr	r2, [r3, #16]
 8029aa8:	68fb      	ldr	r3, [r7, #12]
 8029aaa:	681b      	ldr	r3, [r3, #0]
 8029aac:	430a      	orrs	r2, r1
 8029aae:	61da      	str	r2, [r3, #28]
      break;
 8029ab0:	e021      	b.n	8029af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8029ab2:	68fb      	ldr	r3, [r7, #12]
 8029ab4:	681b      	ldr	r3, [r3, #0]
 8029ab6:	68b9      	ldr	r1, [r7, #8]
 8029ab8:	4618      	mov	r0, r3
 8029aba:	f000 fb03 	bl	802a0c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8029abe:	68fb      	ldr	r3, [r7, #12]
 8029ac0:	681b      	ldr	r3, [r3, #0]
 8029ac2:	69da      	ldr	r2, [r3, #28]
 8029ac4:	68fb      	ldr	r3, [r7, #12]
 8029ac6:	681b      	ldr	r3, [r3, #0]
 8029ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8029acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8029ace:	68fb      	ldr	r3, [r7, #12]
 8029ad0:	681b      	ldr	r3, [r3, #0]
 8029ad2:	69da      	ldr	r2, [r3, #28]
 8029ad4:	68fb      	ldr	r3, [r7, #12]
 8029ad6:	681b      	ldr	r3, [r3, #0]
 8029ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8029adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8029ade:	68fb      	ldr	r3, [r7, #12]
 8029ae0:	681b      	ldr	r3, [r3, #0]
 8029ae2:	69d9      	ldr	r1, [r3, #28]
 8029ae4:	68bb      	ldr	r3, [r7, #8]
 8029ae6:	691b      	ldr	r3, [r3, #16]
 8029ae8:	021a      	lsls	r2, r3, #8
 8029aea:	68fb      	ldr	r3, [r7, #12]
 8029aec:	681b      	ldr	r3, [r3, #0]
 8029aee:	430a      	orrs	r2, r1
 8029af0:	61da      	str	r2, [r3, #28]
      break;
 8029af2:	e000      	b.n	8029af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8029af4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8029af6:	68fb      	ldr	r3, [r7, #12]
 8029af8:	2201      	movs	r2, #1
 8029afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029afe:	68fb      	ldr	r3, [r7, #12]
 8029b00:	2200      	movs	r2, #0
 8029b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029b06:	2300      	movs	r3, #0
}
 8029b08:	4618      	mov	r0, r3
 8029b0a:	3710      	adds	r7, #16
 8029b0c:	46bd      	mov	sp, r7
 8029b0e:	bd80      	pop	{r7, pc}

08029b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8029b10:	b580      	push	{r7, lr}
 8029b12:	b084      	sub	sp, #16
 8029b14:	af00      	add	r7, sp, #0
 8029b16:	6078      	str	r0, [r7, #4]
 8029b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8029b1a:	687b      	ldr	r3, [r7, #4]
 8029b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029b20:	2b01      	cmp	r3, #1
 8029b22:	d101      	bne.n	8029b28 <HAL_TIM_ConfigClockSource+0x18>
 8029b24:	2302      	movs	r3, #2
 8029b26:	e0a6      	b.n	8029c76 <HAL_TIM_ConfigClockSource+0x166>
 8029b28:	687b      	ldr	r3, [r7, #4]
 8029b2a:	2201      	movs	r2, #1
 8029b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029b30:	687b      	ldr	r3, [r7, #4]
 8029b32:	2202      	movs	r2, #2
 8029b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8029b38:	687b      	ldr	r3, [r7, #4]
 8029b3a:	681b      	ldr	r3, [r3, #0]
 8029b3c:	689b      	ldr	r3, [r3, #8]
 8029b3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8029b40:	68fb      	ldr	r3, [r7, #12]
 8029b42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8029b46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029b48:	68fb      	ldr	r3, [r7, #12]
 8029b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029b4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8029b50:	687b      	ldr	r3, [r7, #4]
 8029b52:	681b      	ldr	r3, [r3, #0]
 8029b54:	68fa      	ldr	r2, [r7, #12]
 8029b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8029b58:	683b      	ldr	r3, [r7, #0]
 8029b5a:	681b      	ldr	r3, [r3, #0]
 8029b5c:	2b40      	cmp	r3, #64	; 0x40
 8029b5e:	d067      	beq.n	8029c30 <HAL_TIM_ConfigClockSource+0x120>
 8029b60:	2b40      	cmp	r3, #64	; 0x40
 8029b62:	d80b      	bhi.n	8029b7c <HAL_TIM_ConfigClockSource+0x6c>
 8029b64:	2b10      	cmp	r3, #16
 8029b66:	d073      	beq.n	8029c50 <HAL_TIM_ConfigClockSource+0x140>
 8029b68:	2b10      	cmp	r3, #16
 8029b6a:	d802      	bhi.n	8029b72 <HAL_TIM_ConfigClockSource+0x62>
 8029b6c:	2b00      	cmp	r3, #0
 8029b6e:	d06f      	beq.n	8029c50 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8029b70:	e078      	b.n	8029c64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029b72:	2b20      	cmp	r3, #32
 8029b74:	d06c      	beq.n	8029c50 <HAL_TIM_ConfigClockSource+0x140>
 8029b76:	2b30      	cmp	r3, #48	; 0x30
 8029b78:	d06a      	beq.n	8029c50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8029b7a:	e073      	b.n	8029c64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029b7c:	2b70      	cmp	r3, #112	; 0x70
 8029b7e:	d00d      	beq.n	8029b9c <HAL_TIM_ConfigClockSource+0x8c>
 8029b80:	2b70      	cmp	r3, #112	; 0x70
 8029b82:	d804      	bhi.n	8029b8e <HAL_TIM_ConfigClockSource+0x7e>
 8029b84:	2b50      	cmp	r3, #80	; 0x50
 8029b86:	d033      	beq.n	8029bf0 <HAL_TIM_ConfigClockSource+0xe0>
 8029b88:	2b60      	cmp	r3, #96	; 0x60
 8029b8a:	d041      	beq.n	8029c10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8029b8c:	e06a      	b.n	8029c64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029b92:	d066      	beq.n	8029c62 <HAL_TIM_ConfigClockSource+0x152>
 8029b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029b98:	d017      	beq.n	8029bca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8029b9a:	e063      	b.n	8029c64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8029b9c:	687b      	ldr	r3, [r7, #4]
 8029b9e:	6818      	ldr	r0, [r3, #0]
 8029ba0:	683b      	ldr	r3, [r7, #0]
 8029ba2:	6899      	ldr	r1, [r3, #8]
 8029ba4:	683b      	ldr	r3, [r7, #0]
 8029ba6:	685a      	ldr	r2, [r3, #4]
 8029ba8:	683b      	ldr	r3, [r7, #0]
 8029baa:	68db      	ldr	r3, [r3, #12]
 8029bac:	f000 fb5a 	bl	802a264 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8029bb0:	687b      	ldr	r3, [r7, #4]
 8029bb2:	681b      	ldr	r3, [r3, #0]
 8029bb4:	689b      	ldr	r3, [r3, #8]
 8029bb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8029bb8:	68fb      	ldr	r3, [r7, #12]
 8029bba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8029bbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8029bc0:	687b      	ldr	r3, [r7, #4]
 8029bc2:	681b      	ldr	r3, [r3, #0]
 8029bc4:	68fa      	ldr	r2, [r7, #12]
 8029bc6:	609a      	str	r2, [r3, #8]
      break;
 8029bc8:	e04c      	b.n	8029c64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8029bca:	687b      	ldr	r3, [r7, #4]
 8029bcc:	6818      	ldr	r0, [r3, #0]
 8029bce:	683b      	ldr	r3, [r7, #0]
 8029bd0:	6899      	ldr	r1, [r3, #8]
 8029bd2:	683b      	ldr	r3, [r7, #0]
 8029bd4:	685a      	ldr	r2, [r3, #4]
 8029bd6:	683b      	ldr	r3, [r7, #0]
 8029bd8:	68db      	ldr	r3, [r3, #12]
 8029bda:	f000 fb43 	bl	802a264 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8029bde:	687b      	ldr	r3, [r7, #4]
 8029be0:	681b      	ldr	r3, [r3, #0]
 8029be2:	689a      	ldr	r2, [r3, #8]
 8029be4:	687b      	ldr	r3, [r7, #4]
 8029be6:	681b      	ldr	r3, [r3, #0]
 8029be8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8029bec:	609a      	str	r2, [r3, #8]
      break;
 8029bee:	e039      	b.n	8029c64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8029bf0:	687b      	ldr	r3, [r7, #4]
 8029bf2:	6818      	ldr	r0, [r3, #0]
 8029bf4:	683b      	ldr	r3, [r7, #0]
 8029bf6:	6859      	ldr	r1, [r3, #4]
 8029bf8:	683b      	ldr	r3, [r7, #0]
 8029bfa:	68db      	ldr	r3, [r3, #12]
 8029bfc:	461a      	mov	r2, r3
 8029bfe:	f000 fab7 	bl	802a170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8029c02:	687b      	ldr	r3, [r7, #4]
 8029c04:	681b      	ldr	r3, [r3, #0]
 8029c06:	2150      	movs	r1, #80	; 0x50
 8029c08:	4618      	mov	r0, r3
 8029c0a:	f000 fb10 	bl	802a22e <TIM_ITRx_SetConfig>
      break;
 8029c0e:	e029      	b.n	8029c64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8029c10:	687b      	ldr	r3, [r7, #4]
 8029c12:	6818      	ldr	r0, [r3, #0]
 8029c14:	683b      	ldr	r3, [r7, #0]
 8029c16:	6859      	ldr	r1, [r3, #4]
 8029c18:	683b      	ldr	r3, [r7, #0]
 8029c1a:	68db      	ldr	r3, [r3, #12]
 8029c1c:	461a      	mov	r2, r3
 8029c1e:	f000 fad6 	bl	802a1ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8029c22:	687b      	ldr	r3, [r7, #4]
 8029c24:	681b      	ldr	r3, [r3, #0]
 8029c26:	2160      	movs	r1, #96	; 0x60
 8029c28:	4618      	mov	r0, r3
 8029c2a:	f000 fb00 	bl	802a22e <TIM_ITRx_SetConfig>
      break;
 8029c2e:	e019      	b.n	8029c64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8029c30:	687b      	ldr	r3, [r7, #4]
 8029c32:	6818      	ldr	r0, [r3, #0]
 8029c34:	683b      	ldr	r3, [r7, #0]
 8029c36:	6859      	ldr	r1, [r3, #4]
 8029c38:	683b      	ldr	r3, [r7, #0]
 8029c3a:	68db      	ldr	r3, [r3, #12]
 8029c3c:	461a      	mov	r2, r3
 8029c3e:	f000 fa97 	bl	802a170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8029c42:	687b      	ldr	r3, [r7, #4]
 8029c44:	681b      	ldr	r3, [r3, #0]
 8029c46:	2140      	movs	r1, #64	; 0x40
 8029c48:	4618      	mov	r0, r3
 8029c4a:	f000 faf0 	bl	802a22e <TIM_ITRx_SetConfig>
      break;
 8029c4e:	e009      	b.n	8029c64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8029c50:	687b      	ldr	r3, [r7, #4]
 8029c52:	681a      	ldr	r2, [r3, #0]
 8029c54:	683b      	ldr	r3, [r7, #0]
 8029c56:	681b      	ldr	r3, [r3, #0]
 8029c58:	4619      	mov	r1, r3
 8029c5a:	4610      	mov	r0, r2
 8029c5c:	f000 fae7 	bl	802a22e <TIM_ITRx_SetConfig>
      break;
 8029c60:	e000      	b.n	8029c64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8029c62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8029c64:	687b      	ldr	r3, [r7, #4]
 8029c66:	2201      	movs	r2, #1
 8029c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029c6c:	687b      	ldr	r3, [r7, #4]
 8029c6e:	2200      	movs	r2, #0
 8029c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029c74:	2300      	movs	r3, #0
}
 8029c76:	4618      	mov	r0, r3
 8029c78:	3710      	adds	r7, #16
 8029c7a:	46bd      	mov	sp, r7
 8029c7c:	bd80      	pop	{r7, pc}

08029c7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8029c7e:	b480      	push	{r7}
 8029c80:	b083      	sub	sp, #12
 8029c82:	af00      	add	r7, sp, #0
 8029c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8029c86:	bf00      	nop
 8029c88:	370c      	adds	r7, #12
 8029c8a:	46bd      	mov	sp, r7
 8029c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c90:	4770      	bx	lr

08029c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8029c92:	b480      	push	{r7}
 8029c94:	b083      	sub	sp, #12
 8029c96:	af00      	add	r7, sp, #0
 8029c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8029c9a:	bf00      	nop
 8029c9c:	370c      	adds	r7, #12
 8029c9e:	46bd      	mov	sp, r7
 8029ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ca4:	4770      	bx	lr

08029ca6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8029ca6:	b480      	push	{r7}
 8029ca8:	b083      	sub	sp, #12
 8029caa:	af00      	add	r7, sp, #0
 8029cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8029cae:	bf00      	nop
 8029cb0:	370c      	adds	r7, #12
 8029cb2:	46bd      	mov	sp, r7
 8029cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cb8:	4770      	bx	lr

08029cba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8029cba:	b480      	push	{r7}
 8029cbc:	b083      	sub	sp, #12
 8029cbe:	af00      	add	r7, sp, #0
 8029cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8029cc2:	bf00      	nop
 8029cc4:	370c      	adds	r7, #12
 8029cc6:	46bd      	mov	sp, r7
 8029cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ccc:	4770      	bx	lr
	...

08029cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8029cd0:	b480      	push	{r7}
 8029cd2:	b085      	sub	sp, #20
 8029cd4:	af00      	add	r7, sp, #0
 8029cd6:	6078      	str	r0, [r7, #4]
 8029cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8029cda:	687b      	ldr	r3, [r7, #4]
 8029cdc:	681b      	ldr	r3, [r3, #0]
 8029cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8029ce0:	687b      	ldr	r3, [r7, #4]
 8029ce2:	4a40      	ldr	r2, [pc, #256]	; (8029de4 <TIM_Base_SetConfig+0x114>)
 8029ce4:	4293      	cmp	r3, r2
 8029ce6:	d013      	beq.n	8029d10 <TIM_Base_SetConfig+0x40>
 8029ce8:	687b      	ldr	r3, [r7, #4]
 8029cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029cee:	d00f      	beq.n	8029d10 <TIM_Base_SetConfig+0x40>
 8029cf0:	687b      	ldr	r3, [r7, #4]
 8029cf2:	4a3d      	ldr	r2, [pc, #244]	; (8029de8 <TIM_Base_SetConfig+0x118>)
 8029cf4:	4293      	cmp	r3, r2
 8029cf6:	d00b      	beq.n	8029d10 <TIM_Base_SetConfig+0x40>
 8029cf8:	687b      	ldr	r3, [r7, #4]
 8029cfa:	4a3c      	ldr	r2, [pc, #240]	; (8029dec <TIM_Base_SetConfig+0x11c>)
 8029cfc:	4293      	cmp	r3, r2
 8029cfe:	d007      	beq.n	8029d10 <TIM_Base_SetConfig+0x40>
 8029d00:	687b      	ldr	r3, [r7, #4]
 8029d02:	4a3b      	ldr	r2, [pc, #236]	; (8029df0 <TIM_Base_SetConfig+0x120>)
 8029d04:	4293      	cmp	r3, r2
 8029d06:	d003      	beq.n	8029d10 <TIM_Base_SetConfig+0x40>
 8029d08:	687b      	ldr	r3, [r7, #4]
 8029d0a:	4a3a      	ldr	r2, [pc, #232]	; (8029df4 <TIM_Base_SetConfig+0x124>)
 8029d0c:	4293      	cmp	r3, r2
 8029d0e:	d108      	bne.n	8029d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8029d10:	68fb      	ldr	r3, [r7, #12]
 8029d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8029d18:	683b      	ldr	r3, [r7, #0]
 8029d1a:	685b      	ldr	r3, [r3, #4]
 8029d1c:	68fa      	ldr	r2, [r7, #12]
 8029d1e:	4313      	orrs	r3, r2
 8029d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8029d22:	687b      	ldr	r3, [r7, #4]
 8029d24:	4a2f      	ldr	r2, [pc, #188]	; (8029de4 <TIM_Base_SetConfig+0x114>)
 8029d26:	4293      	cmp	r3, r2
 8029d28:	d02b      	beq.n	8029d82 <TIM_Base_SetConfig+0xb2>
 8029d2a:	687b      	ldr	r3, [r7, #4]
 8029d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029d30:	d027      	beq.n	8029d82 <TIM_Base_SetConfig+0xb2>
 8029d32:	687b      	ldr	r3, [r7, #4]
 8029d34:	4a2c      	ldr	r2, [pc, #176]	; (8029de8 <TIM_Base_SetConfig+0x118>)
 8029d36:	4293      	cmp	r3, r2
 8029d38:	d023      	beq.n	8029d82 <TIM_Base_SetConfig+0xb2>
 8029d3a:	687b      	ldr	r3, [r7, #4]
 8029d3c:	4a2b      	ldr	r2, [pc, #172]	; (8029dec <TIM_Base_SetConfig+0x11c>)
 8029d3e:	4293      	cmp	r3, r2
 8029d40:	d01f      	beq.n	8029d82 <TIM_Base_SetConfig+0xb2>
 8029d42:	687b      	ldr	r3, [r7, #4]
 8029d44:	4a2a      	ldr	r2, [pc, #168]	; (8029df0 <TIM_Base_SetConfig+0x120>)
 8029d46:	4293      	cmp	r3, r2
 8029d48:	d01b      	beq.n	8029d82 <TIM_Base_SetConfig+0xb2>
 8029d4a:	687b      	ldr	r3, [r7, #4]
 8029d4c:	4a29      	ldr	r2, [pc, #164]	; (8029df4 <TIM_Base_SetConfig+0x124>)
 8029d4e:	4293      	cmp	r3, r2
 8029d50:	d017      	beq.n	8029d82 <TIM_Base_SetConfig+0xb2>
 8029d52:	687b      	ldr	r3, [r7, #4]
 8029d54:	4a28      	ldr	r2, [pc, #160]	; (8029df8 <TIM_Base_SetConfig+0x128>)
 8029d56:	4293      	cmp	r3, r2
 8029d58:	d013      	beq.n	8029d82 <TIM_Base_SetConfig+0xb2>
 8029d5a:	687b      	ldr	r3, [r7, #4]
 8029d5c:	4a27      	ldr	r2, [pc, #156]	; (8029dfc <TIM_Base_SetConfig+0x12c>)
 8029d5e:	4293      	cmp	r3, r2
 8029d60:	d00f      	beq.n	8029d82 <TIM_Base_SetConfig+0xb2>
 8029d62:	687b      	ldr	r3, [r7, #4]
 8029d64:	4a26      	ldr	r2, [pc, #152]	; (8029e00 <TIM_Base_SetConfig+0x130>)
 8029d66:	4293      	cmp	r3, r2
 8029d68:	d00b      	beq.n	8029d82 <TIM_Base_SetConfig+0xb2>
 8029d6a:	687b      	ldr	r3, [r7, #4]
 8029d6c:	4a25      	ldr	r2, [pc, #148]	; (8029e04 <TIM_Base_SetConfig+0x134>)
 8029d6e:	4293      	cmp	r3, r2
 8029d70:	d007      	beq.n	8029d82 <TIM_Base_SetConfig+0xb2>
 8029d72:	687b      	ldr	r3, [r7, #4]
 8029d74:	4a24      	ldr	r2, [pc, #144]	; (8029e08 <TIM_Base_SetConfig+0x138>)
 8029d76:	4293      	cmp	r3, r2
 8029d78:	d003      	beq.n	8029d82 <TIM_Base_SetConfig+0xb2>
 8029d7a:	687b      	ldr	r3, [r7, #4]
 8029d7c:	4a23      	ldr	r2, [pc, #140]	; (8029e0c <TIM_Base_SetConfig+0x13c>)
 8029d7e:	4293      	cmp	r3, r2
 8029d80:	d108      	bne.n	8029d94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8029d82:	68fb      	ldr	r3, [r7, #12]
 8029d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8029d8a:	683b      	ldr	r3, [r7, #0]
 8029d8c:	68db      	ldr	r3, [r3, #12]
 8029d8e:	68fa      	ldr	r2, [r7, #12]
 8029d90:	4313      	orrs	r3, r2
 8029d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8029d94:	68fb      	ldr	r3, [r7, #12]
 8029d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8029d9a:	683b      	ldr	r3, [r7, #0]
 8029d9c:	695b      	ldr	r3, [r3, #20]
 8029d9e:	4313      	orrs	r3, r2
 8029da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8029da2:	687b      	ldr	r3, [r7, #4]
 8029da4:	68fa      	ldr	r2, [r7, #12]
 8029da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8029da8:	683b      	ldr	r3, [r7, #0]
 8029daa:	689a      	ldr	r2, [r3, #8]
 8029dac:	687b      	ldr	r3, [r7, #4]
 8029dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8029db0:	683b      	ldr	r3, [r7, #0]
 8029db2:	681a      	ldr	r2, [r3, #0]
 8029db4:	687b      	ldr	r3, [r7, #4]
 8029db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8029db8:	687b      	ldr	r3, [r7, #4]
 8029dba:	4a0a      	ldr	r2, [pc, #40]	; (8029de4 <TIM_Base_SetConfig+0x114>)
 8029dbc:	4293      	cmp	r3, r2
 8029dbe:	d003      	beq.n	8029dc8 <TIM_Base_SetConfig+0xf8>
 8029dc0:	687b      	ldr	r3, [r7, #4]
 8029dc2:	4a0c      	ldr	r2, [pc, #48]	; (8029df4 <TIM_Base_SetConfig+0x124>)
 8029dc4:	4293      	cmp	r3, r2
 8029dc6:	d103      	bne.n	8029dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8029dc8:	683b      	ldr	r3, [r7, #0]
 8029dca:	691a      	ldr	r2, [r3, #16]
 8029dcc:	687b      	ldr	r3, [r7, #4]
 8029dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8029dd0:	687b      	ldr	r3, [r7, #4]
 8029dd2:	2201      	movs	r2, #1
 8029dd4:	615a      	str	r2, [r3, #20]
}
 8029dd6:	bf00      	nop
 8029dd8:	3714      	adds	r7, #20
 8029dda:	46bd      	mov	sp, r7
 8029ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029de0:	4770      	bx	lr
 8029de2:	bf00      	nop
 8029de4:	40010000 	.word	0x40010000
 8029de8:	40000400 	.word	0x40000400
 8029dec:	40000800 	.word	0x40000800
 8029df0:	40000c00 	.word	0x40000c00
 8029df4:	40010400 	.word	0x40010400
 8029df8:	40014000 	.word	0x40014000
 8029dfc:	40014400 	.word	0x40014400
 8029e00:	40014800 	.word	0x40014800
 8029e04:	40001800 	.word	0x40001800
 8029e08:	40001c00 	.word	0x40001c00
 8029e0c:	40002000 	.word	0x40002000

08029e10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029e10:	b480      	push	{r7}
 8029e12:	b087      	sub	sp, #28
 8029e14:	af00      	add	r7, sp, #0
 8029e16:	6078      	str	r0, [r7, #4]
 8029e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029e1a:	687b      	ldr	r3, [r7, #4]
 8029e1c:	6a1b      	ldr	r3, [r3, #32]
 8029e1e:	f023 0201 	bic.w	r2, r3, #1
 8029e22:	687b      	ldr	r3, [r7, #4]
 8029e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029e26:	687b      	ldr	r3, [r7, #4]
 8029e28:	6a1b      	ldr	r3, [r3, #32]
 8029e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029e2c:	687b      	ldr	r3, [r7, #4]
 8029e2e:	685b      	ldr	r3, [r3, #4]
 8029e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029e32:	687b      	ldr	r3, [r7, #4]
 8029e34:	699b      	ldr	r3, [r3, #24]
 8029e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8029e38:	68fb      	ldr	r3, [r7, #12]
 8029e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8029e40:	68fb      	ldr	r3, [r7, #12]
 8029e42:	f023 0303 	bic.w	r3, r3, #3
 8029e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029e48:	683b      	ldr	r3, [r7, #0]
 8029e4a:	681b      	ldr	r3, [r3, #0]
 8029e4c:	68fa      	ldr	r2, [r7, #12]
 8029e4e:	4313      	orrs	r3, r2
 8029e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8029e52:	697b      	ldr	r3, [r7, #20]
 8029e54:	f023 0302 	bic.w	r3, r3, #2
 8029e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8029e5a:	683b      	ldr	r3, [r7, #0]
 8029e5c:	689b      	ldr	r3, [r3, #8]
 8029e5e:	697a      	ldr	r2, [r7, #20]
 8029e60:	4313      	orrs	r3, r2
 8029e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8029e64:	687b      	ldr	r3, [r7, #4]
 8029e66:	4a20      	ldr	r2, [pc, #128]	; (8029ee8 <TIM_OC1_SetConfig+0xd8>)
 8029e68:	4293      	cmp	r3, r2
 8029e6a:	d003      	beq.n	8029e74 <TIM_OC1_SetConfig+0x64>
 8029e6c:	687b      	ldr	r3, [r7, #4]
 8029e6e:	4a1f      	ldr	r2, [pc, #124]	; (8029eec <TIM_OC1_SetConfig+0xdc>)
 8029e70:	4293      	cmp	r3, r2
 8029e72:	d10c      	bne.n	8029e8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8029e74:	697b      	ldr	r3, [r7, #20]
 8029e76:	f023 0308 	bic.w	r3, r3, #8
 8029e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8029e7c:	683b      	ldr	r3, [r7, #0]
 8029e7e:	68db      	ldr	r3, [r3, #12]
 8029e80:	697a      	ldr	r2, [r7, #20]
 8029e82:	4313      	orrs	r3, r2
 8029e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8029e86:	697b      	ldr	r3, [r7, #20]
 8029e88:	f023 0304 	bic.w	r3, r3, #4
 8029e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029e8e:	687b      	ldr	r3, [r7, #4]
 8029e90:	4a15      	ldr	r2, [pc, #84]	; (8029ee8 <TIM_OC1_SetConfig+0xd8>)
 8029e92:	4293      	cmp	r3, r2
 8029e94:	d003      	beq.n	8029e9e <TIM_OC1_SetConfig+0x8e>
 8029e96:	687b      	ldr	r3, [r7, #4]
 8029e98:	4a14      	ldr	r2, [pc, #80]	; (8029eec <TIM_OC1_SetConfig+0xdc>)
 8029e9a:	4293      	cmp	r3, r2
 8029e9c:	d111      	bne.n	8029ec2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8029e9e:	693b      	ldr	r3, [r7, #16]
 8029ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8029ea6:	693b      	ldr	r3, [r7, #16]
 8029ea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8029eae:	683b      	ldr	r3, [r7, #0]
 8029eb0:	695b      	ldr	r3, [r3, #20]
 8029eb2:	693a      	ldr	r2, [r7, #16]
 8029eb4:	4313      	orrs	r3, r2
 8029eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8029eb8:	683b      	ldr	r3, [r7, #0]
 8029eba:	699b      	ldr	r3, [r3, #24]
 8029ebc:	693a      	ldr	r2, [r7, #16]
 8029ebe:	4313      	orrs	r3, r2
 8029ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029ec2:	687b      	ldr	r3, [r7, #4]
 8029ec4:	693a      	ldr	r2, [r7, #16]
 8029ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029ec8:	687b      	ldr	r3, [r7, #4]
 8029eca:	68fa      	ldr	r2, [r7, #12]
 8029ecc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8029ece:	683b      	ldr	r3, [r7, #0]
 8029ed0:	685a      	ldr	r2, [r3, #4]
 8029ed2:	687b      	ldr	r3, [r7, #4]
 8029ed4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029ed6:	687b      	ldr	r3, [r7, #4]
 8029ed8:	697a      	ldr	r2, [r7, #20]
 8029eda:	621a      	str	r2, [r3, #32]
}
 8029edc:	bf00      	nop
 8029ede:	371c      	adds	r7, #28
 8029ee0:	46bd      	mov	sp, r7
 8029ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ee6:	4770      	bx	lr
 8029ee8:	40010000 	.word	0x40010000
 8029eec:	40010400 	.word	0x40010400

08029ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029ef0:	b480      	push	{r7}
 8029ef2:	b087      	sub	sp, #28
 8029ef4:	af00      	add	r7, sp, #0
 8029ef6:	6078      	str	r0, [r7, #4]
 8029ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029efa:	687b      	ldr	r3, [r7, #4]
 8029efc:	6a1b      	ldr	r3, [r3, #32]
 8029efe:	f023 0210 	bic.w	r2, r3, #16
 8029f02:	687b      	ldr	r3, [r7, #4]
 8029f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029f06:	687b      	ldr	r3, [r7, #4]
 8029f08:	6a1b      	ldr	r3, [r3, #32]
 8029f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029f0c:	687b      	ldr	r3, [r7, #4]
 8029f0e:	685b      	ldr	r3, [r3, #4]
 8029f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029f12:	687b      	ldr	r3, [r7, #4]
 8029f14:	699b      	ldr	r3, [r3, #24]
 8029f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8029f18:	68fb      	ldr	r3, [r7, #12]
 8029f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8029f20:	68fb      	ldr	r3, [r7, #12]
 8029f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029f28:	683b      	ldr	r3, [r7, #0]
 8029f2a:	681b      	ldr	r3, [r3, #0]
 8029f2c:	021b      	lsls	r3, r3, #8
 8029f2e:	68fa      	ldr	r2, [r7, #12]
 8029f30:	4313      	orrs	r3, r2
 8029f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8029f34:	697b      	ldr	r3, [r7, #20]
 8029f36:	f023 0320 	bic.w	r3, r3, #32
 8029f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8029f3c:	683b      	ldr	r3, [r7, #0]
 8029f3e:	689b      	ldr	r3, [r3, #8]
 8029f40:	011b      	lsls	r3, r3, #4
 8029f42:	697a      	ldr	r2, [r7, #20]
 8029f44:	4313      	orrs	r3, r2
 8029f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8029f48:	687b      	ldr	r3, [r7, #4]
 8029f4a:	4a22      	ldr	r2, [pc, #136]	; (8029fd4 <TIM_OC2_SetConfig+0xe4>)
 8029f4c:	4293      	cmp	r3, r2
 8029f4e:	d003      	beq.n	8029f58 <TIM_OC2_SetConfig+0x68>
 8029f50:	687b      	ldr	r3, [r7, #4]
 8029f52:	4a21      	ldr	r2, [pc, #132]	; (8029fd8 <TIM_OC2_SetConfig+0xe8>)
 8029f54:	4293      	cmp	r3, r2
 8029f56:	d10d      	bne.n	8029f74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8029f58:	697b      	ldr	r3, [r7, #20]
 8029f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8029f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8029f60:	683b      	ldr	r3, [r7, #0]
 8029f62:	68db      	ldr	r3, [r3, #12]
 8029f64:	011b      	lsls	r3, r3, #4
 8029f66:	697a      	ldr	r2, [r7, #20]
 8029f68:	4313      	orrs	r3, r2
 8029f6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8029f6c:	697b      	ldr	r3, [r7, #20]
 8029f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029f72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029f74:	687b      	ldr	r3, [r7, #4]
 8029f76:	4a17      	ldr	r2, [pc, #92]	; (8029fd4 <TIM_OC2_SetConfig+0xe4>)
 8029f78:	4293      	cmp	r3, r2
 8029f7a:	d003      	beq.n	8029f84 <TIM_OC2_SetConfig+0x94>
 8029f7c:	687b      	ldr	r3, [r7, #4]
 8029f7e:	4a16      	ldr	r2, [pc, #88]	; (8029fd8 <TIM_OC2_SetConfig+0xe8>)
 8029f80:	4293      	cmp	r3, r2
 8029f82:	d113      	bne.n	8029fac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8029f84:	693b      	ldr	r3, [r7, #16]
 8029f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8029f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8029f8c:	693b      	ldr	r3, [r7, #16]
 8029f8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8029f94:	683b      	ldr	r3, [r7, #0]
 8029f96:	695b      	ldr	r3, [r3, #20]
 8029f98:	009b      	lsls	r3, r3, #2
 8029f9a:	693a      	ldr	r2, [r7, #16]
 8029f9c:	4313      	orrs	r3, r2
 8029f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8029fa0:	683b      	ldr	r3, [r7, #0]
 8029fa2:	699b      	ldr	r3, [r3, #24]
 8029fa4:	009b      	lsls	r3, r3, #2
 8029fa6:	693a      	ldr	r2, [r7, #16]
 8029fa8:	4313      	orrs	r3, r2
 8029faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029fac:	687b      	ldr	r3, [r7, #4]
 8029fae:	693a      	ldr	r2, [r7, #16]
 8029fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029fb2:	687b      	ldr	r3, [r7, #4]
 8029fb4:	68fa      	ldr	r2, [r7, #12]
 8029fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8029fb8:	683b      	ldr	r3, [r7, #0]
 8029fba:	685a      	ldr	r2, [r3, #4]
 8029fbc:	687b      	ldr	r3, [r7, #4]
 8029fbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029fc0:	687b      	ldr	r3, [r7, #4]
 8029fc2:	697a      	ldr	r2, [r7, #20]
 8029fc4:	621a      	str	r2, [r3, #32]
}
 8029fc6:	bf00      	nop
 8029fc8:	371c      	adds	r7, #28
 8029fca:	46bd      	mov	sp, r7
 8029fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fd0:	4770      	bx	lr
 8029fd2:	bf00      	nop
 8029fd4:	40010000 	.word	0x40010000
 8029fd8:	40010400 	.word	0x40010400

08029fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029fdc:	b480      	push	{r7}
 8029fde:	b087      	sub	sp, #28
 8029fe0:	af00      	add	r7, sp, #0
 8029fe2:	6078      	str	r0, [r7, #4]
 8029fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8029fe6:	687b      	ldr	r3, [r7, #4]
 8029fe8:	6a1b      	ldr	r3, [r3, #32]
 8029fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8029fee:	687b      	ldr	r3, [r7, #4]
 8029ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029ff2:	687b      	ldr	r3, [r7, #4]
 8029ff4:	6a1b      	ldr	r3, [r3, #32]
 8029ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029ff8:	687b      	ldr	r3, [r7, #4]
 8029ffa:	685b      	ldr	r3, [r3, #4]
 8029ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8029ffe:	687b      	ldr	r3, [r7, #4]
 802a000:	69db      	ldr	r3, [r3, #28]
 802a002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 802a004:	68fb      	ldr	r3, [r7, #12]
 802a006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a00a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 802a00c:	68fb      	ldr	r3, [r7, #12]
 802a00e:	f023 0303 	bic.w	r3, r3, #3
 802a012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802a014:	683b      	ldr	r3, [r7, #0]
 802a016:	681b      	ldr	r3, [r3, #0]
 802a018:	68fa      	ldr	r2, [r7, #12]
 802a01a:	4313      	orrs	r3, r2
 802a01c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 802a01e:	697b      	ldr	r3, [r7, #20]
 802a020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802a024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 802a026:	683b      	ldr	r3, [r7, #0]
 802a028:	689b      	ldr	r3, [r3, #8]
 802a02a:	021b      	lsls	r3, r3, #8
 802a02c:	697a      	ldr	r2, [r7, #20]
 802a02e:	4313      	orrs	r3, r2
 802a030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802a032:	687b      	ldr	r3, [r7, #4]
 802a034:	4a21      	ldr	r2, [pc, #132]	; (802a0bc <TIM_OC3_SetConfig+0xe0>)
 802a036:	4293      	cmp	r3, r2
 802a038:	d003      	beq.n	802a042 <TIM_OC3_SetConfig+0x66>
 802a03a:	687b      	ldr	r3, [r7, #4]
 802a03c:	4a20      	ldr	r2, [pc, #128]	; (802a0c0 <TIM_OC3_SetConfig+0xe4>)
 802a03e:	4293      	cmp	r3, r2
 802a040:	d10d      	bne.n	802a05e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802a042:	697b      	ldr	r3, [r7, #20]
 802a044:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802a048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 802a04a:	683b      	ldr	r3, [r7, #0]
 802a04c:	68db      	ldr	r3, [r3, #12]
 802a04e:	021b      	lsls	r3, r3, #8
 802a050:	697a      	ldr	r2, [r7, #20]
 802a052:	4313      	orrs	r3, r2
 802a054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802a056:	697b      	ldr	r3, [r7, #20]
 802a058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802a05c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a05e:	687b      	ldr	r3, [r7, #4]
 802a060:	4a16      	ldr	r2, [pc, #88]	; (802a0bc <TIM_OC3_SetConfig+0xe0>)
 802a062:	4293      	cmp	r3, r2
 802a064:	d003      	beq.n	802a06e <TIM_OC3_SetConfig+0x92>
 802a066:	687b      	ldr	r3, [r7, #4]
 802a068:	4a15      	ldr	r2, [pc, #84]	; (802a0c0 <TIM_OC3_SetConfig+0xe4>)
 802a06a:	4293      	cmp	r3, r2
 802a06c:	d113      	bne.n	802a096 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 802a06e:	693b      	ldr	r3, [r7, #16]
 802a070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 802a076:	693b      	ldr	r3, [r7, #16]
 802a078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802a07c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802a07e:	683b      	ldr	r3, [r7, #0]
 802a080:	695b      	ldr	r3, [r3, #20]
 802a082:	011b      	lsls	r3, r3, #4
 802a084:	693a      	ldr	r2, [r7, #16]
 802a086:	4313      	orrs	r3, r2
 802a088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802a08a:	683b      	ldr	r3, [r7, #0]
 802a08c:	699b      	ldr	r3, [r3, #24]
 802a08e:	011b      	lsls	r3, r3, #4
 802a090:	693a      	ldr	r2, [r7, #16]
 802a092:	4313      	orrs	r3, r2
 802a094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a096:	687b      	ldr	r3, [r7, #4]
 802a098:	693a      	ldr	r2, [r7, #16]
 802a09a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802a09c:	687b      	ldr	r3, [r7, #4]
 802a09e:	68fa      	ldr	r2, [r7, #12]
 802a0a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 802a0a2:	683b      	ldr	r3, [r7, #0]
 802a0a4:	685a      	ldr	r2, [r3, #4]
 802a0a6:	687b      	ldr	r3, [r7, #4]
 802a0a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a0aa:	687b      	ldr	r3, [r7, #4]
 802a0ac:	697a      	ldr	r2, [r7, #20]
 802a0ae:	621a      	str	r2, [r3, #32]
}
 802a0b0:	bf00      	nop
 802a0b2:	371c      	adds	r7, #28
 802a0b4:	46bd      	mov	sp, r7
 802a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0ba:	4770      	bx	lr
 802a0bc:	40010000 	.word	0x40010000
 802a0c0:	40010400 	.word	0x40010400

0802a0c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a0c4:	b480      	push	{r7}
 802a0c6:	b087      	sub	sp, #28
 802a0c8:	af00      	add	r7, sp, #0
 802a0ca:	6078      	str	r0, [r7, #4]
 802a0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802a0ce:	687b      	ldr	r3, [r7, #4]
 802a0d0:	6a1b      	ldr	r3, [r3, #32]
 802a0d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a0d6:	687b      	ldr	r3, [r7, #4]
 802a0d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a0da:	687b      	ldr	r3, [r7, #4]
 802a0dc:	6a1b      	ldr	r3, [r3, #32]
 802a0de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a0e0:	687b      	ldr	r3, [r7, #4]
 802a0e2:	685b      	ldr	r3, [r3, #4]
 802a0e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802a0e6:	687b      	ldr	r3, [r7, #4]
 802a0e8:	69db      	ldr	r3, [r3, #28]
 802a0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 802a0ec:	68fb      	ldr	r3, [r7, #12]
 802a0ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802a0f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 802a0f4:	68fb      	ldr	r3, [r7, #12]
 802a0f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a0fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802a0fc:	683b      	ldr	r3, [r7, #0]
 802a0fe:	681b      	ldr	r3, [r3, #0]
 802a100:	021b      	lsls	r3, r3, #8
 802a102:	68fa      	ldr	r2, [r7, #12]
 802a104:	4313      	orrs	r3, r2
 802a106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802a108:	693b      	ldr	r3, [r7, #16]
 802a10a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802a10e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 802a110:	683b      	ldr	r3, [r7, #0]
 802a112:	689b      	ldr	r3, [r3, #8]
 802a114:	031b      	lsls	r3, r3, #12
 802a116:	693a      	ldr	r2, [r7, #16]
 802a118:	4313      	orrs	r3, r2
 802a11a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a11c:	687b      	ldr	r3, [r7, #4]
 802a11e:	4a12      	ldr	r2, [pc, #72]	; (802a168 <TIM_OC4_SetConfig+0xa4>)
 802a120:	4293      	cmp	r3, r2
 802a122:	d003      	beq.n	802a12c <TIM_OC4_SetConfig+0x68>
 802a124:	687b      	ldr	r3, [r7, #4]
 802a126:	4a11      	ldr	r2, [pc, #68]	; (802a16c <TIM_OC4_SetConfig+0xa8>)
 802a128:	4293      	cmp	r3, r2
 802a12a:	d109      	bne.n	802a140 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 802a12c:	697b      	ldr	r3, [r7, #20]
 802a12e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802a132:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 802a134:	683b      	ldr	r3, [r7, #0]
 802a136:	695b      	ldr	r3, [r3, #20]
 802a138:	019b      	lsls	r3, r3, #6
 802a13a:	697a      	ldr	r2, [r7, #20]
 802a13c:	4313      	orrs	r3, r2
 802a13e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a140:	687b      	ldr	r3, [r7, #4]
 802a142:	697a      	ldr	r2, [r7, #20]
 802a144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802a146:	687b      	ldr	r3, [r7, #4]
 802a148:	68fa      	ldr	r2, [r7, #12]
 802a14a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 802a14c:	683b      	ldr	r3, [r7, #0]
 802a14e:	685a      	ldr	r2, [r3, #4]
 802a150:	687b      	ldr	r3, [r7, #4]
 802a152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a154:	687b      	ldr	r3, [r7, #4]
 802a156:	693a      	ldr	r2, [r7, #16]
 802a158:	621a      	str	r2, [r3, #32]
}
 802a15a:	bf00      	nop
 802a15c:	371c      	adds	r7, #28
 802a15e:	46bd      	mov	sp, r7
 802a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a164:	4770      	bx	lr
 802a166:	bf00      	nop
 802a168:	40010000 	.word	0x40010000
 802a16c:	40010400 	.word	0x40010400

0802a170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802a170:	b480      	push	{r7}
 802a172:	b087      	sub	sp, #28
 802a174:	af00      	add	r7, sp, #0
 802a176:	60f8      	str	r0, [r7, #12]
 802a178:	60b9      	str	r1, [r7, #8]
 802a17a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802a17c:	68fb      	ldr	r3, [r7, #12]
 802a17e:	6a1b      	ldr	r3, [r3, #32]
 802a180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802a182:	68fb      	ldr	r3, [r7, #12]
 802a184:	6a1b      	ldr	r3, [r3, #32]
 802a186:	f023 0201 	bic.w	r2, r3, #1
 802a18a:	68fb      	ldr	r3, [r7, #12]
 802a18c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802a18e:	68fb      	ldr	r3, [r7, #12]
 802a190:	699b      	ldr	r3, [r3, #24]
 802a192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802a194:	693b      	ldr	r3, [r7, #16]
 802a196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802a19a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802a19c:	687b      	ldr	r3, [r7, #4]
 802a19e:	011b      	lsls	r3, r3, #4
 802a1a0:	693a      	ldr	r2, [r7, #16]
 802a1a2:	4313      	orrs	r3, r2
 802a1a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802a1a6:	697b      	ldr	r3, [r7, #20]
 802a1a8:	f023 030a 	bic.w	r3, r3, #10
 802a1ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802a1ae:	697a      	ldr	r2, [r7, #20]
 802a1b0:	68bb      	ldr	r3, [r7, #8]
 802a1b2:	4313      	orrs	r3, r2
 802a1b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802a1b6:	68fb      	ldr	r3, [r7, #12]
 802a1b8:	693a      	ldr	r2, [r7, #16]
 802a1ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a1bc:	68fb      	ldr	r3, [r7, #12]
 802a1be:	697a      	ldr	r2, [r7, #20]
 802a1c0:	621a      	str	r2, [r3, #32]
}
 802a1c2:	bf00      	nop
 802a1c4:	371c      	adds	r7, #28
 802a1c6:	46bd      	mov	sp, r7
 802a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1cc:	4770      	bx	lr

0802a1ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802a1ce:	b480      	push	{r7}
 802a1d0:	b087      	sub	sp, #28
 802a1d2:	af00      	add	r7, sp, #0
 802a1d4:	60f8      	str	r0, [r7, #12]
 802a1d6:	60b9      	str	r1, [r7, #8]
 802a1d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802a1da:	68fb      	ldr	r3, [r7, #12]
 802a1dc:	6a1b      	ldr	r3, [r3, #32]
 802a1de:	f023 0210 	bic.w	r2, r3, #16
 802a1e2:	68fb      	ldr	r3, [r7, #12]
 802a1e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802a1e6:	68fb      	ldr	r3, [r7, #12]
 802a1e8:	699b      	ldr	r3, [r3, #24]
 802a1ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802a1ec:	68fb      	ldr	r3, [r7, #12]
 802a1ee:	6a1b      	ldr	r3, [r3, #32]
 802a1f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802a1f2:	697b      	ldr	r3, [r7, #20]
 802a1f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802a1f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802a1fa:	687b      	ldr	r3, [r7, #4]
 802a1fc:	031b      	lsls	r3, r3, #12
 802a1fe:	697a      	ldr	r2, [r7, #20]
 802a200:	4313      	orrs	r3, r2
 802a202:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802a204:	693b      	ldr	r3, [r7, #16]
 802a206:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802a20a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802a20c:	68bb      	ldr	r3, [r7, #8]
 802a20e:	011b      	lsls	r3, r3, #4
 802a210:	693a      	ldr	r2, [r7, #16]
 802a212:	4313      	orrs	r3, r2
 802a214:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802a216:	68fb      	ldr	r3, [r7, #12]
 802a218:	697a      	ldr	r2, [r7, #20]
 802a21a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a21c:	68fb      	ldr	r3, [r7, #12]
 802a21e:	693a      	ldr	r2, [r7, #16]
 802a220:	621a      	str	r2, [r3, #32]
}
 802a222:	bf00      	nop
 802a224:	371c      	adds	r7, #28
 802a226:	46bd      	mov	sp, r7
 802a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a22c:	4770      	bx	lr

0802a22e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802a22e:	b480      	push	{r7}
 802a230:	b085      	sub	sp, #20
 802a232:	af00      	add	r7, sp, #0
 802a234:	6078      	str	r0, [r7, #4]
 802a236:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802a238:	687b      	ldr	r3, [r7, #4]
 802a23a:	689b      	ldr	r3, [r3, #8]
 802a23c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802a23e:	68fb      	ldr	r3, [r7, #12]
 802a240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a244:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802a246:	683a      	ldr	r2, [r7, #0]
 802a248:	68fb      	ldr	r3, [r7, #12]
 802a24a:	4313      	orrs	r3, r2
 802a24c:	f043 0307 	orr.w	r3, r3, #7
 802a250:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a252:	687b      	ldr	r3, [r7, #4]
 802a254:	68fa      	ldr	r2, [r7, #12]
 802a256:	609a      	str	r2, [r3, #8]
}
 802a258:	bf00      	nop
 802a25a:	3714      	adds	r7, #20
 802a25c:	46bd      	mov	sp, r7
 802a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a262:	4770      	bx	lr

0802a264 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802a264:	b480      	push	{r7}
 802a266:	b087      	sub	sp, #28
 802a268:	af00      	add	r7, sp, #0
 802a26a:	60f8      	str	r0, [r7, #12]
 802a26c:	60b9      	str	r1, [r7, #8]
 802a26e:	607a      	str	r2, [r7, #4]
 802a270:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802a272:	68fb      	ldr	r3, [r7, #12]
 802a274:	689b      	ldr	r3, [r3, #8]
 802a276:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802a278:	697b      	ldr	r3, [r7, #20]
 802a27a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802a27e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802a280:	683b      	ldr	r3, [r7, #0]
 802a282:	021a      	lsls	r2, r3, #8
 802a284:	687b      	ldr	r3, [r7, #4]
 802a286:	431a      	orrs	r2, r3
 802a288:	68bb      	ldr	r3, [r7, #8]
 802a28a:	4313      	orrs	r3, r2
 802a28c:	697a      	ldr	r2, [r7, #20]
 802a28e:	4313      	orrs	r3, r2
 802a290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a292:	68fb      	ldr	r3, [r7, #12]
 802a294:	697a      	ldr	r2, [r7, #20]
 802a296:	609a      	str	r2, [r3, #8]
}
 802a298:	bf00      	nop
 802a29a:	371c      	adds	r7, #28
 802a29c:	46bd      	mov	sp, r7
 802a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2a2:	4770      	bx	lr

0802a2a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 802a2a4:	b480      	push	{r7}
 802a2a6:	b087      	sub	sp, #28
 802a2a8:	af00      	add	r7, sp, #0
 802a2aa:	60f8      	str	r0, [r7, #12]
 802a2ac:	60b9      	str	r1, [r7, #8]
 802a2ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 802a2b0:	68bb      	ldr	r3, [r7, #8]
 802a2b2:	f003 031f 	and.w	r3, r3, #31
 802a2b6:	2201      	movs	r2, #1
 802a2b8:	fa02 f303 	lsl.w	r3, r2, r3
 802a2bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802a2be:	68fb      	ldr	r3, [r7, #12]
 802a2c0:	6a1a      	ldr	r2, [r3, #32]
 802a2c2:	697b      	ldr	r3, [r7, #20]
 802a2c4:	43db      	mvns	r3, r3
 802a2c6:	401a      	ands	r2, r3
 802a2c8:	68fb      	ldr	r3, [r7, #12]
 802a2ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802a2cc:	68fb      	ldr	r3, [r7, #12]
 802a2ce:	6a1a      	ldr	r2, [r3, #32]
 802a2d0:	68bb      	ldr	r3, [r7, #8]
 802a2d2:	f003 031f 	and.w	r3, r3, #31
 802a2d6:	6879      	ldr	r1, [r7, #4]
 802a2d8:	fa01 f303 	lsl.w	r3, r1, r3
 802a2dc:	431a      	orrs	r2, r3
 802a2de:	68fb      	ldr	r3, [r7, #12]
 802a2e0:	621a      	str	r2, [r3, #32]
}
 802a2e2:	bf00      	nop
 802a2e4:	371c      	adds	r7, #28
 802a2e6:	46bd      	mov	sp, r7
 802a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2ec:	4770      	bx	lr
	...

0802a2f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802a2f0:	b480      	push	{r7}
 802a2f2:	b085      	sub	sp, #20
 802a2f4:	af00      	add	r7, sp, #0
 802a2f6:	6078      	str	r0, [r7, #4]
 802a2f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802a2fa:	687b      	ldr	r3, [r7, #4]
 802a2fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a300:	2b01      	cmp	r3, #1
 802a302:	d101      	bne.n	802a308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802a304:	2302      	movs	r3, #2
 802a306:	e05a      	b.n	802a3be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802a308:	687b      	ldr	r3, [r7, #4]
 802a30a:	2201      	movs	r2, #1
 802a30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802a310:	687b      	ldr	r3, [r7, #4]
 802a312:	2202      	movs	r2, #2
 802a314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802a318:	687b      	ldr	r3, [r7, #4]
 802a31a:	681b      	ldr	r3, [r3, #0]
 802a31c:	685b      	ldr	r3, [r3, #4]
 802a31e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802a320:	687b      	ldr	r3, [r7, #4]
 802a322:	681b      	ldr	r3, [r3, #0]
 802a324:	689b      	ldr	r3, [r3, #8]
 802a326:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802a328:	68fb      	ldr	r3, [r7, #12]
 802a32a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a32e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802a330:	683b      	ldr	r3, [r7, #0]
 802a332:	681b      	ldr	r3, [r3, #0]
 802a334:	68fa      	ldr	r2, [r7, #12]
 802a336:	4313      	orrs	r3, r2
 802a338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802a33a:	687b      	ldr	r3, [r7, #4]
 802a33c:	681b      	ldr	r3, [r3, #0]
 802a33e:	68fa      	ldr	r2, [r7, #12]
 802a340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802a342:	687b      	ldr	r3, [r7, #4]
 802a344:	681b      	ldr	r3, [r3, #0]
 802a346:	4a21      	ldr	r2, [pc, #132]	; (802a3cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 802a348:	4293      	cmp	r3, r2
 802a34a:	d022      	beq.n	802a392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a34c:	687b      	ldr	r3, [r7, #4]
 802a34e:	681b      	ldr	r3, [r3, #0]
 802a350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a354:	d01d      	beq.n	802a392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a356:	687b      	ldr	r3, [r7, #4]
 802a358:	681b      	ldr	r3, [r3, #0]
 802a35a:	4a1d      	ldr	r2, [pc, #116]	; (802a3d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802a35c:	4293      	cmp	r3, r2
 802a35e:	d018      	beq.n	802a392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a360:	687b      	ldr	r3, [r7, #4]
 802a362:	681b      	ldr	r3, [r3, #0]
 802a364:	4a1b      	ldr	r2, [pc, #108]	; (802a3d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802a366:	4293      	cmp	r3, r2
 802a368:	d013      	beq.n	802a392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a36a:	687b      	ldr	r3, [r7, #4]
 802a36c:	681b      	ldr	r3, [r3, #0]
 802a36e:	4a1a      	ldr	r2, [pc, #104]	; (802a3d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 802a370:	4293      	cmp	r3, r2
 802a372:	d00e      	beq.n	802a392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a374:	687b      	ldr	r3, [r7, #4]
 802a376:	681b      	ldr	r3, [r3, #0]
 802a378:	4a18      	ldr	r2, [pc, #96]	; (802a3dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802a37a:	4293      	cmp	r3, r2
 802a37c:	d009      	beq.n	802a392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a37e:	687b      	ldr	r3, [r7, #4]
 802a380:	681b      	ldr	r3, [r3, #0]
 802a382:	4a17      	ldr	r2, [pc, #92]	; (802a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802a384:	4293      	cmp	r3, r2
 802a386:	d004      	beq.n	802a392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a388:	687b      	ldr	r3, [r7, #4]
 802a38a:	681b      	ldr	r3, [r3, #0]
 802a38c:	4a15      	ldr	r2, [pc, #84]	; (802a3e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802a38e:	4293      	cmp	r3, r2
 802a390:	d10c      	bne.n	802a3ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802a392:	68bb      	ldr	r3, [r7, #8]
 802a394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802a398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802a39a:	683b      	ldr	r3, [r7, #0]
 802a39c:	685b      	ldr	r3, [r3, #4]
 802a39e:	68ba      	ldr	r2, [r7, #8]
 802a3a0:	4313      	orrs	r3, r2
 802a3a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802a3a4:	687b      	ldr	r3, [r7, #4]
 802a3a6:	681b      	ldr	r3, [r3, #0]
 802a3a8:	68ba      	ldr	r2, [r7, #8]
 802a3aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802a3ac:	687b      	ldr	r3, [r7, #4]
 802a3ae:	2201      	movs	r2, #1
 802a3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a3b4:	687b      	ldr	r3, [r7, #4]
 802a3b6:	2200      	movs	r2, #0
 802a3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a3bc:	2300      	movs	r3, #0
}
 802a3be:	4618      	mov	r0, r3
 802a3c0:	3714      	adds	r7, #20
 802a3c2:	46bd      	mov	sp, r7
 802a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3c8:	4770      	bx	lr
 802a3ca:	bf00      	nop
 802a3cc:	40010000 	.word	0x40010000
 802a3d0:	40000400 	.word	0x40000400
 802a3d4:	40000800 	.word	0x40000800
 802a3d8:	40000c00 	.word	0x40000c00
 802a3dc:	40010400 	.word	0x40010400
 802a3e0:	40014000 	.word	0x40014000
 802a3e4:	40001800 	.word	0x40001800

0802a3e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 802a3e8:	b480      	push	{r7}
 802a3ea:	b085      	sub	sp, #20
 802a3ec:	af00      	add	r7, sp, #0
 802a3ee:	6078      	str	r0, [r7, #4]
 802a3f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802a3f2:	2300      	movs	r3, #0
 802a3f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 802a3f6:	687b      	ldr	r3, [r7, #4]
 802a3f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a3fc:	2b01      	cmp	r3, #1
 802a3fe:	d101      	bne.n	802a404 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 802a400:	2302      	movs	r3, #2
 802a402:	e03d      	b.n	802a480 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 802a404:	687b      	ldr	r3, [r7, #4]
 802a406:	2201      	movs	r2, #1
 802a408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 802a40c:	68fb      	ldr	r3, [r7, #12]
 802a40e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802a412:	683b      	ldr	r3, [r7, #0]
 802a414:	68db      	ldr	r3, [r3, #12]
 802a416:	4313      	orrs	r3, r2
 802a418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 802a41a:	68fb      	ldr	r3, [r7, #12]
 802a41c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 802a420:	683b      	ldr	r3, [r7, #0]
 802a422:	689b      	ldr	r3, [r3, #8]
 802a424:	4313      	orrs	r3, r2
 802a426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 802a428:	68fb      	ldr	r3, [r7, #12]
 802a42a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 802a42e:	683b      	ldr	r3, [r7, #0]
 802a430:	685b      	ldr	r3, [r3, #4]
 802a432:	4313      	orrs	r3, r2
 802a434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 802a436:	68fb      	ldr	r3, [r7, #12]
 802a438:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 802a43c:	683b      	ldr	r3, [r7, #0]
 802a43e:	681b      	ldr	r3, [r3, #0]
 802a440:	4313      	orrs	r3, r2
 802a442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 802a444:	68fb      	ldr	r3, [r7, #12]
 802a446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a44a:	683b      	ldr	r3, [r7, #0]
 802a44c:	691b      	ldr	r3, [r3, #16]
 802a44e:	4313      	orrs	r3, r2
 802a450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 802a452:	68fb      	ldr	r3, [r7, #12]
 802a454:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 802a458:	683b      	ldr	r3, [r7, #0]
 802a45a:	695b      	ldr	r3, [r3, #20]
 802a45c:	4313      	orrs	r3, r2
 802a45e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 802a460:	68fb      	ldr	r3, [r7, #12]
 802a462:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 802a466:	683b      	ldr	r3, [r7, #0]
 802a468:	69db      	ldr	r3, [r3, #28]
 802a46a:	4313      	orrs	r3, r2
 802a46c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 802a46e:	687b      	ldr	r3, [r7, #4]
 802a470:	681b      	ldr	r3, [r3, #0]
 802a472:	68fa      	ldr	r2, [r7, #12]
 802a474:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 802a476:	687b      	ldr	r3, [r7, #4]
 802a478:	2200      	movs	r2, #0
 802a47a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a47e:	2300      	movs	r3, #0
}
 802a480:	4618      	mov	r0, r3
 802a482:	3714      	adds	r7, #20
 802a484:	46bd      	mov	sp, r7
 802a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a48a:	4770      	bx	lr

0802a48c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802a48c:	b480      	push	{r7}
 802a48e:	b083      	sub	sp, #12
 802a490:	af00      	add	r7, sp, #0
 802a492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802a494:	bf00      	nop
 802a496:	370c      	adds	r7, #12
 802a498:	46bd      	mov	sp, r7
 802a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a49e:	4770      	bx	lr

0802a4a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802a4a0:	b480      	push	{r7}
 802a4a2:	b083      	sub	sp, #12
 802a4a4:	af00      	add	r7, sp, #0
 802a4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802a4a8:	bf00      	nop
 802a4aa:	370c      	adds	r7, #12
 802a4ac:	46bd      	mov	sp, r7
 802a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4b2:	4770      	bx	lr

0802a4b4 <__cxa_guard_acquire>:
 802a4b4:	6803      	ldr	r3, [r0, #0]
 802a4b6:	07db      	lsls	r3, r3, #31
 802a4b8:	d406      	bmi.n	802a4c8 <__cxa_guard_acquire+0x14>
 802a4ba:	7843      	ldrb	r3, [r0, #1]
 802a4bc:	b103      	cbz	r3, 802a4c0 <__cxa_guard_acquire+0xc>
 802a4be:	deff      	udf	#255	; 0xff
 802a4c0:	2301      	movs	r3, #1
 802a4c2:	7043      	strb	r3, [r0, #1]
 802a4c4:	4618      	mov	r0, r3
 802a4c6:	4770      	bx	lr
 802a4c8:	2000      	movs	r0, #0
 802a4ca:	4770      	bx	lr

0802a4cc <__cxa_guard_release>:
 802a4cc:	2301      	movs	r3, #1
 802a4ce:	6003      	str	r3, [r0, #0]
 802a4d0:	4770      	bx	lr
	...

0802a4d4 <__errno>:
 802a4d4:	4b01      	ldr	r3, [pc, #4]	; (802a4dc <__errno+0x8>)
 802a4d6:	6818      	ldr	r0, [r3, #0]
 802a4d8:	4770      	bx	lr
 802a4da:	bf00      	nop
 802a4dc:	20000010 	.word	0x20000010

0802a4e0 <__libc_init_array>:
 802a4e0:	b570      	push	{r4, r5, r6, lr}
 802a4e2:	4e0d      	ldr	r6, [pc, #52]	; (802a518 <__libc_init_array+0x38>)
 802a4e4:	4c0d      	ldr	r4, [pc, #52]	; (802a51c <__libc_init_array+0x3c>)
 802a4e6:	1ba4      	subs	r4, r4, r6
 802a4e8:	10a4      	asrs	r4, r4, #2
 802a4ea:	2500      	movs	r5, #0
 802a4ec:	42a5      	cmp	r5, r4
 802a4ee:	d109      	bne.n	802a504 <__libc_init_array+0x24>
 802a4f0:	4e0b      	ldr	r6, [pc, #44]	; (802a520 <__libc_init_array+0x40>)
 802a4f2:	4c0c      	ldr	r4, [pc, #48]	; (802a524 <__libc_init_array+0x44>)
 802a4f4:	f002 fbac 	bl	802cc50 <_init>
 802a4f8:	1ba4      	subs	r4, r4, r6
 802a4fa:	10a4      	asrs	r4, r4, #2
 802a4fc:	2500      	movs	r5, #0
 802a4fe:	42a5      	cmp	r5, r4
 802a500:	d105      	bne.n	802a50e <__libc_init_array+0x2e>
 802a502:	bd70      	pop	{r4, r5, r6, pc}
 802a504:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a508:	4798      	blx	r3
 802a50a:	3501      	adds	r5, #1
 802a50c:	e7ee      	b.n	802a4ec <__libc_init_array+0xc>
 802a50e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a512:	4798      	blx	r3
 802a514:	3501      	adds	r5, #1
 802a516:	e7f2      	b.n	802a4fe <__libc_init_array+0x1e>
 802a518:	0802d060 	.word	0x0802d060
 802a51c:	0802d060 	.word	0x0802d060
 802a520:	0802d060 	.word	0x0802d060
 802a524:	0802d068 	.word	0x0802d068

0802a528 <memcpy>:
 802a528:	b510      	push	{r4, lr}
 802a52a:	1e43      	subs	r3, r0, #1
 802a52c:	440a      	add	r2, r1
 802a52e:	4291      	cmp	r1, r2
 802a530:	d100      	bne.n	802a534 <memcpy+0xc>
 802a532:	bd10      	pop	{r4, pc}
 802a534:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a538:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a53c:	e7f7      	b.n	802a52e <memcpy+0x6>

0802a53e <memset>:
 802a53e:	4402      	add	r2, r0
 802a540:	4603      	mov	r3, r0
 802a542:	4293      	cmp	r3, r2
 802a544:	d100      	bne.n	802a548 <memset+0xa>
 802a546:	4770      	bx	lr
 802a548:	f803 1b01 	strb.w	r1, [r3], #1
 802a54c:	e7f9      	b.n	802a542 <memset+0x4>

0802a54e <__cvt>:
 802a54e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802a552:	ec55 4b10 	vmov	r4, r5, d0
 802a556:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802a558:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802a55c:	2d00      	cmp	r5, #0
 802a55e:	460e      	mov	r6, r1
 802a560:	4691      	mov	r9, r2
 802a562:	4619      	mov	r1, r3
 802a564:	bfb8      	it	lt
 802a566:	4622      	movlt	r2, r4
 802a568:	462b      	mov	r3, r5
 802a56a:	f027 0720 	bic.w	r7, r7, #32
 802a56e:	bfbb      	ittet	lt
 802a570:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802a574:	461d      	movlt	r5, r3
 802a576:	2300      	movge	r3, #0
 802a578:	232d      	movlt	r3, #45	; 0x2d
 802a57a:	bfb8      	it	lt
 802a57c:	4614      	movlt	r4, r2
 802a57e:	2f46      	cmp	r7, #70	; 0x46
 802a580:	700b      	strb	r3, [r1, #0]
 802a582:	d004      	beq.n	802a58e <__cvt+0x40>
 802a584:	2f45      	cmp	r7, #69	; 0x45
 802a586:	d100      	bne.n	802a58a <__cvt+0x3c>
 802a588:	3601      	adds	r6, #1
 802a58a:	2102      	movs	r1, #2
 802a58c:	e000      	b.n	802a590 <__cvt+0x42>
 802a58e:	2103      	movs	r1, #3
 802a590:	ab03      	add	r3, sp, #12
 802a592:	9301      	str	r3, [sp, #4]
 802a594:	ab02      	add	r3, sp, #8
 802a596:	9300      	str	r3, [sp, #0]
 802a598:	4632      	mov	r2, r6
 802a59a:	4653      	mov	r3, sl
 802a59c:	ec45 4b10 	vmov	d0, r4, r5
 802a5a0:	f000 fdfa 	bl	802b198 <_dtoa_r>
 802a5a4:	2f47      	cmp	r7, #71	; 0x47
 802a5a6:	4680      	mov	r8, r0
 802a5a8:	d102      	bne.n	802a5b0 <__cvt+0x62>
 802a5aa:	f019 0f01 	tst.w	r9, #1
 802a5ae:	d026      	beq.n	802a5fe <__cvt+0xb0>
 802a5b0:	2f46      	cmp	r7, #70	; 0x46
 802a5b2:	eb08 0906 	add.w	r9, r8, r6
 802a5b6:	d111      	bne.n	802a5dc <__cvt+0x8e>
 802a5b8:	f898 3000 	ldrb.w	r3, [r8]
 802a5bc:	2b30      	cmp	r3, #48	; 0x30
 802a5be:	d10a      	bne.n	802a5d6 <__cvt+0x88>
 802a5c0:	2200      	movs	r2, #0
 802a5c2:	2300      	movs	r3, #0
 802a5c4:	4620      	mov	r0, r4
 802a5c6:	4629      	mov	r1, r5
 802a5c8:	f7f6 f9b6 	bl	8020938 <__aeabi_dcmpeq>
 802a5cc:	b918      	cbnz	r0, 802a5d6 <__cvt+0x88>
 802a5ce:	f1c6 0601 	rsb	r6, r6, #1
 802a5d2:	f8ca 6000 	str.w	r6, [sl]
 802a5d6:	f8da 3000 	ldr.w	r3, [sl]
 802a5da:	4499      	add	r9, r3
 802a5dc:	2200      	movs	r2, #0
 802a5de:	2300      	movs	r3, #0
 802a5e0:	4620      	mov	r0, r4
 802a5e2:	4629      	mov	r1, r5
 802a5e4:	f7f6 f9a8 	bl	8020938 <__aeabi_dcmpeq>
 802a5e8:	b938      	cbnz	r0, 802a5fa <__cvt+0xac>
 802a5ea:	2230      	movs	r2, #48	; 0x30
 802a5ec:	9b03      	ldr	r3, [sp, #12]
 802a5ee:	454b      	cmp	r3, r9
 802a5f0:	d205      	bcs.n	802a5fe <__cvt+0xb0>
 802a5f2:	1c59      	adds	r1, r3, #1
 802a5f4:	9103      	str	r1, [sp, #12]
 802a5f6:	701a      	strb	r2, [r3, #0]
 802a5f8:	e7f8      	b.n	802a5ec <__cvt+0x9e>
 802a5fa:	f8cd 900c 	str.w	r9, [sp, #12]
 802a5fe:	9b03      	ldr	r3, [sp, #12]
 802a600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802a602:	eba3 0308 	sub.w	r3, r3, r8
 802a606:	4640      	mov	r0, r8
 802a608:	6013      	str	r3, [r2, #0]
 802a60a:	b004      	add	sp, #16
 802a60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802a610 <__exponent>:
 802a610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a612:	2900      	cmp	r1, #0
 802a614:	4604      	mov	r4, r0
 802a616:	bfba      	itte	lt
 802a618:	4249      	neglt	r1, r1
 802a61a:	232d      	movlt	r3, #45	; 0x2d
 802a61c:	232b      	movge	r3, #43	; 0x2b
 802a61e:	2909      	cmp	r1, #9
 802a620:	f804 2b02 	strb.w	r2, [r4], #2
 802a624:	7043      	strb	r3, [r0, #1]
 802a626:	dd20      	ble.n	802a66a <__exponent+0x5a>
 802a628:	f10d 0307 	add.w	r3, sp, #7
 802a62c:	461f      	mov	r7, r3
 802a62e:	260a      	movs	r6, #10
 802a630:	fb91 f5f6 	sdiv	r5, r1, r6
 802a634:	fb06 1115 	mls	r1, r6, r5, r1
 802a638:	3130      	adds	r1, #48	; 0x30
 802a63a:	2d09      	cmp	r5, #9
 802a63c:	f803 1c01 	strb.w	r1, [r3, #-1]
 802a640:	f103 32ff 	add.w	r2, r3, #4294967295
 802a644:	4629      	mov	r1, r5
 802a646:	dc09      	bgt.n	802a65c <__exponent+0x4c>
 802a648:	3130      	adds	r1, #48	; 0x30
 802a64a:	3b02      	subs	r3, #2
 802a64c:	f802 1c01 	strb.w	r1, [r2, #-1]
 802a650:	42bb      	cmp	r3, r7
 802a652:	4622      	mov	r2, r4
 802a654:	d304      	bcc.n	802a660 <__exponent+0x50>
 802a656:	1a10      	subs	r0, r2, r0
 802a658:	b003      	add	sp, #12
 802a65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a65c:	4613      	mov	r3, r2
 802a65e:	e7e7      	b.n	802a630 <__exponent+0x20>
 802a660:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a664:	f804 2b01 	strb.w	r2, [r4], #1
 802a668:	e7f2      	b.n	802a650 <__exponent+0x40>
 802a66a:	2330      	movs	r3, #48	; 0x30
 802a66c:	4419      	add	r1, r3
 802a66e:	7083      	strb	r3, [r0, #2]
 802a670:	1d02      	adds	r2, r0, #4
 802a672:	70c1      	strb	r1, [r0, #3]
 802a674:	e7ef      	b.n	802a656 <__exponent+0x46>
	...

0802a678 <_printf_float>:
 802a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a67c:	b08d      	sub	sp, #52	; 0x34
 802a67e:	460c      	mov	r4, r1
 802a680:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 802a684:	4616      	mov	r6, r2
 802a686:	461f      	mov	r7, r3
 802a688:	4605      	mov	r5, r0
 802a68a:	f001 fcb7 	bl	802bffc <_localeconv_r>
 802a68e:	6803      	ldr	r3, [r0, #0]
 802a690:	9304      	str	r3, [sp, #16]
 802a692:	4618      	mov	r0, r3
 802a694:	f7f5 fcd4 	bl	8020040 <strlen>
 802a698:	2300      	movs	r3, #0
 802a69a:	930a      	str	r3, [sp, #40]	; 0x28
 802a69c:	f8d8 3000 	ldr.w	r3, [r8]
 802a6a0:	9005      	str	r0, [sp, #20]
 802a6a2:	3307      	adds	r3, #7
 802a6a4:	f023 0307 	bic.w	r3, r3, #7
 802a6a8:	f103 0208 	add.w	r2, r3, #8
 802a6ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 802a6b0:	f8d4 b000 	ldr.w	fp, [r4]
 802a6b4:	f8c8 2000 	str.w	r2, [r8]
 802a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a6bc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 802a6c0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 802a6c4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802a6c8:	9307      	str	r3, [sp, #28]
 802a6ca:	f8cd 8018 	str.w	r8, [sp, #24]
 802a6ce:	f04f 32ff 	mov.w	r2, #4294967295
 802a6d2:	4ba7      	ldr	r3, [pc, #668]	; (802a970 <_printf_float+0x2f8>)
 802a6d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802a6d8:	f7f6 f960 	bl	802099c <__aeabi_dcmpun>
 802a6dc:	bb70      	cbnz	r0, 802a73c <_printf_float+0xc4>
 802a6de:	f04f 32ff 	mov.w	r2, #4294967295
 802a6e2:	4ba3      	ldr	r3, [pc, #652]	; (802a970 <_printf_float+0x2f8>)
 802a6e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802a6e8:	f7f6 f93a 	bl	8020960 <__aeabi_dcmple>
 802a6ec:	bb30      	cbnz	r0, 802a73c <_printf_float+0xc4>
 802a6ee:	2200      	movs	r2, #0
 802a6f0:	2300      	movs	r3, #0
 802a6f2:	4640      	mov	r0, r8
 802a6f4:	4649      	mov	r1, r9
 802a6f6:	f7f6 f929 	bl	802094c <__aeabi_dcmplt>
 802a6fa:	b110      	cbz	r0, 802a702 <_printf_float+0x8a>
 802a6fc:	232d      	movs	r3, #45	; 0x2d
 802a6fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a702:	4a9c      	ldr	r2, [pc, #624]	; (802a974 <_printf_float+0x2fc>)
 802a704:	4b9c      	ldr	r3, [pc, #624]	; (802a978 <_printf_float+0x300>)
 802a706:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 802a70a:	bf8c      	ite	hi
 802a70c:	4690      	movhi	r8, r2
 802a70e:	4698      	movls	r8, r3
 802a710:	2303      	movs	r3, #3
 802a712:	f02b 0204 	bic.w	r2, fp, #4
 802a716:	6123      	str	r3, [r4, #16]
 802a718:	6022      	str	r2, [r4, #0]
 802a71a:	f04f 0900 	mov.w	r9, #0
 802a71e:	9700      	str	r7, [sp, #0]
 802a720:	4633      	mov	r3, r6
 802a722:	aa0b      	add	r2, sp, #44	; 0x2c
 802a724:	4621      	mov	r1, r4
 802a726:	4628      	mov	r0, r5
 802a728:	f000 f9e6 	bl	802aaf8 <_printf_common>
 802a72c:	3001      	adds	r0, #1
 802a72e:	f040 808d 	bne.w	802a84c <_printf_float+0x1d4>
 802a732:	f04f 30ff 	mov.w	r0, #4294967295
 802a736:	b00d      	add	sp, #52	; 0x34
 802a738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a73c:	4642      	mov	r2, r8
 802a73e:	464b      	mov	r3, r9
 802a740:	4640      	mov	r0, r8
 802a742:	4649      	mov	r1, r9
 802a744:	f7f6 f92a 	bl	802099c <__aeabi_dcmpun>
 802a748:	b110      	cbz	r0, 802a750 <_printf_float+0xd8>
 802a74a:	4a8c      	ldr	r2, [pc, #560]	; (802a97c <_printf_float+0x304>)
 802a74c:	4b8c      	ldr	r3, [pc, #560]	; (802a980 <_printf_float+0x308>)
 802a74e:	e7da      	b.n	802a706 <_printf_float+0x8e>
 802a750:	6861      	ldr	r1, [r4, #4]
 802a752:	1c4b      	adds	r3, r1, #1
 802a754:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 802a758:	a80a      	add	r0, sp, #40	; 0x28
 802a75a:	d13e      	bne.n	802a7da <_printf_float+0x162>
 802a75c:	2306      	movs	r3, #6
 802a75e:	6063      	str	r3, [r4, #4]
 802a760:	2300      	movs	r3, #0
 802a762:	e9cd 0302 	strd	r0, r3, [sp, #8]
 802a766:	ab09      	add	r3, sp, #36	; 0x24
 802a768:	9300      	str	r3, [sp, #0]
 802a76a:	ec49 8b10 	vmov	d0, r8, r9
 802a76e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802a772:	6022      	str	r2, [r4, #0]
 802a774:	f8cd a004 	str.w	sl, [sp, #4]
 802a778:	6861      	ldr	r1, [r4, #4]
 802a77a:	4628      	mov	r0, r5
 802a77c:	f7ff fee7 	bl	802a54e <__cvt>
 802a780:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 802a784:	2b47      	cmp	r3, #71	; 0x47
 802a786:	4680      	mov	r8, r0
 802a788:	d109      	bne.n	802a79e <_printf_float+0x126>
 802a78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a78c:	1cd8      	adds	r0, r3, #3
 802a78e:	db02      	blt.n	802a796 <_printf_float+0x11e>
 802a790:	6862      	ldr	r2, [r4, #4]
 802a792:	4293      	cmp	r3, r2
 802a794:	dd47      	ble.n	802a826 <_printf_float+0x1ae>
 802a796:	f1aa 0a02 	sub.w	sl, sl, #2
 802a79a:	fa5f fa8a 	uxtb.w	sl, sl
 802a79e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 802a7a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a7a4:	d824      	bhi.n	802a7f0 <_printf_float+0x178>
 802a7a6:	3901      	subs	r1, #1
 802a7a8:	4652      	mov	r2, sl
 802a7aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802a7ae:	9109      	str	r1, [sp, #36]	; 0x24
 802a7b0:	f7ff ff2e 	bl	802a610 <__exponent>
 802a7b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a7b6:	1813      	adds	r3, r2, r0
 802a7b8:	2a01      	cmp	r2, #1
 802a7ba:	4681      	mov	r9, r0
 802a7bc:	6123      	str	r3, [r4, #16]
 802a7be:	dc02      	bgt.n	802a7c6 <_printf_float+0x14e>
 802a7c0:	6822      	ldr	r2, [r4, #0]
 802a7c2:	07d1      	lsls	r1, r2, #31
 802a7c4:	d501      	bpl.n	802a7ca <_printf_float+0x152>
 802a7c6:	3301      	adds	r3, #1
 802a7c8:	6123      	str	r3, [r4, #16]
 802a7ca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802a7ce:	2b00      	cmp	r3, #0
 802a7d0:	d0a5      	beq.n	802a71e <_printf_float+0xa6>
 802a7d2:	232d      	movs	r3, #45	; 0x2d
 802a7d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a7d8:	e7a1      	b.n	802a71e <_printf_float+0xa6>
 802a7da:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 802a7de:	f000 8177 	beq.w	802aad0 <_printf_float+0x458>
 802a7e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 802a7e6:	d1bb      	bne.n	802a760 <_printf_float+0xe8>
 802a7e8:	2900      	cmp	r1, #0
 802a7ea:	d1b9      	bne.n	802a760 <_printf_float+0xe8>
 802a7ec:	2301      	movs	r3, #1
 802a7ee:	e7b6      	b.n	802a75e <_printf_float+0xe6>
 802a7f0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 802a7f4:	d119      	bne.n	802a82a <_printf_float+0x1b2>
 802a7f6:	2900      	cmp	r1, #0
 802a7f8:	6863      	ldr	r3, [r4, #4]
 802a7fa:	dd0c      	ble.n	802a816 <_printf_float+0x19e>
 802a7fc:	6121      	str	r1, [r4, #16]
 802a7fe:	b913      	cbnz	r3, 802a806 <_printf_float+0x18e>
 802a800:	6822      	ldr	r2, [r4, #0]
 802a802:	07d2      	lsls	r2, r2, #31
 802a804:	d502      	bpl.n	802a80c <_printf_float+0x194>
 802a806:	3301      	adds	r3, #1
 802a808:	440b      	add	r3, r1
 802a80a:	6123      	str	r3, [r4, #16]
 802a80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a80e:	65a3      	str	r3, [r4, #88]	; 0x58
 802a810:	f04f 0900 	mov.w	r9, #0
 802a814:	e7d9      	b.n	802a7ca <_printf_float+0x152>
 802a816:	b913      	cbnz	r3, 802a81e <_printf_float+0x1a6>
 802a818:	6822      	ldr	r2, [r4, #0]
 802a81a:	07d0      	lsls	r0, r2, #31
 802a81c:	d501      	bpl.n	802a822 <_printf_float+0x1aa>
 802a81e:	3302      	adds	r3, #2
 802a820:	e7f3      	b.n	802a80a <_printf_float+0x192>
 802a822:	2301      	movs	r3, #1
 802a824:	e7f1      	b.n	802a80a <_printf_float+0x192>
 802a826:	f04f 0a67 	mov.w	sl, #103	; 0x67
 802a82a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802a82e:	4293      	cmp	r3, r2
 802a830:	db05      	blt.n	802a83e <_printf_float+0x1c6>
 802a832:	6822      	ldr	r2, [r4, #0]
 802a834:	6123      	str	r3, [r4, #16]
 802a836:	07d1      	lsls	r1, r2, #31
 802a838:	d5e8      	bpl.n	802a80c <_printf_float+0x194>
 802a83a:	3301      	adds	r3, #1
 802a83c:	e7e5      	b.n	802a80a <_printf_float+0x192>
 802a83e:	2b00      	cmp	r3, #0
 802a840:	bfd4      	ite	le
 802a842:	f1c3 0302 	rsble	r3, r3, #2
 802a846:	2301      	movgt	r3, #1
 802a848:	4413      	add	r3, r2
 802a84a:	e7de      	b.n	802a80a <_printf_float+0x192>
 802a84c:	6823      	ldr	r3, [r4, #0]
 802a84e:	055a      	lsls	r2, r3, #21
 802a850:	d407      	bmi.n	802a862 <_printf_float+0x1ea>
 802a852:	6923      	ldr	r3, [r4, #16]
 802a854:	4642      	mov	r2, r8
 802a856:	4631      	mov	r1, r6
 802a858:	4628      	mov	r0, r5
 802a85a:	47b8      	blx	r7
 802a85c:	3001      	adds	r0, #1
 802a85e:	d12b      	bne.n	802a8b8 <_printf_float+0x240>
 802a860:	e767      	b.n	802a732 <_printf_float+0xba>
 802a862:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 802a866:	f240 80dc 	bls.w	802aa22 <_printf_float+0x3aa>
 802a86a:	2200      	movs	r2, #0
 802a86c:	2300      	movs	r3, #0
 802a86e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802a872:	f7f6 f861 	bl	8020938 <__aeabi_dcmpeq>
 802a876:	2800      	cmp	r0, #0
 802a878:	d033      	beq.n	802a8e2 <_printf_float+0x26a>
 802a87a:	2301      	movs	r3, #1
 802a87c:	4a41      	ldr	r2, [pc, #260]	; (802a984 <_printf_float+0x30c>)
 802a87e:	4631      	mov	r1, r6
 802a880:	4628      	mov	r0, r5
 802a882:	47b8      	blx	r7
 802a884:	3001      	adds	r0, #1
 802a886:	f43f af54 	beq.w	802a732 <_printf_float+0xba>
 802a88a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802a88e:	429a      	cmp	r2, r3
 802a890:	db02      	blt.n	802a898 <_printf_float+0x220>
 802a892:	6823      	ldr	r3, [r4, #0]
 802a894:	07d8      	lsls	r0, r3, #31
 802a896:	d50f      	bpl.n	802a8b8 <_printf_float+0x240>
 802a898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a89c:	4631      	mov	r1, r6
 802a89e:	4628      	mov	r0, r5
 802a8a0:	47b8      	blx	r7
 802a8a2:	3001      	adds	r0, #1
 802a8a4:	f43f af45 	beq.w	802a732 <_printf_float+0xba>
 802a8a8:	f04f 0800 	mov.w	r8, #0
 802a8ac:	f104 091a 	add.w	r9, r4, #26
 802a8b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a8b2:	3b01      	subs	r3, #1
 802a8b4:	4543      	cmp	r3, r8
 802a8b6:	dc09      	bgt.n	802a8cc <_printf_float+0x254>
 802a8b8:	6823      	ldr	r3, [r4, #0]
 802a8ba:	079b      	lsls	r3, r3, #30
 802a8bc:	f100 8103 	bmi.w	802aac6 <_printf_float+0x44e>
 802a8c0:	68e0      	ldr	r0, [r4, #12]
 802a8c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a8c4:	4298      	cmp	r0, r3
 802a8c6:	bfb8      	it	lt
 802a8c8:	4618      	movlt	r0, r3
 802a8ca:	e734      	b.n	802a736 <_printf_float+0xbe>
 802a8cc:	2301      	movs	r3, #1
 802a8ce:	464a      	mov	r2, r9
 802a8d0:	4631      	mov	r1, r6
 802a8d2:	4628      	mov	r0, r5
 802a8d4:	47b8      	blx	r7
 802a8d6:	3001      	adds	r0, #1
 802a8d8:	f43f af2b 	beq.w	802a732 <_printf_float+0xba>
 802a8dc:	f108 0801 	add.w	r8, r8, #1
 802a8e0:	e7e6      	b.n	802a8b0 <_printf_float+0x238>
 802a8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a8e4:	2b00      	cmp	r3, #0
 802a8e6:	dc2b      	bgt.n	802a940 <_printf_float+0x2c8>
 802a8e8:	2301      	movs	r3, #1
 802a8ea:	4a26      	ldr	r2, [pc, #152]	; (802a984 <_printf_float+0x30c>)
 802a8ec:	4631      	mov	r1, r6
 802a8ee:	4628      	mov	r0, r5
 802a8f0:	47b8      	blx	r7
 802a8f2:	3001      	adds	r0, #1
 802a8f4:	f43f af1d 	beq.w	802a732 <_printf_float+0xba>
 802a8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a8fa:	b923      	cbnz	r3, 802a906 <_printf_float+0x28e>
 802a8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a8fe:	b913      	cbnz	r3, 802a906 <_printf_float+0x28e>
 802a900:	6823      	ldr	r3, [r4, #0]
 802a902:	07d9      	lsls	r1, r3, #31
 802a904:	d5d8      	bpl.n	802a8b8 <_printf_float+0x240>
 802a906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a90a:	4631      	mov	r1, r6
 802a90c:	4628      	mov	r0, r5
 802a90e:	47b8      	blx	r7
 802a910:	3001      	adds	r0, #1
 802a912:	f43f af0e 	beq.w	802a732 <_printf_float+0xba>
 802a916:	f04f 0900 	mov.w	r9, #0
 802a91a:	f104 0a1a 	add.w	sl, r4, #26
 802a91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a920:	425b      	negs	r3, r3
 802a922:	454b      	cmp	r3, r9
 802a924:	dc01      	bgt.n	802a92a <_printf_float+0x2b2>
 802a926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a928:	e794      	b.n	802a854 <_printf_float+0x1dc>
 802a92a:	2301      	movs	r3, #1
 802a92c:	4652      	mov	r2, sl
 802a92e:	4631      	mov	r1, r6
 802a930:	4628      	mov	r0, r5
 802a932:	47b8      	blx	r7
 802a934:	3001      	adds	r0, #1
 802a936:	f43f aefc 	beq.w	802a732 <_printf_float+0xba>
 802a93a:	f109 0901 	add.w	r9, r9, #1
 802a93e:	e7ee      	b.n	802a91e <_printf_float+0x2a6>
 802a940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a942:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802a944:	429a      	cmp	r2, r3
 802a946:	bfa8      	it	ge
 802a948:	461a      	movge	r2, r3
 802a94a:	2a00      	cmp	r2, #0
 802a94c:	4691      	mov	r9, r2
 802a94e:	dd07      	ble.n	802a960 <_printf_float+0x2e8>
 802a950:	4613      	mov	r3, r2
 802a952:	4631      	mov	r1, r6
 802a954:	4642      	mov	r2, r8
 802a956:	4628      	mov	r0, r5
 802a958:	47b8      	blx	r7
 802a95a:	3001      	adds	r0, #1
 802a95c:	f43f aee9 	beq.w	802a732 <_printf_float+0xba>
 802a960:	f104 031a 	add.w	r3, r4, #26
 802a964:	f04f 0b00 	mov.w	fp, #0
 802a968:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802a96c:	9306      	str	r3, [sp, #24]
 802a96e:	e015      	b.n	802a99c <_printf_float+0x324>
 802a970:	7fefffff 	.word	0x7fefffff
 802a974:	0802cd9c 	.word	0x0802cd9c
 802a978:	0802cd98 	.word	0x0802cd98
 802a97c:	0802cda4 	.word	0x0802cda4
 802a980:	0802cda0 	.word	0x0802cda0
 802a984:	0802cda8 	.word	0x0802cda8
 802a988:	2301      	movs	r3, #1
 802a98a:	9a06      	ldr	r2, [sp, #24]
 802a98c:	4631      	mov	r1, r6
 802a98e:	4628      	mov	r0, r5
 802a990:	47b8      	blx	r7
 802a992:	3001      	adds	r0, #1
 802a994:	f43f aecd 	beq.w	802a732 <_printf_float+0xba>
 802a998:	f10b 0b01 	add.w	fp, fp, #1
 802a99c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 802a9a0:	ebaa 0309 	sub.w	r3, sl, r9
 802a9a4:	455b      	cmp	r3, fp
 802a9a6:	dcef      	bgt.n	802a988 <_printf_float+0x310>
 802a9a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802a9ac:	429a      	cmp	r2, r3
 802a9ae:	44d0      	add	r8, sl
 802a9b0:	db15      	blt.n	802a9de <_printf_float+0x366>
 802a9b2:	6823      	ldr	r3, [r4, #0]
 802a9b4:	07da      	lsls	r2, r3, #31
 802a9b6:	d412      	bmi.n	802a9de <_printf_float+0x366>
 802a9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a9ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a9bc:	eba3 020a 	sub.w	r2, r3, sl
 802a9c0:	eba3 0a01 	sub.w	sl, r3, r1
 802a9c4:	4592      	cmp	sl, r2
 802a9c6:	bfa8      	it	ge
 802a9c8:	4692      	movge	sl, r2
 802a9ca:	f1ba 0f00 	cmp.w	sl, #0
 802a9ce:	dc0e      	bgt.n	802a9ee <_printf_float+0x376>
 802a9d0:	f04f 0800 	mov.w	r8, #0
 802a9d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802a9d8:	f104 091a 	add.w	r9, r4, #26
 802a9dc:	e019      	b.n	802aa12 <_printf_float+0x39a>
 802a9de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a9e2:	4631      	mov	r1, r6
 802a9e4:	4628      	mov	r0, r5
 802a9e6:	47b8      	blx	r7
 802a9e8:	3001      	adds	r0, #1
 802a9ea:	d1e5      	bne.n	802a9b8 <_printf_float+0x340>
 802a9ec:	e6a1      	b.n	802a732 <_printf_float+0xba>
 802a9ee:	4653      	mov	r3, sl
 802a9f0:	4642      	mov	r2, r8
 802a9f2:	4631      	mov	r1, r6
 802a9f4:	4628      	mov	r0, r5
 802a9f6:	47b8      	blx	r7
 802a9f8:	3001      	adds	r0, #1
 802a9fa:	d1e9      	bne.n	802a9d0 <_printf_float+0x358>
 802a9fc:	e699      	b.n	802a732 <_printf_float+0xba>
 802a9fe:	2301      	movs	r3, #1
 802aa00:	464a      	mov	r2, r9
 802aa02:	4631      	mov	r1, r6
 802aa04:	4628      	mov	r0, r5
 802aa06:	47b8      	blx	r7
 802aa08:	3001      	adds	r0, #1
 802aa0a:	f43f ae92 	beq.w	802a732 <_printf_float+0xba>
 802aa0e:	f108 0801 	add.w	r8, r8, #1
 802aa12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802aa16:	1a9b      	subs	r3, r3, r2
 802aa18:	eba3 030a 	sub.w	r3, r3, sl
 802aa1c:	4543      	cmp	r3, r8
 802aa1e:	dcee      	bgt.n	802a9fe <_printf_float+0x386>
 802aa20:	e74a      	b.n	802a8b8 <_printf_float+0x240>
 802aa22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802aa24:	2a01      	cmp	r2, #1
 802aa26:	dc01      	bgt.n	802aa2c <_printf_float+0x3b4>
 802aa28:	07db      	lsls	r3, r3, #31
 802aa2a:	d53a      	bpl.n	802aaa2 <_printf_float+0x42a>
 802aa2c:	2301      	movs	r3, #1
 802aa2e:	4642      	mov	r2, r8
 802aa30:	4631      	mov	r1, r6
 802aa32:	4628      	mov	r0, r5
 802aa34:	47b8      	blx	r7
 802aa36:	3001      	adds	r0, #1
 802aa38:	f43f ae7b 	beq.w	802a732 <_printf_float+0xba>
 802aa3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802aa40:	4631      	mov	r1, r6
 802aa42:	4628      	mov	r0, r5
 802aa44:	47b8      	blx	r7
 802aa46:	3001      	adds	r0, #1
 802aa48:	f108 0801 	add.w	r8, r8, #1
 802aa4c:	f43f ae71 	beq.w	802a732 <_printf_float+0xba>
 802aa50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802aa52:	2200      	movs	r2, #0
 802aa54:	f103 3aff 	add.w	sl, r3, #4294967295
 802aa58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802aa5c:	2300      	movs	r3, #0
 802aa5e:	f7f5 ff6b 	bl	8020938 <__aeabi_dcmpeq>
 802aa62:	b9c8      	cbnz	r0, 802aa98 <_printf_float+0x420>
 802aa64:	4653      	mov	r3, sl
 802aa66:	4642      	mov	r2, r8
 802aa68:	4631      	mov	r1, r6
 802aa6a:	4628      	mov	r0, r5
 802aa6c:	47b8      	blx	r7
 802aa6e:	3001      	adds	r0, #1
 802aa70:	d10e      	bne.n	802aa90 <_printf_float+0x418>
 802aa72:	e65e      	b.n	802a732 <_printf_float+0xba>
 802aa74:	2301      	movs	r3, #1
 802aa76:	4652      	mov	r2, sl
 802aa78:	4631      	mov	r1, r6
 802aa7a:	4628      	mov	r0, r5
 802aa7c:	47b8      	blx	r7
 802aa7e:	3001      	adds	r0, #1
 802aa80:	f43f ae57 	beq.w	802a732 <_printf_float+0xba>
 802aa84:	f108 0801 	add.w	r8, r8, #1
 802aa88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802aa8a:	3b01      	subs	r3, #1
 802aa8c:	4543      	cmp	r3, r8
 802aa8e:	dcf1      	bgt.n	802aa74 <_printf_float+0x3fc>
 802aa90:	464b      	mov	r3, r9
 802aa92:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802aa96:	e6de      	b.n	802a856 <_printf_float+0x1de>
 802aa98:	f04f 0800 	mov.w	r8, #0
 802aa9c:	f104 0a1a 	add.w	sl, r4, #26
 802aaa0:	e7f2      	b.n	802aa88 <_printf_float+0x410>
 802aaa2:	2301      	movs	r3, #1
 802aaa4:	e7df      	b.n	802aa66 <_printf_float+0x3ee>
 802aaa6:	2301      	movs	r3, #1
 802aaa8:	464a      	mov	r2, r9
 802aaaa:	4631      	mov	r1, r6
 802aaac:	4628      	mov	r0, r5
 802aaae:	47b8      	blx	r7
 802aab0:	3001      	adds	r0, #1
 802aab2:	f43f ae3e 	beq.w	802a732 <_printf_float+0xba>
 802aab6:	f108 0801 	add.w	r8, r8, #1
 802aaba:	68e3      	ldr	r3, [r4, #12]
 802aabc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802aabe:	1a9b      	subs	r3, r3, r2
 802aac0:	4543      	cmp	r3, r8
 802aac2:	dcf0      	bgt.n	802aaa6 <_printf_float+0x42e>
 802aac4:	e6fc      	b.n	802a8c0 <_printf_float+0x248>
 802aac6:	f04f 0800 	mov.w	r8, #0
 802aaca:	f104 0919 	add.w	r9, r4, #25
 802aace:	e7f4      	b.n	802aaba <_printf_float+0x442>
 802aad0:	2900      	cmp	r1, #0
 802aad2:	f43f ae8b 	beq.w	802a7ec <_printf_float+0x174>
 802aad6:	2300      	movs	r3, #0
 802aad8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 802aadc:	ab09      	add	r3, sp, #36	; 0x24
 802aade:	9300      	str	r3, [sp, #0]
 802aae0:	ec49 8b10 	vmov	d0, r8, r9
 802aae4:	6022      	str	r2, [r4, #0]
 802aae6:	f8cd a004 	str.w	sl, [sp, #4]
 802aaea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802aaee:	4628      	mov	r0, r5
 802aaf0:	f7ff fd2d 	bl	802a54e <__cvt>
 802aaf4:	4680      	mov	r8, r0
 802aaf6:	e648      	b.n	802a78a <_printf_float+0x112>

0802aaf8 <_printf_common>:
 802aaf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802aafc:	4691      	mov	r9, r2
 802aafe:	461f      	mov	r7, r3
 802ab00:	688a      	ldr	r2, [r1, #8]
 802ab02:	690b      	ldr	r3, [r1, #16]
 802ab04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802ab08:	4293      	cmp	r3, r2
 802ab0a:	bfb8      	it	lt
 802ab0c:	4613      	movlt	r3, r2
 802ab0e:	f8c9 3000 	str.w	r3, [r9]
 802ab12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802ab16:	4606      	mov	r6, r0
 802ab18:	460c      	mov	r4, r1
 802ab1a:	b112      	cbz	r2, 802ab22 <_printf_common+0x2a>
 802ab1c:	3301      	adds	r3, #1
 802ab1e:	f8c9 3000 	str.w	r3, [r9]
 802ab22:	6823      	ldr	r3, [r4, #0]
 802ab24:	0699      	lsls	r1, r3, #26
 802ab26:	bf42      	ittt	mi
 802ab28:	f8d9 3000 	ldrmi.w	r3, [r9]
 802ab2c:	3302      	addmi	r3, #2
 802ab2e:	f8c9 3000 	strmi.w	r3, [r9]
 802ab32:	6825      	ldr	r5, [r4, #0]
 802ab34:	f015 0506 	ands.w	r5, r5, #6
 802ab38:	d107      	bne.n	802ab4a <_printf_common+0x52>
 802ab3a:	f104 0a19 	add.w	sl, r4, #25
 802ab3e:	68e3      	ldr	r3, [r4, #12]
 802ab40:	f8d9 2000 	ldr.w	r2, [r9]
 802ab44:	1a9b      	subs	r3, r3, r2
 802ab46:	42ab      	cmp	r3, r5
 802ab48:	dc28      	bgt.n	802ab9c <_printf_common+0xa4>
 802ab4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802ab4e:	6822      	ldr	r2, [r4, #0]
 802ab50:	3300      	adds	r3, #0
 802ab52:	bf18      	it	ne
 802ab54:	2301      	movne	r3, #1
 802ab56:	0692      	lsls	r2, r2, #26
 802ab58:	d42d      	bmi.n	802abb6 <_printf_common+0xbe>
 802ab5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802ab5e:	4639      	mov	r1, r7
 802ab60:	4630      	mov	r0, r6
 802ab62:	47c0      	blx	r8
 802ab64:	3001      	adds	r0, #1
 802ab66:	d020      	beq.n	802abaa <_printf_common+0xb2>
 802ab68:	6823      	ldr	r3, [r4, #0]
 802ab6a:	68e5      	ldr	r5, [r4, #12]
 802ab6c:	f8d9 2000 	ldr.w	r2, [r9]
 802ab70:	f003 0306 	and.w	r3, r3, #6
 802ab74:	2b04      	cmp	r3, #4
 802ab76:	bf08      	it	eq
 802ab78:	1aad      	subeq	r5, r5, r2
 802ab7a:	68a3      	ldr	r3, [r4, #8]
 802ab7c:	6922      	ldr	r2, [r4, #16]
 802ab7e:	bf0c      	ite	eq
 802ab80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802ab84:	2500      	movne	r5, #0
 802ab86:	4293      	cmp	r3, r2
 802ab88:	bfc4      	itt	gt
 802ab8a:	1a9b      	subgt	r3, r3, r2
 802ab8c:	18ed      	addgt	r5, r5, r3
 802ab8e:	f04f 0900 	mov.w	r9, #0
 802ab92:	341a      	adds	r4, #26
 802ab94:	454d      	cmp	r5, r9
 802ab96:	d11a      	bne.n	802abce <_printf_common+0xd6>
 802ab98:	2000      	movs	r0, #0
 802ab9a:	e008      	b.n	802abae <_printf_common+0xb6>
 802ab9c:	2301      	movs	r3, #1
 802ab9e:	4652      	mov	r2, sl
 802aba0:	4639      	mov	r1, r7
 802aba2:	4630      	mov	r0, r6
 802aba4:	47c0      	blx	r8
 802aba6:	3001      	adds	r0, #1
 802aba8:	d103      	bne.n	802abb2 <_printf_common+0xba>
 802abaa:	f04f 30ff 	mov.w	r0, #4294967295
 802abae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802abb2:	3501      	adds	r5, #1
 802abb4:	e7c3      	b.n	802ab3e <_printf_common+0x46>
 802abb6:	18e1      	adds	r1, r4, r3
 802abb8:	1c5a      	adds	r2, r3, #1
 802abba:	2030      	movs	r0, #48	; 0x30
 802abbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802abc0:	4422      	add	r2, r4
 802abc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802abc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802abca:	3302      	adds	r3, #2
 802abcc:	e7c5      	b.n	802ab5a <_printf_common+0x62>
 802abce:	2301      	movs	r3, #1
 802abd0:	4622      	mov	r2, r4
 802abd2:	4639      	mov	r1, r7
 802abd4:	4630      	mov	r0, r6
 802abd6:	47c0      	blx	r8
 802abd8:	3001      	adds	r0, #1
 802abda:	d0e6      	beq.n	802abaa <_printf_common+0xb2>
 802abdc:	f109 0901 	add.w	r9, r9, #1
 802abe0:	e7d8      	b.n	802ab94 <_printf_common+0x9c>
	...

0802abe4 <_printf_i>:
 802abe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802abe8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802abec:	460c      	mov	r4, r1
 802abee:	7e09      	ldrb	r1, [r1, #24]
 802abf0:	b085      	sub	sp, #20
 802abf2:	296e      	cmp	r1, #110	; 0x6e
 802abf4:	4617      	mov	r7, r2
 802abf6:	4606      	mov	r6, r0
 802abf8:	4698      	mov	r8, r3
 802abfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802abfc:	f000 80b3 	beq.w	802ad66 <_printf_i+0x182>
 802ac00:	d822      	bhi.n	802ac48 <_printf_i+0x64>
 802ac02:	2963      	cmp	r1, #99	; 0x63
 802ac04:	d036      	beq.n	802ac74 <_printf_i+0x90>
 802ac06:	d80a      	bhi.n	802ac1e <_printf_i+0x3a>
 802ac08:	2900      	cmp	r1, #0
 802ac0a:	f000 80b9 	beq.w	802ad80 <_printf_i+0x19c>
 802ac0e:	2958      	cmp	r1, #88	; 0x58
 802ac10:	f000 8083 	beq.w	802ad1a <_printf_i+0x136>
 802ac14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ac18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802ac1c:	e032      	b.n	802ac84 <_printf_i+0xa0>
 802ac1e:	2964      	cmp	r1, #100	; 0x64
 802ac20:	d001      	beq.n	802ac26 <_printf_i+0x42>
 802ac22:	2969      	cmp	r1, #105	; 0x69
 802ac24:	d1f6      	bne.n	802ac14 <_printf_i+0x30>
 802ac26:	6820      	ldr	r0, [r4, #0]
 802ac28:	6813      	ldr	r3, [r2, #0]
 802ac2a:	0605      	lsls	r5, r0, #24
 802ac2c:	f103 0104 	add.w	r1, r3, #4
 802ac30:	d52a      	bpl.n	802ac88 <_printf_i+0xa4>
 802ac32:	681b      	ldr	r3, [r3, #0]
 802ac34:	6011      	str	r1, [r2, #0]
 802ac36:	2b00      	cmp	r3, #0
 802ac38:	da03      	bge.n	802ac42 <_printf_i+0x5e>
 802ac3a:	222d      	movs	r2, #45	; 0x2d
 802ac3c:	425b      	negs	r3, r3
 802ac3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802ac42:	486f      	ldr	r0, [pc, #444]	; (802ae00 <_printf_i+0x21c>)
 802ac44:	220a      	movs	r2, #10
 802ac46:	e039      	b.n	802acbc <_printf_i+0xd8>
 802ac48:	2973      	cmp	r1, #115	; 0x73
 802ac4a:	f000 809d 	beq.w	802ad88 <_printf_i+0x1a4>
 802ac4e:	d808      	bhi.n	802ac62 <_printf_i+0x7e>
 802ac50:	296f      	cmp	r1, #111	; 0x6f
 802ac52:	d020      	beq.n	802ac96 <_printf_i+0xb2>
 802ac54:	2970      	cmp	r1, #112	; 0x70
 802ac56:	d1dd      	bne.n	802ac14 <_printf_i+0x30>
 802ac58:	6823      	ldr	r3, [r4, #0]
 802ac5a:	f043 0320 	orr.w	r3, r3, #32
 802ac5e:	6023      	str	r3, [r4, #0]
 802ac60:	e003      	b.n	802ac6a <_printf_i+0x86>
 802ac62:	2975      	cmp	r1, #117	; 0x75
 802ac64:	d017      	beq.n	802ac96 <_printf_i+0xb2>
 802ac66:	2978      	cmp	r1, #120	; 0x78
 802ac68:	d1d4      	bne.n	802ac14 <_printf_i+0x30>
 802ac6a:	2378      	movs	r3, #120	; 0x78
 802ac6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802ac70:	4864      	ldr	r0, [pc, #400]	; (802ae04 <_printf_i+0x220>)
 802ac72:	e055      	b.n	802ad20 <_printf_i+0x13c>
 802ac74:	6813      	ldr	r3, [r2, #0]
 802ac76:	1d19      	adds	r1, r3, #4
 802ac78:	681b      	ldr	r3, [r3, #0]
 802ac7a:	6011      	str	r1, [r2, #0]
 802ac7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ac80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802ac84:	2301      	movs	r3, #1
 802ac86:	e08c      	b.n	802ada2 <_printf_i+0x1be>
 802ac88:	681b      	ldr	r3, [r3, #0]
 802ac8a:	6011      	str	r1, [r2, #0]
 802ac8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 802ac90:	bf18      	it	ne
 802ac92:	b21b      	sxthne	r3, r3
 802ac94:	e7cf      	b.n	802ac36 <_printf_i+0x52>
 802ac96:	6813      	ldr	r3, [r2, #0]
 802ac98:	6825      	ldr	r5, [r4, #0]
 802ac9a:	1d18      	adds	r0, r3, #4
 802ac9c:	6010      	str	r0, [r2, #0]
 802ac9e:	0628      	lsls	r0, r5, #24
 802aca0:	d501      	bpl.n	802aca6 <_printf_i+0xc2>
 802aca2:	681b      	ldr	r3, [r3, #0]
 802aca4:	e002      	b.n	802acac <_printf_i+0xc8>
 802aca6:	0668      	lsls	r0, r5, #25
 802aca8:	d5fb      	bpl.n	802aca2 <_printf_i+0xbe>
 802acaa:	881b      	ldrh	r3, [r3, #0]
 802acac:	4854      	ldr	r0, [pc, #336]	; (802ae00 <_printf_i+0x21c>)
 802acae:	296f      	cmp	r1, #111	; 0x6f
 802acb0:	bf14      	ite	ne
 802acb2:	220a      	movne	r2, #10
 802acb4:	2208      	moveq	r2, #8
 802acb6:	2100      	movs	r1, #0
 802acb8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802acbc:	6865      	ldr	r5, [r4, #4]
 802acbe:	60a5      	str	r5, [r4, #8]
 802acc0:	2d00      	cmp	r5, #0
 802acc2:	f2c0 8095 	blt.w	802adf0 <_printf_i+0x20c>
 802acc6:	6821      	ldr	r1, [r4, #0]
 802acc8:	f021 0104 	bic.w	r1, r1, #4
 802accc:	6021      	str	r1, [r4, #0]
 802acce:	2b00      	cmp	r3, #0
 802acd0:	d13d      	bne.n	802ad4e <_printf_i+0x16a>
 802acd2:	2d00      	cmp	r5, #0
 802acd4:	f040 808e 	bne.w	802adf4 <_printf_i+0x210>
 802acd8:	4665      	mov	r5, ip
 802acda:	2a08      	cmp	r2, #8
 802acdc:	d10b      	bne.n	802acf6 <_printf_i+0x112>
 802acde:	6823      	ldr	r3, [r4, #0]
 802ace0:	07db      	lsls	r3, r3, #31
 802ace2:	d508      	bpl.n	802acf6 <_printf_i+0x112>
 802ace4:	6923      	ldr	r3, [r4, #16]
 802ace6:	6862      	ldr	r2, [r4, #4]
 802ace8:	429a      	cmp	r2, r3
 802acea:	bfde      	ittt	le
 802acec:	2330      	movle	r3, #48	; 0x30
 802acee:	f805 3c01 	strble.w	r3, [r5, #-1]
 802acf2:	f105 35ff 	addle.w	r5, r5, #4294967295
 802acf6:	ebac 0305 	sub.w	r3, ip, r5
 802acfa:	6123      	str	r3, [r4, #16]
 802acfc:	f8cd 8000 	str.w	r8, [sp]
 802ad00:	463b      	mov	r3, r7
 802ad02:	aa03      	add	r2, sp, #12
 802ad04:	4621      	mov	r1, r4
 802ad06:	4630      	mov	r0, r6
 802ad08:	f7ff fef6 	bl	802aaf8 <_printf_common>
 802ad0c:	3001      	adds	r0, #1
 802ad0e:	d14d      	bne.n	802adac <_printf_i+0x1c8>
 802ad10:	f04f 30ff 	mov.w	r0, #4294967295
 802ad14:	b005      	add	sp, #20
 802ad16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ad1a:	4839      	ldr	r0, [pc, #228]	; (802ae00 <_printf_i+0x21c>)
 802ad1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802ad20:	6813      	ldr	r3, [r2, #0]
 802ad22:	6821      	ldr	r1, [r4, #0]
 802ad24:	1d1d      	adds	r5, r3, #4
 802ad26:	681b      	ldr	r3, [r3, #0]
 802ad28:	6015      	str	r5, [r2, #0]
 802ad2a:	060a      	lsls	r2, r1, #24
 802ad2c:	d50b      	bpl.n	802ad46 <_printf_i+0x162>
 802ad2e:	07ca      	lsls	r2, r1, #31
 802ad30:	bf44      	itt	mi
 802ad32:	f041 0120 	orrmi.w	r1, r1, #32
 802ad36:	6021      	strmi	r1, [r4, #0]
 802ad38:	b91b      	cbnz	r3, 802ad42 <_printf_i+0x15e>
 802ad3a:	6822      	ldr	r2, [r4, #0]
 802ad3c:	f022 0220 	bic.w	r2, r2, #32
 802ad40:	6022      	str	r2, [r4, #0]
 802ad42:	2210      	movs	r2, #16
 802ad44:	e7b7      	b.n	802acb6 <_printf_i+0xd2>
 802ad46:	064d      	lsls	r5, r1, #25
 802ad48:	bf48      	it	mi
 802ad4a:	b29b      	uxthmi	r3, r3
 802ad4c:	e7ef      	b.n	802ad2e <_printf_i+0x14a>
 802ad4e:	4665      	mov	r5, ip
 802ad50:	fbb3 f1f2 	udiv	r1, r3, r2
 802ad54:	fb02 3311 	mls	r3, r2, r1, r3
 802ad58:	5cc3      	ldrb	r3, [r0, r3]
 802ad5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802ad5e:	460b      	mov	r3, r1
 802ad60:	2900      	cmp	r1, #0
 802ad62:	d1f5      	bne.n	802ad50 <_printf_i+0x16c>
 802ad64:	e7b9      	b.n	802acda <_printf_i+0xf6>
 802ad66:	6813      	ldr	r3, [r2, #0]
 802ad68:	6825      	ldr	r5, [r4, #0]
 802ad6a:	6961      	ldr	r1, [r4, #20]
 802ad6c:	1d18      	adds	r0, r3, #4
 802ad6e:	6010      	str	r0, [r2, #0]
 802ad70:	0628      	lsls	r0, r5, #24
 802ad72:	681b      	ldr	r3, [r3, #0]
 802ad74:	d501      	bpl.n	802ad7a <_printf_i+0x196>
 802ad76:	6019      	str	r1, [r3, #0]
 802ad78:	e002      	b.n	802ad80 <_printf_i+0x19c>
 802ad7a:	066a      	lsls	r2, r5, #25
 802ad7c:	d5fb      	bpl.n	802ad76 <_printf_i+0x192>
 802ad7e:	8019      	strh	r1, [r3, #0]
 802ad80:	2300      	movs	r3, #0
 802ad82:	6123      	str	r3, [r4, #16]
 802ad84:	4665      	mov	r5, ip
 802ad86:	e7b9      	b.n	802acfc <_printf_i+0x118>
 802ad88:	6813      	ldr	r3, [r2, #0]
 802ad8a:	1d19      	adds	r1, r3, #4
 802ad8c:	6011      	str	r1, [r2, #0]
 802ad8e:	681d      	ldr	r5, [r3, #0]
 802ad90:	6862      	ldr	r2, [r4, #4]
 802ad92:	2100      	movs	r1, #0
 802ad94:	4628      	mov	r0, r5
 802ad96:	f7f5 f95b 	bl	8020050 <memchr>
 802ad9a:	b108      	cbz	r0, 802ada0 <_printf_i+0x1bc>
 802ad9c:	1b40      	subs	r0, r0, r5
 802ad9e:	6060      	str	r0, [r4, #4]
 802ada0:	6863      	ldr	r3, [r4, #4]
 802ada2:	6123      	str	r3, [r4, #16]
 802ada4:	2300      	movs	r3, #0
 802ada6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802adaa:	e7a7      	b.n	802acfc <_printf_i+0x118>
 802adac:	6923      	ldr	r3, [r4, #16]
 802adae:	462a      	mov	r2, r5
 802adb0:	4639      	mov	r1, r7
 802adb2:	4630      	mov	r0, r6
 802adb4:	47c0      	blx	r8
 802adb6:	3001      	adds	r0, #1
 802adb8:	d0aa      	beq.n	802ad10 <_printf_i+0x12c>
 802adba:	6823      	ldr	r3, [r4, #0]
 802adbc:	079b      	lsls	r3, r3, #30
 802adbe:	d413      	bmi.n	802ade8 <_printf_i+0x204>
 802adc0:	68e0      	ldr	r0, [r4, #12]
 802adc2:	9b03      	ldr	r3, [sp, #12]
 802adc4:	4298      	cmp	r0, r3
 802adc6:	bfb8      	it	lt
 802adc8:	4618      	movlt	r0, r3
 802adca:	e7a3      	b.n	802ad14 <_printf_i+0x130>
 802adcc:	2301      	movs	r3, #1
 802adce:	464a      	mov	r2, r9
 802add0:	4639      	mov	r1, r7
 802add2:	4630      	mov	r0, r6
 802add4:	47c0      	blx	r8
 802add6:	3001      	adds	r0, #1
 802add8:	d09a      	beq.n	802ad10 <_printf_i+0x12c>
 802adda:	3501      	adds	r5, #1
 802addc:	68e3      	ldr	r3, [r4, #12]
 802adde:	9a03      	ldr	r2, [sp, #12]
 802ade0:	1a9b      	subs	r3, r3, r2
 802ade2:	42ab      	cmp	r3, r5
 802ade4:	dcf2      	bgt.n	802adcc <_printf_i+0x1e8>
 802ade6:	e7eb      	b.n	802adc0 <_printf_i+0x1dc>
 802ade8:	2500      	movs	r5, #0
 802adea:	f104 0919 	add.w	r9, r4, #25
 802adee:	e7f5      	b.n	802addc <_printf_i+0x1f8>
 802adf0:	2b00      	cmp	r3, #0
 802adf2:	d1ac      	bne.n	802ad4e <_printf_i+0x16a>
 802adf4:	7803      	ldrb	r3, [r0, #0]
 802adf6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802adfa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802adfe:	e76c      	b.n	802acda <_printf_i+0xf6>
 802ae00:	0802cdaa 	.word	0x0802cdaa
 802ae04:	0802cdbb 	.word	0x0802cdbb

0802ae08 <iprintf>:
 802ae08:	b40f      	push	{r0, r1, r2, r3}
 802ae0a:	4b0a      	ldr	r3, [pc, #40]	; (802ae34 <iprintf+0x2c>)
 802ae0c:	b513      	push	{r0, r1, r4, lr}
 802ae0e:	681c      	ldr	r4, [r3, #0]
 802ae10:	b124      	cbz	r4, 802ae1c <iprintf+0x14>
 802ae12:	69a3      	ldr	r3, [r4, #24]
 802ae14:	b913      	cbnz	r3, 802ae1c <iprintf+0x14>
 802ae16:	4620      	mov	r0, r4
 802ae18:	f001 f866 	bl	802bee8 <__sinit>
 802ae1c:	ab05      	add	r3, sp, #20
 802ae1e:	9a04      	ldr	r2, [sp, #16]
 802ae20:	68a1      	ldr	r1, [r4, #8]
 802ae22:	9301      	str	r3, [sp, #4]
 802ae24:	4620      	mov	r0, r4
 802ae26:	f001 fd1f 	bl	802c868 <_vfiprintf_r>
 802ae2a:	b002      	add	sp, #8
 802ae2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ae30:	b004      	add	sp, #16
 802ae32:	4770      	bx	lr
 802ae34:	20000010 	.word	0x20000010

0802ae38 <_puts_r>:
 802ae38:	b570      	push	{r4, r5, r6, lr}
 802ae3a:	460e      	mov	r6, r1
 802ae3c:	4605      	mov	r5, r0
 802ae3e:	b118      	cbz	r0, 802ae48 <_puts_r+0x10>
 802ae40:	6983      	ldr	r3, [r0, #24]
 802ae42:	b90b      	cbnz	r3, 802ae48 <_puts_r+0x10>
 802ae44:	f001 f850 	bl	802bee8 <__sinit>
 802ae48:	69ab      	ldr	r3, [r5, #24]
 802ae4a:	68ac      	ldr	r4, [r5, #8]
 802ae4c:	b913      	cbnz	r3, 802ae54 <_puts_r+0x1c>
 802ae4e:	4628      	mov	r0, r5
 802ae50:	f001 f84a 	bl	802bee8 <__sinit>
 802ae54:	4b23      	ldr	r3, [pc, #140]	; (802aee4 <_puts_r+0xac>)
 802ae56:	429c      	cmp	r4, r3
 802ae58:	d117      	bne.n	802ae8a <_puts_r+0x52>
 802ae5a:	686c      	ldr	r4, [r5, #4]
 802ae5c:	89a3      	ldrh	r3, [r4, #12]
 802ae5e:	071b      	lsls	r3, r3, #28
 802ae60:	d51d      	bpl.n	802ae9e <_puts_r+0x66>
 802ae62:	6923      	ldr	r3, [r4, #16]
 802ae64:	b1db      	cbz	r3, 802ae9e <_puts_r+0x66>
 802ae66:	3e01      	subs	r6, #1
 802ae68:	68a3      	ldr	r3, [r4, #8]
 802ae6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802ae6e:	3b01      	subs	r3, #1
 802ae70:	60a3      	str	r3, [r4, #8]
 802ae72:	b9e9      	cbnz	r1, 802aeb0 <_puts_r+0x78>
 802ae74:	2b00      	cmp	r3, #0
 802ae76:	da2e      	bge.n	802aed6 <_puts_r+0x9e>
 802ae78:	4622      	mov	r2, r4
 802ae7a:	210a      	movs	r1, #10
 802ae7c:	4628      	mov	r0, r5
 802ae7e:	f000 f83f 	bl	802af00 <__swbuf_r>
 802ae82:	3001      	adds	r0, #1
 802ae84:	d011      	beq.n	802aeaa <_puts_r+0x72>
 802ae86:	200a      	movs	r0, #10
 802ae88:	e011      	b.n	802aeae <_puts_r+0x76>
 802ae8a:	4b17      	ldr	r3, [pc, #92]	; (802aee8 <_puts_r+0xb0>)
 802ae8c:	429c      	cmp	r4, r3
 802ae8e:	d101      	bne.n	802ae94 <_puts_r+0x5c>
 802ae90:	68ac      	ldr	r4, [r5, #8]
 802ae92:	e7e3      	b.n	802ae5c <_puts_r+0x24>
 802ae94:	4b15      	ldr	r3, [pc, #84]	; (802aeec <_puts_r+0xb4>)
 802ae96:	429c      	cmp	r4, r3
 802ae98:	bf08      	it	eq
 802ae9a:	68ec      	ldreq	r4, [r5, #12]
 802ae9c:	e7de      	b.n	802ae5c <_puts_r+0x24>
 802ae9e:	4621      	mov	r1, r4
 802aea0:	4628      	mov	r0, r5
 802aea2:	f000 f87f 	bl	802afa4 <__swsetup_r>
 802aea6:	2800      	cmp	r0, #0
 802aea8:	d0dd      	beq.n	802ae66 <_puts_r+0x2e>
 802aeaa:	f04f 30ff 	mov.w	r0, #4294967295
 802aeae:	bd70      	pop	{r4, r5, r6, pc}
 802aeb0:	2b00      	cmp	r3, #0
 802aeb2:	da04      	bge.n	802aebe <_puts_r+0x86>
 802aeb4:	69a2      	ldr	r2, [r4, #24]
 802aeb6:	429a      	cmp	r2, r3
 802aeb8:	dc06      	bgt.n	802aec8 <_puts_r+0x90>
 802aeba:	290a      	cmp	r1, #10
 802aebc:	d004      	beq.n	802aec8 <_puts_r+0x90>
 802aebe:	6823      	ldr	r3, [r4, #0]
 802aec0:	1c5a      	adds	r2, r3, #1
 802aec2:	6022      	str	r2, [r4, #0]
 802aec4:	7019      	strb	r1, [r3, #0]
 802aec6:	e7cf      	b.n	802ae68 <_puts_r+0x30>
 802aec8:	4622      	mov	r2, r4
 802aeca:	4628      	mov	r0, r5
 802aecc:	f000 f818 	bl	802af00 <__swbuf_r>
 802aed0:	3001      	adds	r0, #1
 802aed2:	d1c9      	bne.n	802ae68 <_puts_r+0x30>
 802aed4:	e7e9      	b.n	802aeaa <_puts_r+0x72>
 802aed6:	6823      	ldr	r3, [r4, #0]
 802aed8:	200a      	movs	r0, #10
 802aeda:	1c5a      	adds	r2, r3, #1
 802aedc:	6022      	str	r2, [r4, #0]
 802aede:	7018      	strb	r0, [r3, #0]
 802aee0:	e7e5      	b.n	802aeae <_puts_r+0x76>
 802aee2:	bf00      	nop
 802aee4:	0802cdfc 	.word	0x0802cdfc
 802aee8:	0802ce1c 	.word	0x0802ce1c
 802aeec:	0802cddc 	.word	0x0802cddc

0802aef0 <puts>:
 802aef0:	4b02      	ldr	r3, [pc, #8]	; (802aefc <puts+0xc>)
 802aef2:	4601      	mov	r1, r0
 802aef4:	6818      	ldr	r0, [r3, #0]
 802aef6:	f7ff bf9f 	b.w	802ae38 <_puts_r>
 802aefa:	bf00      	nop
 802aefc:	20000010 	.word	0x20000010

0802af00 <__swbuf_r>:
 802af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802af02:	460e      	mov	r6, r1
 802af04:	4614      	mov	r4, r2
 802af06:	4605      	mov	r5, r0
 802af08:	b118      	cbz	r0, 802af12 <__swbuf_r+0x12>
 802af0a:	6983      	ldr	r3, [r0, #24]
 802af0c:	b90b      	cbnz	r3, 802af12 <__swbuf_r+0x12>
 802af0e:	f000 ffeb 	bl	802bee8 <__sinit>
 802af12:	4b21      	ldr	r3, [pc, #132]	; (802af98 <__swbuf_r+0x98>)
 802af14:	429c      	cmp	r4, r3
 802af16:	d12a      	bne.n	802af6e <__swbuf_r+0x6e>
 802af18:	686c      	ldr	r4, [r5, #4]
 802af1a:	69a3      	ldr	r3, [r4, #24]
 802af1c:	60a3      	str	r3, [r4, #8]
 802af1e:	89a3      	ldrh	r3, [r4, #12]
 802af20:	071a      	lsls	r2, r3, #28
 802af22:	d52e      	bpl.n	802af82 <__swbuf_r+0x82>
 802af24:	6923      	ldr	r3, [r4, #16]
 802af26:	b363      	cbz	r3, 802af82 <__swbuf_r+0x82>
 802af28:	6923      	ldr	r3, [r4, #16]
 802af2a:	6820      	ldr	r0, [r4, #0]
 802af2c:	1ac0      	subs	r0, r0, r3
 802af2e:	6963      	ldr	r3, [r4, #20]
 802af30:	b2f6      	uxtb	r6, r6
 802af32:	4283      	cmp	r3, r0
 802af34:	4637      	mov	r7, r6
 802af36:	dc04      	bgt.n	802af42 <__swbuf_r+0x42>
 802af38:	4621      	mov	r1, r4
 802af3a:	4628      	mov	r0, r5
 802af3c:	f000 ff6a 	bl	802be14 <_fflush_r>
 802af40:	bb28      	cbnz	r0, 802af8e <__swbuf_r+0x8e>
 802af42:	68a3      	ldr	r3, [r4, #8]
 802af44:	3b01      	subs	r3, #1
 802af46:	60a3      	str	r3, [r4, #8]
 802af48:	6823      	ldr	r3, [r4, #0]
 802af4a:	1c5a      	adds	r2, r3, #1
 802af4c:	6022      	str	r2, [r4, #0]
 802af4e:	701e      	strb	r6, [r3, #0]
 802af50:	6963      	ldr	r3, [r4, #20]
 802af52:	3001      	adds	r0, #1
 802af54:	4283      	cmp	r3, r0
 802af56:	d004      	beq.n	802af62 <__swbuf_r+0x62>
 802af58:	89a3      	ldrh	r3, [r4, #12]
 802af5a:	07db      	lsls	r3, r3, #31
 802af5c:	d519      	bpl.n	802af92 <__swbuf_r+0x92>
 802af5e:	2e0a      	cmp	r6, #10
 802af60:	d117      	bne.n	802af92 <__swbuf_r+0x92>
 802af62:	4621      	mov	r1, r4
 802af64:	4628      	mov	r0, r5
 802af66:	f000 ff55 	bl	802be14 <_fflush_r>
 802af6a:	b190      	cbz	r0, 802af92 <__swbuf_r+0x92>
 802af6c:	e00f      	b.n	802af8e <__swbuf_r+0x8e>
 802af6e:	4b0b      	ldr	r3, [pc, #44]	; (802af9c <__swbuf_r+0x9c>)
 802af70:	429c      	cmp	r4, r3
 802af72:	d101      	bne.n	802af78 <__swbuf_r+0x78>
 802af74:	68ac      	ldr	r4, [r5, #8]
 802af76:	e7d0      	b.n	802af1a <__swbuf_r+0x1a>
 802af78:	4b09      	ldr	r3, [pc, #36]	; (802afa0 <__swbuf_r+0xa0>)
 802af7a:	429c      	cmp	r4, r3
 802af7c:	bf08      	it	eq
 802af7e:	68ec      	ldreq	r4, [r5, #12]
 802af80:	e7cb      	b.n	802af1a <__swbuf_r+0x1a>
 802af82:	4621      	mov	r1, r4
 802af84:	4628      	mov	r0, r5
 802af86:	f000 f80d 	bl	802afa4 <__swsetup_r>
 802af8a:	2800      	cmp	r0, #0
 802af8c:	d0cc      	beq.n	802af28 <__swbuf_r+0x28>
 802af8e:	f04f 37ff 	mov.w	r7, #4294967295
 802af92:	4638      	mov	r0, r7
 802af94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802af96:	bf00      	nop
 802af98:	0802cdfc 	.word	0x0802cdfc
 802af9c:	0802ce1c 	.word	0x0802ce1c
 802afa0:	0802cddc 	.word	0x0802cddc

0802afa4 <__swsetup_r>:
 802afa4:	4b32      	ldr	r3, [pc, #200]	; (802b070 <__swsetup_r+0xcc>)
 802afa6:	b570      	push	{r4, r5, r6, lr}
 802afa8:	681d      	ldr	r5, [r3, #0]
 802afaa:	4606      	mov	r6, r0
 802afac:	460c      	mov	r4, r1
 802afae:	b125      	cbz	r5, 802afba <__swsetup_r+0x16>
 802afb0:	69ab      	ldr	r3, [r5, #24]
 802afb2:	b913      	cbnz	r3, 802afba <__swsetup_r+0x16>
 802afb4:	4628      	mov	r0, r5
 802afb6:	f000 ff97 	bl	802bee8 <__sinit>
 802afba:	4b2e      	ldr	r3, [pc, #184]	; (802b074 <__swsetup_r+0xd0>)
 802afbc:	429c      	cmp	r4, r3
 802afbe:	d10f      	bne.n	802afe0 <__swsetup_r+0x3c>
 802afc0:	686c      	ldr	r4, [r5, #4]
 802afc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802afc6:	b29a      	uxth	r2, r3
 802afc8:	0715      	lsls	r5, r2, #28
 802afca:	d42c      	bmi.n	802b026 <__swsetup_r+0x82>
 802afcc:	06d0      	lsls	r0, r2, #27
 802afce:	d411      	bmi.n	802aff4 <__swsetup_r+0x50>
 802afd0:	2209      	movs	r2, #9
 802afd2:	6032      	str	r2, [r6, #0]
 802afd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802afd8:	81a3      	strh	r3, [r4, #12]
 802afda:	f04f 30ff 	mov.w	r0, #4294967295
 802afde:	e03e      	b.n	802b05e <__swsetup_r+0xba>
 802afe0:	4b25      	ldr	r3, [pc, #148]	; (802b078 <__swsetup_r+0xd4>)
 802afe2:	429c      	cmp	r4, r3
 802afe4:	d101      	bne.n	802afea <__swsetup_r+0x46>
 802afe6:	68ac      	ldr	r4, [r5, #8]
 802afe8:	e7eb      	b.n	802afc2 <__swsetup_r+0x1e>
 802afea:	4b24      	ldr	r3, [pc, #144]	; (802b07c <__swsetup_r+0xd8>)
 802afec:	429c      	cmp	r4, r3
 802afee:	bf08      	it	eq
 802aff0:	68ec      	ldreq	r4, [r5, #12]
 802aff2:	e7e6      	b.n	802afc2 <__swsetup_r+0x1e>
 802aff4:	0751      	lsls	r1, r2, #29
 802aff6:	d512      	bpl.n	802b01e <__swsetup_r+0x7a>
 802aff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802affa:	b141      	cbz	r1, 802b00e <__swsetup_r+0x6a>
 802affc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b000:	4299      	cmp	r1, r3
 802b002:	d002      	beq.n	802b00a <__swsetup_r+0x66>
 802b004:	4630      	mov	r0, r6
 802b006:	f001 fb5d 	bl	802c6c4 <_free_r>
 802b00a:	2300      	movs	r3, #0
 802b00c:	6363      	str	r3, [r4, #52]	; 0x34
 802b00e:	89a3      	ldrh	r3, [r4, #12]
 802b010:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b014:	81a3      	strh	r3, [r4, #12]
 802b016:	2300      	movs	r3, #0
 802b018:	6063      	str	r3, [r4, #4]
 802b01a:	6923      	ldr	r3, [r4, #16]
 802b01c:	6023      	str	r3, [r4, #0]
 802b01e:	89a3      	ldrh	r3, [r4, #12]
 802b020:	f043 0308 	orr.w	r3, r3, #8
 802b024:	81a3      	strh	r3, [r4, #12]
 802b026:	6923      	ldr	r3, [r4, #16]
 802b028:	b94b      	cbnz	r3, 802b03e <__swsetup_r+0x9a>
 802b02a:	89a3      	ldrh	r3, [r4, #12]
 802b02c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b034:	d003      	beq.n	802b03e <__swsetup_r+0x9a>
 802b036:	4621      	mov	r1, r4
 802b038:	4630      	mov	r0, r6
 802b03a:	f001 f811 	bl	802c060 <__smakebuf_r>
 802b03e:	89a2      	ldrh	r2, [r4, #12]
 802b040:	f012 0301 	ands.w	r3, r2, #1
 802b044:	d00c      	beq.n	802b060 <__swsetup_r+0xbc>
 802b046:	2300      	movs	r3, #0
 802b048:	60a3      	str	r3, [r4, #8]
 802b04a:	6963      	ldr	r3, [r4, #20]
 802b04c:	425b      	negs	r3, r3
 802b04e:	61a3      	str	r3, [r4, #24]
 802b050:	6923      	ldr	r3, [r4, #16]
 802b052:	b953      	cbnz	r3, 802b06a <__swsetup_r+0xc6>
 802b054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b058:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802b05c:	d1ba      	bne.n	802afd4 <__swsetup_r+0x30>
 802b05e:	bd70      	pop	{r4, r5, r6, pc}
 802b060:	0792      	lsls	r2, r2, #30
 802b062:	bf58      	it	pl
 802b064:	6963      	ldrpl	r3, [r4, #20]
 802b066:	60a3      	str	r3, [r4, #8]
 802b068:	e7f2      	b.n	802b050 <__swsetup_r+0xac>
 802b06a:	2000      	movs	r0, #0
 802b06c:	e7f7      	b.n	802b05e <__swsetup_r+0xba>
 802b06e:	bf00      	nop
 802b070:	20000010 	.word	0x20000010
 802b074:	0802cdfc 	.word	0x0802cdfc
 802b078:	0802ce1c 	.word	0x0802ce1c
 802b07c:	0802cddc 	.word	0x0802cddc

0802b080 <quorem>:
 802b080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b084:	6903      	ldr	r3, [r0, #16]
 802b086:	690c      	ldr	r4, [r1, #16]
 802b088:	42a3      	cmp	r3, r4
 802b08a:	4680      	mov	r8, r0
 802b08c:	f2c0 8082 	blt.w	802b194 <quorem+0x114>
 802b090:	3c01      	subs	r4, #1
 802b092:	f101 0714 	add.w	r7, r1, #20
 802b096:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 802b09a:	f100 0614 	add.w	r6, r0, #20
 802b09e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 802b0a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 802b0a6:	eb06 030c 	add.w	r3, r6, ip
 802b0aa:	3501      	adds	r5, #1
 802b0ac:	eb07 090c 	add.w	r9, r7, ip
 802b0b0:	9301      	str	r3, [sp, #4]
 802b0b2:	fbb0 f5f5 	udiv	r5, r0, r5
 802b0b6:	b395      	cbz	r5, 802b11e <quorem+0x9e>
 802b0b8:	f04f 0a00 	mov.w	sl, #0
 802b0bc:	4638      	mov	r0, r7
 802b0be:	46b6      	mov	lr, r6
 802b0c0:	46d3      	mov	fp, sl
 802b0c2:	f850 2b04 	ldr.w	r2, [r0], #4
 802b0c6:	b293      	uxth	r3, r2
 802b0c8:	fb05 a303 	mla	r3, r5, r3, sl
 802b0cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802b0d0:	b29b      	uxth	r3, r3
 802b0d2:	ebab 0303 	sub.w	r3, fp, r3
 802b0d6:	0c12      	lsrs	r2, r2, #16
 802b0d8:	f8de b000 	ldr.w	fp, [lr]
 802b0dc:	fb05 a202 	mla	r2, r5, r2, sl
 802b0e0:	fa13 f38b 	uxtah	r3, r3, fp
 802b0e4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 802b0e8:	fa1f fb82 	uxth.w	fp, r2
 802b0ec:	f8de 2000 	ldr.w	r2, [lr]
 802b0f0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 802b0f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802b0f8:	b29b      	uxth	r3, r3
 802b0fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b0fe:	4581      	cmp	r9, r0
 802b100:	ea4f 4b22 	mov.w	fp, r2, asr #16
 802b104:	f84e 3b04 	str.w	r3, [lr], #4
 802b108:	d2db      	bcs.n	802b0c2 <quorem+0x42>
 802b10a:	f856 300c 	ldr.w	r3, [r6, ip]
 802b10e:	b933      	cbnz	r3, 802b11e <quorem+0x9e>
 802b110:	9b01      	ldr	r3, [sp, #4]
 802b112:	3b04      	subs	r3, #4
 802b114:	429e      	cmp	r6, r3
 802b116:	461a      	mov	r2, r3
 802b118:	d330      	bcc.n	802b17c <quorem+0xfc>
 802b11a:	f8c8 4010 	str.w	r4, [r8, #16]
 802b11e:	4640      	mov	r0, r8
 802b120:	f001 f9fc 	bl	802c51c <__mcmp>
 802b124:	2800      	cmp	r0, #0
 802b126:	db25      	blt.n	802b174 <quorem+0xf4>
 802b128:	3501      	adds	r5, #1
 802b12a:	4630      	mov	r0, r6
 802b12c:	f04f 0c00 	mov.w	ip, #0
 802b130:	f857 2b04 	ldr.w	r2, [r7], #4
 802b134:	f8d0 e000 	ldr.w	lr, [r0]
 802b138:	b293      	uxth	r3, r2
 802b13a:	ebac 0303 	sub.w	r3, ip, r3
 802b13e:	0c12      	lsrs	r2, r2, #16
 802b140:	fa13 f38e 	uxtah	r3, r3, lr
 802b144:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802b148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802b14c:	b29b      	uxth	r3, r3
 802b14e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b152:	45b9      	cmp	r9, r7
 802b154:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802b158:	f840 3b04 	str.w	r3, [r0], #4
 802b15c:	d2e8      	bcs.n	802b130 <quorem+0xb0>
 802b15e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 802b162:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 802b166:	b92a      	cbnz	r2, 802b174 <quorem+0xf4>
 802b168:	3b04      	subs	r3, #4
 802b16a:	429e      	cmp	r6, r3
 802b16c:	461a      	mov	r2, r3
 802b16e:	d30b      	bcc.n	802b188 <quorem+0x108>
 802b170:	f8c8 4010 	str.w	r4, [r8, #16]
 802b174:	4628      	mov	r0, r5
 802b176:	b003      	add	sp, #12
 802b178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b17c:	6812      	ldr	r2, [r2, #0]
 802b17e:	3b04      	subs	r3, #4
 802b180:	2a00      	cmp	r2, #0
 802b182:	d1ca      	bne.n	802b11a <quorem+0x9a>
 802b184:	3c01      	subs	r4, #1
 802b186:	e7c5      	b.n	802b114 <quorem+0x94>
 802b188:	6812      	ldr	r2, [r2, #0]
 802b18a:	3b04      	subs	r3, #4
 802b18c:	2a00      	cmp	r2, #0
 802b18e:	d1ef      	bne.n	802b170 <quorem+0xf0>
 802b190:	3c01      	subs	r4, #1
 802b192:	e7ea      	b.n	802b16a <quorem+0xea>
 802b194:	2000      	movs	r0, #0
 802b196:	e7ee      	b.n	802b176 <quorem+0xf6>

0802b198 <_dtoa_r>:
 802b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b19c:	ec57 6b10 	vmov	r6, r7, d0
 802b1a0:	b097      	sub	sp, #92	; 0x5c
 802b1a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802b1a4:	9106      	str	r1, [sp, #24]
 802b1a6:	4604      	mov	r4, r0
 802b1a8:	920b      	str	r2, [sp, #44]	; 0x2c
 802b1aa:	9312      	str	r3, [sp, #72]	; 0x48
 802b1ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802b1b0:	e9cd 6700 	strd	r6, r7, [sp]
 802b1b4:	b93d      	cbnz	r5, 802b1c6 <_dtoa_r+0x2e>
 802b1b6:	2010      	movs	r0, #16
 802b1b8:	f000 ff92 	bl	802c0e0 <malloc>
 802b1bc:	6260      	str	r0, [r4, #36]	; 0x24
 802b1be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802b1c2:	6005      	str	r5, [r0, #0]
 802b1c4:	60c5      	str	r5, [r0, #12]
 802b1c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b1c8:	6819      	ldr	r1, [r3, #0]
 802b1ca:	b151      	cbz	r1, 802b1e2 <_dtoa_r+0x4a>
 802b1cc:	685a      	ldr	r2, [r3, #4]
 802b1ce:	604a      	str	r2, [r1, #4]
 802b1d0:	2301      	movs	r3, #1
 802b1d2:	4093      	lsls	r3, r2
 802b1d4:	608b      	str	r3, [r1, #8]
 802b1d6:	4620      	mov	r0, r4
 802b1d8:	f000 ffbe 	bl	802c158 <_Bfree>
 802b1dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b1de:	2200      	movs	r2, #0
 802b1e0:	601a      	str	r2, [r3, #0]
 802b1e2:	1e3b      	subs	r3, r7, #0
 802b1e4:	bfbb      	ittet	lt
 802b1e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802b1ea:	9301      	strlt	r3, [sp, #4]
 802b1ec:	2300      	movge	r3, #0
 802b1ee:	2201      	movlt	r2, #1
 802b1f0:	bfac      	ite	ge
 802b1f2:	f8c8 3000 	strge.w	r3, [r8]
 802b1f6:	f8c8 2000 	strlt.w	r2, [r8]
 802b1fa:	4baf      	ldr	r3, [pc, #700]	; (802b4b8 <_dtoa_r+0x320>)
 802b1fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802b200:	ea33 0308 	bics.w	r3, r3, r8
 802b204:	d114      	bne.n	802b230 <_dtoa_r+0x98>
 802b206:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b208:	f242 730f 	movw	r3, #9999	; 0x270f
 802b20c:	6013      	str	r3, [r2, #0]
 802b20e:	9b00      	ldr	r3, [sp, #0]
 802b210:	b923      	cbnz	r3, 802b21c <_dtoa_r+0x84>
 802b212:	f3c8 0013 	ubfx	r0, r8, #0, #20
 802b216:	2800      	cmp	r0, #0
 802b218:	f000 8542 	beq.w	802bca0 <_dtoa_r+0xb08>
 802b21c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b21e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 802b4cc <_dtoa_r+0x334>
 802b222:	2b00      	cmp	r3, #0
 802b224:	f000 8544 	beq.w	802bcb0 <_dtoa_r+0xb18>
 802b228:	f10b 0303 	add.w	r3, fp, #3
 802b22c:	f000 bd3e 	b.w	802bcac <_dtoa_r+0xb14>
 802b230:	e9dd 6700 	ldrd	r6, r7, [sp]
 802b234:	2200      	movs	r2, #0
 802b236:	2300      	movs	r3, #0
 802b238:	4630      	mov	r0, r6
 802b23a:	4639      	mov	r1, r7
 802b23c:	f7f5 fb7c 	bl	8020938 <__aeabi_dcmpeq>
 802b240:	4681      	mov	r9, r0
 802b242:	b168      	cbz	r0, 802b260 <_dtoa_r+0xc8>
 802b244:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b246:	2301      	movs	r3, #1
 802b248:	6013      	str	r3, [r2, #0]
 802b24a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b24c:	2b00      	cmp	r3, #0
 802b24e:	f000 8524 	beq.w	802bc9a <_dtoa_r+0xb02>
 802b252:	4b9a      	ldr	r3, [pc, #616]	; (802b4bc <_dtoa_r+0x324>)
 802b254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802b256:	f103 3bff 	add.w	fp, r3, #4294967295
 802b25a:	6013      	str	r3, [r2, #0]
 802b25c:	f000 bd28 	b.w	802bcb0 <_dtoa_r+0xb18>
 802b260:	aa14      	add	r2, sp, #80	; 0x50
 802b262:	a915      	add	r1, sp, #84	; 0x54
 802b264:	ec47 6b10 	vmov	d0, r6, r7
 802b268:	4620      	mov	r0, r4
 802b26a:	f001 f9ce 	bl	802c60a <__d2b>
 802b26e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802b272:	9004      	str	r0, [sp, #16]
 802b274:	2d00      	cmp	r5, #0
 802b276:	d07c      	beq.n	802b372 <_dtoa_r+0x1da>
 802b278:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802b27c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 802b280:	46b2      	mov	sl, r6
 802b282:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 802b286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802b28a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 802b28e:	2200      	movs	r2, #0
 802b290:	4b8b      	ldr	r3, [pc, #556]	; (802b4c0 <_dtoa_r+0x328>)
 802b292:	4650      	mov	r0, sl
 802b294:	4659      	mov	r1, fp
 802b296:	f7f4 ff2f 	bl	80200f8 <__aeabi_dsub>
 802b29a:	a381      	add	r3, pc, #516	; (adr r3, 802b4a0 <_dtoa_r+0x308>)
 802b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b2a0:	f7f5 f8e2 	bl	8020468 <__aeabi_dmul>
 802b2a4:	a380      	add	r3, pc, #512	; (adr r3, 802b4a8 <_dtoa_r+0x310>)
 802b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b2aa:	f7f4 ff27 	bl	80200fc <__adddf3>
 802b2ae:	4606      	mov	r6, r0
 802b2b0:	4628      	mov	r0, r5
 802b2b2:	460f      	mov	r7, r1
 802b2b4:	f7f5 f86e 	bl	8020394 <__aeabi_i2d>
 802b2b8:	a37d      	add	r3, pc, #500	; (adr r3, 802b4b0 <_dtoa_r+0x318>)
 802b2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b2be:	f7f5 f8d3 	bl	8020468 <__aeabi_dmul>
 802b2c2:	4602      	mov	r2, r0
 802b2c4:	460b      	mov	r3, r1
 802b2c6:	4630      	mov	r0, r6
 802b2c8:	4639      	mov	r1, r7
 802b2ca:	f7f4 ff17 	bl	80200fc <__adddf3>
 802b2ce:	4606      	mov	r6, r0
 802b2d0:	460f      	mov	r7, r1
 802b2d2:	f7f5 fb79 	bl	80209c8 <__aeabi_d2iz>
 802b2d6:	2200      	movs	r2, #0
 802b2d8:	4682      	mov	sl, r0
 802b2da:	2300      	movs	r3, #0
 802b2dc:	4630      	mov	r0, r6
 802b2de:	4639      	mov	r1, r7
 802b2e0:	f7f5 fb34 	bl	802094c <__aeabi_dcmplt>
 802b2e4:	b148      	cbz	r0, 802b2fa <_dtoa_r+0x162>
 802b2e6:	4650      	mov	r0, sl
 802b2e8:	f7f5 f854 	bl	8020394 <__aeabi_i2d>
 802b2ec:	4632      	mov	r2, r6
 802b2ee:	463b      	mov	r3, r7
 802b2f0:	f7f5 fb22 	bl	8020938 <__aeabi_dcmpeq>
 802b2f4:	b908      	cbnz	r0, 802b2fa <_dtoa_r+0x162>
 802b2f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 802b2fa:	f1ba 0f16 	cmp.w	sl, #22
 802b2fe:	d859      	bhi.n	802b3b4 <_dtoa_r+0x21c>
 802b300:	4970      	ldr	r1, [pc, #448]	; (802b4c4 <_dtoa_r+0x32c>)
 802b302:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 802b306:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b30a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802b30e:	f7f5 fb3b 	bl	8020988 <__aeabi_dcmpgt>
 802b312:	2800      	cmp	r0, #0
 802b314:	d050      	beq.n	802b3b8 <_dtoa_r+0x220>
 802b316:	f10a 3aff 	add.w	sl, sl, #4294967295
 802b31a:	2300      	movs	r3, #0
 802b31c:	930f      	str	r3, [sp, #60]	; 0x3c
 802b31e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b320:	1b5d      	subs	r5, r3, r5
 802b322:	f1b5 0801 	subs.w	r8, r5, #1
 802b326:	bf49      	itett	mi
 802b328:	f1c5 0301 	rsbmi	r3, r5, #1
 802b32c:	2300      	movpl	r3, #0
 802b32e:	9305      	strmi	r3, [sp, #20]
 802b330:	f04f 0800 	movmi.w	r8, #0
 802b334:	bf58      	it	pl
 802b336:	9305      	strpl	r3, [sp, #20]
 802b338:	f1ba 0f00 	cmp.w	sl, #0
 802b33c:	db3e      	blt.n	802b3bc <_dtoa_r+0x224>
 802b33e:	2300      	movs	r3, #0
 802b340:	44d0      	add	r8, sl
 802b342:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 802b346:	9307      	str	r3, [sp, #28]
 802b348:	9b06      	ldr	r3, [sp, #24]
 802b34a:	2b09      	cmp	r3, #9
 802b34c:	f200 8090 	bhi.w	802b470 <_dtoa_r+0x2d8>
 802b350:	2b05      	cmp	r3, #5
 802b352:	bfc4      	itt	gt
 802b354:	3b04      	subgt	r3, #4
 802b356:	9306      	strgt	r3, [sp, #24]
 802b358:	9b06      	ldr	r3, [sp, #24]
 802b35a:	f1a3 0302 	sub.w	r3, r3, #2
 802b35e:	bfcc      	ite	gt
 802b360:	2500      	movgt	r5, #0
 802b362:	2501      	movle	r5, #1
 802b364:	2b03      	cmp	r3, #3
 802b366:	f200 808f 	bhi.w	802b488 <_dtoa_r+0x2f0>
 802b36a:	e8df f003 	tbb	[pc, r3]
 802b36e:	7f7d      	.short	0x7f7d
 802b370:	7131      	.short	0x7131
 802b372:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 802b376:	441d      	add	r5, r3
 802b378:	f205 4032 	addw	r0, r5, #1074	; 0x432
 802b37c:	2820      	cmp	r0, #32
 802b37e:	dd13      	ble.n	802b3a8 <_dtoa_r+0x210>
 802b380:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 802b384:	9b00      	ldr	r3, [sp, #0]
 802b386:	fa08 f800 	lsl.w	r8, r8, r0
 802b38a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 802b38e:	fa23 f000 	lsr.w	r0, r3, r0
 802b392:	ea48 0000 	orr.w	r0, r8, r0
 802b396:	f7f4 ffed 	bl	8020374 <__aeabi_ui2d>
 802b39a:	2301      	movs	r3, #1
 802b39c:	4682      	mov	sl, r0
 802b39e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 802b3a2:	3d01      	subs	r5, #1
 802b3a4:	9313      	str	r3, [sp, #76]	; 0x4c
 802b3a6:	e772      	b.n	802b28e <_dtoa_r+0xf6>
 802b3a8:	9b00      	ldr	r3, [sp, #0]
 802b3aa:	f1c0 0020 	rsb	r0, r0, #32
 802b3ae:	fa03 f000 	lsl.w	r0, r3, r0
 802b3b2:	e7f0      	b.n	802b396 <_dtoa_r+0x1fe>
 802b3b4:	2301      	movs	r3, #1
 802b3b6:	e7b1      	b.n	802b31c <_dtoa_r+0x184>
 802b3b8:	900f      	str	r0, [sp, #60]	; 0x3c
 802b3ba:	e7b0      	b.n	802b31e <_dtoa_r+0x186>
 802b3bc:	9b05      	ldr	r3, [sp, #20]
 802b3be:	eba3 030a 	sub.w	r3, r3, sl
 802b3c2:	9305      	str	r3, [sp, #20]
 802b3c4:	f1ca 0300 	rsb	r3, sl, #0
 802b3c8:	9307      	str	r3, [sp, #28]
 802b3ca:	2300      	movs	r3, #0
 802b3cc:	930e      	str	r3, [sp, #56]	; 0x38
 802b3ce:	e7bb      	b.n	802b348 <_dtoa_r+0x1b0>
 802b3d0:	2301      	movs	r3, #1
 802b3d2:	930a      	str	r3, [sp, #40]	; 0x28
 802b3d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802b3d6:	2b00      	cmp	r3, #0
 802b3d8:	dd59      	ble.n	802b48e <_dtoa_r+0x2f6>
 802b3da:	9302      	str	r3, [sp, #8]
 802b3dc:	4699      	mov	r9, r3
 802b3de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802b3e0:	2200      	movs	r2, #0
 802b3e2:	6072      	str	r2, [r6, #4]
 802b3e4:	2204      	movs	r2, #4
 802b3e6:	f102 0014 	add.w	r0, r2, #20
 802b3ea:	4298      	cmp	r0, r3
 802b3ec:	6871      	ldr	r1, [r6, #4]
 802b3ee:	d953      	bls.n	802b498 <_dtoa_r+0x300>
 802b3f0:	4620      	mov	r0, r4
 802b3f2:	f000 fe7d 	bl	802c0f0 <_Balloc>
 802b3f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b3f8:	6030      	str	r0, [r6, #0]
 802b3fa:	f1b9 0f0e 	cmp.w	r9, #14
 802b3fe:	f8d3 b000 	ldr.w	fp, [r3]
 802b402:	f200 80e6 	bhi.w	802b5d2 <_dtoa_r+0x43a>
 802b406:	2d00      	cmp	r5, #0
 802b408:	f000 80e3 	beq.w	802b5d2 <_dtoa_r+0x43a>
 802b40c:	ed9d 7b00 	vldr	d7, [sp]
 802b410:	f1ba 0f00 	cmp.w	sl, #0
 802b414:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 802b418:	dd74      	ble.n	802b504 <_dtoa_r+0x36c>
 802b41a:	4a2a      	ldr	r2, [pc, #168]	; (802b4c4 <_dtoa_r+0x32c>)
 802b41c:	f00a 030f 	and.w	r3, sl, #15
 802b420:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802b424:	ed93 7b00 	vldr	d7, [r3]
 802b428:	ea4f 162a 	mov.w	r6, sl, asr #4
 802b42c:	06f0      	lsls	r0, r6, #27
 802b42e:	ed8d 7b08 	vstr	d7, [sp, #32]
 802b432:	d565      	bpl.n	802b500 <_dtoa_r+0x368>
 802b434:	4b24      	ldr	r3, [pc, #144]	; (802b4c8 <_dtoa_r+0x330>)
 802b436:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802b43a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802b43e:	f7f5 f93d 	bl	80206bc <__aeabi_ddiv>
 802b442:	e9cd 0100 	strd	r0, r1, [sp]
 802b446:	f006 060f 	and.w	r6, r6, #15
 802b44a:	2503      	movs	r5, #3
 802b44c:	4f1e      	ldr	r7, [pc, #120]	; (802b4c8 <_dtoa_r+0x330>)
 802b44e:	e04c      	b.n	802b4ea <_dtoa_r+0x352>
 802b450:	2301      	movs	r3, #1
 802b452:	930a      	str	r3, [sp, #40]	; 0x28
 802b454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802b456:	4453      	add	r3, sl
 802b458:	f103 0901 	add.w	r9, r3, #1
 802b45c:	9302      	str	r3, [sp, #8]
 802b45e:	464b      	mov	r3, r9
 802b460:	2b01      	cmp	r3, #1
 802b462:	bfb8      	it	lt
 802b464:	2301      	movlt	r3, #1
 802b466:	e7ba      	b.n	802b3de <_dtoa_r+0x246>
 802b468:	2300      	movs	r3, #0
 802b46a:	e7b2      	b.n	802b3d2 <_dtoa_r+0x23a>
 802b46c:	2300      	movs	r3, #0
 802b46e:	e7f0      	b.n	802b452 <_dtoa_r+0x2ba>
 802b470:	2501      	movs	r5, #1
 802b472:	2300      	movs	r3, #0
 802b474:	9306      	str	r3, [sp, #24]
 802b476:	950a      	str	r5, [sp, #40]	; 0x28
 802b478:	f04f 33ff 	mov.w	r3, #4294967295
 802b47c:	9302      	str	r3, [sp, #8]
 802b47e:	4699      	mov	r9, r3
 802b480:	2200      	movs	r2, #0
 802b482:	2312      	movs	r3, #18
 802b484:	920b      	str	r2, [sp, #44]	; 0x2c
 802b486:	e7aa      	b.n	802b3de <_dtoa_r+0x246>
 802b488:	2301      	movs	r3, #1
 802b48a:	930a      	str	r3, [sp, #40]	; 0x28
 802b48c:	e7f4      	b.n	802b478 <_dtoa_r+0x2e0>
 802b48e:	2301      	movs	r3, #1
 802b490:	9302      	str	r3, [sp, #8]
 802b492:	4699      	mov	r9, r3
 802b494:	461a      	mov	r2, r3
 802b496:	e7f5      	b.n	802b484 <_dtoa_r+0x2ec>
 802b498:	3101      	adds	r1, #1
 802b49a:	6071      	str	r1, [r6, #4]
 802b49c:	0052      	lsls	r2, r2, #1
 802b49e:	e7a2      	b.n	802b3e6 <_dtoa_r+0x24e>
 802b4a0:	636f4361 	.word	0x636f4361
 802b4a4:	3fd287a7 	.word	0x3fd287a7
 802b4a8:	8b60c8b3 	.word	0x8b60c8b3
 802b4ac:	3fc68a28 	.word	0x3fc68a28
 802b4b0:	509f79fb 	.word	0x509f79fb
 802b4b4:	3fd34413 	.word	0x3fd34413
 802b4b8:	7ff00000 	.word	0x7ff00000
 802b4bc:	0802cda9 	.word	0x0802cda9
 802b4c0:	3ff80000 	.word	0x3ff80000
 802b4c4:	0802ce68 	.word	0x0802ce68
 802b4c8:	0802ce40 	.word	0x0802ce40
 802b4cc:	0802cdd5 	.word	0x0802cdd5
 802b4d0:	07f1      	lsls	r1, r6, #31
 802b4d2:	d508      	bpl.n	802b4e6 <_dtoa_r+0x34e>
 802b4d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802b4d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 802b4dc:	f7f4 ffc4 	bl	8020468 <__aeabi_dmul>
 802b4e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802b4e4:	3501      	adds	r5, #1
 802b4e6:	1076      	asrs	r6, r6, #1
 802b4e8:	3708      	adds	r7, #8
 802b4ea:	2e00      	cmp	r6, #0
 802b4ec:	d1f0      	bne.n	802b4d0 <_dtoa_r+0x338>
 802b4ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802b4f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b4f6:	f7f5 f8e1 	bl	80206bc <__aeabi_ddiv>
 802b4fa:	e9cd 0100 	strd	r0, r1, [sp]
 802b4fe:	e01a      	b.n	802b536 <_dtoa_r+0x39e>
 802b500:	2502      	movs	r5, #2
 802b502:	e7a3      	b.n	802b44c <_dtoa_r+0x2b4>
 802b504:	f000 80a0 	beq.w	802b648 <_dtoa_r+0x4b0>
 802b508:	f1ca 0600 	rsb	r6, sl, #0
 802b50c:	4b9f      	ldr	r3, [pc, #636]	; (802b78c <_dtoa_r+0x5f4>)
 802b50e:	4fa0      	ldr	r7, [pc, #640]	; (802b790 <_dtoa_r+0x5f8>)
 802b510:	f006 020f 	and.w	r2, r6, #15
 802b514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802b518:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b51c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802b520:	f7f4 ffa2 	bl	8020468 <__aeabi_dmul>
 802b524:	e9cd 0100 	strd	r0, r1, [sp]
 802b528:	1136      	asrs	r6, r6, #4
 802b52a:	2300      	movs	r3, #0
 802b52c:	2502      	movs	r5, #2
 802b52e:	2e00      	cmp	r6, #0
 802b530:	d17f      	bne.n	802b632 <_dtoa_r+0x49a>
 802b532:	2b00      	cmp	r3, #0
 802b534:	d1e1      	bne.n	802b4fa <_dtoa_r+0x362>
 802b536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b538:	2b00      	cmp	r3, #0
 802b53a:	f000 8087 	beq.w	802b64c <_dtoa_r+0x4b4>
 802b53e:	e9dd 6700 	ldrd	r6, r7, [sp]
 802b542:	2200      	movs	r2, #0
 802b544:	4b93      	ldr	r3, [pc, #588]	; (802b794 <_dtoa_r+0x5fc>)
 802b546:	4630      	mov	r0, r6
 802b548:	4639      	mov	r1, r7
 802b54a:	f7f5 f9ff 	bl	802094c <__aeabi_dcmplt>
 802b54e:	2800      	cmp	r0, #0
 802b550:	d07c      	beq.n	802b64c <_dtoa_r+0x4b4>
 802b552:	f1b9 0f00 	cmp.w	r9, #0
 802b556:	d079      	beq.n	802b64c <_dtoa_r+0x4b4>
 802b558:	9b02      	ldr	r3, [sp, #8]
 802b55a:	2b00      	cmp	r3, #0
 802b55c:	dd35      	ble.n	802b5ca <_dtoa_r+0x432>
 802b55e:	f10a 33ff 	add.w	r3, sl, #4294967295
 802b562:	9308      	str	r3, [sp, #32]
 802b564:	4639      	mov	r1, r7
 802b566:	2200      	movs	r2, #0
 802b568:	4b8b      	ldr	r3, [pc, #556]	; (802b798 <_dtoa_r+0x600>)
 802b56a:	4630      	mov	r0, r6
 802b56c:	f7f4 ff7c 	bl	8020468 <__aeabi_dmul>
 802b570:	e9cd 0100 	strd	r0, r1, [sp]
 802b574:	9f02      	ldr	r7, [sp, #8]
 802b576:	3501      	adds	r5, #1
 802b578:	4628      	mov	r0, r5
 802b57a:	f7f4 ff0b 	bl	8020394 <__aeabi_i2d>
 802b57e:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b582:	f7f4 ff71 	bl	8020468 <__aeabi_dmul>
 802b586:	2200      	movs	r2, #0
 802b588:	4b84      	ldr	r3, [pc, #528]	; (802b79c <_dtoa_r+0x604>)
 802b58a:	f7f4 fdb7 	bl	80200fc <__adddf3>
 802b58e:	4605      	mov	r5, r0
 802b590:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 802b594:	2f00      	cmp	r7, #0
 802b596:	d15d      	bne.n	802b654 <_dtoa_r+0x4bc>
 802b598:	2200      	movs	r2, #0
 802b59a:	4b81      	ldr	r3, [pc, #516]	; (802b7a0 <_dtoa_r+0x608>)
 802b59c:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b5a0:	f7f4 fdaa 	bl	80200f8 <__aeabi_dsub>
 802b5a4:	462a      	mov	r2, r5
 802b5a6:	4633      	mov	r3, r6
 802b5a8:	e9cd 0100 	strd	r0, r1, [sp]
 802b5ac:	f7f5 f9ec 	bl	8020988 <__aeabi_dcmpgt>
 802b5b0:	2800      	cmp	r0, #0
 802b5b2:	f040 8288 	bne.w	802bac6 <_dtoa_r+0x92e>
 802b5b6:	462a      	mov	r2, r5
 802b5b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 802b5bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b5c0:	f7f5 f9c4 	bl	802094c <__aeabi_dcmplt>
 802b5c4:	2800      	cmp	r0, #0
 802b5c6:	f040 827c 	bne.w	802bac2 <_dtoa_r+0x92a>
 802b5ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802b5ce:	e9cd 2300 	strd	r2, r3, [sp]
 802b5d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802b5d4:	2b00      	cmp	r3, #0
 802b5d6:	f2c0 8150 	blt.w	802b87a <_dtoa_r+0x6e2>
 802b5da:	f1ba 0f0e 	cmp.w	sl, #14
 802b5de:	f300 814c 	bgt.w	802b87a <_dtoa_r+0x6e2>
 802b5e2:	4b6a      	ldr	r3, [pc, #424]	; (802b78c <_dtoa_r+0x5f4>)
 802b5e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802b5e8:	ed93 7b00 	vldr	d7, [r3]
 802b5ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802b5ee:	2b00      	cmp	r3, #0
 802b5f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 802b5f4:	f280 80d8 	bge.w	802b7a8 <_dtoa_r+0x610>
 802b5f8:	f1b9 0f00 	cmp.w	r9, #0
 802b5fc:	f300 80d4 	bgt.w	802b7a8 <_dtoa_r+0x610>
 802b600:	f040 825e 	bne.w	802bac0 <_dtoa_r+0x928>
 802b604:	2200      	movs	r2, #0
 802b606:	4b66      	ldr	r3, [pc, #408]	; (802b7a0 <_dtoa_r+0x608>)
 802b608:	ec51 0b17 	vmov	r0, r1, d7
 802b60c:	f7f4 ff2c 	bl	8020468 <__aeabi_dmul>
 802b610:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b614:	f7f5 f9ae 	bl	8020974 <__aeabi_dcmpge>
 802b618:	464f      	mov	r7, r9
 802b61a:	464e      	mov	r6, r9
 802b61c:	2800      	cmp	r0, #0
 802b61e:	f040 8234 	bne.w	802ba8a <_dtoa_r+0x8f2>
 802b622:	2331      	movs	r3, #49	; 0x31
 802b624:	f10b 0501 	add.w	r5, fp, #1
 802b628:	f88b 3000 	strb.w	r3, [fp]
 802b62c:	f10a 0a01 	add.w	sl, sl, #1
 802b630:	e22f      	b.n	802ba92 <_dtoa_r+0x8fa>
 802b632:	07f2      	lsls	r2, r6, #31
 802b634:	d505      	bpl.n	802b642 <_dtoa_r+0x4aa>
 802b636:	e9d7 2300 	ldrd	r2, r3, [r7]
 802b63a:	f7f4 ff15 	bl	8020468 <__aeabi_dmul>
 802b63e:	3501      	adds	r5, #1
 802b640:	2301      	movs	r3, #1
 802b642:	1076      	asrs	r6, r6, #1
 802b644:	3708      	adds	r7, #8
 802b646:	e772      	b.n	802b52e <_dtoa_r+0x396>
 802b648:	2502      	movs	r5, #2
 802b64a:	e774      	b.n	802b536 <_dtoa_r+0x39e>
 802b64c:	f8cd a020 	str.w	sl, [sp, #32]
 802b650:	464f      	mov	r7, r9
 802b652:	e791      	b.n	802b578 <_dtoa_r+0x3e0>
 802b654:	4b4d      	ldr	r3, [pc, #308]	; (802b78c <_dtoa_r+0x5f4>)
 802b656:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802b65a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 802b65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b660:	2b00      	cmp	r3, #0
 802b662:	d047      	beq.n	802b6f4 <_dtoa_r+0x55c>
 802b664:	4602      	mov	r2, r0
 802b666:	460b      	mov	r3, r1
 802b668:	2000      	movs	r0, #0
 802b66a:	494e      	ldr	r1, [pc, #312]	; (802b7a4 <_dtoa_r+0x60c>)
 802b66c:	f7f5 f826 	bl	80206bc <__aeabi_ddiv>
 802b670:	462a      	mov	r2, r5
 802b672:	4633      	mov	r3, r6
 802b674:	f7f4 fd40 	bl	80200f8 <__aeabi_dsub>
 802b678:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802b67c:	465d      	mov	r5, fp
 802b67e:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b682:	f7f5 f9a1 	bl	80209c8 <__aeabi_d2iz>
 802b686:	4606      	mov	r6, r0
 802b688:	f7f4 fe84 	bl	8020394 <__aeabi_i2d>
 802b68c:	4602      	mov	r2, r0
 802b68e:	460b      	mov	r3, r1
 802b690:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b694:	f7f4 fd30 	bl	80200f8 <__aeabi_dsub>
 802b698:	3630      	adds	r6, #48	; 0x30
 802b69a:	f805 6b01 	strb.w	r6, [r5], #1
 802b69e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802b6a2:	e9cd 0100 	strd	r0, r1, [sp]
 802b6a6:	f7f5 f951 	bl	802094c <__aeabi_dcmplt>
 802b6aa:	2800      	cmp	r0, #0
 802b6ac:	d163      	bne.n	802b776 <_dtoa_r+0x5de>
 802b6ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b6b2:	2000      	movs	r0, #0
 802b6b4:	4937      	ldr	r1, [pc, #220]	; (802b794 <_dtoa_r+0x5fc>)
 802b6b6:	f7f4 fd1f 	bl	80200f8 <__aeabi_dsub>
 802b6ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802b6be:	f7f5 f945 	bl	802094c <__aeabi_dcmplt>
 802b6c2:	2800      	cmp	r0, #0
 802b6c4:	f040 80b7 	bne.w	802b836 <_dtoa_r+0x69e>
 802b6c8:	eba5 030b 	sub.w	r3, r5, fp
 802b6cc:	429f      	cmp	r7, r3
 802b6ce:	f77f af7c 	ble.w	802b5ca <_dtoa_r+0x432>
 802b6d2:	2200      	movs	r2, #0
 802b6d4:	4b30      	ldr	r3, [pc, #192]	; (802b798 <_dtoa_r+0x600>)
 802b6d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802b6da:	f7f4 fec5 	bl	8020468 <__aeabi_dmul>
 802b6de:	2200      	movs	r2, #0
 802b6e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802b6e4:	4b2c      	ldr	r3, [pc, #176]	; (802b798 <_dtoa_r+0x600>)
 802b6e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b6ea:	f7f4 febd 	bl	8020468 <__aeabi_dmul>
 802b6ee:	e9cd 0100 	strd	r0, r1, [sp]
 802b6f2:	e7c4      	b.n	802b67e <_dtoa_r+0x4e6>
 802b6f4:	462a      	mov	r2, r5
 802b6f6:	4633      	mov	r3, r6
 802b6f8:	f7f4 feb6 	bl	8020468 <__aeabi_dmul>
 802b6fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802b700:	eb0b 0507 	add.w	r5, fp, r7
 802b704:	465e      	mov	r6, fp
 802b706:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b70a:	f7f5 f95d 	bl	80209c8 <__aeabi_d2iz>
 802b70e:	4607      	mov	r7, r0
 802b710:	f7f4 fe40 	bl	8020394 <__aeabi_i2d>
 802b714:	3730      	adds	r7, #48	; 0x30
 802b716:	4602      	mov	r2, r0
 802b718:	460b      	mov	r3, r1
 802b71a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b71e:	f7f4 fceb 	bl	80200f8 <__aeabi_dsub>
 802b722:	f806 7b01 	strb.w	r7, [r6], #1
 802b726:	42ae      	cmp	r6, r5
 802b728:	e9cd 0100 	strd	r0, r1, [sp]
 802b72c:	f04f 0200 	mov.w	r2, #0
 802b730:	d126      	bne.n	802b780 <_dtoa_r+0x5e8>
 802b732:	4b1c      	ldr	r3, [pc, #112]	; (802b7a4 <_dtoa_r+0x60c>)
 802b734:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802b738:	f7f4 fce0 	bl	80200fc <__adddf3>
 802b73c:	4602      	mov	r2, r0
 802b73e:	460b      	mov	r3, r1
 802b740:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b744:	f7f5 f920 	bl	8020988 <__aeabi_dcmpgt>
 802b748:	2800      	cmp	r0, #0
 802b74a:	d174      	bne.n	802b836 <_dtoa_r+0x69e>
 802b74c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802b750:	2000      	movs	r0, #0
 802b752:	4914      	ldr	r1, [pc, #80]	; (802b7a4 <_dtoa_r+0x60c>)
 802b754:	f7f4 fcd0 	bl	80200f8 <__aeabi_dsub>
 802b758:	4602      	mov	r2, r0
 802b75a:	460b      	mov	r3, r1
 802b75c:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b760:	f7f5 f8f4 	bl	802094c <__aeabi_dcmplt>
 802b764:	2800      	cmp	r0, #0
 802b766:	f43f af30 	beq.w	802b5ca <_dtoa_r+0x432>
 802b76a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802b76e:	2b30      	cmp	r3, #48	; 0x30
 802b770:	f105 32ff 	add.w	r2, r5, #4294967295
 802b774:	d002      	beq.n	802b77c <_dtoa_r+0x5e4>
 802b776:	f8dd a020 	ldr.w	sl, [sp, #32]
 802b77a:	e04a      	b.n	802b812 <_dtoa_r+0x67a>
 802b77c:	4615      	mov	r5, r2
 802b77e:	e7f4      	b.n	802b76a <_dtoa_r+0x5d2>
 802b780:	4b05      	ldr	r3, [pc, #20]	; (802b798 <_dtoa_r+0x600>)
 802b782:	f7f4 fe71 	bl	8020468 <__aeabi_dmul>
 802b786:	e9cd 0100 	strd	r0, r1, [sp]
 802b78a:	e7bc      	b.n	802b706 <_dtoa_r+0x56e>
 802b78c:	0802ce68 	.word	0x0802ce68
 802b790:	0802ce40 	.word	0x0802ce40
 802b794:	3ff00000 	.word	0x3ff00000
 802b798:	40240000 	.word	0x40240000
 802b79c:	401c0000 	.word	0x401c0000
 802b7a0:	40140000 	.word	0x40140000
 802b7a4:	3fe00000 	.word	0x3fe00000
 802b7a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 802b7ac:	465d      	mov	r5, fp
 802b7ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b7b2:	4630      	mov	r0, r6
 802b7b4:	4639      	mov	r1, r7
 802b7b6:	f7f4 ff81 	bl	80206bc <__aeabi_ddiv>
 802b7ba:	f7f5 f905 	bl	80209c8 <__aeabi_d2iz>
 802b7be:	4680      	mov	r8, r0
 802b7c0:	f7f4 fde8 	bl	8020394 <__aeabi_i2d>
 802b7c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b7c8:	f7f4 fe4e 	bl	8020468 <__aeabi_dmul>
 802b7cc:	4602      	mov	r2, r0
 802b7ce:	460b      	mov	r3, r1
 802b7d0:	4630      	mov	r0, r6
 802b7d2:	4639      	mov	r1, r7
 802b7d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 802b7d8:	f7f4 fc8e 	bl	80200f8 <__aeabi_dsub>
 802b7dc:	f805 6b01 	strb.w	r6, [r5], #1
 802b7e0:	eba5 060b 	sub.w	r6, r5, fp
 802b7e4:	45b1      	cmp	r9, r6
 802b7e6:	4602      	mov	r2, r0
 802b7e8:	460b      	mov	r3, r1
 802b7ea:	d139      	bne.n	802b860 <_dtoa_r+0x6c8>
 802b7ec:	f7f4 fc86 	bl	80200fc <__adddf3>
 802b7f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b7f4:	4606      	mov	r6, r0
 802b7f6:	460f      	mov	r7, r1
 802b7f8:	f7f5 f8c6 	bl	8020988 <__aeabi_dcmpgt>
 802b7fc:	b9c8      	cbnz	r0, 802b832 <_dtoa_r+0x69a>
 802b7fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b802:	4630      	mov	r0, r6
 802b804:	4639      	mov	r1, r7
 802b806:	f7f5 f897 	bl	8020938 <__aeabi_dcmpeq>
 802b80a:	b110      	cbz	r0, 802b812 <_dtoa_r+0x67a>
 802b80c:	f018 0f01 	tst.w	r8, #1
 802b810:	d10f      	bne.n	802b832 <_dtoa_r+0x69a>
 802b812:	9904      	ldr	r1, [sp, #16]
 802b814:	4620      	mov	r0, r4
 802b816:	f000 fc9f 	bl	802c158 <_Bfree>
 802b81a:	2300      	movs	r3, #0
 802b81c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b81e:	702b      	strb	r3, [r5, #0]
 802b820:	f10a 0301 	add.w	r3, sl, #1
 802b824:	6013      	str	r3, [r2, #0]
 802b826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b828:	2b00      	cmp	r3, #0
 802b82a:	f000 8241 	beq.w	802bcb0 <_dtoa_r+0xb18>
 802b82e:	601d      	str	r5, [r3, #0]
 802b830:	e23e      	b.n	802bcb0 <_dtoa_r+0xb18>
 802b832:	f8cd a020 	str.w	sl, [sp, #32]
 802b836:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802b83a:	2a39      	cmp	r2, #57	; 0x39
 802b83c:	f105 33ff 	add.w	r3, r5, #4294967295
 802b840:	d108      	bne.n	802b854 <_dtoa_r+0x6bc>
 802b842:	459b      	cmp	fp, r3
 802b844:	d10a      	bne.n	802b85c <_dtoa_r+0x6c4>
 802b846:	9b08      	ldr	r3, [sp, #32]
 802b848:	3301      	adds	r3, #1
 802b84a:	9308      	str	r3, [sp, #32]
 802b84c:	2330      	movs	r3, #48	; 0x30
 802b84e:	f88b 3000 	strb.w	r3, [fp]
 802b852:	465b      	mov	r3, fp
 802b854:	781a      	ldrb	r2, [r3, #0]
 802b856:	3201      	adds	r2, #1
 802b858:	701a      	strb	r2, [r3, #0]
 802b85a:	e78c      	b.n	802b776 <_dtoa_r+0x5de>
 802b85c:	461d      	mov	r5, r3
 802b85e:	e7ea      	b.n	802b836 <_dtoa_r+0x69e>
 802b860:	2200      	movs	r2, #0
 802b862:	4b9b      	ldr	r3, [pc, #620]	; (802bad0 <_dtoa_r+0x938>)
 802b864:	f7f4 fe00 	bl	8020468 <__aeabi_dmul>
 802b868:	2200      	movs	r2, #0
 802b86a:	2300      	movs	r3, #0
 802b86c:	4606      	mov	r6, r0
 802b86e:	460f      	mov	r7, r1
 802b870:	f7f5 f862 	bl	8020938 <__aeabi_dcmpeq>
 802b874:	2800      	cmp	r0, #0
 802b876:	d09a      	beq.n	802b7ae <_dtoa_r+0x616>
 802b878:	e7cb      	b.n	802b812 <_dtoa_r+0x67a>
 802b87a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b87c:	2a00      	cmp	r2, #0
 802b87e:	f000 808b 	beq.w	802b998 <_dtoa_r+0x800>
 802b882:	9a06      	ldr	r2, [sp, #24]
 802b884:	2a01      	cmp	r2, #1
 802b886:	dc6e      	bgt.n	802b966 <_dtoa_r+0x7ce>
 802b888:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b88a:	2a00      	cmp	r2, #0
 802b88c:	d067      	beq.n	802b95e <_dtoa_r+0x7c6>
 802b88e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802b892:	9f07      	ldr	r7, [sp, #28]
 802b894:	9d05      	ldr	r5, [sp, #20]
 802b896:	9a05      	ldr	r2, [sp, #20]
 802b898:	2101      	movs	r1, #1
 802b89a:	441a      	add	r2, r3
 802b89c:	4620      	mov	r0, r4
 802b89e:	9205      	str	r2, [sp, #20]
 802b8a0:	4498      	add	r8, r3
 802b8a2:	f000 fcf9 	bl	802c298 <__i2b>
 802b8a6:	4606      	mov	r6, r0
 802b8a8:	2d00      	cmp	r5, #0
 802b8aa:	dd0c      	ble.n	802b8c6 <_dtoa_r+0x72e>
 802b8ac:	f1b8 0f00 	cmp.w	r8, #0
 802b8b0:	dd09      	ble.n	802b8c6 <_dtoa_r+0x72e>
 802b8b2:	4545      	cmp	r5, r8
 802b8b4:	9a05      	ldr	r2, [sp, #20]
 802b8b6:	462b      	mov	r3, r5
 802b8b8:	bfa8      	it	ge
 802b8ba:	4643      	movge	r3, r8
 802b8bc:	1ad2      	subs	r2, r2, r3
 802b8be:	9205      	str	r2, [sp, #20]
 802b8c0:	1aed      	subs	r5, r5, r3
 802b8c2:	eba8 0803 	sub.w	r8, r8, r3
 802b8c6:	9b07      	ldr	r3, [sp, #28]
 802b8c8:	b1eb      	cbz	r3, 802b906 <_dtoa_r+0x76e>
 802b8ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b8cc:	2b00      	cmp	r3, #0
 802b8ce:	d067      	beq.n	802b9a0 <_dtoa_r+0x808>
 802b8d0:	b18f      	cbz	r7, 802b8f6 <_dtoa_r+0x75e>
 802b8d2:	4631      	mov	r1, r6
 802b8d4:	463a      	mov	r2, r7
 802b8d6:	4620      	mov	r0, r4
 802b8d8:	f000 fd7e 	bl	802c3d8 <__pow5mult>
 802b8dc:	9a04      	ldr	r2, [sp, #16]
 802b8de:	4601      	mov	r1, r0
 802b8e0:	4606      	mov	r6, r0
 802b8e2:	4620      	mov	r0, r4
 802b8e4:	f000 fce1 	bl	802c2aa <__multiply>
 802b8e8:	9904      	ldr	r1, [sp, #16]
 802b8ea:	9008      	str	r0, [sp, #32]
 802b8ec:	4620      	mov	r0, r4
 802b8ee:	f000 fc33 	bl	802c158 <_Bfree>
 802b8f2:	9b08      	ldr	r3, [sp, #32]
 802b8f4:	9304      	str	r3, [sp, #16]
 802b8f6:	9b07      	ldr	r3, [sp, #28]
 802b8f8:	1bda      	subs	r2, r3, r7
 802b8fa:	d004      	beq.n	802b906 <_dtoa_r+0x76e>
 802b8fc:	9904      	ldr	r1, [sp, #16]
 802b8fe:	4620      	mov	r0, r4
 802b900:	f000 fd6a 	bl	802c3d8 <__pow5mult>
 802b904:	9004      	str	r0, [sp, #16]
 802b906:	2101      	movs	r1, #1
 802b908:	4620      	mov	r0, r4
 802b90a:	f000 fcc5 	bl	802c298 <__i2b>
 802b90e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b910:	4607      	mov	r7, r0
 802b912:	2b00      	cmp	r3, #0
 802b914:	f000 81d0 	beq.w	802bcb8 <_dtoa_r+0xb20>
 802b918:	461a      	mov	r2, r3
 802b91a:	4601      	mov	r1, r0
 802b91c:	4620      	mov	r0, r4
 802b91e:	f000 fd5b 	bl	802c3d8 <__pow5mult>
 802b922:	9b06      	ldr	r3, [sp, #24]
 802b924:	2b01      	cmp	r3, #1
 802b926:	4607      	mov	r7, r0
 802b928:	dc40      	bgt.n	802b9ac <_dtoa_r+0x814>
 802b92a:	9b00      	ldr	r3, [sp, #0]
 802b92c:	2b00      	cmp	r3, #0
 802b92e:	d139      	bne.n	802b9a4 <_dtoa_r+0x80c>
 802b930:	9b01      	ldr	r3, [sp, #4]
 802b932:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802b936:	2b00      	cmp	r3, #0
 802b938:	d136      	bne.n	802b9a8 <_dtoa_r+0x810>
 802b93a:	9b01      	ldr	r3, [sp, #4]
 802b93c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b940:	0d1b      	lsrs	r3, r3, #20
 802b942:	051b      	lsls	r3, r3, #20
 802b944:	b12b      	cbz	r3, 802b952 <_dtoa_r+0x7ba>
 802b946:	9b05      	ldr	r3, [sp, #20]
 802b948:	3301      	adds	r3, #1
 802b94a:	9305      	str	r3, [sp, #20]
 802b94c:	f108 0801 	add.w	r8, r8, #1
 802b950:	2301      	movs	r3, #1
 802b952:	9307      	str	r3, [sp, #28]
 802b954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b956:	2b00      	cmp	r3, #0
 802b958:	d12a      	bne.n	802b9b0 <_dtoa_r+0x818>
 802b95a:	2001      	movs	r0, #1
 802b95c:	e030      	b.n	802b9c0 <_dtoa_r+0x828>
 802b95e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b960:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802b964:	e795      	b.n	802b892 <_dtoa_r+0x6fa>
 802b966:	9b07      	ldr	r3, [sp, #28]
 802b968:	f109 37ff 	add.w	r7, r9, #4294967295
 802b96c:	42bb      	cmp	r3, r7
 802b96e:	bfbf      	itttt	lt
 802b970:	9b07      	ldrlt	r3, [sp, #28]
 802b972:	9707      	strlt	r7, [sp, #28]
 802b974:	1afa      	sublt	r2, r7, r3
 802b976:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 802b978:	bfbb      	ittet	lt
 802b97a:	189b      	addlt	r3, r3, r2
 802b97c:	930e      	strlt	r3, [sp, #56]	; 0x38
 802b97e:	1bdf      	subge	r7, r3, r7
 802b980:	2700      	movlt	r7, #0
 802b982:	f1b9 0f00 	cmp.w	r9, #0
 802b986:	bfb5      	itete	lt
 802b988:	9b05      	ldrlt	r3, [sp, #20]
 802b98a:	9d05      	ldrge	r5, [sp, #20]
 802b98c:	eba3 0509 	sublt.w	r5, r3, r9
 802b990:	464b      	movge	r3, r9
 802b992:	bfb8      	it	lt
 802b994:	2300      	movlt	r3, #0
 802b996:	e77e      	b.n	802b896 <_dtoa_r+0x6fe>
 802b998:	9f07      	ldr	r7, [sp, #28]
 802b99a:	9d05      	ldr	r5, [sp, #20]
 802b99c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802b99e:	e783      	b.n	802b8a8 <_dtoa_r+0x710>
 802b9a0:	9a07      	ldr	r2, [sp, #28]
 802b9a2:	e7ab      	b.n	802b8fc <_dtoa_r+0x764>
 802b9a4:	2300      	movs	r3, #0
 802b9a6:	e7d4      	b.n	802b952 <_dtoa_r+0x7ba>
 802b9a8:	9b00      	ldr	r3, [sp, #0]
 802b9aa:	e7d2      	b.n	802b952 <_dtoa_r+0x7ba>
 802b9ac:	2300      	movs	r3, #0
 802b9ae:	9307      	str	r3, [sp, #28]
 802b9b0:	693b      	ldr	r3, [r7, #16]
 802b9b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 802b9b6:	6918      	ldr	r0, [r3, #16]
 802b9b8:	f000 fc20 	bl	802c1fc <__hi0bits>
 802b9bc:	f1c0 0020 	rsb	r0, r0, #32
 802b9c0:	4440      	add	r0, r8
 802b9c2:	f010 001f 	ands.w	r0, r0, #31
 802b9c6:	d047      	beq.n	802ba58 <_dtoa_r+0x8c0>
 802b9c8:	f1c0 0320 	rsb	r3, r0, #32
 802b9cc:	2b04      	cmp	r3, #4
 802b9ce:	dd3b      	ble.n	802ba48 <_dtoa_r+0x8b0>
 802b9d0:	9b05      	ldr	r3, [sp, #20]
 802b9d2:	f1c0 001c 	rsb	r0, r0, #28
 802b9d6:	4403      	add	r3, r0
 802b9d8:	9305      	str	r3, [sp, #20]
 802b9da:	4405      	add	r5, r0
 802b9dc:	4480      	add	r8, r0
 802b9de:	9b05      	ldr	r3, [sp, #20]
 802b9e0:	2b00      	cmp	r3, #0
 802b9e2:	dd05      	ble.n	802b9f0 <_dtoa_r+0x858>
 802b9e4:	461a      	mov	r2, r3
 802b9e6:	9904      	ldr	r1, [sp, #16]
 802b9e8:	4620      	mov	r0, r4
 802b9ea:	f000 fd43 	bl	802c474 <__lshift>
 802b9ee:	9004      	str	r0, [sp, #16]
 802b9f0:	f1b8 0f00 	cmp.w	r8, #0
 802b9f4:	dd05      	ble.n	802ba02 <_dtoa_r+0x86a>
 802b9f6:	4639      	mov	r1, r7
 802b9f8:	4642      	mov	r2, r8
 802b9fa:	4620      	mov	r0, r4
 802b9fc:	f000 fd3a 	bl	802c474 <__lshift>
 802ba00:	4607      	mov	r7, r0
 802ba02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802ba04:	b353      	cbz	r3, 802ba5c <_dtoa_r+0x8c4>
 802ba06:	4639      	mov	r1, r7
 802ba08:	9804      	ldr	r0, [sp, #16]
 802ba0a:	f000 fd87 	bl	802c51c <__mcmp>
 802ba0e:	2800      	cmp	r0, #0
 802ba10:	da24      	bge.n	802ba5c <_dtoa_r+0x8c4>
 802ba12:	2300      	movs	r3, #0
 802ba14:	220a      	movs	r2, #10
 802ba16:	9904      	ldr	r1, [sp, #16]
 802ba18:	4620      	mov	r0, r4
 802ba1a:	f000 fbb4 	bl	802c186 <__multadd>
 802ba1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ba20:	9004      	str	r0, [sp, #16]
 802ba22:	f10a 3aff 	add.w	sl, sl, #4294967295
 802ba26:	2b00      	cmp	r3, #0
 802ba28:	f000 814d 	beq.w	802bcc6 <_dtoa_r+0xb2e>
 802ba2c:	2300      	movs	r3, #0
 802ba2e:	4631      	mov	r1, r6
 802ba30:	220a      	movs	r2, #10
 802ba32:	4620      	mov	r0, r4
 802ba34:	f000 fba7 	bl	802c186 <__multadd>
 802ba38:	9b02      	ldr	r3, [sp, #8]
 802ba3a:	2b00      	cmp	r3, #0
 802ba3c:	4606      	mov	r6, r0
 802ba3e:	dc4f      	bgt.n	802bae0 <_dtoa_r+0x948>
 802ba40:	9b06      	ldr	r3, [sp, #24]
 802ba42:	2b02      	cmp	r3, #2
 802ba44:	dd4c      	ble.n	802bae0 <_dtoa_r+0x948>
 802ba46:	e011      	b.n	802ba6c <_dtoa_r+0x8d4>
 802ba48:	d0c9      	beq.n	802b9de <_dtoa_r+0x846>
 802ba4a:	9a05      	ldr	r2, [sp, #20]
 802ba4c:	331c      	adds	r3, #28
 802ba4e:	441a      	add	r2, r3
 802ba50:	9205      	str	r2, [sp, #20]
 802ba52:	441d      	add	r5, r3
 802ba54:	4498      	add	r8, r3
 802ba56:	e7c2      	b.n	802b9de <_dtoa_r+0x846>
 802ba58:	4603      	mov	r3, r0
 802ba5a:	e7f6      	b.n	802ba4a <_dtoa_r+0x8b2>
 802ba5c:	f1b9 0f00 	cmp.w	r9, #0
 802ba60:	dc38      	bgt.n	802bad4 <_dtoa_r+0x93c>
 802ba62:	9b06      	ldr	r3, [sp, #24]
 802ba64:	2b02      	cmp	r3, #2
 802ba66:	dd35      	ble.n	802bad4 <_dtoa_r+0x93c>
 802ba68:	f8cd 9008 	str.w	r9, [sp, #8]
 802ba6c:	9b02      	ldr	r3, [sp, #8]
 802ba6e:	b963      	cbnz	r3, 802ba8a <_dtoa_r+0x8f2>
 802ba70:	4639      	mov	r1, r7
 802ba72:	2205      	movs	r2, #5
 802ba74:	4620      	mov	r0, r4
 802ba76:	f000 fb86 	bl	802c186 <__multadd>
 802ba7a:	4601      	mov	r1, r0
 802ba7c:	4607      	mov	r7, r0
 802ba7e:	9804      	ldr	r0, [sp, #16]
 802ba80:	f000 fd4c 	bl	802c51c <__mcmp>
 802ba84:	2800      	cmp	r0, #0
 802ba86:	f73f adcc 	bgt.w	802b622 <_dtoa_r+0x48a>
 802ba8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ba8c:	465d      	mov	r5, fp
 802ba8e:	ea6f 0a03 	mvn.w	sl, r3
 802ba92:	f04f 0900 	mov.w	r9, #0
 802ba96:	4639      	mov	r1, r7
 802ba98:	4620      	mov	r0, r4
 802ba9a:	f000 fb5d 	bl	802c158 <_Bfree>
 802ba9e:	2e00      	cmp	r6, #0
 802baa0:	f43f aeb7 	beq.w	802b812 <_dtoa_r+0x67a>
 802baa4:	f1b9 0f00 	cmp.w	r9, #0
 802baa8:	d005      	beq.n	802bab6 <_dtoa_r+0x91e>
 802baaa:	45b1      	cmp	r9, r6
 802baac:	d003      	beq.n	802bab6 <_dtoa_r+0x91e>
 802baae:	4649      	mov	r1, r9
 802bab0:	4620      	mov	r0, r4
 802bab2:	f000 fb51 	bl	802c158 <_Bfree>
 802bab6:	4631      	mov	r1, r6
 802bab8:	4620      	mov	r0, r4
 802baba:	f000 fb4d 	bl	802c158 <_Bfree>
 802babe:	e6a8      	b.n	802b812 <_dtoa_r+0x67a>
 802bac0:	2700      	movs	r7, #0
 802bac2:	463e      	mov	r6, r7
 802bac4:	e7e1      	b.n	802ba8a <_dtoa_r+0x8f2>
 802bac6:	f8dd a020 	ldr.w	sl, [sp, #32]
 802baca:	463e      	mov	r6, r7
 802bacc:	e5a9      	b.n	802b622 <_dtoa_r+0x48a>
 802bace:	bf00      	nop
 802bad0:	40240000 	.word	0x40240000
 802bad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802bad6:	f8cd 9008 	str.w	r9, [sp, #8]
 802bada:	2b00      	cmp	r3, #0
 802badc:	f000 80fa 	beq.w	802bcd4 <_dtoa_r+0xb3c>
 802bae0:	2d00      	cmp	r5, #0
 802bae2:	dd05      	ble.n	802baf0 <_dtoa_r+0x958>
 802bae4:	4631      	mov	r1, r6
 802bae6:	462a      	mov	r2, r5
 802bae8:	4620      	mov	r0, r4
 802baea:	f000 fcc3 	bl	802c474 <__lshift>
 802baee:	4606      	mov	r6, r0
 802baf0:	9b07      	ldr	r3, [sp, #28]
 802baf2:	2b00      	cmp	r3, #0
 802baf4:	d04c      	beq.n	802bb90 <_dtoa_r+0x9f8>
 802baf6:	6871      	ldr	r1, [r6, #4]
 802baf8:	4620      	mov	r0, r4
 802bafa:	f000 faf9 	bl	802c0f0 <_Balloc>
 802bafe:	6932      	ldr	r2, [r6, #16]
 802bb00:	3202      	adds	r2, #2
 802bb02:	4605      	mov	r5, r0
 802bb04:	0092      	lsls	r2, r2, #2
 802bb06:	f106 010c 	add.w	r1, r6, #12
 802bb0a:	300c      	adds	r0, #12
 802bb0c:	f7fe fd0c 	bl	802a528 <memcpy>
 802bb10:	2201      	movs	r2, #1
 802bb12:	4629      	mov	r1, r5
 802bb14:	4620      	mov	r0, r4
 802bb16:	f000 fcad 	bl	802c474 <__lshift>
 802bb1a:	9b00      	ldr	r3, [sp, #0]
 802bb1c:	f8cd b014 	str.w	fp, [sp, #20]
 802bb20:	f003 0301 	and.w	r3, r3, #1
 802bb24:	46b1      	mov	r9, r6
 802bb26:	9307      	str	r3, [sp, #28]
 802bb28:	4606      	mov	r6, r0
 802bb2a:	4639      	mov	r1, r7
 802bb2c:	9804      	ldr	r0, [sp, #16]
 802bb2e:	f7ff faa7 	bl	802b080 <quorem>
 802bb32:	4649      	mov	r1, r9
 802bb34:	4605      	mov	r5, r0
 802bb36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 802bb3a:	9804      	ldr	r0, [sp, #16]
 802bb3c:	f000 fcee 	bl	802c51c <__mcmp>
 802bb40:	4632      	mov	r2, r6
 802bb42:	9000      	str	r0, [sp, #0]
 802bb44:	4639      	mov	r1, r7
 802bb46:	4620      	mov	r0, r4
 802bb48:	f000 fd02 	bl	802c550 <__mdiff>
 802bb4c:	68c3      	ldr	r3, [r0, #12]
 802bb4e:	4602      	mov	r2, r0
 802bb50:	bb03      	cbnz	r3, 802bb94 <_dtoa_r+0x9fc>
 802bb52:	4601      	mov	r1, r0
 802bb54:	9008      	str	r0, [sp, #32]
 802bb56:	9804      	ldr	r0, [sp, #16]
 802bb58:	f000 fce0 	bl	802c51c <__mcmp>
 802bb5c:	9a08      	ldr	r2, [sp, #32]
 802bb5e:	4603      	mov	r3, r0
 802bb60:	4611      	mov	r1, r2
 802bb62:	4620      	mov	r0, r4
 802bb64:	9308      	str	r3, [sp, #32]
 802bb66:	f000 faf7 	bl	802c158 <_Bfree>
 802bb6a:	9b08      	ldr	r3, [sp, #32]
 802bb6c:	b9a3      	cbnz	r3, 802bb98 <_dtoa_r+0xa00>
 802bb6e:	9a06      	ldr	r2, [sp, #24]
 802bb70:	b992      	cbnz	r2, 802bb98 <_dtoa_r+0xa00>
 802bb72:	9a07      	ldr	r2, [sp, #28]
 802bb74:	b982      	cbnz	r2, 802bb98 <_dtoa_r+0xa00>
 802bb76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802bb7a:	d029      	beq.n	802bbd0 <_dtoa_r+0xa38>
 802bb7c:	9b00      	ldr	r3, [sp, #0]
 802bb7e:	2b00      	cmp	r3, #0
 802bb80:	dd01      	ble.n	802bb86 <_dtoa_r+0x9ee>
 802bb82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 802bb86:	9b05      	ldr	r3, [sp, #20]
 802bb88:	1c5d      	adds	r5, r3, #1
 802bb8a:	f883 8000 	strb.w	r8, [r3]
 802bb8e:	e782      	b.n	802ba96 <_dtoa_r+0x8fe>
 802bb90:	4630      	mov	r0, r6
 802bb92:	e7c2      	b.n	802bb1a <_dtoa_r+0x982>
 802bb94:	2301      	movs	r3, #1
 802bb96:	e7e3      	b.n	802bb60 <_dtoa_r+0x9c8>
 802bb98:	9a00      	ldr	r2, [sp, #0]
 802bb9a:	2a00      	cmp	r2, #0
 802bb9c:	db04      	blt.n	802bba8 <_dtoa_r+0xa10>
 802bb9e:	d125      	bne.n	802bbec <_dtoa_r+0xa54>
 802bba0:	9a06      	ldr	r2, [sp, #24]
 802bba2:	bb1a      	cbnz	r2, 802bbec <_dtoa_r+0xa54>
 802bba4:	9a07      	ldr	r2, [sp, #28]
 802bba6:	bb0a      	cbnz	r2, 802bbec <_dtoa_r+0xa54>
 802bba8:	2b00      	cmp	r3, #0
 802bbaa:	ddec      	ble.n	802bb86 <_dtoa_r+0x9ee>
 802bbac:	2201      	movs	r2, #1
 802bbae:	9904      	ldr	r1, [sp, #16]
 802bbb0:	4620      	mov	r0, r4
 802bbb2:	f000 fc5f 	bl	802c474 <__lshift>
 802bbb6:	4639      	mov	r1, r7
 802bbb8:	9004      	str	r0, [sp, #16]
 802bbba:	f000 fcaf 	bl	802c51c <__mcmp>
 802bbbe:	2800      	cmp	r0, #0
 802bbc0:	dc03      	bgt.n	802bbca <_dtoa_r+0xa32>
 802bbc2:	d1e0      	bne.n	802bb86 <_dtoa_r+0x9ee>
 802bbc4:	f018 0f01 	tst.w	r8, #1
 802bbc8:	d0dd      	beq.n	802bb86 <_dtoa_r+0x9ee>
 802bbca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802bbce:	d1d8      	bne.n	802bb82 <_dtoa_r+0x9ea>
 802bbd0:	9b05      	ldr	r3, [sp, #20]
 802bbd2:	9a05      	ldr	r2, [sp, #20]
 802bbd4:	1c5d      	adds	r5, r3, #1
 802bbd6:	2339      	movs	r3, #57	; 0x39
 802bbd8:	7013      	strb	r3, [r2, #0]
 802bbda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802bbde:	2b39      	cmp	r3, #57	; 0x39
 802bbe0:	f105 32ff 	add.w	r2, r5, #4294967295
 802bbe4:	d04f      	beq.n	802bc86 <_dtoa_r+0xaee>
 802bbe6:	3301      	adds	r3, #1
 802bbe8:	7013      	strb	r3, [r2, #0]
 802bbea:	e754      	b.n	802ba96 <_dtoa_r+0x8fe>
 802bbec:	9a05      	ldr	r2, [sp, #20]
 802bbee:	2b00      	cmp	r3, #0
 802bbf0:	f102 0501 	add.w	r5, r2, #1
 802bbf4:	dd06      	ble.n	802bc04 <_dtoa_r+0xa6c>
 802bbf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802bbfa:	d0e9      	beq.n	802bbd0 <_dtoa_r+0xa38>
 802bbfc:	f108 0801 	add.w	r8, r8, #1
 802bc00:	9b05      	ldr	r3, [sp, #20]
 802bc02:	e7c2      	b.n	802bb8a <_dtoa_r+0x9f2>
 802bc04:	9a02      	ldr	r2, [sp, #8]
 802bc06:	f805 8c01 	strb.w	r8, [r5, #-1]
 802bc0a:	eba5 030b 	sub.w	r3, r5, fp
 802bc0e:	4293      	cmp	r3, r2
 802bc10:	d021      	beq.n	802bc56 <_dtoa_r+0xabe>
 802bc12:	2300      	movs	r3, #0
 802bc14:	220a      	movs	r2, #10
 802bc16:	9904      	ldr	r1, [sp, #16]
 802bc18:	4620      	mov	r0, r4
 802bc1a:	f000 fab4 	bl	802c186 <__multadd>
 802bc1e:	45b1      	cmp	r9, r6
 802bc20:	9004      	str	r0, [sp, #16]
 802bc22:	f04f 0300 	mov.w	r3, #0
 802bc26:	f04f 020a 	mov.w	r2, #10
 802bc2a:	4649      	mov	r1, r9
 802bc2c:	4620      	mov	r0, r4
 802bc2e:	d105      	bne.n	802bc3c <_dtoa_r+0xaa4>
 802bc30:	f000 faa9 	bl	802c186 <__multadd>
 802bc34:	4681      	mov	r9, r0
 802bc36:	4606      	mov	r6, r0
 802bc38:	9505      	str	r5, [sp, #20]
 802bc3a:	e776      	b.n	802bb2a <_dtoa_r+0x992>
 802bc3c:	f000 faa3 	bl	802c186 <__multadd>
 802bc40:	4631      	mov	r1, r6
 802bc42:	4681      	mov	r9, r0
 802bc44:	2300      	movs	r3, #0
 802bc46:	220a      	movs	r2, #10
 802bc48:	4620      	mov	r0, r4
 802bc4a:	f000 fa9c 	bl	802c186 <__multadd>
 802bc4e:	4606      	mov	r6, r0
 802bc50:	e7f2      	b.n	802bc38 <_dtoa_r+0xaa0>
 802bc52:	f04f 0900 	mov.w	r9, #0
 802bc56:	2201      	movs	r2, #1
 802bc58:	9904      	ldr	r1, [sp, #16]
 802bc5a:	4620      	mov	r0, r4
 802bc5c:	f000 fc0a 	bl	802c474 <__lshift>
 802bc60:	4639      	mov	r1, r7
 802bc62:	9004      	str	r0, [sp, #16]
 802bc64:	f000 fc5a 	bl	802c51c <__mcmp>
 802bc68:	2800      	cmp	r0, #0
 802bc6a:	dcb6      	bgt.n	802bbda <_dtoa_r+0xa42>
 802bc6c:	d102      	bne.n	802bc74 <_dtoa_r+0xadc>
 802bc6e:	f018 0f01 	tst.w	r8, #1
 802bc72:	d1b2      	bne.n	802bbda <_dtoa_r+0xa42>
 802bc74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802bc78:	2b30      	cmp	r3, #48	; 0x30
 802bc7a:	f105 32ff 	add.w	r2, r5, #4294967295
 802bc7e:	f47f af0a 	bne.w	802ba96 <_dtoa_r+0x8fe>
 802bc82:	4615      	mov	r5, r2
 802bc84:	e7f6      	b.n	802bc74 <_dtoa_r+0xadc>
 802bc86:	4593      	cmp	fp, r2
 802bc88:	d105      	bne.n	802bc96 <_dtoa_r+0xafe>
 802bc8a:	2331      	movs	r3, #49	; 0x31
 802bc8c:	f10a 0a01 	add.w	sl, sl, #1
 802bc90:	f88b 3000 	strb.w	r3, [fp]
 802bc94:	e6ff      	b.n	802ba96 <_dtoa_r+0x8fe>
 802bc96:	4615      	mov	r5, r2
 802bc98:	e79f      	b.n	802bbda <_dtoa_r+0xa42>
 802bc9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 802bd00 <_dtoa_r+0xb68>
 802bc9e:	e007      	b.n	802bcb0 <_dtoa_r+0xb18>
 802bca0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802bca2:	f8df b060 	ldr.w	fp, [pc, #96]	; 802bd04 <_dtoa_r+0xb6c>
 802bca6:	b11b      	cbz	r3, 802bcb0 <_dtoa_r+0xb18>
 802bca8:	f10b 0308 	add.w	r3, fp, #8
 802bcac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802bcae:	6013      	str	r3, [r2, #0]
 802bcb0:	4658      	mov	r0, fp
 802bcb2:	b017      	add	sp, #92	; 0x5c
 802bcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bcb8:	9b06      	ldr	r3, [sp, #24]
 802bcba:	2b01      	cmp	r3, #1
 802bcbc:	f77f ae35 	ble.w	802b92a <_dtoa_r+0x792>
 802bcc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802bcc2:	9307      	str	r3, [sp, #28]
 802bcc4:	e649      	b.n	802b95a <_dtoa_r+0x7c2>
 802bcc6:	9b02      	ldr	r3, [sp, #8]
 802bcc8:	2b00      	cmp	r3, #0
 802bcca:	dc03      	bgt.n	802bcd4 <_dtoa_r+0xb3c>
 802bccc:	9b06      	ldr	r3, [sp, #24]
 802bcce:	2b02      	cmp	r3, #2
 802bcd0:	f73f aecc 	bgt.w	802ba6c <_dtoa_r+0x8d4>
 802bcd4:	465d      	mov	r5, fp
 802bcd6:	4639      	mov	r1, r7
 802bcd8:	9804      	ldr	r0, [sp, #16]
 802bcda:	f7ff f9d1 	bl	802b080 <quorem>
 802bcde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 802bce2:	f805 8b01 	strb.w	r8, [r5], #1
 802bce6:	9a02      	ldr	r2, [sp, #8]
 802bce8:	eba5 030b 	sub.w	r3, r5, fp
 802bcec:	429a      	cmp	r2, r3
 802bcee:	ddb0      	ble.n	802bc52 <_dtoa_r+0xaba>
 802bcf0:	2300      	movs	r3, #0
 802bcf2:	220a      	movs	r2, #10
 802bcf4:	9904      	ldr	r1, [sp, #16]
 802bcf6:	4620      	mov	r0, r4
 802bcf8:	f000 fa45 	bl	802c186 <__multadd>
 802bcfc:	9004      	str	r0, [sp, #16]
 802bcfe:	e7ea      	b.n	802bcd6 <_dtoa_r+0xb3e>
 802bd00:	0802cda8 	.word	0x0802cda8
 802bd04:	0802cdcc 	.word	0x0802cdcc

0802bd08 <__sflush_r>:
 802bd08:	898a      	ldrh	r2, [r1, #12]
 802bd0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bd0e:	4605      	mov	r5, r0
 802bd10:	0710      	lsls	r0, r2, #28
 802bd12:	460c      	mov	r4, r1
 802bd14:	d458      	bmi.n	802bdc8 <__sflush_r+0xc0>
 802bd16:	684b      	ldr	r3, [r1, #4]
 802bd18:	2b00      	cmp	r3, #0
 802bd1a:	dc05      	bgt.n	802bd28 <__sflush_r+0x20>
 802bd1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802bd1e:	2b00      	cmp	r3, #0
 802bd20:	dc02      	bgt.n	802bd28 <__sflush_r+0x20>
 802bd22:	2000      	movs	r0, #0
 802bd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bd28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bd2a:	2e00      	cmp	r6, #0
 802bd2c:	d0f9      	beq.n	802bd22 <__sflush_r+0x1a>
 802bd2e:	2300      	movs	r3, #0
 802bd30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802bd34:	682f      	ldr	r7, [r5, #0]
 802bd36:	6a21      	ldr	r1, [r4, #32]
 802bd38:	602b      	str	r3, [r5, #0]
 802bd3a:	d032      	beq.n	802bda2 <__sflush_r+0x9a>
 802bd3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802bd3e:	89a3      	ldrh	r3, [r4, #12]
 802bd40:	075a      	lsls	r2, r3, #29
 802bd42:	d505      	bpl.n	802bd50 <__sflush_r+0x48>
 802bd44:	6863      	ldr	r3, [r4, #4]
 802bd46:	1ac0      	subs	r0, r0, r3
 802bd48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802bd4a:	b10b      	cbz	r3, 802bd50 <__sflush_r+0x48>
 802bd4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802bd4e:	1ac0      	subs	r0, r0, r3
 802bd50:	2300      	movs	r3, #0
 802bd52:	4602      	mov	r2, r0
 802bd54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bd56:	6a21      	ldr	r1, [r4, #32]
 802bd58:	4628      	mov	r0, r5
 802bd5a:	47b0      	blx	r6
 802bd5c:	1c43      	adds	r3, r0, #1
 802bd5e:	89a3      	ldrh	r3, [r4, #12]
 802bd60:	d106      	bne.n	802bd70 <__sflush_r+0x68>
 802bd62:	6829      	ldr	r1, [r5, #0]
 802bd64:	291d      	cmp	r1, #29
 802bd66:	d848      	bhi.n	802bdfa <__sflush_r+0xf2>
 802bd68:	4a29      	ldr	r2, [pc, #164]	; (802be10 <__sflush_r+0x108>)
 802bd6a:	40ca      	lsrs	r2, r1
 802bd6c:	07d6      	lsls	r6, r2, #31
 802bd6e:	d544      	bpl.n	802bdfa <__sflush_r+0xf2>
 802bd70:	2200      	movs	r2, #0
 802bd72:	6062      	str	r2, [r4, #4]
 802bd74:	04d9      	lsls	r1, r3, #19
 802bd76:	6922      	ldr	r2, [r4, #16]
 802bd78:	6022      	str	r2, [r4, #0]
 802bd7a:	d504      	bpl.n	802bd86 <__sflush_r+0x7e>
 802bd7c:	1c42      	adds	r2, r0, #1
 802bd7e:	d101      	bne.n	802bd84 <__sflush_r+0x7c>
 802bd80:	682b      	ldr	r3, [r5, #0]
 802bd82:	b903      	cbnz	r3, 802bd86 <__sflush_r+0x7e>
 802bd84:	6560      	str	r0, [r4, #84]	; 0x54
 802bd86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802bd88:	602f      	str	r7, [r5, #0]
 802bd8a:	2900      	cmp	r1, #0
 802bd8c:	d0c9      	beq.n	802bd22 <__sflush_r+0x1a>
 802bd8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802bd92:	4299      	cmp	r1, r3
 802bd94:	d002      	beq.n	802bd9c <__sflush_r+0x94>
 802bd96:	4628      	mov	r0, r5
 802bd98:	f000 fc94 	bl	802c6c4 <_free_r>
 802bd9c:	2000      	movs	r0, #0
 802bd9e:	6360      	str	r0, [r4, #52]	; 0x34
 802bda0:	e7c0      	b.n	802bd24 <__sflush_r+0x1c>
 802bda2:	2301      	movs	r3, #1
 802bda4:	4628      	mov	r0, r5
 802bda6:	47b0      	blx	r6
 802bda8:	1c41      	adds	r1, r0, #1
 802bdaa:	d1c8      	bne.n	802bd3e <__sflush_r+0x36>
 802bdac:	682b      	ldr	r3, [r5, #0]
 802bdae:	2b00      	cmp	r3, #0
 802bdb0:	d0c5      	beq.n	802bd3e <__sflush_r+0x36>
 802bdb2:	2b1d      	cmp	r3, #29
 802bdb4:	d001      	beq.n	802bdba <__sflush_r+0xb2>
 802bdb6:	2b16      	cmp	r3, #22
 802bdb8:	d101      	bne.n	802bdbe <__sflush_r+0xb6>
 802bdba:	602f      	str	r7, [r5, #0]
 802bdbc:	e7b1      	b.n	802bd22 <__sflush_r+0x1a>
 802bdbe:	89a3      	ldrh	r3, [r4, #12]
 802bdc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bdc4:	81a3      	strh	r3, [r4, #12]
 802bdc6:	e7ad      	b.n	802bd24 <__sflush_r+0x1c>
 802bdc8:	690f      	ldr	r7, [r1, #16]
 802bdca:	2f00      	cmp	r7, #0
 802bdcc:	d0a9      	beq.n	802bd22 <__sflush_r+0x1a>
 802bdce:	0793      	lsls	r3, r2, #30
 802bdd0:	680e      	ldr	r6, [r1, #0]
 802bdd2:	bf08      	it	eq
 802bdd4:	694b      	ldreq	r3, [r1, #20]
 802bdd6:	600f      	str	r7, [r1, #0]
 802bdd8:	bf18      	it	ne
 802bdda:	2300      	movne	r3, #0
 802bddc:	eba6 0807 	sub.w	r8, r6, r7
 802bde0:	608b      	str	r3, [r1, #8]
 802bde2:	f1b8 0f00 	cmp.w	r8, #0
 802bde6:	dd9c      	ble.n	802bd22 <__sflush_r+0x1a>
 802bde8:	4643      	mov	r3, r8
 802bdea:	463a      	mov	r2, r7
 802bdec:	6a21      	ldr	r1, [r4, #32]
 802bdee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802bdf0:	4628      	mov	r0, r5
 802bdf2:	47b0      	blx	r6
 802bdf4:	2800      	cmp	r0, #0
 802bdf6:	dc06      	bgt.n	802be06 <__sflush_r+0xfe>
 802bdf8:	89a3      	ldrh	r3, [r4, #12]
 802bdfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bdfe:	81a3      	strh	r3, [r4, #12]
 802be00:	f04f 30ff 	mov.w	r0, #4294967295
 802be04:	e78e      	b.n	802bd24 <__sflush_r+0x1c>
 802be06:	4407      	add	r7, r0
 802be08:	eba8 0800 	sub.w	r8, r8, r0
 802be0c:	e7e9      	b.n	802bde2 <__sflush_r+0xda>
 802be0e:	bf00      	nop
 802be10:	20400001 	.word	0x20400001

0802be14 <_fflush_r>:
 802be14:	b538      	push	{r3, r4, r5, lr}
 802be16:	690b      	ldr	r3, [r1, #16]
 802be18:	4605      	mov	r5, r0
 802be1a:	460c      	mov	r4, r1
 802be1c:	b1db      	cbz	r3, 802be56 <_fflush_r+0x42>
 802be1e:	b118      	cbz	r0, 802be28 <_fflush_r+0x14>
 802be20:	6983      	ldr	r3, [r0, #24]
 802be22:	b90b      	cbnz	r3, 802be28 <_fflush_r+0x14>
 802be24:	f000 f860 	bl	802bee8 <__sinit>
 802be28:	4b0c      	ldr	r3, [pc, #48]	; (802be5c <_fflush_r+0x48>)
 802be2a:	429c      	cmp	r4, r3
 802be2c:	d109      	bne.n	802be42 <_fflush_r+0x2e>
 802be2e:	686c      	ldr	r4, [r5, #4]
 802be30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802be34:	b17b      	cbz	r3, 802be56 <_fflush_r+0x42>
 802be36:	4621      	mov	r1, r4
 802be38:	4628      	mov	r0, r5
 802be3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802be3e:	f7ff bf63 	b.w	802bd08 <__sflush_r>
 802be42:	4b07      	ldr	r3, [pc, #28]	; (802be60 <_fflush_r+0x4c>)
 802be44:	429c      	cmp	r4, r3
 802be46:	d101      	bne.n	802be4c <_fflush_r+0x38>
 802be48:	68ac      	ldr	r4, [r5, #8]
 802be4a:	e7f1      	b.n	802be30 <_fflush_r+0x1c>
 802be4c:	4b05      	ldr	r3, [pc, #20]	; (802be64 <_fflush_r+0x50>)
 802be4e:	429c      	cmp	r4, r3
 802be50:	bf08      	it	eq
 802be52:	68ec      	ldreq	r4, [r5, #12]
 802be54:	e7ec      	b.n	802be30 <_fflush_r+0x1c>
 802be56:	2000      	movs	r0, #0
 802be58:	bd38      	pop	{r3, r4, r5, pc}
 802be5a:	bf00      	nop
 802be5c:	0802cdfc 	.word	0x0802cdfc
 802be60:	0802ce1c 	.word	0x0802ce1c
 802be64:	0802cddc 	.word	0x0802cddc

0802be68 <std>:
 802be68:	2300      	movs	r3, #0
 802be6a:	b510      	push	{r4, lr}
 802be6c:	4604      	mov	r4, r0
 802be6e:	e9c0 3300 	strd	r3, r3, [r0]
 802be72:	6083      	str	r3, [r0, #8]
 802be74:	8181      	strh	r1, [r0, #12]
 802be76:	6643      	str	r3, [r0, #100]	; 0x64
 802be78:	81c2      	strh	r2, [r0, #14]
 802be7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802be7e:	6183      	str	r3, [r0, #24]
 802be80:	4619      	mov	r1, r3
 802be82:	2208      	movs	r2, #8
 802be84:	305c      	adds	r0, #92	; 0x5c
 802be86:	f7fe fb5a 	bl	802a53e <memset>
 802be8a:	4b05      	ldr	r3, [pc, #20]	; (802bea0 <std+0x38>)
 802be8c:	6263      	str	r3, [r4, #36]	; 0x24
 802be8e:	4b05      	ldr	r3, [pc, #20]	; (802bea4 <std+0x3c>)
 802be90:	62a3      	str	r3, [r4, #40]	; 0x28
 802be92:	4b05      	ldr	r3, [pc, #20]	; (802bea8 <std+0x40>)
 802be94:	62e3      	str	r3, [r4, #44]	; 0x2c
 802be96:	4b05      	ldr	r3, [pc, #20]	; (802beac <std+0x44>)
 802be98:	6224      	str	r4, [r4, #32]
 802be9a:	6323      	str	r3, [r4, #48]	; 0x30
 802be9c:	bd10      	pop	{r4, pc}
 802be9e:	bf00      	nop
 802bea0:	0802cab5 	.word	0x0802cab5
 802bea4:	0802cad7 	.word	0x0802cad7
 802bea8:	0802cb0f 	.word	0x0802cb0f
 802beac:	0802cb33 	.word	0x0802cb33

0802beb0 <_cleanup_r>:
 802beb0:	4901      	ldr	r1, [pc, #4]	; (802beb8 <_cleanup_r+0x8>)
 802beb2:	f000 b885 	b.w	802bfc0 <_fwalk_reent>
 802beb6:	bf00      	nop
 802beb8:	0802be15 	.word	0x0802be15

0802bebc <__sfmoreglue>:
 802bebc:	b570      	push	{r4, r5, r6, lr}
 802bebe:	1e4a      	subs	r2, r1, #1
 802bec0:	2568      	movs	r5, #104	; 0x68
 802bec2:	4355      	muls	r5, r2
 802bec4:	460e      	mov	r6, r1
 802bec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802beca:	f000 fc49 	bl	802c760 <_malloc_r>
 802bece:	4604      	mov	r4, r0
 802bed0:	b140      	cbz	r0, 802bee4 <__sfmoreglue+0x28>
 802bed2:	2100      	movs	r1, #0
 802bed4:	e9c0 1600 	strd	r1, r6, [r0]
 802bed8:	300c      	adds	r0, #12
 802beda:	60a0      	str	r0, [r4, #8]
 802bedc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802bee0:	f7fe fb2d 	bl	802a53e <memset>
 802bee4:	4620      	mov	r0, r4
 802bee6:	bd70      	pop	{r4, r5, r6, pc}

0802bee8 <__sinit>:
 802bee8:	6983      	ldr	r3, [r0, #24]
 802beea:	b510      	push	{r4, lr}
 802beec:	4604      	mov	r4, r0
 802beee:	bb33      	cbnz	r3, 802bf3e <__sinit+0x56>
 802bef0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802bef4:	6503      	str	r3, [r0, #80]	; 0x50
 802bef6:	4b12      	ldr	r3, [pc, #72]	; (802bf40 <__sinit+0x58>)
 802bef8:	4a12      	ldr	r2, [pc, #72]	; (802bf44 <__sinit+0x5c>)
 802befa:	681b      	ldr	r3, [r3, #0]
 802befc:	6282      	str	r2, [r0, #40]	; 0x28
 802befe:	4298      	cmp	r0, r3
 802bf00:	bf04      	itt	eq
 802bf02:	2301      	moveq	r3, #1
 802bf04:	6183      	streq	r3, [r0, #24]
 802bf06:	f000 f81f 	bl	802bf48 <__sfp>
 802bf0a:	6060      	str	r0, [r4, #4]
 802bf0c:	4620      	mov	r0, r4
 802bf0e:	f000 f81b 	bl	802bf48 <__sfp>
 802bf12:	60a0      	str	r0, [r4, #8]
 802bf14:	4620      	mov	r0, r4
 802bf16:	f000 f817 	bl	802bf48 <__sfp>
 802bf1a:	2200      	movs	r2, #0
 802bf1c:	60e0      	str	r0, [r4, #12]
 802bf1e:	2104      	movs	r1, #4
 802bf20:	6860      	ldr	r0, [r4, #4]
 802bf22:	f7ff ffa1 	bl	802be68 <std>
 802bf26:	2201      	movs	r2, #1
 802bf28:	2109      	movs	r1, #9
 802bf2a:	68a0      	ldr	r0, [r4, #8]
 802bf2c:	f7ff ff9c 	bl	802be68 <std>
 802bf30:	2202      	movs	r2, #2
 802bf32:	2112      	movs	r1, #18
 802bf34:	68e0      	ldr	r0, [r4, #12]
 802bf36:	f7ff ff97 	bl	802be68 <std>
 802bf3a:	2301      	movs	r3, #1
 802bf3c:	61a3      	str	r3, [r4, #24]
 802bf3e:	bd10      	pop	{r4, pc}
 802bf40:	0802cd94 	.word	0x0802cd94
 802bf44:	0802beb1 	.word	0x0802beb1

0802bf48 <__sfp>:
 802bf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bf4a:	4b1b      	ldr	r3, [pc, #108]	; (802bfb8 <__sfp+0x70>)
 802bf4c:	681e      	ldr	r6, [r3, #0]
 802bf4e:	69b3      	ldr	r3, [r6, #24]
 802bf50:	4607      	mov	r7, r0
 802bf52:	b913      	cbnz	r3, 802bf5a <__sfp+0x12>
 802bf54:	4630      	mov	r0, r6
 802bf56:	f7ff ffc7 	bl	802bee8 <__sinit>
 802bf5a:	3648      	adds	r6, #72	; 0x48
 802bf5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802bf60:	3b01      	subs	r3, #1
 802bf62:	d503      	bpl.n	802bf6c <__sfp+0x24>
 802bf64:	6833      	ldr	r3, [r6, #0]
 802bf66:	b133      	cbz	r3, 802bf76 <__sfp+0x2e>
 802bf68:	6836      	ldr	r6, [r6, #0]
 802bf6a:	e7f7      	b.n	802bf5c <__sfp+0x14>
 802bf6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802bf70:	b16d      	cbz	r5, 802bf8e <__sfp+0x46>
 802bf72:	3468      	adds	r4, #104	; 0x68
 802bf74:	e7f4      	b.n	802bf60 <__sfp+0x18>
 802bf76:	2104      	movs	r1, #4
 802bf78:	4638      	mov	r0, r7
 802bf7a:	f7ff ff9f 	bl	802bebc <__sfmoreglue>
 802bf7e:	6030      	str	r0, [r6, #0]
 802bf80:	2800      	cmp	r0, #0
 802bf82:	d1f1      	bne.n	802bf68 <__sfp+0x20>
 802bf84:	230c      	movs	r3, #12
 802bf86:	603b      	str	r3, [r7, #0]
 802bf88:	4604      	mov	r4, r0
 802bf8a:	4620      	mov	r0, r4
 802bf8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bf8e:	4b0b      	ldr	r3, [pc, #44]	; (802bfbc <__sfp+0x74>)
 802bf90:	6665      	str	r5, [r4, #100]	; 0x64
 802bf92:	e9c4 5500 	strd	r5, r5, [r4]
 802bf96:	60a5      	str	r5, [r4, #8]
 802bf98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802bf9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802bfa0:	2208      	movs	r2, #8
 802bfa2:	4629      	mov	r1, r5
 802bfa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802bfa8:	f7fe fac9 	bl	802a53e <memset>
 802bfac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802bfb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802bfb4:	e7e9      	b.n	802bf8a <__sfp+0x42>
 802bfb6:	bf00      	nop
 802bfb8:	0802cd94 	.word	0x0802cd94
 802bfbc:	ffff0001 	.word	0xffff0001

0802bfc0 <_fwalk_reent>:
 802bfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bfc4:	4680      	mov	r8, r0
 802bfc6:	4689      	mov	r9, r1
 802bfc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802bfcc:	2600      	movs	r6, #0
 802bfce:	b914      	cbnz	r4, 802bfd6 <_fwalk_reent+0x16>
 802bfd0:	4630      	mov	r0, r6
 802bfd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bfd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802bfda:	3f01      	subs	r7, #1
 802bfdc:	d501      	bpl.n	802bfe2 <_fwalk_reent+0x22>
 802bfde:	6824      	ldr	r4, [r4, #0]
 802bfe0:	e7f5      	b.n	802bfce <_fwalk_reent+0xe>
 802bfe2:	89ab      	ldrh	r3, [r5, #12]
 802bfe4:	2b01      	cmp	r3, #1
 802bfe6:	d907      	bls.n	802bff8 <_fwalk_reent+0x38>
 802bfe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802bfec:	3301      	adds	r3, #1
 802bfee:	d003      	beq.n	802bff8 <_fwalk_reent+0x38>
 802bff0:	4629      	mov	r1, r5
 802bff2:	4640      	mov	r0, r8
 802bff4:	47c8      	blx	r9
 802bff6:	4306      	orrs	r6, r0
 802bff8:	3568      	adds	r5, #104	; 0x68
 802bffa:	e7ee      	b.n	802bfda <_fwalk_reent+0x1a>

0802bffc <_localeconv_r>:
 802bffc:	4b04      	ldr	r3, [pc, #16]	; (802c010 <_localeconv_r+0x14>)
 802bffe:	681b      	ldr	r3, [r3, #0]
 802c000:	6a18      	ldr	r0, [r3, #32]
 802c002:	4b04      	ldr	r3, [pc, #16]	; (802c014 <_localeconv_r+0x18>)
 802c004:	2800      	cmp	r0, #0
 802c006:	bf08      	it	eq
 802c008:	4618      	moveq	r0, r3
 802c00a:	30f0      	adds	r0, #240	; 0xf0
 802c00c:	4770      	bx	lr
 802c00e:	bf00      	nop
 802c010:	20000010 	.word	0x20000010
 802c014:	20000074 	.word	0x20000074

0802c018 <__swhatbuf_r>:
 802c018:	b570      	push	{r4, r5, r6, lr}
 802c01a:	460e      	mov	r6, r1
 802c01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c020:	2900      	cmp	r1, #0
 802c022:	b096      	sub	sp, #88	; 0x58
 802c024:	4614      	mov	r4, r2
 802c026:	461d      	mov	r5, r3
 802c028:	da07      	bge.n	802c03a <__swhatbuf_r+0x22>
 802c02a:	2300      	movs	r3, #0
 802c02c:	602b      	str	r3, [r5, #0]
 802c02e:	89b3      	ldrh	r3, [r6, #12]
 802c030:	061a      	lsls	r2, r3, #24
 802c032:	d410      	bmi.n	802c056 <__swhatbuf_r+0x3e>
 802c034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c038:	e00e      	b.n	802c058 <__swhatbuf_r+0x40>
 802c03a:	466a      	mov	r2, sp
 802c03c:	f000 fda0 	bl	802cb80 <_fstat_r>
 802c040:	2800      	cmp	r0, #0
 802c042:	dbf2      	blt.n	802c02a <__swhatbuf_r+0x12>
 802c044:	9a01      	ldr	r2, [sp, #4]
 802c046:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802c04a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802c04e:	425a      	negs	r2, r3
 802c050:	415a      	adcs	r2, r3
 802c052:	602a      	str	r2, [r5, #0]
 802c054:	e7ee      	b.n	802c034 <__swhatbuf_r+0x1c>
 802c056:	2340      	movs	r3, #64	; 0x40
 802c058:	2000      	movs	r0, #0
 802c05a:	6023      	str	r3, [r4, #0]
 802c05c:	b016      	add	sp, #88	; 0x58
 802c05e:	bd70      	pop	{r4, r5, r6, pc}

0802c060 <__smakebuf_r>:
 802c060:	898b      	ldrh	r3, [r1, #12]
 802c062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802c064:	079d      	lsls	r5, r3, #30
 802c066:	4606      	mov	r6, r0
 802c068:	460c      	mov	r4, r1
 802c06a:	d507      	bpl.n	802c07c <__smakebuf_r+0x1c>
 802c06c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802c070:	6023      	str	r3, [r4, #0]
 802c072:	6123      	str	r3, [r4, #16]
 802c074:	2301      	movs	r3, #1
 802c076:	6163      	str	r3, [r4, #20]
 802c078:	b002      	add	sp, #8
 802c07a:	bd70      	pop	{r4, r5, r6, pc}
 802c07c:	ab01      	add	r3, sp, #4
 802c07e:	466a      	mov	r2, sp
 802c080:	f7ff ffca 	bl	802c018 <__swhatbuf_r>
 802c084:	9900      	ldr	r1, [sp, #0]
 802c086:	4605      	mov	r5, r0
 802c088:	4630      	mov	r0, r6
 802c08a:	f000 fb69 	bl	802c760 <_malloc_r>
 802c08e:	b948      	cbnz	r0, 802c0a4 <__smakebuf_r+0x44>
 802c090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c094:	059a      	lsls	r2, r3, #22
 802c096:	d4ef      	bmi.n	802c078 <__smakebuf_r+0x18>
 802c098:	f023 0303 	bic.w	r3, r3, #3
 802c09c:	f043 0302 	orr.w	r3, r3, #2
 802c0a0:	81a3      	strh	r3, [r4, #12]
 802c0a2:	e7e3      	b.n	802c06c <__smakebuf_r+0xc>
 802c0a4:	4b0d      	ldr	r3, [pc, #52]	; (802c0dc <__smakebuf_r+0x7c>)
 802c0a6:	62b3      	str	r3, [r6, #40]	; 0x28
 802c0a8:	89a3      	ldrh	r3, [r4, #12]
 802c0aa:	6020      	str	r0, [r4, #0]
 802c0ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c0b0:	81a3      	strh	r3, [r4, #12]
 802c0b2:	9b00      	ldr	r3, [sp, #0]
 802c0b4:	6163      	str	r3, [r4, #20]
 802c0b6:	9b01      	ldr	r3, [sp, #4]
 802c0b8:	6120      	str	r0, [r4, #16]
 802c0ba:	b15b      	cbz	r3, 802c0d4 <__smakebuf_r+0x74>
 802c0bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c0c0:	4630      	mov	r0, r6
 802c0c2:	f000 fd6f 	bl	802cba4 <_isatty_r>
 802c0c6:	b128      	cbz	r0, 802c0d4 <__smakebuf_r+0x74>
 802c0c8:	89a3      	ldrh	r3, [r4, #12]
 802c0ca:	f023 0303 	bic.w	r3, r3, #3
 802c0ce:	f043 0301 	orr.w	r3, r3, #1
 802c0d2:	81a3      	strh	r3, [r4, #12]
 802c0d4:	89a3      	ldrh	r3, [r4, #12]
 802c0d6:	431d      	orrs	r5, r3
 802c0d8:	81a5      	strh	r5, [r4, #12]
 802c0da:	e7cd      	b.n	802c078 <__smakebuf_r+0x18>
 802c0dc:	0802beb1 	.word	0x0802beb1

0802c0e0 <malloc>:
 802c0e0:	4b02      	ldr	r3, [pc, #8]	; (802c0ec <malloc+0xc>)
 802c0e2:	4601      	mov	r1, r0
 802c0e4:	6818      	ldr	r0, [r3, #0]
 802c0e6:	f000 bb3b 	b.w	802c760 <_malloc_r>
 802c0ea:	bf00      	nop
 802c0ec:	20000010 	.word	0x20000010

0802c0f0 <_Balloc>:
 802c0f0:	b570      	push	{r4, r5, r6, lr}
 802c0f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802c0f4:	4604      	mov	r4, r0
 802c0f6:	460e      	mov	r6, r1
 802c0f8:	b93d      	cbnz	r5, 802c10a <_Balloc+0x1a>
 802c0fa:	2010      	movs	r0, #16
 802c0fc:	f7ff fff0 	bl	802c0e0 <malloc>
 802c100:	6260      	str	r0, [r4, #36]	; 0x24
 802c102:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802c106:	6005      	str	r5, [r0, #0]
 802c108:	60c5      	str	r5, [r0, #12]
 802c10a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802c10c:	68eb      	ldr	r3, [r5, #12]
 802c10e:	b183      	cbz	r3, 802c132 <_Balloc+0x42>
 802c110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802c112:	68db      	ldr	r3, [r3, #12]
 802c114:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802c118:	b9b8      	cbnz	r0, 802c14a <_Balloc+0x5a>
 802c11a:	2101      	movs	r1, #1
 802c11c:	fa01 f506 	lsl.w	r5, r1, r6
 802c120:	1d6a      	adds	r2, r5, #5
 802c122:	0092      	lsls	r2, r2, #2
 802c124:	4620      	mov	r0, r4
 802c126:	f000 fabf 	bl	802c6a8 <_calloc_r>
 802c12a:	b160      	cbz	r0, 802c146 <_Balloc+0x56>
 802c12c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 802c130:	e00e      	b.n	802c150 <_Balloc+0x60>
 802c132:	2221      	movs	r2, #33	; 0x21
 802c134:	2104      	movs	r1, #4
 802c136:	4620      	mov	r0, r4
 802c138:	f000 fab6 	bl	802c6a8 <_calloc_r>
 802c13c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802c13e:	60e8      	str	r0, [r5, #12]
 802c140:	68db      	ldr	r3, [r3, #12]
 802c142:	2b00      	cmp	r3, #0
 802c144:	d1e4      	bne.n	802c110 <_Balloc+0x20>
 802c146:	2000      	movs	r0, #0
 802c148:	bd70      	pop	{r4, r5, r6, pc}
 802c14a:	6802      	ldr	r2, [r0, #0]
 802c14c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 802c150:	2300      	movs	r3, #0
 802c152:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802c156:	e7f7      	b.n	802c148 <_Balloc+0x58>

0802c158 <_Bfree>:
 802c158:	b570      	push	{r4, r5, r6, lr}
 802c15a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 802c15c:	4606      	mov	r6, r0
 802c15e:	460d      	mov	r5, r1
 802c160:	b93c      	cbnz	r4, 802c172 <_Bfree+0x1a>
 802c162:	2010      	movs	r0, #16
 802c164:	f7ff ffbc 	bl	802c0e0 <malloc>
 802c168:	6270      	str	r0, [r6, #36]	; 0x24
 802c16a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802c16e:	6004      	str	r4, [r0, #0]
 802c170:	60c4      	str	r4, [r0, #12]
 802c172:	b13d      	cbz	r5, 802c184 <_Bfree+0x2c>
 802c174:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802c176:	686a      	ldr	r2, [r5, #4]
 802c178:	68db      	ldr	r3, [r3, #12]
 802c17a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802c17e:	6029      	str	r1, [r5, #0]
 802c180:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 802c184:	bd70      	pop	{r4, r5, r6, pc}

0802c186 <__multadd>:
 802c186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c18a:	690d      	ldr	r5, [r1, #16]
 802c18c:	461f      	mov	r7, r3
 802c18e:	4606      	mov	r6, r0
 802c190:	460c      	mov	r4, r1
 802c192:	f101 0c14 	add.w	ip, r1, #20
 802c196:	2300      	movs	r3, #0
 802c198:	f8dc 0000 	ldr.w	r0, [ip]
 802c19c:	b281      	uxth	r1, r0
 802c19e:	fb02 7101 	mla	r1, r2, r1, r7
 802c1a2:	0c0f      	lsrs	r7, r1, #16
 802c1a4:	0c00      	lsrs	r0, r0, #16
 802c1a6:	fb02 7000 	mla	r0, r2, r0, r7
 802c1aa:	b289      	uxth	r1, r1
 802c1ac:	3301      	adds	r3, #1
 802c1ae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 802c1b2:	429d      	cmp	r5, r3
 802c1b4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 802c1b8:	f84c 1b04 	str.w	r1, [ip], #4
 802c1bc:	dcec      	bgt.n	802c198 <__multadd+0x12>
 802c1be:	b1d7      	cbz	r7, 802c1f6 <__multadd+0x70>
 802c1c0:	68a3      	ldr	r3, [r4, #8]
 802c1c2:	42ab      	cmp	r3, r5
 802c1c4:	dc12      	bgt.n	802c1ec <__multadd+0x66>
 802c1c6:	6861      	ldr	r1, [r4, #4]
 802c1c8:	4630      	mov	r0, r6
 802c1ca:	3101      	adds	r1, #1
 802c1cc:	f7ff ff90 	bl	802c0f0 <_Balloc>
 802c1d0:	6922      	ldr	r2, [r4, #16]
 802c1d2:	3202      	adds	r2, #2
 802c1d4:	f104 010c 	add.w	r1, r4, #12
 802c1d8:	4680      	mov	r8, r0
 802c1da:	0092      	lsls	r2, r2, #2
 802c1dc:	300c      	adds	r0, #12
 802c1de:	f7fe f9a3 	bl	802a528 <memcpy>
 802c1e2:	4621      	mov	r1, r4
 802c1e4:	4630      	mov	r0, r6
 802c1e6:	f7ff ffb7 	bl	802c158 <_Bfree>
 802c1ea:	4644      	mov	r4, r8
 802c1ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802c1f0:	3501      	adds	r5, #1
 802c1f2:	615f      	str	r7, [r3, #20]
 802c1f4:	6125      	str	r5, [r4, #16]
 802c1f6:	4620      	mov	r0, r4
 802c1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802c1fc <__hi0bits>:
 802c1fc:	0c02      	lsrs	r2, r0, #16
 802c1fe:	0412      	lsls	r2, r2, #16
 802c200:	4603      	mov	r3, r0
 802c202:	b9b2      	cbnz	r2, 802c232 <__hi0bits+0x36>
 802c204:	0403      	lsls	r3, r0, #16
 802c206:	2010      	movs	r0, #16
 802c208:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 802c20c:	bf04      	itt	eq
 802c20e:	021b      	lsleq	r3, r3, #8
 802c210:	3008      	addeq	r0, #8
 802c212:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802c216:	bf04      	itt	eq
 802c218:	011b      	lsleq	r3, r3, #4
 802c21a:	3004      	addeq	r0, #4
 802c21c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 802c220:	bf04      	itt	eq
 802c222:	009b      	lsleq	r3, r3, #2
 802c224:	3002      	addeq	r0, #2
 802c226:	2b00      	cmp	r3, #0
 802c228:	db06      	blt.n	802c238 <__hi0bits+0x3c>
 802c22a:	005b      	lsls	r3, r3, #1
 802c22c:	d503      	bpl.n	802c236 <__hi0bits+0x3a>
 802c22e:	3001      	adds	r0, #1
 802c230:	4770      	bx	lr
 802c232:	2000      	movs	r0, #0
 802c234:	e7e8      	b.n	802c208 <__hi0bits+0xc>
 802c236:	2020      	movs	r0, #32
 802c238:	4770      	bx	lr

0802c23a <__lo0bits>:
 802c23a:	6803      	ldr	r3, [r0, #0]
 802c23c:	f013 0207 	ands.w	r2, r3, #7
 802c240:	4601      	mov	r1, r0
 802c242:	d00b      	beq.n	802c25c <__lo0bits+0x22>
 802c244:	07da      	lsls	r2, r3, #31
 802c246:	d423      	bmi.n	802c290 <__lo0bits+0x56>
 802c248:	0798      	lsls	r0, r3, #30
 802c24a:	bf49      	itett	mi
 802c24c:	085b      	lsrmi	r3, r3, #1
 802c24e:	089b      	lsrpl	r3, r3, #2
 802c250:	2001      	movmi	r0, #1
 802c252:	600b      	strmi	r3, [r1, #0]
 802c254:	bf5c      	itt	pl
 802c256:	600b      	strpl	r3, [r1, #0]
 802c258:	2002      	movpl	r0, #2
 802c25a:	4770      	bx	lr
 802c25c:	b298      	uxth	r0, r3
 802c25e:	b9a8      	cbnz	r0, 802c28c <__lo0bits+0x52>
 802c260:	0c1b      	lsrs	r3, r3, #16
 802c262:	2010      	movs	r0, #16
 802c264:	f013 0fff 	tst.w	r3, #255	; 0xff
 802c268:	bf04      	itt	eq
 802c26a:	0a1b      	lsreq	r3, r3, #8
 802c26c:	3008      	addeq	r0, #8
 802c26e:	071a      	lsls	r2, r3, #28
 802c270:	bf04      	itt	eq
 802c272:	091b      	lsreq	r3, r3, #4
 802c274:	3004      	addeq	r0, #4
 802c276:	079a      	lsls	r2, r3, #30
 802c278:	bf04      	itt	eq
 802c27a:	089b      	lsreq	r3, r3, #2
 802c27c:	3002      	addeq	r0, #2
 802c27e:	07da      	lsls	r2, r3, #31
 802c280:	d402      	bmi.n	802c288 <__lo0bits+0x4e>
 802c282:	085b      	lsrs	r3, r3, #1
 802c284:	d006      	beq.n	802c294 <__lo0bits+0x5a>
 802c286:	3001      	adds	r0, #1
 802c288:	600b      	str	r3, [r1, #0]
 802c28a:	4770      	bx	lr
 802c28c:	4610      	mov	r0, r2
 802c28e:	e7e9      	b.n	802c264 <__lo0bits+0x2a>
 802c290:	2000      	movs	r0, #0
 802c292:	4770      	bx	lr
 802c294:	2020      	movs	r0, #32
 802c296:	4770      	bx	lr

0802c298 <__i2b>:
 802c298:	b510      	push	{r4, lr}
 802c29a:	460c      	mov	r4, r1
 802c29c:	2101      	movs	r1, #1
 802c29e:	f7ff ff27 	bl	802c0f0 <_Balloc>
 802c2a2:	2201      	movs	r2, #1
 802c2a4:	6144      	str	r4, [r0, #20]
 802c2a6:	6102      	str	r2, [r0, #16]
 802c2a8:	bd10      	pop	{r4, pc}

0802c2aa <__multiply>:
 802c2aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c2ae:	4614      	mov	r4, r2
 802c2b0:	690a      	ldr	r2, [r1, #16]
 802c2b2:	6923      	ldr	r3, [r4, #16]
 802c2b4:	429a      	cmp	r2, r3
 802c2b6:	bfb8      	it	lt
 802c2b8:	460b      	movlt	r3, r1
 802c2ba:	4688      	mov	r8, r1
 802c2bc:	bfbc      	itt	lt
 802c2be:	46a0      	movlt	r8, r4
 802c2c0:	461c      	movlt	r4, r3
 802c2c2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802c2c6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802c2ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802c2ce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802c2d2:	eb07 0609 	add.w	r6, r7, r9
 802c2d6:	42b3      	cmp	r3, r6
 802c2d8:	bfb8      	it	lt
 802c2da:	3101      	addlt	r1, #1
 802c2dc:	f7ff ff08 	bl	802c0f0 <_Balloc>
 802c2e0:	f100 0514 	add.w	r5, r0, #20
 802c2e4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 802c2e8:	462b      	mov	r3, r5
 802c2ea:	2200      	movs	r2, #0
 802c2ec:	4573      	cmp	r3, lr
 802c2ee:	d316      	bcc.n	802c31e <__multiply+0x74>
 802c2f0:	f104 0214 	add.w	r2, r4, #20
 802c2f4:	f108 0114 	add.w	r1, r8, #20
 802c2f8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 802c2fc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 802c300:	9300      	str	r3, [sp, #0]
 802c302:	9b00      	ldr	r3, [sp, #0]
 802c304:	9201      	str	r2, [sp, #4]
 802c306:	4293      	cmp	r3, r2
 802c308:	d80c      	bhi.n	802c324 <__multiply+0x7a>
 802c30a:	2e00      	cmp	r6, #0
 802c30c:	dd03      	ble.n	802c316 <__multiply+0x6c>
 802c30e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 802c312:	2b00      	cmp	r3, #0
 802c314:	d05d      	beq.n	802c3d2 <__multiply+0x128>
 802c316:	6106      	str	r6, [r0, #16]
 802c318:	b003      	add	sp, #12
 802c31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c31e:	f843 2b04 	str.w	r2, [r3], #4
 802c322:	e7e3      	b.n	802c2ec <__multiply+0x42>
 802c324:	f8b2 b000 	ldrh.w	fp, [r2]
 802c328:	f1bb 0f00 	cmp.w	fp, #0
 802c32c:	d023      	beq.n	802c376 <__multiply+0xcc>
 802c32e:	4689      	mov	r9, r1
 802c330:	46ac      	mov	ip, r5
 802c332:	f04f 0800 	mov.w	r8, #0
 802c336:	f859 4b04 	ldr.w	r4, [r9], #4
 802c33a:	f8dc a000 	ldr.w	sl, [ip]
 802c33e:	b2a3      	uxth	r3, r4
 802c340:	fa1f fa8a 	uxth.w	sl, sl
 802c344:	fb0b a303 	mla	r3, fp, r3, sl
 802c348:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802c34c:	f8dc 4000 	ldr.w	r4, [ip]
 802c350:	4443      	add	r3, r8
 802c352:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802c356:	fb0b 840a 	mla	r4, fp, sl, r8
 802c35a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 802c35e:	46e2      	mov	sl, ip
 802c360:	b29b      	uxth	r3, r3
 802c362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802c366:	454f      	cmp	r7, r9
 802c368:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802c36c:	f84a 3b04 	str.w	r3, [sl], #4
 802c370:	d82b      	bhi.n	802c3ca <__multiply+0x120>
 802c372:	f8cc 8004 	str.w	r8, [ip, #4]
 802c376:	9b01      	ldr	r3, [sp, #4]
 802c378:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 802c37c:	3204      	adds	r2, #4
 802c37e:	f1ba 0f00 	cmp.w	sl, #0
 802c382:	d020      	beq.n	802c3c6 <__multiply+0x11c>
 802c384:	682b      	ldr	r3, [r5, #0]
 802c386:	4689      	mov	r9, r1
 802c388:	46a8      	mov	r8, r5
 802c38a:	f04f 0b00 	mov.w	fp, #0
 802c38e:	f8b9 c000 	ldrh.w	ip, [r9]
 802c392:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 802c396:	fb0a 440c 	mla	r4, sl, ip, r4
 802c39a:	445c      	add	r4, fp
 802c39c:	46c4      	mov	ip, r8
 802c39e:	b29b      	uxth	r3, r3
 802c3a0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802c3a4:	f84c 3b04 	str.w	r3, [ip], #4
 802c3a8:	f859 3b04 	ldr.w	r3, [r9], #4
 802c3ac:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 802c3b0:	0c1b      	lsrs	r3, r3, #16
 802c3b2:	fb0a b303 	mla	r3, sl, r3, fp
 802c3b6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 802c3ba:	454f      	cmp	r7, r9
 802c3bc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 802c3c0:	d805      	bhi.n	802c3ce <__multiply+0x124>
 802c3c2:	f8c8 3004 	str.w	r3, [r8, #4]
 802c3c6:	3504      	adds	r5, #4
 802c3c8:	e79b      	b.n	802c302 <__multiply+0x58>
 802c3ca:	46d4      	mov	ip, sl
 802c3cc:	e7b3      	b.n	802c336 <__multiply+0x8c>
 802c3ce:	46e0      	mov	r8, ip
 802c3d0:	e7dd      	b.n	802c38e <__multiply+0xe4>
 802c3d2:	3e01      	subs	r6, #1
 802c3d4:	e799      	b.n	802c30a <__multiply+0x60>
	...

0802c3d8 <__pow5mult>:
 802c3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c3dc:	4615      	mov	r5, r2
 802c3de:	f012 0203 	ands.w	r2, r2, #3
 802c3e2:	4606      	mov	r6, r0
 802c3e4:	460f      	mov	r7, r1
 802c3e6:	d007      	beq.n	802c3f8 <__pow5mult+0x20>
 802c3e8:	3a01      	subs	r2, #1
 802c3ea:	4c21      	ldr	r4, [pc, #132]	; (802c470 <__pow5mult+0x98>)
 802c3ec:	2300      	movs	r3, #0
 802c3ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802c3f2:	f7ff fec8 	bl	802c186 <__multadd>
 802c3f6:	4607      	mov	r7, r0
 802c3f8:	10ad      	asrs	r5, r5, #2
 802c3fa:	d035      	beq.n	802c468 <__pow5mult+0x90>
 802c3fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802c3fe:	b93c      	cbnz	r4, 802c410 <__pow5mult+0x38>
 802c400:	2010      	movs	r0, #16
 802c402:	f7ff fe6d 	bl	802c0e0 <malloc>
 802c406:	6270      	str	r0, [r6, #36]	; 0x24
 802c408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802c40c:	6004      	str	r4, [r0, #0]
 802c40e:	60c4      	str	r4, [r0, #12]
 802c410:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802c414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802c418:	b94c      	cbnz	r4, 802c42e <__pow5mult+0x56>
 802c41a:	f240 2171 	movw	r1, #625	; 0x271
 802c41e:	4630      	mov	r0, r6
 802c420:	f7ff ff3a 	bl	802c298 <__i2b>
 802c424:	2300      	movs	r3, #0
 802c426:	f8c8 0008 	str.w	r0, [r8, #8]
 802c42a:	4604      	mov	r4, r0
 802c42c:	6003      	str	r3, [r0, #0]
 802c42e:	f04f 0800 	mov.w	r8, #0
 802c432:	07eb      	lsls	r3, r5, #31
 802c434:	d50a      	bpl.n	802c44c <__pow5mult+0x74>
 802c436:	4639      	mov	r1, r7
 802c438:	4622      	mov	r2, r4
 802c43a:	4630      	mov	r0, r6
 802c43c:	f7ff ff35 	bl	802c2aa <__multiply>
 802c440:	4639      	mov	r1, r7
 802c442:	4681      	mov	r9, r0
 802c444:	4630      	mov	r0, r6
 802c446:	f7ff fe87 	bl	802c158 <_Bfree>
 802c44a:	464f      	mov	r7, r9
 802c44c:	106d      	asrs	r5, r5, #1
 802c44e:	d00b      	beq.n	802c468 <__pow5mult+0x90>
 802c450:	6820      	ldr	r0, [r4, #0]
 802c452:	b938      	cbnz	r0, 802c464 <__pow5mult+0x8c>
 802c454:	4622      	mov	r2, r4
 802c456:	4621      	mov	r1, r4
 802c458:	4630      	mov	r0, r6
 802c45a:	f7ff ff26 	bl	802c2aa <__multiply>
 802c45e:	6020      	str	r0, [r4, #0]
 802c460:	f8c0 8000 	str.w	r8, [r0]
 802c464:	4604      	mov	r4, r0
 802c466:	e7e4      	b.n	802c432 <__pow5mult+0x5a>
 802c468:	4638      	mov	r0, r7
 802c46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c46e:	bf00      	nop
 802c470:	0802cf30 	.word	0x0802cf30

0802c474 <__lshift>:
 802c474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c478:	460c      	mov	r4, r1
 802c47a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802c47e:	6923      	ldr	r3, [r4, #16]
 802c480:	6849      	ldr	r1, [r1, #4]
 802c482:	eb0a 0903 	add.w	r9, sl, r3
 802c486:	68a3      	ldr	r3, [r4, #8]
 802c488:	4607      	mov	r7, r0
 802c48a:	4616      	mov	r6, r2
 802c48c:	f109 0501 	add.w	r5, r9, #1
 802c490:	42ab      	cmp	r3, r5
 802c492:	db32      	blt.n	802c4fa <__lshift+0x86>
 802c494:	4638      	mov	r0, r7
 802c496:	f7ff fe2b 	bl	802c0f0 <_Balloc>
 802c49a:	2300      	movs	r3, #0
 802c49c:	4680      	mov	r8, r0
 802c49e:	f100 0114 	add.w	r1, r0, #20
 802c4a2:	461a      	mov	r2, r3
 802c4a4:	4553      	cmp	r3, sl
 802c4a6:	db2b      	blt.n	802c500 <__lshift+0x8c>
 802c4a8:	6920      	ldr	r0, [r4, #16]
 802c4aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802c4ae:	f104 0314 	add.w	r3, r4, #20
 802c4b2:	f016 021f 	ands.w	r2, r6, #31
 802c4b6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802c4ba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802c4be:	d025      	beq.n	802c50c <__lshift+0x98>
 802c4c0:	f1c2 0e20 	rsb	lr, r2, #32
 802c4c4:	2000      	movs	r0, #0
 802c4c6:	681e      	ldr	r6, [r3, #0]
 802c4c8:	468a      	mov	sl, r1
 802c4ca:	4096      	lsls	r6, r2
 802c4cc:	4330      	orrs	r0, r6
 802c4ce:	f84a 0b04 	str.w	r0, [sl], #4
 802c4d2:	f853 0b04 	ldr.w	r0, [r3], #4
 802c4d6:	459c      	cmp	ip, r3
 802c4d8:	fa20 f00e 	lsr.w	r0, r0, lr
 802c4dc:	d814      	bhi.n	802c508 <__lshift+0x94>
 802c4de:	6048      	str	r0, [r1, #4]
 802c4e0:	b108      	cbz	r0, 802c4e6 <__lshift+0x72>
 802c4e2:	f109 0502 	add.w	r5, r9, #2
 802c4e6:	3d01      	subs	r5, #1
 802c4e8:	4638      	mov	r0, r7
 802c4ea:	f8c8 5010 	str.w	r5, [r8, #16]
 802c4ee:	4621      	mov	r1, r4
 802c4f0:	f7ff fe32 	bl	802c158 <_Bfree>
 802c4f4:	4640      	mov	r0, r8
 802c4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c4fa:	3101      	adds	r1, #1
 802c4fc:	005b      	lsls	r3, r3, #1
 802c4fe:	e7c7      	b.n	802c490 <__lshift+0x1c>
 802c500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802c504:	3301      	adds	r3, #1
 802c506:	e7cd      	b.n	802c4a4 <__lshift+0x30>
 802c508:	4651      	mov	r1, sl
 802c50a:	e7dc      	b.n	802c4c6 <__lshift+0x52>
 802c50c:	3904      	subs	r1, #4
 802c50e:	f853 2b04 	ldr.w	r2, [r3], #4
 802c512:	f841 2f04 	str.w	r2, [r1, #4]!
 802c516:	459c      	cmp	ip, r3
 802c518:	d8f9      	bhi.n	802c50e <__lshift+0x9a>
 802c51a:	e7e4      	b.n	802c4e6 <__lshift+0x72>

0802c51c <__mcmp>:
 802c51c:	6903      	ldr	r3, [r0, #16]
 802c51e:	690a      	ldr	r2, [r1, #16]
 802c520:	1a9b      	subs	r3, r3, r2
 802c522:	b530      	push	{r4, r5, lr}
 802c524:	d10c      	bne.n	802c540 <__mcmp+0x24>
 802c526:	0092      	lsls	r2, r2, #2
 802c528:	3014      	adds	r0, #20
 802c52a:	3114      	adds	r1, #20
 802c52c:	1884      	adds	r4, r0, r2
 802c52e:	4411      	add	r1, r2
 802c530:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802c534:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802c538:	4295      	cmp	r5, r2
 802c53a:	d003      	beq.n	802c544 <__mcmp+0x28>
 802c53c:	d305      	bcc.n	802c54a <__mcmp+0x2e>
 802c53e:	2301      	movs	r3, #1
 802c540:	4618      	mov	r0, r3
 802c542:	bd30      	pop	{r4, r5, pc}
 802c544:	42a0      	cmp	r0, r4
 802c546:	d3f3      	bcc.n	802c530 <__mcmp+0x14>
 802c548:	e7fa      	b.n	802c540 <__mcmp+0x24>
 802c54a:	f04f 33ff 	mov.w	r3, #4294967295
 802c54e:	e7f7      	b.n	802c540 <__mcmp+0x24>

0802c550 <__mdiff>:
 802c550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c554:	460d      	mov	r5, r1
 802c556:	4607      	mov	r7, r0
 802c558:	4611      	mov	r1, r2
 802c55a:	4628      	mov	r0, r5
 802c55c:	4614      	mov	r4, r2
 802c55e:	f7ff ffdd 	bl	802c51c <__mcmp>
 802c562:	1e06      	subs	r6, r0, #0
 802c564:	d108      	bne.n	802c578 <__mdiff+0x28>
 802c566:	4631      	mov	r1, r6
 802c568:	4638      	mov	r0, r7
 802c56a:	f7ff fdc1 	bl	802c0f0 <_Balloc>
 802c56e:	2301      	movs	r3, #1
 802c570:	e9c0 3604 	strd	r3, r6, [r0, #16]
 802c574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c578:	bfa4      	itt	ge
 802c57a:	4623      	movge	r3, r4
 802c57c:	462c      	movge	r4, r5
 802c57e:	4638      	mov	r0, r7
 802c580:	6861      	ldr	r1, [r4, #4]
 802c582:	bfa6      	itte	ge
 802c584:	461d      	movge	r5, r3
 802c586:	2600      	movge	r6, #0
 802c588:	2601      	movlt	r6, #1
 802c58a:	f7ff fdb1 	bl	802c0f0 <_Balloc>
 802c58e:	692b      	ldr	r3, [r5, #16]
 802c590:	60c6      	str	r6, [r0, #12]
 802c592:	6926      	ldr	r6, [r4, #16]
 802c594:	f105 0914 	add.w	r9, r5, #20
 802c598:	f104 0214 	add.w	r2, r4, #20
 802c59c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 802c5a0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 802c5a4:	f100 0514 	add.w	r5, r0, #20
 802c5a8:	f04f 0e00 	mov.w	lr, #0
 802c5ac:	f852 ab04 	ldr.w	sl, [r2], #4
 802c5b0:	f859 4b04 	ldr.w	r4, [r9], #4
 802c5b4:	fa1e f18a 	uxtah	r1, lr, sl
 802c5b8:	b2a3      	uxth	r3, r4
 802c5ba:	1ac9      	subs	r1, r1, r3
 802c5bc:	0c23      	lsrs	r3, r4, #16
 802c5be:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 802c5c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 802c5c6:	b289      	uxth	r1, r1
 802c5c8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 802c5cc:	45c8      	cmp	r8, r9
 802c5ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 802c5d2:	4694      	mov	ip, r2
 802c5d4:	f845 3b04 	str.w	r3, [r5], #4
 802c5d8:	d8e8      	bhi.n	802c5ac <__mdiff+0x5c>
 802c5da:	45bc      	cmp	ip, r7
 802c5dc:	d304      	bcc.n	802c5e8 <__mdiff+0x98>
 802c5de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 802c5e2:	b183      	cbz	r3, 802c606 <__mdiff+0xb6>
 802c5e4:	6106      	str	r6, [r0, #16]
 802c5e6:	e7c5      	b.n	802c574 <__mdiff+0x24>
 802c5e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 802c5ec:	fa1e f381 	uxtah	r3, lr, r1
 802c5f0:	141a      	asrs	r2, r3, #16
 802c5f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802c5f6:	b29b      	uxth	r3, r3
 802c5f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802c5fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 802c600:	f845 3b04 	str.w	r3, [r5], #4
 802c604:	e7e9      	b.n	802c5da <__mdiff+0x8a>
 802c606:	3e01      	subs	r6, #1
 802c608:	e7e9      	b.n	802c5de <__mdiff+0x8e>

0802c60a <__d2b>:
 802c60a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802c60e:	460e      	mov	r6, r1
 802c610:	2101      	movs	r1, #1
 802c612:	ec59 8b10 	vmov	r8, r9, d0
 802c616:	4615      	mov	r5, r2
 802c618:	f7ff fd6a 	bl	802c0f0 <_Balloc>
 802c61c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 802c620:	4607      	mov	r7, r0
 802c622:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802c626:	bb34      	cbnz	r4, 802c676 <__d2b+0x6c>
 802c628:	9301      	str	r3, [sp, #4]
 802c62a:	f1b8 0300 	subs.w	r3, r8, #0
 802c62e:	d027      	beq.n	802c680 <__d2b+0x76>
 802c630:	a802      	add	r0, sp, #8
 802c632:	f840 3d08 	str.w	r3, [r0, #-8]!
 802c636:	f7ff fe00 	bl	802c23a <__lo0bits>
 802c63a:	9900      	ldr	r1, [sp, #0]
 802c63c:	b1f0      	cbz	r0, 802c67c <__d2b+0x72>
 802c63e:	9a01      	ldr	r2, [sp, #4]
 802c640:	f1c0 0320 	rsb	r3, r0, #32
 802c644:	fa02 f303 	lsl.w	r3, r2, r3
 802c648:	430b      	orrs	r3, r1
 802c64a:	40c2      	lsrs	r2, r0
 802c64c:	617b      	str	r3, [r7, #20]
 802c64e:	9201      	str	r2, [sp, #4]
 802c650:	9b01      	ldr	r3, [sp, #4]
 802c652:	61bb      	str	r3, [r7, #24]
 802c654:	2b00      	cmp	r3, #0
 802c656:	bf14      	ite	ne
 802c658:	2102      	movne	r1, #2
 802c65a:	2101      	moveq	r1, #1
 802c65c:	6139      	str	r1, [r7, #16]
 802c65e:	b1c4      	cbz	r4, 802c692 <__d2b+0x88>
 802c660:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 802c664:	4404      	add	r4, r0
 802c666:	6034      	str	r4, [r6, #0]
 802c668:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802c66c:	6028      	str	r0, [r5, #0]
 802c66e:	4638      	mov	r0, r7
 802c670:	b003      	add	sp, #12
 802c672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802c67a:	e7d5      	b.n	802c628 <__d2b+0x1e>
 802c67c:	6179      	str	r1, [r7, #20]
 802c67e:	e7e7      	b.n	802c650 <__d2b+0x46>
 802c680:	a801      	add	r0, sp, #4
 802c682:	f7ff fdda 	bl	802c23a <__lo0bits>
 802c686:	9b01      	ldr	r3, [sp, #4]
 802c688:	617b      	str	r3, [r7, #20]
 802c68a:	2101      	movs	r1, #1
 802c68c:	6139      	str	r1, [r7, #16]
 802c68e:	3020      	adds	r0, #32
 802c690:	e7e5      	b.n	802c65e <__d2b+0x54>
 802c692:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 802c696:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802c69a:	6030      	str	r0, [r6, #0]
 802c69c:	6918      	ldr	r0, [r3, #16]
 802c69e:	f7ff fdad 	bl	802c1fc <__hi0bits>
 802c6a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 802c6a6:	e7e1      	b.n	802c66c <__d2b+0x62>

0802c6a8 <_calloc_r>:
 802c6a8:	b538      	push	{r3, r4, r5, lr}
 802c6aa:	fb02 f401 	mul.w	r4, r2, r1
 802c6ae:	4621      	mov	r1, r4
 802c6b0:	f000 f856 	bl	802c760 <_malloc_r>
 802c6b4:	4605      	mov	r5, r0
 802c6b6:	b118      	cbz	r0, 802c6c0 <_calloc_r+0x18>
 802c6b8:	4622      	mov	r2, r4
 802c6ba:	2100      	movs	r1, #0
 802c6bc:	f7fd ff3f 	bl	802a53e <memset>
 802c6c0:	4628      	mov	r0, r5
 802c6c2:	bd38      	pop	{r3, r4, r5, pc}

0802c6c4 <_free_r>:
 802c6c4:	b538      	push	{r3, r4, r5, lr}
 802c6c6:	4605      	mov	r5, r0
 802c6c8:	2900      	cmp	r1, #0
 802c6ca:	d045      	beq.n	802c758 <_free_r+0x94>
 802c6cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c6d0:	1f0c      	subs	r4, r1, #4
 802c6d2:	2b00      	cmp	r3, #0
 802c6d4:	bfb8      	it	lt
 802c6d6:	18e4      	addlt	r4, r4, r3
 802c6d8:	f000 fa98 	bl	802cc0c <__malloc_lock>
 802c6dc:	4a1f      	ldr	r2, [pc, #124]	; (802c75c <_free_r+0x98>)
 802c6de:	6813      	ldr	r3, [r2, #0]
 802c6e0:	4610      	mov	r0, r2
 802c6e2:	b933      	cbnz	r3, 802c6f2 <_free_r+0x2e>
 802c6e4:	6063      	str	r3, [r4, #4]
 802c6e6:	6014      	str	r4, [r2, #0]
 802c6e8:	4628      	mov	r0, r5
 802c6ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c6ee:	f000 ba8e 	b.w	802cc0e <__malloc_unlock>
 802c6f2:	42a3      	cmp	r3, r4
 802c6f4:	d90c      	bls.n	802c710 <_free_r+0x4c>
 802c6f6:	6821      	ldr	r1, [r4, #0]
 802c6f8:	1862      	adds	r2, r4, r1
 802c6fa:	4293      	cmp	r3, r2
 802c6fc:	bf04      	itt	eq
 802c6fe:	681a      	ldreq	r2, [r3, #0]
 802c700:	685b      	ldreq	r3, [r3, #4]
 802c702:	6063      	str	r3, [r4, #4]
 802c704:	bf04      	itt	eq
 802c706:	1852      	addeq	r2, r2, r1
 802c708:	6022      	streq	r2, [r4, #0]
 802c70a:	6004      	str	r4, [r0, #0]
 802c70c:	e7ec      	b.n	802c6e8 <_free_r+0x24>
 802c70e:	4613      	mov	r3, r2
 802c710:	685a      	ldr	r2, [r3, #4]
 802c712:	b10a      	cbz	r2, 802c718 <_free_r+0x54>
 802c714:	42a2      	cmp	r2, r4
 802c716:	d9fa      	bls.n	802c70e <_free_r+0x4a>
 802c718:	6819      	ldr	r1, [r3, #0]
 802c71a:	1858      	adds	r0, r3, r1
 802c71c:	42a0      	cmp	r0, r4
 802c71e:	d10b      	bne.n	802c738 <_free_r+0x74>
 802c720:	6820      	ldr	r0, [r4, #0]
 802c722:	4401      	add	r1, r0
 802c724:	1858      	adds	r0, r3, r1
 802c726:	4282      	cmp	r2, r0
 802c728:	6019      	str	r1, [r3, #0]
 802c72a:	d1dd      	bne.n	802c6e8 <_free_r+0x24>
 802c72c:	6810      	ldr	r0, [r2, #0]
 802c72e:	6852      	ldr	r2, [r2, #4]
 802c730:	605a      	str	r2, [r3, #4]
 802c732:	4401      	add	r1, r0
 802c734:	6019      	str	r1, [r3, #0]
 802c736:	e7d7      	b.n	802c6e8 <_free_r+0x24>
 802c738:	d902      	bls.n	802c740 <_free_r+0x7c>
 802c73a:	230c      	movs	r3, #12
 802c73c:	602b      	str	r3, [r5, #0]
 802c73e:	e7d3      	b.n	802c6e8 <_free_r+0x24>
 802c740:	6820      	ldr	r0, [r4, #0]
 802c742:	1821      	adds	r1, r4, r0
 802c744:	428a      	cmp	r2, r1
 802c746:	bf04      	itt	eq
 802c748:	6811      	ldreq	r1, [r2, #0]
 802c74a:	6852      	ldreq	r2, [r2, #4]
 802c74c:	6062      	str	r2, [r4, #4]
 802c74e:	bf04      	itt	eq
 802c750:	1809      	addeq	r1, r1, r0
 802c752:	6021      	streq	r1, [r4, #0]
 802c754:	605c      	str	r4, [r3, #4]
 802c756:	e7c7      	b.n	802c6e8 <_free_r+0x24>
 802c758:	bd38      	pop	{r3, r4, r5, pc}
 802c75a:	bf00      	nop
 802c75c:	20011148 	.word	0x20011148

0802c760 <_malloc_r>:
 802c760:	b570      	push	{r4, r5, r6, lr}
 802c762:	1ccd      	adds	r5, r1, #3
 802c764:	f025 0503 	bic.w	r5, r5, #3
 802c768:	3508      	adds	r5, #8
 802c76a:	2d0c      	cmp	r5, #12
 802c76c:	bf38      	it	cc
 802c76e:	250c      	movcc	r5, #12
 802c770:	2d00      	cmp	r5, #0
 802c772:	4606      	mov	r6, r0
 802c774:	db01      	blt.n	802c77a <_malloc_r+0x1a>
 802c776:	42a9      	cmp	r1, r5
 802c778:	d903      	bls.n	802c782 <_malloc_r+0x22>
 802c77a:	230c      	movs	r3, #12
 802c77c:	6033      	str	r3, [r6, #0]
 802c77e:	2000      	movs	r0, #0
 802c780:	bd70      	pop	{r4, r5, r6, pc}
 802c782:	f000 fa43 	bl	802cc0c <__malloc_lock>
 802c786:	4a21      	ldr	r2, [pc, #132]	; (802c80c <_malloc_r+0xac>)
 802c788:	6814      	ldr	r4, [r2, #0]
 802c78a:	4621      	mov	r1, r4
 802c78c:	b991      	cbnz	r1, 802c7b4 <_malloc_r+0x54>
 802c78e:	4c20      	ldr	r4, [pc, #128]	; (802c810 <_malloc_r+0xb0>)
 802c790:	6823      	ldr	r3, [r4, #0]
 802c792:	b91b      	cbnz	r3, 802c79c <_malloc_r+0x3c>
 802c794:	4630      	mov	r0, r6
 802c796:	f000 f97d 	bl	802ca94 <_sbrk_r>
 802c79a:	6020      	str	r0, [r4, #0]
 802c79c:	4629      	mov	r1, r5
 802c79e:	4630      	mov	r0, r6
 802c7a0:	f000 f978 	bl	802ca94 <_sbrk_r>
 802c7a4:	1c43      	adds	r3, r0, #1
 802c7a6:	d124      	bne.n	802c7f2 <_malloc_r+0x92>
 802c7a8:	230c      	movs	r3, #12
 802c7aa:	6033      	str	r3, [r6, #0]
 802c7ac:	4630      	mov	r0, r6
 802c7ae:	f000 fa2e 	bl	802cc0e <__malloc_unlock>
 802c7b2:	e7e4      	b.n	802c77e <_malloc_r+0x1e>
 802c7b4:	680b      	ldr	r3, [r1, #0]
 802c7b6:	1b5b      	subs	r3, r3, r5
 802c7b8:	d418      	bmi.n	802c7ec <_malloc_r+0x8c>
 802c7ba:	2b0b      	cmp	r3, #11
 802c7bc:	d90f      	bls.n	802c7de <_malloc_r+0x7e>
 802c7be:	600b      	str	r3, [r1, #0]
 802c7c0:	50cd      	str	r5, [r1, r3]
 802c7c2:	18cc      	adds	r4, r1, r3
 802c7c4:	4630      	mov	r0, r6
 802c7c6:	f000 fa22 	bl	802cc0e <__malloc_unlock>
 802c7ca:	f104 000b 	add.w	r0, r4, #11
 802c7ce:	1d23      	adds	r3, r4, #4
 802c7d0:	f020 0007 	bic.w	r0, r0, #7
 802c7d4:	1ac3      	subs	r3, r0, r3
 802c7d6:	d0d3      	beq.n	802c780 <_malloc_r+0x20>
 802c7d8:	425a      	negs	r2, r3
 802c7da:	50e2      	str	r2, [r4, r3]
 802c7dc:	e7d0      	b.n	802c780 <_malloc_r+0x20>
 802c7de:	428c      	cmp	r4, r1
 802c7e0:	684b      	ldr	r3, [r1, #4]
 802c7e2:	bf16      	itet	ne
 802c7e4:	6063      	strne	r3, [r4, #4]
 802c7e6:	6013      	streq	r3, [r2, #0]
 802c7e8:	460c      	movne	r4, r1
 802c7ea:	e7eb      	b.n	802c7c4 <_malloc_r+0x64>
 802c7ec:	460c      	mov	r4, r1
 802c7ee:	6849      	ldr	r1, [r1, #4]
 802c7f0:	e7cc      	b.n	802c78c <_malloc_r+0x2c>
 802c7f2:	1cc4      	adds	r4, r0, #3
 802c7f4:	f024 0403 	bic.w	r4, r4, #3
 802c7f8:	42a0      	cmp	r0, r4
 802c7fa:	d005      	beq.n	802c808 <_malloc_r+0xa8>
 802c7fc:	1a21      	subs	r1, r4, r0
 802c7fe:	4630      	mov	r0, r6
 802c800:	f000 f948 	bl	802ca94 <_sbrk_r>
 802c804:	3001      	adds	r0, #1
 802c806:	d0cf      	beq.n	802c7a8 <_malloc_r+0x48>
 802c808:	6025      	str	r5, [r4, #0]
 802c80a:	e7db      	b.n	802c7c4 <_malloc_r+0x64>
 802c80c:	20011148 	.word	0x20011148
 802c810:	2001114c 	.word	0x2001114c

0802c814 <__sfputc_r>:
 802c814:	6893      	ldr	r3, [r2, #8]
 802c816:	3b01      	subs	r3, #1
 802c818:	2b00      	cmp	r3, #0
 802c81a:	b410      	push	{r4}
 802c81c:	6093      	str	r3, [r2, #8]
 802c81e:	da08      	bge.n	802c832 <__sfputc_r+0x1e>
 802c820:	6994      	ldr	r4, [r2, #24]
 802c822:	42a3      	cmp	r3, r4
 802c824:	db01      	blt.n	802c82a <__sfputc_r+0x16>
 802c826:	290a      	cmp	r1, #10
 802c828:	d103      	bne.n	802c832 <__sfputc_r+0x1e>
 802c82a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c82e:	f7fe bb67 	b.w	802af00 <__swbuf_r>
 802c832:	6813      	ldr	r3, [r2, #0]
 802c834:	1c58      	adds	r0, r3, #1
 802c836:	6010      	str	r0, [r2, #0]
 802c838:	7019      	strb	r1, [r3, #0]
 802c83a:	4608      	mov	r0, r1
 802c83c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c840:	4770      	bx	lr

0802c842 <__sfputs_r>:
 802c842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c844:	4606      	mov	r6, r0
 802c846:	460f      	mov	r7, r1
 802c848:	4614      	mov	r4, r2
 802c84a:	18d5      	adds	r5, r2, r3
 802c84c:	42ac      	cmp	r4, r5
 802c84e:	d101      	bne.n	802c854 <__sfputs_r+0x12>
 802c850:	2000      	movs	r0, #0
 802c852:	e007      	b.n	802c864 <__sfputs_r+0x22>
 802c854:	463a      	mov	r2, r7
 802c856:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c85a:	4630      	mov	r0, r6
 802c85c:	f7ff ffda 	bl	802c814 <__sfputc_r>
 802c860:	1c43      	adds	r3, r0, #1
 802c862:	d1f3      	bne.n	802c84c <__sfputs_r+0xa>
 802c864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802c868 <_vfiprintf_r>:
 802c868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c86c:	460c      	mov	r4, r1
 802c86e:	b09d      	sub	sp, #116	; 0x74
 802c870:	4617      	mov	r7, r2
 802c872:	461d      	mov	r5, r3
 802c874:	4606      	mov	r6, r0
 802c876:	b118      	cbz	r0, 802c880 <_vfiprintf_r+0x18>
 802c878:	6983      	ldr	r3, [r0, #24]
 802c87a:	b90b      	cbnz	r3, 802c880 <_vfiprintf_r+0x18>
 802c87c:	f7ff fb34 	bl	802bee8 <__sinit>
 802c880:	4b7c      	ldr	r3, [pc, #496]	; (802ca74 <_vfiprintf_r+0x20c>)
 802c882:	429c      	cmp	r4, r3
 802c884:	d158      	bne.n	802c938 <_vfiprintf_r+0xd0>
 802c886:	6874      	ldr	r4, [r6, #4]
 802c888:	89a3      	ldrh	r3, [r4, #12]
 802c88a:	0718      	lsls	r0, r3, #28
 802c88c:	d55e      	bpl.n	802c94c <_vfiprintf_r+0xe4>
 802c88e:	6923      	ldr	r3, [r4, #16]
 802c890:	2b00      	cmp	r3, #0
 802c892:	d05b      	beq.n	802c94c <_vfiprintf_r+0xe4>
 802c894:	2300      	movs	r3, #0
 802c896:	9309      	str	r3, [sp, #36]	; 0x24
 802c898:	2320      	movs	r3, #32
 802c89a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802c89e:	2330      	movs	r3, #48	; 0x30
 802c8a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802c8a4:	9503      	str	r5, [sp, #12]
 802c8a6:	f04f 0b01 	mov.w	fp, #1
 802c8aa:	46b8      	mov	r8, r7
 802c8ac:	4645      	mov	r5, r8
 802c8ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 802c8b2:	b10b      	cbz	r3, 802c8b8 <_vfiprintf_r+0x50>
 802c8b4:	2b25      	cmp	r3, #37	; 0x25
 802c8b6:	d154      	bne.n	802c962 <_vfiprintf_r+0xfa>
 802c8b8:	ebb8 0a07 	subs.w	sl, r8, r7
 802c8bc:	d00b      	beq.n	802c8d6 <_vfiprintf_r+0x6e>
 802c8be:	4653      	mov	r3, sl
 802c8c0:	463a      	mov	r2, r7
 802c8c2:	4621      	mov	r1, r4
 802c8c4:	4630      	mov	r0, r6
 802c8c6:	f7ff ffbc 	bl	802c842 <__sfputs_r>
 802c8ca:	3001      	adds	r0, #1
 802c8cc:	f000 80c2 	beq.w	802ca54 <_vfiprintf_r+0x1ec>
 802c8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c8d2:	4453      	add	r3, sl
 802c8d4:	9309      	str	r3, [sp, #36]	; 0x24
 802c8d6:	f898 3000 	ldrb.w	r3, [r8]
 802c8da:	2b00      	cmp	r3, #0
 802c8dc:	f000 80ba 	beq.w	802ca54 <_vfiprintf_r+0x1ec>
 802c8e0:	2300      	movs	r3, #0
 802c8e2:	f04f 32ff 	mov.w	r2, #4294967295
 802c8e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802c8ea:	9304      	str	r3, [sp, #16]
 802c8ec:	9307      	str	r3, [sp, #28]
 802c8ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802c8f2:	931a      	str	r3, [sp, #104]	; 0x68
 802c8f4:	46a8      	mov	r8, r5
 802c8f6:	2205      	movs	r2, #5
 802c8f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 802c8fc:	485e      	ldr	r0, [pc, #376]	; (802ca78 <_vfiprintf_r+0x210>)
 802c8fe:	f7f3 fba7 	bl	8020050 <memchr>
 802c902:	9b04      	ldr	r3, [sp, #16]
 802c904:	bb78      	cbnz	r0, 802c966 <_vfiprintf_r+0xfe>
 802c906:	06d9      	lsls	r1, r3, #27
 802c908:	bf44      	itt	mi
 802c90a:	2220      	movmi	r2, #32
 802c90c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802c910:	071a      	lsls	r2, r3, #28
 802c912:	bf44      	itt	mi
 802c914:	222b      	movmi	r2, #43	; 0x2b
 802c916:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802c91a:	782a      	ldrb	r2, [r5, #0]
 802c91c:	2a2a      	cmp	r2, #42	; 0x2a
 802c91e:	d02a      	beq.n	802c976 <_vfiprintf_r+0x10e>
 802c920:	9a07      	ldr	r2, [sp, #28]
 802c922:	46a8      	mov	r8, r5
 802c924:	2000      	movs	r0, #0
 802c926:	250a      	movs	r5, #10
 802c928:	4641      	mov	r1, r8
 802c92a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802c92e:	3b30      	subs	r3, #48	; 0x30
 802c930:	2b09      	cmp	r3, #9
 802c932:	d969      	bls.n	802ca08 <_vfiprintf_r+0x1a0>
 802c934:	b360      	cbz	r0, 802c990 <_vfiprintf_r+0x128>
 802c936:	e024      	b.n	802c982 <_vfiprintf_r+0x11a>
 802c938:	4b50      	ldr	r3, [pc, #320]	; (802ca7c <_vfiprintf_r+0x214>)
 802c93a:	429c      	cmp	r4, r3
 802c93c:	d101      	bne.n	802c942 <_vfiprintf_r+0xda>
 802c93e:	68b4      	ldr	r4, [r6, #8]
 802c940:	e7a2      	b.n	802c888 <_vfiprintf_r+0x20>
 802c942:	4b4f      	ldr	r3, [pc, #316]	; (802ca80 <_vfiprintf_r+0x218>)
 802c944:	429c      	cmp	r4, r3
 802c946:	bf08      	it	eq
 802c948:	68f4      	ldreq	r4, [r6, #12]
 802c94a:	e79d      	b.n	802c888 <_vfiprintf_r+0x20>
 802c94c:	4621      	mov	r1, r4
 802c94e:	4630      	mov	r0, r6
 802c950:	f7fe fb28 	bl	802afa4 <__swsetup_r>
 802c954:	2800      	cmp	r0, #0
 802c956:	d09d      	beq.n	802c894 <_vfiprintf_r+0x2c>
 802c958:	f04f 30ff 	mov.w	r0, #4294967295
 802c95c:	b01d      	add	sp, #116	; 0x74
 802c95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c962:	46a8      	mov	r8, r5
 802c964:	e7a2      	b.n	802c8ac <_vfiprintf_r+0x44>
 802c966:	4a44      	ldr	r2, [pc, #272]	; (802ca78 <_vfiprintf_r+0x210>)
 802c968:	1a80      	subs	r0, r0, r2
 802c96a:	fa0b f000 	lsl.w	r0, fp, r0
 802c96e:	4318      	orrs	r0, r3
 802c970:	9004      	str	r0, [sp, #16]
 802c972:	4645      	mov	r5, r8
 802c974:	e7be      	b.n	802c8f4 <_vfiprintf_r+0x8c>
 802c976:	9a03      	ldr	r2, [sp, #12]
 802c978:	1d11      	adds	r1, r2, #4
 802c97a:	6812      	ldr	r2, [r2, #0]
 802c97c:	9103      	str	r1, [sp, #12]
 802c97e:	2a00      	cmp	r2, #0
 802c980:	db01      	blt.n	802c986 <_vfiprintf_r+0x11e>
 802c982:	9207      	str	r2, [sp, #28]
 802c984:	e004      	b.n	802c990 <_vfiprintf_r+0x128>
 802c986:	4252      	negs	r2, r2
 802c988:	f043 0302 	orr.w	r3, r3, #2
 802c98c:	9207      	str	r2, [sp, #28]
 802c98e:	9304      	str	r3, [sp, #16]
 802c990:	f898 3000 	ldrb.w	r3, [r8]
 802c994:	2b2e      	cmp	r3, #46	; 0x2e
 802c996:	d10e      	bne.n	802c9b6 <_vfiprintf_r+0x14e>
 802c998:	f898 3001 	ldrb.w	r3, [r8, #1]
 802c99c:	2b2a      	cmp	r3, #42	; 0x2a
 802c99e:	d138      	bne.n	802ca12 <_vfiprintf_r+0x1aa>
 802c9a0:	9b03      	ldr	r3, [sp, #12]
 802c9a2:	1d1a      	adds	r2, r3, #4
 802c9a4:	681b      	ldr	r3, [r3, #0]
 802c9a6:	9203      	str	r2, [sp, #12]
 802c9a8:	2b00      	cmp	r3, #0
 802c9aa:	bfb8      	it	lt
 802c9ac:	f04f 33ff 	movlt.w	r3, #4294967295
 802c9b0:	f108 0802 	add.w	r8, r8, #2
 802c9b4:	9305      	str	r3, [sp, #20]
 802c9b6:	4d33      	ldr	r5, [pc, #204]	; (802ca84 <_vfiprintf_r+0x21c>)
 802c9b8:	f898 1000 	ldrb.w	r1, [r8]
 802c9bc:	2203      	movs	r2, #3
 802c9be:	4628      	mov	r0, r5
 802c9c0:	f7f3 fb46 	bl	8020050 <memchr>
 802c9c4:	b140      	cbz	r0, 802c9d8 <_vfiprintf_r+0x170>
 802c9c6:	2340      	movs	r3, #64	; 0x40
 802c9c8:	1b40      	subs	r0, r0, r5
 802c9ca:	fa03 f000 	lsl.w	r0, r3, r0
 802c9ce:	9b04      	ldr	r3, [sp, #16]
 802c9d0:	4303      	orrs	r3, r0
 802c9d2:	f108 0801 	add.w	r8, r8, #1
 802c9d6:	9304      	str	r3, [sp, #16]
 802c9d8:	f898 1000 	ldrb.w	r1, [r8]
 802c9dc:	482a      	ldr	r0, [pc, #168]	; (802ca88 <_vfiprintf_r+0x220>)
 802c9de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802c9e2:	2206      	movs	r2, #6
 802c9e4:	f108 0701 	add.w	r7, r8, #1
 802c9e8:	f7f3 fb32 	bl	8020050 <memchr>
 802c9ec:	2800      	cmp	r0, #0
 802c9ee:	d037      	beq.n	802ca60 <_vfiprintf_r+0x1f8>
 802c9f0:	4b26      	ldr	r3, [pc, #152]	; (802ca8c <_vfiprintf_r+0x224>)
 802c9f2:	bb1b      	cbnz	r3, 802ca3c <_vfiprintf_r+0x1d4>
 802c9f4:	9b03      	ldr	r3, [sp, #12]
 802c9f6:	3307      	adds	r3, #7
 802c9f8:	f023 0307 	bic.w	r3, r3, #7
 802c9fc:	3308      	adds	r3, #8
 802c9fe:	9303      	str	r3, [sp, #12]
 802ca00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ca02:	444b      	add	r3, r9
 802ca04:	9309      	str	r3, [sp, #36]	; 0x24
 802ca06:	e750      	b.n	802c8aa <_vfiprintf_r+0x42>
 802ca08:	fb05 3202 	mla	r2, r5, r2, r3
 802ca0c:	2001      	movs	r0, #1
 802ca0e:	4688      	mov	r8, r1
 802ca10:	e78a      	b.n	802c928 <_vfiprintf_r+0xc0>
 802ca12:	2300      	movs	r3, #0
 802ca14:	f108 0801 	add.w	r8, r8, #1
 802ca18:	9305      	str	r3, [sp, #20]
 802ca1a:	4619      	mov	r1, r3
 802ca1c:	250a      	movs	r5, #10
 802ca1e:	4640      	mov	r0, r8
 802ca20:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ca24:	3a30      	subs	r2, #48	; 0x30
 802ca26:	2a09      	cmp	r2, #9
 802ca28:	d903      	bls.n	802ca32 <_vfiprintf_r+0x1ca>
 802ca2a:	2b00      	cmp	r3, #0
 802ca2c:	d0c3      	beq.n	802c9b6 <_vfiprintf_r+0x14e>
 802ca2e:	9105      	str	r1, [sp, #20]
 802ca30:	e7c1      	b.n	802c9b6 <_vfiprintf_r+0x14e>
 802ca32:	fb05 2101 	mla	r1, r5, r1, r2
 802ca36:	2301      	movs	r3, #1
 802ca38:	4680      	mov	r8, r0
 802ca3a:	e7f0      	b.n	802ca1e <_vfiprintf_r+0x1b6>
 802ca3c:	ab03      	add	r3, sp, #12
 802ca3e:	9300      	str	r3, [sp, #0]
 802ca40:	4622      	mov	r2, r4
 802ca42:	4b13      	ldr	r3, [pc, #76]	; (802ca90 <_vfiprintf_r+0x228>)
 802ca44:	a904      	add	r1, sp, #16
 802ca46:	4630      	mov	r0, r6
 802ca48:	f7fd fe16 	bl	802a678 <_printf_float>
 802ca4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 802ca50:	4681      	mov	r9, r0
 802ca52:	d1d5      	bne.n	802ca00 <_vfiprintf_r+0x198>
 802ca54:	89a3      	ldrh	r3, [r4, #12]
 802ca56:	065b      	lsls	r3, r3, #25
 802ca58:	f53f af7e 	bmi.w	802c958 <_vfiprintf_r+0xf0>
 802ca5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ca5e:	e77d      	b.n	802c95c <_vfiprintf_r+0xf4>
 802ca60:	ab03      	add	r3, sp, #12
 802ca62:	9300      	str	r3, [sp, #0]
 802ca64:	4622      	mov	r2, r4
 802ca66:	4b0a      	ldr	r3, [pc, #40]	; (802ca90 <_vfiprintf_r+0x228>)
 802ca68:	a904      	add	r1, sp, #16
 802ca6a:	4630      	mov	r0, r6
 802ca6c:	f7fe f8ba 	bl	802abe4 <_printf_i>
 802ca70:	e7ec      	b.n	802ca4c <_vfiprintf_r+0x1e4>
 802ca72:	bf00      	nop
 802ca74:	0802cdfc 	.word	0x0802cdfc
 802ca78:	0802cf3c 	.word	0x0802cf3c
 802ca7c:	0802ce1c 	.word	0x0802ce1c
 802ca80:	0802cddc 	.word	0x0802cddc
 802ca84:	0802cf42 	.word	0x0802cf42
 802ca88:	0802cf46 	.word	0x0802cf46
 802ca8c:	0802a679 	.word	0x0802a679
 802ca90:	0802c843 	.word	0x0802c843

0802ca94 <_sbrk_r>:
 802ca94:	b538      	push	{r3, r4, r5, lr}
 802ca96:	4c06      	ldr	r4, [pc, #24]	; (802cab0 <_sbrk_r+0x1c>)
 802ca98:	2300      	movs	r3, #0
 802ca9a:	4605      	mov	r5, r0
 802ca9c:	4608      	mov	r0, r1
 802ca9e:	6023      	str	r3, [r4, #0]
 802caa0:	f7f9 f9ba 	bl	8025e18 <_sbrk>
 802caa4:	1c43      	adds	r3, r0, #1
 802caa6:	d102      	bne.n	802caae <_sbrk_r+0x1a>
 802caa8:	6823      	ldr	r3, [r4, #0]
 802caaa:	b103      	cbz	r3, 802caae <_sbrk_r+0x1a>
 802caac:	602b      	str	r3, [r5, #0]
 802caae:	bd38      	pop	{r3, r4, r5, pc}
 802cab0:	2001762c 	.word	0x2001762c

0802cab4 <__sread>:
 802cab4:	b510      	push	{r4, lr}
 802cab6:	460c      	mov	r4, r1
 802cab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cabc:	f000 f8a8 	bl	802cc10 <_read_r>
 802cac0:	2800      	cmp	r0, #0
 802cac2:	bfab      	itete	ge
 802cac4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802cac6:	89a3      	ldrhlt	r3, [r4, #12]
 802cac8:	181b      	addge	r3, r3, r0
 802caca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802cace:	bfac      	ite	ge
 802cad0:	6563      	strge	r3, [r4, #84]	; 0x54
 802cad2:	81a3      	strhlt	r3, [r4, #12]
 802cad4:	bd10      	pop	{r4, pc}

0802cad6 <__swrite>:
 802cad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cada:	461f      	mov	r7, r3
 802cadc:	898b      	ldrh	r3, [r1, #12]
 802cade:	05db      	lsls	r3, r3, #23
 802cae0:	4605      	mov	r5, r0
 802cae2:	460c      	mov	r4, r1
 802cae4:	4616      	mov	r6, r2
 802cae6:	d505      	bpl.n	802caf4 <__swrite+0x1e>
 802cae8:	2302      	movs	r3, #2
 802caea:	2200      	movs	r2, #0
 802caec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802caf0:	f000 f868 	bl	802cbc4 <_lseek_r>
 802caf4:	89a3      	ldrh	r3, [r4, #12]
 802caf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802cafa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802cafe:	81a3      	strh	r3, [r4, #12]
 802cb00:	4632      	mov	r2, r6
 802cb02:	463b      	mov	r3, r7
 802cb04:	4628      	mov	r0, r5
 802cb06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802cb0a:	f000 b817 	b.w	802cb3c <_write_r>

0802cb0e <__sseek>:
 802cb0e:	b510      	push	{r4, lr}
 802cb10:	460c      	mov	r4, r1
 802cb12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cb16:	f000 f855 	bl	802cbc4 <_lseek_r>
 802cb1a:	1c43      	adds	r3, r0, #1
 802cb1c:	89a3      	ldrh	r3, [r4, #12]
 802cb1e:	bf15      	itete	ne
 802cb20:	6560      	strne	r0, [r4, #84]	; 0x54
 802cb22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802cb26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802cb2a:	81a3      	strheq	r3, [r4, #12]
 802cb2c:	bf18      	it	ne
 802cb2e:	81a3      	strhne	r3, [r4, #12]
 802cb30:	bd10      	pop	{r4, pc}

0802cb32 <__sclose>:
 802cb32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cb36:	f000 b813 	b.w	802cb60 <_close_r>
	...

0802cb3c <_write_r>:
 802cb3c:	b538      	push	{r3, r4, r5, lr}
 802cb3e:	4c07      	ldr	r4, [pc, #28]	; (802cb5c <_write_r+0x20>)
 802cb40:	4605      	mov	r5, r0
 802cb42:	4608      	mov	r0, r1
 802cb44:	4611      	mov	r1, r2
 802cb46:	2200      	movs	r2, #0
 802cb48:	6022      	str	r2, [r4, #0]
 802cb4a:	461a      	mov	r2, r3
 802cb4c:	f7f9 f8f7 	bl	8025d3e <_write>
 802cb50:	1c43      	adds	r3, r0, #1
 802cb52:	d102      	bne.n	802cb5a <_write_r+0x1e>
 802cb54:	6823      	ldr	r3, [r4, #0]
 802cb56:	b103      	cbz	r3, 802cb5a <_write_r+0x1e>
 802cb58:	602b      	str	r3, [r5, #0]
 802cb5a:	bd38      	pop	{r3, r4, r5, pc}
 802cb5c:	2001762c 	.word	0x2001762c

0802cb60 <_close_r>:
 802cb60:	b538      	push	{r3, r4, r5, lr}
 802cb62:	4c06      	ldr	r4, [pc, #24]	; (802cb7c <_close_r+0x1c>)
 802cb64:	2300      	movs	r3, #0
 802cb66:	4605      	mov	r5, r0
 802cb68:	4608      	mov	r0, r1
 802cb6a:	6023      	str	r3, [r4, #0]
 802cb6c:	f7f9 f920 	bl	8025db0 <_close>
 802cb70:	1c43      	adds	r3, r0, #1
 802cb72:	d102      	bne.n	802cb7a <_close_r+0x1a>
 802cb74:	6823      	ldr	r3, [r4, #0]
 802cb76:	b103      	cbz	r3, 802cb7a <_close_r+0x1a>
 802cb78:	602b      	str	r3, [r5, #0]
 802cb7a:	bd38      	pop	{r3, r4, r5, pc}
 802cb7c:	2001762c 	.word	0x2001762c

0802cb80 <_fstat_r>:
 802cb80:	b538      	push	{r3, r4, r5, lr}
 802cb82:	4c07      	ldr	r4, [pc, #28]	; (802cba0 <_fstat_r+0x20>)
 802cb84:	2300      	movs	r3, #0
 802cb86:	4605      	mov	r5, r0
 802cb88:	4608      	mov	r0, r1
 802cb8a:	4611      	mov	r1, r2
 802cb8c:	6023      	str	r3, [r4, #0]
 802cb8e:	f7f9 f91b 	bl	8025dc8 <_fstat>
 802cb92:	1c43      	adds	r3, r0, #1
 802cb94:	d102      	bne.n	802cb9c <_fstat_r+0x1c>
 802cb96:	6823      	ldr	r3, [r4, #0]
 802cb98:	b103      	cbz	r3, 802cb9c <_fstat_r+0x1c>
 802cb9a:	602b      	str	r3, [r5, #0]
 802cb9c:	bd38      	pop	{r3, r4, r5, pc}
 802cb9e:	bf00      	nop
 802cba0:	2001762c 	.word	0x2001762c

0802cba4 <_isatty_r>:
 802cba4:	b538      	push	{r3, r4, r5, lr}
 802cba6:	4c06      	ldr	r4, [pc, #24]	; (802cbc0 <_isatty_r+0x1c>)
 802cba8:	2300      	movs	r3, #0
 802cbaa:	4605      	mov	r5, r0
 802cbac:	4608      	mov	r0, r1
 802cbae:	6023      	str	r3, [r4, #0]
 802cbb0:	f7f9 f91a 	bl	8025de8 <_isatty>
 802cbb4:	1c43      	adds	r3, r0, #1
 802cbb6:	d102      	bne.n	802cbbe <_isatty_r+0x1a>
 802cbb8:	6823      	ldr	r3, [r4, #0]
 802cbba:	b103      	cbz	r3, 802cbbe <_isatty_r+0x1a>
 802cbbc:	602b      	str	r3, [r5, #0]
 802cbbe:	bd38      	pop	{r3, r4, r5, pc}
 802cbc0:	2001762c 	.word	0x2001762c

0802cbc4 <_lseek_r>:
 802cbc4:	b538      	push	{r3, r4, r5, lr}
 802cbc6:	4c07      	ldr	r4, [pc, #28]	; (802cbe4 <_lseek_r+0x20>)
 802cbc8:	4605      	mov	r5, r0
 802cbca:	4608      	mov	r0, r1
 802cbcc:	4611      	mov	r1, r2
 802cbce:	2200      	movs	r2, #0
 802cbd0:	6022      	str	r2, [r4, #0]
 802cbd2:	461a      	mov	r2, r3
 802cbd4:	f7f9 f913 	bl	8025dfe <_lseek>
 802cbd8:	1c43      	adds	r3, r0, #1
 802cbda:	d102      	bne.n	802cbe2 <_lseek_r+0x1e>
 802cbdc:	6823      	ldr	r3, [r4, #0]
 802cbde:	b103      	cbz	r3, 802cbe2 <_lseek_r+0x1e>
 802cbe0:	602b      	str	r3, [r5, #0]
 802cbe2:	bd38      	pop	{r3, r4, r5, pc}
 802cbe4:	2001762c 	.word	0x2001762c

0802cbe8 <__ascii_mbtowc>:
 802cbe8:	b082      	sub	sp, #8
 802cbea:	b901      	cbnz	r1, 802cbee <__ascii_mbtowc+0x6>
 802cbec:	a901      	add	r1, sp, #4
 802cbee:	b142      	cbz	r2, 802cc02 <__ascii_mbtowc+0x1a>
 802cbf0:	b14b      	cbz	r3, 802cc06 <__ascii_mbtowc+0x1e>
 802cbf2:	7813      	ldrb	r3, [r2, #0]
 802cbf4:	600b      	str	r3, [r1, #0]
 802cbf6:	7812      	ldrb	r2, [r2, #0]
 802cbf8:	1c10      	adds	r0, r2, #0
 802cbfa:	bf18      	it	ne
 802cbfc:	2001      	movne	r0, #1
 802cbfe:	b002      	add	sp, #8
 802cc00:	4770      	bx	lr
 802cc02:	4610      	mov	r0, r2
 802cc04:	e7fb      	b.n	802cbfe <__ascii_mbtowc+0x16>
 802cc06:	f06f 0001 	mvn.w	r0, #1
 802cc0a:	e7f8      	b.n	802cbfe <__ascii_mbtowc+0x16>

0802cc0c <__malloc_lock>:
 802cc0c:	4770      	bx	lr

0802cc0e <__malloc_unlock>:
 802cc0e:	4770      	bx	lr

0802cc10 <_read_r>:
 802cc10:	b538      	push	{r3, r4, r5, lr}
 802cc12:	4c07      	ldr	r4, [pc, #28]	; (802cc30 <_read_r+0x20>)
 802cc14:	4605      	mov	r5, r0
 802cc16:	4608      	mov	r0, r1
 802cc18:	4611      	mov	r1, r2
 802cc1a:	2200      	movs	r2, #0
 802cc1c:	6022      	str	r2, [r4, #0]
 802cc1e:	461a      	mov	r2, r3
 802cc20:	f7f9 f8a9 	bl	8025d76 <_read>
 802cc24:	1c43      	adds	r3, r0, #1
 802cc26:	d102      	bne.n	802cc2e <_read_r+0x1e>
 802cc28:	6823      	ldr	r3, [r4, #0]
 802cc2a:	b103      	cbz	r3, 802cc2e <_read_r+0x1e>
 802cc2c:	602b      	str	r3, [r5, #0]
 802cc2e:	bd38      	pop	{r3, r4, r5, pc}
 802cc30:	2001762c 	.word	0x2001762c

0802cc34 <__ascii_wctomb>:
 802cc34:	b149      	cbz	r1, 802cc4a <__ascii_wctomb+0x16>
 802cc36:	2aff      	cmp	r2, #255	; 0xff
 802cc38:	bf85      	ittet	hi
 802cc3a:	238a      	movhi	r3, #138	; 0x8a
 802cc3c:	6003      	strhi	r3, [r0, #0]
 802cc3e:	700a      	strbls	r2, [r1, #0]
 802cc40:	f04f 30ff 	movhi.w	r0, #4294967295
 802cc44:	bf98      	it	ls
 802cc46:	2001      	movls	r0, #1
 802cc48:	4770      	bx	lr
 802cc4a:	4608      	mov	r0, r1
 802cc4c:	4770      	bx	lr
	...

0802cc50 <_init>:
 802cc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cc52:	bf00      	nop
 802cc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cc56:	bc08      	pop	{r3}
 802cc58:	469e      	mov	lr, r3
 802cc5a:	4770      	bx	lr

0802cc5c <_fini>:
 802cc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cc5e:	bf00      	nop
 802cc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cc62:	bc08      	pop	{r3}
 802cc64:	469e      	mov	lr, r3
 802cc66:	4770      	bx	lr
